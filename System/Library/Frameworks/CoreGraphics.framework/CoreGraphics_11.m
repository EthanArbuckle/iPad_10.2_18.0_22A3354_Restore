uint64_t __type4_info_getTypeID_block_invoke()
{
  uint64_t result;

  result = pdf_register_cftype((uint64_t)&type4_info_getTypeID_class);
  type4_info_getTypeID_id = result;
  return result;
}

void type4_info_finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 96);
  if (v2)
    CFRelease(v2);
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 16));
  v3 = *(const void **)(a1 + 88);
  if (v3)
    CFRelease(v3);
  free(*(void **)(a1 + 80));
}

uint64_t thread_fun(void (**a1)(uint64_t))
{
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);

  v2 = *a1;
  v1 = a1[1];
  free(a1);
  v2((uint64_t)v1);
  return 0;
}

float64_t subdivide(float64x2_t *a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4, double a5)
{
  double *f64;
  double v6;
  double *v7;
  double v8;
  double v9;
  uint64_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64_t v14;
  double v15;
  double *v16;
  float64_t result;

  *a3 = *a1;
  f64 = a3[1].f64;
  v6 = 1.0 - a5;
  if (a2 == 2)
  {
    v7 = &a3[1].f64[1];
    a4[2] = a1[2];
    a3[1] = vmlaq_n_f64(vmulq_n_f64(a1[1], a5), *a1, v6);
    v8 = a1[1].f64[1];
    v9 = a1[2].f64[0] * a5 + v6 * a1[1].f64[0];
    v10 = 2;
  }
  else
  {
    a4[3] = a1[3];
    a3[1] = vmlaq_n_f64(vmulq_n_f64(a1[1], a5), *a1, v6);
    v11 = a1[2];
    v12 = vmlaq_n_f64(vmulq_n_f64(a1[3], a5), v11, v6);
    v13 = vmlaq_n_f64(vmulq_n_f64(v11, a5), a1[1], v6);
    a4[2] = v12;
    a3[2] = vmlaq_n_f64(vmulq_n_f64(v13, a5), a3[1], v6);
    f64 = a3[2].f64;
    v7 = &a3[2].f64[1];
    v9 = vmlad_n_f64(a4[2].f64[0] * a5, v6, v13.f64[0]);
    v8 = v13.f64[1];
    v10 = 3;
    a1 = a4;
  }
  a4[1].f64[0] = v9;
  v14 = a1[2].f64[1] * a5 + v6 * v8;
  a4[1].f64[1] = v14;
  v15 = v9 * a5 + v6 * *f64;
  v16 = a3[v10].f64;
  result = v14 * a5 + v6 * *v7;
  *v16 = v15;
  v16[1] = result;
  a4->f64[0] = v15;
  a4->f64[1] = result;
  return result;
}

__n128 CGFontFinderCreate(unint64_t a1, __n128 *a2)
{
  __n128 *v4;
  __n128 result;
  __n128 v6;

  if (a2)
  {
    if (!a2->n128_u32[0])
    {
      v4 = (__n128 *)malloc_type_calloc(1uLL, 0x38uLL, 0x1080040BF00B4C8uLL);
      v4->n128_u32[0] = 1;
      v4->n128_u64[1] = a1;
      v6 = *a2;
      result = a2[1];
      v4[3].n128_u64[0] = a2[2].n128_u64[0];
      v4[1] = v6;
      v4[2] = result;
    }
  }
  return result;
}

unsigned int *CGFontFinderRetain(unsigned int *result)
{
  unsigned int v1;

  if (result)
  {
    do
      v1 = __ldxr(result);
    while (__stxr(v1 + 1, result));
  }
  return result;
}

void CGFontFinderRelease(unsigned int *a1)
{
  unsigned int v2;
  unsigned int v3;
  void (*v4)(_QWORD);

  if (a1)
  {
    do
    {
      v2 = __ldxr(a1);
      v3 = v2 - 1;
    }
    while (__stxr(v3, a1));
    if (!v3)
    {
      v4 = (void (*)(_QWORD))*((_QWORD *)a1 + 6);
      if (v4)
        v4(*((_QWORD *)a1 + 1));
      free(a1);
    }
  }
}

uint64_t CGFontFinderCopyURLForName(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  if (a1 && a2 && (v2 = *(uint64_t (**)(_QWORD))(a1 + 24)) != 0)
    return v2(*(_QWORD *)(a1 + 8));
  else
    return 0;
}

uint64_t CGFontFinderCopyURLForPlatformFont(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  if (a1 && (v1 = *(uint64_t (**)(_QWORD))(a1 + 32)) != 0)
    return v1(*(_QWORD *)(a1 + 8));
  else
    return 0;
}

uint64_t CGFontFinderCopyAllURLs(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  if (a1 && (v1 = *(uint64_t (**)(_QWORD))(a1 + 40)) != 0)
    return v1(*(_QWORD *)(a1 + 8));
  else
    return 0;
}

CFTypeRef CGFontFinderCreateFontWithPlatformFont(uint64_t a1, uint64_t a2)
{
  CFTypeRef v2;
  uint64_t (*v3)(_QWORD);
  const __CFURL *v4;
  const __CFURL *v5;
  __CFDictionary *FontsWithURL;
  const __CFArray *v7;
  const void *ValueAtIndex;
  char Count;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = 0;
  if (a1 && a2)
  {
    v3 = *(uint64_t (**)(_QWORD))(a1 + 32);
    if (v3 && (v4 = (const __CFURL *)v3(*(_QWORD *)(a1 + 8))) != 0)
    {
      v5 = v4;
      FontsWithURL = CGFontCreateFontsWithURL(v4);
      if (FontsWithURL)
      {
        v7 = FontsWithURL;
        if (CFArrayGetCount(FontsWithURL) != 1)
        {
          Count = CFArrayGetCount(v7);
          _CGHandleAssert("CGFontFinderCreateFontWithPlatformFont", 134, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Fonts/CGFontFinder.c", "CFArrayGetCount(fonts) == 1", "count = %ld", v11, v12, v13, Count);
        }
        CFRelease(v5);
        ValueAtIndex = CFArrayGetValueAtIndex(v7, 0);
        v2 = CFRetain(ValueAtIndex);
        v5 = v7;
      }
      else
      {
        v2 = 0;
      }
      CFRelease(v5);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void CGFontFinderApplyFunction(uint64_t a1, uint64_t (*a2)(const void *, uint64_t), uint64_t a3)
{
  uint64_t (*v4)(_QWORD);
  const __CFArray *v6;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex i;
  const __CFURL *ValueAtIndex;
  __CFDictionary *FontsWithURL;
  const __CFArray *v13;
  const void *v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a1)
  {
    if (a2)
    {
      v4 = *(uint64_t (**)(_QWORD))(a1 + 40);
      if (v4)
      {
        v6 = (const __CFArray *)v4(*(_QWORD *)(a1 + 8));
        if (v6)
        {
          v7 = v6;
          Count = CFArrayGetCount(v6);
          if (Count)
          {
            v9 = Count;
            for (i = 0; i != v9; ++i)
            {
              ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(v7, i);
              FontsWithURL = CGFontCreateFontsWithURL(ValueAtIndex);
              if (FontsWithURL)
              {
                v13 = FontsWithURL;
                if (CFArrayGetCount(FontsWithURL) != 1)
                {
                  v16 = CFArrayGetCount(v13);
                  _CGHandleAssert("CGFontFinderApplyFunction", 165, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Fonts/CGFontFinder.c", "CFArrayGetCount(fonts) == 1", "count = %ld", v17, v18, v19, v16);
                }
                v14 = CFArrayGetValueAtIndex(v13, 0);
                v15 = a2(v14, a3);
                CFRelease(v13);
                if (v15)
                  break;
              }
            }
          }
          CFRelease(v7);
        }
      }
    }
  }
}

uint64_t CGFontFinderSetDefault(unsigned int *a1)
{
  unsigned int v2;

  pthread_mutex_lock(&default_font_finder_mutex);
  if (a1)
  {
    do
      v2 = __ldxr(a1);
    while (__stxr(v2 + 1, a1));
  }
  CGFontFinderRelease((unsigned int *)default_font_finder);
  default_font_finder = (uint64_t)a1;
  return pthread_mutex_unlock(&default_font_finder_mutex);
}

void doLoadVTable()
{
  uint64_t v0;
  const char **i;

  v0 = 0;
  didLoadVTable = 1;
  for (i = (const char **)&links; strcmp("cg_jbig2_library_link_symbol", *i); i += 2)
  {
    if (++v0 == 7)
    {
      pdf_error("no JBIG2 library available.");
      return;
    }
  }
  jbig2_vtable = ((uint64_t (*)(void))(&links)[2 * v0 + 1])();
}

CFDateRef CGPDFStringCopyDate(CFDateRef string)
{
  CFDateRef v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFTimeZone *v10;
  const __CFAllocator *v11;
  __CFCalendar *v12;
  int v13;
  CFAbsoluteTime at;
  unsigned int v15;
  uint64_t v16;
  char *v17;

  if (string)
  {
    v1 = string;
    if (*((_QWORD *)string + 3))
    {
      decrypt_string((uint64_t)string);
      v2 = (char *)v1 + 80;
      if (*((_QWORD *)v1 + 3))
        decrypt_string((uint64_t)v1);
    }
    else
    {
      v2 = (char *)string + 80;
    }
    v3 = *((_QWORD *)v1 + 9);
    v16 = v3;
    v17 = v2;
    if (v3 < 4)
      return 0;
    at = 0.0;
    if (*v2 == 68 && *((_BYTE *)v1 + 81) == 58)
    {
      v16 = v3 - 2;
      v17 = (char *)v1 + 82;
    }
    v15 = 0;
    if (!get_number(&v17, (unint64_t *)&v16, 4uLL, (int *)&v15))
      return 0;
    v4 = v15;
    if (!get_number(&v17, (unint64_t *)&v16, 2uLL, (int *)&v15))
    {
      v10 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v5 = 1;
      v6 = 1;
      goto LABEL_23;
    }
    v5 = v15;
    if (!get_number(&v17, (unint64_t *)&v16, 2uLL, (int *)&v15))
    {
      v10 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v6 = 1;
      goto LABEL_23;
    }
    v6 = v15;
    if (get_number(&v17, (unint64_t *)&v16, 2uLL, (int *)&v15))
    {
      v7 = v15;
      if (get_number(&v17, (unint64_t *)&v16, 2uLL, (int *)&v15))
      {
        v8 = v15;
        if (get_number(&v17, (unint64_t *)&v16, 2uLL, (int *)&v15))
        {
          v9 = v15;
          v10 = parse_time_zone(v17, v16);
          goto LABEL_23;
        }
        v10 = 0;
        goto LABEL_22;
      }
      v10 = 0;
    }
    else
    {
      v10 = 0;
      v7 = 0;
    }
    v8 = 0;
LABEL_22:
    v9 = 0;
LABEL_23:
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    string = CFCalendarCreateWithIdentifier((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFCalendarIdentifier)*MEMORY[0x1E0C9B008]);
    if (!string)
      return string;
    v12 = string;
    if (v10)
    {
      CFCalendarSetTimeZone(string, v10);
    }
    else
    {
      v10 = CFTimeZoneCreateWithTimeIntervalFromGMT(v11, 0.0);
      CFCalendarSetTimeZone(v12, v10);
      if (!v10)
        goto LABEL_28;
    }
    CFRelease(v10);
LABEL_28:
    v13 = CFCalendarComposeAbsoluteTime(v12, &at, "yMdHms", v4, v5, v6, v7, v8, v9);
    CFRelease(v12);
    if (v13)
      return CFDateCreate(v11, at);
    return 0;
  }
  return string;
}

uint64_t get_number(char **a1, unint64_t *a2, unint64_t a3, int *a4)
{
  int v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  char *v16;

  if (*a2 < a3)
    return 0;
  v9 = 0;
  v10 = *a1;
  v11 = MEMORY[0x1E0C80978];
  v12 = a3;
  do
  {
    v14 = *v10++;
    v13 = v14;
    if ((v14 & 0x80000000) != 0)
    {
      if (!__maskrune_l(v13, 0x400uLL, 0))
        return 0;
    }
    else if ((*(_DWORD *)(v11 + 4 * v13 + 60) & 0x400) == 0)
    {
      return 0;
    }
    v9 = v13 + 10 * v9 - 48;
    --v12;
  }
  while (v12);
  v15 = *a2;
  v16 = *a1;
  *a4 = v9;
  *a1 = &v16[a3];
  *a2 = v15 - a3;
  return 1;
}

CFTimeZoneRef parse_time_zone(char *a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  double v7;
  unsigned int v9;
  unint64_t v10;
  char *v11;

  if (!a2)
    return 0;
  v3 = *a1;
  v2 = v3;
  v11 = a1 + 1;
  if (v3 == 90)
  {
    v4 = 0;
  }
  else if (v2 == 45)
  {
    v4 = -1;
  }
  else
  {
    if (v2 != 43)
      return 0;
    v4 = 1;
  }
  v9 = 0;
  v10 = a2 - 1;
  if (get_number(&v11, &v10, 2uLL, (int *)&v9))
  {
    if (v9 <= 0x17)
    {
      if (v10--)
      {
        v6 = *v11++;
        if (v6 == 39)
        {
          v7 = (double)(int)(3600 * v4 * v9);
          if (!get_number(&v11, &v10, 2uLL, (int *)&v9))
            return CFTimeZoneCreateWithTimeIntervalFromGMT((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v7);
          if (v9 <= 0x3B && v10 && *v11 == 39)
          {
            v7 = v7 + (double)(int)(60 * v4 * v9);
            return CFTimeZoneCreateWithTimeIntervalFromGMT((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v7);
          }
        }
      }
    }
  }
  return 0;
}

char *lzw_filter_rewind(const void ***a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v9;
  char *result;

  if (*a1)
    v9 = **a1;
  else
    v9 = 0;
  CGPDFSourceRewind((uint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  lzw_decoder_release((void **)*a1);
  result = lzw_decoder_create(v9, *((_BYTE *)a1 + 8));
  *a1 = (const void **)result;
  return result;
}

uint64_t lzw_filter_refill(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v13;
  size_t v14;
  size_t v15;
  unsigned int code;
  __int16 v17;
  unsigned int v18;
  void *v19;
  char v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned __int16 v25;
  int v26;
  unsigned int v27;

  v8 = *a1;
  if (*a1 && !*(_BYTE *)(v8 + 9))
  {
    v9 = 0;
    v13 = (unsigned __int16 *)(v8 + 17444);
    v14 = *(_QWORD *)(v8 + 17464);
    while (1)
    {
      if (v14)
      {
        if (v14 >= a3 - v9)
          v15 = a3 - v9;
        else
          v15 = v14;
        memcpy((void *)(a2 + v9), (const void *)(*(_QWORD *)(v8 + 17480) + *(_QWORD *)(v8 + 17472) - v14), v15);
        v9 += v15;
        v14 = *(_QWORD *)(v8 + 17464) - v15;
        *(_QWORD *)(v8 + 17464) = v14;
      }
      if (v9 == a3)
        return a3;
      if (*(_BYTE *)(v8 + 8))
        return v9;
      if (v14)
        _CGHandleAssert("lzw_decode", 155, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Filters/LZW/lzw-decode.c", "d->pending == 0", "pending (%lu) is nonzero for decoder %p", a6, a7, a8, v14);
      code = lzw_read_code(v8, a2, a3, a4, a5, a6, a7, a8);
      if (code == 256)
      {
        *(_DWORD *)(v8 + 1056) = 9;
        *v13 = 258;
        *(_WORD *)(v8 + 17448) = 0;
        v21 = lzw_read_code(v8, a2, a3, a4, a5, a6, a7, a8);
        if (v21 != 257)
        {
          v20 = v21;
          *(_WORD *)(v8 + 17448) = v21;
          *(_WORD *)(v8 + 17446) = v21;
          v19 = (void *)v8;
LABEL_27:
          lzw_push(v19, v20);
          goto LABEL_28;
        }
      }
      else
      {
        v17 = code;
        if (code != 257)
        {
          v18 = *v13;
          if (v18 < 0x1000)
          {
            v22 = code;
            if (code >= v18)
            {
              v22 = *(unsigned __int16 *)(v8 + 17446);
              lzw_push((void *)v8, *(_WORD *)(v8 + 17448));
            }
            while (v22 >= 0x100)
            {
              if (v22 >= 0x1000)
                _CGHandleAssert("lzw_decode", 202, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Filters/LZW/lzw-decode.c", "code < LZW_TABLE_SIZE", "lzw code (%u) is outside of table bounds (%u)", a6, a7, a8, v22);
              v23 = v8 + 2 * v22;
              lzw_push((void *)v8, *(_WORD *)(v23 + 9252));
              v22 = *(unsigned __int16 *)(v23 + 1060);
              if (*(_QWORD *)(v8 + 17464) >> 1 >= 0x801uLL)
              {
                pdf_error("LZW decode: invalid chain sequence.");
                *(_BYTE *)(v8 + 9) = 1;
                goto LABEL_28;
              }
            }
            lzw_push((void *)v8, v22);
            *(_WORD *)(v8 + 17448) = v22;
            v24 = *(unsigned __int16 *)(v8 + 17446);
            if (v24 >= 0x1000)
              _CGHandleAssert("lzw_decode", 219, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Filters/LZW/lzw-decode.c", "d->oldCode < LZW_TABLE_SIZE", "lzw table building: old code (%u) is outside of table bounds (%u)", a6, a7, a8, *(_WORD *)(v8 + 17446));
            *(_WORD *)(v8 + 2 * *v13 + 1060) = v24;
            *(_WORD *)(v8 + 2 * *(unsigned __int16 *)(v8 + 17444) + 9252) = *(_WORD *)(v8 + 17448);
            *(_WORD *)(v8 + 17446) = v17;
            v25 = *v13 + 1;
            *v13 = v25;
            v26 = *(_DWORD *)(v8 + 1056);
            if (v26 <= 11)
            {
              v27 = (unsigned __int16)(~(unsigned __int16)(-1 << v26) - *(unsigned __int8 *)(v8 + 10));
              if (v27 < v25)
              {
                if (v27 + 1 != v25)
                  _CGHandleAssert("lzw_decode", 234, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Filters/LZW/lzw-decode.c", "d->freeCode == maxCode + 1", "sanity check failed that the free code(%u) should be maxCode(%u) +1", a6, a7, a8, v25);
                *(_DWORD *)(v8 + 1056) = v26 + 1;
              }
            }
            goto LABEL_28;
          }
          v19 = (void *)v8;
          v20 = v17;
          goto LABEL_27;
        }
      }
      *(_BYTE *)(v8 + 8) = 1;
LABEL_28:
      v14 = *(_QWORD *)(v8 + 17464);
      if (!v14)
        return v9;
    }
  }
  return 0;
}

void lzw_filter_finalize(void ***a1)
{
  if (a1)
  {
    lzw_decoder_release(*a1);
    free(a1);
  }
}

BOOL resample_float16_select(uint64_t a1, uint64_t a2, int a3)
{
  if (resample_float16_select_predicate != -1)
    dispatch_once(&resample_float16_select_predicate, &__block_literal_global_18526);
  if (a1 && a2)
  {
    if (a3 == 3)
    {
      if (a2 == 1)
        return 0;
      if (a2 == 4)
        *(uint64_t (**)())(a1 + 16) = resample_float16_select_float16_v_3cpp_ap[0];
      else
        *(_QWORD *)(a1 + 16) = resample_float16_select_float16_v_Ncpp_ap;
      *(_WORD *)(a1 + 112) = 2 * a2 - 2;
      *(_WORD *)(a1 + 114) = 2;
      switch(a2)
      {
        case 2:
          *(uint64_t (**)())(a1 + 24) = resample_float16_select_float16_h_1cpp_ap[0];
          break;
        case 4:
          *(uint64_t (**)())(a1 + 24) = resample_float16_select_float16_h_3cpp_ap[0];
          break;
        case 5:
          *(uint64_t (**)())(a1 + 24) = resample_float16_select_float16_h_4cpp_ap[0];
          break;
        default:
          *(uint64_t (**)())(a1 + 24) = resample_float16_select_float16_h_Ncpp_ap[0];
          break;
      }
    }
    else
    {
      if (a3 && a2 != 1)
      {
        if (a3 == 1)
        {
          if (a2 == 4)
            *(uint64_t (**)())(a1 + 16) = resample_float16_select_float16_v_3cpp_af[0];
          else
            *(uint64_t (**)())(a1 + 16) = resample_float16_select_float16_v_Ncpp_af[0];
        }
        else
        {
          if (a3 != 2)
            return 0;
          if (a2 == 4)
            *(uint64_t (**)())(a1 + 16) = resample_float16_select_float16_v_3cpp_al[0];
          else
            *(uint64_t (**)())(a1 + 16) = resample_float16_select_float16_v_Ncpp_al[0];
        }
      }
      else
      {
        *(_QWORD *)(a1 + 16) = resample_float16_v_Ncpp;
      }
      *(_WORD *)(a1 + 112) = 2 * a2;
      *(_WORD *)(a1 + 114) = 0;
      switch(a2)
      {
        case 1:
          *(uint64_t (**)())(a1 + 24) = resample_float16_select_float16_h_1cpp[0];
          break;
        case 3:
          *(uint64_t (**)())(a1 + 24) = resample_float16_select_float16_h_3cpp[0];
          break;
        case 4:
          *(uint64_t (**)())(a1 + 24) = resample_float16_select_float16_h_4cpp[0];
          break;
        default:
          *(uint64_t (**)())(a1 + 24) = resample_float16_select_float16_h_Ncpp[0];
          break;
      }
    }
    return (use_template_resampling_code() & 1) == 0 || resample_select_template(a1, a2, a3);
  }
  else
  {
    return 0;
  }
}

uint64_t resample_float16_v_Ncpp(uint64_t result, uint64_t a2, unsigned __int8 a3, int a4, float16x4_t **a5, uint64_t *a6)
{
  float16x4_t *v6;
  int v7;
  int *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t i;
  float16x4_t v12;
  uint64_t *v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v22;
  uint64_t *v25;
  int *v26;
  int v27;
  int v28;
  uint64_t v30;

  v6 = *a5;
  v7 = *(_DWORD *)(result + 4);
  v8 = (int *)(result + 8);
  v9 = a3 * a4;
  v10 = v9 & 0xFFFFFFFC;
  if ((int)v10 < 1)
  {
    LODWORD(i) = 0;
  }
  else
  {
    for (i = 0; i < v10; i += 4)
    {
      v12 = 0;
      if (v7)
      {
        v13 = a6;
        v14 = v8;
        v15 = v7;
        do
        {
          v16 = *v14++;
          _S1 = v16;
          __asm { FCVT            H1, S1 }
          v22 = *v13++;
          result = 2 * i;
          __asm { FCVT            S1, H1 }
          v12 = vcvt_f16_f32(vmlaq_n_f32(vcvtq_f32_f16(v12), vcvtq_f32_f16(*(float16x4_t *)(v22 + 2 * i)), _S1));
          --v15;
        }
        while (v15);
      }
      *v6++ = v12;
    }
  }
  if ((int)i < (int)v9)
  {
    i = i;
    do
    {
      _H0 = 0;
      if (v7)
      {
        v25 = a6;
        v26 = v8;
        v27 = v7;
        do
        {
          v28 = *v26++;
          _S1 = v28;
          __asm { FCVT            H1, S1 }
          v30 = *v25++;
          _H2 = *(_WORD *)(v30 + 2 * i);
          __asm
          {
            FCVT            S2, H2
            FCVT            S1, H1
            FCVT            S0, H0
          }
          _S0 = _S0 + (float)(_S2 * _S1);
          __asm { FCVT            H0, S0 }
          --v27;
        }
        while (v27);
      }
      v6->i16[0] = _H0;
      v6 = (float16x4_t *)((char *)v6 + 2);
      ++i;
    }
    while (i != v9);
  }
  return result;
}

_DWORD *resample_float16_h_Ncpp(_DWORD *result, unsigned int a2, unsigned __int8 a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int16 *v21;
  int *v22;
  int v23;
  int v24;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = a3;
    v10 = *a6;
    v11 = *a7;
    v12 = 4 * a2 + 8;
    v13 = a8;
    do
    {
      if (a4)
      {
        v14 = *(_WORD **)(a5 + 8 * v8);
        v15 = a4;
        v16 = result;
        do
        {
          if ((_DWORD)v9)
          {
            v17 = 0;
            v18 = v16[1];
            v19 = v10 + v8 * v11 + 2 * *v16 * (int)v9;
            do
            {
              _H0 = 0;
              if (v18)
              {
                v21 = (__int16 *)v19;
                v22 = v16 + 2;
                v23 = v18;
                do
                {
                  v24 = *v22++;
                  _S1 = v24;
                  __asm { FCVT            H1, S1 }
                  _H2 = *v21;
                  __asm
                  {
                    FCVT            S2, H2
                    FCVT            S1, H1
                    FCVT            S0, H0
                  }
                  _S0 = _S0 + (float)(_S2 * _S1);
                  __asm { FCVT            H0, S0 }
                  v21 += v9;
                  --v23;
                }
                while (v23);
              }
              *v14++ = _H0;
              ++v17;
              v19 += 2;
            }
            while (v17 != v9);
          }
          v16 = (_DWORD *)((char *)v16 + v12);
          --v15;
        }
        while (v15);
      }
      ++v8;
    }
    while (v8 != v13);
  }
  return result;
}

int *resample_float16_h_4cpp(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float16x4_t *v12;
  int v13;
  int *v14;
  int v15;
  int *v16;
  float16x4_t *v17;
  float16x4_t v18;
  int v19;
  float16x4_t v26;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = *a6;
    v10 = *a7;
    v11 = 4 * a2 + 8;
    do
    {
      if (a4)
      {
        v12 = *(float16x4_t **)(a5 + 8 * v8);
        v13 = a4;
        v14 = result;
        do
        {
          v15 = v14[1];
          if (v15)
          {
            v16 = v14 + 2;
            v17 = (float16x4_t *)(v9 + v8 * v10 + 8 * *v14);
            v18 = 0;
            do
            {
              v19 = *v16++;
              _S1 = v19;
              __asm
              {
                FCVT            H1, S1
                FCVT            S1, H1
              }
              v26 = *v17++;
              v18 = vcvt_f16_f32(vmlaq_n_f32(vcvtq_f32_f16(v18), vcvtq_f32_f16(v26), _S1));
              --v15;
            }
            while (v15);
          }
          else
          {
            v18 = 0;
          }
          *v12++ = v18;
          v14 = (int *)((char *)v14 + v11);
          --v13;
        }
        while (v13);
      }
      ++v8;
    }
    while (v8 != a8);
  }
  return result;
}

int *resample_float16_h_3cpp(int *result, unsigned int a2, double a3, double a4, double a5, double _D3, uint64_t a7, int a8, uint64_t a9, uint64_t *a10, int *a11, int a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int *v18;
  int v19;
  int *v20;
  uint64_t v21;
  float16x4_t v22;
  int v24;
  float32x4_t v33;

  if (a12 >= 1)
  {
    v12 = 0;
    v13 = *a10;
    v14 = *a11;
    v15 = 4 * a2 + 8;
    do
    {
      if (a8)
      {
        v16 = *(_QWORD *)(a9 + 8 * v12);
        v17 = a8;
        v18 = result;
        do
        {
          v19 = v18[1];
          if (v19)
          {
            v20 = v18 + 2;
            v21 = v13 + v12 * v14 + 6 * *v18;
            v22 = 0;
            _H0 = 0;
            do
            {
              v24 = *v20++;
              _S2 = v24;
              __asm { FCVT            H2, S2 }
              LOWORD(_D3) = *(_WORD *)v21;
              __asm
              {
                FCVT            S3, H3
                FCVT            S2, H2
                FCVT            S0, H0
              }
              _S0 = _S0 + (float)(*(float *)&_D3 * _S2);
              __asm { FCVT            H0, S0 }
              v33 = vcvtq_f32_f16(v22);
              LODWORD(_D3) = *(_DWORD *)(v21 + 2);
              *(_QWORD *)&_D3 = vcvtq_f32_f16(*(float16x4_t *)&_D3).u64[0];
              *(float32x2_t *)v33.f32 = vmla_n_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)&_D3, _S2);
              v22 = vcvt_f16_f32(v33);
              v21 += 6;
              --v19;
            }
            while (v19);
          }
          else
          {
            v22.i32[0] = 0;
            _H0 = 0;
          }
          *(_WORD *)v16 = _H0;
          *(_DWORD *)(v16 + 2) = v22.i32[0];
          v16 += 6;
          v18 = (int *)((char *)v18 + v15);
          --v17;
        }
        while (v17);
      }
      ++v12;
    }
    while (v12 != a12);
  }
  return result;
}

int *resample_float16_h_1cpp(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  int v13;
  int *v14;
  int v15;
  int *v16;
  uint64_t v18;
  int *v24;
  unsigned int v26;
  __int16 v27;
  int v49;
  __int16 *v51;
  int *v52;
  __int16 v53;
  int v59;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = *a6;
    v10 = *a7;
    v11 = 4 * a2 + 8;
    while (!a4)
    {
LABEL_14:
      if (++v8 == a8)
        return result;
    }
    v12 = *(_WORD **)(a5 + 8 * v8);
    v13 = a4;
    v14 = result;
    while (1)
    {
      v15 = v14[1];
      v16 = v14 + 2;
      _S0 = v14[2];
      v18 = v9 + v8 * v10 + 2 * *v14 - 2;
      __asm { FCVT            H1, S0 }
      if (v15 >= 4)
        break;
      _H0 = 0;
      if (v15)
        goto LABEL_11;
LABEL_13:
      *v12++ = _H0;
      v14 = (int *)((char *)v14 + v11);
      if (!--v13)
        goto LABEL_14;
    }
    v24 = v14 + 6;
    _H0 = 0;
    do
    {
      v26 = v15;
      v27 = *(_WORD *)(v18 + 8);
      v18 += 8;
      _H2 = v27;
      _H3 = *(_WORD *)(v18 - 6);
      v15 -= 4;
      _S4 = *(v24 - 3);
      _S5 = *(v24 - 2);
      __asm
      {
        FCVT            H4, S4
        FCVT            S3, H3
        FCVT            S1, H1
        FCVT            S0, H0
      }
      _S0 = _S0 + (float)(_S3 * _S1);
      LOWORD(_S1) = *(_WORD *)(v18 - 4);
      __asm
      {
        FCVT            H0, S0
        FCVT            H3, S5
      }
      LOWORD(_S5) = *(_WORD *)(v18 - 2);
      __asm
      {
        FCVT            S1, H1
        FCVT            S4, H4
        FCVT            S0, H0
      }
      _S0 = _S0 + (float)(_S1 * _S4);
      __asm { FCVT            H0, S0 }
      _S1 = *(v24 - 1);
      __asm
      {
        FCVT            H1, S1
        FCVT            S4, H5
        FCVT            S3, H3
        FCVT            S0, H0
      }
      _S0 = _S0 + (float)(_S4 * _S3);
      __asm
      {
        FCVT            H0, S0
        FCVT            S2, H2
        FCVT            S1, H1
        FCVT            S0, H0
      }
      _S0 = _S0 + (float)(_S2 * _S1);
      __asm { FCVT            H0, S0 }
      v49 = *v24;
      v24 += 4;
      _S1 = v49;
      __asm { FCVT            H1, S1 }
    }
    while (v26 > 7);
    v16 = v24 - 4;
    if (!v15)
      goto LABEL_13;
LABEL_11:
    v51 = (__int16 *)(v18 + 2);
    v52 = v16 + 1;
    do
    {
      v53 = *v51++;
      _H2 = v53;
      __asm
      {
        FCVT            S2, H2
        FCVT            S1, H1
        FCVT            S0, H0
      }
      _S0 = _S0 + (float)(_S2 * _S1);
      __asm { FCVT            H0, S0 }
      v59 = *v52++;
      _S1 = v59;
      __asm { FCVT            H1, S1 }
      --v15;
    }
    while (v15);
    goto LABEL_13;
  }
  return result;
}

uint64_t resample_float16_v_Ncpp_al(uint64_t result, float a2, uint64_t a3, unsigned __int8 a4, int a5, _QWORD *a6, uint64_t *a7)
{
  _WORD *v7;
  int v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v14;
  uint64_t *v16;
  int *v17;
  int v18;
  int v19;
  uint64_t v25;
  uint64_t v31;
  uint64_t *v42;
  int *v43;
  int v44;
  int v45;
  uint64_t v47;

  v7 = (_WORD *)(*a6 - 2);
  v8 = *(_DWORD *)(result + 4);
  v9 = (int *)(result + 8);
  v10 = a4 * a5;
  v11 = v10 & 0xFFFFFFFC;
  if ((int)v11 < 1)
  {
    LODWORD(v12) = 0;
    _S2 = 0.0;
    v14 = a4;
  }
  else
  {
    v12 = 0;
    _S2 = 0.0;
    LOWORD(a2) = 15360;
    v14 = a4;
    do
    {
      _D3 = 0;
      if (v8)
      {
        v16 = a7;
        v17 = v9;
        v18 = v8;
        do
        {
          v19 = *v17++;
          _S4 = v19;
          __asm { FCVT            H4, S4 }
          v25 = *v16++;
          __asm { FCVT            S4, H4 }
          _D3 = vcvt_f16_f32(vmlaq_n_f32(vcvtq_f32_f16(_D3), vcvtq_f32_f16(*(float16x4_t *)(v25 + 2 * v12)), _S4));
          --v18;
        }
        while (v18);
      }
      _S4 = *(float *)_D3.i32;
      __asm
      {
        FCVT            S5, H3
        FCVT            S6, H2
      }
      if (_S6 < _S5)
        _S2 = *(float *)_D3.i32;
      if ((v12 | 1) == v14)
      {
        __asm { FCVT            S5, H2 }
        if (_S5 < 0.0)
          _S2 = 0.0;
        if (_S5 <= 1.0)
          _S4 = _S2;
        else
          _S4 = a2;
        v31 = v14 + a4;
        v14 += a4;
        _S2 = 0.0;
      }
      else
      {
        v31 = v14;
      }
      v7[1] = LOWORD(_S4);
      LOWORD(_S4) = _D3.i16[1];
      __asm
      {
        FCVT            S5, H4
        FCVT            S6, H2
      }
      if (_S6 < _S5)
        _S2 = _S4;
      if ((v12 | 2) == v31)
      {
        __asm { FCVT            S5, H2 }
        if (_S5 < 0.0)
          _S2 = 0.0;
        if (_S5 <= 1.0)
          _S4 = _S2;
        else
          _S4 = a2;
        v31 = v14 + a4;
        v14 += a4;
        _S2 = 0.0;
      }
      v7[2] = LOWORD(_S4);
      LOWORD(_S4) = _D3.i16[2];
      __asm
      {
        FCVT            S5, H4
        FCVT            S6, H2
      }
      if (_S6 < _S5)
        _S2 = _S4;
      result = v12 | 3;
      if ((v12 | 3) == v31)
      {
        __asm { FCVT            S5, H2 }
        if (_S5 < 0.0)
          _S2 = 0.0;
        if (_S5 <= 1.0)
          _S4 = _S2;
        else
          _S4 = a2;
        v31 = v14 + a4;
        v14 += a4;
        _S2 = 0.0;
      }
      v7[3] = LOWORD(_S4);
      _D3.i16[0] = _D3.i16[3];
      __asm
      {
        FCVT            S4, H3
        FCVT            S5, H2
      }
      if (_S5 < _S4)
        _S2 = *(float *)_D3.i32;
      v12 += 4;
      if (v12 == v31)
      {
        __asm { FCVT            S4, H2 }
        if (_S4 < 0.0)
          _S2 = 0.0;
        if (_S4 <= 1.0)
          *(float *)_D3.i32 = _S2;
        else
          *(float *)_D3.i32 = a2;
        v14 += a4;
        _S2 = 0.0;
      }
      v7[4] = _D3.i16[0];
      v7 += 4;
    }
    while (v12 < v11);
  }
  if ((int)v12 < (int)v10)
  {
    v12 = v12;
    LOWORD(a2) = 15360;
    do
    {
      _S3 = 0.0;
      if (v8)
      {
        v42 = a7;
        v43 = v9;
        v44 = v8;
        do
        {
          v45 = *v43++;
          _S4 = v45;
          __asm { FCVT            H4, S4 }
          v47 = *v42++;
          result = v47;
          _H5 = *(_WORD *)(v47 + 2 * v12);
          __asm
          {
            FCVT            S5, H5
            FCVT            S4, H4
            FCVT            S3, H3
          }
          _S3 = _S3 + (float)(_S5 * _S4);
          __asm { FCVT            H3, S3 }
          --v44;
        }
        while (v44);
      }
      __asm
      {
        FCVT            S4, H3
        FCVT            S5, H2
      }
      if (_S5 < _S4)
        _S2 = _S3;
      if (++v12 == v14)
      {
        __asm { FCVT            S4, H2 }
        if (_S4 < 0.0)
          _S2 = 0.0;
        if (_S4 <= 1.0)
          _S3 = _S2;
        else
          _S3 = a2;
        v14 += a4;
        _S2 = 0.0;
      }
      v7[1] = LOWORD(_S3);
      ++v7;
    }
    while (v12 != v10);
  }
  return result;
}

uint64_t resample_float16_v_3cpp_al(uint64_t result, double a2, float a3, double a4, double a5, float _S4, uint64_t a7, unsigned __int8 a8, int a9, uint64_t *a10, uint64_t *a11)
{
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v16;
  int *v17;
  int v18;
  int v19;
  uint64_t v25;
  float v33;

  v11 = (a8 * a9) & 0xFFFFFFFC;
  if ((int)v11 >= 1)
  {
    v12 = 0;
    v13 = *(_DWORD *)(result + 4);
    v14 = *a10;
    LOWORD(a3) = 15360;
    do
    {
      _D3 = 0;
      if (v13)
      {
        v16 = a11;
        v17 = (int *)(result + 8);
        v18 = v13;
        do
        {
          v19 = *v17++;
          _S4 = v19;
          __asm { FCVT            H4, S4 }
          v25 = *v16++;
          __asm { FCVT            S4, H4 }
          _D3 = vcvt_f16_f32(vmlaq_n_f32(vcvtq_f32_f16(_D3), vcvtq_f32_f16(*(float16x4_t *)(v25 + 2 * v12)), _S4));
          --v18;
        }
        while (v18);
      }
      LOWORD(_S4) = _D3.i16[3];
      __asm
      {
        FCVT            S5, H4
        FCVT            S6, H3
      }
      if (_S6 > _S5)
        _S4 = *(float *)_D3.i32;
      LOWORD(_S5) = _D3.i16[1];
      __asm
      {
        FCVT            S6, H4
        FCVT            S7, H5
      }
      if (_S7 > _S6)
        _S4 = _S5;
      LOWORD(_S5) = _D3.i16[2];
      __asm
      {
        FCVT            S6, H4
        FCVT            S7, H5
      }
      if (_S7 > _S6)
        _S4 = _S5;
      *(_DWORD *)v14 = _D3.i32[0];
      *(_WORD *)(v14 + 4) = _D3.i16[2];
      __asm { FCVT            S3, H4 }
      if (_S3 < 0.0)
        _S4 = 0.0;
      if (_S3 <= 1.0)
        v33 = _S4;
      else
        v33 = a3;
      *(_WORD *)(v14 + 6) = LOWORD(v33);
      v14 += 8;
      v12 += 4;
    }
    while (v12 < v11);
  }
  return result;
}

uint64_t resample_float16_v_Ncpp_af(uint64_t result, float a2, uint64_t a3, unsigned __int8 a4, int a5, _QWORD *a6, uint64_t *a7)
{
  _WORD *v7;
  int v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v16;
  uint64_t *v18;
  int *v19;
  int v20;
  int v21;
  uint64_t v27;
  uint64_t v33;
  uint64_t *v44;
  int *v45;
  int v46;
  uint64_t v48;

  v7 = (_WORD *)(*a6 - 2);
  v8 = *(_DWORD *)(result + 4);
  v9 = (int *)(result + 8);
  v10 = a4;
  v11 = 2 - a4;
  v12 = a4 * a5;
  v13 = v12 & 0xFFFFFFFC;
  if ((int)v13 < 1)
  {
    LODWORD(v14) = 0;
    LOWORD(_S2) = 0;
    v16 = a4;
  }
  else
  {
    v14 = 0;
    result = (int)v11;
    _S2 = 0.0;
    LOWORD(a2) = 15360;
    v16 = a4;
    do
    {
      _D3 = 0;
      if (v8)
      {
        v18 = a7;
        v19 = v9;
        v20 = v8;
        do
        {
          v21 = *v19++;
          _S4 = v21;
          __asm { FCVT            H4, S4 }
          v27 = *v18++;
          __asm { FCVT            S4, H4 }
          _D3 = vcvt_f16_f32(vmlaq_n_f32(vcvtq_f32_f16(_D3), vcvtq_f32_f16(*(float16x4_t *)(v27 + 2 * v14)), _S4));
          --v20;
        }
        while (v20);
      }
      __asm
      {
        FCVT            S4, H3
        FCVT            S5, H2
      }
      if (_S5 >= _S4)
        _S4 = _S2;
      else
        _S4 = *(float *)_D3.i32;
      if ((v14 | 1) == v16)
      {
        _S2 = 0.0;
        __asm { FCVT            S5, H4 }
        if (_S5 >= 0.0)
          _S2 = _S4;
        if (_S5 > 1.0)
          _S2 = a2;
        v7[(int)v11] = LOWORD(_S2);
        v33 = v16 + v10;
        v16 += v10;
        _S4 = 0.0;
      }
      else
      {
        v33 = v16;
      }
      v7[1] = _D3.i16[0];
      LOWORD(_S2) = _D3.i16[1];
      __asm
      {
        FCVT            S5, H2
        FCVT            S6, H4
      }
      if (_S6 < _S5)
        _S4 = _S2;
      if ((v14 | 2) == v33)
      {
        __asm { FCVT            S6, H4 }
        if (_S6 < 0.0)
          _S4 = 0.0;
        if (_S6 > 1.0)
          _S4 = a2;
        v7[(int)v11 + 1] = LOWORD(_S4);
        v33 = v16 + v10;
        v16 += v10;
        _S4 = 0.0;
      }
      v7[2] = _D3.i16[1];
      LOWORD(_S2) = _D3.i16[2];
      __asm
      {
        FCVT            S5, H2
        FCVT            S6, H4
      }
      if (_S6 < _S5)
        _S4 = _S2;
      if ((v14 | 3) == v33)
      {
        __asm { FCVT            S6, H4 }
        if (_S6 < 0.0)
          _S4 = 0.0;
        if (_S6 > 1.0)
          _S4 = a2;
        v7[(int)v11 + 2] = LOWORD(_S4);
        v33 = v16 + v10;
        v16 += v10;
        _S4 = 0.0;
      }
      v7[3] = _D3.i16[2];
      _D3.i16[0] = _D3.i16[3];
      __asm
      {
        FCVT            S2, H3
        FCVT            S5, H4
      }
      if (_S5 >= _S2)
        _S2 = _S4;
      else
        _S2 = *(float *)_D3.i32;
      v14 += 4;
      if (v14 == v33)
      {
        __asm { FCVT            S5, H2 }
        if (_S5 < 0.0)
          _S2 = 0.0;
        if (_S5 > 1.0)
          _S2 = a2;
        v7[(int)v11 + 3] = LOWORD(_S2);
        v16 += v10;
        _S2 = 0.0;
      }
      v7[4] = _D3.i16[3];
      v7 += 4;
    }
    while (v14 < v13);
  }
  if ((int)v14 < (int)v12)
  {
    v14 = v14;
    LOWORD(a2) = 15360;
    do
    {
      _S3 = 0.0;
      if (v8)
      {
        v44 = a7;
        v45 = v9;
        LODWORD(result) = v8;
        do
        {
          v46 = *v45++;
          _S4 = v46;
          __asm { FCVT            H4, S4 }
          v48 = *v44++;
          _H5 = *(_WORD *)(v48 + 2 * v14);
          __asm
          {
            FCVT            S5, H5
            FCVT            S4, H4
            FCVT            S3, H3
          }
          _S3 = _S3 + (float)(_S5 * _S4);
          __asm { FCVT            H3, S3 }
          result = (result - 1);
        }
        while ((_DWORD)result);
      }
      __asm
      {
        FCVT            S4, H3
        FCVT            S5, H2
      }
      if (_S5 < _S4)
        _S2 = _S3;
      if (++v14 == v16)
      {
        __asm { FCVT            S5, H2 }
        if (_S5 < 0.0)
          _S2 = 0.0;
        if (_S5 > 1.0)
          _S2 = a2;
        v7[v11] = LOWORD(_S2);
        v16 += v10;
        LOWORD(_S2) = 0;
      }
      v7[1] = LOWORD(_S3);
      ++v7;
    }
    while (v14 != v12);
  }
  return result;
}

uint64_t resample_float16_v_3cpp_af(uint64_t result, double a2, float a3, uint64_t a4, unsigned __int8 a5, int a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t *v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v22;

  v8 = (a5 * a6) & 0xFFFFFFFC;
  if ((int)v8 >= 1)
  {
    v9 = 0;
    v10 = *(_DWORD *)(result + 4);
    v11 = *a7;
    LOWORD(a3) = 15360;
    do
    {
      _D3 = 0;
      if (v10)
      {
        v13 = a8;
        v14 = (int *)(result + 8);
        v15 = v10;
        do
        {
          v16 = *v14++;
          _S4 = v16;
          __asm { FCVT            H4, S4 }
          v22 = *v13++;
          __asm { FCVT            S4, H4 }
          _D3 = vcvt_f16_f32(vmlaq_n_f32(vcvtq_f32_f16(_D3), vcvtq_f32_f16(*(float16x4_t *)(v22 + 2 * v9)), _S4));
          --v15;
        }
        while (v15);
      }
      LOWORD(_S4) = _D3.i16[1];
      __asm
      {
        FCVT            S5, H3
        FCVT            S6, H4
      }
      if (_S6 <= _S5)
        _S4 = *(float *)_D3.i32;
      LOWORD(_S5) = _D3.i16[2];
      __asm
      {
        FCVT            S6, H4
        FCVT            S7, H5
      }
      if (_S7 > _S6)
        _S4 = _S5;
      LOWORD(_S5) = _D3.i16[3];
      __asm
      {
        FCVT            S6, H4
        FCVT            S7, H5
      }
      if (_S7 > _S6)
        _S4 = _S5;
      __asm { FCVT            S5, H4 }
      if (_S5 < 0.0)
        _S4 = 0.0;
      if (_S5 > 1.0)
        _S4 = a3;
      *(_WORD *)v11 = LOWORD(_S4);
      *(_WORD *)(v11 + 2) = _D3.i16[1];
      *(_DWORD *)(v11 + 4) = _D3.i32[1];
      v11 += 8;
      v9 += 4;
    }
    while (v9 < v8);
  }
  return result;
}

int *resample_float16_h_Ncpp_ap(int *result, unsigned int a2, unsigned __int8 a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  int v18;
  int *v19;
  int v20;
  int v21;
  int *v22;
  int v23;
  __int16 *v25;
  int *v26;
  int v27;
  int v28;
  _WORD *v39;
  int v41;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = a3;
    v10 = a3 - 1;
    v11 = *a6;
    v12 = a6[1];
    v13 = *a7;
    v14 = a7[1];
    v15 = a8;
    v16 = 2 * a3 - 2;
    do
    {
      if (a4)
      {
        v17 = *(_WORD **)(a5 + 8 * v8);
        v18 = a4;
        v19 = result;
        do
        {
          v21 = *v19;
          v20 = v19[1];
          v22 = v19 + 2;
          if (v9 >= 2)
          {
            v23 = 0;
            do
            {
              _H0 = 0;
              if (v20)
              {
                v25 = (__int16 *)(v11 + v8 * v13 + 2 * v21 * v10);
                v26 = v19 + 2;
                v27 = v20;
                do
                {
                  v28 = *v26++;
                  _S1 = v28;
                  __asm { FCVT            H1, S1 }
                  _H2 = *v25;
                  __asm
                  {
                    FCVT            S2, H2
                    FCVT            S1, H1
                    FCVT            S0, H0
                  }
                  _S0 = _S0 + (float)(_S2 * _S1);
                  __asm { FCVT            H0, S0 }
                  v25 = (__int16 *)((char *)v25 + v16);
                  --v27;
                }
                while (v27);
              }
              *v17++ = _H0;
              ++v23;
            }
            while (v23 != v10);
          }
          if (v20)
          {
            v39 = (_WORD *)(v12 + v8 * v14 + 2 + 2 * (v21 - 1));
            _H0 = 0;
            do
            {
              v41 = *v22++;
              _S1 = v41;
              __asm { FCVT            H1, S1 }
              LOWORD(v41) = *v39++;
              _H2 = v41;
              __asm
              {
                FCVT            S2, H2
                FCVT            S1, H1
                FCVT            S0, H0
              }
              _S0 = _S0 + (float)(_S2 * _S1);
              __asm { FCVT            H0, S0 }
              --v20;
            }
            while (v20);
          }
          else
          {
            _H0 = 0;
          }
          *v17++ = _H0;
          v19 += a2 + 2;
          --v18;
        }
        while (v18);
      }
      ++v8;
    }
    while (v8 != v15);
  }
  return result;
}

int *resample_float16_h_4cpp_ap(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float16x4_t *v15;
  int v16;
  int *v17;
  int v18;
  int *v19;
  uint64_t v20;
  float16x4_t *v21;
  _WORD *v22;
  float16x4_t v23;
  int v25;
  float16x4_t v33;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = *a6;
    v10 = a6[1];
    v11 = *a7;
    v12 = a7[1];
    v13 = 4 * a2 + 8;
    v14 = a8;
    do
    {
      if (a4)
      {
        v15 = *(float16x4_t **)(a5 + 8 * v8);
        v16 = a4;
        v17 = result;
        do
        {
          v18 = v17[1];
          if (v18)
          {
            v19 = v17 + 2;
            v20 = *v17;
            v21 = (float16x4_t *)(v9 + v8 * v11 + 8 * v20);
            v22 = (_WORD *)(v10 + v8 * v12 + 2 * v20);
            v23 = 0;
            _H0 = 0;
            do
            {
              v25 = *v19++;
              _S2 = v25;
              __asm
              {
                FCVT            H2, S2
                FCVT            S2, H2
              }
              LOWORD(v25) = *v22++;
              _H3 = v25;
              v33 = *v21++;
              v23 = vcvt_f16_f32(vmlaq_n_f32(vcvtq_f32_f16(v23), vcvtq_f32_f16(v33), _S2));
              __asm
              {
                FCVT            S3, H3
                FCVT            S0, H0
              }
              _S0 = _S0 + (float)(_S3 * _S2);
              __asm { FCVT            H0, S0 }
              --v18;
            }
            while (v18);
          }
          else
          {
            v23 = 0;
            _H0 = 0;
          }
          *v15 = v23;
          v15[1].i16[0] = _H0;
          v15 = (float16x4_t *)((char *)v15 + 10);
          v17 = (int *)((char *)v17 + v13);
          --v16;
        }
        while (v16);
      }
      ++v8;
    }
    while (v8 != v14);
  }
  return result;
}

_DWORD *resample_float16_h_3cpp_ap(_DWORD *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float16x4_t *v15;
  int v16;
  _DWORD *v17;
  int v18;
  int *v19;
  uint64_t v20;
  __int16 *v21;
  float16x4_t v22;
  int v23;
  float16x4_t v29;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = *a6;
    v10 = a6[1];
    v11 = *a7;
    v12 = a7[1];
    v13 = 4 * a2 + 8;
    v14 = a8;
    do
    {
      if (a4)
      {
        v15 = *(float16x4_t **)(a5 + 8 * v8);
        v16 = a4;
        v17 = result;
        do
        {
          v18 = v17[1];
          if (v18)
          {
            v19 = v17 + 2;
            v20 = v9 + v8 * v11 + 6 * *v17;
            v21 = (__int16 *)(v10 + v8 * v12 + 2 + 2 * (*v17 - 1));
            v22 = 0;
            do
            {
              v23 = *v19++;
              _S1 = v23;
              __asm { FCVT            H1, S1 }
              v29.i32[0] = *(_DWORD *)v20;
              __asm { FCVT            S1, H1 }
              v29.i16[2] = *(_WORD *)(v20 + 4);
              v29.i16[3] = *v21++;
              v22 = vcvt_f16_f32(vmlaq_n_f32(vcvtq_f32_f16(v22), vcvtq_f32_f16(v29), _S1));
              v20 += 6;
              --v18;
            }
            while (v18);
          }
          else
          {
            v22 = 0;
          }
          *v15++ = v22;
          v17 = (_DWORD *)((char *)v17 + v13);
          --v16;
        }
        while (v16);
      }
      ++v8;
    }
    while (v8 != v14);
  }
  return result;
}

int *resample_float16_h_1cpp_ap(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  int v16;
  int *v17;
  int v18;
  int *v19;
  uint64_t v21;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  unsigned int v32;
  int v42;
  uint64_t v53;
  uint64_t v54;
  __int16 *v55;
  __int16 *v56;
  int *v57;
  __int16 v58;
  __int16 v60;
  int v69;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = *a6;
    v10 = a6[1];
    v11 = *a7;
    v12 = a7[1];
    v13 = 4 * a2 + 8;
    v14 = a8;
    while (!a4)
    {
LABEL_14:
      if (++v8 == v14)
        return result;
    }
    v15 = *(_WORD **)(a5 + 8 * v8);
    v16 = a4;
    v17 = result;
    while (1)
    {
      v18 = v17[1];
      v19 = v17 + 2;
      _S0 = v17[2];
      v21 = *v17 - 1;
      __asm { FCVT            H2, S0 }
      if (v18 >= 2)
        break;
      v54 = v9 + v8 * v11 + 2 * v21;
      _H0 = 0;
      _H1 = 0;
      v53 = v10 + v8 * v12 + 2 * v21;
      if (v18)
        goto LABEL_11;
LABEL_13:
      *v15 = _H0;
      v15[1] = _H1;
      v15 += 2;
      v17 = (int *)((char *)v17 + v13);
      if (!--v16)
        goto LABEL_14;
    }
    v27 = 2 * v21;
    _H1 = 0;
    v29 = v9 + v8 * v11;
    v30 = v10 + v8 * v12;
    _H0 = 0;
    do
    {
      v32 = v18;
      _H3 = *(_WORD *)(v29 + v27 + 2);
      _H4 = *(_WORD *)(v30 + v27 + 2);
      v18 -= 2;
      __asm
      {
        FCVT            S3, H3
        FCVT            S2, H2
        FCVT            S0, H0
      }
      _S0 = _S0 + (float)(_S3 * _S2);
      __asm { FCVT            H0, S0 }
      LOWORD(_S3) = *(_WORD *)(v29 + v27 + 4);
      __asm
      {
        FCVT            S4, H4
        FCVT            S1, H1
      }
      _S1 = _S1 + (float)(_S4 * _S2);
      __asm { FCVT            H1, S1 }
      v42 = v19[2];
      v19 += 2;
      _S2 = v42;
      _S4 = *(v19 - 1);
      __asm { FCVT            H4, S4 }
      _H5 = *(_WORD *)(v30 + v27 + 4);
      __asm
      {
        FCVT            S3, H3
        FCVT            S4, H4
        FCVT            S0, H0
      }
      _S0 = _S0 + (float)(_S3 * _S4);
      __asm
      {
        FCVT            H0, S0
        FCVT            S3, H5
        FCVT            S1, H1
      }
      _S1 = _S1 + (float)(_S3 * _S4);
      __asm
      {
        FCVT            H1, S1
        FCVT            H2, S2
      }
      v30 += 4;
      v29 += 4;
    }
    while (v32 > 3);
    v53 = v30 + 2 * v21;
    v54 = v29 + 2 * v21;
    if (!v18)
      goto LABEL_13;
LABEL_11:
    v55 = (__int16 *)(v53 + 2);
    v56 = (__int16 *)(v54 + 2);
    v57 = v19 + 1;
    do
    {
      v58 = *v56++;
      _H3 = v58;
      v60 = *v55++;
      _H4 = v60;
      __asm
      {
        FCVT            S3, H3
        FCVT            S2, H2
        FCVT            S0, H0
      }
      _S0 = _S0 + (float)(_S3 * _S2);
      __asm
      {
        FCVT            H0, S0
        FCVT            S3, H4
        FCVT            S1, H1
      }
      _S1 = _S1 + (float)(_S3 * _S2);
      __asm { FCVT            H1, S1 }
      v69 = *v57++;
      _S2 = v69;
      __asm { FCVT            H2, S2 }
      --v18;
    }
    while (v18);
    goto LABEL_13;
  }
  return result;
}

uint64_t resample_float16_v_Ncpp_ap(uint64_t result, float a2, uint64_t a3, unsigned __int8 a4, int a5, _QWORD *a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v16;
  uint64_t *v18;
  int *v19;
  int v20;
  int v21;
  uint64_t v27;
  uint64_t *v42;
  int *v43;
  int v44;
  uint64_t v46;

  v7 = *a6 - 2;
  v8 = a6[1] - 2;
  v9 = *(_DWORD *)(result + 4);
  v10 = (int *)(result + 8);
  v11 = a4;
  v12 = a4 * a5;
  v13 = v12 & 0xFFFFFFFC;
  if ((int)v13 < 1)
  {
    LODWORD(v14) = 0;
    LOWORD(_S2) = 0;
    v16 = a4;
  }
  else
  {
    v14 = 0;
    LOWORD(_S2) = 0;
    LOWORD(a2) = 15360;
    v16 = a4;
    do
    {
      _D3 = 0;
      if (v9)
      {
        v18 = a7;
        v19 = v10;
        v20 = v9;
        do
        {
          v21 = *v19++;
          _S4 = v21;
          __asm { FCVT            H4, S4 }
          v27 = *v18++;
          __asm { FCVT            S4, H4 }
          _D3 = vcvt_f16_f32(vmlaq_n_f32(vcvtq_f32_f16(_D3), vcvtq_f32_f16(*(float16x4_t *)(v27 + 2 * v14)), _S4));
          --v20;
        }
        while (v20);
      }
      __asm
      {
        FCVT            S4, H3
        FCVT            S5, H2
      }
      if (_S5 < _S4)
        _S2 = *(float *)_D3.i32;
      if ((v14 | 1) == v16)
      {
        HIWORD(_S4) = 0;
        __asm { FCVT            S5, H2 }
        if (_S5 < 0.0)
          _S2 = 0.0;
        if (_S5 > 1.0)
          _S2 = a2;
        *(_WORD *)(v8 + 2) = LOWORD(_S2);
        v8 += 2;
        result = v16 + v11;
        v16 += v11;
        LOWORD(_S2) = 0;
      }
      else
      {
        result = v16;
        *(_WORD *)(v7 + 2) = _D3.i16[0];
        v7 += 2;
      }
      LOWORD(_S4) = _D3.i16[1];
      __asm
      {
        FCVT            S5, H4
        FCVT            S6, H2
      }
      if (_S6 < _S5)
        _S2 = _S4;
      if ((v14 | 2) == result)
      {
        HIWORD(_S4) = 0;
        __asm { FCVT            S5, H2 }
        if (_S5 < 0.0)
          _S2 = 0.0;
        if (_S5 > 1.0)
          _S2 = a2;
        *(_WORD *)(v8 + 2) = LOWORD(_S2);
        v8 += 2;
        result = v16 + v11;
        v16 += v11;
        LOWORD(_S2) = 0;
      }
      else
      {
        *(_WORD *)(v7 + 2) = _D3.i16[1];
        v7 += 2;
      }
      LOWORD(_S4) = _D3.i16[2];
      __asm
      {
        FCVT            S5, H4
        FCVT            S6, H2
      }
      if (_S6 < _S5)
        _S2 = _S4;
      if ((v14 | 3) == result)
      {
        __asm { FCVT            S5, H2 }
        if (_S5 < 0.0)
          _S2 = 0.0;
        if (_S5 > 1.0)
          _S2 = a2;
        *(_WORD *)(v8 + 2) = LOWORD(_S2);
        v8 += 2;
        result = v16 + v11;
        v16 += v11;
        LOWORD(_S2) = 0;
      }
      else
      {
        *(_WORD *)(v7 + 2) = _D3.i16[2];
        v7 += 2;
      }
      _D3.i16[0] = _D3.i16[3];
      __asm
      {
        FCVT            S4, H3
        FCVT            S5, H2
      }
      if (_S5 < _S4)
        _S2 = *(float *)_D3.i32;
      v14 += 4;
      if (v14 == result)
      {
        __asm { FCVT            S4, H2 }
        if (_S4 < 0.0)
          _S2 = 0.0;
        if (_S4 > 1.0)
          _S2 = a2;
        *(_WORD *)(v8 + 2) = LOWORD(_S2);
        v8 += 2;
        v16 += v11;
        LOWORD(_S2) = 0;
      }
      else
      {
        *(_WORD *)(v7 + 2) = _D3.i16[3];
        v7 += 2;
      }
    }
    while (v14 < v13);
  }
  if ((int)v14 < (int)v12)
  {
    v14 = v14;
    LOWORD(a2) = 15360;
    do
    {
      _S3 = 0.0;
      if (v9)
      {
        v42 = a7;
        v43 = v10;
        LODWORD(result) = v9;
        do
        {
          v44 = *v43++;
          _S4 = v44;
          __asm { FCVT            H4, S4 }
          v46 = *v42++;
          _H5 = *(_WORD *)(v46 + 2 * v14);
          __asm
          {
            FCVT            S5, H5
            FCVT            S4, H4
            FCVT            S3, H3
          }
          _S3 = _S3 + (float)(_S5 * _S4);
          __asm { FCVT            H3, S3 }
          result = (result - 1);
        }
        while ((_DWORD)result);
      }
      __asm
      {
        FCVT            S4, H3
        FCVT            S5, H2
      }
      if (_S5 < _S4)
        _S2 = _S3;
      if (++v14 == v16)
      {
        __asm { FCVT            S4, H2 }
        if (_S4 < 0.0)
          _S2 = 0.0;
        if (_S4 > 1.0)
          _S2 = a2;
        *(_WORD *)(v8 + 2) = LOWORD(_S2);
        v8 += 2;
        v16 += v11;
        LOWORD(_S2) = 0;
      }
      else
      {
        *(_WORD *)(v7 + 2) = LOWORD(_S3);
        v7 += 2;
      }
    }
    while (v14 != v12);
  }
  return result;
}

uint64_t resample_float16_v_3cpp_ap(uint64_t result, double a2, float a3, double a4, double a5, float _S4, uint64_t a7, unsigned __int8 a8, int a9, uint64_t *a10, uint64_t *a11)
{
  unint64_t v11;
  unint64_t v12;
  int v13;
  int *v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t *v18;
  int *v19;
  int v20;
  int v21;
  uint64_t v27;
  float v35;

  v11 = (a8 * a9) & 0xFFFFFFFC;
  if ((int)v11 >= 1)
  {
    v12 = 0;
    v13 = *(_DWORD *)(result + 4);
    v14 = (int *)(result + 8);
    v16 = *a10;
    v15 = (_WORD *)a10[1];
    LOWORD(a3) = 15360;
    do
    {
      _D3 = 0;
      if (v13)
      {
        v18 = a11;
        v19 = v14;
        v20 = v13;
        do
        {
          v21 = *v19++;
          _S4 = v21;
          __asm { FCVT            H4, S4 }
          v27 = *v18++;
          result = 2 * v12;
          __asm { FCVT            S4, H4 }
          _D3 = vcvt_f16_f32(vmlaq_n_f32(vcvtq_f32_f16(_D3), vcvtq_f32_f16(*(float16x4_t *)(v27 + 2 * v12)), _S4));
          --v20;
        }
        while (v20);
      }
      LOWORD(_S4) = _D3.i16[3];
      __asm
      {
        FCVT            S5, H4
        FCVT            S6, H3
      }
      if (_S6 > _S5)
        _S4 = *(float *)_D3.i32;
      LOWORD(_S5) = _D3.i16[1];
      __asm
      {
        FCVT            S6, H4
        FCVT            S7, H5
      }
      if (_S7 > _S6)
        _S4 = _S5;
      LOWORD(_S5) = _D3.i16[2];
      __asm
      {
        FCVT            S6, H4
        FCVT            S7, H5
      }
      if (_S7 > _S6)
        _S4 = _S5;
      *(_DWORD *)v16 = _D3.i32[0];
      *(_WORD *)(v16 + 4) = _D3.i16[2];
      v16 += 6;
      __asm { FCVT            S3, H4 }
      if (_S3 < 0.0)
        _S4 = 0.0;
      if (_S3 <= 1.0)
        v35 = _S4;
      else
        v35 = a3;
      *v15++ = LOWORD(v35);
      v12 += 4;
    }
    while (v12 < v11);
  }
  return result;
}

const void *__resample_float16_select_block_invoke()
{
  const void *result;
  BOOL v1;

  v1 = 1;
  result = get_BOOLean_property("USE_FP16_EXPANDED_FUNCTIONS", (const void *(*)(const char *))copy_local_domain_value, &v1);
  if (v1)
  {
    resample_float16_select_float16_v_3cpp_ap[0] = (uint64_t (*)())resample_float16_v_3cpp_ap_expanded;
    resample_float16_select_float16_v_Ncpp_ap = (uint64_t (*)())resample_float16_v_Ncpp_ap_expanded;
    resample_float16_select_float16_h_1cpp_ap[0] = (uint64_t (*)())resample_float16_h_1cpp_ap_expanded;
    resample_float16_select_float16_h_3cpp_ap[0] = (uint64_t (*)())resample_float16_h_3cpp_ap_expanded;
    resample_float16_select_float16_h_4cpp_ap[0] = (uint64_t (*)())resample_float16_h_4cpp_ap_expanded;
    resample_float16_select_float16_h_Ncpp_ap[0] = (uint64_t (*)())resample_float16_h_Ncpp_ap_expanded;
    resample_float16_select_float16_v_3cpp_af[0] = (uint64_t (*)())resample_float16_v_3cpp_af_expanded;
    resample_float16_select_float16_v_Ncpp_af[0] = (uint64_t (*)())resample_float16_v_Ncpp_af_expanded;
    resample_float16_select_float16_v_3cpp_al[0] = (uint64_t (*)())resample_float16_v_3cpp_al_expanded;
    resample_float16_select_float16_v_Ncpp_al[0] = (uint64_t (*)())resample_float16_v_Ncpp_al_expanded;
    resample_float16_select_float16_h_1cpp[0] = (uint64_t (*)())resample_float16_h_1cpp_expanded;
    resample_float16_select_float16_h_3cpp[0] = (uint64_t (*)())resample_float16_h_3cpp_expanded;
    resample_float16_select_float16_h_4cpp[0] = (uint64_t (*)())resample_float16_h_4cpp_expanded;
    resample_float16_select_float16_h_Ncpp[0] = (uint64_t (*)())resample_float16_h_Ncpp_expanded;
  }
  return result;
}

uint64_t resample_float16_v_3cpp_ap_expanded(uint64_t result, uint64_t a2, unsigned __int8 a3, int a4, uint64_t a5, uint64_t *a6)
{
  unint64_t v6;
  unint64_t v7;
  int v8;
  float *v9;
  _WORD *v10;
  _WORD *v11;
  uint64_t *v13;
  float *v14;
  int v15;
  float v16;
  float v17;
  uint64_t v18;
  float v19;

  v6 = (a3 * a4) & 0xFFFFFFFC;
  if ((int)v6 >= 1)
  {
    v7 = 0;
    v8 = *(_DWORD *)(result + 4);
    v9 = (float *)(result + 8);
    v11 = *(_WORD **)a5;
    v10 = *(_WORD **)(a5 + 8);
    do
    {
      _Q1 = 0uLL;
      if (v8)
      {
        v13 = a6;
        v14 = v9;
        v15 = v8;
        do
        {
          v16 = *v14++;
          v17 = v16;
          v18 = *v13++;
          result = 2 * v7;
          _Q1 = vmlaq_n_f32(_Q1, vcvtq_f32_f16(*(float16x4_t *)(v18 + 2 * v7)), v17);
          --v15;
        }
        while (v15);
      }
      v19 = _Q1.f32[3];
      if (_Q1.f32[0] > _Q1.f32[3])
        v19 = _Q1.f32[0];
      _S3 = _Q1.i32[1];
      if (_Q1.f32[1] > v19)
        v19 = _Q1.f32[1];
      _S4 = _Q1.i32[2];
      if (_Q1.f32[2] > v19)
        v19 = _Q1.f32[2];
      __asm { FCVT            H1, S1 }
      *v11 = _H1;
      __asm { FCVT            H1, S3 }
      v11[1] = _H1;
      __asm { FCVT            H1, S4 }
      v11[2] = _H1;
      v11 += 3;
      if (v19 < 1.0)
        _S1 = v19;
      else
        _S1 = 1.0;
      __asm { FCVT            H1, S1 }
      *v10++ = _H1;
      v7 += 4;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t resample_float16_v_Ncpp_ap_expanded(uint64_t result, uint64_t a2, unsigned __int8 a3, int a4, _QWORD *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  float *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v14;
  uint64_t *v16;
  float *v17;
  int v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v27;
  uint64_t *v38;
  float *v39;
  float v40;
  float v41;
  uint64_t v42;

  v6 = *a5 - 2;
  v7 = a5[1] - 2;
  v8 = *(_DWORD *)(result + 4);
  v9 = (float *)(result + 8);
  v10 = a3 * a4;
  v11 = v10 & 0xFFFFFFFC;
  if ((int)v11 < 1)
  {
    LODWORD(v12) = 0;
    _S1 = 0.0;
    v14 = a3;
  }
  else
  {
    v12 = 0;
    _S1 = 0.0;
    v14 = a3;
    do
    {
      _Q2 = 0uLL;
      if (v8)
      {
        v16 = a6;
        v17 = v9;
        v18 = v8;
        do
        {
          v19 = *v17++;
          v20 = v19;
          v21 = *v16++;
          _Q2 = vmlaq_n_f32(_Q2, vcvtq_f32_f16(*(float16x4_t *)(v21 + 2 * v12)), v20);
          --v18;
        }
        while (v18);
      }
      if (_S1 < _Q2.f32[0])
        _S1 = _Q2.f32[0];
      if ((v12 | 1) == v14)
      {
        if (_S1 >= 1.0)
          _S1 = 1.0;
        __asm { FCVT            H1, S1 }
        *(_WORD *)(v7 + 2) = _H1;
        v7 += 2;
        v27 = v14 + a3;
        _S1 = 0.0;
        v14 += a3;
      }
      else
      {
        v27 = v14;
        __asm { FCVT            H3, S2 }
        *(_WORD *)(v6 + 2) = _H3;
        v6 += 2;
      }
      _S3 = _Q2.i32[1];
      if (_S1 < _Q2.f32[1])
        _S1 = _Q2.f32[1];
      if ((v12 | 2) == v27)
      {
        if (_S1 >= 1.0)
          _S1 = 1.0;
        __asm { FCVT            H1, S1 }
        *(_WORD *)(v7 + 2) = _H1;
        v7 += 2;
        v27 = v14 + a3;
        _S1 = 0.0;
        v14 += a3;
      }
      else
      {
        __asm { FCVT            H3, S3 }
        *(_WORD *)(v6 + 2) = _H3;
        v6 += 2;
      }
      _S3 = _Q2.i32[2];
      if (_S1 < _Q2.f32[2])
        _S1 = _Q2.f32[2];
      result = v12 | 3;
      if ((v12 | 3) == v27)
      {
        if (_S1 >= 1.0)
          _S1 = 1.0;
        __asm { FCVT            H1, S1 }
        *(_WORD *)(v7 + 2) = _H1;
        v7 += 2;
        v27 = v14 + a3;
        _S1 = 0.0;
        v14 += a3;
      }
      else
      {
        __asm { FCVT            H3, S3 }
        *(_WORD *)(v6 + 2) = _H3;
        v6 += 2;
      }
      _Q2.i32[0] = _Q2.i32[3];
      if (_S1 < _Q2.f32[3])
        _S1 = _Q2.f32[3];
      v12 += 4;
      if (v12 == v27)
      {
        if (_S1 >= 1.0)
          _S1 = 1.0;
        __asm { FCVT            H1, S1 }
        *(_WORD *)(v7 + 2) = _H1;
        v7 += 2;
        v14 += a3;
        _S1 = 0.0;
      }
      else
      {
        __asm { FCVT            H2, S2 }
        *(_WORD *)(v6 + 2) = _H2;
        v6 += 2;
      }
    }
    while (v12 < v11);
  }
  if ((int)v12 < (int)v10)
  {
    v12 = v12;
    do
    {
      _S2 = 0.0;
      if (v8)
      {
        v38 = a6;
        v39 = v9;
        LODWORD(result) = v8;
        do
        {
          v40 = *v39++;
          v41 = v40;
          v42 = *v38++;
          _H4 = *(_WORD *)(v42 + 2 * v12);
          __asm { FCVT            S4, H4 }
          _S2 = _S2 + (float)(_S4 * v41);
          result = (result - 1);
        }
        while ((_DWORD)result);
      }
      if (_S1 < _S2)
        _S1 = _S2;
      if (++v12 == v14)
      {
        if (_S1 >= 1.0)
          _S1 = 1.0;
        __asm { FCVT            H1, S1 }
        *(_WORD *)(v7 + 2) = _H1;
        v7 += 2;
        v14 += a3;
        _S1 = 0.0;
      }
      else
      {
        __asm { FCVT            H2, S2 }
        *(_WORD *)(v6 + 2) = _H2;
        v6 += 2;
      }
    }
    while (v12 != v10);
  }
  return result;
}

float *resample_float16_h_1cpp_ap_expanded(float *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  int v16;
  float *v17;
  int v18;
  int *v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unsigned int v27;
  float v36;
  float v38;
  float v39;
  float v40;
  uint64_t v43;
  uint64_t v44;
  __int16 *v45;
  __int16 *v46;
  float *v47;
  __int16 v48;
  __int16 v51;
  float v54;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = *a6;
    v10 = a6[1];
    v11 = *a7;
    v12 = a7[1];
    v13 = 4 * a2 + 8;
    v14 = a8;
    while (!a4)
    {
LABEL_14:
      if (++v8 == v14)
        return result;
    }
    v15 = *(_WORD **)(a5 + 8 * v8);
    v16 = a4;
    v17 = result;
    while (1)
    {
      v18 = *((_DWORD *)v17 + 1);
      v19 = (int *)(v17 + 2);
      v20 = v17[2];
      v21 = *(int *)v17 - 1;
      if (v18 >= 2)
        break;
      v44 = v9 + v8 * v11 + 2 * v21;
      _S2 = 0.0;
      _S1 = 0.0;
      v43 = v10 + v8 * v12 + 2 * v21;
      if (v18)
        goto LABEL_11;
LABEL_13:
      __asm { FCVT            H0, S2 }
      *v15 = _H0;
      __asm { FCVT            H0, S1 }
      v15[1] = _H0;
      v15 += 2;
      v17 = (float *)((char *)v17 + v13);
      if (!--v16)
        goto LABEL_14;
    }
    v22 = 2 * v21;
    _S1 = 0.0;
    v24 = v9 + v8 * v11;
    v25 = v10 + v8 * v12;
    _S2 = 0.0;
    do
    {
      v27 = v18;
      _H3 = *(_WORD *)(v24 + v22 + 2);
      __asm { FCVT            S3, H3 }
      _H4 = *(_WORD *)(v25 + v22 + 2);
      __asm { FCVT            S4, H4 }
      v18 -= 2;
      v36 = _S2 + (float)(_S3 * v20);
      LOWORD(_S3) = *(_WORD *)(v24 + v22 + 4);
      __asm { FCVT            S3, H3 }
      v38 = _S1 + (float)(_S4 * v20);
      v39 = *((float *)v19 + 2);
      v19 += 2;
      v20 = v39;
      v40 = *((float *)v19 - 1);
      _H5 = *(_WORD *)(v25 + v22 + 4);
      __asm { FCVT            S5, H5 }
      _S2 = v36 + (float)(_S3 * v40);
      _S1 = v38 + (float)(_S5 * v40);
      v25 += 4;
      v24 += 4;
    }
    while (v27 > 3);
    v43 = v25 + 2 * v21;
    v44 = v24 + 2 * v21;
    if (!v18)
      goto LABEL_13;
LABEL_11:
    v45 = (__int16 *)(v43 + 2);
    v46 = (__int16 *)(v44 + 2);
    v47 = (float *)(v19 + 1);
    do
    {
      v48 = *v46++;
      _H3 = v48;
      __asm { FCVT            S3, H3 }
      v51 = *v45++;
      _H4 = v51;
      __asm { FCVT            S4, H4 }
      _S2 = _S2 + (float)(_S3 * v20);
      _S1 = _S1 + (float)(_S4 * v20);
      v54 = *v47++;
      v20 = v54;
      --v18;
    }
    while (v18);
    goto LABEL_13;
  }
  return result;
}

_DWORD *resample_float16_h_3cpp_ap_expanded(_DWORD *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  float *v19;
  __int16 *v20;
  _WORD *v21;
  float v26;
  float v27;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = *a6;
    v10 = a6[1];
    v11 = *a7;
    v12 = a7[1];
    v13 = 4 * a2 + 8;
    v14 = a8;
    do
    {
      if (a4)
      {
        v15 = *(_WORD **)(a5 + 8 * v8);
        v16 = a4;
        v17 = result;
        do
        {
          v18 = v17[1];
          if (v18)
          {
            v19 = (float *)(v17 + 2);
            v20 = (__int16 *)(v9 + v8 * v11 + 6 * *v17);
            v21 = (_WORD *)(v10 + v8 * v12 + 2 + 2 * (*v17 - 1));
            _S0 = 0.0;
            _S1 = 0.0;
            _S2 = 0.0;
            _S3 = 0.0;
            do
            {
              v26 = *v19++;
              v27 = v26;
              _H5 = *v20;
              __asm { FCVT            S5, H5 }
              _H6 = v20[1];
              __asm { FCVT            S6, H6 }
              _S3 = _S3 + (float)(_S5 * v26);
              LOWORD(_S5) = v20[2];
              _S2 = _S2 + (float)(_S6 * v26);
              LOWORD(v26) = *v21++;
              LOWORD(_S6) = LOWORD(v26);
              __asm
              {
                FCVT            S5, H5
                FCVT            S6, H6
              }
              _S1 = _S1 + (float)(_S5 * v27);
              _S0 = _S0 + (float)(_S6 * v27);
              v20 += 3;
              --v18;
            }
            while (v18);
          }
          else
          {
            _S3 = 0.0;
            _S2 = 0.0;
            _S1 = 0.0;
            _S0 = 0.0;
          }
          __asm { FCVT            H3, S3 }
          *v15 = _H3;
          __asm { FCVT            H2, S2 }
          v15[1] = _H2;
          __asm { FCVT            H1, S1 }
          v15[2] = _H1;
          __asm { FCVT            H0, S0 }
          v15[3] = _H0;
          v15 += 4;
          v17 = (_DWORD *)((char *)v17 + v13);
          --v16;
        }
        while (v16);
      }
      ++v8;
    }
    while (v8 != v14);
  }
  return result;
}

int *resample_float16_h_4cpp_ap_expanded(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float16x4_t *v15;
  int v16;
  int *v17;
  int v18;
  float *v19;
  uint64_t v20;
  float16x4_t *v21;
  __int16 *v22;
  float32x4_t v23;
  float v25;
  float v26;
  float16x4_t v27;
  float32x4_t v28;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = *a6;
    v10 = a6[1];
    v11 = *a7;
    v12 = a7[1];
    v13 = 4 * a2 + 8;
    v14 = a8;
    do
    {
      if (a4)
      {
        v15 = *(float16x4_t **)(a5 + 8 * v8);
        v16 = a4;
        v17 = result;
        do
        {
          v18 = v17[1];
          if (v18)
          {
            v19 = (float *)(v17 + 2);
            v20 = *v17;
            v21 = (float16x4_t *)(v9 + v8 * v11 + 8 * v20);
            v22 = (__int16 *)(v10 + v8 * v12 + 2 * v20);
            v23 = 0uLL;
            _S0 = 0.0;
            do
            {
              v25 = *v19++;
              v26 = v25;
              v27 = *v21++;
              v28 = vcvtq_f32_f16(v27);
              v27.i16[0] = *v22++;
              _H4 = v27.i16[0];
              __asm { FCVT            S4, H4 }
              v23 = vmlaq_n_f32(v23, v28, v26);
              _S0 = _S0 + (float)(_S4 * v26);
              --v18;
            }
            while (v18);
          }
          else
          {
            v23 = 0uLL;
            _S0 = 0.0;
          }
          *v15 = vcvt_f16_f32(v23);
          __asm { FCVT            H0, S0 }
          v15[1].i16[0] = _H0;
          v15 = (float16x4_t *)((char *)v15 + 10);
          v17 = (int *)((char *)v17 + v13);
          --v16;
        }
        while (v16);
      }
      ++v8;
    }
    while (v8 != v14);
  }
  return result;
}

_DWORD *resample_float16_h_Ncpp_ap_expanded(_DWORD *result, unsigned int a2, unsigned __int8 a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  int v18;
  _DWORD *v19;
  int v20;
  int v21;
  float *v22;
  int v23;
  __int16 *v25;
  float *v26;
  int v27;
  float v28;
  _WORD *v36;
  float v38;
  float v39;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = a3;
    v10 = a3 - 1;
    v11 = *a6;
    v12 = a6[1];
    v13 = *a7;
    v14 = a7[1];
    v15 = a8;
    v16 = 2 * a3 - 2;
    do
    {
      if (a4)
      {
        v17 = *(_WORD **)(a5 + 8 * v8);
        v18 = a4;
        v19 = result;
        do
        {
          v21 = *v19;
          v20 = v19[1];
          v22 = (float *)(v19 + 2);
          if (v9 >= 2)
          {
            v23 = 0;
            do
            {
              _S0 = 0.0;
              if (v20)
              {
                v25 = (__int16 *)(v11 + v8 * v13 + 2 * v21 * v10);
                v26 = (float *)(v19 + 2);
                v27 = v20;
                do
                {
                  v28 = *v26++;
                  _H2 = *v25;
                  __asm { FCVT            S2, H2 }
                  _S0 = _S0 + (float)(_S2 * v28);
                  v25 = (__int16 *)((char *)v25 + v16);
                  --v27;
                }
                while (v27);
              }
              __asm { FCVT            H0, S0 }
              *v17++ = _H0;
              ++v23;
            }
            while (v23 != v10);
          }
          if (v20)
          {
            v36 = (_WORD *)(v12 + v8 * v14 + 2 + 2 * (v21 - 1));
            _S0 = 0.0;
            do
            {
              v38 = *v22++;
              v39 = v38;
              LOWORD(v38) = *v36++;
              _H2 = LOWORD(v38);
              __asm { FCVT            S2, H2 }
              _S0 = _S0 + (float)(_S2 * v39);
              --v20;
            }
            while (v20);
          }
          else
          {
            _S0 = 0.0;
          }
          __asm { FCVT            H0, S0 }
          *v17++ = _H0;
          v19 += a2 + 2;
          --v18;
        }
        while (v18);
      }
      ++v8;
    }
    while (v8 != v15);
  }
  return result;
}

uint64_t resample_float16_v_3cpp_af_expanded(uint64_t result, uint64_t a2, unsigned __int8 a3, int a4, float16x4_t **a5, uint64_t *a6)
{
  unint64_t v6;
  unint64_t v7;
  int v8;
  float16x4_t *v9;
  float32x4_t v10;
  uint64_t *v11;
  float *v12;
  int v13;
  float v14;
  float v15;
  uint64_t v16;
  float v17;

  v6 = (a3 * a4) & 0xFFFFFFFC;
  if ((int)v6 >= 1)
  {
    v7 = 0;
    v8 = *(_DWORD *)(result + 4);
    v9 = *a5;
    do
    {
      v10 = 0uLL;
      if (v8)
      {
        v11 = a6;
        v12 = (float *)(result + 8);
        v13 = v8;
        do
        {
          v14 = *v12++;
          v15 = v14;
          v16 = *v11++;
          v10 = vmlaq_n_f32(v10, vcvtq_f32_f16(*(float16x4_t *)(v16 + 2 * v7)), v15);
          --v13;
        }
        while (v13);
      }
      v17 = v10.f32[1];
      if (v10.f32[1] <= v10.f32[0])
        v17 = v10.f32[0];
      if (v10.f32[2] > v17)
        v17 = v10.f32[2];
      if (v10.f32[3] > v17)
        v17 = v10.f32[3];
      if (v17 >= 1.0)
        v17 = 1.0;
      v10.f32[0] = v17;
      *v9++ = vcvt_f16_f32(v10);
      v7 += 4;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t resample_float16_v_Ncpp_af_expanded(uint64_t result, uint64_t a2, unsigned __int8 a3, int a4, _QWORD *a5, uint64_t *a6)
{
  _WORD *v6;
  int v7;
  float *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v15;
  uint64_t *v17;
  float *v18;
  int v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t *v40;
  float *v41;
  float v42;
  float v43;
  uint64_t v44;

  v6 = (_WORD *)(*a5 - 2);
  v7 = *(_DWORD *)(result + 4);
  v8 = (float *)(result + 8);
  v9 = a3;
  v10 = 2 - a3;
  v11 = a3 * a4;
  v12 = v11 & 0xFFFFFFFC;
  if ((int)v12 < 1)
  {
    LODWORD(v13) = 0;
    _S0 = 0.0;
    v15 = a3;
  }
  else
  {
    v13 = 0;
    _S0 = 0.0;
    v15 = a3;
    do
    {
      _Q2 = 0uLL;
      if (v7)
      {
        v17 = a6;
        v18 = v8;
        v19 = v7;
        do
        {
          v20 = *v18++;
          v21 = v20;
          v22 = *v17++;
          _Q2 = vmlaq_n_f32(_Q2, vcvtq_f32_f16(*(float16x4_t *)(v22 + 2 * v13)), v21);
          --v19;
        }
        while (v19);
      }
      if (_S0 >= _Q2.f32[0])
        _S3 = _S0;
      else
        _S3 = _Q2.f32[0];
      if ((v13 | 1) == v15)
      {
        if (_S3 < 1.0)
          _S0 = _S3;
        else
          _S0 = 1.0;
        __asm { FCVT            H0, S0 }
        v6[(int)v10] = _H0;
        result = v15 + v9;
        _S3 = 0.0;
        v15 += v9;
      }
      else
      {
        result = v15;
      }
      __asm { FCVT            H0, S2 }
      v6[1] = _H0;
      _S0 = _Q2.i32[1];
      if (_S3 < _Q2.f32[1])
        _S3 = _Q2.f32[1];
      if ((v13 | 2) == result)
      {
        if (_S3 >= 1.0)
          _S3 = 1.0;
        __asm { FCVT            H3, S3 }
        v6[(int)v10 + 1] = _H3;
        result = v15 + v9;
        _S3 = 0.0;
        v15 += v9;
      }
      __asm { FCVT            H0, S0 }
      v6[2] = _H0;
      _S0 = _Q2.i32[2];
      if (_S3 < _Q2.f32[2])
        _S3 = _Q2.f32[2];
      if ((v13 | 3) == result)
      {
        if (_S3 >= 1.0)
          _S3 = 1.0;
        __asm { FCVT            H3, S3 }
        v6[(int)v10 + 2] = _H3;
        result = v15 + v9;
        _S3 = 0.0;
        v15 += v9;
      }
      __asm { FCVT            H0, S0 }
      v6[3] = _H0;
      _Q2.i32[0] = _Q2.i32[3];
      if (_S3 >= _Q2.f32[3])
        _S0 = _S3;
      else
        _S0 = _Q2.f32[3];
      v13 += 4;
      if (v13 == result)
      {
        if (_S0 >= 1.0)
          _S0 = 1.0;
        __asm { FCVT            H0, S0 }
        v6[(int)v10 + 3] = _H0;
        v15 += v9;
        _S0 = 0.0;
      }
      __asm { FCVT            H2, S2 }
      v6[4] = _H2;
      v6 += 4;
    }
    while (v13 < v12);
  }
  if ((int)v13 < (int)v11)
  {
    v13 = v13;
    do
    {
      _S2 = 0.0;
      if (v7)
      {
        v40 = a6;
        v41 = v8;
        LODWORD(result) = v7;
        do
        {
          v42 = *v41++;
          v43 = v42;
          v44 = *v40++;
          _H4 = *(_WORD *)(v44 + 2 * v13);
          __asm { FCVT            S4, H4 }
          _S2 = _S2 + (float)(_S4 * v43);
          result = (result - 1);
        }
        while ((_DWORD)result);
      }
      if (_S0 < _S2)
        _S0 = _S2;
      if (++v13 == v15)
      {
        if (_S0 >= 1.0)
          _S0 = 1.0;
        __asm { FCVT            H0, S0 }
        v6[v10] = _H0;
        v15 += v9;
        _S0 = 0.0;
      }
      __asm { FCVT            H2, S2 }
      v6[1] = _H2;
      ++v6;
    }
    while (v13 != v11);
  }
  return result;
}

uint64_t resample_float16_v_3cpp_al_expanded(uint64_t result, uint64_t a2, unsigned __int8 a3, int a4, float16x8_t **a5, uint64_t *a6)
{
  float16x8_t *v6;
  int v7;
  const float *v8;
  int v9;
  unint64_t v10;
  unint64_t i;
  float32x4_t v12;
  uint64_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  const float *v16;
  float32x4_t v17;
  uint64_t v18;
  float16x8_t v19;
  float32x4_t v20;
  float16x8_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  signed int v26;
  uint64_t v27;
  float32x4_t v28;
  uint64_t *v29;
  float *v30;
  int v31;
  float v32;
  float v33;
  uint64_t v34;
  float32x4_t v35;

  v6 = *a5;
  v7 = *(_DWORD *)(result + 4);
  v8 = (const float *)(result + 8);
  v9 = a3 * a4;
  v10 = v9 & 0xFFFFFFF0;
  if ((int)v10 < 1)
  {
    LODWORD(i) = 0;
  }
  else
  {
    for (i = 0; i < v10; i += 16)
    {
      if (v7)
      {
        v12 = 0uLL;
        v13 = a6;
        v14 = 0uLL;
        v15 = 0uLL;
        v16 = v8;
        v17 = 0uLL;
        LODWORD(result) = v7;
        do
        {
          v18 = *v13++;
          v19 = *(float16x8_t *)(v18 + 2 * i);
          v20 = vld1q_dup_f32(v16++);
          v17 = vaddq_f32(v17, vmulq_f32(v20, vcvt_hight_f32_f16(v19)));
          v15 = vaddq_f32(v15, vmulq_f32(v20, vcvtq_f32_f16(*(float16x4_t *)v19.i8)));
          v21 = *(float16x8_t *)(v18 + 2 * (i | 8));
          v14 = vaddq_f32(v14, vmulq_f32(v20, vcvt_hight_f32_f16(v21)));
          v12 = vaddq_f32(v12, vmulq_f32(v20, vcvtq_f32_f16(*(float16x4_t *)v21.i8)));
          result = (result - 1);
        }
        while ((_DWORD)result);
      }
      else
      {
        v15 = 0uLL;
        v17 = 0uLL;
        v12 = 0uLL;
        v14 = 0uLL;
      }
      v22 = vmaxnmq_f32(v15, (float32x4_t)vrev64q_s32((int32x4_t)v15));
      v23 = vmaxnmq_f32(v17, (float32x4_t)vrev64q_s32((int32x4_t)v17));
      v17.i32[3] = vminnmq_f32(vmaxnmq_f32(v23, (float32x4_t)vextq_s8(*(int8x16_t *)&v23, *(int8x16_t *)&v23, 8uLL)), (float32x4_t)xmmword_1850050D0).i32[3];
      v15.i32[3] = vminnmq_f32(vmaxnmq_f32(v22, (float32x4_t)vextq_s8(*(int8x16_t *)&v22, *(int8x16_t *)&v22, 8uLL)), (float32x4_t)xmmword_1850050D0).i32[3];
      v24 = vmaxnmq_f32(v12, (float32x4_t)vrev64q_s32((int32x4_t)v12));
      v25 = vmaxnmq_f32(v14, (float32x4_t)vrev64q_s32((int32x4_t)v14));
      v14.i32[3] = vminnmq_f32(vmaxnmq_f32(v25, (float32x4_t)vextq_s8(*(int8x16_t *)&v25, *(int8x16_t *)&v25, 8uLL)), (float32x4_t)xmmword_1850050D0).i32[3];
      v12.i32[3] = vminnmq_f32(vmaxnmq_f32(v24, (float32x4_t)vextq_s8(*(int8x16_t *)&v24, *(int8x16_t *)&v24, 8uLL)), (float32x4_t)xmmword_1850050D0).i32[3];
      *v6 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v15), v17);
      v6[1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v12), v14);
      v6 += 2;
    }
  }
  v26 = v9 & 0xFFFFFFFC;
  if ((int)i < v26)
  {
    v27 = i;
    do
    {
      v28 = 0uLL;
      if (v7)
      {
        v29 = a6;
        v30 = (float *)v8;
        v31 = v7;
        do
        {
          v32 = *v30++;
          v33 = v32;
          v34 = *v29++;
          v28 = vaddq_f32(v28, vmulq_n_f32(vcvtq_f32_f16(*(float16x4_t *)(v34 + 2 * v27)), v33));
          --v31;
        }
        while (v31);
      }
      v35 = vmaxnmq_f32(v28, (float32x4_t)vrev64q_s32((int32x4_t)v28));
      v28.i32[3] = vminnmq_f32(vmaxnmq_f32(v35, (float32x4_t)vextq_s8(*(int8x16_t *)&v35, *(int8x16_t *)&v35, 8uLL)), (float32x4_t)xmmword_1850050D0).i32[3];
      *(float16x4_t *)v6->i8 = vcvt_f16_f32(v28);
      v6 = (float16x8_t *)((char *)v6 + 8);
      v27 += 4;
    }
    while (v27 < v26);
  }
  return result;
}

uint64_t resample_float16_v_Ncpp_al_expanded(uint64_t result, uint64_t a2, unsigned __int8 a3, int a4, _QWORD *a5, uint64_t *a6)
{
  uint64_t v6;
  int v7;
  float *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float v12;
  int v13;
  uint64_t *v15;
  float *v16;
  int v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v25;
  uint64_t v26;
  float v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  float v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  float v41;
  int v46;
  uint64_t *v48;
  float *v49;
  int v50;
  float v51;
  float v52;
  uint64_t v53;
  float v56;
  BOOL v57;
  int v58;

  v6 = *a5 - 2;
  v7 = *(_DWORD *)(result + 4);
  v8 = (float *)(result + 8);
  v9 = a3 * a4;
  v10 = v9 & 0xFFFFFFFC;
  if ((int)v10 < 1)
  {
    LODWORD(v11) = 0;
    v12 = 0.0;
    v13 = a3;
  }
  else
  {
    v11 = 0;
    v12 = 0.0;
    v13 = a3;
    do
    {
      _Q3 = 0uLL;
      if (v7)
      {
        v15 = a6;
        v16 = v8;
        v17 = v7;
        do
        {
          v18 = *v16++;
          v19 = v18;
          v20 = *v15++;
          _Q3 = vmlaq_n_f32(_Q3, vcvtq_f32_f16(*(float16x4_t *)(v20 + 2 * v11)), v19);
          --v17;
        }
        while (v17);
      }
      v21 = v11 | 1;
      v22 = v11 | 2;
      result = v11 | 3;
      if (v12 < _Q3.f32[0])
        v12 = _Q3.f32[0];
      if (v12 < 1.0)
        _S4 = v12;
      else
        _S4 = 1.0;
      _ZF = v21 == v13;
      if (v21 == v13)
        v25 = a3;
      else
        v25 = 0;
      v26 = (v25 + v13);
      if (_ZF)
        v12 = 0.0;
      else
        _S4 = _Q3.f32[0];
      __asm { FCVT            H4, S4 }
      _S5 = _Q3.f32[1];
      if (v12 < _Q3.f32[1])
        v12 = _Q3.f32[1];
      if (v12 < 1.0)
        v32 = v12;
      else
        v32 = 1.0;
      v33 = v22 == v26;
      if (v22 == v26)
        v34 = a3;
      else
        v34 = 0;
      v35 = (v34 + v26);
      if (v33)
      {
        v12 = 0.0;
        _S5 = v32;
      }
      _S6 = _Q3.f32[2];
      if (v12 < _Q3.f32[2])
        v12 = _Q3.f32[2];
      if (v12 < 1.0)
        v37 = v12;
      else
        v37 = 1.0;
      v38 = result == v35;
      if (result == v35)
        v39 = a3;
      else
        v39 = 0;
      v40 = (v39 + v35);
      if (v38)
      {
        v12 = 0.0;
        _S6 = v37;
      }
      _Q3.i32[0] = _Q3.i32[3];
      if (v12 < _Q3.f32[3])
        v12 = _Q3.f32[3];
      v11 += 4;
      if (v12 < 1.0)
        v41 = v12;
      else
        v41 = 1.0;
      if (v11 == v40)
        _Q3.f32[0] = v41;
      __asm { FCVT            H3, S3 }
      *(_WORD *)(v6 + 8) = _H3;
      v6 += 8;
      *(_WORD *)(v6 - 6) = _H4;
      __asm { FCVT            H3, S5 }
      *(_WORD *)(v6 - 4) = _H3;
      __asm { FCVT            H3, S6 }
      *(_WORD *)(v6 - 2) = _H3;
      if (_ZF)
        v46 = a3;
      else
        v46 = 0;
      v13 = v46 + v40;
      if (_ZF)
        v12 = 0.0;
    }
    while (v11 < v10);
  }
  if ((int)v11 < (int)v9)
  {
    v11 = v11;
    do
    {
      _S3 = 0.0;
      if (v7)
      {
        v48 = a6;
        v49 = v8;
        v50 = v7;
        do
        {
          v51 = *v49++;
          v52 = v51;
          v53 = *v48++;
          result = v53;
          _H5 = *(_WORD *)(v53 + 2 * v11);
          __asm { FCVT            S5, H5 }
          _S3 = _S3 + (float)(_S5 * v52);
          --v50;
        }
        while (v50);
      }
      if (v12 < _S3)
        v12 = _S3;
      ++v11;
      if (v12 < 1.0)
        v56 = v12;
      else
        v56 = 1.0;
      v57 = v11 == v13;
      if (v11 == v13)
        v58 = a3;
      else
        v58 = 0;
      v13 += v58;
      if (v57)
      {
        v12 = 0.0;
        _S3 = v56;
      }
      __asm { FCVT            H3, S3 }
      *(_WORD *)(v6 + 2) = _H3;
      v6 += 2;
    }
    while (v11 != v9);
  }
  return result;
}

int *resample_float16_h_1cpp_expanded(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  int v13;
  int *v14;
  int v15;
  int *v16;
  float v17;
  uint64_t v18;
  float *v19;
  unsigned int v21;
  __int16 v22;
  float v35;
  __int16 *v36;
  float *v37;
  __int16 v38;
  float v41;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = *a6;
    v10 = *a7;
    v11 = 4 * a2 + 8;
    while (!a4)
    {
LABEL_14:
      if (++v8 == a8)
        return result;
    }
    v12 = *(_WORD **)(a5 + 8 * v8);
    v13 = a4;
    v14 = result;
    while (1)
    {
      v15 = v14[1];
      v16 = v14 + 2;
      v17 = *((float *)v14 + 2);
      v18 = v9 + v8 * v10 + 2 * *v14 - 2;
      if (v15 >= 4)
        break;
      _S1 = 0.0;
      if (v15)
        goto LABEL_11;
LABEL_13:
      __asm { FCVT            H0, S1 }
      *v12++ = _H0;
      v14 = (int *)((char *)v14 + v11);
      if (!--v13)
        goto LABEL_14;
    }
    v19 = (float *)(v14 + 6);
    _S1 = 0.0;
    do
    {
      v21 = v15;
      v22 = *(_WORD *)(v18 + 8);
      v18 += 8;
      _H2 = v22;
      _H3 = *(_WORD *)(v18 - 6);
      __asm { FCVT            S3, H3 }
      v15 -= 4;
      _H4 = *(_WORD *)(v18 - 4);
      __asm { FCVT            S4, H4 }
      _H5 = *(_WORD *)(v18 - 2);
      __asm
      {
        FCVT            S5, H5
        FCVT            S2, H2
      }
      _S1 = (float)((float)((float)(_S1 + (float)(_S3 * v17)) + (float)(_S4 * *(v19 - 3))) + (float)(_S5 * *(v19 - 2)))
          + (float)(_S2 * *(v19 - 1));
      v35 = *v19;
      v19 += 4;
      v17 = v35;
    }
    while (v21 > 7);
    v16 = (int *)(v19 - 4);
    if (!v15)
      goto LABEL_13;
LABEL_11:
    v36 = (__int16 *)(v18 + 2);
    v37 = (float *)(v16 + 1);
    do
    {
      v38 = *v36++;
      _H2 = v38;
      __asm { FCVT            S2, H2 }
      _S1 = _S1 + (float)(_S2 * v17);
      v41 = *v37++;
      v17 = v41;
      --v15;
    }
    while (v15);
    goto LABEL_13;
  }
  return result;
}

int *resample_float16_h_3cpp_expanded(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  int v13;
  int *v14;
  int v15;
  float *v16;
  __int16 *v17;
  float v21;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = *a6;
    v10 = *a7;
    v11 = 4 * a2 + 8;
    do
    {
      if (a4)
      {
        v12 = *(_WORD **)(a5 + 8 * v8);
        v13 = a4;
        v14 = result;
        do
        {
          v15 = v14[1];
          if (v15)
          {
            v16 = (float *)(v14 + 2);
            v17 = (__int16 *)(v9 + v8 * v10 + 6 * *v14);
            _S0 = 0.0;
            _S1 = 0.0;
            _S2 = 0.0;
            do
            {
              v21 = *v16++;
              _H4 = *v17;
              __asm { FCVT            S4, H4 }
              _H5 = v17[1];
              __asm { FCVT            S5, H5 }
              _S2 = _S2 + (float)(_S4 * v21);
              LOWORD(_S4) = v17[2];
              __asm { FCVT            S4, H4 }
              _S1 = _S1 + (float)(_S5 * v21);
              _S0 = _S0 + (float)(_S4 * v21);
              v17 += 3;
              --v15;
            }
            while (v15);
          }
          else
          {
            _S2 = 0.0;
            _S1 = 0.0;
            _S0 = 0.0;
          }
          __asm { FCVT            H2, S2 }
          *v12 = _H2;
          __asm { FCVT            H1, S1 }
          v12[1] = _H1;
          __asm { FCVT            H0, S0 }
          v12[2] = _H0;
          v12 += 3;
          v14 = (int *)((char *)v14 + v11);
          --v13;
        }
        while (v13);
      }
      ++v8;
    }
    while (v8 != a8);
  }
  return result;
}

int *resample_float16_h_4cpp_expanded(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, _QWORD *a6, int *a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float16x4_t *v11;
  int v12;
  int *v13;
  int v14;
  float *v15;
  float16x4_t *v16;
  float32x4_t v17;
  float32x4_t v18;
  unsigned int v19;
  float32x2_t v20;
  float32x2_t v21;
  float16x8_t v22;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = 4 * a2 + 8;
    do
    {
      if (a4)
      {
        v10 = *a6 + *a7 * (uint64_t)(int)v8;
        v11 = *(float16x4_t **)(a5 + 8 * v8);
        v12 = a4;
        v13 = result;
        do
        {
          v14 = v13[1];
          v15 = (float *)(v13 + 2);
          v16 = (float16x4_t *)(v10 + 8 * *v13);
          v17 = 0uLL;
          if (v14 >= 2)
          {
            v18 = 0uLL;
            do
            {
              v19 = v14;
              v20 = *(float32x2_t *)v15;
              v15 += 2;
              v21 = v20;
              v22 = *(float16x8_t *)v16->i8;
              v16 += 2;
              v18 = vaddq_f32(v18, vmulq_lane_f32(vcvt_hight_f32_f16(v22), v21, 1));
              v17 = vaddq_f32(v17, vmulq_n_f32(vcvtq_f32_f16(*(float16x4_t *)v22.i8), v21.f32[0]));
              v14 -= 2;
            }
            while (v19 > 3);
            v17 = vaddq_f32(v18, v17);
          }
          if (v14)
            v17 = vaddq_f32(v17, vmulq_n_f32(vcvtq_f32_f16(*v16), *v15));
          *v11++ = vcvt_f16_f32(v17);
          v13 = (int *)((char *)v13 + v9);
          --v12;
        }
        while (v12);
      }
      ++v8;
    }
    while (v8 != a8);
  }
  return result;
}

_DWORD *resample_float16_h_Ncpp_expanded(_DWORD *result, unsigned int a2, unsigned __int8 a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int16 *v21;
  float *v22;
  int v23;
  float v24;

  if (a8 >= 1)
  {
    v8 = 0;
    v9 = a3;
    v10 = *a6;
    v11 = *a7;
    v12 = 4 * a2 + 8;
    v13 = a8;
    do
    {
      if (a4)
      {
        v14 = *(_WORD **)(a5 + 8 * v8);
        v15 = a4;
        v16 = result;
        do
        {
          if ((_DWORD)v9)
          {
            v17 = 0;
            v18 = v16[1];
            v19 = v10 + v8 * v11 + 2 * *v16 * (int)v9;
            do
            {
              _S0 = 0.0;
              if (v18)
              {
                v21 = (__int16 *)v19;
                v22 = (float *)(v16 + 2);
                v23 = v18;
                do
                {
                  v24 = *v22++;
                  _H2 = *v21;
                  __asm { FCVT            S2, H2 }
                  _S0 = _S0 + (float)(_S2 * v24);
                  v21 += v9;
                  --v23;
                }
                while (v23);
              }
              __asm { FCVT            H0, S0 }
              *v14++ = _H0;
              ++v17;
              v19 += 2;
            }
            while (v17 != v9);
          }
          v16 = (_DWORD *)((char *)v16 + v12);
          --v15;
        }
        while (v15);
      }
      ++v8;
    }
    while (v8 != v13);
  }
  return result;
}

void sub_184DB6C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_184DB6D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_184DB6E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_184DB6EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_184DB6FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__18565(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__18566(uint64_t a1)
{

}

uint64_t CG::dasher::advance_dash_index(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  *(_BYTE *)(this + 104) ^= 1u;
  v1 = *(_QWORD *)(this + 112);
  v2 = *(_QWORD *)(this + 8);
  v3 = (*(_QWORD *)(this + 16) - v2) >> 3;
  if (v1 == v3 - 1)
    v4 = 0;
  else
    v4 = v1 + 1;
  *(_QWORD *)(this + 112) = v4;
  if (v3 <= v4)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(this + 120) = *(_QWORD *)(v2 + 8 * v4);
    *(_BYTE *)(this + 144) = 1;
  }
  return this;
}

void CG::dasher::add_path_dash_segment<CG::Quadratic>(double *a1, float64x2_t *a2, double a3, double a4)
{
  float64x2_t v8;
  float64x2_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  float64_t v14;
  double v15;
  float64x2_t v16;
  double v17;
  double v18;
  float64x2_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  float64x2_t v25;
  double v26;
  double v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  _OWORD v43[2];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v8 = a2[1];
  v33 = *a2;
  v34 = v8;
  v9 = a2[3];
  v35 = a2[2];
  v36 = v9;
  v10 = a1[6];
  v11 = a1[7];
  v12 = a1[4];
  v13 = a1[5];
  v14 = v33.f64[1] * v11 + v33.f64[0] * v13;
  v9.f64[0] = v11 * v34.f64[1] + v34.f64[0] * v13;
  v15 = v11 * v35.f64[1] + v35.f64[0] * v13;
  v33.f64[0] = v33.f64[1] * v10 + v33.f64[0] * v12;
  v33.f64[1] = v14;
  v34.f64[0] = v10 * v34.f64[1] + v34.f64[0] * v12;
  v34.f64[1] = v9.f64[0];
  v35.f64[0] = v10 * v35.f64[1] + v35.f64[0] * v12;
  v35.f64[1] = v15;
  v16 = vsubq_f64(v34, v33);
  v36 = vaddq_f64(v16, v16);
  v37 = vsubq_f64(vsubq_f64(v35, v34), v16);
  CG::Quadratic::index(v33.f64, a3);
  CG::Quadratic::split((CG::Quadratic *)&v33, v17, a2->f64);
  if (*((_BYTE *)a1 + 144))
  {
    v18 = *a1;
    v28 = v38;
    if (v18 != 0.0)
      (*(void (**)(_QWORD, _QWORD, float64x2_t *, _QWORD))(*(_QWORD *)&v18 + 24))(*(_QWORD *)(*(_QWORD *)&v18 + 8), 0, &v28, *(_QWORD *)(*(_QWORD *)&v18 + 48));
  }
  if (a3 == a4)
  {
    v19 = vaddq_f64(vmulq_f64(vaddq_f64(v42, v42), (float64x2_t)0), v41);
    if (v19.f64[0] != 0.0 || v19.f64[1] != 0.0)
      v19 = vdivq_f64(v19, (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt(v19.f64[1] * v19.f64[1] + v19.f64[0] * v19.f64[0])), 0));
    v20 = *a1;
    v28 = vaddq_f64(vmulq_f64(v19, (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL)), v38);
    if (v20 != 0.0)
      (*(void (**)(_QWORD, uint64_t, float64x2_t *, _QWORD))(*(_QWORD *)&v20 + 24))(*(_QWORD *)(*(_QWORD *)&v20 + 8), 1, &v28, *(_QWORD *)(*(_QWORD *)&v20 + 48));
  }
  else
  {
    v28 = v38;
    v29 = v39;
    v30 = v40;
    v31 = v41;
    v21 = a1[6];
    v22 = a1[7];
    v23 = a1[4];
    v24 = a1[5];
    v28.f64[0] = v38.f64[1] * v21 + v38.f64[0] * v23;
    v28.f64[1] = v38.f64[1] * v22 + v38.f64[0] * v24;
    v29.f64[0] = v21 * v39.f64[1] + v39.f64[0] * v23;
    v29.f64[1] = v22 * v39.f64[1] + v39.f64[0] * v24;
    v30.f64[0] = v21 * v40.f64[1] + v40.f64[0] * v23;
    v30.f64[1] = v22 * v40.f64[1] + v40.f64[0] * v24;
    v25 = vsubq_f64(v29, v28);
    v31 = vaddq_f64(v25, v25);
    v32 = vsubq_f64(vsubq_f64(v30, v29), v25);
    CG::Quadratic::index(v28.f64, a4 - a3);
    CG::Quadratic::split((CG::Quadratic *)&v28, v26, v38.f64);
    v27 = *a1;
    if (*(_QWORD *)a1)
    {
      v43[0] = v29;
      v43[1] = v30;
      (*(void (**)(_QWORD, uint64_t, _OWORD *, _QWORD))(*(_QWORD *)&v27 + 24))(*(_QWORD *)(*(_QWORD *)&v27 + 8), 2, v43, *(_QWORD *)(*(_QWORD *)&v27 + 48));
    }
  }
}

_QWORD *`anonymous namespace'::begin(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t (*v3)(_QWORD, uint64_t, _QWORD);

  v2 = (_QWORD *)*result;
  if (*result)
  {
    v3 = (uint64_t (*)(_QWORD, uint64_t, _QWORD))v2[2];
    if (v3)
      return (_QWORD *)v3(v2[1], a2, v2[6]);
  }
  return result;
}

void `anonymous namespace'::iterate(CG::dasher *this, int a2, float64x2_t *a3, _QWORD *a4)
{
  void (*v5)(_QWORD, _QWORD);
  float64_t v6;
  float64_t v7;
  float64x2_t v8;
  float64x2_t *v9;
  float64x2_t v10;
  double v11;
  double v12;
  double v13;
  float64x2_t v14;
  double v15;
  float64x2_t v16;
  double v17;
  double v18;
  double v19;
  double i;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v32;
  double v33;
  double v34;
  double v35;
  float64x2_t v36;
  float64x2_t v37;
  double v38;
  double j;
  float64x2_t v40;
  double v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;

  if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2))
  {
    if (a4)
    {
      v5 = (void (*)(_QWORD, _QWORD))a4[4];
      if (v5)
        v5(a4[1], a4[6]);
    }
  }
  else
  {
    switch(a2)
    {
      case 0:
        *(float64x2_t *)((char *)this + 88) = *a3;
        goto LABEL_23;
      case 1:
        v6 = a3->f64[0];
        v7 = a3->f64[1];
        v50 = *((float64x2_t *)this + 8);
        v51.f64[0] = v6;
        v51.f64[1] = v7;
        CG::dasher::dash_path_element<CG::LineSegment>((uint64_t)this, &v50);
        *((float64_t *)this + 16) = v6;
        *((float64_t *)this + 17) = v7;
        return;
      case 2:
        v8 = *a3;
        v9 = (float64x2_t *)((char *)this + 128);
        v42 = a3[1];
        v43 = *((float64x2_t *)this + 8);
        v44 = v8;
        v45 = v42;
        v10 = vsubq_f64(v8, v43);
        v46 = vaddq_f64(v10, v10);
        v47 = vsubq_f64(vsubq_f64(v42, v8), v10);
        v50 = v43;
        v51 = v8;
        v52 = v42;
        v53 = v46;
        v10.f64[0] = *((float64_t *)this + 6);
        v11 = *((double *)this + 7);
        v12 = *((double *)this + 4);
        v13 = *((double *)this + 5);
        v50.f64[0] = v43.f64[1] * v10.f64[0] + v43.f64[0] * v12;
        v50.f64[1] = v43.f64[1] * v11 + v43.f64[0] * v13;
        v51.f64[0] = v10.f64[0] * v8.f64[1] + v8.f64[0] * v12;
        v51.f64[1] = v11 * v8.f64[1] + v8.f64[0] * v13;
        v52.f64[0] = v10.f64[0] * v42.f64[1] + v42.f64[0] * v12;
        v52.f64[1] = v11 * v42.f64[1] + v42.f64[0] * v13;
        v14 = vsubq_f64(v51, v50);
        v53 = vaddq_f64(v14, v14);
        v54 = vsubq_f64(vsubq_f64(v52, v51), v14);
        CG::Quadratic::length(v50.f64, 0);
        v16 = v42;
        if (v15 == 0.0)
          goto LABEL_39;
        v17 = v15;
        v18 = *((double *)this + 15);
        if (v17 <= v18)
        {
          if (!*((_BYTE *)this + 104))
            goto LABEL_32;
          CG::dasher::add_path_dash_segment<CG::Quadratic>((double *)this, &v43, 0.0, v17);
          goto LABEL_31;
        }
        v19 = 0.0;
        for (i = v18 + 0.0; i < v17; i = v19 + v18)
        {
          if (*((_BYTE *)this + 104))
          {
            CG::dasher::add_path_dash_segment<CG::Quadratic>((double *)this, &v43, v19, i);
            v18 = *((double *)this + 15);
          }
          v19 = v19 + v18;
          CG::dasher::advance_dash_index((uint64_t)this);
          v18 = *((double *)this + 15);
        }
        v16 = v42;
        if (v19 >= v17)
          goto LABEL_39;
        if (!*((_BYTE *)this + 104))
          goto LABEL_37;
        CG::dasher::add_path_dash_segment<CG::Quadratic>((double *)this, &v43, v19, v17);
        goto LABEL_36;
      case 3:
        v21 = *a3;
        v22 = a3[1];
        v23 = a3[2];
        v9 = (float64x2_t *)((char *)this + 128);
        v43 = *((float64x2_t *)this + 8);
        v44 = v21;
        v45 = v22;
        v46 = v23;
        v24 = v23;
        v42 = v23;
        v25 = v21;
        v26 = vsubq_f64(v21, v43);
        __asm { FMOV            V5.2D, #3.0 }
        v32 = vsubq_f64(v22, v21);
        v47 = vmulq_f64(v26, _Q5);
        v48 = vmulq_f64(vsubq_f64(v32, v26), _Q5);
        v49 = vaddq_f64(v26, vsubq_f64(vsubq_f64(v24, v22), vaddq_f64(v32, v32)));
        v50 = v43;
        v51 = v25;
        v52 = v22;
        v53 = v46;
        v54 = v47;
        v55 = v48;
        v56 = v49;
        v33 = *((double *)this + 6);
        v26.f64[0] = *((float64_t *)this + 7);
        v34 = *((double *)this + 4);
        v35 = *((double *)this + 5);
        v50.f64[0] = v43.f64[1] * v33 + v43.f64[0] * v34;
        v50.f64[1] = v43.f64[1] * v26.f64[0] + v43.f64[0] * v35;
        v51.f64[0] = v33 * v25.f64[1] + v25.f64[0] * v34;
        v51.f64[1] = v26.f64[0] * v25.f64[1] + v25.f64[0] * v35;
        v52.f64[0] = v33 * v22.f64[1] + v22.f64[0] * v34;
        v52.f64[1] = v26.f64[0] * v22.f64[1] + v22.f64[0] * v35;
        v53.f64[0] = v33 * v46.f64[1] + v46.f64[0] * v34;
        v53.f64[1] = v26.f64[0] * v46.f64[1] + v46.f64[0] * v35;
        v36 = vsubq_f64(v51, v50);
        v37 = vsubq_f64(v52, v51);
        v54 = vmulq_f64(v36, _Q5);
        v55 = vmulq_f64(vsubq_f64(v37, v36), _Q5);
        v56 = vaddq_f64(v36, vsubq_f64(vsubq_f64(v53, v52), vaddq_f64(v37, v37)));
        CG::Cubic::length(&v50, 0);
        v16 = v42;
        if (v38 == 0.0)
          goto LABEL_39;
        v17 = v38;
        v18 = *((double *)this + 15);
        if (v17 <= v18)
        {
          if (*((_BYTE *)this + 104))
          {
            CG::dasher::add_path_dash_segment<CG::Cubic>((double *)this, &v43, 0.0, v17);
LABEL_31:
            *((_BYTE *)this + 144) = 0;
            v18 = *((double *)this + 15);
          }
LABEL_32:
          v41 = v18 - v17;
LABEL_38:
          *((double *)this + 15) = v41;
          v16 = v42;
          goto LABEL_39;
        }
        v19 = 0.0;
        for (j = v18 + 0.0; j < v17; j = v19 + v18)
        {
          if (*((_BYTE *)this + 104))
          {
            CG::dasher::add_path_dash_segment<CG::Cubic>((double *)this, &v43, v19, j);
            v18 = *((double *)this + 15);
          }
          v19 = v19 + v18;
          CG::dasher::advance_dash_index((uint64_t)this);
          v18 = *((double *)this + 15);
        }
        v16 = v42;
        if (v19 < v17)
        {
          if (*((_BYTE *)this + 104))
          {
            CG::dasher::add_path_dash_segment<CG::Cubic>((double *)this, &v43, v19, v17);
LABEL_36:
            *((_BYTE *)this + 144) = 0;
            v18 = *((double *)this + 15);
          }
LABEL_37:
          v41 = v18 - (v17 - v19);
          goto LABEL_38;
        }
LABEL_39:
        *v9 = v16;
        break;
      case 4:
        v40 = *(float64x2_t *)((char *)this + 88);
        v50 = *((float64x2_t *)this + 8);
        v51 = v40;
        CG::dasher::dash_path_element<CG::LineSegment>((uint64_t)this, &v50);
LABEL_23:
        *((_QWORD *)this + 14) = *((_QWORD *)this + 9);
        *((_BYTE *)this + 104) = *((_BYTE *)this + 64);
        *((_BYTE *)this + 144) = 1;
        *((_QWORD *)this + 15) = *((_QWORD *)this + 10);
        *((_OWORD *)this + 8) = *(_OWORD *)((char *)this + 88);
        return;
      default:
        abort();
    }
  }
}

_QWORD *`anonymous namespace'::end(_QWORD *result)
{
  _QWORD *v1;
  uint64_t (*v2)(_QWORD, _QWORD);

  v1 = (_QWORD *)*result;
  if (*result)
  {
    v2 = (uint64_t (*)(_QWORD, _QWORD))v1[4];
    if (v2)
      return (_QWORD *)v2(v1[1], v1[6]);
  }
  return result;
}

uint64_t `anonymous namespace'::release_data(uint64_t result)
{
  uint64_t v1;
  void *v2;

  if (result)
  {
    v1 = result;
    v2 = *(void **)(result + 8);
    if (v2)
    {
      *(_QWORD *)(v1 + 16) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x186DC23C4);
  }
  return result;
}

uint64_t CGAccessSessionGetBytePointer(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 8);
  return result;
}

uint64_t CGAccessSessionSkipForward(uint64_t result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = (uint64_t *)result;
    check_same_thread();
    v4 = *v3;
    switch(*(_DWORD *)(*v3 + 20))
    {
      case 0:
      case 2:
        v5 = v3[2];
        v6 = *(_QWORD *)(v4 + 32);
        if (v5 + a2 <= v6)
          result = a2;
        else
          result = v6 - v5;
        v3[2] = result + v5;
        break;
      case 1:
      case 3:
        result = CGDataProviderSkipForwardInternal(v4, a2);
        break;
      default:
        result = -1;
        break;
    }
  }
  return result;
}

uint64_t CGAccessSessionGetChunks(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  char vars0;

  if (!a1 || !(a3 | a2))
    return 0;
  if (!*a1)
    _CGHandleAssert("CGDataProviderGetType", 212, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProvider.c", "provider != NULL", "provider is NULL", a6, a7, a8, vars0);
  switch(*(_DWORD *)(*a1 + 20))
  {
    case 0:
    case 2:
      if (a6 | a3)
        v8 = a4;
      else
        v8 = 1;
      if (a6 | a3)
        v9 = 1;
      else
        v9 = a4;
      result = get_chunks_direct(a1, v9 * a2, a3, v8, a5, a6);
      break;
    case 1:
    case 3:
      result = get_chunks_sequential(a1, a2, a3, a4, (uint64_t)a5, a6);
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t get_chunks_sequential(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  unint64_t BytesInternal;
  uint64_t v18;

  check_same_thread();
  v15 = *a1;
  if ((*(_DWORD *)(*a1 + 20) & 0xFFFFFFFD) != 1 || !*(_QWORD *)(*a1 + 40))
    _CGHandleAssert("get_chunks_sequential", 225, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGAccessSession.c", "CGDataProviderCanGetSequentialChunks(provider)", "data provider is not sequential or provides no method (%p) to sequentially read data", v12, v13, v14, *(_QWORD *)(*a1 + 40));
  for (i = 0; a4; --a4)
  {
    if (a2)
    {
      BytesInternal = CGDataProviderSequentialGetBytesInternal(v15, a5, a2);
      i += BytesInternal;
      a1[2] += BytesInternal;
      if (BytesInternal < a2)
        break;
    }
    if (a3)
    {
      v18 = CGDataProviderSkipForwardInternal(v15, a3);
      i += v18;
      a1[2] += v18;
    }
    a5 += a2 + a6;
  }
  return i;
}

uint64_t CGAccessSessionHasError(CFTypeRef *a1)
{
  _QWORD *v1;
  CFTypeID v2;
  uint64_t (*v3)(_QWORD);

  v1 = *a1;
  if (!*a1)
    return 0;
  v2 = CFGetTypeID(*a1);
  if (kCGDataProviderPropertyTrustToken_block_invoke_once != -1)
    dispatch_once(&kCGDataProviderPropertyTrustToken_block_invoke_once, &__block_literal_global_26_6088);
  if (v2 == CGDataProviderGetTypeID_id && (v3 = (uint64_t (*)(_QWORD))v1[15]) != 0)
    return v3(v1[3]);
  else
    return 0;
}

CGPDFStreamRef get_font_stream_18624(uint64_t a1)
{
  unint64_t FontDescriptor;
  unint64_t v2;
  CGPDFStreamRef v3;
  const char *v4;
  CGPDFStreamRef value;

  FontDescriptor = CGPDFFontGetFontDescriptor(a1);
  if (!FontDescriptor)
    return 0;
  v2 = FontDescriptor;
  value = 0;
  if (CGPDFDictionaryGetStream(*(CGPDFDictionaryRef *)(FontDescriptor + 32), "FontFile2", &value))
    v3 = value;
  else
    v3 = 0;
  if (!v3)
  {
    value = 0;
    v3 = CGPDFDictionaryGetStream(*(CGPDFDictionaryRef *)(v2 + 32), "FontFile3", &value) ? value : 0;
    if (v3)
    {
      value = 0;
      if (CGPDFDictionaryGetName(*((CGPDFDictionaryRef *)v3 + 6), "Subtype", (const char **)&value))
      {
        v4 = (const char *)value;
        if (strcmp((const char *)value, "OpenType"))
        {
          return 0;
        }
      }
    }
  }
  return v3;
}

uint64_t A8_sample_ALPHA16(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned __int16 *v63;
  unint64_t v64;
  unint64_t v65;
  unsigned __int16 *v66;
  unsigned __int16 *v67;
  int v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned __int16 *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned __int16 *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int16 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  int v103;

  v4 = *(_QWORD *)(result + 40);
  v103 = *(_DWORD *)(result + 28);
  if (v4)
  {
    v5 = *(_QWORD *)(result + 176);
    v6 = *(_QWORD *)(result + 64);
    v7 = *(_QWORD *)(result + 72);
    v8 = *(_QWORD *)(result + 112);
    v9 = *(_QWORD *)(result + 120);
    v11 = *(_QWORD *)(result + 48);
    v10 = *(_QWORD *)(result + 56);
    v12 = v11 == 0;
    if (v11)
    {
      v100 = *(_QWORD *)(result + 112);
      if (v8 > v11)
        v100 = v8 % v11;
    }
    else
    {
      v100 = 0;
    }
    v97 = *(_QWORD *)(result + 80);
    v98 = *(_QWORD *)(result + 88);
    if (v10)
    {
      if (v9 <= v10)
        v99 = *(_QWORD *)(result + 120);
      else
        v99 = v9 % v10;
    }
    else
    {
      v99 = 0;
    }
  }
  else
  {
    v99 = 0;
    v100 = 0;
    v11 = 0;
    v5 = 0;
    v10 = 0;
    v6 = *(_QWORD *)(result + 64);
    v7 = *(_QWORD *)(result + 72);
    v97 = *(_QWORD *)(result + 80);
    v98 = *(_QWORD *)(result + 88);
    v12 = 1;
    v8 = *(_QWORD *)(result + 112);
    v9 = *(_QWORD *)(result + 120);
  }
  v13 = *(_QWORD *)(result + 152) - 1;
  v14 = *(_QWORD *)(result + 144) - 1;
  v101 = *(_BYTE *)(result + 248);
  v15 = v4
      + ((*(_DWORD *)(result + 260) - 1) * v103)
      + 2 * ((*(_DWORD *)(result + 256) - 1) << v101);
  v96 = *(_DWORD *)(result + 188);
  v102 = 2 * *(_DWORD *)(result + 252);
  v16 = -v7;
  while (1)
  {
LABEL_13:
    if (a3 >= v7)
    {
      if (a3 <= v98)
      {
        v25 = 0;
        v26 = ((unint64_t)a3 >> 22) & 0x3C0;
        v27 = 0x3FFFFFFF;
        v28 = a3;
      }
      else
      {
        v21 = *(_QWORD *)(result + 216);
        v22 = *(_QWORD *)(result + 224) + v98;
        v23 = v22 - a3 + (v21 >> 1);
        if (v23 < 1)
          break;
        if (v23 >= v21)
          LODWORD(v24) = 0x3FFFFFFF;
        else
          v24 = (unint64_t)(*(_QWORD *)(result + 232) * v23) >> 32;
        v27 = v24 | v96;
        v28 = v22 - 0x1000000;
        v25 = a3 - (v22 - 0x1000000);
        v26 = 448;
      }
    }
    else
    {
      v17 = *(_QWORD *)(result + 216);
      v18 = v7 - *(_QWORD *)(result + 224);
      v19 = a3 - v18 + (v17 >> 1);
      if (v19 < 1)
        break;
      if (v19 >= v17)
        LODWORD(v20) = 0x3FFFFFFF;
      else
        v20 = (unint64_t)(*(_QWORD *)(result + 232) * v19) >> 32;
      v27 = v20 | v96;
      v28 = v18 + 0x1000000;
      v25 = a3 - (v18 + 0x1000000);
      v26 = 512;
    }
    if (a2 >= v6)
    {
      if (a2 <= v97)
      {
        v33 = 0;
        v34 = ((unint64_t)a2 >> 26) & 0x3C;
        v32 = a2;
      }
      else
      {
        v35 = *(_QWORD *)(result + 192);
        v36 = *(_QWORD *)(result + 200) + v97;
        v37 = v36 - a2 + (v35 >> 1);
        if (v37 < 1)
          break;
        if (v37 < v35)
          v27 = ((v27 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v37) >> 32) >> 15)) | v96;
        v32 = v36 - 0x1000000;
        v33 = a2 - (v36 - 0x1000000);
        v34 = 28;
      }
    }
    else
    {
      v29 = *(_QWORD *)(result + 192);
      v30 = v6 - *(_QWORD *)(result + 200);
      v31 = a2 - v30 + (v29 >> 1);
      if (v31 < 1)
        break;
      if (v31 < v29)
        v27 = ((v27 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v31) >> 32) >> 15)) | v96;
      v32 = v30 + 0x1000000;
      v33 = a2 - (v30 + 0x1000000);
      v34 = 32;
    }
    if (v27 < 0x400000)
      break;
    if (!v12)
    {
      v38 = (v10 & ((v28 % v10) >> 63)) + v28 % v10;
      v39 = (v11 & ((v32 % v11) >> 63)) + v32 % v11;
      if (v38 >= v10)
        v40 = v10;
      else
        v40 = 0;
      v28 = v38 - v40;
      if (v39 >= v11)
        v41 = v11;
      else
        v41 = 0;
      v32 = v39 - v41;
      v25 += v28;
      v33 += v32;
    }
    if (v4)
    {
      v42 = v4 + SHIDWORD(v28) * (uint64_t)v103 + 2 * (v32 >> 32 << v101);
      v43 = (unsigned __int16 *)(v42 + v102);
      if (v15 < v42 + v102)
        v43 = (unsigned __int16 *)v15;
      if ((unint64_t)v43 < *(_QWORD *)(result + 40))
        v43 = *(unsigned __int16 **)(result + 40);
      v44 = bswap32(*v43) >> 16;
      if (v5)
      {
LABEL_56:
        v45 = *(_DWORD *)(v5 + (v34 | v26));
LABEL_58:
        v46 = v45 & 0xF;
        v47 = v45 >> 8;
        v48 = HIBYTE(v45) & 3;
        switch(v46)
        {
          case 1:
            LODWORD(v71) = SBYTE1(v45);
            if (!v12)
            {
              v72 = v25 + ((uint64_t)(char)v47 << 32);
              v73 = v10 & (v72 >> 63);
              if (v73 + v72 >= v10)
                v74 = v10;
              else
                v74 = 0;
              v71 = (v73 + ((uint64_t)(char)v47 << 32) - v74) >> 32;
            }
            v75 = 0xFFFF;
            if (v4)
            {
              v76 = (unsigned __int16 *)(v42 + (int)v71 * (uint64_t)v103 + v102);
              if (v15 < (unint64_t)v76)
                v76 = (unsigned __int16 *)v15;
              if ((unint64_t)v76 < *(_QWORD *)(result + 40))
                v76 = *(unsigned __int16 **)(result + 40);
              v75 = bswap32(*v76) >> 16;
            }
            v44 = v44 - ((interpolate_1616[v48] & v44) >> (v48 + 1)) + ((interpolate_1616[v48] & v75) >> (v48 + 1));
            break;
          case 2:
            v77 = SBYTE2(v45);
            if (!v12)
            {
              v78 = v33 + ((uint64_t)SBYTE2(v45) << 32);
              v79 = v11 & (v78 >> 63);
              if (v79 + v78 >= v11)
                v80 = v11;
              else
                v80 = 0;
              v77 = (v79 + ((uint64_t)((unint64_t)HIWORD(v45) << 56) >> 24) - v80) >> 32;
            }
            v81 = 0xFFFF;
            if (v4)
            {
              v82 = (unsigned __int16 *)(v42 + 2 * (v77 << v101) + v102);
              if (v15 < (unint64_t)v82)
                v82 = (unsigned __int16 *)v15;
              if ((unint64_t)v82 < *(_QWORD *)(result + 40))
                v82 = *(unsigned __int16 **)(result + 40);
              v81 = bswap32(*v82) >> 16;
            }
            v44 = v44
                - ((interpolate_1616[(v45 >> 28) & 3] & v44) >> (((v45 >> 28) & 3) + 1))
                + ((interpolate_1616[(v45 >> 28) & 3] & v81) >> (((v45 >> 28) & 3) + 1));
            break;
          case 3:
            v94 = HIBYTE(v45) & 3;
            v95 = v7;
            LODWORD(v49) = SBYTE1(v45);
            v50 = SBYTE2(v45);
            if (!v12)
            {
              v51 = v47 << 56;
              v52 = v25 + (v51 >> 24);
              v53 = v33 + ((uint64_t)((unint64_t)HIWORD(v45) << 56) >> 24);
              v54 = v10 & (v52 >> 63);
              v55 = v11 & (v53 >> 63);
              v56 = v55 + v53;
              if (v54 + v52 >= v10)
                v57 = v10;
              else
                v57 = 0;
              if (v56 >= v11)
                v58 = v11;
              else
                v58 = 0;
              v49 = (v54 + (v51 >> 24) - v57) >> 32;
              v50 = (v55 + ((uint64_t)((unint64_t)HIWORD(v45) << 56) >> 24) - v58) >> 32;
            }
            v59 = 0xFFFF;
            v60 = 0xFFFF;
            v61 = 0xFFFF;
            if (v4)
            {
              v62 = v50 << v101;
              v63 = (unsigned __int16 *)(v42 + 2 * (v50 << v101) + v102);
              v64 = *(_QWORD *)(result + 40);
              if (v15 < (unint64_t)v63)
                v63 = (unsigned __int16 *)v15;
              if ((unint64_t)v63 < v64)
                v63 = *(unsigned __int16 **)(result + 40);
              v59 = bswap32(*v63) >> 16;
              v65 = v42 + (int)v49 * (uint64_t)v103 + v102;
              if (v15 >= v65)
                v66 = (unsigned __int16 *)(v42 + (int)v49 * (uint64_t)v103 + v102);
              else
                v66 = (unsigned __int16 *)v15;
              if ((unint64_t)v66 < v64)
                v66 = *(unsigned __int16 **)(result + 40);
              v60 = bswap32(*v66) >> 16;
              v67 = (unsigned __int16 *)(v65 + 2 * v62);
              if (v15 < (unint64_t)v67)
                v67 = (unsigned __int16 *)v15;
              if ((unint64_t)v67 < v64)
                v67 = *(unsigned __int16 **)(result + 40);
              v61 = bswap32(*v67) >> 16;
            }
            v68 = interpolate_1616[v94];
            v69 = v44 - ((v68 & v44) >> (v94 + 1)) + ((v68 & v60) >> (v94 + 1));
            v70 = (v45 >> 28) & 3;
            v44 = v69
                - ((v69 & interpolate_1616[v70]) >> (v70 + 1))
                + (((v59 - ((v68 & v59) >> (v94 + 1)) + ((v68 & v61) >> (v94 + 1))) & interpolate_1616[v70]) >> (v70 + 1));
            v7 = v95;
            break;
        }
      }
    }
    else
    {
      v42 = 0;
      v44 = 0xFFFF;
      if (v5)
        goto LABEL_56;
    }
    *(_BYTE *)(v13 + 1) = BYTE1(v44);
    *(_BYTE *)(v14 + 1) = v27 >> 22;
    if (a4 == 1)
      return result;
    v83 = 0;
    a2 += v8;
    v84 = v97 - a2;
    a3 += v9;
    v85 = v98 - a3;
    while ((((a2 - v6) | v84 | (v16 + a3) | v85) & 0x8000000000000000) == 0)
    {
      if (v12)
      {
        v86 = a2;
        HIDWORD(v87) = HIDWORD(a3);
        if (!v4)
          goto LABEL_127;
      }
      else
      {
        v89 = (v10 & ((v25 + v99) >> 63)) + v25 + v99;
        v90 = (v11 & ((v33 + v100) >> 63)) + v33 + v100;
        if (v89 >= v10)
          v91 = v10;
        else
          v91 = 0;
        v87 = v89 - v91;
        if (v90 >= v11)
          v92 = v11;
        else
          v92 = 0;
        v86 = v90 - v92;
        v33 = v86;
        v25 = v87;
        if (!v4)
        {
LABEL_127:
          v44 = 0xFFFF;
          if (!v5)
            goto LABEL_129;
          goto LABEL_128;
        }
      }
      v42 = v4 + SHIDWORD(v87) * (uint64_t)v103 + 2 * (v86 >> 32 << v101);
      v88 = (unsigned __int16 *)(v42 + v102);
      if (v15 < v42 + v102)
        v88 = (unsigned __int16 *)v15;
      if ((unint64_t)v88 < *(_QWORD *)(result + 40))
        v88 = *(unsigned __int16 **)(result + 40);
      v44 = bswap32(*v88) >> 16;
      if (!v5)
        goto LABEL_129;
LABEL_128:
      v45 = *(_DWORD *)(v5 + (((unint64_t)a3 >> 22) & 0x3C0 | ((unint64_t)a2 >> 26) & 0x3C));
      if ((v45 & 0xF) != 0)
      {
        v14 += v83 + 1;
        v13 += v83 + 1;
        a4 += ~(_DWORD)v83;
        v27 = -1;
        goto LABEL_58;
      }
LABEL_129:
      *(_BYTE *)(v13 + v83 + 2) = BYTE1(v44);
      v93 = v14 + v83++;
      *(_BYTE *)(v93 + 2) = -1;
      a2 += v8;
      v84 -= v8;
      a3 += v9;
      v85 -= v9;
      if (a4 - 1 == (_DWORD)v83)
        return result;
    }
    v14 += v83 + 1;
    v13 += v83 + 1;
    a4 += ~(_DWORD)v83;
    if (!a4)
      return result;
  }
  --a4;
  a2 += v8;
  a3 += v9;
  ++v13;
  *(_BYTE *)++v14 = 0;
  if (a4)
    goto LABEL_13;
  return result;
}

uint64_t A8_sample_alpha16(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  unsigned __int16 *v64;
  unint64_t v65;
  unint64_t v66;
  unsigned __int16 *v67;
  unsigned __int16 *v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  unsigned __int16 *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  unsigned __int16 *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int16 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  int v103;

  v4 = *(_QWORD *)(result + 40);
  v103 = *(_DWORD *)(result + 28);
  if (v4)
  {
    v5 = *(_QWORD *)(result + 176);
    v6 = *(_QWORD *)(result + 64);
    v7 = *(_QWORD *)(result + 72);
    v8 = *(_QWORD *)(result + 112);
    v9 = *(_QWORD *)(result + 120);
    v11 = *(_QWORD *)(result + 48);
    v10 = *(_QWORD *)(result + 56);
    v12 = v11 == 0;
    if (v11)
    {
      v100 = *(_QWORD *)(result + 112);
      if (v8 > v11)
        v100 = v8 % v11;
    }
    else
    {
      v100 = 0;
    }
    v97 = *(_QWORD *)(result + 80);
    v98 = *(_QWORD *)(result + 88);
    if (v10)
    {
      if (v9 <= v10)
        v99 = *(_QWORD *)(result + 120);
      else
        v99 = v9 % v10;
    }
    else
    {
      v99 = 0;
    }
  }
  else
  {
    v99 = 0;
    v100 = 0;
    v11 = 0;
    v5 = 0;
    v10 = 0;
    v6 = *(_QWORD *)(result + 64);
    v7 = *(_QWORD *)(result + 72);
    v97 = *(_QWORD *)(result + 80);
    v98 = *(_QWORD *)(result + 88);
    v12 = 1;
    v8 = *(_QWORD *)(result + 112);
    v9 = *(_QWORD *)(result + 120);
  }
  v13 = *(_QWORD *)(result + 152) - 1;
  v14 = *(_QWORD *)(result + 144) - 1;
  v101 = *(_BYTE *)(result + 248);
  v15 = v4
      + ((*(_DWORD *)(result + 260) - 1) * v103)
      + 2 * ((*(_DWORD *)(result + 256) - 1) << v101);
  v96 = *(_DWORD *)(result + 188);
  v102 = 2 * *(_DWORD *)(result + 252);
  v16 = -v7;
  while (1)
  {
LABEL_13:
    if (a3 >= v7)
    {
      if (a3 <= v98)
      {
        v25 = 0;
        v26 = ((unint64_t)a3 >> 22) & 0x3C0;
        v27 = 0x3FFFFFFF;
        v28 = a3;
      }
      else
      {
        v21 = *(_QWORD *)(result + 216);
        v22 = *(_QWORD *)(result + 224) + v98;
        v23 = v22 - a3 + (v21 >> 1);
        if (v23 < 1)
          break;
        if (v23 >= v21)
          LODWORD(v24) = 0x3FFFFFFF;
        else
          v24 = (unint64_t)(*(_QWORD *)(result + 232) * v23) >> 32;
        v27 = v24 | v96;
        v28 = v22 - 0x1000000;
        v25 = a3 - (v22 - 0x1000000);
        v26 = 448;
      }
    }
    else
    {
      v17 = *(_QWORD *)(result + 216);
      v18 = v7 - *(_QWORD *)(result + 224);
      v19 = a3 - v18 + (v17 >> 1);
      if (v19 < 1)
        break;
      if (v19 >= v17)
        LODWORD(v20) = 0x3FFFFFFF;
      else
        v20 = (unint64_t)(*(_QWORD *)(result + 232) * v19) >> 32;
      v27 = v20 | v96;
      v28 = v18 + 0x1000000;
      v25 = a3 - (v18 + 0x1000000);
      v26 = 512;
    }
    if (a2 >= v6)
    {
      if (a2 <= v97)
      {
        v33 = 0;
        v34 = ((unint64_t)a2 >> 26) & 0x3C;
        v32 = a2;
      }
      else
      {
        v35 = *(_QWORD *)(result + 192);
        v36 = *(_QWORD *)(result + 200) + v97;
        v37 = v36 - a2 + (v35 >> 1);
        if (v37 < 1)
          break;
        if (v37 < v35)
          v27 = ((v27 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v37) >> 32) >> 15)) | v96;
        v32 = v36 - 0x1000000;
        v33 = a2 - (v36 - 0x1000000);
        v34 = 28;
      }
    }
    else
    {
      v29 = *(_QWORD *)(result + 192);
      v30 = v6 - *(_QWORD *)(result + 200);
      v31 = a2 - v30 + (v29 >> 1);
      if (v31 < 1)
        break;
      if (v31 < v29)
        v27 = ((v27 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v31) >> 32) >> 15)) | v96;
      v32 = v30 + 0x1000000;
      v33 = a2 - (v30 + 0x1000000);
      v34 = 32;
    }
    if (v27 < 0x400000)
      break;
    if (!v12)
    {
      v38 = (v10 & ((v28 % v10) >> 63)) + v28 % v10;
      v39 = (v11 & ((v32 % v11) >> 63)) + v32 % v11;
      if (v38 >= v10)
        v40 = v10;
      else
        v40 = 0;
      v28 = v38 - v40;
      if (v39 >= v11)
        v41 = v11;
      else
        v41 = 0;
      v32 = v39 - v41;
      v25 += v28;
      v33 += v32;
    }
    if (v4)
    {
      v42 = v4 + SHIDWORD(v28) * (uint64_t)v103 + 2 * (v32 >> 32 << v101);
      v43 = (unsigned __int16 *)(v42 + v102);
      if (v15 < v42 + v102)
        v43 = (unsigned __int16 *)v15;
      if ((unint64_t)v43 < *(_QWORD *)(result + 40))
        v43 = *(unsigned __int16 **)(result + 40);
      v44 = *v43;
      if (v5)
      {
LABEL_56:
        v45 = *(_DWORD *)(v5 + (v34 | v26));
LABEL_58:
        v46 = v45 & 0xF;
        v47 = v45 >> 8;
        v48 = HIBYTE(v45) & 3;
        switch(v46)
        {
          case 1:
            LODWORD(v71) = SBYTE1(v45);
            if (!v12)
            {
              v72 = v25 + ((uint64_t)(char)v47 << 32);
              v73 = v10 & (v72 >> 63);
              if (v73 + v72 >= v10)
                v74 = v10;
              else
                v74 = 0;
              v71 = (v73 + ((uint64_t)(char)v47 << 32) - v74) >> 32;
            }
            v75 = 0xFFFF;
            if (v4)
            {
              v76 = (unsigned __int16 *)(v42 + (int)v71 * (uint64_t)v103 + v102);
              if (v15 < (unint64_t)v76)
                v76 = (unsigned __int16 *)v15;
              if ((unint64_t)v76 < *(_QWORD *)(result + 40))
                v76 = *(unsigned __int16 **)(result + 40);
              v75 = *v76;
            }
            v44 = v44
                - ((interpolate_1616[v48] & v44) >> (v48 + 1))
                + ((interpolate_1616[v48] & v75) >> (v48 + 1));
            break;
          case 2:
            v77 = SBYTE2(v45);
            if (!v12)
            {
              v78 = v33 + ((uint64_t)SBYTE2(v45) << 32);
              v79 = v11 & (v78 >> 63);
              if (v79 + v78 >= v11)
                v80 = v11;
              else
                v80 = 0;
              v77 = (v79 + ((uint64_t)((unint64_t)HIWORD(v45) << 56) >> 24) - v80) >> 32;
            }
            v81 = 0xFFFF;
            if (v4)
            {
              v82 = (unsigned __int16 *)(v42 + 2 * (v77 << v101) + v102);
              if (v15 < (unint64_t)v82)
                v82 = (unsigned __int16 *)v15;
              if ((unint64_t)v82 < *(_QWORD *)(result + 40))
                v82 = *(unsigned __int16 **)(result + 40);
              v81 = *v82;
            }
            v44 = v44
                - ((interpolate_1616[(v45 >> 28) & 3] & v44) >> (((v45 >> 28) & 3) + 1))
                + ((interpolate_1616[(v45 >> 28) & 3] & v81) >> (((v45 >> 28) & 3) + 1));
            break;
          case 3:
            v94 = HIBYTE(v45) & 3;
            v95 = v7;
            LODWORD(v49) = SBYTE1(v45);
            v50 = SBYTE2(v45);
            if (!v12)
            {
              v51 = v47 << 56;
              v52 = (unint64_t)HIWORD(v45) << 56;
              v53 = v25 + ((uint64_t)SBYTE1(v45) << 32);
              v54 = v33 + (v52 >> 24);
              v55 = v10 & (v53 >> 63);
              v56 = v11 & (v54 >> 63);
              v57 = v56 + v54;
              if (v55 + v53 >= v10)
                v58 = v10;
              else
                v58 = 0;
              if (v57 >= v11)
                v59 = v11;
              else
                v59 = 0;
              v49 = (v55 + (v51 >> 24) - v58) >> 32;
              v50 = (v56 + (v52 >> 24) - v59) >> 32;
            }
            v60 = 0xFFFF;
            v61 = 0xFFFF;
            v62 = 0xFFFF;
            if (v4)
            {
              v63 = v50 << v101;
              v64 = (unsigned __int16 *)(v42 + 2 * (v50 << v101) + v102);
              v65 = *(_QWORD *)(result + 40);
              if (v15 < (unint64_t)v64)
                v64 = (unsigned __int16 *)v15;
              if ((unint64_t)v64 < v65)
                v64 = *(unsigned __int16 **)(result + 40);
              v60 = *v64;
              v66 = v42 + (int)v49 * (uint64_t)v103 + v102;
              if (v15 >= v66)
                v67 = (unsigned __int16 *)(v42 + (int)v49 * (uint64_t)v103 + v102);
              else
                v67 = (unsigned __int16 *)v15;
              if ((unint64_t)v67 < v65)
                v67 = *(unsigned __int16 **)(result + 40);
              v61 = *v67;
              v68 = (unsigned __int16 *)(v66 + 2 * v63);
              if (v15 < (unint64_t)v68)
                v68 = (unsigned __int16 *)v15;
              if ((unint64_t)v68 < v65)
                v68 = *(unsigned __int16 **)(result + 40);
              v62 = *v68;
            }
            v69 = interpolate_1616[v94];
            v70 = (v45 >> 28) & 3;
            v44 = v44
                - ((v69 & v44) >> (v94 + 1))
                + ((v69 & v61) >> (v94 + 1))
                - (((v44 - ((v69 & v44) >> (v94 + 1)) + ((v69 & v61) >> (v94 + 1))) & interpolate_1616[v70]) >> (v70 + 1))
                + (((v60 - ((v69 & v60) >> (v94 + 1)) + ((v69 & v62) >> (v94 + 1))) & interpolate_1616[v70]) >> (v70 + 1));
            v7 = v95;
            break;
        }
      }
    }
    else
    {
      v42 = 0;
      v44 = 0xFFFF;
      if (v5)
        goto LABEL_56;
    }
    *(_BYTE *)(v13 + 1) = BYTE1(v44);
    *(_BYTE *)(v14 + 1) = v27 >> 22;
    if (a4 == 1)
      return result;
    v83 = 0;
    a2 += v8;
    v84 = v97 - a2;
    a3 += v9;
    v85 = v98 - a3;
    while ((((a2 - v6) | v84 | (v16 + a3) | v85) & 0x8000000000000000) == 0)
    {
      if (v12)
      {
        v86 = a2;
        HIDWORD(v87) = HIDWORD(a3);
        if (!v4)
          goto LABEL_127;
      }
      else
      {
        v89 = (v10 & ((v25 + v99) >> 63)) + v25 + v99;
        v90 = (v11 & ((v33 + v100) >> 63)) + v33 + v100;
        if (v89 >= v10)
          v91 = v10;
        else
          v91 = 0;
        v87 = v89 - v91;
        if (v90 >= v11)
          v92 = v11;
        else
          v92 = 0;
        v86 = v90 - v92;
        v33 = v86;
        v25 = v87;
        if (!v4)
        {
LABEL_127:
          v44 = 0xFFFF;
          if (!v5)
            goto LABEL_129;
          goto LABEL_128;
        }
      }
      v42 = v4 + SHIDWORD(v87) * (uint64_t)v103 + 2 * (v86 >> 32 << v101);
      v88 = (unsigned __int16 *)(v42 + v102);
      if (v15 < v42 + v102)
        v88 = (unsigned __int16 *)v15;
      if ((unint64_t)v88 < *(_QWORD *)(result + 40))
        v88 = *(unsigned __int16 **)(result + 40);
      v44 = *v88;
      if (!v5)
        goto LABEL_129;
LABEL_128:
      v45 = *(_DWORD *)(v5 + (((unint64_t)a3 >> 22) & 0x3C0 | ((unint64_t)a2 >> 26) & 0x3C));
      if ((v45 & 0xF) != 0)
      {
        v14 += v83 + 1;
        v13 += v83 + 1;
        a4 += ~(_DWORD)v83;
        v27 = -1;
        goto LABEL_58;
      }
LABEL_129:
      *(_BYTE *)(v13 + v83 + 2) = BYTE1(v44);
      v93 = v14 + v83++;
      *(_BYTE *)(v93 + 2) = -1;
      a2 += v8;
      v84 -= v8;
      a3 += v9;
      v85 -= v9;
      if (a4 - 1 == (_DWORD)v83)
        return result;
    }
    v14 += v83 + 1;
    v13 += v83 + 1;
    a4 += ~(_DWORD)v83;
    if (!a4)
      return result;
  }
  --a4;
  a2 += v8;
  a3 += v9;
  ++v13;
  *(_BYTE *)++v14 = 0;
  if (a4)
    goto LABEL_13;
  return result;
}

uint64_t A8_sample_ALPHAF(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  float v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  float v65;
  unsigned int *v66;
  unint64_t v67;
  unsigned int *v68;
  unsigned int *v69;
  float v70;
  float v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float v76;
  unsigned int *v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v4 = *(_QWORD *)(result + 40);
  v5 = *(int *)(result + 28);
  if (v4)
  {
    v6 = *(_QWORD *)(result + 176);
    v7 = *(_QWORD *)(result + 64);
    v8 = *(_QWORD *)(result + 72);
    v99 = *(_QWORD *)(result + 88);
    v9 = *(_QWORD *)(result + 112);
    v10 = *(_QWORD *)(result + 120);
    v12 = *(_QWORD *)(result + 48);
    v11 = *(_QWORD *)(result + 56);
    v13 = v12 == 0;
    if (v12)
    {
      v102 = *(_QWORD *)(result + 112);
      if (v9 > v12)
        v102 = v9 % v12;
    }
    else
    {
      v102 = 0;
    }
    v97 = *(_QWORD *)(result + 80);
    if (v11)
    {
      if (v10 <= v11)
        v101 = *(_QWORD *)(result + 120);
      else
        v101 = v10 % v11;
    }
    else
    {
      v101 = 0;
    }
  }
  else
  {
    v101 = 0;
    v102 = 0;
    v12 = 0;
    v6 = 0;
    v11 = 0;
    v7 = *(_QWORD *)(result + 64);
    v8 = *(_QWORD *)(result + 72);
    v97 = *(_QWORD *)(result + 80);
    v99 = *(_QWORD *)(result + 88);
    v13 = 1;
    v9 = *(_QWORD *)(result + 112);
    v10 = *(_QWORD *)(result + 120);
  }
  v14 = *(_QWORD *)(result + 152) - 1;
  v15 = *(_QWORD *)(result + 144) - 1;
  v16 = *(_BYTE *)(result + 248);
  v17 = v4
      + ((*(_DWORD *)(result + 260) - 1) * v5)
      + 4 * ((*(_DWORD *)(result + 256) - 1) << v16);
  v18 = 4 * *(_DWORD *)(result + 252);
  v96 = *(_DWORD *)(result + 188);
  v98 = v7;
  v19 = -v7;
  v100 = v8;
  v20 = -v8;
  while (1)
  {
LABEL_13:
    if (a3 >= v100)
    {
      if (a3 <= v99)
      {
        v29 = 0;
        v30 = ((unint64_t)a3 >> 22) & 0x3C0;
        v31 = 0x3FFFFFFF;
        v32 = a3;
        v33 = v98;
      }
      else
      {
        v25 = *(_QWORD *)(result + 216);
        v26 = *(_QWORD *)(result + 224) + v99;
        v27 = v26 - a3 + (v25 >> 1);
        if (v27 < 1)
          break;
        if (v27 >= v25)
          LODWORD(v28) = 0x3FFFFFFF;
        else
          v28 = (unint64_t)(*(_QWORD *)(result + 232) * v27) >> 32;
        v33 = v98;
        v31 = v28 | v96;
        v32 = v26 - 0x1000000;
        v29 = a3 - (v26 - 0x1000000);
        v30 = 448;
      }
    }
    else
    {
      v21 = *(_QWORD *)(result + 216);
      v22 = v100 - *(_QWORD *)(result + 224);
      v23 = a3 - v22 + (v21 >> 1);
      if (v23 < 1)
        break;
      if (v23 >= v21)
        LODWORD(v24) = 0x3FFFFFFF;
      else
        v24 = (unint64_t)(*(_QWORD *)(result + 232) * v23) >> 32;
      v33 = v98;
      v31 = v24 | v96;
      v32 = v22 + 0x1000000;
      v29 = a3 - (v22 + 0x1000000);
      v30 = 512;
    }
    if (a2 >= v33)
    {
      if (a2 <= v97)
      {
        v38 = 0;
        v39 = ((unint64_t)a2 >> 26) & 0x3C;
        v37 = a2;
      }
      else
      {
        v40 = *(_QWORD *)(result + 192);
        v41 = *(_QWORD *)(result + 200) + v97;
        v42 = v41 - a2 + (v40 >> 1);
        if (v42 < 1)
          break;
        if (v42 < v40)
          v31 = ((v31 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v42) >> 32) >> 15)) | v96;
        v37 = v41 - 0x1000000;
        v38 = a2 - (v41 - 0x1000000);
        v39 = 28;
      }
    }
    else
    {
      v34 = *(_QWORD *)(result + 192);
      v35 = v33 - *(_QWORD *)(result + 200);
      v36 = a2 - v35 + (v34 >> 1);
      if (v36 < 1)
        break;
      if (v36 < v34)
        v31 = ((v31 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v36) >> 32) >> 15)) | v96;
      v37 = v35 + 0x1000000;
      v38 = a2 - (v35 + 0x1000000);
      v39 = 32;
    }
    if (v31 < 0x400000)
      break;
    if (!v13)
    {
      v43 = (v11 & ((v32 % v11) >> 63)) + v32 % v11;
      v44 = (v12 & ((v37 % v12) >> 63)) + v37 % v12;
      if (v43 >= v11)
        v45 = v11;
      else
        v45 = 0;
      v32 = v43 - v45;
      if (v44 >= v12)
        v46 = v12;
      else
        v46 = 0;
      v37 = v44 - v46;
      v29 += v32;
      v38 += v37;
    }
    if (v4)
    {
      v47 = v4 + SHIDWORD(v32) * (uint64_t)(int)v5 + 4 * (v37 >> 32 << v16);
      v48 = (unsigned int *)(v47 + v18);
      if (v17 < v47 + v18)
        v48 = (unsigned int *)v17;
      if ((unint64_t)v48 < *(_QWORD *)(result + 40))
        v48 = *(unsigned int **)(result + 40);
      v49 = COERCE_FLOAT(bswap32(*v48));
      if (!v6)
        goto LABEL_106;
    }
    else
    {
      v47 = 0;
      v49 = 1.0;
      if (!v6)
        goto LABEL_106;
    }
    v50 = *(_DWORD *)(v6 + (v39 | v30));
LABEL_58:
    v51 = v50 & 0xF;
    v52 = v50 >> 8;
    v53 = HIBYTE(v50) & 3;
    if (v51 == 1)
    {
      LODWORD(v72) = SBYTE1(v50);
      if (!v13)
      {
        v73 = v29 + ((uint64_t)(char)v52 << 32);
        v74 = v11 & (v73 >> 63);
        if (v74 + v73 >= v11)
          v75 = v11;
        else
          v75 = 0;
        v72 = (v74 + ((uint64_t)(char)v52 << 32) - v75) >> 32;
      }
      v76 = 1.0;
      if (v4)
      {
        v77 = (unsigned int *)(v47 + (int)v72 * (uint64_t)(int)v5 + v18);
        if (v17 < (unint64_t)v77)
          v77 = (unsigned int *)v17;
        if ((unint64_t)v77 < *(_QWORD *)(result + 40))
          v77 = *(unsigned int **)(result + 40);
        v76 = COERCE_FLOAT(bswap32(*v77));
      }
      v78 = interpolate_af[v53];
    }
    else
    {
      if (v51 != 2)
      {
        if (v51 == 3)
        {
          LODWORD(v54) = SBYTE1(v50);
          v55 = SBYTE2(v50);
          if (!v13)
          {
            v56 = v29 + ((uint64_t)SBYTE1(v50) << 32);
            v57 = v38 + ((uint64_t)SBYTE2(v50) << 32);
            v95 = v5;
            v58 = v11 & (v56 >> 63);
            v59 = v12 & (v57 >> 63);
            v60 = v59 + v57;
            if (v58 + v56 >= v11)
              v61 = v11;
            else
              v61 = 0;
            if (v60 >= v12)
              v62 = v12;
            else
              v62 = 0;
            v63 = v58 + ((uint64_t)SBYTE1(v50) << 32);
            v5 = v95;
            v54 = (v63 - v61) >> 32;
            v55 = (v59 + ((uint64_t)((unint64_t)HIWORD(v50) << 56) >> 24) - v62) >> 32;
          }
          v64 = 1.0;
          v65 = 1.0;
          if (v4)
          {
            v66 = (unsigned int *)(v47 + 4 * (v55 << v16) + v18);
            v67 = *(_QWORD *)(result + 40);
            if (v17 >= (unint64_t)v66)
              v68 = v66;
            else
              v68 = (unsigned int *)v17;
            if ((unint64_t)v68 < v67)
              v68 = *(unsigned int **)(result + 40);
            v64 = COERCE_FLOAT(bswap32(*v68));
            v69 = (unsigned int *)((char *)v66 + (int)v54 * (uint64_t)(int)v5);
            if (v17 < (unint64_t)v69)
              v69 = (unsigned int *)v17;
            if ((unint64_t)v69 < v67)
              v69 = *(unsigned int **)(result + 40);
            v65 = COERCE_FLOAT(bswap32(*v69));
          }
          v70 = interpolate_af[HIBYTE(v50) & 3];
          v71 = interpolate_af[(v50 >> 28) & 3];
          v49 = (float)((float)((float)(v49 - (float)(v49 * v70)) + (float)(v64 * v70))
                      - (float)((float)((float)(v49 - (float)(v49 * v70)) + (float)(v64 * v70)) * v71))
              + (float)((float)((float)(v64 - (float)(v64 * v70)) + (float)(v65 * v70)) * v71);
        }
        goto LABEL_106;
      }
      v79 = SBYTE2(v50);
      if (!v13)
      {
        v80 = v38 + ((uint64_t)SBYTE2(v50) << 32);
        v81 = v12 & (v80 >> 63);
        if (v81 + v80 >= v12)
          v82 = v12;
        else
          v82 = 0;
        v79 = (v81 + ((uint64_t)((unint64_t)HIWORD(v50) << 56) >> 24) - v82) >> 32;
      }
      v76 = 1.0;
      if (v4)
      {
        v83 = (unsigned int *)(v47 + 4 * (v79 << v16) + v18);
        if (v17 < (unint64_t)v83)
          v83 = (unsigned int *)v17;
        if ((unint64_t)v83 < *(_QWORD *)(result + 40))
          v83 = *(unsigned int **)(result + 40);
        v76 = COERCE_FLOAT(bswap32(*v83));
      }
      v78 = interpolate_af[(v50 >> 28) & 3];
    }
    v49 = (float)(v49 - (float)(v49 * v78)) + (float)(v76 * v78);
LABEL_106:
    *(_BYTE *)(v14 + 1) = (int)((float)(v49 * 255.0) + 0.5);
    *(_BYTE *)(v15 + 1) = v31 >> 22;
    if (a4 == 1)
      return result;
    v84 = 0;
    a2 += v9;
    v85 = v97 - a2;
    a3 += v10;
    v86 = v99 - a3;
    while ((((v19 + a2) | v85 | (v20 + a3) | v86) & 0x8000000000000000) == 0)
    {
      if (v13)
      {
        v87 = a2;
        HIDWORD(v88) = HIDWORD(a3);
        if (!v4)
          goto LABEL_124;
      }
      else
      {
        v90 = (v11 & ((v29 + v101) >> 63)) + v29 + v101;
        v91 = (v12 & ((v38 + v102) >> 63)) + v38 + v102;
        if (v90 >= v11)
          v92 = v11;
        else
          v92 = 0;
        v88 = v90 - v92;
        if (v91 >= v12)
          v93 = v12;
        else
          v93 = 0;
        v87 = v91 - v93;
        v38 = v87;
        v29 = v88;
        if (!v4)
        {
LABEL_124:
          v49 = 1.0;
          if (!v6)
            goto LABEL_126;
          goto LABEL_125;
        }
      }
      v47 = v4 + SHIDWORD(v88) * (uint64_t)(int)v5 + 4 * (v87 >> 32 << v16);
      v89 = (unsigned int *)(v47 + v18);
      if (v17 < v47 + v18)
        v89 = (unsigned int *)v17;
      if ((unint64_t)v89 < *(_QWORD *)(result + 40))
        v89 = *(unsigned int **)(result + 40);
      v49 = COERCE_FLOAT(bswap32(*v89));
      if (!v6)
        goto LABEL_126;
LABEL_125:
      v50 = *(_DWORD *)(v6 + (((unint64_t)a3 >> 22) & 0x3C0 | ((unint64_t)a2 >> 26) & 0x3C));
      if ((v50 & 0xF) != 0)
      {
        v15 += v84 + 1;
        v14 += v84 + 1;
        a4 += ~(_DWORD)v84;
        v31 = -1;
        goto LABEL_58;
      }
LABEL_126:
      *(_BYTE *)(v14 + v84 + 2) = (int)((float)(v49 * 255.0) + 0.5);
      v94 = v15 + v84++;
      a2 += v9;
      *(_BYTE *)(v94 + 2) = -1;
      v85 -= v9;
      a3 += v10;
      v86 -= v10;
      if (a4 - 1 == (_DWORD)v84)
        return result;
    }
    v15 += v84 + 1;
    v14 += v84 + 1;
    a4 += ~(_DWORD)v84;
    if (!a4)
      return result;
  }
  --a4;
  a2 += v9;
  a3 += v10;
  ++v14;
  *(_BYTE *)++v15 = 0;
  if (a4)
    goto LABEL_13;
  return result;
}

uint64_t A8_sample_ALPHAf(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float *v48;
  float v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  float v65;
  float *v66;
  unint64_t v67;
  float *v68;
  float *v69;
  float v70;
  float v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float v76;
  float *v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  float *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v4 = *(_QWORD *)(result + 40);
  v5 = *(int *)(result + 28);
  if (v4)
  {
    v6 = *(_QWORD *)(result + 176);
    v7 = *(_QWORD *)(result + 64);
    v8 = *(_QWORD *)(result + 72);
    v99 = *(_QWORD *)(result + 88);
    v9 = *(_QWORD *)(result + 112);
    v10 = *(_QWORD *)(result + 120);
    v12 = *(_QWORD *)(result + 48);
    v11 = *(_QWORD *)(result + 56);
    v13 = v12 == 0;
    if (v12)
    {
      v102 = *(_QWORD *)(result + 112);
      if (v9 > v12)
        v102 = v9 % v12;
    }
    else
    {
      v102 = 0;
    }
    v97 = *(_QWORD *)(result + 80);
    if (v11)
    {
      if (v10 <= v11)
        v101 = *(_QWORD *)(result + 120);
      else
        v101 = v10 % v11;
    }
    else
    {
      v101 = 0;
    }
  }
  else
  {
    v101 = 0;
    v102 = 0;
    v12 = 0;
    v6 = 0;
    v11 = 0;
    v7 = *(_QWORD *)(result + 64);
    v8 = *(_QWORD *)(result + 72);
    v97 = *(_QWORD *)(result + 80);
    v99 = *(_QWORD *)(result + 88);
    v13 = 1;
    v9 = *(_QWORD *)(result + 112);
    v10 = *(_QWORD *)(result + 120);
  }
  v14 = *(_QWORD *)(result + 152) - 1;
  v15 = *(_QWORD *)(result + 144) - 1;
  v16 = *(_BYTE *)(result + 248);
  v17 = v4
      + ((*(_DWORD *)(result + 260) - 1) * v5)
      + 4 * ((*(_DWORD *)(result + 256) - 1) << v16);
  v18 = 4 * *(_DWORD *)(result + 252);
  v96 = *(_DWORD *)(result + 188);
  v98 = v7;
  v19 = -v7;
  v100 = v8;
  v20 = -v8;
  while (1)
  {
LABEL_13:
    if (a3 >= v100)
    {
      if (a3 <= v99)
      {
        v29 = 0;
        v30 = ((unint64_t)a3 >> 22) & 0x3C0;
        v31 = 0x3FFFFFFF;
        v32 = a3;
        v33 = v98;
      }
      else
      {
        v25 = *(_QWORD *)(result + 216);
        v26 = *(_QWORD *)(result + 224) + v99;
        v27 = v26 - a3 + (v25 >> 1);
        if (v27 < 1)
          break;
        if (v27 >= v25)
          LODWORD(v28) = 0x3FFFFFFF;
        else
          v28 = (unint64_t)(*(_QWORD *)(result + 232) * v27) >> 32;
        v33 = v98;
        v31 = v28 | v96;
        v32 = v26 - 0x1000000;
        v29 = a3 - (v26 - 0x1000000);
        v30 = 448;
      }
    }
    else
    {
      v21 = *(_QWORD *)(result + 216);
      v22 = v100 - *(_QWORD *)(result + 224);
      v23 = a3 - v22 + (v21 >> 1);
      if (v23 < 1)
        break;
      if (v23 >= v21)
        LODWORD(v24) = 0x3FFFFFFF;
      else
        v24 = (unint64_t)(*(_QWORD *)(result + 232) * v23) >> 32;
      v33 = v98;
      v31 = v24 | v96;
      v32 = v22 + 0x1000000;
      v29 = a3 - (v22 + 0x1000000);
      v30 = 512;
    }
    if (a2 >= v33)
    {
      if (a2 <= v97)
      {
        v38 = 0;
        v39 = ((unint64_t)a2 >> 26) & 0x3C;
        v37 = a2;
      }
      else
      {
        v40 = *(_QWORD *)(result + 192);
        v41 = *(_QWORD *)(result + 200) + v97;
        v42 = v41 - a2 + (v40 >> 1);
        if (v42 < 1)
          break;
        if (v42 < v40)
          v31 = ((v31 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v42) >> 32) >> 15)) | v96;
        v37 = v41 - 0x1000000;
        v38 = a2 - (v41 - 0x1000000);
        v39 = 28;
      }
    }
    else
    {
      v34 = *(_QWORD *)(result + 192);
      v35 = v33 - *(_QWORD *)(result + 200);
      v36 = a2 - v35 + (v34 >> 1);
      if (v36 < 1)
        break;
      if (v36 < v34)
        v31 = ((v31 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v36) >> 32) >> 15)) | v96;
      v37 = v35 + 0x1000000;
      v38 = a2 - (v35 + 0x1000000);
      v39 = 32;
    }
    if (v31 < 0x400000)
      break;
    if (!v13)
    {
      v43 = (v11 & ((v32 % v11) >> 63)) + v32 % v11;
      v44 = (v12 & ((v37 % v12) >> 63)) + v37 % v12;
      if (v43 >= v11)
        v45 = v11;
      else
        v45 = 0;
      v32 = v43 - v45;
      if (v44 >= v12)
        v46 = v12;
      else
        v46 = 0;
      v37 = v44 - v46;
      v29 += v32;
      v38 += v37;
    }
    if (v4)
    {
      v47 = v4 + SHIDWORD(v32) * (uint64_t)(int)v5 + 4 * (v37 >> 32 << v16);
      v48 = (float *)(v47 + v18);
      if (v17 < v47 + v18)
        v48 = (float *)v17;
      if ((unint64_t)v48 < *(_QWORD *)(result + 40))
        v48 = *(float **)(result + 40);
      v49 = *v48;
      if (!v6)
        goto LABEL_106;
    }
    else
    {
      v47 = 0;
      v49 = 1.0;
      if (!v6)
        goto LABEL_106;
    }
    v50 = *(_DWORD *)(v6 + (v39 | v30));
LABEL_58:
    v51 = v50 & 0xF;
    v52 = v50 >> 8;
    v53 = HIBYTE(v50) & 3;
    if (v51 == 1)
    {
      LODWORD(v72) = SBYTE1(v50);
      if (!v13)
      {
        v73 = v29 + ((uint64_t)(char)v52 << 32);
        v74 = v11 & (v73 >> 63);
        if (v74 + v73 >= v11)
          v75 = v11;
        else
          v75 = 0;
        v72 = (v74 + ((uint64_t)(char)v52 << 32) - v75) >> 32;
      }
      v76 = 1.0;
      if (v4)
      {
        v77 = (float *)(v47 + (int)v72 * (uint64_t)(int)v5 + v18);
        if (v17 < (unint64_t)v77)
          v77 = (float *)v17;
        if ((unint64_t)v77 < *(_QWORD *)(result + 40))
          v77 = *(float **)(result + 40);
        v76 = *v77;
      }
      v78 = interpolate_af[v53];
    }
    else
    {
      if (v51 != 2)
      {
        if (v51 == 3)
        {
          LODWORD(v54) = SBYTE1(v50);
          v55 = SBYTE2(v50);
          if (!v13)
          {
            v56 = v29 + ((uint64_t)SBYTE1(v50) << 32);
            v57 = v38 + ((uint64_t)SBYTE2(v50) << 32);
            v95 = v5;
            v58 = v11 & (v56 >> 63);
            v59 = v12 & (v57 >> 63);
            v60 = v59 + v57;
            if (v58 + v56 >= v11)
              v61 = v11;
            else
              v61 = 0;
            if (v60 >= v12)
              v62 = v12;
            else
              v62 = 0;
            v63 = v58 + ((uint64_t)SBYTE1(v50) << 32);
            v5 = v95;
            v54 = (v63 - v61) >> 32;
            v55 = (v59 + ((uint64_t)((unint64_t)HIWORD(v50) << 56) >> 24) - v62) >> 32;
          }
          v64 = 1.0;
          v65 = 1.0;
          if (v4)
          {
            v66 = (float *)(v47 + 4 * (v55 << v16) + v18);
            v67 = *(_QWORD *)(result + 40);
            if (v17 >= (unint64_t)v66)
              v68 = v66;
            else
              v68 = (float *)v17;
            if ((unint64_t)v68 < v67)
              v68 = *(float **)(result + 40);
            v64 = *v68;
            v69 = (float *)((char *)v66 + (int)v54 * (uint64_t)(int)v5);
            if (v17 < (unint64_t)v69)
              v69 = (float *)v17;
            if ((unint64_t)v69 < v67)
              v69 = *(float **)(result + 40);
            v65 = *v69;
          }
          v70 = interpolate_af[HIBYTE(v50) & 3];
          v71 = interpolate_af[(v50 >> 28) & 3];
          v49 = (float)((float)((float)(v49 - (float)(v49 * v70)) + (float)(v64 * v70))
                      - (float)((float)((float)(v49 - (float)(v49 * v70)) + (float)(v64 * v70)) * v71))
              + (float)((float)((float)(v64 - (float)(v64 * v70)) + (float)(v65 * v70)) * v71);
        }
        goto LABEL_106;
      }
      v79 = SBYTE2(v50);
      if (!v13)
      {
        v80 = v38 + ((uint64_t)SBYTE2(v50) << 32);
        v81 = v12 & (v80 >> 63);
        if (v81 + v80 >= v12)
          v82 = v12;
        else
          v82 = 0;
        v79 = (v81 + ((uint64_t)((unint64_t)HIWORD(v50) << 56) >> 24) - v82) >> 32;
      }
      v76 = 1.0;
      if (v4)
      {
        v83 = (float *)(v47 + 4 * (v79 << v16) + v18);
        if (v17 < (unint64_t)v83)
          v83 = (float *)v17;
        if ((unint64_t)v83 < *(_QWORD *)(result + 40))
          v83 = *(float **)(result + 40);
        v76 = *v83;
      }
      v78 = interpolate_af[(v50 >> 28) & 3];
    }
    v49 = (float)(v49 - (float)(v49 * v78)) + (float)(v76 * v78);
LABEL_106:
    *(_BYTE *)(v14 + 1) = (int)((float)(v49 * 255.0) + 0.5);
    *(_BYTE *)(v15 + 1) = v31 >> 22;
    if (a4 == 1)
      return result;
    v84 = 0;
    a2 += v9;
    v85 = v97 - a2;
    a3 += v10;
    v86 = v99 - a3;
    while ((((v19 + a2) | v85 | (v20 + a3) | v86) & 0x8000000000000000) == 0)
    {
      if (v13)
      {
        v87 = a2;
        HIDWORD(v88) = HIDWORD(a3);
        if (!v4)
          goto LABEL_124;
      }
      else
      {
        v90 = (v11 & ((v29 + v101) >> 63)) + v29 + v101;
        v91 = (v12 & ((v38 + v102) >> 63)) + v38 + v102;
        if (v90 >= v11)
          v92 = v11;
        else
          v92 = 0;
        v88 = v90 - v92;
        if (v91 >= v12)
          v93 = v12;
        else
          v93 = 0;
        v87 = v91 - v93;
        v38 = v87;
        v29 = v88;
        if (!v4)
        {
LABEL_124:
          v49 = 1.0;
          if (!v6)
            goto LABEL_126;
          goto LABEL_125;
        }
      }
      v47 = v4 + SHIDWORD(v88) * (uint64_t)(int)v5 + 4 * (v87 >> 32 << v16);
      v89 = (float *)(v47 + v18);
      if (v17 < v47 + v18)
        v89 = (float *)v17;
      if ((unint64_t)v89 < *(_QWORD *)(result + 40))
        v89 = *(float **)(result + 40);
      v49 = *v89;
      if (!v6)
        goto LABEL_126;
LABEL_125:
      v50 = *(_DWORD *)(v6 + (((unint64_t)a3 >> 22) & 0x3C0 | ((unint64_t)a2 >> 26) & 0x3C));
      if ((v50 & 0xF) != 0)
      {
        v15 += v84 + 1;
        v14 += v84 + 1;
        a4 += ~(_DWORD)v84;
        v31 = -1;
        goto LABEL_58;
      }
LABEL_126:
      *(_BYTE *)(v14 + v84 + 2) = (int)((float)(v49 * 255.0) + 0.5);
      v94 = v15 + v84++;
      a2 += v9;
      *(_BYTE *)(v94 + 2) = -1;
      v85 -= v9;
      a3 += v10;
      v86 -= v10;
      if (a4 - 1 == (_DWORD)v84)
        return result;
    }
    v15 += v84 + 1;
    v14 += v84 + 1;
    a4 += ~(_DWORD)v84;
    if (!a4)
      return result;
  }
  --a4;
  a2 += v9;
  a3 += v10;
  ++v14;
  *(_BYTE *)++v15 = 0;
  if (a4)
    goto LABEL_13;
  return result;
}

uint64_t A8_sample_ALPHAf16(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 *v48;
  unsigned int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v68;
  unint64_t v69;
  __int16 *v70;
  __int16 *v71;
  float v72;
  float v73;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int16 *v87;
  float v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int16 *v93;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int16 *v106;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  v4 = *(_QWORD *)(result + 40);
  v5 = *(int *)(result + 28);
  if (v4)
  {
    v6 = *(_QWORD *)(result + 176);
    v7 = *(_QWORD *)(result + 64);
    v8 = *(_QWORD *)(result + 72);
    v113 = *(_QWORD *)(result + 88);
    v9 = *(_QWORD *)(result + 112);
    v10 = *(_QWORD *)(result + 120);
    v12 = *(_QWORD *)(result + 48);
    v11 = *(_QWORD *)(result + 56);
    v13 = v12 == 0;
    if (v12)
    {
      v116 = *(_QWORD *)(result + 112);
      if (v9 > v12)
        v116 = v9 % v12;
    }
    else
    {
      v116 = 0;
    }
    v111 = *(_QWORD *)(result + 80);
    if (v11)
    {
      if (v10 <= v11)
        v115 = *(_QWORD *)(result + 120);
      else
        v115 = v10 % v11;
    }
    else
    {
      v115 = 0;
    }
  }
  else
  {
    v115 = 0;
    v116 = 0;
    v12 = 0;
    v6 = 0;
    v11 = 0;
    v7 = *(_QWORD *)(result + 64);
    v8 = *(_QWORD *)(result + 72);
    v111 = *(_QWORD *)(result + 80);
    v113 = *(_QWORD *)(result + 88);
    v13 = 1;
    v9 = *(_QWORD *)(result + 112);
    v10 = *(_QWORD *)(result + 120);
  }
  v110 = *(_DWORD *)(result + 188);
  v14 = *(_QWORD *)(result + 152) - 1;
  v15 = *(_QWORD *)(result + 144) - 1;
  v16 = *(_BYTE *)(result + 248);
  v17 = v4
      + ((*(_DWORD *)(result + 260) - 1) * v5)
      + 2 * ((*(_DWORD *)(result + 256) - 1) << v16);
  v18 = 2 * *(_DWORD *)(result + 252);
  v112 = v7;
  v19 = -v7;
  v114 = v8;
  v20 = -v8;
  do
  {
    while (1)
    {
      if (a3 >= v114)
      {
        if (a3 <= v113)
        {
          v29 = 0;
          v30 = ((unint64_t)a3 >> 22) & 0x3C0;
          v31 = 0x3FFFFFFF;
          v32 = a3;
          v33 = v112;
        }
        else
        {
          v25 = *(_QWORD *)(result + 216);
          v26 = *(_QWORD *)(result + 224) + v113;
          v27 = v26 - a3 + (v25 >> 1);
          if (v27 < 1)
            goto LABEL_53;
          if (v27 >= v25)
            LODWORD(v28) = 0x3FFFFFFF;
          else
            v28 = (unint64_t)(*(_QWORD *)(result + 232) * v27) >> 32;
          v33 = v112;
          v31 = v28 | v110;
          v32 = v26 - 0x1000000;
          v29 = a3 - (v26 - 0x1000000);
          v30 = 448;
        }
      }
      else
      {
        v21 = *(_QWORD *)(result + 216);
        v22 = v114 - *(_QWORD *)(result + 224);
        v23 = a3 - v22 + (v21 >> 1);
        if (v23 < 1)
          goto LABEL_53;
        if (v23 >= v21)
          LODWORD(v24) = 0x3FFFFFFF;
        else
          v24 = (unint64_t)(*(_QWORD *)(result + 232) * v23) >> 32;
        v33 = v112;
        v31 = v24 | v110;
        v32 = v22 + 0x1000000;
        v29 = a3 - (v22 + 0x1000000);
        v30 = 512;
      }
      if (a2 >= v33)
        break;
      v34 = *(_QWORD *)(result + 192);
      v35 = v33 - *(_QWORD *)(result + 200);
      v36 = a2 - v35 + (v34 >> 1);
      if (v36 >= 1)
      {
        if (v36 < v34)
          v31 = ((v31 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v36) >> 32) >> 15)) | v110;
        v37 = v35 + 0x1000000;
        v38 = a2 - (v35 + 0x1000000);
        v39 = 32;
        goto LABEL_37;
      }
LABEL_53:
      --a4;
      a2 += v9;
      a3 += v10;
      ++v14;
      *(_BYTE *)++v15 = 0;
      if (!a4)
        return result;
    }
    if (a2 <= v111)
    {
      v38 = 0;
      v39 = ((unint64_t)a2 >> 26) & 0x3C;
      v37 = a2;
      goto LABEL_37;
    }
    v40 = *(_QWORD *)(result + 192);
    v41 = *(_QWORD *)(result + 200) + v111;
    v42 = v41 - a2 + (v40 >> 1);
    if (v42 < 1)
      goto LABEL_53;
    if (v42 < v40)
      v31 = ((v31 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v42) >> 32) >> 15)) | v110;
    v37 = v41 - 0x1000000;
    v38 = a2 - (v41 - 0x1000000);
    v39 = 28;
LABEL_37:
    if (v31 < 0x400000)
      goto LABEL_53;
    if (!v13)
    {
      v43 = (v11 & ((v32 % v11) >> 63)) + v32 % v11;
      v44 = (v12 & ((v37 % v12) >> 63)) + v37 % v12;
      if (v43 >= v11)
        v45 = v11;
      else
        v45 = 0;
      v32 = v43 - v45;
      if (v44 >= v12)
        v46 = v12;
      else
        v46 = 0;
      v37 = v44 - v46;
      v29 += v32;
      v38 += v37;
    }
    if (v4)
    {
      v47 = v4 + SHIDWORD(v32) * (uint64_t)(int)v5 + 2 * (v37 >> 32 << v16);
      v48 = (__int16 *)(v47 + v18);
      if (v17 < v47 + v18)
        v48 = (__int16 *)v17;
      if ((unint64_t)v48 < *(_QWORD *)(result + 40))
        v48 = *(__int16 **)(result + 40);
      _H2 = *v48;
      if (!v6)
        goto LABEL_107;
    }
    else
    {
      v47 = 0;
      _H2 = 15360;
      if (!v6)
        goto LABEL_107;
    }
    v50 = *(_DWORD *)(v6 + (v39 | v30));
LABEL_58:
    v51 = v50 & 0xF;
    v52 = v50 >> 8;
    v53 = HIBYTE(v50) & 3;
    switch(v51)
    {
      case 1:
        LODWORD(v82) = SBYTE1(v50);
        if (!v13)
        {
          v83 = v29 + ((uint64_t)(char)v52 << 32);
          v84 = v11 & (v83 >> 63);
          if (v84 + v83 >= v11)
            v85 = v11;
          else
            v85 = 0;
          v82 = (v84 + ((uint64_t)(char)v52 << 32) - v85) >> 32;
        }
        _H3 = 15360;
        if (v4)
        {
          v87 = (__int16 *)(v47 + (int)v82 * (uint64_t)(int)v5 + v18);
          if (v17 < (unint64_t)v87)
            v87 = (__int16 *)v17;
          if ((unint64_t)v87 < *(_QWORD *)(result + 40))
            v87 = *(__int16 **)(result + 40);
          _H3 = *v87;
        }
        v88 = interpolate_af[v53];
        goto LABEL_105;
      case 2:
        v89 = SBYTE2(v50);
        if (!v13)
        {
          v90 = v38 + ((uint64_t)SBYTE2(v50) << 32);
          v91 = v12 & (v90 >> 63);
          if (v91 + v90 >= v12)
            v92 = v12;
          else
            v92 = 0;
          v89 = (v91 + ((uint64_t)((unint64_t)HIWORD(v50) << 56) >> 24) - v92) >> 32;
        }
        _H3 = 15360;
        if (v4)
        {
          v93 = (__int16 *)(v47 + 2 * (v89 << v16) + v18);
          if (v17 < (unint64_t)v93)
            v93 = (__int16 *)v17;
          if ((unint64_t)v93 < *(_QWORD *)(result + 40))
            v93 = *(__int16 **)(result + 40);
          _H3 = *v93;
        }
        v88 = interpolate_af[(v50 >> 28) & 3];
LABEL_105:
        __asm
        {
          FCVT            S2, H2
          FCVT            S3, H3
        }
        _S2 = (float)(_S2 - (float)(_S2 * v88)) + (float)(_S3 * v88);
LABEL_106:
        __asm { FCVT            H2, S2 }
        break;
      case 3:
        LODWORD(v54) = SBYTE1(v50);
        v55 = SBYTE2(v50);
        if (!v13)
        {
          v56 = v52 << 56;
          v57 = (unint64_t)HIWORD(v50) << 56;
          v58 = v29 + ((uint64_t)SBYTE1(v50) << 32);
          v59 = v38 + (v57 >> 24);
          v109 = v5;
          v60 = v11 & (v58 >> 63);
          v61 = v12 & (v59 >> 63);
          v62 = v61 + v59;
          if (v60 + v58 >= v11)
            v63 = v11;
          else
            v63 = 0;
          if (v62 >= v12)
            v64 = v12;
          else
            v64 = 0;
          v65 = v60 + (v56 >> 24);
          v5 = v109;
          v54 = (v65 - v63) >> 32;
          v55 = (v61 + (v57 >> 24) - v64) >> 32;
        }
        _H3 = 15360;
        _H4 = 15360;
        if (v4)
        {
          v68 = v47 + 2 * (v55 << v16) + v18;
          v69 = *(_QWORD *)(result + 40);
          if (v17 >= v68)
            v70 = (__int16 *)(v47 + 2 * (v55 << v16) + v18);
          else
            v70 = (__int16 *)v17;
          if ((unint64_t)v70 < v69)
            v70 = *(__int16 **)(result + 40);
          _H3 = *v70;
          v71 = (__int16 *)(v68 + (int)v54 * (uint64_t)(int)v5);
          if (v17 < (unint64_t)v71)
            v71 = (__int16 *)v17;
          if ((unint64_t)v71 < v69)
            v71 = *(__int16 **)(result + 40);
          _H4 = *v71;
        }
        v72 = interpolate_af[HIBYTE(v50) & 3];
        v73 = interpolate_af[(v50 >> 28) & 3];
        __asm
        {
          FCVT            S2, H2
          FCVT            S3, H3
          FCVT            S4, H4
        }
        _S2 = (float)((float)((float)(_S2 - (float)(_S2 * v72)) + (float)(_S3 * v72))
                    - (float)((float)((float)(_S2 - (float)(_S2 * v72)) + (float)(_S3 * v72)) * v73))
            + (float)((float)((float)(_S3 - (float)(_S3 * v72)) + (float)(_S4 * v72)) * v73);
        goto LABEL_106;
    }
LABEL_107:
    __asm { FCVT            S2, H2 }
    *(_BYTE *)(v14 + 1) = (int)((float)(_S2 * 255.0) + 0.5);
    *(_BYTE *)(v15 + 1) = v31 >> 22;
    if (a4 == 1)
      break;
    v97 = 0;
    a2 += v9;
    v98 = v111 - a2;
    a3 += v10;
    v99 = v113 - a3;
    while ((((v19 + a2) | v98 | (v20 + a3) | v99) & 0x8000000000000000) == 0)
    {
      if (v13)
      {
        v100 = a2;
        HIDWORD(v101) = HIDWORD(a3);
      }
      else
      {
        v102 = (v11 & ((v29 + v115) >> 63)) + v29 + v115;
        v103 = (v12 & ((v38 + v116) >> 63)) + v38 + v116;
        if (v102 >= v11)
          v104 = v11;
        else
          v104 = 0;
        v101 = v102 - v104;
        if (v103 >= v12)
          v105 = v12;
        else
          v105 = 0;
        v100 = v103 - v105;
        v38 = v100;
        v29 = v101;
      }
      _H2 = 15360;
      if (v4)
      {
        v47 = v4 + SHIDWORD(v101) * (uint64_t)(int)v5 + 2 * (v100 >> 32 << v16);
        v106 = (__int16 *)(v47 + v18);
        if (v17 < v47 + v18)
          v106 = (__int16 *)v17;
        if ((unint64_t)v106 < *(_QWORD *)(result + 40))
          v106 = *(__int16 **)(result + 40);
        _H2 = *v106;
      }
      if (v6)
      {
        v50 = *(_DWORD *)(v6 + (((unint64_t)a3 >> 22) & 0x3C0 | ((unint64_t)a2 >> 26) & 0x3C));
        if ((v50 & 0xF) != 0)
        {
          v15 += v97 + 1;
          v14 += v97 + 1;
          a4 += ~(_DWORD)v97;
          v31 = -1;
          goto LABEL_58;
        }
      }
      __asm { FCVT            S2, H2 }
      *(_BYTE *)(v14 + v97 + 2) = (int)((float)(_S2 * 255.0) + 0.5);
      v108 = v15 + v97++;
      a2 += v9;
      *(_BYTE *)(v108 + 2) = -1;
      v98 -= v9;
      a3 += v10;
      v99 -= v10;
      if (a4 - 1 == (_DWORD)v97)
        return result;
    }
    v15 += v97 + 1;
    v14 += v97 + 1;
    a4 += ~(_DWORD)v97;
  }
  while (a4);
  return result;
}

uint64_t A8_mark_pixelmask(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  int v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned int v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  unint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  unsigned int v115;
  unsigned int v116;
  _BYTE *v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  unsigned int v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  _BYTE *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  char v137;
  char v138;
  unsigned __int8 v139;
  _BYTE *v140;
  uint64_t v141;
  uint64_t v142;
  _BYTE *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  unsigned int v149;
  _BYTE *v150;
  uint64_t v151;
  uint64_t v152;
  _BYTE *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  unsigned int v159;
  _BYTE *v160;
  uint64_t v161;
  uint64_t v162;
  _BYTE *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  unsigned int v169;
  _BYTE *v170;
  uint64_t v171;
  uint64_t v172;
  _BYTE *v173;
  unint64_t v174;

  v2 = *(_QWORD *)(result + 136);
  if (!v2)
    return result;
  v3 = *(_DWORD *)(result + 4);
  v4 = *(_DWORD *)(result + 8);
  v5 = v3;
  v6 = *(int *)(result + 28);
  v8 = *(_BYTE **)(result + 88);
  v7 = *(_QWORD *)(result + 96);
  v9 = *(_QWORD *)(result + 40) + *(int *)(result + 12) + *(int *)(result + 16) * (uint64_t)(int)v6;
  v10 = *(int *)(result + 124);
  v11 = v2 + *(int *)(result + 104) + *(int *)(result + 108) * (uint64_t)(int)v10;
  v13 = *(int *)(result + 56);
  v12 = *(_DWORD *)(result + 60);
  v14 = *(int *)(result + 76);
  if (*(unsigned __int8 *)(result + 1) << 8 == 256)
  {
    v8 += v13 + (int)v14 * (uint64_t)v12;
    if ((_DWORD)v14 == (_DWORD)v6 && (uint64_t)(v9 - (_QWORD)v8) >= 1)
    {
      if ((uint64_t)(v9 - (_QWORD)v8) <= v3)
      {
        v9 += v3 - 1;
        v8 += v3 - 1;
        v11 += v3 - 1;
        v17 = -1;
        goto LABEL_8;
      }
      v15 = v4 - 1;
      v16 = &v8[v14 * v15];
      if (v9 <= (unint64_t)&v16[v3 - 1])
      {
        v9 += v6 * v15;
        v6 = -v6;
        v14 = -v14;
        v11 += v10 * v15;
        v10 = -v10;
        v17 = 1;
        v8 = v16;
        goto LABEL_8;
      }
    }
    v17 = 1;
LABEL_8:
    v18 = 0;
    v5 = v17 * v3;
    v19 = v7 != 0;
    v20 = v10 - v5;
    v21 = v6 - v5;
    v22 = -1;
    v23 = v14;
    goto LABEL_12;
  }
  v23 = *(_DWORD *)(result + 64);
  v18 = *(_DWORD *)(result + 68);
  v19 = v7 != 0;
  v20 = v10 - v3;
  v21 = v6 - v3;
  if (v8)
  {
    v24 = 0;
    v25 = &v8[v18 * (uint64_t)(int)v14];
    v26 = &v8[(int)v14 * (uint64_t)(v12 % v18)];
    v8 = &v26[(int)v13 % v23];
    v22 = (unint64_t)&v26[v23];
    v17 = 1;
    v27 = v8;
    goto LABEL_13;
  }
  v22 = 0;
  v17 = 1;
LABEL_12:
  v25 = 0;
  v27 = 0;
  v14 -= v5;
  v24 = 1;
LABEL_13:
  result = *(_QWORD *)(result + 48);
  switch(a2)
  {
    case 0:
      do
      {
        v63 = 0;
        v64 = v3;
        do
        {
          v65 = *(unsigned __int8 *)(v11 + v63);
          if (*(_BYTE *)(v11 + v63))
          {
            if (v65 == 255)
            {
              LOBYTE(v66) = 0;
            }
            else
            {
              result = *(unsigned __int8 *)(v9 + v63);
              v66 = result - (((_DWORD)result * v65 + ((result * v65) >> 8) + 1) >> 8);
            }
            *(_BYTE *)(v9 + v63) = v66;
          }
          v63 += v17;
          --v64;
        }
        while (v64);
        v11 += v63 + v20;
        v9 += v63 + v21;
        --v4;
      }
      while (v4);
      return result;
    case 1:
      goto LABEL_37;
    case 2:
      goto LABEL_15;
    case 3:
      result = v17;
      v67 = -(uint64_t)v23;
      v68 = -(v14 * v18);
      do
      {
        v69 = 0;
        v70 = v3;
        do
        {
          v71 = *(unsigned __int8 *)(v11 + v69);
          if (*(_BYTE *)(v11 + v69))
          {
            if (v71 == 255)
            {
              v72 = *v8;
              v73 = (*(unsigned __int8 *)(v9 + v69) ^ 0xFF) * v72;
              v74 = v72 - ((v73 + (v73 >> 8) + 1) >> 8);
            }
            else
            {
              v75 = *(unsigned __int8 *)(v9 + v69);
              v76 = (v75 * v71 + ((v75 * v71) >> 8) + 1) >> 8;
              v74 = (v75 * (v71 ^ 0xFF)
                   + v76 * *v8
                   + ((v75 * (v71 ^ 0xFF) + v76 * *v8) >> 8)
                   + 1) >> 8;
            }
            *(_BYTE *)(v9 + v69) = v74;
          }
          v77 = &v8[result];
          if ((unint64_t)v77 >= v22)
            v78 = v67;
          else
            v78 = 0;
          v8 = &v77[v78];
          v69 += result;
          --v70;
        }
        while (v70);
        v11 += v69 + v20;
        v9 += v69 + v21;
        if (&v27[v14] >= v25)
          v79 = v68;
        else
          v79 = 0;
        v80 = &v27[v14 + v79];
        v81 = v22 + v14 + v79;
        v8 += v14;
        if (!v24)
        {
          v8 = v80;
          v27 = v80;
          v22 = v81;
        }
        --v4;
      }
      while (v4);
      return result;
    case 4:
      result = v17;
      v82 = -(uint64_t)v23;
      v83 = -(v14 * v18);
      do
      {
        v84 = 0;
        v85 = v3;
        do
        {
          v86 = *(unsigned __int8 *)(v11 + v84);
          if (*(_BYTE *)(v11 + v84))
          {
            if (v86 == 255)
            {
              v87 = *v8
                  - ((*(unsigned __int8 *)(v9 + v84) * *v8
                    + ((*(unsigned __int8 *)(v9 + v84) * *v8) >> 8)
                    + 1) >> 8);
            }
            else
            {
              v88 = *(unsigned __int8 *)(v9 + v84);
              v89 = ((v88 ^ 0xFF) * v86 + (((v88 ^ 0xFFu) * v86) >> 8) + 1) >> 8;
              v87 = (v88 * (v86 ^ 0xFF)
                   + v89 * *v8
                   + ((v88 * (v86 ^ 0xFF) + v89 * *v8) >> 8)
                   + 1) >> 8;
            }
            *(_BYTE *)(v9 + v84) = v87;
          }
          v90 = &v8[result];
          if ((unint64_t)v90 >= v22)
            v91 = v82;
          else
            v91 = 0;
          v8 = &v90[v91];
          v84 += result;
          --v85;
        }
        while (v85);
        v11 += v84 + v20;
        v9 += v84 + v21;
        if (&v27[v14] >= v25)
          v92 = v83;
        else
          v92 = 0;
        v93 = &v27[v14 + v92];
        v94 = v22 + v14 + v92;
        v8 += v14;
        if (!v24)
        {
          v8 = v93;
          v27 = v93;
          v22 = v94;
        }
        --v4;
      }
      while (v4);
      return result;
    case 5:
      do
      {
        v95 = 0;
        v96 = v3;
        do
        {
          result = *(unsigned __int8 *)(v11 + v95);
          if (*(_BYTE *)(v11 + v95))
          {
            result = (255 * *(unsigned __int8 *)(v9 + v95)
                    + ((255 * *(unsigned __int8 *)(v9 + v95)) >> 8)
                    + 1) >> 8;
            *(_BYTE *)(v9 + v95) = (unsigned __int16)(255 * *(unsigned __int8 *)(v9 + v95)
                                                    + ((255 * *(unsigned __int8 *)(v9 + v95)) >> 8)
                                                    + 1) >> 8;
          }
          v95 += v17;
          --v96;
        }
        while (v96);
        v11 += v17 * (unint64_t)(v3 - 1) + v17 + v20;
        v9 += v95 + v21;
        --v4;
      }
      while (v4);
      return result;
    case 6:
      result = v17;
      v97 = -(uint64_t)v23;
      v98 = -(v14 * v18);
      do
      {
        v99 = 0;
        v100 = v3;
        do
        {
          v101 = *(unsigned __int8 *)(v11 + v99);
          if (*(_BYTE *)(v11 + v99))
          {
            v102 = *(unsigned __int8 *)(v9 + v99);
            if ((_BYTE)v102 != 0xFF)
            {
              if (~(_BYTE)v102 == 255)
              {
                v103 = *v8
                     - ((*v8 * (v101 ^ 0xFF) + ((*v8 * (v101 ^ 0xFFu)) >> 8) + 1) >> 8);
              }
              else
              {
                v104 = ((~(_BYTE)v102 * v101
                       + ((~(_BYTE)v102 * v101) >> 8)
                       + 1) >> 8)
                     * *v8;
                v103 = v102 + ((v104 + (v104 >> 8) + 1) >> 8);
              }
              *(_BYTE *)(v9 + v99) = v103;
            }
          }
          v105 = &v8[v17];
          if ((unint64_t)v105 >= v22)
            v106 = v97;
          else
            v106 = 0;
          v8 = &v105[v106];
          v99 += v17;
          --v100;
        }
        while (v100);
        v11 += v99 + v20;
        v9 += v99 + v21;
        if (&v27[v14] >= v25)
          v107 = v98;
        else
          v107 = 0;
        v108 = &v27[v14 + v107];
        v109 = v22 + v14 + v107;
        v8 += v14;
        if (!v24)
        {
          v8 = v108;
          v27 = v108;
          v22 = v109;
        }
        --v4;
      }
      while (v4);
      return result;
    case 7:
      result = v17;
      v110 = -(uint64_t)v23;
      v111 = -(v14 * v18);
      do
      {
        v112 = 0;
        v113 = v3;
        do
        {
          v114 = *(unsigned __int8 *)(v11 + v112);
          if (*(_BYTE *)(v11 + v112))
          {
            if (v114 == 255)
            {
              v115 = *(unsigned __int8 *)(v9 + v112)
                   - (((*v8 ^ 0xFF) * *(unsigned __int8 *)(v9 + v112)
                     + (((*v8 ^ 0xFF) * *(unsigned __int8 *)(v9 + v112)) >> 8)
                     + 1) >> 8);
            }
            else
            {
              v116 = *v8 * v114 + ((*v8 * v114) >> 8) + 1;
              v115 = (((v114 ^ 0xFF) + (v116 >> 8)) * *(unsigned __int8 *)(v9 + v112)
                    + ((((v114 ^ 0xFF) + (v116 >> 8)) * *(unsigned __int8 *)(v9 + v112)) >> 8)
                    + 1) >> 8;
            }
            *(_BYTE *)(v9 + v112) = v115;
          }
          v117 = &v8[result];
          if ((unint64_t)v117 >= v22)
            v118 = v110;
          else
            v118 = 0;
          v8 = &v117[v118];
          v112 += result;
          --v113;
        }
        while (v113);
        v11 += v112 + v20;
        v9 += v112 + v21;
        if (&v27[v14] >= v25)
          v119 = v111;
        else
          v119 = 0;
        v120 = &v27[v14 + v119];
        v121 = v22 + v14 + v119;
        v8 += v14;
        if (!v24)
        {
          v8 = v120;
          v27 = v120;
          v22 = v121;
        }
        --v4;
      }
      while (v4);
      return result;
    case 8:
      result = v17;
      v122 = -(uint64_t)v23;
      v123 = -(v14 * v18);
      do
      {
        v124 = 0;
        v125 = v3;
        do
        {
          v126 = *(unsigned __int8 *)(v11 + v124);
          if (*(_BYTE *)(v11 + v124))
          {
            if (v126 == 255)
              v127 = *v8;
            else
              v127 = (*v8 * v126 + ((*v8 * v126) >> 8) + 1) >> 8;
            *(_BYTE *)(v9 + v124) -= (unsigned __int16)(v127 * *(unsigned __int8 *)(v9 + v124)
                                                      + ((v127 * *(unsigned __int8 *)(v9 + v124)) >> 8)
                                                      + 1) >> 8;
          }
          v128 = &v8[result];
          if ((unint64_t)v128 >= v22)
            v129 = v122;
          else
            v129 = 0;
          v8 = &v128[v129];
          v124 += result;
          --v125;
        }
        while (v125);
        v11 += v124 + v20;
        v9 += v124 + v21;
        if (&v27[v14] >= v25)
          v130 = v123;
        else
          v130 = 0;
        v131 = &v27[v14 + v130];
        v132 = v22 + v14 + v130;
        v8 += v14;
        if (!v24)
        {
          v8 = v131;
          v27 = v131;
          v22 = v132;
        }
        --v4;
      }
      while (v4);
      return result;
    case 9:
      result = v17;
      v133 = -(uint64_t)v23;
      v134 = -(v14 * v18);
      do
      {
        v135 = 0;
        v136 = v3;
        do
        {
          v137 = *(_BYTE *)(v11 + v135);
          if (v137)
          {
            v138 = ~v137;
            v139 = *v8
                 - ((unsigned __int16)(*v8 * ~v137
                                     + ((*v8 * ~v137) >> 8)
                                     + 1) >> 8);
            *(_BYTE *)(v9 + v135) = (unsigned __int16)(v139 * (*(unsigned __int8 *)(v9 + v135) ^ 0xFF)
                                                     + (v139 + v138) * *(unsigned __int8 *)(v9 + v135)
                                                     + ((v139 * (*(unsigned __int8 *)(v9 + v135) ^ 0xFF)
                                                       + (v139 + v138)
                                                       * *(unsigned __int8 *)(v9 + v135)) >> 8)
                                                     + 1) >> 8;
          }
          v140 = &v8[v17];
          if ((unint64_t)v140 >= v22)
            v141 = v133;
          else
            v141 = 0;
          v8 = &v140[v141];
          v135 += v17;
          --v136;
        }
        while (v136);
        v11 += v135 + v20;
        v9 += v135 + v21;
        if (&v27[v14] >= v25)
          v142 = v134;
        else
          v142 = 0;
        v143 = &v27[v14 + v142];
        v144 = v22 + v14 + v142;
        v8 += v14;
        if (!v24)
        {
          v8 = v143;
          v27 = v143;
          v22 = v144;
        }
        --v4;
      }
      while (v4);
      return result;
    case 10:
      result = v17;
      v145 = -(uint64_t)v23;
      v146 = -(v14 * v18);
      do
      {
        v147 = 0;
        v148 = v3;
        do
        {
          if (*(_BYTE *)(v11 + v147))
          {
            v149 = *v8
                 - ((*v8 * (*(unsigned __int8 *)(v11 + v147) ^ 0xFF)
                   + ((*v8 * (*(unsigned __int8 *)(v11 + v147) ^ 0xFFu)) >> 8)
                   + 1) >> 8);
            *(_BYTE *)(v9 + v147) = (unsigned __int16)(v149 * (*(unsigned __int8 *)(v9 + v147) ^ 0xFF)
                                                     + ~(_BYTE)v149 * *(unsigned __int8 *)(v9 + v147)
                                                     + ((v149
                                                       * (*(unsigned __int8 *)(v9 + v147) ^ 0xFF)
                                                       + ~(_BYTE)v149
                                                       * *(unsigned __int8 *)(v9 + v147)) >> 8)
                                                     + 1) >> 8;
          }
          v150 = &v8[v17];
          if ((unint64_t)v150 >= v22)
            v151 = v145;
          else
            v151 = 0;
          v8 = &v150[v151];
          v147 += v17;
          --v148;
        }
        while (v148);
        v11 += v147 + v20;
        v9 += v147 + v21;
        if (&v27[v14] >= v25)
          v152 = v146;
        else
          v152 = 0;
        v153 = &v27[v14 + v152];
        v154 = v22 + v14 + v152;
        v8 += v14;
        if (!v24)
        {
          v8 = v153;
          v27 = v153;
          v22 = v154;
        }
        --v4;
      }
      while (v4);
      return result;
    case 11:
      result = v17;
      v155 = -(uint64_t)v23;
      v156 = -(v14 * v18);
      do
      {
        v157 = 0;
        v158 = v3;
        do
        {
          if (*(_BYTE *)(v11 + v157))
          {
            v159 = *(unsigned __int8 *)(v9 + v157)
                 + (*v8
                                   - ((unsigned __int16)(*v8
                                                       * (*(unsigned __int8 *)(v11 + v157) ^ 0xFF)
                                                       + ((*v8
                                                         * (*(unsigned __int8 *)(v11 + v157) ^ 0xFFu)) >> 8)
                                                       + 1) >> 8));
            if (v159 >= 0xFF)
              LOBYTE(v159) = -1;
            *(_BYTE *)(v9 + v157) = v159;
          }
          v160 = &v8[v17];
          if ((unint64_t)v160 >= v22)
            v161 = v155;
          else
            v161 = 0;
          v8 = &v160[v161];
          v157 += v17;
          --v158;
        }
        while (v158);
        v11 += v157 + v20;
        v9 += v157 + v21;
        if (&v27[v14] >= v25)
          v162 = v156;
        else
          v162 = 0;
        v163 = &v27[v14 + v162];
        v164 = v22 + v14 + v162;
        v8 += v14;
        if (!v24)
        {
          v8 = v163;
          v27 = v163;
          v22 = v164;
        }
        --v4;
      }
      while (v4);
      return result;
    case 12:
      result = v17;
      v165 = -(uint64_t)v23;
      v166 = -(v14 * v18);
      do
      {
        v167 = 0;
        v168 = v3;
        do
        {
          if (*(_BYTE *)(v11 + v167))
          {
            v169 = *(unsigned __int8 *)(v9 + v167)
                 + (*v8
                                   - ((unsigned __int16)(*v8
                                                       * (*(unsigned __int8 *)(v11 + v167) ^ 0xFF)
                                                       + ((*v8
                                                         * (*(unsigned __int8 *)(v11 + v167) ^ 0xFFu)) >> 8)
                                                       + 1) >> 8));
            if (v169 >= 0xFF)
              LOBYTE(v169) = -1;
            *(_BYTE *)(v9 + v167) = v169;
          }
          v170 = &v8[v17];
          if ((unint64_t)v170 >= v22)
            v171 = v165;
          else
            v171 = 0;
          v8 = &v170[v171];
          v167 += v17;
          --v168;
        }
        while (v168);
        v11 += v167 + v20;
        v9 += v167 + v21;
        if (&v27[v14] >= v25)
          v172 = v166;
        else
          v172 = 0;
        v173 = &v27[v14 + v172];
        v174 = v22 + v14 + v172;
        v8 += v14;
        if (!v24)
        {
          v8 = v173;
          v27 = v173;
          v22 = v174;
        }
        --v4;
      }
      while (v4);
      return result;
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      if (!v19)
      {
LABEL_37:
        if (!result)
          v19 = 1;
        result = v17;
        v42 = -(uint64_t)v23;
        v43 = -(v14 * v18);
        if (v19)
        {
          do
          {
            v44 = 0;
            v45 = v3;
            do
            {
              v46 = *(unsigned __int8 *)(v11 + v44);
              if (*(_BYTE *)(v11 + v44))
              {
                if (v46 == 255)
                  LOBYTE(v47) = *v8;
                else
                  v47 = (*v8 * v46
                       + *(unsigned __int8 *)(v9 + v44) * (v46 ^ 0xFF)
                       + ((*v8 * v46 + *(unsigned __int8 *)(v9 + v44) * (v46 ^ 0xFFu)) >> 8)
                       + 1) >> 8;
                *(_BYTE *)(v9 + v44) = v47;
              }
              v48 = &v8[result];
              if ((unint64_t)v48 >= v22)
                v49 = v42;
              else
                v49 = 0;
              v8 = &v48[v49];
              v44 += result;
              --v45;
            }
            while (v45);
            v11 += v44 + v20;
            v9 += v44 + v21;
            if (&v27[v14] >= v25)
              v50 = v43;
            else
              v50 = 0;
            v51 = &v27[v14 + v50];
            v52 = v22 + v14 + v50;
            v8 += v14;
            if (!v24)
            {
              v8 = v51;
              v27 = v51;
              v22 = v52;
            }
            --v4;
          }
          while (v4);
        }
        else
        {
          do
          {
            v53 = 0;
            v54 = v3;
            do
            {
              v55 = *(unsigned __int8 *)(v11 + v53);
              if (*(_BYTE *)(v11 + v53))
              {
                if (v55 == 255)
                {
                  LOBYTE(v56) = *v8;
                }
                else
                {
                  v57 = *(unsigned __int8 *)(v9 + v53) * (v55 ^ 0xFF);
                  v56 = (v57 + *v8 * v55 + ((v57 + *v8 * v55) >> 8) + 1) >> 8;
                }
                *(_BYTE *)(v9 + v53) = v56;
              }
              v58 = &v8[result];
              if ((unint64_t)v58 >= v22)
                v59 = v42;
              else
                v59 = 0;
              v8 = &v58[v59];
              v53 += result;
              --v54;
            }
            while (v54);
            v11 += v53 + v20;
            v9 += v53 + v21;
            if (&v27[v14] >= v25)
              v60 = v43;
            else
              v60 = 0;
            v61 = &v27[v14 + v60];
            v62 = v22 + v14 + v60;
            v8 += v14;
            if (!v24)
            {
              v8 = v61;
              v27 = v61;
              v22 = v62;
            }
            --v4;
          }
          while (v4);
        }
        return result;
      }
LABEL_15:
      result = v17;
      v28 = -(uint64_t)v23;
      v29 = -(v14 * v18);
      break;
    default:
      return result;
  }
  do
  {
    v30 = 0;
    v31 = v3;
    do
    {
      v32 = *(unsigned __int8 *)(v11 + v30);
      if (!*(_BYTE *)(v11 + v30))
        goto LABEL_26;
      if (v32 == 255)
      {
        v33 = *v8;
        if (!*v8)
          goto LABEL_26;
        if (v33 == 255)
          goto LABEL_25;
        v34 = *(unsigned __int8 *)(v9 + v30) * (v33 ^ 0xFF);
      }
      else
      {
        v35 = *v8;
        v36 = v35 * (v32 ^ 0xFF) + ((v35 * (v32 ^ 0xFFu)) >> 8) + 1;
        if (v35 == BYTE1(v36))
          goto LABEL_26;
        v33 = v35 - (v36 >> 8);
        v34 = *(unsigned __int8 *)(v9 + v30) * ~(_BYTE)v33;
      }
      v33 += (v34 + (v34 >> 8) + 1) >> 8;
LABEL_25:
      *(_BYTE *)(v9 + v30) = v33;
LABEL_26:
      v37 = &v8[v17];
      if ((unint64_t)v37 >= v22)
        v38 = v28;
      else
        v38 = 0;
      v8 = &v37[v38];
      v30 += v17;
      --v31;
    }
    while (v31);
    v11 += v30 + v20;
    v9 += v30 + v21;
    if (&v27[v14] >= v25)
      v39 = v29;
    else
      v39 = 0;
    v40 = &v27[v14 + v39];
    v41 = v22 + v14 + v39;
    v8 += v14;
    if (!v24)
    {
      v8 = v40;
      v27 = v40;
      v22 = v41;
    }
    --v4;
  }
  while (v4);
  return result;
}

void A8_mark_image_OPAQUE(uint64_t a1, uint64_t a2, float a3)
{
  int v4;
  int v5;
  unsigned int v6;
  int *v7;
  int v8;
  void *v9;
  void *v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = (int)(float)((float)(int)(float)(a3 * 255.0) + 0.5);
  v5 = *(_DWORD *)(a1 + 4);
  v6 = *(_DWORD *)(a1 + 8);
  v13 = v6;
  v14 = v5;
  v7 = *(int **)(a1 + 136);
  if (v7)
  {
    v8 = *(_DWORD *)(a1 + 104);
    LODWORD(v15) = *(_DWORD *)(a1 + 108);
    HIDWORD(v15) = v8;
    shape_enum_clip_alloc(a1, a2, v7, 1, 1, 1, v8, v15, v5, v6);
    v10 = v9;
    if (v9)
      goto LABEL_5;
  }
  v11 = 0;
  v12 = 0;
  v10 = 0;
  v15 = 0;
  while (1)
  {
    CGBlt_fillBytes(v5, v6, 16843009 * v4, (char *)(*(_QWORD *)(a1 + 40)+ (*(int *)(a1 + 16) + (uint64_t)v12) * *(int *)(a1 + 28)+ *(int *)(a1 + 12)+ (uint64_t)v11), *(_DWORD *)(a1 + 28));
    if (!v10)
      break;
LABEL_5:
    if (!shape_enum_clip_next((uint64_t)v10, (int *)&v15 + 1, &v15, &v14, &v13))
    {
      free(v10);
      return;
    }
    v12 = v15;
    v11 = HIDWORD(v15);
    v6 = v13;
    v5 = v14;
  }
}

uint64_t A8_image_mark_W8(uint64_t result, int *a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v6;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;

  v6 = *((unsigned __int8 *)a2 + 8);
  v7 = *a2;
  v8 = (_BYTE *)*((_QWORD *)a2 + 2);
  v9 = *((_QWORD *)a2 + 3) - a5;
  v10 = 255 * v6 + ((255 * v6) >> 8) + 1;
  v11 = v10 >> 8;
  v12 = (v10 >> 8) ^ 0xFF;
  if (v6 == 255)
    LOBYTE(v11) = -1;
  if (!*(_QWORD *)(result + 176))
  {
    while (1)
    {
      if (v7 == 1)
      {
        if (a5 >= 1)
        {
          v16 = a5;
          do
          {
            *v8++ = v11;
            --v16;
          }
          while (v16);
        }
        goto LABEL_30;
      }
      v17 = a5;
      if (a5 >= 1)
        break;
LABEL_30:
      v8 += v9;
      if (!--a6)
        return result;
    }
    while (v6 != 255)
    {
      if (BYTE1(v10))
      {
        v18 = ((v12 * *v8 + ((v12 * *v8) >> 8) + 1) >> 8) + (v10 >> 8);
LABEL_28:
        *v8 = v18;
      }
      ++v8;
      if (!--v17)
        goto LABEL_30;
    }
    LOBYTE(v18) = -1;
    goto LABEL_28;
  }
  do
  {
    if (v7 != 1)
    {
      v14 = a5;
      if (a5 < 1)
        goto LABEL_16;
      while (v6 != 255)
      {
        if (BYTE1(v10))
        {
          v15 = ((v12 * *v8 + ((v12 * *v8) >> 8) + 1) >> 8) + (v10 >> 8);
LABEL_14:
          *v8 = v15;
        }
        ++v8;
        if (!--v14)
          goto LABEL_16;
      }
      LOBYTE(v15) = -1;
      goto LABEL_14;
    }
    if (a5 >= 1)
    {
      v13 = a5;
      do
      {
        *v8++ = v11;
        --v13;
      }
      while (v13);
    }
LABEL_16:
    v8 += v9;
    --a6;
  }
  while (a6);
  return result;
}

uint64_t A8_image_mark_RGB24(uint64_t result, int *a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v6;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;

  v6 = *((unsigned __int8 *)a2 + 8);
  v7 = *a2;
  v8 = (_BYTE *)*((_QWORD *)a2 + 2);
  v9 = *((_QWORD *)a2 + 3) - a5;
  v10 = 255 * v6 + ((255 * v6) >> 8) + 1;
  v11 = v10 >> 8;
  v12 = (v10 >> 8) ^ 0xFF;
  if (v6 == 255)
    LOBYTE(v11) = -1;
  if (!*(_QWORD *)(result + 176))
  {
    while (1)
    {
      if (v7 == 1)
      {
        if (a5 >= 1)
        {
          v16 = a5;
          do
          {
            *v8++ = v11;
            --v16;
          }
          while (v16);
        }
        goto LABEL_30;
      }
      v17 = a5;
      if (a5 >= 1)
        break;
LABEL_30:
      v8 += v9;
      if (!--a6)
        return result;
    }
    while (v6 != 255)
    {
      if (BYTE1(v10))
      {
        v18 = ((v12 * *v8 + ((v12 * *v8) >> 8) + 1) >> 8) + (v10 >> 8);
LABEL_28:
        *v8 = v18;
      }
      ++v8;
      if (!--v17)
        goto LABEL_30;
    }
    LOBYTE(v18) = -1;
    goto LABEL_28;
  }
  do
  {
    if (v7 != 1)
    {
      v14 = a5;
      if (a5 < 1)
        goto LABEL_16;
      while (v6 != 255)
      {
        if (BYTE1(v10))
        {
          v15 = ((v12 * *v8 + ((v12 * *v8) >> 8) + 1) >> 8) + (v10 >> 8);
LABEL_14:
          *v8 = v15;
        }
        ++v8;
        if (!--v14)
          goto LABEL_16;
      }
      LOBYTE(v15) = -1;
      goto LABEL_14;
    }
    if (a5 >= 1)
    {
      v13 = a5;
      do
      {
        *v8++ = v11;
        --v13;
      }
      while (v13);
    }
LABEL_16:
    v8 += v9;
    --a6;
  }
  while (a6);
  return result;
}

void A8_shade_radial_A(uint64_t a1, unint64_t a2, unint64_t a3, int a4)
{
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  unint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  float v34;
  float v35;
  int v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  BOOL v56;
  float v57;
  BOOL v58;
  unsigned int v59;
  float v60;
  _WORD *v61;
  float v62;
  float v63;
  float v64;
  int v65;
  float v66;
  float v67;
  float v68;
  float v70;
  float v71;
  float v72;
  unint64_t v73;
  unint64_t v74;
  int v76;
  __int16 v77;
  __int16 v78;
  uint64_t v79;
  char v80;
  __int16 *v81;
  __int16 *v82;
  __int16 v83;
  int v84;
  __int16 v85;
  __int16 v86;

  v5 = *(float **)(a1 + 400);
  v6 = *(float *)(a1 + 280);
  v7 = *(float *)(a1 + 284);
  v8 = *(float *)(*(_QWORD *)(a1 + 272) + 4);
  v9 = v8 * (float)(uint64_t)a2;
  v10 = v8 * (float)(uint64_t)a3;
  v11 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v10) + (float)(v6 * v9));
  v12 = *(float *)(a1 + 300) + (float)((float)(v10 * *(float *)(a1 + 292)) + (float)(v7 * v9));
  v13 = *(float *)(a1 + 336);
  v14 = *(float *)(a1 + 344);
  v15 = *(float *)(a1 + 304);
  v16 = *(float *)(a1 + 308);
  v17 = *(unsigned int *)(a1 + 324);
  v18 = v5[2];
  v19 = v5[4];
  v20 = v5[5];
  v21 = v5[7];
  v24 = a1 + 144;
  v22 = *(_BYTE **)(a1 + 144);
  v23 = *(_BYTE **)(v24 + 8);
  v25 = *(unsigned __int16 **)(a1 + 376);
  v26 = *(_QWORD *)(a1 + 360);
  v27 = (a2 >> 8) & 0xF;
  if (v18 != 0.0 || v21 != 0.0 || v7 != 0.0)
  {
    v37 = *(_DWORD *)(a1 + 320);
    v38 = v5[3];
    v39 = v5[6];
    v40 = v5[8];
    v41 = a1 + 368;
    v42 = *(_QWORD *)(a1 + 368);
    v43 = v42 + ((a3 >> 4) & 0xF0);
    v44 = v42 == 0;
    v45 = 15;
    if (v44)
    {
      v45 = 0;
      v46 = 0;
    }
    else
    {
      v46 = (a2 >> 8) & 0xF;
    }
    if (!v44)
      v41 = v43;
    v47 = -v39;
    v48 = v16 - v15;
    while (1)
    {
      v49 = v47 + (float)((float)(v11 + v11) * v18);
      v50 = (float)((float)(v12 * v12) + (float)(v11 * v11)) - v21;
      if (v20 == 0.0)
      {
        v57 = v50 / v49;
      }
      else
      {
        v51 = (float)((float)(v20 * -4.0) * v50) + (float)(v49 * v49);
        if (v51 < 0.0)
          goto LABEL_53;
        v52 = sqrtf(v51);
        v53 = v40 * (float)(v49 - v52);
        v54 = v49 + v52;
        v55 = v40 * v54;
        v56 = (float)(v40 * v54) <= v53;
        if ((float)(v40 * v54) <= v53)
          v57 = v40 * v54;
        else
          v57 = v53;
        if (v56)
          v55 = v53;
        if (v55 < 0.0)
        {
          v58 = v55 < v38;
LABEL_39:
          v59 = v37;
          if (v58)
            goto LABEL_53;
LABEL_40:
          if ((v59 & 0x80000000) == 0)
            goto LABEL_52;
          goto LABEL_53;
        }
        if (v55 <= 1.0)
        {
          v60 = v15 + (float)(v55 * v48);
          goto LABEL_51;
        }
        if ((v17 & 0x80000000) == 0)
        {
          v59 = v17;
          if (v55 <= v19)
          {
LABEL_52:
            v61 = (_WORD *)(v26 + 2 * v59);
LABEL_54:
            *v23 = (unsigned __int16)(*(unsigned __int8 *)(v41 + v46) + *v61) >> 8;
            LOBYTE(v61) = -1;
            goto LABEL_55;
          }
        }
      }
      if (v57 < 0.0)
      {
        v58 = v57 < v38;
        goto LABEL_39;
      }
      if (v57 > 1.0)
      {
        v59 = v17;
        if (v57 > v19)
          goto LABEL_53;
        goto LABEL_40;
      }
      v60 = v15 + (float)(v57 * v48);
LABEL_51:
      v59 = (int)(float)(v14 * (float)(v60 - v13));
      if ((v59 & 0x80000000) == 0)
        goto LABEL_52;
LABEL_53:
      v61 = v25;
      if (v25)
        goto LABEL_54;
LABEL_55:
      v46 = ((_DWORD)v46 + 1) & v45;
      v11 = v6 + v11;
      v12 = v7 + v12;
      ++v23;
      *v22++ = (_BYTE)v61;
      if (!--a4)
        return;
    }
  }
  v28 = a1 + 368;
  v29 = *(_QWORD *)(a1 + 368);
  v30 = v29 == 0;
  if (v29)
    v31 = v29 + ((a3 >> 4) & 0xF0);
  else
    v31 = v28;
  if (v30)
    LODWORD(v32) = 0;
  else
    LODWORD(v32) = (BYTE1(a2) + 1) & 0xF;
  if (v30)
  {
    LODWORD(v27) = 0;
    v33 = 0;
  }
  else
  {
    v33 = 15;
  }
  v34 = v12 * v12;
  v35 = -v20;
  if (v34 <= (float)-v20)
  {
    v62 = fabsf(v5[8]);
    v63 = v20 * -4.0;
    v64 = v16 - v15;
    v65 = a4 + 2;
    while (1)
    {
      v66 = v34 + (float)(v11 * v11);
      v67 = v6 + v11;
      v68 = v34 + (float)(v67 * v67);
      if (v66 <= v35 || v68 <= v35)
      {
        v70 = sqrtf(v63 * v68);
        v71 = v62 * sqrtf(v63 * v66);
        v72 = v62 * v70;
        v73 = (int)(float)(v14 * (float)((float)(v15 + (float)(v71 * v64)) - v13));
        v74 = (int)(float)(v14 * (float)((float)(v15 + (float)((float)(v62 * v70) * v64)) - v13));
        if (v71 > 1.0 || v72 > 1.0)
        {
          if (v71 <= 1.0)
          {
            if ((v73 & 0x80000000) != 0)
              goto LABEL_70;
          }
          else if (v71 > v19 || (v73 = v17, (v17 & 0x80000000) != 0))
          {
LABEL_70:
            v73 = (unint64_t)v25;
            if (!v25)
            {
LABEL_82:
              if (v72 <= 1.0)
              {
                if ((v74 & 0x80000000) != 0)
                  goto LABEL_85;
              }
              else if (v72 > v19 || (v74 = v17, (v17 & 0x80000000) != 0))
              {
LABEL_85:
                if (!v25)
                {
                  v80 = 0;
                  goto LABEL_91;
                }
                v78 = *v25;
                v79 = v32;
                goto LABEL_89;
              }
              v78 = *(_WORD *)(v26 + 2 * v74);
              v79 = v32;
LABEL_89:
              v77 = *(unsigned __int8 *)(v31 + v79) + v78;
              goto LABEL_90;
            }
LABEL_81:
            *v23 = (unsigned __int16)(*(unsigned __int8 *)(v31 + v27) + *(_WORD *)v73) >> 8;
            LOBYTE(v73) = -1;
            goto LABEL_82;
          }
          v73 = v26 + 2 * v73;
          goto LABEL_81;
        }
        v77 = *(unsigned __int8 *)(v31 + v32) + *(_WORD *)(v26 + 2 * (int)v74);
        LODWORD(v73) = (*(unsigned __int8 *)(v31 + v27)
                      + *(unsigned __int16 *)(v26 + 2 * (int)v73)) >> 8;
      }
      else
      {
        if ((v17 & 0x80000000) != 0)
        {
          if (!v25)
          {
            v80 = 0;
            LOBYTE(v73) = 0;
            goto LABEL_91;
          }
          v76 = *v25;
        }
        else
        {
          v76 = *(unsigned __int16 *)(v26 + 2 * v17);
        }
        v77 = *(unsigned __int8 *)(v31 + v32) + (_WORD)v76;
        LODWORD(v73) = (*(unsigned __int8 *)(v31 + v27) + v76) >> 8;
      }
      *v23 = v73;
      LOBYTE(v73) = -1;
LABEL_90:
      v23[1] = HIBYTE(v77);
      v80 = -1;
LABEL_91:
      v11 = v6 + v67;
      LOBYTE(v27) = (v27 + 1) & v33;
      LOBYTE(v32) = (v32 + 1) & v33;
      v23 += 2;
      *v22 = v73;
      v22[1] = v80;
      v22 += 2;
      v65 -= 2;
      if (v65 <= 2)
        return;
    }
  }
  if (v25 || (v17 & 0x80000000) == 0)
  {
    v81 = (__int16 *)(v26 + 2 * v17);
    if ((v17 & 0x80000000) == 0)
      v82 = v81;
    else
      v82 = (__int16 *)v25;
    v83 = *v82;
    v84 = a4 + 4;
    do
    {
      v85 = *(unsigned __int8 *)(v31 + v32) + v83;
      *v23 = (unsigned __int16)(*(unsigned __int8 *)(v31 + v27) + v83) >> 8;
      v27 = ((_DWORD)v27 + 1) & v33;
      v23[1] = HIBYTE(v85);
      v32 = ((_DWORD)v32 + 1) & v33;
      v86 = *(unsigned __int8 *)(v31 + v32) + v83;
      v23[2] = (unsigned __int16)(*(unsigned __int8 *)(v31 + v27) + v83) >> 8;
      v23[3] = HIBYTE(v86);
      *(_DWORD *)v22 = -1;
      v22 += 4;
      v23 += 4;
      v84 -= 4;
    }
    while (v84 > 4);
  }
  else
  {
    if (a4 >= 4)
      v36 = 4;
    else
      v36 = a4;
    bzero(v22, ((a4 - v36 + 3) & 0xFFFFFFFC) + 4);
  }
}

void A8_shade_conic_A(float32x2_t *a1, uint64_t a2, uint64_t a3, int a4, double a5, __n128 a6)
{
  float32x2_t v7;
  float v8;
  float v9;
  float v10;
  _BYTE *v11;
  _BYTE *v12;
  float32x2_t v13;
  float32x2_t v14;
  int v15;
  uint64_t v16;
  float32x2_t *v17;
  float v18;
  float v19;
  signed int v20;
  float v21;
  unsigned int v22;
  float v23;
  int v24;
  float v25;
  float v26;
  __n128 v27;

  v7 = a1[35];
  a6.n128_u64[0] = (unint64_t)vadd_f32(a1[37], vmla_n_f32(vmul_n_f32(a1[36], *(float *)(*(_QWORD *)&a1[34] + 4) * (float)a3), v7, *(float *)(*(_QWORD *)&a1[34] + 4) * (float)a2));
  v8 = a1[42].f32[0];
  v9 = a1[43].f32[0];
  v10 = a1[38].f32[0];
  v12 = (_BYTE *)a1[18];
  v11 = (_BYTE *)a1[19];
  v14 = a1[45];
  v13 = a1[46];
  if (v13)
    v15 = 15;
  else
    v15 = 0;
  if (v13)
    v16 = ((unint64_t)a2 >> 8) & 0xF;
  else
    v16 = 0;
  if (v13)
    v17 = (float32x2_t *)(*(_QWORD *)&v13 + (((unint64_t)a3 >> 4) & 0xF0));
  else
    v17 = a1 + 46;
  v18 = a1[38].f32[1] - v10;
  do
  {
    v27 = a6;
    v19 = v9
        * (float)((float)(v10 + (float)((float)((float)(atan2f(a6.n128_f32[1], a6.n128_f32[0]) * 0.15915) + 0.5) * v18))
                - v8);
    v20 = vcvtms_s32_f32(v19);
    v21 = ceilf(v19);
    v22 = vcvtms_s32_f32(v9 + v19);
    v23 = (float)((float)(v19 - (float)(int)floorf(v19)) * 255.0) + 0.5;
    if (v19 < 0.0)
      v20 = v22;
    v24 = (int)v23;
    v25 = ceilf(v19 - v9);
    if (v19 <= v9)
      v26 = v21;
    else
      v26 = v25;
    a6.n128_u64[1] = v27.n128_u64[1];
    *v11++ = (unsigned __int16)(v17->u8[v16]
                              + (unsigned __int16)((v24 * *(unsigned __int16 *)(*(_QWORD *)&v14 + 2 * (int)v26)
                                                  + (255 - v24)
                                                  * *(unsigned __int16 *)(*(_QWORD *)&v14 + 2 * v20)) >> 8)) >> 8;
    v16 = ((_DWORD)v16 + 1) & v15;
    a6.n128_u64[0] = (unint64_t)vadd_f32(v7, (float32x2_t)v27.n128_u64[0]);
    *v12++ = -1;
    --a4;
  }
  while (a4);
}

uint64_t A8_shade_custom_A(uint64_t result, uint64_t a2, uint64_t a3, int a4, double a5, int32x4_t a6)
{
  float v6;
  float v7;
  float v8;
  float32x2_t v9;
  float32x4_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  _BYTE *v15;
  _BYTE *v16;
  _WORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  float32x4_t v26;
  _WORD *v27;

  v6 = *(float *)(*(_QWORD *)(result + 272) + 4);
  v7 = v6 * (float)a2;
  v8 = v6 * (float)a3;
  v9 = *(float32x2_t *)(result + 280);
  *(float32x2_t *)a6.i8 = vadd_f32(*(float32x2_t *)(result + 296), vmla_n_f32(vmul_n_f32(*(float32x2_t *)(result + 288), v8), v9, v7));
  v10 = *(float32x4_t *)(result + 304);
  v11 = *(float *)(result + 336);
  v12 = *(float *)(result + 348);
  v13 = *(float *)(result + 344);
  v14 = *(float *)(result + 356);
  v16 = *(_BYTE **)(result + 144);
  v15 = *(_BYTE **)(result + 152);
  v18 = *(_QWORD *)(result + 368);
  v17 = *(_WORD **)(result + 376);
  v19 = *(_DWORD *)(result + 48);
  v20 = result + 368;
  v21 = *(_QWORD *)(result + 360);
  v22 = v18 + (((unint64_t)a3 >> 4) & 0xF0);
  v23 = ((unint64_t)a2 >> 8) & 0xF;
  v24 = v18 == 0;
  v25 = 15;
  if (v24)
  {
    v25 = 0;
    v23 = 0;
  }
  else
  {
    v20 = v22;
  }
  do
  {
    v26 = (float32x4_t)vzip1q_s32(a6, a6);
    if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vtrn2_s16(vrev32_s16(vmovn_s32(vcgtq_f32(v10, v26))), vmovn_s32(vcgtq_f32(v26, v10))), 0xFuLL))) & 1) == 0)
    {
      v27 = (_WORD *)(v21
                    + 2 * (int)(float)(v14 * (float)(*(float *)&a6.i32[1] - v12)) * v19
                    + 2 * (int)(float)(v13 * (float)(*(float *)a6.i32 - v11)));
LABEL_8:
      *v15 = (unsigned __int16)(*(unsigned __int8 *)(v20 + v23) + *v27) >> 8;
      LOBYTE(v27) = -1;
      goto LABEL_9;
    }
    v27 = v17;
    if (v17)
      goto LABEL_8;
LABEL_9:
    v23 = ((_DWORD)v23 + 1) & v25;
    *(float32x2_t *)a6.i8 = vadd_f32(v9, *(float32x2_t *)a6.i8);
    ++v15;
    *v16++ = (_BYTE)v27;
    --a4;
  }
  while (a4);
  return result;
}

void CPPDFGraphicStateReleaseElements(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = *(const void **)(a1 + 64);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 256);
  if (v3)
    CFRelease(v3);
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 264));
  v4 = *(const void **)(a1 + 272);
  if (v4)
    CFRelease(v4);
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 280));
  *(_QWORD *)(a1 + 280) = 0;

}

void CG::Path::add_arc_relative(CG::Path *this, float64x2_t *a2, float64_t a3, double a4, double a5, float64x2_t *a6, int a7)
{
  double v9;
  int v13;
  double v14;
  double v15;
  const CGAffineTransform *v16;
  __double2 v17;
  double v18;
  double v19;
  __n128 v20;
  BOOL v21;
  const CGAffineTransform *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  CGPoint v27;
  double v28;
  double v29;
  float64x2_t v30;
  CGFloat v31;
  double v32;
  __double2 v33;
  double v34;
  __double2 v35;
  float64x2_t v36;
  CGFloat v37;
  const CGAffineTransform *v38;
  double v39;
  double v40;
  float64x2_t v41;
  __double2 v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  double v46;
  double v47;
  float64x2_t v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  CGPoint v56;
  CGPoint v57;
  double v58;
  double v59;
  float64x2_t v60;
  double v61;
  double v62;
  float64x2_t v63;
  CGPoint v64;
  CGPoint v65;

  v9 = a5;
  v13 = *(_DWORD *)this;
  if (*(_DWORD *)this || (v14 = fabs(a5), v14 > 7.85398163))
  {
    v15 = fabs(a5);
    v17 = __sincos_stret(a4);
    v18 = v17.__cosval * a3;
    v19 = v17.__sinval * a3;
    v20.n128_f64[0] = v17.__cosval * a3 + a2->f64[0];
    v20.n128_f64[1] = v17.__sinval * a3 + a2->f64[1];
    v21 = (v13 - 10) >= 0xFFFFFFF7 && a7 == 0;
    v56 = (CGPoint)v20;
    if (v21)
      CG::Path::add_line_to_point(this, a6, v16, (float64x2_t)v20);
    else
      CG::Path::move_to_point(this, a6, v16, v20);
    v23 = 1.57079633;
    if (v15 >= 1.57079633)
    {
      v62 = dbl_185005100[v9 >= 0.0];
      v61 = dbl_185005110[v9 >= 0.0];
      v58 = v9;
      v59 = -v61;
      v28 = v9;
      v26 = a4;
      v27 = v56;
      do
      {
        v29 = v23;
        if (v58 < 0.0)
          v24 = v19;
        else
          v24 = -v19;
        if (v58 < 0.0)
          v25 = -v18;
        else
          v25 = v18;
        v30.f64[0] = v27.x + v59 * v19;
        v30.f64[1] = v27.y + v61 * v18;
        v31 = v25 + a2->f64[1];
        v65.x = v24 + a2->f64[0];
        v65.y = v31;
        v64.x = v65.x + v61 * v25;
        v64.y = v31 + v59 * v24;
        CG::Path::add_curve_to_point(this, (float64x2_t *)&v64, (float64x2_t *)&v65, a6, v22, v30);
        v23 = v29;
        v26 = v62 + v26;
        v9 = v28 - v62;
        v27 = v65;
        v15 = vabdd_f64(v28, v62);
        v28 = v28 - v62;
        v19 = v25;
        v18 = v24;
      }
      while (v15 >= v23);
    }
    else
    {
      v24 = v17.__cosval * a3;
      v25 = v17.__sinval * a3;
      v26 = a4;
      v27 = v56;
    }
    if (v15 > 0.00000001)
    {
      v32 = v26;
      v57 = v27;
      v33 = __sincos_stret(v9 * 0.5);
      v34 = (1.0 - v33.__cosval) * 4.0 / (v33.__sinval * 3.0);
      v35 = __sincos_stret(v9 + v32);
      v36.f64[0] = v57.x - v34 * v25;
      v36.f64[1] = v57.y + v34 * v24;
      v37 = v35.__sinval * a3 + a2->f64[1];
      v65.x = v35.__cosval * a3 + a2->f64[0];
      v65.y = v37;
      v64.x = v65.x + v34 * (v35.__sinval * a3);
      v64.y = v37 - v34 * (v35.__cosval * a3);
      CG::Path::add_curve_to_point(this, (float64x2_t *)&v64, (float64x2_t *)&v65, a6, v38, v36);
    }
  }
  else
  {
    v39 = v14;
    if (v14 >= 1.57079633)
    {
      v39 = v14;
      do
        v39 = v39 + -1.57079633;
      while (v39 >= 1.57079633);
    }
    v40 = v39 * 0.25;
    v41.f64[0] = 0.0;
    v41.f64[1] = a3;
    v60 = v41;
    v63 = *a2;
    v42 = __sincos_stret(a4);
    v43 = vmlaq_n_f64(vmulq_n_f64(v60, v42.__sinval), (float64x2_t)*(unint64_t *)&a3, v42.__cosval);
    v44 = vmlsq_lane_f64(vmulq_n_f64(v60, v42.__cosval), (float64x2_t)*(unint64_t *)&a3, v42.__sinval, 0);
    v45 = vaddq_f64(v63, vmlaq_f64(vmulq_f64(v60, (float64x2_t)0), (float64x2_t)0, (float64x2_t)*(unint64_t *)&a3));
    v46 = v43.f64[1];
    v47 = v45.f64[1];
    v48 = vnegq_f64(v44);
    if (v9 < 0.0)
    {
      v49 = v48.f64[1];
    }
    else
    {
      v48.f64[0] = v44.f64[0];
      v49 = v44.f64[1];
    }
    *(_DWORD *)this = 6;
    *((double *)this + 7) = v14;
    if (a6)
    {
      v50 = a6->f64[1];
      v51 = a6[1].f64[0];
      v52 = a6[1].f64[1];
      v46 = v43.f64[1] * v52 + v43.f64[0] * v50;
      v43.f64[0] = v43.f64[1] * v51 + v43.f64[0] * a6->f64[0];
      v53 = v49 * v51;
      v49 = v49 * v52 + v48.f64[0] * v50;
      v48.f64[0] = v53 + v48.f64[0] * a6->f64[0];
      v47 = v52 * v45.f64[1] + v45.f64[0] * v50 + a6[2].f64[1];
      v45.f64[0] = a6[2].f64[0] + v51 * v45.f64[1] + v45.f64[0] * a6->f64[0];
    }
    *((_QWORD *)this + 1) = *(_QWORD *)&v43.f64[0];
    *((double *)this + 2) = v46;
    *((_QWORD *)this + 3) = *(_QWORD *)&v48.f64[0];
    *((double *)this + 4) = v49;
    *((_QWORD *)this + 5) = *(_QWORD *)&v45.f64[0];
    *((double *)this + 6) = v47;
    *((long double *)this + 8) = cos(v9);
    *((long double *)this + 9) = sin(v14);
    *((long double *)this + 10) = tan(v40) * 1.33333333;
  }
}

void PBPageLayoutPkg::PBFontNameAndDescriptorFlagsPair::~PBFontNameAndDescriptorFlagsPair(PBPageLayoutPkg::PBFontNameAndDescriptorFlagsPair *this)
{
  PBPageLayoutPkg::PBFontNameAndDescriptorFlagsPair::~PBFontNameAndDescriptorFlagsPair(this);
  JUMPOUT(0x186DC23C4);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E1628E40;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:se180100](v2);
  PB::Base::~Base(this);
}

uint64_t PBPageLayoutPkg::PBFontNameAndDescriptorFlagsPair::readFrom(PBPageLayoutPkg::PBFontNameAndDescriptorFlagsPair *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 1u;
        v22 = *((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2);
        v24 = *(_QWORD *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v23)
        {
          v30 = 0;
          v31 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_45;
            }
            v32 = v22 + 1;
            v33 = *(_BYTE *)(v24 + v22);
            *((_QWORD *)a2 + 1) = v32;
            v27 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v22 = v32;
            v14 = v31++ > 8;
            if (v14)
            {
LABEL_41:
              LODWORD(v27) = 0;
              goto LABEL_45;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v27) = 0;
        }
        else
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (1)
          {
            v28 = v22 + 1;
            *((_QWORD *)a2 + 1) = v22 + 1;
            v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              break;
            v25 += 7;
            v22 = v28;
            v14 = v26++ > 8;
            if (v14)
              goto LABEL_41;
          }
        }
LABEL_45:
        *((_DWORD *)this + 4) = v27;
      }
      else if ((v11 >> 3) == 1)
      {
        v19 = (_QWORD *)operator new();
        v19[1] = 0;
        v19[2] = 0;
        *v19 = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
          std::default_delete<std::string>::operator()[abi:se180100](v20);
        PB::Reader::read();
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t PBPageLayoutPkg::PBFontNameAndDescriptorFlagsPair::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;

  v3 = this;
  if (*(_QWORD *)(this + 8))
    this = PB::Writer::write();
  if ((*(_BYTE *)(v3 + 20) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t PBPageLayoutPkg::PBFontNameAndDescriptorFlagsPair::formatText(PBPageLayoutPkg::PBFontNameAndDescriptorFlagsPair *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 20) & 1) != 0)
    PB::TextFormatter::format(a2, "flags");
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

unsigned int *CGGlyphBitmapRetain(unsigned int *result)
{
  unsigned int v1;

  if (result)
  {
    do
      v1 = __ldxr(result);
    while (__stxr(v1 + 1, result));
  }
  return result;
}

void CGGlyphBitmapRelease(void *a1)
{
  unsigned int v1;
  unsigned int v2;

  if (a1)
  {
    do
    {
      v1 = __ldxr((unsigned int *)a1);
      v2 = v1 - 1;
    }
    while (__stxr(v2, (unsigned int *)a1));
    if (!v2)
      free(a1);
  }
}

_DWORD *CGGlyphBitmapCreateWithPath(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return CGGlyphBitmapCreateWithPathAndDilation(a1, a2, a3, a4, a5, 0.0);
}

void CGGlyphBitmapWriteToFile(uint64_t a1)
{
  const char *v2;
  int v3;
  FILE *v4;
  char *__filename;
  char __str[1025];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  bzero(__str, 0x401uLL);
  __filename = 0;
  if (CGGetTempDirPath_predicate != -1)
    dispatch_once(&CGGetTempDirPath_predicate, &__block_literal_global_113);
  snprintf(__str, 0x400uLL, "%s%s", &CGGetTempDirPath_tempDirPath, "glyphbitmap");
  v2 = "bmi=0x0.br2";
  v3 = *(_DWORD *)(a1 + 28);
  if (v3 == 16)
    v2 = "bmi=0x00001000.br2";
  asprintf(&__filename, "%s_%d_%d_w=%d,h=%d,rb=%d,cs=0,bpc=%d,%s", __str, *(unsigned __int16 *)(a1 + 4), *(_DWORD *)(a1 + 36), *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 32), v3, v2);
  v4 = fopen(__filename, "w");
  free(__filename);
  if (v4)
  {
    fwrite((const void *)(a1 + 40), *(unsigned int *)(a1 + 32), *(unsigned int *)(a1 + 24), v4);
    fclose(v4);
  }
}

void DoPdfForm(uint64_t a1, CGPDFStream *a2, int a3)
{
  CGPDFDictionary *v5;
  size_t v8;
  CGPDFReal *v9;
  float64x2_t *v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  size_t v15;
  CGPDFReal *v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  uint64_t v21;
  CGPath *Mutable;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  CGPDFOperatorTable *v26;
  CGPDFOperatorTable *v27;
  CGPDFContentStream *v28;
  CGPDFContentStream *v29;
  uint64_t v30;
  CGPDFScannerRef v31;
  CGPDFScanner *v32;
  uint64_t v33;
  CGPDFDictionaryRef streamResources;
  CGPDFArrayRef value;
  CGPDFReal v36[2];
  float64x2_t v37;
  float64x2_t v38;
  uint64_t v39;
  CGRect v40;

  v39 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 2056) <= 0xF9u && a2 != 0)
  {
    v5 = (CGPDFDictionary *)*((_QWORD *)a2 + 6);
    if (v5)
    {
      CPPDFContextSaveGState(a1);
      value = 0;
      if (CGPDFDictionaryGetArray(v5, "Matrix", &value))
      {
        v8 = 0;
        v9 = v36;
        while (CGPDFArrayGetNumber(value, v8, v9))
        {
          ++v8;
          ++v9;
          if (v8 == 6)
          {
            v10 = *(float64x2_t **)(a1 + 40);
            v11 = v10[1];
            v12 = v10[2];
            v13 = vaddq_f64(v10[3], vmlaq_n_f64(vmulq_laneq_f64(v12, v38, 1), v11, v38.f64[0]));
            v14 = vmlaq_n_f64(vmulq_laneq_f64(v12, v37, 1), v11, v37.f64[0]);
            v10[1] = vmlaq_n_f64(vmulq_laneq_f64(v12, *(float64x2_t *)v36, 1), v11, v36[0]);
            v10[2] = v14;
            v10[3] = v13;
            break;
          }
        }
      }
      if (CGPDFDictionaryGetArray(v5, "BBox", &value))
      {
        v15 = 0;
        v16 = v36;
        while (CGPDFArrayGetNumber(value, v15, v16))
        {
          ++v15;
          ++v16;
          if (v15 == 4)
          {
            v17 = v36[0];
            v18 = v36[1];
            v19 = v37.f64[0] - v36[0];
            v20 = v37.f64[1] - v36[1];
            v21 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 64);
            Mutable = CGPathCreateMutable();
            v23 = *(_QWORD *)(a1 + 40);
            *(_QWORD *)(v23 + 64) = Mutable;
            v40.origin.x = v17;
            v40.origin.y = v18;
            v40.size.width = v19;
            v40.size.height = v20;
            CGPathAddRect(Mutable, (const CGAffineTransform *)(v23 + 16), v40);
            CPPDFContextAddClip(a1, 1);
            CPPDFContextAddPathToClip(a1, 0);
            v24 = *(_QWORD *)(a1 + 40);
            v25 = *(const void **)(v24 + 64);
            if (v25)
            {
              CFRelease(v25);
              v24 = *(_QWORD *)(a1 + 40);
            }
            *(_QWORD *)(v24 + 64) = v21;
            break;
          }
        }
      }
      v26 = CGPDFOperatorTableCreate();
      v27 = v26;
      if (a3)
        AddLazyPdfOperators();
      else
        AddPdfOperators(v26);
      streamResources = 0;
      if (CGPDFDictionaryGetDictionary(v5, "Resources", &streamResources))
      {
        v28 = CGPDFContentStreamCreateWithStream(a2, streamResources, *(CGPDFContentStreamRef *)(a1 + 8 * (*(_DWORD *)(a1 + 2056) - 1) + 56));
        if (v28)
        {
          v29 = v28;
          v30 = *(unsigned int *)(a1 + 2056);
          *(_DWORD *)(a1 + 2056) = v30 + 1;
          *(_QWORD *)(a1 + 8 * v30 + 56) = v28;
          v31 = CGPDFScannerCreate(v28, v27, (void *)a1);
          if (v31)
          {
            v32 = v31;
            *(_BYTE *)(*(_QWORD *)(a1 + 40) + 8) = 1;
            CPPDFContextSaveGState(a1);
            *(_BYTE *)(*(_QWORD *)(a1 + 40) + 8) = 0;
            CGPDFScannerScan(v32);
            CPPDFContextRestoreGState(a1);
            v33 = *(_QWORD *)(a1 + 40);
            if (v33)
              *(_BYTE *)(v33 + 8) = 0;
            --*(_DWORD *)(a1 + 2056);
            CFRelease(v32);
          }
          CFRelease(v29);
        }
      }
      if (v27)
        CFRelease(v27);
      CPPDFContextRestoreGState(a1);
    }
  }
}

void SetColor(CGPDFScanner *scanner, uint64_t a2, int a3)
{
  uint64_t *v4;
  uint64_t v5;
  CGColorSpace *v6;
  uint64_t v8;
  uint64_t *v9;
  CGColorRef v10;
  CGPDFObjectRef Resource;
  CGPDFContentStream *v12;
  uint64_t v13;
  CGFloat *v14;
  uint64_t v15;
  CGColorSpace *DeviceRGB;
  uint64_t v17;
  const void *v18;
  CGPDFObjectRef *v19;
  const void *v20;
  char *name[2];
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)(a2 + 40);
  v5 = 264;
  if (a3)
    v5 = 280;
  v6 = *(CGColorSpace **)(*(_QWORD *)(a2 + 40) + v5);
  if (!v6)
  {
    Resource = 0;
LABEL_28:
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    *(_OWORD *)name = xmmword_1850022A8;
    v22 = unk_1850022B8;
    v10 = CGColorCreate(DeviceRGB, (const CGFloat *)name);
    CGColorSpaceRelease(DeviceRGB);
    goto LABEL_29;
  }
  v8 = *((_QWORD *)v6 + 3);
  if (*(_DWORD *)(v8 + 24) != 6)
  {
    Resource = 0;
    v10 = 0;
    goto LABEL_21;
  }
  v6 = **(CGColorSpace ***)(v8 + 88);
  if (v6)
  {
LABEL_15:
    v10 = 0;
  }
  else
  {
    v9 = (uint64_t *)(a2 + 40);
    do
    {
      v9 = (uint64_t *)*v9;
      if (!v9)
      {
        v6 = 0;
        goto LABEL_15;
      }
    }
    while (!*((_BYTE *)v9 + 8));
    v10 = (CGColorRef)v9[32];
    if (v10)
      CFRetain((CFTypeRef)v9[32]);
    v6 = 0;
  }
  name[0] = 0;
  Resource = 0;
  if (CGPDFScannerPopName(scanner, (const char **)name))
  {
    v12 = (CGPDFContentStream *)*((_QWORD *)scanner + 7);
    if (!v12)
    {
      Resource = 0;
      if (!v6)
      {
LABEL_27:
        if (v10)
          goto LABEL_29;
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    Resource = CGPDFContentStreamGetResource(v12, "Pattern", name[0]);
  }
  if (!v6)
    goto LABEL_27;
LABEL_20:
  v8 = *((_QWORD *)v6 + 3);
LABEL_21:
  v13 = *(_QWORD *)(v8 + 40);
  if (!v13)
    goto LABEL_27;
  v14 = (CGFloat *)malloc_type_calloc(v13 + 1, 8uLL, 0x100004000313F17uLL);
  v14[v13] = 1.0;
  v15 = v13 - 1;
  do
  {
    name[0] = 0;
    if (!CGPDFScannerPopNumber(scanner, (CGPDFReal *)name))
      break;
    v14[v15--] = *(CGFloat *)name;
  }
  while (v15 != -1);
  v10 = CGColorCreate(v6, v14);
  free(v14);
LABEL_29:
  v17 = *v4;
  if (a3)
  {
    v18 = *(const void **)(v17 + 272);
    if (v18)
    {
      CFRelease(v18);
      v17 = *v4;
    }
    *(_QWORD *)(v17 + 272) = v10;
    v19 = (CGPDFObjectRef *)(v17 + 384);
  }
  else
  {
    v20 = *(const void **)(v17 + 256);
    if (v20)
    {
      CFRelease(v20);
      v17 = *v4;
    }
    *(_QWORD *)(v17 + 256) = v10;
    v19 = (CGPDFObjectRef *)(v17 + 376);
  }
  *v19 = Resource;
  *(_BYTE *)(v17 + 9) = 1;
}

void ShowText(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  unint64_t *v14;
  unint64_t *Encoding;
  const CGAffineTransform *v16;
  __int128 v17;
  uint64_t v18;
  unint64_t CMap;
  uint64_t v20;
  uint64_t (*v21)(_QWORD);
  _BOOL4 v22;
  _BYTE *v23;
  uint64_t CIDsForText;
  void *v25;
  __n128 v26;
  uint64_t (*v27)(_QWORD);
  unint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  unsigned __int8 v36;
  double v37;
  double v38;
  double v39;
  double v40;
  unint64_t v41;
  unsigned __int16 *UnicodesForIndex;
  uint64_t v43;
  unsigned __int16 *v44;
  unint64_t v45;
  double HorizontalAdvance;
  double VerticalAdvance;
  int x_low;
  BOOL v49;
  float64x2_t *v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  int v57;
  char v58;
  int v59;
  BOOL v60;
  _BOOL4 v61;
  CGFont *Font;
  CGFont *v63;
  _DWORD *font_info;
  int v65;
  double v66;
  double v67;
  BOOL v68;
  _BOOL4 v69;
  uint64_t v70;
  double v71;
  double v72;
  double v73;
  unint64_t v74;
  int v75;
  double v76;
  double v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  unsigned __int8 v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  long double v90;
  double v91;
  char v92;
  double v93;
  double v94;
  BOOL v95;
  double v96;
  float64x2_t v97;
  float64x2_t v98;
  __double2 v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  double v104;
  double v105;
  double v106;
  float64_t v107;
  __int16 v108;
  double v109;
  double v110;
  CGFloat x;
  _BOOL4 v112;
  CGFloat height;
  double v114;
  CGFloat width;
  double y;
  CGFloat v117;
  __int16 v118;
  __double2 v119;
  double v120;
  double v121;
  double v122;
  double v123;
  __int16 v124;
  double v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  unsigned __int8 *Style;
  uint64_t v130;
  uint64_t v131;
  uint64_t CurrentMCID;
  unsigned __int8 *v133;
  uint64_t v134;
  double v135;
  CGFloat rect;
  void *v137;
  double v138;
  uint64_t v139;
  _WORD *v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  uint64_t v147;
  uint64_t v148;
  double v149;
  double v150;
  double v151;
  double v152;
  unint64_t v153;
  unint64_t *v154;
  _BOOL4 v155;
  uint64_t v156;
  float64x2_t v157;
  float64x2_t v158;
  double v159;
  double v160;
  void ***Advances;
  void *v162;
  float64x2_t v163;
  float64_t v164;
  BOOL v165;
  double v166;
  float64x2_t v167;
  float64x2_t v168;
  double v169;
  float64x2_t v170;
  float64x2_t v171;
  CGRect v172;
  CGAffineTransform v173;
  CGGlyph glyphs;
  CGRect bboxes;
  int v176;
  __int128 v177;
  uint64_t v178;
  unint64_t *v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t ROSUnicodeCMap;
  void *v185;
  uint64_t v186;
  CGAffineTransform v187;
  CGRect v188;
  CGRect v189;

  v2 = *(_QWORD *)(a1 + 40);
  v149 = fabs(sqrt(fabs((*(double *)(v2 + 96) * *(double *)(v2 + 32) + *(double *)(v2 + 88) * *(double *)(v2 + 16))* (*(double *)(v2 + 112) * *(double *)(v2 + 40) + *(double *)(v2 + 104) * *(double *)(v2 + 24))- (*(double *)(v2 + 96) * *(double *)(v2 + 40) + *(double *)(v2 + 88) * *(double *)(v2 + 24))* (*(double *)(v2 + 112) * *(double *)(v2 + 32) + *(double *)(v2 + 104) * *(double *)(v2 + 16))))* *(double *)(v2 + 216));
  if (v149 < 0.00100000005)
    return;
  v4 = a1;
  v5 = *(void **)(v2 + 248);
  objc_msgSend(v5, "ascent");
  v7 = v6;
  objc_msgSend(v5, "descent");
  v9 = v8;
  v10 = *(double **)(v4 + 40);
  v11 = v10[27];
  v12 = v10[25];
  v13 = v10[29];
  v162 = v5;
  v14 = (unint64_t *)objc_msgSend(v5, "cgPDFFont");
  ROSUnicodeCMap = 0;
  v182 = 0u;
  v183 = 0u;
  v180 = 0u;
  v181 = 0u;
  v177 = 0u;
  v178 = 0;
  Encoding = CGPDFFontGetEncoding(v14);
  v179 = Encoding;
  Advances = CGPDFFontGetAdvances((void ***)v14);
  *(_QWORD *)&v180 = Advances;
  BYTE8(v180) = 1;
  v16 = (const CGAffineTransform *)(v14 + 7);
  if (!v14)
    v16 = &CGAffineTransformIdentity;
  v17 = *(_OWORD *)&v16->c;
  v181 = *(_OWORD *)&v16->a;
  v182 = v17;
  v183 = *(_OWORD *)&v16->tx;
  v185 = 0;
  v186 = v4;
  v147 = (uint64_t)v14;
  if (Encoding)
  {
    ROSUnicodeCMap = 0;
    if (a2)
    {
      if (*(_QWORD *)(a2 + 24))
      {
        decrypt_string(a2);
        v18 = *(_QWORD *)(a2 + 24);
        v148 = a2 + 80;
        v178 = a2 + 80;
        if (v18)
          decrypt_string(a2);
      }
      else
      {
        v148 = a2 + 80;
        v178 = a2 + 80;
      }
      v137 = 0;
      v139 = 0;
      v140 = 0;
      CIDsForText = *(_QWORD *)(a2 + 72);
    }
    else
    {
      v137 = 0;
      v139 = 0;
      v140 = 0;
      v148 = 0;
      CIDsForText = 0;
      v178 = 0;
    }
    v22 = 1;
    goto LABEL_36;
  }
  *((_QWORD *)&v177 + 1) = 0;
  CMap = CGPDFFontGetCMap((unint64_t)v14);
  v20 = CMap;
  v22 = !CMap
     || !cmap_vtable
     || (v21 = *(uint64_t (**)(_QWORD))(cmap_vtable + 40)) == 0
     || v21(*(_QWORD *)(CMap + 16)) == 0;
  BYTE8(v180) = v22;
  if (a2)
  {
    if (*(_QWORD *)(a2 + 24))
    {
      decrypt_string(a2);
      v23 = (_BYTE *)(a2 + 80);
      if (*(_QWORD *)(a2 + 24))
        decrypt_string(a2);
    }
    else
    {
      v23 = (_BYTE *)(a2 + 80);
    }
    a2 = *(_QWORD *)(a2 + 72);
  }
  else
  {
    v23 = 0;
  }
  v25 = malloc_type_malloc(2 * a2, 0x1000040BDFB0063uLL);
  CIDsForText = CGPDFCMapGetCIDsForText(v20, v23, a2, (uint64_t)v25, 0, v26);
  if (CIDsForText)
  {
    *((_QWORD *)&v177 + 1) = v25;
  }
  else
  {
    free(v25);
    v25 = 0;
  }
  ROSUnicodeCMap = CGPDFFontGetToUnicodeCMap((uint64_t)v14);
  v139 = ROSUnicodeCMap;
  v140 = v25;
  if (!ROSUnicodeCMap)
  {
    ROSUnicodeCMap = (uint64_t)CGPDFFontGetROSUnicodeCMap((char *)v14);
    v139 = ROSUnicodeCMap;
    if (!ROSUnicodeCMap)
    {
      v137 = 0;
      v139 = 0;
      goto LABEL_35;
    }
  }
  if (!cmap_vtable
    || (v27 = *(uint64_t (**)(_QWORD))(cmap_vtable + 56)) == 0
    || (v28 = v27(*(_QWORD *)(v139 + 16)), v28 < 2))
  {
    v137 = 0;
LABEL_35:
    v148 = 0;
    goto LABEL_36;
  }
  v148 = 0;
  v137 = malloc_type_malloc(2 * v28, 0x1000040BDFB0063uLL);
  v185 = v137;
LABEL_36:
  v29 = *((double *)&v181 + 1);
  v30 = *(double *)&v182;
  v31 = *((double *)&v183 + 1);
  v32 = *(double *)&v183;
  v33 = -(*(double *)&v182 - *(double *)&v181 * 0.0);
  if (!v22)
  {
    v31 = *((double *)&v182 + 1) * 0.0 + *((double *)&v181 + 1) * 0.0 + *((double *)&v183 + 1);
    v32 = *(double *)&v183 + *(double *)&v182 * 0.0 + *(double *)&v181 * 0.0;
  }
  v159 = *((double *)&v182 + 1);
  v160 = *(double *)&v181;
  if (v22)
    v34 = *((double *)&v182 + 1);
  else
    v34 = *((double *)&v181 + 1) + *((double *)&v182 + 1) * 0.0;
  if (v22)
  {
    v33 = *(double *)&v181;
  }
  else
  {
    v30 = *(double *)&v181 + *(double *)&v182 * 0.0;
    v29 = -(*((double *)&v182 + 1) - *((double *)&v181 + 1) * 0.0);
  }
  if (CIDsForText)
  {
    v35 = 0;
    v133 = 0;
    v165 = 0;
    v36 = 0;
    v37 = v11 * (v12 / 100.0);
    v38 = v149 * v7 - v9 * v149;
    v145 = v29 * v11 + v33 * 0.0;
    v146 = v29 * 0.0 + v33 * v37;
    v143 = v34 * v11 + v30 * 0.0;
    v144 = v34 * 0.0 + v30 * v37;
    v141 = v11 * v31 + v32 * 0.0 + v13;
    v142 = v31 * 0.0 + v32 * v37 + 0.0;
    v138 = fabs(v38);
    v39 = -v38;
    v134 = v4 + 2064;
    v40 = --(v9 * v149);
    if (v38 >= 0.0)
      v39 = v149 * v7 - v9 * v149;
    else
      v40 = v149 * v7;
    v135 = v40;
    rect = v39;
    v156 = v4;
    v153 = CIDsForText;
    v154 = Encoding;
    v155 = v22;
    do
    {
      v176 = 0;
      LOBYTE(bboxes.origin.x) = 0;
      if (Encoding)
      {
        v41 = *(unsigned __int8 *)(v148 + v35);
        HIWORD(v176) = *(unsigned __int8 *)(v148 + v35);
        v187.a = 0.0;
        UnicodesForIndex = (unsigned __int16 *)CGPDFEncodingGetUnicodesForIndex((uint64_t)Encoding, v41, &v187);
        LOBYTE(bboxes.origin.x) = CPFontEnumeratorIsKnownRenderedChar(*(uint64_t *)&v187.a, UnicodesForIndex);
        if (!*(_QWORD *)&v187.a)
          goto LABEL_53;
        if (*(_QWORD *)&v187.a == 1)
        {
          LODWORD(v41) = *UnicodesForIndex;
LABEL_53:
          LOWORD(v176) = v41;
          goto LABEL_62;
        }
        LODWORD(v41) = CPFontEnumeratorProcessMultiUnicodes((uint64_t)&v177, *(uint64_t *)&v187.a, UnicodesForIndex);
        LOWORD(v176) = v41;
        if ((_DWORD)v41)
          LOBYTE(bboxes.origin.x) = CPFontEnumeratorIsKnownRenderedChar(1, (unsigned __int16 *)&v176);
      }
      else
      {
        v43 = (unsigned __int16)v140[v35];
        HIWORD(v176) = v140[v35];
        if (v139)
        {
          v44 = (unsigned __int16 *)v137;
          if (!v137)
            v44 = (unsigned __int16 *)&v187;
          LODWORD(v41) = CPFontEnumeratorGetUnicharForCID((uint64_t)&v177, v43, v44, (BOOL *)&bboxes);
          LOWORD(v176) = v41;
        }
        else
        {
          LODWORD(v41) = 0;
        }
      }
LABEL_62:
      v45 = HIWORD(v176);
      HorizontalAdvance = CGPDFAdvancesGetHorizontalAdvance((uint64_t)Advances, HIWORD(v176));
      VerticalAdvance = CGPDFAdvancesGetVerticalAdvance((uint64_t)Advances, v45, (uint64_t)&v187);
      *(_QWORD *)&v177 = v35 + 1;
      x_low = LOBYTE(bboxes.origin.x);
      v49 = LOBYTE(bboxes.origin.x) != 0;
      v50 = *(float64x2_t **)(v4 + 40);
      v52 = v50[5].f64[1];
      v51 = v50[6].f64[0];
      v53 = v50[6].f64[1];
      v54 = v50[7].f64[0];
      v56 = v50[7].f64[1];
      v55 = v50[8].f64[0];
      v167 = v50[2];
      v170 = v50[1];
      v57 = v41 & 0xFFFFFF7F;
      v163 = v50[3];
      if ((v41 & 0xFFFFFF7F) == 0x20)
      {
        v58 = 1;
      }
      else
      {
        if (v41 > 0x7F)
          v59 = __maskrune(v41, 0x4000uLL);
        else
          v59 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v41 + 60) & 0x4000;
        if (v59)
          v60 = 1;
        else
          v60 = (_DWORD)v41 == 65532;
        v58 = v60;
      }
      memset(&bboxes, 0, sizeof(bboxes));
      glyphs = 0;
      v61 = 0;
      if (objc_msgSend(v162, "getGlyphs:forCodes:count:", &glyphs, (char *)&v176 + 2, 1))
      {
        Font = (CGFont *)CGPDFFontGetFont(v147);
        if (Font && (v63 = Font, CGFontGetGlyphBBoxes(Font, &glyphs, 1uLL, &bboxes)))
        {
          v61 = bboxes.size.height <= 0.00000011920929 && bboxes.size.width <= 0.00000011920929;
          font_info = get_font_info(v63);
          if (font_info)
            v65 = font_info[2];
          else
            v65 = 0;
          v173.b = 0.0;
          v173.c = 0.0;
          v173.a = v149 / (double)v65;
          v173.d = v173.a;
          v173.tx = 0.0;
          v173.ty = 0.0;
          bboxes = CGRectApplyAffineTransform(bboxes, &v173);
        }
        else
        {
          v61 = 0;
        }
      }
      v66 = HorizontalAdvance * v160;
      v67 = VerticalAdvance * v159;
      if ((v58 & 1) == 0)
      {
        v150 = v66;
        v151 = v56;
        v152 = v55;
        if (((x_low != 0) & v36) == 1)
        {
          v4 = v156;
          if (*(double *)(*(_QWORD *)(v156 + 40) + 184) == 0.0)
            v75 = v165;
          else
            v75 = -1;
        }
        else
        {
          v75 = -1;
          v4 = v156;
        }
        v69 = v155;
        v78 = vmlaq_n_f64(vmulq_n_f64(v167, v145 * v54 + v146 * v51), v170, v145 * v53 + v146 * v52);
        v79 = vmlaq_n_f64(vmulq_n_f64(v167, v143 * v54 + v144 * v51), v170, v143 * v53 + v144 * v52);
        v80 = vmulq_f64(v78, (float64x2_t)vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL));
        v81 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v80, 1), v80)).u8[0];
        v82 = v78.f64[1];
        v84 = v78.f64[1];
        v83 = v78.f64[0];
        v166 = VerticalAdvance * v159;
        v157 = v78;
        v158 = v79;
        if (v78.f64[1] == 0.0)
        {
          v85 = 0.0;
          if ((v78.f64[0] <= 0.0) | v81 & 1)
          {
            v84 = v78.f64[1];
            v83 = v78.f64[0];
            if (v78.f64[0] != 0.0)
              goto LABEL_105;
            v83 = v79.f64[1];
            if (v79.f64[0] != 0.0 || v79.f64[1] != 0.0)
            {
              v84 = -v79.f64[0];
              goto LABEL_105;
            }
          }
        }
        else
        {
LABEL_105:
          v86 = fabs(v83);
          v87 = fabs(v84);
          if (v86 >= v87)
            v88 = v84;
          else
            v88 = v83;
          if (v86 >= v87)
            v89 = v83;
          else
            v89 = v84;
          v90 = atan(v88 / v89);
          v78 = v157;
          v67 = v166;
          v91 = v90 * 57.2957795;
          if (v86 < v87)
            v91 = 90.0 - v91;
          v92 = v81 ^ 1;
          if (v89 >= 0.0)
            v92 = v81;
          v93 = v91 + 180.0;
          if ((v92 & 1) == 0)
            v93 = v91;
          if (v93 < 0.0)
            v93 = v93 + 360.0;
          if (v93 >= 360.0)
            v93 = 0.0;
          v94 = fabs(v93);
          v95 = v94 <= INFINITY;
          if (v94 >= INFINITY)
            v96 = 0.0;
          else
            v96 = v93;
          v79 = v158;
          if (v95)
            v85 = v96;
          else
            v85 = v93;
          if (v85 < 0.0 || v85 >= 360.0)
            __assert_rtn("CPRotationDegreesFromTransform", "CPGeometry.m", 111, "0. <= degrees && degrees < 360.");
        }
        v97 = vaddq_f64(v163, vmlaq_n_f64(vmulq_n_f64(v167, v54 * v141 + v142 * v51 + v152), v170, v151 + v53 * v141 + v142 * v52));
        v98 = vaddq_f64(v97, vmlaq_f64(vmulq_f64(v79, (float64x2_t)0), (float64x2_t)0, v78));
        v171 = v98;
        if (v85 <= 0.1 || 360.0 - v85 <= 0.1)
        {
          bboxes.origin = (CGPoint)vaddq_f64(v98, (float64x2_t)bboxes.origin);
          v85 = 0.0;
          v103 = v98;
        }
        else
        {
          v168 = v97;
          v99 = __sincos_stret(v85 * -3.14159265 / 180.0);
          v67 = v166;
          v100.f64[0] = v157.f64[0] * v99.__cosval - v99.__sinval * v82;
          v100.f64[1] = v82 * v99.__cosval + v157.f64[0] * v99.__sinval;
          v101.f64[0] = vmlad_n_f64(vmuld_lane_f64(-v99.__sinval, v158, 1), v99.__cosval, v158.f64[0]);
          v101.f64[1] = vmlad_n_f64(vmuld_lane_f64(v99.__cosval, v158, 1), v99.__sinval, v158.f64[0]);
          v102.f64[0] = vmlad_n_f64(vmuld_lane_f64(-v99.__sinval, v168, 1), v99.__cosval, v168.f64[0]) + 0.0;
          v102.f64[1] = vmlad_n_f64(vmuld_lane_f64(v99.__cosval, v168, 1), v99.__sinval, v168.f64[0]) + 0.0;
          v103 = vaddq_f64(v102, vmlaq_f64(vmulq_f64(v101, (float64x2_t)0), (float64x2_t)0, v100));
          bboxes.origin = (CGPoint)vaddq_f64(v103, (float64x2_t)bboxes.origin);
        }
        v66 = v150;
        v68 = 0;
        v172 = bboxes;
        v104 = v149 * v150;
        if (v155)
        {
          v105 = v149 * v67;
        }
        else
        {
          v104 = -(v149 * v67);
          v105 = 0.0;
        }
        if ((v81 & 1) != 0)
          v106 = -v104;
        else
          v106 = v104;
        v36 = v49;
        if (fabs(v103.f64[0]) != INFINITY)
        {
          v107 = v103.f64[1];
          v36 = v49;
          if (fabs(v103.f64[1]) != INFINITY)
          {
            v36 = v49;
            if (fabs(v104) != INFINITY)
            {
              v36 = v49;
              if (fabs(v105) != INFINITY)
              {
                v36 = v49;
                if (v138 != INFINITY)
                {
                  v108 = HIWORD(v176);
                  if (v106 >= 0.0)
                    v109 = -0.0;
                  else
                    v109 = v106;
                  if (v106 >= 0.0)
                    v110 = v106;
                  else
                    v110 = -v106;
                  if (x_low || (v68 = !v61))
                  {
                    if (*(_QWORD *)(v4 + 2264))
                    {
                      v36 = v49;
                      v68 = 0;
                      if (fabs(v85) != INFINITY)
                      {
                        x = v103.f64[0] + v109;
                        v112 = 360.0 - v85 > 0.1 && v85 > 0.1;
                        height = rect;
                        v114 = v103.f64[1] + v135;
                        width = v110;
                        y = v103.f64[1] + v135;
                        v169 = v103.f64[0] + v109;
                        v164 = v103.f64[0];
                        if (v112)
                        {
                          v117 = v110;
                          v118 = HIWORD(v176);
                          v119 = __sincos_stret(v85 * 0.0174532925);
                          v187.tx = 0.0;
                          v187.ty = 0.0;
                          v187.a = v119.__cosval;
                          v187.b = v119.__sinval;
                          v187.c = -v119.__sinval;
                          v187.d = v119.__cosval;
                          v188.origin.x = v169;
                          v188.origin.y = v114;
                          v188.size.width = v117;
                          v188.size.height = rect;
                          v189 = CGRectApplyAffineTransform(v188, &v187);
                          v108 = v118;
                          v110 = v117;
                          v67 = v166;
                          x = v189.origin.x;
                          y = v189.origin.y;
                          width = v189.size.width;
                          height = v189.size.height;
                        }
                        v68 = 0;
                        v36 = v49;
                        if (fabs(*(double *)v4) != INFINITY)
                        {
                          v121 = *(double *)(v4 + 8);
                          v36 = v49;
                          if (fabs(v121) != INFINITY)
                          {
                            v122 = *(double *)(v4 + 16);
                            v36 = v49;
                            if (fabs(v122) != INFINITY)
                            {
                              v123 = *(double *)(v4 + 24);
                              v36 = v49;
                              if (fabs(v123) != INFINITY)
                              {
                                v124 = v108;
                                v125 = v110;
                                v120 = *(double *)v4;
                                if (CGRectIntersectsRect(*(CGRect *)(&v121 - 1), *(CGRect *)&x)
                                  && primitiveBufferMemoryCheck(v4, v134))
                                {
                                  v126 = *(_QWORD *)(v4 + 2072);
                                  *(double *)v126 = v169;
                                  *(double *)(v126 + 8) = v114;
                                  *(double *)(v126 + 16) = v125;
                                  *(CGFloat *)(v126 + 24) = rect;
                                  *(CGRect *)(v126 + 32) = v172;
                                  *(_QWORD *)(v126 + 64) = 0;
                                  *(_WORD *)(v126 + 72) = v41;
                                  *(_WORD *)(v126 + 74) = v124;
                                  *(_DWORD *)(v126 + 76) = 0;
                                  *(float64_t *)(v126 + 80) = v164;
                                  *(float64_t *)(v126 + 88) = v107;
                                  *(float64x2_t *)(v126 + 96) = v171;
                                  *(double *)(v126 + 112) = v171.f64[0] + v109;
                                  *(double *)(v126 + 120) = v171.f64[1] + v135;
                                  *(double *)(v126 + 128) = v125;
                                  *(CGFloat *)(v126 + 136) = rect;
                                  *(double *)(v126 + 144) = v106;
                                  *(double *)(v126 + 152) = v105;
                                  *(_QWORD *)(v126 + 160) = 0;
                                  *(double *)(v126 + 168) = v85;
                                  *(_DWORD *)(v126 + 176) = v75;
                                  *(_DWORD *)(v126 + 188) = 0;
                                  *(_QWORD *)(v126 + 180) = 0;
                                  if (v112)
                                    ++*(_DWORD *)(v4 + 2280);
                                  *(_DWORD *)(v126 + 68) = *(_DWORD *)(v4 + 2272);
                                  v127 = *(_QWORD *)(v4 + 40);
                                  v128 = *(_DWORD *)(v127 + 80);
                                  *(_DWORD *)(v126 + 64) = v128;
                                  Style = v133;
                                  if (!v133)
                                  {
                                    Style = *(unsigned __int8 **)(v4 + 2256);
                                    if (!Style || *(_BYTE *)(v127 + 9))
                                    {
                                      Style = CPPDFStyleListGetStyle(v4);
                                      v128 = *(_DWORD *)(*(_QWORD *)(v4 + 40) + 80);
                                    }
                                  }
                                  v67 = v166;
                                  *(_QWORD *)(v126 + 160) = Style;
                                  *(_DWORD *)(v126 + 64) = v128;
                                  v130 = *(_QWORD *)(v4 + 2344);
                                  v133 = Style;
                                  if (v130 && (v131 = *(_QWORD *)(v130 + 16)) != 0)
                                  {
                                    CurrentMCID = TaggedParser::GetCurrentMCID(v131, *(CGPDFPage **)(v4 + 2288));
                                    v67 = v166;
                                  }
                                  else
                                  {
                                    CurrentMCID = -1;
                                  }
                                  *(_QWORD *)(v126 + 184) = CurrentMCID;
                                  *(_QWORD *)(v4 + 2072) = v126 + 192;
                                  *(_DWORD *)(*(_QWORD *)(v4 + 2264) + 4 * (*(_DWORD *)(v4 + 2272))++) = 2;
                                  v68 = 0;
                                  v36 = v49;
                                }
                                else
                                {
                                  v68 = 0;
                                  v36 = v49;
                                  v67 = v166;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    else
                    {
                      v36 = v49;
                      v68 = 0;
                    }
                  }
                  else
                  {
                    v36 = 0;
                  }
                }
              }
            }
          }
        }
        goto LABEL_86;
      }
      v36 &= v57 == 32 && !v165;
      v68 = v57 == 32;
      v4 = v156;
      v69 = v155;
LABEL_86:
      v165 = v68;
      v70 = *(_QWORD *)(v4 + 40);
      v71 = *(double *)(v70 + 216);
      v72 = *(double *)(v70 + 184);
      if (v69)
      {
        v73 = v72 + v66 * v71;
        v74 = v153;
        Encoding = v154;
        if (HIWORD(v176) == 32)
          v73 = v73 + *(double *)(v70 + 192);
        v77 = v73 * (*(double *)(v70 + 200) / 100.0);
        v76 = 0.0;
      }
      else
      {
        v76 = v72 + v67 * v71;
        v77 = 0.0;
        v74 = v153;
        Encoding = v154;
        if (HIWORD(v176) == 32)
          v76 = v76 + *(double *)(v70 + 192);
      }
      *(float64x2_t *)(v70 + 120) = vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(v70 + 120), *(float64x2_t *)(v70 + 88), v77), *(float64x2_t *)(v70 + 104), v76);
      ++v35;
    }
    while (v74 > v35);
  }
  if (!Encoding)
  {
    free(v140);
    free(v185);
  }
}

uint64_t AdjustPosition(uint64_t a1, double a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  double v10;

  v3 = *(_QWORD *)(a1 + 40);
  v10 = a2 / -1000.0 * *(double *)(v3 + 216);
  result = objc_msgSend(*(id *)(v3 + 248), "isHorizontal");
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(float64x2_t *)(v5 + 88);
  v7 = *(float64x2_t *)(v5 + 104);
  v8 = *(float64x2_t *)(v5 + 120);
  if ((_DWORD)result)
    v9 = vmlaq_f64(vmlaq_n_f64(v8, v6, v10), (float64x2_t)0, v7);
  else
    v9 = vmlaq_n_f64(vmlaq_f64(v8, (float64x2_t)0, v6), v7, v10);
  *(float64x2_t *)(v5 + 120) = v9;
  return result;
}

_QWORD *CGPDFRStateCreate()
{
  _QWORD *v0;

  v0 = malloc_type_calloc(1uLL, 0x18uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (v0)
    *v0 = CGPDFGStateCreate();
  return v0;
}

_QWORD *CGPDFRStateCreateCopy(__int128 **a1)
{
  _QWORD *v2;

  v2 = malloc_type_calloc(1uLL, 0x18uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (v2)
    *v2 = CGPDFGStateCreateCopy(*a1);
  return v2;
}

void CGPDFRStateRelease(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  if (a1)
  {
    v2 = (_QWORD *)a1[1];
    if (v2)
    {
      do
      {
        v3 = (void *)v2[1];
        if (v3)
        {
          CGPDFGStateReleaseProperties((_QWORD *)v2[1]);
          free(v3);
        }
        v2 = (_QWORD *)*v2;
      }
      while (v2);
      v4 = (_QWORD *)a1[1];
      if (v4)
      {
        do
        {
          v5 = (_QWORD *)*v4;
          free(v4);
          v4 = v5;
        }
        while (v5);
      }
    }
    v6 = (_QWORD *)*a1;
    if (*a1)
    {
      CGPDFGStateReleaseProperties((_QWORD *)*a1);
      free(v6);
    }
    free(a1);
  }
}

uint64_t CGPDFRStateGetGState(uint64_t result)
{
  if (result)
    return *(_QWORD *)result;
  return result;
}

__int128 **CGPDFRStateSetGState(__int128 **result, __int128 *a2)
{
  _QWORD *v3;
  __int128 *v4;

  if (result)
  {
    v3 = result;
    v4 = *result;
    if (*result != a2)
    {
      if (v4)
      {
        CGPDFGStateReleaseProperties(*result);
        free(v4);
      }
      result = (__int128 **)CGPDFGStateCreateCopy(a2);
      *v3 = result;
    }
  }
  return result;
}

void CGPDFRStateGSave(uint64_t a1)
{
  void *Copy;
  uint64_t v3;
  _QWORD *v4;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
    }
    else
    {
      Copy = CGPDFGStateCreateCopy(*(__int128 **)a1);
      v3 = *(_QWORD *)(a1 + 8);
      v4 = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
      *v4 = v3;
      v4[1] = Copy;
      *(_QWORD *)(a1 + 8) = v4;
    }
  }
}

void CGPDFRStateGRestore(uint64_t a1)
{
  char *v2;
  uint64_t *v3;
  void *v4;
  uint64_t v5;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
LABEL_4:
      pdf_error(v2);
      return;
    }
    v3 = *(uint64_t **)(a1 + 8);
    if (!v3)
    {
      v2 = "warning: gstate stack underflow.";
      goto LABEL_4;
    }
    v4 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      CGPDFGStateReleaseProperties(*(_QWORD **)a1);
      free(v4);
      v3 = *(uint64_t **)(a1 + 8);
    }
    v5 = *v3;
    *(_QWORD *)a1 = v3[1];
    free(v3);
    *(_QWORD *)(a1 + 8) = v5;
  }
}

char *CGPDFShadingType2Init(CGPDFDictionary *a1, _QWORD *a2, _OWORD *a3)
{
  CGPDFDictionary *v5;
  _OWORD *v6;
  __int128 v7;
  char *result;
  CGPDFObjectRef value;
  _OWORD v10[2];
  uint64_t v11;

  v5 = a1;
  v11 = *MEMORY[0x1E0C80C00];
  if (a1)
    a1 = (CGPDFDictionary *)*((_QWORD *)a1 + 5);
  if (CGColorSpaceGetType(a1) == 7)
  {
    return 0;
  }
  v6 = malloc_type_calloc(1uLL, 0x40uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (!v6)
    return 0;
  value = 0;
  *a2 = v6;
  *a3 = CGPDFShadingType2Init_type2_callbacks;
  if (v5)
    v5 = (CGPDFDictionary *)*((_QWORD *)v5 + 3);
  if (!CGPDFDictionaryGetNumbers(v5, "Coords", (uint64_t)v10, (CGPDFArray *)4))
  {
    return 0;
  }
  v7 = v10[1];
  *v6 = v10[0];
  v6[1] = v7;
  if (!CGPDFDictionaryGetNumbers(v5, "Domain", (uint64_t)(v6 + 2), (CGPDFArray *)2))
    v6[2] = xmmword_185004A20;
  if (!CGPDFDictionaryGetObject(v5, "Function", &value))
  {
    return 0;
  }
  result = CGPDFShadingCreateShadingFunction((uint64_t)value, 1uLL);
  *((_QWORD *)v6 + 6) = result;
  if (result)
  {
    if (!CGPDFDictionaryGetBooleans(v5, "Extend", (uint64_t)v6 + 56, (CGPDFArray *)2))
      *((_WORD *)v6 + 28) = 0;
    return (char *)1;
  }
  return result;
}

uint64_t type2_create_shading(CGRect *a1, uint64_t a2)
{
  const CGRect *v3;
  CGFloat *p_height;
  CGFloat *p_y;
  CGSize *p_size;
  double v7;
  double x;
  double v9;
  double width;
  CGFloat y;
  const CGFloat *Components;
  uint64_t v13;
  _QWORD *v17;
  _QWORD v19[4];

  v3 = &CGRectNull;
  p_height = &CGRectNull.size.height;
  p_y = &CGRectNull.origin.y;
  p_size = &CGRectNull.size;
  if (a1)
  {
    p_size = &a1[2].size;
    p_y = &a1[2].origin.y;
    v3 = a1 + 2;
    p_height = &a1[2].size.height;
  }
  v7 = *p_height;
  x = v3->origin.x;
  v9 = *p_y;
  width = p_size->width;
  v19[0] = *(_QWORD *)&v3->origin.x;
  *(double *)&v19[1] = v9;
  *(double *)&v19[2] = width;
  *(double *)&v19[3] = v7;
  if (a1)
  {
    y = a1[1].origin.y;
    a1 = *(CGRect **)&a1[1].size.width;
  }
  else
  {
    y = 0.0;
  }
  Components = CGColorGetComponents((CGColorRef)a1);
  if (v7 == 1.79769313e308 && width == 1.79769313e308 && v9 == -8.98846567e307 && x == -8.98846567e307)
    v17 = 0;
  else
    v17 = v19;
  return CGShadingCreateAxialInternal(*(_QWORD **)&y, (uint64_t)Components, (uint64_t)v17, (double *)(a2 + 32), *(_QWORD **)(a2 + 48), *(_BYTE *)(a2 + 56) != 0, *(_BYTE *)(a2 + 57) != 0, v13, *(double *)a2, *(double *)(a2 + 8), *(double *)(a2 + 16), *(double *)(a2 + 24));
}

void type2_release_info(int a1, _QWORD *a2)
{
  const void *v3;

  if (a2)
  {
    v3 = (const void *)a2[6];
    if (v3)
      CFRelease(v3);
    free(a2);
  }
}

uint64_t ascii_hex_filter_rewind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_BYTE *)(a1 + 8) = 0;
  return CGPDFSourceRewind(*(_QWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t ascii_hex_filter_refill(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8;
  unint64_t v12;
  char v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v18;

  if (*(_BYTE *)(a1 + 8))
    v8 = 1;
  else
    v8 = a3 == 0;
  if (!v8)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    do
    {
LABEL_7:
      v15 = CGPDFSourceGetc(*(_QWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
      if (v15 == -1)
        v16 = 62;
      else
        v16 = v15;
    }
    while (v16 <= 0x20 && ((1 << v16) & 0x100003601) != 0);
    switch(v16)
    {
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        v18 = -48;
        goto LABEL_19;
      case '>':
        *(_BYTE *)(a1 + 8) = 1;
        if ((v13 & 1) != 0)
          *(_BYTE *)(a2 + v12++) = 16 * v14;
        return v12;
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
        v18 = -55;
        goto LABEL_19;
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
        v18 = -87;
LABEL_19:
        v14 = (v16 + v18) | (16 * v14);
        if ((v13 & 1) != 0)
          *(_BYTE *)(a2 + v12++) = v14;
        ++v13;
        if (v12 >= a3)
          return v12;
        goto LABEL_7;
      default:
        pdf_error("ASCIIHexDecode: invalid character 0x%02x encountered in stream.", v16);
        v12 = 0;
        *(_BYTE *)(a1 + 8) = 1;
        return v12;
    }
  }
  return 0;
}

void ascii_hex_filter_finalize(const void **a1)
{
  const void *v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      CFRelease(v2);
    free(a1);
  }
}

uint64_t CGContextDelegateCreateFilter(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  _QWORD *callback_address;
  _QWORD *v19;

  v9 = CGContextDelegateCreateWithCallbacks(a1, filter_vtable, a3, a4, a5, a6, a7, a8);
  v10 = v9;
  if (v9)
  {
    CGContextDelegateSetNext(v9, a2);
    for (i = 0; i != 20; ++i)
    {
      if (a2)
      {
        v17 = names[i];
        callback_address = (_QWORD *)get_callback_address((uint64_t)a2, v17, (uint64_t)"CGContextDelegateImplementsCallback", v11, v12, v13, v14, v15);
        if (!callback_address || !*callback_address)
        {
          v19 = (_QWORD *)get_callback_address(v10, v17, (uint64_t)"CGContextDelegateSetCallback", v11, v12, v13, v14, v15);
          if (v19)
            *v19 = 0;
        }
      }
    }
  }
  return v10;
}

uint64_t filter_GetColorTransform(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(void);

  if (a1 && (v1 = *(_QWORD *)(a1 + 16)) != 0 && (v2 = *(uint64_t (**)(void))(v1 + 32)) != 0)
    return v2();
  else
    return 0;
}

CGFloat filter_GetTransform@<D0>(uint64_t a1@<X0>, CGAffineTransform *a2@<X8>)
{
  uint64_t v2;
  void (*v3)(void);
  CGFloat result;

  if (a1 && (v2 = *(_QWORD *)(a1 + 16)) != 0 && (v3 = *(void (**)(void))(v2 + 40)) != 0)
  {
    v3();
  }
  else
  {
    *a2 = CGAffineTransformIdentity;
    return CGAffineTransformIdentity.tx;
  }
  return result;
}

double filter_GetBounds(uint64_t a1, __n128 a2, __n128 a3)
{
  uint64_t v3;
  void (*v4)(__n128, __n128, double);
  double result;

  if (!a1)
    return INFINITY;
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return INFINITY;
  v4 = *(void (**)(__n128, __n128, double))(v3 + 48);
  if (!v4)
    return -8.98846567e307;
  v4(a2, a3, 0.0);
  return result;
}

void filter_DrawLines(uint64_t a1, uint64_t a2, uint64_t a3, const CGPoint *a4, unint64_t a5)
{
  if (a1)
    a1 = *(_QWORD *)(a1 + 16);
  CGContextDelegateDrawLines(a1, a2, a3, a4, a5);
}

uint64_t filter_DrawRects(uint64_t result)
{
  uint64_t (*v1)(void);

  if (result)
  {
    result = *(_QWORD *)(result + 16);
    if (result)
    {
      v1 = *(uint64_t (**)(void))(result + 64);
      if (v1)
        return v1();
      else
        return 1006;
    }
  }
  return result;
}

uint64_t filter_DrawPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  if (a1)
    a1 = *(_QWORD *)(a1 + 16);
  return CGContextDelegateDrawPath(a1, a2, a3, a4, a5);
}

uint64_t filter_DrawImage(uint64_t result)
{
  uint64_t (*v1)(void);

  if (result)
  {
    result = *(_QWORD *)(result + 16);
    if (result)
    {
      v1 = *(uint64_t (**)(void))(result + 80);
      if (v1)
        return v1();
      else
        return 1006;
    }
  }
  return result;
}

uint64_t filter_DrawGlyphs(uint64_t result)
{
  uint64_t (*v1)(void);

  if (result)
  {
    result = *(_QWORD *)(result + 16);
    if (result)
    {
      v1 = *(uint64_t (**)(void))(result + 88);
      if (v1)
        return v1();
      else
        return 1006;
    }
  }
  return result;
}

uint64_t filter_DrawShading(uint64_t result)
{
  uint64_t (*v1)(void);

  if (result)
  {
    result = *(_QWORD *)(result + 16);
    if (result)
    {
      v1 = *(uint64_t (**)(void))(result + 96);
      if (v1)
        return v1();
      else
        return 1006;
    }
  }
  return result;
}

uint64_t filter_DrawLinearGradient(uint64_t result)
{
  uint64_t (*v1)(void);

  if (result)
  {
    result = *(_QWORD *)(result + 16);
    if (result)
    {
      v1 = *(uint64_t (**)(void))(result + 104);
      if (v1)
        return v1();
      else
        return 1006;
    }
  }
  return result;
}

uint64_t filter_DrawRadialGradient(uint64_t result)
{
  uint64_t (*v1)(void);

  if (result)
  {
    result = *(_QWORD *)(result + 16);
    if (result)
    {
      v1 = *(uint64_t (**)(void))(result + 112);
      if (v1)
        return v1();
      else
        return 1006;
    }
  }
  return result;
}

uint64_t filter_DrawConicGradient(uint64_t result)
{
  uint64_t (*v1)(void);

  if (result)
  {
    result = *(_QWORD *)(result + 16);
    if (result)
    {
      v1 = *(uint64_t (**)(void))(result + 120);
      if (v1)
        return v1();
      else
        return 1006;
    }
  }
  return result;
}

uint64_t filter_DrawDisplayList(uint64_t result)
{
  uint64_t (*v1)(void);

  if (result)
  {
    result = *(_QWORD *)(result + 16);
    if (result)
    {
      v1 = *(uint64_t (**)(void))(result + 128);
      if (v1)
        return v1();
      else
        return 1006;
    }
  }
  return result;
}

uint64_t filter_DrawImages(uint64_t result)
{
  uint64_t (*v1)(void);

  if (result)
  {
    result = *(_QWORD *)(result + 16);
    if (result)
    {
      v1 = *(uint64_t (**)(void))(result + 136);
      if (v1)
        return v1();
      else
        return 1006;
    }
  }
  return result;
}

uint64_t filter_DrawImageFromRect(uint64_t result)
{
  uint64_t (*v1)(void);

  if (result)
  {
    result = *(_QWORD *)(result + 16);
    if (result)
    {
      v1 = *(uint64_t (**)(void))(result + 144);
      if (v1)
        return v1();
      else
        return 1006;
    }
  }
  return result;
}

uint64_t filter_BeginPage(uint64_t result)
{
  uint64_t (*v1)(void);

  if (result)
  {
    result = *(_QWORD *)(result + 16);
    if (result)
    {
      v1 = *(uint64_t (**)(void))(result + 152);
      if (v1)
        return v1();
      else
        return 1006;
    }
  }
  return result;
}

uint64_t filter_EndPage(uint64_t result)
{
  uint64_t (*v1)(void);

  if (result)
  {
    result = *(_QWORD *)(result + 16);
    if (result)
    {
      v1 = *(uint64_t (**)(void))(result + 160);
      if (v1)
        return v1();
      else
        return 1006;
    }
  }
  return result;
}

uint64_t filter_Operation(uint64_t result)
{
  uint64_t (*v1)(void);

  if (result)
  {
    result = *(_QWORD *)(result + 16);
    if (result)
    {
      v1 = *(uint64_t (**)(void))(result + 168);
      if (v1)
        return v1();
      else
        return 1006;
    }
  }
  return result;
}

uint64_t filter_DrawWindowContents(uint64_t result)
{
  uint64_t (*v1)(void);

  if (result)
  {
    result = *(_QWORD *)(result + 16);
    if (result)
    {
      v1 = *(uint64_t (**)(void))(result + 176);
      if (v1)
        return v1();
      else
        return 1006;
    }
  }
  return result;
}

uint64_t filter_BeginLayer(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(void);

  if (a1 && (v1 = *(_QWORD *)(a1 + 16)) != 0 && (v2 = *(uint64_t (**)(void))(v1 + 192)) != 0)
    return v2();
  else
    return 0;
}

uint64_t filter_EndLayer(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(void);

  if (a1 && (v1 = *(_QWORD *)(a1 + 16)) != 0 && (v2 = *(uint64_t (**)(void))(v1 + 200)) != 0)
    return v2();
  else
    return 0;
}

uint64_t filter_GetLayer(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(void);

  if (a1 && (v1 = *(_QWORD *)(a1 + 16)) != 0 && (v2 = *(uint64_t (**)(void))(v1 + 208)) != 0)
    return v2();
  else
    return 0;
}

uint64_t filter_DrawLayer(uint64_t result)
{
  uint64_t (*v1)(void);

  if (result)
  {
    result = *(_QWORD *)(result + 16);
    if (result)
    {
      v1 = *(uint64_t (**)(void))(result + 216);
      if (v1)
        return v1();
      else
        return 1006;
    }
  }
  return result;
}

double CGColorMatrixMakeIdentity@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *a1 = CGColorMatrixMakeIdentity_identity;
  a1[1] = unk_185002348;
  result = 0.0;
  a1[2] = xmmword_185002358;
  return result;
}

__n128 CGColorMatrixMake@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  __n128 result;

  v2 = 0;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  do
  {
    result = *(__n128 *)(a1 + v2 * 16);
    a2[v2++] = result;
  }
  while (v2 != 3);
  return result;
}

BOOL CGColorMatrixIsIdentity(uint64_t a1)
{
  BOOL v1;
  unint64_t v2;
  uint64_t v3;
  float v4;

  v1 = 0;
  v2 = 0;
LABEL_2:
  v3 = 0;
  while (1)
  {
    v4 = v2 == v3 ? 1.0 : 0.0;
    if (*(float *)(a1 + 4 * v3) != v4)
      return v1;
    if (++v3 == 4)
    {
      v1 = v2 > 1;
      a1 += 16;
      if (++v2 != 3)
        goto LABEL_2;
      return 1;
    }
  }
}

float CGColorMatrixConcat@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float result;

  v3 = *a1;
  v4 = a1[1];
  v5 = a2[4];
  v6 = a2[5];
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[8];
  v10 = a2[9];
  v11 = a1[2];
  v12 = a1[3];
  v13 = (float)((float)(v4 * v6) + (float)(*a1 * v8)) + (float)(v11 * v10);
  *a3 = (float)((float)(v4 * v5) + (float)(*a1 * *a2)) + (float)(v11 * v9);
  a3[1] = v13;
  v14 = a2[6];
  v15 = a2[7];
  v16 = a2[2];
  v17 = a2[3];
  v18 = a2[10];
  v19 = a2[11];
  a3[2] = (float)((float)(v4 * v14) + (float)(v3 * v16)) + (float)(v11 * v18);
  a3[3] = v12 + (float)((float)((float)(v4 * v15) + (float)(v3 * v17)) + (float)(v11 * v19));
  v20 = a1[4];
  v21 = a1[5];
  v22 = a1[6];
  v23 = a1[7];
  a3[4] = (float)((float)(v5 * v21) + (float)(v20 * v7)) + (float)(v22 * v9);
  a3[5] = (float)((float)(v6 * v21) + (float)(v20 * v8)) + (float)(v22 * v10);
  a3[6] = (float)((float)(v14 * v21) + (float)(v20 * v16)) + (float)(v22 * v18);
  a3[7] = (float)((float)((float)(v15 * v21) + (float)(v20 * v17)) + (float)(v22 * v19)) + v23;
  v24 = a1[8];
  v25 = a1[9];
  v26 = (float)(v5 * v25) + (float)(v24 * v7);
  v27 = a1[10];
  v28 = a1[11];
  a3[8] = v26 + (float)(v27 * v9);
  a3[9] = (float)((float)(v6 * v25) + (float)(v24 * v8)) + (float)(v27 * v10);
  v29 = (float)((float)(v14 * v25) + (float)(v24 * v16)) + (float)(v27 * v18);
  result = (float)((float)((float)(v15 * v25) + (float)(v24 * v17)) + (float)(v27 * v19)) + v28;
  a3[10] = v29;
  a3[11] = result;
  return result;
}

void type0_release(void **a1)
{
  if (a1)
  {
    free(a1[1]);
    free(a1[3]);
    free(a1[6]);
    free(a1[4]);
    free(a1[5]);
    free(a1[10]);
    free(a1);
  }
}

__CFDictionary *copy_pdf_description_18786(uint64_t a1)
{
  __CFDictionary *Mutable;
  __CFDictionary *v3;
  CFMutableArrayRef v4;
  __CFArray *v5;
  unint64_t v6;
  CFMutableArrayRef v7;
  __CFArray *v8;
  unint64_t v9;
  CFMutableArrayRef v10;
  __CFArray *v11;
  unint64_t v12;
  CFMutableArrayRef v13;
  __CFArray *v14;
  unint64_t v15;
  CFMutableArrayRef v16;
  __CFArray *v17;
  unint64_t v18;
  CFDataRef v19;
  CFDataRef v20;

  if (!a1)
    return 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v3 = Mutable;
  if (Mutable)
  {
    CGCFDictionarySetInteger(Mutable, CFSTR("/FunctionType"), 0);
    v4 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (!v4)
      goto LABEL_26;
    v5 = v4;
    if ((*(_QWORD *)a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    {
      v6 = 0;
      do
        CGCFArrayAppendCGFloat(v5, *(double *)(*(_QWORD *)(a1 + 8) + 8 * v6++));
      while (v6 < 2 * *(_QWORD *)a1);
    }
    CFDictionarySetValue(v3, CFSTR("/Domain"), v5);
    CFRelease(v5);
    v7 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (!v7)
      goto LABEL_26;
    v8 = v7;
    if ((*(_QWORD *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    {
      v9 = 0;
      do
        CGCFArrayAppendCGFloat(v8, *(double *)(*(_QWORD *)(a1 + 24) + 8 * v9++));
      while (v9 < 2 * *(_QWORD *)(a1 + 16));
    }
    CFDictionarySetValue(v3, CFSTR("/Range"), v8);
    CFRelease(v8);
    v10 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (!v10)
      goto LABEL_26;
    v11 = v10;
    if (*(_QWORD *)a1)
    {
      v12 = 0;
      do
        CGCFArrayAppendCGFloat(v11, (double)*(uint64_t *)(*(_QWORD *)(a1 + 48) + 8 * v12++));
      while (v12 < *(_QWORD *)a1);
    }
    CFDictionarySetValue(v3, CFSTR("/Size"), v11);
    CFRelease(v11);
    CGCFDictionarySetInteger(v3, CFSTR("/BitsPerSample"), *(_DWORD *)(a1 + 56));
    CGCFDictionarySetInteger(v3, CFSTR("/Order"), *(_DWORD *)(a1 + 64));
    v13 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (!v13)
      goto LABEL_26;
    v14 = v13;
    if ((*(_QWORD *)a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    {
      v15 = 0;
      do
        CGCFArrayAppendCGFloat(v14, *(double *)(*(_QWORD *)(a1 + 40) + 8 * v15++));
      while (v15 < 2 * *(_QWORD *)a1);
    }
    CFDictionarySetValue(v3, CFSTR("/Encode"), v14);
    CFRelease(v14);
    v16 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (!v16)
      goto LABEL_26;
    v17 = v16;
    if ((*(_QWORD *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    {
      v18 = 0;
      do
        CGCFArrayAppendCGFloat(v17, *(double *)(*(_QWORD *)(a1 + 32) + 8 * v18++));
      while (v18 < 2 * *(_QWORD *)(a1 + 16));
    }
    CFDictionarySetValue(v3, CFSTR("/Decode"), v17);
    CFRelease(v17);
    v19 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(const UInt8 **)(a1 + 80), *(_QWORD *)(a1 + 72));
    if (v19)
    {
      v20 = v19;
      CFDictionarySetValue(v3, CFSTR("/%Stream"), v19);
    }
    else
    {
LABEL_26:
      v20 = v3;
      v3 = 0;
    }
    CFRelease(v20);
  }
  return v3;
}

void type0_evaluate(unint64_t *a1, uint64_t a2, double *a3, __n128 a4)
{
  size_t v7;
  __n128 v8;
  uint64_t v9;
  double *v10;
  double *v11;
  size_t v12;
  __n128 v13;
  uint64_t v14;
  double *v15;
  double *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  double *v20;
  double *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  unsigned int v26;
  double v27;
  double *v28;
  double *v29;
  double v30;
  double *v31;
  _QWORD v32[2];
  unint64_t v33[2];

  v33[1] = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v7 = MEMORY[0x1E0C80A78](8 * *a1, a4);
  v10 = (double *)((char *)v32 - v9);
  v11 = (double *)((char *)v32 - v9);
  if (v7 >= 0x101)
  {
    v11 = (double *)malloc_type_malloc(v7, 0x88E2DEAEuLL);
    if (!v11)
      return;
  }
  v12 = MEMORY[0x1E0C80A78](8 * a1[2], v8);
  v15 = (double *)((char *)v32 - v14);
  v16 = (double *)((char *)v32 - v14);
  if (v12 < 0x101 || (v16 = (double *)malloc_type_malloc(v12, 0x93D7FB6FuLL)) != 0)
  {
    v17 = *a1;
    if (!*a1)
      goto LABEL_15;
    v18 = 0;
    v19 = a1[6];
    v20 = (double *)(a1[5] + 8);
    v21 = (double *)(a1[1] + 8);
    v13.n128_u64[0] = 0;
    do
    {
      v11[v18] = fmin(fmax(*(v20 - 1) + (*(double *)(a2 + 8 * v18) - *(v21 - 1)) * (*v20 - *(v20 - 1)) / (*v21 - *(v21 - 1)), 0.0), (double)(*(_QWORD *)(v19 + 8 * v18) - 1));
      ++v18;
      v20 += 2;
      v21 += 2;
    }
    while (v17 != v18);
    if (v17 == 1)
    {
      v32[0] = v15;
      v32[1] = v32;
      v22 = a1[2];
      if (v22)
      {
        v23 = 0;
        v24 = (int)*v11;
        v25 = *v11 - (double)v24;
        do
        {
          v33[0] = v24;
          v26 = lookup(a1, v23, v33);
          v33[0] = v24 + 1;
          v16[v23] = v25 * (double)lookup(a1, v23, v33) + (1.0 - v25) * (double)v26;
          ++v23;
        }
        while (v22 != v23);
      }
      v15 = (double *)v32[0];
      if (!v22)
      {
LABEL_18:
        if (v11 != v10)
          free(v11);
        if (v16 != v15)
        {
          v31 = v16;
LABEL_22:
          free(v31);
          return;
        }
        return;
      }
    }
    else
    {
LABEL_15:
      multilinear_interpolate(a1, (uint64_t)v11, (uint64_t)v16, v13);
      v22 = a1[2];
      if (!v22)
        goto LABEL_18;
    }
    v27 = (double)(0xFFFFFFFF >> -*((_BYTE *)a1 + 56));
    v28 = (double *)(a1[4] + 8);
    v29 = v16;
    do
    {
      v30 = *v29++;
      *a3++ = *(v28 - 1) + v30 * (*v28 - *(v28 - 1)) / v27;
      v28 += 2;
      --v22;
    }
    while (v22);
    goto LABEL_18;
  }
  if (v11 != v10)
  {
    v31 = v11;
    goto LABEL_22;
  }
}

uint64_t lookup(_QWORD *a1, uint64_t a2, unint64_t *a3)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v18;

  if (!a1[9])
    return 0;
  v3 = (_QWORD *)a1[6];
  v4 = 0;
  v5 = *a1 - 1;
  if (*a1 != 1)
  {
    v6 = &v3[*a1 - 1];
    do
    {
      v7 = a3[v5];
      if (v7 >= *v6 - 1)
        v7 = *v6 - 1;
      v8 = *--v6;
      v4 = (v7 + v4) * v8;
      --v5;
    }
    while (v5);
  }
  v9 = *v3 - 1;
  if (*a3 < v9)
    v9 = *a3;
  v10 = a2 + (v9 + v4) * a1[2];
  v11 = a1[7];
  v12 = v10 * v11;
  v13 = (unsigned __int8 *)(a1[10] + ((v10 * v11) >> 3));
  v14 = v12 & 7;
  if ((v12 & 7) != 0)
  {
    v16 = *v13++;
    v15 = v16;
    v14 = 8 - v14;
  }
  else
  {
    v15 = 0;
  }
  while (v14 < v11)
  {
    v18 = *v13++;
    v15 = v18 | (v15 << 8);
    v14 += 8;
  }
  return (v15 >> (v14 - v11)) & (0xFFFFFFFF >> -(char)v11);
}

void multilinear_interpolate(unint64_t *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  size_t v7;
  unint64_t v8;
  uint64_t v9;
  __n128 v10;
  double *v11;
  size_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 v15;
  char *v16;
  size_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  double v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  double v29;
  unint64_t v30;
  double v31;
  unint64_t *v32;
  uint64_t *v33;
  double *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  char *v44;
  double *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v7 = MEMORY[0x1E0C80A78](8 * *a1, a4);
  v45 = (double *)((char *)&v43 - v9);
  if (v8 <= 0x1FFFFFFFFFFFFFFELL)
    v11 = (double *)((char *)&v43 - v9);
  else
    v11 = 0;
  if (v8 - 0x1FFFFFFFFFFFFFFFLL >= 0xE000000000000082)
  {
    v11 = (double *)malloc_type_malloc(v7, 0x8A5F7193uLL);
    v7 = 8 * *a1;
  }
  v12 = MEMORY[0x1E0C80A78](v7, v10);
  v44 = (char *)&v43 - v14;
  if (v13 <= 0x1FFFFFFFFFFFFFFELL)
    v16 = (char *)&v43 - v14;
  else
    v16 = 0;
  if (v13 - 0x1FFFFFFFFFFFFFFFLL >= 0xE000000000000082)
  {
    v16 = (char *)malloc_type_malloc(v12, 0x2E60A1F8uLL);
    v12 = 8 * *a1;
  }
  v17 = MEMORY[0x1E0C80A78](v12, v15);
  v21 = (unint64_t *)((char *)&v43 - v19);
  if (v20 <= 0x1FFFFFFFFFFFFFFELL)
    v22 = (unint64_t *)((char *)&v43 - v19);
  else
    v22 = 0;
  if (v20 - 0x1FFFFFFFFFFFFFFFLL >= 0xE000000000000082)
  {
    v22 = (unint64_t *)malloc_type_malloc(v17, 0xE110B0B5uLL);
    v18 = *a1;
  }
  if (v18)
  {
    v23 = 0;
    do
    {
      v24 = *(double *)(a2 + 8 * v23);
      v25 = (int)v24;
      *(_QWORD *)&v16[8 * v23] = v25;
      v11[v23++] = v24 - (double)v25;
      v26 = *a1;
    }
    while (v23 < *a1);
  }
  else
  {
    v26 = 0;
  }
  if (a1[2])
  {
    v27 = 0;
    do
    {
      v28 = 0;
      v29 = 0.0;
      do
      {
        if (v26)
        {
          v30 = 0;
          do
          {
            v22[v30] = *(_QWORD *)&v16[8 * v30] + ((v28 >> v30) & 1);
            ++v30;
            v26 = *a1;
          }
          while (v30 < *a1);
          v31 = (double)lookup(a1, v27, v22);
          if (v26)
          {
            v32 = v22;
            v33 = (uint64_t *)v16;
            v34 = v11;
            v35 = v26;
            do
            {
              v37 = *v32++;
              v36 = v37;
              v39 = *v33++;
              v38 = v39;
              v40 = *v34++;
              v41 = v40;
              v42 = 1.0 - v40;
              if (v36 == v38)
                v41 = v42;
              v31 = v31 * v41;
              --v35;
            }
            while (v35);
          }
        }
        else
        {
          v31 = (double)lookup(a1, v27, v22);
        }
        v29 = v29 + v31;
        ++v28;
      }
      while (v28 < (1 << v26));
      *(double *)(a3 + 8 * v27++) = v29;
    }
    while (v27 < a1[2]);
  }
  if (v11 != v45)
    free(v11);
  if (v16 != v44)
    free(v16);
  if (v22 != v21)
    free(v22);
}

uint64_t CGPDFStructureElementCreate(int a1)
{
  uint64_t cftype;
  uint64_t v3;

  if (CGPDFStructureElementGetTypeID(void)::onceToken != -1)
    dispatch_once(&CGPDFStructureElementGetTypeID(void)::onceToken, &__block_literal_global_18805);
  cftype = pdf_create_cftype();
  v3 = cftype;
  if (cftype)
  {
    *(_DWORD *)(cftype + 16) = a1;
    *(_OWORD *)(cftype + 24) = 0u;
    *(_OWORD *)(cftype + 40) = 0u;
    *(_QWORD *)(cftype + 56) = objc_alloc_init(MEMORY[0x1E0C99E08]);
    *(_QWORD *)(v3 + 64) = 0;
  }
  return v3;
}

void sub_184DBED88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  a10 = (void **)(v10 + 32);
  std::vector<std::variant<applesauce::CF::ObjectRef<CGPDFStructureElement *>,applesauce::CF::ObjectRef<CGPDFMarkedContentItem *>>>::__destroy_vector::operator()[abi:se180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t ___ZL30CGPDFStructureElementGetTypeIDv_block_invoke()
{
  uint64_t result;

  result = pdf_register_cftype((uint64_t)&CGPDFStructureElementGetTypeID(void)::CGPDFStructureElementType);
  CGPDFStructureElementGetTypeID(void)::typeID = result;
  return result;
}

void CGPDFStructureElementFinalize(id *a1)
{
  void **v2;

  v2 = a1 + 4;
  std::vector<std::variant<applesauce::CF::ObjectRef<CGPDFStructureElement *>,applesauce::CF::ObjectRef<CGPDFMarkedContentItem *>>>::__destroy_vector::operator()[abi:se180100](&v2);
}

CFTypeRef CGPDFStructureElementRetain(CFTypeRef cf)
{
  if (cf)
    return CFRetain(cf);
  return cf;
}

void CGPDFStructureElementRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void CGPDFStructureElementSetTitle(uint64_t a1, void *a2)
{
  PDFStructureElement::SetAttribute((PDFStructureElement *)(a1 + 16), CFSTR("/T"), a2);
}

void CGPDFStructureElementSetLanguageIdentifier(uint64_t a1, void *a2)
{
  PDFStructureElement::SetAttribute((PDFStructureElement *)(a1 + 16), CFSTR("/Lang"), a2);
}

void CGPDFStructureElementSetAlternativeText(uint64_t a1, void *a2)
{
  PDFStructureElement::SetAttribute((PDFStructureElement *)(a1 + 16), CFSTR("/AltText"), a2);
}

void CGPDFStructureElementSetExpansionText(uint64_t a1, void *a2)
{
  PDFStructureElement::SetAttribute((PDFStructureElement *)(a1 + 16), CFSTR("/E"), a2);
}

void CGPDFStructureElementSetActualText(uint64_t a1, void *a2)
{
  PDFStructureElement::SetAttribute((PDFStructureElement *)(a1 + 16), CFSTR("/ActualText"), a2);
}

unint64_t CGPDFStructureElementAddStructureElement(uint64_t *a1, _QWORD *cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t result;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v20[5];

  if (cf[3])
  {
    CGPostError((uint64_t)"%s: Cannot add structure element child to structure element. The child already has a parent", (uint64_t)cf, a3, a4, a5, a6, a7, a8, (char)"AddChild");
    return 1001;
  }
  cf[3] = a1 + 2;
  result = (unint64_t)CFRetain(cf);
  v10 = result;
  v11 = a1[6];
  v12 = a1[5];
  if (v12 >= v11)
  {
    v14 = a1[4];
    v15 = (uint64_t)(v12 - v14) >> 4;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 60)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v17 = v11 - v14;
    if (v17 >> 3 > v16)
      v16 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      result = 0xFFFFFFFFFFFFFFFLL;
    else
      result = v16;
    v20[4] = a1 + 6;
    if (result)
    {
      result = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(result);
      v18 = result + 16 * v15;
      v20[0] = result;
      v20[1] = v18;
      v20[3] = result + 16 * v19;
      if (result)
      {
        *(_QWORD *)v18 = v10;
        *(_DWORD *)(v18 + 8) = 0;
        v20[2] = v18 + 16;
        std::vector<std::variant<applesauce::CF::ObjectRef<CGPDFStructureElement *>,applesauce::CF::ObjectRef<CGPDFMarkedContentItem *>>>::__swap_out_circular_buffer(a1 + 4, v20);
        v13 = a1[5];
        std::__split_buffer<std::variant<applesauce::CF::ObjectRef<CGPDFStructureElement *>,applesauce::CF::ObjectRef<CGPDFMarkedContentItem *>>>::~__split_buffer((uint64_t)v20);
        goto LABEL_15;
      }
    }
LABEL_18:
    __break(1u);
    return result;
  }
  if (!v12)
    goto LABEL_18;
  *(_QWORD *)v12 = result;
  *(_DWORD *)(v12 + 8) = 0;
  v13 = v12 + 16;
LABEL_15:
  result = 0;
  a1[5] = v13;
  return result;
}

void sub_184DBEFA4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

unint64_t CGPDFStructureElementAddMarkedContentItem(uint64_t *a1, _QWORD *cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t result;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v20[5];

  if (cf[6])
  {
    CGPostError((uint64_t)"%s: Cannot add marked content item child to structure element. The child already has a parent", (uint64_t)cf, a3, a4, a5, a6, a7, a8, (char)"AddChild");
    return 1001;
  }
  cf[6] = a1;
  result = (unint64_t)CFRetain(cf);
  v10 = result;
  v11 = a1[6];
  v12 = a1[5];
  if (v12 >= v11)
  {
    v14 = a1[4];
    v15 = (uint64_t)(v12 - v14) >> 4;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 60)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v17 = v11 - v14;
    if (v17 >> 3 > v16)
      v16 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      result = 0xFFFFFFFFFFFFFFFLL;
    else
      result = v16;
    v20[4] = a1 + 6;
    if (result)
    {
      result = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(result);
      v18 = result + 16 * v15;
      v20[0] = result;
      v20[1] = v18;
      v20[3] = result + 16 * v19;
      if (result)
      {
        *(_QWORD *)v18 = v10;
        *(_DWORD *)(v18 + 8) = 1;
        v20[2] = v18 + 16;
        std::vector<std::variant<applesauce::CF::ObjectRef<CGPDFStructureElement *>,applesauce::CF::ObjectRef<CGPDFMarkedContentItem *>>>::__swap_out_circular_buffer(a1 + 4, v20);
        v13 = a1[5];
        std::__split_buffer<std::variant<applesauce::CF::ObjectRef<CGPDFStructureElement *>,applesauce::CF::ObjectRef<CGPDFMarkedContentItem *>>>::~__split_buffer((uint64_t)v20);
        goto LABEL_15;
      }
    }
LABEL_18:
    __break(1u);
    return result;
  }
  if (!v12)
    goto LABEL_18;
  *(_QWORD *)v12 = result;
  *(_DWORD *)(v12 + 8) = 1;
  v13 = v12 + 16;
LABEL_15:
  result = 0;
  a1[5] = v13;
  return result;
}

void sub_184DBF0E8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t CGPDFSelectionGetTypeID()
{
  uint64_t result;

  result = CGPDFSelectionGetTypeID::id;
  if (!CGPDFSelectionGetTypeID::id)
  {
    result = _CFRuntimeRegisterClass();
    CGPDFSelectionGetTypeID::id = result;
  }
  return result;
}

uint64_t _CGPDFSelectionFinalize(char *a1)
{
  void *v2;
  void *v3;
  void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  if (a1[160])
  {
    v2 = (void *)*((_QWORD *)a1 + 29);
    if (v2)
    {
      *((_QWORD *)a1 + 30) = v2;
      operator delete(v2);
    }
    v3 = (void *)*((_QWORD *)a1 + 26);
    if (v3)
    {
      *((_QWORD *)a1 + 27) = v3;
      operator delete(v3);
    }
    v4 = (void *)*((_QWORD *)a1 + 23);
    if (v4)
    {
      *((_QWORD *)a1 + 24) = v4;
      operator delete(v4);
    }
    v5 = (const void *)*((_QWORD *)a1 + 21);
    if (v5)
      CFRelease(v5);
  }
  v6 = (const void *)*((_QWORD *)a1 + 2);
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)a1 + 3);
  if (v7)
    CFRelease(v7);
  v8 = (const void *)*((_QWORD *)a1 + 4);
  if (v8)
    CFRelease(v8);
  *((_QWORD *)a1 + 6) = 0;
  v9 = (void *)*((_QWORD *)a1 + 7);
  if (v9)
    free(v9);
  v10 = (void *)*((_QWORD *)a1 + 8);
  if (v10)
    free(v10);
  v11 = (void *)*((_QWORD *)a1 + 9);
  if (v11)
    free(v11);
  v12 = (void *)*((_QWORD *)a1 + 10);
  if (v12)
    free(v12);
  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 96));
}

CFStringRef _CGPDFSelectionCopyDebugDesc(uint64_t *a1)
{
  uint64_t *String;
  uint64_t *v3;
  uint64_t v4;
  uint64_t Range;
  uint64_t v6;
  uint64_t v7;
  const __CFAllocator *v8;
  CFStringRef v9;
  const __CFAllocator *v10;
  const __CFAllocator *v12;
  CFStringRef v13;

  String = CGPDFSelectionCreateString(a1);
  if (String)
  {
    v3 = String;
    v4 = a1[3];
    if (!v4)
      goto LABEL_8;
    if (*(_BYTE *)(v4 + 40))
      CPIndexSetNormalize(a1[3]);
    if (*(_QWORD *)(v4 + 16) == 1)
    {
      Range = CPIndexSetGetRange(a1[3], 0);
      v7 = v6;
      v8 = CFGetAllocator(a1);
      v9 = CFStringCreateWithFormat(v8, 0, CFSTR("<CGPDFSelection (%p): range = [%ld,%ld)>"), a1, Range, v7);
    }
    else
    {
LABEL_8:
      v12 = CFGetAllocator(a1);
      v9 = CFStringCreateWithFormat(v12, 0, CFSTR("<CGPDFSelection (%p): {multiple ranges}>"), a1);
    }
    v13 = v9;
    CFRelease(v3);
    return v13;
  }
  else
  {
    v10 = CFGetAllocator(a1);
    return CFStringCreateWithFormat(v10, 0, CFSTR("<CGPDFSelection (%p): {empty}>"), a1);
  }
}

uint64_t *CGPDFSelectionCreateString(uint64_t *a1)
{
  uint64_t *StringForStringRanges;
  const void *v2;
  const void *v3;
  uint64_t v4;
  _QWORD v6[2];

  StringForStringRanges = a1;
  if (a1)
  {
    if (a1[23] == a1[24])
    {
      return 0;
    }
    else
    {
      Selection::cacheStringRanges((Selection *)(a1 + 21));
      CGPDFPageCopyPageLayoutWithCTLD(StringForStringRanges[21], 1);
      v3 = v2;
      v4 = (StringForStringRanges[27] - StringForStringRanges[26]) >> 4;
      v6[0] = StringForStringRanges[26];
      v6[1] = v4;
      StringForStringRanges = (uint64_t *)PageLayout::CreateStringForStringRanges((uint64_t)v2 + 16, (uint64_t)v6);
      if (v3)
        CFRelease(v3);
    }
  }
  return StringForStringRanges;
}

void sub_184DBF76C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

CFTypeRef CGPDFSelectionRetain(CFTypeRef cf)
{
  if (cf)
    return CFRetain(cf);
  return cf;
}

void CGPDFSelectionRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

unint64_t CGPDFSelectionCreateBetweenPointsWithOptions(uint64_t a1, int a2, double a3, double a4, double a5, double a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *SelectionForStringRange;
  const void **v14;
  int v15;
  int64_t v16;
  int64_t v17;
  int64_t v18;
  int64_t v19;
  BOOL v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  double v25;
  double v26;
  unint64_t v27;
  unint64_t v28;
  double v29;
  double v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t result;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  char *v57;
  __int128 v58;
  CFRange v59;

  if (!a1)
    return 0;
  CGPDFPageCopyPageLayoutWithCTLD(a1, 1);
  if (!v11)
    return 0;
  v12 = v11;
  SelectionForStringRange = 0;
  if ((a2 - 6) > 0xFFFFFFFC || *(_QWORD *)(v11 + 48) == *(_QWORD *)(v11 + 56))
  {
LABEL_42:
    CFRelease((CFTypeRef)v12);
    return (unint64_t)SelectionForStringRange;
  }
  v14 = (const void **)(v11 + 16);
  v15 = *(unsigned __int8 *)(v11 + 24);
  PageLayout::getTextRangeIndex((PageLayout *)(v11 + 16), 0, 0, a3, a4);
  v17 = v16;
  PageLayout::getTextRangeIndex((PageLayout *)(v12 + 16), 0, 0, a5, a6);
  v19 = v18;
  v21 = v17 == -1 || v18 == -1;
  if (v15)
  {
    if (!v21)
    {
      v22 = PageLayout::convertRTLTextRangeIndexToStringRangeIndex((_QWORD *)(v12 + 16), v17);
      v23 = PageLayout::convertRTLTextRangeIndexToStringRangeIndex((_QWORD *)(v12 + 16), v19);
      v24 = v23;
      if ((uint64_t)v23 >= (uint64_t)v22)
        v25 = a3;
      else
        v25 = a5;
      if ((uint64_t)v23 >= (uint64_t)v22)
        v26 = a4;
      else
        v26 = a6;
      PageLayout::getTextRangeIndex((PageLayout *)(v12 + 16), a2, 0, v25, v26);
      v28 = v27;
      if ((uint64_t)v24 >= (uint64_t)v22)
        v29 = a5;
      else
        v29 = a3;
      if ((uint64_t)v24 >= (uint64_t)v22)
        v30 = a6;
      else
        v30 = a4;
      PageLayout::getTextRangeIndex((PageLayout *)(v12 + 16), a2, 1u, v29, v30);
      v32 = v31;
      v33 = (char *)PageLayout::convertRTLTextRangeIndexToStringRangeIndex((_QWORD *)(v12 + 16), v28);
      v59.length = (char *)PageLayout::convertRTLTextRangeIndexToStringRangeIndex((_QWORD *)(v12 + 16), v32) - v33;
      v59.location = (CFIndex)v33;
      SelectionForStringRange = PageLayout::CreateSelectionForStringRange((id *)(v12 + 16), v59);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  if (v21)
    goto LABEL_41;
  v34 = v18 >= v17 ? a3 : a5;
  v35 = v18 >= v17 ? a4 : a6;
  PageLayout::getTextRangeIndex((PageLayout *)(v12 + 16), a2, 0, v34, v35);
  v37 = v36;
  v39 = v38;
  v40 = v19 >= v17 ? a5 : a3;
  v41 = v19 >= v17 ? a6 : a4;
  PageLayout::getTextRangeIndex((PageLayout *)(v12 + 16), a2, 1u, v40, v41);
  v43 = v42;
  if (v42 == v39)
  {
LABEL_41:
    SelectionForStringRange = 0;
    goto LABEL_42;
  }
  result = CGPDFSelectionCreateWithPage(*v14);
  SelectionForStringRange = (_QWORD *)result;
  v45 = v43 - v39;
  v46 = *(_QWORD **)(result + 192);
  v47 = *(_QWORD *)(result + 200);
  if ((unint64_t)v46 >= v47)
  {
    v49 = *(_QWORD *)(result + 184);
    v50 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v46 - v49) >> 3);
    v51 = v50 + 1;
    if (v50 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - v49) >> 3);
    if (2 * v52 > v51)
      v51 = 2 * v52;
    if (v52 >= 0x555555555555555)
      result = 0xAAAAAAAAAAAAAAALL;
    else
      result = v51;
    if (result)
    {
      result = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<std::vector<ClipperLib::IntPoint>>>(result);
      if (result)
      {
        v54 = result + 24 * v53;
        v55 = (_QWORD *)(result + 24 * v50);
        *v55 = v37;
        v55[1] = v39;
        v55[2] = v45;
        v48 = v55 + 3;
        v57 = (char *)SelectionForStringRange[23];
        v56 = (char *)SelectionForStringRange[24];
        if (v56 != v57)
        {
          do
          {
            v58 = *(_OWORD *)(v56 - 24);
            *(v55 - 1) = *((_QWORD *)v56 - 1);
            *(_OWORD *)(v55 - 3) = v58;
            v55 -= 3;
            v56 -= 24;
          }
          while (v56 != v57);
          v56 = (char *)SelectionForStringRange[23];
        }
        SelectionForStringRange[23] = v55;
        SelectionForStringRange[24] = v48;
        SelectionForStringRange[25] = v54;
        if (v56)
          operator delete(v56);
        goto LABEL_60;
      }
    }
  }
  else if (v46)
  {
    *v46 = v37;
    v46[1] = v39;
    v48 = v46 + 3;
    v46[2] = v45;
LABEL_60:
    SelectionForStringRange[24] = v48;
    Selection::Normalize((Selection *)(SelectionForStringRange + 21));
    goto LABEL_42;
  }
  __break(1u);
  return result;
}

void sub_184DBFA8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ObjectRef<CGPDFPageLayout *>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

char *CGPDFSelectionCreateDirectionalSelection(uint64_t a1, double a2, double a3, double a4, double a5)
{
  CFTypeRef v9;
  const void *v10;
  char *DirectionalSelection;

  if (!a1)
    return 0;
  v9 = CGPDFPageCopyLayout(a1);
  if (!v9)
    return 0;
  v10 = v9;
  DirectionalSelection = CGPDFLayoutCreateDirectionalSelection((uint64_t)v9, a2, a3, a4, a5);
  CFRelease(v10);
  return DirectionalSelection;
}

void sub_184DBFB28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ObjectRef<CGPDFLayout *>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

_QWORD *CGPDFSelectionCreateFromIndexToPoint(uint64_t a1, CFIndex a2, double a3, double a4)
{
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  if (!a1)
    return 0;
  v6 = CGPDFSelectionCreateToPointWithOptions(a1, 0, a3, a4);
  if (!v6)
    return 0;
  v7 = (const void *)v6;
  v8 = *(_QWORD *)(v6 + 192);
  if (v8 == *(_QWORD *)(v6 + 184) || (v9 = *(_QWORD *)(v8 - 16) + *(_QWORD *)(v8 - 8), v9 <= a2))
    v10 = 0;
  else
    v10 = CGPDFSelectionCreateForRange(a1, a2, v9 - a2);
  CFRelease(v7);
  return v10;
}

void sub_184DBFBCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ObjectRef<CGPDFSelection *>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

unint64_t CGPDFSelectionCreateToPointWithOptions(uint64_t a1, int a2, double a3, double a4)
{
  id *v7;
  id *v8;
  _QWORD *SelectionForStringRange;
  unint64_t v10;
  unint64_t v11;
  unint64_t result;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  char *v23;
  char *v24;
  __int128 v25;
  CFRange v26;

  if (!a1)
    return 0;
  CGPDFPageCopyPageLayoutWithCTLD(a1, 1);
  if (!v7)
    return 0;
  v8 = v7;
  SelectionForStringRange = 0;
  if ((a2 - 6) > 0xFFFFFFFC || v7[6] == v7[7])
  {
LABEL_27:
    CFRelease(v8);
    return (unint64_t)SelectionForStringRange;
  }
  PageLayout::getTextRangeIndex((PageLayout *)(v7 + 2), a2, 1u, a3, a4);
  v11 = v10;
  if (v10 == -1)
  {
    SelectionForStringRange = 0;
    goto LABEL_27;
  }
  if (*((_BYTE *)v8 + 24))
  {
    v26.length = (CFIndex)PageLayout::convertRTLTextRangeIndexToStringRangeIndex(v8 + 2, v10);
    v26.location = 0;
    SelectionForStringRange = PageLayout::CreateSelectionForStringRange(v8 + 2, v26);
    goto LABEL_27;
  }
  result = CGPDFSelectionCreateWithPage(v8[2]);
  SelectionForStringRange = (_QWORD *)result;
  v13 = *(_QWORD **)(result + 192);
  v14 = *(_QWORD *)(result + 200);
  if ((unint64_t)v13 >= v14)
  {
    v16 = *(_QWORD *)(result + 184);
    v17 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13 - v16) >> 3);
    v18 = v17 + 1;
    if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v16) >> 3);
    if (2 * v19 > v18)
      v18 = 2 * v19;
    if (v19 >= 0x555555555555555)
      result = 0xAAAAAAAAAAAAAAALL;
    else
      result = v18;
    if (result)
    {
      result = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<std::vector<ClipperLib::IntPoint>>>(result);
      if (result)
      {
        v21 = result + 24 * v20;
        v22 = (_QWORD *)(result + 24 * v17);
        *v22 = 0;
        v22[1] = 0;
        v22[2] = v11;
        v15 = v22 + 3;
        v24 = (char *)SelectionForStringRange[23];
        v23 = (char *)SelectionForStringRange[24];
        if (v23 != v24)
        {
          do
          {
            v25 = *(_OWORD *)(v23 - 24);
            *(v22 - 1) = *((_QWORD *)v23 - 1);
            *(_OWORD *)(v22 - 3) = v25;
            v22 -= 3;
            v23 -= 24;
          }
          while (v23 != v24);
          v23 = (char *)SelectionForStringRange[23];
        }
        SelectionForStringRange[23] = v22;
        SelectionForStringRange[24] = v15;
        SelectionForStringRange[25] = v21;
        if (v23)
          operator delete(v23);
        goto LABEL_26;
      }
    }
  }
  else if (v13)
  {
    *v13 = 0;
    v13[1] = 0;
    v15 = v13 + 3;
    v13[2] = v11;
LABEL_26:
    SelectionForStringRange[24] = v15;
    Selection::Normalize((Selection *)(SelectionForStringRange + 21));
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

void sub_184DBFDC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ObjectRef<CGPDFPageLayout *>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

unint64_t CGPDFSelectionGetNumberOfTextRanges(unint64_t result)
{
  if (result)
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(result + 192) - *(_QWORD *)(result + 184)) >> 3);
  return result;
}

uint64_t CGPDFSelectionGetTextRange(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  if (a1 && (v2 = *(_QWORD *)(a1 + 184), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 192) - v2) >> 3) > a2))
    return *(_QWORD *)(v2 + 24 * a2 + 8);
  else
    return -1;
}

_QWORD *CGPDFSelectionCreateForRange(uint64_t a1, CFIndex a2, CFIndex a3)
{
  uint64_t v5;
  const void *v6;
  _QWORD *SelectionForTextRange;
  CFRange v9;

  if (!a1)
    return 0;
  CGPDFPageCopyPageLayoutWithCTLD(a1, 1);
  if (!v5)
    return 0;
  v6 = (const void *)v5;
  v9.location = a2;
  v9.length = a3;
  SelectionForTextRange = PageLayout::CreateSelectionForTextRange((PageLayout *)(v5 + 16), v9);
  CFRelease(v6);
  return SelectionForTextRange;
}

void sub_184DBFEB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ObjectRef<CGPDFPageLayout *>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

const void **applesauce::CF::ObjectRef<CGPDFSelection *>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

_QWORD *CGPDFSelectionCreateFromPointToIndex(uint64_t a1, uint64_t a2, double a3, double a4)
{
  _QWORD *v4;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  CFIndex v9;

  v4 = (_QWORD *)a1;
  if (a1)
  {
    v6 = CGPDFSelectionCreateFromPointWithOptions(a1, 0, a3, a4);
    if (v6)
    {
      v7 = (const void *)v6;
      v8 = *(_QWORD *)(v6 + 184);
      if (*(_QWORD *)(v6 + 192) == v8 || (v9 = *(_QWORD *)(v8 + 8), a2 <= v9))
        v4 = 0;
      else
        v4 = CGPDFSelectionCreateForRange((uint64_t)v4, v9, a2 - v9);
      CFRelease(v7);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_184DBFF84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ObjectRef<CGPDFSelection *>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

unint64_t CGPDFSelectionCreateFromPointWithOptions(uint64_t a1, int a2, double a3, double a4)
{
  id *v7;
  id *v8;
  _QWORD *SelectionForStringRange;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t result;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  char *v27;
  char *v28;
  __int128 v29;
  CFRange v30;

  if (!a1)
    return 0;
  CGPDFPageCopyPageLayoutWithCTLD(a1, 1);
  if (!v7)
    return 0;
  v8 = v7;
  SelectionForStringRange = 0;
  if ((a2 - 6) > 0xFFFFFFFC || v7[6] == v7[7])
  {
LABEL_27:
    CFRelease(v8);
    return (unint64_t)SelectionForStringRange;
  }
  PageLayout::getTextRangeIndex((PageLayout *)(v7 + 2), a2, 0, a3, a4);
  v12 = v11;
  if (v11 == -1)
  {
    SelectionForStringRange = 0;
    goto LABEL_27;
  }
  if (*((_BYTE *)v8 + 24))
  {
    v13 = PageLayout::convertRTLTextRangeIndexToStringRangeIndex(v8 + 2, v11);
    v30.length = objc_msgSend(v8[5], "length") - (_QWORD)v13;
    v30.location = (CFIndex)v13;
    SelectionForStringRange = PageLayout::CreateSelectionForStringRange(v8 + 2, v30);
    goto LABEL_27;
  }
  v14 = v10;
  result = CGPDFSelectionCreateWithPage(v8[2]);
  SelectionForStringRange = (_QWORD *)result;
  v16 = (((_BYTE *)v8[16] - (_BYTE *)v8[15]) >> 5) - v12;
  v17 = *(_QWORD **)(result + 192);
  v18 = *(_QWORD *)(result + 200);
  if ((unint64_t)v17 >= v18)
  {
    v20 = *(_QWORD *)(result + 184);
    v21 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v17 - v20) >> 3);
    v22 = v21 + 1;
    if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - v20) >> 3);
    if (2 * v23 > v22)
      v22 = 2 * v23;
    if (v23 >= 0x555555555555555)
      result = 0xAAAAAAAAAAAAAAALL;
    else
      result = v22;
    if (result)
    {
      result = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<std::vector<ClipperLib::IntPoint>>>(result);
      if (result)
      {
        v25 = result + 24 * v24;
        v26 = (_QWORD *)(result + 24 * v21);
        *v26 = v14;
        v26[1] = v12;
        v26[2] = v16;
        v19 = v26 + 3;
        v28 = (char *)SelectionForStringRange[23];
        v27 = (char *)SelectionForStringRange[24];
        if (v27 != v28)
        {
          do
          {
            v29 = *(_OWORD *)(v27 - 24);
            *(v26 - 1) = *((_QWORD *)v27 - 1);
            *(_OWORD *)(v26 - 3) = v29;
            v26 -= 3;
            v27 -= 24;
          }
          while (v27 != v28);
          v27 = (char *)SelectionForStringRange[23];
        }
        SelectionForStringRange[23] = v26;
        SelectionForStringRange[24] = v19;
        SelectionForStringRange[25] = v25;
        if (v27)
          operator delete(v27);
        goto LABEL_26;
      }
    }
  }
  else if (v17)
  {
    *v17 = v14;
    v17[1] = v12;
    v19 = v17 + 3;
    v17[2] = v16;
LABEL_26:
    SelectionForStringRange[24] = v19;
    Selection::Normalize((Selection *)(SelectionForStringRange + 21));
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

void sub_184DC01A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ObjectRef<CGPDFPageLayout *>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

char *CGPDFSelectionCreateBetweenRangeAndPoint(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5, double a6)
{
  CFTypeRef v11;
  const void *v12;
  char *SelectionBetweenRangeAndPoint;

  if (!a1)
    return 0;
  v11 = CGPDFPageCopyLayout(a1);
  if (!v11)
    return 0;
  v12 = v11;
  SelectionBetweenRangeAndPoint = CGPDFLayoutCreateSelectionBetweenRangeAndPoint((uint64_t)v11, a2, a3, a4, a5, a6);
  CFRelease(v12);
  return SelectionBetweenRangeAndPoint;
}

void sub_184DC024C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ObjectRef<CGPDFLayout *>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

unint64_t CGPDFSelectionCreateAtPointWithOptions(uint64_t a1, int a2, double a3, double a4)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t result;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  char *v33;
  char *v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  __int128 v49;

  if (!a1)
    return 0;
  CGPDFPageCopyPageLayoutWithCTLD(a1, 1);
  if (!v7)
    return 0;
  v8 = v7;
  v9 = 0;
  if ((a2 - 6) > 0xFFFFFFFC || v7[6] == v7[7])
  {
LABEL_58:
    CFRelease(v8);
    return (unint64_t)v9;
  }
  PageLayout::getTextRangeIndex((PageLayout *)(v7 + 2), a2, 2u, a3, a4);
  v12 = v11;
  if (v11 == -1)
  {
LABEL_13:
    v9 = 0;
    goto LABEL_58;
  }
  v13 = v10;
  result = CGPDFSelectionCreateWithPage((const void *)v8[2]);
  v9 = (_QWORD *)result;
  if (a2 != 2)
  {
    if (a2 == 1)
    {
      result = (unint64_t)PageLayout::getWordRange(v8 + 2, v13, v12);
      v22 = result;
      v23 = v21;
      v24 = (unint64_t *)v9[24];
      v25 = v9[25];
      if ((unint64_t)v24 < v25)
      {
        if (v24)
        {
          *v24 = v13;
          v24[1] = result;
          v20 = v24 + 3;
          v24[2] = v21;
          goto LABEL_57;
        }
        goto LABEL_61;
      }
      v36 = v9[23];
      v37 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v24 - v36) >> 3);
      v38 = v37 + 1;
      if (v37 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - v36) >> 3);
        if (2 * v39 > v38)
          v38 = 2 * v39;
        if (v39 >= 0x555555555555555)
          result = 0xAAAAAAAAAAAAAAALL;
        else
          result = v38;
        if (!result)
          goto LABEL_61;
        result = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<std::vector<ClipperLib::IntPoint>>>(result);
        if (!result)
          goto LABEL_61;
        v31 = result + 24 * v40;
        v32 = (unint64_t *)(result + 24 * v37);
        *v32 = v13;
        v32[1] = v22;
        v32[2] = v23;
        v20 = v32 + 3;
        v41 = (char *)v9[23];
        v33 = (char *)v9[24];
        if (v33 != v41)
        {
          do
          {
            v42 = *(_OWORD *)(v33 - 24);
            *(v32 - 1) = *((_QWORD *)v33 - 1);
            *(_OWORD *)(v32 - 3) = v42;
            v32 -= 3;
            v33 -= 24;
          }
          while (v33 != v41);
          goto LABEL_54;
        }
LABEL_55:
        v9[23] = v32;
        v9[24] = v20;
        v9[25] = v31;
        if (v33)
          operator delete(v33);
        goto LABEL_57;
      }
LABEL_60:
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    }
    if (!a2)
    {
      v15 = *(unint64_t **)(result + 192);
      v16 = *(_QWORD *)(result + 200);
      if ((unint64_t)v15 < v16)
      {
        if (v15)
        {
          *v15 = v13;
          v15[1] = v12;
          v15[2] = 1;
LABEL_18:
          v20 = v15 + 3;
LABEL_57:
          v9[24] = v20;
          Selection::Normalize((Selection *)(v9 + 21));
          goto LABEL_58;
        }
        goto LABEL_61;
      }
      v26 = *(_QWORD *)(result + 184);
      v27 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v15 - v26) >> 3);
      v28 = v27 + 1;
      if (v27 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v26) >> 3);
        if (2 * v29 > v28)
          v28 = 2 * v29;
        if (v29 >= 0x555555555555555)
          result = 0xAAAAAAAAAAAAAAALL;
        else
          result = v28;
        if (!result)
          goto LABEL_61;
        result = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<std::vector<ClipperLib::IntPoint>>>(result);
        if (!result)
          goto LABEL_61;
        v31 = result + 24 * v30;
        v32 = (unint64_t *)(result + 24 * v27);
        *v32 = v13;
        v32[1] = v12;
        v32[2] = 1;
        v20 = v32 + 3;
        v34 = (char *)v9[23];
        v33 = (char *)v9[24];
        if (v33 != v34)
        {
          do
          {
            v35 = *(_OWORD *)(v33 - 24);
            *(v32 - 1) = *((_QWORD *)v33 - 1);
            *(_OWORD *)(v32 - 3) = v35;
            v32 -= 3;
            v33 -= 24;
          }
          while (v33 != v34);
LABEL_54:
          v33 = (char *)v9[23];
          goto LABEL_55;
        }
        goto LABEL_55;
      }
      goto LABEL_60;
    }
    goto LABEL_13;
  }
  v17 = v8[6];
  if (0x8E38E38E38E38E39 * ((v8[7] - v17) >> 3) <= v13)
    goto LABEL_61;
  v18 = (_OWORD *)(v17 + 72 * v13);
  v15 = *(unint64_t **)(result + 192);
  v19 = *(_QWORD *)(result + 200);
  if ((unint64_t)v15 >= v19)
  {
    v43 = *(_QWORD *)(result + 184);
    v44 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v15 - v43) >> 3);
    v45 = v44 + 1;
    if (v44 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - v43) >> 3);
      if (2 * v46 > v45)
        v45 = 2 * v46;
      if (v46 >= 0x555555555555555)
        result = 0xAAAAAAAAAAAAAAALL;
      else
        result = v45;
      if (!result)
        goto LABEL_61;
      result = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<std::vector<ClipperLib::IntPoint>>>(result);
      if (!result)
        goto LABEL_61;
      v31 = result + 24 * v47;
      v32 = (unint64_t *)(result + 24 * v44);
      *v32 = v13;
      *(_OWORD *)(v32 + 1) = *v18;
      v20 = v32 + 3;
      v48 = (char *)v9[23];
      v33 = (char *)v9[24];
      if (v33 != v48)
      {
        do
        {
          v49 = *(_OWORD *)(v33 - 24);
          *(v32 - 1) = *((_QWORD *)v33 - 1);
          *(_OWORD *)(v32 - 3) = v49;
          v32 -= 3;
          v33 -= 24;
        }
        while (v33 != v48);
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    goto LABEL_60;
  }
  if (v15)
  {
    *v15 = v13;
    *(_OWORD *)(v15 + 1) = *v18;
    goto LABEL_18;
  }
LABEL_61:
  __break(1u);
  return result;
}

void sub_184DC062C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ObjectRef<CGPDFPageLayout *>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

void CGPDFSelectionCreateIntersectingRect(uint64_t a1, double a2, double a3, double a4, double a5)
{
  if (a1)
    CGPDFSelectionCreateInRect(a1, a2, a3, a4, a5);
}

void CGPDFSelectionCreateInRect(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __double2 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  CGFloat x;
  double y;
  CGFloat width;
  double height;
  double v22;
  double v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t *v34;
  char *v35;
  char *v36;
  unint64_t *v37;
  __int128 v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t *v49;
  char *v50;
  char *v51;
  unint64_t *v52;
  __int128 v53;
  unint64_t v54;
  _BYTE v55[32];
  CGAffineTransform v56;
  CGAffineTransform v57;
  CGPoint v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;

  *(double *)&v55[16] = a4;
  *(double *)&v55[24] = a5;
  *(double *)v55 = a2;
  *(double *)&v55[8] = a3;
  if (!a1)
    return;
  CGPDFPageCopyPageLayoutWithCTLD(a1, 1);
  if (!v5)
    return;
  v6 = (_QWORD *)v5;
  v7 = (_QWORD *)CGPDFSelectionCreateWithPage(*(const void **)(v5 + 16));
  v8 = v6[6];
  if (v6[7] == v8)
  {
LABEL_56:
    Selection::Normalize((Selection *)(v7 + 21));
    CFRelease(v6);
    return;
  }
  v9 = 0;
  v54 = 0;
  while (1)
  {
    v10 = v8 + 72 * v9;
    v11 = __sincos_stret(*(double *)(v10 + 56));
    v59 = *(CGRect *)(v10 + 24);
    v56.a = v11.__cosval;
    v56.b = v11.__sinval;
    v56.c = -v11.__sinval;
    v56.d = v11.__cosval;
    v56.tx = 0.0;
    v56.ty = 0.0;
    v64 = CGRectApplyAffineTransform(v59, &v56);
    if (CGRectIntersectsRect(*(CGRect *)v55, v64))
    {
      v12 = *(_QWORD *)(v10 + 8);
      if (v12 >= 1)
        break;
    }
LABEL_55:
    ++v9;
    v8 = v6[6];
    if (v9 >= 0x8E38E38E38E38E39 * ((v6[7] - v8) >> 3))
      goto LABEL_56;
  }
  v13 = 0;
  v14 = *(_QWORD *)v10;
  v15 = -1;
  v16 = *(_QWORD *)v10;
  do
  {
    v17 = v6[15];
    if (v16 >= (v6[16] - v17) >> 5)
      goto LABEL_59;
    v60 = *(CGRect *)(v17 + 32 * v16);
    v57.a = v11.__cosval;
    v57.b = v11.__sinval;
    v57.c = -v11.__sinval;
    v57.d = v11.__cosval;
    v57.tx = 0.0;
    v57.ty = 0.0;
    v61 = CGRectApplyAffineTransform(v60, &v57);
    x = v61.origin.x;
    y = v61.origin.y;
    width = v61.size.width;
    height = v61.size.height;
    if (v61.size.width < 0.0 || v61.size.height < 0.0)
    {
      v62 = CGRectStandardize(v61);
      v23 = v62.origin.x + v62.size.width * 0.5;
      v62.origin.x = x;
      v62.origin.y = y;
      v62.size.width = width;
      v22 = 0.5;
      v62.size.height = height;
      v63 = CGRectStandardize(v62);
      y = v63.origin.y;
      height = v63.size.height;
    }
    else
    {
      v22 = 0.5;
      v23 = v61.origin.x + v61.size.width * 0.5;
    }
    v58.y = y + height * v22;
    v58.x = v23;
    if (CGRectContainsPoint(*(CGRect *)v55, v58))
    {
      if (v15 != -1)
      {
        if (v13 + v15 == v16)
        {
          ++v13;
          goto LABEL_35;
        }
        v24 = (unint64_t *)v7[24];
        v25 = v7[25];
        if ((unint64_t)v24 >= v25)
        {
          v27 = v7[23];
          v28 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v24 - v27) >> 3);
          v29 = v28 + 1;
          if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_58;
          v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - v27) >> 3);
          if (2 * v30 > v29)
            v29 = 2 * v30;
          if (v30 >= 0x555555555555555)
            v31 = 0xAAAAAAAAAAAAAAALL;
          else
            v31 = v29;
          if (!v31)
            goto LABEL_59;
          v32 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<std::vector<ClipperLib::IntPoint>>>(v31);
          if (!v32)
            goto LABEL_59;
          v34 = (unint64_t *)&v32[24 * v28];
          *v34 = v54;
          v34[1] = v15;
          v34[2] = v13;
          v36 = (char *)v7[23];
          v35 = (char *)v7[24];
          v37 = v34;
          if (v35 != v36)
          {
            do
            {
              v38 = *(_OWORD *)(v35 - 24);
              *(v37 - 1) = *((_QWORD *)v35 - 1);
              *(_OWORD *)(v37 - 3) = v38;
              v37 -= 3;
              v35 -= 24;
            }
            while (v35 != v36);
            v35 = (char *)v7[23];
          }
          v26 = v34 + 3;
          v7[23] = v37;
          v7[24] = v34 + 3;
          v7[25] = &v32[24 * v33];
          if (v35)
            operator delete(v35);
        }
        else
        {
          if (!v24)
            goto LABEL_59;
          *v24 = v54;
          v24[1] = v15;
          v26 = v24 + 3;
          v24[2] = v13;
        }
        v7[24] = v26;
        v14 = *(_QWORD *)v10;
        v12 = *(_QWORD *)(v10 + 8);
      }
      v15 = v16;
      v13 = 1;
      v54 = v9;
    }
LABEL_35:
    ++v16;
  }
  while ((uint64_t)v16 < (uint64_t)(v12 + v14));
  if (v15 == -1)
    goto LABEL_55;
  v39 = (unint64_t *)v7[24];
  v40 = v7[25];
  if ((unint64_t)v39 >= v40)
  {
    v42 = v7[23];
    v43 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v39 - v42) >> 3);
    v44 = v43 + 1;
    if (v43 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_58:
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - v42) >> 3);
    if (2 * v45 > v44)
      v44 = 2 * v45;
    if (v45 >= 0x555555555555555)
      v46 = 0xAAAAAAAAAAAAAAALL;
    else
      v46 = v44;
    if (v46)
    {
      v47 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<std::vector<ClipperLib::IntPoint>>>(v46);
      if (v47)
      {
        v49 = (unint64_t *)&v47[24 * v43];
        *v49 = v54;
        v49[1] = v15;
        v49[2] = v13;
        v51 = (char *)v7[23];
        v50 = (char *)v7[24];
        v52 = v49;
        if (v50 != v51)
        {
          do
          {
            v53 = *(_OWORD *)(v50 - 24);
            *(v52 - 1) = *((_QWORD *)v50 - 1);
            *(_OWORD *)(v52 - 3) = v53;
            v52 -= 3;
            v50 -= 24;
          }
          while (v50 != v51);
          v50 = (char *)v7[23];
        }
        v41 = v49 + 3;
        v7[23] = v52;
        v7[24] = v49 + 3;
        v7[25] = &v47[24 * v48];
        if (v50)
          operator delete(v50);
        goto LABEL_54;
      }
    }
  }
  else if (v39)
  {
    *v39 = v54;
    v39[1] = v15;
    v41 = v39 + 3;
    v39[2] = v13;
LABEL_54:
    v7[24] = v41;
    goto LABEL_55;
  }
LABEL_59:
  __break(1u);
}

void sub_184DC0B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  applesauce::CF::ObjectRef<CGPDFPageLayout *>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

void CGPDFSelectionCreateInPath(uint64_t a1, CGPathRef path)
{
  CGRect PathBoundingBox;

  if (a1)
  {
    PathBoundingBox = CGPathGetPathBoundingBox(path);
    CGPDFSelectionCreateInRect(a1, PathBoundingBox.origin.x, PathBoundingBox.origin.y, PathBoundingBox.size.width, PathBoundingBox.size.height);
  }
}

char *CGPDFSelectionCreateForQuadPoints(uint64_t a1, double *a2, int a3)
{
  CFTypeRef v5;
  const void *v6;
  char *SelectionForQuadPoints;

  if (!a1)
    return 0;
  v5 = CGPDFPageCopyLayout(a1);
  if (!v5)
    return 0;
  v6 = v5;
  SelectionForQuadPoints = CGPDFLayoutCreateSelectionForQuadPoints((uint64_t)v5, a2, a3);
  CFRelease(v6);
  return SelectionForQuadPoints;
}

void sub_184DC0BD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ObjectRef<CGPDFLayout *>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

unint64_t CGPDFSelectionCreateForEntirePage(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t result;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  __int128 v18;

  if (!a1)
    return 0;
  CGPDFPageCopyPageLayoutWithCTLD(a1, 1);
  if (!v1)
    return 0;
  v2 = (_QWORD *)v1;
  result = CGPDFSelectionCreateWithPage(*(const void **)(v1 + 16));
  v4 = (_QWORD *)result;
  v5 = (uint64_t)(v2[16] - v2[15]) >> 5;
  v6 = *(_QWORD **)(result + 192);
  v7 = *(_QWORD *)(result + 200);
  if ((unint64_t)v6 >= v7)
  {
    v9 = *(_QWORD *)(result + 184);
    v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - v9) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v9) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      result = 0xAAAAAAAAAAAAAAALL;
    else
      result = v11;
    if (result)
    {
      result = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<std::vector<ClipperLib::IntPoint>>>(result);
      if (result)
      {
        v14 = result + 24 * v13;
        v15 = (_QWORD *)(result + 24 * v10);
        *v15 = 0;
        v15[1] = 0;
        v15[2] = v5;
        v8 = v15 + 3;
        v17 = (char *)v4[23];
        v16 = (char *)v4[24];
        if (v16 != v17)
        {
          do
          {
            v18 = *(_OWORD *)(v16 - 24);
            *(v15 - 1) = *((_QWORD *)v16 - 1);
            *(_OWORD *)(v15 - 3) = v18;
            v15 -= 3;
            v16 -= 24;
          }
          while (v16 != v17);
          v16 = (char *)v4[23];
        }
        v4[23] = v15;
        v4[24] = v8;
        v4[25] = v14;
        if (v16)
          operator delete(v16);
        goto LABEL_20;
      }
    }
  }
  else if (v6)
  {
    *v6 = 0;
    v6[1] = 0;
    v8 = v6 + 3;
    v6[2] = v5;
LABEL_20:
    v4[24] = v8;
    CFRelease(v2);
    return (unint64_t)v4;
  }
  __break(1u);
  return result;
}

void sub_184DC0D40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ObjectRef<CGPDFPageLayout *>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

_QWORD *CGPDFSelectionCreateForStringRange(uint64_t a1, CFIndex a2, CFIndex a3)
{
  id *v5;
  id *v6;
  _QWORD *SelectionForStringRange;
  CFRange v9;

  if (!a1)
    return 0;
  CGPDFPageCopyPageLayoutWithCTLD(a1, 1);
  if (!v5)
    return 0;
  v6 = v5;
  v9.location = a2;
  v9.length = a3;
  SelectionForStringRange = PageLayout::CreateSelectionForStringRange(v5 + 2, v9);
  CFRelease(v6);
  return SelectionForStringRange;
}

void sub_184DC0DC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ObjectRef<CGPDFPageLayout *>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t CGPDFSelectionCreateFromSelection(uint64_t a1)
{
  uint64_t cftype;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 *v7;
  void **v9;

  if (!a1)
    return 0;
  if (!CGPDFSelectionGetTypeID::id)
    CGPDFSelectionGetTypeID::id = _CFRuntimeRegisterClass();
  cftype = pdf_create_cftype();
  if (cftype)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
      CFRetain(*(CFTypeRef *)(a1 + 16));
    *(_QWORD *)(cftype + 16) = v3;
    v4 = *(_QWORD *)(a1 + 168);
    if (v4)
      CFRetain(*(CFTypeRef *)(a1 + 168));
    v5 = *(_QWORD *)(a1 + 176);
    *(_OWORD *)(cftype + 184) = 0u;
    *(_QWORD *)(cftype + 168) = v4;
    *(_QWORD *)(cftype + 176) = v5;
    *(_QWORD *)(cftype + 248) = 0;
    *(_OWORD *)(cftype + 216) = 0u;
    *(_OWORD *)(cftype + 232) = 0u;
    *(_OWORD *)(cftype + 200) = 0u;
    *(_BYTE *)(cftype + 256) = 1;
    *(_DWORD *)(cftype + 260) = 0;
    v7 = *(__int128 **)(a1 + 184);
    v6 = *(__int128 **)(a1 + 192);
    v9 = (void **)(cftype + 184);
    while (v7 != v6)
    {
      std::back_insert_iterator<std::vector<std::pair<unsigned long,CFRange>>>::operator=[abi:se180100](&v9, v7);
      v7 = (__int128 *)((char *)v7 + 24);
    }
    *(_BYTE *)(cftype + 160) = 1;
  }
  return cftype;
}

void sub_184DC0EC4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;
  void *v6;
  const void *v7;

  v4 = (void *)v1[29];
  if (v4)
  {
    v1[30] = v4;
    operator delete(v4);
  }
  v5 = (void *)v1[26];
  if (v5)
  {
    v1[27] = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    v1[24] = v6;
    operator delete(v6);
  }
  v7 = (const void *)v1[21];
  if (v7)
    CFRelease(v7);
  _Unwind_Resume(exception_object);
}

uint64_t CGPDFSelectionGetPage(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 168);
  return result;
}

uint64_t CGPDFSelectionCreateContainingSelection()
{
  return 0;
}

uint64_t CGPDFSelectionCreateWithPage(const void *a1)
{
  uint64_t cftype;

  if (!a1)
    return 0;
  if (!CGPDFSelectionGetTypeID::id)
    CGPDFSelectionGetTypeID::id = _CFRuntimeRegisterClass();
  cftype = pdf_create_cftype();
  if (cftype)
  {
    CFRetain(a1);
    *(_QWORD *)(cftype + 16) = a1;
    CFRetain(a1);
    *(_QWORD *)(cftype + 168) = a1;
    *(_OWORD *)(cftype + 176) = 0u;
    *(_OWORD *)(cftype + 192) = 0u;
    *(_OWORD *)(cftype + 208) = 0u;
    *(_OWORD *)(cftype + 224) = 0u;
    *(_OWORD *)(cftype + 240) = 0u;
    *(_BYTE *)(cftype + 256) = 1;
    *(_DWORD *)(cftype + 260) = 0;
    *(_BYTE *)(cftype + 160) = 1;
  }
  return cftype;
}

char *CGPDFSelectionCreateWithIndexSet(const void *a1, _BYTE *a2)
{
  uint64_t Instance;
  CFTypeRef v5;
  const void *v6;
  CFTypeRef v7;
  char *result;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  char *v19;
  char *v20;
  _OWORD *v21;
  __int128 v22;
  int64_t v23;
  char *v24;
  char *v25;
  char *v26;
  size_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  unint64_t v33;
  char *v34;
  void *v35;
  char *v36;
  _OWORD *v37;
  _OWORD *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char **v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  int64_t v50;
  char *v51;
  _OWORD *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  void *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  CFTypeRef cf[2];
  void *v65[2];
  void *v66[2];
  __int128 v67;
  void *__p[2];
  uint64_t v69;
  uint64_t v70;

  if (!a1)
    return 0;
  if (!CGPDFSelectionGetTypeID::id)
    CGPDFSelectionGetTypeID::id = _CFRuntimeRegisterClass();
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return (char *)Instance;
  CFRetain(a1);
  *(_QWORD *)(Instance + 16) = a1;
  if (a2)
  {
    if (a2[40])
      CPIndexSetNormalize((uint64_t)a2);
    v5 = CFRetain(a2);
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)(Instance + 24) = v5;
  *(_QWORD *)(Instance + 32) = 0;
  *(_QWORD *)(Instance + 40) = -1;
  *(_QWORD *)(Instance + 48) = -1;
  *(_OWORD *)(Instance + 56) = 0u;
  *(_OWORD *)(Instance + 72) = 0u;
  *(_QWORD *)(Instance + 88) = 0;
  v69 = 0;
  v67 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v65 = 0u;
  *(_OWORD *)v66 = 0u;
  *(_OWORD *)cf = 0u;
  LOBYTE(v70) = 1;
  HIDWORD(v70) = 0;
  v6 = *(const void **)(Instance + 168);
  *(_QWORD *)(Instance + 168) = 0;
  if (v6)
  {
    CFRelease(v6);
    v7 = cf[1];
  }
  else
  {
    v7 = 0;
  }
  *(_QWORD *)(Instance + 176) = v7;
  if ((CFTypeRef *)(Instance + 168) == cf)
  {
LABEL_84:
    v60 = __p[0];
    *(_QWORD *)(Instance + 256) = v70;
    if (v60)
    {
      __p[1] = v60;
      operator delete(v60);
    }
    if (v66[1])
    {
      *(void **)&v67 = v66[1];
      operator delete(v66[1]);
    }
    if (v65[0])
    {
      v65[1] = v65[0];
      operator delete(v65[0]);
    }
    if (cf[0])
      CFRelease(cf[0]);
    pthread_mutex_init((pthread_mutex_t *)(Instance + 96), 0);
    return (char *)Instance;
  }
  result = *(char **)(Instance + 184);
  v10 = (char *)v65[0];
  v9 = (char *)v65[1];
  v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v65[1] - (char *)v65[0]) >> 3);
  v12 = *(_QWORD *)(Instance + 200);
  if (0xAAAAAAAAAAAAAAABLL * ((v12 - (uint64_t)result) >> 3) < v11)
  {
    if (result)
    {
      *(_QWORD *)(Instance + 192) = result;
      operator delete(result);
      v12 = 0;
      *(_QWORD *)(Instance + 184) = 0;
      *(_QWORD *)(Instance + 192) = 0;
      *(_QWORD *)(Instance + 200) = 0;
    }
    if (v11 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_98;
    v13 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 3);
    v14 = 2 * v13;
    if (2 * v13 <= v11)
      v14 = v11;
    v15 = v13 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v14;
    if (v15 > 0xAAAAAAAAAAAAAAALL)
LABEL_98:
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    result = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<std::vector<ClipperLib::IntPoint>>>(v15);
    *(_QWORD *)(Instance + 184) = result;
    *(_QWORD *)(Instance + 192) = result;
    *(_QWORD *)(Instance + 200) = &result[24 * v16];
    v17 = result;
    while (v10 != v9)
    {
      if (!v17)
        goto LABEL_101;
      v18 = *(_OWORD *)v10;
      *((_QWORD *)v17 + 2) = *((_QWORD *)v10 + 2);
      *v17 = v18;
      v17 = (_OWORD *)((char *)v17 + 24);
      v10 += 24;
    }
    goto LABEL_40;
  }
  v19 = *(char **)(Instance + 192);
  if (0xAAAAAAAAAAAAAAABLL * ((v19 - result) >> 3) >= v11)
  {
    v17 = *(_OWORD **)(Instance + 184);
    while (v10 != v9)
    {
      *(_QWORD *)v17 = *(_QWORD *)v10;
      *(_OWORD *)((char *)v17 + 8) = *(_OWORD *)(v10 + 8);
      v17 = (_OWORD *)((char *)v17 + 24);
      v10 += 24;
    }
LABEL_40:
    v23 = (char *)v17 - result;
    goto LABEL_41;
  }
  v20 = (char *)v65[0] + 8 * ((v19 - result) >> 3);
  if (v19 != result)
  {
    do
    {
      *(_QWORD *)result = *(_QWORD *)v10;
      *(_OWORD *)(result + 8) = *(_OWORD *)(v10 + 8);
      v10 += 24;
      result += 24;
    }
    while (v10 != v20);
    result = *(char **)(Instance + 192);
  }
  v21 = result;
  if (v20 != v9)
  {
    v21 = result;
    while (v21)
    {
      v22 = *(_OWORD *)v20;
      *((_QWORD *)v21 + 2) = *((_QWORD *)v20 + 2);
      *v21 = v22;
      v21 = (_OWORD *)((char *)v21 + 24);
      v20 += 24;
      if (v20 == v9)
        goto LABEL_36;
    }
    goto LABEL_101;
  }
LABEL_36:
  v23 = (char *)v21 - result;
LABEL_41:
  v24 = *(char **)(Instance + 208);
  *(_QWORD *)(Instance + 192) = &result[v23];
  v25 = (char *)v66[1];
  v26 = (char *)v67;
  v27 = v67 - (unint64_t)v66[1];
  v28 = (uint64_t)(v67 - (unint64_t)v66[1]) >> 4;
  v29 = *(_QWORD *)(Instance + 224);
  if (v28 > (v29 - (uint64_t)v24) >> 4)
  {
    if (v24)
    {
      *(_QWORD *)(Instance + 216) = v24;
      operator delete(v24);
      v29 = 0;
      *(_QWORD *)(Instance + 208) = 0;
      *(_QWORD *)(Instance + 216) = 0;
      *(_QWORD *)(Instance + 224) = 0;
    }
    if ((v27 & 0x8000000000000000) != 0)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v30 = v29 >> 3;
    if (v29 >> 3 <= v28)
      v30 = v28;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v31 = 0xFFFFFFFFFFFFFFFLL;
    else
      v31 = v30;
    std::vector<CFRange>::__vallocate[abi:se180100]((_QWORD *)(Instance + 208), v31);
    v24 = *(char **)(Instance + 216);
    goto LABEL_56;
  }
  v32 = *(_BYTE **)(Instance + 216);
  v33 = (v32 - v24) >> 4;
  if (v33 >= v28)
  {
LABEL_56:
    if (v26 == v25)
      goto LABEL_59;
    v35 = v24;
    v36 = v25;
    goto LABEL_58;
  }
  v34 = (char *)v66[1] + 16 * v33;
  if (v32 != v24)
  {
    memmove(v24, v66[1], v32 - v24);
    v24 = *(char **)(Instance + 216);
  }
  v27 = v26 - v34;
  if (v26 != v34)
  {
    v35 = v24;
    v36 = v34;
LABEL_58:
    memmove(v35, v36, v27);
  }
LABEL_59:
  result = *(char **)(Instance + 232);
  *(_QWORD *)(Instance + 216) = &v24[v27];
  v38 = __p[0];
  v37 = __p[1];
  v39 = 0xCCCCCCCCCCCCCCCDLL * (((char *)__p[1] - (char *)__p[0]) >> 4);
  v40 = *(_QWORD *)(Instance + 248);
  if (0xCCCCCCCCCCCCCCCDLL * ((v40 - (uint64_t)result) >> 4) >= v39)
  {
    v44 = (char **)(Instance + 240);
    v51 = *(char **)(Instance + 240);
    if (0xCCCCCCCCCCCCCCCDLL * ((v51 - result) >> 4) < v39)
    {
      v52 = (char *)__p[0] + 16 * ((v51 - result) >> 4);
      if (v51 != result)
      {
        do
        {
          v53 = v38[1];
          *(_OWORD *)result = *v38;
          *((_OWORD *)result + 1) = v53;
          v54 = v38[2];
          v55 = v38[4];
          *((_OWORD *)result + 3) = v38[3];
          *((_OWORD *)result + 4) = v55;
          *((_OWORD *)result + 2) = v54;
          v38 += 5;
          result += 80;
        }
        while (v38 != v52);
        result = *v44;
      }
      v56 = result;
      if (v52 != v37)
      {
        v56 = result;
        while (v56)
        {
          *(_OWORD *)v56 = *v52;
          v57 = v52[1];
          v58 = v52[2];
          v59 = v52[4];
          *((_OWORD *)v56 + 3) = v52[3];
          *((_OWORD *)v56 + 4) = v59;
          *((_OWORD *)v56 + 1) = v57;
          *((_OWORD *)v56 + 2) = v58;
          v52 += 5;
          v56 += 80;
          if (v52 == v37)
            goto LABEL_82;
        }
        goto LABEL_101;
      }
LABEL_82:
      v50 = v56 - result;
      goto LABEL_83;
    }
    v46 = result;
    while (v38 != v37)
    {
      v61 = v38[1];
      *(_OWORD *)v46 = *v38;
      *((_OWORD *)v46 + 1) = v61;
      v62 = v38[2];
      v63 = v38[4];
      *((_OWORD *)v46 + 3) = v38[3];
      *((_OWORD *)v46 + 4) = v63;
      *((_OWORD *)v46 + 2) = v62;
      v46 += 80;
      v38 += 5;
    }
LABEL_73:
    v50 = v46 - result;
LABEL_83:
    *v44 = &result[v50];
    goto LABEL_84;
  }
  if (result)
  {
    *(_QWORD *)(Instance + 240) = result;
    operator delete(result);
    v40 = 0;
    *(_QWORD *)(Instance + 232) = 0;
    *(_QWORD *)(Instance + 240) = 0;
    *(_QWORD *)(Instance + 248) = 0;
  }
  if (v39 > 0x333333333333333)
    goto LABEL_99;
  v41 = 0xCCCCCCCCCCCCCCCDLL * (v40 >> 4);
  v42 = 2 * v41;
  if (2 * v41 <= v39)
    v42 = v39;
  v43 = v41 >= 0x199999999999999 ? 0x333333333333333 : v42;
  if (v43 > 0x333333333333333)
LABEL_99:
    std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
  result = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<std::pair<CGRect,CGAffineTransform>>>(v43);
  *(_QWORD *)(Instance + 240) = result;
  v44 = (char **)(Instance + 240);
  *(_QWORD *)(Instance + 232) = result;
  *(_QWORD *)(Instance + 248) = &result[80 * v45];
  v46 = result;
  if (v38 == v37)
    goto LABEL_73;
  v46 = result;
  while (v46)
  {
    *(_OWORD *)v46 = *v38;
    v47 = v38[1];
    v48 = v38[2];
    v49 = v38[4];
    *((_OWORD *)v46 + 3) = v38[3];
    *((_OWORD *)v46 + 4) = v49;
    *((_OWORD *)v46 + 1) = v47;
    *((_OWORD *)v46 + 2) = v48;
    v38 += 5;
    v46 += 80;
    if (v38 == v37)
      goto LABEL_73;
  }
LABEL_101:
  __break(1u);
  return result;
}

void sub_184DC1570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Selection::~Selection((Selection *)&a9);
  _Unwind_Resume(a1);
}

void Selection::~Selection(Selection *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 6) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 3) = v4;
    operator delete(v4);
  }
  if (*(_QWORD *)this)
    CFRelease(*(CFTypeRef *)this);
}

BOOL CGPDFSelectionIsOfType(uint64_t a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t i;
  uint64_t Range;
  uint64_t v11;

  if (a1 && (v4 = CGPDFPageCopyLayout(*(_QWORD *)(a1 + 16))) != 0)
  {
    v5 = v4;
    v6 = *(_QWORD *)(a1 + 24);
    if (!v6)
      goto LABEL_12;
    if (*(_BYTE *)(v6 + 40))
      CPIndexSetNormalize(*(_QWORD *)(a1 + 24));
    v7 = *(_QWORD *)(v6 + 16);
    if (v7)
    {
      v8 = 0;
      for (i = 0; i != v7; v8 = i >= v7)
      {
        Range = CPIndexSetGetRange(*(_QWORD *)(a1 + 24), i);
        if ((CGPDFLayoutRangeIsOfType(v5, Range, v11, a2) & 1) == 0)
          break;
        ++i;
      }
    }
    else
    {
LABEL_12:
      v8 = 1;
    }
    CFRelease(v5);
  }
  else
  {
    return 0;
  }
  return v8;
}

void sub_184DC16BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ObjectRef<CGPDFLayout *>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

double CGPDFSelectionGetBounds(uint64_t a1)
{
  CGFloat width;
  uint64_t v3;
  uint64_t v4;
  double x;
  CGFloat y;
  CGFloat height;
  __int128 v8;
  CGAffineTransform v10;
  CGRect v11;
  CGRect v12;
  CGRect v13;
  CGRect v14;

  width = 0.0;
  if (!a1)
    return INFINITY;
  Selection::cacheRectsAndTransforms((os_unfair_lock_s *)(a1 + 168));
  v4 = *(_QWORD *)(a1 + 232);
  v3 = *(_QWORD *)(a1 + 240);
  if (v4 == v3)
    return INFINITY;
  x = INFINITY;
  y = INFINITY;
  height = 0.0;
  do
  {
    v11 = *(CGRect *)v4;
    v8 = *(_OWORD *)(v4 + 48);
    *(_OWORD *)&v10.a = *(_OWORD *)(v4 + 32);
    *(_OWORD *)&v10.c = v8;
    *(_OWORD *)&v10.tx = *(_OWORD *)(v4 + 64);
    v14 = CGRectApplyAffineTransform(v11, &v10);
    v12.origin.x = x;
    v12.origin.y = y;
    v12.size.width = width;
    v12.size.height = height;
    v13 = CGRectUnion(v12, v14);
    x = v13.origin.x;
    y = v13.origin.y;
    width = v13.size.width;
    height = v13.size.height;
    v4 += 80;
  }
  while (v4 != v3);
  return x;
}

uint64_t CGPDFSelectionGetLength(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  if (result)
  {
    v1 = *(_QWORD *)(result + 24);
    if (!v1)
      return 0;
    if (*(_BYTE *)(v1 + 40))
      CPIndexSetNormalize(*(_QWORD *)(result + 24));
    v2 = *(_QWORD *)(v1 + 16);
    if (v2 >= 1)
    {
      result = 0;
      v3 = (uint64_t *)(*(_QWORD *)(v1 + 32) + 8);
      do
      {
        v4 = *v3;
        v3 += 2;
        result += v4;
        --v2;
      }
      while (v2);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CGPDFSelectionSetClientProperty(uint64_t result, uint64_t a2)
{
  if (result)
    *(_QWORD *)(result + 176) = a2;
  return result;
}

uint64_t CGPDFSelectionGetClientProperty(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 176);
  return result;
}

void CGPDFSelectionGetTextMatrixAtIndex(uint64_t a1@<X0>, uint64_t a2@<X1>, CGAffineTransform *a3@<X8>)
{
  uint64_t LayoutIndex;
  CFTypeRef v6;

  *a3 = CGAffineTransformIdentity;
  if (a1)
  {
    LayoutIndex = CGPDFSelectionGetLayoutIndex((CGPDFSelection *)a1, a2);
    v6 = CGPDFPageCopyLayout(*(_QWORD *)(a1 + 16));
    CGPDFLayoutGetTextMatrix((uint64_t)v6, LayoutIndex, (uint64_t)a3);
    if (v6)
      CFRelease(v6);
  }
}

uint64_t CGPDFSelectionGetLayoutIndex(CGPDFSelection *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t Range;
  uint64_t v8;

  v2 = *((_QWORD *)a1 + 3);
  if (!v2)
    return 0;
  if (*(_BYTE *)(v2 + 40))
    CPIndexSetNormalize(*((_QWORD *)a1 + 3));
  v5 = *(_QWORD *)(v2 + 16);
  if (v5 < 1)
    return 0;
  v6 = 0;
  while (1)
  {
    Range = CPIndexSetGetRange(*((_QWORD *)a1 + 3), v6);
    if (a2 <= v8)
      break;
    ++v6;
    a2 -= v8;
    if (v5 == v6)
      return 0;
  }
  return Range + a2;
}

CGPDFSelection *CGPDFSelectionGetCGFontAtIndex(CGPDFSelection *a1, uint64_t a2)
{
  CGPDFSelection *CGFont;
  uint64_t LayoutIndex;
  CFTypeRef v4;

  CGFont = a1;
  if (a1)
  {
    LayoutIndex = CGPDFSelectionGetLayoutIndex(a1, a2);
    v4 = CGPDFPageCopyLayout(*((_QWORD *)CGFont + 2));
    CGFont = (CGPDFSelection *)CGPDFLayoutGetCGFont((uint64_t)v4, LayoutIndex);
    if (v4)
      CFRelease(v4);
  }
  return CGFont;
}

CGPDFSelection *CGPDFSelectionGetGlyphAtIndex(CGPDFSelection *a1, uint64_t a2)
{
  CGPDFSelection *Glyph;
  uint64_t LayoutIndex;
  CFTypeRef v4;

  Glyph = a1;
  if (a1)
  {
    LayoutIndex = CGPDFSelectionGetLayoutIndex(a1, a2);
    v4 = CGPDFPageCopyLayout(*((_QWORD *)Glyph + 2));
    Glyph = (CGPDFSelection *)CGPDFLayoutGetGlyph((uint64_t)v4, LayoutIndex);
    if (v4)
      CFRelease(v4);
  }
  return Glyph;
}

void CGPDFSelectionBufferUnicodeAndCharacterBounds(uint64_t a1, _WORD *a2, uint64_t a3)
{
  CFTypeRef v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t Range;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1)
  {
    v6 = CGPDFPageCopyLayout(*(_QWORD *)(a1 + 16));
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)(a1 + 24);
      if (v8)
      {
        if (*(_BYTE *)(v8 + 40))
          CPIndexSetNormalize(*(_QWORD *)(a1 + 24));
        v9 = *(_QWORD *)(v8 + 16);
        if (v9 >= 1)
        {
          v10 = 0;
          v11 = a2;
          v12 = a3;
          do
          {
            Range = CPIndexSetGetRange(*(_QWORD *)(a1 + 24), v10);
            v15 = v14;
            CGPDFLayoutBufferUnicodeAndBoundsForRange((uint64_t)v7, v11, v12, Range, v14);
            if (a2)
              v16 = v15;
            else
              v16 = 0;
            v11 += v16;
            if (a3)
              v17 = v15;
            else
              v17 = 0;
            v12 += 32 * v17;
            ++v10;
          }
          while (v9 != v10);
        }
      }
      CFRelease(v7);
    }
  }
}

os_unfair_lock_s *CGPDFSelectionGetNumberOfRectsAndTransforms(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;

  if (result)
  {
    v1 = result;
    Selection::cacheRectsAndTransforms(result + 42);
    return (os_unfair_lock_s *)(0xCCCCCCCCCCCCCCCDLL
                              * ((uint64_t)(*(_QWORD *)&v1[60]._os_unfair_lock_opaque
                                         - *(_QWORD *)&v1[58]._os_unfair_lock_opaque) >> 4));
  }
  return result;
}

uint64_t CGPDFSelectionGetRectAndTransform(uint64_t a1, unint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v8;
  _OWORD *v9;
  const CGAffineTransform *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (a1)
  {
    Selection::cacheRectsAndTransforms((os_unfair_lock_s *)(a1 + 168));
    v8 = *(_QWORD *)(a1 + 232);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 240) - v8) >> 4) <= a2)
    {
      *(CGRect *)a3 = CGRectNull;
      v10 = &CGAffineTransformIdentity;
    }
    else
    {
      v9 = (_OWORD *)(v8 + 80 * a2);
      v11 = *v9;
      v12 = v9[1];
      v10 = (const CGAffineTransform *)(v9 + 2);
      *(_OWORD *)a3 = v11;
      *(_OWORD *)(a3 + 16) = v12;
    }
    v13 = *(_OWORD *)&v10->a;
    v14 = *(_OWORD *)&v10->tx;
    a4[1] = *(_OWORD *)&v10->c;
    a4[2] = v14;
    *a4 = v13;
  }
  return 0;
}

void CGPDFSelectionEnumerateRectsAndTransforms(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  uint64_t v12;
  _QWORD *v13;
  const CGAffineTransform *v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[3];

  v3 = a2;
  if (a1)
  {
    Selection::cacheRectsAndTransforms((os_unfair_lock_s *)(a1 + 168));
    v4 = *(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232);
    if (v4 >= 1)
    {
      v5 = 0;
      v6 = 0;
      v7 = v4 / 80;
      do
      {
        Selection::cacheRectsAndTransforms((os_unfair_lock_s *)(a1 + 168));
        v12 = *(_QWORD *)(a1 + 232);
        if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 240) - v12) >> 4) <= v6)
        {
          v11.n128_u64[0] = 0;
          v9.n128_u64[0] = 0x7FF0000000000000;
          v10.n128_u64[0] = 0;
          v8.n128_u64[0] = 0x7FF0000000000000;
          v14 = &CGAffineTransformIdentity;
        }
        else
        {
          v13 = (_QWORD *)(v12 + v5);
          v8.n128_u64[0] = *v13;
          v9.n128_u64[0] = v13[1];
          v10.n128_u64[0] = v13[2];
          v11.n128_u64[0] = v13[3];
          v14 = (const CGAffineTransform *)(v13 + 4);
        }
        v15 = *(_OWORD *)&v14->a;
        v16 = *(_OWORD *)&v14->tx;
        v17[1] = *(_OWORD *)&v14->c;
        v17[2] = v16;
        v17[0] = v15;
        (*((void (**)(id, _OWORD *, _QWORD, __n128, __n128, __n128, __n128))v3 + 2))(v3, v17, 0, v8, v9, v10, v11);
        ++v6;
        v5 += 80;
      }
      while (v7 != v6);
    }
  }

}

void sub_184DC1CB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t CGPDFSelectionGetRangeForRectIndex(uint64_t result, unint64_t a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *(_QWORD *)(result + 184);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(result + 192) - v2) >> 3) <= a2)
      return -1;
    else
      return *(_QWORD *)(v2 + 24 * a2 + 8);
  }
  return result;
}

uint64_t *CGPDFSelectionCreateAttributedString(uint64_t *a1)
{
  uint64_t *AttributedStringForStringRanges;
  const void *v2;
  const void *v3;
  uint64_t v4;
  _QWORD v6[2];

  AttributedStringForStringRanges = a1;
  if (a1)
  {
    if (a1[23] == a1[24])
    {
      return 0;
    }
    else
    {
      Selection::cacheStringRanges((Selection *)(a1 + 21));
      CGPDFPageCopyPageLayoutWithCTLD(AttributedStringForStringRanges[21], 1);
      v3 = v2;
      v4 = (AttributedStringForStringRanges[27] - AttributedStringForStringRanges[26]) >> 4;
      v6[0] = AttributedStringForStringRanges[26];
      v6[1] = v4;
      AttributedStringForStringRanges = (uint64_t *)PageLayout::CreateAttributedStringForStringRanges((uint64_t)v2 + 16, (uint64_t)v6);
      if (v3)
        CFRelease(v3);
    }
  }
  return AttributedStringForStringRanges;
}

void sub_184DC1D98(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t CGPDFSelectionGetFirstIndex(uint64_t a1)
{
  uint64_t v1;

  if (!a1)
    return -1;
  v1 = *(_QWORD *)(a1 + 184);
  if (*(_QWORD *)(a1 + 192) == v1)
    return -1;
  else
    return *(_QWORD *)(v1 + 8);
}

uint64_t CGPDFSelectionGetLastIndex(uint64_t a1)
{
  uint64_t v1;

  if (!a1)
    return -1;
  v1 = *(_QWORD *)(a1 + 192);
  if (v1 == *(_QWORD *)(a1 + 184))
    return -1;
  else
    return *(_QWORD *)(v1 - 8) + *(_QWORD *)(v1 - 16);
}

uint64_t CGPDFSelectionGetStartIndex(uint64_t a1)
{
  uint64_t v1;

  if (!a1)
    return -1;
  v1 = *(_QWORD *)(a1 + 184);
  if (*(_QWORD *)(a1 + 192) == v1)
    return -1;
  else
    return *(_QWORD *)(v1 + 8);
}

uint64_t CGPDFSelectionGetEndIndex(uint64_t a1)
{
  if (a1)
    return CGPDFSelectionGetLastIndex(a1);
  else
    return -1;
}

void CGPDFSelectionGetStartCursorXPosition(CGPDFSelection *a1, BOOL *a2)
{
  CGPDFSelectionGetCursorXPosition(a1, 1, a2);
}

void CGPDFSelectionGetCursorXPosition(CGPDFSelection *a1, int a2, BOOL *a3)
{
  double v3;
  double v4;
  CGFloat v5;
  CGFloat v6;
  uint64_t v10;
  unint64_t LastIndex;
  _QWORD *v12;
  uint64_t v13;
  CGFloat *v14;
  _BOOL4 v15;
  CGRect v16;
  CGRect v17;

  v6 = 0.0;
  if (a1)
  {
    if (a2)
    {
      v10 = *((_QWORD *)a1 + 23);
      if (*((_QWORD *)a1 + 24) == v10)
        return;
      LastIndex = *(_QWORD *)(v10 + 8);
    }
    else
    {
      LastIndex = CGPDFSelectionGetLastIndex((uint64_t)a1);
    }
    if (LastIndex != -1)
    {
      *a3 = 0;
      CGPDFPageCopyPageLayoutWithCTLD(*((_QWORD *)a1 + 2), 1);
      if (v12)
      {
        if (LastIndex < (uint64_t)(v12[16] - v12[15]) >> 5)
        {
          v13 = v12[18];
          if (LastIndex >= (v12[19] - v13) >> 5)
          {
            __break(1u);
            return;
          }
          v14 = (CGFloat *)(v13 + 32 * LastIndex);
          v6 = *v14;
          v5 = v14[1];
          v3 = v14[2];
          v4 = v14[3];
        }
        CFRelease(v12);
      }
      v15 = v3 < 0.0;
      if (v4 < 0.0)
        v15 = 1;
      if (a2)
      {
        if (v15)
        {
          v16.origin.x = v6;
          v16.origin.y = v5;
          v16.size.width = v3;
          v16.size.height = v4;
          CGRectStandardize(v16);
        }
      }
      else if (v15)
      {
        v17.origin.x = v6;
        v17.origin.y = v5;
        v17.size.width = v3;
        v17.size.height = v4;
        CGRectStandardize(v17);
      }
    }
  }
}

void CGPDFSelectionGetEndCursorXPosition(CGPDFSelection *a1, BOOL *a2)
{
  CGPDFSelectionGetCursorXPosition(a1, 0, a2);
}

uint64_t CGPDFSelectionGetNumberOfStringRanges(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    Selection::cacheStringRanges((Selection *)(result + 168));
    return (uint64_t)(*(_QWORD *)(v1 + 216) - *(_QWORD *)(v1 + 208)) >> 4;
  }
  return result;
}

uint64_t CGPDFSelectionGetStringRange(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;

  if (!a1)
    return -1;
  if (a1[23] == a1[24])
    return -1;
  Selection::cacheStringRanges((Selection *)(a1 + 21));
  v4 = a1[26];
  if (a2 >= (a1[27] - v4) >> 4)
    return -1;
  return *(_QWORD *)(v4 + 16 * a2);
}

void CGPDFSelectionAddSelection(uint64_t a1, uint64_t a2)
{
  __int128 *v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  void **p_p;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  _QWORD *v36;
  unint64_t v37;
  __int128 *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  __int128 *v52;
  void *__p;
  uint64_t *v54;
  uint64_t v55;
  void **v56;
  void **v57;

  if (!a1 || a1 == a2 || *(_QWORD *)(a2 + 184) == *(_QWORD *)(a2 + 192))
    return;
  __p = 0;
  v54 = 0;
  v3 = *(__int128 **)(a1 + 192);
  v4 = *(__int128 **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  v6 = *(_QWORD *)(a2 + 184);
  v5 = *(_QWORD *)(a2 + 192);
  p_p = &__p;
  v55 = 0;
  v56 = &__p;
  v52 = v4;
  if (v4 == v3)
  {
LABEL_16:
    v57 = p_p;
    while (v6 != v5)
    {
      std::back_insert_iterator<std::vector<std::pair<unsigned long,CFRange>>>::operator=[abi:se180100](&v57, (__int128 *)v6);
      v6 += 24;
    }
    goto LABEL_22;
  }
  v8 = v4;
  while (v6 != v5)
  {
    if (*(_QWORD *)v6 == *(_QWORD *)v8)
    {
      v9 = *(_QWORD *)(v6 + 8);
      v10 = *((_QWORD *)v8 + 1);
      v11 = v9 < v10;
      if (v9 == v10)
        v11 = *(_QWORD *)(v6 + 16) < *((_QWORD *)v8 + 2);
      if (v11)
      {
LABEL_13:
        std::back_insert_iterator<std::vector<std::pair<unsigned long,CFRange>>>::operator=[abi:se180100](&v56, (__int128 *)v6);
        v6 += 24;
        goto LABEL_14;
      }
    }
    else if (*(_QWORD *)v6 < *(_QWORD *)v8)
    {
      goto LABEL_13;
    }
    std::back_insert_iterator<std::vector<std::pair<unsigned long,CFRange>>>::operator=[abi:se180100](&v56, v8);
    v8 = (__int128 *)((char *)v8 + 24);
LABEL_14:
    if (v8 == v3)
    {
      p_p = v56;
      goto LABEL_16;
    }
  }
  v57 = v56;
  while (v8 != v3)
  {
    std::back_insert_iterator<std::vector<std::pair<unsigned long,CFRange>>>::operator=[abi:se180100](&v57, v8);
    v8 = (__int128 *)((char *)v8 + 24);
  }
LABEL_22:
  if (__p == v54)
    goto LABEL_71;
  v13 = *(_QWORD *)__p;
  v12 = *((_QWORD *)__p + 1);
  v14 = *((_QWORD *)__p + 2);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 260));
  v15 = v54;
  v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (_BYTE *)__p) >> 3);
  if (v16 >= 1)
    v16 = 1;
  v17 = (uint64_t *)((char *)__p + 24 * v16);
  if (v17 != v54)
  {
    do
    {
      v18 = v14 + v12;
      v19 = v17[1];
      if (v14 + v12 >= v19)
      {
        v23 = v17[2] + v19;
        if (v18 <= v23)
          v18 = v23;
        v14 = v18 - v12;
      }
      else
      {
        v20 = *(_QWORD **)(a1 + 192);
        v21 = *(_QWORD *)(a1 + 200);
        if ((unint64_t)v20 >= v21)
        {
          v24 = *(_QWORD *)(a1 + 184);
          v25 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v20 - v24) >> 3);
          v26 = v25 + 1;
          if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
          v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - v24) >> 3);
          if (2 * v27 > v26)
            v26 = 2 * v27;
          if (v27 >= 0x555555555555555)
            v28 = 0xAAAAAAAAAAAAAAALL;
          else
            v28 = v26;
          if (!v28)
            goto LABEL_71;
          v29 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<std::vector<ClipperLib::IntPoint>>>(v28);
          if (!v29)
            goto LABEL_71;
          v31 = &v29[24 * v25];
          *(_QWORD *)v31 = v13;
          *((_QWORD *)v31 + 1) = v12;
          *((_QWORD *)v31 + 2) = v14;
          v33 = *(char **)(a1 + 184);
          v32 = *(char **)(a1 + 192);
          v34 = v31;
          if (v32 != v33)
          {
            do
            {
              v35 = *(_OWORD *)(v32 - 24);
              *((_QWORD *)v34 - 1) = *((_QWORD *)v32 - 1);
              *(_OWORD *)(v34 - 24) = v35;
              v34 -= 24;
              v32 -= 24;
            }
            while (v32 != v33);
            v32 = *(char **)(a1 + 184);
          }
          v22 = v31 + 24;
          *(_QWORD *)(a1 + 184) = v34;
          *(_QWORD *)(a1 + 192) = v31 + 24;
          *(_QWORD *)(a1 + 200) = &v29[24 * v30];
          if (v32)
            operator delete(v32);
        }
        else
        {
          if (!v20)
            goto LABEL_71;
          *v20 = v13;
          v20[1] = v12;
          v22 = v20 + 3;
          v20[2] = v14;
        }
        *(_QWORD *)(a1 + 192) = v22;
        v13 = *v17;
        v12 = v17[1];
        v14 = v17[2];
      }
      v17 += 3;
    }
    while (v17 != v15);
  }
  v36 = *(_QWORD **)(a1 + 192);
  v37 = *(_QWORD *)(a1 + 200);
  if ((unint64_t)v36 >= v37)
  {
    v40 = *(_QWORD *)(a1 + 184);
    v41 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v36 - v40) >> 3);
    v42 = v41 + 1;
    v38 = v52;
    if (v41 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - v40) >> 3);
    if (2 * v43 > v42)
      v42 = 2 * v43;
    if (v43 >= 0x555555555555555)
      v44 = 0xAAAAAAAAAAAAAAALL;
    else
      v44 = v42;
    if (!v44)
      goto LABEL_71;
    v45 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<std::vector<ClipperLib::IntPoint>>>(v44);
    if (!v45)
      goto LABEL_71;
    v47 = &v45[24 * v46];
    v48 = &v45[24 * v41];
    *(_QWORD *)v48 = v13;
    *((_QWORD *)v48 + 1) = v12;
    *((_QWORD *)v48 + 2) = v14;
    v39 = v48 + 24;
    v50 = *(char **)(a1 + 184);
    v49 = *(char **)(a1 + 192);
    if (v49 != v50)
    {
      do
      {
        v51 = *(_OWORD *)(v49 - 24);
        *((_QWORD *)v48 - 1) = *((_QWORD *)v49 - 1);
        *(_OWORD *)(v48 - 24) = v51;
        v48 -= 24;
        v49 -= 24;
      }
      while (v49 != v50);
      v49 = *(char **)(a1 + 184);
    }
    *(_QWORD *)(a1 + 184) = v48;
    *(_QWORD *)(a1 + 192) = v39;
    *(_QWORD *)(a1 + 200) = v47;
    if (v49)
      operator delete(v49);
LABEL_64:
    *(_QWORD *)(a1 + 192) = v39;
    *(_BYTE *)(a1 + 256) = 1;
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a1 + 232);
    Selection::Normalize((Selection *)(a1 + 168));
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 260));
    if (v38)
      operator delete(v38);
    if (__p)
    {
      v54 = (uint64_t *)__p;
      operator delete(__p);
    }
  }
  else
  {
    v38 = v52;
    if (v36)
    {
      *v36 = v13;
      v36[1] = v12;
      v39 = v36 + 3;
      v36[2] = v14;
      goto LABEL_64;
    }
LABEL_71:
    __break(1u);
  }
}

void sub_184DC23EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock, void *__p, void *a12, uint64_t a13)
{
  os_unfair_lock_unlock(lock);
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(a1);
}

uint64_t CGPDFSelectionSubtractSelection(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  const void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;

  if (!result)
    return result;
  if (!a2)
    return result;
  v2 = *(_QWORD *)(a2 + 24);
  if (!v2)
    return result;
  v3 = result;
  v4 = *(_QWORD *)(result + 24);
  if (!v4)
    goto LABEL_58;
  if (*(_BYTE *)(v4 + 40))
    CPIndexSetNormalize(*(_QWORD *)(result + 24));
  if (*(_BYTE *)(v2 + 40))
    CPIndexSetNormalize(v2);
  if (*(uint64_t *)(v2 + 16) < 1)
    goto LABEL_58;
  v5 = 0;
  do
  {
    v6 = *(_QWORD *)(v4 + 16);
    if (!v6)
      break;
    v7 = (uint64_t *)(*(_QWORD *)(v2 + 32) + 16 * v5);
    v9 = *v7;
    v8 = v7[1];
    if (*(_BYTE *)(v4 + 40))
    {
      CPIndexSetNormalize(v4);
      v6 = *(_QWORD *)(v4 + 16);
    }
    v10 = *(uint64_t **)(v4 + 32);
    v11 = *v10;
    v12 = v8 + v9;
    v13 = v12 <= *v10 || v6 < 1;
    if (v13)
      goto LABEL_56;
    v14 = 0;
    v15 = v6;
    v16 = 1;
    v17 = *(uint64_t **)(v4 + 32);
    while (2)
    {
      v18 = v17 + 1;
      if (v15 <= v16)
        v19 = v16;
      else
        v19 = v15;
      v20 = 2 * v16;
      v21 = v19 + 1;
      while (1)
      {
        v22 = *v18 + v11;
        if (v22 <= v9)
          goto LABEL_36;
        if (v12 <= v11)
          goto LABEL_47;
        if (v9 <= v11 && v22 <= v12)
          break;
        v23 = v9 <= v11;
        if (v22 > v12 && v9 <= v11)
        {
          v25 = &v10[v20];
          *(v25 - 2) = v12;
          *(v25 - 1) = v22 - v12;
          goto LABEL_47;
        }
        if (v22 > v12)
          v23 = 1;
        if (v23)
        {
          v13 = v9 <= v11;
          v26 = v9 - v11;
          if (!v13)
          {
            v27 = v22 - v12;
            if (v22 > v12)
            {
              if (v15 == *(_QWORD *)(v4 + 24))
              {
                v10 = (uint64_t *)malloc_type_realloc(v10, 16 * v15 + 16, 0x1000040451B5BE8uLL);
                v15 = *(_QWORD *)(v4 + 16);
                ++*(_QWORD *)(v4 + 24);
                *(_QWORD *)(v4 + 32) = v10;
              }
              *(_QWORD *)(v4 + 16) = v15 + 1;
              v28 = &v10[2 * v16];
              *(v28 - 2) = v11;
              *(v28 - 1) = v26;
              v29 = &v10[2 * *(_QWORD *)(v4 + 16)];
              *(v29 - 2) = v12;
              *(v29 - 1) = v27;
              *(_BYTE *)(v4 + 40) = 1;
            }
          }
LABEL_47:
          v15 = *(_QWORD *)(v4 + 16);
          v6 = v15;
          if ((v14 & 1) == 0)
            goto LABEL_56;
          goto LABEL_48;
        }
        v10[v20 - 1] = v9 - v11;
LABEL_36:
        if (v16 < v6)
        {
          ++v16;
          v18 = &v10[v20 + 1];
          v11 = v10[v20];
          v20 += 2;
          if (v21 != v16)
            continue;
        }
        goto LABEL_47;
      }
      *(_OWORD *)&v10[2 * v16 - 2] = CPIndexSetNullRange;
      v15 = *(_QWORD *)(v4 + 16);
      if (v16 < v6)
      {
        v10 = *(uint64_t **)(v4 + 32);
        v17 = &v10[2 * v16];
        v11 = *v17;
        v14 = 1;
        v13 = v16++ < v15;
        if (v13)
          continue;
      }
      break;
    }
LABEL_48:
    v30 = (char *)malloc_type_malloc(16 * v15, 0x1000040451B5BE8uLL);
    v31 = *(_QWORD *)(v4 + 16);
    v32 = *(uint64_t **)(v4 + 32);
    if (v31 < 1)
    {
      v6 = 0;
    }
    else
    {
      v33 = 0;
      v6 = 0;
      v34 = v32 + 1;
      do
      {
        v35 = *(v34 - 1);
        if ((v35 & 0x8000000000000000) == 0)
        {
          v36 = *v34;
          v37 = &v30[16 * v6++];
          *(_QWORD *)v37 = v35;
          *((_QWORD *)v37 + 1) = v36;
          v31 = *(_QWORD *)(v4 + 16);
        }
        ++v33;
        v34 += 2;
      }
      while (v33 < v31);
    }
    free(v32);
    *(_QWORD *)(v4 + 32) = v30;
    *(_QWORD *)(v4 + 16) = v6;
LABEL_56:
    if (!v6)
      break;
    CPIndexSetNormalize(v4);
    ++v5;
  }
  while (v5 < *(_QWORD *)(v2 + 16));
LABEL_58:
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 96));
  *(_QWORD *)(v3 + 40) = -1;
  v38 = *(const void **)(v3 + 32);
  if (v38)
    CFRelease(v38);
  *(_QWORD *)(v3 + 32) = 0;
  v39 = *(void **)(v3 + 56);
  if (v39)
  {
    free(v39);
    *(_QWORD *)(v3 + 56) = 0;
  }
  v40 = *(void **)(v3 + 64);
  if (v40)
  {
    free(v40);
    *(_QWORD *)(v3 + 64) = 0;
  }
  v41 = *(void **)(v3 + 72);
  if (v41)
  {
    free(v41);
    *(_QWORD *)(v3 + 72) = 0;
  }
  v42 = *(void **)(v3 + 80);
  if (v42)
  {
    free(v42);
    *(_QWORD *)(v3 + 80) = 0;
  }
  *(_QWORD *)(v3 + 48) = -1;
  return pthread_mutex_unlock((pthread_mutex_t *)(v3 + 96));
}

void CGPDFSelectionExtendAtStart(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  if (a1 && a2 && *(_QWORD *)(a1 + 184) != *(_QWORD *)(a1 + 192))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 260));
    *(_BYTE *)(a1 + 256) = 1;
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a1 + 232);
    v4 = *(_QWORD **)(a1 + 184);
    v5 = *(_QWORD **)(a1 + 192);
    if (v4 == v5)
    {
      __break(1u);
    }
    else
    {
      if (a2 < 1)
      {
        v9 = v4[2];
        if (v9 <= -a2)
        {
          v4[1] += v9;
          v4[2] = 0;
          while (1)
          {
            v10 = v4 + 3;
            if (v4 + 3 == v5)
              break;
            v4 += 3;
            *(v4 - 3) = *v10;
            *((_OWORD *)v4 - 1) = *(_OWORD *)(v4 + 1);
          }
          *(_QWORD *)(a1 + 192) = v4;
        }
        else
        {
          v4[1] -= a2;
          v4[2] = v9 + a2;
        }
      }
      else
      {
        v6 = v4[1];
        if (v6 >= a2)
          v7 = a2;
        else
          v7 = v4[1];
        v8 = v4[2] + v7;
        v4[1] = v6 - v7;
        v4[2] = v8;
      }
      Selection::Normalize((Selection *)(a1 + 168));
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 260));
    }
  }
}

void sub_184DC2884(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void CGPDFSelectionExtendAtEnd(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 && a2 && *(_QWORD *)(a1 + 184) != *(_QWORD *)(a1 + 192))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 260));
    *(_BYTE *)(a1 + 256) = 1;
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a1 + 232);
    CGPDFPageCopyPageLayoutWithCTLD(*(_QWORD *)(a1 + 168), 1);
    v5 = *(_QWORD *)(a1 + 192);
    if (*(_QWORD *)(a1 + 184) == v5)
    {
      __break(1u);
    }
    else
    {
      v6 = v4;
      if (a2 < 1)
      {
        v10 = *(_QWORD *)(v5 - 8);
        if (v10 <= -a2)
        {
          v11 = 0;
          *(_QWORD *)(a1 + 192) = v5 - 24;
        }
        else
        {
          v11 = v10 + a2;
        }
        *(_QWORD *)(v5 - 8) = v11;
      }
      else
      {
        v7 = *(_QWORD *)(v5 - 8);
        v8 = v7 + *(_QWORD *)(v5 - 16);
        if (((uint64_t)(v4[16] - v4[15]) >> 5) - v8 >= a2)
          v9 = a2;
        else
          v9 = ((uint64_t)(v4[16] - v4[15]) >> 5) - v8;
        *(_QWORD *)(v5 - 8) = v9 + v7;
      }
      Selection::Normalize((Selection *)(a1 + 168));
      if (v6)
        CFRelease(v6);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 260));
    }
  }
}

void sub_184DC29AC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *CGPDFSelectionCreateSelectionsByLine(uint64_t *a1)
{
  uint64_t *v1;
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t *v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  _QWORD v31[18];

  v1 = a1;
  v31[16] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 0xAAAAAAAAAAAAAAABLL * ((a1[24] - a1[23]) >> 3));
    v30 = v2;
    if (v1[23] == v1[24])
    {
      v22 = v2;
      v1 = v22;
    }
    else
    {
      CGPDFPageCopyPageLayoutWithCTLD(v1[21], 1);
      v4 = v3;
      v29 = CGPDFSelectionCreateWithPage((const void *)v1[21]);
      v5 = (unint64_t *)v1[23];
      if (v5 == (unint64_t *)v1[24])
LABEL_29:
        __break(1u);
      v6 = 0;
      v28 = *v5;
      v31[0] = v1 + 21;
      v31[1] = &v29;
      v31[2] = &v28;
      v31[3] = &v30;
      v7 = -1;
      v8 = -1;
      do
      {
        v9 = *v5;
        v10 = v5[1];
        v11 = v5[2];
        if (v8 != -1)
          Selection::CreateSelectionsByLine(void)const::$_0::operator()((uint64_t)v31, v7, v8, v6);
        v12 = v4[6];
        if (0x8E38E38E38E38E39 * ((v4[7] - v12) >> 3) <= v9)
          goto LABEL_29;
        v13 = v11 + v10;
        v14 = *(_QWORD *)(v12 + 72 * v9 + 8) + *(_QWORD *)(v12 + 72 * v9);
        if (v11 + v10 <= v14)
        {
          v6 = v11;
          v8 = v10;
        }
        else
        {
          v15 = 72 * v9;
          do
          {
            v8 = v14;
            Selection::CreateSelectionsByLine(void)const::$_0::operator()((uint64_t)v31, v9++, v10, v14 - v10);
            v16 = v4[6];
            if (0x8E38E38E38E38E39 * ((v4[7] - v16) >> 3) <= v9)
              goto LABEL_29;
            v14 = *(_QWORD *)(v16 + v15 + 80) + *(_QWORD *)(v16 + v15 + 72);
            v15 += 72;
            v10 = v8;
          }
          while (v13 > v14);
          v6 = v13 - v8;
        }
        v7 = v9;
        v5 += 3;
      }
      while (v5 != (unint64_t *)v1[24]);
      Selection::CreateSelectionsByLine(void)const::$_0::operator()((uint64_t)v31, v9, v8, v6);
      v17 = (void *)v29;
      objc_msgSend(v30, "addObject:", v29);

      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v18 = v30;
      v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v24, v31, 16);
      if (v19)
      {
        v20 = *(_QWORD *)v25;
        do
        {
          for (i = 0; i != v19; ++i)
          {
            if (*(_QWORD *)v25 != v20)
              objc_enumerationMutation(v18);
            Selection::Normalize((Selection *)(*(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * i) + 168));
          }
          v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v24, v31, 16);
        }
        while (v19);

        v22 = (uint64_t *)v30;
        v1 = v22;
        if (!v4)
          goto LABEL_27;
      }
      else
      {

        v1 = (uint64_t *)v30;
      }
      CFRelease(v4);
      v22 = (uint64_t *)v30;
    }
LABEL_27:

  }
  return v1;
}

void sub_184DC2CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL CGPDFSelectionIsEmpty(uint64_t a1)
{
  return !a1 || *(_QWORD *)(a1 + 184) == *(_QWORD *)(a1 + 192);
}

BOOL CGPDFSelectionEqualToSelection(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  char *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Range;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 == a2)
    return 1;
  result = 0;
  if (a1 && a2)
  {
    if (*(_BYTE *)(a1 + 160) && *(_BYTE *)(a2 + 160))
    {
      v6 = a1 + 184;
      v4 = *(char **)(a1 + 184);
      v5 = *(char **)(v6 + 8);
      v7 = *(_QWORD **)(a2 + 184);
      if (v5 - v4 == *(_QWORD *)(a2 + 192) - (_QWORD)v7)
      {
        if (v4 != v5)
        {
          result = 1;
          while (*(_QWORD *)v4 == *v7)
          {
            if (*((_QWORD *)v4 + 1) != v7[1] || *((_QWORD *)v4 + 2) != v7[2])
              break;
            v4 += 24;
            v7 += 3;
            if (v4 == v5)
              return result;
          }
          return 0;
        }
        return 1;
      }
      return 0;
    }
    if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(_QWORD *)(a2 + 24);
    if (v9 == v10)
      return 1;
    result = 0;
    if (v9 && v10)
    {
      if (*(_BYTE *)(v9 + 40))
        CPIndexSetNormalize(v9);
      v11 = *(_QWORD *)(v9 + 16);
      if (*(_BYTE *)(v10 + 40))
        CPIndexSetNormalize(v10);
      if (*(_QWORD *)(v10 + 16) != v11)
        return 0;
      v12 = v11 - 1;
      if (v11 < 1)
        return 1;
      v13 = 0;
      do
      {
        Range = CPIndexSetGetRange(v9, v13);
        v16 = v15;
        result = Range == CPIndexSetGetRange(v10, v13) && v16 == v17;
      }
      while (result && v12 != v13++);
    }
  }
  return result;
}

uint64_t CGPDFSelectionGetContainingNode(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t NodeContainingTextRange;
  uint64_t v15;

  v2 = (pthread_mutex_t *)(a1 + 96);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
  if (!a1)
    goto LABEL_14;
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 != -1)
    goto LABEL_13;
  v4 = (uint64_t *)CGPDFPageCopyLayout(*(_QWORD *)(a1 + 16));
  if (!v4)
  {
LABEL_14:
    v3 = -1;
    goto LABEL_13;
  }
  v5 = v4;
  v6 = v4[13];
  v7 = *(_QWORD *)(a1 + 184);
  v8 = *(_QWORD *)(a1 + 192) - v7;
  if (v8 < 1)
  {
    v9 = 0;
    v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = v8 / 24;
    v12 = (uint64_t *)(v7 + 16);
    do
    {
      v9 = CPRangeUnion(v9, v10, *(v12 - 1), *v12);
      v10 = v13;
      v12 += 3;
      --v11;
    }
    while (v11);
  }
  NodeContainingTextRange = CGPDFNodeGetNodeContainingTextRange(v6, v9, v10);
  if (NodeContainingTextRange)
    v15 = NodeContainingTextRange;
  else
    v15 = -1;
  *(_QWORD *)(a1 + 40) = v15;
  CFRelease(v5);
  v3 = *(_QWORD *)(a1 + 40);
LABEL_13:
  pthread_mutex_unlock(v2);
  return v3;
}

BOOL CGPDFSelectionGetContentRect(uint64_t a1)
{
  return a1 != 0;
}

uint64_t *CGPDFSelectionIsWord(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  _QWORD *v7;
  unint64_t LineIndex;
  _QWORD *WordRange;
  uint64_t v10;
  uint64_t v11;

  if (result)
  {
    v1 = result[23];
    v2 = result[24];
    if (v2 - v1 == 24)
    {
      if (v2 == v1)
      {
        v4 = 0;
        v3 = -1;
      }
      else
      {
        v3 = *(_QWORD *)(v1 + 8);
        v4 = *(_QWORD *)(v1 + 16);
      }
      CGPDFPageCopyPageLayoutWithCTLD(result[21], 1);
      v6 = (const void *)v5;
      v7 = (_QWORD *)(v5 + 16);
      LineIndex = PageLayout::getLineIndex(*(PageLayout **)(v5 + 48), *(PageLayout **)(v5 + 56), v3);
      WordRange = PageLayout::getWordRange(v7, LineIndex, v3);
      v11 = v10;
      CFRelease(v6);
      return (uint64_t *)((_QWORD *)v3 == WordRange && v4 == v11);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_184DC3054(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ObjectRef<CGPDFPageLayout *>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t CGPDFSelectionIsStandaloneGraphic()
{
  return 0;
}

BOOL CGPDFSelectionIsWithinLayout(uint64_t a1)
{
  return a1 != 0;
}

uint64_t CGPDFSelectionIsWithinParagraph(uint64_t a1)
{
  CFTypeRef v2;
  _DWORD *ContainingNode;
  uint64_t v4;

  v2 = CGPDFPageCopyLayout(*(_QWORD *)(a1 + 16));
  ContainingNode = (_DWORD *)CGPDFSelectionGetContainingNode(a1);
  if (!ContainingNode || (v4 = 0, (*ContainingNode - 515) >= 3) && *ContainingNode != 1538)
    v4 = 1;
  if (v2)
    CFRelease(v2);
  return v4;
}

void sub_184DC30F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ObjectRef<CGPDFLayout *>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

_QWORD *CGTriangleMeshCreate(_QWORD *a1, const void *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = malloc_type_malloc(0x58uLL, 0x2062DE7BuLL);
  v5 = v4;
  if (v4)
  {
    *(_DWORD *)v4 = 1;
    if (a1)
    {
      CFRetain(a1);
      v5[2] = a1;
      if (!a2)
      {
        v5[3] = 0;
        v6 = *(_QWORD *)(a1[3] + 40);
LABEL_7:
        v5[1] = v6;
        v5[4] = 8 * v6 + 16;
        *(_OWORD *)(v5 + 5) = 0u;
        *(_OWORD *)(v5 + 7) = 0u;
        *(_OWORD *)(v5 + 9) = 0u;
        return v5;
      }
    }
    else
    {
      v4[2] = 0;
      if (!a2)
      {
        v6 = 0;
        v4[3] = 0;
        goto LABEL_7;
      }
    }
    CFRetain(a2);
    v5[3] = a2;
    v6 = 1;
    goto LABEL_7;
  }
  return v5;
}

unsigned int *CGTriangleMeshRetain(unsigned int *result)
{
  unsigned int v1;

  if (result)
  {
    do
      v1 = __ldxr(result);
    while (__stxr(v1 + 1, result));
  }
  return result;
}

void CGTriangleMeshRelease(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  const void *v4;

  if (a1)
  {
    do
    {
      v2 = __ldxr((unsigned int *)a1);
      v3 = v2 - 1;
    }
    while (__stxr(v3, (unsigned int *)a1));
    if (!v3)
    {
      CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 16));
      v4 = *(const void **)(a1 + 24);
      if (v4)
        CFRelease(v4);
      free(*(void **)(a1 + 56));
      free(*(void **)(a1 + 80));
      free((void *)a1);
    }
  }
}

uint64_t CGTriangleMeshGetColorSpace(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 16);
  return result;
}

uint64_t CGTriangleMeshGetNumberOfComponents(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 8);
  return result;
}

uint64_t CGTriangleMeshAddTriangle(uint64_t result, float64x2_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float64_t *v10;

  if (result)
  {
    if (a3)
    {
      if (a4)
      {
        v7 = result;
        result = (uint64_t)add_triangle(result);
        if (result)
        {
          v8 = result;
          v9 = 0;
          v10 = (float64_t *)(a3 + 8);
          do
          {
            result = add_point(v7, a2, (uint64_t *)(a4 + 8 * *(_QWORD *)(v7 + 8) * v9), *(v10 - 1), *v10);
            *(_QWORD *)(v8 + 8 * v9++) = result;
            v10 += 2;
          }
          while (v9 != 3);
        }
      }
    }
  }
  return result;
}

char *add_triangle(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *result;

  v2 = *(_QWORD *)(a1 + 72);
  if (v2 == *(_QWORD *)(a1 + 64))
  {
    v3 = 2 * v2 + 6;
    result = (char *)malloc_type_realloc(*(void **)(a1 + 80), 24 * v3, 0x7492344AuLL);
    if (!result)
      return result;
    *(_QWORD *)(a1 + 80) = result;
    *(_QWORD *)(a1 + 64) = v3;
    v2 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    result = *(char **)(a1 + 80);
  }
  *(_QWORD *)(a1 + 72) = v2 + 1;
  result += 24 * v2;
  return result;
}

uint64_t add_point(uint64_t a1, float64x2_t *a2, uint64_t *a3, float64_t a4, float64_t a5)
{
  uint64_t *v5;
  uint64_t result;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  float64x2_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  double v18;

  if (!a3)
    return -1;
  v5 = a3;
  result = *(_QWORD *)(a1 + 40);
  if (result == *(_QWORD *)(a1 + 48))
  {
    v17 = a5;
    v18 = a4;
    v9 = 2 * result + 18;
    v10 = (char *)malloc_type_realloc(*(void **)(a1 + 56), *(_QWORD *)(a1 + 32) * v9, 0x7492344AuLL);
    if (!v10)
      return -1;
    v11 = v10;
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v10;
    result = *(_QWORD *)(a1 + 40);
    a5 = v17;
    a4 = v18;
  }
  else
  {
    v11 = *(char **)(a1 + 56);
  }
  *(_QWORD *)(a1 + 40) = result + 1;
  v12 = *(_QWORD *)(a1 + 32) * result;
  v13.f64[0] = a4;
  v13.f64[1] = a5;
  if (a2)
    v13 = vaddq_f64(a2[2], vmlaq_n_f64(vmulq_laneq_f64(a2[1], v13, 1), *a2, a4));
  *(float64x2_t *)&v11[v12] = v13;
  v14 = *(_QWORD *)(a1 + 8);
  if (v14)
  {
    v15 = &v11[v12 + 16];
    do
    {
      v16 = *v5++;
      *(_QWORD *)v15 = v16;
      v15 += 8;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t CGTriangleMeshAddTriangleWithTrianglePoints(uint64_t result, float64x2_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t i;

  if (result)
  {
    if (a3)
    {
      v5 = result;
      result = (uint64_t)add_triangle(result);
      if (result)
      {
        v6 = result;
        for (i = 0; i != 24; i += 8)
        {
          result = add_point(v5, a2, (uint64_t *)(*(_QWORD *)(a3 + i) + 16), **(float64_t **)(a3 + i), *(float64_t *)(*(_QWORD *)(a3 + i) + 8));
          *(_QWORD *)(v6 + i) = result;
        }
      }
    }
  }
  return result;
}

_QWORD *CGTriangleMeshAddTriangleWithRelativePoint(_QWORD *result, float64x2_t *a2, int a3, uint64_t *a4, float64_t a5, float64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;

  if (result)
  {
    if (a4)
    {
      v7 = (uint64_t)result;
      v8 = result[9];
      if (v8)
      {
        result = add_triangle((uint64_t)result);
        if (result)
        {
          v13 = result;
          v14 = *(_QWORD *)(v7 + 80) + 24 * v8 - 24;
          v15 = (_QWORD *)v14;
          if (a3 != 1)
          {
            if (a3)
              return result;
            v15 = (_QWORD *)(*(_QWORD *)(v7 + 80) + 24 * v8 - 16);
          }
          *result = *v15;
          result[1] = *(_QWORD *)(v14 + 16);
          result = (_QWORD *)add_point(v7, a2, a4, a5, a6);
          v13[2] = result;
        }
      }
    }
  }
  return result;
}

uint64_t CGTriangleMeshGetCount(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 72);
  return result;
}

_QWORD *CGTriangleMeshGetTriangleAtIndex(_QWORD *result, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result && a3 && result[9] > a2)
  {
    v3 = 0;
    v4 = result[10] + 24 * a2;
    v5 = result[4];
    do
    {
      *(_QWORD *)(a3 + v3) = result[7] + v5 * *(_QWORD *)(v4 + v3);
      v3 += 8;
    }
    while (v3 != 24);
  }
  return result;
}

uint64_t CGTriangleMeshPrint(uint64_t a1, FILE *a2)
{
  unint64_t v4;
  double *v5;
  unint64_t v6;
  double *v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;

  fprintf(a2, "mesh %p: colorspace %p ; function %p\n",
    (const void *)a1,
    *(const void **)(a1 + 16),
    *(const void **)(a1 + 24));
  fprintf(a2, "  point size: %zu\n", *(_QWORD *)(a1 + 32));
  fprintf(a2, "  point count: %zu\n", *(_QWORD *)(a1 + 40));
  if (*(_QWORD *)(a1 + 40))
  {
    v4 = 0;
    do
    {
      v5 = (double *)(*(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 32) * v4);
      fprintf(a2, "    point %zu: (%g, %g)(", v4, *v5, v5[1]);
      if (*(_QWORD *)(a1 + 8))
      {
        v6 = 0;
        v7 = v5 + 2;
        do
          fprintf(a2, "%g ", v7[v6++]);
        while (v6 < *(_QWORD *)(a1 + 8));
      }
      fwrite(")\n", 2uLL, 1uLL, a2);
      ++v4;
    }
    while (v4 < *(_QWORD *)(a1 + 40));
  }
  result = fprintf(a2, "  triangle count: %zu\n", *(_QWORD *)(a1 + 72));
  if (*(_QWORD *)(a1 + 72))
  {
    v9 = 0;
    v10 = 0;
    do
    {
      result = fprintf(a2, "    triangle %zu: (%zu, %zu, %zu)\n", v10++, *(_QWORD *)(*(_QWORD *)(a1 + 80) + v9), *(_QWORD *)(*(_QWORD *)(a1 + 80) + v9 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 80) + v9 + 16));
      v9 += 24;
    }
    while (v10 < *(_QWORD *)(a1 + 72));
  }
  return result;
}

uint64_t CGGetMD5DigestOfBytes(unsigned __int8 *a1, char *a2, unint64_t a3)
{
  CC_MD5_CTX v7;

  memset(&v7, 0, sizeof(v7));
  CC_MD5_Init(&v7);
  md5_update(&v7, a2, a3);
  return CC_MD5_Final(a1, &v7);
}

CC_MD5_CTX *CGDigesterCreateMD5()
{
  CC_MD5_CTX *v0;

  v0 = (CC_MD5_CTX *)malloc_type_malloc(0x5CuLL, 0x2062DE7BuLL);
  CC_MD5_Init(v0);
  return v0;
}

CC_MD5_CTX *CGDigesterAddBytes(CC_MD5_CTX *c, char *data, unint64_t a3)
{
  if (c)
    return md5_update(c, data, a3);
  return c;
}

CC_MD5_CTX *CGDigesterGetDigest(CC_MD5_CTX *c, unsigned __int8 *md)
{
  if (c)
    return (CC_MD5_CTX *)CC_MD5_Final(md, c);
  return c;
}

xmlChar *CG::DisplayListXMLHelper::parseAttributesFromNode(xmlChar *this, _xmlNode *a2)
{
  _xmlAttr *properties;
  uint64_t **v4;
  uint64_t (**v5)(xmlChar *);
  xmlChar *v6;
  _OWORD *v7;
  char *v8;
  void *__p[2];
  char v10;
  void *v11[2];
  uint64_t v12;
  void **v13;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = this + 8;
  properties = a2->properties;
  if (properties)
  {
    v4 = (uint64_t **)this;
    v5 = (uint64_t (**)(xmlChar *))MEMORY[0x1E0DE8D30];
    do
    {
      this = xmlNodeListGetString(a2->doc, properties->children, 1);
      v6 = this;
      if (this)
      {
        std::string::basic_string[abi:se180100]<0>((char **)v11, (char *)this);
        std::string::basic_string[abi:se180100]<0>((char **)__p, (char *)properties->name);
        v13 = __p;
        v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, __p, (_OWORD **)&v13);
        v8 = (char *)v7 + 56;
        if (*((char *)v7 + 79) < 0)
          operator delete(*(void **)v8);
        *(_OWORD *)v8 = *(_OWORD *)v11;
        *((_QWORD *)v8 + 2) = v12;
        HIBYTE(v12) = 0;
        LOBYTE(v11[0]) = 0;
        if (v10 < 0)
        {
          operator delete(__p[0]);
          if (SHIBYTE(v12) < 0)
            operator delete(v11[0]);
        }
        this = (xmlChar *)(*v5)(v6);
      }
      properties = properties->next;
    }
    while (properties);
  }
  return this;
}

void sub_184DC39EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  _QWORD **v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*v21);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v5 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x50uLL);
    v11[1] = a1 + 1;
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((_QWORD *)v6 + 8) = 0;
    *((_QWORD *)v6 + 9) = 0;
    *((_QWORD *)v6 + 7) = 0;
    v12 = 1;
    std::__tree<unsigned long>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:se180100]((uint64_t)v11);
  }
  return v6;
}

uint64_t CG::DisplayListXMLHelper::parseFormatFromAttributes(uint64_t a1, char *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v11;
  const char *v12;
  void *__p[2];
  char v15;

  std::string::basic_string[abi:se180100]<0>((char **)__p, a2);
  v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  if ((_QWORD *)(a1 + 8) == v11)
    return 0;
  __p[0] = &a9;
  v12 = (const char *)(v11 + 7);
  if (*((char *)v11 + 79) < 0)
    v12 = *(const char **)v12;
  return vsscanf(v12, a3, (va_list)__p[0]);
}

_QWORD *CG::DisplayListXMLHelper::parseStringFromAttributes(uint64_t a1, char *a2)
{
  _QWORD *v3;
  _QWORD *result;
  void *__p[2];
  char v6;

  std::string::basic_string[abi:se180100]<0>((char **)__p, a2);
  v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1, __p);
  if (v6 < 0)
    operator delete(__p[0]);
  if ((_QWORD *)(a1 + 8) == v3)
    return 0;
  result = v3 + 7;
  if (*((char *)v3 + 79) < 0)
    return (_QWORD *)*result;
  return result;
}

uint64_t CG::DisplayListXMLHelper::parseBoolFromAttributes(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v5;
  const void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *p_p;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  char v19;
  BOOL v20;
  uint64_t result;
  char v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  char v34;
  _BOOL4 v35;
  void *__p;
  uint64_t v37;
  unsigned __int8 v38;

  std::string::basic_string[abi:se180100]<0>((char **)&__p, a2);
  v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1, &__p);
  if ((char)v38 < 0)
    operator delete(__p);
  if ((_QWORD *)(a1 + 8) == v5)
    return 0;
  v6 = (const void **)(v5 + 7);
  std::string::basic_string[abi:se180100]<0>((char **)&__p, "true");
  v7 = *((unsigned __int8 *)v5 + 79);
  if ((v7 & 0x80u) == 0)
    v8 = *((unsigned __int8 *)v5 + 79);
  else
    v8 = v5[8];
  v9 = v38;
  v10 = (char)v38;
  if ((v38 & 0x80u) != 0)
    v9 = v37;
  if (v8 != v9)
  {
    v20 = 0;
    if (((char)v38 & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_30;
  }
  if ((v38 & 0x80u) == 0)
    p_p = (unsigned __int8 *)&__p;
  else
    p_p = (unsigned __int8 *)__p;
  if ((v7 & 0x80) != 0)
  {
    v20 = memcmp(*v6, p_p, v5[8]) == 0;
    goto LABEL_26;
  }
  if (*((_BYTE *)v5 + 79))
  {
    v12 = v7 - 1;
    v13 = (unsigned __int8 *)(v5 + 7);
    do
    {
      v15 = *v13++;
      v14 = v15;
      v17 = *p_p++;
      v16 = v17;
      v18 = v12-- != 0;
      v19 = v18;
      v20 = v14 == v16;
    }
    while (v14 == v16 && (v19 & 1) != 0);
LABEL_26:
    if ((v10 & 0x80000000) == 0)
      goto LABEL_27;
LABEL_30:
    operator delete(__p);
    if (v20)
      goto LABEL_28;
LABEL_31:
    std::string::basic_string[abi:se180100]<0>((char **)&__p, "false");
    v23 = *((unsigned __int8 *)v5 + 79);
    v24 = v5[8];
    if ((v23 & 0x80u) == 0)
      v25 = *((unsigned __int8 *)v5 + 79);
    else
      v25 = v5[8];
    v26 = v38;
    v27 = (char)v38;
    if ((v38 & 0x80u) != 0)
      v26 = v37;
    if (v25 == v26)
    {
      if ((v38 & 0x80u) == 0)
        v28 = (unsigned __int8 *)&__p;
      else
        v28 = (unsigned __int8 *)__p;
      if ((v23 & 0x80) != 0)
      {
        v35 = memcmp(*v6, v28, v24) == 0;
        goto LABEL_52;
      }
      if ((_DWORD)v23)
      {
        v29 = v23 - 1;
        do
        {
          v31 = *(unsigned __int8 *)v6;
          v6 = (const void **)((char *)v6 + 1);
          v30 = v31;
          v33 = *v28++;
          v32 = v33;
          v18 = v29-- != 0;
          v34 = v18;
          v35 = v30 == v32;
        }
        while (v30 == v32 && (v34 & 1) != 0);
LABEL_52:
        if ((v27 & 0x80000000) == 0)
          goto LABEL_54;
        goto LABEL_53;
      }
      v35 = 1;
      if (((char)v38 & 0x80000000) == 0)
      {
LABEL_54:
        v22 = 0;
        result = 0;
        if (!v35)
          return result;
        goto LABEL_55;
      }
    }
    else
    {
      v35 = 0;
      if (((char)v38 & 0x80000000) == 0)
        goto LABEL_54;
    }
LABEL_53:
    operator delete(__p);
    goto LABEL_54;
  }
  v20 = 1;
  if ((char)v38 < 0)
    goto LABEL_30;
LABEL_27:
  if (!v20)
    goto LABEL_31;
LABEL_28:
  v22 = 1;
LABEL_55:
  *a3 = v22;
  return 1;
}

BOOL CG::DisplayListXMLHelper::parsePointFromAttributes(uint64_t a1, char *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;

  v11 = 0;
  v9 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a1, a2, "{%lg, %lg}", a4, a5, a6, a7, a8, (uint64_t)&v11);
  if (v9)
  {
    *a3 = v11;
    a3[1] = 0;
  }
  return v9 != 0;
}

uint64_t CG::DisplayListXMLHelper::parseRectFromAttributes(uint64_t a1, char *a2, uint64_t a3)
{
  _QWORD *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  const CGRect *v15;
  CGSize size;
  void *__p[2];
  char v18;

  std::string::basic_string[abi:se180100]<0>((char **)__p, a2);
  v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1, __p);
  if (v18 < 0)
    operator delete(__p[0]);
  if ((_QWORD *)(a1 + 8) == v6)
    return 0;
  v7 = (const char *)(v6 + 7);
  if (*((char *)v6 + 79) < 0)
    v7 = *(const char **)v7;
  if (!strcmp(v7, "rectNull"))
  {
    v15 = &CGRectNull;
LABEL_14:
    size = v15->size;
    *(CGPoint *)a3 = v15->origin;
    *(CGSize *)(a3 + 16) = size;
    return 1;
  }
  if (!strcmp(v7, "rectInfinite"))
  {
    v15 = &CGRectInfinite;
    goto LABEL_14;
  }
  __p[0] = 0;
  v13 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a1, a2, "{%lg, %lg}, {%lg, %lg}", v8, v9, v10, v11, v12, (uint64_t)__p) == 4;
  result = v13;
  if (v13)
  {
    *(void **)a3 = __p[0];
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
  }
  return result;
}

BOOL CG::DisplayListXMLHelper::parseAffineTransformFromAttributes(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  _BOOL8 result;
  char *v14[2];
  char v15;

  std::string::basic_string[abi:se180100]<0>(v14, a2);
  v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1, v14);
  if (v15 < 0)
    operator delete(v14[0]);
  if ((_QWORD *)(a1 + 8) == v11)
    return 0;
  v14[0] = 0;
  v12 = CG::DisplayListXMLHelper::parseFormatFromAttributes(a1, a2, "[%lg %lg %lg %lg %lg %lg]", v6, v7, v8, v9, v10, (uint64_t)v14) == 6;
  result = v12;
  if (v12)
  {
    *(char **)a3 = v14[0];
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
  }
  return result;
}

unint64_t CG::DisplayListXMLHelper::parseColorComponentsFromAttributes(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t i;
  int v6;
  BOOL v7;
  int v8;
  void *v10;
  char v11;
  void *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  char v18;
  void *__p[2];
  char v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  std::string v26;
  _BYTE v27[16];
  void *v28;
  char v29;
  void *v30;
  char v31;
  __int128 v32;
  char v33;
  void *v34;
  char v35;

  std::string::basic_string[abi:se180100]<0>((char **)__p, "components");
  v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1, __p);
  if (v20 < 0)
    operator delete(__p[0]);
  if ((_QWORD *)(a1 + 8) == v4)
    return 0;
  boost::char_separator<char,std::char_traits<char>>::char_separator((uint64_t)&v32, "() ");
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::tokenizer<std::string>((uint64_t)v27, v4 + 7, &v32);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::begin((uint64_t)__p, (uint64_t)v27);
  for (i = 0; ; ++i)
  {
    boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::end((uint64_t)&v10, (uint64_t)v27);
    if (!v16 || !v25)
    {
      v7 = v16 == v25;
      goto LABEL_10;
    }
    if (v14 == v23)
    {
      v7 = v15 == v24;
LABEL_10:
      v6 = v7;
      goto LABEL_13;
    }
    v6 = 0;
LABEL_13:
    if (i > 5)
      v8 = 1;
    else
      v8 = v6;
    if (v18 < 0)
      operator delete(v17);
    if (v13 < 0)
      operator delete(v12);
    if (v11 < 0)
      operator delete(v10);
    if (v8)
      break;
    if (!v25)
      __assert_rtn("dereference", "token_iterator.hpp", 59, "valid_");
    *(double *)(a2 + 8 * i) = std::stod(&v26, 0);
    boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::increment((uint64_t)__p);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (v22 < 0)
    operator delete(v21);
  if (v20 < 0)
    operator delete(__p[0]);
  if (v31 < 0)
    operator delete(v30);
  if (v29 < 0)
    operator delete(v28);
  if (v35 < 0)
    operator delete(v34);
  if (v33 < 0)
    operator delete((void *)v32);
  return i;
}

void sub_184DC42BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~tokenizer(v1 - 192);
  boost::char_separator<char,std::char_traits<char>>::~char_separator(v1 - 112);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2CG20DisplayListXMLHelper37parseCompositeOperationFromAttributesERKNSt3__13mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES8_NS1_4lessIS8_EENS6_INS1_4pairIKS8_S8_EEEEEEPKcR20CGCompositeOperation_block_invoke(uint64_t a1, const char **a2, const char **a3)
{
  return strcmp(*a2, *a3);
}

BOOL CG::DisplayListXMLHelper::parseColorRenderingIntentFromAttributes(uint64_t a1, char *a2, _DWORD *a3)
{
  _QWORD *v5;
  const char *v6;
  unint64_t v7;
  BOOL v8;
  void **i;
  void *__p;
  int v12;
  const char *v13;
  int v14;
  const char *v15;
  int v16;
  const char *v17;
  int v18;
  const char *v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:se180100]<0>((char **)&__p, a2);
  v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1, &__p);
  if (SHIBYTE(v13) < 0)
    operator delete(__p);
  if ((_QWORD *)(a1 + 8) == v5)
  {
    return 0;
  }
  else
  {
    __p = "default";
    v13 = "absColormetric";
    v14 = 1;
    v15 = "relColormetric";
    v16 = 2;
    v17 = "perceptual";
    v18 = 3;
    v12 = 0;
    v19 = "saturation";
    v20 = 4;
    v6 = (const char *)(v5 + 7);
    if (*((char *)v5 + 79) < 0)
      v6 = *(const char **)v6;
    v7 = 0;
    v8 = 1;
    for (i = &__p; strcmp(v6, (const char *)*i); i += 2)
    {
      v8 = v7 < 4;
      if (++v7 == 5)
        return 0;
    }
    *a3 = *((_DWORD *)&__p + 4 * v7 + 2);
  }
  return v8;
}

BOOL CG::DisplayListXMLHelper::parseInterpolationQualityFromAttributes(uint64_t a1, char *a2, _DWORD *a3)
{
  _QWORD *v5;
  const char *v6;
  unint64_t v7;
  BOOL v8;
  void **i;
  void *__p;
  int v12;
  const char *v13;
  int v14;
  const char *v15;
  int v16;
  const char *v17;
  int v18;
  const char *v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:se180100]<0>((char **)&__p, a2);
  v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1, &__p);
  if (SHIBYTE(v13) < 0)
    operator delete(__p);
  if ((_QWORD *)(a1 + 8) == v5)
  {
    return 0;
  }
  else
  {
    __p = "default";
    v13 = "none";
    v14 = 1;
    v15 = "low";
    v16 = 2;
    v17 = "medium";
    v18 = 4;
    v12 = 0;
    v19 = "high";
    v20 = 3;
    v6 = (const char *)(v5 + 7);
    if (*((char *)v5 + 79) < 0)
      v6 = *(const char **)v6;
    v7 = 0;
    v8 = 1;
    for (i = &__p; strcmp(v6, (const char *)*i); i += 2)
    {
      v8 = v7 < 4;
      if (++v7 == 5)
        return 0;
    }
    *a3 = *((_DWORD *)&__p + 4 * v7 + 2);
  }
  return v8;
}

BOOL CG::DisplayListXMLHelper::parseTextDrawingModeFromAttributes(uint64_t a1, _DWORD *a2)
{
  _QWORD *v4;
  const char *v5;
  unint64_t v6;
  BOOL v7;
  void **i;
  void *__p;
  int v11;
  const char *v12;
  int v13;
  const char *v14;
  int v15;
  const char *v16;
  int v17;
  const char *v18;
  int v19;
  const char *v20;
  int v21;
  const char *v22;
  int v23;
  const char *v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:se180100]<0>((char **)&__p, "textDrawingMode");
  v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1, &__p);
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
  if ((_QWORD *)(a1 + 8) == v4)
  {
    return 0;
  }
  else
  {
    __p = "fill";
    v12 = "stroke";
    v13 = 1;
    v14 = "fillStroke";
    v15 = 2;
    v16 = "invisible";
    v17 = 3;
    v18 = "fillCLip";
    v19 = 4;
    v20 = "strokeClip";
    v21 = 5;
    v22 = "fillStrokeClip";
    v23 = 6;
    v11 = 0;
    v24 = "clip";
    v25 = 7;
    v5 = (const char *)(v4 + 7);
    if (*((char *)v4 + 79) < 0)
      v5 = *(const char **)v5;
    v6 = 0;
    v7 = 1;
    for (i = &__p; strcmp(v5, (const char *)*i); i += 2)
    {
      v7 = v6 < 7;
      if (++v6 == 8)
        return 0;
    }
    *a2 = *((_DWORD *)&__p + 4 * v6 + 2);
  }
  return v7;
}

BOOL CG::DisplayListXMLHelper::parsePathDrawingModeFromAttributes(uint64_t a1, _DWORD *a2)
{
  _QWORD *v4;
  const char *v5;
  unint64_t v6;
  BOOL v7;
  void **i;
  void *__p;
  int v11;
  const char *v12;
  int v13;
  const char *v14;
  int v15;
  const char *v16;
  int v17;
  const char *v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:se180100]<0>((char **)&__p, "drawingMode");
  v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1, &__p);
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
  if ((_QWORD *)(a1 + 8) == v4)
  {
    return 0;
  }
  else
  {
    __p = "fill";
    v12 = "eofill";
    v13 = 1;
    v14 = "stroke";
    v15 = 2;
    v16 = "fillStroke";
    v17 = 3;
    v11 = 0;
    v18 = "eoFillStroke";
    v19 = 4;
    v5 = (const char *)(v4 + 7);
    if (*((char *)v4 + 79) < 0)
      v5 = *(const char **)v5;
    v6 = 0;
    v7 = 1;
    for (i = &__p; strcmp(v5, (const char *)*i); i += 2)
    {
      v7 = v6 < 4;
      if (++v6 == 5)
        return 0;
    }
    *a2 = *((_DWORD *)&__p + 4 * v6 + 2);
  }
  return v7;
}

uint64_t CG::DisplayListXMLHelper::parseCGPathFromNode(CG::DisplayListXMLHelper *this, _xmlNode *a2)
{
  uint64_t v2;
  uint64_t String;
  id v4;
  void *v5;
  const __CFData *v6;

  v2 = *((_QWORD *)this + 3);
  if (!v2 || *(_DWORD *)(v2 + 8) != 3)
    return 0;
  String = (uint64_t)xmlNodeListGetString(*(xmlDocPtr *)(v2 + 64), (const xmlNode *)v2, 1);
  if (String)
  {
    v4 = objc_alloc(MEMORY[0x1E0C99D50]);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", String);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (const __CFData *)objc_msgSend(v4, "initWithBase64EncodedString:options:", v5, 1);

    String = CGPathCreateWithData(v6);
  }
  return String;
}

void sub_184DC4978(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CG::DisplayListXMLHelper::parseCGFloatArrayFromElement(uint64_t a1, xmlChar *str2, void **a3)
{
  uint64_t v3;
  uint64_t i;
  xmlChar *String;
  double v8;
  double v9;
  unint64_t v10;
  double *v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  double *v19;
  char *v20;
  char *j;
  uint64_t v22;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      while (xmlStrcmp(*(const xmlChar **)(v3 + 16), str2))
      {
        v3 = *(_QWORD *)(v3 + 48);
        if (!v3)
          return;
      }
      for (i = *(_QWORD *)(v3 + 24); i; i = *(_QWORD *)(i + 48))
      {
        if (*(_DWORD *)(i + 8) == 1 && !xmlStrcmp(*(const xmlChar **)(i + 16), (const xmlChar *)"mem"))
        {
          String = xmlNodeListGetString(*(xmlDocPtr *)(i + 64), *(const xmlNode **)(i + 24), 1);
          if (String)
          {
            v8 = atof((const char *)String);
            v9 = v8;
            v11 = (double *)a3[1];
            v10 = (unint64_t)a3[2];
            if ((unint64_t)v11 >= v10)
            {
              v13 = ((char *)v11 - (_BYTE *)*a3) >> 3;
              if ((unint64_t)(v13 + 1) >> 61)
                goto LABEL_30;
              v14 = v10 - (_QWORD)*a3;
              v15 = v14 >> 2;
              if (v14 >> 2 <= (unint64_t)(v13 + 1))
                v15 = v13 + 1;
              if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
                v16 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v16 = v15;
              if (!v16
                || (v17 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v16)) == 0)
              {
LABEL_29:
                __break(1u);
LABEL_30:
                std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
              }
              v19 = (double *)&v17[8 * v13];
              *v19 = v9;
              v12 = v19 + 1;
              v20 = (char *)*a3;
              for (j = (char *)a3[1]; j != v20; j -= 8)
              {
                v22 = *((_QWORD *)j - 1);
                *((_QWORD *)v19-- - 1) = v22;
              }
              *a3 = v19;
              a3[1] = v12;
              a3[2] = &v17[8 * v18];
              if (v20)
                operator delete(v20);
            }
            else
            {
              if (!v11)
                goto LABEL_29;
              *v11 = v8;
              v12 = v11 + 1;
            }
            a3[1] = v12;
          }
        }
      }
    }
  }
}

void CG::DisplayListXMLHelper::addStringToAttributes(uint64_t **a1, char *a2, char *__s)
{
  _OWORD *v5;
  char *v6;
  void *__p[2];
  char v8;
  void *v9[2];
  uint64_t v10;
  void **v11;

  std::string::basic_string[abi:se180100]<0>((char **)v9, __s);
  std::string::basic_string[abi:se180100]<0>((char **)__p, a2);
  v11 = __p;
  v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, __p, (_OWORD **)&v11);
  v6 = (char *)v5 + 56;
  if (*((char *)v5 + 79) < 0)
    operator delete(*(void **)v6);
  *(_OWORD *)v6 = *(_OWORD *)v9;
  *((_QWORD *)v6 + 2) = v10;
  HIBYTE(v10) = 0;
  LOBYTE(v9[0]) = 0;
  if (v8 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v10) < 0)
      operator delete(v9[0]);
  }
}

void sub_184DC4B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t CG::DisplayListXMLHelper::addFormatToAttributes(uint64_t **a1, char *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  unsigned int v12;
  char *v13;
  size_t v14;
  char *v15;
  _OWORD *v16;
  char *v17;
  uint64_t result;
  void *__p[2];
  char v20;
  void *v21[2];
  uint64_t v22;
  char *v23;
  void **v24;
  _BYTE v25[256];
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v23 = &a9;
  v12 = vsnprintf(0, 0, a3, &a9);
  v13 = 0;
  v14 = (int)++v12;
  v26 = 0;
  if (v12 >= 0x101)
  {
    v13 = (char *)operator new[]();
    v26 = v13;
  }
  v23 = &a9;
  if (!v13)
    v13 = v25;
  vsnprintf(v13, v14, a3, &a9);
  if (v26)
    v15 = v26;
  else
    v15 = v25;
  std::string::basic_string[abi:se180100]<0>((char **)v21, v15);
  std::string::basic_string[abi:se180100]<0>((char **)__p, a2);
  v24 = __p;
  v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, __p, (_OWORD **)&v24);
  v17 = (char *)v16 + 56;
  if (*((char *)v16 + 79) < 0)
    operator delete(*(void **)v17);
  *(_OWORD *)v17 = *(_OWORD *)v21;
  *((_QWORD *)v17 + 2) = v22;
  HIBYTE(v22) = 0;
  LOBYTE(v21[0]) = 0;
  if (v20 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v22) < 0)
      operator delete(v21[0]);
  }
  result = (uint64_t)v26;
  if (v26)
    return MEMORY[0x186DC23C4](v26, 0x1000C4077774924);
  return result;
}

void sub_184DC4D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  _Unwind_Resume(exception_object);
}

void CG::DisplayListXMLHelper::addBoolToAttributes(uint64_t **a1, char *a2, int a3)
{
  char *v5;
  _OWORD *v6;
  char *v7;
  void *__p[2];
  char v9;
  void *v10[2];
  uint64_t v11;
  void **v12;

  if (a3)
    v5 = "true";
  else
    v5 = "false";
  std::string::basic_string[abi:se180100]<0>((char **)v10, v5);
  std::string::basic_string[abi:se180100]<0>((char **)__p, a2);
  v12 = __p;
  v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, __p, (_OWORD **)&v12);
  v7 = (char *)v6 + 56;
  if (*((char *)v6 + 79) < 0)
    operator delete(*(void **)v7);
  *(_OWORD *)v7 = *(_OWORD *)v10;
  *((_QWORD *)v7 + 2) = v11;
  HIBYTE(v11) = 0;
  LOBYTE(v10[0]) = 0;
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v11) < 0)
      operator delete(v10[0]);
  }
}

void sub_184DC4E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void CG::DisplayListXMLHelper::addRectToAttributes(uint64_t **a1, char *a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float64x2_t v8;
  char *v10;

  v8 = *a3;
  if (a3->f64[0] == INFINITY || a3->f64[1] == INFINITY)
  {
    v10 = "rectNull";
  }
  else
  {
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v8, (float64x2_t)vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL)), (int32x4_t)vceqq_f64(a3[1], (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL)))))) & 1) != 0)
    {
      CG::DisplayListXMLHelper::addFormatToAttributes(a1, a2, "{%.17lg, %.17lg}, {%.17lg, %.17lg}", a4, a5, a6, a7, a8, SLOBYTE(v8.f64[0]));
      return;
    }
    v10 = "rectInfinite";
  }
  CG::DisplayListXMLHelper::addStringToAttributes(a1, a2, v10);
}

uint64_t CG::DisplayListXMLHelper::appendFormatToString(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  size_t v10;
  char *v11;
  size_t v12;

  v10 = vsnprintf(0, 0, "%.17lg", &a9) + 1;
  v11 = (char *)operator new[]();
  vsnprintf(v11, v10, "%.17lg", &a9);
  v12 = strlen(v11);
  std::string::append(a1, v11, v12);
  return MEMORY[0x186DC23AC](v11, 0x1000C8077774924);
}

void sub_184DC4FF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DC23AC](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void CG::DisplayListXMLHelper::writeAttributes(_QWORD *a1, xmlTextWriterPtr writer)
{
  _QWORD *v2;
  _QWORD *v3;
  std::string *v5;
  std::string *p_p;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  std::string __p;
  std::string v11;

  v2 = a1 + 1;
  v3 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    do
    {
      if (*((char *)v3 + 55) < 0)
        std::string::__init_copy_ctor_external(&v11, (const std::string::value_type *)v3[4], v3[5]);
      else
        v11 = *(std::string *)(v3 + 4);
      if (*((char *)v3 + 79) < 0)
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v3[7], v3[8]);
      else
        __p = *(std::string *)(v3 + 7);
      if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v5 = &v11;
      else
        v5 = (std::string *)v11.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      xmlTextWriterWriteAttribute(writer, (const xmlChar *)v5, (const xmlChar *)p_p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v11.__r_.__value_.__l.__data_);
      v7 = (_QWORD *)v3[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v3[2];
          v9 = *v8 == (_QWORD)v3;
          v3 = v8;
        }
        while (!v9);
      }
      v3 = v8;
    }
    while (v8 != v2);
  }
}

void sub_184DC5138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL CG::DisplayListXMLHelper::writeCGPath(CG::DisplayListXMLHelper *this, const CGPath *a2, _xmlTextWriter *a3)
{
  _BOOL8 v3;
  CFMutableDataRef EncodedData;
  CFMutableDataRef v6;
  void *v7;
  void *v8;

  v3 = 0;
  if (this && a2)
  {
    EncodedData = CGPathCreateEncodedData(this, 0);
    if (EncodedData)
    {
      v6 = EncodedData;
      -[__CFData base64EncodedStringWithOptions:](EncodedData, "base64EncodedStringWithOptions:", 33);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = v7;
      if (v7)
        v3 = xmlTextWriterWriteRaw(a2, (const xmlChar *)objc_msgSend(objc_retainAutorelease(v7), "UTF8String")) >= 0;
      else
        v3 = 0;

      CFRelease(v6);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void sub_184DC5214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ObjectRef<__CFData const*>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

BOOL CG::DisplayListXMLHelper::writeCGFloatArray(xmlChar *name, double **a2, xmlTextWriterPtr writer)
{
  int started;
  double *v6;
  double *v7;
  double v8;

  started = xmlTextWriterStartElement(writer, name);
  if ((started & 0x80000000) == 0)
  {
    v6 = *a2;
    v7 = a2[1];
    if (*a2 != v7)
    {
      do
      {
        v8 = *v6;
        if ((xmlTextWriterStartElement(writer, (const xmlChar *)"mem") & 0x80000000) == 0)
        {
          xmlTextWriterWriteFormatRaw(writer, "%g", v8);
          xmlTextWriterEndElement(writer);
        }
        ++v6;
      }
      while (v6 != v7);
    }
    started = xmlTextWriterEndElement(writer);
  }
  return started >= 0;
}

void PDFPropertyListRelease(_DWORD *a1)
{
  const void *v3;

  if (a1)
  {
    if ((*a1)-- == 1)
    {
      if (a1[11] == 1)
      {
        v3 = (const void *)*((_QWORD *)a1 + 6);
        if (v3)
          CFRelease(v3);
      }
      free(*((void **)a1 + 13));
      free(a1);
    }
  }
}

_DWORD *CGPDFEncodingCreate(uint64_t a1)
{
  _DWORD *v2;
  int *v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t FontDescriptor;
  uint64_t v8;
  CGPDFDictionary *v10;
  int v11;
  int v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  size_t i;
  int v17;
  CGPDFDictionaryRef value;
  CGPDFArrayRef array;
  CGPDFInteger v21;
  char *v22;

  if (!a1)
    return 0;
  if ((*(_DWORD *)(a1 + 200) - 2) >= 4)
  {
    return 0;
  }
  v2 = malloc_type_calloc(1uLL, 0x40uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  *(_QWORD *)v2 = a1;
  v2[2] = 0;
  v3 = v2 + 2;
  get_base_encoding_from_dict(*(CGPDFDictionary **)(a1 + 16), v2 + 2);
  v4 = v2[2];
  if (v4)
    goto LABEL_22;
  v5 = *(_QWORD *)v2;
  if (!*(_QWORD *)v2)
    goto LABEL_14;
  if (*(_DWORD *)(v5 + 200) != 5)
  {
    if (*(_DWORD *)(v5 + 40))
    {
      if (!CGPDFFontIsEmbedded(v5))
      {
LABEL_19:
        v4 = 1;
        goto LABEL_21;
      }
      v5 = *(_QWORD *)v2;
    }
LABEL_14:
    FontDescriptor = CGPDFFontGetFontDescriptor(v5);
    if (FontDescriptor)
    {
      if ((*(_BYTE *)(FontDescriptor + 40) & 0x20) != 0)
        v4 = 1;
      else
        v4 = -1;
      goto LABEL_21;
    }
    pdf_error("missing or invalid /Flags entry; assuming standard encoding.");
    goto LABEL_19;
  }
  v6 = CGPDFFontGetFontDescriptor(v5);
  if (v6 && get_base_encoding_from_dict(*(CGPDFDictionary **)(v6 + 32), v2 + 2))
  {
    v4 = *v3;
    goto LABEL_22;
  }
  v4 = -1;
LABEL_21:
  *v3 = v4;
LABEL_22:
  v8 = *(_QWORD *)v2;
  if (v4 == 1 && v8 != 0)
  {
    v11 = *(_DWORD *)(v8 + 40);
    if (v11 == 13)
    {
      v12 = 5;
    }
    else
    {
      if (v11 != 14)
      {
LABEL_34:
        v21 = 0;
        v22 = 0;
        value = 0;
        array = 0;
        goto LABEL_35;
      }
      v12 = 6;
    }
    *v3 = v12;
    goto LABEL_34;
  }
  v21 = 0;
  v22 = 0;
  value = 0;
  array = 0;
  if (!v8)
  {
    v10 = 0;
    goto LABEL_36;
  }
LABEL_35:
  v10 = *(CGPDFDictionary **)(v8 + 16);
LABEL_36:
  if (CGPDFDictionaryGetDictionary(v10, "Encoding", &value) && CGPDFDictionaryGetArray(value, "Differences", &array))
  {
    v13 = malloc_type_calloc(1uLL, 0x800uLL, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    *((_QWORD *)v2 + 4) = v13;
    if (array)
    {
      v14 = *((_QWORD *)array + 2);
      if (v14)
      {
        v15 = 0;
        for (i = 0; i != v14; ++i)
        {
          if (CGPDFArrayGetInteger(array, i, &v21))
          {
            v15 = v21;
          }
          else if (CGPDFArrayGetName(array, i, (const char **)&v22) && v15 <= 0xFF && v22)
          {
            *(_QWORD *)(*((_QWORD *)v2 + 4) + 8 * v15++) = v22;
          }
        }
      }
    }
  }
  v17 = *(_DWORD *)(a1 + 40);
  if (v17)
    *((_BYTE *)v2 + 48) = v17 == 14;
  return v2;
}

BOOL get_base_encoding_from_dict(CGPDFDictionary *a1, _DWORD *a2)
{
  _BOOL8 result;
  CGPDFDictionaryRef dict;
  char *value;

  dict = 0;
  value = 0;
  if (CGPDFDictionaryGetName(a1, "Encoding", (const char **)&value)
    || (result = CGPDFDictionaryGetDictionary(a1, "Encoding", &dict))
    && (result = CGPDFDictionaryGetName(dict, "BaseEncoding", (const char **)&value)))
  {
    *a2 = CGPDFGetBaseEncodingForName((uint64_t)value);
    return 1;
  }
  return result;
}

void CGPDFEncodingRelease(uint64_t a1)
{
  if (a1)
  {
    free(*(void **)(a1 + 56));
    free(*(void **)(a1 + 40));
    free(*(void **)(a1 + 32));
    free_builtin_names(*(char **)(a1 + 16));
    free((void *)a1);
  }
}

void free_builtin_names(char *a1)
{
  uint64_t i;

  if (a1)
  {
    for (i = 0; i != 2048; i += 8)
      free(*(void **)&a1[i]);
    free(a1);
  }
}

_OWORD *CGPDFEncodingGetGlyphVector(size_t a1)
{
  uint64_t Font;
  int v3;
  _OWORD *v4;
  unint64_t *v5;
  uint64_t v6;
  int16x8_t v7;
  int16x8_t v8;
  _BOOL4 IsEmbedded;
  CGPDFDictionary *v10;
  char *v11;
  __int16 v12;
  uint64_t i;
  int16x4_t v14;
  uint64_t v15;
  int16x8_t v16;
  int16x8_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unsigned __int16 *UnicodesForIndex;
  unsigned int v23;
  char *v24;
  char **unimap;
  unint64_t *v26;
  char *v27;
  unint64_t v28;
  __int16 v30;
  char *value;

  if (!a1)
    return 0;
  Font = CGPDFFontGetFont(*(_QWORD *)a1);
  if (*(_QWORD *)a1)
    v3 = *(_DWORD *)(*(_QWORD *)a1 + 200);
  else
    v3 = 0;
  v5 = (unint64_t *)(a1 + 40);
  v4 = (_OWORD *)atomic_load((unint64_t *)(a1 + 40));
  if (!v4)
  {
    v4 = malloc_type_malloc(0x200uLL, 0x566C45D1uLL);
    __CFSetLastAllocationEventName();
    if ((v3 - 2) < 2)
    {
      CGPDFFontIsEmbedded(*(_QWORD *)a1);
      get_type1_glyph_vector(a1, Font, 0, (uint64_t)v4);
    }
    else
    {
      if (v3 != 4)
      {
        if (v3 == 5)
        {
          v6 = 0;
          v7 = (int16x8_t)xmmword_185004910;
          v8.i64[0] = 0x8000800080008;
          v8.i64[1] = 0x8000800080008;
          do
          {
            v4[v6] = v7;
            v7 = vaddq_s16(v7, v8);
            ++v6;
          }
          while (v6 != 32);
        }
        else
        {
          v4[30] = 0u;
          v4[31] = 0u;
          v4[28] = 0u;
          v4[29] = 0u;
          v4[26] = 0u;
          v4[27] = 0u;
          v4[24] = 0u;
          v4[25] = 0u;
          v4[22] = 0u;
          v4[23] = 0u;
          v4[20] = 0u;
          v4[21] = 0u;
          v4[18] = 0u;
          v4[19] = 0u;
          v4[16] = 0u;
          v4[17] = 0u;
          v4[14] = 0u;
          v4[15] = 0u;
          v4[12] = 0u;
          v4[13] = 0u;
          v4[10] = 0u;
          v4[11] = 0u;
          v4[8] = 0u;
          v4[9] = 0u;
          v4[6] = 0u;
          v4[7] = 0u;
          v4[4] = 0u;
          v4[5] = 0u;
          v4[2] = 0u;
          v4[3] = 0u;
          *v4 = 0u;
          v4[1] = 0u;
        }
        goto LABEL_39;
      }
      IsEmbedded = CGPDFFontIsEmbedded(*(_QWORD *)a1);
      if (IsEmbedded)
      {
        value = 0;
        v10 = *(_QWORD *)a1 ? *(CGPDFDictionary **)(*(_QWORD *)a1 + 16) : 0;
        if (CGPDFDictionaryGetName(v10, "Encoding", (const char **)&value))
        {
          v11 = value;
          if (!strcmp(value, "Identity-H") || !strcmp(v11, "Identity-V"))
          {
            v15 = 0;
            v16 = (int16x8_t)xmmword_185004910;
            v17.i64[0] = 0x8000800080008;
            v17.i64[1] = 0x8000800080008;
            do
            {
              v4[v15] = v16;
              v16 = vaddq_s16(v16, v17);
              ++v15;
            }
            while (v15 != 32);
            goto LABEL_39;
          }
        }
      }
      get_truetype_glyph_vector(a1, Font, IsEmbedded, 0, v4);
    }
    if (!CGPDFFontIsEmbedded(*(_QWORD *)a1))
    {
      value = "space";
      v30 = 0;
      if (Font)
      {
        (*(void (**)(_QWORD, char **, __int16 *, uint64_t))(*(_QWORD *)(Font + 16) + 280))(*(_QWORD *)(Font + 112), &value, &v30, 1);
        v12 = v30;
        if (v30)
        {
          for (i = 0; i != 512; i += 8)
          {
            v14 = vceqz_s16(*(int16x4_t *)((char *)v4 + i));
            if ((v14.i8[0] & 1) != 0)
              *(_WORD *)((char *)v4 + i) = v12;
            if ((v14.i8[2] & 1) != 0)
              *(_WORD *)((char *)v4 + i + 2) = v12;
            if ((v14.i8[4] & 1) != 0)
              *(_WORD *)((char *)v4 + i + 4) = v12;
            if ((v14.i8[6] & 1) != 0)
              *(_WORD *)((char *)v4 + i + 6) = v12;
          }
        }
      }
    }
LABEL_39:
    while (1)
    {
      v18 = __ldaxr(v5);
      if (v18)
        break;
      if (!__stlxr((unint64_t)v4, v5))
        goto LABEL_43;
    }
    __clrex();
    free(v4);
    v4 = (_OWORD *)v18;
  }
LABEL_43:
  if (v3 == 4)
  {
    v19 = CGPDFFontGetFont(*(_QWORD *)a1);
    if (v19)
    {
      v20 = (_QWORD *)v19;
      v21 = 0;
      value = 0;
      do
      {
        UnicodesForIndex = (unsigned __int16 *)CGPDFEncodingGetUnicodesForIndex(a1, v21, &value);
        v23 = *((unsigned __int16 *)v4 + v21);
        v24 = value;
        unimap = get_unimap(v20);
        if (v24 == (char *)1)
        {
          v26 = (unint64_t *)(unimap + 2);
          v27 = (char *)atomic_load((unint64_t *)unimap + 2);
          if (!v27)
          {
            v27 = (char *)malloc_type_calloc(1uLL, 0x208uLL, 0x1080040036EC52CuLL);
            *(_WORD *)v27 = -1;
            while (1)
            {
              v28 = __ldaxr(v26);
              if (v28)
                break;
              if (!__stlxr((unint64_t)v27, v26))
                goto LABEL_53;
            }
            __clrex();
            CGFontIndexMapRelease(v27);
            v27 = (char *)v28;
          }
LABEL_53:
          CGFontIndexMapAddIndex((unsigned __int16 *)v27, v23, *UnicodesForIndex);
        }
        ++v21;
      }
      while (v21 != 256);
    }
  }
  return v4;
}

void get_truetype_glyph_vector(uint64_t a1, uint64_t a2, int a3, int a4, _OWORD *a5)
{
  unint64_t FontDescriptor;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[2];
  __int16 v23;
  const char *v24;

  if (a3)
  {
    lookup_glyphs_by_cmap(a1, a2, a5);
    return;
  }
  FontDescriptor = CGPDFFontGetFontDescriptor(*(_QWORD *)a1);
  if (FontDescriptor && ((*(unsigned __int8 *)(FontDescriptor + 40) >> 5) & 1) != 0
    || (v10 = *(_DWORD *)(a1 + 8), (v10 & 0xFFFFFFFE) == 2))
  {
    lookup_glyphs_by_cmap_nonsymbolic(a1, a2, a5);
    return;
  }
  if (v10 == -1)
    v11 = 0;
  else
    v11 = v10 - 1;
  if (v11 > 6)
    v12 = 0;
  else
    v12 = (uint64_t)*(&off_1E165E7D8 + v11);
  v13 = 0;
  v14 = MEMORY[0x1E0C80978];
  do
  {
    v15 = *(_QWORD *)(a1 + 32);
    if (!v15 || (v16 = *(const char **)(v15 + 8 * v13)) == 0)
    {
      if (!v12)
      {
        v16 = 0;
        goto LABEL_24;
      }
      v16 = *(const char **)(v12 + 8 * v13);
    }
    if (a4)
    {
      if (v16)
      {
        if (strlen(v16) == 1)
        {
          v17 = *(unsigned __int8 *)v16;
          if ((v17 - 97) <= 0x19)
          {
            v22[0] = *(_DWORD *)(v14 + 4 * v17 + 2108);
            v22[1] = 0;
            v16 = v22;
          }
        }
      }
    }
LABEL_24:
    v24 = v16;
    v23 = 0;
    if (a2)
    {
      (*(void (**)(_QWORD, const char **, __int16 *, uint64_t))(*(_QWORD *)(a2 + 16) + 280))(*(_QWORD *)(a2 + 112), &v24, &v23, 1);
      v18 = v23;
    }
    else
    {
      v18 = 0;
    }
    *((_WORD *)a5 + v13++) = v18;
  }
  while (v13 != 256);
  if (!*(_WORD *)a5)
  {
    v19 = 1;
    while (v19 != 256)
    {
      v20 = v19;
      if (*((unsigned __int16 *)a5 + v19++))
      {
        if ((unint64_t)(v20 - 1) < 0xFF)
          return;
        break;
      }
    }
    lookup_glyphs_by_cmap(a1, a2, a5);
  }
}

size_t get_type1_glyph_vector(size_t result, uint64_t a2, int a3, uint64_t a4)
{
  size_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  __int16 v22;
  char v23;
  char v24;
  __int16 v25;
  const char *v26;

  v7 = result;
  v8 = *(_DWORD *)(result + 8);
  if (v8 != -1)
  {
    v9 = v8 - 1;
    if (v9 > 6)
      v10 = 0;
    else
      v10 = (uint64_t)*(&off_1E165E7D8 + v9);
    v17 = 0;
    v18 = MEMORY[0x1E0C80978];
    while (1)
    {
      v19 = *(_QWORD *)(v7 + 32);
      if (v19)
      {
        v20 = *(const char **)(v19 + 8 * v17);
        if (v20)
          goto LABEL_25;
      }
      if (v10)
        break;
      v20 = 0;
LABEL_31:
      v26 = v20;
      v25 = 0;
      if (a2)
      {
        result = (*(uint64_t (**)(_QWORD, const char **, __int16 *, uint64_t))(*(_QWORD *)(a2 + 16) + 280))(*(_QWORD *)(a2 + 112), &v26, &v25, 1);
        v22 = v25;
      }
      else
      {
        v22 = 0;
      }
      *(_WORD *)(a4 + 2 * v17++) = v22;
      if (v17 == 256)
        return result;
    }
    v20 = *(const char **)(v10 + 8 * v17);
LABEL_25:
    if (a3)
    {
      if (v20)
      {
        result = strlen(v20);
        if (result == 1)
        {
          v21 = *(unsigned __int8 *)v20;
          if ((v21 - 97) <= 0x19)
          {
            v23 = *(_DWORD *)(v18 + 4 * v21 + 2108);
            v24 = 0;
            v20 = &v23;
          }
        }
      }
    }
    goto LABEL_31;
  }
  if (a2)
    result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a2 + 16) + 240))(*(_QWORD *)(a2 + 112), a4);
  if (*(_QWORD *)(v7 + 32))
  {
    v11 = 0;
    v12 = MEMORY[0x1E0C80978];
    do
    {
      v13 = *(_QWORD *)(v7 + 32);
      v14 = *(const char **)(v13 + 8 * v11);
      if (v14)
      {
        if (a3)
        {
          result = strlen(*(const char **)(v13 + 8 * v11));
          if (result == 1)
          {
            v15 = *(unsigned __int8 *)v14;
            if ((v15 - 97) <= 0x19)
            {
              v23 = *(_DWORD *)(v12 + 4 * v15 + 2108);
              v24 = 0;
              v14 = &v23;
            }
          }
        }
        v26 = v14;
        v25 = 0;
        if (a2)
        {
          result = (*(uint64_t (**)(_QWORD, const char **, __int16 *, uint64_t))(*(_QWORD *)(a2 + 16) + 280))(*(_QWORD *)(a2 + 112), &v26, &v25, 1);
          v16 = v25;
        }
        else
        {
          v16 = 0;
        }
        *(_WORD *)(a4 + 2 * v11) = v16;
      }
      ++v11;
    }
    while (v11 != 256);
  }
  return result;
}

uint64_t CGPDFEncodingGetUnicodesForIndex(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *unichar_info;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  unichar_info = get_unichar_info(a1);
  if (a2 <= 0xFF && unichar_info)
  {
    if (a2)
      v6 = unichar_info[a2];
    else
      v6 = 0;
    v8 = unichar_info[a2 + 1];
    if (a3)
      *a3 = v8 - v6;
    if (v8 == v6)
      return 0;
    else
      return (uint64_t)unichar_info + 2 * v6 + 2056;
  }
  else
  {
    result = 0;
    if (a3)
      *a3 = 0;
  }
  return result;
}

_QWORD *get_unichar_info(uint64_t a1)
{
  unint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)(_QWORD, _QWORD, _QWORD);
  unint64_t unichars_for_index;
  uint64_t v12;
  unint64_t v13;
  _WORD *v14;
  uint64_t (*v15)(_QWORD, _QWORD, _WORD *);
  uint64_t v16;
  unint64_t v17;

  if (!a1)
    return 0;
  v2 = (unint64_t *)(a1 + 56);
  v3 = (_QWORD *)atomic_load((unint64_t *)(a1 + 56));
  if (!v3)
  {
    v4 = CGPDFFontGetToUnicodeCMap(*(_QWORD *)a1);
    v5 = *(_DWORD *)(a1 + 8) - 1;
    if (v5 > 6)
      v6 = 0;
    else
      v6 = (uint64_t)*(&off_1E165E810 + v5);
    v7 = 0;
    v8 = 0;
    for (i = 0; i != 256; ++i)
    {
      if (!v4
        || !cmap_vtable
        || (v10 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(cmap_vtable + 64)) == 0
        || (unichars_for_index = v10(*(_QWORD *)(v4 + 16), (unsigned __int16)i, 0)) == 0)
      {
        unichars_for_index = get_unichars_for_index(a1, v6, i, 0);
      }
      if (v7 <= unichars_for_index)
        v7 = unichars_for_index;
      v8 += unichars_for_index;
    }
    v3 = malloc_type_calloc(1uLL, 2 * v8 + 2056, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    v12 = 0;
    v13 = 0;
    *v3 = v7;
    v14 = v3 + 257;
    do
    {
      if (!v4
        || !cmap_vtable
        || (v15 = *(uint64_t (**)(_QWORD, _QWORD, _WORD *))(cmap_vtable + 64)) == 0
        || (v16 = v15(*(_QWORD *)(v4 + 16), (unsigned __int16)v13, v14)) == 0)
      {
        v16 = get_unichars_for_index(a1, v6, v13, v14);
      }
      v14 += v16;
      v12 += v16;
      v3[++v13] = v12;
    }
    while (v13 != 256);
    while (1)
    {
      v17 = __ldaxr(v2);
      if (v17)
        break;
      if (!__stlxr((unint64_t)v3, v2))
        return v3;
    }
    __clrex();
    free(v3);
    return (_QWORD *)v17;
  }
  return v3;
}

uint64_t get_unichars_for_index(uint64_t a1, uint64_t a2, unint64_t a3, _WORD *a4)
{
  uint64_t v6;
  char *NameForIndex;
  char *v8;
  __int16 v9;
  __int16 v10;

  if (a2)
  {
    v6 = *(_QWORD *)(a1 + 32);
    if (!v6 || !*(_QWORD *)(v6 + 8 * a3))
    {
      if (!a4)
        return 1;
      v10 = *(_WORD *)(a2 + 2 * a3);
LABEL_13:
      *a4 = v10;
      return 1;
    }
  }
  NameForIndex = (char *)CGPDFEncodingGetNameForIndex(a1, a3);
  v8 = NameForIndex;
  if (!*(_BYTE *)(a1 + 24))
    return CGPDFGetUnicharsForGlyphName(NameForIndex, *(unsigned __int8 *)(a1 + 48), a4);
  if (NameForIndex)
  {
    if (strcmp(NameForIndex, ".notdef"))
    {
      if (strlen(v8) >= 3)
      {
        v9 = digit_to_int(v8[1]);
        v10 = digit_to_int(v8[2]) + 16 * v9;
        if (v10)
        {
          if (!a4)
            return 1;
          goto LABEL_13;
        }
      }
    }
  }
  return 0;
}

uint64_t CGPDFEncodingGetNameForIndex(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  unsigned int v7;
  char *v8;
  unint64_t *v9;
  int v10;
  uint64_t i;
  const char *v12;
  size_t v13;
  char *v14;
  unint64_t v15;
  char v16;

  result = 0;
  if (a1)
  {
    if (a2 <= 0xFF)
    {
      v5 = *(_QWORD *)(a1 + 32);
      if (!v5 || (result = *(_QWORD *)(v5 + 8 * a2)) == 0)
      {
        v6 = *(_DWORD *)(a1 + 8);
        if (v6 != -1)
        {
          v7 = v6 - 1;
          if (v7 <= 6)
          {
            v8 = (char *)*(&off_1E165E7D8 + v7);
            goto LABEL_9;
          }
          return 0;
        }
        v9 = (unint64_t *)(a1 + 16);
        v8 = (char *)atomic_load((unint64_t *)(a1 + 16));
        if (!v8)
        {
          if (!*(_QWORD *)a1)
            return 0;
          v10 = *(_DWORD *)(*(_QWORD *)a1 + 200);
          if ((v10 - 2) > 2)
            return 0;
          v8 = (char *)malloc_type_calloc(1uLL, 0x800uLL, 0x33BCE901uLL);
          __CFSetLastAllocationEventName();
          if (v10 == 4)
          {
            for (i = 0; i != 256; ++i)
            {
              v12 = CGPDFEncodingVectorMacRoman[i];
              v13 = strlen(v12);
              v14 = (char *)malloc_type_malloc(v13 + 1, 0x566C45D1uLL);
              __CFSetLastAllocationEventName();
              *(_QWORD *)&v8[i * 8] = v14;
              strcpy(v14, v12);
            }
          }
          else
          {
            get_builtin_type1_names(*(_QWORD *)a1, (uint64_t)v8, (_BYTE *)(a1 + 24));
          }
          while (1)
          {
            v15 = __ldaxr(v9);
            if (v15)
              break;
            if (!__stlxr((unint64_t)v8, v9))
            {
              v16 = 1;
              goto LABEL_24;
            }
          }
          v16 = 0;
          __clrex();
LABEL_24:
          if ((v16 & 1) == 0)
          {
            free_builtin_names(v8);
            v8 = (char *)v15;
          }
        }
LABEL_9:
        if (v8)
          return *(_QWORD *)&v8[8 * a2];
        return 0;
      }
    }
  }
  return result;
}

uint64_t digit_to_int(unsigned int a1)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  int v5;

  if (a1 <= 0x7F)
  {
    v2 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a1 + 60);
    if ((v2 & 0x400) == 0)
    {
      if ((v2 & 0x10000) == 0)
        return 0;
      v4 = (unsigned __int16)v2 & 0x8000;
      goto LABEL_10;
    }
    return a1 - 48;
  }
  if (__maskrune_l(a1, 0x400uLL, 0))
    return a1 - 48;
  result = __maskrune_l(a1, 0x10000uLL, 0);
  if (!(_DWORD)result)
    return result;
  v4 = __maskrune_l(a1, 0x8000uLL, 0);
LABEL_10:
  if (v4)
    v5 = -55;
  else
    v5 = -87;
  return v5 + a1;
}

void get_builtin_type1_names(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t Font;
  __n128 v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t i;
  size_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _WORD v28[256];
  uint64_t v29;

  v27 = a3;
  v29 = *MEMORY[0x1E0C80C00];
  Font = CGPDFFontGetFont(a1);
  v6 = Font;
  if (Font)
  {
    (*(void (**)(_QWORD, _WORD *))(*(_QWORD *)(Font + 16) + 240))(*(_QWORD *)(Font + 112), v28);
    Font = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v6 + 16) + 288))(*(_QWORD *)(v6 + 112));
  }
  v26 = (uint64_t)&v26;
  v7 = Font + 1;
  MEMORY[0x1E0C80A78](Font, v5);
  v10 = (char *)&v26 - v9;
  if (v7 == -1)
    v11 = 0;
  else
    v11 = (char *)&v26 - v9;
  if (v8 >= 0x82)
    v11 = (char *)malloc_type_malloc(v7, 0xB36A7E2uLL);
  for (i = 0; i != 256; ++i)
  {
    if (v6
      && ((*(uint64_t (**)(_QWORD, _QWORD, char *, size_t))(*(_QWORD *)(v6 + 16) + 296))(*(_QWORD *)(v6 + 112), (unsigned __int16)v28[i], v11, v7) & 1) != 0)
    {
      v13 = strlen(v11);
      v14 = (char *)malloc_type_malloc(v13 + 1, 0x566C45D1uLL);
      __CFSetLastAllocationEventName();
      *(_QWORD *)(a2 + 8 * i) = v14;
      strcpy(v14, v11);
    }
    else
    {
      *(_QWORD *)(a2 + 8 * i) = 0;
    }
  }
  if (v11 != v10)
    free(v11);
  v15 = 0;
  v16 = 0;
  v17 = 1;
  v18 = MEMORY[0x1E0C80978];
  while (1)
  {
    v19 = *(const char **)(a2 + v15);
    if (v19)
    {
      if (strcmp(*(const char **)(a2 + v15), ".notdef"))
        break;
    }
    v20 = v16;
LABEL_36:
    v15 += 8;
    v16 = v20;
    if (v15 == 2048)
    {
      LOBYTE(v21) = v17 ^ 1;
      goto LABEL_39;
    }
  }
  if (strlen(v19) != 3)
    goto LABEL_38;
  v20 = *v19;
  if (!(_BYTE)v16)
  {
    if ((v20 & 0x80000000) != 0)
      v21 = __maskrune_l(*v19, 0x100uLL, 0);
    else
      v21 = *(_DWORD *)(v18 + 4 * v20 + 60) & 0x100;
    if (!v21)
      goto LABEL_39;
LABEL_28:
    v22 = v19[1];
    if ((v22 & 0x80000000) != 0)
    {
      v23 = __maskrune_l(v22, 0x10000uLL, 0);
      LOBYTE(v21) = v23;
      if (!v23)
        goto LABEL_39;
    }
    else
    {
      LODWORD(v21) = *(_DWORD *)(v18 + 4 * v22 + 60) & 0x10000;
      if (!(_DWORD)v21)
        goto LABEL_39;
    }
    v24 = v19[2];
    if ((v24 & 0x80000000) != 0)
      v25 = __maskrune_l(v24, 0x10000uLL, 0);
    else
      v25 = *(_DWORD *)(v18 + 4 * v24 + 60) & 0x10000;
    v17 = 0;
    LOBYTE(v21) = 0;
    if (!v25)
      goto LABEL_39;
    goto LABEL_36;
  }
  v20 = v16;
  if (*(unsigned __int8 *)v19 == v16)
    goto LABEL_28;
LABEL_38:
  LOBYTE(v21) = 0;
LABEL_39:
  *v27 = v21 & 1;
}

void lookup_glyphs_by_cmap(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t FontDescriptor;
  __int16 *v7;
  unsigned int _3_0_cmap_prefix;
  uint64_t v9;
  int16x8_t v10;
  int8x16_t v11;
  int16x8_t v12;
  uint64_t i;
  __int16 v14;
  unint64_t v15;
  unsigned __int16 v16[256];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  FontDescriptor = CGPDFFontGetFontDescriptor(*(_QWORD *)a1);
  if (FontDescriptor && (*(_BYTE *)(FontDescriptor + 40) & 0x20) != 0 || (*(_DWORD *)(a1 + 8) & 0xFFFFFFFE) == 2)
  {
    lookup_glyphs_by_cmap_nonsymbolic(a1, a2, a3);
    return;
  }
  v7 = (__int16 *)malloc_type_calloc(1uLL, 0x208uLL, 0x1080040036EC52CuLL);
  *v7 = 0;
  if (a2)
  {
    if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD, __int16 *))(*(_QWORD *)(a2 + 16) + 248))(*(_QWORD *)(a2 + 112), 3, 0, v7))
    {
      _3_0_cmap_prefix = get_3_0_cmap_prefix(v7);
      v9 = 0;
      v10 = (int16x8_t)xmmword_185004910;
      v11 = (int8x16_t)vdupq_n_s16(_3_0_cmap_prefix);
      v12.i64[0] = 0x8000800080008;
      v12.i64[1] = 0x8000800080008;
      do
      {
        *(int8x16_t *)&v16[v9] = vorrq_s8(v11, (int8x16_t)v10);
        v10 = vaddq_s16(v10, v12);
        v9 += 8;
      }
      while (v9 != 256);
      CGFontIndexMapGetValues(v7, v16, 256, a3);
      goto LABEL_22;
    }
    if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD, __int16 *))(*(_QWORD *)(a2 + 16) + 248))(*(_QWORD *)(a2 + 112), 1, 0, v7))
    {
      for (i = 0; i != 256; ++i)
      {
        if (v7)
        {
          if (v7 == (__int16 *)-1)
          {
            v14 = i;
          }
          else
          {
            v15 = atomic_load((unint64_t *)&v7[4 * ((unsigned __int16)i >> 10) + 4]);
            if (v15)
              v14 = *(_WORD *)(v15 + 2 * i);
            else
              v14 = *v7;
          }
        }
        else
        {
          v14 = -1;
        }
        *((_WORD *)a3 + i) = v14;
      }
      goto LABEL_22;
    }
  }
  lookup_glyphs_by_cmap_nonsymbolic(a1, a2, a3);
LABEL_22:
  CGFontIndexMapRelease((char *)v7);
}

void lookup_glyphs_by_cmap_nonsymbolic(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t i;
  int64x2_t v9;
  int32x2_t v10;
  uint64_t j;
  int32x2_t v12;
  __int128 v13;
  __int16 *v14;
  uint64_t v15;
  char v16;
  char *v17;
  int v18;
  unint64_t v19;
  unsigned __int16 _3_0_cmap_prefix;
  uint64_t m;
  unsigned __int16 v22;
  unint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD);
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t n;
  __int16 v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  unsigned __int16 *v39;
  uint64_t k;
  uint64_t (*v41)(_QWORD, _QWORD, unsigned __int16 *);
  unint64_t v42;
  unint64_t v43;
  _BYTE v44[6];
  __int16 v45;
  uint64_t v46;
  _BYTE v47[2048];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a1 + 8) - 1;
  if (v6 > 6)
    bzero(v47, 0x800uLL);
  else
    memcpy(v47, *(&off_1E165E7D8 + v6), sizeof(v47));
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
  {
    for (i = 0; i != 2048; i += 16)
    {
      v9 = *(int64x2_t *)(v7 + i);
      v10 = vmovn_s64(vtstq_s64(v9, v9));
      if ((v10.i8[0] & 1) != 0)
        *(_QWORD *)&v47[i] = v9.i64[0];
      if ((v10.i8[4] & 1) != 0)
        *(_QWORD *)&v47[i + 8] = v9.i64[1];
    }
  }
  for (j = 0; j != 128; ++j)
  {
    v12 = vmovn_s64(vceqzq_s64(*(int64x2_t *)&v47[j * 16]));
    v13 = CGPDFEncodingVectorStandard[j];
    if ((v12.i8[0] & 1) != 0)
      *(_QWORD *)&v47[j * 16] = v13;
    if ((v12.i8[4] & 1) != 0)
      *(_QWORD *)&v47[j * 16 + 8] = *((_QWORD *)&v13 + 1);
  }
  v14 = (__int16 *)malloc_type_calloc(1uLL, 0x208uLL, 0x1080040036EC52CuLL);
  *v14 = 0;
  if (!a2)
    goto LABEL_64;
  if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t, __int16 *))(*(_QWORD *)(a2 + 16) + 248))(*(_QWORD *)(a2 + 112), 3, 1, v14))
  {
    v15 = 0;
    v16 = 0;
    while (1)
    {
      v17 = *(char **)&v47[8 * v15];
      if (!v17 || CGPDFGetUnicharsForGlyphName(*(char **)&v47[8 * v15], 0, 0) != 1)
        break;
      LOWORD(v46) = 0;
      CGPDFGetUnicharsForGlyphName(v17, 0, &v46);
      v18 = (unsigned __int16)v46;
      if (v14 == (__int16 *)-1)
        goto LABEL_32;
      if (v14)
      {
        v19 = atomic_load((unint64_t *)((char *)v14 + (((unint64_t)(unsigned __int16)v46 >> 7) & 0x1F8)
                                                           + 8));
        if (v19)
          v18 = *(unsigned __int16 *)(v19 + 2 * (v46 & 0x3FF));
        else
          v18 = (unsigned __int16)*v14;
LABEL_32:
        *((_WORD *)a3 + v15) = v18;
        if (v18)
          goto LABEL_27;
LABEL_26:
        v16 = 1;
        goto LABEL_27;
      }
      *((_WORD *)a3 + v15) = -1;
LABEL_27:
      if (++v15 == 256)
      {
        if ((v16 & 1) != 0)
        {
          v24 = CGPDFFontGetToUnicodeCMap(*(_QWORD *)a1);
          if (v24)
          {
            v26 = v24;
            if (cmap_vtable && (v27 = *(uint64_t (**)(_QWORD))(cmap_vtable + 56)) != 0)
              v28 = v27(*(_QWORD *)(v24 + 16));
            else
              v28 = 0;
            v35 = MEMORY[0x1E0C80A78](v28, v25);
            v38 = (unsigned __int16 *)&v44[-v37];
            if (v36 <= 0x7FFFFFFFFFFFFFFELL)
              v39 = (unsigned __int16 *)&v44[-v37];
            else
              v39 = 0;
            if (v36 - 0x7FFFFFFFFFFFFFFFLL >= 0x8000000000000022)
              v39 = (unsigned __int16 *)malloc_type_malloc(2 * v35, 0x32E87CC9uLL);
            for (k = 0; k != 256; ++k)
            {
              if (!*((_WORD *)a3 + k))
              {
                if (cmap_vtable)
                {
                  v41 = *(uint64_t (**)(_QWORD, _QWORD, unsigned __int16 *))(cmap_vtable + 64);
                  if (v41)
                  {
                    if (v41(*(_QWORD *)(v26 + 16), (unsigned __int16)k, v39))
                    {
                      if (v14)
                      {
                        v42 = *v39;
                        if (v14 != (__int16 *)-1)
                        {
                          v43 = atomic_load((unint64_t *)((char *)v14 + ((v42 >> 7) & 0x1F8) + 8));
                          if (v43)
                            LOWORD(v42) = *(_WORD *)(v43 + 2 * (v42 & 0x3FF));
                          else
                            LOWORD(v42) = *v14;
                        }
                      }
                      else
                      {
                        LOWORD(v42) = -1;
                      }
                      *((_WORD *)a3 + k) = v42;
                    }
                  }
                }
              }
            }
            if (v39 != v38)
              free(v39);
          }
        }
        goto LABEL_65;
      }
    }
    *((_WORD *)a3 + v15) = 0;
    goto LABEL_26;
  }
  if (!(*(unsigned int (**)(_QWORD, uint64_t, _QWORD, __int16 *))(*(_QWORD *)(a2 + 16) + 248))(*(_QWORD *)(a2 + 112), 3, 0, v14))
  {
    if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD, __int16 *))(*(_QWORD *)(a2 + 16) + 248))(*(_QWORD *)(a2 + 112), 1, 0, v14))
    {
      v29 = 0;
      while (1)
      {
        v30 = *(const char **)&v47[8 * v29];
        if (v30)
        {
          v31 = 0;
          while (strcmp(v30, CGPDFEncodingVectorMacRoman[v31]))
          {
            if (++v31 == 256)
              goto LABEL_55;
          }
          if (v14)
          {
            if (v14 != (__int16 *)-1)
            {
              v32 = atomic_load((unint64_t *)&v14[4 * ((unsigned __int16)v31 >> 10) + 4]);
              if (v32)
                LOWORD(v31) = *(_WORD *)(v32 + 2 * (v31 & 0x3FF));
              else
                LOWORD(v31) = *v14;
            }
          }
          else
          {
            LOWORD(v31) = -1;
          }
        }
        else
        {
LABEL_55:
          LOWORD(v31) = 0;
        }
        *((_WORD *)a3 + v29++) = v31;
        if (v29 == 256)
          goto LABEL_65;
      }
    }
LABEL_64:
    a3[30] = 0u;
    a3[31] = 0u;
    a3[28] = 0u;
    a3[29] = 0u;
    a3[26] = 0u;
    a3[27] = 0u;
    a3[24] = 0u;
    a3[25] = 0u;
    a3[22] = 0u;
    a3[23] = 0u;
    a3[20] = 0u;
    a3[21] = 0u;
    a3[18] = 0u;
    a3[19] = 0u;
    a3[16] = 0u;
    a3[17] = 0u;
    a3[14] = 0u;
    a3[15] = 0u;
    a3[12] = 0u;
    a3[13] = 0u;
    a3[10] = 0u;
    a3[11] = 0u;
    a3[8] = 0u;
    a3[9] = 0u;
    a3[6] = 0u;
    a3[7] = 0u;
    a3[4] = 0u;
    a3[5] = 0u;
    a3[2] = 0u;
    a3[3] = 0u;
    *a3 = 0u;
    a3[1] = 0u;
    goto LABEL_65;
  }
  _3_0_cmap_prefix = get_3_0_cmap_prefix(v14);
  for (m = 0; m != 256; ++m)
  {
    if (v14)
    {
      v22 = _3_0_cmap_prefix | m;
      if (v14 != (__int16 *)-1)
      {
        v23 = atomic_load((unint64_t *)&v14[4 * (v22 >> 10) + 4]);
        if (v23)
          v22 = *(_WORD *)(v23 + 2 * ((_3_0_cmap_prefix | (unsigned __int16)m) & 0x3FF));
        else
          v22 = *v14;
      }
    }
    else
    {
      v22 = -1;
    }
    *((_WORD *)a3 + m) = v22;
  }
LABEL_65:
  CGFontIndexMapRelease((char *)v14);
  for (n = 0; n != 256; ++n)
  {
    if (!*((_WORD *)a3 + n) && *(_QWORD *)&v47[8 * n])
    {
      v46 = *(_QWORD *)&v47[8 * n];
      v45 = 0;
      if (a2)
      {
        (*(void (**)(_QWORD, uint64_t *, __int16 *, uint64_t))(*(_QWORD *)(a2 + 16) + 280))(*(_QWORD *)(a2 + 112), &v46, &v45, 1);
        v34 = v45;
      }
      else
      {
        v34 = 0;
      }
      *((_WORD *)a3 + n) = v34;
    }
  }
}

uint64_t get_3_0_cmap_prefix(__int16 *a1)
{
  uint64_t v2;
  int16x8_t v3;
  uint64_t v4;
  uint64_t v5;
  int8x16_t v6;
  int16x8_t v7;
  uint64_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  uint16x8_t v13;
  uint32x4_t v14;
  int8x16_t v15;
  int64x2_t v16;
  int64x2_t v17;
  uint32x4_t v18;
  int64x2_t v19;
  int8x16_t v21;
  _WORD v22[256];
  unsigned __int16 v23[256];
  uint64_t v24;

  v2 = 0;
  v24 = *MEMORY[0x1E0C80C00];
  v3.i64[0] = 0x8000800080008;
  v3.i64[1] = 0x8000800080008;
  v21 = (int8x16_t)vdupq_n_s64(1uLL);
  while (1)
  {
    v4 = 0;
    v5 = get_3_0_cmap_prefix_prefix[v2];
    v6 = (int8x16_t)vdupq_n_s16(v5);
    v7 = (int16x8_t)xmmword_185004910;
    do
    {
      *(int8x16_t *)&v23[v4] = vorrq_s8(v6, (int8x16_t)v7);
      v7 = vaddq_s16(v7, v3);
      v4 += 8;
    }
    while (v4 != 256);
    CGFontIndexMapGetValues(a1, v23, 256, v22);
    v8 = 0;
    v9 = 0uLL;
    v10 = 0uLL;
    v11 = 0uLL;
    v12 = 0uLL;
    do
    {
      v13 = (uint16x8_t)vtstq_s16(*(int16x8_t *)&v22[v8], *(int16x8_t *)&v22[v8]);
      v14 = vmovl_u16(*(uint16x4_t *)v13.i8);
      v15.i64[0] = v14.u32[0];
      v15.i64[1] = v14.u32[1];
      v16 = (int64x2_t)vandq_s8(v15, v21);
      v15.i64[0] = v14.u32[2];
      v15.i64[1] = v14.u32[3];
      v17 = (int64x2_t)vandq_s8(v15, v21);
      v18 = vmovl_high_u16(v13);
      v15.i64[0] = v18.u32[0];
      v15.i64[1] = v18.u32[1];
      v19 = (int64x2_t)vandq_s8(v15, v21);
      v15.i64[0] = v18.u32[2];
      v15.i64[1] = v18.u32[3];
      v12 = vaddq_s64(v12, (int64x2_t)vandq_s8(v15, v21));
      v11 = vaddq_s64(v11, v19);
      v10 = vaddq_s64(v10, v17);
      v9 = vaddq_s64(v9, v16);
      v8 += 8;
    }
    while (v8 != 256);
    if (vaddvq_s64(vaddq_s64(vaddq_s64(v9, v11), vaddq_s64(v10, v12))))
      break;
    ++v2;
    v3.i64[0] = 0x8000800080008;
    v3.i64[1] = 0x8000800080008;
    if (v2 == 4)
      return 0;
  }
  return v5;
}

uint64_t CGPDFEncodingGetGlyphVectorWithFont(size_t a1, uint64_t a2, int a3, _OWORD *a4)
{
  int v4;

  if (*(_QWORD *)a1)
  {
    v4 = *(_DWORD *)(*(_QWORD *)a1 + 200);
    if ((v4 - 2) < 2)
    {
      get_type1_glyph_vector(a1, a2, a3, (uint64_t)a4);
      return 1;
    }
    if (v4 == 4)
    {
      get_truetype_glyph_vector(a1, a2, 0, a3, a4);
      return 1;
    }
  }
  return 0;
}

_QWORD *CGPDFEncodingGetUnicodeMaxLength(uint64_t a1)
{
  _QWORD *result;

  result = get_unichar_info(a1);
  if (result)
    return (_QWORD *)*result;
  return result;
}

BOOL CGFontQuantumEqualToQuantum(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t defaults_setup_19265()
{
  uint64_t result;
  int v1;
  int v2;

  v2 = 0;
  v1 = 0;
  if (get_integer_property("CGFontQX", (const void *(*)(const char *))copy_local_domain_value, &v2))QX = v2;
  result = get_integer_property("CGFontQY", (const void *(*)(const char *))copy_local_domain_value, &v1);
  if ((_DWORD)result)
    QY = v1;
  return result;
}

uint64_t CGFontGetGlyphPositions(uint64_t result, uint64_t a2, float64x2_t *a3, float64x2_t *a4)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  double *v7;
  float64x2_t v8;

  if (a2)
  {
    v4 = *a3;
    v5 = a3[1];
    v6 = a3[2];
    v7 = (double *)(result + 8);
    v8 = (float64x2_t)vdupq_n_s64(0x3F50624DD2F1A9FCuLL);
    do
    {
      *a4++ = vaddq_f64(vaddq_f64(v6, vmlaq_n_f64(vmulq_n_f64(v5, *v7), v4, *(v7 - 1))), v8);
      v7 += 2;
      --a2;
    }
    while (a2);
  }
  return result;
}

void CGPDFHintTableSet::~CGPDFHintTableSet(CGPDFHintTableSet *this)
{
  CGPDFHintTableSet::~CGPDFHintTableSet(this);
  JUMPOUT(0x186DC23C4);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E1627FD8;
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    MEMORY[0x186DC23C4](v2, 0x1000C40451B5BE8);
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    MEMORY[0x186DC23C4](v3, 0x1000C40451B5BE8);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    std::default_delete<CGSharedObjectHintTable>::operator()[abi:se180100](v4);
  std::unique_ptr<CGPageOffsetHintTable>::reset[abi:se180100]((uint64_t *)this + 8, 0);
}

uint64_t std::default_delete<CGSharedObjectHintTable>::operator()[abi:se180100](uint64_t result)
{
  uint64_t v1;
  void *v2;

  if (result)
  {
    v1 = result;
    v2 = *(void **)(result + 32);
    if (v2)
    {
      *(_QWORD *)(v1 + 40) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x186DC23C4);
  }
  return result;
}

uint64_t *std::unique_ptr<CGPageOffsetHintTable>::reset[abi:se180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 48);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 56);
      v5 = *(void **)(v2 + 48);
      if (v4 != v3)
      {
        do
        {
          v6 = *(void **)(v4 - 40);
          if (v6)
          {
            *(_QWORD *)(v4 - 32) = v6;
            operator delete(v6);
          }
          v4 -= 64;
        }
        while (v4 != v3);
        v5 = *(void **)(v2 + 48);
      }
      *(_QWORD *)(v2 + 56) = v3;
      operator delete(v5);
    }
    JUMPOUT(0x186DC23C4);
  }
  return result;
}

void *std::__allocate_at_least[abi:se180100]<std::allocator<CGPageOffsetHintTablePageEntry>>(unint64_t a1)
{
  if (a1 >> 58)
    std::__throw_bad_array_new_length[abi:se180100]();
  return operator new(a1 << 6);
}

uint64_t *std::vector<CGPageOffsetHintTablePageEntry>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 64;
      v6 = *(_OWORD *)(v3 - 64);
      *(_DWORD *)(v4 - 48) = *(_DWORD *)(v3 - 48);
      *(_OWORD *)(v4 - 64) = v6;
      *(_QWORD *)(v4 - 32) = 0;
      *(_QWORD *)(v4 - 24) = 0;
      *(_QWORD *)(v4 - 40) = 0;
      *(_OWORD *)(v4 - 40) = *(_OWORD *)(v3 - 40);
      *(_QWORD *)(v4 - 24) = *(_QWORD *)(v3 - 24);
      *(_QWORD *)(v3 - 40) = 0;
      *(_QWORD *)(v3 - 32) = 0;
      *(_QWORD *)(v3 - 24) = 0;
      *(_OWORD *)(v4 - 16) = *(_OWORD *)(v3 - 16);
      v4 -= 64;
      v3 -= 64;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v7 = *result;
  *result = v5;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<CGPageOffsetHintTablePageEntry>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 64;
    v4 = *(void **)(v2 - 40);
    if (v4)
    {
      *(_QWORD *)(v2 - 32) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 64;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<CGSharedObjectGroupEntry>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4)
  {
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF0];
    v7 = &v4[16 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v8 - 1);
        v10 -= 16;
        v8 -= 16;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

uint64_t CGPDFHintTableSet::rangeCheck(uint64_t this, uint64_t a2, uint64_t a3)
{
  std::runtime_error *exception;

  if (this < a2 || this > a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:se180100](exception);
    __cxa_throw(exception, (struct type_info *)off_1E1620B18, MEMORY[0x1E0DE42B0]);
  }
  return this;
}

void sub_184DC7350(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_DWORD *CGPDFHintTableSet::readGenericHintTable(CGPDFHintTableSet *this, const __CFData *a2, CFDataRef theData, uint64_t a4)
{
  const UInt8 *BytePtr;
  const UInt8 *v9;
  const UInt8 *v10;
  const unsigned __int8 **v11;
  _DWORD *v12;
  const unsigned __int8 *v13;
  const unsigned __int8 *v14;
  const unsigned __int8 *v15;
  uint64_t v16;
  const unsigned __int8 *v17;
  std::logic_error *exception;
  unsigned int v20[2];

  BytePtr = CFDataGetBytePtr(theData);
  if (!BytePtr)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:se180100](exception, "CFDataGetBytePtr(hint_data) returned NULL");
    goto LABEL_8;
  }
  v9 = &BytePtr[a4];
  *(_QWORD *)v20 = &BytePtr[a4];
  v10 = CFDataGetBytePtr(theData);
  v11 = (const unsigned __int8 **)&v10[CFDataGetLength(theData)];
  if ((char *)v11 - (char *)v9 <= 15)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:se180100](exception, "Insufficient data size");
LABEL_8:
    __cxa_throw(exception, (struct type_info *)off_1E1620B20, MEMORY[0x1E0DE42C0]);
  }
  v12 = (_DWORD *)operator new();
  *(_QWORD *)this = v12;
  CGPDFHintTableSet::copyFromBuf(v12, v20, v11, v13);
  CGPDFHintTableSet::copyFromBuf(v12 + 1, v20, v11, v14);
  v16 = v12[1];
  if (*((_QWORD *)a2 + 6) <= v16)
    LODWORD(v16) = v16 + *((_DWORD *)a2 + 14);
  v12[1] = v16;
  CGPDFHintTableSet::copyFromBuf(v12 + 2, v20, v11, v15);
  return CGPDFHintTableSet::copyFromBuf(v12 + 3, v20, v11, v17);
}

void sub_184DC74A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::domain_error::domain_error[abi:se180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
  return result;
}

_DWORD *CGPDFHintTableSet::copyFromBuf(_DWORD *this, unsigned int *a2, const unsigned __int8 **a3, const unsigned __int8 *a4)
{
  unint64_t v4;
  std::logic_error *exception;

  v4 = *(_QWORD *)a2 + 4;
  if (v4 > (unint64_t)a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::length_error::length_error[abi:se180100](exception, "not enough data");
    __cxa_throw(exception, (struct type_info *)off_1E1620B28, MEMORY[0x1E0DE42D0]);
  }
  *this = bswap32(**(_DWORD **)a2);
  *(_QWORD *)a2 = v4;
  return this;
}

void sub_184DC7568(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_WORD *CGPDFHintTableSet::copyFromBuf(_WORD *this, unsigned __int16 *a2, const unsigned __int8 **a3, const unsigned __int8 *a4)
{
  unint64_t v4;
  std::logic_error *exception;

  v4 = *(_QWORD *)a2 + 2;
  if (v4 > (unint64_t)a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::length_error::length_error[abi:se180100](exception, "not enough data");
    __cxa_throw(exception, (struct type_info *)off_1E1620B28, MEMORY[0x1E0DE42D0]);
  }
  *this = bswap32(**(unsigned __int16 **)a2) >> 16;
  *(_QWORD *)a2 = v4;
  return this;
}

void sub_184DC75E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *std::range_error::range_error[abi:se180100](std::runtime_error *a1)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, "rangeCheck failure");
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
  return result;
}

uint64_t ___ZN17CGPDFHintTableSet23writeSharedObjectsTableEP14CGDataConsumerx_block_invoke(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a2)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 32);
    v5 = *(_QWORD *)(*(_QWORD *)(v4 + 72) + 40) - *(_QWORD *)(*(_QWORD *)(v4 + 72) + 32);
    if (v5)
    {
      v8 = ((v5 >> 4) * a2 + 7) >> 3;
      v9 = operator new[]();
      v10 = v9;
      v11 = *(_QWORD *)(v4 + 72);
      v12 = *(_QWORD *)(v11 + 32);
      v13 = *(_QWORD *)(v11 + 40);
      if (v12 == v13)
        goto LABEL_16;
      v21 = v9;
      v14 = 0;
      v15 = 0;
      v16 = (_BYTE *)v9;
      while (1)
      {
        v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v12);
        if (a2 >= 0x19)
          break;
        v18 = a2;
        if (v14 >= 8)
          goto LABEL_10;
LABEL_11:
        v15 = (0xFFFFFFFF >> -(char)v18) & v17 | (v15 << v18);
        v14 += v18;
        v12 += 16;
        if (v12 == v13)
        {
          v10 = v21;
          if (v14)
          {
            do
            {
              v19 = v14;
              if (v14 >= 8)
              {
                do
                {
                  v19 -= 8;
                  *v16++ = v15 >> v19;
                }
                while (v19 > 7);
              }
              v20 = -(int)v14 & 7;
              v15 <<= v20;
              v14 = v19 + v20;
            }
            while (v19 + v20);
          }
LABEL_16:
          CGDataConsumerPutBytes(*(_QWORD *)(v3 + 40), v10, v8);
          JUMPOUT(0x186DC23ACLL);
        }
      }
      if (v14 >= 8)
      {
        do
        {
          v14 -= 8;
          *v16++ = v15 >> v14;
        }
        while (v14 > 7);
      }
      v14 |= 0x18uLL;
      v15 = (v17 >> (a2 - 24)) & 0xFFFFFF | (v15 << 24);
      v18 = a2 - 24;
      do
      {
LABEL_10:
        v14 -= 8;
        *v16++ = v15 >> v14;
      }
      while (v14 > 7);
      goto LABEL_11;
    }
  }
  return result;
}

void sub_184DC77F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  MEMORY[0x186DC23AC](a10, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t ___ZN17CGPDFHintTableSet23writeSharedObjectsTableEP14CGDataConsumerx_block_invoke_2(uint64_t a1, _DWORD *a2)
{
  return (*a2 - *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 72) + 20));
}

uint64_t ___ZN17CGPDFHintTableSet23writeSharedObjectsTableEP14CGDataConsumerx_block_invoke_4()
{
  return 0;
}

uint64_t ___ZN17CGPDFHintTableSet23writeSharedObjectsTableEP14CGDataConsumerx_block_invoke_3()
{
  return 0;
}

uint64_t ___ZN17CGPDFHintTableSet21writePageOffsetsTableEP14CGDataConsumerx_block_invoke(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a2)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 32);
    v5 = *(_QWORD *)(*(_QWORD *)(v4 + 64) + 56) - *(_QWORD *)(*(_QWORD *)(v4 + 64) + 48);
    if (v5)
    {
      v8 = ((v5 >> 6) * a2 + 7) >> 3;
      v9 = operator new[]();
      v10 = v9;
      v11 = *(_QWORD *)(v4 + 64);
      v12 = *(_QWORD *)(v11 + 48);
      v13 = *(_QWORD *)(v11 + 56);
      if (v12 == v13)
        goto LABEL_16;
      v21 = v9;
      v14 = 0;
      v15 = 0;
      v16 = (_BYTE *)v9;
      while (1)
      {
        v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v12);
        if (a2 >= 0x19)
          break;
        v18 = a2;
        if (v14 >= 8)
          goto LABEL_10;
LABEL_11:
        v15 = (0xFFFFFFFF >> -(char)v18) & v17 | (v15 << v18);
        v14 += v18;
        v12 += 64;
        if (v12 == v13)
        {
          v10 = v21;
          if (v14)
          {
            do
            {
              v19 = v14;
              if (v14 >= 8)
              {
                do
                {
                  v19 -= 8;
                  *v16++ = v15 >> v19;
                }
                while (v19 > 7);
              }
              v20 = -(int)v14 & 7;
              v15 <<= v20;
              v14 = v19 + v20;
            }
            while (v19 + v20);
          }
LABEL_16:
          CGDataConsumerPutBytes(*(_QWORD *)(v3 + 40), v10, v8);
          JUMPOUT(0x186DC23ACLL);
        }
      }
      if (v14 >= 8)
      {
        do
        {
          v14 -= 8;
          *v16++ = v15 >> v14;
        }
        while (v14 > 7);
      }
      v14 |= 0x18uLL;
      v15 = (v17 >> (a2 - 24)) & 0xFFFFFF | (v15 << 24);
      v18 = a2 - 24;
      do
      {
LABEL_10:
        v14 -= 8;
        *v16++ = v15 >> v14;
      }
      while (v14 > 7);
      goto LABEL_11;
    }
  }
  return result;
}

void sub_184DC7A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  MEMORY[0x186DC23AC](a10, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t ___ZN17CGPDFHintTableSet21writePageOffsetsTableEP14CGDataConsumerx_block_invoke_2(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a2)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 32);
    v5 = *(_QWORD *)(v4 + 64);
    v6 = *(_QWORD *)(v5 + 48);
    v7 = *(_QWORD *)(v5 + 56);
    if (v6 != v7)
    {
      v10 = 0;
      do
      {
        v10 += (uint64_t)(*(_QWORD *)(v6 + 32) - *(_QWORD *)(v6 + 24)) >> 3;
        v6 += 64;
      }
      while (v6 != v7);
      if (v10)
      {
        v11 = (v10 * a2 + 7) >> 3;
        v12 = operator new[]();
        v13 = v12;
        v14 = *(_QWORD *)(v4 + 64);
        v15 = *(_QWORD *)(v14 + 48);
        v27 = *(_QWORD *)(v14 + 56);
        if (v15 == v27)
          goto LABEL_22;
        v25 = v11;
        v16 = 0;
        v17 = 0;
        v26 = v12;
        v18 = (_BYTE *)v12;
        while (1)
        {
          v20 = *(_QWORD *)(v15 + 24);
          v19 = *(_QWORD *)(v15 + 32);
          while (v20 != v19)
          {
            v21 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v20);
            if (a2 < 0x19)
            {
              v22 = a2;
              if (v16 < 8)
                goto LABEL_16;
            }
            else
            {
              if (v16 >= 8)
              {
                do
                {
                  v16 -= 8;
                  *v18++ = v17 >> v16;
                }
                while (v16 > 7);
              }
              v16 |= 0x18uLL;
              v17 = (v21 >> (a2 - 24)) & 0xFFFFFF | (v17 << 24);
              v22 = a2 - 24;
            }
            do
            {
              v16 -= 8;
              *v18++ = v17 >> v16;
            }
            while (v16 > 7);
LABEL_16:
            v17 = (0xFFFFFFFF >> -(char)v22) & v21 | (v17 << v22);
            v16 += v22;
            v20 += 8;
          }
          v15 += 64;
          if (v15 == v27)
          {
            v13 = v26;
            v11 = v25;
            if (v16)
            {
              do
              {
                v23 = v16;
                if (v16 >= 8)
                {
                  do
                  {
                    v23 -= 8;
                    *v18++ = v17 >> v23;
                  }
                  while (v23 > 7);
                }
                v24 = -(int)v16 & 7;
                v17 <<= v24;
                v16 = v23 + v24;
              }
              while (v23 + v24);
            }
LABEL_22:
            CGDataConsumerPutBytes(*(_QWORD *)(v3 + 40), v13, v11);
            JUMPOUT(0x186DC23ACLL);
          }
        }
      }
    }
  }
  return result;
}

void sub_184DC7C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  MEMORY[0x186DC23AC](a11, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t ___ZN17CGPDFHintTableSet21writePageOffsetsTableEP14CGDataConsumerx_block_invoke_3(uint64_t a1, _DWORD *a2)
{
  return (*a2 - **(_DWORD **)(*(_QWORD *)(a1 + 32) + 64));
}

uint64_t ___ZN17CGPDFHintTableSet21writePageOffsetsTableEP14CGDataConsumerx_block_invoke_4(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 4) - *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 12));
}

uint64_t ___ZN17CGPDFHintTableSet21writePageOffsetsTableEP14CGDataConsumerx_block_invoke_9(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 16);
}

uint64_t ___ZN17CGPDFHintTableSet21writePageOffsetsTableEP14CGDataConsumerx_block_invoke_8(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 12);
}

uint64_t ___ZN17CGPDFHintTableSet21writePageOffsetsTableEP14CGDataConsumerx_block_invoke_7(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 4);
}

uint64_t ___ZN17CGPDFHintTableSet21writePageOffsetsTableEP14CGDataConsumerx_block_invoke_6(uint64_t a1, unsigned int *a2)
{
  return *a2;
}

uint64_t ___ZN17CGPDFHintTableSet21writePageOffsetsTableEP14CGDataConsumerx_block_invoke_5(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a2 + 8);
}

CFDictionaryRef __get_provider_options_block_invoke()
{
  CFDictionaryRef result;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = CFSTR("kCGImagePreferGPUForColorConversion");
  values = (void *)*MEMORY[0x1E0C9AE40];
  result = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  get_provider_options_options_singleton = (uint64_t)result;
  return result;
}

void _CPIndexSetFinalize(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 32) = 0;
}

CFStringRef _CPIndexSetCopyDebugDesc(_QWORD *cf)
{
  uint64_t v2;
  const __CFAllocator *v3;
  const __CFAllocator *v5;
  const __CFAllocator *v6;

  v2 = cf[2];
  if (v2 == 1)
  {
    v5 = CFGetAllocator(cf);
    return CFStringCreateWithFormat(v5, 0, CFSTR("<CPIndexSet = 1 range (%.1ld, %.1ld]>"), *(_QWORD *)cf[4], *(_QWORD *)(cf[4] + 8));
  }
  else if (v2)
  {
    v6 = CFGetAllocator(cf);
    return CFStringCreateWithFormat(v6, 0, CFSTR("<CPIndexSet = %ld ranges>"), cf[2]);
  }
  else
  {
    v3 = CFGetAllocator(cf);
    return CFStringCreateCopy(v3, CFSTR("<CPIndexSet = empty>"));
  }
}

int64x2_t *CPIndexSetCreateWithRange(uint64_t a1, uint64_t a2)
{
  int64x2_t *v2;
  int64x2_t *Instance;
  _QWORD *v6;

  v2 = 0;
  if ((a1 & 0x8000000000000000) == 0 && (a2 & 0x8000000000000000) == 0)
  {
    if (!CPIndexSetGetTypeID_id)
      CPIndexSetGetTypeID_id = _CFRuntimeRegisterClass();
    Instance = (int64x2_t *)_CFRuntimeCreateInstance();
    v2 = Instance;
    if (Instance)
    {
      Instance[1] = vdupq_n_s64(1uLL);
      v6 = malloc_type_malloc(0x10uLL, 0x1000040451B5BE8uLL);
      v2[2].i64[0] = (uint64_t)v6;
      *v6 = a1;
      v6[1] = a2;
      v2[2].i8[8] = 0;
    }
  }
  return v2;
}

void CPIndexSetNormalize(uint64_t a1)
{
  int64_t v2;
  int64_t v3;
  uint64_t *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  int64_t v25;
  uint64_t v26;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 < 2)
  {
    if (v2 != 1)
      goto LABEL_35;
  }
  else
  {
    qsort(*(void **)(a1 + 32), v2, 0x10uLL, (int (__cdecl *)(const void *, const void *))sortRangesByLocation);
  }
  v3 = 0;
  v4 = *(uint64_t **)(a1 + 32);
  while (1)
  {
    v5 = *v4;
    v4 += 2;
    if ((v5 & 0x8000000000000000) == 0)
      break;
    if (v2 == ++v3)
    {
      v3 = v2;
      break;
    }
  }
  if (v3)
  {
    v6 = v2 <= v3;
    v2 -= v3;
    if (!v6)
    {
      v7 = 0;
      v8 = 16 * v3;
      v9 = v2;
      do
      {
        *(_OWORD *)(*(_QWORD *)(a1 + 32) + v7) = *(_OWORD *)(*(_QWORD *)(a1 + 32) + v7 + v8);
        v7 += 16;
        --v9;
      }
      while (v9);
    }
    *(_QWORD *)(a1 + 16) = v2;
  }
  if (v2 >= 2)
  {
    v10 = 0;
    while (1)
    {
      v11 = v10 + 1;
      if (v10 + 1 < v2)
        break;
LABEL_33:
      ++v10;
      if (v11 >= v2)
      {
        *(_QWORD *)(a1 + 16) = v2;
        goto LABEL_35;
      }
    }
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 16 * v10);
    v14 = *v12;
    v13 = v12[1];
    v15 = v10 + 1;
    while (1)
    {
      v16 = *(_QWORD *)(a1 + 32);
      v17 = (uint64_t *)(v16 + 16 * v15);
      v19 = *v17;
      v18 = v17[1];
      if (v14 == v19)
        break;
      if (v19 <= v13 + v14)
      {
        v23 = v18 + v19;
        if (v23 > v13 + v14)
        {
          v13 = v23 - v14;
          v24 = (uint64_t *)(v16 + 16 * v10);
          v24[1] = v13;
          v14 = *v24;
        }
        if (v15 + 1 < v2)
        {
          v25 = ~v15 + v2;
          v26 = 16 * v15;
          do
          {
            *(_OWORD *)(*(_QWORD *)(a1 + 32) + v26) = *(_OWORD *)(*(_QWORD *)(a1 + 32) + v26 + 16);
            v26 += 16;
            --v25;
          }
          while (v25);
        }
        goto LABEL_31;
      }
      ++v15;
LABEL_32:
      if (v15 >= v2)
        goto LABEL_33;
    }
    if (v18 > v13)
    {
      v20 = (uint64_t *)(v16 + 16 * v10);
      v20[1] = v18;
      v14 = *v20;
      v13 = v18;
    }
    if (v15 + 1 < v2)
    {
      v21 = ~v15 + v2;
      v22 = 16 * v15;
      do
      {
        *(_OWORD *)(*(_QWORD *)(a1 + 32) + v22) = *(_OWORD *)(*(_QWORD *)(a1 + 32) + v22 + 16);
        v22 += 16;
        --v21;
      }
      while (v21);
    }
LABEL_31:
    --v2;
    goto LABEL_32;
  }
LABEL_35:
  *(_BYTE *)(a1 + 40) = 0;
}

uint64_t sortRangesByLocation(_QWORD *a1, _QWORD *a2)
{
  unsigned int v2;

  if (*a1 >= *a2)
    v2 = 0;
  else
    v2 = -1;
  if (*a1 > *a2)
    return 1;
  else
    return v2;
}

uint64_t CPIndexSetGetFirstIndex(uint64_t a1)
{
  if (!a1)
    return -1;
  if (*(_BYTE *)(a1 + 40))
    CPIndexSetNormalize(a1);
  if (*(uint64_t *)(a1 + 16) < 1)
    return -1;
  else
    return **(_QWORD **)(a1 + 32);
}

uint64_t CPIndexSetGetLastIndex(uint64_t a1)
{
  uint64_t v2;

  if (!a1)
    return -1;
  if (*(_BYTE *)(a1 + 40))
    CPIndexSetNormalize(a1);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 < 1)
    return -1;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v2 - 16) + *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v2 - 8) - 1;
}

uint64_t CPIndexSetGetRange(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = -1;
  if (a1 && (a2 & 0x8000000000000000) == 0)
  {
    if (*(_BYTE *)(a1 + 40))
      CPIndexSetNormalize(a1);
    if (*(_QWORD *)(a1 + 16) <= a2)
      return -1;
    else
      return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * a2);
  }
  return result;
}

void CPIndexSetAddRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;

  if (a1 && (a2 & 0x8000000000000000) == 0 && (a3 & 0x8000000000000000) == 0)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(a1 + 24);
    if (v6 >= v7)
    {
      *(_QWORD *)(a1 + 24) = v7 + 1;
      v9 = (char *)malloc_type_malloc(16 * (v7 + 1), 0x1000040451B5BE8uLL);
      v8 = v9;
      if (*(uint64_t *)(a1 + 16) >= 1)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          *(_OWORD *)&v9[v10] = *(_OWORD *)(*(_QWORD *)(a1 + 32) + v10);
          ++v11;
          v10 += 16;
        }
        while (v11 < *(_QWORD *)(a1 + 16));
      }
      free(*(void **)(a1 + 32));
      *(_QWORD *)(a1 + 32) = v8;
      v6 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v8 = *(char **)(a1 + 32);
    }
    v12 = &v8[16 * v6];
    *(_QWORD *)v12 = a2;
    *((_QWORD *)v12 + 1) = a3;
    ++*(_QWORD *)(a1 + 16);
    *(_BYTE *)(a1 + 40) = 1;
  }
}

_QWORD *create_private_data_with_parser_font()
{
  uint64_t v0;
  _QWORD *result;

  v0 = FPFontRetain();
  result = malloc_type_calloc(1uLL, 0x20uLL, 0x1060040D8C947D5uLL);
  *result = 1;
  result[1] = v0;
  return result;
}

uint64_t create_private_data_with_platform_font()
{
  return 0;
}

const __CFArray *create_private_data_array_from_data()
{
  const __CFArray *result;
  const __CFArray *v1;
  __CFArray *private_data_array_with_parser_fonts;

  result = (const __CFArray *)FPFontCreateFontsFromData();
  if (result)
  {
    v1 = result;
    private_data_array_with_parser_fonts = create_private_data_array_with_parser_fonts(result);
    CFRelease(v1);
    return private_data_array_with_parser_fonts;
  }
  return result;
}

uint64_t get_font_info_19464(uint64_t a1, uint64_t a2)
{
  uint64_t FontInfo;
  _OWORD v5[3];

  memset(v5, 0, 40);
  FontInfo = FPFontGetFontInfo();
  if ((_DWORD)FontInfo)
  {
    *(_QWORD *)a2 = *(_QWORD *)&v5[0];
    *(_WORD *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)((char *)v5 + 8);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)&v5[1] + 8);
    *(_BYTE *)(a2 + 104) = FPFontIsBitmapOnly();
  }
  return FontInfo;
}

double get_vertical_metrics(uint64_t a1, _OWORD *a2)
{
  double result;

  if (FPFontGetVMetrics())
  {
    result = 0.0;
    *a2 = 0u;
  }
  return result;
}

uint64_t copy_registry_ordering_supplement()
{
  return FPFontCopyRegistryOrderingSupplement();
}

uint64_t get_type1_encoding()
{
  return FPFontGetType1Encoding();
}

uint64_t get_truetype_encoding(uint64_t a1, int a2, int a3)
{
  if (a2 == 3 || a2 == 1 && !a3)
    return FPFontGetTrueTypeEncoding();
  else
    return 0;
}

uint64_t get_glyphs_for_cids()
{
  return FPFontGetGlyphsForCIDs();
}

uint64_t get_cids_for_glyphs()
{
  return FPFontGetCIDsForGlyphs();
}

uint64_t get_glyphs_for_glyph_names()
{
  return FPFontGetGlyphsForGlyphNames();
}

uint64_t get_glyph_name_max_length()
{
  return FPFontGetGlyphNameMaxLength();
}

BOOL get_glyph_name_for_glyph(uint64_t a1, uint64_t a2, char *a3, CFIndex a4)
{
  const __CFString *v6;
  const __CFString *v7;
  _BOOL8 v8;

  v6 = (const __CFString *)FPFontCopyGlyphNameForGlyph();
  if (!v6)
    return 0;
  v7 = v6;
  v8 = CFStringGetCString(v6, a3, a4, 0x600u) != 0;
  CFRelease(v7);
  return v8;
}

uint64_t get_glyph_vertical_advances(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;

  result = 0;
  if (a1)
  {
    v6 = a4;
    if (a4)
    {
      v7 = a3;
      v8 = a2;
      if (a2 || !a3)
      {
        if (a3)
        {
          do
          {
            v8 += 2;
            FPFontGetGlyphIdealVerticalAdvanceWidth();
            *v6++ = (int)v9;
            --v7;
          }
          while (v7);
        }
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t get_glyph_vertical_offsets(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  if (a1)
    v4 = a2 == 0;
  else
    v4 = 1;
  v5 = v4 || a4 == 0;
  v6 = v5;
  if (!v5)
  {
    v7 = a3;
    if (a3)
    {
      v8 = a2;
      v9 = (_QWORD *)(a4 + 8);
      do
      {
        v8 += 2;
        FPFontGetGlyphVerticalTranslate();
        *(v9 - 1) = v10;
        *v9 = v11;
        v9 += 2;
        --v7;
      }
      while (v7);
    }
  }
  return v6 ^ 1u;
}

uint64_t get_subset_format()
{
  return FPGetFontSubsetFormat();
}

uint64_t create_subset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int16 *a6)
{
  unint64_t IndexVectorSize;
  int NumberOfGlyphs;
  size_t v10;
  void *v11;
  const __CFArray *Mutable;
  uint64_t FontSubset;
  CFIndex Count;
  CFIndex v15;
  CFIndex i;
  unsigned __int16 ValueAtIndex;

  IndexVectorSize = CGFontIndexSetGetIndexVectorSize(a4);
  NumberOfGlyphs = FPFontGetNumberOfGlyphs();
  if (IndexVectorSize <= (((NumberOfGlyphs + 31) >> 3) & 0x3FFCuLL))
    v10 = ((NumberOfGlyphs + 31) >> 3) & 0x3FFCLL;
  else
    v10 = IndexVectorSize;
  v11 = malloc_type_calloc(1uLL, v10, 0x13679333uLL);
  CGFontIndexSetGetIndexVector(a4, v11);
  Mutable = CFArrayCreateMutable(0, 0, 0);
  FontSubset = FPFontCreateFontSubset();
  Count = CFArrayGetCount(Mutable);
  if (Count)
  {
    v15 = Count;
    for (i = 0; i != v15; ++i)
    {
      ValueAtIndex = (unsigned __int16)CFArrayGetValueAtIndex(Mutable, i);
      CGFontIndexMapAddIndex(a6, ValueAtIndex, i);
    }
  }
  CFRelease(Mutable);
  free(v11);
  return FontSubset;
}

uint64_t create_ps_definition()
{
  return FPFontCreatePostScriptSubset();
}

uint64_t create_ps_encoding()
{
  return FPFontCreatePostScriptEncoding();
}

uint64_t can_create_ps_subset()
{
  return FPFontCanCreatePostScriptSubset();
}

uint64_t get_unichars_for_glyph()
{
  return FPFontGetUnicharsForGlyph();
}

uint64_t rgba32_sample_W8(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unsigned int v47;
  int v48;
  int v49;
  unsigned __int8 *v50;
  unsigned int v51;
  unint64_t v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned int v55;
  unsigned __int8 *v56;
  unint64_t v57;
  unint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  int v61;
  char v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  int v66;
  char v67;
  unsigned int v68;
  unsigned int v69;
  unsigned __int8 *v70;
  unsigned int v71;
  unsigned __int8 *v72;
  int v73;
  char v74;
  unsigned int v75;
  unsigned __int8 *v76;
  int v77;
  unsigned __int8 *v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  unint64_t v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_QWORD *)(result + 40);
  v6 = *(_DWORD *)(result + 24);
  v7 = *(_DWORD *)(result + 28);
  v8 = *(_QWORD *)(result + 176);
  v90 = *(_QWORD *)(result + 80);
  v92 = *(_QWORD *)(result + 88);
  v10 = *(_QWORD *)(result + 112);
  v9 = *(_QWORD *)(result + 120);
  v11 = *(_QWORD *)(result + 152) - 4;
  v12 = *(_QWORD *)(result + 144) - 1;
  if (v5)
    v13 = 0;
  else
    v13 = -16777216;
  v14 = *(_DWORD *)(result + 260) - 1;
  v15 = *(unsigned int *)(result + 256);
  v16 = (unsigned __int8 *)(v5 + (v15 - 1) + (v14 * v7));
  v89 = *(_DWORD *)(result + 188);
  v17 = v4 + v15 + (v14 * v6) - 1;
  v91 = *(_QWORD *)(result + 64);
  v93 = *(_QWORD *)(result + 72);
  do
  {
    while (1)
    {
      if (a3 >= v93)
      {
        if (a3 <= v92)
        {
          v26 = ((unint64_t)a3 >> 22) & 0x3C0;
          v27 = 0x3FFFFFFF;
          v28 = a3;
          v29 = v91;
        }
        else
        {
          v22 = *(_QWORD *)(result + 216);
          v23 = *(_QWORD *)(result + 224) + v92;
          v24 = v23 - a3 + (v22 >> 1);
          if (v24 < 1)
            goto LABEL_43;
          if (v24 >= v22)
            LODWORD(v25) = 0x3FFFFFFF;
          else
            v25 = (unint64_t)(*(_QWORD *)(result + 232) * v24) >> 32;
          v29 = v91;
          v27 = v89 | v25;
          v28 = v23 - 0x1000000;
          v26 = 448;
        }
      }
      else
      {
        v18 = *(_QWORD *)(result + 216);
        v19 = v93 - *(_QWORD *)(result + 224);
        v20 = a3 - v19 + (v18 >> 1);
        if (v20 < 1)
          goto LABEL_43;
        if (v20 >= v18)
          LODWORD(v21) = 0x3FFFFFFF;
        else
          v21 = (unint64_t)(*(_QWORD *)(result + 232) * v20) >> 32;
        v29 = v91;
        v27 = v89 | v21;
        v28 = v19 + 0x1000000;
        v26 = 512;
      }
      if (a2 >= v29)
        break;
      v30 = *(_QWORD *)(result + 192);
      v31 = v29 - *(_QWORD *)(result + 200);
      v32 = a2 - v31 + (v30 >> 1);
      if (v32 >= 1)
      {
        if (v32 < v30)
          v27 = ((v27 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v32) >> 32) >> 15)) | v89;
        v33 = v31 + 0x1000000;
        v34 = 32;
        goto LABEL_29;
      }
LABEL_43:
      --a4;
      a2 += v10;
      a3 += v9;
      v11 += 4;
      *(_BYTE *)++v12 = 0;
      if (!a4)
        return result;
    }
    if (a2 <= v90)
    {
      v34 = ((unint64_t)a2 >> 26) & 0x3C;
      v33 = a2;
      goto LABEL_29;
    }
    v35 = *(_QWORD *)(result + 192);
    v36 = *(_QWORD *)(result + 200) + v90;
    v37 = v36 - a2 + (v35 >> 1);
    if (v37 < 1)
      goto LABEL_43;
    if (v37 < v35)
      v27 = ((v27 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v37) >> 32) >> 15)) | v89;
    v33 = v36 - 0x1000000;
    v34 = 28;
LABEL_29:
    if (v27 < 0x400000)
      goto LABEL_43;
    v38 = v28 >> 32;
    v39 = v4 + (int)v38 * (uint64_t)v6;
    v40 = v39 + (v33 >> 32);
    v41 = *(unsigned __int8 **)(result + 32);
    if (v17 >= v40)
      v42 = (unsigned __int8 *)(v39 + (v33 >> 32));
    else
      v42 = (unsigned __int8 *)v17;
    if (v42 < v41)
      v42 = *(unsigned __int8 **)(result + 32);
    v43 = *v42;
    if (v5)
    {
      v44 = v5 + (int)v38 * (uint64_t)v7 + (v33 >> 32);
      v45 = *(unsigned __int8 **)(result + 40);
      if ((unint64_t)v16 >= v44)
        v46 = (unsigned __int8 *)v44;
      else
        v46 = v16;
      if (v46 >= v45)
        v45 = v46;
      v43 |= *v45 << 24;
      if (!v8)
        goto LABEL_104;
    }
    else
    {
      v44 = 0;
      if (!v8)
        goto LABEL_104;
    }
    v47 = *(_DWORD *)(v8 + (v34 | v26));
LABEL_48:
    v48 = v47 & 0xF;
    v49 = HIBYTE(v47) & 3;
    switch(v48)
    {
      case 1:
        v70 = (unsigned __int8 *)(v40 + SBYTE1(v47) * (uint64_t)v6);
        if (v17 < (unint64_t)v70)
          v70 = (unsigned __int8 *)v17;
        if (v70 < v41)
          v70 = v41;
        v71 = *v70;
        if (v5)
        {
          v72 = (unsigned __int8 *)(v44 + SBYTE1(v47) * (uint64_t)v7);
          if (v16 < v72)
            v72 = v16;
          if ((unint64_t)v72 < *(_QWORD *)(result + 40))
            v72 = *(unsigned __int8 **)(result + 40);
          v71 |= *v72 << 24;
        }
        v73 = interpolate_8888_19472[v49];
        v74 = v49 + 1;
        v68 = v43 - ((v73 & v43) >> v74);
        v75 = (v73 & v71) >> v74;
        goto LABEL_103;
      case 2:
        v76 = (unsigned __int8 *)(v40 + SBYTE2(v47));
        if (v17 < (unint64_t)v76)
          v76 = (unsigned __int8 *)v17;
        if (v76 < v41)
          v76 = v41;
        v77 = *v76;
        if (v5)
        {
          v78 = (unsigned __int8 *)(v44 + SBYTE2(v47));
          if (v16 < v78)
            v78 = v16;
          if ((unint64_t)v78 < *(_QWORD *)(result + 40))
            v78 = *(unsigned __int8 **)(result + 40);
          v77 |= *v78 << 24;
        }
        v79 = (v47 >> 28) & 3;
        v80 = interpolate_8888_19472[v79];
        v67 = v79 + 1;
        v68 = v43 - ((v80 & v43) >> v67);
        v69 = v80 & v77;
        goto LABEL_102;
      case 3:
        v50 = (unsigned __int8 *)(v40 + SBYTE2(v47));
        if (v17 < (unint64_t)v50)
          v50 = (unsigned __int8 *)v17;
        if (v50 < v41)
          v50 = v41;
        v51 = *v50;
        v52 = v40 + SBYTE1(v47) * (uint64_t)v6;
        if (v17 >= v52)
          v53 = (unsigned __int8 *)(v40 + SBYTE1(v47) * (uint64_t)v6);
        else
          v53 = (unsigned __int8 *)v17;
        if (v53 < v41)
          v53 = v41;
        v88 = *v53;
        v54 = (unsigned __int8 *)(v52 + SBYTE2(v47));
        if (v17 < (unint64_t)v54)
          v54 = (unsigned __int8 *)v17;
        if (v54 < v41)
          v54 = v41;
        v55 = *v54;
        if (v5)
        {
          v56 = (unsigned __int8 *)(v44 + SBYTE2(v47));
          v57 = *(_QWORD *)(result + 40);
          if (v16 < v56)
            v56 = v16;
          if ((unint64_t)v56 < v57)
            v56 = *(unsigned __int8 **)(result + 40);
          v51 |= *v56 << 24;
          v58 = v44 + SBYTE1(v47) * (uint64_t)v7;
          if ((unint64_t)v16 >= v58)
            v59 = (unsigned __int8 *)(v44 + SBYTE1(v47) * (uint64_t)v7);
          else
            v59 = v16;
          if ((unint64_t)v59 < v57)
            v59 = *(unsigned __int8 **)(result + 40);
          v88 |= *v59 << 24;
          v60 = (unsigned __int8 *)(v58 + SBYTE2(v47));
          if (v16 < v60)
            v60 = v16;
          if ((unint64_t)v60 < v57)
            v60 = *(unsigned __int8 **)(result + 40);
          v55 |= *v60 << 24;
        }
        v61 = interpolate_8888_19472[v49];
        v62 = v49 + 1;
        v63 = v43 - ((v61 & v43) >> v62) + ((v61 & v88) >> v62);
        v64 = v51 - ((v61 & v51) >> v62) + ((v61 & v55) >> v62);
        v65 = (v47 >> 28) & 3;
        v66 = interpolate_8888_19472[v65];
        v67 = v65 + 1;
        v68 = v63 - ((v63 & v66) >> v67);
        v69 = v64 & v66;
LABEL_102:
        v75 = v69 >> v67;
LABEL_103:
        v43 = v68 + v75;
        break;
    }
LABEL_104:
    *(_DWORD *)(v11 + 4) = bswap32(v43 & 0xFF0000FF | v13) | (v43 << 16) | (v43 << 8);
    *(_BYTE *)(v12 + 1) = v27 >> 22;
    if (a4 == 1)
      break;
    v81 = 0;
    a2 += v10;
    v82 = v90 - a2;
    a3 += v9;
    v83 = v92 - a3;
    v84 = -4;
    while (((v83 | v82 | (a3 - v93) | (a2 - v91)) & 0x8000000000000000) == 0)
    {
      v40 = v4 + SHIDWORD(a3) * (uint64_t)v6 + (a2 >> 32);
      v41 = *(unsigned __int8 **)(result + 32);
      if (v17 >= v40)
        v85 = (unsigned __int8 *)(v4 + SHIDWORD(a3) * (uint64_t)v6 + (a2 >> 32));
      else
        v85 = (unsigned __int8 *)v17;
      if (v85 < v41)
        v85 = *(unsigned __int8 **)(result + 32);
      v43 = *v85;
      if (v5)
      {
        v44 = v5 + SHIDWORD(a3) * (uint64_t)v7 + (a2 >> 32);
        v86 = *(unsigned __int8 **)(result + 40);
        if ((unint64_t)v16 >= v44)
          v87 = v5 + SHIDWORD(a3) * (uint64_t)v7 + (a2 >> 32);
        else
          v87 = (unint64_t)v16;
        if (v87 >= (unint64_t)v86)
          v86 = (unsigned __int8 *)v87;
        v43 |= *v86 << 24;
      }
      if (v8)
      {
        v47 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        if ((v47 & 0xF) != 0)
        {
          v12 += v81 + 1;
          v11 -= v84;
          a4 += ~(_DWORD)v81;
          v27 = -1;
          goto LABEL_48;
        }
      }
      *(_DWORD *)(v11 + 4 * v81 + 8) = bswap32(v43 & 0xFF0000FF | v13) | (v43 << 16) | (v43 << 8);
      *(_BYTE *)(v12 + v81++ + 2) = -1;
      v84 -= 4;
      a2 += v10;
      v82 -= v10;
      a3 += v9;
      v83 -= v9;
      if (a4 - 1 == (_DWORD)v81)
        return result;
    }
    v12 += v81 + 1;
    v11 -= v84;
    a4 += ~(_DWORD)v81;
  }
  while (a4);
  return result;
}

uint64_t rgba32_sample_RGB555(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  unsigned __int16 *v41;
  unsigned int v42;
  unint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unsigned int v46;
  int v47;
  int v48;
  int64_t v49;
  unsigned __int16 *v50;
  unsigned int v51;
  unint64_t v52;
  unsigned __int16 *v53;
  unsigned int v54;
  unsigned __int16 *v55;
  unsigned int v56;
  unsigned __int8 *v57;
  unint64_t v58;
  unint64_t v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  int v62;
  char v63;
  unsigned int v64;
  unsigned __int16 *v65;
  unsigned int v66;
  unsigned __int8 *v67;
  int v68;
  char v69;
  unsigned int v70;
  unsigned int v71;
  unsigned __int16 *v72;
  unsigned int v73;
  unsigned __int8 *v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned __int16 *v82;
  unsigned __int8 *v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_QWORD *)(result + 40);
  v6 = *(_DWORD *)(result + 24);
  v7 = *(_DWORD *)(result + 28);
  v8 = *(_QWORD *)(result + 176);
  v87 = *(_QWORD *)(result + 80);
  v10 = *(_QWORD *)(result + 112);
  v9 = *(_QWORD *)(result + 120);
  v91 = *(_QWORD *)(result + 152) - 4;
  v89 = *(_QWORD *)(result + 88);
  v90 = *(_QWORD *)(result + 144) - 1;
  if (v5)
    v11 = 0;
  else
    v11 = -16777216;
  v12 = *(_DWORD *)(result + 260) - 1;
  v13 = *(unsigned int *)(result + 256);
  v85 = *(_DWORD *)(result + 188);
  v14 = (unsigned __int8 *)(v5 + (v13 - 1) + (v12 * v7));
  v15 = v4 + (v12 * v6) + 2 * v13 - 4;
  v88 = *(_QWORD *)(result + 72);
  v86 = *(_QWORD *)(result + 64);
  while (1)
  {
LABEL_5:
    if (a3 >= v88)
    {
      if (a3 <= v89)
      {
        v24 = ((unint64_t)a3 >> 22) & 0x3C0;
        v25 = 0x3FFFFFFF;
        v26 = a3;
        v27 = v86;
      }
      else
      {
        v20 = *(_QWORD *)(result + 216);
        v21 = *(_QWORD *)(result + 224) + v89;
        v22 = v21 - a3 + (v20 >> 1);
        if (v22 < 1)
          goto LABEL_43;
        if (v22 >= v20)
          LODWORD(v23) = 0x3FFFFFFF;
        else
          v23 = (unint64_t)(*(_QWORD *)(result + 232) * v22) >> 32;
        v27 = v86;
        v25 = v85 | v23;
        v26 = v21 - 0x1000000;
        v24 = 448;
      }
    }
    else
    {
      v16 = *(_QWORD *)(result + 216);
      v17 = v88 - *(_QWORD *)(result + 224);
      v18 = a3 - v17 + (v16 >> 1);
      if (v18 < 1)
        goto LABEL_43;
      if (v18 >= v16)
        LODWORD(v19) = 0x3FFFFFFF;
      else
        v19 = (unint64_t)(*(_QWORD *)(result + 232) * v18) >> 32;
      v27 = v86;
      v25 = v85 | v19;
      v26 = v17 + 0x1000000;
      v24 = 512;
    }
    if (a2 >= v27)
      break;
    v28 = *(_QWORD *)(result + 192);
    v29 = v27 - *(_QWORD *)(result + 200);
    v30 = a2 - v29 + (v28 >> 1);
    if (v30 >= 1)
    {
      if (v30 < v28)
        v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v30) >> 32) >> 15)) | v85;
      v31 = v29 + 0x1000000;
      v32 = 32;
      goto LABEL_29;
    }
LABEL_43:
    --a4;
    a2 += v10;
    a3 += v9;
    *(_BYTE *)++v90 = 0;
    v91 += 4;
    if (!a4)
      return result;
  }
  if (a2 <= v87)
  {
    v32 = ((unint64_t)a2 >> 26) & 0x3C;
    v31 = a2;
    goto LABEL_29;
  }
  v33 = *(_QWORD *)(result + 192);
  v34 = *(_QWORD *)(result + 200) + v87;
  v35 = v34 - a2 + (v33 >> 1);
  if (v35 < 1)
    goto LABEL_43;
  if (v35 < v33)
    v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v35) >> 32) >> 15)) | v85;
  v31 = v34 - 0x1000000;
  v32 = 28;
LABEL_29:
  if (v25 < 0x400000)
    goto LABEL_43;
  v36 = v26 >> 32;
  v37 = v31 >> 32;
  v38 = v4 + (int)v36 * (uint64_t)v6;
  v39 = v38 + 2 * v37;
  v40 = *(unsigned __int16 **)(result + 32);
  if (v15 >= v39)
    v41 = (unsigned __int16 *)(v38 + 2 * v37);
  else
    v41 = (unsigned __int16 *)v15;
  if (v41 < v40)
    v41 = *(unsigned __int16 **)(result + 32);
  v42 = bswap32(*v41) >> 16;
  if (!v5)
  {
    v43 = 0;
    if (!v8)
      goto LABEL_103;
LABEL_46:
    v46 = *(_DWORD *)(v8 + (v32 | v24));
LABEL_48:
    v47 = v46 & 0xF;
    v48 = HIBYTE(v46) & 3;
    if (v47 == 1)
    {
      v65 = (unsigned __int16 *)(v39 + SBYTE1(v46) * (uint64_t)v6);
      if (v15 < (unint64_t)v65)
        v65 = (unsigned __int16 *)v15;
      if (v65 < v40)
        v65 = v40;
      v66 = bswap32(*v65) >> 16;
      if (v5)
      {
        v67 = (unsigned __int8 *)(v43 + SBYTE1(v46) * (uint64_t)v7);
        if (v14 < v67)
          v67 = v14;
        if ((unint64_t)v67 < *(_QWORD *)(result + 40))
          v67 = *(unsigned __int8 **)(result + 40);
        v66 |= *v67 << 24;
      }
      v68 = interpolate_8555_19473[v48];
      v69 = v48 + 1;
      v70 = v42 - ((v68 & v42) >> v69);
      v71 = (v68 & v66) >> v69;
    }
    else
    {
      if (v47 != 2)
      {
        if (v47 == 3)
        {
          v49 = (unint64_t)HIWORD(v46) << 56;
          v50 = (unsigned __int16 *)(v39 + (v49 >> 55));
          if (v15 < (unint64_t)v50)
            v50 = (unsigned __int16 *)v15;
          if (v50 < v40)
            v50 = v40;
          v51 = bswap32(*v50) >> 16;
          v52 = v39 + SBYTE1(v46) * (uint64_t)v6;
          if (v15 >= v52)
            v53 = (unsigned __int16 *)(v39 + SBYTE1(v46) * (uint64_t)v6);
          else
            v53 = (unsigned __int16 *)v15;
          if (v53 < v40)
            v53 = v40;
          v54 = bswap32(*v53) >> 16;
          v55 = (unsigned __int16 *)(v52 + (v49 >> 55));
          if (v15 < (unint64_t)v55)
            v55 = (unsigned __int16 *)v15;
          if (v55 < v40)
            v55 = v40;
          v56 = bswap32(*v55) >> 16;
          if (v5)
          {
            v57 = (unsigned __int8 *)(v43 + SBYTE2(v46));
            v58 = *(_QWORD *)(result + 40);
            if (v14 < v57)
              v57 = v14;
            if ((unint64_t)v57 < v58)
              v57 = *(unsigned __int8 **)(result + 40);
            v51 |= *v57 << 24;
            v59 = v43 + SBYTE1(v46) * (uint64_t)v7;
            if ((unint64_t)v14 >= v59)
              v60 = (unsigned __int8 *)(v43 + SBYTE1(v46) * (uint64_t)v7);
            else
              v60 = v14;
            if ((unint64_t)v60 < v58)
              v60 = *(unsigned __int8 **)(result + 40);
            v54 |= *v60 << 24;
            v61 = (unsigned __int8 *)(v59 + SBYTE2(v46));
            if (v14 < v61)
              v61 = v14;
            if ((unint64_t)v61 < v58)
              v61 = *(unsigned __int8 **)(result + 40);
            v56 |= *v61 << 24;
          }
          v62 = interpolate_8555_19473[v48];
          v63 = v48 + 1;
          v64 = v42 - ((v62 & v42) >> v63) + ((v62 & v54) >> v63);
          v42 = v64
              - ((v64 & interpolate_8555_19473[(v46 >> 28) & 3]) >> (((v46 >> 28) & 3) + 1))
              + (((v51 - ((v62 & v51) >> v63) + ((v62 & v56) >> v63)) & interpolate_8555_19473[(v46 >> 28) & 3]) >> (((v46 >> 28) & 3) + 1));
        }
        goto LABEL_103;
      }
      v72 = (unsigned __int16 *)(v39 + ((uint64_t)((unint64_t)HIWORD(v46) << 56) >> 55));
      if (v15 < (unint64_t)v72)
        v72 = (unsigned __int16 *)v15;
      if (v72 < v40)
        v72 = v40;
      v73 = bswap32(*v72) >> 16;
      if (v5)
      {
        v74 = (unsigned __int8 *)(v43 + SBYTE2(v46));
        if (v14 < v74)
          v74 = v14;
        if ((unint64_t)v74 < *(_QWORD *)(result + 40))
          v74 = *(unsigned __int8 **)(result + 40);
        v73 |= *v74 << 24;
      }
      v75 = (v46 >> 28) & 3;
      v76 = interpolate_8555_19473[v75];
      LOBYTE(v75) = v75 + 1;
      v70 = v42 - ((v76 & v42) >> v75);
      v71 = (v76 & v73) >> v75;
    }
    v42 = v70 + v71;
    goto LABEL_103;
  }
  v43 = v5 + (int)v36 * (uint64_t)v7 + v37;
  v44 = *(unsigned __int8 **)(result + 40);
  if ((unint64_t)v14 >= v43)
    v45 = (unsigned __int8 *)v43;
  else
    v45 = v14;
  if (v45 >= v44)
    v44 = v45;
  v42 |= *v44 << 24;
  if (v8)
    goto LABEL_46;
LABEL_103:
  v77 = 0;
  v78 = 0;
  a3 += v9;
  v79 = v89 - a3;
  a2 += v10;
  v80 = v87 - a2;
  while (1)
  {
    v81 = (v42 << 14) & 0xF80000 | ((v42 >> 10) << 27) | ((v42 & 0x1F) << 11);
    *(_DWORD *)(v91 + 4 + 4 * v77) = (v81 >> 5) & 0x3F3F3F3F | ((v11 | (v42 >> 5) | v42) >> 24) | v81;
    *(_BYTE *)(v90 + 1 + v77) = v25 >> 22;
    if (a4 - 1 == (_DWORD)v77)
      return result;
    if ((v79 | v80 | (a3 - v88) | (a2 - v86)) < 0)
    {
      v90 += v77 + 1;
      v91 = v91 - v78 + 4;
      a4 += ~(_DWORD)v77;
      if (a4)
        goto LABEL_5;
      return result;
    }
    v39 = v4 + SHIDWORD(a3) * (uint64_t)v6 + 2 * (a2 >> 32);
    v40 = *(unsigned __int16 **)(result + 32);
    if (v15 >= v39)
      v82 = (unsigned __int16 *)(v4 + SHIDWORD(a3) * (uint64_t)v6 + 2 * (a2 >> 32));
    else
      v82 = (unsigned __int16 *)v15;
    if (v82 < v40)
      v82 = *(unsigned __int16 **)(result + 32);
    v42 = bswap32(*v82) >> 16;
    if (v5)
    {
      v43 = v5 + SHIDWORD(a3) * (uint64_t)v7 + (a2 >> 32);
      v83 = *(unsigned __int8 **)(result + 40);
      if ((unint64_t)v14 >= v43)
        v84 = v5 + SHIDWORD(a3) * (uint64_t)v7 + (a2 >> 32);
      else
        v84 = (unint64_t)v14;
      if (v84 >= (unint64_t)v83)
        v83 = (unsigned __int8 *)v84;
      v42 |= *v83 << 24;
    }
    if (v8)
    {
      v46 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v46 & 0xF) != 0)
      {
        v90 += v77 + 1;
        v91 = v91 - v78 + 4;
        a4 += ~(_DWORD)v77;
        v25 = -1;
        goto LABEL_48;
      }
    }
    v78 -= 4;
    ++v77;
    a3 += v9;
    v79 -= v9;
    a2 += v10;
    v80 -= v10;
    v25 = -1;
  }
}

uint64_t rgba32_sample_rgb555(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  unsigned __int16 *v41;
  unsigned int v42;
  unint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unsigned int v46;
  int v47;
  int v48;
  int64_t v49;
  unsigned __int16 *v50;
  unsigned int v51;
  unint64_t v52;
  unsigned __int16 *v53;
  unsigned int v54;
  unsigned __int16 *v55;
  unsigned int v56;
  unsigned __int8 *v57;
  unint64_t v58;
  unint64_t v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  int v62;
  char v63;
  unsigned int v64;
  unsigned __int16 *v65;
  unsigned int v66;
  unsigned __int8 *v67;
  int v68;
  char v69;
  unsigned int v70;
  unsigned int v71;
  unsigned __int16 *v72;
  unsigned int v73;
  unsigned __int8 *v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned __int16 *v82;
  unsigned __int8 *v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_QWORD *)(result + 40);
  v6 = *(_DWORD *)(result + 24);
  v7 = *(_DWORD *)(result + 28);
  v8 = *(_QWORD *)(result + 176);
  v87 = *(_QWORD *)(result + 80);
  v10 = *(_QWORD *)(result + 112);
  v9 = *(_QWORD *)(result + 120);
  v91 = *(_QWORD *)(result + 152) - 4;
  v89 = *(_QWORD *)(result + 88);
  v90 = *(_QWORD *)(result + 144) - 1;
  if (v5)
    v11 = 0;
  else
    v11 = -16777216;
  v12 = *(_DWORD *)(result + 260) - 1;
  v13 = *(unsigned int *)(result + 256);
  v85 = *(_DWORD *)(result + 188);
  v14 = (unsigned __int8 *)(v5 + (v13 - 1) + (v12 * v7));
  v15 = v4 + (v12 * v6) + 2 * v13 - 4;
  v88 = *(_QWORD *)(result + 72);
  v86 = *(_QWORD *)(result + 64);
  while (1)
  {
LABEL_5:
    if (a3 >= v88)
    {
      if (a3 <= v89)
      {
        v24 = ((unint64_t)a3 >> 22) & 0x3C0;
        v25 = 0x3FFFFFFF;
        v26 = a3;
        v27 = v86;
      }
      else
      {
        v20 = *(_QWORD *)(result + 216);
        v21 = *(_QWORD *)(result + 224) + v89;
        v22 = v21 - a3 + (v20 >> 1);
        if (v22 < 1)
          goto LABEL_43;
        if (v22 >= v20)
          LODWORD(v23) = 0x3FFFFFFF;
        else
          v23 = (unint64_t)(*(_QWORD *)(result + 232) * v22) >> 32;
        v27 = v86;
        v25 = v85 | v23;
        v26 = v21 - 0x1000000;
        v24 = 448;
      }
    }
    else
    {
      v16 = *(_QWORD *)(result + 216);
      v17 = v88 - *(_QWORD *)(result + 224);
      v18 = a3 - v17 + (v16 >> 1);
      if (v18 < 1)
        goto LABEL_43;
      if (v18 >= v16)
        LODWORD(v19) = 0x3FFFFFFF;
      else
        v19 = (unint64_t)(*(_QWORD *)(result + 232) * v18) >> 32;
      v27 = v86;
      v25 = v85 | v19;
      v26 = v17 + 0x1000000;
      v24 = 512;
    }
    if (a2 >= v27)
      break;
    v28 = *(_QWORD *)(result + 192);
    v29 = v27 - *(_QWORD *)(result + 200);
    v30 = a2 - v29 + (v28 >> 1);
    if (v30 >= 1)
    {
      if (v30 < v28)
        v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v30) >> 32) >> 15)) | v85;
      v31 = v29 + 0x1000000;
      v32 = 32;
      goto LABEL_29;
    }
LABEL_43:
    --a4;
    a2 += v10;
    a3 += v9;
    *(_BYTE *)++v90 = 0;
    v91 += 4;
    if (!a4)
      return result;
  }
  if (a2 <= v87)
  {
    v32 = ((unint64_t)a2 >> 26) & 0x3C;
    v31 = a2;
    goto LABEL_29;
  }
  v33 = *(_QWORD *)(result + 192);
  v34 = *(_QWORD *)(result + 200) + v87;
  v35 = v34 - a2 + (v33 >> 1);
  if (v35 < 1)
    goto LABEL_43;
  if (v35 < v33)
    v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v35) >> 32) >> 15)) | v85;
  v31 = v34 - 0x1000000;
  v32 = 28;
LABEL_29:
  if (v25 < 0x400000)
    goto LABEL_43;
  v36 = v26 >> 32;
  v37 = v31 >> 32;
  v38 = v4 + (int)v36 * (uint64_t)v6;
  v39 = v38 + 2 * v37;
  v40 = *(unsigned __int16 **)(result + 32);
  if (v15 >= v39)
    v41 = (unsigned __int16 *)(v38 + 2 * v37);
  else
    v41 = (unsigned __int16 *)v15;
  if (v41 < v40)
    v41 = *(unsigned __int16 **)(result + 32);
  v42 = *v41;
  if (!v5)
  {
    v43 = 0;
    if (!v8)
      goto LABEL_103;
LABEL_46:
    v46 = *(_DWORD *)(v8 + (v32 | v24));
LABEL_48:
    v47 = v46 & 0xF;
    v48 = HIBYTE(v46) & 3;
    if (v47 == 1)
    {
      v65 = (unsigned __int16 *)(v39 + SBYTE1(v46) * (uint64_t)v6);
      if (v15 < (unint64_t)v65)
        v65 = (unsigned __int16 *)v15;
      if (v65 < v40)
        v65 = v40;
      v66 = *v65;
      if (v5)
      {
        v67 = (unsigned __int8 *)(v43 + SBYTE1(v46) * (uint64_t)v7);
        if (v14 < v67)
          v67 = v14;
        if ((unint64_t)v67 < *(_QWORD *)(result + 40))
          v67 = *(unsigned __int8 **)(result + 40);
        v66 |= *v67 << 24;
      }
      v68 = interpolate_8555_19473[v48];
      v69 = v48 + 1;
      v70 = v42 - ((v68 & v42) >> v69);
      v71 = (v68 & v66) >> v69;
    }
    else
    {
      if (v47 != 2)
      {
        if (v47 == 3)
        {
          v49 = (unint64_t)HIWORD(v46) << 56;
          v50 = (unsigned __int16 *)(v39 + (v49 >> 55));
          if (v15 < (unint64_t)v50)
            v50 = (unsigned __int16 *)v15;
          if (v50 < v40)
            v50 = v40;
          v51 = *v50;
          v52 = v39 + SBYTE1(v46) * (uint64_t)v6;
          if (v15 >= v52)
            v53 = (unsigned __int16 *)(v39 + SBYTE1(v46) * (uint64_t)v6);
          else
            v53 = (unsigned __int16 *)v15;
          if (v53 < v40)
            v53 = v40;
          v54 = *v53;
          v55 = (unsigned __int16 *)(v52 + (v49 >> 55));
          if (v15 < (unint64_t)v55)
            v55 = (unsigned __int16 *)v15;
          if (v55 < v40)
            v55 = v40;
          v56 = *v55;
          if (v5)
          {
            v57 = (unsigned __int8 *)(v43 + SBYTE2(v46));
            v58 = *(_QWORD *)(result + 40);
            if (v14 < v57)
              v57 = v14;
            if ((unint64_t)v57 < v58)
              v57 = *(unsigned __int8 **)(result + 40);
            v51 |= *v57 << 24;
            v59 = v43 + SBYTE1(v46) * (uint64_t)v7;
            if ((unint64_t)v14 >= v59)
              v60 = (unsigned __int8 *)(v43 + SBYTE1(v46) * (uint64_t)v7);
            else
              v60 = v14;
            if ((unint64_t)v60 < v58)
              v60 = *(unsigned __int8 **)(result + 40);
            v54 |= *v60 << 24;
            v61 = (unsigned __int8 *)(v59 + SBYTE2(v46));
            if (v14 < v61)
              v61 = v14;
            if ((unint64_t)v61 < v58)
              v61 = *(unsigned __int8 **)(result + 40);
            v56 |= *v61 << 24;
          }
          v62 = interpolate_8555_19473[v48];
          v63 = v48 + 1;
          v64 = v42 - ((v62 & v42) >> v63) + ((v62 & v54) >> v63);
          v42 = v64
              - ((v64 & interpolate_8555_19473[(v46 >> 28) & 3]) >> (((v46 >> 28) & 3) + 1))
              + (((v51 - ((v62 & v51) >> v63) + ((v62 & v56) >> v63)) & interpolate_8555_19473[(v46 >> 28) & 3]) >> (((v46 >> 28) & 3) + 1));
        }
        goto LABEL_103;
      }
      v72 = (unsigned __int16 *)(v39 + ((uint64_t)((unint64_t)HIWORD(v46) << 56) >> 55));
      if (v15 < (unint64_t)v72)
        v72 = (unsigned __int16 *)v15;
      if (v72 < v40)
        v72 = v40;
      v73 = *v72;
      if (v5)
      {
        v74 = (unsigned __int8 *)(v43 + SBYTE2(v46));
        if (v14 < v74)
          v74 = v14;
        if ((unint64_t)v74 < *(_QWORD *)(result + 40))
          v74 = *(unsigned __int8 **)(result + 40);
        v73 |= *v74 << 24;
      }
      v75 = (v46 >> 28) & 3;
      v76 = interpolate_8555_19473[v75];
      LOBYTE(v75) = v75 + 1;
      v70 = v42 - ((v76 & v42) >> v75);
      v71 = (v76 & v73) >> v75;
    }
    v42 = v70 + v71;
    goto LABEL_103;
  }
  v43 = v5 + (int)v36 * (uint64_t)v7 + v37;
  v44 = *(unsigned __int8 **)(result + 40);
  if ((unint64_t)v14 >= v43)
    v45 = (unsigned __int8 *)v43;
  else
    v45 = v14;
  if (v45 >= v44)
    v44 = v45;
  v42 |= *v44 << 24;
  if (v8)
    goto LABEL_46;
LABEL_103:
  v77 = 0;
  v78 = 0;
  a3 += v9;
  v79 = v89 - a3;
  a2 += v10;
  v80 = v87 - a2;
  while (1)
  {
    v81 = (v42 << 14) & 0xF80000 | ((v42 >> 10) << 27) | ((v42 & 0x1F) << 11);
    *(_DWORD *)(v91 + 4 + 4 * v77) = (v81 >> 5) & 0x3F3F3F3F | ((v11 | (v42 >> 5) | v42) >> 24) | v81;
    *(_BYTE *)(v90 + 1 + v77) = v25 >> 22;
    if (a4 - 1 == (_DWORD)v77)
      return result;
    if ((v79 | v80 | (a3 - v88) | (a2 - v86)) < 0)
    {
      v90 += v77 + 1;
      v91 = v91 - v78 + 4;
      a4 += ~(_DWORD)v77;
      if (a4)
        goto LABEL_5;
      return result;
    }
    v39 = v4 + SHIDWORD(a3) * (uint64_t)v6 + 2 * (a2 >> 32);
    v40 = *(unsigned __int16 **)(result + 32);
    if (v15 >= v39)
      v82 = (unsigned __int16 *)(v4 + SHIDWORD(a3) * (uint64_t)v6 + 2 * (a2 >> 32));
    else
      v82 = (unsigned __int16 *)v15;
    if (v82 < v40)
      v82 = *(unsigned __int16 **)(result + 32);
    v42 = *v82;
    if (v5)
    {
      v43 = v5 + SHIDWORD(a3) * (uint64_t)v7 + (a2 >> 32);
      v83 = *(unsigned __int8 **)(result + 40);
      if ((unint64_t)v14 >= v43)
        v84 = v5 + SHIDWORD(a3) * (uint64_t)v7 + (a2 >> 32);
      else
        v84 = (unint64_t)v14;
      if (v84 >= (unint64_t)v83)
        v83 = (unsigned __int8 *)v84;
      v42 |= *v83 << 24;
    }
    if (v8)
    {
      v46 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v46 & 0xF) != 0)
      {
        v90 += v77 + 1;
        v91 = v91 - v78 + 4;
        a4 += ~(_DWORD)v77;
        v25 = -1;
        goto LABEL_48;
      }
    }
    v78 -= 4;
    ++v77;
    a3 += v9;
    v79 -= v9;
    a2 += v10;
    v80 -= v10;
    v25 = -1;
  }
}

uint64_t rgba32_sample_RGB24(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  uint64_t v43;
  unsigned __int8 *v44;
  int v45;
  unint64_t v46;
  unsigned __int8 *v47;
  int v48;
  unsigned __int8 *v49;
  unsigned int v50;
  char v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  char v56;
  unsigned int v57;
  unsigned __int8 *v58;
  unsigned int v59;
  char v60;
  unsigned int v61;
  unsigned __int8 *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  int v71;
  uint64_t v72;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_DWORD *)(result + 24);
  v6 = *(_QWORD *)(result + 176);
  v7 = *(_QWORD *)(result + 64);
  v8 = *(_QWORD *)(result + 72);
  v9 = *(_QWORD *)(result + 88);
  v72 = *(_QWORD *)(result + 80);
  v10 = *(_QWORD *)(result + 112);
  v11 = *(_QWORD *)(result + 120);
  v12 = *(_QWORD *)(result + 152) - 4;
  v13 = *(_QWORD *)(result + 144) - 1;
  v71 = *(_DWORD *)(result + 188);
  v14 = v4 + (3 * *(_DWORD *)(result + 256)) + ((*(_DWORD *)(result + 260) - 1) * v5) - 3;
  do
  {
    while (1)
    {
      if ((uint64_t)a3 >= v8)
      {
        if ((uint64_t)a3 <= v9)
        {
          v23 = (a3 >> 22) & 0x3C0;
          v24 = 0x3FFFFFFF;
          HIDWORD(v25) = HIDWORD(a3);
        }
        else
        {
          v19 = *(_QWORD *)(result + 216);
          v20 = *(_QWORD *)(result + 224) + v9;
          v21 = v20 - a3 + (v19 >> 1);
          if (v21 < 1)
            goto LABEL_34;
          if (v21 >= v19)
            LODWORD(v22) = 0x3FFFFFFF;
          else
            v22 = (unint64_t)(*(_QWORD *)(result + 232) * v21) >> 32;
          v24 = v71 | v22;
          v25 = v20 - 0x1000000;
          v23 = 448;
        }
      }
      else
      {
        v15 = *(_QWORD *)(result + 216);
        v16 = v8 - *(_QWORD *)(result + 224);
        v17 = a3 - v16 + (v15 >> 1);
        if (v17 < 1)
          goto LABEL_34;
        if (v17 >= v15)
          LODWORD(v18) = 0x3FFFFFFF;
        else
          v18 = (unint64_t)(*(_QWORD *)(result + 232) * v17) >> 32;
        v24 = v71 | v18;
        v25 = v16 + 0x1000000;
        v23 = 512;
      }
      if (a2 >= v7)
        break;
      v26 = *(_QWORD *)(result + 192);
      v27 = v7 - *(_QWORD *)(result + 200);
      v28 = a2 - v27 + (v26 >> 1);
      if (v28 >= 1)
      {
        if (v28 < v26)
          v24 = ((v24 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v28) >> 32) >> 15)) | v71;
        v29 = v27 + 0x1000000;
        v30 = 32;
        goto LABEL_26;
      }
LABEL_34:
      --a4;
      a2 += v10;
      a3 += v11;
      v12 += 4;
      *(_BYTE *)++v13 = 0;
      if (!a4)
        return result;
    }
    if (a2 <= v72)
    {
      v30 = ((unint64_t)a2 >> 26) & 0x3C;
      v29 = a2;
      goto LABEL_26;
    }
    v31 = *(_QWORD *)(result + 192);
    v32 = *(_QWORD *)(result + 200) + v72;
    v33 = v32 - a2 + (v31 >> 1);
    if (v33 < 1)
      goto LABEL_34;
    if (v33 < v31)
      v24 = ((v24 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v33) >> 32) >> 15)) | v71;
    v29 = v32 - 0x1000000;
    v30 = 28;
LABEL_26:
    if (v24 < 0x400000)
      goto LABEL_34;
    v34 = v4 + SHIDWORD(v25) * (uint64_t)v5;
    v35 = 3 * (v29 >> 32);
    v36 = v34 + v35;
    v37 = *(unsigned __int8 **)(result + 32);
    if (v14 >= v34 + v35)
      v38 = (unsigned __int8 *)(v34 + v35);
    else
      v38 = (unsigned __int8 *)v14;
    if (v38 < v37)
      v38 = *(unsigned __int8 **)(result + 32);
    v39 = (v38[1] << 16) | (*v38 << 24) | (v38[2] << 8) | 0xFF;
    if (!v6)
      goto LABEL_66;
    v40 = *(_DWORD *)(v6 + (v30 | v23));
LABEL_37:
    v41 = v40 & 0xF;
    v42 = HIBYTE(v40) & 3;
    switch(v41)
    {
      case 1:
        v58 = (unsigned __int8 *)(v36 + SBYTE1(v40) * (uint64_t)v5);
        if (v14 < (unint64_t)v58)
          v58 = (unsigned __int8 *)v14;
        if (v58 < v37)
          v58 = v37;
        v59 = interpolate_8888_19472[v42];
        v60 = v42 + 1;
        v57 = v39 - ((v59 & v39) >> v60);
        v61 = (((v58[1] << 16) | (*v58 << 24) | (v58[2] << 8) | 0xFF) & v59) >> v60;
        goto LABEL_65;
      case 2:
        v62 = (unsigned __int8 *)(v36 + 3 * SBYTE2(v40));
        if (v14 < (unint64_t)v62)
          v62 = (unsigned __int8 *)v14;
        if (v62 < v37)
          v62 = v37;
        v53 = (v62[1] << 16) | (*v62 << 24) | (v62[2] << 8) | 0xFF;
        v63 = (v40 >> 28) & 3;
        v55 = interpolate_8888_19472[v63];
        v56 = v63 + 1;
        v57 = v39 - ((v55 & v39) >> v56);
        goto LABEL_64;
      case 3:
        v43 = 3 * SBYTE2(v40);
        v44 = (unsigned __int8 *)(v36 + v43);
        if (v14 < v36 + v43)
          v44 = (unsigned __int8 *)v14;
        if (v44 < v37)
          v44 = v37;
        v46 = v36 + SBYTE1(v40) * (uint64_t)v5;
        if (v14 >= v46)
          v47 = (unsigned __int8 *)(v36 + SBYTE1(v40) * (uint64_t)v5);
        else
          v47 = (unsigned __int8 *)v14;
        if (v47 < v37)
          v47 = v37;
        v48 = (v47[1] << 16) | (*v47 << 24) | (v47[2] << 8) | 0xFF;
        v49 = (unsigned __int8 *)(v46 + v43);
        if (v14 < (unint64_t)v49)
          v49 = (unsigned __int8 *)v14;
        if (v49 < v37)
          v49 = v37;
        v50 = interpolate_8888_19472[v42];
        v51 = v42 + 1;
        v52 = v39 - ((v50 & v39) >> v51) + ((v48 & v50) >> v51);
        v45 = (v44[1] << 16) | (*v44 << 24) | (v44[2] << 8) | 0xFF;
        v53 = v45 - ((v50 & v45) >> v51) + ((((v49[1] << 16) | (*v49 << 24) | (v49[2] << 8) | 0xFF) & v50) >> v51);
        v54 = (v40 >> 28) & 3;
        v55 = interpolate_8888_19472[v54];
        v56 = v54 + 1;
        v57 = v52 - ((v52 & v55) >> v56);
LABEL_64:
        v61 = (v53 & v55) >> v56;
LABEL_65:
        v39 = v57 + v61;
        break;
    }
LABEL_66:
    *(_DWORD *)(v12 + 4) = v39;
    *(_BYTE *)(v13 + 1) = v24 >> 22;
    if (a4 == 1)
      break;
    v64 = 0;
    a2 += v10;
    v65 = v72 - a2;
    a3 += v11;
    v66 = v9 - a3;
    v67 = -4;
    while (((v66 | v65 | (a3 - v8) | (a2 - v7)) & 0x8000000000000000) == 0)
    {
      v68 = v4 + SHIDWORD(a3) * (uint64_t)v5;
      v69 = 3 * (a2 >> 32);
      v36 = v68 + v69;
      v37 = *(unsigned __int8 **)(result + 32);
      if (v14 >= v68 + v69)
        v70 = (unsigned __int8 *)(v68 + v69);
      else
        v70 = (unsigned __int8 *)v14;
      if (v70 < v37)
        v70 = *(unsigned __int8 **)(result + 32);
      v39 = (v70[1] << 16) | (*v70 << 24) | (v70[2] << 8) | 0xFF;
      if (v6)
      {
        v40 = *(_DWORD *)(v6 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
        if ((v40 & 0xF) != 0)
        {
          v13 += v64 + 1;
          v12 -= v67;
          a4 += ~(_DWORD)v64;
          v24 = -1;
          goto LABEL_37;
        }
      }
      *(_DWORD *)(v12 + 4 * v64 + 8) = v39;
      *(_BYTE *)(v13 + v64++ + 2) = -1;
      v67 -= 4;
      a2 += v10;
      v65 -= v10;
      a3 += v11;
      v66 -= v11;
      if (a4 - 1 == (_DWORD)v64)
        return result;
    }
    v13 += v64 + 1;
    v12 -= v67;
    a4 += ~(_DWORD)v64;
  }
  while (a4);
  return result;
}

uint64_t rgba32_sample_RGBA32(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  unint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int *v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  int v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v4 = *(_DWORD *)(result + 24);
  v5 = *(_QWORD *)(result + 112);
  v6 = *(_QWORD *)(result + 48);
  v7 = *(_QWORD *)(result + 56);
  if (v6)
  {
    v109 = *(_QWORD *)(result + 112);
    if (v5 > v6)
      v109 = v5 % v6;
  }
  else
  {
    v109 = 0;
  }
  v8 = *(_QWORD *)(result + 176);
  v9 = *(_QWORD *)(result + 32);
  v10 = *(_QWORD *)(result + 120);
  if (v7)
  {
    v11 = v10 % v7;
    if (v10 <= v7)
      v11 = *(_QWORD *)(result + 120);
    v108 = v11;
  }
  else
  {
    v108 = 0;
  }
  v104 = *(_QWORD *)(result + 80);
  v105 = *(_QWORD *)(result + 64);
  v106 = *(_QWORD *)(result + 88);
  v107 = *(_QWORD *)(result + 72);
  v103 = *(_DWORD *)(result + 188);
  v12 = *(_QWORD *)(result + 152) - 4;
  v13 = *(_QWORD *)(result + 144) - 1;
  if (*(_QWORD *)(result + 40))
    v14 = 0;
  else
    v14 = 255;
  v15 = v9 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  v16 = -*(_QWORD *)(result + 64);
  v17 = -*(_QWORD *)(result + 72);
  do
  {
    while (1)
    {
      if (a3 < v107)
      {
        v18 = *(_QWORD *)(result + 216);
        v19 = v107 - *(_QWORD *)(result + 224);
        v20 = a3 - v19 + (v18 >> 1);
        if (v20 < 1)
          goto LABEL_55;
        if (v20 >= v18)
          LODWORD(v21) = 0x3FFFFFFF;
        else
          v21 = (unint64_t)(*(_QWORD *)(result + 232) * v20) >> 32;
        v28 = v103 | v21;
        v29 = v19 + 0x1000000;
        v26 = a3 - (v19 + 0x1000000);
        v27 = 512;
        goto LABEL_25;
      }
      if (a3 <= v106)
      {
        v26 = 0;
        v27 = ((unint64_t)a3 >> 22) & 0x3C0;
        v28 = 0x3FFFFFFF;
        v29 = a3;
LABEL_25:
        v30 = v105;
        goto LABEL_28;
      }
      v22 = *(_QWORD *)(result + 216);
      v23 = *(_QWORD *)(result + 224) + v106;
      v24 = v23 - a3 + (v22 >> 1);
      if (v24 < 1)
        goto LABEL_55;
      if (v24 >= v22)
        LODWORD(v25) = 0x3FFFFFFF;
      else
        v25 = (unint64_t)(*(_QWORD *)(result + 232) * v24) >> 32;
      v30 = v105;
      v28 = v103 | v25;
      v29 = v23 - 0x1000000;
      v26 = a3 - (v23 - 0x1000000);
      v27 = 448;
LABEL_28:
      if (a2 >= v30)
        break;
      v31 = *(_QWORD *)(result + 192);
      v32 = v30 - *(_QWORD *)(result + 200);
      v33 = a2 - v32 + (v31 >> 1);
      if (v33 >= 1)
      {
        if (v33 < v31)
          v28 = ((v28 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v33) >> 32) >> 15)) | v103;
        v34 = v32 + 0x1000000;
        v35 = a2 - (v32 + 0x1000000);
        v36 = 32;
        goto LABEL_39;
      }
LABEL_55:
      --a4;
      a2 += v5;
      a3 += v10;
      v12 += 4;
      *(_BYTE *)++v13 = 0;
      if (!a4)
        return result;
    }
    if (a2 <= v104)
    {
      v35 = 0;
      v36 = ((unint64_t)a2 >> 26) & 0x3C;
      v34 = a2;
      goto LABEL_39;
    }
    v37 = *(_QWORD *)(result + 192);
    v38 = *(_QWORD *)(result + 200) + v104;
    v39 = v38 - a2 + (v37 >> 1);
    if (v39 < 1)
      goto LABEL_55;
    if (v39 < v37)
      v28 = ((v28 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v39) >> 32) >> 15)) | v103;
    v34 = v38 - 0x1000000;
    v35 = a2 - (v38 - 0x1000000);
    v36 = 28;
LABEL_39:
    if (v28 < 0x400000)
      goto LABEL_55;
    if (v6)
    {
      v40 = (v7 & ((v29 % v7) >> 63)) + v29 % v7;
      v41 = (v6 & ((v34 % v6) >> 63)) + v34 % v6;
      if (v40 >= v7)
        v42 = v7;
      else
        v42 = 0;
      v29 = v40 - v42;
      if (v41 >= v6)
        v43 = v6;
      else
        v43 = 0;
      v34 = v41 - v43;
      v26 += v29;
      v35 += v34;
    }
    v44 = v9 + SHIDWORD(v29) * (uint64_t)v4;
    v45 = v34 >> 32;
    v46 = v44 + 4 * v45;
    v47 = *(unsigned int **)(result + 32);
    if (v15 >= v46)
      v48 = (unsigned int *)(v44 + 4 * v45);
    else
      v48 = (unsigned int *)v15;
    if (v48 < v47)
      v48 = *(unsigned int **)(result + 32);
    v49 = bswap32(*v48);
    if (!v8)
      goto LABEL_104;
    v50 = *(_DWORD *)(v8 + (v36 | v27));
LABEL_58:
    v51 = v50 & 0xF;
    v52 = v50 >> 8;
    v53 = HIBYTE(v50) & 3;
    switch(v51)
    {
      case 1:
        LODWORD(v77) = SBYTE1(v50);
        if (v6)
        {
          v78 = v52 << 56;
          v79 = v26 + ((uint64_t)SBYTE1(v50) << 32);
          v80 = v7 & (v79 >> 63);
          if (v80 + v79 >= v7)
            v81 = v7;
          else
            v81 = 0;
          v77 = (v80 + (v78 >> 24) - v81) >> 32;
        }
        v82 = (unsigned int *)(v46 + (int)v77 * (uint64_t)v4);
        if (v15 < (unint64_t)v82)
          v82 = (unsigned int *)v15;
        if (v82 < v47)
          v82 = v47;
        v83 = interpolate_8888_19472[v53];
        v84 = v53 + 1;
        v75 = v49 - ((v83 & v49) >> v84);
        v76 = (bswap32(*v82) & v83) >> v84;
        goto LABEL_93;
      case 2:
        v85 = SBYTE2(v50);
        if (v6)
        {
          v86 = v35 + ((uint64_t)SBYTE2(v50) << 32);
          v87 = v6 & (v86 >> 63);
          if (v87 + v86 >= v6)
            v88 = v6;
          else
            v88 = 0;
          v85 = (v87 + ((uint64_t)((unint64_t)HIWORD(v50) << 56) >> 24) - v88) >> 32;
        }
        v89 = (unsigned int *)(v46 + 4 * v85);
        if (v15 < (unint64_t)v89)
          v89 = (unsigned int *)v15;
        if (v89 < v47)
          v89 = v47;
        v49 = v49
            - ((interpolate_8888_19472[(v50 >> 28) & 3] & v49) >> (((v50 >> 28) & 3) + 1))
            + ((bswap32(*v89) & interpolate_8888_19472[(v50 >> 28) & 3]) >> (((v50 >> 28) & 3) + 1));
        break;
      case 3:
        v102 = HIBYTE(v50) & 3;
        LODWORD(v54) = SBYTE1(v50);
        v55 = SBYTE2(v50);
        if (v6)
        {
          v101 = v52 << 56;
          v56 = (unint64_t)HIWORD(v50) << 56;
          v57 = v26 + ((uint64_t)SBYTE1(v50) << 32);
          v58 = v35 + (v56 >> 24);
          v59 = v7 & (v57 >> 63);
          v60 = v6 & (v58 >> 63);
          v61 = v60 + v58;
          if (v59 + v57 >= v7)
            v62 = v7;
          else
            v62 = 0;
          if (v61 >= v6)
            v63 = v6;
          else
            v63 = 0;
          v54 = (v59 + (v101 >> 24) - v62) >> 32;
          v55 = (v60 + (v56 >> 24) - v63) >> 32;
        }
        v64 = (unsigned int *)(v46 + 4 * v55);
        if (v15 < (unint64_t)v64)
          v64 = (unsigned int *)v15;
        if (v64 < v47)
          v64 = v47;
        v65 = bswap32(*v64);
        v66 = v46 + (int)v54 * (uint64_t)v4;
        if (v15 >= v66)
          v67 = (unsigned int *)(v46 + (int)v54 * (uint64_t)v4);
        else
          v67 = (unsigned int *)v15;
        if (v67 < v47)
          v67 = v47;
        v68 = bswap32(*v67);
        v69 = (unsigned int *)(v66 + 4 * v55);
        if (v15 < (unint64_t)v69)
          v69 = (unsigned int *)v15;
        if (v69 < v47)
          v69 = v47;
        v70 = interpolate_8888_19472[v102];
        v71 = v49 - ((v70 & v49) >> (v102 + 1)) + ((v70 & v68) >> (v102 + 1));
        v72 = v65 - ((v70 & v65) >> (v102 + 1)) + ((bswap32(*v69) & v70) >> (v102 + 1));
        v73 = (v50 >> 28) & 3;
        v74 = interpolate_8888_19472[v73];
        LOBYTE(v73) = v73 + 1;
        v75 = v71 - ((v71 & v74) >> v73);
        v76 = (v72 & v74) >> v73;
LABEL_93:
        v49 = v75 + v76;
        break;
    }
LABEL_104:
    *(_DWORD *)(v12 + 4) = v49 | v14;
    *(_BYTE *)(v13 + 1) = v28 >> 22;
    if (a4 == 1)
      break;
    v90 = 0;
    a2 += v5;
    v91 = v104 - a2;
    a3 += v10;
    v92 = v106 - a3;
    v93 = -4;
    while (((v92 | v91 | (v17 + a3) | (v16 + a2)) & 0x8000000000000000) == 0)
    {
      if (v6)
      {
        v94 = (v7 & ((v26 + v108) >> 63)) + v26 + v108;
        v95 = (v6 & ((v35 + v109) >> 63)) + v35 + v109;
        if (v94 >= v7)
          v96 = v7;
        else
          v96 = 0;
        v97 = v94 - v96;
        if (v95 >= v6)
          v98 = v6;
        else
          v98 = 0;
        v99 = v95 - v98;
        v35 = v99;
        v26 = v97;
      }
      else
      {
        v99 = a2;
        HIDWORD(v97) = HIDWORD(a3);
      }
      v46 = v9 + SHIDWORD(v97) * (uint64_t)v4 + 4 * (v99 >> 32);
      v47 = *(unsigned int **)(result + 32);
      if (v15 >= v46)
        v100 = (unsigned int *)v46;
      else
        v100 = (unsigned int *)v15;
      if (v100 < v47)
        v100 = *(unsigned int **)(result + 32);
      v49 = bswap32(*v100);
      if (v8)
      {
        v50 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        if ((v50 & 0xF) != 0)
        {
          v13 += v90 + 1;
          v12 -= v93;
          a4 += ~(_DWORD)v90;
          v28 = -1;
          goto LABEL_58;
        }
      }
      *(_DWORD *)(v12 + 4 * v90 + 8) = v49 | v14;
      *(_BYTE *)(v13 + v90++ + 2) = -1;
      v93 -= 4;
      a2 += v5;
      v91 -= v5;
      a3 += v10;
      v92 -= v10;
      if (a4 - 1 == (_DWORD)v90)
        return result;
    }
    v13 += v90 + 1;
    v12 -= v93;
    a4 += ~(_DWORD)v90;
  }
  while (a4);
  return result;
}

uint64_t rgba32_sample_rgba32(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  unint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int *v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  int v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v4 = *(_DWORD *)(result + 24);
  v5 = *(_QWORD *)(result + 112);
  v6 = *(_QWORD *)(result + 48);
  v7 = *(_QWORD *)(result + 56);
  if (v6)
  {
    v109 = *(_QWORD *)(result + 112);
    if (v5 > v6)
      v109 = v5 % v6;
  }
  else
  {
    v109 = 0;
  }
  v8 = *(_QWORD *)(result + 176);
  v9 = *(_QWORD *)(result + 32);
  v10 = *(_QWORD *)(result + 120);
  if (v7)
  {
    v11 = v10 % v7;
    if (v10 <= v7)
      v11 = *(_QWORD *)(result + 120);
    v108 = v11;
  }
  else
  {
    v108 = 0;
  }
  v104 = *(_QWORD *)(result + 80);
  v105 = *(_QWORD *)(result + 64);
  v106 = *(_QWORD *)(result + 88);
  v107 = *(_QWORD *)(result + 72);
  v103 = *(_DWORD *)(result + 188);
  v12 = *(_QWORD *)(result + 152) - 4;
  v13 = *(_QWORD *)(result + 144) - 1;
  if (*(_QWORD *)(result + 40))
    v14 = 0;
  else
    v14 = 255;
  v15 = v9 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  v16 = -*(_QWORD *)(result + 64);
  v17 = -*(_QWORD *)(result + 72);
  do
  {
    while (1)
    {
      if (a3 < v107)
      {
        v18 = *(_QWORD *)(result + 216);
        v19 = v107 - *(_QWORD *)(result + 224);
        v20 = a3 - v19 + (v18 >> 1);
        if (v20 < 1)
          goto LABEL_55;
        if (v20 >= v18)
          LODWORD(v21) = 0x3FFFFFFF;
        else
          v21 = (unint64_t)(*(_QWORD *)(result + 232) * v20) >> 32;
        v28 = v103 | v21;
        v29 = v19 + 0x1000000;
        v26 = a3 - (v19 + 0x1000000);
        v27 = 512;
        goto LABEL_25;
      }
      if (a3 <= v106)
      {
        v26 = 0;
        v27 = ((unint64_t)a3 >> 22) & 0x3C0;
        v28 = 0x3FFFFFFF;
        v29 = a3;
LABEL_25:
        v30 = v105;
        goto LABEL_28;
      }
      v22 = *(_QWORD *)(result + 216);
      v23 = *(_QWORD *)(result + 224) + v106;
      v24 = v23 - a3 + (v22 >> 1);
      if (v24 < 1)
        goto LABEL_55;
      if (v24 >= v22)
        LODWORD(v25) = 0x3FFFFFFF;
      else
        v25 = (unint64_t)(*(_QWORD *)(result + 232) * v24) >> 32;
      v30 = v105;
      v28 = v103 | v25;
      v29 = v23 - 0x1000000;
      v26 = a3 - (v23 - 0x1000000);
      v27 = 448;
LABEL_28:
      if (a2 >= v30)
        break;
      v31 = *(_QWORD *)(result + 192);
      v32 = v30 - *(_QWORD *)(result + 200);
      v33 = a2 - v32 + (v31 >> 1);
      if (v33 >= 1)
      {
        if (v33 < v31)
          v28 = ((v28 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v33) >> 32) >> 15)) | v103;
        v34 = v32 + 0x1000000;
        v35 = a2 - (v32 + 0x1000000);
        v36 = 32;
        goto LABEL_39;
      }
LABEL_55:
      --a4;
      a2 += v5;
      a3 += v10;
      v12 += 4;
      *(_BYTE *)++v13 = 0;
      if (!a4)
        return result;
    }
    if (a2 <= v104)
    {
      v35 = 0;
      v36 = ((unint64_t)a2 >> 26) & 0x3C;
      v34 = a2;
      goto LABEL_39;
    }
    v37 = *(_QWORD *)(result + 192);
    v38 = *(_QWORD *)(result + 200) + v104;
    v39 = v38 - a2 + (v37 >> 1);
    if (v39 < 1)
      goto LABEL_55;
    if (v39 < v37)
      v28 = ((v28 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v39) >> 32) >> 15)) | v103;
    v34 = v38 - 0x1000000;
    v35 = a2 - (v38 - 0x1000000);
    v36 = 28;
LABEL_39:
    if (v28 < 0x400000)
      goto LABEL_55;
    if (v6)
    {
      v40 = (v7 & ((v29 % v7) >> 63)) + v29 % v7;
      v41 = (v6 & ((v34 % v6) >> 63)) + v34 % v6;
      if (v40 >= v7)
        v42 = v7;
      else
        v42 = 0;
      v29 = v40 - v42;
      if (v41 >= v6)
        v43 = v6;
      else
        v43 = 0;
      v34 = v41 - v43;
      v26 += v29;
      v35 += v34;
    }
    v44 = v9 + SHIDWORD(v29) * (uint64_t)v4;
    v45 = v34 >> 32;
    v46 = v44 + 4 * v45;
    v47 = *(unsigned int **)(result + 32);
    if (v15 >= v46)
      v48 = (unsigned int *)(v44 + 4 * v45);
    else
      v48 = (unsigned int *)v15;
    if (v48 < v47)
      v48 = *(unsigned int **)(result + 32);
    v49 = *v48;
    if (!v8)
      goto LABEL_104;
    v50 = *(_DWORD *)(v8 + (v36 | v27));
LABEL_58:
    v51 = v50 & 0xF;
    v52 = v50 >> 8;
    v53 = HIBYTE(v50) & 3;
    switch(v51)
    {
      case 1:
        LODWORD(v77) = SBYTE1(v50);
        if (v6)
        {
          v78 = v52 << 56;
          v79 = v26 + ((uint64_t)SBYTE1(v50) << 32);
          v80 = v7 & (v79 >> 63);
          if (v80 + v79 >= v7)
            v81 = v7;
          else
            v81 = 0;
          v77 = (v80 + (v78 >> 24) - v81) >> 32;
        }
        v82 = (unsigned int *)(v46 + (int)v77 * (uint64_t)v4);
        if (v15 < (unint64_t)v82)
          v82 = (unsigned int *)v15;
        if (v82 < v47)
          v82 = v47;
        v83 = interpolate_8888_19472[v53];
        v84 = v53 + 1;
        v75 = v49 - ((v83 & v49) >> v84);
        v76 = (v83 & *v82) >> v84;
        goto LABEL_93;
      case 2:
        v85 = SBYTE2(v50);
        if (v6)
        {
          v86 = v35 + ((uint64_t)SBYTE2(v50) << 32);
          v87 = v6 & (v86 >> 63);
          if (v87 + v86 >= v6)
            v88 = v6;
          else
            v88 = 0;
          v85 = (v87 + ((uint64_t)((unint64_t)HIWORD(v50) << 56) >> 24) - v88) >> 32;
        }
        v89 = (unsigned int *)(v46 + 4 * v85);
        if (v15 < (unint64_t)v89)
          v89 = (unsigned int *)v15;
        if (v89 < v47)
          v89 = v47;
        v49 = v49
            - ((interpolate_8888_19472[(v50 >> 28) & 3] & v49) >> (((v50 >> 28) & 3) + 1))
            + ((interpolate_8888_19472[(v50 >> 28) & 3] & *v89) >> (((v50 >> 28) & 3) + 1));
        break;
      case 3:
        v102 = HIBYTE(v50) & 3;
        LODWORD(v54) = SBYTE1(v50);
        v55 = SBYTE2(v50);
        if (v6)
        {
          v101 = v52 << 56;
          v56 = (unint64_t)HIWORD(v50) << 56;
          v57 = v26 + ((uint64_t)SBYTE1(v50) << 32);
          v58 = v35 + (v56 >> 24);
          v59 = v7 & (v57 >> 63);
          v60 = v6 & (v58 >> 63);
          v61 = v60 + v58;
          if (v59 + v57 >= v7)
            v62 = v7;
          else
            v62 = 0;
          if (v61 >= v6)
            v63 = v6;
          else
            v63 = 0;
          v54 = (v59 + (v101 >> 24) - v62) >> 32;
          v55 = (v60 + (v56 >> 24) - v63) >> 32;
        }
        v64 = (unsigned int *)(v46 + 4 * v55);
        if (v15 < (unint64_t)v64)
          v64 = (unsigned int *)v15;
        if (v64 < v47)
          v64 = v47;
        v65 = *v64;
        v66 = v46 + (int)v54 * (uint64_t)v4;
        if (v15 >= v66)
          v67 = (unsigned int *)(v46 + (int)v54 * (uint64_t)v4);
        else
          v67 = (unsigned int *)v15;
        if (v67 < v47)
          v67 = v47;
        v68 = *v67;
        v69 = (unsigned int *)(v66 + 4 * v55);
        if (v15 < (unint64_t)v69)
          v69 = (unsigned int *)v15;
        if (v69 < v47)
          v69 = v47;
        v70 = interpolate_8888_19472[v102];
        v71 = v49 - ((v70 & v49) >> (v102 + 1)) + ((v70 & v68) >> (v102 + 1));
        v72 = v65 - ((v70 & v65) >> (v102 + 1)) + ((v70 & *v69) >> (v102 + 1));
        v73 = (v50 >> 28) & 3;
        v74 = interpolate_8888_19472[v73];
        LOBYTE(v73) = v73 + 1;
        v75 = v71 - ((v71 & v74) >> v73);
        v76 = (v72 & v74) >> v73;
LABEL_93:
        v49 = v75 + v76;
        break;
    }
LABEL_104:
    *(_DWORD *)(v12 + 4) = v49 | v14;
    *(_BYTE *)(v13 + 1) = v28 >> 22;
    if (a4 == 1)
      break;
    v90 = 0;
    a2 += v5;
    v91 = v104 - a2;
    a3 += v10;
    v92 = v106 - a3;
    v93 = -4;
    while (((v92 | v91 | (v17 + a3) | (v16 + a2)) & 0x8000000000000000) == 0)
    {
      if (v6)
      {
        v94 = (v7 & ((v26 + v108) >> 63)) + v26 + v108;
        v95 = (v6 & ((v35 + v109) >> 63)) + v35 + v109;
        if (v94 >= v7)
          v96 = v7;
        else
          v96 = 0;
        v97 = v94 - v96;
        if (v95 >= v6)
          v98 = v6;
        else
          v98 = 0;
        v99 = v95 - v98;
        v35 = v99;
        v26 = v97;
      }
      else
      {
        v99 = a2;
        HIDWORD(v97) = HIDWORD(a3);
      }
      v46 = v9 + SHIDWORD(v97) * (uint64_t)v4 + 4 * (v99 >> 32);
      v47 = *(unsigned int **)(result + 32);
      if (v15 >= v46)
        v100 = (unsigned int *)v46;
      else
        v100 = (unsigned int *)v15;
      if (v100 < v47)
        v100 = *(unsigned int **)(result + 32);
      v49 = *v100;
      if (v8)
      {
        v50 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        if ((v50 & 0xF) != 0)
        {
          v13 += v90 + 1;
          v12 -= v93;
          a4 += ~(_DWORD)v90;
          v28 = -1;
          goto LABEL_58;
        }
      }
      *(_DWORD *)(v12 + 4 * v90 + 8) = v49 | v14;
      *(_BYTE *)(v13 + v90++ + 2) = -1;
      v93 -= 4;
      a2 += v5;
      v91 -= v5;
      a3 += v10;
      v92 -= v10;
      if (a4 - 1 == (_DWORD)v90)
        return result;
    }
    v13 += v90 + 1;
    v12 -= v93;
    a4 += ~(_DWORD)v90;
  }
  while (a4);
  return result;
}

uint64_t rgba32_sample_ARGB32(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int v43;
  int64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  int v51;
  char v52;
  unsigned int v53;
  int v54;
  int v55;
  unsigned int v56;
  unsigned int *v57;
  int v58;
  char v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int *v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  unint64_t v71;
  int v72;
  uint64_t v73;

  v4 = *(_DWORD *)(result + 24);
  v5 = *(_QWORD *)(result + 176);
  v6 = *(_QWORD *)(result + 64);
  v7 = *(_QWORD *)(result + 72);
  v8 = *(_QWORD *)(result + 88);
  v73 = *(_QWORD *)(result + 80);
  v9 = *(_QWORD *)(result + 112);
  v10 = *(_QWORD *)(result + 120);
  v11 = *(_QWORD *)(result + 152) - 4;
  v12 = *(_QWORD *)(result + 144) - 1;
  v13 = *(_QWORD *)(result + 32);
  if (*(_QWORD *)(result + 40))
    v14 = 0;
  else
    v14 = -16777216;
  v72 = *(_DWORD *)(result + 188);
  v15 = v13 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  do
  {
    while (1)
    {
      if ((uint64_t)a3 >= v7)
      {
        if ((uint64_t)a3 <= v8)
        {
          v24 = (a3 >> 22) & 0x3C0;
          v25 = 0x3FFFFFFF;
          HIDWORD(v26) = HIDWORD(a3);
        }
        else
        {
          v20 = *(_QWORD *)(result + 216);
          v21 = *(_QWORD *)(result + 224) + v8;
          v22 = v21 - a3 + (v20 >> 1);
          if (v22 < 1)
            goto LABEL_37;
          if (v22 >= v20)
            LODWORD(v23) = 0x3FFFFFFF;
          else
            v23 = (unint64_t)(*(_QWORD *)(result + 232) * v22) >> 32;
          v25 = v72 | v23;
          v26 = v21 - 0x1000000;
          v24 = 448;
        }
      }
      else
      {
        v16 = *(_QWORD *)(result + 216);
        v17 = v7 - *(_QWORD *)(result + 224);
        v18 = a3 - v17 + (v16 >> 1);
        if (v18 < 1)
          goto LABEL_37;
        if (v18 >= v16)
          LODWORD(v19) = 0x3FFFFFFF;
        else
          v19 = (unint64_t)(*(_QWORD *)(result + 232) * v18) >> 32;
        v25 = v72 | v19;
        v26 = v17 + 0x1000000;
        v24 = 512;
      }
      if (a2 >= v6)
        break;
      v27 = *(_QWORD *)(result + 192);
      v28 = v6 - *(_QWORD *)(result + 200);
      v29 = a2 - v28 + (v27 >> 1);
      if (v29 >= 1)
      {
        if (v29 < v27)
          v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v29) >> 32) >> 15)) | v72;
        v30 = v28 + 0x1000000;
        v31 = 32;
        goto LABEL_29;
      }
LABEL_37:
      --a4;
      a2 += v9;
      a3 += v10;
      v11 += 4;
      *(_BYTE *)++v12 = 0;
      if (!a4)
        return result;
    }
    if (a2 <= v73)
    {
      v31 = ((unint64_t)a2 >> 26) & 0x3C;
      v30 = a2;
      goto LABEL_29;
    }
    v32 = *(_QWORD *)(result + 192);
    v33 = *(_QWORD *)(result + 200) + v73;
    v34 = v33 - a2 + (v32 >> 1);
    if (v34 < 1)
      goto LABEL_37;
    if (v34 < v32)
      v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v34) >> 32) >> 15)) | v72;
    v30 = v33 - 0x1000000;
    v31 = 28;
LABEL_29:
    if (v25 < 0x400000)
      goto LABEL_37;
    v35 = v13 + SHIDWORD(v26) * (uint64_t)v4;
    v36 = v30 >> 32;
    v37 = v35 + 4 * v36;
    v38 = *(unsigned int **)(result + 32);
    if (v15 >= v37)
      v39 = (unsigned int *)(v35 + 4 * v36);
    else
      v39 = (unsigned int *)v15;
    if (v39 < v38)
      v39 = *(unsigned int **)(result + 32);
    v40 = bswap32(*v39);
    if (!v5)
      goto LABEL_69;
    v41 = *(_DWORD *)(v5 + (v31 | v24));
LABEL_40:
    v42 = v41 & 0xF;
    v43 = HIBYTE(v41) & 3;
    switch(v42)
    {
      case 1:
        v57 = (unsigned int *)(v37 + SBYTE1(v41) * (uint64_t)v4);
        if (v15 < (unint64_t)v57)
          v57 = (unsigned int *)v15;
        if (v57 < v38)
          v57 = v38;
        v58 = interpolate_8888_19472[v43];
        v59 = v43 + 1;
        v60 = v40 - ((v58 & v40) >> v59);
        v61 = (bswap32(*v57) & v58) >> v59;
        goto LABEL_68;
      case 2:
        v62 = (unsigned int *)(v37 + ((uint64_t)((unint64_t)HIWORD(v41) << 56) >> 54));
        if (v15 < (unint64_t)v62)
          v62 = (unsigned int *)v15;
        if (v62 < v38)
          v62 = v38;
        v53 = bswap32(*v62);
        v54 = (v41 >> 28) & 3;
        v55 = interpolate_8888_19472[v54];
        v56 = v55 & v40;
        goto LABEL_67;
      case 3:
        v44 = (unint64_t)HIWORD(v41) << 56;
        v45 = (unsigned int *)(v37 + (v44 >> 54));
        if (v15 < (unint64_t)v45)
          v45 = (unsigned int *)v15;
        if (v45 < v38)
          v45 = v38;
        v46 = bswap32(*v45);
        v47 = v37 + SBYTE1(v41) * (uint64_t)v4;
        if (v15 >= v47)
          v48 = (unsigned int *)(v37 + SBYTE1(v41) * (uint64_t)v4);
        else
          v48 = (unsigned int *)v15;
        if (v48 < v38)
          v48 = v38;
        v49 = bswap32(*v48);
        v50 = (unsigned int *)(v47 + (v44 >> 54));
        if (v15 < (unint64_t)v50)
          v50 = (unsigned int *)v15;
        if (v50 < v38)
          v50 = v38;
        v51 = interpolate_8888_19472[v43];
        v52 = v43 + 1;
        v40 = v40 - ((v51 & v40) >> v52) + ((v51 & v49) >> v52);
        v53 = v46 - ((v51 & v46) >> v52) + ((bswap32(*v50) & v51) >> v52);
        v54 = (v41 >> 28) & 3;
        v55 = interpolate_8888_19472[v54];
        v56 = v40 & v55;
LABEL_67:
        v63 = v54 + 1;
        v60 = v40 - (v56 >> v63);
        v61 = (v53 & v55) >> v63;
LABEL_68:
        v40 = v60 + v61;
        break;
    }
LABEL_69:
    HIDWORD(v64) = v40 | v14;
    LODWORD(v64) = v40 | v14;
    *(_DWORD *)(v11 + 4) = v64 >> 24;
    *(_BYTE *)(v12 + 1) = v25 >> 22;
    if (a4 == 1)
      break;
    v65 = 0;
    a2 += v9;
    v66 = v73 - a2;
    a3 += v10;
    v67 = v8 - a3;
    v68 = -4;
    while (((v67 | v66 | (a3 - v7) | (a2 - v6)) & 0x8000000000000000) == 0)
    {
      v69 = v13 + SHIDWORD(a3) * (uint64_t)v4;
      v37 = v69 + 4 * (a2 >> 32);
      v38 = *(unsigned int **)(result + 32);
      if (v15 >= v37)
        v70 = (unsigned int *)(v69 + 4 * (a2 >> 32));
      else
        v70 = (unsigned int *)v15;
      if (v70 < v38)
        v70 = *(unsigned int **)(result + 32);
      v40 = bswap32(*v70);
      if (v5)
      {
        v41 = *(_DWORD *)(v5 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
        if ((v41 & 0xF) != 0)
        {
          v12 += v65 + 1;
          v11 -= v68;
          a4 += ~(_DWORD)v65;
          v25 = -1;
          goto LABEL_40;
        }
      }
      HIDWORD(v71) = v40 | v14;
      LODWORD(v71) = v40 | v14;
      *(_DWORD *)(v11 + 4 * v65 + 8) = v71 >> 24;
      *(_BYTE *)(v12 + v65++ + 2) = -1;
      v68 -= 4;
      a2 += v9;
      v66 -= v9;
      a3 += v10;
      v67 -= v10;
      if (a4 - 1 == (_DWORD)v65)
        return result;
    }
    v12 += v65 + 1;
    v11 -= v68;
    a4 += ~(_DWORD)v65;
  }
  while (a4);
  return result;
}

uint64_t rgba32_sample_argb32(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int v43;
  int64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  char v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  char v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  char v62;
  unsigned int v63;
  unsigned int *v64;
  int v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  unint64_t v74;
  int v75;
  uint64_t v76;

  v4 = *(_DWORD *)(result + 24);
  v5 = *(_QWORD *)(result + 176);
  v6 = *(_QWORD *)(result + 64);
  v7 = *(_QWORD *)(result + 72);
  v8 = *(_QWORD *)(result + 88);
  v76 = *(_QWORD *)(result + 80);
  v9 = *(_QWORD *)(result + 112);
  v10 = *(_QWORD *)(result + 120);
  v11 = *(_QWORD *)(result + 152) - 4;
  v12 = *(_QWORD *)(result + 144) - 1;
  v13 = *(_QWORD *)(result + 32);
  if (*(_QWORD *)(result + 40))
    v14 = 0;
  else
    v14 = -16777216;
  v75 = *(_DWORD *)(result + 188);
  v15 = v13 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  do
  {
    while (1)
    {
      if ((uint64_t)a3 >= v7)
      {
        if ((uint64_t)a3 <= v8)
        {
          v24 = (a3 >> 22) & 0x3C0;
          v25 = 0x3FFFFFFF;
          HIDWORD(v26) = HIDWORD(a3);
        }
        else
        {
          v20 = *(_QWORD *)(result + 216);
          v21 = *(_QWORD *)(result + 224) + v8;
          v22 = v21 - a3 + (v20 >> 1);
          if (v22 < 1)
            goto LABEL_37;
          if (v22 >= v20)
            LODWORD(v23) = 0x3FFFFFFF;
          else
            v23 = (unint64_t)(*(_QWORD *)(result + 232) * v22) >> 32;
          v25 = v75 | v23;
          v26 = v21 - 0x1000000;
          v24 = 448;
        }
      }
      else
      {
        v16 = *(_QWORD *)(result + 216);
        v17 = v7 - *(_QWORD *)(result + 224);
        v18 = a3 - v17 + (v16 >> 1);
        if (v18 < 1)
          goto LABEL_37;
        if (v18 >= v16)
          LODWORD(v19) = 0x3FFFFFFF;
        else
          v19 = (unint64_t)(*(_QWORD *)(result + 232) * v18) >> 32;
        v25 = v75 | v19;
        v26 = v17 + 0x1000000;
        v24 = 512;
      }
      if (a2 >= v6)
        break;
      v27 = *(_QWORD *)(result + 192);
      v28 = v6 - *(_QWORD *)(result + 200);
      v29 = a2 - v28 + (v27 >> 1);
      if (v29 >= 1)
      {
        if (v29 < v27)
          v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v29) >> 32) >> 15)) | v75;
        v30 = v28 + 0x1000000;
        v31 = 32;
        goto LABEL_29;
      }
LABEL_37:
      --a4;
      a2 += v9;
      a3 += v10;
      v11 += 4;
      *(_BYTE *)++v12 = 0;
      if (!a4)
        return result;
    }
    if (a2 <= v76)
    {
      v31 = ((unint64_t)a2 >> 26) & 0x3C;
      v30 = a2;
      goto LABEL_29;
    }
    v32 = *(_QWORD *)(result + 192);
    v33 = *(_QWORD *)(result + 200) + v76;
    v34 = v33 - a2 + (v32 >> 1);
    if (v34 < 1)
      goto LABEL_37;
    if (v34 < v32)
      v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v34) >> 32) >> 15)) | v75;
    v30 = v33 - 0x1000000;
    v31 = 28;
LABEL_29:
    if (v25 < 0x400000)
      goto LABEL_37;
    v35 = v13 + SHIDWORD(v26) * (uint64_t)v4;
    v36 = v30 >> 32;
    v37 = v35 + 4 * v36;
    v38 = *(unsigned int **)(result + 32);
    if (v15 >= v37)
      v39 = (unsigned int *)(v35 + 4 * v36);
    else
      v39 = (unsigned int *)v15;
    if (v39 < v38)
      v39 = *(unsigned int **)(result + 32);
    v40 = *v39;
    if (!v5)
      goto LABEL_69;
    v41 = *(_DWORD *)(v5 + (v31 | v24));
LABEL_40:
    v42 = v41 & 0xF;
    v43 = HIBYTE(v41) & 3;
    switch(v42)
    {
      case 1:
        v60 = (unsigned int *)(v37 + SBYTE1(v41) * (uint64_t)v4);
        if (v15 < (unint64_t)v60)
          v60 = (unsigned int *)v15;
        if (v60 < v38)
          v60 = v38;
        v61 = interpolate_8888_19472[v43];
        v62 = v43 + 1;
        v58 = v40 - ((v61 & v40) >> v62);
        v63 = (v61 & *v60) >> v62;
        goto LABEL_68;
      case 2:
        v64 = (unsigned int *)(v37 + ((uint64_t)((unint64_t)HIWORD(v41) << 56) >> 54));
        if (v15 < (unint64_t)v64)
          v64 = (unsigned int *)v15;
        if (v64 < v38)
          v64 = v38;
        v65 = (v41 >> 28) & 3;
        v66 = interpolate_8888_19472[v65];
        v57 = v65 + 1;
        v58 = v40 - ((v66 & v40) >> v57);
        v59 = v66 & *v64;
        goto LABEL_67;
      case 3:
        v44 = (unint64_t)HIWORD(v41) << 56;
        v45 = (unsigned int *)(v37 + (v44 >> 54));
        if (v15 < (unint64_t)v45)
          v45 = (unsigned int *)v15;
        if (v45 < v38)
          v45 = v38;
        v46 = *v45;
        v47 = v37 + SBYTE1(v41) * (uint64_t)v4;
        if (v15 >= v47)
          v48 = (unsigned int *)(v37 + SBYTE1(v41) * (uint64_t)v4);
        else
          v48 = (unsigned int *)v15;
        if (v48 < v38)
          v48 = v38;
        v49 = *v48;
        v50 = (unsigned int *)(v47 + (v44 >> 54));
        if (v15 < (unint64_t)v50)
          v50 = (unsigned int *)v15;
        if (v50 < v38)
          v50 = v38;
        v51 = interpolate_8888_19472[v43];
        v52 = v43 + 1;
        v53 = v40 - ((v51 & v40) >> v52) + ((v51 & v49) >> v52);
        v54 = v46 - ((v51 & v46) >> v52) + ((v51 & *v50) >> v52);
        v55 = (v41 >> 28) & 3;
        v56 = interpolate_8888_19472[v55];
        v57 = v55 + 1;
        v58 = v53 - ((v53 & v56) >> v57);
        v59 = v54 & v56;
LABEL_67:
        v63 = v59 >> v57;
LABEL_68:
        v40 = v58 + v63;
        break;
    }
LABEL_69:
    HIDWORD(v67) = v40 | v14;
    LODWORD(v67) = v40 | v14;
    *(_DWORD *)(v11 + 4) = v67 >> 24;
    *(_BYTE *)(v12 + 1) = v25 >> 22;
    if (a4 == 1)
      break;
    v68 = 0;
    a2 += v9;
    v69 = v76 - a2;
    a3 += v10;
    v70 = v8 - a3;
    v71 = -4;
    while (((v70 | v69 | (a3 - v7) | (a2 - v6)) & 0x8000000000000000) == 0)
    {
      v72 = v13 + SHIDWORD(a3) * (uint64_t)v4;
      v37 = v72 + 4 * (a2 >> 32);
      v38 = *(unsigned int **)(result + 32);
      if (v15 >= v37)
        v73 = (unsigned int *)(v72 + 4 * (a2 >> 32));
      else
        v73 = (unsigned int *)v15;
      if (v73 < v38)
        v73 = *(unsigned int **)(result + 32);
      v40 = *v73;
      if (v5)
      {
        v41 = *(_DWORD *)(v5 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
        if ((v41 & 0xF) != 0)
        {
          v12 += v68 + 1;
          v11 -= v71;
          a4 += ~(_DWORD)v68;
          v25 = -1;
          goto LABEL_40;
        }
      }
      HIDWORD(v74) = v40 | v14;
      LODWORD(v74) = v40 | v14;
      *(_DWORD *)(v11 + 4 * v68 + 8) = v74 >> 24;
      *(_BYTE *)(v12 + v68++ + 2) = -1;
      v71 -= 4;
      a2 += v9;
      v69 -= v9;
      a3 += v10;
      v70 -= v10;
      if (a4 - 1 == (_DWORD)v68)
        return result;
    }
    v12 += v68 + 1;
    v11 -= v71;
    a4 += ~(_DWORD)v68;
  }
  while (a4);
  return result;
}

uint64_t rgba32_sample_CMYK32(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  unsigned int *v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned int v45;
  int v46;
  int v47;
  int64_t v48;
  unsigned int *v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int *v52;
  unint64_t v53;
  unsigned int *v54;
  unint64_t v55;
  unsigned __int8 *v56;
  unint64_t v57;
  unint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  unsigned int *v64;
  unint64_t v65;
  unsigned __int8 *v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int *v71;
  unint64_t v72;
  unsigned __int8 *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  int8x8_t v81;
  unsigned int *v82;
  unsigned __int8 *v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_QWORD *)(result + 40);
  v6 = *(_DWORD *)(result + 24);
  v7 = *(_DWORD *)(result + 28);
  v8 = *(_QWORD *)(result + 176);
  v87 = *(_QWORD *)(result + 80);
  v10 = *(_QWORD *)(result + 112);
  v9 = *(_QWORD *)(result + 120);
  v85 = *(_DWORD *)(result + 188);
  v91 = *(_QWORD *)(result + 152) - 4;
  v89 = *(_QWORD *)(result + 88);
  v90 = *(_QWORD *)(result + 144) - 1;
  if (v5)
    v11 = 0;
  else
    v11 = 0xFF00000000;
  v12 = *(_DWORD *)(result + 260) - 1;
  v13 = *(unsigned int *)(result + 256);
  v14 = (unsigned __int8 *)(v5 + (v13 - 1) + (v12 * v7));
  v15 = v4 + (v12 * v6) + 4 * v13 - 8;
  v88 = *(_QWORD *)(result + 72);
  v86 = *(_QWORD *)(result + 64);
  while (1)
  {
LABEL_5:
    if (a3 >= v88)
    {
      if (a3 <= v89)
      {
        v24 = ((unint64_t)a3 >> 22) & 0x3C0;
        v25 = 0x3FFFFFFF;
        v26 = a3;
        v27 = v86;
      }
      else
      {
        v20 = *(_QWORD *)(result + 216);
        v21 = *(_QWORD *)(result + 224) + v89;
        v22 = v21 - a3 + (v20 >> 1);
        if (v22 < 1)
          goto LABEL_43;
        if (v22 >= v20)
          LODWORD(v23) = 0x3FFFFFFF;
        else
          v23 = (unint64_t)(*(_QWORD *)(result + 232) * v22) >> 32;
        v27 = v86;
        v25 = v85 | v23;
        v26 = v21 - 0x1000000;
        v24 = 448;
      }
    }
    else
    {
      v16 = *(_QWORD *)(result + 216);
      v17 = v88 - *(_QWORD *)(result + 224);
      v18 = a3 - v17 + (v16 >> 1);
      if (v18 < 1)
        goto LABEL_43;
      if (v18 >= v16)
        LODWORD(v19) = 0x3FFFFFFF;
      else
        v19 = (unint64_t)(*(_QWORD *)(result + 232) * v18) >> 32;
      v27 = v86;
      v25 = v85 | v19;
      v26 = v17 + 0x1000000;
      v24 = 512;
    }
    if (a2 >= v27)
      break;
    v28 = *(_QWORD *)(result + 192);
    v29 = v27 - *(_QWORD *)(result + 200);
    v30 = a2 - v29 + (v28 >> 1);
    if (v30 >= 1)
    {
      if (v30 < v28)
        v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v30) >> 32) >> 15)) | v85;
      v31 = v29 + 0x1000000;
      v32 = 32;
      goto LABEL_29;
    }
LABEL_43:
    --a4;
    a2 += v10;
    a3 += v9;
    *(_BYTE *)++v90 = 0;
    v91 += 4;
    if (!a4)
      return result;
  }
  if (a2 <= v87)
  {
    v32 = ((unint64_t)a2 >> 26) & 0x3C;
    v31 = a2;
    goto LABEL_29;
  }
  v33 = *(_QWORD *)(result + 192);
  v34 = *(_QWORD *)(result + 200) + v87;
  v35 = v34 - a2 + (v33 >> 1);
  if (v35 < 1)
    goto LABEL_43;
  if (v35 < v33)
    v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v35) >> 32) >> 15)) | v85;
  v31 = v34 - 0x1000000;
  v32 = 28;
LABEL_29:
  if (v25 < 0x400000)
    goto LABEL_43;
  v36 = v26 >> 32;
  v37 = v31 >> 32;
  v38 = v4 + (int)v36 * (uint64_t)v6 + 4 * v37;
  v39 = *(unsigned int **)(result + 32);
  if (v15 >= v38)
    v40 = (unsigned int *)(v4 + (int)v36 * (uint64_t)v6 + 4 * v37);
  else
    v40 = (unsigned int *)v15;
  if (v40 < v39)
    v40 = *(unsigned int **)(result + 32);
  v41 = bswap32(*v40);
  if (!v5)
  {
    v42 = 0;
    if (!v8)
      goto LABEL_103;
LABEL_46:
    v45 = *(_DWORD *)(v8 + (v32 | v24));
LABEL_48:
    v46 = v45 & 0xF;
    v47 = HIBYTE(v45) & 3;
    if (v46 == 1)
    {
      v64 = (unsigned int *)(v38 + SBYTE1(v45) * (uint64_t)v6);
      if (v15 < (unint64_t)v64)
        v64 = (unsigned int *)v15;
      if (v64 < v39)
        v64 = v39;
      v65 = bswap32(*v64);
      if (v5)
      {
        v66 = (unsigned __int8 *)(v42 + SBYTE1(v45) * (uint64_t)v7);
        if (v14 < v66)
          v66 = v14;
        if ((unint64_t)v66 < *(_QWORD *)(result + 40))
          v66 = *(unsigned __int8 **)(result + 40);
        v65 |= (unint64_t)*v66 << 32;
      }
      v67 = interpolate_cif10a[v47];
      v68 = v47 + 1;
      v69 = v41 - ((v67 & v41) >> v68);
      v70 = (v67 & v65) >> v68;
    }
    else
    {
      if (v46 != 2)
      {
        if (v46 == 3)
        {
          v48 = (unint64_t)HIWORD(v45) << 56;
          v49 = (unsigned int *)(v38 + (v48 >> 54));
          if (v15 < (unint64_t)v49)
            v49 = (unsigned int *)v15;
          if (v49 < v39)
            v49 = v39;
          v50 = bswap32(*v49);
          v51 = v38 + SBYTE1(v45) * (uint64_t)v6;
          if (v15 >= v51)
            v52 = (unsigned int *)(v38 + SBYTE1(v45) * (uint64_t)v6);
          else
            v52 = (unsigned int *)v15;
          if (v52 < v39)
            v52 = v39;
          v53 = bswap32(*v52);
          v54 = (unsigned int *)(v51 + (v48 >> 54));
          if (v15 < (unint64_t)v54)
            v54 = (unsigned int *)v15;
          if (v54 < v39)
            v54 = v39;
          v55 = bswap32(*v54);
          if (v5)
          {
            v56 = (unsigned __int8 *)(v42 + SBYTE2(v45));
            v57 = *(_QWORD *)(result + 40);
            if (v14 < v56)
              v56 = v14;
            if ((unint64_t)v56 < v57)
              v56 = *(unsigned __int8 **)(result + 40);
            v50 |= (unint64_t)*v56 << 32;
            v58 = v42 + SBYTE1(v45) * (uint64_t)v7;
            if ((unint64_t)v14 >= v58)
              v59 = (unsigned __int8 *)(v42 + SBYTE1(v45) * (uint64_t)v7);
            else
              v59 = v14;
            if ((unint64_t)v59 < v57)
              v59 = *(unsigned __int8 **)(result + 40);
            v53 |= (unint64_t)*v59 << 32;
            v60 = (unsigned __int8 *)(v58 + SBYTE2(v45));
            if (v14 < v60)
              v60 = v14;
            if ((unint64_t)v60 < v57)
              v60 = *(unsigned __int8 **)(result + 40);
            v55 |= (unint64_t)*v60 << 32;
          }
          v61 = interpolate_cif10a[v47];
          v62 = v47 + 1;
          v63 = v41 - ((v61 & v41) >> v62) + ((v61 & v53) >> v62);
          v41 = v63
              - ((v63 & interpolate_cif10a[(v45 >> 28) & 3]) >> (((v45 >> 28) & 3) + 1))
              + (((v50 - ((v61 & v50) >> v62) + ((v61 & v55) >> v62)) & interpolate_cif10a[(v45 >> 28) & 3]) >> (((v45 >> 28) & 3) + 1));
        }
        goto LABEL_103;
      }
      v71 = (unsigned int *)(v38 + ((uint64_t)((unint64_t)HIWORD(v45) << 56) >> 54));
      if (v15 < (unint64_t)v71)
        v71 = (unsigned int *)v15;
      if (v71 < v39)
        v71 = v39;
      v72 = bswap32(*v71);
      if (v5)
      {
        v73 = (unsigned __int8 *)(v42 + SBYTE2(v45));
        if (v14 < v73)
          v73 = v14;
        if ((unint64_t)v73 < *(_QWORD *)(result + 40))
          v73 = *(unsigned __int8 **)(result + 40);
        v72 |= (unint64_t)*v73 << 32;
      }
      v74 = (v45 >> 28) & 3;
      v75 = interpolate_cif10a[v74];
      LOBYTE(v74) = v74 + 1;
      v69 = v41 - ((v75 & v41) >> v74);
      v70 = (v75 & v72) >> v74;
    }
    v41 = v69 + v70;
    goto LABEL_103;
  }
  v42 = v5 + (int)v36 * (uint64_t)v7 + v37;
  v43 = *(unsigned __int8 **)(result + 40);
  if ((unint64_t)v14 >= v42)
    v44 = (unsigned __int8 *)v42;
  else
    v44 = v14;
  if (v44 >= v43)
    v43 = v44;
  v41 |= (unint64_t)*v43 << 32;
  if (v8)
    goto LABEL_46;
LABEL_103:
  v76 = 0;
  v77 = 0;
  a3 += v9;
  v78 = v89 - a3;
  a2 += v10;
  v79 = v87 - a2;
  while (1)
  {
    v80 = ((v41 | v11) >> 32);
    v81 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vmax_s32(vsub_s32(vdup_n_s32(v80), vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v41), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL), vdup_n_s32(v41))), 0), (uint32x2_t)0x800000010), (int8x8_t)0xFF0000FF0000);
    *(_DWORD *)(v91 + 4 + 4 * v76) = v81.i32[0] | (((v80 - (BYTE3(v41) + v41)) & ~((int)(v80 - (BYTE3(v41) + v41)) >> 31)) << 24) | v80 | v81.i32[1];
    *(_BYTE *)(v90 + 1 + v76) = v25 >> 22;
    if (a4 - 1 == (_DWORD)v76)
      return result;
    if ((v78 | v79 | (a3 - v88) | (a2 - v86)) < 0)
    {
      v90 += v76 + 1;
      v91 = v91 - v77 + 4;
      a4 += ~(_DWORD)v76;
      if (a4)
        goto LABEL_5;
      return result;
    }
    v38 = v4 + SHIDWORD(a3) * (uint64_t)v6 + 4 * (a2 >> 32);
    v39 = *(unsigned int **)(result + 32);
    if (v15 >= v38)
      v82 = (unsigned int *)(v4 + SHIDWORD(a3) * (uint64_t)v6 + 4 * (a2 >> 32));
    else
      v82 = (unsigned int *)v15;
    if (v82 < v39)
      v82 = *(unsigned int **)(result + 32);
    v41 = bswap32(*v82);
    if (v5)
    {
      v42 = v5 + SHIDWORD(a3) * (uint64_t)v7 + (a2 >> 32);
      v83 = *(unsigned __int8 **)(result + 40);
      if ((unint64_t)v14 >= v42)
        v84 = v5 + SHIDWORD(a3) * (uint64_t)v7 + (a2 >> 32);
      else
        v84 = (unint64_t)v14;
      if (v84 >= (unint64_t)v83)
        v83 = (unsigned __int8 *)v84;
      v41 |= (unint64_t)*v83 << 32;
    }
    if (v8)
    {
      v45 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v45 & 0xF) != 0)
      {
        v90 += v76 + 1;
        v91 = v91 - v77 + 4;
        a4 += ~(_DWORD)v76;
        v25 = -1;
        goto LABEL_48;
      }
    }
    v77 -= 4;
    ++v76;
    a3 += v9;
    v78 -= v9;
    a2 += v10;
    v79 -= v10;
    v25 = -1;
  }
}

uint64_t rgba32_sample_cmyk32(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  unsigned int *v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned int v45;
  int v46;
  int v47;
  int64_t v48;
  unsigned int *v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int *v52;
  unint64_t v53;
  unsigned int *v54;
  unint64_t v55;
  unsigned __int8 *v56;
  unint64_t v57;
  unint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  unsigned int *v64;
  unint64_t v65;
  unsigned __int8 *v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int *v71;
  unint64_t v72;
  unsigned __int8 *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  int8x8_t v81;
  unsigned int *v82;
  unsigned __int8 *v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_QWORD *)(result + 40);
  v6 = *(_DWORD *)(result + 24);
  v7 = *(_DWORD *)(result + 28);
  v8 = *(_QWORD *)(result + 176);
  v87 = *(_QWORD *)(result + 80);
  v10 = *(_QWORD *)(result + 112);
  v9 = *(_QWORD *)(result + 120);
  v85 = *(_DWORD *)(result + 188);
  v91 = *(_QWORD *)(result + 152) - 4;
  v89 = *(_QWORD *)(result + 88);
  v90 = *(_QWORD *)(result + 144) - 1;
  if (v5)
    v11 = 0;
  else
    v11 = 0xFF00000000;
  v12 = *(_DWORD *)(result + 260) - 1;
  v13 = *(unsigned int *)(result + 256);
  v14 = (unsigned __int8 *)(v5 + (v13 - 1) + (v12 * v7));
  v15 = v4 + (v12 * v6) + 4 * v13 - 8;
  v88 = *(_QWORD *)(result + 72);
  v86 = *(_QWORD *)(result + 64);
  while (1)
  {
LABEL_5:
    if (a3 >= v88)
    {
      if (a3 <= v89)
      {
        v24 = ((unint64_t)a3 >> 22) & 0x3C0;
        v25 = 0x3FFFFFFF;
        v26 = a3;
        v27 = v86;
      }
      else
      {
        v20 = *(_QWORD *)(result + 216);
        v21 = *(_QWORD *)(result + 224) + v89;
        v22 = v21 - a3 + (v20 >> 1);
        if (v22 < 1)
          goto LABEL_43;
        if (v22 >= v20)
          LODWORD(v23) = 0x3FFFFFFF;
        else
          v23 = (unint64_t)(*(_QWORD *)(result + 232) * v22) >> 32;
        v27 = v86;
        v25 = v85 | v23;
        v26 = v21 - 0x1000000;
        v24 = 448;
      }
    }
    else
    {
      v16 = *(_QWORD *)(result + 216);
      v17 = v88 - *(_QWORD *)(result + 224);
      v18 = a3 - v17 + (v16 >> 1);
      if (v18 < 1)
        goto LABEL_43;
      if (v18 >= v16)
        LODWORD(v19) = 0x3FFFFFFF;
      else
        v19 = (unint64_t)(*(_QWORD *)(result + 232) * v18) >> 32;
      v27 = v86;
      v25 = v85 | v19;
      v26 = v17 + 0x1000000;
      v24 = 512;
    }
    if (a2 >= v27)
      break;
    v28 = *(_QWORD *)(result + 192);
    v29 = v27 - *(_QWORD *)(result + 200);
    v30 = a2 - v29 + (v28 >> 1);
    if (v30 >= 1)
    {
      if (v30 < v28)
        v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v30) >> 32) >> 15)) | v85;
      v31 = v29 + 0x1000000;
      v32 = 32;
      goto LABEL_29;
    }
LABEL_43:
    --a4;
    a2 += v10;
    a3 += v9;
    *(_BYTE *)++v90 = 0;
    v91 += 4;
    if (!a4)
      return result;
  }
  if (a2 <= v87)
  {
    v32 = ((unint64_t)a2 >> 26) & 0x3C;
    v31 = a2;
    goto LABEL_29;
  }
  v33 = *(_QWORD *)(result + 192);
  v34 = *(_QWORD *)(result + 200) + v87;
  v35 = v34 - a2 + (v33 >> 1);
  if (v35 < 1)
    goto LABEL_43;
  if (v35 < v33)
    v25 = ((v25 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v35) >> 32) >> 15)) | v85;
  v31 = v34 - 0x1000000;
  v32 = 28;
LABEL_29:
  if (v25 < 0x400000)
    goto LABEL_43;
  v36 = v26 >> 32;
  v37 = v31 >> 32;
  v38 = v4 + (int)v36 * (uint64_t)v6 + 4 * v37;
  v39 = *(unsigned int **)(result + 32);
  if (v15 >= v38)
    v40 = (unsigned int *)(v4 + (int)v36 * (uint64_t)v6 + 4 * v37);
  else
    v40 = (unsigned int *)v15;
  if (v40 < v39)
    v40 = *(unsigned int **)(result + 32);
  v41 = *v40;
  if (!v5)
  {
    v42 = 0;
    if (!v8)
      goto LABEL_103;
LABEL_46:
    v45 = *(_DWORD *)(v8 + (v32 | v24));
LABEL_48:
    v46 = v45 & 0xF;
    v47 = HIBYTE(v45) & 3;
    if (v46 == 1)
    {
      v64 = (unsigned int *)(v38 + SBYTE1(v45) * (uint64_t)v6);
      if (v15 < (unint64_t)v64)
        v64 = (unsigned int *)v15;
      if (v64 < v39)
        v64 = v39;
      v65 = *v64;
      if (v5)
      {
        v66 = (unsigned __int8 *)(v42 + SBYTE1(v45) * (uint64_t)v7);
        if (v14 < v66)
          v66 = v14;
        if ((unint64_t)v66 < *(_QWORD *)(result + 40))
          v66 = *(unsigned __int8 **)(result + 40);
        v65 |= (unint64_t)*v66 << 32;
      }
      v67 = interpolate_cif10a[v47];
      v68 = v47 + 1;
      v69 = v41 - ((v67 & v41) >> v68);
      v70 = (v67 & v65) >> v68;
    }
    else
    {
      if (v46 != 2)
      {
        if (v46 == 3)
        {
          v48 = (unint64_t)HIWORD(v45) << 56;
          v49 = (unsigned int *)(v38 + (v48 >> 54));
          if (v15 < (unint64_t)v49)
            v49 = (unsigned int *)v15;
          if (v49 < v39)
            v49 = v39;
          v50 = *v49;
          v51 = v38 + SBYTE1(v45) * (uint64_t)v6;
          if (v15 >= v51)
            v52 = (unsigned int *)(v38 + SBYTE1(v45) * (uint64_t)v6);
          else
            v52 = (unsigned int *)v15;
          if (v52 < v39)
            v52 = v39;
          v53 = *v52;
          v54 = (unsigned int *)(v51 + (v48 >> 54));
          if (v15 < (unint64_t)v54)
            v54 = (unsigned int *)v15;
          if (v54 < v39)
            v54 = v39;
          v55 = *v54;
          if (v5)
          {
            v56 = (unsigned __int8 *)(v42 + SBYTE2(v45));
            v57 = *(_QWORD *)(result + 40);
            if (v14 < v56)
              v56 = v14;
            if ((unint64_t)v56 < v57)
              v56 = *(unsigned __int8 **)(result + 40);
            v50 |= (unint64_t)*v56 << 32;
            v58 = v42 + SBYTE1(v45) * (uint64_t)v7;
            if ((unint64_t)v14 >= v58)
              v59 = (unsigned __int8 *)(v42 + SBYTE1(v45) * (uint64_t)v7);
            else
              v59 = v14;
            if ((unint64_t)v59 < v57)
              v59 = *(unsigned __int8 **)(result + 40);
            v53 |= (unint64_t)*v59 << 32;
            v60 = (unsigned __int8 *)(v58 + SBYTE2(v45));
            if (v14 < v60)
              v60 = v14;
            if ((unint64_t)v60 < v57)
              v60 = *(unsigned __int8 **)(result + 40);
            v55 |= (unint64_t)*v60 << 32;
          }
          v61 = interpolate_cif10a[v47];
          v62 = v47 + 1;
          v63 = v41 - ((v61 & v41) >> v62) + ((v61 & v53) >> v62);
          v41 = v63
              - ((v63 & interpolate_cif10a[(v45 >> 28) & 3]) >> (((v45 >> 28) & 3) + 1))
              + (((v50 - ((v61 & v50) >> v62) + ((v61 & v55) >> v62)) & interpolate_cif10a[(v45 >> 28) & 3]) >> (((v45 >> 28) & 3) + 1));
        }
        goto LABEL_103;
      }
      v71 = (unsigned int *)(v38 + ((uint64_t)((unint64_t)HIWORD(v45) << 56) >> 54));
      if (v15 < (unint64_t)v71)
        v71 = (unsigned int *)v15;
      if (v71 < v39)
        v71 = v39;
      v72 = *v71;
      if (v5)
      {
        v73 = (unsigned __int8 *)(v42 + SBYTE2(v45));
        if (v14 < v73)
          v73 = v14;
        if ((unint64_t)v73 < *(_QWORD *)(result + 40))
          v73 = *(unsigned __int8 **)(result + 40);
        v72 |= (unint64_t)*v73 << 32;
      }
      v74 = (v45 >> 28) & 3;
      v75 = interpolate_cif10a[v74];
      LOBYTE(v74) = v74 + 1;
      v69 = v41 - ((v75 & v41) >> v74);
      v70 = (v75 & v72) >> v74;
    }
    v41 = v69 + v70;
    goto LABEL_103;
  }
  v42 = v5 + (int)v36 * (uint64_t)v7 + v37;
  v43 = *(unsigned __int8 **)(result + 40);
  if ((unint64_t)v14 >= v42)
    v44 = (unsigned __int8 *)v42;
  else
    v44 = v14;
  if (v44 >= v43)
    v43 = v44;
  v41 |= (unint64_t)*v43 << 32;
  if (v8)
    goto LABEL_46;
LABEL_103:
  v76 = 0;
  v77 = 0;
  a3 += v9;
  v78 = v89 - a3;
  a2 += v10;
  v79 = v87 - a2;
  while (1)
  {
    v80 = ((v41 | v11) >> 32);
    v81 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vmax_s32(vsub_s32(vdup_n_s32(v80), vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v41), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL), vdup_n_s32(v41))), 0), (uint32x2_t)0x800000010), (int8x8_t)0xFF0000FF0000);
    *(_DWORD *)(v91 + 4 + 4 * v76) = v81.i32[0] | (((v80 - (BYTE3(v41) + v41)) & ~((int)(v80 - (BYTE3(v41) + v41)) >> 31)) << 24) | v80 | v81.i32[1];
    *(_BYTE *)(v90 + 1 + v76) = v25 >> 22;
    if (a4 - 1 == (_DWORD)v76)
      return result;
    if ((v78 | v79 | (a3 - v88) | (a2 - v86)) < 0)
    {
      v90 += v76 + 1;
      v91 = v91 - v77 + 4;
      a4 += ~(_DWORD)v76;
      if (a4)
        goto LABEL_5;
      return result;
    }
    v38 = v4 + SHIDWORD(a3) * (uint64_t)v6 + 4 * (a2 >> 32);
    v39 = *(unsigned int **)(result + 32);
    if (v15 >= v38)
      v82 = (unsigned int *)(v4 + SHIDWORD(a3) * (uint64_t)v6 + 4 * (a2 >> 32));
    else
      v82 = (unsigned int *)v15;
    if (v82 < v39)
      v82 = *(unsigned int **)(result + 32);
    v41 = *v82;
    if (v5)
    {
      v42 = v5 + SHIDWORD(a3) * (uint64_t)v7 + (a2 >> 32);
      v83 = *(unsigned __int8 **)(result + 40);
      if ((unint64_t)v14 >= v42)
        v84 = v5 + SHIDWORD(a3) * (uint64_t)v7 + (a2 >> 32);
      else
        v84 = (unint64_t)v14;
      if (v84 >= (unint64_t)v83)
        v83 = (unsigned __int8 *)v84;
      v41 |= (unint64_t)*v83 << 32;
    }
    if (v8)
    {
      v45 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v45 & 0xF) != 0)
      {
        v90 += v76 + 1;
        v91 = v91 - v77 + 4;
        a4 += ~(_DWORD)v76;
        v25 = -1;
        goto LABEL_48;
      }
    }
    v77 -= 4;
    ++v76;
    a3 += v9;
    v78 -= v9;
    a2 += v10;
    v79 -= v10;
    v25 = -1;
  }
}

uint64_t rgba32_sample_RGB48(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  unsigned __int16 *v38;
  unint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  unsigned __int16 *v43;
  unint64_t v44;
  unint64_t v45;
  unsigned __int16 *v46;
  unint64_t v47;
  unsigned __int16 *v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  unsigned __int16 *v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  unsigned __int16 *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int16 *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_DWORD *)(result + 24);
  v6 = *(_QWORD *)(result + 176);
  v7 = *(_QWORD *)(result + 72);
  v8 = *(_QWORD *)(result + 88);
  v70 = *(_QWORD *)(result + 64);
  v71 = *(_QWORD *)(result + 80);
  v9 = *(_QWORD *)(result + 112);
  v10 = *(_QWORD *)(result + 120);
  v11 = *(_QWORD *)(result + 152) - 4;
  v12 = *(_QWORD *)(result + 144) - 1;
  v69 = *(_DWORD *)(result + 188);
  v13 = v4
      + ((*(_DWORD *)(result + 260) - 1) * v5)
      + 2 * (3 * *(_DWORD *)(result + 256))
      - 6;
  while (1)
  {
LABEL_2:
    if ((uint64_t)a3 >= v7)
    {
      if ((uint64_t)a3 <= v8)
      {
        v22 = (a3 >> 22) & 0x3C0;
        v23 = 0x3FFFFFFF;
        HIDWORD(v24) = HIDWORD(a3);
        v25 = v70;
      }
      else
      {
        v18 = *(_QWORD *)(result + 216);
        v19 = *(_QWORD *)(result + 224) + v8;
        v20 = v19 - a3 + (v18 >> 1);
        if (v20 < 1)
          goto LABEL_34;
        if (v20 >= v18)
          LODWORD(v21) = 0x3FFFFFFF;
        else
          v21 = (unint64_t)(*(_QWORD *)(result + 232) * v20) >> 32;
        v25 = v70;
        v23 = v69 | v21;
        v24 = v19 - 0x1000000;
        v22 = 448;
      }
    }
    else
    {
      v14 = *(_QWORD *)(result + 216);
      v15 = v7 - *(_QWORD *)(result + 224);
      v16 = a3 - v15 + (v14 >> 1);
      if (v16 < 1)
        goto LABEL_34;
      if (v16 >= v14)
        LODWORD(v17) = 0x3FFFFFFF;
      else
        v17 = (unint64_t)(*(_QWORD *)(result + 232) * v16) >> 32;
      v25 = v70;
      v23 = v69 | v17;
      v24 = v15 + 0x1000000;
      v22 = 512;
    }
    if (a2 >= v25)
      break;
    v26 = *(_QWORD *)(result + 192);
    v27 = v25 - *(_QWORD *)(result + 200);
    v28 = a2 - v27 + (v26 >> 1);
    if (v28 >= 1)
    {
      if (v28 < v26)
        v23 = ((v23 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v28) >> 32) >> 15)) | v69;
      v29 = v27 + 0x1000000;
      v30 = 32;
      goto LABEL_26;
    }
LABEL_34:
    --a4;
    a2 += v9;
    a3 += v10;
    v11 += 4;
    *(_BYTE *)++v12 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v71)
  {
    v30 = ((unint64_t)a2 >> 26) & 0x3C;
    v29 = a2;
    goto LABEL_26;
  }
  v31 = *(_QWORD *)(result + 192);
  v32 = *(_QWORD *)(result + 200) + v71;
  v33 = v32 - a2 + (v31 >> 1);
  if (v33 < 1)
    goto LABEL_34;
  if (v33 < v31)
    v23 = ((v23 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v33) >> 32) >> 15)) | v69;
  v29 = v32 - 0x1000000;
  v30 = 28;
LABEL_26:
  if (v23 < 0x400000)
    goto LABEL_34;
  v34 = v29 >> 32;
  v35 = v4 + SHIDWORD(v24) * (uint64_t)v5;
  v36 = v35 + 6 * (int)v34;
  v37 = *(unsigned __int16 **)(result + 32);
  if (v13 >= v36)
    v38 = (unsigned __int16 *)(v35 + 6 * (int)v34);
  else
    v38 = (unsigned __int16 *)v13;
  if (v38 < v37)
    v38 = *(unsigned __int16 **)(result + 32);
  v39 = (bswap32(*v38) >> 16) | ((unint64_t)(bswap32(v38[1]) >> 16) << 16) | ((unint64_t)(bswap32(v38[2]) >> 16) << 32) | 0xFFFF000000000000;
  if (!v6)
    goto LABEL_66;
  v40 = *(_DWORD *)(v6 + (v30 | v22));
LABEL_37:
  v41 = v40 & 0xF;
  v42 = HIBYTE(v40) & 3;
  switch(v41)
  {
    case 1:
      v57 = (unsigned __int16 *)(v36 + SBYTE1(v40) * (uint64_t)v5);
      if (v13 < (unint64_t)v57)
        v57 = (unsigned __int16 *)v13;
      if (v57 < v37)
        v57 = v37;
      v58 = interpolate_16161616_19469[v42];
      v59 = v42 + 1;
      v56 = v39 - ((v58 & v39) >> v59);
      v60 = (((bswap32(*v57) >> 16) | ((unint64_t)(bswap32(v57[1]) >> 16) << 16) | ((unint64_t)(bswap32(v57[2]) >> 16) << 32) | 0xFFFF000000000000) & v58) >> v59;
LABEL_65:
      v39 = v56 + v60;
      break;
    case 2:
      v61 = (unsigned __int16 *)(v36 + 6 * SBYTE2(v40));
      if (v13 < (unint64_t)v61)
        v61 = (unsigned __int16 *)v13;
      if (v61 < v37)
        v61 = v37;
      v52 = (bswap32(*v61) >> 16) | ((unint64_t)(bswap32(v61[1]) >> 16) << 16) | ((unint64_t)(bswap32(v61[2]) >> 16) << 32) | 0xFFFF000000000000;
      v62 = (v40 >> 28) & 3;
      v54 = interpolate_16161616_19469[v62];
      v55 = v62 + 1;
      v56 = v39 - ((v54 & v39) >> v55);
LABEL_64:
      v60 = (v52 & v54) >> v55;
      goto LABEL_65;
    case 3:
      v43 = (unsigned __int16 *)(v36 + 6 * SBYTE2(v40));
      if (v13 < (unint64_t)v43)
        v43 = (unsigned __int16 *)v13;
      if (v43 < v37)
        v43 = v37;
      v44 = (bswap32(*v43) >> 16) | ((unint64_t)(bswap32(v43[1]) >> 16) << 16) | ((unint64_t)(bswap32(v43[2]) >> 16) << 32) | 0xFFFF000000000000;
      v45 = v36 + SBYTE1(v40) * (uint64_t)v5;
      if (v13 >= v45)
        v46 = (unsigned __int16 *)(v36 + SBYTE1(v40) * (uint64_t)v5);
      else
        v46 = (unsigned __int16 *)v13;
      if (v46 < v37)
        v46 = v37;
      v47 = (bswap32(*v46) >> 16) | ((unint64_t)(bswap32(v46[1]) >> 16) << 16) | ((unint64_t)(bswap32(v46[2]) >> 16) << 32) | 0xFFFF000000000000;
      v48 = (unsigned __int16 *)(v45 + 6 * SBYTE2(v40));
      if (v13 < (unint64_t)v48)
        v48 = (unsigned __int16 *)v13;
      if (v48 < v37)
        v48 = v37;
      v49 = interpolate_16161616_19469[v42];
      v50 = v42 + 1;
      v51 = v39 - ((v49 & v39) >> v50) + ((v47 & v49) >> v50);
      v52 = v44
          - ((v49 & v44) >> v50)
          + ((((bswap32(*v48) >> 16) | ((unint64_t)(bswap32(v48[1]) >> 16) << 16) | ((unint64_t)(bswap32(v48[2]) >> 16) << 32) | 0xFFFF000000000000) & v49) >> v50);
      v53 = (v40 >> 28) & 3;
      v54 = interpolate_16161616_19469[v53];
      v55 = v53 + 1;
      v56 = v51 - ((v51 & v54) >> v55);
      goto LABEL_64;
  }
LABEL_66:
  v63 = 0;
  v64 = 0;
  a3 += v10;
  v65 = v8 - a3;
  a2 += v9;
  v66 = v71 - a2;
  while (1)
  {
    *(_DWORD *)(v11 + 4 + 4 * v64) = HIBYTE(v39) | (BYTE1(v39) << 24) | (BYTE3(v39) << 16) | WORD2(v39) & 0xFF00;
    *(_BYTE *)(v12 + 1 + v64) = v23 >> 22;
    if (a4 - 1 == (_DWORD)v64)
      return result;
    if (((v65 | v66 | (a3 - v7) | (a2 - v70)) & 0x8000000000000000) != 0)
    {
      v12 += v64 + 1;
      v11 = v11 - v63 + 4;
      a4 += ~(_DWORD)v64;
      if (a4)
        goto LABEL_2;
      return result;
    }
    v67 = v4 + SHIDWORD(a3) * (uint64_t)v5;
    v36 = v67 + 6 * SHIDWORD(a2);
    v37 = *(unsigned __int16 **)(result + 32);
    if (v13 >= v36)
      v68 = (unsigned __int16 *)(v67 + 6 * SHIDWORD(a2));
    else
      v68 = (unsigned __int16 *)v13;
    if (v68 < v37)
      v68 = *(unsigned __int16 **)(result + 32);
    v39 = (bswap32(*v68) >> 16) | ((unint64_t)(bswap32(v68[1]) >> 16) << 16) | ((unint64_t)(bswap32(v68[2]) >> 16) << 32) | 0xFFFF000000000000;
    if (v6)
    {
      v40 = *(_DWORD *)(v6 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v40 & 0xF) != 0)
      {
        v12 += v64 + 1;
        v11 = v11 - v63 + 4;
        a4 += ~(_DWORD)v64;
        v23 = -1;
        goto LABEL_37;
      }
    }
    ++v64;
    v63 -= 4;
    a3 += v10;
    v65 -= v10;
    a2 += v9;
    v66 -= v9;
    v23 = -1;
  }
}

uint64_t rgba32_sample_rgb48(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  unsigned int *v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int *v46;
  unint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  unsigned int *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_DWORD *)(result + 24);
  v6 = *(_QWORD *)(result + 176);
  v7 = *(_QWORD *)(result + 72);
  v8 = *(_QWORD *)(result + 88);
  v69 = *(_QWORD *)(result + 64);
  v70 = *(_QWORD *)(result + 80);
  v9 = *(_QWORD *)(result + 112);
  v10 = *(_QWORD *)(result + 120);
  v11 = *(_QWORD *)(result + 152) - 4;
  v12 = *(_QWORD *)(result + 144) - 1;
  v68 = *(_DWORD *)(result + 188);
  v13 = v4
      + ((*(_DWORD *)(result + 260) - 1) * v5)
      + 2 * (3 * *(_DWORD *)(result + 256))
      - 6;
  while (1)
  {
LABEL_2:
    if ((uint64_t)a3 >= v7)
    {
      if ((uint64_t)a3 <= v8)
      {
        v22 = (a3 >> 22) & 0x3C0;
        v23 = 0x3FFFFFFF;
        HIDWORD(v24) = HIDWORD(a3);
        v25 = v69;
      }
      else
      {
        v18 = *(_QWORD *)(result + 216);
        v19 = *(_QWORD *)(result + 224) + v8;
        v20 = v19 - a3 + (v18 >> 1);
        if (v20 < 1)
          goto LABEL_34;
        if (v20 >= v18)
          LODWORD(v21) = 0x3FFFFFFF;
        else
          v21 = (unint64_t)(*(_QWORD *)(result + 232) * v20) >> 32;
        v25 = v69;
        v23 = v68 | v21;
        v24 = v19 - 0x1000000;
        v22 = 448;
      }
    }
    else
    {
      v14 = *(_QWORD *)(result + 216);
      v15 = v7 - *(_QWORD *)(result + 224);
      v16 = a3 - v15 + (v14 >> 1);
      if (v16 < 1)
        goto LABEL_34;
      if (v16 >= v14)
        LODWORD(v17) = 0x3FFFFFFF;
      else
        v17 = (unint64_t)(*(_QWORD *)(result + 232) * v16) >> 32;
      v25 = v69;
      v23 = v68 | v17;
      v24 = v15 + 0x1000000;
      v22 = 512;
    }
    if (a2 >= v25)
      break;
    v26 = *(_QWORD *)(result + 192);
    v27 = v25 - *(_QWORD *)(result + 200);
    v28 = a2 - v27 + (v26 >> 1);
    if (v28 >= 1)
    {
      if (v28 < v26)
        v23 = ((v23 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v28) >> 32) >> 15)) | v68;
      v29 = v27 + 0x1000000;
      v30 = 32;
      goto LABEL_26;
    }
LABEL_34:
    --a4;
    a2 += v9;
    a3 += v10;
    v11 += 4;
    *(_BYTE *)++v12 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v70)
  {
    v30 = ((unint64_t)a2 >> 26) & 0x3C;
    v29 = a2;
    goto LABEL_26;
  }
  v31 = *(_QWORD *)(result + 192);
  v32 = *(_QWORD *)(result + 200) + v70;
  v33 = v32 - a2 + (v31 >> 1);
  if (v33 < 1)
    goto LABEL_34;
  if (v33 < v31)
    v23 = ((v23 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v33) >> 32) >> 15)) | v68;
  v29 = v32 - 0x1000000;
  v30 = 28;
LABEL_26:
  if (v23 < 0x400000)
    goto LABEL_34;
  v34 = v29 >> 32;
  v35 = v4 + SHIDWORD(v24) * (uint64_t)v5;
  v36 = v35 + 6 * (int)v34;
  v37 = *(unsigned int **)(result + 32);
  if (v13 >= v36)
    v38 = (unsigned int *)(v35 + 6 * (int)v34);
  else
    v38 = (unsigned int *)v13;
  if (v38 < v37)
    v38 = *(unsigned int **)(result + 32);
  v39 = *v38 | ((unint64_t)*((unsigned __int16 *)v38 + 2) << 32) | 0xFFFF000000000000;
  if (!v6)
    goto LABEL_66;
  v40 = *(_DWORD *)(v6 + (v30 | v22));
LABEL_37:
  v41 = v40 & 0xF;
  v42 = HIBYTE(v40) & 3;
  switch(v41)
  {
    case 1:
      v57 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v5);
      if (v13 < (unint64_t)v57)
        v57 = (unsigned int *)v13;
      if (v57 < v37)
        v57 = v37;
      v58 = interpolate_16161616_19469[v42];
      v59 = v42 + 1;
      v56 = v39 - ((v58 & v39) >> v59);
      v60 = ((*v57 | ((unint64_t)*((unsigned __int16 *)v57 + 2) << 32) | 0xFFFF000000000000) & v58) >> v59;
LABEL_65:
      v39 = v56 + v60;
      break;
    case 2:
      v61 = (unsigned int *)(v36 + 6 * SBYTE2(v40));
      if (v13 < (unint64_t)v61)
        v61 = (unsigned int *)v13;
      if (v61 < v37)
        v61 = v37;
      v52 = *v61 | ((unint64_t)*((unsigned __int16 *)v61 + 2) << 32) | 0xFFFF000000000000;
      v62 = (v40 >> 28) & 3;
      v54 = interpolate_16161616_19469[v62];
      v55 = v62 + 1;
      v56 = v39 - ((v54 & v39) >> v55);
LABEL_64:
      v60 = (v52 & v54) >> v55;
      goto LABEL_65;
    case 3:
      v43 = (unsigned int *)(v36 + 6 * SBYTE2(v40));
      if (v13 < (unint64_t)v43)
        v43 = (unsigned int *)v13;
      if (v43 < v37)
        v43 = v37;
      v44 = *v43 | ((unint64_t)*((unsigned __int16 *)v43 + 2) << 32) | 0xFFFF000000000000;
      v45 = v36 + SBYTE1(v40) * (uint64_t)v5;
      if (v13 >= v45)
        v46 = (unsigned int *)(v36 + SBYTE1(v40) * (uint64_t)v5);
      else
        v46 = (unsigned int *)v13;
      if (v46 < v37)
        v46 = v37;
      v47 = *v46 | ((unint64_t)*((unsigned __int16 *)v46 + 2) << 32) | 0xFFFF000000000000;
      v48 = (unsigned int *)(v45 + 6 * SBYTE2(v40));
      if (v13 < (unint64_t)v48)
        v48 = (unsigned int *)v13;
      if (v48 < v37)
        v48 = v37;
      v49 = interpolate_16161616_19469[v42];
      v50 = v42 + 1;
      v51 = v39 - ((v49 & v39) >> v50) + ((v47 & v49) >> v50);
      v52 = v44
          - ((v49 & v44) >> v50)
          + (((*v48 | ((unint64_t)*((unsigned __int16 *)v48 + 2) << 32) | 0xFFFF000000000000) & v49) >> v50);
      v53 = (v40 >> 28) & 3;
      v54 = interpolate_16161616_19469[v53];
      v55 = v53 + 1;
      v56 = v51 - ((v51 & v54) >> v55);
      goto LABEL_64;
  }
LABEL_66:
  v63 = 0;
  v64 = 0;
  a3 += v10;
  v65 = v8 - a3;
  a2 += v9;
  v66 = v70 - a2;
  while (1)
  {
    *(_DWORD *)(v11 + 4 + 4 * v64) = HIBYTE(v39) | (BYTE1(v39) << 24) | (BYTE3(v39) << 16) | WORD2(v39) & 0xFF00;
    *(_BYTE *)(v12 + 1 + v64) = v23 >> 22;
    if (a4 - 1 == (_DWORD)v64)
      return result;
    if (((v65 | v66 | (a3 - v7) | (a2 - v69)) & 0x8000000000000000) != 0)
    {
      v12 += v64 + 1;
      v11 = v11 - v63 + 4;
      a4 += ~(_DWORD)v64;
      if (a4)
        goto LABEL_2;
      return result;
    }
    v36 = v4 + SHIDWORD(a3) * (uint64_t)v5 + 6 * SHIDWORD(a2);
    v37 = *(unsigned int **)(result + 32);
    if (v13 >= v36)
      v67 = (unsigned int *)(v4 + SHIDWORD(a3) * (uint64_t)v5 + 6 * SHIDWORD(a2));
    else
      v67 = (unsigned int *)v13;
    if (v67 < v37)
      v67 = *(unsigned int **)(result + 32);
    v39 = *v67 | ((unint64_t)*((unsigned __int16 *)v67 + 2) << 32) | 0xFFFF000000000000;
    if (v6)
    {
      v40 = *(_DWORD *)(v6 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v40 & 0xF) != 0)
      {
        v12 += v64 + 1;
        v11 = v11 - v63 + 4;
        a4 += ~(_DWORD)v64;
        v23 = -1;
        goto LABEL_37;
      }
    }
    ++v64;
    v63 -= 4;
    a3 += v10;
    v65 -= v10;
    a2 += v9;
    v66 -= v9;
    v23 = -1;
  }
}

uint64_t rgba32_sample_RGBA64(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  unsigned __int16 *v39;
  unint64_t v40;
  unsigned int v41;
  int v42;
  int v43;
  int64_t v44;
  unsigned __int16 *v45;
  unint64_t v46;
  unint64_t v47;
  unsigned __int16 *v48;
  unint64_t v49;
  unsigned __int16 *v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unsigned __int16 *v59;
  uint64_t v60;
  char v61;
  unsigned __int16 *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int16 *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v4 = *(_DWORD *)(result + 24);
  v5 = *(_QWORD *)(result + 176);
  v6 = *(_QWORD *)(result + 72);
  v73 = *(_QWORD *)(result + 80);
  v72 = *(_QWORD *)(result + 88);
  v7 = *(_QWORD *)(result + 112);
  v8 = *(_QWORD *)(result + 120);
  v70 = *(_DWORD *)(result + 188);
  v9 = *(_QWORD *)(result + 152) - 4;
  v10 = *(_QWORD *)(result + 144) - 1;
  v11 = *(_QWORD *)(result + 32);
  if (*(_QWORD *)(result + 40))
    v12 = 0;
  else
    v12 = 0xFF00000000000000;
  v13 = v11 + ((*(_DWORD *)(result + 260) - 1) * v4) + 8 * *(unsigned int *)(result + 256) - 8;
  v71 = *(_QWORD *)(result + 64);
  while (1)
  {
LABEL_5:
    if ((uint64_t)a3 >= v6)
    {
      if ((uint64_t)a3 <= v72)
      {
        v22 = (a3 >> 22) & 0x3C0;
        v23 = 0x3FFFFFFF;
        HIDWORD(v24) = HIDWORD(a3);
        v25 = v71;
        v26 = v73;
      }
      else
      {
        v18 = *(_QWORD *)(result + 216);
        v19 = *(_QWORD *)(result + 224) + v72;
        v20 = v19 - a3 + (v18 >> 1);
        if (v20 < 1)
          goto LABEL_37;
        if (v20 >= v18)
          LODWORD(v21) = 0x3FFFFFFF;
        else
          v21 = (unint64_t)(*(_QWORD *)(result + 232) * v20) >> 32;
        v25 = v71;
        v26 = v73;
        v23 = v70 | v21;
        v24 = v19 - 0x1000000;
        v22 = 448;
      }
    }
    else
    {
      v14 = *(_QWORD *)(result + 216);
      v15 = v6 - *(_QWORD *)(result + 224);
      v16 = a3 - v15 + (v14 >> 1);
      if (v16 < 1)
        goto LABEL_37;
      if (v16 >= v14)
        LODWORD(v17) = 0x3FFFFFFF;
      else
        v17 = (unint64_t)(*(_QWORD *)(result + 232) * v16) >> 32;
      v25 = v71;
      v26 = v73;
      v23 = v70 | v17;
      v24 = v15 + 0x1000000;
      v22 = 512;
    }
    if (a2 >= v25)
      break;
    v27 = *(_QWORD *)(result + 192);
    v28 = v25 - *(_QWORD *)(result + 200);
    v29 = a2 - v28 + (v27 >> 1);
    if (v29 >= 1)
    {
      if (v29 < v27)
        v23 = ((v23 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v29) >> 32) >> 15)) | v70;
      v30 = v28 + 0x1000000;
      v31 = 32;
      goto LABEL_29;
    }
LABEL_37:
    --a4;
    a2 += v7;
    a3 += v8;
    v9 += 4;
    *(_BYTE *)++v10 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v26)
  {
    v31 = ((unint64_t)a2 >> 26) & 0x3C;
    v30 = a2;
    goto LABEL_29;
  }
  v32 = *(_QWORD *)(result + 192);
  v33 = *(_QWORD *)(result + 200) + v26;
  v34 = v33 - a2 + (v32 >> 1);
  if (v34 < 1)
    goto LABEL_37;
  if (v34 < v32)
    v23 = ((v23 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v34) >> 32) >> 15)) | v70;
  v30 = v33 - 0x1000000;
  v31 = 28;
LABEL_29:
  if (v23 < 0x400000)
    goto LABEL_37;
  v35 = v11 + SHIDWORD(v24) * (uint64_t)v4;
  v36 = v30 >> 32;
  v37 = v35 + 8 * v36;
  v38 = *(unsigned __int16 **)(result + 32);
  if (v13 >= v37)
    v39 = (unsigned __int16 *)(v35 + 8 * v36);
  else
    v39 = (unsigned __int16 *)v13;
  if (v39 < v38)
    v39 = *(unsigned __int16 **)(result + 32);
  v40 = ((unint64_t)(bswap32(v39[2]) >> 16) << 32) | ((unint64_t)(bswap32(v39[3]) >> 16) << 48) | bswap32(v39[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v39) >> 16);
  if (v5)
  {
    v41 = *(_DWORD *)(v5 + (v31 | v22));
LABEL_40:
    v42 = v41 & 0xF;
    v43 = HIBYTE(v41) & 3;
    switch(v42)
    {
      case 1:
        v59 = (unsigned __int16 *)(v37 + SBYTE1(v41) * (uint64_t)v4);
        if (v13 < (unint64_t)v59)
          v59 = (unsigned __int16 *)v13;
        if (v59 < v38)
          v59 = v38;
        v60 = interpolate_16161616_19469[v43];
        v61 = v43 + 1;
        v57 = v40 - ((v60 & v40) >> v61);
        v58 = ((((unint64_t)(bswap32(v59[2]) >> 16) << 32) | ((unint64_t)(bswap32(v59[3]) >> 16) << 48) | bswap32(v59[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v59) >> 16)) & v60) >> v61;
LABEL_62:
        v40 = v57 + v58;
        break;
      case 2:
        v62 = (unsigned __int16 *)(v37 + ((uint64_t)((unint64_t)HIWORD(v41) << 56) >> 53));
        if (v13 < (unint64_t)v62)
          v62 = (unsigned __int16 *)v13;
        if (v62 < v38)
          v62 = v38;
        v63 = (v41 >> 28) & 3;
        v40 = v40
            - ((interpolate_16161616_19469[v63] & v40) >> (v63 + 1))
            + (((((unint64_t)(bswap32(v62[2]) >> 16) << 32) | ((unint64_t)(bswap32(v62[3]) >> 16) << 48) | bswap32(v62[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v62) >> 16)) & interpolate_16161616_19469[v63]) >> (v63 + 1));
        break;
      case 3:
        v44 = (unint64_t)HIWORD(v41) << 56;
        v45 = (unsigned __int16 *)(v37 + (v44 >> 53));
        if (v13 < (unint64_t)v45)
          v45 = (unsigned __int16 *)v13;
        if (v45 < v38)
          v45 = v38;
        v46 = ((unint64_t)(bswap32(v45[2]) >> 16) << 32) | ((unint64_t)(bswap32(v45[3]) >> 16) << 48) | bswap32(v45[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v45) >> 16);
        v47 = v37 + SBYTE1(v41) * (uint64_t)v4;
        if (v13 >= v47)
          v48 = (unsigned __int16 *)(v37 + SBYTE1(v41) * (uint64_t)v4);
        else
          v48 = (unsigned __int16 *)v13;
        if (v48 < v38)
          v48 = v38;
        v49 = ((unint64_t)(bswap32(v48[2]) >> 16) << 32) | ((unint64_t)(bswap32(v48[3]) >> 16) << 48) | bswap32(v48[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v48) >> 16);
        v50 = (unsigned __int16 *)(v47 + (v44 >> 53));
        if (v13 < (unint64_t)v50)
          v50 = (unsigned __int16 *)v13;
        if (v50 < v38)
          v50 = v38;
        v51 = interpolate_16161616_19469[v43];
        v52 = v43 + 1;
        v53 = v40 - ((v51 & v40) >> v52) + ((v49 & v51) >> v52);
        v54 = v46
            - ((v51 & v46) >> v52)
            + (((((unint64_t)(bswap32(v50[2]) >> 16) << 32) | ((unint64_t)(bswap32(v50[3]) >> 16) << 48) | bswap32(v50[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v50) >> 16)) & v51) >> v52);
        v55 = (v41 >> 28) & 3;
        v56 = interpolate_16161616_19469[v55];
        LOBYTE(v55) = v55 + 1;
        v57 = v53 - ((v53 & v56) >> v55);
        v58 = (v54 & v56) >> v55;
        goto LABEL_62;
    }
  }
  v64 = 0;
  v65 = 0;
  a3 += v8;
  v66 = v72 - a3;
  a2 += v7;
  v67 = v73 - a2;
  while (1)
  {
    *(_DWORD *)(v9 + 4 + 4 * v65) = ((v40 | v12) >> 56) | (BYTE1(v40) << 24) | (BYTE3(v40) << 16) | WORD2(v40) & 0xFF00;
    *(_BYTE *)(v10 + 1 + v65) = v23 >> 22;
    if (a4 - 1 == (_DWORD)v65)
      return result;
    if (((v66 | v67 | (a3 - v6) | (a2 - v71)) & 0x8000000000000000) != 0)
    {
      v10 += v65 + 1;
      v9 = v9 - v64 + 4;
      a4 += ~(_DWORD)v65;
      if (a4)
        goto LABEL_5;
      return result;
    }
    v68 = v11 + SHIDWORD(a3) * (uint64_t)v4;
    v37 = v68 + 8 * (a2 >> 32);
    v38 = *(unsigned __int16 **)(result + 32);
    if (v13 >= v37)
      v69 = (unsigned __int16 *)(v68 + 8 * (a2 >> 32));
    else
      v69 = (unsigned __int16 *)v13;
    if (v69 < v38)
      v69 = *(unsigned __int16 **)(result + 32);
    v40 = ((unint64_t)(bswap32(v69[2]) >> 16) << 32) | ((unint64_t)(bswap32(v69[3]) >> 16) << 48) | bswap32(v69[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v69) >> 16);
    if (v5)
    {
      v41 = *(_DWORD *)(v5 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v41 & 0xF) != 0)
      {
        v10 += v65 + 1;
        v9 = v9 - v64 + 4;
        a4 += ~(_DWORD)v65;
        v23 = -1;
        goto LABEL_40;
      }
    }
    ++v65;
    v64 -= 4;
    a3 += v8;
    v66 -= v8;
    a2 += v7;
    v67 -= v7;
    v23 = -1;
  }
}

uint64_t rgba32_sample_rgba64(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t *v38;
  unint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  int64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  unint64_t *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;

  v4 = *(_DWORD *)(result + 24);
  v5 = *(_QWORD *)(result + 176);
  v6 = *(_QWORD *)(result + 72);
  v7 = *(_QWORD *)(result + 88);
  v74 = *(_QWORD *)(result + 80);
  v8 = *(_QWORD *)(result + 112);
  v9 = *(_QWORD *)(result + 120);
  v72 = *(_DWORD *)(result + 188);
  v10 = *(_QWORD *)(result + 152) - 4;
  v11 = *(_QWORD *)(result + 144) - 1;
  v12 = *(_QWORD *)(result + 32);
  if (*(_QWORD *)(result + 40))
    v13 = 0;
  else
    v13 = 0xFF00000000000000;
  v14 = v12 + ((*(_DWORD *)(result + 260) - 1) * v4) + 8 * *(unsigned int *)(result + 256) - 8;
  v73 = *(_QWORD *)(result + 64);
  while (1)
  {
LABEL_5:
    if ((uint64_t)a3 >= v6)
    {
      if ((uint64_t)a3 <= v7)
      {
        v23 = (a3 >> 22) & 0x3C0;
        v24 = 0x3FFFFFFF;
        HIDWORD(v25) = HIDWORD(a3);
      }
      else
      {
        v19 = *(_QWORD *)(result + 216);
        v20 = *(_QWORD *)(result + 224) + v7;
        v21 = v20 - a3 + (v19 >> 1);
        if (v21 < 1)
          goto LABEL_37;
        if (v21 >= v19)
          LODWORD(v22) = 0x3FFFFFFF;
        else
          v22 = (unint64_t)(*(_QWORD *)(result + 232) * v21) >> 32;
        v24 = v72 | v22;
        v25 = v20 - 0x1000000;
        v23 = 448;
      }
    }
    else
    {
      v15 = *(_QWORD *)(result + 216);
      v16 = v6 - *(_QWORD *)(result + 224);
      v17 = a3 - v16 + (v15 >> 1);
      if (v17 < 1)
        goto LABEL_37;
      if (v17 >= v15)
        LODWORD(v18) = 0x3FFFFFFF;
      else
        v18 = (unint64_t)(*(_QWORD *)(result + 232) * v17) >> 32;
      v24 = v72 | v18;
      v25 = v16 + 0x1000000;
      v23 = 512;
    }
    if (a2 >= v73)
      break;
    v26 = *(_QWORD *)(result + 192);
    v27 = v73 - *(_QWORD *)(result + 200);
    v28 = a2 - v27 + (v26 >> 1);
    if (v28 >= 1)
    {
      if (v28 < v26)
        v24 = ((v24 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v28) >> 32) >> 15)) | v72;
      v29 = v27 + 0x1000000;
      v30 = 32;
      goto LABEL_29;
    }
LABEL_37:
    --a4;
    a2 += v8;
    a3 += v9;
    v10 += 4;
    *(_BYTE *)++v11 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v74)
  {
    v30 = ((unint64_t)a2 >> 26) & 0x3C;
    v29 = a2;
    goto LABEL_29;
  }
  v31 = *(_QWORD *)(result + 192);
  v32 = *(_QWORD *)(result + 200) + v74;
  v33 = v32 - a2 + (v31 >> 1);
  if (v33 < 1)
    goto LABEL_37;
  if (v33 < v31)
    v24 = ((v24 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v33) >> 32) >> 15)) | v72;
  v29 = v32 - 0x1000000;
  v30 = 28;
LABEL_29:
  if (v24 < 0x400000)
    goto LABEL_37;
  v34 = v12 + SHIDWORD(v25) * (uint64_t)v4;
  v35 = v29 >> 32;
  v36 = v34 + 8 * v35;
  v37 = *(unint64_t **)(result + 32);
  if (v14 >= v36)
    v38 = (unint64_t *)(v34 + 8 * v35);
  else
    v38 = (unint64_t *)v14;
  if (v38 < v37)
    v38 = *(unint64_t **)(result + 32);
  v39 = *v38;
  if (!v5)
    goto LABEL_69;
  v40 = *(_DWORD *)(v5 + (v30 | v23));
LABEL_40:
  v41 = v40 & 0xF;
  v42 = HIBYTE(v40) & 3;
  switch(v41)
  {
    case 1:
      v59 = (unint64_t *)(v36 + SBYTE1(v40) * (uint64_t)v4);
      if (v14 < (unint64_t)v59)
        v59 = (unint64_t *)v14;
      if (v59 < v37)
        v59 = v37;
      v60 = interpolate_16161616_19469[v42];
      v61 = v42 + 1;
      v57 = v39 - ((v60 & v39) >> v61);
      v62 = (v60 & *v59) >> v61;
LABEL_68:
      v39 = v57 + v62;
      break;
    case 2:
      v63 = (unint64_t *)(v36 + ((uint64_t)((unint64_t)HIWORD(v40) << 56) >> 53));
      if (v14 < (unint64_t)v63)
        v63 = (unint64_t *)v14;
      if (v63 < v37)
        v63 = v37;
      v64 = (v40 >> 28) & 3;
      v65 = interpolate_16161616_19469[v64];
      v56 = v64 + 1;
      v57 = v39 - ((v65 & v39) >> v56);
      v58 = v65 & *v63;
LABEL_67:
      v62 = v58 >> v56;
      goto LABEL_68;
    case 3:
      v43 = (unint64_t)HIWORD(v40) << 56;
      v44 = (unint64_t *)(v36 + (v43 >> 53));
      if (v14 < (unint64_t)v44)
        v44 = (unint64_t *)v14;
      if (v44 < v37)
        v44 = v37;
      v45 = *v44;
      v46 = v36 + SBYTE1(v40) * (uint64_t)v4;
      if (v14 >= v46)
        v47 = (unint64_t *)(v36 + SBYTE1(v40) * (uint64_t)v4);
      else
        v47 = (unint64_t *)v14;
      if (v47 < v37)
        v47 = v37;
      v48 = *v47;
      v49 = (unint64_t *)(v46 + (v43 >> 53));
      if (v14 < (unint64_t)v49)
        v49 = (unint64_t *)v14;
      if (v49 < v37)
        v49 = v37;
      v50 = interpolate_16161616_19469[v42];
      v51 = v42 + 1;
      v52 = v39 - ((v50 & v39) >> v51) + ((v50 & v48) >> v51);
      v53 = v45 - ((v50 & v45) >> v51) + ((v50 & *v49) >> v51);
      v54 = (v40 >> 28) & 3;
      v55 = interpolate_16161616_19469[v54];
      v56 = v54 + 1;
      v57 = v52 - ((v52 & v55) >> v56);
      v58 = v53 & v55;
      goto LABEL_67;
  }
LABEL_69:
  v66 = 0;
  v67 = 0;
  a3 += v9;
  v68 = v7 - a3;
  a2 += v8;
  v69 = v74 - a2;
  while (1)
  {
    *(_DWORD *)(v10 + 4 + 4 * v66) = ((v39 | v13) >> 56) | (BYTE1(v39) << 24) | (BYTE3(v39) << 16) | WORD2(v39) & 0xFF00;
    *(_BYTE *)(v11 + 1 + v66) = v24 >> 22;
    if (a4 - 1 == (_DWORD)v66)
      return result;
    if (((v68 | v69 | (a3 - v6) | (a2 - v73)) & 0x8000000000000000) != 0)
    {
      v10 = v10 - v67 + 4;
      v11 += v66 + 1;
      a4 += ~(_DWORD)v66;
      if (a4)
        goto LABEL_5;
      return result;
    }
    v70 = v12 + SHIDWORD(a3) * (uint64_t)v4;
    v36 = v70 + 8 * (a2 >> 32);
    v37 = *(unint64_t **)(result + 32);
    if (v14 >= v36)
      v71 = (unint64_t *)(v70 + 8 * (a2 >> 32));
    else
      v71 = (unint64_t *)v14;
    if (v71 < v37)
      v71 = *(unint64_t **)(result + 32);
    v39 = *v71;
    if (v5)
    {
      v40 = *(_DWORD *)(v5 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v40 & 0xF) != 0)
      {
        v10 = v10 - v67 + 4;
        v11 += v66 + 1;
        a4 += ~(_DWORD)v66;
        v24 = -1;
        goto LABEL_40;
      }
    }
    v67 -= 4;
    ++v66;
    a3 += v9;
    v68 -= v9;
    a2 += v8;
    v69 -= v8;
    v24 = -1;
  }
}

int *rgba32_sample_RGBF(int *result, unint64_t a2, unint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int8x8_t *v36;
  int8x8_t *v37;
  float32x2_t v38;
  float v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  int8x8_t *v44;
  int8x8_t *v45;
  float v46;
  int8x8_t *v47;
  float32x2_t v48;
  int8x8_t *v49;
  float v50;
  _DWORD *v51;
  int8x8_t *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int8x8_t *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;

  v12 = *((_QWORD *)result + 22);
  v60 = *((_QWORD *)result + 10);
  v63 = *((_QWORD *)result + 11);
  v68 = *((_QWORD *)result + 15);
  v69 = *((_QWORD *)result + 14);
  v13 = (int *)(*((_QWORD *)result + 19) - 4);
  v64 = *((_QWORD *)result + 18) - 1;
  v65 = *((_QWORD *)result + 4);
  v66 = result[6];
  v70 = result;
  v59 = result[47];
  v67 = v65 + ((result[65] - 1) * v66) + 4 * (3 * result[64]) - 16;
  v61 = *((_QWORD *)result + 8);
  v62 = *((_QWORD *)result + 9);
  while (1)
  {
    if ((uint64_t)a3 >= v62)
    {
      if ((uint64_t)a3 <= v63)
      {
        v24 = (a3 >> 22) & 0x3C0;
        v25 = 0x3FFFFFFF;
        HIDWORD(v26) = HIDWORD(a3);
        v17 = a4;
        v18 = v61;
      }
      else
      {
        v20 = *((_QWORD *)v70 + 27);
        v21 = *((_QWORD *)v70 + 28) + v63;
        v22 = v21 - a3 + (v20 >> 1);
        v17 = a4;
        v18 = v61;
        if (v22 < 1)
          goto LABEL_33;
        if (v22 >= v20)
          LODWORD(v23) = 0x3FFFFFFF;
        else
          v23 = (unint64_t)(*((_QWORD *)v70 + 29) * v22) >> 32;
        v25 = v59 | v23;
        v26 = v21 - 0x1000000;
        v24 = 448;
      }
    }
    else
    {
      v14 = *((_QWORD *)v70 + 27);
      v15 = v62 - *((_QWORD *)v70 + 28);
      v16 = a3 - v15 + (v14 >> 1);
      v17 = a4;
      v18 = v61;
      if (v16 < 1)
        goto LABEL_33;
      if (v16 >= v14)
        LODWORD(v19) = 0x3FFFFFFF;
      else
        v19 = (unint64_t)(*((_QWORD *)v70 + 29) * v16) >> 32;
      v25 = v59 | v19;
      v26 = v15 + 0x1000000;
      v24 = 512;
    }
    if ((uint64_t)a2 >= v18)
    {
      if ((uint64_t)a2 <= v60)
      {
        v31 = (a2 >> 26) & 0x3C;
        HIDWORD(v30) = HIDWORD(a2);
      }
      else
      {
        v32 = *((_QWORD *)v70 + 24);
        v33 = *((_QWORD *)v70 + 25) + v60;
        v34 = v33 - a2 + (v32 >> 1);
        if (v34 < 1)
          goto LABEL_33;
        if (v34 < v32)
          v25 = ((v25 >> 15) * (((unint64_t)(*((_QWORD *)v70 + 26) * v34) >> 32) >> 15)) | v59;
        v30 = v33 - 0x1000000;
        v31 = 28;
      }
    }
    else
    {
      v27 = *((_QWORD *)v70 + 24);
      v28 = v18 - *((_QWORD *)v70 + 25);
      v29 = a2 - v28 + (v27 >> 1);
      if (v29 < 1)
        goto LABEL_33;
      if (v29 < v27)
        v25 = ((v25 >> 15) * (((unint64_t)(*((_QWORD *)v70 + 26) * v29) >> 32) >> 15)) | v59;
      v30 = v28 + 0x1000000;
      v31 = 32;
    }
    if (v25 >= 0x400000)
      break;
LABEL_33:
    v41 = v17 - 1;
    a2 += v69;
    a3 += v68;
    ++v13;
    *(_BYTE *)++v64 = 0;
LABEL_34:
    a4 = v41;
    if (!v41)
      return result;
  }
  v35 = v65 + SHIDWORD(v26) * (uint64_t)v66 + 12 * SHIDWORD(v30);
  v36 = (int8x8_t *)*((_QWORD *)v70 + 4);
  v37 = (int8x8_t *)v67;
  if (v67 >= v35)
    v37 = (int8x8_t *)v35;
  if (v37 < v36)
    v37 = (int8x8_t *)*((_QWORD *)v70 + 4);
  v38 = (float32x2_t)vrev32_s8(*v37);
  v39 = COERCE_FLOAT(bswap32(v37[1].u32[0]));
  if (!v12)
    goto LABEL_36;
  v40 = *(_DWORD *)(v12 + (v31 | v24));
LABEL_38:
  v42 = v40 & 0xF;
  v43 = HIBYTE(v40) & 3;
  if (v42 == 1)
  {
    v49 = (int8x8_t *)(v35 + SBYTE1(v40) * (uint64_t)v66);
    if (v67 < (unint64_t)v49)
      v49 = (int8x8_t *)v67;
    if (v49 >= v36)
      v36 = v49;
    v50 = COERCE_FLOAT(bswap32(v36[1].u32[0]));
    v51 = &interpolate_rgbaf_19467[4 * v43];
    goto LABEL_61;
  }
  if (v42 == 2)
  {
    v52 = (int8x8_t *)(v35 + 12 * SBYTE2(v40));
    if (v67 < (unint64_t)v52)
      v52 = (int8x8_t *)v67;
    if (v52 >= v36)
      v36 = v52;
    v50 = COERCE_FLOAT(bswap32(v36[1].u32[0]));
    v51 = &interpolate_rgbaf_19467[4 * ((v40 >> 28) & 3)];
LABEL_61:
    LODWORD(a8) = v51[3];
    v38 = vmla_n_f32(vmls_lane_f32(v38, v38, *(float32x2_t *)&a8, 0), (float32x2_t)vrev32_s8(*v36), *(float *)&a8);
    v39 = (float)(v39 - (float)(v39 * *(float *)&a8)) + (float)(v50 * *(float *)&a8);
    *(float *)&a8 = *(float *)&a8 + (float)(1.0 - *(float *)&a8);
    goto LABEL_62;
  }
  if (v42 != 3)
  {
LABEL_36:
    LODWORD(a8) = 1.0;
    goto LABEL_62;
  }
  v44 = (int8x8_t *)(v35 + 12 * SBYTE2(v40));
  if (v67 >= (unint64_t)v44)
    v45 = v44;
  else
    v45 = (int8x8_t *)v67;
  if (v45 < v36)
    v45 = v36;
  v46 = COERCE_FLOAT(bswap32(v45[1].u32[0]));
  v47 = (int8x8_t *)((char *)v44 + SBYTE1(v40) * (uint64_t)v66);
  if (v67 < (unint64_t)v47)
    v47 = (int8x8_t *)v67;
  if (v47 >= v36)
    v36 = v47;
  LODWORD(a9) = interpolate_rgbaf_19467[4 * v43 + 3];
  LODWORD(a10) = interpolate_rgbaf_19467[4 * ((v40 >> 28) & 3) + 3];
  v39 = (float)((float)((float)(v39 - (float)(v39 * *(float *)&a9)) + (float)(v46 * *(float *)&a9))
              - (float)((float)((float)(v39 - (float)(v39 * *(float *)&a9)) + (float)(v46 * *(float *)&a9))
                      * *(float *)&a10))
      + (float)((float)((float)(v46 - (float)(v46 * *(float *)&a9))
                      + (float)(COERCE_FLOAT(bswap32(v36[1].u32[0])) * *(float *)&a9))
              * *(float *)&a10);
  a8 = COERCE_DOUBLE(vrev32_s8(*v45));
  v48 = vmla_n_f32(vmls_lane_f32(v38, v38, *(float32x2_t *)&a9, 0), *(float32x2_t *)&a8, *(float *)&a9);
  v38 = vmla_n_f32(vmls_lane_f32(v48, v48, *(float32x2_t *)&a10, 0), vmla_n_f32(vmls_lane_f32(*(float32x2_t *)&a8, *(float32x2_t *)&a8, *(float32x2_t *)&a9, 0), (float32x2_t)vrev32_s8(*v36), *(float *)&a9), *(float *)&a10);
  *(float *)&a8 = (float)((float)(*(float *)&a9 + (float)(1.0 - *(float *)&a9))
                        - (float)((float)(*(float *)&a9 + (float)(1.0 - *(float *)&a9)) * *(float *)&a10))
                + (float)((float)(*(float *)&a9 + (float)(1.0 - *(float *)&a9)) * *(float *)&a10);
LABEL_62:
  v53 = 0;
  ++v13;
  v58 = v17;
  v54 = v17 - 1;
  a3 += v68;
  v55 = v63 - a3;
  a2 += v69;
  v56 = v60 - a2;
  while (1)
  {
    result = RGBAF_19468(v13, v38.f32[0], v38.f32[1], v39, *(float *)&a8);
    *(_BYTE *)(v64 + 1 + v53) = v25 >> 22;
    if (v54 == (_DWORD)v53)
      return result;
    if (((v55 | v56 | (a3 - v62) | (a2 - v61)) & 0x8000000000000000) != 0)
    {
      v64 += v53 + 1;
      v41 = ~(_DWORD)v53 + v58;
      goto LABEL_34;
    }
    v35 = v65 + SHIDWORD(a3) * (uint64_t)v66 + 12 * SHIDWORD(a2);
    v36 = (int8x8_t *)*((_QWORD *)v70 + 4);
    v57 = (int8x8_t *)v67;
    if (v67 >= v35)
      v57 = (int8x8_t *)(v65 + SHIDWORD(a3) * (uint64_t)v66 + 12 * SHIDWORD(a2));
    if (v57 < v36)
      v57 = (int8x8_t *)*((_QWORD *)v70 + 4);
    v38 = (float32x2_t)vrev32_s8(*v57);
    v39 = COERCE_FLOAT(bswap32(v57[1].u32[0]));
    if (v12)
    {
      v40 = *(_DWORD *)(v12 + ((a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v40 & 0xF) != 0)
      {
        v64 += v53 + 1;
        v17 = ~(_DWORD)v53 + v58;
        v25 = -1;
        goto LABEL_38;
      }
    }
    ++v53;
    ++v13;
    a3 += v68;
    v55 -= v68;
    a2 += v69;
    v56 -= v69;
    LODWORD(a8) = 1.0;
    v25 = -1;
  }
}

int *rgba32_sample_RGBf(int *result, unint64_t a2, unint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  float32x2_t *v36;
  float32x2_t *v37;
  float32x2_t v38;
  float v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  float32x2_t *v44;
  float32x2_t *v45;
  float32x2_t *v46;
  float32x2_t v47;
  float32x2_t *v48;
  float v49;
  _DWORD *v50;
  float32x2_t *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;

  v12 = *((_QWORD *)result + 22);
  v59 = *((_QWORD *)result + 10);
  v62 = *((_QWORD *)result + 11);
  v67 = *((_QWORD *)result + 15);
  v68 = *((_QWORD *)result + 14);
  v13 = (int *)(*((_QWORD *)result + 19) - 4);
  v63 = *((_QWORD *)result + 18) - 1;
  v64 = *((_QWORD *)result + 4);
  v65 = result[6];
  v69 = result;
  v58 = result[47];
  v66 = v64 + ((result[65] - 1) * v65) + 4 * (3 * result[64]) - 16;
  v60 = *((_QWORD *)result + 8);
  v61 = *((_QWORD *)result + 9);
  while (1)
  {
    if ((uint64_t)a3 >= v61)
    {
      if ((uint64_t)a3 <= v62)
      {
        v24 = (a3 >> 22) & 0x3C0;
        v25 = 0x3FFFFFFF;
        HIDWORD(v26) = HIDWORD(a3);
        v17 = a4;
        v18 = v60;
      }
      else
      {
        v20 = *((_QWORD *)v69 + 27);
        v21 = *((_QWORD *)v69 + 28) + v62;
        v22 = v21 - a3 + (v20 >> 1);
        v17 = a4;
        v18 = v60;
        if (v22 < 1)
          goto LABEL_33;
        if (v22 >= v20)
          LODWORD(v23) = 0x3FFFFFFF;
        else
          v23 = (unint64_t)(*((_QWORD *)v69 + 29) * v22) >> 32;
        v25 = v58 | v23;
        v26 = v21 - 0x1000000;
        v24 = 448;
      }
    }
    else
    {
      v14 = *((_QWORD *)v69 + 27);
      v15 = v61 - *((_QWORD *)v69 + 28);
      v16 = a3 - v15 + (v14 >> 1);
      v17 = a4;
      v18 = v60;
      if (v16 < 1)
        goto LABEL_33;
      if (v16 >= v14)
        LODWORD(v19) = 0x3FFFFFFF;
      else
        v19 = (unint64_t)(*((_QWORD *)v69 + 29) * v16) >> 32;
      v25 = v58 | v19;
      v26 = v15 + 0x1000000;
      v24 = 512;
    }
    if ((uint64_t)a2 >= v18)
    {
      if ((uint64_t)a2 <= v59)
      {
        v31 = (a2 >> 26) & 0x3C;
        HIDWORD(v30) = HIDWORD(a2);
      }
      else
      {
        v32 = *((_QWORD *)v69 + 24);
        v33 = *((_QWORD *)v69 + 25) + v59;
        v34 = v33 - a2 + (v32 >> 1);
        if (v34 < 1)
          goto LABEL_33;
        if (v34 < v32)
          v25 = ((v25 >> 15) * (((unint64_t)(*((_QWORD *)v69 + 26) * v34) >> 32) >> 15)) | v58;
        v30 = v33 - 0x1000000;
        v31 = 28;
      }
    }
    else
    {
      v27 = *((_QWORD *)v69 + 24);
      v28 = v18 - *((_QWORD *)v69 + 25);
      v29 = a2 - v28 + (v27 >> 1);
      if (v29 < 1)
        goto LABEL_33;
      if (v29 < v27)
        v25 = ((v25 >> 15) * (((unint64_t)(*((_QWORD *)v69 + 26) * v29) >> 32) >> 15)) | v58;
      v30 = v28 + 0x1000000;
      v31 = 32;
    }
    if (v25 >= 0x400000)
      break;
LABEL_33:
    v41 = v17 - 1;
    a2 += v68;
    a3 += v67;
    ++v13;
    *(_BYTE *)++v63 = 0;
LABEL_34:
    a4 = v41;
    if (!v41)
      return result;
  }
  v35 = v64 + SHIDWORD(v26) * (uint64_t)v65 + 12 * SHIDWORD(v30);
  v36 = (float32x2_t *)*((_QWORD *)v69 + 4);
  v37 = (float32x2_t *)v66;
  if (v66 >= v35)
    v37 = (float32x2_t *)v35;
  if (v37 < v36)
    v37 = (float32x2_t *)*((_QWORD *)v69 + 4);
  v38 = *v37;
  v39 = v37[1].f32[0];
  if (!v12)
    goto LABEL_36;
  v40 = *(_DWORD *)(v12 + (v31 | v24));
LABEL_38:
  v42 = v40 & 0xF;
  v43 = HIBYTE(v40) & 3;
  if (v42 == 1)
  {
    v48 = (float32x2_t *)(v35 + SBYTE1(v40) * (uint64_t)v65);
    if (v66 < (unint64_t)v48)
      v48 = (float32x2_t *)v66;
    if (v48 >= v36)
      v36 = v48;
    v49 = v36[1].f32[0];
    v50 = &interpolate_rgbaf_19467[4 * v43];
    goto LABEL_61;
  }
  if (v42 == 2)
  {
    v51 = (float32x2_t *)(v35 + 12 * SBYTE2(v40));
    if (v66 < (unint64_t)v51)
      v51 = (float32x2_t *)v66;
    if (v51 >= v36)
      v36 = v51;
    v49 = v36[1].f32[0];
    v50 = &interpolate_rgbaf_19467[4 * ((v40 >> 28) & 3)];
LABEL_61:
    LODWORD(a8) = v50[3];
    v38 = vmla_n_f32(vmls_lane_f32(v38, v38, *(float32x2_t *)&a8, 0), *v36, *(float *)&a8);
    v39 = (float)(v39 - (float)(v39 * *(float *)&a8)) + (float)(v49 * *(float *)&a8);
    *(float *)&a8 = *(float *)&a8 + (float)(1.0 - *(float *)&a8);
    goto LABEL_62;
  }
  if (v42 != 3)
  {
LABEL_36:
    LODWORD(a8) = 1.0;
    goto LABEL_62;
  }
  v44 = (float32x2_t *)(v35 + 12 * SBYTE2(v40));
  if (v66 >= (unint64_t)v44)
    v45 = v44;
  else
    v45 = (float32x2_t *)v66;
  if (v45 < v36)
    v45 = v36;
  v46 = (float32x2_t *)((char *)v44 + SBYTE1(v40) * (uint64_t)v65);
  if (v66 < (unint64_t)v46)
    v46 = (float32x2_t *)v66;
  if (v46 >= v36)
    v36 = v46;
  LODWORD(a9) = interpolate_rgbaf_19467[4 * v43 + 3];
  LODWORD(a10) = interpolate_rgbaf_19467[4 * ((v40 >> 28) & 3) + 3];
  v39 = (float)((float)((float)(v39 - (float)(v39 * *(float *)&a9)) + (float)(v45[1].f32[0] * *(float *)&a9))
              - (float)((float)((float)(v39 - (float)(v39 * *(float *)&a9)) + (float)(v45[1].f32[0] * *(float *)&a9))
                      * *(float *)&a10))
      + (float)((float)((float)(v45[1].f32[0] - (float)(v45[1].f32[0] * *(float *)&a9))
                      + (float)(v36[1].f32[0] * *(float *)&a9))
              * *(float *)&a10);
  v47 = vmla_n_f32(vmls_lane_f32(v38, v38, *(float32x2_t *)&a9, 0), *v45, *(float *)&a9);
  v38 = vmla_n_f32(vmls_lane_f32(v47, v47, *(float32x2_t *)&a10, 0), vmla_n_f32(vmls_lane_f32(*v45, *v45, *(float32x2_t *)&a9, 0), *v36, *(float *)&a9), *(float *)&a10);
  *(float *)&a8 = (float)((float)(*(float *)&a9 + (float)(1.0 - *(float *)&a9))
                        - (float)((float)(*(float *)&a9 + (float)(1.0 - *(float *)&a9)) * *(float *)&a10))
                + (float)((float)(*(float *)&a9 + (float)(1.0 - *(float *)&a9)) * *(float *)&a10);
LABEL_62:
  v52 = 0;
  ++v13;
  v57 = v17;
  v53 = v17 - 1;
  a3 += v67;
  v54 = v62 - a3;
  a2 += v68;
  v55 = v59 - a2;
  while (1)
  {
    result = RGBAF_19468(v13, v38.f32[0], v38.f32[1], v39, *(float *)&a8);
    *(_BYTE *)(v63 + 1 + v52) = v25 >> 22;
    if (v53 == (_DWORD)v52)
      return result;
    if (((v54 | v55 | (a3 - v61) | (a2 - v60)) & 0x8000000000000000) != 0)
    {
      v63 += v52 + 1;
      v41 = ~(_DWORD)v52 + v57;
      goto LABEL_34;
    }
    v35 = v64 + SHIDWORD(a3) * (uint64_t)v65 + 12 * SHIDWORD(a2);
    v36 = (float32x2_t *)*((_QWORD *)v69 + 4);
    v56 = v66;
    if (v66 >= v35)
      v56 = v64 + SHIDWORD(a3) * (uint64_t)v65 + 12 * SHIDWORD(a2);
    if (v56 < (unint64_t)v36)
      v56 = *((_QWORD *)v69 + 4);
    v38 = *(float32x2_t *)v56;
    v39 = *(float *)(v56 + 8);
    if (v12)
    {
      v40 = *(_DWORD *)(v12 + ((a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
      if ((v40 & 0xF) != 0)
      {
        v63 += v52 + 1;
        v17 = ~(_DWORD)v52 + v57;
        v25 = -1;
        goto LABEL_38;
      }
    }
    ++v52;
    ++v13;
    a3 += v67;
    v54 -= v67;
    a2 += v68;
    v55 -= v68;
    LODWORD(a8) = 1.0;
    v25 = -1;
  }
}

int *rgba32_sample_RGBAF(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  float32x2_t v11;
  float32x2_t v12;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int *result;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int8x8_t *v40;
  int8x8_t *v41;
  float v42;
  int v43;
  float32x2_t v44;
  float v45;
  unsigned int v46;
  int v47;
  int v48;
  int8x8_t *v49;
  float32x2_t v50;
  float v51;
  float v52;
  float v53;
  unint64_t v54;
  float32x2_t v55;
  float v56;
  float32x2_t v57;
  int8x8_t *v58;
  float32x2_t v59;
  float v60;
  float v61;
  _DWORD *v62;
  int8x8_t *v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  int8x8_t *v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v15 = *(_QWORD *)(a1 + 176);
  v71 = *(_QWORD *)(a1 + 80);
  v74 = *(int **)(a1 + 88);
  v81 = *(_QWORD *)(a1 + 112);
  v80 = *(_QWORD *)(a1 + 120);
  v70 = *(_DWORD *)(a1 + 188);
  v16 = (int *)(*(_QWORD *)(a1 + 152) - 4);
  v75 = *(_QWORD *)(a1 + 144) - 1;
  v79 = *(_QWORD *)(a1 + 40);
  v76 = *(_QWORD *)(a1 + 32);
  v77 = *(_DWORD *)(a1 + 24);
  v78 = v76 + ((*(_DWORD *)(a1 + 260) - 1) * v77) + 4 * (4 * *(_DWORD *)(a1 + 256)) - 16;
  v72 = *(_QWORD *)(a1 + 72);
  v73 = *(_QWORD *)(a1 + 64);
  while (1)
  {
    if (a3 >= v72)
    {
      result = v74;
      if (a3 <= (uint64_t)v74)
      {
        v28 = ((unint64_t)a3 >> 22) & 0x3C0;
        v29 = 0x3FFFFFFF;
        HIDWORD(v30) = HIDWORD(a3);
        v20 = a4;
        v22 = v73;
      }
      else
      {
        v24 = *(_QWORD *)(a1 + 216);
        v25 = (char *)v74 + *(_QWORD *)(a1 + 224);
        v26 = (uint64_t)&v25[(v24 >> 1) - a3];
        v20 = a4;
        v22 = v73;
        if (v26 < 1)
          goto LABEL_33;
        if (v26 >= v24)
          LODWORD(v27) = 0x3FFFFFFF;
        else
          v27 = (unint64_t)(*(_QWORD *)(a1 + 232) * v26) >> 32;
        v29 = v70 | v27;
        v30 = v25 - 0x1000000;
        v28 = 448;
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 216);
      v18 = v72 - *(_QWORD *)(a1 + 224);
      v19 = a3 - v18 + (v17 >> 1);
      v20 = a4;
      v22 = v73;
      result = v74;
      if (v19 < 1)
        goto LABEL_33;
      if (v19 >= v17)
        LODWORD(v23) = 0x3FFFFFFF;
      else
        v23 = (unint64_t)(*(_QWORD *)(a1 + 232) * v19) >> 32;
      v29 = v70 | v23;
      v30 = (char *)(v18 + 0x1000000);
      v28 = 512;
    }
    if (a2 >= v22)
    {
      if (a2 <= v71)
      {
        v35 = ((unint64_t)a2 >> 26) & 0x3C;
        v34 = a2;
      }
      else
      {
        v36 = *(_QWORD *)(a1 + 192);
        v37 = *(_QWORD *)(a1 + 200) + v71;
        v38 = v37 - a2 + (v36 >> 1);
        if (v38 < 1)
          goto LABEL_33;
        if (v38 < v36)
          v29 = ((v29 >> 15) * (((unint64_t)(*(_QWORD *)(a1 + 208) * v38) >> 32) >> 15)) | v70;
        v34 = v37 - 0x1000000;
        v35 = 28;
      }
    }
    else
    {
      v31 = *(_QWORD *)(a1 + 192);
      v32 = v22 - *(_QWORD *)(a1 + 200);
      v33 = a2 - v32 + (v31 >> 1);
      if (v33 < 1)
        goto LABEL_33;
      if (v33 < v31)
        v29 = ((v29 >> 15) * (((unint64_t)(*(_QWORD *)(a1 + 208) * v33) >> 32) >> 15)) | v70;
      v34 = v32 + 0x1000000;
      v35 = 32;
    }
    if (v29 >= 0x400000)
      break;
LABEL_33:
    v43 = v20 - 1;
    a2 += v81;
    a3 += v80;
    ++v16;
    *(_BYTE *)++v75 = 0;
LABEL_34:
    a4 = v43;
    if (!v43)
      return result;
  }
  v39 = v76 + SHIDWORD(v30) * (uint64_t)v77 + 16 * (v34 >> 32);
  v40 = *(int8x8_t **)(a1 + 32);
  v41 = (int8x8_t *)v78;
  if (v78 >= v39)
    v41 = (int8x8_t *)v39;
  if (v41 < v40)
    v41 = *(int8x8_t **)(a1 + 32);
  if (v79)
    v42 = COERCE_FLOAT(bswap32(v41[1].u32[1]));
  else
    v42 = 1.0;
  v44 = (float32x2_t)vrev32_s8(*v41);
  v45 = COERCE_FLOAT(bswap32(v41[1].u32[0]));
  if (v15)
  {
    v46 = *(_DWORD *)(v15 + (v35 | v28));
LABEL_40:
    v47 = v46 & 0xF;
    v48 = HIBYTE(v46) & 3;
    if (v47 == 1)
    {
      v58 = (int8x8_t *)(v39 + SBYTE1(v46) * (uint64_t)v77);
      if (v78 < (unint64_t)v58)
        v58 = (int8x8_t *)v78;
      if (v58 >= v40)
        v40 = v58;
      v59 = (float32x2_t)vrev32_s8(*v40);
      v60 = COERCE_FLOAT(bswap32(v40[1].u32[0]));
      v61 = 1.0;
      if (v79)
        v61 = COERCE_FLOAT(bswap32(v40[1].u32[1]));
      v62 = &interpolate_rgbaf_19467[4 * v48];
    }
    else
    {
      if (v47 != 2)
      {
        if (v47 == 3)
        {
          v49 = (int8x8_t *)(v39 + ((uint64_t)((unint64_t)HIWORD(v46) << 56) >> 52));
          if (v78 < (unint64_t)v49)
            v49 = (int8x8_t *)v78;
          if (v49 < v40)
            v49 = v40;
          v50 = (float32x2_t)vrev32_s8(*v49);
          v51 = COERCE_FLOAT(bswap32(v49[1].u32[0]));
          v52 = 1.0;
          v53 = 1.0;
          if (v79)
            v53 = COERCE_FLOAT(bswap32(v49[1].u32[1]));
          v54 = v39 + SBYTE1(v46) * (uint64_t)v77 + 16 * SBYTE2(v46);
          if (v78 < v54)
            v54 = v78;
          if (v54 >= (unint64_t)v40)
            v40 = (int8x8_t *)v54;
          v55 = (float32x2_t)vrev32_s8(*v40);
          v56 = COERCE_FLOAT(bswap32(v40[1].u32[0]));
          if (v79)
            v52 = COERCE_FLOAT(bswap32(v40[1].u32[1]));
          v11.i32[0] = interpolate_rgbaf_19467[4 * v48 + 3];
          v12.i32[0] = interpolate_rgbaf_19467[4 * ((v46 >> 28) & 3) + 3];
          v45 = (float)((float)((float)(v45 - (float)(v45 * v11.f32[0])) + (float)(v51 * v11.f32[0]))
                      - (float)((float)((float)(v45 - (float)(v45 * v11.f32[0])) + (float)(v51 * v11.f32[0]))
                              * v12.f32[0]))
              + (float)((float)((float)(v51 - (float)(v51 * v11.f32[0])) + (float)(v56 * v11.f32[0])) * v12.f32[0]);
          v57 = vmla_n_f32(vmls_lane_f32(v44, v44, v11, 0), v50, v11.f32[0]);
          v44 = vmla_n_f32(vmls_lane_f32(v57, v57, v12, 0), vmla_n_f32(vmls_lane_f32(v50, v50, v11, 0), v55, v11.f32[0]), v12.f32[0]);
          v42 = (float)((float)((float)(v42 - (float)(v42 * v11.f32[0])) + (float)(v53 * v11.f32[0]))
                      - (float)((float)((float)(v42 - (float)(v42 * v11.f32[0])) + (float)(v53 * v11.f32[0]))
                              * v12.f32[0]))
              + (float)((float)((float)(v53 - (float)(v53 * v11.f32[0])) + (float)(v52 * v11.f32[0])) * v12.f32[0]);
        }
        goto LABEL_71;
      }
      v63 = (int8x8_t *)(v39 + ((uint64_t)((unint64_t)HIWORD(v46) << 56) >> 52));
      if (v78 < (unint64_t)v63)
        v63 = (int8x8_t *)v78;
      if (v63 >= v40)
        v40 = v63;
      v59 = (float32x2_t)vrev32_s8(*v40);
      v60 = COERCE_FLOAT(bswap32(v40[1].u32[0]));
      v61 = 1.0;
      if (v79)
        v61 = COERCE_FLOAT(bswap32(v40[1].u32[1]));
      v62 = &interpolate_rgbaf_19467[4 * ((v46 >> 28) & 3)];
    }
    LODWORD(a11) = v62[3];
    v44 = vmla_n_f32(vmls_lane_f32(v44, v44, *(float32x2_t *)&a11, 0), v59, *(float *)&a11);
    v45 = (float)(v45 - (float)(v45 * *(float *)&a11)) + (float)(v60 * *(float *)&a11);
    v42 = (float)(v42 - (float)(v42 * *(float *)&a11)) + (float)(v61 * *(float *)&a11);
  }
LABEL_71:
  v64 = 0;
  ++v16;
  v69 = v20;
  v65 = v20 - 1;
  a3 += v80;
  v66 = (unint64_t)result - a3;
  a2 += v81;
  v67 = v71 - a2;
  while (1)
  {
    result = RGBAF_19468(v16, v44.f32[0], v44.f32[1], v45, v42);
    *(_BYTE *)(v75 + 1 + v64) = v29 >> 22;
    if (v65 == (_DWORD)v64)
      return result;
    if (((v66 | v67 | (a3 - v72) | (a2 - v73)) & 0x8000000000000000) != 0)
    {
      v75 += v64 + 1;
      v43 = ~(_DWORD)v64 + v69;
      goto LABEL_34;
    }
    v39 = v76 + SHIDWORD(a3) * (uint64_t)v77 + 16 * (a2 >> 32);
    v40 = *(int8x8_t **)(a1 + 32);
    v68 = (int8x8_t *)v78;
    if (v78 >= v39)
      v68 = (int8x8_t *)(v76 + SHIDWORD(a3) * (uint64_t)v77 + 16 * (a2 >> 32));
    if (v68 < v40)
      v68 = *(int8x8_t **)(a1 + 32);
    if (v79)
      v42 = COERCE_FLOAT(bswap32(v68[1].u32[1]));
    else
      v42 = 1.0;
    v44 = (float32x2_t)vrev32_s8(*v68);
    v45 = COERCE_FLOAT(bswap32(v68[1].u32[0]));
    if (v15)
    {
      v46 = *(_DWORD *)(v15 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v46 & 0xF) != 0)
      {
        result = v74;
        v75 += v64 + 1;
        v20 = ~(_DWORD)v64 + v69;
        v29 = -1;
        goto LABEL_40;
      }
    }
    ++v16;
    ++v64;
    a3 += v80;
    v66 -= v80;
    a2 += v81;
    v67 -= v81;
    v29 = -1;
  }
}

int *rgba32_sample_RGBAf(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  float32x2_t v11;
  float32x2_t v12;
  uint64_t v15;
  int *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int *result;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  float32x2_t *v41;
  float32x2_t *v42;
  float v43;
  int v44;
  float32x2_t v45;
  float v46;
  unsigned int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  float32x2_t *v52;
  float32x2_t v53;
  float v54;
  float32x2_t *v55;
  float v56;
  float32x2_t *v57;
  float32x2_t v58;
  float v59;
  float v60;
  _DWORD *v61;
  float32x2_t *v62;
  float32x2_t *v63;
  float32x2_t v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v15 = *(_QWORD *)(a1 + 176);
  v72 = *(_QWORD *)(a1 + 80);
  v75 = *(int **)(a1 + 88);
  v82 = *(_QWORD *)(a1 + 112);
  v81 = *(_QWORD *)(a1 + 120);
  v71 = *(_DWORD *)(a1 + 188);
  v16 = (int *)(*(_QWORD *)(a1 + 152) - 4);
  v76 = *(_QWORD *)(a1 + 144) - 1;
  v79 = *(_DWORD *)(a1 + 24);
  v80 = *(_QWORD *)(a1 + 40);
  v77 = *(_QWORD *)(a1 + 32);
  v17 = v77 + ((*(_DWORD *)(a1 + 260) - 1) * v79) + 4 * (4 * *(_DWORD *)(a1 + 256)) - 16;
  v73 = *(_QWORD *)(a1 + 64);
  v74 = *(_QWORD *)(a1 + 72);
  v78 = v17;
  while (1)
  {
    if (a3 >= v74)
    {
      result = v75;
      if (a3 <= (uint64_t)v75)
      {
        v29 = ((unint64_t)a3 >> 22) & 0x3C0;
        v30 = 0x3FFFFFFF;
        HIDWORD(v31) = HIDWORD(a3);
        v21 = a4;
        v22 = v73;
      }
      else
      {
        v25 = *(_QWORD *)(a1 + 216);
        v26 = (char *)v75 + *(_QWORD *)(a1 + 224);
        v27 = (uint64_t)&v26[(v25 >> 1) - a3];
        v21 = a4;
        v22 = v73;
        if (v27 < 1)
          goto LABEL_34;
        if (v27 >= v25)
          LODWORD(v28) = 0x3FFFFFFF;
        else
          v28 = (unint64_t)(*(_QWORD *)(a1 + 232) * v27) >> 32;
        v30 = v71 | v28;
        v31 = v26 - 0x1000000;
        v29 = 448;
      }
    }
    else
    {
      v18 = *(_QWORD *)(a1 + 216);
      v19 = v74 - *(_QWORD *)(a1 + 224);
      v20 = a3 - v19 + (v18 >> 1);
      v21 = a4;
      v22 = v73;
      result = v75;
      if (v20 < 1)
        goto LABEL_34;
      if (v20 >= v18)
        LODWORD(v24) = 0x3FFFFFFF;
      else
        v24 = (unint64_t)(*(_QWORD *)(a1 + 232) * v20) >> 32;
      v30 = v71 | v24;
      v31 = (char *)(v19 + 0x1000000);
      v29 = 512;
    }
    if (a2 >= v22)
    {
      if (a2 <= v72)
      {
        v36 = ((unint64_t)a2 >> 26) & 0x3C;
        v35 = a2;
      }
      else
      {
        v37 = *(_QWORD *)(a1 + 192);
        v38 = *(_QWORD *)(a1 + 200) + v72;
        v39 = v38 - a2 + (v37 >> 1);
        if (v39 < 1)
          goto LABEL_34;
        if (v39 < v37)
          v30 = ((v30 >> 15) * (((unint64_t)(*(_QWORD *)(a1 + 208) * v39) >> 32) >> 15)) | v71;
        v35 = v38 - 0x1000000;
        v36 = 28;
      }
    }
    else
    {
      v32 = *(_QWORD *)(a1 + 192);
      v33 = v22 - *(_QWORD *)(a1 + 200);
      v34 = a2 - v33 + (v32 >> 1);
      if (v34 < 1)
        goto LABEL_34;
      if (v34 < v32)
        v30 = ((v30 >> 15) * (((unint64_t)(*(_QWORD *)(a1 + 208) * v34) >> 32) >> 15)) | v71;
      v35 = v33 + 0x1000000;
      v36 = 32;
    }
    if (v30 >= 0x400000)
      break;
LABEL_34:
    v44 = v21 - 1;
    a2 += v82;
    a3 += v81;
    ++v16;
    *(_BYTE *)++v76 = 0;
LABEL_35:
    a4 = v44;
    if (!v44)
      return result;
  }
  v40 = v77 + SHIDWORD(v31) * (uint64_t)v79 + 16 * (v35 >> 32);
  v41 = *(float32x2_t **)(a1 + 32);
  if (v17 >= v40)
    v42 = (float32x2_t *)v40;
  else
    v42 = (float32x2_t *)v17;
  if (v42 < v41)
    v42 = *(float32x2_t **)(a1 + 32);
  if (v80)
    v43 = v42[1].f32[1];
  else
    v43 = 1.0;
  v45 = *v42;
  v46 = v42[1].f32[0];
  if (v15)
  {
    v47 = *(_DWORD *)(v15 + (v36 | v29));
LABEL_41:
    v48 = v47 & 0xF;
    v49 = HIBYTE(v47) & 3;
    if (v48 == 1)
    {
      v57 = (float32x2_t *)(v40 + SBYTE1(v47) * (uint64_t)v79);
      if (v17 < (unint64_t)v57)
        v57 = (float32x2_t *)v17;
      if (v57 >= v41)
        v41 = v57;
      v58 = *v41;
      v59 = v41[1].f32[0];
      v60 = 1.0;
      if (v80)
        v60 = v41[1].f32[1];
      v61 = &interpolate_rgbaf_19467[4 * v49];
    }
    else
    {
      if (v48 != 2)
      {
        if (v48 == 3)
        {
          v50 = SBYTE1(v47) * (uint64_t)v79;
          v51 = 16 * SBYTE2(v47);
          v52 = (float32x2_t *)(v40 + v51);
          if (v17 < v40 + v51)
            v52 = (float32x2_t *)v17;
          if (v52 < v41)
            v52 = v41;
          v53 = *v52;
          if (v80)
          {
            v54 = v52[1].f32[1];
            v55 = (float32x2_t *)(v40 + v50 + v51);
            if (v17 < (unint64_t)v55)
              v55 = (float32x2_t *)v17;
            if (v55 >= v41)
              v41 = v55;
            v56 = v41[1].f32[1];
          }
          else
          {
            v63 = (float32x2_t *)(v40 + v50 + v51);
            if (v17 < (unint64_t)v63)
              v63 = (float32x2_t *)v17;
            if (v63 >= v41)
              v41 = v63;
            v54 = 1.0;
            v56 = 1.0;
          }
          v11.i32[0] = interpolate_rgbaf_19467[4 * v49 + 3];
          v12.i32[0] = interpolate_rgbaf_19467[4 * ((v47 >> 28) & 3) + 3];
          v46 = (float)((float)((float)(v46 - (float)(v46 * v11.f32[0])) + (float)(v52[1].f32[0] * v11.f32[0]))
                      - (float)((float)((float)(v46 - (float)(v46 * v11.f32[0])) + (float)(v52[1].f32[0] * v11.f32[0]))
                              * v12.f32[0]))
              + (float)((float)((float)(v52[1].f32[0] - (float)(v52[1].f32[0] * v11.f32[0]))
                              + (float)(v41[1].f32[0] * v11.f32[0]))
                      * v12.f32[0]);
          v64 = vmla_n_f32(vmls_lane_f32(v45, v45, v11, 0), v53, v11.f32[0]);
          v45 = vmla_n_f32(vmls_lane_f32(v64, v64, v12, 0), vmla_n_f32(vmls_lane_f32(v53, v53, v11, 0), *v41, v11.f32[0]), v12.f32[0]);
          v43 = (float)((float)((float)(v43 - (float)(v43 * v11.f32[0])) + (float)(v54 * v11.f32[0]))
                      - (float)((float)((float)(v43 - (float)(v43 * v11.f32[0])) + (float)(v54 * v11.f32[0]))
                              * v12.f32[0]))
              + (float)((float)((float)(v54 - (float)(v54 * v11.f32[0])) + (float)(v56 * v11.f32[0])) * v12.f32[0]);
        }
        goto LABEL_75;
      }
      v62 = (float32x2_t *)(v40 + ((uint64_t)((unint64_t)HIWORD(v47) << 56) >> 52));
      if (v17 < (unint64_t)v62)
        v62 = (float32x2_t *)v17;
      if (v62 >= v41)
        v41 = v62;
      v58 = *v41;
      v59 = v41[1].f32[0];
      v60 = 1.0;
      if (v80)
        v60 = v41[1].f32[1];
      v61 = &interpolate_rgbaf_19467[4 * ((v47 >> 28) & 3)];
    }
    LODWORD(a11) = v61[3];
    v45 = vmla_n_f32(vmls_lane_f32(v45, v45, *(float32x2_t *)&a11, 0), v58, *(float *)&a11);
    v46 = (float)(v46 - (float)(v46 * *(float *)&a11)) + (float)(v59 * *(float *)&a11);
    v43 = (float)(v43 - (float)(v43 * *(float *)&a11)) + (float)(v60 * *(float *)&a11);
  }
LABEL_75:
  v65 = 0;
  ++v16;
  v70 = v21;
  v66 = v21 - 1;
  a3 += v81;
  v67 = (unint64_t)result - a3;
  a2 += v82;
  v68 = v72 - a2;
  while (1)
  {
    result = RGBAF_19468(v16, v45.f32[0], v45.f32[1], v46, v43);
    *(_BYTE *)(v76 + 1 + v65) = v30 >> 22;
    v17 = v78;
    if (v66 == (_DWORD)v65)
      return result;
    if (((v67 | v68 | (a3 - v74) | (a2 - v73)) & 0x8000000000000000) != 0)
    {
      v76 += v65 + 1;
      v44 = ~(_DWORD)v65 + v70;
      goto LABEL_35;
    }
    v40 = v77 + SHIDWORD(a3) * (uint64_t)v79 + 16 * (a2 >> 32);
    v41 = *(float32x2_t **)(a1 + 32);
    if (v78 >= v40)
      v69 = v77 + SHIDWORD(a3) * (uint64_t)v79 + 16 * (a2 >> 32);
    else
      v69 = v78;
    if (v69 < (unint64_t)v41)
      v69 = *(_QWORD *)(a1 + 32);
    if (v80)
      v43 = *(float *)(v69 + 12);
    else
      v43 = 1.0;
    v45 = *(float32x2_t *)v69;
    v46 = *(float *)(v69 + 8);
    if (v15)
    {
      v47 = *(_DWORD *)(v15 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v47 & 0xF) != 0)
      {
        result = v75;
        v76 += v65 + 1;
        v21 = ~(_DWORD)v65 + v70;
        v30 = -1;
        goto LABEL_41;
      }
    }
    ++v16;
    ++v65;
    a3 += v81;
    v67 -= v81;
    a2 += v82;
    v68 -= v82;
    v30 = -1;
  }
}

int *RGBAF_19468(int *result, float a2, float a3, float a4, float a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  if (a5 <= 0.0)
  {
    v9 = 0;
  }
  else
  {
    v5 = (int)(float)((float)(a5 * 255.0) + 0.5);
    if (a5 > 1.0)
    {
      v5 = 255;
      a5 = 1.0;
    }
    v6 = (int)(float)((float)(a2 * 255.0) + 0.5);
    if (a2 < 0.0)
      v6 = 0;
    if (a2 > a5)
      v6 = v5;
    v7 = (int)(float)((float)(a3 * 255.0) + 0.5);
    if (a3 < 0.0)
      v7 = 0;
    if (a3 > a5)
      v7 = v5;
    v8 = (int)(float)((float)(a4 * 255.0) + 0.5);
    if (a4 < 0.0)
      v8 = 0;
    if (a4 > a5)
      v8 = v5;
    v9 = (v6 << 24) | (v7 << 16) | (v8 << 8) | v5;
  }
  *result = v9;
  return result;
}

void rgba32_shade_radial_RGB(uint64_t a1, uint64_t a2, unint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  int v25;
  float v26;
  float v27;
  float v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  float v43;
  float v44;
  int v45;
  int v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  BOOL v63;
  float v64;
  BOOL v65;
  int v66;
  float v67;
  unsigned __int16 *v68;
  unsigned __int16 v69;
  int v70;
  int v71;
  unsigned __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  char v78;
  float v79;
  float v80;
  float v81;
  unsigned __int16 *v82;
  int v83;
  float v84;
  float v85;
  float v86;
  float v88;
  float v89;
  float v90;
  int v91;
  int v92;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  unsigned __int16 v98;
  unsigned __int16 *v99;
  unsigned __int16 *v100;
  int v101;
  unsigned __int16 v102;
  int v103;
  unsigned __int16 v104;
  unsigned int v105;
  unsigned int v106;
  __int16 v107;
  int v108;
  int v109;
  __int16 v110;
  int v111;
  __int16 v112;
  int v113;
  int v114;
  unsigned int v115;
  int v116;
  __int16 v117;
  int v118;
  char v119;
  char v120;
  unsigned __int16 *v121;
  unsigned __int16 v122;
  int v123;
  int v124;
  unsigned __int16 v125;
  int v126;
  __int16 v127;
  int v128;
  __int16 v129;
  int v130;
  uint64_t v131;
  unsigned __int16 *v132;
  unsigned __int16 v133;
  int v134;
  int v135;
  unsigned __int16 v136;
  int v137;
  unsigned __int16 *v138;
  unsigned __int16 *v139;
  int32x2_t v140;
  int32x2_t v141;
  int32x2_t v142;
  int32x2_t v143;
  int v144;
  _BYTE *v145;
  int32x2_t v146;
  int8x8_t v147;
  int32x2_t v148;

  v12 = *(float *)(a1 + 280);
  v13 = *(float *)(a1 + 284);
  v14 = *(float *)(*(_QWORD *)(a1 + 272) + 4);
  v15 = v14 * (float)a2;
  v16 = v14 * (float)(uint64_t)a3;
  v17 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v16) + (float)(v12 * v15));
  v18 = *(float *)(a1 + 300) + (float)((float)(v16 * *(float *)(a1 + 292)) + (float)(v13 * v15));
  v20 = *(_QWORD *)(a1 + 400);
  v21 = *(float *)(a1 + 336);
  v22 = *(float *)(a1 + 344);
  v23 = *(float *)(a1 + 304);
  v24 = *(float *)(a1 + 308);
  v25 = *(_DWORD *)(a1 + 324);
  LODWORD(a12) = *(_DWORD *)(v20 + 8);
  v26 = *(float *)(v20 + 16);
  v27 = *(float *)(v20 + 20);
  v28 = *(float *)(v20 + 28);
  v31 = a1 + 144;
  v29 = *(char **)(a1 + 144);
  v30 = *(_QWORD *)(v31 + 8);
  v32 = *(unsigned __int16 **)(a1 + 376);
  v33 = *(_QWORD *)(a1 + 360);
  v34 = ((unint64_t)a2 >> 8) & 0xF;
  if (*(float *)&a12 != 0.0 || v28 != 0.0 || v13 != 0.0)
  {
    v46 = *(_DWORD *)(a1 + 320);
    v47 = *(float *)(v20 + 12);
    v48 = *(float *)(v20 + 24);
    v49 = *(float *)(v20 + 32);
    v50 = a1 + 368;
    v51 = *(_QWORD *)(a1 + 368);
    v52 = v51 + ((a3 >> 4) & 0xF0);
    v38 = v51 == 0;
    v53 = 15;
    if (v38)
    {
      v53 = 0;
      v34 = 0;
    }
    else
    {
      v50 = v52;
    }
    v54 = -v48;
    v55 = v24 - v23;
    while (1)
    {
      v56 = v54 + (float)((float)(v17 + v17) * *(float *)&a12);
      v57 = (float)((float)(v18 * v18) + (float)(v17 * v17)) - v28;
      if (v27 == 0.0)
      {
        v64 = v57 / v56;
      }
      else
      {
        v58 = (float)((float)(v27 * -4.0) * v57) + (float)(v56 * v56);
        if (v58 < 0.0)
          goto LABEL_54;
        v59 = sqrtf(v58);
        v60 = v49 * (float)(v56 - v59);
        v61 = v56 + v59;
        v62 = v49 * v61;
        v63 = (float)(v49 * v61) <= v60;
        if ((float)(v49 * v61) <= v60)
          v64 = v49 * v61;
        else
          v64 = v60;
        if (v63)
          v62 = v60;
        if (v62 < 0.0)
        {
          v65 = v62 < v47;
LABEL_40:
          v66 = v46;
          if (v65)
            goto LABEL_54;
LABEL_41:
          if ((v66 & 0x80000000) == 0)
            goto LABEL_53;
          goto LABEL_54;
        }
        if (v62 <= 1.0)
        {
          v67 = v23 + (float)(v62 * v55);
          goto LABEL_52;
        }
        if ((v25 & 0x80000000) == 0)
        {
          v66 = v25;
          if (v62 <= v26)
          {
LABEL_53:
            v68 = (unsigned __int16 *)(v33 + 8 * v66);
            v69 = v68[1];
            v70 = *(unsigned __int8 *)(v50 + v34);
            v71 = v68[2];
            v72 = v68[3];
            v73 = v70 + *v68;
            v74 = v70 + v69;
            v75 = v70 + v71;
            v76 = v70 + v72;
            goto LABEL_56;
          }
        }
      }
      if (v64 < 0.0)
      {
        v65 = v64 < v47;
        goto LABEL_40;
      }
      if (v64 > 1.0)
      {
        v66 = v25;
        if (v64 > v26)
          goto LABEL_54;
        goto LABEL_41;
      }
      v67 = v23 + (float)(v64 * v55);
LABEL_52:
      v66 = (int)(float)(v22 * (float)(v67 - v21));
      if ((v66 & 0x80000000) == 0)
        goto LABEL_53;
LABEL_54:
      if (!v32)
      {
        v78 = 0;
        goto LABEL_58;
      }
      v77 = *(unsigned __int8 *)(v50 + v34);
      v73 = v77 + *v32;
      v74 = v77 + v32[1];
      v75 = v77 + v32[2];
      v76 = v77 + v32[3];
LABEL_56:
      *(_DWORD *)v30 = (v75 | (v73 << 16)) & 0xFF00FF00 | (HIBYTE(v74) << 16) | HIBYTE(v76);
      v78 = -1;
LABEL_58:
      v34 = ((_DWORD)v34 + 1) & v53;
      v17 = v12 + v17;
      v18 = v13 + v18;
      v30 += 4;
      *v29++ = v78;
      if (!--a4)
        return;
    }
  }
  v35 = a1 + 368;
  v36 = *(_QWORD *)(a1 + 368);
  v37 = (BYTE1(a2) + 1) & 0xF;
  v38 = v36 == 0;
  if (v36)
    v39 = v36 + ((a3 >> 4) & 0xF0);
  else
    v39 = v35;
  if (v38)
    LODWORD(v40) = 0;
  else
    LODWORD(v40) = v37;
  if (v38)
    LODWORD(v41) = 0;
  else
    LODWORD(v41) = v34;
  if (v38)
    v42 = 0;
  else
    v42 = 15;
  v43 = v18 * v18;
  v44 = -v27;
  if (v43 <= (float)-v27)
  {
    v79 = fabsf(*(float *)(v20 + 32));
    v80 = v27 * -4.0;
    v81 = v24 - v23;
    v82 = (unsigned __int16 *)(v33 + 8 * v25);
    v83 = a4 + 2;
    while (1)
    {
      v84 = v43 + (float)(v17 * v17);
      v85 = v12 + v17;
      v86 = v43 + (float)(v85 * v85);
      if (v84 > v44 && v86 > v44)
      {
        if (v25 < 0)
        {
          if (!v32)
          {
            v120 = 0;
            v119 = 0;
            goto LABEL_82;
          }
          v95 = *v32;
          v96 = v32[1];
          v97 = v32[2];
          v98 = v32[3];
        }
        else
        {
          v95 = *v82;
          v96 = v82[1];
          v97 = v82[2];
          v98 = v82[3];
        }
        v113 = *(unsigned __int8 *)(v39 + v41);
        v114 = v113 + v95;
        v115 = (v113 + v96) >> 8;
        v116 = v113 + v97;
        v117 = v113 + v98;
        v118 = *(unsigned __int8 *)(v39 + v40);
        v109 = v118 + v95;
        v110 = v118 + v96;
        v111 = v118 + v97;
        v112 = v118 + v98;
        *(_DWORD *)v30 = (v116 | (v114 << 16)) & 0xFF00FF00 | (v115 << 16) | HIBYTE(v117);
        goto LABEL_80;
      }
      v88 = sqrtf(v80 * v86);
      v89 = v79 * sqrtf(v80 * v84);
      v90 = v79 * v88;
      v91 = (int)(float)(v22 * (float)((float)(v23 + (float)(v89 * v81)) - v21));
      v92 = (int)(float)(v22 * (float)((float)(v23 + (float)((float)(v79 * v88) * v81)) - v21));
      if (v89 <= 1.0 && v90 <= 1.0)
      {
        v99 = (unsigned __int16 *)(v33 + 8 * v91);
        v100 = (unsigned __int16 *)(v33 + 8 * v92);
        v101 = *v100;
        v102 = v100[1];
        v103 = v100[2];
        v104 = v100[3];
        LODWORD(v100) = *(unsigned __int8 *)(v39 + v41);
        v105 = (v100 + *v99) >> 8;
        v106 = (v100 + v99[1]) >> 8;
        v107 = (_WORD)v100 + v99[2];
        LOWORD(v99) = (_WORD)v100 + v99[3];
        v108 = *(unsigned __int8 *)(v39 + v40);
        v109 = v108 + v101;
        v110 = v108 + v102;
        v111 = v108 + v103;
        v112 = v108 + v104;
        *(_DWORD *)v30 = v107 & 0xFF00 | (v105 << 24) | (v106 << 16) | BYTE1(v99);
LABEL_80:
        v119 = -1;
        goto LABEL_81;
      }
      if (v89 <= 1.0)
      {
        if ((v91 & 0x80000000) == 0)
        {
          v94 = 4 * v91;
LABEL_86:
          v121 = (unsigned __int16 *)(v33 + 2 * v94);
          v122 = v121[1];
          v123 = *(unsigned __int8 *)(v39 + v41);
          v124 = v121[2];
          v125 = v121[3];
          v126 = v123 + *v121;
          v127 = v123 + v122;
          v128 = v123 + v124;
          v129 = v123 + v125;
          goto LABEL_89;
        }
      }
      else if (v89 <= v26)
      {
        v94 = 4 * v25;
        if ((v25 & 0x80000000) == 0)
          goto LABEL_86;
      }
      if (!v32)
      {
        v119 = 0;
        goto LABEL_90;
      }
      v130 = *(unsigned __int8 *)(v39 + v41);
      v126 = v130 + *v32;
      v127 = v130 + v32[1];
      v128 = v130 + v32[2];
      v129 = v130 + v32[3];
LABEL_89:
      *(_DWORD *)v30 = (v128 | (v126 << 16)) & 0xFF00FF00 | (HIBYTE(v127) << 16) | HIBYTE(v129);
      v119 = -1;
LABEL_90:
      if (v90 <= 1.0)
      {
        if (v92 < 0)
          goto LABEL_97;
        v131 = 4 * v92;
      }
      else if (v90 > v26 || (v131 = 4 * v25, v25 < 0))
      {
LABEL_97:
        if (!v32)
        {
          v120 = 0;
          goto LABEL_82;
        }
        v137 = *(unsigned __int8 *)(v39 + v40);
        v109 = v137 + *v32;
        v110 = v137 + v32[1];
        v111 = v137 + v32[2];
        v112 = v137 + v32[3];
        goto LABEL_81;
      }
      v132 = (unsigned __int16 *)(v33 + 2 * v131);
      v133 = v132[1];
      v134 = *(unsigned __int8 *)(v39 + v40);
      v135 = v132[2];
      v136 = v132[3];
      v109 = v134 + *v132;
      v110 = v134 + v133;
      v111 = v134 + v135;
      v112 = v134 + v136;
LABEL_81:
      *(_DWORD *)(v30 + 4) = (v111 | (v109 << 16)) & 0xFF00FF00 | (HIBYTE(v110) << 16) | HIBYTE(v112);
      v120 = -1;
LABEL_82:
      v17 = v12 + v85;
      LOBYTE(v41) = (v41 + 1) & v42;
      LOBYTE(v40) = (v40 + 1) & v42;
      v30 += 8;
      *v29 = v119;
      v29[1] = v120;
      v29 += 2;
      v83 -= 2;
      if (v83 <= 2)
        return;
    }
  }
  if (v32 || (v25 & 0x80000000) == 0)
  {
    v138 = (unsigned __int16 *)(v33 + 8 * v25);
    if (v25 >= 0)
      v139 = v138;
    else
      v139 = v32;
    v140 = vdup_n_s32(*v139);
    v141 = vdup_n_s32(v139[2]);
    v142 = vdup_n_s32(v139[1]);
    v143 = vdup_n_s32(v139[3]);
    v144 = a4 + 4;
    do
    {
      v145 = (_BYTE *)(v39 + v41);
      v41 = ((_DWORD)v41 + 1) & v42;
      LOBYTE(a12) = *v145;
      BYTE4(a12) = *(_BYTE *)(v39 + v40);
      v146 = (int32x2_t)vand_s8(*(int8x8_t *)&a12, (int8x8_t)0xFF000000FFLL);
      v147 = vorr_s8(vorr_s8((int8x8_t)(*(_QWORD *)&vshl_n_s32(vadd_s32(v140, v146), 0x10uLL) & 0xFF00FFFFFF00FFFFLL), vand_s8((int8x8_t)vadd_s32(v141, v146), (int8x8_t)0xFF000000FF00)), vorr_s8(vand_s8((int8x8_t)vshl_n_s32(vadd_s32(v142, v146), 8uLL), (int8x8_t)0xFF000000FF0000), (int8x8_t)(*(_QWORD *)&vshr_n_u32((uint32x2_t)vadd_s32(v143, v146), 8uLL) & 0xFFFFFEFFFFFFFEFFLL)));
      *(int8x8_t *)v30 = v147;
      v40 = ((_DWORD)v40 + 1) & v42;
      v147.i8[0] = *(_BYTE *)(v39 + v41);
      v147.i8[4] = *(_BYTE *)(v39 + v40);
      v148 = (int32x2_t)vand_s8(v147, (int8x8_t)0xFF000000FFLL);
      a12 = COERCE_DOUBLE(vorr_s8(vorr_s8((int8x8_t)(*(_QWORD *)&vshl_n_s32(vadd_s32(v140, v148), 0x10uLL) & 0xFF00FFFFFF00FFFFLL), vand_s8((int8x8_t)vadd_s32(v141, v148), (int8x8_t)0xFF000000FF00)), vorr_s8(vand_s8((int8x8_t)vshl_n_s32(vadd_s32(v142, v148), 8uLL), (int8x8_t)0xFF000000FF0000), (int8x8_t)(*(_QWORD *)&vshr_n_u32((uint32x2_t)vadd_s32(v143, v148), 8uLL) & 0xFFFFFEFFFFFFFEFFLL))));
      *(double *)(v30 + 8) = a12;
      *(_DWORD *)v29 = -1;
      v29 += 4;
      v144 -= 4;
      v30 += 16;
    }
    while (v144 > 4);
  }
  else
  {
    if (a4 >= 4)
      v45 = 4;
    else
      v45 = a4;
    bzero(v29, ((a4 - v45 + 3) & 0xFFFFFFFC) + 4);
  }
}

void rgba32_shade_conic_RGB(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float v12;
  float v13;
  float v15;
  uint64_t v16;
  int *v17;
  _BYTE *v18;
  uint64_t v19;
  float v20;
  float v21;
  unsigned int v22;
  float v23;
  float v24;
  unsigned int v25;
  float v26;
  float v27;
  unsigned __int16 *v28;
  int v29;
  unsigned __int16 *v30;
  int v31;
  float v32;
  float v33;

  v4 = *(float *)(a1 + 280);
  v5 = *(float *)(*(_QWORD *)(a1 + 272) + 4);
  v6 = v5 * (float)a2;
  v7 = v5 * (float)a3;
  v8 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v7) + (float)(v4 * v6));
  v9 = *(_QWORD *)(a1 + 368);
  if (v9)
    v10 = v9 + (((unint64_t)a3 >> 4) & 0xF0);
  else
    v10 = a1 + 368;
  if (v9)
    v11 = 15;
  else
    v11 = 0;
  v12 = *(float *)(a1 + 284);
  v13 = *(float *)(a1 + 300) + (float)((float)(v7 * *(float *)(a1 + 292)) + (float)(v12 * v6));
  v32 = *(float *)(a1 + 336);
  v33 = *(float *)(a1 + 304);
  v15 = *(float *)(a1 + 344);
  v16 = *(_QWORD *)(a1 + 360);
  v18 = *(_BYTE **)(a1 + 144);
  v17 = *(int **)(a1 + 152);
  if (v9)
    v19 = ((unint64_t)a2 >> 8) & 0xF;
  else
    v19 = 0;
  v20 = *(float *)(a1 + 308) - *(float *)(a1 + 304);
  do
  {
    v21 = v15 * (float)((float)(v33 + (float)((float)((float)(atan2f(v13, v8) * 0.15915) + 0.5) * v20)) - v32);
    v22 = vcvtms_s32_f32(v21);
    v23 = ceilf(v21);
    v24 = (float)((float)(v21 - (float)(int)floorf(v21)) * 255.0) + 0.5;
    v25 = vcvtms_s32_f32(v15 + v21);
    if (v21 < 0.0)
      v22 = v25;
    v26 = ceilf(v21 - v15);
    if (v21 <= v15)
      v27 = v23;
    else
      v27 = v26;
    v28 = (unsigned __int16 *)(v16 + 2 * (int)(4 * v22));
    v29 = 255 - (int)v24;
    v30 = (unsigned __int16 *)(v16 + 8 * (int)v27);
    v31 = *(unsigned __int8 *)(v10 + v19);
    *v17++ = ((int)v24 * v30[1] + (v31 << 8) + v29 * v28[1]) & 0xFF0000 | ((_WORD)v31
                                                                         + (unsigned __int16)(((int)v24 * v30[2]
                                                                                             + v29
                                                                                             * v28[2]) >> 8)) & 0xFF00 | (((unsigned __int16)(v31 + (((int)v24 * *v30 + v29 * *v28) >> 8)) >> 8) << 24) | ((unsigned __int16)(v31 + (((int)v24 * v30[3] + v29 * v28[3]) >> 8)) >> 8);
    v19 = ((_DWORD)v19 + 1) & v11;
    v8 = v4 + v8;
    v13 = v12 + v13;
    *v18++ = -1;
    --a4;
  }
  while (a4);
}

uint64_t rgba32_shade_custom_RGB(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  unsigned __int16 *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int *v26;
  char *v27;
  int v31;
  int v32;
  __int16 v33;
  int v34;
  unsigned __int16 *v35;
  unsigned __int16 v36;
  int v37;
  int v38;
  int v39;
  char v40;

  v4 = *(float *)(result + 280);
  v5 = *(float *)(*(_QWORD *)(result + 272) + 4);
  v6 = v5 * (float)a2;
  v7 = v5 * (float)a3;
  v8 = *(float *)(result + 296) + (float)((float)(*(float *)(result + 288) * v7) + (float)(v4 * v6));
  v9 = result + 368;
  v10 = *(_QWORD *)(result + 368);
  v11 = 15;
  if (v10)
    v9 = v10 + (((unint64_t)a3 >> 4) & 0xF0);
  else
    v11 = 0;
  v12 = *(float *)(result + 284);
  v13 = *(float *)(result + 300) + (float)((float)(v7 * *(float *)(result + 292)) + (float)(v12 * v6));
  v14 = *(float *)(result + 304);
  v15 = *(float *)(result + 308);
  v16 = *(float *)(result + 312);
  v17 = *(float *)(result + 316);
  v18 = *(float *)(result + 336);
  v19 = *(float *)(result + 348);
  v20 = *(float *)(result + 344);
  v21 = *(float *)(result + 356);
  v22 = *(unsigned __int16 **)(result + 376);
  v23 = *(_QWORD *)(result + 360);
  v24 = 4 * *(_DWORD *)(result + 48);
  if (v10)
    v25 = ((unint64_t)a2 >> 8) & 0xF;
  else
    v25 = 0;
  v27 = *(char **)(result + 144);
  v26 = *(unsigned int **)(result + 152);
  do
  {
    if (v8 >= v14 && v13 >= v16 && v8 <= v15 && v13 <= v17)
    {
      v35 = (unsigned __int16 *)(v23
                               + 2 * v24 * (int)(float)(v21 * (float)(v13 - v19))
                               + 8 * (int)(float)(v20 * (float)(v8 - v18)));
      v36 = v35[1];
      v37 = *(unsigned __int8 *)(v9 + v25);
      v38 = v35[2];
      v39 = v35[3];
      v32 = v37 + *v35;
      v33 = v37 + v36;
      v34 = v37 + v38;
      result = (v37 + v39);
      goto LABEL_21;
    }
    if (v22)
    {
      v31 = *(unsigned __int8 *)(v9 + v25);
      v32 = v31 + *v22;
      v33 = v31 + v22[1];
      v34 = v31 + v22[2];
      result = v31 + v22[3];
LABEL_21:
      *v26 = (v34 | (v32 << 16)) & 0xFF00FF00 | (HIBYTE(v33) << 16) | BYTE1(result);
      v40 = -1;
      goto LABEL_22;
    }
    v40 = 0;
LABEL_22:
    v25 = ((_DWORD)v25 + 1) & v11;
    v8 = v4 + v8;
    v13 = v12 + v13;
    ++v26;
    *v27++ = v40;
    --a4;
  }
  while (a4);
  return result;
}

unint64_t PDM_19476(unsigned int a1, int a2)
{
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;

  v2 = ((a1 >> 8) & 0xFF00FF) * (a2 ^ 0xFF) + 8388736;
  v3 = ((((((a1 & 0xFF00FF) * (a2 ^ 0xFF) + 8388736) >> 8) & 0xFF00FF) + (a1 & 0xFF00FF) * (a2 ^ 0xFF) + 8388736) >> 8) & 0xFF00FF | (((v2 >> 8) & 0xFF00FF) + v2) & 0xFF00FF00;
  v4 = (((a1 | ((unint64_t)a1 << 40)) >> 8) & 0xFF00FF00FF00FFLL | 0x100010001000100)
     - (((v3 | (unint64_t)(v3 << 40)) >> 8) & 0xFF00FF00FF00FFLL);
  return (((v4 & 0x100010001000100) - ((v4 & 0x100010001000100) >> 8)) & v4 | ((((v4 & 0x100010001000100)
                                                                                   - ((v4 & 0x100010001000100) >> 8)) & v4) << 40)) >> 32;
}

unsigned int *DMplusDM_19477(unsigned int *result, unsigned int a2, int a3, unsigned int a4, int a5)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;

  v5 = (unsigned __int16)(BYTE1(a4) * (_WORD)a5) + (unsigned __int16)(BYTE1(a2) * (_WORD)a3);
  v6 = ((((a4 >> 8) & 0xFF00FF) * a5) >> 16) + ((((a2 >> 8) & 0xFF00FF) * a3) >> 16);
  if (v5 >= 0xFE79)
    v5 = 65145;
  if (v6 >= 0xFE79)
    v6 = 65145;
  v7 = (a2 & 0xFF00FF) * a3;
  v8 = (unsigned __int16)(a4 * (_WORD)a5) + (unsigned __int16)v7;
  v9 = (((a4 & 0xFF00FF) * a5) >> 16) + HIWORD(v7);
  if (v8 >= 0xFE79)
    v10 = 65145;
  else
    v10 = v8;
  if (v9 >= 0xFE79)
    v11 = 65145;
  else
    v11 = v9;
  *result = ((((((v10 | (v11 << 16)) + 8388736) >> 8) & 0xFF00FF) + (v10 | (v11 << 16)) + 8388736) >> 8) & 0xFF00FF | (((((v5 | (v6 << 16)) + 8388736) >> 8) & 0xFF00FF) + (v5 | (v6 << 16)) + 8388736) & 0xFF00FF00;
  return result;
}

_DWORD *DplusDM_19478(_DWORD *result, unsigned int a2, unsigned int a3, int a4)
{
  uint64_t v4;
  unint64_t v5;

  v4 = ((((((a3 & 0xFF00FF) * a4 + 8388736) >> 8) & 0xFF00FF) + (a3 & 0xFF00FF) * a4 + 8388736) >> 8) & 0xFF00FF | ((((((a3 >> 8) & 0xFF00FF) * a4 + 8388736) >> 8) & 0xFF00FF) + ((a3 >> 8) & 0xFF00FF) * a4 + 8388736) & 0xFF00FF00;
  v5 = (((v4 | (unint64_t)(v4 << 40)) >> 8) & 0xFF00FF00FF00FFLL)
     + (((a2 | ((unint64_t)a2 << 40)) >> 8) & 0xFF00FF00FF00FFLL);
  *result = ((((v5 & 0x100010001000100) - ((v5 & 0x100010001000100) >> 8)) | v5) & 0xFF00FF00FF00FFLL | (((((v5 & 0x100010001000100) - ((v5 & 0x100010001000100) >> 8)) | v5) & 0xFF00FF00FF00FFLL) << 40)) >> 32;
  return result;
}

int32x2_t DAplusdDA_19479(_DWORD *a1, int a2, int a3, int a4, int a5, uint64x2_t a6)
{
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int32x2_t result;
  unsigned __int32 v12;
  unsigned __int32 v13;
  uint64_t v14;
  unint64_t v15;

  a6.i32[0] = a4 & 0xFFFFFF00;
  a6.i16[3] = (a4 & 0xFFFFFF00) >> 8;
  a6.i32[2] = a2 & 0xFFFFFF00;
  a6.i16[7] = (a2 & 0xFFFFFF00) >> 8;
  v6.i64[0] = ((16843008 * a5) | ((unint64_t)(unsigned __int16)(257 * a5) << 48)) >> 8;
  v6.i64[1] = ((16843008 * a3) | ((unint64_t)(unsigned __int16)(257 * a3) << 48)) >> 8;
  v7.i64[0] = 0xFF00FF00FF00FFLL;
  v7.i64[1] = 0xFF00FF00FF00FFLL;
  v8 = (int8x16_t)vsubq_s64((int64x2_t)(*(_OWORD *)&vandq_s8(v6, v7) | __PAIR128__(0x100010001000100, 0x100010001000100)), (int64x2_t)vandq_s8((int8x16_t)vshrq_n_u64(a6, 8uLL), v7));
  v9 = (int64x2_t)vandq_s8((int8x16_t)vsubq_s64((int64x2_t)(*(_OWORD *)&v8 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)), (int64x2_t)vshrq_n_u64((uint64x2_t)(*(_OWORD *)&v8 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)), 8uLL)), v8);
  v10 = (int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v9, 0x28uLL), (int8x16_t)v9);
  *(int32x2_t *)v6.i8 = vshrn_n_s64(v10, 0x20uLL);
  v10.i64[0] = *(_QWORD *)&vmovn_s64((int64x2_t)vshrq_n_u64((uint64x2_t)v10, 0x28uLL)) & 0xFFFF00FFFFFF00FFLL;
  result = vadd_s32(*(int32x2_t *)v10.i8, vdup_lane_s32(*(int32x2_t *)v10.i8, 1));
  v12 = (v6.i32[0] & 0xFF00FF | a5) + (v6.i32[1] & 0xFF00FF | a3);
  v13 = (result.i32[0] << 8) & 0xFF00FF00 | v12 & 0xFF00FF | (15 * ((v12 >> 8) & 0x10001 | result.i32[0] & 0x1000100)) | (240 * ((v12 >> 8) & 0x10001 | result.i32[0] & 0x1000100));
  v14 = (unsigned __int16)(v13 << 8) | (v13 << 16) & 0xFFFFFF | (v13 << 24);
  v15 = (((v14 & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)(v14 >> 8) << 48)) >> 8) & 0xFF00FF00FF00FFLL | 0x100010001000100)
      - (((v13 & 0xFFFFFF00 | ((unint64_t)(unsigned __int16)((v13 & 0xFFFFFF00) >> 8) << 48)) >> 8) & 0xFFFF00FFFFFF00FFLL);
  *a1 = (v12 | (15 * (BYTE1(v12) & 1)) | (-16 * (BYTE1(v12) & 1))) | ((((v15 & 0x100010001000100)
                                                                                       - ((v15 & 0x100010001000100) >> 8)) & v15 | ((((v15 & 0x100010001000100) - ((v15 & 0x100010001000100) >> 8)) & v15) << 40)) >> 32);
  return result;
}

uint64_t PDAmultiplyPDA_19480(unsigned int a1, int a2, unsigned int a3, int a4)
{
  int32x2_t v4;
  double v5;
  unsigned int v6;
  double v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v4 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a3), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL);
  v5 = COERCE_DOUBLE(vmul_s32(vadd_s32(vdup_n_s32(a4 ^ 0xFFu), v4), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a1), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL)));
  v6 = ((a4 ^ 0xFF) + HIBYTE(a3)) * HIBYTE(a1);
  v7 = COERCE_DOUBLE(vmla_s32(*(int32x2_t *)&v5, v4, vdup_n_s32(a2 ^ 0xFFu)));
  if (a2 != 255)
  {
    v6 += HIBYTE(a3) * (a2 ^ 0xFF);
    v5 = v7;
  }
  v8 = 255 * (a4 + a2) - a4 * a2;
  v9 = v6 + 128;
  if (v6 >> 7 >= 0x1FD)
    v9 = 65152;
  v10 = (v9 + (v9 >> 8)) >> 8;
  if (HIDWORD(v5) >> 7 >= 0x1FD)
    v11 = 65152;
  else
    v11 = HIDWORD(v5) + 128;
  v12 = v11 + (v11 >> 8);
  if (v8 >= 65152)
    v13 = 65152;
  else
    v13 = v8 + 128;
  v14 = v13 + (v13 >> 8);
  v15 = (257 * LODWORD(v5) + 32896) & 0xFF0000;
  if (LODWORD(v5) >> 7 >= 0x1FD)
    v15 = 16711680;
  return v15 & 0xFFFF00 | BYTE1(v14) | (v10 << 24) | v12 & 0xFF00;
}

uint64_t PDAscreenPDA_19481(unsigned int a1, int a2, unsigned int a3, int a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v4 = HIBYTE(a3) * (HIBYTE(a1) ^ 0xFF) - HIBYTE(a1) + (HIBYTE(a1) << 8);
  v5 = BYTE2(a3) * (BYTE2(a1) ^ 0xFF) - BYTE2(a1) + (BYTE2(a1) << 8);
  v6 = BYTE1(a3) * (BYTE1(a1) ^ 0xFF) - BYTE1(a1) + (BYTE1(a1) << 8);
  v7 = 255 * (a4 + a2) - a4 * a2;
  v8 = v4 + 128;
  if (v4 >> 7 >= 0x1FD)
    v8 = 65152;
  v9 = (v8 + (v8 >> 8)) >> 8;
  if (v6 >> 7 >= 0x1FD)
    v10 = 65152;
  else
    v10 = v6 + 128;
  v11 = v10 + (v10 >> 8);
  if (v7 >= 65152)
    v12 = 65152;
  else
    v12 = v7 + 128;
  v13 = v12 + (v12 >> 8);
  if (v5 >> 7 >= 0x1FD)
    v14 = 16711680;
  else
    v14 = (257 * v5 + 32896) & 0xFF0000;
  return v14 & 0xFF0000 | (v9 << 24) | v11 & 0xFF00 | BYTE1(v13);
}

uint64_t PDAoverlayPDA_19482(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;

  v4 = HIBYTE(a1);
  v5 = BYTE2(a1);
  v6 = BYTE1(a1);
  v7 = HIBYTE(a3);
  v8 = BYTE2(a3);
  v9 = BYTE1(a3);
  if (HIBYTE(a3) >= a4)
    v7 = a4;
  if (v4 >= a2)
    v4 = a2;
  v10 = 2 * v4 * v7;
  if (BYTE2(a3) >= a4)
    v8 = a4;
  if (BYTE2(a1) >= a2)
    v5 = a2;
  v11 = 2 * v5 * v8;
  if (BYTE1(a3) >= a4)
    v9 = a4;
  if (BYTE1(a1) >= a2)
    v6 = a2;
  v12 = 2 * v6 * v9;
  v13 = a4 * a2;
  v14 = (a2 + 1) >> 1;
  v15 = a4 + 255;
  v16 = a2 + 255;
  v17 = (a4 + 255) * v4 + v7 * (a2 + 255) - (a4 * a2 + v10);
  v18 = a4 ^ 0xFF;
  v19 = a2 ^ 0xFF;
  v20 = v7 * (a2 ^ 0xFF) + (a4 ^ 0xFF) * v4 + v10;
  if (v4 < v14)
    v21 = v20;
  else
    v21 = v17;
  v22 = v15 * v5 + v8 * v16 - (v13 + v11);
  v23 = v8 * v19 + v18 * v5 + v11;
  if (v5 < v14)
    v24 = v23;
  else
    v24 = v22;
  if (v6 < v14)
    v25 = v9 * v19 + v18 * v6 + v12;
  else
    v25 = v15 * v6 + v9 * v16 - (v13 + v12);
  v26 = 255 * (a4 + a2) - v13;
  if (v21 >= 65152)
    v27 = 65152;
  else
    v27 = v21 + 128;
  v28 = v27 + (v27 >> 8);
  if (v25 >= 65152)
    v29 = 65152;
  else
    v29 = v25 + 128;
  v30 = v29 + (v29 >> 8);
  if (v26 >= 65152)
    v31 = 65152;
  else
    v31 = v26 + 128;
  v32 = (v28 << 16) | ((v31 + (v31 >> 8)) >> 8);
  if (v24 >= 65152)
    v33 = 16711680;
  else
    v33 = (257 * v24 + 32896) & 0xFF0000;
  return v32 & 0xFF0000FF | v33 | v30 & 0xFF00;
}

uint64_t PDAlightenPDA_19483(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint32x2_t v4;
  int32x2_t v5;
  int32x2_t v6;
  uint32x2_t v7;
  int32x2_t v8;
  int32x2_t v9;
  double v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  double v14;
  int v15;
  double v16;
  unsigned int v17;
  double v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;

  v4.i32[0] = HIBYTE(a3);
  v4.i32[1] = BYTE2(a3);
  v5 = vdup_n_s32(a4);
  v6 = (int32x2_t)vmin_u32(v4, (uint32x2_t)v5);
  v7.i32[0] = HIBYTE(a1);
  v7.i32[1] = BYTE2(a1);
  v8 = vdup_n_s32(a2);
  v9 = (int32x2_t)vmin_u32(v7, (uint32x2_t)v8);
  v10 = COERCE_DOUBLE(vmax_u32((uint32x2_t)vmul_s32(v6, v8), (uint32x2_t)vmul_s32(v9, v5)));
  if (BYTE1(a3) >= a4)
    v11 = a4;
  else
    v11 = BYTE1(a3);
  if (BYTE1(a1) >= a2)
    v12 = a2;
  else
    v12 = BYTE1(a1);
  v13 = v12 * a4;
  if (v11 * a2 > v12 * a4)
    v13 = v11 * a2;
  v14 = COERCE_DOUBLE(vmla_s32(*(int32x2_t *)&v10, vdup_n_s32(a4 ^ 0xFF), v9));
  v15 = v13 + (a4 ^ 0xFF) * v12;
  if (a4 == 255)
    v15 = v13;
  else
    v10 = v14;
  v16 = COERCE_DOUBLE(vmla_s32(*(int32x2_t *)&v10, v6, vdup_n_s32(a2 ^ 0xFF)));
  v17 = v15 + v11 * (a2 ^ 0xFF);
  if (a2 == 255)
  {
    v17 = v15;
    v18 = v10;
  }
  else
  {
    v18 = v16;
  }
  v19 = 255 * (a4 + a2) - a4 * a2;
  v20 = LODWORD(v18) + 128;
  if (LODWORD(v18) >> 7 >= 0x1FD)
    v20 = 65152;
  v21 = (v20 + (v20 >> 8)) >> 8;
  if (v17 >> 7 >= 0x1FD)
    v22 = 65152;
  else
    v22 = v17 + 128;
  v23 = v22 + (v22 >> 8);
  if (v19 >= 65152)
    v24 = 65152;
  else
    v24 = v19 + 128;
  v25 = v24 + (v24 >> 8);
  if (HIDWORD(v18) >> 7 >= 0x1FD)
    v26 = 16711680;
  else
    v26 = (257 * HIDWORD(v18) + 32896) & 0xFF0000;
  return v26 & 0xFFFF00 | BYTE1(v25) | (v21 << 24) | v23 & 0xFF00;
}

uint64_t PDAdarkenPDA_19484(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint32x2_t v4;
  int32x2_t v5;
  int32x2_t v6;
  uint32x2_t v7;
  int32x2_t v8;
  int32x2_t v9;
  double v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  double v14;
  int v15;
  double v16;
  unsigned int v17;
  double v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;

  v4.i32[0] = HIBYTE(a3);
  v4.i32[1] = BYTE2(a3);
  v5 = vdup_n_s32(a4);
  v6 = (int32x2_t)vmin_u32(v4, (uint32x2_t)v5);
  v7.i32[0] = HIBYTE(a1);
  v7.i32[1] = BYTE2(a1);
  v8 = vdup_n_s32(a2);
  v9 = (int32x2_t)vmin_u32(v7, (uint32x2_t)v8);
  v10 = COERCE_DOUBLE(vmin_u32((uint32x2_t)vmul_s32(v6, v8), (uint32x2_t)vmul_s32(v9, v5)));
  if (BYTE1(a3) >= a4)
    v11 = a4;
  else
    v11 = BYTE1(a3);
  if (BYTE1(a1) >= a2)
    v12 = a2;
  else
    v12 = BYTE1(a1);
  v13 = v12 * a4;
  if (v11 * a2 < v12 * a4)
    v13 = v11 * a2;
  v14 = COERCE_DOUBLE(vmla_s32(*(int32x2_t *)&v10, vdup_n_s32(a4 ^ 0xFF), v9));
  v15 = v13 + (a4 ^ 0xFF) * v12;
  if (a4 == 255)
    v15 = v13;
  else
    v10 = v14;
  v16 = COERCE_DOUBLE(vmla_s32(*(int32x2_t *)&v10, v6, vdup_n_s32(a2 ^ 0xFF)));
  v17 = v15 + v11 * (a2 ^ 0xFF);
  if (a2 == 255)
  {
    v17 = v15;
    v18 = v10;
  }
  else
  {
    v18 = v16;
  }
  v19 = 255 * (a4 + a2) - a4 * a2;
  v20 = LODWORD(v18) + 128;
  if (LODWORD(v18) >> 7 >= 0x1FD)
    v20 = 65152;
  v21 = (v20 + (v20 >> 8)) >> 8;
  if (v17 >> 7 >= 0x1FD)
    v22 = 65152;
  else
    v22 = v17 + 128;
  v23 = v22 + (v22 >> 8);
  if (v19 >= 65152)
    v24 = 65152;
  else
    v24 = v19 + 128;
  v25 = v24 + (v24 >> 8);
  if (HIDWORD(v18) >> 7 >= 0x1FD)
    v26 = 16711680;
  else
    v26 = (257 * HIDWORD(v18) + 32896) & 0xFF0000;
  return v26 & 0xFFFF00 | BYTE1(v25) | (v21 << 24) | v23 & 0xFF00;
}

uint64_t PDAcolordodgePDA_19485(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;

  v4 = HIBYTE(a3);
  v5 = a4 * a4;
  if (HIBYTE(a1) >= a2)
    v6 = a2;
  else
    v6 = HIBYTE(a1);
  if (v4 >= a4)
    v7 = a4;
  else
    v7 = HIBYTE(a3);
  if (v6)
  {
    if (v4 >= a4)
      v8 = 65025;
    else
      v8 = (int)(v5 * v6) / (int)(a4 - v7);
  }
  else
  {
    v8 = 0;
  }
  if (BYTE2(a1) >= a2)
    v9 = a2;
  else
    v9 = BYTE2(a1);
  if (BYTE2(a3) >= a4)
    v10 = a4;
  else
    v10 = BYTE2(a3);
  if (v9)
  {
    if (BYTE2(a3) >= a4)
      v11 = 65025;
    else
      v11 = (int)(v5 * v9) / (int)(a4 - v10);
  }
  else
  {
    v11 = 0;
  }
  if (BYTE1(a1) >= a2)
    v12 = a2;
  else
    v12 = BYTE1(a1);
  if (BYTE1(a3) >= a4)
    v13 = a4;
  else
    v13 = BYTE1(a3);
  if (v12)
  {
    if (BYTE1(a3) >= a4)
      v14 = 65025;
    else
      v14 = (int)(v5 * v12) / (int)(a4 - v13);
  }
  else
  {
    v14 = 0;
  }
  v15 = v8 + (a4 ^ 0xFF) * v6;
  v16 = v11 + (a4 ^ 0xFF) * v9;
  if (a4 == 255)
  {
    v15 = v8;
    v17 = v11;
  }
  else
  {
    v17 = v16;
  }
  if (a4 != 255)
    v14 += (a4 ^ 0xFF) * v12;
  v18 = v15 + v7 * (a2 ^ 0xFF);
  v19 = v17 + v10 * (a2 ^ 0xFF);
  if (a2 == 255)
  {
    v18 = v15;
    v20 = v17;
  }
  else
  {
    v20 = v19;
  }
  if (a2 == 255)
    v21 = v14;
  else
    v21 = v14 + v13 * (a2 ^ 0xFF);
  v22 = 255 * (a4 + a2) - a4 * a2;
  if (v18 >= v22)
    v18 = 255 * (a4 + a2) - a4 * a2;
  if (v20 >= v22)
    v20 = 255 * (a4 + a2) - a4 * a2;
  if (v21 >= v22)
    v21 = 255 * (a4 + a2) - a4 * a2;
  if (v18 >= 65152)
    v23 = 65152;
  else
    v23 = v18 + 128;
  v24 = (v23 + (v23 >> 8)) >> 8;
  if (v21 >= 65152)
    v25 = 65152;
  else
    v25 = v21 + 128;
  v26 = v25 + (v25 >> 8);
  if (v22 >= 65152)
    v27 = 65152;
  else
    v27 = v22 + 128;
  v28 = v27 + (v27 >> 8);
  if (v20 >= 65152)
    v29 = 16711680;
  else
    v29 = (257 * v20 + 32896) & 0xFF0000;
  return v29 & 0xFFFF00 | BYTE1(v28) | (v24 << 24) | v26 & 0xFF00;
}

uint64_t PDAcolorburnPDA_19486(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  signed int v8;
  int v9;
  signed int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;

  v4 = HIBYTE(a1);
  v5 = BYTE2(a1);
  v6 = BYTE1(a1);
  v7 = BYTE2(a3);
  v8 = BYTE1(a3);
  v9 = a4 * a2;
  if (HIBYTE(a3) >= a4)
    v10 = a4;
  else
    v10 = HIBYTE(a3);
  if (v4 >= a2)
    v11 = a2;
  else
    v11 = v4;
  if (v7 >= a4)
    v12 = a4;
  else
    v12 = v7;
  if (v5 >= a2)
    v13 = a2;
  else
    v13 = v5;
  if (v8 >= a4)
    v8 = a4;
  if (v6 >= a2)
    v14 = a2;
  else
    v14 = v6;
  v15 = v9 + (a4 ^ 0xFF) * v11;
  if (a4 == 255)
  {
    v15 = a4 * a2;
    v16 = 255 * a2;
  }
  else
  {
    v16 = v9 + (a4 ^ 0xFF) * v13;
  }
  if (a4 == 255)
    v17 = 255 * a2;
  else
    v17 = v9 + (a4 ^ 0xFF) * v14;
  v18 = v15 + v10 * (a2 ^ 0xFF);
  if (a2 == 255)
  {
    v18 = v15;
    v19 = v16;
  }
  else
  {
    v19 = v16 + v12 * (a2 ^ 0xFF);
  }
  if (a2 == 255)
    v20 = v17;
  else
    v20 = v17 + v8 * (a2 ^ 0xFF);
  if (v4 < a2)
  {
    if (v10)
      v18 = (v18 - (int)(a4 * a4 * (a2 - v11)) / v10) & ~((int)(v18 - (int)(a4 * a4 * (a2 - v11)) / v10) >> 31);
    else
      v18 = 0;
  }
  if (v5 < a2)
  {
    if (v12)
      v19 = (v19 - (int)(a4 * a4 * (a2 - v13)) / v12) & ~((int)(v19 - (int)(a4 * a4 * (a2 - v13)) / v12) >> 31);
    else
      v19 = 0;
  }
  if (v6 < a2)
  {
    if (v8)
      v20 = (v20 - (int)(a4 * a4 * (a2 - v14)) / v8) & ~((int)(v20 - (int)(a4 * a4 * (a2 - v14)) / v8) >> 31);
    else
      v20 = 0;
  }
  v21 = 255 * (a4 + a2) - v9;
  v22 = v18 + 128;
  if (v18 >> 7 >= 0x1FD)
    v22 = 65152;
  v23 = v22 + (v22 >> 8);
  if (v20 >> 7 >= 0x1FD)
    v24 = 65152;
  else
    v24 = v20 + 128;
  v25 = v24 + (v24 >> 8);
  if (v21 >= 65152)
    v26 = 65152;
  else
    v26 = v21 + 128;
  v27 = (v23 << 16) | ((v26 + (v26 >> 8)) >> 8);
  if (v19 >> 7 >= 0x1FD)
    v28 = 16711680;
  else
    v28 = (257 * v19 + 32896) & 0xFF0000;
  return v27 & 0xFF0000FF | v28 | v25 & 0xFF00;
}

uint64_t PDAhardlightPDA_19487(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;

  v4 = HIBYTE(a1);
  v5 = BYTE2(a1);
  v6 = BYTE1(a1);
  v7 = HIBYTE(a3);
  v8 = BYTE2(a3);
  v9 = BYTE1(a3);
  if (HIBYTE(a3) >= a4)
    v7 = a4;
  if (v4 >= a2)
    v4 = a2;
  v10 = 2 * v4 * v7;
  if (BYTE2(a3) >= a4)
    v8 = a4;
  if (BYTE2(a1) >= a2)
    v5 = a2;
  v11 = 2 * v5 * v8;
  if (BYTE1(a3) >= a4)
    v9 = a4;
  if (BYTE1(a1) >= a2)
    v6 = a2;
  v12 = 2 * v6 * v9;
  v13 = a4 * a2;
  v14 = (a4 + 1) >> 1;
  v15 = a4 ^ 0xFF;
  v16 = a2 ^ 0xFF;
  v17 = v7 * (a2 ^ 0xFF) + (a4 ^ 0xFF) * v4 + v10;
  v18 = a4 + 255;
  v19 = a2 + 255;
  v20 = (a4 + 255) * v4 + v7 * (a2 + 255) - (a4 * a2 + v10);
  if (v7 <= v14)
    v20 = v17;
  v21 = v8 * v16 + v15 * v5 + v11;
  v22 = v18 * v5 + v8 * v19 - (v13 + v11);
  if (v8 <= v14)
    v22 = v21;
  v23 = v9 * v16 + v15 * v6 + v12;
  v24 = v18 * v6 + v9 * v19 - (v13 + v12);
  if (v9 <= v14)
    v24 = v23;
  v25 = 255 * (a4 + a2) - v13;
  if (v20 >= 65152)
    v26 = 65152;
  else
    v26 = v20 + 128;
  v27 = v26 + (v26 >> 8);
  if (v24 >= 65152)
    v28 = 65152;
  else
    v28 = v24 + 128;
  v29 = v28 + (v28 >> 8);
  if (v25 >= 65152)
    v30 = 65152;
  else
    v30 = v25 + 128;
  v31 = (v27 << 16) | ((v30 + (v30 >> 8)) >> 8);
  if (v22 >= 65152)
    v32 = 16711680;
  else
    v32 = (257 * v22 + 32896) & 0xFF0000;
  return v31 & 0xFF0000FF | v32 | v29 & 0xFF00;
}

uint64_t PDAsoftlightPDA_19488(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;

  v4 = HIBYTE(a1);
  v5 = HIBYTE(a3);
  if (HIBYTE(a3) >= a4)
    v5 = a4;
  if (v4 >= a2)
    v4 = a2;
  v6 = BYTE1(a3);
  v7 = BYTE2(a3);
  v8 = BYTE1(a1);
  v9 = BYTE2(a1);
  v10 = (int)(v4 * v4 * (2 * v5 - a4)) / (int)a2;
  v11 = (2 * v4 * v5 - v10) & ~((int)(2 * v4 * v5 - v10) >> 31);
  if (BYTE2(a3) >= a4)
    v7 = a4;
  if (BYTE2(a1) >= a2)
    v9 = a2;
  v12 = (int)(v9 * v9 * (2 * v7 - a4)) / (int)a2;
  v13 = (2 * v9 * v7 - v12) & ~((int)(2 * v9 * v7 - v12) >> 31);
  if (BYTE1(a3) >= a4)
    v6 = a4;
  if (BYTE1(a1) >= a2)
    v8 = a2;
  v14 = 2 * v8 * v6 - (int)(v8 * v8 * (2 * v6 - a4)) / (int)a2;
  v15 = v14 & ~(v14 >> 31);
  v16 = v11 + (a4 ^ 0xFF) * v4;
  v17 = v13 + v9 * (a4 ^ 0xFF);
  v18 = v15 + v8 * (a4 ^ 0xFF);
  if (a4 == 255)
  {
    v16 = v11;
    v17 = v13;
    v18 = v15;
  }
  v19 = v16 + v5 * (a2 ^ 0xFF);
  v20 = v17 + v7 * (a2 ^ 0xFF);
  v21 = v18 + v6 * (a2 ^ 0xFF);
  if (a2 == 255)
  {
    v22 = v17;
  }
  else
  {
    v16 = v19;
    v22 = v20;
  }
  if (a2 == 255)
    v21 = v18;
  v23 = 255 * (a4 + a2) - a4 * a2;
  v24 = v16 + 128;
  if (v16 >> 7 >= 0x1FD)
    v24 = 65152;
  v25 = (v24 + (v24 >> 8)) >> 8;
  if (v21 >> 7 >= 0x1FD)
    v26 = 65152;
  else
    v26 = v21 + 128;
  v27 = v26 + (v26 >> 8);
  if (v23 >= 65152)
    v28 = 65152;
  else
    v28 = v23 + 128;
  v29 = v28 + (v28 >> 8);
  if (v22 >> 7 >= 0x1FD)
    v30 = 16711680;
  else
    v30 = (257 * v22 + 32896) & 0xFF0000;
  return v30 & 0xFFFF00 | BYTE1(v29) | (v25 << 24) | v27 & 0xFF00;
}

uint64_t PDAdifferencePDA_19489(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  int32x2_t v6;
  int32x2_t v7;
  int32x2_t v8;
  int32x2_t v9;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int32x2_t v21;
  int32x2_t v22;
  uint32x2_t v23;
  int32x2_t v24;
  int32x2_t v25;
  int32x2_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;

  v4 = HIBYTE(a1);
  v5 = HIBYTE(a3);
  v6 = (int32x2_t)vmin_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a3), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL), (uint32x2_t)vdup_n_s32(a4));
  v7 = (int32x2_t)vmin_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a1), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL), (uint32x2_t)vdup_n_s32(a2));
  v8 = vmul_s32((int32x2_t)__PAIR64__(v6.u32[1], v7.u32[0]), (int32x2_t)__PAIR64__(a2, a4));
  v9 = vrev64_s32((int32x2_t)__PAIR64__(a2, a4));
  if (HIBYTE(a3) >= a4)
    v5 = a4;
  if (v4 >= a2)
    v4 = a2;
  v10 = v5 + v4;
  v11 = v4 * a4;
  v12 = v5 * a2;
  v14 = v11 - v12;
  v13 = v11 - v12 < 0;
  v15 = 255 * v10 - v12 - v11;
  if (v13)
    v16 = -v14;
  else
    v16 = v14;
  v17 = v15 + v16;
  v18 = 255 * (a4 + a2) - a4 * a2;
  if (v17 >= 65152)
    v19 = 65152;
  else
    v19 = v17 + 128;
  v20 = (v19 + (v19 >> 8)) >> 8;
  v21 = vadd_s32(v6, v7);
  v6.i32[1] = v7.i32[1];
  v22 = vmul_s32(v6, v9);
  v23 = (uint32x2_t)__PAIR64__(v8.u32[1], v22.u32[0]);
  v24 = vneg_s32(v8);
  v8.i32[1] = v22.i32[1];
  v25 = (int32x2_t)vaba_u32((uint32x2_t)vsub_s32(vmla_s32(v24, v21, (int32x2_t)0xFF000000FFLL), v22), v23, (uint32x2_t)v8);
  v26 = vcgt_s32(vdup_n_s32(0xFE80u), v25);
  v27 = v25.i32[0] + 128;
  if ((v26.i8[0] & 1) == 0)
    v27 = 65152;
  v28 = v27 + (v27 >> 8);
  if (v18 >= 65152)
    v29 = 65152;
  else
    v29 = v18 + 128;
  v30 = v29 + (v29 >> 8);
  v31 = (257 * v25.i32[1] + 32896) & 0xFF0000;
  if ((v26.i8[4] & 1) == 0)
    v31 = 16711680;
  return v31 & 0xFFFF00 | BYTE1(v30) | v28 & 0xFF00 | (v20 << 24);
}

uint64_t PDAexclusionPDA_19490(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;

  v4 = HIBYTE(a1);
  v5 = BYTE2(a1);
  v6 = BYTE1(a1);
  v7 = HIBYTE(a3);
  if (HIBYTE(a3) >= a4)
    v7 = a4;
  if (v4 >= a2)
    v4 = a2;
  v8 = 255 * (v7 + v4) - 2 * v4 * v7;
  if (BYTE2(a3) >= a4)
    v9 = a4;
  else
    v9 = BYTE2(a3);
  if (BYTE2(a1) >= a2)
    v5 = a2;
  v10 = 255 * (v9 + v5) - 2 * v5 * v9;
  if (BYTE1(a3) >= a4)
    v11 = a4;
  else
    v11 = BYTE1(a3);
  if (BYTE1(a1) >= a2)
    v6 = a2;
  v12 = 255 * (v11 + v6) - 2 * v6 * v11;
  v13 = 255 * (a4 + a2) - a4 * a2;
  if (v8 >= 65152)
    v14 = 65152;
  else
    v14 = v8 + 128;
  v15 = (v14 + (v14 >> 8)) >> 8;
  if (v12 >= 65152)
    v16 = 65152;
  else
    v16 = v12 + 128;
  v17 = v16 + (v16 >> 8);
  if (v13 >= 65152)
    v18 = 65152;
  else
    v18 = v13 + 128;
  v19 = v18 + (v18 >> 8);
  if (v10 >= 65152)
    v20 = 16711680;
  else
    v20 = (257 * v10 + 32896) & 0xFF0000;
  return v20 & 0xFF0000 | v17 & 0xFF00 | BYTE1(v19) | (v15 << 24);
}

uint64_t PDAhuePDA_19491(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  uint32x2_t v5;
  unsigned int v6;
  uint32x2_t v7;
  int32x2_t v8;
  double v9;
  int32x2_t v10;
  double v11;
  int v12;
  double v13;
  uint32x2_t v14;
  double v15;
  unsigned int v16;
  int32x2_t v17;
  double v18;
  uint32x2_t v19;
  double v20;
  int v21;
  int32x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  __int32 v33;
  unsigned int v34;
  signed int v35;
  int32x2_t v36;
  int v37;
  int32x2_t v38;
  int v39;
  int v40;
  signed int v41;
  int v42;
  int v43;
  unsigned int v44;
  signed int v45;
  int v46;
  int32x2_t v47;
  unsigned int v48;
  unsigned int v49;
  int32x2_t v50;
  int8x8_t v51;
  uint32x2_t v52;
  uint32x2_t v53;
  _BYTE v55[12];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v4 = HIBYTE(a1);
  v5 = (uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a1), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL);
  v6 = HIBYTE(a3);
  v7 = (uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a3), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL);
  if (HIBYTE(a3) >= a4)
    v6 = a4;
  if (v4 >= a2)
    v4 = a2;
  v8 = vdup_n_s32(a4);
  v9 = COERCE_DOUBLE(vmin_u32(v7, (uint32x2_t)v8));
  v10 = vdup_n_s32(a2);
  v11 = COERCE_DOUBLE(vmin_u32(v5, (uint32x2_t)v10));
  v12 = (a4 ^ 0xFF) * v4;
  v13 = COERCE_DOUBLE(vmul_s32(vdup_n_s32(a4 ^ 0xFF), *(int32x2_t *)&v11));
  v14 = (uint32x2_t)vmla_s32((int32x2_t)0x8000000080, *(int32x2_t *)&v11, v8);
  v15 = COERCE_DOUBLE(vshr_n_u32(vsra_n_u32(v14, v14, 8uLL), 8uLL));
  if (a4 == 255)
  {
    v12 = 0;
    v16 = v4;
  }
  else
  {
    v16 = (v4 * a4 + 128 + ((v4 * a4 + 128) >> 8)) >> 8;
  }
  if (a4 == 255)
  {
    v13 = 0.0;
    *(double *)&v17 = v11;
  }
  else
  {
    *(double *)&v17 = v15;
  }
  v18 = COERCE_DOUBLE(vmla_s32(*(int32x2_t *)&v13, *(int32x2_t *)&v9, vdup_n_s32(a2 ^ 0xFF)));
  v19 = (uint32x2_t)vmla_s32((int32x2_t)0x8000000080, *(int32x2_t *)&v9, v10);
  v20 = COERCE_DOUBLE(vshr_n_u32(vsra_n_u32(v19, v19, 8uLL), 8uLL));
  if (a2 == 255)
    v21 = v12;
  else
    v21 = v12 + v6 * (a2 ^ 0xFF);
  if (a2 == 255)
  {
    *(double *)&v22 = v13;
  }
  else
  {
    v6 = (v6 * a2 + 128 + ((v6 * a2 + 128) >> 8)) >> 8;
    v9 = v20;
    *(double *)&v22 = v18;
  }
  *(_DWORD *)v55 = v6;
  *(double *)&v55[4] = v9;
  v23 = v6 < LODWORD(v9);
  v24 = v6 >= LODWORD(v9);
  if (SHIDWORD(v9) >= *(_DWORD *)((unint64_t)v55 | (4 * v24)))
  {
    v26 = *(_DWORD *)((unint64_t)v55 | (4 * v23));
    v25 = v24;
    if (SHIDWORD(v9) <= v26)
      v24 = 2;
    else
      v24 = v23;
    if (SHIDWORD(v9) > v26)
      v23 = 2;
  }
  else
  {
    v25 = 2;
  }
  v27 = *(_DWORD *)&v55[4 * v23];
  v28 = *(_DWORD *)&v55[4 * v25];
  v29 = __OFSUB__(v27, v28);
  v30 = v27 - v28;
  if ((v30 < 0) ^ v29 | (v30 == 0))
  {
    *(_DWORD *)&v55[4 * v23] = 0;
    *(_DWORD *)&v55[4 * v24] = 0;
  }
  else
  {
    v31 = v17.i32[0];
    if (v16 >= v17.i32[0])
      v32 = v17.i32[0];
    else
      v32 = v16;
    if (v16 > v17.i32[0])
      v31 = v16;
    if (v17.i32[1] <= v31)
      v33 = v31;
    else
      v33 = v17.i32[1];
    if (v17.i32[1] >= v32)
      v31 = v33;
    else
      v32 = v17.u32[1];
    v34 = v31 - v32;
    *(_DWORD *)&v55[4 * v23] = v34;
    *(_DWORD *)&v55[4 * v24] = ((*(_DWORD *)&v55[4 * v24] - *(_DWORD *)&v55[4 * v25]) * ((int)(v34 << 16) / v30) + 0x8000) >> 16;
  }
  v35 = (a4 * a2 + 128 + ((a4 * a2 + 128) >> 8)) >> 8;
  *(_DWORD *)&v55[4 * v25] = 0;
  v36 = vmul_s32(vsub_s32(v17, *(int32x2_t *)&v55[4]), (int32x2_t)0x1C00000097);
  v37 = v36.i32[0] + 77 * (v16 - *(_DWORD *)v55) + v36.i32[1];
  v38 = vadd_s32(vdup_n_s32((v37 + 128) >> 8), *(int32x2_t *)v55);
  v39 = *(_DWORD *)&v55[8] + ((v37 + 128) >> 8);
  if (v37 != (char)v37)
  {
    if (*(int *)v55 >= *(int *)&v55[4])
      v40 = v38.i32[1];
    else
      v40 = v38.i32[0];
    if (*(int *)v55 >= *(int *)&v55[4])
      v41 = v38.i32[0];
    else
      v41 = v38.i32[1];
    if (v39 <= v41)
      v42 = v41;
    else
      v42 = *(_DWORD *)&v55[8] + ((v37 + 128) >> 8);
    if (v39 >= v40)
      v43 = v40;
    else
      v43 = *(_DWORD *)&v55[8] + ((v37 + 128) >> 8);
    if (v39 >= v40)
      v41 = v42;
    if (v41 > v35 || v43 < 0)
    {
      v44 = (77 * v38.i32[0] + 151 * v38.i32[1] + 28 * v39 + 128) >> 8;
      if (v37 > -129)
      {
        v45 = v41 - v44;
        if (v41 == v44)
          goto LABEL_61;
        v46 = v35 - v44;
      }
      else
      {
        v45 = v44 - v43;
        if (v44 == v43)
          goto LABEL_61;
        v46 = (77 * v38.i32[0] + 151 * v38.i32[1] + 28 * v39 + 128) >> 8;
      }
      v47 = vdup_n_s32(v44);
      v48 = (v46 << 16) / v45;
      v39 = v44 + ((int)(v48 * (v39 - v44) + 0x8000) >> 16);
      v38 = vsra_n_s32(v47, vmla_s32((int32x2_t)0x800000008000, vdup_n_s32(v48), vsub_s32(v38, v47)), 0x10uLL);
    }
  }
LABEL_61:
  v49 = v22.i32[1] + 128;
  if ((unsigned __int32)v22.i32[1] >> 7 >= 0x1FD)
    v49 = 65152;
  v50 = vdup_lane_s32(v22, 0);
  v50.i32[0] = v21;
  v51 = (int8x8_t)vdup_n_s32(0xFE80u);
  v52 = (uint32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)v51, (uint32x2_t)v50), (int8x8_t)vadd_s32(v50, (int32x2_t)0x8000000080), v51);
  v53 = vshl_u32(vsra_n_u32((uint32x2_t)v38, vsra_n_u32(v52, v52, 8uLL), 8uLL), (uint32x2_t)0x1000000018);
  return v53.i32[0] | ((_WORD)v49 + (unsigned __int16)(v49 >> 8) + ((_WORD)v39 << 8)) & 0xFF00 | (a4 + a2 - v35) | v53.i32[1] & 0xFF0000u;
}

uint64_t PDAsaturationPDA_19492(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint32x2_t v4;
  uint32x2_t v5;
  unsigned int v6;
  unsigned int v7;
  int32x2_t v8;
  double v9;
  int32x2_t v10;
  int32x2_t v11;
  int v12;
  int32x2_t v13;
  uint32x2_t v14;
  double v15;
  double v16;
  uint32x2_t v17;
  double v18;
  unsigned int v19;
  int32x2_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  signed int v32;
  int v33;
  int32x2_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  signed int v40;
  int v41;
  int32x2_t v42;
  unsigned int v43;
  unsigned int v44;
  int8x8_t v45;
  uint32x2_t v46;
  uint32x2_t v47;
  _BYTE v49[12];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v4 = (uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a1), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL);
  v5 = (uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a3), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL);
  if (HIBYTE(a3) >= a4)
    v6 = a4;
  else
    v6 = HIBYTE(a3);
  if (HIBYTE(a1) >= a2)
    v7 = a2;
  else
    v7 = HIBYTE(a1);
  v8 = vdup_n_s32(a4);
  v9 = COERCE_DOUBLE(vmin_u32(v5, (uint32x2_t)v8));
  v10 = vdup_n_s32(a2);
  v11 = (int32x2_t)vmin_u32(v4, (uint32x2_t)v10);
  if (a4 == 255)
  {
    v12 = 0;
    v13 = 0;
  }
  else
  {
    v12 = (a4 ^ 0xFF) * v7;
    v7 = (v7 * a4 + 128 + ((v7 * a4 + 128) >> 8)) >> 8;
    v13 = vmul_s32(vdup_n_s32(a4 ^ 0xFF), v11);
    v14 = (uint32x2_t)vmla_s32((int32x2_t)0x8000000080, v11, v8);
    v11 = (int32x2_t)vshr_n_u32(vsra_n_u32(v14, v14, 8uLL), 8uLL);
  }
  v15 = COERCE_DOUBLE(vrev64_s32(v13));
  v16 = COERCE_DOUBLE(vmla_s32(*(int32x2_t *)&v15, *(int32x2_t *)&v9, vdup_n_s32(a2 ^ 0xFF)));
  v17 = (uint32x2_t)vmla_s32((int32x2_t)0x8000000080, *(int32x2_t *)&v9, v10);
  v18 = COERCE_DOUBLE(vshr_n_u32(vsra_n_u32(v17, v17, 8uLL), 8uLL));
  if (a2 == 255)
  {
    v19 = v6;
  }
  else
  {
    v12 += v6 * (a2 ^ 0xFF);
    v19 = (v6 * a2 + 128 + ((v6 * a2 + 128) >> 8)) >> 8;
  }
  if (a2 == 255)
  {
    v18 = v9;
    *(double *)&v20 = v15;
  }
  else
  {
    *(double *)&v20 = v16;
  }
  *(_DWORD *)v49 = v7;
  *(int32x2_t *)&v49[4] = v11;
  v21 = v7 < v11.i32[0];
  v22 = v7 >= v11.i32[0];
  if (v11.i32[1] >= *(_DWORD *)((unint64_t)v49 | (4 * v22)))
  {
    v23 = v7 >= v11.i32[0];
    if (v11.i32[1] <= *(_DWORD *)((unint64_t)v49 | (4 * v21)))
      v22 = 2;
    else
      v22 = v7 < v11.i32[0];
    if (v11.i32[1] > *(_DWORD *)((unint64_t)v49 | (4 * v21)))
      v21 = 2;
  }
  else
  {
    v23 = 2;
  }
  v24 = *(_DWORD *)&v49[4 * v21];
  v25 = *(_DWORD *)&v49[4 * v23];
  v26 = __OFSUB__(v24, v25);
  v27 = v24 - v25;
  if ((v27 < 0) ^ v26 | (v27 == 0))
  {
    *(_DWORD *)&v49[4 * v21] = 0;
    *(_DWORD *)&v49[4 * v22] = 0;
  }
  else
  {
    if (v19 >= HIDWORD(v18))
      v28 = HIDWORD(v18);
    else
      v28 = v19;
    if (v19 <= HIDWORD(v18))
      v19 = HIDWORD(v18);
    v29 = LODWORD(v18);
    if (LODWORD(v18) <= v19)
      v30 = v19;
    else
      v30 = LODWORD(v18);
    if (LODWORD(v18) >= v28)
    {
      v29 = v28;
      v19 = v30;
    }
    v31 = v19 - v29;
    *(_DWORD *)&v49[4 * v21] = v31;
    *(_DWORD *)&v49[4 * v22] = ((*(_DWORD *)&v49[4 * v22] - *(_DWORD *)&v49[4 * v23]) * ((int)(v31 << 16) / v27) + 0x8000) >> 16;
  }
  v32 = (a4 * a2 + 128 + ((a4 * a2 + 128) >> 8)) >> 8;
  *(_DWORD *)&v49[4 * v23] = 0;
  v33 = 77 * (v7 - *(_DWORD *)v49) + 151 * (v11.i32[0] - *(_DWORD *)&v49[4]) + 28 * (v11.i32[1] - *(_DWORD *)&v49[8]);
  v34 = vadd_s32(vdup_n_s32((v33 + 128) >> 8), *(int32x2_t *)v49);
  v35 = *(_DWORD *)&v49[8] + ((v33 + 128) >> 8);
  if (v33 != (char)v33)
  {
    v36 = *(int *)v49 >= *(int *)&v49[4] ? v34.i32[1] : v34.i32[0];
    v37 = *(int *)v49 >= *(int *)&v49[4] ? v34.i32[0] : v34.i32[1];
    v38 = v35 <= v37 ? v37 : *(_DWORD *)&v49[8] + ((v33 + 128) >> 8);
    if (v35 >= v36)
      v37 = v38;
    else
      v36 = *(_DWORD *)&v49[8] + ((v33 + 128) >> 8);
    if (v37 > v32 || v36 < 0)
    {
      v39 = (77 * v34.i32[0] + 151 * v34.i32[1] + 28 * v35 + 128) >> 8;
      if (v33 > -129)
      {
        v40 = v37 - v39;
        if (v37 == v39)
          goto LABEL_57;
        v41 = v32 - v39;
      }
      else
      {
        v40 = v39 - v36;
        if (v39 == v36)
          goto LABEL_57;
        v41 = (77 * v34.i32[0] + 151 * v34.i32[1] + 28 * v35 + 128) >> 8;
      }
      v42 = vdup_n_s32(v39);
      v43 = (v41 << 16) / v40;
      v35 = v39 + ((int)(v43 * (v35 - v39) + 0x8000) >> 16);
      v34 = vsra_n_s32(v42, vmla_s32((int32x2_t)0x800000008000, vdup_n_s32(v43), vsub_s32(v34, v42)), 0x10uLL);
    }
  }
LABEL_57:
  v44 = v20.i32[0] + 128;
  if ((unsigned __int32)v20.i32[0] >> 7 >= 0x1FD)
    v44 = 65152;
  v20.i32[0] = v12;
  v45 = (int8x8_t)vdup_n_s32(0xFE80u);
  v46 = (uint32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)v45, (uint32x2_t)v20), (int8x8_t)vadd_s32(v20, (int32x2_t)0x8000000080), v45);
  v47 = vshl_u32(vsra_n_u32((uint32x2_t)v34, vsra_n_u32(v46, v46, 8uLL), 8uLL), (uint32x2_t)0x1000000018);
  return v47.i32[0] | ((_WORD)v44 + (unsigned __int16)(v44 >> 8) + ((_WORD)v35 << 8)) & 0xFF00 | (a4 + a2 - v32) | v47.i32[1] & 0xFF0000u;
}

uint64_t PDAluminosityPDA_19493(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint32x2_t v4;
  uint32x2_t v5;
  unsigned int v6;
  int32x2_t v7;
  unsigned int v8;
  int32x2_t v9;
  int32x2_t v10;
  int32x2_t v11;
  int32x2_t v12;
  unsigned int v13;
  uint32x2_t v14;
  int32x2_t v15;
  int32x2_t v16;
  uint32x2_t v17;
  int32x2_t v18;
  signed __int32 v19;
  int32x2_t v20;
  signed int v21;
  int32x2_t v22;
  int v23;
  BOOL v24;
  int v25;
  signed int v26;
  int v27;
  int v28;
  unsigned int v29;
  signed int v30;
  int v31;
  int32x2_t v32;
  unsigned int v33;
  unsigned __int8 v34;
  unsigned int v35;
  int8x8_t v36;
  uint32x2_t v37;
  uint32x2_t v38;

  v4 = (uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a1), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL);
  v5 = (uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a3), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL);
  if (HIBYTE(a3) >= a4)
    v6 = a4;
  else
    v6 = HIBYTE(a3);
  v7 = vdup_n_s32(a4);
  if (HIBYTE(a1) >= a2)
    v8 = a2;
  else
    v8 = HIBYTE(a1);
  v9 = vdup_n_s32(a2);
  v10 = (int32x2_t)vmin_u32(v4, (uint32x2_t)v9);
  if (a4 == 255)
  {
    v13 = 0;
    v12 = 0;
  }
  else
  {
    v11 = vdup_lane_s32(v10, 0);
    v11.i32[0] = v8;
    v8 = (v8 * a4 + 128 + ((v8 * a4 + 128) >> 8)) >> 8;
    v12 = vmul_s32(vdup_n_s32(a4 ^ 0xFF), v11);
    v13 = (a4 ^ 0xFF) * v10.i32[1];
    v14 = (uint32x2_t)vmla_s32((int32x2_t)0x8000000080, v10, v7);
    v10 = (int32x2_t)vshr_n_u32(vsra_n_u32(v14, v14, 8uLL), 8uLL);
  }
  v15 = (int32x2_t)vmin_u32(v5, (uint32x2_t)v7);
  if (a2 != 255)
  {
    v16 = vdup_lane_s32(v15, 0);
    v16.i32[0] = v6;
    v6 = (v6 * a2 + 128 + ((v6 * a2 + 128) >> 8)) >> 8;
    v12 = vmla_s32(v12, v16, vdup_n_s32(a2 ^ 0xFF));
    v13 += v15.i32[1] * (a2 ^ 0xFF);
    v17 = (uint32x2_t)vmla_s32((int32x2_t)0x8000000080, v15, v9);
    v15 = (int32x2_t)vshr_n_u32(vsra_n_u32(v17, v17, 8uLL), 8uLL);
  }
  v18 = vmul_s32(vsub_s32(v15, v10), (int32x2_t)0x1C00000097);
  v19 = vadd_s32(v18, vdup_lane_s32(v18, 1)).u32[0] + 77 * (v6 - v8);
  v20 = vdup_lane_s32(v10, 0);
  v20.i32[0] = v8;
  v21 = (a4 * a2 + 128 + ((a4 * a2 + 128) >> 8)) >> 8;
  v22 = vadd_s32(vdup_n_s32((v19 + 128) >> 8), v20);
  v23 = v10.i32[1] + ((v19 + 128) >> 8);
  if (v19 != (char)v19)
  {
    v24 = v8 >= v10.i32[0];
    if (v8 >= v10.i32[0])
      v25 = v22.i32[1];
    else
      v25 = v22.i32[0];
    if (v24)
      v26 = v22.i32[0];
    else
      v26 = v22.i32[1];
    if (v23 <= v26)
      v27 = v26;
    else
      v27 = v10.i32[1] + ((v19 + 128) >> 8);
    if (v23 >= v25)
      v28 = v25;
    else
      v28 = v10.i32[1] + ((v19 + 128) >> 8);
    if (v23 >= v25)
      v26 = v27;
    if (v26 > v21 || v28 < 0)
    {
      v29 = (77 * v22.i32[0] + 151 * v22.i32[1] + 28 * v23 + 128) >> 8;
      if (v19 > -129)
      {
        v30 = v26 - v29;
        if (v26 == v29)
          goto LABEL_35;
        v31 = v21 - v29;
      }
      else
      {
        v30 = v29 - v28;
        if (v29 == v28)
          goto LABEL_35;
        v31 = (77 * v22.i32[0] + 151 * v22.i32[1] + 28 * v23 + 128) >> 8;
      }
      v32 = vdup_n_s32(v29);
      v33 = (v31 << 16) / v30;
      v23 = v29 + ((int)(v33 * (v23 - v29) + 0x8000) >> 16);
      v22 = vsra_n_s32(v32, vmla_s32((int32x2_t)0x800000008000, vdup_n_s32(v33), vsub_s32(v22, v32)), 0x10uLL);
    }
  }
LABEL_35:
  v34 = a4 + a2 - v21;
  v35 = v13 + 128;
  if (v13 >> 7 >= 0x1FD)
    v35 = 65152;
  v36 = (int8x8_t)vdup_n_s32(0xFE80u);
  v37 = (uint32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)v36, (uint32x2_t)v12), (int8x8_t)vadd_s32(v12, (int32x2_t)0x8000000080), v36);
  v38 = vshl_u32(vsra_n_u32((uint32x2_t)v22, vsra_n_u32(v37, v37, 8uLL), 8uLL), (uint32x2_t)0x1000000018);
  return v38.i32[0] | ((_WORD)v35 + (unsigned __int16)(v35 >> 8) + ((_WORD)v23 << 8)) & 0xFF00 | v34 | v38.i32[1] & 0xFF0000u;
}

uint64_t PDAtranspose_huePDA_19494(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  int32x2_t v5;
  int32x2_t v6;
  int32x2_t v7;
  double v8;
  unsigned int v9;
  double v10;
  uint32x2_t v11;
  double v12;
  int v13;
  unsigned int v14;
  double v15;
  double v16;
  uint32x2_t v17;
  double v18;
  unsigned int v19;
  signed int v20;
  double v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  __int32 v27;
  __int32 v28;
  __int32 v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  signed int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  int32x2_t v53;
  signed int v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v4 = HIBYTE(a1);
  v5 = vdup_n_s32(a4);
  v6 = (int32x2_t)vmin_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a3), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL), (uint32x2_t)v5);
  v7 = vdup_n_s32(a2);
  v8 = COERCE_DOUBLE(vmin_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a1), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL), (uint32x2_t)v7));
  if (HIBYTE(a3) >= a4)
    v9 = a4;
  else
    v9 = HIBYTE(a3);
  if (v4 >= a2)
    v4 = a2;
  v10 = COERCE_DOUBLE(vmul_s32(vdup_n_s32(a4 ^ 0xFF), *(int32x2_t *)&v8));
  v11 = (uint32x2_t)vmla_s32((int32x2_t)0x8000000080, *(int32x2_t *)&v8, v5);
  v12 = COERCE_DOUBLE(vshr_n_u32(vsra_n_u32(v11, v11, 8uLL), 8uLL));
  if (a4 == 255)
    v13 = 0;
  else
    v13 = (a4 ^ 0xFF) * v4;
  if (a4 == 255)
    v14 = v4;
  else
    v14 = (v4 * a4 + 128 + ((v4 * a4 + 128) >> 8)) >> 8;
  if (a4 == 255)
  {
    v10 = 0.0;
    v15 = v8;
  }
  else
  {
    v15 = v12;
  }
  v16 = COERCE_DOUBLE(vmla_s32(*(int32x2_t *)&v10, v6, vdup_n_s32(a2 ^ 0xFF)));
  v17 = (uint32x2_t)vmla_s32((int32x2_t)0x8000000080, v6, v7);
  v18 = COERCE_DOUBLE(vshr_n_u32(vsra_n_u32(v17, v17, 8uLL), 8uLL));
  v19 = v13 + v9 * (a2 ^ 0xFF);
  v20 = (v9 * a2 + 128 + ((v9 * a2 + 128) >> 8)) >> 8;
  if (a2 == 255)
  {
    v19 = v13;
    v20 = v9;
    v21 = v10;
  }
  else
  {
    *(double *)&v6 = v18;
    v21 = v16;
  }
  v53 = v6;
  v54 = v20;
  v22 = vcge_u32((uint32x2_t)v6, (uint32x2_t)vdup_lane_s32(v6, 1)).u8[0];
  v23 = v22 & 1;
  v24 = (v22 & 1) == 0;
  if (v20 >= *(_DWORD *)((unint64_t)&v53 & 0xFFFFFFFFFFFFFFFBLL | (4 * v23)))
  {
    v26 = v20 <= *(_DWORD *)((unint64_t)&v53 | (4 * v24));
    v25 = v22 & 1;
    if (v26)
      v23 = 2;
    else
      v23 = (v22 & 1) == 0;
    if (!v26)
      v24 = 2;
  }
  else
  {
    v25 = 2;
  }
  v27 = v53.i32[v24];
  v28 = v53.i32[v25];
  v29 = v27 - v28;
  if (v27 <= v28)
  {
    v53.i32[v24] = 0;
    v53.i32[v23] = 0;
    v30 = LODWORD(v15);
    v31 = HIDWORD(v15);
  }
  else
  {
    v30 = LODWORD(v15);
    v31 = HIDWORD(v15);
    if (LODWORD(v15) >= HIDWORD(v15))
      v32 = HIDWORD(v15);
    else
      v32 = LODWORD(v15);
    if (LODWORD(v15) <= HIDWORD(v15))
      v33 = HIDWORD(v15);
    else
      v33 = LODWORD(v15);
    if (v14 <= v33)
      v34 = v33;
    else
      v34 = v14;
    if (v14 >= v32)
      v33 = v34;
    else
      v32 = v14;
    v35 = v33 - v32;
    v53.i32[v24] = v35;
    v53.i32[v23] = ((v53.i32[v23] - v53.i32[v25]) * ((int)(v35 << 16) / v29) + 0x8000) >> 16;
  }
  v53.i32[v25] = 0;
  v36 = 77 * (v30 - v53.i32[0]) + 151 * (v31 - v53.i32[1]) + 28 * (v14 - v54);
  v37 = v53.i32[0] + ((v36 + 128) >> 8);
  v38 = v53.i32[1] + ((v36 + 128) >> 8);
  v39 = (a4 * a2 + 128 + ((a4 * a2 + 128) >> 8)) >> 8;
  v40 = v54 + ((v36 + 128) >> 8);
  if (v36 != (char)v36)
  {
    if (v53.i32[0] >= v53.i32[1])
      v41 = v53.i32[1] + ((v36 + 128) >> 8);
    else
      v41 = v53.i32[0] + ((v36 + 128) >> 8);
    if (v53.i32[0] >= v53.i32[1])
      v42 = v53.i32[0] + ((v36 + 128) >> 8);
    else
      v42 = v53.i32[1] + ((v36 + 128) >> 8);
    if (v40 <= v42)
      v43 = v42;
    else
      v43 = v54 + ((v36 + 128) >> 8);
    if (v40 >= v41)
      v44 = v41;
    else
      v44 = v54 + ((v36 + 128) >> 8);
    if (v40 >= v41)
      v42 = v43;
    if (v42 > v39 || v44 < 0)
    {
      v45 = (77 * v37 + 151 * v38 + 28 * v40 + 128) >> 8;
      if (v36 > -129)
      {
        v46 = v42 - v45;
        if (v42 == v45)
          goto LABEL_63;
        v47 = v39 - v45;
      }
      else
      {
        v46 = v45 - v44;
        if (v45 == v44)
          goto LABEL_63;
        v47 = (77 * v37 + 151 * v38 + 28 * v40 + 128) >> 8;
      }
      v48 = (v47 << 16) / v46;
      v37 = v45 + ((v48 * (v37 - v45) + 0x8000) >> 16);
      v38 = v45 + ((v48 * (v38 - v45) + 0x8000) >> 16);
      v40 = v45 + ((v48 * (v40 - v45) + 0x8000) >> 16);
    }
  }
LABEL_63:
  if (v19 >> 7 >= 0x1FD)
    v49 = 65152;
  else
    v49 = v19 + 128;
  if (HIDWORD(v21) >> 7 >= 0x1FD)
    v50 = 65152;
  else
    v50 = HIDWORD(v21) + 128;
  if (LODWORD(v21) >> 7 >= 0x1FD)
    v51 = 65152;
  else
    v51 = LODWORD(v21) + 128;
  return ((_WORD)v51 + (unsigned __int16)(v51 >> 8) + ((_WORD)v37 << 8)) & 0xFF00 | ((v38 + ((unsigned __int16)(v50 + (v50 >> 8)) >> 8)) << 16) | ((v40 + ((v49 + (v49 >> 8)) >> 8)) << 24) | (a4 + a2 - v39);
}

uint64_t PDAtranspose_saturationPDA_19495(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  int32x2_t v4;
  double v5;
  int32x2_t v6;
  int32x2_t v7;
  unsigned int v8;
  signed int v9;
  int32x2_t v10;
  uint32x2_t v11;
  unsigned int v12;
  double v13;
  double v14;
  uint32x2_t v15;
  double v16;
  unsigned int v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int32 v22;
  __int32 v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  signed int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int32x2_t v47;
  signed int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = vdup_n_s32(a4);
  v5 = COERCE_DOUBLE(vmin_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a3), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL), (uint32x2_t)v4));
  v6 = vdup_n_s32(a2);
  v7 = (int32x2_t)vmin_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a1), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL), (uint32x2_t)v6);
  if (HIBYTE(a3) >= a4)
    v8 = a4;
  else
    v8 = HIBYTE(a3);
  if (HIBYTE(a1) >= a2)
    v9 = a2;
  else
    v9 = HIBYTE(a1);
  if (a4 == 255)
  {
    v12 = 0;
    v10 = 0;
  }
  else
  {
    v10 = vmul_s32(vdup_n_s32(a4 ^ 0xFF), v7);
    v11 = (uint32x2_t)vmla_s32((int32x2_t)0x8000000080, v7, v4);
    v7 = (int32x2_t)vshr_n_u32(vsra_n_u32(v11, v11, 8uLL), 8uLL);
    v12 = (a4 ^ 0xFF) * v9;
    v9 = (v9 * a4 + 128 + ((v9 * a4 + 128) >> 8)) >> 8;
  }
  v13 = COERCE_DOUBLE(vrev64_s32(v10));
  v14 = COERCE_DOUBLE(vmla_s32(*(int32x2_t *)&v13, *(int32x2_t *)&v5, vdup_n_s32(a2 ^ 0xFF)));
  v15 = (uint32x2_t)vmla_s32((int32x2_t)0x8000000080, *(int32x2_t *)&v5, v6);
  v16 = COERCE_DOUBLE(vshr_n_u32(vsra_n_u32(v15, v15, 8uLL), 8uLL));
  v17 = (v8 * a2 + 128 + ((v8 * a2 + 128) >> 8)) >> 8;
  if (a2 == 255)
    v17 = v8;
  else
    v12 += v8 * (a2 ^ 0xFF);
  if (a2 == 255)
  {
    v16 = v5;
    v18 = v13;
  }
  else
  {
    v18 = v14;
  }
  v47 = v7;
  v48 = v9;
  v19 = v7.i32[0] < (unsigned __int32)v7.i32[1];
  v20 = v7.i32[0] >= (unsigned __int32)v7.i32[1];
  if (v9 >= *(_DWORD *)((unint64_t)&v47 | (4 * v20)))
  {
    v21 = v7.i32[0] >= (unsigned __int32)v7.i32[1];
    if (v9 <= *(_DWORD *)((unint64_t)&v47 | (4 * v19)))
      v20 = 2;
    else
      v20 = v7.i32[0] < (unsigned __int32)v7.i32[1];
    if (v9 > *(_DWORD *)((unint64_t)&v47 | (4 * v19)))
      v19 = 2;
  }
  else
  {
    v21 = 2;
  }
  v22 = v47.i32[v19];
  v23 = v47.i32[v21];
  v24 = __OFSUB__(v22, v23);
  v25 = v22 - v23;
  if ((v25 < 0) ^ v24 | (v25 == 0))
  {
    v47.i32[v19] = 0;
    v47.i32[v20] = 0;
  }
  else
  {
    v26 = LODWORD(v16);
    if (HIDWORD(v16) >= LODWORD(v16))
      v27 = LODWORD(v16);
    else
      v27 = HIDWORD(v16);
    if (HIDWORD(v16) > LODWORD(v16))
      v26 = HIDWORD(v16);
    if (v17 <= v26)
      v28 = v26;
    else
      v28 = v17;
    if (v17 >= v27)
    {
      v17 = v27;
      v26 = v28;
    }
    v29 = v26 - v17;
    v47.i32[v19] = v29;
    v47.i32[v20] = ((v47.i32[v20] - v47.i32[v21]) * ((int)(v29 << 16) / v25) + 0x8000) >> 16;
  }
  v47.i32[v21] = 0;
  v30 = 77 * (v7.i32[0] - v47.i32[0]) + 151 * (v7.i32[1] - v47.i32[1]) + 28 * (v9 - v48);
  v31 = v47.i32[0] + ((v30 + 128) >> 8);
  v32 = v47.i32[1] + ((v30 + 128) >> 8);
  v33 = (a4 * a2 + 128 + ((a4 * a2 + 128) >> 8)) >> 8;
  v34 = v48 + ((v30 + 128) >> 8);
  if (v30 != (char)v30)
  {
    if (v47.i32[0] >= v47.i32[1])
      v35 = v47.i32[1] + ((v30 + 128) >> 8);
    else
      v35 = v47.i32[0] + ((v30 + 128) >> 8);
    if (v47.i32[0] >= v47.i32[1])
      v36 = v47.i32[0] + ((v30 + 128) >> 8);
    else
      v36 = v47.i32[1] + ((v30 + 128) >> 8);
    if (v34 <= v36)
      v37 = v36;
    else
      v37 = v48 + ((v30 + 128) >> 8);
    if (v34 >= v35)
      v38 = v35;
    else
      v38 = v48 + ((v30 + 128) >> 8);
    if (v34 >= v35)
      v36 = v37;
    if (v36 > v33 || v38 < 0)
    {
      v39 = (77 * v31 + 151 * v32 + 28 * v34 + 128) >> 8;
      if (v30 > -129)
      {
        v40 = v36 - v39;
        if (v36 == v39)
          goto LABEL_59;
        v41 = v33 - v39;
      }
      else
      {
        v40 = v39 - v38;
        if (v39 == v38)
          goto LABEL_59;
        v41 = (77 * v31 + 151 * v32 + 28 * v34 + 128) >> 8;
      }
      v42 = (v41 << 16) / v40;
      v31 = v39 + ((v42 * (v31 - v39) + 0x8000) >> 16);
      v32 = v39 + ((v42 * (v32 - v39) + 0x8000) >> 16);
      v34 = v39 + ((v42 * (v34 - v39) + 0x8000) >> 16);
    }
  }
LABEL_59:
  if (v12 >> 7 >= 0x1FD)
    v43 = 65152;
  else
    v43 = v12 + 128;
  if (LODWORD(v18) >> 7 >= 0x1FD)
    v44 = 65152;
  else
    v44 = LODWORD(v18) + 128;
  if (HIDWORD(v18) >> 7 >= 0x1FD)
    v45 = 65152;
  else
    v45 = HIDWORD(v18) + 128;
  return ((_WORD)v45 + (unsigned __int16)(v45 >> 8) + ((_WORD)v31 << 8)) & 0xFF00 | ((v32 + ((unsigned __int16)(v44 + (v44 >> 8)) >> 8)) << 16) | ((v34 + ((v43 + (v43 >> 8)) >> 8)) << 24) | (a4 + a2 - v33);
}

uint64_t PDAtranspose_luminosityPDA_19496(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint32x2_t v4;
  unsigned int v5;
  int32x2_t v6;
  int32x2_t v7;
  int32x2_t v8;
  unsigned int v9;
  int32x2_t v10;
  uint32x2_t v11;
  unsigned int v12;
  int32x2_t v13;
  uint32x2_t v14;
  int32x2_t v15;
  int v16;
  int v17;
  __int32 v18;
  signed int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned __int8 v29;
  unsigned int v30;
  unsigned int v31;
  uint32x2_t v32;
  unsigned int v33;
  unsigned __int32 v34;
  unsigned int v35;

  v4 = (uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a3), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL);
  v5 = HIBYTE(a3);
  v6 = vdup_n_s32(a4);
  v7 = vdup_n_s32(a2);
  v8 = (int32x2_t)vmin_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a1), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL), (uint32x2_t)v7);
  if (HIBYTE(a3) >= a4)
    v5 = a4;
  if (HIBYTE(a1) >= a2)
    v9 = a2;
  else
    v9 = HIBYTE(a1);
  if (a4 == 255)
  {
    v12 = 0;
    v10 = 0;
  }
  else
  {
    v10 = vmul_s32(vdup_n_s32(a4 ^ 0xFF), v8);
    v11 = (uint32x2_t)vmla_s32((int32x2_t)0x8000000080, v8, v6);
    v8 = (int32x2_t)vshr_n_u32(vsra_n_u32(v11, v11, 8uLL), 8uLL);
    v12 = (a4 ^ 0xFF) * v9;
    v9 = (v9 * a4 + 128 + ((v9 * a4 + 128) >> 8)) >> 8;
  }
  v13 = (int32x2_t)vmin_u32(v4, (uint32x2_t)v6);
  if (a2 != 255)
  {
    v10 = vmla_s32(v10, v13, vdup_n_s32(a2 ^ 0xFF));
    v14 = (uint32x2_t)vmla_s32((int32x2_t)0x8000000080, v13, v7);
    v13 = (int32x2_t)vshr_n_u32(vsra_n_u32(v14, v14, 8uLL), 8uLL);
    v12 += v5 * (a2 ^ 0xFF);
    v5 = (v5 * a2 + 128 + ((v5 * a2 + 128) >> 8)) >> 8;
  }
  v15 = vmul_s32(vsub_s32(v13, v8), (int32x2_t)0x4D00000097);
  v16 = v15.i32[0] + 28 * (v5 - v9) + v15.i32[1];
  v17 = v8.i32[1] + ((v16 + 128) >> 8);
  v18 = v8.i32[0] + ((v16 + 128) >> 8);
  v19 = (a4 * a2 + 128 + ((a4 * a2 + 128) >> 8)) >> 8;
  v20 = v9 + ((v16 + 128) >> 8);
  if (v16 != (char)v16)
  {
    if (v8.i32[1] >= (unsigned __int32)v8.i32[0])
      v21 = v8.i32[0] + ((v16 + 128) >> 8);
    else
      v21 = v8.i32[1] + ((v16 + 128) >> 8);
    if (v8.i32[1] >= (unsigned __int32)v8.i32[0])
      v22 = v8.i32[1] + ((v16 + 128) >> 8);
    else
      v22 = v8.i32[0] + ((v16 + 128) >> 8);
    if (v20 <= v22)
      v23 = v22;
    else
      v23 = v20;
    if (v20 >= v21)
      v24 = v21;
    else
      v24 = v20;
    if (v20 >= v21)
      v22 = v23;
    if (v22 > v19 || v24 < 0)
    {
      v25 = (77 * v17 + 151 * v18 + 28 * v20 + 128) >> 8;
      if (v16 > -129)
      {
        v26 = v22 - v25;
        if (v22 == v25)
          goto LABEL_34;
        v27 = v19 - v25;
      }
      else
      {
        v26 = v25 - v24;
        if (v25 == v24)
          goto LABEL_34;
        v27 = (77 * v17 + 151 * v18 + 28 * v20 + 128) >> 8;
      }
      v28 = (v27 << 16) / v26;
      v17 = v25 + ((v28 * (v17 - v25) + 0x8000) >> 16);
      v18 = v25 + ((v28 * (v18 - v25) + 0x8000) >> 16);
      v20 = v25 + ((v28 * (v20 - v25) + 0x8000) >> 16);
    }
  }
LABEL_34:
  v29 = a4 + a2 - v19;
  v30 = v12 + 128;
  if (v12 >> 7 >= 0x1FD)
    v30 = 65152;
  v31 = v20 + ((v30 + (v30 >> 8)) >> 8);
  v32 = vcgt_u32((uint32x2_t)vdup_n_s32(0xFE80u), (uint32x2_t)v10);
  v33 = v10.i32[0] + 128;
  if ((v32.i8[0] & 1) == 0)
    v33 = 65152;
  v34 = v18 + ((v33 + (v33 >> 8)) >> 8);
  if ((v32.i8[4] & 1) != 0)
    v35 = v10.i32[1] + 128;
  else
    v35 = 65152;
  return ((_WORD)v35 + (unsigned __int16)(v35 >> 8) + ((_WORD)v17 << 8)) & 0xFF00 | (v34 << 16) | (v31 << 24) | v29;
}

void rgba32_mark_image_W8(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  void *v17;
  void *v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;

  v10 = a2;
  v12 = *(int *)(a1 + 28);
  v13 = *(_DWORD *)(a1 + 4);
  v14 = *(unsigned int *)(a1 + 8);
  v21 = *(_DWORD *)(a1 + 8);
  v22 = v13;
  v15 = *(int **)(a1 + 136);
  if (v15)
  {
    v16 = *(_DWORD *)(a1 + 104);
    LODWORD(v23) = *(_DWORD *)(a1 + 108);
    HIDWORD(v23) = v16;
    shape_enum_clip_alloc(a1, a2, v15, 1, 1, 1, v16, v23, v13, v14);
    v18 = v17;
    if (v17)
      goto LABEL_5;
  }
  v19 = 0;
  v20 = 0;
  v18 = 0;
  v23 = 0;
  while (1)
  {
    CGSConvertW8toARGB8888((char *)(*(_QWORD *)(a1 + 88) + *(int *)(a1 + 76) * (uint64_t)(a3 + v20 * a4) + v19 + v10), *(_DWORD *)(a1 + 76) * a4, (char *)(*(_QWORD *)(a1 + 40) + (*(int *)(a1 + 16) + (uint64_t)v20) * v12 + 4 * (*(_DWORD *)(a1 + 12) + v19)), v12, v13, v14, a7, a8);
    if (!v18)
      break;
LABEL_5:
    if (!shape_enum_clip_next((uint64_t)v18, (int *)&v23 + 1, &v23, &v22, &v21))
    {
      free(v18);
      return;
    }
    v20 = v23;
    v19 = HIDWORD(v23);
    v14 = v21;
    v13 = v22;
  }
}

unint64_t rgba32_image_mark_W8(unint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  char v28;
  unsigned __int8 *v29;
  unsigned int v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned __int8 *v39;
  int v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned int v47;
  char v48;
  unsigned __int8 *v49;
  unsigned int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned int v53;
  unsigned __int8 *v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned __int8 *v59;
  int v60;
  unsigned int v61;
  unsigned __int8 *v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t *v92;
  unint64_t v93;

  v7 = *((unsigned __int8 *)a2 + 8);
  v88 = *a2;
  v8 = (unsigned int *)*((_QWORD *)a2 + 2);
  v87 = *((_QWORD *)a2 + 3) - a5;
  v9 = *((_QWORD *)a2 + 16);
  v10 = *((_QWORD *)a2 + 7);
  v86 = *((_QWORD *)a2 + 9);
  v11 = *((_QWORD *)a2 + 5) + v86 * a4;
  v12 = *(unsigned __int8 **)(result + 32);
  v13 = &v12[(*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
           + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3)];
  v93 = result;
  v84 = v10;
  v85 = *((_QWORD *)a2 + 15);
  if (*(_QWORD *)(result + 176))
  {
    v82 = *((_QWORD *)a2 + 11);
    v80 = ~(-1 << v10);
    v81 = *((_QWORD *)a2 + 13);
    v79 = v10 - 4;
    v14 = v13 - 4;
    v77 = a5;
    v78 = -*((_QWORD *)a2 + 15);
    v76 = v9 + 16 * a3 + 8;
    while (1)
    {
      v91 = a6;
      if (((v81 - v11) | (v11 - v82)) < 0)
      {
        v18 = 0;
        v17 = 0;
        v19 = a5;
        v16 = v85;
      }
      else
      {
        v15 = ((v11 & (unint64_t)v80) >> v79) & 0xF;
        v16 = v85;
        v17 = (unint64_t)(v15 - 7) >= 9 ? v78 : v85;
        v18 = weights_19497[v15] & 0xF;
        v19 = a5;
      }
      v89 = v11;
      v20 = *(_QWORD *)(v93 + 32) + (v11 >> v84) * v16;
      if (v88 != 1)
        break;
      if (v19 >= 1)
      {
        v21 = (uint64_t *)v76;
        v22 = v77;
        while (1)
        {
          v23 = *(v21 - 1);
          v24 = *v21;
          v25 = v20 + v23;
          if ((unint64_t)v14 >= v20 + v23)
            v26 = (unsigned __int8 *)(v20 + v23);
          else
            v26 = v14;
          if (v26 < v12)
            v26 = v12;
          v27 = *v26;
          v28 = v24 & 0xF;
          if ((v24 & 0xF) != 0)
            break;
          if (v18)
          {
            v39 = (unsigned __int8 *)(v25 + v17);
            if ((unint64_t)v14 < v25 + v17)
              v39 = v14;
            if (v39 < v12)
              v39 = v12;
            v40 = BLEND8_19499[v18];
            v37 = v27 - ((v40 & v27) >> v18);
            v38 = (v40 & *v39) >> v18;
            goto LABEL_40;
          }
LABEL_41:
          result = (v27 << 24) | (v27 << 16) | (v27 << 8) | 0xFF;
          if (v7 != 255)
            result = PDM_19476(result, v7);
          v21 += 2;
          *v8++ = result;
          if (!--v22)
            goto LABEL_83;
        }
        v29 = (unsigned __int8 *)(v25 + (v24 >> 4));
        if (v14 < v29)
          v29 = v14;
        if (v29 < v12)
          v29 = v12;
        v30 = *v29;
        if (v18)
        {
          v31 = (unsigned __int8 *)(v25 + v17);
          if (v14 >= v31)
            v32 = v31;
          else
            v32 = v14;
          if (v32 < v12)
            v32 = v12;
          v33 = *v32;
          v34 = &v31[v24 >> 4];
          if (v14 < v34)
            v34 = v14;
          if (v34 < v12)
            v34 = v12;
          v35 = BLEND8_19499[v18];
          v27 = v27 - ((v35 & v27) >> v18) + ((v35 & v33) >> v18);
          v30 = v30 - ((v35 & v30) >> v18) + ((v35 & *v34) >> v18);
        }
        v36 = BLEND8_19499[*v21 & 0xF];
        v37 = v27 - ((v36 & v27) >> v28);
        v38 = (v36 & v30) >> v28;
LABEL_40:
        v27 = v37 + v38;
        goto LABEL_41;
      }
LABEL_83:
      v8 += v87;
      v11 = v89 + v86;
      a6 = v91 - 1;
      if (v91 == 1)
        return result;
    }
    if (v19 < 1)
      goto LABEL_83;
    v42 = (uint64_t *)v76;
    v41 = v77;
    while (1)
    {
      v43 = *(v42 - 1);
      v44 = *v42;
      v45 = v20 + v43;
      if ((unint64_t)v14 >= v20 + v43)
        v46 = (unsigned __int8 *)(v20 + v43);
      else
        v46 = v14;
      if (v46 < v12)
        v46 = v12;
      v47 = *v46;
      v48 = v44 & 0xF;
      if ((v44 & 0xF) != 0)
        break;
      if (v18)
      {
        v59 = (unsigned __int8 *)(v45 + v17);
        if ((unint64_t)v14 < v45 + v17)
          v59 = v14;
        if (v59 < v12)
          v59 = v12;
        v60 = BLEND8_19499[v18];
        v57 = v47 - ((v60 & v47) >> v18);
        v58 = (v60 & *v59) >> v18;
        goto LABEL_75;
      }
LABEL_76:
      v61 = (v47 << 24) | (v47 << 16) | (v47 << 8) | 0xFF;
      if (v7 != 255)
      {
        result = PDM_19476((v47 << 24) | (v47 << 16) | (v47 << 8) | 0xFF, v7);
        v61 = result;
      }
      if ((_BYTE)v61)
      {
        if (v61 == 255)
          *v8 = v61;
        else
          result = (unint64_t)DplusDM_19478(v8, v61, *v8, ~(_BYTE)v61);
      }
      v42 += 2;
      ++v8;
      if (!--v41)
        goto LABEL_83;
    }
    v49 = (unsigned __int8 *)(v45 + (v44 >> 4));
    if (v14 < v49)
      v49 = v14;
    if (v49 < v12)
      v49 = v12;
    v50 = *v49;
    if (v18)
    {
      v51 = (unsigned __int8 *)(v45 + v17);
      if (v14 >= v51)
        v52 = v51;
      else
        v52 = v14;
      if (v52 < v12)
        v52 = v12;
      v53 = *v52;
      v54 = &v51[v44 >> 4];
      if (v14 < v54)
        v54 = v14;
      if (v54 < v12)
        v54 = v12;
      v55 = BLEND8_19499[v18];
      v47 = v47 - ((v55 & v47) >> v18) + ((v55 & v53) >> v18);
      v50 = v50 - ((v55 & v50) >> v18) + ((v55 & *v54) >> v18);
    }
    v56 = BLEND8_19499[*v42 & 0xF];
    v57 = v47 - ((v56 & v47) >> v48);
    v58 = (v56 & v50) >> v48;
LABEL_75:
    v47 = v57 + v58;
    goto LABEL_76;
  }
  v62 = v13 - 4;
  v92 = (uint64_t *)(v9 + 16 * a3);
  v90 = a5;
  do
  {
    v63 = v11;
    v64 = *(unsigned __int8 **)(v93 + 32);
    v65 = &v64[(v11 >> v84) * v85];
    if (v88 == 1)
    {
      if (a5 >= 1)
      {
        v66 = v92;
        v67 = v90;
        do
        {
          v68 = *v66;
          v66 += 2;
          v69 = &v65[v68];
          if (v62 < &v65[v68])
            v69 = v62;
          if (v69 < v64)
            v69 = v64;
          result = (16843008 * *v69) | 0xFFu;
          if (v7 != 255)
            result = PDM_19476(result, v7);
          *v8++ = result;
          --v67;
        }
        while (v67);
      }
    }
    else
    {
      v70 = v92;
      v71 = v90;
      if (a5 >= 1)
      {
        do
        {
          v72 = *v70;
          v70 += 2;
          v73 = &v65[v72];
          if (v62 < &v65[v72])
            v73 = v62;
          if ((unint64_t)v73 < *(_QWORD *)(v93 + 32))
            v73 = *(unsigned __int8 **)(v93 + 32);
          v74 = 16843008 * *v73;
          v75 = v74 | 0xFF;
          if (v7 != 255)
          {
            result = PDM_19476(v74 | 0xFFu, v7);
            v75 = result;
          }
          if ((_BYTE)v75)
          {
            if (v75 == 255)
              *v8 = v75;
            else
              result = (unint64_t)DplusDM_19478(v8, v75, *v8, ~(_BYTE)v75);
          }
          ++v8;
          --v71;
        }
        while (v71);
      }
    }
    v8 += v87;
    v11 = v63 + v86;
    --a6;
  }
  while (a6);
  return result;
}

void rgba32_mark_image_RGB24(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v10;
  int v11;
  int v12;
  int *v13;
  int v14;
  void *v15;
  void *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  size_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t i;
  char *v33;
  int v34;
  char *v35;
  char v36;
  char v37;
  char v38;
  int v40;
  int v42;
  int v43;
  int v44;
  int v45;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer v48;

  v8 = a4;
  v40 = a2;
  v10 = *(_DWORD *)(a1 + 28);
  v11 = *(_DWORD *)(a1 + 4);
  v12 = *(_DWORD *)(a1 + 8);
  v42 = v12;
  v43 = v11;
  v13 = *(int **)(a1 + 136);
  if (v13)
  {
    v14 = *(_DWORD *)(a1 + 104);
    v44 = *(_DWORD *)(a1 + 108);
    v45 = v14;
    shape_enum_clip_alloc(a1, a2, v13, 1, 1, 1, v14, v44, v11, v12);
    v16 = v15;
    if (v15)
      goto LABEL_28;
  }
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v44 = 0;
  v45 = 0;
  if (v11 < 0)
LABEL_4:
    _CGHandleAssert("CGSConvertBGR888toARGB8888", 142, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-argb8.c", "width >= 0", "width (%d) is negative", a6, a7, a8, v11);
  while (1)
  {
    if (v12 < 0)
      _CGHandleAssert("CGSConvertBGR888toARGB8888", 142, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-argb8.c", "height >= 0", "height (%d) is negative", a6, a7, a8, v12);
    v19 = *(_DWORD *)(a1 + 76);
    v20 = *(_QWORD *)(a1 + 88) + v19 * (uint64_t)(a3 + v18 * v8) + 3 * (v17 + v40);
    v21 = *(_QWORD *)(a1 + 40) + (*(int *)(a1 + 16) + (uint64_t)v18) * v10 + 4 * (*(_DWORD *)(a1 + 12) + v17);
    v22 = v19 * (uint64_t)v8;
    v23 = v12 - 1;
    v24 = v20 + (int)v23 * v22;
    v25 = v21 + v23 * v10;
    v26 = (char *)(v10 < 0 ? v25 : v21);
    v27 = v10 >= 0 ? v10 : -v10;
    v28 = v10 >= 0 ? v22 : -(int)v22;
    v29 = (char *)(v10 < 0 ? v24 : v20);
    if ((v28 & 0x80000000) != 0)
    {
      v30 = (char *)malloc_type_malloc((int)v27 * v12, 0x5432FF8EuLL);
      v31 = v30;
      if (v12 >= 1)
      {
        for (i = 0; i != v12; ++i)
        {
          if (v11 >= 1)
          {
            v33 = &v30[i * v27];
            v34 = v11;
            v35 = &v29[i * (int)v28];
            do
            {
              v36 = *v35;
              v37 = v35[1];
              v38 = v35[2];
              *v33 = -1;
              v33[1] = v38;
              v33[2] = v37;
              v33[3] = v36;
              v35 += 3;
              v33 += 4;
              --v34;
            }
            while (v34);
          }
        }
      }
      CGBlt_copyBytes(4 * v11, v12, v30, v26, v27, v27);
      free(v31);
      v8 = a4;
      if (!v16)
        return;
    }
    else
    {
      v48.data = v29;
      v48.height = v12;
      v48.width = v11;
      v48.rowBytes = v28;
      dest.data = v26;
      dest.height = v12;
      dest.width = v11;
      dest.rowBytes = v27;
      *(_DWORD *)permuteMap = 16909056;
      vImageConvert_RGB888toARGB8888(&v48, 0, 0xFFu, &dest, 0, 0);
      vImagePermuteChannels_ARGB8888(&dest, &dest, permuteMap, 0);
      if (!v16)
        return;
    }
LABEL_28:
    if (!shape_enum_clip_next((uint64_t)v16, &v45, &v44, &v43, &v42))
      break;
    v18 = v44;
    v17 = v45;
    v12 = v42;
    v11 = v43;
    if (v43 < 0)
      goto LABEL_4;
  }
  free(v16);
}

unint64_t rgba32_image_mark_RGB24(unint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  char v27;
  unsigned __int8 *v28;
  int v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int v32;
  unsigned __int8 *v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned __int8 *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  char v47;
  unsigned __int8 *v48;
  int v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  int v52;
  unsigned __int8 *v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned __int8 *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t *v90;
  unint64_t v91;

  v7 = *((unsigned __int8 *)a2 + 8);
  v86 = *a2;
  v8 = (unsigned int *)*((_QWORD *)a2 + 2);
  v85 = *((_QWORD *)a2 + 3) - a5;
  v10 = *((_QWORD *)a2 + 15);
  v9 = *((_QWORD *)a2 + 16);
  v11 = *((_QWORD *)a2 + 7);
  v82 = *((_QWORD *)a2 + 9);
  v12 = *((_QWORD *)a2 + 5) + v82 * a4;
  v13 = *(unsigned __int8 **)(result + 32);
  v14 = &v13[(*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
           + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3)];
  v91 = result;
  v83 = v11;
  v84 = v10;
  if (*(_QWORD *)(result + 176))
  {
    v80 = *((_QWORD *)a2 + 11);
    v78 = ~(-1 << v11);
    v79 = *((_QWORD *)a2 + 13);
    v77 = v11 - 4;
    v15 = v14 - 3;
    v75 = a5;
    v76 = -v10;
    v74 = v9 + 16 * a3 + 8;
    while (1)
    {
      v89 = a6;
      if (((v79 - v12) | (v12 - v80)) < 0)
      {
        v18 = 0;
        v17 = 0;
      }
      else
      {
        v16 = ((v12 & (unint64_t)v78) >> v77) & 0xF;
        v17 = (unint64_t)(v16 - 7) >= 9 ? v76 : v10;
        v18 = weights_19497[v16] & 0xF;
      }
      v19 = *(_QWORD *)(v91 + 32) + (v12 >> v11) * v10;
      v87 = v12;
      if (v86 != 1)
        break;
      if (a5 >= 1)
      {
        v20 = (uint64_t *)v74;
        v21 = v75;
        while (1)
        {
          v22 = *(v20 - 1);
          v23 = *v20;
          v24 = v19 + v22;
          if ((unint64_t)v15 >= v19 + v22)
            v25 = (unsigned __int8 *)(v19 + v22);
          else
            v25 = v15;
          if (v25 < v13)
            v25 = v13;
          v26 = (*v25 << 24) | (v25[1] << 16) | (v25[2] << 8);
          v27 = v23 & 0xF;
          if ((v23 & 0xF) != 0)
            break;
          if (v18)
          {
            v38 = (unsigned __int8 *)(v24 + v17);
            if ((unint64_t)v15 < v24 + v17)
              v38 = v15;
            if (v38 < v13)
              v38 = v13;
            v39 = BLEND8_19499[v18];
            v36 = v26 - ((v39 & v26) >> v18);
            v37 = (((*v38 << 24) | (v38[1] << 16) | (v38[2] << 8)) & v39) >> v18;
            goto LABEL_40;
          }
LABEL_41:
          result = v26 | 0xFFu;
          if (v7 != 255)
            result = PDM_19476(result, v7);
          v20 += 2;
          *v8++ = result;
          if (!--v21)
            goto LABEL_83;
        }
        v28 = (unsigned __int8 *)(v24 + (v23 >> 4));
        if (v15 < v28)
          v28 = v15;
        if (v28 < v13)
          v28 = v13;
        v29 = (*v28 << 24) | (v28[1] << 16) | (v28[2] << 8);
        if (v18)
        {
          v30 = (unsigned __int8 *)(v24 + v17);
          if (v15 >= v30)
            v31 = v30;
          else
            v31 = v15;
          if (v31 < v13)
            v31 = v13;
          v32 = (*v31 << 24) | (v31[1] << 16) | (v31[2] << 8);
          v33 = &v30[v23 >> 4];
          if (v15 < v33)
            v33 = v15;
          if (v33 < v13)
            v33 = v13;
          v34 = BLEND8_19499[v18];
          v26 = v26 - ((v34 & v26) >> v18) + ((v34 & v32) >> v18);
          v29 = v29 - ((v34 & v29) >> v18) + ((((*v33 << 24) | (v33[1] << 16) | (v33[2] << 8)) & v34) >> v18);
        }
        v35 = BLEND8_19499[*v20 & 0xF];
        v36 = v26 - ((v35 & v26) >> v27);
        v37 = (v35 & v29) >> v27;
LABEL_40:
        v26 = v36 + v37;
        goto LABEL_41;
      }
LABEL_83:
      v10 = v84;
      v8 += v85;
      LOBYTE(v11) = v83;
      v12 = v87 + v82;
      --a6;
      if (v89 == 1)
        return result;
    }
    if (a5 < 1)
      goto LABEL_83;
    v41 = (uint64_t *)v74;
    v40 = v75;
    while (1)
    {
      v42 = *(v41 - 1);
      v43 = *v41;
      v44 = v19 + v42;
      if ((unint64_t)v15 >= v19 + v42)
        v45 = (unsigned __int8 *)(v19 + v42);
      else
        v45 = v15;
      if (v45 < v13)
        v45 = v13;
      v46 = (*v45 << 24) | (v45[1] << 16) | (v45[2] << 8);
      v47 = v43 & 0xF;
      if ((v43 & 0xF) != 0)
        break;
      if (v18)
      {
        v58 = (unsigned __int8 *)(v44 + v17);
        if ((unint64_t)v15 < v44 + v17)
          v58 = v15;
        if (v58 < v13)
          v58 = v13;
        v59 = BLEND8_19499[v18];
        v56 = v46 - ((v59 & v46) >> v18);
        v57 = (((*v58 << 24) | (v58[1] << 16) | (v58[2] << 8)) & v59) >> v18;
        goto LABEL_75;
      }
LABEL_76:
      v60 = v46 | 0xFF;
      if (v7 != 255)
      {
        result = PDM_19476(v46 | 0xFFu, v7);
        v60 = result;
      }
      if ((_BYTE)v60)
      {
        if (v60 == 255)
          *v8 = v60;
        else
          result = (unint64_t)DplusDM_19478(v8, v60, *v8, ~(_BYTE)v60);
      }
      v41 += 2;
      ++v8;
      if (!--v40)
        goto LABEL_83;
    }
    v48 = (unsigned __int8 *)(v44 + (v43 >> 4));
    if (v15 < v48)
      v48 = v15;
    if (v48 < v13)
      v48 = v13;
    v49 = (*v48 << 24) | (v48[1] << 16) | (v48[2] << 8);
    if (v18)
    {
      v50 = (unsigned __int8 *)(v44 + v17);
      if (v15 >= v50)
        v51 = v50;
      else
        v51 = v15;
      if (v51 < v13)
        v51 = v13;
      v52 = (*v51 << 24) | (v51[1] << 16) | (v51[2] << 8);
      v53 = &v50[v43 >> 4];
      if (v15 < v53)
        v53 = v15;
      if (v53 < v13)
        v53 = v13;
      v54 = BLEND8_19499[v18];
      v46 = v46 - ((v54 & v46) >> v18) + ((v54 & v52) >> v18);
      v49 = v49 - ((v54 & v49) >> v18) + ((((*v53 << 24) | (v53[1] << 16) | (v53[2] << 8)) & v54) >> v18);
    }
    v55 = BLEND8_19499[*v41 & 0xF];
    v56 = v46 - ((v55 & v46) >> v47);
    v57 = (v55 & v49) >> v47;
LABEL_75:
    v46 = v56 + v57;
    goto LABEL_76;
  }
  v90 = (uint64_t *)(v9 + 16 * a3);
  v61 = v14 - 3;
  v88 = a5;
  do
  {
    v62 = *(unsigned __int8 **)(v91 + 32);
    v63 = &v62[(v12 >> v11) * v10];
    if (v86 == 1)
    {
      if (a5 >= 1)
      {
        v64 = v90;
        v65 = v88;
        do
        {
          v66 = *v64;
          v64 += 2;
          v67 = &v63[v66];
          if (v61 < &v63[v66])
            v67 = v61;
          if (v67 < v62)
            v67 = v62;
          result = (v67[1] << 16) | (*v67 << 24) | (v67[2] << 8) | 0xFFu;
          if (v7 != 255)
            result = PDM_19476(result, v7);
          *v8++ = result;
          --v65;
        }
        while (v65);
      }
    }
    else
    {
      v68 = v90;
      v69 = v88;
      if (a5 >= 1)
      {
        do
        {
          v70 = *v68;
          v68 += 2;
          v71 = &v63[v70];
          if (v61 < &v63[v70])
            v71 = v61;
          if ((unint64_t)v71 < *(_QWORD *)(v91 + 32))
            v71 = *(unsigned __int8 **)(v91 + 32);
          v72 = (v71[1] << 16) | (*v71 << 24) | (v71[2] << 8);
          v73 = v72 | 0xFF;
          if (v7 != 255)
          {
            result = PDM_19476(v72 | 0xFFu, v7);
            v73 = result;
          }
          if ((_BYTE)v73)
          {
            if (v73 == 255)
              *v8 = v73;
            else
              result = (unint64_t)DplusDM_19478(v8, v73, *v8, ~(_BYTE)v73);
          }
          ++v8;
          --v69;
        }
        while (v69);
      }
    }
    v10 = v84;
    v8 += v85;
    LOBYTE(v11) = v83;
    v12 += v82;
    --a6;
  }
  while (a6);
  return result;
}

void rgba32_mark_image_RGBX32(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v13;
  int v14;
  int v15;
  int *v16;
  int v17;
  void *v18;
  void *v19;
  int v20;
  int v21;
  int v22;
  char *v23;
  char *v24;
  int v25;
  unsigned int v26;
  int v27;
  uint64_t i;

  v11 = a2;
  v13 = *(int *)(a1 + 28);
  v14 = *(_DWORD *)(a1 + 4);
  v15 = *(_DWORD *)(a1 + 8);
  v26 = v15;
  v27 = v14;
  v16 = *(int **)(a1 + 136);
  if (v16)
  {
    v17 = *(_DWORD *)(a1 + 104);
    LODWORD(i) = *(_DWORD *)(a1 + 108);
    HIDWORD(i) = v17;
    shape_enum_clip_alloc(a1, a2, v16, 1, 1, 1, v17, i, v14, v15);
    v19 = v18;
    if (v18)
      goto LABEL_9;
  }
  v20 = 0;
  v21 = 0;
  v19 = 0;
  for (i = 0; ; v20 = HIDWORD(i))
  {
    v22 = *(_DWORD *)(a1 + 76);
    v23 = (char *)(*(_QWORD *)(a1 + 88) + v22 * (uint64_t)(a4 + v21 * a5) + 4 * (v20 + a3));
    v24 = (char *)(*(_QWORD *)(a1 + 40) + (*(int *)(a1 + 16) + (uint64_t)v21) * v13 + 4 * (*(_DWORD *)(a1 + 12) + v20));
    v25 = v22 * a5;
    if (v11 == 2)
    {
      CGSBlend8888toARGB8888(v23, v25, v24, v13, v27, v26, 0xE4u, *(_QWORD *)(a1 + 48) != 0);
      if (!v19)
        return;
    }
    else if (*(_QWORD *)(a1 + 96))
    {
      CGSConvertBGRA8888toARGB8888(v23, v25, v24, v13, v27, v26, a7, a8);
      if (!v19)
        return;
    }
    else
    {
      CGSConvertBGRX8888toARGB8888(v23, v25, v24, v13, v27, v26, a7, a8);
      if (!v19)
        return;
    }
LABEL_9:
    if (!shape_enum_clip_next((uint64_t)v19, (int *)&i + 1, &i, &v27, &v26))
      break;
    v21 = i;
  }
  free(v19);
}

unint64_t rgba32_image_mark_RGB32(unint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  unsigned int *v8;
  int v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unsigned int *v16;
  uint64_t v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  char v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  int v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  char v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int *v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int *v66;
  char *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  unsigned int *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  unsigned int *v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;

  v6 = *((unsigned __int8 *)a2 + 8);
  v7 = a2[1];
  v89 = *a2;
  v8 = *(unsigned int **)(result + 32);
  if (*(_QWORD *)(result + 40))
    v9 = 0;
  else
    v9 = 255;
  v10 = (unsigned int *)*((_QWORD *)a2 + 2);
  v88 = *((_QWORD *)a2 + 3) - a5;
  v12 = *((_QWORD *)a2 + 15);
  v11 = *((_QWORD *)a2 + 16);
  v13 = *((_QWORD *)a2 + 7);
  v85 = *((_QWORD *)a2 + 9);
  v14 = *((_QWORD *)a2 + 5) + v85 * a4;
  v15 = (char *)v8
      + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
      + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3);
  v95 = result;
  v90 = a5;
  v86 = v13;
  v87 = v12;
  if (*(_QWORD *)(result + 176))
  {
    v82 = ~(-1 << v13);
    v83 = *((_QWORD *)a2 + 13);
    v84 = *((_QWORD *)a2 + 11);
    v81 = v13 - 4;
    v80 = -v12;
    v16 = (unsigned int *)(v15 - 4);
    v78 = v11 + 16 * a3 + 8;
    v79 = a5;
    while (1)
    {
      if (((v83 - v14) | (v14 - v84)) < 0)
      {
        v21 = 0;
        v96 = 0;
      }
      else
      {
        v17 = ((v14 & (unint64_t)v82) >> v81) & 0xF;
        v18 = weights_19497[v17];
        v19 = (unint64_t)(v17 - 7) >= 9;
        v20 = v80;
        if (!v19)
          v20 = v12;
        v96 = v20;
        v21 = v18 & 0xF;
      }
      v22 = *(_QWORD *)(v95 + 32) + (v14 >> v13) * v12;
      v93 = a6;
      v91 = v14;
      if (v89 != 1)
        break;
      if (a5 >= 1)
      {
        v24 = (uint64_t *)v78;
        v23 = v79;
        while (1)
        {
          v25 = *(v24 - 1);
          v26 = *v24;
          v27 = v22 + v25;
          if ((unint64_t)v16 >= v22 + v25)
            v28 = (unsigned int *)(v22 + v25);
          else
            v28 = v16;
          if (v28 < v8)
            v28 = v8;
          v29 = bswap32(*v28);
          v30 = v26 & 0xF;
          if ((v26 & 0xF) != 0)
            break;
          if (v21)
          {
            v41 = (unsigned int *)(v27 + v96);
            if ((unint64_t)v16 < v27 + v96)
              v41 = v16;
            if (v41 < v8)
              v41 = v8;
            v42 = BLEND8_19499[v21];
            v39 = v29 - ((v42 & v29) >> v21);
            v40 = (bswap32(*v41) & v42) >> v21;
            goto LABEL_42;
          }
LABEL_43:
          result = __ROL4__(v29, v7) | v9;
          if (v6 != 255)
            result = PDM_19476(result, v6);
          v24 += 2;
          *v10++ = result;
          if (!--v23)
            goto LABEL_85;
        }
        v31 = (unsigned int *)(v27 + (v26 >> 4));
        if (v16 < v31)
          v31 = v16;
        if (v31 < v8)
          v31 = v8;
        v32 = bswap32(*v31);
        if (v21)
        {
          v33 = (unsigned int *)(v27 + v96);
          if (v16 >= v33)
            v34 = v33;
          else
            v34 = v16;
          if (v34 < v8)
            v34 = v8;
          v35 = bswap32(*v34);
          v36 = (unsigned int *)((char *)v33 + (v26 >> 4));
          if (v16 < v36)
            v36 = v16;
          if (v36 < v8)
            v36 = v8;
          v37 = BLEND8_19499[v21];
          v29 = v29 - ((v37 & v29) >> v21) + ((v37 & v35) >> v21);
          v32 = v32 - ((v37 & v32) >> v21) + ((bswap32(*v36) & v37) >> v21);
        }
        v38 = BLEND8_19499[*v24 & 0xF];
        v39 = v29 - ((v38 & v29) >> v30);
        v40 = (v38 & v32) >> v30;
LABEL_42:
        v29 = v39 + v40;
        goto LABEL_43;
      }
LABEL_85:
      v12 = v87;
      v10 += v88;
      LOBYTE(v13) = v86;
      v14 = v91 + v85;
      a6 = v93 - 1;
      a5 = v90;
      if (v93 == 1)
        return result;
    }
    if (a5 < 1)
      goto LABEL_85;
    v43 = (uint64_t *)v78;
    v44 = v79;
    while (1)
    {
      v45 = *(v43 - 1);
      v46 = *v43;
      v47 = v22 + v45;
      if ((unint64_t)v16 >= v22 + v45)
        v48 = (unsigned int *)(v22 + v45);
      else
        v48 = v16;
      if (v48 < v8)
        v48 = v8;
      v49 = bswap32(*v48);
      v50 = v46 & 0xF;
      if ((v46 & 0xF) != 0)
        break;
      if (v21)
      {
        v61 = (unsigned int *)(v47 + v96);
        if ((unint64_t)v16 < v47 + v96)
          v61 = v16;
        if (v61 < v8)
          v61 = v8;
        v62 = BLEND8_19499[v21];
        v59 = v49 - ((v62 & v49) >> v21);
        v60 = (bswap32(*v61) & v62) >> v21;
        goto LABEL_77;
      }
LABEL_78:
      v63 = __ROL4__(v49, v7);
      v64 = v63 | v9;
      if (v6 != 255)
      {
        result = PDM_19476(v63 | v9, v6);
        v64 = result;
      }
      if ((_BYTE)v64)
      {
        if (v64 == 255)
          *v10 = v64;
        else
          result = (unint64_t)DplusDM_19478(v10, v64, *v10, ~(_BYTE)v64);
      }
      v43 += 2;
      ++v10;
      if (!--v44)
        goto LABEL_85;
    }
    v51 = (unsigned int *)(v47 + (v46 >> 4));
    if (v16 < v51)
      v51 = v16;
    if (v51 < v8)
      v51 = v8;
    v52 = bswap32(*v51);
    if (v21)
    {
      v53 = (unsigned int *)(v47 + v96);
      if (v16 >= v53)
        v54 = v53;
      else
        v54 = v16;
      if (v54 < v8)
        v54 = v8;
      v55 = bswap32(*v54);
      v56 = (unsigned int *)((char *)v53 + (v46 >> 4));
      if (v16 < v56)
        v56 = v16;
      if (v56 < v8)
        v56 = v8;
      v57 = BLEND8_19499[v21];
      v49 = v49 - ((v57 & v49) >> v21) + ((v57 & v55) >> v21);
      v52 = v52 - ((v57 & v52) >> v21) + ((bswap32(*v56) & v57) >> v21);
    }
    v58 = BLEND8_19499[*v43 & 0xF];
    v59 = v49 - ((v58 & v49) >> v50);
    v60 = (v58 & v52) >> v50;
LABEL_77:
    v49 = v59 + v60;
    goto LABEL_78;
  }
  v65 = (unsigned int *)(v15 - 4);
  v97 = a5;
  v98 = (uint64_t *)(v11 + 16 * a3);
  do
  {
    v66 = *(unsigned int **)(v95 + 32);
    v67 = (char *)v66 + (v14 >> v13) * v12;
    v94 = a6;
    v92 = v14;
    if (v89 == 1)
    {
      if (a5 >= 1)
      {
        v68 = v97;
        v69 = v98;
        do
        {
          v70 = *v69;
          v69 += 2;
          v71 = (unsigned int *)&v67[v70];
          if (v65 < (unsigned int *)&v67[v70])
            v71 = v65;
          if (v71 < v66)
            v71 = v66;
          result = __ROL4__(bswap32(*v71), v7) | v9;
          if (v6 != 255)
            result = PDM_19476(result, v6);
          *v10++ = result;
          --v68;
        }
        while (v68);
      }
    }
    else
    {
      v72 = v97;
      v73 = v98;
      if (a5 >= 1)
      {
        do
        {
          v74 = *v73;
          v73 += 2;
          v75 = (unsigned int *)&v67[v74];
          if (v65 < (unsigned int *)&v67[v74])
            v75 = v65;
          if ((unint64_t)v75 < *(_QWORD *)(v95 + 32))
            v75 = *(unsigned int **)(v95 + 32);
          v76 = __ROL4__(bswap32(*v75), v7);
          v77 = v76 | v9;
          if (v6 != 255)
          {
            result = PDM_19476(v76 | v9, v6);
            v77 = result;
          }
          if ((_BYTE)v77)
          {
            if (v77 == 255)
              *v10 = v77;
            else
              result = (unint64_t)DplusDM_19478(v10, v77, *v10, ~(_BYTE)v77);
          }
          ++v10;
          --v72;
        }
        while (v72);
      }
    }
    v12 = v87;
    v10 += v88;
    LOBYTE(v13) = v86;
    v14 = v92 + v85;
    a6 = v94 - 1;
    a5 = v90;
  }
  while (v94 != 1);
  return result;
}

void rgba32_mark_image_rgbx32(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v13;
  int v14;
  int v15;
  int *v16;
  int v17;
  void *v18;
  void *v19;
  int v20;
  int v21;
  int v22;
  char *v23;
  char *v24;
  unsigned int v25;
  int v26;
  uint64_t i;

  v11 = a2;
  v13 = *(int *)(a1 + 28);
  v14 = *(_DWORD *)(a1 + 4);
  v15 = *(_DWORD *)(a1 + 8);
  v25 = v15;
  v26 = v14;
  v16 = *(int **)(a1 + 136);
  if (v16)
  {
    v17 = *(_DWORD *)(a1 + 104);
    LODWORD(i) = *(_DWORD *)(a1 + 108);
    HIDWORD(i) = v17;
    shape_enum_clip_alloc(a1, a2, v16, 1, 1, 1, v17, i, v14, v15);
    v19 = v18;
    if (v18)
      goto LABEL_9;
  }
  v20 = 0;
  v21 = 0;
  v19 = 0;
  for (i = 0; ; v20 = HIDWORD(i))
  {
    v22 = *(_DWORD *)(a1 + 76);
    v23 = (char *)(*(_QWORD *)(a1 + 88) + v22 * (uint64_t)(a4 + v21 * a5) + 4 * (v20 + a3));
    v24 = (char *)(*(_QWORD *)(a1 + 40) + (*(int *)(a1 + 16) + (uint64_t)v21) * v13 + 4 * (*(_DWORD *)(a1 + 12) + v20));
    if (v11 == 2)
    {
      CGSBlend8888toARGB8888(v23, v22 * a5, v24, v13, v26, v25, 0x1Bu, *(_QWORD *)(a1 + 48) != 0);
      if (!v19)
        return;
    }
    else if (*(_QWORD *)(a1 + 96))
    {
      CGBlt_copyBytes(4 * v26, v25, v23, v24, v22 * a5, v13);
      if (!v19)
        return;
    }
    else
    {
      CGSConvertXRGB8888toARGB8888(v23, v22 * a5, v24, v13, v26, v25, a7, a8);
      if (!v19)
        return;
    }
LABEL_9:
    if (!shape_enum_clip_next((uint64_t)v19, (int *)&i + 1, &i, &v26, &v25))
      break;
    v21 = i;
  }
  free(v19);
}

unint64_t rgba32_image_mark_rgba32(unint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v6;
  unsigned int *v7;
  int v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned int *v15;
  uint64_t v16;
  char v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  char v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  char v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int *v60;
  int v61;
  unsigned int v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t *v96;

  v6 = *((unsigned __int8 *)a2 + 8);
  v89 = *a2;
  v7 = *(unsigned int **)(result + 32);
  if (*(_QWORD *)(result + 40))
    v8 = 0;
  else
    v8 = 255;
  v9 = (unsigned int *)*((_QWORD *)a2 + 2);
  v88 = *((_QWORD *)a2 + 3) - a5;
  v11 = *((_QWORD *)a2 + 15);
  v10 = *((_QWORD *)a2 + 16);
  v12 = *((_QWORD *)a2 + 7);
  v85 = *((_QWORD *)a2 + 9);
  v13 = *((_QWORD *)a2 + 5) + v85 * a4;
  v14 = (char *)v7
      + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
      + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3);
  v94 = result;
  v90 = a5;
  v86 = v12;
  v87 = v11;
  if (*(_QWORD *)(result + 176))
  {
    v84 = *((_QWORD *)a2 + 11);
    v82 = ~(-1 << v12);
    v83 = *((_QWORD *)a2 + 13);
    v81 = v12 - 4;
    v15 = (unsigned int *)(v14 - 4);
    v79 = a5;
    v80 = -v11;
    v78 = v10 + 16 * a3 + 8;
    while (1)
    {
      if (((v83 - v13) | (v13 - v84)) < 0)
      {
        v20 = 0;
        v95 = 0;
      }
      else
      {
        v16 = ((v13 & (unint64_t)v82) >> v81) & 0xF;
        v17 = weights_19497[v16];
        v18 = (unint64_t)(v16 - 7) >= 9;
        v19 = v80;
        if (!v18)
          v19 = v11;
        v95 = v19;
        v20 = v17 & 0xF;
      }
      v21 = *(_QWORD *)(v94 + 32) + (v13 >> v12) * v11;
      v92 = a6;
      v91 = v13;
      if (v89 != 1)
        break;
      if (a5 >= 1)
      {
        v23 = (uint64_t *)v78;
        v22 = v79;
        while (1)
        {
          v24 = *(v23 - 1);
          v25 = *v23;
          v26 = v21 + v24;
          if ((unint64_t)v15 >= v21 + v24)
            v27 = (unsigned int *)(v21 + v24);
          else
            v27 = v15;
          if (v27 < v7)
            v27 = v7;
          v28 = *v27;
          v29 = v25 & 0xF;
          if ((v25 & 0xF) != 0)
            break;
          if (v20)
          {
            v40 = (unsigned int *)(v26 + v95);
            if ((unint64_t)v15 < v26 + v95)
              v40 = v15;
            if (v40 < v7)
              v40 = v7;
            v41 = BLEND8_19499[v20];
            v38 = v28 - ((v41 & v28) >> v20);
            v39 = (v41 & *v40) >> v20;
            goto LABEL_42;
          }
LABEL_43:
          result = v28 | v8;
          if (v6 != 255)
            result = PDM_19476(result, v6);
          v23 += 2;
          *v9++ = result;
          if (!--v22)
            goto LABEL_85;
        }
        v30 = (unsigned int *)(v26 + (v25 >> 4));
        if (v15 < v30)
          v30 = v15;
        if (v30 < v7)
          v30 = v7;
        v31 = *v30;
        if (v20)
        {
          v32 = (unsigned int *)(v26 + v95);
          if (v15 >= v32)
            v33 = v32;
          else
            v33 = v15;
          if (v33 < v7)
            v33 = v7;
          v34 = *v33;
          v35 = (unsigned int *)((char *)v32 + (v25 >> 4));
          if (v15 < v35)
            v35 = v15;
          if (v35 < v7)
            v35 = v7;
          v36 = BLEND8_19499[v20];
          v28 = v28 - ((v36 & v28) >> v20) + ((v36 & v34) >> v20);
          v31 = v31 - ((v36 & v31) >> v20) + ((v36 & *v35) >> v20);
        }
        v37 = BLEND8_19499[*v23 & 0xF];
        v38 = v28 - ((v37 & v28) >> v29);
        v39 = (v37 & v31) >> v29;
LABEL_42:
        v28 = v38 + v39;
        goto LABEL_43;
      }
LABEL_85:
      v11 = v87;
      v9 += v88;
      LOBYTE(v12) = v86;
      v13 = v91 + v85;
      a6 = v92 - 1;
      a5 = v90;
      if (v92 == 1)
        return result;
    }
    if (a5 < 1)
      goto LABEL_85;
    v43 = (uint64_t *)v78;
    v42 = v79;
    while (1)
    {
      v44 = *(v43 - 1);
      v45 = *v43;
      v46 = v21 + v44;
      if ((unint64_t)v15 >= v21 + v44)
        v47 = (unsigned int *)(v21 + v44);
      else
        v47 = v15;
      if (v47 < v7)
        v47 = v7;
      v48 = *v47;
      v49 = v45 & 0xF;
      if ((v45 & 0xF) != 0)
        break;
      if (v20)
      {
        v60 = (unsigned int *)(v46 + v95);
        if ((unint64_t)v15 < v46 + v95)
          v60 = v15;
        if (v60 < v7)
          v60 = v7;
        v61 = BLEND8_19499[v20];
        v58 = v48 - ((v61 & v48) >> v20);
        v59 = (v61 & *v60) >> v20;
        goto LABEL_77;
      }
LABEL_78:
      v62 = v48 | v8;
      if (v6 != 255)
      {
        result = PDM_19476(v48 | v8, v6);
        v62 = result;
      }
      if ((_BYTE)v62)
      {
        if (v62 == 255)
          *v9 = v62;
        else
          result = (unint64_t)DplusDM_19478(v9, v62, *v9, ~(_BYTE)v62);
      }
      v43 += 2;
      ++v9;
      if (!--v42)
        goto LABEL_85;
    }
    v50 = (unsigned int *)(v46 + (v45 >> 4));
    if (v15 < v50)
      v50 = v15;
    if (v50 < v7)
      v50 = v7;
    v51 = *v50;
    if (v20)
    {
      v52 = (unsigned int *)(v46 + v95);
      if (v15 >= v52)
        v53 = v52;
      else
        v53 = v15;
      if (v53 < v7)
        v53 = v7;
      v54 = *v53;
      v55 = (unsigned int *)((char *)v52 + (v45 >> 4));
      if (v15 < v55)
        v55 = v15;
      if (v55 < v7)
        v55 = v7;
      v56 = BLEND8_19499[v20];
      v48 = v48 - ((v56 & v48) >> v20) + ((v56 & v54) >> v20);
      v51 = v51 - ((v56 & v51) >> v20) + ((v56 & *v55) >> v20);
    }
    v57 = BLEND8_19499[*v43 & 0xF];
    v58 = v48 - ((v57 & v48) >> v49);
    v59 = (v57 & v51) >> v49;
LABEL_77:
    v48 = v58 + v59;
    goto LABEL_78;
  }
  v96 = (uint64_t *)(v10 + 16 * a3);
  v63 = v14 - 4;
  v93 = a5;
  do
  {
    v64 = *(char **)(v94 + 32);
    v65 = &v64[(v13 >> v12) * v11];
    v66 = v13;
    v67 = a6;
    if (v89 == 1)
    {
      if (a5 >= 1)
      {
        v68 = v96;
        v69 = v93;
        do
        {
          v70 = *v68;
          v68 += 2;
          v71 = &v65[v70];
          if (v63 < &v65[v70])
            v71 = v63;
          if (v71 < v64)
            v71 = v64;
          result = *(_DWORD *)v71 | v8;
          if (v6 != 255)
            result = PDM_19476(result, v6);
          *v9++ = result;
          --v69;
        }
        while (v69);
      }
    }
    else
    {
      v72 = v96;
      v73 = v93;
      if (a5 >= 1)
      {
        do
        {
          v74 = *v72;
          v72 += 2;
          v75 = &v65[v74];
          if (v63 < &v65[v74])
            v75 = v63;
          if ((unint64_t)v75 < *(_QWORD *)(v94 + 32))
            v75 = *(char **)(v94 + 32);
          v76 = *(_DWORD *)v75;
          v77 = v76 | v8;
          if (v6 != 255)
          {
            result = PDM_19476(v76 | v8, v6);
            v77 = result;
          }
          if ((_BYTE)v77)
          {
            if (v77 == 255)
              *v9 = v77;
            else
              result = (unint64_t)DplusDM_19478(v9, v77, *v9, ~(_BYTE)v77);
          }
          ++v9;
          --v73;
        }
        while (v73);
      }
    }
    v11 = v87;
    v9 += v88;
    LOBYTE(v12) = v86;
    v13 = v66 + v85;
    a6 = v67 - 1;
    a5 = v90;
  }
  while (v67 != 1);
  return result;
}

void rgba32_mark_image_XRGB32(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v13;
  int v14;
  int v15;
  int *v16;
  int v17;
  void *v18;
  void *v19;
  int v20;
  int v21;
  int v22;
  char *v23;
  char *v24;
  int v25;
  unsigned int v26;
  int v27;
  uint64_t i;

  v11 = a2;
  v13 = *(int *)(a1 + 28);
  v14 = *(_DWORD *)(a1 + 4);
  v15 = *(_DWORD *)(a1 + 8);
  v26 = v15;
  v27 = v14;
  v16 = *(int **)(a1 + 136);
  if (v16)
  {
    v17 = *(_DWORD *)(a1 + 104);
    LODWORD(i) = *(_DWORD *)(a1 + 108);
    HIDWORD(i) = v17;
    shape_enum_clip_alloc(a1, a2, v16, 1, 1, 1, v17, i, v14, v15);
    v19 = v18;
    if (v18)
      goto LABEL_9;
  }
  v20 = 0;
  v21 = 0;
  v19 = 0;
  for (i = 0; ; v20 = HIDWORD(i))
  {
    v22 = *(_DWORD *)(a1 + 76);
    v23 = (char *)(*(_QWORD *)(a1 + 88) + v22 * (uint64_t)(a4 + v21 * a5) + 4 * (v20 + a3));
    v24 = (char *)(*(_QWORD *)(a1 + 40) + (*(int *)(a1 + 16) + (uint64_t)v21) * v13 + 4 * (*(_DWORD *)(a1 + 12) + v20));
    v25 = v22 * a5;
    if (v11 == 2)
    {
      CGSBlend8888toARGB8888(v23, v25, v24, v13, v27, v26, 0x39u, *(_QWORD *)(a1 + 48) != 0);
      if (!v19)
        return;
    }
    else if (*(_QWORD *)(a1 + 96))
    {
      CGSConvertABGR8888toARGB8888(v23, v25, v24, v13, v27, v26, a7, a8);
      if (!v19)
        return;
    }
    else
    {
      CGSConvertXBGR8888toARGB8888(v23, v25, v24, v13, v27, v26, a7, a8);
      if (!v19)
        return;
    }
LABEL_9:
    if (!shape_enum_clip_next((uint64_t)v19, (int *)&i + 1, &i, &v27, &v26))
      break;
    v21 = i;
  }
  free(v19);
}

void rgba32_mark_image_xrgb32(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v13;
  int v14;
  int v15;
  int *v16;
  int v17;
  void *v18;
  void *v19;
  int v20;
  int v21;
  int v22;
  char *v23;
  char *v24;
  int v25;
  unsigned int v26;
  int v27;
  uint64_t i;

  v11 = a2;
  v13 = *(int *)(a1 + 28);
  v14 = *(_DWORD *)(a1 + 4);
  v15 = *(_DWORD *)(a1 + 8);
  v26 = v15;
  v27 = v14;
  v16 = *(int **)(a1 + 136);
  if (v16)
  {
    v17 = *(_DWORD *)(a1 + 104);
    LODWORD(i) = *(_DWORD *)(a1 + 108);
    HIDWORD(i) = v17;
    shape_enum_clip_alloc(a1, a2, v16, 1, 1, 1, v17, i, v14, v15);
    v19 = v18;
    if (v18)
      goto LABEL_9;
  }
  v20 = 0;
  v21 = 0;
  v19 = 0;
  for (i = 0; ; v20 = HIDWORD(i))
  {
    v22 = *(_DWORD *)(a1 + 76);
    v23 = (char *)(*(_QWORD *)(a1 + 88) + v22 * (uint64_t)(a4 + v21 * a5) + 4 * (v20 + a3));
    v24 = (char *)(*(_QWORD *)(a1 + 40) + (*(int *)(a1 + 16) + (uint64_t)v21) * v13 + 4 * (*(_DWORD *)(a1 + 12) + v20));
    v25 = v22 * a5;
    if (v11 == 2)
    {
      CGSBlend8888toARGB8888(v23, v25, v24, v13, v27, v26, 0xC6u, *(_QWORD *)(a1 + 48) != 0);
      if (!v19)
        return;
    }
    else if (*(_QWORD *)(a1 + 96))
    {
      CGSConvertRGBA8888toARGB8888(v23, v25, v24, v13, v27, v26, a7, a8);
      if (!v19)
        return;
    }
    else
    {
      CGSConvertRGBX8888toARGB8888(v23, v25, v24, v13, v27, v26, a7, a8);
      if (!v19)
        return;
    }
LABEL_9:
    if (!shape_enum_clip_next((uint64_t)v19, (int *)&i + 1, &i, &v27, &v26))
      break;
    v21 = i;
  }
  free(v19);
}

unint64_t rgba32_image_mark_rgb32(unint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  unsigned int *v8;
  int v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unsigned int *v16;
  uint64_t v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  char v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  int v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  char v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int *v61;
  int v62;
  int v63;
  unsigned int v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  char *v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;

  v6 = *((unsigned __int8 *)a2 + 8);
  v7 = a2[1];
  v89 = *a2;
  v8 = *(unsigned int **)(result + 32);
  if (*(_QWORD *)(result + 40))
    v9 = 0;
  else
    v9 = 255;
  v10 = (unsigned int *)*((_QWORD *)a2 + 2);
  v88 = *((_QWORD *)a2 + 3) - a5;
  v12 = *((_QWORD *)a2 + 15);
  v11 = *((_QWORD *)a2 + 16);
  v13 = *((_QWORD *)a2 + 7);
  v85 = *((_QWORD *)a2 + 9);
  v14 = *((_QWORD *)a2 + 5) + v85 * a4;
  v15 = (char *)v8
      + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
      + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3);
  v95 = result;
  v90 = a5;
  v86 = v13;
  v87 = v12;
  if (*(_QWORD *)(result + 176))
  {
    v82 = ~(-1 << v13);
    v83 = *((_QWORD *)a2 + 13);
    v84 = *((_QWORD *)a2 + 11);
    v81 = v13 - 4;
    v80 = -v12;
    v16 = (unsigned int *)(v15 - 4);
    v78 = v11 + 16 * a3 + 8;
    v79 = a5;
    while (1)
    {
      if (((v83 - v14) | (v14 - v84)) < 0)
      {
        v21 = 0;
        v96 = 0;
      }
      else
      {
        v17 = ((v14 & (unint64_t)v82) >> v81) & 0xF;
        v18 = weights_19497[v17];
        v19 = (unint64_t)(v17 - 7) >= 9;
        v20 = v80;
        if (!v19)
          v20 = v12;
        v96 = v20;
        v21 = v18 & 0xF;
      }
      v22 = *(_QWORD *)(v95 + 32) + (v14 >> v13) * v12;
      v93 = a6;
      v91 = v14;
      if (v89 != 1)
        break;
      if (a5 >= 1)
      {
        v24 = (uint64_t *)v78;
        v23 = v79;
        while (1)
        {
          v25 = *(v24 - 1);
          v26 = *v24;
          v27 = v22 + v25;
          if ((unint64_t)v16 >= v22 + v25)
            v28 = (unsigned int *)(v22 + v25);
          else
            v28 = v16;
          if (v28 < v8)
            v28 = v8;
          v29 = *v28;
          v30 = v26 & 0xF;
          if ((v26 & 0xF) != 0)
            break;
          if (v21)
          {
            v41 = (unsigned int *)(v27 + v96);
            if ((unint64_t)v16 < v27 + v96)
              v41 = v16;
            if (v41 < v8)
              v41 = v8;
            v42 = BLEND8_19499[v21];
            v39 = v29 - ((v42 & v29) >> v21);
            v40 = (v42 & *v41) >> v21;
            goto LABEL_42;
          }
LABEL_43:
          result = __ROL4__(v29, v7) | v9;
          if (v6 != 255)
            result = PDM_19476(result, v6);
          v24 += 2;
          *v10++ = result;
          if (!--v23)
            goto LABEL_85;
        }
        v31 = (unsigned int *)(v27 + (v26 >> 4));
        if (v16 < v31)
          v31 = v16;
        if (v31 < v8)
          v31 = v8;
        v32 = *v31;
        if (v21)
        {
          v33 = (unsigned int *)(v27 + v96);
          if (v16 >= v33)
            v34 = v33;
          else
            v34 = v16;
          if (v34 < v8)
            v34 = v8;
          v35 = *v34;
          v36 = (unsigned int *)((char *)v33 + (v26 >> 4));
          if (v16 < v36)
            v36 = v16;
          if (v36 < v8)
            v36 = v8;
          v37 = BLEND8_19499[v21];
          v29 = v29 - ((v37 & v29) >> v21) + ((v37 & v35) >> v21);
          v32 = v32 - ((v37 & v32) >> v21) + ((v37 & *v36) >> v21);
        }
        v38 = BLEND8_19499[*v24 & 0xF];
        v39 = v29 - ((v38 & v29) >> v30);
        v40 = (v38 & v32) >> v30;
LABEL_42:
        v29 = v39 + v40;
        goto LABEL_43;
      }
LABEL_85:
      v12 = v87;
      v10 += v88;
      LOBYTE(v13) = v86;
      v14 = v91 + v85;
      a6 = v93 - 1;
      a5 = v90;
      if (v93 == 1)
        return result;
    }
    if (a5 < 1)
      goto LABEL_85;
    v43 = (uint64_t *)v78;
    v44 = v79;
    while (1)
    {
      v45 = *(v43 - 1);
      v46 = *v43;
      v47 = v22 + v45;
      if ((unint64_t)v16 >= v22 + v45)
        v48 = (unsigned int *)(v22 + v45);
      else
        v48 = v16;
      if (v48 < v8)
        v48 = v8;
      v49 = *v48;
      v50 = v46 & 0xF;
      if ((v46 & 0xF) != 0)
        break;
      if (v21)
      {
        v61 = (unsigned int *)(v47 + v96);
        if ((unint64_t)v16 < v47 + v96)
          v61 = v16;
        if (v61 < v8)
          v61 = v8;
        v62 = BLEND8_19499[v21];
        v59 = v49 - ((v62 & v49) >> v21);
        v60 = (v62 & *v61) >> v21;
        goto LABEL_77;
      }
LABEL_78:
      v63 = __ROL4__(v49, v7);
      v64 = v63 | v9;
      if (v6 != 255)
      {
        result = PDM_19476(v63 | v9, v6);
        v64 = result;
      }
      if ((_BYTE)v64)
      {
        if (v64 == 255)
          *v10 = v64;
        else
          result = (unint64_t)DplusDM_19478(v10, v64, *v10, ~(_BYTE)v64);
      }
      v43 += 2;
      ++v10;
      if (!--v44)
        goto LABEL_85;
    }
    v51 = (unsigned int *)(v47 + (v46 >> 4));
    if (v16 < v51)
      v51 = v16;
    if (v51 < v8)
      v51 = v8;
    v52 = *v51;
    if (v21)
    {
      v53 = (unsigned int *)(v47 + v96);
      if (v16 >= v53)
        v54 = v53;
      else
        v54 = v16;
      if (v54 < v8)
        v54 = v8;
      v55 = *v54;
      v56 = (unsigned int *)((char *)v53 + (v46 >> 4));
      if (v16 < v56)
        v56 = v16;
      if (v56 < v8)
        v56 = v8;
      v57 = BLEND8_19499[v21];
      v49 = v49 - ((v57 & v49) >> v21) + ((v57 & v55) >> v21);
      v52 = v52 - ((v57 & v52) >> v21) + ((v57 & *v56) >> v21);
    }
    v58 = BLEND8_19499[*v43 & 0xF];
    v59 = v49 - ((v58 & v49) >> v50);
    v60 = (v58 & v52) >> v50;
LABEL_77:
    v49 = v59 + v60;
    goto LABEL_78;
  }
  v65 = v15 - 4;
  v97 = a5;
  v98 = (uint64_t *)(v11 + 16 * a3);
  do
  {
    v66 = *(char **)(v95 + 32);
    v67 = &v66[(v14 >> v13) * v12];
    v94 = a6;
    v92 = v14;
    if (v89 == 1)
    {
      if (a5 >= 1)
      {
        v68 = v97;
        v69 = v98;
        do
        {
          v70 = *v69;
          v69 += 2;
          v71 = &v67[v70];
          if (v65 < &v67[v70])
            v71 = v65;
          if (v71 < v66)
            v71 = v66;
          result = __ROL4__(*(_DWORD *)v71, v7) | v9;
          if (v6 != 255)
            result = PDM_19476(result, v6);
          *v10++ = result;
          --v68;
        }
        while (v68);
      }
    }
    else
    {
      v72 = v97;
      v73 = v98;
      if (a5 >= 1)
      {
        do
        {
          v74 = *v73;
          v73 += 2;
          v75 = &v67[v74];
          if (v65 < &v67[v74])
            v75 = v65;
          if ((unint64_t)v75 < *(_QWORD *)(v95 + 32))
            v75 = *(char **)(v95 + 32);
          v76 = __ROL4__(*(_DWORD *)v75, v7);
          v77 = v76 | v9;
          if (v6 != 255)
          {
            result = PDM_19476(v76 | v9, v6);
            v77 = result;
          }
          if ((_BYTE)v77)
          {
            if (v77 == 255)
              *v10 = v77;
            else
              result = (unint64_t)DplusDM_19478(v10, v77, *v10, ~(_BYTE)v77);
          }
          ++v10;
          --v72;
        }
        while (v72);
      }
    }
    v12 = v87;
    v10 += v88;
    LOBYTE(v13) = v86;
    v14 = v92 + v85;
    a6 = v94 - 1;
    a5 = v90;
  }
  while (v94 != 1);
  return result;
}

void rgba32_mark_image_W16(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  void *v17;
  void *v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;

  v10 = a2;
  v12 = *(int *)(a1 + 28);
  v13 = *(_DWORD *)(a1 + 4);
  v14 = *(unsigned int *)(a1 + 8);
  v21 = *(_DWORD *)(a1 + 8);
  v22 = v13;
  v15 = *(int **)(a1 + 136);
  if (v15)
  {
    v16 = *(_DWORD *)(a1 + 104);
    LODWORD(v23) = *(_DWORD *)(a1 + 108);
    HIDWORD(v23) = v16;
    shape_enum_clip_alloc(a1, a2, v15, 1, 1, 1, v16, v23, v13, v14);
    v18 = v17;
    if (v17)
      goto LABEL_5;
  }
  v19 = 0;
  v20 = 0;
  v18 = 0;
  v23 = 0;
  while (1)
  {
    CGSConvertW16toARGB8888(*(_QWORD *)(a1 + 88) + *(int *)(a1 + 76) * (uint64_t)(a3 + v20 * a4) + 2 * (v19 + v10), *(_DWORD *)(a1 + 76) * a4, (char *)(*(_QWORD *)(a1 + 40) + (*(int *)(a1 + 16) + (uint64_t)v20) * v12 + 4 * (*(_DWORD *)(a1 + 12) + v19)), v12, v13, v14, a7, a8);
    if (!v18)
      break;
LABEL_5:
    if (!shape_enum_clip_next((uint64_t)v18, (int *)&v23 + 1, &v23, &v22, &v21))
    {
      free(v18);
      return;
    }
    v20 = v23;
    v19 = HIDWORD(v23);
    v14 = v21;
    v13 = v22;
  }
}

unint64_t rgba32_image_mark_W16(unint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  char *v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  unint64_t v29;
  unsigned __int16 *v30;
  unsigned __int16 *v31;
  unint64_t v32;
  unsigned __int16 *v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  unint64_t v37;
  unsigned __int16 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int16 *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 *v49;
  unint64_t v50;
  unsigned __int16 *v51;
  unsigned __int16 *v52;
  unint64_t v53;
  unsigned __int16 *v54;
  uint64_t v55;
  uint64_t v56;
  __int16 v57;
  unint64_t v58;
  unsigned __int16 *v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  char *v63;
  char *v64;
  char *v65;
  int v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  unsigned int v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  unsigned int v77;
  unint64_t v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t *v96;
  unint64_t v97;

  v6 = *((unsigned __int8 *)a2 + 8);
  v92 = *a2;
  v7 = (unsigned int *)*((_QWORD *)a2 + 2);
  v91 = *((_QWORD *)a2 + 3) - a5;
  v9 = *((_QWORD *)a2 + 15);
  v8 = *((_QWORD *)a2 + 16);
  v10 = *((_QWORD *)a2 + 7);
  v88 = *((_QWORD *)a2 + 9);
  v11 = *((_QWORD *)a2 + 5) + v88 * a4;
  v12 = *(unsigned __int16 **)(result + 32);
  v13 = (char *)v12
      + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
      + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3);
  v97 = result;
  v93 = a5;
  v89 = v10;
  v90 = v9;
  if (*(_QWORD *)(result + 176))
  {
    v87 = *((_QWORD *)a2 + 11);
    v85 = ~(-1 << v10);
    v86 = *((_QWORD *)a2 + 13);
    v84 = v10 - 4;
    v14 = (unsigned __int16 *)(v13 - 4);
    v82 = a5;
    v83 = -v9;
    v81 = v8 + 16 * a3 + 8;
    while (1)
    {
      if (((v86 - v11) | (v11 - v87)) < 0)
      {
        v17 = 0;
        v16 = 0;
      }
      else
      {
        v15 = ((v11 & (unint64_t)v85) >> v84) & 0xF;
        v16 = (unint64_t)(v15 - 7) >= 9 ? v83 : v9;
        v17 = weights_19497[v15] & 0xF;
      }
      v18 = *(_QWORD *)(v97 + 32) + (v11 >> v10) * v9;
      v95 = a6;
      if (v92 != 1)
        break;
      if (a5 >= 1)
      {
        v19 = (uint64_t *)v81;
        v20 = v82;
        while (1)
        {
          v21 = *(v19 - 1);
          v22 = *v19;
          v23 = v18 + v21;
          if ((unint64_t)v14 >= v18 + v21)
            v24 = (unsigned __int16 *)(v18 + v21);
          else
            v24 = v14;
          if (v24 < v12)
            v24 = v12;
          v25 = bswap32(*v24) >> 16;
          v26 = *v19 & 0xF;
          if ((v22 & 0xF) != 0)
            break;
          if (v17)
          {
            v38 = (unsigned __int16 *)(v23 + v16);
            if ((unint64_t)v14 < v23 + v16)
              v38 = v14;
            if (v38 < v12)
              v38 = v12;
            v39 = BLEND16_19498[v17];
            v36 = v25 - ((v39 & v25) >> v17);
            v37 = (v39 & (unint64_t)(bswap32(*v38) >> 16)) >> v17;
            goto LABEL_40;
          }
LABEL_41:
          result = (16843008 * BYTE1(v25)) | 0xFFu;
          if (v6 != 255)
            result = PDM_19476(result, v6);
          v19 += 2;
          *v7++ = result;
          if (!--v20)
            goto LABEL_83;
        }
        v27 = v22 >> 4;
        v28 = (unsigned __int16 *)(v23 + (v22 >> 4));
        if (v14 < v28)
          v28 = v14;
        if (v28 < v12)
          v28 = v12;
        v29 = bswap32(*v28) >> 16;
        if (v17)
        {
          v30 = (unsigned __int16 *)(v23 + v16);
          if (v14 >= v30)
            v31 = v30;
          else
            v31 = v14;
          if (v31 < v12)
            v31 = v12;
          v32 = bswap32(*v31) >> 16;
          v33 = (unsigned __int16 *)((char *)v30 + v27);
          if (v14 < v33)
            v33 = v14;
          if (v33 < v12)
            v33 = v12;
          v34 = BLEND16_19498[v17];
          LODWORD(v25) = v25 - ((v34 & v25) >> v17) + ((v34 & v32) >> v17);
          LODWORD(v29) = v29 - ((v34 & v29) >> v17) + ((v34 & (unint64_t)(bswap32(*v33) >> 16)) >> v17);
        }
        v35 = BLEND16_19498[v26];
        v36 = v25 - ((unint64_t)(v35 & v25) >> v26);
        v37 = (unint64_t)(v35 & v29) >> v26;
LABEL_40:
        LOWORD(v25) = v36 + v37;
        goto LABEL_41;
      }
LABEL_83:
      v9 = v90;
      v7 += v91;
      LOBYTE(v10) = v89;
      v11 += v88;
      a6 = v95 - 1;
      a5 = v93;
      if (v95 == 1)
        return result;
    }
    if (a5 < 1)
      goto LABEL_83;
    v41 = (uint64_t *)v81;
    v40 = v82;
    while (1)
    {
      v42 = *(v41 - 1);
      v43 = *v41;
      v44 = v18 + v42;
      if ((unint64_t)v14 >= v18 + v42)
        v45 = (unsigned __int16 *)(v18 + v42);
      else
        v45 = v14;
      if (v45 < v12)
        v45 = v12;
      v46 = bswap32(*v45) >> 16;
      v47 = *v41 & 0xF;
      if ((v43 & 0xF) != 0)
        break;
      if (v17)
      {
        v59 = (unsigned __int16 *)(v44 + v16);
        if ((unint64_t)v14 < v44 + v16)
          v59 = v14;
        if (v59 < v12)
          v59 = v12;
        v60 = BLEND16_19498[v17];
        v57 = v46 - ((v60 & v46) >> v17);
        v58 = (v60 & (unint64_t)(bswap32(*v59) >> 16)) >> v17;
        goto LABEL_75;
      }
LABEL_76:
      v61 = 16843008 * BYTE1(v46);
      v62 = v61 | 0xFF;
      if (v6 != 255)
      {
        result = PDM_19476(v61 | 0xFFu, v6);
        v62 = result;
      }
      if ((_BYTE)v62)
      {
        if (v62 == 255)
          *v7 = v62;
        else
          result = (unint64_t)DplusDM_19478(v7, v62, *v7, ~(_BYTE)v62);
      }
      v41 += 2;
      ++v7;
      if (!--v40)
        goto LABEL_83;
    }
    v48 = v43 >> 4;
    v49 = (unsigned __int16 *)(v44 + (v43 >> 4));
    if (v14 < v49)
      v49 = v14;
    if (v49 < v12)
      v49 = v12;
    v50 = bswap32(*v49) >> 16;
    if (v17)
    {
      v51 = (unsigned __int16 *)(v44 + v16);
      if (v14 >= v51)
        v52 = v51;
      else
        v52 = v14;
      if (v52 < v12)
        v52 = v12;
      v53 = bswap32(*v52) >> 16;
      v54 = (unsigned __int16 *)((char *)v51 + v48);
      if (v14 < v54)
        v54 = v14;
      if (v54 < v12)
        v54 = v12;
      v55 = BLEND16_19498[v17];
      LODWORD(v46) = v46 - ((v55 & v46) >> v17) + ((v55 & v53) >> v17);
      LODWORD(v50) = v50 - ((v55 & v50) >> v17) + ((v55 & (unint64_t)(bswap32(*v54) >> 16)) >> v17);
    }
    v56 = BLEND16_19498[v47];
    v57 = v46 - ((unint64_t)(v56 & v46) >> v47);
    v58 = (unint64_t)(v56 & v50) >> v47;
LABEL_75:
    LOWORD(v46) = v57 + v58;
    goto LABEL_76;
  }
  v96 = (uint64_t *)(v8 + 16 * a3);
  v63 = v13 - 4;
  v94 = a5;
  do
  {
    v64 = *(char **)(v97 + 32);
    v65 = &v64[(v11 >> v10) * v9];
    v66 = a6;
    if (v92 == 1)
    {
      if (a5 >= 1)
      {
        v67 = v96;
        v68 = v94;
        do
        {
          v69 = *v67;
          v67 += 2;
          v70 = &v65[v69];
          if (v63 < &v65[v69])
            v70 = v63;
          if (v70 < v64)
            v70 = v64;
          v71 = bswap32(*(unsigned __int16 *)v70);
          HIDWORD(v72) = HIBYTE(v71);
          LODWORD(v72) = v71;
          HIDWORD(v72) = v72 >> 24;
          LODWORD(v72) = v71;
          result = (v72 >> 16) | 0xFF;
          if (v6 != 255)
            result = PDM_19476(result, v6);
          *v7++ = result;
          --v68;
        }
        while (v68);
      }
    }
    else
    {
      v73 = v96;
      v74 = v94;
      if (a5 >= 1)
      {
        do
        {
          v75 = *v73;
          v73 += 2;
          v76 = &v65[v75];
          if (v63 < &v65[v75])
            v76 = v63;
          if ((unint64_t)v76 < *(_QWORD *)(v97 + 32))
            v76 = *(char **)(v97 + 32);
          v77 = bswap32(*(unsigned __int16 *)v76);
          HIDWORD(v78) = HIBYTE(v77);
          LODWORD(v78) = v77;
          HIDWORD(v78) = v78 >> 24;
          LODWORD(v78) = v77;
          v79 = v78 >> 16;
          v80 = v79 | 0xFF;
          if (v6 != 255)
          {
            result = PDM_19476(v79 | 0xFFu, v6);
            v80 = result;
          }
          if ((_BYTE)v80)
          {
            if (v80 == 255)
              *v7 = v80;
            else
              result = (unint64_t)DplusDM_19478(v7, v80, *v7, ~(_BYTE)v80);
          }
          ++v7;
          --v74;
        }
        while (v74);
      }
    }
    v9 = v90;
    v7 += v91;
    LOBYTE(v10) = v89;
    v11 += v88;
    a6 = v66 - 1;
    a5 = v93;
  }
  while (v66 != 1);
  return result;
}

void rgba32_mark_image_w16(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  void *v17;
  void *v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;

  v10 = a2;
  v12 = *(int *)(a1 + 28);
  v13 = *(_DWORD *)(a1 + 4);
  v14 = *(unsigned int *)(a1 + 8);
  v21 = *(_DWORD *)(a1 + 8);
  v22 = v13;
  v15 = *(int **)(a1 + 136);
  if (v15)
  {
    v16 = *(_DWORD *)(a1 + 104);
    LODWORD(v23) = *(_DWORD *)(a1 + 108);
    HIDWORD(v23) = v16;
    shape_enum_clip_alloc(a1, a2, v15, 1, 1, 1, v16, v23, v13, v14);
    v18 = v17;
    if (v17)
      goto LABEL_5;
  }
  v19 = 0;
  v20 = 0;
  v18 = 0;
  v23 = 0;
  while (1)
  {
    CGSConvertw16toARGB8888(*(_QWORD *)(a1 + 88) + *(int *)(a1 + 76) * (uint64_t)(a3 + v20 * a4) + 2 * (v19 + v10), *(_DWORD *)(a1 + 76) * a4, (char *)(*(_QWORD *)(a1 + 40) + (*(int *)(a1 + 16) + (uint64_t)v20) * v12 + 4 * (*(_DWORD *)(a1 + 12) + v19)), v12, v13, v14, a7, a8);
    if (!v18)
      break;
LABEL_5:
    if (!shape_enum_clip_next((uint64_t)v18, (int *)&v23 + 1, &v23, &v22, &v21))
    {
      free(v18);
      return;
    }
    v20 = v23;
    v19 = HIDWORD(v23);
    v14 = v21;
    v13 = v22;
  }
}

unint64_t rgba32_image_mark_w16(unint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  char *v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  unint64_t v29;
  unsigned __int16 *v30;
  unsigned __int16 *v31;
  unint64_t v32;
  unsigned __int16 *v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  unint64_t v37;
  unsigned __int16 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int16 *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 *v49;
  unint64_t v50;
  unsigned __int16 *v51;
  unsigned __int16 *v52;
  unint64_t v53;
  unsigned __int16 *v54;
  uint64_t v55;
  uint64_t v56;
  __int16 v57;
  unint64_t v58;
  unsigned __int16 *v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  char *v63;
  char *v64;
  char *v65;
  int v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t *v92;
  unint64_t v93;

  v6 = *((unsigned __int8 *)a2 + 8);
  v88 = *a2;
  v7 = (unsigned int *)*((_QWORD *)a2 + 2);
  v87 = *((_QWORD *)a2 + 3) - a5;
  v9 = *((_QWORD *)a2 + 15);
  v8 = *((_QWORD *)a2 + 16);
  v10 = *((_QWORD *)a2 + 7);
  v84 = *((_QWORD *)a2 + 9);
  v11 = *((_QWORD *)a2 + 5) + v84 * a4;
  v12 = *(unsigned __int16 **)(result + 32);
  v13 = (char *)v12
      + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
      + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3);
  v93 = result;
  v89 = a5;
  v85 = v10;
  v86 = v9;
  if (*(_QWORD *)(result + 176))
  {
    v83 = *((_QWORD *)a2 + 11);
    v81 = ~(-1 << v10);
    v82 = *((_QWORD *)a2 + 13);
    v80 = v10 - 4;
    v14 = (unsigned __int16 *)(v13 - 4);
    v78 = a5;
    v79 = -v9;
    v77 = v8 + 16 * a3 + 8;
    while (1)
    {
      if (((v82 - v11) | (v11 - v83)) < 0)
      {
        v17 = 0;
        v16 = 0;
      }
      else
      {
        v15 = ((v11 & (unint64_t)v81) >> v80) & 0xF;
        v16 = (unint64_t)(v15 - 7) >= 9 ? v79 : v9;
        v17 = weights_19497[v15] & 0xF;
      }
      v18 = *(_QWORD *)(v93 + 32) + (v11 >> v10) * v9;
      v91 = a6;
      if (v88 != 1)
        break;
      if (a5 >= 1)
      {
        v19 = (uint64_t *)v77;
        v20 = v78;
        while (1)
        {
          v21 = *(v19 - 1);
          v22 = *v19;
          v23 = v18 + v21;
          if ((unint64_t)v14 >= v18 + v21)
            v24 = (unsigned __int16 *)(v18 + v21);
          else
            v24 = v14;
          if (v24 < v12)
            v24 = v12;
          v25 = *v24;
          v26 = *v19 & 0xF;
          if ((v22 & 0xF) != 0)
            break;
          if (v17)
          {
            v38 = (unsigned __int16 *)(v23 + v16);
            if ((unint64_t)v14 < v23 + v16)
              v38 = v14;
            if (v38 < v12)
              v38 = v12;
            v39 = BLEND16_19498[v17];
            v36 = v25 - ((v39 & v25) >> v17);
            v37 = (unint64_t)(unsigned __int16)(v39 & *v38) >> v17;
            goto LABEL_40;
          }
LABEL_41:
          result = (16843008 * BYTE1(v25)) | 0xFFu;
          if (v6 != 255)
            result = PDM_19476(result, v6);
          v19 += 2;
          *v7++ = result;
          if (!--v20)
            goto LABEL_83;
        }
        v27 = v22 >> 4;
        v28 = (unsigned __int16 *)(v23 + (v22 >> 4));
        if (v14 < v28)
          v28 = v14;
        if (v28 < v12)
          v28 = v12;
        v29 = *v28;
        if (v17)
        {
          v30 = (unsigned __int16 *)(v23 + v16);
          if (v14 >= v30)
            v31 = v30;
          else
            v31 = v14;
          if (v31 < v12)
            v31 = v12;
          v32 = *v31;
          v33 = (unsigned __int16 *)((char *)v30 + v27);
          if (v14 < v33)
            v33 = v14;
          if (v33 < v12)
            v33 = v12;
          v34 = BLEND16_19498[v17];
          LODWORD(v25) = v25 - ((v34 & v25) >> v17) + ((v34 & v32) >> v17);
          LODWORD(v29) = v29 - ((v34 & v29) >> v17) + ((unint64_t)(unsigned __int16)(v34 & *v33) >> v17);
        }
        v35 = BLEND16_19498[v26];
        v36 = v25 - ((unint64_t)(v35 & v25) >> v26);
        v37 = (unint64_t)(v35 & v29) >> v26;
LABEL_40:
        LOWORD(v25) = v36 + v37;
        goto LABEL_41;
      }
LABEL_83:
      v9 = v86;
      v7 += v87;
      LOBYTE(v10) = v85;
      v11 += v84;
      a6 = v91 - 1;
      a5 = v89;
      if (v91 == 1)
        return result;
    }
    if (a5 < 1)
      goto LABEL_83;
    v41 = (uint64_t *)v77;
    v40 = v78;
    while (1)
    {
      v42 = *(v41 - 1);
      v43 = *v41;
      v44 = v18 + v42;
      if ((unint64_t)v14 >= v18 + v42)
        v45 = (unsigned __int16 *)(v18 + v42);
      else
        v45 = v14;
      if (v45 < v12)
        v45 = v12;
      v46 = *v45;
      v47 = *v41 & 0xF;
      if ((v43 & 0xF) != 0)
        break;
      if (v17)
      {
        v59 = (unsigned __int16 *)(v44 + v16);
        if ((unint64_t)v14 < v44 + v16)
          v59 = v14;
        if (v59 < v12)
          v59 = v12;
        v60 = BLEND16_19498[v17];
        v57 = v46 - ((v60 & v46) >> v17);
        v58 = (unint64_t)(unsigned __int16)(v60 & *v59) >> v17;
        goto LABEL_75;
      }
LABEL_76:
      v61 = 16843008 * BYTE1(v46);
      v62 = v61 | 0xFF;
      if (v6 != 255)
      {
        result = PDM_19476(v61 | 0xFFu, v6);
        v62 = result;
      }
      if ((_BYTE)v62)
      {
        if (v62 == 255)
          *v7 = v62;
        else
          result = (unint64_t)DplusDM_19478(v7, v62, *v7, ~(_BYTE)v62);
      }
      v41 += 2;
      ++v7;
      if (!--v40)
        goto LABEL_83;
    }
    v48 = v43 >> 4;
    v49 = (unsigned __int16 *)(v44 + (v43 >> 4));
    if (v14 < v49)
      v49 = v14;
    if (v49 < v12)
      v49 = v12;
    v50 = *v49;
    if (v17)
    {
      v51 = (unsigned __int16 *)(v44 + v16);
      if (v14 >= v51)
        v52 = v51;
      else
        v52 = v14;
      if (v52 < v12)
        v52 = v12;
      v53 = *v52;
      v54 = (unsigned __int16 *)((char *)v51 + v48);
      if (v14 < v54)
        v54 = v14;
      if (v54 < v12)
        v54 = v12;
      v55 = BLEND16_19498[v17];
      LODWORD(v46) = v46 - ((v55 & v46) >> v17) + ((v55 & v53) >> v17);
      LODWORD(v50) = v50 - ((v55 & v50) >> v17) + ((unint64_t)(unsigned __int16)(v55 & *v54) >> v17);
    }
    v56 = BLEND16_19498[v47];
    v57 = v46 - ((unint64_t)(v56 & v46) >> v47);
    v58 = (unint64_t)(v56 & v50) >> v47;
LABEL_75:
    LOWORD(v46) = v57 + v58;
    goto LABEL_76;
  }
  v92 = (uint64_t *)(v8 + 16 * a3);
  v63 = v13 - 4;
  v90 = a5;
  do
  {
    v64 = *(char **)(v93 + 32);
    v65 = &v64[(v11 >> v10) * v9];
    v66 = a6;
    if (v88 == 1)
    {
      if (a5 >= 1)
      {
        v67 = v92;
        v68 = v90;
        do
        {
          v69 = *v67;
          v67 += 2;
          v70 = &v65[v69];
          if (v63 < &v65[v69])
            v70 = v63;
          if (v70 < v64)
            v70 = v64;
          result = (HIBYTE(*(unsigned __int16 *)v70) << 16) | (HIBYTE(*(unsigned __int16 *)v70) << 24) | *(unsigned __int16 *)v70 | 0xFFu;
          if (v6 != 255)
            result = PDM_19476(result, v6);
          *v7++ = result;
          --v68;
        }
        while (v68);
      }
    }
    else
    {
      v71 = v92;
      v72 = v90;
      if (a5 >= 1)
      {
        do
        {
          v73 = *v71;
          v71 += 2;
          v74 = &v65[v73];
          if (v63 < &v65[v73])
            v74 = v63;
          if ((unint64_t)v74 < *(_QWORD *)(v93 + 32))
            v74 = *(char **)(v93 + 32);
          v75 = (HIBYTE(*(unsigned __int16 *)v74) << 16) | (HIBYTE(*(unsigned __int16 *)v74) << 24) | *(unsigned __int16 *)v74;
          v76 = v75 | 0xFF;
          if (v6 != 255)
          {
            result = PDM_19476(v75 | 0xFFu, v6);
            v76 = result;
          }
          if ((_BYTE)v76)
          {
            if (v76 == 255)
              *v7 = v76;
            else
              result = (unint64_t)DplusDM_19478(v7, v76, *v7, ~(_BYTE)v76);
          }
          ++v7;
          --v72;
        }
        while (v72);
      }
    }
    v9 = v86;
    v7 += v87;
    LOBYTE(v10) = v85;
    v11 += v84;
    a6 = v66 - 1;
    a5 = v89;
  }
  while (v66 != 1);
  return result;
}

void rgba32_mark_image_RGB48(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int *v13;
  int v14;
  void *v15;
  void *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  char *v28;
  int v29;
  uint64_t i;
  char *v31;
  int v32;
  char *v33;
  char v34;
  char v35;
  char v36;
  int v37;
  void *v40;
  int v41;
  int v42;
  uint64_t v43;

  v37 = a2;
  v9 = *(unsigned int *)(a1 + 28);
  v10 = (int)v9;
  v11 = *(_DWORD *)(a1 + 4);
  v12 = *(_DWORD *)(a1 + 8);
  v41 = v12;
  v42 = v11;
  v13 = *(int **)(a1 + 136);
  if (v13)
  {
    v14 = *(_DWORD *)(a1 + 104);
    LODWORD(v43) = *(_DWORD *)(a1 + 108);
    HIDWORD(v43) = v14;
    shape_enum_clip_alloc(a1, a2, v13, 1, 1, 1, v14, v43, v11, v12);
    v16 = v15;
    if (v15)
      goto LABEL_24;
  }
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v43 = 0;
  if (v11 < 0)
LABEL_4:
    _CGHandleAssert("CGSConvertBGR16toARGB8888", 422, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-argb8.c", "width >= 0", "width (%d) is negative", a6, a7, a8, v11);
  while (1)
  {
    if (v12 < 0)
      _CGHandleAssert("CGSConvertBGR16toARGB8888", 422, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-argb8.c", "height >= 0", "height (%d) is negative", a6, a7, a8, v12);
    v40 = v16;
    v19 = *(_DWORD *)(a1 + 76);
    v20 = *(_QWORD *)(a1 + 88) + v19 * (uint64_t)(a3 + v18 * a4) + 6 * (v17 + v37);
    v21 = (char *)(*(_QWORD *)(a1 + 40) + (*(int *)(a1 + 16) + (uint64_t)v18) * v10 + 4 * (*(_DWORD *)(a1 + 12) + v17));
    v22 = v19 * (uint64_t)a4;
    v23 = v12 - 1;
    if ((v9 & 0x80000000) != 0)
    {
      v20 += (int)v23 * v22;
      LODWORD(v22) = -(int)v22;
      v24 = v10;
      v21 += v23 * v10;
      v25 = v9;
      v26 = -(int)v9;
    }
    else
    {
      v24 = v10;
      v25 = v9;
      v26 = v9;
    }
    v27 = v20 + (int)((v22 * v23) & ((int)v22 >> 31));
    v28 = v21;
    if (v27 <= (unint64_t)&v21[v12 * (uint64_t)v26])
    {
      v29 = (int)v22 >= 0 ? v22 : -(int)v22;
      v28 = v21;
      if (v27 + v12 * (uint64_t)v29 >= (unint64_t)v21)
        v28 = (char *)malloc_type_malloc(v12 * (uint64_t)v26, 0x9712D6FuLL);
    }
    if (v12 >= 1)
    {
      for (i = 0; i != v12; ++i)
      {
        if (v11 >= 1)
        {
          v31 = &v28[i * v26];
          v32 = v11;
          v33 = (char *)(v20 + i * (int)v22);
          do
          {
            v34 = *v33;
            v35 = v33[2];
            v36 = v33[4];
            *v31 = -1;
            v31[1] = v36;
            v31[2] = v35;
            v31[3] = v34;
            v33 += 6;
            v31 += 4;
            --v32;
          }
          while (v32);
        }
      }
    }
    if (v28 != v21)
    {
      CGBlt_copyBytes(4 * v11, v12, v28, v21, v26, v26);
      free(v28);
    }
    v10 = v24;
    v9 = v25;
    v16 = v40;
    if (!v40)
      break;
LABEL_24:
    if (!shape_enum_clip_next((uint64_t)v16, (int *)&v43 + 1, &v43, &v42, &v41))
    {
      free(v16);
      return;
    }
    v18 = v43;
    v17 = HIDWORD(v43);
    v12 = v41;
    v11 = v42;
    if (v42 < 0)
      goto LABEL_4;
  }
}

unint64_t rgba32_image_mark_RGB48(unint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  char *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  unint64_t v30;
  unsigned __int16 *v31;
  unsigned __int16 *v32;
  unint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unint64_t v51;
  unsigned __int16 *v52;
  unsigned __int16 *v53;
  unint64_t v54;
  unsigned __int16 *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unsigned __int16 *v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  int v75;
  int v76;
  unsigned __int16 v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t *v95;
  unint64_t v96;

  v7 = *((unsigned __int8 *)a2 + 8);
  v91 = *a2;
  v8 = (unsigned int *)*((_QWORD *)a2 + 2);
  v90 = *((_QWORD *)a2 + 3) - a5;
  v10 = *((_QWORD *)a2 + 15);
  v9 = *((_QWORD *)a2 + 16);
  v11 = *((_QWORD *)a2 + 7);
  v87 = *((_QWORD *)a2 + 9);
  v12 = *((_QWORD *)a2 + 5) + v87 * a4;
  v13 = *(unsigned __int16 **)(result + 32);
  v14 = (char *)v13
      + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
      + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3);
  v96 = result;
  v88 = v11;
  v89 = v10;
  if (*(_QWORD *)(result + 176))
  {
    v85 = *((_QWORD *)a2 + 11);
    v83 = ~(-1 << v11);
    v84 = *((_QWORD *)a2 + 13);
    v82 = v11 - 4;
    v15 = (unsigned __int16 *)(v14 - 6);
    v80 = a5;
    v81 = -v10;
    v79 = v9 + 16 * a3 + 8;
    while (1)
    {
      v94 = a6;
      if (((v84 - v12) | (v12 - v85)) < 0)
      {
        v18 = 0;
        v17 = 0;
      }
      else
      {
        v16 = ((v12 & (unint64_t)v83) >> v82) & 0xF;
        v17 = (unint64_t)(v16 - 7) >= 9 ? v81 : v10;
        v18 = weights_19497[v16] & 0xF;
      }
      v19 = *(_QWORD *)(v96 + 32) + (v12 >> v11) * v10;
      v92 = v12;
      if (v91 != 1)
        break;
      if (a5 >= 1)
      {
        v20 = (uint64_t *)v79;
        v21 = v80;
        while (1)
        {
          v22 = *(v20 - 1);
          v23 = *v20;
          v24 = v19 + v22;
          if ((unint64_t)v15 >= v19 + v22)
            v25 = (unsigned __int16 *)(v19 + v22);
          else
            v25 = v15;
          if (v25 < v13)
            v25 = v13;
          v26 = bswap32(v25[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v25[2]) >> 16) << 32) | (bswap32(*v25) >> 16);
          v27 = *v20 & 0xF;
          if ((v23 & 0xF) != 0)
            break;
          if (v18)
          {
            v39 = (unsigned __int16 *)(v24 + v17);
            if ((unint64_t)v15 < v24 + v17)
              v39 = v15;
            if (v39 < v13)
              v39 = v13;
            v40 = BLEND16_19498[v18];
            v37 = v26 - ((v40 & v26) >> v18);
            v38 = ((bswap32(v39[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v39[2]) >> 16) << 32) | (bswap32(*v39) >> 16)) & v40) >> v18;
            goto LABEL_40;
          }
LABEL_41:
          result = (v26 >> 8) & 0xFF0000 | (BYTE1(v26) << 24) | WORD2(v26) & 0xFF00 | 0xFF;
          if (v7 != 255)
            result = PDM_19476(result, v7);
          v20 += 2;
          *v8++ = result;
          if (!--v21)
            goto LABEL_83;
        }
        v28 = v23 >> 4;
        v29 = (unsigned __int16 *)(v24 + (v23 >> 4));
        if (v15 < v29)
          v29 = v15;
        if (v29 < v13)
          v29 = v13;
        v30 = bswap32(v29[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v29[2]) >> 16) << 32) | (bswap32(*v29) >> 16);
        if (v18)
        {
          v31 = (unsigned __int16 *)(v24 + v17);
          if (v15 >= v31)
            v32 = v31;
          else
            v32 = v15;
          if (v32 < v13)
            v32 = v13;
          v33 = bswap32(v32[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v32[2]) >> 16) << 32) | (bswap32(*v32) >> 16);
          v34 = (unsigned __int16 *)((char *)v31 + v28);
          if (v15 < v34)
            v34 = v15;
          if (v34 < v13)
            v34 = v13;
          v35 = BLEND16_19498[v18];
          v26 = v26 - ((v35 & v26) >> v18) + ((v33 & v35) >> v18);
          v30 = v30
              - ((v35 & v30) >> v18)
              + (((bswap32(v34[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v34[2]) >> 16) << 32) | (bswap32(*v34) >> 16)) & v35) >> v18);
        }
        v36 = BLEND16_19498[v27];
        v37 = v26 - ((v36 & v26) >> v27);
        v38 = (v36 & v30) >> v27;
LABEL_40:
        v26 = v37 + v38;
        goto LABEL_41;
      }
LABEL_83:
      v10 = v89;
      v8 += v90;
      LOBYTE(v11) = v88;
      v12 = v92 + v87;
      --a6;
      if (v94 == 1)
        return result;
    }
    if (a5 < 1)
      goto LABEL_83;
    v42 = (uint64_t *)v79;
    v41 = v80;
    while (1)
    {
      v43 = *(v42 - 1);
      v44 = *v42;
      v45 = v19 + v43;
      if ((unint64_t)v15 >= v19 + v43)
        v46 = (unsigned __int16 *)(v19 + v43);
      else
        v46 = v15;
      if (v46 < v13)
        v46 = v13;
      v47 = bswap32(v46[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v46[2]) >> 16) << 32) | (bswap32(*v46) >> 16);
      v48 = *v42 & 0xF;
      if ((v44 & 0xF) != 0)
        break;
      if (v18)
      {
        v60 = (unsigned __int16 *)(v45 + v17);
        if ((unint64_t)v15 < v45 + v17)
          v60 = v15;
        if (v60 < v13)
          v60 = v13;
        v61 = BLEND16_19498[v18];
        v58 = v47 - ((v61 & v47) >> v18);
        v59 = ((bswap32(v60[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v60[2]) >> 16) << 32) | (bswap32(*v60) >> 16)) & v61) >> v18;
        goto LABEL_75;
      }
LABEL_76:
      v62 = (v47 >> 8) & 0xFF0000 | (BYTE1(v47) << 24) | WORD2(v47) & 0xFF00;
      v63 = v62 | 0xFF;
      if (v7 != 255)
      {
        result = PDM_19476(v62 | 0xFF, v7);
        v63 = result;
      }
      if ((_BYTE)v63)
      {
        if (v63 == 255)
          *v8 = v63;
        else
          result = (unint64_t)DplusDM_19478(v8, v63, *v8, ~(_BYTE)v63);
      }
      v42 += 2;
      ++v8;
      if (!--v41)
        goto LABEL_83;
    }
    v49 = v44 >> 4;
    v50 = (unsigned __int16 *)(v45 + (v44 >> 4));
    if (v15 < v50)
      v50 = v15;
    if (v50 < v13)
      v50 = v13;
    v51 = bswap32(v50[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v50[2]) >> 16) << 32) | (bswap32(*v50) >> 16);
    if (v18)
    {
      v52 = (unsigned __int16 *)(v45 + v17);
      if (v15 >= v52)
        v53 = v52;
      else
        v53 = v15;
      if (v53 < v13)
        v53 = v13;
      v54 = bswap32(v53[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v53[2]) >> 16) << 32) | (bswap32(*v53) >> 16);
      v55 = (unsigned __int16 *)((char *)v52 + v49);
      if (v15 < v55)
        v55 = v15;
      if (v55 < v13)
        v55 = v13;
      v56 = BLEND16_19498[v18];
      v47 = v47 - ((v56 & v47) >> v18) + ((v54 & v56) >> v18);
      v51 = v51
          - ((v56 & v51) >> v18)
          + (((bswap32(v55[1]) & 0xFFFF0000 | ((unint64_t)(bswap32(v55[2]) >> 16) << 32) | (bswap32(*v55) >> 16)) & v56) >> v18);
    }
    v57 = BLEND16_19498[v48];
    v58 = v47 - ((v57 & v47) >> v48);
    v59 = (v57 & v51) >> v48;
LABEL_75:
    v47 = v58 + v59;
    goto LABEL_76;
  }
  v95 = (uint64_t *)(v9 + 16 * a3);
  v64 = v14 - 6;
  v93 = a5;
  do
  {
    v65 = *(char **)(v96 + 32);
    v66 = &v65[(v12 >> v11) * v10];
    if (v91 == 1)
    {
      if (a5 >= 1)
      {
        v67 = v95;
        v68 = v93;
        do
        {
          v69 = *v67;
          v67 += 2;
          v70 = &v66[v69];
          if (v64 < &v66[v69])
            v70 = v64;
          if (v70 < v65)
            v70 = v65;
          result = (*(unsigned __int16 *)v70 << 24) | (v70[2] << 16) | (*((_WORD *)v70 + 2) << 8) | 0xFFu;
          if (v7 != 255)
            result = PDM_19476(result, v7);
          *v8++ = result;
          --v68;
        }
        while (v68);
      }
    }
    else
    {
      v71 = v95;
      v72 = v93;
      if (a5 >= 1)
      {
        do
        {
          v73 = *v71;
          v71 += 2;
          v74 = &v66[v73];
          if (v64 < &v66[v73])
            v74 = v64;
          if ((unint64_t)v74 < *(_QWORD *)(v96 + 32))
            v74 = *(char **)(v96 + 32);
          v75 = *(unsigned __int16 *)v74;
          v76 = v74[2];
          v77 = *((_WORD *)v74 + 2);
          v78 = (v75 << 24) | (v76 << 16) | (v77 << 8) | 0xFF;
          if (v7 != 255)
          {
            result = PDM_19476((v75 << 24) | (v76 << 16) | (v77 << 8) | 0xFFu, v7);
            v78 = result;
          }
          if ((_BYTE)v78)
          {
            if (v78 == 255)
              *v8 = v78;
            else
              result = (unint64_t)DplusDM_19478(v8, v78, *v8, ~(_BYTE)v78);
          }
          ++v8;
          --v72;
        }
        while (v72);
      }
    }
    v10 = v89;
    v8 += v90;
    LOBYTE(v11) = v88;
    v12 += v87;
    --a6;
  }
  while (a6);
  return result;
}

void rgba32_mark_image_rgb48(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int *v13;
  int v14;
  void *v15;
  void *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  char *v28;
  int v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int v33;
  char *v34;
  char v35;
  char v36;
  char v37;
  int v38;
  void *v41;
  int v42;
  int v43;
  uint64_t v44;

  v38 = a2;
  v9 = *(unsigned int *)(a1 + 28);
  v10 = (int)v9;
  v11 = *(_DWORD *)(a1 + 4);
  v12 = *(_DWORD *)(a1 + 8);
  v42 = v12;
  v43 = v11;
  v13 = *(int **)(a1 + 136);
  if (v13)
  {
    v14 = *(_DWORD *)(a1 + 104);
    LODWORD(v44) = *(_DWORD *)(a1 + 108);
    HIDWORD(v44) = v14;
    shape_enum_clip_alloc(a1, a2, v13, 1, 1, 1, v14, v44, v11, v12);
    v16 = v15;
    if (v15)
      goto LABEL_24;
  }
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v44 = 0;
  if (v11 < 0)
LABEL_4:
    _CGHandleAssert("CGSConvertbgr16toARGB8888", 584, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-argb8.c", "width >= 0", "width (%d) is negative", a6, a7, a8, v11);
  while (1)
  {
    if (v12 < 0)
      _CGHandleAssert("CGSConvertbgr16toARGB8888", 584, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-argb8.c", "height >= 0", "height (%d) is negative", a6, a7, a8, v12);
    v41 = v16;
    v19 = *(_DWORD *)(a1 + 76);
    v20 = *(_QWORD *)(a1 + 88) + v19 * (uint64_t)(a3 + v18 * a4) + 6 * (v17 + v38);
    v21 = (char *)(*(_QWORD *)(a1 + 40) + (*(int *)(a1 + 16) + (uint64_t)v18) * v10 + 4 * (*(_DWORD *)(a1 + 12) + v17));
    v22 = v19 * (uint64_t)a4;
    v23 = v12 - 1;
    if ((v9 & 0x80000000) != 0)
    {
      v20 += (int)v23 * v22;
      LODWORD(v22) = -(int)v22;
      v24 = v10;
      v21 += v23 * v10;
      v25 = v9;
      v26 = -(int)v9;
    }
    else
    {
      v24 = v10;
      v25 = v9;
      v26 = v9;
    }
    v27 = v20 + (int)((v22 * v23) & ((int)v22 >> 31));
    v28 = v21;
    if (v27 <= (unint64_t)&v21[v12 * (uint64_t)v26])
    {
      v29 = (int)v22 >= 0 ? v22 : -(int)v22;
      v28 = v21;
      if (v27 + v12 * (uint64_t)v29 >= (unint64_t)v21)
        v28 = (char *)malloc_type_malloc(v12 * (uint64_t)v26, 0xF58CBE08uLL);
    }
    if (v12 >= 1)
    {
      v30 = 0;
      v31 = (char *)(v20 + 5);
      do
      {
        if (v11 >= 1)
        {
          v32 = &v28[v30 * v26];
          v33 = v11;
          v34 = v31;
          do
          {
            v35 = *(v34 - 4);
            v36 = *(v34 - 2);
            v37 = *v34;
            v34 += 6;
            *v32 = -1;
            v32[1] = v37;
            v32[2] = v36;
            v32[3] = v35;
            v32 += 4;
            --v33;
          }
          while (v33);
        }
        ++v30;
        v31 += (int)v22;
      }
      while (v30 != v12);
    }
    if (v28 != v21)
    {
      CGBlt_copyBytes(4 * v11, v12, v28, v21, v26, v26);
      free(v28);
    }
    v10 = v24;
    v9 = v25;
    v16 = v41;
    if (!v41)
      break;
LABEL_24:
    if (!shape_enum_clip_next((uint64_t)v16, (int *)&v44 + 1, &v44, &v43, &v42))
    {
      free(v16);
      return;
    }
    v18 = v44;
    v17 = HIDWORD(v44);
    v12 = v42;
    v11 = v43;
    if (v43 < 0)
      goto LABEL_4;
  }
}

unint64_t rgba32_image_mark_rgb48(unint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  char *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  unint64_t v30;
  unsigned __int16 *v31;
  unsigned __int16 *v32;
  unint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unint64_t v51;
  unsigned __int16 *v52;
  unsigned __int16 *v53;
  unint64_t v54;
  unsigned __int16 *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unsigned __int16 *v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t *v93;
  unint64_t v94;

  v7 = *((unsigned __int8 *)a2 + 8);
  v89 = *a2;
  v8 = (unsigned int *)*((_QWORD *)a2 + 2);
  v88 = *((_QWORD *)a2 + 3) - a5;
  v10 = *((_QWORD *)a2 + 15);
  v9 = *((_QWORD *)a2 + 16);
  v11 = *((_QWORD *)a2 + 7);
  v85 = *((_QWORD *)a2 + 9);
  v12 = *((_QWORD *)a2 + 5) + v85 * a4;
  v13 = *(unsigned __int16 **)(result + 32);
  v14 = (char *)v13
      + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
      + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3);
  v94 = result;
  v86 = v11;
  v87 = v10;
  if (*(_QWORD *)(result + 176))
  {
    v83 = *((_QWORD *)a2 + 11);
    v81 = ~(-1 << v11);
    v82 = *((_QWORD *)a2 + 13);
    v80 = v11 - 4;
    v15 = (unsigned __int16 *)(v14 - 6);
    v78 = a5;
    v79 = -v10;
    v77 = v9 + 16 * a3 + 8;
    while (1)
    {
      v92 = a6;
      if (((v82 - v12) | (v12 - v83)) < 0)
      {
        v18 = 0;
        v17 = 0;
      }
      else
      {
        v16 = ((v12 & (unint64_t)v81) >> v80) & 0xF;
        v17 = (unint64_t)(v16 - 7) >= 9 ? v79 : v10;
        v18 = weights_19497[v16] & 0xF;
      }
      v19 = *(_QWORD *)(v94 + 32) + (v12 >> v11) * v10;
      v90 = v12;
      if (v89 != 1)
        break;
      if (a5 >= 1)
      {
        v20 = (uint64_t *)v77;
        v21 = v78;
        while (1)
        {
          v22 = *(v20 - 1);
          v23 = *v20;
          v24 = v19 + v22;
          if ((unint64_t)v15 >= v19 + v22)
            v25 = (unsigned __int16 *)(v19 + v22);
          else
            v25 = v15;
          if (v25 < v13)
            v25 = v13;
          v26 = *v25 | ((unint64_t)*(unsigned int *)(v25 + 1) << 16);
          v27 = *v20 & 0xF;
          if ((v23 & 0xF) != 0)
            break;
          if (v18)
          {
            v39 = (unsigned __int16 *)(v24 + v17);
            if ((unint64_t)v15 < v24 + v17)
              v39 = v15;
            if (v39 < v13)
              v39 = v13;
            v40 = BLEND16_19498[v18];
            v37 = v26 - ((v40 & v26) >> v18);
            v38 = ((*v39 | ((unint64_t)*(unsigned int *)(v39 + 1) << 16)) & v40) >> v18;
            goto LABEL_40;
          }
LABEL_41:
          result = (v26 >> 8) & 0xFF0000 | (BYTE1(v26) << 24) | WORD2(v26) & 0xFF00 | 0xFF;
          if (v7 != 255)
            result = PDM_19476(result, v7);
          v20 += 2;
          *v8++ = result;
          if (!--v21)
            goto LABEL_83;
        }
        v28 = v23 >> 4;
        v29 = (unsigned __int16 *)(v24 + (v23 >> 4));
        if (v15 < v29)
          v29 = v15;
        if (v29 < v13)
          v29 = v13;
        v30 = *v29 | ((unint64_t)*(unsigned int *)(v29 + 1) << 16);
        if (v18)
        {
          v31 = (unsigned __int16 *)(v24 + v17);
          if (v15 >= v31)
            v32 = v31;
          else
            v32 = v15;
          if (v32 < v13)
            v32 = v13;
          v33 = *v32 | ((unint64_t)*(unsigned int *)(v32 + 1) << 16);
          v34 = (unsigned __int16 *)((char *)v31 + v28);
          if (v15 < v34)
            v34 = v15;
          if (v34 < v13)
            v34 = v13;
          v35 = BLEND16_19498[v18];
          v26 = v26 - ((v35 & v26) >> v18) + ((v33 & v35) >> v18);
          v30 = v30
              - ((v35 & v30) >> v18)
              + (((*v34 | ((unint64_t)*(unsigned int *)(v34 + 1) << 16)) & v35) >> v18);
        }
        v36 = BLEND16_19498[v27];
        v37 = v26 - ((v36 & v26) >> v27);
        v38 = (v36 & v30) >> v27;
LABEL_40:
        v26 = v37 + v38;
        goto LABEL_41;
      }
LABEL_83:
      v10 = v87;
      v8 += v88;
      LOBYTE(v11) = v86;
      v12 = v90 + v85;
      --a6;
      if (v92 == 1)
        return result;
    }
    if (a5 < 1)
      goto LABEL_83;
    v42 = (uint64_t *)v77;
    v41 = v78;
    while (1)
    {
      v43 = *(v42 - 1);
      v44 = *v42;
      v45 = v19 + v43;
      if ((unint64_t)v15 >= v19 + v43)
        v46 = (unsigned __int16 *)(v19 + v43);
      else
        v46 = v15;
      if (v46 < v13)
        v46 = v13;
      v47 = *v46 | ((unint64_t)*(unsigned int *)(v46 + 1) << 16);
      v48 = *v42 & 0xF;
      if ((v44 & 0xF) != 0)
        break;
      if (v18)
      {
        v60 = (unsigned __int16 *)(v45 + v17);
        if ((unint64_t)v15 < v45 + v17)
          v60 = v15;
        if (v60 < v13)
          v60 = v13;
        v61 = BLEND16_19498[v18];
        v58 = v47 - ((v61 & v47) >> v18);
        v59 = ((*v60 | ((unint64_t)*(unsigned int *)(v60 + 1) << 16)) & v61) >> v18;
        goto LABEL_75;
      }
LABEL_76:
      v62 = (v47 >> 8) & 0xFF0000 | (BYTE1(v47) << 24) | WORD2(v47) & 0xFF00;
      v63 = v62 | 0xFF;
      if (v7 != 255)
      {
        result = PDM_19476(v62 | 0xFF, v7);
        v63 = result;
      }
      if ((_BYTE)v63)
      {
        if (v63 == 255)
          *v8 = v63;
        else
          result = (unint64_t)DplusDM_19478(v8, v63, *v8, ~(_BYTE)v63);
      }
      v42 += 2;
      ++v8;
      if (!--v41)
        goto LABEL_83;
    }
    v49 = v44 >> 4;
    v50 = (unsigned __int16 *)(v45 + (v44 >> 4));
    if (v15 < v50)
      v50 = v15;
    if (v50 < v13)
      v50 = v13;
    v51 = *v50 | ((unint64_t)*(unsigned int *)(v50 + 1) << 16);
    if (v18)
    {
      v52 = (unsigned __int16 *)(v45 + v17);
      if (v15 >= v52)
        v53 = v52;
      else
        v53 = v15;
      if (v53 < v13)
        v53 = v13;
      v54 = *v53 | ((unint64_t)*(unsigned int *)(v53 + 1) << 16);
      v55 = (unsigned __int16 *)((char *)v52 + v49);
      if (v15 < v55)
        v55 = v15;
      if (v55 < v13)
        v55 = v13;
      v56 = BLEND16_19498[v18];
      v47 = v47 - ((v56 & v47) >> v18) + ((v54 & v56) >> v18);
      v51 = v51 - ((v56 & v51) >> v18) + (((*v55 | ((unint64_t)*(unsigned int *)(v55 + 1) << 16)) & v56) >> v18);
    }
    v57 = BLEND16_19498[v48];
    v58 = v47 - ((v57 & v47) >> v48);
    v59 = (v57 & v51) >> v48;
LABEL_75:
    v47 = v58 + v59;
    goto LABEL_76;
  }
  v93 = (uint64_t *)(v9 + 16 * a3);
  v64 = v14 - 6;
  v91 = a5;
  do
  {
    v65 = *(char **)(v94 + 32);
    v66 = &v65[(v12 >> v11) * v10];
    if (v89 == 1)
    {
      if (a5 >= 1)
      {
        v67 = v93;
        v68 = v91;
        do
        {
          v69 = *v67;
          v67 += 2;
          v70 = &v66[v69];
          if (v64 < &v66[v69])
            v70 = v64;
          if (v70 < v65)
            v70 = v65;
          result = (*(unsigned __int16 *)v70 << 16) & 0xFF000000 | (HIBYTE(*((_WORD *)v70 + 1)) << 16) | *((unsigned __int16 *)v70 + 2) | 0xFF;
          if (v7 != 255)
            result = PDM_19476(result, v7);
          *v8++ = result;
          --v68;
        }
        while (v68);
      }
    }
    else
    {
      v71 = v93;
      v72 = v91;
      if (a5 >= 1)
      {
        do
        {
          v73 = *v71;
          v71 += 2;
          v74 = &v66[v73];
          if (v64 < &v66[v73])
            v74 = v64;
          if ((unint64_t)v74 < *(_QWORD *)(v94 + 32))
            v74 = *(char **)(v94 + 32);
          v75 = (*(unsigned __int16 *)v74 << 16) & 0xFF000000 | (HIBYTE(*((_WORD *)v74 + 1)) << 16) | *((unsigned __int16 *)v74 + 2);
          v76 = v75 | 0xFF;
          if (v7 != 255)
          {
            result = PDM_19476(v75 | 0xFF, v7);
            v76 = result;
          }
          if ((_BYTE)v76)
          {
            if (v76 == 255)
              *v8 = v76;
            else
              result = (unint64_t)DplusDM_19478(v8, v76, *v8, ~(_BYTE)v76);
          }
          ++v8;
          --v72;
        }
        while (v72);
      }
    }
    v10 = v87;
    v8 += v88;
    LOBYTE(v11) = v86;
    v12 += v85;
    --a6;
  }
  while (a6);
  return result;
}

void rgba32_mark_image_RGBA64(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int *v11;
  int v12;
  void *v13;
  void *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int32x4_t v28;
  int v29;
  uint32x4_t *v30;
  __int32 *v31;
  unsigned int v32;
  int32x4_t v33;
  unsigned __int128 v34;
  int v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  BOOL v42;
  int v43;
  __int32 v44;
  int v45;
  _BOOL4 v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  char *v50;
  int v51;
  int v52;
  char *v53;
  uint64_t i;
  char *v55;
  int v56;
  char *v57;
  char v58;
  char v59;
  char v60;
  char v61;
  int v63;
  int v64;
  void *v68;
  int v69;
  int v70;
  uint64_t v71;

  v8 = a5;
  v64 = a2;
  v63 = *(_DWORD *)(a1 + 28);
  v9 = *(_DWORD *)(a1 + 4);
  v10 = *(_DWORD *)(a1 + 8);
  v69 = v10;
  v70 = v9;
  v11 = *(int **)(a1 + 136);
  if (v11)
  {
    v12 = *(_DWORD *)(a1 + 104);
    LODWORD(v71) = *(_DWORD *)(a1 + 108);
    HIDWORD(v71) = v12;
    shape_enum_clip_alloc(a1, a2, v11, 1, 1, 1, v12, v71, v9, v10);
    v14 = v13;
    if (v13)
      goto LABEL_50;
  }
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v71 = 0;
  while (1)
  {
    v17 = *(_DWORD *)(a1 + 76);
    v18 = *(_QWORD *)(a1 + 88) + v17 * (uint64_t)(a4 + v16 * v8) + 8 * (v15 + a3);
    v19 = *(int *)(a1 + 16) + (uint64_t)v16;
    v20 = *(_QWORD *)(a1 + 48);
    v21 = (char *)(*(_QWORD *)(a1 + 40) + v19 * v63 + 4 * (*(_DWORD *)(a1 + 12) + v15));
    v22 = v17 * (uint64_t)v8;
    v68 = v14;
    if (v64 == 2)
    {
      if (v20)
        v23 = 0;
      else
        v23 = 255;
      if (v10 >= 1)
      {
        v24 = (int8x16_t)vdupq_n_s32(v23);
        v25.i64[0] = 0xFF000000FF0000;
        v25.i64[1] = 0xFF000000FF0000;
        v26.i64[0] = 0xFF000000FF00;
        v26.i64[1] = 0xFF000000FF00;
        v27.i64[0] = 0xFF000000FFLL;
        v27.i64[1] = 0xFF000000FFLL;
        v28.i64[0] = 0x1000100010001;
        v28.i64[1] = 0x1000100010001;
        do
        {
          v29 = v9;
          v30 = (uint32x4_t *)v21;
          v31 = (__int32 *)v18;
          v32 = v9;
          if (v9 >= 4)
          {
            do
            {
              v33.i32[0] = v31[1];
              v33.i32[1] = v31[3];
              v33.i32[2] = v31[5];
              v33.i32[3] = v31[7];
              v34 = *(_OWORD *)&vshrq_n_u32((uint32x4_t)v33, 0x10uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
              v35 = vaddvq_s32((int32x4_t)v34);
              if (v35)
              {
                v36.i32[0] = *v31;
                v36.i32[1] = v31[2];
                v36.i32[2] = v31[4];
                v36.i32[3] = v31[6];
                v37 = (int32x4_t)vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vshlq_n_s32(v33, 8uLL), v26), vorrq_s8((int8x16_t)vshlq_n_s32(v36, 0x18uLL), vandq_s8((int8x16_t)v36, v25))), (int8x16_t)v34);
                if (v35 != 1020)
                {
                  v38 = (int32x4_t)veorq_s8((int8x16_t)v34, v27);
                  v39.i16[0] = v30->u8[0];
                  v39.i16[1] = BYTE2(v30->u32[0]);
                  v39.i16[2] = BYTE4(v30->i64[0]);
                  v39.i16[3] = BYTE6(v30->i64[0]);
                  v39.i16[4] = v30->i64[1];
                  v39.i16[5] = BYTE2(v30->i64[1]);
                  v39.i16[6] = BYTE12(*(unsigned __int128 *)v30);
                  v39.i16[7] = BYTE14(*(unsigned __int128 *)v30);
                  v40 = vmulq_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(*v30, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v38);
                  v41 = vmulq_s32(v39, v38);
                  v37 = vaddq_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)vaddq_s32(vaddq_s32(v41, v28), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v41, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))), 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), vaddq_s32(v37, (int32x4_t)(*(_OWORD *)&vaddq_s32(vaddq_s32(v40, v28), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v40, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))) & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00))));
                }
                *(int8x16_t *)v30 = vorrq_s8((int8x16_t)v37, v24);
              }
              v29 = v32 - 4;
              v31 += 8;
              ++v30;
              v42 = v32 > 7;
              v32 -= 4;
            }
            while (v42);
          }
          if (v29 >= 1)
          {
            v43 = v29 + 1;
            do
            {
              v44 = v31[1];
              if (BYTE2(v44))
              {
                v45 = *v31 & 0xFF0000 | (*v31 << 24) | (v31[1] << 8) | BYTE2(v31[1]);
                if (BYTE2(v44) != 255)
                  v45 += ((((v30->i32[0] & 0xFF00FF) * (BYTE2(v44) ^ 0xFF)
                          + 65537
                          + ((((v30->i32[0] & 0xFF00FF) * (BYTE2(v44) ^ 0xFFu)) >> 8) & 0xFF00FF)) >> 8) & 0xFF00FF)
                       + (((((unsigned __int32)v30->i32[0] >> 8) & 0xFF00FF) * (BYTE2(v44) ^ 0xFF)
                         + 65537
                         + ((((((unsigned __int32)v30->i32[0] >> 8) & 0xFF00FF) * (BYTE2(v44) ^ 0xFF)) >> 8) & 0xFF00FF)) & 0xFF00FF00);
                v30->i32[0] = v45 | v23;
              }
              v30 = (uint32x4_t *)((char *)v30 + 4);
              --v43;
              v31 += 2;
            }
            while (v43 > 1);
          }
          v18 += v22;
          v21 += v63;
          v42 = v10-- <= 1;
        }
        while (!v42);
      }
    }
    else
    {
      v46 = 0;
      if (v20)
        v46 = *(_QWORD *)(a1 + 96) != 0;
      if (v9 < 0)
        _CGHandleAssert("CGSConvertBGRA16toARGB8888", 454, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-argb8.c", "width >= 0", "width (%d) is negative", a6, a7, a8, v9);
      if (v10 < 0)
        _CGHandleAssert("CGSConvertBGRA16toARGB8888", 454, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-argb8.c", "height >= 0", "height (%d) is negative", a6, a7, a8, v10);
      v47 = v10 - 1;
      if (v63 < 0)
      {
        v18 += (int)v47 * (uint64_t)(int)v22;
        LODWORD(v22) = -(int)v22;
        v48 = -v63;
        v21 += v47 * v63;
      }
      else
      {
        v48 = v63;
      }
      v49 = v18 + (int)((v22 * v47) & ((int)v22 >> 31));
      v50 = v21;
      if (v49 <= (unint64_t)&v21[v10 * (uint64_t)v48])
      {
        v51 = (int)v22 >= 0 ? v22 : -(int)v22;
        v50 = v21;
        if (v49 + v10 * (uint64_t)v51 >= (unint64_t)v21)
        {
          v52 = v48;
          v53 = (char *)malloc_type_malloc(v10 * (uint64_t)v48, 0xE59009BCuLL);
          v48 = v52;
          v50 = v53;
        }
      }
      if (v10 >= 1)
      {
        for (i = 0; i != v10; ++i)
        {
          if (v9 >= 1)
          {
            v55 = &v50[i * v48];
            v56 = v9;
            v57 = (char *)(v18 + i * (int)v22);
            do
            {
              v58 = *v57;
              v59 = v57[2];
              v60 = v57[4];
              v61 = v57[6];
              if (!v46)
                v61 = -1;
              *v55 = v61;
              v55[1] = v60;
              v55[2] = v59;
              v55[3] = v58;
              v57 += 8;
              v55 += 4;
              --v56;
            }
            while (v56);
          }
        }
      }
      v8 = a5;
      if (v50 != v21)
      {
        CGBlt_copyBytes(4 * v9, v10, v50, v21, v48, v48);
        free(v50);
      }
    }
    v14 = v68;
    if (!v68)
      break;
LABEL_50:
    if (!shape_enum_clip_next((uint64_t)v14, (int *)&v71 + 1, &v71, &v70, &v69))
    {
      free(v14);
      return;
    }
    v16 = v71;
    v15 = HIDWORD(v71);
    v10 = v69;
    v9 = v70;
  }
}

unint64_t rgba32_image_mark_RGBA64(unint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v6;
  unsigned __int16 *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  unint64_t v33;
  unsigned __int16 *v34;
  unsigned __int16 *v35;
  unint64_t v36;
  unsigned __int16 *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int16 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int16 *v53;
  unint64_t v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unint64_t v57;
  unsigned __int16 *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unsigned __int16 *v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  char *v67;
  int v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  unsigned __int16 v81;
  unint64_t v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t *v103;

  v6 = *((unsigned __int8 *)a2 + 8);
  v97 = *a2;
  v7 = *(unsigned __int16 **)(result + 32);
  if (*(_QWORD *)(result + 40))
    v8 = 0;
  else
    v8 = 0xFFFFLL;
  v9 = (unsigned int *)*((_QWORD *)a2 + 2);
  v96 = *((_QWORD *)a2 + 3) - a5;
  v11 = *((_QWORD *)a2 + 15);
  v10 = *((_QWORD *)a2 + 16);
  v12 = *((_QWORD *)a2 + 7);
  v93 = *((_QWORD *)a2 + 9);
  v13 = *((_QWORD *)a2 + 5) + v93 * a4;
  v14 = (char *)v7
      + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
      + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3);
  v101 = result;
  v94 = v12;
  v95 = v11;
  if (*(_QWORD *)(result + 176))
  {
    v89 = ~(-1 << v12);
    v90 = *((_QWORD *)a2 + 13);
    v91 = *((_QWORD *)a2 + 11);
    v88 = v12 - 4;
    v15 = (unsigned __int16 *)(v14 - 8);
    v16 = v8 << 48;
    v86 = a5;
    v87 = -v11;
    v85 = v10 + 16 * a3 + 8;
    while (1)
    {
      if (((v90 - v13) | (v13 - v91)) < 0)
      {
        v21 = 0;
        v102 = 0;
      }
      else
      {
        v17 = ((v13 & (unint64_t)v89) >> v88) & 0xF;
        v18 = weights_19497[v17];
        v19 = (unint64_t)(v17 - 7) >= 9;
        v20 = v87;
        if (!v19)
          v20 = v11;
        v102 = v20;
        v21 = v18 & 0xF;
      }
      v22 = *(_QWORD *)(v101 + 32) + (v13 >> v12) * v11;
      v99 = a6;
      v98 = v13;
      if (v97 != 1)
        break;
      if (a5 >= 1)
      {
        v23 = (uint64_t *)v85;
        v24 = v86;
        while (1)
        {
          v25 = *(v23 - 1);
          v26 = *v23;
          v27 = v22 + v25;
          if ((unint64_t)v15 >= v22 + v25)
            v28 = (unsigned __int16 *)(v22 + v25);
          else
            v28 = v15;
          if (v28 < v7)
            v28 = v7;
          v29 = ((unint64_t)(bswap32(v28[3]) >> 16) << 48) | ((unint64_t)(bswap32(v28[2]) >> 16) << 32) | bswap32(v28[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v28) >> 16);
          v30 = *v23 & 0xF;
          if ((v26 & 0xF) != 0)
            break;
          if (v21)
          {
            v42 = (unsigned __int16 *)(v27 + v102);
            if ((unint64_t)v15 < v27 + v102)
              v42 = v15;
            if (v42 < v7)
              v42 = v7;
            v43 = BLEND16_19498[v21];
            v40 = v29 - ((v43 & v29) >> v21);
            v41 = ((((unint64_t)(bswap32(v42[3]) >> 16) << 48) | ((unint64_t)(bswap32(v42[2]) >> 16) << 32) | bswap32(v42[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v42) >> 16)) & v43) >> v21;
            goto LABEL_42;
          }
LABEL_43:
          result = ((v29 | v16) >> 56) | (BYTE1(v29) << 24) | (BYTE3(v29) << 16) | WORD2(v29) & 0xFF00;
          if (v6 != 255)
            result = PDM_19476(result, v6);
          v23 += 2;
          *v9++ = result;
          if (!--v24)
            goto LABEL_85;
        }
        v31 = v26 >> 4;
        v32 = (unsigned __int16 *)(v27 + (v26 >> 4));
        if (v15 < v32)
          v32 = v15;
        if (v32 < v7)
          v32 = v7;
        v33 = ((unint64_t)(bswap32(v32[3]) >> 16) << 48) | ((unint64_t)(bswap32(v32[2]) >> 16) << 32) | bswap32(v32[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v32) >> 16);
        if (v21)
        {
          v34 = (unsigned __int16 *)(v27 + v102);
          if (v15 >= v34)
            v35 = v34;
          else
            v35 = v15;
          if (v35 < v7)
            v35 = v7;
          v36 = ((unint64_t)(bswap32(v35[3]) >> 16) << 48) | ((unint64_t)(bswap32(v35[2]) >> 16) << 32) | bswap32(v35[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v35) >> 16);
          v37 = (unsigned __int16 *)((char *)v34 + v31);
          if (v15 < v37)
            v37 = v15;
          if (v37 < v7)
            v37 = v7;
          v38 = BLEND16_19498[v21];
          v29 = v29 - ((v38 & v29) >> v21) + ((v36 & v38) >> v21);
          v33 = v33
              - ((v38 & v33) >> v21)
              + (((((unint64_t)(bswap32(v37[3]) >> 16) << 48) | ((unint64_t)(bswap32(v37[2]) >> 16) << 32) | bswap32(v37[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v37) >> 16)) & v38) >> v21);
        }
        v39 = BLEND16_19498[v30];
        v40 = v29 - ((v39 & v29) >> v30);
        v41 = (v39 & v33) >> v30;
LABEL_42:
        v29 = v40 + v41;
        goto LABEL_43;
      }
LABEL_85:
      v11 = v95;
      v9 += v96;
      LOBYTE(v12) = v94;
      v13 = v98 + v93;
      a6 = v99 - 1;
      if (v99 == 1)
        return result;
    }
    if (a5 < 1)
      goto LABEL_85;
    v45 = (uint64_t *)v85;
    v44 = v86;
    while (1)
    {
      v46 = *(v45 - 1);
      v47 = *v45;
      v48 = v22 + v46;
      if ((unint64_t)v15 >= v22 + v46)
        v49 = (unsigned __int16 *)(v22 + v46);
      else
        v49 = v15;
      if (v49 < v7)
        v49 = v7;
      v50 = ((unint64_t)(bswap32(v49[3]) >> 16) << 48) | ((unint64_t)(bswap32(v49[2]) >> 16) << 32) | bswap32(v49[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v49) >> 16);
      v51 = *v45 & 0xF;
      if ((v47 & 0xF) != 0)
        break;
      if (v21)
      {
        v63 = (unsigned __int16 *)(v48 + v102);
        if ((unint64_t)v15 < v48 + v102)
          v63 = v15;
        if (v63 < v7)
          v63 = v7;
        v64 = BLEND16_19498[v21];
        v61 = v50 - ((v64 & v50) >> v21);
        v62 = ((((unint64_t)(bswap32(v63[3]) >> 16) << 48) | ((unint64_t)(bswap32(v63[2]) >> 16) << 32) | bswap32(v63[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v63) >> 16)) & v64) >> v21;
        goto LABEL_77;
      }
LABEL_78:
      v65 = ((v50 | v16) >> 56) | (BYTE1(v50) << 24) | (BYTE3(v50) << 16);
      v66 = v65 | WORD2(v50) & 0xFF00;
      if (v6 != 255)
      {
        result = PDM_19476(v65 | WORD2(v50) & 0xFF00, v6);
        v66 = result;
      }
      if ((_BYTE)v66)
      {
        if (v66 == 255)
          *v9 = v66;
        else
          result = (unint64_t)DplusDM_19478(v9, v66, *v9, ~(_BYTE)v66);
      }
      v45 += 2;
      ++v9;
      if (!--v44)
        goto LABEL_85;
    }
    v52 = v47 >> 4;
    v53 = (unsigned __int16 *)(v48 + (v47 >> 4));
    if (v15 < v53)
      v53 = v15;
    if (v53 < v7)
      v53 = v7;
    v54 = ((unint64_t)(bswap32(v53[3]) >> 16) << 48) | ((unint64_t)(bswap32(v53[2]) >> 16) << 32) | bswap32(v53[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v53) >> 16);
    if (v21)
    {
      v55 = (unsigned __int16 *)(v48 + v102);
      if (v15 >= v55)
        v56 = v55;
      else
        v56 = v15;
      if (v56 < v7)
        v56 = v7;
      v57 = ((unint64_t)(bswap32(v56[3]) >> 16) << 48) | ((unint64_t)(bswap32(v56[2]) >> 16) << 32) | bswap32(v56[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v56) >> 16);
      v58 = (unsigned __int16 *)((char *)v55 + v52);
      if (v15 < v58)
        v58 = v15;
      if (v58 < v7)
        v58 = v7;
      v59 = BLEND16_19498[v21];
      v50 = v50 - ((v59 & v50) >> v21) + ((v57 & v59) >> v21);
      v54 = v54
          - ((v59 & v54) >> v21)
          + (((((unint64_t)(bswap32(v58[3]) >> 16) << 48) | ((unint64_t)(bswap32(v58[2]) >> 16) << 32) | bswap32(v58[1]) & 0xFFFF0000 | (unint64_t)(bswap32(*v58) >> 16)) & v59) >> v21);
    }
    v60 = BLEND16_19498[v51];
    v61 = v50 - ((v60 & v50) >> v51);
    v62 = (v60 & v54) >> v51;
LABEL_77:
    v50 = v61 + v62;
    goto LABEL_78;
  }
  v103 = (uint64_t *)(v10 + 16 * a3);
  v67 = v14 - 8;
  v100 = a5;
  do
  {
    v68 = a6;
    v69 = v13;
    v70 = *(char **)(v101 + 32);
    v71 = &v70[(v13 >> v12) * v11];
    if (v97 == 1)
    {
      if (a5 >= 1)
      {
        v72 = v103;
        v73 = v100;
        do
        {
          v74 = *v72;
          v72 += 2;
          v75 = &v71[v74];
          if (v67 < &v71[v74])
            v75 = v67;
          if (v75 < v70)
            v75 = v70;
          HIDWORD(v76) = *(unsigned __int16 *)v75;
          LODWORD(v76) = v8 | (*((_WORD *)v75 + 3) << 8);
          result = (v76 >> 8) | (v75[2] << 16) | (*((_WORD *)v75 + 2) << 8);
          if (v6 != 255)
            result = PDM_19476(result, v6);
          *v9++ = result;
          --v73;
        }
        while (v73);
      }
    }
    else
    {
      v77 = v103;
      v78 = v100;
      if (a5 >= 1)
      {
        do
        {
          v79 = *v77;
          v77 += 2;
          v80 = &v71[v79];
          if (v67 < &v71[v79])
            v80 = v67;
          if ((unint64_t)v80 < *(_QWORD *)(v101 + 32))
            v80 = *(char **)(v101 + 32);
          v81 = *((_WORD *)v80 + 2);
          HIDWORD(v82) = *(unsigned __int16 *)v80;
          LODWORD(v82) = v8 | (*((_WORD *)v80 + 3) << 8);
          v83 = (v82 >> 8) | (v80[2] << 16);
          v84 = v83 | (v81 << 8);
          if (v6 != 255)
          {
            result = PDM_19476(v83 | (v81 << 8), v6);
            v84 = result;
          }
          if ((_BYTE)v84)
          {
            if (v84 == 255)
              *v9 = v84;
            else
              result = (unint64_t)DplusDM_19478(v9, v84, *v9, ~(_BYTE)v84);
          }
          ++v9;
          --v78;
        }
        while (v78);
      }
    }
    v11 = v95;
    v9 += v96;
    LOBYTE(v12) = v94;
    v13 = v69 + v93;
    a6 = v68 - 1;
  }
  while (v68 != 1);
  return result;
}

void rgba32_mark_image_rgba64(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int *v11;
  int v12;
  void *v13;
  void *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int32x4_t v28;
  int v29;
  uint32x4_t *v30;
  __int32 *v31;
  unsigned int v32;
  int8x16_t v33;
  int32x4_t v34;
  int v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  _BOOL4 v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  char *v50;
  int v51;
  int v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  int v58;
  char v59;
  char v60;
  char v61;
  char v62;
  int v64;
  int v65;
  void *v69;
  int v70;
  int v71;
  uint64_t v72;

  v8 = a5;
  v65 = a2;
  v64 = *(_DWORD *)(a1 + 28);
  v9 = *(_DWORD *)(a1 + 4);
  v10 = *(_DWORD *)(a1 + 8);
  v70 = v10;
  v71 = v9;
  v11 = *(int **)(a1 + 136);
  if (v11)
  {
    v12 = *(_DWORD *)(a1 + 104);
    LODWORD(v72) = *(_DWORD *)(a1 + 108);
    HIDWORD(v72) = v12;
    shape_enum_clip_alloc(a1, a2, v11, 1, 1, 1, v12, v72, v9, v10);
    v14 = v13;
    if (v13)
      goto LABEL_50;
  }
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v72 = 0;
  while (1)
  {
    v17 = *(_DWORD *)(a1 + 76);
    v18 = *(_QWORD *)(a1 + 88) + v17 * (uint64_t)(a4 + v16 * v8) + 8 * (v15 + a3);
    v19 = *(int *)(a1 + 16) + (uint64_t)v16;
    v20 = *(_QWORD *)(a1 + 48);
    v21 = (char *)(*(_QWORD *)(a1 + 40) + v19 * v64 + 4 * (*(_DWORD *)(a1 + 12) + v15));
    v22 = v17 * (uint64_t)v8;
    v69 = v14;
    if (v65 == 2)
    {
      if (v20)
        v23 = 0;
      else
        v23 = 255;
      if (v10 >= 1)
      {
        v24 = (int8x16_t)vdupq_n_s32(v23);
        v25.i64[0] = 0xFF000000FF0000;
        v25.i64[1] = 0xFF000000FF0000;
        v26.i64[0] = 0xFF000000FF00;
        v26.i64[1] = 0xFF000000FF00;
        v27.i64[0] = 0xFF000000FFLL;
        v27.i64[1] = 0xFF000000FFLL;
        v28.i64[0] = 0x1000100010001;
        v28.i64[1] = 0x1000100010001;
        do
        {
          v29 = v9;
          v30 = (uint32x4_t *)v21;
          v31 = (__int32 *)v18;
          v32 = v9;
          if (v9 >= 4)
          {
            do
            {
              v33.i32[0] = v31[1];
              v33.i32[1] = v31[3];
              v33.i32[2] = v31[5];
              v33.i32[3] = v31[7];
              v34 = (int32x4_t)vshrq_n_u32((uint32x4_t)v33, 0x18uLL);
              v35 = vaddvq_s32(v34);
              if (v35)
              {
                v36.i32[0] = *v31;
                v36.i32[1] = v31[2];
                v36.i32[2] = v31[4];
                v36.i32[3] = v31[6];
                v37 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v36, 0x10uLL) & __PAIR128__(0xFF00FFFFFF00FFFFLL, 0xFF00FFFFFF00FFFFLL)), vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v36, 8uLL), v25)), vorrq_s8(vandq_s8(v33, v26), (int8x16_t)v34));
                if (v35 != 1020)
                {
                  v38 = (int32x4_t)veorq_s8((int8x16_t)v34, v27);
                  v39.i16[0] = v30->u8[0];
                  v39.i16[1] = BYTE2(v30->u32[0]);
                  v39.i16[2] = BYTE4(v30->i64[0]);
                  v39.i16[3] = BYTE6(v30->i64[0]);
                  v39.i16[4] = v30->i64[1];
                  v39.i16[5] = BYTE2(v30->i64[1]);
                  v39.i16[6] = BYTE12(*(unsigned __int128 *)v30);
                  v39.i16[7] = BYTE14(*(unsigned __int128 *)v30);
                  v40 = vmulq_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(*v30, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v38);
                  v41 = vmulq_s32(v39, v38);
                  v37 = vaddq_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)vaddq_s32(vaddq_s32(v41, v28), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v41, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))), 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), vaddq_s32(v37, (int32x4_t)(*(_OWORD *)&vaddq_s32(vaddq_s32(v40, v28), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v40, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))) & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00))));
                }
                *(int8x16_t *)v30 = vorrq_s8((int8x16_t)v37, v24);
              }
              v29 = v32 - 4;
              v31 += 8;
              ++v30;
              v42 = v32 > 7;
              v32 -= 4;
            }
            while (v42);
          }
          if (v29 >= 1)
          {
            v43 = v29 + 1;
            do
            {
              v44 = HIBYTE(v31[1]);
              if (v44)
              {
                v45 = (*v31 << 16) & 0xFF000000 | (*v31 >> 8) & 0xFFFF0000 | v31[1] & 0xFF00 | HIBYTE(v31[1]);
                if (v44 != 255)
                  v45 += ((((v30->i32[0] & 0xFF00FF) * (v44 ^ 0xFF)
                          + 65537
                          + ((((v30->i32[0] & 0xFF00FF) * (v44 ^ 0xFF)) >> 8) & 0xFF00FF)) >> 8) & 0xFF00FF)
                       + (((((unsigned __int32)v30->i32[0] >> 8) & 0xFF00FF) * (v44 ^ 0xFF)
                         + 65537
                         + ((((((unsigned __int32)v30->i32[0] >> 8) & 0xFF00FF) * (v44 ^ 0xFF)) >> 8) & 0xFF00FF)) & 0xFF00FF00);
                v30->i32[0] = v45 | v23;
              }
              v30 = (uint32x4_t *)((char *)v30 + 4);
              --v43;
              v31 += 2;
            }
            while (v43 > 1);
          }
          v18 += v22;
          v21 += v64;
          v42 = v10-- <= 1;
        }
        while (!v42);
      }
    }
    else
    {
      v46 = 0;
      if (v20)
        v46 = *(_QWORD *)(a1 + 96) != 0;
      if (v9 < 0)
        _CGHandleAssert("CGSConvertbgra16toARGB8888", 616, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-argb8.c", "width >= 0", "width (%d) is negative", a6, a7, a8, v9);
      if (v10 < 0)
        _CGHandleAssert("CGSConvertbgra16toARGB8888", 616, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-argb8.c", "height >= 0", "height (%d) is negative", a6, a7, a8, v10);
      v47 = v10 - 1;
      if (v64 < 0)
      {
        v18 += (int)v47 * (uint64_t)(int)v22;
        LODWORD(v22) = -(int)v22;
        v48 = -v64;
        v21 += v47 * v64;
      }
      else
      {
        v48 = v64;
      }
      v49 = v18 + (int)((v22 * v47) & ((int)v22 >> 31));
      v50 = v21;
      if (v49 <= (unint64_t)&v21[v10 * (uint64_t)v48])
      {
        v51 = (int)v22 >= 0 ? v22 : -(int)v22;
        v50 = v21;
        if (v49 + v10 * (uint64_t)v51 >= (unint64_t)v21)
        {
          v52 = v48;
          v53 = (char *)malloc_type_malloc(v10 * (uint64_t)v48, 0x3B8016C8uLL);
          v48 = v52;
          v50 = v53;
        }
      }
      if (v10 >= 1)
      {
        v54 = 0;
        v55 = (char *)(v18 + 3);
        do
        {
          if (v9 >= 1)
          {
            v56 = &v50[v54 * v48];
            v57 = v55;
            v58 = v9;
            do
            {
              v59 = *(v57 - 2);
              v60 = *v57;
              v61 = v57[2];
              v62 = v57[4];
              if (!v46)
                v62 = -1;
              *v56 = v62;
              v56[1] = v61;
              v56[2] = v60;
              v56[3] = v59;
              v56 += 4;
              v57 += 8;
              --v58;
            }
            while (v58);
          }
          ++v54;
          v55 += (int)v22;
        }
        while (v54 != v10);
      }
      v8 = a5;
      if (v50 != v21)
      {
        CGBlt_copyBytes(4 * v9, v10, v50, v21, v48, v48);
        free(v50);
      }
    }
    v14 = v69;
    if (!v69)
      break;
LABEL_50:
    if (!shape_enum_clip_next((uint64_t)v14, (int *)&v72 + 1, &v72, &v71, &v70))
    {
      free(v14);
      return;
    }
    v16 = v72;
    v15 = HIDWORD(v72);
    v10 = v70;
    v9 = v71;
  }
}

unint64_t rgba32_image_mark_rgba64(unint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v6;
  char *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  int v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t *v102;

  v6 = *((unsigned __int8 *)a2 + 8);
  v95 = *a2;
  v7 = *(char **)(result + 32);
  if (*(_QWORD *)(result + 40))
    v8 = 0;
  else
    v8 = 0xFFFFLL;
  v9 = (unsigned int *)*((_QWORD *)a2 + 2);
  v94 = *((_QWORD *)a2 + 3) - a5;
  v11 = *((_QWORD *)a2 + 15);
  v10 = *((_QWORD *)a2 + 16);
  v12 = *((_QWORD *)a2 + 7);
  v91 = *((_QWORD *)a2 + 9);
  v13 = *((_QWORD *)a2 + 5) + v91 * a4;
  v14 = &v7[(*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
          + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3)];
  v100 = result;
  v96 = a5;
  v92 = v12;
  v93 = v11;
  if (*(_QWORD *)(result + 176))
  {
    v88 = ~(-1 << v12);
    v89 = *((_QWORD *)a2 + 13);
    v90 = *((_QWORD *)a2 + 11);
    v87 = v12 - 4;
    v15 = v14 - 8;
    v16 = v8 << 48;
    v85 = a5;
    v86 = -v11;
    v84 = v10 + 16 * a3 + 8;
    while (1)
    {
      if (((v89 - v13) | (v13 - v90)) < 0)
      {
        v21 = 0;
        v101 = 0;
      }
      else
      {
        v17 = ((v13 & (unint64_t)v88) >> v87) & 0xF;
        v18 = weights_19497[v17];
        v19 = (unint64_t)(v17 - 7) >= 9;
        v20 = v86;
        if (!v19)
          v20 = v11;
        v101 = v20;
        v21 = v18 & 0xF;
      }
      v22 = *(_QWORD *)(v100 + 32) + (v13 >> v12) * v11;
      v98 = a6;
      v97 = v13;
      if (v95 != 1)
        break;
      if (a5 >= 1)
      {
        v23 = (uint64_t *)v84;
        v24 = v85;
        while (1)
        {
          v25 = *(v23 - 1);
          v26 = *v23;
          v27 = v22 + v25;
          if ((unint64_t)v15 >= v22 + v25)
            v28 = (char *)(v22 + v25);
          else
            v28 = v15;
          if (v28 < v7)
            v28 = v7;
          v29 = *(_QWORD *)v28;
          v30 = *v23 & 0xF;
          if ((v26 & 0xF) != 0)
            break;
          if (v21)
          {
            v42 = (char *)(v27 + v101);
            if ((unint64_t)v15 < v27 + v101)
              v42 = v15;
            if (v42 < v7)
              v42 = v7;
            v43 = BLEND16_19498[v21];
            v40 = v29 - ((v43 & v29) >> v21);
            v41 = (v43 & *(_QWORD *)v42) >> v21;
            goto LABEL_42;
          }
LABEL_43:
          result = ((v29 | v16) >> 56) | (BYTE1(v29) << 24) | (BYTE3(v29) << 16) | WORD2(v29) & 0xFF00;
          if (v6 != 255)
            result = PDM_19476(result, v6);
          v23 += 2;
          *v9++ = result;
          if (!--v24)
            goto LABEL_85;
        }
        v31 = v26 >> 4;
        v32 = (char *)(v27 + (v26 >> 4));
        if (v15 < v32)
          v32 = v15;
        if (v32 < v7)
          v32 = v7;
        v33 = *(_QWORD *)v32;
        if (v21)
        {
          v34 = (char *)(v27 + v101);
          if (v15 >= v34)
            v35 = v34;
          else
            v35 = v15;
          if (v35 < v7)
            v35 = v7;
          v36 = *(_QWORD *)v35;
          v37 = &v34[v31];
          if (v15 < v37)
            v37 = v15;
          if (v37 < v7)
            v37 = v7;
          v38 = BLEND16_19498[v21];
          v29 = v29 - ((v38 & v29) >> v21) + ((v38 & v36) >> v21);
          v33 = v33 - ((v38 & v33) >> v21) + ((v38 & *(_QWORD *)v37) >> v21);
        }
        v39 = BLEND16_19498[v30];
        v40 = v29 - ((v39 & v29) >> v30);
        v41 = (v39 & v33) >> v30;
LABEL_42:
        v29 = v40 + v41;
        goto LABEL_43;
      }
LABEL_85:
      v11 = v93;
      v9 += v94;
      LOBYTE(v12) = v92;
      v13 = v97 + v91;
      a6 = v98 - 1;
      a5 = v96;
      if (v98 == 1)
        return result;
    }
    if (a5 < 1)
      goto LABEL_85;
    v44 = (uint64_t *)v84;
    v45 = v85;
    while (1)
    {
      v46 = *(v44 - 1);
      v47 = *v44;
      v48 = v22 + v46;
      if ((unint64_t)v15 >= v22 + v46)
        v49 = (char *)(v22 + v46);
      else
        v49 = v15;
      if (v49 < v7)
        v49 = v7;
      v50 = *(_QWORD *)v49;
      v51 = *v44 & 0xF;
      if ((v47 & 0xF) != 0)
        break;
      if (v21)
      {
        v63 = (char *)(v48 + v101);
        if ((unint64_t)v15 < v48 + v101)
          v63 = v15;
        if (v63 < v7)
          v63 = v7;
        v64 = BLEND16_19498[v21];
        v61 = v50 - ((v64 & v50) >> v21);
        v62 = (v64 & *(_QWORD *)v63) >> v21;
        goto LABEL_77;
      }
LABEL_78:
      v65 = ((v50 | v16) >> 56) | (BYTE1(v50) << 24) | (BYTE3(v50) << 16);
      v66 = v65 | WORD2(v50) & 0xFF00;
      if (v6 != 255)
      {
        result = PDM_19476(v65 | WORD2(v50) & 0xFF00, v6);
        v66 = result;
      }
      if ((_BYTE)v66)
      {
        if (v66 == 255)
          *v9 = v66;
        else
          result = (unint64_t)DplusDM_19478(v9, v66, *v9, ~(_BYTE)v66);
      }
      v44 += 2;
      ++v9;
      if (!--v45)
        goto LABEL_85;
    }
    v52 = v47 >> 4;
    v53 = (char *)(v48 + (v47 >> 4));
    if (v15 < v53)
      v53 = v15;
    if (v53 < v7)
      v53 = v7;
    v54 = *(_QWORD *)v53;
    if (v21)
    {
      v55 = (char *)(v48 + v101);
      if (v15 >= v55)
        v56 = v55;
      else
        v56 = v15;
      if (v56 < v7)
        v56 = v7;
      v57 = *(_QWORD *)v56;
      v58 = &v55[v52];
      if (v15 < v58)
        v58 = v15;
      if (v58 < v7)
        v58 = v7;
      v59 = BLEND16_19498[v21];
      v50 = v50 - ((v59 & v50) >> v21) + ((v59 & v57) >> v21);
      v54 = v54 - ((v59 & v54) >> v21) + ((v59 & *(_QWORD *)v58) >> v21);
    }
    v60 = BLEND16_19498[v51];
    v61 = v50 - ((v60 & v50) >> v51);
    v62 = (v60 & v54) >> v51;
LABEL_77:
    v50 = v61 + v62;
    goto LABEL_78;
  }
  v102 = (uint64_t *)(v10 + 16 * a3);
  v67 = v14 - 8;
  v68 = v8 << 48;
  v99 = a5;
  do
  {
    v69 = *(char **)(v100 + 32);
    v70 = &v69[(v13 >> v12) * v11];
    v71 = v13;
    v72 = a6;
    if (v95 == 1)
    {
      if (a5 >= 1)
      {
        v73 = v102;
        v74 = v99;
        do
        {
          v75 = *v73;
          v73 += 2;
          v76 = &v70[v75];
          if (v67 < &v70[v75])
            v76 = v67;
          if (v76 < v69)
            v76 = v69;
          result = ((*(_QWORD *)v76 | (unint64_t)v68) >> 56) | (BYTE1(*(_QWORD *)v76) << 24) | (BYTE3(*(_QWORD *)v76) << 16) | HIDWORD(*(_QWORD *)v76) & 0xFF00;
          if (v6 != 255)
            result = PDM_19476(result, v6);
          *v9++ = result;
          --v74;
        }
        while (v74);
      }
    }
    else
    {
      v77 = v102;
      v78 = v99;
      if (a5 >= 1)
      {
        do
        {
          v79 = *v77;
          v77 += 2;
          v80 = &v70[v79];
          if (v67 < &v70[v79])
            v80 = v67;
          if ((unint64_t)v80 < *(_QWORD *)(v100 + 32))
            v80 = *(char **)(v100 + 32);
          v81 = *(_QWORD *)v80;
          v82 = ((v81 | (unint64_t)v68) >> 56) | (BYTE1(v81) << 24) | (BYTE3(v81) << 16);
          v83 = v82 | WORD2(v81) & 0xFF00;
          if (v6 != 255)
          {
            result = PDM_19476(v82 | WORD2(v81) & 0xFF00, v6);
            v83 = result;
          }
          if ((_BYTE)v83)
          {
            if (v83 == 255)
              *v9 = v83;
            else
              result = (unint64_t)DplusDM_19478(v9, v83, *v9, ~(_BYTE)v83);
          }
          ++v9;
          --v78;
        }
        while (v78);
      }
    }
    v11 = v93;
    v9 += v94;
    LOBYTE(v12) = v92;
    v13 = v71 + v91;
    a6 = v72 - 1;
    a5 = v96;
  }
  while (v72 != 1);
  return result;
}

_DWORD *DplusDAM_19500(_DWORD *result, unsigned int a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v5;
  unint64_t v6;

  v5 = ((((((a3 & 0xFF0000 | a4) * a5 + 8388736) >> 8) & 0xFF00FF) + (a3 & 0xFF0000 | a4) * a5 + 8388736) >> 8) & 0xFF00FF | ((((((a3 >> 8) & 0xFF00FF) * a5 + 8388736) >> 8) & 0xFF00FF) + ((a3 >> 8) & 0xFF00FF) * a5 + 8388736) & 0xFF00FF00;
  v6 = (((v5 | (unint64_t)(v5 << 40)) >> 8) & 0xFF00FF00FF00FFLL)
     + (((a2 | ((unint64_t)a2 << 40)) >> 8) & 0xFF00FF00FF00FFLL);
  *result = ((((v6 & 0x100010001000100) - ((v6 & 0x100010001000100) >> 8)) | v6) & 0xFF00FF00FF00FFLL | (((((v6 & 0x100010001000100) - ((v6 & 0x100010001000100) >> 8)) | v6) & 0xFF00FF00FF00FFLL) << 40)) >> 32;
  return result;
}

_DWORD *DAM_19501(_DWORD *result, unsigned int a2, int a3, int a4)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;

  v4 = ((a2 >> 8) & 0xFF00FF) * (a4 ^ 0xFF) + 8388736;
  v5 = (a2 & 0xFF0000 | a3 & 0xFF00FF) * (a4 ^ 0xFF) + 8388736;
  v6 = ((((v5 >> 8) & 0xFF00FF) + v5) >> 8) & 0xFF00FF | (((v4 >> 8) & 0xFF00FF) + v4) & 0xFF00FF00;
  v7 = (((a2 & 0xFFFFFF00 | a3 | ((unint64_t)(a2 & 0xFFFFFF00 | a3) << 40)) >> 8) & 0xFF00FF00FF00FFLL | 0x100010001000100)
     - (((v6 | (unint64_t)(v6 << 40)) >> 8) & 0xFF00FF00FF00FFLL);
  *result = (((v7 & 0x100010001000100) - ((v7 & 0x100010001000100) >> 8)) & v7 | ((((v7 & 0x100010001000100)
                                                                                      - ((v7 & 0x100010001000100) >> 8)) & v7) << 40)) >> 32;
  return result;
}

void rgba32_mark_pixelmask(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  _BOOL4 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  BOOL v41;
  int v42;
  int v43;
  unsigned int *v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int *v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int *v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  unsigned int *v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int *v77;
  uint64_t v78;
  unsigned int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  unsigned __int8 v86;
  unsigned __int8 v87;
  unsigned int *v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int *v91;
  uint64_t v92;
  unsigned int *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  unsigned int *v101;
  uint64_t v102;
  unsigned int *v103;
  unsigned int *v104;
  uint64_t v105;
  unsigned int *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  unsigned __int8 v113;
  unsigned __int8 v114;
  unsigned int *v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int *v118;
  uint64_t v119;
  unsigned int *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  unsigned int *v128;
  uint64_t v129;
  unsigned int *v130;
  unsigned int *v131;
  uint64_t v132;
  unsigned int *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  unsigned int v141;
  unsigned int *v142;
  uint64_t v143;
  unsigned int *v144;
  unsigned int *v145;
  uint64_t v146;
  unsigned int *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  unsigned __int8 v153;
  unsigned int v154;
  unsigned int *v155;
  uint64_t v156;
  unsigned int *v157;
  unsigned int *v158;
  uint64_t v159;
  unsigned int *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  unsigned int v167;
  unsigned int *v168;
  uint64_t v169;
  unsigned int *v170;
  unsigned int *v171;
  uint64_t v172;
  unsigned int *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  unsigned __int8 v179;
  int v180;
  uint64x2_t v181;
  unsigned __int8 v182;
  unsigned __int8 v183;
  unsigned int *v184;
  uint64_t v185;
  unsigned int *v186;
  unsigned int *v187;
  uint64_t v188;
  unsigned int *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  unsigned __int8 v195;
  unsigned int v196;
  unsigned int v197;
  unsigned __int8 v198;
  int v199;
  unsigned int v200;
  unsigned int *v201;
  uint64_t v202;
  unsigned int *v203;
  unsigned int *v204;
  uint64_t v205;
  unsigned int *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  unsigned __int8 v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int *v216;
  uint64_t v217;
  unsigned int *v218;
  unsigned int *v219;
  uint64_t v220;
  unsigned int *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  unsigned __int8 v227;
  unsigned int v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int *v231;
  uint64_t v232;
  unsigned int *v233;
  unsigned int *v234;
  uint64_t v235;
  unsigned int *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  unsigned __int8 v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int *v246;
  uint64_t v247;
  unsigned int *v248;
  unsigned int *v249;
  uint64_t v250;
  unsigned int *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  unsigned __int8 v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int *v261;
  uint64_t v262;
  unsigned int *v263;
  unsigned int *v264;
  uint64_t v265;
  unsigned int *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  unsigned __int8 v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int *v276;
  uint64_t v277;
  unsigned int *v278;
  unsigned int *v279;
  uint64_t v280;
  unsigned int *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  unsigned __int8 v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int *v291;
  uint64_t v292;
  unsigned int *v293;
  unsigned int *v294;
  uint64_t v295;
  unsigned int *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  unsigned __int8 v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int *v306;
  uint64_t v307;
  unsigned int *v308;
  unsigned int *v309;
  uint64_t v310;
  unsigned int *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  unsigned __int8 v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int *v321;
  uint64_t v322;
  unsigned int *v323;
  unsigned int *v324;
  uint64_t v325;
  unsigned int *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  unsigned __int8 v332;
  unsigned int v333;
  unsigned int v334;
  unsigned int v335;
  unsigned int *v336;
  uint64_t v337;
  unsigned int *v338;
  unsigned int *v339;
  uint64_t v340;
  unsigned int *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  unsigned __int8 v347;
  unsigned int v348;
  unsigned int v349;
  unsigned int v350;
  unsigned int *v351;
  uint64_t v352;
  unsigned int *v353;
  unsigned int *v354;
  uint64_t v355;
  unsigned int *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  unsigned __int8 v362;
  unsigned int v363;
  unsigned int v364;
  unsigned int v365;
  unsigned int *v366;
  uint64_t v367;
  unsigned int *v368;
  unsigned int *v369;
  uint64_t v370;
  unsigned int *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  int v376;
  unsigned __int8 v377;
  unsigned int v378;
  unsigned int v379;
  unsigned int v380;
  unsigned int *v381;
  uint64_t v382;
  unsigned int *v383;
  unsigned int *v384;
  uint64_t v385;
  unsigned int *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  int v391;
  unsigned __int8 v392;
  unsigned int v393;
  unsigned int v394;
  unsigned int v395;
  unsigned int *v396;
  uint64_t v397;
  unsigned int *v398;
  unsigned int *v399;
  uint64_t v400;
  unsigned int *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  int v406;
  unsigned __int8 v407;
  unsigned int v408;
  unsigned int v409;
  unsigned int v410;
  unsigned int *v411;
  uint64_t v412;
  unsigned int *v413;
  unsigned int *v414;
  uint64_t v415;
  unsigned int *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  int v421;
  unsigned __int8 v422;
  unsigned int v423;
  unsigned int v424;
  unsigned int v425;
  unsigned int *v426;
  uint64_t v427;
  unsigned int *v428;
  unsigned int *v429;
  uint64_t v430;
  unsigned int *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  int v436;
  unsigned __int8 v437;
  unsigned int v438;
  unsigned int v439;
  unsigned int v440;
  unsigned int *v441;
  uint64_t v442;
  unsigned int *v443;
  unsigned int *v444;
  uint64_t v445;
  unsigned int *v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  int v451;
  unsigned __int8 v452;
  unsigned int v453;
  unsigned int v454;
  unsigned int v455;
  unsigned int *v456;
  uint64_t v457;
  unsigned int *v458;
  unsigned int *v459;
  uint64_t v460;
  unsigned int *v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  int v466;
  unsigned __int8 v467;
  unsigned int v468;
  unsigned int v469;
  unsigned int v470;
  unsigned int *v471;
  uint64_t v472;
  unsigned int *v473;
  unsigned int *v474;
  uint64_t v475;
  unsigned int *v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  int v481;
  unsigned __int8 v482;
  unsigned int v483;
  unsigned int v484;
  unsigned int v485;
  unsigned int *v486;
  uint64_t v487;
  unsigned int *v488;
  unsigned int *v489;
  uint64_t v490;
  unsigned int *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  _BOOL4 v513;
  unint64_t v514;
  int v515;
  uint64_t v516;
  unint64_t v517;
  uint64_t v518;
  int v519;
  unsigned int *v520;
  int v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;

  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
  {
    v519 = *(_DWORD *)(a1 + 4);
    v3 = v519;
    v521 = *(_DWORD *)(a1 + 8);
    v522 = *(_QWORD *)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 88);
    v5 = *(_QWORD *)(a1 + 96);
    v6 = (unint64_t)*(int *)(a1 + 28) >> 2;
    v7 = (unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * (*(int *)(a1 + 12) + v6 * *(int *)(a1 + 16)));
    v8 = *(int *)(a1 + 124);
    v9 = (unsigned __int8 *)(v2 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v8);
    v10 = *(int *)(a1 + 56);
    v11 = *(int *)(a1 + 60);
    v12 = *(int *)(a1 + 76);
    if (*(unsigned __int8 *)(a1 + 1) << 8 != 256)
    {
      v18 = *(_DWORD *)(a1 + 64);
      v17 = *(_DWORD *)(a1 + 68);
      v13 = v12 >> 2;
      v19 = v5 != 0;
      v518 = v8 - v519;
      v517 = v6 - v519;
      if (v4)
      {
        v515 = 0;
        v514 = v4 + 4 * v13 * v17;
        v516 = v13;
        v20 = v4 + 4 * v13 * ((int)v11 % v17);
        v14 = (unsigned int *)(v20 + 4 * ((int)v10 % v18));
        v21 = v20 + 4 * v18;
        v16 = 1;
        v520 = v14;
LABEL_16:
        switch(a2)
        {
          case 0:
            v22 = v16;
            v23 = 4 * v16;
            do
            {
              v24 = v519;
              do
              {
                v25 = *v9;
                if (*v9)
                {
                  if (v25 == 255)
                    v26 = 0;
                  else
                    v26 = PDM_19476(*v7, v25 ^ 0xFFu);
                  *v7 = v26;
                }
                v9 += v22;
                v7 = (unsigned int *)((char *)v7 + v23);
                --v24;
              }
              while (v24);
              v9 += v518;
              v7 += v517;
              --v521;
            }
            while (v521);
            return;
          case 1:
            if (v522)
              v27 = v19;
            else
              v27 = 1;
            v28 = v16;
            v29 = -(uint64_t)v18;
            v30 = -(v516 * v17);
            v31 = 4 * v16;
            if ((v27 & 1) != 0)
            {
              do
              {
                v32 = v519;
                do
                {
                  v33 = *v9;
                  if (*v9)
                  {
                    if (v33 == 255)
                      *v7 = *v14;
                    else
                      DMplusDM_19477(v7, *v14, v33, *v7, v33 ^ 0xFF);
                  }
                  v9 += v28;
                  v34 = &v14[v28];
                  if ((unint64_t)v34 >= v21)
                    v35 = v29;
                  else
                    v35 = 0;
                  v14 = &v34[v35];
                  v7 = (unsigned int *)((char *)v7 + v31);
                  --v32;
                }
                while (v32);
                v9 += v518;
                v7 += v517;
                v36 = v520;
                v37 = &v520[v516];
                if ((unint64_t)v37 >= v514)
                  v38 = v30;
                else
                  v38 = 0;
                v39 = &v37[v38];
                v40 = v21 + 4 * v38 + 4 * v516;
                if (v515)
                {
                  v14 += v516;
                }
                else
                {
                  v21 = v40;
                  v36 = v39;
                  v14 = v39;
                }
                v41 = v521 == 1;
                v520 = v36;
                --v521;
              }
              while (!v41);
            }
            else
            {
              do
              {
                v42 = v519;
                do
                {
                  v43 = *v9;
                  if (*v9)
                  {
                    if (v43 == 255)
                      *v7 = *v14 | 0xFF;
                    else
                      DMplusDAM_19502(v7, *v7, v43 ^ 0xFF, *v14, 0xFFu, v43);
                  }
                  v9 += v28;
                  v44 = &v14[v28];
                  if ((unint64_t)v44 >= v21)
                    v45 = v29;
                  else
                    v45 = 0;
                  v14 = &v44[v45];
                  v7 = (unsigned int *)((char *)v7 + v31);
                  --v42;
                }
                while (v42);
                v9 += v518;
                v7 += v517;
                v46 = v520;
                v47 = &v520[v516];
                if ((unint64_t)v47 >= v514)
                  v48 = v30;
                else
                  v48 = 0;
                v49 = &v47[v48];
                v50 = v21 + 4 * v48 + 4 * v516;
                if (v515)
                {
                  v14 += v516;
                }
                else
                {
                  v21 = v50;
                  v46 = v49;
                  v14 = v49;
                }
                v41 = v521 == 1;
                v520 = v46;
                --v521;
              }
              while (!v41);
            }
            return;
          case 2:
            v51 = v16;
            v52 = -(uint64_t)v18;
            v53 = -(v516 * v17);
            v54 = 4 * v16;
            while (1)
            {
              v55 = v519;
              do
              {
                v56 = *v9;
                if (!*v9)
                  goto LABEL_78;
                if (v56 == 255)
                {
                  v57 = *v14;
                  if (!*v14)
                    goto LABEL_78;
                  if (*v14 == 255)
                  {
                    *v7 = v57;
                    goto LABEL_78;
                  }
                }
                else
                {
                  v58 = PDM_19476(*v14, v56);
                  if (!(_BYTE)v58)
                    goto LABEL_78;
                  v57 = v58;
                }
                DplusDM_19478(v7, v57, *v7, ~(_BYTE)v57);
LABEL_78:
                v9 += v51;
                v59 = &v14[v51];
                if ((unint64_t)v59 >= v21)
                  v60 = v52;
                else
                  v60 = 0;
                v14 = &v59[v60];
                v7 = (unsigned int *)((char *)v7 + v54);
                --v55;
              }
              while (v55);
              v9 += v518;
              v7 += v517;
              v61 = v520;
              v62 = &v520[v516];
              if ((unint64_t)v62 >= v514)
                v63 = v53;
              else
                v63 = 0;
              v64 = &v62[v63];
              v65 = v21 + 4 * v63 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v65;
                v61 = v64;
                v14 = v64;
              }
              v41 = v521 == 1;
              v520 = v61;
              --v521;
              if (v41)
                return;
            }
          case 3:
            v66 = v16;
            v67 = -(uint64_t)v18;
            v68 = -(v516 * v17);
            v69 = 4 * v16;
            do
            {
              v70 = v519;
              do
              {
                v71 = *v9;
                if (*v9)
                {
                  if (v71 == 255)
                  {
                    if (v19)
                      v72 = *v14;
                    else
                      v72 = -1;
                    DAM_19501(v7, *v14, v72, *(unsigned __int8 *)v7);
                  }
                  else
                  {
                    if (v19)
                      v73 = *v14;
                    else
                      v73 = -1;
                    DMplusDAM_19502(v7, *v7, v71 ^ 0xFF, *v14, v73, (unsigned __int16)(*v7 * (_WORD)v71+ 128+ ((*v7 * v71 + 128) >> 8)) >> 8);
                  }
                }
                v9 += v66;
                v74 = &v14[v66];
                if ((unint64_t)v74 >= v21)
                  v75 = v67;
                else
                  v75 = 0;
                v14 = &v74[v75];
                v7 = (unsigned int *)((char *)v7 + v69);
                --v70;
              }
              while (v70);
              v9 += v518;
              v7 += v517;
              v76 = v520;
              v77 = &v520[v516];
              if ((unint64_t)v77 >= v514)
                v78 = v68;
              else
                v78 = 0;
              v79 = &v77[v78];
              v80 = v21 + 4 * v78 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v80;
                v76 = v79;
                v14 = v79;
              }
              v41 = v521 == 1;
              v520 = v76;
              --v521;
            }
            while (!v41);
            return;
          case 4:
            v81 = v16;
            v82 = -(uint64_t)v18;
            v523 = -(v516 * v17);
            v83 = 4 * v16;
            do
            {
              v84 = v519;
              do
              {
                v85 = *v9;
                if (*v9)
                {
                  if (v85 == 255)
                  {
                    if (v19)
                      v86 = *v14;
                    else
                      v86 = -1;
                    DAM_19501(v7, *v14, v86, *(unsigned __int8 *)v7 ^ 0xFF);
                  }
                  else
                  {
                    if (v19)
                      v87 = *v14;
                    else
                      v87 = -1;
                    DMplusDAM_19502(v7, *v7, v85 ^ 0xFF, *v14, v87, (unsigned __int16)(~*(_BYTE *)v7 * (_WORD)v85+ 128+ ((~*(_BYTE *)v7 * v85 + 128) >> 8)) >> 8);
                  }
                }
                v9 += v81;
                v88 = &v14[v81];
                if ((unint64_t)v88 >= v21)
                  v89 = v82;
                else
                  v89 = 0;
                v14 = &v88[v89];
                v7 = (unsigned int *)((char *)v7 + v83);
                --v84;
              }
              while (v84);
              v9 += v518;
              v7 += v517;
              v90 = v520;
              v91 = &v520[v516];
              v92 = v523;
              if ((unint64_t)v91 < v514)
                v92 = 0;
              v93 = &v91[v92];
              v94 = v21 + 4 * v92 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v94;
                v90 = v93;
                v14 = v93;
              }
              v41 = v521 == 1;
              v520 = v90;
              --v521;
            }
            while (!v41);
            return;
          case 5:
            v95 = v16;
            v96 = -(uint64_t)v18;
            v97 = -(v516 * v17);
            v98 = 4 * v16;
            do
            {
              v99 = v519;
              do
              {
                if (*v9)
                {
                  v100 = PDM_19476(*v14, *v9);
                  DMplusDM_19477(v7, v100, *v7, *v7, ~(_BYTE)v100);
                }
                v9 += v95;
                v101 = &v14[v95];
                if ((unint64_t)v101 >= v21)
                  v102 = v96;
                else
                  v102 = 0;
                v14 = &v101[v102];
                v7 = (unsigned int *)((char *)v7 + v98);
                --v99;
              }
              while (v99);
              v9 += v518;
              v7 += v517;
              v103 = v520;
              v104 = &v520[v516];
              if ((unint64_t)v104 >= v514)
                v105 = v97;
              else
                v105 = 0;
              v106 = &v104[v105];
              v107 = v21 + 4 * v105 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v107;
                v103 = v106;
                v14 = v106;
              }
              v41 = v521 == 1;
              v520 = v103;
              --v521;
            }
            while (!v41);
            return;
          case 6:
            v108 = v16;
            v109 = -(uint64_t)v18;
            v524 = -(v516 * v17);
            v110 = 4 * v16;
            do
            {
              v111 = v519;
              do
              {
                v112 = *v9;
                if (*v9 && *v7 != 0xFF)
                {
                  if (~*(_BYTE *)v7 == 255)
                  {
                    if (v19)
                      v113 = *v14;
                    else
                      v113 = -1;
                    DAM_19501(v7, *v14, v113, v112);
                  }
                  else
                  {
                    if (v19)
                      v114 = *v14;
                    else
                      v114 = -1;
                    DplusDAM_19500(v7, *v7, *v14, v114, (unsigned __int16)(~*(_BYTE *)v7 * (_WORD)v112+ 128+ ((~*(_BYTE *)v7 * v112 + 128) >> 8)) >> 8);
                  }
                }
                v9 += v108;
                v115 = &v14[v108];
                if ((unint64_t)v115 >= v21)
                  v116 = v109;
                else
                  v116 = 0;
                v14 = &v115[v116];
                v7 = (unsigned int *)((char *)v7 + v110);
                --v111;
              }
              while (v111);
              v9 += v518;
              v7 += v517;
              v117 = v520;
              v118 = &v520[v516];
              v119 = v524;
              if ((unint64_t)v118 < v514)
                v119 = 0;
              v120 = &v118[v119];
              v121 = v21 + 4 * v119 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v121;
                v117 = v120;
                v14 = v120;
              }
              v41 = v521 == 1;
              v520 = v117;
              --v521;
            }
            while (!v41);
            return;
          case 7:
            v122 = v16;
            v123 = -(uint64_t)v18;
            v124 = -(v516 * v17);
            v125 = 4 * v16;
            do
            {
              v126 = v519;
              do
              {
                v127 = *v9;
                if (*v9)
                {
                  if (v127 == 255)
                    *v7 = PDM_19476(*v7, *(unsigned __int8 *)v14);
                  else
                    DMplusDM_19477(v7, *v7, (unsigned __int16)(*(unsigned __int8 *)v14 * (_WORD)v127+ 128+ ((*(unsigned __int8 *)v14 * v127 + 128) >> 8)) >> 8, *v7, v127 ^ 0xFF);
                }
                v9 += v122;
                v128 = &v14[v122];
                if ((unint64_t)v128 >= v21)
                  v129 = v123;
                else
                  v129 = 0;
                v14 = &v128[v129];
                v7 = (unsigned int *)((char *)v7 + v125);
                --v126;
              }
              while (v126);
              v9 += v518;
              v7 += v517;
              v130 = v520;
              v131 = &v520[v516];
              if ((unint64_t)v131 >= v514)
                v132 = v124;
              else
                v132 = 0;
              v133 = &v131[v132];
              v134 = v21 + 4 * v132 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v134;
                v130 = v133;
                v14 = v133;
              }
              v41 = v521 == 1;
              v520 = v130;
              --v521;
            }
            while (!v41);
            return;
          case 8:
            v135 = v16;
            v136 = -(uint64_t)v18;
            v137 = -(v516 * v17);
            v138 = 4 * v16;
            do
            {
              v139 = v519;
              do
              {
                v140 = *v9;
                if (*v9)
                {
                  if (v140 == 255)
                    v141 = *v14;
                  else
                    v141 = (*(unsigned __int8 *)v14 * v140
                          + 128
                          + ((*(unsigned __int8 *)v14 * v140 + 128) >> 8)) >> 8;
                  *v7 = PDM_19476(*v7, ~(_BYTE)v141);
                }
                v9 += v135;
                v142 = &v14[v135];
                if ((unint64_t)v142 >= v21)
                  v143 = v136;
                else
                  v143 = 0;
                v14 = &v142[v143];
                v7 = (unsigned int *)((char *)v7 + v138);
                --v139;
              }
              while (v139);
              v9 += v518;
              v7 += v517;
              v144 = v520;
              v145 = &v520[v516];
              if ((unint64_t)v145 >= v514)
                v146 = v137;
              else
                v146 = 0;
              v147 = &v145[v146];
              v148 = v21 + 4 * v146 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v148;
                v144 = v147;
                v14 = v147;
              }
              v41 = v521 == 1;
              v520 = v144;
              --v521;
            }
            while (!v41);
            return;
          case 9:
            v149 = v16;
            v150 = -(uint64_t)v18;
            v525 = -(v516 * v17);
            v151 = 4 * v16;
            do
            {
              v152 = v519;
              do
              {
                v153 = *v9;
                if (*v9)
                {
                  v154 = PDM_19476(*v14, *v9);
                  DMplusDM_19477(v7, v154, ~*(_BYTE *)v7, *v7, (v154 + ~v153));
                }
                v9 += v149;
                v155 = &v14[v149];
                if ((unint64_t)v155 >= v21)
                  v156 = v150;
                else
                  v156 = 0;
                v14 = &v155[v156];
                v7 = (unsigned int *)((char *)v7 + v151);
                --v152;
              }
              while (v152);
              v9 += v518;
              v7 += v517;
              v157 = v520;
              v158 = &v520[v516];
              v159 = v525;
              if ((unint64_t)v158 < v514)
                v159 = 0;
              v160 = &v158[v159];
              v161 = v21 + 4 * v159 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v161;
                v157 = v160;
                v14 = v160;
              }
              v41 = v521 == 1;
              v520 = v157;
              --v521;
            }
            while (!v41);
            return;
          case 10:
            v162 = v16;
            v163 = -(uint64_t)v18;
            v164 = -(v516 * v17);
            v165 = 4 * v16;
            do
            {
              v166 = v519;
              do
              {
                if (*v9)
                {
                  v167 = PDM_19476(*v14, *v9);
                  DMplusDM_19477(v7, v167, ~*(_BYTE *)v7, *v7, ~(_BYTE)v167);
                }
                v9 += v162;
                v168 = &v14[v162];
                if ((unint64_t)v168 >= v21)
                  v169 = v163;
                else
                  v169 = 0;
                v14 = &v168[v169];
                v7 = (unsigned int *)((char *)v7 + v165);
                --v166;
              }
              while (v166);
              v9 += v518;
              v7 += v517;
              v170 = v520;
              v171 = &v520[v516];
              if ((unint64_t)v171 >= v514)
                v172 = v164;
              else
                v172 = 0;
              v173 = &v171[v172];
              v174 = v21 + 4 * v172 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v174;
                v170 = v173;
                v14 = v173;
              }
              v41 = v521 == 1;
              v520 = v170;
              --v521;
            }
            while (!v41);
            return;
          case 11:
            v175 = v16;
            v176 = -(uint64_t)v18;
            v493 = -(v516 * v17);
            v177 = 4 * v16;
            do
            {
              v178 = v519;
              do
              {
                v179 = *v9;
                if (*v9)
                {
                  v180 = PDM_19476(*v14, *v9);
                  if (v522)
                    v182 = *v7;
                  else
                    v182 = -1;
                  if (v19)
                    v183 = v180;
                  else
                    v183 = v179;
                  DAplusdDA_19479(v7, *v7, v182, v180, v183, v181);
                }
                v9 += v175;
                v184 = &v14[v175];
                if ((unint64_t)v184 >= v21)
                  v185 = v176;
                else
                  v185 = 0;
                v14 = &v184[v185];
                v7 = (unsigned int *)((char *)v7 + v177);
                --v178;
              }
              while (v178);
              v9 += v518;
              v7 += v517;
              v186 = v520;
              v187 = &v520[v516];
              v188 = v493;
              if ((unint64_t)v187 < v514)
                v188 = 0;
              v189 = &v187[v188];
              v190 = v21 + 4 * v188 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v190;
                v186 = v189;
                v14 = v189;
              }
              v41 = v521 == 1;
              v520 = v186;
              --v521;
            }
            while (!v41);
            return;
          case 12:
            v191 = v16;
            v192 = -(uint64_t)v18;
            v526 = -(v516 * v17);
            v193 = 4 * v16;
            v513 = v19;
            do
            {
              v194 = v519;
              do
              {
                v195 = *v9;
                if (*v9)
                {
                  v196 = PDM_19476(*v14, *v9);
                  v197 = *v7;
                  if (v513)
                    v198 = v196;
                  else
                    v198 = v195;
                  v199 = ((v197 >> 8) & 0xFF00FF) + ((v196 >> 8) & 0xFF00FF);
                  v200 = (v196 & 0xFF0000 | v198) + (v197 & 0xFF00FF);
                  *v7 = (v199 << 8) & 0xFF00FF00 | v200 & 0xFF00FF | (15 * ((v200 >> 8) & 0x10001 | v199 & 0x1000100)) | (240 * ((v200 >> 8) & 0x10001 | v199 & 0x1000100));
                }
                v9 += v191;
                v201 = &v14[v191];
                if ((unint64_t)v201 >= v21)
                  v202 = v192;
                else
                  v202 = 0;
                v14 = &v201[v202];
                v7 = (unsigned int *)((char *)v7 + v193);
                --v194;
              }
              while (v194);
              v9 += v518;
              v7 += v517;
              v203 = v520;
              v204 = &v520[v516];
              v205 = v526;
              if ((unint64_t)v204 < v514)
                v205 = 0;
              v206 = &v204[v205];
              v207 = v21 + 4 * v205 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v207;
                v203 = v206;
                v14 = v206;
              }
              v41 = v521 == 1;
              v520 = v203;
              --v521;
            }
            while (!v41);
            return;
          case 13:
            v208 = v16;
            v209 = -(uint64_t)v18;
            v494 = -(v516 * v17);
            v210 = 4 * v16;
            while (1)
            {
              v211 = v519;
              do
              {
                v212 = *v9;
                if (!*v9)
                  goto LABEL_306;
                v213 = PDM_19476(*v14, *v9);
                if (v19)
                {
                  v212 = v213;
                  if (!(_BYTE)v213)
                    goto LABEL_306;
                }
                if (!v522)
                {
                  LOBYTE(v214) = -1;
LABEL_304:
                  v215 = PDAmultiplyPDA_19480(*v7, v214, v213, v212);
                  goto LABEL_305;
                }
                v214 = *v7;
                if (*v7)
                  goto LABEL_304;
                v215 = v213 & 0xFFFFFF00 | v212;
LABEL_305:
                *v7 = v215;
LABEL_306:
                v9 += v208;
                v216 = &v14[v208];
                if ((unint64_t)v216 >= v21)
                  v217 = v209;
                else
                  v217 = 0;
                v14 = &v216[v217];
                v7 = (unsigned int *)((char *)v7 + v210);
                --v211;
              }
              while (v211);
              v9 += v518;
              v7 += v517;
              v218 = v520;
              v219 = &v520[v516];
              v220 = v494;
              if ((unint64_t)v219 < v514)
                v220 = 0;
              v221 = &v219[v220];
              v222 = v21 + 4 * v220 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v222;
                v218 = v221;
                v14 = v221;
              }
              v41 = v521 == 1;
              v520 = v218;
              --v521;
              if (v41)
                return;
            }
          case 14:
            v223 = v16;
            v224 = -(uint64_t)v18;
            v495 = -(v516 * v17);
            v225 = 4 * v16;
            while (1)
            {
              v226 = v519;
              do
              {
                v227 = *v9;
                if (!*v9)
                  goto LABEL_329;
                v228 = PDM_19476(*v14, *v9);
                if (v19)
                {
                  v227 = v228;
                  if (!(_BYTE)v228)
                    goto LABEL_329;
                }
                if (!v522)
                {
                  LOBYTE(v229) = -1;
LABEL_327:
                  v230 = PDAscreenPDA_19481(*v7, v229, v228, v227);
                  goto LABEL_328;
                }
                v229 = *v7;
                if (*v7)
                  goto LABEL_327;
                v230 = v228 & 0xFFFFFF00 | v227;
LABEL_328:
                *v7 = v230;
LABEL_329:
                v9 += v223;
                v231 = &v14[v223];
                if ((unint64_t)v231 >= v21)
                  v232 = v224;
                else
                  v232 = 0;
                v14 = &v231[v232];
                v7 = (unsigned int *)((char *)v7 + v225);
                --v226;
              }
              while (v226);
              v9 += v518;
              v7 += v517;
              v233 = v520;
              v234 = &v520[v516];
              v235 = v495;
              if ((unint64_t)v234 < v514)
                v235 = 0;
              v236 = &v234[v235];
              v237 = v21 + 4 * v235 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v237;
                v233 = v236;
                v14 = v236;
              }
              v41 = v521 == 1;
              v520 = v233;
              --v521;
              if (v41)
                return;
            }
          case 15:
            v238 = v16;
            v239 = -(uint64_t)v18;
            v496 = -(v516 * v17);
            v240 = 4 * v16;
            while (1)
            {
              v241 = v519;
              do
              {
                v242 = *v9;
                if (!*v9)
                  goto LABEL_352;
                v243 = PDM_19476(*v14, *v9);
                if (v19)
                {
                  v242 = v243;
                  if (!(_BYTE)v243)
                    goto LABEL_352;
                }
                if (!v522)
                {
                  LOBYTE(v244) = -1;
LABEL_350:
                  v245 = PDAoverlayPDA_19482(*v7, v244, v243, v242);
                  goto LABEL_351;
                }
                v244 = *v7;
                if (*v7)
                  goto LABEL_350;
                v245 = v243 & 0xFFFFFF00 | v242;
LABEL_351:
                *v7 = v245;
LABEL_352:
                v9 += v238;
                v246 = &v14[v238];
                if ((unint64_t)v246 >= v21)
                  v247 = v239;
                else
                  v247 = 0;
                v14 = &v246[v247];
                v7 = (unsigned int *)((char *)v7 + v240);
                --v241;
              }
              while (v241);
              v9 += v518;
              v7 += v517;
              v248 = v520;
              v249 = &v520[v516];
              v250 = v496;
              if ((unint64_t)v249 < v514)
                v250 = 0;
              v251 = &v249[v250];
              v252 = v21 + 4 * v250 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v252;
                v248 = v251;
                v14 = v251;
              }
              v41 = v521 == 1;
              v520 = v248;
              --v521;
              if (v41)
                return;
            }
          case 16:
            v253 = v16;
            v254 = -(uint64_t)v18;
            v497 = -(v516 * v17);
            v255 = 4 * v16;
            while (1)
            {
              v256 = v519;
              do
              {
                v257 = *v9;
                if (!*v9)
                  goto LABEL_375;
                v258 = PDM_19476(*v14, *v9);
                if (v19)
                {
                  v257 = v258;
                  if (!(_BYTE)v258)
                    goto LABEL_375;
                }
                if (!v522)
                {
                  LOBYTE(v259) = -1;
LABEL_373:
                  v260 = PDAdarkenPDA_19484(*v7, v259, v258, v257);
                  goto LABEL_374;
                }
                v259 = *v7;
                if (*v7)
                  goto LABEL_373;
                v260 = v258 & 0xFFFFFF00 | v257;
LABEL_374:
                *v7 = v260;
LABEL_375:
                v9 += v253;
                v261 = &v14[v253];
                if ((unint64_t)v261 >= v21)
                  v262 = v254;
                else
                  v262 = 0;
                v14 = &v261[v262];
                v7 = (unsigned int *)((char *)v7 + v255);
                --v256;
              }
              while (v256);
              v9 += v518;
              v7 += v517;
              v263 = v520;
              v264 = &v520[v516];
              v265 = v497;
              if ((unint64_t)v264 < v514)
                v265 = 0;
              v266 = &v264[v265];
              v267 = v21 + 4 * v265 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v267;
                v263 = v266;
                v14 = v266;
              }
              v41 = v521 == 1;
              v520 = v263;
              --v521;
              if (v41)
                return;
            }
          case 17:
            v268 = v16;
            v269 = -(uint64_t)v18;
            v498 = -(v516 * v17);
            v270 = 4 * v16;
            while (1)
            {
              v271 = v519;
              do
              {
                v272 = *v9;
                if (!*v9)
                  goto LABEL_398;
                v273 = PDM_19476(*v14, *v9);
                if (v19)
                {
                  v272 = v273;
                  if (!(_BYTE)v273)
                    goto LABEL_398;
                }
                if (!v522)
                {
                  LOBYTE(v274) = -1;
LABEL_396:
                  v275 = PDAlightenPDA_19483(*v7, v274, v273, v272);
                  goto LABEL_397;
                }
                v274 = *v7;
                if (*v7)
                  goto LABEL_396;
                v275 = v273 & 0xFFFFFF00 | v272;
LABEL_397:
                *v7 = v275;
LABEL_398:
                v9 += v268;
                v276 = &v14[v268];
                if ((unint64_t)v276 >= v21)
                  v277 = v269;
                else
                  v277 = 0;
                v14 = &v276[v277];
                v7 = (unsigned int *)((char *)v7 + v270);
                --v271;
              }
              while (v271);
              v9 += v518;
              v7 += v517;
              v278 = v520;
              v279 = &v520[v516];
              v280 = v498;
              if ((unint64_t)v279 < v514)
                v280 = 0;
              v281 = &v279[v280];
              v282 = v21 + 4 * v280 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v282;
                v278 = v281;
                v14 = v281;
              }
              v41 = v521 == 1;
              v520 = v278;
              --v521;
              if (v41)
                return;
            }
          case 18:
            v283 = v16;
            v284 = -(uint64_t)v18;
            v499 = -(v516 * v17);
            v285 = 4 * v16;
            while (1)
            {
              v286 = v519;
              do
              {
                v287 = *v9;
                if (!*v9)
                  goto LABEL_421;
                v288 = PDM_19476(*v14, *v9);
                if (v19)
                {
                  v287 = v288;
                  if (!(_BYTE)v288)
                    goto LABEL_421;
                }
                if (!v522)
                {
                  LOBYTE(v289) = -1;
LABEL_419:
                  v290 = PDAcolordodgePDA_19485(*v7, v289, v288, v287);
                  goto LABEL_420;
                }
                v289 = *v7;
                if (*v7)
                  goto LABEL_419;
                v290 = v288 & 0xFFFFFF00 | v287;
LABEL_420:
                *v7 = v290;
LABEL_421:
                v9 += v283;
                v291 = &v14[v283];
                if ((unint64_t)v291 >= v21)
                  v292 = v284;
                else
                  v292 = 0;
                v14 = &v291[v292];
                v7 = (unsigned int *)((char *)v7 + v285);
                --v286;
              }
              while (v286);
              v9 += v518;
              v7 += v517;
              v293 = v520;
              v294 = &v520[v516];
              v295 = v499;
              if ((unint64_t)v294 < v514)
                v295 = 0;
              v296 = &v294[v295];
              v297 = v21 + 4 * v295 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v297;
                v293 = v296;
                v14 = v296;
              }
              v41 = v521 == 1;
              v520 = v293;
              --v521;
              if (v41)
                return;
            }
          case 19:
            v298 = v16;
            v299 = -(uint64_t)v18;
            v500 = -(v516 * v17);
            v300 = 4 * v16;
            while (1)
            {
              v301 = v519;
              do
              {
                v302 = *v9;
                if (!*v9)
                  goto LABEL_444;
                v303 = PDM_19476(*v14, *v9);
                if (v19)
                {
                  v302 = v303;
                  if (!(_BYTE)v303)
                    goto LABEL_444;
                }
                if (!v522)
                {
                  LOBYTE(v304) = -1;
LABEL_442:
                  v305 = PDAcolorburnPDA_19486(*v7, v304, v303, v302);
                  goto LABEL_443;
                }
                v304 = *v7;
                if (*v7)
                  goto LABEL_442;
                v305 = v303 & 0xFFFFFF00 | v302;
LABEL_443:
                *v7 = v305;
LABEL_444:
                v9 += v298;
                v306 = &v14[v298];
                if ((unint64_t)v306 >= v21)
                  v307 = v299;
                else
                  v307 = 0;
                v14 = &v306[v307];
                v7 = (unsigned int *)((char *)v7 + v300);
                --v301;
              }
              while (v301);
              v9 += v518;
              v7 += v517;
              v308 = v520;
              v309 = &v520[v516];
              v310 = v500;
              if ((unint64_t)v309 < v514)
                v310 = 0;
              v311 = &v309[v310];
              v312 = v21 + 4 * v310 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v312;
                v308 = v311;
                v14 = v311;
              }
              v41 = v521 == 1;
              v520 = v308;
              --v521;
              if (v41)
                return;
            }
          case 20:
            v313 = v16;
            v314 = -(uint64_t)v18;
            v501 = -(v516 * v17);
            v315 = 4 * v16;
            while (1)
            {
              v316 = v519;
              do
              {
                v317 = *v9;
                if (!*v9)
                  goto LABEL_467;
                v318 = PDM_19476(*v14, *v9);
                if (v19)
                {
                  v317 = v318;
                  if (!(_BYTE)v318)
                    goto LABEL_467;
                }
                if (!v522)
                {
                  LOBYTE(v319) = -1;
LABEL_465:
                  v320 = PDAsoftlightPDA_19488(*v7, v319, v318, v317);
                  goto LABEL_466;
                }
                v319 = *v7;
                if (*v7)
                  goto LABEL_465;
                v320 = v318 & 0xFFFFFF00 | v317;
LABEL_466:
                *v7 = v320;
LABEL_467:
                v9 += v313;
                v321 = &v14[v313];
                if ((unint64_t)v321 >= v21)
                  v322 = v314;
                else
                  v322 = 0;
                v14 = &v321[v322];
                v7 = (unsigned int *)((char *)v7 + v315);
                --v316;
              }
              while (v316);
              v9 += v518;
              v7 += v517;
              v323 = v520;
              v324 = &v520[v516];
              v325 = v501;
              if ((unint64_t)v324 < v514)
                v325 = 0;
              v326 = &v324[v325];
              v327 = v21 + 4 * v325 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v327;
                v323 = v326;
                v14 = v326;
              }
              v41 = v521 == 1;
              v520 = v323;
              --v521;
              if (v41)
                return;
            }
          case 21:
            v328 = v16;
            v329 = -(uint64_t)v18;
            v502 = -(v516 * v17);
            v330 = 4 * v16;
            while (1)
            {
              v331 = v519;
              do
              {
                v332 = *v9;
                if (!*v9)
                  goto LABEL_490;
                v333 = PDM_19476(*v14, *v9);
                if (v19)
                {
                  v332 = v333;
                  if (!(_BYTE)v333)
                    goto LABEL_490;
                }
                if (!v522)
                {
                  LOBYTE(v334) = -1;
LABEL_488:
                  v335 = PDAhardlightPDA_19487(*v7, v334, v333, v332);
                  goto LABEL_489;
                }
                v334 = *v7;
                if (*v7)
                  goto LABEL_488;
                v335 = v333 & 0xFFFFFF00 | v332;
LABEL_489:
                *v7 = v335;
LABEL_490:
                v9 += v328;
                v336 = &v14[v328];
                if ((unint64_t)v336 >= v21)
                  v337 = v329;
                else
                  v337 = 0;
                v14 = &v336[v337];
                v7 = (unsigned int *)((char *)v7 + v330);
                --v331;
              }
              while (v331);
              v9 += v518;
              v7 += v517;
              v338 = v520;
              v339 = &v520[v516];
              v340 = v502;
              if ((unint64_t)v339 < v514)
                v340 = 0;
              v341 = &v339[v340];
              v342 = v21 + 4 * v340 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v342;
                v338 = v341;
                v14 = v341;
              }
              v41 = v521 == 1;
              v520 = v338;
              --v521;
              if (v41)
                return;
            }
          case 22:
            v343 = v16;
            v344 = -(uint64_t)v18;
            v503 = -(v516 * v17);
            v345 = 4 * v16;
            while (1)
            {
              v346 = v519;
              do
              {
                v347 = *v9;
                if (!*v9)
                  goto LABEL_513;
                v348 = PDM_19476(*v14, *v9);
                if (v19)
                {
                  v347 = v348;
                  if (!(_BYTE)v348)
                    goto LABEL_513;
                }
                if (!v522)
                {
                  LOBYTE(v349) = -1;
LABEL_511:
                  v350 = PDAdifferencePDA_19489(*v7, v349, v348, v347);
                  goto LABEL_512;
                }
                v349 = *v7;
                if (*v7)
                  goto LABEL_511;
                v350 = v348 & 0xFFFFFF00 | v347;
LABEL_512:
                *v7 = v350;
LABEL_513:
                v9 += v343;
                v351 = &v14[v343];
                if ((unint64_t)v351 >= v21)
                  v352 = v344;
                else
                  v352 = 0;
                v14 = &v351[v352];
                v7 = (unsigned int *)((char *)v7 + v345);
                --v346;
              }
              while (v346);
              v9 += v518;
              v7 += v517;
              v353 = v520;
              v354 = &v520[v516];
              v355 = v503;
              if ((unint64_t)v354 < v514)
                v355 = 0;
              v356 = &v354[v355];
              v357 = v21 + 4 * v355 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v357;
                v353 = v356;
                v14 = v356;
              }
              v41 = v521 == 1;
              v520 = v353;
              --v521;
              if (v41)
                return;
            }
          case 23:
            v358 = v16;
            v359 = -(uint64_t)v18;
            v504 = -(v516 * v17);
            v360 = 4 * v16;
            while (1)
            {
              v361 = v519;
              do
              {
                v362 = *v9;
                if (!*v9)
                  goto LABEL_536;
                v363 = PDM_19476(*v14, *v9);
                if (v19)
                {
                  v362 = v363;
                  if (!(_BYTE)v363)
                    goto LABEL_536;
                }
                if (!v522)
                {
                  LOBYTE(v364) = -1;
LABEL_534:
                  v365 = PDAexclusionPDA_19490(*v7, v364, v363, v362);
                  goto LABEL_535;
                }
                v364 = *v7;
                if (*v7)
                  goto LABEL_534;
                v365 = v363 & 0xFFFFFF00 | v362;
LABEL_535:
                *v7 = v365;
LABEL_536:
                v9 += v358;
                v366 = &v14[v358];
                if ((unint64_t)v366 >= v21)
                  v367 = v359;
                else
                  v367 = 0;
                v14 = &v366[v367];
                v7 = (unsigned int *)((char *)v7 + v360);
                --v361;
              }
              while (v361);
              v9 += v518;
              v7 += v517;
              v368 = v520;
              v369 = &v520[v516];
              v370 = v504;
              if ((unint64_t)v369 < v514)
                v370 = 0;
              v371 = &v369[v370];
              v372 = v21 + 4 * v370 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v372;
                v368 = v371;
                v14 = v371;
              }
              v41 = v521 == 1;
              v520 = v368;
              --v521;
              if (v41)
                return;
            }
          case 24:
            v373 = v16;
            v374 = -(uint64_t)v18;
            v505 = -(v516 * v17);
            v375 = 4 * v16;
            while (1)
            {
              v376 = v519;
              do
              {
                v377 = *v9;
                if (!*v9)
                  goto LABEL_559;
                v378 = PDM_19476(*v14, *v9);
                if (v19)
                {
                  v377 = v378;
                  if (!(_BYTE)v378)
                    goto LABEL_559;
                }
                if (!v522)
                {
                  LOBYTE(v379) = -1;
LABEL_557:
                  v380 = PDAhuePDA_19491(*v7, v379, v378, v377);
                  goto LABEL_558;
                }
                v379 = *v7;
                if (*v7)
                  goto LABEL_557;
                v380 = v378 & 0xFFFFFF00 | v377;
LABEL_558:
                *v7 = v380;
LABEL_559:
                v9 += v373;
                v381 = &v14[v373];
                if ((unint64_t)v381 >= v21)
                  v382 = v374;
                else
                  v382 = 0;
                v14 = &v381[v382];
                v7 = (unsigned int *)((char *)v7 + v375);
                --v376;
              }
              while (v376);
              v9 += v518;
              v7 += v517;
              v383 = v520;
              v384 = &v520[v516];
              v385 = v505;
              if ((unint64_t)v384 < v514)
                v385 = 0;
              v386 = &v384[v385];
              v387 = v21 + 4 * v385 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v387;
                v383 = v386;
                v14 = v386;
              }
              v41 = v521 == 1;
              v520 = v383;
              --v521;
              if (v41)
                return;
            }
          case 25:
            v388 = v16;
            v389 = -(uint64_t)v18;
            v506 = -(v516 * v17);
            v390 = 4 * v16;
            while (1)
            {
              v391 = v519;
              do
              {
                v392 = *v9;
                if (!*v9)
                  goto LABEL_582;
                v393 = PDM_19476(*v14, *v9);
                if (v19)
                {
                  v392 = v393;
                  if (!(_BYTE)v393)
                    goto LABEL_582;
                }
                if (!v522)
                {
                  LOBYTE(v394) = -1;
LABEL_580:
                  v395 = PDAsaturationPDA_19492(*v7, v394, v393, v392);
                  goto LABEL_581;
                }
                v394 = *v7;
                if (*v7)
                  goto LABEL_580;
                v395 = v393 & 0xFFFFFF00 | v392;
LABEL_581:
                *v7 = v395;
LABEL_582:
                v9 += v388;
                v396 = &v14[v388];
                if ((unint64_t)v396 >= v21)
                  v397 = v389;
                else
                  v397 = 0;
                v14 = &v396[v397];
                v7 = (unsigned int *)((char *)v7 + v390);
                --v391;
              }
              while (v391);
              v9 += v518;
              v7 += v517;
              v398 = v520;
              v399 = &v520[v516];
              v400 = v506;
              if ((unint64_t)v399 < v514)
                v400 = 0;
              v401 = &v399[v400];
              v402 = v21 + 4 * v400 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v402;
                v398 = v401;
                v14 = v401;
              }
              v41 = v521 == 1;
              v520 = v398;
              --v521;
              if (v41)
                return;
            }
          case 26:
            v403 = v16;
            v404 = -(uint64_t)v18;
            v507 = -(v516 * v17);
            v405 = 4 * v16;
            while (1)
            {
              v406 = v519;
              do
              {
                v407 = *v9;
                if (!*v9)
                  goto LABEL_605;
                v408 = PDM_19476(*v14, *v9);
                if (v19)
                {
                  v407 = v408;
                  if (!(_BYTE)v408)
                    goto LABEL_605;
                }
                if (!v522)
                {
                  LOBYTE(v409) = -1;
LABEL_603:
                  v410 = PDAluminosityPDA_19493(v408, v407, *v7, v409);
                  goto LABEL_604;
                }
                v409 = *v7;
                if (*v7)
                  goto LABEL_603;
                v410 = v408 & 0xFFFFFF00 | v407;
LABEL_604:
                *v7 = v410;
LABEL_605:
                v9 += v403;
                v411 = &v14[v403];
                if ((unint64_t)v411 >= v21)
                  v412 = v404;
                else
                  v412 = 0;
                v14 = &v411[v412];
                v7 = (unsigned int *)((char *)v7 + v405);
                --v406;
              }
              while (v406);
              v9 += v518;
              v7 += v517;
              v413 = v520;
              v414 = &v520[v516];
              v415 = v507;
              if ((unint64_t)v414 < v514)
                v415 = 0;
              v416 = &v414[v415];
              v417 = v21 + 4 * v415 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v417;
                v413 = v416;
                v14 = v416;
              }
              v41 = v521 == 1;
              v520 = v413;
              --v521;
              if (v41)
                return;
            }
          case 27:
            v418 = v16;
            v419 = -(uint64_t)v18;
            v508 = -(v516 * v17);
            v420 = 4 * v16;
            while (1)
            {
              v421 = v519;
              do
              {
                v422 = *v9;
                if (!*v9)
                  goto LABEL_628;
                v423 = PDM_19476(*v14, *v9);
                if (v19)
                {
                  v422 = v423;
                  if (!(_BYTE)v423)
                    goto LABEL_628;
                }
                if (!v522)
                {
                  LOBYTE(v424) = -1;
LABEL_626:
                  v425 = PDAluminosityPDA_19493(*v7, v424, v423, v422);
                  goto LABEL_627;
                }
                v424 = *v7;
                if (*v7)
                  goto LABEL_626;
                v425 = v423 & 0xFFFFFF00 | v422;
LABEL_627:
                *v7 = v425;
LABEL_628:
                v9 += v418;
                v426 = &v14[v418];
                if ((unint64_t)v426 >= v21)
                  v427 = v419;
                else
                  v427 = 0;
                v14 = &v426[v427];
                v7 = (unsigned int *)((char *)v7 + v420);
                --v421;
              }
              while (v421);
              v9 += v518;
              v7 += v517;
              v428 = v520;
              v429 = &v520[v516];
              v430 = v508;
              if ((unint64_t)v429 < v514)
                v430 = 0;
              v431 = &v429[v430];
              v432 = v21 + 4 * v430 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v432;
                v428 = v431;
                v14 = v431;
              }
              v41 = v521 == 1;
              v520 = v428;
              --v521;
              if (v41)
                return;
            }
          case 28:
            v433 = v16;
            v434 = -(uint64_t)v18;
            v509 = -(v516 * v17);
            v435 = 4 * v16;
            while (1)
            {
              v436 = v519;
              do
              {
                v437 = *v9;
                if (!*v9)
                  goto LABEL_651;
                v438 = PDM_19476(*v14, *v9);
                if (v19)
                {
                  v437 = v438;
                  if (!(_BYTE)v438)
                    goto LABEL_651;
                }
                if (!v522)
                {
                  LOBYTE(v439) = -1;
LABEL_649:
                  v440 = PDAtranspose_huePDA_19494(*v7, v439, v438, v437);
                  goto LABEL_650;
                }
                v439 = *v7;
                if (*v7)
                  goto LABEL_649;
                v440 = v438 & 0xFFFFFF00 | v437;
LABEL_650:
                *v7 = v440;
LABEL_651:
                v9 += v433;
                v441 = &v14[v433];
                if ((unint64_t)v441 >= v21)
                  v442 = v434;
                else
                  v442 = 0;
                v14 = &v441[v442];
                v7 = (unsigned int *)((char *)v7 + v435);
                --v436;
              }
              while (v436);
              v9 += v518;
              v7 += v517;
              v443 = v520;
              v444 = &v520[v516];
              v445 = v509;
              if ((unint64_t)v444 < v514)
                v445 = 0;
              v446 = &v444[v445];
              v447 = v21 + 4 * v445 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v447;
                v443 = v446;
                v14 = v446;
              }
              v41 = v521 == 1;
              v520 = v443;
              --v521;
              if (v41)
                return;
            }
          case 29:
            v448 = v16;
            v449 = -(uint64_t)v18;
            v510 = -(v516 * v17);
            v450 = 4 * v16;
            while (1)
            {
              v451 = v519;
              do
              {
                v452 = *v9;
                if (!*v9)
                  goto LABEL_674;
                v453 = PDM_19476(*v14, *v9);
                if (v19)
                {
                  v452 = v453;
                  if (!(_BYTE)v453)
                    goto LABEL_674;
                }
                if (!v522)
                {
                  LOBYTE(v454) = -1;
LABEL_672:
                  v455 = PDAtranspose_saturationPDA_19495(*v7, v454, v453, v452);
                  goto LABEL_673;
                }
                v454 = *v7;
                if (*v7)
                  goto LABEL_672;
                v455 = v453 & 0xFFFFFF00 | v452;
LABEL_673:
                *v7 = v455;
LABEL_674:
                v9 += v448;
                v456 = &v14[v448];
                if ((unint64_t)v456 >= v21)
                  v457 = v449;
                else
                  v457 = 0;
                v14 = &v456[v457];
                v7 = (unsigned int *)((char *)v7 + v450);
                --v451;
              }
              while (v451);
              v9 += v518;
              v7 += v517;
              v458 = v520;
              v459 = &v520[v516];
              v460 = v510;
              if ((unint64_t)v459 < v514)
                v460 = 0;
              v461 = &v459[v460];
              v462 = v21 + 4 * v460 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v462;
                v458 = v461;
                v14 = v461;
              }
              v41 = v521 == 1;
              v520 = v458;
              --v521;
              if (v41)
                return;
            }
          case 30:
            v463 = v16;
            v464 = -(uint64_t)v18;
            v511 = -(v516 * v17);
            v465 = 4 * v16;
            while (1)
            {
              v466 = v519;
              do
              {
                v467 = *v9;
                if (!*v9)
                  goto LABEL_697;
                v468 = PDM_19476(*v14, *v9);
                if (v19)
                {
                  v467 = v468;
                  if (!(_BYTE)v468)
                    goto LABEL_697;
                }
                if (!v522)
                {
                  LOBYTE(v469) = -1;
LABEL_695:
                  v470 = PDAtranspose_luminosityPDA_19496(v468, v467, *v7, v469);
                  goto LABEL_696;
                }
                v469 = *v7;
                if (*v7)
                  goto LABEL_695;
                v470 = v468 & 0xFFFFFF00 | v467;
LABEL_696:
                *v7 = v470;
LABEL_697:
                v9 += v463;
                v471 = &v14[v463];
                if ((unint64_t)v471 >= v21)
                  v472 = v464;
                else
                  v472 = 0;
                v14 = &v471[v472];
                v7 = (unsigned int *)((char *)v7 + v465);
                --v466;
              }
              while (v466);
              v9 += v518;
              v7 += v517;
              v473 = v520;
              v474 = &v520[v516];
              v475 = v511;
              if ((unint64_t)v474 < v514)
                v475 = 0;
              v476 = &v474[v475];
              v477 = v21 + 4 * v475 + 4 * v516;
              if (v515)
              {
                v14 += v516;
              }
              else
              {
                v21 = v477;
                v473 = v476;
                v14 = v476;
              }
              v41 = v521 == 1;
              v520 = v473;
              --v521;
              if (v41)
                return;
            }
          case 31:
            v478 = v16;
            v479 = -(uint64_t)v18;
            v512 = -(v516 * v17);
            v480 = 4 * v16;
            break;
          default:
            return;
        }
LABEL_710:
        v481 = v519;
        while (1)
        {
          v482 = *v9;
          if (*v9)
          {
            v483 = PDM_19476(*v14, *v9);
            if (!v19)
              break;
            v482 = v483;
            if ((_BYTE)v483)
              break;
          }
LABEL_720:
          v9 += v478;
          v486 = &v14[v478];
          if ((unint64_t)v486 >= v21)
            v487 = v479;
          else
            v487 = 0;
          v14 = &v486[v487];
          v7 = (unsigned int *)((char *)v7 + v480);
          if (!--v481)
          {
            v9 += v518;
            v7 += v517;
            v488 = v520;
            v489 = &v520[v516];
            v490 = v512;
            if ((unint64_t)v489 < v514)
              v490 = 0;
            v491 = &v489[v490];
            v492 = v21 + 4 * v490 + 4 * v516;
            if (v515)
            {
              v14 += v516;
            }
            else
            {
              v21 = v492;
              v488 = v491;
              v14 = v491;
            }
            v41 = v521 == 1;
            v520 = v488;
            --v521;
            if (v41)
              return;
            goto LABEL_710;
          }
        }
        if (v522)
        {
          v484 = *v7;
          if (!*v7)
          {
            v485 = v483 & 0xFFFFFF00 | v482;
LABEL_719:
            *v7 = v485;
            goto LABEL_720;
          }
        }
        else
        {
          LOBYTE(v484) = -1;
        }
        v485 = PDAtranspose_luminosityPDA_19496(*v7, v484, v483, v482);
        goto LABEL_719;
      }
      v14 = 0;
      v21 = 0;
      v16 = 1;
LABEL_15:
      v514 = 0;
      v520 = 0;
      v516 = v13 - v3;
      v515 = 1;
      goto LABEL_16;
    }
    v13 = v12 >> 2;
    v14 = (unsigned int *)(v4 + 4 * (v10 + v13 * v11));
    if (v13 != v6)
    {
      v16 = 1;
LABEL_14:
      v17 = 0;
      v3 = v16 * v519;
      v19 = v5 != 0;
      v517 = v6 - v3;
      v518 = v8 - v3;
      v21 = -1;
      v18 = v13;
      goto LABEL_15;
    }
    if ((char *)v7 - (char *)v14 >= 1)
    {
      if (v519 >= (uint64_t)((unint64_t)((char *)v7 - (char *)v14) >> 2))
      {
        v7 += v519 - 1;
        v14 += v519 - 1;
        v9 += v519 - 1;
        v16 = -1;
        goto LABEL_13;
      }
      v15 = *(int *)(a1 + 8) - 1;
      if (v7 <= &v14[v6 * v15 - 1 + v519])
      {
        v7 += v6 * v15;
        v13 = -(uint64_t)v6;
        v9 += v8 * v15;
        v8 = -v8;
        v16 = 1;
        v14 += v6 * v15;
        v6 = -(uint64_t)v6;
        goto LABEL_14;
      }
    }
    v16 = 1;
LABEL_13:
    v13 = (unint64_t)*(int *)(a1 + 28) >> 2;
    goto LABEL_14;
  }
}

unsigned int *DMplusDAM_19502(unsigned int *result, unsigned int a2, int a3, unsigned int a4, unsigned int a5, int a6)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;

  v6 = (unsigned __int16)(BYTE1(a4) * (_WORD)a6) + (unsigned __int16)(BYTE1(a2) * (_WORD)a3);
  v7 = ((((a4 >> 8) & 0xFF00FF) * a6) >> 16) + ((((a2 >> 8) & 0xFF00FF) * a3) >> 16);
  if (v6 >= 0xFE79)
    v6 = 65145;
  if (v7 >= 0xFE79)
    v7 = 65145;
  v8 = (a2 & 0xFF00FF) * a3;
  v9 = (unsigned __int16)(a5 * a6) + (unsigned __int16)v8;
  v10 = (((a4 & 0xFF0000 | a5) * a6) >> 16) + HIWORD(v8);
  if (v9 >= 0xFE79)
    v11 = 65145;
  else
    v11 = v9;
  if (v10 >= 0xFE79)
    v12 = 65145;
  else
    v12 = v10;
  *result = ((((((v11 | (v12 << 16)) + 8388736) >> 8) & 0xFF00FF) + (v11 | (v12 << 16)) + 8388736) >> 8) & 0xFF00FF | (((((v6 | (v7 << 16)) + 8388736) >> 8) & 0xFF00FF) + (v6 | (v7 << 16)) + 8388736) & 0xFF00FF00;
  return result;
}

uint64_t PIXELCONSTANT_19503(float *a1, int a2, float *a3, float a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  int v9;
  int v10;
  int v11;
  int v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;

  v4 = *a1;
  v5 = a1[1];
  v6 = v5;
  if (v5 >= a4)
  {
    v6 = a4;
    if (v4 > a4)
      v6 = *a1;
  }
  v7 = a1[3];
  v8 = v6 * a1[2];
  if (a3)
    v9 = a2;
  else
    v9 = 0;
  if (v9 == 1)
  {
    if (*a3 >= v4)
      v4 = *a3;
    if (*a3 > v5)
      v4 = a1[1];
    v10 = (int)(float)(v7 + (float)(v4 * v8));
    v11 = v10;
    v12 = v10;
  }
  else
  {
    if (v9 == 4)
    {
      v19 = a3[4];
      v20 = *a3;
      v21 = a3[1];
      v22 = a3[2];
      if (v19 < v4)
        v23 = *a1;
      else
        v23 = a3[4];
      if (v19 <= v5)
        v24 = v23;
      else
        v24 = a1[1];
      if (v20 < v4)
        v25 = *a1;
      else
        v25 = *a3;
      if (v20 <= v5)
        v26 = v25;
      else
        v26 = a1[1];
      if (v21 < v4)
        v27 = *a1;
      else
        v27 = a3[1];
      if (v21 <= v5)
        v28 = v27;
      else
        v28 = a1[1];
      if (v22 < v4)
        v29 = *a1;
      else
        v29 = a3[2];
      if (v22 <= v5)
        v30 = v29;
      else
        v30 = a1[1];
      v31 = (float)(v5 - v26) - v24;
      v32 = (float)(v5 - v28) - v24;
      v33 = (float)(v5 - v30) - v24;
      v34 = v7 + (float)(v31 * v8);
      if (v31 < v4)
        v34 = *a1;
      v35 = v7 + (float)(v32 * v8);
      if (v32 < v4)
        v35 = *a1;
      if (v33 >= v4)
        v4 = v7 + (float)(v33 * v8);
      v10 = (int)v34;
      v11 = (int)v35;
      goto LABEL_63;
    }
    v10 = 0;
    v11 = 0;
    v12 = 0;
    if (v9 == 3)
    {
      v13 = a3[1];
      v14 = a3[2];
      if (*a3 < v4)
        v15 = *a1;
      else
        v15 = *a3;
      if (*a3 <= v5)
        v16 = v15;
      else
        v16 = a1[1];
      if (v13 < v4)
        v17 = *a1;
      else
        v17 = a3[1];
      if (v13 <= v5)
        v18 = v17;
      else
        v18 = a1[1];
      if (v14 >= v4)
        v4 = a3[2];
      if (v14 > v5)
        v4 = a1[1];
      v10 = (int)(float)(v7 + (float)(v16 * v8));
      v11 = (int)(float)(v7 + (float)(v18 * v8));
      v4 = v7 + (float)(v4 * v8);
LABEL_63:
      v12 = (int)v4;
    }
  }
  return (int)(float)(v7 + v8) | (v10 << 24) | (v11 << 16) | (v12 << 8);
}

uint64_t ARGB32_shade(uint64_t a1, __n128 a2)
{
  uint64_t *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __n128 v13;
  void *v14;
  unint64_t v15;
  _BYTE *v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _OWORD v42[2];
  int v43;
  _BYTE v44[16];
  uint64_t v45;
  _BYTE v46[40];
  uint64_t v47;

  v2 = (uint64_t *)MEMORY[0x1E0C80A78](a1, a2);
  v5 = v4;
  v6 = (uint64_t)v3;
  v7 = 0;
  v47 = *MEMORY[0x1E0C80C00];
  v8 = *v2;
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  *(_OWORD *)v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  memset(v17, 0, sizeof(v17));
  v9 = *(_QWORD *)(v8 + 56);
  v10 = *v3;
  if (!*((_QWORD *)v3 + 12))
  {
    if (*(_QWORD *)(v4 + 72))
      v7 = 0;
    else
      v7 = *(float *)(v4 + 4) >= 1.0;
  }
  v43 = 0;
  memset(v42, 0, sizeof(v42));
  v11 = *(_DWORD *)(v9 + 16 * v10 + 8 * v7 + 4 * (*((_QWORD *)v3 + 6) == 0));
  if (v11 > 27)
    return 0xFFFFFFFFLL;
  if (*((int *)v3 + 1) < 1 || *((int *)v3 + 2) < 1)
    return 0;
  if ((int)_blt_shade_initialize((uint64_t)v3, v4, (uint64_t)v17, (uint64_t)v42) < 1)
    return 0xFFFFFFFFLL;
  if (v11 >= 24 && *(_DWORD *)v8 == 134755144)
    v11 += 4;
  if ((*(_DWORD *)v5 & 0xF000000) == 0x3000000)
  {
    if (*(_QWORD *)(v5 + 16))
    {
      v14 = ARGB32_shade_radial_RGB;
    }
    else if (*(_QWORD *)(v5 + 24))
    {
      v14 = ARGB32_shade_conic_RGB;
    }
    else if (*((uint64_t *)&v19 + 1) < 2)
    {
      v14 = ARGB32_shade_axial_RGB;
    }
    else
    {
      v14 = ARGB32_shade_custom_RGB;
    }
    *(_QWORD *)&v17[0] = v14;
    if ((_QWORD)v40)
    {
      *((_QWORD *)&v39 + 1) = v46;
      _blt_shade_samples_16((uint64_t)v46, 2, 3, (float *)v40, *((float **)&v40 + 1), 1uLL);
    }
    v15 = *((_QWORD *)&v19 + 1) * v19;
    if ((uint64_t)(*((_QWORD *)&v19 + 1) * v19) <= 480)
    {
      v16 = v44;
      v38[1] = v44;
LABEL_30:
      _blt_shade_samples_16((uint64_t)v16, 2, 3, (float *)v18, *((float **)&v18 + 1), v15);
      if (*(_BYTE *)(v5 + 1))
        *(_QWORD *)&v39 = &_blt_shade_samples_noise;
      goto LABEL_32;
    }
    v16 = malloc_type_malloc(8 * v15 + 32, 0xE83E6668uLL);
    if (v16)
    {
      v38[1] = v16;
      v15 = *((_QWORD *)&v19 + 1) * v19;
      goto LABEL_30;
    }
    return 0xFFFFFFFFLL;
  }
  if (!*(_QWORD *)&v17[0])
    return 0xFFFFFFFFLL;
LABEL_32:
  DWORD2(v17[0]) = *(_DWORD *)v8;
  HIDWORD(v17[0]) = DWORD2(v17[0]);
  rgba32_image_mark(v6, (uint64_t)v17, v11, v13);
  if (v38[1] && (v38[1] < v44 || &v45 < v38[1]))
    free(v38[1]);
  return 1;
}

void ARGB32_shade_radial_RGB(uint64_t a1, uint64_t a2, unint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  int v25;
  float v26;
  float v27;
  float v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  float v43;
  float v44;
  int v45;
  int v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  BOOL v63;
  float v64;
  BOOL v65;
  int v66;
  float v67;
  _WORD *v68;
  __int16 v69;
  __int16 v70;
  __int16 v71;
  __int16 v72;
  __int16 v73;
  __int16 v74;
  __int16 v75;
  __int16 v76;
  __int16 v77;
  char v78;
  float v79;
  float v80;
  float v81;
  unsigned __int16 *v82;
  int v83;
  float v84;
  float v85;
  float v86;
  float v88;
  float v89;
  float v90;
  int v91;
  int v92;
  uint64_t v94;
  unsigned __int16 v95;
  int v96;
  int v97;
  unsigned __int16 v98;
  _WORD *v99;
  __int16 *v100;
  __int16 v101;
  __int16 v102;
  __int16 v103;
  __int16 v104;
  __int16 v105;
  unsigned int v106;
  unsigned int v107;
  __int16 v108;
  __int16 v109;
  __int16 v110;
  __int16 v111;
  __int16 v112;
  int v113;
  __int16 v114;
  unsigned int v115;
  unsigned int v116;
  __int16 v117;
  __int16 v118;
  char v119;
  char v120;
  _WORD *v121;
  __int16 v122;
  __int16 v123;
  __int16 v124;
  __int16 v125;
  __int16 v126;
  __int16 v127;
  __int16 v128;
  __int16 v129;
  __int16 v130;
  uint64_t v131;
  _WORD *v132;
  __int16 v133;
  __int16 v134;
  __int16 v135;
  __int16 v136;
  __int16 v137;
  unsigned __int16 *v138;
  unsigned __int16 *v139;
  int32x2_t v140;
  int32x2_t v141;
  int32x2_t v142;
  int32x2_t v143;
  int v144;
  _BYTE *v145;
  int32x2_t v146;
  int8x8_t v147;
  int32x2_t v148;

  v12 = *(float *)(a1 + 280);
  v13 = *(float *)(a1 + 284);
  v14 = *(float *)(*(_QWORD *)(a1 + 272) + 4);
  v15 = v14 * (float)a2;
  v16 = v14 * (float)(uint64_t)a3;
  v17 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v16) + (float)(v12 * v15));
  v18 = *(float *)(a1 + 300) + (float)((float)(v16 * *(float *)(a1 + 292)) + (float)(v13 * v15));
  v20 = *(_QWORD *)(a1 + 400);
  v21 = *(float *)(a1 + 336);
  v22 = *(float *)(a1 + 344);
  v23 = *(float *)(a1 + 304);
  v24 = *(float *)(a1 + 308);
  v25 = *(_DWORD *)(a1 + 324);
  LODWORD(a12) = *(_DWORD *)(v20 + 8);
  v26 = *(float *)(v20 + 16);
  v27 = *(float *)(v20 + 20);
  v28 = *(float *)(v20 + 28);
  v31 = a1 + 144;
  v29 = *(char **)(a1 + 144);
  v30 = *(_QWORD *)(v31 + 8);
  v32 = *(unsigned __int16 **)(a1 + 376);
  v33 = *(_QWORD *)(a1 + 360);
  v34 = ((unint64_t)a2 >> 8) & 0xF;
  if (*(float *)&a12 != 0.0 || v28 != 0.0 || v13 != 0.0)
  {
    v46 = *(_DWORD *)(a1 + 320);
    v47 = *(float *)(v20 + 12);
    v48 = *(float *)(v20 + 24);
    v49 = *(float *)(v20 + 32);
    v50 = a1 + 368;
    v51 = *(_QWORD *)(a1 + 368);
    v52 = v51 + ((a3 >> 4) & 0xF0);
    v38 = v51 == 0;
    v53 = 15;
    if (v38)
    {
      v53 = 0;
      v34 = 0;
    }
    else
    {
      v50 = v52;
    }
    v54 = -v48;
    v55 = v24 - v23;
    while (1)
    {
      v56 = v54 + (float)((float)(v17 + v17) * *(float *)&a12);
      v57 = (float)((float)(v18 * v18) + (float)(v17 * v17)) - v28;
      if (v27 == 0.0)
      {
        v64 = v57 / v56;
      }
      else
      {
        v58 = (float)((float)(v27 * -4.0) * v57) + (float)(v56 * v56);
        if (v58 < 0.0)
          goto LABEL_54;
        v59 = sqrtf(v58);
        v60 = v49 * (float)(v56 - v59);
        v61 = v56 + v59;
        v62 = v49 * v61;
        v63 = (float)(v49 * v61) <= v60;
        if ((float)(v49 * v61) <= v60)
          v64 = v49 * v61;
        else
          v64 = v60;
        if (v63)
          v62 = v60;
        if (v62 < 0.0)
        {
          v65 = v62 < v47;
LABEL_40:
          v66 = v46;
          if (v65)
            goto LABEL_54;
LABEL_41:
          if ((v66 & 0x80000000) == 0)
            goto LABEL_53;
          goto LABEL_54;
        }
        if (v62 <= 1.0)
        {
          v67 = v23 + (float)(v62 * v55);
          goto LABEL_52;
        }
        if ((v25 & 0x80000000) == 0)
        {
          v66 = v25;
          if (v62 <= v26)
          {
LABEL_53:
            v68 = (_WORD *)(v33 + 8 * v66);
            v69 = v68[1];
            v70 = *(unsigned __int8 *)(v50 + v34);
            v71 = v68[2];
            v72 = v68[3];
            v73 = v70 + *v68;
            v74 = v70 + v69;
            v75 = v70 + v71;
            v76 = v70 + v72;
            goto LABEL_56;
          }
        }
      }
      if (v64 < 0.0)
      {
        v65 = v64 < v47;
        goto LABEL_40;
      }
      if (v64 > 1.0)
      {
        v66 = v25;
        if (v64 > v26)
          goto LABEL_54;
        goto LABEL_41;
      }
      v67 = v23 + (float)(v64 * v55);
LABEL_52:
      v66 = (int)(float)(v22 * (float)(v67 - v21));
      if ((v66 & 0x80000000) == 0)
        goto LABEL_53;
LABEL_54:
      if (!v32)
      {
        v78 = 0;
        goto LABEL_58;
      }
      v77 = *(unsigned __int8 *)(v50 + v34);
      v73 = v77 + *v32;
      v74 = v77 + v32[1];
      v75 = v77 + v32[2];
      v76 = v77 + v32[3];
LABEL_56:
      *(_DWORD *)v30 = v73 & 0xFF00 | (HIBYTE(v74) << 16) & 0xFFFF00 | (HIBYTE(v75) << 24) | HIBYTE(v76);
      v78 = -1;
LABEL_58:
      v34 = ((_DWORD)v34 + 1) & v53;
      v17 = v12 + v17;
      v18 = v13 + v18;
      v30 += 4;
      *v29++ = v78;
      if (!--a4)
        return;
    }
  }
  v35 = a1 + 368;
  v36 = *(_QWORD *)(a1 + 368);
  v37 = (BYTE1(a2) + 1) & 0xF;
  v38 = v36 == 0;
  if (v36)
    v39 = v36 + ((a3 >> 4) & 0xF0);
  else
    v39 = v35;
  if (v38)
    LODWORD(v40) = 0;
  else
    LODWORD(v40) = v37;
  if (v38)
    LODWORD(v41) = 0;
  else
    LODWORD(v41) = v34;
  if (v38)
    v42 = 0;
  else
    v42 = 15;
  v43 = v18 * v18;
  v44 = -v27;
  if (v43 <= (float)-v27)
  {
    v79 = fabsf(*(float *)(v20 + 32));
    v80 = v27 * -4.0;
    v81 = v24 - v23;
    v82 = (unsigned __int16 *)(v33 + 8 * v25);
    v83 = a4 + 2;
    while (1)
    {
      v84 = v43 + (float)(v17 * v17);
      v85 = v12 + v17;
      v86 = v43 + (float)(v85 * v85);
      if (v84 > v44 && v86 > v44)
      {
        if (v25 < 0)
        {
          if (!v32)
          {
            v120 = 0;
            v119 = 0;
            goto LABEL_82;
          }
          v95 = *v32;
          v96 = v32[1];
          v97 = v32[2];
          v98 = v32[3];
        }
        else
        {
          v95 = *v82;
          v96 = v82[1];
          v97 = v82[2];
          v98 = v82[3];
        }
        v113 = *(unsigned __int8 *)(v39 + v41);
        v114 = v113 + v95;
        v115 = (v113 + v96) >> 8;
        v116 = (v113 + v97) >> 8;
        v117 = v113 + v98;
        v118 = *(unsigned __int8 *)(v39 + v40);
        v109 = v118 + v95;
        v110 = v118 + v96;
        v111 = v118 + v97;
        v112 = v118 + v98;
        *(_DWORD *)v30 = v114 & 0xFF00 | (v115 << 16) & 0xFFFF00 | (v116 << 24) | HIBYTE(v117);
        goto LABEL_80;
      }
      v88 = sqrtf(v80 * v86);
      v89 = v79 * sqrtf(v80 * v84);
      v90 = v79 * v88;
      v91 = (int)(float)(v22 * (float)((float)(v23 + (float)(v89 * v81)) - v21));
      v92 = (int)(float)(v22 * (float)((float)(v23 + (float)((float)(v79 * v88) * v81)) - v21));
      if (v89 <= 1.0 && v90 <= 1.0)
      {
        v99 = (_WORD *)(v33 + 8 * v91);
        v100 = (__int16 *)(v33 + 8 * v92);
        v101 = *v100;
        v102 = v100[1];
        v103 = v100[2];
        v104 = v100[3];
        LODWORD(v100) = *(unsigned __int8 *)(v39 + v41);
        v105 = (_WORD)v100 + *v99;
        v106 = (v100 + (unsigned __int16)v99[1]) >> 8;
        v107 = (v100 + (unsigned __int16)v99[2]) >> 8;
        LOWORD(v99) = (_WORD)v100 + v99[3];
        v108 = *(unsigned __int8 *)(v39 + v40);
        v109 = v108 + v101;
        v110 = v108 + v102;
        v111 = v108 + v103;
        v112 = v108 + v104;
        *(_DWORD *)v30 = v105 & 0xFF00 | (v106 << 16) & 0xFFFF00 | (v107 << 24) | BYTE1(v99);
LABEL_80:
        v119 = -1;
        goto LABEL_81;
      }
      if (v89 <= 1.0)
      {
        if ((v91 & 0x80000000) == 0)
        {
          v94 = 4 * v91;
LABEL_86:
          v121 = (_WORD *)(v33 + 2 * v94);
          v122 = v121[1];
          v123 = *(unsigned __int8 *)(v39 + v41);
          v124 = v121[2];
          v125 = v121[3];
          v126 = v123 + *v121;
          v127 = v123 + v122;
          v128 = v123 + v124;
          v129 = v123 + v125;
          goto LABEL_89;
        }
      }
      else if (v89 <= v26)
      {
        v94 = 4 * v25;
        if ((v25 & 0x80000000) == 0)
          goto LABEL_86;
      }
      if (!v32)
      {
        v119 = 0;
        goto LABEL_90;
      }
      v130 = *(unsigned __int8 *)(v39 + v41);
      v126 = v130 + *v32;
      v127 = v130 + v32[1];
      v128 = v130 + v32[2];
      v129 = v130 + v32[3];
LABEL_89:
      *(_DWORD *)v30 = v126 & 0xFF00 | (HIBYTE(v127) << 16) & 0xFFFF00 | (HIBYTE(v128) << 24) | HIBYTE(v129);
      v119 = -1;
LABEL_90:
      if (v90 <= 1.0)
      {
        if (v92 < 0)
          goto LABEL_97;
        v131 = 4 * v92;
      }
      else if (v90 > v26 || (v131 = 4 * v25, v25 < 0))
      {
LABEL_97:
        if (!v32)
        {
          v120 = 0;
          goto LABEL_82;
        }
        v137 = *(unsigned __int8 *)(v39 + v40);
        v109 = v137 + *v32;
        v110 = v137 + v32[1];
        v111 = v137 + v32[2];
        v112 = v137 + v32[3];
        goto LABEL_81;
      }
      v132 = (_WORD *)(v33 + 2 * v131);
      v133 = v132[1];
      v134 = *(unsigned __int8 *)(v39 + v40);
      v135 = v132[2];
      v136 = v132[3];
      v109 = v134 + *v132;
      v110 = v134 + v133;
      v111 = v134 + v135;
      v112 = v134 + v136;
LABEL_81:
      *(_DWORD *)(v30 + 4) = v109 & 0xFF00 | (HIBYTE(v110) << 16) & 0xFFFF00 | (HIBYTE(v111) << 24) | HIBYTE(v112);
      v120 = -1;
LABEL_82:
      v17 = v12 + v85;
      LOBYTE(v41) = (v41 + 1) & v42;
      LOBYTE(v40) = (v40 + 1) & v42;
      v30 += 8;
      *v29 = v119;
      v29[1] = v120;
      v29 += 2;
      v83 -= 2;
      if (v83 <= 2)
        return;
    }
  }
  if (v32 || (v25 & 0x80000000) == 0)
  {
    v138 = (unsigned __int16 *)(v33 + 8 * v25);
    if (v25 >= 0)
      v139 = v138;
    else
      v139 = v32;
    v140 = vdup_n_s32(v139[1]);
    v141 = vdup_n_s32(*v139);
    v142 = vdup_n_s32(v139[2]);
    v143 = vdup_n_s32(v139[3]);
    v144 = a4 + 4;
    do
    {
      v145 = (_BYTE *)(v39 + v41);
      v41 = ((_DWORD)v41 + 1) & v42;
      LOBYTE(a12) = *v145;
      BYTE4(a12) = *(_BYTE *)(v39 + v40);
      v146 = (int32x2_t)vand_s8(*(int8x8_t *)&a12, (int8x8_t)0xFF000000FFLL);
      v147 = vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_n_s32(vadd_s32(v140, v146), 8uLL), (int8x8_t)0xFF000000FF0000), vand_s8((int8x8_t)vadd_s32(v141, v146), (int8x8_t)0xFF000000FF00)), vorr_s8((int8x8_t)(*(_QWORD *)&vshl_n_s32(vadd_s32(v142, v146), 0x10uLL) & 0xFF00FFFFFF00FFFFLL), (int8x8_t)(*(_QWORD *)&vshr_n_u32((uint32x2_t)vadd_s32(v143, v146), 8uLL) & 0xFFFFFEFFFFFFFEFFLL)));
      *(int8x8_t *)v30 = v147;
      v40 = ((_DWORD)v40 + 1) & v42;
      v147.i8[0] = *(_BYTE *)(v39 + v41);
      v147.i8[4] = *(_BYTE *)(v39 + v40);
      v148 = (int32x2_t)vand_s8(v147, (int8x8_t)0xFF000000FFLL);
      a12 = COERCE_DOUBLE(vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_n_s32(vadd_s32(v140, v148), 8uLL), (int8x8_t)0xFF000000FF0000), vand_s8((int8x8_t)vadd_s32(v141, v148), (int8x8_t)0xFF000000FF00)), vorr_s8((int8x8_t)(*(_QWORD *)&vshl_n_s32(vadd_s32(v142, v148), 0x10uLL) & 0xFF00FFFFFF00FFFFLL), (int8x8_t)(*(_QWORD *)&vshr_n_u32((uint32x2_t)vadd_s32(v143, v148), 8uLL) & 0xFFFFFEFFFFFFFEFFLL))));
      *(double *)(v30 + 8) = a12;
      *(_DWORD *)v29 = -1;
      v29 += 4;
      v144 -= 4;
      v30 += 16;
    }
    while (v144 > 4);
  }
  else
  {
    if (a4 >= 4)
      v45 = 4;
    else
      v45 = a4;
    bzero(v29, ((a4 - v45 + 3) & 0xFFFFFFFC) + 4);
  }
}

void ARGB32_shade_conic_RGB(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float v12;
  float v13;
  float v15;
  uint64_t v16;
  unsigned int *v17;
  _BYTE *v18;
  uint64_t v19;
  float v20;
  float v21;
  unsigned int v22;
  float v23;
  float v24;
  unsigned int v25;
  float v26;
  float v27;
  unsigned __int16 *v28;
  int v29;
  unsigned __int16 *v30;
  int v31;
  float v32;
  float v33;

  v4 = *(float *)(a1 + 280);
  v5 = *(float *)(*(_QWORD *)(a1 + 272) + 4);
  v6 = v5 * (float)a2;
  v7 = v5 * (float)a3;
  v8 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v7) + (float)(v4 * v6));
  v9 = *(_QWORD *)(a1 + 368);
  if (v9)
    v10 = v9 + (((unint64_t)a3 >> 4) & 0xF0);
  else
    v10 = a1 + 368;
  if (v9)
    v11 = 15;
  else
    v11 = 0;
  v12 = *(float *)(a1 + 284);
  v13 = *(float *)(a1 + 300) + (float)((float)(v7 * *(float *)(a1 + 292)) + (float)(v12 * v6));
  v32 = *(float *)(a1 + 336);
  v33 = *(float *)(a1 + 304);
  v15 = *(float *)(a1 + 344);
  v16 = *(_QWORD *)(a1 + 360);
  v18 = *(_BYTE **)(a1 + 144);
  v17 = *(unsigned int **)(a1 + 152);
  if (v9)
    v19 = ((unint64_t)a2 >> 8) & 0xF;
  else
    v19 = 0;
  v20 = *(float *)(a1 + 308) - *(float *)(a1 + 304);
  do
  {
    v21 = v15 * (float)((float)(v33 + (float)((float)((float)(atan2f(v13, v8) * 0.15915) + 0.5) * v20)) - v32);
    v22 = vcvtms_s32_f32(v21);
    v23 = ceilf(v21);
    v24 = (float)((float)(v21 - (float)(int)floorf(v21)) * 255.0) + 0.5;
    v25 = vcvtms_s32_f32(v15 + v21);
    if (v21 < 0.0)
      v22 = v25;
    v26 = ceilf(v21 - v15);
    if (v21 <= v15)
      v27 = v23;
    else
      v27 = v26;
    v28 = (unsigned __int16 *)(v16 + 2 * (int)(4 * v22));
    v29 = 255 - (int)v24;
    v30 = (unsigned __int16 *)(v16 + 8 * (int)v27);
    v31 = *(unsigned __int8 *)(v10 + v19);
    *v17++ = ((int)v24 * v30[1] + (v31 << 8) + v29 * v28[1]) & 0xFF0000 | (v31
                                                                         + (((int)v24 * *v30 + v29 * *v28) >> 8)) & 0xFF00 | (((unsigned __int16)(v31 + (((int)v24 * v30[2] + v29 * v28[2]) >> 8)) >> 8) << 24) | ((unsigned __int16)(v31 + (((int)v24 * v30[3] + v29 * v28[3]) >> 8)) >> 8);
    v19 = ((_DWORD)v19 + 1) & v11;
    v8 = v4 + v8;
    v13 = v12 + v13;
    *v18++ = -1;
    --a4;
  }
  while (a4);
}

uint64_t ARGB32_shade_custom_RGB(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  _WORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int *v26;
  char *v27;
  int v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  _WORD *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  char v40;

  v4 = *(float *)(result + 280);
  v5 = *(float *)(*(_QWORD *)(result + 272) + 4);
  v6 = v5 * (float)a2;
  v7 = v5 * (float)a3;
  v8 = *(float *)(result + 296) + (float)((float)(*(float *)(result + 288) * v7) + (float)(v4 * v6));
  v9 = result + 368;
  v10 = *(_QWORD *)(result + 368);
  v11 = 15;
  if (v10)
    v9 = v10 + (((unint64_t)a3 >> 4) & 0xF0);
  else
    v11 = 0;
  v12 = *(float *)(result + 284);
  v13 = *(float *)(result + 300) + (float)((float)(v7 * *(float *)(result + 292)) + (float)(v12 * v6));
  v14 = *(float *)(result + 304);
  v15 = *(float *)(result + 308);
  v16 = *(float *)(result + 312);
  v17 = *(float *)(result + 316);
  v18 = *(float *)(result + 336);
  v19 = *(float *)(result + 348);
  v20 = *(float *)(result + 344);
  v21 = *(float *)(result + 356);
  v22 = *(_WORD **)(result + 376);
  v23 = *(_QWORD *)(result + 360);
  v24 = 4 * *(_DWORD *)(result + 48);
  if (v10)
    v25 = ((unint64_t)a2 >> 8) & 0xF;
  else
    v25 = 0;
  v27 = *(char **)(result + 144);
  v26 = *(int **)(result + 152);
  do
  {
    if (v8 >= v14 && v13 >= v16 && v8 <= v15 && v13 <= v17)
    {
      v35 = (_WORD *)(v23
                    + 2 * v24 * (int)(float)(v21 * (float)(v13 - v19))
                    + 8 * (int)(float)(v20 * (float)(v8 - v18)));
      v36 = v35[1];
      v37 = *(unsigned __int8 *)(v9 + v25);
      v38 = v35[2];
      v39 = (unsigned __int16)v35[3];
      v32 = v37 + *v35;
      v33 = v37 + v36;
      v34 = v37 + v38;
      result = (v37 + v39);
      goto LABEL_21;
    }
    if (v22)
    {
      v31 = *(unsigned __int8 *)(v9 + v25);
      v32 = v31 + *v22;
      v33 = v31 + v22[1];
      v34 = v31 + v22[2];
      result = v31 + (unsigned __int16)v22[3];
LABEL_21:
      *v26 = v32 & 0xFF00 | (HIBYTE(v33) << 16) & 0xFFFF00 | (HIBYTE(v34) << 24) | BYTE1(result);
      v40 = -1;
      goto LABEL_22;
    }
    v40 = 0;
LABEL_22:
    v25 = ((_DWORD)v25 + 1) & v11;
    v8 = v4 + v8;
    v13 = v12 + v13;
    ++v26;
    *v27++ = v40;
    --a4;
  }
  while (a4);
  return result;
}

void ARGB32_shade_axial_RGB(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, int8x8_t a12)
{
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  float v21;
  float v22;
  float v23;
  float v24;
  int v25;
  int v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  _WORD *v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  char v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  int32x2_t v56;
  int32x2_t v57;
  int v58;
  int32x2_t v59;
  int32x2_t v60;
  __int8 *v61;
  int32x2_t v62;
  int8x8_t v63;
  int32x2_t v64;
  int32x4_t v65;
  int v66;

  v12 = *(float *)(a1 + 280);
  v13 = *(float *)(a1 + 296)
      + (float)((float)(*(float *)(a1 + 288) * (float)(*(float *)(*(_QWORD *)(a1 + 272) + 4) * (float)a3))
              + (float)(v12 * (float)(*(float *)(*(_QWORD *)(a1 + 272) + 4) * (float)a2)));
  v14 = a1 + 368;
  v15 = *(_QWORD *)(a1 + 368);
  v16 = ((unint64_t)a3 >> 4) & 0xF0;
  v17 = v15 + v16;
  if (v15)
    v18 = v15 + v16;
  else
    v18 = a1 + 368;
  if (v15)
    v19 = 15;
  else
    v19 = 0;
  v21 = *(float *)(a1 + 336);
  v22 = *(float *)(a1 + 344);
  v23 = *(float *)(a1 + 304);
  v24 = *(float *)(a1 + 308);
  v25 = *(_DWORD *)(a1 + 320);
  v26 = *(_DWORD *)(a1 + 324);
  v29 = a1 + 144;
  v27 = *(_DWORD **)(a1 + 144);
  v28 = *(_QWORD *)(v29 + 8);
  v30 = *(unsigned __int16 **)(a1 + 376);
  v31 = *(_QWORD *)(a1 + 360);
  if (v12 != 0.0)
  {
    if (v15)
      v37 = (a2 >> 8) & 0xF;
    else
      LOBYTE(v37) = 0;
    while (1)
    {
      v38 = v25;
      if (v13 >= v23)
      {
        v38 = v26;
        if (v13 <= v24)
          v38 = (int)(float)(v22 * (float)(v13 - v21));
      }
      if (v38 < 0)
      {
        if (!v30)
        {
          v49 = 0;
          goto LABEL_40;
        }
        v48 = *(unsigned __int8 *)(v18 + v37);
        v44 = v48 + *v30;
        v45 = v48 + v30[1];
        v46 = v48 + v30[2];
        v47 = v48 + v30[3];
      }
      else
      {
        v39 = (_WORD *)(v31 + 8 * v38);
        v40 = v39[1];
        v41 = *(unsigned __int8 *)(v18 + v37);
        v42 = v39[2];
        v43 = v39[3];
        v44 = v41 + *v39;
        v45 = v41 + v40;
        v46 = v41 + v42;
        v47 = v41 + v43;
      }
      *(_DWORD *)v28 = v44 & 0xFF00 | (HIBYTE(v45) << 16) & 0xFFFF00 | (HIBYTE(v46) << 24) | HIBYTE(v47);
      v49 = -1;
LABEL_40:
      LOBYTE(v37) = (v37 + 1) & v19;
      v13 = v12 + v13;
      v28 += 4;
      *(_BYTE *)v27 = v49;
      v27 = (_DWORD *)((char *)v27 + 1);
      if (!--a4)
        return;
    }
  }
  if (v15)
    v32 = v17;
  else
    v32 = v14;
  if (v15)
    LODWORD(v33) = ((a2 >> 8) + 1) & 0xF;
  else
    LODWORD(v33) = 0;
  if (v15)
    LODWORD(v34) = (a2 >> 8) & 0xF;
  else
    LODWORD(v34) = 0;
  if (v15)
    v35 = 15;
  else
    v35 = 0;
  if (v13 >= v23)
  {
    v25 = v26;
    if (v13 <= v24)
      v25 = (int)(float)(v22 * (float)(v13 - v21));
  }
  if ((v25 & 0x80000000) == 0 || v30)
  {
    v50 = (unsigned __int16 *)(v31 + 8 * v25);
    if (v25 < 0)
      v51 = v30;
    else
      v51 = v50;
    v52 = *v51;
    v53 = v51[3];
    v54 = v51[2];
    v55 = v51[1];
    if (v15)
    {
      v56 = vdup_n_s32(v52);
      v57 = vdup_n_s32(v55);
      v58 = a4 + 4;
      v59 = vdup_n_s32(v54);
      v60 = vdup_n_s32(v53);
      do
      {
        v61 = (__int8 *)(v32 + v34);
        v34 = ((_DWORD)v34 + 1) & v35;
        a12.i8[0] = *v61;
        a12.i8[4] = *(_BYTE *)(v32 + v33);
        v62 = (int32x2_t)vand_s8(a12, (int8x8_t)0xFF000000FFLL);
        v63 = vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_n_s32(vadd_s32(v57, v62), 8uLL), (int8x8_t)0xFF000000FF0000), vand_s8((int8x8_t)vadd_s32(v56, v62), (int8x8_t)0xFF000000FF00)), vorr_s8((int8x8_t)(*(_QWORD *)&vshl_n_s32(vadd_s32(v59, v62), 0x10uLL) & 0xFF00FFFFFF00FFFFLL), (int8x8_t)(*(_QWORD *)&vshr_n_u32((uint32x2_t)vadd_s32(v60, v62), 8uLL) & 0xFFFFFEFFFFFFFEFFLL)));
        *(int8x8_t *)v28 = v63;
        v33 = ((_DWORD)v33 + 1) & v35;
        v63.i8[0] = *(_BYTE *)(v32 + v34);
        v63.i8[4] = *(_BYTE *)(v32 + v33);
        v64 = (int32x2_t)vand_s8(v63, (int8x8_t)0xFF000000FFLL);
        a12 = vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_n_s32(vadd_s32(v57, v64), 8uLL), (int8x8_t)0xFF000000FF0000), vand_s8((int8x8_t)vadd_s32(v56, v64), (int8x8_t)0xFF000000FF00)), vorr_s8((int8x8_t)(*(_QWORD *)&vshl_n_s32(vadd_s32(v59, v64), 0x10uLL) & 0xFF00FFFFFF00FFFFLL), (int8x8_t)(*(_QWORD *)&vshr_n_u32((uint32x2_t)vadd_s32(v60, v64), 8uLL) & 0xFFFFFEFFFFFFFEFFLL)));
        *(double *)(v28 + 8) = *(double *)&a12;
        *v27++ = -1;
        v58 -= 4;
        v28 += 16;
      }
      while (v58 > 4);
    }
    else
    {
      v65 = vdupq_n_s32(v52 & 0xFF00 | (v53 >> 8) & 0xFF00FFFF | (BYTE1(v54) << 24) | (BYTE1(v55) << 16));
      v66 = a4 + 4;
      do
      {
        *(int32x4_t *)v28 = v65;
        v28 += 16;
        *v27++ = -1;
        v66 -= 4;
      }
      while (v66 > 4);
    }
  }
  else
  {
    if (a4 >= 4)
      v36 = 4;
    else
      v36 = a4;
    bzero(v27, ((a4 - v36 + 3) & 0xFFFFFFFC) + 4);
  }
}

void ARGB32_mark_image_RGB48(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int *v13;
  int v14;
  void *v15;
  void *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  char *v28;
  int v29;
  uint64_t i;
  char *v31;
  int v32;
  char *v33;
  char v34;
  char v35;
  char v36;
  int v37;
  void *v40;
  int v41;
  int v42;
  uint64_t v43;

  v37 = a2;
  v9 = *(unsigned int *)(a1 + 28);
  v10 = (int)v9;
  v11 = *(_DWORD *)(a1 + 4);
  v12 = *(_DWORD *)(a1 + 8);
  v41 = v12;
  v42 = v11;
  v13 = *(int **)(a1 + 136);
  if (v13)
  {
    v14 = *(_DWORD *)(a1 + 104);
    LODWORD(v43) = *(_DWORD *)(a1 + 108);
    HIDWORD(v43) = v14;
    shape_enum_clip_alloc(a1, a2, v13, 1, 1, 1, v14, v43, v11, v12);
    v16 = v15;
    if (v15)
      goto LABEL_24;
  }
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v43 = 0;
  if (v11 < 0)
LABEL_4:
    _CGHandleAssert("CGSConvertRGB16toARGB8888", 487, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-argb8.c", "width >= 0", "width (%d) is negative", a6, a7, a8, v11);
  while (1)
  {
    if (v12 < 0)
      _CGHandleAssert("CGSConvertRGB16toARGB8888", 487, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-argb8.c", "height >= 0", "height (%d) is negative", a6, a7, a8, v12);
    v40 = v16;
    v19 = *(_DWORD *)(a1 + 76);
    v20 = *(_QWORD *)(a1 + 88) + v19 * (uint64_t)(a3 + v18 * a4) + 6 * (v17 + v37);
    v21 = (char *)(*(_QWORD *)(a1 + 40) + (*(int *)(a1 + 16) + (uint64_t)v18) * v10 + 4 * (*(_DWORD *)(a1 + 12) + v17));
    v22 = v19 * (uint64_t)a4;
    v23 = v12 - 1;
    if ((v9 & 0x80000000) != 0)
    {
      v20 += (int)v23 * v22;
      LODWORD(v22) = -(int)v22;
      v24 = v10;
      v21 += v23 * v10;
      v25 = v9;
      v26 = -(int)v9;
    }
    else
    {
      v24 = v10;
      v25 = v9;
      v26 = v9;
    }
    v27 = v20 + (int)((v22 * v23) & ((int)v22 >> 31));
    v28 = v21;
    if (v27 <= (unint64_t)&v21[v12 * (uint64_t)v26])
    {
      v29 = (int)v22 >= 0 ? v22 : -(int)v22;
      v28 = v21;
      if (v27 + v12 * (uint64_t)v29 >= (unint64_t)v21)
        v28 = (char *)malloc_type_malloc(v12 * (uint64_t)v26, 0x7F3B0B10uLL);
    }
    if (v12 >= 1)
    {
      for (i = 0; i != v12; ++i)
      {
        if (v11 >= 1)
        {
          v31 = &v28[i * v26];
          v32 = v11;
          v33 = (char *)(v20 + i * (int)v22);
          do
          {
            v34 = *v33;
            v35 = v33[2];
            v36 = v33[4];
            *v31 = -1;
            v31[1] = v34;
            v31[2] = v35;
            v31[3] = v36;
            v33 += 6;
            v31 += 4;
            --v32;
          }
          while (v32);
        }
      }
    }
    if (v28 != v21)
    {
      CGBlt_copyBytes(4 * v11, v12, v28, v21, v26, v26);
      free(v28);
    }
    v10 = v24;
    v9 = v25;
    v16 = v40;
    if (!v40)
      break;
LABEL_24:
    if (!shape_enum_clip_next((uint64_t)v16, (int *)&v43 + 1, &v43, &v42, &v41))
    {
      free(v16);
      return;
    }
    v18 = v43;
    v17 = HIDWORD(v43);
    v12 = v41;
    v11 = v42;
    if (v42 < 0)
      goto LABEL_4;
  }
}

void ARGB32_mark_image_rgb48(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int *v13;
  int v14;
  void *v15;
  void *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  char *v28;
  int v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int v33;
  char *v34;
  char v35;
  char v36;
  char v37;
  int v38;
  void *v41;
  int v42;
  int v43;
  uint64_t v44;

  v38 = a2;
  v9 = *(unsigned int *)(a1 + 28);
  v10 = (int)v9;
  v11 = *(_DWORD *)(a1 + 4);
  v12 = *(_DWORD *)(a1 + 8);
  v42 = v12;
  v43 = v11;
  v13 = *(int **)(a1 + 136);
  if (v13)
  {
    v14 = *(_DWORD *)(a1 + 104);
    LODWORD(v44) = *(_DWORD *)(a1 + 108);
    HIDWORD(v44) = v14;
    shape_enum_clip_alloc(a1, a2, v13, 1, 1, 1, v14, v44, v11, v12);
    v16 = v15;
    if (v15)
      goto LABEL_24;
  }
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v44 = 0;
  if (v11 < 0)
LABEL_4:
    _CGHandleAssert("CGSConvertrgb16toARGB8888", 649, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-argb8.c", "width >= 0", "width (%d) is negative", a6, a7, a8, v11);
  while (1)
  {
    if (v12 < 0)
      _CGHandleAssert("CGSConvertrgb16toARGB8888", 649, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-argb8.c", "height >= 0", "height (%d) is negative", a6, a7, a8, v12);
    v41 = v16;
    v19 = *(_DWORD *)(a1 + 76);
    v20 = *(_QWORD *)(a1 + 88) + v19 * (uint64_t)(a3 + v18 * a4) + 6 * (v17 + v38);
    v21 = (char *)(*(_QWORD *)(a1 + 40) + (*(int *)(a1 + 16) + (uint64_t)v18) * v10 + 4 * (*(_DWORD *)(a1 + 12) + v17));
    v22 = v19 * (uint64_t)a4;
    v23 = v12 - 1;
    if ((v9 & 0x80000000) != 0)
    {
      v20 += (int)v23 * v22;
      LODWORD(v22) = -(int)v22;
      v24 = v10;
      v21 += v23 * v10;
      v25 = v9;
      v26 = -(int)v9;
    }
    else
    {
      v24 = v10;
      v25 = v9;
      v26 = v9;
    }
    v27 = v20 + (int)((v22 * v23) & ((int)v22 >> 31));
    v28 = v21;
    if (v27 <= (unint64_t)&v21[v12 * (uint64_t)v26])
    {
      v29 = (int)v22 >= 0 ? v22 : -(int)v22;
      v28 = v21;
      if (v27 + v12 * (uint64_t)v29 >= (unint64_t)v21)
        v28 = (char *)malloc_type_malloc(v12 * (uint64_t)v26, 0xE7346FE5uLL);
    }
    if (v12 >= 1)
    {
      v30 = 0;
      v31 = (char *)(v20 + 5);
      do
      {
        if (v11 >= 1)
        {
          v32 = &v28[v30 * v26];
          v33 = v11;
          v34 = v31;
          do
          {
            v35 = *(v34 - 4);
            v36 = *(v34 - 2);
            v37 = *v34;
            v34 += 6;
            *v32 = -1;
            v32[1] = v35;
            v32[2] = v36;
            v32[3] = v37;
            v32 += 4;
            --v33;
          }
          while (v33);
        }
        ++v30;
        v31 += (int)v22;
      }
      while (v30 != v12);
    }
    if (v28 != v21)
    {
      CGBlt_copyBytes(4 * v11, v12, v28, v21, v26, v26);
      free(v28);
    }
    v10 = v24;
    v9 = v25;
    v16 = v41;
    if (!v41)
      break;
LABEL_24:
    if (!shape_enum_clip_next((uint64_t)v16, (int *)&v44 + 1, &v44, &v43, &v42))
    {
      free(v16);
      return;
    }
    v18 = v44;
    v17 = HIDWORD(v44);
    v12 = v42;
    v11 = v43;
    if (v43 < 0)
      goto LABEL_4;
  }
}

void ARGB32_mark_image_RGBA64(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int *v11;
  int v12;
  void *v13;
  void *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int32x4_t v28;
  int v29;
  uint32x4_t *v30;
  __int32 *v31;
  unsigned int v32;
  int32x4_t v33;
  unsigned __int128 v34;
  int v35;
  int8x16_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  BOOL v42;
  int v43;
  __int32 v44;
  int v45;
  _BOOL4 v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  char *v50;
  int v51;
  int v52;
  char *v53;
  uint64_t i;
  char *v55;
  int v56;
  char *v57;
  char v58;
  char v59;
  char v60;
  char v61;
  int v63;
  int v64;
  void *v68;
  int v69;
  int v70;
  uint64_t v71;

  v8 = a5;
  v64 = a2;
  v63 = *(_DWORD *)(a1 + 28);
  v9 = *(_DWORD *)(a1 + 4);
  v10 = *(_DWORD *)(a1 + 8);
  v69 = v10;
  v70 = v9;
  v11 = *(int **)(a1 + 136);
  if (v11)
  {
    v12 = *(_DWORD *)(a1 + 104);
    LODWORD(v71) = *(_DWORD *)(a1 + 108);
    HIDWORD(v71) = v12;
    shape_enum_clip_alloc(a1, a2, v11, 1, 1, 1, v12, v71, v9, v10);
    v14 = v13;
    if (v13)
      goto LABEL_50;
  }
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v71 = 0;
  while (1)
  {
    v17 = *(_DWORD *)(a1 + 76);
    v18 = *(_QWORD *)(a1 + 88) + v17 * (uint64_t)(a4 + v16 * v8) + 8 * (v15 + a3);
    v19 = *(int *)(a1 + 16) + (uint64_t)v16;
    v20 = *(_QWORD *)(a1 + 48);
    v21 = (char *)(*(_QWORD *)(a1 + 40) + v19 * v63 + 4 * (*(_DWORD *)(a1 + 12) + v15));
    v22 = v17 * (uint64_t)v8;
    v68 = v14;
    if (v64 == 2)
    {
      if (v20)
        v23 = 0;
      else
        v23 = 255;
      if (v10 >= 1)
      {
        v24 = (int8x16_t)vdupq_n_s32(v23);
        v25.i64[0] = 0xFF000000FF00;
        v25.i64[1] = 0xFF000000FF00;
        v26.i64[0] = 0xFF000000FF0000;
        v26.i64[1] = 0xFF000000FF0000;
        v27.i64[0] = 0xFF000000FFLL;
        v27.i64[1] = 0xFF000000FFLL;
        v28.i64[0] = 0x1000100010001;
        v28.i64[1] = 0x1000100010001;
        do
        {
          v29 = v9;
          v30 = (uint32x4_t *)v21;
          v31 = (__int32 *)v18;
          v32 = v9;
          if (v9 >= 4)
          {
            do
            {
              v33.i32[0] = v31[1];
              v33.i32[1] = v31[3];
              v33.i32[2] = v31[5];
              v33.i32[3] = v31[7];
              v34 = *(_OWORD *)&vshrq_n_u32((uint32x4_t)v33, 0x10uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
              v35 = vaddvq_s32((int32x4_t)v34);
              if (v35)
              {
                v36.i32[0] = *v31;
                v36.i32[1] = v31[2];
                v36.i32[2] = v31[4];
                v36.i32[3] = v31[6];
                v37 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(vandq_s8(v36, v26), (int8x16_t)vshlq_n_s32(v33, 0x18uLL)), vandq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v36, 8uLL), v25)), (int8x16_t)v34);
                if (v35 != 1020)
                {
                  v38 = (int32x4_t)veorq_s8((int8x16_t)v34, v27);
                  v39.i16[0] = v30->u8[0];
                  v39.i16[1] = BYTE2(v30->u32[0]);
                  v39.i16[2] = BYTE4(v30->i64[0]);
                  v39.i16[3] = BYTE6(v30->i64[0]);
                  v39.i16[4] = v30->i64[1];
                  v39.i16[5] = BYTE2(v30->i64[1]);
                  v39.i16[6] = BYTE12(*(unsigned __int128 *)v30);
                  v39.i16[7] = BYTE14(*(unsigned __int128 *)v30);
                  v40 = vmulq_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(*v30, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v38);
                  v41 = vmulq_s32(v39, v38);
                  v37 = vaddq_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)vaddq_s32(vaddq_s32(v41, v28), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v41, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))), 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), vaddq_s32(v37, (int32x4_t)(*(_OWORD *)&vaddq_s32(vaddq_s32(v40, v28), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v40, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))) & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00))));
                }
                *(int8x16_t *)v30 = vorrq_s8((int8x16_t)v37, v24);
              }
              v29 = v32 - 4;
              v31 += 8;
              ++v30;
              v42 = v32 > 7;
              v32 -= 4;
            }
            while (v42);
          }
          if (v29 >= 1)
          {
            v43 = v29 + 1;
            do
            {
              v44 = v31[1];
              if (BYTE2(v44))
              {
                v45 = *v31 & 0xFF0000 | (*v31 << 8) | (v44 << 24) | BYTE2(v44);
                if (BYTE2(v44) != 255)
                  v45 += ((((v30->i32[0] & 0xFF00FF) * (BYTE2(v44) ^ 0xFF)
                          + 65537
                          + ((((v30->i32[0] & 0xFF00FF) * (BYTE2(v44) ^ 0xFFu)) >> 8) & 0xFF00FF)) >> 8) & 0xFF00FF)
                       + (((((unsigned __int32)v30->i32[0] >> 8) & 0xFF00FF) * (BYTE2(v44) ^ 0xFF)
                         + 65537
                         + ((((((unsigned __int32)v30->i32[0] >> 8) & 0xFF00FF) * (BYTE2(v44) ^ 0xFF)) >> 8) & 0xFF00FF)) & 0xFF00FF00);
                v30->i32[0] = v45 | v23;
              }
              v30 = (uint32x4_t *)((char *)v30 + 4);
              --v43;
              v31 += 2;
            }
            while (v43 > 1);
          }
          v18 += v22;
          v21 += v63;
          v42 = v10-- <= 1;
        }
        while (!v42);
      }
    }
    else
    {
      v46 = 0;
      if (v20)
        v46 = *(_QWORD *)(a1 + 96) != 0;
      if (v9 < 0)
        _CGHandleAssert("CGSConvertRGBA16toARGB8888", 519, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-argb8.c", "width >= 0", "width (%d) is negative", a6, a7, a8, v9);
      if (v10 < 0)
        _CGHandleAssert("CGSConvertRGBA16toARGB8888", 519, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-argb8.c", "height >= 0", "height (%d) is negative", a6, a7, a8, v10);
      v47 = v10 - 1;
      if (v63 < 0)
      {
        v18 += (int)v47 * (uint64_t)(int)v22;
        LODWORD(v22) = -(int)v22;
        v48 = -v63;
        v21 += v47 * v63;
      }
      else
      {
        v48 = v63;
      }
      v49 = v18 + (int)((v22 * v47) & ((int)v22 >> 31));
      v50 = v21;
      if (v49 <= (unint64_t)&v21[v10 * (uint64_t)v48])
      {
        v51 = (int)v22 >= 0 ? v22 : -(int)v22;
        v50 = v21;
        if (v49 + v10 * (uint64_t)v51 >= (unint64_t)v21)
        {
          v52 = v48;
          v53 = (char *)malloc_type_malloc(v10 * (uint64_t)v48, 0x9E4A635uLL);
          v48 = v52;
          v50 = v53;
        }
      }
      if (v10 >= 1)
      {
        for (i = 0; i != v10; ++i)
        {
          if (v9 >= 1)
          {
            v55 = &v50[i * v48];
            v56 = v9;
            v57 = (char *)(v18 + i * (int)v22);
            do
            {
              v58 = *v57;
              v59 = v57[2];
              v60 = v57[4];
              v61 = v57[6];
              if (!v46)
                v61 = -1;
              *v55 = v61;
              v55[1] = v58;
              v55[2] = v59;
              v55[3] = v60;
              v57 += 8;
              v55 += 4;
              --v56;
            }
            while (v56);
          }
        }
      }
      v8 = a5;
      if (v50 != v21)
      {
        CGBlt_copyBytes(4 * v9, v10, v50, v21, v48, v48);
        free(v50);
      }
    }
    v14 = v68;
    if (!v68)
      break;
LABEL_50:
    if (!shape_enum_clip_next((uint64_t)v14, (int *)&v71 + 1, &v71, &v70, &v69))
    {
      free(v14);
      return;
    }
    v16 = v71;
    v15 = HIDWORD(v71);
    v10 = v69;
    v9 = v70;
  }
}

void ARGB32_mark_image_rgba64(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int *v11;
  int v12;
  void *v13;
  void *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int32x4_t v28;
  int v29;
  uint32x4_t *v30;
  __int32 *v31;
  unsigned int v32;
  int32x4_t v33;
  int32x4_t v34;
  int v35;
  uint32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  BOOL v42;
  int v43;
  unsigned __int32 v44;
  unsigned __int32 v45;
  int v46;
  _BOOL4 v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  char *v51;
  int v52;
  int v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  int v59;
  char v60;
  char v61;
  char v62;
  char v63;
  int v65;
  int v66;
  void *v70;
  int v71;
  int v72;
  uint64_t v73;

  v8 = a5;
  v66 = a2;
  v65 = *(_DWORD *)(a1 + 28);
  v9 = *(_DWORD *)(a1 + 4);
  v10 = *(_DWORD *)(a1 + 8);
  v71 = v10;
  v72 = v9;
  v11 = *(int **)(a1 + 136);
  if (v11)
  {
    v12 = *(_DWORD *)(a1 + 104);
    LODWORD(v73) = *(_DWORD *)(a1 + 108);
    HIDWORD(v73) = v12;
    shape_enum_clip_alloc(a1, a2, v11, 1, 1, 1, v12, v73, v9, v10);
    v14 = v13;
    if (v13)
      goto LABEL_50;
  }
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v73 = 0;
  while (1)
  {
    v17 = *(_DWORD *)(a1 + 76);
    v18 = *(_QWORD *)(a1 + 88) + v17 * (uint64_t)(a4 + v16 * v8) + 8 * (v15 + a3);
    v19 = *(int *)(a1 + 16) + (uint64_t)v16;
    v20 = *(_QWORD *)(a1 + 48);
    v21 = (char *)(*(_QWORD *)(a1 + 40) + v19 * v65 + 4 * (*(_DWORD *)(a1 + 12) + v15));
    v22 = v17 * (uint64_t)v8;
    v70 = v14;
    if (v66 == 2)
    {
      if (v20)
        v23 = 0;
      else
        v23 = 255;
      if (v10 >= 1)
      {
        v24 = (int8x16_t)vdupq_n_s32(v23);
        v25.i64[0] = 0xFF000000FF00;
        v25.i64[1] = 0xFF000000FF00;
        v26.i64[0] = 0xFF000000FF0000;
        v26.i64[1] = 0xFF000000FF0000;
        v27.i64[0] = 0xFF000000FFLL;
        v27.i64[1] = 0xFF000000FFLL;
        v28.i64[0] = 0x1000100010001;
        v28.i64[1] = 0x1000100010001;
        do
        {
          v29 = v9;
          v30 = (uint32x4_t *)v21;
          v31 = (__int32 *)v18;
          v32 = v9;
          if (v9 >= 4)
          {
            do
            {
              v33.i32[0] = v31[1];
              v33.i32[1] = v31[3];
              v33.i32[2] = v31[5];
              v33.i32[3] = v31[7];
              v34 = (int32x4_t)vshrq_n_u32((uint32x4_t)v33, 0x18uLL);
              v35 = vaddvq_s32(v34);
              if (v35)
              {
                v36.i32[0] = *v31;
                v36.i32[1] = v31[2];
                v36.i32[2] = v31[4];
                v36.i32[3] = v31[6];
                v37 = (int32x4_t)vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32(v36, 8uLL), v26), vandq_s8((int8x16_t)v36, v25)), vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v33, 0x10uLL) & __PAIR128__(0xFF00FFFFFF00FFFFLL, 0xFF00FFFFFF00FFFFLL)), (int8x16_t)v34));
                if (v35 != 1020)
                {
                  v38 = (int32x4_t)veorq_s8((int8x16_t)v34, v27);
                  v39.i16[0] = v30->u8[0];
                  v39.i16[1] = BYTE2(v30->u32[0]);
                  v39.i16[2] = BYTE4(v30->i64[0]);
                  v39.i16[3] = BYTE6(v30->i64[0]);
                  v39.i16[4] = v30->i64[1];
                  v39.i16[5] = BYTE2(v30->i64[1]);
                  v39.i16[6] = BYTE12(*(unsigned __int128 *)v30);
                  v39.i16[7] = BYTE14(*(unsigned __int128 *)v30);
                  v40 = vmulq_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(*v30, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v38);
                  v41 = vmulq_s32(v39, v38);
                  v37 = vaddq_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)vaddq_s32(vaddq_s32(v41, v28), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v41, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))), 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), vaddq_s32(v37, (int32x4_t)(*(_OWORD *)&vaddq_s32(vaddq_s32(v40, v28), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v40, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL))) & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00))));
                }
                *(int8x16_t *)v30 = vorrq_s8((int8x16_t)v37, v24);
              }
              v29 = v32 - 4;
              v31 += 8;
              ++v30;
              v42 = v32 > 7;
              v32 -= 4;
            }
            while (v42);
          }
          if (v29 >= 1)
          {
            v43 = v29 + 1;
            do
            {
              v44 = v31[1];
              v45 = HIBYTE(v44);
              if (HIBYTE(v44))
              {
                v46 = (*v31 >> 8) & 0xFF0000 | *v31 & 0xFF00 | (BYTE1(v44) << 24) | HIBYTE(v44);
                if (v45 != 255)
                  v46 += ((((v30->i32[0] & 0xFF00FF) * (v45 ^ 0xFF)
                          + 65537
                          + ((((v30->i32[0] & 0xFF00FF) * (v45 ^ 0xFF)) >> 8) & 0xFF00FF)) >> 8) & 0xFF00FF)
                       + (((((unsigned __int32)v30->i32[0] >> 8) & 0xFF00FF) * (v45 ^ 0xFF)
                         + 65537
                         + ((((((unsigned __int32)v30->i32[0] >> 8) & 0xFF00FF) * (v45 ^ 0xFF)) >> 8) & 0xFF00FF)) & 0xFF00FF00);
                v30->i32[0] = v46 | v23;
              }
              v30 = (uint32x4_t *)((char *)v30 + 4);
              --v43;
              v31 += 2;
            }
            while (v43 > 1);
          }
          v18 += v22;
          v21 += v65;
          v42 = v10-- <= 1;
        }
        while (!v42);
      }
    }
    else
    {
      v47 = 0;
      if (v20)
        v47 = *(_QWORD *)(a1 + 96) != 0;
      if (v9 < 0)
        _CGHandleAssert("CGSConvertrgba16toARGB8888", 681, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-argb8.c", "width >= 0", "width (%d) is negative", a6, a7, a8, v9);
      if (v10 < 0)
        _CGHandleAssert("CGSConvertrgba16toARGB8888", 681, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-argb8.c", "height >= 0", "height (%d) is negative", a6, a7, a8, v10);
      v48 = v10 - 1;
      if (v65 < 0)
      {
        v18 += (int)v48 * (uint64_t)(int)v22;
        LODWORD(v22) = -(int)v22;
        v49 = -v65;
        v21 += v48 * v65;
      }
      else
      {
        v49 = v65;
      }
      v50 = v18 + (int)((v22 * v48) & ((int)v22 >> 31));
      v51 = v21;
      if (v50 <= (unint64_t)&v21[v10 * (uint64_t)v49])
      {
        v52 = (int)v22 >= 0 ? v22 : -(int)v22;
        v51 = v21;
        if (v50 + v10 * (uint64_t)v52 >= (unint64_t)v21)
        {
          v53 = v49;
          v54 = (char *)malloc_type_malloc(v10 * (uint64_t)v49, 0x9BB5A1B4uLL);
          v49 = v53;
          v51 = v54;
        }
      }
      if (v10 >= 1)
      {
        v55 = 0;
        v56 = (char *)(v18 + 3);
        do
        {
          if (v9 >= 1)
          {
            v57 = &v51[v55 * v49];
            v58 = v56;
            v59 = v9;
            do
            {
              v60 = *(v58 - 2);
              v61 = *v58;
              v62 = v58[2];
              v63 = v58[4];
              if (!v47)
                v63 = -1;
              *v57 = v63;
              v57[1] = v60;
              v57[2] = v61;
              v57[3] = v62;
              v57 += 4;
              v58 += 8;
              --v59;
            }
            while (v59);
          }
          ++v55;
          v56 += (int)v22;
        }
        while (v55 != v10);
      }
      v8 = a5;
      if (v51 != v21)
      {
        CGBlt_copyBytes(4 * v9, v10, v51, v21, v49, v49);
        free(v51);
      }
    }
    v14 = v70;
    if (!v70)
      break;
LABEL_50:
    if (!shape_enum_clip_next((uint64_t)v14, (int *)&v73 + 1, &v73, &v72, &v71))
    {
      free(v14);
      return;
    }
    v16 = v73;
    v15 = HIDWORD(v73);
    v10 = v71;
    v9 = v72;
  }
}

void RGBAf16_sample_RGB24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  _CGHandleAssert("RGBAf16_sample_RGB24", 14737, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "", "Unimplemented", a6, a7, a8, vars0);
}

void RGBAf16_sample_RGBA32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  _CGHandleAssert("RGBAf16_sample_RGBA32", 14741, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "", "Unimplemented", a6, a7, a8, vars0);
}

void RGBAf16_sample_rgba32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  _CGHandleAssert("RGBAf16_sample_rgba32", 14745, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "", "Unimplemented", a6, a7, a8, vars0);
}

void RGBAf16_sample_ARGB32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  _CGHandleAssert("RGBAf16_sample_ARGB32", 14749, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "", "Unimplemented", a6, a7, a8, vars0);
}

void RGBAf16_sample_argb32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  _CGHandleAssert("RGBAf16_sample_argb32", 14753, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "", "Unimplemented", a6, a7, a8, vars0);
}

void RGBAf16_sample_RGB48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  _CGHandleAssert("RGBAf16_sample_RGB48", 14757, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "", "Unimplemented", a6, a7, a8, vars0);
}

void RGBAf16_sample_rgb48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  _CGHandleAssert("RGBAf16_sample_rgb48", 14761, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "", "Unimplemented", a6, a7, a8, vars0);
}

void RGBAf16_sample_RGBA64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  _CGHandleAssert("RGBAf16_sample_RGBA64", 14765, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "", "Unimplemented", a6, a7, a8, vars0);
}

void RGBAf16_sample_rgba64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  _CGHandleAssert("RGBAf16_sample_rgba64", 14769, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "", "Unimplemented", a6, a7, a8, vars0);
}

void RGBAf16_sample_WF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  _CGHandleAssert("RGBAf16_sample_WF", 14773, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "", "Unimplemented", a6, a7, a8, vars0);
}

void RGBAf16_sample_Wf(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  _CGHandleAssert("RGBAf16_sample_Wf", 14777, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "", "Unimplemented", a6, a7, a8, vars0);
}

void RGBAf16_sample_RGBF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  _CGHandleAssert("RGBAf16_sample_RGBF", 14781, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "", "Unimplemented", a6, a7, a8, vars0);
}

void RGBAf16_sample_RGBf(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  _CGHandleAssert("RGBAf16_sample_RGBf", 14785, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "", "Unimplemented", a6, a7, a8, vars0);
}

void RGBAf16_sample_RGBAF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  _CGHandleAssert("RGBAf16_sample_RGBAF", 14789, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "", "Unimplemented", a6, a7, a8, vars0);
}

void RGBAf16_sample_RGBAf(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  _CGHandleAssert("RGBAf16_sample_RGBAf", 14793, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "", "Unimplemented", a6, a7, a8, vars0);
}

void RGBAf16_sample_CMYKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  _CGHandleAssert("RGBAf16_sample_CMYKF", 14797, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "", "Unimplemented", a6, a7, a8, vars0);
}

void RGBAf16_sample_CMYKf(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  _CGHandleAssert("RGBAf16_sample_CMYKf", 14801, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "", "Unimplemented", a6, a7, a8, vars0);
}

__int16 PDAmultiplyPDA@<H0>(__n128 _Q0@<Q0>, __n128 _Q1@<Q1>, __n128 _Q2@<Q2>, double a4@<D3>, float a5@<S4>, double a6@<D5>, double a7@<D6>, double a8@<D7>, uint64_t a9@<X0>, uint64_t a10@<X1>, uint64_t a11@<X2>, uint64_t a12@<X3>, uint64_t a13@<X4>, uint64_t a14@<X5>, uint64_t a15@<X6>, uint64_t a16@<X7>, __int16 a17, __int16 a18, __int16 a19, float a20)
{
  float v30;
  float v31;
  float v32;
  float v36;
  float v37;
  float v38;
  __int16 result;

  _H5 = a19;
  _H6 = a18;
  _H7 = a17;
  __asm
  {
    FCVT            S0, H0
    FCVT            S1, H1
    FCVT            S2, H2
    FCVT            S7, H7
    FCVT            S6, H6
    FCVT            S5, H5
  }
  v30 = _S0 * _S7;
  v31 = _S1 * _S6;
  v32 = _S2 * _S5;
  _S0 = (float)(_S0 * _S7) + (float)(_S0 * (float)(1.0 - a20));
  _S1 = (float)(_S1 * _S6) + (float)(_S1 * (float)(1.0 - a20));
  _S2 = (float)(_S2 * _S5) + (float)(_S2 * (float)(1.0 - a20));
  if (a20 == 1.0)
  {
    _S0 = v30;
    _S1 = v31;
    _S2 = v32;
  }
  v36 = _S0 + (float)(_S7 * (float)(1.0 - a5));
  v37 = _S1 + (float)(_S6 * (float)(1.0 - a5));
  v38 = _S2 + (float)(_S5 * (float)(1.0 - a5));
  if (a5 != 1.0)
  {
    _S0 = v36;
    _S1 = v37;
    _S2 = v38;
  }
  _S3 = (float)(a5 + a20) - (float)(a5 * a20);
  __asm
  {
    FCVT            H0, S0
    FCVT            H1, S1
    FCVT            H2, S2
    FCVT            H3, S3
  }
  return result;
}

__int16 PDAoverlayPDA@<H0>(__n128 _Q0@<Q0>, __n128 _Q1@<Q1>, __n128 _Q2@<Q2>, double a4@<D3>, float a5@<S4>, double a6@<D5>, double a7@<D6>, double a8@<D7>, uint64_t a9@<X0>, uint64_t a10@<X1>, uint64_t a11@<X2>, uint64_t a12@<X3>, uint64_t a13@<X4>, uint64_t a14@<X5>, uint64_t a15@<X6>, uint64_t a16@<X7>, __int16 a17, __int16 a18, __int16 a19, float a20)
{
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  BOOL v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v42;
  float v44;
  __int16 result;

  _H5 = a19;
  _H6 = a18;
  _H7 = a17;
  __asm
  {
    FCVT            S0, H0
    FCVT            S1, H1
    FCVT            S2, H2
    FCVT            S7, H7
    FCVT            S6, H6
    FCVT            S5, H5
  }
  v30 = (float)(_S0 * _S7) + (float)(_S0 * _S7);
  v31 = (float)(_S1 * _S6) + (float)(_S1 * _S6);
  v32 = (float)(_S2 * _S5) + (float)(_S2 * _S5);
  v33 = a5 * a20;
  v34 = a5 * 0.5;
  v35 = (float)(a5 * 0.5) <= _S0;
  v36 = a20 + 1.0;
  v37 = a5 + 1.0;
  v38 = (float)((float)((float)((float)(a5 + 1.0) * _S7) + (float)(_S0 * (float)(a20 + 1.0))) - v30) - (float)(a5 * a20);
  v39 = 1.0 - a20;
  v40 = 1.0 - a5;
  _S0 = (float)((float)((float)(1.0 - a5) * _S7) + (float)(_S0 * (float)(1.0 - a20))) + v30;
  if (v35)
    _S0 = v38;
  v35 = v34 <= _S1;
  v42 = (float)((float)((float)(v37 * _S6) + (float)(_S1 * v36)) - v31) - v33;
  _S1 = (float)((float)(v40 * _S6) + (float)(_S1 * v39)) + v31;
  if (v35)
    _S1 = v42;
  v35 = v34 <= _S2;
  v44 = (float)((float)((float)(v37 * _S5) + (float)(_S2 * v36)) - v32) - v33;
  _S2 = (float)((float)(v40 * _S5) + (float)(_S2 * v39)) + v32;
  if (v35)
    _S2 = v44;
  _S3 = (float)(a5 + a20) - v33;
  __asm
  {
    FCVT            H0, S0
    FCVT            H1, S1
    FCVT            H2, S2
    FCVT            H3, S3
  }
  return result;
}

__int16 PDAlightenPDA@<H0>(__n128 _Q0@<Q0>, __n128 _Q1@<Q1>, __n128 _Q2@<Q2>, double a4@<D3>, float a5@<S4>, double a6@<D5>, double a7@<D6>, double a8@<D7>, uint64_t a9@<X0>, uint64_t a10@<X1>, uint64_t a11@<X2>, uint64_t a12@<X3>, uint64_t a13@<X4>, uint64_t a14@<X5>, uint64_t a15@<X6>, uint64_t a16@<X7>, __int16 a17, __int16 a18, __int16 a19, float a20)
{
  float v30;
  float v31;
  float v32;
  float v36;
  float v37;
  float v38;
  __int16 result;

  _H5 = a19;
  _H6 = a18;
  _H7 = a17;
  __asm
  {
    FCVT            S0, H0
    FCVT            S1, H1
    FCVT            S2, H2
    FCVT            S7, H7
    FCVT            S6, H6
    FCVT            S5, H5
  }
  v30 = _S0 * a20;
  if ((float)(_S7 * a5) > (float)(_S0 * a20))
    v30 = _S7 * a5;
  v31 = _S1 * a20;
  if ((float)(_S6 * a5) > (float)(_S1 * a20))
    v31 = _S6 * a5;
  v32 = _S2 * a20;
  if ((float)(_S5 * a5) > (float)(_S2 * a20))
    v32 = _S5 * a5;
  _S0 = v30 + (float)(_S0 * (float)(1.0 - a20));
  _S1 = v31 + (float)(_S1 * (float)(1.0 - a20));
  _S2 = v32 + (float)(_S2 * (float)(1.0 - a20));
  if (a20 == 1.0)
  {
    _S0 = v30;
    _S1 = v31;
    _S2 = v32;
  }
  v36 = _S0 + (float)(_S7 * (float)(1.0 - a5));
  v37 = _S1 + (float)(_S6 * (float)(1.0 - a5));
  v38 = _S2 + (float)(_S5 * (float)(1.0 - a5));
  if (a5 != 1.0)
  {
    _S0 = v36;
    _S1 = v37;
    _S2 = v38;
  }
  _S3 = (float)(a5 + a20) - (float)(a5 * a20);
  __asm
  {
    FCVT            H0, S0
    FCVT            H1, S1
    FCVT            H2, S2
    FCVT            H3, S3
  }
  return result;
}

__int16 PDAdarkenPDA@<H0>(__n128 _Q0@<Q0>, __n128 _Q1@<Q1>, __n128 _Q2@<Q2>, double a4@<D3>, float a5@<S4>, double a6@<D5>, double a7@<D6>, double a8@<D7>, uint64_t a9@<X0>, uint64_t a10@<X1>, uint64_t a11@<X2>, uint64_t a12@<X3>, uint64_t a13@<X4>, uint64_t a14@<X5>, uint64_t a15@<X6>, uint64_t a16@<X7>, __int16 a17, __int16 a18, __int16 a19, float a20)
{
  float v30;
  float v31;
  float v32;
  float v36;
  float v37;
  float v38;
  __int16 result;

  _H5 = a19;
  _H6 = a18;
  _H7 = a17;
  __asm
  {
    FCVT            S0, H0
    FCVT            S1, H1
    FCVT            S2, H2
    FCVT            S7, H7
    FCVT            S6, H6
    FCVT            S5, H5
  }
  v30 = _S0 * a20;
  if ((float)(_S7 * a5) < (float)(_S0 * a20))
    v30 = _S7 * a5;
  v31 = _S1 * a20;
  if ((float)(_S6 * a5) < (float)(_S1 * a20))
    v31 = _S6 * a5;
  v32 = _S2 * a20;
  if ((float)(_S5 * a5) < (float)(_S2 * a20))
    v32 = _S5 * a5;
  _S0 = v30 + (float)(_S0 * (float)(1.0 - a20));
  _S1 = v31 + (float)(_S1 * (float)(1.0 - a20));
  _S2 = v32 + (float)(_S2 * (float)(1.0 - a20));
  if (a20 == 1.0)
  {
    _S0 = v30;
    _S1 = v31;
    _S2 = v32;
  }
  v36 = _S0 + (float)(_S7 * (float)(1.0 - a5));
  v37 = _S1 + (float)(_S6 * (float)(1.0 - a5));
  v38 = _S2 + (float)(_S5 * (float)(1.0 - a5));
  if (a5 != 1.0)
  {
    _S0 = v36;
    _S1 = v37;
    _S2 = v38;
  }
  _S3 = (float)(a5 + a20) - (float)(a5 * a20);
  __asm
  {
    FCVT            H0, S0
    FCVT            H1, S1
    FCVT            H2, S2
    FCVT            H3, S3
  }
  return result;
}

__int16 PDAcolordodgePDA@<H0>(__n128 _Q0@<Q0>, __n128 _Q1@<Q1>, __n128 _Q2@<Q2>, double a4@<D3>, float a5@<S4>, double a6@<D5>, double a7@<D6>, double a8@<D7>, uint64_t a9@<X0>, uint64_t a10@<X1>, uint64_t a11@<X2>, uint64_t a12@<X3>, uint64_t a13@<X4>, uint64_t a14@<X5>, uint64_t a15@<X6>, uint64_t a16@<X7>, __int16 a17, __int16 a18, __int16 a19, float a20)
{
  float v26;
  float v27;
  float v28;
  float v33;
  float v34;
  float v36;
  float v37;
  float v39;
  __int16 result;

  _H18 = a18;
  _H6 = a17;
  __asm
  {
    FCVT            S5, H0
    FCVT            S1, H1
    FCVT            S0, H6
  }
  v26 = a20 * a20;
  v27 = 0.0;
  v28 = 0.0;
  if (_S5 != 0.0)
  {
    v28 = 1.0;
    if (_S0 != a20)
      v28 = (float)(v26 * _S5) / (float)(a20 - _S0);
  }
  _H19 = a19;
  __asm
  {
    FCVT            S17, H2
    FCVT            S2, H18
  }
  if (_S1 != 0.0)
  {
    if (_S2 == a20)
      v27 = 1.0;
    else
      v27 = (float)(v26 * _S1) / (float)(a20 - _S2);
  }
  __asm { FCVT            S18, H19 }
  v33 = 0.0;
  if (_S17 != 0.0)
  {
    if (_S18 == a20)
      v33 = 1.0;
    else
      v33 = (float)(v26 * _S17) / (float)(a20 - _S18);
  }
  v34 = v28 + (float)(_S5 * (float)(1.0 - a20));
  _S1 = v27 + (float)(_S1 * (float)(1.0 - a20));
  v36 = v33 + (float)(_S17 * (float)(1.0 - a20));
  if (a20 == 1.0)
  {
    v34 = v28;
    _S1 = v27;
    v37 = v33;
  }
  else
  {
    v37 = v36;
  }
  _S0 = v34 + (float)(_S0 * (float)(1.0 - a5));
  v39 = _S1 + (float)(_S2 * (float)(1.0 - a5));
  if (a5 == 1.0)
    _S0 = v34;
  else
    _S1 = v39;
  if (a5 == 1.0)
    _S2 = v37;
  else
    _S2 = v37 + (float)(_S18 * (float)(1.0 - a5));
  _S3 = (float)(a5 + a20) - (float)(a5 * a20);
  if (_S0 > _S3)
    _S0 = (float)(a5 + a20) - (float)(a5 * a20);
  if (_S1 > _S3)
    _S1 = (float)(a5 + a20) - (float)(a5 * a20);
  if (_S2 > _S3)
    _S2 = (float)(a5 + a20) - (float)(a5 * a20);
  __asm
  {
    FCVT            H0, S0
    FCVT            H1, S1
    FCVT            H2, S2
    FCVT            H3, S3
  }
  return result;
}

__int16 PDAcolorburnPDA@<H0>(__n128 _Q0@<Q0>, __n128 _Q1@<Q1>, __n128 _Q2@<Q2>, double a4@<D3>, float a5@<S4>, double a6@<D5>, double a7@<D6>, double a8@<D7>, uint64_t a9@<X0>, uint64_t a10@<X1>, uint64_t a11@<X2>, uint64_t a12@<X3>, uint64_t a13@<X4>, uint64_t a14@<X5>, uint64_t a15@<X6>, uint64_t a16@<X7>, __int16 a17, __int16 a18, __int16 a19, float a20)
{
  float v30;
  float v31;
  float v32;
  float v36;
  float v37;
  float v38;
  __int16 result;

  _H5 = a19;
  _H6 = a18;
  _H16 = a17;
  __asm
  {
    FCVT            S19, H0
    FCVT            S17, H1
    FCVT            S7, H2
    FCVT            S18, H16
    FCVT            S16, H6
    FCVT            S1, H5
  }
  v30 = (float)(a5 * a20) + (float)(_S19 * (float)(1.0 - a20));
  v31 = (float)(a5 * a20) + (float)(_S17 * (float)(1.0 - a20));
  if (a20 == 1.0)
  {
    v30 = a5 * a20;
    v31 = a5 * a20;
    v32 = a5 * a20;
  }
  else
  {
    v32 = (float)(a5 * a20) + (float)(_S7 * (float)(1.0 - a20));
  }
  if (a5 == 1.0)
    _S2 = v30;
  else
    _S2 = v30 + (float)(_S18 * (float)(1.0 - a5));
  if (a5 == 1.0)
    _S5 = v31;
  else
    _S5 = v31 + (float)(_S16 * (float)(1.0 - a5));
  if (a5 == 1.0)
    _S6 = v32;
  else
    _S6 = v32 + (float)(_S1 * (float)(1.0 - a5));
  v36 = a5 - _S19;
  if (v36 != 0.0)
  {
    if (_S18 == 0.0 || (_S2 = _S2 - (float)((float)(v36 * (float)(a20 * a20)) / _S18), _S2 < 0.0))
      _S2 = 0.0;
  }
  v37 = a5 - _S17;
  if (v37 != 0.0)
  {
    if (_S16 == 0.0 || (_S5 = _S5 - (float)((float)(v37 * (float)(a20 * a20)) / _S16), _S5 < 0.0))
      _S5 = 0.0;
  }
  v38 = a5 - _S7;
  if (v38 != 0.0)
  {
    if (_S1 == 0.0 || (_S6 = _S6 - (float)((float)(v38 * (float)(a20 * a20)) / _S1), _S6 < 0.0))
      _S6 = 0.0;
  }
  _S3 = (float)(a5 + a20) - (float)(a5 * a20);
  __asm
  {
    FCVT            H0, S2
    FCVT            H1, S5
    FCVT            H2, S6
    FCVT            H3, S3
  }
  return result;
}

__int16 PDAhardlightPDA@<H0>(__n128 _Q0@<Q0>, __n128 _Q1@<Q1>, __n128 _Q2@<Q2>, double a4@<D3>, float a5@<S4>, double a6@<D5>, double a7@<D6>, double a8@<D7>, uint64_t a9@<X0>, uint64_t a10@<X1>, uint64_t a11@<X2>, uint64_t a12@<X3>, uint64_t a13@<X4>, uint64_t a14@<X5>, uint64_t a15@<X6>, uint64_t a16@<X7>, __int16 a17, __int16 a18, __int16 a19, float a20)
{
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v41;
  float v43;
  __int16 result;

  _H5 = a19;
  _H6 = a18;
  _H7 = a17;
  __asm
  {
    FCVT            S0, H0
    FCVT            S1, H1
    FCVT            S2, H2
    FCVT            S7, H7
    FCVT            S6, H6
    FCVT            S5, H5
  }
  v30 = (float)(_S0 * _S7) + (float)(_S0 * _S7);
  v31 = (float)(_S1 * _S6) + (float)(_S1 * _S6);
  v32 = (float)(_S2 * _S5) + (float)(_S2 * _S5);
  v33 = a5 * a20;
  v34 = a20 * 0.5;
  v35 = 1.0 - a20;
  v36 = 1.0 - a5;
  v37 = (float)((float)((float)(1.0 - a5) * _S7) + (float)(_S0 * (float)(1.0 - a20))) + v30;
  v38 = a20 + 1.0;
  v39 = a5 + 1.0;
  _S0 = (float)((float)((float)((float)(a5 + 1.0) * _S7) + (float)(_S0 * (float)(a20 + 1.0))) - v30) - (float)(a5 * a20);
  if ((float)(a20 * 0.5) >= _S7)
    _S0 = v37;
  v41 = (float)((float)(v36 * _S6) + (float)(_S1 * v35)) + v31;
  _S1 = (float)((float)((float)(v39 * _S6) + (float)(_S1 * v38)) - v31) - v33;
  if (v34 >= _S6)
    _S1 = v41;
  v43 = (float)((float)(v36 * _S5) + (float)(_S2 * v35)) + v32;
  _S2 = (float)((float)((float)(v39 * _S5) + (float)(_S2 * v38)) - v32) - v33;
  if (v34 >= _S5)
    _S2 = v43;
  _S3 = (float)(a5 + a20) - v33;
  __asm
  {
    FCVT            H0, S0
    FCVT            H1, S1
    FCVT            H2, S2
    FCVT            H3, S3
  }
  return result;
}

__int16 PDAsoftlightPDA@<H0>(__n128 _Q0@<Q0>, __n128 _Q1@<Q1>, __n128 _Q2@<Q2>, double a4@<D3>, float a5@<S4>, double a6@<D5>, double a7@<D6>, double a8@<D7>, uint64_t a9@<X0>, uint64_t a10@<X1>, uint64_t a11@<X2>, uint64_t a12@<X3>, uint64_t a13@<X4>, uint64_t a14@<X5>, uint64_t a15@<X6>, uint64_t a16@<X7>, __int16 a17, __int16 a18, __int16 a19, float a20)
{
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  __int16 result;

  _H16 = a19;
  _H17 = a18;
  _H18 = a17;
  __asm
  {
    FCVT            S5, H0
    FCVT            S6, H1
    FCVT            S7, H2
    FCVT            S0, H18
    FCVT            S1, H17
    FCVT            S2, H16
  }
  if (a5 == 0.0)
  {
    v32 = 0.0;
    v30 = 0.0;
    v31 = 0.0;
  }
  else
  {
    v30 = (float)((float)(_S5 * _S0) + (float)(_S5 * _S0))
        - (float)((float)((float)(_S5 * _S5) * (float)((float)(_S0 + _S0) - a20)) / a5);
    v31 = 0.0;
    if (v30 < 0.0)
      v30 = 0.0;
    v32 = (float)((float)(_S6 * _S1) + (float)(_S6 * _S1))
        - (float)((float)((float)(_S6 * _S6) * (float)((float)(_S1 + _S1) - a20)) / a5);
    if (v32 < 0.0)
      v32 = 0.0;
    if ((float)((float)((float)(_S7 * _S2) + (float)(_S7 * _S2))
               - (float)((float)((float)(_S7 * _S7) * (float)((float)(_S2 + _S2) - a20)) / a5)) >= 0.0)
      v31 = (float)((float)(_S7 * _S2) + (float)(_S7 * _S2))
          - (float)((float)((float)(_S7 * _S7) * (float)((float)(_S2 + _S2) - a20)) / a5);
  }
  v33 = v30 + (float)(_S5 * (float)(1.0 - a20));
  v34 = v32 + (float)(_S6 * (float)(1.0 - a20));
  v35 = v31 + (float)(_S7 * (float)(1.0 - a20));
  if (a20 == 1.0)
  {
    v33 = v30;
    v34 = v32;
    v35 = v31;
  }
  _S0 = v33 + (float)(_S0 * (float)(1.0 - a5));
  _S1 = v34 + (float)(_S1 * (float)(1.0 - a5));
  _S2 = v35 + (float)(_S2 * (float)(1.0 - a5));
  if (a5 == 1.0)
  {
    _S0 = v33;
    _S1 = v34;
    _S2 = v35;
  }
  _S3 = (float)(a5 + a20) - (float)(a5 * a20);
  __asm
  {
    FCVT            H0, S0
    FCVT            H1, S1
    FCVT            H2, S2
    FCVT            H3, S3
  }
  return result;
}

__int16 PDAdifferencePDA@<H0>(__n128 _Q0@<Q0>, double a2@<D1>, double a3@<D2>, double a4@<D3>, float a5@<S4>, double a6@<D5>, double a7@<D6>, double a8@<D7>, uint64_t a9@<X0>, uint64_t a10@<X1>, uint64_t a11@<X2>, uint64_t a12@<X3>, uint64_t a13@<X4>, uint64_t a14@<X5>, uint64_t a15@<X6>, uint64_t a16@<X7>, __int16 a17, int a18, float a19)
{
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  __int16 result;

  _H6 = a17;
  __asm
  {
    FCVT            S0, H0
    FCVT            S6, H6
  }
  v23 = _S0 + _S6;
  v24 = _S0 * a19;
  v25 = _S6 * a5;
  v26 = v23 - v24;
  v27 = v24 - v25;
  v28 = v26 - v25;
  if (v27 < 0.0)
    v27 = -v27;
  _S0 = v28 + v27;
  _S6 = (float)(a5 + a19) - (float)(a5 * a19);
  __asm
  {
    FCVT            H0, S0
    FCVT            H3, S6
  }
  return result;
}

__int16 PDAexclusionPDA@<H0>(__n128 _Q0@<Q0>, __n128 _Q1@<Q1>, __n128 _Q2@<Q2>, double a4@<D3>, float a5@<S4>, double a6@<D5>, double a7@<D6>, double a8@<D7>, uint64_t a9@<X0>, uint64_t a10@<X1>, uint64_t a11@<X2>, uint64_t a12@<X3>, uint64_t a13@<X4>, uint64_t a14@<X5>, uint64_t a15@<X6>, uint64_t a16@<X7>, __int16 a17, __int16 a18, __int16 a19, float a20)
{
  __int16 result;

  _H5 = a19;
  _H6 = a18;
  _H7 = a17;
  __asm
  {
    FCVT            S0, H0
    FCVT            S1, H1
    FCVT            S2, H2
    FCVT            S7, H7
    FCVT            S6, H6
    FCVT            S5, H5
  }
  _S0 = (float)(_S0 + _S7) + (float)((float)-(float)(_S0 * _S7) * 2.0);
  _S1 = (float)(_S1 + _S6) + (float)((float)-(float)(_S1 * _S6) * 2.0);
  _S2 = (float)(_S2 + _S5) + (float)((float)-(float)(_S2 * _S5) * 2.0);
  _S3 = (float)(a5 + a20) - (float)(a5 * a20);
  __asm
  {
    FCVT            H0, S0
    FCVT            H1, S1
    FCVT            H2, S2
    FCVT            H3, S3
  }
  return result;
}

__int16 PDAhuePDA@<H0>(__n128 _Q0@<Q0>, __n128 _Q1@<Q1>, __n128 _Q2@<Q2>, double a4@<D3>, float a5@<S4>, double a6@<D5>, double a7@<D6>, double a8@<D7>, uint64_t a9@<X0>, uint64_t a10@<X1>, uint64_t a11@<X2>, uint64_t a12@<X3>, uint64_t a13@<X4>, uint64_t a14@<X5>, uint64_t a15@<X6>, uint64_t a16@<X7>, __int16 a17, __int16 a18, __int16 a19, float a20)
{
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  __int16 result;
  float v56;
  float v57;
  float v58;
  uint64_t v59;

  _H5 = a19;
  _H6 = a18;
  _H7 = a17;
  v59 = *MEMORY[0x1E0C80C00];
  __asm
  {
    FCVT            S16, H0
    FCVT            S1, H1
    FCVT            S0, H2
    FCVT            S2, H7
    FCVT            S17, H6
    FCVT            S5, H5
  }
  v30 = _S16 * a20;
  v31 = _S16 - (float)(_S16 * a20);
  v32 = _S1 - (float)(_S1 * a20);
  v33 = _S0 - (float)(_S0 * a20);
  if (a20 == 1.0)
  {
    v31 = 0.0;
    v32 = 0.0;
    v33 = 0.0;
  }
  else
  {
    _S0 = _S0 * a20;
  }
  if (a20 == 1.0)
    v34 = _S1;
  else
    v34 = _S1 * a20;
  if (a20 == 1.0)
    v30 = _S16;
  v35 = (float)(v31 + _S2) - (float)(_S2 * a5);
  v36 = (float)(v32 + _S17) - (float)(_S17 * a5);
  if (a5 == 1.0)
    v37 = _S2;
  else
    v37 = _S2 * a5;
  if (a5 == 1.0)
  {
    v38 = _S5;
  }
  else
  {
    _S17 = _S17 * a5;
    v38 = _S5 * a5;
  }
  if (a5 == 1.0)
  {
    v35 = v31;
    v39 = v32;
  }
  else
  {
    v39 = v36;
  }
  if (a5 == 1.0)
    v40 = v33;
  else
    v40 = (float)(v33 + _S5) - (float)(_S5 * a5);
  v56 = v37;
  v57 = _S17;
  v58 = v38;
  v41 = v37 < _S17;
  v42 = v37 >= _S17;
  if (v38 >= *(&v56 + v42))
  {
    v43 = v37 >= _S17;
    if (v38 > *(&v56 + v41))
    {
      v42 = v37 < _S17;
      v41 = 2;
    }
  }
  else
  {
    v43 = 2;
  }
  v44 = *(&v56 + v41);
  v45 = *(&v56 + v43);
  if (v44 <= v45)
  {
    *(&v56 + v41) = 0.0;
    *(&v56 + v42) = 0.0;
  }
  else
  {
    if (v30 >= v34)
      v46 = v34;
    else
      v46 = v30;
    if (v30 >= v34)
      v47 = v30;
    else
      v47 = v34;
    if (_S0 > v47)
      v48 = _S0;
    else
      v48 = v47;
    if (_S0 >= v46)
      v47 = v48;
    else
      v46 = _S0;
    v49 = v47 - v46;
    *(&v56 + v41) = v49;
    *(&v56 + v42) = (float)(v49 / (float)(v44 - v45)) * (float)(*(&v56 + v42) - *(&v56 + v43));
  }
  *(&v56 + v43) = 0.0;
  v50 = (float)((float)((float)(v34 - v57) * 0.59) + (float)((float)(v30 - v56) * 0.3))
      + (float)((float)(_S0 - v58) * 0.11);
  _S3 = (float)(a5 + a20) - (float)(a5 * a20);
  _S1 = v35 + (float)(v56 + v50);
  _S2 = v39 + (float)(v57 + v50);
  _S4 = v40 + (float)(v58 + v50);
  __asm
  {
    FCVT            H0, S1
    FCVT            H1, S2
    FCVT            H2, S4
    FCVT            H3, S3
  }
  return result;
}

__int16 PDAsaturationPDA@<H0>(__n128 _Q0@<Q0>, __n128 _Q1@<Q1>, __n128 _Q2@<Q2>, double a4@<D3>, float a5@<S4>, double a6@<D5>, double a7@<D6>, double a8@<D7>, uint64_t a9@<X0>, uint64_t a10@<X1>, uint64_t a11@<X2>, uint64_t a12@<X3>, uint64_t a13@<X4>, uint64_t a14@<X5>, uint64_t a15@<X6>, uint64_t a16@<X7>, __int16 a17, __int16 a18, __int16 a19, float a20)
{
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  __int16 result;
  float v53;
  float v54;
  float v55;
  uint64_t v56;

  _H7 = a19;
  _H6 = a18;
  _H16 = a17;
  v56 = *MEMORY[0x1E0C80C00];
  __asm
  {
    FCVT            S5, H0
    FCVT            S1, H1
    FCVT            S0, H2
    FCVT            S2, H16
    FCVT            S6, H6
    FCVT            S7, H7
  }
  if (a20 == 1.0)
  {
    v30 = 0.0;
    v31 = 0.0;
    v32 = 0.0;
  }
  else
  {
    v30 = _S5 - (float)(_S5 * a20);
    v31 = _S1 - (float)(_S1 * a20);
    v32 = _S0 - (float)(_S0 * a20);
    _S0 = _S0 * a20;
    _S1 = _S1 * a20;
    _S5 = _S5 * a20;
  }
  v33 = _S2 * a5;
  v34 = _S6 * a5;
  if (a5 == 1.0)
  {
    v33 = _S2;
    v34 = _S6;
    v35 = _S7;
  }
  else
  {
    v35 = _S7 * a5;
  }
  if (a5 == 1.0)
    v36 = v30;
  else
    v36 = (float)(v30 + _S2) - (float)(_S2 * a5);
  if (a5 == 1.0)
    v37 = v31;
  else
    v37 = (float)(v31 + _S6) - (float)(_S6 * a5);
  if (a5 == 1.0)
    v38 = v32;
  else
    v38 = (float)(v32 + _S7) - (float)(_S7 * a5);
  v53 = _S5;
  v54 = _S1;
  v55 = _S0;
  v39 = _S5 < _S1;
  v40 = _S5 >= _S1;
  if (_S0 >= *(&v53 + v40))
  {
    v41 = _S5 >= _S1;
    if (_S0 > *(&v53 + v39))
    {
      v40 = _S5 < _S1;
      v39 = 2;
    }
  }
  else
  {
    v41 = 2;
  }
  v42 = *(&v53 + v39);
  v43 = *(&v53 + v41);
  if (v42 <= v43)
  {
    *(&v53 + v39) = 0.0;
    *(&v53 + v40) = 0.0;
  }
  else
  {
    if (v33 >= v34)
      v44 = v34;
    else
      v44 = v33;
    if (v33 < v34)
      v33 = v34;
    if (v35 > v33)
      v45 = v35;
    else
      v45 = v33;
    if (v35 >= v44)
    {
      v35 = v44;
      v33 = v45;
    }
    v46 = v33 - v35;
    *(&v53 + v39) = v46;
    *(&v53 + v40) = (float)(v46 / (float)(v42 - v43)) * (float)(*(&v53 + v40) - *(&v53 + v41));
  }
  *(&v53 + v41) = 0.0;
  v47 = (float)((float)((float)(_S1 - v54) * 0.59) + (float)((float)(_S5 - v53) * 0.3))
      + (float)((float)(_S0 - v55) * 0.11);
  _S3 = (float)(a5 + a20) - (float)(a5 * a20);
  _S1 = v36 + (float)(v53 + v47);
  _S2 = v37 + (float)(v54 + v47);
  _S4 = v38 + (float)(v55 + v47);
  __asm
  {
    FCVT            H0, S1
    FCVT            H1, S2
    FCVT            H2, S4
    FCVT            H3, S3
  }
  return result;
}

__int16 PDAluminosityPDA@<H0>(__n128 _Q0@<Q0>, __n128 _Q1@<Q1>, __n128 _Q2@<Q2>, double a4@<D3>, float a5@<S4>, double a6@<D5>, double a7@<D6>, double a8@<D7>, uint64_t a9@<X0>, uint64_t a10@<X1>, uint64_t a11@<X2>, uint64_t a12@<X3>, uint64_t a13@<X4>, uint64_t a14@<X5>, uint64_t a15@<X6>, uint64_t a16@<X7>, __int16 a17, __int16 a18, __int16 a19, float a20)
{
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  __int16 result;

  _H5 = a19;
  _H6 = a18;
  _H7 = a17;
  __asm
  {
    FCVT            S0, H0
    FCVT            S1, H1
    FCVT            S2, H2
    FCVT            S7, H7
    FCVT            S6, H6
    FCVT            S5, H5
  }
  v30 = 0.0;
  v31 = _S0 - (float)(_S0 * a20);
  v32 = _S1 - (float)(_S1 * a20);
  if (a20 == 1.0)
  {
    v31 = 0.0;
    v32 = 0.0;
  }
  else
  {
    v30 = _S2 - (float)(_S2 * a20);
    _S2 = _S2 * a20;
  }
  if (a20 != 1.0)
  {
    _S1 = _S1 * a20;
    _S0 = _S0 * a20;
  }
  v33 = (float)(v31 + _S7) - (float)(_S7 * a5);
  v34 = (float)(v32 + _S6) - (float)(_S6 * a5);
  v35 = (float)(v30 + _S5) - (float)(_S5 * a5);
  if (a5 == 1.0)
  {
    v33 = v31;
  }
  else
  {
    _S7 = _S7 * a5;
    _S6 = _S6 * a5;
    _S5 = _S5 * a5;
  }
  if (a5 == 1.0)
    v36 = v32;
  else
    v36 = v34;
  if (a5 != 1.0)
    v30 = v35;
  v37 = (float)((float)((float)(_S6 - _S1) * 0.59) + (float)((float)(_S7 - _S0) * 0.3))
      + (float)((float)(_S5 - _S2) * 0.11);
  _S3 = (float)(a5 + a20) - (float)(a5 * a20);
  _S0 = v33 + (float)(_S0 + v37);
  _S1 = v36 + (float)(_S1 + v37);
  _S2 = v30 + (float)(_S2 + v37);
  __asm
  {
    FCVT            H0, S0
    FCVT            H1, S1
    FCVT            H2, S2
    FCVT            H3, S3
  }
  return result;
}

void RGBAf16_mark_const_deep_mask_ARGB(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _DWORD *v30;
  BOOL v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v53;
  float v66;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  _DWORD *v115;
  unint64_t v116;
  _QWORD v117[4];
  _QWORD v118[4];
  uint64_t v119;

  v8 = *(unsigned int *)(a1 + 8);
  v113 = *(unsigned int *)(a1 + 4);
  if ((int)v113 < 1 || (int)v8 < 1)
    return;
  v11 = *(_QWORD *)(a1 + 136);
  if (!v11)
    return;
  v13 = *(_QWORD *)(a1 + 40);
  v119 = **(_QWORD **)(a1 + 88);
  if (use_vImage_font_smoothing(void)::predicate != -1)
    dispatch_once(&use_vImage_font_smoothing(void)::predicate, &__block_literal_global_13_19554);
  if (!use_vImage_font_smoothing(void)::status)
  {
    v26 = *(int *)(a1 + 124);
    if ((v26 & 1) != 0)
      _CGHandleAssert("RGBAf16_mark_const_deep_mask_ARGB", 9586, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "((mdn >> 1) << 1) == mdn", "%ld", a6, a7, a8, *(_DWORD *)(a1 + 124));
    if ((a2 - 1) > 1)
      _CGHandleAssert("RGBAf16_mark_const_deep_mask_ARGB", 9683, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "", "Unimplemented", a6, a7, a8, v110);
    v27 = (unint64_t)*(int *)(a1 + 28) >> 3;
    v28 = (uint64_t *)(v13 + 8 * (*(int *)(a1 + 12) + v27 * *(int *)(a1 + 16)));
    v29 = v26 >> 1;
    v111 = v27 - v113;
    v112 = v29 - v113;
    v30 = (_DWORD *)(v11 + 2 * (*(int *)(a1 + 104) + (int)v29 * (uint64_t)*(int *)(a1 + 108)));
    while (1)
    {
      v31 = (v30 & 3) != 0;
      v116 = ((unint64_t)v30 + 2 * v113) & 0xFFFFFFFFFFFFFFFCLL;
      v114 = v8;
      v115 = &v30[v113];
      v32 = v113;
      do
      {
        if (v31)
          goto LABEL_19;
        if (v32 == 1)
        {
          if ((_DWORD *)v116 == v115)
            _CGHandleAssert("RGBAf16_mark_const_deep_mask_ARGB", 9614, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "postamble == true", "mdp %p w %d", a6, a7, a8, (char)v30);
LABEL_19:
          v33 = *(unsigned __int16 *)v30;
          v34 = 1;
          goto LABEL_21;
        }
        v33 = *v30 & 0x7FFF7FFF;
        v34 = 2;
LABEL_21:
        if ((v33 & 0x7FFF7FFF) != 0)
        {
          v35 = HIWORD(v33);
          v36 = v34;
          do
          {
            v37 = v33 & 0x7FFF;
            if ((v33 & 0x7FFF) != 0)
            {
              v118[0] = v119;
              _H0 = HIWORD(v119);
              __asm { FCVT            S0, H0 }
              if (_S0 > 0.0 && _S0 < 1.0)
              {
                _H1 = WORD2(v119);
                _H2 = WORD1(v119);
                _H3 = v119;
                __asm { FCVT            S3, H3 }
                _S3 = _S3 / _S0;
                __asm { FCVT            H3, S3 }
                LOWORD(v118[0]) = LOWORD(_S3);
                __asm { FCVT            S2, H2 }
                _S2 = _S2 / _S0;
                __asm { FCVT            H2, S2 }
                WORD1(v118[0]) = LOWORD(_S2);
                __asm { FCVT            S1, H1 }
                _S0 = _S1 / _S0;
                __asm { FCVT            H0, S0 }
                WORD2(v118[0]) = LOWORD(_S0);
              }
              ungamma((__int16 *)v118);
              v53 = *v28;
              v117[0] = v53;
              _H0 = HIWORD(v53);
              __asm { FCVT            S0, H0 }
              if (_S0 > 0.0 && _S0 < 1.0)
              {
                _H1 = WORD2(v53);
                _H2 = WORD1(v53);
                _H3 = v53;
                __asm { FCVT            S3, H3 }
                _S3 = _S3 / _S0;
                __asm { FCVT            H3, S3 }
                LOWORD(v117[0]) = LOWORD(_S3);
                __asm { FCVT            S2, H2 }
                _S2 = _S2 / _S0;
                __asm { FCVT            H2, S2 }
                WORD1(v117[0]) = LOWORD(_S2);
                __asm { FCVT            S1, H1 }
                _S0 = _S1 / _S0;
                __asm { FCVT            H0, S0 }
                WORD2(v117[0]) = LOWORD(_S0);
              }
              ungamma((__int16 *)v117);
              v66 = (float)(((((v33 >> 2) & 0xF8) + 16) * ((v33 >> 2) & 0xF8)) >> 8) / 255.0;
              _H4 = v118[0];
              __asm { FCVT            S4, H4 }
              _H5 = v117[0];
              __asm { FCVT            S5, H5 }
              _S0 = _S5 + (float)((float)(_S4 - _S5) * (float)((float)(v37 >> 10) / 31.0));
              __asm { FCVT            H0, S0 }
              LOWORD(v117[0]) = LOWORD(_S0);
              LOWORD(_S0) = WORD1(v118[0]);
              __asm { FCVT            S0, H0 }
              LOWORD(_S4) = WORD1(v117[0]);
              __asm { FCVT            S4, H4 }
              _S0 = _S4 + (float)((float)(_S0 - _S4) * (float)((float)((v37 >> 5) & 0x1F) / 31.0));
              __asm { FCVT            H0, S0 }
              WORD1(v117[0]) = LOWORD(_S0);
              LOWORD(_S0) = WORD2(v118[0]);
              __asm { FCVT            S0, H0 }
              _H1 = WORD2(v117[0]);
              __asm { FCVT            S1, H1 }
              _S0 = _S1 + (float)((float)(_S0 - _S1) * (float)((float)(v33 & 0x1F) / 31.0));
              __asm { FCVT            H0, S0 }
              WORD2(v117[0]) = LOWORD(_S0);
              LOWORD(_S0) = HIWORD(v117[0]);
              __asm { FCVT            S0, H0 }
              _S0 = (float)(v66 - (float)(_S0 * v66)) + _S0;
              __asm { FCVT            H0, S0 }
              HIWORD(v117[0]) = LOWORD(_S0);
              gamma((__int16 *)v117);
              _H0 = HIWORD(v117[0]);
              __asm { FCVT            S0, H0 }
              _H2 = WORD1(v117[0]);
              _H3 = v117[0];
              _H1 = WORD2(v117[0]);
              if (_S0 > 0.0 && _S0 < 1.0)
              {
                __asm { FCVT            S3, H3 }
                _S3 = _S0 * _S3;
                __asm { FCVT            H3, S3 }
                LOWORD(v117[0]) = _H3;
                __asm { FCVT            S2, H2 }
                _S2 = _S0 * _S2;
                __asm { FCVT            H2, S2 }
                WORD1(v117[0]) = _H2;
                __asm { FCVT            S1, H1 }
                _S1 = _S0 * _S1;
                __asm { FCVT            H1, S1 }
                WORD2(v117[0]) = _H1;
              }
              __asm { FCVT            S3, H3 }
              _H4 = *(_WORD *)v28;
              __asm { FCVT            S4, H4 }
              _H5 = HIWORD(v118[0]);
              __asm { FCVT            S5, H5 }
              _S3 = _S4 + (float)((float)(_S3 - _S4) * _S5);
              __asm
              {
                FCVT            H3, S3
                FCVT            S2, H2
              }
              LOWORD(_S4) = *((_WORD *)v28 + 1);
              __asm { FCVT            S4, H4 }
              _S2 = _S4 + (float)((float)(_S2 - _S4) * _S5);
              __asm
              {
                FCVT            H2, S2
                FCVT            S1, H1
              }
              LOWORD(_S4) = *((_WORD *)v28 + 2);
              __asm { FCVT            S4, H4 }
              _S1 = _S4 + (float)((float)(_S1 - _S4) * _S5);
              __asm { FCVT            H1, S1 }
              LOWORD(_S4) = *((_WORD *)v28 + 3);
              __asm { FCVT            S4, H4 }
              _S0 = _S4 + (float)((float)(_S0 - _S4) * _S5);
              __asm { FCVT            H0, S0 }
              *((_WORD *)v28 + 3) = LOWORD(_S0);
              __asm
              {
                FCVT            S4, H3
                FCVT            S5, H0
              }
              if (_S4 > _S5)
                _S3 = _S0;
              *(_WORD *)v28 = LOWORD(_S3);
              __asm { FCVT            S3, H2 }
              if (_S3 > _S5)
                _S2 = _S0;
              *((_WORD *)v28 + 1) = LOWORD(_S2);
              __asm { FCVT            S2, H1 }
              if (_S2 <= _S5)
                _S0 = _S1;
              *((_WORD *)v28 + 2) = LOWORD(_S0);
            }
            ++v28;
            v33 = v35;
            _ZF = v36 == 1;
            v36 = 1;
          }
          while (!_ZF);
        }
        else
        {
          v28 += v34;
        }
        v31 = 0;
        v30 = (_DWORD *)((char *)v30 + 2 * v34);
        _VF = __OFSUB__(v32, (_DWORD)v34);
        v32 -= v34;
      }
      while (!((v32 < 0) ^ _VF | (v32 == 0)));
      v30 = (_DWORD *)((char *)v30 + 2 * v112);
      v28 += v111;
      LODWORD(v8) = v114 - 1;
      if (v114 <= 1)
        return;
    }
  }
  if ((a2 - 3) <= 0xFFFFFFFD)
    _CGHandleAssert("RGBAf16_mark_const_deep_mask_ARGB", 9557, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "mode == COPY || mode == SOVER", "mode = %d", a6, a7, a8, a2);
  v14 = *(int *)(a1 + 104);
  v15 = *(_DWORD *)(a1 + 108);
  v16 = *(int *)(a1 + 28);
  v118[0] = v13 + (int)v16 * (uint64_t)*(int *)(a1 + 16) + 8 * *(int *)(a1 + 12);
  v118[1] = v8;
  v118[2] = v113;
  v118[3] = v16;
  v17 = *(int *)(a1 + 124);
  v117[0] = v11 + (int)v17 * (uint64_t)v15 + 2 * v14;
  v117[1] = v8;
  v117[2] = v113;
  v117[3] = v17;
  v18 = vImageCGCompositeMarkConstDeepMaskARGB_ARGB16F();
  if (v18)
    CGPostError((uint64_t)"vImageCGCompositeMarkConstDeepMaskARGB_ARGB16F failed %ld", v19, v20, v21, v22, v23, v24, v25, v18);
}

void RGBAf16_mark_const_deep_mask_BGColorARGB(uint64_t a1, int a2, float16x4_t *a3, double a4, double a5, double a6, double a7, double a8, double a9, __n128 _Q6, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  BOOL v15;
  uint64_t v17;
  uint64_t v20;
  float16x4_t *v21;
  uint64_t v22;
  unint64_t v23;
  __int16 *v24;
  uint64_t v25;
  unsigned __int16 *v26;
  BOOL v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int32x2_t v37;
  float32x4_t v40;
  float v41;
  float v45;
  float32x4_t v86;
  float v88;
  BOOL v91;
  float v115;
  BOOL v130;
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  unsigned __int16 *v138;
  unint64_t v139;
  uint64_t v140;
  __n128 v141;
  float16x4_t v142;
  float16x4_t v143;
  float16x4_t v144;

  v136 = *(unsigned int *)(a1 + 4);
  v137 = *(_DWORD *)(a1 + 8);
  v15 = (int)v136 < 1 || *(_DWORD *)(a1 + 8) < 1;
  if (v15)
    return;
  v17 = *(_QWORD *)(a1 + 136);
  if (!v17)
    return;
  v20 = *(_QWORD *)(a1 + 40);
  v21 = *(float16x4_t **)(a1 + 88);
  if (use_vImage_font_smoothing(void)::predicate != -1)
    dispatch_once(&use_vImage_font_smoothing(void)::predicate, &__block_literal_global_13_19554);
  v22 = *(int *)(a1 + 124);
  if ((v22 & 1) != 0)
    _CGHandleAssert("RGBAf16_mark_const_deep_mask_BGColorARGB", 9757, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "((mdn >> 1) << 1) == mdn", "mdn = %ld", a13, a14, a15, *(_DWORD *)(a1 + 124));
  if ((a2 - 1) > 1)
    _CGHandleAssert("RGBAf16_mark_const_deep_mask_BGColorARGB", 9881, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "", "Unimplemented", a13, a14, a15, v133);
  v23 = (unint64_t)*(int *)(a1 + 28) >> 3;
  v24 = (__int16 *)(v20 + 8 * (*(int *)(a1 + 12) + v23 * *(int *)(a1 + 16)));
  v25 = v22 >> 1;
  v134 = v23 - v136;
  v135 = v25 - v136;
  v26 = (unsigned __int16 *)(v17 + 2 * (*(int *)(a1 + 104) + (int)v25 * (uint64_t)*(int *)(a1 + 108)));
  __asm { FMOV            V13.2S, #31.0 }
  while (2)
  {
    v31 = (v26 & 3) != 0;
    v138 = &v26[2 * v136];
    v139 = (unint64_t)&v26[v136] & 0xFFFFFFFFFFFFFFFCLL;
    v32 = v136;
    do
    {
      if (v31)
        goto LABEL_15;
      if (v32 == 1)
      {
        if ((unsigned __int16 *)v139 == v138)
          _CGHandleAssert("RGBAf16_mark_const_deep_mask_BGColorARGB", 9785, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "postamble == true", "", a13, a14, a15, v133);
LABEL_15:
        v33 = *v26;
        v34 = 1;
        goto LABEL_17;
      }
      v33 = *(_DWORD *)v26;
      v34 = 2;
LABEL_17:
      v140 = v34;
      if (v33)
      {
        v35 = (unsigned __int16)v33;
        v36 = HIWORD(v33);
        do
        {
          if (v35)
          {
            v144 = *v21;
            v37.i32[0] = *(_QWORD *)v24;
            v37.i32[1] = v37.u16[1];
            LODWORD(_S3) = HIWORD(*(_QWORD *)&v144);
            _H0 = v144.i16[0];
            v40 = vcvtq_f32_f16((float16x4_t)vmovn_s32(vmovn_hight_s64(v37, (int64x2_t)vshlq_u64((uint64x2_t)vdupq_n_s64(*(_QWORD *)v24), (uint64x2_t)xmmword_185004DA0))));
            v41 = 1.0 - v40.f32[3];
            if ((float)(1.0 - v40.f32[3]) > 1.0)
              v41 = 1.0;
            if (v41 < 0.0)
              v41 = 0.0;
            _Q6.n128_u64[0] = (unint64_t)vcvt_f16_f32(vmlaq_n_f32(v40, vcvtq_f32_f16(*a3), v41));
            v143 = (float16x4_t)_Q6.n128_u64[0];
            _H1 = v144.i16[2];
            _H2 = v144.i16[1];
            if (a2 == 2)
            {
              __asm { FCVT            S3, H3 }
              v45 = 1.0 - _S3;
              if ((float)(1.0 - _S3) > 1.0)
                v45 = 1.0;
              if (v45 < 0.0)
                v45 = 0.0;
              __asm
              {
                FCVT            S5, H6
                FCVT            S0, H0
              }
              _S0 = _S0 + (float)(_S5 * v45);
              __asm { FCVT            H0, S0 }
              v144.i16[0] = _H0;
              LOWORD(_S5) = _Q6.n128_u16[1];
              __asm
              {
                FCVT            S5, H5
                FCVT            S2, H2
              }
              _S2 = _S2 + (float)(_S5 * v45);
              __asm { FCVT            H2, S2 }
              v144.i16[1] = _H2;
              LOWORD(_S5) = _Q6.n128_u16[2];
              __asm
              {
                FCVT            S5, H5
                FCVT            S1, H1
              }
              _S1 = _S1 + (float)(_S5 * v45);
              __asm { FCVT            H1, S1 }
              v144.i16[2] = _H1;
              LOWORD(_S5) = _Q6.n128_u16[3];
              __asm { FCVT            S5, H5 }
              _S3 = _S3 + (float)(_S5 * v45);
              __asm { FCVT            H3, S3 }
              v144.i16[3] = LOWORD(_S3);
            }
            v141 = _Q6;
            __asm { FCVT            S3, H3 }
            if (_S3 > 0.0 && _S3 < 1.0)
            {
              __asm { FCVT            S0, H0 }
              _S0 = _S0 / _S3;
              __asm { FCVT            H0, S0 }
              v144.i16[0] = LOWORD(_S0);
              __asm { FCVT            S0, H2 }
              _S0 = _S0 / _S3;
              __asm { FCVT            H0, S0 }
              v144.i16[1] = LOWORD(_S0);
              __asm { FCVT            S0, H1 }
              _S0 = _S0 / _S3;
              __asm { FCVT            H0, S0 }
              v144.i16[2] = LOWORD(_S0);
            }
            ungamma((__int16 *)&v144);
            _H1 = v141.n128_u16[0];
            _H0 = v141.n128_u16[3];
            __asm { FCVT            S10, H0 }
            if (_S10 > 0.0 && _S10 < 1.0)
            {
              __asm { FCVT            S0, H1 }
              _S0 = _S0 / _S10;
              __asm { FCVT            H0, S0 }
              v143.i16[0] = LOWORD(_S0);
              _H12 = v141.n128_u16[1];
              __asm { FCVT            S0, H12 }
              _S0 = _S0 / _S10;
              __asm { FCVT            H0, S0 }
              v143.i16[1] = LOWORD(_S0);
              _H14 = v141.n128_u16[2];
              __asm { FCVT            S0, H14 }
              _S0 = _S0 / _S10;
              __asm { FCVT            H0, S0 }
              v143.i16[2] = LOWORD(_S0);
            }
            else
            {
              _H14 = v141.n128_u16[2];
              _H12 = v141.n128_u16[1];
            }
            ungamma((__int16 *)&v143);
            *(float32x2_t *)_Q0.f32 = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(v35), (int8x8_t)0xFFFF0000FFFFLL), (uint32x2_t)0xFFFFFFFBFFFFFFF6), (int8x8_t)0x1F0000001FLL)), _D13);
            _Q0.i32[0] = vcvt_f16_f32(_Q0).u32[0];
            _S2 = 31.0;
            _S1 = (float)(v35 & 0x1F) / 31.0;
            __asm { FCVT            H1, S1 }
            LOWORD(_S2) = _Q0.i16[1];
            __asm { FCVT            S3, H2 }
            _S4 = _S3 * _S3;
            __asm
            {
              FCVT            H4, S4
              FCVT            S5, H1
            }
            if (_S3 <= _S5)
              _S2 = _S1;
            __asm
            {
              FCVT            S3, H2
              FCVT            S5, H0
            }
            if (_S3 >= _S5)
              _S15 = _S2;
            else
              _S15 = _Q0.f32[0];
            _Q0.i16[2] = LOWORD(_S1);
            _Q0.i16[3] = _H4;
            v86 = vcvtq_f32_f16(*(float16x4_t *)_Q0.f32);
            __asm { FMOV            V2.4S, #1.0 }
            v142 = vcvt_f16_f32(vmlaq_f32(vmulq_f32(vsubq_f32(_Q2, v86), vcvtq_f32_f16(v143)), vcvtq_f32_f16(v144), v86));
            LODWORD(v88) = gamma((__int16 *)&v142);
            LOWORD(_S1) = v142.i16[3];
            __asm { FCVT            S2, H1 }
            v91 = _S2 >= 1.0 || _S2 <= 0.0;
            _KR08_4 = v142.i32[0];
            _H5 = v142.i16[2];
            LOWORD(v88) = 15360;
            if (v91)
              _S1 = v88;
            __asm
            {
              FCVT            S1, H1
              FCVT            S5, H5
            }
            _S5 = _S5 * _S1;
            __asm
            {
              FCVT            H5, S5
              FCVT            S4, H4
            }
            _S4 = _S4 * _S1;
            __asm
            {
              FCVT            H4, S4
              FCVT            S3, H3
            }
            _S1 = _S3 * _S1;
            __asm
            {
              FCVT            H1, S1
              FCVT            S3, H15
            }
            _S3 = 1.0 - _S3;
            __asm { FCVT            H3, S3 }
            _Q6 = v141;
            __asm
            {
              FCVT            S6, H6
              FCVT            S3, H3
              FCVT            S1, H1
            }
            _S1 = _S1 - (float)(_Q6.n128_f32[0] * _S3);
            __asm { FCVT            H1, S1 }
            v142.i16[0] = _H1;
            __asm
            {
              FCVT            S6, H12
              FCVT            S4, H4
            }
            _S4 = _S4 - (float)(_Q6.n128_f32[0] * _S3);
            __asm { FCVT            H4, S4 }
            v142.i16[1] = _H4;
            __asm
            {
              FCVT            S6, H14
              FCVT            S5, H5
            }
            _S5 = _S5 - (float)(_Q6.n128_f32[0] * _S3);
            __asm { FCVT            H5, S5 }
            v142.i16[2] = _H5;
            _S2 = _S2 - (float)(_S10 * _S3);
            __asm { FCVT            H2, S2 }
            v142.i16[3] = LOWORD(_S2);
            __asm { FCVT            S2, H2 }
            v115 = 1.0 - _S2;
            if ((float)(1.0 - _S2) > 1.0)
              v115 = 1.0;
            if (v115 < 0.0)
              v115 = 0.0;
            __asm { FCVT            S1, H1 }
            _H6 = *v24;
            __asm { FCVT            S6, H6 }
            _S1 = _S1 + (float)(_S6 * v115);
            __asm { FCVT            H1, S1 }
            *v24 = LOWORD(_S1);
            __asm { FCVT            S1, H4 }
            _H4 = v24[1];
            __asm { FCVT            S4, H4 }
            _S1 = _S1 + (float)(_S4 * v115);
            __asm { FCVT            H1, S1 }
            v24[1] = LOWORD(_S1);
            __asm { FCVT            S1, H5 }
            LOWORD(_S4) = v24[2];
            __asm { FCVT            S4, H4 }
            _S1 = _S1 + (float)(_S4 * v115);
            __asm { FCVT            H1, S1 }
            v24[2] = LOWORD(_S1);
            LOWORD(_S1) = v24[3];
            __asm { FCVT            S1, H1 }
            _S1 = _S2 + (float)(_S1 * v115);
            __asm
            {
              FCVT            H1, S1
              FCVT            S2, H1
            }
            v130 = _S2 <= 1.0;
            if (_S2 < 1.0)
              _S2 = _S1;
            else
              _S2 = v88;
            if (v130)
              v88 = _S1;
            __asm { FCVT            S1, H2 }
            if (_S1 < 0.0)
              v88 = 0.0;
            v24[3] = LOWORD(v88);
          }
          v24 += 4;
          v35 = v36;
          _ZF = v34 == 1;
          v34 = 1;
        }
        while (!_ZF);
      }
      else
      {
        v24 += 4 * v34;
      }
      v31 = 0;
      v26 += v140;
      _VF = __OFSUB__(v32, (_DWORD)v140);
      v32 -= v140;
    }
    while (!((v32 < 0) ^ _VF | (v32 == 0)));
    v26 += v135;
    v24 += 4 * v134;
    v15 = v137-- <= 1;
    if (!v15)
      continue;
    break;
  }
}

void RGBAf16_mark_const_deep_mask_XRGB(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _DWORD *v29;
  BOOL v30;
  unint64_t v31;
  _DWORD *v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v54;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  _QWORD v107[4];
  _QWORD v108[4];
  uint64_t v109;

  v8 = *(unsigned int *)(a1 + 8);
  v105 = *(unsigned int *)(a1 + 4);
  if ((int)v105 < 1 || (int)v8 < 1)
    return;
  v11 = *(_QWORD *)(a1 + 136);
  if (!v11)
    return;
  v13 = *(_QWORD *)(a1 + 40);
  v109 = **(_QWORD **)(a1 + 88);
  if (use_vImage_font_smoothing(void)::predicate != -1)
    dispatch_once(&use_vImage_font_smoothing(void)::predicate, &__block_literal_global_13_19554);
  if (!use_vImage_font_smoothing(void)::status)
  {
    v25 = *(int *)(a1 + 124);
    if ((v25 & 1) != 0)
      _CGHandleAssert("RGBAf16_mark_const_deep_mask_XRGB", 9945, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "((mdn >> 1) << 1) == mdn", "mdn = %ld", a6, a7, a8, *(_DWORD *)(a1 + 124));
    if ((a2 - 1) > 1)
      _CGHandleAssert("RGBAf16_mark_const_deep_mask_XRGB", 10030, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "", "Unimplemented", a6, a7, a8, v102);
    v26 = (unint64_t)*(int *)(a1 + 28) >> 3;
    v27 = (uint64_t *)(v13 + 8 * (*(int *)(a1 + 12) + v26 * *(int *)(a1 + 16)));
    v28 = v25 >> 1;
    v103 = v26 - v105;
    v104 = v28 - v105;
    v29 = (_DWORD *)(v11 + 2 * (*(int *)(a1 + 104) + (int)v28 * (uint64_t)*(int *)(a1 + 108)));
    while (1)
    {
      v106 = v8;
      v30 = (v29 & 3) != 0;
      v31 = ((unint64_t)v29 + 2 * v105) & 0xFFFFFFFFFFFFFFFCLL;
      v32 = &v29[v105];
      v33 = v105;
      do
      {
        if (v30)
          goto LABEL_19;
        if (v33 == 1)
        {
          if ((_DWORD *)v31 == v32)
            _CGHandleAssert("RGBAf16_mark_const_deep_mask_XRGB", 9973, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "postamble == true", "", a6, a7, a8, v102);
LABEL_19:
          v34 = *(unsigned __int16 *)v29;
          v35 = 1;
          goto LABEL_21;
        }
        v34 = *v29 & 0x7FFF7FFF;
        v35 = 2;
LABEL_21:
        if ((v34 & 0x7FFF7FFF) != 0)
        {
          v36 = HIWORD(v34);
          v37 = v35;
          do
          {
            v38 = v34 & 0x7FFF;
            if ((v34 & 0x7FFF) != 0)
            {
              v108[0] = v109;
              _H0 = HIWORD(v109);
              __asm { FCVT            S0, H0 }
              if (_S0 > 0.0 && _S0 < 1.0)
              {
                _H1 = WORD2(v109);
                _H2 = WORD1(v109);
                _H3 = v109;
                __asm { FCVT            S3, H3 }
                _S3 = _S3 / _S0;
                __asm { FCVT            H3, S3 }
                LOWORD(v108[0]) = LOWORD(_S3);
                __asm { FCVT            S2, H2 }
                _S2 = _S2 / _S0;
                __asm { FCVT            H2, S2 }
                WORD1(v108[0]) = LOWORD(_S2);
                __asm { FCVT            S1, H1 }
                _S0 = _S1 / _S0;
                __asm { FCVT            H0, S0 }
                WORD2(v108[0]) = LOWORD(_S0);
              }
              ungamma((__int16 *)v108);
              v54 = *v27;
              v107[0] = v54;
              _H0 = HIWORD(v54);
              __asm { FCVT            S0, H0 }
              if (_S0 > 0.0 && _S0 < 1.0)
              {
                _H1 = WORD2(v54);
                _H2 = WORD1(v54);
                _H3 = v54;
                __asm { FCVT            S3, H3 }
                _S3 = _S3 / _S0;
                __asm { FCVT            H3, S3 }
                LOWORD(v107[0]) = LOWORD(_S3);
                __asm { FCVT            S2, H2 }
                _S2 = _S2 / _S0;
                __asm { FCVT            H2, S2 }
                WORD1(v107[0]) = LOWORD(_S2);
                __asm { FCVT            S1, H1 }
                _S0 = _S1 / _S0;
                __asm { FCVT            H0, S0 }
                WORD2(v107[0]) = LOWORD(_S0);
              }
              ungamma((__int16 *)v107);
              _H3 = v108[0];
              __asm { FCVT            S3, H3 }
              _H4 = v107[0];
              __asm { FCVT            S4, H4 }
              _S0 = _S4 + (float)((float)(_S3 - _S4) * (float)((float)(v38 >> 10) / 31.0));
              __asm { FCVT            H0, S0 }
              LOWORD(v107[0]) = LOWORD(_S0);
              LOWORD(_S0) = WORD1(v108[0]);
              __asm { FCVT            S0, H0 }
              LOWORD(_S3) = WORD1(v107[0]);
              __asm { FCVT            S3, H3 }
              _S0 = _S3 + (float)((float)(_S0 - _S3) * (float)((float)((v38 >> 5) & 0x1F) / 31.0));
              __asm { FCVT            H0, S0 }
              WORD1(v107[0]) = LOWORD(_S0);
              LOWORD(_S0) = WORD2(v108[0]);
              __asm { FCVT            S0, H0 }
              _H1 = WORD2(v107[0]);
              __asm { FCVT            S1, H1 }
              _S0 = _S1 + (float)((float)(_S0 - _S1) * (float)((float)(v38 & 0x1F) / 31.0));
              __asm { FCVT            H0, S0 }
              WORD2(v107[0]) = LOWORD(_S0);
              gamma((__int16 *)v107);
              _H0 = HIWORD(v107[0]);
              __asm { FCVT            S3, H0 }
              _H1 = WORD1(v107[0]);
              _H2 = v107[0];
              _H0 = WORD2(v107[0]);
              if (_S3 > 0.0 && _S3 < 1.0)
              {
                __asm { FCVT            S2, H2 }
                _S2 = _S3 * _S2;
                __asm { FCVT            H2, S2 }
                LOWORD(v107[0]) = _H2;
                __asm { FCVT            S1, H1 }
                _S1 = _S3 * _S1;
                __asm { FCVT            H1, S1 }
                WORD1(v107[0]) = _H1;
                __asm { FCVT            S0, H0 }
                _S0 = _S3 * _S0;
                __asm { FCVT            H0, S0 }
                WORD2(v107[0]) = _H0;
              }
              __asm { FCVT            S2, H2 }
              _H3 = *(_WORD *)v27;
              __asm { FCVT            S3, H3 }
              _H4 = HIWORD(v108[0]);
              __asm { FCVT            S4, H4 }
              _S2 = _S3 + (float)((float)(_S2 - _S3) * _S4);
              __asm { FCVT            H2, S2 }
              *(_WORD *)v27 = LOWORD(_S2);
              __asm { FCVT            S1, H1 }
              LOWORD(_S2) = *((_WORD *)v27 + 1);
              __asm { FCVT            S2, H2 }
              _S1 = _S2 + (float)((float)(_S1 - _S2) * _S4);
              __asm { FCVT            H1, S1 }
              *((_WORD *)v27 + 1) = LOWORD(_S1);
              __asm { FCVT            S0, H0 }
              LOWORD(_S1) = *((_WORD *)v27 + 2);
              __asm { FCVT            S1, H1 }
              _S0 = _S1 + (float)((float)(_S0 - _S1) * _S4);
              __asm { FCVT            H0, S0 }
              *((_WORD *)v27 + 2) = LOWORD(_S0);
            }
            ++v27;
            LOWORD(v34) = v36;
            _ZF = v37 == 1;
            v37 = 1;
          }
          while (!_ZF);
        }
        else
        {
          v27 += v35;
        }
        v30 = 0;
        v29 = (_DWORD *)((char *)v29 + 2 * v35);
        _VF = __OFSUB__(v33, (_DWORD)v35);
        v33 -= v35;
      }
      while (!((v33 < 0) ^ _VF | (v33 == 0)));
      v29 = (_DWORD *)((char *)v29 + 2 * v104);
      v27 += v103;
      LODWORD(v8) = v106 - 1;
      if (v106 <= 1)
        return;
    }
  }
  if ((a2 - 3) <= 0xFFFFFFFD)
    _CGHandleAssert("RGBAf16_mark_const_deep_mask_XRGB", 9916, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "mode == COPY || mode == SOVER", "mode = %d", a6, a7, a8, a2);
  v14 = *(int *)(a1 + 104);
  v15 = *(_DWORD *)(a1 + 108);
  v16 = *(int *)(a1 + 28);
  v108[0] = v13 + (int)v16 * (uint64_t)*(int *)(a1 + 16) + 8 * *(int *)(a1 + 12);
  v108[1] = v8;
  v108[2] = v105;
  v108[3] = v16;
  v17 = *(int *)(a1 + 124);
  v107[0] = v11 + (int)v17 * (uint64_t)v15 + 2 * v14;
  v107[1] = v8;
  v107[2] = v105;
  v107[3] = v17;
  if (vImageCGCompositeMarkConstDeepMaskXRGB_ARGB16F())
    CGPostError((uint64_t)"vImageCGCompositeMarkConstDeepMaskXRGB_ARGB16F failed", v18, v19, v20, v21, v22, v23, v24, v102);
}

uint64_t RGBAf16_mark_deep_pixel(uint64_t result, int a2, double a3, double a4, double a5, double a6, double a7, double _D5, float32x4_t a9, float32x4_t _Q7, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unint64_t v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  float16x4_t *v24;
  uint64_t v25;
  unsigned __int16 *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v51;
  unsigned int v52;
  unsigned int v53;
  float32x4_t v56;
  float16x4_t v59;
  float32x4_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  float16x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  float32x4_t v92;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char v104;

  v16 = *(unsigned int *)(result + 4);
  v17 = *(_DWORD *)(result + 8);
  if ((int)v16 < 1 || v17 < 1)
    return result;
  v19 = *(int *)(result + 124);
  if ((v19 & 1) != 0)
    _CGHandleAssert("RGBAf16_mark_deep_pixel", 10062, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "((mdn >> 1) << 1) == mdn", "mdn = %lu", a14, a15, a16, v19);
  v20 = *(_QWORD *)(result + 136);
  if (!v20)
    return result;
  v21 = *(_QWORD *)(result + 88);
  v22 = *(_QWORD *)(result + 96);
  v23 = (unint64_t)*(int *)(result + 28) >> 3;
  v24 = (float16x4_t *)(*(_QWORD *)(result + 40) + 8 * (*(int *)(result + 12) + v23 * *(int *)(result + 16)));
  v25 = v19 >> 1;
  v26 = (unsigned __int16 *)(v20
                           + 2
                           * (*(int *)(result + 104) + (*(int *)(result + 124) >> 1) * (uint64_t)*(int *)(result + 108)));
  v28 = *(int *)(result + 56);
  v27 = *(int *)(result + 60);
  v29 = (unint64_t)*(int *)(result + 76) >> 3;
  if (*(unsigned __int8 *)(result + 1) << 8 == 256)
  {
    v21 += 8 * (v28 + v29 * v27);
    if (v29 == v23)
    {
      if ((uint64_t)((uint64_t)v24 - v21) >= 1)
      {
        if (v16 >= ((unint64_t)v24 - v21) >> 3)
        {
          v24 += (v16 - 1);
          v21 += 8 * (v16 - 1);
          v32 = -1;
          v29 = (unint64_t)*(int *)(result + 28) >> 3;
          v26 += (v16 - 1);
          goto LABEL_19;
        }
        v30 = (v17 - 1);
        v31 = v21 + 8 * v23 * v30;
        if ((unint64_t)v24 <= v31 + 8 * (v16 - 1))
        {
          v24 += v23 * v30;
          v26 += v25 * v30;
          v29 = -(uint64_t)v23;
          v25 = -v25;
          v32 = 1;
          v21 = v31;
          v23 = -(uint64_t)v23;
          goto LABEL_19;
        }
      }
      v32 = 1;
      v29 = (unint64_t)*(int *)(result + 28) >> 3;
    }
    else
    {
      v32 = 1;
    }
LABEL_19:
    v33 = 0;
    v44 = v32 * (int)v16;
    v35 = v22 != 0;
    v36 = v25 - v44;
    v37 = v23 - v44;
    v43 = -1;
    v34 = v29;
    goto LABEL_20;
  }
  v34 = *(unsigned int *)(result + 64);
  v33 = *(unsigned int *)(result + 68);
  v35 = v22 != 0;
  v36 = v25 - v16;
  v37 = v23 - v16;
  if (!v21)
  {
    v43 = 0;
    v32 = 1;
    v44 = *(unsigned int *)(result + 4);
LABEL_20:
    v40 = 0;
    v42 = 0;
    v29 -= v44;
    v38 = 1;
    goto LABEL_21;
  }
  v38 = 0;
  v39 = (int)v28 % (int)v34;
  v40 = v21 + 8 * v29 * (int)v33;
  v41 = v21 + 8 * v29 * ((int)v27 % (int)v33);
  v42 = v41 + 8 * v39;
  v43 = v41 + 8 * (int)v34;
  v32 = 1;
  v21 = v42;
LABEL_21:
  if (a2 == 1)
  {
    if (!*(_QWORD *)(result + 48))
      LOBYTE(v35) = 1;
    result = v32;
    v72 = -(uint64_t)(int)v34;
    v73 = -(uint64_t)(v29 * (int)v33);
    v74 = 2 * result;
    v75 = v16 + 1;
    v76 = 8 * result;
    if (v35)
    {
      do
      {
        v77 = v75;
        do
        {
          v78 = *v26;
          v79 = v78 & 0x7FFF;
          if ((v78 & 0x7FFF) != 0)
          {
            if (v79 == 0x7FFF)
            {
              v80 = *(float16x4_t *)v21;
            }
            else
            {
              v81.f32[0] = (float)(v79 >> 10);
              v81.f32[1] = (float)((v78 >> 5) & 0x1F);
              v81.f32[2] = (float)(v78 & 0x1F);
              v81.f32[3] = (float)(((((v78 >> 2) & 0xF8) + 16) * ((v78 >> 2) & 0xF8)) >> 8);
              v82 = vdivq_f32(v81, (float32x4_t)xmmword_185005130);
              v80 = vcvt_f16_f32(vmlaq_f32(vmulq_n_f32(vcvtq_f32_f16(*v24), 1.0 - v82.f32[3]), v82, vcvtq_f32_f16(*(float16x4_t *)v21)));
            }
            *v24 = v80;
          }
          v83 = v21 + 8 * result;
          if (v83 >= v43)
            v84 = v72;
          else
            v84 = 0;
          v21 = v83 + 8 * v84;
          v26 = (unsigned __int16 *)((char *)v26 + v74);
          --v77;
          v24 = (float16x4_t *)((char *)v24 + v76);
        }
        while (v77 > 1);
        v26 += v36;
        v24 += v37;
        v85 = v42 + 8 * v29;
        if (v85 >= v40)
          v86 = v73;
        else
          v86 = 0;
        v87 = v85 + 8 * v86;
        v88 = v43 + 8 * v86 + 8 * v29;
        v21 += 8 * v29;
        if (!v38)
        {
          v43 = v88;
          v42 = v87;
          v21 = v87;
        }
        _VF = __OFSUB__(v17--, 1);
      }
      while (!((v17 < 0) ^ _VF | (v17 == 0)));
    }
    else
    {
      do
      {
        v89 = v75;
        do
        {
          v90 = *v26;
          v91 = v90 & 0x7FFF;
          if ((v90 & 0x7FFF) != 0)
          {
            if (v91 == 0x7FFF)
            {
              v24->i32[0] = *(_DWORD *)v21;
              v24->i16[2] = *(_WORD *)(v21 + 4);
              v24->i16[3] = 15360;
            }
            else
            {
              v92.f32[0] = (float)(v91 >> 10);
              _Q7.i32[0] = *(_DWORD *)v21;
              _Q7 = vcvtq_f32_f16(*(float16x4_t *)_Q7.f32);
              _H16 = *(_WORD *)(v21 + 4);
              v92.f32[1] = (float)((v90 >> 5) & 0x1F);
              v92.f32[2] = (float)(v90 & 0x1F);
              __asm { FCVT            S4, H16 }
              v92.f32[3] = (float)(((((v90 >> 2) & 0xF8) + 16) * ((v90 >> 2) & 0xF8)) >> 8);
              v95 = vdivq_f32(v92, (float32x4_t)xmmword_185005130);
              _Q7.i32[2] = _S4;
              v96 = vmulq_f32(_Q7, v95);
              _Q7.i32[3] = 1.0;
              v97 = vsubq_f32(_Q7, v95);
              v96.i32[3] = v97.i32[3];
              *v24 = vcvt_f16_f32(vmlaq_laneq_f32(v96, vcvtq_f32_f16(*v24), v97, 3));
            }
          }
          v98 = v21 + 8 * result;
          if (v98 >= v43)
            v99 = v72;
          else
            v99 = 0;
          v21 = v98 + 8 * v99;
          v26 = (unsigned __int16 *)((char *)v26 + v74);
          --v89;
          v24 = (float16x4_t *)((char *)v24 + v76);
        }
        while (v89 > 1);
        v26 += v36;
        v24 += v37;
        v100 = v42 + 8 * v29;
        if (v100 >= v40)
          v101 = v73;
        else
          v101 = 0;
        v102 = v100 + 8 * v101;
        v103 = v43 + 8 * v101 + 8 * v29;
        v21 += 8 * v29;
        if (!v38)
        {
          v43 = v103;
          v42 = v102;
          v21 = v102;
        }
        _VF = __OFSUB__(v17--, 1);
      }
      while (!((v17 < 0) ^ _VF | (v17 == 0)));
    }
    return result;
  }
  if (a2 != 2)
    _CGHandleAssert("RGBAf16_mark_deep_pixel", 10310, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_rgba_float16.cc", "", "Unimplemented", v33, v34, v35, v104);
  result = v32;
  v45 = v16 + 1;
  __asm { FMOV            V3.2S, #31.0 }
  while (2)
  {
    v51 = v45;
    do
    {
      v52 = *v26;
      v53 = v52 & 0x7FFF;
      if ((v52 & 0x7FFF) == 0)
        goto LABEL_34;
      if (v53 != 0x7FFF)
      {
        _H5 = *(_WORD *)(v21 + 6);
        __asm { FCVT            S5, H5 }
        _S4 = (float)((float)(((((v52 >> 2) & 0xF8) + 16) * ((v52 >> 2) & 0xF8)) >> 8) / 255.0) * _S5;
        __asm
        {
          FCVT            H4, S4
          FCVT            S5, H4
        }
        if (_S5 <= 0.0)
          goto LABEL_34;
        a9.i32[0] = v52 >> 5;
        a9.i32[1] = *v26;
        _Q7.i32[0] = *(_DWORD *)(v21 + 2);
        _Q7.i64[0] = vcvtq_f32_f16(*(float16x4_t *)_Q7.f32).u64[0];
        *(float32x2_t *)a9.f32 = vmul_f32(vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8(*(int8x8_t *)a9.f32, (int8x8_t)0x1F0000001FLL)), _D3), *(float32x2_t *)_Q7.f32);
        _Q7.i16[0] = *(_WORD *)v21;
        __asm { FCVT            S7, H7 }
        *(float *)&_D5 = (float)((float)(v53 >> 10) / 31.0) * _Q7.f32[0];
        __asm { FCVT            H5, S5 }
        _D5 = COERCE_DOUBLE(vext_s8(vext_s8(*(int8x8_t *)&_D5, *(int8x8_t *)&_D5, 2uLL), (int8x8_t)vcvt_f16_f32(a9), 6uLL));
        HIWORD(_D5) = _H4;
        v65 = vcvtq_f32_f16(*(float16x4_t *)&_D5);
        a9 = vcvtq_f32_f16(*v24);
        v59 = vcvt_f16_f32(vmlaq_n_f32(v65, a9, 1.0 - v65.f32[3]));
        goto LABEL_32;
      }
      _H5 = *(_WORD *)(v21 + 6);
      __asm { FCVT            S4, H5 }
      if (_S4 < 1.0)
      {
        if (_S4 <= 0.0)
          goto LABEL_34;
        a9.i32[0] = *(_DWORD *)v21;
        v56.i64[0] = vcvtq_f32_f16(*(float16x4_t *)a9.f32).u64[0];
        _H7 = *(_WORD *)(v21 + 4);
        __asm { FCVT            S7, H7 }
        v56.i64[1] = __PAIR64__(LODWORD(_S4), _S7);
        _Q7 = vcvtq_f32_f16(*v24);
        a9 = vmlaq_n_f32(v56, _Q7, 1.0 - _S4);
        v59 = vcvt_f16_f32(a9);
LABEL_32:
        *v24 = v59;
        goto LABEL_34;
      }
      v24->i32[0] = *(_DWORD *)v21;
      v24->i16[2] = *(_WORD *)(v21 + 4);
      v24->i16[3] = _H5;
LABEL_34:
      v66 = v21 + 8 * v32;
      if (v66 >= v43)
        v67 = -(uint64_t)(int)v34;
      else
        v67 = 0;
      v21 = v66 + 8 * v67;
      v26 += v32;
      v24 += v32;
      --v51;
    }
    while (v51 > 1);
    v26 += v36;
    v24 += v37;
    v68 = v42 + 8 * v29;
    if (v68 >= v40)
      v69 = -(uint64_t)(v29 * (int)v33);
    else
      v69 = 0;
    v70 = v68 + 8 * v69;
    v71 = v43 + 8 * v69 + 8 * v29;
    v21 += 8 * v29;
    if (!v38)
    {
      v43 = v71;
      v42 = v70;
      v21 = v70;
    }
    _VF = __OFSUB__(v17--, 1);
    if (!((v17 < 0) ^ _VF | (v17 == 0)))
      continue;
    return result;
  }
}

void RGBAf16_mark_bits(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  int v9;
  unsigned int v10;
  size_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  double v20;
  float32x4_t v21;
  double v22;
  float32x4_t v23;
  double v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __n128 v29;
  __n128 v30;
  _OWORD v31[7];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[4096];
  uint64_t v36;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v7 = (_DWORD *)v2;
  v36 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(v5 + 112);
  v9 = *(_DWORD *)(v5 + 116);
  v10 = (v8 + 15) & 0xFFFFFFF0;
  v11 = v10 * v9;
  if ((int)v11 <= 4096)
  {
    v12 = v35;
  }
  else
  {
    v12 = malloc_type_malloc(v11, 0x7C78910CuLL);
    if (!v12)
      return;
  }
  CGSConvertBitsToMask(*(uint16x4_t **)(v6 + 136), *(_DWORD *)(v6 + 124), v12, v10, v8, v9, *(_DWORD *)(v6 + 128));
  v25 = *(_OWORD *)(v6 + 112);
  v31[6] = *(_OWORD *)(v6 + 96);
  v32 = v25;
  v26 = *(_OWORD *)(v6 + 144);
  v33 = *(_OWORD *)(v6 + 128);
  v34 = v26;
  v27 = *(_OWORD *)(v6 + 48);
  v31[2] = *(_OWORD *)(v6 + 32);
  v31[3] = v27;
  v28 = *(_OWORD *)(v6 + 80);
  v31[4] = *(_OWORD *)(v6 + 64);
  v31[5] = v28;
  v29 = *(__n128 *)v6;
  v30 = *(__n128 *)(v6 + 16);
  v31[0] = *(_OWORD *)v6;
  v31[1] = v30;
  HIDWORD(v32) = (v8 + 15) & 0xFFFFFFF0;
  *((_QWORD *)&v33 + 1) = v12;
  if (BYTE1(v31[0]) << 8 == 1024)
    RGBAf16_mark_constmask((uint64_t)v31, v4, v13, v14, v29.n128_f64[0], v30, v19, v20, *(double *)v21.i64, v22, *(double *)v23.i64, v24, v15, v16, v17, v18);
  else
    RGBAf16_mark_pixelmask(v7, (int *)v31, v4, v29, v30, v19, v20, v21, v22, v23, v24);
  if (v12 != v35)
    free(v12);
}

__int16 *ungamma(__int16 *result)
{
  float v9;
  float v20;

  _H0 = *result;
  __asm { FCVT            S1, H0 }
  if (_S1 != 0.0 && _S1 != 1.0)
  {
    _S2 = _S1 * _S1;
    __asm { FCVT            H2, S2 }
    _S3 = -(float)(_S1 * _S1);
    __asm { FCVT            H3, S3 }
    if (_S1 >= 0.0)
      v9 = _S2;
    else
      v9 = _S3;
    *result = LOWORD(v9);
  }
  _H1 = result[1];
  __asm { FCVT            S1, H1 }
  if (_S1 != 0.0 && _S1 != 1.0)
  {
    _S0 = _S1 * _S1;
    __asm { FCVT            H0, S0 }
    _S2 = -(float)(_S1 * _S1);
    __asm { FCVT            H2, S2 }
    if (_S1 < 0.0)
      _S0 = _S2;
    result[1] = LOWORD(_S0);
  }
  _H0 = result[2];
  __asm { FCVT            S0, H0 }
  if (_S0 != 0.0 && _S0 != 1.0)
  {
    _S1 = _S0 * _S0;
    __asm { FCVT            H1, S1 }
    _S2 = -(float)(_S0 * _S0);
    __asm { FCVT            H2, S2 }
    if (_S0 >= 0.0)
      v20 = _S1;
    else
      v20 = _S2;
    result[2] = LOWORD(v20);
  }
  return result;
}

__int16 gamma@<H0>(__int16 *a1@<X0>)
{
  float v7;
  float v8;
  float v15;
  float v20;
  float v21;

  _H0 = *a1;
  __asm { FCVT            S1, H0 }
  if (_S1 != 0.0 && _S1 != 1.0)
  {
    v7 = sqrtf(_S1);
    v8 = -sqrtf(fabsf(_S1));
    if (_S1 >= 0.0)
      _S1 = v7;
    else
      _S1 = v8;
    __asm { FCVT            H1, S1 }
    *a1 = _H1;
  }
  _H1 = a1[1];
  __asm { FCVT            S1, H1 }
  if (_S1 != 0.0 && _S1 != 1.0)
  {
    _S0 = sqrtf(_S1);
    v15 = -sqrtf(fabsf(_S1));
    if (_S1 < 0.0)
      _S0 = v15;
    __asm { FCVT            H0, S0 }
    a1[1] = _H0;
  }
  _H0 = a1[2];
  __asm { FCVT            S0, H0 }
  if (_S0 != 0.0 && _S0 != 1.0)
  {
    v20 = sqrtf(_S0);
    v21 = -sqrtf(fabsf(_S0));
    if (_S0 >= 0.0)
      _S0 = v20;
    else
      _S0 = v21;
    __asm { FCVT            H0, S0 }
    a1[2] = LOWORD(_S0);
  }
  return LOWORD(_S0);
}

uint64_t composite_pixelmask_SOVER(float16x4_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, int a6, int a7, unint64_t a8, double a9, double a10, float16x4_t a11, double a12, float32x4_t a13, unint64_t a14, _BYTE *a15, uint64_t a16, int a17, int a18, int a19)
{
  uint64_t result;
  int v30;
  unsigned int v31;
  float32x4_t v38;
  float v41;
  float32x4_t v42;
  float32x4_t v52;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;

  if (use_vImage_fp16_compositing(void)::predicate != -1)
    dispatch_once(&use_vImage_fp16_compositing(void)::predicate, &__block_literal_global_19551);
  if (use_vImage_fp16_compositing(void)::status)
    return vImageCGCompositePixelMask_ARGB16F();
  do
  {
    v30 = a17;
    do
    {
      v31 = *a15;
      if (!*a15)
        goto LABEL_17;
      if (v31 == 255)
      {
        _H3 = *(_WORD *)(a3 + 6);
        __asm { FCVT            S2, H3 }
        if (_S2 < 1.0)
        {
          if (_S2 <= 0.0)
            goto LABEL_17;
          a13.i32[0] = *(_DWORD *)a3;
          v38.i64[0] = vcvtq_f32_f16(*(float16x4_t *)a13.f32).u64[0];
          _H5 = *(_WORD *)(a3 + 4);
          __asm { FCVT            S5, H5 }
          v38.i64[1] = __PAIR64__(LODWORD(_S2), _S5);
          a13 = vmlaq_n_f32(v38, vcvtq_f32_f16(*a1), 1.0 - _S2);
          a11 = vcvt_f16_f32(a13);
LABEL_14:
          *a1 = a11;
          goto LABEL_17;
        }
        a1->i32[0] = *(_DWORD *)a3;
        a1->i16[2] = *(_WORD *)(a3 + 4);
        a1->i16[3] = _H3;
      }
      else
      {
        v41 = (float)v31 * 0.0039216;
        a11.i32[0] = *(_DWORD *)a3;
        v42 = vcvtq_f32_f16(a11);
        *(float32x2_t *)v42.f32 = vmul_n_f32(*(float32x2_t *)v42.f32, v41);
        a11 = vcvt_f16_f32(v42);
        _H3 = *(_WORD *)(a3 + 4);
        __asm { FCVT            S3, H3 }
        _S3 = v41 * _S3;
        __asm { FCVT            H3, S3 }
        _H5 = *(_WORD *)(a3 + 6);
        __asm { FCVT            S5, H5 }
        _S4 = v41 * _S5;
        __asm
        {
          FCVT            H5, S4
          FCVT            S4, H5
        }
        if (_S4 < 1.0)
        {
          if (_S4 <= 0.0)
            goto LABEL_17;
          v52.i64[0] = vcvtq_f32_f16(a11).u64[0];
          __asm { FCVT            S3, H3 }
          v52.i64[1] = __PAIR64__(LODWORD(_S4), _S3);
          a11 = vcvt_f16_f32(vmlaq_n_f32(v52, vcvtq_f32_f16(*a1), 1.0 - _S4));
          goto LABEL_14;
        }
        a1->i32[0] = a11.i32[0];
        a1->i16[2] = _H3;
        a1->i16[3] = _H5;
      }
LABEL_17:
      a15 += a19;
      v54 = a3 + 8 * a19;
      if (v54 >= a8)
        v55 = -(uint64_t)a7;
      else
        v55 = 0;
      a3 = v54 + 8 * v55;
      a1 += a19;
      --v30;
    }
    while (v30);
    a15 += a16;
    a1 += a2;
    v56 = a5 + 8 * a4;
    if (v56 >= a14)
      v57 = -(a6 * a4);
    else
      v57 = 0;
    v58 = v56 + 8 * v57;
    result = a8 + 8 * v57 + 8 * a4;
    if (a14)
    {
      a8 = result;
      a5 = v58;
      a3 = v58;
    }
    else
    {
      a3 += 8 * a4;
    }
    --a18;
  }
  while (a18);
  return result;
}

float16x4_t *composite_pixelmask<(CGCompositeOperation)6,_rgbaf16_t>(float16x4_t *result, uint64_t a2, int8x8_t *a3, uint64_t a4, int8x8_t *a5, int a6, int a7, unint64_t a8, unint64_t a9, char *a10, uint64_t a11, int a12, int a13, int a14, int a15, char a16)
{
  unsigned int v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  uint64_t v23;
  int8x8_t v24;
  int8x8_t v25;
  int8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x16_t v35;
  float32x4_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int8x16_t *v42;
  int8x16_t *v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  float16x8_t v47;
  float16x8_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t *v57;
  int8x16_t *v58;
  int8x16_t *v59;
  int8x16_t *v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  float16x8_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float16x8_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int8x16_t v74;
  int8x16_t v75;
  unint64_t i;
  float32x4_t v77;
  float32x4_t v78;
  int32x4_t v79;
  float32x4_t v80;
  int8x16_t v81;
  int8x8_t *v82;
  uint64_t v83;
  int8x8_t *v84;
  uint64_t v85;
  int8x8_t *v86;
  uint64_t v87;
  int8x16_t v88;
  float32x4_t v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  int8x16_t *v93;
  int8x16_t *v94;
  int8x16_t *v95;
  int8x16_t *v96;
  uint64_t v97;
  int64_t v98;
  unint64_t v99;
  float16x8_t v100;
  float16x8_t v101;
  float32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t *v110;
  int8x16_t *v111;
  int8x16_t *v112;
  int8x16_t *v113;
  int64_t v114;
  int64_t v115;
  uint64_t v116;
  float16x8_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float16x8_t v120;
  float32x4_t v121;
  float32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  int8x16_t v127;
  int8x16_t v128;
  unint64_t j;
  float16x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  int32x4_t v133;
  float32x4_t v134;
  int8x16_t v135;
  int8x8_t *v136;
  uint64_t v137;
  int8x8_t *v138;
  uint64_t v139;
  int8x8_t *v140;
  uint64_t v141;

  if (a15)
    v18 = 0;
  else
    v18 = -1;
  v19 = (int8x16_t)vdupq_n_s16(v18);
  v20.i64[0] = 0xFFFF000000000000;
  v20.i64[1] = 0xFFFF000000000000;
  v21 = vmvnq_s8(vandq_s8(v19, v20));
  v22 = vandq_s8(v19, (int8x16_t)xmmword_185005140);
  v23 = 2 * a14;
  v24.i32[0] = 0;
  v24.i16[2] = 0;
  v24.i16[3] = v18;
  v25 = vmvn_s8(v24);
  v26 = vand_s8(*(int8x8_t *)v19.i8, (int8x8_t)0x3C00000000000000);
  v27 = -(a6 * a4);
  v28 = 16 * a14;
  v29 = 8 * a14;
  __asm { FMOV            V4.4S, #1.0 }
  if ((a16 & 0x30) != 0)
  {
    v35.i64[0] = -1;
    v35.i64[1] = -1;
    v36 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    while (1)
    {
      v37 = (a8 - (unint64_t)a3) >> 3;
      if (v37 >= a12)
        v37 = a12;
      v38 = v37;
      if (v37 < 2)
        goto LABEL_40;
      while (1)
      {
        v39 = *(unsigned __int16 *)a10;
        if (!*(_WORD *)a10)
        {
          v57 = (int8x16_t *)&a10[v38];
          v58 = (int8x16_t *)a10;
          do
            v59 = v58++;
          while (v58 <= v57 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v59)) & 0x80) != 0);
          do
          {
            v60 = v59;
            v59 = (int8x16_t *)((char *)v59 + 4);
          }
          while (v59 <= v57 && !v60->i32[0]);
          if (v60 < v57)
          {
            while (!v60->i8[0])
            {
              v60 = (int8x16_t *)((char *)v60 + 1);
              if (v60 >= v57)
              {
                v60 = (int8x16_t *)&a10[v38];
                break;
              }
            }
          }
          v61 = (char *)v60 - a10;
          v62 = ((char *)v60 - a10) * a14;
          a3 += v62;
          result += v62;
          a10 += v62;
          v38 -= v61;
          goto LABEL_37;
        }
        if (v39 != 0xFFFF)
          break;
        v40 = (int8x16_t *)&a10[v38];
        v41 = (int8x16_t *)a10;
        do
          v42 = v41++;
        while (v41 <= v40 && (vminvq_u8((uint8x16_t)vceqq_s8(*v42, v35)) & 0x80) != 0);
        do
        {
          v43 = v42;
          v42 = (int8x16_t *)((char *)v42 + 4);
        }
        while (v42 <= v40 && v43->i32[0] == -1);
        if (v43 < v40)
        {
          while (v43->u8[0] == 255)
          {
            v43 = (int8x16_t *)((char *)v43 + 1);
            if (v43 >= v40)
            {
              v43 = (int8x16_t *)&a10[v38];
              break;
            }
          }
        }
        v44 = 0;
        v45 = (char *)v43 - a10;
        v46 = (char *)v43 - a10;
        do
        {
          v47 = *(float16x8_t *)&result->i8[v44];
          v48 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v44], v21), v22);
          v49 = vcvt_hight_f32_f16(v48);
          v50 = vcvtq_f32_f16(*(float16x4_t *)v48.i8);
          v51 = (int32x4_t)vcvtq_f32_f16(*(float16x4_t *)v47.i8);
          v52 = (int32x4_t)vcvt_hight_f32_f16(v47);
          v53 = (float32x4_t)vdupq_laneq_s32(v52, 3);
          v54 = (float32x4_t)vdupq_laneq_s32(v51, 3);
          v55 = (int8x16_t)vcgtzq_f32(v54);
          v56 = (int8x16_t)vcgtzq_f32(v53);
          *(int8x16_t *)&result->i8[v44] = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v54, _Q4), (int16x8_t)vcgtq_f32(v53, _Q4)), (int8x16_t)v47, (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vmlsq_f32(v50, (float32x4_t)vandq_s8(v55, (int8x16_t)v54), v50), (float32x4_t)vandq_s8(v55, (int8x16_t)v51))), vaddq_f32(vmlsq_f32(v49, (float32x4_t)vandq_s8(v56, (int8x16_t)v53), v49), (float32x4_t)vandq_s8(v56, (int8x16_t)v52))));
          a10 += v23;
          v46 -= 2;
          v44 += v28;
        }
        while (v46 > 1);
        a3 = (int8x8_t *)((char *)a3 + v44);
        result = (float16x4_t *)((char *)result + v44);
        v38 = v38 - v45 + v46;
LABEL_37:
        if (v38 <= 1)
          goto LABEL_40;
      }
      v63 = 0;
      while (1)
      {
        v64 = *(float16x8_t *)&result->i8[v63];
        v65 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v39)) & 0xFF00FF00FF00FFLL))), v36);
        v66 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v39) & 0xFF00FF00FF00FFLL))), v36);
        v67 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v63], v21), v22);
        v68 = vcvt_hight_f32_f16(v67);
        v69 = vcvtq_f32_f16(*(float16x4_t *)v67.i8);
        v70 = (int32x4_t)vcvtq_f32_f16(*(float16x4_t *)v64.i8);
        v71 = (int32x4_t)vcvt_hight_f32_f16(v64);
        v72 = (float32x4_t)vdupq_laneq_s32(v71, 3);
        v73 = (float32x4_t)vdupq_laneq_s32(v70, 3);
        v74 = (int8x16_t)vcgtzq_f32(v73);
        v75 = (int8x16_t)vcgtzq_f32(v72);
        *(int8x16_t *)&result->i8[v63] = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vceqzq_f32(v66), (int8x16_t)vcgtq_f32(v73, _Q4)), (int16x8_t)vorrq_s8((int8x16_t)vceqzq_f32(v65), (int8x16_t)vcgtq_f32(v72, _Q4))), (int8x16_t)v64, (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32((float32x4_t)vandq_s8(v74, (int8x16_t)v70), v66, vmlsq_f32(v69, (float32x4_t)vandq_s8(v74, (int8x16_t)v73), v69))), vmlaq_f32((float32x4_t)vandq_s8(v75, (int8x16_t)v71),
                                                          v65,
                                                          vmlsq_f32(v68, (float32x4_t)vandq_s8(v75, (int8x16_t)v72), v68))));
        a10 += v23;
        v38 -= 2;
        if (v38 < 2)
          break;
        LOWORD(v39) = *(_WORD *)a10;
        v63 += v28;
        if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
        {
          result = (float16x4_t *)((char *)result + v63);
          a3 = (int8x8_t *)((char *)a3 + v63);
          goto LABEL_37;
        }
      }
      result = (float16x4_t *)((char *)result + v28 + v63);
      a3 = (int8x8_t *)((char *)a3 + v28 + v63);
LABEL_40:
      for (i = a12 - v37 + v38; i; --i)
      {
        if (*a10)
        {
          v77 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v36);
          v78 = vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(*a3, v25), v26));
          v79 = (int32x4_t)vcvtq_f32_f16(*result);
          v80 = (float32x4_t)vdupq_laneq_s32(v79, 3);
          v81 = (int8x16_t)vcgtzq_f32(v80);
          *result = (float16x4_t)vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcgtq_f32(v80, _Q4), (int8x16_t)vceqzq_f32(v77))), (int8x8_t)*result, (int8x8_t)vcvt_f16_f32(vmlaq_f32((float32x4_t)vandq_s8(v81, (int8x16_t)v79), v77, vmlsq_f32(v78, (float32x4_t)vandq_s8(v81, (int8x16_t)v80), v78))));
        }
        v82 = &a3[a14];
        a10 += a14;
        if ((unint64_t)v82 >= a8)
          v83 = -(uint64_t)a7;
        else
          v83 = 0;
        a3 = &v82[v83];
        result = (float16x4_t *)((char *)result + v29);
      }
      a10 += a11;
      result += a2;
      v84 = &a5[a4];
      if ((unint64_t)v84 >= a9)
        v85 = v27;
      else
        v85 = 0;
      v86 = &v84[v85];
      v87 = a8 + 8 * v85 + 8 * a4;
      a3 += a4;
      if (a9)
      {
        a3 = v86;
        a8 = v87;
        a5 = v86;
      }
      _VF = __OFSUB__(a13--, 1);
      if ((a13 < 0) ^ _VF | (a13 == 0))
        return result;
    }
  }
  v88.i64[0] = -1;
  v88.i64[1] = -1;
  v89 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  while (2)
  {
    v90 = (a8 - (unint64_t)a3) >> 3;
    if (v90 >= a12)
      v90 = a12;
    v91 = v90;
    if (v90 < 2)
      goto LABEL_90;
    while (1)
    {
      v92 = *(unsigned __int16 *)a10;
      if (!*(_WORD *)a10)
      {
        v110 = (int8x16_t *)&a10[v91];
        v111 = (int8x16_t *)a10;
        do
          v112 = v111++;
        while (v111 <= v110 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v112)) & 0x80) != 0);
        do
        {
          v113 = v112;
          v112 = (int8x16_t *)((char *)v112 + 4);
        }
        while (v112 <= v110 && !v113->i32[0]);
        if (v113 < v110)
        {
          while (!v113->i8[0])
          {
            v113 = (int8x16_t *)((char *)v113 + 1);
            if (v113 >= v110)
            {
              v113 = (int8x16_t *)&a10[v91];
              break;
            }
          }
        }
        v114 = (char *)v113 - a10;
        v115 = ((char *)v113 - a10) * a14;
        a3 += v115;
        result += v115;
        a10 += v115;
        v91 -= v114;
        goto LABEL_87;
      }
      if (v92 != 0xFFFF)
        break;
      v93 = (int8x16_t *)&a10[v91];
      v94 = (int8x16_t *)a10;
      do
        v95 = v94++;
      while (v94 <= v93 && (vminvq_u8((uint8x16_t)vceqq_s8(*v95, v88)) & 0x80) != 0);
      do
      {
        v96 = v95;
        v95 = (int8x16_t *)((char *)v95 + 4);
      }
      while (v95 <= v93 && v96->i32[0] == -1);
      if (v96 < v93)
      {
        while (v96->u8[0] == 255)
        {
          v96 = (int8x16_t *)((char *)v96 + 1);
          if (v96 >= v93)
          {
            v96 = (int8x16_t *)&a10[v91];
            break;
          }
        }
      }
      v97 = 0;
      v98 = (char *)v96 - a10;
      v99 = (char *)v96 - a10;
      do
      {
        v100 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&result->i8[v97]);
        v101 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v97]), v21), v22);
        v102 = vcvt_hight_f32_f16(v101);
        v103 = (int32x4_t)vcvtq_f32_f16(*(float16x4_t *)v100.i8);
        v104 = (int32x4_t)vcvt_hight_f32_f16(v100);
        v105 = (float32x4_t)vdupq_laneq_s32(v104, 3);
        v106 = (float32x4_t)vdupq_laneq_s32(v103, 3);
        v107 = vcvtq_f32_f16(*(float16x4_t *)v101.i8);
        v108 = (int8x16_t)vcgtzq_f32(v106);
        v109 = (int8x16_t)vcgtzq_f32(v105);
        *(int8x16_t *)&result->i8[v97] = vrev16q_s8(vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v106, _Q4), (int16x8_t)vcgtq_f32(v105, _Q4)), (int8x16_t)v100, (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vmlsq_f32(v107, (float32x4_t)vandq_s8(v108, (int8x16_t)v106), v107), (float32x4_t)vandq_s8(v108, (int8x16_t)v103))), vaddq_f32(vmlsq_f32(v102, (float32x4_t)vandq_s8(v109, (int8x16_t)v105), v102), (float32x4_t)vandq_s8(v109, (int8x16_t)v104)))));
        a10 += v23;
        v99 -= 2;
        v97 += v28;
      }
      while (v99 > 1);
      a3 = (int8x8_t *)((char *)a3 + v97);
      result = (float16x4_t *)((char *)result + v97);
      v91 = v91 - v98 + v99;
LABEL_87:
      if (v91 <= 1)
        goto LABEL_90;
    }
    v116 = 0;
    while (1)
    {
      v117 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&result->i8[v116]);
      v118 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v92)) & 0xFF00FF00FF00FFLL))), v89);
      v119 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v92) & 0xFF00FF00FF00FFLL))), v89);
      v120 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v116]), v21), v22);
      v121 = vcvt_hight_f32_f16(v120);
      v122 = vcvtq_f32_f16(*(float16x4_t *)v120.i8);
      v123 = (int32x4_t)vcvtq_f32_f16(*(float16x4_t *)v117.i8);
      v124 = (int32x4_t)vcvt_hight_f32_f16(v117);
      v125 = (float32x4_t)vdupq_laneq_s32(v124, 3);
      v126 = (float32x4_t)vdupq_laneq_s32(v123, 3);
      v127 = (int8x16_t)vcgtzq_f32(v126);
      v128 = (int8x16_t)vcgtzq_f32(v125);
      *(int8x16_t *)&result->i8[v116] = vrev16q_s8(vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcgtq_f32(v126, _Q4), (int8x16_t)vceqzq_f32(v119)), (int16x8_t)vorrq_s8((int8x16_t)vcgtq_f32(v125, _Q4), (int8x16_t)vceqzq_f32(v118))), (int8x16_t)v117, (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32((float32x4_t)vandq_s8(v127, (int8x16_t)v123), v119, vmlsq_f32(v122, (float32x4_t)vandq_s8(v127, (int8x16_t)v126), v122))), vmlaq_f32(
                                                           (float32x4_t)vandq_s8(v128, (int8x16_t)v124),
                                                           v118,
                                                           vmlsq_f32(v121, (float32x4_t)vandq_s8(v128, (int8x16_t)v125), v121)))));
      a10 += v23;
      v91 -= 2;
      if (v91 < 2)
        break;
      LOWORD(v92) = *(_WORD *)a10;
      v116 += v28;
      if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
      {
        result = (float16x4_t *)((char *)result + v116);
        a3 = (int8x8_t *)((char *)a3 + v116);
        goto LABEL_87;
      }
    }
    result = (float16x4_t *)((char *)result + v28 + v116);
    a3 = (int8x8_t *)((char *)a3 + v28 + v116);
LABEL_90:
    for (j = a12 - v90 + v91; j; --j)
    {
      if (*a10)
      {
        v130 = (float16x4_t)vrev16_s8((int8x8_t)*result);
        v131 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v89);
        v132 = vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(vrev16_s8(*a3), v25), v26));
        v133 = (int32x4_t)vcvtq_f32_f16(v130);
        v134 = (float32x4_t)vdupq_laneq_s32(v133, 3);
        v135 = (int8x16_t)vcgtzq_f32(v134);
        *result = (float16x4_t)vrev16_s8(vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcgtq_f32(v134, _Q4), (int8x16_t)vceqzq_f32(v131))), (int8x8_t)v130, (int8x8_t)vcvt_f16_f32(vmlaq_f32((float32x4_t)vandq_s8(v135, (int8x16_t)v133), v131, vmlsq_f32(v132, (float32x4_t)vandq_s8(v135, (int8x16_t)v134), v132)))));
      }
      v136 = &a3[a14];
      a10 += a14;
      if ((unint64_t)v136 >= a8)
        v137 = -(uint64_t)a7;
      else
        v137 = 0;
      a3 = &v136[v137];
      result = (float16x4_t *)((char *)result + v29);
    }
    a10 += a11;
    result += a2;
    v138 = &a5[a4];
    if ((unint64_t)v138 >= a9)
      v139 = v27;
    else
      v139 = 0;
    v140 = &v138[v139];
    v141 = a8 + 8 * v139 + 8 * a4;
    a3 += a4;
    if (a9)
    {
      a3 = v140;
      a8 = v141;
      a5 = v140;
    }
    _VF = __OFSUB__(a13--, 1);
    if (!((a13 < 0) ^ _VF | (a13 == 0)))
      continue;
    return result;
  }
}

float16x4_t *composite_pixelmask<(CGCompositeOperation)3,_rgbaf16_t>(float16x4_t *result, uint64_t a2, int8x8_t *a3, uint64_t a4, int8x8_t *a5, int a6, int a7, unint64_t a8, unint64_t a9, char *a10, uint64_t a11, int a12, int a13, int a14, int a15, char a16)
{
  unsigned int v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x8_t v23;
  uint64_t v24;
  int8x8_t v25;
  int8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x16_t v30;
  float32x4_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  float16x8_t v42;
  float16x8_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x16_t *v46;
  int8x16_t *v47;
  int8x16_t *v48;
  int8x16_t *v49;
  int64_t v50;
  int64_t v51;
  uint64_t v52;
  float16x8_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float16x8_t v56;
  float32x4_t v57;
  float32x4_t v58;
  unint64_t i;
  float32x4_t v60;
  float32x4_t v61;
  int8x8_t *v62;
  uint64_t v63;
  int8x8_t *v64;
  uint64_t v65;
  int8x8_t *v66;
  uint64_t v67;
  BOOL v68;
  int8x16_t v69;
  float32x4_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  int8x16_t *v74;
  int8x16_t *v75;
  int8x16_t *v76;
  int8x16_t *v77;
  uint64_t v78;
  int64_t v79;
  unint64_t v80;
  float16x8_t v81;
  float16x8_t v82;
  float32x4_t v83;
  float32x4_t v84;
  int8x16_t *v85;
  int8x16_t *v86;
  int8x16_t *v87;
  int8x16_t *v88;
  int64_t v89;
  int64_t v90;
  uint64_t v91;
  float16x8_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float16x8_t v95;
  float32x4_t v96;
  float32x4_t v97;
  unint64_t j;
  float32x4_t v99;
  float32x4_t v100;
  int8x8_t *v101;
  uint64_t v102;
  int8x8_t *v103;
  uint64_t v104;
  int8x8_t *v105;
  uint64_t v106;

  if (a15)
    v18 = 0;
  else
    v18 = -1;
  v19 = (int8x16_t)vdupq_n_s16(v18);
  v20.i64[0] = 0xFFFF000000000000;
  v20.i64[1] = 0xFFFF000000000000;
  v21 = vmvnq_s8(vandq_s8(v19, v20));
  v22 = vandq_s8(v19, (int8x16_t)xmmword_185005140);
  v23.i32[0] = 0;
  v23.i16[2] = 0;
  v23.i16[3] = v18;
  v24 = 2 * a14;
  v25 = vmvn_s8(v23);
  v26 = vand_s8(*(int8x8_t *)v19.i8, (int8x8_t)0x3C00000000000000);
  v27 = -(a6 * a4);
  v28 = 16 * a14;
  v29 = 8 * a14;
  if ((a16 & 0x30) != 0)
  {
    v30.i64[0] = -1;
    v30.i64[1] = -1;
    v31 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    while (1)
    {
      v32 = (a8 - (unint64_t)a3) >> 3;
      if (v32 >= a12)
        v32 = a12;
      v33 = v32;
      if (v32 < 2)
        goto LABEL_40;
      while (1)
      {
        v34 = *(unsigned __int16 *)a10;
        if (!*(_WORD *)a10)
        {
          v46 = (int8x16_t *)&a10[v33];
          v47 = (int8x16_t *)a10;
          do
            v48 = v47++;
          while (v47 <= v46 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v48)) & 0x80) != 0);
          do
          {
            v49 = v48;
            v48 = (int8x16_t *)((char *)v48 + 4);
          }
          while (v48 <= v46 && !v49->i32[0]);
          if (v49 < v46)
          {
            while (!v49->i8[0])
            {
              v49 = (int8x16_t *)((char *)v49 + 1);
              if (v49 >= v46)
              {
                v49 = (int8x16_t *)&a10[v33];
                break;
              }
            }
          }
          v50 = (char *)v49 - a10;
          v51 = ((char *)v49 - a10) * a14;
          a3 += v51;
          result += v51;
          a10 += v51;
          v33 -= v50;
          goto LABEL_37;
        }
        if (v34 != 0xFFFF)
          break;
        v35 = (int8x16_t *)&a10[v33];
        v36 = (int8x16_t *)a10;
        do
          v37 = v36++;
        while (v36 <= v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, v30)) & 0x80) != 0);
        do
        {
          v38 = v37;
          v37 = (int8x16_t *)((char *)v37 + 4);
        }
        while (v37 <= v35 && v38->i32[0] == -1);
        if (v38 < v35)
        {
          while (v38->u8[0] == 255)
          {
            v38 = (int8x16_t *)((char *)v38 + 1);
            if (v38 >= v35)
            {
              v38 = (int8x16_t *)&a10[v33];
              break;
            }
          }
        }
        v39 = 0;
        v40 = (char *)v38 - a10;
        v41 = (char *)v38 - a10;
        do
        {
          v42 = *(float16x8_t *)&result->i8[v39];
          v43 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v39], v21), v22);
          v44 = vcvt_hight_f32_f16(v42);
          v45 = vcvtq_f32_f16(*(float16x4_t *)v42.i8);
          *(float16x8_t *)&result->i8[v39] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_laneq_f32(vsubq_f32(v45, v45), vcvtq_f32_f16(*(float16x4_t *)v43.i8), v45, 3)), vmlaq_laneq_f32(vsubq_f32(v44, v44), vcvt_hight_f32_f16(v43), v44, 3));
          a10 += v24;
          v41 -= 2;
          v39 += v28;
        }
        while (v41 > 1);
        a3 = (int8x8_t *)((char *)a3 + v39);
        result = (float16x4_t *)((char *)result + v39);
        v33 = v33 - v40 + v41;
LABEL_37:
        if (v33 <= 1)
          goto LABEL_40;
      }
      v52 = 0;
      while (1)
      {
        v53 = *(float16x8_t *)&result->i8[v52];
        v54 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v34)) & 0xFF00FF00FF00FFLL))), v31);
        v55 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v34) & 0xFF00FF00FF00FFLL))), v31);
        v56 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v52], v21), v22);
        v57 = vcvt_hight_f32_f16(v53);
        v58 = vcvtq_f32_f16(*(float16x4_t *)v53.i8);
        *(float16x8_t *)&result->i8[v52] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_laneq_f32(vmlsq_f32(v58, v55, v58), vmulq_f32(v55, vcvtq_f32_f16(*(float16x4_t *)v56.i8)), v58, 3)), vmlaq_laneq_f32(vmlsq_f32(v57, v54, v57), vmulq_f32(v54, vcvt_hight_f32_f16(v56)), v57, 3));
        a10 += v24;
        v33 -= 2;
        if (v33 < 2)
          break;
        LOWORD(v34) = *(_WORD *)a10;
        v52 += v28;
        if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
        {
          result = (float16x4_t *)((char *)result + v52);
          a3 = (int8x8_t *)((char *)a3 + v52);
          goto LABEL_37;
        }
      }
      result = (float16x4_t *)((char *)result + v28 + v52);
      a3 = (int8x8_t *)((char *)a3 + v28 + v52);
LABEL_40:
      for (i = a12 - v32 + v33; i; --i)
      {
        if (*a10)
        {
          v60 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v31);
          v61 = vcvtq_f32_f16(*result);
          *result = vcvt_f16_f32(vmlaq_laneq_f32(vmlsq_f32(v61, v60, v61), vmulq_f32(v60, vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(*a3, v25), v26))), v61, 3));
        }
        v62 = &a3[a14];
        a10 += a14;
        if ((unint64_t)v62 >= a8)
          v63 = -(uint64_t)a7;
        else
          v63 = 0;
        a3 = &v62[v63];
        result = (float16x4_t *)((char *)result + v29);
      }
      a10 += a11;
      result += a2;
      v64 = &a5[a4];
      if ((unint64_t)v64 >= a9)
        v65 = v27;
      else
        v65 = 0;
      v66 = &v64[v65];
      v67 = a8 + 8 * v65 + 8 * a4;
      a3 += a4;
      if (a9)
      {
        a3 = v66;
        a8 = v67;
        a5 = v66;
      }
      v68 = __OFSUB__(a13--, 1);
      if ((a13 < 0) ^ v68 | (a13 == 0))
        return result;
    }
  }
  v69.i64[0] = -1;
  v69.i64[1] = -1;
  v70 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  while (2)
  {
    v71 = (a8 - (unint64_t)a3) >> 3;
    if (v71 >= a12)
      v71 = a12;
    v72 = v71;
    if (v71 < 2)
      goto LABEL_90;
    while (1)
    {
      v73 = *(unsigned __int16 *)a10;
      if (!*(_WORD *)a10)
      {
        v85 = (int8x16_t *)&a10[v72];
        v86 = (int8x16_t *)a10;
        do
          v87 = v86++;
        while (v86 <= v85 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v87)) & 0x80) != 0);
        do
        {
          v88 = v87;
          v87 = (int8x16_t *)((char *)v87 + 4);
        }
        while (v87 <= v85 && !v88->i32[0]);
        if (v88 < v85)
        {
          while (!v88->i8[0])
          {
            v88 = (int8x16_t *)((char *)v88 + 1);
            if (v88 >= v85)
            {
              v88 = (int8x16_t *)&a10[v72];
              break;
            }
          }
        }
        v89 = (char *)v88 - a10;
        v90 = ((char *)v88 - a10) * a14;
        a3 += v90;
        result += v90;
        a10 += v90;
        v72 -= v89;
        goto LABEL_87;
      }
      if (v73 != 0xFFFF)
        break;
      v74 = (int8x16_t *)&a10[v72];
      v75 = (int8x16_t *)a10;
      do
        v76 = v75++;
      while (v75 <= v74 && (vminvq_u8((uint8x16_t)vceqq_s8(*v76, v69)) & 0x80) != 0);
      do
      {
        v77 = v76;
        v76 = (int8x16_t *)((char *)v76 + 4);
      }
      while (v76 <= v74 && v77->i32[0] == -1);
      if (v77 < v74)
      {
        while (v77->u8[0] == 255)
        {
          v77 = (int8x16_t *)((char *)v77 + 1);
          if (v77 >= v74)
          {
            v77 = (int8x16_t *)&a10[v72];
            break;
          }
        }
      }
      v78 = 0;
      v79 = (char *)v77 - a10;
      v80 = (char *)v77 - a10;
      do
      {
        v81 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&result->i8[v78]);
        v82 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v78]), v21), v22);
        v83 = vcvt_hight_f32_f16(v81);
        v84 = vcvtq_f32_f16(*(float16x4_t *)v81.i8);
        *(int8x16_t *)&result->i8[v78] = vrev16q_s8((int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_laneq_f32(vsubq_f32(v84, v84), vcvtq_f32_f16(*(float16x4_t *)v82.i8), v84, 3)), vmlaq_laneq_f32(vsubq_f32(v83, v83), vcvt_hight_f32_f16(v82), v83, 3)));
        a10 += v24;
        v80 -= 2;
        v78 += v28;
      }
      while (v80 > 1);
      a3 = (int8x8_t *)((char *)a3 + v78);
      result = (float16x4_t *)((char *)result + v78);
      v72 = v72 - v79 + v80;
LABEL_87:
      if (v72 <= 1)
        goto LABEL_90;
    }
    v91 = 0;
    while (1)
    {
      v92 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&result->i8[v91]);
      v93 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v73)) & 0xFF00FF00FF00FFLL))), v70);
      v94 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v73) & 0xFF00FF00FF00FFLL))), v70);
      v95 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v91]), v21), v22);
      v96 = vcvt_hight_f32_f16(v92);
      v97 = vcvtq_f32_f16(*(float16x4_t *)v92.i8);
      *(int8x16_t *)&result->i8[v91] = vrev16q_s8((int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_laneq_f32(vmlsq_f32(v97, v94, v97), vmulq_f32(v94, vcvtq_f32_f16(*(float16x4_t *)v95.i8)), v97, 3)), vmlaq_laneq_f32(vmlsq_f32(v96, v93, v96), vmulq_f32(v93, vcvt_hight_f32_f16(v95)), v96, 3)));
      a10 += v24;
      v72 -= 2;
      if (v72 < 2)
        break;
      LOWORD(v73) = *(_WORD *)a10;
      v91 += v28;
      if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
      {
        result = (float16x4_t *)((char *)result + v91);
        a3 = (int8x8_t *)((char *)a3 + v91);
        goto LABEL_87;
      }
    }
    result = (float16x4_t *)((char *)result + v28 + v91);
    a3 = (int8x8_t *)((char *)a3 + v28 + v91);
LABEL_90:
    for (j = a12 - v71 + v72; j; --j)
    {
      if (*a10)
      {
        v99 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v70);
        v100 = vcvtq_f32_f16((float16x4_t)vrev16_s8((int8x8_t)*result));
        *result = (float16x4_t)vrev16_s8((int8x8_t)vcvt_f16_f32(vmlaq_laneq_f32(vmlsq_f32(v100, v99, v100), vmulq_f32(v99, vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(vrev16_s8(*a3), v25), v26))), v100, 3)));
      }
      v101 = &a3[a14];
      a10 += a14;
      if ((unint64_t)v101 >= a8)
        v102 = -(uint64_t)a7;
      else
        v102 = 0;
      a3 = &v101[v102];
      result = (float16x4_t *)((char *)result + v29);
    }
    a10 += a11;
    result += a2;
    v103 = &a5[a4];
    if ((unint64_t)v103 >= a9)
      v104 = v27;
    else
      v104 = 0;
    v105 = &v103[v104];
    v106 = a8 + 8 * v104 + 8 * a4;
    a3 += a4;
    if (a9)
    {
      a3 = v105;
      a8 = v106;
      a5 = v105;
    }
    v68 = __OFSUB__(a13--, 1);
    if (!((a13 < 0) ^ v68 | (a13 == 0)))
      continue;
    return result;
  }
}

float16x4_t *composite_pixelmask<(CGCompositeOperation)7,_rgbaf16_t>(float16x4_t *result, uint64_t a2, float16x4_t *a3, uint64_t a4, float16x4_t *a5, int a6, int a7, unint64_t a8, unint64_t a9, char *a10, uint64_t a11, int a12, int a13, int a14, char a15)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t v27;
  float32x4_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  float16x8_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t *v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int64_t v46;
  int64_t v47;
  uint64_t v48;
  float16x8_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  unint64_t i;
  float32x4_t v55;
  float32x4_t v56;
  float16x4_t *v57;
  uint64_t v58;
  float16x4_t *v59;
  uint64_t v60;
  float16x4_t *v61;
  uint64_t v62;
  int8x16_t v63;
  float32x4_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  int8x16_t *v68;
  int8x16_t *v69;
  int8x16_t *v70;
  int8x16_t *v71;
  uint64_t v72;
  int64_t v73;
  unint64_t v74;
  float16x8_t v75;
  float16x8_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x16_t *v79;
  int8x16_t *v80;
  int8x16_t *v81;
  int8x16_t *v82;
  int64_t v83;
  int64_t v84;
  uint64_t v85;
  float16x8_t v86;
  float16x8_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  unint64_t j;
  float32x4_t v93;
  float32x4_t v94;
  float16x4_t *v95;
  uint64_t v96;
  float16x4_t *v97;
  uint64_t v98;
  float16x4_t *v99;
  uint64_t v100;

  v17 = 2 * a14;
  v18 = -(a6 * a4);
  v19 = 16 * a14;
  v20 = 8 * a14;
  __asm
  {
    FMOV            V0.4S, #-1.0
    FMOV            V1.4S, #1.0
  }
  if ((a15 & 0x30) != 0)
  {
    v27.i64[0] = -1;
    v27.i64[1] = -1;
    v28 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    while (1)
    {
      v29 = (a8 - (unint64_t)a3) >> 3;
      if (v29 >= a12)
        v29 = a12;
      v30 = v29;
      if (v29 < 2)
        goto LABEL_37;
      while (1)
      {
        v31 = *(unsigned __int16 *)a10;
        if (!*(_WORD *)a10)
        {
          v42 = (int8x16_t *)&a10[v30];
          v43 = (int8x16_t *)a10;
          do
            v44 = v43++;
          while (v43 <= v42 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v44)) & 0x80) != 0);
          do
          {
            v45 = v44;
            v44 = (int8x16_t *)((char *)v44 + 4);
          }
          while (v44 <= v42 && !v45->i32[0]);
          if (v45 < v42)
          {
            while (!v45->i8[0])
            {
              v45 = (int8x16_t *)((char *)v45 + 1);
              if (v45 >= v42)
              {
                v45 = (int8x16_t *)&a10[v30];
                break;
              }
            }
          }
          v46 = (char *)v45 - a10;
          v47 = ((char *)v45 - a10) * a14;
          a3 += v47;
          result += v47;
          a10 += v47;
          v30 -= v46;
          goto LABEL_34;
        }
        if (v31 != 0xFFFF)
          break;
        v32 = (int8x16_t *)&a10[v30];
        v33 = (int8x16_t *)a10;
        do
          v34 = v33++;
        while (v33 <= v32 && (vminvq_u8((uint8x16_t)vceqq_s8(*v34, v27)) & 0x80) != 0);
        do
        {
          v35 = v34;
          v34 = (int8x16_t *)((char *)v34 + 4);
        }
        while (v34 <= v32 && v35->i32[0] == -1);
        if (v35 < v32)
        {
          while (v35->u8[0] == 255)
          {
            v35 = (int8x16_t *)((char *)v35 + 1);
            if (v35 >= v32)
            {
              v35 = (int8x16_t *)&a10[v30];
              break;
            }
          }
        }
        v36 = 0;
        v37 = (char *)v35 - a10;
        v38 = (char *)v35 - a10;
        do
        {
          v39 = *(float16x8_t *)&result->i8[v36];
          v40 = vcvt_hight_f32_f16(v39);
          v41 = vcvtq_f32_f16(*(float16x4_t *)v39.i8);
          *(float16x8_t *)&result->i8[v36] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlsq_f32(v41, vmlaq_laneq_f32(_Q1, _Q0, vcvtq_f32_f16(*(float16x4_t *)((char *)a3 + v36)), 3), v41)), vmlsq_f32(v40, vmlaq_laneq_f32(_Q1, _Q0, vcvt_hight_f32_f16(*(float16x8_t *)&a3->i8[v36]), 3), v40));
          a10 += v17;
          v38 -= 2;
          v36 += v19;
        }
        while (v38 > 1);
        a3 = (float16x4_t *)((char *)a3 + v36);
        result = (float16x4_t *)((char *)result + v36);
        v30 = v30 - v37 + v38;
LABEL_34:
        if (v30 <= 1)
          goto LABEL_37;
      }
      v48 = 0;
      while (1)
      {
        v49 = *(float16x8_t *)&result->i8[v48];
        v50 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v31)) & 0xFF00FF00FF00FFLL))), v28);
        v51 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v31) & 0xFF00FF00FF00FFLL))), v28);
        v52 = vcvt_hight_f32_f16(v49);
        v53 = vcvtq_f32_f16(*(float16x4_t *)v49.i8);
        *(float16x8_t *)&result->i8[v48] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlsq_f32(v53, vmlsq_laneq_f32(v51, v51, vcvtq_f32_f16(*(float16x4_t *)((char *)a3 + v48)), 3), v53)), vmlsq_f32(v52, vmlsq_laneq_f32(v50, v50, vcvt_hight_f32_f16(*(float16x8_t *)&a3->i8[v48]), 3), v52));
        a10 += v17;
        v30 -= 2;
        if (v30 < 2)
          break;
        LOWORD(v31) = *(_WORD *)a10;
        v48 += v19;
        if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
        {
          result = (float16x4_t *)((char *)result + v48);
          a3 = (float16x4_t *)((char *)a3 + v48);
          goto LABEL_34;
        }
      }
      result = (float16x4_t *)((char *)result + v19 + v48);
      a3 = (float16x4_t *)((char *)a3 + v19 + v48);
LABEL_37:
      for (i = a12 - v29 + v30; i; --i)
      {
        if (*a10)
        {
          v55 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v28);
          v56 = vcvtq_f32_f16(*result);
          *result = vcvt_f16_f32(vmlsq_f32(v56, vmlsq_laneq_f32(v55, v55, vcvtq_f32_f16(*a3), 3), v56));
        }
        v57 = &a3[a14];
        a10 += a14;
        if ((unint64_t)v57 >= a8)
          v58 = -(uint64_t)a7;
        else
          v58 = 0;
        a3 = &v57[v58];
        result = (float16x4_t *)((char *)result + v20);
      }
      a10 += a11;
      result += a2;
      v59 = &a5[a4];
      if ((unint64_t)v59 >= a9)
        v60 = v18;
      else
        v60 = 0;
      v61 = &v59[v60];
      v62 = a8 + 8 * v60 + 8 * a4;
      a3 += a4;
      if (a9)
      {
        a3 = v61;
        a8 = v62;
        a5 = v61;
      }
      _VF = __OFSUB__(a13--, 1);
      if ((a13 < 0) ^ _VF | (a13 == 0))
        return result;
    }
  }
  v63.i64[0] = -1;
  v63.i64[1] = -1;
  v64 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  while (2)
  {
    v65 = (a8 - (unint64_t)a3) >> 3;
    if (v65 >= a12)
      v65 = a12;
    v66 = v65;
    if (v65 < 2)
      goto LABEL_87;
    while (1)
    {
      v67 = *(unsigned __int16 *)a10;
      if (!*(_WORD *)a10)
      {
        v79 = (int8x16_t *)&a10[v66];
        v80 = (int8x16_t *)a10;
        do
          v81 = v80++;
        while (v80 <= v79 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v81)) & 0x80) != 0);
        do
        {
          v82 = v81;
          v81 = (int8x16_t *)((char *)v81 + 4);
        }
        while (v81 <= v79 && !v82->i32[0]);
        if (v82 < v79)
        {
          while (!v82->i8[0])
          {
            v82 = (int8x16_t *)((char *)v82 + 1);
            if (v82 >= v79)
            {
              v82 = (int8x16_t *)&a10[v66];
              break;
            }
          }
        }
        v83 = (char *)v82 - a10;
        v84 = ((char *)v82 - a10) * a14;
        a3 += v84;
        result += v84;
        a10 += v84;
        v66 -= v83;
        goto LABEL_84;
      }
      if (v67 != 0xFFFF)
        break;
      v68 = (int8x16_t *)&a10[v66];
      v69 = (int8x16_t *)a10;
      do
        v70 = v69++;
      while (v69 <= v68 && (vminvq_u8((uint8x16_t)vceqq_s8(*v70, v63)) & 0x80) != 0);
      do
      {
        v71 = v70;
        v70 = (int8x16_t *)((char *)v70 + 4);
      }
      while (v70 <= v68 && v71->i32[0] == -1);
      if (v71 < v68)
      {
        while (v71->u8[0] == 255)
        {
          v71 = (int8x16_t *)((char *)v71 + 1);
          if (v71 >= v68)
          {
            v71 = (int8x16_t *)&a10[v66];
            break;
          }
        }
      }
      v72 = 0;
      v73 = (char *)v71 - a10;
      v74 = (char *)v71 - a10;
      do
      {
        v75 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&a3->i8[v72]);
        v76 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&result->i8[v72]);
        v77 = vcvt_hight_f32_f16(v76);
        v78 = vcvtq_f32_f16(*(float16x4_t *)v76.i8);
        *(int8x16_t *)&result->i8[v72] = vrev16q_s8((int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlsq_f32(v78, vmlaq_laneq_f32(_Q1, _Q0, vcvtq_f32_f16(*(float16x4_t *)v75.i8), 3), v78)), vmlsq_f32(v77, vmlaq_laneq_f32(_Q1, _Q0, vcvt_hight_f32_f16(v75), 3), v77)));
        a10 += v17;
        v74 -= 2;
        v72 += v19;
      }
      while (v74 > 1);
      a3 = (float16x4_t *)((char *)a3 + v72);
      result = (float16x4_t *)((char *)result + v72);
      v66 = v66 - v73 + v74;
LABEL_84:
      if (v66 <= 1)
        goto LABEL_87;
    }
    v85 = 0;
    while (1)
    {
      v86 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&a3->i8[v85]);
      v87 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&result->i8[v85]);
      v88 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v67)) & 0xFF00FF00FF00FFLL))), v64);
      v89 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v67) & 0xFF00FF00FF00FFLL))), v64);
      v90 = vcvt_hight_f32_f16(v87);
      v91 = vcvtq_f32_f16(*(float16x4_t *)v87.i8);
      *(int8x16_t *)&result->i8[v85] = vrev16q_s8((int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlsq_f32(v91, vmlsq_laneq_f32(v89, v89, vcvtq_f32_f16(*(float16x4_t *)v86.i8), 3), v91)), vmlsq_f32(v90, vmlsq_laneq_f32(v88, v88, vcvt_hight_f32_f16(v86), 3), v90)));
      a10 += v17;
      v66 -= 2;
      if (v66 < 2)
        break;
      LOWORD(v67) = *(_WORD *)a10;
      v85 += v19;
      if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
      {
        result = (float16x4_t *)((char *)result + v85);
        a3 = (float16x4_t *)((char *)a3 + v85);
        goto LABEL_84;
      }
    }
    result = (float16x4_t *)((char *)result + v19 + v85);
    a3 = (float16x4_t *)((char *)a3 + v19 + v85);
LABEL_87:
    for (j = a12 - v65 + v66; j; --j)
    {
      if (*a10)
      {
        v93 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v64);
        v94 = vcvtq_f32_f16((float16x4_t)vrev16_s8((int8x8_t)*result));
        *result = (float16x4_t)vrev16_s8((int8x8_t)vcvt_f16_f32(vmlsq_f32(v94, vmlsq_laneq_f32(v93, v93, vcvtq_f32_f16((float16x4_t)vrev16_s8((int8x8_t)*a3)), 3), v94)));
      }
      v95 = &a3[a14];
      a10 += a14;
      if ((unint64_t)v95 >= a8)
        v96 = -(uint64_t)a7;
      else
        v96 = 0;
      a3 = &v95[v96];
      result = (float16x4_t *)((char *)result + v20);
    }
    a10 += a11;
    result += a2;
    v97 = &a5[a4];
    if ((unint64_t)v97 >= a9)
      v98 = v18;
    else
      v98 = 0;
    v99 = &v97[v98];
    v100 = a8 + 8 * v98 + 8 * a4;
    a3 += a4;
    if (a9)
    {
      a3 = v99;
      a8 = v100;
      a5 = v99;
    }
    _VF = __OFSUB__(a13--, 1);
    if (!((a13 < 0) ^ _VF | (a13 == 0)))
      continue;
    return result;
  }
}

float16x4_t *composite_pixelmask<(CGCompositeOperation)4,_rgbaf16_t>(float16x4_t *result, uint64_t a2, int8x8_t *a3, uint64_t a4, int8x8_t *a5, int a6, int a7, unint64_t a8, unint64_t a9, char *a10, uint64_t a11, int a12, int a13, int a14, int a15, char a16)
{
  unsigned int v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x8_t v23;
  uint64_t v24;
  int8x8_t v25;
  int8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x16_t v30;
  float32x4_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  float16x8_t v42;
  float16x8_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int8x16_t *v48;
  int8x16_t *v49;
  int8x16_t *v50;
  int8x16_t *v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  float16x8_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float16x8_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  unint64_t i;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int8x8_t *v67;
  uint64_t v68;
  int8x8_t *v69;
  uint64_t v70;
  int8x8_t *v71;
  uint64_t v72;
  BOOL v73;
  int8x16_t v74;
  float32x4_t v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  int8x16_t *v79;
  int8x16_t *v80;
  int8x16_t *v81;
  int8x16_t *v82;
  uint64_t v83;
  int64_t v84;
  unint64_t v85;
  float16x8_t v86;
  float16x8_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  int8x16_t *v92;
  int8x16_t *v93;
  int8x16_t *v94;
  int8x16_t *v95;
  int64_t v96;
  int64_t v97;
  uint64_t v98;
  float16x8_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float16x8_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  unint64_t j;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int8x8_t *v111;
  uint64_t v112;
  int8x8_t *v113;
  uint64_t v114;
  int8x8_t *v115;
  uint64_t v116;

  if (a15)
    v18 = 0;
  else
    v18 = -1;
  v19 = (int8x16_t)vdupq_n_s16(v18);
  v20.i64[0] = 0xFFFF000000000000;
  v20.i64[1] = 0xFFFF000000000000;
  v21 = vmvnq_s8(vandq_s8(v19, v20));
  v22 = vandq_s8(v19, (int8x16_t)xmmword_185005140);
  v23.i32[0] = 0;
  v23.i16[2] = 0;
  v23.i16[3] = v18;
  v24 = 2 * a14;
  v25 = vmvn_s8(v23);
  v26 = vand_s8(*(int8x8_t *)v19.i8, (int8x8_t)0x3C00000000000000);
  v27 = -(a6 * a4);
  v28 = 16 * a14;
  v29 = 8 * a14;
  if ((a16 & 0x30) != 0)
  {
    v30.i64[0] = -1;
    v30.i64[1] = -1;
    v31 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    while (1)
    {
      v32 = (a8 - (unint64_t)a3) >> 3;
      if (v32 >= a12)
        v32 = a12;
      v33 = v32;
      if (v32 < 2)
        goto LABEL_40;
      while (1)
      {
        v34 = *(unsigned __int16 *)a10;
        if (!*(_WORD *)a10)
        {
          v48 = (int8x16_t *)&a10[v33];
          v49 = (int8x16_t *)a10;
          do
            v50 = v49++;
          while (v49 <= v48 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v50)) & 0x80) != 0);
          do
          {
            v51 = v50;
            v50 = (int8x16_t *)((char *)v50 + 4);
          }
          while (v50 <= v48 && !v51->i32[0]);
          if (v51 < v48)
          {
            while (!v51->i8[0])
            {
              v51 = (int8x16_t *)((char *)v51 + 1);
              if (v51 >= v48)
              {
                v51 = (int8x16_t *)&a10[v33];
                break;
              }
            }
          }
          v52 = (char *)v51 - a10;
          v53 = ((char *)v51 - a10) * a14;
          a3 += v53;
          result += v53;
          a10 += v53;
          v33 -= v52;
          goto LABEL_37;
        }
        if (v34 != 0xFFFF)
          break;
        v35 = (int8x16_t *)&a10[v33];
        v36 = (int8x16_t *)a10;
        do
          v37 = v36++;
        while (v36 <= v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, v30)) & 0x80) != 0);
        do
        {
          v38 = v37;
          v37 = (int8x16_t *)((char *)v37 + 4);
        }
        while (v37 <= v35 && v38->i32[0] == -1);
        if (v38 < v35)
        {
          while (v38->u8[0] == 255)
          {
            v38 = (int8x16_t *)((char *)v38 + 1);
            if (v38 >= v35)
            {
              v38 = (int8x16_t *)&a10[v33];
              break;
            }
          }
        }
        v39 = 0;
        v40 = (char *)v38 - a10;
        v41 = (char *)v38 - a10;
        do
        {
          v42 = *(float16x8_t *)&result->i8[v39];
          v43 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v39], v21), v22);
          v44 = vcvt_hight_f32_f16(v43);
          v45 = vcvtq_f32_f16(*(float16x4_t *)v43.i8);
          v46 = vcvt_hight_f32_f16(v42);
          v47 = vcvtq_f32_f16(*(float16x4_t *)v42.i8);
          *(float16x8_t *)&result->i8[v39] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vsubq_f32(v47, v47), vmlsq_laneq_f32(v45, v45, v47, 3))), vaddq_f32(vsubq_f32(v46, v46), vmlsq_laneq_f32(v44, v44, v46, 3)));
          a10 += v24;
          v41 -= 2;
          v39 += v28;
        }
        while (v41 > 1);
        a3 = (int8x8_t *)((char *)a3 + v39);
        result = (float16x4_t *)((char *)result + v39);
        v33 = v33 - v40 + v41;
LABEL_37:
        if (v33 <= 1)
          goto LABEL_40;
      }
      v54 = 0;
      while (1)
      {
        v55 = *(float16x8_t *)&result->i8[v54];
        v56 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v34)) & 0xFF00FF00FF00FFLL))), v31);
        v57 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v34) & 0xFF00FF00FF00FFLL))), v31);
        v58 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v54], v21), v22);
        v59 = vcvt_hight_f32_f16(v58);
        v60 = vcvtq_f32_f16(*(float16x4_t *)v58.i8);
        v61 = vcvt_hight_f32_f16(v55);
        v62 = vcvtq_f32_f16(*(float16x4_t *)v55.i8);
        *(float16x8_t *)&result->i8[v54] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlsq_f32(v62, v57, v62), v57, vmlsq_laneq_f32(v60, v60, v62, 3))), vmlaq_f32(vmlsq_f32(v61, v56, v61), v56, vmlsq_laneq_f32(v59, v59, v61, 3)));
        a10 += v24;
        v33 -= 2;
        if (v33 < 2)
          break;
        LOWORD(v34) = *(_WORD *)a10;
        v54 += v28;
        if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
        {
          result = (float16x4_t *)((char *)result + v54);
          a3 = (int8x8_t *)((char *)a3 + v54);
          goto LABEL_37;
        }
      }
      result = (float16x4_t *)((char *)result + v28 + v54);
      a3 = (int8x8_t *)((char *)a3 + v28 + v54);
LABEL_40:
      for (i = a12 - v32 + v33; i; --i)
      {
        if (*a10)
        {
          v64 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v31);
          v65 = vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(*a3, v25), v26));
          v66 = vcvtq_f32_f16(*result);
          *result = vcvt_f16_f32(vmlaq_f32(vmlsq_f32(v66, v64, v66), v64, vmlsq_laneq_f32(v65, v65, v66, 3)));
        }
        v67 = &a3[a14];
        a10 += a14;
        if ((unint64_t)v67 >= a8)
          v68 = -(uint64_t)a7;
        else
          v68 = 0;
        a3 = &v67[v68];
        result = (float16x4_t *)((char *)result + v29);
      }
      a10 += a11;
      result += a2;
      v69 = &a5[a4];
      if ((unint64_t)v69 >= a9)
        v70 = v27;
      else
        v70 = 0;
      v71 = &v69[v70];
      v72 = a8 + 8 * v70 + 8 * a4;
      a3 += a4;
      if (a9)
      {
        a3 = v71;
        a8 = v72;
        a5 = v71;
      }
      v73 = __OFSUB__(a13--, 1);
      if ((a13 < 0) ^ v73 | (a13 == 0))
        return result;
    }
  }
  v74.i64[0] = -1;
  v74.i64[1] = -1;
  v75 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  while (2)
  {
    v76 = (a8 - (unint64_t)a3) >> 3;
    if (v76 >= a12)
      v76 = a12;
    v77 = v76;
    if (v76 < 2)
      goto LABEL_90;
    while (1)
    {
      v78 = *(unsigned __int16 *)a10;
      if (!*(_WORD *)a10)
      {
        v92 = (int8x16_t *)&a10[v77];
        v93 = (int8x16_t *)a10;
        do
          v94 = v93++;
        while (v93 <= v92 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v94)) & 0x80) != 0);
        do
        {
          v95 = v94;
          v94 = (int8x16_t *)((char *)v94 + 4);
        }
        while (v94 <= v92 && !v95->i32[0]);
        if (v95 < v92)
        {
          while (!v95->i8[0])
          {
            v95 = (int8x16_t *)((char *)v95 + 1);
            if (v95 >= v92)
            {
              v95 = (int8x16_t *)&a10[v77];
              break;
            }
          }
        }
        v96 = (char *)v95 - a10;
        v97 = ((char *)v95 - a10) * a14;
        a3 += v97;
        result += v97;
        a10 += v97;
        v77 -= v96;
        goto LABEL_87;
      }
      if (v78 != 0xFFFF)
        break;
      v79 = (int8x16_t *)&a10[v77];
      v80 = (int8x16_t *)a10;
      do
        v81 = v80++;
      while (v80 <= v79 && (vminvq_u8((uint8x16_t)vceqq_s8(*v81, v74)) & 0x80) != 0);
      do
      {
        v82 = v81;
        v81 = (int8x16_t *)((char *)v81 + 4);
      }
      while (v81 <= v79 && v82->i32[0] == -1);
      if (v82 < v79)
      {
        while (v82->u8[0] == 255)
        {
          v82 = (int8x16_t *)((char *)v82 + 1);
          if (v82 >= v79)
          {
            v82 = (int8x16_t *)&a10[v77];
            break;
          }
        }
      }
      v83 = 0;
      v84 = (char *)v82 - a10;
      v85 = (char *)v82 - a10;
      do
      {
        v86 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&result->i8[v83]);
        v87 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v83]), v21), v22);
        v88 = vcvt_hight_f32_f16(v87);
        v89 = vcvtq_f32_f16(*(float16x4_t *)v87.i8);
        v90 = vcvt_hight_f32_f16(v86);
        v91 = vcvtq_f32_f16(*(float16x4_t *)v86.i8);
        *(int8x16_t *)&result->i8[v83] = vrev16q_s8((int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vsubq_f32(v91, v91), vmlsq_laneq_f32(v89, v89, v91, 3))), vaddq_f32(vsubq_f32(v90, v90), vmlsq_laneq_f32(v88, v88, v90, 3))));
        a10 += v24;
        v85 -= 2;
        v83 += v28;
      }
      while (v85 > 1);
      a3 = (int8x8_t *)((char *)a3 + v83);
      result = (float16x4_t *)((char *)result + v83);
      v77 = v77 - v84 + v85;
LABEL_87:
      if (v77 <= 1)
        goto LABEL_90;
    }
    v98 = 0;
    while (1)
    {
      v99 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&result->i8[v98]);
      v100 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v78)) & 0xFF00FF00FF00FFLL))), v75);
      v101 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v78) & 0xFF00FF00FF00FFLL))), v75);
      v102 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v98]), v21), v22);
      v103 = vcvt_hight_f32_f16(v102);
      v104 = vcvtq_f32_f16(*(float16x4_t *)v102.i8);
      v105 = vcvt_hight_f32_f16(v99);
      v106 = vcvtq_f32_f16(*(float16x4_t *)v99.i8);
      *(int8x16_t *)&result->i8[v98] = vrev16q_s8((int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlsq_f32(v106, v101, v106), v101, vmlsq_laneq_f32(v104, v104, v106, 3))), vmlaq_f32(vmlsq_f32(v105, v100, v105), v100, vmlsq_laneq_f32(v103, v103, v105, 3))));
      a10 += v24;
      v77 -= 2;
      if (v77 < 2)
        break;
      LOWORD(v78) = *(_WORD *)a10;
      v98 += v28;
      if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
      {
        result = (float16x4_t *)((char *)result + v98);
        a3 = (int8x8_t *)((char *)a3 + v98);
        goto LABEL_87;
      }
    }
    result = (float16x4_t *)((char *)result + v28 + v98);
    a3 = (int8x8_t *)((char *)a3 + v28 + v98);
LABEL_90:
    for (j = a12 - v76 + v77; j; --j)
    {
      if (*a10)
      {
        v108 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v75);
        v109 = vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(vrev16_s8(*a3), v25), v26));
        v110 = vcvtq_f32_f16((float16x4_t)vrev16_s8((int8x8_t)*result));
        *result = (float16x4_t)vrev16_s8((int8x8_t)vcvt_f16_f32(vmlaq_f32(vmlsq_f32(v110, v108, v110), v108, vmlsq_laneq_f32(v109, v109, v110, 3))));
      }
      v111 = &a3[a14];
      a10 += a14;
      if ((unint64_t)v111 >= a8)
        v112 = -(uint64_t)a7;
      else
        v112 = 0;
      a3 = &v111[v112];
      result = (float16x4_t *)((char *)result + v29);
    }
    a10 += a11;
    result += a2;
    v113 = &a5[a4];
    if ((unint64_t)v113 >= a9)
      v114 = v27;
    else
      v114 = 0;
    v115 = &v113[v114];
    v116 = a8 + 8 * v114 + 8 * a4;
    a3 += a4;
    if (a9)
    {
      a3 = v115;
      a8 = v116;
      a5 = v115;
    }
    v73 = __OFSUB__(a13--, 1);
    if (!((a13 < 0) ^ v73 | (a13 == 0)))
      continue;
    return result;
  }
}

float16x4_t *composite_pixelmask<(CGCompositeOperation)8,_rgbaf16_t>(float16x4_t *result, uint64_t a2, float16x4_t *a3, uint64_t a4, float16x4_t *a5, int a6, int a7, unint64_t a8, unint64_t a9, char *a10, uint64_t a11, int a12, int a13, int a14, char a15)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  float16x8_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int8x16_t *v37;
  int8x16_t *v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int64_t v41;
  int64_t v42;
  uint64_t v43;
  float16x8_t v44;
  float32x4_t v45;
  float32x4_t v46;
  unint64_t i;
  float32x4_t v48;
  float16x4_t *v49;
  uint64_t v50;
  float16x4_t *v51;
  uint64_t v52;
  float16x4_t *v53;
  uint64_t v54;
  BOOL v55;
  int8x16_t v56;
  float32x4_t v57;
  float32x4_t v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  int8x16_t *v62;
  int8x16_t *v63;
  int8x16_t *v64;
  int8x16_t *v65;
  uint64_t v66;
  int64_t v67;
  unint64_t v68;
  float16x8_t v69;
  float16x8_t v70;
  float32x4_t v71;
  float32x4_t v72;
  int8x16_t *v73;
  int8x16_t *v74;
  int8x16_t *v75;
  int8x16_t *v76;
  int64_t v77;
  int64_t v78;
  uint64_t v79;
  float16x8_t v80;
  float16x8_t v81;
  float32x4_t v82;
  float32x4_t v83;
  unint64_t j;
  float32x4_t v85;
  float16x4_t *v86;
  uint64_t v87;
  float16x4_t *v88;
  uint64_t v89;
  float16x4_t *v90;
  uint64_t v91;

  v17 = 2 * a14;
  v18 = -(a6 * a4);
  v19 = 16 * a14;
  v20 = 8 * a14;
  if ((a15 & 0x30) != 0)
  {
    v21.i64[0] = -1;
    v21.i64[1] = -1;
    v22 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v23 = (float32x4_t)vdupq_n_s32(0xBB808081);
    while (1)
    {
      v24 = (a8 - (unint64_t)a3) >> 3;
      if (v24 >= a12)
        v24 = a12;
      v25 = v24;
      if (v24 < 2)
        goto LABEL_37;
      while (1)
      {
        v26 = *(unsigned __int16 *)a10;
        if (!*(_WORD *)a10)
        {
          v37 = (int8x16_t *)&a10[v25];
          v38 = (int8x16_t *)a10;
          do
            v39 = v38++;
          while (v38 <= v37 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v39)) & 0x80) != 0);
          do
          {
            v40 = v39;
            v39 = (int8x16_t *)((char *)v39 + 4);
          }
          while (v39 <= v37 && !v40->i32[0]);
          if (v40 < v37)
          {
            while (!v40->i8[0])
            {
              v40 = (int8x16_t *)((char *)v40 + 1);
              if (v40 >= v37)
              {
                v40 = (int8x16_t *)&a10[v25];
                break;
              }
            }
          }
          v41 = (char *)v40 - a10;
          v42 = ((char *)v40 - a10) * a14;
          a3 += v42;
          result += v42;
          a10 += v42;
          v25 -= v41;
          goto LABEL_34;
        }
        if (v26 != 0xFFFF)
          break;
        v27 = (int8x16_t *)&a10[v25];
        v28 = (int8x16_t *)a10;
        do
          v29 = v28++;
        while (v28 <= v27 && (vminvq_u8((uint8x16_t)vceqq_s8(*v29, v21)) & 0x80) != 0);
        do
        {
          v30 = v29;
          v29 = (int8x16_t *)((char *)v29 + 4);
        }
        while (v29 <= v27 && v30->i32[0] == -1);
        if (v30 < v27)
        {
          while (v30->u8[0] == 255)
          {
            v30 = (int8x16_t *)((char *)v30 + 1);
            if (v30 >= v27)
            {
              v30 = (int8x16_t *)&a10[v25];
              break;
            }
          }
        }
        v31 = 0;
        v32 = (char *)v30 - a10;
        v33 = (char *)v30 - a10;
        do
        {
          v34 = *(float16x8_t *)&result->i8[v31];
          v35 = vcvt_hight_f32_f16(v34);
          v36 = vcvtq_f32_f16(*(float16x4_t *)v34.i8);
          *(float16x8_t *)&result->i8[v31] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlsq_laneq_f32(v36, v36, vcvtq_f32_f16(*(float16x4_t *)((char *)a3 + v31)), 3)), vmlsq_laneq_f32(v35, v35, vcvt_hight_f32_f16(*(float16x8_t *)&a3->i8[v31]), 3));
          a10 += v17;
          v33 -= 2;
          v31 += v19;
        }
        while (v33 > 1);
        a3 = (float16x4_t *)((char *)a3 + v31);
        result = (float16x4_t *)((char *)result + v31);
        v25 = v25 - v32 + v33;
LABEL_34:
        if (v25 <= 1)
          goto LABEL_37;
      }
      v43 = 0;
      while (1)
      {
        v44 = *(float16x8_t *)&result->i8[v43];
        v45 = vcvt_hight_f32_f16(v44);
        v46 = vcvtq_f32_f16(*(float16x4_t *)v44.i8);
        *(float16x8_t *)&result->i8[v43] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlsq_f32(v46, vmulq_laneq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v26) & 0xFF00FF00FF00FFLL))), v22), vcvtq_f32_f16(*(float16x4_t *)((char *)a3 + v43)), 3), v46)), vmlsq_f32(v45, vmulq_laneq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v26)) & 0xFF00FF00FF00FFLL))), v22), vcvt_hight_f32_f16(*(float16x8_t *)&a3->i8[v43]), 3), v45));
        a10 += v17;
        v25 -= 2;
        if (v25 < 2)
          break;
        LOWORD(v26) = *(_WORD *)a10;
        v43 += v19;
        if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
        {
          result = (float16x4_t *)((char *)result + v43);
          a3 = (float16x4_t *)((char *)a3 + v43);
          goto LABEL_34;
        }
      }
      result = (float16x4_t *)((char *)result + v19 + v43);
      a3 = (float16x4_t *)((char *)a3 + v19 + v43);
LABEL_37:
      for (i = a12 - v24 + v25; i; --i)
      {
        if (*a10)
        {
          v48 = vcvtq_f32_f16(*result);
          *result = vcvt_f16_f32(vmlaq_f32(v48, vmulq_laneq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v23), vcvtq_f32_f16(*a3), 3), v48));
        }
        v49 = &a3[a14];
        a10 += a14;
        if ((unint64_t)v49 >= a8)
          v50 = -(uint64_t)a7;
        else
          v50 = 0;
        a3 = &v49[v50];
        result = (float16x4_t *)((char *)result + v20);
      }
      a10 += a11;
      result += a2;
      v51 = &a5[a4];
      if ((unint64_t)v51 >= a9)
        v52 = v18;
      else
        v52 = 0;
      v53 = &v51[v52];
      v54 = a8 + 8 * v52 + 8 * a4;
      a3 += a4;
      if (a9)
      {
        a3 = v53;
        a8 = v54;
        a5 = v53;
      }
      v55 = __OFSUB__(a13--, 1);
      if ((a13 < 0) ^ v55 | (a13 == 0))
        return result;
    }
  }
  v56.i64[0] = -1;
  v56.i64[1] = -1;
  v57 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v58 = (float32x4_t)vdupq_n_s32(0xBB808081);
  while (2)
  {
    v59 = (a8 - (unint64_t)a3) >> 3;
    if (v59 >= a12)
      v59 = a12;
    v60 = v59;
    if (v59 < 2)
      goto LABEL_87;
    while (1)
    {
      v61 = *(unsigned __int16 *)a10;
      if (!*(_WORD *)a10)
      {
        v73 = (int8x16_t *)&a10[v60];
        v74 = (int8x16_t *)a10;
        do
          v75 = v74++;
        while (v74 <= v73 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v75)) & 0x80) != 0);
        do
        {
          v76 = v75;
          v75 = (int8x16_t *)((char *)v75 + 4);
        }
        while (v75 <= v73 && !v76->i32[0]);
        if (v76 < v73)
        {
          while (!v76->i8[0])
          {
            v76 = (int8x16_t *)((char *)v76 + 1);
            if (v76 >= v73)
            {
              v76 = (int8x16_t *)&a10[v60];
              break;
            }
          }
        }
        v77 = (char *)v76 - a10;
        v78 = ((char *)v76 - a10) * a14;
        a3 += v78;
        result += v78;
        a10 += v78;
        v60 -= v77;
        goto LABEL_84;
      }
      if (v61 != 0xFFFF)
        break;
      v62 = (int8x16_t *)&a10[v60];
      v63 = (int8x16_t *)a10;
      do
        v64 = v63++;
      while (v63 <= v62 && (vminvq_u8((uint8x16_t)vceqq_s8(*v64, v56)) & 0x80) != 0);
      do
      {
        v65 = v64;
        v64 = (int8x16_t *)((char *)v64 + 4);
      }
      while (v64 <= v62 && v65->i32[0] == -1);
      if (v65 < v62)
      {
        while (v65->u8[0] == 255)
        {
          v65 = (int8x16_t *)((char *)v65 + 1);
          if (v65 >= v62)
          {
            v65 = (int8x16_t *)&a10[v60];
            break;
          }
        }
      }
      v66 = 0;
      v67 = (char *)v65 - a10;
      v68 = (char *)v65 - a10;
      do
      {
        v69 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&a3->i8[v66]);
        v70 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&result->i8[v66]);
        v71 = vcvt_hight_f32_f16(v70);
        v72 = vcvtq_f32_f16(*(float16x4_t *)v70.i8);
        *(int8x16_t *)&result->i8[v66] = vrev16q_s8((int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlsq_laneq_f32(v72, v72, vcvtq_f32_f16(*(float16x4_t *)v69.i8), 3)), vmlsq_laneq_f32(v71, v71, vcvt_hight_f32_f16(v69), 3)));
        a10 += v17;
        v68 -= 2;
        v66 += v19;
      }
      while (v68 > 1);
      a3 = (float16x4_t *)((char *)a3 + v66);
      result = (float16x4_t *)((char *)result + v66);
      v60 = v60 - v67 + v68;
LABEL_84:
      if (v60 <= 1)
        goto LABEL_87;
    }
    v79 = 0;
    while (1)
    {
      v80 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&a3->i8[v79]);
      v81 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&result->i8[v79]);
      v82 = vcvt_hight_f32_f16(v81);
      v83 = vcvtq_f32_f16(*(float16x4_t *)v81.i8);
      *(int8x16_t *)&result->i8[v79] = vrev16q_s8((int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlsq_f32(v83, vmulq_laneq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v61) & 0xFF00FF00FF00FFLL))), v57), vcvtq_f32_f16(*(float16x4_t *)v80.i8), 3), v83)), vmlsq_f32(v82, vmulq_laneq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v61)) & 0xFF00FF00FF00FFLL))), v57), vcvt_hight_f32_f16(v80), 3), v82)));
      a10 += v17;
      v60 -= 2;
      if (v60 < 2)
        break;
      LOWORD(v61) = *(_WORD *)a10;
      v79 += v19;
      if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
      {
        result = (float16x4_t *)((char *)result + v79);
        a3 = (float16x4_t *)((char *)a3 + v79);
        goto LABEL_84;
      }
    }
    result = (float16x4_t *)((char *)result + v19 + v79);
    a3 = (float16x4_t *)((char *)a3 + v19 + v79);
LABEL_87:
    for (j = a12 - v59 + v60; j; --j)
    {
      if (*a10)
      {
        v85 = vcvtq_f32_f16((float16x4_t)vrev16_s8((int8x8_t)*result));
        *result = (float16x4_t)vrev16_s8((int8x8_t)vcvt_f16_f32(vmlaq_f32(v85, vmulq_laneq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v58), vcvtq_f32_f16((float16x4_t)vrev16_s8((int8x8_t)*a3)), 3), v85)));
      }
      v86 = &a3[a14];
      a10 += a14;
      if ((unint64_t)v86 >= a8)
        v87 = -(uint64_t)a7;
      else
        v87 = 0;
      a3 = &v86[v87];
      result = (float16x4_t *)((char *)result + v20);
    }
    a10 += a11;
    result += a2;
    v88 = &a5[a4];
    if ((unint64_t)v88 >= a9)
      v89 = v18;
    else
      v89 = 0;
    v90 = &v88[v89];
    v91 = a8 + 8 * v89 + 8 * a4;
    a3 += a4;
    if (a9)
    {
      a3 = v90;
      a8 = v91;
      a5 = v90;
    }
    v55 = __OFSUB__(a13--, 1);
    if (!((a13 < 0) ^ v55 | (a13 == 0)))
      continue;
    return result;
  }
}

float16x4_t *composite_pixelmask<(CGCompositeOperation)5,_rgbaf16_t>(float16x4_t *result, uint64_t a2, float16x4_t *a3, uint64_t a4, float16x4_t *a5, int a6, int a7, unint64_t a8, unint64_t a9, char *a10, uint64_t a11, int a12, int a13, int a14, char a15)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t v21;
  float32x4_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  int8x16_t *v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  float16x8_t v33;
  float16x8_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int8x16_t *v42;
  int64_t v43;
  int64_t v44;
  uint64_t v45;
  float16x8_t v46;
  float16x8_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  unint64_t i;
  float32x4_t v54;
  float32x4_t v55;
  float16x4_t *v56;
  uint64_t v57;
  float16x4_t *v58;
  uint64_t v59;
  float16x4_t *v60;
  uint64_t v61;
  BOOL v62;
  int8x16_t v63;
  float32x4_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  int8x16_t *v68;
  int8x16_t *v69;
  int8x16_t *v70;
  int8x16_t *v71;
  uint64_t v72;
  int64_t v73;
  unint64_t v74;
  float16x8_t v75;
  float16x8_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int8x16_t *v81;
  int8x16_t *v82;
  int8x16_t *v83;
  int8x16_t *v84;
  int64_t v85;
  int64_t v86;
  uint64_t v87;
  float16x8_t v88;
  float16x8_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  unint64_t j;
  float32x4_t v96;
  float32x4_t v97;
  float16x4_t *v98;
  uint64_t v99;
  float16x4_t *v100;
  uint64_t v101;
  float16x4_t *v102;
  uint64_t v103;

  v17 = 2 * a14;
  v18 = -(a6 * a4);
  v19 = 16 * a14;
  v20 = 8 * a14;
  if ((a15 & 0x30) != 0)
  {
    v21.i64[0] = -1;
    v21.i64[1] = -1;
    v22 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    while (1)
    {
      v23 = (a8 - (unint64_t)a3) >> 3;
      if (v23 >= a12)
        v23 = a12;
      v24 = v23;
      if (v23 < 2)
        goto LABEL_37;
      while (1)
      {
        v25 = *(unsigned __int16 *)a10;
        if (!*(_WORD *)a10)
        {
          v39 = (int8x16_t *)&a10[v24];
          v40 = (int8x16_t *)a10;
          do
            v41 = v40++;
          while (v40 <= v39 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v41)) & 0x80) != 0);
          do
          {
            v42 = v41;
            v41 = (int8x16_t *)((char *)v41 + 4);
          }
          while (v41 <= v39 && !v42->i32[0]);
          if (v42 < v39)
          {
            while (!v42->i8[0])
            {
              v42 = (int8x16_t *)((char *)v42 + 1);
              if (v42 >= v39)
              {
                v42 = (int8x16_t *)&a10[v24];
                break;
              }
            }
          }
          v43 = (char *)v42 - a10;
          v44 = ((char *)v42 - a10) * a14;
          a3 += v44;
          result += v44;
          a10 += v44;
          v24 -= v43;
          goto LABEL_34;
        }
        if (v25 != 0xFFFF)
          break;
        v26 = (int8x16_t *)&a10[v24];
        v27 = (int8x16_t *)a10;
        do
          v28 = v27++;
        while (v27 <= v26 && (vminvq_u8((uint8x16_t)vceqq_s8(*v28, v21)) & 0x80) != 0);
        do
        {
          v29 = v28;
          v28 = (int8x16_t *)((char *)v28 + 4);
        }
        while (v28 <= v26 && v29->i32[0] == -1);
        if (v29 < v26)
        {
          while (v29->u8[0] == 255)
          {
            v29 = (int8x16_t *)((char *)v29 + 1);
            if (v29 >= v26)
            {
              v29 = (int8x16_t *)&a10[v24];
              break;
            }
          }
        }
        v30 = 0;
        v31 = (char *)v29 - a10;
        v32 = (char *)v29 - a10;
        do
        {
          v33 = *(float16x8_t *)&a3->i8[v30];
          v34 = *(float16x8_t *)&result->i8[v30];
          v35 = vcvt_hight_f32_f16(v33);
          v36 = vcvtq_f32_f16(*(float16x4_t *)v33.i8);
          v37 = vcvt_hight_f32_f16(v34);
          v38 = vcvtq_f32_f16(*(float16x4_t *)v34.i8);
          *(float16x8_t *)&result->i8[v30] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_laneq_f32(vmlsq_laneq_f32(v38, v38, v36, 3), v36, v38, 3)), vmlaq_laneq_f32(vmlsq_laneq_f32(v37, v37, v35, 3), v35, v37, 3));
          a10 += v17;
          v32 -= 2;
          v30 += v19;
        }
        while (v32 > 1);
        a3 = (float16x4_t *)((char *)a3 + v30);
        result = (float16x4_t *)((char *)result + v30);
        v24 = v24 - v31 + v32;
LABEL_34:
        if (v24 <= 1)
          goto LABEL_37;
      }
      v45 = 0;
      while (1)
      {
        v46 = *(float16x8_t *)&a3->i8[v45];
        v47 = *(float16x8_t *)&result->i8[v45];
        v48 = vcvtq_f32_f16(*(float16x4_t *)v46.i8);
        v49 = vcvt_hight_f32_f16(v47);
        v50 = vcvtq_f32_f16(*(float16x4_t *)v47.i8);
        v51 = vmulq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v25)) & 0xFF00FF00FF00FFLL))), v22), vcvt_hight_f32_f16(v46));
        v52 = vmulq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v25) & 0xFF00FF00FF00FFLL))), v22), v48);
        *(float16x8_t *)&result->i8[v45] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_laneq_f32(vmlsq_laneq_f32(v50, v50, v52, 3), v52, v50, 3)), vmlaq_laneq_f32(vmlsq_laneq_f32(v49, v49, v51, 3), v51, v49, 3));
        a10 += v17;
        v24 -= 2;
        if (v24 < 2)
          break;
        LOWORD(v25) = *(_WORD *)a10;
        v45 += v19;
        if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
        {
          result = (float16x4_t *)((char *)result + v45);
          a3 = (float16x4_t *)((char *)a3 + v45);
          goto LABEL_34;
        }
      }
      result = (float16x4_t *)((char *)result + v19 + v45);
      a3 = (float16x4_t *)((char *)a3 + v19 + v45);
LABEL_37:
      for (i = a12 - v23 + v24; i; --i)
      {
        if (*a10)
        {
          v54 = vcvtq_f32_f16(*result);
          v55 = vmulq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v22), vcvtq_f32_f16(*a3));
          *result = vcvt_f16_f32(vmlaq_laneq_f32(vmlsq_laneq_f32(v54, v54, v55, 3), v55, v54, 3));
        }
        v56 = &a3[a14];
        a10 += a14;
        if ((unint64_t)v56 >= a8)
          v57 = -(uint64_t)a7;
        else
          v57 = 0;
        a3 = &v56[v57];
        result = (float16x4_t *)((char *)result + v20);
      }
      a10 += a11;
      result += a2;
      v58 = &a5[a4];
      if ((unint64_t)v58 >= a9)
        v59 = v18;
      else
        v59 = 0;
      v60 = &v58[v59];
      v61 = a8 + 8 * v59 + 8 * a4;
      a3 += a4;
      if (a9)
      {
        a3 = v60;
        a8 = v61;
        a5 = v60;
      }
      v62 = __OFSUB__(a13--, 1);
      if ((a13 < 0) ^ v62 | (a13 == 0))
        return result;
    }
  }
  v63.i64[0] = -1;
  v63.i64[1] = -1;
  v64 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  while (2)
  {
    v65 = (a8 - (unint64_t)a3) >> 3;
    if (v65 >= a12)
      v65 = a12;
    v66 = v65;
    if (v65 < 2)
      goto LABEL_87;
    while (1)
    {
      v67 = *(unsigned __int16 *)a10;
      if (!*(_WORD *)a10)
      {
        v81 = (int8x16_t *)&a10[v66];
        v82 = (int8x16_t *)a10;
        do
          v83 = v82++;
        while (v82 <= v81 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v83)) & 0x80) != 0);
        do
        {
          v84 = v83;
          v83 = (int8x16_t *)((char *)v83 + 4);
        }
        while (v83 <= v81 && !v84->i32[0]);
        if (v84 < v81)
        {
          while (!v84->i8[0])
          {
            v84 = (int8x16_t *)((char *)v84 + 1);
            if (v84 >= v81)
            {
              v84 = (int8x16_t *)&a10[v66];
              break;
            }
          }
        }
        v85 = (char *)v84 - a10;
        v86 = ((char *)v84 - a10) * a14;
        a3 += v86;
        result += v86;
        a10 += v86;
        v66 -= v85;
        goto LABEL_84;
      }
      if (v67 != 0xFFFF)
        break;
      v68 = (int8x16_t *)&a10[v66];
      v69 = (int8x16_t *)a10;
      do
        v70 = v69++;
      while (v69 <= v68 && (vminvq_u8((uint8x16_t)vceqq_s8(*v70, v63)) & 0x80) != 0);
      do
      {
        v71 = v70;
        v70 = (int8x16_t *)((char *)v70 + 4);
      }
      while (v70 <= v68 && v71->i32[0] == -1);
      if (v71 < v68)
      {
        while (v71->u8[0] == 255)
        {
          v71 = (int8x16_t *)((char *)v71 + 1);
          if (v71 >= v68)
          {
            v71 = (int8x16_t *)&a10[v66];
            break;
          }
        }
      }
      v72 = 0;
      v73 = (char *)v71 - a10;
      v74 = (char *)v71 - a10;
      do
      {
        v75 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&a3->i8[v72]);
        v76 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&result->i8[v72]);
        v77 = vcvt_hight_f32_f16(v75);
        v78 = vcvtq_f32_f16(*(float16x4_t *)v75.i8);
        v79 = vcvt_hight_f32_f16(v76);
        v80 = vcvtq_f32_f16(*(float16x4_t *)v76.i8);
        *(int8x16_t *)&result->i8[v72] = vrev16q_s8((int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_laneq_f32(vmlsq_laneq_f32(v80, v80, v78, 3), v78, v80, 3)), vmlaq_laneq_f32(vmlsq_laneq_f32(v79, v79, v77, 3), v77, v79, 3)));
        a10 += v17;
        v74 -= 2;
        v72 += v19;
      }
      while (v74 > 1);
      a3 = (float16x4_t *)((char *)a3 + v72);
      result = (float16x4_t *)((char *)result + v72);
      v66 = v66 - v73 + v74;
LABEL_84:
      if (v66 <= 1)
        goto LABEL_87;
    }
    v87 = 0;
    while (1)
    {
      v88 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&a3->i8[v87]);
      v89 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&result->i8[v87]);
      v90 = vcvtq_f32_f16(*(float16x4_t *)v88.i8);
      v91 = vcvt_hight_f32_f16(v89);
      v92 = vcvtq_f32_f16(*(float16x4_t *)v89.i8);
      v93 = vmulq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v67)) & 0xFF00FF00FF00FFLL))), v64), vcvt_hight_f32_f16(v88));
      v94 = vmulq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v67) & 0xFF00FF00FF00FFLL))), v64), v90);
      *(int8x16_t *)&result->i8[v87] = vrev16q_s8((int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_laneq_f32(vmlsq_laneq_f32(v92, v92, v94, 3), v94, v92, 3)), vmlaq_laneq_f32(vmlsq_laneq_f32(v91, v91, v93, 3), v93, v91, 3)));
      a10 += v17;
      v66 -= 2;
      if (v66 < 2)
        break;
      LOWORD(v67) = *(_WORD *)a10;
      v87 += v19;
      if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
      {
        result = (float16x4_t *)((char *)result + v87);
        a3 = (float16x4_t *)((char *)a3 + v87);
        goto LABEL_84;
      }
    }
    result = (float16x4_t *)((char *)result + v19 + v87);
    a3 = (float16x4_t *)((char *)a3 + v19 + v87);
LABEL_87:
    for (j = a12 - v65 + v66; j; --j)
    {
      if (*a10)
      {
        v96 = vcvtq_f32_f16((float16x4_t)vrev16_s8((int8x8_t)*result));
        v97 = vmulq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v64), vcvtq_f32_f16((float16x4_t)vrev16_s8((int8x8_t)*a3)));
        *result = (float16x4_t)vrev16_s8((int8x8_t)vcvt_f16_f32(vmlaq_laneq_f32(vmlsq_laneq_f32(v96, v96, v97, 3), v97, v96, 3)));
      }
      v98 = &a3[a14];
      a10 += a14;
      if ((unint64_t)v98 >= a8)
        v99 = -(uint64_t)a7;
      else
        v99 = 0;
      a3 = &v98[v99];
      result = (float16x4_t *)((char *)result + v20);
    }
    a10 += a11;
    result += a2;
    v100 = &a5[a4];
    if ((unint64_t)v100 >= a9)
      v101 = v18;
    else
      v101 = 0;
    v102 = &v100[v101];
    v103 = a8 + 8 * v101 + 8 * a4;
    a3 += a4;
    if (a9)
    {
      a3 = v102;
      a8 = v103;
      a5 = v102;
    }
    v62 = __OFSUB__(a13--, 1);
    if (!((a13 < 0) ^ v62 | (a13 == 0)))
      continue;
    return result;
  }
}

float16x4_t *composite_pixelmask<(CGCompositeOperation)9,_rgbaf16_t>(float16x4_t *result, uint64_t a2, float16x4_t *a3, uint64_t a4, float16x4_t *a5, int a6, int a7, unint64_t a8, unint64_t a9, char *a10, uint64_t a11, int a12, int a13, int a14, char a15)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t v21;
  float32x4_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  int8x16_t *v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  float16x8_t v33;
  float16x8_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int8x16_t *v42;
  int64_t v43;
  int64_t v44;
  uint64_t v45;
  float16x8_t v46;
  float16x8_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  unint64_t i;
  float32x4_t v53;
  float32x4_t v54;
  float16x4_t *v55;
  uint64_t v56;
  float16x4_t *v57;
  uint64_t v58;
  float16x4_t *v59;
  uint64_t v60;
  BOOL v61;
  int8x16_t v62;
  float32x4_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  int8x16_t *v67;
  int8x16_t *v68;
  int8x16_t *v69;
  int8x16_t *v70;
  uint64_t v71;
  int64_t v72;
  unint64_t v73;
  float16x8_t v74;
  float16x8_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int8x16_t *v80;
  int8x16_t *v81;
  int8x16_t *v82;
  int8x16_t *v83;
  int64_t v84;
  int64_t v85;
  uint64_t v86;
  float16x8_t v87;
  float16x8_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  unint64_t j;
  float32x4_t v94;
  float32x4_t v95;
  float16x4_t *v96;
  uint64_t v97;
  float16x4_t *v98;
  uint64_t v99;
  float16x4_t *v100;
  uint64_t v101;

  v17 = 2 * a14;
  v18 = -(a6 * a4);
  v19 = 16 * a14;
  v20 = 8 * a14;
  if ((a15 & 0x30) != 0)
  {
    v21.i64[0] = -1;
    v21.i64[1] = -1;
    v22 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    while (1)
    {
      v23 = (a8 - (unint64_t)a3) >> 3;
      if (v23 >= a12)
        v23 = a12;
      v24 = v23;
      if (v23 < 2)
        goto LABEL_37;
      while (1)
      {
        v25 = *(unsigned __int16 *)a10;
        if (!*(_WORD *)a10)
        {
          v39 = (int8x16_t *)&a10[v24];
          v40 = (int8x16_t *)a10;
          do
            v41 = v40++;
          while (v40 <= v39 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v41)) & 0x80) != 0);
          do
          {
            v42 = v41;
            v41 = (int8x16_t *)((char *)v41 + 4);
          }
          while (v41 <= v39 && !v42->i32[0]);
          if (v42 < v39)
          {
            while (!v42->i8[0])
            {
              v42 = (int8x16_t *)((char *)v42 + 1);
              if (v42 >= v39)
              {
                v42 = (int8x16_t *)&a10[v24];
                break;
              }
            }
          }
          v43 = (char *)v42 - a10;
          v44 = ((char *)v42 - a10) * a14;
          a3 += v44;
          result += v44;
          a10 += v44;
          v24 -= v43;
          goto LABEL_34;
        }
        if (v25 != 0xFFFF)
          break;
        v26 = (int8x16_t *)&a10[v24];
        v27 = (int8x16_t *)a10;
        do
          v28 = v27++;
        while (v27 <= v26 && (vminvq_u8((uint8x16_t)vceqq_s8(*v28, v21)) & 0x80) != 0);
        do
        {
          v29 = v28;
          v28 = (int8x16_t *)((char *)v28 + 4);
        }
        while (v28 <= v26 && v29->i32[0] == -1);
        if (v29 < v26)
        {
          while (v29->u8[0] == 255)
          {
            v29 = (int8x16_t *)((char *)v29 + 1);
            if (v29 >= v26)
            {
              v29 = (int8x16_t *)&a10[v24];
              break;
            }
          }
        }
        v30 = 0;
        v31 = (char *)v29 - a10;
        v32 = (char *)v29 - a10;
        do
        {
          v33 = *(float16x8_t *)&a3->i8[v30];
          v34 = *(float16x8_t *)&result->i8[v30];
          v35 = vcvt_hight_f32_f16(v33);
          v36 = vcvtq_f32_f16(*(float16x4_t *)v33.i8);
          v37 = vcvt_hight_f32_f16(v34);
          v38 = vcvtq_f32_f16(*(float16x4_t *)v34.i8);
          *(float16x8_t *)&result->i8[v30] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vsubq_f32(vmlsq_laneq_f32(v36, v36, v38, 3), vmlsq_laneq_f32(v38, v38, v36, 3)), v38)), vaddq_f32(vsubq_f32(vmlsq_laneq_f32(v35, v35, v37, 3), vmlsq_laneq_f32(v37, v37, v35, 3)), v37));
          a10 += v17;
          v32 -= 2;
          v30 += v19;
        }
        while (v32 > 1);
        a3 = (float16x4_t *)((char *)a3 + v30);
        result = (float16x4_t *)((char *)result + v30);
        v24 = v24 - v31 + v32;
LABEL_34:
        if (v24 <= 1)
          goto LABEL_37;
      }
      v45 = 0;
      while (1)
      {
        v46 = *(float16x8_t *)&a3->i8[v45];
        v47 = *(float16x8_t *)&result->i8[v45];
        v48 = vcvt_hight_f32_f16(v46);
        v49 = vcvtq_f32_f16(*(float16x4_t *)v46.i8);
        v50 = vcvt_hight_f32_f16(v47);
        v51 = vcvtq_f32_f16(*(float16x4_t *)v47.i8);
        *(float16x8_t *)&result->i8[v45] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(v51, vsubq_f32(vmlsq_laneq_f32(v49, v49, v51, 3), vmlsq_laneq_f32(v51, v51, v49, 3)), vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v25) & 0xFF00FF00FF00FFLL))), v22))), vmlaq_f32(v50, vsubq_f32(vmlsq_laneq_f32(v48, v48, v50, 3), vmlsq_laneq_f32(v50, v50, v48, 3)), vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v25)) & 0xFF00FF00FF00FFLL))), v22)));
        a10 += v17;
        v24 -= 2;
        if (v24 < 2)
          break;
        LOWORD(v25) = *(_WORD *)a10;
        v45 += v19;
        if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
        {
          result = (float16x4_t *)((char *)result + v45);
          a3 = (float16x4_t *)((char *)a3 + v45);
          goto LABEL_34;
        }
      }
      result = (float16x4_t *)((char *)result + v19 + v45);
      a3 = (float16x4_t *)((char *)a3 + v19 + v45);
LABEL_37:
      for (i = a12 - v23 + v24; i; --i)
      {
        if (*a10)
        {
          v53 = vcvtq_f32_f16(*a3);
          v54 = vcvtq_f32_f16(*result);
          *result = vcvt_f16_f32(vmlaq_f32(v54, vsubq_f32(vmlsq_laneq_f32(v53, v53, v54, 3), vmlsq_laneq_f32(v54, v54, v53, 3)), vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v22)));
        }
        v55 = &a3[a14];
        a10 += a14;
        if ((unint64_t)v55 >= a8)
          v56 = -(uint64_t)a7;
        else
          v56 = 0;
        a3 = &v55[v56];
        result = (float16x4_t *)((char *)result + v20);
      }
      a10 += a11;
      result += a2;
      v57 = &a5[a4];
      if ((unint64_t)v57 >= a9)
        v58 = v18;
      else
        v58 = 0;
      v59 = &v57[v58];
      v60 = a8 + 8 * v58 + 8 * a4;
      a3 += a4;
      if (a9)
      {
        a3 = v59;
        a8 = v60;
        a5 = v59;
      }
      v61 = __OFSUB__(a13--, 1);
      if ((a13 < 0) ^ v61 | (a13 == 0))
        return result;
    }
  }
  v62.i64[0] = -1;
  v62.i64[1] = -1;
  v63 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  while (2)
  {
    v64 = (a8 - (unint64_t)a3) >> 3;
    if (v64 >= a12)
      v64 = a12;
    v65 = v64;
    if (v64 < 2)
      goto LABEL_87;
    while (1)
    {
      v66 = *(unsigned __int16 *)a10;
      if (!*(_WORD *)a10)
      {
        v80 = (int8x16_t *)&a10[v65];
        v81 = (int8x16_t *)a10;
        do
          v82 = v81++;
        while (v81 <= v80 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v82)) & 0x80) != 0);
        do
        {
          v83 = v82;
          v82 = (int8x16_t *)((char *)v82 + 4);
        }
        while (v82 <= v80 && !v83->i32[0]);
        if (v83 < v80)
        {
          while (!v83->i8[0])
          {
            v83 = (int8x16_t *)((char *)v83 + 1);
            if (v83 >= v80)
            {
              v83 = (int8x16_t *)&a10[v65];
              break;
            }
          }
        }
        v84 = (char *)v83 - a10;
        v85 = ((char *)v83 - a10) * a14;
        a3 += v85;
        result += v85;
        a10 += v85;
        v65 -= v84;
        goto LABEL_84;
      }
      if (v66 != 0xFFFF)
        break;
      v67 = (int8x16_t *)&a10[v65];
      v68 = (int8x16_t *)a10;
      do
        v69 = v68++;
      while (v68 <= v67 && (vminvq_u8((uint8x16_t)vceqq_s8(*v69, v62)) & 0x80) != 0);
      do
      {
        v70 = v69;
        v69 = (int8x16_t *)((char *)v69 + 4);
      }
      while (v69 <= v67 && v70->i32[0] == -1);
      if (v70 < v67)
      {
        while (v70->u8[0] == 255)
        {
          v70 = (int8x16_t *)((char *)v70 + 1);
          if (v70 >= v67)
          {
            v70 = (int8x16_t *)&a10[v65];
            break;
          }
        }
      }
      v71 = 0;
      v72 = (char *)v70 - a10;
      v73 = (char *)v70 - a10;
      do
      {
        v74 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&a3->i8[v71]);
        v75 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&result->i8[v71]);
        v76 = vcvt_hight_f32_f16(v74);
        v77 = vcvtq_f32_f16(*(float16x4_t *)v74.i8);
        v78 = vcvt_hight_f32_f16(v75);
        v79 = vcvtq_f32_f16(*(float16x4_t *)v75.i8);
        *(int8x16_t *)&result->i8[v71] = vrev16q_s8((int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vsubq_f32(vmlsq_laneq_f32(v77, v77, v79, 3), vmlsq_laneq_f32(v79, v79, v77, 3)), v79)), vaddq_f32(vsubq_f32(vmlsq_laneq_f32(v76, v76, v78, 3), vmlsq_laneq_f32(v78, v78, v76, 3)), v78)));
        a10 += v17;
        v73 -= 2;
        v71 += v19;
      }
      while (v73 > 1);
      a3 = (float16x4_t *)((char *)a3 + v71);
      result = (float16x4_t *)((char *)result + v71);
      v65 = v65 - v72 + v73;
LABEL_84:
      if (v65 <= 1)
        goto LABEL_87;
    }
    v86 = 0;
    while (1)
    {
      v87 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&a3->i8[v86]);
      v88 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&result->i8[v86]);
      v89 = vcvt_hight_f32_f16(v87);
      v90 = vcvtq_f32_f16(*(float16x4_t *)v87.i8);
      v91 = vcvt_hight_f32_f16(v88);
      v92 = vcvtq_f32_f16(*(float16x4_t *)v88.i8);
      *(int8x16_t *)&result->i8[v86] = vrev16q_s8((int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(v92, vsubq_f32(vmlsq_laneq_f32(v90, v90, v92, 3), vmlsq_laneq_f32(v92, v92, v90, 3)), vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v66) & 0xFF00FF00FF00FFLL))), v63))), vmlaq_f32(v91, vsubq_f32(vmlsq_laneq_f32(v89, v89, v91, 3), vmlsq_laneq_f32(v91, v91, v89, 3)), vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v66)) & 0xFF00FF00FF00FFLL))), v63))));
      a10 += v17;
      v65 -= 2;
      if (v65 < 2)
        break;
      LOWORD(v66) = *(_WORD *)a10;
      v86 += v19;
      if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
      {
        result = (float16x4_t *)((char *)result + v86);
        a3 = (float16x4_t *)((char *)a3 + v86);
        goto LABEL_84;
      }
    }
    result = (float16x4_t *)((char *)result + v19 + v86);
    a3 = (float16x4_t *)((char *)a3 + v19 + v86);
LABEL_87:
    for (j = a12 - v64 + v65; j; --j)
    {
      if (*a10)
      {
        v94 = vcvtq_f32_f16((float16x4_t)vrev16_s8((int8x8_t)*a3));
        v95 = vcvtq_f32_f16((float16x4_t)vrev16_s8((int8x8_t)*result));
        *result = (float16x4_t)vrev16_s8((int8x8_t)vcvt_f16_f32(vmlaq_f32(v95, vsubq_f32(vmlsq_laneq_f32(v94, v94, v95, 3), vmlsq_laneq_f32(v95, v95, v94, 3)), vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v63))));
      }
      v96 = &a3[a14];
      a10 += a14;
      if ((unint64_t)v96 >= a8)
        v97 = -(uint64_t)a7;
      else
        v97 = 0;
      a3 = &v96[v97];
      result = (float16x4_t *)((char *)result + v20);
    }
    a10 += a11;
    result += a2;
    v98 = &a5[a4];
    if ((unint64_t)v98 >= a9)
      v99 = v18;
    else
      v99 = 0;
    v100 = &v98[v99];
    v101 = a8 + 8 * v99 + 8 * a4;
    a3 += a4;
    if (a9)
    {
      a3 = v100;
      a8 = v101;
      a5 = v100;
    }
    v61 = __OFSUB__(a13--, 1);
    if (!((a13 < 0) ^ v61 | (a13 == 0)))
      continue;
    return result;
  }
}

float16x4_t *composite_pixelmask<(CGCompositeOperation)10,_rgbaf16_t>(float16x4_t *result, uint64_t a2, float16x4_t *a3, uint64_t a4, float16x4_t *a5, int a6, int a7, unint64_t a8, unint64_t a9, char *a10, uint64_t a11, int a12, int a13, int a14, char a15)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t v21;
  float32x4_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  int8x16_t *v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  float16x8_t v33;
  float16x8_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int8x16_t *v42;
  int64_t v43;
  int64_t v44;
  uint64_t v45;
  float16x8_t v46;
  float16x8_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  unint64_t i;
  float32x4_t v53;
  float32x4_t v54;
  float16x4_t *v55;
  uint64_t v56;
  float16x4_t *v57;
  uint64_t v58;
  float16x4_t *v59;
  uint64_t v60;
  BOOL v61;
  int8x16_t v62;
  float32x4_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  int8x16_t *v67;
  int8x16_t *v68;
  int8x16_t *v69;
  int8x16_t *v70;
  uint64_t v71;
  int64_t v72;
  unint64_t v73;
  float16x8_t v74;
  float16x8_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int8x16_t *v80;
  int8x16_t *v81;
  int8x16_t *v82;
  int8x16_t *v83;
  int64_t v84;
  int64_t v85;
  uint64_t v86;
  float16x8_t v87;
  float16x8_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  unint64_t j;
  float32x4_t v94;
  float32x4_t v95;
  float16x4_t *v96;
  uint64_t v97;
  float16x4_t *v98;
  uint64_t v99;
  float16x4_t *v100;
  uint64_t v101;

  v17 = 2 * a14;
  v18 = -(a6 * a4);
  v19 = 16 * a14;
  v20 = 8 * a14;
  if ((a15 & 0x30) != 0)
  {
    v21.i64[0] = -1;
    v21.i64[1] = -1;
    v22 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    while (1)
    {
      v23 = (a8 - (unint64_t)a3) >> 3;
      if (v23 >= a12)
        v23 = a12;
      v24 = v23;
      if (v23 < 2)
        goto LABEL_37;
      while (1)
      {
        v25 = *(unsigned __int16 *)a10;
        if (!*(_WORD *)a10)
        {
          v39 = (int8x16_t *)&a10[v24];
          v40 = (int8x16_t *)a10;
          do
            v41 = v40++;
          while (v40 <= v39 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v41)) & 0x80) != 0);
          do
          {
            v42 = v41;
            v41 = (int8x16_t *)((char *)v41 + 4);
          }
          while (v41 <= v39 && !v42->i32[0]);
          if (v42 < v39)
          {
            while (!v42->i8[0])
            {
              v42 = (int8x16_t *)((char *)v42 + 1);
              if (v42 >= v39)
              {
                v42 = (int8x16_t *)&a10[v24];
                break;
              }
            }
          }
          v43 = (char *)v42 - a10;
          v44 = ((char *)v42 - a10) * a14;
          a3 += v44;
          result += v44;
          a10 += v44;
          v24 -= v43;
          goto LABEL_34;
        }
        if (v25 != 0xFFFF)
          break;
        v26 = (int8x16_t *)&a10[v24];
        v27 = (int8x16_t *)a10;
        do
          v28 = v27++;
        while (v27 <= v26 && (vminvq_u8((uint8x16_t)vceqq_s8(*v28, v21)) & 0x80) != 0);
        do
        {
          v29 = v28;
          v28 = (int8x16_t *)((char *)v28 + 4);
        }
        while (v28 <= v26 && v29->i32[0] == -1);
        if (v29 < v26)
        {
          while (v29->u8[0] == 255)
          {
            v29 = (int8x16_t *)((char *)v29 + 1);
            if (v29 >= v26)
            {
              v29 = (int8x16_t *)&a10[v24];
              break;
            }
          }
        }
        v30 = 0;
        v31 = (char *)v29 - a10;
        v32 = (char *)v29 - a10;
        do
        {
          v33 = *(float16x8_t *)&a3->i8[v30];
          v34 = *(float16x8_t *)&result->i8[v30];
          v35 = vcvt_hight_f32_f16(v33);
          v36 = vcvtq_f32_f16(*(float16x4_t *)v33.i8);
          v37 = vcvt_hight_f32_f16(v34);
          v38 = vcvtq_f32_f16(*(float16x4_t *)v34.i8);
          *(float16x8_t *)&result->i8[v30] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vmlsq_laneq_f32(vmlsq_laneq_f32(v36, v36, v38, 3), v38, v36, 3), v38)), vaddq_f32(vmlsq_laneq_f32(vmlsq_laneq_f32(v35, v35, v37, 3), v37, v35, 3), v37));
          a10 += v17;
          v32 -= 2;
          v30 += v19;
        }
        while (v32 > 1);
        a3 = (float16x4_t *)((char *)a3 + v30);
        result = (float16x4_t *)((char *)result + v30);
        v24 = v24 - v31 + v32;
LABEL_34:
        if (v24 <= 1)
          goto LABEL_37;
      }
      v45 = 0;
      while (1)
      {
        v46 = *(float16x8_t *)&a3->i8[v45];
        v47 = *(float16x8_t *)&result->i8[v45];
        v48 = vcvt_hight_f32_f16(v46);
        v49 = vcvtq_f32_f16(*(float16x4_t *)v46.i8);
        v50 = vcvt_hight_f32_f16(v47);
        v51 = vcvtq_f32_f16(*(float16x4_t *)v47.i8);
        *(float16x8_t *)&result->i8[v45] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(v51, vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v25) & 0xFF00FF00FF00FFLL))), v22), vmlsq_laneq_f32(vmlsq_laneq_f32(v49, v49, v51, 3), v51, v49, 3))), vmlaq_f32(v50, vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v25)) & 0xFF00FF00FF00FFLL))), v22), vmlsq_laneq_f32(vmlsq_laneq_f32(v48, v48, v50, 3), v50, v48, 3)));
        a10 += v17;
        v24 -= 2;
        if (v24 < 2)
          break;
        LOWORD(v25) = *(_WORD *)a10;
        v45 += v19;
        if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
        {
          result = (float16x4_t *)((char *)result + v45);
          a3 = (float16x4_t *)((char *)a3 + v45);
          goto LABEL_34;
        }
      }
      result = (float16x4_t *)((char *)result + v19 + v45);
      a3 = (float16x4_t *)((char *)a3 + v19 + v45);
LABEL_37:
      for (i = a12 - v23 + v24; i; --i)
      {
        if (*a10)
        {
          v53 = vcvtq_f32_f16(*a3);
          v54 = vcvtq_f32_f16(*result);
          *result = vcvt_f16_f32(vmlaq_f32(v54, vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v22), vmlsq_laneq_f32(vmlsq_laneq_f32(v53, v53, v54, 3), v54, v53, 3)));
        }
        v55 = &a3[a14];
        a10 += a14;
        if ((unint64_t)v55 >= a8)
          v56 = -(uint64_t)a7;
        else
          v56 = 0;
        a3 = &v55[v56];
        result = (float16x4_t *)((char *)result + v20);
      }
      a10 += a11;
      result += a2;
      v57 = &a5[a4];
      if ((unint64_t)v57 >= a9)
        v58 = v18;
      else
        v58 = 0;
      v59 = &v57[v58];
      v60 = a8 + 8 * v58 + 8 * a4;
      a3 += a4;
      if (a9)
      {
        a3 = v59;
        a8 = v60;
        a5 = v59;
      }
      v61 = __OFSUB__(a13--, 1);
      if ((a13 < 0) ^ v61 | (a13 == 0))
        return result;
    }
  }
  v62.i64[0] = -1;
  v62.i64[1] = -1;
  v63 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  while (2)
  {
    v64 = (a8 - (unint64_t)a3) >> 3;
    if (v64 >= a12)
      v64 = a12;
    v65 = v64;
    if (v64 < 2)
      goto LABEL_87;
    while (1)
    {
      v66 = *(unsigned __int16 *)a10;
      if (!*(_WORD *)a10)
      {
        v80 = (int8x16_t *)&a10[v65];
        v81 = (int8x16_t *)a10;
        do
          v82 = v81++;
        while (v81 <= v80 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v82)) & 0x80) != 0);
        do
        {
          v83 = v82;
          v82 = (int8x16_t *)((char *)v82 + 4);
        }
        while (v82 <= v80 && !v83->i32[0]);
        if (v83 < v80)
        {
          while (!v83->i8[0])
          {
            v83 = (int8x16_t *)((char *)v83 + 1);
            if (v83 >= v80)
            {
              v83 = (int8x16_t *)&a10[v65];
              break;
            }
          }
        }
        v84 = (char *)v83 - a10;
        v85 = ((char *)v83 - a10) * a14;
        a3 += v85;
        result += v85;
        a10 += v85;
        v65 -= v84;
        goto LABEL_84;
      }
      if (v66 != 0xFFFF)
        break;
      v67 = (int8x16_t *)&a10[v65];
      v68 = (int8x16_t *)a10;
      do
        v69 = v68++;
      while (v68 <= v67 && (vminvq_u8((uint8x16_t)vceqq_s8(*v69, v62)) & 0x80) != 0);
      do
      {
        v70 = v69;
        v69 = (int8x16_t *)((char *)v69 + 4);
      }
      while (v69 <= v67 && v70->i32[0] == -1);
      if (v70 < v67)
      {
        while (v70->u8[0] == 255)
        {
          v70 = (int8x16_t *)((char *)v70 + 1);
          if (v70 >= v67)
          {
            v70 = (int8x16_t *)&a10[v65];
            break;
          }
        }
      }
      v71 = 0;
      v72 = (char *)v70 - a10;
      v73 = (char *)v70 - a10;
      do
      {
        v74 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&a3->i8[v71]);
        v75 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&result->i8[v71]);
        v76 = vcvt_hight_f32_f16(v74);
        v77 = vcvtq_f32_f16(*(float16x4_t *)v74.i8);
        v78 = vcvt_hight_f32_f16(v75);
        v79 = vcvtq_f32_f16(*(float16x4_t *)v75.i8);
        *(int8x16_t *)&result->i8[v71] = vrev16q_s8((int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vmlsq_laneq_f32(vmlsq_laneq_f32(v77, v77, v79, 3), v79, v77, 3), v79)), vaddq_f32(vmlsq_laneq_f32(vmlsq_laneq_f32(v76, v76, v78, 3), v78, v76, 3), v78)));
        a10 += v17;
        v73 -= 2;
        v71 += v19;
      }
      while (v73 > 1);
      a3 = (float16x4_t *)((char *)a3 + v71);
      result = (float16x4_t *)((char *)result + v71);
      v65 = v65 - v72 + v73;
LABEL_84:
      if (v65 <= 1)
        goto LABEL_87;
    }
    v86 = 0;
    while (1)
    {
      v87 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&a3->i8[v86]);
      v88 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&result->i8[v86]);
      v89 = vcvt_hight_f32_f16(v87);
      v90 = vcvtq_f32_f16(*(float16x4_t *)v87.i8);
      v91 = vcvt_hight_f32_f16(v88);
      v92 = vcvtq_f32_f16(*(float16x4_t *)v88.i8);
      *(int8x16_t *)&result->i8[v86] = vrev16q_s8((int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(v92, vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v66) & 0xFF00FF00FF00FFLL))), v63), vmlsq_laneq_f32(vmlsq_laneq_f32(v90, v90, v92, 3), v92, v90, 3))), vmlaq_f32(v91, vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v66)) & 0xFF00FF00FF00FFLL))), v63), vmlsq_laneq_f32(vmlsq_laneq_f32(v89, v89, v91, 3), v91,
                                                                   v89,
                                                                   3))));
      a10 += v17;
      v65 -= 2;
      if (v65 < 2)
        break;
      LOWORD(v66) = *(_WORD *)a10;
      v86 += v19;
      if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
      {
        result = (float16x4_t *)((char *)result + v86);
        a3 = (float16x4_t *)((char *)a3 + v86);
        goto LABEL_84;
      }
    }
    result = (float16x4_t *)((char *)result + v19 + v86);
    a3 = (float16x4_t *)((char *)a3 + v19 + v86);
LABEL_87:
    for (j = a12 - v64 + v65; j; --j)
    {
      if (*a10)
      {
        v94 = vcvtq_f32_f16((float16x4_t)vrev16_s8((int8x8_t)*a3));
        v95 = vcvtq_f32_f16((float16x4_t)vrev16_s8((int8x8_t)*result));
        *result = (float16x4_t)vrev16_s8((int8x8_t)vcvt_f16_f32(vmlaq_f32(v95, vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v63), vmlsq_laneq_f32(vmlsq_laneq_f32(v94, v94, v95, 3), v95, v94, 3))));
      }
      v96 = &a3[a14];
      a10 += a14;
      if ((unint64_t)v96 >= a8)
        v97 = -(uint64_t)a7;
      else
        v97 = 0;
      a3 = &v96[v97];
      result = (float16x4_t *)((char *)result + v20);
    }
    a10 += a11;
    result += a2;
    v98 = &a5[a4];
    if ((unint64_t)v98 >= a9)
      v99 = v18;
    else
      v99 = 0;
    v100 = &v98[v99];
    v101 = a8 + 8 * v99 + 8 * a4;
    a3 += a4;
    if (a9)
    {
      a3 = v100;
      a8 = v101;
      a5 = v100;
    }
    v61 = __OFSUB__(a13--, 1);
    if (!((a13 < 0) ^ v61 | (a13 == 0)))
      continue;
    return result;
  }
}

int8x8_t *composite_pixelmask<(CGCompositeOperation)11,_rgbaf16_t>(int8x8_t *result, uint64_t a2, int8x8_t *a3, uint64_t a4, int8x8_t *a5, int a6, int a7, unint64_t a8, unint64_t a9, char *a10, uint64_t a11, int a12, int a13, int a14, int a15, int a16, char a17)
{
  unsigned int v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64_t v29;
  int8x8_t v30;
  int8x8_t v31;
  int8x8_t v32;
  int8x8_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x16_t v42;
  float32x4_t v43;
  int8x16_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int8x16_t *v48;
  int8x16_t *v49;
  int8x16_t *v50;
  int8x16_t *v51;
  uint64_t v52;
  int64_t v53;
  unint64_t v54;
  float16x8_t v55;
  float16x8_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int8x16_t *v65;
  int8x16_t *v66;
  int8x16_t *v67;
  int8x16_t *v68;
  int64_t v69;
  int64_t v70;
  uint64_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float16x8_t v74;
  float16x8_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  unint64_t i;
  float32x4_t v83;
  float16x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  int8x8_t *v88;
  uint64_t v89;
  int8x8_t *v90;
  uint64_t v91;
  int8x8_t *v92;
  uint64_t v93;
  int8x16_t v94;
  float32x4_t v95;
  int8x16_t v96;
  unint64_t v97;
  unint64_t v98;
  int v99;
  int8x16_t *v100;
  int8x16_t *v101;
  int8x16_t *v102;
  int8x16_t *v103;
  uint64_t v104;
  int64_t v105;
  unint64_t v106;
  float16x8_t v107;
  float16x8_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  int8x16_t *v117;
  int8x16_t *v118;
  int8x16_t *v119;
  int8x16_t *v120;
  int64_t v121;
  int64_t v122;
  uint64_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float16x8_t v126;
  float16x8_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  unint64_t j;
  float32x4_t v135;
  float16x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  int8x8_t *v140;
  uint64_t v141;
  int8x8_t *v142;
  uint64_t v143;
  int8x8_t *v144;
  uint64_t v145;

  if (a16)
    v19 = 0;
  else
    v19 = -1;
  v20 = (int8x16_t)vdupq_n_s16(v19);
  v21.i64[0] = 0xFFFF000000000000;
  v21.i64[1] = 0xFFFF000000000000;
  v22 = vmvnq_s8(vandq_s8(v20, v21));
  v23 = vandq_s8(v20, (int8x16_t)xmmword_185005140);
  if (a15)
    v24 = 0;
  else
    v24 = -1;
  v25 = (int8x16_t)vdupq_n_s16(v24);
  v26 = vandq_s8(v25, v21);
  v27 = vmvnq_s8(v26);
  v28 = vandq_s8(v25, (int8x16_t)xmmword_185005140);
  v29 = 2 * a14;
  v33.i32[0] = 0;
  v33.i16[2] = 0;
  v30.i32[0] = 0;
  v30.i16[2] = 0;
  v30.i16[3] = v19;
  v31 = vmvn_s8(v30);
  v32 = vand_s8(*(int8x8_t *)v20.i8, (int8x8_t)0x3C00000000000000);
  v33.i16[3] = v24;
  v34 = -(a6 * a4);
  v35 = 16 * a14;
  v36 = 8 * a14;
  __asm { FMOV            V16.4S, #1.0 }
  if ((a17 & 0x30) != 0)
  {
    v42.i64[0] = -1;
    v42.i64[1] = -1;
    v43 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v44.i64[0] = 0x3C003C003C003C00;
    v44.i64[1] = 0x3C003C003C003C00;
    while (1)
    {
      v45 = (a8 - (unint64_t)a3) >> 3;
      if (v45 >= a12)
        v45 = a12;
      v46 = v45;
      if (v45 < 2)
        goto LABEL_43;
      while (1)
      {
        v47 = *(unsigned __int16 *)a10;
        if (!*(_WORD *)a10)
        {
          v65 = (int8x16_t *)&a10[v46];
          v66 = (int8x16_t *)a10;
          do
            v67 = v66++;
          while (v66 <= v65 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v67)) & 0x80) != 0);
          do
          {
            v68 = v67;
            v67 = (int8x16_t *)((char *)v67 + 4);
          }
          while (v67 <= v65 && !v68->i32[0]);
          if (v68 < v65)
          {
            while (!v68->i8[0])
            {
              v68 = (int8x16_t *)((char *)v68 + 1);
              if (v68 >= v65)
              {
                v68 = (int8x16_t *)&a10[v46];
                break;
              }
            }
          }
          v69 = (char *)v68 - a10;
          v70 = ((char *)v68 - a10) * a14;
          a3 += v70;
          result += v70;
          a10 += v70;
          v46 -= v69;
          goto LABEL_40;
        }
        if (v47 != 0xFFFF)
          break;
        v48 = (int8x16_t *)&a10[v46];
        v49 = (int8x16_t *)a10;
        do
          v50 = v49++;
        while (v49 <= v48 && (vminvq_u8((uint8x16_t)vceqq_s8(*v50, v42)) & 0x80) != 0);
        do
        {
          v51 = v50;
          v50 = (int8x16_t *)((char *)v50 + 4);
        }
        while (v50 <= v48 && v51->i32[0] == -1);
        if (v51 < v48)
        {
          while (v51->u8[0] == 255)
          {
            v51 = (int8x16_t *)((char *)v51 + 1);
            if (v51 >= v48)
            {
              v51 = (int8x16_t *)&a10[v46];
              break;
            }
          }
        }
        v52 = 0;
        v53 = (char *)v51 - a10;
        v54 = (char *)v51 - a10;
        do
        {
          v55 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v52], v22), v23);
          v56 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&result->i8[v52], v27), v28);
          v57 = vcvt_hight_f32_f16(v55);
          v58 = vcvtq_f32_f16(*(float16x4_t *)v55.i8);
          v59 = vcvt_hight_f32_f16(v56);
          v60 = vcvtq_f32_f16(*(float16x4_t *)v56.i8);
          v61 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 3);
          v62 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 3);
          v63 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 3);
          v64 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 3);
          *(float16x8_t *)&result->i8[v52] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vminnmq_f32(vaddq_f32(v61, v63), _Q16), vaddq_f32(vsubq_f32(v61, v58), vsubq_f32(v63, v60)))), vsubq_f32(vminnmq_f32(vaddq_f32(v62, v64), _Q16), vaddq_f32(vsubq_f32(v62, v57), vsubq_f32(v64, v59))));
          a10 += v29;
          v54 -= 2;
          v52 += v35;
        }
        while (v54 > 1);
        a3 = (int8x8_t *)((char *)a3 + v52);
        result = (int8x8_t *)((char *)result + v52);
        v46 = v46 - v53 + v54;
LABEL_40:
        if (v46 <= 1)
          goto LABEL_43;
      }
      v71 = 0;
      while (1)
      {
        v72 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v47) & 0xFF00FF00FF00FFLL))), v43);
        v73 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v47)) & 0xFF00FF00FF00FFLL))), v43);
        v74 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v71], v22), v23);
        v75 = (float16x8_t)vbslq_s8(vandq_s8(v26, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v72), (int16x8_t)vcgtzq_f32(v73))), v44, *(int8x16_t *)&result->i8[v71]);
        v76 = vcvt_hight_f32_f16(v74);
        v77 = vcvtq_f32_f16(*(float16x4_t *)v74.i8);
        v78 = vcvt_hight_f32_f16(v75);
        v79 = vcvtq_f32_f16(*(float16x4_t *)v75.i8);
        v80 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v79, 3);
        v81 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 3);
        *(int8x16_t *)&result->i8[v71] = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_f32(v72), (int16x8_t)vceqzq_f32(v73)), (int8x16_t)v75, (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vminnmq_f32(vmlaq_laneq_f32(v80, v72, v77, 3), _Q16), vmlaq_f32(vsubq_f32(v80, v79), v72, vsubq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v77, 3), v77)))), vsubq_f32(vminnmq_f32(vmlaq_laneq_f32(v81, v73, v76, 3), _Q16), vmlaq_f32(
                                                            vsubq_f32(v81, v78),
                                                            v73,
                                                            vsubq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 3), v76)))));
        a10 += v29;
        v46 -= 2;
        if (v46 < 2)
          break;
        LOWORD(v47) = *(_WORD *)a10;
        v71 += v35;
        if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
        {
          result = (int8x8_t *)((char *)result + v71);
          a3 = (int8x8_t *)((char *)a3 + v71);
          goto LABEL_40;
        }
      }
      result = (int8x8_t *)((char *)result + v35 + v71);
      a3 = (int8x8_t *)((char *)a3 + v35 + v71);
LABEL_43:
      for (i = a12 - v45 + v46; i; --i)
      {
        if (*a10)
        {
          v83 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v43);
          v84 = (float16x4_t)vbsl_s8(vand_s8(v33, (int8x8_t)vmovn_s32(vcgtzq_f32(v83))), (int8x8_t)0x3C003C003C003C00, *result);
          v85 = vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(*a3, v31), v32));
          v86 = vcvtq_f32_f16(v84);
          v87 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v86, 3);
          *result = vbsl_s8((int8x8_t)vmovn_s32(vceqzq_f32(v83)), (int8x8_t)v84, (int8x8_t)vcvt_f16_f32(vsubq_f32(vminnmq_f32(vmlaq_laneq_f32(v87, v83, v85, 3), _Q16), vmlaq_f32(vsubq_f32(v87, v86), v83, vsubq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v85, 3), v85)))));
        }
        v88 = &a3[a14];
        a10 += a14;
        if ((unint64_t)v88 >= a8)
          v89 = -(uint64_t)a7;
        else
          v89 = 0;
        a3 = &v88[v89];
        result = (int8x8_t *)((char *)result + v36);
      }
      a10 += a11;
      result += a2;
      v90 = &a5[a4];
      if ((unint64_t)v90 >= a9)
        v91 = v34;
      else
        v91 = 0;
      v92 = &v90[v91];
      v93 = a8 + 8 * v91 + 8 * a4;
      a3 += a4;
      if (a9)
      {
        a3 = v92;
        a8 = v93;
        a5 = v92;
      }
      _VF = __OFSUB__(a13--, 1);
      if ((a13 < 0) ^ _VF | (a13 == 0))
        return result;
    }
  }
  v94.i64[0] = -1;
  v94.i64[1] = -1;
  v95 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v96.i64[0] = 0x3C003C003C003C00;
  v96.i64[1] = 0x3C003C003C003C00;
  while (2)
  {
    v97 = (a8 - (unint64_t)a3) >> 3;
    if (v97 >= a12)
      v97 = a12;
    v98 = v97;
    if (v97 < 2)
      goto LABEL_93;
    while (1)
    {
      v99 = *(unsigned __int16 *)a10;
      if (!*(_WORD *)a10)
      {
        v117 = (int8x16_t *)&a10[v98];
        v118 = (int8x16_t *)a10;
        do
          v119 = v118++;
        while (v118 <= v117 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v119)) & 0x80) != 0);
        do
        {
          v120 = v119;
          v119 = (int8x16_t *)((char *)v119 + 4);
        }
        while (v119 <= v117 && !v120->i32[0]);
        if (v120 < v117)
        {
          while (!v120->i8[0])
          {
            v120 = (int8x16_t *)((char *)v120 + 1);
            if (v120 >= v117)
            {
              v120 = (int8x16_t *)&a10[v98];
              break;
            }
          }
        }
        v121 = (char *)v120 - a10;
        v122 = ((char *)v120 - a10) * a14;
        a3 += v122;
        result += v122;
        a10 += v122;
        v98 -= v121;
        goto LABEL_90;
      }
      if (v99 != 0xFFFF)
        break;
      v100 = (int8x16_t *)&a10[v98];
      v101 = (int8x16_t *)a10;
      do
        v102 = v101++;
      while (v101 <= v100 && (vminvq_u8((uint8x16_t)vceqq_s8(*v102, v94)) & 0x80) != 0);
      do
      {
        v103 = v102;
        v102 = (int8x16_t *)((char *)v102 + 4);
      }
      while (v102 <= v100 && v103->i32[0] == -1);
      if (v103 < v100)
      {
        while (v103->u8[0] == 255)
        {
          v103 = (int8x16_t *)((char *)v103 + 1);
          if (v103 >= v100)
          {
            v103 = (int8x16_t *)&a10[v98];
            break;
          }
        }
      }
      v104 = 0;
      v105 = (char *)v103 - a10;
      v106 = (char *)v103 - a10;
      do
      {
        v107 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v104]), v22), v23);
        v108 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&result->i8[v104]), v27), v28);
        v109 = vcvt_hight_f32_f16(v107);
        v110 = vcvtq_f32_f16(*(float16x4_t *)v107.i8);
        v111 = vcvtq_f32_f16(*(float16x4_t *)v108.i8);
        v112 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v110, 3);
        v113 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v109, 3);
        v114 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v111, 3);
        v115 = vcvt_hight_f32_f16(v108);
        v116 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v115, 3);
        *(int8x16_t *)&result->i8[v104] = vrev16q_s8((int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vminnmq_f32(vaddq_f32(v112, v114), _Q16), vaddq_f32(vsubq_f32(v112, v110), vsubq_f32(v114, v111)))), vsubq_f32(vminnmq_f32(vaddq_f32(v113, v116), _Q16), vaddq_f32(vsubq_f32(v113, v109), vsubq_f32(v116, v115)))));
        a10 += v29;
        v106 -= 2;
        v104 += v35;
      }
      while (v106 > 1);
      a3 = (int8x8_t *)((char *)a3 + v104);
      result = (int8x8_t *)((char *)result + v104);
      v98 = v98 - v105 + v106;
LABEL_90:
      if (v98 <= 1)
        goto LABEL_93;
    }
    v123 = 0;
    while (1)
    {
      v124 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v99) & 0xFF00FF00FF00FFLL))), v95);
      v125 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v99)) & 0xFF00FF00FF00FFLL))), v95);
      v126 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v123]), v22), v23);
      v127 = (float16x8_t)vbslq_s8(vandq_s8(v26, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v124), (int16x8_t)vcgtzq_f32(v125))), v96, vrev16q_s8(*(int8x16_t *)&result->i8[v123]));
      v128 = vcvt_hight_f32_f16(v126);
      v129 = vcvtq_f32_f16(*(float16x4_t *)v126.i8);
      v130 = vcvt_hight_f32_f16(v127);
      v131 = vcvtq_f32_f16(*(float16x4_t *)v127.i8);
      v132 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v131, 3);
      v133 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v130, 3);
      *(int8x16_t *)&result->i8[v123] = vrev16q_s8(vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_f32(v124), (int16x8_t)vceqzq_f32(v125)), (int8x16_t)v127, (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vminnmq_f32(vmlaq_laneq_f32(v132, v124, v129, 3), _Q16), vmlaq_f32(vsubq_f32(v132, v131), v124, vsubq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v129, 3), v129)))),
                                                         vsubq_f32(vminnmq_f32(vmlaq_laneq_f32(v133, v125, v128, 3), _Q16), vmlaq_f32(vsubq_f32(v133, v130), v125, vsubq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v128, 3), v128))))));
      a10 += v29;
      v98 -= 2;
      if (v98 < 2)
        break;
      LOWORD(v99) = *(_WORD *)a10;
      v123 += v35;
      if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
      {
        result = (int8x8_t *)((char *)result + v123);
        a3 = (int8x8_t *)((char *)a3 + v123);
        goto LABEL_90;
      }
    }
    result = (int8x8_t *)((char *)result + v35 + v123);
    a3 = (int8x8_t *)((char *)a3 + v35 + v123);
LABEL_93:
    for (j = a12 - v97 + v98; j; --j)
    {
      if (*a10)
      {
        v135 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v95);
        v136 = (float16x4_t)vbsl_s8(vand_s8(v33, (int8x8_t)vmovn_s32(vcgtzq_f32(v135))), (int8x8_t)0x3C003C003C003C00, vrev16_s8(*result));
        v137 = vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(vrev16_s8(*a3), v31), v32));
        v138 = vcvtq_f32_f16(v136);
        v139 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v138, 3);
        *result = vrev16_s8(vbsl_s8((int8x8_t)vmovn_s32(vceqzq_f32(v135)), (int8x8_t)v136, (int8x8_t)vcvt_f16_f32(vsubq_f32(vminnmq_f32(vmlaq_laneq_f32(v139, v135, v137, 3), _Q16), vmlaq_f32(vsubq_f32(v139, v138), v135, vsubq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v137, 3), v137))))));
      }
      v140 = &a3[a14];
      a10 += a14;
      if ((unint64_t)v140 >= a8)
        v141 = -(uint64_t)a7;
      else
        v141 = 0;
      a3 = &v140[v141];
      result = (int8x8_t *)((char *)result + v36);
    }
    a10 += a11;
    result += a2;
    v142 = &a5[a4];
    if ((unint64_t)v142 >= a9)
      v143 = v34;
    else
      v143 = 0;
    v144 = &v142[v143];
    v145 = a8 + 8 * v143 + 8 * a4;
    a3 += a4;
    if (a9)
    {
      a3 = v144;
      a8 = v145;
      a5 = v144;
    }
    _VF = __OFSUB__(a13--, 1);
    if (!((a13 < 0) ^ _VF | (a13 == 0)))
      continue;
    return result;
  }
}

float16x4_t *composite_pixelmask<(CGCompositeOperation)12,_rgbaf16_t>(float16x4_t *result, uint64_t a2, int8x8_t *a3, uint64_t a4, int8x8_t *a5, int a6, int a7, unint64_t a8, unint64_t a9, char *a10, uint64_t a11, int a12, int a13, int a14, int a15, char a16)
{
  unsigned int v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  uint64_t v23;
  int8x8_t v24;
  int8x8_t v25;
  int8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x16_t v30;
  float32x4_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  float16x8_t v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int8x16_t *v46;
  int64_t v47;
  int64_t v48;
  uint64_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float16x8_t v52;
  unint64_t i;
  float32x4_t v54;
  int8x8_t *v55;
  uint64_t v56;
  int8x8_t *v57;
  uint64_t v58;
  int8x8_t *v59;
  uint64_t v60;
  BOOL v61;
  int8x16_t v62;
  float32x4_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  int8x16_t *v67;
  int8x16_t *v68;
  int8x16_t *v69;
  int8x16_t *v70;
  uint64_t v71;
  int64_t v72;
  unint64_t v73;
  float16x8_t v74;
  float16x8_t v75;
  int8x16_t *v76;
  int8x16_t *v77;
  int8x16_t *v78;
  int8x16_t *v79;
  int64_t v80;
  int64_t v81;
  uint64_t v82;
  float16x8_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float16x8_t v86;
  unint64_t j;
  float16x4_t v88;
  float32x4_t v89;
  int8x8_t *v90;
  uint64_t v91;
  int8x8_t *v92;
  uint64_t v93;
  int8x8_t *v94;
  uint64_t v95;

  if (a15)
    v18 = 0;
  else
    v18 = -1;
  v19 = (int8x16_t)vdupq_n_s16(v18);
  v20.i64[0] = 0xFFFF000000000000;
  v20.i64[1] = 0xFFFF000000000000;
  v21 = vmvnq_s8(vandq_s8(v19, v20));
  v22 = vandq_s8(v19, (int8x16_t)xmmword_185005140);
  v23 = 2 * a14;
  v24.i32[0] = 0;
  v24.i16[2] = 0;
  v24.i16[3] = v18;
  v25 = vmvn_s8(v24);
  v26 = vand_s8(*(int8x8_t *)v19.i8, (int8x8_t)0x3C00000000000000);
  v27 = -(a6 * a4);
  v28 = 16 * a14;
  v29 = 8 * a14;
  if ((a16 & 0x30) != 0)
  {
    v30.i64[0] = -1;
    v30.i64[1] = -1;
    v31 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    while (1)
    {
      v32 = (a8 - (unint64_t)a3) >> 3;
      if (v32 >= a12)
        v32 = a12;
      v33 = v32;
      if (v32 < 2)
        goto LABEL_40;
      while (1)
      {
        v34 = *(unsigned __int16 *)a10;
        if (!*(_WORD *)a10)
        {
          v43 = (int8x16_t *)&a10[v33];
          v44 = (int8x16_t *)a10;
          do
            v45 = v44++;
          while (v44 <= v43 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v45)) & 0x80) != 0);
          do
          {
            v46 = v45;
            v45 = (int8x16_t *)((char *)v45 + 4);
          }
          while (v45 <= v43 && !v46->i32[0]);
          if (v46 < v43)
          {
            while (!v46->i8[0])
            {
              v46 = (int8x16_t *)((char *)v46 + 1);
              if (v46 >= v43)
              {
                v46 = (int8x16_t *)&a10[v33];
                break;
              }
            }
          }
          v47 = (char *)v46 - a10;
          v48 = ((char *)v46 - a10) * a14;
          a3 += v48;
          result += v48;
          a10 += v48;
          v33 -= v47;
          goto LABEL_37;
        }
        if (v34 != 0xFFFF)
          break;
        v35 = (int8x16_t *)&a10[v33];
        v36 = (int8x16_t *)a10;
        do
          v37 = v36++;
        while (v36 <= v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, v30)) & 0x80) != 0);
        do
        {
          v38 = v37;
          v37 = (int8x16_t *)((char *)v37 + 4);
        }
        while (v37 <= v35 && v38->i32[0] == -1);
        if (v38 < v35)
        {
          while (v38->u8[0] == 255)
          {
            v38 = (int8x16_t *)((char *)v38 + 1);
            if (v38 >= v35)
            {
              v38 = (int8x16_t *)&a10[v33];
              break;
            }
          }
        }
        v39 = 0;
        v40 = (char *)v38 - a10;
        v41 = (char *)v38 - a10;
        do
        {
          v42 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v39], v21), v22);
          *(float16x8_t *)&result->i8[v39] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vminnmq_f32(vaddq_f32(vcvtq_f32_f16(*(float16x4_t *)((char *)result + v39)), vcvtq_f32_f16(*(float16x4_t *)v42.i8)), (float32x4_t)xmmword_185005150)), vminnmq_f32(vaddq_f32(vcvt_hight_f32_f16(*(float16x8_t *)&result->i8[v39]), vcvt_hight_f32_f16(v42)), (float32x4_t)xmmword_185005150));
          a10 += v23;
          v41 -= 2;
          v39 += v28;
        }
        while (v41 > 1);
        a3 = (int8x8_t *)((char *)a3 + v39);
        result = (float16x4_t *)((char *)result + v39);
        v33 = v33 - v40 + v41;
LABEL_37:
        if (v33 <= 1)
          goto LABEL_40;
      }
      v49 = 0;
      while (1)
      {
        v50 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v34) & 0xFF00FF00FF00FFLL))), v31);
        v51 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v34)) & 0xFF00FF00FF00FFLL))), v31);
        v52 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v49], v21), v22);
        *(int8x16_t *)&result->i8[v49] = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v50), (int16x8_t)vcgtzq_f32(v51)), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vminnmq_f32(vmlaq_f32(vcvtq_f32_f16(*(float16x4_t *)((char *)result + v49)), v50, vcvtq_f32_f16(*(float16x4_t *)v52.i8)), (float32x4_t)xmmword_185005150)), vminnmq_f32(vmlaq_f32(vcvt_hight_f32_f16(*(float16x8_t *)&result->i8[v49]), v51, vcvt_hight_f32_f16(v52)), (float32x4_t)xmmword_185005150)), *(int8x16_t *)&result->i8[v49]);
        a10 += v23;
        v33 -= 2;
        if (v33 < 2)
          break;
        LOWORD(v34) = *(_WORD *)a10;
        v49 += v28;
        if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
        {
          result = (float16x4_t *)((char *)result + v49);
          a3 = (int8x8_t *)((char *)a3 + v49);
          goto LABEL_37;
        }
      }
      result = (float16x4_t *)((char *)result + v28 + v49);
      a3 = (int8x8_t *)((char *)a3 + v28 + v49);
LABEL_40:
      for (i = a12 - v32 + v33; i; --i)
      {
        if (*a10)
        {
          v54 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v31);
          *result = (float16x4_t)vbsl_s8((int8x8_t)vmovn_s32(vcgtzq_f32(v54)), (int8x8_t)vcvt_f16_f32(vminnmq_f32(vmlaq_f32(vcvtq_f32_f16(*result), v54, vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(*a3, v25), v26))), (float32x4_t)xmmword_185005150)), (int8x8_t)*result);
        }
        v55 = &a3[a14];
        a10 += a14;
        if ((unint64_t)v55 >= a8)
          v56 = -(uint64_t)a7;
        else
          v56 = 0;
        a3 = &v55[v56];
        result = (float16x4_t *)((char *)result + v29);
      }
      a10 += a11;
      result += a2;
      v57 = &a5[a4];
      if ((unint64_t)v57 >= a9)
        v58 = v27;
      else
        v58 = 0;
      v59 = &v57[v58];
      v60 = a8 + 8 * v58 + 8 * a4;
      a3 += a4;
      if (a9)
      {
        a3 = v59;
        a8 = v60;
        a5 = v59;
      }
      v61 = __OFSUB__(a13--, 1);
      if ((a13 < 0) ^ v61 | (a13 == 0))
        return result;
    }
  }
  v62.i64[0] = -1;
  v62.i64[1] = -1;
  v63 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  while (2)
  {
    v64 = (a8 - (unint64_t)a3) >> 3;
    if (v64 >= a12)
      v64 = a12;
    v65 = v64;
    if (v64 < 2)
      goto LABEL_90;
    while (1)
    {
      v66 = *(unsigned __int16 *)a10;
      if (!*(_WORD *)a10)
      {
        v76 = (int8x16_t *)&a10[v65];
        v77 = (int8x16_t *)a10;
        do
          v78 = v77++;
        while (v77 <= v76 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v78)) & 0x80) != 0);
        do
        {
          v79 = v78;
          v78 = (int8x16_t *)((char *)v78 + 4);
        }
        while (v78 <= v76 && !v79->i32[0]);
        if (v79 < v76)
        {
          while (!v79->i8[0])
          {
            v79 = (int8x16_t *)((char *)v79 + 1);
            if (v79 >= v76)
            {
              v79 = (int8x16_t *)&a10[v65];
              break;
            }
          }
        }
        v80 = (char *)v79 - a10;
        v81 = ((char *)v79 - a10) * a14;
        a3 += v81;
        result += v81;
        a10 += v81;
        v65 -= v80;
        goto LABEL_87;
      }
      if (v66 != 0xFFFF)
        break;
      v67 = (int8x16_t *)&a10[v65];
      v68 = (int8x16_t *)a10;
      do
        v69 = v68++;
      while (v68 <= v67 && (vminvq_u8((uint8x16_t)vceqq_s8(*v69, v62)) & 0x80) != 0);
      do
      {
        v70 = v69;
        v69 = (int8x16_t *)((char *)v69 + 4);
      }
      while (v69 <= v67 && v70->i32[0] == -1);
      if (v70 < v67)
      {
        while (v70->u8[0] == 255)
        {
          v70 = (int8x16_t *)((char *)v70 + 1);
          if (v70 >= v67)
          {
            v70 = (int8x16_t *)&a10[v65];
            break;
          }
        }
      }
      v71 = 0;
      v72 = (char *)v70 - a10;
      v73 = (char *)v70 - a10;
      do
      {
        v74 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&result->i8[v71]);
        v75 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v71]), v21), v22);
        *(int8x16_t *)&result->i8[v71] = vrev16q_s8((int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vminnmq_f32(vaddq_f32(vcvtq_f32_f16(*(float16x4_t *)v74.i8), vcvtq_f32_f16(*(float16x4_t *)v75.i8)), (float32x4_t)xmmword_185005150)), vminnmq_f32(vaddq_f32(vcvt_hight_f32_f16(v74), vcvt_hight_f32_f16(v75)), (float32x4_t)xmmword_185005150)));
        a10 += v23;
        v73 -= 2;
        v71 += v28;
      }
      while (v73 > 1);
      a3 = (int8x8_t *)((char *)a3 + v71);
      result = (float16x4_t *)((char *)result + v71);
      v65 = v65 - v72 + v73;
LABEL_87:
      if (v65 <= 1)
        goto LABEL_90;
    }
    v82 = 0;
    while (1)
    {
      v83 = (float16x8_t)vrev16q_s8(*(int8x16_t *)&result->i8[v82]);
      v84 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v66) & 0xFF00FF00FF00FFLL))), v63);
      v85 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v66)) & 0xFF00FF00FF00FFLL))), v63);
      v86 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v82]), v21), v22);
      *(int8x16_t *)&result->i8[v82] = vrev16q_s8(vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v84), (int16x8_t)vcgtzq_f32(v85)), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vminnmq_f32(vmlaq_f32(vcvtq_f32_f16(*(float16x4_t *)v83.i8), v84, vcvtq_f32_f16(*(float16x4_t *)v86.i8)), (float32x4_t)xmmword_185005150)), vminnmq_f32(vmlaq_f32(vcvt_hight_f32_f16(v83), v85, vcvt_hight_f32_f16(v86)), (float32x4_t)xmmword_185005150)), (int8x16_t)v83));
      a10 += v23;
      v65 -= 2;
      if (v65 < 2)
        break;
      LOWORD(v66) = *(_WORD *)a10;
      v82 += v28;
      if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
      {
        result = (float16x4_t *)((char *)result + v82);
        a3 = (int8x8_t *)((char *)a3 + v82);
        goto LABEL_87;
      }
    }
    result = (float16x4_t *)((char *)result + v28 + v82);
    a3 = (int8x8_t *)((char *)a3 + v28 + v82);
LABEL_90:
    for (j = a12 - v64 + v65; j; --j)
    {
      if (*a10)
      {
        v88 = (float16x4_t)vrev16_s8((int8x8_t)*result);
        v89 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v63);
        *result = (float16x4_t)vrev16_s8(vbsl_s8((int8x8_t)vmovn_s32(vcgtzq_f32(v89)), (int8x8_t)vcvt_f16_f32(vminnmq_f32(vmlaq_f32(vcvtq_f32_f16(v88), v89, vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(vrev16_s8(*a3), v25), v26))), (float32x4_t)xmmword_185005150)), (int8x8_t)v88));
      }
      v90 = &a3[a14];
      a10 += a14;
      if ((unint64_t)v90 >= a8)
        v91 = -(uint64_t)a7;
      else
        v91 = 0;
      a3 = &v90[v91];
      result = (float16x4_t *)((char *)result + v29);
    }
    a10 += a11;
    result += a2;
    v92 = &a5[a4];
    if ((unint64_t)v92 >= a9)
      v93 = v27;
    else
      v93 = 0;
    v94 = &v92[v93];
    v95 = a8 + 8 * v93 + 8 * a4;
    a3 += a4;
    if (a9)
    {
      a3 = v94;
      a8 = v95;
      a5 = v94;
    }
    v61 = __OFSUB__(a13--, 1);
    if (!((a13 < 0) ^ v61 | (a13 == 0)))
      continue;
    return result;
  }
}

int8x8_t *composite_pixelmask<(CGCompositeOperation)13,_rgbaf16_t>(int8x8_t *result, uint64_t a2, int8x8_t *a3, uint64_t a4, int8x8_t *a5, int a6, int a7, unint64_t a8, unint64_t a9, char *a10, uint64_t a11, int a12, int a13, int a14, int a15, int a16, char a17)
{
  unsigned int v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64_t v29;
  int8x8_t v30;
  int8x8_t v31;
  int8x8_t v32;
  int8x8_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x16_t v37;
  float32x4_t v38;
  int8x16_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int8x16_t *v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  float16x8_t v50;
  float16x8_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int8x16_t *v56;
  int8x16_t *v57;
  int8x16_t *v58;
  int8x16_t *v59;
  int64_t v60;
  int64_t v61;
  uint64_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float16x8_t v65;
  float16x8_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  unint64_t i;
  float32x4_t v73;
  float16x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int8x8_t *v77;
  uint64_t v78;
  int8x8_t *v79;
  uint64_t v80;
  int8x8_t *v81;
  uint64_t v82;
  BOOL v83;
  int8x16_t v84;
  float32x4_t v85;
  int8x16_t v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  int8x16_t *v90;
  int8x16_t *v91;
  int8x16_t *v92;
  int8x16_t *v93;
  uint64_t v94;
  int64_t v95;
  unint64_t v96;
  float16x8_t v97;
  float16x8_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  int8x16_t *v103;
  int8x16_t *v104;
  int8x16_t *v105;
  int8x16_t *v106;
  int64_t v107;
  int64_t v108;
  uint64_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float16x8_t v112;
  float16x8_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  unint64_t j;
  float32x4_t v120;
  float16x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  int8x8_t *v124;
  uint64_t v125;
  int8x8_t *v126;
  uint64_t v127;
  int8x8_t *v128;
  uint64_t v129;

  if (a16)
    v19 = 0;
  else
    v19 = -1;
  v20 = (int8x16_t)vdupq_n_s16(v19);
  v21.i64[0] = 0xFFFF000000000000;
  v21.i64[1] = 0xFFFF000000000000;
  v22 = vmvnq_s8(vandq_s8(v20, v21));
  v23 = vandq_s8(v20, (int8x16_t)xmmword_185005140);
  if (a15)
    v24 = 0;
  else
    v24 = -1;
  v25 = (int8x16_t)vdupq_n_s16(v24);
  v26 = vandq_s8(v25, v21);
  v27 = vmvnq_s8(v26);
  v28 = vandq_s8(v25, (int8x16_t)xmmword_185005140);
  v29 = 2 * a14;
  v33.i32[0] = 0;
  v33.i16[2] = 0;
  v30.i32[0] = 0;
  v30.i16[2] = 0;
  v30.i16[3] = v19;
  v31 = vmvn_s8(v30);
  v32 = vand_s8(*(int8x8_t *)v20.i8, (int8x8_t)0x3C00000000000000);
  v33.i16[3] = v24;
  v34 = -(a6 * a4);
  v35 = 16 * a14;
  v36 = 8 * a14;
  if ((a17 & 0x30) != 0)
  {
    v37.i64[0] = -1;
    v37.i64[1] = -1;
    v38 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v39.i64[0] = 0x3C003C003C003C00;
    v39.i64[1] = 0x3C003C003C003C00;
    while (1)
    {
      v40 = (a8 - (unint64_t)a3) >> 3;
      if (v40 >= a12)
        v40 = a12;
      v41 = v40;
      if (v40 < 2)
        goto LABEL_43;
      while (1)
      {
        v42 = *(unsigned __int16 *)a10;
        if (!*(_WORD *)a10)
        {
          v56 = (int8x16_t *)&a10[v41];
          v57 = (int8x16_t *)a10;
          do
            v58 = v57++;
          while (v57 <= v56 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v58)) & 0x80) != 0);
          do
          {
            v59 = v58;
            v58 = (int8x16_t *)((char *)v58 + 4);
          }
          while (v58 <= v56 && !v59->i32[0]);
          if (v59 < v56)
          {
            while (!v59->i8[0])
            {
              v59 = (int8x16_t *)((char *)v59 + 1);
              if (v59 >= v56)
              {
                v59 = (int8x16_t *)&a10[v41];
                break;
              }
            }
          }
          v60 = (char *)v59 - a10;
          v61 = ((char *)v59 - a10) * a14;
          a3 += v61;
          result += v61;
          a10 += v61;
          v41 -= v60;
          goto LABEL_40;
        }
        if (v42 != 0xFFFF)
          break;
        v43 = (int8x16_t *)&a10[v41];
        v44 = (int8x16_t *)a10;
        do
          v45 = v44++;
        while (v44 <= v43 && (vminvq_u8((uint8x16_t)vceqq_s8(*v45, v37)) & 0x80) != 0);
        do
        {
          v46 = v45;
          v45 = (int8x16_t *)((char *)v45 + 4);
        }
        while (v45 <= v43 && v46->i32[0] == -1);
        if (v46 < v43)
        {
          while (v46->u8[0] == 255)
          {
            v46 = (int8x16_t *)((char *)v46 + 1);
            if (v46 >= v43)
            {
              v46 = (int8x16_t *)&a10[v41];
              break;
            }
          }
        }
        v47 = 0;
        v48 = (char *)v46 - a10;
        v49 = (char *)v46 - a10;
        do
        {
          v50 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v47], v22), v23);
          v51 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&result->i8[v47], v27), v28);
          v52 = vcvt_hight_f32_f16(v50);
          v53 = vcvtq_f32_f16(*(float16x4_t *)v50.i8);
          v54 = vcvt_hight_f32_f16(v51);
          v55 = vcvtq_f32_f16(*(float16x4_t *)v51.i8);
          *(int8x16_t *)&result->i8[v47] = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 3))), vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 3))), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vaddq_f32(
                                                                             vmlsq_laneq_f32(v55, v55, v53, 3),
                                                                             vmlsq_laneq_f32(v53, v53, v55, 3)),
                                                                           v53,
                                                                           v55)),
                                                            vmlaq_f32(vaddq_f32(vmlsq_laneq_f32(v54, v54, v52, 3), vmlsq_laneq_f32(v52, v52, v54, 3)), v52, v54)), (int8x16_t)v50), (int8x16_t)v51);
          a10 += v29;
          v49 -= 2;
          v47 += v35;
        }
        while (v49 > 1);
        a3 = (int8x8_t *)((char *)a3 + v47);
        result = (int8x8_t *)((char *)result + v47);
        v41 = v41 - v48 + v49;
LABEL_40:
        if (v41 <= 1)
          goto LABEL_43;
      }
      v62 = 0;
      while (1)
      {
        v63 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v42) & 0xFF00FF00FF00FFLL))), v38);
        v64 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v42)) & 0xFF00FF00FF00FFLL))), v38);
        v65 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v62], v22), v23);
        v66 = (float16x8_t)vbslq_s8(vandq_s8(v26, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v63), (int16x8_t)vcgtzq_f32(v64))), v39, *(int8x16_t *)&result->i8[v62]);
        v67 = vcvtq_f32_f16(*(float16x4_t *)v65.i8);
        v68 = vcvt_hight_f32_f16(v66);
        v69 = vmulq_f32(v64, vcvt_hight_f32_f16(v65));
        v70 = vmulq_f32(v63, v67);
        v71 = vcvtq_f32_f16(*(float16x4_t *)v66.i8);
        *(int8x16_t *)&result->i8[v62] = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v70, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v69, 3))), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v71, 3)), (int8x16_t)vmlaq_f32(vaddq_f32(vmlsq_laneq_f32(v71, v71, v70, 3), vmlsq_laneq_f32(v70, v70, v71, 3)), v70, v71), (int8x16_t)v70)), (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v68, 3)), (int8x16_t)vmlaq_f32(vaddq_f32(vmlsq_laneq_f32(v68, v68, v69, 3), vmlsq_laneq_f32(v69, v69, v68, 3)), v69,
                                                                                    v68),
                                                                       (int8x16_t)v69)),
                                           (int8x16_t)v66);
        a10 += v29;
        v41 -= 2;
        if (v41 < 2)
          break;
        LOWORD(v42) = *(_WORD *)a10;
        v62 += v35;
        if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
        {
          result = (int8x8_t *)((char *)result + v62);
          a3 = (int8x8_t *)((char *)a3 + v62);
          goto LABEL_40;
        }
      }
      result = (int8x8_t *)((char *)result + v35 + v62);
      a3 = (int8x8_t *)((char *)a3 + v35 + v62);
LABEL_43:
      for (i = a12 - v40 + v41; i; --i)
      {
        if (*a10)
        {
          v73 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v38);
          v74 = (float16x4_t)vbsl_s8(vand_s8(v33, (int8x8_t)vmovn_s32(vcgtzq_f32(v73))), (int8x8_t)0x3C003C003C003C00, *result);
          v75 = vcvtq_f32_f16(v74);
          v76 = vmulq_f32(v73, vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(*a3, v31), v32)));
          *result = vbsl_s8((int8x8_t)vmovn_s32(vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 3))), (int8x8_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v75, 3)), (int8x16_t)vmlaq_f32(vaddq_f32(vmlsq_laneq_f32(v76, v76, v75, 3), vmlsq_laneq_f32(v75, v75, v76, 3)), v76, v75), (int8x16_t)v76)), (int8x8_t)v74);
        }
        v77 = &a3[a14];
        a10 += a14;
        if ((unint64_t)v77 >= a8)
          v78 = -(uint64_t)a7;
        else
          v78 = 0;
        a3 = &v77[v78];
        result = (int8x8_t *)((char *)result + v36);
      }
      a10 += a11;
      result += a2;
      v79 = &a5[a4];
      if ((unint64_t)v79 >= a9)
        v80 = v34;
      else
        v80 = 0;
      v81 = &v79[v80];
      v82 = a8 + 8 * v80 + 8 * a4;
      a3 += a4;
      if (a9)
      {
        a3 = v81;
        a8 = v82;
        a5 = v81;
      }
      v83 = __OFSUB__(a13--, 1);
      if ((a13 < 0) ^ v83 | (a13 == 0))
        return result;
    }
  }
  v84.i64[0] = -1;
  v84.i64[1] = -1;
  v85 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v86.i64[0] = 0x3C003C003C003C00;
  v86.i64[1] = 0x3C003C003C003C00;
  while (2)
  {
    v87 = (a8 - (unint64_t)a3) >> 3;
    if (v87 >= a12)
      v87 = a12;
    v88 = v87;
    if (v87 < 2)
      goto LABEL_93;
    while (1)
    {
      v89 = *(unsigned __int16 *)a10;
      if (!*(_WORD *)a10)
      {
        v103 = (int8x16_t *)&a10[v88];
        v104 = (int8x16_t *)a10;
        do
          v105 = v104++;
        while (v104 <= v103 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v105)) & 0x80) != 0);
        do
        {
          v106 = v105;
          v105 = (int8x16_t *)((char *)v105 + 4);
        }
        while (v105 <= v103 && !v106->i32[0]);
        if (v106 < v103)
        {
          while (!v106->i8[0])
          {
            v106 = (int8x16_t *)((char *)v106 + 1);
            if (v106 >= v103)
            {
              v106 = (int8x16_t *)&a10[v88];
              break;
            }
          }
        }
        v107 = (char *)v106 - a10;
        v108 = ((char *)v106 - a10) * a14;
        a3 += v108;
        result += v108;
        a10 += v108;
        v88 -= v107;
        goto LABEL_90;
      }
      if (v89 != 0xFFFF)
        break;
      v90 = (int8x16_t *)&a10[v88];
      v91 = (int8x16_t *)a10;
      do
        v92 = v91++;
      while (v91 <= v90 && (vminvq_u8((uint8x16_t)vceqq_s8(*v92, v84)) & 0x80) != 0);
      do
      {
        v93 = v92;
        v92 = (int8x16_t *)((char *)v92 + 4);
      }
      while (v92 <= v90 && v93->i32[0] == -1);
      if (v93 < v90)
      {
        while (v93->u8[0] == 255)
        {
          v93 = (int8x16_t *)((char *)v93 + 1);
          if (v93 >= v90)
          {
            v93 = (int8x16_t *)&a10[v88];
            break;
          }
        }
      }
      v94 = 0;
      v95 = (char *)v93 - a10;
      v96 = (char *)v93 - a10;
      do
      {
        v97 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v94]), v22), v23);
        v98 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&result->i8[v94]), v27), v28);
        v99 = vcvt_hight_f32_f16(v97);
        v100 = vcvtq_f32_f16(*(float16x4_t *)v97.i8);
        v101 = vcvt_hight_f32_f16(v98);
        v102 = vcvtq_f32_f16(*(float16x4_t *)v98.i8);
        *(int8x16_t *)&result->i8[v94] = vrev16q_s8(vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v100, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v99, 3))), vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v102, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v101, 3))), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(
                                                                           vaddq_f32(vmlsq_laneq_f32(v102, v102, v100, 3), vmlsq_laneq_f32(v100, v100, v102, 3)), v100, v102)), vmlaq_f32(vaddq_f32(vmlsq_laneq_f32(v101, v101, v99, 3), vmlsq_laneq_f32(v99, v99, v101, 3)), v99, v101)), (int8x16_t)v97), (int8x16_t)v98));
        a10 += v29;
        v96 -= 2;
        v94 += v35;
      }
      while (v96 > 1);
      a3 = (int8x8_t *)((char *)a3 + v94);
      result = (int8x8_t *)((char *)result + v94);
      v88 = v88 - v95 + v96;
LABEL_90:
      if (v88 <= 1)
        goto LABEL_93;
    }
    v109 = 0;
    while (1)
    {
      v110 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v89) & 0xFF00FF00FF00FFLL))), v85);
      v111 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v89)) & 0xFF00FF00FF00FFLL))), v85);
      v112 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v109]), v22), v23);
      v113 = (float16x8_t)vbslq_s8(vandq_s8(v26, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v110), (int16x8_t)vcgtzq_f32(v111))), v86, vrev16q_s8(*(int8x16_t *)&result->i8[v109]));
      v114 = vcvtq_f32_f16(*(float16x4_t *)v112.i8);
      v115 = vcvtq_f32_f16(*(float16x4_t *)v113.i8);
      v116 = vcvt_hight_f32_f16(v113);
      v117 = vmulq_f32(v111, vcvt_hight_f32_f16(v112));
      v118 = vmulq_f32(v110, v114);
      *(int8x16_t *)&result->i8[v109] = vrev16q_s8(vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v118, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v117, 3))), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v115, 3)), (int8x16_t)vmlaq_f32(vaddq_f32(vmlsq_laneq_f32(v115, v115, v118, 3), vmlsq_laneq_f32(v118, v118, v115, 3)), v118, v115), (int8x16_t)v118)), (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v116, 3)), (int8x16_t)vmlaq_f32(vaddq_f32(vmlsq_laneq_f32(v116,
                                                                                         v116,
                                                                                         v117,
                                                                                         3),
                                                                                       vmlsq_laneq_f32(v117, v117, v116, 3)), v117, v116), (int8x16_t)v117)), (int8x16_t)v113));
      a10 += v29;
      v88 -= 2;
      if (v88 < 2)
        break;
      LOWORD(v89) = *(_WORD *)a10;
      v109 += v35;
      if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
      {
        result = (int8x8_t *)((char *)result + v109);
        a3 = (int8x8_t *)((char *)a3 + v109);
        goto LABEL_90;
      }
    }
    result = (int8x8_t *)((char *)result + v35 + v109);
    a3 = (int8x8_t *)((char *)a3 + v35 + v109);
LABEL_93:
    for (j = a12 - v87 + v88; j; --j)
    {
      if (*a10)
      {
        v120 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v85);
        v121 = (float16x4_t)vbsl_s8(vand_s8(v33, (int8x8_t)vmovn_s32(vcgtzq_f32(v120))), (int8x8_t)0x3C003C003C003C00, vrev16_s8(*result));
        v122 = vcvtq_f32_f16(v121);
        v123 = vmulq_f32(v120, vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(vrev16_s8(*a3), v31), v32)));
        *result = vrev16_s8(vbsl_s8((int8x8_t)vmovn_s32(vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v123, 3))), (int8x8_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v122, 3)), (int8x16_t)vmlaq_f32(vaddq_f32(vmlsq_laneq_f32(v123, v123, v122, 3), vmlsq_laneq_f32(v122, v122, v123, 3)), v123, v122), (int8x16_t)v123)), (int8x8_t)v121));
      }
      v124 = &a3[a14];
      a10 += a14;
      if ((unint64_t)v124 >= a8)
        v125 = -(uint64_t)a7;
      else
        v125 = 0;
      a3 = &v124[v125];
      result = (int8x8_t *)((char *)result + v36);
    }
    a10 += a11;
    result += a2;
    v126 = &a5[a4];
    if ((unint64_t)v126 >= a9)
      v127 = v34;
    else
      v127 = 0;
    v128 = &v126[v127];
    v129 = a8 + 8 * v127 + 8 * a4;
    a3 += a4;
    if (a9)
    {
      a3 = v128;
      a8 = v129;
      a5 = v128;
    }
    v83 = __OFSUB__(a13--, 1);
    if (!((a13 < 0) ^ v83 | (a13 == 0)))
      continue;
    return result;
  }
}

int8x8_t *composite_pixelmask<(CGCompositeOperation)14,_rgbaf16_t>(int8x8_t *result, uint64_t a2, int8x8_t *a3, uint64_t a4, int8x8_t *a5, int a6, int a7, unint64_t a8, unint64_t a9, char *a10, uint64_t a11, int a12, int a13, int a14, int a15, int a16, char a17)
{
  unsigned int v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  unsigned int v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64_t v29;
  int8x8_t v30;
  int8x8_t v31;
  int8x8_t v32;
  int8x8_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x16_t v42;
  float32x4_t v43;
  int8x16_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int8x16_t *v48;
  int8x16_t *v49;
  int8x16_t *v50;
  int8x16_t *v51;
  uint64_t v52;
  int64_t v53;
  unint64_t v54;
  float16x8_t v55;
  float16x8_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int8x16_t *v61;
  int8x16_t *v62;
  int8x16_t *v63;
  int8x16_t *v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float16x8_t v70;
  float16x8_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  unint64_t i;
  float32x4_t v78;
  float16x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int8x8_t *v82;
  uint64_t v83;
  int8x8_t *v84;
  uint64_t v85;
  int8x8_t *v86;
  uint64_t v87;
  int8x16_t v88;
  float32x4_t v89;
  int8x16_t v90;
  unint64_t v91;
  unint64_t v92;
  int v93;
  int8x16_t *v94;
  int8x16_t *v95;
  int8x16_t *v96;
  int8x16_t *v97;
  uint64_t v98;
  int64_t v99;
  unint64_t v100;
  float16x8_t v101;
  float16x8_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  int8x16_t *v107;
  int8x16_t *v108;
  int8x16_t *v109;
  int8x16_t *v110;
  int64_t v111;
  int64_t v112;
  uint64_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float16x8_t v116;
  float16x8_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  unint64_t j;
  float32x4_t v124;
  float16x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  int8x8_t *v128;
  uint64_t v129;
  int8x8_t *v130;
  uint64_t v131;
  int8x8_t *v132;
  uint64_t v133;

  if (a16)
    v19 = 0;
  else
    v19 = -1;
  v20 = (int8x16_t)vdupq_n_s16(v19);
  v21.i64[0] = 0xFFFF000000000000;
  v21.i64[1] = 0xFFFF000000000000;
  v22 = vmvnq_s8(vandq_s8(v20, v21));
  if (a15)
    v23 = 0;
  else
    v23 = -1;
  v24 = (int8x16_t)vdupq_n_s16(v23);
  v25 = vandq_s8(v20, (int8x16_t)xmmword_185005140);
  v26 = vandq_s8(v24, v21);
  v27 = vmvnq_s8(v26);
  v28 = vandq_s8(v24, (int8x16_t)xmmword_185005140);
  v29 = 2 * a14;
  v30.i32[0] = 0;
  v30.i16[2] = 0;
  v30.i16[3] = v19;
  v31 = vmvn_s8(v30);
  v32 = vand_s8(*(int8x8_t *)v20.i8, (int8x8_t)0x3C00000000000000);
  v33.i32[0] = 0;
  v33.i16[2] = 0;
  v33.i16[3] = v23;
  v34 = -(a6 * a4);
  v35 = 16 * a14;
  v36 = 8 * a14;
  __asm { FMOV            V17.4S, #1.0 }
  if ((a17 & 0x30) != 0)
  {
    v42.i64[0] = -1;
    v42.i64[1] = -1;
    v43 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v44.i64[0] = 0x3C003C003C003C00;
    v44.i64[1] = 0x3C003C003C003C00;
    while (1)
    {
      v45 = (a8 - (unint64_t)a3) >> 3;
      if (v45 >= a12)
        v45 = a12;
      v46 = v45;
      if (v45 < 2)
        goto LABEL_43;
      while (1)
      {
        v47 = *(unsigned __int16 *)a10;
        if (!*(_WORD *)a10)
        {
          v61 = (int8x16_t *)&a10[v46];
          v62 = (int8x16_t *)a10;
          do
            v63 = v62++;
          while (v62 <= v61 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v63)) & 0x80) != 0);
          do
          {
            v64 = v63;
            v63 = (int8x16_t *)((char *)v63 + 4);
          }
          while (v63 <= v61 && !v64->i32[0]);
          if (v64 < v61)
          {
            while (!v64->i8[0])
            {
              v64 = (int8x16_t *)((char *)v64 + 1);
              if (v64 >= v61)
              {
                v64 = (int8x16_t *)&a10[v46];
                break;
              }
            }
          }
          v65 = (char *)v64 - a10;
          v66 = ((char *)v64 - a10) * a14;
          a3 += v66;
          result += v66;
          a10 += v66;
          v46 -= v65;
          goto LABEL_40;
        }
        if (v47 != 0xFFFF)
          break;
        v48 = (int8x16_t *)&a10[v46];
        v49 = (int8x16_t *)a10;
        do
          v50 = v49++;
        while (v49 <= v48 && (vminvq_u8((uint8x16_t)vceqq_s8(*v50, v42)) & 0x80) != 0);
        do
        {
          v51 = v50;
          v50 = (int8x16_t *)((char *)v50 + 4);
        }
        while (v50 <= v48 && v51->i32[0] == -1);
        if (v51 < v48)
        {
          while (v51->u8[0] == 255)
          {
            v51 = (int8x16_t *)((char *)v51 + 1);
            if (v51 >= v48)
            {
              v51 = (int8x16_t *)&a10[v46];
              break;
            }
          }
        }
        v52 = 0;
        v53 = (char *)v51 - a10;
        v54 = (char *)v51 - a10;
        do
        {
          v55 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v52], v22), v25);
          v56 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&result->i8[v52], v27), v28);
          v57 = vcvt_hight_f32_f16(v55);
          v58 = vcvtq_f32_f16(*(float16x4_t *)v55.i8);
          v59 = vcvt_hight_f32_f16(v56);
          v60 = vcvtq_f32_f16(*(float16x4_t *)v56.i8);
          *(int8x16_t *)&result->i8[v52] = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 3))), vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(vmaxnmq_f32(vminnmq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 3), _Q17), (float32x4_t)0)), (int16x8_t)vcgtzq_f32(vmaxnmq_f32(
                                                                           vminnmq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 3), _Q17), (float32x4_t)0))), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vmlsq_f32(v58, v60, v58), v60)), vaddq_f32(vmlsq_f32(v57, v59, v57), v59)), (int8x16_t)v55), (int8x16_t)v56);
          a10 += v29;
          v54 -= 2;
          v52 += v35;
        }
        while (v54 > 1);
        a3 = (int8x8_t *)((char *)a3 + v52);
        result = (int8x8_t *)((char *)result + v52);
        v46 = v46 - v53 + v54;
LABEL_40:
        if (v46 <= 1)
          goto LABEL_43;
      }
      v67 = 0;
      while (1)
      {
        v68 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v47) & 0xFF00FF00FF00FFLL))), v43);
        v69 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v47)) & 0xFF00FF00FF00FFLL))), v43);
        v70 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v67], v22), v25);
        v71 = (float16x8_t)vbslq_s8(vandq_s8(v26, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v68), (int16x8_t)vcgtzq_f32(v69))), v44, *(int8x16_t *)&result->i8[v67]);
        v72 = vcvtq_f32_f16(*(float16x4_t *)v70.i8);
        v73 = vcvt_hight_f32_f16(v71);
        v74 = vmulq_f32(v69, vcvt_hight_f32_f16(v70));
        v75 = vmulq_f32(v68, v72);
        v76 = vcvtq_f32_f16(*(float16x4_t *)v71.i8);
        *(int8x16_t *)&result->i8[v67] = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v75, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v74, 3))), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmaxnmq_f32(vminnmq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 3), _Q17), (float32x4_t)0)), (int8x16_t)vaddq_f32(vmlsq_f32(v75, v76, v75), v76), (int8x16_t)v75)), (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmaxnmq_f32(vminnmq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v73, 3), _Q17), (float32x4_t)0)),
                                                                       (int8x16_t)vaddq_f32(vmlsq_f32(v74, v73, v74), v73), (int8x16_t)v74)), (int8x16_t)v71);
        a10 += v29;
        v46 -= 2;
        if (v46 < 2)
          break;
        LOWORD(v47) = *(_WORD *)a10;
        v67 += v35;
        if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
        {
          result = (int8x8_t *)((char *)result + v67);
          a3 = (int8x8_t *)((char *)a3 + v67);
          goto LABEL_40;
        }
      }
      result = (int8x8_t *)((char *)result + v35 + v67);
      a3 = (int8x8_t *)((char *)a3 + v35 + v67);
LABEL_43:
      for (i = a12 - v45 + v46; i; --i)
      {
        if (*a10)
        {
          v78 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v43);
          v79 = (float16x4_t)vbsl_s8(vand_s8(v33, (int8x8_t)vmovn_s32(vcgtzq_f32(v78))), (int8x8_t)0x3C003C003C003C00, *result);
          v80 = vcvtq_f32_f16(v79);
          v81 = vmulq_f32(v78, vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(*a3, v31), v32)));
          *result = vbsl_s8((int8x8_t)vdup_lane_s16(vmovn_s32(vcgtzq_f32(v81)), 3), (int8x8_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmaxnmq_f32(vminnmq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v80, 3), _Q17), (float32x4_t)0)), (int8x16_t)vaddq_f32(vmlsq_f32(v81, v80, v81), v80), (int8x16_t)v81)), (int8x8_t)v79);
        }
        v82 = &a3[a14];
        a10 += a14;
        if ((unint64_t)v82 >= a8)
          v83 = -(uint64_t)a7;
        else
          v83 = 0;
        a3 = &v82[v83];
        result = (int8x8_t *)((char *)result + v36);
      }
      a10 += a11;
      result += a2;
      v84 = &a5[a4];
      if ((unint64_t)v84 >= a9)
        v85 = v34;
      else
        v85 = 0;
      v86 = &v84[v85];
      v87 = a8 + 8 * v85 + 8 * a4;
      a3 += a4;
      if (a9)
      {
        a3 = v86;
        a8 = v87;
        a5 = v86;
      }
      _VF = __OFSUB__(a13--, 1);
      if ((a13 < 0) ^ _VF | (a13 == 0))
        return result;
    }
  }
  v88.i64[0] = -1;
  v88.i64[1] = -1;
  v89 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v90.i64[0] = 0x3C003C003C003C00;
  v90.i64[1] = 0x3C003C003C003C00;
  while (2)
  {
    v91 = (a8 - (unint64_t)a3) >> 3;
    if (v91 >= a12)
      v91 = a12;
    v92 = v91;
    if (v91 < 2)
      goto LABEL_93;
    while (1)
    {
      v93 = *(unsigned __int16 *)a10;
      if (!*(_WORD *)a10)
      {
        v107 = (int8x16_t *)&a10[v92];
        v108 = (int8x16_t *)a10;
        do
          v109 = v108++;
        while (v108 <= v107 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v109)) & 0x80) != 0);
        do
        {
          v110 = v109;
          v109 = (int8x16_t *)((char *)v109 + 4);
        }
        while (v109 <= v107 && !v110->i32[0]);
        if (v110 < v107)
        {
          while (!v110->i8[0])
          {
            v110 = (int8x16_t *)((char *)v110 + 1);
            if (v110 >= v107)
            {
              v110 = (int8x16_t *)&a10[v92];
              break;
            }
          }
        }
        v111 = (char *)v110 - a10;
        v112 = ((char *)v110 - a10) * a14;
        a3 += v112;
        result += v112;
        a10 += v112;
        v92 -= v111;
        goto LABEL_90;
      }
      if (v93 != 0xFFFF)
        break;
      v94 = (int8x16_t *)&a10[v92];
      v95 = (int8x16_t *)a10;
      do
        v96 = v95++;
      while (v95 <= v94 && (vminvq_u8((uint8x16_t)vceqq_s8(*v96, v88)) & 0x80) != 0);
      do
      {
        v97 = v96;
        v96 = (int8x16_t *)((char *)v96 + 4);
      }
      while (v96 <= v94 && v97->i32[0] == -1);
      if (v97 < v94)
      {
        while (v97->u8[0] == 255)
        {
          v97 = (int8x16_t *)((char *)v97 + 1);
          if (v97 >= v94)
          {
            v97 = (int8x16_t *)&a10[v92];
            break;
          }
        }
      }
      v98 = 0;
      v99 = (char *)v97 - a10;
      v100 = (char *)v97 - a10;
      do
      {
        v101 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v98]), v22), v25);
        v102 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&result->i8[v98]), v27), v28);
        v103 = vcvt_hight_f32_f16(v101);
        v104 = vcvtq_f32_f16(*(float16x4_t *)v101.i8);
        v105 = vcvt_hight_f32_f16(v102);
        v106 = vcvtq_f32_f16(*(float16x4_t *)v102.i8);
        *(int8x16_t *)&result->i8[v98] = vrev16q_s8(vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v104, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v103, 3))), vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(vmaxnmq_f32(vminnmq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v106, 3), _Q17), (float32x4_t)0)), (int16x8_t)vcgtzq_f32(
                                                                         vmaxnmq_f32(vminnmq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v105, 3), _Q17), (float32x4_t)0))), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vmlsq_f32(v104, v106, v104), v106)), vaddq_f32(vmlsq_f32(v103, v105, v103), v105)), (int8x16_t)v101), (int8x16_t)v102));
        a10 += v29;
        v100 -= 2;
        v98 += v35;
      }
      while (v100 > 1);
      a3 = (int8x8_t *)((char *)a3 + v98);
      result = (int8x8_t *)((char *)result + v98);
      v92 = v92 - v99 + v100;
LABEL_90:
      if (v92 <= 1)
        goto LABEL_93;
    }
    v113 = 0;
    while (1)
    {
      v114 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v93) & 0xFF00FF00FF00FFLL))), v89);
      v115 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v93)) & 0xFF00FF00FF00FFLL))), v89);
      v116 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v113]), v22), v25);
      v117 = (float16x8_t)vbslq_s8(vandq_s8(v26, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v114), (int16x8_t)vcgtzq_f32(v115))), v90, vrev16q_s8(*(int8x16_t *)&result->i8[v113]));
      v118 = vcvtq_f32_f16(*(float16x4_t *)v116.i8);
      v119 = vcvt_hight_f32_f16(v117);
      v120 = vcvtq_f32_f16(*(float16x4_t *)v117.i8);
      v121 = vmulq_f32(v115, vcvt_hight_f32_f16(v116));
      v122 = vmulq_f32(v114, v118);
      *(int8x16_t *)&result->i8[v113] = vrev16q_s8(vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v122, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v121, 3))), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmaxnmq_f32(vminnmq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v120, 3), _Q17), (float32x4_t)0)), (int8x16_t)vaddq_f32(vmlsq_f32(v122, v120, v122), v120), (int8x16_t)v122)), (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmaxnmq_f32(vminnmq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v119, 3), _Q17),
                                                                                       (float32x4_t)0)),
                                                                        (int8x16_t)vaddq_f32(vmlsq_f32(v121, v119, v121), v119), (int8x16_t)v121)), (int8x16_t)v117));
      a10 += v29;
      v92 -= 2;
      if (v92 < 2)
        break;
      LOWORD(v93) = *(_WORD *)a10;
      v113 += v35;
      if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
      {
        result = (int8x8_t *)((char *)result + v113);
        a3 = (int8x8_t *)((char *)a3 + v113);
        goto LABEL_90;
      }
    }
    result = (int8x8_t *)((char *)result + v35 + v113);
    a3 = (int8x8_t *)((char *)a3 + v35 + v113);
LABEL_93:
    for (j = a12 - v91 + v92; j; --j)
    {
      if (*a10)
      {
        v124 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v89);
        v125 = (float16x4_t)vbsl_s8(vand_s8(v33, (int8x8_t)vmovn_s32(vcgtzq_f32(v124))), (int8x8_t)0x3C003C003C003C00, vrev16_s8(*result));
        v126 = vcvtq_f32_f16(v125);
        v127 = vmulq_f32(v124, vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(vrev16_s8(*a3), v31), v32)));
        *result = vrev16_s8(vbsl_s8((int8x8_t)vdup_lane_s16(vmovn_s32(vcgtzq_f32(v127)), 3), (int8x8_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmaxnmq_f32(vminnmq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v126, 3), _Q17), (float32x4_t)0)), (int8x16_t)vaddq_f32(vmlsq_f32(v127, v126, v127), v126), (int8x16_t)v127)), (int8x8_t)v125));
      }
      v128 = &a3[a14];
      a10 += a14;
      if ((unint64_t)v128 >= a8)
        v129 = -(uint64_t)a7;
      else
        v129 = 0;
      a3 = &v128[v129];
      result = (int8x8_t *)((char *)result + v36);
    }
    a10 += a11;
    result += a2;
    v130 = &a5[a4];
    if ((unint64_t)v130 >= a9)
      v131 = v34;
    else
      v131 = 0;
    v132 = &v130[v131];
    v133 = a8 + 8 * v131 + 8 * a4;
    a3 += a4;
    if (a9)
    {
      a3 = v132;
      a8 = v133;
      a5 = v132;
    }
    _VF = __OFSUB__(a13--, 1);
    if (!((a13 < 0) ^ _VF | (a13 == 0)))
      continue;
    return result;
  }
}

int8x8_t *composite_pixelmask<(CGCompositeOperation)15,_rgbaf16_t>(int8x8_t *result, uint64_t a2, int8x8_t *a3, uint64_t a4, int8x8_t *a5, int a6, int a7, unint64_t a8, unint64_t a9, char *a10, uint64_t a11, int a12, int a13, int a14, int a15, int a16, char a17)
{
  unsigned int v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64_t v29;
  int8x8_t v30;
  int8x8_t v31;
  int8x8_t v32;
  int8x8_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float32x4_t v37;
  int8x16_t v38;
  int8x16_t v39;
  float32x4_t v40;
  int8x16_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  int8x16_t *v45;
  int8x16_t *v46;
  int8x16_t *v47;
  int8x16_t *v48;
  uint64_t v49;
  int64_t v50;
  unint64_t v51;
  float16x8_t v52;
  float16x8_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t *v66;
  int8x16_t *v67;
  int8x16_t *v68;
  int8x16_t *v69;
  int64_t v70;
  int64_t v71;
  uint64_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float16x8_t v75;
  float16x8_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  unint64_t i;
  float32x4_t v91;
  float16x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x8_t *v99;
  uint64_t v100;
  int8x8_t *v101;
  uint64_t v102;
  int8x8_t *v103;
  uint64_t v104;
  BOOL v105;
  float32x4_t v106;
  int8x16_t v107;
  int8x16_t v108;
  float32x4_t v109;
  int8x16_t v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  int8x16_t *v114;
  int8x16_t *v115;
  int8x16_t *v116;
  int8x16_t *v117;
  uint64_t v118;
  int64_t v119;
  unint64_t v120;
  float16x8_t v121;
  float16x8_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int8x16_t *v135;
  int8x16_t *v136;
  int8x16_t *v137;
  int8x16_t *v138;
  int64_t v139;
  int64_t v140;
  uint64_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float16x8_t v144;
  float16x8_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int8x16_t v158;
  unint64_t j;
  float32x4_t v160;
  float16x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  int8x16_t v166;
  int8x16_t v167;
  int8x8_t *v168;
  uint64_t v169;
  int8x8_t *v170;
  uint64_t v171;
  int8x8_t *v172;
  uint64_t v173;

  if (a16)
    v19 = 0;
  else
    v19 = -1;
  v20 = (int8x16_t)vdupq_n_s16(v19);
  v21.i64[0] = 0xFFFF000000000000;
  v21.i64[1] = 0xFFFF000000000000;
  v22 = vmvnq_s8(vandq_s8(v20, v21));
  v23 = vandq_s8(v20, (int8x16_t)xmmword_185005140);
  if (a15)
    v24 = 0;
  else
    v24 = -1;
  v25 = (int8x16_t)vdupq_n_s16(v24);
  v26 = vandq_s8(v25, v21);
  v27 = vmvnq_s8(v26);
  v28 = vandq_s8(v25, (int8x16_t)xmmword_185005140);
  v29 = 2 * a14;
  v33.i32[0] = 0;
  v33.i16[2] = 0;
  v30.i32[0] = 0;
  v30.i16[2] = 0;
  v30.i16[3] = v19;
  v31 = vmvn_s8(v30);
  v32 = vand_s8(*(int8x8_t *)v20.i8, (int8x8_t)0x3C00000000000000);
  v33.i16[3] = v24;
  v34 = -(a6 * a4);
  v35 = 16 * a14;
  v36 = 8 * a14;
  if ((a17 & 0x30) != 0)
  {
    v37.i64[0] = 0x3F0000003F000000;
    v37.i64[1] = 0x3F0000003F000000;
    v38.i64[0] = 0x8000000080000000;
    v38.i64[1] = 0x8000000080000000;
    v39.i64[0] = -1;
    v39.i64[1] = -1;
    v40 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v41.i64[0] = 0x3C003C003C003C00;
    v41.i64[1] = 0x3C003C003C003C00;
    while (1)
    {
      v42 = (a8 - (unint64_t)a3) >> 3;
      if (v42 >= a12)
        v42 = a12;
      v43 = v42;
      if (v42 < 2)
        goto LABEL_43;
      while (1)
      {
        v44 = *(unsigned __int16 *)a10;
        if (!*(_WORD *)a10)
        {
          v66 = (int8x16_t *)&a10[v43];
          v67 = (int8x16_t *)a10;
          do
            v68 = v67++;
          while (v67 <= v66 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v68)) & 0x80) != 0);
          do
          {
            v69 = v68;
            v68 = (int8x16_t *)((char *)v68 + 4);
          }
          while (v68 <= v66 && !v69->i32[0]);
          if (v69 < v66)
          {
            while (!v69->i8[0])
            {
              v69 = (int8x16_t *)((char *)v69 + 1);
              if (v69 >= v66)
              {
                v69 = (int8x16_t *)&a10[v43];
                break;
              }
            }
          }
          v70 = (char *)v69 - a10;
          v71 = ((char *)v69 - a10) * a14;
          a3 += v71;
          result += v71;
          a10 += v71;
          v43 -= v70;
          goto LABEL_40;
        }
        if (v44 != 0xFFFF)
          break;
        v45 = (int8x16_t *)&a10[v43];
        v46 = (int8x16_t *)a10;
        do
          v47 = v46++;
        while (v46 <= v45 && (vminvq_u8((uint8x16_t)vceqq_s8(*v47, v39)) & 0x80) != 0);
        do
        {
          v48 = v47;
          v47 = (int8x16_t *)((char *)v47 + 4);
        }
        while (v47 <= v45 && v48->i32[0] == -1);
        if (v48 < v45)
        {
          while (v48->u8[0] == 255)
          {
            v48 = (int8x16_t *)((char *)v48 + 1);
            if (v48 >= v45)
            {
              v48 = (int8x16_t *)&a10[v43];
              break;
            }
          }
        }
        v49 = 0;
        v50 = (char *)v48 - a10;
        v51 = (char *)v48 - a10;
        do
        {
          v52 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v49], v22), v23);
          v53 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&result->i8[v49], v27), v28);
          v54 = vcvt_hight_f32_f16(v52);
          v55 = vcvtq_f32_f16(*(float16x4_t *)v52.i8);
          v56 = vcvt_hight_f32_f16(v53);
          v57 = vcvtq_f32_f16(*(float16x4_t *)v53.i8);
          v58 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 3);
          v59 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 3);
          v60 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 3);
          v61 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 3);
          v62 = (int8x16_t)vcgtq_f32(vmulq_laneq_f32(v37, v57, 3), v57);
          v63 = (int8x16_t)vcgtq_f32(vmulq_laneq_f32(v37, v56, 3), v56);
          v64 = vandq_s8(v63, v38);
          v65 = vandq_s8(v62, v38);
          *(int8x16_t *)&result->i8[v49] = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v58), (int16x8_t)vcgtzq_f32(v59)), vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v60), (int16x8_t)vcgtzq_f32(v61)), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vaddq_f32(vmlaq_f32(v55, (float32x4_t)veorq_s8(v65, (int8x16_t)vsubq_f32(v60, v57)), v55), vmlaq_f32(v57,
                                                                               (float32x4_t)veorq_s8(v65, (int8x16_t)vsubq_f32(v58, v55)), v57)), (float32x4_t)vbslq_s8(v62, v38, (int8x16_t)vmulq_laneq_f32(v58, v57, 3)))), vsubq_f32(vaddq_f32(vmlaq_f32(v54, (float32x4_t)veorq_s8(v64, (int8x16_t)vsubq_f32(v61, v56)), v54), vmlaq_f32(v56, (float32x4_t)veorq_s8(v64,
                                                                                 (int8x16_t)vsubq_f32(v59, v54)),
                                                                  v56)),
                                                              (float32x4_t)vbslq_s8(v63, v38, (int8x16_t)vmulq_laneq_f32(v59, v56, 3)))), (int8x16_t)v52), (int8x16_t)v53);
          a10 += v29;
          v51 -= 2;
          v49 += v35;
        }
        while (v51 > 1);
        a3 = (int8x8_t *)((char *)a3 + v49);
        result = (int8x8_t *)((char *)result + v49);
        v43 = v43 - v50 + v51;
LABEL_40:
        if (v43 <= 1)
          goto LABEL_43;
      }
      v72 = 0;
      while (1)
      {
        v73 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v44) & 0xFF00FF00FF00FFLL))), v40);
        v74 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v44)) & 0xFF00FF00FF00FFLL))), v40);
        v75 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v72], v22), v23);
        v76 = (float16x8_t)vbslq_s8(vandq_s8(v26, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v73), (int16x8_t)vcgtzq_f32(v74))), v41, *(int8x16_t *)&result->i8[v72]);
        v77 = vcvtq_f32_f16(*(float16x4_t *)v75.i8);
        v78 = vcvtq_f32_f16(*(float16x4_t *)v76.i8);
        v79 = vmulq_f32(v74, vcvt_hight_f32_f16(v75));
        v80 = vmulq_f32(v73, v77);
        v81 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v80, 3);
        v82 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v79, 3);
        v83 = vcvt_hight_f32_f16(v76);
        v84 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v83, 3);
        v85 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 3);
        v86 = (int8x16_t)vcgtq_f32(vmulq_laneq_f32(v37, v83, 3), v83);
        v87 = (int8x16_t)vcgtq_f32(vmulq_laneq_f32(v37, v78, 3), v78);
        v88 = vandq_s8(v87, v38);
        v89 = vandq_s8(v86, v38);
        *(int8x16_t *)&result->i8[v72] = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v81), (int16x8_t)vcgtzq_f32(v82)), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v85), (int8x16_t)vsubq_f32(vaddq_f32(vmlaq_f32(v80, (float32x4_t)veorq_s8(v88, (int8x16_t)vsubq_f32(v85, v78)), v80), vmlaq_f32(v78, (float32x4_t)veorq_s8(v88, (int8x16_t)vsubq_f32(v81, v80)), v78)), (float32x4_t)vbslq_s8(v87, v38, (int8x16_t)vmulq_laneq_f32(v81, v78, 3))), (int8x16_t)v80)), (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v84), (int8x16_t)vsubq_f32(vaddq_f32(vmlaq_f32(v79, (float32x4_t)veorq_s8(v89, (int8x16_t)vsubq_f32(v84, v83)), v79), vmlaq_f32(v83, (float32x4_t)veorq_s8(v89, (int8x16_t)vsubq_f32(v82, v79)), v83)), (float32x4_t)vbslq_s8(
                                                                                                   v86,
                                                                                                   v38,
                                                                                                   (int8x16_t)vmulq_laneq_f32(v82, v83, 3))),
                                                                       (int8x16_t)v79)),
                                           (int8x16_t)v76);
        a10 += v29;
        v43 -= 2;
        if (v43 < 2)
          break;
        LOWORD(v44) = *(_WORD *)a10;
        v72 += v35;
        if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
        {
          result = (int8x8_t *)((char *)result + v72);
          a3 = (int8x8_t *)((char *)a3 + v72);
          goto LABEL_40;
        }
      }
      result = (int8x8_t *)((char *)result + v35 + v72);
      a3 = (int8x8_t *)((char *)a3 + v35 + v72);
LABEL_43:
      for (i = a12 - v42 + v43; i; --i)
      {
        if (*a10)
        {
          v91 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v40);
          v92 = (float16x4_t)vbsl_s8(vand_s8(v33, (int8x8_t)vmovn_s32(vcgtzq_f32(v91))), (int8x8_t)0x3C003C003C003C00, *result);
          v93 = vmulq_f32(v91, vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(*a3, v31), v32)));
          v94 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v93, 3);
          v95 = vcvtq_f32_f16(v92);
          v96 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v95, 3);
          v97 = (int8x16_t)vcgtq_f32(vmulq_laneq_f32(v37, v95, 3), v95);
          v98 = vandq_s8(v97, v38);
          *result = vbsl_s8((int8x8_t)vmovn_s32(vcgtzq_f32(v94)), (int8x8_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v96), (int8x16_t)vsubq_f32(vaddq_f32(vmlaq_f32(v93, (float32x4_t)veorq_s8(v98, (int8x16_t)vsubq_f32(v96, v95)), v93), vmlaq_f32(v95, (float32x4_t)veorq_s8(v98, (int8x16_t)vsubq_f32(v94, v93)), v95)), (float32x4_t)vbslq_s8(v97,
                                                                                        v38,
                                                                                        (int8x16_t)vmulq_laneq_f32(v96, v93, 3))), (int8x16_t)v93)), (int8x8_t)v92);
        }
        v99 = &a3[a14];
        a10 += a14;
        if ((unint64_t)v99 >= a8)
          v100 = -(uint64_t)a7;
        else
          v100 = 0;
        a3 = &v99[v100];
        result = (int8x8_t *)((char *)result + v36);
      }
      a10 += a11;
      result += a2;
      v101 = &a5[a4];
      if ((unint64_t)v101 >= a9)
        v102 = v34;
      else
        v102 = 0;
      v103 = &v101[v102];
      v104 = a8 + 8 * v102 + 8 * a4;
      a3 += a4;
      if (a9)
      {
        a3 = v103;
        a8 = v104;
        a5 = v103;
      }
      v105 = __OFSUB__(a13--, 1);
      if ((a13 < 0) ^ v105 | (a13 == 0))
        return result;
    }
  }
  v106.i64[0] = 0x3F0000003F000000;
  v106.i64[1] = 0x3F0000003F000000;
  v107.i64[0] = 0x8000000080000000;
  v107.i64[1] = 0x8000000080000000;
  v108.i64[0] = -1;
  v108.i64[1] = -1;
  v109 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v110.i64[0] = 0x3C003C003C003C00;
  v110.i64[1] = 0x3C003C003C003C00;
  while (2)
  {
    v111 = (a8 - (unint64_t)a3) >> 3;
    if (v111 >= a12)
      v111 = a12;
    v112 = v111;
    if (v111 < 2)
      goto LABEL_93;
    while (1)
    {
      v113 = *(unsigned __int16 *)a10;
      if (!*(_WORD *)a10)
      {
        v135 = (int8x16_t *)&a10[v112];
        v136 = (int8x16_t *)a10;
        do
          v137 = v136++;
        while (v136 <= v135 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v137)) & 0x80) != 0);
        do
        {
          v138 = v137;
          v137 = (int8x16_t *)((char *)v137 + 4);
        }
        while (v137 <= v135 && !v138->i32[0]);
        if (v138 < v135)
        {
          while (!v138->i8[0])
          {
            v138 = (int8x16_t *)((char *)v138 + 1);
            if (v138 >= v135)
            {
              v138 = (int8x16_t *)&a10[v112];
              break;
            }
          }
        }
        v139 = (char *)v138 - a10;
        v140 = ((char *)v138 - a10) * a14;
        a3 += v140;
        result += v140;
        a10 += v140;
        v112 -= v139;
        goto LABEL_90;
      }
      if (v113 != 0xFFFF)
        break;
      v114 = (int8x16_t *)&a10[v112];
      v115 = (int8x16_t *)a10;
      do
        v116 = v115++;
      while (v115 <= v114 && (vminvq_u8((uint8x16_t)vceqq_s8(*v116, v108)) & 0x80) != 0);
      do
      {
        v117 = v116;
        v116 = (int8x16_t *)((char *)v116 + 4);
      }
      while (v116 <= v114 && v117->i32[0] == -1);
      if (v117 < v114)
      {
        while (v117->u8[0] == 255)
        {
          v117 = (int8x16_t *)((char *)v117 + 1);
          if (v117 >= v114)
          {
            v117 = (int8x16_t *)&a10[v112];
            break;
          }
        }
      }
      v118 = 0;
      v119 = (char *)v117 - a10;
      v120 = (char *)v117 - a10;
      do
      {
        v121 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v118]), v22), v23);
        v122 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&result->i8[v118]), v27), v28);
        v123 = vcvt_hight_f32_f16(v121);
        v124 = vcvtq_f32_f16(*(float16x4_t *)v121.i8);
        v125 = vcvt_hight_f32_f16(v122);
        v126 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v124, 3);
        v127 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v123, 3);
        v128 = vcvtq_f32_f16(*(float16x4_t *)v122.i8);
        v129 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v128, 3);
        v130 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v125, 3);
        v131 = (int8x16_t)vcgtq_f32(vmulq_laneq_f32(v106, v128, 3), v128);
        v132 = (int8x16_t)vcgtq_f32(vmulq_laneq_f32(v106, v125, 3), v125);
        v133 = vandq_s8(v132, v107);
        v134 = vandq_s8(v131, v107);
        *(int8x16_t *)&result->i8[v118] = vrev16q_s8(vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v126), (int16x8_t)vcgtzq_f32(v127)), vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v129), (int16x8_t)vcgtzq_f32(v130)), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vaddq_f32(vmlaq_f32(v124, (float32x4_t)veorq_s8(v134, (int8x16_t)vsubq_f32(v129, v128)), v124), vmlaq_f32(
                                                                                v128,
                                                                                (float32x4_t)veorq_s8(v134, (int8x16_t)vsubq_f32(v126, v124)), v128)), (float32x4_t)vbslq_s8(v131, v107, (int8x16_t)vmulq_laneq_f32(v126, v128, 3)))), vsubq_f32(vaddq_f32(vmlaq_f32(v123, (float32x4_t)veorq_s8(v133, (int8x16_t)vsubq_f32(v130, v125)), v123), vmlaq_f32(v125, (float32x4_t)veorq_s8(v133,
                                                                                  (int8x16_t)vsubq_f32(v127, v123)),
                                                                   v125)),
                                                               (float32x4_t)vbslq_s8(v132, v107, (int8x16_t)vmulq_laneq_f32(v127, v125, 3)))), (int8x16_t)v121), (int8x16_t)v122));
        a10 += v29;
        v120 -= 2;
        v118 += v35;
      }
      while (v120 > 1);
      a3 = (int8x8_t *)((char *)a3 + v118);
      result = (int8x8_t *)((char *)result + v118);
      v112 = v112 - v119 + v120;
LABEL_90:
      if (v112 <= 1)
        goto LABEL_93;
    }
    v141 = 0;
    while (1)
    {
      v142 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v113) & 0xFF00FF00FF00FFLL))), v109);
      v143 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v113)) & 0xFF00FF00FF00FFLL))), v109);
      v144 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v141]), v22), v23);
      v145 = (float16x8_t)vbslq_s8(vandq_s8(v26, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v142), (int16x8_t)vcgtzq_f32(v143))), v110, vrev16q_s8(*(int8x16_t *)&result->i8[v141]));
      v146 = vcvtq_f32_f16(*(float16x4_t *)v144.i8);
      v147 = vcvtq_f32_f16(*(float16x4_t *)v145.i8);
      v148 = vcvt_hight_f32_f16(v145);
      v149 = vmulq_f32(v143, vcvt_hight_f32_f16(v144));
      v150 = vmulq_f32(v142, v146);
      v151 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v150, 3);
      v152 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v149, 3);
      v153 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v148, 3);
      v154 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v147, 3);
      v155 = (int8x16_t)vcgtq_f32(vmulq_laneq_f32(v106, v148, 3), v148);
      v156 = (int8x16_t)vcgtq_f32(vmulq_laneq_f32(v106, v147, 3), v147);
      v157 = vandq_s8(v156, v107);
      v158 = vandq_s8(v155, v107);
      *(int8x16_t *)&result->i8[v141] = vrev16q_s8(vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v151), (int16x8_t)vcgtzq_f32(v152)), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v154), (int8x16_t)vsubq_f32(vaddq_f32(vmlaq_f32(v150, (float32x4_t)veorq_s8(v157, (int8x16_t)vsubq_f32(v154, v147)), v150), vmlaq_f32(v147, (float32x4_t)veorq_s8(v157, (int8x16_t)vsubq_f32(v151, v150)), v147)), (float32x4_t)vbslq_s8(v156, v107, (int8x16_t)vmulq_laneq_f32(v151, v147, 3))), (int8x16_t)v150)), (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v153), (int8x16_t)vsubq_f32(vaddq_f32(vmlaq_f32(v149, (float32x4_t)veorq_s8(v158, (int8x16_t)vsubq_f32(v153, v148)), v149), vmlaq_f32(v148,
                                                                                         (float32x4_t)veorq_s8(v158, (int8x16_t)vsubq_f32(v152, v149)),
                                                                                         v148)),
                                                                                     (float32x4_t)vbslq_s8(v155, v107, (int8x16_t)vmulq_laneq_f32(v152, v148, 3))), (int8x16_t)v149)), (int8x16_t)v145));
      a10 += v29;
      v112 -= 2;
      if (v112 < 2)
        break;
      LOWORD(v113) = *(_WORD *)a10;
      v141 += v35;
      if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
      {
        result = (int8x8_t *)((char *)result + v141);
        a3 = (int8x8_t *)((char *)a3 + v141);
        goto LABEL_90;
      }
    }
    result = (int8x8_t *)((char *)result + v35 + v141);
    a3 = (int8x8_t *)((char *)a3 + v35 + v141);
LABEL_93:
    for (j = a12 - v111 + v112; j; --j)
    {
      if (*a10)
      {
        v160 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v109);
        v161 = (float16x4_t)vbsl_s8(vand_s8(v33, (int8x8_t)vmovn_s32(vcgtzq_f32(v160))), (int8x8_t)0x3C003C003C003C00, vrev16_s8(*result));
        v162 = vcvtq_f32_f16(v161);
        v163 = vmulq_f32(v160, vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(vrev16_s8(*a3), v31), v32)));
        v164 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v163, 3);
        v165 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v162, 3);
        v166 = (int8x16_t)vcgtq_f32(vmulq_laneq_f32(v106, v162, 3), v162);
        v167 = vandq_s8(v166, v107);
        *result = vrev16_s8(vbsl_s8((int8x8_t)vmovn_s32(vcgtzq_f32(v164)), (int8x8_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v165), (int8x16_t)vsubq_f32(vaddq_f32(vmlaq_f32(v163, (float32x4_t)veorq_s8(v167, (int8x16_t)vsubq_f32(v165, v162)), v163), vmlaq_f32(v162, (float32x4_t)veorq_s8(v167, (int8x16_t)vsubq_f32(v164, v163)), v162)), (float32x4_t)vbslq_s8(
                                                                                        v166,
                                                                                        v107,
                                                                                        (int8x16_t)vmulq_laneq_f32(v165, v163, 3))), (int8x16_t)v163)), (int8x8_t)v161));
      }
      v168 = &a3[a14];
      a10 += a14;
      if ((unint64_t)v168 >= a8)
        v169 = -(uint64_t)a7;
      else
        v169 = 0;
      a3 = &v168[v169];
      result = (int8x8_t *)((char *)result + v36);
    }
    a10 += a11;
    result += a2;
    v170 = &a5[a4];
    if ((unint64_t)v170 >= a9)
      v171 = v34;
    else
      v171 = 0;
    v172 = &v170[v171];
    v173 = a8 + 8 * v171 + 8 * a4;
    a3 += a4;
    if (a9)
    {
      a3 = v172;
      a8 = v173;
      a5 = v172;
    }
    v105 = __OFSUB__(a13--, 1);
    if (!((a13 < 0) ^ v105 | (a13 == 0)))
      continue;
    return result;
  }
}

int8x8_t *composite_pixelmask<(CGCompositeOperation)17,_rgbaf16_t>(int8x8_t *result, uint64_t a2, int8x8_t *a3, uint64_t a4, int8x8_t *a5, int a6, int a7, unint64_t a8, unint64_t a9, char *a10, uint64_t a11, int a12, int a13, int a14, int a15, int a16, char a17)
{
  unsigned int v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64_t v29;
  int8x8_t v30;
  int8x8_t v31;
  int8x8_t v32;
  int8x8_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x16_t v37;
  float32x4_t v38;
  int8x16_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int8x16_t *v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  float16x8_t v50;
  float16x8_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int8x16_t *v56;
  int8x16_t *v57;
  int8x16_t *v58;
  int8x16_t *v59;
  int64_t v60;
  int64_t v61;
  uint64_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float16x8_t v65;
  float16x8_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  unint64_t i;
  float32x4_t v73;
  float16x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int8x8_t *v77;
  uint64_t v78;
  int8x8_t *v79;
  uint64_t v80;
  int8x8_t *v81;
  uint64_t v82;
  BOOL v83;
  int8x16_t v84;
  float32x4_t v85;
  int8x16_t v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  int8x16_t *v90;
  int8x16_t *v91;
  int8x16_t *v92;
  int8x16_t *v93;
  uint64_t v94;
  int64_t v95;
  unint64_t v96;
  float16x8_t v97;
  float16x8_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  int8x16_t *v103;
  int8x16_t *v104;
  int8x16_t *v105;
  int8x16_t *v106;
  int64_t v107;
  int64_t v108;
  uint64_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float16x8_t v112;
  float16x8_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  unint64_t j;
  float32x4_t v120;
  float16x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  int8x8_t *v124;
  uint64_t v125;
  int8x8_t *v126;
  uint64_t v127;
  int8x8_t *v128;
  uint64_t v129;

  if (a16)
    v19 = 0;
  else
    v19 = -1;
  v20 = (int8x16_t)vdupq_n_s16(v19);
  v21.i64[0] = 0xFFFF000000000000;
  v21.i64[1] = 0xFFFF000000000000;
  v22 = vmvnq_s8(vandq_s8(v20, v21));
  v23 = vandq_s8(v20, (int8x16_t)xmmword_185005140);
  if (a15)
    v24 = 0;
  else
    v24 = -1;
  v25 = (int8x16_t)vdupq_n_s16(v24);
  v26 = vandq_s8(v25, v21);
  v27 = vmvnq_s8(v26);
  v28 = vandq_s8(v25, (int8x16_t)xmmword_185005140);
  v29 = 2 * a14;
  v33.i32[0] = 0;
  v33.i16[2] = 0;
  v30.i32[0] = 0;
  v30.i16[2] = 0;
  v30.i16[3] = v19;
  v31 = vmvn_s8(v30);
  v32 = vand_s8(*(int8x8_t *)v20.i8, (int8x8_t)0x3C00000000000000);
  v33.i16[3] = v24;
  v34 = -(a6 * a4);
  v35 = 16 * a14;
  v36 = 8 * a14;
  if ((a17 & 0x30) != 0)
  {
    v37.i64[0] = -1;
    v37.i64[1] = -1;
    v38 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v39.i64[0] = 0x3C003C003C003C00;
    v39.i64[1] = 0x3C003C003C003C00;
    while (1)
    {
      v40 = (a8 - (unint64_t)a3) >> 3;
      if (v40 >= a12)
        v40 = a12;
      v41 = v40;
      if (v40 < 2)
        goto LABEL_43;
      while (1)
      {
        v42 = *(unsigned __int16 *)a10;
        if (!*(_WORD *)a10)
        {
          v56 = (int8x16_t *)&a10[v41];
          v57 = (int8x16_t *)a10;
          do
            v58 = v57++;
          while (v57 <= v56 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v58)) & 0x80) != 0);
          do
          {
            v59 = v58;
            v58 = (int8x16_t *)((char *)v58 + 4);
          }
          while (v58 <= v56 && !v59->i32[0]);
          if (v59 < v56)
          {
            while (!v59->i8[0])
            {
              v59 = (int8x16_t *)((char *)v59 + 1);
              if (v59 >= v56)
              {
                v59 = (int8x16_t *)&a10[v41];
                break;
              }
            }
          }
          v60 = (char *)v59 - a10;
          v61 = ((char *)v59 - a10) * a14;
          a3 += v61;
          result += v61;
          a10 += v61;
          v41 -= v60;
          goto LABEL_40;
        }
        if (v42 != 0xFFFF)
          break;
        v43 = (int8x16_t *)&a10[v41];
        v44 = (int8x16_t *)a10;
        do
          v45 = v44++;
        while (v44 <= v43 && (vminvq_u8((uint8x16_t)vceqq_s8(*v45, v37)) & 0x80) != 0);
        do
        {
          v46 = v45;
          v45 = (int8x16_t *)((char *)v45 + 4);
        }
        while (v45 <= v43 && v46->i32[0] == -1);
        if (v46 < v43)
        {
          while (v46->u8[0] == 255)
          {
            v46 = (int8x16_t *)((char *)v46 + 1);
            if (v46 >= v43)
            {
              v46 = (int8x16_t *)&a10[v41];
              break;
            }
          }
        }
        v47 = 0;
        v48 = (char *)v46 - a10;
        v49 = (char *)v46 - a10;
        do
        {
          v50 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v47], v22), v23);
          v51 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&result->i8[v47], v27), v28);
          v52 = vcvt_hight_f32_f16(v50);
          v53 = vcvtq_f32_f16(*(float16x4_t *)v50.i8);
          v54 = vcvt_hight_f32_f16(v51);
          v55 = vcvtq_f32_f16(*(float16x4_t *)v51.i8);
          *(int8x16_t *)&result->i8[v47] = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 3))), vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 3))), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vmlsq_laneq_f32(v53, v53, v55, 3),
                                                                           vaddq_f32(vmaxnmq_f32(vmulq_laneq_f32(v55, v53, 3), vmulq_laneq_f32(v53, v55, 3)), vmlsq_laneq_f32(v55, v55, v53, 3)))), vaddq_f32(vmlsq_laneq_f32(v52, v52, v54, 3), vaddq_f32(vmaxnmq_f32(vmulq_laneq_f32(v54, v52, 3), vmulq_laneq_f32(v52, v54, 3)), vmlsq_laneq_f32(v54, v54, v52, 3)))), (int8x16_t)v50), (int8x16_t)v51);
          a10 += v29;
          v49 -= 2;
          v47 += v35;
        }
        while (v49 > 1);
        a3 = (int8x8_t *)((char *)a3 + v47);
        result = (int8x8_t *)((char *)result + v47);
        v41 = v41 - v48 + v49;
LABEL_40:
        if (v41 <= 1)
          goto LABEL_43;
      }
      v62 = 0;
      while (1)
      {
        v63 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v42) & 0xFF00FF00FF00FFLL))), v38);
        v64 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v42)) & 0xFF00FF00FF00FFLL))), v38);
        v65 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v62], v22), v23);
        v66 = (float16x8_t)vbslq_s8(vandq_s8(v26, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v63), (int16x8_t)vcgtzq_f32(v64))), v39, *(int8x16_t *)&result->i8[v62]);
        v67 = vcvtq_f32_f16(*(float16x4_t *)v65.i8);
        v68 = vcvtq_f32_f16(*(float16x4_t *)v66.i8);
        v69 = vmulq_f32(v64, vcvt_hight_f32_f16(v65));
        v70 = vmulq_f32(v63, v67);
        v71 = vcvt_hight_f32_f16(v66);
        *(int8x16_t *)&result->i8[v62] = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v70, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v69, 3))), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v68, 3)), (int8x16_t)vaddq_f32(vmlsq_laneq_f32(v70, v70, v68, 3), vaddq_f32(vmaxnmq_f32(vmulq_laneq_f32(v68, v70, 3), vmulq_laneq_f32(v70, v68, 3)), vmlsq_laneq_f32(v68, v68, v70, 3))), (int8x16_t)v70)), (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v71, 3)), (int8x16_t)vaddq_f32(vmlsq_laneq_f32(v69, v69, v71, 3), vaddq_f32(vmaxnmq_f32(vmulq_laneq_f32(v71, v69, 3),
                                                                                        vmulq_laneq_f32(v69, v71, 3)),
                                                                                      vmlsq_laneq_f32(v71, v71, v69, 3))),
                                                                       (int8x16_t)v69)),
                                           (int8x16_t)v66);
        a10 += v29;
        v41 -= 2;
        if (v41 < 2)
          break;
        LOWORD(v42) = *(_WORD *)a10;
        v62 += v35;
        if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
        {
          result = (int8x8_t *)((char *)result + v62);
          a3 = (int8x8_t *)((char *)a3 + v62);
          goto LABEL_40;
        }
      }
      result = (int8x8_t *)((char *)result + v35 + v62);
      a3 = (int8x8_t *)((char *)a3 + v35 + v62);
LABEL_43:
      for (i = a12 - v40 + v41; i; --i)
      {
        if (*a10)
        {
          v73 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v38);
          v74 = (float16x4_t)vbsl_s8(vand_s8(v33, (int8x8_t)vmovn_s32(vcgtzq_f32(v73))), (int8x8_t)0x3C003C003C003C00, *result);
          v75 = vmulq_f32(v73, vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(*a3, v31), v32)));
          v76 = vcvtq_f32_f16(v74);
          *result = vbsl_s8((int8x8_t)vmovn_s32(vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v75, 3))), (int8x8_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 3)), (int8x16_t)vaddq_f32(vmlsq_laneq_f32(v75, v75, v76, 3), vaddq_f32(vmaxnmq_f32(vmulq_laneq_f32(v76, v75, 3), vmulq_laneq_f32(v75, v76, 3)), vmlsq_laneq_f32(v76, v76, v75, 3))), (int8x16_t)v75)), (int8x8_t)v74);
        }
        v77 = &a3[a14];
        a10 += a14;
        if ((unint64_t)v77 >= a8)
          v78 = -(uint64_t)a7;
        else
          v78 = 0;
        a3 = &v77[v78];
        result = (int8x8_t *)((char *)result + v36);
      }
      a10 += a11;
      result += a2;
      v79 = &a5[a4];
      if ((unint64_t)v79 >= a9)
        v80 = v34;
      else
        v80 = 0;
      v81 = &v79[v80];
      v82 = a8 + 8 * v80 + 8 * a4;
      a3 += a4;
      if (a9)
      {
        a3 = v81;
        a8 = v82;
        a5 = v81;
      }
      v83 = __OFSUB__(a13--, 1);
      if ((a13 < 0) ^ v83 | (a13 == 0))
        return result;
    }
  }
  v84.i64[0] = -1;
  v84.i64[1] = -1;
  v85 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v86.i64[0] = 0x3C003C003C003C00;
  v86.i64[1] = 0x3C003C003C003C00;
  while (2)
  {
    v87 = (a8 - (unint64_t)a3) >> 3;
    if (v87 >= a12)
      v87 = a12;
    v88 = v87;
    if (v87 < 2)
      goto LABEL_93;
    while (1)
    {
      v89 = *(unsigned __int16 *)a10;
      if (!*(_WORD *)a10)
      {
        v103 = (int8x16_t *)&a10[v88];
        v104 = (int8x16_t *)a10;
        do
          v105 = v104++;
        while (v104 <= v103 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v105)) & 0x80) != 0);
        do
        {
          v106 = v105;
          v105 = (int8x16_t *)((char *)v105 + 4);
        }
        while (v105 <= v103 && !v106->i32[0]);
        if (v106 < v103)
        {
          while (!v106->i8[0])
          {
            v106 = (int8x16_t *)((char *)v106 + 1);
            if (v106 >= v103)
            {
              v106 = (int8x16_t *)&a10[v88];
              break;
            }
          }
        }
        v107 = (char *)v106 - a10;
        v108 = ((char *)v106 - a10) * a14;
        a3 += v108;
        result += v108;
        a10 += v108;
        v88 -= v107;
        goto LABEL_90;
      }
      if (v89 != 0xFFFF)
        break;
      v90 = (int8x16_t *)&a10[v88];
      v91 = (int8x16_t *)a10;
      do
        v92 = v91++;
      while (v91 <= v90 && (vminvq_u8((uint8x16_t)vceqq_s8(*v92, v84)) & 0x80) != 0);
      do
      {
        v93 = v92;
        v92 = (int8x16_t *)((char *)v92 + 4);
      }
      while (v92 <= v90 && v93->i32[0] == -1);
      if (v93 < v90)
      {
        while (v93->u8[0] == 255)
        {
          v93 = (int8x16_t *)((char *)v93 + 1);
          if (v93 >= v90)
          {
            v93 = (int8x16_t *)&a10[v88];
            break;
          }
        }
      }
      v94 = 0;
      v95 = (char *)v93 - a10;
      v96 = (char *)v93 - a10;
      do
      {
        v97 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v94]), v22), v23);
        v98 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&result->i8[v94]), v27), v28);
        v99 = vcvt_hight_f32_f16(v97);
        v100 = vcvtq_f32_f16(*(float16x4_t *)v97.i8);
        v101 = vcvtq_f32_f16(*(float16x4_t *)v98.i8);
        v102 = vcvt_hight_f32_f16(v98);
        *(int8x16_t *)&result->i8[v94] = vrev16q_s8(vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v100, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v99, 3))), vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v101, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v102, 3))), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(
                                                                           vmlsq_laneq_f32(v100, v100, v101, 3),
                                                                           vaddq_f32(vmaxnmq_f32(vmulq_laneq_f32(v101, v100, 3), vmulq_laneq_f32(v100, v101, 3)), vmlsq_laneq_f32(v101, v101, v100, 3)))), vaddq_f32(vmlsq_laneq_f32(v99, v99, v102, 3), vaddq_f32(vmaxnmq_f32(vmulq_laneq_f32(v102, v99, 3), vmulq_laneq_f32(v99, v102, 3)), vmlsq_laneq_f32(v102, v102, v99, 3)))), (int8x16_t)v97), (int8x16_t)v98));
        a10 += v29;
        v96 -= 2;
        v94 += v35;
      }
      while (v96 > 1);
      a3 = (int8x8_t *)((char *)a3 + v94);
      result = (int8x8_t *)((char *)result + v94);
      v88 = v88 - v95 + v96;
LABEL_90:
      if (v88 <= 1)
        goto LABEL_93;
    }
    v109 = 0;
    while (1)
    {
      v110 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v89) & 0xFF00FF00FF00FFLL))), v85);
      v111 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v89)) & 0xFF00FF00FF00FFLL))), v85);
      v112 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v109]), v22), v23);
      v113 = (float16x8_t)vbslq_s8(vandq_s8(v26, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v110), (int16x8_t)vcgtzq_f32(v111))), v86, vrev16q_s8(*(int8x16_t *)&result->i8[v109]));
      v114 = vcvtq_f32_f16(*(float16x4_t *)v112.i8);
      v115 = vcvtq_f32_f16(*(float16x4_t *)v113.i8);
      v116 = vcvt_hight_f32_f16(v113);
      v117 = vmulq_f32(v111, vcvt_hight_f32_f16(v112));
      v118 = vmulq_f32(v110, v114);
      *(int8x16_t *)&result->i8[v109] = vrev16q_s8(vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v118, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v117, 3))), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v115, 3)), (int8x16_t)vaddq_f32(vmlsq_laneq_f32(v118, v118, v115, 3), vaddq_f32(vmaxnmq_f32(vmulq_laneq_f32(v115, v118, 3), vmulq_laneq_f32(v118, v115, 3)), vmlsq_laneq_f32(v115, v115, v118, 3))), (int8x16_t)v118)), (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v116, 3)), (int8x16_t)vaddq_f32(vmlsq_laneq_f32(v117, v117,
                                                                                       v116,
                                                                                       3),
                                                                                     vaddq_f32(vmaxnmq_f32(vmulq_laneq_f32(v116, v117, 3), vmulq_laneq_f32(v117, v116, 3)), vmlsq_laneq_f32(v116, v116, v117, 3))), (int8x16_t)v117)), (int8x16_t)v113));
      a10 += v29;
      v88 -= 2;
      if (v88 < 2)
        break;
      LOWORD(v89) = *(_WORD *)a10;
      v109 += v35;
      if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
      {
        result = (int8x8_t *)((char *)result + v109);
        a3 = (int8x8_t *)((char *)a3 + v109);
        goto LABEL_90;
      }
    }
    result = (int8x8_t *)((char *)result + v35 + v109);
    a3 = (int8x8_t *)((char *)a3 + v35 + v109);
LABEL_93:
    for (j = a12 - v87 + v88; j; --j)
    {
      if (*a10)
      {
        v120 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v85);
        v121 = (float16x4_t)vbsl_s8(vand_s8(v33, (int8x8_t)vmovn_s32(vcgtzq_f32(v120))), (int8x8_t)0x3C003C003C003C00, vrev16_s8(*result));
        v122 = vcvtq_f32_f16(v121);
        v123 = vmulq_f32(v120, vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(vrev16_s8(*a3), v31), v32)));
        *result = vrev16_s8(vbsl_s8((int8x8_t)vmovn_s32(vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v123, 3))), (int8x8_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v122, 3)), (int8x16_t)vaddq_f32(vmlsq_laneq_f32(v123, v123, v122, 3), vaddq_f32(vmaxnmq_f32(vmulq_laneq_f32(v122, v123, 3), vmulq_laneq_f32(v123, v122, 3)), vmlsq_laneq_f32(v122, v122, v123, 3))), (int8x16_t)v123)), (int8x8_t)v121));
      }
      v124 = &a3[a14];
      a10 += a14;
      if ((unint64_t)v124 >= a8)
        v125 = -(uint64_t)a7;
      else
        v125 = 0;
      a3 = &v124[v125];
      result = (int8x8_t *)((char *)result + v36);
    }
    a10 += a11;
    result += a2;
    v126 = &a5[a4];
    if ((unint64_t)v126 >= a9)
      v127 = v34;
    else
      v127 = 0;
    v128 = &v126[v127];
    v129 = a8 + 8 * v127 + 8 * a4;
    a3 += a4;
    if (a9)
    {
      a3 = v128;
      a8 = v129;
      a5 = v128;
    }
    v83 = __OFSUB__(a13--, 1);
    if (!((a13 < 0) ^ v83 | (a13 == 0)))
      continue;
    return result;
  }
}

int8x8_t *composite_pixelmask<(CGCompositeOperation)16,_rgbaf16_t>(int8x8_t *result, uint64_t a2, int8x8_t *a3, uint64_t a4, int8x8_t *a5, int a6, int a7, unint64_t a8, unint64_t a9, char *a10, uint64_t a11, int a12, int a13, int a14, int a15, int a16, char a17)
{
  unsigned int v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64_t v29;
  int8x8_t v30;
  int8x8_t v31;
  int8x8_t v32;
  int8x8_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x16_t v37;
  float32x4_t v38;
  int8x16_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int8x16_t *v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  float16x8_t v50;
  float16x8_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int8x16_t *v56;
  int8x16_t *v57;
  int8x16_t *v58;
  int8x16_t *v59;
  int64_t v60;
  int64_t v61;
  uint64_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float16x8_t v65;
  float16x8_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  unint64_t i;
  float32x4_t v73;
  float16x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int8x8_t *v77;
  uint64_t v78;
  int8x8_t *v79;
  uint64_t v80;
  int8x8_t *v81;
  uint64_t v82;
  BOOL v83;
  int8x16_t v84;
  float32x4_t v85;
  int8x16_t v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  int8x16_t *v90;
  int8x16_t *v91;
  int8x16_t *v92;
  int8x16_t *v93;
  uint64_t v94;
  int64_t v95;
  unint64_t v96;
  float16x8_t v97;
  float16x8_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  int8x16_t *v103;
  int8x16_t *v104;
  int8x16_t *v105;
  int8x16_t *v106;
  int64_t v107;
  int64_t v108;
  uint64_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float16x8_t v112;
  float16x8_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  unint64_t j;
  float32x4_t v120;
  float16x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  int8x8_t *v124;
  uint64_t v125;
  int8x8_t *v126;
  uint64_t v127;
  int8x8_t *v128;
  uint64_t v129;

  if (a16)
    v19 = 0;
  else
    v19 = -1;
  v20 = (int8x16_t)vdupq_n_s16(v19);
  v21.i64[0] = 0xFFFF000000000000;
  v21.i64[1] = 0xFFFF000000000000;
  v22 = vmvnq_s8(vandq_s8(v20, v21));
  v23 = vandq_s8(v20, (int8x16_t)xmmword_185005140);
  if (a15)
    v24 = 0;
  else
    v24 = -1;
  v25 = (int8x16_t)vdupq_n_s16(v24);
  v26 = vandq_s8(v25, v21);
  v27 = vmvnq_s8(v26);
  v28 = vandq_s8(v25, (int8x16_t)xmmword_185005140);
  v29 = 2 * a14;
  v33.i32[0] = 0;
  v33.i16[2] = 0;
  v30.i32[0] = 0;
  v30.i16[2] = 0;
  v30.i16[3] = v19;
  v31 = vmvn_s8(v30);
  v32 = vand_s8(*(int8x8_t *)v20.i8, (int8x8_t)0x3C00000000000000);
  v33.i16[3] = v24;
  v34 = -(a6 * a4);
  v35 = 16 * a14;
  v36 = 8 * a14;
  if ((a17 & 0x30) != 0)
  {
    v37.i64[0] = -1;
    v37.i64[1] = -1;
    v38 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v39.i64[0] = 0x3C003C003C003C00;
    v39.i64[1] = 0x3C003C003C003C00;
    while (1)
    {
      v40 = (a8 - (unint64_t)a3) >> 3;
      if (v40 >= a12)
        v40 = a12;
      v41 = v40;
      if (v40 < 2)
        goto LABEL_43;
      while (1)
      {
        v42 = *(unsigned __int16 *)a10;
        if (!*(_WORD *)a10)
        {
          v56 = (int8x16_t *)&a10[v41];
          v57 = (int8x16_t *)a10;
          do
            v58 = v57++;
          while (v57 <= v56 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v58)) & 0x80) != 0);
          do
          {
            v59 = v58;
            v58 = (int8x16_t *)((char *)v58 + 4);
          }
          while (v58 <= v56 && !v59->i32[0]);
          if (v59 < v56)
          {
            while (!v59->i8[0])
            {
              v59 = (int8x16_t *)((char *)v59 + 1);
              if (v59 >= v56)
              {
                v59 = (int8x16_t *)&a10[v41];
                break;
              }
            }
          }
          v60 = (char *)v59 - a10;
          v61 = ((char *)v59 - a10) * a14;
          a3 += v61;
          result += v61;
          a10 += v61;
          v41 -= v60;
          goto LABEL_40;
        }
        if (v42 != 0xFFFF)
          break;
        v43 = (int8x16_t *)&a10[v41];
        v44 = (int8x16_t *)a10;
        do
          v45 = v44++;
        while (v44 <= v43 && (vminvq_u8((uint8x16_t)vceqq_s8(*v45, v37)) & 0x80) != 0);
        do
        {
          v46 = v45;
          v45 = (int8x16_t *)((char *)v45 + 4);
        }
        while (v45 <= v43 && v46->i32[0] == -1);
        if (v46 < v43)
        {
          while (v46->u8[0] == 255)
          {
            v46 = (int8x16_t *)((char *)v46 + 1);
            if (v46 >= v43)
            {
              v46 = (int8x16_t *)&a10[v41];
              break;
            }
          }
        }
        v47 = 0;
        v48 = (char *)v46 - a10;
        v49 = (char *)v46 - a10;
        do
        {
          v50 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v47], v22), v23);
          v51 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&result->i8[v47], v27), v28);
          v52 = vcvt_hight_f32_f16(v50);
          v53 = vcvtq_f32_f16(*(float16x4_t *)v50.i8);
          v54 = vcvt_hight_f32_f16(v51);
          v55 = vcvtq_f32_f16(*(float16x4_t *)v51.i8);
          *(int8x16_t *)&result->i8[v47] = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 3))), vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 3))), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vmlsq_laneq_f32(v53, v53, v55, 3),
                                                                           vaddq_f32(vminnmq_f32(vmulq_laneq_f32(v55, v53, 3), vmulq_laneq_f32(v53, v55, 3)), vmlsq_laneq_f32(v55, v55, v53, 3)))), vaddq_f32(vmlsq_laneq_f32(v52, v52, v54, 3), vaddq_f32(vminnmq_f32(vmulq_laneq_f32(v54, v52, 3), vmulq_laneq_f32(v52, v54, 3)), vmlsq_laneq_f32(v54, v54, v52, 3)))), (int8x16_t)v50), (int8x16_t)v51);
          a10 += v29;
          v49 -= 2;
          v47 += v35;
        }
        while (v49 > 1);
        a3 = (int8x8_t *)((char *)a3 + v47);
        result = (int8x8_t *)((char *)result + v47);
        v41 = v41 - v48 + v49;
LABEL_40:
        if (v41 <= 1)
          goto LABEL_43;
      }
      v62 = 0;
      while (1)
      {
        v63 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v42) & 0xFF00FF00FF00FFLL))), v38);
        v64 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v42)) & 0xFF00FF00FF00FFLL))), v38);
        v65 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v62], v22), v23);
        v66 = (float16x8_t)vbslq_s8(vandq_s8(v26, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v63), (int16x8_t)vcgtzq_f32(v64))), v39, *(int8x16_t *)&result->i8[v62]);
        v67 = vcvtq_f32_f16(*(float16x4_t *)v65.i8);
        v68 = vcvtq_f32_f16(*(float16x4_t *)v66.i8);
        v69 = vmulq_f32(v64, vcvt_hight_f32_f16(v65));
        v70 = vmulq_f32(v63, v67);
        v71 = vcvt_hight_f32_f16(v66);
        *(int8x16_t *)&result->i8[v62] = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v70, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v69, 3))), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v68, 3)), (int8x16_t)vaddq_f32(vmlsq_laneq_f32(v70, v70, v68, 3), vaddq_f32(vminnmq_f32(vmulq_laneq_f32(v68, v70, 3), vmulq_laneq_f32(v70, v68, 3)), vmlsq_laneq_f32(v68, v68, v70, 3))), (int8x16_t)v70)), (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v71, 3)), (int8x16_t)vaddq_f32(vmlsq_laneq_f32(v69, v69, v71, 3), vaddq_f32(vminnmq_f32(vmulq_laneq_f32(v71, v69, 3),
                                                                                        vmulq_laneq_f32(v69, v71, 3)),
                                                                                      vmlsq_laneq_f32(v71, v71, v69, 3))),
                                                                       (int8x16_t)v69)),
                                           (int8x16_t)v66);
        a10 += v29;
        v41 -= 2;
        if (v41 < 2)
          break;
        LOWORD(v42) = *(_WORD *)a10;
        v62 += v35;
        if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
        {
          result = (int8x8_t *)((char *)result + v62);
          a3 = (int8x8_t *)((char *)a3 + v62);
          goto LABEL_40;
        }
      }
      result = (int8x8_t *)((char *)result + v35 + v62);
      a3 = (int8x8_t *)((char *)a3 + v35 + v62);
LABEL_43:
      for (i = a12 - v40 + v41; i; --i)
      {
        if (*a10)
        {
          v73 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v38);
          v74 = (float16x4_t)vbsl_s8(vand_s8(v33, (int8x8_t)vmovn_s32(vcgtzq_f32(v73))), (int8x8_t)0x3C003C003C003C00, *result);
          v75 = vmulq_f32(v73, vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(*a3, v31), v32)));
          v76 = vcvtq_f32_f16(v74);
          *result = vbsl_s8((int8x8_t)vmovn_s32(vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v75, 3))), (int8x8_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 3)), (int8x16_t)vaddq_f32(vmlsq_laneq_f32(v75, v75, v76, 3), vaddq_f32(vminnmq_f32(vmulq_laneq_f32(v76, v75, 3), vmulq_laneq_f32(v75, v76, 3)), vmlsq_laneq_f32(v76, v76, v75, 3))), (int8x16_t)v75)), (int8x8_t)v74);
        }
        v77 = &a3[a14];
        a10 += a14;
        if ((unint64_t)v77 >= a8)
          v78 = -(uint64_t)a7;
        else
          v78 = 0;
        a3 = &v77[v78];
        result = (int8x8_t *)((char *)result + v36);
      }
      a10 += a11;
      result += a2;
      v79 = &a5[a4];
      if ((unint64_t)v79 >= a9)
        v80 = v34;
      else
        v80 = 0;
      v81 = &v79[v80];
      v82 = a8 + 8 * v80 + 8 * a4;
      a3 += a4;
      if (a9)
      {
        a3 = v81;
        a8 = v82;
        a5 = v81;
      }
      v83 = __OFSUB__(a13--, 1);
      if ((a13 < 0) ^ v83 | (a13 == 0))
        return result;
    }
  }
  v84.i64[0] = -1;
  v84.i64[1] = -1;
  v85 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v86.i64[0] = 0x3C003C003C003C00;
  v86.i64[1] = 0x3C003C003C003C00;
  while (2)
  {
    v87 = (a8 - (unint64_t)a3) >> 3;
    if (v87 >= a12)
      v87 = a12;
    v88 = v87;
    if (v87 < 2)
      goto LABEL_93;
    while (1)
    {
      v89 = *(unsigned __int16 *)a10;
      if (!*(_WORD *)a10)
      {
        v103 = (int8x16_t *)&a10[v88];
        v104 = (int8x16_t *)a10;
        do
          v105 = v104++;
        while (v104 <= v103 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v105)) & 0x80) != 0);
        do
        {
          v106 = v105;
          v105 = (int8x16_t *)((char *)v105 + 4);
        }
        while (v105 <= v103 && !v106->i32[0]);
        if (v106 < v103)
        {
          while (!v106->i8[0])
          {
            v106 = (int8x16_t *)((char *)v106 + 1);
            if (v106 >= v103)
            {
              v106 = (int8x16_t *)&a10[v88];
              break;
            }
          }
        }
        v107 = (char *)v106 - a10;
        v108 = ((char *)v106 - a10) * a14;
        a3 += v108;
        result += v108;
        a10 += v108;
        v88 -= v107;
        goto LABEL_90;
      }
      if (v89 != 0xFFFF)
        break;
      v90 = (int8x16_t *)&a10[v88];
      v91 = (int8x16_t *)a10;
      do
        v92 = v91++;
      while (v91 <= v90 && (vminvq_u8((uint8x16_t)vceqq_s8(*v92, v84)) & 0x80) != 0);
      do
      {
        v93 = v92;
        v92 = (int8x16_t *)((char *)v92 + 4);
      }
      while (v92 <= v90 && v93->i32[0] == -1);
      if (v93 < v90)
      {
        while (v93->u8[0] == 255)
        {
          v93 = (int8x16_t *)((char *)v93 + 1);
          if (v93 >= v90)
          {
            v93 = (int8x16_t *)&a10[v88];
            break;
          }
        }
      }
      v94 = 0;
      v95 = (char *)v93 - a10;
      v96 = (char *)v93 - a10;
      do
      {
        v97 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v94]), v22), v23);
        v98 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&result->i8[v94]), v27), v28);
        v99 = vcvt_hight_f32_f16(v97);
        v100 = vcvtq_f32_f16(*(float16x4_t *)v97.i8);
        v101 = vcvtq_f32_f16(*(float16x4_t *)v98.i8);
        v102 = vcvt_hight_f32_f16(v98);
        *(int8x16_t *)&result->i8[v94] = vrev16q_s8(vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v100, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v99, 3))), vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v101, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v102, 3))), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(
                                                                           vmlsq_laneq_f32(v100, v100, v101, 3),
                                                                           vaddq_f32(vminnmq_f32(vmulq_laneq_f32(v101, v100, 3), vmulq_laneq_f32(v100, v101, 3)), vmlsq_laneq_f32(v101, v101, v100, 3)))), vaddq_f32(vmlsq_laneq_f32(v99, v99, v102, 3), vaddq_f32(vminnmq_f32(vmulq_laneq_f32(v102, v99, 3), vmulq_laneq_f32(v99, v102, 3)), vmlsq_laneq_f32(v102, v102, v99, 3)))), (int8x16_t)v97), (int8x16_t)v98));
        a10 += v29;
        v96 -= 2;
        v94 += v35;
      }
      while (v96 > 1);
      a3 = (int8x8_t *)((char *)a3 + v94);
      result = (int8x8_t *)((char *)result + v94);
      v88 = v88 - v95 + v96;
LABEL_90:
      if (v88 <= 1)
        goto LABEL_93;
    }
    v109 = 0;
    while (1)
    {
      v110 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v89) & 0xFF00FF00FF00FFLL))), v85);
      v111 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v89)) & 0xFF00FF00FF00FFLL))), v85);
      v112 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v109]), v22), v23);
      v113 = (float16x8_t)vbslq_s8(vandq_s8(v26, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v110), (int16x8_t)vcgtzq_f32(v111))), v86, vrev16q_s8(*(int8x16_t *)&result->i8[v109]));
      v114 = vcvtq_f32_f16(*(float16x4_t *)v112.i8);
      v115 = vcvtq_f32_f16(*(float16x4_t *)v113.i8);
      v116 = vcvt_hight_f32_f16(v113);
      v117 = vmulq_f32(v111, vcvt_hight_f32_f16(v112));
      v118 = vmulq_f32(v110, v114);
      *(int8x16_t *)&result->i8[v109] = vrev16q_s8(vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v118, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v117, 3))), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v115, 3)), (int8x16_t)vaddq_f32(vmlsq_laneq_f32(v118, v118, v115, 3), vaddq_f32(vminnmq_f32(vmulq_laneq_f32(v115, v118, 3), vmulq_laneq_f32(v118, v115, 3)), vmlsq_laneq_f32(v115, v115, v118, 3))), (int8x16_t)v118)), (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v116, 3)), (int8x16_t)vaddq_f32(vmlsq_laneq_f32(v117, v117,
                                                                                       v116,
                                                                                       3),
                                                                                     vaddq_f32(vminnmq_f32(vmulq_laneq_f32(v116, v117, 3), vmulq_laneq_f32(v117, v116, 3)), vmlsq_laneq_f32(v116, v116, v117, 3))), (int8x16_t)v117)), (int8x16_t)v113));
      a10 += v29;
      v88 -= 2;
      if (v88 < 2)
        break;
      LOWORD(v89) = *(_WORD *)a10;
      v109 += v35;
      if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
      {
        result = (int8x8_t *)((char *)result + v109);
        a3 = (int8x8_t *)((char *)a3 + v109);
        goto LABEL_90;
      }
    }
    result = (int8x8_t *)((char *)result + v35 + v109);
    a3 = (int8x8_t *)((char *)a3 + v35 + v109);
LABEL_93:
    for (j = a12 - v87 + v88; j; --j)
    {
      if (*a10)
      {
        v120 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v85);
        v121 = (float16x4_t)vbsl_s8(vand_s8(v33, (int8x8_t)vmovn_s32(vcgtzq_f32(v120))), (int8x8_t)0x3C003C003C003C00, vrev16_s8(*result));
        v122 = vcvtq_f32_f16(v121);
        v123 = vmulq_f32(v120, vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(vrev16_s8(*a3), v31), v32)));
        *result = vrev16_s8(vbsl_s8((int8x8_t)vmovn_s32(vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v123, 3))), (int8x8_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v122, 3)), (int8x16_t)vaddq_f32(vmlsq_laneq_f32(v123, v123, v122, 3), vaddq_f32(vminnmq_f32(vmulq_laneq_f32(v122, v123, 3), vmulq_laneq_f32(v123, v122, 3)), vmlsq_laneq_f32(v122, v122, v123, 3))), (int8x16_t)v123)), (int8x8_t)v121));
      }
      v124 = &a3[a14];
      a10 += a14;
      if ((unint64_t)v124 >= a8)
        v125 = -(uint64_t)a7;
      else
        v125 = 0;
      a3 = &v124[v125];
      result = (int8x8_t *)((char *)result + v36);
    }
    a10 += a11;
    result += a2;
    v126 = &a5[a4];
    if ((unint64_t)v126 >= a9)
      v127 = v34;
    else
      v127 = 0;
    v128 = &v126[v127];
    v129 = a8 + 8 * v127 + 8 * a4;
    a3 += a4;
    if (a9)
    {
      a3 = v128;
      a8 = v129;
      a5 = v128;
    }
    v83 = __OFSUB__(a13--, 1);
    if (!((a13 < 0) ^ v83 | (a13 == 0)))
      continue;
    return result;
  }
}

int8x8_t *composite_pixelmask<(CGCompositeOperation)19,_rgbaf16_t>(int8x8_t *result, uint64_t a2, int8x8_t *a3, uint64_t a4, int8x8_t *a5, int a6, int a7, unint64_t a8, unint64_t a9, char *a10, uint64_t a11, int a12, int a13, int a14, int a15, int a16, char a17)
{
  unsigned int v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64_t v29;
  int8x8_t v30;
  int8x8_t v31;
  int8x8_t v32;
  int8x8_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x16_t v37;
  float32x4_t v38;
  int8x16_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int8x16_t *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  float16x8_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v56;
  float32x4_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  float32x4_t v61;
  int8x16_t v62;
  float32x4_t v63;
  int8x16_t v64;
  float32x4_t v65;
  float32x4_t v66;
  __int16 v71;
  __int16 v73;
  int16x4_t v74;
  __int16 v77;
  __int16 v80;
  __int16 v83;
  __int16 v86;
  __int16 v89;
  int8x16_t v92;
  __int16 v93;
  int8x16_t *v94;
  int8x16_t *v95;
  int8x16_t *v96;
  int8x16_t *v97;
  int64_t v98;
  int64_t v99;
  uint64_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float16x8_t v103;
  float16x8_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int8x16_t v111;
  int8x16_t v112;
  float32x4_t v113;
  float32x4_t v114;
  unint64_t i;
  float32x4_t v116;
  float16x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  int8x16_t v121;
  float32x4_t v122;
  int8x8_t *v123;
  uint64_t v124;
  int8x8_t *v125;
  uint64_t v126;
  int8x8_t *v127;
  uint64_t v128;
  int8x16_t v129;
  float32x4_t v130;
  int8x16_t v131;
  unint64_t v132;
  unint64_t v133;
  int v134;
  int8x16_t *v135;
  int8x16_t *v136;
  int8x16_t *v137;
  int8x16_t *v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  float16x8_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  float32x4_t v153;
  float32x4_t v154;
  int8x16_t v155;
  float32x4_t v156;
  __int16 v157;
  __int16 v159;
  int16x4_t v160;
  __int16 v163;
  float32x4_t v166;
  int8x16_t v167;
  float32x4_t v168;
  __int16 v169;
  float32x4_t v170;
  __int16 v173;
  __int16 v176;
  int16x4_t v179;
  __int16 v180;
  __int16 v183;
  int8x16_t *v184;
  int8x16_t *v185;
  int8x16_t *v186;
  int8x16_t *v187;
  int64_t v188;
  int64_t v189;
  uint64_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float16x8_t v193;
  float16x8_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  int8x16_t v201;
  int8x16_t v202;
  float32x4_t v203;
  float32x4_t v204;
  unint64_t j;
  float32x4_t v206;
  float16x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  int8x16_t v211;
  float32x4_t v212;
  int8x8_t *v213;
  uint64_t v214;
  int8x8_t *v215;
  uint64_t v216;
  int8x8_t *v217;
  uint64_t v218;

  if (a16)
    v19 = 0;
  else
    v19 = -1;
  v20 = (int8x16_t)vdupq_n_s16(v19);
  v21.i64[0] = 0xFFFF000000000000;
  v21.i64[1] = 0xFFFF000000000000;
  v22 = vmvnq_s8(vandq_s8(v20, v21));
  v23 = vandq_s8(v20, (int8x16_t)xmmword_185005140);
  if (a15)
    v24 = 0;
  else
    v24 = -1;
  v25 = (int8x16_t)vdupq_n_s16(v24);
  v26 = vandq_s8(v25, v21);
  v27 = vmvnq_s8(v26);
  v28 = vandq_s8(v25, (int8x16_t)xmmword_185005140);
  v29 = 2 * a14;
  v30.i32[0] = 0;
  v30.i16[2] = 0;
  v30.i16[3] = v19;
  v31 = vmvn_s8(v30);
  v32 = vand_s8(*(int8x8_t *)v20.i8, (int8x8_t)0x3C00000000000000);
  v33.i32[0] = 0;
  v33.i16[2] = 0;
  v33.i16[3] = v24;
  v34 = -(a6 * a4);
  v35 = 16 * a14;
  v36 = 8 * a14;
  if ((a17 & 0x30) != 0)
  {
    v37.i64[0] = -1;
    v37.i64[1] = -1;
    v38 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v39.i64[0] = 0x3C003C003C003C00;
    v39.i64[1] = 0x3C003C003C003C00;
    while (1)
    {
      v40 = (a8 - (unint64_t)a3) >> 3;
      if (v40 >= a12)
        v40 = a12;
      v41 = v40;
      if (v40 < 2)
        goto LABEL_67;
      while (1)
      {
        v42 = *(unsigned __int16 *)a10;
        if (!*(_WORD *)a10)
        {
          v94 = (int8x16_t *)&a10[v41];
          v95 = (int8x16_t *)a10;
          do
            v96 = v95++;
          while (v95 <= v94 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v96)) & 0x80) != 0);
          do
          {
            v97 = v96;
            v96 = (int8x16_t *)((char *)v96 + 4);
          }
          while (v96 <= v94 && !v97->i32[0]);
          if (v97 < v94)
          {
            while (!v97->i8[0])
            {
              v97 = (int8x16_t *)((char *)v97 + 1);
              if (v97 >= v94)
              {
                v97 = (int8x16_t *)&a10[v41];
                break;
              }
            }
          }
          v98 = (char *)v97 - a10;
          v99 = ((char *)v97 - a10) * a14;
          a3 += v99;
          result += v99;
          a10 += v99;
          v41 -= v98;
          goto LABEL_64;
        }
        if (v42 != 0xFFFF)
          break;
        v43 = (int8x16_t *)&a10[v41];
        v44 = (int8x16_t *)a10;
        do
          v45 = v44++;
        while (v44 <= v43 && (vminvq_u8((uint8x16_t)vceqq_s8(*v45, v37)) & 0x80) != 0);
        do
        {
          v46 = v45;
          v45 = (int8x16_t *)((char *)v45 + 4);
        }
        while (v45 <= v43 && v46->i32[0] == -1);
        if (v46 < v43)
        {
          while (v46->u8[0] == 255)
          {
            v46 = (int8x16_t *)((char *)v46 + 1);
            if (v46 >= v43)
            {
              v46 = (int8x16_t *)&a10[v41];
              break;
            }
          }
        }
        v47 = 0;
        v48 = (char *)v46 - a10;
        v49 = v48;
        do
        {
          _Q22 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v47], v22), v23);
          v51 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&result->i8[v47], v27), v28);
          v52 = vcvt_hight_f32_f16(_Q22);
          v53 = vcvtq_f32_f16(*(float16x4_t *)_Q22.i8);
          v54 = vcvt_hight_f32_f16(v51);
          _Q30 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 3);
          v56 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 3);
          v57 = vcvtq_f32_f16(*(float16x4_t *)v51.i8);
          v58 = (int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 3));
          v59 = (int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 3));
          v60 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(_Q30), (int16x8_t)vcgtzq_f32(v56));
          v61 = vdivq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)vmulq_f32(v53, v53), 3), v53);
          v62 = vbicq_s8((int8x16_t)v53, v59);
          v63 = vdivq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)vmulq_f32(v52, v52), 3), v52);
          v64 = vbicq_s8((int8x16_t)v52, v58);
          v65 = vaddq_f32(vmlsq_laneq_f32(v52, v52, v54, 3), vaddq_f32(vmulq_laneq_f32(v56, v54, 3), vmlsq_laneq_f32(v54, v54, v52, 3)));
          v66 = vaddq_f32(vmlsq_laneq_f32(v53, v53, v57, 3), vaddq_f32(vmulq_laneq_f32(_Q30, v57, 3), vmlsq_laneq_f32(v57, v57, v53, 3)));
          _Q30.i16[0] = _Q22.i16[1];
          __asm { FCVT            S30, H30 }
          if (_Q30.f32[0] == 0.0)
            v71 = 0;
          else
            v71 = -1;
          __asm { FCVT            S30, H22 }
          if (_S30 == 0.0)
            v73 = 0;
          else
            v73 = -1;
          v74.i16[0] = v73;
          v74.i16[1] = v71;
          _H31 = _Q22.i16[2];
          __asm { FCVT            S31, H31 }
          if (_S31 == 0.0)
            v77 = 0;
          else
            v77 = -1;
          v74.i16[2] = v77;
          _H31 = _Q22.i16[3];
          __asm { FCVT            S31, H31 }
          if (_S31 == 0.0)
            v80 = 0;
          else
            v80 = -1;
          v74.i16[3] = v80;
          _H31 = _Q22.i16[5];
          __asm { FCVT            S31, H31 }
          if (_S31 == 0.0)
            v83 = 0;
          else
            v83 = -1;
          _H31 = _Q22.i16[4];
          __asm { FCVT            S31, H31 }
          if (_S31 == 0.0)
            v86 = 0;
          else
            v86 = -1;
          _H31 = _Q22.i16[6];
          __asm { FCVT            S31, H31 }
          if (_S31 == 0.0)
            v89 = 0;
          else
            v89 = -1;
          _H22 = _Q22.i16[7];
          __asm { FCVT            S22, H22 }
          _ZF = _S22 == 0.0;
          _Q22.i16[0] = v86;
          v92 = (int8x16_t)vmovl_s16(v74);
          _Q22.i16[1] = v83;
          _Q22.i16[2] = v89;
          if (_ZF)
            v93 = 0;
          else
            v93 = -1;
          _Q22.i16[3] = v93;
          *(int8x16_t *)&result->i8[v47] = vbslq_s8(v60, (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vmaxnmq_f32(vmlaq_f32(vmlsq_laneq_f32(v66, v61, v57, 3), v57, v61), (float32x4_t)0), vandq_s8(v59, v92)), v62)), (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vmaxnmq_f32(vmlaq_f32(vmlsq_laneq_f32(v65, v63, v54, 3), v54, v63), (float32x4_t)0),
                                                                           vandq_s8(v58, (int8x16_t)vmovl_s16(*(int16x4_t *)_Q22.i8))), v64)), (int8x16_t)v51);
          a10 += v29;
          v49 -= 2;
          v47 += v35;
        }
        while (v49 > 1);
        a3 = (int8x8_t *)((char *)a3 + v47);
        result = (int8x8_t *)((char *)result + v47);
        v41 = v41 - v48 + v49;
LABEL_64:
        if (v41 <= 1)
          goto LABEL_67;
      }
      v100 = 0;
      while (1)
      {
        v101 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v42) & 0xFF00FF00FF00FFLL))), v38);
        v102 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v42)) & 0xFF00FF00FF00FFLL))), v38);
        v103 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v100], v22), v23);
        v104 = (float16x8_t)vbslq_s8(vandq_s8(v26, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v101), (int16x8_t)vcgtzq_f32(v102))), v39, *(int8x16_t *)&result->i8[v100]);
        v105 = vcvtq_f32_f16(*(float16x4_t *)v104.i8);
        v106 = vmulq_f32(v102, vcvt_hight_f32_f16(v103));
        v107 = vmulq_f32(v101, vcvtq_f32_f16(*(float16x4_t *)v103.i8));
        v108 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v107, 3);
        v109 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v106, 3);
        v110 = vcvt_hight_f32_f16(v104);
        v111 = (int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v110, 3));
        v112 = (int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v105, 3));
        v113 = vdivq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)vmulq_f32(v106, v106), 3), v106);
        v114 = vdivq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)vmulq_f32(v107, v107), 3), v107);
        *(int8x16_t *)&result->i8[v100] = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v108), (int16x8_t)vcgtzq_f32(v109)), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vmaxnmq_f32(vmlaq_f32(vmlsq_laneq_f32(vaddq_f32(vmlsq_laneq_f32(v107, v107, v105, 3), vaddq_f32(vmulq_laneq_f32(v108, v105, 3), vmlsq_laneq_f32(v105, v105, v107, 3))), v114, v105, 3), v105, v114), (float32x4_t)0), vbicq_s8(v112, (int8x16_t)vceqzq_f32(v107))), vbicq_s8((int8x16_t)v107, v112))), (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vmaxnmq_f32(vmlaq_f32(vmlsq_laneq_f32(vaddq_f32(
                                                                                             vmlsq_laneq_f32(v106, v106, v110, 3), vaddq_f32(vmulq_laneq_f32(v109, v110, 3), vmlsq_laneq_f32(v110, v110, v106, 3))), v113, v110, 3), v110, v113),
                                                                                       (float32x4_t)0),
                                                                          vbicq_s8(v111, (int8x16_t)vceqzq_f32(v106))),
                                                                        vbicq_s8((int8x16_t)v106, v111))),
                                            (int8x16_t)v104);
        a10 += v29;
        v41 -= 2;
        if (v41 < 2)
          break;
        LOWORD(v42) = *(_WORD *)a10;
        v100 += v35;
        if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
        {
          result = (int8x8_t *)((char *)result + v100);
          a3 = (int8x8_t *)((char *)a3 + v100);
          goto LABEL_64;
        }
      }
      result = (int8x8_t *)((char *)result + v35 + v100);
      a3 = (int8x8_t *)((char *)a3 + v35 + v100);
LABEL_67:
      for (i = a12 - v40 + v41; i; --i)
      {
        if (*a10)
        {
          v116 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v38);
          v117 = (float16x4_t)vbsl_s8(vand_s8(v33, (int8x8_t)vmovn_s32(vcgtzq_f32(v116))), (int8x8_t)0x3C003C003C003C00, *result);
          v118 = vcvtq_f32_f16(v117);
          v119 = vmulq_f32(v116, vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(*a3, v31), v32)));
          v120 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v118, 3);
          v121 = (int8x16_t)vcgtzq_f32(v120);
          v122 = vdivq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)vmulq_f32(v119, v119), 3), v119);
          *result = vbsl_s8((int8x8_t)vmovn_s32(vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v119, 3))), (int8x8_t)vcvt_f16_f32((float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vmaxnmq_f32(vmlaq_f32(vmlsq_laneq_f32(vaddq_f32(vmlsq_laneq_f32(v119, v119, v118, 3), vaddq_f32(vmlsq_laneq_f32(v118, v118, v119, 3), vmulq_laneq_f32(v120, v119, 3))), v122, v118, 3), v118, v122), (float32x4_t)0), vbicq_s8(v121, (int8x16_t)vceqzq_f32(v119))), vbicq_s8((int8x16_t)v119, v121))),
                      (int8x8_t)v117);
        }
        v123 = &a3[a14];
        a10 += a14;
        if ((unint64_t)v123 >= a8)
          v124 = -(uint64_t)a7;
        else
          v124 = 0;
        a3 = &v123[v124];
        result = (int8x8_t *)((char *)result + v36);
      }
      a10 += a11;
      result += a2;
      v125 = &a5[a4];
      if ((unint64_t)v125 >= a9)
        v126 = v34;
      else
        v126 = 0;
      v127 = &v125[v126];
      v128 = a8 + 8 * v126 + 8 * a4;
      a3 += a4;
      if (a9)
      {
        a3 = v127;
        a8 = v128;
        a5 = v127;
      }
      _VF = __OFSUB__(a13--, 1);
      if ((a13 < 0) ^ _VF | (a13 == 0))
        return result;
    }
  }
  v129.i64[0] = -1;
  v129.i64[1] = -1;
  v130 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v131.i64[0] = 0x3C003C003C003C00;
  v131.i64[1] = 0x3C003C003C003C00;
  while (2)
  {
    v132 = (a8 - (unint64_t)a3) >> 3;
    if (v132 >= a12)
      v132 = a12;
    v133 = v132;
    if (v132 < 2)
      goto LABEL_141;
    while (1)
    {
      v134 = *(unsigned __int16 *)a10;
      if (!*(_WORD *)a10)
      {
        v184 = (int8x16_t *)&a10[v133];
        v185 = (int8x16_t *)a10;
        do
          v186 = v185++;
        while (v185 <= v184 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v186)) & 0x80) != 0);
        do
        {
          v187 = v186;
          v186 = (int8x16_t *)((char *)v186 + 4);
        }
        while (v186 <= v184 && !v187->i32[0]);
        if (v187 < v184)
        {
          while (!v187->i8[0])
          {
            v187 = (int8x16_t *)((char *)v187 + 1);
            if (v187 >= v184)
            {
              v187 = (int8x16_t *)&a10[v133];
              break;
            }
          }
        }
        v188 = (char *)v187 - a10;
        v189 = ((char *)v187 - a10) * a14;
        a3 += v189;
        result += v189;
        a10 += v189;
        v133 -= v188;
        goto LABEL_138;
      }
      if (v134 != 0xFFFF)
        break;
      v135 = (int8x16_t *)&a10[v133];
      v136 = (int8x16_t *)a10;
      do
        v137 = v136++;
      while (v136 <= v135 && (vminvq_u8((uint8x16_t)vceqq_s8(*v137, v129)) & 0x80) != 0);
      do
      {
        v138 = v137;
        v137 = (int8x16_t *)((char *)v137 + 4);
      }
      while (v137 <= v135 && v138->i32[0] == -1);
      if (v138 < v135)
      {
        while (v138->u8[0] == 255)
        {
          v138 = (int8x16_t *)((char *)v138 + 1);
          if (v138 >= v135)
          {
            v138 = (int8x16_t *)&a10[v133];
            break;
          }
        }
      }
      v139 = 0;
      v140 = (char *)v138 - a10;
      v141 = v140;
      do
      {
        _Q22 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v139]), v22), v23);
        v143 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&result->i8[v139]), v27), v28);
        v144 = vcvt_hight_f32_f16(_Q22);
        v145 = vcvtq_f32_f16(*(float16x4_t *)_Q22.i8);
        v146 = vcvt_hight_f32_f16(v143);
        v147 = vcvtq_f32_f16(*(float16x4_t *)v143.i8);
        v148 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v145, 3);
        _Q31 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v144, 3);
        v150 = (int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v146, 3));
        v151 = (int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v147, 3));
        v152 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v148), (int16x8_t)vcgtzq_f32(_Q31));
        v153 = vaddq_f32(vmulq_laneq_f32(v148, v147, 3), vmlsq_laneq_f32(v147, v147, v145, 3));
        v154 = vdivq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)vmulq_f32(v144, v144), 3), v144);
        v155 = vbicq_s8((int8x16_t)v144, v150);
        v156 = vaddq_f32(vmlsq_laneq_f32(v144, v144, v146, 3), vaddq_f32(vmulq_laneq_f32(_Q31, v146, 3), vmlsq_laneq_f32(v146, v146, v144, 3)));
        _Q31.i16[0] = _Q22.i16[1];
        __asm { FCVT            S31, H31 }
        if (_Q31.f32[0] == 0.0)
          v157 = 0;
        else
          v157 = -1;
        __asm { FCVT            S31, H22 }
        if (_S31 == 0.0)
          v159 = 0;
        else
          v159 = -1;
        v160.i16[0] = v159;
        _H10 = _Q22.i16[2];
        __asm { FCVT            S10, H10 }
        if (_S10 == 0.0)
          v163 = 0;
        else
          v163 = -1;
        _H10 = _Q22.i16[3];
        __asm { FCVT            S10, H10 }
        _ZF = _S10 == 0.0;
        v166 = vdivq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)vmulq_f32(v145, v145), 3), v145);
        v167 = vbicq_s8((int8x16_t)v145, v151);
        v160.i16[1] = v157;
        v168 = vmlsq_laneq_f32(v145, v145, v147, 3);
        v160.i16[2] = v163;
        if (_ZF)
          v169 = 0;
        else
          v169 = -1;
        v160.i16[3] = v169;
        v170 = vaddq_f32(v168, v153);
        _H30 = _Q22.i16[5];
        __asm { FCVT            S30, H30 }
        if (_S30 == 0.0)
          v173 = 0;
        else
          v173 = -1;
        _H30 = _Q22.i16[4];
        __asm { FCVT            S30, H30 }
        if (_S30 == 0.0)
          v176 = 0;
        else
          v176 = -1;
        _H30 = _Q22.i16[6];
        __asm { FCVT            S30, H30 }
        _ZF = _S30 == 0.0;
        v179.i16[0] = v176;
        v179.i16[1] = v173;
        if (_ZF)
          v180 = 0;
        else
          v180 = -1;
        _H22 = _Q22.i16[7];
        __asm { FCVT            S22, H22 }
        v179.i16[2] = v180;
        if (_S22 == 0.0)
          v183 = 0;
        else
          v183 = -1;
        v179.i16[3] = v183;
        *(int8x16_t *)&result->i8[v139] = vrev16q_s8(vbslq_s8(v152, (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vmaxnmq_f32(vmlaq_f32(vmlsq_laneq_f32(v170, v166, v147, 3), v147, v166), (float32x4_t)0), vandq_s8(v151, (int8x16_t)vmovl_s16(v160))), v167)), (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vmaxnmq_f32(vmlaq_f32(vmlsq_laneq_f32(v156, v154, v146, 3), v146, v154),
                                                                                         (float32x4_t)0),
                                                                            vandq_s8(v150, (int8x16_t)vmovl_s16(v179))),
                                                                          v155)),
                                              (int8x16_t)v143));
        a10 += v29;
        v141 -= 2;
        v139 += v35;
      }
      while (v141 > 1);
      a3 = (int8x8_t *)((char *)a3 + v139);
      result = (int8x8_t *)((char *)result + v139);
      v133 = v133 - v140 + v141;
LABEL_138:
      if (v133 <= 1)
        goto LABEL_141;
    }
    v190 = 0;
    while (1)
    {
      v191 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v134) & 0xFF00FF00FF00FFLL))), v130);
      v192 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v134)) & 0xFF00FF00FF00FFLL))), v130);
      v193 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v190]), v22), v23);
      v194 = (float16x8_t)vbslq_s8(vandq_s8(v26, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v191), (int16x8_t)vcgtzq_f32(v192))), v131, vrev16q_s8(*(int8x16_t *)&result->i8[v190]));
      v195 = vcvt_hight_f32_f16(v194);
      v196 = vcvtq_f32_f16(*(float16x4_t *)v194.i8);
      v197 = vmulq_f32(v192, vcvt_hight_f32_f16(v193));
      v198 = vmulq_f32(v191, vcvtq_f32_f16(*(float16x4_t *)v193.i8));
      v199 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v198, 3);
      v200 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v197, 3);
      v201 = (int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v195, 3));
      v202 = (int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v196, 3));
      v203 = vdivq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)vmulq_f32(v197, v197), 3), v197);
      v204 = vdivq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)vmulq_f32(v198, v198), 3), v198);
      *(int8x16_t *)&result->i8[v190] = vrev16q_s8(vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v199), (int16x8_t)vcgtzq_f32(v200)), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vmaxnmq_f32(vmlaq_f32(vmlsq_laneq_f32(vaddq_f32(vmlsq_laneq_f32(v198, v198, v196, 3), vaddq_f32(vmulq_laneq_f32(v199, v196, 3), vmlsq_laneq_f32(v196, v196, v198, 3))), v204, v196, 3), v196, v204), (float32x4_t)0), vbicq_s8(v202, (int8x16_t)vceqzq_f32(v198))), vbicq_s8((int8x16_t)v198, v202))), (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vmaxnmq_f32(vmlaq_f32(vmlsq_laneq_f32(
                                                                                           vaddq_f32(vmlsq_laneq_f32(v197, v197, v195, 3), vaddq_f32(vmulq_laneq_f32(v200, v195, 3), vmlsq_laneq_f32(v195, v195, v197, 3))), v203, v195, 3), v195,
                                                                                         v203),
                                                                                       (float32x4_t)0),
                                                                          vbicq_s8(v201, (int8x16_t)vceqzq_f32(v197))),
                                                                        vbicq_s8((int8x16_t)v197, v201))),
                                            (int8x16_t)v194));
      a10 += v29;
      v133 -= 2;
      if (v133 < 2)
        break;
      LOWORD(v134) = *(_WORD *)a10;
      v190 += v35;
      if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
      {
        result = (int8x8_t *)((char *)result + v190);
        a3 = (int8x8_t *)((char *)a3 + v190);
        goto LABEL_138;
      }
    }
    result = (int8x8_t *)((char *)result + v35 + v190);
    a3 = (int8x8_t *)((char *)a3 + v35 + v190);
LABEL_141:
    for (j = a12 - v132 + v133; j; --j)
    {
      if (*a10)
      {
        v206 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v130);
        v207 = (float16x4_t)vbsl_s8(vand_s8(v33, (int8x8_t)vmovn_s32(vcgtzq_f32(v206))), (int8x8_t)0x3C003C003C003C00, vrev16_s8(*result));
        v208 = vcvtq_f32_f16(v207);
        v209 = vmulq_f32(v206, vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(vrev16_s8(*a3), v31), v32)));
        v210 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v208, 3);
        v211 = (int8x16_t)vcgtzq_f32(v210);
        v212 = vdivq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)vmulq_f32(v209, v209), 3), v209);
        *result = vrev16_s8(vbsl_s8((int8x8_t)vmovn_s32(vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v209, 3))), (int8x8_t)vcvt_f16_f32((float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vmaxnmq_f32(vmlaq_f32(vmlsq_laneq_f32(vaddq_f32(vmlsq_laneq_f32(v209, v209, v208, 3), vaddq_f32(vmlsq_laneq_f32(v208, v208, v209, 3), vmulq_laneq_f32(v210, v209, 3))), v212, v208, 3), v208, v212), (float32x4_t)0), vbicq_s8(v211, (int8x16_t)vceqzq_f32(v209))),
                                                            vbicq_s8((int8x16_t)v209, v211))),
                      (int8x8_t)v207));
      }
      v213 = &a3[a14];
      a10 += a14;
      if ((unint64_t)v213 >= a8)
        v214 = -(uint64_t)a7;
      else
        v214 = 0;
      a3 = &v213[v214];
      result = (int8x8_t *)((char *)result + v36);
    }
    a10 += a11;
    result += a2;
    v215 = &a5[a4];
    if ((unint64_t)v215 >= a9)
      v216 = v34;
    else
      v216 = 0;
    v217 = &v215[v216];
    v218 = a8 + 8 * v216 + 8 * a4;
    a3 += a4;
    if (a9)
    {
      a3 = v217;
      a8 = v218;
      a5 = v217;
    }
    _VF = __OFSUB__(a13--, 1);
    if (!((a13 < 0) ^ _VF | (a13 == 0)))
      continue;
    return result;
  }
}

int8x8_t *composite_pixelmask<(CGCompositeOperation)21,_rgbaf16_t>(int8x8_t *result, uint64_t a2, int8x8_t *a3, uint64_t a4, int8x8_t *a5, int a6, int a7, unint64_t a8, unint64_t a9, char *a10, uint64_t a11, int a12, int a13, int a14, int a15, int a16, char a17)
{
  unsigned int v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64_t v29;
  int8x8_t v30;
  int8x8_t v31;
  int8x8_t v32;
  int8x8_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float32x4_t v37;
  int8x16_t v38;
  int8x16_t v39;
  float32x4_t v40;
  int8x16_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  int8x16_t *v45;
  int8x16_t *v46;
  int8x16_t *v47;
  int8x16_t *v48;
  uint64_t v49;
  int64_t v50;
  unint64_t v51;
  float16x8_t v52;
  float16x8_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t *v66;
  int8x16_t *v67;
  int8x16_t *v68;
  int8x16_t *v69;
  int64_t v70;
  int64_t v71;
  uint64_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float16x8_t v75;
  float16x8_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  unint64_t i;
  float32x4_t v91;
  float16x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x8_t *v99;
  uint64_t v100;
  int8x8_t *v101;
  uint64_t v102;
  int8x8_t *v103;
  uint64_t v104;
  BOOL v105;
  float32x4_t v106;
  int8x16_t v107;
  int8x16_t v108;
  float32x4_t v109;
  int8x16_t v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  int8x16_t *v114;
  int8x16_t *v115;
  int8x16_t *v116;
  int8x16_t *v117;
  uint64_t v118;
  int64_t v119;
  unint64_t v120;
  float16x8_t v121;
  float16x8_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int8x16_t *v135;
  int8x16_t *v136;
  int8x16_t *v137;
  int8x16_t *v138;
  int64_t v139;
  int64_t v140;
  uint64_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float16x8_t v144;
  float16x8_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int8x16_t v158;
  unint64_t j;
  float32x4_t v160;
  float16x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  int8x16_t v166;
  int8x16_t v167;
  int8x8_t *v168;
  uint64_t v169;
  int8x8_t *v170;
  uint64_t v171;
  int8x8_t *v172;
  uint64_t v173;

  if (a16)
    v19 = 0;
  else
    v19 = -1;
  v20 = (int8x16_t)vdupq_n_s16(v19);
  v21.i64[0] = 0xFFFF000000000000;
  v21.i64[1] = 0xFFFF000000000000;
  v22 = vmvnq_s8(vandq_s8(v20, v21));
  v23 = vandq_s8(v20, (int8x16_t)xmmword_185005140);
  if (a15)
    v24 = 0;
  else
    v24 = -1;
  v25 = (int8x16_t)vdupq_n_s16(v24);
  v26 = vandq_s8(v25, v21);
  v27 = vmvnq_s8(v26);
  v28 = vandq_s8(v25, (int8x16_t)xmmword_185005140);
  v29 = 2 * a14;
  v33.i32[0] = 0;
  v33.i16[2] = 0;
  v30.i32[0] = 0;
  v30.i16[2] = 0;
  v30.i16[3] = v19;
  v31 = vmvn_s8(v30);
  v32 = vand_s8(*(int8x8_t *)v20.i8, (int8x8_t)0x3C00000000000000);
  v33.i16[3] = v24;
  v34 = -(a6 * a4);
  v35 = 16 * a14;
  v36 = 8 * a14;
  if ((a17 & 0x30) != 0)
  {
    v37.i64[0] = 0x3F0000003F000000;
    v37.i64[1] = 0x3F0000003F000000;
    v38.i64[0] = 0x8000000080000000;
    v38.i64[1] = 0x8000000080000000;
    v39.i64[0] = -1;
    v39.i64[1] = -1;
    v40 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v41.i64[0] = 0x3C003C003C003C00;
    v41.i64[1] = 0x3C003C003C003C00;
    while (1)
    {
      v42 = (a8 - (unint64_t)a3) >> 3;
      if (v42 >= a12)
        v42 = a12;
      v43 = v42;
      if (v42 < 2)
        goto LABEL_43;
      while (1)
      {
        v44 = *(unsigned __int16 *)a10;
        if (!*(_WORD *)a10)
        {
          v66 = (int8x16_t *)&a10[v43];
          v67 = (int8x16_t *)a10;
          do
            v68 = v67++;
          while (v67 <= v66 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v68)) & 0x80) != 0);
          do
          {
            v69 = v68;
            v68 = (int8x16_t *)((char *)v68 + 4);
          }
          while (v68 <= v66 && !v69->i32[0]);
          if (v69 < v66)
          {
            while (!v69->i8[0])
            {
              v69 = (int8x16_t *)((char *)v69 + 1);
              if (v69 >= v66)
              {
                v69 = (int8x16_t *)&a10[v43];
                break;
              }
            }
          }
          v70 = (char *)v69 - a10;
          v71 = ((char *)v69 - a10) * a14;
          a3 += v71;
          result += v71;
          a10 += v71;
          v43 -= v70;
          goto LABEL_40;
        }
        if (v44 != 0xFFFF)
          break;
        v45 = (int8x16_t *)&a10[v43];
        v46 = (int8x16_t *)a10;
        do
          v47 = v46++;
        while (v46 <= v45 && (vminvq_u8((uint8x16_t)vceqq_s8(*v47, v39)) & 0x80) != 0);
        do
        {
          v48 = v47;
          v47 = (int8x16_t *)((char *)v47 + 4);
        }
        while (v47 <= v45 && v48->i32[0] == -1);
        if (v48 < v45)
        {
          while (v48->u8[0] == 255)
          {
            v48 = (int8x16_t *)((char *)v48 + 1);
            if (v48 >= v45)
            {
              v48 = (int8x16_t *)&a10[v43];
              break;
            }
          }
        }
        v49 = 0;
        v50 = (char *)v48 - a10;
        v51 = (char *)v48 - a10;
        do
        {
          v52 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v49], v22), v23);
          v53 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&result->i8[v49], v27), v28);
          v54 = vcvt_hight_f32_f16(v52);
          v55 = vcvtq_f32_f16(*(float16x4_t *)v52.i8);
          v56 = vcvt_hight_f32_f16(v53);
          v57 = vcvtq_f32_f16(*(float16x4_t *)v53.i8);
          v58 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 3);
          v59 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 3);
          v60 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 3);
          v61 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 3);
          v62 = (int8x16_t)vcgtq_f32(v55, vmulq_laneq_f32(v37, v55, 3));
          v63 = (int8x16_t)vcgtq_f32(v54, vmulq_laneq_f32(v37, v54, 3));
          v64 = vbicq_s8(v38, v63);
          v65 = vbicq_s8(v38, v62);
          *(int8x16_t *)&result->i8[v49] = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v58), (int16x8_t)vcgtzq_f32(v59)), vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v60), (int16x8_t)vcgtzq_f32(v61)), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vaddq_f32(vmlaq_f32(v57, (float32x4_t)veorq_s8(v65, (int8x16_t)vsubq_f32(v58, v55)), v57), vmlaq_f32(v55,
                                                                               (float32x4_t)veorq_s8(v65, (int8x16_t)vsubq_f32(v60, v57)), v55)), (float32x4_t)vandq_s8((int8x16_t)vmulq_laneq_f32(v58, v57, 3), v62))), vsubq_f32(vaddq_f32(vmlaq_f32(v56, (float32x4_t)veorq_s8(v64, (int8x16_t)vsubq_f32(v59, v54)), v56), vmlaq_f32(v54, (float32x4_t)veorq_s8(v64, (int8x16_t)vsubq_f32(v61, v56)),
                                                                  v54)),
                                                              (float32x4_t)vandq_s8((int8x16_t)vmulq_laneq_f32(v59, v56, 3), v63))), (int8x16_t)v52), (int8x16_t)v53);
          a10 += v29;
          v51 -= 2;
          v49 += v35;
        }
        while (v51 > 1);
        a3 = (int8x8_t *)((char *)a3 + v49);
        result = (int8x8_t *)((char *)result + v49);
        v43 = v43 - v50 + v51;
LABEL_40:
        if (v43 <= 1)
          goto LABEL_43;
      }
      v72 = 0;
      while (1)
      {
        v73 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v44) & 0xFF00FF00FF00FFLL))), v40);
        v74 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v44)) & 0xFF00FF00FF00FFLL))), v40);
        v75 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v72], v22), v23);
        v76 = (float16x8_t)vbslq_s8(vandq_s8(v26, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v73), (int16x8_t)vcgtzq_f32(v74))), v41, *(int8x16_t *)&result->i8[v72]);
        v77 = vcvtq_f32_f16(*(float16x4_t *)v75.i8);
        v78 = vcvtq_f32_f16(*(float16x4_t *)v76.i8);
        v79 = vmulq_f32(v74, vcvt_hight_f32_f16(v75));
        v80 = vmulq_f32(v73, v77);
        v81 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v80, 3);
        v82 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v79, 3);
        v83 = vcvt_hight_f32_f16(v76);
        v84 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v83, 3);
        v85 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 3);
        v86 = (int8x16_t)vcgtq_f32(v79, vmulq_laneq_f32(v37, v79, 3));
        v87 = (int8x16_t)vcgtq_f32(v80, vmulq_laneq_f32(v37, v80, 3));
        v88 = vbicq_s8(v38, v87);
        v89 = vbicq_s8(v38, v86);
        *(int8x16_t *)&result->i8[v72] = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v81), (int16x8_t)vcgtzq_f32(v82)), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v85), (int8x16_t)vsubq_f32(vaddq_f32(vmlaq_f32(v78, (float32x4_t)veorq_s8(v88, (int8x16_t)vsubq_f32(v81, v80)), v78), vmlaq_f32(v80, (float32x4_t)veorq_s8(v88, (int8x16_t)vsubq_f32(v85, v78)), v80)), (float32x4_t)vandq_s8((int8x16_t)vmulq_laneq_f32(v81, v78, 3), v87)), (int8x16_t)v80)), (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v84), (int8x16_t)vsubq_f32(vaddq_f32(vmlaq_f32(v83, (float32x4_t)veorq_s8(v89, (int8x16_t)vsubq_f32(v82, v79)), v83), vmlaq_f32(v79, (float32x4_t)veorq_s8(v89, (int8x16_t)vsubq_f32(v84, v83)), v79)), (float32x4_t)vandq_s8(
                                                                                                   (int8x16_t)vmulq_laneq_f32(v82, v83, 3),
                                                                                                   v86)),
                                                                       (int8x16_t)v79)),
                                           (int8x16_t)v76);
        a10 += v29;
        v43 -= 2;
        if (v43 < 2)
          break;
        LOWORD(v44) = *(_WORD *)a10;
        v72 += v35;
        if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
        {
          result = (int8x8_t *)((char *)result + v72);
          a3 = (int8x8_t *)((char *)a3 + v72);
          goto LABEL_40;
        }
      }
      result = (int8x8_t *)((char *)result + v35 + v72);
      a3 = (int8x8_t *)((char *)a3 + v35 + v72);
LABEL_43:
      for (i = a12 - v42 + v43; i; --i)
      {
        if (*a10)
        {
          v91 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v40);
          v92 = (float16x4_t)vbsl_s8(vand_s8(v33, (int8x8_t)vmovn_s32(vcgtzq_f32(v91))), (int8x8_t)0x3C003C003C003C00, *result);
          v93 = vmulq_f32(v91, vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(*a3, v31), v32)));
          v94 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v93, 3);
          v95 = vcvtq_f32_f16(v92);
          v96 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v95, 3);
          v97 = (int8x16_t)vcgtq_f32(v93, vmulq_laneq_f32(v37, v93, 3));
          v98 = vbicq_s8(v38, v97);
          *result = vbsl_s8((int8x8_t)vmovn_s32(vcgtzq_f32(v94)), (int8x8_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v96), (int8x16_t)vsubq_f32(vaddq_f32(vmlaq_f32(v95, (float32x4_t)veorq_s8(v98, (int8x16_t)vsubq_f32(v94, v93)), v95), vmlaq_f32(v93, (float32x4_t)veorq_s8(v98, (int8x16_t)vsubq_f32(v96, v95)), v93)), (float32x4_t)vandq_s8((int8x16_t)vmulq_laneq_f32(
                                                                                                     v96,
                                                                                                     v93,
                                                                                                     3),
                                                                                        v97)),
                                                            (int8x16_t)v93)),
                      (int8x8_t)v92);
        }
        v99 = &a3[a14];
        a10 += a14;
        if ((unint64_t)v99 >= a8)
          v100 = -(uint64_t)a7;
        else
          v100 = 0;
        a3 = &v99[v100];
        result = (int8x8_t *)((char *)result + v36);
      }
      a10 += a11;
      result += a2;
      v101 = &a5[a4];
      if ((unint64_t)v101 >= a9)
        v102 = v34;
      else
        v102 = 0;
      v103 = &v101[v102];
      v104 = a8 + 8 * v102 + 8 * a4;
      a3 += a4;
      if (a9)
      {
        a3 = v103;
        a8 = v104;
        a5 = v103;
      }
      v105 = __OFSUB__(a13--, 1);
      if ((a13 < 0) ^ v105 | (a13 == 0))
        return result;
    }
  }
  v106.i64[0] = 0x3F0000003F000000;
  v106.i64[1] = 0x3F0000003F000000;
  v107.i64[0] = 0x8000000080000000;
  v107.i64[1] = 0x8000000080000000;
  v108.i64[0] = -1;
  v108.i64[1] = -1;
  v109 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v110.i64[0] = 0x3C003C003C003C00;
  v110.i64[1] = 0x3C003C003C003C00;
  while (2)
  {
    v111 = (a8 - (unint64_t)a3) >> 3;
    if (v111 >= a12)
      v111 = a12;
    v112 = v111;
    if (v111 < 2)
      goto LABEL_93;
    while (1)
    {
      v113 = *(unsigned __int16 *)a10;
      if (!*(_WORD *)a10)
      {
        v135 = (int8x16_t *)&a10[v112];
        v136 = (int8x16_t *)a10;
        do
          v137 = v136++;
        while (v136 <= v135 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v137)) & 0x80) != 0);
        do
        {
          v138 = v137;
          v137 = (int8x16_t *)((char *)v137 + 4);
        }
        while (v137 <= v135 && !v138->i32[0]);
        if (v138 < v135)
        {
          while (!v138->i8[0])
          {
            v138 = (int8x16_t *)((char *)v138 + 1);
            if (v138 >= v135)
            {
              v138 = (int8x16_t *)&a10[v112];
              break;
            }
          }
        }
        v139 = (char *)v138 - a10;
        v140 = ((char *)v138 - a10) * a14;
        a3 += v140;
        result += v140;
        a10 += v140;
        v112 -= v139;
        goto LABEL_90;
      }
      if (v113 != 0xFFFF)
        break;
      v114 = (int8x16_t *)&a10[v112];
      v115 = (int8x16_t *)a10;
      do
        v116 = v115++;
      while (v115 <= v114 && (vminvq_u8((uint8x16_t)vceqq_s8(*v116, v108)) & 0x80) != 0);
      do
      {
        v117 = v116;
        v116 = (int8x16_t *)((char *)v116 + 4);
      }
      while (v116 <= v114 && v117->i32[0] == -1);
      if (v117 < v114)
      {
        while (v117->u8[0] == 255)
        {
          v117 = (int8x16_t *)((char *)v117 + 1);
          if (v117 >= v114)
          {
            v117 = (int8x16_t *)&a10[v112];
            break;
          }
        }
      }
      v118 = 0;
      v119 = (char *)v117 - a10;
      v120 = (char *)v117 - a10;
      do
      {
        v121 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v118]), v22), v23);
        v122 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&result->i8[v118]), v27), v28);
        v123 = vcvt_hight_f32_f16(v121);
        v124 = vcvtq_f32_f16(*(float16x4_t *)v121.i8);
        v125 = vcvt_hight_f32_f16(v122);
        v126 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v124, 3);
        v127 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v123, 3);
        v128 = vcvtq_f32_f16(*(float16x4_t *)v122.i8);
        v129 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v128, 3);
        v130 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v125, 3);
        v131 = (int8x16_t)vcgtq_f32(v124, vmulq_laneq_f32(v106, v124, 3));
        v132 = (int8x16_t)vcgtq_f32(v123, vmulq_laneq_f32(v106, v123, 3));
        v133 = vbicq_s8(v107, v132);
        v134 = vbicq_s8(v107, v131);
        *(int8x16_t *)&result->i8[v118] = vrev16q_s8(vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v126), (int16x8_t)vcgtzq_f32(v127)), vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v129), (int16x8_t)vcgtzq_f32(v130)), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vaddq_f32(vmlaq_f32(v128, (float32x4_t)veorq_s8(v134, (int8x16_t)vsubq_f32(v126, v124)), v128), vmlaq_f32(
                                                                                v124,
                                                                                (float32x4_t)veorq_s8(v134, (int8x16_t)vsubq_f32(v129, v128)), v124)), (float32x4_t)vandq_s8((int8x16_t)vmulq_laneq_f32(v126, v128, 3), v131))), vsubq_f32(vaddq_f32(vmlaq_f32(v125, (float32x4_t)veorq_s8(v133, (int8x16_t)vsubq_f32(v127, v123)), v125), vmlaq_f32(v123, (float32x4_t)veorq_s8(v133, (int8x16_t)vsubq_f32(v130, v125)),
                                                                   v123)),
                                                               (float32x4_t)vandq_s8((int8x16_t)vmulq_laneq_f32(v127, v125, 3), v132))), (int8x16_t)v121), (int8x16_t)v122));
        a10 += v29;
        v120 -= 2;
        v118 += v35;
      }
      while (v120 > 1);
      a3 = (int8x8_t *)((char *)a3 + v118);
      result = (int8x8_t *)((char *)result + v118);
      v112 = v112 - v119 + v120;
LABEL_90:
      if (v112 <= 1)
        goto LABEL_93;
    }
    v141 = 0;
    while (1)
    {
      v142 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v113) & 0xFF00FF00FF00FFLL))), v109);
      v143 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v113)) & 0xFF00FF00FF00FFLL))), v109);
      v144 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v141]), v22), v23);
      v145 = (float16x8_t)vbslq_s8(vandq_s8(v26, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v142), (int16x8_t)vcgtzq_f32(v143))), v110, vrev16q_s8(*(int8x16_t *)&result->i8[v141]));
      v146 = vcvtq_f32_f16(*(float16x4_t *)v144.i8);
      v147 = vcvtq_f32_f16(*(float16x4_t *)v145.i8);
      v148 = vcvt_hight_f32_f16(v145);
      v149 = vmulq_f32(v143, vcvt_hight_f32_f16(v144));
      v150 = vmulq_f32(v142, v146);
      v151 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v150, 3);
      v152 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v149, 3);
      v153 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v148, 3);
      v154 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v147, 3);
      v155 = (int8x16_t)vcgtq_f32(v149, vmulq_laneq_f32(v106, v149, 3));
      v156 = (int8x16_t)vcgtq_f32(v150, vmulq_laneq_f32(v106, v150, 3));
      v157 = vbicq_s8(v107, v156);
      v158 = vbicq_s8(v107, v155);
      *(int8x16_t *)&result->i8[v141] = vrev16q_s8(vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v151), (int16x8_t)vcgtzq_f32(v152)), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v154), (int8x16_t)vsubq_f32(vaddq_f32(vmlaq_f32(v147, (float32x4_t)veorq_s8(v157, (int8x16_t)vsubq_f32(v151, v150)), v147), vmlaq_f32(v150, (float32x4_t)veorq_s8(v157, (int8x16_t)vsubq_f32(v154, v147)), v150)), (float32x4_t)vandq_s8((int8x16_t)vmulq_laneq_f32(v151, v147, 3), v156)), (int8x16_t)v150)), (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v153), (int8x16_t)vsubq_f32(vaddq_f32(vmlaq_f32(v148, (float32x4_t)veorq_s8(v158, (int8x16_t)vsubq_f32(v152, v149)), v148), vmlaq_f32(v149,
                                                                                         (float32x4_t)veorq_s8(v158, (int8x16_t)vsubq_f32(v153, v148)),
                                                                                         v149)),
                                                                                     (float32x4_t)vandq_s8((int8x16_t)vmulq_laneq_f32(v152, v148, 3), v155)), (int8x16_t)v149)), (int8x16_t)v145));
      a10 += v29;
      v112 -= 2;
      if (v112 < 2)
        break;
      LOWORD(v113) = *(_WORD *)a10;
      v141 += v35;
      if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
      {
        result = (int8x8_t *)((char *)result + v141);
        a3 = (int8x8_t *)((char *)a3 + v141);
        goto LABEL_90;
      }
    }
    result = (int8x8_t *)((char *)result + v35 + v141);
    a3 = (int8x8_t *)((char *)a3 + v35 + v141);
LABEL_93:
    for (j = a12 - v111 + v112; j; --j)
    {
      if (*a10)
      {
        v160 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v109);
        v161 = (float16x4_t)vbsl_s8(vand_s8(v33, (int8x8_t)vmovn_s32(vcgtzq_f32(v160))), (int8x8_t)0x3C003C003C003C00, vrev16_s8(*result));
        v162 = vcvtq_f32_f16(v161);
        v163 = vmulq_f32(v160, vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(vrev16_s8(*a3), v31), v32)));
        v164 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v163, 3);
        v165 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v162, 3);
        v166 = (int8x16_t)vcgtq_f32(v163, vmulq_laneq_f32(v106, v163, 3));
        v167 = vbicq_s8(v107, v166);
        *result = vrev16_s8(vbsl_s8((int8x8_t)vmovn_s32(vcgtzq_f32(v164)), (int8x8_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v165), (int8x16_t)vsubq_f32(vaddq_f32(vmlaq_f32(v162, (float32x4_t)veorq_s8(v167, (int8x16_t)vsubq_f32(v164, v163)), v162), vmlaq_f32(v163, (float32x4_t)veorq_s8(v167, (int8x16_t)vsubq_f32(v165, v162)), v163)), (float32x4_t)vandq_s8(
                                                                                        (int8x16_t)vmulq_laneq_f32(v165, v163, 3), v166)), (int8x16_t)v163)), (int8x8_t)v161));
      }
      v168 = &a3[a14];
      a10 += a14;
      if ((unint64_t)v168 >= a8)
        v169 = -(uint64_t)a7;
      else
        v169 = 0;
      a3 = &v168[v169];
      result = (int8x8_t *)((char *)result + v36);
    }
    a10 += a11;
    result += a2;
    v170 = &a5[a4];
    if ((unint64_t)v170 >= a9)
      v171 = v34;
    else
      v171 = 0;
    v172 = &v170[v171];
    v173 = a8 + 8 * v171 + 8 * a4;
    a3 += a4;
    if (a9)
    {
      a3 = v172;
      a8 = v173;
      a5 = v172;
    }
    v105 = __OFSUB__(a13--, 1);
    if (!((a13 < 0) ^ v105 | (a13 == 0)))
      continue;
    return result;
  }
}

int8x8_t *composite_pixelmask<(CGCompositeOperation)20,_rgbaf16_t>(int8x8_t *result, uint64_t a2, int8x8_t *a3, uint64_t a4, int8x8_t *a5, int a6, int a7, unint64_t a8, unint64_t a9, char *a10, uint64_t a11, int a12, int a13, int a14, int a15, int a16, char a17)
{
  unsigned int v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64_t v29;
  int8x8_t v30;
  int8x8_t v31;
  int8x8_t v32;
  int8x8_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x16_t v37;
  float32x4_t v38;
  int8x16_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int8x16_t *v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  float16x8_t v50;
  float16x8_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int8x16_t *v67;
  int8x16_t *v68;
  int8x16_t *v69;
  int8x16_t *v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float16x8_t v76;
  float16x8_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  unint64_t i;
  float32x4_t v96;
  float16x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  int8x16_t v101;
  int8x16_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  int8x8_t *v106;
  uint64_t v107;
  int8x8_t *v108;
  uint64_t v109;
  int8x8_t *v110;
  uint64_t v111;
  BOOL v112;
  int8x16_t v113;
  float32x4_t v114;
  int8x16_t v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  int8x16_t *v119;
  int8x16_t *v120;
  int8x16_t *v121;
  int8x16_t *v122;
  uint64_t v123;
  int64_t v124;
  unint64_t v125;
  float16x8_t v126;
  float16x8_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int8x16_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  int8x16_t *v143;
  int8x16_t *v144;
  int8x16_t *v145;
  int8x16_t *v146;
  int64_t v147;
  int64_t v148;
  uint64_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float16x8_t v152;
  float16x8_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  int8x16_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  unint64_t j;
  float32x4_t v172;
  float16x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  int8x16_t v177;
  int8x16_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  int8x8_t *v182;
  uint64_t v183;
  int8x8_t *v184;
  uint64_t v185;
  int8x8_t *v186;
  uint64_t v187;

  if (a16)
    v19 = 0;
  else
    v19 = -1;
  v20 = (int8x16_t)vdupq_n_s16(v19);
  v21.i64[0] = 0xFFFF000000000000;
  v21.i64[1] = 0xFFFF000000000000;
  v22 = vmvnq_s8(vandq_s8(v20, v21));
  v23 = vandq_s8(v20, (int8x16_t)xmmword_185005140);
  if (a15)
    v24 = 0;
  else
    v24 = -1;
  v25 = (int8x16_t)vdupq_n_s16(v24);
  v26 = vandq_s8(v25, v21);
  v27 = vmvnq_s8(v26);
  v28 = vandq_s8(v25, (int8x16_t)xmmword_185005140);
  v29 = 2 * a14;
  v33.i32[0] = 0;
  v33.i16[2] = 0;
  v30.i32[0] = 0;
  v30.i16[2] = 0;
  v30.i16[3] = v19;
  v31 = vmvn_s8(v30);
  v32 = vand_s8(*(int8x8_t *)v20.i8, (int8x8_t)0x3C00000000000000);
  v33.i16[3] = v24;
  v34 = -(a6 * a4);
  v35 = 16 * a14;
  v36 = 8 * a14;
  if ((a17 & 0x30) != 0)
  {
    v37.i64[0] = -1;
    v37.i64[1] = -1;
    v38 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v39.i64[0] = 0x3C003C003C003C00;
    v39.i64[1] = 0x3C003C003C003C00;
    while (1)
    {
      v40 = (a8 - (unint64_t)a3) >> 3;
      if (v40 >= a12)
        v40 = a12;
      v41 = v40;
      if (v40 < 2)
        goto LABEL_43;
      while (1)
      {
        v42 = *(unsigned __int16 *)a10;
        if (!*(_WORD *)a10)
        {
          v67 = (int8x16_t *)&a10[v41];
          v68 = (int8x16_t *)a10;
          do
            v69 = v68++;
          while (v68 <= v67 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v69)) & 0x80) != 0);
          do
          {
            v70 = v69;
            v69 = (int8x16_t *)((char *)v69 + 4);
          }
          while (v69 <= v67 && !v70->i32[0]);
          if (v70 < v67)
          {
            while (!v70->i8[0])
            {
              v70 = (int8x16_t *)((char *)v70 + 1);
              if (v70 >= v67)
              {
                v70 = (int8x16_t *)&a10[v41];
                break;
              }
            }
          }
          v71 = (char *)v70 - a10;
          v72 = ((char *)v70 - a10) * a14;
          a3 += v72;
          result += v72;
          a10 += v72;
          v41 -= v71;
          goto LABEL_40;
        }
        if (v42 != 0xFFFF)
          break;
        v43 = (int8x16_t *)&a10[v41];
        v44 = (int8x16_t *)a10;
        do
          v45 = v44++;
        while (v44 <= v43 && (vminvq_u8((uint8x16_t)vceqq_s8(*v45, v37)) & 0x80) != 0);
        do
        {
          v46 = v45;
          v45 = (int8x16_t *)((char *)v45 + 4);
        }
        while (v45 <= v43 && v46->i32[0] == -1);
        if (v46 < v43)
        {
          while (v46->u8[0] == 255)
          {
            v46 = (int8x16_t *)((char *)v46 + 1);
            if (v46 >= v43)
            {
              v46 = (int8x16_t *)&a10[v41];
              break;
            }
          }
        }
        v47 = 0;
        v48 = (char *)v46 - a10;
        v49 = (char *)v46 - a10;
        do
        {
          v50 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v47], v22), v23);
          v51 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&result->i8[v47], v27), v28);
          v52 = vcvt_hight_f32_f16(v50);
          v53 = vcvtq_f32_f16(*(float16x4_t *)v50.i8);
          v54 = vcvt_hight_f32_f16(v51);
          v55 = vcvtq_f32_f16(*(float16x4_t *)v51.i8);
          v56 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 3);
          v57 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 3);
          v58 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v56), (int16x8_t)vcgtzq_f32(v57));
          v59 = (int8x16_t)vceqzq_f32(v57);
          v60 = (int8x16_t)vceqzq_f32(v56);
          v61 = vdivq_f32(v54, v57);
          v62 = vdivq_f32(v55, v56);
          v63 = vaddq_f32(v52, v52);
          v64 = vaddq_f32(v53, v53);
          v65 = vmulq_f32(vmlaq_laneq_f32(vmlsq_f32(v64, v62, v64), v62, v53, 3), v55);
          v66 = vmulq_f32(vmlaq_laneq_f32(vmlsq_f32(v63, v61, v63), v61, v52, 3), v54);
          *(int8x16_t *)&result->i8[v47] = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 3))), vbslq_s8(v58, (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vmlsq_laneq_f32(v53, v53, v55, 3), vaddq_f32(vmlsq_laneq_f32(v55, v55, v53, 3), (float32x4_t)vandq_s8((int8x16_t)v65, vbicq_s8((int8x16_t)vcgezq_f32(v65),
                                                                                              v60))))),
                                                            vaddq_f32(vmlsq_laneq_f32(v52, v52, v54, 3), vaddq_f32(vmlsq_laneq_f32(v54, v54, v52, 3), (float32x4_t)vandq_s8((int8x16_t)v66, vbicq_s8((int8x16_t)vcgezq_f32(v66), v59))))), (int8x16_t)v50), (int8x16_t)v51);
          a10 += v29;
          v49 -= 2;
          v47 += v35;
        }
        while (v49 > 1);
        a3 = (int8x8_t *)((char *)a3 + v47);
        result = (int8x8_t *)((char *)result + v47);
        v41 = v41 - v48 + v49;
LABEL_40:
        if (v41 <= 1)
          goto LABEL_43;
      }
      v73 = 0;
      while (1)
      {
        v74 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v42) & 0xFF00FF00FF00FFLL))), v38);
        v75 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v42)) & 0xFF00FF00FF00FFLL))), v38);
        v76 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v73], v22), v23);
        v77 = (float16x8_t)vbslq_s8(vandq_s8(v26, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v74), (int16x8_t)vcgtzq_f32(v75))), v39, *(int8x16_t *)&result->i8[v73]);
        v78 = vcvtq_f32_f16(*(float16x4_t *)v76.i8);
        v79 = vcvtq_f32_f16(*(float16x4_t *)v77.i8);
        v80 = vmulq_f32(v75, vcvt_hight_f32_f16(v76));
        v81 = vmulq_f32(v74, v78);
        v82 = vcvt_hight_f32_f16(v77);
        v83 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v82, 3);
        v84 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v79, 3);
        v85 = (int8x16_t)vcgtzq_f32(v84);
        v86 = (int8x16_t)vcgtzq_f32(v83);
        v87 = (int8x16_t)vceqzq_f32(v84);
        v88 = (int8x16_t)vceqzq_f32(v83);
        v89 = vdivq_f32(v82, v83);
        v90 = vdivq_f32(v79, v84);
        v91 = vaddq_f32(v80, v80);
        v92 = vaddq_f32(v81, v81);
        v93 = vmulq_f32(vmlaq_laneq_f32(vmlsq_f32(v91, v89, v91), v89, v80, 3), v82);
        v94 = vmulq_f32(vmlaq_laneq_f32(vmlsq_f32(v92, v90, v92), v90, v81, 3), v79);
        *(int8x16_t *)&result->i8[v73] = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v81, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v80, 3))), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)vbslq_s8(v85, (int8x16_t)vaddq_f32(vmlsq_laneq_f32(v81, v81, v79, 3), vaddq_f32(vmlsq_laneq_f32(v79, v79, v81, 3), (float32x4_t)vandq_s8((int8x16_t)v94, vbicq_s8((int8x16_t)vcgezq_f32(v94), v87)))), (int8x16_t)v81)), (float32x4_t)vbslq_s8(v86, (int8x16_t)vaddq_f32(vmlsq_laneq_f32(v80, v80, v82, 3), vaddq_f32(vmlsq_laneq_f32(v82, v82, v80, 3), (float32x4_t)vandq_s8(
                                                                                                     (int8x16_t)v93,
                                                                                                     vbicq_s8((int8x16_t)vcgezq_f32(v93), v88)))),
                                                                       (int8x16_t)v80)),
                                           (int8x16_t)v77);
        a10 += v29;
        v41 -= 2;
        if (v41 < 2)
          break;
        LOWORD(v42) = *(_WORD *)a10;
        v73 += v35;
        if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
        {
          result = (int8x8_t *)((char *)result + v73);
          a3 = (int8x8_t *)((char *)a3 + v73);
          goto LABEL_40;
        }
      }
      result = (int8x8_t *)((char *)result + v35 + v73);
      a3 = (int8x8_t *)((char *)a3 + v35 + v73);
LABEL_43:
      for (i = a12 - v40 + v41; i; --i)
      {
        if (*a10)
        {
          v96 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v38);
          v97 = (float16x4_t)vbsl_s8(vand_s8(v33, (int8x8_t)vmovn_s32(vcgtzq_f32(v96))), (int8x8_t)0x3C003C003C003C00, *result);
          v98 = vmulq_f32(v96, vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(*a3, v31), v32)));
          v99 = vcvtq_f32_f16(v97);
          v100 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v99, 3);
          v101 = (int8x16_t)vcgtzq_f32(v100);
          v102 = (int8x16_t)vceqzq_f32(v100);
          v103 = vdivq_f32(v99, v100);
          v104 = vaddq_f32(v98, v98);
          v105 = vmulq_f32(vmlaq_laneq_f32(vmlsq_f32(v104, v103, v104), v103, v98, 3), v99);
          *result = vbsl_s8((int8x8_t)vmovn_s32(vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v98, 3))), (int8x8_t)vcvt_f16_f32((float32x4_t)vbslq_s8(v101, (int8x16_t)vaddq_f32(vmlsq_laneq_f32(v98, v98, v99, 3), vaddq_f32(vmlsq_laneq_f32(v99, v99, v98, 3), (float32x4_t)vandq_s8((int8x16_t)v105, vbicq_s8((int8x16_t)vcgezq_f32(v105), v102)))), (int8x16_t)v98)), (int8x8_t)v97);
        }
        v106 = &a3[a14];
        a10 += a14;
        if ((unint64_t)v106 >= a8)
          v107 = -(uint64_t)a7;
        else
          v107 = 0;
        a3 = &v106[v107];
        result = (int8x8_t *)((char *)result + v36);
      }
      a10 += a11;
      result += a2;
      v108 = &a5[a4];
      if ((unint64_t)v108 >= a9)
        v109 = v34;
      else
        v109 = 0;
      v110 = &v108[v109];
      v111 = a8 + 8 * v109 + 8 * a4;
      a3 += a4;
      if (a9)
      {
        a3 = v110;
        a8 = v111;
        a5 = v110;
      }
      v112 = __OFSUB__(a13--, 1);
      if ((a13 < 0) ^ v112 | (a13 == 0))
        return result;
    }
  }
  v113.i64[0] = -1;
  v113.i64[1] = -1;
  v114 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v115.i64[0] = 0x3C003C003C003C00;
  v115.i64[1] = 0x3C003C003C003C00;
  while (2)
  {
    v116 = (a8 - (unint64_t)a3) >> 3;
    if (v116 >= a12)
      v116 = a12;
    v117 = v116;
    if (v116 < 2)
      goto LABEL_93;
    while (1)
    {
      v118 = *(unsigned __int16 *)a10;
      if (!*(_WORD *)a10)
      {
        v143 = (int8x16_t *)&a10[v117];
        v144 = (int8x16_t *)a10;
        do
          v145 = v144++;
        while (v144 <= v143 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v145)) & 0x80) != 0);
        do
        {
          v146 = v145;
          v145 = (int8x16_t *)((char *)v145 + 4);
        }
        while (v145 <= v143 && !v146->i32[0]);
        if (v146 < v143)
        {
          while (!v146->i8[0])
          {
            v146 = (int8x16_t *)((char *)v146 + 1);
            if (v146 >= v143)
            {
              v146 = (int8x16_t *)&a10[v117];
              break;
            }
          }
        }
        v147 = (char *)v146 - a10;
        v148 = ((char *)v146 - a10) * a14;
        a3 += v148;
        result += v148;
        a10 += v148;
        v117 -= v147;
        goto LABEL_90;
      }
      if (v118 != 0xFFFF)
        break;
      v119 = (int8x16_t *)&a10[v117];
      v120 = (int8x16_t *)a10;
      do
        v121 = v120++;
      while (v120 <= v119 && (vminvq_u8((uint8x16_t)vceqq_s8(*v121, v113)) & 0x80) != 0);
      do
      {
        v122 = v121;
        v121 = (int8x16_t *)((char *)v121 + 4);
      }
      while (v121 <= v119 && v122->i32[0] == -1);
      if (v122 < v119)
      {
        while (v122->u8[0] == 255)
        {
          v122 = (int8x16_t *)((char *)v122 + 1);
          if (v122 >= v119)
          {
            v122 = (int8x16_t *)&a10[v117];
            break;
          }
        }
      }
      v123 = 0;
      v124 = (char *)v122 - a10;
      v125 = (char *)v122 - a10;
      do
      {
        v126 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v123]), v22), v23);
        v127 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&result->i8[v123]), v27), v28);
        v128 = vcvt_hight_f32_f16(v126);
        v129 = vcvtq_f32_f16(*(float16x4_t *)v126.i8);
        v130 = vcvtq_f32_f16(*(float16x4_t *)v127.i8);
        v131 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v130, 3);
        v132 = vcvt_hight_f32_f16(v127);
        v133 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v132, 3);
        v134 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v131), (int16x8_t)vcgtzq_f32(v133));
        v135 = (int8x16_t)vceqzq_f32(v133);
        v136 = (int8x16_t)vceqzq_f32(v131);
        v137 = vdivq_f32(v132, v133);
        v138 = vdivq_f32(v130, v131);
        v139 = vaddq_f32(v128, v128);
        v140 = vaddq_f32(v129, v129);
        v141 = vmulq_f32(vmlaq_laneq_f32(vmlsq_f32(v140, v138, v140), v138, v129, 3), v130);
        v142 = vmulq_f32(vmlaq_laneq_f32(vmlsq_f32(v139, v137, v139), v137, v128, 3), v132);
        *(int8x16_t *)&result->i8[v123] = vrev16q_s8(vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v129, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v128, 3))), vbslq_s8(v134, (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vmlsq_laneq_f32(v129, v129, v130, 3), vaddq_f32(vmlsq_laneq_f32(v130, v130, v129, 3), (float32x4_t)vandq_s8((int8x16_t)v141, vbicq_s8(
                                                                                               (int8x16_t)vcgezq_f32(v141),
                                                                                               v136))))),
                                                             vaddq_f32(vmlsq_laneq_f32(v128, v128, v132, 3), vaddq_f32(vmlsq_laneq_f32(v132, v132, v128, 3), (float32x4_t)vandq_s8((int8x16_t)v142, vbicq_s8((int8x16_t)vcgezq_f32(v142), v135))))), (int8x16_t)v126), (int8x16_t)v127));
        a10 += v29;
        v125 -= 2;
        v123 += v35;
      }
      while (v125 > 1);
      a3 = (int8x8_t *)((char *)a3 + v123);
      result = (int8x8_t *)((char *)result + v123);
      v117 = v117 - v124 + v125;
LABEL_90:
      if (v117 <= 1)
        goto LABEL_93;
    }
    v149 = 0;
    while (1)
    {
      v150 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v118) & 0xFF00FF00FF00FFLL))), v114);
      v151 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v118)) & 0xFF00FF00FF00FFLL))), v114);
      v152 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v149]), v22), v23);
      v153 = (float16x8_t)vbslq_s8(vandq_s8(v26, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v150), (int16x8_t)vcgtzq_f32(v151))), v115, vrev16q_s8(*(int8x16_t *)&result->i8[v149]));
      v154 = vcvtq_f32_f16(*(float16x4_t *)v152.i8);
      v155 = vcvtq_f32_f16(*(float16x4_t *)v153.i8);
      v156 = vcvt_hight_f32_f16(v153);
      v157 = vmulq_f32(v151, vcvt_hight_f32_f16(v152));
      v158 = vmulq_f32(v150, v154);
      v159 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v156, 3);
      v160 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v155, 3);
      v161 = (int8x16_t)vcgtzq_f32(v160);
      v162 = (int8x16_t)vcgtzq_f32(v159);
      v163 = (int8x16_t)vceqzq_f32(v160);
      v164 = (int8x16_t)vceqzq_f32(v159);
      v165 = vdivq_f32(v156, v159);
      v166 = vdivq_f32(v155, v160);
      v167 = vaddq_f32(v157, v157);
      v168 = vaddq_f32(v158, v158);
      v169 = vmulq_f32(vmlaq_laneq_f32(vmlsq_f32(v167, v165, v167), v165, v157, 3), v156);
      v170 = vmulq_f32(vmlaq_laneq_f32(vmlsq_f32(v168, v166, v168), v166, v158, 3), v155);
      *(int8x16_t *)&result->i8[v149] = vrev16q_s8(vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v158, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v157, 3))), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)vbslq_s8(v161, (int8x16_t)vaddq_f32(vmlsq_laneq_f32(v158, v158, v155, 3), vaddq_f32(vmlsq_laneq_f32(v155, v155, v158, 3), (float32x4_t)vandq_s8((int8x16_t)v170, vbicq_s8((int8x16_t)vcgezq_f32(v170), v163)))), (int8x16_t)v158)), (float32x4_t)vbslq_s8(v162, (int8x16_t)vaddq_f32(vmlsq_laneq_f32(v157, v157,
                                                                                       v156,
                                                                                       3),
                                                                                     vaddq_f32(vmlsq_laneq_f32(v156, v156, v157, 3), (float32x4_t)vandq_s8((int8x16_t)v169, vbicq_s8((int8x16_t)vcgezq_f32(v169), v164)))), (int8x16_t)v157)), (int8x16_t)v153));
      a10 += v29;
      v117 -= 2;
      if (v117 < 2)
        break;
      LOWORD(v118) = *(_WORD *)a10;
      v149 += v35;
      if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
      {
        result = (int8x8_t *)((char *)result + v149);
        a3 = (int8x8_t *)((char *)a3 + v149);
        goto LABEL_90;
      }
    }
    result = (int8x8_t *)((char *)result + v35 + v149);
    a3 = (int8x8_t *)((char *)a3 + v35 + v149);
LABEL_93:
    for (j = a12 - v116 + v117; j; --j)
    {
      if (*a10)
      {
        v172 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v114);
        v173 = (float16x4_t)vbsl_s8(vand_s8(v33, (int8x8_t)vmovn_s32(vcgtzq_f32(v172))), (int8x8_t)0x3C003C003C003C00, vrev16_s8(*result));
        v174 = vcvtq_f32_f16(v173);
        v175 = vmulq_f32(v172, vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(vrev16_s8(*a3), v31), v32)));
        v176 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v174, 3);
        v177 = (int8x16_t)vcgtzq_f32(v176);
        v178 = (int8x16_t)vceqzq_f32(v176);
        v179 = vdivq_f32(v174, v176);
        v180 = vaddq_f32(v175, v175);
        v181 = vmulq_f32(vmlaq_laneq_f32(vmlsq_f32(v180, v179, v180), v179, v175, 3), v174);
        *result = vrev16_s8(vbsl_s8((int8x8_t)vmovn_s32(vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v175, 3))), (int8x8_t)vcvt_f16_f32((float32x4_t)vbslq_s8(v177, (int8x16_t)vaddq_f32(vmlsq_laneq_f32(v175, v175, v174, 3), vaddq_f32(vmlsq_laneq_f32(v174, v174, v175, 3), (float32x4_t)vandq_s8((int8x16_t)v181, vbicq_s8((int8x16_t)vcgezq_f32(v181), v178)))), (int8x16_t)v175)), (int8x8_t)v173));
      }
      v182 = &a3[a14];
      a10 += a14;
      if ((unint64_t)v182 >= a8)
        v183 = -(uint64_t)a7;
      else
        v183 = 0;
      a3 = &v182[v183];
      result = (int8x8_t *)((char *)result + v36);
    }
    a10 += a11;
    result += a2;
    v184 = &a5[a4];
    if ((unint64_t)v184 >= a9)
      v185 = v34;
    else
      v185 = 0;
    v186 = &v184[v185];
    v187 = a8 + 8 * v185 + 8 * a4;
    a3 += a4;
    if (a9)
    {
      a3 = v186;
      a8 = v187;
      a5 = v186;
    }
    v112 = __OFSUB__(a13--, 1);
    if (!((a13 < 0) ^ v112 | (a13 == 0)))
      continue;
    return result;
  }
}

int8x8_t *composite_pixelmask<(CGCompositeOperation)22,_rgbaf16_t>(int8x8_t *result, uint64_t a2, int8x8_t *a3, uint64_t a4, int8x8_t *a5, int a6, int a7, unint64_t a8, unint64_t a9, char *a10, uint64_t a11, int a12, int a13, int a14, int a15, int a16, char a17)
{
  unsigned int v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64_t v29;
  int8x8_t v30;
  int8x8_t v31;
  int8x8_t v32;
  int8x8_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x16_t v37;
  float32x4_t v38;
  int8x16_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int8x16_t *v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  float16x8_t v50;
  float16x8_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int8x16_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int8x16_t *v65;
  int8x16_t *v66;
  int8x16_t *v67;
  int8x16_t *v68;
  int64_t v69;
  int64_t v70;
  uint64_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float16x8_t v74;
  float16x8_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  float32x4_t v88;
  float32x4_t v89;
  int8x16_t v90;
  int8x16_t v91;
  unint64_t i;
  float32x4_t v93;
  float16x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  int8x16_t v99;
  int8x8_t v100;
  float32x4_t v101;
  int8x16_t v102;
  int8x8_t *v103;
  uint64_t v104;
  int8x8_t *v105;
  uint64_t v106;
  int8x8_t *v107;
  uint64_t v108;
  BOOL v109;
  int8x16_t v110;
  float32x4_t v111;
  int8x16_t v112;
  unint64_t v113;
  unint64_t v114;
  int v115;
  int8x16_t *v116;
  int8x16_t *v117;
  int8x16_t *v118;
  int8x16_t *v119;
  uint64_t v120;
  int64_t v121;
  unint64_t v122;
  float16x8_t v123;
  float16x8_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  int8x16_t v133;
  int16x8_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  int8x16_t *v138;
  int8x16_t *v139;
  int8x16_t *v140;
  int8x16_t *v141;
  int64_t v142;
  int64_t v143;
  uint64_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float16x8_t v147;
  float16x8_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int16x8_t v160;
  int16x8_t v161;
  float32x4_t v162;
  float32x4_t v163;
  int8x16_t v164;
  int8x16_t v165;
  unint64_t j;
  float32x4_t v167;
  float16x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  int8x16_t v173;
  int32x4_t v174;
  float32x4_t v175;
  int8x16_t v176;
  int8x8_t *v177;
  uint64_t v178;
  int8x8_t *v179;
  uint64_t v180;
  int8x8_t *v181;
  uint64_t v182;

  if (a16)
    v19 = 0;
  else
    v19 = -1;
  v20 = (int8x16_t)vdupq_n_s16(v19);
  v21.i64[0] = 0xFFFF000000000000;
  v21.i64[1] = 0xFFFF000000000000;
  v22 = vmvnq_s8(vandq_s8(v20, v21));
  v23 = vandq_s8(v20, (int8x16_t)xmmword_185005140);
  if (a15)
    v24 = 0;
  else
    v24 = -1;
  v25 = (int8x16_t)vdupq_n_s16(v24);
  v26 = vandq_s8(v25, v21);
  v27 = vmvnq_s8(v26);
  v28 = vandq_s8(v25, (int8x16_t)xmmword_185005140);
  v29 = 2 * a14;
  v33.i32[0] = 0;
  v33.i16[2] = 0;
  v30.i32[0] = 0;
  v30.i16[2] = 0;
  v30.i16[3] = v19;
  v31 = vmvn_s8(v30);
  v32 = vand_s8(*(int8x8_t *)v20.i8, (int8x8_t)0x3C00000000000000);
  v33.i16[3] = v24;
  v34 = -(a6 * a4);
  v35 = 16 * a14;
  v36 = 8 * a14;
  if ((a17 & 0x30) != 0)
  {
    v37.i64[0] = -1;
    v37.i64[1] = -1;
    v38 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v39.i64[0] = 0x3C003C003C003C00;
    v39.i64[1] = 0x3C003C003C003C00;
    while (1)
    {
      v40 = (a8 - (unint64_t)a3) >> 3;
      if (v40 >= a12)
        v40 = a12;
      v41 = v40;
      if (v40 < 2)
        goto LABEL_43;
      while (1)
      {
        v42 = *(unsigned __int16 *)a10;
        if (!*(_WORD *)a10)
        {
          v65 = (int8x16_t *)&a10[v41];
          v66 = (int8x16_t *)a10;
          do
            v67 = v66++;
          while (v66 <= v65 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v67)) & 0x80) != 0);
          do
          {
            v68 = v67;
            v67 = (int8x16_t *)((char *)v67 + 4);
          }
          while (v67 <= v65 && !v68->i32[0]);
          if (v68 < v65)
          {
            while (!v68->i8[0])
            {
              v68 = (int8x16_t *)((char *)v68 + 1);
              if (v68 >= v65)
              {
                v68 = (int8x16_t *)&a10[v41];
                break;
              }
            }
          }
          v69 = (char *)v68 - a10;
          v70 = ((char *)v68 - a10) * a14;
          a3 += v70;
          result += v70;
          a10 += v70;
          v41 -= v69;
          goto LABEL_40;
        }
        if (v42 != 0xFFFF)
          break;
        v43 = (int8x16_t *)&a10[v41];
        v44 = (int8x16_t *)a10;
        do
          v45 = v44++;
        while (v44 <= v43 && (vminvq_u8((uint8x16_t)vceqq_s8(*v45, v37)) & 0x80) != 0);
        do
        {
          v46 = v45;
          v45 = (int8x16_t *)((char *)v45 + 4);
        }
        while (v45 <= v43 && v46->i32[0] == -1);
        if (v46 < v43)
        {
          while (v46->u8[0] == 255)
          {
            v46 = (int8x16_t *)((char *)v46 + 1);
            if (v46 >= v43)
            {
              v46 = (int8x16_t *)&a10[v41];
              break;
            }
          }
        }
        v47 = 0;
        v48 = (char *)v46 - a10;
        v49 = (char *)v46 - a10;
        do
        {
          v50 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v47], v22), v23);
          v51 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&result->i8[v47], v27), v28);
          v52 = vcvt_hight_f32_f16(v50);
          v53 = vcvtq_f32_f16(*(float16x4_t *)v50.i8);
          v54 = vcvt_hight_f32_f16(v51);
          v55 = vcvtq_f32_f16(*(float16x4_t *)v51.i8);
          v56 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 3);
          v57 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 3);
          v58 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 3);
          v59 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 3);
          v60 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v58), (int16x8_t)vcgtzq_f32(v59));
          v61 = vmlsq_laneq_f32(v58, v56, v55, 3);
          v62 = vmlsq_laneq_f32(v59, v57, v54, 3);
          v63 = vaddq_f32(vaddq_f32(vmlsq_laneq_f32(v55, v55, v53, 3), vmlsq_laneq_f32(v53, v53, v55, 3)), (float32x4_t)(*(_OWORD *)&vsubq_f32(vmulq_laneq_f32(v55, v53, 3), vmulq_laneq_f32(v53, v55, 3)) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
          v64 = vaddq_f32(vaddq_f32(vmlsq_laneq_f32(v54, v54, v52, 3), vmlsq_laneq_f32(v52, v52, v54, 3)), (float32x4_t)(*(_OWORD *)&vsubq_f32(vmulq_laneq_f32(v54, v52, 3), vmulq_laneq_f32(v52, v54, 3)) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
          v64.i32[3] = vaddq_f32(v52, v62).i32[3];
          v63.i32[3] = vaddq_f32(v53, v61).i32[3];
          *(int8x16_t *)&result->i8[v47] = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v56), (int16x8_t)vcgtzq_f32(v57)), vbslq_s8(v60, (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v63), v64), (int8x16_t)v50), (int8x16_t)v51);
          a10 += v29;
          v49 -= 2;
          v47 += v35;
        }
        while (v49 > 1);
        a3 = (int8x8_t *)((char *)a3 + v47);
        result = (int8x8_t *)((char *)result + v47);
        v41 = v41 - v48 + v49;
LABEL_40:
        if (v41 <= 1)
          goto LABEL_43;
      }
      v71 = 0;
      while (1)
      {
        v72 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v42) & 0xFF00FF00FF00FFLL))), v38);
        v73 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v42)) & 0xFF00FF00FF00FFLL))), v38);
        v74 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v71], v22), v23);
        v75 = (float16x8_t)vbslq_s8(vandq_s8(v26, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v72), (int16x8_t)vcgtzq_f32(v73))), v39, *(int8x16_t *)&result->i8[v71]);
        v76 = vcvtq_f32_f16(*(float16x4_t *)v74.i8);
        v77 = vcvtq_f32_f16(*(float16x4_t *)v75.i8);
        v78 = vmulq_f32(v73, vcvt_hight_f32_f16(v74));
        v79 = vmulq_f32(v72, v76);
        v80 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v79, 3);
        v81 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 3);
        v82 = vcvt_hight_f32_f16(v75);
        v83 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v82, 3);
        v84 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v77, 3);
        v85 = (int8x16_t)vcgtzq_f32(v84);
        v86 = (int8x16_t)vcgtzq_f32(v83);
        v87 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v80), (int16x8_t)vcgtzq_f32(v81));
        v88 = vmlsq_laneq_f32(v84, v80, v77, 3);
        v89 = vmlsq_laneq_f32(v83, v81, v82, 3);
        v90 = (int8x16_t)vaddq_f32(vaddq_f32(vmlsq_laneq_f32(v82, v82, v78, 3), vmlsq_laneq_f32(v78, v78, v82, 3)), (float32x4_t)(*(_OWORD *)&vsubq_f32(vmulq_laneq_f32(v82, v78, 3), vmulq_laneq_f32(v78, v82, 3)) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
        v91 = (int8x16_t)vaddq_f32(vaddq_f32(vmlsq_laneq_f32(v77, v77, v79, 3), vmlsq_laneq_f32(v79, v79, v77, 3)), (float32x4_t)(*(_OWORD *)&vsubq_f32(vmulq_laneq_f32(v77, v79, 3), vmulq_laneq_f32(v79, v77, 3)) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
        v91.i32[3] = vaddq_f32(v79, v88).i32[3];
        v90.i32[3] = vaddq_f32(v78, v89).i32[3];
        *(int8x16_t *)&result->i8[v71] = vbslq_s8(v87, (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)vbslq_s8(v85, v91, (int8x16_t)v79)), (float32x4_t)vbslq_s8(v86, v90, (int8x16_t)v78)), (int8x16_t)v75);
        a10 += v29;
        v41 -= 2;
        if (v41 < 2)
          break;
        LOWORD(v42) = *(_WORD *)a10;
        v71 += v35;
        if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
        {
          result = (int8x8_t *)((char *)result + v71);
          a3 = (int8x8_t *)((char *)a3 + v71);
          goto LABEL_40;
        }
      }
      result = (int8x8_t *)((char *)result + v35 + v71);
      a3 = (int8x8_t *)((char *)a3 + v35 + v71);
LABEL_43:
      for (i = a12 - v40 + v41; i; --i)
      {
        if (*a10)
        {
          v93 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v38);
          v94 = (float16x4_t)vbsl_s8(vand_s8(v33, (int8x8_t)vmovn_s32(vcgtzq_f32(v93))), (int8x8_t)0x3C003C003C003C00, *result);
          v95 = vcvtq_f32_f16(v94);
          v96 = vmulq_f32(v93, vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(*a3, v31), v32)));
          v97 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v96, 3);
          v98 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v95, 3);
          v99 = (int8x16_t)vcgtzq_f32(v98);
          v100 = (int8x8_t)vmovn_s32(vcgtzq_f32(v97));
          v101 = vmlsq_laneq_f32(v98, v97, v95, 3);
          v102 = (int8x16_t)vaddq_f32(vaddq_f32(vmlsq_laneq_f32(v96, v96, v95, 3), vmlsq_laneq_f32(v95, v95, v96, 3)), vabdq_f32(vmulq_laneq_f32(v95, v96, 3), vmulq_laneq_f32(v96, v95, 3)));
          v102.i32[3] = vaddq_f32(v96, v101).i32[3];
          *result = vbsl_s8(v100, (int8x8_t)vcvt_f16_f32((float32x4_t)vbslq_s8(v99, v102, (int8x16_t)v96)), (int8x8_t)v94);
        }
        v103 = &a3[a14];
        a10 += a14;
        if ((unint64_t)v103 >= a8)
          v104 = -(uint64_t)a7;
        else
          v104 = 0;
        a3 = &v103[v104];
        result = (int8x8_t *)((char *)result + v36);
      }
      a10 += a11;
      result += a2;
      v105 = &a5[a4];
      if ((unint64_t)v105 >= a9)
        v106 = v34;
      else
        v106 = 0;
      v107 = &v105[v106];
      v108 = a8 + 8 * v106 + 8 * a4;
      a3 += a4;
      if (a9)
      {
        a3 = v107;
        a8 = v108;
        a5 = v107;
      }
      v109 = __OFSUB__(a13--, 1);
      if ((a13 < 0) ^ v109 | (a13 == 0))
        return result;
    }
  }
  v110.i64[0] = -1;
  v110.i64[1] = -1;
  v111 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v112.i64[0] = 0x3C003C003C003C00;
  v112.i64[1] = 0x3C003C003C003C00;
  while (2)
  {
    v113 = (a8 - (unint64_t)a3) >> 3;
    if (v113 >= a12)
      v113 = a12;
    v114 = v113;
    if (v113 < 2)
      goto LABEL_93;
    while (1)
    {
      v115 = *(unsigned __int16 *)a10;
      if (!*(_WORD *)a10)
      {
        v138 = (int8x16_t *)&a10[v114];
        v139 = (int8x16_t *)a10;
        do
          v140 = v139++;
        while (v139 <= v138 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v140)) & 0x80) != 0);
        do
        {
          v141 = v140;
          v140 = (int8x16_t *)((char *)v140 + 4);
        }
        while (v140 <= v138 && !v141->i32[0]);
        if (v141 < v138)
        {
          while (!v141->i8[0])
          {
            v141 = (int8x16_t *)((char *)v141 + 1);
            if (v141 >= v138)
            {
              v141 = (int8x16_t *)&a10[v114];
              break;
            }
          }
        }
        v142 = (char *)v141 - a10;
        v143 = ((char *)v141 - a10) * a14;
        a3 += v143;
        result += v143;
        a10 += v143;
        v114 -= v142;
        goto LABEL_90;
      }
      if (v115 != 0xFFFF)
        break;
      v116 = (int8x16_t *)&a10[v114];
      v117 = (int8x16_t *)a10;
      do
        v118 = v117++;
      while (v117 <= v116 && (vminvq_u8((uint8x16_t)vceqq_s8(*v118, v110)) & 0x80) != 0);
      do
      {
        v119 = v118;
        v118 = (int8x16_t *)((char *)v118 + 4);
      }
      while (v118 <= v116 && v119->i32[0] == -1);
      if (v119 < v116)
      {
        while (v119->u8[0] == 255)
        {
          v119 = (int8x16_t *)((char *)v119 + 1);
          if (v119 >= v116)
          {
            v119 = (int8x16_t *)&a10[v114];
            break;
          }
        }
      }
      v120 = 0;
      v121 = (char *)v119 - a10;
      v122 = (char *)v119 - a10;
      do
      {
        v123 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v120]), v22), v23);
        v124 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&result->i8[v120]), v27), v28);
        v125 = vcvt_hight_f32_f16(v123);
        v126 = vcvtq_f32_f16(*(float16x4_t *)v123.i8);
        v127 = vcvtq_f32_f16(*(float16x4_t *)v124.i8);
        v128 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v126, 3);
        v129 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v125, 3);
        v130 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v127, 3);
        v131 = vcvt_hight_f32_f16(v124);
        v132 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v131, 3);
        v133 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v130), (int16x8_t)vcgtzq_f32(v132));
        v134 = (int16x8_t)vcgtzq_f32(v128);
        v135 = vmlsq_laneq_f32(v130, v128, v127, 3);
        v136 = vaddq_f32(vaddq_f32(vmlsq_laneq_f32(v127, v127, v126, 3), vmlsq_laneq_f32(v126, v126, v127, 3)), (float32x4_t)(*(_OWORD *)&vsubq_f32(vmulq_laneq_f32(v127, v126, 3), vmulq_laneq_f32(v126, v127, 3)) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
        v137 = vaddq_f32(vaddq_f32(vmlsq_laneq_f32(v131, v131, v125, 3), vmlsq_laneq_f32(v125, v125, v131, 3)), (float32x4_t)(*(_OWORD *)&vsubq_f32(vmulq_laneq_f32(v131, v125, 3), vmulq_laneq_f32(v125, v131, 3)) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
        v137.i32[3] = vaddq_f32(v125, vmlsq_laneq_f32(v132, v129, v131, 3)).i32[3];
        v136.i32[3] = vaddq_f32(v126, v135).i32[3];
        *(int8x16_t *)&result->i8[v120] = vrev16q_s8(vbslq_s8((int8x16_t)vuzp1q_s16(v134, (int16x8_t)vcgtzq_f32(v129)), vbslq_s8(v133, (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v136), v137), (int8x16_t)v123), (int8x16_t)v124));
        a10 += v29;
        v122 -= 2;
        v120 += v35;
      }
      while (v122 > 1);
      a3 = (int8x8_t *)((char *)a3 + v120);
      result = (int8x8_t *)((char *)result + v120);
      v114 = v114 - v121 + v122;
LABEL_90:
      if (v114 <= 1)
        goto LABEL_93;
    }
    v144 = 0;
    while (1)
    {
      v145 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v115) & 0xFF00FF00FF00FFLL))), v111);
      v146 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v115)) & 0xFF00FF00FF00FFLL))), v111);
      v147 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v144]), v22), v23);
      v148 = (float16x8_t)vbslq_s8(vandq_s8(v26, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v145), (int16x8_t)vcgtzq_f32(v146))), v112, vrev16q_s8(*(int8x16_t *)&result->i8[v144]));
      v149 = vcvtq_f32_f16(*(float16x4_t *)v147.i8);
      v150 = vcvtq_f32_f16(*(float16x4_t *)v148.i8);
      v151 = vcvt_hight_f32_f16(v148);
      v152 = vmulq_f32(v146, vcvt_hight_f32_f16(v147));
      v153 = vmulq_f32(v145, v149);
      v154 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v153, 3);
      v155 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v152, 3);
      v156 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v151, 3);
      v157 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v150, 3);
      v158 = (int8x16_t)vcgtzq_f32(v157);
      v159 = (int8x16_t)vcgtzq_f32(v156);
      v160 = (int16x8_t)vcgtzq_f32(v155);
      v161 = (int16x8_t)vcgtzq_f32(v154);
      v162 = vmlsq_laneq_f32(v157, v154, v150, 3);
      v163 = vmlsq_laneq_f32(v156, v155, v151, 3);
      v164 = (int8x16_t)vaddq_f32(vaddq_f32(vmlsq_laneq_f32(v151, v151, v152, 3), vmlsq_laneq_f32(v152, v152, v151, 3)), (float32x4_t)(*(_OWORD *)&vsubq_f32(vmulq_laneq_f32(v151, v152, 3), vmulq_laneq_f32(v152, v151, 3)) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
      v165 = (int8x16_t)vaddq_f32(vaddq_f32(vmlsq_laneq_f32(v150, v150, v153, 3), vmlsq_laneq_f32(v153, v153, v150, 3)), (float32x4_t)(*(_OWORD *)&vsubq_f32(vmulq_laneq_f32(v150, v153, 3), vmulq_laneq_f32(v153, v150, 3)) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
      v165.i32[3] = vaddq_f32(v153, v162).i32[3];
      v164.i32[3] = vaddq_f32(v152, v163).i32[3];
      *(int8x16_t *)&result->i8[v144] = vrev16q_s8(vbslq_s8((int8x16_t)vuzp1q_s16(v161, v160), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)vbslq_s8(v158, v165, (int8x16_t)v153)), (float32x4_t)vbslq_s8(v159, v164, (int8x16_t)v152)), (int8x16_t)v148));
      a10 += v29;
      v114 -= 2;
      if (v114 < 2)
        break;
      LOWORD(v115) = *(_WORD *)a10;
      v144 += v35;
      if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
      {
        result = (int8x8_t *)((char *)result + v144);
        a3 = (int8x8_t *)((char *)a3 + v144);
        goto LABEL_90;
      }
    }
    result = (int8x8_t *)((char *)result + v35 + v144);
    a3 = (int8x8_t *)((char *)a3 + v35 + v144);
LABEL_93:
    for (j = a12 - v113 + v114; j; --j)
    {
      if (*a10)
      {
        v167 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v111);
        v168 = (float16x4_t)vbsl_s8(vand_s8(v33, (int8x8_t)vmovn_s32(vcgtzq_f32(v167))), (int8x8_t)0x3C003C003C003C00, vrev16_s8(*result));
        v169 = vmulq_f32(v167, vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(vrev16_s8(*a3), v31), v32)));
        v170 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v169, 3);
        v171 = vcvtq_f32_f16(v168);
        v172 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v171, 3);
        v173 = (int8x16_t)vcgtzq_f32(v172);
        v174 = vcgtzq_f32(v170);
        v175 = vmlsq_laneq_f32(v172, v170, v171, 3);
        v176 = (int8x16_t)vaddq_f32(vaddq_f32(vmlsq_laneq_f32(v169, v169, v171, 3), vmlsq_laneq_f32(v171, v171, v169, 3)), vabdq_f32(vmulq_laneq_f32(v171, v169, 3), vmulq_laneq_f32(v169, v171, 3)));
        v176.i32[3] = vaddq_f32(v169, v175).i32[3];
        *result = vrev16_s8(vbsl_s8((int8x8_t)vmovn_s32(v174), (int8x8_t)vcvt_f16_f32((float32x4_t)vbslq_s8(v173, v176, (int8x16_t)v169)), (int8x8_t)v168));
      }
      v177 = &a3[a14];
      a10 += a14;
      if ((unint64_t)v177 >= a8)
        v178 = -(uint64_t)a7;
      else
        v178 = 0;
      a3 = &v177[v178];
      result = (int8x8_t *)((char *)result + v36);
    }
    a10 += a11;
    result += a2;
    v179 = &a5[a4];
    if ((unint64_t)v179 >= a9)
      v180 = v34;
    else
      v180 = 0;
    v181 = &v179[v180];
    v182 = a8 + 8 * v180 + 8 * a4;
    a3 += a4;
    if (a9)
    {
      a3 = v181;
      a8 = v182;
      a5 = v181;
    }
    v109 = __OFSUB__(a13--, 1);
    if (!((a13 < 0) ^ v109 | (a13 == 0)))
      continue;
    return result;
  }
}

int8x8_t *composite_pixelmask<(CGCompositeOperation)23,_rgbaf16_t>(int8x8_t *result, uint64_t a2, int8x8_t *a3, uint64_t a4, int8x8_t *a5, int a6, int a7, unint64_t a8, unint64_t a9, char *a10, uint64_t a11, int a12, int a13, int a14, int a15, int a16, char a17)
{
  unsigned int v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64_t v29;
  int8x8_t v30;
  int8x8_t v31;
  int8x8_t v32;
  int8x8_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x16_t v37;
  float32x4_t v38;
  int8x16_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int8x16_t *v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  float16x8_t v50;
  float16x8_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int8x16_t *v58;
  int8x16_t *v59;
  int8x16_t *v60;
  int8x16_t *v61;
  int64_t v62;
  int64_t v63;
  uint64_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float16x8_t v67;
  float16x8_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  unint64_t i;
  float32x4_t v77;
  float16x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int8x8_t *v82;
  uint64_t v83;
  int8x8_t *v84;
  uint64_t v85;
  int8x8_t *v86;
  uint64_t v87;
  BOOL v88;
  int8x16_t v89;
  float32x4_t v90;
  int8x16_t v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  int8x16_t *v95;
  int8x16_t *v96;
  int8x16_t *v97;
  int8x16_t *v98;
  uint64_t v99;
  int64_t v100;
  unint64_t v101;
  float16x8_t v102;
  float16x8_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  int8x16_t *v110;
  int8x16_t *v111;
  int8x16_t *v112;
  int8x16_t *v113;
  int64_t v114;
  int64_t v115;
  uint64_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float16x8_t v119;
  float16x8_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  unint64_t j;
  float32x4_t v129;
  float16x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  int8x8_t *v134;
  uint64_t v135;
  int8x8_t *v136;
  uint64_t v137;
  int8x8_t *v138;
  uint64_t v139;

  if (a16)
    v19 = 0;
  else
    v19 = -1;
  v20 = (int8x16_t)vdupq_n_s16(v19);
  v21.i64[0] = 0xFFFF000000000000;
  v21.i64[1] = 0xFFFF000000000000;
  v22 = vmvnq_s8(vandq_s8(v20, v21));
  v23 = vandq_s8(v20, (int8x16_t)xmmword_185005140);
  if (a15)
    v24 = 0;
  else
    v24 = -1;
  v25 = (int8x16_t)vdupq_n_s16(v24);
  v26 = vandq_s8(v25, v21);
  v27 = vmvnq_s8(v26);
  v28 = vandq_s8(v25, (int8x16_t)xmmword_185005140);
  v29 = 2 * a14;
  v33.i32[0] = 0;
  v33.i16[2] = 0;
  v30.i32[0] = 0;
  v30.i16[2] = 0;
  v30.i16[3] = v19;
  v31 = vmvn_s8(v30);
  v32 = vand_s8(*(int8x8_t *)v20.i8, (int8x8_t)0x3C00000000000000);
  v33.i16[3] = v24;
  v34 = -(a6 * a4);
  v35 = 16 * a14;
  v36 = 8 * a14;
  if ((a17 & 0x30) != 0)
  {
    v37.i64[0] = -1;
    v37.i64[1] = -1;
    v38 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v39.i64[0] = 0x3C003C003C003C00;
    v39.i64[1] = 0x3C003C003C003C00;
    while (1)
    {
      v40 = (a8 - (unint64_t)a3) >> 3;
      if (v40 >= a12)
        v40 = a12;
      v41 = v40;
      if (v40 < 2)
        goto LABEL_43;
      while (1)
      {
        v42 = *(unsigned __int16 *)a10;
        if (!*(_WORD *)a10)
        {
          v58 = (int8x16_t *)&a10[v41];
          v59 = (int8x16_t *)a10;
          do
            v60 = v59++;
          while (v59 <= v58 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v60)) & 0x80) != 0);
          do
          {
            v61 = v60;
            v60 = (int8x16_t *)((char *)v60 + 4);
          }
          while (v60 <= v58 && !v61->i32[0]);
          if (v61 < v58)
          {
            while (!v61->i8[0])
            {
              v61 = (int8x16_t *)((char *)v61 + 1);
              if (v61 >= v58)
              {
                v61 = (int8x16_t *)&a10[v41];
                break;
              }
            }
          }
          v62 = (char *)v61 - a10;
          v63 = ((char *)v61 - a10) * a14;
          a3 += v63;
          result += v63;
          a10 += v63;
          v41 -= v62;
          goto LABEL_40;
        }
        if (v42 != 0xFFFF)
          break;
        v43 = (int8x16_t *)&a10[v41];
        v44 = (int8x16_t *)a10;
        do
          v45 = v44++;
        while (v44 <= v43 && (vminvq_u8((uint8x16_t)vceqq_s8(*v45, v37)) & 0x80) != 0);
        do
        {
          v46 = v45;
          v45 = (int8x16_t *)((char *)v45 + 4);
        }
        while (v45 <= v43 && v46->i32[0] == -1);
        if (v46 < v43)
        {
          while (v46->u8[0] == 255)
          {
            v46 = (int8x16_t *)((char *)v46 + 1);
            if (v46 >= v43)
            {
              v46 = (int8x16_t *)&a10[v41];
              break;
            }
          }
        }
        v47 = 0;
        v48 = (char *)v46 - a10;
        v49 = (char *)v46 - a10;
        do
        {
          v50 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v47], v22), v23);
          v51 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&result->i8[v47], v27), v28);
          v52 = vcvt_hight_f32_f16(v50);
          v53 = vcvtq_f32_f16(*(float16x4_t *)v50.i8);
          v54 = vcvt_hight_f32_f16(v51);
          v55 = vcvtq_f32_f16(*(float16x4_t *)v51.i8);
          v56 = vmlsq_f32(v53, v55, v53);
          v57 = vmlsq_f32(v52, v54, v52);
          v56.i32[3] = v53.i32[3];
          v57.i32[3] = v52.i32[3];
          *(int8x16_t *)&result->i8[v47] = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 3))), vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 3))), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vmlsq_f32(v55, v53, v55), v56)), vaddq_f32(vmlsq_f32(v54, v52, v54), v57)), (int8x16_t)v50),
                                             (int8x16_t)v51);
          a10 += v29;
          v49 -= 2;
          v47 += v35;
        }
        while (v49 > 1);
        a3 = (int8x8_t *)((char *)a3 + v47);
        result = (int8x8_t *)((char *)result + v47);
        v41 = v41 - v48 + v49;
LABEL_40:
        if (v41 <= 1)
          goto LABEL_43;
      }
      v64 = 0;
      while (1)
      {
        v65 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v42) & 0xFF00FF00FF00FFLL))), v38);
        v66 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v42)) & 0xFF00FF00FF00FFLL))), v38);
        v67 = (float16x8_t)vorrq_s8(vandq_s8(*(int8x16_t *)&a3->i8[v64], v22), v23);
        v68 = (float16x8_t)vbslq_s8(vandq_s8(v26, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v65), (int16x8_t)vcgtzq_f32(v66))), v39, *(int8x16_t *)&result->i8[v64]);
        v69 = vcvtq_f32_f16(*(float16x4_t *)v67.i8);
        v70 = vcvt_hight_f32_f16(v68);
        v71 = vmulq_f32(v66, vcvt_hight_f32_f16(v67));
        v72 = vmulq_f32(v65, v69);
        v73 = vcvtq_f32_f16(*(float16x4_t *)v68.i8);
        v74 = vmlsq_f32(v72, v73, v72);
        v75 = vmlsq_f32(v71, v70, v71);
        v75.i32[3] = v71.i32[3];
        v74.i32[3] = v72.i32[3];
        *(int8x16_t *)&result->i8[v64] = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v72, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v71, 3))), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v73, 3)), (int8x16_t)vaddq_f32(v74, vmlsq_f32(v73, v72, v73)), (int8x16_t)v72)), (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v70, 3)), (int8x16_t)vaddq_f32(v75, vmlsq_f32(v70, v71, v70)), (int8x16_t)v71)), (int8x16_t)v68);
        a10 += v29;
        v41 -= 2;
        if (v41 < 2)
          break;
        LOWORD(v42) = *(_WORD *)a10;
        v64 += v35;
        if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
        {
          result = (int8x8_t *)((char *)result + v64);
          a3 = (int8x8_t *)((char *)a3 + v64);
          goto LABEL_40;
        }
      }
      result = (int8x8_t *)((char *)result + v35 + v64);
      a3 = (int8x8_t *)((char *)a3 + v35 + v64);
LABEL_43:
      for (i = a12 - v40 + v41; i; --i)
      {
        if (*a10)
        {
          v77 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v38);
          v78 = (float16x4_t)vbsl_s8(vand_s8(v33, (int8x8_t)vmovn_s32(vcgtzq_f32(v77))), (int8x8_t)0x3C003C003C003C00, *result);
          v79 = vcvtq_f32_f16(v78);
          v80 = vmulq_f32(v77, vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(*a3, v31), v32)));
          v81 = vmlsq_f32(v80, v79, v80);
          v81.i32[3] = v80.i32[3];
          *result = vbsl_s8((int8x8_t)vdup_lane_s16(vmovn_s32(vcgtzq_f32(v80)), 3), (int8x8_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(vdup_lane_s16(vmovn_s32(vcgtzq_f32(v79)), 3)), (int8x16_t)vaddq_f32(v81, vmlsq_f32(v79, v80, v79)), (int8x16_t)v80)), (int8x8_t)v78);
        }
        v82 = &a3[a14];
        a10 += a14;
        if ((unint64_t)v82 >= a8)
          v83 = -(uint64_t)a7;
        else
          v83 = 0;
        a3 = &v82[v83];
        result = (int8x8_t *)((char *)result + v36);
      }
      a10 += a11;
      result += a2;
      v84 = &a5[a4];
      if ((unint64_t)v84 >= a9)
        v85 = v34;
      else
        v85 = 0;
      v86 = &v84[v85];
      v87 = a8 + 8 * v85 + 8 * a4;
      a3 += a4;
      if (a9)
      {
        a3 = v86;
        a8 = v87;
        a5 = v86;
      }
      v88 = __OFSUB__(a13--, 1);
      if ((a13 < 0) ^ v88 | (a13 == 0))
        return result;
    }
  }
  v89.i64[0] = -1;
  v89.i64[1] = -1;
  v90 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v91.i64[0] = 0x3C003C003C003C00;
  v91.i64[1] = 0x3C003C003C003C00;
  while (2)
  {
    v92 = (a8 - (unint64_t)a3) >> 3;
    if (v92 >= a12)
      v92 = a12;
    v93 = v92;
    if (v92 < 2)
      goto LABEL_93;
    while (1)
    {
      v94 = *(unsigned __int16 *)a10;
      if (!*(_WORD *)a10)
      {
        v110 = (int8x16_t *)&a10[v93];
        v111 = (int8x16_t *)a10;
        do
          v112 = v111++;
        while (v111 <= v110 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v112)) & 0x80) != 0);
        do
        {
          v113 = v112;
          v112 = (int8x16_t *)((char *)v112 + 4);
        }
        while (v112 <= v110 && !v113->i32[0]);
        if (v113 < v110)
        {
          while (!v113->i8[0])
          {
            v113 = (int8x16_t *)((char *)v113 + 1);
            if (v113 >= v110)
            {
              v113 = (int8x16_t *)&a10[v93];
              break;
            }
          }
        }
        v114 = (char *)v113 - a10;
        v115 = ((char *)v113 - a10) * a14;
        a3 += v115;
        result += v115;
        a10 += v115;
        v93 -= v114;
        goto LABEL_90;
      }
      if (v94 != 0xFFFF)
        break;
      v95 = (int8x16_t *)&a10[v93];
      v96 = (int8x16_t *)a10;
      do
        v97 = v96++;
      while (v96 <= v95 && (vminvq_u8((uint8x16_t)vceqq_s8(*v97, v89)) & 0x80) != 0);
      do
      {
        v98 = v97;
        v97 = (int8x16_t *)((char *)v97 + 4);
      }
      while (v97 <= v95 && v98->i32[0] == -1);
      if (v98 < v95)
      {
        while (v98->u8[0] == 255)
        {
          v98 = (int8x16_t *)((char *)v98 + 1);
          if (v98 >= v95)
          {
            v98 = (int8x16_t *)&a10[v93];
            break;
          }
        }
      }
      v99 = 0;
      v100 = (char *)v98 - a10;
      v101 = (char *)v98 - a10;
      do
      {
        v102 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v99]), v22), v23);
        v103 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&result->i8[v99]), v27), v28);
        v104 = vcvt_hight_f32_f16(v102);
        v105 = vcvtq_f32_f16(*(float16x4_t *)v102.i8);
        v106 = vcvt_hight_f32_f16(v103);
        v107 = vcvtq_f32_f16(*(float16x4_t *)v103.i8);
        v108 = vmlsq_f32(v105, v107, v105);
        v109 = vmlsq_f32(v104, v106, v104);
        v108.i32[3] = v105.i32[3];
        v109.i32[3] = v104.i32[3];
        *(int8x16_t *)&result->i8[v99] = vrev16q_s8(vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v105, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v104, 3))), vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v107, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v106, 3))), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vmlsq_f32(v107, v105, v107), v108)), vaddq_f32(vmlsq_f32(v106, v104, v106), v109)),
                                               (int8x16_t)v102),
                                             (int8x16_t)v103));
        a10 += v29;
        v101 -= 2;
        v99 += v35;
      }
      while (v101 > 1);
      a3 = (int8x8_t *)((char *)a3 + v99);
      result = (int8x8_t *)((char *)result + v99);
      v93 = v93 - v100 + v101;
LABEL_90:
      if (v93 <= 1)
        goto LABEL_93;
    }
    v116 = 0;
    while (1)
    {
      v117 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v94) & 0xFF00FF00FF00FFLL))), v90);
      v118 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(BYTE1(v94)) & 0xFF00FF00FF00FFLL))), v90);
      v119 = (float16x8_t)vorrq_s8(vandq_s8(vrev16q_s8(*(int8x16_t *)&a3->i8[v116]), v22), v23);
      v120 = (float16x8_t)vbslq_s8(vandq_s8(v26, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v117), (int16x8_t)vcgtzq_f32(v118))), v91, vrev16q_s8(*(int8x16_t *)&result->i8[v116]));
      v121 = vcvtq_f32_f16(*(float16x4_t *)v119.i8);
      v122 = vcvtq_f32_f16(*(float16x4_t *)v120.i8);
      v123 = vcvt_hight_f32_f16(v120);
      v124 = vmulq_f32(v118, vcvt_hight_f32_f16(v119));
      v125 = vmulq_f32(v117, v121);
      v126 = vmlsq_f32(v125, v122, v125);
      v127 = vmlsq_f32(v124, v123, v124);
      v127.i32[3] = v124.i32[3];
      v126.i32[3] = v125.i32[3];
      *(int8x16_t *)&result->i8[v116] = vrev16q_s8(vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v125, 3)), (int16x8_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v124, 3))), (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v122, 3)), (int8x16_t)vaddq_f32(v126, vmlsq_f32(v122, v125, v122)), (int8x16_t)v125)), (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v123, 3)), (int8x16_t)vaddq_f32(v127, vmlsq_f32(v123, v124, v123)), (int8x16_t)v124)),
                                            (int8x16_t)v120));
      a10 += v29;
      v93 -= 2;
      if (v93 < 2)
        break;
      LOWORD(v94) = *(_WORD *)a10;
      v116 += v35;
      if ((unsigned __int16)(*(_WORD *)a10 - 1) >= 0xFFFEu)
      {
        result = (int8x8_t *)((char *)result + v116);
        a3 = (int8x8_t *)((char *)a3 + v116);
        goto LABEL_90;
      }
    }
    result = (int8x8_t *)((char *)result + v35 + v116);
    a3 = (int8x8_t *)((char *)a3 + v35 + v116);
LABEL_93:
    for (j = a12 - v92 + v93; j; --j)
    {
      if (*a10)
      {
        v129 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vdup_n_s16(*a10))), v90);
        v130 = (float16x4_t)vbsl_s8(vand_s8(v33, (int8x8_t)vmovn_s32(vcgtzq_f32(v129))), (int8x8_t)0x3C003C003C003C00, vrev16_s8(*result));
        v131 = vcvtq_f32_f16(v130);
        v132 = vmulq_f32(v129, vcvtq_f32_f16((float16x4_t)vorr_s8(vand_s8(vrev16_s8(*a3), v31), v32)));
        v133 = vmlsq_f32(v132, v131, v132);
        v133.i32[3] = v132.i32[3];
        *result = vrev16_s8(vbsl_s8((int8x8_t)vdup_lane_s16(vmovn_s32(vcgtzq_f32(v132)), 3), (int8x8_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(vdup_lane_s16(vmovn_s32(vcgtzq_f32(v131)), 3)), (int8x16_t)vaddq_f32(v133, vmlsq_f32(v131, v132, v131)), (int8x16_t)v132)), (int8x8_t)v130));
      }
      v134 = &a3[a14];
      a10 += a14;
      if ((unint64_t)v134 >= a8)
        v135 = -(uint64_t)a7;
      else
        v135 = 0;
      a3 = &v134[v135];
      result = (int8x8_t *)((char *)result + v36);
    }
    a10 += a11;
    result += a2;
    v136 = &a5[a4];
    if ((unint64_t)v136 >= a9)
      v137 = v34;
    else
      v137 = 0;
    v138 = &v136[v137];
    v139 = a8 + 8 * v137 + 8 * a4;
    a3 += a4;
    if (a9)
    {
      a3 = v138;
      a8 = v139;
      a5 = v138;
    }
    v88 = __OFSUB__(a13--, 1);
    if (!((a13 < 0) ^ v88 | (a13 == 0)))
      continue;
    return result;
  }
}

uint64_t RGBAf16_shade(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  _BOOL8 v8;
  signed int v9;
  __n128 v11;
  void *v12;
  void *v13;
  int v14;
  int v15;
  uint64_t v16;
  void *v17;
  _BYTE v18[36];
  char v19;
  _QWORD v20[483];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v5 = v4;
  v6 = (uint64_t)v3;
  v20[482] = *MEMORY[0x1E0C80C00];
  v7 = *(int **)v2;
  v8 = !*((_QWORD *)v3 + 12) && !*(_QWORD *)(v4 + 72) && *(float *)(v4 + 4) >= 1.0;
  v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 56) + 16 * *v3 + 8 * v8 + 4 * (*((_QWORD *)v3 + 6) == 0));
  if (v9 > 27)
    return 0xFFFFFFFFLL;
  if (*((int *)v3 + 1) < 1 || *((int *)v3 + 2) < 1)
    return 0;
  if ((int)_blt_shade_initialize((uint64_t)v3, v4, (uint64_t)&v13, (uint64_t)v18) < 1)
    return 0xFFFFFFFFLL;
  if ((*(_DWORD *)v5 & 0xF000000) != 0x3000000)
  {
    if (v13)
      goto LABEL_22;
    return 0xFFFFFFFFLL;
  }
  if (*(_QWORD *)(v5 + 16))
  {
    v12 = RGBAf16_shade_radial_RGB;
  }
  else if (*(_QWORD *)(v5 + 24))
  {
    v12 = RGBAf16_shade_conic_RGB;
  }
  else if (v16 < 2)
  {
    v12 = RGBAf16_shade_axial_RGB;
  }
  else
  {
    v12 = RGBAf16_shade_custom_RGB;
  }
  v13 = v12;
LABEL_22:
  v14 = *v7;
  v15 = v14;
  RGBAf16_image_mark(v6, (uint64_t)&v13, v9, v11);
  if (v17 && (v17 < &v19 || v20 < v17))
    free(v17);
  return 1;
}

void RGBAf16_shade_radial_RGB(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int8x16_t a5)
{
  int8x16_t v5;
  int8x16_t v6;
  float *v8;
  float v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  char *v25;
  float16x4_t *v26;
  uint64_t v27;
  uint64_t v28;
  float *v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  int v34;
  int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  BOOL v47;
  float v48;
  uint64_t v50;
  float v51;
  uint64_t v52;
  __int32 v53;
  float v54;
  char v55;
  float v56;
  float v57;
  float v58;
  float *v59;
  uint64_t v60;
  float16x4_t *v61;
  int v62;
  float v63;
  float v64;
  float v65;
  float v67;
  float v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  float v75;
  float *v79;
  int v84;
  float v92;
  _DWORD *v93;
  float32x2_t *v94;
  float v95;
  float v96;
  float v97;
  char v98;
  uint64_t v99;
  float *v100;
  float v102;
  float *v109;
  float v111;
  char v122;
  uint64_t v123;
  float v125;
  int v133;

  v8 = *(float **)(a1 + 400);
  a5.i32[0] = *(_DWORD *)(a1 + 280);
  v9 = *(float *)(a1 + 284);
  v10 = *(float **)(a1 + 272);
  v11 = v10[1];
  v12 = v11 * (float)a2;
  v13 = v11 * (float)a3;
  v14 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v13) + (float)(*(float *)a5.i32 * v12));
  v15 = *(float *)(a1 + 300) + (float)((float)(v13 * *(float *)(a1 + 292)) + (float)(v9 * v12));
  v16 = *(float *)(a1 + 336);
  v17 = *(float *)(a1 + 344);
  v18 = *(float *)(a1 + 304);
  v19 = *(float *)(a1 + 308);
  v20 = *(unsigned int *)(a1 + 324);
  v21 = v8[2];
  v22 = v8[4];
  v23 = v8[5];
  v24 = v8[7];
  v27 = a1 + 144;
  v25 = *(char **)(a1 + 144);
  v26 = *(float16x4_t **)(v27 + 8);
  v28 = *(_QWORD *)(a1 + 384);
  v29 = *(float **)(a1 + 392);
  if (!v29)
    v29 = v10;
  v30 = *(_QWORD *)(a1 + 32);
  v31 = *(_QWORD *)(a1 + 40);
  if (v31)
    v10 = *(float **)(a1 + 40);
  if (v21 != 0.0 || v24 != 0.0 || v9 != 0.0)
  {
    v35 = *(_DWORD *)(a1 + 320);
    v36 = v8[3];
    v37 = v8[8];
    v38 = -v8[6];
    v39 = v19 - v18;
    while (1)
    {
      v40 = v38 + (float)((float)(v14 + v14) * v21);
      v41 = (float)((float)(v15 * v15) + (float)(v14 * v14)) - v24;
      if (v23 == 0.0)
      {
        v48 = v41 / v40;
      }
      else
      {
        v42 = (float)((float)(v23 * -4.0) * v41) + (float)(v40 * v40);
        if (v42 < 0.0)
          goto LABEL_48;
        v43 = sqrtf(v42);
        v44 = v37 * (float)(v40 - v43);
        v45 = v40 + v43;
        v46 = v37 * v45;
        v47 = (float)(v37 * v45) <= v44;
        if ((float)(v37 * v45) <= v44)
          v48 = v37 * v45;
        else
          v48 = v44;
        if (v47)
          v46 = v44;
        if (v46 < 0.0)
        {
          _NF = v46 < v36;
LABEL_29:
          LODWORD(v50) = v35;
          if (_NF)
            goto LABEL_48;
LABEL_30:
          if ((v50 & 0x80000000) == 0)
            goto LABEL_42;
          goto LABEL_48;
        }
        if (v46 <= 1.0)
        {
          v51 = v18 + (float)(v46 * v39);
          goto LABEL_41;
        }
        if ((v20 & 0x80000000) == 0)
        {
          LODWORD(v50) = v20;
          if (v46 <= v22)
          {
LABEL_42:
            v52 = v30 + 12 * (_DWORD)v50;
            v50 = v50;
            if (!v31)
              v50 = 0;
            v53 = LODWORD(v10[v50]);
            if (v31)
              *(float *)v6.i32 = v10[v50];
            else
              *(float *)v6.i32 = 1.0;
            v54 = *(float *)v52 * *(float *)v6.i32;
            goto LABEL_50;
          }
        }
      }
      if (v48 < 0.0)
      {
        _NF = v48 < v36;
        goto LABEL_29;
      }
      if (v48 > 1.0)
      {
        LODWORD(v50) = v20;
        if (v48 > v22)
          goto LABEL_48;
        goto LABEL_30;
      }
      v51 = v18 + (float)(v48 * v39);
LABEL_41:
      LODWORD(v50) = (int)(float)(v17 * (float)(v51 - v16));
      if ((v50 & 0x80000000) == 0)
        goto LABEL_42;
LABEL_48:
      if (!v28)
      {
        v55 = 0;
        goto LABEL_52;
      }
      v6.i32[0] = *(__int32 *)v29;
      v54 = *v29 * *(float *)v28;
      v52 = v28;
      v53 = *(_DWORD *)v29;
LABEL_50:
      *(float32x2_t *)v6.i8 = vmul_n_f32(*(float32x2_t *)(v52 + 4), *(float *)v6.i32);
      v6 = vextq_s8(a5, v6, 0xCuLL);
      *(float *)v6.i32 = v54;
      v6.i32[3] = v53;
      *v26 = vcvt_f16_f32((float32x4_t)v6);
      v55 = -1;
LABEL_52:
      v14 = *(float *)a5.i32 + v14;
      v15 = v9 + v15;
      ++v26;
      *v25++ = v55;
      if (!--a4)
        return;
    }
  }
  v32 = v15 * v15;
  v33 = -v23;
  if (v32 <= (float)-v23)
  {
    v56 = fabsf(v8[8]);
    v57 = v23 * -4.0;
    v58 = v19 - v18;
    v59 = (float *)(v30 + 12 * (int)v20);
    if (v31)
      v60 = v20;
    else
      v60 = 0;
    v61 = v26 + 1;
    v62 = a4 + 2;
    while (1)
    {
      v63 = v32 + (float)(v14 * v14);
      v64 = *(float *)a5.i32 + v14;
      v65 = v32 + (float)(v64 * v64);
      if (v63 > v33 && v65 > v33)
      {
        if ((v20 & 0x80000000) != 0)
        {
          if (!v28)
          {
            v122 = 0;
            v98 = 0;
            goto LABEL_114;
          }
          _S20 = *(_DWORD *)v29;
          _S21 = *v29 * *(float *)v28;
          _S22 = *v29 * *(float *)(v28 + 4);
          _S23 = *v29 * *(float *)(v28 + 8);
        }
        else
        {
          _S20 = LODWORD(v10[v60]);
          if (v31)
            v75 = v10[v60];
          else
            v75 = 1.0;
          _S21 = *v59 * v75;
          _S22 = v75 * v59[1];
          _S23 = v75 * v59[2];
        }
        __asm { FCVT            H21, S21 }
        v61[-1].i16[0] = _H21;
        __asm { FCVT            H22, S22 }
        v61[-1].i16[1] = _H22;
        __asm { FCVT            H23, S23 }
        v61[-1].i16[2] = _H23;
        __asm { FCVT            H20, S20 }
        v61[-1].i16[3] = _H20;
        v61->i16[0] = _H21;
        v61->i16[1] = _H22;
        v61->i16[2] = _H23;
        goto LABEL_112;
      }
      v67 = sqrtf(v57 * v65);
      v68 = v56 * sqrtf(v57 * v63);
      v69 = v56 * v67;
      v70 = (int)(float)(v17 * (float)((float)(v18 + (float)(v68 * v58)) - v16));
      v71 = (int)(float)(v17 * (float)((float)(v18 + (float)((float)(v56 * v67) * v58)) - v16));
      if (v68 <= 1.0 && v69 <= 1.0)
      {
        v79 = (float *)(v30 + 12 * (_DWORD)v70);
        v70 = (int)v70;
        if (!v31)
          v70 = 0;
        _S20 = v10[v70];
        _S23 = *v79;
        _S22 = v79[1];
        _S21 = v79[2];
        if (v31)
        {
          _S23 = _S20 * _S23;
          _S22 = _S20 * _S22;
          v84 = v71;
          _S21 = _S20 * _S21;
        }
        else
        {
          v84 = 0;
        }
        v109 = (float *)(v30 + 12 * (_DWORD)v71);
        _S24 = v10[v84];
        if (v31)
          v111 = v10[v84];
        else
          v111 = 1.0;
        _S25 = *v109 * v111;
        _S26 = v111 * v109[1];
        _S27 = v111 * v109[2];
        __asm { FCVT            H23, S23 }
        v61[-1].i16[0] = _H23;
        __asm { FCVT            H22, S22 }
        v61[-1].i16[1] = _H22;
        __asm { FCVT            H21, S21 }
        v61[-1].i16[2] = _H21;
        __asm { FCVT            H20, S20 }
        v61[-1].i16[3] = _H20;
        __asm { FCVT            H20, S25 }
        v61->i16[0] = _H20;
        __asm { FCVT            H20, S26 }
        v61->i16[1] = _H20;
        __asm { FCVT            H20, S27 }
        v61->i16[2] = _H20;
        __asm { FCVT            H20, S24 }
LABEL_112:
        v98 = -1;
        goto LABEL_113;
      }
      if (v68 <= 1.0)
      {
        if ((v70 & 0x80000000) == 0)
        {
          v73 = 3 * (int)v70;
          if (!v31)
            v70 = 0;
LABEL_86:
          v92 = v10[v70];
          v93 = (_DWORD *)(v30 + 4 * v73);
          v95 = *(float *)v93;
          v94 = (float32x2_t *)(v93 + 1);
          v96 = v95;
          if (v31)
            *(float *)v5.i32 = v92;
          else
            *(float *)v5.i32 = 1.0;
          v97 = v96 * *(float *)v5.i32;
LABEL_92:
          *(float32x2_t *)v5.i8 = vmul_n_f32(*v94, *(float *)v5.i32);
          v5 = vextq_s8(a5, v5, 0xCuLL);
          *(float *)v5.i32 = v97;
          *(float *)&v5.i32[3] = v92;
          v61[-1] = vcvt_f16_f32((float32x4_t)v5);
          v98 = -1;
          goto LABEL_93;
        }
      }
      else if (v68 <= v22)
      {
        v70 = v60;
        v73 = 3 * (int)v20;
        if ((v20 & 0x80000000) == 0)
          goto LABEL_86;
      }
      if (v28)
      {
        v5.i32[0] = *(__int32 *)v29;
        v97 = *v29 * *(float *)v28;
        v94 = (float32x2_t *)(v28 + 4);
        v92 = *v29;
        goto LABEL_92;
      }
      v98 = 0;
LABEL_93:
      if (v69 <= 1.0)
      {
        if ((v71 & 0x80000000) != 0)
          goto LABEL_104;
        v99 = 3 * (int)v71;
        if (!v31)
          v71 = 0;
      }
      else if (v69 > v22 || (v71 = v60, v99 = 3 * (int)v20, (v20 & 0x80000000) != 0))
      {
LABEL_104:
        if (!v28)
        {
          v122 = 0;
          goto LABEL_114;
        }
        _S20 = *(_DWORD *)v29;
        _S21 = *v29 * *(float *)v28;
        _S22 = *v29 * *(float *)(v28 + 4);
        _S23 = *v29 * *(float *)(v28 + 8);
        goto LABEL_106;
      }
      v100 = (float *)(v30 + 4 * v99);
      _S20 = LODWORD(v10[v71]);
      if (v31)
        v102 = v10[v71];
      else
        v102 = 1.0;
      _S21 = *v100 * v102;
      _S22 = v102 * v100[1];
      _S23 = v102 * v100[2];
LABEL_106:
      __asm { FCVT            H21, S21 }
      v61->i16[0] = _H21;
      __asm { FCVT            H21, S22 }
      v61->i16[1] = _H21;
      __asm { FCVT            H21, S23 }
      v61->i16[2] = _H21;
      __asm { FCVT            H20, S20 }
LABEL_113:
      v61->i16[3] = _H20;
      v122 = -1;
LABEL_114:
      v14 = *(float *)a5.i32 + v64;
      *v25 = v98;
      v25[1] = v122;
      v25 += 2;
      v61 += 2;
      v62 -= 2;
      if (v62 <= 2)
        return;
    }
  }
  if (v28 || (v20 & 0x80000000) == 0)
  {
    if ((v20 & 0x80000000) != 0)
    {
      _S3 = *(_DWORD *)v29;
      _S0 = *v29 * *(float *)v28;
      _D2 = vmul_n_f32(*(float32x2_t *)(v28 + 4), *v29);
    }
    else
    {
      v123 = v30 + 12 * (_DWORD)v20;
      if (!v31)
        v20 = 0;
      _S3 = LODWORD(v10[v20]);
      if (v31)
        v125 = v10[v20];
      else
        v125 = 1.0;
      _D2 = vmul_n_f32(*(float32x2_t *)(v123 + 4), v125);
      _S0 = *(float *)v123 * v125;
    }
    __asm
    {
      FCVT            H0, S0
      FCVT            H1, S2
    }
    _S2 = _D2.i32[1];
    __asm
    {
      FCVT            H2, S2
      FCVT            H3, S3
    }
    v133 = a4 + 4;
    do
    {
      v26->i16[0] = _H0;
      v26->i16[1] = _H1;
      v26->i16[2] = _H2;
      v26->i16[3] = _H3;
      v26[1].i16[0] = _H0;
      v26[1].i16[1] = _H1;
      v26[1].i16[2] = _H2;
      v26[1].i16[3] = _H3;
      v26[2].i16[0] = _H0;
      v26[2].i16[1] = _H1;
      v26[2].i16[2] = _H2;
      v26[2].i16[3] = _H3;
      v26[3].i16[0] = _H0;
      v26[3].i16[1] = _H1;
      v26[3].i16[2] = _H2;
      v133 -= 4;
      v26[3].i16[3] = _H3;
      v26 += 4;
      *(_DWORD *)v25 = -1;
      v25 += 4;
    }
    while (v133 > 4);
  }
  else
  {
    if (a4 >= 4)
      v34 = 4;
    else
      v34 = a4;
    bzero(v25, ((a4 - v34 + 3) & 0xFFFFFFFC) + 4);
  }
}

void RGBAf16_shade_conic_RGB(float32x2_t *a1, uint64_t a2, uint64_t a3, int a4, double a5, __n128 a6)
{
  float32x2_t v7;
  float v8;
  float v9;
  float v10;
  _WORD *v11;
  _BYTE *v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  uint64_t v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  __n128 v42;

  v7 = a1[35];
  a6.n128_u64[0] = (unint64_t)vadd_f32(a1[37], vmla_n_f32(vmul_n_f32(a1[36], *(float *)(*(_QWORD *)&a1[34] + 4) * (float)a3), v7, *(float *)(*(_QWORD *)&a1[34] + 4) * (float)a2));
  v8 = a1[42].f32[0];
  v9 = a1[43].f32[0];
  v10 = a1[38].f32[0];
  v12 = (_BYTE *)a1[18];
  v11 = (_WORD *)a1[19];
  v13 = a1[4];
  v14 = a1[5];
  if (v14)
    v15 = a1[5];
  else
    v15 = a1[34];
  v16 = a1[38].f32[1] - v10;
  do
  {
    v42 = a6;
    v17 = v9
        * (float)((float)(v10 + (float)((float)((float)(atan2f(a6.n128_f32[1], a6.n128_f32[0]) * 0.15915) + 0.5) * v16))
                - v8);
    v18 = ceilf(v17);
    LODWORD(v19) = vcvtms_s32_f32(v17);
    v20 = vcvtms_s32_f32(v9 + v17);
    if (v17 < 0.0)
      LODWORD(v19) = v20;
    v21 = ceilf(v17 - v9);
    if (v17 > v9)
      v18 = v21;
    LODWORD(v22) = (int)v18;
    v23 = (float *)(*(_QWORD *)&v13 + 12 * (_DWORD)v19);
    v19 = (int)v19;
    if (!*(_QWORD *)&v14)
      v19 = 0;
    v24 = *(float *)(*(_QWORD *)&v15 + 4 * v19);
    v26 = *v23;
    v25 = v23[1];
    v27 = v23[2];
    v28 = (float *)(*(_QWORD *)&v13 + 12 * (_DWORD)v22);
    v22 = (int)v22;
    if (!*(_QWORD *)&v14)
      v22 = 0;
    v29 = *(float *)(*(_QWORD *)&v15 + 4 * v22);
    v31 = *v28;
    v30 = v28[1];
    v32 = v28[2];
    if (v14)
    {
      v26 = v24 * v26;
      v25 = v24 * v25;
      v27 = v24 * v27;
      v31 = v29 * v31;
      v30 = v29 * v30;
      v32 = v29 * v32;
    }
    a6.n128_u64[1] = v42.n128_u64[1];
    v33 = v17 - (float)(int)floorf(v17);
    _S4 = v24 + (float)(v33 * (float)(v29 - v24));
    _S3 = v26 + (float)(v33 * (float)(v31 - v26));
    _S2 = v25 + (float)(v33 * (float)(v30 - v25));
    _S0 = v27 + (float)(v33 * (float)(v32 - v27));
    __asm { FCVT            H3, S3 }
    *v11 = LOWORD(_S3);
    __asm { FCVT            H2, S2 }
    v11[1] = LOWORD(_S2);
    __asm { FCVT            H0, S0 }
    v11[2] = LOWORD(_S0);
    __asm { FCVT            H0, S4 }
    v11[3] = LOWORD(_S0);
    a6.n128_u64[0] = (unint64_t)vadd_f32(v7, (float32x2_t)v42.n128_u64[0]);
    *v12++ = -1;
    v11 += 4;
    --a4;
  }
  while (a4);
}

uint64_t RGBAf16_shade_custom_RGB(uint64_t result, uint64_t a2, uint64_t a3, int a4, int8x16_t a5, int32x4_t a6)
{
  float32x4_t v6;
  uint64_t v7;
  float32x4_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float16x4_t *v13;
  char *v14;
  float *v15;
  __int32 *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  float32x4_t v21;
  float v22;
  uint64_t v23;
  __int32 v24;
  int v25;
  float v26;
  uint64_t v27;
  char v28;

  v7 = *(_QWORD *)(result + 272);
  a5.i64[0] = *(_QWORD *)(result + 280);
  *(float32x2_t *)a6.i8 = vadd_f32(*(float32x2_t *)(result + 296), vmla_n_f32(vmul_n_f32(*(float32x2_t *)(result + 288), *(float *)(v7 + 4) * (float)a3), *(float32x2_t *)a5.i8, *(float *)(v7 + 4) * (float)a2));
  v8 = *(float32x4_t *)(result + 304);
  v9 = *(float *)(result + 336);
  v10 = *(float *)(result + 348);
  v11 = *(float *)(result + 344);
  v12 = *(float *)(result + 356);
  v14 = *(char **)(result + 144);
  v13 = *(float16x4_t **)(result + 152);
  v15 = *(float **)(result + 384);
  v16 = *(__int32 **)(result + 392);
  if (!v16)
    v16 = *(__int32 **)(result + 272);
  v17 = *(_QWORD *)(result + 32);
  v18 = *(_QWORD *)(result + 40);
  if (v18)
    v19 = *(_DWORD *)(result + 48);
  else
    v19 = 0;
  if (v18)
    v7 = *(_QWORD *)(result + 40);
  v20 = 3 * *(_DWORD *)(result + 48);
  do
  {
    v21 = (float32x4_t)vzip1q_s32(a6, a6);
    if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vtrn2_s16(vrev32_s16(vmovn_s32(vcgtq_f32(v8, v21))), vmovn_s32(vcgtq_f32(v21, v8))), 0xFuLL))) & 1) == 0)
    {
      v25 = (int)(float)(v12 * (float)(*(float *)&a6.i32[1] - v10));
      v26 = v11 * (float)(*(float *)a6.i32 - v9);
      v23 = v17 + 4 * v20 * v25 + 12 * (int)v26;
      result = v7 + 4 * v19 * v25;
      v27 = (int)v26;
      if (!v18)
        v27 = 0;
      v24 = *(_DWORD *)(result + 4 * v27);
      if (v18)
        v6.i32[0] = *(_DWORD *)(result + 4 * v27);
      else
        v6.f32[0] = 1.0;
      v22 = *(float *)v23 * v6.f32[0];
      goto LABEL_18;
    }
    if (v15)
    {
      v6.i32[0] = *v16;
      v22 = *(float *)v16 * *v15;
      v23 = (uint64_t)v15;
      v24 = *v16;
LABEL_18:
      *(float32x2_t *)v6.f32 = vmul_n_f32(*(float32x2_t *)(v23 + 4), v6.f32[0]);
      v6 = (float32x4_t)vextq_s8(a5, (int8x16_t)v6, 0xCuLL);
      v6.f32[0] = v22;
      v6.i32[3] = v24;
      *v13 = vcvt_f16_f32(v6);
      v28 = -1;
      goto LABEL_20;
    }
    v28 = 0;
LABEL_20:
    *(float32x2_t *)a6.i8 = vadd_f32(*(float32x2_t *)a5.i8, *(float32x2_t *)a6.i8);
    ++v13;
    *v14++ = v28;
    --a4;
  }
  while (a4);
  return result;
}

void RGBAf16_shade_axial_RGB(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v5;
  float *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  int v22;
  _WORD *i;
  uint64_t v24;
  float *v25;
  float v27;
  char v47;
  float v49;
  int v56;

  v5 = *(float *)(a1 + 280);
  v6 = *(float **)(a1 + 272);
  v7 = *(float *)(a1 + 296)
     + (float)((float)(*(float *)(a1 + 288) * (float)(v6[1] * (float)a3)) + (float)(v5 * (float)(v6[1] * (float)a2)));
  v8 = *(float *)(a1 + 336);
  v9 = *(float *)(a1 + 344);
  v10 = *(float *)(a1 + 304);
  v11 = *(float *)(a1 + 308);
  LODWORD(v12) = *(_DWORD *)(a1 + 320);
  v13 = *(_DWORD *)(a1 + 324);
  v16 = a1 + 144;
  v14 = *(_DWORD **)(a1 + 144);
  v15 = *(_WORD **)(v16 + 8);
  v17 = *(_QWORD *)(a1 + 384);
  if (*(_QWORD *)(a1 + 392))
    v18 = *(float **)(a1 + 392);
  else
    v18 = v6;
  v20 = *(_QWORD *)(a1 + 32);
  v19 = *(_QWORD *)(a1 + 40);
  if (v19)
    v21 = *(float **)(a1 + 40);
  else
    v21 = v6;
  if (v5 != 0.0)
  {
    for (i = v15 + 2; ; i += 4)
    {
      LODWORD(v24) = v12;
      if (v7 >= v10)
      {
        LODWORD(v24) = v13;
        if (v7 <= v11)
          LODWORD(v24) = (int)(float)(v9 * (float)(v7 - v8));
      }
      if ((v24 & 0x80000000) != 0)
      {
        if (!v17)
        {
          v47 = 0;
          goto LABEL_31;
        }
        _S7 = *v18;
        __asm { FCVT            H7, S7 }
        _S16 = *(float *)v17;
        _S17 = *(_DWORD *)(v17 + 4);
        __asm
        {
          FCVT            H16, S16
          FCVT            H17, S17
        }
        _S18 = *(_DWORD *)(v17 + 8);
        __asm
        {
          FCVT            H18, S18
          FCVT            S16, H16
          FCVT            S19, H7
        }
        _S16 = _S19 * _S16;
        __asm
        {
          FCVT            H16, S16
          FCVT            S17, H17
        }
        _S17 = _S19 * _S17;
        __asm
        {
          FCVT            H17, S17
          FCVT            S18, H18
        }
        _S18 = _S19 * _S18;
        *(i - 2) = LOWORD(_S16);
        __asm { FCVT            H16, S18 }
        *(i - 1) = LOWORD(_S17);
        *i = LOWORD(_S16);
      }
      else
      {
        v25 = (float *)(v20 + 12 * (_DWORD)v24);
        v24 = v24;
        if (!v19)
          v24 = 0;
        _S7 = v21[v24];
        if (v19)
          v27 = v21[v24];
        else
          v27 = 1.0;
        _S16 = *v25 * v27;
        _S17 = v27 * v25[1];
        _S18 = v27 * v25[2];
        __asm { FCVT            H16, S16 }
        *(i - 2) = LOWORD(_S16);
        __asm { FCVT            H16, S17 }
        *(i - 1) = LOWORD(_S16);
        __asm { FCVT            H16, S18 }
        *i = LOWORD(_S16);
        __asm { FCVT            H7, S7 }
      }
      i[1] = _H7;
      v47 = -1;
LABEL_31:
      v7 = v5 + v7;
      *(_BYTE *)v14 = v47;
      v14 = (_DWORD *)((char *)v14 + 1);
      if (!--a4)
        return;
    }
  }
  if (v7 >= v10)
  {
    LODWORD(v12) = v13;
    if (v7 <= v11)
      LODWORD(v12) = (int)(float)(v9 * (float)(v7 - v8));
  }
  if ((v12 & 0x80000000) == 0 || v17)
  {
    if ((v12 & 0x80000000) != 0)
    {
      v49 = *v18;
      _S1 = *v18 * *(float *)v17;
      _S3 = *v18;
    }
    else
    {
      v17 = v20 + 12 * (_DWORD)v12;
      v12 = v12;
      if (!v19)
        v12 = 0;
      _S3 = v21[v12];
      v49 = 1.0;
      if (v19)
        v49 = v21[v12];
      _S1 = *(float *)v17 * v49;
    }
    _D2 = vmul_n_f32(*(float32x2_t *)(v17 + 4), v49);
    __asm
    {
      FCVT            H0, S1
      FCVT            H1, S2
    }
    _D2.i32[0] = _D2.i32[1];
    __asm
    {
      FCVT            H2, S2
      FCVT            H3, S3
    }
    v56 = a4 + 4;
    do
    {
      *v15 = _H0;
      v15[1] = _H1;
      v15[2] = _H2;
      v15[3] = _H3;
      v15[4] = _H0;
      v15[5] = _H1;
      v15[6] = _H2;
      v15[7] = _H3;
      v15[8] = _H0;
      v15[9] = _H1;
      v15[10] = _H2;
      v15[11] = _H3;
      v15[12] = _H0;
      v15[13] = _H1;
      v15[14] = _H2;
      v56 -= 4;
      v15[15] = _H3;
      v15 += 16;
      *v14++ = -1;
    }
    while (v56 > 4);
  }
  else
  {
    if (a4 >= 4)
      v22 = 4;
    else
      v22 = a4;
    bzero(v14, ((a4 - v22 + 3) & 0xFFFFFFFC) + 4);
  }
}

uint64_t RGBAf16_sample_Wf16(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __int16 *v46;
  __int16 *v47;
  unint64_t v48;
  __int16 *v49;
  __int16 *v50;
  unsigned int v58;
  int v59;
  int v60;
  __int16 *v61;
  unint64_t v64;
  __int16 *v65;
  __int16 *v68;
  uint64_t v74;
  __int16 *v75;
  unint64_t v76;
  unint64_t v78;
  __int16 *v79;
  __int16 *v81;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  __int16 *v89;
  __int16 *v93;
  float *v95;
  __int16 *v96;
  __int16 *v98;
  float v100;
  _WORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  __int16 *v108;
  __int16 *v109;
  __int16 *v110;
  __int16 *v111;
  unsigned int v114;
  unsigned int *v116;
  unsigned int v117;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;

  v5 = *(_QWORD *)(result + 32);
  v6 = *(_QWORD *)(result + 40);
  v7 = *(_DWORD *)(result + 24);
  v8 = *(_DWORD *)(result + 28);
  v9 = *(_QWORD *)(result + 176);
  v10 = *(_QWORD *)(result + 72);
  v124 = *(_QWORD *)(result + 80);
  v122 = *(_QWORD *)(result + 88);
  v12 = *(_QWORD *)(result + 112);
  v11 = *(_QWORD *)(result + 120);
  v121 = *(_DWORD *)(result + 188);
  v13 = (_WORD *)(*(_QWORD *)(result + 152) - 8);
  v14 = *(_QWORD *)(result + 144) - 1;
  v15 = *(_DWORD *)(result + 260) - 1;
  v16 = *(unsigned int *)(result + 256);
  v17 = v6 + (v15 * v8) + 2 * (v16 - 1);
  v18 = v5 + (v15 * v7) + 2 * v16 - 2;
  v119 = *(_DWORD *)(result + 240);
  v120 = a4;
  v123 = *(_QWORD *)(result + 64);
  while (1)
  {
    if (a3 >= v10)
    {
      if (a3 <= v122)
      {
        v28 = ((unint64_t)a3 >> 22) & 0x3C0;
        v29 = 0x3FFFFFFF;
        v30 = a3;
        v22 = v123;
        v31 = v124;
      }
      else
      {
        v24 = *(_QWORD *)(result + 216);
        v25 = *(_QWORD *)(result + 224) + v122;
        v26 = v25 - a3 + (v24 >> 1);
        v22 = v123;
        if (v26 < 1)
          goto LABEL_39;
        if (v26 >= v24)
          LODWORD(v27) = 0x3FFFFFFF;
        else
          v27 = (unint64_t)(*(_QWORD *)(result + 232) * v26) >> 32;
        v31 = v124;
        v29 = v27 | v121;
        v30 = v25 - 0x1000000;
        v28 = 448;
      }
    }
    else
    {
      v19 = *(_QWORD *)(result + 216);
      v20 = v10 - *(_QWORD *)(result + 224);
      v21 = a3 - v20 + (v19 >> 1);
      v22 = v123;
      if (v21 < 1)
        goto LABEL_39;
      if (v21 >= v19)
        LODWORD(v23) = 0x3FFFFFFF;
      else
        v23 = (unint64_t)(*(_QWORD *)(result + 232) * v21) >> 32;
      v31 = v124;
      v29 = v23 | v121;
      v30 = v20 + 0x1000000;
      v28 = 512;
    }
    if (a2 >= v22)
      break;
    v32 = *(_QWORD *)(result + 192);
    v33 = v22 - *(_QWORD *)(result + 200);
    v34 = a2 - v33 + (v32 >> 1);
    if (v34 >= 1)
    {
      if (v34 < v32)
        v29 = ((v29 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v34) >> 32) >> 15)) | v121;
      v35 = v33 + 0x1000000;
      v36 = 32;
      goto LABEL_26;
    }
LABEL_39:
    --a4;
    a2 += v12;
    a3 += v11;
    v13 += 4;
    *(_BYTE *)++v14 = 0;
LABEL_40:
    if (!a4)
      return result;
  }
  if (a2 <= v31)
  {
    v36 = ((unint64_t)a2 >> 26) & 0x3C;
    v35 = a2;
    goto LABEL_26;
  }
  v37 = v31;
  v38 = *(_QWORD *)(result + 192);
  v39 = *(_QWORD *)(result + 200) + v37;
  v40 = v39 - a2 + (v38 >> 1);
  if (v40 < 1)
    goto LABEL_39;
  if (v40 < v38)
    v29 = ((v29 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v40) >> 32) >> 15)) | v121;
  v35 = v39 - 0x1000000;
  v36 = 28;
LABEL_26:
  if (v29 < 0x400000)
    goto LABEL_39;
  v41 = v30 >> 32;
  v42 = v5 + (int)v41 * (uint64_t)v7;
  v43 = v35 >> 31;
  v44 = v43 & 0xFFFFFFFFFFFFFFFELL;
  v45 = v42 + (v43 & 0xFFFFFFFFFFFFFFFELL);
  v46 = *(__int16 **)(result + 32);
  if (v18 >= v45)
    v47 = (__int16 *)(v42 + (v43 & 0xFFFFFFFFFFFFFFFELL));
  else
    v47 = (__int16 *)v18;
  if (v47 < v46)
    v47 = *(__int16 **)(result + 32);
  if (v6)
  {
    v48 = v6 + (int)v41 * (uint64_t)v8 + v44;
    v49 = *(__int16 **)(result + 40);
    if (v17 >= v48)
      v50 = (__int16 *)v48;
    else
      v50 = (__int16 *)v17;
    if (v50 >= v49)
      v49 = v50;
    _H2 = *v49;
    __asm { FCVT            S2, H2 }
  }
  else
  {
    v48 = 0;
    _S2 = 1.0;
  }
  _H3 = *v47;
  __asm { FCVT            S3, H3 }
  if (v9)
  {
    v58 = *(_DWORD *)(v9 + (v36 | v28));
LABEL_45:
    v59 = v58 & 0xF;
    v60 = HIBYTE(v58) & 3;
    if (v59 == 1)
    {
      v89 = (__int16 *)(v45 + SBYTE1(v58) * (uint64_t)v7);
      if (v18 < (unint64_t)v89)
        v89 = (__int16 *)v18;
      if (v89 < v46)
        v89 = v46;
      _H4 = *v89;
      __asm { FCVT            S4, H4 }
      _S5 = 1.0;
      if (v6)
      {
        v93 = (__int16 *)(v48 + SBYTE1(v58) * (uint64_t)v8);
        if (v17 < (unint64_t)v93)
          v93 = (__int16 *)v17;
        if ((unint64_t)v93 < *(_QWORD *)(result + 40))
          v93 = *(__int16 **)(result + 40);
        _H5 = *v93;
        __asm { FCVT            S5, H5 }
      }
      v95 = &interpolate_waf[2 * v60];
    }
    else
    {
      if (v59 != 2)
      {
        if (v59 == 3)
        {
          v61 = (__int16 *)(v45 + 2 * SBYTE2(v58));
          if (v18 < (unint64_t)v61)
            v61 = (__int16 *)v18;
          if (v61 < v46)
            v61 = v46;
          _H4 = *v61;
          __asm { FCVT            S4, H4 }
          v64 = v45 + SBYTE1(v58) * (uint64_t)v7;
          if (v18 >= v64)
            v65 = (__int16 *)(v45 + SBYTE1(v58) * (uint64_t)v7);
          else
            v65 = (__int16 *)v18;
          if (v65 < v46)
            v65 = v46;
          _H5 = *v65;
          __asm { FCVT            S5, H5 }
          v68 = (__int16 *)(v64 + 2 * SBYTE2(v58));
          if (v18 < (unint64_t)v68)
            v68 = (__int16 *)v18;
          if (v68 < v46)
            v68 = v46;
          _H6 = *v68;
          __asm { FCVT            S6, H6 }
          _S7 = 1.0;
          _S16 = 1.0;
          _S17 = 1.0;
          if (v6)
          {
            v74 = 2 * SBYTE2(v58);
            v75 = (__int16 *)(v48 + v74);
            v76 = *(_QWORD *)(result + 40);
            if (v17 < v48 + v74)
              v75 = (__int16 *)v17;
            if ((unint64_t)v75 < v76)
              v75 = *(__int16 **)(result + 40);
            _H7 = *v75;
            __asm { FCVT            S7, H7 }
            v78 = v48 + SBYTE1(v58) * (uint64_t)v8;
            if (v17 >= v78)
              v79 = (__int16 *)(v48 + SBYTE1(v58) * (uint64_t)v8);
            else
              v79 = (__int16 *)v17;
            if ((unint64_t)v79 < v76)
              v79 = *(__int16 **)(result + 40);
            _H16 = *v79;
            __asm { FCVT            S16, H16 }
            v81 = (__int16 *)(v78 + v74);
            if (v17 < (unint64_t)v81)
              v81 = (__int16 *)v17;
            if ((unint64_t)v81 < v76)
              v81 = *(__int16 **)(result + 40);
            _H17 = *v81;
            __asm { FCVT            S17, H17 }
          }
          v83 = interpolate_waf[2 * v60 + 1];
          v84 = interpolate_waf[2 * ((v58 >> 28) & 3) + 1];
          v85 = (float)(_S3 - (float)(_S3 * v84)) + (float)(_S4 * v84);
          v86 = (float)(_S5 - (float)(_S5 * v84)) + (float)(_S6 * v84);
          v87 = (float)(_S2 - (float)(_S2 * v84)) + (float)(_S7 * v84);
          if (v87 > 1.0)
            v87 = 1.0;
          if (v87 < 0.0)
            v87 = 0.0;
          v88 = (float)(_S16 - (float)(_S16 * v84)) + (float)(_S17 * v84);
          if (v88 > 1.0)
            v88 = 1.0;
          if (v88 < 0.0)
            v88 = 0.0;
          _S3 = (float)(v85 - (float)(v85 * v83)) + (float)(v86 * v83);
          _S2 = (float)(v87 - (float)(v87 * v83)) + (float)(v88 * v83);
          if (_S2 > 1.0)
            _S2 = 1.0;
          if (_S2 < 0.0)
            _S2 = 0.0;
        }
        goto LABEL_112;
      }
      v96 = (__int16 *)(v45 + 2 * SBYTE2(v58));
      if (v18 < (unint64_t)v96)
        v96 = (__int16 *)v18;
      if (v96 < v46)
        v96 = v46;
      _H4 = *v96;
      __asm { FCVT            S4, H4 }
      _S5 = 1.0;
      if (v6)
      {
        v98 = (__int16 *)(v48 + 2 * SBYTE2(v58));
        if (v17 < (unint64_t)v98)
          v98 = (__int16 *)v17;
        if ((unint64_t)v98 < *(_QWORD *)(result + 40))
          v98 = *(__int16 **)(result + 40);
        _H5 = *v98;
        __asm { FCVT            S5, H5 }
      }
      v95 = &interpolate_waf[2 * ((v58 >> 28) & 3)];
    }
    v100 = v95[1];
    _S3 = (float)(_S3 - (float)(_S3 * v100)) + (float)(_S4 * v100);
    _S2 = (float)(_S2 - (float)(_S2 * v100)) + (float)(_S5 * v100);
  }
LABEL_112:
  __asm { FCVT            H3, S3 }
  v13[6] = _H3;
  v13[5] = _H3;
  v13[4] = _H3;
  __asm { FCVT            H2, S2 }
  v13[7] = _H2;
  *(_BYTE *)++v14 = v29 >> 22;
  if (--a4)
  {
    v103 = v13 + 11;
    a2 += v12;
    v104 = v124 - a2;
    a3 += v11;
    v105 = v122 - a3;
    while (1)
    {
      v13 = v103 - 7;
      if (((a2 - v123) | v104 | (a3 - v10) | v105) < 0)
        goto LABEL_40;
      v106 = v5 + SHIDWORD(a3) * (uint64_t)v7;
      v107 = (a2 >> 31) & 0xFFFFFFFFFFFFFFFELL;
      v45 = v106 + v107;
      v46 = *(__int16 **)(result + 32);
      if (v18 >= v106 + v107)
        v108 = (__int16 *)(v106 + v107);
      else
        v108 = (__int16 *)v18;
      if (v108 >= v46)
        v109 = v108;
      else
        v109 = *(__int16 **)(result + 32);
      if (v6)
      {
        v48 = v6 + SHIDWORD(a3) * (uint64_t)v8 + v107;
        v110 = *(__int16 **)(result + 40);
        if (v17 >= v48)
          v111 = (__int16 *)(v6 + SHIDWORD(a3) * (uint64_t)v8 + v107);
        else
          v111 = (__int16 *)v17;
        if (v111 >= v110)
          v110 = v111;
        _H2 = *v110;
        __asm { FCVT            S2, H2 }
      }
      else
      {
        _S2 = 1.0;
      }
      _H3 = *v109;
      if (v9)
      {
        v58 = *(_DWORD *)(v9 + (((unint64_t)a3 >> 22) & 0x3C0 | ((unint64_t)a2 >> 26) & 0x3C));
        v114 = v58 & 0xF;
        if ((v58 & 0xF) != 0)
        {
          __asm { FCVT            S3, H3 }
          v116 = *(unsigned int **)(result + 264);
          v117 = *v116;
          if (a4 != 1 && a4 + 1 != v120 && v119 != 1 && v117 == 3 && v114 < 3)
            v58 |= 3u;
          v29 = -1;
          if (v117 < v114)
            *v116 = v114;
          goto LABEL_45;
        }
      }
      *(v103 - 1) = _H3;
      *(v103 - 2) = _H3;
      *(v103 - 3) = _H3;
      __asm { FCVT            H2, S2 }
      *v103 = _H2;
      *(_BYTE *)++v14 = -1;
      v103 += 4;
      a2 += v12;
      v104 -= v12;
      a3 += v11;
      v105 -= v11;
      if (!--a4)
        return result;
    }
  }
  return result;
}

uint64_t RGBAf16_sample_RGBf16(uint64_t result, uint64_t a2, unint64_t a3, int a4, double a5, double a6, double a7, double a8, float16x4_t a9, double a10, double _D6, float16x4_t a12)
{
  float16x4_t v14;
  float16x4_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v55;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v61;
  unint64_t v62;
  unint64_t v64;
  float32x4_t v71;
  float v74;
  float v77;
  float v78;
  float32x2_t v79;
  unint64_t v82;
  _WORD *v84;
  float32x4_t v85;
  _WORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unsigned int v94;
  unsigned int *v95;
  unsigned int v96;
  int v98;
  int v99;

  v17 = *(_QWORD *)(result + 32);
  v18 = *(_DWORD *)(result + 24);
  v19 = *(_QWORD *)(result + 176);
  v20 = *(_QWORD *)(result + 64);
  v21 = *(_QWORD *)(result + 72);
  v22 = *(_QWORD *)(result + 80);
  v23 = *(_QWORD *)(result + 88);
  v24 = *(_QWORD *)(result + 112);
  v25 = *(_QWORD *)(result + 120);
  v26 = *(_DWORD *)(result + 188);
  v27 = *(_QWORD *)(result + 152) - 8;
  v28 = *(_QWORD *)(result + 144) - 1;
  v98 = *(_DWORD *)(result + 240);
  v29 = v17
      + ((*(_DWORD *)(result + 260) - 1) * v18)
      + 2 * (3 * *(_DWORD *)(result + 256))
      - 6;
  v99 = a4;
  while (1)
  {
    if ((uint64_t)a3 >= v21)
    {
      if ((uint64_t)a3 <= v23)
      {
        v38 = (a3 >> 22) & 0x3C0;
        v39 = 0x3FFFFFFF;
        HIDWORD(v40) = HIDWORD(a3);
      }
      else
      {
        v34 = *(_QWORD *)(result + 216);
        v35 = *(_QWORD *)(result + 224) + v23;
        v36 = v35 - a3 + (v34 >> 1);
        if (v36 < 1)
          goto LABEL_34;
        if (v36 >= v34)
          LODWORD(v37) = 0x3FFFFFFF;
        else
          v37 = (unint64_t)(*(_QWORD *)(result + 232) * v36) >> 32;
        v39 = v37 | v26;
        v40 = v35 - 0x1000000;
        v38 = 448;
      }
    }
    else
    {
      v30 = *(_QWORD *)(result + 216);
      v31 = v21 - *(_QWORD *)(result + 224);
      v32 = a3 - v31 + (v30 >> 1);
      if (v32 < 1)
        goto LABEL_34;
      if (v32 >= v30)
        LODWORD(v33) = 0x3FFFFFFF;
      else
        v33 = (unint64_t)(*(_QWORD *)(result + 232) * v32) >> 32;
      v39 = v33 | v26;
      v40 = v31 + 0x1000000;
      v38 = 512;
    }
    if (a2 >= v20)
      break;
    v41 = *(_QWORD *)(result + 192);
    v42 = v20 - *(_QWORD *)(result + 200);
    v43 = a2 - v42 + (v41 >> 1);
    if (v43 >= 1)
    {
      if (v43 < v41)
        v39 = ((v39 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v43) >> 32) >> 15)) | v26;
      v44 = v42 + 0x1000000;
      v45 = 32;
      goto LABEL_26;
    }
LABEL_34:
    --a4;
    a2 += v24;
    a3 += v25;
    v27 += 8;
    *(_BYTE *)++v28 = 0;
LABEL_35:
    if (!a4)
      return result;
  }
  if (a2 <= v22)
  {
    v45 = ((unint64_t)a2 >> 26) & 0x3C;
    v44 = a2;
    goto LABEL_26;
  }
  v46 = *(_QWORD *)(result + 192);
  v47 = *(_QWORD *)(result + 200) + v22;
  v48 = v47 - a2 + (v46 >> 1);
  if (v48 < 1)
    goto LABEL_34;
  if (v48 < v46)
    v39 = ((v39 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v48) >> 32) >> 15)) | v26;
  v44 = v47 - 0x1000000;
  v45 = 28;
LABEL_26:
  if (v39 < 0x400000)
    goto LABEL_34;
  v49 = v44 >> 32;
  v50 = v17 + SHIDWORD(v40) * (uint64_t)v18;
  v51 = v50 + 6 * (int)v49;
  v52 = *(_QWORD *)(result + 32);
  if (v29 >= v51)
    v53 = v50 + 6 * (int)v49;
  else
    v53 = v29;
  if (v53 < v52)
    v53 = *(_QWORD *)(result + 32);
  a9.i32[0] = *(_DWORD *)v53;
  _H3 = *(_WORD *)(v53 + 4);
  if (!v19)
    goto LABEL_37;
  v55 = *(_DWORD *)(v19 + (v45 | v38));
LABEL_38:
  v57 = v55 & 0xF;
  v58 = HIBYTE(v55) & 3;
  if (v57 == 1)
  {
    v82 = v51 + SBYTE1(v55) * (uint64_t)v18;
    if (v29 < v82)
      v82 = v29;
    if (v82 < v52)
      v82 = v52;
    _H5 = *(_WORD *)(v82 + 4);
    v84 = &interpolate_rgbaf16[4 * v58];
    goto LABEL_73;
  }
  if (v57 == 2)
  {
    v82 = v51 + 6 * SBYTE2(v55);
    if (v29 < v82)
      v82 = v29;
    if (v82 < v52)
      v82 = v52;
    _H5 = *(_WORD *)(v82 + 4);
    v84 = &interpolate_rgbaf16[4 * ((v55 >> 28) & 3)];
LABEL_73:
    LOWORD(_D6) = v84[3];
    __asm { FCVT            S6, H6 }
    v85 = vcvtq_f32_f16(a9);
    a12.i32[0] = *(_DWORD *)v82;
    a12 = (float16x4_t)vcvtq_f32_f16(a12).u64[0];
    *(float32x2_t *)v85.f32 = vmla_n_f32(vmls_lane_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32, *(float32x2_t *)&_D6, 0), (float32x2_t)a12, *(float *)&_D6);
    a9 = vcvt_f16_f32(v85);
    __asm
    {
      FCVT            S3, H3
      FCVT            S5, H5
    }
    _S3 = (float)(_S3 - (float)(_S3 * *(float *)&_D6)) + (float)(_S5 * *(float *)&_D6);
    __asm { FCVT            H3, S3 }
    _S5 = (float)(1.0 - *(float *)&_D6) + *(float *)&_D6;
    goto LABEL_74;
  }
  if (v57 != 3)
  {
LABEL_37:
    _H5 = 15360;
    goto LABEL_75;
  }
  v59 = v51 + 6 * SBYTE2(v55);
  if (v29 < v59)
    v59 = v29;
  if (v59 < v52)
    v59 = v52;
  _H5 = *(_WORD *)(v59 + 4);
  v61 = v51 + SBYTE1(v55) * (uint64_t)v18;
  if (v29 >= v61)
    v62 = v51 + SBYTE1(v55) * (uint64_t)v18;
  else
    v62 = v29;
  if (v62 < v52)
    v62 = v52;
  _H6 = *(_WORD *)(v62 + 4);
  v64 = v61 + 6 * SBYTE2(v55);
  if (v29 < v64)
    v64 = v29;
  if (v64 < v52)
    v64 = v52;
  _H7 = *(_WORD *)(v64 + 4);
  _H16 = interpolate_rgbaf16[4 * v58 + 3];
  __asm { FCVT            S16, H16 }
  _H17 = interpolate_rgbaf16[4 * ((v55 >> 28) & 3) + 3];
  __asm { FCVT            S17, H17 }
  v71 = vcvtq_f32_f16(a9);
  __asm
  {
    FCVT            S3, H3
    FCVT            S5, H5
  }
  v74 = (float)(_S3 - (float)(_S3 * _D17.f32[0])) + (float)(_S5 * _D17.f32[0]);
  __asm
  {
    FCVT            S5, H6
    FCVT            S6, H7
  }
  v77 = (float)(_S5 - (float)(_S5 * _D17.f32[0])) + (float)(_S6 * _D17.f32[0]);
  v78 = (float)(1.0 - _D17.f32[0]) + _D17.f32[0];
  if (v78 > 1.0)
    v78 = 1.0;
  if (v78 < 0.0)
    v78 = 0.0;
  a12.i32[0] = *(_DWORD *)v59;
  v14.i32[0] = *(_DWORD *)v62;
  v15.i32[0] = *(_DWORD *)v64;
  *(float32x2_t *)v71.f32 = vmla_n_f32(vmls_lane_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32, _D17, 0), (float32x2_t)*(_OWORD *)&vcvtq_f32_f16(a12), _D17.f32[0]);
  v79 = (float32x2_t)vcvtq_f32_f16(v14).u64[0];
  v14 = (float16x4_t)vcvtq_f32_f16(v15).u64[0];
  a12 = (float16x4_t)vmla_n_f32(vmls_lane_f32(v79, v79, _D17, 0), (float32x2_t)v14, _D17.f32[0]);
  *(float32x2_t *)v71.f32 = vmla_n_f32(vmls_lane_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32, _D16, 0), (float32x2_t)a12, _D16.f32[0]);
  a9 = vcvt_f16_f32(v71);
  _S3 = (float)(v74 - (float)(v74 * _D16.f32[0])) + (float)(v77 * _D16.f32[0]);
  __asm { FCVT            H3, S3 }
  _S5 = (float)(v78 - (float)(v78 * _D16.f32[0])) + (float)(v78 * _D16.f32[0]);
  if (_S5 > 1.0)
    _S5 = 1.0;
  if (_S5 < 0.0)
    _S5 = 0.0;
LABEL_74:
  __asm { FCVT            H5, S5 }
LABEL_75:
  *(_DWORD *)(v27 + 8) = a9.i32[0];
  *(_WORD *)(v27 + 12) = _H3;
  *(_WORD *)(v27 + 14) = _H5;
  *(_BYTE *)++v28 = v39 >> 22;
  if (--a4)
  {
    v89 = (_WORD *)(v27 + 22);
    a2 += v24;
    v90 = v22 - a2;
    a3 += v25;
    v91 = v23 - a3;
    while (1)
    {
      v27 = (uint64_t)(v89 - 7);
      if ((((a2 - v20) | v90 | (a3 - v21) | v91) & 0x8000000000000000) != 0)
        goto LABEL_35;
      v92 = v17 + SHIDWORD(a3) * (uint64_t)v18;
      v51 = v92 + 6 * SHIDWORD(a2);
      v52 = *(_QWORD *)(result + 32);
      if (v29 >= v51)
        v93 = v92 + 6 * SHIDWORD(a2);
      else
        v93 = v29;
      if (v93 < v52)
        v93 = *(_QWORD *)(result + 32);
      a9.i32[0] = *(_DWORD *)v93;
      _H3 = *(_WORD *)(v93 + 4);
      if (v19)
      {
        v55 = *(_DWORD *)(v19 + ((a3 >> 22) & 0x3C0 | ((unint64_t)a2 >> 26) & 0x3C));
        v94 = v55 & 0xF;
        if ((v55 & 0xF) != 0)
        {
          v95 = *(unsigned int **)(result + 264);
          v96 = *v95;
          if (a4 != 1 && a4 + 1 != v99 && v98 != 1 && v96 == 3 && v94 < 3)
            v55 |= 3u;
          v39 = -1;
          if (v96 < v94)
            *v95 = v94;
          goto LABEL_38;
        }
      }
      *(_DWORD *)(v89 - 3) = a9.i32[0];
      *(v89 - 1) = _H3;
      *v89 = 15360;
      v89 += 4;
      a2 += v24;
      v90 -= v24;
      a3 += v25;
      v91 -= v25;
      *(_BYTE *)++v28 = -1;
      if (!--a4)
        return result;
    }
  }
  return result;
}

uint64_t RGBAf16_sample_CMYKf16(uint64_t result, uint64_t a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, float32x4_t _Q7)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  _BYTE *v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  float16x4_t *v53;
  float16x4_t *v54;
  unint64_t v55;
  __int16 *v56;
  __int16 *v57;
  uint64_t v60;
  unsigned int v61;
  int v62;
  int v63;
  int64_t v64;
  float16x4_t *v65;
  float16x4_t *v66;
  float16x4_t *v67;
  float16x4_t *v68;
  float16x4_t v69;
  float16x4_t v70;
  __int16 *v74;
  unint64_t v75;
  unint64_t v76;
  __int16 *v77;
  __int16 *v78;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float v89;
  float v92;
  float32x4_t v93;
  float16x4_t *v95;
  float16x4_t v96;
  __int16 *v98;
  float32x4_t v99;
  float v101;
  int64_t v103;
  float16x4_t *v104;
  float16x4_t v105;
  __int16 *v107;
  float32x4_t v108;
  uint64_t v110;
  uint64_t v111;
  int v112;
  unint64_t v124;
  float16x4_t *v125;
  __int16 *v126;
  unint64_t v127;
  unsigned int v128;
  unsigned int *v129;
  unsigned int v130;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  uint64_t v136;

  v14 = *(_QWORD *)(result + 32);
  v15 = *(_QWORD *)(result + 40);
  v16 = *(_DWORD *)(result + 24);
  v17 = *(_DWORD *)(result + 28);
  v18 = *(_QWORD *)(result + 176);
  v19 = *(_QWORD *)(result + 72);
  v20 = *(_QWORD *)(result + 88);
  v136 = *(_QWORD *)(result + 80);
  v22 = *(_QWORD *)(result + 112);
  v21 = *(_QWORD *)(result + 120);
  v134 = *(_DWORD *)(result + 188);
  v23 = (_WORD *)(*(_QWORD *)(result + 152) - 8);
  v24 = (_BYTE *)(*(_QWORD *)(result + 144) - 1);
  v25 = *(_DWORD *)(result + 260) - 1;
  v26 = *(_DWORD *)(result + 256);
  v27 = v15 + (v25 * v17) + 2 * (v26 - 1);
  v132 = *(_DWORD *)(result + 240);
  v28 = v14 + (v25 * v16) + 2 * (4 * v26) - 8;
  v135 = *(_QWORD *)(result + 64);
  v133 = a4;
  while (1)
  {
    if (a3 >= v19)
    {
      if (a3 <= v20)
      {
        v37 = ((unint64_t)a3 >> 22) & 0x3C0;
        v38 = 0x3FFFFFFF;
        v39 = a3;
        v40 = v135;
      }
      else
      {
        v33 = *(_QWORD *)(result + 216);
        v34 = *(_QWORD *)(result + 224) + v20;
        v35 = v34 - a3 + (v33 >> 1);
        if (v35 < 1)
          goto LABEL_39;
        if (v35 >= v33)
          LODWORD(v36) = 0x3FFFFFFF;
        else
          v36 = (unint64_t)(*(_QWORD *)(result + 232) * v35) >> 32;
        v40 = v135;
        v38 = v36 | v134;
        v39 = v34 - 0x1000000;
        v37 = 448;
      }
    }
    else
    {
      v29 = *(_QWORD *)(result + 216);
      v30 = v19 - *(_QWORD *)(result + 224);
      v31 = a3 - v30 + (v29 >> 1);
      if (v31 < 1)
        goto LABEL_39;
      if (v31 >= v29)
        LODWORD(v32) = 0x3FFFFFFF;
      else
        v32 = (unint64_t)(*(_QWORD *)(result + 232) * v31) >> 32;
      v40 = v135;
      v38 = v32 | v134;
      v39 = v30 + 0x1000000;
      v37 = 512;
    }
    if (a2 >= v40)
    {
      if (a2 <= v136)
      {
        v45 = ((unint64_t)a2 >> 26) & 0x3C;
        v44 = a2;
      }
      else
      {
        v46 = *(_QWORD *)(result + 192);
        v47 = *(_QWORD *)(result + 200) + v136;
        v48 = v47 - a2 + (v46 >> 1);
        if (v48 < 1)
          goto LABEL_39;
        if (v48 < v46)
          v38 = ((v38 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v48) >> 32) >> 15)) | v134;
        v44 = v47 - 0x1000000;
        v45 = 28;
      }
    }
    else
    {
      v41 = *(_QWORD *)(result + 192);
      v42 = v40 - *(_QWORD *)(result + 200);
      v43 = a2 - v42 + (v41 >> 1);
      if (v43 < 1)
        goto LABEL_39;
      if (v43 < v41)
        v38 = ((v38 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v43) >> 32) >> 15)) | v134;
      v44 = v42 + 0x1000000;
      v45 = 32;
    }
    if (v38 >= 0x400000)
      break;
LABEL_39:
    --a4;
    a2 += v22;
    a3 += v21;
    v23 += 4;
    *++v24 = 0;
LABEL_40:
    if (!a4)
      return result;
  }
  v49 = v39 >> 32;
  v50 = v44 >> 32;
  v51 = v14 + (int)v49 * (uint64_t)v16;
  v52 = v51 + 8 * v50;
  v53 = *(float16x4_t **)(result + 32);
  if (v28 >= v52)
    v54 = (float16x4_t *)(v51 + 8 * v50);
  else
    v54 = (float16x4_t *)v28;
  if (v54 < v53)
    v54 = *(float16x4_t **)(result + 32);
  if (v15)
  {
    v55 = v15 + (int)v49 * (uint64_t)v17 + 2 * v50;
    v56 = *(__int16 **)(result + 40);
    if (v27 >= v55)
      v57 = (__int16 *)v55;
    else
      v57 = (__int16 *)v27;
    if (v57 >= v56)
      v56 = v57;
    _H3 = *v56;
  }
  else
  {
    v55 = 0;
    _H3 = 15360;
  }
  _D4 = *v54;
  v60 = v136;
  if (!v18)
    goto LABEL_113;
  v61 = *(_DWORD *)(v18 + (v45 | v37));
LABEL_45:
  v62 = v61 & 0xF;
  v63 = HIBYTE(v61) & 3;
  switch(v62)
  {
    case 1:
      v95 = (float16x4_t *)(v52 + SBYTE1(v61) * (uint64_t)v16);
      if (v28 < (unint64_t)v95)
        v95 = (float16x4_t *)v28;
      if (v95 < v53)
        v95 = v53;
      v96 = *v95;
      _H6 = 15360;
      if (v15)
      {
        v98 = (__int16 *)(v55 + SBYTE1(v61) * (uint64_t)v17);
        if (v27 < (unint64_t)v98)
          v98 = (__int16 *)v27;
        if ((unint64_t)v98 < *(_QWORD *)(result + 40))
          v98 = *(__int16 **)(result + 40);
        _H6 = *v98;
      }
      _Q7.i16[0] = interpolate_cmykaf[5 * v63 + 4];
      __asm { FCVT            S7, H7 }
      v99 = vcvtq_f32_f16(_D4);
      _D4 = vcvt_f16_f32(vmlaq_n_f32(vmlsq_lane_f32(v99, v99, *(float32x2_t *)_Q7.f32, 0), vcvtq_f32_f16(v96), _Q7.f32[0]));
      __asm { FCVT            S3, H3 }
      v101 = _S3 - (float)(_S3 * _Q7.f32[0]);
      __asm { FCVT            S5, H6 }
      goto LABEL_111;
    case 2:
      v103 = (unint64_t)HIWORD(v61) << 56;
      v104 = (float16x4_t *)(v52 + (v103 >> 53));
      if (v28 < (unint64_t)v104)
        v104 = (float16x4_t *)v28;
      if (v104 < v53)
        v104 = v53;
      v105 = *v104;
      _H5 = 15360;
      if (v15)
      {
        v107 = (__int16 *)(v55 + (v103 >> 55));
        if (v27 < (unint64_t)v107)
          v107 = (__int16 *)v27;
        if ((unint64_t)v107 < *(_QWORD *)(result + 40))
          v107 = *(__int16 **)(result + 40);
        _H5 = *v107;
      }
      _Q7.i16[0] = interpolate_cmykaf[5 * ((v61 >> 28) & 3) + 4];
      __asm { FCVT            S7, H7 }
      v108 = vcvtq_f32_f16(_D4);
      _D4 = vcvt_f16_f32(vmlaq_n_f32(vmlsq_lane_f32(v108, v108, *(float32x2_t *)_Q7.f32, 0), vcvtq_f32_f16(v105), _Q7.f32[0]));
      __asm { FCVT            S3, H3 }
      v101 = _S3 - (float)(_S3 * _Q7.f32[0]);
      __asm { FCVT            S5, H5 }
LABEL_111:
      _S3 = v101 + (float)(_S5 * _Q7.f32[0]);
      goto LABEL_112;
    case 3:
      v64 = (unint64_t)HIWORD(v61) << 56;
      v65 = (float16x4_t *)(v52 + (v64 >> 53));
      if (v28 < (unint64_t)v65)
        v65 = (float16x4_t *)v28;
      if (v65 < v53)
        v65 = v53;
      v66 = (float16x4_t *)(v52 + SBYTE1(v61) * (uint64_t)v16);
      if (v28 >= (unint64_t)v66)
        v67 = v66;
      else
        v67 = (float16x4_t *)v28;
      if (v67 < v53)
        v67 = v53;
      v68 = (float16x4_t *)((char *)v66 + (v64 >> 53));
      if (v28 < (unint64_t)v68)
        v68 = (float16x4_t *)v28;
      if (v68 < v53)
        v68 = v53;
      v69 = *v67;
      v70 = *v68;
      _H16 = 15360;
      _H17 = 15360;
      _H18 = 15360;
      if (v15)
      {
        v74 = (__int16 *)(v55 + (v64 >> 55));
        v75 = *(_QWORD *)(result + 40);
        if (v27 < (unint64_t)v74)
          v74 = (__int16 *)v27;
        if ((unint64_t)v74 < v75)
          v74 = *(__int16 **)(result + 40);
        _H16 = *v74;
        v76 = v55 + SBYTE1(v61) * (uint64_t)v17;
        if (v27 >= v76)
          v77 = (__int16 *)(v55 + SBYTE1(v61) * (uint64_t)v17);
        else
          v77 = (__int16 *)v27;
        if ((unint64_t)v77 < v75)
          v77 = *(__int16 **)(result + 40);
        _H17 = *v77;
        v78 = (__int16 *)(v76 + (v64 >> 55));
        if (v27 < (unint64_t)v78)
          v78 = (__int16 *)v27;
        if ((unint64_t)v78 < v75)
          v78 = *(__int16 **)(result + 40);
        _H18 = *v78;
      }
      _H19 = interpolate_cmykaf[5 * v63 + 4];
      __asm { FCVT            S19, H19 }
      _H20 = interpolate_cmykaf[5 * ((v61 >> 28) & 3) + 4];
      __asm { FCVT            S20, H20 }
      v84 = vcvtq_f32_f16(_D4);
      v85 = vcvtq_f32_f16(*v65);
      v86 = vcvtq_f32_f16(v69);
      _Q7 = vcvtq_f32_f16(v70);
      __asm
      {
        FCVT            S3, H3
        FCVT            S16, H16
      }
      v89 = (float)(_S3 - (float)(_S3 * _D20.f32[0])) + (float)(_S16 * _D20.f32[0]);
      if (v89 > 1.0)
        v89 = 1.0;
      if (v89 < 0.0)
        v89 = 0.0;
      __asm
      {
        FCVT            S16, H17
        FCVT            S17, H18
      }
      v92 = (float)(_S16 - (float)(_S16 * _D20.f32[0])) + (float)(_S17 * _D20.f32[0]);
      if (v92 > 1.0)
        v92 = 1.0;
      if (v92 < 0.0)
        v92 = 0.0;
      v93 = vmlaq_n_f32(vmlsq_lane_f32(v84, v84, _D20, 0), v85, _D20.f32[0]);
      _D4 = vcvt_f16_f32(vmlaq_n_f32(vmlsq_lane_f32(v93, v93, _D19, 0), vmlaq_n_f32(vmlsq_lane_f32(v86, v86, _D20, 0), _Q7, _D20.f32[0]), _D19.f32[0]));
      _S3 = (float)(v89 - (float)(v89 * _D19.f32[0])) + (float)(v92 * _D19.f32[0]);
      if (_S3 > 1.0)
        _S3 = 1.0;
      if (_S3 < 0.0)
        _S3 = 0.0;
LABEL_112:
      __asm { FCVT            H3, S3 }
      v60 = v136;
      break;
  }
LABEL_113:
  ++v24;
  a2 += v22;
  v110 = v60 - a2;
  v23 += 4;
  a3 += v21;
  v111 = v20 - a3;
  while (1)
  {
    v112 = a4;
    __asm { FCVT            S5, H3 }
    _H6 = _D4.i16[3];
    __asm
    {
      FCVT            S6, H6
      FCVT            S7, H4
    }
    _H16 = _D4.i16[1];
    __asm { FCVT            S16, H16 }
    _H4 = _D4.i16[2];
    __asm { FCVT            S4, H4 }
    _S7 = (float)(_S5 - _S7) - _S6;
    __asm { FCVT            H7, S7 }
    *v23 = LOWORD(_S7);
    _S7 = (float)(_S5 - _S16) - _S6;
    __asm { FCVT            H7, S7 }
    v23[1] = LOWORD(_S7);
    _S4 = (float)(_S5 - _S4) - _S6;
    __asm { FCVT            H4, S4 }
    v23[2] = LOWORD(_S4);
    v23[3] = _H3;
    *v24 = v38 >> 22;
    if (!--a4)
      return result;
    if ((v111 | v110 | (a3 - v19) | (a2 - v135)) < 0)
      goto LABEL_40;
    v52 = v14 + SHIDWORD(a3) * (uint64_t)v16 + 8 * (a2 >> 32);
    v53 = *(float16x4_t **)(result + 32);
    if (v28 >= v52)
      v124 = v14 + SHIDWORD(a3) * (uint64_t)v16 + 8 * (a2 >> 32);
    else
      v124 = v28;
    if (v124 >= (unint64_t)v53)
      v125 = (float16x4_t *)v124;
    else
      v125 = *(float16x4_t **)(result + 32);
    _H3 = 15360;
    if (v15)
    {
      v55 = v15 + SHIDWORD(a3) * (uint64_t)v17 + 2 * (a2 >> 32);
      v126 = *(__int16 **)(result + 40);
      if (v27 >= v55)
        v127 = v15 + SHIDWORD(a3) * (uint64_t)v17 + 2 * (a2 >> 32);
      else
        v127 = v27;
      if (v127 >= (unint64_t)v126)
        v126 = (__int16 *)v127;
      _H3 = *v126;
    }
    _D4 = *v125;
    if (v18)
    {
      v61 = *(_DWORD *)(v18 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      v128 = v61 & 0xF;
      if ((v61 & 0xF) != 0)
      {
        v129 = *(unsigned int **)(result + 264);
        v130 = *v129;
        if (v112 != v133 && a4 != 1 && v132 != 1 && v130 == 3 && v128 < 3)
          v61 |= 3u;
        v38 = -1;
        if (v130 < v128)
          *v129 = v128;
        v60 = v136;
        goto LABEL_45;
      }
    }
    ++v24;
    v110 -= v22;
    a2 += v22;
    v23 += 4;
    a3 += v21;
    v111 -= v21;
    v38 = -1;
  }
}

BOOL CPFontEnumeratorIsKnownRenderedChar(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  int v3;
  int v4;

  if (a1 == 2)
  {
    v3 = *a2;
    if ((unsigned __int16)((unsigned __int16)(v3 + 9408) >> 6) >= 0x3F3u)
    {
      v4 = a2[1];
      if ((unsigned __int16)((unsigned __int16)(v4 + 0x2000) >> 10) >= 0x3Fu)
        return (~v3 & 0x3F | ~v4 & 0x3FE) != 0;
    }
    return 0;
  }
  if (a1 != 1)
    return 0;
  v2 = *a2;
  if (!*a2)
    return 0;
  if (v2 > 0x7F)
  {
    if (!__maskrune(*a2, 0x200uLL))
      goto LABEL_11;
    return 0;
  }
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v2 + 60) & 0x200) != 0)
    return 0;
LABEL_11:
  if (v2 > 0xFFFD)
    return 0;
  return (unsigned __int16)(v2 + 560) >= 0x20u && v2 >> 11 != 27;
}

uint64_t CPFontEnumeratorProcessMultiUnicodes(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  unsigned __int16 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  BOOL v13;

  if (!a2)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = MEMORY[0x1E0C80978];
  v8 = a2 - 1;
  while (2)
  {
    v9 = v6;
    v10 = a3[v8];
    if (v10 > 0x7F)
      v11 = __maskrune(a3[v8], 0x4000uLL);
    else
      v11 = *(_DWORD *)(v7 + 4 * v10 + 60) & 0x4000;
    v6 = 1;
    if (v11 || (_DWORD)v10 == 160)
      goto LABEL_16;
    v6 = 2;
    if ((int)v10 <= 8207)
    {
      if ((_DWORD)v10 != 45 && (_DWORD)v10 != 173)
        goto LABEL_35;
LABEL_16:
      if (!v9)
      {
LABEL_18:
        switch(v6)
        {
          case 1:
            if ((_DWORD)v10 == 160 || (_DWORD)v10 == 32)
              v5 = 9;
            else
              v5 = v10;
            goto LABEL_33;
          case 2:
            v13 = (_DWORD)v10 == 173;
            goto LABEL_28;
          case 3:
            v13 = (_DWORD)v10 == 61441;
            goto LABEL_28;
          case 4:
            v13 = (_DWORD)v10 == 61442;
LABEL_28:
            if (!v13 || v9 == 0)
              v5 = v10;
LABEL_33:
            if (--v8 == -1)
              return v5;
            continue;
          default:
            goto LABEL_43;
        }
      }
      goto LABEL_17;
    }
    break;
  }
  if ((_DWORD)v10 == 8208)
    goto LABEL_16;
  if ((_DWORD)v10 == 61441 || (_DWORD)v10 == 64257)
  {
    v6 = 3;
    if (!v9)
      goto LABEL_18;
    goto LABEL_17;
  }
LABEL_35:
  if ((_DWORD)v10 == 61442 || (_DWORD)v10 == 64258)
    v6 = 4;
  else
    v6 = 0;
  if (!v9)
    goto LABEL_18;
LABEL_17:
  if (v6 == v9)
    goto LABEL_18;
LABEL_43:
  CPMultiUnicodesAppend(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 2296), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 2072) - *(_QWORD *)(*(_QWORD *)(a1 + 112) + 2064)) >> 6), a2, a3);
  return 0;
}

uint64_t CPFontEnumeratorGetUnicharForCID(uint64_t a1, uint64_t a2, unsigned __int16 *a3, BOOL *a4)
{
  unsigned int v6;
  uint64_t v8;
  uint64_t (*v9)(_QWORD, uint64_t, unsigned __int16 *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v14;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 96);
  if (v8
    && cmap_vtable
    && (v9 = *(uint64_t (**)(_QWORD, uint64_t, unsigned __int16 *))(cmap_vtable + 64)) != 0)
  {
    v10 = v9(*(_QWORD *)(v8 + 16), a2, a3);
    *a4 = CPFontEnumeratorIsKnownRenderedChar(v10, a3);
    if (v10)
      goto LABEL_9;
  }
  else
  {
    *a4 = CPFontEnumeratorIsKnownRenderedChar(0, a3);
  }
  v11 = CGPDFGetUnicharGuessForCID(v6, a3);
  if (!v11)
    return 0;
  v10 = v11;
LABEL_9:
  if (v10 == 1)
    return *a3;
  v12 = CPFontEnumeratorProcessMultiUnicodes(a1, v10, a3);
  v14 = v12;
  if ((_DWORD)v12)
    *a4 = CPFontEnumeratorIsKnownRenderedChar(1, &v14);
  return v12;
}

void Wf16_sample_W8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  _CGHandleAssert("Wf16_sample_W8", 13485, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_white_float16.cc", "", "Unimplemented", a6, a7, a8, vars0);
}

void Wf16_sample_W16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  _CGHandleAssert("Wf16_sample_W16", 13489, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_white_float16.cc", "", "Unimplemented", a6, a7, a8, vars0);
}

void Wf16_sample_w16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  _CGHandleAssert("Wf16_sample_w16", 13493, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_white_float16.cc", "", "Unimplemented", a6, a7, a8, vars0);
}

void Wf16_sample_WF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  _CGHandleAssert("Wf16_sample_WF", 13497, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_white_float16.cc", "", "Unimplemented", a6, a7, a8, vars0);
}

uint64_t Wf16_sample_Wf_inner(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  __int16 *v48;
  __int16 *v49;
  __int16 *v50;
  unint64_t v51;
  __int16 *v52;
  __int16 *v53;
  unsigned int v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int16 *v71;
  unint64_t v73;
  __int16 *v74;
  __int16 *v76;
  uint64_t v81;
  __int16 *v82;
  unint64_t v83;
  unint64_t v84;
  __int16 *v85;
  __int16 *v86;
  float v96;
  float v99;
  float v102;
  float v103;
  float v106;
  float v107;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int16 *v114;
  __int16 *v117;
  _WORD *v118;
  uint64_t v119;
  int64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int16 *v124;
  __int16 *v125;
  __int16 *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  __int16 *v144;
  __int16 *v145;
  __int16 *v146;
  unsigned int v147;
  unsigned int *v148;
  unsigned int v149;
  unsigned int v151;
  int v152;
  int v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;

  v4 = *(_DWORD *)(result + 24);
  v161 = *(_DWORD *)(result + 28);
  v5 = *(_QWORD *)(result + 112);
  v6 = *(_QWORD *)(result + 48);
  v7 = *(_QWORD *)(result + 56);
  if (v6)
  {
    v160 = *(_QWORD *)(result + 112);
    if (v5 > v6)
      v160 = v5 % v6;
  }
  else
  {
    v160 = 0;
  }
  v8 = *(_QWORD *)(result + 176);
  v10 = *(_QWORD *)(result + 32);
  v9 = *(_QWORD *)(result + 40);
  v11 = *(_QWORD *)(result + 120);
  if (v7)
  {
    v12 = v11 % v7;
    if (v11 <= v7)
      v12 = *(_QWORD *)(result + 120);
    v159 = v12;
  }
  else
  {
    v159 = 0;
  }
  v155 = *(_QWORD *)(result + 80);
  v157 = *(_QWORD *)(result + 88);
  v154 = *(_DWORD *)(result + 188);
  v13 = *(_QWORD *)(result + 152) - 4;
  v14 = *(_QWORD *)(result + 144) - 1;
  v15 = *(_DWORD *)(result + 260) - 1;
  v16 = *(unsigned int *)(result + 256);
  v17 = v9 + (v15 * v161) + 2 * (v16 - 1);
  v152 = *(_DWORD *)(result + 240);
  v18 = v10 + (v15 * v4) + 2 * v16 - 2;
  v156 = *(_QWORD *)(result + 64);
  v158 = *(_QWORD *)(result + 72);
  v153 = a4;
  while (1)
  {
    if (a3 >= v158)
    {
      if (a3 <= v157)
      {
        v27 = 0;
        v28 = ((unint64_t)a3 >> 22) & 0x3C0;
        v29 = 0x3FFFFFFF;
        v30 = a3;
        v31 = v156;
      }
      else
      {
        v23 = *(_QWORD *)(result + 216);
        v24 = *(_QWORD *)(result + 224) + v157;
        v25 = v24 - a3 + (v23 >> 1);
        if (v25 < 1)
          goto LABEL_56;
        if (v25 >= v23)
          LODWORD(v26) = 0x3FFFFFFF;
        else
          v26 = (unint64_t)(*(_QWORD *)(result + 232) * v25) >> 32;
        v31 = v156;
        v29 = v154 | v26;
        v30 = v24 - 0x1000000;
        v27 = a3 - (v24 - 0x1000000);
        v28 = 448;
      }
    }
    else
    {
      v19 = *(_QWORD *)(result + 216);
      v20 = v158 - *(_QWORD *)(result + 224);
      v21 = a3 - v20 + (v19 >> 1);
      if (v21 < 1)
        goto LABEL_56;
      if (v21 >= v19)
        LODWORD(v22) = 0x3FFFFFFF;
      else
        v22 = (unint64_t)(*(_QWORD *)(result + 232) * v21) >> 32;
      v31 = v156;
      v29 = v154 | v22;
      v30 = v20 + 0x1000000;
      v27 = a3 - (v20 + 0x1000000);
      v28 = 512;
    }
    if (a2 >= v31)
      break;
    v32 = *(_QWORD *)(result + 192);
    v33 = v31 - *(_QWORD *)(result + 200);
    v34 = a2 - v33 + (v32 >> 1);
    if (v34 >= 1)
    {
      if (v34 < v32)
        v29 = ((v29 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v34) >> 32) >> 15)) | v154;
      v35 = v33 + 0x1000000;
      v36 = a2 - (v33 + 0x1000000);
      v37 = 32;
      goto LABEL_35;
    }
LABEL_56:
    --a4;
    a2 += v5;
    a3 += v11;
    v13 += 4;
    *(_BYTE *)++v14 = 0;
LABEL_57:
    if (!a4)
      return result;
  }
  if (a2 <= v155)
  {
    v36 = 0;
    v37 = ((unint64_t)a2 >> 26) & 0x3C;
    v35 = a2;
    goto LABEL_35;
  }
  v38 = *(_QWORD *)(result + 192);
  v39 = *(_QWORD *)(result + 200) + v155;
  v40 = v39 - a2 + (v38 >> 1);
  if (v40 < 1)
    goto LABEL_56;
  if (v40 < v38)
    v29 = ((v29 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v40) >> 32) >> 15)) | v154;
  v35 = v39 - 0x1000000;
  v36 = a2 - (v39 - 0x1000000);
  v37 = 28;
LABEL_35:
  if (v29 < 0x400000)
    goto LABEL_56;
  if (v6)
  {
    v41 = (v7 & ((v30 % v7) >> 63)) + v30 % v7;
    v42 = (v6 & ((v35 % v6) >> 63)) + v35 % v6;
    if (v41 >= v7)
      v43 = v7;
    else
      v43 = 0;
    v30 = v41 - v43;
    if (v42 >= v6)
      v44 = v6;
    else
      v44 = 0;
    v35 = v42 - v44;
    v27 += v30;
    v36 += v42 - v44;
  }
  v45 = v30 >> 32;
  v46 = v10 + SHIDWORD(v30) * (uint64_t)v4;
  v47 = (v35 >> 31) & 0xFFFFFFFFFFFFFFFELL;
  v48 = (__int16 *)(v46 + v47);
  v49 = *(__int16 **)(result + 32);
  if (v18 >= v46 + v47)
    v50 = (__int16 *)(v46 + v47);
  else
    v50 = (__int16 *)v18;
  if (v50 < v49)
    v50 = *(__int16 **)(result + 32);
  if (v9)
  {
    v51 = v9 + (int)v45 * (uint64_t)v161 + v47;
    v52 = *(__int16 **)(result + 40);
    if (v17 >= v51)
      v53 = (__int16 *)v51;
    else
      v53 = (__int16 *)v17;
    if (v53 >= v52)
      v52 = v53;
    _H3 = *v52;
  }
  else
  {
    v51 = 0;
    _H3 = 15360;
  }
  _H4 = *v50;
  if (!v8)
    goto LABEL_154;
  v56 = *(_DWORD *)(v8 + (v37 | v28));
LABEL_62:
  v57 = v56 & 0xF;
  v58 = v56 >> 8;
  v59 = HIBYTE(v56) & 3;
  switch(v57)
  {
    case 1:
      LODWORD(v110) = SBYTE1(v56);
      if (v6)
      {
        v111 = v27 + ((uint64_t)SBYTE1(v56) << 32);
        v112 = v7 & (v111 >> 63);
        if (v112 + v111 >= v7)
          v113 = v7;
        else
          v113 = 0;
        v110 = (v112 + ((uint64_t)(char)v58 << 32) - v113) >> 32;
      }
      v114 = (__int16 *)((char *)v48 + (int)v110 * (uint64_t)v4);
      if (v18 < (unint64_t)v114)
        v114 = (__int16 *)v18;
      if (v114 < v49)
        v114 = v49;
      _H5 = *v114;
      _H6 = 15360;
      if (v9)
      {
        v117 = (__int16 *)(v51 + (int)v110 * (uint64_t)v161);
        if (v17 < (unint64_t)v117)
          v117 = (__int16 *)v17;
        if ((unint64_t)v117 < *(_QWORD *)(result + 40))
          v117 = *(__int16 **)(result + 40);
        _H6 = *v117;
      }
      v118 = &interpolate_waf[2 * v59];
      goto LABEL_152;
    case 2:
      v119 = SBYTE2(v56);
      if (v6)
      {
        v120 = (unint64_t)HIWORD(v56) << 56;
        v121 = v36 + (v120 >> 24);
        v122 = v6 & (v121 >> 63);
        if (v122 + v121 >= v6)
          v123 = v6;
        else
          v123 = 0;
        v119 = (v122 + (v120 >> 24) - v123) >> 32;
      }
      v124 = &v48[v119];
      if (v18 < (unint64_t)v124)
        v124 = (__int16 *)v18;
      if (v124 < v49)
        v124 = v49;
      _H5 = *v124;
      _H6 = 15360;
      if (v9)
      {
        v125 = (__int16 *)(v51 + 2 * v119);
        if (v17 < (unint64_t)v125)
          v125 = (__int16 *)v17;
        if ((unint64_t)v125 < *(_QWORD *)(result + 40))
          v125 = *(__int16 **)(result + 40);
        _H6 = *v125;
      }
      v118 = &interpolate_waf[2 * ((v56 >> 28) & 3)];
LABEL_152:
      _H7 = v118[1];
      __asm
      {
        FCVT            S7, H7
        FCVT            S4, H4
        FCVT            S5, H5
      }
      _S4 = (float)(_S4 - (float)(_S4 * _S7)) + (float)(_S5 * _S7);
      __asm
      {
        FCVT            H4, S4
        FCVT            S3, H3
        FCVT            S5, H6
      }
      _S3 = (float)(_S3 - (float)(_S3 * _S7)) + (float)(_S5 * _S7);
      goto LABEL_153;
    case 3:
      LODWORD(v60) = SBYTE1(v56);
      v61 = SBYTE2(v56);
      if (v6)
      {
        v62 = v58 << 56;
        v63 = v27 + ((uint64_t)SBYTE1(v56) << 32);
        v64 = v36 + ((uint64_t)SBYTE2(v56) << 32);
        v151 = v29;
        v65 = v7 & (v63 >> 63);
        v66 = v6 & (v64 >> 63);
        v67 = v66 + v64;
        if (v65 + v63 >= v7)
          v68 = v7;
        else
          v68 = 0;
        if (v67 >= v6)
          v69 = v6;
        else
          v69 = 0;
        v70 = v65 + (v62 >> 24);
        v29 = v151;
        v60 = (v70 - v68) >> 32;
        v61 = (v66 + ((uint64_t)((unint64_t)HIWORD(v56) << 56) >> 24) - v69) >> 32;
      }
      v71 = &v48[v61];
      if (v18 < (unint64_t)v71)
        v71 = (__int16 *)v18;
      if (v71 < v49)
        v71 = v49;
      _H5 = *v71;
      v73 = (unint64_t)v48 + (int)v60 * (uint64_t)v4;
      if (v18 >= v73)
        v74 = (__int16 *)((char *)v48 + (int)v60 * (uint64_t)v4);
      else
        v74 = (__int16 *)v18;
      if (v74 < v49)
        v74 = v49;
      _H6 = *v74;
      v76 = (__int16 *)(v73 + 2 * v61);
      if (v18 < (unint64_t)v76)
        v76 = (__int16 *)v18;
      if (v76 < v49)
        v76 = v49;
      _H7 = *v76;
      _H16 = 15360;
      _H17 = 15360;
      _H18 = 15360;
      if (v9)
      {
        v81 = 2 * v61;
        v82 = (__int16 *)(v51 + 2 * v61);
        v83 = *(_QWORD *)(result + 40);
        if (v17 < (unint64_t)v82)
          v82 = (__int16 *)v17;
        if ((unint64_t)v82 < v83)
          v82 = *(__int16 **)(result + 40);
        _H16 = *v82;
        v84 = v51 + (int)v60 * (uint64_t)v161;
        if (v17 >= v84)
          v85 = (__int16 *)(v51 + (int)v60 * (uint64_t)v161);
        else
          v85 = (__int16 *)v17;
        if ((unint64_t)v85 < v83)
          v85 = *(__int16 **)(result + 40);
        _H17 = *v85;
        v86 = (__int16 *)(v84 + v81);
        if (v17 < (unint64_t)v86)
          v86 = (__int16 *)v17;
        if ((unint64_t)v86 < v83)
          v86 = *(__int16 **)(result + 40);
        _H18 = *v86;
      }
      _H19 = interpolate_waf[2 * (HIBYTE(v56) & 3) + 1];
      __asm { FCVT            S19, H19 }
      _H20 = interpolate_waf[2 * ((v56 >> 28) & 3) + 1];
      __asm
      {
        FCVT            S20, H20
        FCVT            S4, H4
        FCVT            S5, H5
      }
      v96 = (float)(_S4 - (float)(_S4 * _S20)) + (float)(_S5 * _S20);
      __asm
      {
        FCVT            S5, H6
        FCVT            S6, H7
      }
      v99 = (float)(_S5 - (float)(_S5 * _S20)) + (float)(_S6 * _S20);
      __asm
      {
        FCVT            S3, H3
        FCVT            S6, H16
      }
      v102 = (float)(_S3 - (float)(_S3 * _S20)) + (float)(_S6 * _S20);
      if (v102 < 1.0)
        v103 = v102;
      else
        v103 = 1.0;
      if (v102 > 1.0)
        v102 = 1.0;
      if (v103 < 0.0)
        v102 = 0.0;
      __asm
      {
        FCVT            S6, H17
        FCVT            S7, H18
      }
      v106 = (float)(_S6 - (float)(_S6 * _S20)) + (float)(_S7 * _S20);
      if (v106 < 1.0)
        v107 = v106;
      else
        v107 = 1.0;
      if (v106 > 1.0)
        v106 = 1.0;
      if (v107 < 0.0)
        v106 = 0.0;
      _S4 = (float)(v96 - (float)(v96 * _S19)) + (float)(v99 * _S19);
      __asm { FCVT            H4, S4 }
      _S3 = (float)(v102 - (float)(v102 * _S19)) + (float)(v106 * _S19);
      if (_S3 >= 1.0)
        _S3 = 1.0;
      if (_S3 <= 0.0)
        _S3 = 0.0;
LABEL_153:
      __asm { FCVT            H3, S3 }
      break;
  }
LABEL_154:
  *(_WORD *)(v13 + 4) = _H4;
  *(_WORD *)(v13 + 6) = _H3;
  *(_BYTE *)++v14 = v29 >> 22;
  if (--a4)
  {
    v133 = (__int16 *)(v13 + 10);
    a2 += v5;
    v134 = v155 - a2;
    a3 += v11;
    v135 = v157 - a3;
    while (1)
    {
      v13 = (uint64_t)(v133 - 3);
      if ((v135 | v134 | (a3 - v158) | (a2 - v156)) < 0)
        goto LABEL_57;
      if (v6)
      {
        v136 = (v7 & ((v27 + v159) >> 63)) + v27 + v159;
        v137 = (v6 & ((v36 + v160) >> 63)) + v36 + v160;
        if (v136 >= v7)
          v138 = v7;
        else
          v138 = 0;
        v139 = v136 - v138;
        if (v137 >= v6)
          v140 = v6;
        else
          v140 = 0;
        v141 = v137 - v140;
        v36 = v141;
        v27 = v139;
      }
      else
      {
        v141 = a2;
        v139 = a3;
      }
      v142 = v139 >> 32;
      v143 = (v141 >> 31) & 0xFFFFFFFFFFFFFFFELL;
      v48 = (__int16 *)(v10 + SHIDWORD(v139) * (uint64_t)v4 + v143);
      v49 = *(__int16 **)(result + 32);
      if (v18 >= (unint64_t)v48)
        v144 = v48;
      else
        v144 = (__int16 *)v18;
      if (v144 < v49)
        v144 = *(__int16 **)(result + 32);
      _H3 = 15360;
      if (v9)
      {
        v51 = v9 + (int)v142 * (uint64_t)v161 + v143;
        v145 = *(__int16 **)(result + 40);
        if (v17 >= v51)
          v146 = (__int16 *)v51;
        else
          v146 = (__int16 *)v17;
        if (v146 >= v145)
          v145 = v146;
        _H3 = *v145;
      }
      _H4 = *v144;
      if (v8)
      {
        v56 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        v147 = v56 & 0xF;
        if ((v56 & 0xF) != 0)
        {
          v148 = *(unsigned int **)(result + 264);
          v149 = *v148;
          if (a4 + 1 != v153 && a4 != 1 && v152 != 1 && v149 == 3 && v147 < 3)
            v56 |= 3u;
          v29 = -1;
          if (v149 < v147)
            *v148 = v147;
          goto LABEL_62;
        }
      }
      *(v133 - 1) = _H4;
      *v133 = _H3;
      v133 += 2;
      a2 += v5;
      v134 -= v5;
      a3 += v11;
      *(_BYTE *)++v14 = -1;
      v135 -= v11;
      if (!--a4)
        return result;
    }
  }
  return result;
}

void Wf16_sample_RGBF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  _CGHandleAssert("Wf16_sample_RGBF", 13505, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_white_float16.cc", "", "Unimplemented", a6, a7, a8, vars0);
}

uint64_t Wf16_sample_RGBf_inner(uint64_t result, uint64_t a2, unint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, float16x4_t _D7)
{
  float16x4_t v13;
  float16x4_t v16;
  float16x4_t v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v57;
  int v59;
  int v60;
  unint64_t v61;
  unint64_t v63;
  unint64_t v64;
  unint64_t v66;
  float32x4_t v73;
  float v76;
  float v79;
  float v80;
  float v81;
  float32x2_t v82;
  unint64_t v85;
  _WORD *v87;
  float32x4_t v88;
  _WORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unsigned int v102;
  unsigned int *v108;
  unsigned int v109;
  int v111;
  int v112;

  v19 = *(_QWORD *)(result + 32);
  v20 = *(_DWORD *)(result + 24);
  v21 = *(_QWORD *)(result + 176);
  v22 = *(_QWORD *)(result + 64);
  v23 = *(_QWORD *)(result + 72);
  v24 = *(_QWORD *)(result + 80);
  v25 = *(_QWORD *)(result + 88);
  v26 = *(_QWORD *)(result + 112);
  v27 = *(_QWORD *)(result + 120);
  v28 = *(_DWORD *)(result + 188);
  v29 = *(_QWORD *)(result + 152) - 4;
  v30 = *(_QWORD *)(result + 144) - 1;
  v111 = *(_DWORD *)(result + 240);
  v31 = v19
      + ((*(_DWORD *)(result + 260) - 1) * v20)
      + 4 * (3 * *(_DWORD *)(result + 256))
      - 6;
  v112 = a4;
  while (1)
  {
    if ((uint64_t)a3 >= v23)
    {
      if ((uint64_t)a3 <= v25)
      {
        v40 = (a3 >> 22) & 0x3C0;
        v41 = 0x3FFFFFFF;
        HIDWORD(v42) = HIDWORD(a3);
      }
      else
      {
        v36 = *(_QWORD *)(result + 216);
        v37 = *(_QWORD *)(result + 224) + v25;
        v38 = v37 - a3 + (v36 >> 1);
        if (v38 < 1)
          goto LABEL_34;
        if (v38 >= v36)
          LODWORD(v39) = 0x3FFFFFFF;
        else
          v39 = (unint64_t)(*(_QWORD *)(result + 232) * v38) >> 32;
        v41 = v28 | v39;
        v42 = v37 - 0x1000000;
        v40 = 448;
      }
    }
    else
    {
      v32 = *(_QWORD *)(result + 216);
      v33 = v23 - *(_QWORD *)(result + 224);
      v34 = a3 - v33 + (v32 >> 1);
      if (v34 < 1)
        goto LABEL_34;
      if (v34 >= v32)
        LODWORD(v35) = 0x3FFFFFFF;
      else
        v35 = (unint64_t)(*(_QWORD *)(result + 232) * v34) >> 32;
      v41 = v28 | v35;
      v42 = v33 + 0x1000000;
      v40 = 512;
    }
    if (a2 >= v22)
      break;
    v43 = *(_QWORD *)(result + 192);
    v44 = v22 - *(_QWORD *)(result + 200);
    v45 = a2 - v44 + (v43 >> 1);
    if (v45 >= 1)
    {
      if (v45 < v43)
        v41 = ((v41 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v45) >> 32) >> 15)) | v28;
      v46 = v44 + 0x1000000;
      v47 = 32;
      goto LABEL_26;
    }
LABEL_34:
    --a4;
    a2 += v26;
    a3 += v27;
    v29 += 4;
    *(_BYTE *)++v30 = 0;
LABEL_35:
    if (!a4)
      return result;
  }
  if (a2 <= v24)
  {
    v47 = ((unint64_t)a2 >> 26) & 0x3C;
    v46 = a2;
    goto LABEL_26;
  }
  v48 = *(_QWORD *)(result + 192);
  v49 = *(_QWORD *)(result + 200) + v24;
  v50 = v49 - a2 + (v48 >> 1);
  if (v50 < 1)
    goto LABEL_34;
  if (v50 < v48)
    v41 = ((v41 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v50) >> 32) >> 15)) | v28;
  v46 = v49 - 0x1000000;
  v47 = 28;
LABEL_26:
  if (v41 < 0x400000)
    goto LABEL_34;
  v51 = v46 >> 32;
  v52 = v19 + SHIDWORD(v42) * (uint64_t)v20;
  v53 = v52 + 6 * (int)v51;
  v54 = *(_QWORD *)(result + 32);
  if (v31 >= v53)
    v55 = v52 + 6 * (int)v51;
  else
    v55 = v31;
  if (v55 < v54)
    v55 = *(_QWORD *)(result + 32);
  _D7.i32[0] = *(_DWORD *)v55;
  _H6 = *(_WORD *)(v55 + 4);
  if (!v21)
    goto LABEL_37;
  v57 = *(_DWORD *)(v21 + (v47 | v40));
LABEL_38:
  v59 = v57 & 0xF;
  v60 = HIBYTE(v57) & 3;
  if (v59 == 1)
  {
    v85 = v53 + SBYTE1(v57) * (uint64_t)v20;
    if (v31 < v85)
      v85 = v31;
    if (v85 < v54)
      v85 = v54;
    _H16 = *(_WORD *)(v85 + 4);
    v87 = &interpolate_rgbaf16[4 * v60];
    goto LABEL_76;
  }
  if (v59 == 2)
  {
    v85 = v53 + 6 * SBYTE2(v57);
    if (v31 < v85)
      v85 = v31;
    if (v85 < v54)
      v85 = v54;
    _H16 = *(_WORD *)(v85 + 4);
    v87 = &interpolate_rgbaf16[4 * ((v57 >> 28) & 3)];
LABEL_76:
    _D17.i16[0] = v87[3];
    __asm { FCVT            S17, H17 }
    v88 = vcvtq_f32_f16(_D7);
    v13.i32[0] = *(_DWORD *)v85;
    v13 = (float16x4_t)vcvtq_f32_f16(v13).u64[0];
    *(float32x2_t *)v88.f32 = vmla_n_f32(vmls_lane_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32, _D17, 0), (float32x2_t)v13, _D17.f32[0]);
    _D7 = vcvt_f16_f32(v88);
    __asm
    {
      FCVT            S6, H6
      FCVT            S16, H16
    }
    _S6 = (float)(_S6 - (float)(_S6 * _D17.f32[0])) + (float)(_S16 * _D17.f32[0]);
    __asm { FCVT            H6, S6 }
    _S16 = (float)(1.0 - _D17.f32[0]) + _D17.f32[0];
    goto LABEL_77;
  }
  if (v59 != 3)
  {
LABEL_37:
    _H16 = 15360;
    goto LABEL_78;
  }
  v61 = v53 + 6 * SBYTE2(v57);
  if (v31 < v61)
    v61 = v31;
  if (v61 < v54)
    v61 = v54;
  _H16 = *(_WORD *)(v61 + 4);
  v63 = v53 + SBYTE1(v57) * (uint64_t)v20;
  if (v31 >= v63)
    v64 = v53 + SBYTE1(v57) * (uint64_t)v20;
  else
    v64 = v31;
  if (v64 < v54)
    v64 = v54;
  _H17 = *(_WORD *)(v64 + 4);
  v66 = v63 + 6 * SBYTE2(v57);
  if (v31 < v66)
    v66 = v31;
  if (v66 < v54)
    v66 = v54;
  _H18 = *(_WORD *)(v66 + 4);
  _H19 = interpolate_rgbaf16[4 * v60 + 3];
  __asm { FCVT            S19, H19 }
  _H20 = interpolate_rgbaf16[4 * ((v57 >> 28) & 3) + 3];
  __asm { FCVT            S20, H20 }
  v73 = vcvtq_f32_f16(_D7);
  __asm
  {
    FCVT            S6, H6
    FCVT            S16, H16
  }
  v76 = (float)(_S6 - (float)(_S6 * _D20.f32[0])) + (float)(_S16 * _D20.f32[0]);
  __asm
  {
    FCVT            S16, H17
    FCVT            S17, H18
  }
  v79 = (float)(_S16 - (float)(_S16 * _D20.f32[0])) + (float)(_S17 * _D20.f32[0]);
  v80 = (float)(1.0 - _D20.f32[0]) + _D20.f32[0];
  if (v80 < 1.0)
    v81 = (float)(1.0 - _D20.f32[0]) + _D20.f32[0];
  else
    v81 = 1.0;
  if (v80 > 1.0)
    v80 = 1.0;
  if (v81 < 0.0)
    v80 = 0.0;
  v13.i32[0] = *(_DWORD *)v61;
  v16.i32[0] = *(_DWORD *)v64;
  v17.i32[0] = *(_DWORD *)v66;
  *(float32x2_t *)v73.f32 = vmla_n_f32(vmls_lane_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v73.f32, _D20, 0), (float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v13), _D20.f32[0]);
  v82 = (float32x2_t)vcvtq_f32_f16(v16).u64[0];
  v16 = (float16x4_t)vcvtq_f32_f16(v17).u64[0];
  v13 = (float16x4_t)vmla_n_f32(vmls_lane_f32(v82, v82, _D20, 0), (float32x2_t)v16, _D20.f32[0]);
  *(float32x2_t *)v73.f32 = vmla_n_f32(vmls_lane_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v73.f32, _D19, 0), (float32x2_t)v13, _D19.f32[0]);
  _D7 = vcvt_f16_f32(v73);
  _S6 = (float)(v76 - (float)(v76 * _D19.f32[0])) + (float)(v79 * _D19.f32[0]);
  __asm { FCVT            H6, S6 }
  _S16 = (float)(v80 - (float)(v80 * _D19.f32[0])) + (float)(v80 * _D19.f32[0]);
  if (_S16 >= 1.0)
    _S16 = 1.0;
  if (_S16 <= 0.0)
    _S16 = 0.0;
LABEL_77:
  __asm { FCVT            H16, S16 }
LABEL_78:
  __asm { FCVT            S17, H7 }
  _H7 = _D7.i16[1];
  __asm
  {
    FCVT            S7, H7
    FCVT            S6, H6
  }
  _S6 = (float)((float)(_S7 * 0.59) + (float)(_S17 * 0.3)) + (float)(_S6 * 0.11);
  __asm { FCVT            H6, S6 }
  *(_WORD *)(v29 + 4) = LOWORD(_S6);
  *(_WORD *)(v29 + 6) = _H16;
  *(_BYTE *)++v30 = v41 >> 22;
  if (--a4)
  {
    v97 = (_WORD *)(v29 + 10);
    a2 += v26;
    v98 = v24 - a2;
    a3 += v27;
    v99 = v25 - a3;
    while (1)
    {
      v29 = (uint64_t)(v97 - 3);
      if (((v99 | v98 | (a3 - v23) | (a2 - v22)) & 0x8000000000000000) != 0)
        goto LABEL_35;
      v100 = v19 + SHIDWORD(a3) * (uint64_t)v20;
      v53 = v100 + 6 * SHIDWORD(a2);
      v54 = *(_QWORD *)(result + 32);
      if (v31 >= v53)
        v101 = v100 + 6 * SHIDWORD(a2);
      else
        v101 = v31;
      if (v101 < v54)
        v101 = *(_QWORD *)(result + 32);
      _D7.i32[0] = *(_DWORD *)v101;
      _H6 = *(_WORD *)(v101 + 4);
      if (v21)
      {
        v57 = *(_DWORD *)(v21 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
        v102 = v57 & 0xF;
        if ((v57 & 0xF) != 0)
        {
          v108 = *(unsigned int **)(result + 264);
          v109 = *v108;
          if (a4 + 1 != v112 && a4 != 1 && v111 != 1 && v109 == 3 && v102 < 3)
            v57 |= 3u;
          v41 = -1;
          if (v109 < v102)
            *v108 = v102;
          goto LABEL_38;
        }
      }
      __asm { FCVT            S16, H7 }
      _H7 = HIWORD(*(_DWORD *)v101);
      __asm
      {
        FCVT            S7, H7
        FCVT            S6, H6
      }
      _S6 = (float)((float)(_S7 * 0.59) + (float)(_S16 * 0.3)) + (float)(_S6 * 0.11);
      __asm { FCVT            H6, S6 }
      *(v97 - 1) = LOWORD(_S6);
      *v97 = 15360;
      *(_BYTE *)++v30 = -1;
      v97 += 2;
      a2 += v26;
      v98 -= v26;
      a3 += v27;
      v99 -= v27;
      if (!--a4)
        return result;
    }
  }
  return result;
}

void Wf16_sample_RGBAF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  _CGHandleAssert("Wf16_sample_RGBAF", 13513, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_white_float16.cc", "", "Unimplemented", a6, a7, a8, vars0);
}

uint64_t Wf16_sample_RGBAf_inner(uint64_t result, uint64_t a2, unint64_t a3, int a4, float a5)
{
  float16x4_t v6;
  float16x4_t v7;
  float16x4_t v9;
  float16x4_t v10;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v74;
  unint64_t v75;
  unint64_t v79;
  unint64_t v80;
  _WORD *v85;
  unint64_t v86;
  unint64_t v87;
  float32x4_t v90;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  float32x4_t v103;
  float32x2_t v104;
  float v107;
  float v110;
  float v113;
  float v114;
  float v117;
  float v118;
  _WORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unsigned int v133;
  unsigned int *v139;
  unsigned int v140;
  int v142;
  int v144;

  v13 = *(_DWORD *)(result + 24);
  v14 = *(_QWORD *)(result + 176);
  v15 = *(_QWORD *)(result + 64);
  v16 = *(_QWORD *)(result + 72);
  v17 = *(_QWORD *)(result + 80);
  v18 = *(_QWORD *)(result + 88);
  v19 = *(_QWORD *)(result + 112);
  v20 = *(_QWORD *)(result + 120);
  v144 = *(_DWORD *)(result + 188);
  v21 = *(_QWORD *)(result + 152) - 4;
  v22 = *(_QWORD *)(result + 144) - 1;
  v23 = *(_QWORD *)(result + 32);
  v24 = *(_QWORD *)(result + 40);
  v142 = *(_DWORD *)(result + 240);
  v25 = v23
      + ((*(_DWORD *)(result + 260) - 1) * v13)
      + 2 * (4 * *(_DWORD *)(result + 256))
      - 8;
  LOWORD(a5) = 15360;
  v26 = a4;
  while (1)
  {
    if ((uint64_t)a3 >= v16)
    {
      if ((uint64_t)a3 <= v18)
      {
        v35 = (a3 >> 22) & 0x3C0;
        v36 = 0x3FFFFFFF;
        HIDWORD(v37) = HIDWORD(a3);
      }
      else
      {
        v31 = *(_QWORD *)(result + 216);
        v32 = *(_QWORD *)(result + 224) + v18;
        v33 = v32 - a3 + (v31 >> 1);
        if (v33 < 1)
          goto LABEL_72;
        if (v33 >= v31)
          LODWORD(v34) = 0x3FFFFFFF;
        else
          v34 = (unint64_t)(*(_QWORD *)(result + 232) * v33) >> 32;
        v36 = v144 | v34;
        v37 = v32 - 0x1000000;
        v35 = 448;
      }
    }
    else
    {
      v27 = *(_QWORD *)(result + 216);
      v28 = v16 - *(_QWORD *)(result + 224);
      v29 = a3 - v28 + (v27 >> 1);
      if (v29 < 1)
        goto LABEL_72;
      if (v29 >= v27)
        LODWORD(v30) = 0x3FFFFFFF;
      else
        v30 = (unint64_t)(*(_QWORD *)(result + 232) * v29) >> 32;
      v36 = v144 | v30;
      v37 = v28 + 0x1000000;
      v35 = 512;
    }
    if (a2 >= v15)
      break;
    v38 = *(_QWORD *)(result + 192);
    v39 = v15 - *(_QWORD *)(result + 200);
    v40 = a2 - v39 + (v38 >> 1);
    if (v40 >= 1)
    {
      if (v40 < v38)
        v36 = ((v36 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v40) >> 32) >> 15)) | v144;
      v41 = v39 + 0x1000000;
      v42 = 32;
      goto LABEL_26;
    }
LABEL_72:
    --v26;
    a2 += v19;
    a3 += v20;
    v21 += 4;
    *(_BYTE *)++v22 = 0;
LABEL_73:
    if (!v26)
      return result;
  }
  if (a2 <= v17)
  {
    v42 = ((unint64_t)a2 >> 26) & 0x3C;
    v41 = a2;
    goto LABEL_26;
  }
  v43 = *(_QWORD *)(result + 192);
  v44 = *(_QWORD *)(result + 200) + v17;
  v45 = v44 - a2 + (v43 >> 1);
  if (v45 < 1)
    goto LABEL_72;
  if (v45 < v43)
    v36 = ((v36 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v45) >> 32) >> 15)) | v144;
  v41 = v44 - 0x1000000;
  v42 = 28;
LABEL_26:
  if (v36 < 0x400000)
    goto LABEL_72;
  v46 = v23 + SHIDWORD(v37) * (uint64_t)v13;
  v47 = v46 + 8 * (v41 >> 32);
  v48 = *(_QWORD *)(result + 32);
  if (v25 >= v47)
    v49 = v46 + 8 * (v41 >> 32);
  else
    v49 = v25;
  if (v49 >= v48)
    v50 = v49;
  else
    v50 = *(_QWORD *)(result + 32);
  LOWORD(_S7) = 15360;
  if (v24)
  {
    LOWORD(_S7) = *(_WORD *)(v50 + 6);
    __asm { FCVT            S16, H7 }
    if (_S16 >= 1.0)
      _S7 = a5;
    __asm { FCVT            S16, H7 }
    if (_S16 <= 0.0)
      _S7 = 0.0;
  }
  _D17.i32[0] = *(_DWORD *)v50;
  _H16 = *(_WORD *)(v50 + 4);
  if (!v14)
    goto LABEL_129;
  v58 = *(_DWORD *)(v14 + (v42 | v35));
LABEL_40:
  v59 = v58 & 0xF;
  v60 = HIBYTE(v58) & 3;
  switch(v59)
  {
    case 1:
      v79 = v47 + SBYTE1(v58) * (uint64_t)v13;
      if (v25 < v79)
        v79 = v25;
      if (v79 >= v48)
        v80 = v79;
      else
        v80 = v48;
      v7.i32[0] = *(_DWORD *)v80;
      _H18 = *(_WORD *)(v80 + 4);
      LOWORD(_S19) = 15360;
      if (v24)
      {
        LOWORD(_S19) = *(_WORD *)(v80 + 6);
        __asm { FCVT            S21, H19 }
        if (_S21 >= 1.0)
          _S19 = a5;
        __asm { FCVT            S21, H19 }
        if (_S21 <= 0.0)
          _S19 = 0.0;
      }
      v85 = &interpolate_rgbaf16[4 * v60];
      goto LABEL_97;
    case 2:
      v86 = v47 + ((uint64_t)((unint64_t)HIWORD(v58) << 56) >> 53);
      if (v25 < v86)
        v86 = v25;
      if (v86 >= v48)
        v87 = v86;
      else
        v87 = v48;
      v7.i32[0] = *(_DWORD *)v87;
      _H18 = *(_WORD *)(v87 + 4);
      LOWORD(_S19) = 15360;
      if (v24)
      {
        LOWORD(_S19) = *(_WORD *)(v87 + 6);
        __asm { FCVT            S21, H19 }
        if (_S21 >= 1.0)
          _S19 = a5;
        __asm { FCVT            S21, H19 }
        if (_S21 <= 0.0)
          _S19 = 0.0;
      }
      v85 = &interpolate_rgbaf16[4 * ((v58 >> 28) & 3)];
LABEL_97:
      _D21.i16[0] = v85[3];
      __asm { FCVT            S21, H21 }
      v90 = vcvtq_f32_f16(_D17);
      v7 = (float16x4_t)vcvtq_f32_f16(v7).u64[0];
      *(float32x2_t *)v90.f32 = vmla_n_f32(vmls_lane_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32, _D21, 0), (float32x2_t)v7, _D21.f32[0]);
      _D17 = vcvt_f16_f32(v90);
      __asm
      {
        FCVT            S16, H16
        FCVT            S18, H18
      }
      _S16 = (float)(_S16 - (float)(_S16 * _D21.f32[0])) + (float)(_S18 * _D21.f32[0]);
      __asm
      {
        FCVT            H16, S16
        FCVT            S7, H7
        FCVT            S18, H19
      }
      _S7 = (float)(_S7 - (float)(_S7 * _D21.f32[0])) + (float)(_S18 * _D21.f32[0]);
      goto LABEL_128;
    case 3:
      v61 = SBYTE1(v58) * (uint64_t)v13;
      v62 = 8 * SBYTE2(v58);
      v63 = v47 + ((uint64_t)((unint64_t)HIWORD(v58) << 56) >> 53);
      if (v25 < v63)
        v63 = v25;
      if (v63 < v48)
        v63 = v48;
      v6.i32[0] = *(_DWORD *)v63;
      _H18 = *(_WORD *)(v63 + 4);
      if (v24)
      {
        LOWORD(_S20) = *(_WORD *)(v63 + 6);
        __asm { FCVT            S21, H20 }
        if (_S21 >= 1.0)
          _S20 = a5;
        __asm { FCVT            S21, H20 }
        if (_S21 <= 0.0)
          _S20 = 0.0;
        v68 = v47 + v61;
        if (v25 >= v47 + v61)
          v69 = v47 + v61;
        else
          v69 = v25;
        if (v69 >= v48)
          v70 = v69;
        else
          v70 = v48;
        LOWORD(_S21) = *(_WORD *)(v70 + 6);
        __asm { FCVT            S22, H21 }
        if (_S22 >= 1.0)
          _S21 = a5;
        __asm { FCVT            S22, H21 }
        if (_S22 <= 0.0)
          _S21 = 0.0;
        v74 = v68 + v62;
        if (v25 < v74)
          v74 = v25;
        if (v74 >= v48)
          v75 = v74;
        else
          v75 = v48;
        LOWORD(_S22) = *(_WORD *)(v75 + 6);
        __asm { FCVT            S23, H22 }
        if (_S23 >= 1.0)
          _S22 = a5;
        __asm { FCVT            S23, H22 }
        if (_S23 <= 0.0)
          _S22 = 0.0;
      }
      else
      {
        v96 = v47 + v61;
        if (v25 >= v47 + v61)
          v97 = v47 + v61;
        else
          v97 = v25;
        if (v97 >= v48)
          v70 = v97;
        else
          v70 = v48;
        v98 = v96 + v62;
        if (v25 < v98)
          v98 = v25;
        if (v98 >= v48)
          v75 = v98;
        else
          v75 = v48;
        LOWORD(_S21) = 15360;
        LOWORD(_S20) = 15360;
        LOWORD(_S22) = 15360;
      }
      _H23 = *(_WORD *)(v70 + 4);
      v9.i32[0] = *(_DWORD *)v70;
      v10.i32[0] = *(_DWORD *)v75;
      _H26 = *(_WORD *)(v75 + 4);
      _H27 = interpolate_rgbaf16[4 * v60 + 3];
      __asm { FCVT            S27, H27 }
      _H28 = interpolate_rgbaf16[4 * ((v58 >> 28) & 3) + 3];
      __asm { FCVT            S28, H28 }
      v103 = vcvtq_f32_f16(_D17);
      v6 = (float16x4_t)vcvtq_f32_f16(v6).u64[0];
      v104 = (float32x2_t)vcvtq_f32_f16(v9).u64[0];
      v10 = (float16x4_t)vcvtq_f32_f16(v10).u64[0];
      __asm
      {
        FCVT            S16, H16
        FCVT            S18, H18
      }
      v107 = (float)(_S16 - (float)(_S16 * _D28.f32[0])) + (float)(_S18 * _D28.f32[0]);
      __asm
      {
        FCVT            S18, H23
        FCVT            S23, H26
      }
      v110 = (float)(_S18 - (float)(_S18 * _D28.f32[0])) + (float)(_S23 * _D28.f32[0]);
      __asm
      {
        FCVT            S7, H7
        FCVT            S20, H20
      }
      v113 = (float)(_S7 - (float)(_S7 * _D28.f32[0])) + (float)(_S20 * _D28.f32[0]);
      if (v113 < 1.0)
        v114 = v113;
      else
        v114 = 1.0;
      if (v113 > 1.0)
        v113 = 1.0;
      if (v114 < 0.0)
        v113 = 0.0;
      __asm
      {
        FCVT            S20, H21
        FCVT            S21, H22
      }
      v117 = (float)(_S20 - (float)(_S20 * _D28.f32[0])) + (float)(_S21 * _D28.f32[0]);
      if (v117 < 1.0)
        v118 = v117;
      else
        v118 = 1.0;
      if (v117 > 1.0)
        v117 = 1.0;
      if (v118 < 0.0)
        v117 = 0.0;
      *(float32x2_t *)v103.f32 = vmla_n_f32(vmls_lane_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32, _D28, 0), (float32x2_t)v6, _D28.f32[0]);
      v9 = (float16x4_t)vmla_n_f32(vmls_lane_f32(v104, v104, _D28, 0), (float32x2_t)v10, _D28.f32[0]);
      *(float32x2_t *)v103.f32 = vmla_n_f32(vmls_lane_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32, _D27, 0), (float32x2_t)v9, _D27.f32[0]);
      _D17 = vcvt_f16_f32(v103);
      _S16 = (float)(v107 - (float)(v107 * _D27.f32[0])) + (float)(v110 * _D27.f32[0]);
      __asm { FCVT            H16, S16 }
      _S7 = (float)(v113 - (float)(v113 * _D27.f32[0])) + (float)(v117 * _D27.f32[0]);
      if (_S7 >= 1.0)
        _S7 = 1.0;
      if (_S7 <= 0.0)
        _S7 = 0.0;
LABEL_128:
      __asm { FCVT            H7, S7 }
      break;
  }
LABEL_129:
  __asm { FCVT            S18, H17 }
  _H17 = _D17.i16[1];
  __asm
  {
    FCVT            S17, H17
    FCVT            S16, H16
  }
  _S16 = (float)((float)(_S17 * 0.59) + (float)(_S18 * 0.3)) + (float)(_S16 * 0.11);
  __asm { FCVT            H16, S16 }
  *(_WORD *)(v21 + 4) = LOWORD(_S16);
  *(_WORD *)(v21 + 6) = LOWORD(_S7);
  *(_BYTE *)++v22 = v36 >> 22;
  if (--v26)
  {
    v125 = (_WORD *)(v21 + 10);
    a2 += v19;
    v126 = v17 - a2;
    a3 += v20;
    v127 = v18 - a3;
    while (1)
    {
      v21 = (uint64_t)(v125 - 3);
      if (((v127 | v126 | (a3 - v16) | (a2 - v15)) & 0x8000000000000000) != 0)
        goto LABEL_73;
      v128 = v23 + SHIDWORD(a3) * (uint64_t)v13;
      v47 = v128 + 8 * (a2 >> 32);
      v48 = *(_QWORD *)(result + 32);
      if (v25 >= v47)
        v129 = v128 + 8 * (a2 >> 32);
      else
        v129 = v25;
      if (v129 >= v48)
        v130 = v129;
      else
        v130 = *(_QWORD *)(result + 32);
      LOWORD(_S7) = 15360;
      if (v24)
      {
        LOWORD(_S7) = *(_WORD *)(v130 + 6);
        __asm { FCVT            S16, H7 }
        if (_S16 >= 1.0)
          _S7 = a5;
        __asm { FCVT            S16, H7 }
        if (_S16 <= 0.0)
          _S7 = 0.0;
      }
      _D17.i32[0] = *(_DWORD *)v130;
      _H16 = *(_WORD *)(v130 + 4);
      if (v14)
      {
        v58 = *(_DWORD *)(v14 + (((unint64_t)a2 >> 26) & 0x3C | (a3 >> 22) & 0x3C0));
        v133 = v58 & 0xF;
        if ((v58 & 0xF) != 0)
        {
          v139 = *(unsigned int **)(result + 264);
          v140 = *v139;
          if (v26 + 1 != a4 && v26 != 1 && v142 != 1 && v140 == 3 && v133 < 3)
            v58 |= 3u;
          v36 = -1;
          if (v140 < v133)
            *v139 = v133;
          goto LABEL_40;
        }
      }
      __asm { FCVT            S18, H17 }
      _H17 = _D17.i16[1];
      __asm
      {
        FCVT            S17, H17
        FCVT            S16, H16
      }
      _S16 = (float)((float)(_S17 * 0.59) + (float)(_S18 * 0.3)) + (float)(_S16 * 0.11);
      __asm { FCVT            H16, S16 }
      *(v125 - 1) = LOWORD(_S16);
      *v125 = LOWORD(_S7);
      *(_BYTE *)++v22 = -1;
      v125 += 2;
      a2 += v19;
      v126 -= v19;
      a3 += v20;
      v127 -= v20;
      if (!--v26)
        return result;
    }
  }
  return result;
}

void Wf16_sample_CMYKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  _CGHandleAssert("Wf16_sample_CMYKF", 13521, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_white_float16.cc", "", "Unimplemented", a6, a7, a8, vars0);
}

void Wf16_sample_CMYKf(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  _CGHandleAssert("Wf16_sample_CMYKf", 13525, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_white_float16.cc", "", "Unimplemented", a6, a7, a8, vars0);
}

_DWORD *Wf16_pattern(uint64_t a1, _DWORD *a2, unsigned int a3, int a4, float *a5, float a6)
{
  float *v9;
  float v10;
  int v13;
  float v14;
  char *v21;

  v9 = *(float **)(*(_QWORD *)a1 + 64);
  _S10 = *v9;
  v10 = v9[1];
  if (!a2 || a3 <= 3)
  {
    a2 = malloc_type_malloc(0x34uLL, 0x705560E0uLL);
    if (!a2)
      return a2;
  }
  if (_S10 <= a6)
    _S0 = a6;
  else
    _S0 = _S10;
  if (v10 < a6)
    _S0 = v10;
  if (a5)
    v13 = a4;
  else
    v13 = 0;
  switch(v13)
  {
    case 1:
      v14 = *a5;
      goto LABEL_18;
    case 4:
      v14 = (float)(v10 - (float)((float)((float)(*a5 * v9[2]) + (float)(a5[1] * v9[3])) + (float)(a5[2] * v9[4])))
          - a5[3];
      goto LABEL_18;
    case 3:
      v14 = (float)((float)(*a5 * v9[2]) + (float)(a5[1] * v9[3])) + (float)(a5[2] * v9[4]);
LABEL_18:
      _S10 = _S0 * v14;
      break;
  }
  *(_OWORD *)a2 = xmmword_185004C60;
  a2[6] = 0;
  *((_QWORD *)a2 + 2) = 1;
  __asm { FCVT            H1, S10 }
  *((_WORD *)a2 + 24) = _H1;
  __asm { FCVT            H0, S0 }
  *((_WORD *)a2 + 25) = _H0;
  v21 = (char *)a2 + 50;
  if (!_NF)
    v21 = 0;
  *((_QWORD *)a2 + 4) = a2 + 12;
  *((_QWORD *)a2 + 5) = v21;
  return a2;
}

uint64_t Wf16_mark(uint64_t a1, __n128 a2)
{
  return Wf16_mark_inner(*(_QWORD *)(*(_QWORD *)a1 + 56), a2);
}

uint64_t Wf16_mark_inner(uint64_t a1, __n128 a2)
{
  uint64_t v3;
  uint64_t v4;
  double v6;
  __n128 v7;
  int32x2_t v8;
  __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint16x4_t *v18;
  int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  size_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _WORD *v41;
  int v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  float16x4_t *v51;
  unint64_t v52;
  __n128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __n128 v58;
  __int128 v59;
  int v60;
  __int16 *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _WORD *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  _WORD *v76;
  char *v77;
  void *v78;
  unint64_t v79;
  uint64_t v80;
  _WORD *v81;
  unsigned int v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  int v86;
  _WORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  _WORD *v94;
  int v95;
  _WORD *v106;
  uint64_t v107;
  _WORD *v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  _WORD *v122;
  uint64_t v123;
  _WORD *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  float v131;
  _WORD *v139;
  uint64_t v140;
  _WORD *v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  _WORD *v146;
  int v147;
  _WORD *v158;
  uint64_t v159;
  _WORD *v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  int v164;
  float v167;
  _WORD *v177;
  uint64_t v178;
  _WORD *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  int v185;
  _WORD *v193;
  uint64_t v194;
  _WORD *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  int v201;
  float v204;
  _WORD *v210;
  uint64_t v211;
  _WORD *v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  int v217;
  _WORD *v228;
  uint64_t v229;
  _WORD *v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  int v235;
  _WORD *v246;
  uint64_t v247;
  _WORD *v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  int v252;
  float v257;
  float v260;
  float v262;
  _WORD *v266;
  uint64_t v267;
  _WORD *v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  int v272;
  _WORD *v284;
  uint64_t v285;
  _WORD *v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  _WORD *v290;
  int v291;
  float v300;
  float v302;
  _WORD *v306;
  uint64_t v307;
  _WORD *v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  int v312;
  _WORD *v325;
  uint64_t v326;
  _WORD *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  int v334;
  __int16 v339;
  _WORD *v341;
  uint64_t v342;
  _WORD *v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  int v347;
  float v356;
  float v358;
  _WORD *v362;
  uint64_t v363;
  _WORD *v364;
  uint64_t v365;
  uint64_t v366;
  int v367;
  int v368;
  float v377;
  float v379;
  _WORD *v383;
  uint64_t v384;
  _WORD *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  __int16 v397;
  _WORD *v399;
  uint64_t v400;
  _WORD *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  int v405;
  uint64_t v406;
  uint64_t v407;
  int v408;
  __int16 v413;
  _WORD *v415;
  uint64_t v416;
  _WORD *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  int v421;
  uint64_t v422;
  uint64_t v423;
  int v424;
  __int16 v429;
  _WORD *v431;
  uint64_t v432;
  _WORD *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  int v437;
  uint64_t v438;
  uint64_t v439;
  int v440;
  __int16 v445;
  _WORD *v447;
  uint64_t v448;
  _WORD *v449;
  uint64_t v450;
  uint64_t v451;
  int v452;
  int v453;
  float v462;
  float v463;
  float v464;
  float v465;
  float v466;
  float v467;
  _WORD *v472;
  uint64_t v473;
  _WORD *v474;
  uint64_t v475;
  uint64_t v476;
  int v477;
  int v478;
  _WORD *v491;
  uint64_t v492;
  _WORD *v493;
  uint64_t v494;
  uint64_t v495;
  int v496;
  int v497;
  float v506;
  float v507;
  float v508;
  _WORD *v513;
  uint64_t v514;
  _WORD *v515;
  uint64_t v516;
  uint64_t v517;
  int v518;
  int v519;
  float v528;
  float v529;
  float v530;
  _WORD *v535;
  uint64_t v536;
  _WORD *v537;
  uint64_t v538;
  uint64_t v539;
  int v540;
  int v541;
  float v550;
  float v551;
  _WORD *v556;
  uint64_t v557;
  _WORD *v558;
  uint64_t v559;
  uint64_t v560;
  int v561;
  int v562;
  float v571;
  float v572;
  _WORD *v577;
  uint64_t v578;
  _WORD *v579;
  uint64_t v580;
  uint64_t v581;
  int v582;
  _WORD *v583;
  int v584;
  _WORD *v593;
  uint64_t v594;
  _WORD *v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  int v599;
  int v600;
  _WORD *v606;
  uint64_t v607;
  _WORD *v608;
  uint64_t v609;
  uint64_t v610;
  int v611;
  int v612;
  _WORD *v619;
  uint64_t v620;
  _WORD *v621;
  uint64_t v622;
  uint64_t v623;
  int v624;
  int v625;
  float v628;
  _WORD *v633;
  uint64_t v634;
  _WORD *v635;
  uint64_t v636;
  uint64_t v637;
  int v638;
  int v639;
  float v644;
  _WORD *v647;
  uint64_t v648;
  _WORD *v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  int v653;
  int v654;
  _WORD *v660;
  uint64_t v661;
  _WORD *v662;
  uint64_t v663;
  uint64_t v664;
  uint8x8_t v665;
  int v666;
  _BYTE *v667;
  int v668;
  uint64_t v669;
  uint64_t v670;
  int v671;
  int v672;
  _WORD *v673;
  uint64_t v674;
  _WORD *v675;
  uint64_t v676;
  uint64_t v677;
  int v678;
  int v679;
  _WORD *v680;
  uint64_t v681;
  _WORD *v682;
  uint64_t v683;
  uint64_t v684;
  int v685;
  int v686;
  _WORD *v687;
  uint64_t v688;
  _WORD *v689;
  uint64_t v690;
  uint64_t v691;
  int v692;
  int v693;
  _WORD *v694;
  unint64_t v695;
  int v696;
  int v697;
  unint64_t v698;
  uint64_t v699;
  unint64_t v700;
  unint64_t v701;
  int v702;
  uint64_t v703;
  char *v704;
  unint64_t v705;
  char *v706;
  uint64_t v707;
  int v708;
  int v709;
  int v710;
  uint64_t v711;
  char *v712;
  uint64_t v713;
  char *v714;
  unint64_t v715;
  uint64_t v716;
  uint64_t v717;
  char *v718;
  uint64_t v719;
  int v720;
  unint64_t v721;
  uint64_t v722;
  unsigned int v723;
  int v724;
  uint64_t v725;
  char *v726;
  uint64_t v727;
  uint64_t v728;
  int v729;
  unsigned __int16 *v730;
  signed int v731;
  unsigned __int16 *v732;
  int v733;
  unsigned int v734;
  unsigned int v735;
  unsigned int v736;
  int v754;
  unsigned int v755;
  int v761;
  int v763;
  int v769;
  int v770;
  float v773;
  int v777;
  int v778;
  int v786;
  int v787;
  float v790;
  int v796;
  uint64_t v797;
  int v798;
  int v804;
  int v808;
  uint64_t v809;
  int v810;
  int v816;
  int v821;
  int v822;
  int v830;
  int v831;
  float v839;
  int v840;
  uint64_t v841;
  int v842;
  float v848;
  int v851;
  int v855;
  uint64_t v856;
  int v858;
  int v867;
  int v868;
  float v873;
  int v878;
  int v879;
  int v889;
  __int16 v892;
  int v894;
  int v895;
  float v900;
  int v905;
  int v906;
  float v911;
  int v915;
  __int16 v918;
  int v919;
  __int16 v922;
  int v923;
  __int16 v926;
  int v927;
  __int16 v930;
  int v932;
  int v933;
  float v938;
  float v939;
  float v940;
  float v941;
  float v942;
  int v947;
  int v948;
  int v957;
  int v958;
  float v963;
  float v964;
  int v969;
  int v970;
  float v975;
  float v976;
  int v981;
  int v982;
  float v987;
  float v988;
  int v993;
  int v994;
  float v999;
  float v1000;
  float32x4_t v1004;
  float32x4_t v1005;
  unsigned int v1006;
  unsigned int v1007;
  int v1008;
  unsigned int v1009;
  int v1014;
  uint64_t v1018;
  __int16 *v1019;
  uint64_t v1020;
  int v1021;
  int v1022;
  unint64_t v1023;
  unint64_t v1024;
  char *v1025;
  int v1026;
  int v1027;
  uint64_t v1028;
  uint64_t v1029;
  unint64_t v1030;
  int v1031;
  int v1032;
  int v1033;
  int v1034;
  int v1035;
  unint64_t v1036;
  int v1037;
  int v1038;
  int v1039;
  int v1040;
  int v1041;
  uint64_t v1042;
  _WORD *v1043;
  unint64_t v1044;
  int v1045[2];
  int v1046[2];
  int v1047[2];
  int v1048[2];
  int v1049[2];
  int v1050;
  unint64_t v1051;
  _WORD *v1052;
  unsigned int v1053;
  unint64_t v1054;
  unint64_t v1055;
  unint64_t v1056;
  int32x2_t v1057;
  unint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  unint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  int v1064[4];
  __int128 v1065;
  __int128 v1066;
  __int128 v1067;
  __int128 v1068;
  __int128 v1069;
  __int128 v1070;
  __int128 v1071;
  __int128 v1072;
  __int128 v1073;
  _DWORD v1074[1024];
  uint64_t v1075;

  v3 = MEMORY[0x1E0C80A78](a1, a2);
  v1075 = *MEMORY[0x1E0C80C00];
  v9 = *(__int16 **)(v4 + 96);
  v10 = *(_QWORD *)(v4 + 48);
  v11 = *(unsigned int *)(v3 + 16 * *(_DWORD *)v4 + 8 * (v9 == 0) + 4 * (v10 == 0));
  if ((int)v11 > 27)
    return 0xFFFFFFFFLL;
  v13 = v4;
  v14 = *(unsigned int *)(v4 + 4);
  v15 = v14 - 1;
  if ((int)v14 < 1)
    return 0;
  v16 = *(_DWORD *)(v4 + 8);
  v17 = (v16 - 1);
  if (v16 < 1)
    return 0;
  v18 = *(uint16x4_t **)(v4 + 136);
  if ((*(_DWORD *)v4 & 0xFF0000) == 0x50000 || !v18)
  {
    v20 = *(_DWORD *)v4 & 0xFF00;
    v1020 = *(unsigned int *)(v3 + 16 * *(_DWORD *)v4 + 8 * (v9 == 0) + 4 * (v10 == 0));
    v1018 = v4;
    if (v20 == 1024)
    {
      v1074[0] = *(_DWORD *)(v4 + 4);
      v1064[0] = v16;
      if (v9)
        _H10 = *v9;
      else
        _H10 = 15360;
      v32 = *(_QWORD *)(v4 + 40);
      __asm { FCVT            S8, H10 }
      _Q0.n128_u32[0] = 1.0;
      v38 = (unint64_t)*(int *)(v4 + 28) >> 1;
      v40 = *(int *)(v4 + 12);
      v39 = *(int *)(v4 + 16);
      if (v10)
      {
        v1061 = (unint64_t)*(int *)(v4 + 32) >> 1;
        v1059 = v10 + 2 * (v40 + v1061 * v39);
        v1053 = 1;
      }
      else
      {
        v1059 = 0;
        v1061 = 0;
        v1053 = 0;
      }
      LOWORD(_S9) = **(_WORD **)(v4 + 88);
      *(float *)v8.i32 = 1.0 - _S8;
      v46 = v32 + 2 * (v40 + v39 * v38);
      v1057 = v8;
      v1051 = (unint64_t)*(int *)(v4 + 28) >> 1;
      v1056 = v46;
      if (v18)
      {
        shape_enum_clip_alloc(v3, v4, (int *)v18, 1, 1, 1, *(_DWORD *)(v4 + 104), *(_DWORD *)(v4 + 108), v14, v16);
        v31 = v47;
        v48 = v1059;
        v49 = v1061;
        if (v47)
          goto LABEL_1319;
        return 1;
      }
      v31 = 0;
      if (v10)
        v50 = v14;
      else
        v50 = 0;
      v48 = v1059;
      v49 = v1061 - v50;
      v51 = (float16x4_t *)(v32 + 2 * (v40 + v39 * v38));
      v52 = v14;
LABEL_970:
      v46 = v38 - v52;
      v720 = v14;
      switch((int)v11)
      {
        case 0:
          v721 = v38;
          v722 = v46 + (int)v14;
          v723 = v1064[0];
          v724 = v14;
          v725 = v1064[0] - 1;
          v726 = (char *)v51 + 2 * ((v722 * v725) & (v722 >> 63));
          if (v722 < 0)
            v722 = -v722;
          CGBlt_fillBytes(2 * v724, v1064[0], 0, v726, 2 * v722);
          if (v10)
          {
            v727 = v49 + v724;
            v48 += 2 * ((v727 * v725) & (v727 >> 63));
            if (v727 >= 0)
              v49 += v724;
            else
              v49 = -v727;
            CGBlt_fillBytes(2 * v724, v723, 0, (char *)v48, 2 * v49);
          }
          goto LABEL_990;
        case 1:
          v721 = v38;
          v728 = v46 + (int)v14;
          if (v728 < 0)
          {
            v51 = (float16x4_t *)((char *)v51 + 2 * v728 * (v1064[0] - 1));
            v728 = -v728;
          }
          v729 = 0;
          v730 = *(unsigned __int16 **)(v1018 + 88);
          if (v730)
            v729 = *v730;
          v731 = v1064[0];
          CGBlt_fillBytes(2 * v14, v1064[0], v729 | (v729 << 16), (char *)v51, 2 * v728);
          if (v10)
          {
            v732 = (unsigned __int16 *)&_W_float16_alpha;
            if (*(_QWORD *)(v1018 + 96))
              v732 = *(unsigned __int16 **)(v1018 + 96);
            v48 += 2 * (((v49 + (int)v14) * (v731 - 1)) & ((uint64_t)(v49 + (int)v14) >> 63));
            if ((uint64_t)(v49 + (int)v14) >= 0)
              v49 += (int)v14;
            else
              v49 = -(uint64_t)(v49 + (int)v14);
            CGBlt_fillBytes(2 * v14, v731, *v732 | (*v732 << 16), (char *)v48, 2 * v49);
          }
          LODWORD(v11) = v1020;
LABEL_990:
          v38 = v721;
          goto LABEL_1316;
        case 2:
          v733 = v1064[0];
          v734 = v14 >> 2;
          __asm { FCVT            S0, H9 }
          if (v10)
          {
            v735 = v734 + 1;
            do
            {
              if ((int)v14 < 4)
              {
                v754 = v14;
              }
              else
              {
                v736 = v735;
                do
                {
                  _H1 = v51->i16[0];
                  __asm { FCVT            S1, H1 }
                  _S1 = _Q0.n128_f32[0] + (float)(_S1 * *(float *)v8.i32);
                  __asm { FCVT            H1, S1 }
                  v51->i16[0] = LOWORD(_S1);
                  LOWORD(_S1) = *(_WORD *)v48;
                  __asm { FCVT            S1, H1 }
                  _S1 = _S8 + (float)(_S1 * *(float *)v8.i32);
                  __asm { FCVT            H1, S1 }
                  *(_WORD *)v48 = LOWORD(_S1);
                  LOWORD(_S1) = v51->i16[1];
                  __asm { FCVT            S1, H1 }
                  _S1 = _Q0.n128_f32[0] + (float)(_S1 * *(float *)v8.i32);
                  __asm { FCVT            H1, S1 }
                  v51->i16[1] = LOWORD(_S1);
                  LOWORD(_S1) = *(_WORD *)(v48 + 2);
                  __asm { FCVT            S1, H1 }
                  _S1 = _S8 + (float)(_S1 * *(float *)v8.i32);
                  __asm { FCVT            H1, S1 }
                  *(_WORD *)(v48 + 2) = LOWORD(_S1);
                  LOWORD(_S1) = v51->i16[2];
                  __asm { FCVT            S1, H1 }
                  _S1 = _Q0.n128_f32[0] + (float)(_S1 * *(float *)v8.i32);
                  __asm { FCVT            H1, S1 }
                  v51->i16[2] = LOWORD(_S1);
                  LOWORD(_S1) = *(_WORD *)(v48 + 4);
                  __asm { FCVT            S1, H1 }
                  _S1 = _S8 + (float)(_S1 * *(float *)v8.i32);
                  __asm { FCVT            H1, S1 }
                  *(_WORD *)(v48 + 4) = LOWORD(_S1);
                  LOWORD(_S1) = v51->i16[3];
                  __asm { FCVT            S1, H1 }
                  _S1 = _Q0.n128_f32[0] + (float)(_S1 * *(float *)v8.i32);
                  __asm { FCVT            H1, S1 }
                  v51->i16[3] = LOWORD(_S1);
                  LOWORD(_S1) = *(_WORD *)(v48 + 6);
                  __asm { FCVT            S1, H1 }
                  _S1 = _S8 + (float)(_S1 * *(float *)v8.i32);
                  __asm { FCVT            H1, S1 }
                  *(_WORD *)(v48 + 6) = LOWORD(_S1);
                  ++v51;
                  --v736;
                  v48 += 8 * v1053;
                }
                while (v736 > 1);
                v754 = v14 & 3;
              }
              if (v754 >= 1)
              {
                v755 = v754 + 1;
                do
                {
                  _H1 = v51->i16[0];
                  __asm { FCVT            S1, H1 }
                  _S1 = _Q0.n128_f32[0] + (float)(_S1 * *(float *)v8.i32);
                  __asm { FCVT            H1, S1 }
                  v51->i16[0] = LOWORD(_S1);
                  v51 = (float16x4_t *)((char *)v51 + 2);
                  LOWORD(_S1) = *(_WORD *)v48;
                  __asm { FCVT            S1, H1 }
                  _S1 = _S8 + (float)(_S1 * *(float *)v8.i32);
                  __asm { FCVT            H1, S1 }
                  *(_WORD *)v48 = LOWORD(_S1);
                  v48 += 2 * v1053;
                  --v755;
                }
                while (v755 > 1);
              }
              v51 = (float16x4_t *)((char *)v51 + 2 * v46);
              v48 += 2 * v49;
              --v733;
            }
            while (v733);
          }
          else
          {
            v1004 = (float32x4_t)vdupq_lane_s32(v8, 0);
            v1005 = (float32x4_t)vdupq_lane_s32((int32x2_t)_Q0.n128_u64[0], 0);
            v1006 = v734 + 1;
            do
            {
              if ((int)v14 < 4)
              {
                v1008 = v14;
              }
              else
              {
                v1007 = v1006;
                do
                {
                  *v51 = vcvt_f16_f32(vmlaq_f32(v1005, v1004, vcvtq_f32_f16(*v51)));
                  ++v51;
                  --v1007;
                  v48 += 8 * v1053;
                }
                while (v1007 > 1);
                v1008 = v14 & 3;
              }
              if (v1008 >= 1)
              {
                v1009 = v1008 + 1;
                do
                {
                  _H3 = v51->i16[0];
                  __asm { FCVT            S3, H3 }
                  _S3 = _Q0.n128_f32[0] + (float)(_S3 * *(float *)v8.i32);
                  __asm { FCVT            H3, S3 }
                  v51->i16[0] = LOWORD(_S3);
                  v51 = (float16x4_t *)((char *)v51 + 2);
                  v48 += 2 * v1053;
                  --v1009;
                }
                while (v1009 > 1);
              }
              v51 = (float16x4_t *)((char *)v51 + 2 * v46);
              v48 += 2 * v49;
              --v733;
            }
            while (v733);
          }
          goto LABEL_1315;
        case 3:
          v761 = v1064[0];
          __asm { FCVT            S1, H9 }
          do
          {
            v763 = v14;
            do
            {
              _H3 = *(_WORD *)v48;
              __asm { FCVT            S3, H3 }
              if (_S3 <= 0.0)
              {
                *(_WORD *)v48 = 0;
                v51->i16[0] = 0;
              }
              else if (_S3 >= 1.0)
              {
                v51->i16[0] = _S9;
                *(_WORD *)v48 = _H10;
              }
              else
              {
                _S4 = _S1 * _S3;
                __asm { FCVT            H4, S4 }
                v51->i16[0] = LOWORD(_S4);
                _S3 = _S8 * _S3;
                __asm { FCVT            H3, S3 }
                *(_WORD *)v48 = LOWORD(_S3);
              }
              v51 = (float16x4_t *)((char *)v51 + 2);
              v48 += 2 * v1053;
              --v763;
            }
            while (v763);
            v51 = (float16x4_t *)((char *)v51 + 2 * v46);
            v48 += 2 * v49;
            --v761;
          }
          while (v761);
          goto LABEL_1315;
        case 4:
          __asm { FCVT            S0, H9; jumptable 0000000184DF12E8 case 4 }
          v769 = v1064[0];
          do
          {
            v770 = v14;
            do
            {
              _H3 = *(_WORD *)v48;
              __asm { FCVT            S3, H3 }
              v773 = 1.0 - _S3;
              if (v773 <= 0.0)
              {
                *(_WORD *)v48 = 0;
                v51->i16[0] = 0;
              }
              else if (v773 >= 1.0)
              {
                v51->i16[0] = _S9;
                *(_WORD *)v48 = _H10;
              }
              else
              {
                _S4 = v773 * _S0;
                __asm { FCVT            H4, S4 }
                v51->i16[0] = LOWORD(_S4);
                _S3 = v773 * _S8;
                __asm { FCVT            H3, S3 }
                *(_WORD *)v48 = LOWORD(_S3);
              }
              v51 = (float16x4_t *)((char *)v51 + 2);
              v48 += 2 * v1053;
              --v770;
            }
            while (v770);
            v51 = (float16x4_t *)((char *)v51 + 2 * v46);
            v48 += 2 * v49;
            --v769;
          }
          while (v769);
          goto LABEL_1315;
        case 5:
          __asm { FCVT            S0, H9; jumptable 0000000184DF12E8 case 5 }
          v777 = v1064[0];
          do
          {
            v778 = v14;
            do
            {
              _H1 = *(_WORD *)v48;
              __asm { FCVT            S1, H1 }
              _H2 = v51->i16[0];
              __asm { FCVT            S2, H2 }
              _S2 = (float)(*(float *)v8.i32 * _S2) + (float)(_S0 * _S1);
              __asm { FCVT            H2, S2 }
              v51->i16[0] = LOWORD(_S2);
              v51 = (float16x4_t *)((char *)v51 + 2);
              _S1 = (float)(*(float *)v8.i32 * _S1) + (float)(_S8 * _S1);
              __asm { FCVT            H1, S1 }
              *(_WORD *)v48 = LOWORD(_S1);
              v48 += 2 * v1053;
              --v778;
            }
            while (v778);
            v51 = (float16x4_t *)((char *)v51 + 2 * v46);
            v48 += 2 * v49;
            --v777;
          }
          while (v777);
          goto LABEL_1315;
        case 6:
          __asm { FCVT            S0, H9; jumptable 0000000184DF12E8 case 6 }
          v786 = v1064[0];
          while (1)
          {
            v787 = v14;
            do
            {
              _H2 = *(_WORD *)v48;
              __asm { FCVT            S2, H2 }
              v790 = 1.0 - _S2;
              if ((float)(1.0 - _S2) >= 1.0)
              {
                v51->i16[0] = _S9;
                _H2 = _H10;
              }
              else
              {
                if (v790 <= 0.0)
                  goto LABEL_1035;
                _H4 = v51->i16[0];
                __asm { FCVT            S4, H4 }
                _S4 = _S4 + (float)(_S0 * v790);
                __asm { FCVT            H4, S4 }
                v51->i16[0] = LOWORD(_S4);
                _S2 = _S2 + (float)(_S8 * v790);
                __asm { FCVT            H2, S2 }
              }
              *(_WORD *)v48 = _H2;
LABEL_1035:
              v51 = (float16x4_t *)((char *)v51 + 2);
              v48 += 2 * v1053;
              --v787;
            }
            while (v787);
            v51 = (float16x4_t *)((char *)v51 + 2 * v46);
            v48 += 2 * v49;
            if (!--v786)
            {
LABEL_1315:
              v1064[0] = 0;
LABEL_1316:
              v46 = v1056;
LABEL_1317:
              if (!v31)
                return 1;
              v1063 = 0;
LABEL_1319:
              if (!shape_enum_clip_next((uint64_t)v31, (int *)&v1063 + 1, &v1063, v1074, v1064))
                goto LABEL_66;
              v51 = (float16x4_t *)(v46 + 2 * v38 * (int)v1063 + 2 * SHIDWORD(v1063));
              v52 = v1074[0];
              if (v10)
              {
                v48 = v1059 + 2 * v1061 * (int)v1063 + 2 * SHIDWORD(v1063);
                v49 = v1061 - v1074[0];
              }
              LODWORD(v14) = v1074[0];
              v8 = v1057;
              goto LABEL_970;
            }
          }
        case 7:
          v796 = v1064[0];
          v797 = 2 * v1053;
          if (v10)
          {
            do
            {
              v798 = v14;
              do
              {
                _H0 = v51->i16[0];
                __asm { FCVT            S0, H0 }
                _S0 = _S8 * _S0;
                __asm { FCVT            H0, S0 }
                v51->i16[0] = LOWORD(_S0);
                v51 = (float16x4_t *)((char *)v51 + 2);
                LOWORD(_S0) = *(_WORD *)v48;
                __asm { FCVT            S0, H0 }
                _S0 = _S8 * _S0;
                __asm { FCVT            H0, S0 }
                *(_WORD *)v48 = LOWORD(_S0);
                v48 += v797;
                --v798;
              }
              while (v798);
              v51 = (float16x4_t *)((char *)v51 + 2 * v46);
              v48 += 2 * v49;
              --v796;
            }
            while (v796);
          }
          else
          {
            do
            {
              v804 = v14;
              do
              {
                _H0 = v51->i16[0];
                __asm { FCVT            S0, H0 }
                _S0 = _S8 * _S0;
                __asm { FCVT            H0, S0 }
                v51->i16[0] = LOWORD(_S0);
                v51 = (float16x4_t *)((char *)v51 + 2);
                v48 += v797;
                --v804;
              }
              while (v804);
              v51 = (float16x4_t *)((char *)v51 + 2 * v46);
              v48 += 2 * v49;
              --v796;
            }
            while (v796);
          }
          goto LABEL_1315;
        case 8:
          v808 = v1064[0];
          v809 = 2 * v1053;
          if (v10)
          {
            do
            {
              v810 = v14;
              do
              {
                _H0 = v51->i16[0];
                __asm { FCVT            S0, H0 }
                _S0 = *(float *)v8.i32 * _S0;
                __asm { FCVT            H0, S0 }
                v51->i16[0] = LOWORD(_S0);
                v51 = (float16x4_t *)((char *)v51 + 2);
                LOWORD(_S0) = *(_WORD *)v48;
                __asm { FCVT            S0, H0 }
                _S0 = *(float *)v8.i32 * _S0;
                __asm { FCVT            H0, S0 }
                *(_WORD *)v48 = LOWORD(_S0);
                v48 += v809;
                --v810;
              }
              while (v810);
              v51 = (float16x4_t *)((char *)v51 + 2 * v46);
              v48 += 2 * v49;
              --v808;
            }
            while (v808);
          }
          else
          {
            do
            {
              v816 = v14;
              do
              {
                _H0 = v51->i16[0];
                __asm { FCVT            S0, H0 }
                _S0 = *(float *)v8.i32 * _S0;
                __asm { FCVT            H0, S0 }
                v51->i16[0] = LOWORD(_S0);
                v51 = (float16x4_t *)((char *)v51 + 2);
                v48 += v809;
                --v816;
              }
              while (v816);
              v51 = (float16x4_t *)((char *)v51 + 2 * v46);
              v48 += 2 * v49;
              --v808;
            }
            while (v808);
          }
          goto LABEL_1315;
        case 9:
          __asm { FCVT            S0, H9; jumptable 0000000184DF12E8 case 9 }
          v821 = v1064[0];
          do
          {
            v822 = v14;
            do
            {
              _H2 = *(_WORD *)v48;
              __asm { FCVT            S2, H2 }
              _H4 = v51->i16[0];
              __asm { FCVT            S4, H4 }
              _S4 = (float)(_S8 * _S4) + (float)(_S0 * (float)(1.0 - _S2));
              __asm { FCVT            H4, S4 }
              v51->i16[0] = LOWORD(_S4);
              v51 = (float16x4_t *)((char *)v51 + 2);
              _S2 = (float)(_S8 * _S2) + (float)(_S8 * (float)(1.0 - _S2));
              __asm { FCVT            H2, S2 }
              *(_WORD *)v48 = LOWORD(_S2);
              v48 += 2 * v1053;
              --v822;
            }
            while (v822);
            v51 = (float16x4_t *)((char *)v51 + 2 * v46);
            v48 += 2 * v49;
            --v821;
          }
          while (v821);
          goto LABEL_1315;
        case 10:
          __asm { FCVT            S0, H9; jumptable 0000000184DF12E8 case 10 }
          v830 = v1064[0];
          do
          {
            v831 = v14;
            do
            {
              _H2 = *(_WORD *)v48;
              __asm { FCVT            S2, H2 }
              _H4 = v51->i16[0];
              __asm { FCVT            S4, H4 }
              _S4 = (float)(*(float *)v8.i32 * _S4) + (float)(_S0 * (float)(1.0 - _S2));
              __asm { FCVT            H4, S4 }
              v51->i16[0] = LOWORD(_S4);
              v51 = (float16x4_t *)((char *)v51 + 2);
              _S2 = (float)(*(float *)v8.i32 * _S2) + (float)(_S8 * (float)(1.0 - _S2));
              __asm { FCVT            H2, S2 }
              *(_WORD *)v48 = LOWORD(_S2);
              v48 += 2 * v1053;
              --v831;
            }
            while (v831);
            v51 = (float16x4_t *)((char *)v51 + 2 * v46);
            v48 += 2 * v49;
            --v830;
          }
          while (v830);
          goto LABEL_1315;
        case 11:
          __asm { FCVT            S0, H9; jumptable 0000000184DF12E8 case 11 }
          v839 = _S8 - _S0;
          v840 = v1064[0];
          v841 = 2 * v1053;
          if (v10)
          {
            do
            {
              v842 = v14;
              do
              {
                _H2 = *(_WORD *)v48;
                __asm { FCVT            S2, H2 }
                _S3 = _S8 + _S2;
                _H4 = v51->i16[0];
                __asm { FCVT            S4, H4 }
                v848 = v839 + (float)(_S2 - _S4);
                if (_S3 > 1.0)
                  _S3 = 1.0;
                __asm { FCVT            H4, S3 }
                *(_WORD *)v48 = _H4;
                _S2 = _S3 - v848;
                __asm { FCVT            H2, S2 }
                v51->i16[0] = LOWORD(_S2);
                v51 = (float16x4_t *)((char *)v51 + 2);
                v48 += v841;
                --v842;
              }
              while (v842);
              v51 = (float16x4_t *)((char *)v51 + 2 * v46);
              v48 += 2 * v49;
              --v840;
            }
            while (v840);
          }
          else
          {
            do
            {
              v851 = v14;
              do
              {
                _H2 = v51->i16[0];
                __asm { FCVT            S2, H2 }
                _S2 = 1.0 - (float)(v839 + (float)(1.0 - _S2));
                __asm { FCVT            H2, S2 }
                v51->i16[0] = LOWORD(_S2);
                v51 = (float16x4_t *)((char *)v51 + 2);
                v48 += v841;
                --v851;
              }
              while (v851);
              v51 = (float16x4_t *)((char *)v51 + 2 * v46);
              v48 += 2 * v49;
              --v840;
            }
            while (v840);
          }
          goto LABEL_1315;
        case 12:
          v855 = v1064[0];
          v856 = 2 * v1053;
          if (v10)
          {
            __asm { FCVT            S1, H9 }
            do
            {
              v858 = v14;
              do
              {
                _H2 = *(_WORD *)v48;
                __asm { FCVT            S2, H2 }
                _S2 = _S8 + _S2;
                _H3 = v51->i16[0];
                if (_S2 > 1.0)
                  _S2 = 1.0;
                __asm { FCVT            S3, H3 }
                _S3 = _S1 + _S3;
                __asm { FCVT            H3, S3 }
                v51->i16[0] = LOWORD(_S3);
                v51 = (float16x4_t *)((char *)v51 + 2);
                __asm { FCVT            H2, S2 }
                *(_WORD *)v48 = _H2;
                v48 += v856;
                --v858;
              }
              while (v858);
              v51 = (float16x4_t *)((char *)v51 + 2 * v46);
              v48 += 2 * v49;
              --v855;
            }
            while (v855);
          }
          else
          {
            __asm { FCVT            S0, H9 }
            do
            {
              v1014 = v14;
              do
              {
                _H1 = v51->i16[0];
                __asm { FCVT            S1, H1 }
                _S1 = _S0 + _S1;
                __asm { FCVT            H1, S1 }
                v51->i16[0] = LOWORD(_S1);
                v51 = (float16x4_t *)((char *)v51 + 2);
                v48 += v856;
                --v1014;
              }
              while (v1014);
              v51 = (float16x4_t *)((char *)v51 + 2 * v46);
              v48 += 2 * v49;
              --v855;
            }
            while (v855);
          }
          goto LABEL_1315;
        case 13:
          if (_S8 <= 0.0)
            goto LABEL_1316;
          __asm { FCVT            S0, H9 }
          v867 = v1064[0];
          while (1)
          {
            v868 = v14;
            do
            {
              if (v10)
              {
                _H2 = *(_WORD *)v48;
                __asm { FCVT            S2, H2 }
                if (_S2 <= 0.0)
                {
                  v51->i16[0] = _S9;
                  *(_WORD *)v48 = _H10;
                  goto LABEL_1099;
                }
              }
              else
              {
                _S2 = 1.0;
              }
              _H3 = v51->i16[0];
              __asm { FCVT            S3, H3 }
              v873 = _S0 * _S3;
              _S3 = (float)(_S0 * _S3) + (float)(_S3 * *(float *)v8.i32);
              if (_S8 == 1.0)
                _S3 = v873;
              if (_S2 != 1.0)
                _S3 = _S3 + (float)(_S0 * (float)(1.0 - _S2));
              __asm { FCVT            H3, S3 }
              if (v10)
              {
                _S2 = (float)(_S2 + _S8) - (float)(_S2 * _S8);
                __asm { FCVT            H2, S2 }
                v51->i16[0] = _H3;
                *(_WORD *)v48 = LOWORD(_S2);
              }
              else
              {
                v51->i16[0] = _H3;
              }
LABEL_1099:
              v51 = (float16x4_t *)((char *)v51 + 2);
              v48 += 2 * v1053;
              --v868;
            }
            while (v868);
            v51 = (float16x4_t *)((char *)v51 + 2 * v46);
            v48 += 2 * v49;
            if (!--v867)
              goto LABEL_1315;
          }
        case 14:
          if (_S8 <= 0.0)
            goto LABEL_1316;
          __asm { FCVT            S0, H9 }
          v878 = v1064[0];
          do
          {
            v879 = v14;
            do
            {
              if (v10)
              {
                _H2 = *(_WORD *)v48;
                __asm { FCVT            S2, H2 }
                if (_S2 <= 0.0)
                {
                  v51->i16[0] = _S9;
                  *(_WORD *)v48 = _H10;
                }
                else
                {
                  _H3 = v51->i16[0];
                  __asm { FCVT            S3, H3 }
                  _S3 = _S3 + (float)(_S0 * (float)(1.0 - _S3));
                  __asm { FCVT            H3, S3 }
                  _S2 = (float)(_S8 + _S2) - (float)(_S2 * _S8);
                  __asm { FCVT            H2, S2 }
                  v51->i16[0] = LOWORD(_S3);
                  *(_WORD *)v48 = LOWORD(_S2);
                }
              }
              else
              {
                _H2 = v51->i16[0];
                __asm { FCVT            S2, H2 }
                _S2 = _S2 + (float)(_S0 * (float)(1.0 - _S2));
                __asm { FCVT            H2, S2 }
                v51->i16[0] = LOWORD(_S2);
              }
              v51 = (float16x4_t *)((char *)v51 + 2);
              v48 += 2 * v1053;
              --v879;
            }
            while (v879);
            v51 = (float16x4_t *)((char *)v51 + 2 * v46);
            v48 += 2 * v49;
            --v878;
          }
          while (v878);
          goto LABEL_1315;
        case 15:
          if (_S8 <= 0.0)
            goto LABEL_1316;
          v889 = v1064[0];
          while (1)
          {
            if (v10)
            {
              _H0 = *(_WORD *)v48;
              __asm { FCVT            S1, H0 }
              if (_S1 <= 0.0)
              {
                v51->i16[0] = _S9;
                *(_WORD *)v48 = _H10;
              }
              else
              {
                _Q0.n128_u16[0] = v51->i16[0];
                v7.n128_u32[0] = _S9;
                _Q0.n128_u64[0] = PDAoverlayPDA(_Q0, _S1, v7, _S8);
                v51->i16[0] = _Q0.n128_u16[0];
                *(_WORD *)v48 = v892;
              }
            }
            else
            {
              _Q0.n128_u16[0] = v51->i16[0];
              v7.n128_u32[0] = _S9;
              _Q0.n128_u64[0] = PDAoverlayPDA(_Q0, 1.0, v7, _S8);
              v51->i16[0] = _Q0.n128_u16[0];
            }
            v51 = (float16x4_t *)((char *)v51 + 2);
            v48 += 2 * v1053;
            LODWORD(v14) = v14 - 1;
            if (!(_DWORD)v14)
            {
              v51 = (float16x4_t *)((char *)v51 + 2 * v46);
              v48 += 2 * v49;
              --v889;
              LODWORD(v14) = v720;
              if (!v889)
                break;
            }
          }
          goto LABEL_1200;
        case 16:
          if (_S8 <= 0.0)
            goto LABEL_1316;
          __asm { FCVT            S0, H9 }
          v894 = v1064[0];
          while (1)
          {
            v895 = v14;
            do
            {
              if (v10)
              {
                _H2 = *(_WORD *)v48;
                __asm { FCVT            S2, H2 }
                if (_S2 <= 0.0)
                {
                  v51->i16[0] = _S9;
                  *(_WORD *)v48 = _H10;
                  goto LABEL_1139;
                }
              }
              else
              {
                _S2 = 1.0;
              }
              _H3 = v51->i16[0];
              __asm { FCVT            S3, H3 }
              v900 = _S8 * _S3;
              if ((float)(_S2 * _S0) < (float)(_S8 * _S3))
                v900 = _S2 * _S0;
              _S3 = v900 + (float)(_S3 * *(float *)v8.i32);
              if (_S8 == 1.0)
                _S3 = v900;
              if (_S2 != 1.0)
                _S3 = _S3 + (float)(_S0 * (float)(1.0 - _S2));
              __asm { FCVT            H3, S3 }
              if (v10)
              {
                _S2 = (float)(_S2 + _S8) - (float)(_S2 * _S8);
                __asm { FCVT            H2, S2 }
                v51->i16[0] = _H3;
                *(_WORD *)v48 = LOWORD(_S2);
              }
              else
              {
                v51->i16[0] = _H3;
              }
LABEL_1139:
              v51 = (float16x4_t *)((char *)v51 + 2);
              v48 += 2 * v1053;
              --v895;
            }
            while (v895);
            v51 = (float16x4_t *)((char *)v51 + 2 * v46);
            v48 += 2 * v49;
            if (!--v894)
              goto LABEL_1315;
          }
        case 17:
          if (_S8 <= 0.0)
            goto LABEL_1316;
          __asm { FCVT            S0, H9 }
          v905 = v1064[0];
          while (1)
          {
            v906 = v14;
            do
            {
              if (v10)
              {
                _H2 = *(_WORD *)v48;
                __asm { FCVT            S2, H2 }
                if (_S2 <= 0.0)
                {
                  v51->i16[0] = _S9;
                  *(_WORD *)v48 = _H10;
                  goto LABEL_1158;
                }
              }
              else
              {
                _S2 = 1.0;
              }
              _H3 = v51->i16[0];
              __asm { FCVT            S3, H3 }
              v911 = _S8 * _S3;
              if ((float)(_S2 * _S0) > (float)(_S8 * _S3))
                v911 = _S2 * _S0;
              _S3 = v911 + (float)(_S3 * *(float *)v8.i32);
              if (_S8 == 1.0)
                _S3 = v911;
              if (_S2 != 1.0)
                _S3 = _S3 + (float)(_S0 * (float)(1.0 - _S2));
              __asm { FCVT            H3, S3 }
              if (v10)
              {
                _S2 = (float)(_S2 + _S8) - (float)(_S2 * _S8);
                __asm { FCVT            H2, S2 }
                v51->i16[0] = _H3;
                *(_WORD *)v48 = LOWORD(_S2);
              }
              else
              {
                v51->i16[0] = _H3;
              }
LABEL_1158:
              v51 = (float16x4_t *)((char *)v51 + 2);
              v48 += 2 * v1053;
              --v906;
            }
            while (v906);
            v51 = (float16x4_t *)((char *)v51 + 2 * v46);
            v48 += 2 * v49;
            if (!--v905)
              goto LABEL_1315;
          }
        case 18:
          if (_S8 <= 0.0)
            goto LABEL_1316;
          v915 = v1064[0];
          while (1)
          {
            if (v10)
            {
              _H0 = *(_WORD *)v48;
              __asm { FCVT            S1, H0 }
              if (_S1 <= 0.0)
              {
                v51->i16[0] = _S9;
                *(_WORD *)v48 = _H10;
              }
              else
              {
                _Q0.n128_u16[0] = v51->i16[0];
                v7.n128_u32[0] = _S9;
                _Q0.n128_u64[0] = PDAcolordodgePDA(_Q0, _S1, v7, _S8);
                v51->i16[0] = _Q0.n128_u16[0];
                *(_WORD *)v48 = v918;
              }
            }
            else
            {
              _Q0.n128_u16[0] = v51->i16[0];
              v7.n128_u32[0] = _S9;
              _Q0.n128_u64[0] = PDAcolordodgePDA(_Q0, 1.0, v7, _S8);
              v51->i16[0] = _Q0.n128_u16[0];
            }
            v51 = (float16x4_t *)((char *)v51 + 2);
            v48 += 2 * v1053;
            LODWORD(v14) = v14 - 1;
            if (!(_DWORD)v14)
            {
              v51 = (float16x4_t *)((char *)v51 + 2 * v46);
              v48 += 2 * v49;
              --v915;
              LODWORD(v14) = v720;
              if (!v915)
                break;
            }
          }
          goto LABEL_1200;
        case 19:
          if (_S8 <= 0.0)
            goto LABEL_1316;
          v919 = v1064[0];
          while (1)
          {
            if (v10)
            {
              _H0 = *(_WORD *)v48;
              __asm { FCVT            S1, H0 }
              if (_S1 <= 0.0)
              {
                v51->i16[0] = _S9;
                *(_WORD *)v48 = _H10;
              }
              else
              {
                _Q0.n128_u16[0] = v51->i16[0];
                v7.n128_u32[0] = _S9;
                _Q0.n128_u64[0] = PDAcolorburnPDA(_Q0, _S1, v7, _S8);
                v51->i16[0] = _Q0.n128_u16[0];
                *(_WORD *)v48 = v922;
              }
            }
            else
            {
              _Q0.n128_u16[0] = v51->i16[0];
              v7.n128_u32[0] = _S9;
              _Q0.n128_u64[0] = PDAcolorburnPDA(_Q0, 1.0, v7, _S8);
              v51->i16[0] = _Q0.n128_u16[0];
            }
            v51 = (float16x4_t *)((char *)v51 + 2);
            v48 += 2 * v1053;
            LODWORD(v14) = v14 - 1;
            if (!(_DWORD)v14)
            {
              v51 = (float16x4_t *)((char *)v51 + 2 * v46);
              v48 += 2 * v49;
              --v919;
              LODWORD(v14) = v720;
              if (!v919)
                break;
            }
          }
          goto LABEL_1200;
        case 20:
          if (_S8 <= 0.0)
            goto LABEL_1316;
          v923 = v1064[0];
          while (1)
          {
            if (v10)
            {
              _H0 = *(_WORD *)v48;
              __asm { FCVT            S1, H0 }
              if (_S1 <= 0.0)
              {
                v51->i16[0] = _S9;
                *(_WORD *)v48 = _H10;
              }
              else
              {
                _Q0.n128_u16[0] = v51->i16[0];
                v7.n128_u32[0] = _S9;
                _Q0.n128_u64[0] = PDAsoftlightPDA(_Q0, _S1, v7, _S8);
                v51->i16[0] = _Q0.n128_u16[0];
                *(_WORD *)v48 = v926;
              }
            }
            else
            {
              _Q0.n128_u16[0] = v51->i16[0];
              v7.n128_u32[0] = _S9;
              _Q0.n128_u64[0] = PDAsoftlightPDA(_Q0, 1.0, v7, _S8);
              v51->i16[0] = _Q0.n128_u16[0];
            }
            v51 = (float16x4_t *)((char *)v51 + 2);
            v48 += 2 * v1053;
            LODWORD(v14) = v14 - 1;
            if (!(_DWORD)v14)
            {
              v51 = (float16x4_t *)((char *)v51 + 2 * v46);
              v48 += 2 * v49;
              --v923;
              LODWORD(v14) = v720;
              if (!v923)
                break;
            }
          }
          goto LABEL_1200;
        case 21:
          if (_S8 <= 0.0)
            goto LABEL_1316;
          v927 = v1064[0];
          while (1)
          {
            if (v10)
            {
              _H0 = *(_WORD *)v48;
              __asm { FCVT            S1, H0 }
              if (_S1 <= 0.0)
              {
                v51->i16[0] = _S9;
                *(_WORD *)v48 = _H10;
              }
              else
              {
                _Q0.n128_u16[0] = v51->i16[0];
                v7.n128_u32[0] = _S9;
                _Q0.n128_u64[0] = PDAhardlightPDA(_Q0, _S1, v7, _S8);
                v51->i16[0] = _Q0.n128_u16[0];
                *(_WORD *)v48 = v930;
              }
            }
            else
            {
              _Q0.n128_u16[0] = v51->i16[0];
              v7.n128_u32[0] = _S9;
              _Q0.n128_u64[0] = PDAhardlightPDA(_Q0, 1.0, v7, _S8);
              v51->i16[0] = _Q0.n128_u16[0];
            }
            v51 = (float16x4_t *)((char *)v51 + 2);
            v48 += 2 * v1053;
            LODWORD(v14) = v14 - 1;
            if (!(_DWORD)v14)
            {
              v51 = (float16x4_t *)((char *)v51 + 2 * v46);
              v48 += 2 * v49;
              --v927;
              LODWORD(v14) = v720;
              if (!v927)
                break;
            }
          }
LABEL_1200:
          v1064[0] = 0;
          LODWORD(v11) = v1020;
          v38 = v1051;
          goto LABEL_1316;
        case 22:
          if (_S8 <= 0.0)
            goto LABEL_1316;
          __asm { FCVT            S0, H9 }
          v932 = v1064[0];
          while (1)
          {
            v933 = v14;
            do
            {
              if (v10)
              {
                _H1 = *(_WORD *)v48;
                __asm { FCVT            S1, H1 }
                if (_S1 <= 0.0)
                {
                  v51->i16[0] = _S9;
                  *(_WORD *)v48 = _H10;
                  goto LABEL_1213;
                }
              }
              else
              {
                _S1 = 1.0;
              }
              _H2 = v51->i16[0];
              __asm { FCVT            S2, H2 }
              v938 = _S0 + _S2;
              v939 = _S8 * _S2;
              v940 = v938 - v939;
              v941 = v939 - (float)(_S1 * _S0);
              v942 = v940 - (float)(_S1 * _S0);
              if (v941 < 0.0)
                v941 = -v941;
              _S2 = v942 + v941;
              __asm { FCVT            H2, S2 }
              if (v10)
              {
                _S1 = (float)(_S1 + _S8) - (float)(_S1 * _S8);
                __asm { FCVT            H1, S1 }
                v51->i16[0] = _H2;
                *(_WORD *)v48 = LOWORD(_S1);
              }
              else
              {
                v51->i16[0] = _H2;
              }
LABEL_1213:
              v51 = (float16x4_t *)((char *)v51 + 2);
              v48 += 2 * v1053;
              --v933;
            }
            while (v933);
            v51 = (float16x4_t *)((char *)v51 + 2 * v46);
            v48 += 2 * v49;
            if (!--v932)
              goto LABEL_1315;
          }
        case 23:
          if (_S8 <= 0.0)
            goto LABEL_1316;
          __asm { FCVT            S0, H9 }
          v947 = v1064[0];
          while (1)
          {
            v948 = v14;
            do
            {
              if (v10)
              {
                _H2 = *(_WORD *)v48;
                __asm { FCVT            S2, H2 }
                if (_S2 <= 0.0)
                {
                  v51->i16[0] = _S9;
                  *(_WORD *)v48 = _H10;
                  goto LABEL_1226;
                }
              }
              else
              {
                _S2 = 1.0;
              }
              _H3 = v51->i16[0];
              __asm { FCVT            S3, H3 }
              _S3 = (float)(_S0 + _S3) + (float)((float)(_S0 * _S3) * -2.0);
              __asm { FCVT            H3, S3 }
              if (v10)
              {
                _S2 = (float)(_S2 + _S8) - (float)(_S2 * _S8);
                __asm { FCVT            H2, S2 }
                v51->i16[0] = _H3;
                *(_WORD *)v48 = LOWORD(_S2);
              }
              else
              {
                v51->i16[0] = _H3;
              }
LABEL_1226:
              v51 = (float16x4_t *)((char *)v51 + 2);
              v48 += 2 * v1053;
              --v948;
            }
            while (v948);
            v51 = (float16x4_t *)((char *)v51 + 2 * v46);
            v48 += 2 * v49;
            if (!--v947)
              goto LABEL_1315;
          }
        case 24:
          if (_S8 <= 0.0)
            goto LABEL_1316;
          __asm { FCVT            S0, H9 }
          v957 = v1064[0];
          while (1)
          {
            v958 = v14;
            do
            {
              if (v10)
              {
                _H3 = *(_WORD *)v48;
                __asm { FCVT            S3, H3 }
                if (_S3 <= 0.0)
                {
                  v51->i16[0] = _S9;
                  *(_WORD *)v48 = _H10;
                  goto LABEL_1244;
                }
              }
              else
              {
                _S3 = 1.0;
              }
              _H4 = v51->i16[0];
              __asm { FCVT            S4, H4 }
              v963 = _S4 - (float)(_S8 * _S4);
              if (_S8 == 1.0)
              {
                v964 = 0.0;
              }
              else
              {
                _S4 = _S8 * _S4;
                v964 = v963;
              }
              if (_S3 != 1.0)
                v964 = (float)(v964 + _S0) - (float)(_S3 * _S0);
              _S4 = _S4 + v964;
              __asm { FCVT            H4, S4 }
              if (v10)
              {
                _S3 = (float)(_S3 + _S8) - (float)(_S3 * _S8);
                __asm { FCVT            H3, S3 }
                v51->i16[0] = _H4;
                *(_WORD *)v48 = LOWORD(_S3);
              }
              else
              {
                v51->i16[0] = _H4;
              }
LABEL_1244:
              v51 = (float16x4_t *)((char *)v51 + 2);
              v48 += 2 * v1053;
              --v958;
            }
            while (v958);
            v51 = (float16x4_t *)((char *)v51 + 2 * v46);
            v48 += 2 * v49;
            if (!--v957)
              goto LABEL_1315;
          }
        case 25:
          if (_S8 <= 0.0)
            goto LABEL_1316;
          __asm { FCVT            S0, H9 }
          v969 = v1064[0];
          while (1)
          {
            v970 = v14;
            do
            {
              if (v10)
              {
                _H3 = *(_WORD *)v48;
                __asm { FCVT            S3, H3 }
                if (_S3 <= 0.0)
                {
                  v51->i16[0] = _S9;
                  *(_WORD *)v48 = _H10;
                  goto LABEL_1262;
                }
              }
              else
              {
                _S3 = 1.0;
              }
              _H4 = v51->i16[0];
              __asm { FCVT            S4, H4 }
              v975 = _S4 - (float)(_S8 * _S4);
              if (_S8 == 1.0)
              {
                v976 = 0.0;
              }
              else
              {
                _S4 = _S8 * _S4;
                v976 = v975;
              }
              if (_S3 != 1.0)
                v976 = (float)(v976 + _S0) - (float)(_S3 * _S0);
              _S4 = _S4 + v976;
              __asm { FCVT            H4, S4 }
              if (v10)
              {
                _S3 = (float)(_S3 + _S8) - (float)(_S3 * _S8);
                __asm { FCVT            H3, S3 }
                v51->i16[0] = _H4;
                *(_WORD *)v48 = LOWORD(_S3);
              }
              else
              {
                v51->i16[0] = _H4;
              }
LABEL_1262:
              v51 = (float16x4_t *)((char *)v51 + 2);
              v48 += 2 * v1053;
              --v970;
            }
            while (v970);
            v51 = (float16x4_t *)((char *)v51 + 2 * v46);
            v48 += 2 * v49;
            if (!--v969)
              goto LABEL_1315;
          }
        case 26:
          if (_S8 <= 0.0)
            goto LABEL_1316;
          __asm { FCVT            S0, H9 }
          v981 = v1064[0];
          while (1)
          {
            v982 = v14;
            do
            {
              if (v10)
              {
                _H3 = *(_WORD *)v48;
                __asm { FCVT            S3, H3 }
                if (_S3 <= 0.0)
                {
                  v51->i16[0] = _S9;
                  *(_WORD *)v48 = _H10;
                  goto LABEL_1279;
                }
              }
              else
              {
                _S3 = 1.0;
              }
              _H4 = v51->i16[0];
              __asm { FCVT            S4, H4 }
              v987 = _S0 - (float)(_S3 * _S0);
              if (_S3 == 1.0)
                v987 = 0.0;
              v988 = (float)(v987 + _S4) - (float)(_S8 * _S4);
              if (_S8 != 1.0)
              {
                _S4 = _S8 * _S4;
                v987 = v988;
              }
              _S4 = _S4 + v987;
              __asm { FCVT            H4, S4 }
              if (v10)
              {
                _S3 = (float)(_S3 + _S8) - (float)(_S3 * _S8);
                __asm { FCVT            H3, S3 }
                v51->i16[0] = _H4;
                *(_WORD *)v48 = LOWORD(_S3);
              }
              else
              {
                v51->i16[0] = _H4;
              }
LABEL_1279:
              v51 = (float16x4_t *)((char *)v51 + 2);
              v48 += 2 * v1053;
              --v982;
            }
            while (v982);
            v51 = (float16x4_t *)((char *)v51 + 2 * v46);
            v48 += 2 * v49;
            if (!--v981)
              goto LABEL_1315;
          }
        case 27:
          if (_S8 <= 0.0)
            goto LABEL_1316;
          __asm { FCVT            S0, H9 }
          v993 = v1064[0];
          break;
        default:
          goto LABEL_1317;
      }
LABEL_1284:
      v994 = v14;
      while (v10)
      {
        _H3 = *(_WORD *)v48;
        __asm { FCVT            S3, H3 }
        if (_S3 > 0.0)
          goto LABEL_1289;
        v51->i16[0] = _S9;
        *(_WORD *)v48 = _H10;
LABEL_1297:
        v51 = (float16x4_t *)((char *)v51 + 2);
        v48 += 2 * v1053;
        if (!--v994)
        {
          v51 = (float16x4_t *)((char *)v51 + 2 * v46);
          v48 += 2 * v49;
          if (!--v993)
            goto LABEL_1315;
          goto LABEL_1284;
        }
      }
      _S3 = 1.0;
LABEL_1289:
      _H4 = v51->i16[0];
      __asm { FCVT            S4, H4 }
      v999 = _S4 - (float)(_S8 * _S4);
      if (_S8 == 1.0)
        v999 = 0.0;
      v1000 = _S3 * _S0;
      if (_S3 == 1.0)
        v1000 = _S0;
      else
        v999 = (float)(v999 + _S0) - (float)(_S3 * _S0);
      _S4 = v1000 + v999;
      __asm { FCVT            H4, S4 }
      if (v10)
      {
        _S3 = (float)(_S3 + _S8) - (float)(_S3 * _S8);
        __asm { FCVT            H3, S3 }
        v51->i16[0] = _H4;
        *(_WORD *)v48 = LOWORD(_S3);
      }
      else
      {
        v51->i16[0] = _H4;
      }
      goto LABEL_1297;
    }
    v1074[0] = *(_DWORD *)(v4 + 4);
    v1064[0] = v16;
    v23 = *(int *)(v4 + 12);
    v22 = *(int *)(v4 + 16);
    v1036 = (unint64_t)*(int *)(v4 + 28) >> 1;
    if (v10)
    {
      v1024 = (unint64_t)*(int *)(v4 + 32) >> 1;
      v1025 = (char *)(v10 + 2 * (v23 + v1024 * v22));
      v24 = 0xFFFFFFFFLL;
    }
    else
    {
      v1024 = 0;
      v1025 = 0;
      v24 = 0;
    }
    v41 = *(_WORD **)(v4 + 88);
    v1023 = *(_QWORD *)(v4 + 40) + 2 * (v23 + v22 * v1036);
    v42 = *(_DWORD *)(v4 + 56);
    v43 = *(_DWORD *)(v4 + 60);
    v1054 = (unint64_t)*(int *)(v4 + 76) >> 1;
    if (v20 == 256)
    {
      if (v9)
      {
        v1055 = (unint64_t)*(int *)(v4 + 80) >> 1;
        v9 += v42 + v1055 * v43;
        v44 = 0xFFFFFFFFLL;
      }
      else
      {
        v1055 = 0;
        v44 = 0;
      }
      v41 += v42 + v43 * v1054;
      if (v1054 == v1036 && (uint64_t)(v1023 - (_QWORD)v41) >= 1)
      {
        if (v14 >= (v1023 - (unint64_t)v41) >> 1)
        {
          v1023 += 2 * v15;
          v41 += v15;
          v1025 += 2 * (v24 & v15);
          v60 = -1;
          v1054 = (unint64_t)*(int *)(v4 + 28) >> 1;
          v9 += v44 & v15;
          goto LABEL_49;
        }
        if (v1023 <= (unint64_t)&v41[v1036 * v17 + v15])
        {
          v1023 += 2 * v1036 * v17;
          v77 = &v1025[2 * v1024 * v17];
          v1024 = -(uint64_t)v1024;
          v1025 = v77;
          v9 += v1055 * v17;
          v24 &= 1u;
          v1054 = -(uint64_t)v1036;
          v1055 = -(uint64_t)v1055;
          v44 &= 1u;
          v60 = 1;
          v41 += v1036 * v17;
          v1036 = -(uint64_t)v1036;
          goto LABEL_49;
        }
      }
      v24 &= 1u;
      v44 &= 1u;
      v60 = 1;
LABEL_49:
      v1021 = *(_DWORD *)(v4 + 56);
      v1022 = *(_DWORD *)(v4 + 60);
      if (v18)
      {
        v61 = v9;
        v1060 = v44;
        v1062 = v24;
        v1043 = 0;
        v1052 = 0;
        v62 = -1;
        v1030 = v1054;
        v1027 = v1055;
        goto LABEL_54;
      }
      v67 = v60 * (int)v14;
      v1058 = v1024 - (int)v24 * (int)v14;
      v68 = -1;
      v69 = v1055;
      v1026 = v60;
      v1027 = v1055;
      v70 = v1054;
      v45 = v1054;
LABEL_62:
      v74 = v11;
      v1028 = 0;
      v1029 = (uint64_t)v41;
      v1043 = 0;
      v1052 = 0;
      v1054 = v70 - v67;
      v1055 = v69 - (int)v44 * (int)v14;
      v75 = (uint64_t)v9;
      v65 = (char *)v9;
      v66 = v1025;
      v76 = (_WORD *)v1023;
      goto LABEL_67;
    }
    v45 = *(unsigned int *)(v4 + 64);
    v1027 = *(_DWORD *)(v4 + 68);
    if (v9)
    {
      v1055 = (unint64_t)*(int *)(v4 + 80) >> 1;
      v44 = 1;
    }
    else
    {
      v1055 = 0;
      v44 = 0;
    }
    v1052 = &v41[v1054 * v1027];
    v24 &= 1u;
    if (v18)
    {
      v1030 = *(unsigned int *)(v4 + 64);
      v61 = v9;
      v1021 = *(_DWORD *)(v4 + 56);
      v1022 = *(_DWORD *)(v4 + 60);
      v1060 = v44;
      v1062 = v24;
      v60 = 1;
      v1043 = *(_WORD **)(v4 + 88);
      v62 = (uint64_t)v1043;
LABEL_54:
      v1026 = v60;
      shape_enum_clip_alloc(v3, v4, (int *)v18, v60, v1036, 1, *(_DWORD *)(v4 + 104), *(_DWORD *)(v4 + 108), v14, v16);
      v64 = v63;
      v9 = v61;
      v1042 = (uint64_t)v61;
      v65 = (char *)v61;
      v66 = v1025;
      v1058 = v1024;
      if (v63)
        goto LABEL_923;
      return 1;
    }
    v1058 = v1024 - (v24 * v14);
    if (!v41)
    {
      v1021 = *(_DWORD *)(v4 + 56);
      v1022 = *(_DWORD *)(v4 + 60);
      v68 = 0;
      v1026 = 1;
      v67 = v14;
      v70 = (unint64_t)*(int *)(v4 + 76) >> 1;
      v69 = v1055;
      goto LABEL_62;
    }
    v71 = v43 % v1027;
    v1022 = v43 % v1027;
    v1029 = *(_QWORD *)(v4 + 88);
    v72 = &v41[v1054 * v71];
    v73 = v42 % (int)v45;
    v41 = &v72[v73];
    v68 = (unint64_t)&v72[(int)v45];
    v74 = v11;
    v1021 = v73;
    v1043 = v41;
    v1028 = 0;
    if (v9)
    {
      v75 = (uint64_t)&v9[v1055 * v71 + v73];
      v1026 = 1;
      v44 = 1;
      v65 = (char *)v75;
    }
    else
    {
      v75 = 0;
      v65 = 0;
      v1026 = 1;
    }
    v66 = v1025;
    v76 = (_WORD *)v1023;
    v67 = v14;
LABEL_67:
    v1060 = v44;
    v1062 = v24;
    v1030 = v45;
    v79 = v1036 - v67;
    v1044 = v1036 - v67;
    switch((int)v74)
    {
      case 0:
        v1019 = v9;
        v1042 = v75;
        v11 = v74;
        v62 = v68;
        v80 = v79 - (int)v14;
        v81 = &v76[-(int)v14 + 1];
        if (v1026 >= 0)
        {
          v81 = v76;
          v80 = v79 + (int)v14;
        }
        v82 = v1064[0];
        v83 = v1064[0] - 1;
        v84 = (char *)&v81[(v80 * v83) & (v80 >> 63)];
        if (v80 < 0)
          v80 = -v80;
        CGBlt_fillBytes(2 * v14, v1064[0], 0, v84, 2 * v80);
        if ((_DWORD)v1062)
        {
          if (v1026 < 0)
          {
            v85 = v1058 - (int)v14;
            v66 += -2 * (int)v14 + 2;
          }
          else
          {
            v85 = v1058 + (int)v14;
          }
          v66 += 2 * ((v85 * v83) & (v85 >> 63));
          if (v85 < 0)
            v85 = -v85;
          v1058 = v85;
          CGBlt_fillBytes(2 * v14, v82, 0, v66, 2 * v85);
        }
        goto LABEL_883;
      case 1:
        v86 = *(unsigned __int8 *)(v13 + 1);
        if (v86 == 2)
        {
          v87 = v1043;
          if ((int)v14 >= 16 && (2 * v45) <= 0x40)
          {
            _Q0.n128_u32[0] = 2 * v45;
            v665 = (uint8x8_t)vcnt_s8((int8x8_t)_Q0.n128_u64[0]);
            v665.i16[0] = vaddlv_u8(v665);
            if (v665.i32[0] <= 1u)
            {
              v1019 = v9;
              v1042 = v75;
              v11 = v74;
              v62 = v68;
              v666 = v1064[0];
              v667 = v76;
              v668 = 2 * v45;
              CGSFillDRAM64(v667, 2 * (v14 + v1044), 2 * v14, v1064[0], v1029, 2 * v1054, 2 * v45, v1027, 2 * v1021, v1022);
              if ((_DWORD)v1062)
              {
                if ((_DWORD)v1060)
                  CGSFillDRAM64(v66, 2 * (v14 + v1058), 2 * v14, v666, (uint64_t)v9, 2 * v1055, v668, v1027, 2 * v1021, v1022);
                else
                  CGBlt_fillBytes(2 * v14, v666, 1006648320, v66, 2 * (v14 + v1058));
LABEL_557:
                v9 = v1019;
                goto LABEL_920;
              }
              goto LABEL_883;
            }
          }
        }
        else
        {
          v87 = v1043;
          if (v86 == 1)
          {
            v1042 = v75;
            v11 = v74;
            v88 = (int)v14;
            v1019 = v9;
            v62 = v68;
            if (v1026 < 0)
            {
              v89 = v1054 - (int)v14;
              v41 += -(int)v14 + 1;
              v90 = v1044 - (int)v14;
              v76 += -(int)v14 + 1;
            }
            else
            {
              v89 = v1054 + (int)v14;
              v90 = v1044 + (int)v14;
            }
            v702 = v14;
            v703 = v1064[0] - 1;
            v704 = (char *)&v41[(v89 * v703) & (v89 >> 63)];
            if (v89 >= 0)
              v705 = v89;
            else
              v705 = -v89;
            v706 = (char *)&v76[(v90 * v703) & (v90 >> 63)];
            if (v90 >= 0)
              LODWORD(v707) = v90;
            else
              v707 = -v90;
            v708 = v702;
            v709 = 2 * v702;
            v1054 = v705;
            v1050 = v1064[0];
            CGBlt_copyBytes(2 * v702, v1064[0], v704, v706, 2 * v705, 2 * v707);
            if ((_DWORD)v1062)
            {
              v710 = v709;
              v41 = (_WORD *)v1029;
              if ((_DWORD)v1060)
              {
                v711 = v1055 - v88;
                v712 = &v65[-2 * v708 + 2];
                v713 = v1058 - v88;
                v714 = &v66[-2 * v708 + 2];
                if (v1026 >= 0)
                {
                  v712 = v65;
                  v714 = v66;
                  v711 = v1055 + v88;
                  v713 = v1058 + v88;
                }
                v65 = &v712[2 * ((v711 * v703) & (v711 >> 63))];
                if (v711 >= 0)
                  v715 = v711;
                else
                  v715 = -v711;
                v66 = &v714[2 * ((v713 * v703) & (v713 >> 63))];
                if (v713 >= 0)
                  v716 = v713;
                else
                  v716 = -v713;
                v1055 = v715;
                v1058 = v716;
                CGBlt_copyBytes(v710, v1050, v65, v66, 2 * v715, 2 * v716);
              }
              else
              {
                v717 = v1058 - v88;
                v718 = &v66[-2 * v708 + 2];
                if (v1026 >= 0)
                {
                  v718 = v66;
                  v717 = v1058 + v88;
                }
                v719 = (v717 * v703) & (v717 >> 63);
                v66 = &v718[2 * v719];
                if (v717 < 0)
                  v717 = -v717;
                v1058 = v717;
                CGBlt_fillBytes(v710, v1050, 1006648320, &v718[2 * v719], 2 * v717);
              }
              goto LABEL_884;
            }
LABEL_883:
            v41 = (_WORD *)v1029;
LABEL_884:
            v64 = v1028;
            v9 = v1019;
            goto LABEL_921;
          }
        }
        if ((_DWORD)v24)
        {
          v669 = 2 * (int)v24;
          v670 = 2 * v1026;
          if ((_DWORD)v44)
          {
            v671 = v1064[0];
            do
            {
              v672 = v14;
              do
              {
                *v76 = *v41;
                *(_WORD *)v66 = *(_WORD *)v65;
                v673 = &v41[v1026];
                if ((unint64_t)v673 >= v68)
                  v674 = -(uint64_t)(int)v45;
                else
                  v674 = 0;
                v65 += 2 * (int)v44 + 2 * v674;
                v41 = &v673[v674];
                v66 += v669;
                v76 = (_WORD *)((char *)v76 + v670);
                --v672;
              }
              while (v672);
              if (v1052)
              {
                v675 = &v87[v1054];
                if (v675 >= v1052)
                  v676 = -(uint64_t)(v1055 * v1027);
                else
                  v676 = 0;
                v75 += 2 * v1055 + 2 * v676;
                if (v675 >= v1052)
                  v677 = -(uint64_t)(v1054 * v1027);
                else
                  v677 = 0;
                v87 = &v675[v677];
                v68 += 2 * v677 + 2 * v1054;
                v65 = (char *)v75;
                v41 = v87;
              }
              else
              {
                v41 += v1054;
                v65 += 2 * v1055;
              }
              v76 += v1044;
              v66 += 2 * v1058;
              --v671;
            }
            while (v671);
          }
          else
          {
            v685 = v1064[0];
            do
            {
              v686 = v14;
              do
              {
                *v76 = *v41;
                *(_WORD *)v66 = 15360;
                v687 = &v41[v1026];
                if ((unint64_t)v687 >= v68)
                  v688 = -(uint64_t)(int)v45;
                else
                  v688 = 0;
                v65 += 2 * v688;
                v41 = &v687[v688];
                v66 += v669;
                v76 = (_WORD *)((char *)v76 + v670);
                --v686;
              }
              while (v686);
              if (v1052)
              {
                v689 = &v87[v1054];
                if (v689 >= v1052)
                  v690 = -(uint64_t)(v1055 * v1027);
                else
                  v690 = 0;
                v75 += 2 * v1055 + 2 * v690;
                if (v689 >= v1052)
                  v691 = -(uint64_t)(v1054 * v1027);
                else
                  v691 = 0;
                v87 = &v689[v691];
                v68 += 2 * v691 + 2 * v1054;
                v65 = (char *)v75;
                v41 = v87;
              }
              else
              {
                v41 += v1054;
                v65 += 2 * v1055;
              }
              v76 += v1044;
              v66 += 2 * v1058;
              --v685;
            }
            while (v685);
          }
        }
        else
        {
          v678 = v1064[0];
          do
          {
            v679 = v14;
            do
            {
              *v76 = *v41;
              v680 = &v41[v1026];
              if ((unint64_t)v680 >= v68)
                v681 = -(uint64_t)(int)v45;
              else
                v681 = 0;
              v65 += 2 * (int)v44 + 2 * v681;
              v41 = &v680[v681];
              v76 += v1026;
              --v679;
            }
            while (v679);
            if (v1052)
            {
              v682 = &v87[v1054];
              if (v682 >= v1052)
                v683 = -(uint64_t)(v1055 * v1027);
              else
                v683 = 0;
              v75 += 2 * v1055 + 2 * v683;
              if (v682 >= v1052)
                v684 = -(uint64_t)(v1054 * v1027);
              else
                v684 = 0;
              v87 = &v682[v684];
              v68 += 2 * v684 + 2 * v1054;
              v65 = (char *)v75;
              v41 = v87;
            }
            else
            {
              v41 += v1054;
              v65 += 2 * v1055;
            }
            v76 += v1044;
            v66 += 2 * v1058;
            --v678;
          }
          while (v678);
        }
        goto LABEL_918;
      case 2:
        v91 = (int)v44;
        if ((_DWORD)v24)
        {
          v92 = v1064[0];
          v93 = 2 * (int)v24;
          v94 = v1043;
          while (1)
          {
            v95 = v14;
            do
            {
              _H1 = *(_WORD *)v65;
              __asm { FCVT            S1, H1 }
              if (_S1 >= 1.0)
              {
                *v76 = *v41;
                _H1 = *(_WORD *)v65;
              }
              else
              {
                if (_S1 <= 0.0)
                  goto LABEL_88;
                _H2 = *v41;
                __asm { FCVT            S2, H2 }
                _H3 = *v76;
                __asm { FCVT            S3, H3 }
                _S2 = _S2 + (float)(_S3 * (float)(1.0 - _S1));
                __asm { FCVT            H2, S2 }
                *v76 = LOWORD(_S2);
                LOWORD(_S2) = *(_WORD *)v66;
                __asm { FCVT            S2, H2 }
                _S1 = _S1 + (float)(_S2 * (float)(1.0 - _S1));
                __asm { FCVT            H1, S1 }
              }
              *(_WORD *)v66 = _H1;
LABEL_88:
              v106 = &v41[v1026];
              if ((unint64_t)v106 >= v68)
                v107 = -(uint64_t)(int)v45;
              else
                v107 = 0;
              v65 += 2 * (int)v44 + 2 * v107;
              v41 = &v106[v107];
              v66 += v93;
              v76 += v1026;
              --v95;
            }
            while (v95);
            if (v1052)
            {
              v108 = &v94[v1054];
              if (v108 >= v1052)
                v109 = -(uint64_t)(v1055 * v1027);
              else
                v109 = 0;
              v75 += 2 * v1055 + 2 * v109;
              if (v108 >= v1052)
                v110 = -(uint64_t)(v1054 * v1027);
              else
                v110 = 0;
              v94 = &v108[v110];
              v68 += 2 * v110 + 2 * v1054;
              v65 = (char *)v75;
              v41 = v94;
            }
            else
            {
              v41 += v1054;
              v65 += 2 * v1055;
            }
            v76 += v79;
            v66 += 2 * v1058;
            if (!--v92)
              goto LABEL_836;
          }
        }
        v582 = v1064[0];
        v583 = v1043;
LABEL_735:
        v584 = v14;
        while (1)
        {
          _H1 = *(_WORD *)v65;
          __asm { FCVT            S1, H1 }
          if (_S1 >= 1.0)
            break;
          if (_S1 > 0.0)
          {
            _H2 = *v41;
            __asm { FCVT            S2, H2 }
            _H3 = *v76;
            __asm { FCVT            S3, H3 }
            _S1 = _S2 + (float)(_S3 * (float)(1.0 - _S1));
            __asm { FCVT            H1, S1 }
LABEL_740:
            *v76 = _H1;
          }
          v593 = &v41[v1026];
          if ((unint64_t)v593 >= v68)
            v594 = -(uint64_t)(int)v45;
          else
            v594 = 0;
          v65 += 2 * v91 + 2 * v594;
          v41 = &v593[v594];
          v76 += v1026;
          if (!--v584)
          {
            if (v1052)
            {
              v595 = &v583[v1054];
              if (v595 >= v1052)
                v596 = -(uint64_t)(v1055 * v1027);
              else
                v596 = 0;
              v75 += 2 * v1055 + 2 * v596;
              if (v595 >= v1052)
                v597 = -(uint64_t)(v1054 * v1027);
              else
                v597 = 0;
              v583 = &v595[v597];
              v68 += 2 * v597 + 2 * v1054;
              v65 = (char *)v75;
              v41 = v583;
            }
            else
            {
              v41 += v1054;
              v65 += 2 * v1055;
            }
            v76 += v79;
            v66 += 2 * v1058;
            if (!--v582)
            {
LABEL_853:
              v1043 = v583;
              goto LABEL_919;
            }
            goto LABEL_735;
          }
        }
        _H1 = *v41;
        goto LABEL_740;
      case 3:
        if ((_DWORD)v44)
        {
          v111 = v1064[0];
          v112 = 2 * (int)v24;
          v94 = v1043;
          do
          {
            v113 = v14;
            do
            {
              _H2 = *(_WORD *)v66;
              __asm { FCVT            S2, H2 }
              if (_S2 <= 0.0)
              {
                *(_WORD *)v66 = 0;
                *v76 = 0;
              }
              else
              {
                _H3 = *v41;
                if (_S2 >= 1.0)
                {
                  *v76 = _H3;
                  _H2 = *(_WORD *)v65;
                }
                else
                {
                  __asm { FCVT            S3, H3 }
                  _S3 = _S2 * _S3;
                  __asm { FCVT            H3, S3 }
                  *v76 = LOWORD(_S3);
                  LOWORD(_S3) = *(_WORD *)v65;
                  __asm { FCVT            S3, H3 }
                  _S2 = _S2 * _S3;
                  __asm { FCVT            H2, S2 }
                }
                *(_WORD *)v66 = _H2;
              }
              v122 = &v41[v1026];
              if ((unint64_t)v122 >= v68)
                v123 = -(uint64_t)(int)v45;
              else
                v123 = 0;
              v65 += 2 * (int)v44 + 2 * v123;
              v41 = &v122[v123];
              v66 += v112;
              v76 += v1026;
              --v113;
            }
            while (v113);
            if (v1052)
            {
              v124 = &v94[v1054];
              if (v124 >= v1052)
                v125 = -(uint64_t)(v1055 * v1027);
              else
                v125 = 0;
              v75 += 2 * v1055 + 2 * v125;
              if (v124 >= v1052)
                v126 = -(uint64_t)(v1054 * v1027);
              else
                v126 = 0;
              v94 = &v124[v126];
              v68 += 2 * v126 + 2 * v1054;
              v65 = (char *)v75;
              v41 = v94;
            }
            else
            {
              v41 += v1054;
              v65 += 2 * v1055;
            }
            v76 += v79;
            v66 += 2 * v1058;
            --v111;
          }
          while (v111);
          goto LABEL_836;
        }
        v598 = -(uint64_t)(int)v45;
        v599 = v1064[0];
        v146 = v1043;
        do
        {
          v600 = v14;
          do
          {
            _H1 = *(_WORD *)v66;
            __asm { FCVT            S2, H1 }
            _H1 = 0;
            if (_S2 > 0.0)
            {
              _H1 = *v41;
              if (_S2 < 1.0)
              {
                __asm { FCVT            S1, H1 }
                _S1 = _S2 * _S1;
                __asm { FCVT            H1, S1 }
              }
            }
            *v76 = _H1;
            v606 = &v41[v1026];
            if ((unint64_t)v606 >= v68)
              v607 = v598;
            else
              v607 = 0;
            v65 += 2 * v607;
            v41 = &v606[v607];
            v66 += 2 * (int)v24;
            v76 += v1026;
            --v600;
          }
          while (v600);
          if (v1052)
          {
            v608 = &v146[v1054];
            if (v608 >= v1052)
              v609 = -(uint64_t)(v1055 * v1027);
            else
              v609 = 0;
            v75 += 2 * v1055 + 2 * v609;
            if (v608 >= v1052)
              v610 = -(uint64_t)(v1054 * v1027);
            else
              v610 = 0;
            v146 = &v608[v610];
            v68 += 2 * v610 + 2 * v1054;
            v65 = (char *)v75;
            v41 = v146;
          }
          else
          {
            v41 += v1054;
            v65 += 2 * v1055;
          }
          v76 += v79;
          v66 += 2 * v1058;
          --v599;
        }
        while (v599);
LABEL_775:
        v1043 = v146;
        goto LABEL_919;
      case 4:
        v127 = v1064[0];
        v87 = v1043;
        do
        {
          v128 = v14;
          do
          {
            _H3 = *(_WORD *)v66;
            __asm { FCVT            S3, H3 }
            v131 = 1.0 - _S3;
            if (v131 <= 0.0)
            {
              *(_WORD *)v66 = 0;
              *v76 = 0;
            }
            else
            {
              if (v131 >= 1.0)
              {
                _H3 = 15360;
                if ((_DWORD)v44)
                  _H3 = *(_WORD *)v65;
              }
              else
              {
                _H4 = *v41;
                __asm { FCVT            S4, H4 }
                _S4 = v131 * _S4;
                __asm { FCVT            H4, S4 }
                *v76 = LOWORD(_S4);
                if ((_DWORD)v44)
                {
                  _H4 = *(_WORD *)v65;
                  __asm { FCVT            S4, H4 }
                }
                else
                {
                  _S4 = 1.0;
                }
                _S3 = v131 * _S4;
                __asm { FCVT            H3, S3 }
              }
              *(_WORD *)v66 = _H3;
            }
            v139 = &v41[v1026];
            if ((unint64_t)v139 >= v68)
              v140 = -(uint64_t)(int)v45;
            else
              v140 = 0;
            v65 += 2 * (int)v44 + 2 * v140;
            v41 = &v139[v140];
            v66 += 2 * (int)v24;
            v76 += v1026;
            --v128;
          }
          while (v128);
          if (v1052)
          {
            v141 = &v87[v1054];
            if (v141 >= v1052)
              v142 = -(uint64_t)(v1055 * v1027);
            else
              v142 = 0;
            v75 += 2 * v1055 + 2 * v142;
            if (v141 >= v1052)
              v143 = -(uint64_t)(v1054 * v1027);
            else
              v143 = 0;
            v87 = &v141[v143];
            v68 += 2 * v143 + 2 * v1054;
            v65 = (char *)v75;
            v41 = v87;
          }
          else
          {
            v41 += v1054;
            v65 += 2 * v1055;
          }
          v76 += v1044;
          v66 += 2 * v1058;
          --v127;
        }
        while (v127);
        goto LABEL_918;
      case 5:
        v144 = v1064[0];
        v145 = -(uint64_t)(int)v45;
        v146 = v1043;
        do
        {
          v147 = v14;
          do
          {
            _H1 = *(_WORD *)v66;
            __asm { FCVT            S1, H1 }
            _H2 = *(_WORD *)v65;
            __asm { FCVT            S2, H2 }
            _H3 = *v41;
            __asm { FCVT            S3, H3 }
            _H4 = *v76;
            __asm { FCVT            S4, H4 }
            _S3 = (float)((float)(1.0 - _S2) * _S4) + (float)(_S3 * _S1);
            __asm { FCVT            H3, S3 }
            *v76 = LOWORD(_S3);
            _S1 = (float)((float)(1.0 - _S2) * _S1) + (float)(_S2 * _S1);
            __asm { FCVT            H1, S1 }
            *(_WORD *)v66 = LOWORD(_S1);
            v158 = &v41[v1026];
            if ((unint64_t)v158 >= v68)
              v159 = v145;
            else
              v159 = 0;
            v65 += 2 * (int)v44 + 2 * v159;
            v41 = &v158[v159];
            v66 += 2 * (int)v24;
            v76 += v1026;
            --v147;
          }
          while (v147);
          if (v1052)
          {
            v160 = &v146[v1054];
            if (v160 >= v1052)
              v161 = -(uint64_t)(v1055 * v1027);
            else
              v161 = 0;
            v75 += 2 * v1055 + 2 * v161;
            if (v160 >= v1052)
              v162 = -(uint64_t)(v1054 * v1027);
            else
              v162 = 0;
            v146 = &v160[v162];
            v68 += 2 * v162 + 2 * v1054;
            v65 = (char *)v75;
            v41 = v146;
          }
          else
          {
            v41 += v1054;
            v65 += 2 * v1055;
          }
          v76 += v79;
          v66 += 2 * v1058;
          --v144;
        }
        while (v144);
        goto LABEL_775;
      case 6:
        v163 = v1064[0];
        v87 = v1043;
        while (1)
        {
          v164 = v14;
          do
          {
            _H2 = *(_WORD *)v66;
            __asm { FCVT            S2, H2 }
            v167 = 1.0 - _S2;
            if ((float)(1.0 - _S2) >= 1.0)
            {
              *v76 = *v41;
              _H2 = 15360;
              if ((_DWORD)v44)
                _H2 = *(_WORD *)v65;
            }
            else
            {
              if (v167 <= 0.0)
                goto LABEL_182;
              _H4 = *v76;
              __asm { FCVT            S4, H4 }
              _H5 = *v41;
              __asm { FCVT            S5, H5 }
              _S4 = _S4 + (float)(_S5 * v167);
              __asm { FCVT            H4, S4 }
              *v76 = LOWORD(_S4);
              if ((_DWORD)v44)
              {
                _H4 = *(_WORD *)v65;
                __asm { FCVT            S4, H4 }
              }
              else
              {
                _S4 = 1.0;
              }
              _S2 = _S2 + (float)(_S4 * v167);
              __asm { FCVT            H2, S2 }
            }
            *(_WORD *)v66 = _H2;
LABEL_182:
            v177 = &v41[v1026];
            if ((unint64_t)v177 >= v68)
              v178 = -(uint64_t)(int)v45;
            else
              v178 = 0;
            v65 += 2 * (int)v44 + 2 * v178;
            v41 = &v177[v178];
            v66 += 2 * (int)v24;
            v76 += v1026;
            --v164;
          }
          while (v164);
          if (v1052)
          {
            v179 = &v87[v1054];
            if (v179 >= v1052)
              v180 = -(uint64_t)(v1055 * v1027);
            else
              v180 = 0;
            v75 += 2 * v1055 + 2 * v180;
            if (v179 >= v1052)
              v181 = -(uint64_t)(v1054 * v1027);
            else
              v181 = 0;
            v87 = &v179[v181];
            v68 += 2 * v181 + 2 * v1054;
            v65 = (char *)v75;
            v41 = v87;
          }
          else
          {
            v41 += v1054;
            v65 += 2 * v1055;
          }
          v76 += v1044;
          v66 += 2 * v1058;
          if (!--v163)
          {
LABEL_918:
            v1043 = v87;
LABEL_919:
            v1042 = v75;
            v11 = v74;
            v62 = v68;
            v1064[0] = 0;
LABEL_920:
            v64 = v1028;
            v41 = (_WORD *)v1029;
LABEL_921:
            if (!v64)
              return 1;
            v1063 = 0;
LABEL_923:
            if (!shape_enum_clip_next(v64, (int *)&v1063 + 1, &v1063, v1074, v1064))
            {
              v78 = (void *)v64;
LABEL_945:
              free(v78);
              return 1;
            }
            v1028 = v64;
            v1029 = (uint64_t)v41;
            if (v1052)
            {
              v76 = (_WORD *)(v1023 + 2 * v1036 * (int)v1063 + 2 * SHIDWORD(v1063));
              v692 = ((int)v1063 + *(_DWORD *)(v13 + 60)) % v1027;
              v67 = v1074[0];
              v45 = v1030;
              v693 = (HIDWORD(v1063) + *(_DWORD *)(v13 + 56)) % (int)v1030;
              v694 = &v41[v1054 * v692];
              v41 = &v694[v693];
              v68 = (unint64_t)&v694[(int)v1030];
              v24 = v1062;
              if ((_DWORD)v1062)
                v66 = &v1025[2 * v1024 * (int)v1063 + 2 * SHIDWORD(v1063)];
              v695 = v1058;
              if ((_DWORD)v1062)
                v695 = v1024 - v1074[0];
              v1058 = v695;
              if ((_DWORD)v1060)
                v44 = v1060;
              else
                v44 = 0;
              v75 = v1042;
              if ((_DWORD)v1060)
              {
                v75 = (uint64_t)&v9[v1055 * v692 + v693];
                v65 = (char *)v75;
              }
              LODWORD(v14) = v1074[0];
              v1043 = &v694[v693];
              v1021 = (HIDWORD(v1063) + *(_DWORD *)(v13 + 56)) % (int)v1030;
              v1022 = ((int)v1063 + *(_DWORD *)(v13 + 60)) % v1027;
              v74 = v11;
            }
            else
            {
              v696 = HIDWORD(v1063) * v1026;
              LODWORD(v14) = v1074[0];
              v697 = v1074[0] * v1026;
              v76 = (_WORD *)(v1023 + 2 * v1036 * (int)v1063 + 2 * HIDWORD(v1063) * v1026);
              v67 = v1074[0] * v1026;
              v45 = v1030;
              v41 += (int)v1063 * (int)v1030 + HIDWORD(v1063) * v1026;
              v1052 = 0;
              v1054 = (int)v1030 - v1074[0] * v1026;
              v44 = v1060;
              v24 = v1062;
              if ((_DWORD)v1062)
                v66 = &v1025[2 * v1024 * (int)v1063 + 2 * v696];
              v698 = v1058;
              if ((_DWORD)v1062)
                v698 = v1024 - v697;
              v699 = (uint64_t)&v9[(int)v1063 * v1027 + v696];
              v700 = v1027 - v697;
              if ((_DWORD)v1060)
                v65 = (char *)v699;
              v701 = v1055;
              if ((_DWORD)v1060)
                v701 = v700;
              v1055 = v701;
              v1058 = v698;
              v68 = v62;
              v74 = v11;
              v75 = v1042;
            }
            goto LABEL_67;
          }
        }
      case 7:
        v182 = (int)v44;
        if ((_DWORD)v24)
        {
          v183 = v1064[0];
          v184 = 2 * (int)v24;
          v94 = v1043;
          do
          {
            v185 = v14;
            do
            {
              _H2 = *(_WORD *)v65;
              __asm { FCVT            S2, H2 }
              if (_S2 <= 0.0)
              {
                *(_WORD *)v66 = 0;
                *v76 = 0;
              }
              else if (_S2 < 1.0)
              {
                _H3 = *v76;
                __asm { FCVT            S3, H3 }
                _S3 = _S2 * _S3;
                __asm { FCVT            H3, S3 }
                *v76 = LOWORD(_S3);
                LOWORD(_S3) = *(_WORD *)v66;
                __asm { FCVT            S3, H3 }
                _S2 = _S2 * _S3;
                __asm { FCVT            H2, S2 }
                *(_WORD *)v66 = LOWORD(_S2);
              }
              v193 = &v41[v1026];
              if ((unint64_t)v193 >= v68)
                v194 = -(uint64_t)(int)v45;
              else
                v194 = 0;
              v65 += 2 * (int)v44 + 2 * v194;
              v41 = &v193[v194];
              v66 += v184;
              v76 += v1026;
              --v185;
            }
            while (v185);
            if (v1052)
            {
              v195 = &v94[v1054];
              if (v195 >= v1052)
                v196 = -(uint64_t)(v1055 * v1027);
              else
                v196 = 0;
              v75 += 2 * v1055 + 2 * v196;
              if (v195 >= v1052)
                v197 = -(uint64_t)(v1054 * v1027);
              else
                v197 = 0;
              v94 = &v195[v197];
              v68 += 2 * v197 + 2 * v1054;
              v65 = (char *)v75;
              v41 = v94;
            }
            else
            {
              v41 += v1054;
              v65 += 2 * v1055;
            }
            v76 += v79;
            v66 += 2 * v1058;
            --v183;
          }
          while (v183);
LABEL_836:
          v1043 = v94;
          goto LABEL_919;
        }
        v611 = v1064[0];
        v583 = v1043;
LABEL_777:
        v612 = v14;
        while (1)
        {
          _H1 = *(_WORD *)v65;
          __asm { FCVT            S1, H1 }
          _H2 = 0;
          if (_S1 <= 0.0)
            goto LABEL_781;
          if (_S1 < 1.0)
            break;
LABEL_782:
          v619 = &v41[v1026];
          if ((unint64_t)v619 >= v68)
            v620 = -(uint64_t)(int)v45;
          else
            v620 = 0;
          v65 += 2 * v182 + 2 * v620;
          v41 = &v619[v620];
          v76 += v1026;
          if (!--v612)
          {
            if (v1052)
            {
              v621 = &v583[v1054];
              if (v621 >= v1052)
                v622 = -(uint64_t)(v1055 * v1027);
              else
                v622 = 0;
              v75 += 2 * v1055 + 2 * v622;
              if (v621 >= v1052)
                v623 = -(uint64_t)(v1054 * v1027);
              else
                v623 = 0;
              v583 = &v621[v623];
              v68 += 2 * v623 + 2 * v1054;
              v65 = (char *)v75;
              v41 = v583;
            }
            else
            {
              v41 += v1054;
              v65 += 2 * v1055;
            }
            v76 += v79;
            v66 += 2 * v1058;
            if (!--v611)
              goto LABEL_853;
            goto LABEL_777;
          }
        }
        _H2 = *v76;
        __asm { FCVT            S2, H2 }
        _S1 = _S1 * _S2;
        __asm { FCVT            H2, S1 }
LABEL_781:
        *v76 = _H2;
        goto LABEL_782;
      case 8:
        v198 = (int)v44;
        if ((_DWORD)v24)
        {
          v199 = v1064[0];
          v200 = 2 * (int)v24;
          v94 = v1043;
          do
          {
            v201 = v14;
            do
            {
              _H2 = *(_WORD *)v65;
              __asm { FCVT            S2, H2 }
              v204 = 1.0 - _S2;
              if (v204 <= 0.0)
              {
                *(_WORD *)v66 = 0;
                *v76 = 0;
              }
              else if (v204 < 1.0)
              {
                _H3 = *v76;
                __asm { FCVT            S3, H3 }
                _S3 = v204 * _S3;
                __asm { FCVT            H3, S3 }
                *v76 = LOWORD(_S3);
                LOWORD(_S3) = *(_WORD *)v66;
                __asm { FCVT            S3, H3 }
                _S2 = v204 * _S3;
                __asm { FCVT            H2, S2 }
                *(_WORD *)v66 = LOWORD(_S2);
              }
              v210 = &v41[v1026];
              if ((unint64_t)v210 >= v68)
                v211 = -(uint64_t)(int)v45;
              else
                v211 = 0;
              v65 += 2 * (int)v44 + 2 * v211;
              v41 = &v210[v211];
              v66 += v200;
              v76 += v1026;
              --v201;
            }
            while (v201);
            if (v1052)
            {
              v212 = &v94[v1054];
              if (v212 >= v1052)
                v213 = -(uint64_t)(v1055 * v1027);
              else
                v213 = 0;
              v75 += 2 * v1055 + 2 * v213;
              if (v212 >= v1052)
                v214 = -(uint64_t)(v1054 * v1027);
              else
                v214 = 0;
              v94 = &v212[v214];
              v68 += 2 * v214 + 2 * v1054;
              v65 = (char *)v75;
              v41 = v94;
            }
            else
            {
              v41 += v1054;
              v65 += 2 * v1055;
            }
            v76 += v79;
            v66 += 2 * v1058;
            --v199;
          }
          while (v199);
          goto LABEL_836;
        }
        v624 = v1064[0];
        v583 = v1043;
LABEL_798:
        v625 = v14;
        while (1)
        {
          _H1 = *(_WORD *)v65;
          __asm { FCVT            S1, H1 }
          v628 = 1.0 - _S1;
          _H2 = 0;
          if (v628 <= 0.0)
            goto LABEL_802;
          if (v628 < 1.0)
            break;
LABEL_803:
          v633 = &v41[v1026];
          if ((unint64_t)v633 >= v68)
            v634 = -(uint64_t)(int)v45;
          else
            v634 = 0;
          v65 += 2 * v198 + 2 * v634;
          v41 = &v633[v634];
          v76 += v1026;
          if (!--v625)
          {
            if (v1052)
            {
              v635 = &v583[v1054];
              if (v635 >= v1052)
                v636 = -(uint64_t)(v1055 * v1027);
              else
                v636 = 0;
              v75 += 2 * v1055 + 2 * v636;
              if (v635 >= v1052)
                v637 = -(uint64_t)(v1054 * v1027);
              else
                v637 = 0;
              v583 = &v635[v637];
              v68 += 2 * v637 + 2 * v1054;
              v65 = (char *)v75;
              v41 = v583;
            }
            else
            {
              v41 += v1054;
              v65 += 2 * v1055;
            }
            v76 += v79;
            v66 += 2 * v1058;
            if (!--v624)
              goto LABEL_853;
            goto LABEL_798;
          }
        }
        _H2 = *v76;
        __asm { FCVT            S2, H2 }
        _S1 = v628 * _S2;
        __asm { FCVT            H2, S1 }
LABEL_802:
        *v76 = _H2;
        goto LABEL_803;
      case 9:
        v215 = v1064[0];
        v216 = -(uint64_t)(int)v45;
        v146 = v1043;
        do
        {
          v217 = v14;
          do
          {
            _H1 = *(_WORD *)v66;
            __asm { FCVT            S1, H1 }
            _H2 = *(_WORD *)v65;
            __asm { FCVT            S2, H2 }
            _H3 = *v41;
            __asm { FCVT            S3, H3 }
            _H5 = *v76;
            __asm { FCVT            S5, H5 }
            _S3 = (float)(_S2 * _S5) + (float)(_S3 * (float)(1.0 - _S1));
            __asm { FCVT            H3, S3 }
            *v76 = LOWORD(_S3);
            _S1 = (float)(_S1 * _S2) + (float)(_S2 * (float)(1.0 - _S1));
            __asm { FCVT            H1, S1 }
            *(_WORD *)v66 = LOWORD(_S1);
            v228 = &v41[v1026];
            if ((unint64_t)v228 >= v68)
              v229 = v216;
            else
              v229 = 0;
            v65 += 2 * (int)v44 + 2 * v229;
            v41 = &v228[v229];
            v66 += 2 * (int)v24;
            v76 += v1026;
            --v217;
          }
          while (v217);
          if (v1052)
          {
            v230 = &v146[v1054];
            if (v230 >= v1052)
              v231 = -(uint64_t)(v1055 * v1027);
            else
              v231 = 0;
            v75 += 2 * v1055 + 2 * v231;
            if (v230 >= v1052)
              v232 = -(uint64_t)(v1054 * v1027);
            else
              v232 = 0;
            v146 = &v230[v232];
            v68 += 2 * v232 + 2 * v1054;
            v65 = (char *)v75;
            v41 = v146;
          }
          else
          {
            v41 += v1054;
            v65 += 2 * v1055;
          }
          v76 += v79;
          v66 += 2 * v1058;
          --v215;
        }
        while (v215);
        goto LABEL_775;
      case 10:
        v233 = v1064[0];
        v234 = -(uint64_t)(int)v45;
        v146 = v1043;
        do
        {
          v235 = v14;
          do
          {
            _H1 = *(_WORD *)v66;
            __asm { FCVT            S1, H1 }
            _H2 = *(_WORD *)v65;
            __asm { FCVT            S2, H2 }
            _H3 = *v41;
            __asm { FCVT            S3, H3 }
            _H5 = *v76;
            __asm { FCVT            S5, H5 }
            _S3 = (float)((float)(1.0 - _S2) * _S5) + (float)(_S3 * (float)(1.0 - _S1));
            __asm { FCVT            H3, S3 }
            *v76 = LOWORD(_S3);
            _S1 = (float)((float)(1.0 - _S2) * _S1) + (float)(_S2 * (float)(1.0 - _S1));
            __asm { FCVT            H1, S1 }
            *(_WORD *)v66 = LOWORD(_S1);
            v246 = &v41[v1026];
            if ((unint64_t)v246 >= v68)
              v247 = v234;
            else
              v247 = 0;
            v65 += 2 * (int)v44 + 2 * v247;
            v41 = &v246[v247];
            v66 += 2 * (int)v24;
            v76 += v1026;
            --v235;
          }
          while (v235);
          if (v1052)
          {
            v248 = &v146[v1054];
            if (v248 >= v1052)
              v249 = -(uint64_t)(v1055 * v1027);
            else
              v249 = 0;
            v75 += 2 * v1055 + 2 * v249;
            if (v248 >= v1052)
              v250 = -(uint64_t)(v1054 * v1027);
            else
              v250 = 0;
            v146 = &v248[v250];
            v68 += 2 * v250 + 2 * v1054;
            v65 = (char *)v75;
            v41 = v146;
          }
          else
          {
            v41 += v1054;
            v65 += 2 * v1055;
          }
          v76 += v79;
          v66 += 2 * v1058;
          --v233;
        }
        while (v233);
        goto LABEL_775;
      case 11:
        if ((_DWORD)v24)
        {
          v251 = v1064[0];
          v87 = v1043;
          do
          {
            v252 = v14;
            do
            {
              if ((_DWORD)v44)
              {
                _H1 = *(_WORD *)v65;
                __asm { FCVT            S1, H1 }
              }
              else
              {
                _S1 = 1.0;
              }
              _H2 = *(_WORD *)v66;
              __asm { FCVT            S2, H2 }
              v257 = _S1 + _S2;
              _H4 = *v76;
              __asm { FCVT            S4, H4 }
              v260 = _S2 - _S4;
              LOWORD(_S4) = *v41;
              __asm { FCVT            S4, H4 }
              v262 = v260 + (float)(_S1 - _S4);
              if (v257 <= 1.0)
                _S2 = v257;
              else
                _S2 = 1.0;
              __asm { FCVT            H3, S2 }
              *(_WORD *)v66 = _H3;
              _S1 = _S2 - v262;
              __asm { FCVT            H1, S1 }
              *v76 = LOWORD(_S1);
              v266 = &v41[v1026];
              if ((unint64_t)v266 >= v68)
                v267 = -(uint64_t)(int)v45;
              else
                v267 = 0;
              v65 += 2 * (int)v44 + 2 * v267;
              v41 = &v266[v267];
              v66 += 2 * (int)v24;
              v76 += v1026;
              --v252;
            }
            while (v252);
            if (v1052)
            {
              v268 = &v87[v1054];
              if (v268 >= v1052)
                v269 = -(uint64_t)(v1055 * v1027);
              else
                v269 = 0;
              v75 += 2 * v1055 + 2 * v269;
              if (v268 >= v1052)
                v270 = -(uint64_t)(v1054 * v1027);
              else
                v270 = 0;
              v87 = &v268[v270];
              v68 += 2 * v270 + 2 * v1054;
              v65 = (char *)v75;
              v41 = v87;
            }
            else
            {
              v41 += v1054;
              v65 += 2 * v1055;
            }
            v76 += v1044;
            v66 += 2 * v1058;
            --v251;
          }
          while (v251);
          goto LABEL_918;
        }
        v638 = v1064[0];
        v94 = v1043;
        do
        {
          v639 = v14;
          do
          {
            _S2 = 1.0;
            if ((_DWORD)v44)
            {
              _H2 = *(_WORD *)v65;
              __asm { FCVT            S2, H2 }
            }
            _H3 = *v76;
            __asm { FCVT            S3, H3 }
            v644 = 1.0 - _S3;
            LOWORD(_S3) = *v41;
            __asm { FCVT            S3, H3 }
            _S1 = 1.0 - (float)(v644 + (float)(_S2 - _S3));
            __asm { FCVT            H1, S1 }
            *v76 = LOWORD(_S1);
            v647 = &v41[v1026];
            if ((unint64_t)v647 >= v68)
              v648 = -(uint64_t)(int)v45;
            else
              v648 = 0;
            v65 += 2 * (int)v44 + 2 * v648;
            v41 = &v647[v648];
            v76 += v1026;
            --v639;
          }
          while (v639);
          if (v1052)
          {
            v649 = &v94[v1054];
            if (v649 >= v1052)
              v650 = -(uint64_t)(v1055 * v1027);
            else
              v650 = 0;
            v75 += 2 * v1055 + 2 * v650;
            if (v649 >= v1052)
              v651 = -(uint64_t)(v1054 * v1027);
            else
              v651 = 0;
            v94 = &v649[v651];
            v68 += 2 * v651 + 2 * v1054;
            v65 = (char *)v75;
            v41 = v94;
          }
          else
          {
            v41 += v1054;
            v65 += 2 * v1055;
          }
          v76 += v79;
          v66 += 2 * v1058;
          --v638;
        }
        while (v638);
        goto LABEL_836;
      case 12:
        if (!(_DWORD)v24)
        {
          v652 = (int)v44;
          v653 = v1064[0];
          v583 = v1043;
          do
          {
            v654 = v14;
            do
            {
              _H0 = *v76;
              _H1 = *v41;
              __asm
              {
                FCVT            S1, H1
                FCVT            S0, H0
              }
              _S0 = _S0 + _S1;
              __asm { FCVT            H0, S0 }
              *v76 = LOWORD(_S0);
              v660 = &v41[v1026];
              if ((unint64_t)v660 >= v68)
                v661 = -(uint64_t)(int)v45;
              else
                v661 = 0;
              v65 += 2 * v652 + 2 * v661;
              v41 = &v660[v661];
              v76 += v1026;
              --v654;
            }
            while (v654);
            if (v1052)
            {
              v662 = &v583[v1054];
              if (v662 >= v1052)
                v663 = -(uint64_t)(v1055 * v1027);
              else
                v663 = 0;
              v75 += 2 * v1055 + 2 * v663;
              if (v662 >= v1052)
                v664 = -(uint64_t)(v1054 * v1027);
              else
                v664 = 0;
              v583 = &v662[v664];
              v68 += 2 * v664 + 2 * v1054;
              v65 = (char *)v75;
              v41 = v583;
            }
            else
            {
              v41 += v1054;
              v65 += 2 * v1055;
            }
            v76 += v79;
            v66 += 2 * v1058;
            --v653;
          }
          while (v653);
          goto LABEL_853;
        }
        v271 = v1064[0];
        v87 = v1043;
        do
        {
          v272 = v14;
          do
          {
            if ((_DWORD)v44)
            {
              _H1 = *(_WORD *)v65;
              __asm { FCVT            S1, H1 }
            }
            else
            {
              _S1 = 1.0;
            }
            _H2 = *(_WORD *)v66;
            __asm { FCVT            S2, H2 }
            _S1 = _S1 + _S2;
            _H2 = *v76;
            _H3 = *v41;
            if (_S1 > 1.0)
              _S1 = 1.0;
            __asm
            {
              FCVT            S3, H3
              FCVT            S2, H2
            }
            _S2 = _S2 + _S3;
            __asm { FCVT            H2, S2 }
            *v76 = LOWORD(_S2);
            __asm { FCVT            H1, S1 }
            *(_WORD *)v66 = _H1;
            v284 = &v41[v1026];
            if ((unint64_t)v284 >= v68)
              v285 = -(uint64_t)(int)v45;
            else
              v285 = 0;
            v65 += 2 * (int)v44 + 2 * v285;
            v41 = &v284[v285];
            v66 += 2 * (int)v24;
            v76 += v1026;
            --v272;
          }
          while (v272);
          if (v1052)
          {
            v286 = &v87[v1054];
            if (v286 >= v1052)
              v287 = -(uint64_t)(v1055 * v1027);
            else
              v287 = 0;
            v75 += 2 * v1055 + 2 * v287;
            if (v286 >= v1052)
              v288 = -(uint64_t)(v1054 * v1027);
            else
              v288 = 0;
            v87 = &v286[v288];
            v68 += 2 * v288 + 2 * v1054;
            v65 = (char *)v75;
            v41 = v87;
          }
          else
          {
            v41 += v1054;
            v65 += 2 * v1055;
          }
          v76 += v1044;
          v66 += 2 * v1058;
          --v271;
        }
        while (v271);
        goto LABEL_918;
      case 13:
        v289 = v1064[0];
        v290 = v1043;
        while (1)
        {
          v291 = v14;
          do
          {
            _S2 = 1.0;
            _S1 = 1.0;
            if ((_DWORD)v44)
            {
              _H1 = *(_WORD *)v65;
              __asm { FCVT            S1, H1 }
              if (_S1 <= 0.0)
                goto LABEL_337;
            }
            if ((_DWORD)v24)
            {
              _H2 = *(_WORD *)v66;
              __asm { FCVT            S2, H2 }
              if (_S2 <= 0.0)
              {
                *v76 = *v41;
                __asm { FCVT            H1, S1 }
                goto LABEL_335;
              }
            }
            _H3 = *v76;
            _H4 = *v41;
            __asm
            {
              FCVT            S3, H3
              FCVT            S4, H4
            }
            v300 = _S3 * _S4;
            _S3 = (float)(_S3 * _S4) + (float)(_S3 * (float)(1.0 - _S1));
            if (_S1 == 1.0)
              _S3 = v300;
            v302 = _S3 + (float)(_S4 * (float)(1.0 - _S2));
            if (_S2 != 1.0)
              _S3 = v302;
            __asm { FCVT            H3, S3 }
            if ((_DWORD)v24)
            {
              _S1 = (float)(_S1 + _S2) - (float)(_S2 * _S1);
              __asm { FCVT            H1, S1 }
              *v76 = _H3;
LABEL_335:
              *(_WORD *)v66 = _H1;
              goto LABEL_337;
            }
            *v76 = _H3;
LABEL_337:
            v306 = &v41[v1026];
            if ((unint64_t)v306 >= v68)
              v307 = -(uint64_t)(int)v45;
            else
              v307 = 0;
            v65 += 2 * (int)v44 + 2 * v307;
            v41 = &v306[v307];
            v66 += 2 * (int)v24;
            v76 += v1026;
            --v291;
          }
          while (v291);
          if (v1052)
          {
            v308 = &v290[v1054];
            if (v308 >= v1052)
              v309 = -(uint64_t)(v1055 * v1027);
            else
              v309 = 0;
            v75 += 2 * v1055 + 2 * v309;
            if (v308 >= v1052)
              v310 = -(uint64_t)(v1054 * v1027);
            else
              v310 = 0;
            v290 = &v308[v310];
            v68 += 2 * v310 + 2 * v1054;
            v65 = (char *)v75;
            v41 = v290;
          }
          else
          {
            v41 += v1054;
            v65 += 2 * v1055;
          }
          v76 += v79;
          v66 += 2 * v1058;
          if (!--v289)
          {
LABEL_733:
            v1043 = v290;
            goto LABEL_919;
          }
        }
      case 14:
        v311 = v1064[0];
        v290 = v1043;
        while (1)
        {
          v312 = v14;
          do
          {
            _S2 = 1.0;
            _S1 = 1.0;
            if ((_DWORD)v44)
            {
              _H1 = *(_WORD *)v65;
              __asm { FCVT            S1, H1 }
              if (_S1 <= 0.0)
                goto LABEL_363;
            }
            if ((_DWORD)v24)
            {
              _H2 = *(_WORD *)v66;
              __asm { FCVT            S2, H2 }
              if (_S2 <= 0.0)
              {
                *v76 = *v41;
                __asm { FCVT            H1, S1 }
                goto LABEL_361;
              }
            }
            _H3 = *v76;
            _H4 = *v41;
            __asm
            {
              FCVT            S3, H3
              FCVT            S4, H4
            }
            _S3 = _S3 + (float)(_S4 * (float)(1.0 - _S3));
            __asm { FCVT            H3, S3 }
            if ((_DWORD)v24)
            {
              _S1 = (float)(_S1 + _S2) - (float)(_S2 * _S1);
              __asm { FCVT            H1, S1 }
              *v76 = _H3;
LABEL_361:
              *(_WORD *)v66 = _H1;
              goto LABEL_363;
            }
            *v76 = _H3;
LABEL_363:
            v325 = &v41[v1026];
            if ((unint64_t)v325 >= v68)
              v326 = -(uint64_t)(int)v45;
            else
              v326 = 0;
            v65 += 2 * (int)v44 + 2 * v326;
            v41 = &v325[v326];
            v66 += 2 * (int)v24;
            v76 += v1026;
            --v312;
          }
          while (v312);
          if (v1052)
          {
            v327 = &v290[v1054];
            if (v327 >= v1052)
              v328 = -(uint64_t)(v1055 * v1027);
            else
              v328 = 0;
            v75 += 2 * v1055 + 2 * v328;
            if (v327 >= v1052)
              v329 = -(uint64_t)(v1054 * v1027);
            else
              v329 = 0;
            v290 = &v327[v329];
            v68 += 2 * v329 + 2 * v1054;
            v65 = (char *)v75;
            v41 = v290;
          }
          else
          {
            v41 += v1054;
            v65 += 2 * v1055;
          }
          v76 += v79;
          v66 += 2 * v1058;
          if (!--v311)
            goto LABEL_733;
        }
      case 15:
        v1037 = v14;
        v1042 = v75;
        v1019 = v9;
        v330 = (int)v44;
        v331 = v1064[0];
        v332 = 2 * (int)v24;
        v333 = -(uint64_t)(int)v45;
        *(_QWORD *)v1045 = v333;
        do
        {
          v1031 = v331;
          v334 = v1037;
          do
          {
            _S1 = 1.0;
            _S3 = 1.0;
            if (!(_DWORD)v44)
              goto LABEL_1326;
            _H0 = *(_WORD *)v65;
            __asm { FCVT            S3, H0 }
            if (_S3 > 0.0)
            {
              if (!(_DWORD)v24)
                goto LABEL_384;
LABEL_1326:
              _H0 = *(_WORD *)v66;
              __asm { FCVT            S1, H0 }
              if (_S1 <= 0.0)
              {
                *v76 = *v41;
                __asm { FCVT            H0, S3 }
                *(_WORD *)v66 = _H0;
              }
              else
              {
LABEL_384:
                _Q0.n128_u16[0] = *v76;
                v7.n128_u16[0] = *v41;
                _Q0.n128_u16[0] = PDAoverlayPDA(_Q0, _S1, v7, _S3);
                LODWORD(v24) = v1062;
                *v76 = _Q0.n128_u16[0];
                if ((_DWORD)v1062)
                  *(_WORD *)v66 = v339;
                LODWORD(v44) = v1060;
                v333 = *(_QWORD *)v1045;
              }
            }
            v341 = &v41[v1026];
            if ((unint64_t)v341 >= v68)
              v342 = v333;
            else
              v342 = 0;
            v65 += 2 * v330 + 2 * v342;
            v41 = &v341[v342];
            v66 += v332;
            v76 += v1026;
            --v334;
          }
          while (v334);
          if (v1052)
          {
            v343 = &v1043[v1054];
            v344 = -(uint64_t)(v1055 * v1027);
            if (v343 < v1052)
              v344 = 0;
            v65 = (char *)(v1042 + 2 * v1055 + 2 * v344);
            v345 = -(uint64_t)(v1054 * v1027);
            if (v343 < v1052)
              v345 = 0;
            v41 = &v343[v345];
            v68 += 2 * v345 + 2 * v1054;
            v1042 += 2 * v1055 + 2 * v344;
            v1043 = v41;
          }
          else
          {
            v41 += v1054;
            v65 += 2 * v1055;
          }
          v76 += v1044;
          v66 += 2 * v1058;
          v331 = v1031 - 1;
        }
        while (v1031 != 1);
        goto LABEL_556;
      case 16:
        v346 = v1064[0];
        v290 = v1043;
        while (1)
        {
          v347 = v14;
          do
          {
            _S2 = 1.0;
            _S1 = 1.0;
            if ((_DWORD)v44)
            {
              _H1 = *(_WORD *)v65;
              __asm { FCVT            S1, H1 }
              if (_S1 <= 0.0)
                goto LABEL_418;
            }
            if ((_DWORD)v24)
            {
              _H2 = *(_WORD *)v66;
              __asm { FCVT            S2, H2 }
              if (_S2 <= 0.0)
              {
                *v76 = *v41;
                __asm { FCVT            H1, S1 }
                goto LABEL_416;
              }
            }
            _H3 = *v76;
            _H4 = *v41;
            __asm
            {
              FCVT            S3, H3
              FCVT            S4, H4
            }
            v356 = _S1 * _S3;
            if ((float)(_S2 * _S4) < (float)(_S1 * _S3))
              v356 = _S2 * _S4;
            _S3 = v356 + (float)(_S3 * (float)(1.0 - _S1));
            if (_S1 == 1.0)
              _S3 = v356;
            v358 = _S3 + (float)(_S4 * (float)(1.0 - _S2));
            if (_S2 != 1.0)
              _S3 = v358;
            __asm { FCVT            H3, S3 }
            if ((_DWORD)v24)
            {
              _S1 = (float)(_S1 + _S2) - (float)(_S2 * _S1);
              __asm { FCVT            H1, S1 }
              *v76 = _H3;
LABEL_416:
              *(_WORD *)v66 = _H1;
              goto LABEL_418;
            }
            *v76 = _H3;
LABEL_418:
            v362 = &v41[v1026];
            if ((unint64_t)v362 >= v68)
              v363 = -(uint64_t)(int)v45;
            else
              v363 = 0;
            v65 += 2 * (int)v44 + 2 * v363;
            v41 = &v362[v363];
            v66 += 2 * (int)v24;
            v76 += v1026;
            --v347;
          }
          while (v347);
          if (v1052)
          {
            v364 = &v290[v1054];
            if (v364 >= v1052)
              v365 = -(uint64_t)(v1055 * v1027);
            else
              v365 = 0;
            v75 += 2 * v1055 + 2 * v365;
            if (v364 >= v1052)
              v366 = -(uint64_t)(v1054 * v1027);
            else
              v366 = 0;
            v290 = &v364[v366];
            v68 += 2 * v366 + 2 * v1054;
            v65 = (char *)v75;
            v41 = v290;
          }
          else
          {
            v41 += v1054;
            v65 += 2 * v1055;
          }
          v76 += v79;
          v66 += 2 * v1058;
          if (!--v346)
            goto LABEL_733;
        }
      case 17:
        v367 = v1064[0];
        v290 = v1043;
        while (1)
        {
          v368 = v14;
          do
          {
            _S2 = 1.0;
            _S1 = 1.0;
            if ((_DWORD)v44)
            {
              _H1 = *(_WORD *)v65;
              __asm { FCVT            S1, H1 }
              if (_S1 <= 0.0)
                goto LABEL_450;
            }
            if ((_DWORD)v24)
            {
              _H2 = *(_WORD *)v66;
              __asm { FCVT            S2, H2 }
              if (_S2 <= 0.0)
              {
                *v76 = *v41;
                __asm { FCVT            H1, S1 }
                goto LABEL_448;
              }
            }
            _H3 = *v76;
            _H4 = *v41;
            __asm
            {
              FCVT            S3, H3
              FCVT            S4, H4
            }
            v377 = _S1 * _S3;
            if ((float)(_S2 * _S4) > (float)(_S1 * _S3))
              v377 = _S2 * _S4;
            _S3 = v377 + (float)(_S3 * (float)(1.0 - _S1));
            if (_S1 == 1.0)
              _S3 = v377;
            v379 = _S3 + (float)(_S4 * (float)(1.0 - _S2));
            if (_S2 != 1.0)
              _S3 = v379;
            __asm { FCVT            H3, S3 }
            if ((_DWORD)v24)
            {
              _S1 = (float)(_S1 + _S2) - (float)(_S2 * _S1);
              __asm { FCVT            H1, S1 }
              *v76 = _H3;
LABEL_448:
              *(_WORD *)v66 = _H1;
              goto LABEL_450;
            }
            *v76 = _H3;
LABEL_450:
            v383 = &v41[v1026];
            if ((unint64_t)v383 >= v68)
              v384 = -(uint64_t)(int)v45;
            else
              v384 = 0;
            v65 += 2 * (int)v44 + 2 * v384;
            v41 = &v383[v384];
            v66 += 2 * (int)v24;
            v76 += v1026;
            --v368;
          }
          while (v368);
          if (v1052)
          {
            v385 = &v290[v1054];
            if (v385 >= v1052)
              v386 = -(uint64_t)(v1055 * v1027);
            else
              v386 = 0;
            v75 += 2 * v1055 + 2 * v386;
            if (v385 >= v1052)
              v387 = -(uint64_t)(v1054 * v1027);
            else
              v387 = 0;
            v290 = &v385[v387];
            v68 += 2 * v387 + 2 * v1054;
            v65 = (char *)v75;
            v41 = v290;
          }
          else
          {
            v41 += v1054;
            v65 += 2 * v1055;
          }
          v76 += v79;
          v66 += 2 * v1058;
          if (!--v367)
            goto LABEL_733;
        }
      case 18:
        v1038 = v14;
        v1042 = v75;
        v1019 = v9;
        v388 = (int)v44;
        v389 = v1064[0];
        v390 = 2 * (int)v24;
        v391 = -(uint64_t)(int)v45;
        *(_QWORD *)v1046 = v391;
        do
        {
          v1032 = v389;
          v392 = v1038;
          do
          {
            _S1 = 1.0;
            _S3 = 1.0;
            if (!(_DWORD)v44)
              goto LABEL_1327;
            _H0 = *(_WORD *)v65;
            __asm { FCVT            S3, H0 }
            if (_S3 > 0.0)
            {
              if (!(_DWORD)v24)
                goto LABEL_471;
LABEL_1327:
              _H0 = *(_WORD *)v66;
              __asm { FCVT            S1, H0 }
              if (_S1 <= 0.0)
              {
                *v76 = *v41;
                __asm { FCVT            H0, S3 }
                *(_WORD *)v66 = _H0;
              }
              else
              {
LABEL_471:
                _Q0.n128_u16[0] = *v76;
                v7.n128_u16[0] = *v41;
                _Q0.n128_u16[0] = PDAcolordodgePDA(_Q0, _S1, v7, _S3);
                LODWORD(v24) = v1062;
                *v76 = _Q0.n128_u16[0];
                if ((_DWORD)v1062)
                  *(_WORD *)v66 = v397;
                LODWORD(v44) = v1060;
                v391 = *(_QWORD *)v1046;
              }
            }
            v399 = &v41[v1026];
            if ((unint64_t)v399 >= v68)
              v400 = v391;
            else
              v400 = 0;
            v65 += 2 * v388 + 2 * v400;
            v41 = &v399[v400];
            v66 += v390;
            v76 += v1026;
            --v392;
          }
          while (v392);
          if (v1052)
          {
            v401 = &v1043[v1054];
            v402 = -(uint64_t)(v1055 * v1027);
            if (v401 < v1052)
              v402 = 0;
            v65 = (char *)(v1042 + 2 * v1055 + 2 * v402);
            v403 = -(uint64_t)(v1054 * v1027);
            if (v401 < v1052)
              v403 = 0;
            v41 = &v401[v403];
            v68 += 2 * v403 + 2 * v1054;
            v1042 += 2 * v1055 + 2 * v402;
            v1043 = v41;
          }
          else
          {
            v41 += v1054;
            v65 += 2 * v1055;
          }
          v76 += v1044;
          v66 += 2 * v1058;
          v389 = v1032 - 1;
        }
        while (v1032 != 1);
        goto LABEL_556;
      case 19:
        v1039 = v14;
        v1042 = v75;
        v1019 = v9;
        v404 = (int)v44;
        v405 = v1064[0];
        v406 = 2 * (int)v24;
        v407 = -(uint64_t)(int)v45;
        *(_QWORD *)v1047 = v407;
        do
        {
          v1033 = v405;
          v408 = v1039;
          do
          {
            _S1 = 1.0;
            _S3 = 1.0;
            if (!(_DWORD)v44)
              goto LABEL_1328;
            _H0 = *(_WORD *)v65;
            __asm { FCVT            S3, H0 }
            if (_S3 > 0.0)
            {
              if (!(_DWORD)v24)
                goto LABEL_494;
LABEL_1328:
              _H0 = *(_WORD *)v66;
              __asm { FCVT            S1, H0 }
              if (_S1 <= 0.0)
              {
                *v76 = *v41;
                __asm { FCVT            H0, S3 }
                *(_WORD *)v66 = _H0;
              }
              else
              {
LABEL_494:
                _Q0.n128_u16[0] = *v76;
                v7.n128_u16[0] = *v41;
                _Q0.n128_u16[0] = PDAcolorburnPDA(_Q0, _S1, v7, _S3);
                LODWORD(v24) = v1062;
                *v76 = _Q0.n128_u16[0];
                if ((_DWORD)v1062)
                  *(_WORD *)v66 = v413;
                LODWORD(v44) = v1060;
                v407 = *(_QWORD *)v1047;
              }
            }
            v415 = &v41[v1026];
            if ((unint64_t)v415 >= v68)
              v416 = v407;
            else
              v416 = 0;
            v65 += 2 * v404 + 2 * v416;
            v41 = &v415[v416];
            v66 += v406;
            v76 += v1026;
            --v408;
          }
          while (v408);
          if (v1052)
          {
            v417 = &v1043[v1054];
            v418 = -(uint64_t)(v1055 * v1027);
            if (v417 < v1052)
              v418 = 0;
            v65 = (char *)(v1042 + 2 * v1055 + 2 * v418);
            v419 = -(uint64_t)(v1054 * v1027);
            if (v417 < v1052)
              v419 = 0;
            v41 = &v417[v419];
            v68 += 2 * v419 + 2 * v1054;
            v1042 += 2 * v1055 + 2 * v418;
            v1043 = v41;
          }
          else
          {
            v41 += v1054;
            v65 += 2 * v1055;
          }
          v76 += v1044;
          v66 += 2 * v1058;
          v405 = v1033 - 1;
        }
        while (v1033 != 1);
        goto LABEL_556;
      case 20:
        v1040 = v14;
        v1042 = v75;
        v1019 = v9;
        v420 = (int)v44;
        v421 = v1064[0];
        v422 = 2 * (int)v24;
        v423 = -(uint64_t)(int)v45;
        *(_QWORD *)v1048 = v423;
        do
        {
          v1034 = v421;
          v424 = v1040;
          do
          {
            _S1 = 1.0;
            _S3 = 1.0;
            if (!(_DWORD)v44)
              goto LABEL_1329;
            _H0 = *(_WORD *)v65;
            __asm { FCVT            S3, H0 }
            if (_S3 > 0.0)
            {
              if (!(_DWORD)v24)
                goto LABEL_517;
LABEL_1329:
              _H0 = *(_WORD *)v66;
              __asm { FCVT            S1, H0 }
              if (_S1 <= 0.0)
              {
                *v76 = *v41;
                __asm { FCVT            H0, S3 }
                *(_WORD *)v66 = _H0;
              }
              else
              {
LABEL_517:
                _Q0.n128_u16[0] = *v76;
                v7.n128_u16[0] = *v41;
                _Q0.n128_u16[0] = PDAsoftlightPDA(_Q0, _S1, v7, _S3);
                LODWORD(v24) = v1062;
                *v76 = _Q0.n128_u16[0];
                if ((_DWORD)v1062)
                  *(_WORD *)v66 = v429;
                LODWORD(v44) = v1060;
                v423 = *(_QWORD *)v1048;
              }
            }
            v431 = &v41[v1026];
            if ((unint64_t)v431 >= v68)
              v432 = v423;
            else
              v432 = 0;
            v65 += 2 * v420 + 2 * v432;
            v41 = &v431[v432];
            v66 += v422;
            v76 += v1026;
            --v424;
          }
          while (v424);
          if (v1052)
          {
            v433 = &v1043[v1054];
            v434 = -(uint64_t)(v1055 * v1027);
            if (v433 < v1052)
              v434 = 0;
            v65 = (char *)(v1042 + 2 * v1055 + 2 * v434);
            v435 = -(uint64_t)(v1054 * v1027);
            if (v433 < v1052)
              v435 = 0;
            v41 = &v433[v435];
            v68 += 2 * v435 + 2 * v1054;
            v1042 += 2 * v1055 + 2 * v434;
            v1043 = v41;
          }
          else
          {
            v41 += v1054;
            v65 += 2 * v1055;
          }
          v76 += v1044;
          v66 += 2 * v1058;
          v421 = v1034 - 1;
        }
        while (v1034 != 1);
        goto LABEL_556;
      case 21:
        v1041 = v14;
        v1042 = v75;
        v1019 = v9;
        v436 = (int)v44;
        v437 = v1064[0];
        v438 = 2 * (int)v24;
        v439 = -(uint64_t)(int)v45;
        *(_QWORD *)v1049 = v439;
        do
        {
          v1035 = v437;
          v440 = v1041;
          do
          {
            _S1 = 1.0;
            _S3 = 1.0;
            if (!(_DWORD)v44)
              goto LABEL_1330;
            _H0 = *(_WORD *)v65;
            __asm { FCVT            S3, H0 }
            if (_S3 > 0.0)
            {
              if (!(_DWORD)v24)
                goto LABEL_540;
LABEL_1330:
              _H0 = *(_WORD *)v66;
              __asm { FCVT            S1, H0 }
              if (_S1 <= 0.0)
              {
                *v76 = *v41;
                __asm { FCVT            H0, S3 }
                *(_WORD *)v66 = _H0;
              }
              else
              {
LABEL_540:
                _Q0.n128_u16[0] = *v76;
                v7.n128_u16[0] = *v41;
                _Q0.n128_u16[0] = PDAhardlightPDA(_Q0, _S1, v7, _S3);
                LODWORD(v24) = v1062;
                *v76 = _Q0.n128_u16[0];
                if ((_DWORD)v1062)
                  *(_WORD *)v66 = v445;
                LODWORD(v44) = v1060;
                v439 = *(_QWORD *)v1049;
              }
            }
            v447 = &v41[v1026];
            if ((unint64_t)v447 >= v68)
              v448 = v439;
            else
              v448 = 0;
            v65 += 2 * v436 + 2 * v448;
            v41 = &v447[v448];
            v66 += v438;
            v76 += v1026;
            --v440;
          }
          while (v440);
          if (v1052)
          {
            v449 = &v1043[v1054];
            v450 = -(uint64_t)(v1055 * v1027);
            if (v449 < v1052)
              v450 = 0;
            v65 = (char *)(v1042 + 2 * v1055 + 2 * v450);
            v451 = -(uint64_t)(v1054 * v1027);
            if (v449 < v1052)
              v451 = 0;
            v41 = &v449[v451];
            v68 += 2 * v451 + 2 * v1054;
            v1042 += 2 * v1055 + 2 * v450;
            v1043 = v41;
          }
          else
          {
            v41 += v1054;
            v65 += 2 * v1055;
          }
          v76 += v1044;
          v66 += 2 * v1058;
          v437 = v1035 - 1;
        }
        while (v1035 != 1);
LABEL_556:
        v62 = v68;
        v1064[0] = 0;
        v11 = v1020;
        v13 = v1018;
        goto LABEL_557;
      case 22:
        v452 = v1064[0];
        v290 = v1043;
        while (1)
        {
          v453 = v14;
          do
          {
            _S1 = 1.0;
            _S0 = 1.0;
            if ((_DWORD)v44)
            {
              _H0 = *(_WORD *)v65;
              __asm { FCVT            S0, H0 }
              if (_S0 <= 0.0)
                goto LABEL_571;
            }
            if ((_DWORD)v24)
            {
              _H1 = *(_WORD *)v66;
              __asm { FCVT            S1, H1 }
              if (_S1 <= 0.0)
              {
                *v76 = *v41;
                __asm { FCVT            H0, S0 }
                goto LABEL_569;
              }
            }
            _H2 = *v76;
            _H3 = *v41;
            __asm
            {
              FCVT            S2, H2
              FCVT            S3, H3
            }
            v462 = _S2 + _S3;
            v463 = _S0 * _S2;
            v464 = _S1 * _S3;
            v465 = v462 - v463;
            v466 = v463 - v464;
            v467 = v465 - v464;
            if (v466 < 0.0)
              v466 = -v466;
            _S2 = v467 + v466;
            __asm { FCVT            H2, S2 }
            if ((_DWORD)v24)
            {
              _S0 = (float)(_S0 + _S1) - (float)(_S1 * _S0);
              __asm { FCVT            H0, S0 }
              *v76 = _H2;
LABEL_569:
              *(_WORD *)v66 = _H0;
              goto LABEL_571;
            }
            *v76 = _H2;
LABEL_571:
            v472 = &v41[v1026];
            if ((unint64_t)v472 >= v68)
              v473 = -(uint64_t)(int)v45;
            else
              v473 = 0;
            v65 += 2 * (int)v44 + 2 * v473;
            v41 = &v472[v473];
            v66 += 2 * (int)v24;
            v76 += v1026;
            --v453;
          }
          while (v453);
          if (v1052)
          {
            v474 = &v290[v1054];
            if (v474 >= v1052)
              v475 = -(uint64_t)(v1055 * v1027);
            else
              v475 = 0;
            v75 += 2 * v1055 + 2 * v475;
            if (v474 >= v1052)
              v476 = -(uint64_t)(v1054 * v1027);
            else
              v476 = 0;
            v290 = &v474[v476];
            v68 += 2 * v476 + 2 * v1054;
            v65 = (char *)v75;
            v41 = v290;
          }
          else
          {
            v41 += v1054;
            v65 += 2 * v1055;
          }
          v76 += v79;
          v66 += 2 * v1058;
          if (!--v452)
            goto LABEL_733;
        }
      case 23:
        v477 = v1064[0];
        v290 = v1043;
        while (1)
        {
          v478 = v14;
          do
          {
            _S2 = 1.0;
            _S1 = 1.0;
            if ((_DWORD)v44)
            {
              _H1 = *(_WORD *)v65;
              __asm { FCVT            S1, H1 }
              if (_S1 <= 0.0)
                goto LABEL_597;
            }
            if ((_DWORD)v24)
            {
              _H2 = *(_WORD *)v66;
              __asm { FCVT            S2, H2 }
              if (_S2 <= 0.0)
              {
                *v76 = *v41;
                __asm { FCVT            H1, S1 }
                goto LABEL_595;
              }
            }
            _H3 = *v76;
            _H4 = *v41;
            __asm
            {
              FCVT            S3, H3
              FCVT            S4, H4
            }
            _S3 = (float)(_S3 + _S4) + (float)((float)(_S3 * _S4) * -2.0);
            __asm { FCVT            H3, S3 }
            if ((_DWORD)v24)
            {
              _S1 = (float)(_S1 + _S2) - (float)(_S2 * _S1);
              __asm { FCVT            H1, S1 }
              *v76 = _H3;
LABEL_595:
              *(_WORD *)v66 = _H1;
              goto LABEL_597;
            }
            *v76 = _H3;
LABEL_597:
            v491 = &v41[v1026];
            if ((unint64_t)v491 >= v68)
              v492 = -(uint64_t)(int)v45;
            else
              v492 = 0;
            v65 += 2 * (int)v44 + 2 * v492;
            v41 = &v491[v492];
            v66 += 2 * (int)v24;
            v76 += v1026;
            --v478;
          }
          while (v478);
          if (v1052)
          {
            v493 = &v290[v1054];
            if (v493 >= v1052)
              v494 = -(uint64_t)(v1055 * v1027);
            else
              v494 = 0;
            v75 += 2 * v1055 + 2 * v494;
            if (v493 >= v1052)
              v495 = -(uint64_t)(v1054 * v1027);
            else
              v495 = 0;
            v290 = &v493[v495];
            v68 += 2 * v495 + 2 * v1054;
            v65 = (char *)v75;
            v41 = v290;
          }
          else
          {
            v41 += v1054;
            v65 += 2 * v1055;
          }
          v76 += v79;
          v66 += 2 * v1058;
          if (!--v477)
            goto LABEL_733;
        }
      case 24:
        v496 = v1064[0];
        v290 = v1043;
        while (1)
        {
          v497 = v14;
          do
          {
            _S3 = 1.0;
            _S2 = 1.0;
            if ((_DWORD)v44)
            {
              _H2 = *(_WORD *)v65;
              __asm { FCVT            S2, H2 }
              if (_S2 <= 0.0)
                goto LABEL_628;
            }
            if ((_DWORD)v24)
            {
              _H3 = *(_WORD *)v66;
              __asm { FCVT            S3, H3 }
              if (_S3 <= 0.0)
              {
                *v76 = *v41;
                __asm { FCVT            H2, S2 }
                goto LABEL_626;
              }
            }
            _H4 = *v76;
            _H5 = *v41;
            __asm
            {
              FCVT            S4, H4
              FCVT            S5, H5
            }
            v506 = _S4 - (float)(_S2 * _S4);
            if (_S2 == 1.0)
            {
              v507 = 0.0;
            }
            else
            {
              _S4 = _S2 * _S4;
              v507 = v506;
            }
            v508 = (float)(v507 + _S5) - (float)(_S3 * _S5);
            if (_S3 == 1.0)
              v508 = v507;
            _S4 = _S4 + v508;
            __asm { FCVT            H4, S4 }
            if ((_DWORD)v24)
            {
              _S2 = (float)(_S2 + _S3) - (float)(_S2 * _S3);
              __asm { FCVT            H2, S2 }
              *v76 = _H4;
LABEL_626:
              *(_WORD *)v66 = _H2;
              goto LABEL_628;
            }
            *v76 = _H4;
LABEL_628:
            v513 = &v41[v1026];
            if ((unint64_t)v513 >= v68)
              v514 = -(uint64_t)(int)v45;
            else
              v514 = 0;
            v65 += 2 * (int)v44 + 2 * v514;
            v41 = &v513[v514];
            v66 += 2 * (int)v24;
            v76 += v1026;
            --v497;
          }
          while (v497);
          if (v1052)
          {
            v515 = &v290[v1054];
            if (v515 >= v1052)
              v516 = -(uint64_t)(v1055 * v1027);
            else
              v516 = 0;
            v75 += 2 * v1055 + 2 * v516;
            if (v515 >= v1052)
              v517 = -(uint64_t)(v1054 * v1027);
            else
              v517 = 0;
            v290 = &v515[v517];
            v68 += 2 * v517 + 2 * v1054;
            v65 = (char *)v75;
            v41 = v290;
          }
          else
          {
            v41 += v1054;
            v65 += 2 * v1055;
          }
          v76 += v79;
          v66 += 2 * v1058;
          if (!--v496)
            goto LABEL_733;
        }
      case 25:
        v518 = v1064[0];
        v290 = v1043;
        while (1)
        {
          v519 = v14;
          do
          {
            _S3 = 1.0;
            _S2 = 1.0;
            if ((_DWORD)v44)
            {
              _H2 = *(_WORD *)v65;
              __asm { FCVT            S2, H2 }
              if (_S2 <= 0.0)
                goto LABEL_659;
            }
            if ((_DWORD)v24)
            {
              _H3 = *(_WORD *)v66;
              __asm { FCVT            S3, H3 }
              if (_S3 <= 0.0)
              {
                *v76 = *v41;
                __asm { FCVT            H2, S2 }
                goto LABEL_657;
              }
            }
            _H4 = *v76;
            _H5 = *v41;
            __asm
            {
              FCVT            S4, H4
              FCVT            S5, H5
            }
            v528 = _S4 - (float)(_S2 * _S4);
            if (_S2 == 1.0)
            {
              v529 = 0.0;
            }
            else
            {
              _S4 = _S2 * _S4;
              v529 = v528;
            }
            v530 = (float)(v529 + _S5) - (float)(_S3 * _S5);
            if (_S3 == 1.0)
              v530 = v529;
            _S4 = _S4 + v530;
            __asm { FCVT            H4, S4 }
            if ((_DWORD)v24)
            {
              _S2 = (float)(_S2 + _S3) - (float)(_S2 * _S3);
              __asm { FCVT            H2, S2 }
              *v76 = _H4;
LABEL_657:
              *(_WORD *)v66 = _H2;
              goto LABEL_659;
            }
            *v76 = _H4;
LABEL_659:
            v535 = &v41[v1026];
            if ((unint64_t)v535 >= v68)
              v536 = -(uint64_t)(int)v45;
            else
              v536 = 0;
            v65 += 2 * (int)v44 + 2 * v536;
            v41 = &v535[v536];
            v66 += 2 * (int)v24;
            v76 += v1026;
            --v519;
          }
          while (v519);
          if (v1052)
          {
            v537 = &v290[v1054];
            if (v537 >= v1052)
              v538 = -(uint64_t)(v1055 * v1027);
            else
              v538 = 0;
            v75 += 2 * v1055 + 2 * v538;
            if (v537 >= v1052)
              v539 = -(uint64_t)(v1054 * v1027);
            else
              v539 = 0;
            v290 = &v537[v539];
            v68 += 2 * v539 + 2 * v1054;
            v65 = (char *)v75;
            v41 = v290;
          }
          else
          {
            v41 += v1054;
            v65 += 2 * v1055;
          }
          v76 += v79;
          v66 += 2 * v1058;
          if (!--v518)
            goto LABEL_733;
        }
      case 26:
        v540 = v1064[0];
        v290 = v1043;
        while (1)
        {
          v541 = v14;
          do
          {
            _S3 = 1.0;
            _S2 = 1.0;
            if ((_DWORD)v44)
            {
              _H2 = *(_WORD *)v65;
              __asm { FCVT            S2, H2 }
              if (_S2 <= 0.0)
                goto LABEL_689;
            }
            if ((_DWORD)v24)
            {
              _H3 = *(_WORD *)v66;
              __asm { FCVT            S3, H3 }
              if (_S3 <= 0.0)
              {
                *v76 = *v41;
                __asm { FCVT            H2, S2 }
                goto LABEL_687;
              }
            }
            _H4 = *v41;
            _H5 = *v76;
            __asm
            {
              FCVT            S5, H5
              FCVT            S4, H4
            }
            v550 = _S4 - (float)(_S3 * _S4);
            if (_S3 == 1.0)
              v550 = 0.0;
            v551 = (float)(v550 + _S5) - (float)(_S2 * _S5);
            if (_S2 != 1.0)
            {
              _S5 = _S2 * _S5;
              v550 = v551;
            }
            _S4 = _S5 + v550;
            __asm { FCVT            H4, S4 }
            if ((_DWORD)v24)
            {
              _S2 = (float)(_S2 + _S3) - (float)(_S2 * _S3);
              __asm { FCVT            H2, S2 }
              *v76 = _H4;
LABEL_687:
              *(_WORD *)v66 = _H2;
              goto LABEL_689;
            }
            *v76 = _H4;
LABEL_689:
            v556 = &v41[v1026];
            if ((unint64_t)v556 >= v68)
              v557 = -(uint64_t)(int)v45;
            else
              v557 = 0;
            v65 += 2 * (int)v44 + 2 * v557;
            v41 = &v556[v557];
            v66 += 2 * (int)v24;
            v76 += v1026;
            --v541;
          }
          while (v541);
          if (v1052)
          {
            v558 = &v290[v1054];
            if (v558 >= v1052)
              v559 = -(uint64_t)(v1055 * v1027);
            else
              v559 = 0;
            v75 += 2 * v1055 + 2 * v559;
            if (v558 >= v1052)
              v560 = -(uint64_t)(v1054 * v1027);
            else
              v560 = 0;
            v290 = &v558[v560];
            v68 += 2 * v560 + 2 * v1054;
            v65 = (char *)v75;
            v41 = v290;
          }
          else
          {
            v41 += v1054;
            v65 += 2 * v1055;
          }
          v76 += v79;
          v66 += 2 * v1058;
          if (!--v540)
            goto LABEL_733;
        }
      case 27:
        v561 = v1064[0];
        v290 = v1043;
        break;
      default:
        v1042 = v75;
        v11 = v74;
        v62 = v68;
        goto LABEL_920;
    }
LABEL_705:
    v562 = v14;
    while (1)
    {
      _S3 = 1.0;
      _S2 = 1.0;
      if (!(_DWORD)v44)
        goto LABEL_1331;
      _H2 = *(_WORD *)v65;
      __asm { FCVT            S2, H2 }
      if (_S2 > 0.0)
      {
        if (!(_DWORD)v24)
          goto LABEL_710;
LABEL_1331:
        _H3 = *(_WORD *)v66;
        __asm { FCVT            S3, H3 }
        if (_S3 <= 0.0)
        {
          *v76 = *v41;
          __asm { FCVT            H2, S2 }
        }
        else
        {
LABEL_710:
          _H4 = *v76;
          _H5 = *v41;
          __asm
          {
            FCVT            S5, H5
            FCVT            S4, H4
          }
          v571 = _S4 - (float)(_S2 * _S4);
          if (_S2 == 1.0)
            v571 = 0.0;
          v572 = (float)(v571 + _S5) - (float)(_S3 * _S5);
          if (_S3 != 1.0)
          {
            _S5 = _S3 * _S5;
            v571 = v572;
          }
          _S4 = _S5 + v571;
          __asm { FCVT            H4, S4 }
          if (!(_DWORD)v24)
          {
            *v76 = _H4;
            goto LABEL_719;
          }
          _S2 = (float)(_S2 + _S3) - (float)(_S2 * _S3);
          __asm { FCVT            H2, S2 }
          *v76 = _H4;
        }
        *(_WORD *)v66 = _H2;
      }
LABEL_719:
      v577 = &v41[v1026];
      if ((unint64_t)v577 >= v68)
        v578 = -(uint64_t)(int)v45;
      else
        v578 = 0;
      v65 += 2 * (int)v44 + 2 * v578;
      v41 = &v577[v578];
      v66 += 2 * (int)v24;
      v76 += v1026;
      if (!--v562)
      {
        if (v1052)
        {
          v579 = &v290[v1054];
          if (v579 >= v1052)
            v580 = -(uint64_t)(v1055 * v1027);
          else
            v580 = 0;
          v75 += 2 * v1055 + 2 * v580;
          if (v579 >= v1052)
            v581 = -(uint64_t)(v1054 * v1027);
          else
            v581 = 0;
          v290 = &v579[v581];
          v68 += 2 * v581 + 2 * v1054;
          v65 = (char *)v75;
          v41 = v290;
        }
        else
        {
          v41 += v1054;
          v65 += 2 * v1055;
        }
        v76 += v79;
        v66 += 2 * v1058;
        if (!--v561)
          goto LABEL_733;
        goto LABEL_705;
      }
    }
  }
  v19 = *(_DWORD *)(v4 + 128);
  if ((v19 | 8) == 8)
  {
    if ((*(_DWORD *)v4 & 0xFF00) == 0x400)
      Wf16_mark_constmask(v4, v11, _Q0, v6, v7);
    else
      Wf16_mark_pixelmask(v4, v11, _Q0, v6, v7);
  }
  else
  {
    v25 = *(_DWORD *)(v4 + 112);
    v26 = *(_DWORD *)(v4 + 116);
    v27 = v4;
    v28 = (v25 + 15) & 0xFFFFFFF0;
    v29 = v28 * v26;
    if ((int)v29 <= 4096)
    {
      v31 = v1074;
    }
    else
    {
      v30 = malloc_type_malloc(v29, 0x89490681uLL);
      if (!v30)
        return 1;
      v31 = v30;
      v18 = *(uint16x4_t **)(v27 + 136);
      v19 = *(_DWORD *)(v27 + 128);
    }
    CGSConvertBitsToMask(v18, *(_DWORD *)(v27 + 124), v31, v28, v25, v26, v19);
    v54 = *(_OWORD *)(v27 + 112);
    v1070 = *(_OWORD *)(v27 + 96);
    v1071 = v54;
    v55 = *(_OWORD *)(v27 + 144);
    v1072 = *(_OWORD *)(v27 + 128);
    v1073 = v55;
    v56 = *(_OWORD *)(v27 + 48);
    v1066 = *(_OWORD *)(v27 + 32);
    v1067 = v56;
    v57 = *(_OWORD *)(v27 + 80);
    v1068 = *(_OWORD *)(v27 + 64);
    v1069 = v57;
    v58 = *(__n128 *)v27;
    v59 = *(_OWORD *)(v27 + 16);
    *(_OWORD *)v1064 = *(_OWORD *)v27;
    v1065 = v59;
    HIDWORD(v1071) = (v25 + 15) & 0xFFFFFFF0;
    *((_QWORD *)&v1072 + 1) = v31;
    if (BYTE1(v1064[0]) << 8 == 1024)
      Wf16_mark_constmask((uint64_t)v1064, v11, v58, *(double *)&v59, v53);
    else
      Wf16_mark_pixelmask((uint64_t)v1064, v11, v58, *(double *)&v59, v53);
    if (v31 != (_BYTE *)v1074)
    {
LABEL_66:
      v78 = v31;
      goto LABEL_945;
    }
  }
  return 1;
}

__int16 PDAoverlayPDA@<H0>(__n128 _Q0@<Q0>, float a2@<S1>, __n128 _Q2@<Q2>, float a4@<S3>)
{
  float v10;
  BOOL v11;
  float v12;
  __int16 result;

  __asm
  {
    FCVT            S0, H0
    FCVT            S2, H2
  }
  v10 = (float)(_S0 * _S2) + (float)(_S0 * _S2);
  v11 = (float)(a2 * 0.5) <= _S0;
  v12 = (float)((float)((float)((float)(a2 + 1.0) * _S2) + (float)(_S0 * (float)(a4 + 1.0))) - v10) - (float)(a2 * a4);
  _S0 = (float)((float)((float)(1.0 - a2) * _S2) + (float)(_S0 * (float)(1.0 - a4))) + v10;
  if (v11)
    _S0 = v12;
  _S1 = (float)(a2 + a4) - (float)(a2 * a4);
  __asm
  {
    FCVT            H0, S0
    FCVT            H1, S1
  }
  return result;
}

__int16 PDAcolordodgePDA@<H0>(__n128 _Q0@<Q0>, float a2@<S1>, __n128 _Q2@<Q2>, float a4@<S3>)
{
  float v10;
  float v11;
  __int16 result;

  __asm
  {
    FCVT            S4, H0
    FCVT            S0, H2
  }
  v10 = 0.0;
  if (_S4 != 0.0)
  {
    if (_S0 == a4)
      v10 = 1.0;
    else
      v10 = (float)((float)(a4 * a4) * _S4) / (float)(a4 - _S0);
  }
  v11 = v10 + (float)(_S4 * (float)(1.0 - a4));
  if (a4 != 1.0)
    v10 = v11;
  _S0 = v10 + (float)(_S0 * (float)(1.0 - a2));
  if (a2 == 1.0)
    _S0 = v10;
  _S1 = (float)(a2 + a4) - (float)(a2 * a4);
  if (_S0 > _S1)
    _S0 = _S1;
  __asm
  {
    FCVT            H0, S0
    FCVT            H1, S1
  }
  return result;
}

__int16 PDAcolorburnPDA@<H0>(__n128 _Q0@<Q0>, float a2@<S1>, __n128 _Q2@<Q2>, float a4@<S3>)
{
  float v10;
  float v12;
  __int16 result;

  __asm
  {
    FCVT            S5, H0
    FCVT            S4, H2
  }
  v10 = (float)(a2 * a4) + (float)(_S5 * (float)(1.0 - a4));
  if (a4 == 1.0)
    v10 = a2 * a4;
  if (a2 == 1.0)
    _S2 = v10;
  else
    _S2 = v10 + (float)(_S4 * (float)(1.0 - a2));
  v12 = a2 - _S5;
  if (v12 != 0.0)
  {
    if (_S4 == 0.0 || (_S2 = _S2 - (float)((float)(v12 * (float)(a4 * a4)) / _S4), _S2 < 0.0))
      _S2 = 0.0;
  }
  _S1 = (float)(a2 + a4) - (float)(a2 * a4);
  __asm
  {
    FCVT            H0, S2
    FCVT            H1, S1
  }
  return result;
}

__int16 PDAhardlightPDA@<H0>(__n128 _Q0@<Q0>, float a2@<S1>, __n128 _Q2@<Q2>, float a4@<S3>)
{
  float v10;
  float v11;
  __int16 result;

  __asm
  {
    FCVT            S0, H0
    FCVT            S2, H2
  }
  v10 = (float)(_S0 * _S2) + (float)(_S0 * _S2);
  v11 = (float)((float)((float)(1.0 - a2) * _S2) + (float)(_S0 * (float)(1.0 - a4))) + v10;
  _S0 = (float)((float)((float)((float)(a2 + 1.0) * _S2) + (float)(_S0 * (float)(a4 + 1.0))) - v10) - (float)(a2 * a4);
  if ((float)(a4 * 0.5) >= _S2)
    _S0 = v11;
  _S1 = (float)(a2 + a4) - (float)(a2 * a4);
  __asm
  {
    FCVT            H0, S0
    FCVT            H1, S1
  }
  return result;
}

__int16 PDAsoftlightPDA@<H0>(__n128 _Q0@<Q0>, float a2@<S1>, __n128 _Q2@<Q2>, float a4@<S3>)
{
  float v10;
  float v11;
  __int16 result;

  __asm
  {
    FCVT            S4, H0
    FCVT            S0, H2
  }
  v10 = 0.0;
  if (a2 != 0.0)
  {
    v10 = (float)((float)(_S4 * _S0) + (float)(_S4 * _S0))
        - (float)((float)((float)(_S4 * _S4) * (float)((float)(_S0 + _S0) - a4)) / a2);
    if (v10 < 0.0)
      v10 = 0.0;
  }
  v11 = v10 + (float)(_S4 * (float)(1.0 - a4));
  if (a4 != 1.0)
    v10 = v11;
  _S0 = v10 + (float)(_S0 * (float)(1.0 - a2));
  if (a2 == 1.0)
    _S0 = v10;
  _S1 = (float)(a2 + a4) - (float)(a2 * a4);
  __asm
  {
    FCVT            H0, S0
    FCVT            H1, S1
  }
  return result;
}

void Wf16_mark_constmask(uint64_t a1, int a2, __n128 _Q0, double a4, __n128 _Q2)
{
  uint64_t v5;
  uint64_t v6;
  __int16 *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int16 *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int16x4_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  float v37;
  unsigned int v41;
  int v42;
  unsigned int *v43;
  uint64_t v44;
  int16x4_t *v45;
  __int16 *v46;
  char v47;
  int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  float v52;
  unsigned int v53;
  int v54;
  unsigned int *v55;
  uint64_t v56;
  int16x4_t *v57;
  __int16 *v58;
  char v59;
  int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v65;
  int v66;
  unsigned int v67;
  float v73;
  float v81;
  uint64_t v86;
  int v87;
  unsigned int v88;
  float v91;
  float v94;
  float v97;
  float v103;
  uint64_t v108;
  int v109;
  float v112;
  uint64_t v122;
  int v123;
  unsigned int v124;
  float v127;
  float v128;
  float v137;
  uint64_t v140;
  int v141;
  unsigned int v142;
  float v150;
  float v154;
  uint64_t v155;
  int v156;
  unsigned int v157;
  float v161;
  uint64_t v168;
  int v169;
  float v170;
  float v179;
  uint64_t v183;
  int v184;
  float v187;
  uint64_t v197;
  int v198;
  float v199;
  float v205;
  float v209;
  uint64_t v214;
  int v215;
  float v216;
  uint64_t v230;
  int v231;
  float v232;
  float v243;
  float v244;
  uint64_t v248;
  int v249;
  float v250;
  uint64_t v264;
  int v265;
  float v266;
  uint64_t v273;
  int v274;
  float v275;
  float v286;
  float v287;
  uint64_t v291;
  int v292;
  float v293;
  float v304;
  float v305;
  uint64_t v309;
  int v310;
  float v311;
  uint64_t v318;
  int v319;
  float v320;
  uint64_t v327;
  int v328;
  float v329;
  uint64_t v336;
  int v337;
  float v338;
  uint64_t v345;
  int v346;
  float v347;
  float v358;
  float v359;
  float v360;
  float v361;
  float v362;
  float v363;
  uint64_t v367;
  int v368;
  float v369;
  uint64_t v383;
  int v384;
  float v385;
  float v396;
  float v397;
  float v398;
  uint64_t v402;
  int v403;
  float v404;
  float v415;
  float v416;
  float v417;
  uint64_t v421;
  int v422;
  float v423;
  float v434;
  float v435;
  uint64_t v439;
  int v440;
  float v441;
  float v452;
  float v453;
  int v456;
  int v457;
  int v462;
  char v463;
  unsigned int *v464;
  int16x4_t *v465;
  int v466;
  int v467;
  unsigned int v468;
  unsigned int v469;
  int v470;
  char v471;
  unsigned int *v472;
  int16x4_t *v473;
  int v474;
  int v475;
  unsigned int v476;
  unsigned int v477;
  int v478;
  unsigned int v479;
  int v486;
  unsigned int v487;
  int v493;
  float v494;
  int v502;
  uint64_t v508;
  unint64_t v509;
  int v510;
  unint64_t v512;
  unsigned int v513;
  int v514;
  unsigned int v515;
  float v517;
  float v523;
  float v529;
  float v535;
  float v541;
  float v547;
  unsigned int v552;
  float v553;
  float v559;
  int v564;
  uint64_t v565;
  unint64_t v566;
  int v567;
  unint64_t v569;
  unsigned int v570;
  int v571;
  unsigned int v572;
  float v590;
  float v600;
  float v610;
  unsigned int v620;
  float v621;
  int v631;
  uint64_t v632;
  int v633;
  int16x4_t v635;
  unint64_t v636;
  unsigned int v637;
  int v638;
  unsigned int v639;
  float v641;
  float v648;
  float v655;
  unsigned int v661;
  float v662;
  int v668;
  uint64_t v669;
  int v670;
  unint64_t v672;
  unsigned int v673;
  int v674;
  unsigned int v675;
  float v685;
  float v693;
  float v701;
  unsigned int v709;
  float v710;
  int v718;
  unint64_t v719;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(__int16 **)(a1 + 96);
  if (v7)
    _H1 = *v7;
  else
    _H1 = 15360;
  v10 = *(int *)(a1 + 12);
  v9 = *(int *)(a1 + 16);
  if (v5)
  {
    v11 = (unint64_t)*(int *)(a1 + 32) >> 1;
    v12 = (__int16 *)(v5 + 2 * (v10 + v11 * v9));
    v13 = 1;
    if (!v6)
      return;
  }
  else
  {
    v12 = 0;
    v11 = 0;
    v13 = 0;
    if (!v6)
      return;
  }
  v14 = *(_DWORD *)(a1 + 4);
  v15 = v11 - v14;
  if (v5)
    v16 = v11 - v14;
  else
    v16 = v11;
  v17 = *(_DWORD *)(a1 + 8);
  v18 = (unint64_t)*(int *)(a1 + 28) >> 1;
  _Q0.n128_u16[0] = **(_WORD **)(a1 + 88);
  __asm { FCVT            S8, H1 }
  v24 = (int16x4_t *)(*(_QWORD *)(a1 + 40) + 2 * (v10 + v18 * v9));
  v25 = *(int *)(a1 + 124);
  v26 = v6 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v25;
  v27 = v25 - v14;
  v28 = v18 - v14;
  v719 = v28;
  v29 = v27;
  v30 = v14;
  v31 = v16;
  switch(a2)
  {
    case 0:
      if (v5)
      {
        v32 = 2 * v13;
        do
        {
          v33 = v14;
          do
          {
            v34 = *(unsigned __int8 *)v26;
            if (*(_BYTE *)v26)
            {
              if (v34 == 255)
              {
                *v12 = 0;
                v24->i16[0] = 0;
              }
              else
              {
                _H2 = v24->i16[0];
                __asm { FCVT            S2, H2 }
                v37 = (float)(v34 ^ 0xFFu) * 0.0039216;
                _S2 = v37 * _S2;
                __asm { FCVT            H2, S2 }
                v24->i16[0] = LOWORD(_S2);
                LOWORD(_S2) = *v12;
                __asm { FCVT            S2, H2 }
                _S2 = v37 * _S2;
                __asm { FCVT            H2, S2 }
                *v12 = LOWORD(_S2);
              }
            }
            ++v26;
            v24 = (int16x4_t *)((char *)v24 + 2);
            v12 = (__int16 *)((char *)v12 + v32);
            --v33;
          }
          while (v33);
          v26 += v27;
          v24 = (int16x4_t *)((char *)v24 + 2 * v28);
          v12 += v16;
          --v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v456 = v14;
          do
          {
            v457 = *(unsigned __int8 *)v26;
            if (*(_BYTE *)v26)
            {
              _H1 = 0;
              if (v457 != 255)
              {
                _H1 = v24->i16[0];
                __asm { FCVT            S1, H1 }
                _S1 = (float)((float)(v457 ^ 0xFFu) * 0.0039216) * _S1;
                __asm { FCVT            H1, S1 }
              }
              v24->i16[0] = _H1;
            }
            ++v26;
            v24 = (int16x4_t *)((char *)v24 + 2);
            --v456;
          }
          while (v456);
          v26 += v27;
          v24 = (int16x4_t *)((char *)v24 + 2 * v28);
          --v17;
        }
        while (v17);
      }
      return;
    case 1:
      v41 = v26 & 3;
      if (!v5)
      {
        v462 = -1 << (8 * v41);
        if ((v26 & 3) != 0)
          v463 = v26 & 0xFC;
        else
          v463 = v26;
        if ((v26 & 3) != 0)
        {
          v464 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
        }
        else
        {
          v462 = -1;
          v464 = (unsigned int *)v26;
        }
        if ((v26 & 3) != 0)
          v465 = (int16x4_t *)((char *)v24 - 2 * (v26 & 3));
        else
          v465 = v24;
        if ((v26 & 3) != 0)
          v466 = v41 + v14;
        else
          v466 = v14;
        if ((((_BYTE)v466 + v463) & 3) != 0)
        {
          v467 = 4 - (((_BYTE)v466 + v463) & 3);
          v41 += v467;
          v468 = 0xFFFFFFFF >> (8 * v467);
          if (v466 >= 4)
            v469 = v468;
          else
            v469 = 0;
          if (v466 >= 4)
            v468 = -1;
          v462 &= v468;
        }
        else
        {
          v469 = 0;
        }
        v632 = v27 - v41;
        v633 = v466 >> 2;
        __asm { FCVT            S1, H0 }
        v635 = vdup_lane_s16((int16x4_t)_Q0.n128_u64[0], 0);
        v636 = v28 - v41;
        while (1)
        {
          v637 = *v464 & v462;
          v638 = v633;
          v639 = v469;
          if (!v637)
            goto LABEL_550;
LABEL_532:
          if (v637 == -1)
          {
            *v465 = v635;
            goto LABEL_550;
          }
          while (1)
          {
            if ((_BYTE)v637)
            {
              _H5 = _Q0.n128_u16[0];
              if (v637 != 255)
              {
                v641 = (float)v637 * 0.0039216;
                _S6 = v641 * _S1;
                __asm
                {
                  FCVT            H6, S6
                  FCVT            S6, H6
                }
                _H7 = v465->i16[0];
                __asm { FCVT            S7, H7 }
                _S5 = _S6 + (float)(_S7 * (float)(1.0 - v641));
                __asm { FCVT            H5, S5 }
              }
              v465->i16[0] = _H5;
            }
            if (BYTE1(v637))
            {
              _H5 = _Q0.n128_u16[0];
              if (BYTE1(v637) != 255)
              {
                v648 = (float)BYTE1(v637) * 0.0039216;
                _S6 = v648 * _S1;
                __asm
                {
                  FCVT            H6, S6
                  FCVT            S6, H6
                }
                _H7 = v465->i16[1];
                __asm { FCVT            S7, H7 }
                _S5 = _S6 + (float)(_S7 * (float)(1.0 - v648));
                __asm { FCVT            H5, S5 }
              }
              v465->i16[1] = _H5;
            }
            if (BYTE2(v637))
            {
              _H5 = _Q0.n128_u16[0];
              if (BYTE2(v637) != 255)
              {
                v655 = (float)BYTE2(v637) * 0.0039216;
                _S6 = v655 * _S1;
                __asm
                {
                  FCVT            H6, S6
                  FCVT            S6, H6
                }
                _H7 = v465->i16[2];
                __asm { FCVT            S7, H7 }
                _S5 = _S6 + (float)(_S7 * (float)(1.0 - v655));
                __asm { FCVT            H5, S5 }
              }
              v465->i16[2] = _H5;
            }
            v661 = HIBYTE(v637);
            if (v661 == 255)
            {
              v465->i16[3] = _Q0.n128_u16[0];
            }
            else if (v661)
            {
              v662 = (float)v661 * 0.0039216;
              _S6 = v662 * _S1;
              __asm
              {
                FCVT            H6, S6
                FCVT            S6, H6
              }
              _H7 = v465->i16[3];
              __asm { FCVT            S7, H7 }
              _S5 = _S6 + (float)(_S7 * (float)(1.0 - v662));
              __asm { FCVT            H5, S5 }
              v465->i16[3] = LOWORD(_S5);
            }
LABEL_550:
            while (1)
            {
              v668 = v638;
              ++v465;
              --v638;
              ++v464;
              if (v668 < 2)
                break;
              v637 = *v464;
              if (*v464)
                goto LABEL_532;
            }
            if (!v639)
              break;
            v639 = 0;
            v637 = *v464 & v469;
          }
          v464 = (unsigned int *)((char *)v464 + v632);
          v465 = (int16x4_t *)((char *)v465 + 2 * v636);
          if (!--v17)
            return;
        }
      }
      v42 = -1 << (8 * v41);
      v43 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
      v44 = 2 * (v26 & 3);
      v45 = (int16x4_t *)((char *)v24 - v44);
      v46 = &v12[v44 / 0xFFFFFFFFFFFFFFFELL];
      if ((v26 & 3) != 0)
        v47 = v26 & 0xFC;
      else
        v47 = v26;
      if ((v26 & 3) != 0)
      {
        v48 = v41 + v14;
      }
      else
      {
        v42 = -1;
        v43 = (unsigned int *)v26;
        v46 = v12;
        v45 = v24;
        v48 = v14;
      }
      if ((((_BYTE)v48 + v47) & 3) != 0)
      {
        v49 = 4 - (((_BYTE)v48 + v47) & 3);
        v41 += v49;
        v50 = 0xFFFFFFFF >> (8 * v49);
        if (v48 >= 4)
          v51 = v50;
        else
          v51 = 0;
        if (v48 >= 4)
          v50 = -1;
        v42 &= v50;
      }
      else
      {
        v51 = 0;
      }
      v508 = v27 - v41;
      v509 = v28 - v41;
      v510 = v48 >> 2;
      __asm { FCVT            S2, H0 }
      v512 = v15 - v41;
      do
      {
        v513 = *v43 & v42;
        v514 = v510;
        v515 = v51;
        if (!v513)
          goto LABEL_501;
LABEL_480:
        if (v513 == -1)
        {
          v45->i16[0] = _Q0.n128_u16[0];
          *v46 = _H1;
          v45->i16[1] = _Q0.n128_u16[0];
          v46[1] = _H1;
          v45->i16[2] = _Q0.n128_u16[0];
          v46[2] = _H1;
LABEL_498:
          v45->i16[3] = _Q0.n128_u16[0];
          v46[3] = _H1;
          goto LABEL_501;
        }
        while (1)
        {
          if ((_BYTE)v513)
          {
            if (v513 == 255)
            {
              v45->i16[0] = _Q0.n128_u16[0];
              _H5 = _H1;
            }
            else
            {
              v517 = (float)v513 * 0.0039216;
              _S6 = v517 * _S2;
              __asm { FCVT            H6, S6 }
              _S7 = v517 * _S8;
              __asm
              {
                FCVT            H7, S7
                FCVT            S6, H6
              }
              _H16 = v45->i16[0];
              __asm { FCVT            S16, H16 }
              v523 = 1.0 - v517;
              _S6 = _S6 + (float)(_S16 * v523);
              __asm { FCVT            H6, S6 }
              v45->i16[0] = LOWORD(_S6);
              __asm { FCVT            S6, H7 }
              LOWORD(_S7) = *v46;
              __asm { FCVT            S7, H7 }
              _S5 = _S6 + (float)(_S7 * v523);
              __asm { FCVT            H5, S5 }
            }
            *v46 = _H5;
          }
          if (BYTE1(v513))
          {
            if (BYTE1(v513) == 255)
            {
              v45->i16[1] = _Q0.n128_u16[0];
              _H5 = _H1;
            }
            else
            {
              v529 = (float)BYTE1(v513) * 0.0039216;
              _S6 = v529 * _S2;
              __asm { FCVT            H6, S6 }
              _S7 = v529 * _S8;
              __asm
              {
                FCVT            H7, S7
                FCVT            S6, H6
              }
              _H16 = v45->i16[1];
              __asm { FCVT            S16, H16 }
              v535 = 1.0 - v529;
              _S6 = _S6 + (float)(_S16 * v535);
              __asm { FCVT            H6, S6 }
              v45->i16[1] = LOWORD(_S6);
              __asm { FCVT            S6, H7 }
              LOWORD(_S7) = v46[1];
              __asm { FCVT            S7, H7 }
              _S5 = _S6 + (float)(_S7 * v535);
              __asm { FCVT            H5, S5 }
            }
            v46[1] = _H5;
          }
          if (BYTE2(v513))
          {
            if (BYTE2(v513) == 255)
            {
              v45->i16[2] = _Q0.n128_u16[0];
              _H5 = _H1;
            }
            else
            {
              v541 = (float)BYTE2(v513) * 0.0039216;
              _S6 = v541 * _S2;
              __asm { FCVT            H6, S6 }
              _S7 = v541 * _S8;
              __asm
              {
                FCVT            H7, S7
                FCVT            S6, H6
              }
              _H16 = v45->i16[2];
              __asm { FCVT            S16, H16 }
              v547 = 1.0 - v541;
              _S6 = _S6 + (float)(_S16 * v547);
              __asm { FCVT            H6, S6 }
              v45->i16[2] = LOWORD(_S6);
              __asm { FCVT            S6, H7 }
              LOWORD(_S7) = v46[2];
              __asm { FCVT            S7, H7 }
              _S5 = _S6 + (float)(_S7 * v547);
              __asm { FCVT            H5, S5 }
            }
            v46[2] = _H5;
          }
          v552 = HIBYTE(v513);
          if (v552 == 255)
            goto LABEL_498;
          if (v552)
          {
            v553 = (float)v552 * 0.0039216;
            _S6 = v553 * _S2;
            __asm { FCVT            H6, S6 }
            _S7 = v553 * _S8;
            __asm
            {
              FCVT            H7, S7
              FCVT            S6, H6
            }
            _H16 = v45->i16[3];
            __asm { FCVT            S16, H16 }
            v559 = 1.0 - v553;
            _S6 = _S6 + (float)(_S16 * v559);
            __asm { FCVT            H6, S6 }
            v45->i16[3] = LOWORD(_S6);
            __asm { FCVT            S6, H7 }
            LOWORD(_S7) = v46[3];
            __asm { FCVT            S7, H7 }
            _S5 = _S6 + (float)(_S7 * v559);
            __asm { FCVT            H5, S5 }
            v46[3] = LOWORD(_S5);
          }
LABEL_501:
          while (1)
          {
            v564 = v514;
            ++v45;
            v46 += 4;
            --v514;
            ++v43;
            if (v564 < 2)
              break;
            v513 = *v43;
            if (*v43)
              goto LABEL_480;
          }
          if (!v515)
            break;
          v515 = 0;
          v513 = *v43 & v51;
        }
        v43 = (unsigned int *)((char *)v43 + v508);
        v45 = (int16x4_t *)((char *)v45 + 2 * v509);
        v46 += v512;
        --v17;
      }
      while (v17);
      return;
    case 2:
      v52 = 1.0 - _S8;
      v53 = v26 & 3;
      if (v5)
      {
        v54 = -1 << (8 * v53);
        v55 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
        v56 = 2 * (v26 & 3);
        v57 = (int16x4_t *)((char *)v24 - v56);
        v58 = &v12[v56 / 0xFFFFFFFFFFFFFFFELL];
        if ((v26 & 3) != 0)
          v59 = v26 & 0xFC;
        else
          v59 = v26;
        if ((v26 & 3) != 0)
        {
          v60 = v53 + v14;
        }
        else
        {
          v54 = -1;
          v55 = (unsigned int *)v26;
          v58 = v12;
          v57 = v24;
          v60 = v14;
        }
        if ((((_BYTE)v60 + v59) & 3) != 0)
        {
          v61 = 4 - (((_BYTE)v60 + v59) & 3);
          v53 += v61;
          v62 = 0xFFFFFFFF >> (8 * v61);
          if (v60 >= 4)
            v63 = v62;
          else
            v63 = 0;
          if (v60 >= 4)
            v62 = -1;
          v54 &= v62;
        }
        else
        {
          v63 = 0;
        }
        v565 = v27 - v53;
        v566 = v28 - v53;
        v567 = v60 >> 2;
        __asm { FCVT            S0, H0 }
        v569 = v15 - v53;
        while (1)
        {
          v570 = *v55 & v54;
          v571 = v567;
          v572 = v63;
          if (!v570)
            goto LABEL_522;
LABEL_511:
          if (v570 == -1)
            break;
          while (1)
          {
            if ((_BYTE)v570)
            {
              v590 = (float)v570 * 0.0039216;
              _S5 = v590 * _S0;
              __asm { FCVT            H5, S5 }
              _S4 = v590 * _S8;
              __asm
              {
                FCVT            H4, S4
                FCVT            S4, H4
                FCVT            S5, H5
              }
              _H6 = v57->i16[0];
              __asm { FCVT            S6, H6 }
              _S5 = _S5 + (float)(_S6 * (float)(1.0 - _S4));
              __asm { FCVT            H5, S5 }
              v57->i16[0] = LOWORD(_S5);
              LOWORD(_S5) = *v58;
              __asm { FCVT            S5, H5 }
              _S4 = _S4 + (float)(_S5 * (float)(1.0 - _S4));
              __asm { FCVT            H4, S4 }
              *v58 = LOWORD(_S4);
            }
            if ((v570 & 0xFF00) != 0)
            {
              v600 = (float)BYTE1(v570) * 0.0039216;
              _S5 = v600 * _S0;
              __asm { FCVT            H5, S5 }
              _S4 = v600 * _S8;
              __asm
              {
                FCVT            H4, S4
                FCVT            S4, H4
                FCVT            S5, H5
              }
              _H6 = v57->i16[1];
              __asm { FCVT            S6, H6 }
              _S5 = _S5 + (float)(_S6 * (float)(1.0 - _S4));
              __asm { FCVT            H5, S5 }
              v57->i16[1] = LOWORD(_S5);
              LOWORD(_S5) = v58[1];
              __asm { FCVT            S5, H5 }
              _S4 = _S4 + (float)(_S5 * (float)(1.0 - _S4));
              __asm { FCVT            H4, S4 }
              v58[1] = LOWORD(_S4);
            }
            if ((v570 & 0xFF0000) != 0)
            {
              v610 = (float)BYTE2(v570) * 0.0039216;
              _S5 = v610 * _S0;
              __asm { FCVT            H5, S5 }
              _S4 = v610 * _S8;
              __asm
              {
                FCVT            H4, S4
                FCVT            S4, H4
                FCVT            S5, H5
              }
              _H6 = v57->i16[2];
              __asm { FCVT            S6, H6 }
              _S5 = _S5 + (float)(_S6 * (float)(1.0 - _S4));
              __asm { FCVT            H5, S5 }
              v57->i16[2] = LOWORD(_S5);
              LOWORD(_S5) = v58[2];
              __asm { FCVT            S5, H5 }
              _S4 = _S4 + (float)(_S5 * (float)(1.0 - _S4));
              __asm { FCVT            H4, S4 }
              v58[2] = LOWORD(_S4);
            }
            v620 = HIBYTE(v570);
            if (v620)
            {
              v621 = (float)v620 * 0.0039216;
              _S5 = v621 * _S0;
              __asm { FCVT            H5, S5 }
              _S4 = v621 * _S8;
              __asm
              {
                FCVT            H4, S4
                FCVT            S4, H4
                FCVT            S5, H5
              }
              _H6 = v57->i16[3];
              __asm { FCVT            S6, H6 }
              _S5 = _S5 + (float)(_S6 * (float)(1.0 - _S4));
              __asm { FCVT            H5, S5 }
              v57->i16[3] = LOWORD(_S5);
              LOWORD(_S5) = v58[3];
              __asm { FCVT            S5, H5 }
              _S4 = _S4 + (float)(_S5 * (float)(1.0 - _S4));
              goto LABEL_521;
            }
LABEL_522:
            while (1)
            {
              v631 = v571;
              ++v57;
              v58 += 4;
              --v571;
              ++v55;
              if (v631 < 2)
                break;
              v570 = *v55;
              if (*v55)
                goto LABEL_511;
            }
            if (!v572)
              break;
            v572 = 0;
            v570 = *v55 & v63;
          }
          v55 = (unsigned int *)((char *)v55 + v565);
          v57 = (int16x4_t *)((char *)v57 + 2 * v566);
          v58 += v569;
          if (!--v17)
            return;
        }
        _H4 = v57->i16[0];
        __asm { FCVT            S4, H4 }
        _S4 = _S0 + (float)(_S4 * v52);
        __asm { FCVT            H4, S4 }
        v57->i16[0] = LOWORD(_S4);
        LOWORD(_S4) = *v58;
        __asm { FCVT            S4, H4 }
        _S4 = _S8 + (float)(_S4 * v52);
        __asm { FCVT            H4, S4 }
        *v58 = LOWORD(_S4);
        LOWORD(_S4) = v57->i16[1];
        __asm { FCVT            S4, H4 }
        _S4 = _S0 + (float)(_S4 * v52);
        __asm { FCVT            H4, S4 }
        v57->i16[1] = LOWORD(_S4);
        LOWORD(_S4) = v58[1];
        __asm { FCVT            S4, H4 }
        _S4 = _S8 + (float)(_S4 * v52);
        __asm { FCVT            H4, S4 }
        v58[1] = LOWORD(_S4);
        LOWORD(_S4) = v57->i16[2];
        __asm { FCVT            S4, H4 }
        _S4 = _S0 + (float)(_S4 * v52);
        __asm { FCVT            H4, S4 }
        v57->i16[2] = LOWORD(_S4);
        LOWORD(_S4) = v58[2];
        __asm { FCVT            S4, H4 }
        _S4 = _S8 + (float)(_S4 * v52);
        __asm { FCVT            H4, S4 }
        v58[2] = LOWORD(_S4);
        LOWORD(_S4) = v57->i16[3];
        __asm { FCVT            S4, H4 }
        _S4 = _S0 + (float)(_S4 * v52);
        __asm { FCVT            H4, S4 }
        v57->i16[3] = LOWORD(_S4);
        LOWORD(_S4) = v58[3];
        __asm { FCVT            S4, H4 }
        _S4 = _S8 + (float)(_S4 * v52);
LABEL_521:
        __asm { FCVT            H4, S4 }
        v58[3] = _H4;
        goto LABEL_522;
      }
      v470 = -1 << (8 * v53);
      if ((v26 & 3) != 0)
        v471 = v26 & 0xFC;
      else
        v471 = v26;
      if ((v26 & 3) != 0)
      {
        v472 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
      }
      else
      {
        v470 = -1;
        v472 = (unsigned int *)v26;
      }
      if ((v26 & 3) != 0)
        v473 = (int16x4_t *)((char *)v24 - 2 * (v26 & 3));
      else
        v473 = v24;
      if ((v26 & 3) != 0)
        v474 = v53 + v14;
      else
        v474 = v14;
      if ((((_BYTE)v474 + v471) & 3) != 0)
      {
        v475 = 4 - (((_BYTE)v474 + v471) & 3);
        v53 += v475;
        v476 = 0xFFFFFFFF >> (8 * v475);
        if (v474 >= 4)
          v477 = v476;
        else
          v477 = 0;
        if (v474 >= 4)
          v476 = -1;
        v470 &= v476;
      }
      else
      {
        v477 = 0;
      }
      v669 = v27 - v53;
      v670 = v474 >> 2;
      __asm { FCVT            S0, H0 }
      v672 = v28 - v53;
      while (1)
      {
        v673 = *v472 & v470;
        v674 = v670;
        v675 = v477;
        if (!v673)
          goto LABEL_571;
LABEL_560:
        if (v673 == -1)
          break;
        while (1)
        {
          if ((_BYTE)v673)
          {
            v685 = (float)v673 * 0.0039216;
            _S5 = v685 * _S0;
            __asm { FCVT            H5, S5 }
            _S4 = v685 * _S8;
            __asm
            {
              FCVT            H4, S4
              FCVT            S5, H5
            }
            _H6 = v473->i16[0];
            __asm
            {
              FCVT            S6, H6
              FCVT            S4, H4
            }
            _S4 = _S5 + (float)(_S6 * (float)(1.0 - _S4));
            __asm { FCVT            H4, S4 }
            v473->i16[0] = LOWORD(_S4);
          }
          if ((v673 & 0xFF00) != 0)
          {
            v693 = (float)BYTE1(v673) * 0.0039216;
            _S5 = v693 * _S0;
            __asm { FCVT            H5, S5 }
            _S4 = v693 * _S8;
            __asm
            {
              FCVT            H4, S4
              FCVT            S5, H5
            }
            _H6 = v473->i16[1];
            __asm
            {
              FCVT            S6, H6
              FCVT            S4, H4
            }
            _S4 = _S5 + (float)(_S6 * (float)(1.0 - _S4));
            __asm { FCVT            H4, S4 }
            v473->i16[1] = LOWORD(_S4);
          }
          if ((v673 & 0xFF0000) != 0)
          {
            v701 = (float)BYTE2(v673) * 0.0039216;
            _S5 = v701 * _S0;
            __asm { FCVT            H5, S5 }
            _S4 = v701 * _S8;
            __asm
            {
              FCVT            H4, S4
              FCVT            S5, H5
            }
            _H6 = v473->i16[2];
            __asm
            {
              FCVT            S6, H6
              FCVT            S4, H4
            }
            _S4 = _S5 + (float)(_S6 * (float)(1.0 - _S4));
            __asm { FCVT            H4, S4 }
            v473->i16[2] = LOWORD(_S4);
          }
          v709 = HIBYTE(v673);
          if (v709)
          {
            v710 = (float)v709 * 0.0039216;
            _S5 = v710 * _S0;
            __asm { FCVT            H5, S5 }
            _S4 = v710 * _S8;
            __asm
            {
              FCVT            H4, S4
              FCVT            S5, H5
            }
            _H6 = v473->i16[3];
            __asm
            {
              FCVT            S6, H6
              FCVT            S4, H4
            }
            _S4 = _S5 + (float)(_S6 * (float)(1.0 - _S4));
            goto LABEL_570;
          }
LABEL_571:
          while (1)
          {
            v718 = v674;
            ++v473;
            --v674;
            ++v472;
            if (v718 < 2)
              break;
            v673 = *v472;
            if (*v472)
              goto LABEL_560;
          }
          if (!v675)
            break;
          v675 = 0;
          v673 = *v472 & v477;
        }
        v472 = (unsigned int *)((char *)v472 + v669);
        v473 = (int16x4_t *)((char *)v473 + 2 * v672);
        if (!--v17)
          return;
      }
      _H4 = v473->i16[0];
      __asm { FCVT            S4, H4 }
      _S4 = _S0 + (float)(_S4 * v52);
      __asm { FCVT            H4, S4 }
      v473->i16[0] = LOWORD(_S4);
      LOWORD(_S4) = v473->i16[1];
      __asm { FCVT            S4, H4 }
      _S4 = _S0 + (float)(_S4 * v52);
      __asm { FCVT            H4, S4 }
      v473->i16[1] = LOWORD(_S4);
      LOWORD(_S4) = v473->i16[2];
      __asm { FCVT            S4, H4 }
      _S4 = _S0 + (float)(_S4 * v52);
      __asm { FCVT            H4, S4 }
      v473->i16[2] = LOWORD(_S4);
      LOWORD(_S4) = v473->i16[3];
      __asm { FCVT            S4, H4 }
      _S4 = _S0 + (float)(_S4 * v52);
LABEL_570:
      __asm { FCVT            H4, S4 }
      v473->i16[3] = _H4;
      goto LABEL_571;
    case 3:
      __asm { FCVT            S0, H0; jumptable 0000000184DF2984 case 3 }
      v65 = 2 * v13;
      do
      {
        v66 = v14;
        do
        {
          v67 = *(unsigned __int8 *)v26;
          if (*(_BYTE *)v26)
          {
            if (v67 == 255)
            {
              _H3 = *v12;
              __asm { FCVT            S3, H3 }
              _S4 = _S0 * _S3;
              __asm { FCVT            H4, S4 }
              _S3 = _S8 * _S3;
              __asm { FCVT            H3, S3 }
              v24->i16[0] = LOWORD(_S4);
            }
            else
            {
              v73 = (float)v67 * 0.0039216;
              _H4 = *v12;
              __asm { FCVT            S4, H4 }
              _S6 = (float)(v73 * _S4) * _S0;
              __asm { FCVT            H6, S6 }
              _S5 = (float)(v73 * _S4) * _S8;
              __asm
              {
                FCVT            H5, S5
                FCVT            S6, H6
              }
              _H7 = v24->i16[0];
              __asm { FCVT            S7, H7 }
              v81 = 1.0 - v73;
              _S6 = _S6 + (float)(_S7 * v81);
              __asm { FCVT            H6, S6 }
              v24->i16[0] = LOWORD(_S6);
              __asm { FCVT            S5, H5 }
              _S3 = _S5 + (float)(_S4 * v81);
              __asm { FCVT            H3, S3 }
            }
            *v12 = _H3;
          }
          ++v26;
          v24 = (int16x4_t *)((char *)v24 + 2);
          v12 = (__int16 *)((char *)v12 + v65);
          --v66;
        }
        while (v66);
        v26 += v27;
        v24 = (int16x4_t *)((char *)v24 + 2 * v28);
        v12 += v16;
        --v17;
      }
      while (v17);
      return;
    case 4:
      __asm { FCVT            S0, H0; jumptable 0000000184DF2984 case 4 }
      v86 = 2 * v13;
      do
      {
        v87 = v14;
        do
        {
          v88 = *(unsigned __int8 *)v26;
          if (*(_BYTE *)v26)
          {
            if (v88 == 255)
            {
              _H3 = *v12;
              __asm { FCVT            S3, H3 }
              v91 = 1.0 - _S3;
              _S4 = v91 * _S0;
              __asm { FCVT            H4, S4 }
              _S3 = v91 * _S8;
              v24->i16[0] = LOWORD(_S4);
            }
            else
            {
              v94 = (float)v88 * 0.0039216;
              _H4 = *v12;
              __asm { FCVT            S4, H4 }
              v97 = v94 * (float)(1.0 - _S4);
              _S6 = v97 * _S0;
              __asm { FCVT            H6, S6 }
              _S5 = v97 * _S8;
              __asm
              {
                FCVT            H5, S5
                FCVT            S6, H6
              }
              _H7 = v24->i16[0];
              __asm { FCVT            S7, H7 }
              v103 = 1.0 - v94;
              _S6 = _S6 + (float)(_S7 * v103);
              __asm { FCVT            H6, S6 }
              v24->i16[0] = LOWORD(_S6);
              __asm { FCVT            S5, H5 }
              _S3 = _S5 + (float)(_S4 * v103);
            }
            __asm { FCVT            H3, S3 }
            *v12 = _H3;
          }
          ++v26;
          v24 = (int16x4_t *)((char *)v24 + 2);
          v12 = (__int16 *)((char *)v12 + v86);
          --v87;
        }
        while (v87);
        v26 += v27;
        v24 = (int16x4_t *)((char *)v24 + 2 * v28);
        v12 += v16;
        --v17;
      }
      while (v17);
      return;
    case 5:
      __asm { FCVT            S0, H0; jumptable 0000000184DF2984 case 5 }
      v108 = 2 * v13;
      do
      {
        v109 = v14;
        do
        {
          if (*(_BYTE *)v26)
          {
            _H3 = *v12;
            __asm { FCVT            S3, H3 }
            v112 = (float)*(unsigned __int8 *)v26 * 0.0039216;
            _S5 = v112 * _S0;
            __asm { FCVT            H5, S5 }
            _S4 = v112 * _S8;
            __asm
            {
              FCVT            H4, S4
              FCVT            S4, H4
              FCVT            S5, H5
            }
            _H6 = v24->i16[0];
            __asm { FCVT            S6, H6 }
            _S5 = (float)((float)(1.0 - _S4) * _S6) + (float)(_S5 * _S3);
            __asm { FCVT            H5, S5 }
            v24->i16[0] = LOWORD(_S5);
            _S3 = (float)((float)(1.0 - _S4) * _S3) + (float)(_S4 * _S3);
            __asm { FCVT            H3, S3 }
            *v12 = LOWORD(_S3);
          }
          ++v26;
          v24 = (int16x4_t *)((char *)v24 + 2);
          v12 = (__int16 *)((char *)v12 + v108);
          --v109;
        }
        while (v109);
        v26 += v27;
        v24 = (int16x4_t *)((char *)v24 + 2 * v28);
        v12 += v16;
        --v17;
      }
      while (v17);
      return;
    case 6:
      __asm { FCVT            S0, H0; jumptable 0000000184DF2984 case 6 }
      v122 = 2 * v13;
      while (1)
      {
        v123 = v14;
        do
        {
          v124 = *(unsigned __int8 *)v26;
          if (!*(_BYTE *)v26)
            goto LABEL_85;
          _H3 = *v12;
          __asm { FCVT            S3, H3 }
          v127 = 1.0 - _S3;
          if ((float)(1.0 - _S3) >= 1.0)
          {
            v137 = (float)v124 * 0.0039216;
            _S4 = v137 * _S0;
            __asm { FCVT            H4, S4 }
            _S3 = v137 * _S8;
            v24->i16[0] = LOWORD(_S4);
          }
          else
          {
            if (v127 <= 0.0)
              goto LABEL_85;
            v128 = (float)v124 * 0.0039216;
            _S6 = v128 * _S0;
            __asm { FCVT            H6, S6 }
            _S5 = v128 * _S8;
            __asm { FCVT            H5, S5 }
            _H7 = v24->i16[0];
            __asm
            {
              FCVT            S7, H7
              FCVT            S6, H6
            }
            _S6 = _S7 + (float)(_S6 * v127);
            __asm { FCVT            H6, S6 }
            v24->i16[0] = LOWORD(_S6);
            __asm { FCVT            S5, H5 }
            _S3 = _S3 + (float)(_S5 * v127);
          }
          __asm { FCVT            H3, S3 }
          *v12 = _H3;
LABEL_85:
          ++v26;
          v24 = (int16x4_t *)((char *)v24 + 2);
          v12 = (__int16 *)((char *)v12 + v122);
          --v123;
        }
        while (v123);
        v26 += v27;
        v24 = (int16x4_t *)((char *)v24 + 2 * v28);
        v12 += v16;
        if (!--v17)
          return;
      }
    case 7:
      if (v5)
      {
        v140 = 2 * v13;
        do
        {
          v141 = v14;
          do
          {
            v142 = *(unsigned __int8 *)v26;
            if (*(_BYTE *)v26)
            {
              if (v142 == 255)
              {
                _H2 = v24->i16[0];
                __asm { FCVT            S2, H2 }
                _S2 = _S8 * _S2;
                __asm { FCVT            H2, S2 }
                v24->i16[0] = LOWORD(_S2);
                LOWORD(_S2) = *v12;
                __asm { FCVT            S2, H2 }
                _S2 = _S8 * _S2;
              }
              else
              {
                _H3 = v24->i16[0];
                __asm { FCVT            S3, H3 }
                v150 = (float)((float)((float)v142 * 0.0039216) * _S8) + (float)(1.0 - (float)((float)v142 * 0.0039216));
                _S3 = v150 * _S3;
                __asm { FCVT            H3, S3 }
                v24->i16[0] = LOWORD(_S3);
                LOWORD(_S3) = *v12;
                __asm { FCVT            S3, H3 }
                _S2 = v150 * _S3;
              }
              __asm { FCVT            H2, S2 }
              *v12 = _H2;
            }
            ++v26;
            v24 = (int16x4_t *)((char *)v24 + 2);
            v12 = (__int16 *)((char *)v12 + v140);
            --v141;
          }
          while (v141);
          v26 += v27;
          v24 = (int16x4_t *)((char *)v24 + 2 * v28);
          v12 += v16;
          --v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v478 = v14;
          do
          {
            v479 = *(unsigned __int8 *)v26;
            if (*(_BYTE *)v26)
            {
              if (v479 == 255)
              {
                _H2 = v24->i16[0];
                __asm { FCVT            S2, H2 }
                _S2 = _S8 * _S2;
              }
              else
              {
                _H3 = v24->i16[0];
                __asm { FCVT            S3, H3 }
                _S2 = (float)((float)((float)((float)v479 * 0.0039216) * _S8)
                            + (float)(1.0 - (float)((float)v479 * 0.0039216)))
                    * _S3;
              }
              __asm { FCVT            H2, S2 }
              v24->i16[0] = _H2;
            }
            ++v26;
            v24 = (int16x4_t *)((char *)v24 + 2);
            --v478;
          }
          while (v478);
          v26 += v27;
          v24 = (int16x4_t *)((char *)v24 + 2 * v28);
          --v17;
        }
        while (v17);
      }
      return;
    case 8:
      v154 = 1.0 - _S8;
      if (v5)
      {
        v155 = 2 * v13;
        do
        {
          v156 = v14;
          do
          {
            v157 = *(unsigned __int8 *)v26;
            if (*(_BYTE *)v26)
            {
              _H3 = v24->i16[0];
              if (v157 == 255)
              {
                __asm { FCVT            S3, H3 }
                _S4 = v154 * _S3;
                v161 = 1.0 - _S8;
              }
              else
              {
                __asm { FCVT            S4, H3 }
                v161 = (float)((float)((float)v157 * -0.0039216) * _S8) + 1.0;
                _S4 = v161 * _S4;
              }
              __asm { FCVT            H4, S4 }
              v24->i16[0] = _H4;
              _H4 = *v12;
              __asm { FCVT            S4, H4 }
              _S3 = v161 * _S4;
              __asm { FCVT            H3, S3 }
              *v12 = LOWORD(_S3);
            }
            ++v26;
            v24 = (int16x4_t *)((char *)v24 + 2);
            v12 = (__int16 *)((char *)v12 + v155);
            --v156;
          }
          while (v156);
          v26 += v27;
          v24 = (int16x4_t *)((char *)v24 + 2 * v28);
          v12 += v16;
          --v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v486 = v14;
          do
          {
            v487 = *(unsigned __int8 *)v26;
            if (*(_BYTE *)v26)
            {
              _H3 = v24->i16[0];
              if (v487 == 255)
              {
                __asm { FCVT            S3, H3 }
                _S3 = v154 * _S3;
              }
              else
              {
                __asm { FCVT            S3, H3 }
                _S3 = (float)((float)((float)((float)v487 * -0.0039216) * _S8) + 1.0) * _S3;
              }
              __asm { FCVT            H3, S3 }
              v24->i16[0] = _H3;
            }
            ++v26;
            v24 = (int16x4_t *)((char *)v24 + 2);
            --v486;
          }
          while (v486);
          v26 += v27;
          v24 = (int16x4_t *)((char *)v24 + 2 * v28);
          --v17;
        }
        while (v17);
      }
      return;
    case 9:
      __asm { FCVT            S0, H0; jumptable 0000000184DF2984 case 9 }
      v168 = 2 * v13;
      do
      {
        v169 = v14;
        do
        {
          if (*(_BYTE *)v26)
          {
            v170 = (float)*(unsigned __int8 *)v26 * 0.0039216;
            _H4 = *v12;
            __asm { FCVT            S4, H4 }
            _S5 = v170 * _S0;
            __asm { FCVT            H5, S5 }
            _S6 = v170 * _S8;
            __asm
            {
              FCVT            H6, S6
              FCVT            S6, H6
              FCVT            S5, H5
            }
            _H16 = v24->i16[0];
            __asm { FCVT            S16, H16 }
            v179 = (float)(1.0 - v170) + _S6;
            _S5 = (float)(v179 * _S16) + (float)(_S5 * (float)(1.0 - _S4));
            __asm { FCVT            H5, S5 }
            v24->i16[0] = LOWORD(_S5);
            _S3 = (float)(v179 * _S4) + (float)(_S6 * (float)(1.0 - _S4));
            __asm { FCVT            H3, S3 }
            *v12 = LOWORD(_S3);
          }
          ++v26;
          v24 = (int16x4_t *)((char *)v24 + 2);
          v12 = (__int16 *)((char *)v12 + v168);
          --v169;
        }
        while (v169);
        v26 += v27;
        v24 = (int16x4_t *)((char *)v24 + 2 * v28);
        v12 += v16;
        --v17;
      }
      while (v17);
      return;
    case 10:
      __asm { FCVT            S0, H0; jumptable 0000000184DF2984 case 10 }
      v183 = 2 * v13;
      do
      {
        v184 = v14;
        do
        {
          if (*(_BYTE *)v26)
          {
            _H3 = *v12;
            __asm { FCVT            S3, H3 }
            v187 = (float)*(unsigned __int8 *)v26 * 0.0039216;
            _S5 = v187 * _S0;
            __asm { FCVT            H5, S5 }
            _S4 = v187 * _S8;
            __asm
            {
              FCVT            H4, S4
              FCVT            S4, H4
              FCVT            S5, H5
            }
            _H7 = v24->i16[0];
            __asm { FCVT            S7, H7 }
            _S5 = (float)((float)(1.0 - _S4) * _S7) + (float)(_S5 * (float)(1.0 - _S3));
            __asm { FCVT            H5, S5 }
            v24->i16[0] = LOWORD(_S5);
            _S3 = (float)((float)(1.0 - _S4) * _S3) + (float)(_S4 * (float)(1.0 - _S3));
            __asm { FCVT            H3, S3 }
            *v12 = LOWORD(_S3);
          }
          ++v26;
          v24 = (int16x4_t *)((char *)v24 + 2);
          v12 = (__int16 *)((char *)v12 + v183);
          --v184;
        }
        while (v184);
        v26 += v27;
        v24 = (int16x4_t *)((char *)v24 + 2 * v28);
        v12 += v16;
        --v17;
      }
      while (v17);
      return;
    case 11:
      __asm { FCVT            S0, H0; jumptable 0000000184DF2984 case 11 }
      if (v5)
      {
        v197 = 2 * v13;
        do
        {
          v198 = v14;
          do
          {
            if (*(_BYTE *)v26)
            {
              v199 = (float)*(unsigned __int8 *)v26 * 0.0039216;
              _S4 = v199 * _S0;
              __asm { FCVT            H4, S4 }
              _S3 = v199 * _S8;
              __asm { FCVT            H3, S3 }
              _H5 = *v12;
              __asm
              {
                FCVT            S5, H5
                FCVT            S3, H3
              }
              v205 = _S3 + _S5;
              _H7 = v24->i16[0];
              __asm
              {
                FCVT            S7, H7
                FCVT            S4, H4
              }
              v209 = (float)(_S3 - _S4) + (float)(_S5 - _S7);
              if (v205 <= 1.0)
                _S4 = v205;
              else
                _S4 = 1.0;
              __asm { FCVT            H5, S4 }
              *v12 = _H5;
              _S3 = _S4 - v209;
              __asm { FCVT            H3, S3 }
              v24->i16[0] = LOWORD(_S3);
            }
            ++v26;
            v24 = (int16x4_t *)((char *)v24 + 2);
            v12 = (__int16 *)((char *)v12 + v197);
            --v198;
          }
          while (v198);
          v26 += v27;
          v24 = (int16x4_t *)((char *)v24 + 2 * v28);
          v12 += v16;
          --v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v493 = v14;
          do
          {
            if (*(_BYTE *)v26)
            {
              v494 = (float)*(unsigned __int8 *)v26 * 0.0039216;
              _S4 = v494 * _S0;
              __asm { FCVT            H4, S4 }
              _S3 = v494 * _S8;
              __asm { FCVT            H3, S3 }
              _H5 = v24->i16[0];
              __asm
              {
                FCVT            S5, H5
                FCVT            S3, H3
                FCVT            S4, H4
              }
              _S3 = 1.0 - (float)((float)(_S3 - _S4) + (float)(1.0 - _S5));
              __asm { FCVT            H3, S3 }
              v24->i16[0] = LOWORD(_S3);
            }
            ++v26;
            v24 = (int16x4_t *)((char *)v24 + 2);
            --v493;
          }
          while (v493);
          v26 += v27;
          v24 = (int16x4_t *)((char *)v24 + 2 * v28);
          --v17;
        }
        while (v17);
      }
      return;
    case 12:
      __asm { FCVT            S0, H0; jumptable 0000000184DF2984 case 12 }
      if (v5)
      {
        v214 = 2 * v13;
        do
        {
          v215 = v14;
          do
          {
            if (*(_BYTE *)v26)
            {
              v216 = (float)*(unsigned __int8 *)v26 * 0.0039216;
              _S4 = v216 * _S0;
              __asm { FCVT            H4, S4 }
              _S3 = v216 * _S8;
              __asm { FCVT            H3, S3 }
              _H5 = *v12;
              __asm
              {
                FCVT            S5, H5
                FCVT            S3, H3
              }
              _S3 = _S3 + _S5;
              _H5 = v24->i16[0];
              if (_S3 > 1.0)
                _S3 = 1.0;
              __asm
              {
                FCVT            S4, H4
                FCVT            S5, H5
              }
              _S4 = _S5 + _S4;
              __asm { FCVT            H4, S4 }
              v24->i16[0] = LOWORD(_S4);
              __asm { FCVT            H3, S3 }
              *v12 = _H3;
            }
            ++v26;
            v24 = (int16x4_t *)((char *)v24 + 2);
            v12 = (__int16 *)((char *)v12 + v214);
            --v215;
          }
          while (v215);
          v26 += v27;
          v24 = (int16x4_t *)((char *)v24 + 2 * v28);
          v12 += v16;
          --v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v502 = v14;
          do
          {
            if (*(_BYTE *)v26)
            {
              _S2 = (float)((float)*(unsigned __int8 *)v26 * 0.0039216) * _S0;
              __asm { FCVT            H2, S2 }
              _H3 = v24->i16[0];
              __asm
              {
                FCVT            S2, H2
                FCVT            S3, H3
              }
              _S2 = _S3 + _S2;
              __asm { FCVT            H2, S2 }
              v24->i16[0] = LOWORD(_S2);
            }
            ++v26;
            v24 = (int16x4_t *)((char *)v24 + 2);
            --v502;
          }
          while (v502);
          v26 += v27;
          v24 = (int16x4_t *)((char *)v24 + 2 * v28);
          --v17;
        }
        while (v17);
      }
      return;
    case 13:
      __asm { FCVT            S0, H0; jumptable 0000000184DF2984 case 13 }
      v230 = 2 * v13;
      while (1)
      {
        v231 = v14;
        do
        {
          if (*(_BYTE *)v26)
          {
            v232 = (float)*(unsigned __int8 *)v26 * 0.0039216;
            _S3 = v232 * _S8;
            __asm
            {
              FCVT            H5, S3
              FCVT            S3, H5
            }
            if (_S3 > 0.0)
            {
              _S4 = v232 * _S0;
              __asm { FCVT            H4, S4 }
              if (v5)
              {
                _H6 = *v12;
                __asm { FCVT            S6, H6 }
                if (_S6 <= 0.0)
                  goto LABEL_159;
              }
              else
              {
                _S6 = 1.0;
              }
              _H5 = v24->i16[0];
              __asm
              {
                FCVT            S5, H5
                FCVT            S4, H4
              }
              v243 = _S4 * _S5;
              v244 = (float)(_S4 * _S5) + (float)(_S5 * (float)(1.0 - _S3));
              if (_S3 == 1.0)
                v244 = v243;
              _S4 = v244 + (float)(_S4 * (float)(1.0 - _S6));
              if (_S6 == 1.0)
                _S4 = v244;
              __asm { FCVT            H4, S4 }
              if (v5)
              {
                _S3 = (float)(_S6 + _S3) - (float)(_S6 * _S3);
                __asm { FCVT            H5, S3 }
LABEL_159:
                v24->i16[0] = _H4;
                *v12 = _H5;
                goto LABEL_161;
              }
              v24->i16[0] = _H4;
            }
          }
LABEL_161:
          ++v26;
          v24 = (int16x4_t *)((char *)v24 + 2);
          v12 = (__int16 *)((char *)v12 + v230);
          --v231;
        }
        while (v231);
        v26 += v27;
        v24 = (int16x4_t *)((char *)v24 + 2 * v28);
        v12 += v16;
        if (!--v17)
          return;
      }
    case 14:
      __asm { FCVT            S0, H0; jumptable 0000000184DF2984 case 14 }
      v248 = 2 * v13;
      while (1)
      {
        v249 = v14;
        do
        {
          if (*(_BYTE *)v26)
          {
            v250 = (float)*(unsigned __int8 *)v26 * 0.0039216;
            _S4 = v250 * _S8;
            __asm
            {
              FCVT            H5, S4
              FCVT            S4, H5
            }
            if (_S4 > 0.0)
            {
              _S3 = v250 * _S0;
              __asm { FCVT            H3, S3 }
              if (v5)
              {
                _H6 = *v12;
                __asm { FCVT            S6, H6 }
                if (_S6 <= 0.0)
                  goto LABEL_174;
              }
              else
              {
                _S6 = 1.0;
              }
              _H5 = v24->i16[0];
              __asm
              {
                FCVT            S5, H5
                FCVT            S3, H3
              }
              _S3 = _S5 + (float)(_S3 * (float)(1.0 - _S5));
              __asm { FCVT            H3, S3 }
              if (v5)
              {
                _S4 = (float)(_S6 + _S4) - (float)(_S6 * _S4);
                __asm { FCVT            H5, S4 }
LABEL_174:
                v24->i16[0] = _H3;
                *v12 = _H5;
                goto LABEL_176;
              }
              v24->i16[0] = _H3;
            }
          }
LABEL_176:
          ++v26;
          v24 = (int16x4_t *)((char *)v24 + 2);
          v12 = (__int16 *)((char *)v12 + v248);
          --v249;
        }
        while (v249);
        v26 += v27;
        v24 = (int16x4_t *)((char *)v24 + 2 * v28);
        v12 += v16;
        if (!--v17)
          return;
      }
    case 15:
      __asm { FCVT            S9, H0; jumptable 0000000184DF2984 case 15 }
      v264 = 2 * v13;
      while (1)
      {
        v265 = v14;
        do
        {
          if (*(_BYTE *)v26)
          {
            v266 = (float)*(unsigned __int8 *)v26 * 0.0039216;
            _S1 = v266 * _S8;
            __asm
            {
              FCVT            H1, S1
              FCVT            S3, H1
            }
            if (_S3 > 0.0)
            {
              _Q0.n128_f32[0] = v266 * _S9;
              __asm { FCVT            H2, S0 }
              if (v5)
              {
                _H0 = *v12;
                __asm { FCVT            S4, H0 }
                if (_S4 <= 0.0)
                  goto LABEL_188;
              }
              else
              {
                _S4 = 1.0;
              }
              _Q0.n128_u16[0] = v24->i16[0];
              _Q0.n128_u32[0] = PDAoverlayPDA(_Q0, _S4, _Q2, _S3);
              _Q2.n128_u32[0] = _Q0.n128_u32[0];
              if (v5)
              {
LABEL_188:
                v24->i16[0] = _Q2.n128_u16[0];
                *v12 = _H1;
                goto LABEL_190;
              }
              v24->i16[0] = _Q0.n128_u16[0];
            }
          }
LABEL_190:
          ++v26;
          v24 = (int16x4_t *)((char *)v24 + 2);
          v12 = (__int16 *)((char *)v12 + v264);
          --v265;
        }
        while (v265);
        v26 += v29;
        v24 = (int16x4_t *)((char *)v24 + 2 * v719);
        v12 += v31;
        --v17;
        v14 = v30;
        if (!v17)
          return;
      }
    case 16:
      __asm { FCVT            S0, H0; jumptable 0000000184DF2984 case 16 }
      v273 = 2 * v13;
      while (1)
      {
        v274 = v14;
        do
        {
          if (*(_BYTE *)v26)
          {
            v275 = (float)*(unsigned __int8 *)v26 * 0.0039216;
            _S3 = v275 * _S8;
            __asm
            {
              FCVT            H6, S3
              FCVT            S3, H6
            }
            if (_S3 > 0.0)
            {
              _S4 = v275 * _S0;
              __asm { FCVT            H4, S4 }
              if (v5)
              {
                _H5 = *v12;
                __asm { FCVT            S5, H5 }
                if (_S5 <= 0.0)
                  goto LABEL_209;
              }
              else
              {
                _S5 = 1.0;
              }
              _H6 = v24->i16[0];
              __asm
              {
                FCVT            S6, H6
                FCVT            S4, H4
              }
              v286 = _S3 * _S6;
              if ((float)(_S5 * _S4) < (float)(_S3 * _S6))
                v286 = _S5 * _S4;
              v287 = v286 + (float)(_S6 * (float)(1.0 - _S3));
              if (_S3 == 1.0)
                v287 = v286;
              _S4 = v287 + (float)(_S4 * (float)(1.0 - _S5));
              if (_S5 == 1.0)
                _S4 = v287;
              __asm { FCVT            H4, S4 }
              if (v5)
              {
                _S3 = (float)(_S5 + _S3) - (float)(_S5 * _S3);
                __asm { FCVT            H6, S3 }
LABEL_209:
                v24->i16[0] = _H4;
                *v12 = _H6;
                goto LABEL_211;
              }
              v24->i16[0] = _H4;
            }
          }
LABEL_211:
          ++v26;
          v24 = (int16x4_t *)((char *)v24 + 2);
          v12 = (__int16 *)((char *)v12 + v273);
          --v274;
        }
        while (v274);
        v26 += v27;
        v24 = (int16x4_t *)((char *)v24 + 2 * v28);
        v12 += v16;
        if (!--v17)
          return;
      }
    case 17:
      __asm { FCVT            S0, H0; jumptable 0000000184DF2984 case 17 }
      v291 = 2 * v13;
      while (1)
      {
        v292 = v14;
        do
        {
          if (*(_BYTE *)v26)
          {
            v293 = (float)*(unsigned __int8 *)v26 * 0.0039216;
            _S3 = v293 * _S8;
            __asm
            {
              FCVT            H6, S3
              FCVT            S3, H6
            }
            if (_S3 > 0.0)
            {
              _S4 = v293 * _S0;
              __asm { FCVT            H4, S4 }
              if (v5)
              {
                _H5 = *v12;
                __asm { FCVT            S5, H5 }
                if (_S5 <= 0.0)
                  goto LABEL_230;
              }
              else
              {
                _S5 = 1.0;
              }
              _H6 = v24->i16[0];
              __asm
              {
                FCVT            S6, H6
                FCVT            S4, H4
              }
              v304 = _S3 * _S6;
              if ((float)(_S5 * _S4) > (float)(_S3 * _S6))
                v304 = _S5 * _S4;
              v305 = v304 + (float)(_S6 * (float)(1.0 - _S3));
              if (_S3 == 1.0)
                v305 = v304;
              _S4 = v305 + (float)(_S4 * (float)(1.0 - _S5));
              if (_S5 == 1.0)
                _S4 = v305;
              __asm { FCVT            H4, S4 }
              if (v5)
              {
                _S3 = (float)(_S5 + _S3) - (float)(_S5 * _S3);
                __asm { FCVT            H6, S3 }
LABEL_230:
                v24->i16[0] = _H4;
                *v12 = _H6;
                goto LABEL_232;
              }
              v24->i16[0] = _H4;
            }
          }
LABEL_232:
          ++v26;
          v24 = (int16x4_t *)((char *)v24 + 2);
          v12 = (__int16 *)((char *)v12 + v291);
          --v292;
        }
        while (v292);
        v26 += v27;
        v24 = (int16x4_t *)((char *)v24 + 2 * v28);
        v12 += v16;
        if (!--v17)
          return;
      }
    case 18:
      __asm { FCVT            S9, H0; jumptable 0000000184DF2984 case 18 }
      v309 = 2 * v13;
      while (1)
      {
        v310 = v14;
        do
        {
          if (*(_BYTE *)v26)
          {
            v311 = (float)*(unsigned __int8 *)v26 * 0.0039216;
            _S1 = v311 * _S8;
            __asm
            {
              FCVT            H1, S1
              FCVT            S3, H1
            }
            if (_S3 > 0.0)
            {
              _Q0.n128_f32[0] = v311 * _S9;
              __asm { FCVT            H2, S0 }
              if (v5)
              {
                _H0 = *v12;
                __asm { FCVT            S4, H0 }
                if (_S4 <= 0.0)
                  goto LABEL_244;
              }
              else
              {
                _S4 = 1.0;
              }
              _Q0.n128_u16[0] = v24->i16[0];
              _Q0.n128_u32[0] = PDAcolordodgePDA(_Q0, _S4, _Q2, _S3);
              _Q2.n128_u32[0] = _Q0.n128_u32[0];
              if (v5)
              {
LABEL_244:
                v24->i16[0] = _Q2.n128_u16[0];
                *v12 = _H1;
                goto LABEL_246;
              }
              v24->i16[0] = _Q0.n128_u16[0];
            }
          }
LABEL_246:
          ++v26;
          v24 = (int16x4_t *)((char *)v24 + 2);
          v12 = (__int16 *)((char *)v12 + v309);
          --v310;
        }
        while (v310);
        v26 += v29;
        v24 = (int16x4_t *)((char *)v24 + 2 * v719);
        v12 += v31;
        --v17;
        v14 = v30;
        if (!v17)
          return;
      }
    case 19:
      __asm { FCVT            S9, H0; jumptable 0000000184DF2984 case 19 }
      v318 = 2 * v13;
      while (1)
      {
        v319 = v14;
        do
        {
          if (*(_BYTE *)v26)
          {
            v320 = (float)*(unsigned __int8 *)v26 * 0.0039216;
            _S1 = v320 * _S8;
            __asm
            {
              FCVT            H1, S1
              FCVT            S3, H1
            }
            if (_S3 > 0.0)
            {
              _Q0.n128_f32[0] = v320 * _S9;
              __asm { FCVT            H2, S0 }
              if (v5)
              {
                _H0 = *v12;
                __asm { FCVT            S4, H0 }
                if (_S4 <= 0.0)
                  goto LABEL_258;
              }
              else
              {
                _S4 = 1.0;
              }
              _Q0.n128_u16[0] = v24->i16[0];
              _Q0.n128_u32[0] = PDAcolorburnPDA(_Q0, _S4, _Q2, _S3);
              _Q2.n128_u32[0] = _Q0.n128_u32[0];
              if (v5)
              {
LABEL_258:
                v24->i16[0] = _Q2.n128_u16[0];
                *v12 = _H1;
                goto LABEL_260;
              }
              v24->i16[0] = _Q0.n128_u16[0];
            }
          }
LABEL_260:
          ++v26;
          v24 = (int16x4_t *)((char *)v24 + 2);
          v12 = (__int16 *)((char *)v12 + v318);
          --v319;
        }
        while (v319);
        v26 += v29;
        v24 = (int16x4_t *)((char *)v24 + 2 * v719);
        v12 += v31;
        --v17;
        v14 = v30;
        if (!v17)
          return;
      }
    case 20:
      __asm { FCVT            S9, H0; jumptable 0000000184DF2984 case 20 }
      v327 = 2 * v13;
      while (1)
      {
        v328 = v14;
        do
        {
          if (*(_BYTE *)v26)
          {
            v329 = (float)*(unsigned __int8 *)v26 * 0.0039216;
            _S1 = v329 * _S8;
            __asm
            {
              FCVT            H1, S1
              FCVT            S3, H1
            }
            if (_S3 > 0.0)
            {
              _Q0.n128_f32[0] = v329 * _S9;
              __asm { FCVT            H2, S0 }
              if (v5)
              {
                _H0 = *v12;
                __asm { FCVT            S4, H0 }
                if (_S4 <= 0.0)
                  goto LABEL_272;
              }
              else
              {
                _S4 = 1.0;
              }
              _Q0.n128_u16[0] = v24->i16[0];
              _Q0.n128_u32[0] = PDAsoftlightPDA(_Q0, _S4, _Q2, _S3);
              _Q2.n128_u32[0] = _Q0.n128_u32[0];
              if (v5)
              {
LABEL_272:
                v24->i16[0] = _Q2.n128_u16[0];
                *v12 = _H1;
                goto LABEL_274;
              }
              v24->i16[0] = _Q0.n128_u16[0];
            }
          }
LABEL_274:
          ++v26;
          v24 = (int16x4_t *)((char *)v24 + 2);
          v12 = (__int16 *)((char *)v12 + v327);
          --v328;
        }
        while (v328);
        v26 += v29;
        v24 = (int16x4_t *)((char *)v24 + 2 * v719);
        v12 += v31;
        --v17;
        v14 = v30;
        if (!v17)
          return;
      }
    case 21:
      __asm { FCVT            S9, H0; jumptable 0000000184DF2984 case 21 }
      v336 = 2 * v13;
      while (1)
      {
        v337 = v14;
        do
        {
          if (*(_BYTE *)v26)
          {
            v338 = (float)*(unsigned __int8 *)v26 * 0.0039216;
            _S1 = v338 * _S8;
            __asm
            {
              FCVT            H1, S1
              FCVT            S3, H1
            }
            if (_S3 > 0.0)
            {
              _Q0.n128_f32[0] = v338 * _S9;
              __asm { FCVT            H2, S0 }
              if (v5)
              {
                _H0 = *v12;
                __asm { FCVT            S4, H0 }
                if (_S4 <= 0.0)
                  goto LABEL_286;
              }
              else
              {
                _S4 = 1.0;
              }
              _Q0.n128_u16[0] = v24->i16[0];
              _Q0.n128_u32[0] = PDAhardlightPDA(_Q0, _S4, _Q2, _S3);
              _Q2.n128_u32[0] = _Q0.n128_u32[0];
              if (v5)
              {
LABEL_286:
                v24->i16[0] = _Q2.n128_u16[0];
                *v12 = _H1;
                goto LABEL_288;
              }
              v24->i16[0] = _Q0.n128_u16[0];
            }
          }
LABEL_288:
          ++v26;
          v24 = (int16x4_t *)((char *)v24 + 2);
          v12 = (__int16 *)((char *)v12 + v336);
          --v337;
        }
        while (v337);
        v26 += v29;
        v24 = (int16x4_t *)((char *)v24 + 2 * v719);
        v12 += v31;
        --v17;
        v14 = v30;
        if (!v17)
          return;
      }
    case 22:
      __asm { FCVT            S0, H0; jumptable 0000000184DF2984 case 22 }
      v345 = 2 * v13;
      while (1)
      {
        v346 = v14;
        do
        {
          if (*(_BYTE *)v26)
          {
            v347 = (float)*(unsigned __int8 *)v26 * 0.0039216;
            _S2 = v347 * _S8;
            __asm
            {
              FCVT            H5, S2
              FCVT            S2, H5
            }
            if (_S2 > 0.0)
            {
              _S3 = v347 * _S0;
              __asm { FCVT            H3, S3 }
              if (v5)
              {
                _H4 = *v12;
                __asm { FCVT            S4, H4 }
                if (_S4 <= 0.0)
                  goto LABEL_303;
              }
              else
              {
                _S4 = 1.0;
              }
              _H5 = v24->i16[0];
              __asm
              {
                FCVT            S5, H5
                FCVT            S3, H3
              }
              v358 = _S3 + _S5;
              v359 = _S2 * _S5;
              v360 = _S4 * _S3;
              v361 = v358 - v359;
              v362 = v359 - v360;
              v363 = v361 - v360;
              if (v362 < 0.0)
                v362 = -v362;
              _S3 = v363 + v362;
              __asm { FCVT            H3, S3 }
              if (v5)
              {
                _S2 = (float)(_S4 + _S2) - (float)(_S4 * _S2);
                __asm { FCVT            H5, S2 }
LABEL_303:
                v24->i16[0] = _H3;
                *v12 = _H5;
                goto LABEL_305;
              }
              v24->i16[0] = _H3;
            }
          }
LABEL_305:
          ++v26;
          v24 = (int16x4_t *)((char *)v24 + 2);
          v12 = (__int16 *)((char *)v12 + v345);
          --v346;
        }
        while (v346);
        v26 += v27;
        v24 = (int16x4_t *)((char *)v24 + 2 * v28);
        v12 += v16;
        if (!--v17)
          return;
      }
    case 23:
      __asm { FCVT            S0, H0; jumptable 0000000184DF2984 case 23 }
      v367 = 2 * v13;
      while (1)
      {
        v368 = v14;
        do
        {
          if (*(_BYTE *)v26)
          {
            v369 = (float)*(unsigned __int8 *)v26 * 0.0039216;
            _S4 = v369 * _S8;
            __asm
            {
              FCVT            H5, S4
              FCVT            S4, H5
            }
            if (_S4 > 0.0)
            {
              _S3 = v369 * _S0;
              __asm { FCVT            H3, S3 }
              if (v5)
              {
                _H6 = *v12;
                __asm { FCVT            S6, H6 }
                if (_S6 <= 0.0)
                  goto LABEL_318;
              }
              else
              {
                _S6 = 1.0;
              }
              _H5 = v24->i16[0];
              __asm
              {
                FCVT            S5, H5
                FCVT            S3, H3
              }
              _S3 = (float)(_S3 + _S5) + (float)((float)(_S3 * _S5) * -2.0);
              __asm { FCVT            H3, S3 }
              if (v5)
              {
                _S4 = (float)(_S6 + _S4) - (float)(_S6 * _S4);
                __asm { FCVT            H5, S4 }
LABEL_318:
                v24->i16[0] = _H3;
                *v12 = _H5;
                goto LABEL_320;
              }
              v24->i16[0] = _H3;
            }
          }
LABEL_320:
          ++v26;
          v24 = (int16x4_t *)((char *)v24 + 2);
          v12 = (__int16 *)((char *)v12 + v367);
          --v368;
        }
        while (v368);
        v26 += v27;
        v24 = (int16x4_t *)((char *)v24 + 2 * v28);
        v12 += v16;
        if (!--v17)
          return;
      }
    case 24:
      __asm { FCVT            S0, H0; jumptable 0000000184DF2984 case 24 }
      v383 = 2 * v13;
      while (1)
      {
        v384 = v14;
        do
        {
          if (*(_BYTE *)v26)
          {
            v385 = (float)*(unsigned __int8 *)v26 * 0.0039216;
            _S4 = v385 * _S8;
            __asm
            {
              FCVT            H7, S4
              FCVT            S4, H7
            }
            if (_S4 > 0.0)
            {
              _S5 = v385 * _S0;
              __asm { FCVT            H5, S5 }
              if (v5)
              {
                _H6 = *v12;
                __asm { FCVT            S6, H6 }
                if (_S6 <= 0.0)
                  goto LABEL_338;
              }
              else
              {
                _S6 = 1.0;
              }
              _H7 = v24->i16[0];
              __asm
              {
                FCVT            S7, H7
                FCVT            S5, H5
              }
              v396 = _S7 - (float)(_S4 * _S7);
              if (_S4 == 1.0)
              {
                v397 = 0.0;
              }
              else
              {
                _S7 = _S4 * _S7;
                v397 = v396;
              }
              v398 = (float)(v397 + _S5) - (float)(_S6 * _S5);
              if (_S6 == 1.0)
                v398 = v397;
              _S5 = _S7 + v398;
              __asm { FCVT            H5, S5 }
              if (v5)
              {
                _S4 = (float)(_S6 + _S4) - (float)(_S6 * _S4);
                __asm { FCVT            H7, S4 }
LABEL_338:
                v24->i16[0] = _H5;
                *v12 = _H7;
                goto LABEL_340;
              }
              v24->i16[0] = _H5;
            }
          }
LABEL_340:
          ++v26;
          v24 = (int16x4_t *)((char *)v24 + 2);
          v12 = (__int16 *)((char *)v12 + v383);
          --v384;
        }
        while (v384);
        v26 += v27;
        v24 = (int16x4_t *)((char *)v24 + 2 * v28);
        v12 += v16;
        if (!--v17)
          return;
      }
    case 25:
      __asm { FCVT            S0, H0; jumptable 0000000184DF2984 case 25 }
      v402 = 2 * v13;
      while (1)
      {
        v403 = v14;
        do
        {
          if (*(_BYTE *)v26)
          {
            v404 = (float)*(unsigned __int8 *)v26 * 0.0039216;
            _S4 = v404 * _S8;
            __asm
            {
              FCVT            H7, S4
              FCVT            S4, H7
            }
            if (_S4 > 0.0)
            {
              _S5 = v404 * _S0;
              __asm { FCVT            H5, S5 }
              if (v5)
              {
                _H6 = *v12;
                __asm { FCVT            S6, H6 }
                if (_S6 <= 0.0)
                  goto LABEL_358;
              }
              else
              {
                _S6 = 1.0;
              }
              _H7 = v24->i16[0];
              __asm
              {
                FCVT            S7, H7
                FCVT            S5, H5
              }
              v415 = _S7 - (float)(_S4 * _S7);
              if (_S4 == 1.0)
              {
                v416 = 0.0;
              }
              else
              {
                _S7 = _S4 * _S7;
                v416 = v415;
              }
              v417 = (float)(v416 + _S5) - (float)(_S6 * _S5);
              if (_S6 == 1.0)
                v417 = v416;
              _S5 = _S7 + v417;
              __asm { FCVT            H5, S5 }
              if (v5)
              {
                _S4 = (float)(_S6 + _S4) - (float)(_S6 * _S4);
                __asm { FCVT            H7, S4 }
LABEL_358:
                v24->i16[0] = _H5;
                *v12 = _H7;
                goto LABEL_360;
              }
              v24->i16[0] = _H5;
            }
          }
LABEL_360:
          ++v26;
          v24 = (int16x4_t *)((char *)v24 + 2);
          v12 = (__int16 *)((char *)v12 + v402);
          --v403;
        }
        while (v403);
        v26 += v27;
        v24 = (int16x4_t *)((char *)v24 + 2 * v28);
        v12 += v16;
        if (!--v17)
          return;
      }
    case 26:
      __asm { FCVT            S0, H0; jumptable 0000000184DF2984 case 26 }
      v421 = 2 * v13;
      while (1)
      {
        v422 = v14;
        do
        {
          if (*(_BYTE *)v26)
          {
            v423 = (float)*(unsigned __int8 *)v26 * 0.0039216;
            _S4 = v423 * _S8;
            __asm
            {
              FCVT            H7, S4
              FCVT            S4, H7
            }
            if (_S4 > 0.0)
            {
              _S5 = v423 * _S0;
              __asm { FCVT            H5, S5 }
              if (v5)
              {
                _H6 = *v12;
                __asm { FCVT            S6, H6 }
                if (_S6 <= 0.0)
                  goto LABEL_377;
              }
              else
              {
                _S6 = 1.0;
              }
              _H7 = v24->i16[0];
              __asm
              {
                FCVT            S7, H7
                FCVT            S5, H5
              }
              v434 = _S5 - (float)(_S6 * _S5);
              if (_S6 == 1.0)
                v434 = 0.0;
              v435 = (float)(v434 + _S7) - (float)(_S4 * _S7);
              if (_S4 != 1.0)
              {
                _S7 = _S4 * _S7;
                v434 = v435;
              }
              _S5 = _S7 + v434;
              __asm { FCVT            H5, S5 }
              if (v5)
              {
                _S4 = (float)(_S6 + _S4) - (float)(_S6 * _S4);
                __asm { FCVT            H7, S4 }
LABEL_377:
                v24->i16[0] = _H5;
                *v12 = _H7;
                goto LABEL_379;
              }
              v24->i16[0] = _H5;
            }
          }
LABEL_379:
          ++v26;
          v24 = (int16x4_t *)((char *)v24 + 2);
          v12 = (__int16 *)((char *)v12 + v421);
          --v422;
        }
        while (v422);
        v26 += v27;
        v24 = (int16x4_t *)((char *)v24 + 2 * v28);
        v12 += v16;
        if (!--v17)
          return;
      }
    case 27:
      __asm { FCVT            S0, H0; jumptable 0000000184DF2984 case 27 }
      v439 = 2 * v13;
      break;
    default:
      return;
  }
  do
  {
    v440 = v14;
    do
    {
      if (*(_BYTE *)v26)
      {
        v441 = (float)*(unsigned __int8 *)v26 * 0.0039216;
        _S4 = v441 * _S8;
        __asm
        {
          FCVT            H7, S4
          FCVT            S4, H7
        }
        if (_S4 > 0.0)
        {
          _S5 = v441 * _S0;
          __asm { FCVT            H5, S5 }
          if (v5)
          {
            _H6 = *v12;
            __asm { FCVT            S6, H6 }
            if (_S6 <= 0.0)
              goto LABEL_396;
          }
          else
          {
            _S6 = 1.0;
          }
          _H7 = v24->i16[0];
          __asm
          {
            FCVT            S5, H5
            FCVT            S7, H7
          }
          v452 = _S7 - (float)(_S4 * _S7);
          if (_S4 == 1.0)
            v452 = 0.0;
          v453 = (float)(v452 + _S5) - (float)(_S6 * _S5);
          if (_S6 != 1.0)
          {
            _S5 = _S6 * _S5;
            v452 = v453;
          }
          _S5 = _S5 + v452;
          __asm { FCVT            H5, S5 }
          if (v5)
          {
            _S4 = (float)(_S6 + _S4) - (float)(_S6 * _S4);
            __asm { FCVT            H7, S4 }
LABEL_396:
            v24->i16[0] = _H5;
            *v12 = _H7;
            goto LABEL_398;
          }
          v24->i16[0] = _H5;
        }
      }
LABEL_398:
      ++v26;
      v24 = (int16x4_t *)((char *)v24 + 2);
      v12 = (__int16 *)((char *)v12 + v439);
      --v440;
    }
    while (v440);
    v26 += v27;
    v24 = (int16x4_t *)((char *)v24 + 2 * v28);
    v12 += v16;
    --v17;
  }
  while (v17);
}

void Wf16_mark_pixelmask(uint64_t a1, int a2, __n128 _Q0, double a4, __n128 _Q2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int16 *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  char *v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unsigned int v38;
  float v45;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int16 *v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  float v58;
  char *v67;
  __int16 *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int16 *v78;
  int v79;
  unsigned int v80;
  float v84;
  char *v97;
  __int16 *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int16 *v109;
  int v110;
  unsigned int v111;
  float v119;
  float v124;
  float v128;
  char *v135;
  __int16 *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  __int16 *v147;
  int v148;
  unsigned int v149;
  float v160;
  float v166;
  float v169;
  char *v173;
  __int16 *v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  __int16 *v185;
  int v186;
  float v191;
  char *v201;
  __int16 *v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  __int16 *v213;
  int v214;
  unsigned int v215;
  float v218;
  float v223;
  float v229;
  char *v235;
  __int16 *v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  __int16 *v246;
  int v247;
  unsigned int v248;
  float v257;
  char *v267;
  __int16 *v268;
  uint64_t v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  __int16 *v278;
  int v279;
  unsigned int v280;
  float v290;
  char *v296;
  __int16 *v297;
  uint64_t v298;
  char *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  __int16 *v308;
  int v309;
  float v312;
  float v323;
  char *v326;
  __int16 *v327;
  uint64_t v328;
  char *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  __int16 *v338;
  int v339;
  float v344;
  char *v355;
  __int16 *v356;
  uint64_t v357;
  char *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  __int16 *v366;
  int v367;
  float v377;
  float v381;
  char *v385;
  __int16 *v386;
  uint64_t v387;
  char *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  __int16 *v396;
  int v397;
  char *v414;
  __int16 *v415;
  uint64_t v416;
  char *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  __int16 *v426;
  int v427;
  float v430;
  float v443;
  float v444;
  char *v447;
  __int16 *v448;
  uint64_t v449;
  char *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  __int16 *v459;
  int v460;
  float v463;
  char *v478;
  __int16 *v479;
  uint64_t v480;
  char *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  __int16 *v487;
  int v488;
  int v489;
  float v492;
  char *v499;
  uint64_t v500;
  char *v501;
  int v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  unint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  __int16 *v513;
  int v514;
  float v517;
  float v530;
  float v531;
  char *v534;
  __int16 *v535;
  uint64_t v536;
  char *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  __int16 *v546;
  int v547;
  float v550;
  float v563;
  float v564;
  char *v567;
  __int16 *v568;
  uint64_t v569;
  char *v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  __int16 *v576;
  int v577;
  int v578;
  float v581;
  char *v588;
  uint64_t v589;
  char *v590;
  int v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  unint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  __int16 *v599;
  int v600;
  int v601;
  float v604;
  char *v611;
  uint64_t v612;
  char *v613;
  int v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  unint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  __int16 *v622;
  int v623;
  int v624;
  float v627;
  char *v634;
  uint64_t v635;
  char *v636;
  int v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  unint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  __int16 *v645;
  int v646;
  int v647;
  float v650;
  char *v657;
  uint64_t v658;
  char *v659;
  int v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  unint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  __int16 *v671;
  int v672;
  float v675;
  float v688;
  float v689;
  float v690;
  float v691;
  float v692;
  float v693;
  char *v696;
  __int16 *v697;
  uint64_t v698;
  char *v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  __int16 *v708;
  int v709;
  float v712;
  char *v727;
  __int16 *v728;
  uint64_t v729;
  char *v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  __int16 *v739;
  int v740;
  float v743;
  float v756;
  float v757;
  float v758;
  char *v761;
  __int16 *v762;
  uint64_t v763;
  char *v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  __int16 *v773;
  int v774;
  float v777;
  float v790;
  float v791;
  float v792;
  char *v795;
  __int16 *v796;
  uint64_t v797;
  char *v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  __int16 *v807;
  int v808;
  float v811;
  float v824;
  float v825;
  char *v828;
  __int16 *v829;
  uint64_t v830;
  char *v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  __int16 *v840;
  int v841;
  float v844;
  float v857;
  float v858;
  char *v861;
  __int16 *v862;
  uint64_t v863;
  char *v864;
  uint64_t v865;
  uint64_t v866;
  int v867;
  unsigned int v868;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  int v877;
  unsigned int v878;
  char *v885;
  uint64_t v886;
  char *v887;
  char *v888;
  uint64_t v889;
  char *v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  __int16 *v896;
  int v897;
  unsigned int v898;
  float v906;
  char *v917;
  __int16 *v918;
  uint64_t v919;
  char *v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  __int16 *v927;
  int v928;
  unsigned int v929;
  char *v940;
  __int16 *v941;
  uint64_t v942;
  char *v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  __int16 *v950;
  int v951;
  unsigned int v952;
  char *v959;
  __int16 *v960;
  uint64_t v961;
  char *v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  __int16 *v969;
  int v970;
  char *v982;
  __int16 *v983;
  uint64_t v984;
  char *v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  int v990;
  char *v998;
  uint64_t v999;
  char *v1000;
  char *v1001;
  uint64_t v1002;
  char *v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  int v1007;
  unsigned int v1008;
  float v1010;
  char *v1018;
  uint64_t v1019;
  char *v1020;
  char *v1021;
  uint64_t v1022;
  char *v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  unint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  int v1038;
  unint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  int v1055;
  int v1056;
  int v1057;
  int v1058;
  int v1059;
  unint64_t v1060;
  char *v1061;
  int v1062;
  int v1063;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 136);
  v8 = *(int *)(a1 + 12);
  v7 = *(int *)(a1 + 16);
  if (v5)
  {
    v9 = (unint64_t)*(int *)(a1 + 32) >> 1;
    v10 = (__int16 *)(v5 + 2 * (v8 + v9 * v7));
    v11 = -1;
    if (!v6)
      return;
  }
  else
  {
    v10 = 0;
    v9 = 0;
    v11 = 0;
    if (!v6)
      return;
  }
  v13 = *(_DWORD *)(a1 + 4);
  v12 = *(_DWORD *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 88);
  v14 = *(_QWORD *)(a1 + 96);
  v16 = (unint64_t)*(int *)(a1 + 28) >> 1;
  v17 = (char *)(*(_QWORD *)(a1 + 40) + 2 * (v8 + v16 * v7));
  v18 = *(int *)(a1 + 124);
  v19 = (_BYTE *)(v6 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v18);
  v20 = *(int *)(a1 + 56);
  v21 = *(int *)(a1 + 60);
  v22 = *(int *)(a1 + 76);
  if ((*(_DWORD *)a1 & 0xFF00) == 0x100)
  {
    v23 = v22 >> 1;
    if (v14)
    {
      v24 = (unint64_t)*(int *)(a1 + 80) >> 1;
      v14 += 2 * (v20 + v24 * v21);
      v1062 = -1;
    }
    else
    {
      v24 = 0;
      v1062 = 0;
    }
    v27 = (char *)(v15 + 2 * (v20 + v23 * v21));
    if (v23 == v16 && v17 - v27 >= 1)
    {
      if (v13 >= (uint64_t)((unint64_t)(v17 - v27) >> 1))
      {
        v17 += 2 * v13 - 2;
        v27 += 2 * v13 - 2;
        v19 += v13 - 1;
        v10 += v11 & (v13 - 1);
        v29 = -1;
        v23 = (unint64_t)*(int *)(a1 + 28) >> 1;
        v14 += 2 * (v1062 & (v13 - 1));
        goto LABEL_16;
      }
      v28 = v12 - 1;
      if (v17 <= &v27[2 * v16 * v28 - 2 + 2 * v13])
      {
        v17 += 2 * v16 * v28;
        v23 = -(uint64_t)v16;
        v19 += v18 * v28;
        v18 = -v18;
        v10 += v9 * v28;
        v9 = -(uint64_t)v9;
        v11 &= 1u;
        v14 += 2 * v24 * v28;
        v24 = -(uint64_t)v24;
        v1062 &= 1u;
        v29 = 1;
        v27 += 2 * v16 * v28;
        v16 = -(uint64_t)v16;
        goto LABEL_16;
      }
    }
    v11 &= 1u;
    v1062 &= 1u;
    v29 = 1;
LABEL_16:
    v30 = 0;
    v1061 = 0;
    v15 = -1;
    v26 = v24;
    v25 = v23;
    goto LABEL_19;
  }
  v25 = *(_DWORD *)(a1 + 64);
  v26 = *(_DWORD *)(a1 + 68);
  v23 = v22 >> 1;
  if (v14)
  {
    v24 = (unint64_t)*(int *)(a1 + 80) >> 1;
    v1062 = 1;
  }
  else
  {
    v24 = 0;
    v1062 = 0;
  }
  v30 = v15 + 2 * v23 * v26;
  v11 &= 1u;
  v29 = 1;
  v1061 = *(char **)(a1 + 88);
  v27 = v1061;
LABEL_19:
  v1063 = v11;
  v31 = v29 * v13;
  if (v30)
  {
    v32 = (int)v21 % v26;
    v33 = &v27[2 * v23 * v32];
    v34 = (int)v20 % v25;
    v27 = &v33[2 * v34];
    v15 = (unint64_t)&v33[2 * v25];
    if ((v1062 & 1) != 0)
      v14 += 2 * v24 * v32 + 2 * v34;
    v1061 = &v33[2 * v34];
  }
  else
  {
    v23 -= v31;
    v24 -= v1062 * v13;
  }
  v35 = v18 - v31;
  v36 = v16 - v31;
  v1060 = v9 - v1063 * v13;
  v1037 = v23;
  v1038 = v13;
  v1035 = v36;
  v1036 = v35;
  v1039 = v30;
  switch(a2)
  {
    case 0:
      if (v1063)
      {
        do
        {
          v37 = v13;
          do
          {
            v38 = *v19;
            if (*v19)
            {
              if (v38 == 255)
              {
                *v10 = 0;
                *(_WORD *)v17 = 0;
              }
              else
              {
                _H3 = *(_WORD *)v17;
                __asm { FCVT            S3, H3 }
                v45 = (float)((float)v38 * -0.0039216) + 1.0;
                _S3 = v45 * _S3;
                __asm { FCVT            H3, S3 }
                *(_WORD *)v17 = LOWORD(_S3);
                LOWORD(_S3) = *v10;
                __asm { FCVT            S3, H3 }
                _S3 = v45 * _S3;
                __asm { FCVT            H3, S3 }
                *v10 = LOWORD(_S3);
              }
            }
            v19 += v29;
            v10 += v1063;
            v17 += 2 * v29;
            --v37;
          }
          while (v37);
          v19 += v35;
          v17 += 2 * v36;
          v10 += v1060;
          --v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v867 = v13;
          do
          {
            v868 = *v19;
            if (*v19)
            {
              _H2 = 0;
              if (v868 != 255)
              {
                _H2 = *(_WORD *)v17;
                __asm { FCVT            S2, H2 }
                _S2 = (float)((float)((float)v868 * -0.0039216) + 1.0) * _S2;
                __asm { FCVT            H2, S2 }
              }
              *(_WORD *)v17 = _H2;
            }
            v19 += v29;
            v17 += 2 * v29;
            --v867;
          }
          while (v867);
          v19 += v35;
          v17 += 2 * v36;
          --v12;
        }
        while (v12);
      }
      return;
    case 1:
      if (v1063)
      {
        v49 = v29;
        if (v1062)
        {
          v50 = v26;
          v51 = -(v23 * v26);
          v52 = -(uint64_t)(v24 * v50);
          v53 = (__int16 *)v14;
          v54 = -(uint64_t)v25;
          do
          {
            v55 = v13;
            do
            {
              v56 = *v19;
              if (*v19)
              {
                if (v56 == 255)
                {
                  *(_WORD *)v17 = *(_WORD *)v27;
                  _H2 = *v53;
                }
                else
                {
                  v58 = (float)v56 * 0.0039216;
                  _H3 = *(_WORD *)v27;
                  __asm { FCVT            S3, H3 }
                  _H4 = *(_WORD *)v17;
                  __asm { FCVT            S4, H4 }
                  _S3 = (float)((float)(1.0 - v58) * _S4) + (float)(_S3 * v58);
                  __asm { FCVT            H3, S3 }
                  *(_WORD *)v17 = LOWORD(_S3);
                  LOWORD(_S3) = *v53;
                  __asm { FCVT            S3, H3 }
                  LOWORD(_S4) = *v10;
                  __asm { FCVT            S4, H4 }
                  _S2 = (float)((float)(1.0 - v58) * _S4) + (float)(_S3 * v58);
                  __asm { FCVT            H2, S2 }
                }
                *v10 = _H2;
              }
              v19 += v49;
              v67 = &v27[2 * v49];
              v68 = &v53[v1062];
              if ((unint64_t)v67 >= v15)
                v69 = v54;
              else
                v69 = 0;
              v53 = &v68[v69];
              v27 = &v67[2 * v69];
              v10 += v1063;
              v17 += 2 * v49;
              --v55;
            }
            while (v55);
            if (v30)
            {
              v70 = &v1061[2 * v23];
              if ((unint64_t)v70 >= v30)
                v71 = v52;
              else
                v71 = 0;
              v14 += 2 * v24 + 2 * v71;
              if ((unint64_t)v70 >= v30)
                v72 = v51;
              else
                v72 = 0;
              v27 = &v70[2 * v72];
              v15 += 2 * v72 + 2 * v23;
              v53 = (__int16 *)v14;
              v1061 = v27;
            }
            else
            {
              v27 += 2 * v23;
              v53 += v24;
            }
            v19 += v35;
            v17 += 2 * v36;
            v10 += v1060;
            --v12;
          }
          while (v12);
        }
        else
        {
          v1005 = -(uint64_t)v25;
          v1006 = -(v23 * v26);
          do
          {
            v1007 = v13;
            do
            {
              v1008 = *v19;
              if (*v19)
              {
                if (v1008 == 255)
                {
                  *(_WORD *)v17 = *(_WORD *)v27;
                  _H3 = 15360;
                }
                else
                {
                  v1010 = (float)v1008 * 0.0039216;
                  _H4 = *(_WORD *)v27;
                  __asm { FCVT            S4, H4 }
                  _H5 = *(_WORD *)v17;
                  __asm { FCVT            S5, H5 }
                  _S4 = (float)((float)(1.0 - v1010) * _S5) + (float)(_S4 * v1010);
                  __asm { FCVT            H4, S4 }
                  *(_WORD *)v17 = LOWORD(_S4);
                  LOWORD(_S4) = *v10;
                  __asm { FCVT            S4, H4 }
                  _S3 = v1010 + (float)((float)(1.0 - v1010) * _S4);
                  __asm { FCVT            H3, S3 }
                }
                *v10 = _H3;
              }
              v19 += v49;
              v1018 = &v27[2 * v49];
              if ((unint64_t)v1018 >= v15)
                v1019 = v1005;
              else
                v1019 = 0;
              v27 = &v1018[2 * v1019];
              v10 += v1063;
              v17 += 2 * v49;
              --v1007;
            }
            while (v1007);
            v19 += v35;
            v17 += 2 * v36;
            v1020 = v1061;
            v10 += v1060;
            v1021 = &v1061[2 * v23];
            if ((unint64_t)v1021 >= v30)
              v1022 = v1006;
            else
              v1022 = 0;
            v1023 = &v1021[2 * v1022];
            v1024 = v15 + 2 * v1022 + 2 * v23;
            if (v30)
            {
              v15 = v1024;
              v1020 = v1023;
            }
            v1061 = v1020;
            if (v30)
              v27 = v1023;
            else
              v27 += 2 * v23;
            --v12;
          }
          while (v12);
        }
      }
      else
      {
        v873 = v29;
        v874 = -(uint64_t)v25;
        v875 = -(v23 * v26);
        v876 = 2 * v29;
        do
        {
          v877 = v13;
          do
          {
            v878 = *v19;
            if (*v19)
            {
              if (v878 == 255)
              {
                _H2 = *(_WORD *)v27;
              }
              else
              {
                _H3 = *(_WORD *)v27;
                __asm { FCVT            S3, H3 }
                _H4 = *(_WORD *)v17;
                __asm { FCVT            S4, H4 }
                _S2 = (float)((float)(1.0 - (float)((float)v878 * 0.0039216)) * _S4)
                    + (float)(_S3 * (float)((float)v878 * 0.0039216));
                __asm { FCVT            H2, S2 }
              }
              *(_WORD *)v17 = _H2;
            }
            v19 += v873;
            v885 = &v27[2 * v873];
            if ((unint64_t)v885 >= v15)
              v886 = v874;
            else
              v886 = 0;
            v27 = &v885[2 * v886];
            v17 += v876;
            --v877;
          }
          while (v877);
          v19 += v35;
          v17 += 2 * v36;
          v887 = v1061;
          v888 = &v1061[2 * v23];
          if ((unint64_t)v888 >= v30)
            v889 = v875;
          else
            v889 = 0;
          v890 = &v888[2 * v889];
          v891 = v15 + 2 * v889 + 2 * v23;
          if (v30)
          {
            v15 = v891;
            v887 = v890;
          }
          v1061 = v887;
          if (v30)
            v27 = v890;
          else
            v27 += 2 * v23;
          --v12;
        }
        while (v12);
      }
      return;
    case 2:
      v73 = v29;
      if (v1063)
      {
        v74 = -(uint64_t)v25;
        v75 = v26;
        v76 = -(v23 * v26);
        v77 = -(uint64_t)(v24 * v75);
        v78 = (__int16 *)v14;
        while (1)
        {
          v79 = v13;
          do
          {
            v80 = *v19;
            if (!*v19)
              goto LABEL_73;
            if (v80 == 255)
            {
              _H3 = *v78;
              __asm { FCVT            S2, H3 }
              if (_S2 >= 1.0)
              {
                *(_WORD *)v17 = *(_WORD *)v27;
                goto LABEL_72;
              }
              if (_S2 <= 0.0)
                goto LABEL_73;
              _H3 = *(_WORD *)v27;
            }
            else
            {
              v84 = (float)v80 * 0.0039216;
              _H2 = *v78;
              __asm { FCVT            S2, H2 }
              _S2 = v84 * _S2;
              __asm
              {
                FCVT            H2, S2
                FCVT            S2, H2
              }
              if (_S2 <= 0.0)
                goto LABEL_73;
              _H4 = *(_WORD *)v27;
              __asm { FCVT            S4, H4 }
              _S3 = v84 * _S4;
              __asm { FCVT            H3, S3 }
            }
            __asm { FCVT            S3, H3 }
            _H4 = *(_WORD *)v17;
            __asm { FCVT            S4, H4 }
            _S3 = _S3 + (float)(_S4 * (float)(1.0 - _S2));
            __asm { FCVT            H3, S3 }
            *(_WORD *)v17 = LOWORD(_S3);
            LOWORD(_S3) = *v10;
            __asm { FCVT            S3, H3 }
            _S2 = _S2 + (float)(_S3 * (float)(1.0 - _S2));
            __asm { FCVT            H3, S2 }
LABEL_72:
            *v10 = _H3;
LABEL_73:
            v19 += v73;
            v97 = &v27[2 * v73];
            v98 = &v78[v1062];
            if ((unint64_t)v97 >= v15)
              v99 = v74;
            else
              v99 = 0;
            v78 = &v98[v99];
            v27 = &v97[2 * v99];
            v10 += v1063;
            v17 += 2 * v73;
            --v79;
          }
          while (v79);
          if (v30)
          {
            v100 = &v1061[2 * v23];
            if ((unint64_t)v100 >= v30)
              v101 = v77;
            else
              v101 = 0;
            v14 += 2 * v24 + 2 * v101;
            if ((unint64_t)v100 >= v30)
              v102 = v76;
            else
              v102 = 0;
            v27 = &v100[2 * v102];
            v15 += 2 * v102 + 2 * v23;
            v78 = (__int16 *)v14;
            v1061 = v27;
          }
          else
          {
            v27 += 2 * v23;
            v78 += v24;
          }
          v19 += v35;
          v17 += 2 * v36;
          v10 += v1060;
          if (!--v12)
            return;
        }
      }
      v892 = -(uint64_t)v25;
      v893 = v26;
      v894 = -(v23 * v26);
      v895 = -(uint64_t)(v24 * v893);
      v896 = (__int16 *)v14;
LABEL_830:
      v897 = v13;
      while (1)
      {
        v898 = *v19;
        if (*v19)
        {
          if (v898 == 255)
          {
            _H2 = *v896;
            __asm { FCVT            S2, H2 }
            if (_S2 >= 1.0)
            {
              _H2 = *(_WORD *)v27;
              goto LABEL_840;
            }
            if (_S2 > 0.0)
            {
              _H3 = *(_WORD *)v27;
              __asm { FCVT            S3, H3 }
              _H4 = *(_WORD *)v17;
              __asm { FCVT            S4, H4 }
              _S2 = _S3 + (float)(_S4 * (float)(1.0 - _S2));
              goto LABEL_838;
            }
          }
          else
          {
            v906 = (float)v898 * 0.0039216;
            _H3 = *v896;
            __asm { FCVT            S3, H3 }
            _S3 = v906 * _S3;
            __asm
            {
              FCVT            H3, S3
              FCVT            S3, H3
            }
            if (_S3 > 0.0)
            {
              _H4 = *(_WORD *)v27;
              __asm { FCVT            S4, H4 }
              _S2 = v906 * _S4;
              __asm
              {
                FCVT            H2, S2
                FCVT            S2, H2
              }
              LOWORD(_S4) = *(_WORD *)v17;
              __asm { FCVT            S4, H4 }
              _S2 = _S2 + (float)(_S4 * (float)(1.0 - _S3));
LABEL_838:
              __asm { FCVT            H2, S2 }
LABEL_840:
              *(_WORD *)v17 = _H2;
            }
          }
        }
        v19 += v73;
        v917 = &v27[2 * v73];
        v918 = &v896[v1062];
        if ((unint64_t)v917 >= v15)
          v919 = v892;
        else
          v919 = 0;
        v896 = &v918[v919];
        v27 = &v917[2 * v919];
        v17 += 2 * v73;
        if (!--v897)
        {
          if (v30)
          {
            v920 = &v1061[2 * v23];
            if ((unint64_t)v920 >= v30)
              v921 = v895;
            else
              v921 = 0;
            v14 += 2 * v24 + 2 * v921;
            if ((unint64_t)v920 >= v30)
              v922 = v894;
            else
              v922 = 0;
            v27 = &v920[2 * v922];
            v15 += 2 * v922 + 2 * v23;
            v896 = (__int16 *)v14;
            v1061 = v27;
          }
          else
          {
            v27 += 2 * v23;
            v896 += v24;
          }
          v19 += v35;
          v17 += 2 * v36;
          if (!--v12)
            return;
          goto LABEL_830;
        }
      }
    case 3:
      v103 = v29;
      v104 = v26;
      v105 = -(v23 * v26);
      v106 = -(uint64_t)(v24 * v104);
      v107 = 2 * v29;
      v108 = -(uint64_t)v25;
      v109 = (__int16 *)v14;
      do
      {
        v110 = v13;
        do
        {
          v111 = *v19;
          if (*v19)
          {
            if (v111 == 255)
            {
              _H1 = *(_WORD *)v27;
              _H2 = *v10;
              __asm
              {
                FCVT            S2, H2
                FCVT            S1, H1
              }
              _S1 = _S1 * _S2;
              __asm { FCVT            H1, S1 }
              *(_WORD *)v17 = LOWORD(_S1);
              if (v1062)
              {
                _H1 = *v109;
                __asm { FCVT            S1, H1 }
              }
              else
              {
                _S1 = 1.0;
              }
              _H2 = *v10;
              __asm { FCVT            S2, H2 }
              _S1 = _S1 * _S2;
            }
            else
            {
              v119 = (float)v111 * 0.0039216;
              _H1 = *v10;
              __asm { FCVT            S1, H1 }
              _H2 = *(_WORD *)v27;
              __asm { FCVT            S5, H2 }
              v124 = v119 * _S1;
              _H4 = *(_WORD *)v17;
              __asm { FCVT            S6, H4 }
              _S4 = 1.0;
              v128 = 1.0 - v119;
              _S5 = (float)(v128 * _S6) + (float)(_S5 * v124);
              __asm { FCVT            H5, S5 }
              *(_WORD *)v17 = LOWORD(_S5);
              if (v1062)
              {
                _H4 = *v109;
                __asm { FCVT            S4, H4 }
              }
              _S1 = (float)(v128 * _S1) + (float)(_S4 * v124);
            }
            __asm { FCVT            H1, S1 }
            *v10 = _H1;
          }
          v19 += v103;
          v135 = &v27[2 * v103];
          v136 = &v109[v1062];
          if ((unint64_t)v135 >= v15)
            v137 = v108;
          else
            v137 = 0;
          v109 = &v136[v137];
          v27 = &v135[2 * v137];
          v10 += v1063;
          v17 += v107;
          --v110;
        }
        while (v110);
        if (v30)
        {
          v138 = &v1061[2 * v23];
          if ((unint64_t)v138 >= v30)
            v139 = v106;
          else
            v139 = 0;
          v14 += 2 * v24 + 2 * v139;
          if ((unint64_t)v138 >= v30)
            v140 = v105;
          else
            v140 = 0;
          v27 = &v138[2 * v140];
          v15 += 2 * v140 + 2 * v23;
          v109 = (__int16 *)v14;
          v1061 = v27;
        }
        else
        {
          v27 += 2 * v23;
          v109 += v24;
        }
        v19 += v35;
        v17 += 2 * v36;
        v10 += v1060;
        --v12;
      }
      while (v12);
      return;
    case 4:
      v141 = v29;
      v142 = v26;
      v143 = -(v23 * v26);
      v144 = -(uint64_t)(v24 * v142);
      v145 = 2 * v29;
      v146 = -(uint64_t)v25;
      v147 = (__int16 *)v14;
      do
      {
        v148 = v13;
        do
        {
          v149 = *v19;
          if (*v19)
          {
            if (v149 == 255)
            {
              _H2 = *(_WORD *)v27;
              __asm { FCVT            S3, H2 }
              _H2 = *v10;
              __asm { FCVT            S4, H2 }
              _S2 = 1.0;
              _S3 = (float)(1.0 - _S4) * _S3;
              __asm { FCVT            H3, S3 }
              *(_WORD *)v17 = LOWORD(_S3);
              if (v1062)
              {
                _H2 = *v147;
                __asm { FCVT            S2, H2 }
              }
              _H3 = *v10;
              __asm { FCVT            S3, H3 }
              _S2 = _S2 * (float)(1.0 - _S3);
            }
            else
            {
              v160 = (float)v149 * 0.0039216;
              _H2 = *v10;
              __asm { FCVT            S2, H2 }
              _H3 = *(_WORD *)v27;
              __asm { FCVT            S6, H3 }
              _S4 = 1.0;
              v166 = v160 * (float)(1.0 - _S2);
              _H7 = *(_WORD *)v17;
              __asm { FCVT            S7, H7 }
              v169 = 1.0 - v160;
              _S6 = (float)(v169 * _S7) + (float)(_S6 * v166);
              __asm { FCVT            H6, S6 }
              *(_WORD *)v17 = LOWORD(_S6);
              if (v1062)
              {
                _H4 = *v147;
                __asm { FCVT            S4, H4 }
              }
              _S2 = (float)(v169 * _S2) + (float)(_S4 * v166);
            }
            __asm { FCVT            H2, S2 }
            *v10 = _H2;
          }
          v19 += v141;
          v173 = &v27[2 * v141];
          v174 = &v147[v1062];
          if ((unint64_t)v173 >= v15)
            v175 = v146;
          else
            v175 = 0;
          v147 = &v174[v175];
          v27 = &v173[2 * v175];
          v10 += v1063;
          v17 += v145;
          --v148;
        }
        while (v148);
        if (v30)
        {
          v176 = &v1061[2 * v23];
          if ((unint64_t)v176 >= v30)
            v177 = v144;
          else
            v177 = 0;
          v14 += 2 * v24 + 2 * v177;
          if ((unint64_t)v176 >= v30)
            v178 = v143;
          else
            v178 = 0;
          v27 = &v176[2 * v178];
          v15 += 2 * v178 + 2 * v23;
          v147 = (__int16 *)v14;
          v1061 = v27;
        }
        else
        {
          v27 += 2 * v23;
          v147 += v24;
        }
        v19 += v35;
        v17 += 2 * v36;
        v10 += v1060;
        --v12;
      }
      while (v12);
      return;
    case 5:
      v179 = v29;
      v180 = v26;
      v181 = -(v23 * v26);
      v182 = -(uint64_t)(v24 * v180);
      v183 = 2 * v29;
      v184 = -(uint64_t)v25;
      v185 = (__int16 *)v14;
      do
      {
        v186 = v13;
        do
        {
          if (*v19)
          {
            _H2 = *v10;
            __asm { FCVT            S2, H2 }
            _H3 = *(_WORD *)v27;
            __asm { FCVT            S3, H3 }
            v191 = (float)*v19 * 0.0039216;
            _S3 = v191 * _S3;
            __asm { FCVT            H3, S3 }
            _H5 = *v185;
            __asm { FCVT            S5, H5 }
            _S4 = v191 * _S5;
            __asm
            {
              FCVT            H4, S4
              FCVT            S4, H4
              FCVT            S3, H3
            }
            LOWORD(_S5) = *(_WORD *)v17;
            __asm { FCVT            S5, H5 }
            _S3 = (float)((float)(1.0 - _S4) * _S5) + (float)(_S3 * _S2);
            __asm { FCVT            H3, S3 }
            *(_WORD *)v17 = LOWORD(_S3);
            _S2 = (float)((float)(1.0 - _S4) * _S2) + (float)(_S4 * _S2);
            __asm { FCVT            H2, S2 }
            *v10 = LOWORD(_S2);
          }
          v19 += v179;
          v201 = &v27[2 * v179];
          v202 = &v185[v1062];
          if ((unint64_t)v201 >= v15)
            v203 = v184;
          else
            v203 = 0;
          v185 = &v202[v203];
          v27 = &v201[2 * v203];
          v10 += v1063;
          v17 += v183;
          --v186;
        }
        while (v186);
        if (v30)
        {
          v204 = &v1061[2 * v23];
          if ((unint64_t)v204 >= v30)
            v205 = v182;
          else
            v205 = 0;
          v14 += 2 * v24 + 2 * v205;
          if ((unint64_t)v204 >= v30)
            v206 = v181;
          else
            v206 = 0;
          v27 = &v204[2 * v206];
          v15 += 2 * v206 + 2 * v23;
          v185 = (__int16 *)v14;
          v1061 = v27;
        }
        else
        {
          v27 += 2 * v23;
          v185 += v24;
        }
        v19 += v35;
        v17 += 2 * v36;
        v10 += v1060;
        --v12;
      }
      while (v12);
      return;
    case 6:
      v207 = v29;
      v208 = v26;
      v209 = -(v23 * v26);
      v210 = -(uint64_t)(v24 * v208);
      v211 = 2 * v29;
      v212 = -(uint64_t)v25;
      v213 = (__int16 *)v14;
      while (1)
      {
        v214 = v13;
        do
        {
          v215 = *v19;
          if (!*v19)
            goto LABEL_174;
          _H2 = *v10;
          __asm { FCVT            S2, H2 }
          v218 = 1.0 - _S2;
          if ((float)(1.0 - _S2) >= 1.0)
          {
            _H2 = *(_WORD *)v27;
            __asm { FCVT            S3, H2 }
            v229 = (float)v215 * 0.0039216;
            _S3 = v229 * _S3;
            __asm { FCVT            H3, S3 }
            *(_WORD *)v17 = LOWORD(_S3);
            if (v1062)
            {
              _H3 = *v213;
              __asm { FCVT            S3, H3 }
            }
            else
            {
              _S3 = 1.0;
            }
            _S2 = v229 * _S3;
          }
          else
          {
            if (v218 <= 0.0)
              goto LABEL_174;
            _H4 = *(_WORD *)v17;
            __asm { FCVT            S4, H4 }
            _H5 = *(_WORD *)v27;
            __asm { FCVT            S5, H5 }
            v223 = (float)((float)v215 * 0.0039216) * v218;
            _S4 = _S4 + (float)(_S5 * v223);
            __asm { FCVT            H4, S4 }
            *(_WORD *)v17 = LOWORD(_S4);
            if (v1062)
            {
              _H4 = *v213;
              __asm { FCVT            S4, H4 }
            }
            else
            {
              _S4 = 1.0;
            }
            _S2 = _S2 + (float)(_S4 * v223);
          }
          __asm { FCVT            H2, S2 }
          *v10 = _H2;
LABEL_174:
          v19 += v207;
          v235 = &v27[2 * v207];
          v236 = &v213[v1062];
          if ((unint64_t)v235 >= v15)
            v237 = v212;
          else
            v237 = 0;
          v213 = &v236[v237];
          v27 = &v235[2 * v237];
          v10 += v1063;
          v17 += v211;
          --v214;
        }
        while (v214);
        if (v30)
        {
          v238 = &v1061[2 * v23];
          if ((unint64_t)v238 >= v30)
            v239 = v210;
          else
            v239 = 0;
          v14 += 2 * v24 + 2 * v239;
          if ((unint64_t)v238 >= v30)
            v240 = v209;
          else
            v240 = 0;
          v27 = &v238[2 * v240];
          v15 += 2 * v240 + 2 * v23;
          v213 = (__int16 *)v14;
          v1061 = v27;
        }
        else
        {
          v27 += 2 * v23;
          v213 += v24;
        }
        v19 += v35;
        v17 += 2 * v36;
        v10 += v1060;
        if (!--v12)
          return;
      }
    case 7:
      v241 = v29;
      if (v1063)
      {
        v242 = v26;
        v243 = -(v23 * v26);
        v244 = -(uint64_t)(v24 * v242);
        v245 = -(uint64_t)v25;
        v246 = (__int16 *)v14;
        do
        {
          v247 = v13;
          do
          {
            v248 = *v19;
            if (*v19)
            {
              if (v248 == 255)
              {
                _H2 = *(_WORD *)v17;
                _H3 = *v246;
                __asm
                {
                  FCVT            S3, H3
                  FCVT            S2, H2
                }
                _S2 = _S2 * _S3;
                __asm { FCVT            H2, S2 }
                *(_WORD *)v17 = LOWORD(_S2);
                LOWORD(_S2) = *v10;
                LOWORD(_S3) = *v246;
                __asm
                {
                  FCVT            S3, H3
                  FCVT            S2, H2
                }
                _S2 = _S2 * _S3;
              }
              else
              {
                v257 = (float)v248 * 0.0039216;
                _H3 = *v10;
                __asm { FCVT            S3, H3 }
                _H4 = *(_WORD *)v17;
                __asm { FCVT            S4, H4 }
                _H5 = *v246;
                __asm { FCVT            S5, H5 }
                _S4 = (float)((float)(1.0 - v257) * _S4) + (float)(_S4 * (float)(v257 * _S5));
                __asm { FCVT            H4, S4 }
                *(_WORD *)v17 = LOWORD(_S4);
                LOWORD(_S4) = *v246;
                __asm { FCVT            S4, H4 }
                _S2 = (float)((float)(1.0 - v257) * _S3) + (float)(_S3 * (float)(v257 * _S4));
              }
              __asm { FCVT            H2, S2 }
              *v10 = _H2;
            }
            v19 += v241;
            v267 = &v27[2 * v241];
            v268 = &v246[v1062];
            if ((unint64_t)v267 >= v15)
              v269 = v245;
            else
              v269 = 0;
            v246 = &v268[v269];
            v27 = &v267[2 * v269];
            v10 += v1063;
            v17 += 2 * v241;
            --v247;
          }
          while (v247);
          if (v30)
          {
            v270 = &v1061[2 * v23];
            if ((unint64_t)v270 >= v30)
              v271 = v244;
            else
              v271 = 0;
            v14 += 2 * v24 + 2 * v271;
            if ((unint64_t)v270 >= v30)
              v272 = v243;
            else
              v272 = 0;
            v27 = &v270[2 * v272];
            v15 += 2 * v272 + 2 * v23;
            v246 = (__int16 *)v14;
            v1061 = v27;
          }
          else
          {
            v27 += 2 * v23;
            v246 += v24;
          }
          v19 += v35;
          v17 += 2 * v36;
          v10 += v1060;
          --v12;
        }
        while (v12);
      }
      else
      {
        v923 = -(uint64_t)v25;
        v924 = v26;
        v925 = -(v23 * v26);
        v926 = -(uint64_t)(v24 * v924);
        v927 = (__int16 *)v14;
        do
        {
          v928 = v13;
          do
          {
            v929 = *v19;
            if (*v19)
            {
              if (v929 == 255)
              {
                _H2 = *(_WORD *)v17;
                _H3 = *v927;
                __asm
                {
                  FCVT            S3, H3
                  FCVT            S2, H2
                }
                _S2 = _S2 * _S3;
              }
              else
              {
                _H3 = *(_WORD *)v17;
                __asm { FCVT            S3, H3 }
                _H4 = *v927;
                __asm { FCVT            S4, H4 }
                _S2 = (float)((float)(1.0 - (float)((float)v929 * 0.0039216)) * _S3)
                    + (float)(_S3 * (float)((float)((float)v929 * 0.0039216) * _S4));
              }
              __asm { FCVT            H2, S2 }
              *(_WORD *)v17 = _H2;
            }
            v19 += v241;
            v940 = &v27[2 * v241];
            v941 = &v927[v1062];
            if ((unint64_t)v940 >= v15)
              v942 = v923;
            else
              v942 = 0;
            v927 = &v941[v942];
            v27 = &v940[2 * v942];
            v17 += 2 * v241;
            --v928;
          }
          while (v928);
          if (v30)
          {
            v943 = &v1061[2 * v23];
            if ((unint64_t)v943 >= v30)
              v944 = v926;
            else
              v944 = 0;
            v14 += 2 * v24 + 2 * v944;
            if ((unint64_t)v943 >= v30)
              v945 = v925;
            else
              v945 = 0;
            v27 = &v943[2 * v945];
            v15 += 2 * v945 + 2 * v23;
            v927 = (__int16 *)v14;
            v1061 = v27;
          }
          else
          {
            v27 += 2 * v23;
            v927 += v24;
          }
          v19 += v35;
          v17 += 2 * v36;
          --v12;
        }
        while (v12);
      }
      return;
    case 8:
      v273 = v29;
      if (v1063)
      {
        v274 = -(uint64_t)v25;
        v275 = v26;
        v276 = -(v23 * v26);
        v277 = -(uint64_t)(v24 * v275);
        v278 = (__int16 *)v14;
        do
        {
          v279 = v13;
          do
          {
            v280 = *v19;
            if (*v19)
            {
              _H2 = *(_WORD *)v17;
              if (v280 == 255)
              {
                __asm { FCVT            S2, H2 }
                _H3 = *v278;
                __asm { FCVT            S3, H3 }
                _S2 = (float)(1.0 - _S3) * _S2;
                __asm { FCVT            H2, S2 }
                *(_WORD *)v17 = LOWORD(_S2);
                LOWORD(_S2) = *v278;
                __asm { FCVT            S2, H2 }
              }
              else
              {
                __asm { FCVT            S2, H2 }
                _H3 = *v278;
                __asm { FCVT            S3, H3 }
                v290 = (float)v280 * 0.0039216;
                _S2 = (float)(1.0 - (float)(v290 * _S3)) * _S2;
                __asm { FCVT            H2, S2 }
                *(_WORD *)v17 = LOWORD(_S2);
                LOWORD(_S2) = *v278;
                __asm { FCVT            S2, H2 }
                _S2 = v290 * _S2;
              }
              _H3 = *v10;
              __asm { FCVT            S3, H3 }
              _S2 = (float)(1.0 - _S2) * _S3;
              __asm { FCVT            H2, S2 }
              *v10 = LOWORD(_S2);
            }
            v19 += v273;
            v296 = &v27[2 * v273];
            v297 = &v278[v1062];
            if ((unint64_t)v296 >= v15)
              v298 = v274;
            else
              v298 = 0;
            v278 = &v297[v298];
            v27 = &v296[2 * v298];
            v10 += v1063;
            v17 += 2 * v273;
            --v279;
          }
          while (v279);
          if (v30)
          {
            v299 = &v1061[2 * v23];
            if ((unint64_t)v299 >= v30)
              v300 = v277;
            else
              v300 = 0;
            v14 += 2 * v24 + 2 * v300;
            if ((unint64_t)v299 >= v30)
              v301 = v276;
            else
              v301 = 0;
            v27 = &v299[2 * v301];
            v15 += 2 * v301 + 2 * v23;
            v278 = (__int16 *)v14;
            v1061 = v27;
          }
          else
          {
            v27 += 2 * v23;
            v278 += v24;
          }
          v19 += v35;
          v17 += 2 * v36;
          v10 += v1060;
          --v12;
        }
        while (v12);
      }
      else
      {
        v946 = -(uint64_t)v25;
        v947 = v26;
        v948 = -(v23 * v26);
        v949 = -(uint64_t)(v24 * v947);
        v950 = (__int16 *)v14;
        do
        {
          v951 = v13;
          do
          {
            v952 = *v19;
            if (*v19)
            {
              _H2 = *v950;
              if (v952 == 255)
              {
                __asm { FCVT            S2, H2 }
              }
              else
              {
                __asm { FCVT            S2, H2 }
                _S2 = (float)((float)v952 * 0.0039216) * _S2;
              }
              _H3 = *(_WORD *)v17;
              __asm { FCVT            S3, H3 }
              _S2 = (float)(1.0 - _S2) * _S3;
              __asm { FCVT            H2, S2 }
              *(_WORD *)v17 = LOWORD(_S2);
            }
            v19 += v273;
            v959 = &v27[2 * v273];
            v960 = &v950[v1062];
            if ((unint64_t)v959 >= v15)
              v961 = v946;
            else
              v961 = 0;
            v950 = &v960[v961];
            v27 = &v959[2 * v961];
            v17 += 2 * v273;
            --v951;
          }
          while (v951);
          if (v30)
          {
            v962 = &v1061[2 * v23];
            if ((unint64_t)v962 >= v30)
              v963 = v949;
            else
              v963 = 0;
            v14 += 2 * v24 + 2 * v963;
            if ((unint64_t)v962 >= v30)
              v964 = v948;
            else
              v964 = 0;
            v27 = &v962[2 * v964];
            v15 += 2 * v964 + 2 * v23;
            v950 = (__int16 *)v14;
            v1061 = v27;
          }
          else
          {
            v27 += 2 * v23;
            v950 += v24;
          }
          v19 += v35;
          v17 += 2 * v36;
          --v12;
        }
        while (v12);
      }
      return;
    case 9:
      v302 = v29;
      v303 = v26;
      v304 = -(v23 * v26);
      v305 = -(uint64_t)(v24 * v303);
      v306 = 2 * v29;
      v307 = -(uint64_t)v25;
      v308 = (__int16 *)v14;
      do
      {
        v309 = v13;
        do
        {
          if (*v19)
          {
            _H2 = *v10;
            __asm { FCVT            S2, H2 }
            v312 = (float)*v19 * 0.0039216;
            _H4 = *(_WORD *)v27;
            __asm { FCVT            S4, H4 }
            _S4 = v312 * _S4;
            __asm { FCVT            H4, S4 }
            _H5 = *v308;
            __asm { FCVT            S5, H5 }
            _S5 = v312 * _S5;
            __asm
            {
              FCVT            H5, S5
              FCVT            S5, H5
              FCVT            S4, H4
            }
            _H7 = *(_WORD *)v17;
            __asm { FCVT            S7, H7 }
            v323 = (float)(1.0 - v312) + _S5;
            _S4 = (float)(v323 * _S7) + (float)(_S4 * (float)(1.0 - _S2));
            __asm { FCVT            H4, S4 }
            *(_WORD *)v17 = LOWORD(_S4);
            _S2 = (float)(v323 * _S2) + (float)(_S5 * (float)(1.0 - _S2));
            __asm { FCVT            H2, S2 }
            *v10 = LOWORD(_S2);
          }
          v19 += v302;
          v326 = &v27[2 * v302];
          v327 = &v308[v1062];
          if ((unint64_t)v326 >= v15)
            v328 = v307;
          else
            v328 = 0;
          v308 = &v327[v328];
          v27 = &v326[2 * v328];
          v10 += v1063;
          v17 += v306;
          --v309;
        }
        while (v309);
        if (v30)
        {
          v329 = &v1061[2 * v23];
          if ((unint64_t)v329 >= v30)
            v330 = v305;
          else
            v330 = 0;
          v14 += 2 * v24 + 2 * v330;
          if ((unint64_t)v329 >= v30)
            v331 = v304;
          else
            v331 = 0;
          v27 = &v329[2 * v331];
          v15 += 2 * v331 + 2 * v23;
          v308 = (__int16 *)v14;
          v1061 = v27;
        }
        else
        {
          v27 += 2 * v23;
          v308 += v24;
        }
        v19 += v35;
        v17 += 2 * v36;
        v10 += v1060;
        --v12;
      }
      while (v12);
      return;
    case 10:
      v332 = v29;
      v333 = v26;
      v334 = -(v23 * v26);
      v335 = -(uint64_t)(v24 * v333);
      v336 = 2 * v29;
      v337 = -(uint64_t)v25;
      v338 = (__int16 *)v14;
      do
      {
        v339 = v13;
        do
        {
          if (*v19)
          {
            _H2 = *v10;
            __asm { FCVT            S2, H2 }
            _H3 = *(_WORD *)v27;
            __asm { FCVT            S3, H3 }
            v344 = (float)*v19 * 0.0039216;
            _S3 = v344 * _S3;
            __asm { FCVT            H3, S3 }
            _H5 = *v338;
            __asm { FCVT            S5, H5 }
            _S4 = v344 * _S5;
            __asm
            {
              FCVT            H4, S4
              FCVT            S4, H4
              FCVT            S3, H3
            }
            _H6 = *(_WORD *)v17;
            __asm { FCVT            S6, H6 }
            _S3 = (float)((float)(1.0 - _S4) * _S6) + (float)(_S3 * (float)(1.0 - _S2));
            __asm { FCVT            H3, S3 }
            *(_WORD *)v17 = LOWORD(_S3);
            _S2 = (float)((float)(1.0 - _S4) * _S2) + (float)(_S4 * (float)(1.0 - _S2));
            __asm { FCVT            H2, S2 }
            *v10 = LOWORD(_S2);
          }
          v19 += v332;
          v355 = &v27[2 * v332];
          v356 = &v338[v1062];
          if ((unint64_t)v355 >= v15)
            v357 = v337;
          else
            v357 = 0;
          v338 = &v356[v357];
          v27 = &v355[2 * v357];
          v10 += v1063;
          v17 += v336;
          --v339;
        }
        while (v339);
        if (v30)
        {
          v358 = &v1061[2 * v23];
          if ((unint64_t)v358 >= v30)
            v359 = v335;
          else
            v359 = 0;
          v14 += 2 * v24 + 2 * v359;
          if ((unint64_t)v358 >= v30)
            v360 = v334;
          else
            v360 = 0;
          v27 = &v358[2 * v360];
          v15 += 2 * v360 + 2 * v23;
          v338 = (__int16 *)v14;
          v1061 = v27;
        }
        else
        {
          v27 += 2 * v23;
          v338 += v24;
        }
        v19 += v35;
        v17 += 2 * v36;
        v10 += v1060;
        --v12;
      }
      while (v12);
      return;
    case 11:
      v361 = v29;
      if (v1063)
      {
        v362 = v26;
        v363 = -(v23 * v26);
        v364 = -(uint64_t)(v24 * v362);
        v365 = -(uint64_t)v25;
        v366 = (__int16 *)v14;
        do
        {
          v367 = v13;
          do
          {
            if (*v19)
            {
              if (v1062)
              {
                _H2 = *v366;
                __asm { FCVT            S2, H2 }
              }
              else
              {
                _S2 = 1.0;
              }
              _H3 = *(_WORD *)v27;
              __asm { FCVT            S3, H3 }
              _S4 = (float)*v19 * 0.0039216;
              _S3 = _S4 * _S3;
              __asm { FCVT            H3, S3 }
              _S2 = _S4 * _S2;
              __asm { FCVT            H2, S2 }
              LOWORD(_S4) = *v10;
              __asm
              {
                FCVT            S4, H4
                FCVT            S2, H2
              }
              v377 = _S4 + _S2;
              _H6 = *(_WORD *)v17;
              __asm
              {
                FCVT            S6, H6
                FCVT            S3, H3
              }
              v381 = (float)(_S4 - _S6) + (float)(_S2 - _S3);
              if (v377 <= 1.0)
                _S3 = v377;
              else
                _S3 = 1.0;
              __asm { FCVT            H4, S3 }
              *v10 = _H4;
              _S2 = _S3 - v381;
              __asm { FCVT            H2, S2 }
              *(_WORD *)v17 = LOWORD(_S2);
            }
            v19 += v361;
            v385 = &v27[2 * v361];
            v386 = &v366[v1062];
            if ((unint64_t)v385 >= v15)
              v387 = v365;
            else
              v387 = 0;
            v366 = &v386[v387];
            v27 = &v385[2 * v387];
            v10 += v1063;
            v17 += 2 * v361;
            --v367;
          }
          while (v367);
          if (v30)
          {
            v388 = &v1061[2 * v23];
            if ((unint64_t)v388 >= v30)
              v389 = v364;
            else
              v389 = 0;
            v14 += 2 * v24 + 2 * v389;
            if ((unint64_t)v388 >= v30)
              v390 = v363;
            else
              v390 = 0;
            v27 = &v388[2 * v390];
            v15 += 2 * v390 + 2 * v23;
            v366 = (__int16 *)v14;
            v1061 = v27;
          }
          else
          {
            v27 += 2 * v23;
            v366 += v24;
          }
          v19 += v35;
          v17 += 2 * v36;
          v10 += v1060;
          --v12;
        }
        while (v12);
      }
      else
      {
        v965 = -(uint64_t)v25;
        v966 = v26;
        v967 = -(v23 * v26);
        v968 = -(uint64_t)(v24 * v966);
        v969 = (__int16 *)v14;
        do
        {
          v970 = v13;
          do
          {
            if (*v19)
            {
              if (v1062)
              {
                _H2 = *v969;
                __asm { FCVT            S2, H2 }
              }
              else
              {
                _S2 = 1.0;
              }
              _H3 = *(_WORD *)v27;
              __asm { FCVT            S3, H3 }
              _S4 = (float)*v19 * 0.0039216;
              _S3 = _S4 * _S3;
              __asm { FCVT            H3, S3 }
              _S2 = _S4 * _S2;
              __asm { FCVT            H2, S2 }
              LOWORD(_S4) = *(_WORD *)v17;
              __asm
              {
                FCVT            S4, H4
                FCVT            S2, H2
                FCVT            S3, H3
              }
              _S2 = 1.0 - (float)((float)(1.0 - _S4) + (float)(_S2 - _S3));
              __asm { FCVT            H2, S2 }
              *(_WORD *)v17 = LOWORD(_S2);
            }
            v19 += v361;
            v982 = &v27[2 * v361];
            v983 = &v969[v1062];
            if ((unint64_t)v982 >= v15)
              v984 = v965;
            else
              v984 = 0;
            v969 = &v983[v984];
            v27 = &v982[2 * v984];
            v17 += 2 * v361;
            --v970;
          }
          while (v970);
          if (v30)
          {
            v985 = &v1061[2 * v23];
            if ((unint64_t)v985 >= v30)
              v986 = v968;
            else
              v986 = 0;
            v14 += 2 * v24 + 2 * v986;
            if ((unint64_t)v985 >= v30)
              v987 = v967;
            else
              v987 = 0;
            v27 = &v985[2 * v987];
            v15 += 2 * v987 + 2 * v23;
            v969 = (__int16 *)v14;
            v1061 = v27;
          }
          else
          {
            v27 += 2 * v23;
            v969 += v24;
          }
          v19 += v35;
          v17 += 2 * v36;
          --v12;
        }
        while (v12);
      }
      return;
    case 12:
      v391 = v29;
      if (v1063)
      {
        v392 = v26;
        v393 = -(v23 * v26);
        v394 = -(uint64_t)(v24 * v392);
        v395 = -(uint64_t)v25;
        v396 = (__int16 *)v14;
        do
        {
          v397 = v13;
          do
          {
            if (*v19)
            {
              if (v1062)
              {
                _H2 = *v396;
                __asm { FCVT            S2, H2 }
              }
              else
              {
                _S2 = 1.0;
              }
              _H3 = *(_WORD *)v27;
              __asm { FCVT            S3, H3 }
              _S4 = (float)*v19 * 0.0039216;
              _S3 = _S4 * _S3;
              __asm { FCVT            H3, S3 }
              _S2 = _S4 * _S2;
              __asm { FCVT            H2, S2 }
              LOWORD(_S4) = *v10;
              __asm
              {
                FCVT            S4, H4
                FCVT            S2, H2
              }
              _S2 = _S4 + _S2;
              _H4 = *(_WORD *)v17;
              if (_S2 > 1.0)
                _S2 = 1.0;
              __asm
              {
                FCVT            S3, H3
                FCVT            S4, H4
              }
              _S3 = _S4 + _S3;
              __asm { FCVT            H3, S3 }
              *(_WORD *)v17 = LOWORD(_S3);
              __asm { FCVT            H2, S2 }
              *v10 = _H2;
            }
            v19 += v391;
            v414 = &v27[2 * v391];
            v415 = &v396[v1062];
            if ((unint64_t)v414 >= v15)
              v416 = v395;
            else
              v416 = 0;
            v396 = &v415[v416];
            v27 = &v414[2 * v416];
            v10 += v1063;
            v17 += 2 * v391;
            --v397;
          }
          while (v397);
          if (v30)
          {
            v417 = &v1061[2 * v23];
            if ((unint64_t)v417 >= v30)
              v418 = v394;
            else
              v418 = 0;
            v14 += 2 * v24 + 2 * v418;
            if ((unint64_t)v417 >= v30)
              v419 = v393;
            else
              v419 = 0;
            v27 = &v417[2 * v419];
            v15 += 2 * v419 + 2 * v23;
            v396 = (__int16 *)v14;
            v1061 = v27;
          }
          else
          {
            v27 += 2 * v23;
            v396 += v24;
          }
          v19 += v35;
          v17 += 2 * v36;
          v10 += v1060;
          --v12;
        }
        while (v12);
      }
      else
      {
        v988 = -(uint64_t)v25;
        v989 = -(v23 * v26);
        do
        {
          v990 = v13;
          do
          {
            if (*v19)
            {
              _H1 = *(_WORD *)v27;
              __asm { FCVT            S1, H1 }
              _S1 = (float)((float)*v19 * 0.0039216) * _S1;
              __asm { FCVT            H1, S1 }
              _H2 = *(_WORD *)v17;
              __asm
              {
                FCVT            S1, H1
                FCVT            S2, H2
              }
              _S1 = _S2 + _S1;
              __asm { FCVT            H1, S1 }
              *(_WORD *)v17 = LOWORD(_S1);
            }
            v19 += v391;
            v998 = &v27[2 * v391];
            if ((unint64_t)v998 >= v15)
              v999 = v988;
            else
              v999 = 0;
            v27 = &v998[2 * v999];
            v17 += 2 * v391;
            --v990;
          }
          while (v990);
          v19 += v35;
          v17 += 2 * v36;
          v1000 = v1061;
          v1001 = &v1061[2 * v23];
          if ((unint64_t)v1001 >= v30)
            v1002 = v989;
          else
            v1002 = 0;
          v1003 = &v1001[2 * v1002];
          v1004 = v15 + 2 * v1002 + 2 * v23;
          if (v30)
          {
            v15 = v1004;
            v1000 = v1003;
          }
          v1061 = v1000;
          if (v30)
            v27 = v1003;
          else
            v27 += 2 * v23;
          --v12;
        }
        while (v12);
      }
      return;
    case 13:
      v420 = v29;
      v421 = v26;
      v422 = -(v23 * v26);
      v423 = -(uint64_t)(v24 * v421);
      v424 = 2 * v29;
      v425 = -(uint64_t)v25;
      v426 = (__int16 *)v14;
      while (1)
      {
        v427 = v13;
        do
        {
          if (*v19)
          {
            if (v1062)
            {
              _H2 = *v426;
              __asm { FCVT            S2, H2 }
            }
            else
            {
              _S2 = 1.0;
            }
            v430 = (float)*v19 * 0.0039216;
            _S2 = v430 * _S2;
            __asm
            {
              FCVT            H4, S2
              FCVT            S2, H4
            }
            if (_S2 > 0.0)
            {
              _H5 = *(_WORD *)v27;
              __asm { FCVT            S5, H5 }
              _S3 = v430 * _S5;
              __asm { FCVT            H3, S3 }
              if (v1063)
              {
                _H5 = *v10;
                __asm { FCVT            S5, H5 }
                if (_S5 <= 0.0)
                  goto LABEL_341;
              }
              else
              {
                _S5 = 1.0;
              }
              _H4 = *(_WORD *)v17;
              __asm
              {
                FCVT            S4, H4
                FCVT            S3, H3
              }
              v443 = _S3 * _S4;
              v444 = (float)(_S3 * _S4) + (float)(_S4 * (float)(1.0 - _S2));
              if (_S2 == 1.0)
                v444 = v443;
              _S3 = v444 + (float)(_S3 * (float)(1.0 - _S5));
              if (_S5 == 1.0)
                _S3 = v444;
              __asm { FCVT            H3, S3 }
              if (v1063)
              {
                _S2 = (float)(_S5 + _S2) - (float)(_S5 * _S2);
                __asm { FCVT            H4, S2 }
LABEL_341:
                *(_WORD *)v17 = _H3;
                *v10 = _H4;
                goto LABEL_343;
              }
              *(_WORD *)v17 = _H3;
            }
          }
LABEL_343:
          v19 += v420;
          v447 = &v27[2 * v420];
          v448 = &v426[v1062];
          if ((unint64_t)v447 >= v15)
            v449 = v425;
          else
            v449 = 0;
          v426 = &v448[v449];
          v27 = &v447[2 * v449];
          v10 += v1063;
          v17 += v424;
          --v427;
        }
        while (v427);
        if (v30)
        {
          v450 = &v1061[2 * v23];
          if ((unint64_t)v450 >= v30)
            v451 = v423;
          else
            v451 = 0;
          v14 += 2 * v24 + 2 * v451;
          if ((unint64_t)v450 >= v30)
            v452 = v422;
          else
            v452 = 0;
          v27 = &v450[2 * v452];
          v15 += 2 * v452 + 2 * v23;
          v426 = (__int16 *)v14;
          v1061 = v27;
        }
        else
        {
          v27 += 2 * v23;
          v426 += v24;
        }
        v19 += v35;
        v17 += 2 * v36;
        v10 += v1060;
        if (!--v12)
          return;
      }
    case 14:
      v453 = v29;
      v454 = v26;
      v455 = -(v23 * v26);
      v456 = -(uint64_t)(v24 * v454);
      v457 = 2 * v29;
      v458 = -(uint64_t)v25;
      v459 = (__int16 *)v14;
      while (1)
      {
        v460 = v13;
        do
        {
          if (*v19)
          {
            if (v1062)
            {
              _H2 = *v459;
              __asm { FCVT            S3, H2 }
            }
            else
            {
              _S3 = 1.0;
            }
            v463 = (float)*v19 * 0.0039216;
            _S3 = v463 * _S3;
            __asm
            {
              FCVT            H4, S3
              FCVT            S3, H4
            }
            if (_S3 > 0.0)
            {
              _H5 = *(_WORD *)v27;
              __asm { FCVT            S5, H5 }
              _S2 = v463 * _S5;
              __asm { FCVT            H2, S2 }
              if (v1063)
              {
                _H5 = *v10;
                __asm { FCVT            S5, H5 }
                if (_S5 <= 0.0)
                  goto LABEL_371;
              }
              else
              {
                _S5 = 1.0;
              }
              _H4 = *(_WORD *)v17;
              __asm
              {
                FCVT            S4, H4
                FCVT            S2, H2
              }
              _S2 = _S4 + (float)(_S2 * (float)(1.0 - _S4));
              __asm { FCVT            H2, S2 }
              if (v1063)
              {
                _S3 = (float)(_S5 + _S3) - (float)(_S5 * _S3);
                __asm { FCVT            H4, S3 }
LABEL_371:
                *(_WORD *)v17 = _H2;
                *v10 = _H4;
                goto LABEL_373;
              }
              *(_WORD *)v17 = _H2;
            }
          }
LABEL_373:
          v19 += v453;
          v478 = &v27[2 * v453];
          v479 = &v459[v1062];
          if ((unint64_t)v478 >= v15)
            v480 = v458;
          else
            v480 = 0;
          v459 = &v479[v480];
          v27 = &v478[2 * v480];
          v10 += v1063;
          v17 += v457;
          --v460;
        }
        while (v460);
        if (v30)
        {
          v481 = &v1061[2 * v23];
          if ((unint64_t)v481 >= v30)
            v482 = v456;
          else
            v482 = 0;
          v14 += 2 * v24 + 2 * v482;
          if ((unint64_t)v481 >= v30)
            v483 = v455;
          else
            v483 = 0;
          v27 = &v481[2 * v483];
          v15 += 2 * v483 + 2 * v23;
          v459 = (__int16 *)v14;
          v1061 = v27;
        }
        else
        {
          v27 += 2 * v23;
          v459 += v24;
        }
        v19 += v35;
        v17 += 2 * v36;
        v10 += v1060;
        if (!--v12)
          return;
      }
    case 15:
      v484 = v29;
      v1025 = -(uint64_t)(v24 * v26);
      v1030 = -(v23 * v26);
      v485 = 2 * v29;
      v486 = -(uint64_t)v25;
      v487 = (__int16 *)v14;
      v1040 = v486;
      v1045 = v29;
      while (1)
      {
        v1050 = v14;
        v1055 = v12;
        v488 = v13;
        v489 = v1062;
        do
        {
          if (*v19)
          {
            if (v489)
            {
              _H0 = *v487;
              __asm { FCVT            S1, H0 }
            }
            else
            {
              _S1 = 1.0;
            }
            v492 = (float)*v19 * 0.0039216;
            _S1 = v492 * _S1;
            __asm
            {
              FCVT            H1, S1
              FCVT            S3, H1
            }
            if (_S3 > 0.0)
            {
              _H2 = *(_WORD *)v27;
              __asm { FCVT            S2, H2 }
              _Q0.n128_f32[0] = v492 * _Q2.n128_f32[0];
              __asm { FCVT            H2, S0 }
              if (v1063)
              {
                _H0 = *v10;
                __asm { FCVT            S4, H0 }
                if (_S4 <= 0.0)
                  goto LABEL_401;
              }
              else
              {
                _S4 = 1.0;
              }
              _Q0.n128_u16[0] = *(_WORD *)v17;
              _Q0.n128_u16[0] = PDAoverlayPDA(_Q0, _S4, _Q2, _S3);
              _Q2.n128_u16[0] = _Q0.n128_u16[0];
              if (v1063)
              {
                v489 = v1062;
                v486 = v1040;
                v484 = v1045;
LABEL_401:
                *(_WORD *)v17 = _Q2.n128_u16[0];
                *v10 = _H1;
                goto LABEL_403;
              }
              *(_WORD *)v17 = _Q0.n128_u16[0];
              v489 = v1062;
              v486 = v1040;
              v484 = v1045;
            }
          }
LABEL_403:
          v19 += v484;
          v499 = &v27[2 * v484];
          if ((unint64_t)v499 >= v15)
            v500 = v486;
          else
            v500 = 0;
          v487 += v1062 + v500;
          v27 = &v499[2 * v500];
          v10 += v1063;
          v17 += v485;
          --v488;
        }
        while (v488);
        if (v1039)
        {
          v13 = v1038;
          v501 = &v1061[2 * v1037];
          v502 = v1055;
          v503 = v1025;
          if ((unint64_t)v501 < v1039)
            v503 = 0;
          v14 = v1050 + 2 * v24 + 2 * v503;
          v504 = v1030;
          if ((unint64_t)v501 < v1039)
            v504 = 0;
          v27 = &v501[2 * v504];
          v15 += 2 * v504 + 2 * v1037;
          v487 = (__int16 *)(v1050 + 2 * v24 + 2 * v503);
          v1061 = v27;
          v506 = v1035;
          v505 = v1036;
        }
        else
        {
          v13 = v1038;
          v27 += 2 * v1037;
          v506 = v1035;
          v487 += v24;
          v14 = v1050;
          v502 = v1055;
          v505 = v1036;
        }
        v19 += v505;
        v17 += 2 * v506;
        v10 += v1060;
        v12 = v502 - 1;
        if (!v12)
          return;
      }
    case 16:
      v507 = v29;
      v508 = v26;
      v509 = -(v23 * v26);
      v510 = -(uint64_t)(v24 * v508);
      v511 = 2 * v29;
      v512 = -(uint64_t)v25;
      v513 = (__int16 *)v14;
      while (1)
      {
        v514 = v13;
        do
        {
          if (*v19)
          {
            if (v1062)
            {
              _H2 = *v513;
              __asm { FCVT            S2, H2 }
            }
            else
            {
              _S2 = 1.0;
            }
            v517 = (float)*v19 * 0.0039216;
            _S2 = v517 * _S2;
            __asm
            {
              FCVT            H5, S2
              FCVT            S2, H5
            }
            if (_S2 > 0.0)
            {
              _H4 = *(_WORD *)v27;
              __asm { FCVT            S4, H4 }
              _S3 = v517 * _S4;
              __asm { FCVT            H3, S3 }
              if (v1063)
              {
                _H4 = *v10;
                __asm { FCVT            S4, H4 }
                if (_S4 <= 0.0)
                  goto LABEL_435;
              }
              else
              {
                _S4 = 1.0;
              }
              _H5 = *(_WORD *)v17;
              __asm
              {
                FCVT            S5, H5
                FCVT            S3, H3
              }
              v530 = _S2 * _S5;
              if ((float)(_S4 * _S3) < (float)(_S2 * _S5))
                v530 = _S4 * _S3;
              v531 = v530 + (float)(_S5 * (float)(1.0 - _S2));
              if (_S2 == 1.0)
                v531 = v530;
              _S3 = v531 + (float)(_S3 * (float)(1.0 - _S4));
              if (_S4 == 1.0)
                _S3 = v531;
              __asm { FCVT            H3, S3 }
              if (v1063)
              {
                _S2 = (float)(_S4 + _S2) - (float)(_S4 * _S2);
                __asm { FCVT            H5, S2 }
LABEL_435:
                *(_WORD *)v17 = _H3;
                *v10 = _H5;
                goto LABEL_437;
              }
              *(_WORD *)v17 = _H3;
            }
          }
LABEL_437:
          v19 += v507;
          v534 = &v27[2 * v507];
          v535 = &v513[v1062];
          if ((unint64_t)v534 >= v15)
            v536 = v512;
          else
            v536 = 0;
          v513 = &v535[v536];
          v27 = &v534[2 * v536];
          v10 += v1063;
          v17 += v511;
          --v514;
        }
        while (v514);
        if (v30)
        {
          v537 = &v1061[2 * v23];
          if ((unint64_t)v537 >= v30)
            v538 = v510;
          else
            v538 = 0;
          v14 += 2 * v24 + 2 * v538;
          if ((unint64_t)v537 >= v30)
            v539 = v509;
          else
            v539 = 0;
          v27 = &v537[2 * v539];
          v15 += 2 * v539 + 2 * v23;
          v513 = (__int16 *)v14;
          v1061 = v27;
        }
        else
        {
          v27 += 2 * v23;
          v513 += v24;
        }
        v19 += v35;
        v17 += 2 * v36;
        v10 += v1060;
        if (!--v12)
          return;
      }
    case 17:
      v540 = v29;
      v541 = v26;
      v542 = -(v23 * v26);
      v543 = -(uint64_t)(v24 * v541);
      v544 = 2 * v29;
      v545 = -(uint64_t)v25;
      v546 = (__int16 *)v14;
      while (1)
      {
        v547 = v13;
        do
        {
          if (*v19)
          {
            if (v1062)
            {
              _H2 = *v546;
              __asm { FCVT            S2, H2 }
            }
            else
            {
              _S2 = 1.0;
            }
            v550 = (float)*v19 * 0.0039216;
            _S2 = v550 * _S2;
            __asm
            {
              FCVT            H5, S2
              FCVT            S2, H5
            }
            if (_S2 > 0.0)
            {
              _H4 = *(_WORD *)v27;
              __asm { FCVT            S4, H4 }
              _S3 = v550 * _S4;
              __asm { FCVT            H3, S3 }
              if (v1063)
              {
                _H4 = *v10;
                __asm { FCVT            S4, H4 }
                if (_S4 <= 0.0)
                  goto LABEL_471;
              }
              else
              {
                _S4 = 1.0;
              }
              _H5 = *(_WORD *)v17;
              __asm
              {
                FCVT            S5, H5
                FCVT            S3, H3
              }
              v563 = _S2 * _S5;
              if ((float)(_S4 * _S3) > (float)(_S2 * _S5))
                v563 = _S4 * _S3;
              v564 = v563 + (float)(_S5 * (float)(1.0 - _S2));
              if (_S2 == 1.0)
                v564 = v563;
              _S3 = v564 + (float)(_S3 * (float)(1.0 - _S4));
              if (_S4 == 1.0)
                _S3 = v564;
              __asm { FCVT            H3, S3 }
              if (v1063)
              {
                _S2 = (float)(_S4 + _S2) - (float)(_S4 * _S2);
                __asm { FCVT            H5, S2 }
LABEL_471:
                *(_WORD *)v17 = _H3;
                *v10 = _H5;
                goto LABEL_473;
              }
              *(_WORD *)v17 = _H3;
            }
          }
LABEL_473:
          v19 += v540;
          v567 = &v27[2 * v540];
          v568 = &v546[v1062];
          if ((unint64_t)v567 >= v15)
            v569 = v545;
          else
            v569 = 0;
          v546 = &v568[v569];
          v27 = &v567[2 * v569];
          v10 += v1063;
          v17 += v544;
          --v547;
        }
        while (v547);
        if (v30)
        {
          v570 = &v1061[2 * v23];
          if ((unint64_t)v570 >= v30)
            v571 = v543;
          else
            v571 = 0;
          v14 += 2 * v24 + 2 * v571;
          if ((unint64_t)v570 >= v30)
            v572 = v542;
          else
            v572 = 0;
          v27 = &v570[2 * v572];
          v15 += 2 * v572 + 2 * v23;
          v546 = (__int16 *)v14;
          v1061 = v27;
        }
        else
        {
          v27 += 2 * v23;
          v546 += v24;
        }
        v19 += v35;
        v17 += 2 * v36;
        v10 += v1060;
        if (!--v12)
          return;
      }
    case 18:
      v573 = v29;
      v1026 = -(uint64_t)(v24 * v26);
      v1031 = -(v23 * v26);
      v574 = 2 * v29;
      v575 = -(uint64_t)v25;
      v576 = (__int16 *)v14;
      v1041 = v575;
      v1046 = v29;
      while (1)
      {
        v1051 = v14;
        v1056 = v12;
        v577 = v13;
        v578 = v1062;
        do
        {
          if (*v19)
          {
            if (v578)
            {
              _H0 = *v576;
              __asm { FCVT            S1, H0 }
            }
            else
            {
              _S1 = 1.0;
            }
            v581 = (float)*v19 * 0.0039216;
            _S1 = v581 * _S1;
            __asm
            {
              FCVT            H1, S1
              FCVT            S3, H1
            }
            if (_S3 > 0.0)
            {
              _H2 = *(_WORD *)v27;
              __asm { FCVT            S2, H2 }
              _Q0.n128_f32[0] = v581 * _Q2.n128_f32[0];
              __asm { FCVT            H2, S0 }
              if (v1063)
              {
                _H0 = *v10;
                __asm { FCVT            S4, H0 }
                if (_S4 <= 0.0)
                  goto LABEL_501;
              }
              else
              {
                _S4 = 1.0;
              }
              _Q0.n128_u16[0] = *(_WORD *)v17;
              _Q0.n128_u16[0] = PDAcolordodgePDA(_Q0, _S4, _Q2, _S3);
              _Q2.n128_u16[0] = _Q0.n128_u16[0];
              if (v1063)
              {
                v578 = v1062;
                v575 = v1041;
                v573 = v1046;
LABEL_501:
                *(_WORD *)v17 = _Q2.n128_u16[0];
                *v10 = _H1;
                goto LABEL_503;
              }
              *(_WORD *)v17 = _Q0.n128_u16[0];
              v578 = v1062;
              v575 = v1041;
              v573 = v1046;
            }
          }
LABEL_503:
          v19 += v573;
          v588 = &v27[2 * v573];
          if ((unint64_t)v588 >= v15)
            v589 = v575;
          else
            v589 = 0;
          v576 += v1062 + v589;
          v27 = &v588[2 * v589];
          v10 += v1063;
          v17 += v574;
          --v577;
        }
        while (v577);
        if (v1039)
        {
          v13 = v1038;
          v590 = &v1061[2 * v1037];
          v591 = v1056;
          v592 = v1026;
          if ((unint64_t)v590 < v1039)
            v592 = 0;
          v14 = v1051 + 2 * v24 + 2 * v592;
          v593 = v1031;
          if ((unint64_t)v590 < v1039)
            v593 = 0;
          v27 = &v590[2 * v593];
          v15 += 2 * v593 + 2 * v1037;
          v576 = (__int16 *)(v1051 + 2 * v24 + 2 * v592);
          v1061 = v27;
          v595 = v1035;
          v594 = v1036;
        }
        else
        {
          v13 = v1038;
          v27 += 2 * v1037;
          v595 = v1035;
          v576 += v24;
          v14 = v1051;
          v591 = v1056;
          v594 = v1036;
        }
        v19 += v594;
        v17 += 2 * v595;
        v10 += v1060;
        v12 = v591 - 1;
        if (!v12)
          return;
      }
    case 19:
      v596 = v29;
      v1027 = -(uint64_t)(v24 * v26);
      v1032 = -(v23 * v26);
      v597 = 2 * v29;
      v598 = -(uint64_t)v25;
      v599 = (__int16 *)v14;
      v1042 = v598;
      v1047 = v29;
      while (1)
      {
        v1052 = v14;
        v1057 = v12;
        v600 = v13;
        v601 = v1062;
        do
        {
          if (*v19)
          {
            if (v601)
            {
              _H0 = *v599;
              __asm { FCVT            S1, H0 }
            }
            else
            {
              _S1 = 1.0;
            }
            v604 = (float)*v19 * 0.0039216;
            _S1 = v604 * _S1;
            __asm
            {
              FCVT            H1, S1
              FCVT            S3, H1
            }
            if (_S3 > 0.0)
            {
              _H2 = *(_WORD *)v27;
              __asm { FCVT            S2, H2 }
              _Q0.n128_f32[0] = v604 * _Q2.n128_f32[0];
              __asm { FCVT            H2, S0 }
              if (v1063)
              {
                _H0 = *v10;
                __asm { FCVT            S4, H0 }
                if (_S4 <= 0.0)
                  goto LABEL_529;
              }
              else
              {
                _S4 = 1.0;
              }
              _Q0.n128_u16[0] = *(_WORD *)v17;
              _Q0.n128_u16[0] = PDAcolorburnPDA(_Q0, _S4, _Q2, _S3);
              _Q2.n128_u16[0] = _Q0.n128_u16[0];
              if (v1063)
              {
                v601 = v1062;
                v598 = v1042;
                v596 = v1047;
LABEL_529:
                *(_WORD *)v17 = _Q2.n128_u16[0];
                *v10 = _H1;
                goto LABEL_531;
              }
              *(_WORD *)v17 = _Q0.n128_u16[0];
              v601 = v1062;
              v598 = v1042;
              v596 = v1047;
            }
          }
LABEL_531:
          v19 += v596;
          v611 = &v27[2 * v596];
          if ((unint64_t)v611 >= v15)
            v612 = v598;
          else
            v612 = 0;
          v599 += v1062 + v612;
          v27 = &v611[2 * v612];
          v10 += v1063;
          v17 += v597;
          --v600;
        }
        while (v600);
        if (v1039)
        {
          v13 = v1038;
          v613 = &v1061[2 * v1037];
          v614 = v1057;
          v615 = v1027;
          if ((unint64_t)v613 < v1039)
            v615 = 0;
          v14 = v1052 + 2 * v24 + 2 * v615;
          v616 = v1032;
          if ((unint64_t)v613 < v1039)
            v616 = 0;
          v27 = &v613[2 * v616];
          v15 += 2 * v616 + 2 * v1037;
          v599 = (__int16 *)(v1052 + 2 * v24 + 2 * v615);
          v1061 = v27;
          v618 = v1035;
          v617 = v1036;
        }
        else
        {
          v13 = v1038;
          v27 += 2 * v1037;
          v618 = v1035;
          v599 += v24;
          v14 = v1052;
          v614 = v1057;
          v617 = v1036;
        }
        v19 += v617;
        v17 += 2 * v618;
        v10 += v1060;
        v12 = v614 - 1;
        if (!v12)
          return;
      }
    case 20:
      v619 = v29;
      v1028 = -(uint64_t)(v24 * v26);
      v1033 = -(v23 * v26);
      v620 = 2 * v29;
      v621 = -(uint64_t)v25;
      v622 = (__int16 *)v14;
      v1043 = v621;
      v1048 = v29;
      while (1)
      {
        v1053 = v14;
        v1058 = v12;
        v623 = v13;
        v624 = v1062;
        do
        {
          if (*v19)
          {
            if (v624)
            {
              _H0 = *v622;
              __asm { FCVT            S1, H0 }
            }
            else
            {
              _S1 = 1.0;
            }
            v627 = (float)*v19 * 0.0039216;
            _S1 = v627 * _S1;
            __asm
            {
              FCVT            H1, S1
              FCVT            S3, H1
            }
            if (_S3 > 0.0)
            {
              _H2 = *(_WORD *)v27;
              __asm { FCVT            S2, H2 }
              _Q0.n128_f32[0] = v627 * _Q2.n128_f32[0];
              __asm { FCVT            H2, S0 }
              if (v1063)
              {
                _H0 = *v10;
                __asm { FCVT            S4, H0 }
                if (_S4 <= 0.0)
                  goto LABEL_557;
              }
              else
              {
                _S4 = 1.0;
              }
              _Q0.n128_u16[0] = *(_WORD *)v17;
              _Q0.n128_u16[0] = PDAsoftlightPDA(_Q0, _S4, _Q2, _S3);
              _Q2.n128_u16[0] = _Q0.n128_u16[0];
              if (v1063)
              {
                v624 = v1062;
                v621 = v1043;
                v619 = v1048;
LABEL_557:
                *(_WORD *)v17 = _Q2.n128_u16[0];
                *v10 = _H1;
                goto LABEL_559;
              }
              *(_WORD *)v17 = _Q0.n128_u16[0];
              v624 = v1062;
              v621 = v1043;
              v619 = v1048;
            }
          }
LABEL_559:
          v19 += v619;
          v634 = &v27[2 * v619];
          if ((unint64_t)v634 >= v15)
            v635 = v621;
          else
            v635 = 0;
          v622 += v1062 + v635;
          v27 = &v634[2 * v635];
          v10 += v1063;
          v17 += v620;
          --v623;
        }
        while (v623);
        if (v1039)
        {
          v13 = v1038;
          v636 = &v1061[2 * v1037];
          v637 = v1058;
          v638 = v1028;
          if ((unint64_t)v636 < v1039)
            v638 = 0;
          v14 = v1053 + 2 * v24 + 2 * v638;
          v639 = v1033;
          if ((unint64_t)v636 < v1039)
            v639 = 0;
          v27 = &v636[2 * v639];
          v15 += 2 * v639 + 2 * v1037;
          v622 = (__int16 *)(v1053 + 2 * v24 + 2 * v638);
          v1061 = v27;
          v641 = v1035;
          v640 = v1036;
        }
        else
        {
          v13 = v1038;
          v27 += 2 * v1037;
          v641 = v1035;
          v622 += v24;
          v14 = v1053;
          v637 = v1058;
          v640 = v1036;
        }
        v19 += v640;
        v17 += 2 * v641;
        v10 += v1060;
        v12 = v637 - 1;
        if (!v12)
          return;
      }
    case 21:
      v642 = v29;
      v1029 = -(uint64_t)(v24 * v26);
      v1034 = -(v23 * v26);
      v643 = 2 * v29;
      v644 = -(uint64_t)v25;
      v645 = (__int16 *)v14;
      v1044 = v644;
      v1049 = v29;
      do
      {
        v1054 = v14;
        v1059 = v12;
        v646 = v13;
        v647 = v1062;
        do
        {
          if (*v19)
          {
            if (v647)
            {
              _H0 = *v645;
              __asm { FCVT            S1, H0 }
            }
            else
            {
              _S1 = 1.0;
            }
            v650 = (float)*v19 * 0.0039216;
            _S1 = v650 * _S1;
            __asm
            {
              FCVT            H1, S1
              FCVT            S3, H1
            }
            if (_S3 > 0.0)
            {
              _H2 = *(_WORD *)v27;
              __asm { FCVT            S2, H2 }
              _Q0.n128_f32[0] = v650 * _Q2.n128_f32[0];
              __asm { FCVT            H2, S0 }
              if (v1063)
              {
                _H0 = *v10;
                __asm { FCVT            S4, H0 }
                if (_S4 <= 0.0)
                  goto LABEL_585;
              }
              else
              {
                _S4 = 1.0;
              }
              _Q0.n128_u16[0] = *(_WORD *)v17;
              _Q0.n128_u16[0] = PDAhardlightPDA(_Q0, _S4, _Q2, _S3);
              _Q2.n128_u16[0] = _Q0.n128_u16[0];
              if (v1063)
              {
                v647 = v1062;
                v644 = v1044;
                v642 = v1049;
LABEL_585:
                *(_WORD *)v17 = _Q2.n128_u16[0];
                *v10 = _H1;
                goto LABEL_587;
              }
              *(_WORD *)v17 = _Q0.n128_u16[0];
              v647 = v1062;
              v644 = v1044;
              v642 = v1049;
            }
          }
LABEL_587:
          v19 += v642;
          v657 = &v27[2 * v642];
          if ((unint64_t)v657 >= v15)
            v658 = v644;
          else
            v658 = 0;
          v645 += v1062 + v658;
          v27 = &v657[2 * v658];
          v10 += v1063;
          v17 += v643;
          --v646;
        }
        while (v646);
        if (v1039)
        {
          v13 = v1038;
          v659 = &v1061[2 * v1037];
          v660 = v1059;
          v661 = v1029;
          if ((unint64_t)v659 < v1039)
            v661 = 0;
          v14 = v1054 + 2 * v24 + 2 * v661;
          v662 = v1034;
          if ((unint64_t)v659 < v1039)
            v662 = 0;
          v27 = &v659[2 * v662];
          v15 += 2 * v662 + 2 * v1037;
          v645 = (__int16 *)(v1054 + 2 * v24 + 2 * v661);
          v1061 = v27;
          v664 = v1035;
          v663 = v1036;
        }
        else
        {
          v13 = v1038;
          v27 += 2 * v1037;
          v664 = v1035;
          v645 += v24;
          v14 = v1054;
          v660 = v1059;
          v663 = v1036;
        }
        v19 += v663;
        v17 += 2 * v664;
        v10 += v1060;
        v12 = v660 - 1;
      }
      while (v12);
      return;
    case 22:
      v665 = v29;
      v666 = v26;
      v667 = -(v23 * v26);
      v668 = -(uint64_t)(v24 * v666);
      v669 = 2 * v29;
      v670 = -(uint64_t)v25;
      v671 = (__int16 *)v14;
      while (1)
      {
        v672 = v13;
        do
        {
          if (*v19)
          {
            if (v1062)
            {
              _H1 = *v671;
              __asm { FCVT            S1, H1 }
            }
            else
            {
              _S1 = 1.0;
            }
            v675 = (float)*v19 * 0.0039216;
            _S1 = v675 * _S1;
            __asm
            {
              FCVT            H3, S1
              FCVT            S1, H3
            }
            if (_S1 > 0.0)
            {
              _H4 = *(_WORD *)v27;
              __asm { FCVT            S4, H4 }
              _S2 = v675 * _S4;
              __asm { FCVT            H2, S2 }
              if (v1063)
              {
                _H4 = *v10;
                __asm { FCVT            S4, H4 }
                if (_S4 <= 0.0)
                  goto LABEL_615;
              }
              else
              {
                _S4 = 1.0;
              }
              _H3 = *(_WORD *)v17;
              __asm
              {
                FCVT            S3, H3
                FCVT            S2, H2
              }
              v688 = _S2 + _S3;
              v689 = _S1 * _S3;
              v690 = _S4 * _S2;
              v691 = v688 - v689;
              v692 = v689 - v690;
              v693 = v691 - v690;
              if (v692 < 0.0)
                v692 = -v692;
              _S2 = v693 + v692;
              __asm { FCVT            H2, S2 }
              if (v1063)
              {
                _S1 = (float)(_S4 + _S1) - (float)(_S4 * _S1);
                __asm { FCVT            H3, S1 }
LABEL_615:
                *(_WORD *)v17 = _H2;
                *v10 = _H3;
                goto LABEL_617;
              }
              *(_WORD *)v17 = _H2;
            }
          }
LABEL_617:
          v19 += v665;
          v696 = &v27[2 * v665];
          v697 = &v671[v1062];
          if ((unint64_t)v696 >= v15)
            v698 = v670;
          else
            v698 = 0;
          v671 = &v697[v698];
          v27 = &v696[2 * v698];
          v10 += v1063;
          v17 += v669;
          --v672;
        }
        while (v672);
        if (v30)
        {
          v699 = &v1061[2 * v23];
          if ((unint64_t)v699 >= v30)
            v700 = v668;
          else
            v700 = 0;
          v14 += 2 * v24 + 2 * v700;
          if ((unint64_t)v699 >= v30)
            v701 = v667;
          else
            v701 = 0;
          v27 = &v699[2 * v701];
          v15 += 2 * v701 + 2 * v23;
          v671 = (__int16 *)v14;
          v1061 = v27;
        }
        else
        {
          v27 += 2 * v23;
          v671 += v24;
        }
        v19 += v35;
        v17 += 2 * v36;
        v10 += v1060;
        if (!--v12)
          return;
      }
    case 23:
      v702 = v29;
      v703 = v26;
      v704 = -(v23 * v26);
      v705 = -(uint64_t)(v24 * v703);
      v706 = 2 * v29;
      v707 = -(uint64_t)v25;
      v708 = (__int16 *)v14;
      while (1)
      {
        v709 = v13;
        do
        {
          if (*v19)
          {
            if (v1062)
            {
              _H2 = *v708;
              __asm { FCVT            S3, H2 }
            }
            else
            {
              _S3 = 1.0;
            }
            v712 = (float)*v19 * 0.0039216;
            _S3 = v712 * _S3;
            __asm
            {
              FCVT            H4, S3
              FCVT            S3, H4
            }
            if (_S3 > 0.0)
            {
              _H5 = *(_WORD *)v27;
              __asm { FCVT            S5, H5 }
              _S2 = v712 * _S5;
              __asm { FCVT            H2, S2 }
              if (v1063)
              {
                _H5 = *v10;
                __asm { FCVT            S5, H5 }
                if (_S5 <= 0.0)
                  goto LABEL_645;
              }
              else
              {
                _S5 = 1.0;
              }
              _H4 = *(_WORD *)v17;
              __asm
              {
                FCVT            S4, H4
                FCVT            S2, H2
              }
              _S2 = (float)(_S2 + _S4) + (float)((float)(_S2 * _S4) * -2.0);
              __asm { FCVT            H2, S2 }
              if (v1063)
              {
                _S3 = (float)(_S5 + _S3) - (float)(_S5 * _S3);
                __asm { FCVT            H4, S3 }
LABEL_645:
                *(_WORD *)v17 = _H2;
                *v10 = _H4;
                goto LABEL_647;
              }
              *(_WORD *)v17 = _H2;
            }
          }
LABEL_647:
          v19 += v702;
          v727 = &v27[2 * v702];
          v728 = &v708[v1062];
          if ((unint64_t)v727 >= v15)
            v729 = v707;
          else
            v729 = 0;
          v708 = &v728[v729];
          v27 = &v727[2 * v729];
          v10 += v1063;
          v17 += v706;
          --v709;
        }
        while (v709);
        if (v30)
        {
          v730 = &v1061[2 * v23];
          if ((unint64_t)v730 >= v30)
            v731 = v705;
          else
            v731 = 0;
          v14 += 2 * v24 + 2 * v731;
          if ((unint64_t)v730 >= v30)
            v732 = v704;
          else
            v732 = 0;
          v27 = &v730[2 * v732];
          v15 += 2 * v732 + 2 * v23;
          v708 = (__int16 *)v14;
          v1061 = v27;
        }
        else
        {
          v27 += 2 * v23;
          v708 += v24;
        }
        v19 += v35;
        v17 += 2 * v36;
        v10 += v1060;
        if (!--v12)
          return;
      }
    case 24:
      v733 = v29;
      v734 = v26;
      v735 = -(v23 * v26);
      v736 = -(uint64_t)(v24 * v734);
      v737 = 2 * v29;
      v738 = -(uint64_t)v25;
      v739 = (__int16 *)v14;
      while (1)
      {
        v740 = v13;
        do
        {
          if (*v19)
          {
            if (v1062)
            {
              _H3 = *v739;
              __asm { FCVT            S3, H3 }
            }
            else
            {
              _S3 = 1.0;
            }
            v743 = (float)*v19 * 0.0039216;
            _S3 = v743 * _S3;
            __asm
            {
              FCVT            H5, S3
              FCVT            S3, H5
            }
            if (_S3 > 0.0)
            {
              _H6 = *(_WORD *)v27;
              __asm { FCVT            S6, H6 }
              _S4 = v743 * _S6;
              __asm { FCVT            H4, S4 }
              if (v1063)
              {
                _H6 = *v10;
                __asm { FCVT            S6, H6 }
                if (_S6 <= 0.0)
                  goto LABEL_680;
              }
              else
              {
                _S6 = 1.0;
              }
              _H5 = *(_WORD *)v17;
              __asm
              {
                FCVT            S5, H5
                FCVT            S4, H4
              }
              v756 = _S5 - (float)(_S3 * _S5);
              if (_S3 == 1.0)
              {
                v757 = 0.0;
              }
              else
              {
                _S5 = _S3 * _S5;
                v757 = v756;
              }
              v758 = (float)(v757 + _S4) - (float)(_S6 * _S4);
              if (_S6 == 1.0)
                v758 = v757;
              _S4 = _S5 + v758;
              __asm { FCVT            H4, S4 }
              if (v1063)
              {
                _S3 = (float)(_S6 + _S3) - (float)(_S6 * _S3);
                __asm { FCVT            H5, S3 }
LABEL_680:
                *(_WORD *)v17 = _H4;
                *v10 = _H5;
                goto LABEL_682;
              }
              *(_WORD *)v17 = _H4;
            }
          }
LABEL_682:
          v19 += v733;
          v761 = &v27[2 * v733];
          v762 = &v739[v1062];
          if ((unint64_t)v761 >= v15)
            v763 = v738;
          else
            v763 = 0;
          v739 = &v762[v763];
          v27 = &v761[2 * v763];
          v10 += v1063;
          v17 += v737;
          --v740;
        }
        while (v740);
        if (v30)
        {
          v764 = &v1061[2 * v23];
          if ((unint64_t)v764 >= v30)
            v765 = v736;
          else
            v765 = 0;
          v14 += 2 * v24 + 2 * v765;
          if ((unint64_t)v764 >= v30)
            v766 = v735;
          else
            v766 = 0;
          v27 = &v764[2 * v766];
          v15 += 2 * v766 + 2 * v23;
          v739 = (__int16 *)v14;
          v1061 = v27;
        }
        else
        {
          v27 += 2 * v23;
          v739 += v24;
        }
        v19 += v35;
        v17 += 2 * v36;
        v10 += v1060;
        if (!--v12)
          return;
      }
    case 25:
      v767 = v29;
      v768 = v26;
      v769 = -(v23 * v26);
      v770 = -(uint64_t)(v24 * v768);
      v771 = 2 * v29;
      v772 = -(uint64_t)v25;
      v773 = (__int16 *)v14;
      while (1)
      {
        v774 = v13;
        do
        {
          if (*v19)
          {
            if (v1062)
            {
              _H3 = *v773;
              __asm { FCVT            S3, H3 }
            }
            else
            {
              _S3 = 1.0;
            }
            v777 = (float)*v19 * 0.0039216;
            _S3 = v777 * _S3;
            __asm
            {
              FCVT            H5, S3
              FCVT            S3, H5
            }
            if (_S3 > 0.0)
            {
              _H6 = *(_WORD *)v27;
              __asm { FCVT            S6, H6 }
              _S4 = v777 * _S6;
              __asm { FCVT            H4, S4 }
              if (v1063)
              {
                _H6 = *v10;
                __asm { FCVT            S6, H6 }
                if (_S6 <= 0.0)
                  goto LABEL_715;
              }
              else
              {
                _S6 = 1.0;
              }
              _H5 = *(_WORD *)v17;
              __asm
              {
                FCVT            S5, H5
                FCVT            S4, H4
              }
              v790 = _S5 - (float)(_S3 * _S5);
              if (_S3 == 1.0)
              {
                v791 = 0.0;
              }
              else
              {
                _S5 = _S3 * _S5;
                v791 = v790;
              }
              v792 = (float)(v791 + _S4) - (float)(_S6 * _S4);
              if (_S6 == 1.0)
                v792 = v791;
              _S4 = _S5 + v792;
              __asm { FCVT            H4, S4 }
              if (v1063)
              {
                _S3 = (float)(_S6 + _S3) - (float)(_S6 * _S3);
                __asm { FCVT            H5, S3 }
LABEL_715:
                *(_WORD *)v17 = _H4;
                *v10 = _H5;
                goto LABEL_717;
              }
              *(_WORD *)v17 = _H4;
            }
          }
LABEL_717:
          v19 += v767;
          v795 = &v27[2 * v767];
          v796 = &v773[v1062];
          if ((unint64_t)v795 >= v15)
            v797 = v772;
          else
            v797 = 0;
          v773 = &v796[v797];
          v27 = &v795[2 * v797];
          v10 += v1063;
          v17 += v771;
          --v774;
        }
        while (v774);
        if (v30)
        {
          v798 = &v1061[2 * v23];
          if ((unint64_t)v798 >= v30)
            v799 = v770;
          else
            v799 = 0;
          v14 += 2 * v24 + 2 * v799;
          if ((unint64_t)v798 >= v30)
            v800 = v769;
          else
            v800 = 0;
          v27 = &v798[2 * v800];
          v15 += 2 * v800 + 2 * v23;
          v773 = (__int16 *)v14;
          v1061 = v27;
        }
        else
        {
          v27 += 2 * v23;
          v773 += v24;
        }
        v19 += v35;
        v17 += 2 * v36;
        v10 += v1060;
        if (!--v12)
          return;
      }
    case 26:
      v801 = v29;
      v802 = v26;
      v803 = -(v23 * v26);
      v804 = -(uint64_t)(v24 * v802);
      v805 = 2 * v29;
      v806 = -(uint64_t)v25;
      v807 = (__int16 *)v14;
      while (1)
      {
        v808 = v13;
        do
        {
          if (*v19)
          {
            if (v1062)
            {
              _H3 = *v807;
              __asm { FCVT            S3, H3 }
            }
            else
            {
              _S3 = 1.0;
            }
            v811 = (float)*v19 * 0.0039216;
            _S3 = v811 * _S3;
            __asm
            {
              FCVT            H5, S3
              FCVT            S3, H5
            }
            if (_S3 > 0.0)
            {
              _H6 = *(_WORD *)v27;
              __asm { FCVT            S6, H6 }
              _S4 = v811 * _S6;
              __asm { FCVT            H4, S4 }
              if (v1063)
              {
                _H6 = *v10;
                __asm { FCVT            S6, H6 }
                if (_S6 <= 0.0)
                  goto LABEL_749;
              }
              else
              {
                _S6 = 1.0;
              }
              _H5 = *(_WORD *)v17;
              __asm
              {
                FCVT            S5, H5
                FCVT            S4, H4
              }
              v824 = _S4 - (float)(_S6 * _S4);
              if (_S6 == 1.0)
                v824 = 0.0;
              v825 = (float)(v824 + _S5) - (float)(_S3 * _S5);
              if (_S3 != 1.0)
              {
                _S5 = _S3 * _S5;
                v824 = v825;
              }
              _S4 = _S5 + v824;
              __asm { FCVT            H4, S4 }
              if (v1063)
              {
                _S3 = (float)(_S6 + _S3) - (float)(_S6 * _S3);
                __asm { FCVT            H5, S3 }
LABEL_749:
                *(_WORD *)v17 = _H4;
                *v10 = _H5;
                goto LABEL_751;
              }
              *(_WORD *)v17 = _H4;
            }
          }
LABEL_751:
          v19 += v801;
          v828 = &v27[2 * v801];
          v829 = &v807[v1062];
          if ((unint64_t)v828 >= v15)
            v830 = v806;
          else
            v830 = 0;
          v807 = &v829[v830];
          v27 = &v828[2 * v830];
          v10 += v1063;
          v17 += v805;
          --v808;
        }
        while (v808);
        if (v30)
        {
          v831 = &v1061[2 * v23];
          if ((unint64_t)v831 >= v30)
            v832 = v804;
          else
            v832 = 0;
          v14 += 2 * v24 + 2 * v832;
          if ((unint64_t)v831 >= v30)
            v833 = v803;
          else
            v833 = 0;
          v27 = &v831[2 * v833];
          v15 += 2 * v833 + 2 * v23;
          v807 = (__int16 *)v14;
          v1061 = v27;
        }
        else
        {
          v27 += 2 * v23;
          v807 += v24;
        }
        v19 += v35;
        v17 += 2 * v36;
        v10 += v1060;
        if (!--v12)
          return;
      }
    case 27:
      v834 = v29;
      v835 = v26;
      v836 = -(v23 * v26);
      v837 = -(uint64_t)(v24 * v835);
      v838 = 2 * v29;
      v839 = -(uint64_t)v25;
      v840 = (__int16 *)v14;
      break;
    default:
      return;
  }
LABEL_767:
  v841 = v13;
  while (1)
  {
    if (!*v19)
      goto LABEL_785;
    if (v1062)
    {
      _H3 = *v840;
      __asm { FCVT            S3, H3 }
    }
    else
    {
      _S3 = 1.0;
    }
    v844 = (float)*v19 * 0.0039216;
    _S3 = v844 * _S3;
    __asm
    {
      FCVT            H5, S3
      FCVT            S3, H5
    }
    if (_S3 <= 0.0)
      goto LABEL_785;
    _H6 = *(_WORD *)v27;
    __asm { FCVT            S6, H6 }
    _S4 = v844 * _S6;
    __asm { FCVT            H4, S4 }
    if (v1063)
    {
      _H6 = *v10;
      __asm { FCVT            S6, H6 }
      if (_S6 <= 0.0)
        goto LABEL_783;
    }
    else
    {
      _S6 = 1.0;
    }
    _H5 = *(_WORD *)v17;
    __asm
    {
      FCVT            S4, H4
      FCVT            S5, H5
    }
    v857 = _S5 - (float)(_S3 * _S5);
    if (_S3 == 1.0)
      v857 = 0.0;
    v858 = (float)(v857 + _S4) - (float)(_S6 * _S4);
    if (_S6 != 1.0)
    {
      _S4 = _S6 * _S4;
      v857 = v858;
    }
    _S4 = _S4 + v857;
    __asm { FCVT            H4, S4 }
    if (!v1063)
    {
      *(_WORD *)v17 = _H4;
      goto LABEL_785;
    }
    _S3 = (float)(_S6 + _S3) - (float)(_S6 * _S3);
    __asm { FCVT            H5, S3 }
LABEL_783:
    *(_WORD *)v17 = _H4;
    *v10 = _H5;
LABEL_785:
    v19 += v834;
    v861 = &v27[2 * v834];
    v862 = &v840[v1062];
    if ((unint64_t)v861 >= v15)
      v863 = v839;
    else
      v863 = 0;
    v840 = &v862[v863];
    v27 = &v861[2 * v863];
    v10 += v1063;
    v17 += v838;
    if (!--v841)
    {
      if (v30)
      {
        v864 = &v1061[2 * v23];
        if ((unint64_t)v864 >= v30)
          v865 = v837;
        else
          v865 = 0;
        v14 += 2 * v24 + 2 * v865;
        if ((unint64_t)v864 >= v30)
          v866 = v836;
        else
          v866 = 0;
        v27 = &v864[2 * v866];
        v15 += 2 * v866 + 2 * v23;
        v840 = (__int16 *)v14;
        v1061 = v27;
      }
      else
      {
        v27 += 2 * v23;
        v840 += v24;
      }
      v19 += v35;
      v17 += 2 * v36;
      v10 += v1060;
      if (!--v12)
        return;
      goto LABEL_767;
    }
  }
}

uint64_t Wf16_image(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  int *v6;
  _BOOL8 v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, int);
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  _OWORD v30[64];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v6 = (int *)*a1;
  memset(v30, 0, 512);
  if (*((_QWORD *)a2 + 12))
    v7 = 0;
  else
    v7 = *(float *)(a3 + 8) >= 1.0;
  v8 = *(_DWORD *)(*((_QWORD *)v6 + 7) + 16 * *a2 + 8 * v7 + 4 * (*((_QWORD *)a2 + 6) == 0));
  if (v8 > 28)
    return 0xFFFFFFFFLL;
  if (*((int *)a2 + 1) < 1 || *((int *)a2 + 2) < 1)
    return 0;
  if ((int)_blt_image_initialize((uint64_t)a2, a3, (uint64_t)&v25, (uint64_t)v30) < 1)
    return 0xFFFFFFFFLL;
  v18 = *v6;
  v19 = *(_DWORD *)a3;
  v26 = v19;
  v27 = v18;
  if (v19 != 68161829)
  {
    v20 = SAMPLEINDEX(v19, v10, v11, v12, v13, v14, v15, v16);
    if (v20)
    {
      if (v20 <= 0x1B)
        _CGHandleAssert("Wf16_image_inner", 12766, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_float16/blt_white_float16.cc", "index > SAMPLEF", "unexected format (%d)", v21, v22, v23, *(_DWORD *)a3);
      v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int))WF16_image_sample[v20 + 1];
      if (v25)
      {
        v24 = 136319269;
LABEL_20:
        v26 = v24;
        goto LABEL_21;
      }
      if ((HIWORD(*(_DWORD *)a3) & 0x3Fu) > 8)
      {
        if ((*(_DWORD *)a3 & 0x3F0000u) >> 16 > 0x10)
          return 0xFFFFFFFFLL;
      }
      else
      {
        v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int))&W8_image_sample[2 * v20 + 2];
        if (v25)
        {
          v24 = 34083076;
          goto LABEL_20;
        }
      }
      v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int))&W16_image_sample[2 * v20 + 2];
      if (v25)
      {
        v26 = 68161828;
        goto LABEL_21;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (!v29 && (~v28 & 0xC3) == 0)
  {
    v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
    if (v17.n128_f32[0] >= 1.0 && !*(_QWORD *)(a3 + 24))
    {
      if ((v28 & 4) != 0)
      {
        v17.n128_u64[0] = *(_QWORD *)(a3 + 32);
        *((_QWORD *)a2 + 8) = v17.n128_u64[0];
      }
      Wf16_mark_inner(*(_QWORD *)(*a1 + 56), v17);
      return 1;
    }
  }
  v25 = Wf16_sample_Wf_inner;
LABEL_21:
  Wf16_image_mark((uint64_t)a2, (uint64_t)&v25, v8, v17);
  return 1;
}

void Wf16_image_mark(uint64_t a1, uint64_t a2, int a3, __n128 a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  int *v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _WORD *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unint64_t v41;
  void *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  void *v48;
  float16x4_t v51;
  __int16 *v52;
  unsigned __int8 *v53;
  unsigned int v54;
  int v55;
  _BYTE *v56;
  int v57;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  __int16 *v74;
  uint64_t v77;
  _WORD *v78;
  unint64_t v79;
  unint64_t v82;
  _WORD *v85;
  unint64_t v86;
  unint64_t v89;
  __int128 *v92;
  uint64_t v93;
  int v94;
  unsigned __int8 *v95;
  unsigned int v96;
  float v99;
  unsigned int v103;
  unsigned __int8 v108;
  unsigned __int16 *v109;
  __int16 *v110;
  unsigned __int8 *v111;
  _WORD *v112;
  int v113;
  uint64_t v114;
  unsigned int v115;
  float v117;
  unsigned __int8 v126;
  unsigned __int8 v127;
  unsigned __int16 *v128;
  unsigned __int8 *v129;
  _WORD *v130;
  int v131;
  unsigned int v132;
  float v136;
  unsigned __int8 v149;
  _WORD *v150;
  int v151;
  unsigned int v152;
  float v161;
  float v166;
  float v169;
  _WORD *v173;
  int v174;
  unsigned int v175;
  float v184;
  float v189;
  float v192;
  __int16 *v196;
  int v197;
  unsigned int v198;
  unsigned int v199;
  float v204;
  _WORD *v214;
  int v215;
  unsigned int v216;
  unsigned int v217;
  float v220;
  float v225;
  float v231;
  uint64_t v235;
  __int16 *v236;
  int v237;
  unsigned int v238;
  float v246;
  float v253;
  float v254;
  unsigned int v257;
  uint64_t v268;
  __int16 *v269;
  int v270;
  unsigned int v271;
  float v276;
  float v280;
  float v287;
  float v288;
  unsigned int v291;
  __int16 *v302;
  int v303;
  unsigned int v304;
  unsigned int v305;
  float v308;
  float v319;
  __int16 *v322;
  int v323;
  unsigned int v324;
  unsigned int v325;
  float v330;
  uint64_t v341;
  int v342;
  unsigned __int8 *v343;
  unsigned int v344;
  unsigned int v345;
  float v350;
  unsigned int v354;
  unsigned int v355;
  uint64_t v358;
  __int16 *v359;
  int v360;
  unsigned int v361;
  unsigned int v362;
  float v365;
  __int16 *v378;
  int v379;
  unsigned int v380;
  unsigned int v381;
  float v382;
  float v397;
  float v398;
  __int16 *v401;
  int v402;
  unsigned int v403;
  unsigned int v404;
  float v405;
  __int16 *v422;
  int v423;
  unsigned __int8 *v424;
  unsigned int v425;
  unsigned int v426;
  float v427;
  __int128 *v436;
  __int16 *v437;
  int v438;
  unsigned int v439;
  unsigned int v440;
  float v441;
  float v456;
  float v457;
  __int16 *v460;
  int v461;
  unsigned int v462;
  unsigned int v463;
  float v464;
  float v479;
  float v480;
  __int16 *v483;
  int v484;
  unsigned int v485;
  unsigned int v486;
  float v487;
  __int128 *v496;
  __int16 *v497;
  int v498;
  unsigned int v499;
  unsigned int v500;
  float v501;
  __int128 *v510;
  __int16 *v511;
  int v512;
  unsigned int v513;
  unsigned int v514;
  float v515;
  __int128 *v524;
  __int16 *v525;
  int v526;
  unsigned int v527;
  unsigned int v528;
  float v529;
  __int128 *v538;
  __int16 *v539;
  int v540;
  unsigned int v541;
  unsigned int v542;
  float v543;
  float v558;
  float v559;
  float v560;
  float v561;
  float v562;
  float v563;
  __int16 *v566;
  int v567;
  unsigned int v568;
  unsigned int v569;
  float v570;
  __int16 *v587;
  int v588;
  unsigned int v589;
  unsigned int v590;
  float v591;
  float v606;
  float v607;
  float v608;
  __int16 *v611;
  int v612;
  unsigned int v613;
  unsigned int v614;
  float v615;
  float v630;
  float v631;
  float v632;
  __int16 *v635;
  int v636;
  unsigned int v637;
  unsigned int v638;
  float v639;
  float v654;
  float v655;
  __int16 *v658;
  int v659;
  unsigned int v660;
  unsigned int v661;
  float v662;
  float v677;
  float v678;
  unsigned __int8 *v681;
  unsigned __int16 *v682;
  int v683;
  unsigned int v684;
  unsigned __int8 v691;
  unsigned __int8 *v692;
  int v693;
  unsigned int v694;
  float v698;
  unsigned __int8 v710;
  int v711;
  unsigned int v712;
  unsigned int v713;
  float v722;
  unsigned __int8 v731;
  float v735;
  unsigned __int8 v748;
  unsigned __int8 v755;
  unsigned __int8 *v756;
  int v757;
  float v761;
  unsigned __int8 v773;
  uint64_t v774;
  int v775;
  int v776;
  int v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  unint64_t v781;
  void *v782;
  uint64_t v783;
  uint64_t v784;
  _QWORD *v785;
  uint64_t v786;
  int v787;
  int v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  void *v796;
  uint64_t v797;
  int v798;
  uint64_t v799;

  v787 = a3;
  v799 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a1 + 4);
  v788 = *(_DWORD *)(a1 + 8);
  v5 = *(int *)(a1 + 28);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(float *)(a2 + 184);
  v9 = *(int **)(a1 + 136);
  v789 = *(_QWORD *)(a2 + 96);
  v795 = *(_QWORD *)(a2 + 104);
  v798 = 0;
  *(_QWORD *)(a2 + 264) = &v798;
  v786 = (int)v4;
  v10 = ((int)v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if ((int)v10 > 0x1FFFFFF)
    return;
  v13 = *(int *)(a1 + 12);
  v12 = *(int *)(a1 + 16);
  v785 = (_QWORD *)a2;
  v797 = *(int *)(a2 + 16);
  v14 = (v797 + 6) * v10;
  if (v14 > 65439)
  {
    v17 = (char *)malloc_type_calloc(1uLL, v14 + 96, 0x2DF49CC5uLL);
    v16 = v17;
    v19 = v17;
    v20 = v785;
    if (!v17)
      return;
  }
  else
  {
    MEMORY[0x1E0C80A78](a1, a4);
    v16 = (char *)&v780 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v16, v15);
    v19 = 0;
    v20 = v785;
  }
  v782 = v19;
  v21 = v5 >> 1;
  v22 = (unint64_t)(v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  v23 = v22 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((_DWORD)v797)
    v24 = 4 * v10;
  else
    v24 = 0;
  v25 = v23 + v24;
  v20[18] = v22;
  v20[19] = v25;
  v20[20] = v23;
  v26 = v20;
  if (v7)
  {
    v27 = (unint64_t)*(int *)(a1 + 32) >> 1;
    v28 = (_WORD *)(v7 + 2 * (v13 + v27 * v12));
    v29 = v786;
    v793 = v27 - v786;
    v30 = 1;
  }
  else
  {
    v28 = 0;
    v793 = 0;
    v30 = 0;
    v29 = v786;
  }
  v31 = (unsigned __int16 *)(v6 + 2 * (v13 + v21 * v12));
  v792 = v21 - v29;
  v32 = *(int *)(a1 + 104);
  v33 = *(_DWORD *)(a1 + 108);
  v34 = *(unsigned __int8 *)(a1 + 2);
  if (v34 == 6 || v34 == 1)
  {
    v35 = v787;
    v36 = v789;
    v37 = v795;
    if (!v9)
      goto LABEL_592;
    v781 = v21;
    v38 = 0;
    LODWORD(v797) = 0;
    v39 = *(int *)(a1 + 124);
    v40 = (unsigned __int8 *)v9 + v32 + (int)v39 * (uint64_t)v33;
    v29 = v786;
    v791 = v39 - v786;
LABEL_21:
    v46 = v788;
    goto LABEL_22;
  }
  v781 = v21;
  v36 = v789;
  v37 = v795;
  if (!v9)
  {
    v791 = 0;
    v38 = 0;
    v40 = 0;
    LODWORD(v797) = 0;
    v35 = v787;
    goto LABEL_21;
  }
  v41 = v25;
  v794 = v30;
  shape_enum_clip_alloc((uint64_t)v17, v18, v9, 1, 1, 1, v32, v33, v4, v788);
  if (!v42)
    goto LABEL_592;
  v796 = v42;
  v43 = 0;
  v44 = (int)((v797 * v10 + 15) & 0xFFFFFFF0);
  if (!(_DWORD)v797)
    v44 = 4 * v10;
  v45 = v786;
  v791 = -v786;
  v40 = (unsigned __int8 *)(v41 + v44 + 16);
  v35 = v787;
  v46 = v788;
LABEL_580:
  v774 = v793 + v45;
  while (1)
  {
    LODWORD(v797) = v43;
    while (1)
    {
      v775 = *((_DWORD *)v40 - 4);
      v776 = v775 - v43;
      if (v775 > v43)
        break;
      v38 = v796;
      if (v43 < *((_DWORD *)v40 - 3) + v775)
      {
        v29 = v786;
        v36 = v789;
        v30 = v794;
LABEL_22:
        v783 = -v29;
        v784 = (v4 - 1) + 1;
        v47 = 2 * v30;
        v48 = v38;
        v790 = v4;
        v794 = v30;
        while (2)
        {
          v795 = v37;
          v796 = v48;
          *((_DWORD *)v26 + 60) = v46;
          ((void (*)(_QWORD *, uint64_t, uint64_t, uint64_t))*v26)(v26, v36, v37, v4);
          v52 = (__int16 *)v26[20];
          v53 = (unsigned __int8 *)v26[18];
          v54 = *((_DWORD *)v26 + 2);
          if (v54 == *((_DWORD *)v26 + 3))
          {
            if (v8 >= 1.0)
            {
              v57 = v794;
            }
            else
            {
              v55 = v4;
              v56 = (_BYTE *)v26[18];
              v57 = v794;
              do
              {
                if (*v56)
                {
                  _H0 = *v52;
                  __asm { FCVT            S0, H0 }
                  _S0 = v8 * _S0;
                  __asm { FCVT            H0, S0 }
                  *v52 = LOWORD(_S0);
                  LOWORD(_S0) = v52[1];
                  __asm { FCVT            S0, H0 }
                  _S0 = v8 * _S0;
                  __asm { FCVT            H0, S0 }
                  v52[1] = LOWORD(_S0);
                }
                ++v56;
                v52 += 2;
                --v55;
              }
              while (v55);
              v52 += 2 * v783;
              v53 += v784 + v783;
            }
          }
          else
          {
            v67 = v26[19];
            v68 = HIWORD(v54) & 0x3F;
            if (v68 == 16)
            {
              v57 = v794;
              v77 = 0;
              v78 = v52 + 1;
              if (v8 >= 1.0)
              {
                do
                {
                  if (v53[v77])
                  {
                    v82 = *(unsigned int *)(v67 + 4 * v77);
                    _S0 = *(float *)&_blt_float[v82 + 256] + *(float *)&_blt_float[BYTE1(v82) + 512];
                    __asm { FCVT            H0, S0 }
                    *(v78 - 1) = LOWORD(_S0);
                    _S0 = *(float *)&_blt_float[BYTE2(v82) + 256]
                        + *(float *)((char *)&_blt_float[512] + ((v82 >> 22) & 0x3FC));
                    __asm { FCVT            H0, S0 }
                    *v78 = LOWORD(_S0);
                  }
                  ++v77;
                  v78 += 2;
                }
                while ((_DWORD)v4 != (_DWORD)v77);
              }
              else
              {
                do
                {
                  if (v53[v77])
                  {
                    v79 = *(unsigned int *)(v67 + 4 * v77);
                    _S0 = v8
                        * (float)(*(float *)&_blt_float[v79 + 256]
                                + *(float *)&_blt_float[BYTE1(v79) + 512]);
                    __asm { FCVT            H0, S0 }
                    *(v78 - 1) = LOWORD(_S0);
                    _S0 = v8
                        * (float)(*(float *)&_blt_float[BYTE2(v79) + 256]
                                + *(float *)((char *)&_blt_float[512] + ((v79 >> 22) & 0x3FC)));
                    __asm { FCVT            H0, S0 }
                    *v78 = LOWORD(_S0);
                  }
                  ++v77;
                  v78 += 2;
                }
                while ((_DWORD)v4 != (_DWORD)v77);
              }
            }
            else
            {
              _ZF = v68 == 32;
              v57 = v794;
              v69 = 0;
              if (_ZF)
              {
                v70 = 0;
                if (v8 >= 1.0)
                {
                  do
                  {
                    if (v53[v69])
                      *(_DWORD *)&v52[v70] = *(_DWORD *)(v67 + v70 * 2);
                    v70 += 2;
                    ++v69;
                  }
                  while ((_DWORD)v4 != (_DWORD)v69);
                }
                else
                {
                  do
                  {
                    if (v53[v69])
                    {
                      _H0 = *(_WORD *)(v67 + v70 * 2);
                      __asm { FCVT            S0, H0 }
                      _S0 = v8 * _S0;
                      __asm { FCVT            H0, S0 }
                      v74 = &v52[v70];
                      *v74 = LOWORD(_S0);
                      LOWORD(_S0) = *(_WORD *)(v67 + v70 * 2 + 2);
                      __asm { FCVT            S0, H0 }
                      _S0 = v8 * _S0;
                      __asm { FCVT            H0, S0 }
                      v74[1] = LOWORD(_S0);
                    }
                    v70 += 2;
                    ++v69;
                  }
                  while ((_DWORD)v4 != (_DWORD)v69);
                }
              }
              else
              {
                v85 = v52 + 1;
                if (v8 >= 1.0)
                {
                  do
                  {
                    if (v53[v69])
                    {
                      v89 = *(unsigned int *)(v67 + 4 * v69);
                      _S0 = _blt_float[*(_DWORD *)(v67 + 4 * v69)];
                      __asm { FCVT            H0, S0 }
                      *(v85 - 1) = _S0;
                      _S0 = *(_DWORD *)((char *)_blt_float + ((v89 >> 22) & 0x3FC));
                      __asm { FCVT            H0, S0 }
                      *v85 = _S0;
                    }
                    ++v69;
                    v85 += 2;
                  }
                  while ((_DWORD)v4 != (_DWORD)v69);
                }
                else
                {
                  do
                  {
                    if (v53[v69])
                    {
                      v86 = *(unsigned int *)(v67 + 4 * v69);
                      _S0 = v8 * *(float *)&_blt_float[*(_DWORD *)(v67 + 4 * v69)];
                      __asm { FCVT            H0, S0 }
                      *(v85 - 1) = LOWORD(_S0);
                      _S0 = v8 * *(float *)((char *)_blt_float + ((v86 >> 22) & 0x3FC));
                      __asm { FCVT            H0, S0 }
                      *v85 = LOWORD(_S0);
                    }
                    ++v69;
                    v85 += 2;
                  }
                  while ((_DWORD)v4 != (_DWORD)v69);
                }
              }
            }
          }
          v92 = &xmmword_185005000;
          switch(v35)
          {
            case 0:
              v93 = v40 != 0;
              v94 = v4;
              v95 = v40;
              if (v57)
              {
                do
                {
                  v96 = *v53;
                  if (*v53)
                  {
                    if (v40)
                      v96 = (*v95 * v96 + ((*v95 * v96) >> 8) + 1) >> 8;
                    if ((_BYTE)v96)
                    {
                      if (v96 == 255)
                      {
                        *v28 = 0;
                        *v31 = 0;
                      }
                      else
                      {
                        _H0 = *v31;
                        __asm { FCVT            S0, H0 }
                        v99 = (float)((float)v96 * -0.0039216) + 1.0;
                        _S0 = v99 * _S0;
                        __asm { FCVT            H0, S0 }
                        *v31 = LOWORD(_S0);
                        LOWORD(_S0) = *v28;
                        __asm { FCVT            S0, H0 }
                        _S0 = v99 * _S0;
                        __asm { FCVT            H0, S0 }
                        *v28 = LOWORD(_S0);
                      }
                    }
                  }
                  ++v53;
                  v95 += v93;
                  ++v31;
                  ++v28;
                  --v94;
                }
                while (v94);
              }
              else
              {
                do
                {
                  v103 = *v53;
                  if (*v53)
                  {
                    if (v40)
                      v103 = (*v95 * v103 + ((*v95 * v103) >> 8) + 1) >> 8;
                    if ((_BYTE)v103)
                    {
                      _H0 = 0;
                      if (v103 != 255)
                      {
                        _H0 = *v31;
                        __asm { FCVT            S0, H0 }
                        _S0 = (float)((float)((float)v103 * -0.0039216) + 1.0) * _S0;
                        __asm { FCVT            H0, S0 }
                      }
                      *v31 = _H0;
                    }
                  }
                  ++v53;
                  v95 += v93;
                  ++v31;
                  --v94;
                }
                while (v94);
              }
              goto LABEL_496;
            case 1:
              v108 = *v53;
              if (v57)
              {
                v109 = v31 - 1;
                v110 = v52 + 1;
                v111 = v53 + 1;
                v112 = v28 - 1;
                v113 = v4;
                if (v40)
                {
                  v114 = v795;
                  do
                  {
                    if (v108)
                    {
                      v115 = ((unsigned __int16)(*v40 * v108 + ((*v40 * v108) >> 8) + 1) >> 8);
                      if (v115)
                      {
                        if (v115 == 255)
                        {
                          v109[1] = *(v110 - 1);
                          _H0 = *v110;
                        }
                        else
                        {
                          v117 = (float)v115 * 0.0039216;
                          _H1 = *(v110 - 1);
                          __asm { FCVT            S1, H1 }
                          _H2 = v109[1];
                          __asm { FCVT            S2, H2 }
                          _S1 = (float)((float)(1.0 - v117) * _S2) + (float)(_S1 * v117);
                          __asm { FCVT            H1, S1 }
                          v109[1] = LOWORD(_S1);
                          LOWORD(_S1) = *v110;
                          __asm { FCVT            S1, H1 }
                          LOWORD(_S2) = v112[1];
                          __asm { FCVT            S2, H2 }
                          _S0 = (float)((float)(1.0 - v117) * _S2) + (float)(_S1 * v117);
                          __asm { FCVT            H0, S0 }
                        }
                        v112[1] = _H0;
                      }
                    }
                    v126 = *v111++;
                    v108 = v126;
                    ++v40;
                    ++v109;
                    v110 += 2;
                    ++v112;
                    --v113;
                  }
                  while (v113);
                  v40 += v791;
                }
                else
                {
                  v114 = v795;
                  do
                  {
                    if (v108)
                    {
                      if (v108 == 255)
                      {
                        v109[1] = *(v110 - 1);
                        _H0 = *v110;
                      }
                      else
                      {
                        v722 = (float)v108 * 0.0039216;
                        _H1 = *(v110 - 1);
                        __asm { FCVT            S1, H1 }
                        _H2 = v109[1];
                        __asm { FCVT            S2, H2 }
                        _S1 = (float)((float)(1.0 - v722) * _S2) + (float)(_S1 * v722);
                        __asm { FCVT            H1, S1 }
                        v109[1] = LOWORD(_S1);
                        LOWORD(_S1) = *v110;
                        __asm { FCVT            S1, H1 }
                        LOWORD(_S2) = v112[1];
                        __asm { FCVT            S2, H2 }
                        _S0 = (float)((float)(1.0 - v722) * _S2) + (float)(_S1 * v722);
                        __asm { FCVT            H0, S0 }
                      }
                      v112[1] = _H0;
                    }
                    v731 = *v111++;
                    v108 = v731;
                    ++v109;
                    v110 += 2;
                    ++v112;
                    --v113;
                  }
                  while (v113);
                  v40 = 0;
                }
                v31 = &v109[v792 + 1];
                v28 = &v112[v793 + 1];
                goto LABEL_499;
              }
              v681 = v53 + 1;
              v682 = v31 - 1;
              v683 = v4;
              if (v40)
              {
                v114 = v795;
                do
                {
                  if (v108)
                  {
                    v684 = ((unsigned __int16)(*v40 * v108 + ((*v40 * v108) >> 8) + 1) >> 8);
                    if (v684)
                    {
                      if (v684 == 255)
                      {
                        _H0 = *v52;
                      }
                      else
                      {
                        _H1 = *v52;
                        __asm { FCVT            S1, H1 }
                        _H2 = v682[1];
                        __asm { FCVT            S2, H2 }
                        _S0 = (float)((float)(1.0 - (float)((float)v684 * 0.0039216)) * _S2)
                            + (float)(_S1 * (float)((float)v684 * 0.0039216));
                        __asm { FCVT            H0, S0 }
                      }
                      v682[1] = _H0;
                    }
                  }
                  v691 = *v681++;
                  v108 = v691;
                  v52 += 2;
                  ++v40;
                  ++v682;
                  --v683;
                }
                while (v683);
                goto LABEL_526;
              }
              v114 = v795;
              do
              {
                if (v108)
                {
                  if (v108 == 255)
                  {
                    _H0 = *v52;
                  }
                  else
                  {
                    _H1 = *v52;
                    __asm { FCVT            S1, H1 }
                    _H2 = v682[1];
                    __asm { FCVT            S2, H2 }
                    _S0 = (float)((float)(1.0 - (float)((float)v108 * 0.0039216)) * _S2)
                        + (float)(_S1 * (float)((float)v108 * 0.0039216));
                    __asm { FCVT            H0, S0 }
                  }
                  v682[1] = _H0;
                }
                v755 = *v681++;
                v108 = v755;
                v52 += 2;
                ++v682;
                --v683;
              }
              while (v683);
              goto LABEL_578;
            case 2:
              v127 = *v53;
              if (v57)
              {
                v128 = v31 - 1;
                v129 = v53 + 1;
                v130 = v28 - 1;
                v131 = v4;
                if (v40)
                {
                  v114 = v795;
                  while (1)
                  {
                    if (!v127)
                      goto LABEL_105;
                    v132 = ((unsigned __int16)(*v40 * v127 + ((*v40 * v127) >> 8) + 1) >> 8);
                    if (!v132)
                      goto LABEL_105;
                    if (v132 == 255)
                    {
                      _H1 = v52[1];
                      __asm { FCVT            S0, H1 }
                      if (_S0 >= 1.0)
                      {
                        v128[1] = *v52;
                        goto LABEL_104;
                      }
                      if (_S0 > 0.0)
                      {
                        _H1 = *v52;
                        goto LABEL_102;
                      }
                    }
                    else
                    {
                      v136 = (float)v132 * 0.0039216;
                      _H0 = v52[1];
                      __asm { FCVT            S0, H0 }
                      _S0 = v136 * _S0;
                      __asm
                      {
                        FCVT            H0, S0
                        FCVT            S0, H0
                      }
                      if (_S0 > 0.0)
                      {
                        _H2 = *v52;
                        __asm { FCVT            S2, H2 }
                        _S1 = v136 * _S2;
                        __asm { FCVT            H1, S1 }
LABEL_102:
                        __asm { FCVT            S1, H1 }
                        _H2 = v128[1];
                        __asm { FCVT            S2, H2 }
                        _S1 = _S1 + (float)(_S2 * (float)(1.0 - _S0));
                        __asm { FCVT            H1, S1 }
                        v128[1] = LOWORD(_S1);
                        LOWORD(_S1) = v130[1];
                        __asm { FCVT            S1, H1 }
                        _S0 = _S0 + (float)(_S1 * (float)(1.0 - _S0));
                        __asm { FCVT            H1, S0 }
LABEL_104:
                        v130[1] = _H1;
                      }
                    }
LABEL_105:
                    v149 = *v129++;
                    v127 = v149;
                    v52 += 2;
                    ++v40;
                    ++v128;
                    ++v130;
                    if (!--v131)
                    {
                      v40 += v791;
LABEL_557:
                      v31 = &v128[v792 + 1];
                      v28 = &v130[v793 + 1];
                      goto LABEL_499;
                    }
                  }
                }
                v114 = v795;
                while (1)
                {
                  if (v127)
                  {
                    if (v127 == 255)
                    {
                      _H1 = v52[1];
                      __asm { FCVT            S0, H1 }
                      if (_S0 >= 1.0)
                      {
                        v128[1] = *v52;
                        goto LABEL_554;
                      }
                      if (_S0 > 0.0)
                      {
                        _H1 = *v52;
                        goto LABEL_552;
                      }
                    }
                    else
                    {
                      v735 = (float)v127 * 0.0039216;
                      _H0 = v52[1];
                      __asm { FCVT            S0, H0 }
                      _S0 = v735 * _S0;
                      __asm
                      {
                        FCVT            H0, S0
                        FCVT            S0, H0
                      }
                      if (_S0 > 0.0)
                      {
                        _H2 = *v52;
                        __asm { FCVT            S2, H2 }
                        _S1 = v735 * _S2;
                        __asm { FCVT            H1, S1 }
LABEL_552:
                        __asm { FCVT            S1, H1 }
                        _H2 = v128[1];
                        __asm { FCVT            S2, H2 }
                        _S1 = _S1 + (float)(_S2 * (float)(1.0 - _S0));
                        __asm { FCVT            H1, S1 }
                        v128[1] = LOWORD(_S1);
                        LOWORD(_S1) = v130[1];
                        __asm { FCVT            S1, H1 }
                        _S0 = _S0 + (float)(_S1 * (float)(1.0 - _S0));
                        __asm { FCVT            H1, S0 }
LABEL_554:
                        v130[1] = _H1;
                      }
                    }
                  }
                  v748 = *v129++;
                  v127 = v748;
                  v52 += 2;
                  ++v128;
                  ++v130;
                  if (!--v131)
                  {
                    v40 = 0;
                    goto LABEL_557;
                  }
                }
              }
              if (v40)
              {
                v682 = v31 - 1;
                v692 = v53 + 1;
                v693 = v4;
                v114 = v795;
                while (1)
                {
                  if (!v127)
                    goto LABEL_525;
                  v694 = ((unsigned __int16)(*v40 * v127 + ((*v40 * v127) >> 8) + 1) >> 8);
                  if (!v694)
                    goto LABEL_525;
                  if (v694 == 255)
                  {
                    _H0 = v52[1];
                    __asm { FCVT            S0, H0 }
                    if (_S0 >= 1.0)
                    {
                      _H0 = *v52;
                      goto LABEL_524;
                    }
                    if (_S0 > 0.0)
                    {
                      _H1 = *v52;
                      goto LABEL_522;
                    }
                  }
                  else
                  {
                    v698 = (float)v694 * 0.0039216;
                    _H0 = v52[1];
                    __asm { FCVT            S0, H0 }
                    _S0 = v698 * _S0;
                    __asm
                    {
                      FCVT            H0, S0
                      FCVT            S0, H0
                    }
                    if (_S0 > 0.0)
                    {
                      _H2 = *v52;
                      __asm { FCVT            S2, H2 }
                      _S1 = v698 * _S2;
                      __asm { FCVT            H1, S1 }
LABEL_522:
                      __asm { FCVT            S1, H1 }
                      _H2 = v682[1];
                      __asm { FCVT            S2, H2 }
                      _S0 = _S1 + (float)(_S2 * (float)(1.0 - _S0));
                      __asm { FCVT            H0, S0 }
LABEL_524:
                      v682[1] = _H0;
                    }
                  }
LABEL_525:
                  v710 = *v692++;
                  v127 = v710;
                  v52 += 2;
                  ++v40;
                  ++v682;
                  if (!--v693)
                  {
LABEL_526:
                    v40 += v791;
                    goto LABEL_579;
                  }
                }
              }
              v756 = v53 + 1;
              v682 = v31 - 1;
              v757 = v4;
              v114 = v795;
              do
              {
                if (!v127)
                  goto LABEL_577;
                if (v127 == 255)
                {
                  _H0 = v52[1];
                  __asm { FCVT            S0, H0 }
                  if (_S0 >= 1.0)
                  {
                    _H0 = *v52;
                    goto LABEL_576;
                  }
                  if (_S0 <= 0.0)
                    goto LABEL_577;
                  _H1 = *v52;
                }
                else
                {
                  v761 = (float)v127 * 0.0039216;
                  _H0 = v52[1];
                  __asm { FCVT            S0, H0 }
                  _S0 = v761 * _S0;
                  __asm
                  {
                    FCVT            H0, S0
                    FCVT            S0, H0
                  }
                  if (_S0 <= 0.0)
                    goto LABEL_577;
                  _H2 = *v52;
                  __asm { FCVT            S2, H2 }
                  _S1 = v761 * _S2;
                  __asm { FCVT            H1, S1 }
                }
                __asm { FCVT            S1, H1 }
                _H2 = v682[1];
                __asm { FCVT            S2, H2 }
                _S0 = _S1 + (float)(_S2 * (float)(1.0 - _S0));
                __asm { FCVT            H0, S0 }
LABEL_576:
                v682[1] = _H0;
LABEL_577:
                v773 = *v756++;
                v127 = v773;
                v52 += 2;
                ++v682;
                --v757;
              }
              while (v757);
LABEL_578:
              v40 = 0;
LABEL_579:
              v31 = &v682[v792 + 1];
              v28 += v793;
LABEL_499:
              if (!--v46)
                goto LABEL_590;
              v48 = 0;
              LODWORD(v797) = v797 + 1;
              v36 += v26[16];
              v37 = v26[17] + v114;
              if (v796)
              {
                v789 = v36;
                v45 = v786;
                v43 = v797;
                goto LABEL_580;
              }
              continue;
            case 3:
              v150 = v52 + 1;
              v151 = v4;
              v95 = v40;
              do
              {
                v152 = *v53;
                if (*v53)
                {
                  if (v40)
                    v152 = (*v95 * v152 + ((*v95 * v152) >> 8) + 1) >> 8;
                  if ((_BYTE)v152)
                  {
                    if (v152 == 255)
                    {
                      _H0 = *(v150 - 1);
                      _H1 = *v28;
                      __asm
                      {
                        FCVT            S1, H1
                        FCVT            S0, H0
                      }
                      _S0 = _S0 * _S1;
                      __asm { FCVT            H0, S0 }
                      *v31 = LOWORD(_S0);
                      LOWORD(_S0) = *v150;
                      LOWORD(_S1) = *v28;
                      __asm
                      {
                        FCVT            S0, H0
                        FCVT            S1, H1
                      }
                      _S0 = _S0 * _S1;
                    }
                    else
                    {
                      v161 = (float)v152 * 0.0039216;
                      _H1 = *v28;
                      __asm { FCVT            S1, H1 }
                      _H2 = *(v150 - 1);
                      __asm { FCVT            S2, H2 }
                      v166 = v161 * _S1;
                      _H4 = *v31;
                      __asm { FCVT            S4, H4 }
                      v169 = 1.0 - v161;
                      _S2 = (float)(v169 * _S4) + (float)(_S2 * v166);
                      __asm { FCVT            H2, S2 }
                      *v31 = LOWORD(_S2);
                      LOWORD(_S2) = *v150;
                      __asm { FCVT            S2, H2 }
                      _S0 = (float)(v169 * _S1) + (float)(_S2 * v166);
                    }
                    __asm { FCVT            H0, S0 }
                    *v28 = _H0;
                  }
                }
                ++v53;
                v95 += v40 != 0;
                ++v31;
                v150 += 2;
                v28 = (_WORD *)((char *)v28 + v47);
                --v151;
              }
              while (v151);
              goto LABEL_496;
            case 4:
              v173 = v52 + 1;
              v174 = v4;
              v95 = v40;
              do
              {
                v175 = *v53;
                if (*v53)
                {
                  if (v40)
                    v175 = (*v95 * v175 + ((*v95 * v175) >> 8) + 1) >> 8;
                  if ((_BYTE)v175)
                  {
                    if (v175 == 255)
                    {
                      _H0 = *(v173 - 1);
                      __asm { FCVT            S0, H0 }
                      _H1 = *v28;
                      __asm { FCVT            S1, H1 }
                      _S0 = (float)(1.0 - _S1) * _S0;
                      __asm { FCVT            H0, S0 }
                      *v31 = LOWORD(_S0);
                      LOWORD(_S0) = *v173;
                      __asm { FCVT            S0, H0 }
                      LOWORD(_S1) = *v28;
                      __asm { FCVT            S1, H1 }
                      _S0 = (float)(1.0 - _S1) * _S0;
                    }
                    else
                    {
                      v184 = (float)v175 * 0.0039216;
                      _H1 = *v28;
                      __asm { FCVT            S1, H1 }
                      _H2 = *(v173 - 1);
                      __asm { FCVT            S2, H2 }
                      v189 = v184 * (float)(1.0 - _S1);
                      _H5 = *v31;
                      __asm { FCVT            S5, H5 }
                      v192 = 1.0 - v184;
                      _S2 = (float)(v192 * _S5) + (float)(_S2 * v189);
                      __asm { FCVT            H2, S2 }
                      *v31 = LOWORD(_S2);
                      LOWORD(_S2) = *v173;
                      __asm { FCVT            S2, H2 }
                      _S0 = (float)(v192 * _S1) + (float)(_S2 * v189);
                    }
                    __asm { FCVT            H0, S0 }
                    *v28 = _H0;
                  }
                }
                ++v53;
                v95 += v40 != 0;
                ++v31;
                v173 += 2;
                v28 = (_WORD *)((char *)v28 + v47);
                --v174;
              }
              while (v174);
              goto LABEL_496;
            case 5:
              v196 = v52 + 1;
              v197 = v4;
              v95 = v40;
              while (1)
              {
                v198 = *v53;
                if (*v53)
                {
                  if (!v40)
                    goto LABEL_134;
                  v199 = *v95 * v198 + ((*v95 * v198) >> 8) + 1;
                  if (BYTE1(v199))
                    break;
                }
LABEL_135:
                ++v53;
                v95 += v40 != 0;
                ++v31;
                v196 += 2;
                v28 = (_WORD *)((char *)v28 + v47);
                if (!--v197)
                  goto LABEL_496;
              }
              v198 = v199 >> 8;
LABEL_134:
              _H0 = *v28;
              __asm { FCVT            S0, H0 }
              _H1 = *(v196 - 1);
              __asm { FCVT            S1, H1 }
              v204 = (float)v198 * 0.0039216;
              _S1 = v204 * _S1;
              __asm { FCVT            H1, S1 }
              _H3 = *v196;
              __asm { FCVT            S3, H3 }
              _S2 = v204 * _S3;
              __asm
              {
                FCVT            H2, S2
                FCVT            S2, H2
                FCVT            S1, H1
              }
              LOWORD(_S3) = *v31;
              __asm { FCVT            S3, H3 }
              _S1 = (float)((float)(1.0 - _S2) * _S3) + (float)(_S1 * _S0);
              __asm { FCVT            H1, S1 }
              *v31 = LOWORD(_S1);
              _S0 = (float)((float)(1.0 - _S2) * _S0) + (float)(_S2 * _S0);
              __asm { FCVT            H0, S0 }
              *v28 = LOWORD(_S0);
              goto LABEL_135;
            case 6:
              v214 = v52 + 1;
              v215 = v4;
              v95 = v40;
              while (1)
              {
                v216 = *v53;
                if (*v53)
                {
                  if (v40)
                  {
                    v217 = *v95 * v216 + ((*v95 * v216) >> 8) + 1;
                    if (!BYTE1(v217))
                      goto LABEL_147;
                    v216 = v217 >> 8;
                  }
                  _H0 = *v28;
                  __asm { FCVT            S0, H0 }
                  v220 = 1.0 - _S0;
                  if ((float)(1.0 - _S0) >= 1.0)
                  {
                    _H0 = *(v214 - 1);
                    __asm { FCVT            S0, H0 }
                    v231 = (float)v216 * 0.0039216;
                    _S0 = v231 * _S0;
                    __asm { FCVT            H0, S0 }
                    *v31 = LOWORD(_S0);
                    LOWORD(_S0) = *v214;
                    __asm { FCVT            S0, H0 }
                    _S0 = v231 * _S0;
                    goto LABEL_146;
                  }
                  if (v220 > 0.0)
                  {
                    _H2 = *v31;
                    __asm { FCVT            S2, H2 }
                    _H3 = *(v214 - 1);
                    __asm { FCVT            S3, H3 }
                    v225 = (float)((float)v216 * 0.0039216) * v220;
                    _S2 = _S2 + (float)(_S3 * v225);
                    __asm { FCVT            H2, S2 }
                    *v31 = LOWORD(_S2);
                    LOWORD(_S2) = *v214;
                    __asm { FCVT            S2, H2 }
                    _S0 = _S0 + (float)(_S2 * v225);
LABEL_146:
                    __asm { FCVT            H0, S0 }
                    *v28 = _H0;
                  }
                }
LABEL_147:
                ++v53;
                v95 += v40 != 0;
                ++v31;
                v214 += 2;
                v28 = (_WORD *)((char *)v28 + v47);
                if (!--v215)
                  goto LABEL_496;
              }
            case 7:
              v235 = v40 != 0;
              v236 = v52 + 1;
              v237 = v4;
              v95 = v40;
              if (v57)
              {
                do
                {
                  v238 = *v53;
                  if (*v53)
                  {
                    if (v40)
                      v238 = (*v95 * v238 + ((*v95 * v238) >> 8) + 1) >> 8;
                    if ((_BYTE)v238)
                    {
                      if (v238 == 255)
                      {
                        _H0 = *v31;
                        _H1 = *v236;
                        __asm
                        {
                          FCVT            S0, H0
                          FCVT            S1, H1
                        }
                        _S0 = _S0 * _S1;
                        __asm { FCVT            H0, S0 }
                        *v31 = LOWORD(_S0);
                        LOWORD(_S0) = *v28;
                        __asm { FCVT            S0, H0 }
                        _S0 = _S1 * _S0;
                      }
                      else
                      {
                        v246 = (float)v238 * 0.0039216;
                        _H1 = *v28;
                        __asm { FCVT            S1, H1 }
                        _H2 = *v31;
                        __asm { FCVT            S2, H2 }
                        _H3 = *v236;
                        __asm { FCVT            S3, H3 }
                        v253 = v246 * _S3;
                        v254 = 1.0 - v246;
                        _S2 = (float)(v254 * _S2) + (float)(_S2 * v253);
                        __asm { FCVT            H2, S2 }
                        *v31 = LOWORD(_S2);
                        _S0 = (float)(v254 * _S1) + (float)(_S1 * v253);
                      }
                      __asm { FCVT            H0, S0 }
                      *v28 = _H0;
                    }
                  }
                  ++v53;
                  v95 += v235;
                  ++v31;
                  ++v28;
                  v236 += 2;
                  --v237;
                }
                while (v237);
              }
              else
              {
                do
                {
                  v257 = *v53;
                  if (*v53)
                  {
                    if (v40)
                      v257 = (*v95 * v257 + ((*v95 * v257) >> 8) + 1) >> 8;
                    if ((_BYTE)v257)
                    {
                      if (v257 == 255)
                      {
                        _H0 = *v31;
                        _H1 = *v236;
                        __asm
                        {
                          FCVT            S1, H1
                          FCVT            S0, H0
                        }
                        _S0 = _S0 * _S1;
                      }
                      else
                      {
                        _H1 = *v31;
                        __asm { FCVT            S1, H1 }
                        _H2 = *v236;
                        __asm { FCVT            S2, H2 }
                        _S0 = (float)((float)(1.0 - (float)((float)v257 * 0.0039216)) * _S1)
                            + (float)(_S1 * (float)((float)((float)v257 * 0.0039216) * _S2));
                      }
                      __asm { FCVT            H0, S0 }
                      *v31 = _H0;
                    }
                  }
                  ++v53;
                  v95 += v235;
                  ++v31;
                  v236 += 2;
                  --v237;
                }
                while (v237);
              }
              goto LABEL_496;
            case 8:
              v268 = v40 != 0;
              v269 = v52 + 1;
              v270 = v4;
              v95 = v40;
              if (v57)
              {
                do
                {
                  v271 = *v53;
                  if (*v53)
                  {
                    if (v40)
                      v271 = (*v95 * v271 + ((*v95 * v271) >> 8) + 1) >> 8;
                    if ((_BYTE)v271)
                    {
                      if (v271 == 255)
                      {
                        _H0 = *v31;
                        __asm { FCVT            S0, H0 }
                        _H1 = *v269;
                        __asm { FCVT            S1, H1 }
                        v276 = 1.0 - _S1;
                        _S0 = v276 * _S0;
                        __asm { FCVT            H0, S0 }
                        *v31 = LOWORD(_S0);
                        LOWORD(_S0) = *v28;
                        __asm { FCVT            S0, H0 }
                        _S0 = v276 * _S0;
                      }
                      else
                      {
                        v280 = (float)v271 * 0.0039216;
                        _H1 = *v28;
                        __asm { FCVT            S1, H1 }
                        _H2 = *v31;
                        __asm { FCVT            S2, H2 }
                        _H3 = *v269;
                        __asm { FCVT            S3, H3 }
                        v287 = v280 * (float)(1.0 - _S3);
                        v288 = 1.0 - v280;
                        _S2 = (float)(v288 * _S2) + (float)(_S2 * v287);
                        __asm { FCVT            H2, S2 }
                        *v31 = LOWORD(_S2);
                        _S0 = (float)(v288 * _S1) + (float)(_S1 * v287);
                      }
                      __asm { FCVT            H0, S0 }
                      *v28 = _H0;
                    }
                  }
                  ++v53;
                  v95 += v268;
                  ++v31;
                  ++v28;
                  v269 += 2;
                  --v270;
                }
                while (v270);
              }
              else
              {
                do
                {
                  v291 = *v53;
                  if (*v53)
                  {
                    if (v40)
                      v291 = (*v95 * v291 + ((*v95 * v291) >> 8) + 1) >> 8;
                    if ((_BYTE)v291)
                    {
                      if (v291 == 255)
                      {
                        _H0 = *v31;
                        __asm { FCVT            S0, H0 }
                        _H1 = *v269;
                        __asm { FCVT            S1, H1 }
                        _S0 = (float)(1.0 - _S1) * _S0;
                      }
                      else
                      {
                        _H1 = *v31;
                        __asm { FCVT            S1, H1 }
                        _H2 = *v269;
                        __asm { FCVT            S2, H2 }
                        _S0 = (float)((float)(1.0 - (float)((float)v291 * 0.0039216)) * _S1)
                            + (float)(_S1
                                    * (float)((float)((float)v291 * 0.0039216) * (float)(1.0 - _S2)));
                      }
                      __asm { FCVT            H0, S0 }
                      *v31 = _H0;
                    }
                  }
                  ++v53;
                  v95 += v268;
                  ++v31;
                  v269 += 2;
                  --v270;
                }
                while (v270);
              }
              goto LABEL_496;
            case 9:
              v302 = v52 + 1;
              v303 = v4;
              v95 = v40;
              while (1)
              {
                v304 = *v53;
                if (*v53)
                {
                  if (!v40)
                    goto LABEL_196;
                  v305 = *v95 * v304 + ((*v95 * v304) >> 8) + 1;
                  if (BYTE1(v305))
                    break;
                }
LABEL_197:
                ++v53;
                v95 += v40 != 0;
                ++v31;
                v302 += 2;
                v28 = (_WORD *)((char *)v28 + v47);
                if (!--v303)
                  goto LABEL_496;
              }
              v304 = v305 >> 8;
LABEL_196:
              _H0 = *v28;
              __asm { FCVT            S0, H0 }
              v308 = (float)v304 * 0.0039216;
              _H2 = *(v302 - 1);
              __asm { FCVT            S2, H2 }
              _S2 = v308 * _S2;
              __asm { FCVT            H2, S2 }
              _H3 = *v302;
              __asm { FCVT            S3, H3 }
              _S3 = v308 * _S3;
              __asm
              {
                FCVT            H3, S3
                FCVT            S3, H3
                FCVT            S2, H2
              }
              _H6 = *v31;
              __asm { FCVT            S6, H6 }
              v319 = (float)(1.0 - v308) + _S3;
              _S2 = (float)(v319 * _S6) + (float)(_S2 * (float)(1.0 - _S0));
              __asm { FCVT            H2, S2 }
              *v31 = LOWORD(_S2);
              _S0 = (float)(v319 * _S0) + (float)(_S3 * (float)(1.0 - _S0));
              __asm { FCVT            H0, S0 }
              *v28 = LOWORD(_S0);
              goto LABEL_197;
            case 10:
              v322 = v52 + 1;
              v323 = v4;
              v95 = v40;
              while (1)
              {
                v324 = *v53;
                if (*v53)
                {
                  if (!v40)
                    goto LABEL_204;
                  v325 = *v95 * v324 + ((*v95 * v324) >> 8) + 1;
                  if (BYTE1(v325))
                    break;
                }
LABEL_205:
                ++v53;
                v95 += v40 != 0;
                ++v31;
                v322 += 2;
                v28 = (_WORD *)((char *)v28 + v47);
                if (!--v323)
                  goto LABEL_496;
              }
              v324 = v325 >> 8;
LABEL_204:
              _H0 = *v28;
              __asm { FCVT            S0, H0 }
              _H1 = *(v322 - 1);
              __asm { FCVT            S1, H1 }
              v330 = (float)v324 * 0.0039216;
              _S1 = v330 * _S1;
              __asm { FCVT            H1, S1 }
              _H3 = *v322;
              __asm { FCVT            S3, H3 }
              _S2 = v330 * _S3;
              __asm
              {
                FCVT            H2, S2
                FCVT            S2, H2
                FCVT            S1, H1
              }
              _H5 = *v31;
              __asm { FCVT            S5, H5 }
              _S1 = (float)((float)(1.0 - _S2) * _S5) + (float)(_S1 * (float)(1.0 - _S0));
              __asm { FCVT            H1, S1 }
              *v31 = LOWORD(_S1);
              _S0 = (float)((float)(1.0 - _S2) * _S0) + (float)(_S2 * (float)(1.0 - _S0));
              __asm { FCVT            H0, S0 }
              *v28 = LOWORD(_S0);
              goto LABEL_205;
            case 11:
              v341 = v40 != 0;
              v342 = v4;
              v343 = v40;
              if (v57)
              {
                while (1)
                {
                  v344 = *v53;
                  if (*v53)
                  {
                    if (!v40)
                      goto LABEL_212;
                    v345 = *v343 * v344 + ((*v343 * v344) >> 8) + 1;
                    if (BYTE1(v345))
                      break;
                  }
LABEL_215:
                  ++v53;
                  v52 += 2;
                  v343 += v341;
                  ++v31;
                  ++v28;
                  if (!--v342)
                    goto LABEL_534;
                }
                v344 = v345 >> 8;
LABEL_212:
                _H1 = *v28;
                __asm { FCVT            S1, H1 }
                _H2 = *v31;
                __asm { FCVT            S2, H2 }
                v350 = _S1 - _S2;
                v51.i32[0] = *(_DWORD *)v52;
                v51 = (float16x4_t)vcvtq_f32_f16(v51).u64[0];
                _Q0.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)v51, (float)v344 * 0.0039216);
                _Q0 = (__n128)vcvtq_f32_f16(vcvt_f16_f32((float32x4_t)_Q0));
                _S1 = _Q0.n128_f32[1] + _S1;
                _Q0.n128_f32[0] = v350 + (float)(_Q0.n128_f32[1] - _Q0.n128_f32[0]);
                if (_S1 > 1.0)
                  _S1 = 1.0;
                __asm { FCVT            H2, S1 }
                *v28 = _H2;
                _S0 = _S1 - _Q0.n128_f32[0];
                __asm { FCVT            H0, S0 }
                *v31 = LOWORD(_S0);
                goto LABEL_215;
              }
              while (1)
              {
                v354 = *v53;
                if (*v53)
                {
                  if (!v40)
                    goto LABEL_221;
                  v355 = *v343 * v354 + ((*v343 * v354) >> 8) + 1;
                  if (BYTE1(v355))
                    break;
                }
LABEL_222:
                ++v53;
                v52 += 2;
                v343 += v341;
                ++v31;
                if (!--v342)
                  goto LABEL_534;
              }
              v354 = v355 >> 8;
LABEL_221:
              _H1 = *v31;
              __asm { FCVT            S1, H1 }
              v51.i32[0] = *(_DWORD *)v52;
              _Q0.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v51), (float)v354 * 0.0039216);
              _Q0 = (__n128)vcvtq_f32_f16(vcvt_f16_f32((float32x4_t)_Q0));
              v51 = (float16x4_t)vdup_lane_s32((int32x2_t)_Q0.n128_u64[0], 1);
              _Q0.n128_f32[0] = 1.0
                              - (float)((float)(1.0 - _S1)
                                      + vsub_f32((float32x2_t)v51, (float32x2_t)_Q0.n128_u64[0]).f32[0]);
              __asm { FCVT            H0, S0 }
              *v31 = _Q0.n128_u16[0];
              goto LABEL_222;
            case 12:
              v358 = v40 != 0;
              if (v57)
              {
                v359 = v52 + 1;
                v360 = v4;
                v95 = v40;
                while (1)
                {
                  v361 = *v53;
                  if (*v53)
                  {
                    if (!v40)
                      goto LABEL_230;
                    v362 = *v95 * v361 + ((*v95 * v361) >> 8) + 1;
                    if (BYTE1(v362))
                      break;
                  }
LABEL_233:
                  ++v53;
                  v95 += v358;
                  ++v31;
                  ++v28;
                  v359 += 2;
                  if (!--v360)
                    goto LABEL_496;
                }
                v361 = v362 >> 8;
LABEL_230:
                _H0 = *(v359 - 1);
                __asm { FCVT            S0, H0 }
                v365 = (float)v361 * 0.0039216;
                _S0 = v365 * _S0;
                __asm { FCVT            H0, S0 }
                _H2 = *v359;
                __asm { FCVT            S2, H2 }
                _S1 = v365 * _S2;
                __asm { FCVT            H1, S1 }
                LOWORD(_S2) = *v28;
                __asm
                {
                  FCVT            S2, H2
                  FCVT            S1, H1
                }
                _S1 = _S2 + _S1;
                _H2 = *v31;
                if (_S1 > 1.0)
                  _S1 = 1.0;
                __asm
                {
                  FCVT            S0, H0
                  FCVT            S2, H2
                }
                _S0 = _S2 + _S0;
                __asm { FCVT            H0, S0 }
                *v31 = LOWORD(_S0);
                __asm { FCVT            H0, S1 }
                *v28 = LOWORD(_S0);
                goto LABEL_233;
              }
              v711 = v4;
              v343 = v40;
              while (1)
              {
                v712 = *v53;
                if (*v53)
                {
                  if (!v40)
                    goto LABEL_532;
                  v713 = *v343 * v712 + ((*v343 * v712) >> 8) + 1;
                  if (BYTE1(v713))
                    break;
                }
LABEL_533:
                ++v53;
                v52 += 2;
                v343 += v358;
                ++v31;
                if (!--v711)
                {
LABEL_534:
                  v40 = &v343[v791];
LABEL_497:
                  v31 += v792;
                  v28 += v793;
LABEL_498:
                  v114 = v795;
                  goto LABEL_499;
                }
              }
              v712 = v713 >> 8;
LABEL_532:
              _H0 = *v52;
              __asm { FCVT            S0, H0 }
              _S0 = (float)((float)v712 * 0.0039216) * _S0;
              __asm { FCVT            H0, S0 }
              _H1 = *v31;
              __asm
              {
                FCVT            S0, H0
                FCVT            S1, H1
              }
              _S0 = _S1 + _S0;
              __asm { FCVT            H0, S0 }
              *v31 = LOWORD(_S0);
              goto LABEL_533;
            case 13:
              v378 = v52 + 1;
              v379 = v4;
              v95 = v40;
              while (1)
              {
                v380 = *v53;
                if (*v53)
                {
                  if (v40)
                  {
                    v381 = *v95 * v380 + ((*v95 * v380) >> 8) + 1;
                    if (!BYTE1(v381))
                      goto LABEL_251;
                    v380 = v381 >> 8;
                  }
                  v382 = (float)v380 * 0.0039216;
                  _H0 = *v378;
                  __asm { FCVT            S0, H0 }
                  _S0 = v382 * _S0;
                  __asm
                  {
                    FCVT            H2, S0
                    FCVT            S0, H2
                  }
                  if (_S0 > 0.0)
                  {
                    _H3 = *(v378 - 1);
                    __asm { FCVT            S3, H3 }
                    _S1 = v382 * _S3;
                    __asm { FCVT            H1, S1 }
                    _S3 = 1.0;
                    if (!v57)
                      goto LABEL_243;
                    _H3 = *v28;
                    __asm { FCVT            S3, H3 }
                    if (_S3 > 0.0)
                    {
LABEL_243:
                      _H2 = *v31;
                      __asm
                      {
                        FCVT            S2, H2
                        FCVT            S1, H1
                      }
                      v397 = _S1 * _S2;
                      v398 = (float)(_S1 * _S2) + (float)(_S2 * (float)(1.0 - _S0));
                      if (_S0 == 1.0)
                        v398 = v397;
                      _S1 = v398 + (float)(_S1 * (float)(1.0 - _S3));
                      if (_S3 == 1.0)
                        _S1 = v398;
                      __asm { FCVT            H1, S1 }
                      if (!v57)
                      {
                        *v31 = _H1;
                        goto LABEL_251;
                      }
                      _S0 = (float)(_S3 + _S0) - (float)(_S3 * _S0);
                      __asm { FCVT            H2, S0 }
                    }
                    *v31 = _H1;
                    *v28 = _H2;
                  }
                }
LABEL_251:
                ++v53;
                v95 += v40 != 0;
                ++v31;
                v378 += 2;
                v28 = (_WORD *)((char *)v28 + v47);
                if (!--v379)
                  goto LABEL_496;
              }
            case 14:
              v401 = v52 + 1;
              v402 = v4;
              v95 = v40;
              while (1)
              {
                v403 = *v53;
                if (*v53)
                {
                  if (v40)
                  {
                    v404 = *v95 * v403 + ((*v95 * v403) >> 8) + 1;
                    if (!BYTE1(v404))
                      goto LABEL_265;
                    v403 = v404 >> 8;
                  }
                  v405 = (float)v403 * 0.0039216;
                  _H1 = *v401;
                  __asm { FCVT            S1, H1 }
                  _S1 = v405 * _S1;
                  __asm
                  {
                    FCVT            H1, S1
                    FCVT            S2, H1
                  }
                  if (_S2 > 0.0)
                  {
                    _H3 = *(v401 - 1);
                    __asm { FCVT            S3, H3 }
                    _S0 = v405 * _S3;
                    __asm { FCVT            H0, S0 }
                    _S3 = 1.0;
                    if (!v57)
                      goto LABEL_261;
                    _H3 = *v28;
                    __asm { FCVT            S3, H3 }
                    if (_S3 > 0.0)
                    {
LABEL_261:
                      _H1 = *v31;
                      __asm
                      {
                        FCVT            S1, H1
                        FCVT            S0, H0
                      }
                      _S0 = _S1 + (float)(_S0 * (float)(1.0 - _S1));
                      __asm { FCVT            H0, S0 }
                      if (!v57)
                      {
                        *v31 = _H0;
                        goto LABEL_265;
                      }
                      _S1 = (float)(_S3 + _S2) - (float)(_S3 * _S2);
                      __asm { FCVT            H1, S1 }
                    }
                    *v31 = _H0;
                    *v28 = _H1;
                  }
                }
LABEL_265:
                ++v53;
                v95 += v40 != 0;
                ++v31;
                v401 += 2;
                v28 = (_WORD *)((char *)v28 + v47);
                if (!--v402)
                  goto LABEL_496;
              }
            case 15:
              v789 = v36;
              v788 = v46;
              v422 = v52 + 1;
              v423 = v4;
              v424 = v40;
              while (1)
              {
                v425 = *v53;
                if (*v53)
                {
                  if (v40)
                  {
                    v426 = *v424 * v425 + ((*v424 * v425) >> 8) + 1;
                    if (!BYTE1(v426))
                      goto LABEL_281;
                    v425 = v426 >> 8;
                  }
                  v427 = (float)v425 * *((float *)v92 + 159);
                  _H1 = *v422;
                  __asm { FCVT            S1, H1 }
                  _S1 = v427 * _S1;
                  __asm
                  {
                    FCVT            H1, S1
                    FCVT            S3, H1
                  }
                  if (_S3 > 0.0)
                  {
                    _H2 = *(v422 - 1);
                    __asm { FCVT            S2, H2 }
                    _Q0.n128_f32[0] = v427 * _Q2.n128_f32[0];
                    __asm { FCVT            H2, S0 }
                    if (v57)
                    {
                      _H0 = *v28;
                      __asm { FCVT            S4, H0 }
                      if (_S4 <= 0.0)
                      {
LABEL_279:
                        *v31 = _Q2.n128_u16[0];
                        *v28 = _H1;
                        goto LABEL_281;
                      }
                    }
                    else
                    {
                      _S4 = 1.0;
                    }
                    v436 = v92;
                    _Q0.n128_u16[0] = *v31;
                    _Q0.n128_u16[0] = PDAoverlayPDA(_Q0, _S4, _Q2, _S3);
                    v57 = v794;
                    _Q2.n128_u16[0] = _Q0.n128_u16[0];
                    if (!(_DWORD)v794)
                    {
                      *v31 = _Q0.n128_u16[0];
                      v92 = v436;
                      v4 = v790;
                      goto LABEL_281;
                    }
                    v92 = v436;
                    v4 = v790;
                    goto LABEL_279;
                  }
                }
LABEL_281:
                ++v53;
                v424 += v40 != 0;
                ++v31;
                v422 += 2;
                v28 = (_WORD *)((char *)v28 + v47);
                if (!--v423)
                  goto LABEL_386;
              }
            case 16:
              v437 = v52 + 1;
              v438 = v4;
              v95 = v40;
              while (1)
              {
                v439 = *v53;
                if (*v53)
                {
                  if (v40)
                  {
                    v440 = *v95 * v439 + ((*v95 * v439) >> 8) + 1;
                    if (!BYTE1(v440))
                      goto LABEL_301;
                    v439 = v440 >> 8;
                  }
                  v441 = (float)v439 * 0.0039216;
                  _H0 = *v437;
                  __asm { FCVT            S0, H0 }
                  _S0 = v441 * _S0;
                  __asm
                  {
                    FCVT            H2, S0
                    FCVT            S0, H2
                  }
                  if (_S0 > 0.0)
                  {
                    _H3 = *(v437 - 1);
                    __asm { FCVT            S3, H3 }
                    _S1 = v441 * _S3;
                    __asm { FCVT            H1, S1 }
                    _S3 = 1.0;
                    if (!v57)
                      goto LABEL_291;
                    _H3 = *v28;
                    __asm { FCVT            S3, H3 }
                    if (_S3 > 0.0)
                    {
LABEL_291:
                      _H2 = *v31;
                      __asm
                      {
                        FCVT            S2, H2
                        FCVT            S1, H1
                      }
                      v456 = _S0 * _S2;
                      if ((float)(_S3 * _S1) < (float)(_S0 * _S2))
                        v456 = _S3 * _S1;
                      v457 = v456 + (float)(_S2 * (float)(1.0 - _S0));
                      if (_S0 == 1.0)
                        v457 = v456;
                      _S1 = v457 + (float)(_S1 * (float)(1.0 - _S3));
                      if (_S3 == 1.0)
                        _S1 = v457;
                      __asm { FCVT            H1, S1 }
                      if (!v57)
                      {
                        *v31 = _H1;
                        goto LABEL_301;
                      }
                      _S0 = (float)(_S3 + _S0) - (float)(_S3 * _S0);
                      __asm { FCVT            H2, S0 }
                    }
                    *v31 = _H1;
                    *v28 = _H2;
                  }
                }
LABEL_301:
                ++v53;
                v95 += v40 != 0;
                ++v31;
                v437 += 2;
                v28 = (_WORD *)((char *)v28 + v47);
                if (!--v438)
                  goto LABEL_496;
              }
            case 17:
              v460 = v52 + 1;
              v461 = v4;
              v95 = v40;
              while (1)
              {
                v462 = *v53;
                if (*v53)
                {
                  if (v40)
                  {
                    v463 = *v95 * v462 + ((*v95 * v462) >> 8) + 1;
                    if (!BYTE1(v463))
                      goto LABEL_321;
                    v462 = v463 >> 8;
                  }
                  v464 = (float)v462 * 0.0039216;
                  _H0 = *v460;
                  __asm { FCVT            S0, H0 }
                  _S0 = v464 * _S0;
                  __asm
                  {
                    FCVT            H2, S0
                    FCVT            S0, H2
                  }
                  if (_S0 > 0.0)
                  {
                    _H3 = *(v460 - 1);
                    __asm { FCVT            S3, H3 }
                    _S1 = v464 * _S3;
                    __asm { FCVT            H1, S1 }
                    _S3 = 1.0;
                    if (!v57)
                      goto LABEL_311;
                    _H3 = *v28;
                    __asm { FCVT            S3, H3 }
                    if (_S3 > 0.0)
                    {
LABEL_311:
                      _H2 = *v31;
                      __asm
                      {
                        FCVT            S2, H2
                        FCVT            S1, H1
                      }
                      v479 = _S0 * _S2;
                      if ((float)(_S3 * _S1) > (float)(_S0 * _S2))
                        v479 = _S3 * _S1;
                      v480 = v479 + (float)(_S2 * (float)(1.0 - _S0));
                      if (_S0 == 1.0)
                        v480 = v479;
                      _S1 = v480 + (float)(_S1 * (float)(1.0 - _S3));
                      if (_S3 == 1.0)
                        _S1 = v480;
                      __asm { FCVT            H1, S1 }
                      if (!v57)
                      {
                        *v31 = _H1;
                        goto LABEL_321;
                      }
                      _S0 = (float)(_S3 + _S0) - (float)(_S3 * _S0);
                      __asm { FCVT            H2, S0 }
                    }
                    *v31 = _H1;
                    *v28 = _H2;
                  }
                }
LABEL_321:
                ++v53;
                v95 += v40 != 0;
                ++v31;
                v460 += 2;
                v28 = (_WORD *)((char *)v28 + v47);
                if (!--v461)
                  goto LABEL_496;
              }
            case 18:
              v789 = v36;
              v788 = v46;
              v483 = v52 + 1;
              v484 = v4;
              v424 = v40;
              while (1)
              {
                v485 = *v53;
                if (*v53)
                {
                  if (v40)
                  {
                    v486 = *v424 * v485 + ((*v424 * v485) >> 8) + 1;
                    if (!BYTE1(v486))
                      goto LABEL_337;
                    v485 = v486 >> 8;
                  }
                  v487 = (float)v485 * *((float *)v92 + 159);
                  _H1 = *v483;
                  __asm { FCVT            S1, H1 }
                  _S1 = v487 * _S1;
                  __asm
                  {
                    FCVT            H1, S1
                    FCVT            S3, H1
                  }
                  if (_S3 > 0.0)
                  {
                    _H2 = *(v483 - 1);
                    __asm { FCVT            S2, H2 }
                    _Q0.n128_f32[0] = v487 * _Q2.n128_f32[0];
                    __asm { FCVT            H2, S0 }
                    if (v57)
                    {
                      _H0 = *v28;
                      __asm { FCVT            S4, H0 }
                      if (_S4 <= 0.0)
                      {
LABEL_335:
                        *v31 = _Q2.n128_u16[0];
                        *v28 = _H1;
                        goto LABEL_337;
                      }
                    }
                    else
                    {
                      _S4 = 1.0;
                    }
                    v496 = v92;
                    _Q0.n128_u16[0] = *v31;
                    _Q0.n128_u16[0] = PDAcolordodgePDA(_Q0, _S4, _Q2, _S3);
                    v57 = v794;
                    _Q2.n128_u16[0] = _Q0.n128_u16[0];
                    if (!(_DWORD)v794)
                    {
                      *v31 = _Q0.n128_u16[0];
                      v92 = v496;
                      v4 = v790;
                      goto LABEL_337;
                    }
                    v92 = v496;
                    v4 = v790;
                    goto LABEL_335;
                  }
                }
LABEL_337:
                ++v53;
                v424 += v40 != 0;
                ++v31;
                v483 += 2;
                v28 = (_WORD *)((char *)v28 + v47);
                if (!--v484)
                  goto LABEL_386;
              }
            case 19:
              v789 = v36;
              v788 = v46;
              v497 = v52 + 1;
              v498 = v4;
              v424 = v40;
              while (1)
              {
                v499 = *v53;
                if (*v53)
                {
                  if (v40)
                  {
                    v500 = *v424 * v499 + ((*v424 * v499) >> 8) + 1;
                    if (!BYTE1(v500))
                      goto LABEL_353;
                    v499 = v500 >> 8;
                  }
                  v501 = (float)v499 * *((float *)v92 + 159);
                  _H1 = *v497;
                  __asm { FCVT            S1, H1 }
                  _S1 = v501 * _S1;
                  __asm
                  {
                    FCVT            H1, S1
                    FCVT            S3, H1
                  }
                  if (_S3 > 0.0)
                  {
                    _H2 = *(v497 - 1);
                    __asm { FCVT            S2, H2 }
                    _Q0.n128_f32[0] = v501 * _Q2.n128_f32[0];
                    __asm { FCVT            H2, S0 }
                    if (v57)
                    {
                      _H0 = *v28;
                      __asm { FCVT            S4, H0 }
                      if (_S4 <= 0.0)
                      {
LABEL_351:
                        *v31 = _Q2.n128_u16[0];
                        *v28 = _H1;
                        goto LABEL_353;
                      }
                    }
                    else
                    {
                      _S4 = 1.0;
                    }
                    v510 = v92;
                    _Q0.n128_u16[0] = *v31;
                    _Q0.n128_u16[0] = PDAcolorburnPDA(_Q0, _S4, _Q2, _S3);
                    v57 = v794;
                    _Q2.n128_u16[0] = _Q0.n128_u16[0];
                    if (!(_DWORD)v794)
                    {
                      *v31 = _Q0.n128_u16[0];
                      v92 = v510;
                      v4 = v790;
                      goto LABEL_353;
                    }
                    v92 = v510;
                    v4 = v790;
                    goto LABEL_351;
                  }
                }
LABEL_353:
                ++v53;
                v424 += v40 != 0;
                ++v31;
                v497 += 2;
                v28 = (_WORD *)((char *)v28 + v47);
                if (!--v498)
                  goto LABEL_386;
              }
            case 20:
              v789 = v36;
              v788 = v46;
              v511 = v52 + 1;
              v512 = v4;
              v424 = v40;
              while (1)
              {
                v513 = *v53;
                if (*v53)
                {
                  if (v40)
                  {
                    v514 = *v424 * v513 + ((*v424 * v513) >> 8) + 1;
                    if (!BYTE1(v514))
                      goto LABEL_369;
                    v513 = v514 >> 8;
                  }
                  v515 = (float)v513 * *((float *)v92 + 159);
                  _H1 = *v511;
                  __asm { FCVT            S1, H1 }
                  _S1 = v515 * _S1;
                  __asm
                  {
                    FCVT            H1, S1
                    FCVT            S3, H1
                  }
                  if (_S3 > 0.0)
                  {
                    _H2 = *(v511 - 1);
                    __asm { FCVT            S2, H2 }
                    _Q0.n128_f32[0] = v515 * _Q2.n128_f32[0];
                    __asm { FCVT            H2, S0 }
                    if (v57)
                    {
                      _H0 = *v28;
                      __asm { FCVT            S4, H0 }
                      if (_S4 <= 0.0)
                      {
LABEL_367:
                        *v31 = _Q2.n128_u16[0];
                        *v28 = _H1;
                        goto LABEL_369;
                      }
                    }
                    else
                    {
                      _S4 = 1.0;
                    }
                    v524 = v92;
                    _Q0.n128_u16[0] = *v31;
                    _Q0.n128_u16[0] = PDAsoftlightPDA(_Q0, _S4, _Q2, _S3);
                    v57 = v794;
                    _Q2.n128_u16[0] = _Q0.n128_u16[0];
                    if (!(_DWORD)v794)
                    {
                      *v31 = _Q0.n128_u16[0];
                      v92 = v524;
                      v4 = v790;
                      goto LABEL_369;
                    }
                    v92 = v524;
                    v4 = v790;
                    goto LABEL_367;
                  }
                }
LABEL_369:
                ++v53;
                v424 += v40 != 0;
                ++v31;
                v511 += 2;
                v28 = (_WORD *)((char *)v28 + v47);
                if (!--v512)
                  goto LABEL_386;
              }
            case 21:
              v789 = v36;
              v788 = v46;
              v525 = v52 + 1;
              v526 = v4;
              v424 = v40;
              while (1)
              {
                v527 = *v53;
                if (*v53)
                {
                  if (v40)
                  {
                    v528 = *v424 * v527 + ((*v424 * v527) >> 8) + 1;
                    if (!BYTE1(v528))
                      goto LABEL_385;
                    v527 = v528 >> 8;
                  }
                  v529 = (float)v527 * *((float *)v92 + 159);
                  _H1 = *v525;
                  __asm { FCVT            S1, H1 }
                  _S1 = v529 * _S1;
                  __asm
                  {
                    FCVT            H1, S1
                    FCVT            S3, H1
                  }
                  if (_S3 > 0.0)
                  {
                    _H2 = *(v525 - 1);
                    __asm { FCVT            S2, H2 }
                    _Q0.n128_f32[0] = v529 * _Q2.n128_f32[0];
                    __asm { FCVT            H2, S0 }
                    if (v57)
                    {
                      _H0 = *v28;
                      __asm { FCVT            S4, H0 }
                      if (_S4 <= 0.0)
                      {
LABEL_383:
                        *v31 = _Q2.n128_u16[0];
                        *v28 = _H1;
                        goto LABEL_385;
                      }
                    }
                    else
                    {
                      _S4 = 1.0;
                    }
                    v538 = v92;
                    _Q0.n128_u16[0] = *v31;
                    _Q0.n128_u16[0] = PDAhardlightPDA(_Q0, _S4, _Q2, _S3);
                    v57 = v794;
                    _Q2.n128_u16[0] = _Q0.n128_u16[0];
                    if (!(_DWORD)v794)
                    {
                      *v31 = _Q0.n128_u16[0];
                      v92 = v538;
                      v4 = v790;
                      goto LABEL_385;
                    }
                    v92 = v538;
                    v4 = v790;
                    goto LABEL_383;
                  }
                }
LABEL_385:
                ++v53;
                v424 += v40 != 0;
                ++v31;
                v525 += 2;
                v28 = (_WORD *)((char *)v28 + v47);
                if (!--v526)
                {
LABEL_386:
                  v40 = &v424[v791];
                  v31 += v792;
                  v28 += v793;
                  v35 = v787;
                  v46 = v788;
                  v26 = v785;
                  v36 = v789;
                  goto LABEL_498;
                }
              }
            case 22:
              v539 = v52 + 1;
              v540 = v4;
              v95 = v40;
              while (1)
              {
                v541 = *v53;
                if (*v53)
                {
                  if (v40)
                  {
                    v542 = *v95 * v541 + ((*v95 * v541) >> 8) + 1;
                    if (!BYTE1(v542))
                      goto LABEL_403;
                    v541 = v542 >> 8;
                  }
                  v543 = (float)v541 * 0.0039216;
                  _H0 = *v539;
                  __asm { FCVT            S0, H0 }
                  _S0 = v543 * _S0;
                  __asm
                  {
                    FCVT            H2, S0
                    FCVT            S0, H2
                  }
                  if (_S0 > 0.0)
                  {
                    _H3 = *(v539 - 1);
                    __asm { FCVT            S3, H3 }
                    _S1 = v543 * _S3;
                    __asm { FCVT            H1, S1 }
                    if (v57)
                    {
                      _H3 = *v28;
                      __asm { FCVT            S3, H3 }
                      if (_S3 <= 0.0)
                      {
LABEL_401:
                        *v31 = _H1;
                        *v28 = _H2;
                        goto LABEL_403;
                      }
                    }
                    else
                    {
                      _S3 = 1.0;
                    }
                    _H2 = *v31;
                    __asm
                    {
                      FCVT            S2, H2
                      FCVT            S1, H1
                    }
                    v558 = _S1 + _S2;
                    v559 = _S0 * _S2;
                    v560 = _S3 * _S1;
                    v561 = v558 - v559;
                    v562 = v559 - v560;
                    v563 = v561 - v560;
                    if (v562 < 0.0)
                      v562 = -v562;
                    _S1 = v563 + v562;
                    __asm { FCVT            H1, S1 }
                    if (!v57)
                    {
                      *v31 = _H1;
                      goto LABEL_403;
                    }
                    _S0 = (float)(_S3 + _S0) - (float)(_S3 * _S0);
                    __asm { FCVT            H2, S0 }
                    goto LABEL_401;
                  }
                }
LABEL_403:
                ++v53;
                v95 += v40 != 0;
                ++v31;
                v539 += 2;
                v28 = (_WORD *)((char *)v28 + v47);
                if (!--v540)
                  goto LABEL_496;
              }
            case 23:
              v566 = v52 + 1;
              v567 = v4;
              v95 = v40;
              while (1)
              {
                v568 = *v53;
                if (*v53)
                {
                  if (v40)
                  {
                    v569 = *v95 * v568 + ((*v95 * v568) >> 8) + 1;
                    if (!BYTE1(v569))
                      goto LABEL_419;
                    v568 = v569 >> 8;
                  }
                  v570 = (float)v568 * 0.0039216;
                  _H0 = *v566;
                  __asm { FCVT            S0, H0 }
                  _S0 = v570 * _S0;
                  __asm
                  {
                    FCVT            H2, S0
                    FCVT            S0, H2
                  }
                  if (_S0 > 0.0)
                  {
                    _H3 = *(v566 - 1);
                    __asm { FCVT            S3, H3 }
                    _S1 = v570 * _S3;
                    __asm { FCVT            H1, S1 }
                    if (v57)
                    {
                      _H3 = *v28;
                      __asm { FCVT            S3, H3 }
                      if (_S3 <= 0.0)
                      {
LABEL_417:
                        *v31 = _H1;
                        *v28 = _H2;
                        goto LABEL_419;
                      }
                    }
                    else
                    {
                      _S3 = 1.0;
                    }
                    _H2 = *v31;
                    __asm
                    {
                      FCVT            S2, H2
                      FCVT            S1, H1
                    }
                    _S1 = (float)(_S1 + _S2) + (float)((float)(_S1 * _S2) * -2.0);
                    __asm { FCVT            H1, S1 }
                    if (!v57)
                    {
                      *v31 = _H1;
                      goto LABEL_419;
                    }
                    _S0 = (float)(_S3 + _S0) - (float)(_S3 * _S0);
                    __asm { FCVT            H2, S0 }
                    goto LABEL_417;
                  }
                }
LABEL_419:
                ++v53;
                v95 += v40 != 0;
                ++v31;
                v566 += 2;
                v28 = (_WORD *)((char *)v28 + v47);
                if (!--v567)
                  goto LABEL_496;
              }
            case 24:
              v587 = v52 + 1;
              v588 = v4;
              v95 = v40;
              while (1)
              {
                v589 = *v53;
                if (*v53)
                {
                  if (v40)
                  {
                    v590 = *v95 * v589 + ((*v95 * v589) >> 8) + 1;
                    if (!BYTE1(v590))
                      goto LABEL_439;
                    v589 = v590 >> 8;
                  }
                  v591 = (float)v589 * 0.0039216;
                  _H0 = *v587;
                  __asm { FCVT            S0, H0 }
                  _S0 = v591 * _S0;
                  __asm
                  {
                    FCVT            H2, S0
                    FCVT            S0, H2
                  }
                  if (_S0 > 0.0)
                  {
                    _H3 = *(v587 - 1);
                    __asm { FCVT            S3, H3 }
                    _S1 = v591 * _S3;
                    __asm { FCVT            H1, S1 }
                    _S3 = 1.0;
                    if (!v57)
                      goto LABEL_429;
                    _H3 = *v28;
                    __asm { FCVT            S3, H3 }
                    if (_S3 > 0.0)
                    {
LABEL_429:
                      _H2 = *v31;
                      __asm
                      {
                        FCVT            S2, H2
                        FCVT            S1, H1
                      }
                      v606 = _S2 - (float)(_S0 * _S2);
                      if (_S0 != 1.0)
                        _S2 = _S0 * _S2;
                      v607 = 0.0;
                      if (_S0 != 1.0)
                        v607 = v606;
                      v608 = (float)(v607 + _S1) - (float)(_S3 * _S1);
                      if (_S3 == 1.0)
                        v608 = v607;
                      _S1 = _S2 + v608;
                      __asm { FCVT            H1, S1 }
                      if (!v57)
                      {
                        *v31 = _H1;
                        goto LABEL_439;
                      }
                      _S0 = (float)(_S3 + _S0) - (float)(_S3 * _S0);
                      __asm { FCVT            H2, S0 }
                    }
                    *v31 = _H1;
                    *v28 = _H2;
                  }
                }
LABEL_439:
                ++v53;
                v95 += v40 != 0;
                ++v31;
                v587 += 2;
                v28 = (_WORD *)((char *)v28 + v47);
                if (!--v588)
                  goto LABEL_496;
              }
            case 25:
              v611 = v52 + 1;
              v95 = v40;
              v612 = v4;
              while (1)
              {
                v613 = *v53;
                if (*v53)
                {
                  if (v40)
                  {
                    v614 = *v95 * v613 + ((*v95 * v613) >> 8) + 1;
                    if (!BYTE1(v614))
                      goto LABEL_459;
                    v613 = v614 >> 8;
                  }
                  v615 = (float)v613 * 0.0039216;
                  _H0 = *v611;
                  __asm { FCVT            S0, H0 }
                  _S0 = v615 * _S0;
                  __asm
                  {
                    FCVT            H2, S0
                    FCVT            S0, H2
                  }
                  if (_S0 > 0.0)
                  {
                    _H3 = *(v611 - 1);
                    __asm { FCVT            S3, H3 }
                    _S1 = v615 * _S3;
                    __asm { FCVT            H1, S1 }
                    _S3 = 1.0;
                    if (!v57)
                      goto LABEL_449;
                    _H3 = *v28;
                    __asm { FCVT            S3, H3 }
                    if (_S3 > 0.0)
                    {
LABEL_449:
                      _H2 = *v31;
                      __asm
                      {
                        FCVT            S2, H2
                        FCVT            S1, H1
                      }
                      v630 = _S2 - (float)(_S0 * _S2);
                      if (_S0 != 1.0)
                        _S2 = _S0 * _S2;
                      v631 = 0.0;
                      if (_S0 != 1.0)
                        v631 = v630;
                      v632 = (float)(v631 + _S1) - (float)(_S3 * _S1);
                      if (_S3 == 1.0)
                        v632 = v631;
                      _S1 = _S2 + v632;
                      __asm { FCVT            H1, S1 }
                      if (!v57)
                      {
                        *v31 = _H1;
                        goto LABEL_459;
                      }
                      _S0 = (float)(_S3 + _S0) - (float)(_S3 * _S0);
                      __asm { FCVT            H2, S0 }
                    }
                    *v31 = _H1;
                    *v28 = _H2;
                  }
                }
LABEL_459:
                ++v53;
                v95 += v40 != 0;
                ++v31;
                v611 += 2;
                v28 = (_WORD *)((char *)v28 + v47);
                if (!--v612)
                  goto LABEL_496;
              }
            case 26:
              v635 = v52 + 1;
              v95 = v40;
              v636 = v4;
              while (1)
              {
                v637 = *v53;
                if (*v53)
                {
                  if (v40)
                  {
                    v638 = *v95 * v637 + ((*v95 * v637) >> 8) + 1;
                    if (!BYTE1(v638))
                      goto LABEL_477;
                    v637 = v638 >> 8;
                  }
                  v639 = (float)v637 * 0.0039216;
                  _H0 = *v635;
                  __asm { FCVT            S0, H0 }
                  _S0 = v639 * _S0;
                  __asm
                  {
                    FCVT            H2, S0
                    FCVT            S0, H2
                  }
                  if (_S0 > 0.0)
                  {
                    _H3 = *(v635 - 1);
                    __asm { FCVT            S3, H3 }
                    _S1 = v639 * _S3;
                    __asm { FCVT            H1, S1 }
                    _S3 = 1.0;
                    if (!v57)
                      goto LABEL_469;
                    _H3 = *v28;
                    __asm { FCVT            S3, H3 }
                    if (_S3 > 0.0)
                    {
LABEL_469:
                      _H2 = *v31;
                      __asm
                      {
                        FCVT            S2, H2
                        FCVT            S1, H1
                      }
                      v654 = _S1 - (float)(_S3 * _S1);
                      if (_S3 == 1.0)
                        v654 = 0.0;
                      v655 = (float)(v654 + _S2) - (float)(_S0 * _S2);
                      if (_S0 != 1.0)
                      {
                        _S2 = _S0 * _S2;
                        v654 = v655;
                      }
                      _S1 = _S2 + v654;
                      __asm { FCVT            H1, S1 }
                      if (!v57)
                      {
                        *v31 = _H1;
                        goto LABEL_477;
                      }
                      _S0 = (float)(_S3 + _S0) - (float)(_S3 * _S0);
                      __asm { FCVT            H2, S0 }
                    }
                    *v31 = _H1;
                    *v28 = _H2;
                  }
                }
LABEL_477:
                ++v53;
                v95 += v40 != 0;
                ++v31;
                v635 += 2;
                v28 = (_WORD *)((char *)v28 + v47);
                if (!--v636)
                  goto LABEL_496;
              }
            case 27:
              v658 = v52 + 1;
              v95 = v40;
              v659 = v4;
              break;
            default:
              goto LABEL_498;
          }
          break;
        }
        while (2)
        {
          v660 = *v53;
          if (*v53)
          {
            if (!v40)
              goto LABEL_484;
            v661 = *v95 * v660 + ((*v95 * v660) >> 8) + 1;
            if (BYTE1(v661))
            {
              v660 = v661 >> 8;
LABEL_484:
              v662 = (float)v660 * 0.0039216;
              _H0 = *v658;
              __asm { FCVT            S0, H0 }
              _S0 = v662 * _S0;
              __asm
              {
                FCVT            H2, S0
                FCVT            S0, H2
              }
              if (_S0 > 0.0)
              {
                _H3 = *(v658 - 1);
                __asm { FCVT            S3, H3 }
                _S1 = v662 * _S3;
                __asm { FCVT            H1, S1 }
                _S3 = 1.0;
                if (!v57)
                  goto LABEL_487;
                _H3 = *v28;
                __asm { FCVT            S3, H3 }
                if (_S3 <= 0.0)
                {
LABEL_493:
                  *v31 = _H1;
                  *v28 = _H2;
                }
                else
                {
LABEL_487:
                  _H2 = *v31;
                  __asm
                  {
                    FCVT            S1, H1
                    FCVT            S2, H2
                  }
                  v677 = _S2 - (float)(_S0 * _S2);
                  if (_S0 == 1.0)
                    v677 = 0.0;
                  v678 = (float)(v677 + _S1) - (float)(_S3 * _S1);
                  if (_S3 != 1.0)
                  {
                    _S1 = _S3 * _S1;
                    v677 = v678;
                  }
                  _S1 = _S1 + v677;
                  __asm { FCVT            H1, S1 }
                  if (v57)
                  {
                    _S0 = (float)(_S3 + _S0) - (float)(_S3 * _S0);
                    __asm { FCVT            H2, S0 }
                    goto LABEL_493;
                  }
                  *v31 = _H1;
                }
              }
            }
          }
          ++v53;
          v95 += v40 != 0;
          ++v31;
          v658 += 2;
          v28 = (_WORD *)((char *)v28 + v47);
          if (!--v659)
          {
LABEL_496:
            v40 = &v95[v791];
            goto LABEL_497;
          }
          continue;
        }
      }
      v777 = shape_enum_clip_scan((uint64_t)v796, (_DWORD *)v40 - 4);
      v43 = v797;
      if (!v777)
        goto LABEL_590;
    }
    v46 -= v776;
    if (v46 < 1)
      break;
    v778 = v26[17];
    v789 += v26[16] * v776;
    v37 += v778 * v776;
    v31 += v781 * v776;
    v779 = v774 * v776;
    if (!(_DWORD)v794)
      v779 = 0;
    v28 += v779;
    v43 = v775;
  }
LABEL_590:
  if (v796)
    free(v796);
LABEL_592:
  if (v782)
    free(v782);
}

uint64_t Wf16_shade(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  _BOOL8 v8;
  int v9;
  __n128 v11;
  void *v12;
  void *v13;
  int v14;
  int v15;
  uint64_t v16;
  void *v17;
  _BYTE v18[36];
  char v19;
  _QWORD v20[483];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v5 = v4;
  v6 = (uint64_t)v3;
  v20[482] = *MEMORY[0x1E0C80C00];
  v7 = *(int **)v2;
  v8 = !*((_QWORD *)v3 + 12) && !*(_QWORD *)(v4 + 72) && *(float *)(v4 + 4) >= 1.0;
  v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 56) + 16 * *v3 + 8 * v8 + 4 * (*((_QWORD *)v3 + 6) == 0));
  if (v9 > 27)
    return 0xFFFFFFFFLL;
  if (*((int *)v3 + 1) < 1 || *((int *)v3 + 2) < 1)
    return 0;
  if ((int)_blt_shade_initialize((uint64_t)v3, v4, (uint64_t)&v13, (uint64_t)v18) < 1)
    return 0xFFFFFFFFLL;
  if ((*(_DWORD *)v5 & 0xF000000) != 0x1000000)
  {
    if (v13)
      goto LABEL_22;
    return 0xFFFFFFFFLL;
  }
  if (*(_QWORD *)(v5 + 16))
  {
    v12 = Wf16_shade_radial_W;
  }
  else if (*(_QWORD *)(v5 + 24))
  {
    v12 = Wf16_shade_conic_W;
  }
  else if (v16 < 2)
  {
    v12 = Wf16_shade_axial_W;
  }
  else
  {
    v12 = Wf16_shade_custom_W;
  }
  v13 = v12;
LABEL_22:
  v14 = *v7;
  v15 = v14;
  Wf16_image_mark(v6, (uint64_t)&v13, v9, v11);
  if (v17 && (v17 < &v19 || v20 < v17))
    free(v17);
  return 1;
}

void Wf16_shade_radial_W(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float *v5;
  float v6;
  float v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  char *v23;
  _WORD *v24;
  uint64_t v25;
  float *v26;
  float *v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  int v32;
  unsigned int v33;
  float v34;
  float v35;
  float v36;
  float v37;
  _WORD *i;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  BOOL v46;
  float v47;
  unsigned int v49;
  float v50;
  uint64_t v51;
  float v53;
  char v60;
  float v61;
  float v62;
  float v63;
  uint64_t v64;
  _WORD *v65;
  int v66;
  float v67;
  float v68;
  float v69;
  float v71;
  float v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  float v79;
  uint64_t v81;
  float v83;
  uint64_t v84;
  float v85;
  float v88;
  char v95;
  float v97;
  uint64_t v101;
  float v103;
  char v106;
  uint64_t v107;
  float v109;
  int v113;

  v5 = *(float **)(a1 + 400);
  v6 = *(float *)(a1 + 280);
  v7 = *(float *)(a1 + 284);
  v8 = *(float **)(a1 + 272);
  v9 = v8[1];
  v10 = v9 * (float)a2;
  v11 = v9 * (float)a3;
  v12 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v11) + (float)(v6 * v10));
  v13 = *(float *)(a1 + 300) + (float)((float)(v11 * *(float *)(a1 + 292)) + (float)(v7 * v10));
  v14 = *(float *)(a1 + 336);
  v15 = *(float *)(a1 + 344);
  v16 = *(float *)(a1 + 304);
  v17 = *(float *)(a1 + 308);
  v18 = *(unsigned int *)(a1 + 324);
  v19 = v5[2];
  v20 = v5[4];
  v21 = v5[5];
  v22 = v5[7];
  v25 = a1 + 144;
  v23 = *(char **)(a1 + 144);
  v24 = *(_WORD **)(v25 + 8);
  v26 = *(float **)(a1 + 384);
  if (*(_QWORD *)(a1 + 392))
    v27 = *(float **)(a1 + 392);
  else
    v27 = v8;
  v28 = *(_QWORD *)(a1 + 32);
  v29 = *(_QWORD *)(a1 + 40);
  if (v29)
    v8 = *(float **)(a1 + 40);
  if (v19 != 0.0 || v22 != 0.0 || v7 != 0.0)
  {
    v33 = *(_DWORD *)(a1 + 320);
    v34 = v5[3];
    v35 = v5[8];
    v36 = -v5[6];
    v37 = v17 - v16;
    for (i = v24 + 1; ; i += 2)
    {
      v39 = v36 + (float)((float)(v12 + v12) * v19);
      v40 = (float)((float)(v13 * v13) + (float)(v12 * v12)) - v22;
      if (v21 == 0.0)
      {
        v47 = v40 / v39;
      }
      else
      {
        v41 = (float)((float)(v21 * -4.0) * v40) + (float)(v39 * v39);
        if (v41 < 0.0)
          goto LABEL_49;
        v42 = sqrtf(v41);
        v43 = v35 * (float)(v39 - v42);
        v44 = v39 + v42;
        v45 = v35 * v44;
        v46 = (float)(v35 * v44) <= v43;
        if ((float)(v35 * v44) <= v43)
          v47 = v35 * v44;
        else
          v47 = v43;
        if (v46)
          v45 = v43;
        if (v45 < 0.0)
        {
          _NF = v45 < v34;
LABEL_30:
          v49 = v33;
          if (_NF)
            goto LABEL_49;
LABEL_31:
          if ((v49 & 0x80000000) == 0)
            goto LABEL_43;
          goto LABEL_49;
        }
        if (v45 <= 1.0)
        {
          v50 = v16 + (float)(v45 * v37);
          goto LABEL_42;
        }
        if ((v18 & 0x80000000) == 0)
        {
          v49 = v18;
          if (v45 <= v20)
          {
LABEL_43:
            v51 = v49;
            if (!v29)
              v51 = 0;
            _S25 = v8[v51];
            if (v29)
              v53 = v8[v51];
            else
              v53 = 1.0;
            _S26 = *(float *)(v28 + 4 * v49) * v53;
            goto LABEL_51;
          }
        }
      }
      if (v47 < 0.0)
      {
        _NF = v47 < v34;
        goto LABEL_30;
      }
      if (v47 > 1.0)
      {
        v49 = v18;
        if (v47 > v20)
          goto LABEL_49;
        goto LABEL_31;
      }
      v50 = v16 + (float)(v47 * v37);
LABEL_42:
      v49 = (int)(float)(v15 * (float)(v50 - v14));
      if ((v49 & 0x80000000) == 0)
        goto LABEL_43;
LABEL_49:
      if (!v26)
      {
        v60 = 0;
        goto LABEL_53;
      }
      _S25 = *v27;
      _S26 = *v27 * *v26;
LABEL_51:
      __asm { FCVT            H26, S26 }
      *(i - 1) = _H26;
      __asm { FCVT            H25, S25 }
      *i = _H25;
      v60 = -1;
LABEL_53:
      v12 = v6 + v12;
      v13 = v7 + v13;
      *v23++ = v60;
      if (!--a4)
        return;
    }
  }
  v30 = v13 * v13;
  v31 = -v21;
  if (v30 <= (float)-v21)
  {
    v61 = fabsf(v5[8]);
    v62 = v21 * -4.0;
    v63 = v17 - v16;
    if (v29)
      v64 = v18;
    else
      v64 = 0;
    v65 = v24 + 2;
    v66 = a4 + 2;
    while (1)
    {
      v67 = v30 + (float)(v12 * v12);
      v68 = v6 + v12;
      v69 = v30 + (float)(v68 * v68);
      if (v67 <= v31 || v69 <= v31)
      {
        v71 = sqrtf(v62 * v69);
        v72 = v61 * sqrtf(v62 * v67);
        v73 = v61 * v71;
        v74 = (int)(float)(v15 * (float)((float)(v16 + (float)(v72 * v63)) - v14));
        v75 = (int)(float)(v15 * (float)((float)(v16 + (float)((float)(v61 * v71) * v63)) - v14));
        if (v72 > 1.0 || v73 > 1.0)
        {
          if (v72 <= 1.0)
          {
            if ((v74 & 0x80000000) != 0)
              goto LABEL_100;
            if (v29)
              v77 = (int)(float)(v15 * (float)((float)(v16 + (float)(v72 * v63)) - v14));
            else
              v77 = 0;
          }
          else if (v72 > v20 || (v77 = v64, v74 = v18, (v18 & 0x80000000) != 0))
          {
LABEL_100:
            if (v26)
            {
              _S21 = *v27;
              _S22 = *v27 * *v26;
              goto LABEL_102;
            }
            v95 = 0;
LABEL_103:
            if (v73 <= 1.0)
            {
              if ((v75 & 0x80000000) != 0)
                goto LABEL_115;
              if (v29)
                v101 = v75;
              else
                v101 = 0;
            }
            else if (v73 > v20 || (v101 = v64, v75 = v18, (v18 & 0x80000000) != 0))
            {
LABEL_115:
              if (!v26)
                goto LABEL_122;
              _S20 = *v27;
              _S21 = *v27 * *v26;
              goto LABEL_117;
            }
            _S20 = v8[v101];
            if (v29)
              v103 = v8[v101];
            else
              v103 = 1.0;
            _S21 = *(float *)(v28 + 4 * v75) * v103;
LABEL_117:
            __asm { FCVT            H21, S21 }
            *v65 = _H21;
            __asm { FCVT            H20, S20 }
            goto LABEL_118;
          }
          _S21 = v8[v77];
          if (v29)
            v97 = v8[v77];
          else
            v97 = 1.0;
          _S22 = *(float *)(v28 + 4 * v74) * v97;
LABEL_102:
          __asm { FCVT            H22, S22 }
          *(v65 - 2) = _H22;
          __asm { FCVT            H21, S21 }
          *(v65 - 1) = _H21;
          v95 = -1;
          goto LABEL_103;
        }
        v81 = (int)v74;
        if (!v29)
          v81 = 0;
        _S20 = v8[v81];
        v83 = *(float *)(v28 + 4 * (int)v74);
        v84 = (int)v75;
        if (v29)
          v85 = v8[v81];
        else
          v85 = 1.0;
        _S21 = v83 * v85;
        if (!v29)
          v84 = 0;
        _S22 = v8[v84];
        if (v29)
          v88 = v8[v84];
        else
          v88 = 1.0;
        _S23 = *(float *)(v28 + 4 * (int)v75) * v88;
        __asm { FCVT            H21, S21 }
        *(v65 - 2) = _H21;
        __asm { FCVT            H20, S20 }
        *(v65 - 1) = _H20;
        __asm { FCVT            H20, S23 }
        *v65 = _H20;
        __asm { FCVT            H20, S22 }
      }
      else
      {
        if ((v18 & 0x80000000) != 0)
        {
          if (!v26)
          {
            v95 = 0;
LABEL_122:
            v106 = 0;
            goto LABEL_119;
          }
          _S20 = *v27;
          _S21 = *v27 * *v26;
        }
        else
        {
          _S20 = v8[v64];
          if (v29)
            v79 = v8[v64];
          else
            v79 = 1.0;
          _S21 = *(float *)(v28 + 4 * v18) * v79;
        }
        __asm { FCVT            H21, S21 }
        *(v65 - 2) = _H21;
        __asm { FCVT            H20, S20 }
        *(v65 - 1) = _H20;
        *v65 = _H21;
      }
      v95 = -1;
LABEL_118:
      v65[1] = _H20;
      v106 = -1;
LABEL_119:
      v12 = v6 + v68;
      *v23 = v95;
      v23[1] = v106;
      v23 += 2;
      v65 += 4;
      v66 -= 2;
      if (v66 <= 2)
        return;
    }
  }
  if (v26 || (v18 & 0x80000000) == 0)
  {
    if ((v18 & 0x80000000) != 0)
    {
      _S1 = *v27;
      _S0 = *v27 * *v26;
    }
    else
    {
      if (v29)
        v107 = v18;
      else
        v107 = 0;
      _S1 = v8[v107];
      v109 = 1.0;
      if (v29)
        v109 = v8[v107];
      _S0 = *(float *)(v28 + 4 * v18) * v109;
    }
    __asm
    {
      FCVT            H0, S0
      FCVT            H1, S1
    }
    v113 = a4 + 4;
    do
    {
      *v24 = _H0;
      v24[1] = _H1;
      v24[2] = _H0;
      v24[3] = _H1;
      v24[4] = _H0;
      v24[5] = _H1;
      v24[6] = _H0;
      v113 -= 4;
      v24[7] = _H1;
      v24 += 8;
      *(_DWORD *)v23 = -1;
      v23 += 4;
    }
    while (v113 > 4);
  }
  else
  {
    if (a4 >= 4)
      v32 = 4;
    else
      v32 = a4;
    bzero(v23, ((a4 - v32 + 3) & 0xFFFFFFFC) + 4);
  }
}

void Wf16_shade_conic_W(float32x2_t *a1, uint64_t a2, uint64_t a3, int a4, double a5, __n128 a6)
{
  float32x2_t v7;
  float v8;
  float v9;
  float v10;
  _WORD *v11;
  _BYTE *v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float v16;
  float v17;
  signed int v18;
  float v19;
  int v20;
  unsigned int v21;
  float v22;
  int v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  __n128 v38;

  v7 = a1[35];
  a6.n128_u64[0] = (unint64_t)vadd_f32(a1[37], vmla_n_f32(vmul_n_f32(a1[36], *(float *)(*(_QWORD *)&a1[34] + 4) * (float)a3), v7, *(float *)(*(_QWORD *)&a1[34] + 4) * (float)a2));
  v8 = a1[42].f32[0];
  v9 = a1[43].f32[0];
  v10 = a1[38].f32[0];
  v12 = (_BYTE *)a1[18];
  v11 = (_WORD *)a1[19];
  v13 = a1[4];
  v14 = a1[5];
  if (v14)
    v15 = a1[5];
  else
    v15 = a1[34];
  v16 = a1[38].f32[1] - v10;
  do
  {
    v38 = a6;
    v17 = v9
        * (float)((float)(v10 + (float)((float)((float)(atan2f(a6.n128_f32[1], a6.n128_f32[0]) * 0.15915) + 0.5) * v16))
                - v8);
    v18 = vcvtms_s32_f32(v17);
    v19 = ceilf(v17);
    v20 = (int)floorf(v17);
    v21 = vcvtms_s32_f32(v9 + v17);
    v22 = ceilf(v17 - v9);
    if (v17 < 0.0)
      v18 = v21;
    if (v17 > v9)
      v19 = v22;
    v23 = (int)v19;
    v24 = v18;
    if (!*(_QWORD *)&v14)
      v24 = 0;
    v25 = *(float *)(*(_QWORD *)&v13 + 4 * v18);
    v26 = v23;
    if (!*(_QWORD *)&v14)
      v26 = 0;
    v27 = v17 - (float)v20;
    if (v14)
      v28 = *(float *)(*(_QWORD *)&v15 + 4 * v24);
    else
      v28 = 1.0;
    v29 = v25 * v28;
    if (v14)
      v30 = *(float *)(*(_QWORD *)&v15 + 4 * v26);
    else
      v30 = 1.0;
    _S3 = *(float *)(*(_QWORD *)&v15 + 4 * v24)
        + (float)(v27 * (float)(*(float *)(*(_QWORD *)&v15 + 4 * v26) - *(float *)(*(_QWORD *)&v15 + 4 * v24)));
    _S0 = v29 + (float)(v27 * (float)((float)(*(float *)(*(_QWORD *)&v13 + 4 * v23) * v30) - v29));
    __asm
    {
      FCVT            H0, S0
      FCVT            H1, S3
    }
    *v11 = LOWORD(_S0);
    v11[1] = _H1;
    a6.n128_u64[1] = v38.n128_u64[1];
    a6.n128_u64[0] = (unint64_t)vadd_f32(v7, (float32x2_t)v38.n128_u64[0]);
    *v12++ = -1;
    v11 += 2;
    --a4;
  }
  while (a4);
}

uint64_t Wf16_shade_custom_W(uint64_t result, uint64_t a2, uint64_t a3, int a4, double a5, int32x4_t a6)
{
  uint64_t v6;
  float32x2_t v7;
  float32x4_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  char *v13;
  float *v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _WORD *v20;
  float32x4_t v21;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  char v35;

  v6 = *(_QWORD *)(result + 272);
  v7 = *(float32x2_t *)(result + 280);
  *(float32x2_t *)a6.i8 = vadd_f32(*(float32x2_t *)(result + 296), vmla_n_f32(vmul_n_f32(*(float32x2_t *)(result + 288), *(float *)(v6 + 4) * (float)a3), v7, *(float *)(v6 + 4) * (float)a2));
  v8 = *(float32x4_t *)(result + 304);
  v9 = *(float *)(result + 336);
  v10 = *(float *)(result + 348);
  v11 = *(float *)(result + 344);
  v12 = *(float *)(result + 356);
  v13 = *(char **)(result + 144);
  v14 = *(float **)(result + 384);
  v15 = *(float **)(result + 392);
  if (!v15)
    v15 = *(float **)(result + 272);
  v16 = *(_QWORD *)(result + 32);
  v17 = *(_QWORD *)(result + 40);
  v18 = *(_DWORD *)(result + 48);
  if (v17)
    v19 = *(_DWORD *)(result + 48);
  else
    v19 = 0;
  if (v17)
    v6 = *(_QWORD *)(result + 40);
  v20 = (_WORD *)(*(_QWORD *)(result + 152) + 2);
  do
  {
    v21 = (float32x4_t)vzip1q_s32(a6, a6);
    if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vtrn2_s16(vrev32_s16(vmovn_s32(vcgtq_f32(v8, v21))), vmovn_s32(vcgtq_f32(v21, v8))), 0xFuLL))) & 1) == 0)
    {
      v24 = (int)(float)(v12 * (float)(*(float *)&a6.i32[1] - v10));
      result = (int)(float)(v11 * (float)(*(float *)a6.i32 - v9));
      v25 = v16 + 4 * v18 * v24;
      v26 = (int)result;
      v27 = v6 + 4 * v19 * v24;
      if (!v17)
        v26 = 0;
      _S16 = *(float *)(v27 + 4 * v26);
      if (v17)
        v28 = *(float *)(v27 + 4 * v26);
      else
        v28 = 1.0;
      _S17 = *(float *)(v25 + 4 * (int)result) * v28;
      goto LABEL_18;
    }
    if (v14)
    {
      _S16 = *v15;
      _S17 = *v15 * *v14;
LABEL_18:
      __asm { FCVT            H17, S17 }
      *(v20 - 1) = _H17;
      __asm { FCVT            H16, S16 }
      *v20 = _H16;
      v35 = -1;
      goto LABEL_20;
    }
    v35 = 0;
LABEL_20:
    *(float32x2_t *)a6.i8 = vadd_f32(v7, *(float32x2_t *)a6.i8);
    *v13++ = v35;
    v20 += 2;
    --a4;
  }
  while (a4);
  return result;
}

void Wf16_shade_axial_W(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v5;
  float *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  unsigned int v12;
  unsigned int v13;
  _DWORD *v14;
  _WORD *v15;
  uint64_t v16;
  float *v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  int v22;
  _WORD *i;
  unsigned int v24;
  uint64_t v25;
  float v27;
  char v35;
  uint64_t v36;
  float v38;
  int v42;

  v5 = *(float *)(a1 + 280);
  v6 = *(float **)(a1 + 272);
  v7 = *(float *)(a1 + 296)
     + (float)((float)(*(float *)(a1 + 288) * (float)(v6[1] * (float)a3)) + (float)(v5 * (float)(v6[1] * (float)a2)));
  v8 = *(float *)(a1 + 336);
  v9 = *(float *)(a1 + 344);
  v10 = *(float *)(a1 + 304);
  v11 = *(float *)(a1 + 308);
  v12 = *(_DWORD *)(a1 + 320);
  v13 = *(_DWORD *)(a1 + 324);
  v16 = a1 + 144;
  v14 = *(_DWORD **)(a1 + 144);
  v15 = *(_WORD **)(v16 + 8);
  v17 = *(float **)(a1 + 384);
  if (*(_QWORD *)(a1 + 392))
    v18 = *(float **)(a1 + 392);
  else
    v18 = v6;
  v19 = *(_QWORD *)(a1 + 32);
  v20 = *(_QWORD *)(a1 + 40);
  if (v20)
    v21 = *(float **)(a1 + 40);
  else
    v21 = v6;
  if (v5 != 0.0)
  {
    for (i = v15 + 1; ; i += 2)
    {
      v24 = v12;
      if (v7 >= v10)
      {
        v24 = v13;
        if (v7 <= v11)
          v24 = (int)(float)(v9 * (float)(v7 - v8));
      }
      if ((v24 & 0x80000000) != 0)
      {
        if (!v17)
        {
          v35 = 0;
          goto LABEL_31;
        }
        _S7 = *v18;
        _S16 = *v18 * *v17;
      }
      else
      {
        v25 = v24;
        if (!v20)
          v25 = 0;
        _S7 = v21[v25];
        if (v20)
          v27 = v21[v25];
        else
          v27 = 1.0;
        _S16 = *(float *)(v19 + 4 * v24) * v27;
      }
      __asm { FCVT            H16, S16 }
      *(i - 1) = _H16;
      __asm { FCVT            H7, S7 }
      *i = _H7;
      v35 = -1;
LABEL_31:
      v7 = v5 + v7;
      *(_BYTE *)v14 = v35;
      v14 = (_DWORD *)((char *)v14 + 1);
      if (!--a4)
        return;
    }
  }
  if (v7 >= v10)
  {
    v12 = v13;
    if (v7 <= v11)
      v12 = (int)(float)(v9 * (float)(v7 - v8));
  }
  if ((v12 & 0x80000000) == 0 || v17)
  {
    if ((v12 & 0x80000000) != 0)
    {
      _S1 = *v18;
      _S0 = *v18 * *v17;
    }
    else
    {
      v36 = v12;
      if (!v20)
        v36 = 0;
      _S1 = v21[v36];
      v38 = 1.0;
      if (v20)
        v38 = v21[v36];
      _S0 = *(float *)(v19 + 4 * v12) * v38;
    }
    __asm
    {
      FCVT            H0, S0
      FCVT            H1, S1
    }
    v42 = a4 + 4;
    do
    {
      *v15 = _H0;
      v15[1] = _H1;
      v15[2] = _H0;
      v15[3] = _H1;
      v15[4] = _H0;
      v15[5] = _H1;
      v15[6] = _H0;
      v42 -= 4;
      v15[7] = _H1;
      v15 += 8;
      *v14++ = -1;
    }
    while (v42 > 4);
  }
  else
  {
    if (a4 >= 4)
      v22 = 4;
    else
      v22 = a4;
    bzero(v14, ((a4 - v22 + 3) & 0xFFFFFFFC) + 4);
  }
}

uint64_t Wf16_sample_CMYKf16(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  _BYTE *v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  float16x4_t *v46;
  float16x4_t *v47;
  unint64_t v48;
  __int16 *v49;
  __int16 *v50;
  uint64_t v53;
  unsigned int v54;
  int v55;
  int v56;
  int64_t v57;
  float16x4_t *v58;
  float16x4_t *v59;
  float16x4_t *v60;
  float16x4_t *v61;
  float16x4_t v62;
  float16x4_t v63;
  __int16 *v67;
  unint64_t v68;
  unint64_t v69;
  __int16 *v70;
  __int16 *v71;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float v82;
  float v83;
  float v86;
  float v87;
  float32x4_t v88;
  float16x4_t *v90;
  float16x4_t v91;
  __int16 *v93;
  float32x4_t v94;
  float v96;
  int64_t v98;
  float16x4_t *v99;
  float16x4_t v100;
  __int16 *v102;
  float32x4_t v103;
  uint64_t v105;
  uint64_t v106;
  int v107;
  unint64_t v117;
  float16x4_t *v118;
  __int16 *v119;
  unint64_t v120;
  unsigned int v121;
  unsigned int *v122;
  unsigned int v123;
  int v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;

  v7 = *(_QWORD *)(result + 32);
  v8 = *(_QWORD *)(result + 40);
  v9 = *(_DWORD *)(result + 24);
  v10 = *(_DWORD *)(result + 28);
  v11 = *(_QWORD *)(result + 176);
  v12 = *(_QWORD *)(result + 72);
  v13 = *(_QWORD *)(result + 88);
  v129 = *(_QWORD *)(result + 80);
  v15 = *(_QWORD *)(result + 112);
  v14 = *(_QWORD *)(result + 120);
  v127 = *(_DWORD *)(result + 188);
  v16 = (_WORD *)(*(_QWORD *)(result + 152) - 4);
  v17 = (_BYTE *)(*(_QWORD *)(result + 144) - 1);
  v18 = *(_DWORD *)(result + 260) - 1;
  v19 = *(_DWORD *)(result + 256);
  v20 = v8 + (v18 * v10) + 2 * (v19 - 1);
  v125 = *(_DWORD *)(result + 240);
  v21 = v7 + (v18 * v9) + 2 * (4 * v19) - 8;
  v128 = *(_QWORD *)(result + 64);
  v126 = a4;
  while (1)
  {
    if (a3 >= v12)
    {
      if (a3 <= v13)
      {
        v30 = ((unint64_t)a3 >> 22) & 0x3C0;
        v31 = 0x3FFFFFFF;
        v32 = a3;
        v33 = v128;
      }
      else
      {
        v26 = *(_QWORD *)(result + 216);
        v27 = *(_QWORD *)(result + 224) + v13;
        v28 = v27 - a3 + (v26 >> 1);
        if (v28 < 1)
          goto LABEL_39;
        if (v28 >= v26)
          LODWORD(v29) = 0x3FFFFFFF;
        else
          v29 = (unint64_t)(*(_QWORD *)(result + 232) * v28) >> 32;
        v33 = v128;
        v31 = v29 | v127;
        v32 = v27 - 0x1000000;
        v30 = 448;
      }
    }
    else
    {
      v22 = *(_QWORD *)(result + 216);
      v23 = v12 - *(_QWORD *)(result + 224);
      v24 = a3 - v23 + (v22 >> 1);
      if (v24 < 1)
        goto LABEL_39;
      if (v24 >= v22)
        LODWORD(v25) = 0x3FFFFFFF;
      else
        v25 = (unint64_t)(*(_QWORD *)(result + 232) * v24) >> 32;
      v33 = v128;
      v31 = v25 | v127;
      v32 = v23 + 0x1000000;
      v30 = 512;
    }
    if (a2 >= v33)
    {
      if (a2 <= v129)
      {
        v38 = ((unint64_t)a2 >> 26) & 0x3C;
        v37 = a2;
      }
      else
      {
        v39 = *(_QWORD *)(result + 192);
        v40 = *(_QWORD *)(result + 200) + v129;
        v41 = v40 - a2 + (v39 >> 1);
        if (v41 < 1)
          goto LABEL_39;
        if (v41 < v39)
          v31 = ((v31 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v41) >> 32) >> 15)) | v127;
        v37 = v40 - 0x1000000;
        v38 = 28;
      }
    }
    else
    {
      v34 = *(_QWORD *)(result + 192);
      v35 = v33 - *(_QWORD *)(result + 200);
      v36 = a2 - v35 + (v34 >> 1);
      if (v36 < 1)
        goto LABEL_39;
      if (v36 < v34)
        v31 = ((v31 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v36) >> 32) >> 15)) | v127;
      v37 = v35 + 0x1000000;
      v38 = 32;
    }
    if (v31 >= 0x400000)
      break;
LABEL_39:
    --a4;
    a2 += v15;
    a3 += v14;
    v16 += 2;
    *++v17 = 0;
LABEL_40:
    if (!a4)
      return result;
  }
  v42 = v32 >> 32;
  v43 = v37 >> 32;
  v44 = v7 + (int)v42 * (uint64_t)v9;
  v45 = v44 + 8 * v43;
  v46 = *(float16x4_t **)(result + 32);
  if (v21 >= v45)
    v47 = (float16x4_t *)(v44 + 8 * v43);
  else
    v47 = (float16x4_t *)v21;
  if (v47 < v46)
    v47 = *(float16x4_t **)(result + 32);
  if (v8)
  {
    v48 = v8 + (int)v42 * (uint64_t)v10 + 2 * v43;
    v49 = *(__int16 **)(result + 40);
    if (v20 >= v48)
      v50 = (__int16 *)v48;
    else
      v50 = (__int16 *)v20;
    if (v50 >= v49)
      v49 = v50;
    _H6 = *v49;
  }
  else
  {
    v48 = 0;
    _H6 = 15360;
  }
  _D7 = *v47;
  v53 = v129;
  if (!v11)
    goto LABEL_119;
  v54 = *(_DWORD *)(v11 + (v38 | v30));
LABEL_45:
  v55 = v54 & 0xF;
  v56 = HIBYTE(v54) & 3;
  switch(v55)
  {
    case 1:
      v90 = (float16x4_t *)(v45 + SBYTE1(v54) * (uint64_t)v9);
      if (v21 < (unint64_t)v90)
        v90 = (float16x4_t *)v21;
      if (v90 < v46)
        v90 = v46;
      v91 = *v90;
      _H17 = 15360;
      if (v8)
      {
        v93 = (__int16 *)(v48 + SBYTE1(v54) * (uint64_t)v10);
        if (v20 < (unint64_t)v93)
          v93 = (__int16 *)v20;
        if ((unint64_t)v93 < *(_QWORD *)(result + 40))
          v93 = *(__int16 **)(result + 40);
        _H17 = *v93;
      }
      _Q18.i16[0] = interpolate_cmykaf[5 * v56 + 4];
      __asm { FCVT            S18, H18 }
      v94 = vcvtq_f32_f16(_D7);
      _D7 = vcvt_f16_f32(vmlaq_n_f32(vmlsq_lane_f32(v94, v94, *(float32x2_t *)_Q18.f32, 0), vcvtq_f32_f16(v91), _Q18.f32[0]));
      __asm { FCVT            S6, H6 }
      v96 = _S6 - (float)(_S6 * _Q18.f32[0]);
      __asm { FCVT            S16, H17 }
      goto LABEL_117;
    case 2:
      v98 = (unint64_t)HIWORD(v54) << 56;
      v99 = (float16x4_t *)(v45 + (v98 >> 53));
      if (v21 < (unint64_t)v99)
        v99 = (float16x4_t *)v21;
      if (v99 < v46)
        v99 = v46;
      v100 = *v99;
      _H16 = 15360;
      if (v8)
      {
        v102 = (__int16 *)(v48 + (v98 >> 55));
        if (v20 < (unint64_t)v102)
          v102 = (__int16 *)v20;
        if ((unint64_t)v102 < *(_QWORD *)(result + 40))
          v102 = *(__int16 **)(result + 40);
        _H16 = *v102;
      }
      _Q18.i16[0] = interpolate_cmykaf[5 * ((v54 >> 28) & 3) + 4];
      __asm { FCVT            S18, H18 }
      v103 = vcvtq_f32_f16(_D7);
      _D7 = vcvt_f16_f32(vmlaq_n_f32(vmlsq_lane_f32(v103, v103, *(float32x2_t *)_Q18.f32, 0), vcvtq_f32_f16(v100), _Q18.f32[0]));
      __asm { FCVT            S6, H6 }
      v96 = _S6 - (float)(_S6 * _Q18.f32[0]);
      __asm { FCVT            S16, H16 }
LABEL_117:
      _S6 = v96 + (float)(_S16 * _Q18.f32[0]);
      goto LABEL_118;
    case 3:
      v57 = (unint64_t)HIWORD(v54) << 56;
      v58 = (float16x4_t *)(v45 + (v57 >> 53));
      if (v21 < (unint64_t)v58)
        v58 = (float16x4_t *)v21;
      if (v58 < v46)
        v58 = v46;
      v59 = (float16x4_t *)(v45 + SBYTE1(v54) * (uint64_t)v9);
      if (v21 >= (unint64_t)v59)
        v60 = v59;
      else
        v60 = (float16x4_t *)v21;
      if (v60 < v46)
        v60 = v46;
      v61 = (float16x4_t *)((char *)v59 + (v57 >> 53));
      if (v21 < (unint64_t)v61)
        v61 = (float16x4_t *)v21;
      if (v61 < v46)
        v61 = v46;
      v62 = *v60;
      v63 = *v61;
      _H19 = 15360;
      _H20 = 15360;
      _H21 = 15360;
      if (v8)
      {
        v67 = (__int16 *)(v48 + (v57 >> 55));
        v68 = *(_QWORD *)(result + 40);
        if (v20 < (unint64_t)v67)
          v67 = (__int16 *)v20;
        if ((unint64_t)v67 < v68)
          v67 = *(__int16 **)(result + 40);
        _H19 = *v67;
        v69 = v48 + SBYTE1(v54) * (uint64_t)v10;
        if (v20 >= v69)
          v70 = (__int16 *)(v48 + SBYTE1(v54) * (uint64_t)v10);
        else
          v70 = (__int16 *)v20;
        if ((unint64_t)v70 < v68)
          v70 = *(__int16 **)(result + 40);
        _H20 = *v70;
        v71 = (__int16 *)(v69 + (v57 >> 55));
        if (v20 < (unint64_t)v71)
          v71 = (__int16 *)v20;
        if ((unint64_t)v71 < v68)
          v71 = *(__int16 **)(result + 40);
        _H21 = *v71;
      }
      _H22 = interpolate_cmykaf[5 * v56 + 4];
      __asm { FCVT            S22, H22 }
      _H23 = interpolate_cmykaf[5 * ((v54 >> 28) & 3) + 4];
      __asm { FCVT            S23, H23 }
      v77 = vcvtq_f32_f16(_D7);
      v78 = vcvtq_f32_f16(*v58);
      v79 = vcvtq_f32_f16(v62);
      _Q18 = vcvtq_f32_f16(v63);
      __asm
      {
        FCVT            S6, H6
        FCVT            S19, H19
      }
      v82 = (float)(_S6 - (float)(_S6 * _D23.f32[0])) + (float)(_S19 * _D23.f32[0]);
      if (v82 < 1.0)
        v83 = v82;
      else
        v83 = 1.0;
      if (v82 > 1.0)
        v82 = 1.0;
      if (v83 < 0.0)
        v82 = 0.0;
      __asm
      {
        FCVT            S19, H20
        FCVT            S20, H21
      }
      v86 = (float)(_S19 - (float)(_S19 * _D23.f32[0])) + (float)(_S20 * _D23.f32[0]);
      if (v86 < 1.0)
        v87 = v86;
      else
        v87 = 1.0;
      if (v86 > 1.0)
        v86 = 1.0;
      if (v87 < 0.0)
        v86 = 0.0;
      v88 = vmlaq_n_f32(vmlsq_lane_f32(v77, v77, _D23, 0), v78, _D23.f32[0]);
      _D7 = vcvt_f16_f32(vmlaq_n_f32(vmlsq_lane_f32(v88, v88, _D22, 0), vmlaq_n_f32(vmlsq_lane_f32(v79, v79, _D23, 0), _Q18, _D23.f32[0]), _D22.f32[0]));
      _S6 = (float)(v82 - (float)(v82 * _D22.f32[0])) + (float)(v86 * _D22.f32[0]);
      if (_S6 >= 1.0)
        _S6 = 1.0;
      if (_S6 <= 0.0)
        _S6 = 0.0;
LABEL_118:
      __asm { FCVT            H6, S6 }
      v53 = v129;
      break;
  }
LABEL_119:
  ++v17;
  a2 += v15;
  v105 = v53 - a2;
  v16 += 2;
  a3 += v14;
  v106 = v13 - a3;
  while (1)
  {
    v107 = a4;
    __asm { FCVT            S16, H6 }
    _H17 = _D7.i16[3];
    __asm
    {
      FCVT            S17, H17
      FCVT            S18, H7
    }
    _H19 = _D7.i16[1];
    __asm { FCVT            S19, H19 }
    _H7 = _D7.i16[2];
    __asm { FCVT            S7, H7 }
    _S7 = (float)((float)((float)((float)(_S16 - _S19) - _S17) * 0.59)
                + (float)((float)((float)(_S16 - _S18) - _S17) * 0.3))
        + (float)((float)((float)(_S16 - _S7) - _S17) * 0.11);
    __asm { FCVT            H7, S7 }
    *v16 = LOWORD(_S7);
    v16[1] = _H6;
    *v17 = v31 >> 22;
    if (!--a4)
      return result;
    if ((v106 | v105 | (a3 - v12) | (a2 - v128)) < 0)
      goto LABEL_40;
    v45 = v7 + SHIDWORD(a3) * (uint64_t)v9 + 8 * (a2 >> 32);
    v46 = *(float16x4_t **)(result + 32);
    if (v21 >= v45)
      v117 = v7 + SHIDWORD(a3) * (uint64_t)v9 + 8 * (a2 >> 32);
    else
      v117 = v21;
    if (v117 >= (unint64_t)v46)
      v118 = (float16x4_t *)v117;
    else
      v118 = *(float16x4_t **)(result + 32);
    _H6 = 15360;
    if (v8)
    {
      v48 = v8 + SHIDWORD(a3) * (uint64_t)v10 + 2 * (a2 >> 32);
      v119 = *(__int16 **)(result + 40);
      if (v20 >= v48)
        v120 = v8 + SHIDWORD(a3) * (uint64_t)v10 + 2 * (a2 >> 32);
      else
        v120 = v20;
      if (v120 >= (unint64_t)v119)
        v119 = (__int16 *)v120;
      _H6 = *v119;
    }
    _D7 = *v118;
    if (v11)
    {
      v54 = *(_DWORD *)(v11 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      v121 = v54 & 0xF;
      if ((v54 & 0xF) != 0)
      {
        v122 = *(unsigned int **)(result + 264);
        v123 = *v122;
        if (v107 != v126 && a4 != 1 && v125 != 1 && v123 == 3 && v121 < 3)
          v54 |= 3u;
        v31 = -1;
        if (v123 < v121)
          *v122 = v121;
        v53 = v129;
        goto LABEL_45;
      }
    }
    ++v17;
    v105 -= v15;
    v16 += 2;
    a3 += v14;
    v106 -= v14;
    a2 += v15;
    v31 = -1;
  }
}

_WORD *CGFontIndexMapCreate(__int16 a1)
{
  _WORD *result;

  result = malloc_type_calloc(1uLL, 0x208uLL, 0x1080040036EC52CuLL);
  *result = a1;
  return result;
}

uint64_t CGFontIndexMapCreateIdentity()
{
  return -1;
}

unsigned __int16 *CGFontIndexMapAddIndexes(unsigned __int16 *result, unsigned __int16 *a2, _WORD *a3, uint64_t a4)
{
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  _WORD *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  if (a4)
  {
    v4 = result;
    if (result)
    {
      if (result != (unsigned __int16 *)-1)
      {
        v5 = a2;
        if (a2)
        {
          v6 = a3;
          if (a3)
          {
            v7 = a4;
            do
            {
              v9 = *v5++;
              v8 = v9;
              LOWORD(v9) = *v6++;
              result = CGFontIndexMapAddIndex(v4, v8, v9);
              --v7;
            }
            while (v7);
          }
        }
      }
    }
  }
  return result;
}

unsigned __int16 *CGFontIndexMapAddRange(unsigned __int16 *result, int a2, unsigned int a3, uint64_t a4)
{
  unsigned __int16 *v4;
  __int16 v5;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v4 = result;
    if ((unint64_t)result + 1 >= 2)
    {
      v5 = a2;
      if (a3 + a2 <= 0x10000)
      {
        if (a3)
        {
          v7 = 0;
          v8 = a3;
          do
          {
            result = CGFontIndexMapAddIndex(v4, (unsigned __int16)(v7 + v5), *(_WORD *)(a4 + 2 * v7));
            ++v7;
          }
          while (v8 != v7);
        }
      }
    }
  }
  return result;
}

uint64_t CGFontIndexMapGetValue(unsigned __int16 *a1, uint64_t a2)
{
  unint64_t v2;

  if (!a1)
    return 0xFFFFLL;
  if (a1 != (unsigned __int16 *)-1)
  {
    v2 = atomic_load((unint64_t *)&a1[4 * (a2 >> 10) + 4]);
    if (v2)
      return *(unsigned __int16 *)(v2 + 2 * (a2 & 0x3FF));
    else
      return *a1;
  }
  return a2;
}

__int16 *CGFontIndexMapGetValues(__int16 *result, unsigned __int16 *a2, uint64_t a3, _WORD *a4)
{
  __int16 v4;
  unsigned int v5;
  unint64_t v6;
  __int16 v7;
  __int16 v8;

  if (a3 && result && a2 && a4)
  {
    if (result == (__int16 *)-1)
    {
      do
      {
        v8 = *a2++;
        *a4++ = v8;
        --a3;
      }
      while (a3);
    }
    else
    {
      do
      {
        v5 = *a2++;
        v4 = v5;
        v6 = atomic_load((unint64_t *)((char *)result + (((unint64_t)v5 >> 7) & 0x1F8) + 8));
        if (v6)
          v7 = *(_WORD *)(v6 + 2 * (v4 & 0x3FF));
        else
          v7 = *result;
        *a4++ = v7;
        --a3;
      }
      while (a3);
    }
  }
  return result;
}

uint64_t CGFontIndexMapPrint(unsigned __int16 *a1, FILE *a2)
{
  FILE *v2;
  uint64_t result;
  uint64_t i;
  unint64_t v6;
  int v7;

  if (a2)
    v2 = a2;
  else
    v2 = (FILE *)*MEMORY[0x1E0C80C20];
  if (a1 == (unsigned __int16 *)-1)
    return fprintf(v2, "CGFontIndexMap %p: <identity>\n");
  if (!a1)
    return fprintf(v2, "CGFontIndexMap %p: <null>\n");
  result = fprintf(v2, "CGFontIndexMap %p: default value: %hu\n", a1, *a1);
  for (i = 0; i != 0xFFFF; ++i)
  {
    v6 = atomic_load((unint64_t *)&a1[4 * ((unsigned __int16)i >> 10) + 4]);
    if (v6)
    {
      v7 = *(unsigned __int16 *)(v6 + 2 * (i & 0x3FF));
      if (v7 != *a1)
        result = fprintf(v2, "  %hu -> %hu\n", i, v7);
    }
  }
  return result;
}

__CFDictionary *CGPDFDocumentCopyInfoDictionary(CGPDFDocument *a1)
{
  CGPDFDictionaryRef Info;
  CGPDFDictionary *v2;
  __CFDictionary *Mutable;
  CGPDFArrayRef v4;
  __CFArray *v5;
  uint64_t v6;
  size_t v7;
  CFStringRef v8;
  CFStringRef v9;
  CFStringRef v10;
  CFStringRef v11;
  CGPDFArrayRef v13;
  CGPDFStringRef value;
  CGPDFStringRef string;

  Info = CGPDFDocumentGetInfo(a1);
  if (!Info)
    return 0;
  v2 = Info;
  v13 = 0;
  value = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (CGPDFDictionaryGetString(v2, "Title", &value))
    set_string_value(Mutable, CFSTR("kCGPDFDocumentTitle"), value);
  if (CGPDFDictionaryGetString(v2, "Author", &value))
    set_string_value(Mutable, CFSTR("kCGPDFDocumentAuthor"), value);
  if (CGPDFDictionaryGetString(v2, "Subject", &value))
    set_string_value(Mutable, CFSTR("kCGPDFDocumentSubject"), value);
  if (CGPDFDictionaryGetString(v2, "Creator", &value))
    set_string_value(Mutable, CFSTR("kCGPDFDocumentCreator"), value);
  if (CGPDFDictionaryGetString(v2, "Producer", &value))
    set_string_value(Mutable, CFSTR("kCGPDFDocumentProducer"), value);
  if (CGPDFDictionaryGetString(v2, "CreationDate", &value))
    set_date_value(Mutable, CFSTR("kCGPDFDocumentCreationDate"), value);
  if (CGPDFDictionaryGetString(v2, "ModDate", &value))
    set_date_value(Mutable, CFSTR("kCGPDFDocumentModificationDate"), value);
  if (CGPDFDictionaryGetArray(v2, "AAPL:Keywords", &v13))
  {
    v4 = v13;
    v5 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (v4)
    {
      v6 = *((_QWORD *)v4 + 2);
      if (v6)
      {
        v7 = 0;
        string = 0;
        do
        {
          if (CGPDFArrayGetString(v4, v7, &string))
          {
            v8 = CGPDFStringCopyTextString(string);
            if (v8)
            {
              v9 = v8;
              CFArrayAppendValue(v5, v8);
              CFRelease(v9);
            }
          }
          ++v7;
        }
        while (v6 != v7);
      }
    }
  }
  else
  {
    if (!CGPDFDictionaryGetString(v2, "Keywords", &value))
      return Mutable;
    v5 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v10 = CGPDFStringCopyTextString(value);
    if (v10)
    {
      v11 = v10;
      CFArrayAppendValue(v5, v10);
      CFRelease(v11);
    }
  }
  if (v5)
  {
    if (CFArrayGetCount(v5) >= 1)
      CFDictionarySetValue(Mutable, CFSTR("kCGPDFDocumentKeywords"), v5);
    CFRelease(v5);
  }
  return Mutable;
}

void set_string_value(__CFDictionary *a1, const void *a2, CGPDFStringRef string)
{
  CFStringRef v5;
  CFStringRef v6;

  v5 = CGPDFStringCopyTextString(string);
  if (v5)
  {
    v6 = v5;
    CFDictionarySetValue(a1, a2, v5);
    CFRelease(v6);
  }
}

void set_date_value(__CFDictionary *a1, const void *a2, CGPDFStringRef string)
{
  CFDateRef v5;
  CFDateRef v6;

  v5 = CGPDFStringCopyDate(string);
  if (v5)
  {
    v6 = v5;
    CFDictionarySetValue(a1, a2, v5);
    CFRelease(v6);
  }
}

uint64_t *vec::template_mark_pixelmask_row<(CGCompositeOperation)0,_argb8_t>(uint64_t *result, uint8x8_t **a2, unint64_t *a3, unsigned __int32 **a4, int a5, int a6, double a7, uint16x8_t a8, double a9, double a10, double a11, uint16x8_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16)
{
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint8x8_t *v19;
  unsigned __int32 *v20;
  uint64_t v21;
  uint64_t v22;
  uint16x8_t v23;
  unsigned __int32 v24;
  int8x16_t *v25;
  int8x16_t *v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int64_t v29;
  int64_t v30;
  uint8x16_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  uint64_t v41;
  int8x16_t v42;
  uint16x8_t v43;
  unsigned int v44;
  uint16x8_t v45;
  unint64_t v46;
  uint64_t v47;

  v16 = a16;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a16 < 4)
    goto LABEL_33;
  v21 = 4 * a6;
  v22 = 16 * a6;
  a8.i64[0] = -1;
  a8.i64[1] = -1;
  v23 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  while (1)
  {
    v24 = *v20;
    if (*v20 == -1)
    {
      v34 = (int8x16_t *)((char *)v20 + v16);
      v35 = (int8x16_t *)v20;
      do
        v36 = v35++;
      while (v35 <= v34 && (vminvq_u8((uint8x16_t)vceqq_s8(*v36, (int8x16_t)a8)) & 0x80) != 0);
      do
      {
        v37 = v36;
        v36 = (int8x16_t *)((char *)v36 + 4);
      }
      while (v36 <= v34 && v37->i32[0] == -1);
      if (v37 < v34)
      {
        while (v37->u8[0] == 255)
        {
          v37 = (int8x16_t *)((char *)v37 + 1);
          if (v37 >= v34)
          {
            v37 = (int8x16_t *)((char *)v20 + v16);
            break;
          }
        }
      }
      v38 = 0;
      v39 = (char *)v37 - (char *)v20;
      v40 = (char *)v37 - (char *)v20;
      do
      {
        *(_OWORD *)&v19->i8[v38] = 0uLL;
        v20 = (unsigned __int32 *)((char *)v20 + v21);
        v40 -= 4;
        v38 += v22;
      }
      while (v40 > 3);
      v19 = (uint8x8_t *)((char *)v19 + v38);
      v17 += v38;
      v16 = v16 - v39 + v40;
      goto LABEL_30;
    }
    if (v24)
      break;
    v25 = (int8x16_t *)((char *)v20 + v16);
    v26 = (int8x16_t *)v20;
    do
      v27 = v26++;
    while (v26 <= v25 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v27)) & 0x80) != 0);
    do
    {
      v28 = v27;
      v27 = (int8x16_t *)((char *)v27 + 4);
    }
    while (v27 <= v25 && !v28->i32[0]);
    if (v28 < v25)
    {
      while (!v28->i8[0])
      {
        v28 = (int8x16_t *)((char *)v28 + 1);
        if (v28 >= v25)
        {
          v28 = (int8x16_t *)((char *)v20 + v16);
          break;
        }
      }
    }
    v29 = (char *)v28 - (char *)v20;
    v30 = ((char *)v28 - (char *)v20) * a6;
    v17 += 4 * v30;
    v19 = (uint8x8_t *)((char *)v19 + 4 * v30);
    v20 = (unsigned __int32 *)((char *)v20 + v30);
    v16 -= v29;
LABEL_30:
    if (v16 <= 3)
      goto LABEL_33;
  }
  while (1)
  {
    a12.i32[0] = v24;
    v31 = (uint8x16_t)vqtbl1q_s8((int8x16_t)a12, (int8x16_t)xmmword_185004A30);
    v32 = vminq_u16(vmull_u8(*v19, *(uint8x8_t *)v31.i8), v23);
    v33 = vminq_u16(vmull_high_u8(*(uint8x16_t *)v19->i8, v31), v23);
    a12 = vrsraq_n_u16(v33, v33, 8uLL);
    *(uint8x16_t *)v19->i8 = vqsubq_u8(*(uint8x16_t *)v19->i8, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v32, v32, 8uLL), 8uLL), a12, 8uLL));
    v20 = (unsigned __int32 *)((char *)v20 + v21);
    v16 -= 4;
    if (v16 < 4)
      break;
    v24 = *v20;
    v17 += v22;
    v19 = (uint8x8_t *)((char *)v19 + v22);
    if (*v20 - 1 >= 0xFFFFFFFE)
      goto LABEL_30;
  }
  v17 += v22;
  v19 = (uint8x8_t *)((char *)v19 + v22);
LABEL_33:
  v41 = v16 + a15;
  if (v41)
  {
    v42 = (int8x16_t)vdupq_n_s16(0xFE01u);
    do
    {
      a8.i32[0] = v19->i32[0];
      v43 = vmovl_u8(*(uint8x8_t *)a8.i8);
      LOBYTE(v44) = v43.i8[0];
      BYTE1(v44) = v43.i8[2];
      BYTE2(v44) = v43.i8[4];
      HIBYTE(v44) = v43.i8[6];
      v43.i8[0] = *(_BYTE *)v20;
      v43.i8[1] = *(_BYTE *)v20;
      v43.i8[2] = *(_BYTE *)v20;
      v43.i8[3] = *(_BYTE *)v20;
      v45 = vminq_u16(vmull_u8((uint8x8_t)v44, (uint8x8_t)v43.u32[0]), (uint16x8_t)v42);
      a8 = vrsraq_n_u16(v45, v45, 8uLL);
      *(uint8x8_t *)a8.i8 = vqsub_u8((uint8x8_t)v44, vqrshrn_n_u16(a8, 8uLL));
      *(int8x8_t *)a8.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a8, v42));
      v19->i32[0] = a8.i32[0];
      v46 = v17 + 4 * a6;
      v20 = (unsigned __int32 *)((char *)v20 + a6);
      if (v46 >= v18)
        v47 = -(uint64_t)a5;
      else
        v47 = 0;
      v17 = v46 + 4 * v47;
      v19 = (uint8x8_t *)((char *)v19 + 4 * a6);
      --v41;
    }
    while (v41);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

_DWORD **vec::template_mark_pixelmask_row<(CGCompositeOperation)1,_argb8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, unsigned __int32 **a4, int a5, int a6, double a7, uint8x8_t a8, double a9, double a10, double a11, int8x16_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16)
{
  unint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  _DWORD *v19;
  unsigned __int32 *v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t v23;
  uint16x8_t v24;
  unsigned __int32 v25;
  int8x16_t *v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int64_t v30;
  int64_t v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint8x16_t v40;
  uint8x16_t v41;
  uint8x16_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint64_t v47;
  int8x16_t v48;
  uint16x8_t v49;
  unsigned int v50;
  uint16x8_t v51;
  unsigned int v52;
  uint16x8_t v53;
  int8x16_t v54;
  _DWORD *v55;
  uint64_t v56;

  v16 = a16;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a16 < 4)
    goto LABEL_34;
  v21 = 4 * a6;
  v22 = 16 * a6;
  v23.i64[0] = -1;
  v23.i64[1] = -1;
  a8.i32[1] = 16843009;
  v24 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  while (1)
  {
    v25 = *v20;
    if (*v20 == -1)
    {
      v32 = (int8x16_t *)((char *)v20 + v16);
      v33 = (int8x16_t *)v20;
      do
        v34 = v33++;
      while (v33 <= v32 && (vminvq_u8((uint8x16_t)vceqq_s8(*v34, v23)) & 0x80) != 0);
      do
      {
        v35 = v34;
        v34 = (int8x16_t *)((char *)v34 + 4);
      }
      while (v34 <= v32 && v35->i32[0] == -1);
      if (v35 < v32)
      {
        while (v35->u8[0] == 255)
        {
          v35 = (int8x16_t *)((char *)v35 + 1);
          if (v35 >= v32)
          {
            v35 = (int8x16_t *)((char *)v20 + v16);
            break;
          }
        }
      }
      v36 = 0;
      v37 = (char *)v35 - (char *)v20;
      v38 = (char *)v35 - (char *)v20;
      do
      {
        *(_OWORD *)((char *)v19 + v36) = *(_OWORD *)((char *)v17 + v36);
        v20 = (unsigned __int32 *)((char *)v20 + v21);
        v38 -= 4;
        v36 += v22;
      }
      while (v38 > 3);
      v19 = (_DWORD *)((char *)v19 + v36);
      v17 = (_DWORD *)((char *)v17 + v36);
      v16 = v16 - v37 + v38;
      goto LABEL_31;
    }
    if (v25)
      break;
    v26 = (int8x16_t *)((char *)v20 + v16);
    v27 = (int8x16_t *)v20;
    do
      v28 = v27++;
    while (v27 <= v26 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v28)) & 0x80) != 0);
    do
    {
      v29 = v28;
      v28 = (int8x16_t *)((char *)v28 + 4);
    }
    while (v28 <= v26 && !v29->i32[0]);
    if (v29 < v26)
    {
      while (!v29->i8[0])
      {
        v29 = (int8x16_t *)((char *)v29 + 1);
        if (v29 >= v26)
        {
          v29 = (int8x16_t *)((char *)v20 + v16);
          break;
        }
      }
    }
    v30 = (char *)v29 - (char *)v20;
    v31 = ((char *)v29 - (char *)v20) * a6;
    v17 += v31;
    v19 += v31;
    v20 = (unsigned __int32 *)((char *)v20 + v31);
    v16 -= v30;
LABEL_31:
    if (v16 <= 3)
      goto LABEL_34;
  }
  v39 = 0;
  while (1)
  {
    v40 = *(uint8x16_t *)((char *)v17 + v39);
    v41 = *(uint8x16_t *)((char *)v19 + v39);
    a12.i32[0] = v25;
    a12 = vqtbl1q_s8(a12, (int8x16_t)xmmword_185004A30);
    v42 = (uint8x16_t)vmvnq_s8(a12);
    v43 = vmlal_u8(vmull_u8(*(uint8x8_t *)v41.i8, *(uint8x8_t *)v42.i8), *(uint8x8_t *)v40.i8, *(uint8x8_t *)a12.i8);
    v44 = vmlal_high_u8(vmull_high_u8(v41, v42), v40, (uint8x16_t)a12);
    v45 = vminq_u16(v43, v24);
    v46 = vminq_u16(v44, v24);
    *(uint8x16_t *)((char *)v19 + v39) = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v45, v45, 8uLL), 8uLL), vrsraq_n_u16(v46, v46, 8uLL), 8uLL);
    v20 = (unsigned __int32 *)((char *)v20 + v21);
    v16 -= 4;
    if (v16 < 4)
      break;
    v25 = *v20;
    v39 += v22;
    if (*v20 - 1 >= 0xFFFFFFFE)
    {
      v17 = (_DWORD *)((char *)v17 + v39);
      v19 = (_DWORD *)((char *)v19 + v39);
      goto LABEL_31;
    }
  }
  v17 = (_DWORD *)((char *)v17 + v22 + v39);
  v19 = (_DWORD *)((char *)v19 + v22 + v39);
LABEL_34:
  v47 = v16 + a15;
  if (v47)
  {
    v48 = (int8x16_t)vdupq_n_s16(0xFE01u);
    do
    {
      a8.i32[0] = *v17;
      v49 = vmovl_u8(a8);
      LOBYTE(v50) = v49.i8[0];
      BYTE1(v50) = v49.i8[2];
      BYTE2(v50) = v49.i8[4];
      HIBYTE(v50) = v49.i8[6];
      v49.i32[0] = *v19;
      v51 = vmovl_u8(*(uint8x8_t *)v49.i8);
      LOBYTE(v52) = v51.i8[0];
      BYTE1(v52) = v51.i8[2];
      BYTE2(v52) = v51.i8[4];
      HIBYTE(v52) = v51.i8[6];
      v51.i8[0] = *(_BYTE *)v20;
      v51.i8[1] = *(_BYTE *)v20;
      v51.i8[2] = *(_BYTE *)v20;
      v51.i8[3] = *(_BYTE *)v20;
      v53 = vminq_u16(vmlal_u8(vmull_u8((uint8x8_t)v52, (uint8x8_t)vmvn_s8((int8x8_t)v51.u32[0])), (uint8x8_t)v50, (uint8x8_t)v51.u32[0]), (uint16x8_t)v48);
      v54 = (int8x16_t)vrsraq_n_u16(v53, v53, 8uLL);
      *(uint8x8_t *)v54.i8 = vqrshrn_n_u16((uint16x8_t)v54, 8uLL);
      a8 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v54, v48));
      *v19 = a8.i32[0];
      v55 = &v17[a6];
      v20 = (unsigned __int32 *)((char *)v20 + a6);
      if ((unint64_t)v55 >= v18)
        v56 = -(uint64_t)a5;
      else
        v56 = 0;
      v17 = &v55[v56];
      v19 += a6;
      --v47;
    }
    while (v47);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)2,_argb8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, unsigned __int32 **a4, int a5, int a6, double a7, double a8, uint16x8_t a9, double a10, double a11, double a12, double a13, uint16x8_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  __int128 v18;
  unint64_t v19;
  unsigned __int32 *v20;
  unint64_t v21;
  _DWORD *v22;
  unsigned __int32 *v23;
  uint64_t v24;
  uint64_t v25;
  uint16x8_t v26;
  unsigned __int32 v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int64_t v32;
  int64_t v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  int8x16_t v41;
  uint8x16_t v42;
  int8x16_t v43;
  uint8x16_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint64_t v47;
  uint8x16_t v48;
  uint8x16_t v49;
  uint8x16_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  int8x16_t v56;
  uint8x16_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  uint64_t v60;
  int8x16_t v61;
  uint16x8_t v62;
  unsigned int v63;
  uint16x8_t v64;
  unsigned int v65;
  uint16x8_t v66;
  uint16x8_t v67;
  int8x8_t v68;
  uint8x8_t v69;
  uint16x8_t v70;
  unsigned __int32 *v71;
  uint64_t v72;

  v19 = a18;
  v20 = *result;
  v21 = *a3;
  v22 = *a2;
  v23 = *a4;
  if (a18 < 4)
    goto LABEL_34;
  v24 = 4 * a6;
  v25 = 16 * a6;
  v26 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    v27 = *v23;
    if (*v23 == -1)
    {
      v34 = (int8x16_t *)((char *)v23 + v19);
      v35 = (int8x16_t *)v23;
      do
        v36 = v35++;
      while (v35 <= v34 && (vminvq_u8((uint8x16_t)vceqq_s8(*v36, (int8x16_t)a9)) & 0x80) != 0);
      do
      {
        v37 = v36;
        v36 = (int8x16_t *)((char *)v36 + 4);
      }
      while (v36 <= v34 && v37->i32[0] == -1);
      if (v37 < v34)
      {
        while (v37->u8[0] == 255)
        {
          v37 = (int8x16_t *)((char *)v37 + 1);
          if (v37 >= v34)
          {
            v37 = (int8x16_t *)((char *)v23 + v19);
            break;
          }
        }
      }
      v38 = 0;
      v39 = (char *)v37 - (char *)v23;
      v40 = (char *)v37 - (char *)v23;
      do
      {
        v41 = *(int8x16_t *)((char *)v20 + v38);
        v42 = *(uint8x16_t *)((char *)v22 + v38);
        v43 = vqtbl1q_s8(v41, (int8x16_t)xmmword_185005170);
        v44 = (uint8x16_t)vbicq_s8(v41, vceqzq_s8(v43));
        v45 = vminq_u16(vmull_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v43.i8), v26);
        v46 = vminq_u16(vmull_high_u8(v42, (uint8x16_t)v43), v26);
        a14 = vrsraq_n_u16(v46, v46, 8uLL);
        *(uint8x16_t *)((char *)v22 + v38) = vqaddq_u8(v44, vqsubq_u8(v42, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v45, v45, 8uLL), 8uLL), a14, 8uLL)));
        v23 = (unsigned __int32 *)((char *)v23 + v24);
        v40 -= 4;
        v38 += v25;
      }
      while (v40 > 3);
      v22 = (_DWORD *)((char *)v22 + v38);
      v20 = (unsigned __int32 *)((char *)v20 + v38);
      v19 = v19 - v39 + v40;
      goto LABEL_31;
    }
    if (v27)
      break;
    v28 = (int8x16_t *)((char *)v23 + v19);
    v29 = (int8x16_t *)v23;
    do
      v30 = v29++;
    while (v29 <= v28 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v30)) & 0x80) != 0);
    do
    {
      v31 = v30;
      v30 = (int8x16_t *)((char *)v30 + 4);
    }
    while (v30 <= v28 && !v31->i32[0]);
    if (v31 < v28)
    {
      while (!v31->i8[0])
      {
        v31 = (int8x16_t *)((char *)v31 + 1);
        if (v31 >= v28)
        {
          v31 = (int8x16_t *)((char *)v23 + v19);
          break;
        }
      }
    }
    v32 = (char *)v31 - (char *)v23;
    v33 = ((char *)v31 - (char *)v23) * a6;
    v20 += v33;
    v22 += v33;
    v23 = (unsigned __int32 *)((char *)v23 + v33);
    v19 -= v32;
LABEL_31:
    if (v19 <= 3)
      goto LABEL_34;
  }
  v47 = 0;
  while (1)
  {
    v48 = *(uint8x16_t *)((char *)v20 + v47);
    v49 = *(uint8x16_t *)((char *)v22 + v47);
    a14.i32[0] = v27;
    v50 = (uint8x16_t)vqtbl1q_s8((int8x16_t)a14, (int8x16_t)xmmword_185004A30);
    v51 = vmull_u8(*(uint8x8_t *)v48.i8, *(uint8x8_t *)v50.i8);
    v52 = vmull_high_u8(v48, v50);
    v53 = vminq_u16(v51, v26);
    v54 = vminq_u16(v52, v26);
    v55 = vrsraq_n_u16(v54, v54, 8uLL);
    *(uint8x8_t *)v51.i8 = vqrshrn_n_u16(vrsraq_n_u16(v53, v53, 8uLL), 8uLL);
    *(uint8x8_t *)&v18 = vqrshrn_n_u16(v55, 8uLL);
    v56 = vqtbl2q_s8(*(int8x16x2_t *)(&v18 - 1), (int8x16_t)xmmword_185005180);
    v57 = (uint8x16_t)vbicq_s8((int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v51.i8, v55, 8uLL), vceqzq_s8(v56));
    v58 = vminq_u16(vmull_u8(*(uint8x8_t *)v49.i8, *(uint8x8_t *)v56.i8), v26);
    v59 = vminq_u16(vmull_high_u8(v49, (uint8x16_t)v56), v26);
    a14 = vrsraq_n_u16(v59, v59, 8uLL);
    *(uint8x16_t *)((char *)v22 + v47) = vqaddq_u8(v57, vqsubq_u8(v49, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v58, v58, 8uLL), 8uLL), a14, 8uLL)));
    v23 = (unsigned __int32 *)((char *)v23 + v24);
    v19 -= 4;
    if (v19 < 4)
      break;
    v27 = *v23;
    v47 += v25;
    if (*v23 - 1 >= 0xFFFFFFFE)
    {
      v20 = (unsigned __int32 *)((char *)v20 + v47);
      v22 = (_DWORD *)((char *)v22 + v47);
      goto LABEL_31;
    }
  }
  v20 = (unsigned __int32 *)((char *)v20 + v25 + v47);
  v22 = (_DWORD *)((char *)v22 + v25 + v47);
LABEL_34:
  v60 = v19 + a17;
  if (v60)
  {
    v61 = (int8x16_t)vdupq_n_s16(0xFE01u);
    do
    {
      a9.i32[0] = *v20;
      v62 = vmovl_u8(*(uint8x8_t *)a9.i8);
      LOBYTE(v63) = v62.i8[0];
      BYTE1(v63) = v62.i8[2];
      BYTE2(v63) = v62.i8[4];
      HIBYTE(v63) = v62.i8[6];
      v62.i32[0] = *v22;
      v64 = vmovl_u8(*(uint8x8_t *)v62.i8);
      LOBYTE(v65) = v64.i8[0];
      BYTE1(v65) = v64.i8[2];
      BYTE2(v65) = v64.i8[4];
      HIBYTE(v65) = v64.i8[6];
      v64.i8[0] = *(_BYTE *)v23;
      v64.i8[1] = *(_BYTE *)v23;
      v64.i8[2] = *(_BYTE *)v23;
      v64.i8[3] = *(_BYTE *)v23;
      v66 = vminq_u16(vmull_u8((uint8x8_t)v63, (uint8x8_t)v64.u32[0]), (uint16x8_t)v61);
      v67 = vrsraq_n_u16(v66, v66, 8uLL);
      v68 = (int8x8_t)vqrshrn_n_u16(v67, 8uLL);
      *(int8x8_t *)v67.i8 = vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v68, v67, 8uLL), (int8x8_t)0x404040400000000);
      v69 = (uint8x8_t)vbic_s8(v68, vceqz_s8(*(int8x8_t *)v67.i8));
      v70 = vminq_u16(vmull_u8((uint8x8_t)v65, *(uint8x8_t *)v67.i8), (uint16x8_t)v61);
      a9 = vrsraq_n_u16(v70, v70, 8uLL);
      *(uint8x8_t *)a9.i8 = vqadd_u8(v69, vqsub_u8((uint8x8_t)v65, vqrshrn_n_u16(a9, 8uLL)));
      *(int8x8_t *)a9.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a9, v61));
      *v22 = a9.i32[0];
      v71 = &v20[a6];
      v23 = (unsigned __int32 *)((char *)v23 + a6);
      if ((unint64_t)v71 >= v21)
        v72 = -(uint64_t)a5;
      else
        v72 = 0;
      v20 = &v71[v72];
      v22 += a6;
      --v60;
    }
    while (v60);
  }
  *result = v20;
  *a3 = v21;
  *a2 = v22;
  *a4 = v23;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)3,_argb8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, unsigned __int32 **a4, int a5, int a6, int a7, int8x16_t a8, double a9, double a10, uint16x8_t a11, double a12, double a13, double a14, uint16x8_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  unint64_t v18;
  unsigned __int32 *v19;
  unint64_t v20;
  _DWORD *v21;
  unsigned __int32 *v22;
  unsigned int v23;
  int8x16_t v24;
  uint64_t v25;
  uint64_t v26;
  uint16x8_t v27;
  unsigned __int32 v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int64_t v33;
  int64_t v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  uint8x16_t v42;
  uint8x16_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  uint8x16_t v50;
  int8x16_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint8x16_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  uint64_t v60;
  unsigned int v61;
  uint16x8_t v62;
  uint16x8_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint16x8_t v67;
  uint16x8_t v68;
  unsigned __int32 *v69;
  uint64_t v70;

  v18 = a18;
  v19 = *result;
  v20 = *a3;
  v21 = *a2;
  v22 = *a4;
  if (a18 < 4)
    goto LABEL_37;
  if (a7)
    v23 = 0;
  else
    v23 = -1;
  v24.i64[0] = 0xFF000000FFLL;
  v24.i64[1] = 0xFF000000FFLL;
  a8 = vandq_s8(vdupq_n_s8(v23), v24);
  v25 = 4 * a6;
  v26 = 16 * a6;
  v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a11.i64[0] = -1;
  a11.i64[1] = -1;
  while (1)
  {
    v28 = *v22;
    if (*v22 == -1)
    {
      v35 = (int8x16_t *)((char *)v22 + v18);
      v36 = (int8x16_t *)v22;
      do
        v37 = v36++;
      while (v36 <= v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, (int8x16_t)a11)) & 0x80) != 0);
      do
      {
        v38 = v37;
        v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= v35 && v38->i32[0] == -1);
      if (v38 < v35)
      {
        while (v38->u8[0] == 255)
        {
          v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= v35)
          {
            v38 = (int8x16_t *)((char *)v22 + v18);
            break;
          }
        }
      }
      v39 = 0;
      v40 = (char *)v38 - (char *)v22;
      v41 = (char *)v38 - (char *)v22;
      do
      {
        v42 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v19 + v39), a8);
        v43 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)((char *)v21 + v39), (int8x16_t)xmmword_185005170);
        a15 = vmull_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v43.i8);
        v44 = vmull_high_u8(v42, v43);
        v45 = vminq_u16(a15, v27);
        v46 = vminq_u16(v44, v27);
        *(uint8x16_t *)((char *)v21 + v39) = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v45, v45, 8uLL), 8uLL), vrsraq_n_u16(v46, v46, 8uLL), 8uLL);
        v22 = (unsigned __int32 *)((char *)v22 + v25);
        v41 -= 4;
        v39 += v26;
      }
      while (v41 > 3);
      v21 = (_DWORD *)((char *)v21 + v39);
      v19 = (unsigned __int32 *)((char *)v19 + v39);
      v18 = v18 - v40 + v41;
      goto LABEL_34;
    }
    if (v28)
      break;
    v29 = (int8x16_t *)((char *)v22 + v18);
    v30 = (int8x16_t *)v22;
    do
      v31 = v30++;
    while (v30 <= v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      v32 = v31;
      v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= v29 && !v32->i32[0]);
    if (v32 < v29)
    {
      while (!v32->i8[0])
      {
        v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= v29)
        {
          v32 = (int8x16_t *)((char *)v22 + v18);
          break;
        }
      }
    }
    v33 = (char *)v32 - (char *)v22;
    v34 = ((char *)v32 - (char *)v22) * a6;
    v19 += v34;
    v21 += v34;
    v22 = (unsigned __int32 *)((char *)v22 + v34);
    v18 -= v33;
LABEL_34:
    if (v18 <= 3)
      goto LABEL_37;
  }
  v47 = 0;
  while (1)
  {
    v48 = *(int8x16_t *)((char *)v21 + v47);
    a15.i32[0] = v28;
    v49 = vqtbl1q_s8((int8x16_t)a15, (int8x16_t)xmmword_185004A30);
    v50 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v19 + v47), a8);
    v51 = vqtbl1q_s8(v48, (int8x16_t)xmmword_185005170);
    v52 = vminq_u16(vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v49.i8), v27);
    v53 = vminq_u16(vmull_high_u8(v50, (uint8x16_t)v49), v27);
    v54 = (uint8x16_t)vmvnq_s8(v49);
    v55 = vmull_u8(*(uint8x8_t *)v48.i8, *(uint8x8_t *)v54.i8);
    v56 = vmull_high_u8((uint8x16_t)v48, v54);
    a15 = vqaddq_u16(v55, vmull_u8(vqrshrn_n_u16(vrsraq_n_u16(v52, v52, 8uLL), 8uLL), *(uint8x8_t *)v51.i8));
    v57 = vqaddq_u16(v56, vmull_u8(vqrshrn_n_u16(vrsraq_n_u16(v53, v53, 8uLL), 8uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL)));
    v58 = vminq_u16(a15, v27);
    v59 = vminq_u16(v57, v27);
    *(uint8x16_t *)((char *)v21 + v47) = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v58, v58, 8uLL), 8uLL), vrsraq_n_u16(v59, v59, 8uLL), 8uLL);
    v22 = (unsigned __int32 *)((char *)v22 + v25);
    v18 -= 4;
    if (v18 < 4)
      break;
    v28 = *v22;
    v47 += v26;
    if (*v22 - 1 >= 0xFFFFFFFE)
    {
      v19 = (unsigned __int32 *)((char *)v19 + v47);
      v21 = (_DWORD *)((char *)v21 + v47);
      goto LABEL_34;
    }
  }
  v19 = (unsigned __int32 *)((char *)v19 + v26 + v47);
  v21 = (_DWORD *)((char *)v21 + v26 + v47);
LABEL_37:
  v60 = v18 + a17;
  if (v60)
  {
    if (a7)
      v61 = 0;
    else
      v61 = -1;
    *(int8x8_t *)a8.i8 = vand_s8(vdup_n_s8(v61), (int8x8_t)0xFF000000FFLL);
    v62 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a11.i32[0] = *v19;
      v63 = vmovl_u8(*(uint8x8_t *)a11.i8);
      LOBYTE(v64) = v63.i8[0];
      BYTE1(v64) = v63.i8[2];
      BYTE2(v64) = v63.i8[4];
      HIBYTE(v64) = v63.i8[6];
      v63.i32[0] = *v21;
      v63.i64[0] = vmovl_u8(*(uint8x8_t *)v63.i8).u64[0];
      LOBYTE(v65) = v63.i8[0];
      BYTE1(v65) = v63.i8[2];
      BYTE2(v65) = v63.i8[4];
      HIBYTE(v65) = v63.i8[6];
      LOBYTE(v66) = *(_BYTE *)v22;
      BYTE1(v66) = *(_BYTE *)v22;
      BYTE2(v66) = *(_BYTE *)v22;
      HIBYTE(v66) = *(_BYTE *)v22;
      v67 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v64, *(int8x8_t *)a8.i8), (uint8x8_t)v66), v62);
      v68 = vminq_u16(vqaddq_u16(vmull_u8((uint8x8_t)v65, (uint8x8_t)vmvn_s8((int8x8_t)v66)), vmull_u8(vqrshrn_n_u16(vrsraq_n_u16(v67, v67, 8uLL), 8uLL), (uint8x8_t)vqtbl1_s8(vdupq_lane_s8(*(int8x8_t *)v63.i8, 0), (int8x8_t)0xFFFFFFFF00000000))), v62);
      a11 = vrsraq_n_u16(v68, v68, 8uLL);
      *(uint8x8_t *)a11.i8 = vqrshrn_n_u16(a11, 8uLL);
      *(int8x8_t *)a11.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a11, a8));
      *v21 = a11.i32[0];
      v69 = &v19[a6];
      v22 = (unsigned __int32 *)((char *)v22 + a6);
      if ((unint64_t)v69 >= v20)
        v70 = -(uint64_t)a5;
      else
        v70 = 0;
      v19 = &v69[v70];
      v21 += a6;
      --v60;
    }
    while (v60);
  }
  *result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)4,_argb8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, unsigned __int32 **a4, int a5, int a6, int a7, int8x16_t a8, double a9, double a10, uint16x8_t a11, double a12, double a13, double a14, uint16x8_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  unint64_t v18;
  unsigned __int32 *v19;
  unint64_t v20;
  _DWORD *v21;
  unsigned __int32 *v22;
  unsigned int v23;
  int8x16_t v24;
  uint64_t v25;
  uint64_t v26;
  uint16x8_t v27;
  unsigned __int32 v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int64_t v33;
  int64_t v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  uint8x16_t v42;
  uint8x16_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint64_t v46;
  int8x16_t v47;
  int8x16_t v48;
  uint8x16_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint8x16_t v52;
  int8x16_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  uint64_t v59;
  unsigned int v60;
  uint16x8_t v61;
  uint16x8_t v62;
  unsigned int v63;
  uint16x8_t v64;
  unsigned int v65;
  uint16x8_t v66;
  int8x16_t v67;
  uint16x8_t v68;
  unsigned __int32 *v69;
  uint64_t v70;

  v18 = a18;
  v19 = *result;
  v20 = *a3;
  v21 = *a2;
  v22 = *a4;
  if (a18 < 4)
    goto LABEL_37;
  if (a7)
    v23 = 0;
  else
    v23 = -1;
  v24.i64[0] = 0xFF000000FFLL;
  v24.i64[1] = 0xFF000000FFLL;
  a8 = vandq_s8(vdupq_n_s8(v23), v24);
  v25 = 4 * a6;
  v26 = 16 * a6;
  v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a11.i64[0] = -1;
  a11.i64[1] = -1;
  while (1)
  {
    v28 = *v22;
    if (*v22 == -1)
    {
      v35 = (int8x16_t *)((char *)v22 + v18);
      v36 = (int8x16_t *)v22;
      do
        v37 = v36++;
      while (v36 <= v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, (int8x16_t)a11)) & 0x80) != 0);
      do
      {
        v38 = v37;
        v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= v35 && v38->i32[0] == -1);
      if (v38 < v35)
      {
        while (v38->u8[0] == 255)
        {
          v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= v35)
          {
            v38 = (int8x16_t *)((char *)v22 + v18);
            break;
          }
        }
      }
      v39 = 0;
      v40 = (char *)v38 - (char *)v22;
      v41 = (char *)v38 - (char *)v22;
      do
      {
        v42 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v19 + v39), a8);
        v43 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)((char *)v21 + v39), (int8x16_t)xmmword_185005170);
        v44 = vminq_u16(vmull_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v43.i8), v27);
        v45 = vminq_u16(vmull_high_u8(v42, v43), v27);
        a15 = (uint16x8_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v44, v44, 8uLL), 8uLL), vrsraq_n_u16(v45, v45, 8uLL), 8uLL);
        *(uint8x16_t *)((char *)v21 + v39) = vqsubq_u8(v42, (uint8x16_t)a15);
        v22 = (unsigned __int32 *)((char *)v22 + v25);
        v41 -= 4;
        v39 += v26;
      }
      while (v41 > 3);
      v21 = (_DWORD *)((char *)v21 + v39);
      v19 = (unsigned __int32 *)((char *)v19 + v39);
      v18 = v18 - v40 + v41;
      goto LABEL_34;
    }
    if (v28)
      break;
    v29 = (int8x16_t *)((char *)v22 + v18);
    v30 = (int8x16_t *)v22;
    do
      v31 = v30++;
    while (v30 <= v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      v32 = v31;
      v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= v29 && !v32->i32[0]);
    if (v32 < v29)
    {
      while (!v32->i8[0])
      {
        v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= v29)
        {
          v32 = (int8x16_t *)((char *)v22 + v18);
          break;
        }
      }
    }
    v33 = (char *)v32 - (char *)v22;
    v34 = ((char *)v32 - (char *)v22) * a6;
    v19 += v34;
    v21 += v34;
    v22 = (unsigned __int32 *)((char *)v22 + v34);
    v18 -= v33;
LABEL_34:
    if (v18 <= 3)
      goto LABEL_37;
  }
  v46 = 0;
  while (1)
  {
    v47 = *(int8x16_t *)((char *)v21 + v46);
    a15.i32[0] = v28;
    v48 = vqtbl1q_s8((int8x16_t)a15, (int8x16_t)xmmword_185004A30);
    v49 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v19 + v46), a8);
    v50 = vminq_u16(vmull_u8(*(uint8x8_t *)v49.i8, *(uint8x8_t *)v48.i8), v27);
    v51 = vminq_u16(vmull_high_u8(v49, (uint8x16_t)v48), v27);
    v52 = (uint8x16_t)vmvnq_s8(v48);
    v53 = vqtbl1q_s8(vmvnq_s8(v47), (int8x16_t)xmmword_185005170);
    v54 = vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v52.i8);
    v55 = vmull_high_u8((uint8x16_t)v47, v52);
    a15 = vqaddq_u16(v54, vmull_u8(vqrshrn_n_u16(vrsraq_n_u16(v50, v50, 8uLL), 8uLL), *(uint8x8_t *)v53.i8));
    v56 = vqaddq_u16(v55, vmull_u8(vqrshrn_n_u16(vrsraq_n_u16(v51, v51, 8uLL), 8uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)));
    v57 = vminq_u16(a15, v27);
    v58 = vminq_u16(v56, v27);
    *(uint8x16_t *)((char *)v21 + v46) = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v57, v57, 8uLL), 8uLL), vrsraq_n_u16(v58, v58, 8uLL), 8uLL);
    v22 = (unsigned __int32 *)((char *)v22 + v25);
    v18 -= 4;
    if (v18 < 4)
      break;
    v28 = *v22;
    v46 += v26;
    if (*v22 - 1 >= 0xFFFFFFFE)
    {
      v19 = (unsigned __int32 *)((char *)v19 + v46);
      v21 = (_DWORD *)((char *)v21 + v46);
      goto LABEL_34;
    }
  }
  v19 = (unsigned __int32 *)((char *)v19 + v26 + v46);
  v21 = (_DWORD *)((char *)v21 + v26 + v46);
LABEL_37:
  v59 = v18 + a17;
  if (v59)
  {
    if (a7)
      v60 = 0;
    else
      v60 = -1;
    *(int8x8_t *)a8.i8 = vand_s8(vdup_n_s8(v60), (int8x8_t)0xFF000000FFLL);
    v61 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a11.i32[0] = *v19;
      v62 = vmovl_u8(*(uint8x8_t *)a11.i8);
      LOBYTE(v63) = v62.i8[0];
      BYTE1(v63) = v62.i8[2];
      BYTE2(v63) = v62.i8[4];
      HIBYTE(v63) = v62.i8[6];
      v62.i32[0] = *v21;
      v64 = vmovl_u8(*(uint8x8_t *)v62.i8);
      LOBYTE(v65) = v64.i8[0];
      BYTE1(v65) = v64.i8[2];
      BYTE2(v65) = v64.i8[4];
      HIBYTE(v65) = v64.i8[6];
      v64.i8[0] = *(_BYTE *)v22;
      v64.i8[1] = *(_BYTE *)v22;
      v64.i8[2] = *(_BYTE *)v22;
      v64.i8[3] = *(_BYTE *)v22;
      v66 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v63, *(int8x8_t *)a8.i8), (uint8x8_t)v64.u32[0]), v61);
      *(int8x8_t *)v67.i8 = vmvn_s8((int8x8_t)v65);
      v67.i64[1] = v67.i64[0];
      v68 = vminq_u16(vqaddq_u16(vmull_u8((uint8x8_t)v65, (uint8x8_t)vmvn_s8((int8x8_t)v64.u32[0])), vmull_u8(vqrshrn_n_u16(vrsraq_n_u16(v66, v66, 8uLL), 8uLL), (uint8x8_t)vqtbl1_s8(v67, (int8x8_t)0x404040400000000))), v61);
      a11 = vrsraq_n_u16(v68, v68, 8uLL);
      *(uint8x8_t *)a11.i8 = vqrshrn_n_u16(a11, 8uLL);
      *(int8x8_t *)a11.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a11, a8));
      *v21 = a11.i32[0];
      v69 = &v19[a6];
      v22 = (unsigned __int32 *)((char *)v22 + a6);
      if ((unint64_t)v69 >= v20)
        v70 = -(uint64_t)a5;
      else
        v70 = 0;
      v19 = &v69[v70];
      v21 += a6;
      --v59;
    }
    while (v59);
  }
  *result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

_DWORD **vec::template_mark_pixelmask_row<(CGCompositeOperation)5,_argb8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, unsigned __int32 **a4, int a5, int a6, double a7, double a8, double a9, uint8x8_t a10, double a11, double a12, double a13, uint16x8_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  uint8x16_t v18;
  unint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  _DWORD *v22;
  unsigned __int32 *v23;
  uint64_t v24;
  uint64_t v25;
  uint16x8_t v26;
  int8x16_t v27;
  unsigned __int32 v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int64_t v33;
  int64_t v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int8x16_t v42;
  int8x16_t v43;
  uint8x16_t v44;
  uint8x16_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint64_t v50;
  uint8x16_t v51;
  int8x16_t v52;
  uint8x16_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint8x16_t v58;
  int8x16_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint8x16_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  uint64_t v65;
  int8x16_t v66;
  uint16x8_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint16x8_t v71;
  uint16x8_t v72;
  uint8x8_t v73;
  uint16x8_t v74;
  uint16x8_t v75;
  int8x16_t v76;
  _DWORD *v77;
  uint64_t v78;

  v19 = a18;
  v20 = *result;
  v21 = *a3;
  v22 = *a2;
  v23 = *a4;
  if (a18 < 4)
    goto LABEL_34;
  v24 = 4 * a6;
  v25 = 16 * a6;
  v26 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  v27.i64[0] = -1;
  v27.i64[1] = -1;
  a10.i32[1] = 16843009;
  while (1)
  {
    v28 = *v23;
    if (*v23 == -1)
    {
      v35 = (int8x16_t *)((char *)v23 + v19);
      v36 = (int8x16_t *)v23;
      do
        v37 = v36++;
      while (v36 <= v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, v27)) & 0x80) != 0);
      do
      {
        v38 = v37;
        v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= v35 && v38->i32[0] == -1);
      if (v38 < v35)
      {
        while (v38->u8[0] == 255)
        {
          v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= v35)
          {
            v38 = (int8x16_t *)((char *)v23 + v19);
            break;
          }
        }
      }
      v39 = 0;
      v40 = (char *)v38 - (char *)v23;
      v41 = (char *)v38 - (char *)v23;
      do
      {
        v42 = *(int8x16_t *)((char *)v20 + v39);
        v43 = *(int8x16_t *)((char *)v22 + v39);
        v44 = (uint8x16_t)vqtbl1q_s8(v42, (int8x16_t)xmmword_185005170);
        v45 = (uint8x16_t)vqtbl1q_s8(v43, (int8x16_t)xmmword_185005170);
        v46 = vminq_u16(vmull_u8(*(uint8x8_t *)v43.i8, *(uint8x8_t *)v44.i8), v26);
        v47 = vminq_u16(vmull_high_u8((uint8x16_t)v43, v44), v26);
        v18 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v46, v46, 8uLL), 8uLL), vrsraq_n_u16(v47, v47, 8uLL), 8uLL);
        v48 = vminq_u16(vmull_u8(*(uint8x8_t *)v45.i8, *(uint8x8_t *)v42.i8), v26);
        v49 = vminq_u16(vmull_high_u8(v45, (uint8x16_t)v42), v26);
        a14 = (uint16x8_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v48, v48, 8uLL), 8uLL), vrsraq_n_u16(v49, v49, 8uLL), 8uLL);
        *(uint8x16_t *)((char *)v22 + v39) = vqaddq_u8(vqsubq_u8((uint8x16_t)v43, v18), (uint8x16_t)a14);
        v23 = (unsigned __int32 *)((char *)v23 + v24);
        v41 -= 4;
        v39 += v25;
      }
      while (v41 > 3);
      v22 = (_DWORD *)((char *)v22 + v39);
      v20 = (_DWORD *)((char *)v20 + v39);
      v19 = v19 - v40 + v41;
      goto LABEL_31;
    }
    if (v28)
      break;
    v29 = (int8x16_t *)((char *)v23 + v19);
    v30 = (int8x16_t *)v23;
    do
      v31 = v30++;
    while (v30 <= v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      v32 = v31;
      v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= v29 && !v32->i32[0]);
    if (v32 < v29)
    {
      while (!v32->i8[0])
      {
        v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= v29)
        {
          v32 = (int8x16_t *)((char *)v23 + v19);
          break;
        }
      }
    }
    v33 = (char *)v32 - (char *)v23;
    v34 = ((char *)v32 - (char *)v23) * a6;
    v20 += v34;
    v22 += v34;
    v23 = (unsigned __int32 *)((char *)v23 + v34);
    v19 -= v33;
LABEL_31:
    if (v19 <= 3)
      goto LABEL_34;
  }
  v50 = 0;
  while (1)
  {
    v51 = *(uint8x16_t *)((char *)v20 + v50);
    v52 = *(int8x16_t *)((char *)v22 + v50);
    a14.i32[0] = v28;
    v53 = (uint8x16_t)vqtbl1q_s8((int8x16_t)a14, (int8x16_t)xmmword_185004A30);
    v54 = vmull_u8(*(uint8x8_t *)v51.i8, *(uint8x8_t *)v53.i8);
    v55 = vmull_high_u8(v51, v53);
    v56 = vminq_u16(v54, v26);
    v57 = vminq_u16(v55, v26);
    *(uint8x8_t *)v54.i8 = vqrshrn_n_u16(vrsraq_n_u16(v56, v56, 8uLL), 8uLL);
    *(uint8x8_t *)v18.i8 = vqrshrn_n_u16(vrsraq_n_u16(v57, v57, 8uLL), 8uLL);
    v58 = (uint8x16_t)vqtbl2q_s8(*(int8x16x2_t *)(&v18 - 1), (int8x16_t)xmmword_185005180);
    v59 = vqtbl1q_s8(v52, (int8x16_t)xmmword_185005170);
    v60 = vminq_u16(vmull_u8(*(uint8x8_t *)v52.i8, *(uint8x8_t *)v58.i8), v26);
    v61 = vminq_u16(vmull_high_u8((uint8x16_t)v52, v58), v26);
    v62 = vqsubq_u8((uint8x16_t)v52, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v60, v60, 8uLL), 8uLL), vrsraq_n_u16(v61, v61, 8uLL), 8uLL));
    v63 = vminq_u16(vmull_u8(*(uint8x8_t *)v59.i8, *(uint8x8_t *)v54.i8), v26);
    v64 = vminq_u16(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL), *(uint8x8_t *)v18.i8), v26);
    a14 = vrsraq_n_u16(v64, v64, 8uLL);
    *(uint8x16_t *)((char *)v22 + v50) = vqaddq_u8(v62, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v63, v63, 8uLL), 8uLL), a14, 8uLL));
    v23 = (unsigned __int32 *)((char *)v23 + v24);
    v19 -= 4;
    if (v19 < 4)
      break;
    v28 = *v23;
    v50 += v25;
    if (*v23 - 1 >= 0xFFFFFFFE)
    {
      v20 = (_DWORD *)((char *)v20 + v50);
      v22 = (_DWORD *)((char *)v22 + v50);
      goto LABEL_31;
    }
  }
  v20 = (_DWORD *)((char *)v20 + v25 + v50);
  v22 = (_DWORD *)((char *)v22 + v25 + v50);
LABEL_34:
  v65 = v19 + a17;
  if (v65)
  {
    v66 = (int8x16_t)vdupq_n_s16(0xFE01u);
    do
    {
      a10.i32[0] = *v20;
      v67 = vmovl_u8(a10);
      LOBYTE(v68) = v67.i8[0];
      BYTE1(v68) = v67.i8[2];
      BYTE2(v68) = v67.i8[4];
      HIBYTE(v68) = v67.i8[6];
      v67.i32[0] = *v22;
      v67.i64[0] = vmovl_u8(*(uint8x8_t *)v67.i8).u64[0];
      LOBYTE(v69) = v67.i8[0];
      BYTE1(v69) = v67.i8[2];
      BYTE2(v69) = v67.i8[4];
      HIBYTE(v69) = v67.i8[6];
      LOBYTE(v70) = *(_BYTE *)v23;
      BYTE1(v70) = *(_BYTE *)v23;
      BYTE2(v70) = *(_BYTE *)v23;
      HIBYTE(v70) = *(_BYTE *)v23;
      v71 = vminq_u16(vmull_u8((uint8x8_t)v68, (uint8x8_t)v70), (uint16x8_t)v66);
      v72 = vrsraq_n_u16(v71, v71, 8uLL);
      v73 = vqrshrn_n_u16(v72, 8uLL);
      v74 = vminq_u16(vmull_u8((uint8x8_t)v69, (uint8x8_t)vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16(v73, v72, 8uLL), (int8x8_t)0x404040400000000)), (uint16x8_t)v66);
      v75 = vminq_u16(vmull_u8((uint8x8_t)vqtbl1_s8(vdupq_lane_s8(*(int8x8_t *)v67.i8, 0), (int8x8_t)0xFFFFFFFF00000000), v73), (uint16x8_t)v66);
      v76 = (int8x16_t)vrsraq_n_u16(v75, v75, 8uLL);
      *(uint8x8_t *)v76.i8 = vqadd_u8(vqsub_u8((uint8x8_t)v69, vqrshrn_n_u16(vrsraq_n_u16(v74, v74, 8uLL), 8uLL)), vqrshrn_n_u16((uint16x8_t)v76, 8uLL));
      a10 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v76, v66));
      *v22 = a10.i32[0];
      v77 = &v20[a6];
      v23 = (unsigned __int32 *)((char *)v23 + a6);
      if ((unint64_t)v77 >= v21)
        v78 = -(uint64_t)a5;
      else
        v78 = 0;
      v20 = &v77[v78];
      v22 += a6;
      --v65;
    }
    while (v65);
  }
  *result = v20;
  *a3 = v21;
  *a2 = v22;
  *a4 = v23;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)6,_argb8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, unsigned __int32 **a4, int a5, int a6, int a7, int8x16_t a8, double a9, double a10, uint16x8_t a11, double a12, double a13, double a14, int8x16_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  unint64_t v18;
  unsigned __int32 *v19;
  unint64_t v20;
  _DWORD *v21;
  unsigned __int32 *v22;
  unsigned int v23;
  int8x16_t v24;
  uint64_t v25;
  uint64_t v26;
  uint16x8_t v27;
  unsigned __int32 v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int64_t v33;
  int64_t v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int8x16_t v42;
  uint8x16_t v43;
  int8x16_t v44;
  uint8x16_t v45;
  uint8x16_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint64_t v51;
  int8x16_t v52;
  int8x16_t v53;
  uint8x16_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  int8x16_t v57;
  uint8x16_t v58;
  int8x16_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint64_t v62;
  unsigned int v63;
  uint16x8_t v64;
  uint16x8_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint16x8_t v69;
  uint8x8_t v70;
  uint16x8_t v71;
  unsigned __int32 *v72;
  uint64_t v73;

  v18 = a18;
  v19 = *result;
  v20 = *a3;
  v21 = *a2;
  v22 = *a4;
  if (a18 < 4)
    goto LABEL_37;
  if (a7)
    v23 = 0;
  else
    v23 = -1;
  v24.i64[0] = 0xFF000000FFLL;
  v24.i64[1] = 0xFF000000FFLL;
  a8 = vandq_s8(vdupq_n_s8(v23), v24);
  v25 = 4 * a6;
  v26 = 16 * a6;
  v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a11.i64[0] = -1;
  a11.i64[1] = -1;
  while (1)
  {
    v28 = *v22;
    if (*v22 == -1)
    {
      v35 = (int8x16_t *)((char *)v22 + v18);
      v36 = (int8x16_t *)v22;
      do
        v37 = v36++;
      while (v36 <= v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, (int8x16_t)a11)) & 0x80) != 0);
      do
      {
        v38 = v37;
        v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= v35 && v38->i32[0] == -1);
      if (v38 < v35)
      {
        while (v38->u8[0] == 255)
        {
          v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= v35)
          {
            v38 = (int8x16_t *)((char *)v22 + v18);
            break;
          }
        }
      }
      v39 = 0;
      v40 = (char *)v38 - (char *)v22;
      v41 = (char *)v38 - (char *)v22;
      do
      {
        v42 = *(int8x16_t *)((char *)v21 + v39);
        v43 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v19 + v39), a8);
        v44 = vqtbl1q_s8(v42, (int8x16_t)xmmword_185005170);
        v45 = (uint8x16_t)vbicq_s8(v42, vceqzq_s8(v44));
        v46 = (uint8x16_t)vmvnq_s8(v44);
        v47 = vmull_u8(*(uint8x8_t *)v43.i8, *(uint8x8_t *)v46.i8);
        v48 = vmull_high_u8(v43, v46);
        v49 = vminq_u16(v47, v27);
        v50 = vminq_u16(v48, v27);
        a15 = (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v49, v49, 8uLL), 8uLL), vrsraq_n_u16(v50, v50, 8uLL), 8uLL);
        *(uint8x16_t *)((char *)v21 + v39) = vqaddq_u8(v45, (uint8x16_t)a15);
        v22 = (unsigned __int32 *)((char *)v22 + v25);
        v41 -= 4;
        v39 += v26;
      }
      while (v41 > 3);
      v21 = (_DWORD *)((char *)v21 + v39);
      v19 = (unsigned __int32 *)((char *)v19 + v39);
      v18 = v18 - v40 + v41;
      goto LABEL_34;
    }
    if (v28)
      break;
    v29 = (int8x16_t *)((char *)v22 + v18);
    v30 = (int8x16_t *)v22;
    do
      v31 = v30++;
    while (v30 <= v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      v32 = v31;
      v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= v29 && !v32->i32[0]);
    if (v32 < v29)
    {
      while (!v32->i8[0])
      {
        v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= v29)
        {
          v32 = (int8x16_t *)((char *)v22 + v18);
          break;
        }
      }
    }
    v33 = (char *)v32 - (char *)v22;
    v34 = ((char *)v32 - (char *)v22) * a6;
    v19 += v34;
    v21 += v34;
    v22 = (unsigned __int32 *)((char *)v22 + v34);
    v18 -= v33;
LABEL_34:
    if (v18 <= 3)
      goto LABEL_37;
  }
  v51 = 0;
  while (1)
  {
    v52 = *(int8x16_t *)((char *)v21 + v51);
    a15.i32[0] = v28;
    v53 = vqtbl1q_s8(a15, (int8x16_t)xmmword_185004A30);
    v54 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v19 + v51), a8);
    v55 = vminq_u16(vmull_u8(*(uint8x8_t *)v54.i8, *(uint8x8_t *)v53.i8), v27);
    v56 = vminq_u16(vmull_high_u8(v54, (uint8x16_t)v53), v27);
    v57 = vqtbl1q_s8(v52, (int8x16_t)xmmword_185005170);
    v58 = (uint8x16_t)vbicq_s8(v52, vceqzq_s8(v57));
    v59 = vmvnq_s8(v57);
    v60 = vminq_u16(vmull_u8(vqrshrn_n_u16(vrsraq_n_u16(v55, v55, 8uLL), 8uLL), *(uint8x8_t *)v59.i8), v27);
    v61 = vminq_u16(vmull_u8(vqrshrn_n_u16(vrsraq_n_u16(v56, v56, 8uLL), 8uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL)), v27);
    a15 = vceqzq_s8(v53);
    *(int8x16_t *)((char *)v21 + v51) = vbslq_s8(a15, v52, (int8x16_t)vqaddq_u8(v58, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v60, v60, 8uLL), 8uLL), vrsraq_n_u16(v61, v61, 8uLL), 8uLL)));
    v22 = (unsigned __int32 *)((char *)v22 + v25);
    v18 -= 4;
    if (v18 < 4)
      break;
    v28 = *v22;
    v51 += v26;
    if (*v22 - 1 >= 0xFFFFFFFE)
    {
      v19 = (unsigned __int32 *)((char *)v19 + v51);
      v21 = (_DWORD *)((char *)v21 + v51);
      goto LABEL_34;
    }
  }
  v19 = (unsigned __int32 *)((char *)v19 + v26 + v51);
  v21 = (_DWORD *)((char *)v21 + v26 + v51);
LABEL_37:
  v62 = v18 + a17;
  if (v62)
  {
    if (a7)
      v63 = 0;
    else
      v63 = -1;
    *(int8x8_t *)a8.i8 = vand_s8(vdup_n_s8(v63), (int8x8_t)0xFF000000FFLL);
    v64 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a11.i32[0] = *v19;
      v65 = vmovl_u8(*(uint8x8_t *)a11.i8);
      LOBYTE(v66) = v65.i8[0];
      BYTE1(v66) = v65.i8[2];
      BYTE2(v66) = v65.i8[4];
      HIBYTE(v66) = v65.i8[6];
      v65.i32[0] = *v21;
      v65.i64[0] = vmovl_u8(*(uint8x8_t *)v65.i8).u64[0];
      LOBYTE(v67) = v65.i8[0];
      BYTE1(v67) = v65.i8[2];
      BYTE2(v67) = v65.i8[4];
      HIBYTE(v67) = v65.i8[6];
      LOBYTE(v68) = *(_BYTE *)v22;
      BYTE1(v68) = *(_BYTE *)v22;
      BYTE2(v68) = *(_BYTE *)v22;
      HIBYTE(v68) = *(_BYTE *)v22;
      v69 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v66, *(int8x8_t *)a8.i8), (uint8x8_t)v68), v64);
      *(int8x8_t *)v65.i8 = vqtbl1_s8(vdupq_lane_s8(*(int8x8_t *)v65.i8, 0), (int8x8_t)0xFFFFFFFF00000000);
      v70 = (uint8x8_t)vbic_s8((int8x8_t)v67, vceqz_s8(*(int8x8_t *)v65.i8));
      v71 = vminq_u16(vmull_u8(vqrshrn_n_u16(vrsraq_n_u16(v69, v69, 8uLL), 8uLL), (uint8x8_t)vmvn_s8(*(int8x8_t *)v65.i8)), v64);
      a11 = vrsraq_n_u16(v71, v71, 8uLL);
      *(int8x8_t *)a11.i8 = vbsl_s8(vceqz_s8((int8x8_t)v68), (int8x8_t)v67, (int8x8_t)vqadd_u8(v70, vqrshrn_n_u16(a11, 8uLL)));
      *(int8x8_t *)a11.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a11, a8));
      *v21 = a11.i32[0];
      v72 = &v19[a6];
      v22 = (unsigned __int32 *)((char *)v22 + a6);
      if ((unint64_t)v72 >= v20)
        v73 = -(uint64_t)a5;
      else
        v73 = 0;
      v19 = &v72[v73];
      v21 += a6;
      --v62;
    }
    while (v62);
  }
  *result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)7,_argb8_t>(unsigned __int32 **result, unsigned __int32 **a2, unint64_t *a3, unsigned __int32 **a4, int a5, int a6, int8x16_t a7, double a8, uint16x8_t a9, double a10, __n128 a11, double a12, uint16x8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  unint64_t v17;
  unsigned __int32 *v18;
  unint64_t v19;
  unsigned __int32 *v20;
  unsigned __int32 *v21;
  uint64_t v22;
  uint64_t v23;
  uint16x8_t v24;
  unsigned __int32 v25;
  int8x16_t *v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int64_t v30;
  int64_t v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  uint8x16_t v39;
  uint8x16_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint64_t v44;
  uint8x16_t v45;
  uint8x16_t v46;
  uint8x16_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint8x16_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint64_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  unsigned int v56;
  uint16x8_t v57;
  unsigned __int32 *v58;
  uint64_t v59;

  v17 = a17;
  v18 = *result;
  v19 = *a3;
  v20 = *a2;
  v21 = *a4;
  if (a17 < 4)
    goto LABEL_34;
  v22 = 4 * a6;
  v23 = 16 * a6;
  a7.i64[1] = 0xC0C0C0C08080808;
  v24 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    v25 = *v21;
    if (*v21 == -1)
    {
      v32 = (int8x16_t *)((char *)v21 + v17);
      v33 = (int8x16_t *)v21;
      do
        v34 = v33++;
      while (v33 <= v32 && (vminvq_u8((uint8x16_t)vceqq_s8(*v34, (int8x16_t)a9)) & 0x80) != 0);
      do
      {
        v35 = v34;
        v34 = (int8x16_t *)((char *)v34 + 4);
      }
      while (v34 <= v32 && v35->i32[0] == -1);
      if (v35 < v32)
      {
        while (v35->u8[0] == 255)
        {
          v35 = (int8x16_t *)((char *)v35 + 1);
          if (v35 >= v32)
          {
            v35 = (int8x16_t *)((char *)v21 + v17);
            break;
          }
        }
      }
      v36 = 0;
      v37 = (char *)v35 - (char *)v21;
      v38 = (char *)v35 - (char *)v21;
      do
      {
        v39 = *(uint8x16_t *)((char *)v20 + v36);
        v40 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)((char *)v18 + v36), (int8x16_t)xmmword_185005170);
        a13 = vmull_u8(*(uint8x8_t *)v39.i8, *(uint8x8_t *)v40.i8);
        v41 = vmull_high_u8(v39, v40);
        v42 = vminq_u16(a13, v24);
        v43 = vminq_u16(v41, v24);
        a11 = (__n128)vrsraq_n_u16(v43, v43, 8uLL);
        *(uint8x16_t *)((char *)v20 + v36) = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v42, v42, 8uLL), 8uLL), (uint16x8_t)a11, 8uLL);
        v21 = (unsigned __int32 *)((char *)v21 + v22);
        v38 -= 4;
        v36 += v23;
      }
      while (v38 > 3);
      v20 = (unsigned __int32 *)((char *)v20 + v36);
      v18 = (unsigned __int32 *)((char *)v18 + v36);
      v17 = v17 - v37 + v38;
      goto LABEL_31;
    }
    if (v25)
      break;
    v26 = (int8x16_t *)((char *)v21 + v17);
    v27 = (int8x16_t *)v21;
    do
    {
      v28 = v27++;
      if (v27 > v26)
        break;
      a11 = (__n128)vceqzq_s8(*v28);
    }
    while ((vminvq_u8((uint8x16_t)a11) & 0x80) != 0);
    do
    {
      v29 = v28;
      v28 = (int8x16_t *)((char *)v28 + 4);
    }
    while (v28 <= v26 && !v29->i32[0]);
    if (v29 < v26)
    {
      while (!v29->i8[0])
      {
        v29 = (int8x16_t *)((char *)v29 + 1);
        if (v29 >= v26)
        {
          v29 = (int8x16_t *)((char *)v21 + v17);
          break;
        }
      }
    }
    v30 = (char *)v29 - (char *)v21;
    v31 = ((char *)v29 - (char *)v21) * a6;
    v18 += v31;
    v20 += v31;
    v21 = (unsigned __int32 *)((char *)v21 + v31);
    v17 -= v30;
LABEL_31:
    if (v17 <= 3)
      goto LABEL_34;
  }
  v44 = 0;
  while (1)
  {
    v45 = *(uint8x16_t *)((char *)v20 + v44);
    a13.i32[0] = v25;
    v46 = (uint8x16_t)vqtbl1q_s8((int8x16_t)a13, (int8x16_t)xmmword_185004A30);
    v47 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)((char *)v18 + v44), (int8x16_t)xmmword_185005170);
    v48 = vminq_u16(vmull_u8(*(uint8x8_t *)v46.i8, *(uint8x8_t *)v47.i8), v24);
    v49 = vminq_u16(vmull_high_u8(v46, v47), v24);
    v50 = vqsubq_u8(v46, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v48, v48, 8uLL), 8uLL), vrsraq_n_u16(v49, v49, 8uLL), 8uLL));
    v51 = vminq_u16(vmull_u8(*(uint8x8_t *)v45.i8, *(uint8x8_t *)v50.i8), v24);
    v52 = vminq_u16(vmull_high_u8(v45, v50), v24);
    a13 = (uint16x8_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v51, v51, 8uLL), 8uLL), vrsraq_n_u16(v52, v52, 8uLL), 8uLL);
    a11 = (__n128)vqsubq_u8(v45, (uint8x16_t)a13);
    *(__n128 *)((char *)v20 + v44) = a11;
    v21 = (unsigned __int32 *)((char *)v21 + v22);
    v17 -= 4;
    if (v17 < 4)
      break;
    v25 = *v21;
    v44 += v23;
    if (*v21 - 1 >= 0xFFFFFFFE)
    {
      v18 = (unsigned __int32 *)((char *)v18 + v44);
      v20 = (unsigned __int32 *)((char *)v20 + v44);
      goto LABEL_31;
    }
  }
  v18 = (unsigned __int32 *)((char *)v18 + v23 + v44);
  v20 = (unsigned __int32 *)((char *)v20 + v23 + v44);
LABEL_34:
  v53 = v17 + a16;
  if (v53)
  {
    a7.i64[0] = 0xFFFFFFFF00000000;
    v54 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a9.i32[0] = *v20;
      v55 = vmovl_u8(*(uint8x8_t *)a9.i8);
      LOBYTE(v56) = v55.i8[0];
      BYTE1(v56) = v55.i8[2];
      BYTE2(v56) = v55.i8[4];
      HIBYTE(v56) = v55.i8[6];
      v55.i8[0] = *(_BYTE *)v21;
      v55.i8[1] = *(_BYTE *)v21;
      v55.i8[2] = *(_BYTE *)v21;
      v55.i8[3] = *(_BYTE *)v21;
      a11.n128_u32[0] = *v18;
      a11.n128_u64[1] = a11.n128_u64[0];
      a11 = (__n128)vminq_u16(vmull_u8((uint8x8_t)v55.u32[0], (uint8x8_t)vqtbl1_s8((int8x16_t)a11, (int8x8_t)0xFFFFFFFF00000000)), v54);
      a11.n128_u64[0] = (unint64_t)vqrshrn_n_u16(vrsraq_n_u16((uint16x8_t)a11, (uint16x8_t)a11, 8uLL), 8uLL);
      v57 = vminq_u16(vmull_u8((uint8x8_t)v56, vqsub_u8((uint8x8_t)v55.u32[0], (uint8x8_t)a11.n128_u64[0])), v54);
      a9 = vrsraq_n_u16(v57, v57, 8uLL);
      *(uint8x8_t *)a9.i8 = vqsub_u8((uint8x8_t)v56, vqrshrn_n_u16(a9, 8uLL));
      *(int8x8_t *)a9.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a9, a7));
      *v20 = a9.i32[0];
      v58 = &v18[a6];
      v21 = (unsigned __int32 *)((char *)v21 + a6);
      if ((unint64_t)v58 >= v19)
        v59 = -(uint64_t)a5;
      else
        v59 = 0;
      v18 = &v58[v59];
      v20 += a6;
      --v53;
    }
    while (v53);
  }
  *result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)8,_argb8_t>(unsigned __int32 **result, unsigned __int32 **a2, unint64_t *a3, unsigned __int32 **a4, int a5, int a6, int8x16_t a7, double a8, uint16x8_t a9, double a10, __n128 a11, double a12, uint8x16_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  unint64_t v17;
  unsigned __int32 *v18;
  unint64_t v19;
  unsigned __int32 *v20;
  unsigned __int32 *v21;
  uint64_t v22;
  uint64_t v23;
  uint16x8_t v24;
  unsigned __int32 v25;
  int8x16_t *v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int64_t v30;
  int64_t v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  uint8x16_t v39;
  uint8x16_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint64_t v43;
  int8x16_t v44;
  uint8x16_t v45;
  uint8x16_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint64_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  unsigned int v56;
  uint16x8_t v57;
  uint16x8_t v58;
  unsigned __int32 *v59;
  uint64_t v60;

  v17 = a17;
  v18 = *result;
  v19 = *a3;
  v20 = *a2;
  v21 = *a4;
  if (a17 < 4)
    goto LABEL_34;
  v22 = 4 * a6;
  v23 = 16 * a6;
  a7.i64[1] = 0xC0C0C0C08080808;
  v24 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    v25 = *v21;
    if (*v21 == -1)
    {
      v32 = (int8x16_t *)((char *)v21 + v17);
      v33 = (int8x16_t *)v21;
      do
        v34 = v33++;
      while (v33 <= v32 && (vminvq_u8((uint8x16_t)vceqq_s8(*v34, (int8x16_t)a9)) & 0x80) != 0);
      do
      {
        v35 = v34;
        v34 = (int8x16_t *)((char *)v34 + 4);
      }
      while (v34 <= v32 && v35->i32[0] == -1);
      if (v35 < v32)
      {
        while (v35->u8[0] == 255)
        {
          v35 = (int8x16_t *)((char *)v35 + 1);
          if (v35 >= v32)
          {
            v35 = (int8x16_t *)((char *)v21 + v17);
            break;
          }
        }
      }
      v36 = 0;
      v37 = (char *)v35 - (char *)v21;
      v38 = (char *)v35 - (char *)v21;
      do
      {
        v39 = *(uint8x16_t *)((char *)v20 + v36);
        v40 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)((char *)v18 + v36), (int8x16_t)xmmword_185005170);
        v41 = vminq_u16(vmull_u8(*(uint8x8_t *)v39.i8, *(uint8x8_t *)v40.i8), v24);
        v42 = vminq_u16(vmull_high_u8(v39, v40), v24);
        a13 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v41, v41, 8uLL), 8uLL), vrsraq_n_u16(v42, v42, 8uLL), 8uLL);
        a11 = (__n128)vqsubq_u8(v39, a13);
        *(__n128 *)((char *)v20 + v36) = a11;
        v21 = (unsigned __int32 *)((char *)v21 + v22);
        v38 -= 4;
        v36 += v23;
      }
      while (v38 > 3);
      v20 = (unsigned __int32 *)((char *)v20 + v36);
      v18 = (unsigned __int32 *)((char *)v18 + v36);
      v17 = v17 - v37 + v38;
      goto LABEL_31;
    }
    if (v25)
      break;
    v26 = (int8x16_t *)((char *)v21 + v17);
    v27 = (int8x16_t *)v21;
    do
    {
      v28 = v27++;
      if (v27 > v26)
        break;
      a11 = (__n128)vceqzq_s8(*v28);
    }
    while ((vminvq_u8((uint8x16_t)a11) & 0x80) != 0);
    do
    {
      v29 = v28;
      v28 = (int8x16_t *)((char *)v28 + 4);
    }
    while (v28 <= v26 && !v29->i32[0]);
    if (v29 < v26)
    {
      while (!v29->i8[0])
      {
        v29 = (int8x16_t *)((char *)v29 + 1);
        if (v29 >= v26)
        {
          v29 = (int8x16_t *)((char *)v21 + v17);
          break;
        }
      }
    }
    v30 = (char *)v29 - (char *)v21;
    v31 = ((char *)v29 - (char *)v21) * a6;
    v18 += v31;
    v20 += v31;
    v21 = (unsigned __int32 *)((char *)v21 + v31);
    v17 -= v30;
LABEL_31:
    if (v17 <= 3)
      goto LABEL_34;
  }
  v43 = 0;
  while (1)
  {
    v44 = *(int8x16_t *)((char *)v20 + v43);
    a13.i32[0] = v25;
    v45 = (uint8x16_t)vqtbl1q_s8((int8x16_t)a13, (int8x16_t)xmmword_185004A30);
    v46 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)((char *)v18 + v43), (int8x16_t)xmmword_185005170);
    v47 = vmull_u8(*(uint8x8_t *)v46.i8, *(uint8x8_t *)v45.i8);
    v48 = vmull_high_u8(v46, v45);
    v49 = vminq_u16(v47, v24);
    v50 = vminq_u16(v48, v24);
    v51 = vminq_u16(vmull_u8(*(uint8x8_t *)v44.i8, vqrshrn_n_u16(vrsraq_n_u16(v49, v49, 8uLL), 8uLL)), v24);
    v52 = vminq_u16(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL), vqrshrn_n_u16(vrsraq_n_u16(v50, v50, 8uLL), 8uLL)), v24);
    a13 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v51, v51, 8uLL), 8uLL), vrsraq_n_u16(v52, v52, 8uLL), 8uLL);
    a11 = (__n128)vqsubq_u8((uint8x16_t)v44, a13);
    *(__n128 *)((char *)v20 + v43) = a11;
    v21 = (unsigned __int32 *)((char *)v21 + v22);
    v17 -= 4;
    if (v17 < 4)
      break;
    v25 = *v21;
    v43 += v23;
    if (*v21 - 1 >= 0xFFFFFFFE)
    {
      v18 = (unsigned __int32 *)((char *)v18 + v43);
      v20 = (unsigned __int32 *)((char *)v20 + v43);
      goto LABEL_31;
    }
  }
  v18 = (unsigned __int32 *)((char *)v18 + v23 + v43);
  v20 = (unsigned __int32 *)((char *)v20 + v23 + v43);
LABEL_34:
  v53 = v17 + a16;
  if (v53)
  {
    a7.i64[0] = 0xFFFFFFFF00000000;
    v54 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a9.i32[0] = *v20;
      v55 = vmovl_u8(*(uint8x8_t *)a9.i8);
      LOBYTE(v56) = v55.i8[0];
      BYTE1(v56) = v55.i8[2];
      BYTE2(v56) = v55.i8[4];
      HIBYTE(v56) = v55.i8[6];
      v55.i8[0] = *(_BYTE *)v21;
      v55.i8[1] = *(_BYTE *)v21;
      v55.i8[2] = *(_BYTE *)v21;
      v55.i8[3] = *(_BYTE *)v21;
      a11.n128_u32[0] = *v18;
      a11.n128_u64[1] = a11.n128_u64[0];
      a11.n128_u64[0] = (unint64_t)vqtbl1_s8((int8x16_t)a11, (int8x8_t)0xFFFFFFFF00000000);
      v57 = vminq_u16(vmull_u8((uint8x8_t)a11.n128_u64[0], (uint8x8_t)v55.u32[0]), v54);
      v58 = vminq_u16(vmull_u8((uint8x8_t)v56, vqrshrn_n_u16(vrsraq_n_u16(v57, v57, 8uLL), 8uLL)), v54);
      a9 = vrsraq_n_u16(v58, v58, 8uLL);
      *(uint8x8_t *)a9.i8 = vqsub_u8((uint8x8_t)v56, vqrshrn_n_u16(a9, 8uLL));
      *(int8x8_t *)a9.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a9, a7));
      *v20 = a9.i32[0];
      v59 = &v18[a6];
      v21 = (unsigned __int32 *)((char *)v21 + a6);
      if ((unint64_t)v59 >= v19)
        v60 = -(uint64_t)a5;
      else
        v60 = 0;
      v18 = &v59[v60];
      v20 += a6;
      --v53;
    }
    while (v53);
  }
  *result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)9,_argb8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, unsigned __int32 **a4, int a5, int a6, double a7, double a8, uint16x8_t a9, double a10, double a11, double a12, double a13, uint16x8_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  uint16x8_t v18;
  unint64_t v19;
  unsigned __int32 *v20;
  unint64_t v21;
  _DWORD *v22;
  unsigned __int32 *v23;
  uint64_t v24;
  uint64_t v25;
  uint16x8_t v26;
  unsigned __int32 v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int64_t v32;
  int64_t v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  int8x16_t v41;
  int8x16_t v42;
  uint8x16_t v43;
  uint8x16_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint64_t v51;
  uint8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint8x16_t v58;
  int8x16_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint8x16_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  uint16x8_t v65;
  uint16x8_t v66;
  uint64_t v67;
  int8x16_t v68;
  uint16x8_t v69;
  unsigned int v70;
  uint16x8_t v71;
  unsigned int v72;
  uint16x8_t v73;
  uint16x8_t v74;
  int8x16_t v75;
  uint8x8_t v76;
  uint16x8_t v77;
  unsigned __int32 *v78;
  uint64_t v79;

  v19 = a18;
  v20 = *result;
  v21 = *a3;
  v22 = *a2;
  v23 = *a4;
  if (a18 < 4)
    goto LABEL_34;
  v24 = 4 * a6;
  v25 = 16 * a6;
  v26 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    v27 = *v23;
    if (*v23 == -1)
    {
      v34 = (int8x16_t *)((char *)v23 + v19);
      v35 = (int8x16_t *)v23;
      do
        v36 = v35++;
      while (v35 <= v34 && (vminvq_u8((uint8x16_t)vceqq_s8(*v36, (int8x16_t)a9)) & 0x80) != 0);
      do
      {
        v37 = v36;
        v36 = (int8x16_t *)((char *)v36 + 4);
      }
      while (v36 <= v34 && v37->i32[0] == -1);
      if (v37 < v34)
      {
        while (v37->u8[0] == 255)
        {
          v37 = (int8x16_t *)((char *)v37 + 1);
          if (v37 >= v34)
          {
            v37 = (int8x16_t *)((char *)v23 + v19);
            break;
          }
        }
      }
      v38 = 0;
      v39 = (char *)v37 - (char *)v23;
      v40 = (char *)v37 - (char *)v23;
      do
      {
        v41 = *(int8x16_t *)((char *)v20 + v38);
        v42 = *(int8x16_t *)((char *)v22 + v38);
        v43 = (uint8x16_t)vqtbl1q_s8(v41, (int8x16_t)xmmword_185005170);
        v44 = (uint8x16_t)vqtbl1q_s8(vmvnq_s8(v42), (int8x16_t)xmmword_185005170);
        v18 = vmull_u8(*(uint8x8_t *)v41.i8, *(uint8x8_t *)v44.i8);
        v45 = vmull_high_u8((uint8x16_t)v41, v44);
        v46 = vmull_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v43.i8);
        v47 = vmull_high_u8((uint8x16_t)v42, v43);
        a14 = vqaddq_u16(v18, v46);
        v48 = vqaddq_u16(v45, v47);
        v49 = vminq_u16(a14, v26);
        v50 = vminq_u16(v48, v26);
        *(uint8x16_t *)((char *)v22 + v38) = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v49, v49, 8uLL), 8uLL), vrsraq_n_u16(v50, v50, 8uLL), 8uLL);
        v23 = (unsigned __int32 *)((char *)v23 + v24);
        v40 -= 4;
        v38 += v25;
      }
      while (v40 > 3);
      v22 = (_DWORD *)((char *)v22 + v38);
      v20 = (unsigned __int32 *)((char *)v20 + v38);
      v19 = v19 - v39 + v40;
      goto LABEL_31;
    }
    if (v27)
      break;
    v28 = (int8x16_t *)((char *)v23 + v19);
    v29 = (int8x16_t *)v23;
    do
      v30 = v29++;
    while (v29 <= v28 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v30)) & 0x80) != 0);
    do
    {
      v31 = v30;
      v30 = (int8x16_t *)((char *)v30 + 4);
    }
    while (v30 <= v28 && !v31->i32[0]);
    if (v31 < v28)
    {
      while (!v31->i8[0])
      {
        v31 = (int8x16_t *)((char *)v31 + 1);
        if (v31 >= v28)
        {
          v31 = (int8x16_t *)((char *)v23 + v19);
          break;
        }
      }
    }
    v32 = (char *)v31 - (char *)v23;
    v33 = ((char *)v31 - (char *)v23) * a6;
    v20 += v33;
    v22 += v33;
    v23 = (unsigned __int32 *)((char *)v23 + v33);
    v19 -= v32;
LABEL_31:
    if (v19 <= 3)
      goto LABEL_34;
  }
  v51 = 0;
  while (1)
  {
    v52 = *(uint8x16_t *)((char *)v20 + v51);
    v53 = *(int8x16_t *)((char *)v22 + v51);
    a14.i32[0] = v27;
    v54 = vqtbl1q_s8((int8x16_t)a14, (int8x16_t)xmmword_185004A30);
    v55 = vminq_u16(vmull_u8(*(uint8x8_t *)v52.i8, *(uint8x8_t *)v54.i8), v26);
    v56 = vminq_u16(vmull_high_u8(v52, (uint8x16_t)v54), v26);
    v57 = vrsraq_n_u16(v55, v55, 8uLL);
    *(uint8x8_t *)v57.i8 = vqrshrn_n_u16(v57, 8uLL);
    *(uint8x8_t *)v18.i8 = vqrshrn_n_u16(vrsraq_n_u16(v56, v56, 8uLL), 8uLL);
    v58 = (uint8x16_t)vqtbl2q_s8(*(int8x16x2_t *)(&v18 - 1), (int8x16_t)xmmword_185005180);
    v59 = vqtbl1q_s8(vmvnq_s8(v53), (int8x16_t)xmmword_185005170);
    v60 = vmull_u8(*(uint8x8_t *)v57.i8, *(uint8x8_t *)v59.i8);
    v61 = vmull_u8(*(uint8x8_t *)v18.i8, (uint8x8_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL));
    v62 = (uint8x16_t)vmvnq_s8(v54);
    v18 = vqaddq_u16(v60, vmull_u8(*(uint8x8_t *)v53.i8, *(uint8x8_t *)v62.i8));
    a14 = vqaddq_u16(v61, vmull_high_u8((uint8x16_t)v53, v62));
    v63 = vmull_u8(*(uint8x8_t *)v53.i8, *(uint8x8_t *)v58.i8);
    v64 = vmull_high_u8((uint8x16_t)v53, v58);
    v65 = vminq_u16(vqaddq_u16(v18, v63), v26);
    v66 = vminq_u16(vqaddq_u16(a14, v64), v26);
    *(uint8x16_t *)((char *)v22 + v51) = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v65, v65, 8uLL), 8uLL), vrsraq_n_u16(v66, v66, 8uLL), 8uLL);
    v23 = (unsigned __int32 *)((char *)v23 + v24);
    v19 -= 4;
    if (v19 < 4)
      break;
    v27 = *v23;
    v51 += v25;
    if (*v23 - 1 >= 0xFFFFFFFE)
    {
      v20 = (unsigned __int32 *)((char *)v20 + v51);
      v22 = (_DWORD *)((char *)v22 + v51);
      goto LABEL_31;
    }
  }
  v20 = (unsigned __int32 *)((char *)v20 + v25 + v51);
  v22 = (_DWORD *)((char *)v22 + v25 + v51);
LABEL_34:
  v67 = v19 + a17;
  if (v67)
  {
    v68 = (int8x16_t)vdupq_n_s16(0xFE01u);
    do
    {
      a9.i32[0] = *v20;
      v69 = vmovl_u8(*(uint8x8_t *)a9.i8);
      LOBYTE(v70) = v69.i8[0];
      BYTE1(v70) = v69.i8[2];
      BYTE2(v70) = v69.i8[4];
      HIBYTE(v70) = v69.i8[6];
      v69.i32[0] = *v22;
      v71 = vmovl_u8(*(uint8x8_t *)v69.i8);
      LOBYTE(v72) = v71.i8[0];
      BYTE1(v72) = v71.i8[2];
      BYTE2(v72) = v71.i8[4];
      HIBYTE(v72) = v71.i8[6];
      v71.i8[0] = *(_BYTE *)v23;
      v71.i8[1] = *(_BYTE *)v23;
      v71.i8[2] = *(_BYTE *)v23;
      v71.i8[3] = *(_BYTE *)v23;
      v73 = vminq_u16(vmull_u8((uint8x8_t)v70, (uint8x8_t)v71.u32[0]), (uint16x8_t)v68);
      v74 = vrsraq_n_u16(v73, v73, 8uLL);
      *(int8x8_t *)v75.i8 = vmvn_s8((int8x8_t)v72);
      v75.i64[1] = v75.i64[0];
      v76 = vqrshrn_n_u16(v74, 8uLL);
      v77 = vminq_u16(vqaddq_u16(vqaddq_u16(vmull_u8(v76, (uint8x8_t)vqtbl1_s8(v75, (int8x8_t)0x404040400000000)), vmull_u8((uint8x8_t)v72, (uint8x8_t)vmvn_s8((int8x8_t)v71.u32[0]))), vmull_u8((uint8x8_t)v72, (uint8x8_t)vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16(v76, v74, 8uLL), (int8x8_t)0x404040400000000))), (uint16x8_t)v68);
      a9 = vrsraq_n_u16(v77, v77, 8uLL);
      *(uint8x8_t *)a9.i8 = vqrshrn_n_u16(a9, 8uLL);
      *(int8x8_t *)a9.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a9, v68));
      *v22 = a9.i32[0];
      v78 = &v20[a6];
      v23 = (unsigned __int32 *)((char *)v23 + a6);
      if ((unint64_t)v78 >= v21)
        v79 = -(uint64_t)a5;
      else
        v79 = 0;
      v20 = &v78[v79];
      v22 += a6;
      --v67;
    }
    while (v67);
  }
  *result = v20;
  *a3 = v21;
  *a2 = v22;
  *a4 = v23;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)10,_argb8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, unsigned __int32 **a4, int a5, int a6, double a7, double a8, uint16x8_t a9, double a10, double a11, double a12, double a13, uint16x8_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  uint16x8_t v18;
  unint64_t v19;
  unsigned __int32 *v20;
  unint64_t v21;
  _DWORD *v22;
  unsigned __int32 *v23;
  uint64_t v24;
  uint64_t v25;
  uint16x8_t v26;
  unsigned __int32 v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int64_t v32;
  int64_t v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  int8x16_t v41;
  int8x16_t v42;
  uint8x16_t v43;
  uint8x16_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint64_t v49;
  uint8x16_t v50;
  int8x16_t v51;
  uint8x16_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  int8x16_t v57;
  uint8x16_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  uint16x8_t v63;
  uint64_t v64;
  int8x16_t v65;
  uint16x8_t v66;
  unsigned int v67;
  uint16x8_t v68;
  unsigned int v69;
  uint16x8_t v70;
  int8x16_t v71;
  int8x16_t v72;
  uint16x8_t v73;
  unsigned __int32 *v74;
  uint64_t v75;

  v19 = a18;
  v20 = *result;
  v21 = *a3;
  v22 = *a2;
  v23 = *a4;
  if (a18 < 4)
    goto LABEL_34;
  v24 = 4 * a6;
  v25 = 16 * a6;
  v26 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    v27 = *v23;
    if (*v23 == -1)
    {
      v34 = (int8x16_t *)((char *)v23 + v19);
      v35 = (int8x16_t *)v23;
      do
        v36 = v35++;
      while (v35 <= v34 && (vminvq_u8((uint8x16_t)vceqq_s8(*v36, (int8x16_t)a9)) & 0x80) != 0);
      do
      {
        v37 = v36;
        v36 = (int8x16_t *)((char *)v36 + 4);
      }
      while (v36 <= v34 && v37->i32[0] == -1);
      if (v37 < v34)
      {
        while (v37->u8[0] == 255)
        {
          v37 = (int8x16_t *)((char *)v37 + 1);
          if (v37 >= v34)
          {
            v37 = (int8x16_t *)((char *)v23 + v19);
            break;
          }
        }
      }
      v38 = 0;
      v39 = (char *)v37 - (char *)v23;
      v40 = (char *)v37 - (char *)v23;
      do
      {
        v41 = *(int8x16_t *)((char *)v20 + v38);
        v42 = *(int8x16_t *)((char *)v22 + v38);
        v43 = (uint8x16_t)vqtbl1q_s8(vmvnq_s8(v42), (int8x16_t)xmmword_185005170);
        v44 = (uint8x16_t)vqtbl1q_s8(vmvnq_s8(v41), (int8x16_t)xmmword_185005170);
        v18 = vmull_u8(*(uint8x8_t *)v41.i8, *(uint8x8_t *)v43.i8);
        v45 = vmull_high_u8((uint8x16_t)v41, v43);
        a14 = vqaddq_u16(v18, vmull_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v44.i8));
        v46 = vqaddq_u16(v45, vmull_high_u8((uint8x16_t)v42, v44));
        v47 = vminq_u16(a14, v26);
        v48 = vminq_u16(v46, v26);
        *(uint8x16_t *)((char *)v22 + v38) = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v47, v47, 8uLL), 8uLL), vrsraq_n_u16(v48, v48, 8uLL), 8uLL);
        v23 = (unsigned __int32 *)((char *)v23 + v24);
        v40 -= 4;
        v38 += v25;
      }
      while (v40 > 3);
      v22 = (_DWORD *)((char *)v22 + v38);
      v20 = (unsigned __int32 *)((char *)v20 + v38);
      v19 = v19 - v39 + v40;
      goto LABEL_31;
    }
    if (v27)
      break;
    v28 = (int8x16_t *)((char *)v23 + v19);
    v29 = (int8x16_t *)v23;
    do
      v30 = v29++;
    while (v29 <= v28 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v30)) & 0x80) != 0);
    do
    {
      v31 = v30;
      v30 = (int8x16_t *)((char *)v30 + 4);
    }
    while (v30 <= v28 && !v31->i32[0]);
    if (v31 < v28)
    {
      while (!v31->i8[0])
      {
        v31 = (int8x16_t *)((char *)v31 + 1);
        if (v31 >= v28)
        {
          v31 = (int8x16_t *)((char *)v23 + v19);
          break;
        }
      }
    }
    v32 = (char *)v31 - (char *)v23;
    v33 = ((char *)v31 - (char *)v23) * a6;
    v20 += v33;
    v22 += v33;
    v23 = (unsigned __int32 *)((char *)v23 + v33);
    v19 -= v32;
LABEL_31:
    if (v19 <= 3)
      goto LABEL_34;
  }
  v49 = 0;
  while (1)
  {
    v50 = *(uint8x16_t *)((char *)v20 + v49);
    v51 = *(int8x16_t *)((char *)v22 + v49);
    a14.i32[0] = v27;
    v52 = (uint8x16_t)vqtbl1q_s8((int8x16_t)a14, (int8x16_t)xmmword_185004A30);
    v53 = vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v52.i8);
    v54 = vmull_high_u8(v50, v52);
    v55 = vminq_u16(v53, v26);
    v56 = vminq_u16(v54, v26);
    *(uint8x8_t *)v53.i8 = vqrshrn_n_u16(vrsraq_n_u16(v55, v55, 8uLL), 8uLL);
    *(uint8x8_t *)v18.i8 = vqrshrn_n_u16(vrsraq_n_u16(v56, v56, 8uLL), 8uLL);
    v57 = vqtbl1q_s8(vmvnq_s8(v51), (int8x16_t)xmmword_185005170);
    v58 = (uint8x16_t)vmvnq_s8(vqtbl2q_s8(*(int8x16x2_t *)(&v18 - 1), (int8x16_t)xmmword_185005180));
    v59 = vmull_u8(*(uint8x8_t *)v53.i8, *(uint8x8_t *)v57.i8);
    a14 = vmull_u8(*(uint8x8_t *)v18.i8, (uint8x8_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL));
    v60 = vmull_u8(*(uint8x8_t *)v51.i8, *(uint8x8_t *)v58.i8);
    v61 = vmull_high_u8((uint8x16_t)v51, v58);
    v62 = vminq_u16(vqaddq_u16(v59, v60), v26);
    v63 = vminq_u16(vqaddq_u16(a14, v61), v26);
    *(uint8x16_t *)((char *)v22 + v49) = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v62, v62, 8uLL), 8uLL), vrsraq_n_u16(v63, v63, 8uLL), 8uLL);
    v23 = (unsigned __int32 *)((char *)v23 + v24);
    v19 -= 4;
    if (v19 < 4)
      break;
    v27 = *v23;
    v49 += v25;
    if (*v23 - 1 >= 0xFFFFFFFE)
    {
      v20 = (unsigned __int32 *)((char *)v20 + v49);
      v22 = (_DWORD *)((char *)v22 + v49);
      goto LABEL_31;
    }
  }
  v20 = (unsigned __int32 *)((char *)v20 + v25 + v49);
  v22 = (_DWORD *)((char *)v22 + v25 + v49);
LABEL_34:
  v64 = v19 + a17;
  if (v64)
  {
    v65 = (int8x16_t)vdupq_n_s16(0xFE01u);
    do
    {
      a9.i32[0] = *v20;
      v66 = vmovl_u8(*(uint8x8_t *)a9.i8);
      LOBYTE(v67) = v66.i8[0];
      BYTE1(v67) = v66.i8[2];
      BYTE2(v67) = v66.i8[4];
      HIBYTE(v67) = v66.i8[6];
      v66.i32[0] = *v22;
      v68 = vmovl_u8(*(uint8x8_t *)v66.i8);
      LOBYTE(v69) = v68.i8[0];
      BYTE1(v69) = v68.i8[2];
      BYTE2(v69) = v68.i8[4];
      HIBYTE(v69) = v68.i8[6];
      v68.i8[0] = *(_BYTE *)v23;
      v68.i8[1] = *(_BYTE *)v23;
      v68.i8[2] = *(_BYTE *)v23;
      v68.i8[3] = *(_BYTE *)v23;
      v70 = vminq_u16(vmull_u8((uint8x8_t)v67, (uint8x8_t)v68.u32[0]), (uint16x8_t)v65);
      *(uint8x8_t *)v70.i8 = vqrshrn_n_u16(vrsraq_n_u16(v70, v70, 8uLL), 8uLL);
      *(int8x8_t *)v71.i8 = vmvn_s8((int8x8_t)v69);
      v71.i64[1] = v71.i64[0];
      *(int8x8_t *)v72.i8 = vmvn_s8(*(int8x8_t *)v70.i8);
      v72.i64[1] = v72.i64[0];
      v73 = vminq_u16(vqaddq_u16(vmull_u8(*(uint8x8_t *)v70.i8, (uint8x8_t)vqtbl1_s8(v71, (int8x8_t)0x404040400000000)), vmull_u8((uint8x8_t)v69, (uint8x8_t)vqtbl1_s8(v72, (int8x8_t)0x404040400000000))), (uint16x8_t)v65);
      a9 = vrsraq_n_u16(v73, v73, 8uLL);
      *(uint8x8_t *)a9.i8 = vqrshrn_n_u16(a9, 8uLL);
      *(int8x8_t *)a9.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a9, v65));
      *v22 = a9.i32[0];
      v74 = &v20[a6];
      v23 = (unsigned __int32 *)((char *)v23 + a6);
      if ((unint64_t)v74 >= v21)
        v75 = -(uint64_t)a5;
      else
        v75 = 0;
      v20 = &v74[v75];
      v22 += a6;
      --v64;
    }
    while (v64);
  }
  *result = v20;
  *a3 = v21;
  *a2 = v22;
  *a4 = v23;
  return result;
}

_DWORD **vec::template_mark_pixelmask_row<(CGCompositeOperation)11,_argb8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, uint8x8_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  uint8x16_t v16;
  unint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  _DWORD *v20;
  char *v21;
  unsigned int v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  uint16x8_t v29;
  __int32 v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int64_t v35;
  int64_t v36;
  int8x16_t *v37;
  int8x16_t *v38;
  int8x16_t *v39;
  int8x16_t *v40;
  uint64_t v41;
  int64_t v42;
  unint64_t v43;
  int8x16_t v44;
  int8x16_t v45;
  uint8x16_t v46;
  uint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  uint8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint8x16_t v58;
  uint8x16_t v59;
  uint8x16_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  int8x8_t v64;
  uint16x8_t v65;
  uint16x8_t v66;
  unsigned int v67;
  uint16x8_t v68;
  unsigned int v69;
  int8x8_t v70;
  uint8x8_t v71;
  uint16x8_t v72;
  int8x16_t v73;
  uint8x8_t v74;
  int8x16_t v75;
  _DWORD *v76;
  uint64_t v77;

  v17 = a15;
  v18 = *result;
  v19 = *a3;
  v20 = *a2;
  v21 = *a4;
  if (a15 < 4)
    goto LABEL_40;
  if (a7)
    v22 = 0;
  else
    v22 = -1;
  v23.i64[0] = 0xFF000000FFLL;
  v23.i64[1] = 0xFF000000FFLL;
  a9 = vandq_s8(vdupq_n_s8(v22), v23);
  if (a8)
    v24 = 0;
  else
    v24 = -1;
  v25 = vandq_s8(vdupq_n_s8(v24), v23);
  v26 = 4 * a6;
  v27 = 16 * a6;
  v28.i64[0] = -1;
  v28.i64[1] = -1;
  a13.i32[1] = 16843009;
  v29 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  while (1)
  {
    v30 = *(_DWORD *)v21;
    if (*(_DWORD *)v21 == -1)
    {
      v37 = (int8x16_t *)&v21[v17];
      v38 = (int8x16_t *)v21;
      do
        v39 = v38++;
      while (v38 <= v37 && (vminvq_u8((uint8x16_t)vceqq_s8(*v39, v28)) & 0x80) != 0);
      do
      {
        v40 = v39;
        v39 = (int8x16_t *)((char *)v39 + 4);
      }
      while (v39 <= v37 && v40->i32[0] == -1);
      if (v40 < v37)
      {
        while (v40->u8[0] == 255)
        {
          v40 = (int8x16_t *)((char *)v40 + 1);
          if (v40 >= v37)
          {
            v40 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      v41 = 0;
      v42 = (char *)v40 - v21;
      v43 = (char *)v40 - v21;
      do
      {
        v44 = vorrq_s8(*(int8x16_t *)((char *)v18 + v41), a9);
        v45 = vorrq_s8(*(int8x16_t *)((char *)v20 + v41), v25);
        v15 = vqtbl1q_s8(v44, (int8x16_t)xmmword_185005170);
        v46 = (uint8x16_t)vqtbl1q_s8(v45, (int8x16_t)xmmword_185005170);
        *(uint8x16_t *)((char *)v20 + v41) = vqsubq_u8(vqaddq_u8(v46, (uint8x16_t)v15), vqaddq_u8(vqsubq_u8((uint8x16_t)v15, (uint8x16_t)v44), vqsubq_u8(v46, (uint8x16_t)v45)));
        v21 += v26;
        v43 -= 4;
        v41 += v27;
      }
      while (v43 > 3);
      v20 = (_DWORD *)((char *)v20 + v41);
      v18 = (_DWORD *)((char *)v18 + v41);
      v17 = v17 - v42 + v43;
      goto LABEL_37;
    }
    if (v30)
      break;
    v31 = (int8x16_t *)&v21[v17];
    v32 = (int8x16_t *)v21;
    do
      v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v33)) & 0x80) != 0);
    do
    {
      v34 = v33;
      v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && !v34->i32[0]);
    if (v34 < v31)
    {
      while (!v34->i8[0])
      {
        v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          v34 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    v35 = (char *)v34 - v21;
    v36 = ((char *)v34 - v21) * a6;
    v18 += v36;
    v20 += v36;
    v21 += v36;
    v17 -= v35;
LABEL_37:
    if (v17 <= 3)
      goto LABEL_40;
  }
  v47 = 0;
  while (1)
  {
    v48 = *(int8x16_t *)((char *)v20 + v47);
    v15.i32[0] = v30;
    v49 = vqtbl1q_s8(v15, (int8x16_t)xmmword_185004A30);
    v50 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v18 + v47), a9);
    v51 = vceqzq_s8(v49);
    v52 = vorrq_s8(vbicq_s8(v25, v51), v48);
    v53 = vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v49.i8);
    v54 = vmull_high_u8(v50, (uint8x16_t)v49);
    v55 = vminq_u16(v53, v29);
    v56 = vminq_u16(v54, v29);
    v57 = vrsraq_n_u16(v56, v56, 8uLL);
    *(uint8x8_t *)v53.i8 = vqrshrn_n_u16(vrsraq_n_u16(v55, v55, 8uLL), 8uLL);
    *(uint8x8_t *)v16.i8 = vqrshrn_n_u16(v57, 8uLL);
    v58 = (uint8x16_t)vqtbl2q_s8(*(int8x16x2_t *)(&v16 - 1), (int8x16_t)xmmword_185005180);
    v59 = vqrshrn_high_n_u16(*(uint8x8_t *)v53.i8, v57, 8uLL);
    v60 = (uint8x16_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_185005170);
    v16 = vqaddq_u8(v60, v58);
    v15 = (int8x16_t)vqsubq_u8(v58, v59);
    *(int8x16_t *)((char *)v20 + v47) = vbslq_s8(v51, v48, (int8x16_t)vqsubq_u8(v16, vqaddq_u8((uint8x16_t)v15, vqsubq_u8(v60, (uint8x16_t)v52))));
    v21 += v26;
    v17 -= 4;
    if (v17 < 4)
      break;
    v30 = *(_DWORD *)v21;
    v47 += v27;
    if ((*(_DWORD *)v21 - 1) >= 0xFFFFFFFE)
    {
      v18 = (_DWORD *)((char *)v18 + v47);
      v20 = (_DWORD *)((char *)v20 + v47);
      goto LABEL_37;
    }
  }
  v18 = (_DWORD *)((char *)v18 + v27 + v47);
  v20 = (_DWORD *)((char *)v20 + v27 + v47);
LABEL_40:
  v61 = v17 + a14;
  if (v61)
  {
    if (a7)
      v62 = 0;
    else
      v62 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v62), (int8x8_t)0xFF000000FFLL);
    if (a8)
      v63 = 0;
    else
      v63 = -1;
    v64 = vand_s8(vdup_n_s8(v63), (int8x8_t)0xFF000000FFLL);
    v65 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v18;
      v66 = vmovl_u8(a13);
      LOBYTE(v67) = v66.i8[0];
      BYTE1(v67) = v66.i8[2];
      BYTE2(v67) = v66.i8[4];
      HIBYTE(v67) = v66.i8[6];
      v66.i32[0] = *v20;
      v68 = vmovl_u8(*(uint8x8_t *)v66.i8);
      LOBYTE(v69) = v68.i8[0];
      BYTE1(v69) = v68.i8[2];
      BYTE2(v69) = v68.i8[4];
      HIBYTE(v69) = v68.i8[6];
      v68.i8[0] = *v21;
      v68.i8[1] = *v21;
      v68.i8[2] = *v21;
      v68.i8[3] = *v21;
      v70 = vceqz_s8((int8x8_t)v68.u32[0]);
      v71 = (uint8x8_t)vorr_s8(vbic_s8(v64, v70), (int8x8_t)v69);
      v72 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v67, *(int8x8_t *)a9.i8), (uint8x8_t)v68.u32[0]), v65);
      v73 = (int8x16_t)vrsraq_n_u16(v72, v72, 8uLL);
      v74 = vqrshrn_n_u16((uint16x8_t)v73, 8uLL);
      v75 = (int8x16_t)vqrshrn_high_n_u16(v74, (uint16x8_t)v73, 8uLL);
      *(uint8x8_t *)v73.i8 = v71;
      v73.u64[1] = (unint64_t)v71;
      *(int8x8_t *)v75.i8 = vqtbl1_s8(v75, (int8x8_t)0x404040400000000);
      *(int8x8_t *)v73.i8 = vqtbl1_s8(v73, (int8x8_t)0x404040400000000);
      *(int8x8_t *)v73.i8 = vbsl_s8(v70, (int8x8_t)v69, (int8x8_t)vqsub_u8(vqadd_u8(*(uint8x8_t *)v73.i8, *(uint8x8_t *)v75.i8), vqadd_u8(vqsub_u8(*(uint8x8_t *)v75.i8, v74), vqsub_u8(*(uint8x8_t *)v73.i8, v71))));
      a13 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v73, a9));
      *v20 = a13.i32[0];
      v76 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v76 >= v19)
        v77 = -(uint64_t)a5;
      else
        v77 = 0;
      v18 = &v76[v77];
      v20 += a6;
      --v61;
    }
    while (v61);
  }
  *result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

_DWORD **vec::template_mark_pixelmask_row<(CGCompositeOperation)12,_argb8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, unsigned __int32 **a4, int a5, int a6, int a7, int8x16_t a8, double a9, uint8x8_t a10, double a11, double a12, double a13, uint8x16_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  unint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  _DWORD *v20;
  unsigned __int32 *v21;
  unsigned int v22;
  int8x16_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t v26;
  uint16x8_t v27;
  unsigned __int32 v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int64_t v33;
  int64_t v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint8x16_t v43;
  uint8x16_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint64_t v49;
  unsigned int v50;
  uint16x8_t v51;
  uint16x8_t v52;
  unsigned int v53;
  uint16x8_t v54;
  unsigned int v55;
  uint16x8_t v56;
  int8x16_t v57;
  _DWORD *v58;
  uint64_t v59;

  v17 = a17;
  v18 = *result;
  v19 = *a3;
  v20 = *a2;
  v21 = *a4;
  if (a17 < 4)
    goto LABEL_37;
  if (a7)
    v22 = 0;
  else
    v22 = -1;
  v23.i64[0] = 0xFF000000FFLL;
  v23.i64[1] = 0xFF000000FFLL;
  a8 = vandq_s8(vdupq_n_s8(v22), v23);
  v24 = 4 * a6;
  v25 = 16 * a6;
  v26.i64[0] = -1;
  v26.i64[1] = -1;
  a10.i32[1] = 16843009;
  v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  while (1)
  {
    v28 = *v21;
    if (*v21 == -1)
    {
      v35 = (int8x16_t *)((char *)v21 + v17);
      v36 = (int8x16_t *)v21;
      do
        v37 = v36++;
      while (v36 <= v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, v26)) & 0x80) != 0);
      do
      {
        v38 = v37;
        v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= v35 && v38->i32[0] == -1);
      if (v38 < v35)
      {
        while (v38->u8[0] == 255)
        {
          v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= v35)
          {
            v38 = (int8x16_t *)((char *)v21 + v17);
            break;
          }
        }
      }
      v39 = 0;
      v40 = (char *)v38 - (char *)v21;
      v41 = (char *)v38 - (char *)v21;
      do
      {
        *(uint8x16_t *)((char *)v20 + v39) = vqaddq_u8(*(uint8x16_t *)((char *)v20 + v39), (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v18 + v39), a8));
        v21 = (unsigned __int32 *)((char *)v21 + v24);
        v41 -= 4;
        v39 += v25;
      }
      while (v41 > 3);
      v20 = (_DWORD *)((char *)v20 + v39);
      v18 = (_DWORD *)((char *)v18 + v39);
      v17 = v17 - v40 + v41;
      goto LABEL_34;
    }
    if (v28)
      break;
    v29 = (int8x16_t *)((char *)v21 + v17);
    v30 = (int8x16_t *)v21;
    do
      v31 = v30++;
    while (v30 <= v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      v32 = v31;
      v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= v29 && !v32->i32[0]);
    if (v32 < v29)
    {
      while (!v32->i8[0])
      {
        v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= v29)
        {
          v32 = (int8x16_t *)((char *)v21 + v17);
          break;
        }
      }
    }
    v33 = (char *)v32 - (char *)v21;
    v34 = ((char *)v32 - (char *)v21) * a6;
    v18 += v34;
    v20 += v34;
    v21 = (unsigned __int32 *)((char *)v21 + v34);
    v17 -= v33;
LABEL_34:
    if (v17 <= 3)
      goto LABEL_37;
  }
  v42 = 0;
  while (1)
  {
    a14.i32[0] = v28;
    v43 = (uint8x16_t)vqtbl1q_s8((int8x16_t)a14, (int8x16_t)xmmword_185004A30);
    v44 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v18 + v42), a8);
    v45 = vmull_u8(*(uint8x8_t *)v44.i8, *(uint8x8_t *)v43.i8);
    v46 = vmull_high_u8(v44, v43);
    v47 = vminq_u16(v45, v27);
    v48 = vminq_u16(v46, v27);
    a14 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v47, v47, 8uLL), 8uLL), vrsraq_n_u16(v48, v48, 8uLL), 8uLL);
    *(uint8x16_t *)((char *)v20 + v42) = vqaddq_u8(*(uint8x16_t *)((char *)v20 + v42), a14);
    v21 = (unsigned __int32 *)((char *)v21 + v24);
    v17 -= 4;
    if (v17 < 4)
      break;
    v28 = *v21;
    v42 += v25;
    if (*v21 - 1 >= 0xFFFFFFFE)
    {
      v18 = (_DWORD *)((char *)v18 + v42);
      v20 = (_DWORD *)((char *)v20 + v42);
      goto LABEL_34;
    }
  }
  v18 = (_DWORD *)((char *)v18 + v25 + v42);
  v20 = (_DWORD *)((char *)v20 + v25 + v42);
LABEL_37:
  v49 = v17 + a16;
  if (v49)
  {
    if (a7)
      v50 = 0;
    else
      v50 = -1;
    *(int8x8_t *)a8.i8 = vand_s8(vdup_n_s8(v50), (int8x8_t)0xFF000000FFLL);
    v51 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a10.i32[0] = *v18;
      v52 = vmovl_u8(a10);
      LOBYTE(v53) = v52.i8[0];
      BYTE1(v53) = v52.i8[2];
      BYTE2(v53) = v52.i8[4];
      HIBYTE(v53) = v52.i8[6];
      v52.i32[0] = *v20;
      v54 = vmovl_u8(*(uint8x8_t *)v52.i8);
      LOBYTE(v55) = v54.i8[0];
      BYTE1(v55) = v54.i8[2];
      BYTE2(v55) = v54.i8[4];
      HIBYTE(v55) = v54.i8[6];
      v54.i8[0] = *(_BYTE *)v21;
      v54.i8[1] = *(_BYTE *)v21;
      v54.i8[2] = *(_BYTE *)v21;
      v54.i8[3] = *(_BYTE *)v21;
      v56 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v53, *(int8x8_t *)a8.i8), (uint8x8_t)v54.u32[0]), v51);
      v57 = (int8x16_t)vrsraq_n_u16(v56, v56, 8uLL);
      *(uint8x8_t *)v57.i8 = vqadd_u8((uint8x8_t)v55, vqrshrn_n_u16((uint16x8_t)v57, 8uLL));
      a10 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v57, a8));
      *v20 = a10.i32[0];
      v58 = &v18[a6];
      v21 = (unsigned __int32 *)((char *)v21 + a6);
      if ((unint64_t)v58 >= v19)
        v59 = -(uint64_t)a5;
      else
        v59 = 0;
      v18 = &v58[v59];
      v20 += a6;
      --v49;
    }
    while (v49);
  }
  *result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)13,_argb8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, uint16x8_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  unsigned __int32 *v17;
  unint64_t v18;
  _DWORD *v19;
  char *v20;
  unsigned int v21;
  int8x16_t v22;
  unsigned int v23;
  int8x16_t v24;
  uint64_t v25;
  uint64_t v26;
  uint16x8_t v27;
  __int32 v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int64_t v33;
  int64_t v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  uint8x16_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint8x16_t v50;
  uint8x16_t v51;
  uint8x16_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  uint64_t v57;
  int8x16_t v58;
  uint8x16_t v59;
  int8x16_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  uint16x8_t v69;
  int8x16_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  uint16x8_t v73;
  uint8x16_t v74;
  uint16x8_t v75;
  uint16x8_t v76;
  int8x16_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  int8x8_t v81;
  uint16x8_t v82;
  uint16x8_t v83;
  unsigned int v84;
  uint16x8_t v85;
  unsigned int v86;
  int8x8_t v87;
  uint16x8_t v88;
  int8x16_t v89;
  int8x8_t v90;
  int8x16_t v91;
  int8x8_t v92;
  uint8x8_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  unsigned __int32 *v96;
  uint64_t v97;
  int8x16x2_t v98;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a15 < 4)
    goto LABEL_40;
  if (a7)
    v21 = 0;
  else
    v21 = -1;
  v22.i64[0] = 0xFF000000FFLL;
  v22.i64[1] = 0xFF000000FFLL;
  a9 = vandq_s8(vdupq_n_s8(v21), v22);
  if (a8)
    v23 = 0;
  else
    v23 = -1;
  v24 = vandq_s8(vdupq_n_s8(v23), v22);
  v25 = 4 * a6;
  v26 = 16 * a6;
  v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a13.i64[0] = -1;
  a13.i64[1] = -1;
  while (1)
  {
    v28 = *(_DWORD *)v20;
    if (*(_DWORD *)v20 == -1)
    {
      v35 = (int8x16_t *)&v20[v16];
      v36 = (int8x16_t *)v20;
      do
        v37 = v36++;
      while (v36 <= v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, (int8x16_t)a13)) & 0x80) != 0);
      do
      {
        v38 = v37;
        v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= v35 && v38->i32[0] == -1);
      if (v38 < v35)
      {
        while (v38->u8[0] == 255)
        {
          v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= v35)
          {
            v38 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      v39 = 0;
      v40 = (char *)v38 - v20;
      v41 = (char *)v38 - v20;
      do
      {
        v42 = vorrq_s8(*(int8x16_t *)((char *)v17 + v39), a9);
        v43 = vorrq_s8(*(int8x16_t *)((char *)v19 + v39), v24);
        v44 = vqtbl1q_s8(v42, (int8x16_t)xmmword_185005170);
        v45 = vqtbl1q_s8(v43, (int8x16_t)xmmword_185005170);
        v46 = vceqzq_s8(v45);
        v47 = (uint8x16_t)vbicq_s8(v43, v46);
        v48 = vminq_u16(vmull_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v47.i8), v27);
        v49 = vminq_u16(vmull_high_u8((uint8x16_t)v42, v47), v27);
        v50 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v48, v48, 8uLL), 8uLL), vrsraq_n_u16(v49, v49, 8uLL), 8uLL);
        v51 = (uint8x16_t)vmvnq_s8(v45);
        v52 = (uint8x16_t)vmvnq_s8(v44);
        v53 = vmull_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v51.i8);
        v54 = vqaddq_u16(vmull_high_u8((uint8x16_t)v42, v51), vmull_high_u8(v47, v52));
        v55 = vminq_u16(vqaddq_u16(v53, vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v52.i8)), v27);
        v56 = vminq_u16(v54, v27);
        v15 = vceqzq_s8(v44);
        *(int8x16_t *)((char *)v19 + v39) = vbslq_s8(v15, v43, vbslq_s8(v46, v42, (int8x16_t)vqaddq_u8(v50, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v55, v55, 8uLL), 8uLL), vrsraq_n_u16(v56, v56, 8uLL), 8uLL))));
        v20 += v25;
        v41 -= 4;
        v39 += v26;
      }
      while (v41 > 3);
      v19 = (_DWORD *)((char *)v19 + v39);
      v17 = (unsigned __int32 *)((char *)v17 + v39);
      v16 = v16 - v40 + v41;
      goto LABEL_37;
    }
    if (v28)
      break;
    v29 = (int8x16_t *)&v20[v16];
    v30 = (int8x16_t *)v20;
    do
      v31 = v30++;
    while (v30 <= v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      v32 = v31;
      v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= v29 && !v32->i32[0]);
    if (v32 < v29)
    {
      while (!v32->i8[0])
      {
        v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= v29)
        {
          v32 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    v33 = (char *)v32 - v20;
    v34 = ((char *)v32 - v20) * a6;
    v17 += v34;
    v19 += v34;
    v20 += v34;
    v16 -= v33;
LABEL_37:
    if (v16 <= 3)
      goto LABEL_40;
  }
  v57 = 0;
  while (1)
  {
    v15.i32[0] = v28;
    v58 = vqtbl1q_s8(v15, (int8x16_t)xmmword_185004A30);
    v59 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v17 + v57), a9);
    v60 = vorrq_s8(vbicq_s8(v24, vceqzq_s8(v58)), *(int8x16_t *)((char *)v19 + v57));
    v98.val[1] = (int8x16_t)vmull_u8(*(uint8x8_t *)v59.i8, *(uint8x8_t *)v58.i8);
    v61 = vmull_high_u8(v59, (uint8x16_t)v58);
    v62 = vminq_u16((uint16x8_t)v98.val[1], v27);
    v63 = vminq_u16(v61, v27);
    v98.val[0] = (int8x16_t)vrsraq_n_u16(v62, v62, 8uLL);
    v64 = vrsraq_n_u16(v63, v63, 8uLL);
    *(uint8x8_t *)v98.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v98.val[0], 8uLL);
    *(uint8x8_t *)v98.val[1].i8 = vqrshrn_n_u16(v64, 8uLL);
    v65 = vqtbl2q_s8(v98, (int8x16_t)xmmword_185005180);
    v66 = vqtbl1q_s8(v60, (int8x16_t)xmmword_185005170);
    v67 = vceqzq_s8(v66);
    v68 = vbicq_s8(v60, v67);
    v69 = vmull_u8(*(uint8x8_t *)v98.val[0].i8, *(uint8x8_t *)v68.i8);
    v70 = vmvnq_s8(v66);
    v71 = vmull_u8(*(uint8x8_t *)v98.val[0].i8, *(uint8x8_t *)v70.i8);
    v72 = vmull_u8(*(uint8x8_t *)v98.val[1].i8, (uint8x8_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL));
    v98.val[0] = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v98.val[0].i8, v64, 8uLL);
    v73 = vminq_u16(v69, v27);
    v98.val[1] = (int8x16_t)vminq_u16(vmull_u8(*(uint8x8_t *)v98.val[1].i8, (uint8x8_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL)), v27);
    v74 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v73, v73, 8uLL), 8uLL), vrsraq_n_u16((uint16x8_t)v98.val[1], (uint16x8_t)v98.val[1], 8uLL), 8uLL);
    v98.val[1] = vmvnq_s8(v65);
    v75 = vmull_u8(*(uint8x8_t *)v68.i8, *(uint8x8_t *)v98.val[1].i8);
    v98.val[1] = (int8x16_t)vqaddq_u16(v72, vmull_high_u8((uint8x16_t)v68, (uint8x16_t)v98.val[1]));
    v76 = vminq_u16(vqaddq_u16(v71, v75), v27);
    v98.val[1] = (int8x16_t)vminq_u16((uint16x8_t)v98.val[1], v27);
    v77 = vbslq_s8(v67, v98.val[0], (int8x16_t)vqaddq_u8(v74, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v76, v76, 8uLL), 8uLL), vrsraq_n_u16((uint16x8_t)v98.val[1], (uint16x8_t)v98.val[1], 8uLL), 8uLL)));
    v15 = vceqzq_s8(v65);
    *(int8x16_t *)((char *)v19 + v57) = vbslq_s8(v15, v60, v77);
    v20 += v25;
    v16 -= 4;
    if (v16 < 4)
      break;
    v28 = *(_DWORD *)v20;
    v57 += v26;
    if ((*(_DWORD *)v20 - 1) >= 0xFFFFFFFE)
    {
      v17 = (unsigned __int32 *)((char *)v17 + v57);
      v19 = (_DWORD *)((char *)v19 + v57);
      goto LABEL_37;
    }
  }
  v17 = (unsigned __int32 *)((char *)v17 + v26 + v57);
  v19 = (_DWORD *)((char *)v19 + v26 + v57);
LABEL_40:
  v78 = v16 + a14;
  if (v78)
  {
    if (a7)
      v79 = 0;
    else
      v79 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v79), (int8x8_t)0xFF000000FFLL);
    if (a8)
      v80 = 0;
    else
      v80 = -1;
    v81 = vand_s8(vdup_n_s8(v80), (int8x8_t)0xFF000000FFLL);
    v82 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v17;
      v83 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v84) = v83.i8[0];
      BYTE1(v84) = v83.i8[2];
      BYTE2(v84) = v83.i8[4];
      HIBYTE(v84) = v83.i8[6];
      v83.i32[0] = *v19;
      v85 = vmovl_u8(*(uint8x8_t *)v83.i8);
      LOBYTE(v86) = v85.i8[0];
      BYTE1(v86) = v85.i8[2];
      BYTE2(v86) = v85.i8[4];
      HIBYTE(v86) = v85.i8[6];
      v85.i8[0] = *v20;
      v85.i8[1] = *v20;
      v85.i8[2] = *v20;
      v85.i8[3] = *v20;
      v87 = vorr_s8(vbic_s8(v81, vceqz_s8((int8x8_t)v85.u32[0])), (int8x8_t)v86);
      v88 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v84, *(int8x8_t *)a9.i8), (uint8x8_t)v85.u32[0]), v82);
      v89 = (int8x16_t)vrsraq_n_u16(v88, v88, 8uLL);
      v90 = (int8x8_t)vqrshrn_n_u16((uint16x8_t)v89, 8uLL);
      v91 = (int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v90, (uint16x8_t)v89, 8uLL);
      *(int8x8_t *)v89.i8 = v87;
      v89.u64[1] = (unint64_t)v87;
      *(int8x8_t *)v91.i8 = vqtbl1_s8(v91, (int8x8_t)0x404040400000000);
      *(int8x8_t *)v89.i8 = vqtbl1_s8(v89, (int8x8_t)0x404040400000000);
      v92 = vceqz_s8(*(int8x8_t *)v89.i8);
      v93 = (uint8x8_t)vbic_s8(v87, v92);
      v94 = vminq_u16(vmull_u8((uint8x8_t)v90, v93), v82);
      v95 = vminq_u16(vqaddq_u16(vmull_u8((uint8x8_t)v90, (uint8x8_t)vmvn_s8(*(int8x8_t *)v89.i8)), vmull_u8(v93, (uint8x8_t)vmvn_s8(*(int8x8_t *)v91.i8))), v82);
      a13 = vrsraq_n_u16(v95, v95, 8uLL);
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v91.i8), v87, vbsl_s8(v92, v90, (int8x8_t)vqadd_u8(vqrshrn_n_u16(vrsraq_n_u16(v94, v94, 8uLL), 8uLL), vqrshrn_n_u16(a13, 8uLL))));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a13, a9));
      *v19 = a13.i32[0];
      v96 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v96 >= v18)
        v97 = -(uint64_t)a5;
      else
        v97 = 0;
      v17 = &v96[v97];
      v19 += a6;
      --v78;
    }
    while (v78);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)14,_argb8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, uint16x8_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  unsigned __int32 *v17;
  unint64_t v18;
  _DWORD *v19;
  char *v20;
  unsigned int v21;
  int8x16_t v22;
  unsigned int v23;
  int8x16_t v24;
  uint64_t v25;
  uint64_t v26;
  uint16x8_t v27;
  __int32 v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int64_t v33;
  int64_t v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int8x16_t v42;
  int8x16_t v43;
  uint8x16_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint64_t v47;
  int8x16_t v48;
  uint8x16_t v49;
  int8x16_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  int8x16_t v55;
  int8x16_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  int8x16_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  int8x8_t v63;
  uint16x8_t v64;
  uint16x8_t v65;
  unsigned int v66;
  uint16x8_t v67;
  unsigned int v68;
  int8x8_t v69;
  uint16x8_t v70;
  uint8x8_t v71;
  int8x16_t v72;
  uint16x8_t v73;
  unsigned __int32 *v74;
  uint64_t v75;
  int8x16x2_t v76;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a15 < 4)
    goto LABEL_40;
  if (a7)
    v21 = 0;
  else
    v21 = -1;
  v22.i64[0] = 0xFF000000FFLL;
  v22.i64[1] = 0xFF000000FFLL;
  a9 = vandq_s8(vdupq_n_s8(v21), v22);
  if (a8)
    v23 = 0;
  else
    v23 = -1;
  v24 = vandq_s8(vdupq_n_s8(v23), v22);
  v25 = 4 * a6;
  v26 = 16 * a6;
  v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a13.i64[0] = -1;
  a13.i64[1] = -1;
  while (1)
  {
    v28 = *(_DWORD *)v20;
    if (*(_DWORD *)v20 == -1)
    {
      v35 = (int8x16_t *)&v20[v16];
      v36 = (int8x16_t *)v20;
      do
        v37 = v36++;
      while (v36 <= v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, (int8x16_t)a13)) & 0x80) != 0);
      do
      {
        v38 = v37;
        v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= v35 && v38->i32[0] == -1);
      if (v38 < v35)
      {
        while (v38->u8[0] == 255)
        {
          v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= v35)
          {
            v38 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      v39 = 0;
      v40 = (char *)v38 - v20;
      v41 = (char *)v38 - v20;
      do
      {
        v42 = vorrq_s8(*(int8x16_t *)((char *)v17 + v39), a9);
        v43 = vorrq_s8(*(int8x16_t *)((char *)v19 + v39), v24);
        v44 = (uint8x16_t)vbicq_s8(v43, vceqzq_s8(vqtbl1q_s8(v43, (int8x16_t)xmmword_185005170)));
        v45 = vminq_u16(vmull_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v44.i8), v27);
        v46 = vminq_u16(vmull_high_u8((uint8x16_t)v42, v44), v27);
        v15 = vceqzq_s8(vqtbl1q_s8(v42, (int8x16_t)xmmword_185005170));
        *(int8x16_t *)((char *)v19 + v39) = vbslq_s8(v15, v43, (int8x16_t)vqaddq_u8(vqsubq_u8((uint8x16_t)v42, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v45, v45, 8uLL), 8uLL), vrsraq_n_u16(v46, v46, 8uLL), 8uLL)), v44));
        v20 += v25;
        v41 -= 4;
        v39 += v26;
      }
      while (v41 > 3);
      v19 = (_DWORD *)((char *)v19 + v39);
      v17 = (unsigned __int32 *)((char *)v17 + v39);
      v16 = v16 - v40 + v41;
      goto LABEL_37;
    }
    if (v28)
      break;
    v29 = (int8x16_t *)&v20[v16];
    v30 = (int8x16_t *)v20;
    do
      v31 = v30++;
    while (v30 <= v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      v32 = v31;
      v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= v29 && !v32->i32[0]);
    if (v32 < v29)
    {
      while (!v32->i8[0])
      {
        v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= v29)
        {
          v32 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    v33 = (char *)v32 - v20;
    v34 = ((char *)v32 - v20) * a6;
    v17 += v34;
    v19 += v34;
    v20 += v34;
    v16 -= v33;
LABEL_37:
    if (v16 <= 3)
      goto LABEL_40;
  }
  v47 = 0;
  while (1)
  {
    v15.i32[0] = v28;
    v48 = vqtbl1q_s8(v15, (int8x16_t)xmmword_185004A30);
    v49 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v17 + v47), a9);
    v50 = vorrq_s8(vbicq_s8(v24, vceqzq_s8(v48)), *(int8x16_t *)((char *)v19 + v47));
    v76.val[1] = (int8x16_t)vmull_u8(*(uint8x8_t *)v49.i8, *(uint8x8_t *)v48.i8);
    v51 = vmull_high_u8(v49, (uint8x16_t)v48);
    v52 = vminq_u16((uint16x8_t)v76.val[1], v27);
    v53 = vminq_u16(v51, v27);
    v76.val[0] = (int8x16_t)vrsraq_n_u16(v52, v52, 8uLL);
    v54 = vrsraq_n_u16(v53, v53, 8uLL);
    *(uint8x8_t *)v76.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v76.val[0], 8uLL);
    *(uint8x8_t *)v76.val[1].i8 = vqrshrn_n_u16(v54, 8uLL);
    v55 = vqtbl2q_s8(v76, (int8x16_t)xmmword_185005180);
    v56 = vbicq_s8(v50, vceqzq_s8(vqtbl1q_s8(v50, (int8x16_t)xmmword_185005170)));
    v57 = vmull_u8(*(uint8x8_t *)v76.val[0].i8, *(uint8x8_t *)v56.i8);
    v76.val[0] = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v76.val[0].i8, v54, 8uLL);
    v58 = vminq_u16(v57, v27);
    v76.val[1] = (int8x16_t)vminq_u16(vmull_u8(*(uint8x8_t *)v76.val[1].i8, (uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL)), v27);
    v59 = (int8x16_t)vqaddq_u8(vqsubq_u8((uint8x16_t)v76.val[0], vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v58, v58, 8uLL), 8uLL), vrsraq_n_u16((uint16x8_t)v76.val[1], (uint16x8_t)v76.val[1], 8uLL), 8uLL)), (uint8x16_t)v56);
    v15 = vceqzq_s8(v55);
    *(int8x16_t *)((char *)v19 + v47) = vbslq_s8(v15, v50, v59);
    v20 += v25;
    v16 -= 4;
    if (v16 < 4)
      break;
    v28 = *(_DWORD *)v20;
    v47 += v26;
    if ((*(_DWORD *)v20 - 1) >= 0xFFFFFFFE)
    {
      v17 = (unsigned __int32 *)((char *)v17 + v47);
      v19 = (_DWORD *)((char *)v19 + v47);
      goto LABEL_37;
    }
  }
  v17 = (unsigned __int32 *)((char *)v17 + v26 + v47);
  v19 = (_DWORD *)((char *)v19 + v26 + v47);
LABEL_40:
  v60 = v16 + a14;
  if (v60)
  {
    if (a7)
      v61 = 0;
    else
      v61 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v61), (int8x8_t)0xFF000000FFLL);
    if (a8)
      v62 = 0;
    else
      v62 = -1;
    v63 = vand_s8(vdup_n_s8(v62), (int8x8_t)0xFF000000FFLL);
    v64 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v17;
      v65 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v66) = v65.i8[0];
      BYTE1(v66) = v65.i8[2];
      BYTE2(v66) = v65.i8[4];
      HIBYTE(v66) = v65.i8[6];
      v65.i32[0] = *v19;
      v67 = vmovl_u8(*(uint8x8_t *)v65.i8);
      LOBYTE(v68) = v67.i8[0];
      BYTE1(v68) = v67.i8[2];
      BYTE2(v68) = v67.i8[4];
      HIBYTE(v68) = v67.i8[6];
      v67.i8[0] = *v20;
      v67.i8[1] = *v20;
      v67.i8[2] = *v20;
      v67.i8[3] = *v20;
      v69 = vorr_s8(vbic_s8(v63, vceqz_s8((int8x8_t)v67.u32[0])), (int8x8_t)v68);
      v70 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v66, *(int8x8_t *)a9.i8), (uint8x8_t)v67.u32[0]), v64);
      a13 = vrsraq_n_u16(v70, v70, 8uLL);
      v71 = vqrshrn_n_u16(a13, 8uLL);
      *(int8x8_t *)v72.i8 = v69;
      v72.u64[1] = (unint64_t)v69;
      *(int8x8_t *)v72.i8 = vbic_s8(v69, vceqz_s8(vqtbl1_s8(v72, (int8x8_t)0x404040400000000)));
      v73 = vminq_u16(vmull_u8(v71, *(uint8x8_t *)v72.i8), v64);
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16(v71, a13, 8uLL), (int8x8_t)0x404040400000000)), v69, (int8x8_t)vqadd_u8(vqsub_u8(v71, vqrshrn_n_u16(vrsraq_n_u16(v73, v73, 8uLL), 8uLL)), *(uint8x8_t *)v72.i8));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a13, a9));
      *v19 = a13.i32[0];
      v74 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v74 >= v18)
        v75 = -(uint64_t)a5;
      else
        v75 = 0;
      v17 = &v74[v75];
      v19 += a6;
      --v60;
    }
    while (v60);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)15,_argb8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, double a13, uint16x8_t a14, uint64_t a15, unint64_t a16)
{
  int8x16_t v16;
  unint64_t v17;
  unsigned __int32 *v18;
  unint64_t v19;
  _DWORD *v20;
  char *v21;
  unsigned int v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint16x8_t v28;
  __int32 v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int64_t v34;
  int64_t v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  int8x16_t *v39;
  uint64_t v40;
  int64_t v41;
  unint64_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  uint8x16_t v49;
  uint8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint64_t v56;
  int8x16_t v57;
  uint8x16_t v58;
  int8x16_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  uint16x8_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  uint8x16_t v67;
  uint8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  uint16x8_t v72;
  uint16x8_t v73;
  int8x16_t v74;
  uint64_t v75;
  unsigned int v76;
  int8x8_t v77;
  unsigned int v78;
  int8x8_t v79;
  uint16x8_t v80;
  uint16x8_t v81;
  unsigned int v82;
  uint16x8_t v83;
  unsigned int v84;
  int8x8_t v85;
  uint16x8_t v86;
  int8x8_t v87;
  int8x16_t v88;
  int8x8_t v89;
  int8x8_t v90;
  int8x16_t v91;
  uint16x8_t v92;
  unsigned __int32 *v93;
  uint64_t v94;
  int8x16x2_t v95;

  v17 = a16;
  v18 = *result;
  v19 = *a3;
  v20 = *a2;
  v21 = *a4;
  if (a16 < 4)
    goto LABEL_40;
  if (a7)
    v22 = 0;
  else
    v22 = -1;
  v23.i64[0] = 0xFF000000FFLL;
  v23.i64[1] = 0xFF000000FFLL;
  a9 = vandq_s8(vdupq_n_s8(v22), v23);
  if (a8)
    v24 = 0;
  else
    v24 = -1;
  v25 = vandq_s8(vdupq_n_s8(v24), v23);
  v26 = 4 * a6;
  v27 = 16 * a6;
  v28 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a14.i64[0] = -1;
  a14.i64[1] = -1;
  while (1)
  {
    v29 = *(_DWORD *)v21;
    if (*(_DWORD *)v21 == -1)
    {
      v36 = (int8x16_t *)&v21[v17];
      v37 = (int8x16_t *)v21;
      do
        v38 = v37++;
      while (v37 <= v36 && (vminvq_u8((uint8x16_t)vceqq_s8(*v38, (int8x16_t)a14)) & 0x80) != 0);
      do
      {
        v39 = v38;
        v38 = (int8x16_t *)((char *)v38 + 4);
      }
      while (v38 <= v36 && v39->i32[0] == -1);
      if (v39 < v36)
      {
        while (v39->u8[0] == 255)
        {
          v39 = (int8x16_t *)((char *)v39 + 1);
          if (v39 >= v36)
          {
            v39 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      v40 = 0;
      v41 = (char *)v39 - v21;
      v42 = (char *)v39 - v21;
      do
      {
        v43 = vorrq_s8(*(int8x16_t *)((char *)v18 + v40), a9);
        v44 = vorrq_s8(*(int8x16_t *)((char *)v20 + v40), v25);
        v45 = vqtbl1q_s8(v43, (int8x16_t)xmmword_185005170);
        v46 = vqtbl1q_s8(v44, (int8x16_t)xmmword_185005170);
        v47 = (int8x16_t)vminq_u8((uint8x16_t)v43, (uint8x16_t)v45);
        v48 = (int8x16_t)vminq_u8((uint8x16_t)v44, (uint8x16_t)v46);
        v49 = (uint8x16_t)vsubq_s8(v45, v47);
        v50 = (uint8x16_t)vsubq_s8(v46, v48);
        v51 = (int8x16_t)vcgtq_u8(vrhaddq_u8((uint8x16_t)v46, (uint8x16_t)0), (uint8x16_t)v48);
        v52 = (int8x16_t)vqaddq_u16(vmull_u8(*(uint8x8_t *)v49.i8, *(uint8x8_t *)v48.i8), vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v47.i8));
        v53 = (int8x16_t)vqaddq_u16(vmull_high_u8(v49, (uint8x16_t)v48), vmull_high_u8(v50, (uint8x16_t)v47));
        v54 = vminq_u16((uint16x8_t)vbslq_s8((int8x16_t)vmovl_s8(*(int8x8_t *)v51.i8), v52, (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)v45.i8, *(uint8x8_t *)v46.i8), (uint16x8_t)v52)), v28);
        v55 = vminq_u16((uint16x8_t)vbslq_s8((int8x16_t)vmovl_high_s8(v51), v53, (int8x16_t)vqsubq_u16(vmull_high_u8((uint8x16_t)v45, (uint8x16_t)v46), (uint16x8_t)v53)), v28);
        v16 = vceqzq_s8(v45);
        *(int8x16_t *)((char *)v20 + v40) = vbslq_s8(v16, v44, vbslq_s8(vceqzq_s8(v46), v43, vsubq_s8(vaddq_s8(v48, v47), (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v54, v54, 8uLL), 8uLL), vrsraq_n_u16(v55, v55, 8uLL), 8uLL))));
        v21 += v26;
        v42 -= 4;
        v40 += v27;
      }
      while (v42 > 3);
      v20 = (_DWORD *)((char *)v20 + v40);
      v18 = (unsigned __int32 *)((char *)v18 + v40);
      v17 = v17 - v41 + v42;
      goto LABEL_37;
    }
    if (v29)
      break;
    v30 = (int8x16_t *)&v21[v17];
    v31 = (int8x16_t *)v21;
    do
      v32 = v31++;
    while (v31 <= v30 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v32)) & 0x80) != 0);
    do
    {
      v33 = v32;
      v32 = (int8x16_t *)((char *)v32 + 4);
    }
    while (v32 <= v30 && !v33->i32[0]);
    if (v33 < v30)
    {
      while (!v33->i8[0])
      {
        v33 = (int8x16_t *)((char *)v33 + 1);
        if (v33 >= v30)
        {
          v33 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    v34 = (char *)v33 - v21;
    v35 = ((char *)v33 - v21) * a6;
    v18 += v35;
    v20 += v35;
    v21 += v35;
    v17 -= v34;
LABEL_37:
    if (v17 <= 3)
      goto LABEL_40;
  }
  v56 = 0;
  while (1)
  {
    v16.i32[0] = v29;
    v57 = vqtbl1q_s8(v16, (int8x16_t)xmmword_185004A30);
    v58 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v18 + v56), a9);
    v59 = vorrq_s8(vbicq_s8(v25, vceqzq_s8(v57)), *(int8x16_t *)((char *)v20 + v56));
    v95.val[1] = (int8x16_t)vmull_u8(*(uint8x8_t *)v58.i8, *(uint8x8_t *)v57.i8);
    v60 = vmull_high_u8(v58, (uint8x16_t)v57);
    v61 = vminq_u16((uint16x8_t)v95.val[1], v28);
    v62 = vminq_u16(v60, v28);
    v95.val[0] = (int8x16_t)vrsraq_n_u16(v61, v61, 8uLL);
    v63 = vrsraq_n_u16(v62, v62, 8uLL);
    *(uint8x8_t *)v95.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v95.val[0], 8uLL);
    *(uint8x8_t *)v95.val[1].i8 = vqrshrn_n_u16(v63, 8uLL);
    v64 = vqtbl2q_s8(v95, (int8x16_t)xmmword_185005180);
    v95.val[0] = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v95.val[0].i8, v63, 8uLL);
    v65 = vqtbl1q_s8(v59, (int8x16_t)xmmword_185005170);
    v95.val[1] = (int8x16_t)vminq_u8((uint8x16_t)v95.val[0], (uint8x16_t)v64);
    v66 = (int8x16_t)vminq_u8((uint8x16_t)v59, (uint8x16_t)v65);
    v67 = (uint8x16_t)vsubq_s8(v64, v95.val[1]);
    v68 = (uint8x16_t)vsubq_s8(v65, v66);
    v69 = (int8x16_t)vcgtq_u8(vrhaddq_u8((uint8x16_t)v65, (uint8x16_t)0), (uint8x16_t)v66);
    v70 = (int8x16_t)vqaddq_u16(vmull_u8(*(uint8x8_t *)v67.i8, *(uint8x8_t *)v66.i8), vmull_u8(*(uint8x8_t *)v68.i8, *(uint8x8_t *)v95.val[1].i8));
    v71 = (int8x16_t)vqaddq_u16(vmull_high_u8(v67, (uint8x16_t)v66), vmull_high_u8(v68, (uint8x16_t)v95.val[1]));
    v72 = vminq_u16((uint16x8_t)vbslq_s8((int8x16_t)vmovl_s8(*(int8x8_t *)v69.i8), v70, (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)v64.i8, *(uint8x8_t *)v65.i8), (uint16x8_t)v70)), v28);
    v73 = vminq_u16((uint16x8_t)vbslq_s8((int8x16_t)vmovl_high_s8(v69), v71, (int8x16_t)vqsubq_u16(vmull_high_u8((uint8x16_t)v64, (uint8x16_t)v65), (uint16x8_t)v71)), v28);
    v74 = vbslq_s8(vceqzq_s8(v65), v95.val[0], vsubq_s8(vaddq_s8(v66, v95.val[1]), (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v72, v72, 8uLL), 8uLL), vrsraq_n_u16(v73, v73, 8uLL), 8uLL)));
    v16 = vceqzq_s8(v64);
    *(int8x16_t *)((char *)v20 + v56) = vbslq_s8(v16, v59, v74);
    v21 += v26;
    v17 -= 4;
    if (v17 < 4)
      break;
    v29 = *(_DWORD *)v21;
    v56 += v27;
    if ((*(_DWORD *)v21 - 1) >= 0xFFFFFFFE)
    {
      v18 = (unsigned __int32 *)((char *)v18 + v56);
      v20 = (_DWORD *)((char *)v20 + v56);
      goto LABEL_37;
    }
  }
  v18 = (unsigned __int32 *)((char *)v18 + v27 + v56);
  v20 = (_DWORD *)((char *)v20 + v27 + v56);
LABEL_40:
  v75 = v17 + a15;
  if (v75)
  {
    if (a7)
      v76 = 0;
    else
      v76 = -1;
    v77 = vdup_n_s8(v76);
    if (a8)
      v78 = 0;
    else
      v78 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(v77, (int8x8_t)0xFF000000FFLL);
    v79 = vand_s8(vdup_n_s8(v78), (int8x8_t)0xFF000000FFLL);
    v80 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a14.i32[0] = *v18;
      v81 = vmovl_u8(*(uint8x8_t *)a14.i8);
      LOBYTE(v82) = v81.i8[0];
      BYTE1(v82) = v81.i8[2];
      BYTE2(v82) = v81.i8[4];
      HIBYTE(v82) = v81.i8[6];
      v81.i32[0] = *v20;
      v83 = vmovl_u8(*(uint8x8_t *)v81.i8);
      LOBYTE(v84) = v83.i8[0];
      BYTE1(v84) = v83.i8[2];
      BYTE2(v84) = v83.i8[4];
      HIBYTE(v84) = v83.i8[6];
      v83.i8[0] = *v21;
      v83.i8[1] = *v21;
      v83.i8[2] = *v21;
      v83.i8[3] = *v21;
      v85 = vorr_s8(vbic_s8(v79, vceqz_s8((int8x8_t)v83.u32[0])), (int8x8_t)v84);
      v86 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v82, *(int8x8_t *)a9.i8), (uint8x8_t)v83.u32[0]), v80);
      a14 = vrsraq_n_u16(v86, v86, 8uLL);
      v87 = (int8x8_t)vqrshrn_n_u16(a14, 8uLL);
      *(int8x8_t *)a14.i8 = vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v87, a14, 8uLL), (int8x8_t)0x404040400000000);
      *(int8x8_t *)v88.i8 = v85;
      v88.u64[1] = (unint64_t)v85;
      *(int8x8_t *)v88.i8 = vqtbl1_s8(v88, (int8x8_t)0x404040400000000);
      v89 = (int8x8_t)vmin_u8((uint8x8_t)v87, *(uint8x8_t *)a14.i8);
      v90 = (int8x8_t)vmin_u8((uint8x8_t)v85, *(uint8x8_t *)v88.i8);
      v91 = (int8x16_t)vqaddq_u16(vmull_u8((uint8x8_t)vsub_s8(*(int8x8_t *)a14.i8, v89), (uint8x8_t)v90), vmull_u8((uint8x8_t)vsub_s8(*(int8x8_t *)v88.i8, v90), (uint8x8_t)v89));
      v92 = vminq_u16((uint16x8_t)vbslq_s8((int8x16_t)vmovl_s8((int8x8_t)vcgt_u8(vrhadd_u8(*(uint8x8_t *)v88.i8, 0), (uint8x8_t)v90)), v91, (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)a14.i8, *(uint8x8_t *)v88.i8), (uint16x8_t)v91)), v80);
      *(int8x8_t *)a14.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)a14.i8), v85, vbsl_s8(vceqz_s8(*(int8x8_t *)v88.i8), v87, vsub_s8(vadd_s8(v90, v89), (int8x8_t)vqrshrn_n_u16(vrsraq_n_u16(v92, v92, 8uLL), 8uLL))));
      *(int8x8_t *)a14.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a14, a9));
      *v20 = a14.i32[0];
      v93 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v93 >= v19)
        v94 = -(uint64_t)a5;
      else
        v94 = 0;
      v18 = &v93[v94];
      v20 += a6;
      --v75;
    }
    while (v75);
  }
  *result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)16,_argb8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, int8x16_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  unsigned __int32 *v17;
  unint64_t v18;
  _DWORD *v19;
  char *v20;
  unsigned int v21;
  int8x16_t v22;
  unsigned int v23;
  int8x16_t v24;
  uint64_t v25;
  uint64_t v26;
  uint16x8_t v27;
  __int32 v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int64_t v33;
  int64_t v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  uint8x16_t v46;
  uint8x16_t v47;
  uint16x8_t v48;
  uint8x16_t v49;
  uint16x8_t v50;
  uint8x16_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint64_t v55;
  int8x16_t v56;
  uint8x16_t v57;
  int8x16_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  int8x16_t v63;
  int8x16_t v64;
  uint8x16_t v65;
  uint16x8_t v66;
  uint8x16_t v67;
  uint16x8_t v68;
  uint8x16_t v69;
  uint16x8_t v70;
  int8x16_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  int8x8_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  unsigned int v78;
  uint16x8_t v79;
  unsigned int v80;
  int8x8_t v81;
  uint16x8_t v82;
  uint16x8_t v83;
  int8x8_t v84;
  int8x16_t v85;
  uint8x8_t v86;
  uint8x8_t v87;
  uint16x8_t v88;
  unsigned __int32 *v89;
  uint64_t v90;
  int8x16x2_t v91;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a15 < 4)
    goto LABEL_40;
  if (a7)
    v21 = 0;
  else
    v21 = -1;
  v22.i64[0] = 0xFF000000FFLL;
  v22.i64[1] = 0xFF000000FFLL;
  a9 = vandq_s8(vdupq_n_s8(v21), v22);
  if (a8)
    v23 = 0;
  else
    v23 = -1;
  v24 = vandq_s8(vdupq_n_s8(v23), v22);
  v25 = 4 * a6;
  v26 = 16 * a6;
  v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a13.i64[0] = -1;
  a13.i64[1] = -1;
  while (1)
  {
    v28 = *(_DWORD *)v20;
    if (*(_DWORD *)v20 == -1)
    {
      v35 = (int8x16_t *)&v20[v16];
      v36 = (int8x16_t *)v20;
      do
        v37 = v36++;
      while (v36 <= v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, a13)) & 0x80) != 0);
      do
      {
        v38 = v37;
        v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= v35 && v38->i32[0] == -1);
      if (v38 < v35)
      {
        while (v38->u8[0] == 255)
        {
          v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= v35)
          {
            v38 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      v39 = 0;
      v40 = (char *)v38 - v20;
      v41 = (char *)v38 - v20;
      do
      {
        v42 = vorrq_s8(*(int8x16_t *)((char *)v17 + v39), a9);
        v43 = vorrq_s8(*(int8x16_t *)((char *)v19 + v39), v24);
        v44 = vqtbl1q_s8(v42, (int8x16_t)xmmword_185005170);
        v45 = vqtbl1q_s8(v43, (int8x16_t)xmmword_185005170);
        v46 = vminq_u8((uint8x16_t)v42, (uint8x16_t)v44);
        v47 = vminq_u8((uint8x16_t)v43, (uint8x16_t)v45);
        v48 = vmull_u8(*(uint8x8_t *)v46.i8, *(uint8x8_t *)v45.i8);
        v49 = (uint8x16_t)vmvnq_s8(v45);
        v50 = vmull_u8(*(uint8x8_t *)v46.i8, *(uint8x8_t *)v49.i8);
        v51 = (uint8x16_t)vmvnq_s8(v44);
        v52 = vqaddq_u16(vqaddq_u16(vminq_u16(vmull_high_u8(v47, (uint8x16_t)v44), vmull_high_u8(v46, (uint8x16_t)v45)), vmull_high_u8(v46, v49)), vmull_high_u8(v47, v51));
        v53 = vminq_u16(vqaddq_u16(vqaddq_u16(vminq_u16(vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v44.i8), v48), v50), vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v51.i8)), v27);
        v54 = vminq_u16(v52, v27);
        v15 = vceqzq_s8(v44);
        *(int8x16_t *)((char *)v19 + v39) = vbslq_s8(v15, v43, vbslq_s8(vceqzq_s8(v45), v42, (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v53, v53, 8uLL), 8uLL), vrsraq_n_u16(v54, v54, 8uLL), 8uLL)));
        v20 += v25;
        v41 -= 4;
        v39 += v26;
      }
      while (v41 > 3);
      v19 = (_DWORD *)((char *)v19 + v39);
      v17 = (unsigned __int32 *)((char *)v17 + v39);
      v16 = v16 - v40 + v41;
      goto LABEL_37;
    }
    if (v28)
      break;
    v29 = (int8x16_t *)&v20[v16];
    v30 = (int8x16_t *)v20;
    do
      v31 = v30++;
    while (v30 <= v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      v32 = v31;
      v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= v29 && !v32->i32[0]);
    if (v32 < v29)
    {
      while (!v32->i8[0])
      {
        v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= v29)
        {
          v32 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    v33 = (char *)v32 - v20;
    v34 = ((char *)v32 - v20) * a6;
    v17 += v34;
    v19 += v34;
    v20 += v34;
    v16 -= v33;
LABEL_37:
    if (v16 <= 3)
      goto LABEL_40;
  }
  v55 = 0;
  while (1)
  {
    v15.i32[0] = v28;
    v56 = vqtbl1q_s8(v15, (int8x16_t)xmmword_185004A30);
    v57 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v17 + v55), a9);
    v58 = vorrq_s8(vbicq_s8(v24, vceqzq_s8(v56)), *(int8x16_t *)((char *)v19 + v55));
    v91.val[1] = (int8x16_t)vmull_u8(*(uint8x8_t *)v57.i8, *(uint8x8_t *)v56.i8);
    v59 = vmull_high_u8(v57, (uint8x16_t)v56);
    v60 = vminq_u16((uint16x8_t)v91.val[1], v27);
    v61 = vminq_u16(v59, v27);
    v91.val[0] = (int8x16_t)vrsraq_n_u16(v60, v60, 8uLL);
    v62 = vrsraq_n_u16(v61, v61, 8uLL);
    *(uint8x8_t *)v91.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v91.val[0], 8uLL);
    *(uint8x8_t *)v91.val[1].i8 = vqrshrn_n_u16(v62, 8uLL);
    v63 = vqtbl2q_s8(v91, (int8x16_t)xmmword_185005180);
    v91.val[0] = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v91.val[0].i8, v62, 8uLL);
    v64 = vqtbl1q_s8(v58, (int8x16_t)xmmword_185005170);
    v91.val[1] = (int8x16_t)vminq_u8((uint8x16_t)v91.val[0], (uint8x16_t)v63);
    v65 = vminq_u8((uint8x16_t)v58, (uint8x16_t)v64);
    v66 = vmull_u8(*(uint8x8_t *)v91.val[1].i8, *(uint8x8_t *)v64.i8);
    v67 = (uint8x16_t)vmvnq_s8(v64);
    v68 = vmull_u8(*(uint8x8_t *)v91.val[1].i8, *(uint8x8_t *)v67.i8);
    v69 = (uint8x16_t)vmvnq_s8(v63);
    v91.val[1] = (int8x16_t)vqaddq_u16(vqaddq_u16(vminq_u16(vmull_high_u8(v65, (uint8x16_t)v63), vmull_high_u8((uint8x16_t)v91.val[1], (uint8x16_t)v64)), vmull_high_u8((uint8x16_t)v91.val[1], v67)), vmull_high_u8(v65, v69));
    v70 = vminq_u16(vqaddq_u16(vqaddq_u16(vminq_u16(vmull_u8(*(uint8x8_t *)v65.i8, *(uint8x8_t *)v63.i8), v66), v68), vmull_u8(*(uint8x8_t *)v65.i8, *(uint8x8_t *)v69.i8)), v27);
    v91.val[1] = (int8x16_t)vminq_u16((uint16x8_t)v91.val[1], v27);
    v71 = vbslq_s8(vceqzq_s8(v64), v91.val[0], (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v70, v70, 8uLL), 8uLL), vrsraq_n_u16((uint16x8_t)v91.val[1], (uint16x8_t)v91.val[1], 8uLL), 8uLL));
    v15 = vceqzq_s8(v63);
    *(int8x16_t *)((char *)v19 + v55) = vbslq_s8(v15, v58, v71);
    v20 += v25;
    v16 -= 4;
    if (v16 < 4)
      break;
    v28 = *(_DWORD *)v20;
    v55 += v26;
    if ((*(_DWORD *)v20 - 1) >= 0xFFFFFFFE)
    {
      v17 = (unsigned __int32 *)((char *)v17 + v55);
      v19 = (_DWORD *)((char *)v19 + v55);
      goto LABEL_37;
    }
  }
  v17 = (unsigned __int32 *)((char *)v17 + v26 + v55);
  v19 = (_DWORD *)((char *)v19 + v26 + v55);
LABEL_40:
  v72 = v16 + a14;
  if (v72)
  {
    if (a7)
      v73 = 0;
    else
      v73 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v73), (int8x8_t)0xFF000000FFLL);
    if (a8)
      v74 = 0;
    else
      v74 = -1;
    v75 = vand_s8(vdup_n_s8(v74), (int8x8_t)0xFF000000FFLL);
    v76 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v17;
      v77 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v78) = v77.i8[0];
      BYTE1(v78) = v77.i8[2];
      BYTE2(v78) = v77.i8[4];
      HIBYTE(v78) = v77.i8[6];
      v77.i32[0] = *v19;
      v79 = vmovl_u8(*(uint8x8_t *)v77.i8);
      LOBYTE(v80) = v79.i8[0];
      BYTE1(v80) = v79.i8[2];
      BYTE2(v80) = v79.i8[4];
      HIBYTE(v80) = v79.i8[6];
      v79.i8[0] = *v20;
      v79.i8[1] = *v20;
      v79.i8[2] = *v20;
      v79.i8[3] = *v20;
      v81 = vorr_s8(vbic_s8(v75, vceqz_s8((int8x8_t)v79.u32[0])), (int8x8_t)v80);
      v82 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v78, *(int8x8_t *)a9.i8), (uint8x8_t)v79.u32[0]), v76);
      v83 = vrsraq_n_u16(v82, v82, 8uLL);
      v84 = (int8x8_t)vqrshrn_n_u16(v83, 8uLL);
      v85 = (int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v84, v83, 8uLL);
      *(int8x8_t *)v83.i8 = v81;
      a13.u64[1] = (unint64_t)v81;
      *(int8x8_t *)v85.i8 = vqtbl1_s8(v85, (int8x8_t)0x404040400000000);
      *(int8x8_t *)a13.i8 = vqtbl1_s8(a13, (int8x8_t)0x404040400000000);
      v86 = vmin_u8((uint8x8_t)v84, *(uint8x8_t *)v85.i8);
      v87 = vmin_u8((uint8x8_t)v81, *(uint8x8_t *)a13.i8);
      v88 = vminq_u16(vqaddq_u16(vqaddq_u16(vminq_u16(vmull_u8(v86, *(uint8x8_t *)a13.i8), vmull_u8(v87, *(uint8x8_t *)v85.i8)), vmull_u8(v86, (uint8x8_t)vmvn_s8(*(int8x8_t *)a13.i8))), vmull_u8(v87, (uint8x8_t)vmvn_s8(*(int8x8_t *)v85.i8))), v76);
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v85.i8), v81, vbsl_s8(vceqz_s8(*(int8x8_t *)a13.i8), v84, (int8x8_t)vqrshrn_n_u16(vrsraq_n_u16(v88, v88, 8uLL), 8uLL)));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a13, a9));
      *v19 = a13.i32[0];
      v89 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v89 >= v18)
        v90 = -(uint64_t)a5;
      else
        v90 = 0;
      v17 = &v89[v90];
      v19 += a6;
      --v72;
    }
    while (v72);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)17,_argb8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, int8x16_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  unsigned __int32 *v17;
  unint64_t v18;
  _DWORD *v19;
  char *v20;
  unsigned int v21;
  int8x16_t v22;
  unsigned int v23;
  int8x16_t v24;
  uint64_t v25;
  uint64_t v26;
  uint16x8_t v27;
  __int32 v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int64_t v33;
  int64_t v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  uint8x16_t v46;
  uint8x16_t v47;
  uint16x8_t v48;
  uint8x16_t v49;
  uint16x8_t v50;
  uint8x16_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint64_t v55;
  int8x16_t v56;
  uint8x16_t v57;
  int8x16_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  int8x16_t v63;
  int8x16_t v64;
  uint8x16_t v65;
  uint16x8_t v66;
  uint8x16_t v67;
  uint16x8_t v68;
  uint8x16_t v69;
  uint16x8_t v70;
  int8x16_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  int8x8_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  unsigned int v78;
  uint16x8_t v79;
  unsigned int v80;
  int8x8_t v81;
  uint16x8_t v82;
  uint16x8_t v83;
  int8x8_t v84;
  int8x16_t v85;
  uint8x8_t v86;
  uint8x8_t v87;
  uint16x8_t v88;
  unsigned __int32 *v89;
  uint64_t v90;
  int8x16x2_t v91;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a15 < 4)
    goto LABEL_40;
  if (a7)
    v21 = 0;
  else
    v21 = -1;
  v22.i64[0] = 0xFF000000FFLL;
  v22.i64[1] = 0xFF000000FFLL;
  a9 = vandq_s8(vdupq_n_s8(v21), v22);
  if (a8)
    v23 = 0;
  else
    v23 = -1;
  v24 = vandq_s8(vdupq_n_s8(v23), v22);
  v25 = 4 * a6;
  v26 = 16 * a6;
  v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a13.i64[0] = -1;
  a13.i64[1] = -1;
  while (1)
  {
    v28 = *(_DWORD *)v20;
    if (*(_DWORD *)v20 == -1)
    {
      v35 = (int8x16_t *)&v20[v16];
      v36 = (int8x16_t *)v20;
      do
        v37 = v36++;
      while (v36 <= v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, a13)) & 0x80) != 0);
      do
      {
        v38 = v37;
        v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= v35 && v38->i32[0] == -1);
      if (v38 < v35)
      {
        while (v38->u8[0] == 255)
        {
          v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= v35)
          {
            v38 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      v39 = 0;
      v40 = (char *)v38 - v20;
      v41 = (char *)v38 - v20;
      do
      {
        v42 = vorrq_s8(*(int8x16_t *)((char *)v17 + v39), a9);
        v43 = vorrq_s8(*(int8x16_t *)((char *)v19 + v39), v24);
        v44 = vqtbl1q_s8(v42, (int8x16_t)xmmword_185005170);
        v45 = vqtbl1q_s8(v43, (int8x16_t)xmmword_185005170);
        v46 = vminq_u8((uint8x16_t)v42, (uint8x16_t)v44);
        v47 = vminq_u8((uint8x16_t)v43, (uint8x16_t)v45);
        v48 = vmull_u8(*(uint8x8_t *)v46.i8, *(uint8x8_t *)v45.i8);
        v49 = (uint8x16_t)vmvnq_s8(v45);
        v50 = vmull_u8(*(uint8x8_t *)v46.i8, *(uint8x8_t *)v49.i8);
        v51 = (uint8x16_t)vmvnq_s8(v44);
        v52 = vqaddq_u16(vqaddq_u16(vmaxq_u16(vmull_high_u8(v46, (uint8x16_t)v45), vmull_high_u8(v47, (uint8x16_t)v44)), vmull_high_u8(v46, v49)), vmull_high_u8(v47, v51));
        v53 = vminq_u16(vqaddq_u16(vqaddq_u16(vmaxq_u16(v48, vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v44.i8)), v50), vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v51.i8)), v27);
        v54 = vminq_u16(v52, v27);
        v15 = vceqzq_s8(v44);
        *(int8x16_t *)((char *)v19 + v39) = vbslq_s8(v15, v43, vbslq_s8(vceqzq_s8(v45), v42, (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v53, v53, 8uLL), 8uLL), vrsraq_n_u16(v54, v54, 8uLL), 8uLL)));
        v20 += v25;
        v41 -= 4;
        v39 += v26;
      }
      while (v41 > 3);
      v19 = (_DWORD *)((char *)v19 + v39);
      v17 = (unsigned __int32 *)((char *)v17 + v39);
      v16 = v16 - v40 + v41;
      goto LABEL_37;
    }
    if (v28)
      break;
    v29 = (int8x16_t *)&v20[v16];
    v30 = (int8x16_t *)v20;
    do
      v31 = v30++;
    while (v30 <= v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      v32 = v31;
      v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= v29 && !v32->i32[0]);
    if (v32 < v29)
    {
      while (!v32->i8[0])
      {
        v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= v29)
        {
          v32 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    v33 = (char *)v32 - v20;
    v34 = ((char *)v32 - v20) * a6;
    v17 += v34;
    v19 += v34;
    v20 += v34;
    v16 -= v33;
LABEL_37:
    if (v16 <= 3)
      goto LABEL_40;
  }
  v55 = 0;
  while (1)
  {
    v15.i32[0] = v28;
    v56 = vqtbl1q_s8(v15, (int8x16_t)xmmword_185004A30);
    v57 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v17 + v55), a9);
    v58 = vorrq_s8(vbicq_s8(v24, vceqzq_s8(v56)), *(int8x16_t *)((char *)v19 + v55));
    v91.val[1] = (int8x16_t)vmull_u8(*(uint8x8_t *)v57.i8, *(uint8x8_t *)v56.i8);
    v59 = vmull_high_u8(v57, (uint8x16_t)v56);
    v60 = vminq_u16((uint16x8_t)v91.val[1], v27);
    v61 = vminq_u16(v59, v27);
    v91.val[0] = (int8x16_t)vrsraq_n_u16(v60, v60, 8uLL);
    v62 = vrsraq_n_u16(v61, v61, 8uLL);
    *(uint8x8_t *)v91.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v91.val[0], 8uLL);
    *(uint8x8_t *)v91.val[1].i8 = vqrshrn_n_u16(v62, 8uLL);
    v63 = vqtbl2q_s8(v91, (int8x16_t)xmmword_185005180);
    v91.val[0] = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v91.val[0].i8, v62, 8uLL);
    v64 = vqtbl1q_s8(v58, (int8x16_t)xmmword_185005170);
    v91.val[1] = (int8x16_t)vminq_u8((uint8x16_t)v91.val[0], (uint8x16_t)v63);
    v65 = vminq_u8((uint8x16_t)v58, (uint8x16_t)v64);
    v66 = vmull_u8(*(uint8x8_t *)v91.val[1].i8, *(uint8x8_t *)v64.i8);
    v67 = (uint8x16_t)vmvnq_s8(v64);
    v68 = vmull_u8(*(uint8x8_t *)v91.val[1].i8, *(uint8x8_t *)v67.i8);
    v69 = (uint8x16_t)vmvnq_s8(v63);
    v91.val[1] = (int8x16_t)vqaddq_u16(vqaddq_u16(vmaxq_u16(vmull_high_u8((uint8x16_t)v91.val[1], (uint8x16_t)v64), vmull_high_u8(v65, (uint8x16_t)v63)), vmull_high_u8((uint8x16_t)v91.val[1], v67)), vmull_high_u8(v65, v69));
    v70 = vminq_u16(vqaddq_u16(vqaddq_u16(vmaxq_u16(v66, vmull_u8(*(uint8x8_t *)v65.i8, *(uint8x8_t *)v63.i8)), v68), vmull_u8(*(uint8x8_t *)v65.i8, *(uint8x8_t *)v69.i8)), v27);
    v91.val[1] = (int8x16_t)vminq_u16((uint16x8_t)v91.val[1], v27);
    v71 = vbslq_s8(vceqzq_s8(v64), v91.val[0], (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v70, v70, 8uLL), 8uLL), vrsraq_n_u16((uint16x8_t)v91.val[1], (uint16x8_t)v91.val[1], 8uLL), 8uLL));
    v15 = vceqzq_s8(v63);
    *(int8x16_t *)((char *)v19 + v55) = vbslq_s8(v15, v58, v71);
    v20 += v25;
    v16 -= 4;
    if (v16 < 4)
      break;
    v28 = *(_DWORD *)v20;
    v55 += v26;
    if ((*(_DWORD *)v20 - 1) >= 0xFFFFFFFE)
    {
      v17 = (unsigned __int32 *)((char *)v17 + v55);
      v19 = (_DWORD *)((char *)v19 + v55);
      goto LABEL_37;
    }
  }
  v17 = (unsigned __int32 *)((char *)v17 + v26 + v55);
  v19 = (_DWORD *)((char *)v19 + v26 + v55);
LABEL_40:
  v72 = v16 + a14;
  if (v72)
  {
    if (a7)
      v73 = 0;
    else
      v73 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v73), (int8x8_t)0xFF000000FFLL);
    if (a8)
      v74 = 0;
    else
      v74 = -1;
    v75 = vand_s8(vdup_n_s8(v74), (int8x8_t)0xFF000000FFLL);
    v76 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v17;
      v77 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v78) = v77.i8[0];
      BYTE1(v78) = v77.i8[2];
      BYTE2(v78) = v77.i8[4];
      HIBYTE(v78) = v77.i8[6];
      v77.i32[0] = *v19;
      v79 = vmovl_u8(*(uint8x8_t *)v77.i8);
      LOBYTE(v80) = v79.i8[0];
      BYTE1(v80) = v79.i8[2];
      BYTE2(v80) = v79.i8[4];
      HIBYTE(v80) = v79.i8[6];
      v79.i8[0] = *v20;
      v79.i8[1] = *v20;
      v79.i8[2] = *v20;
      v79.i8[3] = *v20;
      v81 = vorr_s8(vbic_s8(v75, vceqz_s8((int8x8_t)v79.u32[0])), (int8x8_t)v80);
      v82 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v78, *(int8x8_t *)a9.i8), (uint8x8_t)v79.u32[0]), v76);
      v83 = vrsraq_n_u16(v82, v82, 8uLL);
      v84 = (int8x8_t)vqrshrn_n_u16(v83, 8uLL);
      v85 = (int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v84, v83, 8uLL);
      *(int8x8_t *)v83.i8 = v81;
      a13.u64[1] = (unint64_t)v81;
      *(int8x8_t *)v85.i8 = vqtbl1_s8(v85, (int8x8_t)0x404040400000000);
      *(int8x8_t *)a13.i8 = vqtbl1_s8(a13, (int8x8_t)0x404040400000000);
      v86 = vmin_u8((uint8x8_t)v84, *(uint8x8_t *)v85.i8);
      v87 = vmin_u8((uint8x8_t)v81, *(uint8x8_t *)a13.i8);
      v88 = vminq_u16(vqaddq_u16(vqaddq_u16(vmaxq_u16(vmull_u8(v86, *(uint8x8_t *)a13.i8), vmull_u8(v87, *(uint8x8_t *)v85.i8)), vmull_u8(v86, (uint8x8_t)vmvn_s8(*(int8x8_t *)a13.i8))), vmull_u8(v87, (uint8x8_t)vmvn_s8(*(int8x8_t *)v85.i8))), v76);
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v85.i8), v81, vbsl_s8(vceqz_s8(*(int8x8_t *)a13.i8), v84, (int8x8_t)vqrshrn_n_u16(vrsraq_n_u16(v88, v88, 8uLL), 8uLL)));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a13, a9));
      *v19 = a13.i32[0];
      v89 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v89 >= v18)
        v90 = -(uint64_t)a5;
      else
        v90 = 0;
      v17 = &v89[v90];
      v19 += a6;
      --v72;
    }
    while (v72);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

_DWORD **vec::template_mark_pixelmask_row<(CGCompositeOperation)18,_argb8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, uint8x8_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  int8x16_t v16;
  uint8x16_t v17;
  unint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  _DWORD *v21;
  char *v22;
  unsigned int v23;
  int8x16_t v24;
  unsigned int v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t v28;
  uint16x8_t v29;
  int8x16_t v30;
  __int32 v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int64_t v36;
  int64_t v37;
  int8x16_t *v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  uint8x16_t v49;
  int8x16_t v50;
  uint8x16_t v51;
  uint16x8_t v52;
  unsigned __int128 v53;
  int8x16_t v54;
  int8x16_t v55;
  uint64_t v56;
  uint64_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  int8x8_t v60;
  int8x16_t v61;
  int8x16_t v62;
  uint8x16_t v63;
  uint16x8_t v64;
  uint16x8_t v65;
  uint16x8_t v66;
  uint16x8_t v67;
  uint16x8_t v68;
  uint8x16_t v69;
  uint64_t v70;
  int8x16_t v71;
  uint8x16_t v72;
  int8x16_t v73;
  uint16x8_t v74;
  uint16x8_t v75;
  uint16x8_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  uint8x16_t v80;
  int8x16_t v81;
  uint8x16_t v82;
  uint16x8_t v83;
  unsigned __int128 v84;
  int8x16_t v85;
  int8x16_t v86;
  uint64_t v87;
  uint64_t v88;
  uint16x8_t v89;
  uint16x8_t v90;
  int8x8_t v91;
  int8x16_t v92;
  int8x16_t v93;
  uint8x16_t v94;
  uint16x8_t v95;
  uint16x8_t v96;
  uint16x8_t v97;
  uint16x8_t v98;
  uint16x8_t v99;
  uint8x16_t v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  int8x8_t v104;
  uint16x8_t v105;
  uint16x8_t v106;
  unsigned int v107;
  int8x16_t v108;
  unsigned int v109;
  unsigned int v110;
  uint16x8_t v111;
  uint16x8_t v112;
  int8x8_t v113;
  int8x16_t v114;
  uint8x8_t v115;
  int8x8_t v116;
  uint16x8_t v117;
  int8x16_t v118;
  int8x8_t v119;
  uint16x8_t v120;
  uint16x8_t v121;
  uint16x8_t v122;
  uint8x8_t v123;
  _DWORD *v124;
  uint64_t v125;
  int8x16x2_t v126;
  int8x16x2_t v127;

  v18 = a15;
  v19 = *result;
  v20 = *a3;
  v21 = *a2;
  v22 = *a4;
  if (a15 < 4)
    goto LABEL_40;
  if (a7)
    v23 = 0;
  else
    v23 = -1;
  v24.i64[0] = 0xFF000000FFLL;
  v24.i64[1] = 0xFF000000FFLL;
  a9 = vandq_s8(vdupq_n_s8(v23), v24);
  if (a8)
    v25 = 0;
  else
    v25 = -1;
  v26 = vandq_s8(vdupq_n_s8(v25), v24);
  v27 = 4 * a6;
  v28 = 16 * a6;
  v29 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a13.i32[1] = 67372036;
  v30.i64[0] = -1;
  v30.i64[1] = -1;
  while (1)
  {
    v31 = *(_DWORD *)v22;
    if (*(_DWORD *)v22 == -1)
    {
      v38 = (int8x16_t *)&v22[v18];
      v39 = (int8x16_t *)v22;
      do
        v40 = v39++;
      while (v39 <= v38 && (vminvq_u8((uint8x16_t)vceqq_s8(*v40, v30)) & 0x80) != 0);
      do
      {
        v41 = v40;
        v40 = (int8x16_t *)((char *)v40 + 4);
      }
      while (v40 <= v38 && v41->i32[0] == -1);
      if (v41 < v38)
      {
        while (v41->u8[0] == 255)
        {
          v41 = (int8x16_t *)((char *)v41 + 1);
          if (v41 >= v38)
          {
            v41 = (int8x16_t *)&v22[v18];
            break;
          }
        }
      }
      v42 = 0;
      v43 = (char *)v41 - v22;
      v44 = v43;
      do
      {
        v45 = vorrq_s8(*(int8x16_t *)((char *)v19 + v42), a9);
        v46 = vorrq_s8(*(int8x16_t *)((char *)v21 + v42), v26);
        v47 = vqtbl1q_s8(v45, (int8x16_t)xmmword_185005170);
        v48 = vqtbl1q_s8(v46, (int8x16_t)xmmword_185005170);
        v49 = vminq_u8((uint8x16_t)v45, (uint8x16_t)v47);
        v50 = (int8x16_t)vminq_u8((uint8x16_t)v46, (uint8x16_t)v48);
        v51 = (uint8x16_t)vmvnq_s8(v48);
        v52 = vmull_u8(*(uint8x8_t *)v49.i8, *(uint8x8_t *)v51.i8);
        v126.val[1] = (int8x16_t)vmull_high_u8(v49, v51);
        v53 = *(_OWORD *)&v49 & __PAIR128__(0xFFFFFF00FFFFFF00, 0xFFFFFF00FFFFFF00);
        v54 = vbicq_s8(vtstq_s8(v50, v50), (int8x16_t)vcgtq_u8((uint8x16_t)v47, (uint8x16_t)v53));
        v55 = vorrq_s8((int8x16_t)vqsubq_u8((uint8x16_t)v47, (uint8x16_t)v53), vceqzq_s8(v50));
        v56 = *(_QWORD *)&vzip1_s8(*(int8x8_t *)v55.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
        v57 = *(_QWORD *)&vzip2_s8(*(int8x8_t *)v55.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
        v55.i64[0] = vextq_s8(v55, v55, 8uLL).u64[0];
        v58 = vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v47.i8);
        v59 = vmull_high_u8((uint8x16_t)v47, (uint8x16_t)v47);
        v60 = (int8x8_t)vextq_s8(v50, v50, 8uLL).u64[0];
        v61 = (int8x16_t)vqmovun_high_s32(vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v50.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v58.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v56))))), vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v50.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_high_u16(v58))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v57)))));
        v62 = (int8x16_t)vqmovun_high_s32(vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v60, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v59.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v55.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v60, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_high_u16(v59))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v55.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))))));
        v63 = (uint8x16_t)vmvnq_s8(v47);
        v64 = vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v63.i8);
        v65 = vmull_high_u8((uint8x16_t)v50, v63);
        v66 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vorrq_s8(v61, (int8x16_t)vmovl_s8(*(int8x8_t *)v54.i8)), v64), v52), v29);
        v67 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vorrq_s8(v62, (int8x16_t)vmovl_high_s8(v54)), v65), (uint16x8_t)v126.val[1]), v29);
        v126.val[0] = (int8x16_t)vrsraq_n_u16(v66, v66, 8uLL);
        v68 = vrsraq_n_u16(v67, v67, 8uLL);
        *(uint8x8_t *)v126.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v126.val[0], 8uLL);
        *(uint8x8_t *)v126.val[1].i8 = vqrshrn_n_u16(v68, 8uLL);
        v69 = (uint8x16_t)vqtbl2q_s8(v126, (int8x16_t)xmmword_185005180);
        v17 = vqrshrn_high_n_u16(*(uint8x8_t *)v126.val[0].i8, v68, 8uLL);
        v16 = (int8x16_t)vminq_u8(v17, v69);
        v15 = vceqzq_s8(v47);
        *(int8x16_t *)((char *)v21 + v42) = vbslq_s8(v15, v46, vbslq_s8(vceqzq_s8(v48), v45, v16));
        v22 += v27;
        v44 -= 4;
        v42 += v28;
      }
      while (v44 > 3);
      v21 = (_DWORD *)((char *)v21 + v42);
      v19 = (_DWORD *)((char *)v19 + v42);
      v18 = v18 - v43 + v44;
      goto LABEL_37;
    }
    if (v31)
      break;
    v32 = (int8x16_t *)&v22[v18];
    v33 = (int8x16_t *)v22;
    do
      v34 = v33++;
    while (v33 <= v32 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v34)) & 0x80) != 0);
    do
    {
      v35 = v34;
      v34 = (int8x16_t *)((char *)v34 + 4);
    }
    while (v34 <= v32 && !v35->i32[0]);
    if (v35 < v32)
    {
      while (!v35->i8[0])
      {
        v35 = (int8x16_t *)((char *)v35 + 1);
        if (v35 >= v32)
        {
          v35 = (int8x16_t *)&v22[v18];
          break;
        }
      }
    }
    v36 = (char *)v35 - v22;
    v37 = ((char *)v35 - v22) * a6;
    v19 += v37;
    v21 += v37;
    v22 += v37;
    v18 -= v36;
LABEL_37:
    if (v18 <= 3)
      goto LABEL_40;
  }
  v70 = 0;
  while (1)
  {
    v15.i32[0] = v31;
    v71 = vqtbl1q_s8(v15, (int8x16_t)xmmword_185004A30);
    v72 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v19 + v70), a9);
    v73 = vorrq_s8(vbicq_s8(v26, vceqzq_s8(v71)), *(int8x16_t *)((char *)v21 + v70));
    v74 = vminq_u16(vmull_u8(*(uint8x8_t *)v72.i8, *(uint8x8_t *)v71.i8), v29);
    v75 = vminq_u16(vmull_high_u8(v72, (uint8x16_t)v71), v29);
    v76 = vrsraq_n_u16(v75, v75, 8uLL);
    *(uint8x8_t *)v16.i8 = vqrshrn_n_u16(vrsraq_n_u16(v74, v74, 8uLL), 8uLL);
    *(uint8x8_t *)v17.i8 = vqrshrn_n_u16(v76, 8uLL);
    v77 = vqtbl2q_s8(*(int8x16x2_t *)v16.i8, (int8x16_t)xmmword_185005180);
    v78 = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v16.i8, v76, 8uLL);
    v79 = vqtbl1q_s8(v73, (int8x16_t)xmmword_185005170);
    v80 = vminq_u8((uint8x16_t)v78, (uint8x16_t)v77);
    v81 = (int8x16_t)vminq_u8((uint8x16_t)v73, (uint8x16_t)v79);
    v82 = (uint8x16_t)vmvnq_s8(v79);
    v83 = vmull_u8(*(uint8x8_t *)v80.i8, *(uint8x8_t *)v82.i8);
    v127.val[1] = (int8x16_t)vmull_high_u8(v80, v82);
    v84 = *(_OWORD *)&v80 & __PAIR128__(0xFFFFFF00FFFFFF00, 0xFFFFFF00FFFFFF00);
    v85 = vbicq_s8(vtstq_s8(v81, v81), (int8x16_t)vcgtq_u8((uint8x16_t)v77, (uint8x16_t)v84));
    v86 = vorrq_s8((int8x16_t)vqsubq_u8((uint8x16_t)v77, (uint8x16_t)v84), vceqzq_s8(v81));
    v87 = *(_QWORD *)&vzip1_s8(*(int8x8_t *)v86.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
    v88 = *(_QWORD *)&vzip2_s8(*(int8x8_t *)v86.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
    v86.i64[0] = vextq_s8(v86, v86, 8uLL).u64[0];
    v89 = vmull_u8(*(uint8x8_t *)v77.i8, *(uint8x8_t *)v77.i8);
    v90 = vmull_high_u8((uint8x16_t)v77, (uint8x16_t)v77);
    v91 = (int8x8_t)vextq_s8(v81, v81, 8uLL).u64[0];
    v92 = (int8x16_t)vqmovun_high_s32(vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v81.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v89.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v87))))), vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v81.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_high_u16(v89))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v88)))));
    v93 = (int8x16_t)vqmovun_high_s32(vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v91, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v90.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v86.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v91, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_high_u16(v90))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v86.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))))));
    v94 = (uint8x16_t)vmvnq_s8(v77);
    v95 = vmull_u8(*(uint8x8_t *)v81.i8, *(uint8x8_t *)v94.i8);
    v96 = vmull_high_u8((uint8x16_t)v81, v94);
    v97 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vorrq_s8(v92, (int8x16_t)vmovl_s8(*(int8x8_t *)v85.i8)), v95), v83), v29);
    v98 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vorrq_s8(v93, (int8x16_t)vmovl_high_s8(v85)), v96), (uint16x8_t)v127.val[1]), v29);
    v127.val[0] = (int8x16_t)vrsraq_n_u16(v97, v97, 8uLL);
    v99 = vrsraq_n_u16(v98, v98, 8uLL);
    *(uint8x8_t *)v127.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v127.val[0], 8uLL);
    *(uint8x8_t *)v127.val[1].i8 = vqrshrn_n_u16(v99, 8uLL);
    v100 = (uint8x16_t)vqtbl2q_s8(v127, (int8x16_t)xmmword_185005180);
    v17 = vqrshrn_high_n_u16(*(uint8x8_t *)v127.val[0].i8, v99, 8uLL);
    v16 = (int8x16_t)vminq_u8(v17, v100);
    v15 = vbslq_s8(vceqzq_s8(v79), v78, v16);
    *(int8x16_t *)((char *)v21 + v70) = vbslq_s8(vceqzq_s8(v77), v73, v15);
    v22 += v27;
    v18 -= 4;
    if (v18 < 4)
      break;
    v31 = *(_DWORD *)v22;
    v70 += v28;
    if ((*(_DWORD *)v22 - 1) >= 0xFFFFFFFE)
    {
      v19 = (_DWORD *)((char *)v19 + v70);
      v21 = (_DWORD *)((char *)v21 + v70);
      goto LABEL_37;
    }
  }
  v19 = (_DWORD *)((char *)v19 + v28 + v70);
  v21 = (_DWORD *)((char *)v21 + v28 + v70);
LABEL_40:
  v101 = v18 + a14;
  if (v101)
  {
    if (a7)
      v102 = 0;
    else
      v102 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v102), (int8x8_t)0xFF000000FFLL);
    if (a8)
      v103 = 0;
    else
      v103 = -1;
    v104 = vand_s8(vdup_n_s8(v103), (int8x8_t)0xFF000000FFLL);
    v105 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v19;
      v106 = vmovl_u8(a13);
      LOBYTE(v107) = v106.i8[0];
      BYTE1(v107) = v106.i8[2];
      BYTE2(v107) = v106.i8[4];
      HIBYTE(v107) = v106.i8[6];
      v106.i32[0] = *v21;
      v108 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v106.i8);
      LOBYTE(v109) = v108.i8[0];
      BYTE1(v109) = v108.i8[2];
      BYTE2(v109) = v108.i8[4];
      HIBYTE(v109) = v108.i8[6];
      LOBYTE(v110) = *v22;
      BYTE1(v110) = *v22;
      BYTE2(v110) = *v22;
      HIBYTE(v110) = *v22;
      *(int8x8_t *)v108.i8 = vorr_s8(vbic_s8(v104, vceqz_s8((int8x8_t)v110)), (int8x8_t)v109);
      v111 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v107, *(int8x8_t *)a9.i8), (uint8x8_t)v110), v105);
      v112 = vrsraq_n_u16(v111, v111, 8uLL);
      v113 = (int8x8_t)vqrshrn_n_u16(v112, 8uLL);
      *(int8x8_t *)v112.i8 = vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v113, v112, 8uLL), (int8x8_t)0x404040400000000);
      v114.i64[0] = v108.i64[0];
      v114.i64[1] = v108.i64[0];
      *(int8x8_t *)v114.i8 = vqtbl1_s8(v114, (int8x8_t)0x404040400000000);
      v115 = vmin_u8((uint8x8_t)v113, *(uint8x8_t *)v112.i8);
      v116 = (int8x8_t)vmin_u8(*(uint8x8_t *)v108.i8, *(uint8x8_t *)v114.i8);
      v117 = vmull_u8(v115, (uint8x8_t)vmvn_s8(*(int8x8_t *)v114.i8));
      *(_QWORD *)&v115 &= 0xFFFFFF00FFFFFF00;
      v118 = (int8x16_t)vmovl_s8(vbic_s8(vtst_s8(v116, v116), (int8x8_t)vcgt_u8(*(uint8x8_t *)v112.i8, v115)));
      v119 = vorr_s8((int8x8_t)vqsub_u8(*(uint8x8_t *)v112.i8, v115), vceqz_s8(v116));
      v120 = vmull_u8(*(uint8x8_t *)v112.i8, *(uint8x8_t *)v112.i8);
      v121 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vorrq_s8((int8x16_t)vqmovun_high_s32(vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v116, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v120.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v119, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v116, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_high_u16(v120))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v119, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))),
                                 v118),
                   vmull_u8((uint8x8_t)v116, (uint8x8_t)vmvn_s8(*(int8x8_t *)v112.i8))),
                 v117),
               v105);
      v122 = vrsraq_n_u16(v121, v121, 8uLL);
      v123 = vqrshrn_n_u16(v122, 8uLL);
      *(int8x8_t *)v108.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v112.i8), *(int8x8_t *)v108.i8, vbsl_s8(vceqz_s8(*(int8x8_t *)v114.i8), v113, (int8x8_t)vmin_u8(v123, (uint8x8_t)vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16(v123, v122, 8uLL), (int8x8_t)0x404040400000000))));
      a13 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v108, a9));
      *v21 = a13.i32[0];
      v124 = &v19[a6];
      v22 += a6;
      if ((unint64_t)v124 >= v20)
        v125 = -(uint64_t)a5;
      else
        v125 = 0;
      v19 = &v124[v125];
      v21 += a6;
      --v101;
    }
    while (v101);
  }
  *result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)19,_argb8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, double a13, int8x16_t a14, uint64_t a15, unint64_t a16)
{
  int8x16_t v16;
  int8x16_t v17;
  int32x4_t v18;
  unint64_t v19;
  unsigned __int32 *v20;
  unint64_t v21;
  _DWORD *v22;
  char *v23;
  unsigned int v24;
  int8x16_t v25;
  unsigned int v26;
  int8x16_t v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t v30;
  __int32 v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int64_t v36;
  int64_t v37;
  int8x16_t *v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  uint64_t v42;
  int64_t v43;
  unint64_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  uint8x16_t v50;
  int8x16_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int8x8_t v54;
  float32x4_t v55;
  float32x4_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  int8x8_t v59;
  uint64_t v60;
  uint64_t v61;
  uint16x8_t v62;
  uint16x8_t v63;
  uint8x16_t v64;
  uint16x8_t v65;
  uint16x8_t v66;
  uint8x16_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  uint64_t v72;
  int8x16_t v73;
  uint8x16_t v74;
  int8x16_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  uint16x8_t v78;
  uint16x8_t v79;
  uint16x8_t v80;
  uint16x8_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  uint8x16_t v86;
  int8x16_t v87;
  float32x4_t v88;
  float32x4_t v89;
  int8x8_t v90;
  float32x4_t v91;
  float32x4_t v92;
  uint16x8_t v93;
  uint16x8_t v94;
  int8x8_t v95;
  uint64_t v96;
  uint64_t v97;
  uint16x8_t v98;
  uint16x8_t v99;
  uint8x16_t v100;
  uint16x8_t v101;
  uint16x8_t v102;
  uint8x16_t v103;
  uint16x8_t v104;
  uint16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  int8x8_t v111;
  uint16x8_t v112;
  float32x4_t v113;
  uint16x8_t v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  uint16x8_t v118;
  uint16x8_t v119;
  int8x8_t v120;
  int8x16_t v121;
  int8x8_t v122;
  uint8x8_t v123;
  int8x8_t v124;
  float32x4_t v125;
  float32x4_t v126;
  uint16x8_t v127;
  uint64_t v128;
  uint64_t v129;
  uint16x8_t v130;
  uint16x8_t v131;
  uint16x8_t v132;
  int16x8_t v133;
  unsigned __int32 *v134;
  uint64_t v135;

  v19 = a16;
  v20 = *result;
  v21 = *a3;
  v22 = *a2;
  v23 = *a4;
  if (a16 < 4)
    goto LABEL_40;
  if (a7)
    v24 = 0;
  else
    v24 = -1;
  v25.i64[0] = 0xFF000000FFLL;
  v25.i64[1] = 0xFF000000FFLL;
  a9 = vandq_s8(vdupq_n_s8(v24), v25);
  if (a8)
    v26 = 0;
  else
    v26 = -1;
  v27 = vandq_s8(vdupq_n_s8(v26), v25);
  v28 = 4 * a6;
  v29 = 16 * a6;
  v30 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  a14.i64[0] = -1;
  a14.i64[1] = -1;
  while (1)
  {
    v31 = *(_DWORD *)v23;
    if (*(_DWORD *)v23 == -1)
    {
      v38 = (int8x16_t *)&v23[v19];
      v39 = (int8x16_t *)v23;
      do
        v40 = v39++;
      while (v39 <= v38 && (vminvq_u8((uint8x16_t)vceqq_s8(*v40, a14)) & 0x80) != 0);
      do
      {
        v41 = v40;
        v40 = (int8x16_t *)((char *)v40 + 4);
      }
      while (v40 <= v38 && v41->i32[0] == -1);
      if (v41 < v38)
      {
        while (v41->u8[0] == 255)
        {
          v41 = (int8x16_t *)((char *)v41 + 1);
          if (v41 >= v38)
          {
            v41 = (int8x16_t *)&v23[v19];
            break;
          }
        }
      }
      v42 = 0;
      v43 = (char *)v41 - v23;
      v44 = (char *)v41 - v23;
      do
      {
        v45 = vorrq_s8(*(int8x16_t *)((char *)v20 + v42), a9);
        v46 = vorrq_s8(*(int8x16_t *)((char *)v22 + v42), v27);
        v47 = vqtbl1q_s8(v45, (int8x16_t)xmmword_185005170);
        v48 = vqtbl1q_s8(v46, (int8x16_t)xmmword_185005170);
        v49 = (int8x16_t)vminq_u8((uint8x16_t)v45, (uint8x16_t)v47);
        v50 = vminq_u8((uint8x16_t)v46, (uint8x16_t)v48);
        v51 = (int8x16_t)vqsubq_u8((uint8x16_t)v48, v50);
        v52 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v51.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
        v53 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v51.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
        v54 = (int8x8_t)vextq_s8(v51, v51, 8uLL).u64[0];
        v55 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v54, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
        v56 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v54, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
        v57 = vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v47.i8);
        v58 = vmull_high_u8((uint8x16_t)v47, (uint8x16_t)v47);
        v59 = (int8x8_t)vextq_s8(v49, v49, 8uLL).u64[0];
        v60 = *(_QWORD *)&vzip2_s8(*(int8x8_t *)v49.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
        v61 = *(_QWORD *)&vzip1_s8(*(int8x8_t *)v49.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
        v62 = vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v48.i8);
        v63 = vmull_high_u8((uint8x16_t)v47, (uint8x16_t)v48);
        v64 = (uint8x16_t)vmvnq_s8(v47);
        v65 = vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v64.i8);
        v66 = vmull_high_u8(v50, v64);
        v67 = (uint8x16_t)vmvnq_s8(v48);
        v68 = vmull_u8(*(uint8x8_t *)v49.i8, *(uint8x8_t *)v67.i8);
        v69 = vmull_high_u8((uint8x16_t)v49, v67);
        v18 = vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v65)), vcvtq_f32_u32(vmovl_high_u16(v68))), vcvtq_f32_u32(vmovl_high_u16(v62))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v53, vcvtq_f32_u32(vmovl_high_u16(v57))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v60))), (int8x16_t)vceqzq_f32(v53))), v30));
        v70 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v65.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v68.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v62.i8))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v52, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v57.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v61))), (int8x16_t)vceqzq_f32(v52))), v30))), v18);
        *(int8x8_t *)v70.i8 = vqmovun_s16(v70);
        v71 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v66.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v69.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v63.i8))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v55, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v58.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v59, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))), (int8x16_t)vceqzq_f32(v55))), v30))), vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(
                        vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v66)), vcvtq_f32_u32(vmovl_high_u16(v69))),
                        vcvtq_f32_u32(vmovl_high_u16(v63))),
                      (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v56, vcvtq_f32_u32(vmovl_high_u16(v58))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v59, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))), (int8x16_t)vceqzq_f32(v56))), v30)));
        *(int8x8_t *)v18.i8 = vqmovun_s16(v71);
        v17 = (int8x16_t)vminq_u8((uint8x16_t)vqmovun_high_s16(*(int8x8_t *)v70.i8, v71), (uint8x16_t)vqtbl2q_s8(*(int8x16x2_t *)(&v18 - 1), (int8x16_t)xmmword_185005180));
        v16 = vceqzq_s8(v47);
        *(int8x16_t *)((char *)v22 + v42) = vbslq_s8(v16, v46, vbslq_s8(vceqzq_s8(v48), v45, v17));
        v23 += v28;
        v44 -= 4;
        v42 += v29;
      }
      while (v44 > 3);
      v22 = (_DWORD *)((char *)v22 + v42);
      v20 = (unsigned __int32 *)((char *)v20 + v42);
      v19 = v19 - v43 + v44;
      goto LABEL_37;
    }
    if (v31)
      break;
    v32 = (int8x16_t *)&v23[v19];
    v33 = (int8x16_t *)v23;
    do
      v34 = v33++;
    while (v33 <= v32 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v34)) & 0x80) != 0);
    do
    {
      v35 = v34;
      v34 = (int8x16_t *)((char *)v34 + 4);
    }
    while (v34 <= v32 && !v35->i32[0]);
    if (v35 < v32)
    {
      while (!v35->i8[0])
      {
        v35 = (int8x16_t *)((char *)v35 + 1);
        if (v35 >= v32)
        {
          v35 = (int8x16_t *)&v23[v19];
          break;
        }
      }
    }
    v36 = (char *)v35 - v23;
    v37 = ((char *)v35 - v23) * a6;
    v20 += v37;
    v22 += v37;
    v23 += v37;
    v19 -= v36;
LABEL_37:
    if (v19 <= 3)
      goto LABEL_40;
  }
  v72 = 0;
  while (1)
  {
    v16.i32[0] = v31;
    v73 = vqtbl1q_s8(v16, (int8x16_t)xmmword_185004A30);
    v74 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v20 + v72), a9);
    v75 = vorrq_s8(vbicq_s8(v27, vceqzq_s8(v73)), *(int8x16_t *)((char *)v22 + v72));
    v76 = vmull_u8(*(uint8x8_t *)v74.i8, *(uint8x8_t *)v73.i8);
    v77 = vmull_high_u8(v74, (uint8x16_t)v73);
    v78 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    v79 = vminq_u16(v76, v78);
    v80 = vminq_u16(v77, v78);
    v81 = vrsraq_n_u16(v80, v80, 8uLL);
    *(uint8x8_t *)v17.i8 = vqrshrn_n_u16(vrsraq_n_u16(v79, v79, 8uLL), 8uLL);
    *(uint8x8_t *)v18.i8 = vqrshrn_n_u16(v81, 8uLL);
    v82 = vqtbl2q_s8(*(int8x16x2_t *)v17.i8, (int8x16_t)xmmword_185005180);
    v83 = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v17.i8, v81, 8uLL);
    v84 = vqtbl1q_s8(v75, (int8x16_t)xmmword_185005170);
    v85 = (int8x16_t)vminq_u8((uint8x16_t)v83, (uint8x16_t)v82);
    v86 = vminq_u8((uint8x16_t)v75, (uint8x16_t)v84);
    v87 = (int8x16_t)vqsubq_u8((uint8x16_t)v84, v86);
    v88 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v87.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
    *(int8x8_t *)v18.i8 = vzip2_s8(*(int8x8_t *)v87.i8, *(int8x8_t *)a9.i8);
    v18.i32[0] &= 0xFF00FFu;
    v18.i16[2] = v18.u8[4];
    v18.i16[3] = v18.u8[6];
    v89 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v18.i8));
    v90 = (int8x8_t)vextq_s8(v87, v87, 8uLL).u64[0];
    v91 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v90, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
    v92 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v90, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
    v93 = vmull_u8(*(uint8x8_t *)v82.i8, *(uint8x8_t *)v82.i8);
    v94 = vmull_high_u8((uint8x16_t)v82, (uint8x16_t)v82);
    v95 = (int8x8_t)vextq_s8(v85, v85, 8uLL).u64[0];
    v96 = *(_QWORD *)&vzip2_s8(*(int8x8_t *)v85.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
    v97 = *(_QWORD *)&vzip1_s8(*(int8x8_t *)v85.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
    v98 = vmull_u8(*(uint8x8_t *)v82.i8, *(uint8x8_t *)v84.i8);
    v99 = vmull_high_u8((uint8x16_t)v82, (uint8x16_t)v84);
    v100 = (uint8x16_t)vmvnq_s8(v82);
    v101 = vmull_u8(*(uint8x8_t *)v86.i8, *(uint8x8_t *)v100.i8);
    v102 = vmull_high_u8(v86, v100);
    v103 = (uint8x16_t)vmvnq_s8(v84);
    v104 = vmull_u8(*(uint8x8_t *)v85.i8, *(uint8x8_t *)v103.i8);
    v105 = vmull_high_u8((uint8x16_t)v85, v103);
    v18 = vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v101)), vcvtq_f32_u32(vmovl_high_u16(v104))), vcvtq_f32_u32(vmovl_high_u16(v98))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v89, vcvtq_f32_u32(vmovl_high_u16(v93))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v96))), (int8x16_t)vceqzq_f32(v89))), v30));
    v106 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v101.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v104.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v98.i8))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v88, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v93.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v97))), (int8x16_t)vceqzq_f32(v88))), v30))), v18);
    *(int8x8_t *)v106.i8 = vqmovun_s16(v106);
    v107 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v102.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v105.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v99.i8))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v91, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v94.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v95, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))), (int8x16_t)vceqzq_f32(v91))), v30))), vcvtnq_s32_f32(vmulq_f32(
                 vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v102)), vcvtq_f32_u32(vmovl_high_u16(v105))), vcvtq_f32_u32(vmovl_high_u16(v99))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v92, vcvtq_f32_u32(vmovl_high_u16(v94))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v95, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))), (int8x16_t)vceqzq_f32(v92))), v30)));
    *(int8x8_t *)v18.i8 = vqmovun_s16(v107);
    v17 = (int8x16_t)vminq_u8((uint8x16_t)vqmovun_high_s16(*(int8x8_t *)v106.i8, v107), (uint8x16_t)vqtbl2q_s8(*(int8x16x2_t *)(&v18 - 1), (int8x16_t)xmmword_185005180));
    v16 = vbslq_s8(vceqzq_s8(v84), v83, v17);
    *(int8x16_t *)((char *)v22 + v72) = vbslq_s8(vceqzq_s8(v82), v75, v16);
    v23 += v28;
    v19 -= 4;
    if (v19 < 4)
      break;
    v31 = *(_DWORD *)v23;
    v72 += v29;
    if ((*(_DWORD *)v23 - 1) >= 0xFFFFFFFE)
    {
      v20 = (unsigned __int32 *)((char *)v20 + v72);
      v22 = (_DWORD *)((char *)v22 + v72);
      goto LABEL_37;
    }
  }
  v20 = (unsigned __int32 *)((char *)v20 + v29 + v72);
  v22 = (_DWORD *)((char *)v22 + v29 + v72);
LABEL_40:
  v108 = v19 + a15;
  if (v108)
  {
    if (a7)
      v109 = 0;
    else
      v109 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v109), (int8x8_t)0xFF000000FFLL);
    if (a8)
      v110 = 0;
    else
      v110 = -1;
    v111 = vand_s8(vdup_n_s8(v110), (int8x8_t)0xFF000000FFLL);
    v112 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    v113 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    do
    {
      a14.i32[0] = *v20;
      v114 = vmovl_u8(*(uint8x8_t *)a14.i8);
      LOBYTE(v115) = v114.i8[0];
      BYTE1(v115) = v114.i8[2];
      BYTE2(v115) = v114.i8[4];
      HIBYTE(v115) = v114.i8[6];
      v114.i32[0] = *v22;
      a14 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v114.i8);
      LOBYTE(v116) = a14.i8[0];
      BYTE1(v116) = a14.i8[2];
      BYTE2(v116) = a14.i8[4];
      HIBYTE(v116) = a14.i8[6];
      LOBYTE(v117) = *v23;
      BYTE1(v117) = *v23;
      BYTE2(v117) = *v23;
      HIBYTE(v117) = *v23;
      *(int8x8_t *)a14.i8 = vorr_s8(vbic_s8(v111, vceqz_s8((int8x8_t)v117)), (int8x8_t)v116);
      v118 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v115, *(int8x8_t *)a9.i8), (uint8x8_t)v117), v112);
      v119 = vrsraq_n_u16(v118, v118, 8uLL);
      v120 = (int8x8_t)vqrshrn_n_u16(v119, 8uLL);
      *(int8x8_t *)v119.i8 = vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v120, v119, 8uLL), (int8x8_t)0x404040400000000);
      v121.i64[0] = a14.i64[0];
      v121.i64[1] = a14.i64[0];
      *(int8x8_t *)v121.i8 = vqtbl1_s8(v121, (int8x8_t)0x404040400000000);
      v122 = (int8x8_t)vmin_u8((uint8x8_t)v120, *(uint8x8_t *)v119.i8);
      v123 = vmin_u8(*(uint8x8_t *)a14.i8, *(uint8x8_t *)v121.i8);
      v124 = (int8x8_t)vqsub_u8(*(uint8x8_t *)v121.i8, v123);
      v125 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v124, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
      v126 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v124, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
      v127 = vmull_u8(*(uint8x8_t *)v119.i8, *(uint8x8_t *)v119.i8);
      v128 = *(_QWORD *)&vzip2_s8(v122, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
      v129 = *(_QWORD *)&vzip1_s8(v122, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
      v130 = vmull_u8(*(uint8x8_t *)v119.i8, *(uint8x8_t *)v121.i8);
      v131 = vmull_u8(v123, (uint8x8_t)vmvn_s8(*(int8x8_t *)v119.i8));
      v132 = vmull_u8((uint8x8_t)v122, (uint8x8_t)vmvn_s8(*(int8x8_t *)v121.i8));
      v133 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v131.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v132.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v130.i8))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v125, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v127.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v129))), (int8x16_t)vceqzq_f32(v125))), v113))), vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(
                       vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v131)), vcvtq_f32_u32(vmovl_high_u16(v132))),
                       vcvtq_f32_u32(vmovl_high_u16(v130))),
                     (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v126, vcvtq_f32_u32(vmovl_high_u16(v127))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v128))), (int8x16_t)vceqzq_f32(v126))), v113)));
      *(int8x8_t *)v131.i8 = vqmovun_s16(v133);
      *(int8x8_t *)a14.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v119.i8), *(int8x8_t *)a14.i8, vbsl_s8(vceqz_s8(*(int8x8_t *)v121.i8), v120, (int8x8_t)vmin_u8(*(uint8x8_t *)v131.i8, (uint8x8_t)vqtbl1_s8(vqmovun_high_s16(*(int8x8_t *)v131.i8, v133), (int8x8_t)0x404040400000000))));
      *(int8x8_t *)a14.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a14, a9));
      *v22 = a14.i32[0];
      v134 = &v20[a6];
      v23 += a6;
      if ((unint64_t)v134 >= v21)
        v135 = -(uint64_t)a5;
      else
        v135 = 0;
      v20 = &v134[v135];
      v22 += a6;
      --v108;
    }
    while (v108);
  }
  *result = v20;
  *a3 = v21;
  *a2 = v22;
  *a4 = v23;
  return result;
}

_DWORD **vec::template_mark_pixelmask_row<(CGCompositeOperation)20,_argb8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, uint8x8_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  int8x16_t v16;
  uint8x16_t v17;
  unint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  _DWORD *v21;
  char *v22;
  unsigned int v23;
  int8x16_t v24;
  unsigned int v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t v28;
  uint16x8_t v29;
  int8x16_t v30;
  __int32 v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int64_t v36;
  int64_t v37;
  int8x16_t *v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  uint64_t v42;
  int64_t v43;
  unint64_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  uint8x16_t v49;
  uint8x16_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  int8x8_t v53;
  int16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  uint8x16_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint8x16_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  uint16x8_t v65;
  uint16x8_t v66;
  uint8x16_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  uint16x8_t v73;
  uint8x16_t v74;
  uint64_t v75;
  int8x16_t v76;
  uint8x16_t v77;
  int8x16_t v78;
  uint16x8_t v79;
  uint16x8_t v80;
  uint16x8_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  uint8x16_t v85;
  uint8x16_t v86;
  uint16x8_t v87;
  uint16x8_t v88;
  int8x8_t v89;
  int16x8_t v90;
  uint16x8_t v91;
  uint16x8_t v92;
  uint8x16_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  uint16x8_t v96;
  uint16x8_t v97;
  uint8x16_t v98;
  uint16x8_t v99;
  uint16x8_t v100;
  uint16x8_t v101;
  uint16x8_t v102;
  uint8x16_t v103;
  uint16x8_t v104;
  uint16x8_t v105;
  uint16x8_t v106;
  uint16x8_t v107;
  uint16x8_t v108;
  uint16x8_t v109;
  uint8x16_t v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  int8x8_t v114;
  uint16x8_t v115;
  uint16x8_t v116;
  unsigned int v117;
  int8x16_t v118;
  unsigned int v119;
  unsigned int v120;
  uint16x8_t v121;
  uint16x8_t v122;
  int8x8_t v123;
  int8x16_t v124;
  uint8x8_t v125;
  uint8x8_t v126;
  uint16x8_t v127;
  uint16x8_t v128;
  uint16x8_t v129;
  uint16x8_t v130;
  uint16x8_t v131;
  uint8x8_t v132;
  _DWORD *v133;
  uint64_t v134;
  int8x16x2_t v135;
  int8x16x2_t v136;

  v18 = a15;
  v19 = *result;
  v20 = *a3;
  v21 = *a2;
  v22 = *a4;
  if (a15 < 4)
    goto LABEL_40;
  if (a7)
    v23 = 0;
  else
    v23 = -1;
  v24.i64[0] = 0xFF000000FFLL;
  v24.i64[1] = 0xFF000000FFLL;
  a9 = vandq_s8(vdupq_n_s8(v23), v24);
  if (a8)
    v25 = 0;
  else
    v25 = -1;
  v26 = vandq_s8(vdupq_n_s8(v25), v24);
  v27 = 4 * a6;
  v28 = 16 * a6;
  v29 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a13.i32[1] = 67372036;
  v30.i64[0] = -1;
  v30.i64[1] = -1;
  while (1)
  {
    v31 = *(_DWORD *)v22;
    if (*(_DWORD *)v22 == -1)
    {
      v38 = (int8x16_t *)&v22[v18];
      v39 = (int8x16_t *)v22;
      do
        v40 = v39++;
      while (v39 <= v38 && (vminvq_u8((uint8x16_t)vceqq_s8(*v40, v30)) & 0x80) != 0);
      do
      {
        v41 = v40;
        v40 = (int8x16_t *)((char *)v40 + 4);
      }
      while (v40 <= v38 && v41->i32[0] == -1);
      if (v41 < v38)
      {
        while (v41->u8[0] == 255)
        {
          v41 = (int8x16_t *)((char *)v41 + 1);
          if (v41 >= v38)
          {
            v41 = (int8x16_t *)&v22[v18];
            break;
          }
        }
      }
      v42 = 0;
      v43 = (char *)v41 - v22;
      v44 = (char *)v41 - v22;
      do
      {
        v45 = vorrq_s8(*(int8x16_t *)((char *)v19 + v42), a9);
        v46 = vorrq_s8(*(int8x16_t *)((char *)v21 + v42), v26);
        v47 = vqtbl1q_s8(v45, (int8x16_t)xmmword_185005170);
        v48 = vqtbl1q_s8(v46, (int8x16_t)xmmword_185005170);
        v49 = vminq_u8((uint8x16_t)v45, (uint8x16_t)v47);
        v50 = vminq_u8((uint8x16_t)v46, (uint8x16_t)v48);
        v51 = vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v50.i8);
        v52 = vmull_high_u8(v50, v50);
        v53 = (int8x8_t)vextq_s8(v48, v48, 8uLL).u64[0];
        *(int8x8_t *)v51.i8 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v51.i8)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v48.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_high_u16(v51)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v48.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))));
        v54 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v52.i8)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v53, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_high_u16(v52)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v53, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))))));
        v55 = vmull_u8(*(uint8x8_t *)v51.i8, *(uint8x8_t *)v47.i8);
        v56 = vmull_u8((uint8x8_t)vqmovun_s16(v54), (uint8x8_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL));
        v57 = vqsubq_u8(v50, (uint8x16_t)vqmovun_high_s16(*(int8x8_t *)v51.i8, v54));
        v58 = vmull_u8(*(uint8x8_t *)v57.i8, *(uint8x8_t *)v49.i8);
        v59 = vmull_high_u8(v57, v49);
        v60 = vqaddq_u16(v55, vqaddq_u16(v58, v58));
        v61 = vqaddq_u16(v56, vqaddq_u16(v59, v59));
        v62 = (uint8x16_t)vmvnq_s8(v47);
        v63 = vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v62.i8);
        v64 = vmull_high_u8(v50, v62);
        v65 = vqaddq_u16(v60, v63);
        v66 = vqaddq_u16(v61, v64);
        v67 = (uint8x16_t)vmvnq_s8(v48);
        v68 = vmull_u8(*(uint8x8_t *)v49.i8, *(uint8x8_t *)v67.i8);
        v69 = vmull_high_u8(v49, v67);
        v135.val[1] = (int8x16_t)vqaddq_u16(v65, v68);
        v70 = vqaddq_u16(v66, v69);
        v71 = vminq_u16((uint16x8_t)v135.val[1], v29);
        v72 = vminq_u16(v70, v29);
        v135.val[0] = (int8x16_t)vrsraq_n_u16(v71, v71, 8uLL);
        v73 = vrsraq_n_u16(v72, v72, 8uLL);
        *(uint8x8_t *)v135.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v135.val[0], 8uLL);
        *(uint8x8_t *)v135.val[1].i8 = vqrshrn_n_u16(v73, 8uLL);
        v74 = (uint8x16_t)vqtbl2q_s8(v135, (int8x16_t)xmmword_185005180);
        v17 = vqrshrn_high_n_u16(*(uint8x8_t *)v135.val[0].i8, v73, 8uLL);
        v16 = (int8x16_t)vminq_u8(v17, v74);
        v15 = vceqzq_s8(v47);
        *(int8x16_t *)((char *)v21 + v42) = vbslq_s8(v15, v46, vbslq_s8(vceqzq_s8(v48), v45, v16));
        v22 += v27;
        v44 -= 4;
        v42 += v28;
      }
      while (v44 > 3);
      v21 = (_DWORD *)((char *)v21 + v42);
      v19 = (_DWORD *)((char *)v19 + v42);
      v18 = v18 - v43 + v44;
      goto LABEL_37;
    }
    if (v31)
      break;
    v32 = (int8x16_t *)&v22[v18];
    v33 = (int8x16_t *)v22;
    do
      v34 = v33++;
    while (v33 <= v32 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v34)) & 0x80) != 0);
    do
    {
      v35 = v34;
      v34 = (int8x16_t *)((char *)v34 + 4);
    }
    while (v34 <= v32 && !v35->i32[0]);
    if (v35 < v32)
    {
      while (!v35->i8[0])
      {
        v35 = (int8x16_t *)((char *)v35 + 1);
        if (v35 >= v32)
        {
          v35 = (int8x16_t *)&v22[v18];
          break;
        }
      }
    }
    v36 = (char *)v35 - v22;
    v37 = ((char *)v35 - v22) * a6;
    v19 += v37;
    v21 += v37;
    v22 += v37;
    v18 -= v36;
LABEL_37:
    if (v18 <= 3)
      goto LABEL_40;
  }
  v75 = 0;
  while (1)
  {
    v15.i32[0] = v31;
    v76 = vqtbl1q_s8(v15, (int8x16_t)xmmword_185004A30);
    v77 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v19 + v75), a9);
    v78 = vorrq_s8(vbicq_s8(v26, vceqzq_s8(v76)), *(int8x16_t *)((char *)v21 + v75));
    v79 = vminq_u16(vmull_u8(*(uint8x8_t *)v77.i8, *(uint8x8_t *)v76.i8), v29);
    v80 = vminq_u16(vmull_high_u8(v77, (uint8x16_t)v76), v29);
    v81 = vrsraq_n_u16(v80, v80, 8uLL);
    *(uint8x8_t *)v16.i8 = vqrshrn_n_u16(vrsraq_n_u16(v79, v79, 8uLL), 8uLL);
    *(uint8x8_t *)v17.i8 = vqrshrn_n_u16(v81, 8uLL);
    v82 = vqtbl2q_s8(*(int8x16x2_t *)v16.i8, (int8x16_t)xmmword_185005180);
    v83 = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v16.i8, v81, 8uLL);
    v84 = vqtbl1q_s8(v78, (int8x16_t)xmmword_185005170);
    v85 = vminq_u8((uint8x16_t)v83, (uint8x16_t)v82);
    v86 = vminq_u8((uint8x16_t)v78, (uint8x16_t)v84);
    v87 = vmull_u8(*(uint8x8_t *)v86.i8, *(uint8x8_t *)v86.i8);
    v88 = vmull_high_u8(v86, v86);
    v89 = (int8x8_t)vextq_s8(v84, v84, 8uLL).u64[0];
    *(int8x8_t *)v87.i8 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v87.i8)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v84.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_high_u16(v87)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v84.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))));
    v90 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v88.i8)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v89, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_high_u16(v88)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v89, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))))));
    v91 = vmull_u8(*(uint8x8_t *)v87.i8, *(uint8x8_t *)v82.i8);
    v92 = vmull_u8((uint8x8_t)vqmovun_s16(v90), (uint8x8_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL));
    v93 = vqsubq_u8(v86, (uint8x16_t)vqmovun_high_s16(*(int8x8_t *)v87.i8, v90));
    v94 = vmull_u8(*(uint8x8_t *)v93.i8, *(uint8x8_t *)v85.i8);
    v95 = vmull_high_u8(v93, v85);
    v96 = vqaddq_u16(v91, vqaddq_u16(v94, v94));
    v97 = vqaddq_u16(v92, vqaddq_u16(v95, v95));
    v98 = (uint8x16_t)vmvnq_s8(v82);
    v99 = vmull_u8(*(uint8x8_t *)v86.i8, *(uint8x8_t *)v98.i8);
    v100 = vmull_high_u8(v86, v98);
    v101 = vqaddq_u16(v96, v99);
    v102 = vqaddq_u16(v97, v100);
    v103 = (uint8x16_t)vmvnq_s8(v84);
    v104 = vmull_u8(*(uint8x8_t *)v85.i8, *(uint8x8_t *)v103.i8);
    v105 = vmull_high_u8(v85, v103);
    v136.val[1] = (int8x16_t)vqaddq_u16(v101, v104);
    v106 = vqaddq_u16(v102, v105);
    v107 = vminq_u16((uint16x8_t)v136.val[1], v29);
    v108 = vminq_u16(v106, v29);
    v136.val[0] = (int8x16_t)vrsraq_n_u16(v107, v107, 8uLL);
    v109 = vrsraq_n_u16(v108, v108, 8uLL);
    *(uint8x8_t *)v136.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v136.val[0], 8uLL);
    *(uint8x8_t *)v136.val[1].i8 = vqrshrn_n_u16(v109, 8uLL);
    v110 = (uint8x16_t)vqtbl2q_s8(v136, (int8x16_t)xmmword_185005180);
    v17 = vqrshrn_high_n_u16(*(uint8x8_t *)v136.val[0].i8, v109, 8uLL);
    v16 = (int8x16_t)vminq_u8(v17, v110);
    v15 = vbslq_s8(vceqzq_s8(v84), v83, v16);
    *(int8x16_t *)((char *)v21 + v75) = vbslq_s8(vceqzq_s8(v82), v78, v15);
    v22 += v27;
    v18 -= 4;
    if (v18 < 4)
      break;
    v31 = *(_DWORD *)v22;
    v75 += v28;
    if ((*(_DWORD *)v22 - 1) >= 0xFFFFFFFE)
    {
      v19 = (_DWORD *)((char *)v19 + v75);
      v21 = (_DWORD *)((char *)v21 + v75);
      goto LABEL_37;
    }
  }
  v19 = (_DWORD *)((char *)v19 + v28 + v75);
  v21 = (_DWORD *)((char *)v21 + v28 + v75);
LABEL_40:
  v111 = v18 + a14;
  if (v111)
  {
    if (a7)
      v112 = 0;
    else
      v112 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v112), (int8x8_t)0xFF000000FFLL);
    if (a8)
      v113 = 0;
    else
      v113 = -1;
    v114 = vand_s8(vdup_n_s8(v113), (int8x8_t)0xFF000000FFLL);
    v115 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v19;
      v116 = vmovl_u8(a13);
      LOBYTE(v117) = v116.i8[0];
      BYTE1(v117) = v116.i8[2];
      BYTE2(v117) = v116.i8[4];
      HIBYTE(v117) = v116.i8[6];
      v116.i32[0] = *v21;
      v118 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v116.i8);
      LOBYTE(v119) = v118.i8[0];
      BYTE1(v119) = v118.i8[2];
      BYTE2(v119) = v118.i8[4];
      HIBYTE(v119) = v118.i8[6];
      LOBYTE(v120) = *v22;
      BYTE1(v120) = *v22;
      BYTE2(v120) = *v22;
      HIBYTE(v120) = *v22;
      *(int8x8_t *)v118.i8 = vorr_s8(vbic_s8(v114, vceqz_s8((int8x8_t)v120)), (int8x8_t)v119);
      v121 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v117, *(int8x8_t *)a9.i8), (uint8x8_t)v120), v115);
      v122 = vrsraq_n_u16(v121, v121, 8uLL);
      v123 = (int8x8_t)vqrshrn_n_u16(v122, 8uLL);
      *(int8x8_t *)v122.i8 = vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v123, v122, 8uLL), (int8x8_t)0x404040400000000);
      v124.i64[0] = v118.i64[0];
      v124.i64[1] = v118.i64[0];
      *(int8x8_t *)v124.i8 = vqtbl1_s8(v124, (int8x8_t)0x404040400000000);
      v125 = vmin_u8((uint8x8_t)v123, *(uint8x8_t *)v122.i8);
      v126 = vmin_u8(*(uint8x8_t *)v118.i8, *(uint8x8_t *)v124.i8);
      v127 = vmull_u8(v126, v126);
      *(int8x8_t *)v127.i8 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v127.i8)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v118.u8[0]) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_high_u16(v127)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v118.u8[4]) & 0xFF00FF00FF00FFLL)))))));
      v128 = vmull_u8(*(uint8x8_t *)v127.i8, *(uint8x8_t *)v122.i8);
      v129 = vmull_u8(vqsub_u8(v126, *(uint8x8_t *)v127.i8), v125);
      v130 = vminq_u16(vqaddq_u16(vqaddq_u16(vqaddq_u16(v128, vqaddq_u16(v129, v129)), vmull_u8(v126, (uint8x8_t)vmvn_s8(*(int8x8_t *)v122.i8))), vmull_u8(v125, (uint8x8_t)vmvn_s8(*(int8x8_t *)v124.i8))), v115);
      v131 = vrsraq_n_u16(v130, v130, 8uLL);
      v132 = vqrshrn_n_u16(v131, 8uLL);
      *(int8x8_t *)v118.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v122.i8), *(int8x8_t *)v118.i8, vbsl_s8(vceqz_s8(*(int8x8_t *)v124.i8), v123, (int8x8_t)vmin_u8(v132, (uint8x8_t)vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16(v132, v131, 8uLL), (int8x8_t)0x404040400000000))));
      a13 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v118, a9));
      *v21 = a13.i32[0];
      v133 = &v19[a6];
      v22 += a6;
      if ((unint64_t)v133 >= v20)
        v134 = -(uint64_t)a5;
      else
        v134 = 0;
      v19 = &v133[v134];
      v21 += a6;
      --v111;
    }
    while (v111);
  }
  *result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

_DWORD **vec::template_mark_pixelmask_row<(CGCompositeOperation)21,_argb8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, double a13, uint8x8_t a14, uint64_t a15, unint64_t a16)
{
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  unint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  _DWORD *v22;
  char *v23;
  unsigned int v24;
  int8x16_t v25;
  unsigned int v26;
  int8x16_t v27;
  uint64_t v28;
  uint64_t v29;
  uint16x8_t v30;
  int8x16_t v31;
  __int32 v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int64_t v37;
  int64_t v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int8x16_t *v42;
  uint64_t v43;
  int64_t v44;
  unint64_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  uint8x16_t v50;
  uint8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint8x16_t v56;
  uint8x16_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint8x16_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  uint8x16_t v65;
  uint16x8_t v66;
  uint16x8_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  uint64_t v72;
  int8x16_t v73;
  uint8x16_t v74;
  int8x16_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  uint16x8_t v78;
  int8x16_t v79;
  int8x16_t v80;
  uint8x16_t v81;
  uint8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  uint16x8_t v85;
  uint16x8_t v86;
  uint8x16_t v87;
  uint8x16_t v88;
  uint16x8_t v89;
  uint16x8_t v90;
  uint16x8_t v91;
  uint16x8_t v92;
  uint8x16_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  uint8x16_t v96;
  uint16x8_t v97;
  uint16x8_t v98;
  uint16x8_t v99;
  uint16x8_t v100;
  uint16x8_t v101;
  uint16x8_t v102;
  uint64_t v103;
  unsigned int v104;
  int8x8_t v105;
  unsigned int v106;
  int8x8_t v107;
  uint16x8_t v108;
  uint16x8_t v109;
  unsigned int v110;
  uint16x8_t v111;
  unsigned int v112;
  int8x8_t v113;
  uint16x8_t v114;
  int8x16_t v115;
  int8x8_t v116;
  int8x16_t v117;
  uint8x8_t v118;
  uint8x8_t v119;
  uint16x8_t v120;
  uint16x8_t v121;
  uint16x8_t v122;
  uint16x8_t v123;
  uint8x8_t v124;
  _DWORD *v125;
  uint64_t v126;
  int8x16x2_t v127;
  int8x16x2_t v128;

  v19 = a16;
  v20 = *result;
  v21 = *a3;
  v22 = *a2;
  v23 = *a4;
  if (a16 < 4)
    goto LABEL_40;
  if (a7)
    v24 = 0;
  else
    v24 = -1;
  v25.i64[0] = 0xFF000000FFLL;
  v25.i64[1] = 0xFF000000FFLL;
  a9 = vandq_s8(vdupq_n_s8(v24), v25);
  if (a8)
    v26 = 0;
  else
    v26 = -1;
  v27 = vandq_s8(vdupq_n_s8(v26), v25);
  v28 = 4 * a6;
  v29 = 16 * a6;
  v30 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a14.i32[1] = 67372036;
  v31.i64[0] = -1;
  v31.i64[1] = -1;
  while (1)
  {
    v32 = *(_DWORD *)v23;
    if (*(_DWORD *)v23 == -1)
    {
      v39 = (int8x16_t *)&v23[v19];
      v40 = (int8x16_t *)v23;
      do
        v41 = v40++;
      while (v40 <= v39 && (vminvq_u8((uint8x16_t)vceqq_s8(*v41, v31)) & 0x80) != 0);
      do
      {
        v42 = v41;
        v41 = (int8x16_t *)((char *)v41 + 4);
      }
      while (v41 <= v39 && v42->i32[0] == -1);
      if (v42 < v39)
      {
        while (v42->u8[0] == 255)
        {
          v42 = (int8x16_t *)((char *)v42 + 1);
          if (v42 >= v39)
          {
            v42 = (int8x16_t *)&v23[v19];
            break;
          }
        }
      }
      v43 = 0;
      v44 = (char *)v42 - v23;
      v45 = (char *)v42 - v23;
      do
      {
        v46 = vorrq_s8(*(int8x16_t *)((char *)v20 + v43), a9);
        v47 = vorrq_s8(*(int8x16_t *)((char *)v22 + v43), v27);
        v48 = vqtbl1q_s8(v46, (int8x16_t)xmmword_185005170);
        v49 = vqtbl1q_s8(v47, (int8x16_t)xmmword_185005170);
        v50 = vminq_u8((uint8x16_t)v46, (uint8x16_t)v48);
        v51 = vminq_u8((uint8x16_t)v47, (uint8x16_t)v49);
        v52 = (int8x16_t)vcgeq_u8(vrhaddq_u8((uint8x16_t)v48, (uint8x16_t)0), v50);
        v53 = vzip1q_s8(v52, v52);
        v54 = vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v51.i8);
        v55 = vmull_high_u8(v50, v51);
        v56 = vqsubq_u8((uint8x16_t)v49, v51);
        v57 = vqsubq_u8((uint8x16_t)v48, v50);
        v58 = vmull_u8(*(uint8x8_t *)v56.i8, *(uint8x8_t *)v57.i8);
        v59 = vmull_high_u8(v56, v57);
        v60 = (uint16x8_t)vbslq_s8(vzip2q_s8(v52, v52), (int8x16_t)vqaddq_u16(v55, v55), (int8x16_t)vqsubq_u16(vmull_high_u8((uint8x16_t)v49, (uint8x16_t)v48), vqaddq_u16(v59, v59)));
        v61 = (uint16x8_t)vbslq_s8(v53, (int8x16_t)vqaddq_u16(v54, v54), (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)v49.i8, *(uint8x8_t *)v48.i8), vqaddq_u16(v58, v58)));
        v62 = (uint8x16_t)vmvnq_s8(v48);
        v63 = vmull_u8(*(uint8x8_t *)v51.i8, *(uint8x8_t *)v62.i8);
        v64 = vqaddq_u16(v60, vmull_high_u8(v51, v62));
        v65 = (uint8x16_t)vmvnq_s8(v49);
        v66 = vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v65.i8);
        v67 = vmull_high_u8(v50, v65);
        v127.val[1] = (int8x16_t)vqaddq_u16(vqaddq_u16(v61, v63), v66);
        v68 = vqaddq_u16(v64, v67);
        v69 = vminq_u16((uint16x8_t)v127.val[1], v30);
        v70 = vminq_u16(v68, v30);
        v127.val[0] = (int8x16_t)vrsraq_n_u16(v69, v69, 8uLL);
        v71 = vrsraq_n_u16(v70, v70, 8uLL);
        *(uint8x8_t *)v127.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v127.val[0], 8uLL);
        *(uint8x8_t *)v127.val[1].i8 = vqrshrn_n_u16(v71, 8uLL);
        v18 = (int8x16_t)vminq_u8(vqrshrn_high_n_u16(*(uint8x8_t *)v127.val[0].i8, v71, 8uLL), (uint8x16_t)vqtbl2q_s8(v127, (int8x16_t)xmmword_185005180));
        v17 = vceqzq_s8(v49);
        v16 = vceqzq_s8(v48);
        *(int8x16_t *)((char *)v22 + v43) = vbslq_s8(v16, v47, vbslq_s8(v17, v46, v18));
        v23 += v28;
        v45 -= 4;
        v43 += v29;
      }
      while (v45 > 3);
      v22 = (_DWORD *)((char *)v22 + v43);
      v20 = (_DWORD *)((char *)v20 + v43);
      v19 = v19 - v44 + v45;
      goto LABEL_37;
    }
    if (v32)
      break;
    v33 = (int8x16_t *)&v23[v19];
    v34 = (int8x16_t *)v23;
    do
      v35 = v34++;
    while (v34 <= v33 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v35)) & 0x80) != 0);
    do
    {
      v36 = v35;
      v35 = (int8x16_t *)((char *)v35 + 4);
    }
    while (v35 <= v33 && !v36->i32[0]);
    if (v36 < v33)
    {
      while (!v36->i8[0])
      {
        v36 = (int8x16_t *)((char *)v36 + 1);
        if (v36 >= v33)
        {
          v36 = (int8x16_t *)&v23[v19];
          break;
        }
      }
    }
    v37 = (char *)v36 - v23;
    v38 = ((char *)v36 - v23) * a6;
    v20 += v38;
    v22 += v38;
    v23 += v38;
    v19 -= v37;
LABEL_37:
    if (v19 <= 3)
      goto LABEL_40;
  }
  v72 = 0;
  while (1)
  {
    v16.i32[0] = v32;
    v73 = vqtbl1q_s8(v16, (int8x16_t)xmmword_185004A30);
    v74 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v20 + v72), a9);
    v75 = vorrq_s8(vbicq_s8(v27, vceqzq_s8(v73)), *(int8x16_t *)((char *)v22 + v72));
    v76 = vminq_u16(vmull_u8(*(uint8x8_t *)v74.i8, *(uint8x8_t *)v73.i8), v30);
    v77 = vminq_u16(vmull_high_u8(v74, (uint8x16_t)v73), v30);
    v78 = vrsraq_n_u16(v77, v77, 8uLL);
    *(uint8x8_t *)v74.i8 = vqrshrn_n_u16(vrsraq_n_u16(v76, v76, 8uLL), 8uLL);
    *(uint8x8_t *)v18.i8 = vqrshrn_n_u16(v78, 8uLL);
    v79 = vqtbl2q_s8(*(int8x16x2_t *)(&v18 - 1), (int8x16_t)xmmword_185005180);
    v17 = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v74.i8, v78, 8uLL);
    v80 = vqtbl1q_s8(v75, (int8x16_t)xmmword_185005170);
    v81 = vminq_u8((uint8x16_t)v17, (uint8x16_t)v79);
    v82 = vminq_u8((uint8x16_t)v75, (uint8x16_t)v80);
    v83 = (int8x16_t)vcgeq_u8(vrhaddq_u8((uint8x16_t)v79, (uint8x16_t)0), v81);
    v84 = vzip1q_s8(v83, v83);
    v85 = vmull_u8(*(uint8x8_t *)v81.i8, *(uint8x8_t *)v82.i8);
    v86 = vmull_high_u8(v81, v82);
    v87 = vqsubq_u8((uint8x16_t)v80, v82);
    v88 = vqsubq_u8((uint8x16_t)v79, v81);
    v89 = vmull_u8(*(uint8x8_t *)v87.i8, *(uint8x8_t *)v88.i8);
    v90 = vmull_high_u8(v87, v88);
    v91 = (uint16x8_t)vbslq_s8(vzip2q_s8(v83, v83), (int8x16_t)vqaddq_u16(v86, v86), (int8x16_t)vqsubq_u16(vmull_high_u8((uint8x16_t)v80, (uint8x16_t)v79), vqaddq_u16(v90, v90)));
    v92 = (uint16x8_t)vbslq_s8(v84, (int8x16_t)vqaddq_u16(v85, v85), (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)v80.i8, *(uint8x8_t *)v79.i8), vqaddq_u16(v89, v89)));
    v93 = (uint8x16_t)vmvnq_s8(v79);
    v94 = vmull_u8(*(uint8x8_t *)v82.i8, *(uint8x8_t *)v93.i8);
    v95 = vqaddq_u16(v91, vmull_high_u8(v82, v93));
    v96 = (uint8x16_t)vmvnq_s8(v80);
    v97 = vmull_u8(*(uint8x8_t *)v81.i8, *(uint8x8_t *)v96.i8);
    v98 = vmull_high_u8(v81, v96);
    v128.val[1] = (int8x16_t)vqaddq_u16(vqaddq_u16(v92, v94), v97);
    v99 = vqaddq_u16(v95, v98);
    v100 = vminq_u16((uint16x8_t)v128.val[1], v30);
    v101 = vminq_u16(v99, v30);
    v128.val[0] = (int8x16_t)vrsraq_n_u16(v100, v100, 8uLL);
    v102 = vrsraq_n_u16(v101, v101, 8uLL);
    *(uint8x8_t *)v128.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v128.val[0], 8uLL);
    *(uint8x8_t *)v128.val[1].i8 = vqrshrn_n_u16(v102, 8uLL);
    v18 = (int8x16_t)vminq_u8(vqrshrn_high_n_u16(*(uint8x8_t *)v128.val[0].i8, v102, 8uLL), (uint8x16_t)vqtbl2q_s8(v128, (int8x16_t)xmmword_185005180));
    v16 = vbslq_s8(vceqzq_s8(v80), v17, v18);
    *(int8x16_t *)((char *)v22 + v72) = vbslq_s8(vceqzq_s8(v79), v75, v16);
    v23 += v28;
    v19 -= 4;
    if (v19 < 4)
      break;
    v32 = *(_DWORD *)v23;
    v72 += v29;
    if ((*(_DWORD *)v23 - 1) >= 0xFFFFFFFE)
    {
      v20 = (_DWORD *)((char *)v20 + v72);
      v22 = (_DWORD *)((char *)v22 + v72);
      goto LABEL_37;
    }
  }
  v20 = (_DWORD *)((char *)v20 + v29 + v72);
  v22 = (_DWORD *)((char *)v22 + v29 + v72);
LABEL_40:
  v103 = v19 + a15;
  if (v103)
  {
    if (a7)
      v104 = 0;
    else
      v104 = -1;
    v105 = vdup_n_s8(v104);
    if (a8)
      v106 = 0;
    else
      v106 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(v105, (int8x8_t)0xFF000000FFLL);
    v107 = vand_s8(vdup_n_s8(v106), (int8x8_t)0xFF000000FFLL);
    v108 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a14.i32[0] = *v20;
      v109 = vmovl_u8(a14);
      LOBYTE(v110) = v109.i8[0];
      BYTE1(v110) = v109.i8[2];
      BYTE2(v110) = v109.i8[4];
      HIBYTE(v110) = v109.i8[6];
      v109.i32[0] = *v22;
      v111 = vmovl_u8(*(uint8x8_t *)v109.i8);
      LOBYTE(v112) = v111.i8[0];
      BYTE1(v112) = v111.i8[2];
      BYTE2(v112) = v111.i8[4];
      HIBYTE(v112) = v111.i8[6];
      v111.i8[0] = *v23;
      v111.i8[1] = *v23;
      v111.i8[2] = *v23;
      v111.i8[3] = *v23;
      v113 = vorr_s8(vbic_s8(v107, vceqz_s8((int8x8_t)v111.u32[0])), (int8x8_t)v112);
      v114 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v110, *(int8x8_t *)a9.i8), (uint8x8_t)v111.u32[0]), v108);
      v115 = (int8x16_t)vrsraq_n_u16(v114, v114, 8uLL);
      v116 = (int8x8_t)vqrshrn_n_u16((uint16x8_t)v115, 8uLL);
      *(int8x8_t *)v115.i8 = vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v116, (uint16x8_t)v115, 8uLL), (int8x8_t)0x404040400000000);
      *(int8x8_t *)v117.i8 = v113;
      v117.u64[1] = (unint64_t)v113;
      *(int8x8_t *)v117.i8 = vqtbl1_s8(v117, (int8x8_t)0x404040400000000);
      v118 = vmin_u8((uint8x8_t)v116, *(uint8x8_t *)v115.i8);
      v119 = vmin_u8((uint8x8_t)v113, *(uint8x8_t *)v117.i8);
      *(uint8x8_t *)v17.i8 = vcge_u8(vrhadd_u8(*(uint8x8_t *)v115.i8, 0), v118);
      v120 = vmull_u8(v118, v119);
      v121 = vmull_u8(vqsub_u8(*(uint8x8_t *)v117.i8, v119), vqsub_u8(*(uint8x8_t *)v115.i8, v118));
      v122 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vbslq_s8(vzip1q_s8(v17, v17), (int8x16_t)vqaddq_u16(v120, v120), (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)v117.i8, *(uint8x8_t *)v115.i8), vqaddq_u16(v121, v121))), vmull_u8(v119, (uint8x8_t)vmvn_s8(*(int8x8_t *)v115.i8))), vmull_u8(v118, (uint8x8_t)vmvn_s8(*(int8x8_t *)v117.i8))), v108);
      v123 = vrsraq_n_u16(v122, v122, 8uLL);
      v124 = vqrshrn_n_u16(v123, 8uLL);
      v17 = (int8x16_t)vqrshrn_high_n_u16(v124, v123, 8uLL);
      *(int8x8_t *)v115.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v115.i8), v113, vbsl_s8(vceqz_s8(*(int8x8_t *)v117.i8), v116, (int8x8_t)vmin_u8(v124, (uint8x8_t)vqtbl1_s8(v17, (int8x8_t)0x404040400000000))));
      a14 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v115, a9));
      *v22 = a14.i32[0];
      v125 = &v20[a6];
      v23 += a6;
      if ((unint64_t)v125 >= v21)
        v126 = -(uint64_t)a5;
      else
        v126 = 0;
      v20 = &v125[v126];
      v22 += a6;
      --v103;
    }
    while (v103);
  }
  *result = v20;
  *a3 = v21;
  *a2 = v22;
  *a4 = v23;
  return result;
}

_DWORD **vec::template_mark_pixelmask_row<(CGCompositeOperation)22,_argb8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, double a13, uint8x8_t a14, uint64_t a15, unint64_t a16)
{
  int8x16_t v16;
  int8x16_t v17;
  unint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  _DWORD *v21;
  char *v22;
  unsigned int v23;
  int8x16_t v24;
  unsigned int v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t v28;
  uint16x8_t v29;
  int8x16_t v30;
  int8x16_t v31;
  __int32 v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int64_t v37;
  int64_t v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int8x16_t *v42;
  uint64_t v43;
  int64_t v44;
  unint64_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  uint8x16_t v50;
  uint8x16_t v51;
  uint8x16_t v52;
  uint8x16_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint64_t v58;
  int8x16_t v59;
  uint8x16_t v60;
  int8x16_t v61;
  uint16x8_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  uint8x16_t v68;
  uint8x16_t v69;
  uint8x16_t v70;
  uint8x16_t v71;
  uint16x8_t v72;
  uint16x8_t v73;
  uint16x8_t v74;
  uint16x8_t v75;
  uint64_t v76;
  unsigned int v77;
  int8x8_t v78;
  unsigned int v79;
  int8x8_t v80;
  uint16x8_t v81;
  int8x16_t v82;
  uint16x8_t v83;
  unsigned int v84;
  uint16x8_t v85;
  unsigned int v86;
  int8x8_t v87;
  uint16x8_t v88;
  int8x16_t v89;
  int8x8_t v90;
  int8x16_t v91;
  uint8x8_t v92;
  uint8x8_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  uint8x8_t v96;
  _DWORD *v97;
  uint64_t v98;
  int8x16x2_t v99;
  int8x16x2_t v100;

  v18 = a16;
  v19 = *result;
  v20 = *a3;
  v21 = *a2;
  v22 = *a4;
  if (a16 < 4)
    goto LABEL_40;
  if (a7)
    v23 = 0;
  else
    v23 = -1;
  v24.i64[0] = 0xFF000000FFLL;
  v24.i64[1] = 0xFF000000FFLL;
  a9 = vandq_s8(vdupq_n_s8(v23), v24);
  if (a8)
    v25 = 0;
  else
    v25 = -1;
  v26 = vandq_s8(vdupq_n_s8(v25), v24);
  v27 = 4 * a6;
  v28 = 16 * a6;
  v29 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  v30.i64[0] = -65536;
  v30.i64[1] = -65536;
  a14.i32[1] = 67372036;
  v31.i64[0] = -1;
  v31.i64[1] = -1;
  while (1)
  {
    v32 = *(_DWORD *)v22;
    if (*(_DWORD *)v22 == -1)
    {
      v39 = (int8x16_t *)&v22[v18];
      v40 = (int8x16_t *)v22;
      do
        v41 = v40++;
      while (v40 <= v39 && (vminvq_u8((uint8x16_t)vceqq_s8(*v41, v31)) & 0x80) != 0);
      do
      {
        v42 = v41;
        v41 = (int8x16_t *)((char *)v41 + 4);
      }
      while (v41 <= v39 && v42->i32[0] == -1);
      if (v42 < v39)
      {
        while (v42->u8[0] == 255)
        {
          v42 = (int8x16_t *)((char *)v42 + 1);
          if (v42 >= v39)
          {
            v42 = (int8x16_t *)&v22[v18];
            break;
          }
        }
      }
      v43 = 0;
      v44 = (char *)v42 - v22;
      v45 = (char *)v42 - v22;
      do
      {
        v46 = vorrq_s8(*(int8x16_t *)((char *)v19 + v43), a9);
        v47 = vorrq_s8(*(int8x16_t *)((char *)v21 + v43), v26);
        v48 = vqtbl1q_s8(v46, (int8x16_t)xmmword_185005170);
        v49 = vqtbl1q_s8(v47, (int8x16_t)xmmword_185005170);
        v50 = vminq_u8((uint8x16_t)v46, (uint8x16_t)v48);
        v51 = vminq_u8((uint8x16_t)v47, (uint8x16_t)v49);
        v52 = (uint8x16_t)vmvnq_s8(v48);
        v53 = (uint8x16_t)vmvnq_s8(v49);
        v99.val[1] = (int8x16_t)vqaddq_u16(vqaddq_u16(vabdq_u16(vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v49.i8), (uint16x8_t)vandq_s8((int8x16_t)vmull_u8(*(uint8x8_t *)v51.i8, *(uint8x8_t *)v48.i8), v30)), vmull_u8(*(uint8x8_t *)v51.i8, *(uint8x8_t *)v52.i8)), vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v53.i8));
        v54 = vqaddq_u16(vqaddq_u16(vabdq_u16(vmull_high_u8(v50, (uint8x16_t)v49), (uint16x8_t)vandq_s8((int8x16_t)vmull_high_u8(v51, (uint8x16_t)v48), v30)), vmull_high_u8(v51, v52)), vmull_high_u8(v50, v53));
        v55 = vminq_u16((uint16x8_t)v99.val[1], v29);
        v56 = vminq_u16(v54, v29);
        v99.val[0] = (int8x16_t)vrsraq_n_u16(v55, v55, 8uLL);
        v57 = vrsraq_n_u16(v56, v56, 8uLL);
        *(uint8x8_t *)v99.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v99.val[0], 8uLL);
        *(uint8x8_t *)v99.val[1].i8 = vqrshrn_n_u16(v57, 8uLL);
        v17 = (int8x16_t)vminq_u8(vqrshrn_high_n_u16(*(uint8x8_t *)v99.val[0].i8, v57, 8uLL), (uint8x16_t)vqtbl2q_s8(v99, (int8x16_t)xmmword_185005180));
        v16 = vceqzq_s8(v48);
        *(int8x16_t *)((char *)v21 + v43) = vbslq_s8(v16, v47, vbslq_s8(vceqzq_s8(v49), v46, v17));
        v22 += v27;
        v45 -= 4;
        v43 += v28;
      }
      while (v45 > 3);
      v21 = (_DWORD *)((char *)v21 + v43);
      v19 = (_DWORD *)((char *)v19 + v43);
      v18 = v18 - v44 + v45;
      goto LABEL_37;
    }
    if (v32)
      break;
    v33 = (int8x16_t *)&v22[v18];
    v34 = (int8x16_t *)v22;
    do
      v35 = v34++;
    while (v34 <= v33 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v35)) & 0x80) != 0);
    do
    {
      v36 = v35;
      v35 = (int8x16_t *)((char *)v35 + 4);
    }
    while (v35 <= v33 && !v36->i32[0]);
    if (v36 < v33)
    {
      while (!v36->i8[0])
      {
        v36 = (int8x16_t *)((char *)v36 + 1);
        if (v36 >= v33)
        {
          v36 = (int8x16_t *)&v22[v18];
          break;
        }
      }
    }
    v37 = (char *)v36 - v22;
    v38 = ((char *)v36 - v22) * a6;
    v19 += v38;
    v21 += v38;
    v22 += v38;
    v18 -= v37;
LABEL_37:
    if (v18 <= 3)
      goto LABEL_40;
  }
  v58 = 0;
  while (1)
  {
    v16.i32[0] = v32;
    v59 = vqtbl1q_s8(v16, (int8x16_t)xmmword_185004A30);
    v60 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v19 + v58), a9);
    v61 = vorrq_s8(vbicq_s8(v26, vceqzq_s8(v59)), *(int8x16_t *)((char *)v21 + v58));
    v62 = vminq_u16(vmull_u8(*(uint8x8_t *)v60.i8, *(uint8x8_t *)v59.i8), v29);
    v63 = vminq_u16(vmull_high_u8(v60, (uint8x16_t)v59), v29);
    v64 = vrsraq_n_u16(v63, v63, 8uLL);
    *(uint8x8_t *)v60.i8 = vqrshrn_n_u16(vrsraq_n_u16(v62, v62, 8uLL), 8uLL);
    *(uint8x8_t *)v17.i8 = vqrshrn_n_u16(v64, 8uLL);
    v65 = vqtbl2q_s8(*(int8x16x2_t *)(&v17 - 1), (int8x16_t)xmmword_185005180);
    v66 = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v60.i8, v64, 8uLL);
    v67 = vqtbl1q_s8(v61, (int8x16_t)xmmword_185005170);
    v68 = vminq_u8((uint8x16_t)v66, (uint8x16_t)v65);
    v69 = vminq_u8((uint8x16_t)v61, (uint8x16_t)v67);
    v70 = (uint8x16_t)vmvnq_s8(v65);
    v71 = (uint8x16_t)vmvnq_s8(v67);
    v100.val[1] = (int8x16_t)vqaddq_u16(vqaddq_u16(vabdq_u16(vmull_u8(*(uint8x8_t *)v68.i8, *(uint8x8_t *)v67.i8), (uint16x8_t)vandq_s8((int8x16_t)vmull_u8(*(uint8x8_t *)v69.i8, *(uint8x8_t *)v65.i8), v30)), vmull_u8(*(uint8x8_t *)v69.i8, *(uint8x8_t *)v70.i8)), vmull_u8(*(uint8x8_t *)v68.i8, *(uint8x8_t *)v71.i8));
    v72 = vqaddq_u16(vqaddq_u16(vabdq_u16(vmull_high_u8(v68, (uint8x16_t)v67), (uint16x8_t)vandq_s8((int8x16_t)vmull_high_u8(v69, (uint8x16_t)v65), v30)), vmull_high_u8(v69, v70)), vmull_high_u8(v68, v71));
    v73 = vminq_u16((uint16x8_t)v100.val[1], v29);
    v74 = vminq_u16(v72, v29);
    v100.val[0] = (int8x16_t)vrsraq_n_u16(v73, v73, 8uLL);
    v75 = vrsraq_n_u16(v74, v74, 8uLL);
    *(uint8x8_t *)v100.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v100.val[0], 8uLL);
    *(uint8x8_t *)v100.val[1].i8 = vqrshrn_n_u16(v75, 8uLL);
    v17 = (int8x16_t)vminq_u8(vqrshrn_high_n_u16(*(uint8x8_t *)v100.val[0].i8, v75, 8uLL), (uint8x16_t)vqtbl2q_s8(v100, (int8x16_t)xmmword_185005180));
    v16 = vbslq_s8(vceqzq_s8(v67), v66, v17);
    *(int8x16_t *)((char *)v21 + v58) = vbslq_s8(vceqzq_s8(v65), v61, v16);
    v22 += v27;
    v18 -= 4;
    if (v18 < 4)
      break;
    v32 = *(_DWORD *)v22;
    v58 += v28;
    if ((*(_DWORD *)v22 - 1) >= 0xFFFFFFFE)
    {
      v19 = (_DWORD *)((char *)v19 + v58);
      v21 = (_DWORD *)((char *)v21 + v58);
      goto LABEL_37;
    }
  }
  v19 = (_DWORD *)((char *)v19 + v28 + v58);
  v21 = (_DWORD *)((char *)v21 + v28 + v58);
LABEL_40:
  v76 = v18 + a15;
  if (v76)
  {
    if (a7)
      v77 = 0;
    else
      v77 = -1;
    v78 = vdup_n_s8(v77);
    if (a8)
      v79 = 0;
    else
      v79 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(v78, (int8x8_t)0xFF000000FFLL);
    v80 = vand_s8(vdup_n_s8(v79), (int8x8_t)0xFF000000FFLL);
    v81 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    v82.i64[0] = -65536;
    v82.i64[1] = -65536;
    do
    {
      a14.i32[0] = *v19;
      v83 = vmovl_u8(a14);
      LOBYTE(v84) = v83.i8[0];
      BYTE1(v84) = v83.i8[2];
      BYTE2(v84) = v83.i8[4];
      HIBYTE(v84) = v83.i8[6];
      v83.i32[0] = *v21;
      v85 = vmovl_u8(*(uint8x8_t *)v83.i8);
      LOBYTE(v86) = v85.i8[0];
      BYTE1(v86) = v85.i8[2];
      BYTE2(v86) = v85.i8[4];
      HIBYTE(v86) = v85.i8[6];
      v85.i8[0] = *v22;
      v85.i8[1] = *v22;
      v85.i8[2] = *v22;
      v85.i8[3] = *v22;
      v87 = vorr_s8(vbic_s8(v80, vceqz_s8((int8x8_t)v85.u32[0])), (int8x8_t)v86);
      v88 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v84, *(int8x8_t *)a9.i8), (uint8x8_t)v85.u32[0]), v81);
      v89 = (int8x16_t)vrsraq_n_u16(v88, v88, 8uLL);
      v90 = (int8x8_t)vqrshrn_n_u16((uint16x8_t)v89, 8uLL);
      *(int8x8_t *)v89.i8 = vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v90, (uint16x8_t)v89, 8uLL), (int8x8_t)0x404040400000000);
      *(int8x8_t *)v91.i8 = v87;
      v91.u64[1] = (unint64_t)v87;
      *(int8x8_t *)v91.i8 = vqtbl1_s8(v91, (int8x8_t)0x404040400000000);
      v92 = vmin_u8((uint8x8_t)v90, *(uint8x8_t *)v89.i8);
      v93 = vmin_u8((uint8x8_t)v87, *(uint8x8_t *)v91.i8);
      v94 = vminq_u16(vqaddq_u16(vqaddq_u16(vabdq_u16(vmull_u8(v92, *(uint8x8_t *)v91.i8), (uint16x8_t)vandq_s8((int8x16_t)vmull_u8(v93, *(uint8x8_t *)v89.i8), v82)), vmull_u8(v93, (uint8x8_t)vmvn_s8(*(int8x8_t *)v89.i8))), vmull_u8(v92, (uint8x8_t)vmvn_s8(*(int8x8_t *)v91.i8))), v81);
      v95 = vrsraq_n_u16(v94, v94, 8uLL);
      v96 = vqrshrn_n_u16(v95, 8uLL);
      *(int8x8_t *)v89.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v89.i8), v87, vbsl_s8(vceqz_s8(*(int8x8_t *)v91.i8), v90, (int8x8_t)vmin_u8(v96, (uint8x8_t)vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16(v96, v95, 8uLL), (int8x8_t)0x404040400000000))));
      a14 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v89, a9));
      *v21 = a14.i32[0];
      v97 = &v19[a6];
      v22 += a6;
      if ((unint64_t)v97 >= v20)
        v98 = -(uint64_t)a5;
      else
        v98 = 0;
      v19 = &v97[v98];
      v21 += a6;
      --v76;
    }
    while (v76);
  }
  *result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)23,_argb8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, int8x16_t a9, double a10, double a11, double a12, uint16x8_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  unsigned __int32 *v17;
  unint64_t v18;
  _DWORD *v19;
  char *v20;
  unsigned int v21;
  int8x16_t v22;
  unsigned int v23;
  int8x16_t v24;
  uint64_t v25;
  uint64_t v26;
  uint16x8_t v27;
  __int32 v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int64_t v33;
  int64_t v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  uint8x16_t v46;
  int8x16_t v47;
  uint8x16_t v48;
  int8x16_t v49;
  uint8x16_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint8x16_t v55;
  int8x16_t v56;
  uint64_t v57;
  int8x16_t v58;
  uint8x16_t v59;
  int8x16_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  uint8x16_t v68;
  int8x16_t v69;
  uint8x16_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  uint8x16_t v73;
  int8x16_t v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  int8x8_t v78;
  uint16x8_t v79;
  uint16x8_t v80;
  unsigned int v81;
  uint16x8_t v82;
  unsigned int v83;
  int8x8_t v84;
  uint16x8_t v85;
  int8x8_t v86;
  int8x16_t v87;
  int8x8_t v88;
  uint8x8_t v89;
  uint16x8_t v90;
  int8x16_t v91;
  unsigned __int32 *v92;
  uint64_t v93;
  int8x16x2_t v94;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a15 < 4)
    goto LABEL_40;
  if (a7)
    v21 = 0;
  else
    v21 = -1;
  v22.i64[0] = 0xFF000000FFLL;
  v22.i64[1] = 0xFF000000FFLL;
  a9 = vandq_s8(vdupq_n_s8(v21), v22);
  if (a8)
    v23 = 0;
  else
    v23 = -1;
  v24 = vandq_s8(vdupq_n_s8(v23), v22);
  v25 = 4 * a6;
  v26 = 16 * a6;
  v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a13.i64[0] = -1;
  a13.i64[1] = -1;
  while (1)
  {
    v28 = *(_DWORD *)v20;
    if (*(_DWORD *)v20 == -1)
    {
      v35 = (int8x16_t *)&v20[v16];
      v36 = (int8x16_t *)v20;
      do
        v37 = v36++;
      while (v36 <= v35 && (vminvq_u8((uint8x16_t)vceqq_s8(*v37, (int8x16_t)a13)) & 0x80) != 0);
      do
      {
        v38 = v37;
        v37 = (int8x16_t *)((char *)v37 + 4);
      }
      while (v37 <= v35 && v38->i32[0] == -1);
      if (v38 < v35)
      {
        while (v38->u8[0] == 255)
        {
          v38 = (int8x16_t *)((char *)v38 + 1);
          if (v38 >= v35)
          {
            v38 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      v39 = 0;
      v40 = (char *)v38 - v20;
      v41 = (char *)v38 - v20;
      do
      {
        v42 = vorrq_s8(*(int8x16_t *)((char *)v17 + v39), a9);
        v43 = vorrq_s8(*(int8x16_t *)((char *)v19 + v39), v24);
        v44 = vqtbl1q_s8(v42, (int8x16_t)xmmword_185005170);
        v45 = vqtbl1q_s8(v43, (int8x16_t)xmmword_185005170);
        v46 = vminq_u8((uint8x16_t)v42, (uint8x16_t)v44);
        v47 = (int8x16_t)vminq_u8((uint8x16_t)v43, (uint8x16_t)v45);
        v48 = (uint8x16_t)vmvnq_s8(v47);
        v49 = (int8x16_t)vcgtq_u8((uint8x16_t)(*(_OWORD *)&v47 & __PAIR128__(0xFFFFFF00FFFFFF00, 0xFFFFFF00FFFFFF00)), v48);
        v50 = vabdq_u8(v48, (uint8x16_t)(*(_OWORD *)&v47 & __PAIR128__(0xFFFFFF00FFFFFF00, 0xFFFFFF00FFFFFF00)));
        v51 = vmull_u8(*(uint8x8_t *)v46.i8, *(uint8x8_t *)v50.i8);
        v52 = vmull_high_u8(v46, v50);
        v53 = vminq_u16(v51, v27);
        v54 = vminq_u16(v52, v27);
        v55 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v53, v53, 8uLL), 8uLL), vrsraq_n_u16(v54, v54, 8uLL), 8uLL);
        v56 = vbslq_s8(v49, (int8x16_t)vqsubq_u8((uint8x16_t)v47, v55), (int8x16_t)vqaddq_u8((uint8x16_t)v47, v55));
        v15 = vceqzq_s8(v44);
        *(int8x16_t *)((char *)v19 + v39) = vbslq_s8(v15, v43, vbslq_s8(vceqzq_s8(v45), v42, (int8x16_t)vminq_u8((uint8x16_t)v56, (uint8x16_t)vqtbl1q_s8(v56, (int8x16_t)xmmword_185005170))));
        v20 += v25;
        v41 -= 4;
        v39 += v26;
      }
      while (v41 > 3);
      v19 = (_DWORD *)((char *)v19 + v39);
      v17 = (unsigned __int32 *)((char *)v17 + v39);
      v16 = v16 - v40 + v41;
      goto LABEL_37;
    }
    if (v28)
      break;
    v29 = (int8x16_t *)&v20[v16];
    v30 = (int8x16_t *)v20;
    do
      v31 = v30++;
    while (v30 <= v29 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v31)) & 0x80) != 0);
    do
    {
      v32 = v31;
      v31 = (int8x16_t *)((char *)v31 + 4);
    }
    while (v31 <= v29 && !v32->i32[0]);
    if (v32 < v29)
    {
      while (!v32->i8[0])
      {
        v32 = (int8x16_t *)((char *)v32 + 1);
        if (v32 >= v29)
        {
          v32 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    v33 = (char *)v32 - v20;
    v34 = ((char *)v32 - v20) * a6;
    v17 += v34;
    v19 += v34;
    v20 += v34;
    v16 -= v33;
LABEL_37:
    if (v16 <= 3)
      goto LABEL_40;
  }
  v57 = 0;
  while (1)
  {
    v15.i32[0] = v28;
    v58 = vqtbl1q_s8(v15, (int8x16_t)xmmword_185004A30);
    v59 = (uint8x16_t)vorrq_s8(*(int8x16_t *)((char *)v17 + v57), a9);
    v60 = vorrq_s8(vbicq_s8(v24, vceqzq_s8(v58)), *(int8x16_t *)((char *)v19 + v57));
    v94.val[1] = (int8x16_t)vmull_u8(*(uint8x8_t *)v59.i8, *(uint8x8_t *)v58.i8);
    v61 = vmull_high_u8(v59, (uint8x16_t)v58);
    v62 = vminq_u16((uint16x8_t)v94.val[1], v27);
    v63 = vminq_u16(v61, v27);
    v94.val[0] = (int8x16_t)vrsraq_n_u16(v62, v62, 8uLL);
    v64 = vrsraq_n_u16(v63, v63, 8uLL);
    *(uint8x8_t *)v94.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v94.val[0], 8uLL);
    *(uint8x8_t *)v94.val[1].i8 = vqrshrn_n_u16(v64, 8uLL);
    v65 = vqtbl2q_s8(v94, (int8x16_t)xmmword_185005180);
    v94.val[0] = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v94.val[0].i8, v64, 8uLL);
    v66 = vqtbl1q_s8(v60, (int8x16_t)xmmword_185005170);
    v94.val[1] = (int8x16_t)vminq_u8((uint8x16_t)v94.val[0], (uint8x16_t)v65);
    v67 = (int8x16_t)vminq_u8((uint8x16_t)v60, (uint8x16_t)v66);
    v68 = (uint8x16_t)vmvnq_s8(v67);
    v69 = (int8x16_t)vcgtq_u8((uint8x16_t)(*(_OWORD *)&v67 & __PAIR128__(0xFFFFFF00FFFFFF00, 0xFFFFFF00FFFFFF00)), v68);
    v70 = vabdq_u8(v68, (uint8x16_t)(*(_OWORD *)&v67 & __PAIR128__(0xFFFFFF00FFFFFF00, 0xFFFFFF00FFFFFF00)));
    v71 = vmull_u8(*(uint8x8_t *)v94.val[1].i8, *(uint8x8_t *)v70.i8);
    v94.val[1] = (int8x16_t)vmull_high_u8((uint8x16_t)v94.val[1], v70);
    v72 = vminq_u16(v71, v27);
    v94.val[1] = (int8x16_t)vminq_u16((uint16x8_t)v94.val[1], v27);
    v73 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v72, v72, 8uLL), 8uLL), vrsraq_n_u16((uint16x8_t)v94.val[1], (uint16x8_t)v94.val[1], 8uLL), 8uLL);
    v94.val[1] = vbslq_s8(v69, (int8x16_t)vqsubq_u8((uint8x16_t)v67, v73), (int8x16_t)vqaddq_u8((uint8x16_t)v67, v73));
    v74 = vbslq_s8(vceqzq_s8(v66), v94.val[0], (int8x16_t)vminq_u8((uint8x16_t)v94.val[1], (uint8x16_t)vqtbl1q_s8(v94.val[1], (int8x16_t)xmmword_185005170)));
    v15 = vceqzq_s8(v65);
    *(int8x16_t *)((char *)v19 + v57) = vbslq_s8(v15, v60, v74);
    v20 += v25;
    v16 -= 4;
    if (v16 < 4)
      break;
    v28 = *(_DWORD *)v20;
    v57 += v26;
    if ((*(_DWORD *)v20 - 1) >= 0xFFFFFFFE)
    {
      v17 = (unsigned __int32 *)((char *)v17 + v57);
      v19 = (_DWORD *)((char *)v19 + v57);
      goto LABEL_37;
    }
  }
  v17 = (unsigned __int32 *)((char *)v17 + v26 + v57);
  v19 = (_DWORD *)((char *)v19 + v26 + v57);
LABEL_40:
  v75 = v16 + a14;
  if (v75)
  {
    if (a7)
      v76 = 0;
    else
      v76 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v76), (int8x8_t)0xFF000000FFLL);
    if (a8)
      v77 = 0;
    else
      v77 = -1;
    v78 = vand_s8(vdup_n_s8(v77), (int8x8_t)0xFF000000FFLL);
    v79 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v17;
      v80 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v81) = v80.i8[0];
      BYTE1(v81) = v80.i8[2];
      BYTE2(v81) = v80.i8[4];
      HIBYTE(v81) = v80.i8[6];
      v80.i32[0] = *v19;
      v82 = vmovl_u8(*(uint8x8_t *)v80.i8);
      LOBYTE(v83) = v82.i8[0];
      BYTE1(v83) = v82.i8[2];
      BYTE2(v83) = v82.i8[4];
      HIBYTE(v83) = v82.i8[6];
      v82.i8[0] = *v20;
      v82.i8[1] = *v20;
      v82.i8[2] = *v20;
      v82.i8[3] = *v20;
      v84 = vorr_s8(vbic_s8(v78, vceqz_s8((int8x8_t)v82.u32[0])), (int8x8_t)v83);
      v85 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v81, *(int8x8_t *)a9.i8), (uint8x8_t)v82.u32[0]), v79);
      a13 = vrsraq_n_u16(v85, v85, 8uLL);
      v86 = (int8x8_t)vqrshrn_n_u16(a13, 8uLL);
      *(int8x8_t *)a13.i8 = vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v86, a13, 8uLL), (int8x8_t)0x404040400000000);
      *(int8x8_t *)v87.i8 = v84;
      v87.u64[1] = (unint64_t)v84;
      *(int8x8_t *)v87.i8 = vqtbl1_s8(v87, (int8x8_t)0x404040400000000);
      v88 = (int8x8_t)vmin_u8((uint8x8_t)v84, *(uint8x8_t *)v87.i8);
      v89 = (uint8x8_t)vmvn_s8(v88);
      v90 = vminq_u16(vmull_u8(vmin_u8((uint8x8_t)v86, *(uint8x8_t *)a13.i8), vabd_u8(v89, (uint8x8_t)(*(_QWORD *)&v88 & 0xFFFFFF00FFFFFF00))), v79);
      *(uint8x8_t *)v90.i8 = vqrshrn_n_u16(vrsraq_n_u16(v90, v90, 8uLL), 8uLL);
      *(int8x8_t *)v91.i8 = vbsl_s8((int8x8_t)vcgt_u8((uint8x8_t)(*(_QWORD *)&v88 & 0xFFFFFF00FFFFFF00), v89), (int8x8_t)vqsub_u8((uint8x8_t)v88, *(uint8x8_t *)v90.i8), (int8x8_t)vqadd_u8((uint8x8_t)v88, *(uint8x8_t *)v90.i8));
      v91.i64[1] = v91.i64[0];
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)a13.i8), v84, vbsl_s8(vceqz_s8(*(int8x8_t *)v87.i8), v86, (int8x8_t)vmin_u8(*(uint8x8_t *)v91.i8, (uint8x8_t)vqtbl1_s8(v91, (int8x8_t)0x404040400000000))));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a13, a9));
      *v19 = a13.i32[0];
      v92 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v92 >= v18)
        v93 = -(uint64_t)a5;
      else
        v93 = 0;
      v17 = &v92[v93];
      v19 += a6;
      --v75;
    }
    while (v75);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

uint64_t *vec::template_mark_pixelshape_row<(CGCompositeOperation)0,_argb8_t>(uint64_t *result, _DWORD **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t i;
  unint64_t v15;
  uint64_t v16;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 4)
  {
    v13 = 0;
    do
    {
      *(_OWORD *)&v12[v13] = 0uLL;
      v9 -= 4;
      v13 += 4 * a5;
    }
    while (v9 > 3);
    v12 = (_DWORD *)((char *)v12 + v13 * 4);
    v10 += v13 * 4;
  }
  for (i = v9 + a8; i; --i)
  {
    *v12 = 0;
    v15 = v10 + 4 * a5;
    if (v15 >= v11)
      v16 = -(uint64_t)a4;
    else
      v16 = 0;
    v10 = v15 + 4 * v16;
    v12 += a5;
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

_DWORD **vec::template_mark_pixelshape_row<(CGCompositeOperation)1,_argb8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t i;
  _DWORD *v15;
  uint64_t v16;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 4)
  {
    v13 = 0;
    do
    {
      *(_OWORD *)&v12[v13] = *(_OWORD *)&v10[v13];
      v9 -= 4;
      v13 += 4 * a5;
    }
    while (v9 > 3);
    v12 = (_DWORD *)((char *)v12 + v13 * 4);
    v10 = (_DWORD *)((char *)v10 + v13 * 4);
  }
  for (i = v9 + a8; i; --i)
  {
    *v12 = *v10;
    v15 = &v10[a5];
    if ((unint64_t)v15 >= v11)
      v16 = -(uint64_t)a4;
    else
      v16 = 0;
    v10 = &v15[v16];
    v12 += a5;
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)2,_argb8_t>(unsigned __int32 **result, unsigned __int32 **a2, unint64_t *a3, int a4, int a5, int8x16_t a6, double a7, __n128 a8, double a9, uint16x8_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14)
{
  unint64_t v14;
  unsigned __int32 *v15;
  unint64_t v16;
  unsigned __int32 *v17;
  uint64_t v18;
  uint16x8_t v19;
  int8x16_t v20;
  uint8x16_t v21;
  int8x16_t v22;
  uint8x16_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint64_t v26;
  uint16x8_t v27;
  int8x8_t v28;
  unsigned int v29;
  unsigned int v30;
  int8x8_t v31;
  uint16x8_t v32;
  unsigned __int32 *v33;
  uint64_t v34;

  v14 = a14;
  v15 = *result;
  v16 = *a3;
  v17 = *a2;
  if (a14 >= 4)
  {
    v18 = 0;
    a6.i64[1] = 0xC0C0C0C08080808;
    v19 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v20 = *(int8x16_t *)&v15[v18];
      v21 = *(uint8x16_t *)&v17[v18];
      v22 = vqtbl1q_s8(v20, (int8x16_t)xmmword_185005170);
      v23 = (uint8x16_t)vbicq_s8(v20, vceqzq_s8(v22));
      v24 = vminq_u16(vmull_u8(*(uint8x8_t *)v21.i8, *(uint8x8_t *)v22.i8), v19);
      v25 = vminq_u16(vmull_high_u8(v21, (uint8x16_t)v22), v19);
      a10 = vrsraq_n_u16(v25, v25, 8uLL);
      a8 = (__n128)vqaddq_u8(v23, vqsubq_u8(v21, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v24, v24, 8uLL), 8uLL), a10, 8uLL)));
      *(__n128 *)&v17[v18] = a8;
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    v17 = (unsigned __int32 *)((char *)v17 + v18 * 4);
    v15 = (unsigned __int32 *)((char *)v15 + v18 * 4);
  }
  v26 = v14 + a13;
  if (v26)
  {
    a6.i64[0] = 0xFFFFFFFF00000000;
    v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a8.n128_u32[0] = *v15;
      v28 = (int8x8_t)vmovl_u8((uint8x8_t)a8.n128_u64[0]).u64[0];
      LOBYTE(v29) = v28.i8[0];
      BYTE1(v29) = v28.i8[2];
      BYTE2(v29) = v28.i8[4];
      HIBYTE(v29) = v28.i8[6];
      a10.i32[0] = *v17;
      a10 = vmovl_u8(*(uint8x8_t *)a10.i8);
      LOBYTE(v30) = a10.i8[0];
      BYTE1(v30) = a10.i8[2];
      BYTE2(v30) = a10.i8[4];
      HIBYTE(v30) = a10.i8[6];
      v31 = vqtbl1_s8(vdupq_lane_s8(v28, 0), (int8x8_t)0xFFFFFFFF00000000);
      *(int8x8_t *)a10.i8 = vceqz_s8(v31);
      v32 = vminq_u16(vmull_u8((uint8x8_t)v30, (uint8x8_t)v31), v27);
      a8 = (__n128)vrsraq_n_u16(v32, v32, 8uLL);
      a8.n128_u64[0] = (unint64_t)vqadd_u8((uint8x8_t)vbic_s8((int8x8_t)v29, *(int8x8_t *)a10.i8), vqsub_u8((uint8x8_t)v30, vqrshrn_n_u16((uint16x8_t)a8, 8uLL)));
      a8.n128_u64[0] = (unint64_t)vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a8, a6));
      *v17 = a8.n128_u32[0];
      v33 = &v15[a5];
      if ((unint64_t)v33 >= v16)
        v34 = -(uint64_t)a4;
      else
        v34 = 0;
      v15 = &v33[v34];
      v17 += a5;
      --v26;
    }
    while (v26);
  }
  *result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)3,_argb8_t>(unsigned __int32 **result, __int32 **a2, unint64_t *a3, int a4, int a5, int a6, int8x16_t a7, double a8, double a9, uint16x8_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  unint64_t v13;
  unsigned __int32 *v14;
  unint64_t v15;
  __int32 *v16;
  uint64_t v17;
  unsigned int v18;
  int8x16_t v19;
  uint16x8_t v20;
  uint8x16_t v21;
  uint8x16_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint64_t v27;
  unsigned int v28;
  uint16x8_t v29;
  uint16x8_t v30;
  int8x16_t v31;
  unsigned int v32;
  uint16x8_t v33;
  unsigned __int32 *v34;
  uint64_t v35;

  v13 = a13;
  v14 = *result;
  v15 = *a3;
  v16 = *a2;
  if (a13 >= 4)
  {
    v17 = 0;
    if (a6)
      v18 = 0;
    else
      v18 = -1;
    v19.i64[0] = 0xFF000000FFLL;
    v19.i64[1] = 0xFF000000FFLL;
    a7 = vandq_s8(vdupq_n_s8(v18), v19);
    v20 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v21 = (uint8x16_t)vorrq_s8(*(int8x16_t *)&v14[v17], a7);
      v22 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)&v16[v17], (int8x16_t)xmmword_185005170);
      v23 = vmull_u8(*(uint8x8_t *)v21.i8, *(uint8x8_t *)v22.i8);
      v24 = vmull_high_u8(v21, v22);
      v25 = vminq_u16(v23, v20);
      v26 = vminq_u16(v24, v20);
      a10 = vrsraq_n_u16(v26, v26, 8uLL);
      *(uint8x16_t *)&v16[v17] = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v25, v25, 8uLL), 8uLL), a10, 8uLL);
      v13 -= 4;
      v17 += 4 * a5;
    }
    while (v13 > 3);
    v16 = (__int32 *)((char *)v16 + v17 * 4);
    v14 = (unsigned __int32 *)((char *)v14 + v17 * 4);
  }
  v27 = v13 + a12;
  if (v27)
  {
    if (a6)
      v28 = 0;
    else
      v28 = -1;
    *(int8x8_t *)a7.i8 = vand_s8(vdup_n_s8(v28), (int8x8_t)0xFF000000FFLL);
    v29 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a10.i32[0] = *v14;
      v30 = vmovl_u8(*(uint8x8_t *)a10.i8);
      v31.i32[1] = 0;
      LOBYTE(v32) = v30.i8[0];
      BYTE1(v32) = v30.i8[2];
      BYTE2(v32) = v30.i8[4];
      HIBYTE(v32) = v30.i8[6];
      *(int8x8_t *)v30.i8 = vorr_s8((int8x8_t)v32, *(int8x8_t *)a7.i8);
      v31.i32[0] = *v16;
      v31.i64[1] = *v16;
      v33 = vminq_u16(vmull_u8(*(uint8x8_t *)v30.i8, (uint8x8_t)vqtbl1_s8(v31, (int8x8_t)0xFFFFFFFF00000000)), v29);
      a10 = vrsraq_n_u16(v33, v33, 8uLL);
      *(uint8x8_t *)a10.i8 = vqrshrn_n_u16(a10, 8uLL);
      *(int8x8_t *)a10.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a10, a7));
      *v16 = a10.i32[0];
      v34 = &v14[a5];
      if ((unint64_t)v34 >= v15)
        v35 = -(uint64_t)a4;
      else
        v35 = 0;
      v14 = &v34[v35];
      v16 += a5;
      --v27;
    }
    while (v27);
  }
  *result = v14;
  *a3 = v15;
  *a2 = v16;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)4,_argb8_t>(unsigned __int32 **result, __int32 **a2, unint64_t *a3, int a4, int a5, int a6, int8x16_t a7, double a8, double a9, int8x16_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  unint64_t v13;
  unsigned __int32 *v14;
  unint64_t v15;
  __int32 *v16;
  uint64_t v17;
  unsigned int v18;
  int8x16_t v19;
  uint16x8_t v20;
  uint8x16_t v21;
  uint8x16_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint64_t v25;
  unsigned int v26;
  uint16x8_t v27;
  int8x16_t v28;
  unsigned int v29;
  uint16x8_t v30;
  unsigned __int32 *v31;
  uint64_t v32;

  v13 = a13;
  v14 = *result;
  v15 = *a3;
  v16 = *a2;
  if (a13 >= 4)
  {
    v17 = 0;
    if (a6)
      v18 = 0;
    else
      v18 = -1;
    v19.i64[0] = 0xFF000000FFLL;
    v19.i64[1] = 0xFF000000FFLL;
    a7 = vandq_s8(vdupq_n_s8(v18), v19);
    v20 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v21 = (uint8x16_t)vorrq_s8(*(int8x16_t *)&v14[v17], a7);
      v22 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)&v16[v17], (int8x16_t)xmmword_185005170);
      v23 = vminq_u16(vmull_u8(*(uint8x8_t *)v21.i8, *(uint8x8_t *)v22.i8), v20);
      v24 = vminq_u16(vmull_high_u8(v21, v22), v20);
      a10 = (int8x16_t)vqsubq_u8(v21, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v23, v23, 8uLL), 8uLL), vrsraq_n_u16(v24, v24, 8uLL), 8uLL));
      *(int8x16_t *)&v16[v17] = a10;
      v13 -= 4;
      v17 += 4 * a5;
    }
    while (v13 > 3);
    v16 = (__int32 *)((char *)v16 + v17 * 4);
    v14 = (unsigned __int32 *)((char *)v14 + v17 * 4);
  }
  v25 = v13 + a12;
  if (v25)
  {
    if (a6)
      v26 = 0;
    else
      v26 = -1;
    *(int8x8_t *)a7.i8 = vand_s8(vdup_n_s8(v26), (int8x8_t)0xFF000000FFLL);
    v27 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a10.i32[0] = *v14;
      a10 = (int8x16_t)vmovl_u8(*(uint8x8_t *)a10.i8);
      v28.i32[1] = 0;
      LOBYTE(v29) = a10.i8[0];
      BYTE1(v29) = a10.i8[2];
      BYTE2(v29) = a10.i8[4];
      HIBYTE(v29) = a10.i8[6];
      *(int8x8_t *)a10.i8 = vorr_s8((int8x8_t)v29, *(int8x8_t *)a7.i8);
      v28.i32[0] = *v16;
      v28.i64[1] = *v16;
      v30 = vminq_u16(vmull_u8(*(uint8x8_t *)a10.i8, (uint8x8_t)vqtbl1_s8(v28, (int8x8_t)0xFFFFFFFF00000000)), v27);
      *(uint8x8_t *)a10.i8 = vqsub_u8(*(uint8x8_t *)a10.i8, vqrshrn_n_u16(vrsraq_n_u16(v30, v30, 8uLL), 8uLL));
      *(int8x8_t *)a10.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a10, a7));
      *v16 = a10.i32[0];
      v31 = &v14[a5];
      if ((unint64_t)v31 >= v15)
        v32 = -(uint64_t)a4;
      else
        v32 = 0;
      v14 = &v31[v32];
      v16 += a5;
      --v25;
    }
    while (v25);
  }
  *result = v14;
  *a3 = v15;
  *a2 = v16;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)5,_argb8_t>(unsigned __int32 **result, unsigned __int32 **a2, unint64_t *a3, int a4, int a5, int8x16_t a6, double a7, __n128 a8, double a9, uint8x16_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14)
{
  unint64_t v14;
  unsigned __int32 *v15;
  unint64_t v16;
  unsigned __int32 *v17;
  uint64_t v18;
  uint16x8_t v19;
  int8x16_t v20;
  int8x16_t v21;
  uint8x16_t v22;
  uint8x16_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint8x16_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint64_t v29;
  uint16x8_t v30;
  int8x8_t v31;
  unsigned int v32;
  int8x8_t v33;
  unsigned int v34;
  uint16x8_t v35;
  uint16x8_t v36;
  unsigned __int32 *v37;
  uint64_t v38;

  v14 = a14;
  v15 = *result;
  v16 = *a3;
  v17 = *a2;
  if (a14 >= 4)
  {
    v18 = 0;
    a6.i64[1] = 0xC0C0C0C08080808;
    v19 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v20 = *(int8x16_t *)&v15[v18];
      v21 = *(int8x16_t *)&v17[v18];
      v22 = (uint8x16_t)vqtbl1q_s8(v20, (int8x16_t)xmmword_185005170);
      v23 = (uint8x16_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_185005170);
      v24 = vminq_u16(vmull_u8(*(uint8x8_t *)v21.i8, *(uint8x8_t *)v22.i8), v19);
      v25 = vminq_u16(vmull_high_u8((uint8x16_t)v21, v22), v19);
      v26 = vqsubq_u8((uint8x16_t)v21, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v24, v24, 8uLL), 8uLL), vrsraq_n_u16(v25, v25, 8uLL), 8uLL));
      v27 = vminq_u16(vmull_u8(*(uint8x8_t *)v23.i8, *(uint8x8_t *)v20.i8), v19);
      v28 = vminq_u16(vmull_high_u8(v23, (uint8x16_t)v20), v19);
      a10 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v27, v27, 8uLL), 8uLL), vrsraq_n_u16(v28, v28, 8uLL), 8uLL);
      a8 = (__n128)vqaddq_u8(v26, a10);
      *(__n128 *)&v17[v18] = a8;
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    v17 = (unsigned __int32 *)((char *)v17 + v18 * 4);
    v15 = (unsigned __int32 *)((char *)v15 + v18 * 4);
  }
  v29 = v14 + a13;
  if (v29)
  {
    a6.i64[0] = 0xFFFFFFFF00000000;
    v30 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a8.n128_u32[0] = *v15;
      v31 = (int8x8_t)vmovl_u8((uint8x8_t)a8.n128_u64[0]).u64[0];
      LOBYTE(v32) = v31.i8[0];
      BYTE1(v32) = v31.i8[2];
      BYTE2(v32) = v31.i8[4];
      HIBYTE(v32) = v31.i8[6];
      a10.i32[0] = *v17;
      v33 = (int8x8_t)vmovl_u8(*(uint8x8_t *)a10.i8).u64[0];
      LOBYTE(v34) = v33.i8[0];
      BYTE1(v34) = v33.i8[2];
      BYTE2(v34) = v33.i8[4];
      HIBYTE(v34) = v33.i8[6];
      *(int8x8_t *)a10.i8 = vqtbl1_s8(vdupq_lane_s8(v33, 0), (int8x8_t)0xFFFFFFFF00000000);
      v35 = vminq_u16(vmull_u8((uint8x8_t)v34, (uint8x8_t)vqtbl1_s8(vdupq_lane_s8(v31, 0), (int8x8_t)0xFFFFFFFF00000000)), v30);
      a8 = (__n128)vrsraq_n_u16(v35, v35, 8uLL);
      v36 = vminq_u16(vmull_u8(*(uint8x8_t *)a10.i8, (uint8x8_t)v32), v30);
      a8.n128_u64[0] = (unint64_t)vqadd_u8(vqsub_u8((uint8x8_t)v34, vqrshrn_n_u16((uint16x8_t)a8, 8uLL)), vqrshrn_n_u16(vrsraq_n_u16(v36, v36, 8uLL), 8uLL));
      a8.n128_u64[0] = (unint64_t)vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a8, a6));
      *v17 = a8.n128_u32[0];
      v37 = &v15[a5];
      if ((unint64_t)v37 >= v16)
        v38 = -(uint64_t)a4;
      else
        v38 = 0;
      v15 = &v37[v38];
      v17 += a5;
      --v29;
    }
    while (v29);
  }
  *result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)6,_argb8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int8x16_t a7, double a8, double a9, __n128 a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  unint64_t v13;
  unsigned __int32 *v14;
  unint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int v18;
  int8x16_t v19;
  uint16x8_t v20;
  int8x16_t v21;
  uint8x16_t v22;
  int8x16_t v23;
  uint8x16_t v24;
  uint8x16_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint64_t v30;
  unsigned int v31;
  uint16x8_t v32;
  uint16x8_t v33;
  unsigned int v34;
  unsigned int v35;
  uint8x8_t v36;
  uint16x8_t v37;
  unsigned __int32 *v38;
  uint64_t v39;

  v13 = a13;
  v14 = *result;
  v15 = *a3;
  v16 = *a2;
  if (a13 >= 4)
  {
    v17 = 0;
    if (a6)
      v18 = 0;
    else
      v18 = -1;
    v19.i64[0] = 0xFF000000FFLL;
    v19.i64[1] = 0xFF000000FFLL;
    a7 = vandq_s8(vdupq_n_s8(v18), v19);
    v20 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v21 = *(int8x16_t *)&v16[v17];
      v22 = (uint8x16_t)vorrq_s8(*(int8x16_t *)&v14[v17], a7);
      v23 = vqtbl1q_s8(v21, (int8x16_t)xmmword_185005170);
      v24 = (uint8x16_t)vbicq_s8(v21, vceqzq_s8(v23));
      v25 = (uint8x16_t)vmvnq_s8(v23);
      v26 = vmull_u8(*(uint8x8_t *)v22.i8, *(uint8x8_t *)v25.i8);
      v27 = vmull_high_u8(v22, v25);
      v28 = vminq_u16(v26, v20);
      v29 = vminq_u16(v27, v20);
      a10 = (__n128)vqaddq_u8(v24, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v28, v28, 8uLL), 8uLL), vrsraq_n_u16(v29, v29, 8uLL), 8uLL));
      *(__n128 *)&v16[v17] = a10;
      v13 -= 4;
      v17 += 4 * a5;
    }
    while (v13 > 3);
    v16 = (_DWORD *)((char *)v16 + v17 * 4);
    v14 = (unsigned __int32 *)((char *)v14 + v17 * 4);
  }
  v30 = v13 + a12;
  if (v30)
  {
    if (a6)
      v31 = 0;
    else
      v31 = -1;
    *(int8x8_t *)a7.i8 = vand_s8(vdup_n_s8(v31), (int8x8_t)0xFF000000FFLL);
    v32 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a10.n128_u32[0] = *v14;
      v33 = vmovl_u8((uint8x8_t)a10.n128_u64[0]);
      LOBYTE(v34) = v33.i8[0];
      BYTE1(v34) = v33.i8[2];
      BYTE2(v34) = v33.i8[4];
      HIBYTE(v34) = v33.i8[6];
      v33.i32[0] = *v16;
      v33.i64[0] = vmovl_u8(*(uint8x8_t *)v33.i8).u64[0];
      LOBYTE(v35) = v33.i8[0];
      BYTE1(v35) = v33.i8[2];
      BYTE2(v35) = v33.i8[4];
      HIBYTE(v35) = v33.i8[6];
      *(int8x8_t *)v33.i8 = vqtbl1_s8(vdupq_lane_s8(*(int8x8_t *)v33.i8, 0), (int8x8_t)0xFFFFFFFF00000000);
      v36 = (uint8x8_t)vbic_s8((int8x8_t)v35, vceqz_s8(*(int8x8_t *)v33.i8));
      v37 = vminq_u16(vmull_u8((uint8x8_t)vorr_s8((int8x8_t)v34, *(int8x8_t *)a7.i8), (uint8x8_t)vmvn_s8(*(int8x8_t *)v33.i8)), v32);
      a10 = (__n128)vrsraq_n_u16(v37, v37, 8uLL);
      a10.n128_u64[0] = (unint64_t)vqadd_u8(v36, vqrshrn_n_u16((uint16x8_t)a10, 8uLL));
      a10.n128_u64[0] = (unint64_t)vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a10, a7));
      *v16 = a10.n128_u32[0];
      v38 = &v14[a5];
      if ((unint64_t)v38 >= v15)
        v39 = -(uint64_t)a4;
      else
        v39 = 0;
      v14 = &v38[v39];
      v16 += a5;
      --v30;
    }
    while (v30);
  }
  *result = v14;
  *a3 = v15;
  *a2 = v16;
  return result;
}

_DWORD **vec::template_mark_pixelshape_row<(CGCompositeOperation)7,_argb8_t>(_DWORD **result, unsigned __int32 **a2, unint64_t *a3, int a4, int a5, int8x16_t a6, double a7, uint16x8_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  unint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  unsigned __int32 *v15;
  uint64_t v16;
  uint16x8_t v17;
  uint8x16_t v18;
  uint8x16_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint64_t v24;
  uint16x8_t v25;
  int8x16_t v26;
  unsigned int v27;
  uint16x8_t v28;
  _DWORD *v29;
  uint64_t v30;

  v12 = a12;
  v13 = *result;
  v14 = *a3;
  v15 = *a2;
  if (a12 >= 4)
  {
    v16 = 0;
    a6.i64[1] = 0xC0C0C0C08080808;
    v17 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v18 = *(uint8x16_t *)&v15[v16];
      v19 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)&v13[v16], (int8x16_t)xmmword_185005170);
      v20 = vmull_u8(*(uint8x8_t *)v18.i8, *(uint8x8_t *)v19.i8);
      v21 = vmull_high_u8(v18, v19);
      v22 = vminq_u16(v20, v17);
      v23 = vminq_u16(v21, v17);
      a8 = vrsraq_n_u16(v23, v23, 8uLL);
      *(uint8x16_t *)&v15[v16] = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v22, v22, 8uLL), 8uLL), a8, 8uLL);
      v12 -= 4;
      v16 += 4 * a5;
    }
    while (v12 > 3);
    v15 = (unsigned __int32 *)((char *)v15 + v16 * 4);
    v13 = (_DWORD *)((char *)v13 + v16 * 4);
  }
  v24 = v12 + a11;
  if (v24)
  {
    a6.i64[0] = 0xFFFFFFFF00000000;
    v25 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a8.i32[0] = *v15;
      v26 = (int8x16_t)vmovl_u8(*(uint8x8_t *)a8.i8);
      LOBYTE(v27) = v26.i8[0];
      BYTE1(v27) = v26.i8[2];
      BYTE2(v27) = v26.i8[4];
      HIBYTE(v27) = v26.i8[6];
      v26.i32[0] = *v13;
      v26.i64[1] = v26.i64[0];
      v28 = vminq_u16(vmull_u8((uint8x8_t)v27, (uint8x8_t)vqtbl1_s8(v26, (int8x8_t)0xFFFFFFFF00000000)), v25);
      a8 = vrsraq_n_u16(v28, v28, 8uLL);
      *(uint8x8_t *)a8.i8 = vqrshrn_n_u16(a8, 8uLL);
      *(int8x8_t *)a8.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a8, a6));
      *v15 = a8.i32[0];
      v29 = &v13[a5];
      if ((unint64_t)v29 >= v14)
        v30 = -(uint64_t)a4;
      else
        v30 = 0;
      v13 = &v29[v30];
      v15 += a5;
      --v24;
    }
    while (v24);
  }
  *result = v13;
  *a3 = v14;
  *a2 = v15;
  return result;
}

_DWORD **vec::template_mark_pixelshape_row<(CGCompositeOperation)8,_argb8_t>(_DWORD **result, unsigned __int32 **a2, unint64_t *a3, int a4, int a5, int8x16_t a6, double a7, __n128 a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  unint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  unsigned __int32 *v15;
  uint64_t v16;
  uint16x8_t v17;
  uint8x16_t v18;
  uint8x16_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint64_t v22;
  uint16x8_t v23;
  int8x16_t v24;
  unsigned int v25;
  uint16x8_t v26;
  _DWORD *v27;
  uint64_t v28;

  v12 = a12;
  v13 = *result;
  v14 = *a3;
  v15 = *a2;
  if (a12 >= 4)
  {
    v16 = 0;
    a6.i64[1] = 0xC0C0C0C08080808;
    v17 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v18 = *(uint8x16_t *)&v15[v16];
      v19 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)&v13[v16], (int8x16_t)xmmword_185005170);
      v20 = vminq_u16(vmull_u8(*(uint8x8_t *)v18.i8, *(uint8x8_t *)v19.i8), v17);
      v21 = vminq_u16(vmull_high_u8(v18, v19), v17);
      a8 = (__n128)vqsubq_u8(v18, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v20, v20, 8uLL), 8uLL), vrsraq_n_u16(v21, v21, 8uLL), 8uLL));
      *(__n128 *)&v15[v16] = a8;
      v12 -= 4;
      v16 += 4 * a5;
    }
    while (v12 > 3);
    v15 = (unsigned __int32 *)((char *)v15 + v16 * 4);
    v13 = (_DWORD *)((char *)v13 + v16 * 4);
  }
  v22 = v12 + a11;
  if (v22)
  {
    a6.i64[0] = 0xFFFFFFFF00000000;
    v23 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a8.n128_u32[0] = *v15;
      v24 = (int8x16_t)vmovl_u8((uint8x8_t)a8.n128_u64[0]);
      LOBYTE(v25) = v24.i8[0];
      BYTE1(v25) = v24.i8[2];
      BYTE2(v25) = v24.i8[4];
      HIBYTE(v25) = v24.i8[6];
      v24.i32[0] = *v13;
      v24.i64[1] = v24.i64[0];
      v26 = vminq_u16(vmull_u8((uint8x8_t)v25, (uint8x8_t)vqtbl1_s8(v24, (int8x8_t)0xFFFFFFFF00000000)), v23);
      a8 = (__n128)vrsraq_n_u16(v26, v26, 8uLL);
      a8.n128_u64[0] = (unint64_t)vqsub_u8((uint8x8_t)v25, vqrshrn_n_u16((uint16x8_t)a8, 8uLL));
      a8.n128_u64[0] = (unint64_t)vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a8, a6));
      *v15 = a8.n128_u32[0];
      v27 = &v13[a5];
      if ((unint64_t)v27 >= v14)
        v28 = -(uint64_t)a4;
      else
        v28 = 0;
      v13 = &v27[v28];
      v15 += a5;
      --v22;
    }
    while (v22);
  }
  *result = v13;
  *a3 = v14;
  *a2 = v15;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)9,_argb8_t>(unsigned __int32 **result, unsigned __int32 **a2, unint64_t *a3, int a4, int a5, int8x16_t a6, double a7, __n128 a8, double a9, uint16x8_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14)
{
  unint64_t v14;
  unsigned __int32 *v15;
  unint64_t v16;
  unsigned __int32 *v17;
  uint64_t v18;
  uint16x8_t v19;
  int8x16_t v20;
  int8x16_t v21;
  uint8x16_t v22;
  uint8x16_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint8x16_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint64_t v31;
  uint16x8_t v32;
  int8x8_t v33;
  unsigned int v34;
  int8x8_t v35;
  unsigned int v36;
  uint16x8_t v37;
  unsigned __int32 *v38;
  uint64_t v39;

  v14 = a14;
  v15 = *result;
  v16 = *a3;
  v17 = *a2;
  if (a14 >= 4)
  {
    v18 = 0;
    a6.i64[1] = 0xC0C0C0C08080808;
    v19 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v20 = *(int8x16_t *)&v15[v18];
      v21 = *(int8x16_t *)&v17[v18];
      v22 = (uint8x16_t)vqtbl1q_s8(v20, (int8x16_t)xmmword_185005170);
      v23 = (uint8x16_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_185005170);
      v24 = vminq_u16(vmull_u8(*(uint8x8_t *)v20.i8, *(uint8x8_t *)v23.i8), v19);
      v25 = vminq_u16(vmull_high_u8((uint8x16_t)v20, v23), v19);
      v26 = vqsubq_u8((uint8x16_t)v20, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v24, v24, 8uLL), 8uLL), vrsraq_n_u16(v25, v25, 8uLL), 8uLL));
      v27 = vmull_u8(*(uint8x8_t *)v22.i8, *(uint8x8_t *)v21.i8);
      v28 = vmull_high_u8(v22, (uint8x16_t)v21);
      v29 = vminq_u16(v27, v19);
      v30 = vminq_u16(v28, v19);
      a10 = (uint16x8_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v29, v29, 8uLL), 8uLL), vrsraq_n_u16(v30, v30, 8uLL), 8uLL);
      a8 = (__n128)vqaddq_u8(v26, (uint8x16_t)a10);
      *(__n128 *)&v17[v18] = a8;
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    v17 = (unsigned __int32 *)((char *)v17 + v18 * 4);
    v15 = (unsigned __int32 *)((char *)v15 + v18 * 4);
  }
  v31 = v14 + a13;
  if (v31)
  {
    a6.i64[0] = 0xFFFFFFFF00000000;
    v32 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a8.n128_u32[0] = *v15;
      v33 = (int8x8_t)vmovl_u8((uint8x8_t)a8.n128_u64[0]).u64[0];
      LOBYTE(v34) = v33.i8[0];
      BYTE1(v34) = v33.i8[2];
      BYTE2(v34) = v33.i8[4];
      HIBYTE(v34) = v33.i8[6];
      a10.i32[0] = *v17;
      v35 = (int8x8_t)vmovl_u8(*(uint8x8_t *)a10.i8).u64[0];
      LOBYTE(v36) = v35.i8[0];
      BYTE1(v36) = v35.i8[2];
      BYTE2(v36) = v35.i8[4];
      HIBYTE(v36) = v35.i8[6];
      a10 = vminq_u16(vmull_u8((uint8x8_t)v34, (uint8x8_t)vqtbl1_s8(vdupq_lane_s8(v35, 0), (int8x8_t)0xFFFFFFFF00000000)), v32);
      *(uint8x8_t *)a10.i8 = vqrshrn_n_u16(vrsraq_n_u16(a10, a10, 8uLL), 8uLL);
      v37 = vminq_u16(vmull_u8((uint8x8_t)vqtbl1_s8(vdupq_lane_s8(v33, 0), (int8x8_t)0xFFFFFFFF00000000), (uint8x8_t)v36), v32);
      a8 = (__n128)vrsraq_n_u16(v37, v37, 8uLL);
      a8.n128_u64[0] = (unint64_t)vqadd_u8(vqsub_u8((uint8x8_t)v34, *(uint8x8_t *)a10.i8), vqrshrn_n_u16((uint16x8_t)a8, 8uLL));
      a8.n128_u64[0] = (unint64_t)vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a8, a6));
      *v17 = a8.n128_u32[0];
      v38 = &v15[a5];
      if ((unint64_t)v38 >= v16)
        v39 = -(uint64_t)a4;
      else
        v39 = 0;
      v15 = &v38[v39];
      v17 += a5;
      --v31;
    }
    while (v31);
  }
  *result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)10,_argb8_t>(unsigned __int32 **result, unsigned __int32 **a2, unint64_t *a3, int a4, int a5, int8x16_t a6, double a7, uint16x8_t a8, double a9, uint16x8_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14)
{
  unint64_t v14;
  unsigned __int32 *v15;
  unint64_t v16;
  unsigned __int32 *v17;
  uint64_t v18;
  uint16x8_t v19;
  int8x16_t v20;
  int8x16_t v21;
  uint8x16_t v22;
  uint8x16_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint64_t v29;
  uint16x8_t v30;
  int8x8_t v31;
  unsigned int v32;
  int8x8_t v33;
  unsigned int v34;
  uint16x8_t v35;
  unsigned __int32 *v36;
  uint64_t v37;

  v14 = a14;
  v15 = *result;
  v16 = *a3;
  v17 = *a2;
  if (a14 >= 4)
  {
    v18 = 0;
    a6.i64[1] = 0xC0C0C0C08080808;
    v19 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v20 = *(int8x16_t *)&v15[v18];
      v21 = *(int8x16_t *)&v17[v18];
      v22 = (uint8x16_t)vqtbl1q_s8(vmvnq_s8(v21), (int8x16_t)xmmword_185005170);
      v23 = (uint8x16_t)vqtbl1q_s8(vmvnq_s8(v20), (int8x16_t)xmmword_185005170);
      v24 = vmull_u8(*(uint8x8_t *)v20.i8, *(uint8x8_t *)v22.i8);
      v25 = vmull_high_u8((uint8x16_t)v20, v22);
      a10 = vqaddq_u16(v24, vmull_u8(*(uint8x8_t *)v21.i8, *(uint8x8_t *)v23.i8));
      v26 = vqaddq_u16(v25, vmull_high_u8((uint8x16_t)v21, v23));
      v27 = vminq_u16(a10, v19);
      v28 = vminq_u16(v26, v19);
      a8 = vrsraq_n_u16(v28, v28, 8uLL);
      *(uint8x16_t *)&v17[v18] = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v27, v27, 8uLL), 8uLL), a8, 8uLL);
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    v17 = (unsigned __int32 *)((char *)v17 + v18 * 4);
    v15 = (unsigned __int32 *)((char *)v15 + v18 * 4);
  }
  v29 = v14 + a13;
  if (v29)
  {
    a6.i64[0] = 0xFFFFFFFF00000000;
    v30 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a8.i32[0] = *v15;
      v31 = (int8x8_t)vmovl_u8(*(uint8x8_t *)a8.i8).u64[0];
      LOBYTE(v32) = v31.i8[0];
      BYTE1(v32) = v31.i8[2];
      BYTE2(v32) = v31.i8[4];
      HIBYTE(v32) = v31.i8[6];
      a10.i32[0] = *v17;
      v33 = (int8x8_t)vmovl_u8(*(uint8x8_t *)a10.i8).u64[0];
      LOBYTE(v34) = v33.i8[0];
      BYTE1(v34) = v33.i8[2];
      BYTE2(v34) = v33.i8[4];
      HIBYTE(v34) = v33.i8[6];
      *(int8x8_t *)a10.i8 = vmvn_s8(vqtbl1_s8(vdupq_lane_s8(v33, 0), (int8x8_t)0xFFFFFFFF00000000));
      v35 = vminq_u16(vqaddq_u16(vmull_u8((uint8x8_t)v32, *(uint8x8_t *)a10.i8), vmull_u8((uint8x8_t)v34, (uint8x8_t)vmvn_s8(vqtbl1_s8(vdupq_lane_s8(v31, 0), (int8x8_t)0xFFFFFFFF00000000)))), v30);
      a8 = vrsraq_n_u16(v35, v35, 8uLL);
      *(uint8x8_t *)a8.i8 = vqrshrn_n_u16(a8, 8uLL);
      *(int8x8_t *)a8.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a8, a6));
      *v17 = a8.i32[0];
      v36 = &v15[a5];
      if ((unint64_t)v36 >= v16)
        v37 = -(uint64_t)a4;
      else
        v37 = 0;
      v15 = &v36[v37];
      v17 += a5;
      --v29;
    }
    while (v29);
  }
  *result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)11,_argb8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, int8x16_t a12, unint64_t a13)
{
  unint64_t v13;
  unsigned __int32 *v14;
  unint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int v18;
  int8x16_t v19;
  int8x16_t v20;
  unsigned int v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  uint8x16_t v25;
  uint8x16_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int8x8_t v30;
  uint16x8_t v31;
  unsigned int v32;
  unsigned int v33;
  uint8x8_t v34;
  int8x16_t v35;
  int8x16_t v36;
  unsigned __int32 *v37;
  uint64_t v38;

  v13 = a13;
  v14 = *result;
  v15 = *a3;
  v16 = *a2;
  if (a13 >= 4)
  {
    v17 = 0;
    if (a6)
      v18 = 0;
    else
      v18 = -1;
    v19 = vdupq_n_s8(v18);
    v20.i64[0] = 0xFF000000FFLL;
    v20.i64[1] = 0xFF000000FFLL;
    if (a7)
      v21 = 0;
    else
      v21 = -1;
    a9 = vandq_s8(v19, v20);
    v22 = vandq_s8(vdupq_n_s8(v21), v20);
    do
    {
      v23 = vorrq_s8(*(int8x16_t *)&v14[v17], a9);
      v24 = vorrq_s8(*(int8x16_t *)&v16[v17], v22);
      v25 = (uint8x16_t)vqtbl1q_s8(v23, (int8x16_t)xmmword_185005170);
      v26 = (uint8x16_t)vqtbl1q_s8(v24, (int8x16_t)xmmword_185005170);
      a12 = (int8x16_t)vqsubq_u8(vqaddq_u8(v26, v25), vqaddq_u8(vqsubq_u8(v25, (uint8x16_t)v23), vqsubq_u8(v26, (uint8x16_t)v24)));
      *(int8x16_t *)&v16[v17] = a12;
      v13 -= 4;
      v17 += 4 * a5;
    }
    while (v13 > 3);
    v16 = (_DWORD *)((char *)v16 + v17 * 4);
    v14 = (unsigned __int32 *)((char *)v14 + v17 * 4);
  }
  v27 = v13 + a8;
  if (v27)
  {
    if (a6)
      v28 = 0;
    else
      v28 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v28), (int8x8_t)0xFF000000FFLL);
    if (a7)
      v29 = 0;
    else
      v29 = -1;
    v30 = vand_s8(vdup_n_s8(v29), (int8x8_t)0xFF000000FFLL);
    do
    {
      a12.i32[0] = *v14;
      v31 = vmovl_u8(*(uint8x8_t *)a12.i8);
      LOBYTE(v32) = v31.i8[0];
      BYTE1(v32) = v31.i8[2];
      BYTE2(v32) = v31.i8[4];
      HIBYTE(v32) = v31.i8[6];
      v31.i32[0] = *v16;
      a12 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v31.i8);
      LOBYTE(v33) = a12.i8[0];
      BYTE1(v33) = a12.i8[2];
      BYTE2(v33) = a12.i8[4];
      HIBYTE(v33) = a12.i8[6];
      *(int8x8_t *)a12.i8 = vorr_s8((int8x8_t)v32, *(int8x8_t *)a9.i8);
      v34 = (uint8x8_t)vorr_s8((int8x8_t)v33, v30);
      v35.i64[0] = a12.i64[0];
      v35.i64[1] = a12.i64[0];
      *(int8x8_t *)v35.i8 = vqtbl1_s8(v35, (int8x8_t)0x404040400000000);
      *(uint8x8_t *)v36.i8 = v34;
      v36.u64[1] = (unint64_t)v34;
      *(int8x8_t *)v36.i8 = vqtbl1_s8(v36, (int8x8_t)0x404040400000000);
      *(uint8x8_t *)a12.i8 = vqsub_u8(vqadd_u8(*(uint8x8_t *)v36.i8, *(uint8x8_t *)v35.i8), vqadd_u8(vqsub_u8(*(uint8x8_t *)v35.i8, *(uint8x8_t *)a12.i8), vqsub_u8(*(uint8x8_t *)v36.i8, v34)));
      *(int8x8_t *)a12.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a12, a9));
      *v16 = a12.i32[0];
      v37 = &v14[a5];
      if ((unint64_t)v37 >= v15)
        v38 = -(uint64_t)a4;
      else
        v38 = 0;
      v14 = &v37[v38];
      v16 += a5;
      --v27;
    }
    while (v27);
  }
  *result = v14;
  *a3 = v15;
  *a2 = v16;
  return result;
}

_DWORD **vec::template_mark_pixelshape_row<(CGCompositeOperation)12,_argb8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int8x16_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  unint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  unsigned int v15;
  int8x16_t v16;
  uint64_t v17;
  unsigned int v18;
  uint8x8_t v19;
  uint16x8_t v20;
  unsigned int v21;
  int8x16_t v22;
  unsigned int v23;
  _DWORD *v24;
  uint64_t v25;

  v10 = a10;
  v11 = *result;
  v12 = *a3;
  v13 = *a2;
  if (a10 >= 4)
  {
    v14 = 0;
    if (a6)
      v15 = 0;
    else
      v15 = -1;
    v16.i64[0] = 0xFF000000FFLL;
    v16.i64[1] = 0xFF000000FFLL;
    a7 = vandq_s8(vdupq_n_s8(v15), v16);
    do
    {
      *(uint8x16_t *)&v13[v14] = vqaddq_u8(*(uint8x16_t *)&v13[v14], (uint8x16_t)vorrq_s8(*(int8x16_t *)&v11[v14], a7));
      v10 -= 4;
      v14 += 4 * a5;
    }
    while (v10 > 3);
    v13 = (_DWORD *)((char *)v13 + v14 * 4);
    v11 = (_DWORD *)((char *)v11 + v14 * 4);
  }
  v17 = v10 + a9;
  if (v17)
  {
    if (a6)
      v18 = 0;
    else
      v18 = -1;
    v19.i32[1] = 255;
    *(int8x8_t *)a7.i8 = vand_s8(vdup_n_s8(v18), (int8x8_t)0xFF000000FFLL);
    do
    {
      v19.i32[0] = *v11;
      v20 = vmovl_u8(v19);
      LOBYTE(v21) = v20.i8[0];
      BYTE1(v21) = v20.i8[2];
      BYTE2(v21) = v20.i8[4];
      HIBYTE(v21) = v20.i8[6];
      v20.i32[0] = *v13;
      v22 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v20.i8);
      LOBYTE(v23) = v22.i8[0];
      BYTE1(v23) = v22.i8[2];
      BYTE2(v23) = v22.i8[4];
      HIBYTE(v23) = v22.i8[6];
      *(uint8x8_t *)v22.i8 = vqadd_u8((uint8x8_t)v23, (uint8x8_t)vorr_s8((int8x8_t)v21, *(int8x8_t *)a7.i8));
      v19 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v22, a7));
      *v13 = v19.i32[0];
      v24 = &v11[a5];
      if ((unint64_t)v24 >= v12)
        v25 = -(uint64_t)a4;
      else
        v25 = 0;
      v11 = &v24[v25];
      v13 += a5;
      --v17;
    }
    while (v17);
  }
  *result = v11;
  *a3 = v12;
  *a2 = v13;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)13,_argb8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, int8x16_t a13, unint64_t a14)
{
  unint64_t v14;
  unsigned __int32 *v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  int8x16_t v20;
  unsigned int v21;
  int8x16_t v22;
  uint16x8_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint8x16_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint8x16_t v32;
  uint8x16_t v33;
  uint8x16_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  int8x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  unsigned int v45;
  unsigned int v46;
  int8x8_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x8_t v50;
  uint8x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  unsigned __int32 *v54;
  uint64_t v55;

  v14 = a14;
  v15 = *result;
  v16 = *a3;
  v17 = *a2;
  if (a14 >= 4)
  {
    v18 = 0;
    if (a6)
      v19 = 0;
    else
      v19 = -1;
    v20.i64[0] = 0xFF000000FFLL;
    v20.i64[1] = 0xFF000000FFLL;
    a9 = vandq_s8(vdupq_n_s8(v19), v20);
    if (a7)
      v21 = 0;
    else
      v21 = -1;
    v22 = vandq_s8(vdupq_n_s8(v21), v20);
    v23 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v24 = vorrq_s8(*(int8x16_t *)&v15[v18], a9);
      v25 = vorrq_s8(*(int8x16_t *)&v17[v18], v22);
      v26 = vqtbl1q_s8(v24, (int8x16_t)xmmword_185005170);
      v27 = vqtbl1q_s8(v25, (int8x16_t)xmmword_185005170);
      v28 = vceqzq_s8(v27);
      v29 = (uint8x16_t)vbicq_s8(v25, v28);
      v30 = vminq_u16(vmull_u8(*(uint8x8_t *)v24.i8, *(uint8x8_t *)v29.i8), v23);
      v31 = vminq_u16(vmull_high_u8((uint8x16_t)v24, v29), v23);
      v32 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v30, v30, 8uLL), 8uLL), vrsraq_n_u16(v31, v31, 8uLL), 8uLL);
      v33 = (uint8x16_t)vmvnq_s8(v27);
      v34 = (uint8x16_t)vmvnq_s8(v26);
      v35 = vmull_u8(*(uint8x8_t *)v24.i8, *(uint8x8_t *)v33.i8);
      v36 = vqaddq_u16(vmull_high_u8((uint8x16_t)v24, v33), vmull_high_u8(v29, v34));
      v37 = vminq_u16(vqaddq_u16(v35, vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v34.i8)), v23);
      v38 = vminq_u16(v36, v23);
      a13 = vbslq_s8(vceqzq_s8(v26), v25, vbslq_s8(v28, v24, (int8x16_t)vqaddq_u8(v32, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v37, v37, 8uLL), 8uLL), vrsraq_n_u16(v38, v38, 8uLL), 8uLL))));
      *(int8x16_t *)&v17[v18] = a13;
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    v17 = (_DWORD *)((char *)v17 + v18 * 4);
    v15 = (unsigned __int32 *)((char *)v15 + v18 * 4);
  }
  v39 = v14 + a8;
  if (v39)
  {
    if (a6)
      v40 = 0;
    else
      v40 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v40), (int8x8_t)0xFF000000FFLL);
    if (a7)
      v41 = 0;
    else
      v41 = -1;
    v42 = vand_s8(vdup_n_s8(v41), (int8x8_t)0xFF000000FFLL);
    v43 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v15;
      v44 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v45) = v44.i8[0];
      BYTE1(v45) = v44.i8[2];
      BYTE2(v45) = v44.i8[4];
      HIBYTE(v45) = v44.i8[6];
      v44.i32[0] = *v17;
      a13 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v44.i8);
      LOBYTE(v46) = a13.i8[0];
      BYTE1(v46) = a13.i8[2];
      BYTE2(v46) = a13.i8[4];
      HIBYTE(v46) = a13.i8[6];
      *(int8x8_t *)a13.i8 = vorr_s8((int8x8_t)v45, *(int8x8_t *)a9.i8);
      v47 = vorr_s8((int8x8_t)v46, v42);
      v48.i64[0] = a13.i64[0];
      v48.i64[1] = a13.i64[0];
      *(int8x8_t *)v48.i8 = vqtbl1_s8(v48, (int8x8_t)0x404040400000000);
      *(int8x8_t *)v49.i8 = v47;
      v49.u64[1] = (unint64_t)v47;
      *(int8x8_t *)v49.i8 = vqtbl1_s8(v49, (int8x8_t)0x404040400000000);
      v50 = vceqz_s8(*(int8x8_t *)v49.i8);
      v51 = (uint8x8_t)vbic_s8(v47, v50);
      v52 = vminq_u16(vmull_u8(*(uint8x8_t *)a13.i8, v51), v43);
      v53 = vminq_u16(vqaddq_u16(vmull_u8(*(uint8x8_t *)a13.i8, (uint8x8_t)vmvn_s8(*(int8x8_t *)v49.i8)), vmull_u8(v51, (uint8x8_t)vmvn_s8(*(int8x8_t *)v48.i8))), v43);
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v48.i8), v47, vbsl_s8(v50, *(int8x8_t *)a13.i8, (int8x8_t)vqadd_u8(vqrshrn_n_u16(vrsraq_n_u16(v52, v52, 8uLL), 8uLL), vqrshrn_n_u16(vrsraq_n_u16(v53, v53, 8uLL), 8uLL))));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a13, a9));
      *v17 = a13.i32[0];
      v54 = &v15[a5];
      if ((unint64_t)v54 >= v16)
        v55 = -(uint64_t)a4;
      else
        v55 = 0;
      v15 = &v54[v55];
      v17 += a5;
      --v39;
    }
    while (v39);
  }
  *result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)14,_argb8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, int8x16_t a13, unint64_t a14)
{
  unint64_t v14;
  unsigned __int32 *v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  int8x16_t v20;
  unsigned int v21;
  int8x16_t v22;
  uint16x8_t v23;
  int8x16_t v24;
  int8x16_t v25;
  uint8x16_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  int8x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  unsigned int v35;
  uint16x8_t v36;
  unsigned int v37;
  int8x8_t v38;
  int8x16_t v39;
  uint16x8_t v40;
  unsigned __int32 *v41;
  uint64_t v42;

  v14 = a14;
  v15 = *result;
  v16 = *a3;
  v17 = *a2;
  if (a14 >= 4)
  {
    v18 = 0;
    if (a6)
      v19 = 0;
    else
      v19 = -1;
    v20.i64[0] = 0xFF000000FFLL;
    v20.i64[1] = 0xFF000000FFLL;
    a9 = vandq_s8(vdupq_n_s8(v19), v20);
    if (a7)
      v21 = 0;
    else
      v21 = -1;
    v22 = vandq_s8(vdupq_n_s8(v21), v20);
    v23 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v24 = vorrq_s8(*(int8x16_t *)&v15[v18], a9);
      v25 = vorrq_s8(*(int8x16_t *)&v17[v18], v22);
      v26 = (uint8x16_t)vbicq_s8(v25, vceqzq_s8(vqtbl1q_s8(v25, (int8x16_t)xmmword_185005170)));
      v27 = vminq_u16(vmull_u8(*(uint8x8_t *)v24.i8, *(uint8x8_t *)v26.i8), v23);
      v28 = vminq_u16(vmull_high_u8((uint8x16_t)v24, v26), v23);
      a13 = vbslq_s8(vceqzq_s8(vqtbl1q_s8(v24, (int8x16_t)xmmword_185005170)), v25, (int8x16_t)vqaddq_u8(vqsubq_u8((uint8x16_t)v24, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v27, v27, 8uLL), 8uLL), vrsraq_n_u16(v28, v28, 8uLL), 8uLL)), v26));
      *(int8x16_t *)&v17[v18] = a13;
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    v17 = (_DWORD *)((char *)v17 + v18 * 4);
    v15 = (unsigned __int32 *)((char *)v15 + v18 * 4);
  }
  v29 = v14 + a8;
  if (v29)
  {
    if (a6)
      v30 = 0;
    else
      v30 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v30), (int8x8_t)0xFF000000FFLL);
    if (a7)
      v31 = 0;
    else
      v31 = -1;
    v32 = vand_s8(vdup_n_s8(v31), (int8x8_t)0xFF000000FFLL);
    v33 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v15;
      v34 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v35) = v34.i8[0];
      BYTE1(v35) = v34.i8[2];
      BYTE2(v35) = v34.i8[4];
      HIBYTE(v35) = v34.i8[6];
      v34.i32[0] = *v17;
      v36 = vmovl_u8(*(uint8x8_t *)v34.i8);
      LOBYTE(v37) = v36.i8[0];
      BYTE1(v37) = v36.i8[2];
      BYTE2(v37) = v36.i8[4];
      HIBYTE(v37) = v36.i8[6];
      *(int8x8_t *)v36.i8 = vorr_s8((int8x8_t)v35, *(int8x8_t *)a9.i8);
      v38 = vorr_s8((int8x8_t)v37, v32);
      *(int8x8_t *)v39.i8 = v38;
      v39.u64[1] = (unint64_t)v38;
      *(int8x8_t *)v39.i8 = vbic_s8(v38, vceqz_s8(vqtbl1_s8(v39, (int8x8_t)0x404040400000000)));
      v40 = vminq_u16(vmull_u8(*(uint8x8_t *)v36.i8, *(uint8x8_t *)v39.i8), v33);
      a13.i64[1] = v36.i64[0];
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(vqtbl1_s8(a13, (int8x8_t)0x404040400000000)), v38, (int8x8_t)vqadd_u8(vqsub_u8(*(uint8x8_t *)v36.i8, vqrshrn_n_u16(vrsraq_n_u16(v40, v40, 8uLL), 8uLL)), *(uint8x8_t *)v39.i8));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a13, a9));
      *v17 = a13.i32[0];
      v41 = &v15[a5];
      if ((unint64_t)v41 >= v16)
        v42 = -(uint64_t)a4;
      else
        v42 = 0;
      v15 = &v41[v42];
      v17 += a5;
      --v29;
    }
    while (v29);
  }
  *result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)15,_argb8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, double a13, int8x16_t a14, unint64_t a15)
{
  unint64_t v15;
  unsigned __int32 *v16;
  unint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  unsigned int v20;
  int8x16_t v21;
  unsigned int v22;
  int8x16_t v23;
  uint16x8_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  uint8x16_t v31;
  uint8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  int8x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  unsigned int v44;
  unsigned int v45;
  int8x8_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x8_t v49;
  int8x8_t v50;
  int8x16_t v51;
  uint16x8_t v52;
  unsigned __int32 *v53;
  uint64_t v54;

  v15 = a15;
  v16 = *result;
  v17 = *a3;
  v18 = *a2;
  if (a15 >= 4)
  {
    v19 = 0;
    if (a6)
      v20 = 0;
    else
      v20 = -1;
    v21.i64[0] = 0xFF000000FFLL;
    v21.i64[1] = 0xFF000000FFLL;
    a9 = vandq_s8(vdupq_n_s8(v20), v21);
    if (a7)
      v22 = 0;
    else
      v22 = -1;
    v23 = vandq_s8(vdupq_n_s8(v22), v21);
    v24 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v25 = vorrq_s8(*(int8x16_t *)&v16[v19], a9);
      v26 = vorrq_s8(*(int8x16_t *)&v18[v19], v23);
      v27 = vqtbl1q_s8(v25, (int8x16_t)xmmword_185005170);
      v28 = vqtbl1q_s8(v26, (int8x16_t)xmmword_185005170);
      v29 = (int8x16_t)vminq_u8((uint8x16_t)v25, (uint8x16_t)v27);
      v30 = (int8x16_t)vminq_u8((uint8x16_t)v26, (uint8x16_t)v28);
      v31 = (uint8x16_t)vsubq_s8(v27, v29);
      v32 = (uint8x16_t)vsubq_s8(v28, v30);
      v33 = (int8x16_t)vcgtq_u8(vrhaddq_u8((uint8x16_t)v28, (uint8x16_t)0), (uint8x16_t)v30);
      v34 = (int8x16_t)vqaddq_u16(vmull_u8(*(uint8x8_t *)v31.i8, *(uint8x8_t *)v30.i8), vmull_u8(*(uint8x8_t *)v32.i8, *(uint8x8_t *)v29.i8));
      v35 = (int8x16_t)vqaddq_u16(vmull_high_u8(v31, (uint8x16_t)v30), vmull_high_u8(v32, (uint8x16_t)v29));
      v36 = vminq_u16((uint16x8_t)vbslq_s8((int8x16_t)vmovl_s8(*(int8x8_t *)v33.i8), v34, (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)v27.i8, *(uint8x8_t *)v28.i8), (uint16x8_t)v34)), v24);
      v37 = vminq_u16((uint16x8_t)vbslq_s8((int8x16_t)vmovl_high_s8(v33), v35, (int8x16_t)vqsubq_u16(vmull_high_u8((uint8x16_t)v27, (uint8x16_t)v28), (uint16x8_t)v35)), v24);
      a14 = vbslq_s8(vceqzq_s8(v27), v26, vbslq_s8(vceqzq_s8(v28), v25, vsubq_s8(vaddq_s8(v30, v29), (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v36, v36, 8uLL), 8uLL), vrsraq_n_u16(v37, v37, 8uLL), 8uLL))));
      *(int8x16_t *)&v18[v19] = a14;
      v15 -= 4;
      v19 += 4 * a5;
    }
    while (v15 > 3);
    v18 = (_DWORD *)((char *)v18 + v19 * 4);
    v16 = (unsigned __int32 *)((char *)v16 + v19 * 4);
  }
  v38 = v15 + a8;
  if (v38)
  {
    if (a6)
      v39 = 0;
    else
      v39 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v39), (int8x8_t)0xFF000000FFLL);
    if (a7)
      v40 = 0;
    else
      v40 = -1;
    v41 = vand_s8(vdup_n_s8(v40), (int8x8_t)0xFF000000FFLL);
    v42 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a14.i32[0] = *v16;
      v43 = vmovl_u8(*(uint8x8_t *)a14.i8);
      LOBYTE(v44) = v43.i8[0];
      BYTE1(v44) = v43.i8[2];
      BYTE2(v44) = v43.i8[4];
      HIBYTE(v44) = v43.i8[6];
      v43.i32[0] = *v18;
      a14 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v43.i8);
      LOBYTE(v45) = a14.i8[0];
      BYTE1(v45) = a14.i8[2];
      BYTE2(v45) = a14.i8[4];
      HIBYTE(v45) = a14.i8[6];
      *(int8x8_t *)a14.i8 = vorr_s8((int8x8_t)v44, *(int8x8_t *)a9.i8);
      v46 = vorr_s8((int8x8_t)v45, v41);
      v47.i64[0] = a14.i64[0];
      v47.i64[1] = a14.i64[0];
      *(int8x8_t *)v47.i8 = vqtbl1_s8(v47, (int8x8_t)0x404040400000000);
      *(int8x8_t *)v48.i8 = v46;
      v48.u64[1] = (unint64_t)v46;
      *(int8x8_t *)v48.i8 = vqtbl1_s8(v48, (int8x8_t)0x404040400000000);
      v49 = (int8x8_t)vmin_u8(*(uint8x8_t *)a14.i8, *(uint8x8_t *)v47.i8);
      v50 = (int8x8_t)vmin_u8((uint8x8_t)v46, *(uint8x8_t *)v48.i8);
      v51 = (int8x16_t)vqaddq_u16(vmull_u8((uint8x8_t)vsub_s8(*(int8x8_t *)v47.i8, v49), (uint8x8_t)v50), vmull_u8((uint8x8_t)vsub_s8(*(int8x8_t *)v48.i8, v50), (uint8x8_t)v49));
      v52 = vminq_u16((uint16x8_t)vbslq_s8((int8x16_t)vmovl_s8((int8x8_t)vcgt_u8(vrhadd_u8(*(uint8x8_t *)v48.i8, 0), (uint8x8_t)v50)), v51, (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v48.i8), (uint16x8_t)v51)), v42);
      *(int8x8_t *)a14.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v47.i8), v46, vbsl_s8(vceqz_s8(*(int8x8_t *)v48.i8), *(int8x8_t *)a14.i8, vsub_s8(vadd_s8(v50, v49), (int8x8_t)vqrshrn_n_u16(vrsraq_n_u16(v52, v52, 8uLL), 8uLL))));
      *(int8x8_t *)a14.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a14, a9));
      *v18 = a14.i32[0];
      v53 = &v16[a5];
      if ((unint64_t)v53 >= v17)
        v54 = -(uint64_t)a4;
      else
        v54 = 0;
      v16 = &v53[v54];
      v18 += a5;
      --v38;
    }
    while (v38);
  }
  *result = v16;
  *a3 = v17;
  *a2 = v18;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)16,_argb8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, int8x16_t a13, unint64_t a14)
{
  unint64_t v14;
  unsigned __int32 *v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  int8x16_t v20;
  unsigned int v21;
  int8x16_t v22;
  uint16x8_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  uint8x16_t v28;
  uint8x16_t v29;
  uint16x8_t v30;
  uint8x16_t v31;
  uint16x8_t v32;
  uint8x16_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int8x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  unsigned int v43;
  unsigned int v44;
  int8x8_t v45;
  int8x16_t v46;
  int8x16_t v47;
  uint8x8_t v48;
  uint8x8_t v49;
  uint16x8_t v50;
  unsigned __int32 *v51;
  uint64_t v52;

  v14 = a14;
  v15 = *result;
  v16 = *a3;
  v17 = *a2;
  if (a14 >= 4)
  {
    v18 = 0;
    if (a6)
      v19 = 0;
    else
      v19 = -1;
    v20.i64[0] = 0xFF000000FFLL;
    v20.i64[1] = 0xFF000000FFLL;
    a9 = vandq_s8(vdupq_n_s8(v19), v20);
    if (a7)
      v21 = 0;
    else
      v21 = -1;
    v22 = vandq_s8(vdupq_n_s8(v21), v20);
    v23 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v24 = vorrq_s8(*(int8x16_t *)&v15[v18], a9);
      v25 = vorrq_s8(*(int8x16_t *)&v17[v18], v22);
      v26 = vqtbl1q_s8(v24, (int8x16_t)xmmword_185005170);
      v27 = vqtbl1q_s8(v25, (int8x16_t)xmmword_185005170);
      v28 = vminq_u8((uint8x16_t)v24, (uint8x16_t)v26);
      v29 = vminq_u8((uint8x16_t)v25, (uint8x16_t)v27);
      v30 = vmull_u8(*(uint8x8_t *)v28.i8, *(uint8x8_t *)v27.i8);
      v31 = (uint8x16_t)vmvnq_s8(v27);
      v32 = vmull_u8(*(uint8x8_t *)v28.i8, *(uint8x8_t *)v31.i8);
      v33 = (uint8x16_t)vmvnq_s8(v26);
      v34 = vqaddq_u16(vqaddq_u16(vminq_u16(vmull_high_u8(v29, (uint8x16_t)v26), vmull_high_u8(v28, (uint8x16_t)v27)), vmull_high_u8(v28, v31)), vmull_high_u8(v29, v33));
      v35 = vminq_u16(vqaddq_u16(vqaddq_u16(vminq_u16(vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v26.i8), v30), v32), vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v33.i8)), v23);
      v36 = vminq_u16(v34, v23);
      a13 = vbslq_s8(vceqzq_s8(v26), v25, vbslq_s8(vceqzq_s8(v27), v24, (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v35, v35, 8uLL), 8uLL), vrsraq_n_u16(v36, v36, 8uLL), 8uLL)));
      *(int8x16_t *)&v17[v18] = a13;
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    v17 = (_DWORD *)((char *)v17 + v18 * 4);
    v15 = (unsigned __int32 *)((char *)v15 + v18 * 4);
  }
  v37 = v14 + a8;
  if (v37)
  {
    if (a6)
      v38 = 0;
    else
      v38 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v38), (int8x8_t)0xFF000000FFLL);
    if (a7)
      v39 = 0;
    else
      v39 = -1;
    v40 = vand_s8(vdup_n_s8(v39), (int8x8_t)0xFF000000FFLL);
    v41 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v15;
      v42 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v43) = v42.i8[0];
      BYTE1(v43) = v42.i8[2];
      BYTE2(v43) = v42.i8[4];
      HIBYTE(v43) = v42.i8[6];
      v42.i32[0] = *v17;
      a13 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v42.i8);
      LOBYTE(v44) = a13.i8[0];
      BYTE1(v44) = a13.i8[2];
      BYTE2(v44) = a13.i8[4];
      HIBYTE(v44) = a13.i8[6];
      *(int8x8_t *)a13.i8 = vorr_s8((int8x8_t)v43, *(int8x8_t *)a9.i8);
      v45 = vorr_s8((int8x8_t)v44, v40);
      v46.i64[0] = a13.i64[0];
      v46.i64[1] = a13.i64[0];
      *(int8x8_t *)v46.i8 = vqtbl1_s8(v46, (int8x8_t)0x404040400000000);
      *(int8x8_t *)v47.i8 = v45;
      v47.u64[1] = (unint64_t)v45;
      *(int8x8_t *)v47.i8 = vqtbl1_s8(v47, (int8x8_t)0x404040400000000);
      v48 = vmin_u8(*(uint8x8_t *)a13.i8, *(uint8x8_t *)v46.i8);
      v49 = vmin_u8((uint8x8_t)v45, *(uint8x8_t *)v47.i8);
      v50 = vminq_u16(vqaddq_u16(vqaddq_u16(vminq_u16(vmull_u8(v48, *(uint8x8_t *)v47.i8), vmull_u8(v49, *(uint8x8_t *)v46.i8)), vmull_u8(v48, (uint8x8_t)vmvn_s8(*(int8x8_t *)v47.i8))), vmull_u8(v49, (uint8x8_t)vmvn_s8(*(int8x8_t *)v46.i8))), v41);
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v46.i8), v45, vbsl_s8(vceqz_s8(*(int8x8_t *)v47.i8), *(int8x8_t *)a13.i8, (int8x8_t)vqrshrn_n_u16(vrsraq_n_u16(v50, v50, 8uLL), 8uLL)));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a13, a9));
      *v17 = a13.i32[0];
      v51 = &v15[a5];
      if ((unint64_t)v51 >= v16)
        v52 = -(uint64_t)a4;
      else
        v52 = 0;
      v15 = &v51[v52];
      v17 += a5;
      --v37;
    }
    while (v37);
  }
  *result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)17,_argb8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, int8x16_t a13, unint64_t a14)
{
  unint64_t v14;
  unsigned __int32 *v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  int8x16_t v20;
  unsigned int v21;
  int8x16_t v22;
  uint16x8_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  uint8x16_t v28;
  uint8x16_t v29;
  uint16x8_t v30;
  uint8x16_t v31;
  uint16x8_t v32;
  uint8x16_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int8x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  unsigned int v43;
  unsigned int v44;
  int8x8_t v45;
  int8x16_t v46;
  int8x16_t v47;
  uint8x8_t v48;
  uint8x8_t v49;
  uint16x8_t v50;
  unsigned __int32 *v51;
  uint64_t v52;

  v14 = a14;
  v15 = *result;
  v16 = *a3;
  v17 = *a2;
  if (a14 >= 4)
  {
    v18 = 0;
    if (a6)
      v19 = 0;
    else
      v19 = -1;
    v20.i64[0] = 0xFF000000FFLL;
    v20.i64[1] = 0xFF000000FFLL;
    a9 = vandq_s8(vdupq_n_s8(v19), v20);
    if (a7)
      v21 = 0;
    else
      v21 = -1;
    v22 = vandq_s8(vdupq_n_s8(v21), v20);
    v23 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v24 = vorrq_s8(*(int8x16_t *)&v15[v18], a9);
      v25 = vorrq_s8(*(int8x16_t *)&v17[v18], v22);
      v26 = vqtbl1q_s8(v24, (int8x16_t)xmmword_185005170);
      v27 = vqtbl1q_s8(v25, (int8x16_t)xmmword_185005170);
      v28 = vminq_u8((uint8x16_t)v24, (uint8x16_t)v26);
      v29 = vminq_u8((uint8x16_t)v25, (uint8x16_t)v27);
      v30 = vmull_u8(*(uint8x8_t *)v28.i8, *(uint8x8_t *)v27.i8);
      v31 = (uint8x16_t)vmvnq_s8(v27);
      v32 = vmull_u8(*(uint8x8_t *)v28.i8, *(uint8x8_t *)v31.i8);
      v33 = (uint8x16_t)vmvnq_s8(v26);
      v34 = vqaddq_u16(vqaddq_u16(vmaxq_u16(vmull_high_u8(v28, (uint8x16_t)v27), vmull_high_u8(v29, (uint8x16_t)v26)), vmull_high_u8(v28, v31)), vmull_high_u8(v29, v33));
      v35 = vminq_u16(vqaddq_u16(vqaddq_u16(vmaxq_u16(v30, vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v26.i8)), v32), vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v33.i8)), v23);
      v36 = vminq_u16(v34, v23);
      a13 = vbslq_s8(vceqzq_s8(v26), v25, vbslq_s8(vceqzq_s8(v27), v24, (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v35, v35, 8uLL), 8uLL), vrsraq_n_u16(v36, v36, 8uLL), 8uLL)));
      *(int8x16_t *)&v17[v18] = a13;
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    v17 = (_DWORD *)((char *)v17 + v18 * 4);
    v15 = (unsigned __int32 *)((char *)v15 + v18 * 4);
  }
  v37 = v14 + a8;
  if (v37)
  {
    if (a6)
      v38 = 0;
    else
      v38 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v38), (int8x8_t)0xFF000000FFLL);
    if (a7)
      v39 = 0;
    else
      v39 = -1;
    v40 = vand_s8(vdup_n_s8(v39), (int8x8_t)0xFF000000FFLL);
    v41 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v15;
      v42 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v43) = v42.i8[0];
      BYTE1(v43) = v42.i8[2];
      BYTE2(v43) = v42.i8[4];
      HIBYTE(v43) = v42.i8[6];
      v42.i32[0] = *v17;
      a13 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v42.i8);
      LOBYTE(v44) = a13.i8[0];
      BYTE1(v44) = a13.i8[2];
      BYTE2(v44) = a13.i8[4];
      HIBYTE(v44) = a13.i8[6];
      *(int8x8_t *)a13.i8 = vorr_s8((int8x8_t)v43, *(int8x8_t *)a9.i8);
      v45 = vorr_s8((int8x8_t)v44, v40);
      v46.i64[0] = a13.i64[0];
      v46.i64[1] = a13.i64[0];
      *(int8x8_t *)v46.i8 = vqtbl1_s8(v46, (int8x8_t)0x404040400000000);
      *(int8x8_t *)v47.i8 = v45;
      v47.u64[1] = (unint64_t)v45;
      *(int8x8_t *)v47.i8 = vqtbl1_s8(v47, (int8x8_t)0x404040400000000);
      v48 = vmin_u8(*(uint8x8_t *)a13.i8, *(uint8x8_t *)v46.i8);
      v49 = vmin_u8((uint8x8_t)v45, *(uint8x8_t *)v47.i8);
      v50 = vminq_u16(vqaddq_u16(vqaddq_u16(vmaxq_u16(vmull_u8(v48, *(uint8x8_t *)v47.i8), vmull_u8(v49, *(uint8x8_t *)v46.i8)), vmull_u8(v48, (uint8x8_t)vmvn_s8(*(int8x8_t *)v47.i8))), vmull_u8(v49, (uint8x8_t)vmvn_s8(*(int8x8_t *)v46.i8))), v41);
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v46.i8), v45, vbsl_s8(vceqz_s8(*(int8x8_t *)v47.i8), *(int8x8_t *)a13.i8, (int8x8_t)vqrshrn_n_u16(vrsraq_n_u16(v50, v50, 8uLL), 8uLL)));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a13, a9));
      *v17 = a13.i32[0];
      v51 = &v15[a5];
      if ((unint64_t)v51 >= v16)
        v52 = -(uint64_t)a4;
      else
        v52 = 0;
      v15 = &v51[v52];
      v17 += a5;
      --v37;
    }
    while (v37);
  }
  *result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

_DWORD **vec::template_mark_pixelshape_row<(CGCompositeOperation)18,_argb8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, uint8x8_t a13, unint64_t a14)
{
  unint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  int8x16_t v20;
  unsigned int v21;
  int8x16_t v22;
  uint16x8_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  uint8x16_t v28;
  int8x16_t v29;
  uint8x16_t v30;
  uint16x8_t v31;
  unsigned __int128 v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  uint64_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  int8x8_t v39;
  int8x16_t v40;
  int8x16_t v41;
  uint8x16_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  int8x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  unsigned int v54;
  int8x16_t v55;
  unsigned int v56;
  int8x8_t v57;
  int8x16_t v58;
  int8x16_t v59;
  uint8x8_t v60;
  int8x8_t v61;
  uint16x8_t v62;
  int8x16_t v63;
  int8x8_t v64;
  uint16x8_t v65;
  uint16x8_t v66;
  uint16x8_t v67;
  uint8x8_t v68;
  _DWORD *v69;
  uint64_t v70;
  int8x16x2_t v71;

  v14 = a14;
  v15 = *result;
  v16 = *a3;
  v17 = *a2;
  if (a14 >= 4)
  {
    v18 = 0;
    if (a6)
      v19 = 0;
    else
      v19 = -1;
    v20.i64[0] = 0xFF000000FFLL;
    v20.i64[1] = 0xFF000000FFLL;
    a9 = vandq_s8(vdupq_n_s8(v19), v20);
    if (a7)
      v21 = 0;
    else
      v21 = -1;
    v22 = vandq_s8(vdupq_n_s8(v21), v20);
    v23 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    a13.i32[1] = 67372036;
    do
    {
      v24 = vorrq_s8(*(int8x16_t *)&v15[v18], a9);
      v25 = vorrq_s8(*(int8x16_t *)&v17[v18], v22);
      v26 = vqtbl1q_s8(v24, (int8x16_t)xmmword_185005170);
      v27 = vqtbl1q_s8(v25, (int8x16_t)xmmword_185005170);
      v28 = vminq_u8((uint8x16_t)v24, (uint8x16_t)v26);
      v29 = (int8x16_t)vminq_u8((uint8x16_t)v25, (uint8x16_t)v27);
      v30 = (uint8x16_t)vmvnq_s8(v27);
      v31 = vmull_u8(*(uint8x8_t *)v28.i8, *(uint8x8_t *)v30.i8);
      v71.val[1] = (int8x16_t)vmull_high_u8(v28, v30);
      v32 = *(_OWORD *)&v28 & __PAIR128__(0xFFFFFF00FFFFFF00, 0xFFFFFF00FFFFFF00);
      v33 = vbicq_s8(vtstq_s8(v29, v29), (int8x16_t)vcgtq_u8((uint8x16_t)v26, (uint8x16_t)v32));
      v34 = vorrq_s8((int8x16_t)vqsubq_u8((uint8x16_t)v26, (uint8x16_t)v32), vceqzq_s8(v29));
      v35 = *(_QWORD *)&vzip1_s8(*(int8x8_t *)v34.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
      v36 = *(_QWORD *)&vzip2_s8(*(int8x8_t *)v34.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
      v34.i64[0] = vextq_s8(v34, v34, 8uLL).u64[0];
      v37 = vmull_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v26.i8);
      v38 = vmull_high_u8((uint8x16_t)v26, (uint8x16_t)v26);
      v39 = (int8x8_t)vextq_s8(v29, v29, 8uLL).u64[0];
      v40 = (int8x16_t)vqmovun_high_s32(vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v29.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v37.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v35))))), vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v29.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_high_u16(v37))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v36)))));
      v41 = (int8x16_t)vqmovun_high_s32(vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v39, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v38.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v34.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v39, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_high_u16(v38))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v34.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))))));
      v42 = (uint8x16_t)vmvnq_s8(v26);
      v43 = vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v42.i8);
      v44 = vmull_high_u8((uint8x16_t)v29, v42);
      v45 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vorrq_s8(v40, (int8x16_t)vmovl_s8(*(int8x8_t *)v33.i8)), v43), v31), v23);
      v46 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vorrq_s8(v41, (int8x16_t)vmovl_high_s8(v33)), v44), (uint16x8_t)v71.val[1]), v23);
      v71.val[0] = (int8x16_t)vrsraq_n_u16(v45, v45, 8uLL);
      v47 = vrsraq_n_u16(v46, v46, 8uLL);
      *(uint8x8_t *)v71.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v71.val[0], 8uLL);
      *(uint8x8_t *)v71.val[1].i8 = vqrshrn_n_u16(v47, 8uLL);
      *(int8x16_t *)&v17[v18] = vbslq_s8(vceqzq_s8(v26), v25, vbslq_s8(vceqzq_s8(v27), v24, (int8x16_t)vminq_u8(vqrshrn_high_n_u16(*(uint8x8_t *)v71.val[0].i8, v47, 8uLL), (uint8x16_t)vqtbl2q_s8(v71, (int8x16_t)xmmword_185005180))));
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    v17 = (_DWORD *)((char *)v17 + v18 * 4);
    v15 = (_DWORD *)((char *)v15 + v18 * 4);
  }
  v48 = v14 + a8;
  if (v48)
  {
    if (a6)
      v49 = 0;
    else
      v49 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v49), (int8x8_t)0xFF000000FFLL);
    if (a7)
      v50 = 0;
    else
      v50 = -1;
    v51 = vand_s8(vdup_n_s8(v50), (int8x8_t)0xFF000000FFLL);
    v52 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v15;
      v53 = vmovl_u8(a13);
      LOBYTE(v54) = v53.i8[0];
      BYTE1(v54) = v53.i8[2];
      BYTE2(v54) = v53.i8[4];
      HIBYTE(v54) = v53.i8[6];
      v53.i32[0] = *v17;
      v55 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v53.i8);
      LOBYTE(v56) = v55.i8[0];
      BYTE1(v56) = v55.i8[2];
      BYTE2(v56) = v55.i8[4];
      HIBYTE(v56) = v55.i8[6];
      *(int8x8_t *)v55.i8 = vorr_s8((int8x8_t)v54, *(int8x8_t *)a9.i8);
      v57 = vorr_s8((int8x8_t)v56, v51);
      v58.i64[0] = v55.i64[0];
      v58.i64[1] = v55.i64[0];
      *(int8x8_t *)v58.i8 = vqtbl1_s8(v58, (int8x8_t)0x404040400000000);
      *(int8x8_t *)v59.i8 = v57;
      v59.u64[1] = (unint64_t)v57;
      *(int8x8_t *)v59.i8 = vqtbl1_s8(v59, (int8x8_t)0x404040400000000);
      v60 = vmin_u8(*(uint8x8_t *)v55.i8, *(uint8x8_t *)v58.i8);
      v61 = (int8x8_t)vmin_u8((uint8x8_t)v57, *(uint8x8_t *)v59.i8);
      v62 = vmull_u8(v60, (uint8x8_t)vmvn_s8(*(int8x8_t *)v59.i8));
      *(_QWORD *)&v60 &= 0xFFFFFF00FFFFFF00;
      v63 = (int8x16_t)vmovl_s8(vbic_s8(vtst_s8(v61, v61), (int8x8_t)vcgt_u8(*(uint8x8_t *)v58.i8, v60)));
      v64 = vorr_s8((int8x8_t)vqsub_u8(*(uint8x8_t *)v58.i8, v60), vceqz_s8(v61));
      v65 = vmull_u8(*(uint8x8_t *)v58.i8, *(uint8x8_t *)v58.i8);
      v66 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vorrq_s8((int8x16_t)vqmovun_high_s32(vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v61, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v65.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v64, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v61, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))), vcvtq_f32_u32(vmovl_high_u16(v65))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v64, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))),
                                v63),
                  vmull_u8((uint8x8_t)v61, (uint8x8_t)vmvn_s8(*(int8x8_t *)v58.i8))),
                v62),
              v52);
      v67 = vrsraq_n_u16(v66, v66, 8uLL);
      v68 = vqrshrn_n_u16(v67, 8uLL);
      *(int8x8_t *)v55.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v58.i8), v57, vbsl_s8(vceqz_s8(*(int8x8_t *)v59.i8), *(int8x8_t *)v55.i8, (int8x8_t)vmin_u8(v68, (uint8x8_t)vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16(v68, v67, 8uLL), (int8x8_t)0x404040400000000))));
      a13 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v55, a9));
      *v17 = a13.i32[0];
      v69 = &v15[a5];
      if ((unint64_t)v69 >= v16)
        v70 = -(uint64_t)a4;
      else
        v70 = 0;
      v15 = &v69[v70];
      v17 += a5;
      --v48;
    }
    while (v48);
  }
  *result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

_DWORD **vec::template_mark_pixelshape_row<(CGCompositeOperation)19,_argb8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, uint8x8_t a13, unint64_t a14)
{
  unint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  int8x16_t v20;
  unsigned int v21;
  int8x16_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint8x16_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x8_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  int8x8_t v38;
  uint64_t v39;
  uint64_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint8x16_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint8x16_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  int16x8_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  int8x8_t v53;
  float32x4_t v54;
  uint16x8_t v55;
  unsigned int v56;
  int8x16_t v57;
  unsigned int v58;
  int8x8_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x8_t v62;
  uint8x8_t v63;
  int8x8_t v64;
  float32x4_t v65;
  float32x4_t v66;
  uint16x8_t v67;
  uint64_t v68;
  uint64_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  int16x8_t v73;
  _DWORD *v74;
  uint64_t v75;
  int8x16x2_t v76;

  v14 = a14;
  v15 = *result;
  v16 = *a3;
  v17 = *a2;
  if (a14 >= 4)
  {
    v18 = 0;
    if (a6)
      v19 = 0;
    else
      v19 = -1;
    v20.i64[0] = 0xFF000000FFLL;
    v20.i64[1] = 0xFF000000FFLL;
    a9 = vandq_s8(vdupq_n_s8(v19), v20);
    if (a7)
      v21 = 0;
    else
      v21 = -1;
    v22 = vandq_s8(vdupq_n_s8(v21), v20);
    v23 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    a13.i32[1] = 67372036;
    do
    {
      v24 = vorrq_s8(*(int8x16_t *)&v15[v18], a9);
      v25 = vorrq_s8(*(int8x16_t *)&v17[v18], v22);
      v26 = vqtbl1q_s8(v24, (int8x16_t)xmmword_185005170);
      v27 = vqtbl1q_s8(v25, (int8x16_t)xmmword_185005170);
      v28 = (int8x16_t)vminq_u8((uint8x16_t)v24, (uint8x16_t)v26);
      v29 = vminq_u8((uint8x16_t)v25, (uint8x16_t)v27);
      v30 = (int8x16_t)vqsubq_u8((uint8x16_t)v27, v29);
      v31 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v30.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
      v32 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v30.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
      v33 = (int8x8_t)vextq_s8(v30, v30, 8uLL).u64[0];
      v34 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v33, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
      v35 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v33, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
      v36 = vmull_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v26.i8);
      v37 = vmull_high_u8((uint8x16_t)v26, (uint8x16_t)v26);
      v38 = (int8x8_t)vextq_s8(v28, v28, 8uLL).u64[0];
      v39 = *(_QWORD *)&vzip2_s8(*(int8x8_t *)v28.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
      v40 = *(_QWORD *)&vzip1_s8(*(int8x8_t *)v28.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
      v41 = vmull_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v27.i8);
      v42 = vmull_high_u8((uint8x16_t)v26, (uint8x16_t)v27);
      v43 = (uint8x16_t)vmvnq_s8(v26);
      v44 = vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v43.i8);
      v45 = vmull_high_u8(v29, v43);
      v46 = (uint8x16_t)vmvnq_s8(v27);
      v47 = vmull_u8(*(uint8x8_t *)v28.i8, *(uint8x8_t *)v46.i8);
      v48 = vmull_high_u8((uint8x16_t)v28, v46);
      v76.val[1] = (int8x16_t)vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v44)), vcvtq_f32_u32(vmovl_high_u16(v47))), vcvtq_f32_u32(vmovl_high_u16(v41))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v32, vcvtq_f32_u32(vmovl_high_u16(v36))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v39))), (int8x16_t)vceqzq_f32(v32))), v23));
      v76.val[0] = (int8x16_t)vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v44.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v47.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v41.i8))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v31, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v36.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v40))), (int8x16_t)vceqzq_f32(v31))), v23))), (int32x4_t)v76.val[1]);
      *(int8x8_t *)v76.val[0].i8 = vqmovun_s16((int16x8_t)v76.val[0]);
      v49 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v45.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v48.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v42.i8))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v34, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v37.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v38, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))), (int8x16_t)vceqzq_f32(v34))), v23))), vcvtnq_s32_f32(vmulq_f32(
                  vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v45)), vcvtq_f32_u32(vmovl_high_u16(v48))), vcvtq_f32_u32(vmovl_high_u16(v42))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v35, vcvtq_f32_u32(vmovl_high_u16(v37))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v38, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))), (int8x16_t)vceqzq_f32(v35))), v23)));
      *(int8x8_t *)v76.val[1].i8 = vqmovun_s16(v49);
      *(int8x16_t *)&v17[v18] = vbslq_s8(vceqzq_s8(v26), v25, vbslq_s8(vceqzq_s8(v27), v24, (int8x16_t)vminq_u8((uint8x16_t)vqmovun_high_s16(*(int8x8_t *)v76.val[0].i8, v49), (uint8x16_t)vqtbl2q_s8(v76, (int8x16_t)xmmword_185005180))));
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    v17 = (_DWORD *)((char *)v17 + v18 * 4);
    v15 = (_DWORD *)((char *)v15 + v18 * 4);
  }
  v50 = v14 + a8;
  if (v50)
  {
    if (a6)
      v51 = 0;
    else
      v51 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v51), (int8x8_t)0xFF000000FFLL);
    if (a7)
      v52 = 0;
    else
      v52 = -1;
    v53 = vand_s8(vdup_n_s8(v52), (int8x8_t)0xFF000000FFLL);
    v54 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    do
    {
      a13.i32[0] = *v15;
      v55 = vmovl_u8(a13);
      LOBYTE(v56) = v55.i8[0];
      BYTE1(v56) = v55.i8[2];
      BYTE2(v56) = v55.i8[4];
      HIBYTE(v56) = v55.i8[6];
      v55.i32[0] = *v17;
      v57 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v55.i8);
      LOBYTE(v58) = v57.i8[0];
      BYTE1(v58) = v57.i8[2];
      BYTE2(v58) = v57.i8[4];
      HIBYTE(v58) = v57.i8[6];
      v59 = vorr_s8((int8x8_t)v56, *(int8x8_t *)a9.i8);
      *(int8x8_t *)v57.i8 = vorr_s8((int8x8_t)v58, v53);
      *(int8x8_t *)v60.i8 = v59;
      v60.u64[1] = (unint64_t)v59;
      *(int8x8_t *)v60.i8 = vqtbl1_s8(v60, (int8x8_t)0x404040400000000);
      v61.i64[0] = v57.i64[0];
      v61.i64[1] = v57.i64[0];
      *(int8x8_t *)v61.i8 = vqtbl1_s8(v61, (int8x8_t)0x404040400000000);
      v62 = (int8x8_t)vmin_u8((uint8x8_t)v59, *(uint8x8_t *)v60.i8);
      v63 = vmin_u8(*(uint8x8_t *)v57.i8, *(uint8x8_t *)v61.i8);
      v64 = (int8x8_t)vqsub_u8(*(uint8x8_t *)v61.i8, v63);
      v65 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v64, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
      v66 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v64, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)));
      v67 = vmull_u8(*(uint8x8_t *)v60.i8, *(uint8x8_t *)v60.i8);
      v68 = *(_QWORD *)&vzip2_s8(v62, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
      v69 = *(_QWORD *)&vzip1_s8(v62, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL;
      v70 = vmull_u8(*(uint8x8_t *)v60.i8, *(uint8x8_t *)v61.i8);
      v71 = vmull_u8(v63, (uint8x8_t)vmvn_s8(*(int8x8_t *)v60.i8));
      v72 = vmull_u8((uint8x8_t)v62, (uint8x8_t)vmvn_s8(*(int8x8_t *)v61.i8));
      v73 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v71.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v72.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v70.i8))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v65, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v67.i8))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v69))), (int8x16_t)vceqzq_f32(v65))), v54))), vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(
                      vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v71)), vcvtq_f32_u32(vmovl_high_u16(v72))),
                      vcvtq_f32_u32(vmovl_high_u16(v70))),
                    (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v66, vcvtq_f32_u32(vmovl_high_u16(v67))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v68))), (int8x16_t)vceqzq_f32(v66))), v54)));
      *(int8x8_t *)v71.i8 = vqmovun_s16(v73);
      *(int8x8_t *)v57.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v60.i8), *(int8x8_t *)v57.i8, vbsl_s8(vceqz_s8(*(int8x8_t *)v61.i8), v59, (int8x8_t)vmin_u8(*(uint8x8_t *)v71.i8, (uint8x8_t)vqtbl1_s8(vqmovun_high_s16(*(int8x8_t *)v71.i8, v73), (int8x8_t)0x404040400000000))));
      a13 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v57, a9));
      *v17 = a13.i32[0];
      v74 = &v15[a5];
      if ((unint64_t)v74 >= v16)
        v75 = -(uint64_t)a4;
      else
        v75 = 0;
      v15 = &v74[v75];
      v17 += a5;
      --v50;
    }
    while (v50);
  }
  *result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

_DWORD **vec::template_mark_pixelshape_row<(CGCompositeOperation)20,_argb8_t>(_DWORD **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, uint8x8_t a13, unint64_t a14)
{
  unint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  int8x16_t v20;
  unsigned int v21;
  int8x16_t v22;
  uint16x8_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  uint8x16_t v28;
  uint8x16_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  int8x8_t v32;
  int16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint8x16_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint8x16_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint8x16_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  int8x8_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  unsigned int v59;
  int8x16_t v60;
  unsigned int v61;
  int8x8_t v62;
  int8x16_t v63;
  int8x16_t v64;
  uint8x8_t v65;
  uint8x8_t v66;
  uint16x8_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  uint8x8_t v72;
  _DWORD *v73;
  uint64_t v74;
  int8x16x2_t v75;

  v14 = a14;
  v15 = *result;
  v16 = *a3;
  v17 = *a2;
  if (a14 >= 4)
  {
    v18 = 0;
    if (a6)
      v19 = 0;
    else
      v19 = -1;
    v20.i64[0] = 0xFF000000FFLL;
    v20.i64[1] = 0xFF000000FFLL;
    a9 = vandq_s8(vdupq_n_s8(v19), v20);
    if (a7)
      v21 = 0;
    else
      v21 = -1;
    v22 = vandq_s8(vdupq_n_s8(v21), v20);
    v23 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    a13.i32[1] = 67372036;
    do
    {
      v24 = vorrq_s8(*(int8x16_t *)&v15[v18], a9);
      v25 = vorrq_s8(*(int8x16_t *)&v17[v18], v22);
      v26 = vqtbl1q_s8(v24, (int8x16_t)xmmword_185005170);
      v27 = vqtbl1q_s8(v25, (int8x16_t)xmmword_185005170);
      v28 = vminq_u8((uint8x16_t)v24, (uint8x16_t)v26);
      v29 = vminq_u8((uint8x16_t)v25, (uint8x16_t)v27);
      v30 = vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v29.i8);
      v31 = vmull_high_u8(v29, v29);
      v32 = (int8x8_t)vextq_s8(v27, v27, 8uLL).u64[0];
      *(int8x8_t *)v30.i8 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v30.i8)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(*(int8x8_t *)v27.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_high_u16(v30)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(*(int8x8_t *)v27.i8, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))));
      v33 = vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v31.i8)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip1_s8(v32, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_high_u16(v31)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vzip2_s8(v32, *(int8x8_t *)a9.i8) & 0xFF00FF00FF00FFLL))))));
      v34 = vmull_u8(*(uint8x8_t *)v30.i8, *(uint8x8_t *)v26.i8);
      v35 = vmull_u8((uint8x8_t)vqmovun_s16(v33), (uint8x8_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL));
      v36 = vqsubq_u8(v29, (uint8x16_t)vqmovun_high_s16(*(int8x8_t *)v30.i8, v33));
      v37 = vmull_u8(*(uint8x8_t *)v36.i8, *(uint8x8_t *)v28.i8);
      v38 = vmull_high_u8(v36, v28);
      v39 = vqaddq_u16(v34, vqaddq_u16(v37, v37));
      v40 = vqaddq_u16(v35, vqaddq_u16(v38, v38));
      v41 = (uint8x16_t)vmvnq_s8(v26);
      v42 = vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v41.i8);
      v43 = vmull_high_u8(v29, v41);
      v44 = vqaddq_u16(v39, v42);
      v45 = vqaddq_u16(v40, v43);
      v46 = (uint8x16_t)vmvnq_s8(v27);
      v47 = vmull_u8(*(uint8x8_t *)v28.i8, *(uint8x8_t *)v46.i8);
      v48 = vmull_high_u8(v28, v46);
      v75.val[1] = (int8x16_t)vqaddq_u16(v44, v47);
      v49 = vqaddq_u16(v45, v48);
      v50 = vminq_u16((uint16x8_t)v75.val[1], v23);
      v51 = vminq_u16(v49, v23);
      v75.val[0] = (int8x16_t)vrsraq_n_u16(v50, v50, 8uLL);
      v52 = vrsraq_n_u16(v51, v51, 8uLL);
      *(uint8x8_t *)v75.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v75.val[0], 8uLL);
      *(uint8x8_t *)v75.val[1].i8 = vqrshrn_n_u16(v52, 8uLL);
      *(int8x16_t *)&v17[v18] = vbslq_s8(vceqzq_s8(v26), v25, vbslq_s8(vceqzq_s8(v27), v24, (int8x16_t)vminq_u8(vqrshrn_high_n_u16(*(uint8x8_t *)v75.val[0].i8, v52, 8uLL), (uint8x16_t)vqtbl2q_s8(v75, (int8x16_t)xmmword_185005180))));
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    v17 = (_DWORD *)((char *)v17 + v18 * 4);
    v15 = (_DWORD *)((char *)v15 + v18 * 4);
  }
  v53 = v14 + a8;
  if (v53)
  {
    if (a6)
      v54 = 0;
    else
      v54 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v54), (int8x8_t)0xFF000000FFLL);
    if (a7)
      v55 = 0;
    else
      v55 = -1;
    v56 = vand_s8(vdup_n_s8(v55), (int8x8_t)0xFF000000FFLL);
    v57 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v15;
      v58 = vmovl_u8(a13);
      LOBYTE(v59) = v58.i8[0];
      BYTE1(v59) = v58.i8[2];
      BYTE2(v59) = v58.i8[4];
      HIBYTE(v59) = v58.i8[6];
      v58.i32[0] = *v17;
      v60 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v58.i8);
      LOBYTE(v61) = v60.i8[0];
      BYTE1(v61) = v60.i8[2];
      BYTE2(v61) = v60.i8[4];
      HIBYTE(v61) = v60.i8[6];
      *(int8x8_t *)v60.i8 = vorr_s8((int8x8_t)v59, *(int8x8_t *)a9.i8);
      v62 = vorr_s8((int8x8_t)v61, v56);
      v63.i64[0] = v60.i64[0];
      v63.i64[1] = v60.i64[0];
      *(int8x8_t *)v63.i8 = vqtbl1_s8(v63, (int8x8_t)0x404040400000000);
      *(int8x8_t *)v64.i8 = v62;
      v64.u64[1] = (unint64_t)v62;
      *(int8x8_t *)v64.i8 = vqtbl1_s8(v64, (int8x8_t)0x404040400000000);
      v65 = vmin_u8(*(uint8x8_t *)v60.i8, *(uint8x8_t *)v63.i8);
      v66 = vmin_u8((uint8x8_t)v62, *(uint8x8_t *)v64.i8);
      v67 = vmull_u8(v66, v66);
      *(int8x8_t *)v67.i8 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v67.i8)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v62.u8[0]) & 0xFF00FF00FF00FFLL)))))), vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmovl_high_u16(v67)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v62.u8[4]) & 0xFF00FF00FF00FFLL)))))));
      v68 = vmull_u8(*(uint8x8_t *)v67.i8, *(uint8x8_t *)v63.i8);
      v69 = vmull_u8(vqsub_u8(v66, *(uint8x8_t *)v67.i8), v65);
      v70 = vminq_u16(vqaddq_u16(vqaddq_u16(vqaddq_u16(v68, vqaddq_u16(v69, v69)), vmull_u8(v66, (uint8x8_t)vmvn_s8(*(int8x8_t *)v63.i8))), vmull_u8(v65, (uint8x8_t)vmvn_s8(*(int8x8_t *)v64.i8))), v57);
      v71 = vrsraq_n_u16(v70, v70, 8uLL);
      v72 = vqrshrn_n_u16(v71, 8uLL);
      *(int8x8_t *)v60.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v63.i8), v62, vbsl_s8(vceqz_s8(*(int8x8_t *)v64.i8), *(int8x8_t *)v60.i8, (int8x8_t)vmin_u8(v72, (uint8x8_t)vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16(v72, v71, 8uLL), (int8x8_t)0x404040400000000))));
      a13 = (uint8x8_t)vmovn_s16((int16x8_t)vzip1q_s8(v60, a9));
      *v17 = a13.i32[0];
      v73 = &v15[a5];
      if ((unint64_t)v73 >= v16)
        v74 = -(uint64_t)a4;
      else
        v74 = 0;
      v15 = &v73[v74];
      v17 += a5;
      --v53;
    }
    while (v53);
  }
  *result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)21,_argb8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, double a13, int8x16_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  unsigned __int32 *v17;
  unint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  unsigned int v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  uint16x8_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  uint8x16_t v31;
  uint8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint8x16_t v37;
  uint8x16_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint8x16_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint8x16_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint8x16_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  int8x8_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  unsigned int v60;
  unsigned int v61;
  int8x8_t v62;
  int8x16_t v63;
  int8x16_t v64;
  uint8x8_t v65;
  uint8x8_t v66;
  uint16x8_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  uint16x8_t v70;
  uint8x8_t v71;
  unsigned __int32 *v72;
  uint64_t v73;
  int8x16x2_t v74;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  if (a15 >= 4)
  {
    v20 = 0;
    if (a6)
      v21 = 0;
    else
      v21 = -1;
    v22 = vdupq_n_s8(v21);
    v23.i64[0] = 0xFF000000FFLL;
    v23.i64[1] = 0xFF000000FFLL;
    if (a7)
      v24 = 0;
    else
      v24 = -1;
    a9 = vandq_s8(v22, v23);
    v25 = vandq_s8(vdupq_n_s8(v24), v23);
    v26 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    a14 = 0uLL;
    do
    {
      v27 = vorrq_s8(*(int8x16_t *)&v17[v20], a9);
      v28 = vorrq_s8(*(int8x16_t *)&v19[v20], v25);
      v29 = vqtbl1q_s8(v27, (int8x16_t)xmmword_185005170);
      v30 = vqtbl1q_s8(v28, (int8x16_t)xmmword_185005170);
      v31 = vminq_u8((uint8x16_t)v27, (uint8x16_t)v29);
      v32 = vminq_u8((uint8x16_t)v28, (uint8x16_t)v30);
      v33 = (int8x16_t)vcgeq_u8(vrhaddq_u8((uint8x16_t)v29, (uint8x16_t)0), v31);
      v34 = vzip1q_s8(v33, v33);
      v35 = vmull_u8(*(uint8x8_t *)v31.i8, *(uint8x8_t *)v32.i8);
      v36 = vmull_high_u8(v31, v32);
      v37 = vqsubq_u8((uint8x16_t)v30, v32);
      v38 = vqsubq_u8((uint8x16_t)v29, v31);
      v39 = vmull_u8(*(uint8x8_t *)v37.i8, *(uint8x8_t *)v38.i8);
      v40 = vmull_high_u8(v37, v38);
      v41 = (uint16x8_t)vbslq_s8(vzip2q_s8(v33, v33), (int8x16_t)vqaddq_u16(v36, v36), (int8x16_t)vqsubq_u16(vmull_high_u8((uint8x16_t)v30, (uint8x16_t)v29), vqaddq_u16(v40, v40)));
      v42 = (uint16x8_t)vbslq_s8(v34, (int8x16_t)vqaddq_u16(v35, v35), (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)v30.i8, *(uint8x8_t *)v29.i8), vqaddq_u16(v39, v39)));
      v43 = (uint8x16_t)vmvnq_s8(v29);
      v44 = vmull_u8(*(uint8x8_t *)v32.i8, *(uint8x8_t *)v43.i8);
      v45 = vqaddq_u16(v41, vmull_high_u8(v32, v43));
      v46 = (uint8x16_t)vmvnq_s8(v30);
      v47 = vmull_u8(*(uint8x8_t *)v31.i8, *(uint8x8_t *)v46.i8);
      v48 = vmull_high_u8(v31, v46);
      v74.val[1] = (int8x16_t)vqaddq_u16(vqaddq_u16(v42, v44), v47);
      v49 = vqaddq_u16(v45, v48);
      v50 = vminq_u16((uint16x8_t)v74.val[1], v26);
      v51 = vminq_u16(v49, v26);
      v74.val[0] = (int8x16_t)vrsraq_n_u16(v50, v50, 8uLL);
      v52 = vrsraq_n_u16(v51, v51, 8uLL);
      *(uint8x8_t *)v74.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v74.val[0], 8uLL);
      *(uint8x8_t *)v74.val[1].i8 = vqrshrn_n_u16(v52, 8uLL);
      v53 = (uint8x16_t)vqtbl2q_s8(v74, (int8x16_t)xmmword_185005180);
      v15 = (int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v74.val[0].i8, v52, 8uLL);
      *(int8x16_t *)&v19[v20] = vbslq_s8(vceqzq_s8(v29), v28, vbslq_s8(vceqzq_s8(v30), v27, (int8x16_t)vminq_u8((uint8x16_t)v15, v53)));
      v16 -= 4;
      v20 += 4 * a5;
    }
    while (v16 > 3);
    v19 = (_DWORD *)((char *)v19 + v20 * 4);
    v17 = (unsigned __int32 *)((char *)v17 + v20 * 4);
  }
  v54 = v16 + a8;
  if (v54)
  {
    if (a6)
      v55 = 0;
    else
      v55 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v55), (int8x8_t)0xFF000000FFLL);
    if (a7)
      v56 = 0;
    else
      v56 = -1;
    v57 = vand_s8(vdup_n_s8(v56), (int8x8_t)0xFF000000FFLL);
    v58 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a14.i32[0] = *v17;
      v59 = vmovl_u8(*(uint8x8_t *)a14.i8);
      LOBYTE(v60) = v59.i8[0];
      BYTE1(v60) = v59.i8[2];
      BYTE2(v60) = v59.i8[4];
      HIBYTE(v60) = v59.i8[6];
      v59.i32[0] = *v19;
      a14 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v59.i8);
      LOBYTE(v61) = a14.i8[0];
      BYTE1(v61) = a14.i8[2];
      BYTE2(v61) = a14.i8[4];
      HIBYTE(v61) = a14.i8[6];
      *(int8x8_t *)a14.i8 = vorr_s8((int8x8_t)v60, *(int8x8_t *)a9.i8);
      v62 = vorr_s8((int8x8_t)v61, v57);
      v63.i64[0] = a14.i64[0];
      v63.i64[1] = a14.i64[0];
      *(int8x8_t *)v64.i8 = v62;
      v64.u64[1] = (unint64_t)v62;
      *(int8x8_t *)v63.i8 = vqtbl1_s8(v63, (int8x8_t)0x404040400000000);
      *(int8x8_t *)v64.i8 = vqtbl1_s8(v64, (int8x8_t)0x404040400000000);
      v65 = vmin_u8(*(uint8x8_t *)a14.i8, *(uint8x8_t *)v63.i8);
      v66 = vmin_u8((uint8x8_t)v62, *(uint8x8_t *)v64.i8);
      *(uint8x8_t *)v15.i8 = vcge_u8(vrhadd_u8(*(uint8x8_t *)v63.i8, 0), v65);
      v67 = vmull_u8(v65, v66);
      v68 = vmull_u8(vqsub_u8(*(uint8x8_t *)v64.i8, v66), vqsub_u8(*(uint8x8_t *)v63.i8, v65));
      v69 = vminq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vbslq_s8(vzip1q_s8(v15, v15), (int8x16_t)vqaddq_u16(v67, v67), (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)v64.i8, *(uint8x8_t *)v63.i8), vqaddq_u16(v68, v68))), vmull_u8(v66, (uint8x8_t)vmvn_s8(*(int8x8_t *)v63.i8))), vmull_u8(v65, (uint8x8_t)vmvn_s8(*(int8x8_t *)v64.i8))), v58);
      v70 = vrsraq_n_u16(v69, v69, 8uLL);
      v71 = vqrshrn_n_u16(v70, 8uLL);
      v15 = (int8x16_t)vqrshrn_high_n_u16(v71, v70, 8uLL);
      *(int8x8_t *)a14.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v63.i8), v62, vbsl_s8(vceqz_s8(*(int8x8_t *)v64.i8), *(int8x8_t *)a14.i8, (int8x8_t)vmin_u8(v71, (uint8x8_t)vqtbl1_s8(v15, (int8x8_t)0x404040400000000))));
      *(int8x8_t *)a14.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a14, a9));
      *v19 = a14.i32[0];
      v72 = &v17[a5];
      if ((unint64_t)v72 >= v18)
        v73 = -(uint64_t)a4;
      else
        v73 = 0;
      v17 = &v72[v73];
      v19 += a5;
      --v54;
    }
    while (v54);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)22,_argb8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, double a13, int8x16_t a14, unint64_t a15)
{
  unint64_t v15;
  unsigned __int32 *v16;
  unint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  unsigned int v20;
  int8x16_t v21;
  int8x16_t v22;
  unsigned int v23;
  int8x16_t v24;
  uint16x8_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  uint8x16_t v30;
  uint8x16_t v31;
  uint8x16_t v32;
  uint8x16_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  int8x8_t v41;
  int8x16_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  unsigned int v45;
  unsigned int v46;
  int8x8_t v47;
  int8x16_t v48;
  int8x16_t v49;
  uint8x8_t v50;
  uint8x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint8x8_t v54;
  unsigned __int32 *v55;
  uint64_t v56;
  int8x16x2_t v57;

  v15 = a15;
  v16 = *result;
  v17 = *a3;
  v18 = *a2;
  if (a15 >= 4)
  {
    v19 = 0;
    if (a6)
      v20 = 0;
    else
      v20 = -1;
    v21 = vdupq_n_s8(v20);
    v22.i64[0] = 0xFF000000FFLL;
    v22.i64[1] = 0xFF000000FFLL;
    if (a7)
      v23 = 0;
    else
      v23 = -1;
    a9 = vandq_s8(v21, v22);
    v24 = vandq_s8(vdupq_n_s8(v23), v22);
    v25 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    a14.i64[0] = -65536;
    a14.i64[1] = -65536;
    do
    {
      v26 = vorrq_s8(*(int8x16_t *)&v16[v19], a9);
      v27 = vorrq_s8(*(int8x16_t *)&v18[v19], v24);
      v28 = vqtbl1q_s8(v26, (int8x16_t)xmmword_185005170);
      v29 = vqtbl1q_s8(v27, (int8x16_t)xmmword_185005170);
      v30 = vminq_u8((uint8x16_t)v26, (uint8x16_t)v28);
      v31 = vminq_u8((uint8x16_t)v27, (uint8x16_t)v29);
      v32 = (uint8x16_t)vmvnq_s8(v28);
      v33 = (uint8x16_t)vmvnq_s8(v29);
      v57.val[1] = (int8x16_t)vqaddq_u16(vqaddq_u16(vabdq_u16(vmull_u8(*(uint8x8_t *)v30.i8, *(uint8x8_t *)v29.i8), (uint16x8_t)vandq_s8((int8x16_t)vmull_u8(*(uint8x8_t *)v31.i8, *(uint8x8_t *)v28.i8), a14)), vmull_u8(*(uint8x8_t *)v31.i8, *(uint8x8_t *)v32.i8)), vmull_u8(*(uint8x8_t *)v30.i8, *(uint8x8_t *)v33.i8));
      v34 = vqaddq_u16(vqaddq_u16(vabdq_u16(vmull_high_u8(v30, (uint8x16_t)v29), (uint16x8_t)vandq_s8((int8x16_t)vmull_high_u8(v31, (uint8x16_t)v28), a14)), vmull_high_u8(v31, v32)), vmull_high_u8(v30, v33));
      v35 = vminq_u16((uint16x8_t)v57.val[1], v25);
      v36 = vminq_u16(v34, v25);
      v57.val[0] = (int8x16_t)vrsraq_n_u16(v35, v35, 8uLL);
      v37 = vrsraq_n_u16(v36, v36, 8uLL);
      *(uint8x8_t *)v57.val[0].i8 = vqrshrn_n_u16((uint16x8_t)v57.val[0], 8uLL);
      *(uint8x8_t *)v57.val[1].i8 = vqrshrn_n_u16(v37, 8uLL);
      *(int8x16_t *)&v18[v19] = vbslq_s8(vceqzq_s8(v28), v27, vbslq_s8(vceqzq_s8(v29), v26, (int8x16_t)vminq_u8(vqrshrn_high_n_u16(*(uint8x8_t *)v57.val[0].i8, v37, 8uLL), (uint8x16_t)vqtbl2q_s8(v57, (int8x16_t)xmmword_185005180))));
      v15 -= 4;
      v19 += 4 * a5;
    }
    while (v15 > 3);
    v18 = (_DWORD *)((char *)v18 + v19 * 4);
    v16 = (unsigned __int32 *)((char *)v16 + v19 * 4);
  }
  v38 = v15 + a8;
  if (v38)
  {
    if (a6)
      v39 = 0;
    else
      v39 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v39), (int8x8_t)0xFF000000FFLL);
    if (a7)
      v40 = 0;
    else
      v40 = -1;
    v41 = vand_s8(vdup_n_s8(v40), (int8x8_t)0xFF000000FFLL);
    v42.i64[0] = -65536;
    v42.i64[1] = -65536;
    v43 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a14.i32[0] = *v16;
      v44 = vmovl_u8(*(uint8x8_t *)a14.i8);
      LOBYTE(v45) = v44.i8[0];
      BYTE1(v45) = v44.i8[2];
      BYTE2(v45) = v44.i8[4];
      HIBYTE(v45) = v44.i8[6];
      v44.i32[0] = *v18;
      a14 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v44.i8);
      LOBYTE(v46) = a14.i8[0];
      BYTE1(v46) = a14.i8[2];
      BYTE2(v46) = a14.i8[4];
      HIBYTE(v46) = a14.i8[6];
      *(int8x8_t *)a14.i8 = vorr_s8((int8x8_t)v45, *(int8x8_t *)a9.i8);
      v47 = vorr_s8((int8x8_t)v46, v41);
      v48.i64[0] = a14.i64[0];
      v48.i64[1] = a14.i64[0];
      *(int8x8_t *)v48.i8 = vqtbl1_s8(v48, (int8x8_t)0x404040400000000);
      *(int8x8_t *)v49.i8 = v47;
      v49.u64[1] = (unint64_t)v47;
      *(int8x8_t *)v49.i8 = vqtbl1_s8(v49, (int8x8_t)0x404040400000000);
      v50 = vmin_u8(*(uint8x8_t *)a14.i8, *(uint8x8_t *)v48.i8);
      v51 = vmin_u8((uint8x8_t)v47, *(uint8x8_t *)v49.i8);
      v52 = vminq_u16(vqaddq_u16(vqaddq_u16(vabdq_u16(vmull_u8(v50, *(uint8x8_t *)v49.i8), (uint16x8_t)vandq_s8((int8x16_t)vmull_u8(v51, *(uint8x8_t *)v48.i8), v42)), vmull_u8(v51, (uint8x8_t)vmvn_s8(*(int8x8_t *)v48.i8))), vmull_u8(v50, (uint8x8_t)vmvn_s8(*(int8x8_t *)v49.i8))), v43);
      v53 = vrsraq_n_u16(v52, v52, 8uLL);
      v54 = vqrshrn_n_u16(v53, 8uLL);
      *(int8x8_t *)a14.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v48.i8), v47, vbsl_s8(vceqz_s8(*(int8x8_t *)v49.i8), *(int8x8_t *)a14.i8, (int8x8_t)vmin_u8(v54, (uint8x8_t)vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16(v54, v53, 8uLL), (int8x8_t)0x404040400000000))));
      *(int8x8_t *)a14.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a14, a9));
      *v18 = a14.i32[0];
      v55 = &v16[a5];
      if ((unint64_t)v55 >= v17)
        v56 = -(uint64_t)a4;
      else
        v56 = 0;
      v16 = &v55[v56];
      v18 += a5;
      --v38;
    }
    while (v38);
  }
  *result = v16;
  *a3 = v17;
  *a2 = v18;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)23,_argb8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, int8x16_t a13, unint64_t a14)
{
  unint64_t v14;
  unsigned __int32 *v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  int8x16_t v20;
  unsigned int v21;
  int8x16_t v22;
  uint16x8_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  uint8x16_t v28;
  int8x16_t v29;
  uint8x16_t v30;
  int8x16_t v31;
  uint8x16_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint8x16_t v37;
  int8x16_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  int8x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  unsigned int v45;
  unsigned int v46;
  int8x8_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x8_t v50;
  uint8x8_t v51;
  uint16x8_t v52;
  int8x16_t v53;
  unsigned __int32 *v54;
  uint64_t v55;

  v14 = a14;
  v15 = *result;
  v16 = *a3;
  v17 = *a2;
  if (a14 >= 4)
  {
    v18 = 0;
    if (a6)
      v19 = 0;
    else
      v19 = -1;
    v20.i64[0] = 0xFF000000FFLL;
    v20.i64[1] = 0xFF000000FFLL;
    a9 = vandq_s8(vdupq_n_s8(v19), v20);
    if (a7)
      v21 = 0;
    else
      v21 = -1;
    v22 = vandq_s8(vdupq_n_s8(v21), v20);
    v23 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v24 = vorrq_s8(*(int8x16_t *)&v15[v18], a9);
      v25 = vorrq_s8(*(int8x16_t *)&v17[v18], v22);
      v26 = vqtbl1q_s8(v24, (int8x16_t)xmmword_185005170);
      v27 = vqtbl1q_s8(v25, (int8x16_t)xmmword_185005170);
      v28 = vminq_u8((uint8x16_t)v24, (uint8x16_t)v26);
      v29 = (int8x16_t)vminq_u8((uint8x16_t)v25, (uint8x16_t)v27);
      v30 = (uint8x16_t)vmvnq_s8(v29);
      v31 = (int8x16_t)vcgtq_u8((uint8x16_t)(*(_OWORD *)&v29 & __PAIR128__(0xFFFFFF00FFFFFF00, 0xFFFFFF00FFFFFF00)), v30);
      v32 = vabdq_u8(v30, (uint8x16_t)(*(_OWORD *)&v29 & __PAIR128__(0xFFFFFF00FFFFFF00, 0xFFFFFF00FFFFFF00)));
      v33 = vmull_u8(*(uint8x8_t *)v28.i8, *(uint8x8_t *)v32.i8);
      v34 = vmull_high_u8(v28, v32);
      v35 = vminq_u16(v33, v23);
      v36 = vminq_u16(v34, v23);
      v37 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v35, v35, 8uLL), 8uLL), vrsraq_n_u16(v36, v36, 8uLL), 8uLL);
      v38 = vbslq_s8(v31, (int8x16_t)vqsubq_u8((uint8x16_t)v29, v37), (int8x16_t)vqaddq_u8((uint8x16_t)v29, v37));
      a13 = vbslq_s8(vceqzq_s8(v26), v25, vbslq_s8(vceqzq_s8(v27), v24, (int8x16_t)vminq_u8((uint8x16_t)v38, (uint8x16_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_185005170))));
      *(int8x16_t *)&v17[v18] = a13;
      v14 -= 4;
      v18 += 4 * a5;
    }
    while (v14 > 3);
    v17 = (_DWORD *)((char *)v17 + v18 * 4);
    v15 = (unsigned __int32 *)((char *)v15 + v18 * 4);
  }
  v39 = v14 + a8;
  if (v39)
  {
    if (a6)
      v40 = 0;
    else
      v40 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v40), (int8x8_t)0xFF000000FFLL);
    if (a7)
      v41 = 0;
    else
      v41 = -1;
    v42 = vand_s8(vdup_n_s8(v41), (int8x8_t)0xFF000000FFLL);
    v43 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a13.i32[0] = *v15;
      v44 = vmovl_u8(*(uint8x8_t *)a13.i8);
      LOBYTE(v45) = v44.i8[0];
      BYTE1(v45) = v44.i8[2];
      BYTE2(v45) = v44.i8[4];
      HIBYTE(v45) = v44.i8[6];
      v44.i32[0] = *v17;
      a13 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v44.i8);
      LOBYTE(v46) = a13.i8[0];
      BYTE1(v46) = a13.i8[2];
      BYTE2(v46) = a13.i8[4];
      HIBYTE(v46) = a13.i8[6];
      *(int8x8_t *)a13.i8 = vorr_s8((int8x8_t)v45, *(int8x8_t *)a9.i8);
      v47 = vorr_s8((int8x8_t)v46, v42);
      v48.i64[0] = a13.i64[0];
      v48.i64[1] = a13.i64[0];
      *(int8x8_t *)v48.i8 = vqtbl1_s8(v48, (int8x8_t)0x404040400000000);
      *(int8x8_t *)v49.i8 = v47;
      v49.u64[1] = (unint64_t)v47;
      *(int8x8_t *)v49.i8 = vqtbl1_s8(v49, (int8x8_t)0x404040400000000);
      v50 = (int8x8_t)vmin_u8((uint8x8_t)v47, *(uint8x8_t *)v49.i8);
      v51 = (uint8x8_t)vmvn_s8(v50);
      v52 = vminq_u16(vmull_u8(vmin_u8(*(uint8x8_t *)a13.i8, *(uint8x8_t *)v48.i8), vabd_u8(v51, (uint8x8_t)(*(_QWORD *)&v50 & 0xFFFFFF00FFFFFF00))), v43);
      *(uint8x8_t *)v52.i8 = vqrshrn_n_u16(vrsraq_n_u16(v52, v52, 8uLL), 8uLL);
      *(int8x8_t *)v53.i8 = vbsl_s8((int8x8_t)vcgt_u8((uint8x8_t)(*(_QWORD *)&v50 & 0xFFFFFF00FFFFFF00), v51), (int8x8_t)vqsub_u8((uint8x8_t)v50, *(uint8x8_t *)v52.i8), (int8x8_t)vqadd_u8((uint8x8_t)v50, *(uint8x8_t *)v52.i8));
      v53.i64[1] = v53.i64[0];
      *(int8x8_t *)a13.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v48.i8), v47, vbsl_s8(vceqz_s8(*(int8x8_t *)v49.i8), *(int8x8_t *)a13.i8, (int8x8_t)vmin_u8(*(uint8x8_t *)v53.i8, (uint8x8_t)vqtbl1_s8(v53, (int8x8_t)0x404040400000000))));
      *(int8x8_t *)a13.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a13, a9));
      *v17 = a13.i32[0];
      v54 = &v15[a5];
      if ((unint64_t)v54 >= v16)
        v55 = -(uint64_t)a4;
      else
        v55 = 0;
      v15 = &v54[v55];
      v17 += a5;
      --v39;
    }
    while (v39);
  }
  *result = v15;
  *a3 = v16;
  *a2 = v17;
  return result;
}

void rgba32_mark_pixelshape_template(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(int, int, int, int, int, int, int, int, uint64_t);
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  _BOOL4 v50;
  uint64_t (*v51)(int, int, int, int, int, int, int, int, uint64_t);
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  int v58;

  if ((a2 & 0x80000000) != 0)
    return;
  if (a2 > 0x17)
    v2 = (uint64_t (*)(int, int, int, int, int, int, int, int, uint64_t))vec::template_mark_pixelshape_row<(CGCompositeOperation)0,_argb8_t>;
  else
    v2 = vec::MethodList<_argb8_t>::shapeMethods[a2];
  v51 = v2;
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_DWORD *)(a1 + 8);
  v5 = v3;
  v57 = v4;
  v58 = v3;
  v6 = *(int *)(a1 + 28);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 88);
  v9 = *(_QWORD *)(a1 + 96);
  v55 = v10;
  v11 = *(int **)(a1 + 136);
  v12 = *(unsigned __int8 *)(a1 + 1) << 8;
  v13 = v6 >> 2;
  v50 = v8 != 0;
  v14 = v7 + 4 * (*(int *)(a1 + 12) + (v6 >> 2) * *(int *)(a1 + 16));
  v56 = v14;
  v15 = *(_DWORD *)(a1 + 104);
  v16 = *(_DWORD *)(a1 + 108);
  v17 = *(int *)(a1 + 56);
  v18 = *(int *)(a1 + 60);
  v19 = *(int *)(a1 + 76);
  if (v12 != 256)
  {
    v52 = *(unsigned int *)(a1 + 64);
    v24 = v19 >> 2;
    v25 = (v19 >> 2) * *(int *)(a1 + 68);
    v44 = *(_DWORD *)(a1 + 68);
    v54 = v10;
    v26 = v10 + 4 * v25;
    v27 = v9 != 0;
    if (v11)
    {
      v23 = 1;
      v21 = v10;
      goto LABEL_22;
    }
    v47 = v14;
    if (v10)
    {
      v45 = 0;
      v46 = v10;
      v28 = v10 + 4 * v24 * ((int)v18 % v44);
      v21 = v28 + 4 * ((int)v17 % (int)v52);
      v29 = v28 + 4 * (int)v52;
      v54 = v29;
      v55 = v21;
      v23 = 1;
      v10 = v21;
      goto LABEL_26;
    }
    v29 = 0;
    v21 = 0;
    v23 = 1;
LABEL_25:
    v26 = 0;
    v45 = 0;
    v46 = v21;
    v10 = 0;
    v24 -= v5;
    goto LABEL_26;
  }
  v20 = v19 >> 2;
  v21 = v10 + 4 * (v17 + v20 * v18);
  v54 = -1;
  v55 = v21;
  v52 = v20;
  if (v20 != v13)
  {
    v23 = 1;
    goto LABEL_20;
  }
  if ((uint64_t)(v14 - v21) >= 1)
  {
    if (v3 >= (uint64_t)((v14 - v21) >> 2))
    {
      v14 += 4 * (v3 - 1);
      v56 = v14;
      v21 += 4 * (v3 - 1);
      v55 = v21;
      v23 = 0xFFFFFFFFLL;
      goto LABEL_19;
    }
    v22 = v13 * (v4 - 1);
    if (v14 <= v21 + 4 * v22 + 4 * (v3 - 1))
    {
      v14 += 4 * v22;
      v56 = v14;
      v13 = -(uint64_t)v13;
      v55 = v21 + 4 * v22;
      v23 = 1;
      v21 = v55;
      goto LABEL_19;
    }
  }
  v23 = 1;
LABEL_19:
  v52 = v13;
LABEL_20:
  v27 = v9 != 0;
  if (!v11)
  {
    v47 = v14;
    v44 = 0;
    v5 = (int)v23 * v3;
    v29 = -1;
    v24 = v52;
    goto LABEL_25;
  }
  v26 = 0;
  v10 = 0;
  v44 = 0;
  v24 = v52;
LABEL_22:
  shape_enum_clip_alloc(a1, a2, v11, v23, v13, 1, v15, v16, v3, v4);
  v31 = v30;
  if (v30)
  {
    while (shape_enum_clip_next((uint64_t)v31, (int *)&v53 + 1, &v53, &v58, &v57))
    {
      v46 = v21;
      v47 = v14;
      v45 = v31;
      if (v26)
      {
        v41 = v14 + 4 * v13 * (int)v53 + 4 * SHIDWORD(v53);
        v3 = v58;
        v42 = v21 + 4 * v24 * (((int)v53 + *(_DWORD *)(a1 + 60)) % v44);
        v21 = v42 + 4 * ((HIDWORD(v53) + *(_DWORD *)(a1 + 56)) % (int)v52);
        v29 = v42 + 4 * (int)v52;
        v54 = v29;
        LODWORD(v5) = v58;
        v10 = v21;
      }
      else
      {
        v3 = v58;
        LODWORD(v5) = v58 * v23;
        v41 = v14 + 4 * v13 * (int)v53 + 4 * HIDWORD(v53) * (int)v23;
        v21 += 4 * (int)v53 * (int)v52 + 4 * HIDWORD(v53) * (int)v23;
        v24 = (int)v52 - v58 * (int)v23;
        v29 = v54;
      }
      v56 = v41;
      v55 = v21;
      v5 = (int)v5;
      v4 = v57;
LABEL_26:
      v49 = v13;
      v32 = v13 - v5;
      v33 = v3 & ~(v3 >> 31);
      if ((unint64_t)(v29 - v21) >> 2 >= v33)
        v34 = v33;
      else
        v34 = (unint64_t)(v29 - v21) >> 2;
      v35 = v33 - v34;
      if (v4 >= 1)
        v36 = 1;
      else
        v36 = v4;
      v48 = v36;
      v37 = v4 + 1;
      do
      {
        v51((int)&v55, (int)&v56, (int)&v54, v52, v23, v27, v50, v35, v34);
        v56 += 4 * v32;
        if (v26)
        {
          v38 = v10 + 4 * v24;
          if (v38 >= v26)
            v39 = -(uint64_t)(v24 * v44);
          else
            v39 = 0;
          v40 = v38 + 4 * v39;
          v54 += 4 * v39 + 4 * v24;
          v10 = v40;
        }
        else
        {
          v40 = v55 + 4 * v24;
        }
        v55 = v40;
        --v37;
      }
      while (v37 > 1);
      v57 = v48 - 1;
      v13 = v49;
      v21 = v46;
      v14 = v47;
      v31 = v45;
      if (!v45)
        return;
      v53 = 0;
    }
    free(v31);
  }
}

uint64_t rgba32_mark_pixelmask_template(uint64_t result, unsigned int a2)
{
  uint64_t *(*v2)(uint64_t *, uint8x8_t **, unint64_t *, unsigned __int32 **, int, int, double, uint16x8_t, double, double, double, uint16x8_t, uint64_t, uint64_t, uint64_t, unint64_t);
  uint64_t v3;
  uint64_t v4;
  int v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *(*v34)(uint64_t *, uint8x8_t **, unint64_t *, unsigned __int32 **, int, int, double, uint16x8_t, double, double, double, uint16x8_t, uint64_t, uint64_t, uint64_t, unint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  if ((a2 & 0x80000000) != 0)
    return result;
  v2 = a2 > 0x17
     ? vec::template_mark_pixelmask_row<(CGCompositeOperation)0,_argb8_t>
     : (uint64_t *(*)(uint64_t *, uint8x8_t **, unint64_t *, unsigned __int32 **, int, int, double, uint16x8_t, double, double, double, uint16x8_t, uint64_t, uint64_t, uint64_t, unint64_t))vec::MethodList<_argb8_t>::maskMethods[a2];
  v34 = v2;
  v3 = *(_QWORD *)(result + 88);
  v4 = *(_QWORD *)(result + 136);
  v5 = *(_DWORD *)result;
  v6 = *(int *)(result + 4);
  v7 = *(int *)(result + 8);
  v8 = (unint64_t)*(int *)(result + 28) >> 2;
  v9 = *(_QWORD *)(result + 40) + 4 * (*(int *)(result + 12) + v8 * *(int *)(result + 16));
  v37 = v3;
  v38 = v9;
  if (!v4)
    return result;
  v10 = *(int *)(result + 124);
  v11 = v4 + *(int *)(result + 104) + *(int *)(result + 108) * (uint64_t)(int)v10;
  v35 = v11;
  v12 = *(int *)(result + 56);
  v13 = *(int *)(result + 60);
  v14 = v5 & 0xFF00;
  v15 = *(int *)(result + 76);
  if (v14 != 256)
  {
    v16 = *(unsigned int *)(result + 64);
    v20 = *(int *)(result + 68);
    v21 = v15 >> 2;
    v22 = v3 + 4 * (v15 >> 2) * v20;
    v36 = v3;
    v19 = 1;
    v17 = v3;
    v23 = v3;
    goto LABEL_18;
  }
  v16 = v15 >> 2;
  v17 = v3 + 4 * (v12 + (v15 >> 2) * v13);
  v36 = -1;
  v37 = v17;
  if (v16 == v8)
  {
    if ((uint64_t)(v9 - v17) >= 1)
    {
      if (v6 >= (uint64_t)((v9 - v17) >> 2))
      {
        v17 += 4 * (v6 - 1);
        v37 = v17;
        v38 = v9 + 4 * (v6 - 1);
        v35 = v11 + v6 - 1;
        v19 = 0xFFFFFFFFLL;
        goto LABEL_16;
      }
      v18 = v8 * (v7 - 1);
      if (v9 <= v17 + 4 * v18 + 4 * ((int)v6 - 1))
      {
        v37 = v17 + 4 * v18;
        v38 = v9 + 4 * v18;
        v8 = -(uint64_t)v8;
        v35 = v11 + v10 * (v7 - 1);
        v10 = -v10;
        v19 = 1;
        v17 = v37;
        goto LABEL_16;
      }
    }
    v19 = 1;
LABEL_16:
    v16 = v8;
    goto LABEL_17;
  }
  v19 = 1;
LABEL_17:
  LODWORD(v20) = 0;
  v23 = 0;
  v22 = 0;
  v21 = v16;
LABEL_18:
  if (v22)
  {
    v24 = v17 + 4 * v21 * ((int)v13 % (int)v20);
    v36 = v24 + 4 * (int)v16;
    v37 = v24 + 4 * ((int)v12 % (int)v16);
    v23 = v37;
  }
  else
  {
    v21 -= (int)v6 * (uint64_t)(int)v19;
  }
  v25 = v10 - (int)v6 * (uint64_t)(int)v19;
  v26 = v8 - (int)v6 * (uint64_t)(int)v19;
  v33 = -(uint64_t)(v21 * (int)v20);
  v27 = v7 + 1;
  do
  {
    v28 = v16;
    v29 = v19;
    result = ((uint64_t (*)(uint64_t *, unint64_t *, uint64_t *, uint64_t *))v34)(&v37, &v38, &v36, &v35);
    v35 += v25;
    v38 += 4 * v26;
    if (v22)
    {
      v30 = v23 + 4 * v21;
      v31 = v33;
      if (v30 < v22)
        v31 = 0;
      v32 = v30 + 4 * v31;
      v36 += 4 * v31 + 4 * v21;
      v23 = v32;
    }
    else
    {
      v32 = v37 + 4 * v21;
    }
    v19 = v29;
    v16 = v28;
    v37 = v32;
    --v27;
  }
  while (v27 > 1);
  return result;
}

