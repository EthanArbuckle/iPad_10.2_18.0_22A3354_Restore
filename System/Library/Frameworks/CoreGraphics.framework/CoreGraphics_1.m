uint64_t CGSColorMaskCopyARGB8888(uint64_t result, char *a2, int a3, unsigned __int8 *a4, int a5, int a6, int a7, double a8, double a9, double a10, int16x8_t a11)
{
  uint64_t v11;
  uint64_t v12;
  int16x8_t v13;
  uint8x8_t v14;
  uint8x8_t v15;
  int v16;
  __int32 v17;
  __int32 v18;
  int8x8_t v19;
  uint8x8_t v20;
  int8x16_t v21;
  int8x8_t v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  unsigned int v30;
  int16x8_t v31;
  int v32;
  unsigned __int32 v33;
  unsigned __int32 v34;
  int8x8_t v35;
  uint8x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  unsigned int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  int8x8x2_t v48;
  int8x8x2_t v49;
  int8x8x2_t v50;

  v11 = a3 - 4 * a6;
  v12 = a5 - (uint64_t)a6;
  *(int32x2_t *)v13.i8 = vdup_n_s32(result);
  v14 = (uint8x8_t)vuzp1_s8(*(int8x8_t *)v13.i8, *(int8x8_t *)v13.i8);
  v15 = (uint8x8_t)vuzp2_s8(*(int8x8_t *)v13.i8, *(int8x8_t *)v13.i8);
  if ((_DWORD)result == -16777216)
  {
    if (a7 >= 1)
    {
      do
      {
        v16 = a6;
        if (a6 >= 4)
        {
          do
          {
            v18 = *(_DWORD *)a4;
            a4 += 4;
            v17 = v18;
            if (v18)
            {
              if (v17 == -1)
              {
                vst2_s8(a2, *(int8x8x2_t *)v14.i8);
              }
              else
              {
                v13.i32[0] = v17;
                v48 = vld2_s8(a2);
                v19 = vzip1_s8(*(int8x8_t *)v13.i8, *(int8x8_t *)v13.i8);
                v20 = (uint8x8_t)vmvn_s8(v19);
                v21 = (int8x16_t)vmull_u8((uint8x8_t)v48.val[0], v20);
                v48 = (int8x8x2_t)vmull_u8((uint8x8_t)v48.val[1], v20);
                *(int8x8_t *)v21.i8 = vsubhn_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v21, 8uLL), (int16x8_t)vmvnq_s8(v21));
                v13 = vsubq_s16((int16x8_t)v48, (int16x8_t)vmvnq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v19), 0x18uLL)));
                v22 = vaddhn_s16(v13, (int16x8_t)vshrq_n_u16((uint16x8_t)v48, 8uLL));
                vst2_s8(a2, (int8x8x2_t)v21);
              }
            }
            a2 += 16;
            v16 -= 4;
          }
          while ((v16 + 4) > 7);
        }
        if (v16 >= 1)
        {
          v23 = v16 + 1;
          do
          {
            v25 = *a4++;
            v24 = v25;
            if (v25)
            {
              if (v24 == 255)
              {
                v26 = -16777216;
              }
              else
              {
                v27 = ((*(_DWORD *)a2 >> 8) & 0xFF00FF) * (v24 ^ 0xFF);
                result = (v27 >> 8) & 0xFF00FF;
                v26 = (((v24 << 24) | 0x10001) + v27 + result) & 0xFF00FF00 | (((*(_DWORD *)a2 & 0xFF00FF)
                                                                              * (v24 ^ 0xFF)
                                                                              + 65537
                                                                              + ((((*(_DWORD *)a2 & 0xFF00FF)
                                                                                 * (v24 ^ 0xFFu)) >> 8) & 0xFF00FF)) >> 8) & 0xFF00FF;
              }
              *(_DWORD *)a2 = v26;
            }
            a2 += 4;
            --v23;
          }
          while (v23 > 1);
        }
        a2 += (int)v11;
        a4 += (int)v12;
        v28 = a7-- <= 1;
      }
      while (!v28);
    }
  }
  else if (a7 >= 1)
  {
    v29 = result & 0xFF00FF;
    v30 = (result >> 8) & 0xFF00FF;
    v31.i64[0] = 0x2000200020002;
    v31.i64[1] = 0x2000200020002;
    do
    {
      v32 = a6;
      if (a6 >= 4)
      {
        do
        {
          v34 = *(_DWORD *)a4;
          a4 += 4;
          v33 = v34;
          if (v34)
          {
            if (v33 == -1)
            {
              vst2_s8(a2, *(int8x8x2_t *)v14.i8);
            }
            else
            {
              a11.i32[0] = v33;
              v49 = vld2_s8(a2);
              v35 = vzip1_s8(*(int8x8_t *)a11.i8, *(int8x8_t *)a11.i8);
              v36 = (uint8x8_t)vmvn_s8(v35);
              v37 = vmull_u8(v14, (uint8x8_t)v35);
              v38 = vmull_u8(v15, (uint8x8_t)v35);
              v50.val[0] = vaddhn_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vsraq_n_u16(v37, v37, 8uLL), v31), (uint8x8_t)v49.val[0], v36), (int16x8_t)vshrq_n_u16(vmull_u8((uint8x8_t)v49.val[0], v36), 8uLL));
              a11 = (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vsraq_n_u16(v38, v38, 8uLL), v31), (uint8x8_t)v49.val[1], v36);
              v50.val[1] = vaddhn_s16(a11, (int16x8_t)vshrq_n_u16(vmull_u8((uint8x8_t)v49.val[1], v36), 8uLL));
              vst2_s8(a2, v50);
            }
          }
          a2 += 16;
          v32 -= 4;
        }
        while ((v32 + 4) > 7);
      }
      if (v32 >= 1)
      {
        v39 = v32 + 1;
        do
        {
          v41 = *a4++;
          v40 = v41;
          if (v41)
          {
            v42 = result;
            if (v40 != 255)
            {
              v43 = v29 * v40;
              v44 = v30 * v40;
              v45 = ((v29 * v40) >> 8) & 0xFF00FF;
              v46 = ((v30 * v40) >> 8) & 0xFF00FF;
              v47 = v40 ^ 0xFF;
              v42 = ((v43
                    + 131074
                    + (*(_DWORD *)a2 & 0xFF00FF) * v47
                    + v45
                    + ((((*(_DWORD *)a2 & 0xFF00FFu) * v47) >> 8) & 0xFF00FF)) >> 8) & 0xFF00FF | (v44
                                                                                                 + 131074
                                                                                                 + v46
                                                                                                 + ((*(_DWORD *)a2 >> 8) & 0xFF00FF)
                                                                                                 * v47
                                                                                                 + (((((*(_DWORD *)a2 >> 8) & 0xFF00FFu) * v47) >> 8) & 0xFF00FF)) & 0xFF00FF00;
            }
            *(_DWORD *)a2 = v42;
          }
          a2 += 4;
          --v39;
        }
        while (v39 > 1);
      }
      a2 += v11;
      a4 += v12;
      v28 = a7-- <= 1;
    }
    while (!v28);
  }
  return result;
}

uint64_t argb32_mark_constcolormask(uint64_t a1, double a2, double a3, double a4, int16x8_t a5)
{
  unsigned int *v5;
  uint64_t v6;

  v5 = *(unsigned int **)(a1 + 88);
  if (v5)
    v6 = *v5;
  else
    v6 = 4278190080;
  return CGSColorMaskCopyARGB8888(v6, (char *)(*(_QWORD *)(a1 + 40) + *(int *)(a1 + 28) * (uint64_t)*(int *)(a1 + 16) + 4 * *(int *)(a1 + 12)), *(_DWORD *)(a1 + 28), (unsigned __int8 *)(*(_QWORD *)(a1 + 136)+ *(int *)(a1 + 124) * (uint64_t)*(int *)(a1 + 108)+ *(int *)(a1 + 104)), *(_DWORD *)(a1 + 124), *(_DWORD *)(a1 + 4), *(_DWORD *)(a1 + 8), a2, a3, a4, a5);
}

uint64_t ripl_Mark(uint64_t a1)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t *))(*(_QWORD *)(a1 + 32) + 40))(&v2);
}

uint64_t rgba32_mark(uint64_t a1, __n128 a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64x2_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  unsigned int v14;
  int v15;
  uint16x4_t *v16;
  int v17;
  unsigned int v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  size_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  BOOL v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void *v44;
  int v45;
  uint64_t v46;
  unsigned int *v47;
  uint32x2_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint32x2_t *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned __int8 v60;
  unsigned int *v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int *v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  int v68;
  int v69;
  unsigned __int8 v70;
  unsigned int *v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int *v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  int v78;
  int v79;
  unsigned int *v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int *v83;
  uint64_t v84;
  unsigned int *v85;
  uint64_t v86;
  int v87;
  int v88;
  unsigned __int8 v89;
  unsigned int *v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int *v93;
  uint64_t v94;
  unsigned int *v95;
  uint64_t v96;
  int v97;
  __int32 v98;
  unsigned int *v99;
  uint64_t v100;
  unsigned int *v101;
  unsigned int *v102;
  uint64_t v103;
  unsigned int *v104;
  uint64_t v105;
  int v106;
  int v107;
  unsigned int *v108;
  uint64_t v109;
  unsigned int *v110;
  unsigned int *v111;
  uint64_t v112;
  unsigned int *v113;
  uint64_t v114;
  int v115;
  int v116;
  unsigned int *v117;
  uint64_t v118;
  unsigned int *v119;
  unsigned int *v120;
  uint64_t v121;
  unsigned int *v122;
  uint64_t v123;
  int v124;
  int v125;
  unsigned int *v126;
  uint64_t v127;
  unsigned int *v128;
  unsigned int *v129;
  uint64_t v130;
  unsigned int *v131;
  uint64_t v132;
  int v133;
  int v134;
  unsigned __int8 v135;
  unsigned __int8 v136;
  unsigned int *v137;
  uint64_t v138;
  unsigned int *v139;
  unsigned int *v140;
  uint64_t v141;
  unsigned int *v142;
  uint64_t v143;
  int v144;
  int v145;
  int v146;
  unsigned int *v147;
  uint64_t v148;
  unsigned int *v149;
  unsigned int *v150;
  uint64_t v151;
  unsigned int *v152;
  uint64_t v153;
  int v154;
  unsigned int v155;
  unsigned int v156;
  __int32 v157;
  __int32 v158;
  unsigned int *v159;
  uint64_t v160;
  unsigned int *v161;
  unsigned int *v162;
  uint64_t v163;
  unsigned int *v164;
  uint64_t v165;
  int v166;
  unsigned int v167;
  unsigned int v168;
  __int32 v169;
  __int32 v170;
  unsigned int *v171;
  uint64_t v172;
  unsigned int *v173;
  unsigned int *v174;
  uint64_t v175;
  unsigned int *v176;
  uint64_t v177;
  int v178;
  unsigned int v179;
  unsigned int v180;
  __int32 v181;
  __int32 v182;
  unsigned int *v183;
  uint64_t v184;
  unsigned int *v185;
  unsigned int *v186;
  uint64_t v187;
  unsigned int *v188;
  uint64_t v189;
  int v190;
  unsigned int v191;
  unsigned int v192;
  __int32 v193;
  __int32 v194;
  unsigned int *v195;
  uint64_t v196;
  unsigned int *v197;
  unsigned int *v198;
  uint64_t v199;
  unsigned int *v200;
  uint64_t v201;
  int v202;
  unsigned int v203;
  unsigned int v204;
  __int32 v205;
  __int32 v206;
  unsigned int *v207;
  uint64_t v208;
  unsigned int *v209;
  unsigned int *v210;
  uint64_t v211;
  unsigned int *v212;
  uint64_t v213;
  int v214;
  unsigned int v215;
  unsigned int v216;
  __int32 v217;
  __int32 v218;
  unsigned int *v219;
  uint64_t v220;
  unsigned int *v221;
  unsigned int *v222;
  uint64_t v223;
  unsigned int *v224;
  uint64_t v225;
  int v226;
  unsigned int v227;
  unsigned int v228;
  __int32 v229;
  __int32 v230;
  unsigned int *v231;
  uint64_t v232;
  unsigned int *v233;
  unsigned int *v234;
  uint64_t v235;
  unsigned int *v236;
  uint64_t v237;
  int v238;
  unsigned int v239;
  unsigned int v240;
  __int32 v241;
  __int32 v242;
  unsigned int *v243;
  uint64_t v244;
  unsigned int *v245;
  unsigned int *v246;
  uint64_t v247;
  unsigned int *v248;
  uint64_t v249;
  int v250;
  unsigned int v251;
  unsigned int v252;
  __int32 v253;
  __int32 v254;
  unsigned int *v255;
  uint64_t v256;
  unsigned int *v257;
  unsigned int *v258;
  uint64_t v259;
  unsigned int *v260;
  uint64_t v261;
  int v262;
  unsigned int v263;
  unsigned int v264;
  __int32 v265;
  __int32 v266;
  unsigned int *v267;
  uint64_t v268;
  unsigned int *v269;
  unsigned int *v270;
  uint64_t v271;
  unsigned int *v272;
  uint64_t v273;
  int v274;
  unsigned int v275;
  unsigned int v276;
  __int32 v277;
  __int32 v278;
  unsigned int *v279;
  uint64_t v280;
  unsigned int *v281;
  unsigned int *v282;
  uint64_t v283;
  unsigned int *v284;
  uint64_t v285;
  int v286;
  unsigned int v287;
  unsigned int v288;
  __int32 v289;
  __int32 v290;
  unsigned int *v291;
  uint64_t v292;
  unsigned int *v293;
  unsigned int *v294;
  uint64_t v295;
  unsigned int *v296;
  uint64_t v297;
  int v298;
  unsigned int v299;
  unsigned int v300;
  __int32 v301;
  __int32 v302;
  unsigned int *v303;
  uint64_t v304;
  unsigned int *v305;
  unsigned int *v306;
  uint64_t v307;
  unsigned int *v308;
  uint64_t v309;
  int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  __int32 v314;
  __int32 v315;
  unsigned int *v316;
  uint64_t v317;
  unsigned int *v318;
  unsigned int *v319;
  uint64_t v320;
  unsigned int *v321;
  uint64_t v322;
  int v323;
  unsigned int v324;
  unsigned int v325;
  __int32 v326;
  __int32 v327;
  unsigned int *v328;
  uint64_t v329;
  unsigned int *v330;
  unsigned int *v331;
  uint64_t v332;
  unsigned int *v333;
  uint64_t v334;
  int v335;
  unsigned int v336;
  unsigned int v337;
  __int32 v338;
  __int32 v339;
  unsigned int *v340;
  uint64_t v341;
  unsigned int *v342;
  unsigned int *v343;
  uint64_t v344;
  unsigned int *v345;
  uint64_t v346;
  int v347;
  unsigned int v348;
  unsigned int v349;
  __int32 v350;
  __int32 v351;
  unsigned int *v352;
  uint64_t v353;
  unsigned int *v354;
  unsigned int *v355;
  uint64_t v356;
  unsigned int *v357;
  uint64_t v358;
  int v359;
  unsigned int v360;
  unsigned int v361;
  unsigned int v362;
  __int32 v363;
  __int32 v364;
  unsigned int *v365;
  uint64_t v366;
  unsigned int *v367;
  unsigned int *v368;
  uint64_t v369;
  unsigned int *v370;
  uint64_t v371;
  int v372;
  unsigned int v373;
  unsigned int v374;
  __int32 v375;
  __int32 v376;
  unsigned int *v377;
  uint64_t v378;
  unsigned int *v379;
  unsigned int *v380;
  uint64_t v381;
  unsigned int *v382;
  uint64_t v383;
  int v384;
  unsigned int v385;
  unsigned int *v386;
  uint64_t v387;
  unsigned int *v388;
  unsigned int *v389;
  uint64_t v390;
  unsigned int *v391;
  uint64_t v392;
  uint64_t v393;
  int v394;
  uint8x8_t v395;
  uint64_t v396;
  int v397;
  unsigned int *v398;
  uint64_t v399;
  unsigned int *v400;
  unsigned int *v401;
  uint64_t v402;
  unsigned int *v403;
  uint64_t v404;
  int v405;
  unsigned int *v406;
  uint64_t v407;
  unsigned int *v408;
  unsigned int *v409;
  uint64_t v410;
  unsigned int *v411;
  uint64_t v412;
  int v413;
  unsigned int *v414;
  uint64_t v415;
  unsigned int *v416;
  unsigned int *v417;
  uint64_t v418;
  unsigned int *v419;
  uint64_t v420;
  uint64_t v421;
  char *v422;
  uint64_t v423;
  uint64_t v424;
  unint64_t v425;
  int v426;
  unsigned int v427;
  int v428;
  int v429;
  int v430;
  int v431;
  unsigned int v432;
  BOOL v433;
  int v434;
  int v435;
  unsigned int v436;
  int v437;
  int v438;
  int *v439;
  int v440;
  unsigned int v441;
  unsigned int v442;
  _DWORD *v443;
  unsigned int v444;
  int v445;
  unsigned int v446;
  unsigned int *v447;
  unsigned int v448;
  int v449;
  int v450;
  unsigned int *v451;
  unsigned int v452;
  int v453;
  int v454;
  int v455;
  unsigned int *v456;
  unsigned int v457;
  int v458;
  int v459;
  unsigned int *v460;
  unsigned int v461;
  int v462;
  int v463;
  int *v464;
  int v465;
  int v466;
  unsigned __int8 v467;
  int v468;
  int v469;
  int v470;
  unsigned int v471;
  unsigned int v472;
  int v473;
  unsigned int v474;
  unsigned int v475;
  int v476;
  unsigned int v477;
  unsigned int v478;
  int v479;
  unsigned int v480;
  unsigned int v481;
  int v482;
  unsigned int v483;
  unsigned int v484;
  int v485;
  unsigned int v486;
  unsigned int v487;
  int v488;
  unsigned int v489;
  unsigned int v490;
  int v491;
  unsigned int v492;
  unsigned int v493;
  int v494;
  unsigned int v495;
  unsigned int v496;
  int v497;
  unsigned int v498;
  unsigned int v499;
  int v500;
  unsigned int v501;
  unsigned int v502;
  int v503;
  unsigned int v504;
  unsigned int v505;
  int v506;
  unsigned int v507;
  unsigned int v508;
  int v509;
  unsigned int v510;
  unsigned int v511;
  int v512;
  unsigned int v513;
  unsigned int v514;
  int v515;
  unsigned int v516;
  unsigned int v517;
  int v518;
  unsigned int v519;
  unsigned int v520;
  int v521;
  unsigned int v522;
  unsigned int v523;
  int v524;
  unsigned int v525;
  unsigned int v526;
  uint64_t v527;
  int v528;
  int v529;
  int v530;
  int v531;
  uint64_t v532;
  unint64_t v533;
  unint64_t v534;
  int v535;
  int v536;
  int v537;
  uint64_t v538;
  uint64_t v539;
  int v540;
  unint64_t v541;
  int v542;
  unint64_t v543;
  int v544;
  unsigned int *v545;
  unint64_t v546;
  uint64_t v547;
  uint64_t v548;
  unint64_t v549;
  unsigned int *v550;
  uint64_t v551;
  int v552[4];
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  _DWORD v562[1024];
  uint64_t v563;

  v2 = (uint64_t *)MEMORY[0x1E0C80A78](a1, a2);
  v5 = v3;
  v563 = *MEMORY[0x1E0C80C00];
  v6 = *v2;
  if (*(_DWORD *)(v3 + 132))
  {
    if (CGPreferencesCheck<CGImageMarkAllowTemplateMethodInteger>(void)::onceToken != -1)
      dispatch_once(&CGPreferencesCheck<CGImageMarkAllowTemplateMethodInteger>(void)::onceToken, &__block_literal_global_10_12448);
    v7 = CGPreferencesCheck<CGImageMarkAllowTemplateMethodInteger>(void)::result != 0;
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_DWORD *)v5;
  v9 = *(_QWORD *)(v5 + 96);
  v10 = *(_QWORD *)(v5 + 48);
  v11 = *(unsigned int *)(*(_QWORD *)(v6 + 56)
                        + 16 * *(_DWORD *)v5
                        + 8 * (v9 == 0)
                        + 4 * (v10 == 0));
  if ((int)v11 > 27)
    return 0xFFFFFFFFLL;
  v13 = *(unsigned int *)(v5 + 4);
  v14 = v13 - 1;
  if ((int)v13 < 1)
    return 0;
  v15 = *(_DWORD *)(v5 + 8);
  if (v15 < 1)
    return 0;
  if ((int)v11 >= 24)
  {
    if (*(_DWORD *)v6 == 134755144)
      v11 = (v11 + 4);
    else
      v11 = v11;
  }
  v16 = *(uint16x4_t **)(v5 + 136);
  if ((v8 & 0xFF0000) != 0x50000 && v16)
  {
    v17 = *(_DWORD *)(v5 + 128);
    if ((v17 | 8) == 8)
    {
      if ((*(_DWORD *)v5 & 0xFF00) == 0x400)
      {
        rgba32_mark_constmask(v5, v11);
      }
      else if (v7 && ((1 << v11) & 0xFFFFFE) != 0)
      {
        rgba32_mark_pixelmask_template(v5, v11);
      }
      else
      {
        rgba32_mark_pixelmask(v5, v11);
      }
    }
    else
    {
      v22 = *(_DWORD *)(v5 + 112);
      v23 = *(_DWORD *)(v5 + 116);
      v24 = (v22 + 15) & 0xFFFFFFF0;
      v25 = v24 * v23;
      if ((int)v25 <= 4096)
      {
        v27 = v562;
      }
      else
      {
        v26 = malloc_type_malloc(v25, 0x8303D2FuLL);
        if (!v26)
          return 1;
        v27 = v26;
        v16 = *(uint16x4_t **)(v5 + 136);
        v17 = *(_DWORD *)(v5 + 128);
      }
      CGSConvertBitsToMask(v16, *(_DWORD *)(v5 + 124), v27, v24, v22, v23, v17);
      v39 = *(_OWORD *)(v5 + 112);
      v558 = *(_OWORD *)(v5 + 96);
      v559 = v39;
      v40 = *(_OWORD *)(v5 + 144);
      v560 = *(_OWORD *)(v5 + 128);
      v561 = v40;
      v41 = *(_OWORD *)(v5 + 48);
      v554 = *(_OWORD *)(v5 + 32);
      v555 = v41;
      v42 = *(_OWORD *)(v5 + 80);
      v556 = *(_OWORD *)(v5 + 64);
      v557 = v42;
      v43 = *(_OWORD *)(v5 + 16);
      *(_OWORD *)v552 = *(_OWORD *)v5;
      v553 = v43;
      HIDWORD(v559) = (v22 + 15) & 0xFFFFFFF0;
      *((_QWORD *)&v560 + 1) = v27;
      if (BYTE1(v552[0]) << 8 == 1024)
        rgba32_mark_constmask((uint64_t)v552, v11);
      else
        rgba32_mark_pixelmask((uint64_t)v552, v11);
      if (v27 != (_BYTE *)v562)
      {
        v44 = v27;
        goto LABEL_1125;
      }
    }
    return 1;
  }
  v527 = v5;
  v540 = v11;
  if (BYTE1(v8) == 1)
  {
    if (v7 && ((1 << v11) & 0xFFFFFE) != 0)
    {
      rgba32_mark_pixelshape_template(v5, v11);
      return 1;
    }
LABEL_34:
    v562[0] = *(_DWORD *)(v5 + 4);
    v552[0] = v15;
    v28 = *(_QWORD *)(v5 + 88);
    v29 = (unint64_t)*(int *)(v5 + 28) >> 2;
    v30 = *(_QWORD *)(v5 + 40) + 4 * (*(int *)(v5 + 12) + v29 * *(int *)(v5 + 16));
    v31 = *(_DWORD *)(v5 + 56);
    v32 = *(_DWORD *)(v5 + 60);
    v33 = v8 & 0xFF00;
    v34 = *(int *)(v5 + 76);
    if (v33 != 256)
    {
      LODWORD(v539) = *(_DWORD *)(v5 + 64);
      v531 = *(_DWORD *)(v5 + 68);
      v543 = v28 + 4 * (v34 >> 2) * v531;
      v37 = v9 != 0;
      if (v16)
      {
        v547 = v34 >> 2;
        v550 = *(unsigned int **)(v5 + 88);
        v528 = *(_DWORD *)(v5 + 60);
        v529 = *(_DWORD *)(v5 + 56);
        v36 = 1;
        v38 = (unint64_t)v550;
        goto LABEL_59;
      }
      v546 = v29 - v13;
      if (v28)
      {
        v538 = 0;
        v45 = v31 % (int)v539;
        v46 = v28 + 4 * (v34 >> 2) * (v32 % v531);
        v47 = (unsigned int *)(v46 + 4 * v45);
        v38 = v46 + 4 * (int)v539;
        v530 = 1;
        v547 = v34 >> 2;
        v550 = v47;
        v48 = (uint32x2_t *)(*(_QWORD *)(v5 + 40) + 4 * (*(int *)(v5 + 12) + v29 * *(int *)(v5 + 16)));
        v528 = v32 % v531;
        v529 = v45;
        goto LABEL_63;
      }
      v528 = *(_DWORD *)(v5 + 60);
      v529 = *(_DWORD *)(v5 + 56);
      v49 = v34 >> 2;
      v38 = 0;
      v530 = 1;
      v50 = v13;
      goto LABEL_62;
    }
    v28 += 4 * (v31 + (v34 >> 2) * v32);
    v539 = v34 >> 2;
    if (v34 >> 2 == v29)
    {
      if ((uint64_t)(v30 - v28) < 1)
        goto LABEL_39;
      if (v13 < (v30 - v28) >> 2)
      {
        v35 = v29 * (v15 - 1);
        if (v30 <= v28 + 4 * v35 + 4 * v14)
        {
          v30 += 4 * v35;
          v29 = -(uint64_t)v29;
          v36 = 1;
          v28 += 4 * v35;
          goto LABEL_56;
        }
LABEL_39:
        v36 = 1;
LABEL_56:
        v539 = v29;
        goto LABEL_57;
      }
      v30 += 4 * v14;
      v36 = -1;
      v539 = (unint64_t)*(int *)(v5 + 28) >> 2;
      v28 += 4 * v14;
    }
    else
    {
      v36 = 1;
    }
LABEL_57:
    v528 = *(_DWORD *)(v5 + 60);
    v529 = *(_DWORD *)(v5 + 56);
    v37 = v9 != 0;
    if (v16)
    {
      v531 = 0;
      v543 = 0;
      v38 = -1;
      v547 = v539;
      v550 = 0;
LABEL_59:
      v530 = v36;
      shape_enum_clip_alloc((uint64_t)v2, v3, (int *)v16, v36, v29, 1, *(_DWORD *)(v5 + 104), *(_DWORD *)(v5 + 108), v13, v15);
      v52 = v51;
      if (!v51)
        return 1;
      goto LABEL_788;
    }
    v530 = v36;
    v531 = 0;
    v50 = v36 * (int)v13;
    v546 = v29 - v50;
    v38 = -1;
    v49 = v539;
LABEL_62:
    v538 = 0;
    v543 = 0;
    v547 = v49 - v50;
    v550 = 0;
    v47 = (unsigned int *)v28;
    v48 = (uint32x2_t *)v30;
LABEL_63:
    while (2)
    {
      v542 = v13;
      switch((int)v11)
      {
        case 0:
          v53 = (uint32x2_t *)((char *)v48 - 4 * (int)v13 + 4);
          v54 = v546 + (int)v13;
          if (v530 < 0)
            v54 = v546 - (int)v13;
          else
            v53 = v48;
          v55 = (char *)v53 + 4 * ((v54 * (v552[0] - 1)) & (v54 >> 63));
          if (v54 < 0)
            v54 = -v54;
          CGBlt_fillBytes(4 * v13, v552[0], 0, v55, 4 * v54);
          goto LABEL_786;
        case 1:
          if (BYTE1(*(_DWORD *)v5) == 2)
          {
            if ((int)v13 >= 8 && (4 * v539) <= 0x40)
            {
              v4.i32[0] = 4 * v539;
              v395 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v4.i8);
              v395.i16[0] = vaddlv_u8(v395);
              if (v395.i32[0] <= 1u)
              {
                CGSFillDRAM64(v48, 4 * (v13 + v546), 4 * v13, v552[0], v28, 4 * v547, 4 * v539, v531, 4 * v529, v528);
                goto LABEL_786;
              }
            }
          }
          else if (BYTE1(*(_DWORD *)v5) == 1)
          {
            if (v10 == 0 || v37)
            {
              if (v530 < 0)
              {
                v56 = v547 - (int)v13;
                v47 += -(int)v13 + 1;
                v57 = v546 - (int)v13;
                v48 = (uint32x2_t *)((char *)v48 - 4 * (int)v13 + 4);
              }
              else
              {
                v56 = v547 + (int)v13;
                v57 = v546 + (int)v13;
              }
              v421 = v552[0] - 1;
              v422 = (char *)&v47[(v56 * v421) & (v56 >> 63)];
              if (v56 >= 0)
                v423 = v56;
              else
                v423 = -v56;
              if (v57 >= 0)
                LODWORD(v424) = v57;
              else
                v424 = -v57;
              v547 = v423;
              CGBlt_copyBytes(4 * v13, v552[0], v422, (char *)v48 + 4 * ((v57 * v421) & (v57 >> 63)), 4 * v423, 4 * v424);
            }
            else
            {
              do
              {
                v405 = v562[0];
                do
                {
                  v48->i32[0] = *v47 | 0xFF;
                  v406 = &v47[v530];
                  if ((unint64_t)v406 >= v38)
                    v407 = -(uint64_t)(int)v539;
                  else
                    v407 = 0;
                  v47 = &v406[v407];
                  v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
                  --v405;
                }
                while (v405);
                v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
                v408 = v550;
                v409 = &v550[v547];
                if ((unint64_t)v409 >= v543)
                  v410 = -(v547 * v531);
                else
                  v410 = 0;
                v411 = &v409[v410];
                v412 = v38 + 4 * v410 + 4 * v547;
                if (v543)
                {
                  v38 = v412;
                  v408 = v411;
                }
                v550 = v408;
                if (v543)
                  v47 = v411;
                else
                  v47 += v547;
                --v552[0];
              }
              while (v552[0]);
            }
            goto LABEL_786;
          }
          if ((*(_DWORD *)v5 & 0xFF00) == 0x200)
          {
            blt_bitmap_copy_XXXX32((int)v13, v552[0], v48, v546 + (int)v13, (int)v539, v531, v28, v547, v529, v528);
          }
          else
          {
            v396 = 4 * v530;
            if (v10 == 0 || v37)
            {
              do
              {
                v397 = v562[0];
                do
                {
                  v48->i32[0] = *v47;
                  v398 = &v47[v530];
                  if ((unint64_t)v398 >= v38)
                    v399 = -(uint64_t)(int)v539;
                  else
                    v399 = 0;
                  v47 = &v398[v399];
                  v48 = (uint32x2_t *)((char *)v48 + v396);
                  --v397;
                }
                while (v397);
                v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
                v400 = v550;
                v401 = &v550[v547];
                if ((unint64_t)v401 >= v543)
                  v402 = -(v547 * v531);
                else
                  v402 = 0;
                v403 = &v401[v402];
                v404 = v38 + 4 * v402 + 4 * v547;
                if (v543)
                {
                  v38 = v404;
                  v400 = v403;
                }
                v550 = v400;
                if (v543)
                  v47 = v403;
                else
                  v47 += v547;
                --v552[0];
              }
              while (v552[0]);
            }
            else
            {
              do
              {
                v413 = v562[0];
                do
                {
                  v48->i32[0] = *v47 | 0xFF;
                  v414 = &v47[v530];
                  if ((unint64_t)v414 >= v38)
                    v415 = -(uint64_t)(int)v539;
                  else
                    v415 = 0;
                  v47 = &v414[v415];
                  v48 = (uint32x2_t *)((char *)v48 + v396);
                  --v413;
                }
                while (v413);
                v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
                v416 = v550;
                v417 = &v550[v547];
                if ((unint64_t)v417 >= v543)
                  v418 = -(v547 * v531);
                else
                  v418 = 0;
                v419 = &v417[v418];
                v420 = v38 + 4 * v418 + 4 * v547;
                if (v543)
                {
                  v38 = v420;
                  v416 = v419;
                }
                v550 = v416;
                if (v543)
                  v47 = v419;
                else
                  v47 += v547;
                --v552[0];
              }
              while (v552[0]);
            }
          }
          goto LABEL_786;
        case 2:
          if (*(unsigned __int8 *)(v5 + 1) << 8 != 512)
          {
            v532 = v28;
            v533 = v29;
            v534 = v30;
            do
            {
              v384 = v562[0];
              do
              {
                v385 = *v47;
                if (*v47)
                {
                  if (*v47 == 255)
                    v48->i32[0] = v385;
                  else
                    DplusDM_19478(v48, v385, v48->i32[0], ~*(_BYTE *)v47);
                }
                v386 = &v47[v530];
                if ((unint64_t)v386 >= v38)
                  v387 = -(uint64_t)(int)v539;
                else
                  v387 = 0;
                v47 = &v386[v387];
                v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
                --v384;
              }
              while (v384);
              v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
              v388 = v550;
              v389 = &v550[v547];
              v390 = -(v547 * v531);
              if ((unint64_t)v389 < v543)
                v390 = 0;
              v391 = &v389[v390];
              v392 = v38 + 4 * v390 + 4 * v547;
              if (v543)
              {
                v38 = v392;
                v388 = v391;
              }
              v550 = v388;
              if (v543)
                v47 = v391;
              else
                v47 += v547;
              --v552[0];
            }
            while (v552[0]);
            goto LABEL_784;
          }
          blt_bitmap_blend_XXXA32((int)v13, v552[0], v48, v546 + (int)v13, (int)v539, v531, v28, v547, v529, v528);
          goto LABEL_786;
        case 3:
          v532 = v28;
          v533 = v29;
          v534 = v30;
          do
          {
            v58 = v562[0];
            do
            {
              if (v48->i32[0] == 255)
              {
                v59 = *v47;
                if (!v37)
                  v59 = 255;
                v48->i32[0] = v59 | *v47 & 0xFFFFFF00;
              }
              else if (v48->i32[0])
              {
                if (v37)
                  v60 = *v47;
                else
                  v60 = -1;
                DAM_19501(v48, *v47, v60, v48->i32[0]);
              }
              else
              {
                v48->i32[0] = 0;
              }
              v61 = &v47[v530];
              if ((unint64_t)v61 >= v38)
                v62 = -(uint64_t)(int)v539;
              else
                v62 = 0;
              v47 = &v61[v62];
              v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
              --v58;
            }
            while (v58);
            v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
            v63 = v550;
            v64 = &v550[v547];
            v65 = -(v547 * v531);
            if ((unint64_t)v64 < v543)
              v65 = 0;
            v66 = &v64[v65];
            v67 = v38 + 4 * v65 + 4 * v547;
            if (v543)
            {
              v38 = v67;
              v63 = v66;
            }
            v550 = v63;
            if (v543)
              v47 = v66;
            else
              v47 += v547;
            --v552[0];
          }
          while (v552[0]);
          goto LABEL_784;
        case 4:
          v532 = v28;
          v533 = v29;
          v534 = v30;
          do
          {
            v68 = v562[0];
            do
            {
              if (~v48->i8[0] == 255)
              {
                v69 = *v47;
                if (!v37)
                  v69 = 255;
                v48->i32[0] = v69 | *v47 & 0xFFFFFF00;
              }
              else if (v48->i8[0] == -1)
              {
                v48->i32[0] = 0;
              }
              else
              {
                if (v37)
                  v70 = *v47;
                else
                  v70 = -1;
                DAM_19501(v48, *v47, v70, ~v48->i8[0]);
              }
              v71 = &v47[v530];
              if ((unint64_t)v71 >= v38)
                v72 = -(uint64_t)(int)v539;
              else
                v72 = 0;
              v47 = &v71[v72];
              v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
              --v68;
            }
            while (v68);
            v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
            v73 = v550;
            v74 = &v550[v547];
            v75 = -(v547 * v531);
            if ((unint64_t)v74 < v543)
              v75 = 0;
            v76 = &v74[v75];
            v77 = v38 + 4 * v75 + 4 * v547;
            if (v543)
            {
              v38 = v77;
              v73 = v76;
            }
            v550 = v73;
            if (v543)
              v47 = v76;
            else
              v47 += v547;
            --v552[0];
          }
          while (v552[0]);
          goto LABEL_784;
        case 5:
          v532 = v28;
          v533 = v29;
          v534 = v30;
          v78 = v552[0];
          do
          {
            v535 = v78;
            v79 = v13;
            do
            {
              DMplusDM_19477((unsigned int *)v48, *v47, v48->i32[0], v48->i32[0], ~*(_BYTE *)v47);
              v80 = &v47[v530];
              if ((unint64_t)v80 >= v38)
                v81 = -(uint64_t)(int)v539;
              else
                v81 = 0;
              v47 = &v80[v81];
              v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
              --v79;
            }
            while (v79);
            v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
            v82 = v550;
            v83 = &v550[v547];
            LODWORD(v13) = v542;
            v84 = -(v547 * v531);
            if ((unint64_t)v83 < v543)
              v84 = 0;
            v85 = &v83[v84];
            v86 = v38 + 4 * v84 + 4 * v547;
            if (v543)
            {
              v38 = v86;
              v82 = v85;
            }
            v550 = v82;
            if (v543)
              v47 = v85;
            else
              v47 += v547;
            v78 = v535 - 1;
            v552[0] = v535 - 1;
          }
          while (v535 != 1);
          goto LABEL_784;
        case 6:
          v532 = v28;
          v533 = v29;
          v534 = v30;
          do
          {
            v87 = v562[0];
            do
            {
              if (v48->i32[0] != 0xFF)
              {
                if (~v48->i8[0] == 255)
                {
                  v88 = *v47;
                  if (!v37)
                    v88 = 255;
                  v48->i32[0] = v88 | *v47 & 0xFFFFFF00;
                }
                else
                {
                  if (v37)
                    v89 = *v47;
                  else
                    v89 = -1;
                  DplusDAM_19500(v48, v48->i32[0], *v47, v89, ~v48->i8[0]);
                }
              }
              v90 = &v47[v530];
              if ((unint64_t)v90 >= v38)
                v91 = -(uint64_t)(int)v539;
              else
                v91 = 0;
              v47 = &v90[v91];
              v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
              --v87;
            }
            while (v87);
            v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
            v92 = v550;
            v93 = &v550[v547];
            v94 = -(v547 * v531);
            if ((unint64_t)v93 < v543)
              v94 = 0;
            v95 = &v93[v94];
            v96 = v38 + 4 * v94 + 4 * v547;
            if (v543)
            {
              v38 = v96;
              v92 = v95;
            }
            v550 = v92;
            if (v543)
              v47 = v95;
            else
              v47 += v547;
            --v552[0];
          }
          while (v552[0]);
          goto LABEL_784;
        case 7:
          v532 = v28;
          v533 = v29;
          v534 = v30;
          while (1)
          {
            v97 = v562[0];
            do
            {
              v98 = *v47;
              if (*v47)
              {
                if (v98 == 255)
                  goto LABEL_172;
                v98 = PDM_19476(v48->i32[0], *v47);
              }
              v48->i32[0] = v98;
LABEL_172:
              v99 = &v47[v530];
              if ((unint64_t)v99 >= v38)
                v100 = -(uint64_t)(int)v539;
              else
                v100 = 0;
              v47 = &v99[v100];
              v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
              --v97;
            }
            while (v97);
            v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
            v101 = v550;
            v102 = &v550[v547];
            if ((unint64_t)v102 >= v543)
              v103 = -(v547 * v531);
            else
              v103 = 0;
            v104 = &v102[v103];
            v105 = v38 + 4 * v103 + 4 * v547;
            if (v543)
            {
              v38 = v105;
              v101 = v104;
            }
            v550 = v101;
            if (v543)
              v47 = v104;
            else
              v47 += v547;
            if (!--v552[0])
              goto LABEL_784;
          }
        case 8:
          v532 = v28;
          v533 = v29;
          v534 = v30;
          do
          {
            v106 = v562[0];
            do
            {
              v107 = *(unsigned __int8 *)v47 ^ 0xFF;
              if (v107)
              {
                if (v107 == 255)
                  goto LABEL_192;
                v107 = PDM_19476(v48->i32[0], v107);
              }
              v48->i32[0] = v107;
LABEL_192:
              v108 = &v47[v530];
              if ((unint64_t)v108 >= v38)
                v109 = -(uint64_t)(int)v539;
              else
                v109 = 0;
              v47 = &v108[v109];
              v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
              --v106;
            }
            while (v106);
            v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
            v110 = v550;
            v111 = &v550[v547];
            if ((unint64_t)v111 >= v543)
              v112 = -(v547 * v531);
            else
              v112 = 0;
            v113 = &v111[v112];
            v114 = v38 + 4 * v112 + 4 * v547;
            if (v543)
            {
              v38 = v114;
              v110 = v113;
            }
            v550 = v110;
            if (v543)
              v47 = v113;
            else
              v47 += v547;
            --v552[0];
          }
          while (v552[0]);
LABEL_784:
          v5 = v527;
LABEL_785:
          LODWORD(v11) = v540;
          v29 = v533;
          v30 = v534;
          v28 = v532;
LABEL_786:
          v52 = v538;
          if (!v538)
            return 1;
          v551 = 0;
LABEL_788:
          if (!shape_enum_clip_next(v52, (int *)&v551 + 1, &v551, v562, v552))
          {
            v44 = (void *)v52;
            goto LABEL_1125;
          }
          v538 = v52;
          if (v543)
          {
            v48 = (uint32x2_t *)(v30 + 4 * v29 * (int)v551 + 4 * SHIDWORD(v551));
            LODWORD(v13) = v562[0];
            v393 = v28 + 4 * v547 * (((int)v551 + *(_DWORD *)(v5 + 60)) % v531);
            v47 = (unsigned int *)(v393 + 4 * ((HIDWORD(v551) + *(_DWORD *)(v5 + 56)) % (int)v539));
            v38 = v393 + 4 * (int)v539;
            v550 = v47;
            v394 = v562[0];
            v528 = ((int)v551 + *(_DWORD *)(v5 + 60)) % v531;
            v529 = (HIDWORD(v551) + *(_DWORD *)(v5 + 56)) % (int)v539;
          }
          else
          {
            LODWORD(v13) = v562[0];
            v394 = v562[0] * v530;
            v48 = (uint32x2_t *)(v30 + 4 * v29 * (int)v551 + 4 * HIDWORD(v551) * v530);
            v47 = (unsigned int *)(v28 + 4 * (int)v551 * (int)v539 + 4 * HIDWORD(v551) * v530);
            v547 = (int)v539 - v562[0] * v530;
          }
          v546 = v29 - v394;
          continue;
        case 9:
          v532 = v28;
          v533 = v29;
          v534 = v30;
          v115 = v552[0];
          do
          {
            v536 = v115;
            v116 = v13;
            do
            {
              DMplusDM_19477((unsigned int *)v48, *v47, ~v48->i8[0], v48->i32[0], *v47);
              v117 = &v47[v530];
              if ((unint64_t)v117 >= v38)
                v118 = -(uint64_t)(int)v539;
              else
                v118 = 0;
              v47 = &v117[v118];
              v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
              --v116;
            }
            while (v116);
            v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
            v119 = v550;
            v120 = &v550[v547];
            LODWORD(v13) = v542;
            v121 = -(v547 * v531);
            if ((unint64_t)v120 < v543)
              v121 = 0;
            v122 = &v120[v121];
            v123 = v38 + 4 * v121 + 4 * v547;
            if (v543)
            {
              v38 = v123;
              v119 = v122;
            }
            v550 = v119;
            if (v543)
              v47 = v122;
            else
              v47 += v547;
            v115 = v536 - 1;
            v552[0] = v536 - 1;
          }
          while (v536 != 1);
          goto LABEL_784;
        case 10:
          v532 = v28;
          v533 = v29;
          v534 = v30;
          v124 = v552[0];
          do
          {
            v537 = v124;
            v125 = v13;
            do
            {
              DMplusDM_19477((unsigned int *)v48, *v47, ~v48->i8[0], v48->i32[0], ~*(_BYTE *)v47);
              v126 = &v47[v530];
              if ((unint64_t)v126 >= v38)
                v127 = -(uint64_t)(int)v539;
              else
                v127 = 0;
              v47 = &v126[v127];
              v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
              --v125;
            }
            while (v125);
            v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
            v128 = v550;
            v129 = &v550[v547];
            LODWORD(v13) = v542;
            v130 = -(v547 * v531);
            if ((unint64_t)v129 < v543)
              v130 = 0;
            v131 = &v129[v130];
            v132 = v38 + 4 * v130 + 4 * v547;
            if (v543)
            {
              v38 = v132;
              v128 = v131;
            }
            v550 = v128;
            if (v543)
              v47 = v131;
            else
              v47 += v547;
            v124 = v537 - 1;
            v552[0] = v537 - 1;
          }
          while (v537 != 1);
          goto LABEL_784;
        case 11:
          v532 = v28;
          v533 = v29;
          v534 = v30;
          v133 = v552[0];
          do
          {
            v134 = v13;
            do
            {
              if (v10)
                v135 = v48->i32[0];
              else
                v135 = -1;
              if (v37)
                v136 = *v47;
              else
                v136 = -1;
              *(int32x2_t *)v4.i8 = DAplusdDA_19479(v48, v48->i32[0], v135, *v47, v136, v4);
              v137 = &v47[v530];
              if ((unint64_t)v137 >= v38)
                v138 = -(uint64_t)(int)v539;
              else
                v138 = 0;
              v47 = &v137[v138];
              v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
              --v134;
            }
            while (v134);
            v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
            v139 = v550;
            v140 = &v550[v547];
            LODWORD(v13) = v542;
            v141 = -(v547 * v531);
            if ((unint64_t)v140 < v543)
              v141 = 0;
            v142 = &v140[v141];
            v143 = v38 + 4 * v141 + 4 * v547;
            if (v543)
            {
              v38 = v143;
              v139 = v142;
            }
            v550 = v139;
            if (v543)
              v47 = v142;
            else
              v47 += v547;
            v552[0] = --v133;
          }
          while (v133);
          goto LABEL_784;
        case 12:
          do
          {
            v144 = v562[0];
            do
            {
              v145 = *v47;
              if (!v37)
                v145 = 255;
              v146 = ((*v47 >> 8) & 0xFF00FF) + (((unsigned __int32)v48->i32[0] >> 8) & 0xFF00FF);
              v48->i32[0] = (v146 << 8) & 0xFF00FF00 | ((v145 | *v47 & 0xFF0000) + (v48->i32[0] & 0xFF00FF)) & 0xFF00FF | (15 * ((((v145 | *v47 & 0xFF0000) + (v48->i32[0] & 0xFF00FF)) >> 8) & 0x10001 | v146 & 0x1000100)) | (240 * ((((v145 | *v47 & 0xFF0000) + (v48->i32[0] & 0xFF00FF)) >> 8) & 0x10001 | v146 & 0x1000100));
              v147 = &v47[v530];
              if ((unint64_t)v147 >= v38)
                v148 = -(uint64_t)(int)v539;
              else
                v148 = 0;
              v47 = &v147[v148];
              v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
              --v144;
            }
            while (v144);
            v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
            v149 = v550;
            v150 = &v550[v547];
            if ((unint64_t)v150 >= v543)
              v151 = -(v547 * v531);
            else
              v151 = 0;
            v152 = &v150[v151];
            v153 = v38 + 4 * v151 + 4 * v547;
            if (v543)
            {
              v38 = v153;
              v149 = v152;
            }
            v550 = v149;
            if (v543)
              v47 = v152;
            else
              v47 += v547;
            --v552[0];
          }
          while (v552[0]);
          goto LABEL_786;
        case 13:
          v532 = v28;
          v533 = v29;
          v534 = v30;
          while (1)
          {
            v154 = v562[0];
            do
            {
              if (!v37)
              {
                LOBYTE(v155) = -1;
LABEL_280:
                if (v10)
                {
                  v156 = *v47;
                  if (v48->i32[0])
                  {
                    v157 = v48->i32[0];
                    goto LABEL_284;
                  }
                  v158 = v156 & 0xFFFFFF00 | v155;
                }
                else
                {
                  v156 = *v47;
                  LOBYTE(v157) = -1;
LABEL_284:
                  v158 = PDAmultiplyPDA_19480(v48->i32[0], v157, v156, v155);
                }
                v48->i32[0] = v158;
                goto LABEL_287;
              }
              v155 = *v47;
              if (*v47)
                goto LABEL_280;
LABEL_287:
              v159 = &v47[v530];
              if ((unint64_t)v159 >= v38)
                v160 = -(uint64_t)(int)v539;
              else
                v160 = 0;
              v47 = &v159[v160];
              v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
              --v154;
            }
            while (v154);
            v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
            v161 = v550;
            v162 = &v550[v547];
            v163 = -(v547 * v531);
            if ((unint64_t)v162 < v543)
              v163 = 0;
            v164 = &v162[v163];
            v165 = v38 + 4 * v163 + 4 * v547;
            if (v543)
            {
              v38 = v165;
              v161 = v164;
            }
            v550 = v161;
            if (v543)
              v47 = v164;
            else
              v47 += v547;
            if (!--v552[0])
              goto LABEL_785;
          }
        case 14:
          v532 = v28;
          v533 = v29;
          v534 = v30;
          while (1)
          {
            v166 = v562[0];
            do
            {
              if (!v37)
              {
                LOBYTE(v167) = -1;
LABEL_306:
                if (v10)
                {
                  v168 = *v47;
                  if (v48->i32[0])
                  {
                    v169 = v48->i32[0];
                    goto LABEL_310;
                  }
                  v170 = v168 & 0xFFFFFF00 | v167;
                }
                else
                {
                  v168 = *v47;
                  LOBYTE(v169) = -1;
LABEL_310:
                  v170 = PDAscreenPDA_19481(v48->i32[0], v169, v168, v167);
                }
                v48->i32[0] = v170;
                goto LABEL_313;
              }
              v167 = *v47;
              if (*v47)
                goto LABEL_306;
LABEL_313:
              v171 = &v47[v530];
              if ((unint64_t)v171 >= v38)
                v172 = -(uint64_t)(int)v539;
              else
                v172 = 0;
              v47 = &v171[v172];
              v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
              --v166;
            }
            while (v166);
            v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
            v173 = v550;
            v174 = &v550[v547];
            v175 = -(v547 * v531);
            if ((unint64_t)v174 < v543)
              v175 = 0;
            v176 = &v174[v175];
            v177 = v38 + 4 * v175 + 4 * v547;
            if (v543)
            {
              v38 = v177;
              v173 = v176;
            }
            v550 = v173;
            if (v543)
              v47 = v176;
            else
              v47 += v547;
            if (!--v552[0])
              goto LABEL_785;
          }
        case 15:
          v532 = v28;
          v533 = v29;
          v534 = v30;
          while (1)
          {
            v178 = v562[0];
            do
            {
              if (!v37)
              {
                LOBYTE(v179) = -1;
LABEL_332:
                if (v10)
                {
                  v180 = *v47;
                  if (v48->i32[0])
                  {
                    v181 = v48->i32[0];
                    goto LABEL_336;
                  }
                  v182 = v180 & 0xFFFFFF00 | v179;
                }
                else
                {
                  v180 = *v47;
                  LOBYTE(v181) = -1;
LABEL_336:
                  v182 = PDAoverlayPDA_19482(v48->i32[0], v181, v180, v179);
                }
                v48->i32[0] = v182;
                goto LABEL_339;
              }
              v179 = *v47;
              if (*v47)
                goto LABEL_332;
LABEL_339:
              v183 = &v47[v530];
              if ((unint64_t)v183 >= v38)
                v184 = -(uint64_t)(int)v539;
              else
                v184 = 0;
              v47 = &v183[v184];
              v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
              --v178;
            }
            while (v178);
            v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
            v185 = v550;
            v186 = &v550[v547];
            v187 = -(v547 * v531);
            if ((unint64_t)v186 < v543)
              v187 = 0;
            v188 = &v186[v187];
            v189 = v38 + 4 * v187 + 4 * v547;
            if (v543)
            {
              v38 = v189;
              v185 = v188;
            }
            v550 = v185;
            if (v543)
              v47 = v188;
            else
              v47 += v547;
            if (!--v552[0])
              goto LABEL_785;
          }
        case 16:
          v532 = v28;
          v533 = v29;
          v534 = v30;
          while (1)
          {
            v190 = v562[0];
            do
            {
              if (!v37)
              {
                LOBYTE(v191) = -1;
LABEL_358:
                if (v10)
                {
                  v192 = *v47;
                  if (v48->i32[0])
                  {
                    v193 = v48->i32[0];
                    goto LABEL_362;
                  }
                  v194 = v192 & 0xFFFFFF00 | v191;
                }
                else
                {
                  v192 = *v47;
                  LOBYTE(v193) = -1;
LABEL_362:
                  v194 = PDAdarkenPDA_19484(v48->i32[0], v193, v192, v191);
                }
                v48->i32[0] = v194;
                goto LABEL_365;
              }
              v191 = *v47;
              if (*v47)
                goto LABEL_358;
LABEL_365:
              v195 = &v47[v530];
              if ((unint64_t)v195 >= v38)
                v196 = -(uint64_t)(int)v539;
              else
                v196 = 0;
              v47 = &v195[v196];
              v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
              --v190;
            }
            while (v190);
            v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
            v197 = v550;
            v198 = &v550[v547];
            v199 = -(v547 * v531);
            if ((unint64_t)v198 < v543)
              v199 = 0;
            v200 = &v198[v199];
            v201 = v38 + 4 * v199 + 4 * v547;
            if (v543)
            {
              v38 = v201;
              v197 = v200;
            }
            v550 = v197;
            if (v543)
              v47 = v200;
            else
              v47 += v547;
            if (!--v552[0])
              goto LABEL_785;
          }
        case 17:
          v532 = v28;
          v533 = v29;
          v534 = v30;
          while (1)
          {
            v202 = v562[0];
            do
            {
              if (!v37)
              {
                LOBYTE(v203) = -1;
LABEL_384:
                if (v10)
                {
                  v204 = *v47;
                  if (v48->i32[0])
                  {
                    v205 = v48->i32[0];
                    goto LABEL_388;
                  }
                  v206 = v204 & 0xFFFFFF00 | v203;
                }
                else
                {
                  v204 = *v47;
                  LOBYTE(v205) = -1;
LABEL_388:
                  v206 = PDAlightenPDA_19483(v48->i32[0], v205, v204, v203);
                }
                v48->i32[0] = v206;
                goto LABEL_391;
              }
              v203 = *v47;
              if (*v47)
                goto LABEL_384;
LABEL_391:
              v207 = &v47[v530];
              if ((unint64_t)v207 >= v38)
                v208 = -(uint64_t)(int)v539;
              else
                v208 = 0;
              v47 = &v207[v208];
              v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
              --v202;
            }
            while (v202);
            v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
            v209 = v550;
            v210 = &v550[v547];
            v211 = -(v547 * v531);
            if ((unint64_t)v210 < v543)
              v211 = 0;
            v212 = &v210[v211];
            v213 = v38 + 4 * v211 + 4 * v547;
            if (v543)
            {
              v38 = v213;
              v209 = v212;
            }
            v550 = v209;
            if (v543)
              v47 = v212;
            else
              v47 += v547;
            if (!--v552[0])
              goto LABEL_785;
          }
        case 18:
          v532 = v28;
          v533 = v29;
          v534 = v30;
          while (1)
          {
            v214 = v562[0];
            do
            {
              if (!v37)
              {
                LOBYTE(v215) = -1;
LABEL_410:
                if (v10)
                {
                  v216 = *v47;
                  if (v48->i32[0])
                  {
                    v217 = v48->i32[0];
                    goto LABEL_414;
                  }
                  v218 = v216 & 0xFFFFFF00 | v215;
                }
                else
                {
                  v216 = *v47;
                  LOBYTE(v217) = -1;
LABEL_414:
                  v218 = PDAcolordodgePDA_19485(v48->i32[0], v217, v216, v215);
                }
                v48->i32[0] = v218;
                goto LABEL_417;
              }
              v215 = *v47;
              if (*v47)
                goto LABEL_410;
LABEL_417:
              v219 = &v47[v530];
              if ((unint64_t)v219 >= v38)
                v220 = -(uint64_t)(int)v539;
              else
                v220 = 0;
              v47 = &v219[v220];
              v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
              --v214;
            }
            while (v214);
            v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
            v221 = v550;
            v222 = &v550[v547];
            v223 = -(v547 * v531);
            if ((unint64_t)v222 < v543)
              v223 = 0;
            v224 = &v222[v223];
            v225 = v38 + 4 * v223 + 4 * v547;
            if (v543)
            {
              v38 = v225;
              v221 = v224;
            }
            v550 = v221;
            if (v543)
              v47 = v224;
            else
              v47 += v547;
            if (!--v552[0])
              goto LABEL_785;
          }
        case 19:
          v532 = v28;
          v533 = v29;
          v534 = v30;
          while (1)
          {
            v226 = v562[0];
            do
            {
              if (!v37)
              {
                LOBYTE(v227) = -1;
LABEL_436:
                if (v10)
                {
                  v228 = *v47;
                  if (v48->i32[0])
                  {
                    v229 = v48->i32[0];
                    goto LABEL_440;
                  }
                  v230 = v228 & 0xFFFFFF00 | v227;
                }
                else
                {
                  v228 = *v47;
                  LOBYTE(v229) = -1;
LABEL_440:
                  v230 = PDAcolorburnPDA_19486(v48->i32[0], v229, v228, v227);
                }
                v48->i32[0] = v230;
                goto LABEL_443;
              }
              v227 = *v47;
              if (*v47)
                goto LABEL_436;
LABEL_443:
              v231 = &v47[v530];
              if ((unint64_t)v231 >= v38)
                v232 = -(uint64_t)(int)v539;
              else
                v232 = 0;
              v47 = &v231[v232];
              v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
              --v226;
            }
            while (v226);
            v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
            v233 = v550;
            v234 = &v550[v547];
            v235 = -(v547 * v531);
            if ((unint64_t)v234 < v543)
              v235 = 0;
            v236 = &v234[v235];
            v237 = v38 + 4 * v235 + 4 * v547;
            if (v543)
            {
              v38 = v237;
              v233 = v236;
            }
            v550 = v233;
            if (v543)
              v47 = v236;
            else
              v47 += v547;
            if (!--v552[0])
              goto LABEL_785;
          }
        case 20:
          v532 = v28;
          v533 = v29;
          v534 = v30;
          while (1)
          {
            v238 = v562[0];
            do
            {
              if (!v37)
              {
                LOBYTE(v239) = -1;
LABEL_462:
                if (v10)
                {
                  v240 = *v47;
                  if (v48->i32[0])
                  {
                    v241 = v48->i32[0];
                    goto LABEL_466;
                  }
                  v242 = v240 & 0xFFFFFF00 | v239;
                }
                else
                {
                  v240 = *v47;
                  LOBYTE(v241) = -1;
LABEL_466:
                  v242 = PDAsoftlightPDA_19488(v48->i32[0], v241, v240, v239);
                }
                v48->i32[0] = v242;
                goto LABEL_469;
              }
              v239 = *v47;
              if (*v47)
                goto LABEL_462;
LABEL_469:
              v243 = &v47[v530];
              if ((unint64_t)v243 >= v38)
                v244 = -(uint64_t)(int)v539;
              else
                v244 = 0;
              v47 = &v243[v244];
              v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
              --v238;
            }
            while (v238);
            v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
            v245 = v550;
            v246 = &v550[v547];
            v247 = -(v547 * v531);
            if ((unint64_t)v246 < v543)
              v247 = 0;
            v248 = &v246[v247];
            v249 = v38 + 4 * v247 + 4 * v547;
            if (v543)
            {
              v38 = v249;
              v245 = v248;
            }
            v550 = v245;
            if (v543)
              v47 = v248;
            else
              v47 += v547;
            if (!--v552[0])
              goto LABEL_785;
          }
        case 21:
          v532 = v28;
          v533 = v29;
          v534 = v30;
          while (1)
          {
            v250 = v562[0];
            do
            {
              if (!v37)
              {
                LOBYTE(v251) = -1;
LABEL_488:
                if (v10)
                {
                  v252 = *v47;
                  if (v48->i32[0])
                  {
                    v253 = v48->i32[0];
                    goto LABEL_492;
                  }
                  v254 = v252 & 0xFFFFFF00 | v251;
                }
                else
                {
                  v252 = *v47;
                  LOBYTE(v253) = -1;
LABEL_492:
                  v254 = PDAhardlightPDA_19487(v48->i32[0], v253, v252, v251);
                }
                v48->i32[0] = v254;
                goto LABEL_495;
              }
              v251 = *v47;
              if (*v47)
                goto LABEL_488;
LABEL_495:
              v255 = &v47[v530];
              if ((unint64_t)v255 >= v38)
                v256 = -(uint64_t)(int)v539;
              else
                v256 = 0;
              v47 = &v255[v256];
              v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
              --v250;
            }
            while (v250);
            v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
            v257 = v550;
            v258 = &v550[v547];
            v259 = -(v547 * v531);
            if ((unint64_t)v258 < v543)
              v259 = 0;
            v260 = &v258[v259];
            v261 = v38 + 4 * v259 + 4 * v547;
            if (v543)
            {
              v38 = v261;
              v257 = v260;
            }
            v550 = v257;
            if (v543)
              v47 = v260;
            else
              v47 += v547;
            if (!--v552[0])
              goto LABEL_785;
          }
        case 22:
          v532 = v28;
          v533 = v29;
          v534 = v30;
          while (1)
          {
            v262 = v562[0];
            do
            {
              if (!v37)
              {
                LOBYTE(v263) = -1;
LABEL_514:
                if (v10)
                {
                  v264 = *v47;
                  if (v48->i32[0])
                  {
                    v265 = v48->i32[0];
                    goto LABEL_518;
                  }
                  v266 = v264 & 0xFFFFFF00 | v263;
                }
                else
                {
                  v264 = *v47;
                  LOBYTE(v265) = -1;
LABEL_518:
                  v266 = PDAdifferencePDA_19489(v48->i32[0], v265, v264, v263);
                }
                v48->i32[0] = v266;
                goto LABEL_521;
              }
              v263 = *v47;
              if (*v47)
                goto LABEL_514;
LABEL_521:
              v267 = &v47[v530];
              if ((unint64_t)v267 >= v38)
                v268 = -(uint64_t)(int)v539;
              else
                v268 = 0;
              v47 = &v267[v268];
              v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
              --v262;
            }
            while (v262);
            v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
            v269 = v550;
            v270 = &v550[v547];
            v271 = -(v547 * v531);
            if ((unint64_t)v270 < v543)
              v271 = 0;
            v272 = &v270[v271];
            v273 = v38 + 4 * v271 + 4 * v547;
            if (v543)
            {
              v38 = v273;
              v269 = v272;
            }
            v550 = v269;
            if (v543)
              v47 = v272;
            else
              v47 += v547;
            if (!--v552[0])
              goto LABEL_785;
          }
        case 23:
          v532 = v28;
          v533 = v29;
          v534 = v30;
          while (1)
          {
            v274 = v562[0];
            do
            {
              if (!v37)
              {
                LOBYTE(v275) = -1;
LABEL_540:
                if (v10)
                {
                  v276 = *v47;
                  if (v48->i32[0])
                  {
                    v277 = v48->i32[0];
                    goto LABEL_544;
                  }
                  v278 = v276 & 0xFFFFFF00 | v275;
                }
                else
                {
                  v276 = *v47;
                  LOBYTE(v277) = -1;
LABEL_544:
                  v278 = PDAexclusionPDA_19490(v48->i32[0], v277, v276, v275);
                }
                v48->i32[0] = v278;
                goto LABEL_547;
              }
              v275 = *v47;
              if (*v47)
                goto LABEL_540;
LABEL_547:
              v279 = &v47[v530];
              if ((unint64_t)v279 >= v38)
                v280 = -(uint64_t)(int)v539;
              else
                v280 = 0;
              v47 = &v279[v280];
              v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
              --v274;
            }
            while (v274);
            v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
            v281 = v550;
            v282 = &v550[v547];
            v283 = -(v547 * v531);
            if ((unint64_t)v282 < v543)
              v283 = 0;
            v284 = &v282[v283];
            v285 = v38 + 4 * v283 + 4 * v547;
            if (v543)
            {
              v38 = v285;
              v281 = v284;
            }
            v550 = v281;
            if (v543)
              v47 = v284;
            else
              v47 += v547;
            if (!--v552[0])
              goto LABEL_785;
          }
        case 24:
          v532 = v28;
          v533 = v29;
          v534 = v30;
          while (1)
          {
            v286 = v562[0];
            do
            {
              if (!v37)
              {
                LOBYTE(v287) = -1;
LABEL_566:
                if (v10)
                {
                  v288 = *v47;
                  if (v48->i32[0])
                  {
                    v289 = v48->i32[0];
                    goto LABEL_570;
                  }
                  v290 = v288 & 0xFFFFFF00 | v287;
                }
                else
                {
                  v288 = *v47;
                  LOBYTE(v289) = -1;
LABEL_570:
                  v290 = PDAhuePDA_19491(v48->i32[0], v289, v288, v287);
                }
                v48->i32[0] = v290;
                goto LABEL_573;
              }
              v287 = *v47;
              if (*v47)
                goto LABEL_566;
LABEL_573:
              v291 = &v47[v530];
              if ((unint64_t)v291 >= v38)
                v292 = -(uint64_t)(int)v539;
              else
                v292 = 0;
              v47 = &v291[v292];
              v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
              --v286;
            }
            while (v286);
            v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
            v293 = v550;
            v294 = &v550[v547];
            v295 = -(v547 * v531);
            if ((unint64_t)v294 < v543)
              v295 = 0;
            v296 = &v294[v295];
            v297 = v38 + 4 * v295 + 4 * v547;
            if (v543)
            {
              v38 = v297;
              v293 = v296;
            }
            v550 = v293;
            if (v543)
              v47 = v296;
            else
              v47 += v547;
            if (!--v552[0])
              goto LABEL_785;
          }
        case 25:
          v532 = v28;
          v533 = v29;
          v534 = v30;
          while (1)
          {
            v298 = v562[0];
            do
            {
              if (!v37)
              {
                LOBYTE(v299) = -1;
LABEL_592:
                if (v10)
                {
                  v300 = *v47;
                  if (v48->i32[0])
                  {
                    v301 = v48->i32[0];
                    goto LABEL_596;
                  }
                  v302 = v300 & 0xFFFFFF00 | v299;
                }
                else
                {
                  v300 = *v47;
                  LOBYTE(v301) = -1;
LABEL_596:
                  v302 = PDAsaturationPDA_19492(v48->i32[0], v301, v300, v299);
                }
                v48->i32[0] = v302;
                goto LABEL_599;
              }
              v299 = *v47;
              if (*v47)
                goto LABEL_592;
LABEL_599:
              v303 = &v47[v530];
              if ((unint64_t)v303 >= v38)
                v304 = -(uint64_t)(int)v539;
              else
                v304 = 0;
              v47 = &v303[v304];
              v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
              --v298;
            }
            while (v298);
            v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
            v305 = v550;
            v306 = &v550[v547];
            v307 = -(v547 * v531);
            if ((unint64_t)v306 < v543)
              v307 = 0;
            v308 = &v306[v307];
            v309 = v38 + 4 * v307 + 4 * v547;
            if (v543)
            {
              v38 = v309;
              v305 = v308;
            }
            v550 = v305;
            if (v543)
              v47 = v308;
            else
              v47 += v547;
            if (!--v552[0])
              goto LABEL_785;
          }
        case 26:
          v532 = v28;
          v533 = v29;
          v534 = v30;
          while (1)
          {
            v310 = v562[0];
            do
            {
              if (v37)
              {
                v311 = *v47;
                if (!*v47)
                  goto LABEL_624;
                if (!v10)
                {
LABEL_620:
                  v313 = *v47;
                  v312 = v48->i32[0];
                  LOBYTE(v314) = -1;
                  goto LABEL_621;
                }
              }
              else
              {
                LOBYTE(v311) = -1;
                if (!v10)
                  goto LABEL_620;
              }
              v312 = v48->i32[0];
              v313 = *v47;
              if (!v48->i32[0])
              {
                v315 = v313 & 0xFFFFFF00 | v311;
                goto LABEL_623;
              }
              v314 = v48->i32[0];
LABEL_621:
              v315 = PDAluminosityPDA_19493(v313, v311, v312, v314);
LABEL_623:
              v48->i32[0] = v315;
LABEL_624:
              v316 = &v47[v530];
              if ((unint64_t)v316 >= v38)
                v317 = -(uint64_t)(int)v539;
              else
                v317 = 0;
              v47 = &v316[v317];
              v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
              --v310;
            }
            while (v310);
            v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
            v318 = v550;
            v319 = &v550[v547];
            v320 = -(v547 * v531);
            if ((unint64_t)v319 < v543)
              v320 = 0;
            v321 = &v319[v320];
            v322 = v38 + 4 * v320 + 4 * v547;
            if (v543)
            {
              v38 = v322;
              v318 = v321;
            }
            v550 = v318;
            if (v543)
              v47 = v321;
            else
              v47 += v547;
            if (!--v552[0])
              goto LABEL_785;
          }
        case 27:
          v532 = v28;
          v533 = v29;
          v534 = v30;
          while (1)
          {
            v323 = v562[0];
            do
            {
              if (!v37)
              {
                LOBYTE(v324) = -1;
LABEL_643:
                if (v10)
                {
                  v325 = *v47;
                  if (v48->i32[0])
                  {
                    v326 = v48->i32[0];
                    goto LABEL_647;
                  }
                  v327 = v325 & 0xFFFFFF00 | v324;
                }
                else
                {
                  v325 = *v47;
                  LOBYTE(v326) = -1;
LABEL_647:
                  v327 = PDAluminosityPDA_19493(v48->i32[0], v326, v325, v324);
                }
                v48->i32[0] = v327;
                goto LABEL_650;
              }
              v324 = *v47;
              if (*v47)
                goto LABEL_643;
LABEL_650:
              v328 = &v47[v530];
              if ((unint64_t)v328 >= v38)
                v329 = -(uint64_t)(int)v539;
              else
                v329 = 0;
              v47 = &v328[v329];
              v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
              --v323;
            }
            while (v323);
            v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
            v330 = v550;
            v331 = &v550[v547];
            v332 = -(v547 * v531);
            if ((unint64_t)v331 < v543)
              v332 = 0;
            v333 = &v331[v332];
            v334 = v38 + 4 * v332 + 4 * v547;
            if (v543)
            {
              v38 = v334;
              v330 = v333;
            }
            v550 = v330;
            if (v543)
              v47 = v333;
            else
              v47 += v547;
            if (!--v552[0])
              goto LABEL_785;
          }
        case 28:
          v532 = v28;
          v533 = v29;
          v534 = v30;
          while (1)
          {
            v335 = v562[0];
            do
            {
              if (!v37)
              {
                LOBYTE(v336) = -1;
LABEL_669:
                if (v10)
                {
                  v337 = *v47;
                  if (v48->i32[0])
                  {
                    v338 = v48->i32[0];
                    goto LABEL_673;
                  }
                  v339 = v337 & 0xFFFFFF00 | v336;
                }
                else
                {
                  v337 = *v47;
                  LOBYTE(v338) = -1;
LABEL_673:
                  v339 = PDAtranspose_huePDA_19494(v48->i32[0], v338, v337, v336);
                }
                v48->i32[0] = v339;
                goto LABEL_676;
              }
              v336 = *v47;
              if (*v47)
                goto LABEL_669;
LABEL_676:
              v340 = &v47[v530];
              if ((unint64_t)v340 >= v38)
                v341 = -(uint64_t)(int)v539;
              else
                v341 = 0;
              v47 = &v340[v341];
              v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
              --v335;
            }
            while (v335);
            v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
            v342 = v550;
            v343 = &v550[v547];
            v344 = -(v547 * v531);
            if ((unint64_t)v343 < v543)
              v344 = 0;
            v345 = &v343[v344];
            v346 = v38 + 4 * v344 + 4 * v547;
            if (v543)
            {
              v38 = v346;
              v342 = v345;
            }
            v550 = v342;
            if (v543)
              v47 = v345;
            else
              v47 += v547;
            if (!--v552[0])
              goto LABEL_785;
          }
        case 29:
          v532 = v28;
          v533 = v29;
          v534 = v30;
          while (1)
          {
            v347 = v562[0];
            do
            {
              if (!v37)
              {
                LOBYTE(v348) = -1;
LABEL_695:
                if (v10)
                {
                  v349 = *v47;
                  if (v48->i32[0])
                  {
                    v350 = v48->i32[0];
                    goto LABEL_699;
                  }
                  v351 = v349 & 0xFFFFFF00 | v348;
                }
                else
                {
                  v349 = *v47;
                  LOBYTE(v350) = -1;
LABEL_699:
                  v351 = PDAtranspose_saturationPDA_19495(v48->i32[0], v350, v349, v348);
                }
                v48->i32[0] = v351;
                goto LABEL_702;
              }
              v348 = *v47;
              if (*v47)
                goto LABEL_695;
LABEL_702:
              v352 = &v47[v530];
              if ((unint64_t)v352 >= v38)
                v353 = -(uint64_t)(int)v539;
              else
                v353 = 0;
              v47 = &v352[v353];
              v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
              --v347;
            }
            while (v347);
            v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
            v354 = v550;
            v355 = &v550[v547];
            v356 = -(v547 * v531);
            if ((unint64_t)v355 < v543)
              v356 = 0;
            v357 = &v355[v356];
            v358 = v38 + 4 * v356 + 4 * v547;
            if (v543)
            {
              v38 = v358;
              v354 = v357;
            }
            v550 = v354;
            if (v543)
              v47 = v357;
            else
              v47 += v547;
            if (!--v552[0])
              goto LABEL_785;
          }
        case 30:
          v532 = v28;
          v533 = v29;
          v534 = v30;
          while (1)
          {
            v359 = v562[0];
            do
            {
              if (v37)
              {
                v360 = *v47;
                if (!*v47)
                  goto LABEL_727;
                if (!v10)
                {
LABEL_723:
                  v362 = *v47;
                  v361 = v48->i32[0];
                  LOBYTE(v363) = -1;
                  goto LABEL_724;
                }
              }
              else
              {
                LOBYTE(v360) = -1;
                if (!v10)
                  goto LABEL_723;
              }
              v361 = v48->i32[0];
              v362 = *v47;
              if (!v48->i32[0])
              {
                v364 = v362 & 0xFFFFFF00 | v360;
                goto LABEL_726;
              }
              v363 = v48->i32[0];
LABEL_724:
              v364 = PDAtranspose_luminosityPDA_19496(v362, v360, v361, v363);
LABEL_726:
              v48->i32[0] = v364;
LABEL_727:
              v365 = &v47[v530];
              if ((unint64_t)v365 >= v38)
                v366 = -(uint64_t)(int)v539;
              else
                v366 = 0;
              v47 = &v365[v366];
              v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
              --v359;
            }
            while (v359);
            v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
            v367 = v550;
            v368 = &v550[v547];
            v369 = -(v547 * v531);
            if ((unint64_t)v368 < v543)
              v369 = 0;
            v370 = &v368[v369];
            v371 = v38 + 4 * v369 + 4 * v547;
            if (v543)
            {
              v38 = v371;
              v367 = v370;
            }
            v550 = v367;
            if (v543)
              v47 = v370;
            else
              v47 += v547;
            if (!--v552[0])
              goto LABEL_785;
          }
        case 31:
          v532 = v28;
          v533 = v29;
          v534 = v30;
          break;
        default:
          goto LABEL_786;
      }
      break;
    }
LABEL_741:
    v372 = v562[0];
    while (1)
    {
      if (v37)
      {
        v373 = *v47;
        if (!*v47)
          goto LABEL_753;
      }
      else
      {
        LOBYTE(v373) = -1;
      }
      if (v10)
      {
        v374 = *v47;
        if (!v48->i32[0])
        {
          v376 = v374 & 0xFFFFFF00 | v373;
          goto LABEL_752;
        }
        v375 = v48->i32[0];
      }
      else
      {
        v374 = *v47;
        LOBYTE(v375) = -1;
      }
      v376 = PDAtranspose_luminosityPDA_19496(v48->i32[0], v375, v374, v373);
LABEL_752:
      v48->i32[0] = v376;
LABEL_753:
      v377 = &v47[v530];
      if ((unint64_t)v377 >= v38)
        v378 = -(uint64_t)(int)v539;
      else
        v378 = 0;
      v47 = &v377[v378];
      v48 = (uint32x2_t *)((char *)v48 + 4 * v530);
      if (!--v372)
      {
        v48 = (uint32x2_t *)((char *)v48 + 4 * v546);
        v379 = v550;
        v380 = &v550[v547];
        v381 = -(v547 * v531);
        if ((unint64_t)v380 < v543)
          v381 = 0;
        v382 = &v380[v381];
        v383 = v38 + 4 * v381 + 4 * v547;
        if (v543)
        {
          v38 = v383;
          v379 = v382;
        }
        v550 = v379;
        if (v543)
          v47 = v382;
        else
          v47 += v547;
        if (!--v552[0])
          goto LABEL_785;
        goto LABEL_741;
      }
    }
  }
  if (BYTE1(v8) != 4)
    goto LABEL_34;
  v562[0] = *(_DWORD *)(v5 + 4);
  v552[0] = v15;
  v18 = **(_DWORD **)(v5 + 88);
  v541 = *(int *)(v5 + 28);
  v549 = v541 >> 2;
  v19 = (unsigned int *)(*(_QWORD *)(v5 + 40) + 4 * (*(int *)(v5 + 12) + (v541 >> 2) * *(int *)(v5 + 16)));
  v545 = v19;
  if (v16)
  {
    shape_enum_clip_alloc((uint64_t)v2, v3, (int *)v16, 1, 1, 1, *(_DWORD *)(v5 + 104), *(_DWORD *)(v5 + 108), v13, v15);
    v21 = v20;
    if (v20)
      goto LABEL_1122;
    return 1;
  }
  v548 = 0;
  while (2)
  {
    v425 = v549 - (int)v13;
    v426 = v13;
    switch((int)v11)
    {
      case 0:
        v427 = v552[0];
        v428 = 4 * v13;
        v429 = v541 & 0xFFFFFFFC;
        v430 = 0;
        goto LABEL_882;
      case 1:
        v430 = 0;
        v439 = *(int **)(v527 + 88);
        if (v439)
          v430 = *v439;
        v428 = 4 * v13;
        v427 = v552[0];
        v429 = v541 & 0xFFFFFFFC;
LABEL_882:
        CGBlt_fillBytes(v428, v427, v430, (char *)v19, v429);
        goto LABEL_1120;
      case 2:
        v544 = v13 & 3;
        v440 = v552[0];
        v441 = (v13 >> 2) + 1;
        do
        {
          if ((int)v13 < 4)
          {
            v445 = v13;
          }
          else
          {
            v442 = v441;
            do
            {
              DplusDM_19478(v19, v18, *v19, ~(_BYTE)v18);
              DplusDM_19478(v19 + 1, v18, v19[1], ~(_BYTE)v18);
              DplusDM_19478(v19 + 2, v18, v19[2], ~(_BYTE)v18);
              v444 = v19[3];
              v443 = v19 + 3;
              DplusDM_19478(v443, v18, v444, ~(_BYTE)v18);
              v19 = v443 + 1;
              --v442;
            }
            while (v442 > 1);
            v445 = v544;
          }
          if (v445 < 1)
          {
            v447 = v19;
          }
          else
          {
            v446 = v445 + 1;
            v447 = v19;
            do
            {
              v448 = *v447++;
              DplusDM_19478(v19, v18, v448, ~(_BYTE)v18);
              --v446;
              v19 = v447;
            }
            while (v446 > 1);
          }
          v19 = &v447[v425];
          v552[0] = --v440;
          LODWORD(v13) = v426;
        }
        while (v440);
        goto LABEL_1120;
      case 3:
        do
        {
          v431 = v562[0];
          do
          {
            v432 = *v19;
            if (*v19)
            {
              v433 = v432 == 255;
              v432 = v18;
              if (!v433)
                v432 = PDM_19476(v18, *v19);
            }
            *v19++ = v432;
            --v431;
          }
          while (v431);
          v19 += v425;
          --v552[0];
        }
        while (v552[0]);
        goto LABEL_1120;
      case 4:
        do
        {
          v434 = v562[0];
          do
          {
            v435 = *(unsigned __int8 *)v19 ^ 0xFF;
            if (v435)
            {
              v436 = v18;
              if (v435 != 255)
                v436 = PDM_19476(v18, v435);
            }
            else
            {
              v436 = 0;
            }
            *v19++ = v436;
            --v434;
          }
          while (v434);
          v19 += v425;
          --v552[0];
        }
        while (v552[0]);
        goto LABEL_1120;
      case 5:
        v449 = v552[0];
        do
        {
          v450 = v13;
          v451 = v19;
          do
          {
            v452 = *v451++;
            DMplusDM_19477(v19, v18, v452, v452, ~(_BYTE)v18);
            v19 = v451;
            --v450;
          }
          while (v450);
          v19 = &v451[v425];
          v552[0] = --v449;
          LODWORD(v13) = v426;
        }
        while (v449);
        goto LABEL_1120;
      case 6:
        do
        {
          v453 = v562[0];
          do
          {
            if (*v19 != 0xFF)
            {
              if (~*(_BYTE *)v19 == 255)
                *v19 = v18;
              else
                DplusDM_19478(v19, *v19, v18, ~*(_BYTE *)v19);
            }
            ++v19;
            --v453;
          }
          while (v453);
          v19 += v425;
          --v552[0];
        }
        while (v552[0]);
        goto LABEL_1120;
      case 7:
        do
        {
          v437 = v562[0];
          do
          {
            *v19 = PDM_19476(*v19, v18);
            ++v19;
            --v437;
          }
          while (v437);
          v19 += v425;
          --v552[0];
        }
        while (v552[0]);
        goto LABEL_1120;
      case 8:
        do
        {
          v438 = v562[0];
          do
          {
            *v19 = PDM_19476(*v19, ~(_BYTE)v18);
            ++v19;
            --v438;
          }
          while (v438);
          v19 += v425;
          --v552[0];
        }
        while (v552[0]);
        goto LABEL_1120;
      case 9:
        v454 = v552[0];
        do
        {
          v455 = v13;
          v456 = v19;
          do
          {
            v457 = *v456++;
            DMplusDM_19477(v19, v18, ~(_BYTE)v457, v457, v18);
            v19 = v456;
            --v455;
          }
          while (v455);
          v19 = &v456[v425];
          v552[0] = --v454;
          LODWORD(v13) = v426;
        }
        while (v454);
        goto LABEL_1120;
      case 10:
        v458 = v552[0];
        do
        {
          v459 = v13;
          v460 = v19;
          do
          {
            v461 = *v460++;
            DMplusDM_19477(v19, v18, ~(_BYTE)v461, v461, ~(_BYTE)v18);
            v19 = v460;
            --v459;
          }
          while (v459);
          v19 = &v460[v425];
          v552[0] = --v458;
          LODWORD(v13) = v426;
        }
        while (v458);
        goto LABEL_1120;
      case 11:
        v462 = v552[0];
        do
        {
          v463 = v13;
          v464 = (int *)v19;
          do
          {
            v466 = *v464++;
            v465 = v466;
            if (v10)
              v467 = v465;
            else
              v467 = -1;
            *(int32x2_t *)v4.i8 = DAplusdDA_19479(v19, v465, v467, v18, v18, v4);
            v19 = (unsigned int *)v464;
            --v463;
          }
          while (v463);
          v19 = (unsigned int *)&v464[v425];
          v552[0] = --v462;
          LODWORD(v13) = v426;
        }
        while (v462);
        goto LABEL_1120;
      case 12:
        do
        {
          v469 = v562[0];
          do
          {
            v468 = (v18 >> 8) & 0xFF00FF;
            *v19 = ((((*v19 >> 8) & 0xFF00FF) + v468) << 8) & 0xFF00FF00 | ((*v19 & 0xFF00FF) + (v18 & 0xFF00FF)) & 0xFF00FF | (15 * ((((*v19 >> 8) & 0xFF00FF) + v468) & 0x1000100 | (((*v19 & 0xFF00FF) + (v18 & 0xFF00FF)) >> 8) & 0x10001)) | (240 * ((((*v19 >> 8) & 0xFF00FF) + v468) & 0x1000100 | (((*v19 & 0xFF00FF) + (v18 & 0xFF00FF)) >> 8) & 0x10001));
            ++v19;
            --v469;
          }
          while (v469);
          v19 += v425;
          --v552[0];
        }
        while (v552[0]);
        goto LABEL_1120;
      case 13:
        if (!(_BYTE)v18)
          goto LABEL_1120;
        while (1)
        {
          v470 = v562[0];
          do
          {
            if (!v10)
            {
              LOBYTE(v471) = -1;
LABEL_937:
              v472 = PDAmultiplyPDA_19480(*v19, v471, v18, v18);
              goto LABEL_938;
            }
            v471 = *v19;
            v472 = v18;
            if (*v19)
              goto LABEL_937;
LABEL_938:
            *v19++ = v472;
            --v470;
          }
          while (v470);
          v19 += v425;
          if (!--v552[0])
            goto LABEL_1120;
        }
      case 14:
        if (!(_BYTE)v18)
          goto LABEL_1120;
        while (1)
        {
          v473 = v562[0];
          do
          {
            if (!v10)
            {
              LOBYTE(v474) = -1;
LABEL_947:
              v475 = PDAscreenPDA_19481(*v19, v474, v18, v18);
              goto LABEL_948;
            }
            v474 = *v19;
            v475 = v18;
            if (*v19)
              goto LABEL_947;
LABEL_948:
            *v19++ = v475;
            --v473;
          }
          while (v473);
          v19 += v425;
          if (!--v552[0])
            goto LABEL_1120;
        }
      case 15:
        if (!(_BYTE)v18)
          goto LABEL_1120;
        while (1)
        {
          v476 = v562[0];
          do
          {
            if (!v10)
            {
              LOBYTE(v477) = -1;
LABEL_957:
              v478 = PDAoverlayPDA_19482(*v19, v477, v18, v18);
              goto LABEL_958;
            }
            v477 = *v19;
            v478 = v18;
            if (*v19)
              goto LABEL_957;
LABEL_958:
            *v19++ = v478;
            --v476;
          }
          while (v476);
          v19 += v425;
          if (!--v552[0])
            goto LABEL_1120;
        }
      case 16:
        if (!(_BYTE)v18)
          goto LABEL_1120;
        while (1)
        {
          v479 = v562[0];
          do
          {
            if (!v10)
            {
              LOBYTE(v480) = -1;
LABEL_967:
              v481 = PDAdarkenPDA_19484(*v19, v480, v18, v18);
              goto LABEL_968;
            }
            v480 = *v19;
            v481 = v18;
            if (*v19)
              goto LABEL_967;
LABEL_968:
            *v19++ = v481;
            --v479;
          }
          while (v479);
          v19 += v425;
          if (!--v552[0])
            goto LABEL_1120;
        }
      case 17:
        if (!(_BYTE)v18)
          goto LABEL_1120;
        while (1)
        {
          v482 = v562[0];
          do
          {
            if (!v10)
            {
              LOBYTE(v483) = -1;
LABEL_977:
              v484 = PDAlightenPDA_19483(*v19, v483, v18, v18);
              goto LABEL_978;
            }
            v483 = *v19;
            v484 = v18;
            if (*v19)
              goto LABEL_977;
LABEL_978:
            *v19++ = v484;
            --v482;
          }
          while (v482);
          v19 += v425;
          if (!--v552[0])
            goto LABEL_1120;
        }
      case 18:
        if (!(_BYTE)v18)
          goto LABEL_1120;
        while (1)
        {
          v485 = v562[0];
          do
          {
            if (!v10)
            {
              LOBYTE(v486) = -1;
LABEL_987:
              v487 = PDAcolordodgePDA_19485(*v19, v486, v18, v18);
              goto LABEL_988;
            }
            v486 = *v19;
            v487 = v18;
            if (*v19)
              goto LABEL_987;
LABEL_988:
            *v19++ = v487;
            --v485;
          }
          while (v485);
          v19 += v425;
          if (!--v552[0])
            goto LABEL_1120;
        }
      case 19:
        if (!(_BYTE)v18)
          goto LABEL_1120;
        while (1)
        {
          v488 = v562[0];
          do
          {
            if (!v10)
            {
              LOBYTE(v489) = -1;
LABEL_997:
              v490 = PDAcolorburnPDA_19486(*v19, v489, v18, v18);
              goto LABEL_998;
            }
            v489 = *v19;
            v490 = v18;
            if (*v19)
              goto LABEL_997;
LABEL_998:
            *v19++ = v490;
            --v488;
          }
          while (v488);
          v19 += v425;
          if (!--v552[0])
            goto LABEL_1120;
        }
      case 20:
        if (!(_BYTE)v18)
          goto LABEL_1120;
        while (1)
        {
          v491 = v562[0];
          do
          {
            if (!v10)
            {
              LOBYTE(v492) = -1;
LABEL_1007:
              v493 = PDAsoftlightPDA_19488(*v19, v492, v18, v18);
              goto LABEL_1008;
            }
            v492 = *v19;
            v493 = v18;
            if (*v19)
              goto LABEL_1007;
LABEL_1008:
            *v19++ = v493;
            --v491;
          }
          while (v491);
          v19 += v425;
          if (!--v552[0])
            goto LABEL_1120;
        }
      case 21:
        if (!(_BYTE)v18)
          goto LABEL_1120;
        while (1)
        {
          v494 = v562[0];
          do
          {
            if (!v10)
            {
              LOBYTE(v495) = -1;
LABEL_1017:
              v496 = PDAhardlightPDA_19487(*v19, v495, v18, v18);
              goto LABEL_1018;
            }
            v495 = *v19;
            v496 = v18;
            if (*v19)
              goto LABEL_1017;
LABEL_1018:
            *v19++ = v496;
            --v494;
          }
          while (v494);
          v19 += v425;
          if (!--v552[0])
            goto LABEL_1120;
        }
      case 22:
        if (!(_BYTE)v18)
          goto LABEL_1120;
        while (1)
        {
          v497 = v562[0];
          do
          {
            if (!v10)
            {
              LOBYTE(v498) = -1;
LABEL_1027:
              v499 = PDAdifferencePDA_19489(*v19, v498, v18, v18);
              goto LABEL_1028;
            }
            v498 = *v19;
            v499 = v18;
            if (*v19)
              goto LABEL_1027;
LABEL_1028:
            *v19++ = v499;
            --v497;
          }
          while (v497);
          v19 += v425;
          if (!--v552[0])
            goto LABEL_1120;
        }
      case 23:
        if (!(_BYTE)v18)
          goto LABEL_1120;
        while (1)
        {
          v500 = v562[0];
          do
          {
            if (!v10)
            {
              LOBYTE(v501) = -1;
LABEL_1037:
              v502 = PDAexclusionPDA_19490(*v19, v501, v18, v18);
              goto LABEL_1038;
            }
            v501 = *v19;
            v502 = v18;
            if (*v19)
              goto LABEL_1037;
LABEL_1038:
            *v19++ = v502;
            --v500;
          }
          while (v500);
          v19 += v425;
          if (!--v552[0])
            goto LABEL_1120;
        }
      case 24:
        if (!(_BYTE)v18)
          goto LABEL_1120;
        while (1)
        {
          v503 = v562[0];
          do
          {
            if (!v10)
            {
              LOBYTE(v504) = -1;
LABEL_1047:
              v505 = PDAhuePDA_19491(*v19, v504, v18, v18);
              goto LABEL_1048;
            }
            v504 = *v19;
            v505 = v18;
            if (*v19)
              goto LABEL_1047;
LABEL_1048:
            *v19++ = v505;
            --v503;
          }
          while (v503);
          v19 += v425;
          if (!--v552[0])
            goto LABEL_1120;
        }
      case 25:
        if (!(_BYTE)v18)
          goto LABEL_1120;
        while (1)
        {
          v506 = v562[0];
          do
          {
            if (!v10)
            {
              LOBYTE(v507) = -1;
LABEL_1057:
              v508 = PDAsaturationPDA_19492(*v19, v507, v18, v18);
              goto LABEL_1058;
            }
            v507 = *v19;
            v508 = v18;
            if (*v19)
              goto LABEL_1057;
LABEL_1058:
            *v19++ = v508;
            --v506;
          }
          while (v506);
          v19 += v425;
          if (!--v552[0])
            goto LABEL_1120;
        }
      case 26:
        if (!(_BYTE)v18)
          goto LABEL_1120;
        while (1)
        {
          v509 = v562[0];
          do
          {
            if (!v10)
            {
              LOBYTE(v510) = -1;
LABEL_1067:
              v511 = PDAluminosityPDA_19493(v18, v18, *v19, v510);
              goto LABEL_1068;
            }
            v510 = *v19;
            v511 = v18;
            if (*v19)
              goto LABEL_1067;
LABEL_1068:
            *v19++ = v511;
            --v509;
          }
          while (v509);
          v19 += v425;
          if (!--v552[0])
            goto LABEL_1120;
        }
      case 27:
        if (!(_BYTE)v18)
          goto LABEL_1120;
        while (1)
        {
          v512 = v562[0];
          do
          {
            if (!v10)
            {
              LOBYTE(v513) = -1;
LABEL_1077:
              v514 = PDAluminosityPDA_19493(*v19, v513, v18, v18);
              goto LABEL_1078;
            }
            v513 = *v19;
            v514 = v18;
            if (*v19)
              goto LABEL_1077;
LABEL_1078:
            *v19++ = v514;
            --v512;
          }
          while (v512);
          v19 += v425;
          if (!--v552[0])
            goto LABEL_1120;
        }
      case 28:
        if (!(_BYTE)v18)
          goto LABEL_1120;
        while (1)
        {
          v515 = v562[0];
          do
          {
            if (!v10)
            {
              LOBYTE(v516) = -1;
LABEL_1087:
              v517 = PDAtranspose_huePDA_19494(*v19, v516, v18, v18);
              goto LABEL_1088;
            }
            v516 = *v19;
            v517 = v18;
            if (*v19)
              goto LABEL_1087;
LABEL_1088:
            *v19++ = v517;
            --v515;
          }
          while (v515);
          v19 += v425;
          if (!--v552[0])
            goto LABEL_1120;
        }
      case 29:
        if (!(_BYTE)v18)
          goto LABEL_1120;
        while (1)
        {
          v518 = v562[0];
          do
          {
            if (!v10)
            {
              LOBYTE(v519) = -1;
LABEL_1097:
              v520 = PDAtranspose_saturationPDA_19495(*v19, v519, v18, v18);
              goto LABEL_1098;
            }
            v519 = *v19;
            v520 = v18;
            if (*v19)
              goto LABEL_1097;
LABEL_1098:
            *v19++ = v520;
            --v518;
          }
          while (v518);
          v19 += v425;
          if (!--v552[0])
            goto LABEL_1120;
        }
      case 30:
        if (!(_BYTE)v18)
          goto LABEL_1120;
        do
        {
          v521 = v562[0];
          do
          {
            if (!v10)
            {
              LOBYTE(v522) = -1;
LABEL_1107:
              v523 = PDAtranspose_luminosityPDA_19496(v18, v18, *v19, v522);
              goto LABEL_1108;
            }
            v522 = *v19;
            v523 = v18;
            if (*v19)
              goto LABEL_1107;
LABEL_1108:
            *v19++ = v523;
            --v521;
          }
          while (v521);
          v19 += v425;
          --v552[0];
        }
        while (v552[0]);
LABEL_1120:
        v19 = v545;
        v21 = v548;
        if (!v548)
          return 1;
        v551 = 0;
LABEL_1122:
        if (shape_enum_clip_next(v21, (int *)&v551 + 1, &v551, v562, v552))
        {
          v548 = v21;
          v19 += v549 * (int)v551 + SHIDWORD(v551);
          LODWORD(v13) = v562[0];
          continue;
        }
        v44 = (void *)v21;
LABEL_1125:
        free(v44);
        return 1;
      case 31:
        if (!(_BYTE)v18)
          goto LABEL_1120;
        break;
      default:
        goto LABEL_1120;
    }
    break;
  }
LABEL_1112:
  v524 = v562[0];
  while (1)
  {
    if (v10)
    {
      v525 = *v19;
      v526 = v18;
      if (!*v19)
        goto LABEL_1118;
    }
    else
    {
      LOBYTE(v525) = -1;
    }
    v526 = PDAtranspose_luminosityPDA_19496(*v19, v525, v18, v18);
LABEL_1118:
    *v19++ = v526;
    if (!--v524)
    {
      v19 += v425;
      if (!--v552[0])
        goto LABEL_1120;
      goto LABEL_1112;
    }
  }
}

BOOL ripl_IsContained(_DWORD *a1, _DWORD *a2)
{
  int v2;
  int v3;
  _BOOL8 result;

  result = 0;
  if (*a1 > *a2)
  {
    v2 = a1[1];
    v3 = a2[1];
    if (v2 > v3 && a1[2] + *a1 < a2[2] + *a2 && a1[3] + v2 < a2[3] + v3)
      return 1;
  }
  return result;
}

uint64_t shape_enum_clip_next(uint64_t a1, int *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  char *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int *v18;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int *v39;
  int *v40;
  int *v41;
  int *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;

  v5 = *(char **)(a1 + 32);
  if (!v5)
    return 0;
  v6 = *(_DWORD *)(a1 + 4);
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)a1;
  v10 = *(char **)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  if (*(_DWORD *)a1 != 2)
  {
    if (v8 < 3)
      return 0;
    v27 = *(_QWORD *)(a1 + 48);
    if (v7)
      goto LABEL_42;
    while (1)
    {
      if (v9)
      {
        v29 = *(int *)(v27 - 4);
        v27 -= 4;
        *(_QWORD *)(a1 + 40) = v5;
        *(_QWORD *)(a1 + 48) = v27;
        v10 = &v5[4 * v29];
        if (*(_DWORD *)v10 == 0x80000000)
          v30 = 0;
        else
          v30 = v10;
      }
      else
      {
        v30 = 0;
        v5 = &v10[4 * *((int *)v10 + 1)];
        *(_QWORD *)(a1 + 32) = v10;
        *(_QWORD *)(a1 + 40) = v5;
        if (*(_DWORD *)v5 != 0x7FFFFFFF)
          goto LABEL_39;
      }
      *(_QWORD *)(a1 + 32) = v30;
LABEL_39:
      v31 = v5;
      v32 = (unint64_t)(v5 - v10) >> 2;
      v7 = v32 - 1;
      if ((_DWORD)v32 == 2)
        v7 = 0;
      v5 = v10;
      v10 = v31;
LABEL_42:
      v33 = *(_DWORD *)(a1 + 16);
      v34 = *(_DWORD *)v10;
      v35 = *(_DWORD *)(a1 + 24);
      v36 = *(_DWORD *)v5;
      if (v9)
      {
        if (v36 < v35)
        {
          if (v34 > v33)
            goto LABEL_48;
          return 0;
        }
      }
      else if (v34 > v33)
      {
        if (v36 < v35)
        {
LABEL_48:
          if (v34 >= v35)
            v34 = *(_DWORD *)(a1 + 24);
          if (v36 <= v33)
            v36 = *(_DWORD *)(a1 + 16);
          *a5 = v34 - v36;
          v37 = v35 - v34;
          v38 = v36 - v33;
          if (v9)
            v38 = v37;
          *a3 = v38;
          v22 = *(_DWORD *)(a1 + 12);
          v25 = *(_DWORD *)(a1 + 20);
          if (!v7 || *((_DWORD *)v5 + 2) >= v25 || *((_DWORD *)v10 - 1) <= v22)
          {
            *(_DWORD *)(a1 + 8) = 0;
            *a2 = 0;
            *a4 = v25 - v22;
            return 0xFFFFFFFFLL;
          }
          v39 = (int *)&v5[4 * v7];
          v40 = (int *)&v10[-4 * v7--];
LABEL_58:
          if (v6 >= 0)
            v41 = v40;
          else
            v41 = v39;
          if (v41 == (int *)(v5 + 4))
          {
            v24 = -2147483647;
            v23 = *((_DWORD *)v5 + 2);
          }
          else if (v41 == (int *)(v10 - 4))
          {
            v23 = 2147483646;
            v24 = *((_DWORD *)v10 - 1);
          }
          else
          {
            v42 = v41;
            v24 = *v41;
            v23 = v42[1];
          }
          if (v6 < 1)
          {
            if (v24 < v25)
            {
              if (v23 <= v22)
                continue;
              goto LABEL_72;
            }
          }
          else if (v23 > v22)
          {
            if (v24 >= v25)
              continue;
LABEL_72:
            if ((v7 & 1) == 0 || v8 != 4)
            {
              if ((v7 & 1) != 0)
                v26 = 254;
              else
                v26 = 0xFFFFFFFFLL;
              goto LABEL_78;
            }
          }
          --v7;
          --v39;
          ++v40;
          goto LABEL_58;
        }
        return 0;
      }
    }
  }
  v11 = *(_QWORD *)(a1 + 48);
  while (1)
  {
    if (!v7)
    {
      while (1)
      {
        if (v9)
        {
          v12 = *(int *)(v11 - 4);
          v11 -= 4;
          *(_QWORD *)(a1 + 40) = v5;
          *(_QWORD *)(a1 + 48) = v11;
          v13 = &v5[4 * v12];
          *(_QWORD *)(a1 + 32) = v13;
          if (*(_DWORD *)v13 == 0x80000000)
            goto LABEL_30;
          v10 = v5;
        }
        else
        {
          *(_QWORD *)(a1 + 32) = v10;
          v13 = v10;
          v10 += 4 * *((int *)v10 + 1);
          *(_QWORD *)(a1 + 40) = v10;
          if (*(_DWORD *)v10 == 0x7FFFFFFF)
          {
LABEL_30:
            v26 = 0;
            *(_QWORD *)(a1 + 32) = 0;
            return v26;
          }
        }
        v5 = v13;
        v7 = ((unint64_t)(v10 - v13) >> 2) - 2;
        if (((unint64_t)(v10 - v13) >> 2) != 2)
        {
          v5 = v13;
          break;
        }
      }
    }
    v14 = *(_DWORD *)(a1 + 16);
    v15 = *(_DWORD *)v10;
    v16 = *(_DWORD *)(a1 + 24);
    v17 = *(_DWORD *)v5;
    v18 = (int *)&v10[-4 * v7];
    if (v6 <= 0)
      v18 = (int *)&v5[4 * v7];
    v7 -= 2;
    if (v15 > v14 && v17 < v16)
    {
      if (v15 >= v16)
        v15 = *(_DWORD *)(a1 + 24);
      if (v17 <= v14)
        v17 = *(_DWORD *)(a1 + 16);
      *a5 = v15 - v17;
      v20 = v16 - v15;
      v21 = v17 - v14;
      if (v9)
        v21 = v20;
      *a3 = v21;
      v22 = *(_DWORD *)(a1 + 12);
      v23 = v18[1];
      if (v23 > v22)
      {
        v24 = *v18;
        v25 = *(_DWORD *)(a1 + 20);
        if (v24 < v25)
          break;
      }
    }
  }
  v26 = 2;
LABEL_78:
  if (v23 >= v25)
    v43 = v25;
  else
    v43 = v23;
  if (v24 <= v22)
    v44 = v22;
  else
    v44 = v24;
  *a4 = v43 - v44;
  v45 = v25 - v43;
  v46 = v44 - v22;
  if (v6 >= 0)
    v47 = v46;
  else
    v47 = v45;
  *a2 = v47;
  *(_DWORD *)(a1 + 8) = v7;
  return v26;
}

uint64_t ripl_BltOpSourceLayer(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_DWORD *)(a5 + 12);
  v5 = *(_DWORD *)(a5 + 16);
  v7 = *(_DWORD *)(a5 + 20);
  v8 = *(_DWORD *)(a5 + 24);
  if (a4)
  {
    v6 += *a4;
    v5 += a4[1];
  }
  if (v7 <= 1 && v8 <= 1)
  {
    v7 = 0;
    v8 = 0;
    v10 = 4;
    *(_BYTE *)(a1 + 1) = 4;
    *(_QWORD *)(a1 + 56) = 0;
  }
  else
  {
    if ((_DWORD *)a5 != a3 && (*(_BYTE *)(a5 + 28) & 8) != 0)
    {
      v10 = 2;
      *(_BYTE *)(a1 + 1) = 2;
      v11 = v5 + v8 - (a3[4] + a3[6]) + *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 56) = a3[3] - v6 + *(_DWORD *)(a1 + 12);
    }
    else
    {
      v10 = 1;
      *(_BYTE *)(a1 + 1) = 1;
      *(_DWORD *)(a1 + 56) = *a2 - v6;
      v11 = v5 + v8 - (a2[1] + a2[3]);
    }
    *(_DWORD *)(a1 + 60) = v11;
  }
  *(_DWORD *)(a1 + 64) = v7;
  *(_DWORD *)(a1 + 68) = v8;
  v12 = *(_DWORD *)(a5 + 48);
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = v12;
  v13 = *(_QWORD *)(a5 + 56);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a5 + 64);
  v14 = *(_QWORD *)(a5 + 72);
  *(_QWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 96) = v14;
  return v10;
}

uint64_t blt_bitmap_blend_AXXX32(uint64_t result, uint64_t a2, uint32x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int32 v14;
  uint64_t v15;
  __int32 v16;
  int8x8_t v17;
  int32x2_t v18;
  int32x2_t v19;
  int32x2_t v20;
  int32x2_t v21;
  BOOL v22;
  unsigned __int32 v23;
  unsigned __int32 v24;

  do
  {
    v11 = a7 + 4 * a10 * a8;
    v12 = a9;
    v13 = result;
    if (result > 1)
    {
      do
      {
        v14 = *(_DWORD *)(v11 + 4 * v12);
        if (v12 + 1 < a5)
          v15 = v12 + 1;
        else
          v15 = 0;
        v16 = *(_DWORD *)(v11 + 4 * v15);
        v17 = (int8x8_t)vshr_n_u32((uint32x2_t)__PAIR64__(v16, v14), 0x18uLL);
        if ((v17.i32[1] & v17.i32[0]) == 255)
        {
          a3->i32[0] = v14;
          a3->i32[1] = v16;
        }
        else if (v17)
        {
          v18 = (int32x2_t)veor_s8(v17, (int8x8_t)0xFF000000FFLL);
          v19.i16[0] = a3->u8[0];
          v19.i16[1] = BYTE2(a3->u32[0]);
          v19.i16[2] = BYTE4(*(unint64_t *)a3);
          v19.i16[3] = BYTE6(*(unint64_t *)a3);
          v20 = vmul_s32((int32x2_t)(*(_QWORD *)&vshr_n_u32(*a3, 8uLL) & 0xFFFF00FFFFFF00FFLL), v18);
          v21 = vmul_s32(v19, v18);
          *a3 = (uint32x2_t)vadd_s32((int32x2_t)(*(_QWORD *)&vshr_n_u32((uint32x2_t)vadd_s32(vadd_s32(v21, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32((uint32x2_t)v21, 8uLL) & 0xFFFF00FFFFFF00FFLL)), 8uLL) & 0xFFFF00FFFFFF00FFLL), vadd_s32((int32x2_t)__PAIR64__(v16, v14), (int32x2_t)(*(_QWORD *)&vadd_s32(vadd_s32(v20, (int32x2_t)0x1000100010001), (int32x2_t)(*(_QWORD *)&vshr_n_u32((uint32x2_t)v20, 8uLL) & 0xFFFF00FFFFFF00FFLL)) & 0xFF00FF00FF00FF00)));
        }
        ++a3;
        if (v15 + 1 < a5)
          v12 = v15 + 1;
        else
          v12 = 0;
        v22 = (unint64_t)v13 > 3;
        v13 -= 2;
      }
      while (v22);
    }
    if (v13 >= 1)
    {
      v23 = *(_DWORD *)(v11 + 4 * v12);
      v24 = HIBYTE(v23);
      if (HIBYTE(v23) != 255)
      {
        if (!v24)
        {
LABEL_18:
          a3 = (uint32x2_t *)((char *)a3 + 4);
          goto LABEL_19;
        }
        v23 += ((((a3->i32[0] & 0xFF00FF) * (v24 ^ 0xFF)
                + 65537
                + ((((a3->i32[0] & 0xFF00FF) * (v24 ^ 0xFF)) >> 8) & 0xFF00FF)) >> 8) & 0xFF00FF)
             + (((((unsigned __int32)a3->i32[0] >> 8) & 0xFF00FF) * (v24 ^ 0xFF)
               + 65537
               + ((((((unsigned __int32)a3->i32[0] >> 8) & 0xFF00FF) * (v24 ^ 0xFF)) >> 8) & 0xFF00FF)) & 0xFF00FF00);
      }
      a3->i32[0] = v23;
      goto LABEL_18;
    }
LABEL_19:
    a3 = (uint32x2_t *)((char *)a3 + 4 * (a4 - result));
    if (a10 + 1 < a6)
      ++a10;
    else
      a10 = 0;
    v22 = a2-- <= 1;
  }
  while (!v22);
  return result;
}

void CGContextSetTextDrawingMode(CGContextRef c, CGTextDrawingMode mode)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGContextRef v8;

  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      CGGStateSetTextDrawingMode(*((_QWORD *)c + 12), mode);
      return;
    }
    v8 = c;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetTextDrawingMode", (uint64_t)v8, v2, v3, v4, v5, v6, v7);
}

CFTypeID CGGradientGetTypeID(void)
{
  if (kCGGradientInterpolatesPremultiplied_block_invoke_once != -1)
    dispatch_once(&kCGGradientInterpolatesPremultiplied_block_invoke_once, &__block_literal_global_19_12579);
  return CGGradientGetTypeID_gradient_type_id;
}

void CGContextEOClip(CGContextRef c)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  clip((uint64_t)c, 1, v1, v2, v3, v4, v5, v6);
}

CFURLRef CGFontCopyURL(const __CFURL *a1)
{
  CFURLRef v1;
  uint64_t v2;
  const __CFString *v3;
  const __CFString *v4;
  const __CFDictionary *v5;

  v1 = a1;
  if (a1)
  {
    v2 = (*(uint64_t (**)(_QWORD))(*((_QWORD *)a1 + 2) + 224))(*((_QWORD *)a1 + 14));
    if (v2)
    {
      v3 = (const __CFString *)v2;
      v4 = (const __CFString *)(*(uint64_t (**)(_QWORD))(*((_QWORD *)v1 + 2) + 160))(*((_QWORD *)v1 + 14));
      v5 = CGFontCopyVariations(v1);
      v1 = CGFontURLCreate(v3, v4, v5);
      CFRelease(v3);
      if (v4)
        CFRelease(v4);
      if (v5)
        CFRelease(v5);
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

void append_variations(__CFString *a1, CFDictionaryRef theDict)
{
  size_t Count;
  __n128 v5;
  unint64_t v6;
  uint64_t v7;
  const void **v8;
  const __CFString **v9;
  const __CFString *v10;
  const __CFNumber *Value;
  _QWORD v12[2];
  float valuePtr;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  Count = CFDictionaryGetCount(theDict);
  v12[1] = v12;
  MEMORY[0x1E0C80A78](Count, v5);
  v12[0] = (char *)v12 - v7;
  if (v6 <= 0x1FFFFFFFFFFFFFFELL)
    v8 = (const void **)((char *)v12 - v7);
  else
    v8 = 0;
  if (v6 - 0x1FFFFFFFFFFFFFFFLL >= 0xE00000000000000ELL)
    v8 = (const void **)malloc_type_malloc(8 * Count, 0xDE9479BAuLL);
  valuePtr = 0.0;
  CFDictionaryGetKeysAndValues(theDict, v8, 0);
  qsort(v8, Count, 8uLL, (int (__cdecl *)(const void *, const void *))compare_keys);
  if (Count)
  {
    v9 = (const __CFString **)v8;
    do
    {
      v10 = *v9++;
      Value = (const __CFNumber *)CFDictionaryGetValue(theDict, v10);
      CFStringAppend(a1, CFSTR(";var:"));
      append_escaped_string(a1, v10);
      CFStringAppend(a1, CFSTR("="));
      CFNumberGetValue(Value, kCFNumberFloatType, &valuePtr);
      CFStringAppendFormat(a1, 0, CFSTR("%g"), valuePtr);
      --Count;
    }
    while (Count);
  }
  if (v8 != (const void **)v12[0])
    free(v8);
}

CFURLRef CGFontURLCreate(CFStringRef filePath, const __CFString *a2, const __CFDictionary *a3)
{
  CFURLRef v3;
  const __CFURL *v6;
  const __CFString *v7;
  CFMutableStringRef MutableCopy;

  v3 = 0;
  if (filePath)
  {
    if (a2)
    {
      v6 = CFURLCreateWithFileSystemPath(0, filePath, kCFURLPOSIXPathStyle, 0);
      v3 = v6;
      if (v6)
      {
        v7 = CFURLGetString(v6);
        MutableCopy = CFStringCreateMutableCopy(0, 0, v7);
        CFRelease(v3);
        if (MutableCopy)
        {
          if (!CFStringHasPrefix(MutableCopy, CFSTR("file://")))
            CFStringInsert(MutableCopy, 0, CFSTR("file://"));
          CFStringAppend(MutableCopy, CFSTR("#postscript-name="));
          if (append_escaped_string(MutableCopy, a2))
          {
            if (a3)
              append_variations(MutableCopy, a3);
            v3 = CFURLCreateWithString(0, MutableCopy, 0);
          }
          else
          {
            v3 = 0;
          }
          CFRelease(MutableCopy);
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return v3;
}

uint64_t append_escaped_string(__CFString *a1, CFStringRef theString)
{
  CFIndex Length;
  CFMutableStringRef MutableCopy;
  const __CFString *v6;
  CFRange v8;
  CFRange v9;

  if (!theString)
    return 0;
  Length = CFStringGetLength(theString);
  v8.location = 0;
  v8.length = Length;
  if (CFStringFindWithOptions(theString, CFSTR(";"), v8, 0, 0))
  {
    MutableCopy = CFStringCreateMutableCopy(0, 0, theString);
    v9.location = 0;
    v9.length = Length;
    CFStringFindAndReplace(MutableCopy, CFSTR(";"), CFSTR("/"), v9, 0);
    v6 = CFURLCreateStringByAddingPercentEscapes(0, MutableCopy, 0, 0, 0x8000100u);
    if (MutableCopy)
      CFRelease(MutableCopy);
    if (v6)
      goto LABEL_6;
  }
  else
  {
    v6 = CFURLCreateStringByAddingPercentEscapes(0, theString, 0, 0, 0x8000100u);
    if (v6)
    {
LABEL_6:
      CFStringAppend(a1, v6);
      CFRelease(v6);
      return 1;
    }
  }
  return 0;
}

uint64_t copy_path()
{
  return FPFontCopyPath();
}

uint64_t copy_postscript_name_for_url()
{
  FPFontGetVariation();
  return FPFontCopyPostScriptName();
}

CGFontRef CGFontCreateCopyWithVariations(CGFontRef font, CFDictionaryRef variations)
{
  CGFontRef v2;
  uint64_t v4;
  BOOL v5;
  uint64_t Float;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  size_t v16;
  uint64_t *v17;
  _QWORD *v18;
  CFStringRef v19;
  uint64_t *v20;
  CGFont *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t VTable;
  uint64_t v30;
  size_t count;
  uint64_t v32;

  v2 = font;
  if (font)
  {
    if (variations
      && CFDictionaryGetCount(variations)
      && ((count = 0,
           v32 = 0,
           (v4 = (*(uint64_t (**)(_QWORD, size_t *))(*((_QWORD *)v2 + 2) + 208))(*((_QWORD *)v2 + 14), &count)) != 0)? (v5 = count == 0): (v5 = 1), !v5))
    {
      Float = (uint64_t)malloc_type_calloc(count, 0x10uLL, 0x1000040F7F8B94BuLL);
      v15 = (void *)Float;
      if (count)
      {
        v16 = 0;
        v17 = (uint64_t *)(Float + 8);
        v18 = (_QWORD *)(v4 + 8);
        do
        {
          *((_DWORD *)v17 - 2) = *((_DWORD *)v18 - 2);
          v19 = copy_name_for_identifier((uint64_t)v2, *((_DWORD *)v18 - 2));
          Float = CGCFDictionaryGetFloat(variations, v19, &v32);
          if ((_DWORD)Float)
            v20 = &v32;
          else
            v20 = v18;
          *v17 = *v20;
          if (v19)
            CFRelease(v19);
          ++v16;
          v17 += 2;
          v18 += 2;
        }
        while (v16 < count);
      }
      v21 = (CGFont *)CGFontCreate(Float, v8, v9, v10, v11, v12, v13, v14);
      VTable = CGFontGetVTable((uint64_t)v21, v22, v23, v24, v25, v26, v27, v28);
      v30 = (*(uint64_t (**)(_QWORD, void *, size_t))(VTable + 40))(*((_QWORD *)v2 + 14), v15, count);
      *((_QWORD *)v21 + 14) = v30;
      if (v30)
      {
        free(v15);
        return v21;
      }
      else
      {
        CFRelease(v21);
        free(v15);
        return 0;
      }
    }
    else
    {
      CFRetain(v2);
    }
  }
  return v2;
}

_QWORD *CGFontCreateWithVariations(_QWORD *cf, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t VTable;
  uint64_t v21;
  uint64_t v22;

  v8 = cf;
  if (cf)
  {
    if (!a2 || !a3)
    {
      CFRetain(cf);
      return v8;
    }
    v11 = CGFontCreate((uint64_t)cf, a2, a3, a4, a5, a6, a7, a8);
    if (v11)
    {
      v19 = (_QWORD *)v11;
      VTable = CGFontGetVTable(v11, v12, v13, v14, v15, v16, v17, v18);
      v21 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(VTable + 40))(v8[14], a2, a3);
      v19[14] = v21;
      if (v21)
      {
        v22 = atomic_load(v8 + 4);
        CGFontSetEncodingVector((uint64_t)v19, v22);
        return v19;
      }
      CFRelease(v19);
    }
    return 0;
  }
  return v8;
}

_QWORD *create_private_data_with_variations()
{
  _QWORD *result;
  _QWORD *v1;

  result = (_QWORD *)FPFontCreateCopyWithVariation();
  if (result)
  {
    v1 = result;
    result = malloc_type_calloc(1uLL, 0x20uLL, 0x1060040D8C947D5uLL);
    *result = 1;
    result[1] = v1;
  }
  return result;
}

void CGFontSetEncodingVector(uint64_t a1, uint64_t a2)
{
  unint64_t *v2;
  char *v5;
  uint64_t i;

  if (a2)
  {
    v2 = (unint64_t *)(a1 + 32);
    if (!atomic_load((unint64_t *)(a1 + 32)))
    {
      v5 = (char *)malloc_type_malloc(0x200uLL, 0x1000040BDFB0063uLL);
      for (i = 0; i != 512; i += 2)
        *(_WORD *)&v5[i] = *(_WORD *)(a2 + i);
      while (!__ldaxr(v2))
      {
        if (!__stlxr((unint64_t)v5, v2))
          return;
      }
      __clrex();
      free(v5);
    }
  }
}

__CFDictionary *CGFontCreateFontsWithURL(const __CFURL *a1)
{
  CFURLRef v1;
  const __CFURL *v2;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v4;
  CFStringRef v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFString *v20;
  const char *v21;
  __CFDictionary *v22;
  const char *v23;
  __CFArray *Count;
  CFStringRef v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  CFStringRef v34;
  CFStringRef v35;
  const void *Value;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __CFDictionary *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __CFArray *v52;
  const __CFDictionary *v53;
  const __CFDictionary *v54;
  CFIndex v55;
  CFIndex v56;
  CFIndex i;
  CGFont *v58;
  CGFontRef CopyWithVariations;
  CGFontRef v60;
  __CFArray *FontsWithPath;
  CFIndex v62;
  const void *ValueAtIndex;
  const void *v64;
  const void *v65;
  const void *v66;
  char v67;

  if (!a1)
    return 0;
  v1 = CFURLCopyAbsoluteURL(a1);
  if (!v1)
    return 0;
  v2 = v1;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v22 = 0;
    goto LABEL_17;
  }
  v4 = Mutable;
  v5 = CFURLCopyScheme(v2);
  if (!v5)
  {
    v23 = "scheme";
LABEL_12:
    CGPostError((uint64_t)"missing or invalid %s.", v6, v7, v8, v9, v10, v11, v12, (char)v23);
LABEL_15:
    Count = 0;
    v22 = v4;
LABEL_16:
    CFRelease(v22);
    v22 = Count;
    goto LABEL_17;
  }
  v13 = v5;
  if (!CFEqual(v5, CFSTR("file")))
  {
    v21 = "scheme";
    goto LABEL_14;
  }
  CFRelease(v13);
  v20 = CFURLCopyFragment(v2, &stru_1E1664C98);
  if (v20)
  {
    v13 = v20;
    if (!expand_parameters(v4, v20))
    {
      v21 = "fragment string";
LABEL_14:
      url_error((char)v21, v13, v14, v15, v16, v17, v18, v19);
      CFRelease(v13);
      goto LABEL_15;
    }
  }
  else
  {
    v26 = CFURLCopyParameterString(v2, &stru_1E1664C98);
    if (!v26)
      goto LABEL_22;
    v13 = v26;
    CGPostError((uint64_t)"font parameters must be specified as URI fragments.", v27, v28, v29, v30, v31, v32, v33, v67);
    if (!expand_parameters(v4, v13))
    {
      v21 = "parameter string";
      goto LABEL_14;
    }
  }
  CFRelease(v13);
LABEL_22:
  v34 = CFURLCopyFileSystemPath(v2, kCFURLPOSIXPathStyle);
  if (!v34)
  {
    v23 = "path";
    goto LABEL_12;
  }
  v35 = v34;
  CFDictionarySetValue(v4, CFSTR("path"), v34);
  CFRelease(v35);
  CFRelease(v2);
  Value = CFDictionaryGetValue(v4, CFSTR("path"));
  v37 = CFDictionaryGetValue(v4, CFSTR("postscript-name"));
  v44 = (__CFDictionary *)CGFontCreateWithPathAndName((uint64_t)Value, (uint64_t)v37, v38, v39, v40, v41, v42, v43);
  if (v44)
  {
    v22 = v44;
    v52 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    CFArrayAppendValue(v52, v22);
    goto LABEL_25;
  }
  FontsWithPath = CGFontCreateFontsWithPath((uint64_t)Value, v45, v46, v47, v48, v49, v50, v51);
  v22 = FontsWithPath;
  if (!FontsWithPath)
    goto LABEL_47;
  if (!CFArrayGetCount(FontsWithPath))
  {
LABEL_45:
    Count = 0;
    goto LABEL_46;
  }
  if (!v37)
    goto LABEL_26;
  Count = (__CFArray *)CFArrayGetCount(v22);
  if (!Count)
  {
LABEL_46:
    v2 = v4;
    goto LABEL_16;
  }
  v62 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v22, v62);
    if (!ValueAtIndex)
      goto LABEL_44;
    v64 = ValueAtIndex;
    v65 = (const void *)(*(uint64_t (**)(_QWORD))(*((_QWORD *)ValueAtIndex + 2) + 152))(*((_QWORD *)ValueAtIndex + 14));
    if (!v65)
      goto LABEL_44;
    v66 = v65;
    if (CFEqual(v37, v65))
      break;
    CFRelease(v66);
LABEL_44:
    if (Count == (__CFArray *)++v62)
      goto LABEL_45;
  }
  v52 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  CFArrayAppendValue(v52, v64);
  CFRelease(v66);
LABEL_25:
  CFRelease(v22);
  v22 = v52;
  if (v52)
  {
LABEL_26:
    v53 = (const __CFDictionary *)CFDictionaryGetValue(v4, CFSTR("variations"));
    if (v53)
    {
      v54 = v53;
      Count = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      if (Count)
      {
        v55 = CFArrayGetCount(v22);
        if (v55)
        {
          v56 = v55;
          for (i = 0; i != v56; ++i)
          {
            v58 = (CGFont *)CFArrayGetValueAtIndex(v22, i);
            CopyWithVariations = CGFontCreateCopyWithVariations(v58, v54);
            if (CopyWithVariations)
            {
              v60 = CopyWithVariations;
              CFArrayAppendValue(Count, CopyWithVariations);
              CFRelease(v60);
            }
          }
        }
      }
      goto LABEL_46;
    }
  }
LABEL_47:
  v2 = v4;
LABEL_17:
  CFRelease(v2);
  return v22;
}

_QWORD *CGFontCreateWithPathAndName(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t VTable;
  uint64_t v20;

  if (!a2)
    return 0;
  v10 = CGFontCreate(a1, a2, a3, a4, a5, a6, a7, a8);
  v18 = (_QWORD *)v10;
  if (v10)
  {
    VTable = CGFontGetVTable(v10, v11, v12, v13, v14, v15, v16, v17);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(VTable + 64))(a1, a2);
    v18[14] = v20;
    if (!v20)
    {
      CFRelease(v18);
      return 0;
    }
  }
  return v18;
}

_QWORD *create_private_data_with_path_and_name()
{
  _QWORD *result;
  _QWORD *v1;

  result = (_QWORD *)FPFontCreateWithPathAndName();
  if (result)
  {
    v1 = result;
    result = malloc_type_calloc(1uLL, 0x20uLL, 0x1060040D8C947D5uLL);
    *result = 1;
    result[1] = v1;
  }
  return result;
}

__CFArray *create_fonts_with_private_data_array(const __CFArray *a1, int a2)
{
  uint64_t Count;
  __CFArray *v5;
  uint64_t Mutable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFIndex i;
  _QWORD *v15;

  Count = CFArrayGetCount(a1);
  if (!Count && !a2)
    return 0;
  Mutable = (uint64_t)CFArrayCreateMutable(0, Count, MEMORY[0x1E0C9B378]);
  v5 = (__CFArray *)Mutable;
  if (Mutable && Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      Mutable = CGFontCreate(Mutable, v7, v8, v9, v10, v11, v12, v13);
      if (Mutable)
      {
        v15 = (_QWORD *)Mutable;
        *(_QWORD *)(Mutable + 112) = CFArrayGetValueAtIndex(a1, i);
        (*(void (**)(void))(v15[2] + 80))();
        CFArrayAppendValue(v5, v15);
        CFRelease(v15);
      }
    }
  }
  return v5;
}

uint64_t CGFontCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t VTable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Instance;
  uint64_t v17;

  VTable = CGFontGetVTable(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!VTable)
    return 0;
  v15 = VTable;
  if (_block_invoke_once_3017 != -1)
    dispatch_once(&_block_invoke_once_3017, &__block_literal_global_7_3018);
  Instance = CGTypeCreateInstance(CGFontGetTypeID_font_type_id, 104, v9, v10, v11, v12, v13, v14);
  v17 = Instance;
  if (Instance)
  {
    *(_QWORD *)(Instance + 16) = v15;
    *(_DWORD *)(Instance + 24) = 0;
    *(_DWORD *)(Instance + 104) = -1;
    initialize_font_database_once();
  }
  return v17;
}

uint64_t CGFontGetVTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  char vars0;

  if (CGFontGetVTable_predicate != -1)
    dispatch_once(&CGFontGetVTable_predicate, &__block_literal_global_19755);
  result = CGFontGetVTable_vtable;
  if (!CGFontGetVTable_vtable)
    _CGHandleAssert("CGFontGetVTable", 85, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Fonts/CGFontVTable.c", "vtable != NULL", "missing vtable", a6, a7, a8, vars0);
  return result;
}

uint64_t initialize_font_database_once()
{
  uint64_t v0;

  if (initialize_font_database_once_predicate != -1)
    dispatch_once(&initialize_font_database_once_predicate, &__block_literal_global_9_3019);
  v0 = pthread_mutex_lock(&initialize_font_database_once_mutex);
  if ((initialize_font_database_once_fontDBInitializer_initialized & 1) == 0)
  {
    if (fontDBInitializer)
      fontDBInitializer(v0);
    initialize_font_database_once_fontDBInitializer_initialized = 1;
  }
  return pthread_mutex_unlock(&initialize_font_database_once_mutex);
}

unint64_t *retain_private_data(unint64_t *result)
{
  unint64_t v1;

  if (result)
  {
    do
      v1 = __ldxr(result);
    while (__stxr(v1 + 1, result));
  }
  return result;
}

uint64_t CGFontDBAddFontsAtPath(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (result)
  {
    if (a2)
    {
      v3 = result;
      v4 = (pthread_mutex_t *)(result + 32);
      pthread_mutex_lock((pthread_mutex_t *)(result + 32));
      add_fonts_at_path_locked(v3, a2, 0, v5, v6, v7, v8, v9);
      return pthread_mutex_unlock(v4);
    }
  }
  return result;
}

void add_fonts_at_path_locked(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  const void *v12;
  __CFArray *FontsWithPath;
  const __CFArray *v14;
  CFIndex Count;
  CFIndex v16;
  CFIndex i;
  _QWORD *ValueAtIndex;
  _QWORD *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;

  if (a1 && a2)
  {
    if (a3 && (v11 = CGFontCreateWithPathAndName(a2, (uint64_t)a3, (uint64_t)a3, a4, a5, a6, a7, a8)) != 0)
    {
      v12 = v11;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 8), a3, v11);
      CFRelease(v12);
    }
    else
    {
      FontsWithPath = CGFontCreateFontsWithPath(a2, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (FontsWithPath)
      {
        v14 = FontsWithPath;
        Count = CFArrayGetCount(FontsWithPath);
        if (Count)
        {
          v16 = Count;
          for (i = 0; i != v16; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v14, i);
            if (ValueAtIndex)
            {
              v19 = ValueAtIndex;
              v20 = (const void *)(*(uint64_t (**)(_QWORD))(ValueAtIndex[2] + 152))(ValueAtIndex[14]);
              if (v20)
              {
                v21 = v20;
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 8), v20, v19);
                CFRelease(v21);
              }
              v22 = (const void *)(*(uint64_t (**)(_QWORD))(v19[2] + 168))(v19[14]);
              if (v22)
              {
                v23 = v22;
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 8), v22, v19);
                CFRelease(v23);
              }
            }
          }
        }
        CFRelease(v14);
      }
    }
  }
}

uint64_t copy_postscript_name()
{
  return FPFontCopyPostScriptName();
}

uint64_t copy_full_name()
{
  return FPFontCopyFullName();
}

__CFArray *CGFontCreateFontsWithPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t VTable;
  const __CFArray *v10;
  const __CFArray *v11;
  __CFArray *fonts_with_private_data_array;

  if (!a1)
    return 0;
  VTable = CGFontGetVTable(a1, a2, a3, a4, a5, a6, a7, a8);
  v10 = (const __CFArray *)(*(uint64_t (**)(uint64_t))(VTable + 48))(a1);
  if (!v10)
    return 0;
  v11 = v10;
  fonts_with_private_data_array = create_fonts_with_private_data_array(v10, 0);
  CFRelease(v11);
  return fonts_with_private_data_array;
}

const __CFArray *create_private_data_array_with_path()
{
  const __CFArray *result;
  const __CFArray *v1;
  __CFArray *private_data_array_with_parser_fonts;

  result = (const __CFArray *)FPFontCreateFontsWithPath();
  if (result)
  {
    v1 = result;
    private_data_array_with_parser_fonts = create_private_data_array_with_parser_fonts(result);
    CFRelease(v1);
    return private_data_array_with_parser_fonts;
  }
  return result;
}

CFDictionaryRef CGFontCopyVariations(CGFontRef font)
{
  uint64_t v2;
  __CFDictionary *Mutable;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  double *v7;
  CFStringRef v8;
  CFStringRef v9;
  unint64_t v11;

  if (!font)
    return 0;
  v11 = 0;
  v2 = (*(uint64_t (**)(_QWORD, unint64_t *))(*((_QWORD *)font + 2) + 208))(*((_QWORD *)font + 14), &v11);
  Mutable = 0;
  if (v2)
    v4 = v11 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = v2;
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v11)
    {
      v6 = 0;
      v7 = (double *)(v5 + 8);
      do
      {
        v8 = copy_name_for_identifier((uint64_t)font, *((_DWORD *)v7 - 2));
        if (v8)
        {
          v9 = v8;
          CGCFDictionarySetFloat(Mutable, v8, *v7);
          CFRelease(v9);
        }
        ++v6;
        v7 += 2;
      }
      while (v6 < v11);
    }
  }
  return Mutable;
}

CFStringRef copy_name_for_identifier(uint64_t a1, unsigned int a2)
{
  CFStringRef result;
  uint64_t v4;
  uint64_t *p_info;
  int v6;
  const void *v7;
  uint64_t v8;
  char cStr[4];
  char v10;

  v8 = 0;
  result = (CFStringRef)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)(a1 + 16) + 408))(*(_QWORD *)(a1 + 112), &v8);
  if (result)
  {
    if (v8)
    {
      v4 = 0;
      p_info = &result->info;
      while (1)
      {
        v6 = *(_DWORD *)p_info;
        p_info += 5;
        if (v6 == a2)
          break;
        if (v8 == ++v4)
          return 0;
      }
      v7 = (const void *)*((_QWORD *)&result->isa + 5 * v4);
      if (v7)
      {
        return (CFStringRef)CFRetain(v7);
      }
      else
      {
        *(_DWORD *)cStr = bswap32(a2);
        v10 = 0;
        return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t get_variation_axes()
{
  return FPFontGetVariationAxes();
}

void CGCFDictionarySetFloat(__CFDictionary *a1, const void *a2, double a3)
{
  CFNumberRef v5;
  CFNumberRef v6;
  double valuePtr;

  valuePtr = a3;
  if (a1 && a2)
  {
    v5 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
    if (v5)
    {
      v6 = v5;
      CFDictionarySetValue(a1, a2, v5);
      CFRelease(v6);
    }
  }
}

uint64_t get_variations()
{
  return FPFontGetVariation();
}

void font_finalize(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 112))
  {
    if (CGFontCacheGetLocalCache_predicate != -1)
      dispatch_once(&CGFontCacheGetLocalCache_predicate, &__block_literal_global_5899);
    CGFontCacheRemoveFont(CGFontCacheGetLocalCache_local_font_cache, a1);
    (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 16) + 88))(*(_QWORD *)(a1 + 112));
  }
  free(*(void **)(a1 + 32));
  free(*(void **)(a1 + 40));
  free(*(void **)(a1 + 48));
  free(*(void **)(a1 + 56));
  CGFontAutohinterRelease(*(char **)(a1 + 64));
  CGFontUnimapRelease(*(char ***)(a1 + 72));
  CGFontNameTableRelease(*(_QWORD *)(a1 + 80));
  CGPropertiesRelease(*(_QWORD *)(a1 + 88));
  CGCIDInfoRelease(*(_QWORD *)(a1 + 96));
}

void CGFontNameTableRelease(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  if (a1)
  {
    v2 = *(_QWORD **)(a1 + 24);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)v2[1];
        free(v2);
        v2 = v3;
      }
      while (v3);
    }
    v4 = *(_QWORD *)(a1 + 16);
    if (v4)
    {
      do
      {
        free(*(void **)v4);
        v4 = *(_QWORD *)(v4 + 8);
      }
      while (v4);
      v5 = *(_QWORD **)(a1 + 16);
      if (v5)
      {
        do
        {
          v6 = (_QWORD *)v5[1];
          free(v5);
          v5 = v6;
        }
        while (v6);
      }
    }
    v7 = *(const void **)(a1 + 56);
    if (v7)
      CFRelease(v7);
    v8 = *(const void **)(a1 + 72);
    if (v8)
      CFRelease(v8);
    v9 = *(const void **)(a1 + 40);
    if (v9)
      CFRelease(v9);
    free(*(void **)(a1 + 8));
    free((void *)a1);
  }
}

void CGFontCacheRemoveFont(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int *v8;
  _DWORD *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v4 = (os_unfair_lock_s *)(a1 + 4);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 4));
  v6 = (_QWORD *)(a1 + 40);
  v5 = *(_QWORD **)(a1 + 40);
  if (v5)
  {
    v7 = (unsigned int *)(a2 + 24);
    do
    {
      while (1)
      {
        v8 = (unsigned int *)*v5;
        v9 = *v5 ? (_DWORD *)(*v5 + 8) : 0;
        if (a2)
        {
          v10 = *v7;
          if (!*v7)
          {
            do
              v11 = __ldxr((unsigned int *)&get_identifier_identifier);
            while (__stxr(v11 + 1, (unsigned int *)&get_identifier_identifier));
            v12 = ~v11;
            while (!__ldxr(v7))
            {
              if (!__stxr(v12, v7))
                goto LABEL_15;
            }
            __clrex();
LABEL_15:
            v10 = *v7;
          }
        }
        else
        {
          v10 = 0;
        }
        if (v10 != *v9)
          break;
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 32), v9);
        CGFontStrikeRelease(v8);
        *v6 = v5[1];
        free(v5);
        v5 = (_QWORD *)*v6;
        if (!*v6)
          goto LABEL_20;
      }
      v6 = v5 + 1;
      v5 = (_QWORD *)v5[1];
    }
    while (v5);
  }
LABEL_20:
  os_unfair_lock_unlock(v4);
}

void CGFontUnimapRelease(char **a1)
{
  if (a1)
  {
    CGFontIndexMapRelease(a1[2]);
    free(a1);
  }
}

void CGFontAutohinterRelease(char *a1)
{
  uint64_t i;
  char *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  if (a1)
  {
    for (i = 0; i != 12; ++i)
    {
      v3 = &a1[8 * i];
      v4 = (unsigned int *)*((_QWORD *)v3 + 1);
      if (v4)
      {
        do
        {
          v5 = __ldxr(v4);
          v6 = v5 - 1;
        }
        while (__stxr(v6, v4));
        if (!v6)
          free(v4);
      }
      v7 = (unsigned int *)*((_QWORD *)v3 + 13);
      if (v7)
      {
        do
        {
          v8 = __ldxr(v7);
          v9 = v8 - 1;
        }
        while (__stxr(v9, v7));
        if (!v9)
          free(v7);
      }
    }
    free(a1);
  }
}

__CFArray *create_private_data_array_with_parser_fonts(const __CFArray *a1)
{
  uint64_t Count;
  __CFArray *Mutable;
  CFIndex i;
  uint64_t v5;
  _QWORD *v6;

  Count = CFArrayGetCount(a1);
  Mutable = CFArrayCreateMutable(0, Count, &xt_font_cfarray_callbacks);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      CFArrayGetValueAtIndex(a1, i);
      v5 = FPFontRetain();
      v6 = malloc_type_calloc(1uLL, 0x20uLL, 0x1060040D8C947D5uLL);
      *v6 = 1;
      v6[1] = v5;
      CFArrayAppendValue(Mutable, v6);
      xt_font_release((uint64_t)v6);
    }
  }
  return Mutable;
}

void xt_font_release(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  const void *v5;

  if (a1)
  {
    do
    {
      v2 = __ldxr((unint64_t *)a1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, (unint64_t *)a1));
    if (!v3)
    {
      __dmb(9u);
      v4 = *(_QWORD *)(a1 + 24);
      if (v4)
      {
        v5 = *(const void **)(v4 + 80);
        if (v5)
          CFRelease(v5);
        pthread_mutex_destroy((pthread_mutex_t *)(v4 + 8));
        free((void *)v4);
      }
      CGFontIndexMapRelease(*(char **)(a1 + 16));
      FPFontRelease();
      free((void *)a1);
    }
  }
}

void CGFontIndexMapRelease(char *a1)
{
  uint64_t i;
  void *v3;

  if ((unint64_t)(a1 + 1) >= 2)
  {
    for (i = 8; i != 520; i += 8)
    {
      v3 = (void *)atomic_load((unint64_t *)&a1[i]);
      free(v3);
    }
    free(a1);
  }
}

CGFloat CGImageTextureDataGetSize(uint64_t a1)
{
  const CGSize *v1;

  v1 = (const CGSize *)(a1 + 72);
  if (!a1)
    v1 = &CGSizeZero;
  return v1->width;
}

uint64_t CGImageTextureDataGetPixelFormat(uint64_t result, int a2)
{
  uint64_t v2;

  if (result)
  {
    if (a2 == 1)
    {
      v2 = result + 112;
    }
    else
    {
      if (a2)
        return 0;
      v2 = result + 104;
    }
    return *(_QWORD *)v2;
  }
  return result;
}

void CGContextSetStrokeColor(CGContextRef c, const CGFloat *components)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  if (c && *((_DWORD *)c + 4) == 1129601108)
  {
    if (components)
      set_stroke_color_with_components((uint64_t *)c, 0, components, v2, v3, v4, v5, v6, v7);
    else
      CGPostError((uint64_t)"%s: components may not be NULL.", (uint64_t)c, 0, v2, v3, v4, v5, v6, (char)"CGContextSetStrokeColor");
  }
  else
  {
    handle_invalid_context((char)"CGContextSetStrokeColor", (uint64_t)c, (uint64_t)components, v2, v3, v4, v5, v6);
  }
}

CGContextRef CGLayerGetContext(CGContextRef layer)
{
  if (layer)
    return (CGContextRef)*((_QWORD *)layer + 2);
  return layer;
}

void fstream_zfree(int a1, void *a2)
{
  free(a2);
}

uint64_t CGColorFunctionGetProperties(const void *a1)
{
  CFTypeID v2;
  uint64_t *v3;

  v2 = CFGetTypeID(a1);
  if (CGColorTRCGetTypeID_cglibrarypredicate != -1)
    dispatch_once(&CGColorTRCGetTypeID_cglibrarypredicate, &__block_literal_global_742);
  if (v2 == CGColorTRCGetTypeID_f())
  {
    if (trc_get_properties_cglibrarypredicate != -1)
      dispatch_once(&trc_get_properties_cglibrarypredicate, &__block_literal_global_39);
    v3 = &trc_get_properties_f;
    return ((uint64_t (*)(const void *))*v3)(a1);
  }
  if (CGColorMatrixGetTypeID_cglibrarypredicate != -1)
    dispatch_once(&CGColorMatrixGetTypeID_cglibrarypredicate, &__block_literal_global_12);
  if (v2 == CGColorMatrixGetTypeID_f())
  {
    if (matrix_get_properties_cglibrarypredicate != -1)
      dispatch_once(&matrix_get_properties_cglibrarypredicate, &__block_literal_global_42);
    v3 = &matrix_get_properties_f;
    return ((uint64_t (*)(const void *))*v3)(a1);
  }
  if (CGColorNxMTransformGetTypeID_cglibrarypredicate != -1)
    dispatch_once(&CGColorNxMTransformGetTypeID_cglibrarypredicate, &__block_literal_global_18);
  if (v2 == CGColorNxMTransformGetTypeID_f())
  {
    if (nxm_get_properties_cglibrarypredicate != -1)
      dispatch_once(&nxm_get_properties_cglibrarypredicate, &__block_literal_global_45);
    v3 = &nxm_get_properties_f;
    return ((uint64_t (*)(const void *))*v3)(a1);
  }
  return 0;
}

uint64_t CGImageProviderCopyIOSurface(uint64_t a1)
{
  int v1;
  uint64_t (*v2)(_QWORD);

  if (a1
    && ((v1 = *(_DWORD *)(a1 + 64), v1 == 3) || v1 == 2)
    && (v2 = *(uint64_t (**)(_QWORD))(a1 + 80)) != 0)
  {
    return v2(*(_QWORD *)(a1 + 56));
  }
  else
  {
    return 0;
  }
}

CFTypeRef CGImageTextureDataRetain(CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  return cf;
}

CFTypeRef pathCreateCopyByClippingWithPath(int a1, CGPathRef path, int a3, const CGPath *a4, int a5)
{
  CFTypeRef v10;
  CFTypeID v11;
  CFTypeID TypeID;
  CFTypeID v13;
  __n128 v15[3];
  __n128 v16;
  __n128 v17;
  __n128 v18;
  uint64_t *v19[3];
  _QWORD v20[3];

  if (!path)
    return 0;
  if (CGPathDisableTypeValidation)
  {
    if (!a4)
      return 0;
LABEL_9:
    memset(v20, 0, sizeof(v20));
    memset(v19, 0, sizeof(v19));
    v17 = 0u;
    v18 = 0u;
    v16 = 0u;
    clip<std::vector<std::vector<ClipperLib::IntPoint>>>(&v16, a1, path, a3, a4, a5, 1, (CGPathRandomAccess *)v20, (uint64_t *)v19);
    v15[0] = v16;
    v15[1] = v17;
    v15[2] = v18;
    v10 = CGPathRandomAccess::new_cgpath_from_clipper(v20, v19, v15);
    v16.n128_u64[0] = (unint64_t)v19;
    std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:se180100]((void ***)&v16);
    v16.n128_u64[0] = (unint64_t)v20;
    std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:se180100]((void ***)&v16);
    return v10;
  }
  v11 = CFGetTypeID(path);
  TypeID = CGPathGetTypeID();
  v10 = 0;
  if (a4 && v11 == TypeID)
  {
    if (!CGPathDisableTypeValidation)
    {
      v13 = CFGetTypeID(a4);
      if (v13 != CGPathGetTypeID())
        return 0;
    }
    goto LABEL_9;
  }
  return v10;
}

void sub_184A06B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  a17 = (void **)&a23;
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:se180100](&a17);
  a17 = (void **)(v23 - 88);
  std::vector<CGPathRandomAccessSubpath>::__destroy_vector::operator()[abi:se180100](&a17);
  _Unwind_Resume(a1);
}

CFTypeRef CGPathRandomAccess::new_cgpath_from_clipper(_QWORD *a1, uint64_t **a2, __n128 *a3)
{
  __n128 v6;
  uint64_t *v7;
  uint64_t *v8;
  __n128 v9;
  CFTypeRef v10;
  CFTypeRef v11;
  float64x2_t v13[3];
  __n128 v14[3];
  CFTypeRef cf;
  __int128 v16;
  CGAffineTransform v17;
  CGAffineTransform v18;

  memset(&v18, 0, sizeof(v18));
  v6 = a3[1];
  *(__n128 *)&v17.a = *a3;
  *(__n128 *)&v17.c = v6;
  *(__n128 *)&v17.tx = a3[2];
  CGAffineTransformInvert(&v18, &v17);
  cf = CGPathCreateMutable();
  v16 = cgpoint_null;
  v7 = *a2;
  v8 = a2[1];
  while (v7 != v8)
  {
    v9 = a3[1];
    v14[0] = *a3;
    v14[1] = v9;
    v14[2] = a3[2];
    v13[0] = *(float64x2_t *)&v18.a;
    v13[1] = *(float64x2_t *)&v18.c;
    v13[2] = *(float64x2_t *)&v18.tx;
    CGPathRandomAccess::recreate_path_from_clipper(a1, v7, v14, v13, (CGPathOutputFiltering *)&cf, 0);
    v7 += 3;
  }
  v10 = CGPathOutputFiltering::cg_path((CGPathOutputFiltering *)&cf);
  v11 = v10;
  if (v10)
    CFRetain(v10);
  if (cf)
    CFRelease(cf);
  return v11;
}

void sub_184A06C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

CGPathRef CGContextCopyPath(CGContextRef c)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const CGPath *v7;
  uint64_t v8;
  __int128 v9;
  CGAffineTransform v11;
  CGAffineTransform transform;

  if (c && *((_DWORD *)c + 4) == 1129601108)
  {
    v7 = (const CGPath *)*((_QWORD *)c + 21);
    if (v7)
    {
      v8 = *((_QWORD *)c + 12);
      v9 = *(_OWORD *)(v8 + 40);
      *(_OWORD *)&v11.a = *(_OWORD *)(v8 + 24);
      *(_OWORD *)&v11.c = v9;
      *(_OWORD *)&v11.tx = *(_OWORD *)(v8 + 56);
      memset(&transform, 0, sizeof(transform));
      CGAffineTransformInvert(&transform, &v11);
      return CGPathCreateMutableCopyByTransformingPath(v7, &transform);
    }
  }
  else
  {
    handle_invalid_context((char)"CGContextCopyPath", (uint64_t)c, v1, v2, v3, v4, v5, v6);
  }
  return 0;
}

void CGContextShowGlyphsWithAdvances(CGContextRef c, const CGGlyph *glyphs, const CGSize *advances, size_t count)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  const CGSize *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 *v16;
  __int128 *v17;
  __int128 v18;
  uint64_t v19;
  float64x2_t v20;
  float64x2_t v21;
  double *p_height;
  float64x2_t v23;
  unsigned int v24;
  CGContextRef v25;
  float64x2_t v26;
  float64x2_t v27;
  CGAffineTransform v28;
  CGAffineTransform v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!c)
  {
    v25 = 0;
LABEL_21:
    handle_invalid_context((char)"CGContextShowGlyphsWithAdvances", (uint64_t)v25, (uint64_t)advances, count, v4, v5, v6, v7);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v25 = c;
    goto LABEL_21;
  }
  if (glyphs)
  {
    v11 = advances;
    if (advances)
    {
      v12 = count;
      if (count)
      {
        v13 = *(_QWORD *)(*((_QWORD *)c + 12) + 136);
        if (*(_QWORD *)(v13 + 8))
        {
          v8.n128_u64[0] = *(_QWORD *)(v13 + 16);
          if (v8.n128_f64[0] != 0.0)
          {
            MEMORY[0x1E0C80A78](c, v8);
            v16 = (__int128 *)((char *)&v28 - v14 - 15);
            v17 = v15 <= 0xFFFFFFFFFFFFFFELL ? (__int128 *)((char *)&v28 - v14 - 15) : 0;
            if (v15 - 0xFFFFFFFFFFFFFFFLL >= 0xF00000000000003ELL)
              v17 = (__int128 *)malloc_type_malloc(16 * v12, 0x48C1F26uLL);
            if (v17)
            {
              v18 = *(_OWORD *)((char *)c + 136);
              *(_OWORD *)&v28.a = *(_OWORD *)((char *)c + 120);
              *(_OWORD *)&v28.c = v18;
              *(_OWORD *)&v28.tx = *(_OWORD *)((char *)c + 152);
              CGAffineTransformInvert(&v29, &v28);
              v19 = 0;
              v20 = *(float64x2_t *)&v29.a;
              v21 = *(float64x2_t *)&v29.c;
              p_height = &v11->height;
              v23 = 0uLL;
              do
              {
                v17[v19] = (__int128)v23;
                v23 = vaddq_f64(v23, vmlaq_n_f64(vmulq_n_f64(v21, *p_height), v20, *(p_height - 1)));
                ++v19;
                p_height += 2;
              }
              while (v12 != v19);
              v24 = *(char *)(*(_QWORD *)(*((_QWORD *)c + 12) + 136) + 1);
              if (v24 < 4)
              {
                draw_glyphs_17005((uint64_t)c, (uint64_t)glyphs, (uint64_t)v17, v12);
                goto LABEL_25;
              }
              if (v24 - 4 >= 3)
              {
                if (v24 != 7)
                  goto LABEL_25;
              }
              else
              {
                draw_glyphs_17005((uint64_t)c, (uint64_t)glyphs, (uint64_t)v17, v12);
              }
              clip_to_glyphs((uint64_t)c, (__int16 *)glyphs, v17, v12);
LABEL_25:
              v26 = 0uLL;
              do
              {
                v27 = *(float64x2_t *)v11++;
                v26 = vaddq_f64(v26, v27);
                --v12;
              }
              while (v12);
              *(float64x2_t *)((char *)c + 152) = vaddq_f64(v26, *(float64x2_t *)((char *)c + 152));
              if (v17 != v16)
                free(v17);
            }
          }
        }
      }
    }
  }
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CGAffineTransform *v9;
  double b;
  double c;
  double d;
  double v14;
  __int128 v15;
  double v16;
  CGFloat v17;
  double v18;
  double v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  double ty;
  double tx;

  v9 = t;
  b = t->b;
  c = t->c;
  d = t->d;
  v14 = t->a * d - b * c;
  if (v14 == 0.0)
  {
    CGPostError((uint64_t)"%s: singular matrix.", v2, v3, v4, v5, v6, v7, v8, (char)"CGAffineTransformInvert");
    v15 = *(_OWORD *)&v9->c;
    *(_OWORD *)&retstr->a = *(_OWORD *)&v9->a;
    *(_OWORD *)&retstr->c = v15;
    *(_OWORD *)&retstr->tx = *(_OWORD *)&v9->tx;
  }
  else
  {
    v16 = 1.0 / v14;
    v17 = t->a * v16;
    v18 = b * v16;
    v19 = c * v16;
    v20 = d * v16;
    v21 = -(b * v16);
    v22 = -(c * v16);
    tx = t->tx;
    ty = t->ty;
    retstr->a = v20;
    retstr->b = v21;
    retstr->c = v22;
    retstr->d = v17;
    retstr->tx = v19 * ty - v20 * tx;
    retstr->ty = v18 * tx - v17 * ty;
  }
  return t;
}

uint64_t CGContextDelegateDrawGlyphs(uint64_t result)
{
  uint64_t (*v1)(void);

  if (result)
  {
    v1 = *(uint64_t (**)(void))(result + 88);
    if (v1)
      return v1();
    else
      return 1006;
  }
  return result;
}

uint64_t rip_auto_context_draw_glyphs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);

  if (!a1)
  {
    v5 = 112;
    pthread_mutex_lock((pthread_mutex_t *)0x70);
    goto LABEL_6;
  }
  v4 = *(_QWORD *)(a1 + 288);
  v5 = v4 + 112;
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 112));
  if (!v4)
  {
LABEL_6:
    rip_auto_context_update_content_info_from_GState(0, a3);
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(v4 + 88);
  if (!v6)
  {
    v6 = *(_QWORD *)(v4 + 80);
    rip_auto_context_update_content_info_from_GState(v4, a3);
    if (v6)
      goto LABEL_9;
LABEL_7:
    v14 = 0;
    goto LABEL_15;
  }
  rip_auto_context_update_content_info_from_GState(v4, a3);
LABEL_9:
  v15 = *(_QWORD *)(v6 + 40);
  if (v15)
  {
    v16 = *(uint64_t (**)(void))(v15 + 88);
    if (v16)
      v14 = v16();
    else
      v14 = 1006;
  }
  else
  {
    v14 = 0;
  }
  *(_BYTE *)(v4 + 105) |= rip_auto_context_contains_transparency(v4, v7, v8, v9, v10, v11, v12, v13);
LABEL_15:
  pthread_mutex_unlock((pthread_mutex_t *)v5);
  return v14;
}

void CGPostError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  CGLogWithArguments(2, a1, &a9);
}

void CGLogWithArguments(int a1, uint64_t a2, va_list a3)
{
  int v3;
  const __CFAllocator *v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  const char *CStringPtr;
  const char *v11;
  char *v12;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  uint8_t buf[4];
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1 - 1;
  if (a1 >= 1)
  {
    if (CGLogWithArguments_predicate != -1)
      dispatch_once(&CGLogWithArguments_predicate, &__block_literal_global_12905);
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%s"), a2);
    if (v7)
    {
      v8 = v7;
      v9 = CFStringCreateWithFormatAndArguments(v6, 0, v7, a3);
      CFRelease(v8);
      if (v9)
      {
        CStringPtr = CFStringGetCStringPtr(v9, 0x8000100u);
        if (CStringPtr)
        {
          v11 = CStringPtr;
          v12 = 0;
        }
        else
        {
          Length = CFStringGetLength(v9);
          MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
          v12 = (char *)malloc_type_calloc(MaximumSizeForEncoding, 1uLL, 0x7FACFFB0uLL);
          if (v12 && CFStringGetCString(v9, v12, MaximumSizeForEncoding, 0x8000100u))
            v11 = v12;
          else
            v11 = "";
        }
        switch(v3)
        {
          case 0:
            v15 = CGLogWithArguments_log;
            if (os_log_type_enabled((os_log_t)CGLogWithArguments_log, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446210;
              v19 = v11;
              _os_log_impl(&dword_1849A5000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            }
            break;
          case 1:
            v16 = CGLogWithArguments_log;
            if (os_log_type_enabled((os_log_t)CGLogWithArguments_log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446210;
              v19 = v11;
              _os_log_error_impl(&dword_1849A5000, v16, OS_LOG_TYPE_ERROR, "%{public}s", buf, 0xCu);
            }
            goto LABEL_19;
          case 2:
            v17 = CGLogWithArguments_log;
            if (os_log_type_enabled((os_log_t)CGLogWithArguments_log, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 136446210;
              v19 = v11;
              _os_log_fault_impl(&dword_1849A5000, v17, OS_LOG_TYPE_FAULT, "%{public}s", buf, 0xCu);
            }
LABEL_19:
            callErrorCallback();
            break;
          case 3:
            puts(v11);
            break;
          default:
            break;
        }
        free(v12);
        CFRelease(v9);
      }
    }
  }
}

void CGPathRandomAccess::recreate_path_from_clipper(_QWORD *a1, uint64_t *a2, __n128 *a3, float64x2_t *a4, CGPathOutputFiltering *a5, char a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  float64x2_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  double v28;
  double v29;
  double v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __n128 v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  double v44;
  double v45;
  double v46;
  double v47;
  __n128 v48;
  float64x2_t v49;
  uint64_t *v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  float64x2_t *v55;
  unint64_t v56;
  int v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  double *v63;
  CGFloat v64;
  CGFloat v65;
  double *v66;
  CGFloat v67;
  CGFloat v68;
  double *v69;
  CGFloat v70;
  CGFloat v71;
  uint64_t v72;
  uint64_t v73;
  double *v74;
  double v75;
  double v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  float64x2_t *v81;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char v90;
  unint64_t v91;
  _QWORD *v92;
  float64x2_t x;
  CGAffineTransform v94;
  _BYTE v95[40];
  __int128 v96;
  __int128 v97;
  unint64_t v98;
  _OWORD v99[3];
  CGAffineTransform v100;
  CGAffineTransform v101;
  _QWORD v102[6];
  _QWORD v103[6];
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  __n128 (*v107)(_QWORD *, uint64_t);
  void (*v108)(uint64_t);
  void *__p;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  void (*v116)(uint64_t);
  void *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD v120[5];
  __n128 v121;
  __n128 v122;
  __n128 v123;

  v11 = a1;
  v12 = *a2;
  v13 = a2[1];
  v14 = (v13 - *a2) / 48;
  if (v13 != *a2)
  {
    v15 = 0;
    if (v14 <= 1)
      v16 = 1;
    else
      v16 = (v13 - *a2) / 48;
    do
    {
      v17 = 0;
      v18 = v12 + 48 * v15 + 16;
      do
      {
        if (*(_QWORD *)v18 != -1)
        {
          if ((v17 & 1) != 0 || *(double *)(v18 + 8) - (double)(uint64_t)*(double *)(v18 + 8) == 0.0)
            goto LABEL_13;
          v17 = 1;
        }
        v18 += 16;
      }
      while (v18 != v12 + 48 + 48 * v15);
      ++v15;
    }
    while (v15 != v16);
  }
  v15 = 0;
LABEL_13:
  memset((char *)v99 + 8, 0, 32);
  CGPathRandomAccess::state_at_point((uint64_t)v99, a1, v12, v13, v15, 0.0);
  *(double *)v99 = (double)v15;
  v19 = *a2;
  v20 = a2[1];
  v21 = 0xAAAAAAAAAAAAAAABLL * ((v20 - *a2) >> 4);
  if (v15)
    v21 = v15;
  v98 = 0;
  v96 = 0u;
  v97 = 0u;
  CGPathRandomAccess::state_at_point((uint64_t)&v96, v11, v19, v20, v21 - 1, 0.0);
  v22 = *a2;
  v23 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4);
  v90 = a6;
  if (*(_QWORD *)&v99[1] == -1)
    goto LABEL_19;
  if (v23 <= v15)
    goto LABEL_91;
  if (*(_QWORD *)(v22 + 48 * v15 + 16) != -1 && *(_QWORD *)(v22 + 48 * v15 + 32) != -1)
  {
LABEL_19:
    if (v23 > v15)
    {
      v24 = vaddq_f64(a4[2], vmlaq_n_f64(vmulq_n_f64(a4[1], (double)*(uint64_t *)(v22 + 48 * v15 + 8)), *a4, (double)*(uint64_t *)(v22 + 48 * v15)));
LABEL_28:
      x = v24;
      goto LABEL_29;
    }
    goto LABEL_91;
  }
  v25 = *v11;
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11[1] - *v11) >> 3)) <= *(_QWORD *)&v99[1])
    goto LABEL_91;
  v26 = *(_QWORD *)(v25 + 56 * *(_QWORD *)&v99[1]);
  v27 = (*(_QWORD *)(v25 + 56 * *(_QWORD *)&v99[1] + 8) - v26) >> 4;
  v28 = (double)v27;
  if (*((double *)&v99[1] + 1) < (double)v27)
    v28 = 0.0;
  v29 = *((double *)&v99[1] + 1) - v28;
  v30 = v29 - (double)(uint64_t)v29;
  v31 = (unint64_t)v29;
  if (v30 == 0.0)
  {
    if (v27 > v31)
    {
      v32 = *(_QWORD *)(v26 + 16 * v31);
      v34 = (uint64_t *)(v25 + 56 * *(_QWORD *)&v99[1] + 24);
      v33 = *v34;
      if (v32 < (v34[1] - *v34) >> 4)
      {
        v24 = *(float64x2_t *)(v33 + 16 * v32);
        goto LABEL_28;
      }
    }
LABEL_91:
    __break(1u);
    return;
  }
  if (v27 <= v31)
    goto LABEL_91;
  v78 = v26 + 16 * v31;
  if (*(_BYTE *)(v78 + 8))
  {
    v80 = (uint64_t *)(v25 + 56 * *(_QWORD *)&v99[1] + 24);
    v79 = *v80;
    if (*(_QWORD *)v78 >= (unint64_t)((v80[1] - *v80) >> 4))
      goto LABEL_91;
    v81 = (float64x2_t *)(v79 + 16 * *(_QWORD *)v78);
    __asm { FMOV            V4.2D, #3.0 }
    x = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmulq_n_f64(vmulq_n_f64(vmulq_f64(v81[1], _Q4), v30), 1.0 - v30), 1.0 - v30), vmulq_n_f64(vmulq_n_f64(*v81, 1.0 - v30), 1.0 - v30), 1.0 - v30), vmulq_n_f64(vmulq_n_f64(vmulq_f64(v81[2], _Q4), v30), v30), 1.0 - v30), vmulq_n_f64(vmulq_n_f64(v81[3], v30), v30), v30);
  }
  else
  {
    v86 = *(_QWORD *)v78;
    v87 = *(_QWORD *)(v25 + 56 * *(_QWORD *)&v99[1] + 24);
    v88 = (*(_QWORD *)(v25 + 56 * *(_QWORD *)&v99[1] + 32) - v87) >> 4;
    if (v88 <= v86)
      goto LABEL_91;
    if (v86 + 1 == v88)
      v89 = 0;
    else
      v89 = v86 + 1;
    x = vmlaq_n_f64(*(float64x2_t *)(v87 + 16 * v86), vsubq_f64(*(float64x2_t *)(v87 + 16 * v89), *(float64x2_t *)(v87 + 16 * v86)), v30);
  }
LABEL_29:
  CGPathOutputFiltering::commit_pending_line_point_if_needed(a5);
  CGPathMoveToPoint(*(CGMutablePathRef *)a5, 0, x.f64[0], x.f64[1]);
  v35 = v14 + v15;
  v36 = v14 + v15 + 1;
  v37 = v15 + 1;
  if (v37 < v36)
  {
    v91 = v14;
    v92 = v11;
    do
    {
      memset(&v95[8], 0, 32);
      CGPathRandomAccess::state_at_point((uint64_t)v95, v11, *a2, a2[1], v37, 0.0);
      *(_QWORD *)v95 = *(_QWORD *)&v99[0];
      v39 = v37 % v14;
      v40 = *a2;
      if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4) <= v37 % v14)
        goto LABEL_91;
      if (v95[8] != BYTE8(v99[0])
        || v37 == v35
        || *(_QWORD *)&v95[16] == -1
        || *(_QWORD *)&v95[16] != *(_QWORD *)&v99[1]
        || (v41 = *(_QWORD *)(v40 + 48 * v39 + 32), v41 != -1)
        && (*(_QWORD *)(v40 + 48 * v39 + 16) != v41
         || *(double *)(v40 + 48 * v39 + 24) != *(double *)(v40 + 48 * v39 + 40)))
      {
        v42 = (uint64_t *)(v40 + 48 * v39);
        _ZF = *(double *)v99 + 1.0 == (double)v37 || *(_QWORD *)&v99[1] == -1;
        if (_ZF)
        {
          if (v37 != v35)
          {
            v44 = (double)*v42;
            v45 = (double)*(uint64_t *)(v40 + 48 * v39 + 8);
            v46 = a4[2].f64[0] + a4[1].f64[0] * v45 + a4->f64[0] * v44;
            v47 = a4[2].f64[1] + a4[1].f64[1] * v45 + a4->f64[1] * v44;
            v48 = a3[1];
            *(__n128 *)&v94.a = *a3;
            *(__n128 *)&v94.c = v48;
            *(__n128 *)&v94.tx = a3[2];
            CGPathOutputFiltering::add_line_to_point(a5, v46, v47, &v94);
          }
        }
        else
        {
          v49 = x;
          if (v37 != v35)
          {
            v38 = (__n128)vmlaq_n_f64(vmulq_n_f64(a4[1], (double)*(uint64_t *)(v40 + 48 * v39 + 8)), *a4, (double)*v42);
            v49 = vaddq_f64(a4[2], (float64x2_t)v38);
          }
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11[1] - *v11) >> 3)) <= *(_QWORD *)&v99[1])
            goto LABEL_91;
          v38.n128_u64[0] = v98;
          v50 = (uint64_t *)(*v11 + 56 * *(_QWORD *)&v99[1]);
          v51 = a3[1];
          *(__n128 *)&v100.a = *a3;
          *(__n128 *)&v100.c = v51;
          v52 = a3[2];
          *(__n128 *)&v100.tx = v52;
          if (BYTE8(v99[0]))
          {
            v120[0] = MEMORY[0x1E0C809B0];
            v120[1] = 0x40000000;
            v120[2] = ___ZNK25CGPathRandomAccessSubpath20append_range_to_pathEddbb7CGPoint17CGAffineTransformR21CGPathOutputFiltering_block_invoke;
            v120[3] = &__block_descriptor_tmp_7;
            v120[4] = a5;
            v53 = a3[1];
            v121 = *a3;
            v122 = v53;
            v123 = a3[2];
            v54.n128_u64[1] = v123.n128_u64[1];
            v112 = MEMORY[0x1E0C809B0];
            v113 = 0x40000000;
            v114 = (uint64_t)___ZNK25CGPathRandomAccessSubpath20append_range_to_pathEddbb7CGPoint17CGAffineTransformR21CGPathOutputFiltering_block_invoke_2;
            v115 = &__block_descriptor_tmp_9;
            v116 = (void (*)(uint64_t))a5;
            v54.n128_u64[0] = *((_QWORD *)&v99[1] + 1);
            CGPathRandomAccessSubpath::append_range_to_path(v50, v37 == v35, 0, (uint64_t)v120, (uint64_t)&v112, v54, v38, v49.f64[0], v49.f64[1]);
          }
          else
          {
            v55 = a4;
            v112 = 0;
            v113 = (uint64_t)&v112;
            v114 = 0x4002000000;
            v115 = __Block_byref_object_copy_;
            v116 = __Block_byref_object_dispose_;
            v118 = 0;
            v119 = 0;
            v117 = 0;
            v104 = 0;
            v105 = &v104;
            v106 = 0x4002000000;
            v107 = __Block_byref_object_copy__10;
            v108 = __Block_byref_object_dispose__11;
            v110 = 0;
            v111 = 0;
            __p = 0;
            v102[5] = &v104;
            v103[0] = MEMORY[0x1E0C809B0];
            v103[1] = 0x40000000;
            v103[2] = ___ZNK25CGPathRandomAccessSubpath20append_range_to_pathEddbb7CGPoint17CGAffineTransformR21CGPathOutputFiltering_block_invoke_12;
            v103[3] = &unk_1E1630310;
            v103[4] = &v112;
            v103[5] = &v104;
            v102[0] = MEMORY[0x1E0C809B0];
            v102[1] = 0x40000000;
            v102[2] = ___ZNK25CGPathRandomAccessSubpath20append_range_to_pathEddbb7CGPoint17CGAffineTransformR21CGPathOutputFiltering_block_invoke_2_14;
            v102[3] = &unk_1E1630338;
            v102[4] = &v112;
            v52.n128_u64[0] = v98;
            v38.n128_u64[0] = *((_QWORD *)&v99[1] + 1);
            CGPathRandomAccessSubpath::append_range_to_path(v50, v37 == v35, (CGPoint *)1, (uint64_t)v103, (uint64_t)v102, v52, v38, v49.f64[0], v49.f64[1]);
            v56 = *(_QWORD *)(v113 + 48);
            v57 = v56 & 0x3F;
            if (v56 > 0x3F || (v56 & 0x3F) != 0)
            {
              v58 = (_QWORD *)(*(_QWORD *)(v113 + 40) + 8 * (v56 >> 6));
              v59 = ((v105[6] - v105[5]) >> 4) - 1;
              do
              {
                if (v57)
                  v60 = 0;
                else
                  v60 = -1;
                v58 += v60;
                if (v57)
                  --v57;
                else
                  v57 = 63;
                if (((*v58 >> v57) & 1) != 0)
                {
                  v61 = v105[5];
                  v62 = (v105[6] - v61) >> 4;
                  if (v62 <= v59 - 1 || v62 <= v59 - 2 || v62 <= v59 - 3)
                    goto LABEL_91;
                  v63 = (double *)(v61 + 16 * (v59 - 1));
                  v64 = *v63;
                  v65 = v63[1];
                  v66 = (double *)(v61 + 16 * (v59 - 2));
                  v67 = *v66;
                  v68 = v66[1];
                  v69 = (double *)(v61 + 16 * (v59 - 3));
                  v70 = *v69;
                  v71 = v69[1];
                  CGPathOutputFiltering::commit_pending_line_point_if_needed(a5);
                  CGPathAddCurveToPoint(*(CGMutablePathRef *)a5, 0, v64, v65, v67, v68, v70, v71);
                  v72 = -4;
                }
                else
                {
                  v73 = v105[5];
                  if (v59 >= (v105[6] - v73) >> 4)
                    goto LABEL_91;
                  v74 = (double *)(v73 + 16 * v59);
                  v75 = *v74;
                  v76 = v74[1];
                  v101 = v100;
                  CGPathOutputFiltering::add_line_to_point(a5, v75, v76, &v101);
                  v72 = -1;
                }
                v59 += v72;
              }
              while (v58 != *(_QWORD **)(v113 + 40) || v57 != 0);
            }
            _Block_object_dispose(&v104, 8);
            a4 = v55;
            if (__p)
            {
              v110 = __p;
              operator delete(__p);
            }
            _Block_object_dispose(&v112, 8);
            v14 = v91;
            v11 = v92;
            if (v117)
              operator delete(v117);
          }
        }
        *(double *)v95 = (double)v37;
        *(_QWORD *)&v99[2] = *(_QWORD *)&v95[32];
        v99[0] = *(_OWORD *)v95;
        v99[1] = *(_OWORD *)&v95[16];
      }
      v96 = *(_OWORD *)v95;
      v97 = *(_OWORD *)&v95[16];
      v98 = *(_QWORD *)&v95[32];
      _ZF = v37++ == v35;
    }
    while (!_ZF);
  }
  if ((v90 & 1) == 0)
  {
    CGPathOutputFiltering::commit_pending_line_point_if_needed(a5);
    CGPathCloseSubpath(*(CGMutablePathRef *)a5);
  }
}

void sub_184A07D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  void *v69;

  _Block_object_dispose(&a68, 8);
  v69 = (void *)STACK[0x200];
  if (STACK[0x200])
  {
    STACK[0x208] = (unint64_t)v69;
    operator delete(v69);
  }
  _Block_object_dispose(&STACK[0x218], 8);
  if (STACK[0x240])
    operator delete((void *)STACK[0x240]);
  _Unwind_Resume(a1);
}

double CGPathRandomAccess::state_at_point(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, unint64_t a5, double result)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  double *v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  double v18;
  uint64_t i;
  double v20;
  double v21;
  uint64_t v24;
  double *v25;
  double *v26;
  double *v27;
  double *v28;
  double *v29;
  uint64_t v30;
  double *v31;
  double *v32;
  double *v33;
  double *v34;
  double *v35;
  double *v36;
  double *v37;
  double *v38;
  double *v39;
  double v40;
  double v41;
  double v42;
  double v43;
  _BYTE v44[16];
  uint64_t v45;
  _OWORD v46[2];
  _QWORD v47[10];

  v47[9] = *MEMORY[0x1E0C80C00];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((a4 - a3) >> 4);
  v7 = a3 + 48 * (a5 % v6);
  *(_QWORD *)(a1 + 16) = -1;
  v8 = v7 + 16;
  v9 = v7 + 48;
  if (v7 + 16 == v7 + 48)
    return result;
  v10 = 0;
  v11 = (double *)&v45;
  v12 = (double *)v46;
  v13 = a3 + 48 * ((a5 + 1) % v6);
  v14 = v13 + 16;
  v15 = v13 + 48;
  result = 1.0;
  do
  {
    v16 = *(_QWORD *)v8;
    if (*(_QWORD *)v8 != -1 && v14 != v15)
    {
      v18 = *(double *)(v8 + 8);
      for (i = v14; i != v15; i += 16)
      {
        if (v16 == *(_QWORD *)i)
        {
          if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[1] - *a2) >> 3) <= v16)
            __break(1u);
          v20 = *(double *)(i + 8);
          if (v18 == v20)
            break;
          if (vabdd_f64(v18, v20) <= 1.0)
          {
            v24 = v10;
            v26 = (double *)&v44[32 * v10];
            *(_QWORD *)v26 = v16;
            *((_BYTE *)v26 + 8) = v20 > v18;
            v26[2] = v18;
          }
          else
          {
            v21 = (double)(unint64_t)((uint64_t)(*(_QWORD *)(*a2 + 56 * v16 + 8) - *(_QWORD *)(*a2 + 56 * v16)) >> 4);
            if (v21 - v20 <= 1.0 && v18 < 1.0)
            {
              v24 = v10;
              v27 = (double *)&v44[32 * v10];
              *(_QWORD *)v27 = v16;
              *((_BYTE *)v27 + 8) = 0;
              v27[2] = v18 + v21;
            }
            else
            {
              if (v21 - v18 > 1.0 || v20 >= 1.0)
                continue;
              v24 = v10;
              v25 = (double *)&v44[32 * v10];
              *(_QWORD *)v25 = v16;
              *((_BYTE *)v25 + 8) = 1;
              v25[2] = v18;
              v20 = v20 + v21;
            }
          }
          *(double *)&v46[2 * v24] = v20;
          ++v10;
        }
      }
    }
    v8 += 16;
  }
  while (v8 != v9);
  if (v10)
  {
    v28 = (double *)v44;
    if (v10 != 1)
    {
      v29 = (double *)v47;
      v30 = 32 * v10 - 32;
      v31 = (double *)&v45;
      v32 = (double *)v46;
      v33 = (double *)&v45;
      v34 = (double *)v46;
      v35 = (double *)v46;
      v36 = (double *)&v45;
      v37 = (double *)v46;
      v38 = (double *)&v45;
      v39 = (double *)v47;
      do
      {
        v40 = *v39;
        v39 += 4;
        v41 = vabdd_f64(*(v29 - 1), v40);
        v42 = vabdd_f64(*v11, *v12);
        if (v41 >= v42)
        {
          v11 = v31;
        }
        else
        {
          v28 = v29 - 3;
          v11 = v29 - 1;
        }
        if (v41 >= v42)
          v31 = v33;
        else
          v31 = v29 - 1;
        if (v41 >= v42)
          v33 = v36;
        else
          v33 = v29 - 1;
        if (v41 >= v42)
          v36 = v38;
        else
          v36 = v29 - 1;
        v38 = v28 + 2;
        if (v41 >= v42)
          v12 = v32;
        else
          v12 = v29;
        if (v41 >= v42)
          v32 = v34;
        else
          v32 = v29;
        if (v41 >= v42)
          v34 = v35;
        else
          v34 = v29;
        if (v41 >= v42)
          v35 = v37;
        else
          v35 = v29;
        v37 = v28 + 3;
        v29 = v39;
        v30 -= 32;
      }
      while (v30);
    }
    *(double *)(a1 + 16) = *v28;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)v28 + 8);
    result = *v11;
    v43 = *v12;
    *(double *)(a1 + 24) = *v11;
    *(double *)(a1 + 32) = v43;
  }
  return result;
}

uint64_t *CGPathRandomAccessSubpath::append_range_to_path(uint64_t *result, int a2, CGPoint *a3, uint64_t a4, uint64_t a5, __n128 a6, __n128 a7, CGFloat a8, CGFloat a9)
{
  int v11;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  unint64_t v22;
  double v23;
  unint64_t v24;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  float64x2_t v30;
  unint64_t v31;
  uint64_t v32;
  float64x2_t v33;
  uint64_t v34;
  CGPoint *v35;
  unint64_t *v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  CGPoint v44[3];
  CGFloat v45;
  CGFloat v46;
  uint64_t v47;

  v11 = (int)a3;
  v15 = result;
  v47 = *MEMORY[0x1E0C80C00];
  v16 = *result;
  v17 = (result[1] - *result) >> 4;
  if ((double)v17 <= a7.n128_f64[0])
    v18 = (double)v17;
  else
    v18 = 0.0;
  v19 = a7.n128_f64[0] - v18;
  if ((double)v17 <= a6.n128_f64[0])
    v20 = (double)v17;
  else
    v20 = 0.0;
  v21 = a6.n128_f64[0] - v20;
  v22 = (unint64_t)v21;
  v23 = (double)(unint64_t)v21;
  v24 = (unint64_t)v19;
  if (v19 == v21 && v21 == v23)
    return CGPathRandomAccessSubpath::append_sections_to_path(result, (unint64_t)v21, (unint64_t)v19, a2, (int)a3, a4, a5);
  if (v21 < v19 && v22 == v24)
  {
    if (v17 <= v22)
      goto LABEL_54;
    if (*(_BYTE *)(v16 + 16 * v22 + 8))
    {
      v31 = *(_QWORD *)(v16 + 16 * v22);
      v32 = result[3];
      if (v31 < (result[4] - v32) >> 4)
      {
        v33 = CGPathRandomAccessSubpath::cubic_curve_between((float64x2_t *)(v32 + 16 * v31), (float64x2_t *)v44, v21 - (double)(uint64_t)v21, v19 - v23, a3);
        v34 = 3;
        if (v11)
          v34 = 0;
        v35 = &v44[v34];
        v35->x = a8;
        v35->y = a9;
        return (uint64_t *)(*(uint64_t (**)(uint64_t, CGPoint *, float64x2_t))(a5 + 16))(a5, v44, v33);
      }
LABEL_54:
      __break(1u);
    }
    if ((a2 & 1) == 0)
      return (uint64_t *)(*(uint64_t (**)(uint64_t, CGFloat, CGFloat))(a4 + 16))(a4, a8, a9);
  }
  else
  {
    if (v17 <= v22)
      goto LABEL_54;
    v27 = v16 + 16 * v22;
    if (*(_BYTE *)(v27 + 8))
    {
      v28 = *(_QWORD *)v27;
      v29 = result[3];
      if (v28 >= (result[4] - v29) >> 4)
        goto LABEL_54;
      v30 = CGPathRandomAccessSubpath::cubic_curve_between((float64x2_t *)(v29 + 16 * v28), (float64x2_t *)v44, v21 - (double)(uint64_t)v21, 1.0, a3);
      if (v11)
      {
        v44[0].x = a8;
        v44[0].y = a9;
      }
      result = (uint64_t *)(*(uint64_t (**)(uint64_t, CGPoint *, float64x2_t))(a5 + 16))(a5, v44, v30);
    }
    else if ((_DWORD)a3)
    {
      if ((a2 & 1) == 0)
      {
        a6.n128_f64[0] = a8;
        a7.n128_f64[0] = a9;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t, __n128, __n128))(a4 + 16))(a4, a6, a7);
      }
    }
    else
    {
      v36 = (unint64_t *)(result[3]
                               + 16 * ((*(_QWORD *)v27 + 1) % (unint64_t)((result[4] - result[3]) >> 4)));
      a6.n128_u64[0] = *v36;
      a7.n128_u64[0] = v36[1];
      result = (uint64_t *)(*(uint64_t (**)(uint64_t, __n128, __n128))(a4 + 16))(a4, a6, a7);
    }
    if ((v22 + 1) % ((v15[1] - *v15) >> 4) != v24)
    {
      if (a2)
        v37 = (v11 & 1) == 0 && v19 == (double)v24;
      else
        v37 = 0;
      result = CGPathRandomAccessSubpath::append_sections_to_path(v15, v22 + 1, (unint64_t)v19, v37, v11, a4, a5);
    }
    if (v19 != (double)v24)
    {
      if (v24 >= (v15[1] - *v15) >> 4)
        goto LABEL_54;
      v38 = *v15 + 16 * v24;
      if (*(_BYTE *)(v38 + 8))
      {
        v39 = *(_QWORD *)v38;
        v40 = v15[3];
        if (v39 < (v15[4] - v40) >> 4)
        {
          v33 = CGPathRandomAccessSubpath::cubic_curve_between((float64x2_t *)(v40 + 16 * v39), (float64x2_t *)v44, 0.0, v19 - (double)(uint64_t)v19, a3);
          if ((v11 & 1) == 0)
          {
            v45 = a8;
            v46 = a9;
          }
          return (uint64_t *)(*(uint64_t (**)(uint64_t, CGPoint *, float64x2_t))(a5 + 16))(a5, v44, v33);
        }
        goto LABEL_54;
      }
      if (v11)
      {
        v41 = *(_QWORD *)v38;
        v42 = v15[3];
        if (v41 < (v15[4] - v42) >> 4)
        {
          v43 = (unint64_t *)(v42 + 16 * v41);
          a6.n128_u64[0] = *v43;
          a7.n128_u64[0] = v43[1];
          return (uint64_t *)(*(uint64_t (**)(uint64_t, __n128, __n128))(a4 + 16))(a4, a6, a7);
        }
        goto LABEL_54;
      }
      if ((a2 & 1) == 0)
      {
        a6.n128_f64[0] = a8;
        a7.n128_f64[0] = a9;
        return (uint64_t *)(*(uint64_t (**)(uint64_t, __n128, __n128))(a4 + 16))(a4, a6, a7);
      }
    }
  }
  return result;
}

void ___ZNK25CGPathRandomAccessSubpath20append_range_to_pathEddbb7CGPoint17CGAffineTransformR21CGPathOutputFiltering_block_invoke_2(uint64_t a1, double *a2)
{
  CGPathOutputFiltering *v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;

  v2 = *(CGPathOutputFiltering **)(a1 + 32);
  v3 = a2[2];
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[6];
  v8 = a2[7];
  CGPathOutputFiltering::commit_pending_line_point_if_needed(v2);
  CGPathAddCurveToPoint(*(CGMutablePathRef *)v2, 0, v3, v4, v5, v6, v7, v8);
}

CGFloat CGPathOutputFiltering::commit_pending_line_point_if_needed(CGPathOutputFiltering *this)
{
  _OWORD *v1;
  CGFloat result;
  double v3;
  BOOL v4;

  result = *((double *)this + 1);
  v3 = *((double *)this + 2);
  v1 = (_OWORD *)((char *)this + 8);
  v4 = fabs(v3) == INFINITY;
  if (fabs(result) != INFINITY || !v4)
  {
    CGPathAddLineToPoint(*(CGMutablePathRef *)this, 0, result, v3);
    result = *(double *)&cgpoint_null;
    *v1 = cgpoint_null;
  }
  return result;
}

float64x2_t CGPathRandomAccessSubpath::cubic_curve_between(float64x2_t *this, float64x2_t *a2, double a3, double a4, CGPoint *a5)
{
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t result;

  v5 = this[1];
  v6 = this[2];
  v7 = vmlaq_n_f64(vmulq_n_f64(v6, a3), v5, 1.0 - a3);
  *a2 = vmlaq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(this[3], a3), v6, 1.0 - a3), a3), v7, 1.0 - a3), a3), vmlaq_n_f64(vmulq_n_f64(v7, a3), vmlaq_n_f64(vmulq_n_f64(v5, a3), *this, 1.0 - a3), 1.0 - a3), 1.0 - a3);
  v8 = this[1];
  v9 = this[2];
  v10 = vmlaq_n_f64(vmulq_n_f64(v9, a4), v8, 1.0 - a4);
  a2[1] = vmlaq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(this[3], a4), v9, 1.0 - a4), a3), v10, 1.0 - a3), a3), vmlaq_n_f64(vmulq_n_f64(v10, a3), vmlaq_n_f64(vmulq_n_f64(v8, a4), *this, 1.0 - a4), 1.0 - a3), 1.0 - a3);
  v11 = this[1];
  v12 = this[2];
  v13 = vmlaq_n_f64(vmulq_n_f64(v12, a4), v11, 1.0 - a4);
  a2[2] = vmlaq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(this[3], a4), v12, 1.0 - a4), a4), v13, 1.0 - a4), a3), vmlaq_n_f64(vmulq_n_f64(v13, a4), vmlaq_n_f64(vmulq_n_f64(v11, a4), *this, 1.0 - a4), 1.0 - a4), 1.0 - a3);
  v14 = this[1];
  v15 = this[2];
  v16 = vmlaq_n_f64(vmulq_n_f64(v15, a4), v14, 1.0 - a4);
  result = vmlaq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(this[3], a4), v15, 1.0 - a4), a4), v16, 1.0 - a4), a4), vmlaq_n_f64(vmulq_n_f64(v16, a4), vmlaq_n_f64(vmulq_n_f64(v14, a4), *this, 1.0 - a4), 1.0 - a4), 1.0 - a4);
  a2[3] = result;
  return result;
}

void CGPathOutputFiltering::add_line_to_point(CGPathOutputFiltering *this, double a2, double a3, CGAffineTransform *a4)
{
  BOOL v8;
  __int128 v9;
  double v10;
  CGAffineTransform v11;
  CGPoint CurrentPoint;
  CGPoint v13;

  v8 = fabs(*((double *)this + 2)) == INFINITY;
  if (fabs(*((double *)this + 1)) != INFINITY || !v8)
  {
    CurrentPoint = CGPathGetCurrentPoint((CGPathRef)*(_QWORD *)this);
    v13 = *(CGPoint *)((char *)this + 8);
    v9 = *(_OWORD *)&a4->c;
    *(_OWORD *)&v11.a = *(_OWORD *)&a4->a;
    *(_OWORD *)&v11.c = v9;
    *(_OWORD *)&v11.tx = *(_OWORD *)&a4->tx;
    v10 = a2;
    *(double *)&v9 = a3;
    if (!points_are_nearly_collinear(CurrentPoint, v13, *(CGPoint *)((char *)&v9 - 8), &v11))
      CGPathOutputFiltering::commit_pending_line_point_if_needed(this);
  }
  *((double *)this + 1) = a2;
  *((double *)this + 2) = a3;
}

CFTypeRef CGPathOutputFiltering::cg_path(CGPathOutputFiltering *this)
{
  const void *v2;

  CGPathOutputFiltering::commit_pending_line_point_if_needed(this);
  v2 = *(const void **)this;
  if (v2)
    CFRetain(v2);
  return CFAutorelease(v2);
}

uint64_t callErrorCallback()
{
  uint64_t result;
  uint64_t (*v1)(void);

  pthread_mutex_lock(&error_callback_lock);
  v1 = (uint64_t (*)(void))error_callback;
  pthread_mutex_unlock(&error_callback_lock);
  result = (uint64_t)v1;
  if (v1)
    return v1();
  return result;
}

uint64_t ripc_DrawImage(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, CGFloat x, CGFloat y, double width, double height)
{
  uint64_t v8;
  double *v15;
  _QWORD *EPSRep;
  __int128 v17;
  __int128 v18;
  double v19;
  double v20;
  double v21;
  double v22;
  float64x2_t v23;
  double v24;
  CGImageRef SubsampledImage;
  CGImageRef v26;
  uint64_t v27;
  uint64_t (*v28)(void);
  uint64_t v29;
  int v30;
  _BYTE *alternate_image;
  const void *v32;
  CGImage *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t ImageTransformation;
  unint64_t v37;
  uint64_t RenderingIntent;
  unsigned int v39;
  int v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _BOOL4 ShouldInterpolate;
  int *v46;
  _QWORD *v47;
  double *v48;
  double v49;
  double v50;
  double v51;
  double *v52;
  double *v53;
  uint64_t v54;
  uint64_t v55;
  double v57;
  int ImageInterpolation;
  __int128 v59;
  _BYTE v60[32];
  _OWORD v61[3];
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int64_t v66;
  _QWORD v67[2];
  _QWORD v68[2];
  _QWORD v69[2];
  _OWORD v70[4];
  CGRect v71;
  CGRect v72;

  v8 = (uint64_t)a4;
  if (a1)
    v15 = *(double **)(a1 + 288);
  else
    v15 = 0;
  v62 = 0;
  memset(v61, 0, sizeof(v61));
  EPSRep = CGImageGetEPSRep(a4);
  if (EPSRep)
    v8 = EPSRep[2];
  memset(v70, 0, 48);
  v17 = *(_OWORD *)(a3 + 56);
  v18 = *(_OWORD *)(a3 + 40);
  v59 = *(_OWORD *)(a3 + 24);
  *(_OWORD *)v60 = v18;
  *(_OWORD *)&v60[16] = v17;
  v19 = v15[5];
  if (v19 == 1.0)
  {
    v21 = *((double *)&v59 + 1);
    v22 = *(double *)&v59;
    v23.f64[0] = *(float64_t *)&v60[8];
    v20 = *(double *)v60;
  }
  else
  {
    v20 = v19 * *(double *)v60;
    v21 = v19 * *((double *)&v59 + 1);
    v22 = v19 * *(double *)&v59;
    *(double *)&v59 = v19 * *(double *)&v59;
    *((double *)&v59 + 1) = v19 * *((double *)&v59 + 1);
    *(double *)v60 = v19 * *(double *)v60;
    v23 = vmulq_n_f64(*(float64x2_t *)&v60[8], v19);
    *(float64x2_t *)&v60[8] = v23;
    *(double *)&v60[24] = v19 * *(double *)&v60[24];
  }
  v69[0] = 0;
  v69[1] = 0;
  v67[0] = 0;
  v67[1] = 0;
  v24 = height * v20;
  v57 = v23.f64[0];
  SubsampledImage = CGImageCreateSubsampledImage(v8, height * v20 + v22 * width, height * v23.f64[0] + v21 * width);
  v26 = SubsampledImage;
  if (SubsampledImage)
    v27 = (uint64_t)SubsampledImage;
  else
    v27 = v8;
  v30 = *(_QWORD *)v15
     && (v28 = *(uint64_t (**)(void))(*(_QWORD *)v15 + 248)) != 0
     && (v29 = v28()) != 0
     && *(_DWORD *)(v29 + 40) == 7;
  v65 = 0;
  v66 = 0;
  alternate_image = create_alternate_image(v27, v30);
  v32 = alternate_image;
  if (alternate_image)
    v33 = (CGImage *)alternate_image;
  else
    v33 = (CGImage *)v27;
  if ((ripc_GetImageSize((uint64_t)v33, (unint64_t *)&v66, &v65) & 1) == 0)
    goto LABEL_52;
  v35 = v65;
  v34 = v66;
  v63 = v65;
  v64 = v66;
  if ((ripc_GetRenderingState((uint64_t)v15, a2, a3, (uint64_t)v70) & 1) == 0)
    goto LABEL_52;
  v68[0] = 0;
  v68[1] = 0;
  if (width < 0.0 || height < 0.0)
  {
    v71.origin.x = x;
    v71.origin.y = y;
    v71.size.width = width;
    v71.size.height = height;
    v72 = CGRectStandardize(v71);
    x = v72.origin.x;
    y = v72.origin.y;
    width = v72.size.width;
    height = v72.size.height;
    v24 = v72.size.height * v20;
  }
  *(double *)&v59 = v20 * 0.0 + width * v22;
  *((double *)&v59 + 1) = v57 * 0.0 + width * v21;
  *(double *)v60 = v24 + v22 * 0.0;
  *(double *)&v60[8] = height * v57 + v21 * 0.0;
  *(double *)&v60[16] = *(double *)&v60[16] + v20 * y + x * v22;
  *(double *)&v60[24] = v57 * y + x * v21 + *(double *)&v60[24];
  ImageTransformation = ripc_GetImageTransformation(v33, (int *)&v70[1] + 2, v34, v35, 0, (double *)&v59, (uint64_t)v69, (int *)v68, (uint64_t)v67);
  if (!ImageTransformation)
    goto LABEL_52;
  v37 = ImageTransformation;
  RenderingIntent = CGImageGetRenderingIntent(v33);
  if (!(_DWORD)RenderingIntent)
  {
    v39 = *(_DWORD *)(*(_QWORD *)(a3 + 120) + 4);
    v40 = v39 << 12;
    if (((v39 >> 20) & 0xF) != 0)
      v41 = v39 << 8;
    else
      v41 = v39 << 12;
    if (!(v41 >> 28))
      v41 = v40;
    RenderingIntent = (v41 >> 28);
  }
  if (v37 >= 4)
  {
    ShouldInterpolate = CGImageGetShouldInterpolate(v33);
    ImageInterpolation = ripc_GetImageInterpolation(a2, *(_DWORD *)(*(_QWORD *)(a3 + 120) + 4), ShouldInterpolate);
    if (ImageInterpolation >= 3)
    {
      if ((v37 & 2) != 0)
        v46 = 0;
      else
        v46 = (int *)v69;
      if (ripc_GetImageInterpolationSize((double *)&v59, (int64_t *)&v64, &v63, v46))
        v42 = ImageInterpolation;
      else
        v42 = 1;
      v43 = v63;
      v44 = v64;
    }
    else
    {
      v42 = 1;
      v43 = v35;
      v44 = v34;
    }
  }
  else
  {
    v42 = 1;
    v43 = v35;
    v44 = v34;
    ImageInterpolation = 1;
  }
  if ((v37 & 2) != 0)
    v47 = 0;
  else
    v47 = v69;
  v48 = (double *)ripc_AcquireRIPImageData((uint64_t)v15, v33, v44, v43, (uint64_t)v47, 0, v42, RenderingIntent);
  if (v48)
  {
    v52 = v48;
    if (v37 >= 4)
      v53 = (double *)&v59;
    else
      v53 = 0;
    ripc_InitializeImage((uint64_t)v61, (uint64_t)v68, v48, ImageInterpolation, v34, v35, v53, 0, v49, v50, v51);
    ripc_RenderImage((uint64_t)v15, a2, a3, (uint64_t *)v70, (int *)v67, (uint64_t)v61, v54, v55);
    ripc_ReleaseRIPImageData(v52);
LABEL_52:
    if (v32)
      CFRelease(v32);
    if (v26)
      CFRelease(v26);
    return 0;
  }
  if (v32)
    CFRelease(v32);
  if (v26)
    CFRelease(v26);
  return 1000;
}

char *ripc_RenderImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  _BYTE *v19;
  char *result;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *Color;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 81) && (*(_BYTE *)(*(_QWORD *)(a3 + 120) + 7) & 1) != 0)
  {
    *(_WORD *)(a1 + 108) = *(_WORD *)(a1 + 108) | 0xFF00;
    v14 = -256;
  }
  else
  {
    v14 = 0;
    *(_WORD *)(a1 + 108) = *(unsigned __int8 *)(a1 + 108);
  }
  v15 = (int *)(a1 + 104);
  *(_WORD *)(a1 + 108) = v14 | *(unsigned __int8 *)(a2 + 82);
  v16 = *(_QWORD *)(a3 + 120);
  *(_DWORD *)(a1 + 112) = (int)(*(_DWORD *)(v16 + 4) << 12) >> 28;
  v17 = *(_QWORD *)(a6 + 16);
  if (*(_QWORD *)(v17 + 32))
  {
    *(_DWORD *)(a1 + 104) = (int)(*(_DWORD *)(v16 + 4) << 16) >> 24;
    v18 = *(double *)(v16 + 8);
    *(double *)(a1 + 152) = v18;
    v19 = (_BYTE *)a4[5];
    if (v19 && (v19[12] & 0x40) != 0)
      return (char *)(*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, int *, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v19 + 72))(v19, *(_QWORD *)(a1 + 48), *a4, a5, a6, 0, 0, a1 + 104);
    else
      return (char *)RIPLayerBltImage(*(_QWORD *)(a1 + 48), *a4, (uint64_t)a5, a6, a1 + 104, a6, a7, a8);
  }
  else
  {
    v50 = xmmword_1850003E8;
    v51 = unk_1850003F8;
    v52 = xmmword_185000408;
    v46 = xmmword_1850003A8;
    v47 = unk_1850003B8;
    v48 = xmmword_1850003C8;
    v49 = unk_1850003D8;
    v44 = RIPLayerObjectInitializer;
    v45 = unk_185000398;
    v43 = 0;
    v21 = *(unsigned int *)(a2 + 4);
    if (*a4
      || *(_QWORD *)(v17 + 96)
      || *(_QWORD *)(a6 + 24)
      || *(_QWORD *)(a6 + 48)
      || *(_QWORD *)(a6 + 32)
      || *(_DWORD *)(a6 + 8) != *(_DWORD *)(v17 + 56)
      || *(_DWORD *)(a6 + 12) != *(_DWORD *)(v17 + 60))
    {
      result = RIPLayerCreate((uint64_t)RIPLayer_ripl_class, (uint64_t)a5, 0, 0, *(unsigned int *)(a2 + 4), a6, a7, a8);
      if (!result)
        return result;
      v27 = (__int128 *)result;
      *(_DWORD *)(a1 + 104) = 1;
      *(_QWORD *)(a1 + 152) = 0x3FF0000000000000;
      RIPLayerBltImage((uint64_t)result, 0, (uint64_t)a5, a6, a1 + 104, v29, v30, v31);
    }
    else
    {
      v22 = RIPLayerInitialize((uint64_t)&v44, a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
      v26 = *(_QWORD *)(a6 + 16);
      if (v22)
      {
        v27 = &v44;
        RIPLayerReplace((uint64_t)&v44, a6, *(unsigned int *)(v26 + 64), *(_QWORD *)(v26 + 72), 0, 0, v23, v24, v25);
        HIDWORD(v45) |= 2u;
      }
      else
      {
        result = RIPLayerCreateWithData((uint64_t *)a6, 2, 0, *(unsigned int *)(v26 + 64), *(_QWORD *)(v26 + 72), 0, 0, v21);
        v27 = (__int128 *)result;
        if (!result)
          return result;
      }
    }
    Color = ripc_GetColor(a1, a2, a3, 2, a5, (uint64_t)&v43, (double *)(a1 + 152), v28);
    if (Color)
    {
      v34 = (uint64_t)Color;
      *v15 = (int)(*(_DWORD *)(*(_QWORD *)(a3 + 120) + 4) << 16) >> 24;
      v35 = (_BYTE *)a4[5];
      if (v35 && (v35[12] & 0x10) != 0)
        (*(void (**)(_BYTE *, _QWORD, uint64_t, int *, __int128 *, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v35 + 56))(v35, *(_QWORD *)(a1 + 48), *a4, a5, v27, v34, &v43, a1 + 104);
      else
        RIPLayerBltShape(*(int **)(a1 + 48), *a4, a5, (uint64_t)v27, v34, &v43, a1 + 104, v33);
      RIPObjectRelease(v34, v36, v37, v38, v39, v40, v41, v42);
    }
    return (char *)(*(uint64_t (**)(__int128 *))(*(_QWORD *)v27 + 24))(v27);
  }
}

void *ripc_AcquireRIPImageData(uint64_t a1, CGImage *image, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  CGImageRef v13;
  int v15;
  _DWORD *v16;
  _BOOL4 v17;
  BOOL v18;
  _BOOL4 v21;
  unsigned int *v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  const void *Property;
  uint64_t v28;
  CGImage *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  int nonpurgeable;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (*v110)(void);
  uint64_t v111;
  char v112;
  uint64_t v113;
  int v114[2];
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  void *value_out;
  _OWORD key[2];
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  __int128 v134;
  int v135;
  uint64_t v136;

  v8 = a7;
  v9 = a6;
  v13 = image;
  v136 = *MEMORY[0x1E0C80C00];
  if (image)
  {
    v15 = *((unsigned __int8 *)image + 36);
    if (!a1)
      goto LABEL_7;
  }
  else
  {
    v15 = 0;
    if (!a1)
      goto LABEL_7;
  }
  v16 = *(_DWORD **)(*(_QWORD *)(a1 + 48) + 32);
  if (v16)
  {
    v17 = *v16 != 34082816;
    goto LABEL_8;
  }
LABEL_7:
  v17 = 1;
LABEL_8:
  if (RIPShouldCacheImages_predicate != -1)
  {
    v111 = a8;
    dispatch_once(&RIPShouldCacheImages_predicate, &__block_literal_global_12350);
    a8 = v111;
  }
  if (a1)
    v18 = RIPShouldCacheImages_should_cache == 0;
  else
    v18 = 1;
  v21 = !v18 && v15 != 1 && v17 && a4 * a3 != -1;
  v22 = (unsigned int *)v9;
  if (a1)
  {
    v22 = (unsigned int *)v9;
    if (!v9)
      v22 = *(unsigned int **)(*(_QWORD *)(a1 + 48) + 32);
  }
  if (!v22)
    goto LABEL_33;
  v23 = *v22;
  if ((_DWORD)v23 == 134886228)
  {
    v24 = 5;
    goto LABEL_34;
  }
  v25 = (v23 >> 16) & 0x3F;
  if (v25 != 32)
  {
    if (v25 == 16)
    {
      if ((v23 & 1) != 0)
        v24 = 5;
      else
        v24 = 2;
      goto LABEL_34;
    }
LABEL_33:
    v24 = 1;
    goto LABEL_34;
  }
  if ((v23 & 1) == 0)
    _CGHandleAssert("component_type_from_depth", 115, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/RIP/RIPImage.c", "", "Unimplemented", a6, a7, a8, v112);
  v24 = 4;
LABEL_34:
  if (!v21)
  {
    if (a1)
    {
      v36 = *(_QWORD *)(a1 + 120);
      if (!*(_QWORD *)(a1 + 88))
      {
        v37 = *(_QWORD *)a1;
        if (!*(_QWORD *)a1)
        {
LABEL_65:
          v55 = CGSImageDataLock(v13, a3, a4, a5, v8, a8, v36, (uint64_t)v22, v37, v24, 1);
          if (!v55)
            return 0;
          v56 = v55;
          v52 = malloc_type_calloc(1uLL, 0xF8uLL, 0x10E00402B2D0641uLL);
          if (v52)
          {
            v125 = 0u;
            v123 = 0u;
            v124 = 0u;
            v121 = 0u;
            v122 = 0u;
            v120 = 0u;
            memset(key, 0, sizeof(key));
            initialize_skipping_conditional_var((uint64_t)key, a1, (uint64_t)v13, v56, v57, v58, v59, v60);
            v133 = 0;
            v130 = xmmword_184F7D918;
            v131 = unk_184F7D928;
            v132 = xmmword_184F7D938;
            v126 = CGConditionalVarInitializer;
            v127 = unk_184F7D8E8;
            v128 = xmmword_184F7D8F8;
            v129 = unk_184F7D908;
            CGConditionalVarPost((uint64_t)&v126, v61, v62, v63, v64, v65, v66, v67);
            v68 = v121;
            v70 = key[0];
            v69 = key[1];
            *((_OWORD *)v52 + 2) = v120;
            *((_OWORD *)v52 + 3) = v68;
            *(_OWORD *)v52 = v70;
            *((_OWORD *)v52 + 1) = v69;
            v71 = v123;
            v72 = v125;
            v73 = v122;
            *((_OWORD *)v52 + 6) = v124;
            *((_OWORD *)v52 + 7) = v72;
            *((_OWORD *)v52 + 4) = v73;
            *((_OWORD *)v52 + 5) = v71;
            v74 = v129;
            v76 = v126;
            v75 = v127;
            *((_OWORD *)v52 + 10) = v128;
            *((_OWORD *)v52 + 11) = v74;
            *((_OWORD *)v52 + 8) = v76;
            *((_OWORD *)v52 + 9) = v75;
            v78 = v131;
            v77 = v132;
            v79 = v130;
            *((_QWORD *)v52 + 30) = v133;
            *((_OWORD *)v52 + 13) = v78;
            *((_OWORD *)v52 + 14) = v77;
            *((_OWORD *)v52 + 12) = v79;
          }
          return v52;
        }
        v38 = *(uint64_t (**)(void))(v37 + 248);
        if (v38)
        {
          *(_QWORD *)v114 = v13;
          v39 = a5;
          v40 = a3;
          v41 = a4;
          v42 = v24;
          v43 = v8;
          v44 = a8;
          v37 = v38();
          a8 = v44;
          v8 = v43;
          v24 = v42;
          a4 = v41;
          a3 = v40;
          a5 = v39;
          v13 = *(CGImageRef *)v114;
          goto LABEL_65;
        }
      }
    }
    else
    {
      v36 = 0;
    }
    v37 = 0;
    goto LABEL_65;
  }
  if (a5 && *(unsigned int *)(a5 + 8) >= a3 && *(unsigned int *)(a5 + 12) >= a4)
    a5 = 0;
  value_out = 0;
  v134 = 0uLL;
  v135 = 0;
  if (a1)
  {
    v134 = *(_OWORD *)(a1 + 132);
    v135 = *(_DWORD *)(a1 + 148);
  }
  if (v13)
  {
    v26 = *((_DWORD *)v13 + 6);
    Property = (const void *)*((_QWORD *)v13 + 28);
    if (Property)
    {
      v28 = v9;
      v29 = v13;
      v30 = a5;
      v31 = a3;
      v32 = a4;
      v33 = v24;
      v34 = v8;
      v35 = a8;
      Property = CGPropertiesGetProperty((uint64_t)Property, CFSTR("kCGColorConversionInfoOptions"));
      LODWORD(a8) = v35;
      v8 = v34;
      v24 = v33;
      a4 = v32;
      a3 = v31;
      a5 = v30;
      v13 = v29;
      v9 = v28;
    }
  }
  else
  {
    v26 = 0;
    Property = 0;
  }
  *(_QWORD *)&key[0] = __PAIR64__(v8, v26);
  v115 = a8;
  DWORD2(key[0]) = a8;
  *(_OWORD *)((char *)key + 12) = v134;
  *((_QWORD *)&v120 + 1) = a3;
  HIDWORD(key[1]) = v135;
  *(_QWORD *)&v120 = v24;
  *(_QWORD *)&v121 = a4;
  *((_QWORD *)&v121 + 1) = v9;
  *(_QWORD *)&v122 = Property;
  cache_lock();
  if (get_cache_predicate != -1)
    dispatch_once(&get_cache_predicate, &__block_literal_global_1410);
  if (!cache_get_and_retain(*(cache_t **)(get_cache_image_cache + 64), key, &value_out))
  {
    cache_unlock();
    if (!value_out)
      _CGHandleAssert("RIPImageCacheGetRetained", 238, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/RIP/RIPImageCache.c", "data != NULL", "data is NULL", v49, v50, v51, v112);
    CGConditionalVarWait((uint64_t)value_out + 128, v45, v46, v47, v48, v49, v50, v51);
    v52 = value_out;
    if (!*((_DWORD *)value_out + 10) && !*((_DWORD *)value_out + 11))
      goto LABEL_74;
    v53 = *((_QWORD *)value_out + 13);
    if (v53 && *(_BYTE *)(v53 + 8))
    {
      nonpurgeable = malloc_make_nonpurgeable(*(void **)(v53 + 16));
      v52 = value_out;
      if (nonpurgeable)
        goto LABEL_74;
      if (!value_out)
      {
LABEL_75:
        cache_lock();
        goto LABEL_76;
      }
    }
    if (*((_DWORD *)v52 + 14) == *((_DWORD *)v52 + 10))
    {
      if (*((_DWORD *)v52 + 15) == *((_DWORD *)v52 + 11))
        return v52;
LABEL_72:
      v116 = 0;
      v117 = 0;
      if (CGSBoundsIntersection((int *)v52 + 12, (int *)a5, &v116) && v117 == *(_QWORD *)(a5 + 8))
        return v52;
      goto LABEL_74;
    }
    if (a5 || *((_DWORD *)v52 + 15) == *((_DWORD *)v52 + 11))
      goto LABEL_72;
LABEL_74:
    release_and_remove(key, v52);
    value_out = 0;
    goto LABEL_75;
  }
LABEL_76:
  v52 = value_out;
  if (!value_out)
  {
    v80 = malloc_type_calloc(1uLL, 0xF8uLL, 0x10E00402B2D0641uLL);
    value_out = v80;
    if (v80)
    {
      CGConditionalVarInit((uint64_t)v80 + 128, v81, v82, v83, v84, v85, v86, v87);
      if (get_cache_predicate != -1)
        dispatch_once(&get_cache_predicate, &__block_literal_global_1410);
      cache_set_and_retain(*(cache_t **)(get_cache_image_cache + 64), key, value_out, a4 * a3);
    }
    cache_unlock();
    v52 = value_out;
    if (value_out)
    {
      if (a1)
      {
        v88 = *(_QWORD *)(a1 + 120);
        v89 = v115;
        if (!v9)
        {
          if (v88)
            v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32);
          else
            v9 = 0;
        }
        if (*(_QWORD *)(a1 + 88))
          goto LABEL_90;
        v90 = *(_QWORD *)a1;
        if (!*(_QWORD *)a1)
          goto LABEL_91;
        v110 = *(uint64_t (**)(void))(v90 + 248);
        if (!v110)
        {
LABEL_90:
          v90 = 0;
          goto LABEL_91;
        }
        v113 = *(_QWORD *)(a1 + 120);
        v90 = v110();
        v88 = v113;
      }
      else
      {
        v88 = 0;
        v90 = 0;
      }
      v89 = v115;
LABEL_91:
      v91 = CGSImageDataLock(v13, a3, a4, a5, v8, v89, v88, v9, v90, v24, 0);
      if (v91)
      {
        initialize_skipping_conditional_var((uint64_t)v52, a1, (uint64_t)v13, v91, v95, v96, v97, v98);
        v106 = value_out;
        if (!value_out
          || (v107 = *((_QWORD *)value_out + 15), (v108 = *(_QWORD *)(v107 + 72)) == 0)
          || !*(_BYTE *)(v108 + 8)
          || *(_QWORD *)(v107 + 80))
        {
          if (get_cache_predicate != -1)
            dispatch_once(&get_cache_predicate, &__block_literal_global_1410);
          cache_remove(*(cache_t **)(get_cache_image_cache + 64), key);
          v106 = value_out;
        }
        CGConditionalVarPost((uint64_t)v106 + 128, v99, v100, v101, v102, v103, v104, v105);
        return value_out;
      }
      CGConditionalVarPost((uint64_t)value_out + 128, v92, v93, v94, v95, v96, v97, v98);
      release_and_remove(key, value_out);
      return 0;
    }
  }
  return v52;
}

uint64_t ripc_GetInternalBitmapContextInfo(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8);
}

BOOL CGConditionalVarPost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;

  if (!a1)
    _CGHandleAssert("CGConditionalVarPost", 61, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Utilities/CGConditionalVar.c", "cvar != NULL", "Conditional variable is NULL", a6, a7, a8, v10);
  if (pthread_mutex_lock((pthread_mutex_t *)a1))
    return 0;
  *(_BYTE *)(a1 + 112) = 1;
  return !pthread_cond_broadcast((pthread_cond_t *)(a1 + 64)) && pthread_mutex_unlock((pthread_mutex_t *)a1) == 0;
}

uint64_t CGSImageDataLock(CGImageRef image, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, char a11)
{
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t result;
  CGColorSpaceRef ColorSpace;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  _QWORD *Cache;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  _BOOL4 v40;
  _QWORD *v41;
  char v42;
  uint64_t v43;
  __n128 v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  int v49;
  _BYTE __dst[304];
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  int v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _DWORD v73[7];
  _OWORD __src[19];
  _OWORD v75[9];
  uint64_t v76;

  v76 = 0;
  memset(v75, 0, sizeof(v75));
  if (!image)
  {
    CGPostError((uint64_t)"%s: Bad image source", a2, a3, a4, a5, a6, a7, a8, (char)"CGSImageDataLock");
    return 0;
  }
  v12 = (_QWORD *)a7;
  v13 = a6;
  v14 = a5;
  if (a8 && !*(_QWORD *)(a8 + 40))
  {
    CGPostError((uint64_t)"%s: Bad image depth", a2, a3, a4, a5, a6, a7, a8, (char)"CGSImageDataLock");
    return 0;
  }
  memset(__src, 0, sizeof(__src));
  CGBitmapPixelInfoInitializeWithImage(__src, __src, image);
  v47 = a2;
  if (!a9)
  {
    if (a8)
    {
      v24 = *(_DWORD *)a8;
      if ((*(_DWORD *)a8 & 0xFFFFFFEF) == 0x4053344)
        v22 = 0x10000;
      else
        v22 = (*(_DWORD *)a8 == 134886228) << 18;
      v25 = (v24 >> 2) & 3;
      switch(v25)
      {
        case 0:
          if ((v24 & 0xF00) != 0)
            v23 = 0;
          else
            v23 = 7;
          goto LABEL_33;
        case 1:
          v23 = 8;
          goto LABEL_33;
        case 2:
          v26 = v24 >> 6;
          if (v26 == 1)
            v23 = 2;
          else
            v23 = v26 == 2;
          goto LABEL_33;
      }
    }
    else
    {
      v22 = 0;
    }
    v23 = 0;
    goto LABEL_33;
  }
  v22 = *(_DWORD *)(a9 + 40) & 0xF0000;
  v23 = *(_DWORD *)(a9 + 40) & 0x1F;
  if (CGImageGetColorSpace(image) && v23 <= 6 && ((1 << v23) & 0x61) != 0 && (*((_BYTE *)image + 39) & 0xE) != 0)
  {
    if (v23 == 6)
    {
LABEL_12:
      v23 = 2;
      goto LABEL_33;
    }
    if (v23 != 5)
    {
      if (v23)
        goto LABEL_33;
      goto LABEL_12;
    }
    v23 = 1;
  }
LABEL_33:
  v49 = a10;
  if ((*((_BYTE *)image + 39) & 8) != 0)
  {
    if (v23 == 7 || !v23)
    {
      if (a8 && *(_DWORD *)a8 == 134886228)
        v23 = 1;
      else
        v23 = 3;
    }
  }
  else if (v23 == 7)
  {
    ColorSpace = CGImageGetColorSpace(image);
    if (CGColorSpaceGetType(ColorSpace) - 7 >= 3)
      v12 = 0;
  }
  v48 = (_DWORD *)a8;
  if (LODWORD(__src[2]) == 0x40000 && v22 == 0x40000)
  {
    v29 = v13;
    if ((*((_BYTE *)image + 39) & 8) == 0)
    {
      v49 = 0;
      v30 = 0x2000;
      v31 = 0x40000;
      v32 = 10;
      goto LABEL_55;
    }
LABEL_54:
    v31 = 0;
    v30 = 4096;
    v23 = 1;
    v32 = 16;
    goto LABEL_55;
  }
  if (v22 == 0x40000)
  {
    v29 = v13;
    goto LABEL_54;
  }
  v32 = qword_184F7E980[a10];
  if (a9)
  {
    v33 = *(_DWORD *)(a9 + 40);
    v29 = v13;
    if ((v33 & 0xF0000) == 0x10000)
    {
      v31 = 0;
      v30 = 0x4000;
    }
    else
    {
      v31 = 0;
      if ((v33 & 0xF0000) == 0x40000)
        v30 = 4096;
      else
        v30 = *(_DWORD *)(a9 + 40) & 0x7000;
    }
  }
  else if (v48)
  {
    if (v32 == 8)
    {
      v29 = v13;
      v31 = 0;
      if ((*v48 & 0xFFFFFFEF) == 0x4053344)
        v30 = 0x4000;
      else
        v30 = ((*v48 & 0x30) == 16) << 13;
      v32 = 8;
    }
    else if (v32 == 16)
    {
      v29 = v13;
      v31 = 0;
      v30 = ((*v48 & 0x30) == 32) << 12;
    }
    else
    {
      v29 = v13;
      v31 = 0;
      if (v32 == 32)
        v30 = ((*v48 & 0x30) == 32) << 13;
      else
        v30 = 0;
    }
  }
  else
  {
    v29 = v13;
    v31 = 0;
    v30 = dword_184F7E968[a10];
  }
LABEL_55:
  if (v12)
  {
    Cache = CGColorTransformGetCache(v12);
    v35 = v23;
    if (Cache && (v36 = Cache[2]) != 0)
      v37 = *(_QWORD *)(*(_QWORD *)(v36 + 24) + 40);
    else
      v37 = 0;
  }
  else
  {
    v35 = v23;
    v37 = 1;
  }
  if ((unint64_t)(v32 - 33) <= 0xFFFFFFFFFFFFFFDFLL)
    _CGHandleAssert("CGBitmapPixelInfoInitialize", 56, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGBitmapPixelInfo.c", "bits_per_component > 0 && bits_per_component <= 32", "bpc: %zu", v19, v20, v21, v32);
  v46 = a4;
  v51 = v49;
  v52 = 0;
  v53 = v32;
  v54 = v37;
  v38 = v32;
  v39 = v35;
  v55 = v35;
  v56 = v30;
  v57 = v31;
  v72 = 0u;
  memset(v73, 0, sizeof(v73));
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  memcpy(__dst, __src, sizeof(__dst));
  v40 = data_conversion_required(v12, (uint64_t *)image, &v51, __dst);
  v41 = v12;
  v42 = v40;
  v51 = v49;
  v52 = 0;
  v53 = v38;
  v54 = v37;
  v55 = v39;
  v56 = v30;
  v57 = v31;
  v72 = 0u;
  memset(v73, 0, sizeof(v73));
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v43 = (uint64_t)v41;
  result = img_image((uint64_t)v75, (uint64_t)v48, v41, v40, &v51, (uint64_t)image, v29);
  if (result)
  {
    if (a9)
      v45 = *(_DWORD *)(a9 + 96);
    else
      v45 = 3;
    return img_data_lock((uint64_t)"CGSImageDataLock", v44, (uint64_t)v75, v47, a3, v46, v14, v29, v43, v42, (uint64_t)v48, v49, a11, v45);
  }
  return result;
}

uint64_t img_image(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, _DWORD *a5, uint64_t a6, unsigned int a7)
{
  unint64_t Size;
  unint64_t v15;
  CGColorSpaceRef ColorSpace;
  int Type;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  int BitmapInfo;
  int v30;
  int v31;
  _QWORD *Cache;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  CFTypeID v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  CGColorSpaceRef v52;
  int v53;
  uint64_t v54;
  vImagePixelCount v55;
  CGDataProvider *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(_QWORD);
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  vImagePixelCount v71;
  CGDataProvider *v72;
  uint64_t v73;
  uint64_t (*v74)(_QWORD);
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t BitsPerComponent;
  vImagePixelCount v81;
  CGDataProvider *v82;
  uint64_t v83;
  uint64_t (*v84)(_QWORD);
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  int v88;
  _QWORD *v89;
  int v90;
  unsigned int v91;
  CGDataProviderRef *v92;
  char *DataProviderInternal;
  CGDataProviderRef v94;
  _QWORD *v95;
  const CGFloat *Decode;
  const CGFloat *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double *v106;
  int v108;
  int v109;
  _QWORD *v110;
  int v111;
  uint64_t v112;
  double *v113;
  double *v114;
  uint64_t v115;
  const CGFloat *v116;
  uint64_t v117;
  uint64_t v119;
  double *v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  int v124;
  BOOL v125;
  int v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _OWORD __dst[20];

  Size = CGImageGetSize((_QWORD *)a6);
  if (Size - 0x4000000 < 0xFFFFFFFFFC000001 || v15 == 0 || v15 >> 26 != 0)
    return 0;
  *(_QWORD *)a1 = Size;
  *(_QWORD *)(a1 + 8) = v15;
  *(_QWORD *)(a1 + 48) = Size;
  *(_QWORD *)(a1 + 56) = v15;
  ColorSpace = CGImageGetColorSpace((CGImageRef)a6);
  Type = CGColorSpaceGetType(ColorSpace);
  switch(Type)
  {
    case 5:
      goto LABEL_13;
    case 9:
LABEL_14:
      CGPostError((uint64_t)"%s: Invalid image parameters", v20, v21, v22, v23, v24, v25, v26, (char)"img_image");
      return 0;
    case 7:
LABEL_13:
      if (CGImageGetAlphaInfo((CGImageRef)a6) == kCGImageAlphaPremultipliedFirst
        || CGImageGetAlphaInfo((CGImageRef)a6) == kCGImageAlphaPremultipliedLast)
      {
        goto LABEL_14;
      }
      break;
  }
  if (a3)
    v28 = a4;
  else
    v28 = 0;
  if (v28 != 1 || a6 && (*(_BYTE *)(a6 + 39) & 2) != 0)
  {
    BitmapInfo = CGImageGetBitmapInfo((CGImageRef)a6);
    if ((BitmapInfo & 0x7000) != 0)
      goto LABEL_25;
    v52 = CGImageGetColorSpace((CGImageRef)a6);
    if (!v52)
      goto LABEL_25;
    v53 = *(_DWORD *)(*((_QWORD *)v52 + 3) + 24);
    if (v53 != 1)
    {
      if (v53 || !a6)
        goto LABEL_25;
      v54 = *(_QWORD *)(a6 + 56);
      if (v54 != 16)
      {
        if (v54 != 32)
          goto LABEL_25;
LABEL_90:
        BitmapInfo |= 0x4000u;
        goto LABEL_25;
      }
LABEL_134:
      BitmapInfo |= 0x3000u;
      goto LABEL_25;
    }
    if (a6)
    {
      v78 = *(_QWORD *)(a6 + 56);
      if (v78 == 16)
        goto LABEL_134;
      if (v78 == 32)
        goto LABEL_90;
    }
    else
    {
      v78 = 0;
    }
    if (v78 == 8 && (BitmapInfo & 0x1F) != 0)
      BitmapInfo |= 0x4000u;
LABEL_25:
    if ((BitmapInfo & 0x1Fu) - 1 < 4)
      v31 = 1;
    else
      v31 = v28;
    if (v31)
      v30 = BitmapInfo & 0x1F;
    else
      v30 = 0;
    if (!v28)
      goto LABEL_36;
    goto LABEL_32;
  }
  memcpy(__dst, a5, 0x130uLL);
  BitmapInfo = CGBitmapPixelInfoGetCGImageBitmapInfo((uint64_t)__dst);
  v30 = BitmapInfo & 0x1F;
LABEL_32:
  if (!a6 || (*(_BYTE *)(a6 + 39) & 2) == 0)
  {
    Cache = CGColorTransformGetCache(a3);
    if (Cache)
      Cache = (_QWORD *)Cache[2];
    goto LABEL_37;
  }
LABEL_36:
  Cache = CGImageGetColorSpace((CGImageRef)a6);
LABEL_37:
  if (Cache)
    v40 = v30;
  else
    v40 = 0;
  *(_QWORD *)(a1 + 16) = Cache;
  *(_DWORD *)(a1 + 24) = v40;
  if (a6)
  {
    v41 = *(_QWORD *)(a6 + 72);
    if ((v28 & 1) != 0)
    {
      if ((*(_BYTE *)(a6 + 39) & 2) != 0)
      {
        *(_OWORD *)((char *)&__dst[17] + 4) = 0u;
        __dst[18] = 0u;
        v55 = *(_QWORD *)(a6 + 40);
        v56 = *(CGDataProvider **)(a6 + 48);
        *(_QWORD *)&__dst[0] = 1;
        *(_OWORD *)((char *)__dst + 8) = xmmword_185004E40;
        *((_QWORD *)&__dst[1] + 1) = 0;
        memset(&__dst[2], 0, 244);
        v57 = (_QWORD *)CGDataProviderCreateForDestinationWithImage(0, __dst, v55, v56, (_QWORD *)a6, a7, 1);
        *(_QWORD *)(a1 + 136) = v57;
        *(_BYTE *)(a1 + 32) = 1;
        if (v57)
        {
          v65 = (uint64_t (*)(_QWORD))v57[20];
          if (!v65)
            goto LABEL_70;
          v66 = v65(v57[3]);
          v57 = *(_QWORD **)(a1 + 136);
          if (!v57)
            goto LABEL_121;
          if (!v66)
LABEL_70:
            v66 = v41;
          if (v57[12] || v57[14] || v57[10])
            v67 = 4;
          else
            v67 = 3;
          *(_DWORD *)(a1 + 28) = v67;
          *(_QWORD *)(a1 + 128) = 0;
          v68 = 8;
          v69 = 8;
          goto LABEL_153;
        }
LABEL_121:
        CGPostError((uint64_t)"%s: Bad image source", v58, v59, v60, v61, v62, v63, v64, (char)"img_image");
        return 0;
      }
      v135 = *(_QWORD *)(a6 + 72);
      if (*(_QWORD *)(a6 + 176))
      {
        v42 = a5[6] - 1;
        v130 = BitmapInfo;
        if (v42 > 8)
          v132 = 0;
        else
          v132 = qword_184F7EB80[v42];
        v79 = *((_QWORD *)a5 + 2);
        BitsPerComponent = CGPixelComponentGetBitsPerComponent(*a5, v33, v34, v35, v36, v37, v38, v39);
        v81 = *(_QWORD *)a1;
        v82 = *(CGDataProvider **)(a1 + 8);
        memcpy(__dst, a5, 0x130uLL);
        v83 = CGDataProviderCreateWithSoftMaskAndMatte(a3, __dst, v81, v82, (CGImage *)a6, a7);
        *(_QWORD *)(a1 + 136) = v83;
        *(_BYTE *)(a1 + 32) = 1;
        if (v83)
        {
          v84 = *(uint64_t (**)(_QWORD))(v83 + 160);
          if (!v84)
            goto LABEL_96;
          v85 = v84(*(_QWORD *)(v83 + 24));
          if (*(_QWORD *)(a1 + 136))
          {
            v66 = v85;
            if (v85)
            {
LABEL_97:
              v86 = CGColorTransformGetCache(a3);
              if (v86)
                v87 = v86[2];
              else
                v87 = 0;
              v68 = BitsPerComponent;
              *(_QWORD *)(a1 + 16) = v87;
              v108 = a5[6];
              if (v108 == 9)
              {
                v108 = 3;
                v109 = v130;
              }
              else
              {
                v109 = v130;
                if (v108 == 8)
                  v108 = 1;
              }
              v69 = BitsPerComponent * (v132 + v79);
              *(_DWORD *)(a1 + 24) = v108;
              v110 = *(_QWORD **)(a1 + 136);
              if (v110[12] || v110[14] || v110[10])
                v111 = 4;
              else
                v111 = 3;
              *(_DWORD *)(a1 + 28) = v111;
              *(_QWORD *)(a1 + 128) = 0;
              v91 = v109 & 0xFFF080E0;
LABEL_152:
              memcpy(__dst, a5, 0x130uLL);
              BitmapInfo = CGBitmapPixelInfoGetCGImageBitmapInfo((uint64_t)__dst) | v91;
LABEL_153:
              v97 = 0;
              *(_QWORD *)(a1 + 120) = 0;
              *(_QWORD *)(a1 + 144) = v66;
              *(_QWORD *)(a1 + 40) = a6;
              goto LABEL_181;
            }
LABEL_96:
            v66 = v135;
            goto LABEL_97;
          }
        }
        goto LABEL_121;
      }
LABEL_47:
      v44 = a5[6] - 1;
      if (v44 > 8)
        v134 = 0;
      else
        v134 = qword_184F7EB80[v44];
      v131 = *((_QWORD *)a5 + 2);
      v70 = CGPixelComponentGetBitsPerComponent(*a5, v33, v34, v35, v36, v37, v38, v39);
      if (a6)
      {
        v71 = *(_QWORD *)(a6 + 40);
        v72 = *(CGDataProvider **)(a6 + 48);
      }
      else
      {
        v71 = 0;
        v72 = 0;
      }
      memcpy(__dst, a5, 0x130uLL);
      v73 = CGDataProviderCreateForDestinationWithImage(a3, __dst, v71, v72, (_QWORD *)a6, a7, 1);
      *(_QWORD *)(a1 + 136) = v73;
      *(_BYTE *)(a1 + 32) = 1;
      if (!v73)
        goto LABEL_121;
      v68 = v70;
      v74 = *(uint64_t (**)(_QWORD))(v73 + 160);
      if (!v74)
        goto LABEL_84;
      v75 = v74(*(_QWORD *)(v73 + 24));
      if (!*(_QWORD *)(a1 + 136))
        goto LABEL_121;
      v66 = v75;
      if (!v75)
LABEL_84:
        v66 = v135;
      v76 = CGColorTransformGetCache(a3);
      if (v76)
        v77 = v76[2];
      else
        v77 = 0;
      *(_QWORD *)(a1 + 16) = v77;
      v88 = a5[6];
      if (v88 == 9)
      {
        v88 = 3;
      }
      else if (v88 == 8)
      {
        v88 = 1;
      }
      v69 = v70 * (v134 + v131);
      *(_DWORD *)(a1 + 24) = v88;
      v89 = *(_QWORD **)(a1 + 136);
      if (v89[12] || v89[14] || v89[10])
        v90 = 4;
      else
        v90 = 3;
      *(_DWORD *)(a1 + 28) = v90;
      *(_QWORD *)(a1 + 128) = 0;
      v91 = BitmapInfo & 0xFFF080E0;
      goto LABEL_152;
    }
    v135 = *(_QWORD *)(a6 + 72);
    v43 = *(_QWORD *)(a6 + 56);
    v133 = *(_QWORD *)(a6 + 64);
  }
  else
  {
    v133 = 0;
    v135 = 0;
    v43 = 0;
    if ((v28 & 1) != 0)
      goto LABEL_47;
  }
  v45 = CFGetTypeID((CFTypeRef)a6);
  v46 = BitmapInfo;
  if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1)
    dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_211);
  if (v45 != CGImageGetTypeID_image_type_id)
    goto LABEL_110;
  v47 = *(_QWORD *)(a6 + 208);
  if (!v47)
    goto LABEL_110;
  v48 = *(_QWORD *)(a6 + 40);
  v49 = *(_QWORD *)(a6 + 48);
  if (!is_mul_ok(v48, v49) || v48 * v49 > 0x9C4 || *(_QWORD *)(a6 + 152) | *(_QWORD *)(a6 + 240))
  {
    *(_QWORD *)(a1 + 136) = v47;
LABEL_58:
    v50 = -1;
    v51 = 5;
    goto LABEL_115;
  }
  if (!CGImageGetDataProviderInternal((char *)a6, 1))
  {
    v115 = *(_QWORD *)(a6 + 208);
    *(_QWORD *)(a1 + 136) = v115;
    v92 = (CGDataProviderRef *)(a1 + 136);
    if (v115)
      goto LABEL_58;
  }
  else
  {
LABEL_110:
    *(_QWORD *)(a1 + 136) = 0;
    v92 = (CGDataProviderRef *)(a1 + 136);
  }
  DataProviderInternal = CGImageGetDataProviderInternal((char *)a6, 0);
  v94 = CGDataProviderRetain((CGDataProviderRef)DataProviderInternal);
  *v92 = v94;
  if (!v94)
    goto LABEL_121;
  v50 = 0;
  if (*((_QWORD *)v94 + 4) == -1)
    v51 = 3;
  else
    v51 = 4;
LABEL_115:
  *(_DWORD *)(a1 + 28) = v51;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = v50;
  *(_QWORD *)(a1 + 144) = v135;
  *(_QWORD *)(a1 + 40) = a6;
  v95 = *(_QWORD **)(a1 + 16);
  Decode = CGImageGetDecode((CGImageRef)a6);
  v97 = Decode;
  BitmapInfo = v46;
  if (!Decode)
    goto LABEL_179;
  if (v40 == 4 || v40 == 2)
  {
    if (*Decode == 0.0 && Decode[1] == 1.0)
    {
      v98 = 1;
      goto LABEL_123;
    }
LABEL_179:
    v69 = v133;
    goto LABEL_180;
  }
  v98 = 0;
LABEL_123:
  if (v95)
  {
    v99 = BitmapInfo;
    v100 = *(_QWORD *)(v95[3] + 40);
    switch(CGColorSpaceGetType(v95))
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 8u:
        if (!v100)
          goto LABEL_172;
        v105 = v100 + v98;
        v106 = (double *)&v97[2 * v98 + 1];
        v69 = v133;
        while (*(v106 - 1) == 0.0 && *v106 == 1.0)
        {
          v106 += 2;
          if (!--v100)
            goto LABEL_160;
        }
        goto LABEL_161;
      case 5u:
        memset(__dst, 0, 96);
        CGColorSpaceGetLabData((uint64_t)v95, v62, v63, v64, __dst);
        if (v97[2 * v98] != 0.0)
          goto LABEL_178;
        if (*(const CGFloat *)((char *)v97 + ((16 * v98) | 8)) != 100.0)
          goto LABEL_178;
        v116 = &v97[2 * v98];
        if (v116[2] != *(double *)&__dst[3]
          || v116[3] != *((double *)&__dst[3] + 1)
          || v97[2 * v98 + 4] != *(double *)&__dst[4]
          || *(const CGFloat *)((char *)v97 + ((16 * v98) | 0x28)) != *((double *)&__dst[4] + 1))
        {
          goto LABEL_178;
        }
        v98 += 3;
        goto LABEL_172;
      case 6u:
      case 0xAu:
      case 0xBu:
        v112 = CGColorSpaceICCGetRange((uint64_t)v95, v101, v102, v103, v104, v62, v63, v64);
        if (!v112)
          goto LABEL_178;
        if (!v100)
        {
LABEL_172:
          BitmapInfo = v99;
          v69 = v133;
          goto LABEL_173;
        }
        v105 = v100 + v98;
        v113 = (double *)(v112 + 8);
        v114 = (double *)&v97[2 * v98 + 1];
        v69 = v133;
        while (*(v114 - 1) == *(v113 - 1) && *v114 == *v113)
        {
          v113 += 2;
          v114 += 2;
          if (!--v100)
          {
LABEL_160:
            v98 = v105;
            BitmapInfo = v99;
            goto LABEL_173;
          }
        }
LABEL_161:
        BitmapInfo = v99;
        break;
      case 7u:
        if (v97[2 * v98] != 0.0)
          goto LABEL_178;
        v127 = v95[3];
        BitmapInfo = v99;
        if (*(_DWORD *)(v127 + 24) == 5)
          v128 = *(_QWORD *)(*(_QWORD *)(v127 + 88) + 8);
        else
          v128 = -1;
        v69 = v133;
        if (*(const CGFloat *)((char *)v97 + ((16 * v98) | 8)) != (double)v128)
          goto LABEL_180;
        ++v98;
        goto LABEL_173;
      default:
LABEL_178:
        BitmapInfo = v99;
        goto LABEL_179;
    }
    goto LABEL_180;
  }
  if (Decode[2 * v98] != 0.0)
    goto LABEL_179;
  v69 = v133;
  if (*(const CGFloat *)((char *)Decode + ((16 * v98) | 8)) != 1.0)
  {
LABEL_180:
    v68 = v43;
    goto LABEL_181;
  }
LABEL_173:
  v68 = v43;
  if ((v40 & 0xFFFFFFFD) != 1 || v97[2 * v98] == 0.0 && *(const CGFloat *)((char *)v97 + ((16 * v98) | 8)) == 1.0)
    v97 = 0;
LABEL_181:
  v117 = 0;
  *(_QWORD *)(a1 + 88) = v97;
  *(_QWORD *)(a1 + 64) = v68;
  *(_QWORD *)(a1 + 72) = v69;
  *(_DWORD *)(a1 + 80) = BitmapInfo;
  if (!v97 && *(_DWORD *)(a1 + 28) == 5 && v68 == 8 && v69 == 32)
  {
    v117 = *(_QWORD *)(a1 + 136);
    if (v117)
    {
      if ((*(_BYTE *)(v117 + 36) & 0x1F) != 0)
      {
        if (img_globals_once != -1)
          dispatch_once(&img_globals_once, &__block_literal_global_10874);
        v117 = qword_1ECDA6E60;
      }
      else
      {
        v117 = 0;
      }
    }
  }
  *(_QWORD *)(a1 + 96) = v117;
  v119 = *(_QWORD *)(a1 + 16);
  if (v119)
  {
    if (*(_QWORD *)(a1 + 88))
    {
LABEL_196:
      *(_QWORD *)(a1 + 112) = 0;
      return a1;
    }
    v121 = *(_DWORD *)(*(_QWORD *)(v119 + 24) + 24);
    if ((v121 - 3) <= 1)
    {
      v122 = CGColorSpaceGetType(*(_QWORD **)(a1 + 16));
      if (v122 <= 0xB && ((1 << v122) & 0xC40) != 0)
      {
        v123 = *(_QWORD *)(*(_QWORD *)(v119 + 24) + 40);
        switch(v123)
        {
          case 4:
            v121 = 2;
            break;
          case 3:
            v121 = 1;
            break;
          case 1:
            v121 = 0;
            break;
        }
      }
    }
    v124 = BitmapInfo & 0xF711F;
    if (v68 <= 9)
    {
      if (v68 == 5)
      {
        if (v69 == 16 && v121 == 1)
        {
          switch(v124)
          {
            case 12294:
              goto LABEL_257;
            case 4102:
              if (img_globals_once != -1)
                dispatch_once(&img_globals_once, &__block_literal_global_10874);
              a2 = qword_1ECDA6E38;
              goto LABEL_443;
            case 6:
LABEL_257:
              if (img_globals_once != -1)
                dispatch_once(&img_globals_once, &__block_literal_global_10874);
              a2 = qword_1ECDA6E30;
              goto LABEL_443;
          }
        }
      }
      else if (v68 == 8)
      {
        switch(v121)
        {
          case 2:
            if (v69 == 32)
            {
              switch(v124)
              {
                case 0x4000:
                  goto LABEL_268;
                case 0x2000:
                  if (img_globals_once != -1)
                    dispatch_once(&img_globals_once, &__block_literal_global_10874);
                  a2 = qword_1ECDA6E70;
                  goto LABEL_443;
                case 0:
LABEL_268:
                  if (img_globals_once != -1)
                    dispatch_once(&img_globals_once, &__block_literal_global_10874);
                  a2 = qword_1ECDA6E68;
                  goto LABEL_443;
              }
            }
            break;
          case 1:
            switch(v124)
            {
              case 0:
                if (v69 == 32)
                  goto LABEL_330;
                if (v69 != 24)
                  goto LABEL_442;
                if (img_globals_once != -1)
                  dispatch_once(&img_globals_once, &__block_literal_global_10874);
                a2 = qword_1ECDA6E40;
                break;
              case 1:
              case 5:
LABEL_329:
                if (v69 != 32)
                  goto LABEL_442;
LABEL_330:
                if (img_globals_once != -1)
                  dispatch_once(&img_globals_once, &__block_literal_global_10874);
                a2 = qword_1ECDA6E48;
                goto LABEL_443;
              case 2:
              case 6:
LABEL_340:
                if (v69 != 32)
                  goto LABEL_442;
                if (img_globals_once != -1)
                  dispatch_once(&img_globals_once, &__block_literal_global_10874);
                a2 = qword_1ECDA6E58;
                goto LABEL_443;
              case 3:
              case 4:
                goto LABEL_442;
              default:
                switch(v124)
                {
                  case 8193:
                  case 8197:
                    if (v69 != 32)
                      goto LABEL_442;
                    if (img_globals_once != -1)
                      dispatch_once(&img_globals_once, &__block_literal_global_10874);
                    a2 = qword_1ECDA6E50;
                    break;
                  case 8194:
                  case 8198:
                    if (v69 != 32)
                      goto LABEL_442;
                    if (img_globals_once != -1)
                      dispatch_once(&img_globals_once, &__block_literal_global_10874);
                    a2 = qword_1ECDA6E60;
                    break;
                  case 8195:
                  case 8196:
                    goto LABEL_442;
                  default:
                    switch(v124)
                    {
                      case 16385:
                      case 16389:
                        goto LABEL_329;
                      case 16386:
                      case 16390:
                        goto LABEL_340;
                      default:
                        goto LABEL_442;
                    }
                }
                goto LABEL_443;
            }
            goto LABEL_443;
          case 0:
            if (v69 == 8 && !v124)
            {
              if (img_globals_once != -1)
                dispatch_once(&img_globals_once, &__block_literal_global_10874);
              a2 = qword_1ECDA6E28;
              goto LABEL_443;
            }
            if (v69 == 16 && (BitmapInfo & 0xF711B) == 1)
            {
              if (img_globals_once != -1)
                dispatch_once(&img_globals_once, &__block_literal_global_10874);
              if (qword_1ECDA6F48 == a2)
                goto LABEL_443;
            }
            break;
        }
      }
      goto LABEL_442;
    }
    if (v68 == 10)
    {
      if (v124 == 270336 && v121 == 1)
      {
        if (img_globals_once != -1)
          dispatch_once(&img_globals_once, &__block_literal_global_10874);
        a2 = qword_1ECDA6F50;
        goto LABEL_443;
      }
      goto LABEL_442;
    }
    if (v68 != 16)
    {
      if (v68 == 32)
      {
        if ((BitmapInfo & 0xF711Fu) > 0x2100)
        {
          if ((BitmapInfo & 0xF711Fu) > 0x40FF)
          {
            if (v124 != 16645 && v124 != 16641)
            {
              if (v124 != 16640)
                goto LABEL_442;
LABEL_306:
              if (v121 == 2)
              {
                if (v69 == 128)
                {
                  if (img_globals_once != -1)
                    dispatch_once(&img_globals_once, &__block_literal_global_10874);
                  a2 = qword_1ECDA6EE8;
                  goto LABEL_443;
                }
                goto LABEL_442;
              }
              if (v121 != 1)
              {
                if (!v121 && v69 == 32)
                {
                  if (img_globals_once != -1)
                    dispatch_once(&img_globals_once, &__block_literal_global_10874);
                  a2 = qword_1ECDA6ED8;
                  goto LABEL_443;
                }
                goto LABEL_442;
              }
              if (v69 != 128)
              {
                if (v69 == 96)
                {
                  if (img_globals_once != -1)
                    dispatch_once(&img_globals_once, &__block_literal_global_10874);
                  a2 = qword_1ECDA6EB8;
                  goto LABEL_443;
                }
                goto LABEL_442;
              }
              if (img_globals_once == -1)
                goto LABEL_305;
              goto LABEL_455;
            }
LABEL_302:
            if (v69 != 128 || v121 != 1)
              goto LABEL_442;
            if (img_globals_once == -1)
              goto LABEL_305;
LABEL_455:
            dispatch_once(&img_globals_once, &__block_literal_global_10874);
LABEL_305:
            a2 = qword_1ECDA6EC8;
            goto LABEL_443;
          }
          if (v124 != 8449 && v124 != 8453 || v69 != 128 || v121 != 1)
            goto LABEL_442;
          if (img_globals_once == -1)
          {
LABEL_292:
            a2 = qword_1ECDA6ED0;
LABEL_443:
            *(_QWORD *)(a1 + 112) = a2;
            return a1;
          }
LABEL_456:
          dispatch_once(&img_globals_once, &__block_literal_global_10874);
          goto LABEL_292;
        }
        if ((BitmapInfo & 0xF711Fu) <= 0x104)
        {
          if (v124 == 256)
            goto LABEL_306;
          if (v124 != 257)
            goto LABEL_442;
          goto LABEL_302;
        }
        if (v124 == 261)
          goto LABEL_302;
        if (v124 == 8448)
        {
          if (v121 == 2)
          {
            if (v69 == 128)
            {
              if (img_globals_once != -1)
                dispatch_once(&img_globals_once, &__block_literal_global_10874);
              a2 = qword_1ECDA6EF0;
              goto LABEL_443;
            }
            goto LABEL_442;
          }
          if (v121 != 1)
          {
            if (!v121 && v69 == 32)
            {
              if (img_globals_once != -1)
                dispatch_once(&img_globals_once, &__block_literal_global_10874);
              a2 = qword_1ECDA6EE0;
              goto LABEL_443;
            }
            goto LABEL_442;
          }
          if (v69 != 128)
          {
            if (v69 == 96)
            {
              if (img_globals_once != -1)
                dispatch_once(&img_globals_once, &__block_literal_global_10874);
              a2 = qword_1ECDA6EC0;
              goto LABEL_443;
            }
            goto LABEL_442;
          }
          if (img_globals_once == -1)
            goto LABEL_292;
          goto LABEL_456;
        }
      }
LABEL_442:
      a2 = 0;
      goto LABEL_443;
    }
    if (v121 != 2)
    {
      if (v121 != 1)
      {
        if (v121)
          v125 = 0;
        else
          v125 = v69 == 16;
        if (!v125)
          goto LABEL_442;
        if ((BitmapInfo & 0xF711Fu) > 0x10FF)
        {
          if (v124 == 4352)
          {
            if (img_globals_once != -1)
              dispatch_once(&img_globals_once, &__block_literal_global_10874);
            a2 = qword_1ECDA6F08;
            goto LABEL_443;
          }
          if (v124 != 12288)
          {
            if (v124 != 12544)
              goto LABEL_442;
LABEL_440:
            _CGHandleAssert("img_depth", 3279, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGSImage.c", "", "Unimplemented", v62, v63, v64, v129);
          }
        }
        else if (v124)
        {
          if (v124 == 4096)
          {
            if (img_globals_once != -1)
              dispatch_once(&img_globals_once, &__block_literal_global_10874);
            a2 = qword_1ECDA6E80;
            goto LABEL_443;
          }
          if (v124 != 256)
            goto LABEL_442;
          goto LABEL_440;
        }
        if (img_globals_once != -1)
          dispatch_once(&img_globals_once, &__block_literal_global_10874);
        a2 = qword_1ECDA6E78;
        goto LABEL_443;
      }
      if ((BitmapInfo & 0xF711Fu) <= 0x10FF)
      {
        if ((BitmapInfo & 0xF711Fu) > 0x100)
        {
          if ((BitmapInfo & 0xF711Fu) > 0x1000)
          {
            if (v124 != 4097 && v124 != 4101 || v69 != 64)
              goto LABEL_442;
LABEL_412:
            if (img_globals_once != -1)
              dispatch_once(&img_globals_once, &__block_literal_global_10874);
            a2 = qword_1ECDA6EA0;
            goto LABEL_443;
          }
          if (v124 == 4096)
          {
            if (v69 != 64)
            {
              if (v69 == 48)
              {
                if (img_globals_once != -1)
                  dispatch_once(&img_globals_once, &__block_literal_global_10874);
                a2 = qword_1ECDA6E90;
                goto LABEL_443;
              }
              goto LABEL_442;
            }
            goto LABEL_412;
          }
          if (v124 != 257 && v124 != 261)
            goto LABEL_442;
LABEL_454:
          _CGHandleAssert("img_depth", 3319, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGSImage.c", "", "Unimplemented", v62, v63, v64, v129);
        }
        if ((BitmapInfo & 0xF711Fu) <= 4)
        {
          if (v124)
          {
            if (v124 != 1)
              goto LABEL_442;
LABEL_416:
            if (v69 != 64)
              goto LABEL_442;
LABEL_417:
            if (img_globals_once != -1)
              dispatch_once(&img_globals_once, &__block_literal_global_10874);
            a2 = qword_1ECDA6E98;
            goto LABEL_443;
          }
LABEL_375:
          if (v69 != 64)
          {
            if (v69 == 48)
            {
              if (img_globals_once != -1)
                dispatch_once(&img_globals_once, &__block_literal_global_10874);
              a2 = qword_1ECDA6E88;
              goto LABEL_443;
            }
            goto LABEL_442;
          }
          goto LABEL_417;
        }
        if (v124 == 5)
          goto LABEL_416;
        if (v124 != 256)
          goto LABEL_442;
LABEL_458:
        _CGHandleAssert("img_depth", 3312, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGSImage.c", "", "Unimplemented", v62, v63, v64, v129);
      }
      if ((BitmapInfo & 0xF711Fu) < 0x3000)
      {
        if (v124 == 4352)
        {
          if (v69 != 64)
          {
            if (v69 == 48)
            {
              if (img_globals_once != -1)
                dispatch_once(&img_globals_once, &__block_literal_global_10874);
              a2 = qword_1ECDA6F18;
              goto LABEL_443;
            }
            goto LABEL_442;
          }
        }
        else if (v124 != 4353 && v124 != 4357 || v69 != 64)
        {
          goto LABEL_442;
        }
        if (img_globals_once != -1)
          dispatch_once(&img_globals_once, &__block_literal_global_10874);
        a2 = qword_1ECDA6F28;
        goto LABEL_443;
      }
      if ((BitmapInfo & 0xF711Fu) > 0x3004)
      {
        if ((BitmapInfo & 0xF711Fu) > 0x30FF)
        {
          if (v124 != 12544)
          {
            if (v124 != 12545 && v124 != 12549)
              goto LABEL_442;
            goto LABEL_454;
          }
          goto LABEL_458;
        }
        v126 = 12293;
      }
      else
      {
        if (v124 == 12288)
          goto LABEL_375;
        v126 = 12289;
      }
      if (v124 != v126)
        goto LABEL_442;
      goto LABEL_416;
    }
    if (v69 != 64)
      goto LABEL_442;
    if ((BitmapInfo & 0xF711Fu) > 0x10FF)
    {
      if (v124 == 4352)
      {
        if (img_globals_once != -1)
          dispatch_once(&img_globals_once, &__block_literal_global_10874);
        a2 = qword_1ECDA6F38;
        goto LABEL_443;
      }
      if (v124 != 12288)
      {
        if (v124 != 12544)
          goto LABEL_442;
LABEL_457:
        _CGHandleAssert("img_depth", 3349, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGSImage.c", "", "Unimplemented", v62, v63, v64, v129);
      }
    }
    else if (v124)
    {
      if (v124 == 4096)
      {
        if (img_globals_once != -1)
          dispatch_once(&img_globals_once, &__block_literal_global_10874);
        a2 = qword_1ECDA6EB0;
        goto LABEL_443;
      }
      if (v124 != 256)
        goto LABEL_442;
      goto LABEL_457;
    }
    if (img_globals_once != -1)
      dispatch_once(&img_globals_once, &__block_literal_global_10874);
    a2 = qword_1ECDA6EA8;
    goto LABEL_443;
  }
  if (v69 != 8)
    goto LABEL_196;
  if (v68 != 8)
    goto LABEL_196;
  v120 = *(double **)(a1 + 88);
  if (!v120 || *v120 != 1.0 || v120[1] != 0.0)
    goto LABEL_196;
  if (img_globals_once != -1)
    dispatch_once(&img_globals_once, &__block_literal_global_10874);
  *(_QWORD *)(a1 + 112) = img_globals_globals;
  return a1;
}

BOOL data_conversion_required(_QWORD *a1, uint64_t *image, _DWORD *a3, const void *a4)
{
  CGColorSpaceRef ColorSpace;
  CGColorSpaceRef v9;
  CGColorSpace *ResolvedColorSpace;
  uint64_t v11;
  _BOOL8 v12;
  _QWORD *Cache;
  _BYTE v15[304];
  _QWORD __dst[38];

  if (image && (*((_BYTE *)image + 39) & 8) != 0)
    return 1;
  if (a3[6] == 7)
  {
    ColorSpace = CGImageGetColorSpace((CGImageRef)image);
    if (CGColorSpaceGetType(ColorSpace) - 7 > 2)
      return 0;
  }
  v9 = CGImageGetColorSpace((CGImageRef)image);
  if (create_resolved_space_predicate != -1)
    dispatch_once(&create_resolved_space_predicate, &__block_literal_global_74_10937);
  __dst[0] = MEMORY[0x1E0C809B0];
  __dst[1] = 0x40000000;
  __dst[2] = __CGColorSpaceCreateResolved_block_invoke;
  __dst[3] = &__block_descriptor_tmp_40_20979;
  __dst[4] = create_resolved_space_gray;
  __dst[5] = create_resolved_space_sRGB;
  __dst[6] = create_resolved_space_cmyk;
  ResolvedColorSpace = (CGColorSpace *)CGColorSpaceCreateResolvedColorSpace(v9, (uint64_t)__dst);
  if (image && (v11 = image[28]) != 0 && CGPropertiesGetProperty(v11, CFSTR("kCGColorConversionInfoOptions")))
  {
    v12 = 1;
  }
  else
  {
    v12 = 1;
    if (a1 && ResolvedColorSpace && !CGColorTransformGetAttributes(a1))
    {
      Cache = CGColorTransformGetCache(a1);
      if (Cache)
        Cache = (_QWORD *)Cache[2];
      if (CGColorSpaceEqualToColorSpace((uint64_t)Cache, (uint64_t)ResolvedColorSpace))
      {
        memcpy(__dst, a3, sizeof(__dst));
        memcpy(v15, a4, sizeof(v15));
        v12 = !CGBitmapPixelInfoIsEqualToBitmapPixelInfo((uint64_t)__dst, (uint64_t)v15);
      }
    }
  }
  CGColorSpaceRelease(ResolvedColorSpace);
  return v12;
}

void *CGBitmapPixelInfoInitializeWithImage(void *a1, _OWORD *a2, CGColorSpace *image)
{
  uint64_t v6;
  uint64_t NumberOfComponents;
  uint64_t v8;
  unint64_t v9;

  a2[17] = 0u;
  a2[18] = 0u;
  a2[15] = 0u;
  a2[16] = 0u;
  a2[13] = 0u;
  a2[14] = 0u;
  a2[11] = 0u;
  a2[12] = 0u;
  a2[9] = 0u;
  a2[10] = 0u;
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  *(_DWORD *)a2 = CGImageGetPixelComponentType((uint64_t)image);
  if (image)
    v6 = *((_QWORD *)image + 7);
  else
    v6 = 0;
  *((_QWORD *)a2 + 1) = v6;
  *((_QWORD *)a2 + 2) = CGImageGetNumberOfColorComponents(image);
  *((_DWORD *)a2 + 6) = CGImageGetAlphaInfo(image);
  *((_DWORD *)a2 + 7) = CGImageGetByteOrderInfo(image);
  *((_DWORD *)a2 + 8) = CGImageGetPixelFormatInfo(image);
  if (CGImageGetDecode(image))
  {
    NumberOfComponents = CGImageGetNumberOfComponents((uint64_t)image);
    if (NumberOfComponents)
    {
      v8 = NumberOfComponents;
      v9 = 0;
      do
      {
        *(CGFloat *)&a2[v9 / 0x10 + 3] = CGImageGetDecode(image)[v9 / 8];
        *((CGFloat *)&a2[v9 / 0x10 + 3] + 1) = CGImageGetDecode(image)[v9 / 8 + 1];
        v9 += 16;
        --v8;
      }
      while (v8);
    }
    *((_QWORD *)a2 + 5) = a2 + 3;
  }
  return memcpy(a1, a2, 0x130uLL);
}

uint64_t CGImageGetPixelComponentType(uint64_t image)
{
  CGImage *v1;
  uint64_t v2;

  if (image)
  {
    v1 = (CGImage *)image;
    image = 0;
    v2 = *((_QWORD *)v1 + 7);
    switch(v2)
    {
      case 1:
        image = 7;
        break;
      case 2:
        image = 8;
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        return image;
      case 4:
        image = 9;
        break;
      case 8:
        image = 1;
        break;
      default:
        if (v2 == 16)
        {
          if ((CGImageGetBitmapInfo(v1) & 0x100) != 0)
            image = 5;
          else
            image = 2;
        }
        else if (v2 == 32)
        {
          if ((CGImageGetBitmapInfo(v1) & 0x100) != 0)
            image = 4;
          else
            image = 3;
        }
        break;
    }
  }
  return image;
}

const char **initialize_skipping_conditional_var(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v11;
  const char **result;
  int v13;
  int v14;
  char v15;

  if (a2)
  {
    v11 = *(_OWORD *)(a2 + 132);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 148);
    *(_OWORD *)a1 = v11;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  *(_QWORD *)(a1 + 20) = *(_QWORD *)(a4 + 88);
  if (a3 && (*(_BYTE *)(a3 + 39) & 2) != 0)
  {
    result = 0;
  }
  else
  {
    result = *(const char ***)(a4 + 8);
    if (!result)
    {
      if (!*(_QWORD *)a4)
        _CGHandleAssert("RIPGetDepthForEncoding", 113, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/RIP/RIPLayerFormat.c", "enc != NULL", "NULL encoding", a6, a7, a8, v15);
      result = CGBlt_depth(*(char **)a4);
    }
  }
  *(_QWORD *)(a1 + 32) = result;
  *(int32x2_t *)(a1 + 40) = vmovn_s64(*(int64x2_t *)(a4 + 16));
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a4 + 32);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a4 + 48);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a4 + 56);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a4 + 64);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a4 + 52);
  *(int8x16_t *)(a1 + 96) = vextq_s8(*(int8x16_t *)(a4 + 72), *(int8x16_t *)(a4 + 72), 8uLL);
  if (a3)
    v13 = *(_DWORD *)(a3 + 24);
  else
    v13 = 0;
  v14 = *(_DWORD *)(a4 + 96);
  *(_DWORD *)(a1 + 112) = v13;
  *(_DWORD *)(a1 + 116) = v14;
  *(_QWORD *)(a1 + 120) = a4;
  return result;
}

unint64_t ripc_GetImageTransformation(_QWORD *a1, int *a2, unint64_t a3, unint64_t a4, double *a5, double *a6, uint64_t a7, int *a8, uint64_t a9)
{
  _QWORD *Mask;
  unint64_t v18;
  int v19;
  int v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  unint64_t result;
  double v54;
  double v55;
  double v56;
  int v57;
  unsigned int v58;
  double v59;
  double v60;
  int v61;
  unsigned int v62;
  int v63;
  double v64;
  double v65;
  unsigned int v66;
  double v67;
  double v68;
  double v69;
  unsigned int v70;
  double v71;
  unsigned int v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  unsigned int v97;
  double v98;
  double v99;
  double v100;
  double v101;
  int v102;
  unsigned int v103;
  double v104;
  double v105;
  int v106;
  unsigned int v107;
  double v108;
  int v109;
  unsigned int v110;
  double v111;
  double v112;
  int v113;
  unsigned int v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  int v143;
  unsigned int v144;
  double v145;
  double v146;
  int v147;
  unsigned int v148;
  double v149;
  double v150;
  int v151;
  unsigned int v152;
  double v153;
  unsigned int v154;

  if (a1 && (Mask = CGImageGetMask(a1)) != 0 && (Mask[5] > a1[5] || Mask[6] > a1[6]))
    v18 = 7;
  else
    v18 = 3;
  v19 = a2[3];
  v20 = a2[1];
  v21 = (double)*a2;
  v23 = a6[4];
  v22 = a6[5];
  v24 = *a6;
  v25 = a6[1];
  v26 = a6[2];
  v27 = a6[3];
  v28 = v23 + *a6;
  v29 = v22 + v25;
  if (v28 > v23)
    v30 = v23 + *a6;
  else
    v30 = a6[4];
  if (v28 >= v23)
  {
    v31 = a6[4];
  }
  else
  {
    v30 = a6[4];
    v31 = v23 + *a6;
  }
  if (v29 > v22)
    v32 = v22 + v25;
  else
    v32 = a6[5];
  if (v29 >= v22)
  {
    v33 = a6[5];
  }
  else
  {
    v32 = a6[5];
    v33 = v22 + v25;
  }
  v34 = v28 + v26;
  v35 = v29 + v27;
  if (v28 + v26 > v30)
    v36 = v28 + v26;
  else
    v36 = v30;
  if (v34 >= v31)
    v37 = v36;
  else
    v37 = v30;
  if (v34 >= v31)
    v38 = v31;
  else
    v38 = v34;
  if (v35 > v32)
    v39 = v29 + v27;
  else
    v39 = v32;
  if (v35 >= v33)
    v40 = v39;
  else
    v40 = v32;
  if (v35 >= v33)
    v41 = v33;
  else
    v41 = v35;
  v42 = (double)a2[2] + v21;
  v43 = v35 - v25;
  if (v34 - v24 >= v38)
  {
    if (v34 - v24 > v37)
      v37 = v34 - v24;
  }
  else
  {
    v38 = v34 - v24;
  }
  if (v43 > v40)
    v44 = v35 - v25;
  else
    v44 = v40;
  if (v43 >= v41)
    v45 = v44;
  else
    v45 = v40;
  if (v43 < v41)
    v41 = v35 - v25;
  if (v38 >= v21)
    v46 = v38;
  else
    v46 = (double)*a2;
  if (v37 <= v42)
    v47 = v37;
  else
    v47 = (double)a2[2] + v21;
  if (v46 >= v47)
    return 0;
  v48 = (double)v19 + (double)v20;
  v49 = v41 >= (double)v20 ? v41 : (double)v20;
  v50 = v41 < (double)v20 || v38 < v21;
  v51 = !v50 && v37 <= v42;
  v52 = v51 && v45 <= v48;
  result = v52 ? v18 : v18 & 0xFFFFFFFFFFFFFFFDLL;
  v54 = v45 <= v48 ? v45 : (double)v19 + (double)v20;
  if (v49 >= v54)
    return 0;
  v55 = v38 + v37 - v38;
  v56 = v38 + 0.00390625;
  if (v38 + 0.00390625 <= 1073741820.0)
  {
    v58 = vcvtmd_s64_f64(v56);
    if (v56 >= -1073741820.0)
      v57 = v58;
    else
      v57 = -1073741823;
  }
  else
  {
    v57 = 0x3FFFFFFF;
  }
  v59 = v45 - v41;
  *a8 = v57;
  v60 = v55 + -0.00390625;
  if (v60 <= 1073741820.0)
  {
    v62 = vcvtpd_s64_f64(v60);
    if (v60 >= -1073741820.0)
      v61 = v62;
    else
      v61 = -1073741823;
  }
  else
  {
    v61 = 0x3FFFFFFF;
  }
  v63 = v61 - v57;
  a8[2] = v63;
  v64 = v41 + v59;
  v65 = v41 + 0.00390625;
  if (v65 <= 1073741820.0)
  {
    v66 = vcvtmd_s64_f64(v65);
    if (v65 < -1073741820.0)
      v66 = -1073741823;
  }
  else
  {
    v66 = 0x3FFFFFFF;
  }
  v67 = (double)a3;
  v68 = (double)a4;
  a8[1] = v66;
  v69 = v64 + -0.00390625;
  if (v69 <= 1073741820.0)
  {
    v70 = vcvtpd_s64_f64(v69);
    if (v69 < -1073741820.0)
      v70 = -1073741823;
  }
  else
  {
    v70 = 0x3FFFFFFF;
  }
  v71 = 1.0 / v67;
  v72 = v70 - v66;
  a8[3] = v72;
  v73 = 1.0 / v68;
  if (v63 != a3
    || v72 != a4
    || fabs(v25) > 0.00390625
    || vabdd_f64(v24, v67) > 0.00390625
    || fabs(v26) > 0.00390625
    || vabdd_f64(v27, v68) > 0.00390625)
  {
    result |= 4uLL;
  }
  v74 = v71 * v24;
  v75 = v71 * v25;
  *a6 = v74;
  a6[1] = v75;
  v76 = v73 * v26;
  v77 = v73 * v27;
  a6[2] = v76;
  a6[3] = v77;
  if (a5)
  {
    v78 = *a5 * v67;
    v79 = a5[1] * v68;
    v80 = a5[2] * v67;
    v81 = a5[3] * v68;
    v82 = v23 + v74 * v78 + v76 * v79;
    v83 = v22 + v75 * v78 + v77 * v79;
    v84 = v82 + v74 * v80;
    v85 = v83 + v75 * v80;
    if (v84 > v82)
      v86 = v82 + v74 * v80;
    else
      v86 = v82;
    if (v84 < v82)
    {
      v86 = v82;
      v82 = v82 + v74 * v80;
    }
    if (v85 > v83)
      v87 = v83 + v75 * v80;
    else
      v87 = v83;
    if (v85 >= v83)
    {
      v88 = v83;
    }
    else
    {
      v87 = v83;
      v88 = v83 + v75 * v80;
    }
    v89 = v84 + v76 * v81;
    v90 = v85 + v77 * v81;
    if (v89 > v86)
      v91 = v84 + v76 * v81;
    else
      v91 = v86;
    if (v89 >= v82)
    {
      v92 = v82;
    }
    else
    {
      v91 = v86;
      v92 = v84 + v76 * v81;
    }
    if (v90 > v87)
      v93 = v85 + v77 * v81;
    else
      v93 = v87;
    if (v90 >= v88)
    {
      v94 = v88;
    }
    else
    {
      v93 = v87;
      v94 = v90;
    }
    v95 = v89 - v74 * v80;
    v96 = v90 - v75 * v80;
    if (v95 >= v92)
    {
      if (v95 > v91)
        v91 = v95;
    }
    else
    {
      v92 = v95;
    }
    if (v96 > v93)
      v98 = v96;
    else
      v98 = v93;
    if (v96 < v94)
      v94 = v96;
    else
      v93 = v98;
    if (v46 < v92)
      v46 = v92;
    if (v47 > v91)
      v47 = v91;
    if (v46 >= v47)
      return 0;
    if (v49 < v94)
      v49 = v94;
    if (v54 > v93)
      v54 = v93;
    if (v49 >= v54)
      return 0;
    result &= ~2uLL;
  }
  else if ((result & 2) != 0)
  {
    *(_QWORD *)a7 = 0;
    *(_DWORD *)(a7 + 8) = a3;
    *(_DWORD *)(a7 + 12) = a4;
    *(_QWORD *)a9 = *(_QWORD *)a8;
    v97 = a8[3];
    *(_DWORD *)(a9 + 8) = a8[2];
    a7 = a9;
LABEL_128:
    *(_DWORD *)(a7 + 12) = v97;
    return result;
  }
  v99 = v76 * -v75 + v74 * v77;
  if (v99 != 0.0)
  {
    v100 = v47 - v46;
    v101 = v46 + 0.00390625;
    if (v46 + 0.00390625 <= 1073741820.0)
    {
      v103 = vcvtmd_s64_f64(v101);
      if (v101 >= -1073741820.0)
        v102 = v103;
      else
        v102 = -1073741823;
    }
    else
    {
      v102 = 0x3FFFFFFF;
    }
    v104 = v54 - v49;
    *(_DWORD *)a9 = v102;
    v105 = v46 + v100 + -0.00390625;
    if (v105 <= 1073741820.0)
    {
      v107 = vcvtpd_s64_f64(v105);
      if (v105 >= -1073741820.0)
        v106 = v107;
      else
        v106 = -1073741823;
    }
    else
    {
      v106 = 0x3FFFFFFF;
    }
    *(_DWORD *)(a9 + 8) = v106 - v102;
    v108 = v49 + 0.00390625;
    if (v49 + 0.00390625 <= 1073741820.0)
    {
      v110 = vcvtmd_s64_f64(v108);
      if (v108 >= -1073741820.0)
        v109 = v110;
      else
        v109 = -1073741823;
    }
    else
    {
      v109 = 0x3FFFFFFF;
    }
    *(_DWORD *)(a9 + 4) = v109;
    v111 = v49 + v104 + -0.00390625;
    v112 = 1.0 / v99;
    if (v111 <= 1073741820.0)
    {
      v114 = vcvtpd_s64_f64(v111);
      if (v111 >= -1073741820.0)
        v113 = v114;
      else
        v113 = -1073741823;
    }
    else
    {
      v113 = 0x3FFFFFFF;
    }
    *(_DWORD *)(a9 + 12) = v113 - v109;
    v115 = v74 * v112;
    v116 = v75 * v112;
    v117 = v116 * v23 - v115 * v22;
    v118 = v77 * v112;
    v119 = -(v77 * v112);
    v120 = v76 * v112 * v22 - v118 * v23;
    v121 = -(v76 * v112);
    v122 = v120 + v118 * v46 - v76 * v112 * v49;
    v123 = v117 - v116 * v46 + v115 * v49;
    v124 = v122 + v118 * v100;
    v125 = v123 - v116 * v100;
    if (v124 > v122)
      v126 = v122 + v118 * v100;
    else
      v126 = v122;
    if (v124 < v122)
    {
      v126 = v122;
      v122 = v122 + v118 * v100;
    }
    if (v125 > v123)
      v127 = v123 - v116 * v100;
    else
      v127 = v123;
    if (v125 < v123)
    {
      v127 = v123;
      v123 = v123 - v116 * v100;
    }
    v128 = v124 + v121 * v104;
    v129 = v125 + v115 * v104;
    if (v128 > v126)
      v130 = v128;
    else
      v130 = v126;
    if (v128 >= v122)
    {
      v131 = v122;
    }
    else
    {
      v130 = v126;
      v131 = v128;
    }
    if (v129 > v127)
      v132 = v129;
    else
      v132 = v127;
    if (v129 < v123)
    {
      v132 = v127;
      v123 = v129;
    }
    v133 = v128 + v119 * v100;
    v134 = v129 + v116 * v100;
    if (v133 >= v131)
    {
      if (v133 > v130)
        v130 = v128 + v119 * v100;
    }
    else
    {
      v131 = v128 + v119 * v100;
    }
    if (v134 >= v123)
    {
      if (v134 > v132)
        v132 = v134;
    }
    else
    {
      v123 = v134;
    }
    if (a5)
    {
      v135 = a5[1];
      v136 = v135 * v68;
      v137 = (v135 + a5[3]) * v68;
      v138 = fmax(*a5 * v67, 0.0);
      v139 = fmax(v136, 0.0);
      if ((*a5 + a5[2]) * v67 < v67)
        v67 = (*a5 + a5[2]) * v67;
      if (v137 < v68)
        v68 = v137;
    }
    else
    {
      v139 = 0.0;
      v138 = 0.0;
    }
    if (v131 < v138)
      v131 = v138;
    if (v130 <= v67)
      v67 = v130;
    if (v67 > v131)
    {
      if (v123 >= v139)
        v140 = v123;
      else
        v140 = v139;
      if (v132 > v68)
        v132 = v68;
      if (v132 > v140)
      {
        v141 = v131 + v67 - v131;
        v142 = v131 + 0.00390625;
        if (v131 + 0.00390625 <= 1073741820.0)
        {
          v144 = vcvtmd_s64_f64(v142);
          if (v142 >= -1073741820.0)
            v143 = v144;
          else
            v143 = -1073741823;
        }
        else
        {
          v143 = 0x3FFFFFFF;
        }
        v145 = v132 - v140;
        *(_DWORD *)a7 = v143;
        v146 = v141 + -0.00390625;
        if (v146 <= 1073741820.0)
        {
          v148 = vcvtpd_s64_f64(v146);
          if (v146 >= -1073741820.0)
            v147 = v148;
          else
            v147 = -1073741823;
        }
        else
        {
          v147 = 0x3FFFFFFF;
        }
        *(_DWORD *)(a7 + 8) = v147 - v143;
        v149 = v140 + v145;
        v150 = v140 + 0.00390625;
        if (v150 <= 1073741820.0)
        {
          v152 = vcvtmd_s64_f64(v150);
          if (v150 >= -1073741820.0)
            v151 = v152;
          else
            v151 = -1073741823;
        }
        else
        {
          v151 = 0x3FFFFFFF;
        }
        *(_DWORD *)(a7 + 4) = v151;
        v153 = v149 + -0.00390625;
        if (v153 <= 1073741820.0)
        {
          if (v153 >= -1073741820.0)
            v154 = vcvtpd_s64_f64(v153);
          else
            v154 = -1073741823;
        }
        else
        {
          v154 = 0x3FFFFFFF;
        }
        v97 = v154 - v151;
        goto LABEL_128;
      }
    }
  }
  return 0;
}

int32x2_t ripc_InitializeImage(uint64_t a1, uint64_t a2, double *a3, int a4, unint64_t a5, unint64_t a6, double *a7, double *a8, double a9, double a10, double a11)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  double v14;
  uint64_t v15;
  int v16;
  double v17;
  double v18;
  double v19;
  int32x2_t result;
  double v21;
  __int16 v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  int v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  int v50;
  unsigned int v51;
  double v52;
  double v53;
  int v54;
  unsigned int v55;
  double v56;
  double v57;
  int v58;
  unsigned int v59;
  double v60;
  double v61;
  int v62;
  int v63;
  int v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;

  *(_QWORD *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 42) = 0;
  if (a7)
  {
    v11 = *((int *)a3 + 14);
    if (v11 == a5 && (v12 = *((int *)a3 + 15), v12 == a6))
    {
      v13 = *(_DWORD *)(a2 + 12);
      v14 = (double)*(int *)a2;
      *(_DWORD *)a1 = *(_DWORD *)a2;
      v15 = *(_QWORD *)(a2 + 4);
      *(_QWORD *)(a1 + 4) = v15;
      v16 = v15;
      a11 = a7[4];
      v17 = a7[5] + a7[3] * (double)a6;
      v19 = a7[1];
      v18 = a7[2];
      *(_DWORD *)(a1 + 12) = v13;
      a7[4] = a11 + v18 * (double)a6 - v14;
      a7[5] = (double)(v13 + v16) - v17;
      *(double *)&result = -v18;
      v21 = -v19;
      a7[1] = -v19;
      a7[2] = -v18;
      *(_QWORD *)(a1 + 24) = a7;
      *(_QWORD *)(a1 + 48) = 0;
      if (a4 == 1)
        v22 = 0;
      else
        v22 = -1;
      *(_WORD *)(a1 + 40) = v22;
    }
    else
    {
      a11 = *a7;
      v23 = a7[1];
      v25 = a7[2];
      v24 = a7[3];
      if (a4 == 1)
      {
        *(_WORD *)(a1 + 40) = 0;
      }
      else
      {
        *(_WORD *)(a1 + 40) = -1;
        v26 = *((unsigned int *)a3 + 10);
        if (v26 != a5)
        {
          v27 = (double)a5 / (double)v26;
          a11 = a11 * v27;
          v23 = v23 * v27;
        }
        v28 = *((unsigned int *)a3 + 11);
        if (v28 != a6)
        {
          v29 = (double)a6 / (double)v28;
          v25 = v25 * v29;
          v24 = v24 * v29;
        }
      }
      v30 = *((_DWORD *)a3 + 13);
      v31 = (double)*((int *)a3 + 12);
      v32 = (double)(int)v11;
      LODWORD(v12) = *((_DWORD *)a3 + 15);
      v33 = (double)(int)v12;
      v34 = a7[4] + a11 * v31 + v25 * (double)v30;
      v35 = a7[5] + v23 * v31 + v24 * (double)v30;
      v36 = v34 + a11 * (double)(int)v11;
      v37 = v35 + v23 * (double)(int)v11;
      if (v36 > v34)
        v38 = v34 + a11 * (double)(int)v11;
      else
        v38 = v34;
      if (v36 < v34)
      {
        v38 = v34;
        v34 = v34 + a11 * (double)(int)v11;
      }
      if (v37 > v35)
        v39 = v35 + v23 * (double)(int)v11;
      else
        v39 = v35;
      if (v37 < v35)
      {
        v39 = v35;
        v35 = v35 + v23 * (double)(int)v11;
      }
      v40 = v36 + v25 * v33;
      v41 = v37 + v24 * v33;
      if (v40 > v38)
        v42 = v40;
      else
        v42 = v38;
      if (v40 < v34)
        v34 = v40;
      else
        v38 = v42;
      if (v41 > v39)
        v43 = v41;
      else
        v43 = v39;
      if (v41 >= v35)
        v44 = v43;
      else
        v44 = v39;
      if (v41 >= v35)
        v45 = v35;
      else
        v45 = v41;
      v46 = v40 - a11 * v32;
      v47 = v41 - v23 * v32;
      if (v46 >= v34)
      {
        if (v46 > v38)
          v38 = v46;
      }
      else
      {
        v34 = v46;
      }
      if (v47 >= v45)
      {
        if (v47 > v44)
          v44 = v41 - v23 * v32;
      }
      else
      {
        v45 = v41 - v23 * v32;
      }
      v48 = v34 + v38 - v34;
      v49 = v34 + 0.00390625;
      if (v34 + 0.00390625 <= 1073741820.0)
      {
        v51 = vcvtmd_s64_f64(v49);
        if (v49 >= -1073741820.0)
          v50 = v51;
        else
          v50 = -1073741823;
      }
      else
      {
        v50 = 0x3FFFFFFF;
      }
      v52 = v44 - v45;
      *(_DWORD *)a1 = v50;
      v53 = v48 + -0.00390625;
      if (v53 <= 1073741820.0)
      {
        v55 = vcvtpd_s64_f64(v53);
        if (v53 >= -1073741820.0)
          v54 = v55;
        else
          v54 = -1073741823;
      }
      else
      {
        v54 = 0x3FFFFFFF;
      }
      *(_DWORD *)(a1 + 8) = v54 - v50;
      v56 = v45 + v52;
      v57 = v45 + 0.00390625;
      if (v57 <= 1073741820.0)
      {
        v59 = vcvtmd_s64_f64(v57);
        if (v57 >= -1073741820.0)
          v58 = v59;
        else
          v58 = -1073741823;
      }
      else
      {
        v58 = 0x3FFFFFFF;
      }
      v60 = -v23;
      *(_DWORD *)(a1 + 4) = v58;
      v61 = v56 + -0.00390625;
      if (v56 + -0.00390625 <= 1073741820.0)
      {
        if (v61 >= -1073741820.0)
          v62 = vcvtpd_s64_f64(v61);
        else
          v62 = -1073741823;
      }
      else
      {
        v62 = 0x3FFFFFFF;
      }
      *(_DWORD *)(a1 + 12) = v62 - v58;
      *a7 = a11;
      a7[1] = v60;
      a7[2] = -v25;
      a7[3] = v24;
      *(double *)&result = v46 - (double)v50;
      v21 = (double)v62 - v47;
      a7[4] = *(double *)&result;
      a7[5] = v21;
      *(_QWORD *)(a1 + 24) = a7;
      *(_QWORD *)(a1 + 48) = 0;
    }
  }
  else
  {
    v21 = a3[6];
    result = vadd_s32(*(int32x2_t *)&v21, *(int32x2_t *)a2);
    *(double *)a1 = *(double *)&result;
    LODWORD(v12) = *((_DWORD *)a3 + 15);
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a3 + 14);
    *(_DWORD *)(a1 + 12) = v12;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_WORD *)(a1 + 40) = 0;
  }
  *(_QWORD *)(a1 + 32) = a8;
  if (a8)
  {
    v63 = *((_DWORD *)a3 + 12);
    v64 = v12 + *((_DWORD *)a3 + 13);
    LODWORD(a11) = *((_DWORD *)a3 + 10);
    LODWORD(v21) = *((_DWORD *)a3 + 11);
    v65 = (double)*(unint64_t *)&v21;
    v66 = a8[1];
    v67 = v66 + a8[3];
    v68 = (double)v64 - v66 * v65;
    v69 = (double)v64 - v67 * v65;
    v70 = (double)*(unint64_t *)&a11;
    v71 = -((double)v63 - *a8 * v70);
    v72 = -((double)v63 - (*a8 + a8[2]) * v70);
    v73 = v68 - v69;
    *a8 = v71;
    a8[1] = v69;
    *(double *)&result = v72 - v71;
    a8[2] = v72 - v71;
    a8[3] = v73;
  }
  return result;
}

void ripc_ReleaseRIPImageData(void *value)
{
  if (RIPShouldCacheImages_predicate != -1)
    dispatch_once(&RIPShouldCacheImages_predicate, &__block_literal_global_12350);
  if (!RIPShouldCacheImages_should_cache)
    goto LABEL_7;
  if (get_cache_predicate != -1)
    dispatch_once(&get_cache_predicate, &__block_literal_global_1410);
  if (cache_release_value(*(cache_t **)(get_cache_image_cache + 64), value))
LABEL_7:
    RIPImageDataRelease((uint64_t)value);
}

void RIPImageDataRelease(uint64_t a1)
{
  if (a1)
  {
    CGSImageDataUnlock(*(uint64_t **)(a1 + 120));
    if (!pthread_mutex_destroy((pthread_mutex_t *)(a1 + 128)))
      pthread_cond_destroy((pthread_cond_t *)(a1 + 192));
    free((void *)a1);
  }
}

void CGSImageDataUnlock(uint64_t *a1)
{
  uint64_t *v2;
  CGDataProvider *v3;
  uint64_t *v4;
  CGColorSpace *v5;

  if (a1)
  {
    CGSImageDataHandleRelease(a1[9]);
    v2 = (uint64_t *)a1[14];
    if (v2)
      CGAccessSessionRelease(v2);
    v3 = (CGDataProvider *)a1[16];
    if (v3)
      CGDataProviderRelease(v3);
    v4 = (uint64_t *)a1[15];
    if (v4)
    {
      CGImageBlockSetRelease(*v4);
      free(v4);
    }
    v5 = (CGColorSpace *)a1[13];
    if (v5)
      CGColorSpaceRelease(v5);
    free(a1);
  }
}

void CGSImageDataHandleRelease(uint64_t a1)
{
  malloc_zone_t *v2;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 8))
      v2 = malloc_default_purgeable_zone();
    else
      v2 = malloc_default_zone();
    malloc_zone_free(v2, *(void **)(a1 + 16));
    free((void *)a1);
  }
}

_BYTE *create_alternate_image(uint64_t a1, int a2)
{
  CGColorSpaceRef ColorSpace;
  unsigned int v5;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CGColorSpaceRef v11;
  uint64_t v12;
  CGColorSpaceRef v13;
  CGColorSpace *v14;
  const unsigned __int8 *v15;
  size_t v16;
  CGColorRenderingIntent RenderingIntent;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CGColorSpaceRef v22;
  uint64_t v23;
  CGColorSpaceRef v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CGColorSpaceRef v28;
  CGColorSpaceRef v29;
  CGColorSpace *Indexed;
  CGImageRef CopyWithColorSpace;
  CGColorSpaceRef v32;
  CGColorSpaceRef v34;
  CGColorSpace *v35;
  CGImage *v36;
  CGColorSpace *v37;
  size_t v38;
  CGColorSpaceRef v39;
  CGColorSpace *v40;
  CGColorSpaceRef v41;
  CGColorSpace *v42;
  CGColorSpaceRef v43;
  CGColorSpace *v44;
  CGColorSpaceRef v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  CGColorSpaceRef v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  CGColorSpaceRef v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  CGColorSpaceRef v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  CGColorSpaceRef v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  CGColorSpaceRef v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  CGColorSpaceRef v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  ColorSpace = CGImageGetColorSpace((CGImageRef)a1);
  if (!a2)
  {
    if (ColorSpace)
    {
      if (!*(_DWORD *)(*((_QWORD *)ColorSpace + 3) + 24) && a1 != 0)
      {
        v7 = 0;
        switch(*(_QWORD *)(a1 + 56))
        {
          case 1:
            if (!image_can_be_converted_to_indexed(a1))
              return 0;
            if (*(_QWORD *)(a1 + 56) != 1)
              _CGHandleAssert("CGImageCreate1BitIndexed", 196, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageCreateIndexed.c", "CGImageGetBitsPerComponent(image) == 1", "bpc %lu", v8, v9, v10, *(_QWORD *)(a1 + 56));
            v11 = CGImageGetColorSpace((CGImageRef)a1);
            if (!v11)
              return 0;
            v12 = *(_QWORD *)(*((_QWORD *)v11 + 3) + 40);
            if (v12 == 4)
            {
              v34 = CGImageGetColorSpace((CGImageRef)a1);
              if (!v34 || *(_QWORD *)(*((_QWORD *)v34 + 3) + 40) != 4)
              {
                v55 = CGImageGetColorSpace((CGImageRef)a1);
                if (v55)
                  v59 = *(_QWORD *)(*((_QWORD *)v55 + 3) + 40);
                else
                  LOBYTE(v59) = 0;
                _CGHandleAssert("create_1_bit_4_component_indexed_image", 159, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageCreateIndexed.c", "CGColorSpaceGetNumberOfComponents(CGImageGetColorSpace(image)) == 4", "ColorSpace color components: %zu", v56, v57, v58, v59);
              }
              v35 = CGImageGetColorSpace((CGImageRef)a1);
              Indexed = CGColorSpaceCreateIndexed(v35, 0xFuLL, create_1_bit_4_component_indexed_image_index_table);
              v36 = (CGImage *)a1;
              v37 = Indexed;
              v38 = 4;
              goto LABEL_62;
            }
            if (v12 == 3)
            {
              v39 = CGImageGetColorSpace((CGImageRef)a1);
              if (!v39 || *(_QWORD *)(*((_QWORD *)v39 + 3) + 40) != 3)
              {
                v60 = CGImageGetColorSpace((CGImageRef)a1);
                if (v60)
                  v64 = *(_QWORD *)(*((_QWORD *)v60 + 3) + 40);
                else
                  LOBYTE(v64) = 0;
                _CGHandleAssert("create_1_bit_3_component_indexed_image", 133, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageCreateIndexed.c", "CGColorSpaceGetNumberOfComponents(CGImageGetColorSpace(image)) == 3", "ColorSpace color components:%zu", v61, v62, v63, v64);
              }
              v40 = CGImageGetColorSpace((CGImageRef)a1);
              Indexed = CGColorSpaceCreateIndexed(v40, 7uLL, create_1_bit_3_component_indexed_image_index_table);
              v36 = (CGImage *)a1;
              v37 = Indexed;
              v38 = 3;
              goto LABEL_62;
            }
            if (v12 != 1)
              return 0;
            v13 = CGImageGetColorSpace((CGImageRef)a1);
            if (!v13 || *(_QWORD *)(*((_QWORD *)v13 + 3) + 40) != 1)
            {
              v50 = CGImageGetColorSpace((CGImageRef)a1);
              if (v50)
                v54 = *(_QWORD *)(*((_QWORD *)v50 + 3) + 40);
              else
                LOBYTE(v54) = 0;
              _CGHandleAssert("create_1_bit_1_component_indexed_image", 116, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageCreateIndexed.c", "CGColorSpaceGetNumberOfComponents(CGImageGetColorSpace(image)) == 1", "ColorSpace color components: %zu", v51, v52, v53, v54);
            }
            v14 = CGImageGetColorSpace((CGImageRef)a1);
            v15 = (const unsigned __int8 *)&expand_1_to_8bpc_table;
            v16 = 1;
            goto LABEL_43;
          case 2:
            if (!image_can_be_converted_to_indexed(a1))
              return 0;
            if (*(_QWORD *)(a1 + 56) != 2)
              _CGHandleAssert("CGImageCreate2BitIndexed", 363, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageCreateIndexed.c", "CGImageGetBitsPerComponent(image) == 2", "bpc %zu", v19, v20, v21, *(_QWORD *)(a1 + 56));
            v22 = CGImageGetColorSpace((CGImageRef)a1);
            if (!v22)
              return 0;
            v23 = *(_QWORD *)(*((_QWORD *)v22 + 3) + 40);
            switch(v23)
            {
              case 4:
                v41 = CGImageGetColorSpace((CGImageRef)a1);
                if (!v41 || *(_QWORD *)(*((_QWORD *)v41 + 3) + 40) != 4)
                {
                  v65 = CGImageGetColorSpace((CGImageRef)a1);
                  if (v65)
                    v69 = *(_QWORD *)(*((_QWORD *)v65 + 3) + 40);
                  else
                    LOBYTE(v69) = 0;
                  _CGHandleAssert("create_2_bit_4_component_indexed_image", 275, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageCreateIndexed.c", "CGColorSpaceGetNumberOfComponents(CGImageGetColorSpace(image)) == 4", "colorspace components %zu", v66, v67, v68, v69);
                }
                v42 = CGImageGetColorSpace((CGImageRef)a1);
                Indexed = CGColorSpaceCreateIndexed(v42, 0xFFuLL, create_2_bit_4_component_indexed_image_index_table);
                v36 = (CGImage *)a1;
                v37 = Indexed;
                v38 = 8;
                break;
              case 3:
                v43 = CGImageGetColorSpace((CGImageRef)a1);
                if (!v43 || *(_QWORD *)(*((_QWORD *)v43 + 3) + 40) != 3)
                {
                  v70 = CGImageGetColorSpace((CGImageRef)a1);
                  if (v70)
                    v74 = *(_QWORD *)(*((_QWORD *)v70 + 3) + 40);
                  else
                    LOBYTE(v74) = 0;
                  _CGHandleAssert("create_2_bit_3_component_indexed_image", 239, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageCreateIndexed.c", "CGColorSpaceGetNumberOfComponents(CGImageGetColorSpace(image)) == 3", "colorspace components %zu", v71, v72, v73, v74);
                }
                v44 = CGImageGetColorSpace((CGImageRef)a1);
                Indexed = CGColorSpaceCreateIndexed(v44, 0x3FuLL, create_2_bit_3_component_indexed_image_index_table);
                v36 = (CGImage *)a1;
                v37 = Indexed;
                v38 = 6;
                break;
              case 1:
                v24 = CGImageGetColorSpace((CGImageRef)a1);
                if (!v24 || *(_QWORD *)(*((_QWORD *)v24 + 3) + 40) != 1)
                {
                  v75 = CGImageGetColorSpace((CGImageRef)a1);
                  if (v75)
                    v79 = *(_QWORD *)(*((_QWORD *)v75 + 3) + 40);
                  else
                    LOBYTE(v79) = 0;
                  _CGHandleAssert("create_2_bit_1_component_indexed_image", 222, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageCreateIndexed.c", "CGColorSpaceGetNumberOfComponents(CGImageGetColorSpace(image)) == 1", "colorspace components %zu", v76, v77, v78, v79);
                }
                v14 = CGImageGetColorSpace((CGImageRef)a1);
                v15 = (const unsigned __int8 *)&expand_2_to_8bpc_table;
                v16 = 3;
LABEL_43:
                Indexed = CGColorSpaceCreateIndexed(v14, v16, v15);
                CopyWithColorSpace = CGImageCreateCopyWithColorSpace((CGImageRef)a1, Indexed);
LABEL_63:
                v7 = CopyWithColorSpace;
                CGColorSpaceRelease(Indexed);
                if (v7)
                  goto LABEL_26;
                return v7;
              default:
                return 0;
            }
LABEL_62:
            CopyWithColorSpace = copy_image_with_color_space_and_one_component(v36, v37, v38);
            goto LABEL_63;
          case 4:
            if (!image_can_be_converted_to_indexed(a1))
              return 0;
            if (*(_QWORD *)(a1 + 56) != 4)
              _CGHandleAssert("CGImageCreate4BitIndexed", 409, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageCreateIndexed.c", "CGImageGetBitsPerComponent(image) == 4", "bpc %lu", v25, v26, v27, *(_QWORD *)(a1 + 56));
            v28 = CGImageGetColorSpace((CGImageRef)a1);
            if (!v28 || *(_QWORD *)(*((_QWORD *)v28 + 3) + 40) != 1)
              return 0;
            v29 = CGImageGetColorSpace((CGImageRef)a1);
            if (!v29 || *(_QWORD *)(*((_QWORD *)v29 + 3) + 40) != 1)
            {
              v45 = CGImageGetColorSpace((CGImageRef)a1);
              if (v45)
                v49 = *(_QWORD *)(*((_QWORD *)v45 + 3) + 40);
              else
                LOBYTE(v49) = 0;
              _CGHandleAssert("create_4_bit_1_component_indexed_image", 389, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageCreateIndexed.c", "CGColorSpaceGetNumberOfComponents(CGImageGetColorSpace(image)) == 1", "colorspace components %zu", v46, v47, v48, v49);
            }
            v14 = CGImageGetColorSpace((CGImageRef)a1);
            v15 = (const unsigned __int8 *)&expand_4_to_8bpc_table;
            v16 = 15;
            goto LABEL_43;
          case 8:
            v32 = CGImageGetColorSpace((CGImageRef)a1);
            v7 = 0;
            if (CGColorSpaceGetType(v32) != 8 || !v32)
              return v7;
            if (*(_QWORD *)(*((_QWORD *)v32 + 3) + 40) != 1)
              return 0;
            v18 = CGImageCreate8BitIndexed((CGImage *)a1);
            goto LABEL_25;
          default:
            return v7;
        }
      }
    }
    return 0;
  }
  v5 = CGColorSpaceGetType(ColorSpace) - 7;
  if (a1)
  {
    if ((*(_BYTE *)(a1 + 39) & 8) != 0 || v5 < 3)
      goto LABEL_22;
    return 0;
  }
  if (v5 > 2)
    return 0;
LABEL_22:
  RenderingIntent = CGImageGetRenderingIntent((CGImageRef)a1);
  if (get_flattening_options_predicate != -1)
    dispatch_once(&get_flattening_options_predicate, &__block_literal_global_12714);
  v18 = CGColorTransformConvertImage((_DWORD *)a1, RenderingIntent, (CFDictionaryRef)get_flattening_options_options);
LABEL_25:
  v7 = v18;
  if (v18)
LABEL_26:
    CGImageSetCachingFlags(v7, 1);
  return v7;
}

CGImageRef CGImageCreateSubsampledImage(uint64_t a1, double a2, double a3)
{
  _QWORD *Mask;
  uint64_t v7;
  _BOOL4 v8;
  const void *v9;
  char v10;
  _BOOL4 v11;
  _QWORD *ImageProvider;
  unint64_t v13;
  uint64_t v16;
  int ComponentType;
  CGColorSpaceRef ColorSpace;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *subsampled_image_provider;
  double *Decode;
  _BOOL8 ShouldInterpolate;
  uint64_t RenderingIntent;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t SubsampledImage;
  CGImageRef v33;
  CGImageRef v34;

  Mask = CGImageGetMask((_QWORD *)a1);
  if (!Mask)
  {
    v8 = 0;
    if (!a1)
      goto LABEL_9;
    goto LABEL_11;
  }
  if (a1)
  {
    if (*(_QWORD *)(a1 + 40) != Mask[5])
    {
      v8 = 1;
      goto LABEL_11;
    }
    v7 = *(_QWORD *)(a1 + 48);
  }
  else
  {
    v9 = 0;
    v7 = Mask[5];
    if (v7)
      return (CGImageRef)v9;
  }
  v8 = v7 != Mask[6];
  if (a1)
  {
LABEL_11:
    v10 = 0;
    v11 = (*(_BYTE *)(a1 + 39) & 2) == 0;
    goto LABEL_12;
  }
LABEL_9:
  v10 = 1;
  v11 = 1;
LABEL_12:
  v9 = 0;
  if (!v11)
    return (CGImageRef)v9;
  if (v8)
    return (CGImageRef)v9;
  ImageProvider = CGImageGetImageProvider((_QWORD *)a1);
  v9 = ImageProvider;
  if (!ImageProvider)
    return (CGImageRef)v9;
  if (!*((_BYTE *)ImageProvider + 128) || (v10 & 1) != 0)
    return 0;
  v13 = (unint64_t)fabs(round(a3));
  if (*(_QWORD *)(a1 + 40) <= 2 * (unint64_t)fabs(round(a2)) || *(_QWORD *)(a1 + 48) <= 2 * v13)
    return 0;
  if (block_set_options_predicate != -1)
    dispatch_once(&block_set_options_predicate, &__block_literal_global_294);
  v16 = CGImageProviderCopyImageBlockSetWithOptions((uint64_t)v9, block_set_options_options_singleton);
  if (!v16)
  {
    v16 = CGImageProviderCopyImageBlockSetWithOptions((uint64_t)v9, 0);
    if (!v16)
      return 0;
  }
  ComponentType = CGImageGetComponentType(a1);
  ColorSpace = CGImageGetColorSpace((CGImageRef)a1);
  subsampled_image_provider = (const void *)create_subsampled_image_provider(v16, ComponentType, ColorSpace, (uint64_t)v9, v19, v20, v21, v22);
  Decode = (double *)CGImageGetDecode((CGImageRef)a1);
  ShouldInterpolate = CGImageGetShouldInterpolate((CGImageRef)a1);
  RenderingIntent = CGImageGetRenderingIntent((CGImageRef)a1);
  v9 = (const void *)CGImageCreateWithImageProvider((uint64_t)subsampled_image_provider, Decode, ShouldInterpolate, RenderingIntent, v27, v28, v29, v30);
  if (subsampled_image_provider)
    CFRelease(subsampled_image_provider);
  if (!v9)
  {
    CGImageBlockSetRelease(v16);
    return (CGImageRef)v9;
  }
  if (*(_QWORD *)(a1 + 176))
  {
    v31 = CGImageGetMask((_QWORD *)a1);
    SubsampledImage = CGImageCreateSubsampledImage(v31, a2, a3);
    if (SubsampledImage)
    {
      v33 = CGImageCreateWithMaskAndMatte((uint64_t)v9, SubsampledImage, 0);
      if (v33)
      {
        v34 = v33;
        CFRelease(v9);
        return v34;
      }
      return (CGImageRef)v9;
    }
    CFRelease(v9);
    return 0;
  }
  return (CGImageRef)v9;
}

uint64_t provider_for_destination_bytes_per_row_count(uint64_t a1)
{
  return *(_QWORD *)(a1 + 664);
}

uint64_t cache_unlock()
{
  if (get_cache_predicate != -1)
    dispatch_once(&get_cache_predicate, &__block_literal_global_1410);
  return pthread_mutex_unlock((pthread_mutex_t *)get_cache_image_cache);
}

uint64_t cache_lock()
{
  if (get_cache_predicate != -1)
    dispatch_once(&get_cache_predicate, &__block_literal_global_1410);
  return pthread_mutex_lock((pthread_mutex_t *)get_cache_image_cache);
}

void resample_filter_linear(uint64_t a1, unsigned int a2, int a3, double *a4, unsigned int a5, double a6, double a7)
{
  int v7;
  double v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  int v21;
  uint64_t v22;
  size_t v23;
  unsigned int v24;
  double v25;
  BOOL v26;
  double v27;
  double v28;
  int v29;
  double v31;
  uint64_t v32;
  double v33;
  unsigned int v34;
  unsigned int v35;
  double v36;
  double *v37;
  BOOL v38;
  uint64_t v39;
  int v40;
  __int16 *v41;
  _WORD *v42;
  double v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int __pattern4;

  v7 = a3;
  if (a7 == 0.0 || (v11 = fabs(a7), v11 >= INFINITY) && v11 <= INFINITY)
  {
    if (a5 >= a2)
      LODWORD(v12) = a2;
    else
      LODWORD(v12) = a5;
    if (v12 >= 0x4000)
      v12 = 0x4000;
    else
      v12 = v12;
    if (a7 == 0.0)
      v13 = v12;
    else
      v13 = 1;
    if (0x4000 % v13 >= a2)
      v14 = a2;
    else
      v14 = 0x4000 % v13;
    if (v13 >= v14)
      v15 = (v13 - v14) >> 1;
    else
      v15 = 0;
    __pattern4 = (0x4000 / v13) | ((0x4000 / v13) << 16);
    v45 = __pattern4 + 65537;
    if (a3)
    {
      v44 = 2 * (a2 - v13);
      v16 = 4 * a2 + 8;
      do
      {
        *(_DWORD *)a1 = 0;
        *(_DWORD *)(a1 + 4) = v13;
        v17 = a1 + 8;
        memset_pattern4((void *)(a1 + 8), &__pattern4, 2 * v13);
        if (a2 > v13)
          bzero((void *)(v17 + 2 * v13), v44);
        if (v14)
          memset_pattern4((void *)(v17 + 2 * v15), &v45, 2 * v14);
        a1 += v16;
        --v7;
      }
      while (v7);
    }
    return;
  }
  v18 = 1.0 / a7;
  v19 = 1.0 / a7 * 0.5;
  if (a7 <= 1.0)
  {
    if (!a3)
      return;
    v31 = v19 + a6;
    v32 = 2 * a2 + 8;
    while (1)
    {
      v33 = (floor(v31 - v19) - (v31 - v19) + 1.0) * a7;
      v34 = vcvtmd_s64_f64(v31 - v19);
      if (a2)
      {
        if (v33 <= 1.0)
          break;
      }
      if (a2 && v33 > 1.0)
      {
        v35 = 0;
        v36 = 1.0;
        v37 = a4;
        goto LABEL_56;
      }
      v40 = 0;
      v35 = 0;
      *(_DWORD *)a1 = v34;
      *(_DWORD *)(a1 + 4) = 0;
      v42 = (_WORD *)(a1 + 8);
      v41 = (__int16 *)(a1 + 8);
LABEL_62:
      resample_kernel_normalize(v41, v35, 0x4000 - v40);
LABEL_63:
      if ((int)(a2 - v35) >= 1)
        bzero(v42, 2 * (~v35 + a2) + 2);
      v31 = v18 + v31;
      a1 += v32;
      if (!--v7)
        return;
    }
    v35 = 0;
    v36 = 1.0;
    v37 = a4;
    do
    {
      *v37++ = v33;
      v36 = v36 - v33;
      v38 = ++v35 >= a2 || v36 < a7;
      v33 = a7;
    }
    while (!v38);
    if (v35 < a2 && v36 < a7)
    {
LABEL_56:
      *v37 = v36;
      ++v35;
    }
    v39 = 0;
    v40 = 0;
    *(_DWORD *)a1 = v34;
    *(_DWORD *)(a1 + 4) = v35;
    v41 = (__int16 *)(a1 + 8);
    v42 = (_WORD *)(a1 + 8);
    do
    {
      v43 = a4[v39] * 16384.0 + 0.5;
      *v42++ = (int)v43;
      v40 += (int)v43;
      ++v39;
    }
    while (v35 != (_DWORD)v39);
    if (v40 == 0x4000)
      goto LABEL_63;
    goto LABEL_62;
  }
  if (a3)
  {
    v20 = v19 + a6;
    v21 = a2 - 2;
    v22 = 2 * a2 + 8;
    v23 = 2 * (a2 - 2);
    do
    {
      v24 = vcvtmd_s64_f64(v20);
      v25 = v20 - floor(v20);
      v26 = v25 < 0.5;
      if (v25 >= 0.5)
        v27 = -0.5;
      else
        v27 = 0.5;
      v28 = v25 + v27;
      *(_WORD *)(a1 + 8) = (int)((1.0 - v28) * 16384.0 + 0.5);
      v29 = v26;
      *(_WORD *)(a1 + 10) = (int)(v28 * 16384.0 + 0.5);
      *(_DWORD *)a1 = v24 - v29;
      *(_DWORD *)(a1 + 4) = 2;
      if (v21 >= 1)
        bzero((void *)(a1 + 12), v23);
      v20 = v18 + v20;
      a1 += v22;
      --v7;
    }
    while (v7);
  }
}

uint64_t img_interpolate_stage(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  uint64_t v10;
  signed int v12;
  uint64_t v13;
  char v14;
  int v15;
  char v16;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  double v22;
  int v23;
  signed int v24;
  char v25;
  unsigned int v26;
  double v27;
  double v28;
  double v29;
  int v30;
  signed int v31;
  _DWORD *v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  double v37;
  double v38;
  unsigned int v39;
  size_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  _DWORD *v44;
  void (*v45)(unint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, double, double);
  void (*v46)(unint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, double, double);
  _DWORD *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  int v51;
  char v52;
  char v53;
  int v54;
  uint64_t v55;
  signed int v56;
  int v57;
  uint64_t (*v58)();
  uint64_t (*v59)();
  int v60;
  uint64_t (*v61)();
  BOOL v62;
  char v63;
  void *v64;
  char v65;
  void *v66;
  uint64_t *(*v67)(uint64_t *, uint64_t, unsigned __int8, int, _BYTE **, uint64_t *);
  uint64_t (*v68)(uint64_t, uint64_t, unsigned __int8, int, float **, uint64_t *);
  char v69;
  void *v70;
  char v71;
  void *v72;
  _BOOL4 v73;
  uint64_t *(*v74)(uint64_t *, uint64_t, unsigned __int8, int, _WORD **, uint64_t *);
  char v75;
  int *(*v76)(int *, unsigned int, uint64_t, int, uint64_t, _QWORD *, int *, int);
  int v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  unint64_t v82;
  void *v83;
  char *v84;
  uint64_t v86;
  _BYTE *v88;
  unsigned int v89;
  int v90;
  _QWORD *v91;
  unsigned int v92;
  unsigned int v93;
  _BYTE v94[1024];
  uint64_t v95;

  v10 = a2;
  v95 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_QWORD *)a1 = a2;
  if (*(_QWORD *)(a2 + 8))
    *(_QWORD *)(a1 + 8) = img_interpolate_extent;
  *(_QWORD *)(a1 + 16) = img_interpolate_read;
  *(_QWORD *)(a1 + 24) = img_interpolate_end;
  *(_DWORD *)(a1 + 32) = 2;
  *(_DWORD *)(a1 + 48) = a5;
  *(_DWORD *)(a1 + 52) = a6;
  v12 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 36) = v12;
  v13 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v13;
  if (a4 == 3)
  {
    if (v12 == 1)
      v14 = 4 * (*(_QWORD *)(a3 + 16) == 0);
    else
      v14 = 0;
  }
  else
  {
    v14 = 4;
  }
  v15 = v13;
  if ((_DWORD)v13 == 32)
  {
    v16 = v14 | 2;
  }
  else if (a7 == 5 || (_DWORD)v13 != 16)
  {
    if ((_DWORD)v13 == 16 && a7 == 5)
      v16 = v14 | 8;
    else
      v16 = v14;
  }
  else
  {
    v16 = v14 | 1;
  }
  v18 = *(_DWORD *)(a2 + 48);
  if (!v18)
    return v10;
  v19 = *(unsigned int *)(a2 + 52);
  if (!(_DWORD)v19 || !(_DWORD)a5 || !(_DWORD)a6 || v18 == (_DWORD)a5 && (_DWORD)v19 == (_DWORD)a6)
    return v10;
  if ((v16 & 0xA) != 0)
    v20 = 4;
  else
    v20 = 2;
  if ((v16 & 4) != 0)
    v21 = 0;
  else
    v21 = -1;
  v22 = (double)((__PAIR64__(a6, v16 & 4) - 1) >> 32) / (double)((__PAIR64__(v19, v16 & 4) - 1) >> 32);
  v23 = *(_DWORD *)(a2 + 52);
  if (v22 != 0.0)
  {
    v24 = 4;
    if (v22 == INFINITY)
      goto LABEL_33;
    if (v22 <= 1.0)
      v28 = (double)((__PAIR64__(a6, v16 & 4) - 1) >> 32) / (double)((__PAIR64__(v19, v16 & 4) - 1) >> 32);
    else
      v28 = 1.0;
    v29 = 1.0 / v28 + 1.0;
    if ((v16 & 4) == 0)
      v29 = 4.0 / v28;
    v23 = vcvtpd_s64_f64(v29);
    if (v23 >= 0x10000)
      return v10;
  }
  v24 = (v23 + 3) & 0xFFFFFFFC;
  if (v24 < 1)
    return v10;
LABEL_33:
  if ((v16 & 0xA) != 0)
    v25 = 2;
  else
    v25 = 1;
  if (v18 == (_DWORD)v19 && (_DWORD)a5 == (_DWORD)a6)
  {
    v90 = a8;
    v92 = 0;
    v26 = 0;
    v27 = (double)((__PAIR64__(a6, v16 & 4) - 1) >> 32) / (double)((__PAIR64__(v19, v16 & 4) - 1) >> 32);
    goto LABEL_50;
  }
  v27 = (double)(v21 + a5) / (double)(v18 + v21);
  v30 = *(_DWORD *)(a2 + 48);
  if (v27 == 0.0)
    goto LABEL_48;
  v31 = 4;
  if (v27 != INFINITY)
  {
    if (v27 <= 1.0)
      v37 = v27;
    else
      v37 = 1.0;
    v38 = 1.0 / v37 + 1.0;
    if ((v16 & 4) == 0)
      v38 = 4.0 / v37;
    v30 = vcvtpd_s64_f64(v38);
    if (v30 >= 0x10000)
      return v10;
LABEL_48:
    v31 = (v30 + 3) & 0xFFFFFFFC;
    if (v31 < 1)
      return v10;
  }
  v90 = a8;
  v92 = v31;
  v26 = ((v31 << v25) + 8) * a5;
LABEL_50:
  v89 = v26;
  v86 = (((v24 << v25) + 8) * a6);
  v93 = v24;
  v32 = malloc_type_calloc(1uLL, v86 + v26 + 160, 0x64A29F66uLL);
  v33 = v93;
  if (v32)
  {
    v34 = v20;
    v32[19] = a6;
    v32[20] = v20;
    if ((v16 & 9) != 0)
      v35 = 2;
    else
      v35 = 1;
    v36 = 4;
    v32[18] = a5;
    if ((v16 & 2) != 0)
      v35 = 4;
    v32[24] = v35;
    v32[25] = v18;
    v32[26] = v19;
    if ((v16 & 2) == 0)
    {
      if ((v16 & 8) != 0)
      {
        v36 = 5;
      }
      else if ((v16 & 1) != 0)
      {
        v36 = 2;
      }
      else
      {
        v36 = 1;
      }
    }
    v32[21] = v36;
    v32[29] = v90;
    if ((int)v93 <= (int)v92)
      v39 = v92;
    else
      v39 = v93;
    v40 = 8 * v39 + 32;
    v91 = v32;
    if (v40 < 0x401)
    {
      v42 = v94;
      v43 = v19;
LABEL_77:
      v44 = (_DWORD *)(((unint64_t)v32 + 143) & 0xFFFFFFFFFFFFFFF0);
      *(_QWORD *)v32 = v44;
      v32[23] = v33;
      v88 = v42;
      if (v34 == 4)
      {
        v45 = (void (*)(unint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, double, double))resample_filter_linear_float;
        if ((v16 & 4) == 0)
          v45 = (void (*)(unint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, double, double))resample_filter_float;
        v45(((unint64_t)v32 + 143) & 0xFFFFFFFFFFFFFFF0, v33, a6, v42, v43, 0.0, v22);
        resample_filter_float_normalize(v44, v93, a6, v19);
      }
      else
      {
        v46 = (void (*)(unint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, double, double))resample_filter_linear;
        if ((v16 & 4) == 0)
          v46 = (void (*)(unint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, double, double))resample_filter;
        v46(((unint64_t)v32 + 143) & 0xFFFFFFFFFFFFFFF0, v33, a6, v42, v43, 0.0, v22);
        resample_filter_normalize(v44, v93, a6, v19);
      }
      if (v89)
      {
        v47 = (_DWORD *)((char *)v44 + v86);
        v91[1] = v47;
        *((_DWORD *)v91 + 22) = v92;
        v48 = *((unsigned int *)v91 + 25);
        if (*((_DWORD *)v91 + 20) == 4)
        {
          v49 = resample_filter_linear_float;
          if ((v16 & 4) == 0)
            v49 = resample_filter_float;
          ((void (*)(_DWORD *, _QWORD, uint64_t, _BYTE *, uint64_t, double, double))v49)(v47, v92, a5, v88, v48, 0.0, v27);
          resample_filter_float_normalize(v47, v92, a5, v18);
        }
        else
        {
          v50 = resample_filter_linear;
          if ((v16 & 4) == 0)
            v50 = resample_filter;
          ((void (*)(_DWORD *, _QWORD, uint64_t, _BYTE *, uint64_t, double, double))v50)(v47, v92, a5, v88, v48, 0.0, v27);
          resample_filter_normalize(v47, v92, a5, v18);
        }
      }
      else
      {
        v91[1] = v44;
        *((_DWORD *)v91 + 22) = v93;
      }
      if (v88 != v94)
        free(v88);
      switch(*(_DWORD *)(a1 + 44))
      {
        case 1:
          goto LABEL_97;
        case 2:
          goto LABEL_100;
        case 3:
          *(_DWORD *)(a1 + 44) = 1;
LABEL_97:
          v51 = 0;
          v52 = 0;
          v53 = 0;
          ++v12;
          *(_DWORD *)(a1 + 56) = v15 / 8 * v12 * *(_DWORD *)(v10 + 48);
          v54 = 2;
          break;
        case 4:
          *(_DWORD *)(a1 + 44) = 2;
LABEL_100:
          v51 = 0;
          v52 = 0;
          ++v12;
          *(_DWORD *)(a1 + 56) = v15 / 8 * v12 * *(_DWORD *)(v10 + 48);
          v53 = 1;
          v54 = 1;
          break;
        case 8:
          goto LABEL_103;
        case 9:
          *(_DWORD *)(a1 + 44) = 8;
LABEL_103:
          v52 = 0;
          v53 = 0;
          *(_DWORD *)(a1 + 56) = v15 / 8 * v12++ * *(_DWORD *)(v10 + 48);
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(v10 + 48) * (v15 / 8);
          v54 = 3;
          v51 = 1;
          break;
        default:
          v51 = 0;
          v53 = 0;
          v54 = 0;
          *(_DWORD *)(a1 + 56) = v15 / 8 * v12 * *(_DWORD *)(v10 + 48);
          v52 = 1;
          break;
      }
      v55 = (uint64_t)v91;
      v56 = v12;
      if ((unint64_t)(v12 - 256) < 0xFFFFFFFFFFFFFF01)
        goto LABEL_224;
      v57 = *((_DWORD *)v91 + 24);
      if (v57 != 4)
      {
        if (v57 != 2)
        {
          if (v57 != 1 || !v12)
            goto LABEL_224;
          if (v51)
          {
            if (v12 == 1)
              goto LABEL_224;
            if (v12 == 4)
            {
              v91[2] = resample_byte_v_3cpp_ap;
              *((_DWORD *)v91 + 28) = 65539;
              v58 = (uint64_t (*)())resample_byte_h_3cpp_ap;
            }
            else
            {
              v91[2] = resample_byte_v_Ncpp_ap;
              *((_WORD *)v91 + 56) = v12 - 1;
              *((_WORD *)v91 + 57) = 1;
              v58 = (uint64_t (*)())resample_byte_h_Ncpp_ap;
              if (v12 == 5)
                v58 = (uint64_t (*)())resample_byte_h_4cpp_ap;
              if (v12 == 2)
                v58 = (uint64_t (*)())resample_byte_h_1cpp_ap;
            }
LABEL_167:
            v91[3] = v58;
            if (CGPreferencesCheck<CGResamplingAllowTemplateMethod>(void)::onceToken != -1)
            {
              dispatch_once(&CGPreferencesCheck<CGResamplingAllowTemplateMethod>(void)::onceToken, &__block_literal_global_2_12434);
              v55 = (uint64_t)v91;
            }
            if (!CGPreferencesCheck<CGResamplingAllowTemplateMethod>(void)::result)
            {
              if ((v51 & 1) != 0)
                goto LABEL_216;
              if ((unint64_t)*(unsigned int *)(v55 + 72) * v12 < 0x10)
                goto LABEL_204;
              if (v12 == 1)
                v71 = 1;
              else
                v71 = v52;
              if ((v71 & 1) != 0)
              {
                v72 = resample_byte_v_Ncpp_armv7;
              }
              else
              {
                v75 = v53 ^ 1;
                if (v12 != 4)
                  v75 = 1;
                if ((v75 & 1) != 0)
                  goto LABEL_204;
                v72 = resample_byte_v_3cpp_af_armv7;
              }
              *(_QWORD *)(v55 + 16) = v72;
              *(_BYTE *)(v55 + 120) = 1;
LABEL_204:
              if (*(_DWORD *)(v55 + 88) < 4u)
                goto LABEL_216;
              if (v12 == 3)
              {
                v76 = resample_byte_h_3cpp_armv7;
              }
              else
              {
                if (v12 != 4)
                  goto LABEL_216;
                v76 = resample_byte_h_4cpp_armv7;
              }
              *(_QWORD *)(v55 + 24) = v76;
              *(_BYTE *)(v55 + 120) = 1;
LABEL_216:
              v77 = *(_DWORD *)(v55 + 72);
              v78 = *(int *)(v55 + 92);
              v79 = v55;
              v80 = (v78 + 3) & 0xFFFFFFFFFFFFFFFCLL;
              if (v80 - v78 >= 2)
                v81 = (v78 + 3) & 0xFFFFFFFC;
              else
                v81 = v80 | 2;
              v82 = (4 * v56 * (uint64_t)v77 + 15) & 0xFFFFFFFFFFFFFFF0;
              v83 = *(void **)(v79 + 56);
              if (v83)
                v84 = (char *)malloc_type_realloc(v83, (v82 | 8) * v81, 0x7492344AuLL);
              else
                v84 = (char *)malloc_type_malloc((v82 | 8) * v81, 0x705560E0uLL);
              *(_QWORD *)(v79 + 56) = v84;
              v55 = v79;
              if (v84)
              {
                *(_QWORD *)(v79 + 64) = &v84[v82 * v81];
                *(_DWORD *)(v79 + 52) = v82;
                *(_DWORD *)(v79 + 40) = v81;
                *(_QWORD *)(v79 + 32) = 0;
                *(_QWORD *)(v79 + 44) = 0;
                *(_DWORD *)(v79 + 108) = v56 | (v54 << 8);
                *(_QWORD *)(a1 + 88) = v79;
                *(_QWORD *)(a1 + 96) = a7;
                return a1;
              }
LABEL_224:
              resample_destroy((_QWORD *)v55);
              return 0;
            }
            goto LABEL_214;
          }
          v63 = v52 ^ 1;
          if (v12 == 1)
            v63 = 0;
          if ((v63 & 1) == 0)
          {
            v64 = resample_byte_v_Ncpp;
            goto LABEL_130;
          }
          if (v54 == 2)
          {
            if (v12 == 4)
            {
              v67 = resample_byte_v_3cpp_al;
              goto LABEL_166;
            }
            v64 = resample_byte_v_Ncpp_al;
          }
          else
          {
            if (v54 != 1)
              goto LABEL_224;
            if (v12 == 4)
            {
              v67 = resample_byte_v_3cpp_af;
LABEL_166:
              v91[2] = v67;
              *((_DWORD *)v91 + 28) = (unsigned __int16)v12;
              v58 = (uint64_t (*)())resample_byte_h_4cpp;
              goto LABEL_167;
            }
            v64 = resample_byte_v_Ncpp_af;
          }
LABEL_130:
          v91[2] = v64;
          *((_DWORD *)v91 + 28) = (unsigned __int16)v12;
          if (v12 > 4)
            v58 = (uint64_t (*)())resample_byte_h_Ncpp;
          else
            v58 = off_1E1632950[v12 - 1];
          goto LABEL_167;
        }
        v60 = *((_DWORD *)v91 + 21);
        if (v60 == 5)
        {
          v62 = resample_float16_select((uint64_t)v91, v12, v54);
          goto LABEL_215;
        }
        if (v60 != 2)
          goto LABEL_216;
        if (!v12)
          goto LABEL_224;
        if (v51)
        {
          if (v12 == 1)
            goto LABEL_224;
          if (v12 == 4)
          {
            v91[2] = resample_word_v_3cpp_ap;
            *((_DWORD *)v91 + 28) = 131078;
            v61 = (uint64_t (*)())resample_word_h_3cpp_ap;
          }
          else
          {
            v91[2] = resample_word_v_Ncpp_ap;
            *((_WORD *)v91 + 56) = 2 * v12 - 2;
            *((_WORD *)v91 + 57) = 2;
            v61 = (uint64_t (*)())resample_word_h_Ncpp_ap;
            if (v12 == 5)
              v61 = (uint64_t (*)())resample_word_h_4cpp_ap;
            if (v12 == 2)
              v61 = (uint64_t (*)())resample_word_h_1cpp_ap;
          }
LABEL_211:
          v91[3] = v61;
          if (CGPreferencesCheck<CGResamplingAllowTemplateMethod>(void)::onceToken != -1)
          {
            dispatch_once(&CGPreferencesCheck<CGResamplingAllowTemplateMethod>(void)::onceToken, &__block_literal_global_2_12434);
            v55 = (uint64_t)v91;
          }
          if (!CGPreferencesCheck<CGResamplingAllowTemplateMethod>(void)::result)
            goto LABEL_216;
LABEL_214:
          v62 = resample_select_template(v55, v12, v54);
LABEL_215:
          v55 = (uint64_t)v91;
          if (!v62)
            goto LABEL_224;
          goto LABEL_216;
        }
        v69 = v52 ^ 1;
        if (v12 == 1)
          v69 = 0;
        if ((v69 & 1) == 0)
        {
          v70 = resample_word_v_Ncpp;
          goto LABEL_160;
        }
        if (v54 == 2)
        {
          if (v12 == 4)
          {
            v74 = resample_word_v_3cpp_al;
            goto LABEL_210;
          }
          v70 = resample_word_v_Ncpp_al;
        }
        else
        {
          if (v54 != 1)
            goto LABEL_224;
          if (v12 == 4)
          {
            v74 = resample_word_v_3cpp_af;
LABEL_210:
            v91[2] = v74;
            *((_WORD *)v91 + 56) = 8;
            *((_WORD *)v91 + 57) = 0;
            v61 = (uint64_t (*)())resample_word_h_4cpp;
            goto LABEL_211;
          }
          v70 = resample_word_v_Ncpp_af;
        }
LABEL_160:
        v91[2] = v70;
        *((_WORD *)v91 + 56) = 2 * v12;
        *((_WORD *)v91 + 57) = 0;
        if (v12 > 4)
          v61 = (uint64_t (*)())resample_word_h_Ncpp;
        else
          v61 = off_1E165FF78[v12 - 1];
        goto LABEL_211;
      }
      if (!v12)
        goto LABEL_224;
      if (v51)
      {
        if (v12 == 1)
          goto LABEL_224;
        if (v12 == 4)
        {
          v91[2] = resample_float_v_3cpp_ap;
          *((_DWORD *)v91 + 28) = 262156;
          v59 = (uint64_t (*)())resample_float_h_3cpp_ap;
        }
        else
        {
          v91[2] = resample_float_v_Ncpp_ap;
          *((_WORD *)v91 + 56) = 4 * v12 - 4;
          *((_WORD *)v91 + 57) = 4;
          v59 = (uint64_t (*)())resample_float_h_Ncpp_ap;
          if (v12 == 5)
            v59 = (uint64_t (*)())resample_float_h_4cpp_ap;
          if (v12 == 2)
            v59 = (uint64_t (*)())resample_float_h_1cpp_ap;
        }
        goto LABEL_180;
      }
      v65 = v52 ^ 1;
      if (v12 == 1)
        v65 = 0;
      if ((v65 & 1) == 0)
      {
        v66 = resample_float_v_Ncpp;
        goto LABEL_136;
      }
      if (v54 == 2)
      {
        if (v12 == 4)
        {
          v68 = resample_float_v_3cpp_al;
          goto LABEL_179;
        }
        v66 = resample_float_v_Ncpp_al;
      }
      else
      {
        if (v54 != 1)
          goto LABEL_224;
        if (v12 == 4)
        {
          v68 = resample_float_v_3cpp_af;
LABEL_179:
          v91[2] = v68;
          *((_WORD *)v91 + 56) = 16;
          *((_WORD *)v91 + 57) = 0;
          v59 = (uint64_t (*)())resample_float_h_4cpp;
          goto LABEL_180;
        }
        v66 = resample_float_v_Ncpp_af;
      }
LABEL_136:
      v91[2] = v66;
      *((_WORD *)v91 + 56) = 4 * v12;
      *((_WORD *)v91 + 57) = 0;
      if (v12 > 4)
        v59 = (uint64_t (*)())resample_float_h_Ncpp;
      else
        v59 = off_1E1645D60[v12 - 1];
LABEL_180:
      v91[3] = v59;
      if (CGPreferencesCheck<CGResamplingAllowTemplateMethod>(void)::onceToken != -1)
      {
        dispatch_once(&CGPreferencesCheck<CGResamplingAllowTemplateMethod>(void)::onceToken, &__block_literal_global_2_12434);
        v55 = (uint64_t)v91;
      }
      if (CGPreferencesCheck<CGResamplingAllowTemplateMethod>(void)::result)
      {
        v73 = resample_select_template(v55, v12, v54);
        v55 = (uint64_t)v91;
        if (!v73)
          goto LABEL_224;
      }
      goto LABEL_216;
    }
    v41 = malloc_type_calloc(1uLL, v40, 0x9B2B0349uLL);
    if (v41)
    {
      v42 = v41;
      v32 = v91;
      v34 = *((_DWORD *)v91 + 20);
      v43 = *((unsigned int *)v91 + 26);
      v33 = v93;
      goto LABEL_77;
    }
    free(v91);
  }
  return v10;
}

void resample_filter_normalize(_DWORD *a1, unsigned int a2, int a3, int a4)
{
  int v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  _DWORD *v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  int v13;
  _WORD *v14;
  unsigned int v15;
  __int16 *v16;
  __int16 v17;
  uint64_t v19;
  void *v20;
  _DWORD *v21;
  int v22;
  int v23;
  int v24;
  __int16 v25;
  _WORD *v26;
  int v27;
  _WORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;

  v5 = a3;
  v6 = a1;
  v7 = 2 * a2 + 8;
  v8 = a3;
  v9 = a1;
  do
  {
    v10 = *v9;
    if ((*v9 & 0x80000000) == 0)
      break;
    v11 = 0;
    --v8;
    v12 = v10;
    v13 = v9[1] + v10;
    *v9 = 0;
    v9[1] = v13;
    v14 = v9 + 2;
    v15 = ~v10;
    v16 = (__int16 *)(v9 + 2);
    do
    {
      v17 = *v16++;
      v11 += v17;
    }
    while (!__CFADD__(v10++, 1));
    *((_WORD *)v9 + v15 + 5) += v11;
    if (v13)
    {
      v19 = -1 * v12;
      do
      {
        v20 = v14 + 1;
        *v14 = v14[v19];
        ++v14;
        --v13;
      }
      while (v13);
    }
    else
    {
      v20 = v9 + 2;
    }
    bzero(v20, 2 * v15 + 2);
    v9 = (_DWORD *)((char *)v9 + v7);
  }
  while (v8);
  v21 = (_DWORD *)((char *)v6 + v7 * (v5 - 1));
  v22 = v5;
  do
  {
    v23 = v21[1];
    v24 = *v21 - a4 + v23;
    if (v24 < 1)
      break;
    v25 = 0;
    --v22;
    v21[1] = a4 - *v21;
    v26 = (_WORD *)v21 + v23 + 3;
    do
    {
      v25 += *v26;
      *v26-- = 0;
      --v24;
    }
    while (v24);
    *v26 += v25;
    v21 = (_DWORD *)((char *)v21 - v7);
  }
  while (v22);
  do
  {
    v27 = v6[1];
    if (v27)
    {
      v28 = v6 + 2;
      v29 = 2 * (v27 - 1) + 8;
      while (!*(_WORD *)((char *)v6 + v29))
      {
        v29 -= 2;
        if (!--v27)
          goto LABEL_33;
      }
      v30 = 0;
      v31 = 8;
      while (!*(_WORD *)((char *)v6 + v31))
      {
        ++v30;
        v31 += 2;
        if (v27 == v30)
        {
          v30 = v27;
          break;
        }
      }
      if (v30)
      {
        v32 = v27 - v30;
        if (v27 == v30)
        {
          v34 = v6 + 2;
        }
        else
        {
          v33 = v30;
          do
          {
            v34 = v28 + 1;
            *v28 = v28[v30];
            ++v33;
            ++v28;
          }
          while (v27 != v33);
        }
        *v6 += v30;
        bzero(v34, 2 * (v30 - 1) + 2);
        v27 = v32;
      }
    }
LABEL_33:
    v6[1] = v27;
    v6 = (_DWORD *)((char *)v6 + v7);
    --v5;
  }
  while (v5);
}

void resample_filter(__int16 *a1, unsigned int a2, int a3, double *a4, unsigned int a5, double a6, double a7)
{
  int v7;
  double v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  double v20;
  __double2 v21;
  float64x2_t v22;
  int v23;
  double v24;
  int v25;
  double v26;
  double v27;
  double v28;
  int v29;
  _BOOL4 v30;
  int v31;
  double sinval;
  int8x16_t v33;
  int8x16_t v34;
  __double2 v35;
  double v36;
  int v37;
  double *v38;
  double v39;
  double v40;
  double *v41;
  int v42;
  _WORD *v43;
  double v44;
  double v45;
  int v46;
  int8x16_t v47;
  uint64_t v48;
  double v49;
  unsigned int v50;
  unsigned int __pattern4;

  v7 = a3;
  if (a7 == 0.0 || (v12 = fabs(a7), v12 >= INFINITY) && v12 <= INFINITY)
  {
    if (a5 >= a2)
      LODWORD(v13) = a2;
    else
      LODWORD(v13) = a5;
    if (v13 >= 0x4000)
      v13 = 0x4000;
    else
      v13 = v13;
    if (a7 == 0.0)
      v14 = v13;
    else
      v14 = 1;
    if (0x4000 % v14 >= a2)
      v15 = a2;
    else
      v15 = 0x4000 % v14;
    if (v14 >= v15)
      v16 = (v14 - v15) >> 1;
    else
      v16 = 0;
    __pattern4 = (0x4000 / v14) | ((0x4000 / v14) << 16);
    v50 = __pattern4 + 65537;
    if (a3)
    {
      v48 = 2 * (a2 - v14);
      v17 = 4 * a2 + 8;
      do
      {
        *(_DWORD *)a1 = 0;
        *((_DWORD *)a1 + 1) = v14;
        v18 = a1 + 4;
        memset_pattern4(a1 + 4, &__pattern4, 2 * v14);
        if (a2 > v14)
          bzero((char *)v18 + 2 * v14, v48);
        if (v15)
          memset_pattern4((char *)v18 + 2 * v16, &v50, 2 * v15);
        a1 = (__int16 *)((char *)a1 + v17);
        --v7;
      }
      while (v7);
    }
  }
  else
  {
    v20 = fmin(a7, 1.0);
    v21 = __sincos_stret(v20 * 1.57079633);
    if (v7)
    {
      v22.f64[0] = NAN;
      v22.f64[1] = NAN;
      v47 = (int8x16_t)vnegq_f64(v22);
      v49 = 1.0 / a7;
      do
      {
        v23 = vcvtmd_s64_f64(a6);
        v24 = v20 * ((double)v23 - a6);
        v25 = (int)((v24 + 2.0) / v20);
        v26 = v24 - (double)v25 * v20;
        v27 = -0.0;
        if (v26 <= -2.0)
          v27 = v20;
        v28 = v26 + v27;
        v29 = (int)((2.0 - (v26 + v27)) / v20);
        v30 = v26 <= -2.0;
        if (v26 + v27 + (double)v29 * v20 < 2.0)
          ++v29;
        if (v29 >= (int)a2)
          v31 = a2;
        else
          v31 = v29;
        if (v31)
        {
          v35 = __sincos_stret(v28 * 1.57079633);
          *(double *)v33.i64 = v35.__cosval;
          sinval = v35.__sinval;
          v36 = 0.0;
          v37 = v31;
          v38 = a4;
          do
          {
            v39 = 1.0;
            if (fabs(v28) >= v20 * 0.5)
              v39 = sinval * sinval * *(double *)v33.i64 / (v28 * v28 * 1.57079633 * 1.57079633);
            *v38++ = v39;
            v36 = v36 + v39;
            v28 = v20 + v28;
            v40 = v21.__sinval * *(double *)v33.i64;
            *(double *)v33.i64 = *(double *)v33.i64 * v21.__cosval - sinval * v21.__sinval;
            sinval = v40 + sinval * v21.__cosval;
            --v37;
          }
          while (v37);
          *(_DWORD *)a1 = v23 - v25 + v30;
          *((_DWORD *)a1 + 1) = v31;
          v41 = a4;
          v42 = v31;
          v43 = a1 + 4;
          v44 = 16384.0 / v36;
          v34.i64[0] = 0.5;
          do
          {
            v45 = *v41++;
            *(double *)v33.i64 = v44 * v45;
            v46 = (int)(v44 * v45 + *(double *)vbslq_s8(v47, v34, v33).i64);
            *v43++ = v46;
            v37 += v46;
            --v42;
          }
          while (v42);
          if (v37 != 0x4000)
            resample_kernel_normalize(a1 + 4, v31, 0x4000 - v37);
        }
        else
        {
          *(_QWORD *)a1 = (v23 - v25 + v30);
          v43 = a1 + 4;
        }
        if ((int)(a2 - v31) >= 1)
          bzero(v43, 2 * (~v31 + a2) + 2);
        a6 = v49 + a6;
        a1 += a2 + 4;
        --v7;
      }
      while (v7);
    }
  }
}

__int16 *resample_kernel_normalize(__int16 *result, int a2, int a3)
{
  int v3;
  int v4;
  __int16 *v5;
  __int16 *v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  _WORD *v11;

  if (a2)
  {
    v3 = 0;
    v4 = 0;
    v5 = result;
    v6 = result;
    do
    {
      v8 = *v6++;
      v7 = v8;
      v9 = v4 < v8;
      if (v4 == v8)
        ++v3;
      if (v9)
      {
        result = v5;
        v4 = v7;
        v3 = 1;
      }
      v5 = v6;
      --a2;
    }
    while (a2);
    if (v3)
    {
      if (a3 / v3)
      {
        v10 = v3;
        v11 = result;
        do
        {
          *v11++ += a3 / v3;
          --v10;
        }
        while (v10);
        a3 %= v3;
      }
      result[v3 >> 1] += a3;
    }
  }
  return result;
}

BOOL resample_select_template(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  if (a1 && (*(_BYTE *)(a1 + 116) & 1) != 0)
  {
    if (a3 == 3)
    {
      if (!a2)
        return a1 != 0;
      --a2;
    }
    if ((unint64_t)(a2 - 6) >= 0xFFFFFFFFFFFFFFFBLL)
    {
      switch(*(_DWORD *)(a1 + 84))
      {
        case 0:
        case 3:
        case 6:
          return a1 != 0;
        case 1:
          v3 = 0;
          goto LABEL_13;
        case 2:
          v3 = 1;
          goto LABEL_13;
        case 4:
          v3 = 3;
          goto LABEL_13;
        case 5:
          v3 = 2;
          goto LABEL_13;
        default:
          v3 = -1;
LABEL_13:
          v4 = (uint64_t)*(&kHorizontalFunctionList + 20 * v3 + 5 * a3 + a2 - 1);
          if (v4)
            *(_QWORD *)(a1 + 24) = v4;
          v5 = (uint64_t)*(&kVerticalFunctionList + 20 * v3 + 5 * a3 + a2 - 1);
          if (v5)
            *(_QWORD *)(a1 + 16) = v5;
          break;
      }
    }
  }
  return a1 != 0;
}

void CGContextSetShouldSubpixelPositionFonts(CGContextRef c, BOOL shouldSubpixelPositionFonts)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGContextRef v8;

  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      CGGStateSetShouldSubpixelPositionFonts(*((_QWORD *)c + 12), shouldSubpixelPositionFonts);
      return;
    }
    v8 = c;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetShouldSubpixelPositionFonts", (uint64_t)v8, v2, v3, v4, v5, v6, v7);
}

double CGGStateGetFontSize(uint64_t a1)
{
  return *(double *)(*(_QWORD *)(a1 + 136) + 16);
}

uint64_t CGGStateGetFont(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8);
}

BOOL CGColorSpaceIsWideGamutRGB(CGColorSpaceRef a1)
{
  if (a1)
    LOBYTE(a1) = *(_BYTE *)(*((_QWORD *)a1 + 3) + 14) != 0;
  return (char)a1;
}

void CGContextSetMiterLimit(CGContextRef c, CGFloat limit)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;

  if (c && *((_DWORD *)c + 4) == 1129601108)
  {
    if (limit >= 1.0)
      v8 = limit;
    else
      v8 = 1.0;
    v9 = *((_QWORD *)c + 12);
    if (*(double *)(*(_QWORD *)(v9 + 128) + 16) != v8)
    {
      maybe_copy_stroke_state(*((_QWORD *)c + 12));
      *(double *)(*(_QWORD *)(v9 + 128) + 16) = v8;
    }
  }
  else
  {
    handle_invalid_context((char)"CGContextSetMiterLimit", (uint64_t)c, v2, v3, v4, v5, v6, v7);
  }
}

void vm_allocator_deallocate(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2)
  {
    if (MEMORY[0x186DC36A8](*MEMORY[0x1E0C83DA0], -*MEMORY[0x1E0C85AD8] & a1, a2))
      CGPostError((uint64_t)"%s: vm_deallocate failed: status %d.", v2, v3, v4, v5, v6, v7, v8, (char)"release_copied_data");
  }
  else
  {
    free((void *)a1);
  }
}

void CGContextSetLineCap(CGContextRef c, CGLineCap cap)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGContextRef v8;

  if (!c)
  {
    v8 = 0;
LABEL_7:
    handle_invalid_context((char)"CGContextSetLineCap", (uint64_t)v8, v2, v3, v4, v5, v6, v7);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v8 = c;
    goto LABEL_7;
  }
  if (cap >= (kCGLineCapSquare|kCGLineCapRound))
    cap = kCGLineCapButt;
  CGGStateSetLineCap(*((_QWORD *)c + 12), cap);
}

void CGGradientRelease(CGGradientRef gradient)
{
  if (gradient)
    CFRelease(gradient);
}

void layerFinalize(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 16);
  if (v1)
    CFRelease(v1);
}

uint64_t copy_family_name()
{
  return FPFontCopyFamilyName();
}

uint64_t CGFontGetVariationAxes(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(result + 16) + 408))(*(_QWORD *)(result + 112));
  return result;
}

uint64_t CGGradientGetLocationCount(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 48);
  return result;
}

float CGColorFunctionGetOutputRange(const void *a1)
{
  CFTypeID v2;
  float output_range_f;
  uint64_t *v4;

  v2 = CFGetTypeID(a1);
  if (CGColorTRCGetTypeID_cglibrarypredicate != -1)
    dispatch_once(&CGColorTRCGetTypeID_cglibrarypredicate, &__block_literal_global_742);
  if (v2 == CGColorTRCGetTypeID_f())
  {
    if (trc_get_output_range_cglibrarypredicate != -1)
      dispatch_once(&trc_get_output_range_cglibrarypredicate, &__block_literal_global_69);
    output_range_f = trc_get_output_range_f(a1);
    if (trc_get_output_range_cglibrarypredicate_72 != -1)
      dispatch_once(&trc_get_output_range_cglibrarypredicate_72, &__block_literal_global_74);
    v4 = &trc_get_output_range_f_71;
LABEL_25:
    ((void (*)(const void *))*v4)(a1);
    return output_range_f;
  }
  if (CGColorMatrixGetTypeID_cglibrarypredicate != -1)
    dispatch_once(&CGColorMatrixGetTypeID_cglibrarypredicate, &__block_literal_global_12);
  if (v2 == CGColorMatrixGetTypeID_f())
  {
    if (matrix_get_output_range_cglibrarypredicate != -1)
      dispatch_once(&matrix_get_output_range_cglibrarypredicate, &__block_literal_global_76);
    output_range_f = matrix_get_output_range_f(a1);
    if (matrix_get_output_range_cglibrarypredicate_79 != -1)
      dispatch_once(&matrix_get_output_range_cglibrarypredicate_79, &__block_literal_global_81);
    v4 = &matrix_get_output_range_f_78;
    goto LABEL_25;
  }
  if (CGColorNxMTransformGetTypeID_cglibrarypredicate != -1)
    dispatch_once(&CGColorNxMTransformGetTypeID_cglibrarypredicate, &__block_literal_global_18);
  output_range_f = 0.0;
  if (v2 == CGColorNxMTransformGetTypeID_f())
  {
    if (nxm_get_output_range_cglibrarypredicate != -1)
      dispatch_once(&nxm_get_output_range_cglibrarypredicate, &__block_literal_global_83);
    output_range_f = nxm_get_output_range_f(a1);
    if (nxm_get_output_range_cglibrarypredicate_86 != -1)
      dispatch_once(&nxm_get_output_range_cglibrarypredicate_86, &__block_literal_global_88);
    v4 = &nxm_get_output_range_f_85;
    goto LABEL_25;
  }
  return output_range_f;
}

float CGColorFunctionGetInputRange(const void *a1)
{
  CFTypeID v2;
  float input_range_f;
  uint64_t *v4;

  v2 = CFGetTypeID(a1);
  if (CGColorTRCGetTypeID_cglibrarypredicate != -1)
    dispatch_once(&CGColorTRCGetTypeID_cglibrarypredicate, &__block_literal_global_742);
  if (v2 == CGColorTRCGetTypeID_f())
  {
    if (trc_get_input_range_cglibrarypredicate != -1)
      dispatch_once(&trc_get_input_range_cglibrarypredicate, &__block_literal_global_48);
    input_range_f = trc_get_input_range_f(a1);
    if (trc_get_input_range_cglibrarypredicate_51 != -1)
      dispatch_once(&trc_get_input_range_cglibrarypredicate_51, &__block_literal_global_53_759);
    v4 = &trc_get_input_range_f_50;
LABEL_25:
    ((void (*)(const void *))*v4)(a1);
    return input_range_f;
  }
  if (CGColorMatrixGetTypeID_cglibrarypredicate != -1)
    dispatch_once(&CGColorMatrixGetTypeID_cglibrarypredicate, &__block_literal_global_12);
  if (v2 == CGColorMatrixGetTypeID_f())
  {
    if (matrix_get_input_range_cglibrarypredicate != -1)
      dispatch_once(&matrix_get_input_range_cglibrarypredicate, &__block_literal_global_55);
    input_range_f = matrix_get_input_range_f(a1);
    if (matrix_get_input_range_cglibrarypredicate_58 != -1)
      dispatch_once(&matrix_get_input_range_cglibrarypredicate_58, &__block_literal_global_60);
    v4 = &matrix_get_input_range_f_57;
    goto LABEL_25;
  }
  if (CGColorNxMTransformGetTypeID_cglibrarypredicate != -1)
    dispatch_once(&CGColorNxMTransformGetTypeID_cglibrarypredicate, &__block_literal_global_18);
  input_range_f = 0.0;
  if (v2 == CGColorNxMTransformGetTypeID_f())
  {
    if (nxm_get_input_range_cglibrarypredicate != -1)
      dispatch_once(&nxm_get_input_range_cglibrarypredicate, &__block_literal_global_62);
    input_range_f = nxm_get_input_range_f(a1);
    if (nxm_get_input_range_cglibrarypredicate_65 != -1)
      dispatch_once(&nxm_get_input_range_cglibrarypredicate_65, &__block_literal_global_67);
    v4 = &nxm_get_input_range_f_64;
    goto LABEL_25;
  }
  return input_range_f;
}

uint64_t CGSImageDataLockPixels(size_t a1, size_t a2, uint64_t a3, int *a4, _DWORD *a5, CGColorSpace *a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, _QWORD *cf, int a12, int *a13)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CFTypeID v28;
  const void *v29;
  size_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  int v34;
  CGDataProvider *v35;
  int v36;
  int v37;
  __int16 v38;
  CGImageRef v39;
  size_t v40;
  size_t v41;
  const void *v42;
  CGDataProvider *v43;
  CGColorSpace *DeviceGray;
  CGBitmapInfo v45;
  CGImageRef v46;
  CGImageRef v47;
  _QWORD *Cache;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  uint64_t BitsPerComponent;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  _BOOL4 v75;
  char v76;
  uint64_t v77;
  __n128 v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  CFTypeID v86;
  const __CFString *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char decode;
  uint64_t v92;
  size_t bitsPerPixel;
  int v94;
  uint64_t v95;
  uint64_t v96;
  _OWORD v97[10];
  _BYTE __dst[304];
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  _OWORD __src[19];
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  if (!cf)
    _CGHandleAssert("CGSImageDataLockPixels", 5886, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGSImage.c", "destination != NULL && CFGetTypeID(destination) == CGColorTransformGetTypeID()", "color transform (%p) invalid (%s)", (uint64_t)a6, a7, a8, 0);
  v28 = CFGetTypeID(cf);
  if (kCGColorTransformDefaultCMYK_block_invoke_once != -1)
    dispatch_once(&kCGColorTransformDefaultCMYK_block_invoke_once, &__block_literal_global_25_15643);
  if (v28 != CGColorTransformGetTypeID_type_id)
  {
    v86 = CFGetTypeID(cf);
    v87 = CFCopyTypeIDDescription(v86);
    CFStringGetCStringPtr(v87, 0x8000100u);
    _CGHandleAssert("CGSImageDataLockPixels", 5886, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGSImage.c", "destination != NULL && CFGetTypeID(destination) == CGColorTransformGetTypeID()", "color transform (%p) invalid (%s)", v88, v89, v90, (char)cf);
  }
  v96 = a7;
  if (!a4)
    goto LABEL_53;
  if (!a3)
    goto LABEL_53;
  if (!a5)
    goto LABEL_53;
  v29 = *(const void **)a3;
  if (!*(_QWORD *)a3)
    goto LABEL_53;
  v30 = *a4;
  if (!(_DWORD)v30)
    goto LABEL_53;
  memset((char *)v97 + 8, 0, 144);
  *(_QWORD *)&v97[0] = a1;
  if (!a1)
    goto LABEL_53;
  *((_QWORD *)&v97[0] + 1) = a2;
  if (!a2)
    goto LABEL_53;
  v31 = *a5;
  v92 = a8;
  if (!*(_QWORD *)(a3 + 8))
    goto LABEL_16;
  v32 = (v31 >> 2) & 3;
  if (v32 == 2)
  {
    v34 = v31 >> 6;
    if (v34 == 1)
      v33 = 2;
    else
      v33 = v34 == 2;
    goto LABEL_20;
  }
  if (v32 != 1)
  {
LABEL_16:
    v94 = 0;
    goto LABEL_21;
  }
  v33 = 8;
LABEL_20:
  v94 = v33;
LABEL_21:
  v95 = (v31 >> 16) & 0x3F;
  bitsPerPixel = v31 >> 22;
  check_clients_buffer("CGDataProviderCreateWithData", v29, v30 * a2);
  v35 = CGDataProviderCreateWithDataInternal(0, (uint64_t)v29, v30 * a2, 0, 0);
  if (a6)
  {
    v36 = bitmap_info_from_depth(*a5, v95);
    if (v94 == 8)
      v37 = 0;
    else
      v37 = v94;
    v38 = v36 | v37;
    v39 = CGImageCreate(a1, a2, v95, bitsPerPixel, v30, a6, v36 | v37, v35, 0, 1, kCGRenderingIntentDefault);
    CGDataProviderRelease(v35);
    if (v94 == 8)
    {
      v40 = a4[1];
      v41 = ((_BYTE)v95 + 7) & 0x78;
      v42 = *(const void **)(a3 + 8);
      check_clients_buffer("CGDataProviderCreateWithData", v42, v40 * a2);
      v43 = CGDataProviderCreateWithDataInternal(0, (uint64_t)v42, v40 * a2, 0, 0);
      DeviceGray = CGColorSpaceCreateDeviceGray();
      if (v41 <= 8)
        v45 = 0;
      else
        v45 = v38 & 0x7100;
      v46 = CGImageCreate(a1, a2, v41, v41, v40, DeviceGray, v45, v43, 0, 0, kCGRenderingIntentDefault);
      memset(__src, 0, 32);
      CGColorSpaceRelease(DeviceGray);
      CGDataProviderRelease(v43);
      v47 = CGImageCreateWithMaskAndMatte((uint64_t)v39, (uint64_t)v46, (uint64_t *)__src);
      if (v46)
        CFRelease(v46);
      if (v39)
        CFRelease(v39);
      v39 = v47;
    }
  }
  else
  {
    __src[0] = xmmword_185000460;
    v39 = mask_create(a1, a2, v95, bitsPerPixel, v30, v35, (double *)__src, 1, 4);
    CGDataProviderRelease(v35);
    if (v94 == 8)
      _CGHandleAssert("img_pixels_for_destination", 4029, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGSImage.c", "cs != NULL", "colorspace missing", v25, v26, v27, decode);
  }
  if (!v39)
    goto LABEL_52;
  Cache = CGColorTransformGetCache(cf);
  if (Cache && (v56 = Cache[2]) != 0)
    v57 = *(_QWORD *)(*(_QWORD *)(v56 + 24) + 40);
  else
    v57 = 0;
  v58 = (*a13 >> 2) & 3;
  if (v58 == 2)
  {
    v60 = *a13 >> 6;
    v59 = v60 == 1 ? 2 : v60 == 2;
  }
  else
  {
    v59 = v58 == 1 ? 8 : 0;
  }
  BitsPerComponent = CGPixelComponentGetBitsPerComponent(a12, v49, v50, v51, v52, v53, v54, v55);
  v62 = *a13;
  v73 = CGPixelComponentGetBitsPerComponent(a12, v63, v64, v65, v66, v67, v68, v69);
  if ((unint64_t)(v73 - 33) <= 0xFFFFFFFFFFFFFFDFLL)
    _CGHandleAssert("CGBitmapPixelInfoInitialize", 56, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGBitmapPixelInfo.c", "bits_per_component > 0 && bits_per_component <= 32", "bpc: %zu", v70, v71, v72, v73);
  v74 = bitmap_info_from_depth(v62, BitsPerComponent) & 0x3000;
  memset(__src, 0, sizeof(__src));
  CGBitmapPixelInfoInitializeWithImage(__src, __src, v39);
  v99 = a12;
  v100 = 0;
  v101 = v73;
  v102 = v57;
  v103 = v59;
  v104 = v74;
  v105 = 0u;
  v106 = 0u;
  v107 = 0u;
  v108 = 0u;
  v109 = 0u;
  v110 = 0u;
  v111 = 0u;
  v112 = 0u;
  v113 = 0u;
  v114 = 0u;
  v115 = 0u;
  v116 = 0u;
  v117 = 0u;
  v118 = 0u;
  v119 = 0u;
  v120 = 0u;
  v121 = 0u;
  memcpy(__dst, __src, sizeof(__dst));
  v75 = data_conversion_required(cf, (uint64_t *)v39, &v99, __dst);
  v76 = v75;
  v99 = a12;
  v100 = 0;
  v101 = v73;
  v102 = v57;
  v103 = v59;
  v104 = v74;
  v105 = 0u;
  v106 = 0u;
  v107 = 0u;
  v108 = 0u;
  v109 = 0u;
  v110 = 0u;
  v111 = 0u;
  v112 = 0u;
  v113 = 0u;
  v114 = 0u;
  v115 = 0u;
  v116 = 0u;
  v117 = 0u;
  v118 = 0u;
  v119 = 0u;
  v120 = 0u;
  v121 = 0u;
  v77 = img_image((uint64_t)v97, (uint64_t)a13, cf, v75, &v99, (uint64_t)v39, a10);
  if (v77)
  {
    v79 = *(_OWORD *)(v77 + 112);
    v78 = *(__n128 *)(v77 + 128);
    v80 = *(_QWORD *)(v77 + 144);
    v97[6] = *(_OWORD *)(v77 + 96);
    v81 = *(_OWORD *)(v77 + 16);
    v97[0] = *(_OWORD *)v77;
    v97[1] = v81;
    v82 = *(_OWORD *)(v77 + 32);
    v83 = *(_OWORD *)(v77 + 48);
    v84 = *(_OWORD *)(v77 + 80);
    v97[4] = *(_OWORD *)(v77 + 64);
    v97[5] = v84;
    v97[2] = v82;
    v97[3] = v83;
    *(_QWORD *)&v97[9] = v80;
    v97[7] = v79;
    v97[8] = v78;
    BYTE8(v97[6]) = 1;
    v23 = v92;
    if (*(_QWORD *)&v97[0] && *((_QWORD *)&v97[0] + 1))
      return img_data_lock((uint64_t)"CGSImageDataLockPixels", v78, (uint64_t)v97, v96, v92, a9, 1, a10, (uint64_t)cf, v76, (uint64_t)a13, a12, 1u, 3u);
  }
  else
  {
LABEL_52:
    v97[0] = 0uLL;
  }
LABEL_53:
  CGPostError((uint64_t)"%s: Bad pixel image source", v21, v22, v23, v24, v25, v26, v27, (char)"CGSImageDataLockPixels");
  return 0;
}

uint64_t img_data_lock(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, int a12, unsigned __int8 a13, unsigned int a14)
{
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  double v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  unsigned int v53;
  int v54;
  double v55;
  int v56;
  int v57;
  char v58;
  _QWORD *Matte;
  __int16 v60;
  _QWORD *v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _DWORD *v69;
  _BOOL4 v70;
  _BOOL4 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *Cache;
  int v84;
  unsigned int Type;
  unint64_t v86;
  unsigned int *v87;
  int v88;
  unsigned int v89;
  int *v90;
  int64x2_t *v91;
  uint64_t v92;
  uint64_t *v93;
  int v94;
  unint64_t v95;
  unsigned int v96;
  uint64_t v97;
  int v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  unsigned int v106;
  unsigned int *v107;
  char v108;
  _QWORD *v109;
  int *v110;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  int v115;
  __int16 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  __n128 v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  int *v135;
  uint64_t v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  _DWORD *v142;
  int v143;
  _QWORD *v144;
  __n128 *v145;
  unint64_t v146;
  unsigned int v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _BOOL4 v158;
  BOOL v159;
  int v160;
  uint64_t v161;
  unsigned int v162;
  unsigned int *v163;
  __n128 v164;
  __int32 v165;
  __int32 v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  void *v176;
  uint64_t v177;
  __int32 v178;
  int *v179;
  int v180;
  __int128 *v181;
  __int32 v182;
  unsigned int v183;
  int v184;
  uint64_t v185;
  float64x2_t *v186;
  uint64_t v187;
  unsigned int *v188;
  float64x2_t v189;
  _QWORD *v190;
  unsigned int *v191;
  int v192;
  uint64_t v193;
  _BOOL4 v195;
  BOOL v196;
  int v197;
  unint64_t v198;
  uint64_t v199;
  unsigned int *v200;
  __n128 v201;
  int v202;
  int v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  __n128 v209;
  int v210;
  int v211;
  __n128 v212;
  int v213;
  uint64_t v214;
  unsigned int v215;
  int v216;
  unsigned int v217;
  int v218;
  unsigned int v219;
  int v220;
  unsigned int v221;
  unint64_t v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  unint64_t v227;
  int v228;
  int v229;
  int v230;
  double v231;
  signed int v232;
  int v233;
  int ComponentType;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _BOOL4 v240;
  int v241;
  unsigned int v242;
  int v243;
  int v244;
  __int128 *v245;
  int v246;
  int v247;
  char v248;
  unsigned int v249;
  uint64_t v250;
  int v251;
  unint64_t v252;
  int v253;
  unint64_t v254;
  uint64_t (*v255)(_QWORD, __n128);
  uint64_t v256;
  _DWORD *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  unsigned int *v262;
  unint64_t v263;
  __int128 *v264;
  int v265;
  int v266;
  unsigned int v267;
  unsigned int v268;
  int v269;
  int v270;
  unsigned int v271;
  unsigned int v272;
  _BOOL4 v273;
  _BOOL4 v274;
  unsigned int v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  char *v283;
  const char *v284;
  const char *v285;
  const char *v286;
  const char *v287;
  const char *v288;
  const char *v289;
  const char *v290;
  const char *v291;
  const char *v292;
  const char *v293;
  const char *v294;
  const char *v295;
  const char *v296;
  uint64_t (*v297)(_QWORD);
  uint64_t v298;
  _QWORD *image_data_handle;
  uint64_t v300;
  unsigned int v301;
  uint64_t v302;
  _QWORD *v303;
  int v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  uint64_t (*v313)(__int128 *, uint64_t *);
  int v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  int v323;
  uint64_t v324;
  double v325;
  int v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  int v334;
  _DWORD *v335;
  int v336;
  unsigned int v337;
  _QWORD *v338;
  char v339;
  uint64_t v340;
  unsigned int v341;
  _QWORD *v342;
  _QWORD *v343;
  __int32 v344;
  uint64_t v345;
  char v346;
  uint64_t v347;
  int v348;
  unint64_t v349;
  unint64_t v350;
  int v351;
  unsigned int v352;
  unsigned int v353;
  unsigned int v354;
  int v355;
  unsigned int v356;
  char v357;
  int v358;
  int v359;
  unint64_t v360;
  _BOOL4 v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  unint64_t v366;
  char __str[256];
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  _OWORD v376[2];
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  uint64_t v385;
  unsigned int v386[1026];
  double v387;
  double v388;
  uint64_t v389;

  v14 = MEMORY[0x1E0C80A78](a1, a2);
  v17 = v16;
  v353 = v18;
  v20 = v19;
  v22 = v21;
  v364 = v23;
  v25 = v24;
  v26 = v15;
  v389 = *MEMORY[0x1E0C80C00];
  if (a11)
  {
    v27 = *(_WORD *)(a11 + 2) & 0x3FLL;
    v28 = v27;
  }
  else if ((a12 - 2) > 3)
  {
    v27 = 8;
    v28 = 8;
  }
  else
  {
    v28 = qword_184F8F5B8[a12 - 2];
    v27 = 8;
  }
  v363 = a11;
  v357 = v14;
  if (v16)
  {
    if (a11)
      v29 = *(_QWORD *)(v15 + 128) == 0;
    else
      v29 = 0;
    if (v29)
      v30 = a10;
    else
      v30 = 0;
  }
  else
  {
    v30 = 0;
  }
  v365 = 0;
  v366 = 0;
  bzero(&v368, 0xB40uLL);
  v38 = *(_QWORD *)v26;
  v37 = *(_QWORD *)(v26 + 8);
  v360 = v25;
  if (v25 == (int)*(_QWORD *)v26)
  {
    v39 = 0;
    v40 = v364;
    if (v20 - 3 <= 1)
    {
      v41 = *(_QWORD *)(v26 + 8);
      v362 = *(_QWORD *)v26;
      if ((int)v37 == v364)
        goto LABEL_22;
      goto LABEL_19;
    }
LABEL_21:
    v41 = *(_QWORD *)(v26 + 8);
    v362 = *(_QWORD *)v26;
    goto LABEL_22;
  }
  v40 = v364;
  if (v20 - 3 > 1)
  {
    v39 = 0;
    goto LABEL_21;
  }
LABEL_19:
  v39 = 2;
  LODWORD(v41) = v40;
  LODWORD(v362) = v360;
LABEL_22:
  v42 = *(_DWORD *)(v26 + 28);
  if ((v42 - 3) <= 2 && (v38 != *(_QWORD *)(v26 + 48) || v37 != *(_QWORD *)(v26 + 56)))
    v39 |= 0x80u;
  if (!v22)
  {
    v346 = a10;
    v44 = 0;
    goto LABEL_34;
  }
  v43 = *(int *)(v22 + 4);
  v44 = v43 & ~((int)v43 >> 31);
  if (*(int *)(v22 + 12) + v43 <= v40)
    v45 = *(_DWORD *)(v22 + 12) + v43;
  else
    v45 = v40;
  if (v45 <= v44)
    goto LABEL_593;
  v346 = a10;
  if (v45 - v44 == v40)
  {
    v22 = 0;
LABEL_34:
    v46 = v41;
    goto LABEL_54;
  }
  if (v40 != (int)v41)
  {
    v47 = (double)(int)v41 / (double)(unint64_t)v40;
    v45 = vcvtpd_s64_f64(v47 * (double)v45);
    v44 = vcvtmd_s64_f64(v47 * (double)v44);
    if (v45 >= (int)v41)
      v45 = v41;
  }
  if (v44 >= 17)
    v48 = 16;
  else
    v48 = 16 - v44;
  if (v44 >= 17)
    v49 = v44;
  else
    v49 = 0;
  v50 = v48 + v45;
  if (v45 - v49 + 15 >= v40)
    v45 = v40;
  if (v50 >= v40)
    v45 = v40;
  v51 = v45 - v49;
  if (v51 < v40)
  {
    v44 = v49;
  }
  else
  {
    v45 = v40;
    v44 = 0;
  }
  if (v51 >= v40)
    v22 = 0;
  v46 = v45;
LABEL_54:
  v52 = *(_DWORD **)(v26 + 120);
  if (v52)
  {
    if (v22)
    {
      if (*v52 > (int)v38 || v52[2] + *v52 < 0)
        goto LABEL_593;
      v53 = v44;
      v54 = v46;
      if ((_DWORD)v37 != (_DWORD)v41)
      {
        if (v46 - v44 == (_DWORD)v41)
        {
          v53 = 0;
          v54 = *(_QWORD *)(v26 + 8);
        }
        else
        {
          v55 = (double)(int)v37 / (double)(int)v41;
          v54 = vcvtpd_s64_f64(v55 * (double)v46);
          v53 = vcvtmd_s64_f64(v55 * (double)v44);
          if (v54 >= (int)v37)
            v54 = *(_QWORD *)(v26 + 8);
        }
      }
      v56 = v37 - v53;
      v57 = v52[1];
      if (v56 < v57 || (int)v37 - v54 > v52[3] + v57)
        goto LABEL_593;
    }
    v39 |= 1u;
  }
  if (v42 < 3)
    v58 = 1;
  else
    v58 = v30;
  v358 = v41;
  v355 = v44;
  v352 = v20;
  if ((v58 & 1) == 0)
  {
    if (CGImageGetMaskingColors(*(_QWORD **)(v26 + 40)))
    {
      v39 |= 0x10u;
    }
    else if (CGImageGetMask(*(_QWORD **)(v26 + 40)))
    {
      Matte = CGImageGetMatte(*(_QWORD **)(v26 + 40));
      v60 = 48;
      if (!Matte)
        v60 = 16;
      v39 |= v60;
    }
    LODWORD(v41) = v358;
    v44 = v355;
  }
  v61 = *(_QWORD **)(v26 + 16);
  if (!v61)
  {
    if (img_globals_once != -1)
    {
      dispatch_once(&img_globals_once, &__block_literal_global_10874);
      v44 = v355;
      LODWORD(v41) = v358;
    }
    v62 = 0;
    v67 = 0;
    v68 = img_globals_globals;
    v345 = img_globals_globals;
    if (!a11)
      v68 = 0;
    v363 = v68;
    goto LABEL_134;
  }
  v62 = *(unsigned int *)(v26 + 24);
  v345 = *(_QWORD *)(v26 + 112);
  if ((v39 & 0xA2) != 0)
  {
    v63 = v46;
    v64 = v22;
    v65 = *(unsigned int *)(v26 + 24);
    if (CGColorSpaceGetType(v61) == 7)
    {
      v66 = v61[3];
      if ((*(_DWORD *)(v66 + 24) - 5) > 1)
        v67 = 0;
      else
        v67 = **(_QWORD ***)(v66 + 88);
      LODWORD(v41) = v358;
      v44 = v355;
      v62 = v65;
      v39 |= 8u;
      v27 = 8;
    }
    else
    {
      v67 = v61;
      v27 = v28;
      LODWORD(v41) = v358;
      v44 = v355;
      v62 = v65;
    }
    v22 = v64;
    v46 = v63;
    if (!v17)
      goto LABEL_94;
  }
  else
  {
    v67 = *(_QWORD **)(v26 + 16);
    v27 = v28;
    if (!v17)
      goto LABEL_94;
  }
  if (*(_BYTE *)(v26 + 32))
  {
LABEL_94:
    v69 = (_DWORD *)a11;
    goto LABEL_95;
  }
  v80 = v22;
  v349 = v62;
  v81 = v67;
  if ((CGColorTransformConvertNeedsCMS(v17, v67, v353) & 1) != 0)
    goto LABEL_108;
  v342 = v81;
  Type = CGColorSpaceGetType(v81);
  if (Type > 0xB)
    goto LABEL_286;
  v44 = v355;
  if (((1 << Type) & 0x1F) != 0)
  {
    v22 = v80;
    v69 = (_DWORD *)a11;
    LODWORD(v41) = v358;
    v62 = v349;
    v67 = v342;
    goto LABEL_95;
  }
  if (((1 << Type) & 0xC40) == 0)
  {
LABEL_286:
    if ((v30 & 1) == 0)
      goto LABEL_108;
    v67 = v61;
LABEL_288:
    v69 = (_DWORD *)a11;
    LODWORD(v41) = v358;
    v44 = v355;
    v62 = v349;
    v22 = v80;
    goto LABEL_95;
  }
  v67 = v81;
  if (v81)
  {
    v86 = *(_QWORD *)(v81[3] + 40);
    if (v86 <= 4 && ((1 << v86) & 0x1A) != 0)
      goto LABEL_288;
  }
LABEL_108:
  Cache = CGColorTransformGetCache(v17);
  if (Cache)
    v67 = (_QWORD *)Cache[2];
  else
    v67 = 0;
  v69 = (_DWORD *)a11;
  LODWORD(v41) = v358;
  v44 = v355;
  v62 = v349;
  v22 = v80;
  v39 |= 4u;
LABEL_95:
  if (v69)
  {
    v70 = *v69 == 67637640;
    v71 = *v69 == 134886228;
    if (!v67)
      goto LABEL_106;
  }
  else
  {
    v70 = 0;
    v71 = 0;
    if (!v67)
      goto LABEL_106;
  }
  v72 = *(_QWORD *)(v67[3] + 40);
  switch(v72)
  {
    case 4:
      if ((v39 & 0x10) != 0 || *(_DWORD *)(v26 + 24) != 0)
        v62 = 8;
      break;
    case 3:
      v84 = *(_DWORD *)(v26 + 24);
      if (v84 && v71)
      {
        v62 = 8;
      }
      else
      {
        switch(v84)
        {
          case 0:
            if ((v39 & 0x10) != 0)
              goto LABEL_123;
            break;
          case 3:
            v62 = 1;
            break;
          case 4:
          case 8:
          case 9:
LABEL_123:
            v62 = 2;
            break;
          default:
            goto LABEL_134;
        }
      }
      break;
    case 1:
      if (!*(_DWORD *)(v26 + 24))
        v70 = 1;
      if (!v70)
        v62 = 8;
      break;
    default:
LABEL_106:
      img_release_resources(v26);
      CGPostError((uint64_t)"%s: Cannot convert to destination", v73, v74, v75, v76, v77, v78, v79, v357);
      return 0;
  }
LABEL_134:
  v87 = *(unsigned int **)(v26 + 112);
  v88 = *(_DWORD *)(v26 + 28);
  v89 = v88 - 3;
  if (v88 != 3 && (v39 & 0x96) == 0)
  {
    if (v88 == 2)
    {
      if (*(_QWORD *)(v26 + 128) && v87)
        goto LABEL_157;
    }
    else
    {
      if (v88 == 5)
      {
        v32 = *(_QWORD *)(v26 + 96);
        if (v32)
          goto LABEL_143;
      }
      if (v87)
      {
        if (v88 != 4)
        {
          if (v88 == 5)
          {
            v32 = *(_QWORD *)(v26 + 96);
LABEL_143:
            v343 = v67;
            v350 = v62;
            LODWORD(v365) = 0;
            HIDWORD(v365) = v41 - v46;
            LODWORD(v366) = v362;
            HIDWORD(v366) = v46 - v44;
            if (v22)
              v90 = (int *)&v365;
            else
              v90 = 0;
            v91 = (int64x2_t *)img_blocks_create(*(_QWORD *)(v26 + 136), 0, v90, v32);
            if (!v91)
              goto LABEL_593;
            v93 = (uint64_t *)v91;
            v87 = (unsigned int *)v91->i64[1];
            v341 = a13;
            if (v87 || (v87 = *(unsigned int **)(v26 + 112)) != 0)
            {
              v94 = v358;
              v95 = v360;
              v96 = v355;
              if (v91[2].i64[1] == 1)
              {
                v97 = *(_QWORD *)v91[5].i64[0];
                if (v97)
                {
                  v98 = v46;
                  v99 = malloc_type_calloc(1uLL, 0x88uLL, 0x10F00409D9D9E87uLL);
                  v101 = v99;
                  if (v99)
                  {
                    *((_DWORD *)v99 + 22) = v353;
                    *((_DWORD *)v99 + 23) = v352;
                    *((_DWORD *)v99 + 24) = a12;
                    v99[14] = 0;
                    v99[15] = v93;
                    v99[13] = 0;
                    v99[10] = 0;
                    v99[2] = v93[2];
                    v102 = v93[3];
                    v99[3] = v102;
                    *((_DWORD *)v99 + 8) = *((_DWORD *)v93 + 14);
                    v103 = *((_DWORD *)v93 + 17);
                    *((_DWORD *)v99 + 9) = v102 - (*((_DWORD *)v93 + 15) + v103);
                    *((_DWORD *)v99 + 10) = *((_DWORD *)v93 + 16);
                    *((_DWORD *)v99 + 11) = v103;
                    v104 = *(_QWORD *)v93[10];
                    v99[7] = v104;
                    v105 = *(_DWORD *)v93[11];
                    *((_DWORD *)v99 + 12) = v105;
                    if (*(_DWORD *)(v26 + 24) && (v106 = (*v87 >> 2) & 3, v106 >= 2))
                    {
                      v107 = (unsigned int *)v363;
                      v108 = v346;
                      if (v106 != 2)
                        goto LABEL_283;
                      *v99 = *(_QWORD *)(*((_QWORD *)v87 + 1) + 8);
                      v99[8] = v104;
                    }
                    else
                    {
                      v105 = 0;
                      *v99 = **((_QWORD **)v87 + 1);
                      v99[8] = 0;
                      v107 = (unsigned int *)v363;
                      v108 = v346;
                    }
                    goto LABEL_282;
                  }
                  CGImageBlockSetRelease(*v93);
                  free(v93);
LABEL_605:
                  img_release_resources(v26);
                  CGPostError((uint64_t)"%s: Cannot allocate memory", v327, v328, v329, v330, v331, v332, v333, v357);
                  return (uint64_t)v101;
                }
              }
              else
              {
                LOBYTE(v97) = 0;
              }
            }
            else
            {
              LOBYTE(v97) = 1;
              v94 = v358;
              v96 = v355;
            }
            v383 = 0u;
            v384 = 0u;
            v381 = 0u;
            v382 = 0u;
            v379 = 0u;
            v380 = 0u;
            v377 = 0u;
            v378 = 0u;
            memset(v376, 0, sizeof(v376));
            v374 = 0u;
            v375 = 0u;
            v372 = 0u;
            v373 = 0u;
            v370 = 0u;
            v371 = 0u;
            v368 = 0u;
            *(_QWORD *)&v369 = 0;
            *((_QWORD *)&v369 + 1) = img_decode_end;
            *(int32x2_t *)&v371 = vmovn_s64(v91[1]);
            v174 = *(_QWORD *)(v26 + 16);
            if (v174)
              v175 = *(_DWORD *)(*(_QWORD *)(v174 + 24) + 40);
            else
              v175 = 1;
            *(_QWORD *)((char *)&v370 + 4) = __PAIR64__(*(_QWORD *)(v26 + 64), v175);
            HIDWORD(v370) = *(_DWORD *)(v26 + 24);
            if (v91[2].i64[1] == 1 && v91[3].i64[0] == 1 && *(_QWORD *)v91[5].i64[0])
              v176 = img_raw_read;
            else
              v176 = img_blocks_read;
            v177 = *(_QWORD *)(v26 + 128);
            *(_QWORD *)&v369 = v176;
            *(_QWORD *)&v374 = v177;
            *((_QWORD *)&v375 + 1) = v91[1].i64[0];
            *(_QWORD *)&v376[0] = v175;
            v164 = (__n128)vextq_s8(*(int8x16_t *)(v26 + 136), *(int8x16_t *)(v26 + 136), 8uLL);
            *(__n128 *)((char *)v376 + 8) = v164;
            *((_QWORD *)&v376[1] + 1) = (char *)v91 + 56;
            *((_QWORD *)&v378 + 1) = v91;
            *((_QWORD *)&v374 + 1) = (unint64_t)(v91[1].i64[0] * *(_QWORD *)(v26 + 72) + 7) >> 3;
            if (v22)
            {
              v178 = v91[3].i32[3];
              v165 = v91[3].i32[2];
              v166 = v91[4].i32[0] + v165;
              v46 = v94 - v178;
              v96 = v94 - (v178 + v91[4].i32[1]);
            }
            else
            {
              v165 = 0;
              v166 = v362;
            }
            v179 = (int *)v363;
            if ((v97 & 1) != 0)
            {
              v180 = v46;
              v181 = &v368;
              v182 = v165;
              goto LABEL_423;
            }
LABEL_276:
            v344 = v165;
            v183 = v166 - v165;
            v180 = v46;
            v184 = v46 - v96;
            v181 = &v368;
            v345 = (uint64_t)v87;
            goto LABEL_467;
          }
LABEL_157:
          v98 = v46;
          v109 = malloc_type_calloc(1uLL, 0x88uLL, 0x10F00409D9D9E87uLL);
          v101 = v109;
          if (!v109)
            goto LABEL_605;
          *((_DWORD *)v109 + 22) = v353;
          *((_DWORD *)v109 + 23) = v352;
          *((_DWORD *)v109 + 24) = a12;
          v109[14] = 0;
          v109[15] = 0;
          v109[13] = *(_QWORD *)(v26 + 40);
          v109[10] = 0;
          v110 = *(int **)v26;
          v109[2] = *(_QWORD *)v26;
          v111 = *(_QWORD *)(v26 + 8);
          v109[3] = v111;
          v341 = a13;
          if ((v39 & 1) != 0)
          {
            v110 = *(int **)(v26 + 120);
            v112 = *v110;
            v141 = v110[1];
            v142 = v110 + 2;
            LODWORD(v110) = v110[2];
            v114 = v142[1];
            v113 = v111 - (v141 + v114);
          }
          else
          {
            v112 = 0;
            v113 = 0;
            v114 = v111;
          }
          v107 = (unsigned int *)v363;
          v108 = v346;
          *((_DWORD *)v109 + 8) = v112;
          *((_DWORD *)v109 + 9) = v113;
          *((_DWORD *)v109 + 10) = (_DWORD)v110;
          *((_DWORD *)v109 + 11) = v114;
          v109[7] = **(_QWORD **)(v26 + 136);
          *((_DWORD *)v109 + 12) = **(_DWORD **)(v26 + 144);
          v95 = v360;
          if (*(_DWORD *)(v26 + 24))
          {
            v143 = (*v87 >> 2) & 3;
            if (v143 == 2)
            {
              *v109 = *(_QWORD *)(*((_QWORD *)v87 + 1) + 8);
              v109[8] = **(_QWORD **)(v26 + 136);
              v105 = **(_DWORD **)(v26 + 144);
              goto LABEL_282;
            }
            if (v143 == 1)
            {
              *v109 = *(_QWORD *)(*((_QWORD *)v87 + 1) + 8);
              v109[8] = *(_QWORD *)(*(_QWORD *)(v26 + 136) + 8);
              v105 = *(_DWORD *)(*(_QWORD *)(v26 + 144) + 4);
              goto LABEL_282;
            }
            if (v143)
            {
LABEL_283:
              v101[9] = 0;
              v101[1] = v87;
              if (!v107)
                return (uint64_t)v101;
              v185 = v352;
              if ((v108 & 1) == 0)
                return (uint64_t)v101;
              goto LABEL_587;
            }
          }
          v105 = 0;
          *v109 = **((_QWORD **)v87 + 1);
          v109[8] = 0;
LABEL_282:
          *((_DWORD *)v101 + 13) = v105;
          goto LABEL_283;
        }
        v350 = v62;
        v130 = CGAccessSessionCreate(*(CGDataProvider **)(v26 + 136));
        if (!v130)
        {
          img_release_resources(v26);
          CGPostError((uint64_t)"%s: Cannot create session", v167, v168, v169, v170, v171, v172, v173, v357);
          return 0;
        }
        v131 = v130;
        if ((v346 & 1) != 0 || (v132 = v130[1]) == 0)
        {
          v341 = a13;
          v164 = (__n128)img_stream_stage((uint64_t)&v368, v26, (uint64_t)v130);
          v165 = 0;
          v166 = v362;
          v94 = v358;
          v96 = v355;
          goto LABEL_276;
        }
        v133 = malloc_type_calloc(1uLL, 0x88uLL, 0x10F00409D9D9E87uLL);
        v101 = v133;
        if (!v133)
        {
          CGAccessSessionRelease(v131);
          goto LABEL_605;
        }
        v134 = *(_QWORD *)(v26 + 136);
        *((_DWORD *)v133 + 22) = v353;
        *((_DWORD *)v133 + 23) = v352;
        *((_DWORD *)v133 + 24) = a12;
        v133[15] = 0;
        v133[16] = v134;
        v133[13] = 0;
        v133[14] = v131;
        v133[10] = 0;
        v135 = *(int **)v26;
        v133[2] = *(_QWORD *)v26;
        v136 = *(_QWORD *)(v26 + 8);
        v133[3] = v136;
        if ((v39 & 1) != 0)
        {
          v135 = *(int **)(v26 + 120);
          v137 = *v135;
          v334 = v135[1];
          v335 = v135 + 2;
          LODWORD(v135) = v135[2];
          v139 = v335[1];
          v138 = v136 - (v334 + v139);
        }
        else
        {
          v137 = 0;
          v138 = 0;
          v139 = v136;
        }
        *((_DWORD *)v133 + 8) = v137;
        *((_DWORD *)v133 + 9) = v138;
        *((_DWORD *)v133 + 10) = (_DWORD)v135;
        *((_DWORD *)v133 + 11) = v139;
        v133[7] = v132;
        v336 = *(_DWORD *)(v26 + 144);
        *((_DWORD *)v133 + 12) = v336;
        if (*(_DWORD *)(v26 + 24) && (v337 = (*v87 >> 2) & 3, v337 >= 2))
        {
          if (v337 != 2)
            goto LABEL_611;
          v338 = (_QWORD *)(*((_QWORD *)v87 + 1) + 8);
        }
        else
        {
          v132 = 0;
          v336 = 0;
          v338 = (_QWORD *)*((_QWORD *)v87 + 1);
        }
        *v133 = *v338;
        v133[8] = v132;
        *((_DWORD *)v133 + 13) = v336;
LABEL_611:
        v133[9] = 0;
        v133[1] = v87;
        return (uint64_t)v101;
      }
    }
  }
  v347 = v22;
  v350 = v62;
  v115 = v46;
  v368 = 0u;
  v369 = 0u;
  if (v62 <= 7 && (v39 & 0xC) == 0)
    v117 = v39;
  else
    v117 = v39 | 0x100;
  v370 = 0uLL;
  v371 = 0uLL;
  v372 = 0uLL;
  v373 = 0uLL;
  v374 = 0uLL;
  v375 = 0uLL;
  memset(v376, 0, sizeof(v376));
  v377 = 0uLL;
  v378 = 0uLL;
  v379 = 0uLL;
  v380 = 0uLL;
  v381 = 0uLL;
  v382 = 0uLL;
  v383 = 0uLL;
  v384 = 0uLL;
  *((_QWORD *)&v369 + 1) = img_decode_end;
  v118 = 48;
  if (v89 >= 3)
    v118 = 0;
  v119 = 56;
  if (v89 >= 3)
    v119 = 8;
  v120 = *(_QWORD *)(v26 + v118);
  LODWORD(v370) = 1024;
  LODWORD(v371) = v120;
  v121 = *(_QWORD *)(v26 + v119);
  DWORD1(v371) = v121;
  v122 = *(_QWORD *)(v26 + 16);
  if (v122)
    v123 = *(unsigned int *)(*(_QWORD *)(v122 + 24) + 40);
  else
    v123 = 1;
  *(_QWORD *)((char *)&v370 + 4) = v123;
  v124 = *(_QWORD *)(v26 + 120);
  *(_QWORD *)&v374 = *(_QWORD *)(v26 + 128);
  *((_QWORD *)&v375 + 1) = (int)v120;
  v125 = *(_DWORD *)(v26 + 24);
  HIDWORD(v370) = v125;
  v126 = *(__n128 *)(v26 + 136);
  *(int8x16_t *)((char *)v376 + 8) = vextq_s8((int8x16_t)v126, (int8x16_t)v126, 8uLL);
  *(_QWORD *)&v376[0] = (int)v123;
  *((_QWORD *)&v376[1] + 1) = v124;
  *(_QWORD *)&v380 = a12;
  if (v122)
  {
    v127 = 0;
    v128 = 0;
    switch(v125)
    {
      case 0:
      case 5:
      case 6:
      case 8:
      case 9:
        break;
      case 1:
        if ((v117 & 0x100) == 0)
          goto LABEL_187;
        v129 = 8;
        goto LABEL_199;
      case 2:
        if ((v117 & 0x100) == 0)
          goto LABEL_189;
        v140 = 8;
        goto LABEL_202;
      case 3:
        if ((v117 & 0x100) != 0)
        {
          v129 = 9;
LABEL_199:
          HIDWORD(v370) = v129;
          v128 = -1;
        }
        else
        {
LABEL_187:
          v128 = 0;
        }
        v123 = (v123 + 1);
        v127 = 0x400000;
        break;
      case 4:
        if ((v117 & 0x100) != 0)
        {
          v140 = 9;
LABEL_202:
          HIDWORD(v370) = v140;
          v128 = -1;
        }
        else
        {
LABEL_189:
          v128 = 0;
        }
        v123 = (v123 + 1);
        v127 = 0x200000;
        break;
      default:
        CGPostError((uint64_t)"%s: Assertion failed - unknown alpha", (uint64_t)v67, v31, v32, v33, v34, v35, v36, (char)"img_decode_stage");
        goto LABEL_217;
    }
  }
  else
  {
    v127 = 0;
    v128 = 0;
  }
  v340 = (int)v41;
  if ((v88 - 1) < 2)
  {
    v343 = v67;
    v146 = *v87;
    v147 = v146 >> 22;
    *((_QWORD *)&v374 + 1) = (uint64_t)(int)((v146 >> 22) * v120 + 7) >> 3;
    v92 = (v146 >> 16) & 0x3F;
    if ((_DWORD)v92 == 32)
    {
      if (v27 > 8)
      {
        if (v27 > 0x10)
        {
          v148 = v127 | 0x80;
          LODWORD(v149) = 32;
        }
        else
        {
          v148 = v127 | 0x82;
          v128 = -1;
          LODWORD(v149) = 16;
        }
      }
      else
      {
        v148 = v127 | 0x81;
        v128 = -1;
        LODWORD(v149) = 8;
      }
    }
    else
    {
      v158 = v27 < 9 || v92 < 9;
      v159 = !v158;
      if (v158)
        v160 = 1;
      else
        v160 = 2;
      v148 = v160 | v127;
      v149 = 16;
      if (!v159)
        v149 = 8;
      if (v149 != v92)
        v128 = -1;
    }
    DWORD2(v370) = v149;
    if ((_DWORD)v92 * (_DWORD)v123 == v147)
    {
      v161 = v128;
    }
    else
    {
      if (v128)
        v161 = v128;
      else
        v161 = -1;
      if ((v146 & 0xC0) != 0x80)
        v148 |= 0x100000u;
    }
    v162 = (v146 >> 4) & 3;
    if (v162 == 2)
    {
      if ((_DWORD)v92 == 32)
      {
        if (v161)
        {
          v148 |= 0x200u;
          LODWORD(v92) = 32;
          goto LABEL_383;
        }
        goto LABEL_279;
      }
      if ((_DWORD)v92 == 16)
      {
        if (v161)
        {
          v148 |= 0x100u;
          LODWORD(v92) = 16;
          goto LABEL_383;
        }
        goto LABEL_279;
      }
    }
    else
    {
      if (v162 != 1)
      {
        if (v161)
          goto LABEL_383;
        if ((_DWORD)v92 != 32)
        {
          if ((_DWORD)v92 != 16)
            goto LABEL_382;
          v161 = 0;
LABEL_279:
          *(_QWORD *)&v375 = v161;
          goto LABEL_382;
        }
LABEL_249:
        v161 = 0x2000;
        goto LABEL_279;
      }
      if (v147 == 16)
      {
        v163 = 0;
        v148 |= 0x100u;
        *(_QWORD *)&v375 = 4096;
        v147 = 16;
LABEL_258:
        if (v161)
          goto LABEL_376;
        goto LABEL_382;
      }
      if (v147 == 32)
      {
        if (v161)
        {
          v148 |= 0x200u;
          v147 = 32;
          goto LABEL_383;
        }
        goto LABEL_249;
      }
    }
    v163 = 0;
    goto LABEL_258;
  }
  if (v89 < 2)
    goto LABEL_294;
  if (v88 != 5)
  {
LABEL_217:
    img_release_resources(v26);
    CGPostError((uint64_t)"%s: Cannot read image", v150, v151, v152, v153, v154, v155, v156, v357);
    return 0;
  }
  if ((v117 & 2) != 0
    && ((int)v362 < (unint64_t)v120 || (int)v41 < (unint64_t)v121)
    && v126.n128_u64[0]
    && *(_BYTE *)(v126.n128_u64[0] + 128))
  {
    v144 = v67;
    v387 = (double)(unint64_t)(int)v362;
    v388 = (double)(unint64_t)(int)v41;
    v145 = (__n128 *)img_blocks_create(v126.n128_i64[0], &v387, 0, 0);
    if (v145)
    {
      *((_QWORD *)&v378 + 1) = v145;
      *((_QWORD *)&v376[1] + 1) = (char *)v145 + 56;
      *((_QWORD *)&v375 + 1) = v145[1].n128_u64[0];
      v126 = v145[1];
      v126.n128_u64[0] = (unint64_t)vmovn_s64((int64x2_t)v126);
      *(_QWORD *)&v371 = v126.n128_u64[0];
      LODWORD(v120) = v126.n128_u32[0];
      v67 = v144;
      goto LABEL_294;
    }
    LODWORD(v120) = v371;
    v67 = v144;
  }
  *((_QWORD *)&v368 + 1) = img_blocks_extent;
LABEL_294:
  v147 = *(_DWORD *)(v26 + 72);
  *((_QWORD *)&v374 + 1) = (uint64_t)(int)(v120 * v147 + 7) >> 3;
  v186 = *(float64x2_t **)(v26 + 88);
  v343 = v67;
  if (!v186)
  {
    v190 = *(_QWORD **)(v26 + 16);
    if (v190)
    {
      v191 = 0;
      goto LABEL_302;
    }
    v126.n128_u64[0] = 1065353216;
LABEL_311:
    *(_QWORD *)v386 = v126.n128_u64[0];
    v163 = v386;
    v128 = -1;
    LODWORD(v41) = v358;
    goto LABEL_312;
  }
  if ((int)v123 >= 1)
  {
    v187 = v123;
    v188 = v386;
    do
    {
      v189 = *v186++;
      v126.n128_u64[1] = *(_QWORD *)&v189.f64[1];
      v126.n128_u64[0] = (unint64_t)vcvt_f32_f64(v189);
      *(_QWORD *)v188 = v126.n128_u64[0];
      v188 += 2;
      --v187;
    }
    while (v187);
  }
  v190 = *(_QWORD **)(v26 + 16);
  if (!v190)
  {
    v126.n128_u32[0] = v386[0];
    if (*(float *)v386 != 1.0 || *(float *)&v386[1] != 0.0)
    {
      LODWORD(v41) = v358;
      if (*(float *)v386 != 1.0 || *(float *)&v386[1] == 0.0)
      {
        *(_QWORD *)v386 = __PAIR64__(v386[0], v386[1]);
        v163 = v386;
        v128 = -1;
      }
      else
      {
        v163 = v386;
      }
      goto LABEL_312;
    }
    v126.n128_u64[0] = 0x3F80000000000000;
    goto LABEL_311;
  }
  v191 = v386;
LABEL_302:
  if ((CGColorSpaceGetType(v190) & 0xFFFFFFFD) == 5)
    v127 |= 0x400u;
  if (v191)
    v128 = -1;
  LODWORD(v41) = v358;
  v163 = v191;
LABEL_312:
  v92 = *(_QWORD *)(v26 + 64);
  v192 = *(_DWORD *)(v26 + 80);
  if ((v192 & 0x100) != 0 && (_DWORD)v92 == 32)
  {
    if (v27 <= 8)
    {
      v148 = v127 | 0x81;
      v128 = -1;
      LODWORD(v193) = 8;
      goto LABEL_337;
    }
    if (v27 <= 0x10)
    {
      v148 = v127 | 0x82;
      v128 = -1;
      goto LABEL_321;
    }
    v148 = v127 | 0x80;
    LODWORD(v193) = 32;
  }
  else
  {
    if ((v192 & 0x100) != 0 && (_DWORD)v92 == 16)
    {
      v148 = v127 | 4;
LABEL_321:
      LODWORD(v193) = 16;
      goto LABEL_337;
    }
    v195 = v27 < 9 || (int)v92 < 9;
    v196 = !v195;
    if (v195)
      v197 = 1;
    else
      v197 = 2;
    v148 = v197 | v127;
    v193 = 16;
    if (!v196)
      v193 = 8;
    if (v193 != (int)v92)
      v128 = -1;
  }
LABEL_337:
  DWORD2(v370) = v193;
  if ((_DWORD)v123 * (_DWORD)v92 != v147)
  {
    if (!v128)
      v128 = -1;
    if ((v192 & 0x1Fu) <= 6 && ((1 << (v192 & 0x1F)) & 0x54) != 0)
      v148 |= 0x100000u;
  }
  switch(((v192 & 0x7000u) - 4096) >> 12)
  {
    case 0u:
      v148 |= v192 & 0x100 ^ 0x100;
      if (v128)
        goto LABEL_359;
      if ((_DWORD)v92 == 8)
        goto LABEL_370;
      if ((_DWORD)v92 != 16)
        goto LABEL_372;
      v198 = 0;
      goto LABEL_371;
    case 1u:
      v148 |= 0x200u;
      if (v128)
        goto LABEL_359;
      v198 = (unint64_t)((_DWORD)v92 == 8) << 13;
      if ((_DWORD)v92 != 8 && (_DWORD)v92 != 32)
        goto LABEL_372;
      goto LABEL_371;
    case 2u:
      if (v128)
        goto LABEL_359;
      if ((_DWORD)v92 == 16)
      {
LABEL_370:
        v198 = 4096;
        goto LABEL_371;
      }
LABEL_372:
      v199 = -1;
      break;
    case 3u:
      if (v128)
        v199 = v128;
      else
        v199 = -1;
      if (v128 || (_DWORD)v92 != 32)
        break;
      v198 = 0x2000;
      goto LABEL_371;
    default:
      if (v128)
      {
LABEL_359:
        v199 = v128;
      }
      else
      {
        v198 = 4096;
        if ((_DWORD)v92 != 16)
          v198 = 0x2000;
        if ((_DWORD)v92 == 32 || (_DWORD)v92 == 16)
        {
LABEL_371:
          v199 = 0;
          *(_QWORD *)&v375 = v198;
        }
        else
        {
          v199 = 0;
        }
      }
      break;
  }
  if (*((uint64_t *)&v376[0] + 1) >= 1
    && *((uint64_t *)&v376[0] + 1) <= (uint64_t)((*((_QWORD *)&v374 + 1) + 63) & 0xFFFFFFFFFFFFFFBFLL))
  {
    DWORD2(v371) = DWORD2(v376[0]);
    if (v199)
    {
LABEL_376:
      if (v163)
      {
        v200 = v163;
        switch(HIDWORD(v370))
        {
          case 1:
            HIDWORD(v370) = 3;
            *(_QWORD *)&v369 = img_decode_read_alpha;
            *(_QWORD *)&v377 = decode_create(v123, v92, v147, 0, v148, v126);
            v202 = 4195463;
            goto LABEL_387;
          case 8:
            HIDWORD(v370) = 9;
            *(_QWORD *)&v369 = img_decode_read_alpha;
            *(_QWORD *)&v377 = decode_create(v123, v92, v147, 0, v148, v126);
            v210 = v148 & 0x487;
            if (DWORD2(v370) == 16)
              v210 = v148 & 0x487 | 0x100;
            if (DWORD2(v370) == 32)
              v211 = v148 & 0x487 | 0x200;
            else
              v211 = v210;
            *((_QWORD *)&v377 + 1) = decode_create(DWORD1(v370), SDWORD2(v370), DWORD1(v370) * DWORD2(v370), (uint64_t)&v200[(v148 >> 20) & 2], v211, v209);
            *(_QWORD *)&v378 = decode_create(1, SDWORD2(v370), SDWORD2(v370), (uint64_t)&v200[((int)(v148 << 9) >> 31) & (2 * DWORD1(v370))], v211, v212);
            goto LABEL_385;
          case 2:
            HIDWORD(v370) = 4;
            *(_QWORD *)&v369 = img_decode_read_alpha;
            *(_QWORD *)&v377 = decode_create(v123, v92, v147, 0, v148, v126);
            v202 = 2098311;
LABEL_387:
            v207 = v148 & v202;
            if (DWORD2(v370) == 32)
            {
              v207 |= 0x200u;
              v203 = v352;
              v208 = (uint64_t)v200;
            }
            else
            {
              v203 = v352;
              v208 = (uint64_t)v200;
              if (DWORD2(v370) == 16)
                v207 |= 0x100u;
            }
            *((_QWORD *)&v377 + 1) = decode_create(v123, SDWORD2(v370), DWORD2(v370) * (int)v123, v208, v207, v201);
            goto LABEL_399;
        }
        *(_QWORD *)&v369 = img_decode_read;
        v204 = v123;
        v205 = v147;
        v206 = (uint64_t)v163;
LABEL_384:
        *(_QWORD *)&v377 = decode_create(v204, v92, v205, v206, v148, v126);
LABEL_385:
        v203 = v352;
LABEL_399:
        LODWORD(v41) = v358;
        goto LABEL_400;
      }
LABEL_383:
      *(_QWORD *)&v369 = img_decode_read;
      v204 = v123;
      v205 = v147;
      v206 = 0;
      goto LABEL_384;
    }
  }
  else
  {
    DWORD2(v371) = DWORD2(v374);
    if (v199)
      goto LABEL_376;
  }
LABEL_382:
  *(_QWORD *)&v369 = img_raw_read;
  v203 = v352;
LABEL_400:
  if ((v117 & 0x28) == 0x28)
    goto LABEL_614;
  v181 = &v368;
  if ((v117 & 0x80) != 0)
  {
    v181 = (__int128 *)img_interpolate_stage((uint64_t)&v385, (uint64_t)&v368, v26, 1, *(_QWORD *)v26, *(_QWORD *)(v26 + 8), a12, a14);
    LODWORD(v41) = v358;
  }
  if ((v117 & 0x10) != 0)
    _CGHandleAssert("img_colormask_stage", 2270, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGSImage.c", "", "Unimplemented", v34, v35, v36, v339);
  if ((v117 & 0x28) == 8)
LABEL_614:
    _CGHandleAssert("img_colorindex_stage", 2380, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGSImage.c", "", "Unimplemented", v34, v35, v36, v339);
  v179 = (int *)v363;
  v341 = a13;
  if ((v117 & 2) != 0)
  {
    v214 = img_interpolate_stage((uint64_t)(v181 + 18), (uint64_t)v181, v26, v203, (int)v362, v340, a12, a14);
    if ((__int128 *)v214 == v181)
    {
      LOBYTE(v117) = v117 & 0xFD;
      v96 = v355;
      v166 = *((_DWORD *)v181 + 12);
      v213 = *((_DWORD *)v181 + 13);
      if (v115 - v355 == v358)
      {
        v115 = *((_DWORD *)v181 + 13);
      }
      else
      {
        v231 = (double)v213 / (double)v358;
        v232 = vcvtpd_s64_f64(v231 * (double)v115);
        v96 = vcvtmd_s64_f64(v231 * (double)v355);
        if (v213 >= v232)
          v115 = v232;
        else
          v115 = *((_DWORD *)v181 + 13);
      }
      goto LABEL_410;
    }
    v166 = v362;
    v213 = v358;
    v181 = (__int128 *)v214;
  }
  else
  {
    v166 = v362;
    v213 = v41;
  }
  v96 = v355;
LABEL_410:
  if ((v117 & 4) != 0)
    _CGHandleAssert("img_colormatch_stage", 2796, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGSImage.c", "", "Unimplemented", v34, v35, v36, v339);
  if (v347)
  {
    if (*(_QWORD *)(v26 + 120))
    {
      v180 = v115;
      v182 = 0;
    }
    else
    {
      v182 = 0;
      v215 = (v213 - v115) & 0xFFFFFFF0;
      v216 = v213 - v96 + 15;
      if ((v216 | 0xF) >= v213)
        v217 = v213;
      else
        v217 = v216 & 0xFFFFFFF0;
      v218 = v217 - v215 + 32;
      v219 = v213 - v217;
      if (v218 < v213)
      {
        v96 = v219;
      }
      else
      {
        v215 = 0;
        v96 = 0;
      }
      v180 = v213 - v215;
    }
    v94 = v213;
    LODWORD(v362) = v166;
  }
  else
  {
    v182 = 0;
    v94 = v213;
    LODWORD(v362) = v166;
    v180 = v115;
  }
LABEL_423:
  v220 = v94;
  v221 = v96;
  v222 = v350;
  if (!v350)
    goto LABEL_455;
  v223 = *((_DWORD *)v181 + 10);
  if (v223 >= 9)
  {
    if (v350 == 4)
    {
      v222 = 3;
    }
    else if (v350 == 2)
    {
      v222 = 1;
    }
  }
  v224 = *((unsigned int *)v181 + 11);
  if (v222 == v224)
    goto LABEL_455;
  *(__int128 *)((char *)v181 + 296) = 0u;
  *((_QWORD *)v181 + 71) = 0;
  *(__int128 *)((char *)v181 + 536) = 0u;
  *(__int128 *)((char *)v181 + 520) = 0u;
  *(__int128 *)((char *)v181 + 504) = 0u;
  *(__int128 *)((char *)v181 + 488) = 0u;
  *(__int128 *)((char *)v181 + 472) = 0u;
  *(__int128 *)((char *)v181 + 456) = 0u;
  *(__int128 *)((char *)v181 + 440) = 0u;
  *(__int128 *)((char *)v181 + 424) = 0u;
  *(__int128 *)((char *)v181 + 408) = 0u;
  *(__int128 *)((char *)v181 + 392) = 0u;
  *(__int128 *)((char *)v181 + 376) = 0u;
  *(__int128 *)((char *)v181 + 360) = 0u;
  *(__int128 *)((char *)v181 + 344) = 0u;
  *(__int128 *)((char *)v181 + 328) = 0u;
  *(__int128 *)((char *)v181 + 312) = 0u;
  *(__int128 *)((char *)v181 + 552) = 0u;
  *((_QWORD *)v181 + 36) = v181;
  if (*((_QWORD *)v181 + 1))
    *((_QWORD *)v181 + 37) = img_extent;
  *((_QWORD *)v181 + 38) = img_alphamerge_read;
  *((_QWORD *)v181 + 39) = img_alphamerge_end;
  *((_DWORD *)v181 + 80) = 512;
  v225 = *((_QWORD *)v181 + 6);
  *((_QWORD *)v181 + 42) = v225;
  v226 = *((_DWORD *)v181 + 9);
  *((_DWORD *)v181 + 81) = v226;
  *((_DWORD *)v181 + 82) = v223;
  *((_DWORD *)v181 + 83) = v222;
  v227 = v222;
  if (v224 > 9)
  {
LABEL_451:
    CGPostError((uint64_t)"%s: Assertion failed - unknown source alpha", v92, v31, v32, v33, v34, v35, v36, (char)"img_alphamerge_stage");
LABEL_454:
    v222 = v227;
    goto LABEL_455;
  }
  v228 = 1;
  if (((1 << v224) & 0x1E) != 0)
    goto LABEL_438;
  v229 = 1 << v224;
  if ((v229 & 0x301) == 0)
  {
    if ((v229 & 0x60) != 0)
      goto LABEL_455;
    goto LABEL_451;
  }
  v228 = 0;
LABEL_438:
  if (v222 > 9)
  {
LABEL_453:
    CGPostError((uint64_t)"%s: Assertion failed - unknown destination alpha", v92, v31, v32, v33, v34, v35, v36, (char)"img_alphamerge_stage");
    goto LABEL_454;
  }
  if (((1 << v222) & 0x1E) == 0)
  {
    if (((1 << v222) & 0x301) != 0)
    {
      if (v228)
      {
        *((_QWORD *)v181 + 47) = 1;
        *((_DWORD *)v181 + 86) = (v225 + v225 * v226) * (v223 / 8);
        goto LABEL_446;
      }
LABEL_445:
      *((_QWORD *)v181 + 47) = 0;
      goto LABEL_446;
    }
    goto LABEL_453;
  }
  if ((v228 & 1) != 0)
    goto LABEL_445;
  *((_QWORD *)v181 + 47) = 2;
  v230 = v223 / 8;
  *((_DWORD *)v181 + 86) = v226 * v225 * v230;
  *((_DWORD *)v181 + 87) = v230 * v225;
LABEL_446:
  *((_QWORD *)v181 + 50) = a12;
  v181 += 18;
LABEL_455:
  v350 = v222;
  if (v179)
  {
    v233 = *v179;
    ComponentType = CGImageGetComponentType(*(_QWORD *)(v26 + 40));
    v240 = v233 == 34082816;
    if (v233 == 34082816)
      v241 = ComponentType;
    else
      v241 = a12;
    if (v233 == 34082816 && v241 == 5)
    {
      v241 = 5;
      *((_QWORD *)v181 + 14) = 5;
      v240 = 1;
    }
  }
  else
  {
    CGImageGetComponentType(*(_QWORD *)(v26 + 40));
    v240 = 0;
    v241 = a12;
  }
  if (v343)
  {
    v345 = img_data_depth(v181, v241, v240, v235, v236, v237, v238, v239);
    if (!v345)
    {
      (*((void (**)(__int128 *))v181 + 3))(v181);
      img_release_resources(v26);
      CGPostError((uint64_t)"%s: Cannot process image", v276, v277, v278, v279, v280, v281, v282, v357);
      return 0;
    }
  }
  v344 = v182;
  v183 = v166 - v182;
  v96 = v221;
  v184 = v180 - v221;
  if (!v181)
  {
    v244 = 0;
    v243 = 0;
    v242 = 0;
    v248 = 1;
    v94 = v220;
    goto LABEL_476;
  }
  v94 = v220;
LABEL_467:
  v242 = 0;
  v243 = 0;
  v244 = 0;
  v245 = v181;
  do
  {
    v246 = *((_DWORD *)v245 + 14);
    if (v246)
    {
      v243 += v246;
      ++v244;
      v242 |= *((_DWORD *)v245 + 8);
    }
    v247 = *((_DWORD *)v245 + 15);
    if (v247)
    {
      v243 += v247;
      ++v244;
      v242 |= *((_DWORD *)v245 + 8);
    }
    v245 = *(__int128 **)v245;
  }
  while (v245 && (v243 & 0x80000000) == 0);
  v248 = 0;
LABEL_476:
  v356 = v96;
  v249 = v183;
  v359 = v94;
  if (*(_QWORD *)(v26 + 128))
  {
    v250 = 0;
LABEL_478:
    v251 = 0;
    goto LABEL_479;
  }
  v250 = *(_QWORD *)(v26 + 136);
  if (!v250)
    goto LABEL_478;
  v255 = *(uint64_t (**)(_QWORD, __n128))(v250 + 168);
  if (!v255)
    goto LABEL_478;
  v251 = v255(*(_QWORD *)(v250 + 24), v164);
LABEL_479:
  v348 = v180;
  v252 = (v243 + v251);
  if ((int)v252 < 1)
  {
    LODWORD(v254) = 1;
    if ((v252 & 0x80000000) != 0)
    {
LABEL_563:
      (*((void (**)(__int128 *, __n128))v181 + 3))(v181, v164);
      img_release_resources(v26);
      CGPostError((uint64_t)"%s: Cannot allocate memory", v305, v306, v307, v308, v309, v310, v311, v357);
      return 0;
    }
  }
  else
  {
    v253 = 16 * v244 + 16;
    v254 = (4096 - v253) / v252;
    if (!(_DWORD)v254)
    {
      LODWORD(v252) = v252 + v253;
      if ((v252 & 0x80000000) != 0)
        goto LABEL_563;
    }
  }
  if ((_DWORD)v254)
    v256 = 0;
  else
    v256 = v252;
  v257 = malloc_type_calloc(1uLL, v256 + 136, 0x4BC742A8uLL);
  if (!v257)
    goto LABEL_563;
  v101 = v257;
  v257[22] = v353;
  v257[23] = v352;
  v257[24] = a12;
  if ((_DWORD)v252)
  {
    v261 = v254 <= 1 ? 1 : v254;
    if ((v248 & 1) == 0)
    {
      v262 = v257 + 34;
      if ((_DWORD)v254)
        v262 = v386;
      v263 = ((unint64_t)v262 + 15) & 0xFFFFFFFFFFFFFFF0;
      v264 = v181;
      do
      {
        v265 = *((_DWORD *)v264 + 14);
        if (v265)
        {
          *((_DWORD *)v264 + 16) = v261;
          *((_QWORD *)v264 + 9) = v263;
          v263 += (v265 * (uint64_t)v261 + 15) & 0xFFFFFFFFFFFFFFF0;
        }
        v266 = *((_DWORD *)v264 + 15);
        if (v266)
        {
          *((_DWORD *)v264 + 16) = v261;
          *((_QWORD *)v264 + 10) = v263;
          v263 += (v266 * (uint64_t)v261 + 15) & 0xFFFFFFFFFFFFFFF0;
        }
        v264 = *(__int128 **)v264;
      }
      while (v264);
    }
  }
  v267 = *(_DWORD *)v345;
  v268 = (((*(_DWORD *)v345 >> 22) * v249) >> 3) + 15;
  v269 = v268 & 0x3FFFFFF0;
  if (v350)
  {
    v270 = (v267 >> 2) & 3;
    v271 = ((((((BYTE2(v267) & 0x3F) + 7) & 0x78) * v249) >> 3) + 15) & 0x3FFFFFF0;
    v272 = v271 + v269;
    if (v270 != 1)
    {
      v271 = 0;
      v272 = v269;
    }
    if (v270 == 2)
      v271 = v269;
    v354 = v271;
    v273 = v270 != 2 && v270 == 1;
    v361 = v273;
    v274 = v270 != 2 && v270 != 1;
    v351 = v274;
    if (v270 == 2)
      v275 = v269;
    else
      v275 = v272;
  }
  else
  {
    v354 = 0;
    v361 = 0;
    v351 = 1;
    v275 = v268 & 0x3FFFFFF0;
  }
  v283 = 0;
  if (v242 && *MEMORY[0x1E0C9A980])
  {
    v284 = "";
    v285 = "DECODE";
    if ((v242 & 0x400) == 0)
      v285 = "";
    v286 = "|";
    if ((((v242 & 0x3FF) != 0) & (v242 >> 10)) != 0)
      v287 = "|";
    else
      v287 = "";
    v288 = "ALPHAM";
    if ((v242 & 0x200) == 0)
      v288 = "";
    if ((((v242 & 0x1FF) != 0) & (v242 >> 9)) != 0)
      v289 = "|";
    else
      v289 = "";
    v290 = "ALPHA";
    if ((v242 & 0x100) == 0)
      v290 = "";
    if (((v242 != 0) & (v242 >> 8)) != 0)
      v291 = "|";
    else
      v291 = "";
    v292 = "COLORMASK";
    if ((v242 & 0x10) == 0)
      v292 = "";
    if ((((v242 & 0xF) != 0) & (v242 >> 4)) != 0)
      v293 = "|";
    else
      v293 = "";
    v294 = "COLORINDEX";
    if ((v242 & 8) == 0)
      v294 = "";
    if ((((v242 & 7) != 0) & (v242 >> 3)) != 0)
      v295 = "|";
    else
      v295 = "";
    v296 = "COLORSPACE";
    if ((v242 & 4) == 0)
      v296 = "";
    if ((((v242 & 3) != 0) & (v242 >> 2)) == 0)
      v286 = "";
    if ((v242 & 2) != 0)
      v284 = "INTERP";
    v283 = __str;
    snprintf(__str, 0x100uLL, "CGSImageData (%s%s%s%s%s%s%s%s%s%s%s%s%s)", v285, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v286, v284);
  }
  if (v250)
  {
    v297 = *(uint64_t (**)(_QWORD))(v250 + 168);
    v185 = v352;
    if (v297)
      v298 = v297(*(_QWORD *)(v250 + 24));
    else
      v298 = 0;
  }
  else
  {
    v298 = 0;
    v185 = v352;
  }
  image_data_handle = create_image_data_handle(v275, v184, v298 + 15, v341, (uint64_t)v283, v258, v259, v260);
  v101[9] = image_data_handle;
  if (!image_data_handle)
  {
    free(v101);
    goto LABEL_563;
  }
  *((_DWORD *)v101 + 12) = v269;
  v101[10] = 0;
  v300 = image_data_handle[2];
  v101[7] = v300;
  if (v361)
  {
    v101[8] = v300 + v269 * v184;
    v301 = v356;
    *((_DWORD *)v101 + 13) = v354;
    v302 = v345;
    v303 = (_QWORD *)(*(_QWORD *)(v345 + 8) + 8);
    v304 = v359;
  }
  else
  {
    v304 = v359;
    v301 = v356;
    if (v351)
    {
      v101[8] = 0;
      *((_DWORD *)v101 + 13) = 0;
      v302 = v345;
      v303 = *(_QWORD **)(v345 + 8);
    }
    else
    {
      v101[8] = v300;
      *((_DWORD *)v101 + 13) = v354;
      v302 = v345;
      v303 = (_QWORD *)(*(_QWORD *)(v345 + 8) + 8);
    }
  }
  *v101 = *v303;
  v101[1] = v302;
  v101[2] = (int)v362;
  v101[3] = v304;
  *((_DWORD *)v101 + 8) = v344;
  *((_DWORD *)v101 + 9) = v301;
  *((_DWORD *)v101 + 10) = v249;
  *((_DWORD *)v101 + 11) = v184;
  v312 = v304 - v348;
  v313 = (uint64_t (*)(_QWORD, _QWORD))*((_QWORD *)v181 + 1);
  if (v313)
  {
    LODWORD(v365) = v344;
    HIDWORD(v365) = v304 - v348;
    v366 = __PAIR64__(v184, v249);
    if ((v313(v181, &v365) & 0x80000000) != 0)
    {
      CGSImageDataHandleRelease(v101[9]);
      free(v101);
      (*((void (**)(__int128 *))v181 + 3))(v181);
LABEL_593:
      img_release_resources(v26);
      return 0;
    }
  }
  if (v184 >= 1
    && *((_DWORD *)v101 + 12) <= (signed int)(0x7FFFFFFFu / v184)
    && *((_DWORD *)v101 + 13) <= (signed int)(0x7FFFFFFFu / v184))
  {
    v323 = 0;
    do
    {
      v314 = v323;
      v324 = (v184 - v323);
      if (v184 <= v323)
        break;
      v325 = *((double *)v101 + 8);
      *(_QWORD *)&v387 = v101[7] + *((int *)v101 + 12) * (uint64_t)v314;
      if (v325 != 0.0)
        *(_QWORD *)&v325 += *((int *)v101 + 13) * (uint64_t)v314;
      v388 = v325;
      v326 = (*((uint64_t (**)(__int128 *, _QWORD, uint64_t, double *, _QWORD *, _QWORD))v181 + 2))(v181, (v314 + v312), v324, &v387, v101 + 6, a14);
      v323 = v326 + v314;
    }
    while (v326 > 0);
  }
  else
  {
    v314 = 0;
  }
  if (v363)
  {
    if ((*(_BYTE *)(v363 + 1) & 0xF) == 0)
    {
      v315 = v101[1];
      if (!v315 || (*(_BYTE *)(v315 + 1) & 0xF) != 0)
      {
        if (CGImageGetComponentType(*(_QWORD *)(v26 + 40)) == 5)
          v321 = 5;
        else
          v321 = 1;
        v101[1] = img_data_depth(v181, v321, 1, v316, v317, v318, v319, v320);
      }
    }
  }
  (*((void (**)(__int128 *))v181 + 3))(v181);
  img_release_resources(v26);
  v101[13] = 0;
  v101[14] = 0;
  v101[15] = 0;
  v98 = v184 - v314;
  if (v184 <= v314)
  {
    v98 = 0;
  }
  else
  {
    if (v184 != *((_DWORD *)v101 + 11))
    {
      *((_DWORD *)v101 + 11) = 0;
LABEL_597:
      CGSImageDataHandleRelease(v101[9]);
      free(v101);
      return 0;
    }
    *((_DWORD *)v101 + 9) += v98;
    *((_DWORD *)v101 + 11) = v314;
    if (!v314)
      goto LABEL_597;
  }
  v95 = v360;
  v107 = (unsigned int *)v363;
  if (!v363)
    return (uint64_t)v101;
LABEL_587:
  if (*v107 != 134886228 && ((unsigned int *)v101[1] != v107 || v101[2] != v95 || v101[3] != v364))
    return img_data_lock_depth((uint64_t)v101, v95, v364, v98, v107, v185, v341, v100);
  return (uint64_t)v101;
}

_QWORD *CGAccessSessionCreate(CGDataProvider *a1)
{
  _QWORD *v2;
  pthread_t v3;
  CGDataProviderRef v4;

  if (!a1)
    return 0;
  v2 = malloc_type_calloc(1uLL, 0x18uLL, 0x10E00404CFD562DuLL);
  if (v2)
  {
    v3 = pthread_self();
    if (get_session_key_pred != -1)
      dispatch_once(&get_session_key_pred, &__block_literal_global_18593);
    pthread_setspecific(get_session_key_session_key, v3);
    v4 = CGDataProviderRetain(a1);
    CGDataProviderLock((uint64_t)v4);
    CGDataProviderRetainData((uint64_t)a1);
    *v2 = a1;
    v2[1] = CGDataProviderRetainBytePtr((uint64_t)a1);
    CGAccessSessionRewind((uint64_t)v2);
  }
  return v2;
}

uint64_t CGDataProviderRetainData(uint64_t result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  if (result)
  {
    v1 = result;
    if (*(_QWORD *)(result + 128))
    {
      pthread_mutex_lock((pthread_mutex_t *)(result + 184));
      CFRetain((CFTypeRef)v1);
      v2 = (unsigned int *)(v1 + 256);
      do
        v3 = __ldxr(v2);
      while (__stxr(v3 + 1, v2));
      if (!v3)
        (*(void (**)(_QWORD))(v1 + 128))(*(_QWORD *)(v1 + 24));
      return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 184));
    }
  }
  return result;
}

uint64_t CGDataProviderLock(uint64_t a1)
{
  CFTypeID v2;
  uint64_t (*v3)(_QWORD);

  if (!a1)
    return 0xFFFFFFFFLL;
  v2 = CFGetTypeID((CFTypeRef)a1);
  if (kCGDataProviderPropertyTrustToken_block_invoke_once != -1)
    dispatch_once(&kCGDataProviderPropertyTrustToken_block_invoke_once, &__block_literal_global_26_6088);
  if (v2 != CGDataProviderGetTypeID_id)
    return 0xFFFFFFFFLL;
  CFRetain((CFTypeRef)a1);
  v3 = *(uint64_t (**)(_QWORD))(a1 + 144);
  if (v3)
    return v3(*(_QWORD *)(a1 + 24));
  if (*(_QWORD *)(a1 + 80))
    return 0;
  return pthread_mutex_lock((pthread_mutex_t *)(a1 + 184));
}

void CGAccessSessionRelease(uint64_t *a1)
{
  CGDataProvider *v2;

  if (a1)
  {
    CGAccessSessionRewind((uint64_t)a1);
    v2 = (CGDataProvider *)*a1;
    CGDataProviderReleaseBytePtr(*a1);
    CGDataProviderReleaseData((uint64_t)v2);
    CGDataProviderUnlock((uint64_t)v2);
    CGDataProviderRelease(v2);
    free(a1);
  }
}

uint64_t CGAccessSessionRewind(uint64_t result)
{
  uint64_t *v1;

  if (result)
  {
    v1 = (uint64_t *)result;
    check_same_thread();
    switch(*(_DWORD *)(*v1 + 20))
    {
      case 0:
      case 2:
        v1[2] = 0;
        goto LABEL_5;
      case 1:
      case 3:
        CGDataProviderRewind(*v1);
LABEL_5:
        result = 1;
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

uint64_t CGDataProviderReleaseData(uint64_t result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  void (*v5)(_QWORD);

  if (result)
  {
    v1 = result;
    if (*(_QWORD *)(result + 128))
    {
      pthread_mutex_lock((pthread_mutex_t *)(result + 184));
      v2 = (unsigned int *)(v1 + 256);
      do
      {
        v3 = __ldxr(v2);
        v4 = v3 - 1;
      }
      while (__stxr(v4, v2));
      if (!v4)
      {
        v5 = *(void (**)(_QWORD))(v1 + 136);
        if (v5)
          v5(*(_QWORD *)(v1 + 24));
      }
      CFRelease((CFTypeRef)v1);
      return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 184));
    }
  }
  return result;
}

uint64_t CGDataProviderUnlock(uint64_t a1)
{
  CFTypeID v2;
  uint64_t (*v3)(_QWORD);
  uint64_t v4;
  uint64_t v5;

  if (a1)
  {
    v2 = CFGetTypeID((CFTypeRef)a1);
    if (kCGDataProviderPropertyTrustToken_block_invoke_once != -1)
      dispatch_once(&kCGDataProviderPropertyTrustToken_block_invoke_once, &__block_literal_global_26_6088);
    if (v2 == CGDataProviderGetTypeID_id)
    {
      v3 = *(uint64_t (**)(_QWORD))(a1 + 152);
      if (v3)
      {
        v4 = v3(*(_QWORD *)(a1 + 24));
      }
      else
      {
        if (*(_QWORD *)(a1 + 80))
        {
          v5 = 0;
          goto LABEL_11;
        }
        v4 = pthread_mutex_unlock((pthread_mutex_t *)(a1 + 184));
      }
      v5 = v4;
LABEL_11:
      CFRelease((CFTypeRef)a1);
      return v5;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t provider_for_destination_get_work_buffer_size(uint64_t a1)
{
  return *(_QWORD *)(a1 + 736);
}

_QWORD *create_image_data_handle(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  malloc_zone_t *v13;
  size_t v14;
  malloc_type_id_t v15;
  void *v17;

  v8 = 0;
  if (a1 && a2)
  {
    v9 = a4;
    if (~a3 / a2 <= a1)
    {
      CGPostError((uint64_t)"%s overflow detected w = %zu h = %zu extra = %zu transient %s %s", a2, a3, a4, a5, a6, a7, a8, (char)"create_image_data_handle");
      return 0;
    }
    v8 = 0;
    v10 = a1 + a1 * a2 + a3;
    if ((v10 & 0xF) != 0)
      v11 = 16 - (v10 & 0xF);
    else
      v11 = 0;
    if (-25 - v11 > v10)
    {
      v8 = malloc_type_malloc(0x18uLL, 0x1080040CCC1B60FuLL);
      if (v8)
      {
        v12 = v10 + v11 + 24;
        if (v9)
        {
          v13 = malloc_default_zone();
          v14 = v12;
          v15 = 1509754142;
        }
        else
        {
          v13 = malloc_default_purgeable_zone();
          v14 = v12;
          v15 = 3604067616;
        }
        v17 = malloc_type_zone_calloc(v13, v14, 1uLL, v15);
        v8[2] = v17;
        if (v17)
        {
          __CFSetLastAllocationEventName();
          *v8 = v12;
          *((_BYTE *)v8 + 8) = v9 ^ 1;
          return v8;
        }
        free(v8);
        return 0;
      }
    }
  }
  return v8;
}

uint64_t CGImageGetComponentType(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;

  if (result)
  {
    v1 = *(_QWORD *)(result + 56);
    if (v1 > 15)
    {
      if (v1 == 16)
      {
        if ((CGImageGetBitmapInfo((CGImageRef)result) & 0x100) != 0)
          return 5;
        else
          return 2;
      }
      else if (v1 == 32)
      {
        if ((CGImageGetBitmapInfo((CGImageRef)result) & 0x100) != 0)
          return 4;
        else
          return 3;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      if (v1 == 10)
        v2 = 6;
      else
        v2 = 0;
      if (v1 == 8)
        return 1;
      else
        return v2;
    }
  }
  return result;
}

void img_release_resources(uint64_t a1)
{
  int v2;
  const void *v3;
  CGColorSpace *v4;

  v2 = *(_DWORD *)(a1 + 28);
  if ((v2 - 3) >= 3)
  {
    if (v2 == 1)
    {
      v4 = *(CGColorSpace **)(a1 + 40);
      if (v4)
        CGColorSpaceRelease(v4);
    }
  }
  else if (*(_BYTE *)(a1 + 104))
  {
    v3 = *(const void **)(a1 + 40);
    if (v3)
      CFRelease(v3);
  }
  if (!*(_QWORD *)(a1 + 128))
    CGDataProviderRelease(*(CGDataProviderRef *)(a1 + 136));
}

_QWORD *CGColorTransformConvertNeedsCMS(_QWORD *result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  CFTypeID v6;
  CGColorSpace *ResolvedColorSpace;
  _QWORD *Cache;
  int ConversionType;
  BOOL v10;
  _QWORD v11[5];

  if (result)
  {
    v5 = result;
    v6 = CFGetTypeID(result);
    if (kCGColorTransformDefaultCMYK_block_invoke_once != -1)
      dispatch_once(&kCGColorTransformDefaultCMYK_block_invoke_once, &__block_literal_global_25_15643);
    if (v6 == CGColorTransformGetTypeID_type_id)
    {
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 0x40000000;
      v11[2] = __create_resolved_source_space_block_invoke;
      v11[3] = &__block_descriptor_tmp_27_15656;
      v11[4] = v5;
      ResolvedColorSpace = (CGColorSpace *)CGColorSpaceCreateResolvedColorSpace(a2, (uint64_t)v11);
      Cache = CGColorTransformGetCache(v5);
      ConversionType = CGColorTransformCacheGetConversionType((uint64_t)Cache, ResolvedColorSpace, a3);
      CGColorSpaceRelease(ResolvedColorSpace);
      if (ConversionType)
        v10 = (ConversionType & 0xFFFFFFFD) == 1;
      else
        v10 = 1;
      return (_QWORD *)!v10;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void img_decode_end(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  void *v10;
  void *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v9 = *(void **)(a1 + 160);
  if (v9)
    free(v9);
  v10 = *(void **)(a1 + 168);
  if (v10)
    free(v10);
  v11 = *(void **)(a1 + 176);
  if (v11)
    free(v11);
  v12 = *(uint64_t **)(a1 + 184);
  if (v12 || *(_QWORD *)(a1 + 192))
  {
    v13 = *(_QWORD *)(a1 + 96);
    if (v13 == -1)
    {
      if (v12)
      {
        CGImageBlockSetRelease(*v12);
        free(v12);
      }
    }
    else
    {
      if (v13)
        _CGHandleAssert("img_decode_end", 1581, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGSImage.c", "stage->param[IMG_DECODE_NDATA] == 0", "param = %ld", a6, a7, a8, *(_QWORD *)(a1 + 96));
      v14 = *(_QWORD *)(a1 + 192);
      if (v14 && v12)
        _CGHandleAssert("img_decode_end", 1585, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGSImage.c", "ptr == NULL || session == NULL", "ptr = %p, session = %p", a6, a7, a8, *(_QWORD *)(a1 + 192));
      if (v14)
      {
        CGDataProviderReleaseBytePtr(*(_QWORD *)(a1 + 144));
      }
      else if (v12)
      {
        CGAccessSessionRelease(*(uint64_t **)(a1 + 184));
      }
    }
  }
}

void provider_for_destination_release_data(uint64_t *a1)
{
  CGDataProviderReleaseData(*a1);
  CGDataProviderReleaseBytePtr(*a1);
}

uint64_t provider_for_destination_retain_data(uint64_t *a1)
{
  CGDataProviderRetainData(*a1);
  return CGDataProviderRetainBytePtr(*a1);
}

uint64_t img_data_depth(_DWORD *a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  if (!a3)
  {
    v9 = (int)a1[10];
    switch(v9)
    {
      case 32:
        if (a2 != 4)
          _CGHandleAssert("img_data_depth", 4574, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGSImage.c", "0", "Bad image component type for 32-bit pipeline: %d", a6, a7, a8, a2);
LABEL_15:
        v12 = a1[9];
        switch(v12)
        {
          case 4:
            if (img_globals_once != -1)
              dispatch_once(&img_globals_once, &__block_literal_global_10874);
            v11 = &qword_1ECDA6EF0;
            return *v11;
          case 3:
            v15 = a1[11];
            if ((v15 - 5) < 2)
              goto LABEL_48;
            if (v15 == 1)
            {
              if (img_globals_once != -1)
                dispatch_once(&img_globals_once, &__block_literal_global_10874);
              v11 = &qword_1ECDA6ED0;
              return *v11;
            }
            if (!v15)
            {
LABEL_48:
              if (img_globals_once != -1)
                dispatch_once(&img_globals_once, &__block_literal_global_10874);
              v11 = &qword_1ECDA6EC0;
              return *v11;
            }
            break;
          case 1:
            if (img_globals_once != -1)
              dispatch_once(&img_globals_once, &__block_literal_global_10874);
            v11 = &qword_1ECDA6EE0;
            return *v11;
        }
        break;
      case 16:
        if (a2 == 5)
        {
LABEL_29:
          v14 = a1[9];
          switch(v14)
          {
            case 4:
              if (img_globals_once != -1)
                dispatch_once(&img_globals_once, &__block_literal_global_10874);
              v11 = &qword_1ECDA6F38;
              return *v11;
            case 3:
              v17 = a1[11];
              switch(v17)
              {
                case 5:
                  goto LABEL_66;
                case 1:
                  if (img_globals_once != -1)
                    dispatch_once(&img_globals_once, &__block_literal_global_10874);
                  v11 = &qword_1ECDA6F28;
                  return *v11;
                case 0:
LABEL_66:
                  if (img_globals_once != -1)
                    dispatch_once(&img_globals_once, &__block_literal_global_10874);
                  v11 = &qword_1ECDA6F18;
                  return *v11;
              }
              break;
            case 1:
              if (img_globals_once != -1)
                dispatch_once(&img_globals_once, &__block_literal_global_10874);
              v11 = &qword_1ECDA6F08;
              return *v11;
          }
        }
        else
        {
          if (a2 != 2)
            _CGHandleAssert("img_data_depth", 4554, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGSImage.c", "0", "Bad image component type for 16-bit pipeline: %d", a6, a7, a8, a2);
LABEL_23:
          v13 = a1[9];
          switch(v13)
          {
            case 4:
              if (img_globals_once != -1)
                dispatch_once(&img_globals_once, &__block_literal_global_10874);
              v11 = &qword_1ECDA6EB0;
              return *v11;
            case 3:
              v16 = a1[11];
              if ((v16 - 5) < 2)
                goto LABEL_57;
              if (v16 == 1)
              {
                if (img_globals_once != -1)
                  dispatch_once(&img_globals_once, &__block_literal_global_10874);
                v11 = &qword_1ECDA6EA0;
                return *v11;
              }
              if (!v16)
              {
LABEL_57:
                if (img_globals_once != -1)
                  dispatch_once(&img_globals_once, &__block_literal_global_10874);
                v11 = &qword_1ECDA6E90;
                return *v11;
              }
              break;
            case 1:
              if (img_globals_once != -1)
                dispatch_once(&img_globals_once, &__block_literal_global_10874);
              v11 = &qword_1ECDA6E80;
              return *v11;
          }
        }
        break;
      case 8:
        if (a2 != 1)
          _CGHandleAssert("img_data_depth", 4521, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGSImage.c", "0", "Bad image component type for 8-bit pipeline: %d", a6, a7, a8, a2);
LABEL_7:
        v10 = a1[9];
        switch(v10)
        {
          case 4:
            if (img_globals_once != -1)
              dispatch_once(&img_globals_once, &__block_literal_global_10874);
            v11 = &qword_1ECDA6E68;
            return *v11;
          case 3:
            v8 = 0;
            switch(a1[11])
            {
              case 0:
              case 5:
              case 6:
                if (img_globals_once != -1)
                  dispatch_once(&img_globals_once, &__block_literal_global_10874);
                v11 = &qword_1ECDA6E40;
                return *v11;
              case 1:
                if (img_globals_once != -1)
                  dispatch_once(&img_globals_once, &__block_literal_global_10874);
                v11 = &qword_1ECDA6E48;
                return *v11;
              case 2:
                if (img_globals_once != -1)
                  dispatch_once(&img_globals_once, &__block_literal_global_10874);
                v11 = &qword_1ECDA6E58;
                return *v11;
              default:
                return v8;
            }
            return v8;
          case 1:
            if (a1[11] == 1)
            {
              if (img_globals_once != -1)
                dispatch_once(&img_globals_once, &__block_literal_global_10874);
              v11 = &qword_1ECDA6F48;
            }
            else
            {
              if (img_globals_once != -1)
                dispatch_once(&img_globals_once, &__block_literal_global_10874);
              v11 = &qword_1ECDA6E28;
            }
            return *v11;
        }
        break;
    }
    return 0;
  }
  v8 = 0;
  switch(a2)
  {
    case 1:
      goto LABEL_7;
    case 2:
      goto LABEL_23;
    case 4:
      goto LABEL_15;
    case 5:
      goto LABEL_29;
    default:
      return v8;
  }
  return v8;
}

_DWORD *decode_create(uint64_t a1, int a2, int a3, uint64_t a4, int a5, __n128 a6)
{
  _DWORD *v6;
  _BOOL8 v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v14;
  int v15;
  double v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  void **v27;
  float *v28;
  int v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  uint64_t v36;
  float *v37;
  void *v38;
  _DWORD *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t *v46;
  _BOOL8 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  float v54;
  float v55;
  int v56;
  double v57;
  uint64_t v58;
  float *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t *v64;
  unsigned int v65;
  _BYTE v66[4];
  unsigned int v67;
  int v68;
  int v69;
  uint64_t v70;
  _BOOL4 v71;
  float *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v74 = a4;
  v6 = 0;
  v75 = *MEMORY[0x1E0C80C00];
  if ((a1 - 256) < 0xFFFFFF01)
    return v6;
  if ((a2 - 256) < 0xFFFFFF01)
    return v6;
  v6 = 0;
  if (a3 < a2 || a3 >= 0x10000)
    return v6;
  LODWORD(v9) = a5;
  v10 = a1;
  if ((a5 & 0x400000) != 0)
    v11 = a1 - 1;
  else
    v11 = -1;
  if ((a5 & 0x200000) != 0)
    v11 = 0;
  if ((a5 & 0x400) != 0)
    v12 = v11;
  else
    v12 = 0xFFFFFFFFLL;
  if ((a5 & 0x87) == 0 || a2 != 32 && (a5 & 0x80) != 0 || a2 != 16 && (a5 & 4) != 0)
    return 0;
  if ((a5 & 1) != 0)
  {
    v68 = a5 & 0x81;
    v14 = 8;
    if (a2 >= 8)
      v15 = 8;
    else
      v15 = a2;
    v67 = v15;
    v73 = ((1 << v15) + 3) & 0x7FFFFFFC;
  }
  else
  {
    if ((a5 & 2) != 0)
    {
      v73 = 0;
      v68 = a5 & 0x82;
      v14 = 16;
      if (a2 >= 16)
        v17 = 16;
      else
        v17 = a2;
      v67 = v17;
      v16 = 65535.0;
      goto LABEL_32;
    }
    v67 = 0;
    v68 = a5 & 0x87;
    v14 = 0;
    v73 = 0;
  }
  v16 = 255.0;
LABEL_32:
  v69 = a1 - 1;
  LODWORD(v70) = v14;
  v18 = a5 & 0x400;
  LODWORD(v72) = v18;
  if (v74)
  {
    v19 = a1;
    v20 = 8 * a1;
    MEMORY[0x1E0C80A78](a1, a6);
    v22 = &v66[-v21];
    bzero(&v66[-v21], 8 * v10);
    v23 = (int)v72;
    v24 = 0;
    v25 = 0;
    if (a2 >= v14)
      v26 = v14;
    else
      v26 = a2;
    v27 = (void **)(&_decode_range + 2 * v26);
    v28 = (float *)(v74 + 4);
    v29 = -1;
    while (1)
    {
      v30 = (float *)(v74 + 8 * v24);
      v31 = *v30;
      v32 = v30[1];
      if (v23)
      {
        if (v24 != v12)
          break;
      }
      v33 = v32 - v31;
      if (v31 == 0.0 && v33 == 1.0)
      {
        v29 = 2 * ((v29 + 1) > 1);
        v38 = *v27;
      }
      else
      {
        if (v31 != 1.0 || v33 != -1.0)
          break;
        if (v29 == 1 || v29 == -1)
          v29 = 1;
        else
          v29 = 2;
        v38 = v27[1];
      }
      *(_QWORD *)&v22[8 * v24] = v38;
LABEL_67:
      if (++v24 == v10)
        goto LABEL_70;
    }
    *(_QWORD *)&v22[8 * v24] = 0;
    v36 = 0;
    if (v24)
    {
      v37 = v28;
      while (v12 == v36 || !*(_QWORD *)&v22[8 * v36] || *(v37 - 1) != v31 || *v37 != v32)
      {
        ++v36;
        v37 += 2;
        if (v24 == v36)
        {
          LODWORD(v36) = v24;
          break;
        }
      }
    }
    if (v24 == v36)
      ++v25;
    v29 = 2;
    goto LABEL_67;
  }
  v22 = 0;
  v25 = v18 != 0;
  v29 = v18 >> 9;
  v19 = a1;
  v20 = 8 * a1;
LABEL_70:
  v40 = malloc_type_malloc(v20 + (v73 + 20) * (unint64_t)v25 + 40, 0x705560E0uLL);
  v6 = v40;
  v41 = v68;
  *v40 = v29;
  v40[1] = v41;
  v40[3] = v10;
  v40[4] = a2;
  v40[5] = a3;
  if (v9 & 0x200)
  {
    v40[7] = 4;
    v42 = v69;
    v43 = v70;
  }
  else
  {
    v42 = v69;
    v43 = v70;
    if (v9 & 0x100)
      v40[7] = 2;
    else
      v40[7] = 0;
  }
  v44 = (int)v72;
  v40[6] = (v9 >> 20) & 1;
  if (v9 & 0x400000)
    v45 = v42;
  else
    v45 = -1;
  if (v9 & 0x200000)
    v45 = 0;
  v40[2] = v45;
  v46 = (uint64_t *)(v40 + 10);
  *((_QWORD *)v40 + 4) = v40 + 10;
  if (v22)
  {
    v47 = v44 != 0;
    if (v10)
    {
      v48 = 0;
      v49 = v73;
      v72 = (float *)(v74 + 4);
      v50 = -1;
      v51 = (uint64_t)&v46[v19];
      v70 = v67;
      v71 = v9;
      do
      {
        ++v50;
        v52 = *(_QWORD *)&v22[8 * v48];
        v46[v48] = v52;
        if (!v52)
        {
          v53 = (float *)(v74 + 8 * v48);
          v54 = *v53;
          v55 = v53[1];
          v56 = v48 == v12 || v47;
          if (v56 | ((v9 & 4) >> 2))
            v57 = 1.0;
          else
            v57 = v16;
          if (v48)
          {
            v58 = 0;
            v59 = v72;
            while (v12 == v58 || *(v59 - 1) != v54 || *v59 != v55)
            {
              ++v58;
              v59 += 2;
              if (v48 == v58)
              {
                LODWORD(v58) = v50;
                goto LABEL_99;
              }
            }
            v60 = *(_QWORD *)&v22[8 * v58];
            *(_QWORD *)&v22[8 * v48] = v60;
            v46[v48] = v60;
          }
          else
          {
            LODWORD(v58) = 0;
          }
LABEL_99:
          if (v48 == v58)
          {
            v61 = v46;
            v9 = v47;
            DECODE_RANGE(v51, v70, v49, v54, v55, v57);
            v47 = v9;
            LOBYTE(v9) = v71;
            v46 = v61;
            *(_QWORD *)&v22[8 * v48] = v51;
            v61[v48] = v51;
            v51 += v49 + 20;
          }
        }
        ++v48;
      }
      while (v48 != v19);
    }
  }
  else
  {
    if ((v9 & 0x480) == 0x400)
    {
      v62 = (uint64_t)&v46[v19];
      DECODE_RANGE(v62, v67, v73, 0.0, (double)~(-1 << v67), 1.0);
      v46 = (uint64_t *)(v6 + 10);
    }
    else
    {
      if (a2 >= v43)
        v63 = v43;
      else
        v63 = a2;
      v62 = (uint64_t)*(&_decode_range + 2 * v63);
    }
    if (v10)
    {
      v64 = v46;
      do
      {
        *v64++ = v62;
        --v19;
      }
      while (v19);
    }
    if ((_DWORD)v12 != -1)
    {
      if (a2 >= v43)
        v65 = v43;
      else
        v65 = a2;
      v46[v12] = (uint64_t)*(&_decode_range + 2 * v65);
    }
  }
  return v6;
}

uint64_t imageProvider_retain_data(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;

  if (!*(_QWORD *)(result + 8))
  {
    v1 = (uint64_t *)result;
    if (*(_BYTE *)(result + 80))
    {
      v2 = 0;
    }
    else
    {
      if (get_provider_options_predicate != -1)
        dispatch_once(&get_provider_options_predicate, &__block_literal_global_19406);
      v2 = get_provider_options_options_singleton;
    }
    result = CGImageProviderCopyImageBlockSetWithOptions(*v1, v2);
    v1[1] = result;
    if (!result)
    {
      result = CGImageProviderCopyImageBlockSetWithOptions(*v1, 0);
      v1[1] = result;
    }
  }
  return result;
}

int8x16_t img_stream_stage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int8x16_t result;

  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 16) = img_raw_read;
  *(_QWORD *)(a1 + 24) = img_decode_end;
  v3 = 48;
  if ((*(_DWORD *)(a2 + 28) - 3) >= 3)
    v3 = 0;
  v4 = 8;
  v5 = *(_QWORD *)(a2 + v3);
  if ((*(_DWORD *)(a2 + 28) - 3) < 3)
    v4 = 56;
  *(_DWORD *)(a1 + 48) = v5;
  *(_DWORD *)(a1 + 52) = *(_QWORD *)(a2 + v4);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
    v7 = *(_DWORD *)(*(_QWORD *)(v6 + 24) + 40);
  else
    v7 = 1;
  v8 = *(_QWORD *)(a2 + 120);
  v9 = **(_DWORD **)(a2 + 112);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = HIWORD(v9) & 0x3F;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = (int)v5;
  *(_QWORD *)(a1 + 128) = v7;
  result = vextq_s8(*(int8x16_t *)(a2 + 136), *(int8x16_t *)(a2 + 136), 8uLL);
  *(int8x16_t *)(a1 + 136) = result;
  *(_QWORD *)(a1 + 152) = v8;
  *(_QWORD *)(a1 + 184) = a3;
  *(_QWORD *)(a1 + 96) = v10;
  *(_QWORD *)(a1 + 104) = ((v9 >> 22) * v5 + 7) >> 3;
  return result;
}

void img_interpolate_end(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *a1;
  if (v2)
    (*(void (**)(void))(v2 + 24))();
  v3 = (_QWORD *)a1[11];
  if (v3)
    resample_destroy(v3);
}

void resample_destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    v2 = (void *)a1[7];
    if (v2)
      free(v2);
    free(a1);
  }
}

CGDataProviderRef CGDataProviderCreateWithData(void *info, const void *data, size_t size, CGDataProviderReleaseDataCallback releaseData)
{
  check_clients_buffer("CGDataProviderCreateWithData", data, size);
  return CGDataProviderCreateWithDataInternal((uint64_t)info, (uint64_t)data, size, (uint64_t)releaseData, 0);
}

void check_clients_buffer(const char *a1, const void *a2, size_t a3)
{
  char *v3;
  size_t v4;
  const void *v5;
  const char *v6;

  v6 = a1;
  v5 = a2;
  v4 = a3;
  if (a2)
  {
    v3 = 0;
    if ((log_buffer_check_in_crash_reporter() & 1) == 1)
    {
      asprintf(&v3, "%s: %p %zu\n", v6, v5, v4);
      qword_1ECDA5E30 = (uint64_t)v3;
    }
    ERROR_CGDataProvider_BufferIsNotReadable();
    ERROR_CGDataProvider_BufferIsNotBigEnough();
    if ((log_buffer_check_in_crash_reporter() & 1) == 1)
    {
      qword_1ECDA5E30 = 0;
      free(v3);
    }
  }
}

uint64_t log_buffer_check_in_crash_reporter()
{
  if (log_buffer_check_in_crash_reporter_predicate != -1)
    dispatch_once(&log_buffer_check_in_crash_reporter_predicate, &__block_literal_global_6624);
  return log_buffer_check_in_crash_reporter_status;
}

uint64_t img_alphamerge_end(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
    return (*(uint64_t (**)(void))(result + 24))();
  return result;
}

uint64_t img_extent(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
    return (*(uint64_t (**)(void))(result + 8))();
  return result;
}

uint64_t bitmap_info_from_depth(char a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;

  v2 = (a1 & 0x30) == 32;
  v3 = v2 << 13;
  v4 = v2 << 12;
  v5 = ((a1 & 0x30) == 16) << 13;
  if (a2 != 8)
    v5 = 0;
  if (a2 == 16)
    v5 = v4;
  if (a2 == 32)
    v5 = v3;
  return v5 | ((a1 & 1) << 8);
}

void *CGFontDBSetInitializer(void *result)
{
  fontDBInitializer = result;
  return result;
}

uint64_t rip_auto_context_operation(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v18;
  char *v19;
  CGColorRef ConstantColor;
  _BOOL4 v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, char *, _QWORD);

  if (a1)
    v6 = *(_QWORD *)(a1 + 288);
  else
    v6 = 0;
  pthread_mutex_lock((pthread_mutex_t *)(v6 + 112));
  if (CFEqual(a4, CFSTR("kCGContextFlush")))
  {
    v7 = (const void *)rip_auto_context_rasterization_loop(v6);
    if (v7)
      CFRelease(v7);
    goto LABEL_21;
  }
  if (CFEqual(a4, CFSTR("kCGContextClear")) || CFEqual(a4, CFSTR("kCGContextErase")))
  {
    *(_BYTE *)(v6 + 104) = 0;
    *(_BYTE *)(v6 + 105) = CFEqual(a4, CFSTR("kCGContextClear")) != 0;
    *(_DWORD *)(v6 + 100) = CFEqual(a4, CFSTR("kCGContextClear")) == 0;
    CGColorSpaceRelease(*(CGColorSpaceRef *)(v6 + 240));
    *(_QWORD *)(v6 + 248) = 0;
    *(_OWORD *)(v6 + 232) = 0u;
    *(_OWORD *)(v6 + 216) = 0u;
    *(_OWORD *)(v6 + 200) = 0u;
    *(_OWORD *)(v6 + 184) = 0u;
    *(_DWORD *)(v6 + 108) = 1;
    rip_auto_context_release_buffer_provider(v6, v8, v9, v10, v11, v12, v13, v14);
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v6 + 176));
  }
  else if (!v6)
  {
LABEL_21:
    v18 = 0;
    goto LABEL_22;
  }
  v15 = *(_QWORD *)(v6 + 88);
  if (!v15)
  {
    v15 = *(_QWORD *)(v6 + 80);
    if (!v15)
      goto LABEL_21;
  }
  v16 = *(_QWORD *)(v15 + 40);
  if (!v16)
    goto LABEL_28;
  v17 = *(uint64_t (**)(void))(v16 + 168);
  if (!v17)
  {
    v18 = 1006;
    goto LABEL_22;
  }
  v18 = v17();
  if (!(_DWORD)v18)
  {
LABEL_28:
    if (CFEqual(a4, CFSTR("kCGContextClear")) || CFEqual(a4, CFSTR("kCGContextErase")))
    {
      v19 = CGGStateCreate();
      ConstantColor = CGColorGetConstantColor(CFSTR("kCGColorWhite"));
      CGGStateSetFillColor((uint64_t)v19, ConstantColor);
      v21 = CFEqual(a4, CFSTR("kCGContextClear")) == 0;
      CGGStateSetCompositeOperation((uint64_t)v19, v21);
      v22 = *(_QWORD *)(v15 + 40);
      if (v22)
      {
        v23 = *(void (**)(uint64_t, uint64_t, char *, _QWORD))(v22 + 64);
        if (v23)
          v23(v22, a2, v19, 0);
      }
      CGGStateRelease((uint64_t)v19);
    }
    goto LABEL_21;
  }
LABEL_22:
  pthread_mutex_unlock((pthread_mutex_t *)(v6 + 112));
  return v18;
}

CGColorRef CGColorGetConstantColor(CFStringRef colorName)
{
  const void *Value;
  CGFloat v3;
  CGFloat v4;

  if (CGColorGetConstantColor_predicate != -1)
    dispatch_once(&CGColorGetConstantColor_predicate, &__block_literal_global_14);
  pthread_mutex_lock(&CGColorGetConstantColor_mutex);
  Value = CFDictionaryGetValue((CFDictionaryRef)CGColorGetConstantColor_constant_colors, colorName);
  if (!Value)
  {
    if (CFEqual(colorName, CFSTR("kCGColorWhite")))
    {
      v3 = 1.0;
    }
    else
    {
      if (!CFEqual(colorName, CFSTR("kCGColorBlack")))
      {
        if (!CFEqual(colorName, CFSTR("kCGColorClear")))
        {
          Value = 0;
          goto LABEL_11;
        }
        v3 = 0.0;
        v4 = 0.0;
        goto LABEL_9;
      }
      v3 = 0.0;
    }
    v4 = 1.0;
LABEL_9:
    Value = CGColorCreateGenericGrayGamma2_2(v3, v4);
    if (Value)
    {
      CFDictionarySetValue((CFMutableDictionaryRef)CGColorGetConstantColor_constant_colors, colorName, Value);
      CFRelease(Value);
    }
  }
LABEL_11:
  pthread_mutex_unlock(&CGColorGetConstantColor_mutex);
  return (CGColorRef)Value;
}

CGContextRef CGBitmapContextCreateWithCallbacks(size_t a1, size_t a2, const void *a3, const void *a4, const void *a5, const void *a6, CFTypeRef cf, uint64_t a8)
{
  CGColorSpace *v15;
  CFTypeID v17;
  int64x2_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFTypeRef v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const __CFDictionary *v31;
  int v32;
  CFMutableArrayRef Mutable;
  const CGRect *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const void *CGDisplayList;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const void *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64x2_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  const __CFDictionary *v84;
  _QWORD v85[2];
  float64x2_t v86;

  if (useDebugBitmap_predicate != -1)
    dispatch_once(&useDebugBitmap_predicate, &__block_literal_global_7702);
  if (useDebugBitmap_use_bitmap)
  {
    v15 = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceSRGB"));
    return CGBitmapContextCreateWithData(0, a1, a2, 8uLL, 0, v15, 1u, 0, 0);
  }
  if (!cf || (v17 = CFGetTypeID(cf), v17 == CFDictionaryGetTypeID()))
  {
    if (a1 - 0x80000000 >= 0xFFFFFFFF80000001 && a2 - 0x80000000 >= 0xFFFFFFFF80000001)
    {
      v18 = (int64x2_t *)malloc_type_calloc(1uLL, 0x48uLL, 0x10E00409E4AD1ABuLL);
      if (v18)
      {
        v19 = (uint64_t)v18;
        v18->i64[0] = a1;
        v18->i64[1] = a2;
        v18[1] = vdupq_n_s64(0x4052000000000000uLL);
        v18[2].i64[0] = (uint64_t)_Block_copy(a3);
        *(_QWORD *)(v19 + 40) = _Block_copy(a4);
        *(_QWORD *)(v19 + 48) = _Block_copy(a5);
        *(_QWORD *)(v19 + 56) = _Block_copy(a6);
        if (cf)
          v22 = CFRetain(cf);
        else
          v22 = 0;
        *(_QWORD *)(v19 + 64) = v22;
        v23 = (_QWORD *)CGContextCreateWithDelegateAndInfo(0, 9, 0, 0, v19, (uint64_t)automatic_bitmap_context_context_finalize, v20, v21);
        if (!v23)
        {
          CGPostError((uint64_t)"%s: failed to create Automatic context.", v24, v25, v26, v27, v28, v29, v30, (char)"CGBitmapContextCreateWithCallbacks");
          automatic_bitmap_context_info_release(v19, v73, v74, v75, v76, v77, v78, v79);
          return (CGContextRef)v23;
        }
        v82 = *(_OWORD *)(v19 + 32);
        v83 = *(_OWORD *)(v19 + 48);
        v31 = *(const __CFDictionary **)(v19 + 64);
        v84 = v31;
        v80 = *(uint64x2_t *)v19;
        v81 = *(_OWORD *)(v19 + 16);
        LODWORD(v85[0]) = 0;
        if (CGCFDictionaryGetInteger(v31, CFSTR("kCGAutoBitDepthMax"), v85))
          v32 = v85[0];
        else
          v32 = 5;
        Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
        v85[0] = 0;
        v85[1] = 0;
        v86 = vcvtq_f64_u64(*(uint64x2_t *)v19);
        CGDisplayList = (const void *)CG::DisplayList::createCGDisplayList(0, (const __CFDictionary *)v85, v34, v35, v36, v37, v38, v39);
        if (CGDisplayList)
        {
          v48 = CGDisplayList;
          v49 = CGDisplayListContextCreate(CGDisplayList, v41, v42, v43, v44, v45, v46, v47);
          if (v49)
          {
            v57 = (const void *)v49;
            CGContextErase(v49, v50, v51, v52, v53, v54, v55, v56);
            v58 = (char *)malloc_type_calloc(1uLL, 0x138uLL, 0x10E00403573DA66uLL);
            if (v58)
            {
              v59 = (uint64_t)v58;
              *((_OWORD *)v58 + 2) = v82;
              *((_OWORD *)v58 + 3) = v83;
              *(uint64x2_t *)v58 = v80;
              *((_OWORD *)v58 + 1) = v81;
              *((_QWORD *)v58 + 8) = v84;
              *((_QWORD *)v58 + 9) = v48;
              *((_QWORD *)v58 + 10) = v57;
              *((_QWORD *)v58 + 11) = 0;
              *((_DWORD *)v58 + 24) = v32;
              *(_QWORD *)(v58 + 100) = 0;
              *((_DWORD *)v58 + 27) = 1;
              *((_QWORD *)v58 + 14) = 850045863;
              *(_OWORD *)(v58 + 152) = 0u;
              *(_OWORD *)(v58 + 136) = 0u;
              *(_OWORD *)(v58 + 120) = 0u;
              *((_QWORD *)v58 + 21) = 0;
              *((_QWORD *)v58 + 22) = Mutable;
              *(_OWORD *)(v58 + 248) = 0u;
              *(_OWORD *)(v58 + 232) = 0u;
              *(_OWORD *)(v58 + 216) = 0u;
              *(_OWORD *)(v58 + 200) = 0u;
              *(_OWORD *)(v58 + 184) = 0u;
              *(_OWORD *)(v58 + 280) = 0u;
              *(_OWORD *)(v58 + 296) = 0u;
              *(_OWORD *)(v58 + 264) = 0u;
              pthread_mutex_init((pthread_mutex_t *)(v58 + 112), 0);
              v67 = (_QWORD *)CGContextDelegateCreate(v59, v60, v61, v62, v63, v64, v65, v66);
              CGContextDelegateSetCallbacks(v67, (uint64_t)&RIPAutomaticContextDelegateCreate_callbacks, 19, v68, v69, v70, v71, v72);
              v23[5] = v67;
              if (v67)
                return (CGContextRef)v23;
              goto LABEL_30;
            }
            CFRelease(v48);
          }
          else
          {
            v57 = v48;
          }
          CFRelease(v57);
        }
        v23[5] = 0;
LABEL_30:
        CGPostError((uint64_t)"%s: failed to create delegate.", v41, v42, v43, v44, v45, v46, v47, (char)"CGBitmapContextCreateWithCallbacks");
        CFRelease(v23);
        return 0;
      }
    }
  }
  CGPostError((uint64_t)"%s: failed to create CGAutomaticBitmapContextInfo.", a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)cf, a8, (char)"CGBitmapContextCreateWithCallbacks");
  return 0;
}

uint64_t CG::DisplayListRecorder::recordAction(CFArrayRef *a1, int a2, const void *a3, const void *a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int64x2_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;

  v7 = (char *)CG::DisplayListRecorder::currentDisplayList(a1);
  if (!v7)
    return 1000;
  if (*((double *)v7 + 5) == INFINITY || *((double *)v7 + 6) == INFINITY)
    return 0;
  v16 = 0;
  if (*((double *)v7 + 7) != 0.0 && *((double *)v7 + 8) != 0.0)
  {
    v17 = (int64x2_t *)(v7 + 16);
    switch(a2 & 0xF)
    {
      case 1:
      case 4:
        goto LABEL_13;
      case 2:
        if (v7[73])
          *(CGRect *)(v7 + 88) = CGRectNull;
LABEL_13:
        v16 = v7[74];
        if (!v7[74])
          return v16;
        v18 = operator new();
        *(_DWORD *)(v18 + 8) = (a2 << 8) | 8;
        *(CGRect *)(v18 + 16) = CGRectInfinite;
        *(_OWORD *)(v18 + 48) = 0u;
        *(_OWORD *)(v18 + 64) = 0u;
        *(_QWORD *)v18 = &off_1E1629158;
        *(_QWORD *)(v18 + 80) = 0;
        *(_QWORD *)(v18 + 88) = 0;
        goto LABEL_20;
      case 3:
        v16 = v7[74];
        if (!v7[74])
          return v16;
        v19 = CG::DisplayList::cfTypeResourceForCFType((CG::DisplayList *)(v7 + 16), a4);
        if (!v19)
          return 1000;
        v20 = v19;
        v18 = operator new();
        *(_DWORD *)(v18 + 8) = (a2 << 8) | 8;
        *(CGRect *)(v18 + 16) = CGRectInfinite;
        *(_OWORD *)(v18 + 48) = 0u;
        *(_OWORD *)(v18 + 64) = 0u;
        *(_QWORD *)v18 = &off_1E1629158;
        *(_QWORD *)(v18 + 80) = 0;
        *(_QWORD *)(v18 + 88) = v20;
LABEL_20:
        CG::DisplayList::appendEntry(v17, v18);
        break;
      case 5:
        v21 = CG::DisplayList::cfTypeResourceForCFType((CG::DisplayList *)(v7 + 16), a4);
        v22 = CG::DisplayList::cfTypeResourceForCFType((CG::DisplayList *)v17, a3);
        if (!v22)
          return 1000;
        v23 = v22;
        v18 = operator new();
        *(_DWORD *)(v18 + 8) = (a2 << 8) | 8;
        *(CGRect *)(v18 + 16) = CGRectInfinite;
        *(_OWORD *)(v18 + 48) = 0u;
        *(_OWORD *)(v18 + 64) = 0u;
        *(_QWORD *)v18 = &off_1E1629158;
        *(_QWORD *)(v18 + 80) = v23;
        *(_QWORD *)(v18 + 88) = v21;
        goto LABEL_20;
      case 6:
        CGPostError((uint64_t)"Unimplemented", v8, v9, v10, v11, v12, v13, v14, v25);
        return 1006;
      default:
        return 0;
    }
    return 0;
  }
  return v16;
}

uint64_t dlRecorder_Operation(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef cf1, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFArrayRef *v8;
  CFArrayRef *v11;
  int v12;
  CFTypeRef v13;
  const void *v15;

  if (!a1 || (v8 = *(CFArrayRef **)(a1 + 288)) == 0)
  {
    CGPostError((uint64_t)"%s: CGContextDelegateGetInfo() returned NULL", a2, a3, (uint64_t)cf1, a5, a6, a7, a8, (char)"dlRecorder_Operation");
    return 1000;
  }
  if (a5)
  {
    if (CFEqual(cf1, CFSTR("kCGContextDisplayList")))
    {
      v11 = v8;
      v12 = 6;
      v13 = 0;
    }
    else
    {
      v11 = v8;
      v12 = 5;
      v13 = cf1;
    }
    v15 = (const void *)a5;
    return CG::DisplayListRecorder::recordAction(v11, v12, v13, v15);
  }
  if (CFEqual(cf1, CFSTR("kCGContextErase")))
  {
    v11 = v8;
    v12 = 2;
LABEL_13:
    v13 = 0;
LABEL_14:
    v15 = 0;
    return CG::DisplayListRecorder::recordAction(v11, v12, v13, v15);
  }
  if (CFEqual(cf1, CFSTR("kCGContextClear")))
  {
    v11 = v8;
    v12 = 1;
    goto LABEL_13;
  }
  if (CFEqual(cf1, CFSTR("EndTag")))
  {
    v11 = v8;
    v12 = 5;
    v13 = cf1;
    goto LABEL_14;
  }
  return 1006;
}

void CGContextErase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void (*v9)(void);
  uint64_t v10;

  if (!a1)
  {
    v10 = 0;
LABEL_7:
    handle_invalid_context((char)"CGContextErase", v10, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    v10 = a1;
    goto LABEL_7;
  }
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    v9 = *(void (**)(void))(v8 + 168);
    if (v9)
      v9();
  }
}

uint64_t CGCFDictionaryGetInteger(CFDictionaryRef theDict, const void *a2, _DWORD *a3)
{
  uint64_t result;
  const __CFNumber *v6;
  CFTypeID v7;
  int valuePtr;

  result = 0;
  if (theDict)
  {
    if (a2)
    {
      result = (uint64_t)CFDictionaryGetValue(theDict, a2);
      if (result)
      {
        v6 = (const __CFNumber *)result;
        v7 = CFGetTypeID((CFTypeRef)result);
        if (v7 == CFNumberGetTypeID())
        {
          valuePtr = 0;
          result = CFNumberGetValue(v6, kCFNumberIntType, &valuePtr);
          if ((_DWORD)result)
          {
            if (a3)
              *a3 = valuePtr;
            return 1;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

CGRect CGPathGetPathBoundingBox(CGPathRef path)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  CFTypeID v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  CGRect result;

  v8 = 0.0;
  if (path && (CGPathDisableTypeValidation || (v10 = CFGetTypeID(path), v10 == CGPathGetTypeID())))
  {
    v11 = CG::Path::path_bounding_box((CGPathRef)((char *)path + 16), v1, v2, v3, v4, v5, v6, v7);
    v8 = v14;
  }
  else
  {
    v12 = INFINITY;
    v11 = INFINITY;
    v13 = 0.0;
  }
  v15 = v8;
  result.size.height = v13;
  result.size.width = v15;
  result.origin.y = v12;
  result.origin.x = v11;
  return result;
}

double CG::Path::path_bounding_box(CG::Path *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  double v10;
  unint64_t v11;
  uint64_t v12;
  double v13;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  CGPoint v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v9 = *(_DWORD *)this;
  switch(*(_DWORD *)this)
  {
    case 0:
    case 1:
    case 5:
    case 7:
      goto LABEL_6;
    case 2:
    case 3:
    case 4:
      goto LABEL_2;
    case 6:
      if (*((double *)this + 7) < 6.28318531)
        goto LABEL_15;
LABEL_2:
      if ((*((double *)this + 2) != 0.0 || *((double *)this + 3) != 0.0)
        && (*((double *)this + 1) != 0.0 || *((double *)this + 4) != 0.0))
      {
        goto LABEL_15;
      }
LABEL_6:
      v10 = CG::Path::bounding_box(this, a2, a3, a4, a5, a6, a7, a8);
      break;
    default:
      if ((v9 & 0xFFFFFFFE) == 8)
      {
        v20 = INFINITY;
        v21 = INFINITY;
        v18 = -INFINITY;
        v19 = -INFINITY;
        v17 = 0;
        if (v9 == 8)
        {
          if (*((_WORD *)this + 5))
          {
            v15 = 0;
            v16 = *((_DWORD *)this + 3);
            do
            {
              path_element_bounding_box(v16 & 7, (const CGPoint *)this + 1, &v21, &v20, &v19, &v18, (float64x2_t *)&v22, &v17);
              v16 >>= 3;
              ++v15;
            }
            while (v15 < *((unsigned __int16 *)this + 5));
          }
        }
        else if (v9 == 9 && *((_QWORD *)this + 2))
        {
          v11 = 0;
          v12 = -1;
          do
          {
            path_element_bounding_box(*(unsigned __int8 *)(*((_QWORD *)this + 4) + *((_QWORD *)this + 3) + v12), *((const CGPoint **)this + 4), &v21, &v20, &v19, &v18, (float64x2_t *)&v22, &v17);
            ++v11;
            --v12;
          }
          while (v11 < *((_QWORD *)this + 2));
        }
        v10 = v21;
      }
      else
      {
LABEL_15:
        CG::Path::Path((CG::Path *)&v22, this);
        if (LODWORD(v22.x) != 9)
          CG::Path::convert_to_huge_((CG::Path *)&v22);
        CG::Path::path_bounding_box((CG::Path *)&v22);
        v10 = v13;
        CG::Path::~Path((void **)&v22);
      }
      break;
  }
  return v10;
}

void sub_184A13534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t path_element_bounding_box(int a1, const CGPoint *a2, double *a3, double *a4, double *a5, double *a6, float64x2_t *a7, unint64_t *a8)
{
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  CGPoint v16;
  unint64_t v17;
  unint64_t v18;
  CGPoint *v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  double v23;
  double v24;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  BOOL v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  BOOL v51;
  BOOL v52;
  double v53;
  double v54;
  BOOL v56;
  BOOL v57;
  BOOL v58;
  double v59;
  double v60;
  CGFloat v61;
  double v62;
  double v63;
  double *v64;
  double v65;
  double v66;
  uint64_t v67;
  double v68;
  double v69;
  double *v70;
  double v71;
  double v72;
  uint64_t v73;
  double v74;
  double v75;
  float64x2_t v76[2];
  float64x2_t v77[2];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  switch(a1)
  {
    case 0:
    case 1:
    case 4:
      result = 0;
      v14 = 0;
      v15 = (*a8)++;
      v16 = a2[v15];
      goto LABEL_57;
    case 2:
      v17 = (*a8)++;
      a7[1] = (float64x2_t)a2[v17];
      v18 = (*a8)++;
      v19 = (CGPoint *)&a2[v18];
      a7[2] = *(float64x2_t *)v19;
      v20 = vsubq_f64(a7[1], *a7);
      v21 = vaddq_f64(v20, v20);
      v22 = vsubq_f64(vsubq_f64(a7[2], v21), *a7);
      v23 = -2.0 * v22.f64[0] * 0.0001;
      v24 = -2.0 * v22.f64[0] * 0.9999;
      v26 = v22.f64[0] > 0.0 && v24 < v21.f64[0] && v21.f64[0] < v23;
      if (v26
        || (v22.f64[0] < 0.0 ? (v27 = v23 < v21.f64[0]) : (v27 = 0), v27 ? (v28 = v21.f64[0] < v24) : (v28 = 0), v28))
      {
        v77[0] = vmlaq_n_f64(*a7, vmlaq_n_f64(v21, v22, -v21.f64[0] / (v22.f64[0] + v22.f64[0])), -v21.f64[0] / (v22.f64[0] + v22.f64[0]));
        v14 = 1;
      }
      else
      {
        v14 = 0;
      }
      result = get_y_inflections_2(a7, 0, v76);
      goto LABEL_56;
    case 3:
      v29 = (*a8)++;
      a7[1] = (float64x2_t)a2[v29];
      v30 = (*a8)++;
      a7[2] = (float64x2_t)a2[v30];
      v31 = (*a8)++;
      v19 = (CGPoint *)&a2[v31];
      a7[3] = *(float64x2_t *)v19;
      v32 = *a7;
      v33 = a7[1];
      __asm { FMOV            V3.2D, #3.0 }
      v38 = vmulq_f64(vsubq_f64(v33, *a7), _Q3);
      v39 = vmlaq_f64(vnegq_f64(v38), _Q3, vsubq_f64(a7[2], v33));
      v40 = vsubq_f64(vsubq_f64(vsubq_f64(a7[3], v39), v38), *a7);
      v41 = vmulq_f64(v39, v39).f64[0];
      v42 = 3.0 * v40.f64[0];
      v43 = 3.0 * v40.f64[0] * v38.f64[0];
      v44 = v41 - v43;
      v45 = vabdd_f64(v41, v43) > (v41 + fabs(v43)) * 0.0001;
      v46 = 0.0;
      if (v45)
        v46 = v44;
      if (v46 >= 0.0)
      {
        v47 = 1.0;
        if (v39.f64[0] < 0.0)
          v47 = -1.0;
        v48 = -(v39.f64[0] + v47 * sqrt(v46));
        v49 = v42 * 0.0001;
        v50 = v42 * 0.9999;
        if (v40.f64[0] > 0.0 && (v49 < v48 ? (v51 = v48 < v50) : (v51 = 0), v51)
          || (v14 = 0, v40.f64[0] < 0.0) && (v50 < v48 ? (v52 = v48 < v49) : (v52 = 0), v52))
        {
          v77[0] = vmlaq_n_f64(v32, vmlaq_n_f64(v38, vmlaq_n_f64(v39, v40, v48 / v42), v48 / v42), v48 / v42);
          v14 = 1;
        }
        v53 = v48 * 0.0001;
        v54 = v48 * 0.9999;
        v56 = v48 > 0.0 && v53 < v38.f64[0] && v38.f64[0] < v54;
        if (v56 || (v48 < 0.0 ? (v57 = v54 < v38.f64[0]) : (v57 = 0), v57 ? (v58 = v38.f64[0] < v53) : (v58 = 0), v58))
          v77[v14++] = vmlaq_n_f64(v32, vmlaq_n_f64(v38, vmlaq_n_f64(v39, v40, v38.f64[0] / v48), v38.f64[0] / v48), v38.f64[0] / v48);
      }
      else
      {
        v14 = 0;
      }
      result = get_y_inflections_3(a7, 0, v76);
LABEL_56:
      v16 = *v19;
LABEL_57:
      *(CGPoint *)a7 = v16;
      break;
    default:
      result = 0;
      v14 = 0;
      break;
  }
  v59 = a7->f64[0];
  v60 = a7->f64[1];
  v61 = *a3;
  if (a7->f64[0] < *a3)
    v61 = a7->f64[0];
  *a3 = v61;
  v62 = *a4;
  if (v60 < *a4)
    v62 = v60;
  *a4 = v62;
  if (*a5 >= v59)
    v59 = *a5;
  *a5 = v59;
  v63 = *a6;
  if (*a6 < v60)
    v63 = v60;
  *a6 = v63;
  if (v14)
  {
    v64 = &v77[0].f64[1];
    do
    {
      v65 = *(v64 - 1);
      v66 = *v64;
      v67 = *(_QWORD *)a3;
      if (v65 < *a3)
        v67 = *((_QWORD *)v64 - 1);
      *(_QWORD *)a3 = v67;
      v68 = *a4;
      if (v66 < *a4)
        v68 = v66;
      *a4 = v68;
      if (*a5 >= v65)
        v65 = *a5;
      *a5 = v65;
      v69 = *a6;
      if (*a6 < v66)
        v69 = v66;
      *a6 = v69;
      v64 += 2;
      --v14;
    }
    while (v14);
  }
  if (result)
  {
    v70 = &v76[0].f64[1];
    do
    {
      v71 = *(v70 - 1);
      v72 = *v70;
      v73 = *(_QWORD *)a3;
      if (v71 < *a3)
        v73 = *((_QWORD *)v70 - 1);
      *(_QWORD *)a3 = v73;
      v74 = *a4;
      if (v72 < *a4)
        v74 = v72;
      *a4 = v74;
      if (*a5 >= v71)
        v71 = *a5;
      *a5 = v71;
      v75 = *a6;
      if (*a6 < v72)
        v75 = v72;
      *a6 = v75;
      v70 += 2;
      --result;
    }
    while (result);
  }
  return result;
}

uint64_t get_y_inflections_3(float64x2_t *a1, double *a2, float64x2_t *a3)
{
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  double v12;
  float64x2_t v13;
  float64x2_t v14;
  double v15;
  uint64_t result;
  double v17;
  double v18;
  double v19;
  double v20;
  BOOL v22;
  double v23;
  double v24;
  double v25;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  double v30;

  v3 = *a1;
  v4 = a1[1];
  __asm { FMOV            V3.2D, #3.0 }
  v9 = vmulq_f64(vsubq_f64(v4, *a1), _Q3);
  v10 = vmlaq_f64(vnegq_f64(v9), _Q3, vsubq_f64(a1[2], v4));
  v11 = vsubq_f64(vsubq_f64(vsubq_f64(a1[3], v10), v9), *a1);
  v12 = vmuld_lane_f64(3.0, v11, 1);
  *(_QWORD *)&v13.f64[0] = vdupq_laneq_s64((int64x2_t)v10, 1).u64[0];
  v13.f64[1] = v12;
  v14 = vmulq_f64(v13, (float64x2_t)vzip2q_s64((int64x2_t)v10, (int64x2_t)v9));
  v15 = 0.0;
  if (vabdd_f64(v14.f64[0], v14.f64[1]) > (v14.f64[0] + fabs(v14.f64[1])) * 0.0001)
    v15 = v14.f64[0] - v14.f64[1];
  if (v15 < 0.0)
    return 0;
  v17 = 1.0;
  if (v10.f64[1] < 0.0)
    v17 = -1.0;
  v18 = -(v10.f64[1] + v17 * sqrt(v15));
  v19 = v12 * 0.0001;
  v20 = v12 * 0.9999;
  if (v11.f64[1] > 0.0 && (v19 < v18 ? (_NF = v18 < v20) : (_NF = 0), _NF)
    || (result = 0, v11.f64[1] < 0.0) && (v20 < v18 ? (v22 = v18 < v19) : (v22 = 0), v22))
  {
    v23 = v18 / v12;
    if (a2)
      *a2 = v23;
    if (a3)
      *a3 = vmlaq_n_f64(v3, vmlaq_n_f64(v9, vmlaq_n_f64(v10, v11, v23), v23), v23);
    result = 1;
  }
  v24 = v18 * 0.0001;
  v25 = v18 * 0.9999;
  v27 = v18 > 0.0 && v24 < v9.f64[1] && v9.f64[1] < v25;
  if (v27 || (v18 < 0.0 ? (v28 = v25 < v9.f64[1]) : (v28 = 0), v28 ? (v29 = v9.f64[1] < v24) : (v29 = 0), v29))
  {
    v30 = v9.f64[1] / v18;
    if (a2)
      a2[result] = v30;
    if (a3)
      a3[result] = vmlaq_n_f64(v3, vmlaq_n_f64(v9, vmlaq_n_f64(v10, v11, v30), v30), v30);
    ++result;
  }
  return result;
}

uint64_t get_y_inflections_2(float64x2_t *a1, double *a2, float64x2_t *a3)
{
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v15;

  v3 = *a1;
  v4 = vsubq_f64(a1[1], *a1);
  v5 = vaddq_f64(v4, v4);
  v6 = vsubq_f64(vsubq_f64(a1[2], v5), *a1);
  v7 = vmuld_lane_f64(-2.0, v6, 1);
  v8 = v7 * 0.0001;
  v9 = v7 * 0.9999;
  v10 = v5.f64[1];
  if (v6.f64[1] <= 0.0 || v9 >= v5.f64[1] || v5.f64[1] >= v8)
  {
    if (v6.f64[1] >= 0.0)
      return 0;
    v10 = v5.f64[1];
    if (v8 >= v5.f64[1] || v5.f64[1] >= v9)
      return 0;
  }
  v15 = -v10 / (v6.f64[1] + v6.f64[1]);
  if (a2)
    *a2 = v15;
  if (a3)
    *a3 = vmlaq_n_f64(v3, vmlaq_n_f64(v5, v6, v15), v15);
  return 1;
}

uint64_t CG::DisplayListRecorder::DrawPath(CFArrayRef *a1, uint64_t a2, uint64_t a3, signed int a4, const CGPath *a5, int a6, uint64_t a7)
{
  double *v13;
  double *v14;
  BOOL v15;
  uint64_t result;
  CGSize v17;
  __int128 v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  double v22;
  double v23;
  double v24;
  double v25;
  _QWORD *EntryDrawingState;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t EntryStrokeState;
  uint64_t v37;
  uint64_t v38;
  const CGRect *v39;
  CGSize size;
  __int128 v41;
  uint64_t EntryFillState;
  uint64_t EntryPatternState;
  CGAffineTransform v44;
  CGRect v45;
  int v46;
  uint64_t v47;
  const CG::DisplayListResourceColor *v48;
  CGRect PathBoundingBox;

  v13 = (double *)CG::DisplayListRecorder::currentDisplayList(a1);
  if (!v13)
    return 1000;
  v14 = v13;
  v15 = v13[5] == INFINITY || v13[6] == INFINITY;
  if (v15)
    return 0;
  result = 0;
  if (v14[7] != 0.0 && v14[8] != 0.0)
  {
    if (!*((_BYTE *)v14 + 73))
      goto LABEL_23;
    if (a7)
    {
      v17 = *(CGSize *)(a7 + 16);
      v45.origin = *(CGPoint *)a7;
      v45.size = v17;
    }
    else
    {
      PathBoundingBox = CGPathGetPathBoundingBox(a5);
      v45 = PathBoundingBox;
      if (a6)
      {
        v18 = *(_OWORD *)(a3 + 40);
        *(_OWORD *)&v44.a = *(_OWORD *)(a3 + 24);
        *(_OWORD *)&v44.c = v18;
        *(_OWORD *)&v44.tx = *(_OWORD *)(a3 + 56);
        v45 = CGRectApplyAffineTransform(PathBoundingBox, &v44);
      }
      if (a4 >= 2)
      {
        v45.origin.x = CG::DisplayListRecorder::adjustBoundingBoxToIncludeStroke(&v45, a3);
        v45.origin.y = v19;
        v45.size.width = v20;
        v45.size.height = v21;
      }
    }
    CG::DisplayListRecorder::intersectRectWithClipConsideringStyle(&v45.origin.x, a2, *(double **)(a3 + 112), *(_QWORD *)(*(_QWORD *)(a3 + 120) + 16));
    v45.origin.x = v25;
    v45.origin.y = v22;
    v45.size.width = v23;
    v45.size.height = v24;
    if (v25 == INFINITY || v22 == INFINITY)
      return 0;
    result = 0;
    if (v23 != 0.0 && v24 != 0.0)
    {
LABEL_23:
      EntryDrawingState = (_QWORD *)CG::DisplayList::getEntryDrawingState((uint64_t *)v14 + 2, a3, a2);
      v28 = EntryDrawingState[1];
      if (v28)
      {
        v29 = EntryDrawingState;
        v30 = *(_DWORD *)(v28 + 8);
        v31 = v30 & 0x1000;
        v46 = v31;
        v32 = EntryDrawingState[2];
        if (v32)
        {
          v31 = ((unsigned __int16)*(_DWORD *)(v32 + 8) | (unsigned __int16)v30) & 0x1000;
          v46 = v31;
        }
        v33 = EntryDrawingState[3];
        if (v33)
          v46 = v31 | *(_DWORD *)(v33 + 8) & 0x3400;
        v47 = 0;
        v48 = 0;
        CG::DisplayListRecorder::getPathColorResourcesAndUpdateFlags((uint64_t)(v14 + 2), a3, a4, (uint64_t)&v48, &v47, &v46);
        v34 = *(_QWORD *)(a3 + 120);
        if (*(double *)(v34 + 8) >= 1.0)
          v35 = v46;
        else
          v35 = v46 | 0x1000;
        if ((v35 & 0x1000) == 0 && (((int)(*(_DWORD *)(v34 + 4) << 16) >> 24) - 3) < 0xFFFFFFFE)
          v35 = v46 | 0x1000;
        if ((v35 & 0x3000) != 0)
          *((_DWORD *)v14 + 20) |= v35 & 0x3000;
        if (*((_BYTE *)v14 + 74))
        {
          if ((v35 & 0x400) != 0)
            EntryPatternState = CG::DisplayList::getEntryPatternState((_QWORD *)v14 + 2, a3, a2);
          else
            EntryPatternState = 0;
          if ((v35 & 0x100) != 0)
            EntryFillState = CG::DisplayList::getEntryFillState((CG::DisplayList *)(v14 + 2), v48);
          else
            EntryFillState = 0;
          if ((v35 & 0x200) != 0)
            EntryStrokeState = CG::DisplayList::getEntryStrokeState((_QWORD *)v14 + 2, a3, v47);
          else
            EntryStrokeState = 0;
          v37 = operator new();
          v38 = v37;
          v15 = *((_BYTE *)v14 + 73) == 0;
          *(_DWORD *)(v37 + 8) = (v35 << 8) | 2;
          if (v15)
            v39 = &CGRectInfinite;
          else
            v39 = &v45;
          size = v39->size;
          *(CGPoint *)(v37 + 16) = v39->origin;
          *(CGSize *)(v37 + 32) = size;
          *(_QWORD *)(v37 + 48) = v29;
          *(_QWORD *)(v37 + 56) = EntryFillState;
          *(_QWORD *)(v37 + 64) = EntryStrokeState;
          *(_QWORD *)(v37 + 72) = EntryPatternState;
          *(_QWORD *)v37 = &off_1E1629050;
          *(_DWORD *)(v37 + 80) = a4;
          *(_BYTE *)(v37 + 84) = a6;
          if (a5)
            CFRetain(a5);
          *(_QWORD *)(v38 + 88) = a5;
          v41 = *(_OWORD *)(a3 + 40);
          *(_OWORD *)(v38 + 96) = *(_OWORD *)(a3 + 24);
          *(_OWORD *)(v38 + 112) = v41;
          *(_OWORD *)(v38 + 128) = *(_OWORD *)(a3 + 56);
          CG::DisplayList::appendEntry((int64x2_t *)v14 + 1, v38);
        }
        return 0;
      }
      return 1000;
    }
  }
  return result;
}

CGRect CGPathGetBoundingBox(CGPathRef path)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  CFTypeID v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  CGRect result;

  v8 = 0.0;
  if (path && (CGPathDisableTypeValidation || (v10 = CFGetTypeID(path), v10 == CGPathGetTypeID())))
  {
    v11 = CG::Path::bounding_box((CGPathRef)((char *)path + 16), v1, v2, v3, v4, v5, v6, v7);
    v8 = v14;
  }
  else
  {
    v12 = INFINITY;
    v11 = INFINITY;
    v13 = 0.0;
  }
  v15 = v8;
  result.size.height = v13;
  result.size.width = v15;
  result.origin.y = v12;
  result.origin.x = v11;
  return result;
}

double CG::Path::bounding_box(CG::Path *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double result;
  __int128 v9;
  CGAffineTransform *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  _OWORD v47[3];
  _OWORD v48[3];
  CGAffineTransform v49;
  _OWORD v50[3];

  result = INFINITY;
  switch(*(_DWORD *)this)
  {
    case 0:
      return result;
    case 1:
      v9 = *(_OWORD *)((char *)this + 24);
      v50[0] = *(_OWORD *)((char *)this + 8);
      v50[1] = v9;
      v50[2] = *(_OWORD *)((char *)this + 40);
      v10 = (CGAffineTransform *)v50;
      goto LABEL_6;
    case 2:
      v11 = *(_OWORD *)((char *)this + 24);
      v48[0] = *(_OWORD *)((char *)this + 8);
      v48[1] = v11;
      v48[2] = *(_OWORD *)((char *)this + 40);
      v10 = (CGAffineTransform *)v48;
      goto LABEL_6;
    case 3:
      v12 = *(_OWORD *)((char *)this + 24);
      v47[0] = *(_OWORD *)((char *)this + 8);
      v47[1] = v12;
      v47[2] = *(_OWORD *)((char *)this + 40);
      v10 = (CGAffineTransform *)v47;
      goto LABEL_6;
    case 4:
      v13 = *(_OWORD *)((char *)this + 24);
      *(_OWORD *)&v49.a = *(_OWORD *)((char *)this + 8);
      *(_OWORD *)&v49.c = v13;
      *(_OWORD *)&v49.tx = *(_OWORD *)((char *)this + 40);
      v10 = &v49;
LABEL_6:
      result = transform_unit_rect(v10);
      break;
    case 5:
      v14 = *((double *)this + 3);
      v15 = *((double *)this + 1);
      if (v14 >= v15)
        result = *((double *)this + 1);
      else
        result = *((double *)this + 3);
      break;
    case 6:
      v16 = *((double *)this + 1);
      v17 = *((double *)this + 2);
      v19 = *((double *)this + 3);
      v18 = *((double *)this + 4);
      v20 = *((double *)this + 7);
      v21 = *((double *)this + 8);
      v22 = *((double *)this + 9);
      if (v20 >= 1.57079633)
      {
        v33 = *((double *)this + 2);
        v25 = *((double *)this + 1);
        v34 = v33;
        v35 = v25;
        do
        {
          v23 = v19;
          v36 = v18;
          v24 = v22;
          v37 = v35 + v19 * 0.55228475;
          if (v25 <= v37)
            v38 = v25;
          else
            v38 = v35 + v19 * 0.55228475;
          if (v16 < v37)
            v16 = v35 + v19 * 0.55228475;
          v39 = v34 + v36 * 0.55228475;
          if (v33 > v39)
            v33 = v34 + v36 * 0.55228475;
          if (v17 < v39)
            v17 = v34 + v36 * 0.55228475;
          v40 = v19 + v35 * 0.55228475;
          if (v38 > v40)
            v38 = v19 + v35 * 0.55228475;
          if (v16 < v40)
            v16 = v19 + v35 * 0.55228475;
          v41 = v36 + v34 * 0.55228475;
          if (v33 > v41)
            v33 = v36 + v34 * 0.55228475;
          if (v17 < v41)
            v17 = v36 + v34 * 0.55228475;
          if (v38 <= v19)
            v25 = v38;
          else
            v25 = v19;
          if (v16 < v19)
            v16 = v19;
          if (v33 > v36)
            v33 = v36;
          if (v17 < v36)
            v17 = v36;
          v19 = -v35;
          v18 = -v34;
          v22 = -v21;
          v20 = v20 + -1.57079633;
          v21 = v24;
          v34 = v36;
          v35 = v23;
        }
        while (v20 >= 1.57079633);
      }
      else
      {
        v23 = *((double *)this + 1);
        v24 = *((double *)this + 8);
        v25 = v23;
      }
      if (v20 > 0.00000001)
      {
        v42 = *((double *)this + 10);
        v43 = v24 + v42 * v22;
        v44 = v22 - v42 * v24;
        v45 = v23 + v42 * v19;
        if (v25 > v45)
          v25 = v23 + v42 * v19;
        if (v25 > v19 * v44 + v43 * v23)
          v25 = v19 * v44 + v43 * v23;
        v46 = v19 * v22 + v24 * v23;
        if (v25 > v46)
          v25 = v46;
      }
      result = v25 + *((double *)this + 5);
      break;
    case 7:
      result = CGRegionGetBoundingBox(*((_QWORD *)this + 1));
      break;
    case 8:
      v26 = *((unsigned __int16 *)this + 4);
      if (*((_WORD *)this + 4))
      {
        v27 = (double *)((char *)this + 24);
        v28 = INFINITY;
        v29 = -INFINITY;
        v30 = -INFINITY;
        result = INFINITY;
        do
        {
          v31 = *(v27 - 1);
          v32 = *v27;
          if (v31 < result)
            result = *(v27 - 1);
          if (v32 < v28)
            v28 = *v27;
          if (v30 < v31)
            v30 = *(v27 - 1);
          if (v29 < v32)
            v29 = *v27;
          v27 += 2;
          --v26;
        }
        while (v26);
      }
      else
      {
        result = INFINITY;
      }
      break;
    case 9:
      result = *((double *)this + 5);
      break;
    default:
      _CGHandleAssert("bounding_box", 1633, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Paths/path.cc", "false", "unhandled path type %d", a6, a7, a8, *(_DWORD *)this);
  }
  return result;
}

double transform_unit_rect(CGAffineTransform *a1)
{
  double b;
  double a;
  double d;
  double c;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  double *v9;
  double v10;
  double v11;
  uint64_t i;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  a = a1->a;
  b = a1->b;
  c = a1->c;
  d = a1->d;
  if (b == 0.0 && c == 0.0)
  {
    v5 = fmin(a, 0.0);
  }
  else
  {
    v6 = a + c;
    v18 = 0;
    v19 = a;
    v20 = c;
    v21 = a + c;
    v7 = 0.0;
    v8 = 8;
    v9 = (double *)&v18;
    do
    {
      if (*(double *)((char *)&v18 + v8) < v7)
      {
        v7 = *(double *)((char *)&v18 + v8);
        v9 = (double *)((char *)&v18 + v8);
      }
      v8 += 8;
    }
    while (v8 != 32);
    v10 = b + d;
    v5 = *v9;
    v18 = 0;
    v19 = b;
    v20 = d;
    v21 = b + d;
    v11 = 0.0;
    for (i = 8; i != 32; i += 8)
    {
      if (*(double *)((char *)&v18 + i) < v11)
        v11 = *(double *)((char *)&v18 + i);
    }
    v18 = 0;
    v19 = a;
    v20 = c;
    v13 = 0.0;
    v14 = 8;
    v21 = v6;
    do
    {
      if (v13 < *(double *)((char *)&v18 + v14))
        v13 = *(double *)((char *)&v18 + v14);
      v14 += 8;
    }
    while (v14 != 32);
    v18 = 0;
    v19 = b;
    v20 = d;
    v15 = 0.0;
    v16 = 8;
    v21 = v10;
    do
    {
      if (v15 < *(double *)((char *)&v18 + v16))
        v15 = *(double *)((char *)&v18 + v16);
      v16 += 8;
    }
    while (v16 != 32);
  }
  return v5 + a1->tx;
}

uint64_t rip_auto_context_draw_image(uint64_t a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, CGImage *a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(double, double, double, double);

  if (!a1)
  {
    v14 = 112;
    pthread_mutex_lock((pthread_mutex_t *)0x70);
    goto LABEL_6;
  }
  v13 = *(_QWORD *)(a1 + 288);
  v14 = v13 + 112;
  pthread_mutex_lock((pthread_mutex_t *)(v13 + 112));
  if (!v13)
  {
LABEL_6:
    rip_auto_context_update_content_info_from_image(0, a8);
    goto LABEL_7;
  }
  v15 = *(_QWORD *)(v13 + 88);
  if (!v15)
  {
    v15 = *(_QWORD *)(v13 + 80);
    rip_auto_context_update_content_info_from_image(v13, a8);
    if (v15)
      goto LABEL_9;
LABEL_7:
    v23 = 0;
    goto LABEL_15;
  }
  rip_auto_context_update_content_info_from_image(v13, a8);
LABEL_9:
  v24 = *(_QWORD *)(v15 + 40);
  if (v24)
  {
    v25 = *(uint64_t (**)(double, double, double, double))(v24 + 80);
    if (v25)
      v23 = v25(a2, a3, a4, a5);
    else
      v23 = 1006;
  }
  else
  {
    v23 = 0;
  }
  *(_BYTE *)(v13 + 105) |= rip_auto_context_contains_transparency(v13, v16, v17, v18, v19, v20, v21, v22);
LABEL_15:
  pthread_mutex_unlock((pthread_mutex_t *)v14);
  return v23;
}

uint64_t rip_auto_context_draw_rects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);

  if (!a1)
  {
    v5 = 112;
    pthread_mutex_lock((pthread_mutex_t *)0x70);
    goto LABEL_6;
  }
  v4 = *(_QWORD *)(a1 + 288);
  v5 = v4 + 112;
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 112));
  if (!v4)
  {
LABEL_6:
    rip_auto_context_update_content_info_from_GState(0, a3);
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(v4 + 88);
  if (!v6)
  {
    v6 = *(_QWORD *)(v4 + 80);
    rip_auto_context_update_content_info_from_GState(v4, a3);
    if (v6)
      goto LABEL_9;
LABEL_7:
    v14 = 0;
    goto LABEL_15;
  }
  rip_auto_context_update_content_info_from_GState(v4, a3);
LABEL_9:
  v15 = *(_QWORD *)(v6 + 40);
  if (v15)
  {
    v16 = *(uint64_t (**)(void))(v15 + 64);
    if (v16)
      v14 = v16();
    else
      v14 = 1006;
  }
  else
  {
    v14 = 0;
  }
  *(_BYTE *)(v4 + 105) |= rip_auto_context_contains_transparency(v4, v7, v8, v9, v10, v11, v12, v13);
LABEL_15:
  pthread_mutex_unlock((pthread_mutex_t *)v5);
  return v14;
}

uint64_t dlRecorder_DrawRects(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  CFArrayRef *v8;
  signed int v11;
  double *v14;
  double *v15;
  BOOL v16;
  uint64_t result;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  double v29;
  double v30;
  double v31;
  double v32;
  _QWORD *EntryDrawingState;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t EntryFillState;
  uint64_t EntryStrokeState;
  uint64_t v45;
  uint64_t v46;
  const CGRect *v47;
  __int128 v48;
  CGSize size;
  uint64_t EntryPatternState;
  CGAffineTransform v51;
  CGRect v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  const CG::DisplayListResourceColor *v58;

  if (!a1 || (v8 = *(CFArrayRef **)(a1 + 288)) == 0)
  {
    CGPostError((uint64_t)"%s: CGContextDelegateGetInfo() returned NULL", a2, a3, a4, a5, a6, a7, a8, (char)"dlRecorder_DrawRects");
    return 1000;
  }
  v11 = a4;
  v14 = (double *)CG::DisplayListRecorder::currentDisplayList(v8);
  if (!v14)
    return 1000;
  v15 = v14;
  v16 = v14[5] == INFINITY || v14[6] == INFINITY;
  if (v16)
    return 0;
  result = 0;
  if (v15[7] != 0.0 && v15[8] != 0.0)
  {
    v18 = *(_OWORD *)(a3 + 40);
    v53 = *(_OWORD *)(a3 + 24);
    v54 = v18;
    v55 = *(_OWORD *)(a3 + 56);
    if (!*((_BYTE *)v15 + 73))
      goto LABEL_29;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    if (a5)
    {
      if (a6)
      {
        v19 = *(_QWORD *)a5;
        v20 = *(_QWORD *)(a5 + 8);
        v21 = *(_QWORD *)(a5 + 16);
        v22 = *(_QWORD *)(a5 + 24);
        if (a6 >= 2)
        {
          v23 = a6 - 1;
          v24 = a5 + 56;
          do
          {
            *(CGRect *)&v19 = CGRectUnion(*(CGRect *)&v19, *(CGRect *)(v24 - 24));
            v24 += 32;
            --v23;
          }
          while (v23);
        }
      }
    }
    v25 = *(_OWORD *)(a3 + 40);
    *(_OWORD *)&v51.a = *(_OWORD *)(a3 + 24);
    *(_OWORD *)&v51.c = v25;
    *(_OWORD *)&v51.tx = *(_OWORD *)(a3 + 56);
    v52 = CGRectApplyAffineTransform(*(CGRect *)&v19, &v51);
    if (v11 >= 2)
    {
      v52.origin.x = CG::DisplayListRecorder::adjustBoundingBoxToIncludeStroke(&v52, a3);
      v52.origin.y = v26;
      v52.size.width = v27;
      v52.size.height = v28;
    }
    CG::DisplayListRecorder::intersectRectWithClipConsideringStyle(&v52.origin.x, a2, *(double **)(a3 + 112), *(_QWORD *)(*(_QWORD *)(a3 + 120) + 16));
    v52.origin.x = v32;
    v52.origin.y = v29;
    v52.size.width = v30;
    v52.size.height = v31;
    if (v32 == INFINITY || v29 == INFINITY)
      return 0;
    result = 0;
    if (v30 != 0.0 && v31 != 0.0)
    {
LABEL_29:
      EntryDrawingState = (_QWORD *)CG::DisplayList::getEntryDrawingState((uint64_t *)v15 + 2, a3, a2);
      v35 = EntryDrawingState[1];
      if (v35)
      {
        v36 = EntryDrawingState;
        v37 = *(_DWORD *)(v35 + 8);
        v38 = v37 & 0x1000;
        v56 = v38;
        v39 = EntryDrawingState[2];
        if (v39)
        {
          v38 = ((unsigned __int16)*(_DWORD *)(v39 + 8) | (unsigned __int16)v37) & 0x1000;
          v56 = v38;
        }
        v40 = EntryDrawingState[3];
        if (v40)
          v56 = v38 | *(_DWORD *)(v40 + 8) & 0x3400;
        v57 = 0;
        v58 = 0;
        CG::DisplayListRecorder::getPathColorResourcesAndUpdateFlags((uint64_t)(v15 + 2), a3, v11, (uint64_t)&v58, &v57, &v56);
        v41 = *(_QWORD *)(a3 + 120);
        if (*(double *)(v41 + 8) >= 1.0)
          v42 = v56;
        else
          v42 = v56 | 0x1000;
        if ((v42 & 0x1000) == 0 && (((int)(*(_DWORD *)(v41 + 4) << 16) >> 24) - 3) < 0xFFFFFFFE)
          v42 = v56 | 0x1000;
        if ((v42 & 0x3000) != 0)
          *((_DWORD *)v15 + 20) |= v42 & 0x3000;
        if (*((_BYTE *)v15 + 74))
        {
          if ((v42 & 0x400) != 0)
            EntryPatternState = CG::DisplayList::getEntryPatternState((_QWORD *)v15 + 2, a3, a2);
          else
            EntryPatternState = 0;
          if ((v42 & 0x100) != 0)
            EntryFillState = CG::DisplayList::getEntryFillState((CG::DisplayList *)(v15 + 2), v58);
          else
            EntryFillState = 0;
          if ((v42 & 0x200) != 0)
            EntryStrokeState = CG::DisplayList::getEntryStrokeState((_QWORD *)v15 + 2, a3, v57);
          else
            EntryStrokeState = 0;
          v45 = operator new();
          v46 = v45;
          v16 = *((_BYTE *)v15 + 73) == 0;
          v47 = &v52;
          *(_OWORD *)(v45 + 120) = v55;
          if (v16)
            v47 = &CGRectInfinite;
          v48 = v53;
          *(_OWORD *)(v45 + 104) = v54;
          *(_OWORD *)(v45 + 88) = v48;
          *(_DWORD *)(v45 + 8) = (v42 << 8) | 3;
          size = v47->size;
          *(CGPoint *)(v45 + 16) = v47->origin;
          *(CGSize *)(v45 + 32) = size;
          *(_QWORD *)(v45 + 48) = v36;
          *(_QWORD *)(v45 + 56) = EntryFillState;
          *(_QWORD *)(v45 + 64) = EntryStrokeState;
          *(_QWORD *)(v45 + 72) = EntryPatternState;
          *(_QWORD *)v45 = &off_1E16290F8;
          *(_DWORD *)(v45 + 80) = v11;
          *(_QWORD *)(v45 + 136) = 0;
          *(_QWORD *)(v45 + 144) = a6;
          CG::DisplayListEntryRects::setRects((CG::DisplayListEntryRects *)v45, (const CGRect *)a5, a6);
          CG::DisplayList::appendEntry((int64x2_t *)v15 + 1, v46);
        }
        return 0;
      }
      return 1000;
    }
  }
  return result;
}

void sub_184A1497C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DC23C4](v1, 0x10E1C40A5D89D65);
  _Unwind_Resume(a1);
}

uint64_t CG::DisplayListRecorder::getPathColorResourcesAndUpdateFlags(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t *a5, _DWORD *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t FillColor;
  int v15;
  uint64_t StrokeColor;

  v10 = result;
  if (a3 < 2)
  {
    FillColor = CGGStateGetFillColor(a2);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 8))(v10, FillColor);
    *(_QWORD *)a4 = result;
    *a5 = 0;
    if (*(_QWORD *)a4)
      v15 = *(_DWORD *)(*(_QWORD *)a4 + 8) & 0x3400 | 0x100;
    else
      v15 = 256;
  }
  else
  {
    if (a3 - 3 >= 2)
    {
      if (a3 != 2)
      {
        *a5 = 0;
        *(_QWORD *)a4 = 0;
        return result;
      }
      *(_QWORD *)a4 = 0;
    }
    else
    {
      v11 = CGGStateGetFillColor(a2);
      v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 8))(v10, v11);
      *(_QWORD *)a4 = v12;
      if (v12)
        v13 = *(_DWORD *)(v12 + 8) & 0x3400 | 0x100;
      else
        v13 = 256;
      *a6 |= v13;
    }
    StrokeColor = CGGStateGetStrokeColor(a2);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 8))(v10, StrokeColor);
    *a5 = result;
    if (result)
      v15 = *(_DWORD *)(result + 8) & 0x3400 | 0x200;
    else
      v15 = 512;
  }
  *a6 |= v15;
  return result;
}

CGRect *CG::DisplayListEntryRects::setRects(CG::DisplayListEntryRects *this, const CGRect *a2, uint64_t a3)
{
  CGRect *result;

  result = (CGRect *)*((_QWORD *)this + 17);
  if (result != a2)
  {
    free(result);
    *((_QWORD *)this + 17) = 0;
    result = (CGRect *)malloc_type_malloc(32 * a3, 0x705560E0uLL);
    *((_QWORD *)this + 17) = result;
    if (result)
      result = (CGRect *)memcpy(result, a2, 32 * a3);
  }
  *((_QWORD *)this + 18) = a3;
  return result;
}

uint64_t rip_auto_context_contains_transparency(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  char vars0;

  v8 = *(_QWORD *)(a1 + 88);
  if (v8)
  {
    if (*(_DWORD *)(v8 + 16) == 1129601108 && *(_DWORD *)(v8 + 24) == 4)
    {
      return (*(_BYTE *)(*(_QWORD *)(v8 + 32) + 40) & 0x1F) != 0;
    }
    else
    {
      handle_invalid_context((char)"CGBitmapContextGetBitmapInfo", v8, a3, a4, a5, a6, a7, a8);
      return 0;
    }
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 72);
    if (!v10)
      _CGHandleAssert("rip_auto_context_contains_transparency", 350, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/AutomaticBitmapContext/RIPAutomaticContext.c", "data->dl != NULL", "display list is missing", a6, a7, a8, vars0);
    return CG::DisplayList::containsTransparentContent((CG::DisplayList *)(v10 + 16), 0);
  }
}

uint64_t CG::DisplayList::containsTransparentContent(CG::DisplayList *this, const CGRect *a2)
{
  uint64_t result;
  uint64_t v3;
  int *Shape;
  double v5;
  double v6;
  double v7;
  uint64_t v9;
  uint64_t v10;

  if ((*((_BYTE *)this + 65) & 0x10) == 0)
    return 0;
  v3 = *((_QWORD *)this + 13);
  if (!*(_QWORD *)v3)
    return 1;
  if ((*(_BYTE *)(v3 + 48) & 1) != 0)
  {
    if (*(double *)(v3 + 16) == INFINITY || *(double *)(v3 + 24) == INFINITY)
      return 0;
    v6 = *(double *)(v3 + 32);
    v7 = *(double *)(v3 + 40);
  }
  else
  {
    Shape = CG::DisplayListShape::getShape(*((CG::DisplayListShape **)this + 13), a2);
    if (!Shape)
      return 1;
    v9 = 0;
    v10 = 0;
    if (!shape_bounds((uint64_t)Shape, (int *)&v10 + 1, &v10, (signed int *)&v9 + 1, &v9))
      return 1;
    v5 = (double)(int)v10;
    v6 = (double)(HIDWORD(v9) - HIDWORD(v10));
    v7 = (double)((int)v9 - (int)v10);
    *(double *)(v3 + 16) = (double)SHIDWORD(v10);
    *(double *)(v3 + 24) = v5;
    *(double *)(v3 + 32) = v6;
    *(double *)(v3 + 40) = v7;
    *(_DWORD *)(v3 + 48) |= 1u;
  }
  result = 0;
  if (v6 != 0.0 && v7 != 0.0)
    return 1;
  return result;
}

uint64_t shape_bounds(uint64_t a1, int *a2, _DWORD *a3, signed int *a4, _DWORD *a5)
{
  uint64_t v5;
  signed int v6;
  int v7;
  int *v8;
  int v9;
  uint64_t v10;
  int *v11;
  int v12;
  signed int v13;
  int v14;
  int *v15;
  int v16;
  int v17;
  signed int v18;

  if (*(_DWORD *)a1 == 0x80000000 && *(_DWORD *)(a1 + 4) == 4 && *(_DWORD *)(a1 + 16) == 0x7FFFFFFF)
  {
    v5 = 0;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    *a4 = v6;
    *a2 = v6;
    *a5 = v7;
    *a3 = v7;
  }
  else
  {
    if ((_UNKNOWN *)a1 == &the_empty_shape)
      goto LABEL_18;
    v8 = (int *)(a1 + 4 * *(int *)(a1 + 4));
    v9 = *v8;
    if (*v8 == 0x7FFFFFFF)
      goto LABEL_18;
    v10 = v8[1];
    v11 = &v8[v10];
    v12 = *v11;
    if (*v11 == 0x7FFFFFFF)
      goto LABEL_18;
    v13 = 0x80000000;
    v14 = 0x7FFFFFFF;
    do
    {
      v15 = v11;
      v16 = v12;
      if ((int)v10 >= 4)
      {
        v17 = v8[2];
        v18 = v8[(v10 - 1)];
        if (v17 < v14)
          v14 = v17;
        if (v18 > v13)
          v13 = v18;
      }
      v10 = v15[1];
      v11 = &v15[v10];
      v12 = *v11;
      v8 = v15;
    }
    while (*v11 != 0x7FFFFFFF);
    if (v14 >= v13 || v9 >= v16)
    {
LABEL_18:
      v5 = 0;
      *a5 = 0;
      *a3 = 0;
      *a4 = 0;
      *a2 = 0;
    }
    else
    {
      *a2 = v14;
      *a3 = v9;
      *a4 = v13;
      *a5 = v16;
      return (((unint64_t)v15 - a1) >> 2) + 3;
    }
  }
  return v5;
}

int *CG::DisplayListShape::getShape(CG::DisplayListShape *this, const CGRect *a2)
{
  std::mutex *v3;
  int *v4;

  v3 = (std::mutex *)((char *)this + 56);
  std::mutex::lock((std::mutex *)((char *)this + 56));
  v4 = (int *)*((_QWORD *)this + 1);
  if (v4 || (v4 = shape_accum_shape(*(int **)this), (*((_QWORD *)this + 1) = v4) != 0))
  {
    if (v4 == (int *)&the_empty_shape)
      v4 = 0;
  }
  else
  {
    *((_QWORD *)this + 1) = &the_empty_shape;
  }
  std::mutex::unlock(v3);
  return v4;
}

int *shape_accum_shape(int *a1)
{
  uint64_t v1;
  int *v2;
  uint64_t v3;
  unint64_t v4;
  int *v5;
  int v6;
  int v7;
  int *v8;
  int v9;
  int v10;
  int *v11;
  int *v12;
  __int128 v13;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  _BYTE v23[20];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return (int *)&the_empty_shape;
  v1 = *a1;
  v2 = (int *)&the_empty_shape;
  if ((int)v1 < 3)
    return v2;
  v2 = 0;
  v3 = *((_QWORD *)a1 + 2);
  v4 = v3 + 16 * v1;
  v5 = (int *)(v3 + 12);
  do
  {
    v7 = *(v5 - 3);
    v6 = *(v5 - 2);
    v8 = v5 - 3;
    if (v7 < v6)
    {
      v9 = *(v5 - 1) <= -2147483647 ? -2147483647 : *(v5 - 1);
      v10 = *v5 >= 2147483646 ? 2147483646 : *v5;
      if (v9 < v10)
      {
        if (v2)
        {
          v15 = 0x280000000;
          v16 = v9;
          v17 = 4;
          v18 = v7;
          v19 = v6;
          v20 = v10;
          v21 = 0x7FFFFFFF00000002;
          a1 = shape_union((uint64_t)a1, v2, (int *)&v15);
          v11 = a1;
          if (v2 != (int *)&v22 && v2 != (int *)&the_empty_shape)
            free(v2);
          v2 = v11;
        }
        else
        {
          *(_QWORD *)&v22 = 0x280000000;
          *((_QWORD *)&v22 + 1) = v9 | 0x400000000;
          *(_DWORD *)v23 = v7;
          *(_DWORD *)&v23[4] = v6;
          *(_DWORD *)&v23[8] = v10;
          v2 = (int *)&v22;
          *(_QWORD *)&v23[12] = 0x7FFFFFFF00000002;
        }
      }
    }
    v5 += 4;
  }
  while ((unint64_t)(v8 + 4) < v4);
  if (!v2)
    return (int *)&the_empty_shape;
  if (v2 == (int *)&v22)
  {
    v12 = (int *)malloc_type_malloc(0x200uLL, 0x705560E0uLL);
    v2 = v12;
    if (v12)
    {
      v13 = *(_OWORD *)v23;
      *(_OWORD *)v12 = v22;
      *((_OWORD *)v12 + 1) = v13;
      v12[8] = *(_DWORD *)&v23[16];
    }
  }
  return v2;
}

uint64_t CG::DisplayListRecorder::DrawImage(CFArrayRef *a1, uint64_t a2, uint64_t a3, CGImageRef a4, double a5, CGFloat a6, double a7, double a8)
{
  CGFloat v8;
  CGFloat v9;
  char *v15;
  double v16;
  double v17;
  double v18;
  CGFloat v19;
  double v20;
  double v21;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  double v30;
  float64x2_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v37;
  _QWORD *EntryDrawingState;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  char *DataProviderInternal;
  const UInt8 *(__cdecl *v46)(CFDataRef);
  const __CFData *v47;
  const __CFData *v48;
  CGDataProviderRef v49;
  CGDataProvider *v50;
  const CGFloat *decode;
  BOOL shouldInterpolate;
  CGColorRenderingIntent intent;
  CGImageRef v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *Mask;
  char *v62;
  char *v63;
  const UInt8 *(__cdecl *v64)(CFDataRef);
  CFDataRef v65;
  BOOL v66;
  CGColorRenderingIntent RenderingIntent;
  CGImageRef v68;
  const void *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double x;
  CGFloat y;
  float64x2_t v80;
  float64x2_t v81;
  int64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  CGFloat v96;
  float64x2_t v97;
  CGFloat v98;
  _BOOL4 v99;
  float64x2_t v100;
  float64_t v101;
  double v102;
  double v103;
  double v104;
  float64_t v105;
  CGFloat v106;
  CGImageRef v107;
  CGImageRef v108;
  __int128 v109;
  CGFloat v110;
  CGFloat v111;
  CGFloat v112;
  CGFloat v113;
  CGFloat v114;
  double v115;
  double v116;
  double v117;
  float64x2_t v118;
  float64x2_t v119;
  double v120;
  uint64_t v121;
  uint64_t v122;
  const CG::DisplayListResourceColor *v123;
  uint64_t FillColor;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __n128 v131;
  uint64_t v132;
  int v133;
  uint64_t EntryPatternState;
  uint64_t EntryFillState;
  uint64_t v136;
  const CGRect *v137;
  uint64_t v138;
  unsigned int v139;
  int v140;
  int v141;
  CGSize size;
  CGFloat v144;
  double v145;
  const CGFloat *v146;
  CGBitmapInfo bitmapInfo;
  CGBitmapInfo bitmapInfoa;
  CGColorSpace *space;
  CGColorSpace *spacea;
  CGColorSpaceRef spaceb[2];
  size_t bytesPerRow;
  size_t bytesPerRowa;
  size_t bytesPerRowb[2];
  size_t bitsPerComponent;
  size_t bitsPerComponentb;
  CGFloat bitsPerComponenta;
  size_t bitsPerPixel;
  size_t bitsPerPixelb;
  CGPoint bitsPerPixela;
  size_t width;
  size_t widthc;
  CGFloat widtha;
  size_t widthb[2];
  size_t height;
  size_t heightb;
  double heighta;
  const __CFData *v168;
  double v169;
  double v170;
  float64x2_t v171;
  CGFloat v172;
  double rect;
  double rectb;
  CGFloat recta;
  CGFloat rectc;
  float64x2_t v177;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v182;
  const void *v183;
  CGDataProvider *v184;
  CFDataRef v185;
  uint64_t v186;
  CGDataProviderRef v187;
  CGAffineTransform v188;
  CGPoint v189;
  __int128 v190;
  CGImageRef v191;
  CGImageRef v192;
  CGImageRef v193;
  CGRect v194;
  CGRect v195;
  CGRect v196;
  CGRect v197;
  CGRect v198;
  CGRect v199;
  CGRect v200;
  CGRect v201;
  CGRect v202;
  CGRect v203;

  _D8 = a5;
  v192 = 0;
  v193 = 0;
  v191 = 0;
  v15 = (char *)CG::DisplayListRecorder::currentDisplayList(a1);
  if (!v15)
    goto LABEL_78;
  v16 = a7;
  v17 = a8;
  if (a7 < 0.0 || a8 < 0.0)
  {
    v18 = _D8;
    v19 = a6;
    *(CGRect *)(&v16 - 2) = CGRectStandardize(*(CGRect *)(&v16 - 2));
    _D8 = v20;
    a6 = v21;
  }
  _Q16 = *(float64x2_t *)(a3 + 24);
  v23 = *(float64x2_t *)(a3 + 40);
  v24 = vmlaq_n_f64(vmulq_f64(v23, (float64x2_t)0), _Q16, v16);
  v25 = vmlaq_f64(vmulq_n_f64(v23, v17), (float64x2_t)0, _Q16);
  __asm { FMLA            D0, D8, V16.D[1] }
  v30 = _D0 + *(double *)(a3 + 64);
  v31.f64[0] = *(double *)(a3 + 56) + vmlad_n_f64(a6 * v23.f64[0], _D8, _Q16.f64[0]);
  v31.f64[1] = v30;
  v179 = v31;
  v182 = v24;
  rect = v31.f64[0];
  v177 = v25;
  v170 = v30;
  if (v15[73])
  {
    *(float64x2_t *)&v188.a = v24;
    *(float64x2_t *)&v188.c = v25;
    *(float64x2_t *)&v188.tx = v31;
    v194.origin.x = 0.0;
    v194.origin.y = 0.0;
    v194.size.width = 1.0;
    v194.size.height = 1.0;
    v195 = CGRectApplyAffineTransform(v194, &v188);
    v189.x = v195.origin.x;
    v189.y = v195.origin.y;
    *(CGFloat *)&v190 = v195.size.width;
    *((_QWORD *)&v190 + 1) = *(_QWORD *)&v195.size.height;
    CG::DisplayListRecorder::intersectRectWithClipConsideringStyle(&v189.x, a2, *(double **)(a3 + 112), *(_QWORD *)(*(_QWORD *)(a3 + 120) + 16));
    v9 = v35;
    v189.x = v35;
    v189.y = v32;
    *(double *)&v190 = v33;
    *((double *)&v190 + 1) = v34;
    if (v35 == INFINITY || v32 == INFINITY)
    {
LABEL_102:
      v37 = 0;
      goto LABEL_103;
    }
    a6 = v33;
    v37 = 0;
    if (v33 == 0.0)
      goto LABEL_103;
    _D8 = v34;
    if (v34 == 0.0)
      goto LABEL_103;
    v8 = v32;
  }
  EntryDrawingState = (_QWORD *)CG::DisplayList::getEntryDrawingState((uint64_t *)v15 + 2, a3, a2);
  v39 = EntryDrawingState;
  v40 = EntryDrawingState[1];
  if (!v40)
    goto LABEL_78;
  v41 = *(_DWORD *)(v40 + 8);
  v42 = EntryDrawingState[2];
  if (v42)
    v41 |= *(_DWORD *)(v42 + 8);
  v43 = v41 & 0x1000;
  v44 = EntryDrawingState[3];
  if (v44)
    v43 |= *(_DWORD *)(v44 + 8) & 0x3400;
  if (!v15[73] && !CG::DisplayList::getClipRecordingToFrame((CG::DisplayList *)(v15 + 16)))
    goto LABEL_73;
  if (v15[77])
  {
    DataProviderInternal = CGImageGetDataProviderInternal((char *)a4, 0);
    if (DataProviderInternal)
    {
      v46 = (const UInt8 *(__cdecl *)(CFDataRef))*((_QWORD *)DataProviderInternal + 10);
      if (v46 != getCFDataBytePointer && (char *)v46 != (char *)data_get_byte_pointer)
      {
        v47 = CGDataProviderCopyData((CGDataProviderRef)DataProviderInternal);
        if (v47)
        {
          v48 = v47;
          v49 = CGDataProviderCreateWithCFData(v47);
          v187 = v49;
          if (v49)
          {
            v50 = v49;
            v168 = v48;
            if (a4)
            {
              width = *((_QWORD *)a4 + 5);
              height = *((_QWORD *)a4 + 6);
              bitsPerComponent = *((_QWORD *)a4 + 7);
              bitsPerPixel = *((_QWORD *)a4 + 8);
              bytesPerRow = *((_QWORD *)a4 + 9);
            }
            else
            {
              bitsPerPixel = 0;
              height = 0;
              width = 0;
              bitsPerComponent = 0;
              bytesPerRow = 0;
            }
            space = CGImageGetColorSpace(a4);
            bitmapInfo = CGImageGetBitmapInfo(a4);
            decode = CGImageGetDecode(a4);
            shouldInterpolate = CGImageGetShouldInterpolate(a4);
            intent = CGImageGetRenderingIntent(a4);
            v54 = CGImageCreate(width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, bitmapInfo, v50, decode, shouldInterpolate, intent);
            v192 = v54;
            v186 = 0;
            applesauce::CF::ObjectRef<CGImage *>::~ObjectRef((const void **)&v186);
            CGImageCopyHeadroomFromOriginal((uint64_t *)v54, a4, v55, v56, v57, v58, v59, v60);
            v186 = 0;
            if (a4 && *((_QWORD *)a4 + 22))
            {
              Mask = (char *)CGImageGetMask(a4);
              if (Mask)
              {
                v62 = Mask;
                v63 = CGImageGetDataProviderInternal(Mask, 0);
                if (v63)
                {
                  v64 = (const UInt8 *(__cdecl *)(CFDataRef))*((_QWORD *)v63 + 10);
                  if (v64 != getCFDataBytePointer && (char *)v64 != (char *)data_get_byte_pointer)
                  {
                    v65 = CGDataProviderCopyData((CGDataProviderRef)v63);
                    v185 = v65;
                    if (v65)
                    {
                      v184 = CGDataProviderCreateWithCFData(v65);
                      heightb = *((_QWORD *)v62 + 5);
                      widthc = *((_QWORD *)v62 + 6);
                      bitsPerPixelb = *((_QWORD *)v62 + 7);
                      bitsPerComponentb = *((_QWORD *)v62 + 8);
                      bytesPerRowa = *((_QWORD *)v62 + 9);
                      spacea = CGImageGetColorSpace((CGImageRef)v62);
                      bitmapInfoa = CGImageGetBitmapInfo((CGImageRef)v62);
                      v146 = CGImageGetDecode((CGImageRef)v62);
                      v66 = CGImageGetShouldInterpolate((CGImageRef)v62);
                      RenderingIntent = CGImageGetRenderingIntent((CGImageRef)v62);
                      v68 = CGImageCreate(heightb, widthc, bitsPerPixelb, bitsPerComponentb, bytesPerRowa, spacea, bitmapInfoa, v184, v146, v66, RenderingIntent);
                      v69 = (const void *)v186;
                      v186 = (uint64_t)v68;
                      v183 = v69;
                      applesauce::CF::ObjectRef<CGImage *>::~ObjectRef(&v183);
                      applesauce::CF::ObjectRef<CGDataProvider *>::~ObjectRef((const void **)&v184);
                    }
                    applesauce::CF::ObjectRef<__CFData const*>::~ObjectRef((const void **)&v185);
                  }
                }
              }
              v48 = v168;
              if (v186)
              {
                v54 = CGImageCreateWithMaskAndMatte((uint64_t)v54, v186, 0);
                v191 = v54;
                v185 = 0;
                applesauce::CF::ObjectRef<CGImage *>::~ObjectRef((const void **)&v185);
              }
            }
            else
            {
              v48 = v168;
            }
            if (v54)
              a4 = v54;
            applesauce::CF::ObjectRef<CGImage *>::~ObjectRef((const void **)&v186);
          }
          applesauce::CF::ObjectRef<CGDataProvider *>::~ObjectRef((const void **)&v187);
          CFRelease(v48);
        }
      }
    }
  }
  if (!CG::DisplayList::getClipRecordingToFrame((CG::DisplayList *)(v15 + 16)))
    goto LABEL_73;
  if (a4)
  {
    v169 = (double)*((unint64_t *)a4 + 5);
    v70 = *((_QWORD *)a4 + 6);
  }
  else
  {
    v70 = 0;
    v169 = 0.0;
  }
  v203.origin.x = v9;
  v203.origin.y = v8;
  v203.size.width = a6;
  v203.size.height = _D8;
  v196 = CGRectIntersection(*(CGRect *)(v15 + 40), v203);
  x = v196.origin.x;
  v37 = 0;
  if (v196.origin.x != INFINITY && v196.origin.y != INFINITY)
  {
    v37 = 0;
    if (v196.size.width != 0.0 && v196.size.height != 0.0)
    {
      y = v196.origin.y;
      bitsPerPixela = v196.origin;
      widtha = v196.size.width;
      v80.f64[0] = v169;
      v80.f64[1] = (double)v70;
      v81 = vdivq_f64(v182, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v169, 0));
      heighta = (double)v70;
      v82 = (int64x2_t)vdivq_f64(v177, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v70), 0));
      v83 = vmulq_f64(v81, (float64x2_t)vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL));
      v84 = vsubq_f64(v83, (float64x2_t)vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL));
      bitsPerComponenta = v196.size.height;
      if (v84.f64[0] == 0.0)
      {
        v171 = v80;
        rectb = x;
        *(int64x2_t *)spaceb = v82;
        *(float64x2_t *)bytesPerRowb = v81;
        CGPostError((uint64_t)"%s: singular matrix.", v71, v72, v73, v74, v75, v76, v77, (char)"AffineTransformInvert");
        v85 = *(float64x2_t *)spaceb;
        v86 = *(float64x2_t *)bytesPerRowb;
        v80 = v171;
        x = rectb;
        v196.size.height = bitsPerComponenta;
        v196.size.width = widtha;
        v87 = v179;
      }
      else
      {
        v88 = (float64x2_t)vzip2q_s64(v82, (int64x2_t)v81);
        v89 = (float64x2_t)vzip1q_s64(v82, (int64x2_t)v81);
        v86 = vdivq_f64(v88, v84);
        v85 = vdivq_f64(v89, (float64x2_t)vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL));
        v87 = vmlsq_lane_f64(vmulq_n_f64(v85, -v170), v86, rect, 0);
      }
      v90 = vaddq_f64(v87, vmlaq_n_f64(vmulq_laneq_f64(v85, (float64x2_t)bitsPerPixela, 1), v86, x));
      v91 = vmulq_n_f64(v86, v196.size.width);
      v92 = vmulq_n_f64(v85, v196.size.height);
      v93 = vaddq_f64(v91, v92);
      v94 = vmaxnmq_f64(vminnmq_f64(vminnmq_f64(vminnmq_f64(v91, (float64x2_t)0), v92), v93), vnegq_f64(v90));
      v95 = vaddq_f64(v90, v94);
      v96 = v95.f64[1];
      v97 = vmaxnmq_f64(vminnmq_f64(vsubq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(v91, (float64x2_t)0), v92), v93), v94), vsubq_f64(v80, v95)), (float64x2_t)0);
      v98 = v97.f64[1];
      v99 = v97.f64[1] < 0.0 || v97.f64[0] < 0.0;
      v172 = v95.f64[0];
      recta = v97.f64[0];
      if (v99)
      {
        v100 = v95;
        v101 = v97.f64[1];
        *(CGRect *)(&v97 - 1) = CGRectStandardize(*(CGRect *)(&v97 - 1));
        v95.f64[0] = v172;
        _NF = v97.f64[0] < v169;
        v97.f64[0] = recta;
        if (_NF)
        {
LABEL_65:
          v102 = v96;
          v103 = v98;
          if (v99)
          {
            v199.origin.x = v95.f64[0];
            v199.origin.y = v96;
            v199.size.width = recta;
            v199.size.height = v98;
            *(CGRect *)(&v97 - 1) = CGRectStandardize(v199);
            v95.f64[0] = v172;
            v97.f64[0] = recta;
          }
LABEL_67:
          v104 = heighta - (v102 + v103);
          v105 = v95.f64[0];
          v106 = v98;
          v107 = CGImageCreateWithImageInRect(a4, *(CGRect *)(&v97 - 1));
          v108 = v193;
          v193 = v107;
          if (v108)
            CFRelease(v108);
          if (v107)
          {
            *(CGFloat *)&v109 = widtha;
            *((CGFloat *)&v109 + 1) = bitsPerComponenta;
            *(_OWORD *)widthb = v109;
            *(CGFloat *)&v109 = v172;
            v110 = recta;
            v111 = v96;
            v112 = v98;
            v200 = CGRectIntegral(*(CGRect *)&v109);
            v113 = v200.origin.x;
            v114 = v200.origin.y;
            v115 = v200.size.width;
            v116 = v200.size.height;
            v117 = v200.origin.y / heighta;
            v118 = vmlaq_n_f64(v179, v182, v200.origin.x / v169);
            v119 = v118;
            if (v115 < 0.0 || v200.size.height < 0.0)
            {
              v180 = v118;
              v144 = v113;
              v145 = v115;
              rectc = v200.origin.y / heighta;
              v201 = CGRectStandardize(v200);
              v120 = v201.size.width;
              v201.origin.x = v113;
              v201.origin.y = v114;
              v201.size.width = v115;
              v201.size.height = v116;
              v202 = CGRectStandardize(v201);
              v117 = rectc;
              v119 = v180;
              v116 = v202.size.height;
            }
            else
            {
              v120 = v115;
            }
            v179 = vmlaq_n_f64(v119, v177, v117);
            v182 = vmulq_n_f64(v182, v120 / v169);
            v177 = vmulq_n_f64(v177, v116 / heighta);
            v189 = bitsPerPixela;
            v190 = *(_OWORD *)widthb;
LABEL_74:
            v121 = CG::DisplayList::imageResourceForImage((CG::DisplayList *)(v15 + 16), v107);
            v122 = v121;
            if (v121)
            {
              if ((*(_BYTE *)(v121 + 48) & 0x20) != 0)
              {
                FillColor = CGGStateGetFillColor(a3);
                v132 = CG::DisplayList::colorResourceForColor((CG::DisplayList *)(v15 + 16), FillColor, v125, v126, v127, v128, v129, v130, v131);
                v123 = (const CG::DisplayListResourceColor *)v132;
                if (v132)
                {
                  v133 = v43 | *(_DWORD *)(v132 + 8) & 0x3400;
                  if (*(double *)(*(_QWORD *)(a3 + 120) + 8) >= 1.0)
                    v43 = v133 | 0x100;
                  else
                    v43 = v133 | 0x1100;
                }
              }
              else
              {
                v123 = 0;
                if (*(double *)(*(_QWORD *)(a3 + 120) + 8) >= 1.0)
                  v43 |= *(_DWORD *)(v121 + 8) & 0x1000;
                else
                  v43 |= 0x1000u;
              }
              if ((v43 & 0x1000) == 0
                && (((int)(*(_DWORD *)(*(_QWORD *)(a3 + 120) + 4) << 16) >> 24) - 3) < 0xFFFFFFFE)
              {
                v43 |= 0x1000u;
              }
              if ((v43 & 0x3000) != 0)
                *((_DWORD *)v15 + 20) |= v43 & 0x3000;
              if (v15[74])
              {
                if ((v43 & 0x400) != 0)
                  EntryPatternState = CG::DisplayList::getEntryPatternState((_QWORD *)v15 + 2, a3, a2);
                else
                  EntryPatternState = 0;
                EntryFillState = 0;
                if ((v43 & 0x100) != 0 && (*(_BYTE *)(v122 + 48) & 0x20) != 0)
                  EntryFillState = CG::DisplayList::getEntryFillState((CG::DisplayList *)(v15 + 16), v123);
                v136 = operator new();
                v137 = &CGRectInfinite;
                v138 = *(_QWORD *)(a3 + 120);
                if (v15[73])
                  v137 = (const CGRect *)&v189;
                v139 = *(_DWORD *)(v138 + 4);
                v140 = *(_DWORD *)(v138 + 48);
                *(_DWORD *)(v136 + 8) = v43 << 8;
                if (((v139 >> 20) & 0xF) != 0)
                  v141 = v139 << 8;
                else
                  v141 = v139 << 12;
                size = v137->size;
                *(CGPoint *)(v136 + 16) = v137->origin;
                *(CGSize *)(v136 + 32) = size;
                *(_QWORD *)(v136 + 48) = v39;
                *(_QWORD *)(v136 + 56) = EntryFillState;
                *(_QWORD *)(v136 + 64) = 0;
                *(_QWORD *)(v136 + 72) = EntryPatternState;
                *(_QWORD *)v136 = &off_1E1629088;
                *(_QWORD *)(v136 + 80) = v122;
                *(float64x2_t *)(v136 + 88) = v182;
                *(float64x2_t *)(v136 + 104) = v177;
                *(float64x2_t *)(v136 + 120) = v179;
                *(_DWORD *)(v136 + 136) = (char)v139;
                *(_QWORD *)(v136 + 140) = *(_QWORD *)(a2 + 72);
                *(_DWORD *)(v136 + 148) = v141 >> 28;
                *(_DWORD *)(v136 + 152) = v140;
                CG::DisplayList::appendEntry((int64x2_t *)v15 + 1, v136);
              }
              goto LABEL_102;
            }
LABEL_78:
            v37 = 1000;
            goto LABEL_103;
          }
LABEL_73:
          v107 = a4;
          goto LABEL_74;
        }
        v197.origin.x = v172;
        v197.origin.y = v96;
        v197.size.width = recta;
        v197.size.height = v98;
        *(CGRect *)(&v97 - 1) = CGRectStandardize(v197);
        v95.f64[0] = v172;
        v97.f64[0] = recta;
      }
      else
      {
        v198.size.height = v97.f64[1];
        if (v97.f64[0] < v169)
        {
          v102 = v95.f64[1];
          v103 = v97.f64[1];
          goto LABEL_67;
        }
      }
      if (v198.size.height >= heighta)
        goto LABEL_73;
      goto LABEL_65;
    }
  }
LABEL_103:
  if (v191)
    CFRelease(v191);
  if (v192)
    CFRelease(v192);
  if (v193)
    CFRelease(v193);
  return v37;
}

void sub_184A159E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  applesauce::CF::ObjectRef<CGImage *>::~ObjectRef((const void **)(v1 - 160));
  applesauce::CF::ObjectRef<CGImage *>::~ObjectRef((const void **)(v1 - 152));
  applesauce::CF::ObjectRef<CGImage *>::~ObjectRef((const void **)(v1 - 144));
  _Unwind_Resume(a1);
}

BOOL CG::DisplayList::getClipRecordingToFrame(CG::DisplayList *this)
{
  if (!*((_BYTE *)this + 56))
    return 0;
  return *((double *)this + 3) != -8.98846567e307
      || *((double *)this + 4) != -8.98846567e307
      || *((double *)this + 5) != 1.79769313e308
      || *((double *)this + 6) != 1.79769313e308;
}

uint64_t CG::DisplayList::imageResourceForImage(CG::DisplayList *this, CGImage *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CGColorSpaceRef ColorSpace;
  _QWORD *Mask;
  char v31;
  uint64_t *v32;
  uint64_t **v33;
  uint64_t **v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  char v38;

  if (!a2)
    return 0;
  ++*((_QWORD *)this + 81);
  v4 = (uint64_t *)((char *)this + 256);
  v5 = *((_QWORD *)this + 32);
  v6 = (uint64_t *)((char *)this + 256);
  if (!v5)
    goto LABEL_35;
  v6 = (uint64_t *)((char *)this + 256);
  do
  {
    v7 = *(_QWORD *)(v5 + 32);
    v8 = *(std::__shared_weak_count **)(v5 + 40);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = *(_QWORD *)(v7 + 16);
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      v11 = *(_QWORD *)(v7 + 16);
    }
    v13 = (uint64_t *)(v5 + 8);
    if (v11 >= (unint64_t)a2)
    {
      v13 = (uint64_t *)v5;
      v6 = (uint64_t *)v5;
    }
    v5 = *v13;
  }
  while (*v13);
  if (v4 == v6)
  {
LABEL_35:
    v27 = operator new();
    v28 = *(_QWORD *)(*(_QWORD *)this - 136);
    *(_DWORD *)(v27 + 8) = 83886080;
    *(_QWORD *)v27 = &off_1E1629320;
    *(_QWORD *)(v27 + 16) = 0;
    *(_QWORD *)(v27 + 40) = 0;
    CFRetain(a2);
    *(_QWORD *)(v27 + 16) = a2;
    *(_OWORD *)(v27 + 24) = *(_OWORD *)((char *)a2 + 40);
    if ((*((_BYTE *)a2 + 39) & 2) != 0 || (ColorSpace = CGImageGetColorSpace(a2)) == 0)
    {
      *(_QWORD *)(v27 + 40) = 0;
      *(_BYTE *)(v27 + 48) |= 0x20u;
      if (*((_QWORD *)a2 + 7) < 2uLL)
        goto LABEL_43;
    }
    else
    {
      *(_QWORD *)(v27 + 40) = (*(uint64_t (**)(char *, CGColorSpaceRef))(*(_QWORD *)((char *)this + v28) + 16))((char *)this + v28, ColorSpace);
      *(_BYTE *)(v27 + 48) &= ~0x20u;
      if (CGImageGetAlphaInfo(a2) - 1 >= 4)
      {
        Mask = CGImageGetMask(a2);
        if (!Mask || Mask[7] <= 1uLL)
        {
LABEL_43:
          if (CGImageGetShouldInterpolate(a2))
            v31 = 16;
          else
            v31 = 0;
          *(_BYTE *)(v27 + 48) = *(_BYTE *)(v27 + 48) & 0xEF | v31;
          *(_BYTE *)(v27 + 48) = *(_BYTE *)(v27 + 48) & 0xF0 | CGImageGetRenderingIntent(a2) & 0xF;
          v32 = (uint64_t *)operator new(0x30uLL);
          v37[0] = v32;
          v37[1] = v4;
          std::shared_ptr<CG::DisplayListResourceImage>::shared_ptr[abi:se180100]<CG::DisplayListResourceImage,void>(v32 + 4, v27);
          v33 = (uint64_t **)((char *)this + 248);
          v38 = 1;
          v34 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>(v33, v6, &v36, &v35, v32 + 4);
          v6 = *v34;
          if (!*v34)
          {
            std::__tree<unsigned long>::__insert_node_at(v33, v36, v34, v32);
            v37[0] = 0;
            v6 = v32;
          }
          std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)v37);
          return v6[4];
        }
      }
    }
    *(_DWORD *)(v27 + 8) |= 0x1000u;
    goto LABEL_43;
  }
  v14 = v6[4];
  v15 = (std::__shared_weak_count *)v6[5];
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  if (*(_QWORD *)(v14 + 16) >= (unint64_t)a2)
  {
    v20 = v6[4];
    v21 = (std::__shared_weak_count *)v6[5];
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      v18 = *(_QWORD *)(v20 + 16) <= (unint64_t)a2;
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 - 1, v22));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    else
    {
      v18 = *(_QWORD *)(v20 + 16) <= (unint64_t)a2;
    }
  }
  else
  {
    v18 = 0;
  }
  if (!v15)
    goto LABEL_34;
  v25 = (unint64_t *)&v15->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!v18)
      goto LABEL_35;
  }
  else
  {
LABEL_34:
    if (!v18)
      goto LABEL_35;
  }
  return v6[4];
}

void sub_184A15DBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DC23C4](v1, 0x10E1C40B0B341C2);
  _Unwind_Resume(a1);
}

uint64_t dlRecorder_DrawImage(uint64_t a1, uint64_t a2, uint64_t a3, CGImage *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, CGFloat a10, double a11, double a12)
{
  CFArrayRef *v12;

  if (a1)
  {
    v12 = *(CFArrayRef **)(a1 + 288);
    if (v12)
      return CG::DisplayListRecorder::DrawImage(v12, a2, a3, a4, a9, a10, a11, a12);
  }
  CGPostError((uint64_t)"%s: CGContextDelegateGetInfo() returned NULL", a2, a3, (uint64_t)a4, a5, a6, a7, a8, (char)"dlRecorder_DrawImage");
  return 1000;
}

uint64_t rip_auto_context_update_content_info_from_image(uint64_t a1, CGImageRef image)
{
  CGColorSpaceRef ColorSpace;
  CGColorSpaceRef v5;
  int content_type_from_color_space;
  BOOL v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  ColorSpace = CGImageGetColorSpace(image);
  v5 = ColorSpace;
  if (image && (*((_BYTE *)image + 39) & 2) != 0)
    goto LABEL_7;
  content_type_from_color_space = rip_auto_context_get_content_type_from_color_space((uint64_t)ColorSpace);
  *(_DWORD *)(a1 + 108) |= content_type_from_color_space;
  if (content_type_from_color_space == 1)
    goto LABEL_11;
  if (content_type_from_color_space != 2)
  {
LABEL_7:
    v8 = 1;
  }
  else
  {
    if (v5)
      v7 = *(_BYTE *)(*((_QWORD *)v5 + 3) + 14) != 0;
    else
      v7 = 0;
    v8 = *(_BYTE *)(a1 + 104) | v7;
  }
  *(_BYTE *)(a1 + 104) = v8;
LABEL_11:
  result = CGImageGetComponentType((uint64_t)image);
  if ((_DWORD)result)
  {
    result = CGPixelComponentMax(result, *(_DWORD *)(a1 + 100), v10, v11, v12, v13, v14, v15);
    *(_DWORD *)(a1 + 100) = result;
  }
  return result;
}

int *shape_union(uint64_t a1, int *a2, int *a3)
{
  int *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  char *v9;
  char *v10;
  _DWORD *v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  char *v16;
  _DWORD *v17;
  int v18;
  int v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  _BOOL4 v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int64_t v29;
  _DWORD *v30;
  int v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  int *v35;
  BOOL v36;
  BOOL v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int *v43;
  int *v44;
  char *v45;
  _DWORD *v46;

  if (!a2)
    return 0;
  v3 = a2;
  if (*a2 != 0x80000000)
    return 0;
  v4 = a3;
  if (!a3)
    return 0;
  v5 = a2[1];
  if ((int)v5 < 1)
    return 0;
  if (*a3 != 0x80000000)
    return 0;
  v6 = a3[1];
  if ((int)v6 < 1)
    return 0;
  if (a2[v5] == 0x7FFFFFFF)
  {
    v7 = a3;
    return shape_copy(v7);
  }
  if (a3[v6] == 0x7FFFFFFF)
  {
    v7 = a2;
    return shape_copy(v7);
  }
  v9 = (char *)malloc_type_malloc(0x800uLL, 0x705560E0uLL);
  if (!v9)
    return 0;
  v10 = v9;
  v11 = 0;
  v43 = 0;
  v44 = 0;
  v12 = 512;
  v13 = v9;
  while (1)
  {
    v14 = v4;
    if (*v3 == 0x7FFFFFFF && *v4 == 0x7FFFFFFF)
      break;
    if (((v10 - v13) >> 2) + 4 <= v12)
    {
      v46 = v11;
    }
    else
    {
      v15 = 2 * v12;
      v16 = (char *)malloc_type_realloc(v13, (8 * v12 + 511) & 0xFFFFFFFFFFFFFE00, 0x7492344AuLL);
      v17 = (_DWORD *)((char *)v11 + v16 - v13);
      if (!v11)
        v17 = 0;
      if (v16 != v13)
      {
        v10 += v16 - v13;
        v11 = v17;
      }
      v46 = v11;
      if (v16 != v13)
        v13 = v16;
      v12 = v15;
    }
    if (!v13)
      return 0;
    v18 = *v3;
    v19 = *v14;
    if (*v14 < *v3)
    {
      v20 = v3;
      v3 = v44;
LABEL_34:
      *(_DWORD *)v10 = v19;
      v4 = &v14[v14[1]];
      v21 = v3;
      v3 = v20;
      goto LABEL_35;
    }
    if (v18 == 0x7FFFFFFF)
    {
      v20 = v3;
      v3 = v44;
    }
    else
    {
      *(_DWORD *)v10 = v18;
      v20 = &v3[v3[1]];
    }
    if (v18 >= v19)
    {
      v19 = *v14;
      if (*v14 != 0x7FFFFFFF)
        goto LABEL_34;
    }
    v21 = v3;
    v3 = v20;
    v4 = v14;
    v14 = v43;
LABEL_35:
    v43 = v14;
    v44 = v21;
    v22 = v21 + 2;
    v23 = v14 + 2;
    v45 = v10 + 4;
    v10 += 8;
    v24 = v14 + 2 != v4;
    v25 = v21 + 2 != v3;
    if (v21 + 2 != v3 || v23 != v4)
    {
      v26 = 0;
      while (1)
      {
        if (((v10 - v13) >> 2) + 4 > v12)
        {
          v27 = 2 * v12;
          v28 = (char *)malloc_type_realloc(v13, (8 * v12 + 511) & 0xFFFFFFFFFFFFFE00, 0x7492344AuLL);
          v29 = v28 - v13;
          if (v28 == v13)
          {
            v12 = v27;
          }
          else
          {
            v30 = (_DWORD *)((char *)v46 + v29);
            if (!v46)
              v30 = 0;
            v46 = v30;
            if (!v28)
              return 0;
            v10 += v29;
            v45 += v29;
            v12 = v27;
            v13 = v28;
          }
        }
        v31 = *v22;
        v32 = *v23;
        v33 = v23 == v4 || v31 <= v32;
        if (!v33 || !v25)
        {
          v34 = v26;
          v35 = v22;
        }
        else
        {
          v34 = v26 ^ 1;
          *(_DWORD *)v10 = v31;
          v35 = v22 + 1;
          v31 = *v22;
          v32 = *v23;
        }
        v36 = v32 <= v31 || v22 == v3;
        if (v36 && v24)
        {
          v34 = v34 ^ 2;
          ++v23;
          *(_DWORD *)v10 = v32;
        }
        if ((_DWORD)v26)
          v37 = (_DWORD)v34 == 0;
        else
          v37 = 1;
        v38 = v37;
        v10 += 4 * v38;
        v24 = v23 != v4;
        v22 = v35;
        v26 = v34;
        v25 = v35 != v3;
        if (v35 == v3)
        {
          v22 = v35;
          v26 = v34;
          if (v23 == v4)
            break;
        }
      }
    }
    v11 = v46;
    v39 = ((unint64_t)(v10 - v45) >> 2) + 1;
    *(_DWORD *)v45 = v39;
    if (v46 && v39 == *v46)
    {
      if (((unint64_t)(v10 - v45) >> 2) != 1)
      {
        v40 = 1;
        while (&v45[v40 * 4] != v10)
        {
          v41 = v46[v40];
          v42 = *(_DWORD *)&v45[v40 * 4];
          ++v40;
          if (v41 != v42)
            goto LABEL_75;
        }
      }
      v10 = v45 - 4;
      v39 = ((unint64_t)(v45 - 4 - (char *)v46) >> 2) + 1;
    }
    else
    {
LABEL_75:
      v11 = v45;
    }
    *v11 = v39;
  }
  *(_DWORD *)v10 = 0x7FFFFFFF;
  return final_check((int *)v13, v12, ((v10 - v13) >> 2) + 1);
}

int *final_check(int *result, uint64_t a2, uint64_t a3)
{
  if (result == (int *)&the_empty_shape)
    return (int *)&the_empty_shape;
  if (result[result[1]] == 0x7FFFFFFF)
  {
    if (result)
      free(result);
    return (int *)&the_empty_shape;
  }
  else if ((unint64_t)(a2 - a3) >= 0x400)
  {
    return (int *)malloc_type_realloc(result, (4 * a3 + 511) & 0xFFFFFFFFFFFFFE00, 0x7492344AuLL);
  }
  return result;
}

double CG::DisplayListRecorder::adjustBoundingBoxToIncludeStroke(CGRect *a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  double result;

  v2 = *(_QWORD *)(a2 + 128);
  v3 = *(double *)(v2 + 8);
  if (*(unsigned __int16 *)(v2 + 2) <= 0xFFu && v3 * *(double *)(v2 + 16) * 0.5 > v3)
    v3 = v3 * *(double *)(v2 + 16) * 0.5;
  *(_QWORD *)&result = (unint64_t)CGRectInset(*a1, -fabs(v3 * *(double *)(a2 + 40) + *(double *)(a2 + 24) * v3), -fabs(v3 * *(double *)(a2 + 48) + *(double *)(a2 + 32) * v3));
  return result;
}

CGColorRef CGColorCreateGenericGrayGamma2_2(CGFloat gray, CGFloat alpha)
{
  CGColorSpace *v2;
  CGColor *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CGFloat components[3];

  components[2] = *(CGFloat *)MEMORY[0x1E0C80C00];
  components[0] = gray;
  components[1] = alpha;
  v2 = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceGenericGrayGamma2_2"));
  v3 = CGColorCreate(v2, components);
  CGColorSpaceRelease(v2);
  if (!v3)
    CGPostError((uint64_t)"Color creation failed for gray 2.2 colorspace %p, {%f, %f}", v4, v5, v6, v7, v8, v9, v10, (char)v2);
  return v3;
}

uint64_t CGGStateGetShouldDrawBitmapRuns(uint64_t a1)
{
  return (**(unsigned __int16 **)(a1 + 136) >> 7) & 1;
}

_BYTE *GRAYA8_pattern(uint64_t a1, _BYTE *a2, unsigned int a3, int a4, float *a5, float a6)
{
  float *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  int v14;
  int v15;
  int v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  BOOL v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  int32x2_t v40;
  char *v41;

  v9 = *(float **)(*(_QWORD *)a1 + 64);
  v11 = *v9;
  v10 = v9[1];
  v12 = v9[2];
  v13 = v9[3];
  if (a2 && a3 > 1 || (a2 = malloc_type_malloc(0x32uLL, 0x705560E0uLL)) != 0)
  {
    v14 = (int)(float)(v13 + (float)(a6 * v12));
    if (a5)
      v15 = a4;
    else
      v15 = 0;
    if (v15 == 4)
    {
      v18 = a5[4];
      v20 = *a5;
      v19 = a5[1];
      v21 = a5[2];
      if (v18 < v11)
        v22 = v11;
      else
        v22 = a5[4];
      if (v18 <= v10)
        v23 = v22;
      else
        v23 = v10;
      v24 = v10;
      if (v20 <= v10)
      {
        v24 = *a5;
        if (v20 < v11)
          v24 = v11;
      }
      if (v19 < v11)
        v25 = v11;
      else
        v25 = a5[1];
      if (v19 <= v10)
        v26 = v25;
      else
        v26 = v10;
      if (v21 < v11)
        v27 = v11;
      else
        v27 = a5[2];
      v28 = v21 <= v10;
      v29 = v10 - (float)(v9[4] * v24);
      if (v28)
        v30 = v27;
      else
        v30 = v10;
      v31 = (float)((float)(v29 - (float)(v9[5] * v26)) - (float)(v9[6] * v30)) - v23;
      if (v31 >= v11)
        v32 = v13 + (float)((float)(v31 * a6) * v12);
      else
        v32 = v11 * a6;
    }
    else
    {
      if (v15 == 3)
      {
        v33 = a5[1];
        v34 = a5[2];
        if (*a5 < v11)
          v35 = v11;
        else
          v35 = *a5;
        if (*a5 <= v10)
          v36 = v35;
        else
          v36 = v10;
        v37 = v10;
        if (v33 <= v10)
        {
          v37 = a5[1];
          if (v33 < v11)
            v37 = v11;
        }
        if (v34 < v11)
          v38 = v11;
        else
          v38 = a5[2];
        if (v34 <= v10)
          v39 = v38;
        else
          v39 = v10;
        v17 = (float)((float)(v37 * v9[5]) + (float)(v9[4] * v36)) + (float)(v9[6] * v39);
      }
      else
      {
        v16 = 0;
        if (v15 != 1)
        {
LABEL_55:
          v40 = vmax_s32(vmin_s32((int32x2_t)__PAIR64__(v14, v16), (int32x2_t)0xFF000000FFLL), 0);
          a2[48] = v40.i8[0];
          *(_OWORD *)a2 = xmmword_185004D60;
          *((_DWORD *)a2 + 6) = 0;
          *((_QWORD *)a2 + 2) = 1;
          if ((float)(v10 * v12) <= (float)v14)
            v41 = 0;
          else
            v41 = a2 + 48;
          *((_QWORD *)a2 + 4) = a2 + 48;
          *((_QWORD *)a2 + 5) = v41;
          a2[49] = v40.i8[4];
          return a2;
        }
        v17 = v10;
        if (*a5 <= v10)
        {
          v17 = *a5;
          if (*a5 < v11)
            v17 = v11;
        }
      }
      v32 = v13 + (float)(a6 * (float)(v12 * v17));
    }
    v16 = (int)v32;
    goto LABEL_55;
  }
  return a2;
}

BOOL path_equal(CGPathRef path1, const CGPath *a2)
{
  _BOOL8 result;

  if (path1 == a2)
    return 1;
  result = 0;
  if (path1)
  {
    if (a2)
      return CGPathEqualToPath(path1, a2);
  }
  return result;
}

BOOL CGPathEqualToPath(CGPathRef path1, CGPathRef path2)
{
  CFTypeID v4;
  CFTypeID TypeID;
  BOOL result;
  CFTypeID v7;
  int v8;
  unint64_t v12;
  unint64_t v13;
  double *v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  size_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;

  if (path1 == path2)
    return 1;
  if (!path1)
    return 0;
  if (CGPathDisableTypeValidation)
  {
    if (!path2)
      return 0;
  }
  else
  {
    v4 = CFGetTypeID(path1);
    TypeID = CGPathGetTypeID();
    result = 0;
    if (!path2 || v4 != TypeID)
      return result;
    if (!CGPathDisableTypeValidation)
    {
      v7 = CFGetTypeID(path2);
      if (v7 != CGPathGetTypeID())
        return 0;
    }
  }
  v8 = *((_DWORD *)path1 + 4);
  if (v8 != *((_DWORD *)path2 + 4))
    return 0;
  switch(v8)
  {
    case 1:
      goto LABEL_41;
    case 2:
      if (*((double *)path1 + 9) != *((double *)path2 + 9) || *((double *)path1 + 10) != *((double *)path2 + 10))
        return 0;
      goto LABEL_41;
    case 3:
      if (*((double *)path1 + 9) != *((double *)path2 + 9) || *((double *)path1 + 10) != *((double *)path2 + 10))
        return 0;
      result = 0;
      if (*((double *)path1 + 11) != *((double *)path2 + 11))
        return result;
      if (*((double *)path1 + 12) != *((double *)path2 + 12))
        return result;
      result = 0;
      if (*((double *)path1 + 13) != *((double *)path2 + 13))
        return result;
      if (*((double *)path1 + 14) != *((double *)path2 + 14))
        return result;
      result = 0;
      if (*((double *)path1 + 15) != *((double *)path2 + 15) || *((double *)path1 + 16) != *((double *)path2 + 16))
        return result;
      goto LABEL_41;
    case 4:
      if (*((unsigned __int8 *)path1 + 72) != *((unsigned __int8 *)path2 + 72)
        || *((unsigned __int8 *)path1 + 73) != *((unsigned __int8 *)path2 + 73))
      {
        return 0;
      }
      goto LABEL_41;
    case 5:
      if (*((double *)path1 + 3) != *((double *)path2 + 3) || *((double *)path1 + 4) != *((double *)path2 + 4))
        return 0;
      return *((double *)path1 + 6) == *((double *)path2 + 6) && *((double *)path1 + 5) == *((double *)path2 + 5);
    case 6:
      if (*((double *)path1 + 9) != *((double *)path2 + 9))
        return 0;
LABEL_41:
      if (*((double *)path1 + 3) != *((double *)path2 + 3))
        return 0;
      return vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*((float64x2_t *)path1 + 2), *((float64x2_t *)path2 + 2)), (int32x4_t)vceqq_f64(*((float64x2_t *)path1 + 3), *((float64x2_t *)path2 + 3)))), 0xFuLL))) & (*((double *)path1 + 8) == *((double *)path2 + 8));
    case 7:
      return CGRegionEqualToRegion(*((_QWORD *)path1 + 3), *((_QWORD *)path2 + 3));
    case 8:
      v12 = *((unsigned __int16 *)path1 + 12);
      if (__PAIR64__(*((unsigned __int16 *)path1 + 13), v12) != __PAIR64__(*((unsigned __int16 *)path2 + 13), *((unsigned __int16 *)path2 + 12))|| *((_DWORD *)path1 + 7) != *((_DWORD *)path2 + 7))
      {
        return 0;
      }
      if (!*((_WORD *)path1 + 12))
        return 1;
      result = 0;
      if (*((double *)path1 + 4) != *((double *)path2 + 4) || *((double *)path1 + 5) != *((double *)path2 + 5))
        return result;
      v13 = 0;
      v14 = (double *)((char *)path2 + 56);
      v15 = (double *)((char *)path1 + 56);
      break;
    case 9:
      v21 = *((_QWORD *)path1 + 4);
      if (v21 != *((_QWORD *)path2 + 4))
        return 0;
      v22 = *((_QWORD *)path1 + 3);
      if (v22 != *((_QWORD *)path2 + 3))
        return 0;
      v23 = (char *)*((_QWORD *)path1 + 6);
      v24 = &v23[*((_QWORD *)path1 + 5) - v21];
      v25 = (char *)*((_QWORD *)path2 + 6);
      if (memcmp(v24, &v25[*((_QWORD *)path2 + 5) - v21], v21))
        return 0;
      return memcmp(v23, v25, 16 * v22) == 0;
    default:
      return 1;
  }
  while (v12 - 1 != v13)
  {
    v16 = *(v15 - 1);
    v17 = *v15;
    v18 = *(v14 - 1);
    v19 = *v14;
    v14 += 2;
    v15 += 2;
    ++v13;
    if (v16 != v18 || v17 != v19)
      return v13 >= v12;
  }
  v13 = *((unsigned __int16 *)path1 + 12);
  return v13 >= v12;
}

void *CGvImage_converter_data_key_retain(_QWORD *a1, _QWORD *a2)
{
  void *result;
  void *v5;
  const void *v6;

  result = malloc_type_malloc(0x288uLL, 0x10E0040AB895360uLL);
  if (result)
  {
    v5 = result;
    memcpy(result, a1, 0x288uLL);
    *a2 = v5;
    v6 = (const void *)a1[5];
    if (v6)
      CFRetain(v6);
    result = (void *)a1[10];
    if (result)
      return (void *)CFRetain(result);
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

CGColorConversionInfoRef CGColorConversionInfoCreateFromList(CFDictionaryRef options, CGColorSpaceRef a2, CGColorConversionInfoTransformType a3, CGColorRenderingIntent a4, ...)
{
  va_list va;

  va_start(va, a4);
  return CGColorConversionInfoCreateFromListWithArguments(options, a2, a3, a4, va);
}

CGColorConversionInfoRef CGColorConversionInfoCreateFromListWithArguments(CFDictionaryRef options, CGColorSpaceRef a2, CGColorConversionInfoTransformType a3, CGColorRenderingIntent a4, va_list a5)
{
  CFTypeID v10;
  int v11;

  v11 = options
     && (v10 = CFGetTypeID(options), v10 == CFDictionaryGetTypeID())
     && CFDictionaryGetValue(options, CFSTR("kCGColorTransformBlackPointCompensation")) == (const void *)*MEMORY[0x1E0C9AE50];
  return (CGColorConversionInfoRef)create_from_argument_list(options, v11, a2, a3, a4, (uint64_t)a5);
}

void cg_color_conversion_info_finalize(uint64_t a1)
{
  CFTypeID v2;
  const void *v3;

  if (a1)
  {
    v2 = CFGetTypeID((CFTypeRef)a1);
    if (CGColorConversionInfoGetTypeID_predicate != -1)
      dispatch_once(&CGColorConversionInfoGetTypeID_predicate, &__block_literal_global_1103);
    if (v2 == kCGColorConverterRuntimeID)
    {
      CGColorSyncTransformCacheRelease(*(void **)(a1 + 16));
      v3 = *(const void **)(a1 + 24);
      if (v3)
        CFRelease(v3);
    }
  }
}

uint64_t CGColorConversionInfoCreateFromListInternal(const void *a1, int a2, _QWORD *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return create_from_argument_list(a1, a2, a3, 0, a5, (uint64_t)&a9);
}

uint64_t create_from_argument_list(const void *a1, int a2, _QWORD *a3, int a4, unsigned int a5, uint64_t a6)
{
  _QWORD *SceneReferredLinearDerivative;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  _BOOL4 v15;
  unsigned int v16;
  _BOOL4 v17;
  _BOOL4 v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const __CFDictionary *v27;
  uint64_t (*v28)(_QWORD *);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  int v37;
  _BOOL4 v38;
  __CFString *ColorsyncTransformType;
  CFArrayRef ProfileSetForColorSpace;
  const __CFArray *v41;
  __CFArray *Mutable;
  CGColorSpace **v43;
  CGColorSpace *v44;
  int *v45;
  int v46;
  unsigned int v47;
  CGColorSpace *v48;
  int v49;
  __CFString *v50;
  const __CFArray *v51;
  const __CFArray *v52;
  uint64_t v53;
  _BOOL4 v54;
  int v55;
  _BOOL4 v56;
  const __CFDictionary *new_transform_options;
  CFMutableArrayRef v58;
  CFMutableArrayRef v59;
  const __CFDictionary *v60;
  const __CFArray *Retained;
  _BOOL4 v63;
  int v64;
  CFTypeRef cf;
  int *v67;
  CFRange v68;
  CFRange v69;
  CFRange v70;

  SceneReferredLinearDerivative = a3;
  v12 = a4 == 1 || a4 == 4;
  if (a4 == 8)
  {
    if (CGColorSpaceGetType(a3) == 6 && *(_BYTE *)(SceneReferredLinearDerivative[3] + 18))
    {
      v13 = 0;
    }
    else
    {
      SceneReferredLinearDerivative = CGColorSpaceCreateSceneReferredLinearDerivative(SceneReferredLinearDerivative);
      v13 = SceneReferredLinearDerivative;
      if (!SceneReferredLinearDerivative)
        return 0;
    }
    goto LABEL_14;
  }
  v13 = 0;
  if (a3)
  {
LABEL_14:
    v14 = SceneReferredLinearDerivative[3];
    cf = v13;
    if (*(_BYTE *)(v14 + 16))
      v15 = 1;
    else
      v15 = *(unsigned __int8 *)(v14 + 17) != 0;
    v63 = v15;
    v13 = SceneReferredLinearDerivative;
    goto LABEL_18;
  }
  v63 = 0;
  cf = 0;
LABEL_18:
  v64 = a2;
  if (CGColorSpaceGetType(v13) == 6 && *(_BYTE *)(v13[3] + 18))
  {
    v16 = a5;
    v17 = 1;
  }
  else
  {
    v16 = a5;
    v17 = CGColorSpaceGetType(v13) == 6 && *(_BYTE *)(v13[3] + 19) != 0;
  }
  v18 = CGColorSpaceContainsFlexGTCInfo((_BOOL8)v13);
  v19 = CGColorConversionInfoOptionsDisplayReferredToneMappingRequested(a1);
  v20 = CGColorConversionInfoOptionsSceneReferredToneMappingRequested(a1);
  if ((CGColorConversionInfoOptionsFlexTRCRequested((const __CFDictionary *)a1) & 1) != 0)
  {
    v27 = (const __CFDictionary *)a1;
    if (!v18)
    {
LABEL_26:
      if (v13 && (v28 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)(v13[3] + 104) + 48)) != 0)
      {
        v29 = v28(v13);
        CGLog(2, (uint64_t)"Use of FlexGTC requested but color space %@ doesn't contain FlexGTC info", v30, v31, v32, v33, v34, v35, v29);
        if (v29)
        {
          v36 = (const void *)v29;
LABEL_78:
          CFRelease(v36);
        }
      }
      else
      {
        CGLog(2, (uint64_t)"Use of FlexGTC requested but color space %@ doesn't contain FlexGTC info", v21, v22, v23, v24, v25, v26, 0);
      }
      return 0;
    }
  }
  else
  {
    v27 = (const __CFDictionary *)a1;
    if (((CGColorConversionInfoOptionsFlexLumaRequested((const __CFDictionary *)a1) ^ 1 | v18) & 1) == 0)
      goto LABEL_26;
  }
  v37 = (v63 || v17) | v19 | v20;
  if (v13)
    v38 = *(_BYTE *)(v13[3] + 13) != 0;
  else
    v38 = 0;
  ColorsyncTransformType = (__CFString *)CGColorSpaceGetColorsyncTransformType(v13, a4);
  ProfileSetForColorSpace = CGCMSUtilsCreateProfileSetForColorSpace((CGColorSpace *)v13, ColorsyncTransformType, v16, v64, v38, v12);
  if (ProfileSetForColorSpace)
  {
    v41 = ProfileSetForColorSpace;
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v69.length = CFArrayGetCount(v41);
      v69.location = 0;
      CFArrayAppendArray(Mutable, v41, v69);
      CFRelease(v41);
      v43 = (CGColorSpace **)a6;
      v67 = (int *)(a6 + 8);
      v44 = *v43;
      if (*v43)
      {
        while (1)
        {
          v45 = v67;
          v46 = *v67;
          v47 = v67[2];
          v67 += 6;
          v48 = (CGColorSpace *)*((_QWORD *)v45 + 2);
          v49 = *(unsigned __int8 *)(*((_QWORD *)v44 + 3) + 13);
          v50 = (__CFString *)CGColorSpaceGetColorsyncTransformType(v44, v46);
          v51 = CGCMSUtilsCreateProfileSetForColorSpace(v44, v50, v47, v64, v49, v48 == 0);
          if (!v51)
            break;
          v52 = v51;
          v70.length = CFArrayGetCount(v51);
          v70.location = 0;
          CFArrayAppendArray(Mutable, v52, v70);
          CFRelease(v52);
          v53 = *((_QWORD *)v44 + 3);
          if (*(_BYTE *)(v53 + 16))
            v54 = 1;
          else
            v54 = *(unsigned __int8 *)(v53 + 17) != 0;
          if (CGColorSpaceGetType(v44) == 6 && *(_BYTE *)(*((_QWORD *)v44 + 3) + 18))
          {
            v55 = 1;
          }
          else
          {
            v56 = CGColorSpaceGetType(v44) == 6 && *(_BYTE *)(*((_QWORD *)v44 + 3) + 19) != 0;
            if (v54 || v56)
              v55 = 1;
            else
              v55 = v37;
          }
          v37 = v55 != 0;
          v44 = v48;
          if (!v48)
            goto LABEL_55;
        }
        if (cf)
          CFRelease(cf);
        v36 = Mutable;
        goto LABEL_78;
      }
    }
    else
    {
      CFRelease(v41);
    }
  }
  else
  {
    Mutable = 0;
  }
LABEL_55:
  if (cf)
    CFRelease(cf);
  if (!Mutable)
    return 0;
  if (v37)
  {
    if (create_3DLUT_for_PQEETF_predicate != -1)
      dispatch_once(&create_3DLUT_for_PQEETF_predicate, &__block_literal_global_68);
    if (create_3DLUT_for_PQEETF_status)
      goto LABEL_65;
    if (create_3DLUT_for_HLG_SceneReferredMapping_predicate != -1)
      dispatch_once(&create_3DLUT_for_HLG_SceneReferredMapping_predicate, &__block_literal_global_71);
    if (create_3DLUT_for_HLG_SceneReferredMapping_status)
    {
LABEL_65:
      new_transform_options = create_new_transform_options(v27);
      goto LABEL_71;
    }
  }
  else if (!linked_on_golden_gate_or_later())
  {
    v58 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (v58)
    {
      v59 = v58;
      v68.length = CFArrayGetCount(Mutable);
      v68.location = 0;
      CFArrayApplyFunction(Mutable, v68, (CFArrayApplierFunction)modify, v59);
      CFRelease(Mutable);
      Mutable = v59;
    }
  }
  if (!v27)
  {
    v60 = 0;
    goto LABEL_72;
  }
  new_transform_options = (const __CFDictionary *)CFRetain(v27);
LABEL_71:
  v60 = new_transform_options;
LABEL_72:
  Retained = CGColorSyncTransformCacheGetRetained(Mutable, v60);
  CFRelease(Mutable);
  if (v60)
    CFRelease(v60);
  return create_conversion_info(Retained, v27);
}

void converter_finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  void *v7;

  if (a1)
  {
    v2 = *(const void **)(a1 + 24);
    if (v2)
      CFRelease(v2);
    v3 = *(const void **)(a1 + 32);
    if (v3)
      CFRelease(v3);
    v4 = *(const void **)(a1 + 72);
    if (v4)
      CFRelease(v4);
    CGColorSyncTransformCacheRelease(*(void **)(a1 + 88));
    v5 = *(const void **)(a1 + 96);
    if (v5)
      CFRelease(v5);
    v6 = *(const void **)(a1 + 200);
    if (v6)
      CFRelease(v6);
    v7 = *(void **)(a1 + 216);
    if (v7)
      free(v7);
  }
}

uint64_t CGCMSConverterCreate(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5, int *a6)
{
  unsigned int Type;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t Instance;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  CFTypeRef v31;
  uint64_t v32;
  __CFArray *colorsync_profile_sequence;
  __CFArray *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  CFTypeID v43;
  const void *Value;
  CFTypeID v45;
  const __CFDictionary *v46;
  const __CFDictionary *v47;
  CFTypeID v48;
  const void *v49;
  CFTypeID v50;
  const void *v51;
  CFTypeID v52;
  const void *v53;
  const void *v54;
  CFTypeID v55;
  _BOOL4 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  _BOOL4 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *lookup_table;
  uint64_t v82;
  int v83;
  uint64_t v84;
  _QWORD *v85;
  unsigned int v86;
  char v87;
  int v88;
  BOOL v89;
  int v90;
  uint64_t v91;
  int Boolean;
  _BOOL4 v93;
  char *v94;
  int v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  _BOOL4 v105;
  uint64_t v106;
  CFTypeRef v107;
  uint64_t v108;
  uint64_t v109;
  const __CFString *conv_type_f;
  const __CFString *v111;
  int v112;
  int *v113;
  CFTypeRef v114;
  _BOOL4 v116;
  int *v117;
  __CFArray *cf;
  _BOOL4 v119;
  unsigned int v120;
  const __CFArray *Retained;
  BOOL v122;
  BOOL v123;
  BOOL v124;
  BOOL v125;

  switch(CGColorSpaceGetType(a2))
  {
    case 0u:
    case 1u:
    case 2u:
      Type = CGColorSpaceGetType(a2);
      v13 = CGColorSpaceGetType(a1);
      if (Type >= 3)
        _CGHandleAssert("create_device", 350, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "srcType == kCGColorSpaceDeviceGray || srcType == kCGColorSpaceDeviceRGB || srcType == kCGColorSpaceDeviceCMYK", "incompatible colorspace type %d", v17, v18, v19, Type);
      v20 = v13;
      if (v13 > 2)
        return 0;
      v21 = kCGCMSConverterID;
      if (!kCGCMSConverterID)
      {
        pthread_once(&CGCMSConverterGetTypeID_once, converter_initialize);
        v21 = kCGCMSConverterID;
      }
      Instance = CGTypeCreateInstance(v21, 216, v14, v15, v16, v17, v18, v19);
      *(_DWORD *)(Instance + 84) = 0;
      *(_QWORD *)(Instance + 32) = CFRetain(a2);
      if (a1)
      {
        *(_QWORD *)(Instance + 24) = CFRetain(a1);
        if (a2)
          v23 = *(_QWORD *)(a2[3] + 40);
        else
          v23 = 0;
        *(_QWORD *)(Instance + 48) = v23;
        v91 = *(_QWORD *)(a1[3] + 40);
      }
      else
      {
        *(_QWORD *)(Instance + 24) = 0;
        if (a2)
          v84 = *(_QWORD *)(a2[3] + 40);
        else
          v84 = 0;
        v91 = 0;
        *(_QWORD *)(Instance + 48) = v84;
      }
      *(_QWORD *)(Instance + 40) = v91;
      if (v20 == Type)
        v95 = 3;
      else
        v95 = 1;
      *(_DWORD *)(Instance + 16) = v95;
      *(_QWORD *)(Instance + 56) = convert_device;
      *(_QWORD *)(Instance + 64) = null_buffer_converter_info;
      if (!a6)
        goto LABEL_181;
      goto LABEL_113;
    case 3u:
    case 4u:
    case 5u:
      if (CGColorSpaceGetType(a1) > 2 || CGColorSpaceGetType(a1) > 2)
        goto LABEL_15;
      v30 = kCGCMSConverterID;
      if (!kCGCMSConverterID)
      {
        pthread_once(&CGCMSConverterGetTypeID_once, converter_initialize);
        v30 = kCGCMSConverterID;
      }
      Instance = CGTypeCreateInstance(v30, 216, v24, v25, v26, v27, v28, v29);
      *(_QWORD *)(Instance + 56) = convert_Lab_to_device;
      if (a1)
      {
        v31 = CFRetain(a1);
        v32 = *(_QWORD *)(a1[3] + 40);
      }
      else
      {
        v31 = 0;
        v32 = 0;
      }
      *(_QWORD *)(Instance + 24) = v31;
      *(_QWORD *)(Instance + 40) = v32;
      *(_QWORD *)(Instance + 48) = 3;
      v95 = 1;
      *(_DWORD *)(Instance + 16) = 1;
      *(_QWORD *)(Instance + 64) = null_buffer_converter_info;
      if (a6)
LABEL_113:
        *a6 = v95;
      goto LABEL_181;
    case 6u:
    case 0xAu:
    case 0xBu:
LABEL_15:
      colorsync_profile_sequence = create_colorsync_profile_sequence((CGColorSpace *)a1, (CGColorSpace *)a2, a3, a4);
      if (!colorsync_profile_sequence)
        return 0;
      v34 = colorsync_profile_sequence;
      Retained = CGColorSyncTransformCacheGetRetained(colorsync_profile_sequence, a5);
      if (!Retained)
      {
        CGPostError((uint64_t)"%s: CGColorSyncTransformCacheGetRetained failed!", v35, v36, v37, v38, v39, v40, v41, (char)"create_icc");
        v49 = v34;
        goto LABEL_26;
      }
      v42 = CGColorConversionInfoOptionsDisplayReferredToneMappingRequested(a5);
      v120 = CGColorConversionInfoOptionsSceneReferredToneMappingRequested(a5);
      v117 = a6;
      cf = v34;
      if (a5)
      {
        v43 = CFGetTypeID(a5);
        v116 = v43 == CFDictionaryGetTypeID()
            && ((Value = a5, CFDictionaryContainsKey(a5, CFSTR("kCGColorConversionInfoOptions")) != 1)
             || (Value = CFDictionaryGetValue(a5, CFSTR("kCGColorConversionInfoOptions"))) != 0)
            && (v45 = CFGetTypeID(Value), v45 == CFDictionaryGetTypeID())
            && (v46 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)Value, CFSTR("kCGImageExtendedRangeToneMappingInfo"))) != 0&& (v47 = v46, v48 = CFGetTypeID(v46), v48 == CFDictionaryGetTypeID())&& CFDictionaryContainsKey(v47, CFSTR("kCGApplyEXRToneMappingGamma")) != 0;
        v50 = CFGetTypeID(a5);
        if (v50 == CFDictionaryGetTypeID())
        {
          v51 = a5;
          if (CFDictionaryContainsKey(a5, CFSTR("kCGColorConversionInfoOptions")) != 1
            || (v51 = CFDictionaryGetValue(a5, CFSTR("kCGColorConversionInfoOptions"))) != 0)
          {
            v52 = CFGetTypeID(v51);
            if (v52 == CFDictionaryGetTypeID())
            {
              v53 = CFDictionaryGetValue((CFDictionaryRef)v51, CFSTR("kCGApplyReferenceWhiteToneMapping"));
              if (v53)
              {
                v54 = v53;
                v55 = CFGetTypeID(v53);
                v57 = v55 == CFDictionaryGetTypeID() || v54 == (const void *)*MEMORY[0x1E0C9AE50];
LABEL_53:
                v65 = CGColorConversionInfoOptionsFlexTRCRequested(a5);
                v66 = CGColorConversionInfoOptionsFlexLumaRequested(a5);
                v73 = v66;
                if (!a2 || (v74 = a2[3], !*(_BYTE *)(v74 + 16)) && !*(_BYTE *)(v74 + 17))
                {
                  if (a1)
                  {
                    v75 = a1[3];
                    if (*(_BYTE *)(v75 + 16))
                      goto LABEL_74;
                    v76 = *(unsigned __int8 *)(v75 + 17) != 0;
                  }
                  else
                  {
                    v76 = 0;
                  }
                  if ((v76 | v42 | v120 | v57 | v65 | v66) != 1)
                  {
                    v86 = v42;
                    v119 = 0;
                    if (a2)
                    {
LABEL_82:
                      v90 = *(_BYTE *)(a2[3] + 13) != 0;
                      goto LABEL_87;
                    }
LABEL_86:
                    v90 = 0;
LABEL_87:
                    if (!(v90 ^ 1 | v86))
                      v90 = v120 | v116;
                    if ((v90 | v57 | v65 | v73) == 1)
                    {
                      if (a5
                        && CFDictionaryContainsKey(a5, CFSTR("kCGConvertColorDataUseColorSyncForToneMapping")) == 1)
                      {
                        v123 = 0;
                        Boolean = CGCFDictionaryGetBoolean(a5, CFSTR("kCGConvertColorDataUseColorSyncForToneMapping"), &v123);
                        if (v123)
                          v93 = Boolean;
                        else
                          v93 = 0;
                        goto LABEL_144;
                      }
                      if (v86)
                      {
                        if (use_colorsync_for_display_referred_tone_mapping_from_defaults_predicate != -1)
                          dispatch_once(&use_colorsync_for_display_referred_tone_mapping_from_defaults_predicate, &__block_literal_global_29_1938);
                        v94 = &use_colorsync_for_display_referred_tone_mapping_from_defaults_status;
                        goto LABEL_141;
                      }
                      if (v120)
                      {
                        if (use_colorsync_for_scene_referred_tone_mapping_from_defaults_predicate != -1)
                          dispatch_once(&use_colorsync_for_scene_referred_tone_mapping_from_defaults_predicate, &__block_literal_global_32);
                        v94 = &use_colorsync_for_scene_referred_tone_mapping_from_defaults_status;
                        goto LABEL_141;
                      }
                      if (v116)
                      {
                        if (use_colorsync_for_exr_gamma_tone_mapping_from_defaults_predicate != -1)
                          dispatch_once(&use_colorsync_for_exr_gamma_tone_mapping_from_defaults_predicate, &__block_literal_global_34_1939);
                        v94 = &use_colorsync_for_exr_gamma_tone_mapping_from_defaults_status;
                        goto LABEL_141;
                      }
                      if (v57)
                      {
                        if (use_colorsync_for_reference_white_tone_mapping_from_defaults_predicate != -1)
                          dispatch_once(&use_colorsync_for_reference_white_tone_mapping_from_defaults_predicate, &__block_literal_global_37_1940);
                        v94 = &use_colorsync_for_reference_white_tone_mapping_from_defaults_status;
                        goto LABEL_141;
                      }
                      if (v73)
                      {
                        if (use_colorsync_for_flexLuma_from_defaults_predicate != -1)
                          dispatch_once(&use_colorsync_for_flexLuma_from_defaults_predicate, &__block_literal_global_40_1941);
                        v94 = &use_colorsync_for_flexLuma_from_defaults_status;
                        goto LABEL_141;
                      }
                      if (v65)
                      {
                        if (use_colorsync_for_flexTRC_from_defaults_predicate != -1)
                          dispatch_once(&use_colorsync_for_flexTRC_from_defaults_predicate, &__block_literal_global_43_1942);
                        v94 = &use_colorsync_for_flexTRC_from_defaults_status;
LABEL_141:
                        v93 = *v94 != 0;
                        if (!a5)
                        {
LABEL_142:
                          v99 = 0;
                          goto LABEL_153;
                        }
LABEL_144:
                        if (CFDictionaryContainsKey(a5, CFSTR("kCGApplyLuminanceScaling")) == 1)
                        {
                          v124 = 0;
                          v100 = CGCFDictionaryGetBoolean(a5, CFSTR("kCGApplyLuminanceScaling"), &v124);
                          if (v124)
                            v99 = v100;
                          else
                            v99 = 0;
                        }
                        else
                        {
                          v99 = 0;
                        }
                        if (CFDictionaryContainsKey(a5, CFSTR("kCGConvertColorDataUseColorSync")) == 1)
                        {
                          v125 = 0;
                          v101 = CGCFDictionaryGetBoolean(a5, CFSTR("kCGConvertColorDataUseColorSync"), &v125);
                          if (v125)
                            v102 = v101;
                          else
                            v102 = 0;
LABEL_154:
                          v103 = kCGCMSConverterID;
                          if (!kCGCMSConverterID)
                          {
                            pthread_once(&CGCMSConverterGetTypeID_once, converter_initialize);
                            v103 = kCGCMSConverterID;
                          }
                          v104 = CGTypeCreateInstance(v103, 216, v67, v68, v69, v70, v71, v72);
                          Instance = v104;
                          *(_DWORD *)(v104 + 84) = a3;
                          if (a2)
                          {
                            *(_QWORD *)(v104 + 32) = CFRetain(a2);
                            v105 = v119;
                            if (a1)
                            {
                              *(_QWORD *)(Instance + 24) = CFRetain(a1);
                              v106 = *(_QWORD *)(a2[3] + 40);
LABEL_161:
                              *(_QWORD *)(Instance + 48) = v106;
                              v108 = *(_QWORD *)(a1[3] + 40);
                              goto LABEL_165;
                            }
                            *(_QWORD *)(Instance + 24) = 0;
                            v109 = *(_QWORD *)(a2[3] + 40);
                          }
                          else
                          {
                            *(_QWORD *)(v104 + 32) = 0;
                            v105 = v119;
                            if (a1)
                            {
                              v107 = CFRetain(a1);
                              v106 = 0;
                              *(_QWORD *)(Instance + 24) = v107;
                              goto LABEL_161;
                            }
                            v109 = 0;
                            *(_QWORD *)(v104 + 24) = 0;
                          }
                          v108 = 0;
                          *(_QWORD *)(Instance + 48) = v109;
LABEL_165:
                          *(_QWORD *)(Instance + 40) = v108;
                          if (transform_get_conv_type_cglibrarypredicate != -1)
                            dispatch_once(&transform_get_conv_type_cglibrarypredicate, &__block_literal_global_45_1943);
                          conv_type_f = (const __CFString *)transform_get_conv_type_f(Retained, CFSTR("com.apple.cmm.TransformType"), 0);
                          if (conv_type_f)
                          {
                            v111 = conv_type_f;
                            if (CFEqual(conv_type_f, CFSTR("NULLTransform")))
                            {
                              v112 = 3;
                            }
                            else if (CFEqual(v111, CFSTR("DeviceTransform")))
                            {
                              v112 = 1;
                            }
                            else
                            {
                              v112 = 2 * (CFStringHasPrefix(v111, CFSTR("RegularTransform.")) != 0);
                            }
                            CFRelease(v111);
                          }
                          else
                          {
                            v112 = 0;
                          }
                          *(_DWORD *)(Instance + 16) = v112;
                          if (((v102 | v105) & 1) != 0)
                          {
                            *(_BYTE *)(Instance + 224) = 1;
                            v113 = v117;
                          }
                          else
                          {
                            *(_BYTE *)(Instance + 224) = v93 | v99;
                            v113 = v117;
                            if (((v93 | v99) & 1) == 0)
                            {
                              CGColorSyncTransformCacheRelease(Retained);
                              if (!v117)
                                goto LABEL_180;
                              goto LABEL_179;
                            }
                          }
                          *(_QWORD *)(Instance + 88) = Retained;
                          if (!v113)
                          {
LABEL_180:
                            CFRelease(cf);
                            *(_QWORD *)(Instance + 56) = convert_icc;
                            *(_QWORD *)(Instance + 64) = icc_converter_info;
                            goto LABEL_181;
                          }
LABEL_179:
                          *v113 = *(_DWORD *)(Instance + 16);
                          goto LABEL_180;
                        }
LABEL_153:
                        v102 = 0;
                        goto LABEL_154;
                      }
                    }
                    v93 = 0;
                    if (!a5)
                      goto LABEL_142;
                    goto LABEL_144;
                  }
                }
LABEL_74:
                v86 = v42;
                if (use_colorsync_for_hdr_from_defaults_predicate != -1)
                  dispatch_once(&use_colorsync_for_hdr_from_defaults_predicate, &__block_literal_global_26);
                v87 = use_colorsync_for_hdr_from_defaults_status;
                v119 = use_colorsync_for_hdr_from_defaults_status != 0;
                if (a5 && CFDictionaryContainsKey(a5, CFSTR("kCGConvertColorDataUseColorSyncForHDR")) == 1)
                {
                  v122 = 0;
                  v88 = CGCFDictionaryGetBoolean(a5, CFSTR("kCGConvertColorDataUseColorSyncForHDR"), &v122);
                  v89 = v122;
                  if (!v88)
                    v89 = v87;
                  v119 = v89;
                }
                if (a2)
                  goto LABEL_82;
                goto LABEL_86;
              }
            }
          }
        }
      }
      else
      {
        v116 = 0;
      }
      v57 = 0;
      goto LABEL_53;
    case 7u:
      if (a2 && (v58 = a2[3], (*(_DWORD *)(v58 + 24) - 5) <= 1))
        v59 = **(_QWORD **)(v58 + 88);
      else
        v59 = 0;
      Instance = CGCMSConverterCreate(a1, v59, a3, a4, a5, a6);
      if (!Instance)
        return Instance;
      lookup_table = create_lookup_table((uint64_t)a2, v59, Instance, 0, v77, v78, v79, v80);
      *(_QWORD *)(Instance + 216) = lookup_table;
      if (lookup_table)
      {
        if (a2)
        {
          v82 = a2[3];
          *(_QWORD *)(Instance + 48) = *(_QWORD *)(v82 + 40);
          *(_QWORD *)(Instance + 56) = convert_indexed;
          *(_QWORD *)(Instance + 64) = indexed_converter_info;
          if (*(_DWORD *)(v82 + 24) == 5)
            v83 = *(_DWORD *)(*(_QWORD *)(v82 + 88) + 8) + 1;
          else
            v83 = 0;
          *(_DWORD *)(Instance + 208) = v83;
          CFRetain(a2);
        }
        else
        {
          *(_QWORD *)(Instance + 48) = 0;
          *(_QWORD *)(Instance + 56) = convert_indexed;
          *(_QWORD *)(Instance + 64) = indexed_converter_info;
          *(_DWORD *)(Instance + 208) = 0;
        }
        *(_QWORD *)(Instance + 200) = a2;
        goto LABEL_181;
      }
      v49 = (const void *)Instance;
LABEL_26:
      CFRelease(v49);
      return 0;
    case 8u:
      if (!a2)
      {
        v85 = (_QWORD *)CGCMSConverterCreate(a1, 0, a3, a4, a5, a6);
        Instance = (uint64_t)v85;
        if (!v85)
          return Instance;
        v85[13] = v85[7];
        v85[6] = 0;
        v85[7] = convert_deviceN;
        v85[8] = deviceN_converter_info;
        goto LABEL_124;
      }
      v60 = a2[3];
      v61 = *(_DWORD *)(v60 + 20);
      switch(v61)
      {
        case 6:
          v62 = (uint64_t *)(*(_QWORD *)(v60 + 88) + 56);
          goto LABEL_120;
        case 10:
          v62 = (uint64_t *)(*(_QWORD *)(v60 + 88) + 48);
          goto LABEL_120;
        case 8:
          v62 = (uint64_t *)(*(_QWORD *)(v60 + 88) + 8);
LABEL_120:
          v96 = *v62;
          goto LABEL_122;
      }
      v96 = 0;
LABEL_122:
      v97 = (_QWORD *)CGCMSConverterCreate(a1, v96, a3, a4, a5, a6);
      Instance = (uint64_t)v97;
      if (!v97)
        return Instance;
      v98 = *(_QWORD *)(a2[3] + 40);
      v97[13] = v97[7];
      v97[6] = v98;
      v97[7] = convert_deviceN;
      v97[8] = deviceN_converter_info;
      CFRetain(a2);
LABEL_124:
      *(_QWORD *)(Instance + 96) = a2;
LABEL_181:
      *(_BYTE *)(Instance + 80) = a4;
      if (a5)
        v114 = CFRetain(a5);
      else
        v114 = 0;
      *(_QWORD *)(Instance + 72) = v114;
      return Instance;
    case 9u:
      if (a2 && (v63 = a2[3], (*(_DWORD *)(v63 + 24) - 5) <= 1))
        v64 = **(_QWORD **)(v63 + 88);
      else
        v64 = 0;
      Instance = CGCMSConverterCreate(a1, v64, a3, a4, a5, a6);
      if (!Instance)
        return Instance;
      goto LABEL_181;
    default:
      return 0;
  }
}

void CGColorSyncTransformCacheRelease(void *a1)
{
  CFTypeID v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1)
  {
    v2 = CFGetTypeID(a1);
    if (CGColorSyncTransformCacheRelease_cglibrarypredicate != -1)
      dispatch_once(&CGColorSyncTransformCacheRelease_cglibrarypredicate, &__block_literal_global_10_11251);
    if (v2 == CGColorSyncTransformCacheRelease_f())
    {
      if (get_cache_predicate_11220 != -1)
        dispatch_once(&get_cache_predicate_11220, &__block_literal_global_23_11221);
      if (cache_release_value(*(cache_t **)(get_cache_transform_cache + 64), a1))
        CGPostError((uint64_t)"%s: cache_release_value failed", v3, v4, v5, v6, v7, v8, v9, (char)"CGColorSyncTransformCacheRelease");
    }
  }
}

const void *CGColorConversionInfoOptionsSceneReferredToneMappingRequested(const void *result)
{
  const void *v1;
  CFTypeID v2;
  CFTypeID v3;
  const __CFDictionary *v4;
  CFTypeID v5;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (v2 != CFDictionaryGetTypeID())
      return 0;
    if (CFDictionaryContainsKey((CFDictionaryRef)v1, CFSTR("kCGColorConversionInfoOptions")) != 1
      || (result = CFDictionaryGetValue((CFDictionaryRef)v1, CFSTR("kCGColorConversionInfoOptions")),
          (v1 = result) != 0))
    {
      v3 = CFGetTypeID(v1);
      if (v3 == CFDictionaryGetTypeID())
      {
        result = CFDictionaryGetValue((CFDictionaryRef)v1, CFSTR("kCGImageExtendedRangeToneMappingInfo"));
        if (!result)
          return result;
        v4 = (const __CFDictionary *)result;
        v5 = CFGetTypeID(result);
        if (v5 == CFDictionaryGetTypeID())
          return (const void *)(CFDictionaryContainsKey(v4, CFSTR("kCGApplySceneReferredExtendedRangeToneMapping")) != 0);
      }
      return 0;
    }
  }
  return result;
}

const void *CGColorConversionInfoOptionsDisplayReferredToneMappingRequested(const void *result)
{
  const void *v1;
  CFTypeID v2;
  CFTypeID v3;
  const __CFDictionary *v4;
  CFTypeID v5;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (v2 != CFDictionaryGetTypeID())
      return 0;
    if (CFDictionaryContainsKey((CFDictionaryRef)v1, CFSTR("kCGColorConversionInfoOptions")) != 1
      || (result = CFDictionaryGetValue((CFDictionaryRef)v1, CFSTR("kCGColorConversionInfoOptions")),
          (v1 = result) != 0))
    {
      v3 = CFGetTypeID(v1);
      if (v3 == CFDictionaryGetTypeID())
      {
        result = CFDictionaryGetValue((CFDictionaryRef)v1, CFSTR("kCGImageExtendedRangeToneMappingInfo"));
        if (!result)
          return result;
        v4 = (const __CFDictionary *)result;
        v5 = CFGetTypeID(result);
        if (v5 == CFDictionaryGetTypeID())
          return (const void *)(CFDictionaryContainsKey(v4, CFSTR("kCGApplyDisplayReferredExtendedRangeToneMapping")) != 0);
      }
      return 0;
    }
  }
  return result;
}

const __CFArray *CGColorSyncTransformCacheGetRetained(const __CFArray *theArray, const __CFDictionary *a2)
{
  const __CFArray *v3;
  CFDictionaryRef v4;
  CFIndex Count;
  CFIndex v6;
  unint64_t v7;
  size_t v8;
  CFDictionaryRef v9;
  CFIndex v10;
  CC_MD5_CTX *v11;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  CFTypeID v14;
  const __CFData *Value;
  uint64_t v16;
  __CFDictionary *Mutable;
  void *Retained_f;
  uint64_t v19;
  void *value_out;
  unsigned __int8 md[16];
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  value_out = 0;
  if (!theArray)
    return theArray;
  v3 = theArray;
  if (CGOSAppleInternalBuild_predicate != -1)
    dispatch_once(&CGOSAppleInternalBuild_predicate, &__block_literal_global_16536);
  if (!CGOSAppleInternalBuild_is_internal)
    goto LABEL_13;
  if (CGColorSyncTransformCacheGetRetained_predicate != -1)
    dispatch_once(&CGColorSyncTransformCacheGetRetained_predicate, &__block_literal_global_11218);
  v4 = (CFDictionaryRef)CGColorSyncTransformCacheGetRetained_bundle_options;
  if (CGColorSyncTransformCacheGetRetained_bundle_options)
  {
    if (a2)
    {
      Count = CFDictionaryGetCount((CFDictionaryRef)CGColorSyncTransformCacheGetRetained_bundle_options);
      v6 = CFDictionaryGetCount(a2) + Count;
      MEMORY[0x1E0C80A78]();
      v7 = (8 * v6 + 15) & 0xFFFFFFFFFFFFFFF0;
      if ((unint64_t)(8 * v6) >= 0x200)
        v8 = 512;
      else
        v8 = 8 * v6;
      bzero((char *)&v19 - v7, v8);
      MEMORY[0x1E0C80A78]();
      bzero((char *)&v19 - v7, v8);
      CFDictionaryGetKeysAndValues((CFDictionaryRef)CGColorSyncTransformCacheGetRetained_bundle_options, (const void **)((char *)&v19 - v7), (const void **)((char *)&v19 - v7));
      CFDictionaryGetKeysAndValues(a2, (const void **)((char *)&v19 + 8 * Count - v7), (const void **)((char *)&v19 + 8 * Count - v7));
      v4 = CFDictionaryCreate(0, (const void **)((char *)&v19 - v7), (const void **)((char *)&v19 - v7), v6, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v9 = v4;
    }
    else
    {
      v9 = 0;
    }
    a2 = v4;
  }
  else
  {
LABEL_13:
    v9 = 0;
  }
  *(_OWORD *)md = 0u;
  v22 = 0u;
  v10 = CFArrayGetCount(v3);
  v11 = (CC_MD5_CTX *)malloc_type_malloc(0x5CuLL, 0x2062DE7BuLL);
  CC_MD5_Init(v11);
  if (v10 >= 1)
  {
    for (i = 0; i != v10; ++i)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v3, i);
      CFDictionaryApplyFunction(ValueAtIndex, (CFDictionaryApplierFunction)md5_creator_11219, v11);
    }
  }
  if (v11)
    CC_MD5_Final(md, v11);
  free(v11);
  if (a2)
  {
    v14 = CFGetTypeID(a2);
    if (v14 == CFDictionaryGetTypeID())
    {
      Value = (const __CFData *)CFDictionaryGetValue(a2, CFSTR("kCGColorSyncTransformCacheUUID"));
      if (Value)
      {
        v22 = *(_OWORD *)CFDataGetBytePtr(Value);
      }
      else
      {
        *(_QWORD *)&v22 = CGCFDictionaryGetMD5Digest(a2, 0);
        *((_QWORD *)&v22 + 1) = v16;
      }
    }
  }
  if (get_cache_predicate_11220 != -1)
    dispatch_once(&get_cache_predicate_11220, &__block_literal_global_23_11221);
  pthread_mutex_lock((pthread_mutex_t *)get_cache_transform_cache);
  if (get_cache_predicate_11220 != -1)
    dispatch_once(&get_cache_predicate_11220, &__block_literal_global_23_11221);
  if (cache_get_and_retain(*(cache_t **)(get_cache_transform_cache + 64), md, &value_out))
  {
    if (a2)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CGColorTransformOptionsToColorSyncTransformOptions(Mutable, a2);
      if (CFDictionaryGetCount(Mutable))
      {
LABEL_35:
        if (CGColorSyncTransformCacheGetRetained_cglibrarypredicate != -1)
          dispatch_once(&CGColorSyncTransformCacheGetRetained_cglibrarypredicate, &__block_literal_global_7_11222);
        Retained_f = (void *)CGColorSyncTransformCacheGetRetained_f(v3, Mutable);
        value_out = Retained_f;
        if (Mutable)
        {
          CFRelease(Mutable);
          Retained_f = value_out;
        }
        if (Retained_f)
        {
          if (get_cache_predicate_11220 != -1)
            dispatch_once(&get_cache_predicate_11220, &__block_literal_global_23_11221);
          cache_set_and_retain(*(cache_t **)(get_cache_transform_cache + 64), md, value_out, 0);
        }
        goto LABEL_43;
      }
      CFRelease(Mutable);
    }
    Mutable = 0;
    goto LABEL_35;
  }
LABEL_43:
  if (get_cache_predicate_11220 != -1)
    dispatch_once(&get_cache_predicate_11220, &__block_literal_global_23_11221);
  pthread_mutex_unlock((pthread_mutex_t *)get_cache_transform_cache);
  if (v9)
    CFRelease(v9);
  return (const __CFArray *)value_out;
}

uint64_t CGCFDictionaryGetMD5Digest(const __CFDictionary *a1, unsigned __int8 a2)
{
  CC_MD5_CTX *v4;
  uint64_t v5;
  _QWORD context[2];
  unsigned __int8 md[8];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)md = 0;
  v9 = 0;
  v4 = (CC_MD5_CTX *)malloc_type_malloc(0x5CuLL, 0x2062DE7BuLL);
  CC_MD5_Init(v4);
  context[0] = v4;
  context[1] = a2;
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)md5_creator, context);
  if (v4)
  {
    CC_MD5_Final(md, v4);
    v5 = *(_QWORD *)md;
  }
  else
  {
    v5 = 0;
  }
  free(v4);
  return v5;
}

void object_md5_creator(CC_MD5_CTX *a1, const __CFString *propertyList)
{
  CFTypeID v4;
  uint64_t length;
  _OWORD *v6;
  CFTypeID v7;
  uint64_t v8;
  CC_MD5_CTX *v9;
  CC_LONG v10;
  CFTypeID v11;
  const __CFURL *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFURL *v19;
  const __CFString *v20;
  const __CFString *v21;
  const char *CStringPtr;
  char *v23;
  size_t v24;
  CFTypeID v25;
  const char *v26;
  char *v27;
  size_t v28;
  CFTypeID v29;
  CFIndex v30;
  char *BytePtr;
  CFTypeID v32;
  CFIndex v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  CFTypeID v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const __CFData *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  CFIndex v55;
  char *v56;
  _OWORD data[64];
  uint64_t v58;
  CFRange v59;

  v58 = *MEMORY[0x1E0C80C00];
  if (!propertyList)
    goto LABEL_47;
  v4 = CFGetTypeID(propertyList);
  if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1)
    dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_77);
  if (v4 == CGColorSpaceGetTypeID_type_id)
  {
    length = propertyList->length;
    if (length)
      v6 = (_OWORD *)(length + 56);
    else
      v6 = 0;
    data[0] = *v6;
    if (!a1)
      return;
    goto LABEL_16;
  }
  v7 = CFGetTypeID(propertyList);
  if (object_md5_creator_cglibrarypredicate != -1)
    dispatch_once(&object_md5_creator_cglibrarypredicate, &__block_literal_global_249);
  if (v7 != object_md5_creator_f())
  {
    v11 = CFGetTypeID(propertyList);
    if (v11 == CFURLGetTypeID())
    {
      v12 = CFURLCopyAbsoluteURL((CFURLRef)propertyList);
      if (v12)
      {
        v19 = v12;
        v20 = CFURLCopyFileSystemPath(v12, kCFURLPOSIXPathStyle);
        if (v20)
        {
          v21 = v20;
          CStringPtr = CFStringGetCStringPtr(v20, 0x8000100u);
          if (CStringPtr)
          {
            if (a1)
            {
              v23 = (char *)CStringPtr;
              v24 = strlen(CStringPtr);
              md5_update(a1, v23, v24);
            }
            CFRelease(v21);
            goto LABEL_50;
          }
          CFRelease(v21);
        }
        CFRelease(v19);
      }
      CGLog(3, (uint64_t)"md5_creator failed for CFURL %p", v13, v14, v15, v16, v17, v18, (char)propertyList);
      return;
    }
    v25 = CFGetTypeID(propertyList);
    if (v25 == CFStringGetTypeID())
    {
      v26 = CFStringGetCStringPtr(propertyList, 0x8000100u);
      if (v26)
      {
        if (a1)
        {
          v27 = (char *)v26;
          v28 = strlen(v26);
          md5_update(a1, v27, v28);
        }
      }
      else
      {
        bzero(data, 0x401uLL);
        v33 = CFStringGetLength(propertyList);
        if (!CFStringGetCString(propertyList, (char *)data, 1024, 0x600u))
        {
          v59.location = 0;
          v59.length = v33;
          CFStringGetBytes(propertyList, v59, 0x600u, 0x3Fu, 0, (UInt8 *)data, 1024, 0);
        }
        v34 = strlen((const char *)data);
        if (v34)
        {
          if (a1)
            md5_update(a1, (char *)data, v34);
        }
        else
        {
          CGLog(3, (uint64_t)"md5_creator failed for CFString %p", v35, v36, v37, v38, v39, v40, (char)propertyList);
        }
      }
      return;
    }
    v29 = CFGetTypeID(propertyList);
    if (v29 == CFDataGetTypeID())
    {
      v30 = CFDataGetLength((CFDataRef)propertyList);
      BytePtr = (char *)CFDataGetBytePtr((CFDataRef)propertyList);
      if (a1)
        md5_update(a1, BytePtr, v30);
      return;
    }
    v32 = CFGetTypeID(propertyList);
    if (v32 == CFBooleanGetTypeID())
    {
      LODWORD(data[0]) = *MEMORY[0x1E0C9AE50] == (_QWORD)propertyList;
      if (!a1)
        return;
      v9 = a1;
      v10 = 4;
LABEL_17:
      CC_MD5_Update(v9, data, v10);
      return;
    }
    v41 = CFGetTypeID(propertyList);
    if (v41 == CFNumberGetTypeID())
    {
      *(_QWORD *)&data[0] = 0;
      if (CFNumberGetValue((CFNumberRef)propertyList, kCFNumberDoubleType, data) != 1)
      {
        CGLog(3, (uint64_t)"md5_creator failed for CFNumber %p", v42, v43, v44, v45, v46, v47, (char)propertyList);
        return;
      }
      if (a1)
      {
        v9 = a1;
        v10 = 8;
        goto LABEL_17;
      }
      return;
    }
LABEL_47:
    v48 = CFPropertyListCreateData(0, propertyList, kCFPropertyListBinaryFormat_v1_0, 0, 0);
    if (!v48)
    {
      CGLog(3, (uint64_t)"md5_creator failed for %p object", v49, v50, v51, v52, v53, v54, (char)propertyList);
      return;
    }
    v19 = v48;
    v55 = CFDataGetLength(v48);
    v56 = (char *)CFDataGetBytePtr(v19);
    if (a1)
      md5_update(a1, v56, v55);
LABEL_50:
    CFRelease(v19);
    return;
  }
  if (object_md5_creator_cglibrarypredicate_3 != -1)
    dispatch_once(&object_md5_creator_cglibrarypredicate_3, &__block_literal_global_5);
  *(_QWORD *)&data[0] = object_md5_creator_f_2(propertyList);
  *((_QWORD *)&data[0] + 1) = v8;
  if (a1)
  {
LABEL_16:
    v9 = a1;
    v10 = 16;
    goto LABEL_17;
  }
}

void md5_creator(const __CFString *propertyList, const __CFString *a2, uint64_t a3)
{
  if (!*(_BYTE *)(a3 + 8))
    object_md5_creator(*(CC_MD5_CTX **)a3, propertyList);
  object_md5_creator(*(CC_MD5_CTX **)a3, a2);
}

CC_MD5_CTX *md5_update(CC_MD5_CTX *c, char *data, unint64_t a3)
{
  unint64_t v3;
  CC_MD5_CTX *v5;

  v3 = a3;
  v5 = c;
  if (HIDWORD(a3))
  {
    do
    {
      CC_MD5_Update(v5, data, 0xFFFFFFFF);
      data += 0xFFFFFFFFLL;
      v3 -= 0xFFFFFFFFLL;
    }
    while (HIDWORD(v3));
  }
  else if (!a3)
  {
    return c;
  }
  return (CC_MD5_CTX *)CC_MD5_Update(v5, data, v3);
}

const __CFString *CGColorSpaceGetColorsyncTransformType(_QWORD *a1, int a2)
{
  const __CFString *result;
  int Type;

  result = CFSTR("ColorSyncTransformDeviceToPCS");
  switch(a2)
  {
    case 0:
    case 3:
      return result;
    case 1:
    case 4:
      Type = CGColorSpaceGetType(a1);
      result = CFSTR("ColorSyncTransformPCSToDevice");
      if (Type == 6)
      {
        if (*(_BYTE *)(a1[3] + 18))
          return CFSTR("ColorSyncTransformPCSToSceneLinear");
      }
      return result;
    case 2:
      return CFSTR("ColorSyncTransformPCSToPCS");
    case 5:
      return CFSTR("ColorSyncTransformDeviceToSceneLinearPCS");
    case 6:
      return CFSTR("ColorSyncTransformSceneLinearPCSToDevice");
    case 7:
      if (CGColorSpaceGetType(a1) != 6 || !*(_BYTE *)(a1[3] + 18))
        goto LABEL_11;
      result = CFSTR("ColorSyncTransformPCSToSceneLinear");
      break;
    case 8:
      if (CGColorSpaceGetType(a1) == 6 && *(_BYTE *)(a1[3] + 18))
        return CFSTR("ColorSyncTransformSceneLinearToPCS");
      else
        return CFSTR("ColorSyncTransformDeviceToSceneLinearPCS");
    default:
LABEL_11:
      result = 0;
      break;
  }
  return result;
}

uint64_t CGColorConversionInfoIterateFunctionsWithCallbacks(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, int a8)
{
  CFTypeID v15;
  CFTypeID v16;
  uint64_t v17;
  uint64_t v18;
  CFTypeID v19;
  const __CFDictionary *v20;
  __CFDictionary *Mutable;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __CFDictionary *v25;
  uint64_t v27;
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[3];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[28];

  if (!a1)
    return 0;
  v15 = CFGetTypeID(a1);
  if (CGColorConversionInfoGetTypeID_predicate != -1)
    dispatch_once(&CGColorConversionInfoGetTypeID_predicate, &__block_literal_global_1103);
  if (v15 != kCGColorConverterRuntimeID)
    return 0;
  v16 = CFGetTypeID(a1);
  if (CGColorConversionInfoGetTypeID_predicate != -1)
    dispatch_once(&CGColorConversionInfoGetTypeID_predicate, &__block_literal_global_1103);
  if (v16 == kCGColorConverterRuntimeID)
  {
    v17 = a6;
    v27 = a1[2];
  }
  else
  {
    v17 = a6;
    v27 = 0;
  }
  v19 = CFGetTypeID(a1);
  if (CGColorConversionInfoGetTypeID_predicate != -1)
    dispatch_once(&CGColorConversionInfoGetTypeID_predicate, &__block_literal_global_1103);
  if (v19 == kCGColorConverterRuntimeID)
    v20 = (const __CFDictionary *)a1[3];
  else
    v20 = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (a2 >= 3)
    _CGHandleAssert("colorsync_iterator_type", 217, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfoIterator.c", "", "Unimplemented", v22, v23, v24, v27);
  v25 = Mutable;
  if (!Mutable)
  {
    if (a7 < 7)
      goto LABEL_21;
LABEL_28:
    _CGHandleAssert("color_sync_nxm_format", 251, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorConversionInfoIterator.c", "", "Unimplemented", v22, v23, v24, v27);
  }
  CFDictionarySetValue(Mutable, CFSTR("com.apple.cmm.TransformIterationType"), off_1E1630880[a2]);
  if (a7 >= 7)
    goto LABEL_28;
  CFDictionarySetValue(v25, CFSTR("com.apple.cmm.NxMLUTFormat"), off_1E1630898[a7]);
LABEL_21:
  CGCFDictionarySetInteger(v25, CFSTR("com.apple.cmm.GridPointCount"), a8);
  CGColorTransformOptionsToColorSyncTransformOptions(v25, v20);
  v33[0] = 0;
  v33[1] = v33;
  v33[2] = 0x6800000000;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  memset(v37, 0, sizeof(v37));
  if (CGColorConversionInfoIterateFunctionsWithCallbacks_cglibrarypredicate != -1)
    dispatch_once(&CGColorConversionInfoIterateFunctionsWithCallbacks_cglibrarypredicate, &__block_literal_global_29);
  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 0x40000000;
  v32[2] = __CGColorConversionInfoIterateFunctionsWithCallbacks_block_invoke_2;
  v32[3] = &unk_1E16305E8;
  v32[4] = a3;
  v32[5] = v33;
  v30[5] = v33;
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 0x40000000;
  v31[2] = __CGColorConversionInfoIterateFunctionsWithCallbacks_block_invoke_3;
  v31[3] = &unk_1E1630610;
  v31[4] = a4;
  v31[5] = v33;
  v29[5] = v33;
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 0x40000000;
  v30[2] = __CGColorConversionInfoIterateFunctionsWithCallbacks_block_invoke_4;
  v30[3] = &unk_1E1630638;
  v30[4] = a5;
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 0x40000000;
  v29[2] = __CGColorConversionInfoIterateFunctionsWithCallbacks_block_invoke_5;
  v29[3] = &unk_1E1630660;
  v29[4] = v17;
  v18 = CGColorConversionInfoIterateFunctionsWithCallbacks_f(v27, v25, v32, v31, v30, v29);
  if (v25)
    CFRelease(v25);
  _Block_object_dispose(v33, 8);
  return v18;
}

void CGColorTransformOptionsToColorSyncTransformOptions(__CFDictionary *a1, const __CFDictionary *a2)
{
  const __CFDictionary *Value;

  if (a2)
  {
    cg_options_to_colorsync_options(a1, a2);
    Value = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("kCGColorConversionInfoOptions"));
    cg_options_to_colorsync_options(a1, Value);
  }
}

BOOL linked_on_golden_gate_or_later()
{
  BOOL v0;

  if (linked_on_golden_gate_or_later_predicate != -1)
    dispatch_once(&linked_on_golden_gate_or_later_predicate, &__block_literal_global_64);
  if (linked_on_golden_gate_or_later_linked_on_golden_gate_or_later)
    v0 = 0;
  else
    v0 = linked_on_golden_gate_or_later_linked_on_azul_or_later == 0;
  return !v0
      || linked_on_golden_gate_or_later_linked_on_archer_or_later != 0
      || linked_on_golden_gate_or_later_linked_on_borealis_or_later != 0;
}

uint64_t create_conversion_info(const void *a1, const void *a2)
{
  CFTypeID v4;
  const void *is_null_f;
  const void *v6;
  int v7;
  uint64_t v8;
  uint64_t Instance;
  CFTypeRef v11;

  if (!a1)
    return 0;
  v4 = CFGetTypeID(a1);
  if (create_conversion_info_cglibrarypredicate != -1)
    dispatch_once(&create_conversion_info_cglibrarypredicate, &__block_literal_global_78);
  if (v4 != create_conversion_info_f())
    return 0;
  if (transform_is_null_cglibrarypredicate != -1)
    dispatch_once(&transform_is_null_cglibrarypredicate, &__block_literal_global_81_1111);
  is_null_f = (const void *)transform_is_null_f(a1, CFSTR("com.apple.cmm.TransformType"), 0);
  if (is_null_f)
  {
    v6 = is_null_f;
    v7 = CFEqual(is_null_f, CFSTR("NULLTransform"));
    CFRelease(v6);
    if (v7)
      return 0;
  }
  if (CGColorConversionInfoGetTypeID_predicate != -1)
    dispatch_once(&CGColorConversionInfoGetTypeID_predicate, &__block_literal_global_1103);
  Instance = _CFRuntimeCreateInstance();
  v8 = Instance;
  if (Instance)
  {
    *(_QWORD *)(Instance + 16) = a1;
    *(_QWORD *)(Instance + 24) = 0;
    if (a2)
      v11 = CFRetain(a2);
    else
      v11 = 0;
    *(_QWORD *)(v8 + 24) = v11;
  }
  return v8;
}

void CGCFDictionarySetInteger(__CFDictionary *a1, const void *a2, int a3)
{
  CFNumberRef v5;
  CFNumberRef v6;
  int valuePtr;

  valuePtr = a3;
  if (a1 && a2)
  {
    v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v5)
    {
      v6 = v5;
      CFDictionarySetValue(a1, a2, v5);
      CFRelease(v6);
    }
  }
}

void cg_options_to_colorsync_options(__CFDictionary *a1, const __CFDictionary *a2)
{
  CFTypeID TypeID;
  const void *ValueWithType;
  CFTypeID v6;
  const void *v7;
  CFTypeID v8;
  const void *v9;
  int v10;
  CFTypeID v11;
  const __CFString *v12;
  const void *v13;
  int v14;
  CFTypeID v15;
  const __CFString *v16;
  const void *v17;
  CFTypeID v18;
  const void *v19;
  CFTypeID v20;
  const void *v21;
  CFTypeID v22;
  const void *v23;
  CFTypeID v24;
  const void *v25;
  CFTypeID v26;
  const void *v27;
  CFTypeID v28;
  CFTypeID v29;
  const void *v30;
  CFTypeID v31;
  const void *v32;
  const __CFArray *Value;
  const __CFArray *v34;
  CFTypeID v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  CFIndex v43;
  __CFArray *Mutable;
  const __CFNumber *ValueAtIndex;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const __CFNumber *v52;
  CFTypeID v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  CFIndex i;
  void *v61;
  uint64_t j;
  const void *v63;
  const void *v64;
  CFTypeID v65;
  const void *v66;
  CFTypeID v67;
  const void *v68;
  CFTypeID v69;
  const void *v70;
  CFTypeID v71;
  const void *v72;
  CFTypeID v73;
  const void *v74;
  CFTypeID v75;
  const void *v76;
  CFTypeID v77;
  const void *v78;
  CFTypeID v79;
  const void *v80;
  CFTypeID v81;
  const void *v82;
  CFTypeID v83;
  const void *v84;
  CFTypeID v85;
  const void *v86;
  CFTypeID v87;
  const void *v88;
  CFTypeID v89;
  const void *v90;
  CFTypeID v91;
  const void *v92;
  CFTypeID v93;
  const void *v94;
  CFTypeID v95;
  const void *v96;
  CFTypeID v97;
  const void *v98;
  CFTypeID v99;
  const void *v100;
  CFTypeID v101;
  const void *v102;
  CFTypeID v103;
  const void *v104;
  CFTypeID v105;
  const void *v106;
  const __CFDictionary *v107;
  const void *v108;
  const void *v109;
  CFDictionaryRef ResolveReferenceWhiteToneMappingOptions;
  CFDictionaryRef v111;
  const __CFDictionary *colorsync_reference_white_tone_mapping_options;
  const __CFDictionary *v113;
  CFDictionaryRef v114;
  CFDictionaryRef ResolveFlexLumaOptions;
  CFTypeID v116;
  const __CFDictionary *v117;
  const __CFDictionary *v118;
  CFTypeID v119;
  CFDictionaryRef v120;
  __CFString *v121;
  CFDictionaryRef ResolveFlexTRCOptions;
  CFTypeID v123;
  const __CFDictionary *v124;
  const __CFDictionary *v125;
  CFTypeID v126;
  CFDictionaryRef v127;
  const __CFDictionary *v128;
  CFDictionaryRef ResolveExtendedRangeToneMappingOptions;
  char v130;
  void *values;
  void *v132;
  int v133;
  void *keys[2];
  __int128 v135;
  const void *valuePtr[2];

  valuePtr[1] = *(const void **)MEMORY[0x1E0C80C00];
  if (!a1 || !a2)
    return;
  TypeID = CFBooleanGetTypeID();
  ValueWithType = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGPQEOTFTable"), TypeID);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.PQEOTFTable"), ValueWithType, (CFNumberType)0);
  v6 = CFNumberGetTypeID();
  v7 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGPQEOTFTableSize"), v6);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.PQEOTFTableSize"), v7, kCFNumberSInt32Type);
  v8 = CFBooleanGetTypeID();
  v9 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGPQInvEOTFTable"), v8);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.PQInvEOTFTable"), v9, (CFNumberType)0);
  v10 = CFDictionaryContainsKey(a2, CFSTR("kCGHLGEOTFTable"));
  v11 = CFBooleanGetTypeID();
  if (v10 == 1)
    v12 = CFSTR("kCGHLGEOTFTable");
  else
    v12 = CFSTR("kCGHLGInvOETFTable");
  v13 = CGCFDictionaryGetValueWithType(a2, v12, v11);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.HLGInvOETFTable"), v13, (CFNumberType)0);
  v14 = CFDictionaryContainsKey(a2, CFSTR("kCGHLGEOTFTableSize"));
  v15 = CFNumberGetTypeID();
  if (v14)
    v16 = CFSTR("kCGHLGEOTFTableSize");
  else
    v16 = CFSTR("kCGHLGInvOETFTableSize");
  v17 = CGCFDictionaryGetValueWithType(a2, v16, v15);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.HLGInvOETFTableSize"), v17, kCFNumberSInt32Type);
  v18 = CFBooleanGetTypeID();
  v19 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGHLGOETFTable"), v18);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.HLGOETFTable"), v19, (CFNumberType)0);
  v20 = CFNumberGetTypeID();
  v21 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGHLGOOTFGainScale"), v20);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.HLGOOTFGainScale"), v21, kCFNumberFloatType);
  v22 = CFNumberGetTypeID();
  v23 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGPQEOTFOpticalScale"), v22);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.PQEOTFOpticalScale"), v23, kCFNumberFloatType);
  v24 = CFNumberGetTypeID();
  v25 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGPQInvEOTFOpticalScale"), v24);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.PQInvEOTFOpticalScale"), v25, kCFNumberFloatType);
  v26 = CFNumberGetTypeID();
  v27 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGHLGInvOETFOpticalScale"), v26);
  if (!v27)
  {
    v28 = CFNumberGetTypeID();
    v27 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGHLGEOTFOpticalScale"), v28);
  }
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.HLGInvOETFOpticalScale"), v27, kCFNumberFloatType);
  v29 = CFNumberGetTypeID();
  v30 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGHLGOETFOpticalScale"), v29);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.HLGOETFOpticalScale"), v30, kCFNumberFloatType);
  v31 = CFNumberGetTypeID();
  v32 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGHLGSurroundLuminance"), v31);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.HLGSurroundLuminance"), v32, kCFNumberFloatType);
  Value = (const __CFArray *)CFDictionaryGetValue(a2, CFSTR("kCGHLGLuminanceCoefficients"));
  v34 = Value;
  if (Value)
  {
    v35 = CFGetTypeID(Value);
    if (v35 == CFArrayGetTypeID())
    {
      if (CFArrayGetCount(v34) > 3)
      {
        v43 = 0;
        Mutable = 0;
        *(_OWORD *)keys = 0u;
        v135 = 0u;
        while (1)
        {
          ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v34, v43);
          if (!ValueAtIndex)
            break;
          v52 = ValueAtIndex;
          v53 = CFGetTypeID(ValueAtIndex);
          if (v53 != CFNumberGetTypeID())
            break;
          LODWORD(valuePtr[0]) = 0;
          if (!CFNumberGetValue(v52, kCFNumberFloatType, valuePtr))
          {
            CFNumberGetType(v52);
            CGLog(2, (uint64_t)"kCGHLGLuminanceCoefficients has incorrect value type at index %ld type = %s instead of kCFNumberFloatType - rounding errors may occur", v54, v55, v56, v57, v58, v59, v43);
            if (!Mutable)
            {
              Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
              if (!Mutable)
                goto LABEL_33;
            }
            keys[v43] = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
          }
          if (++v43 == 4)
          {
            if (Mutable)
            {
              for (i = 0; i != 4; ++i)
              {
                v61 = keys[i];
                if (!v61)
                  v61 = (void *)CFArrayGetValueAtIndex(v34, i);
                CFArraySetValueAtIndex(Mutable, i, v61);
              }
              v34 = (const __CFArray *)CFAutorelease(Mutable);
            }
            goto LABEL_33;
          }
        }
        CGLog(2, (uint64_t)"kCGHLGLuminanceCoefficients has a non number value at index %ld - coefficients ignored", v46, v47, v48, v49, v50, v51, v43);
        if (Mutable)
          CFRelease(Mutable);
LABEL_33:
        for (j = 0; j != 4; ++j)
        {
          v63 = keys[j];
          if (v63)
            CFRelease(v63);
        }
        goto LABEL_37;
      }
      v42 = "Array count for kCGHLGLuminanceCoefficients is less than 4 - ignored";
    }
    else
    {
      v42 = "Value for kCGHLGLuminanceCoefficients is not a CFArray - ignored";
    }
    CGLog(2, (uint64_t)v42, v36, v37, v38, v39, v40, v41, v130);
    v34 = 0;
  }
LABEL_37:
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.HLGLuminanceCoefficients"), v34, (CFNumberType)0);
  v64 = CFDictionaryGetValue(a2, CFSTR("kCGUseHLGReferenceLuminance"));
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.kColorSyncUseHLGReferenceLuminance"), v64, (CFNumberType)0);
  v65 = CFBooleanGetTypeID();
  v66 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGHLGSkipOOTF"), v65);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.SkipHLGOOTF"), v66, (CFNumberType)0);
  v67 = CFBooleanGetTypeID();
  v68 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGHLGSkipInvOOTF"), v67);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.SkipInvHLGOOTF"), v68, (CFNumberType)0);
  v69 = CFBooleanGetTypeID();
  v70 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGPQSkipPQEETF"), v69);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.SkipPQEETF"), v70, (CFNumberType)0);
  v71 = CFNumberGetTypeID();
  v72 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGPQMasteringDisplayWhite"), v71);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.PQMasteringDisplayWhite"), v72, kCFNumberFloatType);
  v73 = CFNumberGetTypeID();
  v74 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGPQMasteringDisplayBlack"), v73);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.PQMasteringDisplayBlack"), v74, kCFNumberFloatType);
  v75 = CFNumberGetTypeID();
  v76 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGTargetDisplayWhite"), v75);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.TargetDisplayWhite"), v76, kCFNumberFloatType);
  v77 = CFNumberGetTypeID();
  v78 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGTargetDisplayBlack"), v77);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.TargetDisplayBlack"), v78, kCFNumberFloatType);
  v79 = CFBooleanGetTypeID();
  v80 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGSkipToneMappingForBT2100"), v79);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.SkipToneMappingForBT2100"), v80, (CFNumberType)0);
  v81 = CFBooleanGetTypeID();
  v82 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGApplyToneMappingForBT2100"), v81);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.ApplyToneMappingForBT2100"), v82, (CFNumberType)0);
  v83 = CFBooleanGetTypeID();
  v84 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGPQEETF3DLut"), v83);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.PQEETF3DLut"), v84, (CFNumberType)0);
  v85 = CFNumberGetTypeID();
  v86 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGPQEETF3DLutGridPoints"), v85);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.PQEETF3DLutGridPoints"), v86, (CFNumberType)0);
  v87 = CFBooleanGetTypeID();
  v88 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGHLGSceneMapping3DLut"), v87);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.HLGSceneMapping3DLut"), v88, (CFNumberType)0);
  v89 = CFNumberGetTypeID();
  v90 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGHLGSceneMapping3DLutGridPoints"), v89);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.HLGSceneMapping3DLutGridPoints"), v90, kCFNumberSInt32Type);
  v91 = CFNumberGetTypeID();
  v92 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGColorConversionTRCSize"), v91);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.TRCSize"), v92, kCFNumberSInt32Type);
  v93 = CFBooleanGetTypeID();
  v94 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGApplyYCCGammaScaling"), v93);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.ApplyYCCGammaScaling"), v94, kCFNumberFloatType);
  v95 = CFBooleanGetTypeID();
  v96 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGApplyLuminanceScaling"), v95);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.ApplyLuminanceScaling"), v96, kCFNumberFloatType);
  v97 = CFBooleanGetTypeID();
  v98 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGUseBT1886ForCoreVideoGamma"), v97);
  sanitize_and_set_options(a1, CFSTR("com.apple.ColorSync.BT1886ForCoreVideoGamma"), v98, (CFNumberType)0);
  v99 = CFNumberGetTypeID();
  v100 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGHDRMediaReferenceWhite"), v99);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.kColorSyncHDRMediaReferenceWhite"), v100, kCFNumberFloatType);
  v101 = CFBooleanGetTypeID();
  v102 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGUseLegacyHDREcosystem"), v101);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.UseLegacyHDREcosystem"), v102, (CFNumberType)0);
  v103 = CFBooleanGetTypeID();
  v104 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGSkipBoostToHDR"), v103);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.SkipBoostToHDR"), v104, (CFNumberType)0);
  v105 = CFBooleanGetTypeID();
  v106 = CGCFDictionaryGetValueWithType(a2, CFSTR("kCGUse100nitsHLGOOTF"), v105);
  sanitize_and_set_options(a1, CFSTR("com.apple.cmm.UseHLGOOTFForCoreVideo"), v106, (CFNumberType)0);
  v107 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("kCGApplyReferenceWhiteToneMapping"));
  v108 = CFDictionaryGetValue(a2, CFSTR("kCGApplyFlexTRC"));
  v109 = CFDictionaryGetValue(a2, CFSTR("kCGApplyFlexLumaScaling"));
  if (v107)
  {
    ResolveReferenceWhiteToneMappingOptions = CGColorTransformCreateResolveReferenceWhiteToneMappingOptions(v107);
    if (!ResolveReferenceWhiteToneMappingOptions)
      return;
    v111 = ResolveReferenceWhiteToneMappingOptions;
    colorsync_reference_white_tone_mapping_options = (const __CFDictionary *)create_colorsync_reference_white_tone_mapping_options(ResolveReferenceWhiteToneMappingOptions);
    if (!colorsync_reference_white_tone_mapping_options)
      goto LABEL_67;
LABEL_40:
    v113 = colorsync_reference_white_tone_mapping_options;
    CFDictionarySetValue(a1, CFSTR("com.apple.cmm.ApplyToneMaping"), colorsync_reference_white_tone_mapping_options);
    v114 = v113;
LABEL_41:
    CFRelease(v114);
LABEL_67:
    CFRelease(v111);
    return;
  }
  if (v109)
  {
    ResolveFlexLumaOptions = CGColorTransformCreateResolveFlexLumaOptions(v109);
    if (!ResolveFlexLumaOptions)
      return;
    v111 = ResolveFlexLumaOptions;
    v116 = CFGetTypeID(ResolveFlexLumaOptions);
    if (v116 != CFDictionaryGetTypeID())
      goto LABEL_67;
    v117 = (const __CFDictionary *)CFDictionaryGetValue(v111, CFSTR("kCGApplyFlexLumaScaling"));
    if (!v117)
      goto LABEL_67;
    v118 = v117;
    v119 = CFGetTypeID(v117);
    if (v119 != CFDictionaryGetTypeID())
      goto LABEL_67;
    v133 = 0;
    if ((get_float_from_dictionary(v118, CFSTR("kCGFlexGTCTargetHeadroom"), &v133) & 1) == 0)
      goto LABEL_67;
    keys[0] = CFSTR("com.apple.cmm.FlexGTCTargetHeadroom");
    LODWORD(v132) = v133;
    valuePtr[0] = CFNumberCreate(0, kCFNumberFloatType, &v132);
    v120 = CFDictionaryCreate(0, (const void **)keys, valuePtr, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (valuePtr[0])
      CFRelease(valuePtr[0]);
    v121 = CFSTR("com.apple.cmm.ApplyFlexLumaScaling");
    goto LABEL_60;
  }
  if (v108)
  {
    ResolveFlexTRCOptions = CGColorTransformCreateResolveFlexTRCOptions(v108);
    if (!ResolveFlexTRCOptions)
      return;
    v111 = ResolveFlexTRCOptions;
    v123 = CFGetTypeID(ResolveFlexTRCOptions);
    if (v123 != CFDictionaryGetTypeID())
      goto LABEL_67;
    v124 = (const __CFDictionary *)CFDictionaryGetValue(v111, CFSTR("kCGApplyFlexTRC"));
    if (!v124)
      goto LABEL_67;
    v125 = v124;
    v126 = CFGetTypeID(v124);
    if (v126 != CFDictionaryGetTypeID())
      goto LABEL_67;
    v133 = 0;
    if ((get_float_from_dictionary(v125, CFSTR("kCGFlexGTCTargetHeadroom"), &v133) & 1) == 0)
      goto LABEL_67;
    keys[0] = CFSTR("com.apple.cmm.FlexGTCTargetHeadroom");
    LODWORD(v132) = v133;
    valuePtr[0] = CFNumberCreate(0, kCFNumberFloatType, &v132);
    v120 = CFDictionaryCreate(0, (const void **)keys, valuePtr, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (valuePtr[0])
      CFRelease(valuePtr[0]);
    v121 = CFSTR("com.apple.cmm.ApplyFlexTRC");
LABEL_60:
    values = v120;
    v132 = v121;
    v127 = CFDictionaryCreate(0, (const void **)&v132, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v120)
      CFRelease(v120);
    if (!v127)
      goto LABEL_67;
    CFDictionarySetValue(a1, CFSTR("com.apple.cmm.ApplyToneMaping"), v127);
    v114 = v127;
    goto LABEL_41;
  }
  v128 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("kCGImageExtendedRangeToneMappingInfo"));
  if (v128)
  {
    ResolveExtendedRangeToneMappingOptions = CGColorTransformCreateResolveExtendedRangeToneMappingOptions(v128);
    if (ResolveExtendedRangeToneMappingOptions)
    {
      v111 = ResolveExtendedRangeToneMappingOptions;
      colorsync_reference_white_tone_mapping_options = create_colorsync_extended_range_tone_mapping_options(ResolveExtendedRangeToneMappingOptions);
      if (!colorsync_reference_white_tone_mapping_options)
        goto LABEL_67;
      goto LABEL_40;
    }
  }
}

void sanitize_and_set_options(__CFDictionary *a1, const void *a2, const void *a3, CFNumberType a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFTypeID v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int Value;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  CFNumberRef v31;
  CFNumberRef v32;
  char v33;
  int valuePtr;

  if (a3 && !CFDictionaryContainsKey(a1, a2))
  {
    if (a4)
    {
      if (a4 != kCFNumberSInt32Type && a4 != kCFNumberFloatType)
        _CGHandleAssert("sanitize_and_set_options", 1384, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorTransform.c", "type == kCFNumberFloatType || type == kCFNumberSInt32Type || type == (CFNumberType)0", "Unexpected number type to verify", v8, v9, v10, v33);
      v11 = CFGetTypeID(a3);
      if (v11 != CFNumberGetTypeID())
      {
        CGLog(2, (uint64_t)"Value for %@ is not a number - ignored", v12, v13, v14, v15, v16, v17, (char)a2);
        return;
      }
      valuePtr = 0;
      Value = CFNumberGetValue((CFNumberRef)a3, a4, &valuePtr);
      if (a4 == kCFNumberSInt32Type && valuePtr < 0)
      {
        CGLog(2, (uint64_t)"Value for %@ is negative - ignored", v19, v20, v21, v22, v23, v24, (char)a2);
        return;
      }
      if (!Value)
      {
        CFNumberGetType((CFNumberRef)a3);
        CGLog(2, (uint64_t)"%@ has unsupported value type = %s instead of %s - errors may occur", v25, v26, v27, v28, v29, v30, (char)a2);
        v31 = CFNumberCreate(0, a4, &valuePtr);
        v32 = v31;
        if (a1 && a2 && v31)
        {
          CFDictionarySetValue(a1, a2, v31);
        }
        else if (!v31)
        {
          return;
        }
        CFRelease(v32);
        return;
      }
      if (a1)
      {
        if (a2)
          CFDictionarySetValue(a1, a2, a3);
      }
    }
    else if (a1 && a2)
    {
      CFDictionarySetValue(a1, a2, a3);
    }
  }
}

const void *CGCFDictionaryGetValueWithType(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  const void *result;
  const void *v5;

  if (!a2)
    return 0;
  result = CFDictionaryGetValue(a1, a2);
  if (result)
  {
    v5 = result;
    if (CFGetTypeID(result) == a3)
      return v5;
    else
      return 0;
  }
  return result;
}

void *create_lookup_table(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const __CFData *v16;
  const __CFData *v17;
  const UInt8 *BytePtr;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[4];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[16];
  uint64_t v36;
  _QWORD v37[4];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  if (a1 && (v11 = *(_QWORD *)(a1 + 24), *(_DWORD *)(v11 + 24) == 5))
    v12 = *(_QWORD *)(*(_QWORD *)(v11 + 88) + 8) + 1;
  else
    v12 = 0;
  v13 = *(_QWORD *)(a3 + 40);
  if (a2)
    v14 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 40);
  else
    v14 = 0;
  if (v12 >= 0x101)
    _CGHandleAssert("create_lookup_table", 4506, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "count <= 256", "oversize table count=%lu components=%lu", a6, a7, a8, v12);
  if (!(v13 * v12))
    return 0;
  v15 = malloc_type_calloc(v13 * v12, 1uLL, 0xFB40A01BuLL);
  if (v15)
  {
    v57 = 0;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v38 = 0u;
    v36 = 0;
    memset(v35, 0, sizeof(v35));
    v34 = 0u;
    v33 = 0u;
    v32 = 0u;
    v16 = CGColorSpaceCopyColorTable(a1);
    v17 = v16;
    if (v16)
      BytePtr = CFDataGetBytePtr(v16);
    else
      BytePtr = 0;
    v37[0] = BytePtr;
    v37[1] = v12;
    v37[2] = 1;
    v37[3] = v14 * v12;
    *(_QWORD *)&v39 = 8;
    *((_QWORD *)&v39 + 1) = v14;
    v19 = *(_DWORD *)(a3 + 84);
    DWORD2(v38) = 1;
    LODWORD(v38) = v19;
    v31[0] = v15;
    v31[1] = v12;
    v31[2] = 1;
    v31[3] = v13 * v12;
    *(_QWORD *)&v33 = 8;
    *((_QWORD *)&v33 + 1) = v13;
    DWORD2(v32) = 1;
    LODWORD(v32) = v19;
    if (a4)
    {
      if (v13)
        memcpy((char *)v35 + 8, a4, 8 * v13);
      *(_QWORD *)&v35[0] = (char *)v35 + 8;
    }
    if (BytePtr && v14 * v12 != CFDataGetLength(v17))
    {
      CFDataGetLength(v17);
      _CGHandleAssert("create_lookup_table", 4545, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "srcFormat.data == NULL || count * nSrcComponents == safe_unsigned_cast(CFDataGetLength(colorTable))", "src data %p,  count: %zu ncomponents %zu length: %zu", v28, v29, v30, (char)BytePtr);
    }
    if ((CGCMSConverterConvert((_QWORD *)a3, (uint64_t)v37, (uint64_t)v31) & 1) == 0)
    {
      CGPostError((uint64_t)"%s : Unable to complete color conversion", v20, v21, v22, v23, v24, v25, v26, (char)"create_lookup_table");
      free(v15);
      v15 = 0;
    }
    if (v17)
      CFRelease(v17);
  }
  return v15;
}

CFDataRef CGColorSpaceCopyColorTable(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(v1 + 24) != 5)
    return 0;
  v2 = *(uint64_t **)(v1 + 88);
  v3 = *v2;
  if (*v2)
    v3 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 40);
  return CFDataCreate(0, (const UInt8 *)v2[2], v3 * (v2[1] + 1));
}

uint64_t img_interpolate_extent(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, _QWORD);
  uint64_t (*v7)(uint64_t, uint64_t *);
  uint64_t v8;
  uint64_t v9;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = a1[11];
  v8 = 0;
  v9 = 0;
  v4 = *(uint64_t (**)(uint64_t, _QWORD))(v2 + 8);
  if (!v4)
    return 0;
  if (!a2)
    return v4(v2, 0);
  v7 = *(uint64_t (**)(uint64_t, uint64_t *))(v2 + 8);
  LODWORD(v9) = resample_range(v3, 1, *(_DWORD *)a2, *(_DWORD *)(a2 + 8), (int *)&v8);
  if ((v9 & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  HIDWORD(v9) = resample_range(v3, 2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 12), (int *)&v8 + 1);
  if (v9 < 0)
    return 0xFFFFFFFFLL;
  else
    return v7(v2, &v8);
}

uint64_t img_interpolate_read(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t *a4, int *a5, unsigned int a6)
{
  int *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int *v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int64_t v52;
  int v53;
  int v54;
  int *v55;
  int v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int *v67;
  int v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  int *v72;
  int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  BOOL v81;
  int v82;
  int v83;
  int v84;
  int v85;
  BOOL v86;
  signed int v87;
  unsigned int v88;
  signed int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  int v97;
  int v98;
  int v99;
  uint64_t *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  char *v109;
  char v110;
  unsigned int v112;
  int v113;
  int *v114;
  int *v115;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  char v121;
  int v122;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;

  v6 = a5;
  v8 = a1;
  v133 = 0;
  v135 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v121 = 0;
  v149 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 88);
  v137 = 0;
  v138 = 0uLL;
  v139 = 0uLL;
  v141 = 0;
  v14 = a4[1];
  v131 = *a4;
  v15 = (int *)(a1 + 56);
  v16 = (int *)(a1 + 60);
  v127 = a3;
  v17 = *a5;
  v124 = v12;
  v114 = (int *)(a1 + 60);
  v115 = (int *)(a1 + 56);
  while (1)
  {
    v18 = *v15;
    LODWORD(v142) = *v15;
    v130 = v14;
    if (v14)
    {
      v19 = v127;
      v20 = v14 + v6[1] * (uint64_t)v127;
      v21 = v131 == v14 ? v15 : v16;
      v22 = *v21;
    }
    else
    {
      v22 = 0;
      v20 = 0;
      v19 = v127;
    }
    HIDWORD(v142) = v22;
    if (v19 >= 2
      && !*(_QWORD *)v124
      && *(uint64_t (**)(uint64_t, unsigned int, uint64_t, char **, int *, uint64_t, uint64_t, uint64_t))(v124 + 16) == img_raw_read)
    {
      v23 = v17;
      if (*(_DWORD *)(v124 + 44) == *(_DWORD *)(v8 + 44))
      {
        v110 = img_raw_access(v124, &v142);
        v23 = *v6;
        if ((v110 & 1) != 0)
        {
          LODWORD(v142) = *v6;
          if (v20)
            HIDWORD(v142) = v6[1];
          v121 = 1;
          v18 = v23;
        }
        else
        {
          v121 = 0;
          v18 = v142;
        }
      }
    }
    else
    {
      v23 = v17;
    }
    v24 = v131 + v17 * v127;
    v25 = v127 - 1;
    v26 = v23 * (v127 - 1) / v18;
    if (v26 < v127)
    {
      v27 = *(_DWORD *)(a1 + 64);
      if (v26 >= v27)
      {
        v25 = v26;
      }
      else
      {
        if (v127 >= v27)
          v25 = *(_DWORD *)(a1 + 64);
        else
          v25 = v127;
        v18 = *(_DWORD *)(a1 + 56);
        v24 = *(_QWORD *)(a1 + 72) + v18 * (uint64_t)v25;
        LODWORD(v142) = v18;
        if (v130)
        {
          if (v130 == v131)
          {
            HIDWORD(v142) = v18;
            v20 = v24;
          }
          else
          {
            HIDWORD(v142) = *(_DWORD *)(a1 + 60);
            v20 = *(_QWORD *)(a1 + 80) + SHIDWORD(v142) * (uint64_t)v25;
          }
        }
      }
    }
    v28 = resample_range(v13, 3, a2, v127, &v137);
    if (v28 < 0)
      return a3 - v127;
    if (v28 >= v25)
      v29 = v25;
    else
      v29 = v28;
    v30 = v24 - v18 * (int)v29;
    v31 = v29;
    v32 = v20 - SHIDWORD(v142) * (uint64_t)(int)v29;
    if (!v20)
      v32 = 0;
    v128 = v32;
    v129 = v30;
    v125 = a2;
    v126 = v127 + a2;
    v120 = a2;
    v119 = a2 + 1;
    v8 = a1;
    v33 = v124;
    v34 = v28;
    while (1)
    {
      if (v34 < 1)
      {
        LODWORD(v31) = 0;
        v36 = 0;
        if (!v13)
          goto LABEL_166;
      }
      else
      {
        *(_QWORD *)&v138 = v129;
        *((_QWORD *)&v138 + 1) = v128;
        *(_QWORD *)&v139 = v129;
        *((_QWORD *)&v139 + 1) = v128;
        v140 = v142;
        v141 = v142;
        if ((v121 & 1) != 0)
          v35 = img_raw_data(v33, v137, v31, &v138, &v140);
        else
          v35 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, __int128 *, uint64_t *, _QWORD))(v33 + 16))(v33, v137, v31, &v138, &v140, a6);
        v36 = v35;
        if (v35 <= 0)
          goto LABEL_164;
        v37 = *(_DWORD *)(v33 + 44);
        v38 = *(unsigned int *)(v8 + 44);
        if (v37 == (_DWORD)v38)
        {
          v139 = v138;
          v141 = v140;
          v10 = *((_QWORD *)&v138 + 1);
          v133 = *((_QWORD *)&v138 + 1);
          v11 = v138;
          v9 = v138;
          v135 = v138;
          if (!v13)
            goto LABEL_166;
        }
        else
        {
          v39 = *(_DWORD *)(v33 + 40);
          if (v39 == 16)
            v40 = 2;
          else
            v40 = 1;
          if (v39 == 32)
            v41 = 4;
          else
            v41 = v40;
          if (*(_DWORD *)(v8 + 96) == 5)
            v42 = 5;
          else
            v42 = v41;
          img_alpha(*(_DWORD *)(v33 + 48), v35, *(unsigned int *)(v33 + 36), v37, (unsigned __int8 **)&v138, (int *)&v140, v38, (unsigned __int8 **)&v139, (int *)&v141, v42);
          v10 = v128;
          v11 = v129;
          v133 = v128;
          v135 = v129;
          v9 = v129;
          if (!v13)
          {
LABEL_166:
            v112 = a3;
            v113 = a3;
            return v112 - v113;
          }
        }
      }
      if (!*(_QWORD *)(v13 + 24))
        goto LABEL_164;
      if (!*(_QWORD *)(v13 + 16))
        goto LABEL_164;
      v43 = v137;
      v145 = v131;
      if (!v131)
        goto LABEL_164;
      v147 = 0;
      if (v36)
      {
        v147 = v11;
        if (!v11)
          goto LABEL_164;
      }
      v132 = v31;
      v146 = v130;
      v148 = v10;
      v44 = v126 >= *(_DWORD *)(v13 + 76) ? *(_DWORD *)(v13 + 76) : v126;
      if (v44 <= a2)
      {
        v58 = 0;
      }
      else
      {
        v143 = -1;
        v144 = -1;
        if (v36 && *(_BYTE *)(v13 + 120))
        {
          v45 = *(unsigned __int16 *)(v13 + 112);
          v46 = *(_DWORD *)(v13 + 88);
          v47 = *(_DWORD *)(v13 + 80);
          if (((4 * (_DWORD)v45) & 0xC) != 0)
            v48 = 16 - ((4 * (_DWORD)v45) & 0xCu);
          else
            v48 = 0;
          v49 = (v141 * (v36 - 1)) + v9;
          v50 = *(_DWORD *)(v13 + 100);
          v51 = v49 + (v50 - 1) * v45;
          v52 = (v51 + 4095) & 0xFFFFFFFFFFFFF000;
          if (v51 + (v48 + 4 * v45) > v52)
          {
            v53 = *(_DWORD *)(v13 + 72) - 1;
            while (1)
            {
              v54 = v53 - 1;
              if (v53 < 1)
                break;
              v55 = (int *)(*(_QWORD *)(v13 + 8) + ((v47 * v46) + 8) * v53);
              v56 = *v55;
              if ((uint64_t)(v49 + *v55 * (uint64_t)(int)v45 + v48 + ((v55[1] + 3) & 0xFFFFFFFFFFFFFFFCLL) * v45) > v52)
                v143 = v49 + v56 * (uint64_t)(int)v45;
              v57 = v56 + v46;
              if (((v56 + v46) & 0x80000000) == 0)
              {
                v53 = v54;
                if (v57 >= v50)
                  continue;
              }
              goto LABEL_72;
            }
            v143 = v52 - (v48 + v46 * (uint64_t)(int)v45);
          }
LABEL_72:
          if (v10)
          {
            v59 = *(unsigned __int16 *)(v13 + 114);
            v60 = ((4 * (_BYTE)v59) & 0xC) != 0 ? 16 - ((4 * (_BYTE)v59) & 0xCu) : 0;
            v61 = (HIDWORD(v141) * (v36 - 1)) + v10;
            v62 = v61 + (v50 - 1) * v59;
            v63 = (v62 + 4095) & 0xFFFFFFFFFFFFF000;
            if (v62 + 4 * *(unsigned __int16 *)(v13 + 114) + v60 > v63)
            {
              v64 = (v47 * v46) + 8;
              v65 = *(_DWORD *)(v13 + 72) - 1;
              while (1)
              {
                v66 = v65 - 1;
                if (v65 < 1)
                  break;
                v67 = (int *)(*(_QWORD *)(v13 + 8) + v64 * v65);
                v68 = *v67;
                if ((uint64_t)(v61 + *v67 * (uint64_t)(int)v59 + v60 + ((v67[1] + 3) & 0xFFFFFFFFFFFFFFFCLL) * v59) > v63)
                  v144 = v61 + v68 * (uint64_t)(int)v59;
                v69 = v68 + v46;
                if (((v68 + v46) & 0x80000000) == 0)
                {
                  v65 = v66;
                  if (v69 >= v50)
                    continue;
                }
                goto LABEL_85;
              }
              v144 = v63 - (v60 + v46 * (uint64_t)(int)v59);
            }
          }
        }
LABEL_85:
        v70 = v36 + v137;
        v122 = v34;
        if (v36 + v137 >= 0 && v70 >= *(_DWORD *)(v13 + 104))
          v70 = *(_DWORD *)(v13 + 104);
        if (v70 < v137)
          v43 = v70;
        v134 = v43;
        v71 = *(unsigned int *)(v13 + 92);
        v72 = (int *)(*(_QWORD *)v13 + ((*(_DWORD *)(v13 + 80) * v71) + 8) * v120);
        v73 = *v72;
        v74 = v72[1];
        v75 = v119;
        if (v44 > v119)
          v75 = v44;
        v118 = v75;
        v76 = v125;
        while (1)
        {
          v77 = *(_DWORD *)(v13 + 48);
          v78 = v73 - v77;
          if (v73 == v77)
          {
            v79 = *(_DWORD *)(v13 + 44);
          }
          else
          {
            if (v78 >= 1 && (v80 = *(_DWORD *)(v13 + 44), v81 = v80 >= v78, v79 = v80 - v78, v79 != 0 && v81))
            {
              v82 = *(_DWORD *)(v13 + 36) + v78;
              if (v82 >= *(_DWORD *)(v13 + 40))
                v83 = *(_DWORD *)(v13 + 40);
              else
                v83 = 0;
              *(_DWORD *)(v13 + 36) = v82 - v83;
            }
            else
            {
              v79 = 0;
              *(_QWORD *)(v13 + 32) = 0;
            }
            *(_DWORD *)(v13 + 44) = v79;
            *(_DWORD *)(v13 + 48) = v73;
          }
          if ((int)(v74 - v79) >= 1)
          {
            v84 = v73 + v79;
            v85 = v73 + v79 - v134;
            v86 = (int)(v73 + v79) < v134 || v70 <= v84;
            if (v86)
              goto LABEL_145;
            v147 = v135 + (int)v141 * (uint64_t)v85;
            if (v148)
              v148 = v133 + SHIDWORD(v141) * (uint64_t)v85;
            v87 = *(_DWORD *)(v13 + 40);
            v88 = (v87 - v79) & 0xFFFFFFFE;
            v89 = v70 - v84;
            if (v89 >= (int)v88)
              v90 = v88;
            else
              v90 = v89;
            v91 = *(_DWORD *)(v13 + 32);
            v92 = *(_QWORD *)(v13 + 64);
            if ((int)v90 >= 1)
            {
              v93 = *(_DWORD *)(v13 + 52);
              v94 = *(_QWORD *)(v13 + 56);
              v95 = 8 * v90;
              v96 = *(_QWORD **)(v13 + 64);
              v97 = v73;
              do
              {
                *v96 = v94 + v93 * (uint64_t)v91;
                if (v91 + 1 < v87)
                  ++v91;
                else
                  v91 = 0;
                if (v79 == v87)
                {
                  v98 = *(_DWORD *)(v13 + 36);
                  if (v98 + 1 < v87)
                    v99 = v98 + 1;
                  else
                    v99 = 0;
                  *(_DWORD *)(v13 + 36) = v99;
                  *(_DWORD *)(v13 + 48) = ++v97;
                  v79 = v87;
                }
                else
                {
                  ++v79;
                }
                ++v96;
                v95 -= 8;
              }
              while (v95);
            }
            *(_DWORD *)(v13 + 32) = v91;
            *(_DWORD *)(v13 + 44) = v79;
            v100 = &v143;
            if (!*(_BYTE *)(v13 + 120))
              v100 = 0;
            (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t *))(v13 + 24))(*(_QWORD *)(v13 + 8), *(unsigned int *)(v13 + 88), *(unsigned int *)(v13 + 108), *(unsigned int *)(v13 + 72), v92, &v147, &v141, v90, v100);
            v147 += (int)v141 * (uint64_t)(int)v90;
            if (v148)
              v148 += SHIDWORD(v141) * (uint64_t)(int)v90;
          }
          if (v74 - *(_DWORD *)(v13 + 44) > 0)
            goto LABEL_145;
          v101 = *(_QWORD *)(v13 + 64);
          if (v74 >= 1)
          {
            v102 = *(_DWORD *)(v13 + 48);
            v103 = *(int *)(v13 + 52);
            v104 = *(_DWORD *)(v13 + 40);
            v105 = *(_DWORD *)(v13 + 36);
            v106 = *(_QWORD *)(v13 + 56) + v105 * (uint64_t)(int)v103;
            v107 = v74;
            v108 = *(uint64_t **)(v13 + 64);
            do
            {
              *v108 = v106;
              if (v73 >= v102)
              {
                if (++v105 >= v104)
                {
                  v105 = 0;
                  v106 = *(_QWORD *)(v13 + 56);
                }
                else
                {
                  v106 += v103;
                }
              }
              ++v73;
              ++v108;
              --v107;
            }
            while (v107);
          }
          (*(void (**)(int *, uint64_t, _QWORD, _QWORD, uint64_t *, uint64_t))(v13 + 16))(v72, v71, *(unsigned int *)(v13 + 108), *(unsigned int *)(v13 + 72), &v145, v101);
          v145 += *a5;
          if (v146)
            v146 += a5[1];
          if (++v76 >= v44)
            break;
          v109 = (char *)v72 + (*(_DWORD *)(v13 + 80) * v71);
          v73 = *((_DWORD *)v109 + 2);
          v74 = *((_DWORD *)v109 + 3);
          v72 = (int *)(v109 + 8);
          if (v73 >= v70 && v74 + v73 > (uint64_t)(*(_DWORD *)(v13 + 44) + *(_DWORD *)(v13 + 48)))
            goto LABEL_145;
        }
        v76 = v118;
LABEL_145:
        a2 = v125;
        v58 = v76 - v125;
        v11 = v135;
        v9 = v135;
        v10 = v133;
        v8 = a1;
        v33 = v124;
        v34 = v122;
      }
      if (v58 < 0 || !(v58 | v36))
      {
LABEL_164:
        v112 = a3;
        v113 = v127;
        return v112 - v113;
      }
      v137 += v36;
      if (v58)
        break;
      v34 -= v36;
      if (v34 >= v132)
        v31 = v132;
      else
        v31 = v34;
    }
    v14 = v130;
    v6 = a5;
    if (v130)
      v14 = v130 + a5[1] * (uint64_t)v58;
    v17 = *a5;
    v131 += *a5 * v58;
    a2 += v58;
    v86 = v127 <= v58;
    v127 -= v58;
    v16 = v114;
    v15 = v115;
    if (v86)
      return a3;
  }
}

uint64_t resample_vertical<int,unsigned char,4,(AlphaStyle)2>(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint8x8_t **a5, uint64_t a6)
{
  uint8x8_t *v6;
  uint64_t v7;
  const __int16 *v8;
  signed int v9;
  int v10;
  unint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  const __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int32x4_t *v19;
  int32x4_t *v20;
  unsigned int v21;
  int16x4_t v22;
  int16x4_t v23;
  int32x4_t *v24;
  int16x4_t v25;
  int8x8_t v26;
  int8x8_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int32x4_t v30;
  const __int16 *v31;
  uint64_t v32;
  uint64_t *v33;
  unsigned int v34;
  uint64_t v35;
  int16x4_t v36;
  int16x8_t v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;

  v6 = *a5;
  v7 = *(int *)(result + 4);
  v8 = (const __int16 *)(result + 8);
  if (a4 >= 2)
  {
    v10 = 0;
    v11 = 2;
    v12.i64[0] = 0x200000002000;
    v12.i64[1] = 0x200000002000;
    do
    {
      v13 = 0uLL;
      v14 = 0uLL;
      v15 = v8;
      if ((int)v7 >= 2)
      {
        v16 = 0;
        v17 = (4 * v10) & 0xFFFFFFF8;
        v15 = v8;
        do
        {
          v18 = (_QWORD *)(a6 + 8 * v16);
          v19 = (int32x4_t *)(*v18 + 4 * v17);
          v20 = (int32x4_t *)(v18[1] + 4 * v17);
          v21 = *(_DWORD *)v15;
          v15 += 2;
          v22 = vdup_n_s16(v21);
          v23 = vdup_n_s16(HIWORD(v21));
          v14 = vmlal_s16(vmlal_s16(v14, vmovn_s32(v19[1]), v22), vmovn_s32(v20[1]), v23);
          v13 = vmlal_s16(vmlal_s16(v13, vmovn_s32(*v19), v22), vmovn_s32(*v20), v23);
          result = v16 + 4;
          v16 += 2;
        }
        while (result <= v7);
      }
      if ((v7 & 1) != 0)
      {
        v24 = (int32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 4 * ((4 * v10) & 0xFFFFFFF8));
        v25 = vld1_dup_s16(v15);
        v14 = vmlal_s16(v14, vmovn_s32(v24[1]), v25);
        v13 = vmlal_s16(v13, vmovn_s32(*v24), v25);
      }
      v10 += 2;
      v26 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v13, v12), 0xEuLL)), vshrq_n_s32(vaddq_s32(v14, v12), 0xEuLL)));
      v27 = (int8x8_t)vmax_u8((uint8x8_t)vuzp1_s8(v26, *(int8x8_t *)v12.i8), (uint8x8_t)vuzp2_s8(v26, *(int8x8_t *)v12.i8));
      *(uint8x8_t *)v28.i8 = vmax_u8((uint8x8_t)vuzp1_s8(v27, *(int8x8_t *)v12.i8), (uint8x8_t)vuzp2_s8(v27, *(int8x8_t *)v12.i8));
      v28.i64[1] = v28.i64[0];
      *v6++ = vmax_u8((uint8x8_t)v26, (uint8x8_t)vqtbl1_s8(v28, (int8x8_t)0x1FFFFFF00FFFFFFLL));
      v11 += 2;
    }
    while (v11 <= a4);
    v9 = a4 & 0xFFFFFFFE;
  }
  else
  {
    v9 = 0;
  }
  if (v9 < a4)
  {
    v29.i64[0] = 0x200000002000;
    v29.i64[1] = 0x200000002000;
    do
    {
      v30 = 0uLL;
      v31 = v8;
      if ((int)v7 >= 2)
      {
        v32 = 0;
        v31 = v8;
        do
        {
          v33 = (uint64_t *)(a6 + 8 * v32);
          result = *v33;
          v34 = *(_DWORD *)v31;
          v31 += 2;
          v30 = vmlal_s16(vmlal_s16(v30, vmovn_s32(*(int32x4_t *)(*v33 + 4 * (4 * v9))), vdup_n_s16(v34)), vmovn_s32(*(int32x4_t *)(v33[1] + 4 * (4 * v9))), vdup_n_s16(HIWORD(v34)));
          v35 = v32 + 4;
          v32 += 2;
        }
        while (v35 <= v7);
      }
      if ((v7 & 1) != 0)
      {
        v36 = vld1_dup_s16(v31);
        v30 = vmlal_s16(v30, vmovn_s32(*(int32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 4 * (4 * v9))), v36);
      }
      v37 = (int16x8_t)vshrq_n_s32(vaddq_s32(v30, v29), 0xEuLL);
      *(int16x4_t *)v37.i8 = vqmovn_s32((int32x4_t)v37);
      *(int8x8_t *)v37.i8 = vqmovun_s16(v37);
      v38 = v37.u8[2];
      v39 = v37.u8[1];
      v40 = v37.u8[0];
      v37.i8[0] = vmaxv_u8(*(uint8x8_t *)v37.i8);
      v41 = v37.i16[0];
      v37.i16[0] = v40;
      v37.i16[1] = v39;
      v37.i16[2] = v38;
      v37.i16[3] = v41;
      v6->i32[0] = vmovn_s16(v37).u32[0];
      v6 = (uint8x8_t *)((char *)v6 + 4);
      ++v9;
    }
    while (v9 < a4);
  }
  return result;
}

uint64_t resample_range(uint64_t a1, int a2, unsigned int a3, int a4, int *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  BOOL v18;
  int v19;

  if (a1)
  {
    v5 = 92;
    if (a2 == 1)
      v5 = 88;
    v6 = 76;
    if (a2 == 1)
      v6 = 72;
    v7 = *(_QWORD *)(a1 + 8 * (a2 == 1));
    v8 = *(_DWORD *)(a1 + v6);
    v9 = *(_DWORD *)(a1 + v5);
    v10 = a4 + a3;
    if (a4 + a3 >= v8)
      v10 = v8;
    if (v10 >= a3)
      v11 = a3;
    else
      v11 = v10;
    v12 = *(int *)(a1 + 80) * (uint64_t)v9 + 8;
    v13 = *(_DWORD *)(v12 * v11 + v7);
    v14 = *(_DWORD *)(v7 + v12 * ((__PAIR64__(v10, a3) - v10) >> 32) + 4)
        + *(_DWORD *)(v7 + v12 * ((__PAIR64__(v10, a3) - v10) >> 32));
    if (a2 == 3 && *(_QWORD *)(a1 + 56))
    {
      v15 = *(_DWORD *)(a1 + 48);
      v16 = *(_DWORD *)(a1 + 44) + v15;
      v17 = v13 >= 0 && v13 >= v15;
      v18 = v17;
      v19 = (int)v16 <= v14 ? v14 : v16;
      if (v18 && v13 < v16)
      {
        v13 = v16;
        v14 = v19;
      }
    }
    if (a5)
      *a5 = v13;
    return (v14 - v13);
  }
  else
  {
    if (a5)
      *a5 = 0;
    return 0xFFFFFFFFLL;
  }
}

int *resample_horizontal<unsigned char,int,1,true>(int *result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  int16x8_t v8;
  int16x8_t v9;
  int16x4_t v10;
  int16x4_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  uint16x8_t v26;
  unint64_t v27;
  unsigned int v28;
  int8x16_t v29;
  uint64_t v30;
  _BOOL4 v32;
  uint64_t v33;
  int8x16_t v34;
  int32x2_t *v35;
  unint64_t v36;
  int *v37;
  uint64_t v38;
  uint8x8_t *v39;
  unint64_t v40;
  int8x16_t *v41;
  int v42;
  uint8x8_t *v43;
  unint64_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int16x8_t v49;
  int8x16_t v50;
  int16x8_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  uint8x8_t *v56;
  unint64_t v57;
  int16x4_t *v58;
  int8x16_t *v59;
  int32x4_t v60;
  uint64_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  unint64_t v65;
  uint8x8_t v66;
  int16x8_t v67;
  uint8x8_t v68;
  int16x4_t v69;
  int16x4_t v70;
  __int32 v71;
  int v72;
  unint64_t v73;
  unsigned int v74;
  uint8x8_t v75;
  int v76;
  int16x8_t v77;
  BOOL v78;
  int8x8_t v79;
  int8x8_t v80;
  int16x4_t v81;
  int16x4_t v82;
  int16x4_t v83;
  int16x4_t v84;
  int16x4_t v85;
  int16x4_t v86;
  int16x4_t v87;
  __int32 v88;
  __int32 v89;

  if ((int)a4 >= 1 && a8 >= 1)
  {
    v12 = 0;
    v13 = *a6;
    v14 = a6[1];
    v15 = *a7;
    v16 = a7[1];
    if (v15 >= v16)
      v17 = a7[1];
    else
      v17 = *a7;
    v18 = a4;
    v19 = 2 * a2;
    v20 = v19 + 8;
    v21 = (char *)result + (v19 + 8) * a4;
    if (v17 >= *(int *)&v21[-v19 - 4] + (uint64_t)*(int *)&v21[-v19 - 8])
      v17 = *(int *)&v21[-v19 - 4] + (uint64_t)*(int *)&v21[-v19 - 8];
    if (a2 <= 3)
      v22 = (2 * a2 + 23) / (2 * a2 + 8);
    else
      v22 = 1;
    v23 = a4 - v22;
    v24 = a2 > 7;
    v25 = a2 & 7;
    if ((a2 & 7) != 0)
      v24 = 0;
    else
      v25 = 8;
    v26 = (uint16x8_t)vdupq_n_s16(v25);
    v27 = ((a2 + 8 * (v24 << 31 >> 31)) & 0xFFFFFFF8) + (unint64_t)(((_BYTE)v25 + 7) & 0x18);
    if (a2 >= 8)
      v28 = 8;
    else
      v28 = a2;
    v29 = (int8x16_t)vcgtq_u16((uint16x8_t)vdupq_n_s16(v28), (uint16x8_t)xmmword_185004910);
    v30 = a8;
    v32 = a2 == (__int16)a2 && v18 > v22;
    if (v23 <= 1)
      v33 = 1;
    else
      v33 = v18 - v22;
    v34 = (int8x16_t)vcgtq_u16(v26, (uint16x8_t)xmmword_185004910);
    do
    {
      v35 = *(int32x2_t **)(a5 + 8 * v12);
      v36 = 0;
      if (v32)
      {
        v37 = result;
        while (1)
        {
          v38 = *v37;
          v39 = (uint8x8_t *)(v13 + v38);
          v40 = v27 + v13 + v38;
          if (v40 > v17 + v13)
            break;
          if ((unint64_t)v39 >= v40)
          {
            v45 = 0uLL;
            v46 = 0uLL;
            v47 = 0uLL;
            v48 = 0uLL;
          }
          else
          {
            v41 = (int8x16_t *)(v37 + 2);
            v42 = v37[1];
            v43 = (uint8x8_t *)(v14 + v38);
            v44 = v40 - 8;
            v45 = 0uLL;
            if ((unint64_t)v39 < v44)
            {
              v47 = 0uLL;
              v48 = 0uLL;
              v46 = 0uLL;
              do
              {
                v50 = *v41++;
                v8 = (int16x8_t)vandq_s8(v50, v29);
                *(uint8x8_t *)v50.i8 = *v39++;
                v51 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v50.i8);
                v48 = vmlal_high_s16(v48, v51, v8);
                *(uint8x8_t *)v50.i8 = *v43++;
                v10 = *(int16x4_t *)v50.i8;
                v47 = vmlal_s16(v47, *(int16x4_t *)v51.i8, *(int16x4_t *)v8.i8);
                v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v50.i8);
                v46 = vmlal_high_s16(v46, v9, v8);
                v45 = vmlal_s16(v45, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
                v42 -= 8;
              }
              while ((unint64_t)v39 < v44);
            }
            else
            {
              v46 = 0uLL;
              v47 = 0uLL;
              v48 = 0uLL;
            }
            if (v42 >= 1)
            {
              v8 = (int16x8_t)vandq_s8(*v41, v34);
              v49 = (int16x8_t)vmovl_u8(*v39);
              v48 = vmlal_high_s16(v48, v49, v8);
              v47 = vmlal_s16(v47, *(int16x4_t *)v49.i8, *(int16x4_t *)v8.i8);
              v9 = (int16x8_t)vmovl_u8(*v43);
              v46 = vmlal_high_s16(v46, v9, v8);
              v45 = vmlal_s16(v45, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
            }
          }
          *v35++ = vzip1_s32(vmax_s32(vmin_s32((int32x2_t)((vaddvq_s32(vaddq_s32(v47, v48)) + 0x2000) >> 14), (int32x2_t)0xFF000000FFLL), 0), vmax_s32(vmin_s32((int32x2_t)((vaddvq_s32(vaddq_s32(v45, v46)) + 0x2000) >> 14), (int32x2_t)0xFF000000FFLL), 0));
          ++v36;
          v37 = (int *)((char *)v37 + v20);
          if (v36 == v33)
          {
            v36 = v33;
            break;
          }
        }
      }
      else
      {
        v37 = result;
      }
      if (v36 < v18)
      {
        do
        {
          v52 = *v37;
          if ((int)v52 >= (int)v17)
            v53 = v17;
          else
            v53 = *v37;
          v54 = v17 - v53;
          if (v37[1] >= v54)
            v55 = v54;
          else
            v55 = v37[1];
          if (v55 < 1)
          {
            v60 = 0uLL;
            v64 = 0uLL;
            v62 = 0uLL;
            v63 = 0uLL;
          }
          else
          {
            v56 = (uint8x8_t *)(v13 + v52);
            v57 = v13 + v52 + v55 - 16;
            v58 = (int16x4_t *)(v14 + v52);
            v59 = (int8x16_t *)(v37 + 2);
            v60 = 0uLL;
            if ((unint64_t)v56 >= v57)
            {
              v64 = 0uLL;
              v62 = 0uLL;
              v63 = 0uLL;
              LODWORD(v61) = v55;
LABEL_82:
              v72 = (_DWORD)v61 << 16;
              while (2)
              {
                v73 = v21 - (char *)v59;
                if ((unint64_t)(v21 - (char *)v59) >= 0x10)
                  v73 = 16;
                if (v73 < 0x10)
                {
                  if (v61 >= 4)
                  {
                    if ((_DWORD)v61 == 4)
                    {
                      v9.i16[0] = 0;
                      v9.i8[2] = 0;
                      v9.i8[3] = 0;
                      v9.i8[4] = 0;
                      v9.i8[5] = 0;
                      v9.i8[6] = 0;
                      v9.i8[7] = 0;
                    }
                    else if ((_DWORD)v61 == 5)
                    {
                      v9.i16[0] = v59->i16[4];
                    }
                    else
                    {
                      if ((_DWORD)v61 == 6)
                      {
                        v83 = 0;
                      }
                      else
                      {
                        if ((v61 & 1) != 0)
                          v88 = 0;
                        else
                          v88 = v59->u16[7];
                        v83.i32[0] = v59->u16[6];
                        v83.i32[1] = v88;
                      }
                      v9.i16[0] = v59->i16[4];
                      v9.i16[2] = v59->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v83);
                    }
                    v8.i64[0] = v59->i64[0];
                    v8.i64[1] = v9.i64[0];
                    goto LABEL_89;
                  }
                  if ((_DWORD)v61 == 1)
                  {
                    v8.i16[0] = v59->i16[0];
                  }
                  else
                  {
                    if ((_DWORD)v61 == 2)
                      v81 = 0;
                    else
                      v81 = (int16x4_t)v59->u16[2];
                    v9.i16[0] = v59->i16[0];
                    v9.i16[2] = v59->i16[1];
                    *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v81);
                  }
                  v8.i64[1] = 0;
                  ++v59;
                }
                else
                {
                  v74 = v72 >> 16;
                  if (v72 >> 16 >= 8)
                    v74 = 8;
                  v8 = (int16x8_t)vandq_s8(*v59, (int8x16_t)vcgtq_s16(vdupq_n_s16(v74), (int16x8_t)xmmword_185004910));
LABEL_89:
                  ++v59;
                  if (v61 >= 8)
                  {
                    v75 = *v56;
                    v76 = 1;
                    goto LABEL_91;
                  }
                  if (v61 >= 4)
                  {
                    if ((_DWORD)v61 == 4)
                    {
                      v80 = 0;
                    }
                    else if ((_DWORD)v61 == 5)
                    {
                      v80 = (int8x8_t)v56->u8[4];
                    }
                    else
                    {
                      if ((_DWORD)v61 == 6)
                        v87 = 0;
                      else
                        v87 = (int16x4_t)v56->u8[6];
                      v10.i8[0] = v56->i8[4];
                      v10.i8[4] = v56->i8[5];
                      v80 = (int8x8_t)vuzp1_s16(v10, v87);
                    }
                    v76 = 0;
                    v10.i32[0] = v56->i32[0];
                    v75 = (uint8x8_t)vuzp1_s8((int8x8_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v10), v80);
                    goto LABEL_91;
                  }
                }
                if ((_DWORD)v61 == 1)
                {
                  v85.i8[2] = 0;
                  v85.i8[4] = 0;
                  v85.i8[6] = 0;
                  v85.i8[0] = v56->i8[0];
                }
                else
                {
                  if ((_DWORD)v61 == 2)
                    v86 = 0;
                  else
                    v86 = (int16x4_t)v56->u8[2];
                  v10.i8[0] = v56->i8[0];
                  v10.i8[4] = v56->i8[1];
                  v85 = vuzp1_s16(v10, v86);
                }
                v76 = 0;
                v75.i32[1] = 0;
                v75.i8[0] = v85.i8[0];
                v75.i8[1] = v85.i8[2];
                v75.i8[2] = v85.i8[4];
                v75.i8[3] = v85.i8[6];
LABEL_91:
                if (v76)
                {
                  v10 = *v58;
                }
                else if (v61 < 4)
                {
                  if ((_DWORD)v61 == 1)
                  {
                    v11.i8[2] = 0;
                    v11.i8[3] = 0;
                    v11.i8[4] = 0;
                    v11.i8[5] = 0;
                    v11.i8[6] = 0;
                    v11.i8[7] = 0;
                    v11.i16[0] = v58->u8[0];
                  }
                  else
                  {
                    if ((_DWORD)v61 == 2)
                      v82 = 0;
                    else
                      v82 = (int16x4_t)v58->u8[2];
                    v11.i8[0] = v58->i8[0];
                    v11.i8[4] = v58->i8[1];
                    v11 = vuzp1_s16(v11, v82);
                  }
                  v10.i8[4] = 0;
                  v10.i8[5] = 0;
                  v10.i8[6] = 0;
                  v10.i8[7] = 0;
                  v10.i8[0] = v11.i8[0];
                  v10.i8[1] = v11.i8[2];
                  v10.i8[2] = v11.i8[4];
                  v10.i8[3] = v11.i8[6];
                }
                else
                {
                  if ((_DWORD)v61 == 4)
                  {
                    v79 = 0;
                  }
                  else if ((_DWORD)v61 == 5)
                  {
                    v79 = (int8x8_t)v58->u8[4];
                  }
                  else
                  {
                    if ((_DWORD)v61 == 6)
                    {
                      v84 = 0;
                    }
                    else
                    {
                      if ((v61 & 1) != 0)
                        v89 = 0;
                      else
                        v89 = v58->u8[7];
                      v84.i32[0] = v58->u8[6];
                      v84.i32[1] = v89;
                    }
                    v11.i8[0] = v58->i8[4];
                    v11.i8[4] = v58->i8[5];
                    v79 = (int8x8_t)vuzp1_s16(v11, v84);
                  }
                  v11.i32[0] = v58->i32[0];
                  v11 = (int16x4_t)vmovl_u8((uint8x8_t)v11).u64[0];
                  v10 = (int16x4_t)vuzp1_s8((int8x8_t)v11, v79);
                }
                ++v56;
                v77 = (int16x8_t)vmovl_u8(v75);
                v63 = vmlal_high_s16(v63, v77, v8);
                v62 = vmlal_s16(v62, *(int16x4_t *)v77.i8, *(int16x4_t *)v8.i8);
                ++v58;
                v9 = (int16x8_t)vmovl_u8((uint8x8_t)v10);
                v64 = vmlal_high_s16(v64, v9, v8);
                v60 = vmlal_s16(v60, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
                v72 -= 0x80000;
                v78 = __OFSUB__((_DWORD)v61, 8);
                LODWORD(v61) = v61 - 8;
                if (((int)v61 < 0) ^ v78 | ((_DWORD)v61 == 0))
                  goto LABEL_153;
                continue;
              }
            }
            v61 = v55;
            v62 = 0uLL;
            v63 = 0uLL;
            v64 = 0uLL;
            do
            {
              v65 = v21 - (char *)v59;
              if ((unint64_t)(v21 - (char *)v59) >= 0x10)
                v65 = 16;
              if (v65 < 0x10)
              {
                if ((_DWORD)v61)
                {
                  if (v61 < 4)
                  {
                    if (v61 == 1)
                    {
                      v8.i16[0] = v59->i16[0];
                    }
                    else
                    {
                      if ((_DWORD)v61 == 2)
                        v69 = 0;
                      else
                        v69 = (int16x4_t)v59->u16[2];
                      v9.i16[0] = v59->i16[0];
                      v9.i16[2] = v59->i16[1];
                      *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v69);
                    }
                    v8.i64[1] = 0;
                  }
                  else
                  {
                    if (v61 == 4)
                    {
                      v9.i16[0] = 0;
                      v9.i8[2] = 0;
                      v9.i8[3] = 0;
                      v9.i8[4] = 0;
                      v9.i8[5] = 0;
                      v9.i8[6] = 0;
                      v9.i8[7] = 0;
                    }
                    else if (v61 == 5)
                    {
                      v9.i16[0] = v59->i16[4];
                    }
                    else
                    {
                      if ((_DWORD)v61 == 6)
                      {
                        v70 = 0;
                      }
                      else
                      {
                        if ((v55 & 1) != 0)
                          v71 = 0;
                        else
                          v71 = v59->u16[7];
                        v70.i32[0] = v59->u16[6];
                        v70.i32[1] = v71;
                      }
                      v9.i16[0] = v59->i16[4];
                      v9.i16[2] = v59->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v70);
                    }
                    v8.i64[0] = v59->i64[0];
                    v8.i64[1] = v9.i64[0];
                  }
                }
                else
                {
                  v8 = 0uLL;
                }
              }
              else
              {
                v8 = (int16x8_t)vandq_s8(*v59, v29);
              }
              ++v59;
              v66 = *v56++;
              v67 = (int16x8_t)vmovl_u8(v66);
              v63 = vmlal_high_s16(v63, v67, v8);
              v68 = (uint8x8_t)*v58++;
              v10 = (int16x4_t)v68;
              v62 = vmlal_s16(v62, *(int16x4_t *)v67.i8, *(int16x4_t *)v8.i8);
              v9 = (int16x8_t)vmovl_u8(v68);
              v64 = vmlal_high_s16(v64, v9, v8);
              v60 = vmlal_s16(v60, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
              v61 -= 8;
            }
            while ((unint64_t)v56 < v57);
            if ((int)v61 >= 1)
              goto LABEL_82;
          }
LABEL_153:
          *v35++ = vzip1_s32(vmax_s32(vmin_s32((int32x2_t)((vaddvq_s32(vaddq_s32(v62, v63)) + 0x2000) >> 14), (int32x2_t)0xFF000000FFLL), 0), vmax_s32(vmin_s32((int32x2_t)((vaddvq_s32(vaddq_s32(v60, v64)) + 0x2000) >> 14), (int32x2_t)0xFF000000FFLL), 0));
          ++v36;
          v37 = (int *)((char *)v37 + v20);
        }
        while (v36 != v18);
      }
      v13 += v15;
      v14 += v16;
      ++v12;
    }
    while (v12 != v30);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned char,3,(AlphaStyle)0>(uint64_t result, double a2, double a3, double a4, int32x4_t a5, int32x4_t a6, uint64_t a7, uint64_t a8, int a9, int8x8_t **a10, uint64_t a11)
{
  int8x8_t *v11;
  uint64_t v12;
  const __int16 *v13;
  int v14;
  int v15;
  unint64_t v16;
  int32x4_t v17;
  unsigned __int32 v18;
  unsigned __int32 v19;
  unsigned __int32 v20;
  unsigned __int32 v21;
  unsigned __int32 v22;
  unsigned __int32 v23;
  unsigned __int32 v24;
  __int32 v25;
  __int32 v26;
  __int32 v27;
  __int32 v28;
  const __int16 *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int32x4_t *v33;
  int32x4_t *v34;
  unsigned int v35;
  int16x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int16x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  uint64_t v42;
  int32x4_t *v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int32x4_t v53;
  int32x4_t v54;
  const __int16 *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  int32x4_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  int32x4_t v66;
  int16x8_t v67;

  v11 = *a10;
  v12 = *(int *)(result + 4);
  v13 = (const __int16 *)(result + 8);
  if (a9 >= 4)
  {
    v15 = 0;
    v16 = 4;
    v17.i64[0] = 0x200000002000;
    v17.i64[1] = 0x200000002000;
    do
    {
      if ((int)v12 >= 2)
      {
        v30 = 0;
        v18 = 0;
        LODWORD(result) = 0;
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v31 = (3 * v15) & 0xFFFFFFFC;
        v29 = v13;
        do
        {
          v32 = (_QWORD *)(a11 + 8 * v30);
          v33 = (int32x4_t *)(*v32 + 4 * v31);
          v34 = (int32x4_t *)(v32[1] + 4 * v31);
          v35 = *(_DWORD *)v29;
          v29 += 2;
          v36 = vdup_n_s16(v35);
          v37.i64[0] = __PAIR64__(v26, v25);
          v37.i64[1] = __PAIR64__(v28, v27);
          v38.i64[0] = __PAIR64__(result, v18);
          v38.i64[1] = __PAIR64__(v20, v19);
          v39 = vdup_n_s16(HIWORD(v35));
          a5 = vmlal_s16(vmlal_s16(v38, vmovn_s32(*v33), v36), vmovn_s32(*v34), v39);
          v40.i64[0] = __PAIR64__(v22, v21);
          v40.i64[1] = __PAIR64__(v24, v23);
          v20 = a5.u32[3];
          v19 = a5.u32[2];
          result = a5.u32[1];
          a6 = vmlal_s16(vmlal_s16(v40, vmovn_s32(v33[1]), v36), vmovn_s32(v34[1]), v39);
          v24 = a6.u32[3];
          v18 = a5.i32[0];
          v23 = a6.u32[2];
          v22 = a6.u32[1];
          v41 = vmlal_s16(vmlal_s16(v37, vmovn_s32(v33[2]), v36), vmovn_s32(v34[2]), v39);
          v28 = v41.i32[3];
          v27 = v41.i32[2];
          v26 = v41.i32[1];
          v21 = a6.i32[0];
          v25 = v41.i32[0];
          v42 = v30 + 4;
          v30 += 2;
        }
        while (v42 <= v12);
      }
      else
      {
        v18 = 0;
        result = 0;
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = v13;
      }
      if ((v12 & 1) != 0)
      {
        v43 = (int32x4_t *)(*(_QWORD *)(a11 + 8 * ((int)v12 - 1)) + 4 * ((3 * v15) & 0xFFFFFFFC));
        *(int16x4_t *)a5.i8 = vld1_dup_s16(v29);
        v44.i64[0] = __PAIR64__(result, v18);
        v44.i64[1] = __PAIR64__(v20, v19);
        a6 = vmlal_s16(v44, vmovn_s32(*v43), *(int16x4_t *)a5.i8);
        v20 = a6.u32[3];
        v19 = a6.u32[2];
        result = a6.u32[1];
        v45.i64[0] = __PAIR64__(v22, v21);
        v45.i64[1] = __PAIR64__(v24, v23);
        v46 = vmlal_s16(v45, vmovn_s32(v43[1]), *(int16x4_t *)a5.i8);
        v24 = v46.u32[3];
        v23 = v46.u32[2];
        v22 = v46.u32[1];
        v47.i64[0] = __PAIR64__(v26, v25);
        v47.i64[1] = __PAIR64__(v28, v27);
        v18 = a6.i32[0];
        v48 = vmlal_s16(v47, vmovn_s32(v43[2]), *(int16x4_t *)a5.i8);
        v28 = v48.i32[3];
        v21 = v46.i32[0];
        v27 = v48.i32[2];
        v26 = v48.i32[1];
        v25 = v48.i32[0];
      }
      v49.i64[0] = __PAIR64__(v22, v21);
      v49.i64[1] = __PAIR64__(v24, v23);
      v50.i64[0] = __PAIR64__(result, v18);
      v15 += 4;
      v50.i64[1] = __PAIR64__(v20, v19);
      v51 = vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v50, v17), 0xEuLL)), vshrq_n_s32(vaddq_s32(v49, v17), 0xEuLL));
      v49.i64[0] = __PAIR64__(v26, v25);
      v49.i64[1] = __PAIR64__(v28, v27);
      v52 = (int16x8_t)vshrq_n_s32(vaddq_s32(v49, v17), 0xEuLL);
      *(int16x4_t *)v52.i8 = vqmovn_s32((int32x4_t)v52);
      *v11 = vqmovun_s16(v51);
      v11[1].i32[0] = vqmovun_high_s16(*(int8x8_t *)&v52, v52).i32[2];
      v11 = (int8x8_t *)((char *)v11 + 12);
      v16 += 4;
    }
    while (v16 <= a9);
    v14 = a9 & 0x7FFFFFFC;
  }
  else
  {
    v14 = 0;
  }
  if (v14 < a9)
  {
    v53.i64[0] = 0x200000002000;
    v53.i64[1] = 0x200000002000;
    do
    {
      v54 = 0uLL;
      v55 = v13;
      if ((int)v12 >= 2)
      {
        v56 = 0;
        v57 = (3 * v14);
        v55 = v13;
        do
        {
          v58 = (_QWORD *)(a11 + 8 * v56);
          v59 = *v58 + 4 * v57;
          v60.i64[0] = *(_QWORD *)v59;
          a5.i32[0] = *(_DWORD *)(v59 + 8);
          v60.i64[1] = a5.i64[0];
          v61 = v58[1] + 4 * v57;
          v62 = *(_QWORD *)v61;
          a6.i32[0] = *(_DWORD *)(v61 + 8);
          a5.i64[1] = a6.i64[0];
          v63 = *(_DWORD *)v55;
          v55 += 2;
          *(int16x4_t *)a6.i8 = vdup_n_s16(v63);
          *(int16x4_t *)a5.i8 = vmovn_s32(a5);
          v54 = vmlal_s16(vmlal_s16(v54, vmovn_s32(v60), *(int16x4_t *)a6.i8), *(int16x4_t *)a5.i8, vdup_n_s16(HIWORD(v63)));
          v64 = v56 + 4;
          v56 += 2;
        }
        while (v64 <= v12);
      }
      if ((v12 & 1) != 0)
      {
        v65 = *(_QWORD *)(a11 + 8 * ((int)v12 - 1)) + 4 * (3 * v14);
        v66.i64[0] = *(_QWORD *)v65;
        a5.i32[0] = *(_DWORD *)(v65 + 8);
        v66.i64[1] = a5.i64[0];
        *(int16x4_t *)a5.i8 = vld1_dup_s16(v55);
        v54 = vmlal_s16(v54, vmovn_s32(v66), *(int16x4_t *)a5.i8);
      }
      v67 = (int16x8_t)vshrq_n_s32(vaddq_s32(v54, v53), 0xEuLL);
      *(int16x4_t *)v67.i8 = vqmovn_s32((int32x4_t)v67);
      *(int8x8_t *)v67.i8 = vqmovun_s16(v67);
      v11->i16[0] = v67.i16[0];
      v11->i8[2] = v67.i8[2];
      v11 = (int8x8_t *)((char *)v11 + 3);
      ++v14;
    }
    while (v14 < a9);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned char,1,(AlphaStyle)3>(uint64_t result, double a2, double a3, uint8x8_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  const __int16 *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  const __int16 *v19;
  _QWORD *v20;
  int32x4_t *v21;
  int32x4_t *v22;
  unsigned int v23;
  int16x4_t v24;
  int16x4_t v25;
  uint64_t v26;
  int32x4_t *v27;
  int16x4_t v28;
  int16x8_t v29;
  int32x4_t v30;
  const __int16 *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int v35;
  uint64_t v36;
  int16x4_t v37;
  int16x8_t v38;
  __int32 v39;

  v9 = *(_DWORD **)a8;
  v10 = *(_DWORD **)(a8 + 8);
  v11 = *(int *)(result + 4);
  v12 = (const __int16 *)(result + 8);
  if (a7 >= 4)
  {
    v14 = 0;
    v15 = 4;
    v16.i64[0] = 0x200000002000;
    v16.i64[1] = 0x200000002000;
    do
    {
      v17 = 0uLL;
      v18 = 0uLL;
      v19 = v12;
      if ((int)v11 >= 2)
      {
        result = 0;
        v19 = v12;
        do
        {
          v20 = (_QWORD *)(a9 + 8 * result);
          v21 = (int32x4_t *)(*v20 + 8 * v14);
          v22 = (int32x4_t *)(v20[1] + 8 * v14);
          v23 = *(_DWORD *)v19;
          v19 += 2;
          v24 = vdup_n_s16(v23);
          v25 = vdup_n_s16(HIWORD(v23));
          v18 = vmlal_s16(vmlal_s16(v18, vmovn_s32(v21[1]), v24), vmovn_s32(v22[1]), v25);
          v17 = vmlal_s16(vmlal_s16(v17, vmovn_s32(*v21), v24), vmovn_s32(*v22), v25);
          v26 = result + 4;
          result += 2;
        }
        while (v26 <= v11);
      }
      if ((v11 & 1) != 0)
      {
        v27 = (int32x4_t *)(*(_QWORD *)(a9 + 8 * ((int)v11 - 1)) + 8 * v14);
        v28 = vld1_dup_s16(v19);
        v18 = vmlal_s16(v18, vmovn_s32(v27[1]), v28);
        v17 = vmlal_s16(v17, vmovn_s32(*v27), v28);
      }
      v14 += 4;
      v29 = vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v17, v16), 0xEuLL)), vshrq_n_s32(vaddq_s32(v18, v16), 0xEuLL));
      *(int8x8_t *)v29.i8 = vqmovun_s16(v29);
      a4 = (uint8x8_t)vuzp2_s8(*(int8x8_t *)v29.i8, *(int8x8_t *)v16.i8);
      *v9++ = vmovn_s16(v29).u32[0];
      *v10++ = vmax_u8(a4, (uint8x8_t)vuzp1_s8(*(int8x8_t *)v29.i8, *(int8x8_t *)v16.i8)).u32[0];
      v15 += 4;
    }
    while (v15 <= a7);
    v13 = a7 & 0x7FFFFFFC;
  }
  else
  {
    v13 = 0;
  }
  for (; v13 < a7; ++v13)
  {
    if ((int)v11 >= 2)
    {
      v32 = 0;
      v33 = (2 * v13);
      v30 = 0uLL;
      v31 = v12;
      do
      {
        v34 = (_QWORD *)(a9 + 8 * v32);
        result = 4 * v33;
        v35 = *(_DWORD *)v31;
        v31 += 2;
        a4 = (uint8x8_t)vuzp1_s16(*(int16x4_t *)(v34[1] + 4 * v33), (int16x4_t)0x200000002000);
        v30 = vmlal_s16(vmlal_s16(v30, vuzp1_s16(*(int16x4_t *)(*v34 + 4 * v33), (int16x4_t)0x200000002000), vdup_n_s16(v35)), (int16x4_t)a4, vdup_n_s16(HIWORD(v35)));
        v36 = v32 + 4;
        v32 += 2;
      }
      while (v36 <= v11);
    }
    else
    {
      v30 = 0uLL;
      v31 = v12;
    }
    if ((v11 & 1) != 0)
    {
      a4 = (uint8x8_t)vuzp1_s16(*(int16x4_t *)(*(_QWORD *)(a9 + 8 * ((int)v11 - 1)) + 4 * (2 * v13)), (int16x4_t)0x200000002000);
      v37 = vld1_dup_s16(v31);
      v30 = vmlal_s16(v30, (int16x4_t)a4, v37);
    }
    *(int32x2_t *)v30.i8 = vadd_s32(*(int32x2_t *)v30.i8, (int32x2_t)0x200000002000);
    v38 = (int16x8_t)vshrq_n_s32(v30, 0xEuLL);
    *(int16x4_t *)v38.i8 = vqmovn_s32((int32x4_t)v38);
    *(int8x8_t *)v38.i8 = vqmovun_s16(v38);
    v39 = v38.u16[0];
    v38.i32[0] = v38.u8[1];
    *(_BYTE *)v9 = v39;
    v9 = (_DWORD *)((char *)v9 + 1);
    a4.i32[0] = v39;
    *(_BYTE *)v10 = vmax_u8(*(uint8x8_t *)v38.i8, a4).u8[0];
    v10 = (_DWORD *)((char *)v10 + 1);
  }
  return result;
}

int16x4_t *resample_horizontal<unsigned char,int,4,false>(int16x4_t *result, unsigned int a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, int16x4_t a10, uint64_t a11, unsigned int a12, uint64_t a13, uint64_t *a14, int *a15, int a16)
{
  int16x8_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _BOOL4 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t *v32;
  unint64_t v33;
  int16x4_t *v34;
  int v35;
  uint64_t v36;
  __int32 v37;
  int v38;
  uint8x16_t *v39;
  unint64_t v40;
  __int16 *v41;
  uint64_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  unint64_t v47;
  uint8x16_t v48;
  int16x8_t v49;
  int16x4_t v50;
  __int32 v51;
  int v52;
  unint64_t v53;
  int16x8_t v54;
  BOOL v55;
  __int16 v56;
  __int8 v57;
  __int8 v58;
  __int8 v59;
  __int8 v60;
  int16x4_t v61;
  uint64_t v62;
  __int32 v63;
  uint16x8_t v64;
  uint8x16_t *v65;
  uint8x16_t *v66;
  int16x4_t *v67;
  int v68;
  unint64_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  double v74;
  uint8x16_t v75;
  int16x8_t v76;
  int16x8_t v77;

  if ((int)a12 >= 1 && a16 >= 1)
  {
    v17 = 0;
    v18 = *a14;
    v19 = *a15;
    v20 = v19 >> 2;
    v21 = 2 * a2 + 8;
    v22 = (char *)result + v21 * a12;
    if (v19 >> 2 >= *(int *)&v22[-v21 + 4] + (uint64_t)*(int *)&v22[-v21])
      v20 = *(int *)&v22[-v21 + 4] + (uint64_t)*(int *)&v22[-v21];
    v23 = a2 > 3;
    LODWORD(v24) = (4 * (a2 & 3)) | 0x10;
    if ((a2 & 3) != 0)
      v24 = v24;
    else
      v24 = 32;
    if ((a2 & 3) != 0)
      v23 = 0;
    v25 = ((v24 - 1) & 0xFFFFFFFFFFFFFFF0) + 16 * ((a2 >> 2) - v23);
    v26 = a16;
    v29 = a2 != (__int16)a2 || a12 < 2 || a12 == 1;
    v30.i64[0] = 0x200000002000;
    v30.i64[1] = 0x200000002000;
    v31.i64[0] = 0xFF000000FFLL;
    v31.i64[1] = 0xFF000000FFLL;
    do
    {
      v32 = *(int32x4_t **)(a13 + 8 * v17);
      v33 = 0;
      if (v29)
      {
        v34 = result;
      }
      else
      {
        v34 = result;
        do
        {
          v65 = (uint8x16_t *)(v18 + 4 * v34->i32[0]);
          v66 = (uint8x16_t *)((char *)v65 + v25);
          if ((unint64_t)v65->u64 + v25 > 4 * v20 + v18)
            break;
          if (v65 >= v66)
          {
            v70 = 0uLL;
            v71 = 0uLL;
            v72 = 0uLL;
            v73 = 0uLL;
          }
          else
          {
            v67 = v34 + 1;
            v68 = v34->i32[1];
            v69 = (unint64_t)&v66[-1];
            v70 = 0uLL;
            v71 = 0uLL;
            v72 = 0uLL;
            v73 = 0uLL;
            while ((unint64_t)v65 < v69)
            {
              v74 = *(double *)v67++;
              *(double *)&a10 = v74;
              v75 = *v65++;
              v76 = (int16x8_t)vmovl_high_u8(v75);
              v16 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v75.i8);
              v70 = vmlal_lane_s16(v70, *(int16x4_t *)v16.i8, a10, 0);
              v71 = vmlal_high_lane_s16(v71, v16, a10, 1);
              v72 = vmlal_lane_s16(v72, *(int16x4_t *)v76.i8, a10, 2);
              v73 = vmlal_high_lane_s16(v73, v76, a10, 3);
              v68 -= 4;
            }
            if (v68 >= 1)
            {
              a10 = *v67;
              v77 = (int16x8_t)vmovl_high_u8(*v65);
              v16 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v65->i8);
              v70 = vmlal_lane_s16(v70, *(int16x4_t *)v16.i8, *v67, 0);
              v71 = vmlal_high_lane_s16(v71, v16, *v67, 1);
              v72 = vmlal_lane_s16(v72, *(int16x4_t *)v77.i8, *v67, 2);
              v73 = vmlal_high_lane_s16(v73, v77, *v67, 3);
            }
          }
          *v32++ = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(vaddq_s32(v71, v73), vaddq_s32(v70, v72)), v30), 0xEuLL), v31), (int32x4_t)0);
          ++v33;
          v34 = (int16x4_t *)((char *)v34 + v21);
          if (a12 < 2)
            break;
        }
        while ((unint64_t)a12 - 1 > v33);
      }
      if (v33 < a12)
      {
        do
        {
          v35 = v34->i32[1];
          v36 = v34->i32[0];
          if ((int)v36 >= (int)v20)
            v37 = v20;
          else
            v37 = v34->i32[0];
          v38 = v20 - v37;
          if (v35 >= v38)
            v35 = v38;
          if (v35 < 1)
          {
            v43 = 0uLL;
            v44 = 0uLL;
            v45 = 0uLL;
            v46 = 0uLL;
          }
          else
          {
            v39 = (uint8x16_t *)(v18 + 4 * v36);
            v40 = (unint64_t)&v39[-1] + 4 * v35;
            v41 = (__int16 *)&v34[1];
            if ((unint64_t)v39 >= v40)
            {
              v43 = 0uLL;
              v44 = 0uLL;
              v45 = 0uLL;
              v46 = 0uLL;
              goto LABEL_51;
            }
            v42 = v35;
            v43 = 0uLL;
            v44 = 0uLL;
            v45 = 0uLL;
            v46 = 0uLL;
            do
            {
              v47 = v22 - (char *)v41;
              if ((unint64_t)(v22 - (char *)v41) >= 8)
                v47 = 8;
              if (v47 < 8)
              {
                if (v42)
                {
                  if (v42 == 1)
                  {
                    a10.i16[0] = *v41;
                  }
                  else
                  {
                    if ((_DWORD)v42 == 2)
                    {
                      v50 = 0;
                    }
                    else
                    {
                      if ((v35 & 1) != 0)
                        v51 = 0;
                      else
                        v51 = (unsigned __int16)v41[3];
                      v50.i32[0] = (unsigned __int16)v41[2];
                      v50.i32[1] = v51;
                    }
                    v16.i16[0] = *v41;
                    v16.i16[2] = v41[1];
                    a10 = vuzp1_s16(*(int16x4_t *)v16.i8, v50);
                  }
                }
                else
                {
                  *(double *)&a10 = 0.0;
                }
              }
              else
              {
                a10 = *(int16x4_t *)v41;
              }
              v41 += 4;
              v48 = *v39++;
              v49 = (int16x8_t)vmovl_high_u8(v48);
              v16 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v48.i8);
              v43 = vmlal_lane_s16(v43, *(int16x4_t *)v16.i8, a10, 0);
              v44 = vmlal_high_lane_s16(v44, v16, a10, 1);
              v45 = vmlal_lane_s16(v45, *(int16x4_t *)v49.i8, a10, 2);
              v46 = vmlal_high_lane_s16(v46, v49, a10, 3);
              v42 -= 4;
            }
            while ((unint64_t)v39 < v40);
            if ((int)v42 >= 1)
            {
              v35 = v42;
LABEL_51:
              v52 = v35;
              while (2)
              {
                v53 = v22 - (char *)v41;
                if ((unint64_t)(v22 - (char *)v41) >= 8)
                  v53 = 8;
                if (v53 >= 8)
                {
                  a10 = *(int16x4_t *)v41;
                  goto LABEL_56;
                }
                if (v52 == 1)
                {
                  v56 = *v41;
                  v41 += 4;
                  v57 = 0;
                  v58 = 0;
                  v59 = 0;
                  v60 = 0;
                  a10.i8[2] = 0;
                  a10.i8[3] = 0;
                  a10.i8[4] = 0;
                  a10.i8[5] = 0;
                  a10.i8[6] = 0;
                  a10.i8[7] = 0;
                  a10.i16[0] = v56;
                  v16.i32[0] = v39->i32[0];
                  v16.i64[0] = vmovl_u8(*(uint8x8_t *)v16.i8).u64[0];
                  goto LABEL_63;
                }
                if (v52 == 2)
                {
                  v61 = 0;
                }
                else
                {
                  if ((v35 & 1) != 0)
                    v63 = 0;
                  else
                    v63 = (unsigned __int16)v41[3];
                  v61.i32[0] = (unsigned __int16)v41[2];
                  v61.i32[1] = v63;
                }
                v16.i16[0] = *v41;
                v16.i16[2] = v41[1];
                a10 = vuzp1_s16(*(int16x4_t *)v16.i8, v61);
LABEL_56:
                v41 += 4;
                if (v52 < 4)
                {
                  if ((v52 & 0x3FFFFFFE) != 0)
                  {
                    if (v52 == 2)
                    {
                      v62 = 0;
                    }
                    else
                    {
                      v16.i32[0] = v39->i32[2];
                      v64 = vmovl_u8(*(uint8x8_t *)v16.i8);
                      HIDWORD(v62) = 0;
                      LOBYTE(v62) = v64.i8[0];
                      BYTE1(v62) = v64.i8[2];
                      BYTE2(v62) = v64.i8[4];
                      BYTE3(v62) = v64.i8[6];
                    }
                    v16.i64[0] = v39->i64[0];
                    v16.i64[1] = v62;
                  }
                  else
                  {
                    v16.i32[0] = v39->i32[0];
                    v16.i64[0] = vmovl_u8(*(uint8x8_t *)v16.i8).u64[0];
                    if (v52 == 1)
                    {
                      v57 = 0;
                      v58 = 0;
                      v59 = 0;
                      v60 = 0;
                    }
                    else
                    {
                      v57 = v39->i8[4];
                      v58 = v39->i8[5];
                      v59 = v39->i8[6];
                      v60 = v39->i8[7];
                    }
LABEL_63:
                    v16.i8[8] = 0;
                    v16.i8[9] = 0;
                    v16.i8[10] = 0;
                    v16.i8[11] = 0;
                    v16.i8[12] = 0;
                    v16.i8[13] = 0;
                    v16.i8[14] = 0;
                    v16.i8[15] = 0;
                    v16.i8[1] = v16.i8[2];
                    v16.i8[2] = v16.i8[4];
                    v16.i8[3] = v16.i8[6];
                    v16.i8[4] = v57;
                    v16.i8[5] = v58;
                    v16.i8[6] = v59;
                    v16.i8[7] = v60;
                  }
                }
                else
                {
                  v16 = *(int16x8_t *)v39;
                }
                ++v39;
                v54 = (int16x8_t)vmovl_high_u8((uint8x16_t)v16);
                v16 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v16.i8);
                v43 = vmlal_lane_s16(v43, *(int16x4_t *)v16.i8, a10, 0);
                v44 = vmlal_high_lane_s16(v44, v16, a10, 1);
                v45 = vmlal_lane_s16(v45, *(int16x4_t *)v54.i8, a10, 2);
                v46 = vmlal_high_lane_s16(v46, v54, a10, 3);
                v55 = __OFSUB__(v52, 4);
                v52 -= 4;
                if ((v52 < 0) ^ v55 | (v52 == 0))
                  break;
                continue;
              }
            }
          }
          *v32++ = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(vaddq_s32(v44, v46), vaddq_s32(v43, v45)), v30), 0xEuLL), v31), (int32x4_t)0);
          ++v33;
          v34 = (int16x4_t *)((char *)v34 + v21);
        }
        while (v33 != a12);
      }
      v18 += v19;
      ++v17;
    }
    while (v17 != v26);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned char,4,(AlphaStyle)1>(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint8x8_t **a5, uint64_t a6)
{
  uint8x8_t *v6;
  uint64_t v7;
  const __int16 *v8;
  signed int v9;
  int v10;
  unint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  const __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int32x4_t *v19;
  int32x4_t *v20;
  unsigned int v21;
  int16x4_t v22;
  int16x4_t v23;
  int32x4_t *v24;
  int16x4_t v25;
  int8x8_t v26;
  int8x8_t v27;
  int8x8_t v28;
  int32x4_t v29;
  int32x4_t v30;
  const __int16 *v31;
  uint64_t v32;
  uint64_t *v33;
  unsigned int v34;
  uint64_t v35;
  int16x4_t v36;
  int16x8_t v37;
  __int16 v38;
  __int16 v39;

  v6 = *a5;
  v7 = *(int *)(result + 4);
  v8 = (const __int16 *)(result + 8);
  if (a4 >= 2)
  {
    v10 = 0;
    v11 = 2;
    v12.i64[0] = 0x200000002000;
    v12.i64[1] = 0x200000002000;
    do
    {
      v13 = 0uLL;
      v14 = 0uLL;
      v15 = v8;
      if ((int)v7 >= 2)
      {
        v16 = 0;
        v17 = (4 * v10) & 0xFFFFFFF8;
        v15 = v8;
        do
        {
          v18 = (_QWORD *)(a6 + 8 * v16);
          v19 = (int32x4_t *)(*v18 + 4 * v17);
          v20 = (int32x4_t *)(v18[1] + 4 * v17);
          v21 = *(_DWORD *)v15;
          v15 += 2;
          v22 = vdup_n_s16(v21);
          v23 = vdup_n_s16(HIWORD(v21));
          v14 = vmlal_s16(vmlal_s16(v14, vmovn_s32(v19[1]), v22), vmovn_s32(v20[1]), v23);
          v13 = vmlal_s16(vmlal_s16(v13, vmovn_s32(*v19), v22), vmovn_s32(*v20), v23);
          result = v16 + 4;
          v16 += 2;
        }
        while (result <= v7);
      }
      if ((v7 & 1) != 0)
      {
        v24 = (int32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 4 * ((4 * v10) & 0xFFFFFFF8));
        v25 = vld1_dup_s16(v15);
        v14 = vmlal_s16(v14, vmovn_s32(v24[1]), v25);
        v13 = vmlal_s16(v13, vmovn_s32(*v24), v25);
      }
      v26 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v13, v12), 0xEuLL)), vshrq_n_s32(vaddq_s32(v14, v12), 0xEuLL)));
      v27 = (int8x8_t)vmax_u8((uint8x8_t)vuzp1_s8(v26, *(int8x8_t *)v12.i8), (uint8x8_t)vuzp2_s8(v26, *(int8x8_t *)v12.i8));
      v27.i16[0] = vmax_u8((uint8x8_t)vuzp1_s8(v27, *(int8x8_t *)v12.i8), (uint8x8_t)vuzp2_s8(v27, *(int8x8_t *)v12.i8)).u16[0];
      v10 += 2;
      v28.i32[0] = v27.u8[0];
      v28.i32[1] = v27.u8[1];
      *v6++ = vmax_u8((uint8x8_t)v26, (uint8x8_t)vand_s8(v28, (int8x8_t)0xFF000000FFLL));
      v11 += 2;
    }
    while (v11 <= a4);
    v9 = a4 & 0xFFFFFFFE;
  }
  else
  {
    v9 = 0;
  }
  if (v9 < a4)
  {
    v29.i64[0] = 0x200000002000;
    v29.i64[1] = 0x200000002000;
    do
    {
      v30 = 0uLL;
      v31 = v8;
      if ((int)v7 >= 2)
      {
        v32 = 0;
        v31 = v8;
        do
        {
          v33 = (uint64_t *)(a6 + 8 * v32);
          result = *v33;
          v34 = *(_DWORD *)v31;
          v31 += 2;
          v30 = vmlal_s16(vmlal_s16(v30, vmovn_s32(*(int32x4_t *)(*v33 + 4 * (4 * v9))), vdup_n_s16(v34)), vmovn_s32(*(int32x4_t *)(v33[1] + 4 * (4 * v9))), vdup_n_s16(HIWORD(v34)));
          v35 = v32 + 4;
          v32 += 2;
        }
        while (v35 <= v7);
      }
      if ((v7 & 1) != 0)
      {
        v36 = vld1_dup_s16(v31);
        v30 = vmlal_s16(v30, vmovn_s32(*(int32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 4 * (4 * v9))), v36);
      }
      v37 = (int16x8_t)vshrq_n_s32(vaddq_s32(v30, v29), 0xEuLL);
      *(int16x4_t *)v37.i8 = vqmovn_s32((int32x4_t)v37);
      *(int8x8_t *)v37.i8 = vqmovun_s16(v37);
      v38 = v37.u8[3];
      v39 = v37.u8[2];
      v37.i8[0] = vmaxv_u8(*(uint8x8_t *)v37.i8);
      v37.i16[1] = v37.u8[1];
      v37.i16[2] = v39;
      v37.i16[3] = v38;
      v6->i32[0] = vmovn_s16(v37).u32[0];
      v6 = (uint8x8_t *)((char *)v6 + 4);
      ++v9;
    }
    while (v9 < a4);
  }
  return result;
}

int *resample_horizontal<unsigned char,int,3,false>(int *result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unsigned int v19;
  _BOOL4 v20;
  uint64_t v21;
  unint64_t v22;
  int16x8_t v23;
  unsigned int v24;
  int8x16_t v25;
  uint64_t v26;
  BOOL v27;
  char v28;
  int32x4_t v29;
  int32x4_t v30;
  int8x16_t v31;
  uint64_t v32;
  unint64_t v33;
  int *v34;
  uint8x16_t *v35;
  uint8x16_t *v36;
  int8x16_t *v37;
  int v38;
  unint64_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  uint8x16_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int8x16_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int32x4_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unint64_t v60;
  int8x16_t *v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  unint64_t v66;
  uint8x16_t v67;
  int16x8_t v68;
  int16x4_t v69;
  int16x4_t v70;
  __int32 v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  unsigned int v79;
  uint8x16_t v80;
  int16x8_t v81;
  int16x4_t v82;
  __int32 v83;
  uint64_t v84;
  int8x8_t v85;
  int16x4_t v86;
  int8x8_t v87;
  __int8 v88;
  __int8 v89;
  unsigned __int8 v90;
  int16x4_t v91;
  int16x4_t v92;
  int16x4_t v93;
  __int16 v94;
  int32x4_t v95;
  int8x16_t v96;
  int32x4_t v97;

  if ((int)a4 >= 1 && a8 >= 1)
  {
    v11 = 0;
    v12 = *a6;
    v13 = *a7;
    v14 = v13 / 3;
    v15 = 2 * a2;
    v16 = v15 + 8;
    v17 = (char *)result + (v15 + 8) * a4;
    if (v13 / 3 >= *(int *)&v17[-v15 - 4] + (uint64_t)*(int *)&v17[-v15 - 8])
      v14 = *(int *)&v17[-v15 - 4] + (uint64_t)*(int *)&v17[-v15 - 8];
    if (a2 <= 3)
      v18 = (2 * a2 + 23) / (2 * a2 + 8);
    else
      v18 = 1;
    v19 = a2 % 5;
    v20 = a2 > 4;
    if (a2 % 5)
      v20 = 0;
    else
      v19 = 5;
    v21 = ((3 * v19 + 15) & 0x1FFFFFFF0) + 15 * (a2 / 5 - v20);
    v22 = a4 - v18;
    v23 = vdupq_n_s16(v19);
    if (a2 >= 5)
      v24 = 5;
    else
      v24 = a2;
    v25 = (int8x16_t)vcgtq_u16((uint16x8_t)vdupq_n_s16(v24), (uint16x8_t)xmmword_185004910);
    v26 = a8;
    v27 = a2 == (__int16)a2 && a4 > v18;
    v28 = !v27;
    if (v22 <= 1)
      v22 = 1;
    v29.i64[0] = 0x200000002000;
    v29.i64[1] = 0x200000002000;
    v30.i64[0] = 0xFF000000FFLL;
    v30.i64[1] = 0xFF000000FFLL;
    v31 = (int8x16_t)vcgtq_s16(v23, (int16x8_t)xmmword_185004910);
    do
    {
      v32 = *(_QWORD *)(a5 + 8 * v11);
      v33 = 0;
      if ((v28 & 1) != 0)
      {
        v34 = result;
      }
      else
      {
        v34 = result;
        while (1)
        {
          v35 = (uint8x16_t *)(v12 + 3 * *v34);
          v36 = (uint8x16_t *)((char *)v35 + v21);
          if ((unint64_t)v35->u64 + v21 > 3 * v14 + v12)
            break;
          if (v35 >= v36)
          {
            v40 = 0uLL;
            v41 = 0uLL;
            v42 = 0uLL;
            v43 = 0uLL;
          }
          else
          {
            v37 = (int8x16_t *)(v34 + 2);
            v38 = v34[1];
            v39 = (unint64_t)&v36[-1];
            v40 = 0uLL;
            v41 = 0uLL;
            v42 = 0uLL;
            v43 = 0uLL;
            while ((unint64_t)v35 < v39)
            {
              v44 = *v37;
              v37 = (int8x16_t *)((char *)v37 + 10);
              v45 = vandq_s8(v44, v25);
              v46 = *v35;
              v35 = (uint8x16_t *)((char *)v35 + 15);
              v10 = (int16x8_t)vmovl_high_u8(v46);
              v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v46.i8);
              v47 = (int16x8_t)vqtbl1q_s8(v45, (int8x16_t)xmmword_185004920);
              v48 = (int16x8_t)vqtbl1q_s8(v45, (int8x16_t)xmmword_185004930);
              v43 = vmlal_high_s16(v43, v10, v47);
              v41 = vmlal_high_s16(v41, v9, v48);
              v42 = vmlal_s16(v42, *(int16x4_t *)v10.i8, *(int16x4_t *)v47.i8);
              v40 = vmlal_s16(v40, *(int16x4_t *)v9.i8, *(int16x4_t *)v48.i8);
              v38 -= 5;
            }
            if (v38 >= 1)
            {
              v49 = vandq_s8(*v37, v31);
              v10 = (int16x8_t)vmovl_high_u8(*v35);
              v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v35->i8);
              v50 = (int16x8_t)vqtbl1q_s8(v49, (int8x16_t)xmmword_185004920);
              v51 = (int16x8_t)vqtbl1q_s8(v49, (int8x16_t)xmmword_185004930);
              v43 = vmlal_high_s16(v43, v10, v50);
              v41 = vmlal_high_s16(v41, v9, v51);
              v42 = vmlal_s16(v42, *(int16x4_t *)v10.i8, *(int16x4_t *)v50.i8);
              v40 = vmlal_s16(v40, *(int16x4_t *)v9.i8, *(int16x4_t *)v51.i8);
            }
          }
          v8 = (int16x8_t)vextq_s8((int8x16_t)v42, (int8x16_t)v43, 4uLL);
          v52 = vaddq_s32((int32x4_t)v8, v40);
          v53 = (int8x16_t)vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 4uLL).u64[0], v41);
          v54 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32(v52, (int32x4_t)vextq_s8((int8x16_t)v52, v53, 0xCuLL)), vaddq_s32((int32x4_t)vextq_s8(v53, (int8x16_t)v42, 8uLL), v29)), 0xEuLL), v30), (int32x4_t)0);
          *(_QWORD *)v32 = v54.i64[0];
          *(_DWORD *)(v32 + 8) = v54.i32[2];
          v32 += 12;
          ++v33;
          v34 = (int *)((char *)v34 + v16);
          if (v33 == v22)
          {
            v33 = v22;
            break;
          }
        }
      }
      if (v33 < a4)
      {
        do
        {
          v55 = *v34;
          if ((int)v55 >= (int)v14)
            v56 = v14;
          else
            v56 = *v34;
          v57 = v14 - v56;
          if (v34[1] >= v57)
            LODWORD(v58) = v57;
          else
            LODWORD(v58) = v34[1];
          if ((int)v58 < 1)
          {
            v62 = 0uLL;
            v63 = 0uLL;
            v64 = 0uLL;
            v65 = 0uLL;
          }
          else
          {
            v59 = (unsigned __int8 *)(v12 + 3 * v55);
            v60 = (unint64_t)&v59[3 * (int)v58 - 16];
            v61 = (int8x16_t *)(v34 + 2);
            if ((unint64_t)v59 >= v60)
            {
              v62 = 0uLL;
              v63 = 0uLL;
              v64 = 0uLL;
              v65 = 0uLL;
LABEL_76:
              v72 = 0;
              v73 = v58;
              v74 = 3 * v58;
              v75 = (_DWORD)v58 << 16;
              v76 = 3 * v58;
              while (2)
              {
                v77 = v74 + v72;
                v78 = v17 - (char *)v61;
                if ((unint64_t)(v17 - (char *)v61) >= 0x10)
                  v78 = 16;
                if (v78 < 0x10)
                {
                  if (v73 >= 4)
                  {
                    if ((_DWORD)v73 == 4)
                    {
                      v9.i16[0] = 0;
                      v9.i8[2] = 0;
                      v9.i8[3] = 0;
                      v9.i8[4] = 0;
                      v9.i8[5] = 0;
                      v9.i8[6] = 0;
                      v9.i8[7] = 0;
                    }
                    else if ((_DWORD)v73 == 5)
                    {
                      v9.i16[0] = v61->i16[4];
                    }
                    else
                    {
                      if (v77 == 18)
                      {
                        v93 = 0;
                      }
                      else
                      {
                        if ((v73 & 1) != 0)
                          v83 = 0;
                        else
                          v83 = v61->u16[7];
                        v93.i32[0] = v61->u16[6];
                        v93.i32[1] = v83;
                      }
                      v9.i16[0] = v61->i16[4];
                      v9.i16[2] = v61->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v93);
                    }
                    v8.i64[0] = v61->i64[0];
                    v8.i64[1] = v9.i64[0];
                    goto LABEL_83;
                  }
                  if (v77 == 3)
                  {
                    v8.i16[0] = v61->i16[0];
                  }
                  else
                  {
                    if (v74 + v72 == 6)
                      v82 = 0;
                    else
                      v82 = (int16x4_t)v61->u16[2];
                    v9.i16[0] = v61->i16[0];
                    v9.i16[2] = v61->i16[1];
                    *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v82);
                  }
                  v8.i64[1] = 0;
                  v61 = (int8x16_t *)((char *)v61 + 10);
                }
                else
                {
                  v79 = v75 >> 16;
                  if (v75 >> 16 >= 8)
                    v79 = 8;
                  v9 = *(int16x8_t *)v61;
                  v8 = (int16x8_t)vandq_s8(*v61, (int8x16_t)vcgtq_s16(vdupq_n_s16(v79), (int16x8_t)xmmword_185004910));
LABEL_83:
                  v61 = (int8x16_t *)((char *)v61 + 10);
                  if (v73 >= 6)
                  {
                    v80 = *(uint8x16_t *)v59;
                    goto LABEL_85;
                  }
                }
                v84 = v74 + v72;
                if ((v76 + v72) < 8)
                {
                  if ((v76 + v72) < 4)
                  {
                    if (v84)
                    {
                      if (v84 == 1)
                      {
                        v86 = 0;
                        v9.i8[2] = 0;
                        v9.i8[3] = 0;
                        v9.i8[4] = 0;
                        v9.i8[5] = 0;
                        v9.i8[6] = 0;
                        v9.i8[7] = 0;
                        v9.i16[0] = *v59;
                      }
                      else
                      {
                        v9.i8[0] = *v59;
                        v9.i8[4] = v59[1];
                        v86 = (int16x4_t)v59[2];
                      }
                      v92 = vuzp1_s16(*(int16x4_t *)v9.i8, v86);
                    }
                    else
                    {
                      v92.i8[0] = 0;
                      v92.i8[2] = 0;
                      v92.i8[4] = 0;
                      v92.i8[6] = 0;
                    }
                    v80.i32[1] = 0;
                    v80.i8[0] = v92.i8[0];
                    v80.i8[1] = v92.i8[2];
                    v80.i8[2] = v92.i8[4];
                    v80.i8[3] = v92.i8[6];
                  }
                  else
                  {
                    if (v84 == 4)
                    {
                      v85 = 0;
                    }
                    else if (v84 == 5)
                    {
                      v85 = (int8x8_t)v59[4];
                    }
                    else
                    {
                      if (v74 + v72 == 6)
                        v91 = 0;
                      else
                        v91 = (int16x4_t)v59[6];
                      v10.i8[0] = v59[4];
                      v10.i8[4] = v59[5];
                      v85 = (int8x8_t)vuzp1_s16(*(int16x4_t *)v10.i8, v91);
                    }
                    v10.i32[0] = *(_DWORD *)v59;
                    *(int8x8_t *)v80.i8 = vuzp1_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v10.i8), v85);
                  }
                  v80.i64[1] = 0;
                }
                else
                {
                  if (v84 == 8)
                  {
                    v87 = 0;
                  }
                  else if ((unint64_t)(v84 - 8) < 4)
                  {
                    if (v77 == 9)
                    {
                      v90 = 0;
                      v89 = 0;
                      v88 = v59[8];
                    }
                    else
                    {
                      v88 = v59[8];
                      v89 = v59[9];
                      v90 = v59[10];
                    }
                    v87.i16[3] = 0;
                    v87.i8[0] = v88;
                    v87.i8[1] = v89;
                    *(__int32 *)((char *)v87.i32 + 2) = v90;
                  }
                  else
                  {
                    if (v84 == 12)
                    {
                      v9.i16[0] = 0;
                      v9.i8[2] = 0;
                      v9.i8[3] = 0;
                      v9.i8[4] = 0;
                      v9.i8[5] = 0;
                      v9.i8[6] = 0;
                      v9.i8[7] = 0;
                    }
                    else if (v84 == 13)
                    {
                      v9.i8[2] = 0;
                      v9.i8[3] = 0;
                      v9.i8[4] = 0;
                      v9.i8[5] = 0;
                      v9.i8[6] = 0;
                      v9.i8[7] = 0;
                      v9.i16[0] = v59[12];
                    }
                    else
                    {
                      if ((v84 & 1) != 0)
                        v94 = 0;
                      else
                        v94 = v59[15];
                      v9.i8[0] = v59[12];
                      v9.i8[4] = v59[13];
                      v9.i16[1] = v9.i16[2];
                      v9.i16[2] = v59[14];
                      v9.i16[3] = v94;
                    }
                    v10.i32[0] = *((_DWORD *)v59 + 2);
                    v87 = vuzp1_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v10.i8), *(int8x8_t *)v9.i8);
                  }
                  v80.i64[0] = *(_QWORD *)v59;
                  v80.u64[1] = (unint64_t)v87;
                }
LABEL_85:
                v59 += 15;
                v10 = (int16x8_t)vmovl_high_u8(v80);
                v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v80.i8);
                v81 = (int16x8_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_185004920);
                v8 = (int16x8_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_185004930);
                v63 = vmlal_high_s16(v63, v9, v8);
                v65 = vmlal_high_s16(v65, v10, v81);
                v64 = vmlal_s16(v64, *(int16x4_t *)v10.i8, *(int16x4_t *)v81.i8);
                v62 = vmlal_s16(v62, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
                v72 -= 15;
                v75 -= 327680;
                v27 = (uint64_t)v73 <= 5;
                v73 -= 5;
                if (v27)
                  goto LABEL_145;
                continue;
              }
            }
            v58 = (int)v58;
            v62 = 0uLL;
            v63 = 0uLL;
            v64 = 0uLL;
            v65 = 0uLL;
            do
            {
              v66 = v17 - (char *)v61;
              if ((unint64_t)(v17 - (char *)v61) >= 0x10)
                v66 = 16;
              if (v66 < 0x10)
              {
                if ((_DWORD)v58)
                {
                  if (v58 < 4)
                  {
                    if (v58 == 1)
                    {
                      v8.i16[0] = v61->i16[0];
                    }
                    else
                    {
                      if ((_DWORD)v58 == 2)
                        v69 = 0;
                      else
                        v69 = (int16x4_t)v61->u16[2];
                      v9.i16[0] = v61->i16[0];
                      v9.i16[2] = v61->i16[1];
                      *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v69);
                    }
                    v8.i64[1] = 0;
                  }
                  else
                  {
                    if (v58 == 4)
                    {
                      v9.i16[0] = 0;
                      v9.i8[2] = 0;
                      v9.i8[3] = 0;
                      v9.i8[4] = 0;
                      v9.i8[5] = 0;
                      v9.i8[6] = 0;
                      v9.i8[7] = 0;
                    }
                    else if (v58 == 5)
                    {
                      v9.i16[0] = v61->i16[4];
                    }
                    else
                    {
                      if ((_DWORD)v58 == 6)
                      {
                        v70 = 0;
                      }
                      else
                      {
                        if ((v58 & 1) != 0)
                          v71 = 0;
                        else
                          v71 = v61->u16[7];
                        v70.i32[0] = v61->u16[6];
                        v70.i32[1] = v71;
                      }
                      v9.i16[0] = v61->i16[4];
                      v9.i16[2] = v61->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v70);
                    }
                    v8.i64[0] = v61->i64[0];
                    v8.i64[1] = v9.i64[0];
                  }
                }
                else
                {
                  v8 = 0uLL;
                }
              }
              else
              {
                v8 = (int16x8_t)vandq_s8(*v61, v25);
              }
              v61 = (int8x16_t *)((char *)v61 + 10);
              v67 = *(uint8x16_t *)v59;
              v59 += 15;
              v10 = (int16x8_t)vmovl_high_u8(v67);
              v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v67.i8);
              v68 = (int16x8_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_185004920);
              v8 = (int16x8_t)vqtbl1q_s8((int8x16_t)v8, (int8x16_t)xmmword_185004930);
              v65 = vmlal_high_s16(v65, v10, v68);
              v64 = vmlal_s16(v64, *(int16x4_t *)v10.i8, *(int16x4_t *)v68.i8);
              v63 = vmlal_high_s16(v63, v9, v8);
              v62 = vmlal_s16(v62, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
              v58 -= 5;
            }
            while ((unint64_t)v59 < v60);
            if ((int)v58 >= 1)
              goto LABEL_76;
          }
LABEL_145:
          v8 = (int16x8_t)vextq_s8((int8x16_t)v64, (int8x16_t)v65, 4uLL);
          v95 = vaddq_s32((int32x4_t)v8, v62);
          v96 = (int8x16_t)vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v65, (int8x16_t)v65, 4uLL).u64[0], v63);
          v97 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v95, v96, 0xCuLL), v95), vaddq_s32((int32x4_t)vextq_s8(v96, (int8x16_t)v64, 8uLL), v29)), 0xEuLL), v30), (int32x4_t)0);
          *(_QWORD *)v32 = v97.i64[0];
          *(_DWORD *)(v32 + 8) = v97.i32[2];
          v32 += 12;
          ++v33;
          v34 = (int *)((char *)v34 + v16);
        }
        while (v33 != a4);
      }
      v12 += v13;
      ++v11;
    }
    while (v11 != v26);
  }
  return result;
}

uint64_t img_raw_read(uint64_t a1, unsigned int a2, uint64_t a3, char **a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v14;
  _QWORD *v15;
  int *v16;
  uint64_t image_pointer;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v24;
  unint64_t v25;
  void *v26;
  int v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  int v31;
  int v32;
  BOOL v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  void *v50;
  int v51;
  uint64_t v52;
  int *v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  unsigned int v60;
  int v61;
  int *v62;
  int v63;
  int v65;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t *access_session;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t ChunksAtPosition;
  int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  BOOL v88;
  unsigned int v89;
  _BOOL4 v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  char *v104;
  uint64_t v105;
  int v106;
  unsigned int v107;
  int v108;
  size_t v109;
  size_t v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  int v118;
  int v119;
  size_t v120;
  char *v121;
  const void *v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  size_t v130;
  _QWORD *v131;
  int v132;
  unsigned int v133;
  __int128 v135;
  uint64_t v136;
  int v137[2];
  int v138;
  unsigned int v139;
  int v140;
  int v141;

  result = 0;
  if ((a2 & 0x80000000) != 0)
    return result;
  v10 = a3;
  if ((int)a3 < 1)
    return result;
  v14 = *(_QWORD *)(a1 + 96);
  v15 = *(_QWORD **)(a1 + 144);
  v16 = *(int **)(a1 + 152);
  if ((_DWORD)v14 == -1)
  {
    v28 = *(_QWORD **)(a1 + 184);
    if (!v28)
    {
      v29 = img_blocks_create(*(_QWORD *)(a1 + 144), 0, *(int **)(a1 + 152), 0);
      if (!v29)
        return 0xFFFFFFFFLL;
      v28 = v29;
      *(_QWORD *)(a1 + 184) = v29;
      *(_QWORD *)(a1 + 88) = 0;
    }
    v30 = v10 + a2;
    v31 = *((_DWORD *)v28 + 15);
    v32 = *((_DWORD *)v28 + 17) + v31;
    if (v31 >= (int)(v10 + a2) || v32 <= (int)a2)
      return 0;
    v34 = __OFSUB__(v32, v30);
    v35 = v32 - v30;
    if (v35 < 0 != v34)
    {
      v10 = (v35 + v10);
      if ((int)v10 < 1)
        return 0;
    }
    *(_QWORD *)(a1 + 88) = a2;
    v138 = 0;
    v139 = a2;
    v140 = *(_QWORD *)(a1 + 120);
    v141 = v10;
    if (*((int *)v28 + 10) >= 1)
    {
      v36 = 0;
      v37 = 0;
      while (1)
      {
        v136 = 0;
        *(_QWORD *)v137 = 0;
        v135 = 0uLL;
        v135 = *(_OWORD *)(v28[9] + v36);
        if (CGSBoundsIntersection(&v138, (int *)&v135, &v136))
        {
          v38 = SHIDWORD(v136) - (uint64_t)(int)v139;
          v39 = *a5;
          v40 = v38 * v39;
          if (v38 * v39 != (_DWORD)v38 * (_DWORD)v39)
            return 0;
          if ((v40 & 0x80000000) != 0)
            return 0;
          v41 = v28[4];
          if (v41 != (int)v41)
            return 0;
          v42 = v41 * ((int)v136 - (uint64_t)v138);
          if ((unint64_t)(v42 - 0x80000000) < 0xFFFFFFFF00000000)
            return 0;
          v43 = v41 * v137[0];
          if (v43 != (int)v43)
            return 0;
          v44 = *(_QWORD *)(v28[10] + 8 * v37);
          v45 = &(*a4)[v40 + v42];
          if (v44)
          {
            v46 = *(_QWORD *)(v28[11] + 8 * v37);
            v47 = v46 * (SHIDWORD(v136) - (uint64_t)SDWORD1(v135));
            if (v47 != (int)v47 || (unint64_t)(v46 - 0x80000000) < 0xFFFFFFFF00000000)
              return 0;
            if ((v47 & 0x80000000) != 0)
              return 0;
            v49 = v41 * ((int)v136 - (uint64_t)(int)v135);
            if (v49 != (int)v49 || (v49 & 0x80000000) != 0)
              return 0;
            v50 = (void *)(v44 + v47 + v49);
            v51 = *(_DWORD *)(a1 + 112);
            if (v51)
            {
              CGBlt_swapBytes(v43, v137[1], v50, v45, v46, v39, v51);
            }
            else if (v28[6] == v28[5] && v46 == v39)
            {
              if (v46 * v137[1] != (_DWORD)v46 * v137[1])
                return 0;
              memcpy(v45, v50, v46 * v137[1]);
            }
            else
            {
              CGBlt_copyBytes(v43, v137[1], (char *)v50, v45, v46, v39);
            }
          }
          else
          {
            CGBlt_fillBytes(v43, v137[1], 0, v45, *a5);
          }
        }
        ++v37;
        v36 += 16;
        if (v37 >= *((int *)v28 + 10))
          goto LABEL_185;
      }
    }
    goto LABEL_185;
  }
  if ((_DWORD)v14)
  {
    if (v16)
    {
      v131 = *(_QWORD **)(a1 + 144);
      v52 = *(_QWORD *)(a1 + 128);
      v53 = *(int **)(a1 + 136);
      v54 = *(_DWORD *)(a1 + 40);
      if (v54 >= 0)
        v55 = *(_DWORD *)(a1 + 40);
      else
        v55 = v54 + 7;
      v56 = a3 + a2;
      v57 = v16[1];
      v58 = v16[3] + v57;
      *(_QWORD *)(a1 + 88) = a2;
      if (v58 <= (int)a2 || v56 <= v57)
      {
        v57 = 0;
        v56 = 0;
        v133 = 0;
        v60 = 0;
      }
      else
      {
        if (v58 < v56)
          v56 = v58;
        v87 = a2 - v57;
        v89 = v57 - a2;
        v88 = v57 <= (int)a2;
        if (v57 <= (int)a2)
        {
          v57 = a2;
          v89 = 0;
        }
        v133 = v89;
        if (v88)
          v60 = v87;
        else
          v60 = 0;
      }
      v132 = v52;
      v90 = (_DWORD)v14 == 2 && a4[1] && (*(_DWORD *)(a1 + 44) & 0xFFFFFFFE) == 8;
      v91 = (v56 - v57);
      if ((_DWORD)v91 != (_DWORD)a3 || *(_QWORD *)(a1 + 120) != v16[2])
      {
        v92 = v55;
        v93 = v60;
        v94 = (v56 - v57);
        if (v90)
          CGBlt_fillBytes(a5[1], a3, 0, a4[1], a5[1]);
        CGBlt_fillBytes(*a5, v10, 0, *a4, *a5);
        v91 = v94;
        v60 = v93;
        v55 = v92;
      }
      v95 = v55 >> 3;
      v96 = *(_DWORD *)(a1 + 112);
      if (v90)
      {
        v97 = v53[1];
        v98 = v97 * (uint64_t)(int)v60;
        if (v98 != (int)v98)
          return 0;
        if ((v98 & 0x80000000) != 0)
          return 0;
        v99 = a5[1];
        v100 = v99 * (uint64_t)(int)v133;
        if (v100 != (int)v100)
          return 0;
        if ((v100 & 0x80000000) != 0)
          return 0;
        v101 = *v16 * (uint64_t)v95;
        if (v101 != (int)v101)
          return 0;
        if ((v101 & 0x80000000) != 0)
          return 0;
        v102 = v16[2] * (uint64_t)v95;
        if (v102 != (int)v102)
          return 0;
        v103 = (void *)(v131[1] + v98);
        v104 = &a4[1][v100 + v101];
        if (v54 >= 16 && v96)
        {
          v105 = v91;
          v106 = *(_DWORD *)(a1 + 112);
          v107 = v60;
          CGBlt_swapBytes(v102, v91, v103, v104, v97, v99, v96);
LABEL_165:
          v96 = v106;
          v60 = v107;
          v91 = v105;
          goto LABEL_166;
        }
        if (v97 < 0 || v97 != v99)
        {
          v105 = v91;
          v107 = v60;
          v106 = *(_DWORD *)(a1 + 112);
          CGBlt_copyBytes(v102, v91, (char *)v103, v104, v97, v99);
          goto LABEL_165;
        }
        v110 = v97 * (uint64_t)(int)v91;
        if (v110 != (int)v110)
          return 0;
        v111 = *(_DWORD *)(a1 + 112);
        v112 = v60;
        v113 = v91;
        memcpy(v104, v103, v110);
        v91 = v113;
        v60 = v112;
        v96 = v111;
      }
LABEL_166:
      if ((int)v91 < 1)
        goto LABEL_185;
      if (*a4 == a4[1])
        v123 = v132 + 1;
      else
        v123 = v132;
      v114 = *v53;
      v124 = (int)v114 * (uint64_t)(int)v60;
      if (v124 != (int)v124)
        return 0;
      if ((v124 & 0x80000000) != 0)
        return 0;
      v118 = *a5;
      v125 = *a5 * (uint64_t)(int)v133;
      if (v125 != (int)v125)
        return 0;
      if ((v125 & 0x80000000) != 0)
        return 0;
      v126 = v123;
      v127 = v123 * (uint64_t)*v16;
      if (v127 != (int)v127)
        return 0;
      v128 = v127 * v95;
      if (v128 != (int)v128)
        return 0;
      if ((v128 & 0x80000000) != 0)
        return 0;
      v129 = v126 * (uint64_t)v16[2];
      if (v129 != (int)v129)
        return 0;
      v119 = v129 * v95;
      if (v129 * v95 != (_DWORD)v129 * v95)
        return 0;
      v116 = (char *)(*v131 + v124);
      v117 = &(*a4)[v125 + v128];
      if (!v96)
      {
        if ((_DWORD)v114 == v118)
        {
          if ((int)v114 < 1)
            goto LABEL_185;
          v130 = v114 * v91;
          if (v114 * v91 == (_DWORD)v114 * (_DWORD)v91)
          {
            v121 = &(*a4)[v125 + v128];
            v122 = (const void *)(*v131 + v124);
            v120 = v130;
            goto LABEL_161;
          }
          return 0;
        }
LABEL_163:
        CGBlt_copyBytes(v119, v91, v116, v117, v114, v118);
        goto LABEL_185;
      }
      goto LABEL_156;
    }
    v61 = *(_DWORD *)(a1 + 104);
    v62 = *(int **)(a1 + 136);
    v63 = *v62;
    if (*v62 >= *a5)
      v63 = *a5;
    if (v63 <= v61 || v61 <= 0)
      v65 = v63;
    else
      v65 = *(_DWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = a2;
    if ((_DWORD)v14 == 2)
    {
      v67 = a4[1];
      if (v67)
      {
        if ((*(_DWORD *)(a1 + 44) & 0xFFFFFFFE) == 8)
        {
          v68 = v62[1];
          v69 = v68 * a2;
          if (v69 != (_DWORD)v68 * a2)
            return 0;
          v70 = *(_DWORD *)(a1 + 40);
          v71 = *(int *)(a1 + 120) * (uint64_t)(v70 / 8);
          if (v71 != (int)v71)
            return 0;
          if (v70 >= 9 && (v72 = *(_DWORD *)(a1 + 112)) != 0)
          {
            CGBlt_swapBytes(v71, a3, (void *)(v15[1] + v69), v67, v68, a5[1], v72);
          }
          else
          {
            v108 = a5[1];
            if ((_DWORD)v68 == v108)
            {
              if ((int)v68 >= 1)
              {
                v109 = v68 * a3;
                if (v109 != (int)v109)
                  return 0;
                memcpy(a4[1], (const void *)(v15[1] + v69), v109);
              }
            }
            else
            {
              CGBlt_copyBytes(v71, a3, (char *)(v15[1] + v69), v67, v68, v108);
            }
          }
        }
      }
    }
    v114 = *v62;
    v115 = v114 * a2;
    if (v115 != (_DWORD)v114 * a2)
      return 0;
    v96 = *(_DWORD *)(a1 + 112);
    if (v96)
    {
      v116 = (char *)(*v15 + v115);
      v117 = *a4;
      v118 = *a5;
      v119 = v65;
      LODWORD(v91) = v10;
LABEL_156:
      CGBlt_swapBytes(v119, v91, v116, v117, v114, v118, v96);
      goto LABEL_185;
    }
    v118 = *a5;
    if ((_DWORD)v114 != *a5)
    {
      v116 = (char *)(*v15 + v115);
      v117 = *a4;
      v119 = v65;
      LODWORD(v91) = v10;
      goto LABEL_163;
    }
    if ((int)v114 >= 1)
    {
      v120 = v114 * v10;
      if (v120 == (int)v120)
      {
        v121 = *a4;
        v122 = (const void *)(*v15 + v115);
LABEL_161:
        memcpy(v121, v122, v120);
        goto LABEL_185;
      }
      return 0;
    }
LABEL_185:
    v86 = *(_QWORD *)(a1 + 88) + v10;
    goto LABEL_186;
  }
  if (v14)
    _CGHandleAssert("img_raw_read_with_data_provider", 504, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGSImage.c", "stage->param[IMG_DECODE_NDATA] == 0", "param = %ld", a6, a7, a8, *(_QWORD *)(a1 + 96));
  image_pointer = get_image_pointer((_QWORD *)a1);
  if (!image_pointer)
  {
    access_session = get_access_session(a1);
    v75 = *(_QWORD *)(a1 + 104);
    v76 = *(_QWORD *)(a1 + 136);
    v77 = *a5;
    if (*a5 >= (int)v76)
      v78 = *(_QWORD *)(a1 + 136);
    else
      v78 = *a5;
    if (v78 > (int)v75 && (int)v75 > 0)
      v78 = *(_QWORD *)(a1 + 104);
    v80 = *(_DWORD *)(a1 + 88);
    if (v80 <= (int)a2)
    {
      if (v80 >= (int)a2)
      {
LABEL_99:
        if (v77 == (_DWORD)v76)
          v82 = v76;
        else
          v82 = v78;
        ChunksAtPosition = CGAccessSessionGetChunksAtPosition(access_session, (int)v76 * (unint64_t)a2, v82, (int)v76 - v82, v10, *a4, v77 - v82, v74);
        v10 = ((int)ChunksAtPosition / (int)v76);
        if ((int)v75 >= 1)
        {
          if (ChunksAtPosition - (int)v10 * (int)v76 < v75)
            v10 = v10;
          else
            v10 = (v10 + 1);
        }
        v84 = *(_DWORD *)(a1 + 112);
        if (v84)
          CGBlt_swapBytes(v82, v10, *a4, *a4, *a5, *a5, v84);
        v85 = (int)v10;
        goto LABEL_109;
      }
    }
    else
    {
      v80 = 0;
    }
    if (v80 >= (int)a2)
      v81 = 0;
    else
      v81 = a2;
    *(_QWORD *)(a1 + 88) = v81;
    goto LABEL_99;
  }
  v18 = image_pointer;
  v19 = *(_DWORD *)(a1 + 104);
  v20 = *(_QWORD *)(a1 + 136);
  v21 = *a5;
  if (*a5 >= (int)v20)
    v22 = *(_QWORD *)(a1 + 136);
  else
    v22 = *a5;
  if (v22 <= v19 || v19 <= 0)
    v24 = v22;
  else
    v24 = *(_DWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = a2;
  v25 = (int)v20 * (unint64_t)a2;
  if (v25 != (int)v25 || (v25 & 0x80000000) != 0 || (int)v20 < 1)
    return 0;
  v26 = (void *)(v18 + v25);
  v27 = *(_DWORD *)(a1 + 112);
  if (v27)
  {
    CGBlt_swapBytes(v24, v10, v26, *a4, v20, v21, v27);
LABEL_151:
    v85 = v10;
LABEL_109:
    v86 = *(_QWORD *)(a1 + 88) + v85;
LABEL_186:
    *(_QWORD *)(a1 + 88) = v86;
    return v10;
  }
  if (v21 != (_DWORD)v20)
  {
    CGBlt_copyBytes(v24, v10, (char *)v26, *a4, v20, v21);
    goto LABEL_151;
  }
  result = 0;
  if (((v20 << 32) & 0x8000000000000000) == 0 && !(((int)v20 * (unint64_t)v10) >> 32))
  {
    memcpy(*a4, v26, (int)v20 * (unint64_t)v10);
    goto LABEL_151;
  }
  return result;
}

uint64_t CGAccessSessionGetChunksAtPosition(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  if (!a1 || !a3 || !a6)
    return 0;
  v11 = *a1;
  if (!v11)
    _CGHandleAssert("CGDataProviderGetType", 212, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProvider.c", "provider != NULL", "provider is NULL", (uint64_t)a6, a7, a8, v20);
  switch(*(_DWORD *)(v11 + 20))
  {
    case 0:
    case 2:
      a1[2] = a2;
      result = get_chunks_direct(a1, a3, a4, a5, a6, a7);
      break;
    case 1:
    case 3:
      v17 = a1[2];
      v18 = a2 - v17;
      if (a2 != v17)
      {
        if (a2 <= v17)
        {
          CGDataProviderRewind(v11);
          v19 = CGDataProviderSkipForwardInternal(*a1, a2);
        }
        else
        {
          v19 = a1[2] + CGDataProviderSkipForwardInternal(v11, v18);
        }
        a1[2] = v19;
      }
      result = get_chunks_sequential(a1, a3, a4, a5, (uint64_t)a6, a7);
      break;
    default:
      return 0;
  }
  return result;
}

_QWORD *get_access_session(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  if (*(_QWORD *)(a1 + 96))
    return 0;
  result = *(_QWORD **)(a1 + 184);
  if (!result)
  {
    result = CGAccessSessionCreate(*(CGDataProvider **)(a1 + 144));
    if (result)
    {
      v3 = result[1];
      *(_QWORD *)(a1 + 184) = result;
      *(_QWORD *)(a1 + 192) = v3;
      *(_QWORD *)(a1 + 88) = 0;
    }
  }
  return result;
}

int32x4_t *resample_vertical<int,unsigned char,1,(AlphaStyle)0>(int32x4_t *result, double a2, double a3, int32x4_t a4, int16x4_t a5, int16x4_t a6, uint64_t a7, uint64_t a8, int a9, int8x8_t **a10, uint64_t a11)
{
  int8x8_t *v11;
  uint64_t v12;
  const __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  const __int16 *v20;
  uint64_t v21;
  _QWORD *v22;
  int32x4_t *v23;
  unsigned int v24;
  int16x4_t v25;
  uint64_t v26;
  int32x4_t *v27;
  int16x4_t v28;
  uint64_t v29;
  int32x4_t v30;
  int32x4_t v31;
  uint64_t v32;
  const __int16 *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int16x8_t v38;
  int32x4_t v39;
  unsigned __int32 *v40;
  uint64_t v41;
  _QWORD *v42;
  unsigned __int16 *v43;
  __int16 *v44;
  unsigned __int32 v45;
  int32x4_t v46;
  uint64_t v47;
  unsigned __int16 *v48;
  int16x8_t v49;

  v11 = *a10;
  v12 = result->i32[1];
  v13 = &result->i16[4];
  if (a9 >= 8)
  {
    v15 = 0;
    v16 = 8;
    v17.i64[0] = 0x200000002000;
    v17.i64[1] = 0x200000002000;
    do
    {
      v18 = 0uLL;
      v19 = 0uLL;
      v20 = v13;
      if ((int)v12 >= 2)
      {
        v21 = 0;
        v20 = v13;
        do
        {
          v22 = (_QWORD *)(a11 + 8 * v21);
          result = (int32x4_t *)(*v22 + 4 * v15);
          v23 = (int32x4_t *)(v22[1] + 4 * v15);
          a6 = vmovn_s32(result[1]);
          v24 = *(_DWORD *)v20;
          v20 += 2;
          v25 = vdup_n_s16(v24);
          a5 = vdup_n_s16(HIWORD(v24));
          v19 = vmlal_s16(vmlal_s16(v19, a6, v25), vmovn_s32(v23[1]), a5);
          v18 = vmlal_s16(vmlal_s16(v18, vmovn_s32(*result), v25), vmovn_s32(*v23), a5);
          v26 = v21 + 4;
          v21 += 2;
        }
        while (v26 <= v12);
      }
      if ((v12 & 1) != 0)
      {
        v27 = (int32x4_t *)(*(_QWORD *)(a11 + 8 * ((int)v12 - 1)) + 4 * v15);
        a6 = vmovn_s32(*v27);
        a5 = vmovn_s32(v27[1]);
        v28 = vld1_dup_s16(v20);
        v19 = vmlal_s16(v19, a5, v28);
        v18 = vmlal_s16(v18, a6, v28);
      }
      v15 += 8;
      a4 = vshrq_n_s32(vaddq_s32(v19, v17), 0xEuLL);
      *v11++ = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v18, v17), 0xEuLL)), a4));
      v16 += 8;
    }
    while (v16 <= a9);
    v14 = a9 & 0xFFFFFFF8;
  }
  else
  {
    v14 = 0;
  }
  v29 = v14 | 4;
  if ((int)(v14 | 4) <= a9)
  {
    v30.i64[0] = 0x200000002000;
    v30.i64[1] = 0x200000002000;
    do
    {
      v31 = 0uLL;
      v32 = 4 * v14;
      v33 = v13;
      if ((int)v12 >= 2)
      {
        v34 = 0;
        v33 = v13;
        do
        {
          v35 = a11 + 8 * v34;
          result = *(int32x4_t **)v35;
          v36 = *(_DWORD *)v33;
          v33 += 2;
          a6 = vdup_n_s16(v36);
          *(int16x4_t *)a4.i8 = vdup_n_s16(HIWORD(v36));
          a5 = vmovn_s32(*(int32x4_t *)(*(_QWORD *)(v35 + 8) + v32));
          v31 = vmlal_s16(vmlal_s16(v31, vmovn_s32(*(int32x4_t *)(*(_QWORD *)v35 + v32)), a6), a5, *(int16x4_t *)a4.i8);
          v37 = v34 + 4;
          v34 += 2;
        }
        while (v37 <= v12);
      }
      if ((v12 & 1) != 0)
      {
        *(int16x4_t *)a4.i8 = vmovn_s32(*(int32x4_t *)(*(_QWORD *)(a11 + 8 * ((int)v12 - 1)) + v32));
        a5 = vld1_dup_s16(v33);
        v31 = vmlal_s16(v31, *(int16x4_t *)a4.i8, a5);
      }
      v38 = (int16x8_t)vshrq_n_s32(vaddq_s32(v31, v30), 0xEuLL);
      *(int16x4_t *)v38.i8 = vqmovn_s32((int32x4_t)v38);
      v11->i32[0] = vqmovun_s16(v38).u32[0];
      v11 = (int8x8_t *)((char *)v11 + 4);
      v14 = v29;
      v29 += 4;
    }
    while ((int)v29 <= a9);
  }
  for (; (int)v14 < a9; ++v14)
  {
    if ((int)v12 >= 2)
    {
      v41 = 0;
      v39 = 0uLL;
      v40 = (unsigned __int32 *)v13;
      do
      {
        v42 = (_QWORD *)(a11 + 8 * v41);
        v43 = (unsigned __int16 *)(*v42 + 4 * v14);
        result = (int32x4_t *)(v43 + 1);
        a4.i16[0] = *v43;
        a4.i16[2] = v43[1];
        v44 = (__int16 *)(v42[1] + 4 * v14);
        a5.i16[0] = *v44;
        a5.i16[2] = v44[1];
        v45 = *v40++;
        a6.i32[0] = v45;
        v46 = vmlal_s16(v39, vuzp1_s16(*(int16x4_t *)a4.i8, (int16x4_t)0x200000002000), a6);
        *(int16x4_t *)a4.i8 = vuzp1_s16(a5, (int16x4_t)0x200000002000);
        a5.i32[0] = HIWORD(v45);
        v39 = vmlal_s16(v46, *(int16x4_t *)a4.i8, a5);
        v47 = v41 + 4;
        v41 += 2;
      }
      while (v47 <= v12);
    }
    else
    {
      v39 = 0uLL;
      v40 = (unsigned __int32 *)v13;
    }
    if ((v12 & 1) != 0)
    {
      v48 = (unsigned __int16 *)(*(_QWORD *)(a11 + 8 * ((int)v12 - 1)) + 4 * v14);
      a4.i16[0] = *v48;
      a4.i16[2] = v48[1];
      *(int16x4_t *)a4.i8 = vuzp1_s16(*(int16x4_t *)a4.i8, (int16x4_t)0x200000002000);
      a5.i16[0] = *(_WORD *)v40;
      v39 = vmlal_s16(v39, *(int16x4_t *)a4.i8, a5);
    }
    *(int32x2_t *)v39.i8 = vadd_s32(*(int32x2_t *)v39.i8, (int32x2_t)0x200000002000);
    v49 = (int16x8_t)vshrq_n_s32(v39, 0xEuLL);
    *(int16x4_t *)v49.i8 = vqmovn_s32((int32x4_t)v49);
    v11->i8[0] = vqmovun_s16(v49).u8[0];
    v11 = (int8x8_t *)((char *)v11 + 1);
  }
  return result;
}

uint64_t resample_vertical<int,unsigned char,2,(AlphaStyle)2>(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint8x8_t **a5, uint64_t a6)
{
  uint8x8_t *v6;
  uint64_t v7;
  const __int16 *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  const __int16 *v15;
  uint64_t v16;
  _QWORD *v17;
  int32x4_t *v18;
  int32x4_t *v19;
  unsigned int v20;
  int16x4_t v21;
  int16x4_t v22;
  int32x4_t *v23;
  int16x4_t v24;
  int8x8_t v25;
  int8x16_t v26;
  int32x4_t v27;
  const __int16 *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int16x4_t v32;
  int16x8_t v33;

  v6 = *a5;
  v7 = *(int *)(result + 4);
  v8 = (const __int16 *)(result + 8);
  if (a4 >= 4)
  {
    v10 = 0;
    v11 = 4;
    v12.i64[0] = 0x200000002000;
    v12.i64[1] = 0x200000002000;
    do
    {
      v13 = 0uLL;
      v14 = 0uLL;
      v15 = v8;
      if ((int)v7 >= 2)
      {
        v16 = 0;
        v15 = v8;
        do
        {
          v17 = (_QWORD *)(a6 + 8 * v16);
          v18 = (int32x4_t *)(*v17 + 8 * v10);
          v19 = (int32x4_t *)(v17[1] + 8 * v10);
          v20 = *(_DWORD *)v15;
          v15 += 2;
          v21 = vdup_n_s16(v20);
          v22 = vdup_n_s16(HIWORD(v20));
          v14 = vmlal_s16(vmlal_s16(v14, vmovn_s32(v18[1]), v21), vmovn_s32(v19[1]), v22);
          v13 = vmlal_s16(vmlal_s16(v13, vmovn_s32(*v18), v21), vmovn_s32(*v19), v22);
          result = v16 + 4;
          v16 += 2;
        }
        while (result <= v7);
      }
      if ((v7 & 1) != 0)
      {
        v23 = (int32x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 8 * v10);
        v24 = vld1_dup_s16(v15);
        v14 = vmlal_s16(v14, vmovn_s32(v23[1]), v24);
        v13 = vmlal_s16(v13, vmovn_s32(*v23), v24);
      }
      v10 += 4;
      v25 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vshrq_n_s32(vaddq_s32(v13, v12), 0xEuLL)), vshrq_n_s32(vaddq_s32(v14, v12), 0xEuLL)));
      *(uint8x8_t *)v26.i8 = vmax_u8((uint8x8_t)vuzp1_s8(v25, *(int8x8_t *)v12.i8), (uint8x8_t)vuzp2_s8(v25, *(int8x8_t *)v12.i8));
      v26.i64[1] = v26.i64[0];
      *v6++ = vmax_u8((uint8x8_t)v25, (uint8x8_t)vqtbl1_s8(v26, (int8x8_t)0x3FF02FF01FF00FFLL));
      v11 += 4;
    }
    while (v11 <= a4);
    v9 = a4 & 0x7FFFFFFC;
  }
  else
  {
    v9 = 0;
  }
  for (; v9 < a4; ++v9)
  {
    if ((int)v7 >= 2)
    {
      v29 = 0;
      v27 = 0uLL;
      v28 = v8;
      do
      {
        v30 = *(_DWORD *)v28;
        v28 += 2;
        result = HIWORD(v30);
        v27 = vmlal_s16(vmlal_s16(v27, vuzp1_s16(*(int16x4_t *)(*(_QWORD *)(a6 + 8 * v29) + 4 * (2 * v9)), (int16x4_t)0x200000002000), vdup_n_s16(v30)), vuzp1_s16(*(int16x4_t *)(*(_QWORD *)(a6 + 8 * v29 + 8) + 4 * (2 * v9)), (int16x4_t)0x200000002000), vdup_n_s16(result));
        v31 = v29 + 4;
        v29 += 2;
      }
      while (v31 <= v7);
    }
    else
    {
      v27 = 0uLL;
      v28 = v8;
    }
    if ((v7 & 1) != 0)
    {
      v32 = vld1_dup_s16(v28);
      v27 = vmlal_s16(v27, vuzp1_s16(*(int16x4_t *)(*(_QWORD *)(a6 + 8 * ((int)v7 - 1)) + 4 * (2 * v9)), (int16x4_t)0x200000002000), v32);
    }
    *(int32x2_t *)v27.i8 = vadd_s32(*(int32x2_t *)v27.i8, (int32x2_t)0x200000002000);
    v33 = (int16x8_t)vshrq_n_s32(v27, 0xEuLL);
    *(int16x4_t *)v33.i8 = vqmovn_s32((int32x4_t)v33);
    *(int8x8_t *)v33.i8 = vqmovun_s16(v33);
    v6->i8[0] = v33.i8[0];
    v6->i8[1] = vmaxv_u8(*(uint8x8_t *)v33.i8);
    v6 = (uint8x8_t *)((char *)v6 + 2);
  }
  return result;
}

int *resample_horizontal<unsigned char,int,1,false>(int *result, unsigned int a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, int16x8_t a10, uint64_t a11, unsigned int a12, uint64_t a13, uint64_t *a14, int *a15, int a16)
{
  int16x8_t v16;
  int16x4_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint16x8_t v29;
  unint64_t v30;
  unsigned int v31;
  int8x16_t v32;
  uint64_t v33;
  _BOOL4 v35;
  uint64_t v36;
  int8x16_t v37;
  int32x4_t v38;
  _DWORD *v39;
  unint64_t v40;
  int *v41;
  uint8x8_t *v42;
  uint8x8_t *v43;
  int8x16_t *v44;
  int v45;
  unint64_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int8x16_t v49;
  int8x16_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  uint8x8_t *v55;
  unint64_t v56;
  int8x16_t *v57;
  int32x4_t v58;
  uint64_t v59;
  int32x4_t v60;
  unint64_t v61;
  uint8x8_t v62;
  int16x4_t v63;
  int16x4_t v64;
  __int32 v65;
  int v66;
  unsigned int v67;
  unint64_t v68;
  unsigned int v69;
  uint8x8_t v70;
  BOOL v71;
  int8x8_t v72;
  int16x4_t v73;
  int16x4_t v74;
  int16x4_t v75;
  int16x4_t v76;
  __int32 v77;

  if ((int)a12 >= 1 && a16 >= 1)
  {
    v18 = 0;
    v19 = *a14;
    v20 = *a15;
    v21 = a12;
    v22 = 2 * a2 + 8;
    v23 = (char *)result + v22 * a12;
    v24 = *(_DWORD *)&v23[-v22 + 4] + *(_DWORD *)&v23[-v22];
    if (v20 < v24)
      v24 = *a15;
    if (a2 <= 3)
      v25 = (2 * a2 + 23) / (2 * a2 + 8);
    else
      v25 = 1;
    v26 = a12 - v25;
    v27 = a2 > 7;
    v28 = a2 & 7;
    if ((a2 & 7) != 0)
      v27 = 0;
    else
      v28 = 8;
    v29 = (uint16x8_t)vdupq_n_s16(v28);
    v30 = ((a2 + 8 * (v27 << 31 >> 31)) & 0xFFFFFFF8) + (unint64_t)(((_BYTE)v28 + 7) & 0x18);
    if (a2 >= 8)
      v31 = 8;
    else
      v31 = a2;
    v32 = (int8x16_t)vcgtq_u16((uint16x8_t)vdupq_n_s16(v31), (uint16x8_t)xmmword_185004910);
    v33 = a16;
    v35 = a2 == (__int16)a2 && v21 > v25;
    if (v26 <= 1)
      v36 = 1;
    else
      v36 = v21 - v25;
    v37 = (int8x16_t)vcgtq_u16(v29, (uint16x8_t)xmmword_185004910);
    v38.i64[0] = 0xFF000000FFLL;
    v38.i64[1] = 0xFF000000FFLL;
    do
    {
      v39 = *(_DWORD **)(a13 + 8 * v18);
      v40 = 0;
      if (v35)
      {
        v41 = result;
        while (1)
        {
          v42 = (uint8x8_t *)(v19 + *v41);
          v43 = (uint8x8_t *)((char *)v42 + v30);
          if ((unint64_t)v42 + v30 > v19 + v24)
            break;
          if (v42 >= v43)
          {
            v47 = 0uLL;
            v48 = 0uLL;
          }
          else
          {
            v44 = (int8x16_t *)(v41 + 2);
            v45 = v41[1];
            v46 = (unint64_t)&v43[-1];
            v47 = 0uLL;
            v48 = 0uLL;
            while ((unint64_t)v42 < v46)
            {
              v49 = *v44++;
              v50 = v49;
              *(uint8x8_t *)v49.i8 = *v42++;
              a10 = (int16x8_t)vandq_s8(v50, v32);
              v16 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v49.i8);
              v48 = vmlal_high_s16(v48, v16, a10);
              v47 = vmlal_s16(v47, *(int16x4_t *)v16.i8, *(int16x4_t *)a10.i8);
              v45 -= 8;
            }
            if (v45 >= 1)
            {
              a10 = (int16x8_t)vandq_s8(*v44, v37);
              v16 = (int16x8_t)vmovl_u8(*v42);
              v48 = vmlal_high_s16(v48, v16, a10);
              v47 = vmlal_s16(v47, *(int16x4_t *)v16.i8, *(int16x4_t *)a10.i8);
            }
          }
          *v39++ = vmaxq_s32(vminq_s32((int32x4_t)((vaddvq_s32(vaddq_s32(v47, v48)) + 0x2000) >> 14), v38), (int32x4_t)0).u32[0];
          ++v40;
          v41 = (int *)((char *)v41 + v22);
          if (v40 == v36)
          {
            v40 = v36;
            break;
          }
        }
      }
      else
      {
        v41 = result;
      }
      if (v40 < v21)
      {
        do
        {
          v51 = *v41;
          if ((int)v51 >= v24)
            v52 = v24;
          else
            v52 = *v41;
          v53 = v24 - v52;
          if (v41[1] >= v53)
            v54 = v53;
          else
            v54 = v41[1];
          if (v54 < 1)
          {
            v58 = 0uLL;
            v60 = 0uLL;
          }
          else
          {
            v55 = (uint8x8_t *)(v19 + v51);
            v56 = (unint64_t)&v55[-2] + v54;
            v57 = (int8x16_t *)(v41 + 2);
            v58 = 0uLL;
            if ((unint64_t)v55 >= v56)
            {
              LODWORD(v59) = v54;
              v60 = 0uLL;
LABEL_77:
              v66 = (_DWORD)v59 << 16;
              v67 = v59;
              while (2)
              {
                v68 = v23 - (char *)v57;
                if ((unint64_t)(v23 - (char *)v57) >= 0x10)
                  v68 = 16;
                if (v68 < 0x10)
                {
                  if (v67 >= 4)
                  {
                    if (v67 == 4)
                    {
                      v16.i16[0] = 0;
                      v16.i8[2] = 0;
                      v16.i8[3] = 0;
                      v16.i8[4] = 0;
                      v16.i8[5] = 0;
                      v16.i8[6] = 0;
                      v16.i8[7] = 0;
                    }
                    else if (v67 == 5)
                    {
                      v16.i16[0] = v57->i16[4];
                    }
                    else
                    {
                      if (v67 == 6)
                      {
                        v74 = 0;
                      }
                      else
                      {
                        if ((v59 & 1) != 0)
                          v77 = 0;
                        else
                          v77 = v57->u16[7];
                        v74.i32[0] = v57->u16[6];
                        v74.i32[1] = v77;
                      }
                      v16.i16[0] = v57->i16[4];
                      v16.i16[2] = v57->i16[5];
                      *(int16x4_t *)v16.i8 = vuzp1_s16(*(int16x4_t *)v16.i8, v74);
                    }
                    a10.i64[0] = v57->i64[0];
                    a10.i64[1] = v16.i64[0];
                    goto LABEL_84;
                  }
                  if (v67 == 1)
                  {
                    a10.i16[0] = v57->i16[0];
                  }
                  else
                  {
                    if (v67 == 2)
                      v73 = 0;
                    else
                      v73 = (int16x4_t)v57->u16[2];
                    v16.i16[0] = v57->i16[0];
                    v16.i16[2] = v57->i16[1];
                    *(int16x4_t *)a10.i8 = vuzp1_s16(*(int16x4_t *)v16.i8, v73);
                  }
                  a10.i64[1] = 0;
                  ++v57;
                }
                else
                {
                  v69 = v66 >> 16;
                  if (v66 >> 16 >= 8)
                    v69 = 8;
                  a10 = (int16x8_t)vandq_s8(*v57, (int8x16_t)vcgtq_s16(vdupq_n_s16(v69), (int16x8_t)xmmword_185004910));
LABEL_84:
                  ++v57;
                  if (v67 >= 8)
                  {
                    v70 = *v55;
                    goto LABEL_86;
                  }
                  if (v67 >= 4)
                  {
                    if (v67 == 4)
                    {
                      v72 = 0;
                    }
                    else if (v67 == 5)
                    {
                      v72 = (int8x8_t)v55->u8[4];
                    }
                    else
                    {
                      if (v67 == 6)
                        v76 = 0;
                      else
                        v76 = (int16x4_t)v55->u8[6];
                      v17.i8[0] = v55->i8[4];
                      v17.i8[4] = v55->i8[5];
                      v72 = (int8x8_t)vuzp1_s16(v17, v76);
                    }
                    v17.i32[0] = v55->i32[0];
                    v17 = (int16x4_t)vmovl_u8((uint8x8_t)v17).u64[0];
                    v70 = (uint8x8_t)vuzp1_s8((int8x8_t)v17, v72);
                    goto LABEL_86;
                  }
                }
                if (v67 == 1)
                {
                  v17.i8[2] = 0;
                  v17.i8[3] = 0;
                  v17.i8[4] = 0;
                  v17.i8[5] = 0;
                  v17.i8[6] = 0;
                  v17.i8[7] = 0;
                  v17.i16[0] = v55->u8[0];
                }
                else
                {
                  if (v67 == 2)
                    v75 = 0;
                  else
                    v75 = (int16x4_t)v55->u8[2];
                  v17.i8[0] = v55->i8[0];
                  v17.i8[4] = v55->i8[1];
                  v17 = vuzp1_s16(v17, v75);
                }
                v70.i32[1] = 0;
                v70.i8[0] = v17.i8[0];
                v70.i8[1] = v17.i8[2];
                v70.i8[2] = v17.i8[4];
                v70.i8[3] = v17.i8[6];
LABEL_86:
                ++v55;
                v16 = (int16x8_t)vmovl_u8(v70);
                v60 = vmlal_high_s16(v60, v16, a10);
                v58 = vmlal_s16(v58, *(int16x4_t *)v16.i8, *(int16x4_t *)a10.i8);
                v66 -= 0x80000;
                v71 = __OFSUB__(v67, 8);
                v67 -= 8;
                if (((v67 & 0x80000000) != 0) ^ v71 | (v67 == 0))
                  goto LABEL_126;
                continue;
              }
            }
            v59 = v54;
            v60 = 0uLL;
            do
            {
              v61 = v23 - (char *)v57;
              if ((unint64_t)(v23 - (char *)v57) >= 0x10)
                v61 = 16;
              if (v61 < 0x10)
              {
                if ((_DWORD)v59)
                {
                  if (v59 < 4)
                  {
                    if (v59 == 1)
                    {
                      a10.i16[0] = v57->i16[0];
                    }
                    else
                    {
                      if ((_DWORD)v59 == 2)
                        v63 = 0;
                      else
                        v63 = (int16x4_t)v57->u16[2];
                      v16.i16[0] = v57->i16[0];
                      v16.i16[2] = v57->i16[1];
                      *(int16x4_t *)a10.i8 = vuzp1_s16(*(int16x4_t *)v16.i8, v63);
                    }
                    a10.i64[1] = 0;
                  }
                  else
                  {
                    if (v59 == 4)
                    {
                      v16.i16[0] = 0;
                      v16.i8[2] = 0;
                      v16.i8[3] = 0;
                      v16.i8[4] = 0;
                      v16.i8[5] = 0;
                      v16.i8[6] = 0;
                      v16.i8[7] = 0;
                    }
                    else if (v59 == 5)
                    {
                      v16.i16[0] = v57->i16[4];
                    }
                    else
                    {
                      if ((_DWORD)v59 == 6)
                      {
                        v64 = 0;
                      }
                      else
                      {
                        if ((v54 & 1) != 0)
                          v65 = 0;
                        else
                          v65 = v57->u16[7];
                        v64.i32[0] = v57->u16[6];
                        v64.i32[1] = v65;
                      }
                      v16.i16[0] = v57->i16[4];
                      v16.i16[2] = v57->i16[5];
                      *(int16x4_t *)v16.i8 = vuzp1_s16(*(int16x4_t *)v16.i8, v64);
                    }
                    a10.i64[0] = v57->i64[0];
                    a10.i64[1] = v16.i64[0];
                  }
                }
                else
                {
                  a10 = 0uLL;
                }
              }
              else
              {
                a10 = (int16x8_t)vandq_s8(*v57, v32);
              }
              v62 = *v55++;
              ++v57;
              v16 = (int16x8_t)vmovl_u8(v62);
              v60 = vmlal_high_s16(v60, v16, a10);
              v58 = vmlal_s16(v58, *(int16x4_t *)v16.i8, *(int16x4_t *)a10.i8);
              v59 -= 8;
            }
            while ((unint64_t)v55 < v56);
            if ((int)v59 >= 1)
              goto LABEL_77;
          }
LABEL_126:
          *v39++ = vmaxq_s32(vminq_s32((int32x4_t)((vaddvq_s32(vaddq_s32(v58, v60)) + 0x2000) >> 14), v38), (int32x4_t)0).u32[0];
          ++v40;
          v41 = (int *)((char *)v41 + v22);
        }
        while (v40 != v21);
      }
      v19 += v20;
      ++v18;
    }
    while (v18 != v33);
  }
  return result;
}

int *resample_horizontal<unsigned char,int,2,false>(int *result, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int *a7, int a8)
{
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  _BOOL4 v20;
  unsigned int v21;
  unint64_t v22;
  uint16x8_t v23;
  unsigned int v24;
  int8x16_t v25;
  uint64_t v26;
  _BOOL4 v28;
  uint64_t v29;
  int8x16_t v30;
  int32x2_t *v31;
  unint64_t v32;
  int *v33;
  uint8x16_t *v34;
  uint8x16_t *v35;
  int8x16_t *v36;
  int v37;
  unint64_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int8x16_t v43;
  int16x8_t v44;
  uint8x16_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int8x16_t v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  uint8x16_t *v54;
  unint64_t v55;
  int8x16_t *v56;
  uint64_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  unint64_t v62;
  uint8x16_t v63;
  int16x8_t v64;
  int16x4_t v65;
  int16x4_t v66;
  __int32 v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  uint8x16_t v74;
  int16x8_t v75;
  int16x4_t v76;
  int16x4_t v77;
  int8x8_t v78;
  int8x8_t v79;
  __int8 v80;
  __int8 v81;
  __int8 v82;
  int16x4_t v83;
  __int32 v84;
  int8x16_t v85;

  if (a4 >= 1 && a8 >= 1)
  {
    v11 = 0;
    v12 = *a6;
    v13 = *a7;
    v14 = v13 >> 1;
    v15 = a4;
    v16 = 2 * a2;
    v17 = v16 + 8;
    v18 = (char *)result + (v16 + 8) * a4;
    if (v13 >> 1 >= *(int *)&v18[-v16 - 4] + (uint64_t)*(int *)&v18[-v16 - 8])
      v14 = *(int *)&v18[-v16 - 4] + (uint64_t)*(int *)&v18[-v16 - 8];
    if (a2 <= 3)
      v19 = (2 * a2 + 23) / (2 * a2 + 8);
    else
      v19 = 1;
    v20 = a2 > 7;
    v21 = a2 & 7;
    if ((a2 & 7) != 0)
      v20 = 0;
    else
      v21 = 8;
    v22 = ((2 * (_BYTE)v21 + 15) & 0x30) + (unint64_t)(16 * ((a2 >> 3) - v20));
    v23 = (uint16x8_t)vdupq_n_s16(v21);
    if (a2 >= 8)
      v24 = 8;
    else
      v24 = a2;
    v25 = (int8x16_t)vcgtq_u16((uint16x8_t)vdupq_n_s16(v24), (uint16x8_t)xmmword_185004910);
    v26 = a8;
    v28 = a2 == (__int16)a2 && v15 > v19;
    if (v15 - v19 <= 1)
      v29 = 1;
    else
      v29 = v15 - v19;
    v30 = (int8x16_t)vcgtq_u16(v23, (uint16x8_t)xmmword_185004910);
    do
    {
      v31 = *(int32x2_t **)(a5 + 8 * v11);
      v32 = 0;
      if (v28)
      {
        v33 = result;
        while (1)
        {
          v34 = (uint8x16_t *)(v12 + 2 * *v33);
          v35 = (uint8x16_t *)((char *)v34 + v22);
          if ((unint64_t)v34->u64 + v22 > 2 * v14 + v12)
            break;
          if (v34 >= v35)
          {
            v39 = 0uLL;
            v40 = 0uLL;
            v41 = 0uLL;
            v42 = 0uLL;
          }
          else
          {
            v36 = (int8x16_t *)(v33 + 2);
            v37 = v33[1];
            v38 = (unint64_t)&v35[-1];
            v39 = 0uLL;
            v40 = 0uLL;
            v41 = 0uLL;
            v42 = 0uLL;
            while ((unint64_t)v34 < v38)
            {
              v43 = *v36++;
              v44 = (int16x8_t)vandq_s8(v43, v25);
              v45 = *v34++;
              v10 = (int16x8_t)vmovl_high_u8(v45);
              v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v45.i8);
              v46 = vzip2q_s16(v44, v44);
              v8 = vzip1q_s16(v44, v44);
              v42 = vmlal_high_s16(v42, v10, v46);
              v40 = vmlal_high_s16(v40, v9, v8);
              v41 = vmlal_s16(v41, *(int16x4_t *)v10.i8, *(int16x4_t *)v46.i8);
              v39 = vmlal_s16(v39, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
              v37 -= 8;
            }
            if (v37 >= 1)
            {
              v47 = (int16x8_t)vandq_s8(*v36, v30);
              v10 = (int16x8_t)vmovl_high_u8(*v34);
              v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v34->i8);
              v48 = vzip2q_s16(v47, v47);
              v8 = vzip1q_s16(v47, v47);
              v42 = vmlal_high_s16(v42, v10, v48);
              v40 = vmlal_high_s16(v40, v9, v8);
              v41 = vmlal_s16(v41, *(int16x4_t *)v10.i8, *(int16x4_t *)v48.i8);
              v39 = vmlal_s16(v39, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
            }
          }
          v49 = (int8x16_t)vaddq_s32(vaddq_s32(v39, v41), vaddq_s32(v40, v42));
          *v31++ = vmax_s32(vmin_s32(vshr_n_s32(vadd_s32((int32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL), vadd_s32(*(int32x2_t *)v49.i8, (int32x2_t)0x200000002000)), 0xEuLL), (int32x2_t)0xFF000000FFLL), 0);
          ++v32;
          v33 = (int *)((char *)v33 + v17);
          if (v32 == v29)
          {
            v32 = v29;
            break;
          }
        }
      }
      else
      {
        v33 = result;
      }
      if (v32 < v15)
      {
        do
        {
          v50 = v33[1];
          v51 = *v33;
          if ((int)v51 >= (int)v14)
            v52 = v14;
          else
            v52 = *v33;
          v53 = v14 - v52;
          if (v50 >= v53)
            v50 = v53;
          if (v50 < 1)
          {
            v58 = 0uLL;
            v59 = 0uLL;
            v60 = 0uLL;
            v61 = 0uLL;
          }
          else
          {
            v54 = (uint8x16_t *)(v12 + 2 * v51);
            v55 = (unint64_t)&v54[-1] + 2 * v50;
            v56 = (int8x16_t *)(v33 + 2);
            if ((unint64_t)v54 >= v55)
            {
              v58 = 0uLL;
              v59 = 0uLL;
              v60 = 0uLL;
              v61 = 0uLL;
              goto LABEL_77;
            }
            v57 = v50;
            v58 = 0uLL;
            v59 = 0uLL;
            v60 = 0uLL;
            v61 = 0uLL;
            do
            {
              v62 = v18 - (char *)v56;
              if ((unint64_t)(v18 - (char *)v56) >= 0x10)
                v62 = 16;
              if (v62 < 0x10)
              {
                if ((_DWORD)v57)
                {
                  if (v57 < 4)
                  {
                    if (v57 == 1)
                    {
                      v8.i16[0] = v56->i16[0];
                    }
                    else
                    {
                      if ((_DWORD)v57 == 2)
                        v65 = 0;
                      else
                        v65 = (int16x4_t)v56->u16[2];
                      v9.i16[0] = v56->i16[0];
                      v9.i16[2] = v56->i16[1];
                      *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v65);
                    }
                    v8.i64[1] = 0;
                  }
                  else
                  {
                    if (v57 == 4)
                    {
                      v9.i16[0] = 0;
                      v9.i8[2] = 0;
                      v9.i8[3] = 0;
                      v9.i8[4] = 0;
                      v9.i8[5] = 0;
                      v9.i8[6] = 0;
                      v9.i8[7] = 0;
                    }
                    else if (v57 == 5)
                    {
                      v9.i16[0] = v56->i16[4];
                    }
                    else
                    {
                      if ((_DWORD)v57 == 6)
                      {
                        v66 = 0;
                      }
                      else
                      {
                        if ((v50 & 1) != 0)
                          v67 = 0;
                        else
                          v67 = v56->u16[7];
                        v66.i32[0] = v56->u16[6];
                        v66.i32[1] = v67;
                      }
                      v9.i16[0] = v56->i16[4];
                      v9.i16[2] = v56->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v66);
                    }
                    v8.i64[0] = v56->i64[0];
                    v8.i64[1] = v9.i64[0];
                  }
                }
                else
                {
                  v8 = 0uLL;
                }
              }
              else
              {
                v8 = (int16x8_t)vandq_s8(*v56, v25);
              }
              ++v56;
              v63 = *v54++;
              v10 = (int16x8_t)vmovl_high_u8(v63);
              v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v63.i8);
              v64 = vzip2q_s16(v8, v8);
              v8 = vzip1q_s16(v8, v8);
              v61 = vmlal_high_s16(v61, v10, v64);
              v60 = vmlal_s16(v60, *(int16x4_t *)v10.i8, *(int16x4_t *)v64.i8);
              v59 = vmlal_high_s16(v59, v9, v8);
              v58 = vmlal_s16(v58, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
              v57 -= 8;
            }
            while ((unint64_t)v54 < v55);
            if ((int)v57 >= 1)
            {
              v50 = v57;
LABEL_77:
              v68 = v50 + 8;
              v69 = 2 * v50;
              v70 = v50 << 16;
              while (2)
              {
                v71 = v68 - 8;
                v72 = v18 - (char *)v56;
                if ((unint64_t)(v18 - (char *)v56) >= 0x10)
                  v72 = 16;
                if (v72 < 0x10)
                {
                  if ((unint64_t)v71 >= 4)
                  {
                    if ((_DWORD)v68 == 12)
                    {
                      v9.i16[0] = 0;
                      v9.i8[2] = 0;
                      v9.i8[3] = 0;
                      v9.i8[4] = 0;
                      v9.i8[5] = 0;
                      v9.i8[6] = 0;
                      v9.i8[7] = 0;
                    }
                    else if ((_DWORD)v68 == 13)
                    {
                      v9.i16[0] = v56->i16[4];
                    }
                    else
                    {
                      if (v68 == 14)
                      {
                        v77 = 0;
                      }
                      else
                      {
                        if ((v50 & 1) != 0)
                          v84 = 0;
                        else
                          v84 = v56->u16[7];
                        v77.i32[0] = v56->u16[6];
                        v77.i32[1] = v84;
                      }
                      v9.i16[0] = v56->i16[4];
                      v9.i16[2] = v56->i16[5];
                      *(int16x4_t *)v9.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v77);
                    }
                    v8.i64[0] = v56->i64[0];
                    v8.i64[1] = v9.i64[0];
                    goto LABEL_84;
                  }
                  if (v68 == 9)
                  {
                    v8.i16[0] = v56->i16[0];
                  }
                  else
                  {
                    if (v68 == 10)
                      v76 = 0;
                    else
                      v76 = (int16x4_t)v56->u16[2];
                    v9.i16[0] = v56->i16[0];
                    v9.i16[2] = v56->i16[1];
                    *(int16x4_t *)v8.i8 = vuzp1_s16(*(int16x4_t *)v9.i8, v76);
                  }
                  v8.i64[1] = 0;
                  ++v56;
                }
                else
                {
                  v73 = v70 >> 16;
                  if (v70 >> 16 >= 8)
                    v73 = 8;
                  v9 = *(int16x8_t *)v56;
                  v8 = (int16x8_t)vandq_s8(*v56, (int8x16_t)vcgtq_s16(vdupq_n_s16(v73), (int16x8_t)xmmword_185004910));
LABEL_84:
                  ++v56;
                  if ((unint64_t)v71 >= 8)
                  {
                    v74 = *v54;
                    goto LABEL_86;
                  }
                }
                if (v71 < 4)
                {
                  if (v71 < 2)
                  {
                    if (v68 == 9)
                    {
                      v80 = 0;
                      v81 = 0;
                    }
                    else
                    {
                      v80 = v54->i8[2];
                      v81 = v54->i8[3];
                    }
                    v74.i32[1] = 0;
                    v74.i16[0] = v54->i16[0];
                    v74.i8[2] = v80;
                    v74.i8[3] = v81;
                  }
                  else
                  {
                    if (v68 == 10)
                    {
                      v79 = 0;
                    }
                    else
                    {
                      if (v68 == 11)
                        v83 = 0;
                      else
                        v83 = (int16x4_t)v54->u8[6];
                      v10.i8[0] = v54->i8[4];
                      v10.i8[4] = v54->i8[5];
                      v79 = (int8x8_t)vuzp1_s16(*(int16x4_t *)v10.i8, v83);
                    }
                    v10.i32[0] = v54->i32[0];
                    *(int8x8_t *)v74.i8 = vuzp1_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v10.i8), v79);
                  }
                  v74.i64[1] = 0;
                }
                else
                {
                  if ((v69 & 0xFFFFFFFE) == 8)
                  {
                    v10.i16[0] = 0;
                    v10.i8[2] = 0;
                    v10.i8[3] = 0;
                    v10.i8[4] = 0;
                    v10.i8[5] = 0;
                    v10.i8[6] = 0;
                    v10.i8[7] = 0;
                  }
                  else if ((unint64_t)(v69 & 0xFFFFFFFE) - 8 < 4)
                  {
                    if (v68 == 13)
                      v82 = 0;
                    else
                      v82 = v54->i8[10];
                    v10.i8[4] = 0;
                    v10.i8[5] = 0;
                    v10.i8[6] = 0;
                    v10.i8[7] = 0;
                    v10.i16[0] = v54->i16[4];
                    v10.i8[2] = v82;
                    v10.i8[3] = 0;
                  }
                  else
                  {
                    if (v68 == 14)
                    {
                      v78 = 0;
                    }
                    else
                    {
                      if (v68 == 15)
                      {
                        v9.i16[0] = 0;
                        v9.i8[2] = 0;
                        v9.i8[3] = 0;
                        v9.i8[4] = 0;
                        v9.i8[5] = 0;
                        v9.i8[6] = 0;
                        v9.i8[7] = 0;
                      }
                      else
                      {
                        v9.i8[0] = v54->i8[14];
                        v9.i8[4] = v54->i8[15];
                      }
                      v10.i8[0] = v54->i8[12];
                      v10.i8[4] = v54->i8[13];
                      v78 = (int8x8_t)vuzp1_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v9.i8);
                    }
                    v10.i32[0] = v54->i32[2];
                    *(int8x8_t *)v10.i8 = vuzp1_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v10.i8), v78);
                  }
                  v74.i64[0] = v54->i64[0];
                  v74.i64[1] = v10.i64[0];
                }
LABEL_86:
                ++v54;
                v10 = (int16x8_t)vmovl_high_u8(v74);
                v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v74.i8);
                v75 = vzip2q_s16(v8, v8);
                v8 = vzip1q_s16(v8, v8);
                v60 = vmlal_s16(v60, *(int16x4_t *)v10.i8, *(int16x4_t *)v75.i8);
                v59 = vmlal_high_s16(v59, v9, v8);
                v61 = vmlal_high_s16(v61, v10, v75);
                v58 = vmlal_s16(v58, *(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
                v69 -= 16;
                v70 -= 0x80000;
                v68 -= 8;
                if (v71 <= 8)
                  break;
                continue;
              }
            }
          }
          v85 = (int8x16_t)vaddq_s32(vaddq_s32(v58, v60), vaddq_s32(v59, v61));
          *v31++ = vmax_s32(vmin_s32(vshr_n_s32(vadd_s32((int32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL), vadd_s32(*(int32x2_t *)v85.i8, (int32x2_t)0x200000002000)), 0xEuLL), (int32x2_t)0xFF000000FFLL), 0);
          ++v32;
          v33 = (int *)((char *)v33 + v17);
        }
        while (v32 != v15);
      }
      v12 += v13;
      ++v11;
    }
    while (v11 != v26);
  }
  return result;
}

void CGBlt_swapBytes(int a1, unsigned int a2, void *a3, void *a4, int a5, int a6, __int16 a7)
{
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  if (a1 >= 1 && (int)a2 >= 1)
  {
    if ((a7 & 0xF000) == 0x2000)
    {
      *(_DWORD *)permuteMap = 66051;
      src.data = a3;
      src.height = a2;
      src.width = a1 >> 2;
      src.rowBytes = a5;
      dest.data = a4;
      dest.height = a2;
      dest.width = src.width;
      dest.rowBytes = a6;
      vImagePermuteChannels_ARGB8888(&src, &dest, permuteMap, 0);
    }
    else if ((a7 & 0xF000) == 0x1000)
    {
      src.data = a3;
      src.height = a2;
      src.width = a1 >> 1;
      src.rowBytes = a5;
      dest.data = a4;
      dest.height = a2;
      dest.width = src.width;
      dest.rowBytes = a6;
      vImageByteSwap_Planar16U(&src, &dest, 0);
    }
    else if (a3 != a4)
    {
      CGBlt_copyBytes(a1, a2, (char *)a3, (char *)a4, a5, a6);
    }
  }
}

uint64_t img_raw_data(uint64_t a1, signed int a2, uint64_t a3, _QWORD *a4, _DWORD *a5)
{
  uint64_t v10;
  uint64_t image_pointer;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  _DWORD *i;
  int v22;
  int v23;
  int v24;
  _QWORD *v25;
  int *v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;

  v10 = *(_QWORD *)(a1 + 96);
  if (v10 == -1)
  {
    v17 = *(_QWORD **)(a1 + 184);
    if (!v17)
      return 0;
    v18 = v17[5];
    if (v18 != v17[6] || v18 < 1)
      return 0;
    v20 = 0;
    for (i = (_DWORD *)(v17[9] + 12); ; i += 4)
    {
      v22 = *(i - 2);
      v23 = a2 - v22;
      if (a2 >= v22)
      {
        v24 = *i + v22;
        if (v24 > a2)
          break;
      }
      if (v18 == ++v20)
        return 0;
    }
    v31 = *(_QWORD *)(v17[11] + 8 * v20);
    v32 = (int)v31 * (uint64_t)v23;
    if (v32 != (int)v32)
      return 0;
    v33 = *(_QWORD *)(v17[10] + 8 * v20) + v32;
    if (a4[1] == *a4)
    {
      a4[1] = v33;
      a5[1] = v31;
    }
    *a4 = v33;
    *a5 = v31;
    v34 = a3 + a2;
    if ((int)a3 + a2 >= v24)
      v34 = v24;
    *(_QWORD *)(a1 + 88) = v34;
    return (v34 - a2);
  }
  else
  {
    if (v10)
    {
      v26 = *(int **)(a1 + 136);
      v25 = *(_QWORD **)(a1 + 144);
      if (v10 == 2 && a4[1] && (*(_DWORD *)(a1 + 44) & 0xFFFFFFFE) == 8)
      {
        v27 = v26[1];
        v28 = v27 * (uint64_t)a2;
        if (v28 != (int)v28)
          return 0;
        a4[1] = v25[1] + v28;
        a5[1] = v27;
      }
      v29 = *v26;
      v30 = v29 * (uint64_t)a2;
      if (v30 == (int)v30)
      {
        *a4 = *v25 + v30;
        *a5 = v29;
        v16 = (int)a3 + a2;
LABEL_28:
        *(_QWORD *)(a1 + 88) = v16;
        return a3;
      }
      return 0;
    }
    image_pointer = get_image_pointer((_QWORD *)a1);
    result = 0;
    if ((int)a3 >= 1 && (a2 & 0x80000000) == 0 && image_pointer)
    {
      v13 = *(_QWORD *)(a1 + 136);
      v14 = (int)v13 * (unint64_t)a2;
      if (v14 == (int)v14 && (v14 & 0x80000000) == 0)
      {
        v15 = image_pointer + v14;
        if (a4[1] == *a4)
        {
          a4[1] = v15;
          a5[1] = v13;
        }
        *a4 = v15;
        *a5 = v13;
        v16 = (a3 + a2);
        goto LABEL_28;
      }
      return 0;
    }
  }
  return result;
}

uint64_t CGGlyphLockLockGlyphBitmaps(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return CGGlyphBuilderLockBitmaps(*a1, a2, a3, a4, a5, a6, a7, a8);
}

void CGRectDivide(CGRect rect, CGRect *slice, CGRect *remainder, CGFloat amount, CGRectEdge edge)
{
  double v8;
  double v9;
  CGSize size;
  double width;
  double v16;
  double v17;

  v8 = fabs(rect.origin.x);
  v9 = fabs(rect.origin.y);
  if (rect.origin.x == INFINITY || rect.origin.y == INFINITY || v8 == INFINITY || v9 == INFINITY)
  {
    *slice = CGRectNull;
    *remainder = CGRectNull;
  }
  else
  {
    if (rect.size.width < 0.0 || rect.size.height < 0.0)
      rect = CGRectStandardize(rect);
    *remainder = rect;
    size = remainder->size;
    slice->origin = remainder->origin;
    slice->size = size;
    width = 0.0;
    if (amount >= 0.0)
      width = amount;
    if ((edge | 2) == 2)
    {
      if (width > rect.size.width)
        width = rect.size.width;
      slice->size.width = width;
      v16 = remainder->size.width - width;
      remainder->size.width = v16;
      if (edge)
        slice->origin.x = v16 + slice->origin.x;
      else
        remainder->origin.x = width + remainder->origin.x;
    }
    else
    {
      if (width > rect.size.height)
        width = rect.size.height;
      slice->size.height = width;
      v17 = remainder->size.height - width;
      remainder->size.height = v17;
      if (edge == CGRectMinYEdge)
        remainder->origin.y = width + remainder->origin.y;
      else
        slice->origin.y = v17 + slice->origin.y;
    }
  }
}

CFTypeRef icc_create_icc_profile_description(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  CFTypeRef result;
  unint64_t *v11;
  const void *v12;
  uint64_t v13;
  const __CFString *v14;

  v8 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(v8 + 20) != 6)
    _CGHandleAssert("icc_create_icc_profile_description", 165, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpace_ICC.c", "s->state->type == kCGColorSpaceICCBased", "Colorspace must be ICC based. type = %d", a6, a7, a8, *(_DWORD *)(v8 + 20));
  v9 = *(_QWORD *)(v8 + 88);
  v12 = *(const void **)(v9 + 40);
  v11 = (unint64_t *)(v9 + 40);
  result = v12;
  if (v12)
    return CFRetain(result);
  v13 = *(_QWORD *)(*(_QWORD *)(v8 + 88) + 16);
  if (copy_icc_profile_description_cglibrarypredicate != -1)
    dispatch_once(&copy_icc_profile_description_cglibrarypredicate, &__block_literal_global_45_6744);
  v14 = (const __CFString *)copy_icc_profile_description_f(v13);
  if (!v14)
    v14 = CFSTR("<no description>");
  while (!__ldxr(v11))
  {
    if (!__stxr((unint64_t)v14, v11))
      goto LABEL_11;
  }
  __clrex();
  CFRelease(v14);
LABEL_11:
  result = (CFTypeRef)*v11;
  if (*v11)
    return CFRetain(result);
  return result;
}

void *fstream_zalloc(uint64_t a1, unsigned int a2, unsigned int a3)
{
  return malloc_type_malloc(a3 * (unint64_t)a2, 0x86B5D5E7uLL);
}

double CGColorMatrixGetMatrix@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v4;
  double result;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (CGColorMatrixGetMatrix_cglibrarypredicate != -1)
    dispatch_once(&CGColorMatrixGetMatrix_cglibrarypredicate, &__block_literal_global_15);
  v7 = 0u;
  v8 = 0u;
  v6 = 0u;
  CGColorMatrixGetMatrix_f(&v6, a1);
  v4 = v7;
  *a2 = v6;
  a2[1] = v4;
  result = *(double *)&v8;
  a2[2] = v8;
  return result;
}

CGGradientRef CGGradientCreateWithColorComponents(CGColorSpaceRef space, const CGFloat *components, const CGFloat *locations, size_t count)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return (CGGradientRef)CGGradientCreateWithColorComponentsAndOptions(space, (uint64_t)components, (uint64_t)locations, count, 0, v4, v5, v6);
}

void CGContextShowGlyphsAtPositions(CGContextRef c, const CGGlyph *glyphs, const CGPoint *Lpositions, size_t count)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  unsigned int v13;
  CGContextRef v14;

  if (!c)
  {
    v14 = 0;
LABEL_13:
    handle_invalid_context((char)"CGContextShowGlyphsAtPositions", (uint64_t)v14, (uint64_t)Lpositions, count, v4, v5, v6, v7);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v14 = c;
    goto LABEL_13;
  }
  if (glyphs)
  {
    if (Lpositions)
    {
      if (count)
      {
        v12 = *(_QWORD *)(*((_QWORD *)c + 12) + 136);
        if (*(_QWORD *)(v12 + 8))
        {
          if (*(double *)(v12 + 16) != 0.0)
          {
            v13 = *(char *)(v12 + 1);
            if (v13 < 4)
            {
              draw_glyphs_17005((uint64_t)c, (uint64_t)glyphs, (uint64_t)Lpositions, count);
              return;
            }
            if (v13 - 4 >= 3)
            {
              if (v13 != 7)
                return;
            }
            else
            {
              draw_glyphs_17005((uint64_t)c, (uint64_t)glyphs, (uint64_t)Lpositions, count);
            }
            clip_to_glyphs((uint64_t)c, (__int16 *)glyphs, (__int128 *)Lpositions, count);
          }
        }
      }
    }
  }
}

BOOL CGColorSpaceIsHDR(CGColorSpaceRef a1)
{
  uint64_t v1;

  if (a1)
  {
    v1 = *((_QWORD *)a1 + 3);
    if (*(_BYTE *)(v1 + 16))
      LOBYTE(a1) = 1;
    else
      LOBYTE(a1) = *(_BYTE *)(v1 + 17) != 0;
  }
  return (char)a1;
}

uint64_t CGStyleGetType(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 20);
  return result;
}

uint64_t CGClipGetPath(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8) == 2)
    return *(_QWORD *)(a1 + 24);
  else
    return 0;
}

_DWORD *ARGB32_pattern(uint64_t a1, _DWORD *a2, unsigned int a3, int a4, float *a5, float a6)
{
  unsigned int v8;
  char *v9;

  v8 = PIXELCONSTANT_19503(*(float **)(*(_QWORD *)a1 + 64), a4, a5, a6);
  if (a2 && a3 > 3 || (a2 = malloc_type_malloc(0x34uLL, 0x705560E0uLL)) != 0)
  {
    *(_OWORD *)a2 = xmmword_185004F10;
    a2[6] = 0;
    a2[12] = v8 & 0xFF00FF | (BYTE1(v8) << 24) | (HIBYTE(v8) << 8);
    *((_QWORD *)a2 + 2) = 1;
    if ((_BYTE)v8 == 0xFF)
      v9 = 0;
    else
      v9 = (char *)(a2 + 12);
    *((_QWORD *)a2 + 4) = a2 + 12;
    *((_QWORD *)a2 + 5) = v9;
  }
  return a2;
}

_DWORD *rgba32_pattern(uint64_t a1, _DWORD *a2, unsigned int a3, int a4, float *a5, float a6)
{
  int v8;
  char *v9;

  v8 = PIXELCONSTANT_19503(*(float **)(*(_QWORD *)a1 + 64), a4, a5, a6);
  if (a2 && a3 > 3 || (a2 = malloc_type_malloc(0x34uLL, 0x705560E0uLL)) != 0)
  {
    *(_OWORD *)a2 = xmmword_185004F10;
    a2[6] = 0;
    a2[12] = v8;
    *((_QWORD *)a2 + 2) = 1;
    if ((_BYTE)v8 == 0xFF)
      v9 = 0;
    else
      v9 = (char *)(a2 + 12);
    *((_QWORD *)a2 + 4) = a2 + 12;
    *((_QWORD *)a2 + 5) = v9;
  }
  return a2;
}

void CGPDFOperatorTableSetCallback(CGPDFOperatorTableRef table, const char *name, CGPDFOperatorCallback callback)
{
  size_t v6;
  int v7;

  if (table && name)
  {
    v6 = strlen(name);
    v7 = CGPDFGetOperatorForName((char *)name, v6, 0);
    if (v7)
      *((_QWORD *)table + v7 + 2) = callback;
    else
  }
}

BOOL CGPDFScannerScan(CGPDFScannerRef scanner)
{
  CGPDFScannerRef v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  if (!scanner)
    return (char)scanner;
  v1 = scanner;
  pthread_once(&CGPDFScannerScan_once_control, (void (*)(void))CGPDFScannerScanInit);
  if (pthread_getspecific(scanner_bailout_key))
  {
LABEL_25:
    LOBYTE(scanner) = 0;
    return (char)scanner;
  }
  v2 = (char *)pthread_getspecific(scanner_frame_key) + 1;
  if ((unint64_t)v2 >= 0x33)
  {
    pthread_setspecific(scanner_bailout_key, (const void *)1);
    goto LABEL_25;
  }
  pthread_setspecific(scanner_frame_key, v2);
  *((_DWORD *)v1 + 28) = 0;
  *((_QWORD *)v1 + 13) = 0;
  *((_DWORD *)v1 + 22) = 0;
  *((_QWORD *)v1 + 5) = 0;
  if (pdf_scanner_advance_stream(v1))
  {
    v27 = 0;
    v25 = 0u;
    v26 = 0u;
    while (2)
    {
      v9 = (uint64_t (*)(_QWORD))*((_QWORD *)v1 + 15);
      if (!v9
        || (v10 = *((_DWORD *)v1 + 28) + 1, *((_DWORD *)v1 + 28) = v10, (v10 & 0x3FF) != 0)
        || (v9(*((_QWORD *)v1 + 16)) & 1) != 0)
      {
        if (!*((_BYTE *)v1 + 136))
        {
          v11 = pdf_lexer_scan(*((_QWORD *)v1 + 8), (uint64_t)&v25, v3, v4, v5, v6, v7, v8);
          switch(v11)
          {
            case 0:
            case 15:
              if (pdf_scanner_advance_stream(v1))
                continue;
              v18 = *((unsigned int *)v1 + 18);
              if ((v18 & 0x80000000) != 0)
                goto LABEL_42;
              if ((_DWORD)v18)
              {
                v21 = 0;
                do
                {
                  v22 = *((_QWORD *)v1 + 10) + v21;
                  if ((*(_DWORD *)(v22 + 8) - 5) <= 4)
                    pdf_object_release_compound_value(v22);
                  v21 += 40;
                }
                while (40 * v18 != v21);
              }
              goto LABEL_43;
            case 1:
              pdf_scanner_handle_choke((uint64_t)&v25);
              goto LABEL_22;
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 8:
            case 13:
              goto LABEL_11;
            case 7:
              pdf_scanner_handle_xname((uint64_t)v1);
              continue;
            case 9:
            case 11:
              if (!pdf_scanner_read_compound_object((uint64_t)v1, (uint64_t)&v25, 0, *((unsigned int *)v1 + 18), 0, v6, v7, v8))continue;
LABEL_11:
              v12 = *((_DWORD *)v1 + 18);
              v13 = *((int *)v1 + 19);
              if (v12 >= (int)v13)
              {
                *((_DWORD *)v1 + 19) = 2 * v13;
                v14 = (char *)malloc_type_realloc(*((void **)v1 + 10), 80 * v13, 0x103204077D336DFuLL);
                *((_QWORD *)v1 + 10) = v14;
                v12 = *((_DWORD *)v1 + 18);
              }
              else
              {
                v14 = (char *)*((_QWORD *)v1 + 10);
              }
              v15 = &v14[40 * v12];
              v16 = v25;
              v17 = v26;
              *((_QWORD *)v15 + 4) = v27;
              *(_OWORD *)v15 = v16;
              *((_OWORD *)v15 + 1) = v17;
              ++*((_DWORD *)v1 + 18);
              continue;
            default:
              pdf_error("encountered unexpected object type: %d.", v11);
LABEL_22:
              if ((DWORD2(v25) - 5) <= 4)
                pdf_object_release_compound_value((uint64_t)&v25);
              continue;
          }
        }
      }
      else
      {
        *((_BYTE *)v1 + 136) = 1;
      }
      break;
    }
    v18 = *((unsigned int *)v1 + 18);
    if ((v18 & 0x80000000) != 0)
    {
LABEL_42:
      pdf_error("Fatal: Attempted to remove more than args stack count. Argument stack is inconsistent.");
    }
    else if ((_DWORD)v18)
    {
      v19 = 0;
      do
      {
        v20 = *((_QWORD *)v1 + 10) + v19;
        if ((*(_DWORD *)(v20 + 8) - 5) <= 4)
          pdf_object_release_compound_value(v20);
        v19 += 40;
      }
      while (40 * v18 != v19);
    }
LABEL_43:
    *((_DWORD *)v1 + 18) -= v18;
  }
  v23 = (char *)pthread_getspecific(scanner_frame_key) - 1;
  pthread_setspecific(scanner_frame_key, v23);
  if (!v23)
    pthread_setspecific(scanner_bailout_key, 0);
  LOBYTE(scanner) = 1;
  return (char)scanner;
}

uint64_t pdf_lexer_scan(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  BOOL i;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  unint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  size_t v47;
  char *v48;
  char v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  size_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  char v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  unint64_t v75;
  unint64_t v76;
  _BYTE *v77;
  size_t v78;
  unint64_t v79;
  unint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 *v84;
  int v85;
  char v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 *v90;
  int v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  void *v95;
  size_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int8 *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  _BYTE *v106;
  size_t v107;
  unint64_t v108;
  unint64_t v109;
  void *v110;
  size_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int8 *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  size_t v118;
  size_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int8 *v122;
  int v123;
  double v124;
  uint64_t v125;
  double v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  intmax_t v132;
  intmax_t v133;
  unint64_t v134;
  unint64_t v135;
  _BYTE *v136;
  size_t v137;
  char *v138;
  char v139;
  char v140;
  unint64_t v141;
  unint64_t v142;
  void *v143;
  size_t v144;
  unsigned __int16 *v145;
  int v146;
  int v147;
  _DWORD *v149;
  int *v150;
  int v151;
  int v152;
  uint64_t v154;
  int *v155;
  int v157;
  int v158;
  uint64_t *v160;
  uint64_t v161;
  int v162;
  int v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  void *v169;
  size_t v170;
  uint64_t v171;
  char v172;
  char *endptr;
  char nptr[77];
  uint64_t v175;

  v175 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a2 + 8) = 1;
  if (!a1)
    return 0;
  v8 = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = a2;
  while (1)
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_QWORD *)(v10 + 120);
    if (!v11)
    {
      if (!CGPDFSourceRefill(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8))
        return 0;
      v11 = *(_QWORD *)(v10 + 120);
    }
    v12 = *(_BYTE **)(v10 + 128);
    *(_QWORD *)(v10 + 120) = v11 - 1;
    *(_QWORD *)(v10 + 128) = v12 + 1;
    v13 = *v12;
    if (v13 > 0x25)
      break;
    if (((1 << v13) & 0x100003601) == 0)
    {
      if (v13 != 37)
        break;
      skip_comment((_QWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if (*v12 > 0x5Au)
  {
    if (*v12 > 0x7Au)
    {
      if ((_DWORD)v13 == 123 || (_DWORD)v13 == 125)
      {
        v41 = *(_QWORD *)(a1 + 24);
        v42 = *(_QWORD *)(a1 + 32);
        if (v41 >= v42)
        {
          v107 = 2 * v42 + 128;
          *(_QWORD *)(a1 + 32) = v107;
          v43 = malloc_type_realloc(*(void **)(a1 + 40), v107, 0x33EA2F66uLL);
          *(_QWORD *)(a1 + 40) = v43;
          if (!v43)
            goto LABEL_332;
          v41 = *(_QWORD *)(a1 + 24);
        }
        else
        {
          v43 = *(_BYTE **)(a1 + 40);
        }
        *(_QWORD *)(a1 + 24) = v41 + 1;
        v43[v41] = v13;
        goto LABEL_286;
      }
    }
    else
    {
      if ((_DWORD)v13 == 91)
        return 11;
      if ((_DWORD)v13 == 93)
        return 12;
    }
    while (1)
    {
      while (1)
      {
LABEL_199:
        if ((v13 + 1) <= 0x3F && ((1 << (v13 + 1)) & 0xA001064200006C03) != 0
          || (v13 - 91) <= 0x22 && ((1 << (v13 - 91)) & 0x500000005) != 0)
        {
          CGPDFSourceUngetc(*(_QWORD **)(a1 + 16), v13);
          v115 = *(_QWORD *)(a1 + 24);
          switch(v115)
          {
            case 1:
              if (**(_BYTE **)(a1 + 40) != 82)
                goto LABEL_316;
              v14 = 18;
              break;
            case 3:
              v145 = *(unsigned __int16 **)(a1 + 40);
              v146 = *v145;
              v147 = *((unsigned __int8 *)v145 + 2);
              if (v146 != 25199 || v147 != 106)
                goto LABEL_316;
              v14 = 16;
              break;
            case 4:
              v149 = *(_DWORD **)(a1 + 40);
              if (*v149 == 1702195828)
              {
                v171 = *(_QWORD *)(a1 + 48);
                *(_DWORD *)(v171 + 8) = 2;
                *(_BYTE *)(v171 + 32) = 1;
                goto LABEL_329;
              }
              if (*v149 != 1819047278)
                goto LABEL_316;
              *(_DWORD *)(*(_QWORD *)(a1 + 48) + 8) = 1;
              v14 = 2;
              break;
            case 5:
              v150 = *(int **)(a1 + 40);
              v151 = *v150;
              v152 = *((unsigned __int8 *)v150 + 4);
              if (v151 != 1936482662 || v152 != 101)
                goto LABEL_316;
              v154 = *(_QWORD *)(a1 + 48);
              *(_DWORD *)(v154 + 8) = 2;
              *(_BYTE *)(v154 + 32) = 0;
LABEL_329:
              v14 = 3;
              break;
            case 6:
              v155 = *(int **)(a1 + 40);
              if (*v155 == 1868852837 && *((_WORD *)v155 + 2) == 27234)
              {
                v14 = 17;
              }
              else
              {
                v157 = *v155;
                v158 = *((unsigned __int16 *)v155 + 2);
                if (v157 != 1701999731 || v158 != 28001)
                  goto LABEL_316;
                v14 = 14;
              }
              break;
            case 9:
              v160 = *(uint64_t **)(a1 + 40);
              v161 = *v160;
              v162 = *((unsigned __int8 *)v160 + 8);
              if (v161 != 0x6165727473646E65 || v162 != 109)
                goto LABEL_316;
              v14 = 15;
              break;
            default:
LABEL_316:
              v164 = *(_DWORD *)(a1 + 56);
              if (v164 == 1)
              {
                *(_DWORD *)(*(_QWORD *)(a1 + 48) + 8) = 1;
                *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 40);
                *(_QWORD *)(a1 + 72) = v115;
              }
              else if (!v164)
              {
                v165 = *(_QWORD *)(a1 + 48);
                *(_DWORD *)(v165 + 8) = 5;
                *(_BYTE *)(v165 + 12) |= 1u;
                v166 = *(_QWORD *)(a1 + 48);
                *(_QWORD *)(v166 + 16) = 0;
                *(_QWORD *)(v166 + 24) = 0;
                *(_QWORD *)(v8 + 32) = strndup(*(const char **)(a1 + 40), *(_QWORD *)(a1 + 24));
              }
              v14 = 7;
              break;
          }
          return v14;
        }
        v108 = *(_QWORD *)(a1 + 24);
        v109 = *(_QWORD *)(a1 + 32);
        v110 = *(void **)(a1 + 40);
        if (v108 >= v109)
        {
          v111 = 2 * v109 + 128;
          *(_QWORD *)(a1 + 32) = v111;
          v110 = malloc_type_realloc(v110, v111, 0x33EA2F66uLL);
          *(_QWORD *)(a1 + 40) = v110;
          if (!v110)
            goto LABEL_332;
          v108 = *(_QWORD *)(a1 + 24);
        }
        *(_QWORD *)(a1 + 24) = v108 + 1;
        *((_BYTE *)v110 + v108) = v13;
        v112 = *(_QWORD *)(a1 + 16);
        v113 = *(_QWORD *)(v112 + 120);
        if (!v113)
          break;
LABEL_209:
        v114 = *(unsigned __int8 **)(v112 + 128);
        *(_QWORD *)(v112 + 120) = v113 - 1;
        *(_QWORD *)(v112 + 128) = v114 + 1;
        LODWORD(v13) = *v114;
      }
      LODWORD(v13) = -1;
      if (CGPDFSourceRefill(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8))
      {
        v113 = *(_QWORD *)(v112 + 120);
        goto LABEL_209;
      }
    }
  }
  switch(*v12)
  {
    case '(':
      v55 = 1;
      while (1)
      {
LABEL_88:
        v56 = *(_QWORD *)(a1 + 16);
        v57 = *(_QWORD *)(v56 + 120);
        if (!v57)
        {
          if (!CGPDFSourceRefill(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8))
            goto LABEL_325;
          v57 = *(_QWORD *)(v56 + 120);
        }
        v58 = *(unsigned __int8 **)(v56 + 128);
        *(_QWORD *)(v56 + 120) = v57 - 1;
        *(_QWORD *)(v56 + 128) = v58 + 1;
        v59 = *v58;
        if (v59 != 92)
          break;
        v60 = *(_QWORD *)(a1 + 16);
        v61 = *(_QWORD *)(v60 + 120);
        if (v61)
          goto LABEL_95;
        if (CGPDFSourceRefill(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8))
        {
          v61 = *(_QWORD *)(v60 + 120);
LABEL_95:
          v62 = *(unsigned __int8 **)(v60 + 128);
          *(_QWORD *)(v60 + 120) = v61 - 1;
          *(_QWORD *)(v60 + 128) = v62 + 1;
          v59 = *v62;
          if (v59 <= 0xC)
          {
            if (v59 != 10)
              goto LABEL_144;
            continue;
          }
          if (*v62 <= 0x2Fu)
          {
            if (v59 != 13)
              goto LABEL_144;
            v63 = *(_QWORD *)(a1 + 16);
            v64 = *(_QWORD *)(v63 + 120);
            if (v64)
            {
LABEL_101:
              v65 = *(unsigned __int8 **)(v63 + 128);
              *(_QWORD *)(v63 + 120) = v64 - 1;
              *(_QWORD *)(v63 + 128) = v65 + 1;
              a2 = *v65;
              if ((_DWORD)a2 == 10)
                continue;
            }
            else
            {
              if (CGPDFSourceRefill(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8))
              {
                v64 = *(_QWORD *)(v63 + 120);
                goto LABEL_101;
              }
              LODWORD(a2) = -1;
            }
            CGPDFSourceUngetc(*(_QWORD **)(a1 + 16), a2);
            continue;
          }
          if (*v62 <= 0x61u)
          {
            v66 = v59 - 48;
            if (v59 - 48 >= 8)
              goto LABEL_144;
            v67 = 0;
            while (1)
            {
              v68 = v67;
              v69 = *(_QWORD *)(a1 + 16);
              v70 = *(_QWORD *)(v69 + 120);
              if (!v70)
              {
                if (!CGPDFSourceRefill(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8))
                {
                  LODWORD(a2) = -1;
LABEL_137:
                  CGPDFSourceUngetc(*(_QWORD **)(a1 + 16), a2);
LABEL_138:
                  LOBYTE(v59) = v66;
LABEL_144:
                  v75 = *(_QWORD *)(a1 + 24);
                  v76 = *(_QWORD *)(a1 + 32);
                  v77 = *(_BYTE **)(a1 + 40);
                  if (v75 < v76)
                  {
LABEL_147:
                    *(_QWORD *)(a1 + 24) = v75 + 1;
                    v77[v75] = v59;
                    goto LABEL_88;
                  }
                  v78 = 2 * v76 + 128;
                  *(_QWORD *)(a1 + 32) = v78;
                  v77 = malloc_type_realloc(v77, v78, 0x33EA2F66uLL);
                  *(_QWORD *)(a1 + 40) = v77;
                  if (v77)
                  {
                    v75 = *(_QWORD *)(a1 + 24);
                    goto LABEL_147;
                  }
LABEL_332:
                  _CGHandleAssert("lex_grow_buffer", 55, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Reader/CGPDFLexer.c", "lexer->buffer != NULL", "lexer buffer missing", a6, a7, a8, v172);
                }
                v70 = *(_QWORD *)(v69 + 120);
              }
              v71 = *(unsigned __int8 **)(v69 + 128);
              *(_QWORD *)(v69 + 120) = v70 - 1;
              *(_QWORD *)(v69 + 128) = v71 + 1;
              a2 = *v71;
              if ((a2 - 56) <= 0xFFFFFFF7)
                goto LABEL_137;
              v66 = a2 + 8 * v66 - 48;
              v67 = 1;
              if ((v68 & 1) != 0)
                goto LABEL_138;
            }
          }
          if (*v62 <= 0x6Du)
          {
            if (v59 == 98)
            {
              LOBYTE(v59) = 8;
            }
            else if (v59 == 102)
            {
              LOBYTE(v59) = 12;
            }
            goto LABEL_144;
          }
          if (v59 != 110)
          {
            if (v59 == 114)
            {
              LOBYTE(v59) = 13;
            }
            else if (v59 == 116)
            {
              LOBYTE(v59) = 9;
            }
            goto LABEL_144;
          }
LABEL_143:
          LOBYTE(v59) = 10;
          goto LABEL_144;
        }
      }
      if (v59 != 13)
      {
        if (v59 == 40)
        {
          ++v55;
          goto LABEL_144;
        }
        if (v59 != 41)
          goto LABEL_144;
        if (v55)
        {
          if (--v55)
          {
            LOBYTE(v59) = 41;
            goto LABEL_144;
          }
          v14 = 8;
        }
        else
        {
          v167 = *(_QWORD *)(a1 + 24);
          v168 = *(_QWORD *)(a1 + 32);
          v169 = *(void **)(a1 + 40);
          if (v167 >= v168)
          {
            v170 = 2 * v168 + 128;
            *(_QWORD *)(a1 + 32) = v170;
            v169 = malloc_type_realloc(v169, v170, 0x33EA2F66uLL);
            *(_QWORD *)(a1 + 40) = v169;
            if (!v169)
              goto LABEL_332;
            v167 = *(_QWORD *)(a1 + 24);
          }
          *(_QWORD *)(a1 + 24) = v167 + 1;
          *((_BYTE *)v169 + v167) = 41;
LABEL_325:
          v14 = 1;
        }
        create_string_object(a1, 0);
        return v14;
      }
      v72 = *(_QWORD *)(a1 + 16);
      v73 = *(_QWORD *)(v72 + 120);
      if (v73)
        goto LABEL_130;
      if (CGPDFSourceRefill(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8))
      {
        v73 = *(_QWORD *)(v72 + 120);
LABEL_130:
        v74 = *(unsigned __int8 **)(v72 + 128);
        *(_QWORD *)(v72 + 120) = v73 - 1;
        *(_QWORD *)(v72 + 128) = v74 + 1;
        a2 = *v74;
        if ((_DWORD)a2 == 10)
          goto LABEL_143;
      }
      else
      {
        LODWORD(a2) = -1;
      }
      CGPDFSourceUngetc(*(_QWORD **)(a1 + 16), a2);
      goto LABEL_143;
    case ')':
      v79 = *(_QWORD *)(a1 + 24);
      v80 = *(_QWORD *)(a1 + 32);
      if (v79 >= v80)
      {
        v118 = 2 * v80 + 128;
        *(_QWORD *)(a1 + 32) = v118;
        v81 = malloc_type_realloc(*(void **)(a1 + 40), v118, 0x33EA2F66uLL);
        *(_QWORD *)(a1 + 40) = v81;
        if (!v81)
          goto LABEL_332;
        v79 = *(_QWORD *)(a1 + 24);
      }
      else
      {
        v81 = *(_BYTE **)(a1 + 40);
      }
      *(_QWORD *)(a1 + 24) = v79 + 1;
      v81[v79] = 41;
      goto LABEL_286;
    case '+':
    case '-':
    case '.':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      endptr = 0;
      if ((_DWORD)v13 == 45 || (_DWORD)v13 == 43)
      {
        v16 = *(_QWORD *)(a1 + 16);
        v17 = *(_QWORD *)(v16 + 120);
        if (!v17)
        {
          if (!CGPDFSourceRefill(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8))
          {
            v25 = 0;
LABEL_75:
            v44 = *(_QWORD *)(a1 + 24);
            v45 = *(_QWORD *)(a1 + 32);
            if (v44 >= v45)
            {
              v47 = 2 * v45 + 128;
              *(_QWORD *)(a1 + 32) = v47;
              v46 = malloc_type_realloc(*(void **)(a1 + 40), v47, 0x33EA2F66uLL);
              *(_QWORD *)(a1 + 40) = v46;
              if (!v46)
                goto LABEL_332;
              v44 = *(_QWORD *)(a1 + 24);
            }
            else
            {
              v46 = *(_BYTE **)(a1 + 40);
            }
            *(_QWORD *)(a1 + 24) = v44 + 1;
            v46[v44] = v13;
LABEL_80:
            if (v25)
            {
              v48 = nptr;
              do
              {
                v50 = *v48++;
                v49 = v50;
                v51 = *(_QWORD *)(a1 + 24);
                v52 = *(_QWORD *)(a1 + 32);
                v53 = *(void **)(a1 + 40);
                if (v51 >= v52)
                {
                  v54 = 2 * v52 + 128;
                  *(_QWORD *)(a1 + 32) = v54;
                  v53 = malloc_type_realloc(v53, v54, 0x33EA2F66uLL);
                  *(_QWORD *)(a1 + 40) = v53;
                  if (!v53)
                    goto LABEL_332;
                  v51 = *(_QWORD *)(a1 + 24);
                }
                *(_QWORD *)(a1 + 24) = v51 + 1;
                *((_BYTE *)v53 + v51) = v49;
                --v25;
              }
              while (v25);
            }
LABEL_86:
            skip_to_delimiter((uint64_t *)a1, v18, a3, a4, a5, a6, a7, a8);
LABEL_286:
            create_string_object(a1, 0);
            return 1;
          }
          v17 = *(_QWORD *)(v16 + 120);
        }
        v19 = *(unsigned __int8 **)(v16 + 128);
        *(_QWORD *)(v16 + 120) = v17 - 1;
        *(_QWORD *)(v16 + 128) = v19 + 1;
        v20 = *v19;
      }
      else
      {
        v20 = v13;
        LODWORD(v13) = 0;
      }
      for (i = (_DWORD)v20 == 48; (_DWORD)v20 == 48; v20 = *v24)
      {
        v22 = *(_QWORD *)(a1 + 16);
        v23 = *(_QWORD *)(v22 + 120);
        if (!v23)
        {
          if (!CGPDFSourceRefill(*(_QWORD *)(a1 + 16), v20, a3, a4, a5, a6, a7, a8))
          {
            v26 = 0;
            LODWORD(v20) = -1;
            v40 = -1;
            goto LABEL_69;
          }
          v23 = *(_QWORD *)(v22 + 120);
        }
        v24 = *(unsigned __int8 **)(v22 + 128);
        *(_QWORD *)(v22 + 120) = v23 - 1;
        *(_QWORD *)(v22 + 128) = v24 + 1;
      }
      if ((v20 - 48) > 9)
      {
        v25 = 0;
        if ((_DWORD)v20 != 46)
        {
          v40 = -1;
          v26 = 0;
          goto LABEL_73;
        }
        v26 = 0;
        goto LABEL_43;
      }
      v25 = 0;
      v26 = 0;
      do
      {
        if (v25 <= 0x4B)
          nptr[v25++] = v20;
        v26 = 10 * v26 + v20 - 48;
        v27 = *(_QWORD *)(a1 + 16);
        v28 = *(_QWORD *)(v27 + 120);
        if (!v28)
        {
          if (!CGPDFSourceRefill(*(_QWORD *)(a1 + 16), v20, a3, a4, a5, a6, a7, a8))
          {
            v40 = -1;
            LODWORD(v20) = -1;
            goto LABEL_227;
          }
          v28 = *(_QWORD *)(v27 + 120);
        }
        v29 = *(unsigned __int8 **)(v27 + 128);
        *(_QWORD *)(v27 + 120) = v28 - 1;
        *(_QWORD *)(v27 + 128) = v29 + 1;
        v20 = *v29;
      }
      while ((v20 - 48) < 0xA);
      if ((_DWORD)v20 != 46)
      {
        v40 = -1;
        goto LABEL_227;
      }
      i = 1;
      if (v25 <= 0x4B)
LABEL_43:
        nptr[v25++] = 46;
      v30 = *(_QWORD *)(a1 + 16);
      v31 = *(_QWORD *)(v30 + 120);
      if (!v31)
      {
        if (!CGPDFSourceRefill(*(_QWORD *)(a1 + 16), v20, a3, a4, a5, a6, a7, a8))
          goto LABEL_71;
        v31 = *(_QWORD *)(v30 + 120);
      }
      v32 = *(unsigned __int8 **)(v30 + 128);
      *(_QWORD *)(v30 + 120) = v31 - 1;
      *(_QWORD *)(v30 + 128) = v32 + 1;
      v20 = *v32;
      if ((_DWORD)v20 != 45)
        goto LABEL_52;
      v33 = *(_QWORD *)(a1 + 16);
      v34 = *(_QWORD *)(v33 + 120);
      if (!v34)
      {
        if (CGPDFSourceRefill(*(_QWORD *)(a1 + 16), v20, a3, a4, a5, a6, a7, a8))
        {
          v34 = *(_QWORD *)(v33 + 120);
          goto LABEL_51;
        }
LABEL_71:
        LODWORD(v20) = -1;
        goto LABEL_72;
      }
LABEL_51:
      v35 = *(unsigned __int8 **)(v33 + 128);
      *(_QWORD *)(v33 + 120) = v34 - 1;
      *(_QWORD *)(v33 + 128) = v35 + 1;
      v20 = *v35;
LABEL_52:
      if ((v20 - 48) > 9)
      {
LABEL_72:
        v40 = v25;
LABEL_73:
        if (i)
          goto LABEL_227;
        CGPDFSourceUngetc(*(_QWORD **)(a1 + 16), v20);
        if (!(_DWORD)v13)
          goto LABEL_80;
        goto LABEL_75;
      }
      v36 = v25;
      while (1)
      {
        if (v36 <= 0x4B)
          nptr[v36++] = v20;
        v26 = 10 * v26 + v20 - 48;
        v37 = *(_QWORD *)(a1 + 16);
        v38 = *(_QWORD *)(v37 + 120);
        if (v38)
          goto LABEL_59;
        if (!CGPDFSourceRefill(*(_QWORD *)(a1 + 16), v20, a3, a4, a5, a6, a7, a8))
          break;
        v38 = *(_QWORD *)(v37 + 120);
LABEL_59:
        v39 = *(unsigned __int8 **)(v37 + 128);
        *(_QWORD *)(v37 + 120) = v38 - 1;
        *(_QWORD *)(v37 + 128) = v39 + 1;
        v20 = *v39;
        if ((v20 - 48) >= 0xA)
          goto LABEL_226;
      }
      LODWORD(v20) = -1;
LABEL_226:
      v40 = v25;
      v25 = v36;
LABEL_227:
      if (v25 > 9)
      {
LABEL_239:
        v129 = (v20 + 1);
        if (v129 <= 0x3F)
        {
          if (((1 << (v20 + 1)) & 0x200006C03) != 0)
            goto LABEL_248;
          if (((1 << (v20 + 1)) & 0xA001064000000000) != 0)
          {
LABEL_247:
            CGPDFSourceUngetc(*(_QWORD **)(a1 + 16), v20);
LABEL_248:
            nptr[v25] = 0;
            if (v40 != -1)
            {
              if (v25 == 1)
              {
                v126 = 0.0;
                if (nptr[0] == 46)
                  goto LABEL_261;
              }
              goto LABEL_259;
            }
            if (v25 > 9)
            {
              *__error() = 0;
              v132 = strtoimax_l(nptr, &endptr, 10, 0);
              if (endptr == nptr || *endptr)
                goto LABEL_333;
              v133 = v132;
              if (*__error() == 34)
              {
LABEL_259:
                v126 = strtod_l(nptr, &endptr, 0);
                if (endptr != nptr && !*endptr)
                {
LABEL_261:
                  v125 = *(_QWORD *)(a1 + 48);
                  *(_DWORD *)(v125 + 8) = 4;
                  if ((_DWORD)v13 == 45)
                    v126 = -v126;
LABEL_263:
                  *(double *)(v125 + 32) = v126;
                  return 5;
                }
LABEL_333:
                abort();
              }
              v130 = *(_QWORD *)(a1 + 48);
              *(_DWORD *)(v130 + 8) = 3;
              if ((_DWORD)v13 == 45)
                v131 = -v133;
              else
                v131 = v133;
            }
            else
            {
              v130 = *(_QWORD *)(a1 + 48);
              *(_DWORD *)(v130 + 8) = 3;
              if ((_DWORD)v13 == 45)
                v131 = -v26;
              else
                v131 = v26;
            }
            *(_QWORD *)(v130 + 32) = v131;
            return 4;
          }
          if (v129 == 47)
          {
            if ((v40 & 0x80000000) != 0)
              _CGHandleAssert("read_number", 823, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Reader/CGPDFLexer.c", "fraction_start >= 0", "unexpected program flow. fraction start = %d", a6, a7, a8, v40);
LABEL_264:
            CGPDFSourceUngetc(*(_QWORD **)(a1 + 16), v20);
            if ((_DWORD)v13)
            {
              v134 = *(_QWORD *)(a1 + 24);
              v135 = *(_QWORD *)(a1 + 32);
              if (v134 >= v135)
              {
                v137 = 2 * v135 + 128;
                *(_QWORD *)(a1 + 32) = v137;
                v136 = malloc_type_realloc(*(void **)(a1 + 40), v137, 0x33EA2F66uLL);
                *(_QWORD *)(a1 + 40) = v136;
                if (!v136)
                  goto LABEL_332;
                v134 = *(_QWORD *)(a1 + 24);
              }
              else
              {
                v136 = *(_BYTE **)(a1 + 40);
              }
              *(_QWORD *)(a1 + 24) = v134 + 1;
              v136[v134] = v13;
            }
            v138 = nptr;
            do
            {
              v140 = *v138++;
              v139 = v140;
              v141 = *(_QWORD *)(a1 + 24);
              v142 = *(_QWORD *)(a1 + 32);
              v143 = *(void **)(a1 + 40);
              if (v141 >= v142)
              {
                v144 = 2 * v142 + 128;
                *(_QWORD *)(a1 + 32) = v144;
                v143 = malloc_type_realloc(v143, v144, 0x33EA2F66uLL);
                *(_QWORD *)(a1 + 40) = v143;
                if (!v143)
                  goto LABEL_332;
                v141 = *(_QWORD *)(a1 + 24);
              }
              *(_QWORD *)(a1 + 24) = v141 + 1;
              *((_BYTE *)v143 + v141) = v139;
              --v25;
            }
            while (v25);
            goto LABEL_86;
          }
        }
        if ((v20 - 91) > 0x22 || ((1 << (v20 - 91)) & 0x500000005) == 0)
          goto LABEL_264;
        goto LABEL_247;
      }
      if (v20 > 0x20 || ((1 << v20) & 0x100002400) == 0)
      {
        if (!v25)
        {
LABEL_69:
          nptr[0] = 48;
          v25 = 1;
        }
        goto LABEL_239;
      }
      if ((v40 & 0x80000000) == 0)
      {
        v124 = read_number_powers_of_10[v25 - v40] * (double)v26;
        v125 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v125 + 8) = 4;
        v126 = -v124;
        if ((_DWORD)v13 != 45)
          v126 = v124;
        goto LABEL_263;
      }
      if ((_DWORD)v13 == 45)
        v127 = -v26;
      else
        v127 = v26;
      v128 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v128 + 8) = 3;
      *(_QWORD *)(v128 + 32) = v127;
      return 4;
    case '/':
      v82 = *(_QWORD *)(a1 + 16);
      v83 = *(_QWORD *)(v82 + 120);
      if (v83)
        goto LABEL_153;
      if (CGPDFSourceRefill(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8))
      {
        v83 = *(_QWORD *)(v82 + 120);
LABEL_153:
        v84 = *(unsigned __int8 **)(v82 + 128);
        *(_QWORD *)(v82 + 120) = v83 - 1;
        *(_QWORD *)(v82 + 128) = v84 + 1;
        v85 = *v84;
      }
      else
      {
        v85 = -1;
      }
LABEL_154:
      if (v85 > 46)
      {
        if (((v85 - 47) > 0x2E || ((1 << (v85 - 47)) & 0x50000000A001) == 0)
          && v85 != 123
          && v85 != 125)
        {
          goto LABEL_181;
        }
LABEL_213:
        CGPDFSourceUngetc(*(_QWORD **)(a1 + 16), v85);
      }
      else
      {
        if (v85 > 31)
        {
          switch(v85)
          {
            case ' ':
              goto LABEL_214;
            case '#':
              v85 = 0;
              v86 = 1;
              break;
            case '%':
            case '(':
            case ')':
              goto LABEL_213;
            default:
              goto LABEL_181;
          }
          while (1)
          {
            v87 = v86;
            v88 = *(_QWORD *)(a1 + 16);
            v89 = *(_QWORD *)(v88 + 120);
            if (!v89)
            {
              if (!CGPDFSourceRefill(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8))
              {
                v91 = -1;
LABEL_180:
                pdf_error("invalid #-escape sequence.");
                CGPDFSourceUngetc(*(_QWORD **)(a1 + 16), v91);
                LOBYTE(v85) = 35;
                goto LABEL_181;
              }
              v89 = *(_QWORD *)(v88 + 120);
            }
            v90 = *(unsigned __int8 **)(v88 + 128);
            *(_QWORD *)(v88 + 120) = v89 - 1;
            *(_QWORD *)(v88 + 128) = v90 + 1;
            v91 = *v90;
            if ((v91 - 48) >= 0xA)
            {
              if ((v91 - 65) >= 6)
              {
                if ((v91 - 97) >= 6)
                  goto LABEL_180;
                v92 = -87;
              }
              else
              {
                v92 = -55;
              }
            }
            else
            {
              v92 = -48;
            }
            v86 = 0;
            v85 = v91 + 16 * v85 + v92;
            if ((v87 & 1) == 0)
            {
              if ((v85 - 256) < 0xFFFFFF01)
              {
                create_string_object(a1, 0);
                goto LABEL_286;
              }
LABEL_181:
              v93 = *(_QWORD *)(a1 + 24);
              v94 = *(_QWORD *)(a1 + 32);
              v95 = *(void **)(a1 + 40);
              if (v93 >= v94)
              {
                v96 = 2 * v94 + 128;
                *(_QWORD *)(a1 + 32) = v96;
                v95 = malloc_type_realloc(v95, v96, 0x33EA2F66uLL);
                *(_QWORD *)(a1 + 40) = v95;
                if (!v95)
                  goto LABEL_332;
                v93 = *(_QWORD *)(a1 + 24);
              }
              *(_QWORD *)(a1 + 24) = v93 + 1;
              *((_BYTE *)v95 + v93) = v85;
              v97 = *(_QWORD *)(a1 + 16);
              v98 = *(_QWORD *)(v97 + 120);
              if (!v98)
              {
                v85 = -1;
                if (!CGPDFSourceRefill(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8))
                  goto LABEL_154;
                v98 = *(_QWORD *)(v97 + 120);
              }
              v99 = *(unsigned __int8 **)(v97 + 128);
              *(_QWORD *)(v97 + 120) = v98 - 1;
              *(_QWORD *)(v97 + 128) = v99 + 1;
              v85 = *v99;
              goto LABEL_154;
            }
          }
        }
        if ((v85 + 1) >= 2 && (v85 - 9) >= 2 && (v85 - 12) >= 2)
          goto LABEL_181;
      }
LABEL_214:
      v116 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v116 + 8) = 5;
      *(_BYTE *)(v116 + 12) |= 1u;
      v117 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(v117 + 16) = 0;
      *(_QWORD *)(v117 + 24) = 0;
      *(_QWORD *)(v8 + 32) = strndup(*(const char **)(a1 + 40), *(_QWORD *)(a1 + 24));
      return 6;
    case '<':
      v100 = *(_QWORD *)(a1 + 16);
      v101 = *(_QWORD *)(v100 + 120);
      if (v101)
        goto LABEL_191;
      if (CGPDFSourceRefill(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8))
      {
        v101 = *(_QWORD *)(v100 + 120);
LABEL_191:
        v102 = *(unsigned __int8 **)(v100 + 128);
        *(_QWORD *)(v100 + 120) = v101 - 1;
        *(_QWORD *)(v100 + 128) = v102 + 1;
        v103 = *v102;
        if ((_DWORD)v103 == 60)
          return 9;
      }
      else
      {
        v103 = 0xFFFFFFFFLL;
      }
      return read_hex_string((_QWORD *)a1, v103, a3, a4, a5, a6, a7, a8);
    case '>':
      v104 = *(_QWORD *)(a1 + 24);
      v105 = *(_QWORD *)(a1 + 32);
      if (v104 >= v105)
      {
        v119 = 2 * v105 + 128;
        *(_QWORD *)(a1 + 32) = v119;
        v106 = malloc_type_realloc(*(void **)(a1 + 40), v119, 0x33EA2F66uLL);
        *(_QWORD *)(a1 + 40) = v106;
        if (!v106)
          goto LABEL_332;
        v104 = *(_QWORD *)(a1 + 24);
      }
      else
      {
        v106 = *(_BYTE **)(a1 + 40);
      }
      *(_QWORD *)(a1 + 24) = v104 + 1;
      v106[v104] = 62;
      v120 = *(_QWORD *)(a1 + 16);
      v121 = *(_QWORD *)(v120 + 120);
      if (v121)
        goto LABEL_223;
      if (CGPDFSourceRefill(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8))
      {
        v121 = *(_QWORD *)(v120 + 120);
LABEL_223:
        v122 = *(unsigned __int8 **)(v120 + 128);
        *(_QWORD *)(v120 + 120) = v121 - 1;
        *(_QWORD *)(v120 + 128) = v122 + 1;
        v123 = *v122;
        if (v123 == 62)
          return 10;
      }
      else
      {
        v123 = -1;
      }
      CGPDFSourceUngetc(*(_QWORD **)(a1 + 16), v123);
      goto LABEL_286;
    default:
      goto LABEL_199;
  }
}

_QWORD *CGPDFSourceUngetc(_QWORD *result, int a2)
{
  char v2;
  _QWORD *v3;
  size_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  if (result)
  {
    v2 = a2;
    if (a2 != -1)
    {
      v3 = result;
      result = (_QWORD *)result[18];
      if (result)
      {
        v4 = v3[17];
        if (v3[15] >= v4)
        {
          if (result == (_QWORD *)((char *)v3 + 153))
          {
            v11 = (char *)malloc_type_malloc(0x80uLL, 0x566C45D1uLL);
            result = (_QWORD *)__CFSetLastAllocationEventName();
            if (!v11)
              return result;
            v12 = 0;
            v3[17] = 128;
            v3[18] = v11;
            *((_BYTE *)v3 + 152) = 1;
            v5 = v11 + 96;
            do
            {
              v5[v12] = *((_BYTE *)v3 + v12 + 153);
              ++v12;
            }
            while (v12 != 32);
          }
          else
          {
            result = malloc_type_realloc(result, 2 * v4, 0x68DD979uLL);
            if (!result)
              return result;
            v8 = result;
            v5 = (char *)result + v4;
            result = memmove((char *)result + v4, result, v4);
            v3[17] = 2 * v4;
            v3[18] = v8;
          }
        }
        else
        {
          v5 = (char *)v3[16];
        }
        v3[16] = v5 - 1;
        *(v5 - 1) = v2;
        ++v3[15];
      }
      else
      {
        *((_BYTE *)v3 + 208) = 0;
        v6 = v3[11];
        v7 = v3[16];
        if (v6 && v7 > v6 && *(unsigned __int8 *)(v7 - 1) == a2)
        {
          ++v3[15];
          v3[16] = v7 - 1;
        }
        else
        {
          *((_BYTE *)v3 + 184) = a2;
          v9 = v3 + 23;
          v10 = *(v9 - 8);
          v9[1] = v7;
          v9[2] = v10;
          *(v9 - 6) = 32;
          *(v9 - 5) = (char *)v9 - 31;
          *((_BYTE *)v9 - 32) = 0;
          *(v9 - 8) = 1;
          *(v9 - 7) = v9;
        }
      }
    }
  }
  return result;
}

void pdf_scanner_handle_xname(uint64_t a1)
{
  char *operator_name_string;
  int v3;
  size_t v4;
  int v5;
  void (*v6)(uint64_t, _QWORD);
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  size_t v18;

  v18 = 0;
  operator_name_string = (char *)pdf_lexer_get_operator_name_string(*(_QWORD *)(a1 + 64), &v18);
  v3 = *(_DWORD *)(a1 + 72);
  v17 = 0;
  v4 = v18;
  v5 = CGPDFGetOperatorForName(operator_name_string, v18, &v17);
  if (v5)
  {
    v6 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 24) + 8 * v5);
    if (!v6)
      goto LABEL_18;
    v7 = *(_QWORD *)(a1 + 144);
    if (!v7 || *(_QWORD *)(v7 + 8))
    {
LABEL_5:
      v6(a1, *(_QWORD *)(a1 + 16));
      v8 = *(_DWORD *)(a1 + 72);
      v9 = v8;
      v10 = v3 - v8;
      if (v3 > v8)
      {
        v11 = 40 * v8;
        do
        {
          v12 = *(_QWORD *)(a1 + 80) + v11;
          if ((*(_DWORD *)(v12 + 8) - 5) <= 4)
            pdf_object_release_compound_value(v12);
          v11 += 40;
          --v10;
        }
        while (v10);
        v9 = *(_DWORD *)(a1 + 72);
      }
      goto LABEL_19;
    }
    if (operator_name_string)
    {
      if (!strncmp(operator_name_string, "EMC", v4))
        goto LABEL_5;
      if (!strncmp(operator_name_string, "q", v4))
        goto LABEL_5;
      v13 = strncmp(operator_name_string, "Q", v4);
      v9 = v3;
      if (!v13)
        goto LABEL_5;
    }
    else
    {
LABEL_18:
      v9 = v3;
    }
LABEL_19:
    v14 = v17 - v3 + v9;
    if (v14 >= 1)
    {
      do
      {
        v15 = __OFSUB__(v9--, 1);
        if (v9 < 0 != v15)
          break;
        v16 = *(_QWORD *)(a1 + 80);
        if ((*(_DWORD *)(v16 + 40 * v9 + 8) - 5) <= 4)
        {
          pdf_object_release_compound_value(v16 + 40 * v9);
          v9 = *(_DWORD *)(a1 + 72) - 1;
        }
        *(_DWORD *)(a1 + 72) = v9;
        --v14;
      }
      while (v14);
    }
    return;
  }
  if (!*(_DWORD *)(a1 + 88))
}

uint64_t CGPDFGetOperatorForName(char *__s, size_t a2, _DWORD *a3)
{
  size_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  if (!a2)
    a2 = strlen(__s);
  if (a2 > 0xFFFFFFFE)
    return 0;
  v5 = (a2 - 1);
  if (v5 > 2)
    return 0;
  v6 = (_DWORD)a2 == 1 ? 1 : hash_asso_values_7004[__s[1] + 1] + (_DWORD)a2;
  v7 = *__s;
  v8 = v6 + hash_asso_values_7004[v7];
  if (v8 > 0x48)
    return 0;
  v9 = (const char *)*((_QWORD *)&lookup_operator_wordlist + 2 * v6 + 2 * hash_asso_values_7004[v7]);
  if ((_DWORD)v7 != *(unsigned __int8 *)v9 || strncmp(__s + 1, v9 + 1, v5))
    return 0;
  if (a3)
    *a3 = *((_DWORD *)&lookup_operator_wordlist + 4 * v8 + 3);
  return *((unsigned int *)&lookup_operator_wordlist + 4 * v8 + 2);
}

const char *pdf_lexer_get_operator_name_string(uint64_t a1, size_t *a2)
{
  int v2;
  uint64_t v3;
  const char *v4;

  v2 = *(_DWORD *)(a1 + 56);
  if (v2 == 1)
  {
    v4 = *(const char **)(a1 + 64);
    *a2 = *(_QWORD *)(a1 + 72);
  }
  else if (v2)
  {
    return 0;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (v3 && *(_DWORD *)(v3 + 8) == 5)
      v4 = *(const char **)(v3 + 32);
    else
      v4 = 0;
    *a2 = strlen(v4);
  }
  return v4;
}

void CGContextAddLineToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const CGPath *v11;
  CGContextRef v14;

  if (!c)
  {
    v14 = 0;
LABEL_8:
    handle_invalid_context((char)"CGContextAddLineToPoint", (uint64_t)v14, v4, v5, v6, v7, v8, v9);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v14 = c;
    goto LABEL_8;
  }
  v11 = (const CGPath *)*((_QWORD *)c + 21);
  if (v11 && !CGPathIsEmpty(v11))
    CGPathAddLineToPoint(*((CGMutablePathRef *)c + 21), (const CGAffineTransform *)(*((_QWORD *)c + 12) + 24), x, y);
  else
    CGPostError((uint64_t)"%s: no current point.", v3, v4, v5, v6, v7, v8, v9, (char)"CGContextAddLineToPoint");
}

BOOL CGPDFScannerPopNumber(CGPDFScannerRef scanner, CGPDFReal *value)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  double v6;

  v2 = *((_DWORD *)scanner + 18);
  if (v2 <= 0)
  {
    pdf_error("stack underflow.", value);
  }
  else
  {
    v3 = *((_QWORD *)scanner + 10);
    v4 = v2 - 1;
    *((_DWORD *)scanner + 18) = v4;
    if (v3)
    {
      v5 = *(_DWORD *)(v3 + 40 * v4 + 8);
      switch(v5)
      {
        case 12:
          goto LABEL_6;
        case 4:
          v6 = *(double *)(v3 + 40 * v4 + 32);
          if (!value)
            return 1;
          goto LABEL_7;
        case 3:
LABEL_6:
          v6 = (double)*(uint64_t *)(v3 + 40 * v4 + 32);
          if (!value)
            return 1;
LABEL_7:
          *value = v6;
          return 1;
      }
    }
  }
  return 0;
}

void CGContextClosePath(CGContextRef c)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const CGPath *v9;
  CGContextRef v10;

  if (!c)
  {
    v10 = 0;
LABEL_8:
    handle_invalid_context((char)"CGContextClosePath", (uint64_t)v10, v2, v3, v4, v5, v6, v7);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v10 = c;
    goto LABEL_8;
  }
  v9 = (const CGPath *)*((_QWORD *)c + 21);
  if (v9 && !CGPathIsEmpty(v9))
    CGPathCloseSubpath(*((CGMutablePathRef *)c + 21));
  else
    CGPostError((uint64_t)"%s: no current point.", v1, v2, v3, v4, v5, v6, v7, (char)"CGContextClosePath");
}

uint64_t CGPDFSourceRefill(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  size_t BytesAtPosition;
  uint64_t (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  char v20;

  if (!a1 || *(_BYTE *)(a1 + 208))
    return 0;
  v11 = *(void **)(a1 + 144);
  if (v11)
  {
    if (*(_BYTE *)(a1 + 152))
      free(v11);
    *(_QWORD *)(a1 + 144) = 0;
    v12 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 120) = v12;
    if (v12)
    {
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 192);
      return 1;
    }
  }
  *(_QWORD *)(a1 + 112) += *(_QWORD *)(a1 + 104);
  v13 = *(_QWORD *)(a1 + 40);
  if (v13)
  {
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(_QWORD *)(a1 + 16);
    if (v14 + *(_QWORD *)(a1 + 96) >= v15)
      v16 = v15 - v14;
    else
      v16 = *(_QWORD *)(a1 + 96);
    BytesAtPosition = CGDataProviderGetBytesAtPosition(v13, *(char **)(a1 + 88), *(_QWORD *)(a1 + 24) + v14, v16);
    *(_QWORD *)(a1 + 32) += BytesAtPosition;
  }
  else
  {
    v18 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 56);
    if (!v18)
      _CGHandleAssert("CGPDFSourceRefill", 467, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Reader/CGPDFSource.c", "source->filter_callbacks.read != NULL", "filter read callback is missing", a6, a7, a8, v20);
    BytesAtPosition = v18(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
  }
  *(_QWORD *)(a1 + 104) = BytesAtPosition;
  v19 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 120) = BytesAtPosition;
  *(_QWORD *)(a1 + 128) = v19;
  v9 = 1;
  if (!BytesAtPosition)
  {
    *(_BYTE *)(a1 + 208) = 1;
    return 0;
  }
  return v9;
}

size_t CGDataProviderGetBytesAtPosition(uint64_t a1, char *a2, uint64_t a3, size_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeID v12;
  void (*v14)(_QWORD);
  uint64_t BytesInternal;

  if (!a1 || a3 < 0)
    return 0;
  v12 = CFGetTypeID((CFTypeRef)a1);
  if (kCGDataProviderPropertyTrustToken_block_invoke_once != -1)
    dispatch_once(&kCGDataProviderPropertyTrustToken_block_invoke_once, &__block_literal_global_26_6088);
  if (v12 != CGDataProviderGetTypeID_id)
    return 0;
  if (*(_QWORD *)(a1 + 96) || *(_QWORD *)(a1 + 112) || *(_QWORD *)(a1 + 80))
    return CGDataProviderDirectGetBytesAtPositionInternal((_QWORD *)a1, a2, a3, a4, v8, v9, v10, v11);
  if ((*(_DWORD *)(a1 + 20) & 0xFFFFFFFD) != 1 || !*(_QWORD *)(a1 + 64))
    _CGHandleAssert("CGDataProviderGetBytesAtPosition", 754, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProvider.c", "is_sequential(provider) && is_rewindable(provider)", "provider type (%d) must be both sequential and rewindable", v9, v10, v11, *(_DWORD *)(a1 + 20));
  CGDataProviderLock(a1);
  v14 = *(void (**)(_QWORD))(a1 + 64);
  if (v14)
    v14(*(_QWORD *)(a1 + 24));
  *(_BYTE *)(a1 + 261) = 0;
  CGDataProviderSkipForwardInternal(a1, a3);
  BytesInternal = CGDataProviderSequentialGetBytesInternal(a1, (uint64_t)a2, a4);
  CGDataProviderUnlock(a1);
  return BytesInternal;
}

void CGContextMoveToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CGPath *Mutable;
  CGContextRef v13;

  if (!c)
  {
    v13 = 0;
LABEL_8:
    handle_invalid_context((char)"CGContextMoveToPoint", (uint64_t)v13, v3, v4, v5, v6, v7, v8);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v13 = c;
    goto LABEL_8;
  }
  Mutable = (CGPath *)*((_QWORD *)c + 21);
  if (!Mutable)
  {
    Mutable = CGPathCreateMutable();
    *((_QWORD *)c + 21) = Mutable;
  }
  CGPathMoveToPoint(Mutable, (const CGAffineTransform *)(*((_QWORD *)c + 12) + 24), x, y);
}

uint64_t flate_filter_refill(uint64_t strm, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if (strm)
  {
    v8 = strm;
    if (*(_BYTE *)(strm + 113) || *(_BYTE *)(strm + 112))
    {
      return 0;
    }
    else
    {
      if (a3 > 0x3000)
        _CGHandleAssert("fstream_read", 182, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Filters/flate-filter.c", "count <= OUTPUT_BUFFER_SIZE", "Count (%lu) exceeds size of allocated buffer(%d)", a6, a7, a8, a3);
      *(_DWORD *)(strm + 32) = a3;
      *(_QWORD *)(strm + 24) = a2;
      if ((_DWORD)a3)
      {
        while (1)
        {
          if (!*(_DWORD *)(v8 + 8) && !*(_BYTE *)(v8 + 114))
          {
            v10 = CGPDFSourceRead(*(_QWORD *)(v8 + 120), *(_QWORD *)(v8 + 128), 0xF00uLL, a4, a5, a6, a7, a8);
            if (v10)
            {
              if (v10 >= 0xF01)
                _CGHandleAssert("fstream_read", 193, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Filters/flate-filter.c", "n <= INPUT_BUFFER_SIZE", "Bytes read (%lu) exceeded input buffer size (%d)", v11, v12, v13, v10);
            }
            else
            {
              *(_BYTE *)(v8 + 114) = 1;
            }
            *(_DWORD *)(v8 + 8) = v10;
            *(_QWORD *)v8 = *(_QWORD *)(v8 + 128);
          }
          v14 = inflate((z_streamp)v8, 0);
          if (v14)
            break;
          if (*(_BYTE *)(v8 + 114) || !*(_DWORD *)(v8 + 32))
            return a3 - *(unsigned int *)(v8 + 32);
        }
        if ((v14 + 5) <= 6 && ((1 << (v14 + 5)) & 0x45) != 0)
        {
          *(_BYTE *)(v8 + 112) = 1;
        }
        else
        {
          if (*(_QWORD *)(v8 + 48))
            pdf_error("FlateDecode: decoding error: %s.");
          else
            pdf_error("FlateDecode: decoding error.");
          *(_BYTE *)(v8 + 113) = 1;
        }
      }
      return a3 - *(unsigned int *)(v8 + 32);
    }
  }
  return strm;
}

void CGPDFDrawingContextSaveGState(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  CGContext *v6;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 40) >= v2)
    {
      *(_QWORD *)(a1 + 48) = 2 * v2;
      *(_QWORD *)(a1 + 56) = malloc_type_realloc(*(void **)(a1 + 56), 16 * v2, 0x2004093837F09uLL);
      if (v2 < *(_QWORD *)(a1 + 48))
      {
        do
        {
          v3 = CGPDFGStateCreate();
          v4 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v2++) = v3;
        }
        while (v2 < v4);
      }
    }
    CGPDFGStateCopyProperties(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * *(_QWORD *)(a1 + 40)), *(__int128 **)(a1 + 32));
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v5);
    *(_QWORD *)(a1 + 40) = v5 + 1;
    v6 = *(CGContext **)(a1 + 88);
    if (v6)
      CGContextSaveGState(v6);
  }
}

CFTypeRef CGPDFGStateCopyProperties(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef result;
  const void *v16;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
  v6 = *((_QWORD *)a2 + 7);
  if (v6)
    CFRetain(*((CFTypeRef *)a2 + 7));
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *((_QWORD *)a2 + 8);
  if (v7)
    CFRetain(*((CFTypeRef *)a2 + 8));
  *(_QWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 72) = *(__int128 *)((char *)a2 + 72);
  *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
  v8 = *((_QWORD *)a2 + 15);
  if (v8)
    CFRetain(*((CFTypeRef *)a2 + 15));
  *(_QWORD *)(a1 + 120) = v8;
  *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
  v9 = *((_QWORD *)a2 + 19);
  *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
  *(_QWORD *)(a1 + 152) = v9;
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  v10 = (unsigned int *)*((_QWORD *)a2 + 21);
  if (v10)
  {
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 168) = v10;
  *(_DWORD *)(a1 + 176) = *((_DWORD *)a2 + 44);
  *(_BYTE *)(a1 + 180) = *((_BYTE *)a2 + 180);
  *(_DWORD *)(a1 + 184) = *((_DWORD *)a2 + 46);
  v12 = *((_QWORD *)a2 + 24);
  if (v12)
    CFRetain(*((CFTypeRef *)a2 + 24));
  *(_QWORD *)(a1 + 192) = v12;
  *(_OWORD *)(a1 + 200) = *(__int128 *)((char *)a2 + 200);
  *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 216);
  *(_WORD *)(a1 + 217) = *(_WORD *)((char *)a2 + 217);
  *(_DWORD *)(a1 + 220) = *((_DWORD *)a2 + 55);
  v13 = *((_QWORD *)a2 + 28);
  if (v13)
    CFRetain(*((CFTypeRef *)a2 + 28));
  *(_QWORD *)(a1 + 224) = v13;
  v14 = *((_QWORD *)a2 + 29);
  if (v14)
    CFRetain(*((CFTypeRef *)a2 + 29));
  *(_QWORD *)(a1 + 232) = v14;
  result = (CFTypeRef)*((_QWORD *)a2 + 30);
  if (result)
    result = CFRetain(result);
  *(_QWORD *)(a1 + 240) = result;
  *(_OWORD *)(a1 + 248) = *(__int128 *)((char *)a2 + 248);
  v16 = (const void *)*((_QWORD *)a2 + 33);
  if (v16)
    result = CFRetain(v16);
  *(_QWORD *)(a1 + 264) = v16;
  *(_QWORD *)(a1 + 272) = 0;
  return result;
}

uint64_t CGPDFDrawingContextRestoreGState(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  CGContext *v3;

  if (result)
  {
    v1 = (_QWORD *)result;
    if (*(_QWORD *)(result + 56) && *(_QWORD *)(result + 40) >= 2uLL)
    {
      CGPDFGStateReleaseProperties(*(_QWORD **)(result + 32));
      v2 = v1[5];
      v1[4] = *(_QWORD *)(v1[7] + 8 * v2 - 16);
      v1[5] = v2 - 1;
      v3 = (CGContext *)v1[11];
      if (v3)
        CGContextRestoreGState(v3);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void CGPDFGStateReleaseProperties(_QWORD *a1)
{
  _QWORD *v2;
  const void *v3;
  void *v4;
  void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;

  v2 = (_QWORD *)a1[34];
  if (v2)
  {
    v3 = (const void *)v2[6];
    if (v3)
      CFRelease(v3);
    v4 = (void *)v2[21];
    if (v4)
    {
      text_layout_reset((_QWORD *)v2[21]);
      free(v4);
    }
    v5 = (void *)v2[22];
    if (v5)
    {
      text_layout_reset((_QWORD *)v2[22]);
      free(v5);
    }
    free(v2);
  }
  v6 = (const void *)a1[7];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)a1[8];
  if (v7)
    CFRelease(v7);
  v8 = (const void *)a1[15];
  if (v8)
    CFRelease(v8);
  v9 = (unsigned int *)a1[21];
  if (v9)
  {
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stxr(v11, v9));
    if (!v11)
      free(v9);
  }
  v12 = (const void *)a1[24];
  if (v12)
    CFRelease(v12);
  v13 = (const void *)a1[28];
  if (v13)
    CFRelease(v13);
  v14 = (const void *)a1[29];
  if (v14)
    CFRelease(v14);
  v15 = (const void *)a1[30];
  if (v15)
    CFRelease(v15);
  v16 = (const void *)a1[33];
  if (v16)
    CFRelease(v16);
}

BOOL pdf_scanner_advance_stream(_QWORD *a1)
{
  uint64_t v2;
  const __CFArray *v3;
  unint64_t v4;
  const __CFArray *v5;
  CFIndex v6;
  const void *ValueAtIndex;
  _BYTE *v8;
  _BOOL8 v9;
  const void *v10;
  _QWORD *v11;
  int v13;

  v2 = a1[8];
  if (v2)
  {
    pdf_lexer_release(v2);
    a1[8] = 0;
  }
  v3 = (const __CFArray *)a1[6];
  if (!v3)
    return 0;
  v4 = a1[5];
  if (v4 >= CFArrayGetCount(v3))
    return 0;
  v6 = a1[5];
  v5 = (const __CFArray *)a1[6];
  a1[5] = v6 + 1;
  ValueAtIndex = CFArrayGetValueAtIndex(v5, v6);
  v13 = 0;
  v8 = CGPDFStreamCreateFilterChain((uint64_t)ValueAtIndex, &v13);
  v9 = 0;
  if (v8 && !v13)
  {
    v10 = v8;
    v11 = pdf_lexer_create(0, v8, 1);
    a1[8] = v11;
    v9 = v11 != 0;
    CFRelease(v10);
  }
  return v9;
}

_QWORD *pdf_lexer_create(uint64_t a1, const void *a2, int a3)
{
  _QWORD *v6;

  v6 = malloc_type_malloc(0x50uLL, 0x566C45D1uLL);
  __CFSetLastAllocationEventName();
  if (v6)
  {
    *(_DWORD *)v6 = 1;
    v6[1] = a1;
    if (a2)
      CFRetain(a2);
    v6[2] = a2;
    v6[3] = 0;
    v6[4] = 0;
    v6[5] = 0;
    *((_DWORD *)v6 + 14) = a3;
  }
  return v6;
}

_BYTE *CGPDFStreamCreateFilterChain(uint64_t a1, int *a2)
{
  _QWORD *Copy;
  _QWORD *v5;
  int v6;
  CGPDFDictionary *v7;
  uint64_t v8;
  _QWORD *Decryptor;
  CGPDFObjectRef filter_object;
  int v11;
  CGPDFArray *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  const char *v16;
  CGPDFDictionary *v17;
  CGPDFDictionary *v18;
  size_t v19;
  _QWORD *v20;
  CGPDFDictionary *v21;
  _BYTE *v22;
  CGPDFDictionaryRef v24;
  CGPDFArrayRef array;
  CGPDFDictionaryRef value;

  if (a1)
  {
    Copy = CGPDFSourceCreateCopy(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
    if (Copy)
    {
      v5 = Copy;
      v6 = *(unsigned __int8 *)(a1 + 40);
      v7 = *(CGPDFDictionary **)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 16);
      if (!v8
        || *(_BYTE *)(a1 + 41)
        || (v15 = *(_QWORD *)(v8 + 40)) == 0
        || has_crypt_filter(*(CGPDFDictionary **)(a1 + 48), v6 != 0))
      {
        CFRetain(v5);
        Decryptor = v5;
      }
      else
      {
        Decryptor = CGPDFSecurityManagerCreateDecryptor(v15, a1, 0, v5);
        if (!Decryptor)
        {
          pdf_error("failed to create default crypt filter.");
          v14 = 0;
LABEL_43:
          CFRelease(v5);
          return v14;
        }
      }
      filter_object = get_filter_object(v7, v6 != 0);
      if (filter_object)
      {
        v11 = *((_DWORD *)filter_object + 2);
        if (v11 == 5)
        {
          v16 = (const char *)*((_QWORD *)filter_object + 4);
          value = 0;
          v17 = *(CGPDFDictionary **)(a1 + 48);
          if (!CGPDFDictionaryGetDictionary(v17, "DecodeParms", &value)
            && !CGPDFDictionaryGetDictionary(v17, "DP", &value))
          {
            value = 0;
          }
          v14 = add_filter(a1, Decryptor, v16, value, a2);
        }
        else if (v11 == 7)
        {
          v12 = (CGPDFArray *)*((_QWORD *)filter_object + 4);
          array = 0;
          value = 0;
          v24 = 0;
          if (v12)
            v13 = *((_QWORD *)v12 + 2);
          else
            v13 = 0;
          v18 = *(CGPDFDictionary **)(a1 + 48);
          if (!CGPDFDictionaryGetArray(v18, "DecodeParms", &array) && !CGPDFDictionaryGetArray(v18, "DP", &array))
            array = 0;
          CFRetain(Decryptor);
          if (a2)
            *a2 = 0;
          if (v13)
          {
            v19 = 0;
            v20 = Decryptor;
            while (CGPDFArrayGetName(v12, v19, (const char **)&value))
            {
              if (array && CGPDFArrayGetDictionary(array, v19, &v24))
              {
                v21 = v24;
              }
              else
              {
                v21 = 0;
                v24 = 0;
              }
              v22 = add_filter(a1, v20, (const char *)value, v21, a2);
              if (!v22)
                break;
              v14 = v22;
              CFRelease(v20);
              ++v19;
              v20 = v14;
              if (v13 == v19)
                goto LABEL_42;
            }
            CFRelease(v20);
            v14 = 0;
          }
          else
          {
            v14 = Decryptor;
          }
        }
        else
        {
          v14 = 0;
        }
LABEL_42:
        CFRelease(Decryptor);
      }
      else
      {
        if (a2)
          *a2 = 0;
        v14 = Decryptor;
      }
      goto LABEL_43;
    }
  }
  return 0;
}

_QWORD *CGPDFSourceCreate(const void *a1, uint64_t a2, uint64_t a3)
{
  size_t v6;
  _QWORD *Internal;
  _QWORD *v8;

  if (!a1)
    return 0;
  if (a3 >= 0x4000)
    v6 = 0x4000;
  else
    v6 = a3;
  Internal = CGPDFSourceCreateInternal(v6);
  v8 = Internal;
  if (Internal)
  {
    Internal[5] = a1;
    CFRetain(a1);
    *((_BYTE *)v8 + 209) = 0;
    v8[2] = a3;
    v8[3] = a2;
    v8[4] = 0;
  }
  return v8;
}

_QWORD *CGPDFSourceCreateInternal(size_t a1)
{
  uint64_t cftype;
  _QWORD *v3;
  void *v4;

  if (CGPDFSourceGetTypeID_onceToken != -1)
    dispatch_once(&CGPDFSourceGetTypeID_onceToken, &__block_literal_global_4363);
  cftype = pdf_create_cftype();
  v3 = (_QWORD *)cftype;
  if (cftype)
  {
    *(_QWORD *)(cftype + 96) = a1;
    v4 = malloc_type_calloc(1uLL, a1, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    v3[11] = v4;
    if (v4)
    {
      v3[2] = -1;
      v3[13] = 0;
      v3[14] = 0;
      v3[15] = 0;
      v3[16] = v4;
    }
    else
    {
      CFRelease(v3);
      return 0;
    }
  }
  return v3;
}

_BYTE *add_filter(uint64_t a1, _QWORD *a2, const char *a3, CGPDFDictionary *a4, int *a5)
{
  CFTypeRef *v9;
  CFTypeRef *v10;
  _QWORD *Internal;
  __int128 *v12;
  CFTypeRef *v14;
  _QWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  int v18;
  char *v19;
  z_stream *v20;
  void *v21;
  char v22;
  CFTypeRef *v23;
  CFTypeRef *v24;
  CFTypeRef *v25;
  _QWORD *v26;
  __int128 v27;
  uint64_t v28;
  CFTypeRef *v29;
  char *v30;
  _QWORD *v31;
  CGPDFInteger v32;
  _QWORD *predictor2_filter;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  signed int v39;
  _DWORD *v40;
  _DWORD *v41;
  BOOL v42;
  int v43;
  char v44;
  uint64_t v45;
  char *v46;
  char *v47;
  _QWORD *v48;
  int v49;
  BOOL v50;
  int v51;
  int v52;
  _QWORD *v53;
  _QWORD *v54;
  CGPDFInteger v55;
  CGPDFInteger value;

  if (a3)
  {
    switch(filter_kind_from_name(a3))
    {
      case 1u:
        if (a5)
          *a5 = 0;
        v9 = (CFTypeRef *)malloc_type_calloc(1uLL, 0x10uLL, 0x10200405F07FB98uLL);
        if (!v9)
          return 0;
        v10 = v9;
        *((_BYTE *)v9 + 8) = 0;
        if (a2)
          CFRetain(a2);
        *v10 = a2;
        Internal = CGPDFSourceCreateInternal(0xF80uLL);
        if (!Internal)
          goto LABEL_68;
        a2 = Internal;
        v12 = &pdf_source_create_ascii_hex_filter_callbacks;
        goto LABEL_53;
      case 2u:
        if (a5)
          *a5 = 0;
        v14 = (CFTypeRef *)malloc_type_calloc(1uLL, 0x20uLL, 0x10300404B55CAD2uLL);
        if (!v14)
          return 0;
        v10 = v14;
        *((_BYTE *)v14 + 8) = 0;
        if (a2)
          CFRetain(a2);
        *v10 = a2;
        v15 = CGPDFSourceCreateInternal(0xF80uLL);
        if (!v15)
          goto LABEL_68;
        a2 = v15;
        v12 = &pdf_source_create_ascii85_filter_callbacks;
        goto LABEL_53;
      case 3u:
        if (a5)
          *a5 = 0;
        v16 = malloc_type_calloc(1uLL, 0x28uLL, 0x1020040239958B0uLL);
        if (!v16)
          return 0;
        v17 = v16;
        v16[4] = 0;
        v16[5] = 1728;
        v16[3] = 0;
        v16[6] = 0x10000;
        v16[7] = 0;
        if (a4)
        {
          value = 0;
          LOBYTE(v55) = 0;
          if (CGPDFDictionaryGetInteger(a4, "K", &value))
          {
            if (value == (int)value)
              v17[3] = value;
            else
              pdf_error("/%s is outside the range of allowed values.", "K");
          }
          if (CGPDFDictionaryGetBoolean(a4, "EndOfLine", (CGPDFBoolean *)&v55))
            *((_BYTE *)v17 + 24) = (_BYTE)v55 != 0;
          if (CGPDFDictionaryGetBoolean(a4, "EncodedByteAlign", (CGPDFBoolean *)&v55))
            *((_BYTE *)v17 + 25) = (_BYTE)v55 != 0;
          if (CGPDFDictionaryGetInteger(a4, "Columns", &value))
          {
            if ((unint64_t)value >> 31)
              pdf_error("/%s is outside the range of allowed values.", "Columns");
            else
              v17[5] = value;
          }
          if (CGPDFDictionaryGetInteger(a4, "Rows", &value))
          {
            if ((unint64_t)value >> 31)
              pdf_error("/%s is outside the range of allowed values.", "Rows");
            else
              v17[4] = value;
          }
          if (CGPDFDictionaryGetBoolean(a4, "EndOfBlock", (CGPDFBoolean *)&v55))
            *((_BYTE *)v17 + 26) = (_BYTE)v55 != 0;
          if (CGPDFDictionaryGetBoolean(a4, "BlackIs1", (CGPDFBoolean *)&v55))
            *((_BYTE *)v17 + 27) = (_BYTE)v55 != 0;
          if (CGPDFDictionaryGetInteger(a4, "DamagedRowsBeforeError", &value))
          {
            if ((unint64_t)value >> 31)
              pdf_error("/%s is outside the range of allowed values.", "DamagedRowsBeforeError");
            else
              v17[7] = value;
          }
        }
        v35 = v17[3];
        if (v35 >= 0)
          v36 = 3;
        else
          v36 = 4;
        v37 = v35 > 0;
        if (*((_BYTE *)v17 + 24))
          v37 |= 2u;
        if (*((_BYTE *)v17 + 25))
          v37 |= 4u;
        if (*((_BYTE *)v17 + 26))
        {
          v37 |= 8u;
          v17[4] = 0;
        }
        if (*((_BYTE *)v17 + 27))
          v38 = v37;
        else
          v38 = v37 | 0x10;
        *((_BYTE *)v17 + 8) = 0;
        if (a2)
          CFRetain(a2);
        *(_QWORD *)v17 = a2;
        v39 = v17[5];
        if (v39 > 0x3FFFFFFF)
          goto LABEL_129;
        v40 = malloc_type_calloc(1uLL, 0x50uLL, 0x1090040B0F722C2uLL);
        if (!v40)
          goto LABEL_129;
        v41 = v40;
        v42 = v35 < 0;
        *v40 = v36;
        v40[1] = v38;
        v43 = v39 + 7;
        if (v39 < -7)
          v43 = v39 + 14;
        v40[2] = v43 >> 3;
        v40[3] = v39;
        v44 = v42 | v38;
        v45 = ((v42 | v38) & 1) != 0 ? (2 * v39 + 62) & 0xFFFFFFC0 : v39;
        v46 = (char *)malloc_type_malloc(4 * v45 + 12, 0x1000040BDFB0063uLL);
        *((_QWORD *)v41 + 4) = v46;
        if (v46)
        {
          *((_QWORD *)v41 + 6) = v46;
          v41[14] = v45;
          if ((v44 & 1) != 0)
          {
            v47 = &v46[2 * v45];
            *((_QWORD *)v41 + 5) = v47 + 6;
            *(_DWORD *)(v47 + 6) = (unsigned __int16)v41[3];
          }
          else
          {
            *((_QWORD *)v41 + 5) = 0;
          }
          *((_QWORD *)v41 + 2) = 0;
          v41[6] = 0;
          *((_QWORD *)v17 + 4) = v41;
          *((_QWORD *)v41 + 8) = ccitt_fax_filter_getc;
          *((_QWORD *)v41 + 9) = a2;
          v49 = v17[5];
          v51 = v49 + 7;
          v50 = v49 < -7;
          v52 = v49 + 14;
          if (!v50)
            v52 = v51;
          v53 = CGPDFSourceCreateInternal((uint64_t)v52 >> 3);
          if (v53)
          {
            a2 = v53;
            *((_BYTE *)v53 + 209) = 1;
            *((_OWORD *)v53 + 3) = pdf_source_create_ccitt_fax_filter_callbacks;
            *((_OWORD *)v53 + 4) = *(_OWORD *)&off_1E162CC80;
            v53[10] = v17;
            return a2;
          }
        }
        else
        {
LABEL_129:
          *((_QWORD *)v17 + 4) = 0;
        }
        ccitt_fax_filter_finalize((CFTypeRef *)v17);
        return 0;
      case 4u:
        if (!a5)
          goto LABEL_57;
        v18 = 1;
        goto LABEL_56;
      case 5u:
        if (a5)
          *a5 = 0;
        if (!a2)
          return a2;
        v19 = (char *)malloc_type_malloc(0x88uLL, 0x10B004050FB1E12uLL);
        if (!v19)
          return 0;
        v20 = (z_stream *)v19;
        *(_OWORD *)(v19 + 60) = 0u;
        *(_OWORD *)(v19 + 76) = 0u;
        *((_DWORD *)v19 + 27) = 0;
        *(_OWORD *)(v19 + 92) = 0u;
        *(_OWORD *)(v19 + 44) = 0u;
        *(_OWORD *)(v19 + 28) = 0u;
        *(_OWORD *)(v19 + 12) = 0u;
        *((_QWORD *)v19 + 8) = fstream_zalloc;
        *((_QWORD *)v19 + 9) = fstream_zfree;
        *(_QWORD *)v19 = 0;
        *((_DWORD *)v19 + 2) = 0;
        v19[114] = 0;
        *((_WORD *)v19 + 56) = 0;
        CFRetain(a2);
        *(_QWORD *)&v20[1].avail_in = a2;
        v21 = malloc_type_malloc(0xF00uLL, 0xBDF5EA43uLL);
        v20[1].total_in = (uLong)v21;
        if (!v21)
          goto LABEL_140;
        if (inflateInit_(v20, "1.2.12", 112))
        {
          if (v20->msg)
            pdf_error("FlateDecode: initialization error: %s.");
          else
            pdf_error("FlateDecode: initialization error.");
LABEL_140:
          fstream_release(v20);
          return 0;
        }
        v48 = CGPDFSourceCreateInternal(0x3000uLL);
        a2 = v48;
        if (!v48)
        {
          fstream_release(v20);
          return a2;
        }
        *((_BYTE *)v48 + 209) = 1;
        *((_OWORD *)v48 + 3) = pdf_source_create_flate_filter_callbacks;
        *((_OWORD *)v48 + 4) = *(_OWORD *)&off_1E162CCA0;
        v48[10] = v20;
        value = 0;
        if (!CGPDFDictionaryGetInteger(a4, "Predictor", &value))
          return a2;
        v32 = value;
        goto LABEL_76;
      case 6u:
        if (a5)
          *a5 = 0;
        return pdf_source_create_jbig2_filter(a2, (CGPDFStream *)a1, a4);
      case 7u:
        if (a5)
          *a5 = 0;
        v22 = 1;
        v23 = (CFTypeRef *)malloc_type_calloc(1uLL, 0x10uLL, 0x10200405F07FB98uLL);
        if (!v23)
          return 0;
        v24 = v23;
        v55 = 0;
        value = 0;
        *((_BYTE *)v23 + 8) = 1;
        if (a4)
        {
          if (CGPDFDictionaryGetInteger(a4, "EarlyChange", &value))
          {
            v22 = value != 0;
            *((_BYTE *)v24 + 8) = value != 0;
          }
          else
          {
            v22 = *((_BYTE *)v24 + 8) != 0;
          }
        }
        v30 = lzw_decoder_create(a2, v22);
        *v24 = v30;
        if (!v30)
        {
          v29 = v24;
          goto LABEL_80;
        }
        v31 = CGPDFSourceCreateInternal(0xF80uLL);
        a2 = v31;
        if (v31)
        {
          *((_BYTE *)v31 + 209) = 1;
          *((_OWORD *)v31 + 3) = pdf_source_create_lzw_filter_callbacks;
          *((_OWORD *)v31 + 4) = *(_OWORD *)&off_1E162CCE0;
          v31[10] = v24;
          if (CGPDFDictionaryGetInteger(a4, "Predictor", &v55))
          {
            v32 = v55;
LABEL_76:
            if (v32 != 1)
            {
              if (v32 == 2)
                predictor2_filter = pdf_source_create_predictor2_filter(a2, a4);
              else
                predictor2_filter = pdf_source_create_png_filter(a2, a4);
              v54 = predictor2_filter;
              CFRelease(a2);
              return v54;
            }
          }
        }
        else
        {
          lzw_decoder_release((void **)*v24);
          free(v24);
        }
        return a2;
      case 8u:
        if (a5)
          *a5 = 0;
        v25 = (CFTypeRef *)malloc_type_calloc(1uLL, 0x20uLL, 0x10300404B55CAD2uLL);
        if (!v25)
          return 0;
        v10 = v25;
        *((_BYTE *)v25 + 8) = 0;
        if (a2)
          CFRetain(a2);
        *v10 = a2;
        v26 = CGPDFSourceCreateInternal(0xF00uLL);
        if (v26)
        {
          a2 = v26;
          v12 = &pdf_source_create_rle_filter_callbacks;
LABEL_53:
          *((_BYTE *)a2 + 209) = 1;
          v27 = v12[1];
          *((_OWORD *)a2 + 3) = *v12;
          *((_OWORD *)a2 + 4) = v27;
          a2[10] = v10;
          return a2;
        }
LABEL_68:
        if (*v10)
          CFRelease(*v10);
        v29 = v10;
LABEL_80:
        free(v29);
        return 0;
      case 9u:
        if (!a5)
          goto LABEL_57;
        v18 = 2;
LABEL_56:
        *a5 = v18;
LABEL_57:
        if (a2)
          CFRetain(a2);
        return a2;
      case 0xAu:
        if (a5)
          *a5 = 0;
        value = 0;
        if (!a4 || !CGPDFDictionaryGetName(a4, "Name", (const char **)&value))
          value = (CGPDFInteger)"Identity";
        if (!a1 || (v28 = *(_QWORD *)(a1 + 16)) == 0 || *(_BYTE *)(a1 + 41) || (v34 = *(_QWORD *)(v28 + 40)) == 0)
        {
          pdf_error("crypt filter specified without encryption parameters.");
          return 0;
        }
        return CGPDFSecurityManagerCreateDecryptor(v34, a1, (char *)value, a2);
      default:
        return 0;
    }
  }
  pdf_error("filter name cannot be null.");
  return 0;
}

_QWORD *CGPDFSourceCreateCopy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (!a1 || (a3 | a2) < 0)
    return 0;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = v3 - a2;
  if (v3 < a2)
    v4 = 0;
  if (a3 + a2 > v3 && v3 != -1)
    a3 = v4;
  return CGPDFSourceCreate(*(const void **)(a1 + 40), *(_QWORD *)(a1 + 24) + a2, a3);
}

void pdf_object_release_compound_value(uint64_t a1)
{
  const void *v1;

  switch(*(_DWORD *)(a1 + 8))
  {
    case 5:
      free(*(void **)(a1 + 32));
      break;
    case 6:
      v1 = *(const void **)(a1 + 32);
      if (v1)
        goto LABEL_4;
      break;
    case 7:
      v1 = *(const void **)(a1 + 32);
      if (v1)
        goto LABEL_4;
      break;
    case 8:
      v1 = *(const void **)(a1 + 32);
      if (v1)
        goto LABEL_4;
      break;
    case 9:
      v1 = *(const void **)(a1 + 32);
      if (v1)
LABEL_4:
        CFRelease(v1);
      break;
    default:
      return;
  }
}

void CGContextAddRect(CGContextRef c, CGRect rect)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  CGPath *v15;
  CGContextRef v16;

  if (!c)
  {
    v16 = 0;
LABEL_23:
    handle_invalid_context((char)"CGContextAddRect", (uint64_t)v16, v2, v3, v4, v5, v6, v7);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v16 = c;
    goto LABEL_23;
  }
  if (rect.origin.x != INFINITY && rect.origin.y != INFINITY)
  {
    v14 = *((_QWORD *)c + 12);
    v15 = (CGPath *)*((_QWORD *)c + 21);
    if (v15)
      CGPathAddRect(v15, (const CGAffineTransform *)(v14 + 24), rect);
    else
      *((_QWORD *)c + 21) = CGPathCreateWithRect(rect, (const CGAffineTransform *)(v14 + 24));
  }
}

CGPathRef CGPathCreateWithRect(CGRect rect, const CGAffineTransform *transform)
{
  const CGAffineTransform *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  CFTypeID TypeID;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Instance;
  CGRect v23;
  CGRect v24;

  height = rect.size.height;
  width = rect.size.width;
  y = rect.origin.y;
  x = rect.origin.x;
    return 0;
  TypeID = CGPathGetTypeID();
  Instance = CGTypeCreateInstance(TypeID, 88, v15, v16, v17, v18, v19, v20);
  if (Instance)
  {
    v24.origin.x = x;
    v24.origin.y = y;
    v24.size.width = width;
    v24.size.height = height;
    v23 = CGRectStandardize(v24);
    CG::Path::append_rect((CG::Path *)(Instance + 16), &v23, (float64x2_t *)transform);
  }
  return (CGPathRef)Instance;
}

void set_color(unint64_t StrokeColor, uint64_t a2, CGColorSpace *a3, int a4, __n128 a5)
{
  CGColorSpace *v6;
  CGPDFScanner *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  CGFloat *v21;
  CGFloat *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  CGColorRef v27;
  CGPDFReal value[2];

  v6 = a3;
  v8 = (CGPDFScanner *)StrokeColor;
  value[1] = *(CGPDFReal *)MEMORY[0x1E0C80C00];
  if (a3)
    goto LABEL_2;
  v10 = *(_QWORD *)(a2 + 32);
  if (!a4)
  {
    StrokeColor = CGPDFGStateGetStrokeColor(v10);
    if (StrokeColor)
      goto LABEL_5;
LABEL_9:
    v6 = 0;
    goto LABEL_11;
  }
  StrokeColor = CGPDFGStateGetFillColor(v10);
  if (!StrokeColor)
    goto LABEL_9;
LABEL_5:
  if ((StrokeColor & 0x8000000000000000) != 0)
  {
    StrokeColor = (unint64_t)CGTaggedColorGetColorSpace(StrokeColor, v11, v12, v13, v14, v15, v16, v17);
    v6 = (CGColorSpace *)StrokeColor;
    if (!StrokeColor)
      goto LABEL_11;
LABEL_2:
    v9 = *(_QWORD *)(*((_QWORD *)v6 + 3) + 40);
    goto LABEL_12;
  }
  v6 = *(CGColorSpace **)(StrokeColor + 24);
  if (v6)
    goto LABEL_2;
LABEL_11:
  v9 = 0;
LABEL_12:
  MEMORY[0x1E0C80A78](StrokeColor, a5);
  v21 = (CGPDFReal *)((char *)value - v20);
  if (v19 <= 0x1FFFFFFFFFFFFFFELL)
    v22 = (CGPDFReal *)((char *)value - v20);
  else
    v22 = 0;
  if (v19 - 0x1FFFFFFFFFFFFFFFLL >= 0xE00000000000000ELL)
    v22 = (CGFloat *)malloc_type_malloc(8 * v18, 0x48446D8AuLL);
  value[0] = 0.0;
  if (v22)
  {
    if (v9)
    {
      v23 = v9 - 1;
      while (CGPDFScannerPopNumber(v8, value))
      {
        v22[v23--] = value[0];
        if (v23 == -1)
          goto LABEL_22;
      }
      pdf_error("missing or invalid arguments for color operator.");
      goto LABEL_34;
    }
LABEL_22:
    v24 = *(_QWORD *)(a2 + 32);
    if (a4)
    {
      if (v24)
        v25 = *(double *)(v24 + 200);
      else
        v25 = 1.0;
      v22[v9] = v25;
      v27 = CGColorCreate(v6, v22);
      CGPDFGStateSetFillColor(*(_QWORD *)(a2 + 32), v27);
      if (!v27)
        goto LABEL_34;
    }
    else
    {
      if (v24)
        v26 = *(double *)(v24 + 208);
      else
        v26 = 1.0;
      v22[v9] = v26;
      v27 = CGColorCreate(v6, v22);
      CGPDFGStateSetStrokeColor(*(_QWORD *)(a2 + 32), v27);
      if (!v27)
        goto LABEL_34;
    }
    CFRelease(v27);
LABEL_34:
    if (v22 != v21)
      free(v22);
  }
}

void pdf_lexer_release(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  const void *v4;

  if (a1)
  {
    do
    {
      v2 = __ldxr((unsigned int *)a1);
      v3 = v2 - 1;
    }
    while (__stxr(v3, (unsigned int *)a1));
    if (!v3)
    {
      v4 = *(const void **)(a1 + 16);
      if (v4)
        CFRelease(v4);
      free(*(void **)(a1 + 40));
      free((void *)a1);
    }
  }
}

void CGPDFGStateSetFillColor(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v4;

  if (a1)
  {
    v4 = *(CFTypeRef *)(a1 + 56);
    if (v4 != cf)
    {
      if (v4)
        CFRelease(v4);
      if (cf)
        CFRetain(cf);
      *(_QWORD *)(a1 + 56) = cf;
    }
  }
}

BOOL CGPDFScannerPopName(CGPDFScannerRef scanner, const char **value)
{
  int v2;
  uint64_t v3;
  unsigned int v4;

  v2 = *((_DWORD *)scanner + 18);
  if (v2 <= 0)
  {
    pdf_error("stack underflow.", value);
    return 0;
  }
  v3 = *((_QWORD *)scanner + 10);
  v4 = v2 - 1;
  *((_DWORD *)scanner + 18) = v4;
  if (!v3 || *(_DWORD *)(v3 + 40 * v4 + 8) != 5)
    return 0;
  if (value)
    *value = *(const char **)(v3 + 40 * v4 + 32);
  return 1;
}

_QWORD *CGPDFContentStreamCreateResolvedColorSpace(uint64_t a1, _QWORD *cf)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;

  v2 = cf;
  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 64);
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 0x40000000;
    v5[2] = __CGColorSpaceCreateResolved_block_invoke;
    v5[3] = &__block_descriptor_tmp_40_20979;
    v6 = *(_OWORD *)(a1 + 48);
    v7 = v3;
    return (_QWORD *)CGColorSpaceCreateResolvedColorSpace(cf, (uint64_t)v5);
  }
  else if (cf)
  {
    CFRetain(cf);
  }
  return v2;
}

CGPDFOperatorTableRef CGPDFOperatorTableCreate(void)
{
  if (CGPDFOperatorTableGetTypeID_onceToken != -1)
    dispatch_once(&CGPDFOperatorTableGetTypeID_onceToken, &__block_literal_global_15032);
  return (CGPDFOperatorTableRef)pdf_create_cftype();
}

uint64_t CGImageTextureDataGetOffsetWithBlock(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t);
  char v8;
  double v9;
  double v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (result)
  {
    if (a5)
    {
      v6 = result;
      v7 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t))(result + 40);
      if (v7)
      {
        v8 = a2;
        v9 = *(double *)(result + 72);
        v10 = *(double *)(result + 80);
        v11 = *(_QWORD *)(result + 88);
        v16 = 0;
        v17 = 0;
        v15 = 0;
        v12 = v7(*(_QWORD *)(result + 24), a2, a3, &v17, &v16, &v15, a4);
        if (v12)
        {
          v13 = v12;
          ERROR_CGDataProvider_BufferIsNotReadable();
          if (v15)
          {
            ERROR_CGDataProvider_BufferIsNotBigEnough();
            v14 = v15;
          }
          else
          {
            v14 = 0;
          }
          (*(void (**)(uint64_t, unint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 16))(a5, (unint64_t)v9 >> v8, (unint64_t)v10 >> v8, v11 >> v8, v13, v17, v16, v14);
        }
        return (*(uint64_t (**)(_QWORD))(v6 + 48))(*(_QWORD *)(v6 + 24));
      }
    }
  }
  return result;
}

uint64_t colorspace_from_ICC_data_data_key_hash(__int128 *a1)
{
  __int128 v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  return MEMORY[0x186DC26D0](&v2, 16);
}

void style_finalize(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

void build_tile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6, _OWORD *a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, double a12)
{
  _QWORD **v21;
  uint64_t v22;
  char *Copy;
  __int128 v24;
  __int128 v25;
  char *v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  CGColor *PatternBaseColor;
  CGColorRef CopyWithAlpha;
  _QWORD *v35;
  CGFloat height;
  CGFloat x;
  CGFloat y;
  int v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  __n64 v50;
  __n64 v51;
  __n64 v52;
  __n64 v53;
  double v54;
  double v55;
  double v56;
  CGFloat v57;
  double v58;
  float64x2_t v59;
  double v60;
  double v61;
  double v62;
  double v63;
  CGFloat v64;
  CGFloat v65;
  const CGRect *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  CGFloat v72;
  CGFloat v73;
  double v74;
  double v75;
  unint64_t v76;
  unint64_t v77;
  const void *v78;
  const void *CGDisplayList;
  const void *ContextDelegate;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const void *v85;
  __int128 v86;
  uint64_t v87;
  const __CFArray *v88;
  const __CFArray *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int (*v98)(_QWORD *, char *, uint64_t, CGAffineTransform *, __int128 *, _QWORD, uint64_t);
  float64x2_t v104;
  float64x2_t v106;
  float64x2_t v107;
  unint64_t v108;
  float64x2_t v109;
  unint64_t v110;
  float64x2_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  float v124;
  unsigned int **v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int **v132;
  unsigned int *v133;
  CGAffineTransform *v134;
  unsigned int v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  float64x2_t v140;
  unint64_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  uint64_t (*v148)(_QWORD *, char *, uint64_t, _QWORD, double, double, double, double);
  int v149;
  char v150;
  double v151;
  _QWORD **v152;
  double v153;
  uint64_t v154;
  CGFloat rect;
  CGFloat v156;
  double width;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  double v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  double v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  double v171;
  float64x2_t v172;
  float64x2_t v173;
  double v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  _QWORD v178[6];
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  char v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  _OWORD v191[2];
  _BYTE v192[112];
  __int128 v193;
  CGAffineTransform v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  uint64_t v211;
  CGRect v212;
  CGRect v213;
  CGRect v214;
  CGRect v215;
  CGRect v216;
  CGRect v217;
  CGRect v218;
  CGRect v219;

  v21 = (_QWORD **)a2;
  v22 = a1;
  v211 = *MEMORY[0x1E0C80C00];
  memset(&v192[16], 0, 96);
  v193 = 0u;
  *(_OWORD *)v192 = 0u;
  v189 = 0u;
  v190 = 0u;
  v187 = 0u;
  v188 = 0u;
  *(_OWORD *)&v192[24] = *(_OWORD *)(a2 + 120);
  *(_OWORD *)&v192[40] = *(_OWORD *)(a2 + 136);
  *(_OWORD *)&v192[56] = *(_OWORD *)(a2 + 152);
  *(_QWORD *)&v192[72] = *(_QWORD *)(a2 + 168);
  *(_OWORD *)&v192[8] = *(_OWORD *)(a2 + 104);
  *(_QWORD *)&v188 = *(_QWORD *)(a2 + 16);
  *((_QWORD *)&v189 + 1) = *(_QWORD *)(a2 + 40);
  v190 = *(_OWORD *)(a2 + 48);
  memset(v191, 0, sizeof(v191));
  *(_QWORD *)&v191[0] = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)((char *)v191 + 8) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a2 + 72) = 0u;
  DWORD2(v193) = *(_DWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 48) = a1;
  Copy = CGRenderingStateCreateCopy(a3);
  v25 = a7[1];
  v24 = a7[2];
  *(_OWORD *)(Copy + 24) = *a7;
  *(_OWORD *)(Copy + 40) = v25;
  *(_OWORD *)(Copy + 56) = v24;
  v26 = CGGStateCreateCopy(a4);
  v27 = (uint64_t)v26;
  if (a6)
  {
    v28 = *a6;
    v29 = a6[1];
    v30 = *((_QWORD *)v26 + 15);
    if (*(double *)(v30 + 24) != *a6 || *(double *)(v30 + 32) != v29)
    {
      maybeCopyRenderingState((uint64_t)v26);
      v31 = *(_QWORD *)(v27 + 120);
      *(double *)(v31 + 24) = v28;
      *(double *)(v31 + 32) = v29;
    }
  }
  CGGStateResetClip(v27);
  if (*(double *)(*(_QWORD *)(v27 + 120) + 8) != 1.0)
  {
    maybeCopyRenderingState(v27);
    *(_QWORD *)(*(_QWORD *)(v27 + 120) + 8) = 0x3FF0000000000000;
  }
  CGGStateSetStyle(v27, 0);
  CGGStateSetSoftMask(v27, 0);
  CGGStateSetCompositeOperation(v27, 2);
  if (a5 < 1)
  {
    PatternBaseColor = (CGColor *)CGColorGetPatternBaseColor(a5);
    v32 = 0;
    if (!PatternBaseColor)
    {
LABEL_17:
      CGGStateSetFillColor(v27, 0);
      CGGStateSetStrokeColor(v27, 0);
      goto LABEL_18;
    }
    goto LABEL_15;
  }
  v32 = *(_QWORD *)(a5 + 32);
  PatternBaseColor = (CGColor *)CGColorGetPatternBaseColor(a5);
  if (PatternBaseColor)
  {
LABEL_15:
    CopyWithAlpha = CGColorCreateCopyWithAlpha(PatternBaseColor, 1.0);
    CGGStateSetFillColor(v27, CopyWithAlpha);
    CGGStateSetStrokeColor(v27, CopyWithAlpha);
    if (CopyWithAlpha)
      CFRelease(CopyWithAlpha);
    goto LABEL_18;
  }
  if (!v32 || *(_DWORD *)(v32 + 20) || !*(_BYTE *)(v32 + 184) || !*(_QWORD *)(v32 + 80))
    goto LABEL_17;
LABEL_18:
  v35 = *v21;
  v212 = CGRectStandardize(*(CGRect *)(v32 + 104));
  if (v212.size.width == 0.0 || (height = v212.size.height, v212.size.height == 0.0))
  {
    do
    {
LABEL_89:
      v121 = __ldxr((unsigned int *)Copy);
      v122 = v121 - 1;
    }
    while (__stxr(v122, (unsigned int *)Copy));
    if (!v122)
      free(Copy);
    goto LABEL_92;
  }
  x = v212.origin.x;
  y = v212.origin.y;
  v39 = *(_DWORD *)(v32 + 152);
  v40 = *(float64x2_t *)(Copy + 24);
  v41 = *(float64x2_t *)(Copy + 40);
  v42 = vmlaq_n_f64(vmulq_laneq_f64(v41, *(float64x2_t *)(v32 + 24), 1), v40, *(double *)(v32 + 24));
  v43 = vmlaq_n_f64(vmulq_laneq_f64(v41, *(float64x2_t *)(v32 + 40), 1), v40, *(double *)(v32 + 40));
  v158 = vaddq_f64(*(float64x2_t *)(Copy + 56), vmlaq_n_f64(vmulq_n_f64(v41, *(double *)(*(_QWORD *)(v27 + 120) + 32) + *(double *)(v32 + 64)), v40, *(double *)(*(_QWORD *)(v27 + 120) + 24) + *(double *)(v32 + 56)));
  v167 = *(double *)(v32 + 136);
  v171 = fabs(v167);
  v163 = *(double *)(v32 + 144);
  v174 = fabs(v163);
  v156 = v212.origin.x;
  width = v212.size.width;
  rect = v212.origin.y;
  if (v212.origin.x == -8.98846567e307
    && v212.origin.y == -8.98846567e307
    && v212.size.width == 1.79769313e308
    && v212.size.height == 1.79769313e308)
  {
    v39 = 0;
    v161 = v43;
    v162 = v42;
    v44 = 0.0;
    v45 = 0.0;
  }
  else
  {
    if (v167 != 0.0)
    {
      v46 = vmuld_lane_f64(v171, v42, 1);
      v47 = v46 * v46 + v171 * v42.f64[0] * (v171 * v42.f64[0]);
      if (v47 != 0.0 && v47 < 0.253921509)
        v42 = vmulq_n_f64(v42, (double)(int)(1.0 / sqrt(v47) + 0.5));
    }
    v48 = v43.f64[1];
    if (v163 != 0.0)
    {
      v49 = v174 * v43.f64[1] * (v174 * v43.f64[1]) + v174 * v43.f64[0] * (v174 * v43.f64[0]);
      if (v49 != 0.0 && v49 < 0.253921509)
      {
        v43 = vmulq_n_f64(v43, (double)(int)(1.0 / sqrt(v49) + 0.5));
        v48 = v43.f64[1];
      }
    }
    if ((int)vmuld_lane_f64(v212.size.width * 256.0, v42, 1) | (int)(v212.size.height * 256.0 * v43.f64[0]))
    {
      if ((int)(v212.size.width * 256.0 * v42.f64[0]) | (int)(v212.size.height * 256.0 * v48))
      {
        v39 = 0;
      }
      else
      {
        v43.f64[1] = 0.0;
        v42.f64[0] = 0.0;
      }
    }
    else
    {
      v42.f64[1] = 0.0;
      v43.f64[0] = 0.0;
    }
    v161 = v43;
    v162 = v42;
    v44 = x;
    v45 = y;
  }
  v213.origin.x = a8;
  v213.origin.y = a9;
  v213.size.width = a10;
  v213.size.height = a11;
  v214 = CGRectInset(v213, 0.00390625, 0.00390625);
  *(float64x2_t *)&v194.a = v162;
  *(float64x2_t *)&v194.c = v161;
  *(float64x2_t *)&v194.tx = v158;
  v50.n64_f64[0] = CGRectApplyInverseAffineTransform(&v194.a, *(__n64 *)&v214.origin.x, v214.origin.y, v214.size.width, v214.size.height).n64_f64[0]- v44;
  if (v167 == 0.0)
  {
    v170 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v171, 0);
    v56 = v50.n64_f64[0] - v50.n64_f64[0];
  }
  else
  {
    v54 = v52.n64_f64[0] + v50.n64_f64[0];
    v55 = floor(v50.n64_f64[0] / v171);
    v56 = v171 * v55;
    v170 = vmulq_n_f64(v162, v171);
    v171 = (double)(int)((v54 - v171 * v55) / v171);
  }
  v57 = v156;
  v58 = v51.n64_f64[0] - v45;
  v154 = v22;
  v153 = a12;
  v152 = v21;
  if (v163 == 0.0)
  {
    v62 = v58 - v58;
    v166 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v174, 0);
    v59 = v161;
  }
  else
  {
    v59 = v161;
    v166 = vmulq_n_f64(v161, v174);
    v60 = v53.n64_f64[0] + v58;
    v61 = floor(v58 / v174);
    v62 = v174 * v61;
    v174 = (double)(int)((v60 - v174 * v61) / v174);
  }
  v63 = width;
  v64 = rect;
  v159 = vmlaq_n_f64(vmlaq_n_f64(v158, v162, v56), v59, v62);
  *(float64x2_t *)&v194.a = v162;
  *(float64x2_t *)&v194.c = v59;
  *(float64x2_t *)&v194.tx = v159;
  v151 = height;
  v65 = height;
  v215 = CGRectApplyAffineTransform(*(CGRect *)&v57, &v194);
  v72 = v215.size.width;
  v73 = v215.size.height;
  v74 = v215.origin.x - v159.f64[0];
  v75 = v215.origin.y - v159.f64[1];
  if (*(_DWORD *)(v32 + 20)
    || !*(_BYTE *)(v32 + 184)
    || (v97 = *(_QWORD *)(v32 + 80)) == 0
    || CGImageGetClipPath(*(_QWORD **)(v32 + 80)))
  {
    v76 = (unint64_t)v171;
    v77 = (unint64_t)v174;
    if ((unint64_t)v174 | (unint64_t)v171)
    {
      CGDisplayList = (const void *)CG::DisplayList::createCGDisplayList(0, (const __CFDictionary *)&CGRectInfinite, v66, v67, v68, v69, v70, v71);
      v78 = CGDisplayList;
      if (!CGDisplayList)
        goto LABEL_68;
      ContextDelegate = (const void *)CG::DisplayList::createContextDelegate(CGDisplayList);
      if (ContextDelegate)
      {
        v85 = ContextDelegate;
        v86 = *(_OWORD *)(Copy + 40);
        *(_OWORD *)&v194.a = *(_OWORD *)(Copy + 24);
        *(_OWORD *)&v194.c = v86;
        *(_OWORD *)&v194.tx = *(_OWORD *)(Copy + 56);
        *(CGAffineTransform *)(Copy + 24) = CGAffineTransformIdentity;
        v185 = *(_OWORD *)(v27 + 56);
        v184 = *(_OWORD *)(v27 + 40);
        v183 = *(_OWORD *)(v27 + 24);
        *(CGAffineTransform *)(v27 + 24) = CGAffineTransformIdentity;
        CGPatternDrawInContextDelegate(v32, ContextDelegate, (uint64_t)Copy, v27, v81, v82, v83, v84);
        *(CGAffineTransform *)(Copy + 24) = v194;
        *(_OWORD *)(v27 + 24) = v183;
        *(_OWORD *)(v27 + 40) = v184;
        *(_OWORD *)(v27 + 56) = v185;
        CFRelease(v85);
        v87 = *(_QWORD *)(v32 + 96);
        if (v87)
        {
          v88 = CGDisplayListCopyReferencedPatterns((uint64_t)v78);
          if (v88)
          {
            v89 = v88;
            if (CFArrayGetCount(v88))
            {
              v179 = 0;
              v180 = &v179;
              v181 = 0x2000000000;
              v182 = 0;
              v178[0] = MEMORY[0x1E0C809B0];
              v178[1] = 0x40000000;
              v178[2] = __ripc_ReplicatePattern_block_invoke;
              v178[3] = &unk_1E1661540;
              v178[4] = &v179;
              v178[5] = v87;
              CGCFArrayApplyBlock(v89, v178);
              if (*((_BYTE *)v180 + 24))
              {
                CGPostError((uint64_t)"Self-referential pattern.\n", v90, v91, v92, v93, v94, v95, v96, v150);
                CFRelease(v78);
                _Block_object_dispose(&v179, 8);
LABEL_87:
                v22 = v154;
                goto LABEL_88;
              }
              _Block_object_dispose(&v179, 8);
            }
            CFRelease(v89);
          }
        }
        goto LABEL_68;
      }
      CFRelease(v78);
    }
    v78 = 0;
LABEL_68:
    if (v39)
    {
      __asm { FMOV            V1.2D, #1.0 }
      v106 = vdivq_f64(_Q1, vaddq_f64(v170, v166));
    }
    else
    {
      v106 = 0uLL;
    }
    v164 = v106;
    v107 = v159;
    v108 = 0;
    v109 = v162;
    v168 = v161;
    while (1)
    {
      v110 = 0;
      v160 = v107;
      v111 = v107;
      do
      {
        v172 = v111;
        v175 = v109;
        v218.origin.x = v111.f64[0] + v74;
        v218.origin.y = v111.f64[1] + v75;
        v216.origin.x = a8;
        v216.origin.y = a9;
        v216.size.width = a10;
        v216.size.height = a11;
        v218.size.width = v72;
        v218.size.height = v73;
        if (!CGRectIntersectsRect(v216, v218))
          goto LABEL_82;
        v109 = v175;
        if (!v39)
        {
          v117 = v172;
          v120 = v168;
LABEL_79:
          v175 = v109;
          *(float64x2_t *)(v27 + 24) = v109;
          v168 = v120;
          *(float64x2_t *)(v27 + 40) = v120;
          *(float64x2_t *)(v27 + 56) = v117;
          if (v78)
            CGDisplayListDrawInContextDelegate((uint64_t)v78, (uint64_t)v35, (unsigned int *)Copy, v27, 0);
          else
            CGPatternDrawInContextDelegate(v32, v35, (uint64_t)Copy, v27, v112, v113, v114, v115);
LABEL_82:
          v116 = v172;
          v109 = v175;
          goto LABEL_83;
        }
        v116 = v172;
        v117 = vrndaq_f64(v172);
        v118 = vmulq_f64(v164, vsubq_f64(vrndaq_f64(vaddq_f64(vaddq_f64(v172, v170), v166)), v117));
        if (v118.f64[0] != 0.0 && v118.f64[1] != 0.0)
        {
          v119 = vabsq_f64(v118);
          v109 = vmulq_f64(v119, v162);
          v120 = vmulq_f64(v119, v161);
          goto LABEL_79;
        }
LABEL_83:
        ++v110;
        v111 = vaddq_f64(v116, v170);
      }
      while (v110 <= v76);
      ++v108;
      v107 = vaddq_f64(v160, v166);
      if (v108 > v77)
      {
        if (v78)
          CFRelease(v78);
        goto LABEL_87;
      }
    }
  }
  v194.a = v156;
  v194.b = rect;
  v194.c = width;
  v194.d = v151;
  *(_QWORD *)&v183 = v97;
  *(float64x2_t *)(v27 + 24) = v162;
  *(float64x2_t *)(v27 + 40) = v161;
  *(float64x2_t *)(v27 + 56) = v159;
  if (width != v167
    || v151 != v163
    || v35
    && ((v98 = (unsigned int (*)(_QWORD *, char *, uint64_t, CGAffineTransform *, __int128 *, _QWORD, uint64_t))v35[17]) == 0
     || v98(v35, Copy, v27, &v194, &v183, 0, 1)))
  {
    if (v39)
    {
      __asm { FMOV            V1.2D, #1.0 }
      v104 = vdivq_f64(_Q1, vaddq_f64(v170, v166));
    }
    else
    {
      v104 = 0uLL;
    }
    v165 = v104;
    v137 = 0;
    v138 = (unint64_t)v171;
    v139 = (unint64_t)v174;
    v140 = v162;
    v169 = v161;
    do
    {
      v141 = 0;
      v142 = v159;
      do
      {
        v173 = v142;
        v176 = v140;
        v219.origin.x = v142.f64[0] + v74;
        v219.origin.y = v142.f64[1] + v75;
        v217.origin.x = a8;
        v217.origin.y = a9;
        v217.size.width = a10;
        v217.size.height = a11;
        v219.size.width = v72;
        v219.size.height = v73;
        if (!CGRectIntersectsRect(v217, v219))
        {
          v143 = v173;
          v140 = v176;
          goto LABEL_118;
        }
        v140 = v176;
        if (v39)
        {
          v143 = v173;
          v144 = vrndaq_f64(v173);
          v145 = vmulq_f64(v165, vsubq_f64(vrndaq_f64(vaddq_f64(vaddq_f64(v173, v170), v166)), v144));
          if (v145.f64[0] == 0.0 || v145.f64[1] == 0.0)
            goto LABEL_118;
          v146 = vabsq_f64(v145);
          v140 = vmulq_f64(v146, v162);
          v147 = vmulq_f64(v146, v161);
        }
        else
        {
          v143 = v173;
          v144 = v173;
          v147 = v169;
        }
        *(float64x2_t *)(v27 + 24) = v140;
        v169 = v147;
        *(float64x2_t *)(v27 + 40) = v147;
        *(float64x2_t *)(v27 + 56) = v144;
        if (v35)
        {
          v148 = (uint64_t (*)(_QWORD *, char *, uint64_t, _QWORD, double, double, double, double))v35[10];
          if (!v148)
            goto LABEL_88;
          v177 = v140;
          v149 = v148(v35, Copy, v27, v183, v194.a, v194.b, v194.c, v194.d);
          v143 = v173;
          v140 = v177;
          if (v149)
            goto LABEL_88;
        }
LABEL_118:
        ++v141;
        v142 = vaddq_f64(v143, v170);
      }
      while (v141 <= v138);
      ++v137;
      v159 = vaddq_f64(v159, v166);
    }
    while (v137 <= v139);
  }
LABEL_88:
  a12 = v153;
  v21 = v152;
  if (Copy)
    goto LABEL_89;
LABEL_92:
  CGGStateRelease(v27);
  ripc_ContextRestore((uint64_t)v21, (uint64_t)&v187);
  if (a12 < 1.0)
  {
    if (v22)
    {
      v123 = *(_QWORD *)v22;
      if (*(_QWORD *)v22)
      {
        v124 = a12;
        if (v124 < 1.0 && (*(_DWORD *)(v22 + 20) & 0x80000000) == 0 && (*(_DWORD *)(v22 + 24) & 0x80000000) == 0)
        {
          v210 = 0;
          v208 = 0u;
          v209 = 0u;
          v206 = 0u;
          v207 = 0u;
          v204 = 0u;
          v205 = 0u;
          v202 = 0u;
          v203 = 0u;
          v200 = 0u;
          v201 = 0u;
          v198 = 0u;
          v199 = 0u;
          v196 = 0u;
          v197 = 0u;
          v195 = 0u;
          memset(&v194, 0, sizeof(v194));
          v185 = 0u;
          v186 = 0u;
          v183 = 0u;
          v184 = 0u;
          v125 = (unsigned int **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v123 + 32))(v22, 32, v22 + 12);
          if (v125)
          {
            v132 = v125;
            v133 = *v125;
            if (*v125
              && (*(_QWORD *)(v22 + 56) || ripl_CreateMask(v22, 1, v126, v127, v128, v129, v130, v131)))
            {
              v134 = *(CGAffineTransform **)(v22 + 40);
              if (v134)
              {
                v135 = LODWORD(v134->a) & 0xFFFFFF00 | 1;
              }
              else
              {
                *(_QWORD *)&v206 = 0;
                v204 = 0u;
                v205 = 0u;
                v202 = 0u;
                v203 = 0u;
                v200 = 0u;
                v201 = 0u;
                v198 = 0u;
                v199 = 0u;
                v196 = 0u;
                v197 = 0u;
                v195 = 0u;
                v134 = &v194;
                v135 = 1;
                memset(&v194, 0, sizeof(v194));
              }
              LODWORD(v134->a) = v135;
              ripl_BltOpDestination((uint64_t)v134, v22 + 12, v22);
              ripl_BltOpSourceLayer((uint64_t)v134, (_DWORD *)(v22 + 12), (_DWORD *)v22, 0, v22);
              LODWORD(v134[2].d) = 0;
              LODWORD(v134[2].tx) = 0;
              if ((LODWORD(v134->a) & 0xFF0000) != 0)
              {
                LODWORD(v134->a) &= 0xFF00FFFF;
                HIDWORD(v134[2].d) = 0;
                v134[2].ty = 0.0;
                v134[2].b = 0.0;
                v134[2].c = 0.0;
              }
              *(_QWORD *)&v183 = *v133;
              v184 = 0uLL;
              *((float *)&v183 + 2) = a12;
              v185 = *(unint64_t *)(v22 + 20);
              v186 = 0uLL;
              if ((*((unsigned int (**)(unsigned int **, CGAffineTransform *, __int128 *))v133 + 5))(v132, v134, &v183))
              {
                v136 = v22 + 12;
              }
              else
              {
                v136 = 0;
              }
            }
            else
            {
              v136 = 0;
            }
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 48))(v22, v136);
          }
        }
      }
    }
  }
}

CGFloat CGGStateResetClip(uint64_t a1)
{
  char *v2;
  CGFloat result;

  CGClipStackRelease(*(void **)(a1 + 112));
  v2 = (char *)malloc_type_malloc(0x98uLL, 0x2062DE7BuLL);
  *(_DWORD *)v2 = 1;
  *((_DWORD *)v2 + 1) = 0;
  *((_DWORD *)v2 + 2) = 0;
  result = CGRectInfinite.origin.x;
  *(CGRect *)(v2 + 48) = CGRectInfinite;
  *(CGRect *)(v2 + 80) = CGRectInfinite;
  *(CGRect *)(v2 + 16) = CGRectInfinite;
  *((_QWORD *)v2 + 15) = 0;
  *((_QWORD *)v2 + 16) = 0;
  *((_QWORD *)v2 + 14) = 3;
  *(_QWORD *)(a1 + 112) = v2;
  *(CGRect *)(a1 + 80) = CGRectInfinite;
  *(_BYTE *)(a1 + 20) &= ~1u;
  return result;
}

void ripc_ContextRestore(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;

  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v4 = *(_OWORD *)(a2 + 120);
  v5 = *(_OWORD *)(a2 + 136);
  v6 = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v6;
  *(_OWORD *)(a1 + 136) = v5;
  *(_OWORD *)(a1 + 120) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v7 = *(_DWORD **)(a1 + 56);
  if (v7)
    ripr_release(v7);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v8 = *(_DWORD **)(a1 + 64);
  if (v8)
    ripr_release(v8);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a1 + 80);
  if (v9 && *(_QWORD *)v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  ripc_ReleaseClipState((_QWORD **)(a1 + 72));
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
}

char *CGRenderingStateCreateCopy(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  __int128 v3;
  __int128 v4;

  v1 = a1;
  if (a1)
  {
    v2 = (char *)malloc_type_malloc(0x58uLL, 0x2062DE7BuLL);
    *(_DWORD *)v2 = 1;
    if (v2 != (char *)v1)
    {
      *(_OWORD *)(v2 + 8) = *(_OWORD *)(v1 + 8);
      v3 = *(_OWORD *)(v1 + 24);
      v4 = *(_OWORD *)(v1 + 40);
      *(_OWORD *)(v2 + 56) = *(_OWORD *)(v1 + 56);
      *(_OWORD *)(v2 + 40) = v4;
      *(_OWORD *)(v2 + 24) = v3;
      *((_QWORD *)v2 + 9) = *(_QWORD *)(v1 + 72);
      *((_DWORD *)v2 + 1) = *(_DWORD *)(v1 + 4);
      *((_DWORD *)v2 + 20) = *(_DWORD *)(v1 + 80);
      *((_WORD *)v2 + 42) = *(_WORD *)(v1 + 84);
      v2[86] = *(_BYTE *)(v1 + 86);
      return v2;
    }
  }
  return (char *)v1;
}

double CGRenderingStateSynchronize(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  double result;

  if (a1 != a2)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v2 = *(_OWORD *)(a2 + 24);
    v3 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 24) = v2;
    result = *(double *)(a2 + 72);
    *(double *)(a1 + 72) = result;
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    *(_WORD *)(a1 + 84) = *(_WORD *)(a2 + 84);
    *(_BYTE *)(a1 + 86) = *(_BYTE *)(a2 + 86);
  }
  return result;
}

double CGStyleGetDrawBoundingBoxWithMatrix(uint64_t a1, _OWORD *a2, double a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  double v9;
  BOOL v10;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  CGFloat v17;
  CGFloat v18;
  CGAffineTransform v19;
  uint64_t v20;
  uint64_t v21;
  CGRect v22;
  CGRect v23;

  v9 = a3;
  v10 = a3 == INFINITY || a4 == INFINITY;
  if (!v10 && a5 != 0.0 && a6 != 0.0)
  {
    if (a3 == -8.98846567e307 && a4 == -8.98846567e307 && a5 == 1.79769313e308 && a6 == 1.79769313e308)
    {
      return -8.98846567e307;
    }
    else
    {
      v20 = 0;
      v21 = 0;
      if (get_expansion(a1, (double *)&v20))
      {
        v13 = v20;
        v14 = v21;
        v15 = a2[1];
        *(_OWORD *)&v19.a = *a2;
        *(_OWORD *)&v19.c = v15;
        *(_OWORD *)&v19.tx = a2[2];
        v16 = 0;
        *(_QWORD *)&v15 = 0;
        v22 = CGRectApplyAffineTransform(*(CGRect *)(&v13 - 2), &v19);
        v17 = -fabs(v22.size.width);
        v18 = -fabs(v22.size.height);
        v22.origin.x = v9;
        v22.origin.y = a4;
        v22.size.width = a5;
        v22.size.height = a6;
        v23 = CGRectInset(v22, v17, v18);
        *(_QWORD *)&v9 = (unint64_t)CGRectIntegral(v23);
      }
    }
  }
  return v9;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double x;
  double y;
  double v8;
  double v9;

  if (rect.origin.x != INFINITY && rect.origin.y != INFINITY)
  {
    if (rect.size.width < 0.0 || rect.size.height < 0.0)
      rect = CGRectStandardize(rect);
    x = rect.origin.x;
    y = rect.origin.y;
    v8 = rect.size.width + dx * -2.0;
    rect.size.width = 0.0;
    rect.origin.x = INFINITY;
    if (v8 < 0.0)
    {
      rect.origin.y = INFINITY;
      rect.size.height = 0.0;
    }
    else
    {
      v9 = rect.size.height + dy * -2.0;
      rect.origin.y = INFINITY;
      rect.size.height = 0.0;
      if (v9 >= 0.0)
      {
        rect.origin.y = y + dy;
        rect.origin.x = x + dx;
        rect.size.width = v8;
        rect.size.height = v9;
      }
    }
  }
  return rect;
}

uint64_t get_expansion(uint64_t a1, double *a2)
{
  int v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v11;
  double v12;
  __double2 v13;

  v4 = *(_DWORD *)(a1 + 20);
  if (v4 == 3)
  {
    v7 = *(double *)(a1 + 40);
LABEL_9:
    v8 = fabs(v7);
    v9 = v8;
    goto LABEL_13;
  }
  if (v4 == 2)
  {
    v7 = *(double *)(a1 + 56);
    goto LABEL_9;
  }
  if (v4 != 1)
    return 0;
  v5 = *(double *)(a1 + 40);
  v6 = 0.0;
  if (v5 <= 89.9)
  {
    if (v5 >= 0.1)
    {
      v11 = *(double *)(a1 + 64);
      v6 = v11 / tan(v5 * 3.14159265 / 180.0);
    }
    else
    {
      v6 = 1.79769313e308;
    }
  }
  v12 = fabs(*(double *)(a1 + 72));
  v13 = __sincos_stret((*(double *)(a1 + 48) + -180.0) * 3.14159265 / 180.0);
  v8 = v12 + fabs(v6 * v13.__cosval);
  v9 = v12 + fabs(v6 * v13.__sinval);
LABEL_13:
  *a2 = v8;
  a2[1] = v9;
  return 1;
}

unint64_t CGColorGetPatternBaseColor(uint64_t a1)
{
  uint64_t v1;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  CGColorSpace *v6;
  CGColorRef v7;
  char v9;

  if (a1 < 1)
    return 0;
  v1 = *(_QWORD *)(a1 + 32);
  if (!v1 || *(_BYTE *)(v1 + 185))
    return 0;
  v3 = (unint64_t *)(a1 + 40);
  if (*(_QWORD *)(a1 + 40))
    return *v3;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 24);
    if ((*(_DWORD *)(v5 + 24) - 5) <= 1)
    {
      v6 = **(CGColorSpace ***)(v5 + 88);
      if (v6)
      {
        v7 = CGColorCreate(v6, (const CGFloat *)(a1 + 64));
        while (!__ldxr(v3))
        {
          if (!__stxr((unint64_t)v7, v3))
          {
            v9 = 1;
            goto LABEL_17;
          }
        }
        v9 = 0;
        __clrex();
LABEL_17:
        if ((v9 & 1) == 0)
        {
          if (v7)
            CFRelease(v7);
        }
        return *v3;
      }
    }
  }
  return 0;
}

uint64_t ripc_DrawImages(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  _QWORD *v13;
  float64x2_t v14;
  float64x2_t v15;
  int8x16_t v16;
  double v17;
  double v18;
  double v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  uint64_t (*v24)(void);
  uint64_t v25;
  float64x2_t v26;
  double *v27;
  double *v28;
  uint64_t v29;
  _QWORD *EPSRep;
  _BYTE *alternate_image;
  const void *v32;
  CGImage *v33;
  unint64_t v34;
  unint64_t v35;
  double height;
  double width;
  double y;
  double x;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  BOOL v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double *v55;
  unint64_t ImageTransformation;
  unint64_t v57;
  uint64_t v58;
  double v59;
  double v60;
  double v63;
  double v64;
  double v65;
  double v66;
  _BOOL4 ShouldInterpolate;
  int ImageInterpolation;
  int *v69;
  uint64_t RenderingIntent;
  unsigned int v71;
  int v72;
  int v73;
  __int128 *v74;
  double *v75;
  double v76;
  double v77;
  double v78;
  double *v79;
  float64x2_t *v80;
  uint64_t v81;
  uint64_t v82;
  float64x2_t v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  unsigned int v119;
  unint64_t v120;
  double v121;
  unsigned int v122;
  int v123;
  double v124;
  unsigned int v125;
  double v126;
  unsigned int v127;
  double v128;
  double v129;
  int v130;
  double v131;
  double v132;
  double v133;
  BOOL v134;
  double v135;
  double v136;
  BOOL v138;
  double v139;
  int v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  unsigned int v172;
  double v173;
  unsigned int v174;
  double v175;
  unsigned int v176;
  double v177;
  unsigned int v178;
  double v179;
  double v180;
  uint64_t v181;
  int v182;
  _BOOL4 v183;
  uint64_t v184;
  unsigned int v185;
  int v186;
  int v187;
  double *v188;
  double v189;
  double v190;
  float64x2_t *v191;
  double v193;
  double v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  double v198;
  double v199;
  double v200;
  int v201;
  uint64_t v202;
  unint64_t v203;
  CGImage *v204;
  uint64_t v205;
  uint64_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  _BOOL4 v211;
  _QWORD v212[2];
  __int128 v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  CGRect v232;
  CGRect v233;
  CGRect v234;
  CGRect v235;
  CGRect v236;
  CGRect v237;
  CGRect v238;

  v12 = a2;
  if (a1)
    v13 = *(_QWORD **)(a1 + 288);
  else
    v13 = 0;
  v230 = 0u;
  v231 = 0u;
  v229 = 0u;
  if (ripc_GetRenderingState((uint64_t)v13, a2, a3, (uint64_t)&v229))
  {
    v14.f64[0] = (float64_t)v13[5];
    v15.f64[0] = 1.0;
    v16 = (int8x16_t)vdupq_lane_s64(vceqq_f64(v14, v15).i64[0], 0);
    v209 = (float64x2_t)vbslq_s8(v16, *(int8x16_t *)(a3 + 56), (int8x16_t)vmulq_n_f64(*(float64x2_t *)(a3 + 56), v14.f64[0]));
    v208 = (float64x2_t)vbslq_s8(v16, *(int8x16_t *)(a3 + 24), (int8x16_t)vmulq_n_f64(*(float64x2_t *)(a3 + 24), v14.f64[0]));
    v210 = (float64x2_t)vbslq_s8(v16, *(int8x16_t *)(a3 + 40), (int8x16_t)vmulq_n_f64(*(float64x2_t *)(a3 + 40), v14.f64[0]));
    v17 = 0.0;
    v18 = 0.0;
    v19 = 0.0;
    *(double *)&v20 = 0.0;
    if (!a6)
    {
      v216 = v208;
      v217 = v210;
      v218 = v209;
      v20 = CGRectApplyInverseAffineTransform(v216.f64, COERCE__N64((double)SDWORD2(v230)), (double)SHIDWORD(v230), (double)(int)v231, (double)SDWORD1(v231)).n64_u64[0];
      v19 = v21;
      v18 = v22;
      v17 = v23;
    }
    if (*v13)
    {
      v24 = *(uint64_t (**)(void))(*v13 + 248);
      if (v24)
      {
        v25 = v24();
        if (v25)
        {
          v211 = *(_DWORD *)(v25 + 40) == 7;
          if (!a7)
            return 0;
          goto LABEL_13;
        }
      }
    }
    v211 = 0;
    if (a7)
    {
LABEL_13:
      v206 = (uint64_t)v13;
      v26 = 0uLL;
      v27 = (double *)(a4 + 24);
      v28 = (double *)(a6 + 16);
      v207 = vmulq_f64(v210, (float64x2_t)0);
      while (1)
      {
        v227 = v26;
        v228 = v26;
        v226 = v26;
        v224 = 0;
        v225 = 0;
        v220 = 0;
        v221 = 0;
        v219 = 0;
        v217 = v26;
        v218 = v26;
        v215 = v26;
        v216 = v26;
        v214 = v26;
        v29 = *a5;
        if (!*a5 || *(v27 - 1) == 0.0 || *v27 == 0.0)
          goto LABEL_29;
        EPSRep = CGImageGetEPSRep((_QWORD *)*a5);
        if (EPSRep)
          v29 = EPSRep[2];
        alternate_image = create_alternate_image(v29, v211);
        v32 = alternate_image;
        v33 = alternate_image ? (CGImage *)alternate_image : (CGImage *)v29;
        if ((ripc_GetImageSize((uint64_t)v33, &v225, &v224) & 1) != 0)
        {
          v34 = v224;
          v35 = v225;
          v222 = v224;
          v223 = v225;
          height = v17;
          width = v18;
          y = v19;
          x = *(double *)&v20;
          if (!a6)
            goto LABEL_32;
          if (*v28 != 0.0)
          {
            v41 = v28[1];
            if (v41 != 0.0)
              break;
          }
        }
        v26 = 0uLL;
        if (v32)
        {
          CFRelease(v32);
LABEL_28:
          v26 = 0uLL;
        }
LABEL_29:
        ++a5;
        v27 += 4;
        v28 += 4;
        if (!--a7)
          return 0;
      }
      v42 = *((_QWORD *)v28 - 2);
      v43 = *((_QWORD *)v28 - 1);
      v204 = v33;
      v44 = v225;
      v45 = v224;
      v40 = *v28;
      v232 = CGRectStandardize(*(CGRect *)(&v41 - 3));
      v34 = v45;
      v35 = v44;
      v33 = v204;
      x = v232.origin.x;
      y = v232.origin.y;
      width = v232.size.width;
      height = v232.size.height;
LABEL_32:
      v203 = v34;
      v205 = v12;
      v197 = v20;
      v198 = v19;
      v199 = v18;
      v200 = v17;
      v233 = CGRectStandardize(*(CGRect *)(v27 - 3));
      v46 = v233.origin.x;
      v47 = v233.origin.y;
      v48 = v233.size.width;
      v49 = v233.size.height;
      v237.origin.x = x;
      v237.origin.y = y;
      v237.size.width = width;
      v237.size.height = height;
      v50 = CGRectEqualToRect(v233, v237);
      v202 = a6;
      if (v50)
        goto LABEL_34;
      v234.origin.x = v46;
      v234.origin.y = v47;
      v234.size.width = v48;
      v234.size.height = v49;
      v238.origin.x = x;
      v238.origin.y = y;
      v238.size.width = width;
      v238.size.height = height;
      if (CGRectContainsRect(v234, v238))
      {
LABEL_34:
        v213 = 0uLL;
        v212[0] = 0;
        v212[1] = 0;
        if (v48 < 0.0 || v49 < 0.0)
        {
          v235.origin.x = v46;
          v235.origin.y = v47;
          v235.size.width = v48;
          v235.size.height = v49;
          *(CGRect *)&v51 = CGRectStandardize(v235);
        }
        else
        {
          v51 = v46;
          v52 = v47;
          v53 = v48;
          v54 = v49;
        }
        v226 = vmlaq_n_f64(v207, v208, v53);
        v227 = vmlaq_f64(vmulq_n_f64(v210, v54), (float64x2_t)0, v208);
        v228 = vaddq_f64(v209, vmlaq_n_f64(vmulq_n_f64(v210, v52), v208, v51));
        if (v50)
        {
          v55 = 0;
        }
        else
        {
          v214.f64[0] = (x - v46) * (1.0 / v48);
          v214.f64[1] = (y - v47) * (1.0 / v49);
          v215.f64[0] = 1.0 / v48 * (width + x - v46) - v214.f64[0];
          v215.f64[1] = 1.0 / v49 * (height + y - v47) - v214.f64[1];
          v55 = (double *)&v214;
        }
        v18 = v199;
        v17 = v200;
        v20 = v197;
        v19 = v198;
        ImageTransformation = ripc_GetImageTransformation(v33, (int *)&v230 + 2, v35, v203, v55, v226.f64, (uint64_t)&v213, (int *)v212, (uint64_t)&v220);
        if (!ImageTransformation)
          goto LABEL_75;
        v57 = ImageTransformation;
        v195 = v35;
        if (ImageTransformation >= 4)
        {
          ShouldInterpolate = CGImageGetShouldInterpolate(v33);
          ImageInterpolation = ripc_GetImageInterpolation(v205, *(_DWORD *)(*(_QWORD *)(a3 + 120) + 4), ShouldInterpolate);
          v201 = ImageInterpolation;
          if (ImageInterpolation >= 3)
          {
            LODWORD(v58) = ImageInterpolation;
            if ((v57 & 2) != 0)
              v69 = 0;
            else
              v69 = (int *)&v213;
            if (ripc_GetImageInterpolationSize(v226.f64, (int64_t *)&v223, &v222, v69))
              v58 = v58;
            else
              v58 = 1;
          }
          else
          {
            v58 = 1;
          }
        }
        else
        {
          v58 = 1;
          v201 = 1;
        }
        RenderingIntent = CGImageGetRenderingIntent(v33);
        if (!(_DWORD)RenderingIntent)
        {
          v71 = *(_DWORD *)(*(_QWORD *)(a3 + 120) + 4);
          v72 = v71 << 12;
          if (((v71 >> 20) & 0xF) != 0)
            v73 = v71 << 8;
          else
            v73 = v71 << 12;
          if (!(v73 >> 28))
            v73 = v72;
          RenderingIntent = (v73 >> 28);
        }
        v74 = (v57 & 2) != 0 ? 0 : &v213;
        v75 = (double *)ripc_AcquireRIPImageData(v206, v33, v223, v222, (uint64_t)v74, 0, v58, RenderingIntent);
        if (!v75)
        {
LABEL_75:
          v12 = v205;
          if (v32)
            CFRelease(v32);
          a6 = v202;
          goto LABEL_28;
        }
        v79 = v75;
        if (v57 >= 4)
          v80 = &v226;
        else
          v80 = 0;
        ripc_InitializeImage((uint64_t)&v216, (uint64_t)v212, v75, v201, v195, v203, v80->f64, v55, v76, v77, v78);
        goto LABEL_72;
      }
      v59 = v46 + floor((x - v46) / v48) * v48;
      v60 = v47 + floor((y - v47) / v49) * v49;
      _D30 = ceil((width + x - v59) / v48);
      _D31 = ceil((height + y - v60) / v49);
      if (_D30 <= 0.0 && _D31 <= 0.0)
        goto LABEL_249;
      if (v48 < 0.0 || v49 < 0.0)
      {
        v236.origin.x = v59;
        v236.origin.y = v60;
        v236.size.width = v48;
        v236.size.height = v49;
        v193 = _D31;
        v194 = _D30;
        *(CGRect *)&v63 = CGRectStandardize(v236);
        _D31 = v193;
        _D30 = v194;
      }
      else
      {
        v63 = v59;
        v64 = v60;
        v65 = v48;
        v66 = v49;
      }
      _Q4 = vmlaq_n_f64(v207, v208, v65);
      _Q2 = vmlaq_f64(vmulq_n_f64(v210, v66), (float64x2_t)0, v208);
      v226 = _Q4;
      v227 = _Q2;
      v85 = vaddq_f64(v209, vmlaq_n_f64(vmulq_n_f64(v210, v64), v208, v63));
      v228 = v85;
      v86 = 1.0 / (v48 * _D30);
      v87 = 1.0 / (v49 * _D31);
      v88 = (x - v59) * v86;
      v89 = (y - v60) * v87;
      v214.f64[0] = v88;
      v214.f64[1] = v89;
      v90 = (height + y - v60) * v87;
      v91 = (width + x - v59) * v86 - v88;
      v92 = v90 - v89;
      v215.f64[0] = v91;
      v215.f64[1] = v92;
      v93 = vmlad_n_f64(v85.f64[0], _D30, _Q4.f64[0]);
      __asm { FMLA            D0, D30, V4.D[1] }
      v99 = v93 > v85.f64[0] ? v93 : v85.f64[0];
      if (v93 >= v85.f64[0])
      {
        v100 = v85.f64[0];
      }
      else
      {
        v99 = v85.f64[0];
        v100 = v93;
      }
      v101 = _D0 > v85.f64[1] ? _D0 : v85.f64[1];
      if (_D0 >= v85.f64[1])
      {
        v102 = v85.f64[1];
      }
      else
      {
        v101 = v85.f64[1];
        v102 = _D0;
      }
      v103 = vmlad_n_f64(v93, _D31, _Q2.f64[0]);
      __asm { FMLA            D0, D31, V2.D[1] }
      v105 = v103 > v99 ? v103 : v99;
      v106 = v103 >= v100 ? v105 : v99;
      v107 = v103 >= v100 ? v100 : v103;
      v108 = _D0 > v101 ? _D0 : v101;
      if (_D0 >= v102)
      {
        v109 = v102;
      }
      else
      {
        v108 = v101;
        v109 = _D0;
      }
      v110 = v103 - _Q4.f64[0] * _D30;
      if (v110 >= v107)
      {
        if (v110 > v106)
          v106 = v110;
      }
      else
      {
        v107 = v110;
      }
      v111 = _D0 - _Q4.f64[1] * _D30;
      v112 = v111 > v108 ? v111 : v108;
      if (v111 >= v109)
      {
        v113 = v109;
      }
      else
      {
        v112 = v108;
        v113 = v111;
      }
      v114 = v107 >= (double)SDWORD2(v230) ? v107 : (double)SDWORD2(v230);
      v115 = v106 <= (double)(int)v231 + (double)SDWORD2(v230) ? v106 : (double)(int)v231 + (double)SDWORD2(v230);
      if (v114 >= v115)
        goto LABEL_249;
      v116 = (double)SHIDWORD(v230);
      if (v113 >= (double)SHIDWORD(v230))
        v116 = v113;
      v117 = v112 <= (double)SDWORD1(v231) + (double)SHIDWORD(v230)
           ? v112
           : (double)SDWORD1(v231) + (double)SHIDWORD(v230);
      if (v116 >= v117)
      {
LABEL_249:
        v12 = v205;
        if (v32)
          CFRelease(v32);
        a6 = v202;
        v18 = v199;
        v17 = v200;
        v20 = v197;
        v19 = v198;
        goto LABEL_28;
      }
      v118 = v107 + 0.00390625;
      if (v107 + 0.00390625 <= 1073741820.0)
      {
        v120 = v203;
        if (v118 >= -1073741820.0)
          v119 = vcvtmd_s64_f64(v118);
        else
          v119 = -1073741823;
      }
      else
      {
        v119 = 0x3FFFFFFF;
        v120 = v203;
      }
      LODWORD(v213) = v119;
      v121 = v107 + v106 - v107 + -0.00390625;
      if (v121 <= 1073741820.0)
      {
        if (v121 >= -1073741820.0)
          v122 = vcvtpd_s64_f64(v121);
        else
          v122 = -1073741823;
      }
      else
      {
        v122 = 0x3FFFFFFF;
      }
      v123 = v122 - v119;
      DWORD2(v213) = v123;
      v124 = v113 + 0.00390625;
      if (v113 + 0.00390625 <= 1073741820.0)
      {
        v125 = vcvtmd_s64_f64(v124);
        if (v124 < -1073741820.0)
          v125 = -1073741823;
      }
      else
      {
        v125 = 0x3FFFFFFF;
      }
      DWORD1(v213) = v125;
      v126 = v113 + v112 - v113 + -0.00390625;
      if (v126 <= 1073741820.0)
      {
        v127 = vcvtpd_s64_f64(v126);
        if (v126 < -1073741820.0)
          v127 = -1073741823;
      }
      else
      {
        v127 = 0x3FFFFFFF;
      }
      v128 = (double)v35;
      v129 = (double)v120;
      v130 = v127 - v125;
      HIDWORD(v213) = v130;
      v131 = _D30 * (double)v35;
      if (v131 == (double)v123)
      {
        v132 = _D31 * v129;
        v133 = fabs(_Q4.f64[1]);
        v134 = _D31 * v129 == (double)v130 && v133 <= 0.00390625;
        v135 = vabdd_f64(_Q4.f64[0], v128);
        v136 = fabs(_Q2.f64[0]);
        v138 = v134 && v135 <= 0.00390625 && v136 <= 0.00390625;
        v139 = vabdd_f64(_Q2.f64[1], v129);
        if (v138 && v139 <= 0.00390625)
        {
          v141 = 1;
LABEL_163:
          v142 = 1.0 / v128;
          v143 = 1.0 / v129;
          v144 = v142 * _Q4.f64[0];
          _Q4.f64[0] = v142 * _Q4.f64[1];
          v226.f64[0] = v144;
          v226.f64[1] = v142 * _Q4.f64[1];
          v145 = v143 * _Q2.f64[0];
          v146 = v143 * _Q2.f64[1];
          v227.f64[0] = v143 * _Q2.f64[0];
          v227.f64[1] = v143 * _Q2.f64[1];
          v147 = v131 * v88;
          v148 = v132 * v89;
          _Q2.f64[0] = v131 * v91;
          v149 = v132 * v92;
          v85.f64[0] = v85.f64[0] + v144 * v147 + v145 * v148;
          v150 = v85.f64[1] + v142 * _Q4.f64[1] * v147 + v143 * _Q2.f64[1] * v148;
          v151 = v85.f64[0] + v144 * _Q2.f64[0];
          v152 = v150 + v142 * _Q4.f64[1] * _Q2.f64[0];
          if (v151 > v85.f64[0])
            v153 = v85.f64[0] + v144 * _Q2.f64[0];
          else
            v153 = v85.f64[0];
          if (v151 >= v85.f64[0])
          {
            v154 = v85.f64[0];
          }
          else
          {
            v153 = v85.f64[0];
            v154 = v85.f64[0] + v144 * _Q2.f64[0];
          }
          if (v152 > v150)
            v155 = v150 + _Q4.f64[0] * _Q2.f64[0];
          else
            v155 = v150;
          if (v152 >= v150)
            v156 = v155;
          else
            v156 = v150;
          if (v152 >= v150)
            v157 = v150;
          else
            v157 = v150 + _Q4.f64[0] * _Q2.f64[0];
          v158 = v151 + v145 * v149;
          v159 = v152 + v146 * v149;
          if (v158 > v153)
            v160 = v158;
          else
            v160 = v153;
          if (v158 >= v154)
          {
            v161 = v154;
          }
          else
          {
            v160 = v153;
            v161 = v158;
          }
          if (v159 > v156)
            v162 = v152 + v146 * v149;
          else
            v162 = v156;
          if (v159 >= v157)
          {
            v163 = v157;
          }
          else
          {
            v162 = v156;
            v163 = v159;
          }
          v164 = v158 - v144 * _Q2.f64[0];
          if (v164 >= v161)
          {
            if (v164 > v160)
              v160 = v158 - v144 * _Q2.f64[0];
          }
          else
          {
            v161 = v158 - v144 * _Q2.f64[0];
          }
          v165 = v159 - _Q4.f64[0] * _Q2.f64[0];
          if (v165 > v162)
            v166 = v165;
          else
            v166 = v162;
          if (v165 >= v163)
          {
            v167 = v163;
          }
          else
          {
            v166 = v162;
            v167 = v165;
          }
          if (v114 >= v161)
            v168 = v114;
          else
            v168 = v161;
          if (v115 <= v160)
            v169 = v115;
          else
            v169 = v160;
          if (v168 < v169)
          {
            if (v116 >= v167)
              v170 = v116;
            else
              v170 = v167;
            if (v117 <= v166)
              v166 = v117;
            if (v170 < v166)
            {
              v171 = v168 + 0.00390625;
              if (v168 + 0.00390625 <= 1073741820.0)
              {
                v172 = vcvtmd_s64_f64(v171);
                if (v171 < -1073741820.0)
                  v172 = -1073741823;
              }
              else
              {
                v172 = 0x3FFFFFFF;
              }
              LODWORD(v220) = v172;
              v173 = v168 + v169 - v168 + -0.00390625;
              if (v173 <= 1073741820.0)
              {
                v174 = vcvtpd_s64_f64(v173);
                if (v173 < -1073741820.0)
                  v174 = -1073741823;
              }
              else
              {
                v174 = 0x3FFFFFFF;
              }
              LODWORD(v221) = v174 - v172;
              v175 = v170 + 0.00390625;
              if (v170 + 0.00390625 <= 1073741820.0)
              {
                v176 = vcvtmd_s64_f64(v175);
                if (v175 < -1073741820.0)
                  v176 = -1073741823;
              }
              else
              {
                v176 = 0x3FFFFFFF;
              }
              HIDWORD(v220) = v176;
              v177 = v170 + v166 - v170 + -0.00390625;
              if (v177 <= 1073741820.0)
              {
                if (v177 >= -1073741820.0)
                  v178 = vcvtpd_s64_f64(v177);
                else
                  v178 = -1073741823;
              }
              else
              {
                v178 = 0x3FFFFFFF;
              }
              v179 = _D31;
              v180 = _D30;
              HIDWORD(v221) = v178 - v176;
              v196 = v35;
              if ((v141 & 1) != 0)
              {
                v181 = 1;
                v182 = 1;
              }
              else
              {
                v183 = CGImageGetShouldInterpolate(v33);
                v182 = ripc_GetImageInterpolation(v205, *(_DWORD *)(*(_QWORD *)(a3 + 120) + 4), v183);
                if (v182 >= 3)
                {
                  if (ripc_GetImageInterpolationSize(v226.f64, (int64_t *)&v223, &v222, 0))
                    v181 = v182;
                  else
                    v181 = 0;
                }
                else
                {
                  v181 = 0;
                }
              }
              v184 = CGImageGetRenderingIntent(v33);
              if (!(_DWORD)v184)
              {
                v185 = *(_DWORD *)(*(_QWORD *)(a3 + 120) + 4);
                v186 = v185 << 12;
                if (((v185 >> 20) & 0xF) != 0)
                  v187 = v185 << 8;
                else
                  v187 = v185 << 12;
                if (!(v187 >> 28))
                  v187 = v186;
                v184 = (v187 >> 28);
              }
              v188 = (double *)ripc_AcquireRIPImageData(v206, v33, v223, v222, 0, *(_QWORD *)(*(_QWORD *)(v206 + 48) + 32), v181, v184);
              if (v188)
              {
                v79 = v188;
                if (v141)
                  v191 = 0;
                else
                  v191 = &v226;
                ripc_InitializeImageTile((uint64_t)&v216, &v213, (uint64_t)v188, v182, v196, v203, v191->f64, v214.f64, v180, v179, v189, v190);
                v18 = v199;
                v17 = v200;
                v20 = v197;
                v19 = v198;
LABEL_72:
                a6 = v202;
                v12 = v205;
                if (v32)
                  CFRelease(v32);
                ripc_RenderImage(v206, v205, a3, (uint64_t *)&v229, (int *)&v220, (uint64_t)&v216, v81, v82);
                ripc_ReleaseRIPImageData(v79);
                goto LABEL_28;
              }
            }
          }
          goto LABEL_249;
        }
      }
      else
      {
        v132 = _D31 * v129;
      }
      v141 = 0;
      goto LABEL_163;
    }
  }
  return 0;
}

uint64_t ripc_GetImageSize(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  _QWORD *Mask;

  if (result)
  {
    v3 = *(_QWORD *)(result + 40);
    v4 = *(_QWORD *)(result + 48);
    if (v3)
      v5 = v4 == 0;
    else
      v5 = 1;
    if (v5)
    {
      return 0;
    }
    else
    {
      Mask = CGImageGetMask((_QWORD *)result);
      if (Mask)
      {
        if (Mask[5] > v3)
          v3 = Mask[5];
        if (Mask[6] > v4)
          v4 = Mask[6];
      }
      *a2 = v3;
      *a3 = v4;
      return 1;
    }
  }
  return result;
}

uint64_t CGColorSpaceGetRenderingIntent(_QWORD *a1)
{
  int Type;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFArray *Value;
  uint64_t v7;
  uint64_t v8;
  CFTypeID v9;
  const __CFArray *ValueAtIndex;
  CFTypeID v11;
  const __CFData *RenderingIntent_f;
  const __CFData *v13;
  unsigned int v14;
  uint64_t v15;

  if (!a1)
    return 0;
  Type = CGColorSpaceGetType(a1);
  if (Type == 11)
  {
    Value = **(const __CFArray ***)(a1[3] + 88);
    goto LABEL_14;
  }
  if (Type != 10)
  {
    if (Type == 6)
    {
      Value = *(const __CFArray **)(*(_QWORD *)(a1[3] + 88) + 16);
      goto LABEL_14;
    }
    return 0;
  }
  v7 = a1[3];
  if (*(_DWORD *)(v7 + 20) != 10)
    _CGHandleAssert("CGColorSpaceProfileSetsGetSourceProfile", 434, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpace_ProfileSets.c", "s->state->type == kCGColorSpaceProfileSets", "type = %d", v3, v4, v5, *(_DWORD *)(v7 + 20));
  v8 = *(_QWORD *)(v7 + 88);
  Value = *(const __CFArray **)(v8 + 8);
  if (Value)
  {
    v9 = CFGetTypeID(*(CFTypeRef *)(v8 + 8));
    if (v9 != CFArrayGetTypeID())
      goto LABEL_13;
    ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(Value, 0);
    Value = ValueAtIndex;
    if (!ValueAtIndex)
      goto LABEL_14;
    v11 = CFGetTypeID(ValueAtIndex);
    if (v11 == CFDictionaryGetTypeID())
      Value = (const __CFArray *)CFDictionaryGetValue(Value, CFSTR("ColorSyncProfile"));
    else
LABEL_13:
      Value = 0;
  }
LABEL_14:
  if (CGColorSpaceGetRenderingIntent_cglibrarypredicate != -1)
    dispatch_once(&CGColorSpaceGetRenderingIntent_cglibrarypredicate, &__block_literal_global_20_20916);
  RenderingIntent_f = (const __CFData *)CGColorSpaceGetRenderingIntent_f(Value);
  if (!RenderingIntent_f)
    return 0;
  v13 = RenderingIntent_f;
  v14 = *((_DWORD *)CFDataGetBytePtr(RenderingIntent_f) + 16) - 1;
  if (v14 > 2)
    v15 = 3;
  else
    v15 = dword_185003D58[v14];
  CFRelease(v13);
  return v15;
}

uint64_t CGContextGetRenderingState(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

uint64_t CGContextGetGState(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96);
}

void gradient_finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 24));
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
}

uint64_t CGRenderingStateGetMinInterpolationQuality(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t CGRenderingStateGetMaxInterpolationQuality(uint64_t a1)
{
  return *(unsigned int *)(a1 + 76);
}

BOOL CGFontGetGlyphAdvances(CGFontRef font, const CGGlyph *glyphs, size_t count, int *advances)
{
  uint64_t v8;
  unint64_t v9;
  double *v10;
  double *v11;
  _BYTE *font_info;
  _BOOL8 v13;
  BOOL result;
  double *v15;
  double v16;
  BOOL v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  ((void (*)(CGFontRef))MEMORY[0x1E0C80A78])(font);
  v10 = (double *)((char *)&v18[-1] - v8 - 7);
  if (v9 <= 0xFFFFFFFFFFFFFFELL)
    v11 = (double *)((char *)&v18[-1] - v8 - 7);
  else
    v11 = 0;
  if (v9 - 0xFFFFFFFFFFFFFFFLL >= 0xF000000000000042)
    v11 = (double *)malloc_type_malloc(16 * count, 0xC28E7C8AuLL);
  if (!v11)
    return 0;
  if (font
    && ((font_info = get_font_info(font)) == 0 ? (v13 = 1) : (v13 = font_info[104] == 0),
        (*(unsigned int (**)(_QWORD, _QWORD, _BOOL8, const CGGlyph *, size_t, double *))(*((_QWORD *)font + 2)
                                                                                                  + 304))(*((_QWORD *)font + 14), 0, v13, glyphs, count, v11)))
  {
    if (count)
    {
      v15 = v11;
      do
      {
        v16 = *v15;
        v15 += 2;
        *advances++ = (int)v16;
        --count;
      }
      while (count);
    }
    v17 = 1;
    result = 1;
  }
  else
  {
    v17 = 0;
    result = 0;
  }
  if (v11 != v10)
  {
    free(v11);
    return v17;
  }
  return result;
}

uint64_t get_glyph_advances(_QWORD *a1, float64x2_t *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, __n128 a7)
{
  uint64_t result;
  float64x2_t *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  double *v20;
  unint64_t v21;
  uint64_t v22;

  result = 0;
  if (a1)
  {
    v9 = (float64x2_t *)a6;
    if (a6)
    {
      v10 = a5;
      v11 = a4;
      if (a4 || !a5)
      {
        if (a5)
        {
          if ((a3 & 1) != 0)
          {
            get_glyph_ideal_advances(a1, a4, a5, a6, a7);
            if (a2)
            {
              v17 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)FPFontGetUnitsPerEm()), 0);
              v18 = vdivq_f64(*a2, v17);
              v19 = vdivq_f64(a2[1], v17);
              v20 = (double *)v9;
              v21 = v10;
              do
              {
                *(float64x2_t *)v20 = vmlaq_n_f64(vmulq_n_f64(v19, v20[1]), v18, *v20);
                v20 += 2;
                --v21;
              }
              while (v21);
            }
            if ((a3 & 4) == 0)
            {
              if (v10 <= 1)
                v22 = 1;
              else
                v22 = v10;
              do
              {
                *v9 = vrndaq_f64(*v9);
                ++v9;
                --v22;
              }
              while (v22);
            }
          }
          else
          {
            v14 = (_QWORD *)(a6 + 8);
            do
            {
              v11 += 2;
              FPFontGetGlyphDeviceAdvance();
              *(v14 - 1) = v15;
              *v14 = v16;
              v14 += 2;
              --v10;
            }
            while (v10);
          }
        }
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void get_glyph_ideal_advances(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, __n128 a5)
{
  unint64_t *v7;
  unsigned __int16 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  uint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v27;
  uint64_t v28;
  _QWORD v29[2];
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[66];

  v33[64] = *MEMORY[0x1E0C80C00];
  v29[1] = a1[1];
  v7 = a1 + 2;
  v8 = (unsigned __int16 *)atomic_load(a1 + 2);
  v31 = a4;
  if (!v8)
  {
    a1 = malloc_type_calloc(1uLL, 0x208uLL, 0x1080040036EC52CuLL);
    v8 = (unsigned __int16 *)a1;
    *(_WORD *)a1 = 0x7FFF;
    while (1)
    {
      v9 = __ldaxr(v7);
      if (v9)
        break;
      if (!__stlxr((unint64_t)a1, v7))
        goto LABEL_7;
    }
    __clrex();
    CGFontIndexMapRelease((char *)a1);
    v8 = (unsigned __int16 *)v9;
LABEL_7:
    a4 = v31;
  }
  v10 = 0;
  v11 = 0;
  v30 = 10 * a3;
  v12 = (double *)(a4 + 8);
  v13 = &v32;
  v14 = v33;
  do
  {
    v15 = *(unsigned __int16 *)(a2 + 2 * v10);
    if (v15 == 0xFFFF)
    {
      v16 = 0;
      goto LABEL_23;
    }
    v16 = *(unsigned __int16 *)(a2 + 2 * v10);
    if (v8 != (unsigned __int16 *)-1)
    {
      if (!v8)
      {
        v16 = -1;
LABEL_23:
        a5.n128_f64[0] = (double)v16;
        *(v12 - 1) = (double)v16;
        *v12 = 0.0;
        goto LABEL_24;
      }
      v17 = atomic_load((unint64_t *)((char *)v8 + ((v15 >> 7) & 0x1F8) + 8));
      if (v17)
        v16 = *(unsigned __int16 *)(v17 + 2 * (v15 & 0x3FF));
      else
        v16 = *v8;
    }
    if (v16 != 0x7FFF)
    {
      v16 = (__int16)v16;
      goto LABEL_23;
    }
    if (a3 >= 0x41 && !v11)
    {
      a1 = malloc_type_malloc(v30, 0x2855D78CuLL);
      v14 = a1;
      v13 = &a1[a3];
    }
    v14[v11] = v10;
    *((_WORD *)v13 + v11++) = v15;
LABEL_24:
    ++v10;
    v12 += 2;
  }
  while (a3 != v10);
  if (v11)
  {
    v30 = (size_t)v29;
    MEMORY[0x1E0C80A78](a1, a5);
    v20 = (char *)v29 - v19;
    if (v18 <= 0x1FFFFFFFFFFFFFFELL)
      v21 = (char *)v29 - v19;
    else
      v21 = 0;
    if (v18 - 0x1FFFFFFFFFFFFFFFLL >= 0xE000000000000042)
      v21 = (char *)malloc_type_malloc(8 * v11, 0xC135E911uLL);
    FPFontGetGlyphIdealAdvanceWidths();
    v22 = 0;
    v23 = v31;
    do
    {
      v24 = v14[v22];
      v25 = *(double *)&v21[8 * v22];
      if (v25 != 32767.0 && v25 >= -32768.0 && v25 <= 32767.0)
      {
        v27 = (double)(int)v25;
        if (v25 == v27)
        {
          CGFontIndexMapAddIndex(v8, *(unsigned __int16 *)(a2 + 2 * v24), (int)v25);
          v23 = v31;
          v25 = v27;
        }
      }
      v28 = v23 + 16 * v24;
      *(double *)v28 = v25;
      *(_QWORD *)(v28 + 8) = 0;
      ++v22;
    }
    while (v11 != v22);
    if (v21 != v20)
      free(v21);
    if (v14 != v33)
      free(v14);
  }
}

unsigned __int16 *CGFontIndexMapAddIndex(unsigned __int16 *result, unsigned int a2, unsigned __int16 a3)
{
  __int16 v4;
  unsigned __int16 *v5;
  unint64_t *v6;
  uint64_t i;
  unint64_t v8;

  if ((unint64_t)result + 1 >= 2)
  {
    v4 = a2;
    v5 = result;
    v6 = (unint64_t *)&result[4 * (a2 >> 10) + 4];
    result = (unsigned __int16 *)atomic_load(v6);
    if (!result)
    {
      result = (unsigned __int16 *)malloc_type_malloc(0x800uLL, 0x1000040BDFB0063uLL);
      for (i = 0; i != 1024; ++i)
        atomic_store(*v5, &result[i]);
      while (1)
      {
        v8 = __ldaxr(v6);
        if (v8)
          break;
        if (!__stlxr((unint64_t)result, v6))
          goto LABEL_9;
      }
      __clrex();
      free(result);
      result = (unsigned __int16 *)v8;
    }
LABEL_9:
    result[v4 & 0x3FF] = a3;
  }
  return result;
}

CGFloat CGClipStackGetRect(uint64_t a1)
{
  const CGRect *v1;

  v1 = &CGRectInfinite;
  if (a1)
    v1 = (const CGRect *)(a1 + 16);
  return v1->origin.x;
}

uint64_t CGImageProviderGetCallbackVersion(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 64);
  return result;
}

BOOL colorspace_from_ICC_data_data_key_is_equal(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

CGPDFContentStreamRef CGPDFContentStreamCreateWithStream(CGPDFStreamRef stream, CGPDFDictionaryRef streamResources, CGPDFContentStreamRef parent)
{
  uint64_t v6;
  CGPDFContentStreamRef v7;
  os_unfair_lock_s *v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  _QWORD *v11;

  v6 = pdf_content_stream_create(1);
  CFArrayAppendValue(*(CFMutableArrayRef *)(v6 + 24), stream);
  if (parent)
  {
    *(_QWORD *)(v6 + 16) = *((_QWORD *)parent + 2);
    if (streamResources)
    {
      v7 = 0;
      goto LABEL_8;
    }
    CFRetain(parent);
  }
  else
  {
    v7 = 0;
    *(_QWORD *)(v6 + 16) = 0;
    if (streamResources)
      goto LABEL_8;
  }
  v7 = parent;
LABEL_8:
  *(_QWORD *)(v6 + 40) = v7;
  v8 = (os_unfair_lock_s *)CGPDFResourcesCreate();
  v9 = v8;
  if (v8)
  {
    os_unfair_lock_lock(v8 + 20);
    v10 = *(_QWORD *)&v9[4]._os_unfair_lock_opaque;
    v11 = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
    *v11 = v10;
    v11[1] = streamResources;
    *(_QWORD *)&v9[4]._os_unfair_lock_opaque = v11;
    os_unfair_lock_unlock(v9 + 20);
  }
  *(_QWORD *)(v6 + 32) = v9;
  set_default_color_spaces((CGColorSpace *)v6);
  return (CGPDFContentStreamRef)v6;
}

char *CGPDFDrawingContextCreateWithContentStream(const void *a1, uint64_t a2)
{
  char *v4;
  void *Copy;
  unint64_t v6;
  unint64_t i;
  char *v8;
  unint64_t v9;
  __int128 **v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = (char *)malloc_type_calloc(1uLL, 0xC8uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (v4)
  {
    v4[8] = 0;
    *((_QWORD *)v4 + 13) = 0;
    v4[112] = 1;
    if (a1)
      CFRetain(a1);
    *(_QWORD *)v4 = a1;
    *(_OWORD *)(v4 + 40) = xmmword_1850049A0;
    *((_QWORD *)v4 + 7) = malloc_type_malloc(0x40uLL, 0x2004093837F09uLL);
    if (a2)
      Copy = CGPDFGStateCreateCopy(*(__int128 **)(a2 + 32));
    else
      Copy = CGPDFGStateCreate();
    v6 = *((_QWORD *)v4 + 6);
    **((_QWORD **)v4 + 7) = Copy;
    if (v6 >= 2)
    {
      for (i = 1; i < v9; ++i)
      {
        v8 = CGPDFGStateCreate();
        v9 = *((_QWORD *)v4 + 6);
        *(_QWORD *)(*((_QWORD *)v4 + 7) + 8 * i) = v8;
      }
    }
    v10 = (__int128 **)*((_QWORD *)v4 + 7);
    v11 = *v10;
    *((_QWORD *)v4 + 4) = *v10;
    if (a2)
    {
      v12 = *(_QWORD *)(a2 + 16);
      v13 = *(_QWORD *)(a2 + 88);
      *(_OWORD *)(v4 + 184) = *(_OWORD *)(a2 + 184);
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
    *((_QWORD *)v4 + 2) = v12;
    *((_QWORD *)v4 + 11) = v13;
    if (*(_QWORD *)v4 && v11)
    {
      *((_QWORD *)v4 + 3) = CGPDFGStateCreateCopy(v11);
    }
    else
    {
      CGPDFDrawingContextRelease(v4);
      return 0;
    }
  }
  return v4;
}

void CGContextDrawPDFPage(CGContextRef c, CGPDFPageRef page)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD v6[2];

  memset(v6, 0, sizeof(v6));
  CGContextDrawPDFPageWithDrawingCallbacks((uint64_t)c, (unint64_t)page, (uint64_t)v6, 0, v2, v3, v4, v5);
}

void CGContextDrawPDFPageWithDrawingCallbacks(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  os_unfair_lock_s *v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  const CGAffineTransform *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  __int128 **v47;
  unint64_t v48;
  __int128 *v49;
  void *Copy;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *xinfo;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __CFDictionary *Mutable;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  int v94;
  CGPDFOperatorTable *ContentTypesTable;
  uint64_t v96;
  CGPDFScannerRef v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  CGPDFDictionary *trailer;
  CGPDFDictionary *v111;
  os_unfair_lock_s *v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  size_t v117;
  void *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  CGPDFOperatorTable *v122;
  CFNumberRef v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t StructureTree;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  const void *v141;
  const void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  void *v156;
  char v157;
  void *v158;
  uint64_t v159;
  const __CFAllocator *allocator;
  uint64_t v161;
  int v162;
  uint64_t GStateMark;
  CGPDFScanner *scanner;
  BOOL v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  CGPDFDictionaryRef value[2];
  __int128 v170;
  __int128 v171;
  CGPDFObjectRef v172;
  CGPDFArrayRef array;
  char *__s1;
  CGPDFDictionaryRef v175;
  CGPDFArrayRef v176;
  CGPDFDictionaryRef v177;
  CGAffineTransform v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  CGRect v183;
  CGRect v184;
  CGRect v185;

  v182 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v8 = a2;
  if (!a2)
    return;
  if (*(_DWORD *)(a1 + 16) != 1129601108)
    handle_invalid_context((char)"CGContextGetCTM", a1, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8);
  v13 = (void *)MEMORY[0x186DC2BD4]();
  *(_QWORD *)&v178.a = CFSTR("pageNumber");
  *(_QWORD *)&v179 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v12);
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v179, &v178, 1);
  send_analytics_event((uint64_t)"com.apple.CoreGraphics.CGContextDrawPDFPageWithDrawingCallbacks");
  objc_autoreleasePoolPop(v13);
  v21 = *(_QWORD *)(v8 + 16);
  v22 = *(os_unfair_lock_s **)(v8 + 40);
  if (v22)
    os_unfair_lock_lock(v22 + 23);
  if (v21 && *(_BYTE *)(v21 + 120))
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108)
    {
      if (*(_DWORD *)(a1 + 24) == 1)
      {
        v23 = *(_QWORD *)(v8 + 40);
        if (!v23 || !*(_QWORD *)(v23 + 96))
        {
          v24 = CGPDFTaggedPagePropertiesCreate(v8);
          v25 = *(_QWORD *)(v8 + 40);
          if (!v25)
            goto LABEL_21;
          v26 = v24;
          v27 = *(const void **)(v25 + 96);
          if (v27)
            CFRelease(v27);
          *(_QWORD *)(v25 + 96) = v26;
        }
      }
    }
    else
    {
      handle_invalid_context((char)"CGContextGetType", a1, v15, v16, v17, v18, v19, v20);
    }
  }
  v28 = *(os_unfair_lock_s **)(v8 + 40);
  if (v28)
    os_unfair_lock_unlock(v28 + 23);
  if (!v21)
  {
    v32 = 0;
    goto LABEL_34;
  }
LABEL_21:
  v29 = (os_unfair_lock_s *)(v21 + 208);
  os_unfair_lock_lock((os_unfair_lock_t)(v21 + 208));
  v30 = *(_QWORD *)(v21 + 200);
  if (v30)
  {
    *(_QWORD *)&v179 = v8;
    v31 = *(_QWORD *)(v30 + 64);
    v32 = v31 != 0;
    if (v31)
    {
      if (*(_BYTE *)(v30 + 72))
        printf("LRUCache: adding page: %lu\n", *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8));
      if (std::__hash_table<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::__unordered_map_hasher<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::hash<CGPDFPage *>,std::equal_to<CGPDFPage *>,true>,std::__unordered_map_equal<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::equal_to<CGPDFPage *>,std::hash<CGPDFPage *>,true>,std::allocator<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>>>::find<CGPDFPage *>((_QWORD *)(v30 + 24), v8))
      {
        v33 = std::__hash_table<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::__unordered_map_hasher<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::hash<CGPDFPage *>,std::equal_to<CGPDFPage *>,true>,std::__unordered_map_equal<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::equal_to<CGPDFPage *>,std::hash<CGPDFPage *>,true>,std::allocator<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>>>::__emplace_unique_key_args<CGPDFPage *,std::piecewise_construct_t const&,std::tuple<CGPDFPage * const&>,std::tuple<>>((float *)(v30 + 24), v8, &v179);
        std::list<CGPDFPage *>::erase((uint64_t *)v30, (uint64_t *)v33[3]);
      }
      else if (*(_QWORD *)(v30 + 16) >= *(_QWORD *)(v30 + 64))
      {
        LRUCache::pop_back((uint64_t **)v30);
      }
      v34 = operator new(0x18uLL);
      v34[2] = v8;
      *v34 = v30;
      v35 = *(_QWORD **)(v30 + 8);
      v34[1] = v35;
      *v35 = v34;
      v36 = *(_QWORD *)(v30 + 16) + 1;
      *(_QWORD *)(v30 + 8) = v34;
      *(_QWORD *)(v30 + 16) = v36;
      std::__hash_table<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::__unordered_map_hasher<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::hash<CGPDFPage *>,std::equal_to<CGPDFPage *>,true>,std::__unordered_map_equal<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::equal_to<CGPDFPage *>,std::hash<CGPDFPage *>,true>,std::allocator<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>>>::__emplace_unique_key_args<CGPDFPage *,std::piecewise_construct_t const&,std::tuple<CGPDFPage * const&>,std::tuple<>>((float *)(v30 + 24), v8, &v179)[3] = v34;
      if (*(_BYTE *)(v30 + 72))
      {
        putchar(9);
        LRUCache::print((LRUCache *)v30);
      }
    }
  }
  else
  {
    v32 = 0;
  }
  os_unfair_lock_unlock(v29);
LABEL_34:
  v37 = *(_QWORD *)(v8 + 40);
  if (pdf_page_draw_in_context_onceToken != -1)
    dispatch_once(&pdf_page_draw_in_context_onceToken, &__block_literal_global_6478);
  v38 = &CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_323;
  if (pdf_page_draw_in_context_highlight_content)
  {
    CGContextSaveGState((CGContextRef)a1);
    CGContextSetRGBFillColor((CGContextRef)a1, 1.0, 0.43, 0.71, 1.0);
    v183.origin.x = pdf_page_get_box_rect(v37, 1);
    CGContextFillRect((CGContextRef)a1, v183);
  }
  if (*(_DWORD *)(a1 + 16) == 1129601108)
  {
    v39 = (const CGAffineTransform *)(a1 + 120);
  }
  else
  {
    handle_invalid_context((char)"CGContextGetTextMatrix", a1, v15, v16, v17, v18, v19, v20);
    v39 = &CGAffineTransformIdentity;
  }
  v166 = *(_OWORD *)&v39->a;
  v167 = *(_OWORD *)&v39->c;
  v168 = *(_OWORD *)&v39->tx;
  if (CGContextIsEmptyClipBoundingBox(a1, v14, v15, v16, v17, v18, v19, v20))
    goto LABEL_121;
  v46 = (char *)malloc_type_calloc(1uLL, 0xC8uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  *(_QWORD *)v46 = CGPDFContentStreamCreate(v37);
  *(_OWORD *)(v46 + 40) = xmmword_1850049A0;
  v47 = (__int128 **)malloc_type_malloc(0x40uLL, 0x2004093837F09uLL);
  *((_QWORD *)v46 + 7) = v47;
  v165 = v32;
  if (*((_QWORD *)v46 + 6))
  {
    v48 = 0;
    do
      *(_QWORD *)(*((_QWORD *)v46 + 7) + 8 * v48++) = CGPDFGStateCreate();
    while (v48 < *((_QWORD *)v46 + 6));
    v47 = (__int128 **)*((_QWORD *)v46 + 7);
  }
  v49 = *v47;
  *((_QWORD *)v46 + 4) = v49;
  Copy = CGPDFGStateCreateCopy(v49);
  v51 = *(_QWORD *)(v37 + 56);
  *((_QWORD *)v46 + 12) = 0;
  v52 = (uint64_t *)(v46 + 96);
  *((_QWORD *)v46 + 2) = v51;
  *((_QWORD *)v46 + 3) = Copy;
  v46[8] = 0;
  *((_QWORD *)v46 + 13) = 0;
  v46[112] = 1;
  os_unfair_lock_lock((os_unfair_lock_t)(v37 + 32));
  v53 = *(_QWORD *)(v37 + 24);
  os_unfair_lock_unlock((os_unfair_lock_t)(v37 + 32));
  *((_QWORD *)v46 + 15) = v53;
  *((_QWORD *)v46 + 16) = 0;
  *((double *)v46 + 17) = pdf_page_get_box_rect(v37, 1);
  *((_QWORD *)v46 + 18) = v54;
  *((_QWORD *)v46 + 19) = v55;
  *((_QWORD *)v46 + 20) = v56;
  *((_QWORD *)v46 + 21) = 0;
  v46[176] = 0;
  *((_QWORD *)v46 + 23) = a3;
  *((_QWORD *)v46 + 24) = a4;
  if (CGContextGetAlpha(a1, v57, v58, v59, v60, v61, v62, v63) != 1.0
    || CGContextGetStyle(a1, v64, v65, v66, v67, v68, v69, v70)
    || CGContextGetSoftMask(a1, v64, v65, v66, v67, v68, v69, v70)
    || CGContextGetCompositeOperation(a1, v64, v65, v66, v67, v68, v69, v70) != 2)
  {
    GStateMark = CGContextGetGStateMark(a1, v64, v65, v66, v67, v68, v69, v70);
  }
  else
  {
    xinfo = (unsigned __int8 *)pdf_page_get_xinfo(v37);
    if (!xinfo)
    {
      GStateMark = CGContextGetGStateMark(a1, v72, v73, v74, v75, v76, v77, v78);
LABEL_130:
      v162 = 0;
      goto LABEL_59;
    }
    v79 = *xinfo;
    GStateMark = CGContextGetGStateMark(a1, v72, v73, v74, v75, v76, v77, v78);
    if (!v79)
      goto LABEL_130;
  }
  set_initial_group_gstate(*((_QWORD *)v46 + 4));
  set_initial_group_gstate(*((_QWORD *)v46 + 3));
  if (*((_QWORD *)v46 + 2))
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, CFSTR("kCGContextColorSpace"), *((const void **)v46 + 2));
    CGContextBeginTransparencyLayer((CGContextRef)a1, Mutable);
    if (Mutable)
      CFRelease(Mutable);
  }
  else
  {
    v184.origin.x = -8.98846567e307;
    v184.size.width = 1.79769313e308;
    v184.origin.y = -8.98846567e307;
    v184.size.height = 1.79769313e308;
    CGContextBeginTransparencyLayerWithRect((CGContextRef)a1, v184, 0);
  }
  v162 = 1;
LABEL_59:
  v180 = 0u;
  v181 = 0u;
  v179 = 0u;
  CGContextGetBaseCTM(a1, v80, v81, v82, v83, v84, v85, (uint64_t)&v179);
  CGContextGetCTM(&v178, (CGContextRef)a1);
  CGContextSetBaseCTM(a1, (__int128 *)&v178, v87, v88, v89, v90, v91, v92);
  v93 = (int *)*((_QWORD *)v46 + 23);
  if (v93)
  {
    v94 = *v93;
    *((_QWORD *)v46 + 11) = a1;
    if (CGPDFDrawingContextGetOperatorTable_predicate != -1)
      dispatch_once(&CGPDFDrawingContextGetOperatorTable_predicate, &__block_literal_global_7120);
    if (v94 == 1)
    {
      ContentTypesTable = CGPDFDrawingContextCreateContentTypesTable(*(_QWORD *)(*((_QWORD *)v46 + 23) + 24));
      v96 = 0;
      goto LABEL_67;
    }
  }
  else
  {
    *((_QWORD *)v46 + 11) = a1;
    if (CGPDFDrawingContextGetOperatorTable_predicate != -1)
      dispatch_once(&CGPDFDrawingContextGetOperatorTable_predicate, &__block_literal_global_7120);
  }
  ContentTypesTable = (CGPDFOperatorTable *)CGPDFDrawingContextGetOperatorTable_operator_table;
  v96 = 1;
LABEL_67:
  v97 = CGPDFScannerCreate(*(CGPDFContentStreamRef *)v46, ContentTypesTable, v46);
  v105 = *((_QWORD *)v46 + 23);
  if (v105 && v97)
  {
    *((_QWORD *)v97 + 15) = *(_QWORD *)(v105 + 8);
    *((_QWORD *)v97 + 16) = a4;
  }
  scanner = v97;
  v106 = *(_QWORD *)v37;
  if (*(_QWORD *)v37)
  {
    v107 = *(uint64_t **)(v106 + 16);
    v108 = *(_QWORD *)(*v107 + 40);
    if (!v108 || (v109 = *(_QWORD *)(v108 + 16)) != 0 && *(_BYTE *)(v109 + 184))
    {
      value[0] = 0;
      v161 = v106;
      trailer = (CGPDFDictionary *)pdf_xref_get_trailer(*v107);
      if (CGPDFDictionaryGetDictionary(trailer, "Root", value))
      {
        v111 = value[0];
        if (value[0])
        {
          v112 = (os_unfair_lock_s *)(v161 + 68);
          os_unfair_lock_lock((os_unfair_lock_t)(v161 + 68));
          v113 = v161;
          if (!*(_BYTE *)(v161 + 72))
          {
            *(_BYTE *)(v161 + 88) = 1;
            v177 = 0;
            if (CGPDFDictionaryGetDictionary(v111, "OCProperties", &v177))
            {
              v175 = 0;
              v176 = 0;
              if (CGPDFDictionaryGetDictionary(v177, "D", &v175) && CGPDFDictionaryGetArray(v177, "OCGs", &v176))
              {
                __s1 = 0;
                if (CGPDFDictionaryGetName(v175, "BaseState", (const char **)&__s1) && !strcmp(__s1, "OFF"))
                  *(_BYTE *)(v161 + 88) = 0;
                v114 = 0;
                allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                v156 = (void *)*MEMORY[0x1E0C9AE50];
                v155 = (void *)*MEMORY[0x1E0C9AE40];
                v115 = 1;
                do
                {
                  v157 = v115;
                  array = 0;
                  if (CGPDFDictionaryGetArray(v175, off_1E1660F08[v114], &array))
                  {
                    if (array)
                    {
                      v116 = *((_QWORD *)array + 2);
                      if (v116)
                      {
                        v117 = 0;
                        v118 = v156;
                        if ((v157 & 1) == 0)
                          v118 = v155;
                        v158 = v118;
                        v159 = *((_QWORD *)array + 2);
                        do
                        {
                          v172 = 0;
                          if (CGPDFArrayGetObject(array, v117, &v172))
                          {
                            v119 = v8;
                            v120 = v96;
                            v121 = v37;
                            v122 = ContentTypesTable;
                            if (!*(_QWORD *)(v161 + 80))
                              *(_QWORD *)(v161 + 80) = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                            value[0] = (CGPDFDictionaryRef)(*((unsigned __int16 *)v172 + 12) | (*((_QWORD *)v172 + 2) << 36));
                            v123 = CFNumberCreate(allocator, kCFNumberSInt64Type, value);
                            CFDictionarySetValue(*(CFMutableDictionaryRef *)(v161 + 80), v123, v158);
                            CFRelease(v123);
                            ContentTypesTable = v122;
                            v37 = v121;
                            v96 = v120;
                            v8 = v119;
                            v112 = (os_unfair_lock_s *)(v161 + 68);
                            v116 = v159;
                          }
                          ++v117;
                        }
                        while (v116 != v117);
                      }
                    }
                  }
                  v115 = 0;
                  v114 = 1;
                }
                while ((v157 & 1) != 0);
              }
            }
            v113 = v161;
            *(_BYTE *)(v161 + 72) = 1;
          }
          v124 = v113;
          os_unfair_lock_unlock(v112);
          *((_QWORD *)v46 + 13) = *(_QWORD *)(v124 + 80);
          v46[112] = *(_BYTE *)(v124 + 88);
        }
      }
    }
  }
  if (CGContextGetType(a1, v98, v99, v100, v101, v102, v103, v104) == 1)
    *v52 = *(_QWORD *)(v37 + 96);
  v125 = *(_QWORD *)(v37 + 72);
  v38 = &CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_323;
  if (v125 && CGPropertiesGetProperty(v125, CFSTR("drawocr")))
    v46[176] = 1;
  CGPDFScannerScan(scanner);
  if (scanner)
    CFRelease(scanner);
  if (CGContextGetType(a1, v126, v127, v128, v129, v130, v131, v132) == 1)
  {
    StructureTree = CGPDFTaggedPagePropertiesGetStructureTree(*v52);
    CGPDFContextSetPageTagStructureTree(a1, StructureTree, v134, v135, v136, v137, v138, v139);
  }
  if (ContentTypesTable)
    v140 = v96;
  else
    v140 = 1;
  if ((v140 & 1) == 0)
    CFRelease(ContentTypesTable);
  v141 = (const void *)*((_QWORD *)v46 + 16);
  v32 = v165;
  if (v141)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v37 + 88));
    v142 = *(const void **)(v37 + 104);
    if (v142 != v141)
    {
      if (v142)
        CFRelease(v142);
      CFRetain(v141);
      *(_QWORD *)(v37 + 104) = v141;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v37 + 88));
    v38 = &CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_323;
  }
  CGPDFDrawingContextRelease(v46);
  if (v162)
    CGContextEndTransparencyLayer((CGContextRef)a1);
  CGContextRestoreToGStateMark(a1, GStateMark, v143, v144, v145, v146, v147, v148);
  *(_OWORD *)value = v179;
  v170 = v180;
  v171 = v181;
  CGContextSetBaseCTM(a1, (__int128 *)value, v149, v150, v151, v152, v153, v154);
LABEL_121:
  if (*(_DWORD *)(a1 + 16) == 1129601108)
  {
    *(_OWORD *)(a1 + 120) = v166;
    *(_OWORD *)(a1 + 136) = v167;
    *(_OWORD *)(a1 + 152) = v168;
  }
  else
  {
    handle_invalid_context((char)"CGContextSetTextMatrix", a1, v40, v41, v42, v43, v44, v45);
  }
  if (*((_BYTE *)v38 + 1936))
  {
    CGContextSetRGBFillColor((CGContextRef)a1, 1.0, 0.43, 0.71, 0.25);
    v185.origin.x = pdf_page_get_box_rect(v37, 1);
    CGContextFillRect((CGContextRef)a1, v185);
    CGContextRestoreGState((CGContextRef)a1);
  }
  *(_BYTE *)(v8 + 280) = 1;
  if (!v32)
    CGPDFPagePurgeResources(v8);
}

void CGContextSetBaseCTM(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108)
    {
      v8 = *(_QWORD *)(a1 + 112);
      v9 = *a2;
      v10 = a2[1];
      *(_OWORD *)(v8 + 56) = a2[2];
      *(_OWORD *)(v8 + 40) = v10;
      *(_OWORD *)(v8 + 24) = v9;
      return;
    }
    v11 = a1;
  }
  else
  {
    v11 = 0;
  }
  handle_invalid_context((char)"CGContextSetBaseCTM", v11, a3, a4, a5, a6, a7, a8);
}

uint64_t CGContextGetType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
    return *(unsigned int *)(a1 + 24);
  handle_invalid_context((char)"CGContextGetType", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

CGAffineTransform *__cdecl CGContextGetCTM(CGAffineTransform *__return_ptr retstr, CGAffineTransform *c)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const CGAffineTransform *v9;
  __int128 v10;

  if (c && LODWORD(c->c) == 1129601108)
  {
    v9 = (const CGAffineTransform *)(*(_QWORD *)&c[2].a + 24);
  }
  else
  {
    handle_invalid_context((char)"CGContextGetCTM", (uint64_t)c, v2, v3, v4, v5, v6, v7);
    v9 = &CGAffineTransformIdentity;
  }
  v10 = *(_OWORD *)&v9->c;
  *(_OWORD *)&retstr->a = *(_OWORD *)&v9->a;
  *(_OWORD *)&retstr->c = v10;
  *(_OWORD *)&retstr->tx = *(_OWORD *)&v9->tx;
  return c;
}

__n128 CGContextGetBaseCTM@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  const CGAffineTransform *v9;
  __int128 v10;
  __n128 result;

  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
  {
    v9 = (const CGAffineTransform *)(*(_QWORD *)(a1 + 112) + 24);
  }
  else
  {
    handle_invalid_context((char)"CGContextGetBaseCTM", a1, a2, a3, a4, a5, a6, a7);
    v9 = &CGAffineTransformIdentity;
  }
  v10 = *(_OWORD *)&v9->c;
  *(_OWORD *)a8 = *(_OWORD *)&v9->a;
  *(_OWORD *)(a8 + 16) = v10;
  result = *(__n128 *)&v9->tx;
  *(__n128 *)(a8 + 32) = result;
  return result;
}

uint64_t CGContextGetCompositeOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
    return ((__int16)*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 120) + 4) >> 8);
  handle_invalid_context((char)"CGContextGetCompositeOperation", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

char *CGPDFGStateCreate()
{
  char *v0;

  v0 = (char *)malloc_type_malloc(0x118uLL, 0x566C45D1uLL);
  __CFSetLastAllocationEventName();
  if (v0)
  {
    *(CGAffineTransform *)v0 = CGAffineTransformIdentity;
    *((_WORD *)v0 + 24) = 0;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    *((_QWORD *)v0 + 12) = 0;
    *((_QWORD *)v0 + 13) = 0;
    *((_QWORD *)v0 + 11) = 0x4059000000000000;
    *((_DWORD *)v0 + 28) = 0;
    *((_QWORD *)v0 + 15) = 0;
    *((_QWORD *)v0 + 16) = 0;
    v0[136] = 1;
    *((_QWORD *)v0 + 18) = 0x3FF0000000000000;
    *((_QWORD *)v0 + 19) = 0;
    *((_QWORD *)v0 + 20) = 0x4024000000000000;
    *((_QWORD *)v0 + 21) = 0;
    *((_DWORD *)v0 + 44) = 2;
    v0[180] = 0;
    *((_DWORD *)v0 + 46) = 0;
    *((_QWORD *)v0 + 24) = 0;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)(v0 + 200) = _Q0;
    *((_WORD *)v0 + 108) = 0;
    v0[218] = 0;
    *(_QWORD *)(v0 + 228) = 0;
    *(_QWORD *)(v0 + 220) = 0;
    *((_DWORD *)v0 + 61) = 0;
    *(_QWORD *)(v0 + 236) = 0;
    *((_QWORD *)v0 + 31) = 0x3FF0000000000000;
    *((_QWORD *)v0 + 32) = 0;
    *((_QWORD *)v0 + 33) = 0;
    *((_QWORD *)v0 + 34) = 0;
  }
  return v0;
}

uint64_t CGContextGetSoftMask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 120) + 40);
  handle_invalid_context((char)"CGContextGetSoftMask", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

_QWORD *std::__hash_table<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::__unordered_map_hasher<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::hash<CGPDFPage *>,std::equal_to<CGPDFPage *>,true>,std::__unordered_map_equal<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::equal_to<CGPDFPage *>,std::hash<CGPDFPage *>,true>,std::allocator<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>>>::__emplace_unique_key_args<CGPDFPage *,std::piecewise_construct_t const&,std::tuple<CGPDFPage * const&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v35;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[3] = 0;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v26 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:se180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v23)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = a1 + 4;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_55:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v35 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v35)
          operator delete(v35);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v31 = *(_QWORD **)a1;
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v32)
  {
    *i = *v32;
LABEL_72:
    *v32 = i;
    goto LABEL_73;
  }
  *i = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = i;
  v31[v3] = a1 + 4;
  if (*i)
  {
    v33 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v33 >= v9)
        v33 %= v9;
    }
    else
    {
      v33 &= v9 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return i;
}

void sub_184A26150(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *CGPDFGStateCreateCopy(__int128 *a1)
{
  void *v2;

  v2 = malloc_type_malloc(0x118uLL, 0x566C45D1uLL);
  __CFSetLastAllocationEventName();
  if (v2)
    CGPDFGStateCopyProperties((uint64_t)v2, a1);
  return v2;
}

CGPDFDocumentRef CGPDFDocumentCreateWithProvider(CGDataProviderRef provider)
{
  uint64_t cftype;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t Bytes;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  const void *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __CFNotificationCenter *LocalCenter;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char v43[2048];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if ((sInLockdownModeForPDF & 1) != 0)
    goto LABEL_5;
  if (read_entitlements_once != -1)
    dispatch_once(&read_entitlements_once, &__block_literal_global_10334);
  if (sHasLockdownModeForPDFEntitlement)
  {
LABEL_5:
    pdf_error("Attempt to create CGPDFDocument in Lockdown Mode for PDF");
    return 0;
  }
  if (CGPDFDocumentCreateWithProvider::onceToken != -1)
  {
    dispatch_once(&CGPDFDocumentCreateWithProvider::onceToken, &__block_literal_global_1237);
    if (provider)
      goto LABEL_10;
LABEL_12:
    v5 = (void *)MEMORY[0x186DC2BD4]();
    send_analytics_event((uint64_t)"com.apple.CoreGraphics.CGPDFDocumentCreateWithProvider");
    objc_autoreleasePoolPop(v5);
    goto LABEL_13;
  }
  if (!provider)
    goto LABEL_12;
LABEL_10:
  v4 = *((_QWORD *)provider + 34);
  if (!v4 || !CGPropertiesGetProperty(v4, CFSTR("from_url")))
    goto LABEL_12;
LABEL_13:
  if (CGPDFDocumentGetTypeID::onceToken != -1)
    dispatch_once(&CGPDFDocumentGetTypeID::onceToken, &__block_literal_global_18_1239);
  cftype = pdf_create_cftype();
  if (!provider || (v6 = *((_QWORD *)provider + 4), v6 == -1))
  {
    v7 = CGAccessSessionCreate(provider);
    if (v7)
    {
      v13 = v7;
      v14 = 0;
      do
      {
        v6 = v14;
        Bytes = CGAccessSessionGetBytes(v13, v43, 0x800uLL, v8, v9, v10, v11, v12);
        v14 = Bytes + v6;
      }
      while (Bytes);
      if (CGAccessSessionSkipForward((uint64_t)v13, 1) >= 1)
        CGLog(2, (uint64_t)"Sequential data provider %p skips forward beyond available data", v16, v17, v18, v19, v20, v21, (char)provider);
      CGAccessSessionRelease(v13);
    }
    else
    {
      v6 = 0;
    }
  }
  v22 = CGPDFSourceCreate(provider, 0, v6);
  if (!v22)
    goto LABEL_42;
  v23 = v22;
  v24 = (uint64_t *)malloc_type_calloc(1uLL, 0x18uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  v32 = pdf_xref_create((uint64_t)v23, v25, v26, v27, v28, v29, v30, v31);
  *v24 = (uint64_t)v32;
  *((_DWORD *)v24 + 4) = 0;
  if (!v32)
  {
    pdf_reader_release(v24);
    CFRelease(v23);
LABEL_42:
    *(_QWORD *)(cftype + 16) = 0;
LABEL_43:
    CFRelease((CFTypeRef)cftype);
    return 0;
  }
  CFRelease(v23);
  if (pdf_document_get_type_id_onceToken != -1)
    dispatch_once(&pdf_document_get_type_id_onceToken, &__block_literal_global_16760);
  v33 = pdf_create_cftype();
  if (!v33)
    goto LABEL_42;
  v34 = v33;
  *(_QWORD *)(v33 + 16) = v24;
  *(_QWORD *)(v33 + 80) = 0;
  *(_QWORD *)(v33 + 64) = 0;
  *(_BYTE *)(v33 + 72) = 0;
  *(_BYTE *)(v33 + 88) = 1;
  v35 = *(_QWORD *)(*v24 + 40);
  if (v35)
    pdf_document_unlock_with_password(v35, "");
  *(_QWORD *)(cftype + 16) = v34;
  *(_QWORD *)(cftype + 40) = 0;
  *(_QWORD *)(cftype + 48) = 0;
  pthread_mutex_init((pthread_mutex_t *)(cftype + 56), 0);
  *(_BYTE *)(cftype + 120) = 1;
  pthread_mutex_init((pthread_mutex_t *)(cftype + 128), 0);
  *(_QWORD *)(cftype + 192) = 0;
  *(_DWORD *)(cftype + 208) = 0;
  if (CGDefaultsCheck<CGPDFDocumentPageResourcesCacheSize>(void)::onceToken != -1)
    dispatch_once(&CGDefaultsCheck<CGPDFDocumentPageResourcesCacheSize>(void)::onceToken, &__block_literal_global_12_12452);
  v36 = CGDefaultsCheck<CGPDFDocumentPageResourcesCacheSize>(void)::result;
  if (CGDefaultsCheck<CGPDFDocumentPageResourcesCacheSize>(void)::result)
  {
    v37 = operator new();
    if (CGDefaultsCheck<CGPDFDocumentPageResourcesCacheLogging>(void)::onceToken != -1)
      dispatch_once(&CGDefaultsCheck<CGPDFDocumentPageResourcesCacheLogging>(void)::onceToken, &__block_literal_global_16_12459);
    v38 = CGDefaultsCheck<CGPDFDocumentPageResourcesCacheLogging>(void)::result;
    *(_QWORD *)v37 = v37;
    *(_QWORD *)(v37 + 8) = v37;
    *(_OWORD *)(v37 + 16) = 0u;
    *(_OWORD *)(v37 + 32) = 0u;
    *(_QWORD *)(v37 + 48) = 0;
    *(_DWORD *)(v37 + 56) = 1065353216;
    *(_QWORD *)(v37 + 64) = v36;
    *(_BYTE *)(v37 + 72) = v38;
    *(_QWORD *)(cftype + 200) = v37;
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterAddObserver(LocalCenter, (const void *)cftype, (CFNotificationCallback)low_memory_notification_callback, CFSTR("CGPDFDocumentLowMemoryNotificationName"), 0, (CFNotificationSuspensionBehavior)1028);
  }
  *(_DWORD *)(cftype + 212) = 0;
  v40 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(cftype + 16) + 16) + 160);
  v41 = (char *)malloc_type_malloc(0x38uLL, 0x10600403E806431uLL);
  *(_QWORD *)v41 = cftype;
  *((_QWORD *)v41 + 1) = v40;
  *((_QWORD *)v41 + 2) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_OWORD *)(v41 + 24) = 0u;
  *(_OWORD *)(v41 + 40) = 0u;
  *(_QWORD *)(cftype + 216) = v41;
  *(_DWORD *)(cftype + 224) = 0;
  *(_QWORD *)(cftype + 232) = 0;
  v42 = **(_QWORD **)(*(_QWORD *)(cftype + 16) + 16);
  if (!*(_QWORD *)(v42 + 24) && !*(_QWORD *)(v42 + 40) && !CGPDFDocumentGetPage((CGPDFDocumentRef)cftype, 1uLL))
    goto LABEL_43;
  return (CGPDFDocumentRef)cftype;
}

uint64_t send_analytics_event(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a1);
  if (MEMORY[0x1E0D15430])
  {
    if ((send_analytics_event_sSendAnalytics & 1) == 0)
      return AnalyticsSendEventLazy();
  }
  return result;
}

CGPDFPageRef CGPDFDocumentGetPage(CGPDFPageRef document, size_t pageNumber)
{
  CGPDFPageRef v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;

  if (document)
  {
    v3 = document;
    v4 = *(uint64_t **)(*((_QWORD *)document + 2) + 16);
    v5 = *(_QWORD *)(*v4 + 40);
    if ((!v5 || (v6 = *(_QWORD *)(v5 + 16)) != 0 && *(_BYTE *)(v6 + 184))
      && (v7 = pageNumber - 1, pageNumber - 1 < (unint64_t)pdf_reader_get_number_of_pages(v4))
      && (ensure_page_array_exists((uint64_t)v3), (v8 = *((_QWORD *)v3 + 3)) != 0))
    {
      document = *(CGPDFPageRef *)(v8 + 8 * v7);
      if (!document)
      {
        pthread_mutex_lock((pthread_mutex_t *)((char *)v3 + 56));
        if (!*(_QWORD *)(v8 + 8 * v7))
          *(_QWORD *)(v8 + 8 * v7) = CGPDFPageCreate2((CFTypeRef *)v3, pageNumber, 0);
        pthread_mutex_unlock((pthread_mutex_t *)((char *)v3 + 56));
        return *(CGPDFPageRef *)(v8 + 8 * v7);
      }
    }
    else
    {
      return 0;
    }
  }
  return document;
}

uint64_t ensure_page_array_exists(uint64_t result)
{
  _QWORD *v1;
  pthread_mutex_t *v2;
  CGPDFDictionary *number_of_pages;
  void *v4;

  if (!*(_QWORD *)(result + 24))
  {
    v1 = (_QWORD *)result;
    v2 = (pthread_mutex_t *)(result + 56);
    pthread_mutex_lock((pthread_mutex_t *)(result + 56));
    if (!v1[3])
    {
      number_of_pages = pdf_reader_get_number_of_pages(*(uint64_t **)(v1[2] + 16));
      v1[4] = number_of_pages;
      v4 = malloc_type_calloc((size_t)number_of_pages, 8uLL, 0x33BCE901uLL);
      __CFSetLastAllocationEventName();
      v1[3] = v4;
    }
    return pthread_mutex_unlock(v2);
  }
  return result;
}

uint64_t CGPDFPageCreate2(CFTypeRef *a1, unint64_t a2, int a3)
{
  uint64_t cftype;
  CFTypeRef v7;
  char *v8;
  uint64_t *v9;
  BOOL v10;
  int v11;
  uint64_t page_dictionary;
  os_unfair_lock_s *v13;
  uint64_t i;
  CGColorSpaceRef colorspace;
  int Type;
  CGPDFBoolean v18[2];
  CGPDFDictionaryRef value;
  CGPDFObjectRef v20;
  pthread_mutexattr_t __s1;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (CGPDFPageGetTypeID_onceToken != -1)
    dispatch_once(&CGPDFPageGetTypeID_onceToken, &__block_literal_global_154);
  cftype = pdf_create_cftype();
  if (cftype)
  {
    if (a1)
    {
      v7 = a1[2];
      if (v7)
        CFRetain(a1[2]);
    }
    else
    {
      v7 = 0;
    }
    *(_QWORD *)(cftype + 32) = v7;
    v8 = (char *)malloc_type_calloc(1uLL, 0x70uLL, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    *((_DWORD *)v8 + 22) = 0;
    *(_QWORD *)v8 = v7;
    *((_QWORD *)v8 + 1) = a2;
    v9 = (uint64_t *)*((_QWORD *)v7 + 2);
    v10 = a2 != 1 || *(_QWORD *)(*v9 + 24) == 0;
    v11 = v10;
    if (v10)
      page_dictionary = (uint64_t)pdf_document_get_page_dictionary((uint64_t)v9, a2);
    else
      page_dictionary = pdf_reader_get_linearized_page_dict(v9, 1uLL);
    *((_QWORD *)v8 + 2) = page_dictionary;
    if (!page_dictionary || (v13 = CGPDFResourcesCreateWithPage((uint64_t)v8, v11), (*((_QWORD *)v8 + 3) = v13) == 0))
    {
      pdf_page_release((uint64_t)v8);
      *(_QWORD *)(cftype + 40) = 0;
      CFRelease((CFTypeRef)cftype);
      return 0;
    }
    *((_DWORD *)v8 + 8) = 0;
    v8[48] = v11;
    v20 = 0;
    __s1.__sig = 0;
    value = 0;
    *(_WORD *)v18 = 0;
    if (!CGPDFDictionaryGetDictionary(*((CGPDFDictionaryRef *)v8 + 2), "Group", &value))
      goto LABEL_25;
    if (!CGPDFDictionaryGetName(value, "S", (const char **)&__s1))
    {
      goto LABEL_25;
    }
    if (strcmp((const char *)__s1.__sig, "Transparency"))
    {
      goto LABEL_25;
    }
    v8[50] = 0;
    if (CGPDFDictionaryGetBoolean(value, "I", &v18[1]))
      v8[50] = v18[1] != 0;
    v8[49] = 0;
    if (CGPDFDictionaryGetBoolean(value, "K", v18))
      v8[49] = v18[0] != 0;
    *((_QWORD *)v8 + 7) = 0;
    if (!CGPDFDictionaryGetObject(value, "CS", &v20))
      goto LABEL_25;
    colorspace = cg_create_colorspace((uint64_t)v20);
    Type = CGColorSpaceGetType(colorspace);
    if ((Type - 7) < 3)
      goto LABEL_44;
    if (Type == 6)
    {
      if (!colorspace || *(_DWORD *)(*((_QWORD *)colorspace + 3) + 24) > 2u)
        goto LABEL_44;
    }
    else if (Type == 5)
    {
LABEL_44:
      pdf_error("invalid group attributes color space.");
      CGColorSpaceRelease(colorspace);
LABEL_25:
      *(_QWORD *)(v8 + 100) = 0;
      *(_QWORD *)(v8 + 92) = 0;
      *((_DWORD *)v8 + 27) = 0;
      *(_QWORD *)(cftype + 40) = v8;
      if (a1 && a3)
      {
        CFRetain(a1);
        v8 = *(char **)(cftype + 40);
      }
      *(_QWORD *)(cftype + 16) = a1;
      *(_BYTE *)(cftype + 24) = a3;
      *(_DWORD *)(cftype + 48) = pdf_page_get_rotation_angle((uint64_t)v8);
      for (i = 56; i != 216; i += 32)
        *(CGRect *)(cftype + i) = CGRectNull;
      __s1.__sig = 0;
      *(_QWORD *)__s1.__opaque = 0;
      pthread_mutexattr_init(&__s1);
      pthread_mutexattr_settype(&__s1, 2);
      pthread_mutex_init((pthread_mutex_t *)(cftype + 216), &__s1);
      pthread_mutexattr_destroy(&__s1);
      *(_BYTE *)(cftype + 280) = 0;
      *(_QWORD *)(cftype + 284) = 0;
      *(_QWORD *)(cftype + 296) = 0;
      *(_DWORD *)(cftype + 304) = 0;
      *(_QWORD *)(cftype + 312) = 0;
      *(_DWORD *)(cftype + 320) = 0;
      *(_QWORD *)(cftype + 328) = 0;
      *(_DWORD *)(cftype + 336) = 0;
      *(_QWORD *)(cftype + 352) = 0;
      *(_QWORD *)(cftype + 360) = 0;
      *(_QWORD *)(cftype + 344) = 0;
      return cftype;
    }
    *((_QWORD *)v8 + 7) = colorspace;
    goto LABEL_25;
  }
  return cftype;
}

uint64_t pdf_page_get_rotation_angle(uint64_t a1)
{
  __CFSet *Mutable;
  CGPDFDictionaryRef dict;
  CGPDFInteger value;

  value = 0;
  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  dict = *(CGPDFDictionaryRef *)(a1 + 16);
  while (!CGPDFDictionaryGetInteger(dict, "Rotate", &value))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      CFSetAddValue(Mutable, dict);
      if (CGPDFDictionaryGetDictionary(dict, "Parent", &dict) && !CFSetContainsValue(Mutable, dict))
        continue;
    }
    goto LABEL_9;
  }
  if (value != (int)value)
    value = 0;
LABEL_9:
  CFRelease(Mutable);
  return value;
}

const void *pdf_document_get_page_dictionary(uint64_t a1, unint64_t a2)
{
  const __CFArray *v4;
  CGPDFDictionary *number_of_pages;
  const void *v6;
  const void *v7;
  const void *ValueAtIndex;
  const void *linearized_page_dict;
  const __CFArray *v10;
  CGPDFDictionaryRef pages_dictionary;
  CGPDFDictionaryRef v12;
  const __CFAllocator *v13;
  CFMutableArrayRef Mutable;
  __CFArray *v15;
  const __CFSet *v16;
  const __CFSet *v17;
  int v18;
  __CFArray *v19;
  void *newValues;
  CFRange v22;

  if (!*(_QWORD *)(*(_QWORD *)a1 + 24))
  {
LABEL_18:
    v10 = *(const __CFArray **)(a1 + 8);
    if (v10)
    {
LABEL_32:
      if (a2 && CFArrayGetCount(v10) >= a2)
        return CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), a2 - 1);
      return 0;
    }
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    if (*(_QWORD *)(a1 + 8))
    {
LABEL_31:
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
      v10 = *(const __CFArray **)(a1 + 8);
      if (!v10)
      {
        pdf_error("Failed to create pages array\n");
        return 0;
      }
      goto LABEL_32;
    }
    pages_dictionary = get_pages_dictionary(*(_QWORD *)a1);
    if (pages_dictionary)
    {
      v12 = pages_dictionary;
      v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
      if (Mutable)
      {
        v15 = Mutable;
        v16 = CFSetCreateMutable(v13, 0, 0);
        if (v16)
        {
          v17 = v16;
          v18 = add_pages(v15, v12, v16);
          CFRelease(v17);
          newValues = (void *)pdf_reader_get_linearized_page_dict((uint64_t *)a1, 1uLL);
          if (newValues)
          {
            v22.location = 0;
            v22.length = 1;
            CFArrayReplaceValues(v15, v22, (const void **)&newValues, 1);
          }
          if (v18)
            v19 = v15;
          else
            v19 = 0;
          goto LABEL_30;
        }
        CFRelease(v15);
      }
    }
    v19 = 0;
LABEL_30:
    *(_QWORD *)(a1 + 8) = v19;
    goto LABEL_31;
  }
  v4 = *(const __CFArray **)(a1 + 8);
  if (!v4)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    if (!*(_QWORD *)(a1 + 8))
    {
      number_of_pages = pdf_reader_get_number_of_pages((uint64_t *)a1);
      *(_QWORD *)(a1 + 8) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFIndex)number_of_pages, 0);
      if (number_of_pages)
      {
        v6 = (const void *)*MEMORY[0x1E0C9B0D0];
        do
        {
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 8), v6);
          number_of_pages = (CGPDFDictionary *)((char *)number_of_pages - 1);
        }
        while (number_of_pages);
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
    v4 = *(const __CFArray **)(a1 + 8);
  }
  v7 = 0;
  if (a2 && v4)
  {
    if (CFArrayGetCount(v4) < a2)
      return 0;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), a2 - 1);
    if (ValueAtIndex == (const void *)*MEMORY[0x1E0C9B0D0])
    {
      linearized_page_dict = (const void *)pdf_reader_get_linearized_page_dict((uint64_t *)a1, a2);
      if (!linearized_page_dict)
      {
LABEL_17:
        pdf_error("Failed to get linearized page dict for page: %zu\n", a2);
        CFRelease(*(CFTypeRef *)(a1 + 8));
        *(_QWORD *)(a1 + 8) = 0;
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
        goto LABEL_18;
      }
      v7 = linearized_page_dict;
      CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a1 + 8), a2 - 1, linearized_page_dict);
    }
    else
    {
      v7 = ValueAtIndex;
      if (!ValueAtIndex)
        goto LABEL_17;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
  }
  return v7;
}

uint64_t add_pages(__CFArray *a1, void *a2, const __CFSet *a3)
{
  uint64_t result;
  uint64_t v7;
  size_t i;
  CGPDFDictionaryRef v9;
  CGPDFObjectRef value;

  if (!is_page_tree_node((_BOOL8)a2))
  {
    if (a2
      && (value = 0, CGPDFDictionaryGetObject((CGPDFDictionaryRef)a2, "Parent", &value))
      && value
      && *((_DWORD *)value + 2) == 8)
    {
      CFArrayAppendValue(a1, a2);
    }
    else
    {
      pdf_error("invalid page tree entry.");
    }
    return 1;
  }
  if (CFSetContainsValue(a3, a2))
  {
    pdf_error("invalid page tree: in fact, this isn't a tree at all!");
    return 0;
  }
  v9 = 0;
  value = 0;
  CFSetAddValue(a3, a2);
  if (!CGPDFDictionaryGetArray((CGPDFDictionaryRef)a2, "Kids", &value))
  {
    return 0;
  }
  if (!value)
    return 1;
  v7 = *((_QWORD *)value + 2);
  if (!v7)
    return 1;
  for (i = 0; i != v7; ++i)
  {
    if (CGPDFArrayGetDictionary(value, i, &v9))
    {
      result = add_pages(a1, v9, a3);
      if (!(_DWORD)result)
        return result;
    }
    else
    {
    }
    result = 1;
  }
  return result;
}

uint64_t pdf_reader_get_linearized_page_dict(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  CGPDFDictionary *v7;
  std::logic_error *exception;
  char *value;

  result = *a1;
  v3 = *(_QWORD *)(result + 32);
  if (!v3)
    return 0;
  if (*(_QWORD *)(v3 + 16) < a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "page_number is out of range");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E1620B40, MEMORY[0x1E0DE4360]);
  }
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 48);
  if (a2 - 1 < (*(_QWORD *)(*(_QWORD *)(v3 + 64) + 56) - v4) >> 6)
  {
    v5 = *(_QWORD *)(v4 + ((a2 - 1) << 6) + 56);
    if (v5)
    {
      v6 = pdf_xref_resolve(result, v5, 0);
      if (v6)
      {
        if (*((_DWORD *)v6 + 2) == 8)
        {
          v7 = (CGPDFDictionary *)*((_QWORD *)v6 + 4);
          value = 0;
          if (CGPDFDictionaryGetName(v7, "Type", (const char **)&value) && !strcmp(value, "Page"))
            return (uint64_t)v7;
        }
      }
    }
    return 0;
  }
  __break(1u);
  return result;
}

void sub_184A270DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v11;

  v11 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    (*(void (**)(void *))(*(_QWORD *)v11 + 16))(v11);
    pdf_error("%s caught exception: %s");
  }
  else
  {
    pdf_error("%s caught an unknown exception");
  }
  __cxa_end_catch();
  JUMPOUT(0x184A2707CLL);
}

os_unfair_lock_s *CGPDFResourcesCreateWithPage(uint64_t a1, int a2)
{
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  CGPDFDictionaryRef v8;
  _QWORD *v9;
  CGPDFDictionary *v10;
  CGPDFDictionaryRef v11;
  uint64_t v12;
  _QWORD *v13;
  __CFSet *Mutable;
  CGPDFDictionaryRef v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  CGPDFDictionaryRef v22;
  CGPDFDictionaryRef value;

  v4 = (os_unfair_lock_s *)CGPDFResourcesCreate();
  v5 = v4;
  if (v4)
  {
    v22 = 0;
    os_unfair_lock_lock(v4 + 20);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 88));
    v6 = *(_QWORD *)(a1 + 40);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 88));
    if (v6 && CGPDFDictionaryGetDictionary(*(CGPDFDictionaryRef *)(v6 + 48), "Resources", &v22))
    {
      v7 = *(_QWORD *)&v5[4]._os_unfair_lock_opaque;
      v8 = v22;
      v9 = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
      *v9 = v7;
      v9[1] = v8;
      *(_QWORD *)&v5[4]._os_unfair_lock_opaque = v9;
    }
    v10 = *(CGPDFDictionary **)(a1 + 16);
    value = v10;
    if (CGPDFDictionaryGetDictionary(v10, "Resources", &v22))
    {
      v11 = v22;
    }
    else
    {
      v11 = 0;
      v22 = 0;
    }
    v12 = *(_QWORD *)&v5[4]._os_unfair_lock_opaque;
    v13 = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
    *v13 = v12;
    v13[1] = v11;
    *(_QWORD *)&v5[4]._os_unfair_lock_opaque = v13;
    if (a2)
    {
      Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
      while (CGPDFDictionaryGetDictionary(v10, "Parent", &value) && !CFSetContainsValue(Mutable, value))
      {
        if (CGPDFDictionaryGetDictionary(value, "Resources", &v22))
        {
          v15 = v22;
        }
        else
        {
          v15 = 0;
          v22 = 0;
        }
        v16 = *(_QWORD *)&v5[4]._os_unfair_lock_opaque;
        v17 = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
        *v17 = v16;
        v17[1] = v15;
        *(_QWORD *)&v5[4]._os_unfair_lock_opaque = v17;
        CFSetAddValue(Mutable, value);
        v10 = value;
      }
      v18 = *(_QWORD **)&v5[4]._os_unfair_lock_opaque;
      if (v18)
      {
        v19 = 0;
        do
        {
          v20 = v18;
          v18 = (_QWORD *)*v18;
          *v20 = v19;
          v19 = v20;
        }
        while (v18);
      }
      else
      {
        v20 = 0;
      }
      *(_QWORD *)&v5[4]._os_unfair_lock_opaque = v20;
      CFRelease(Mutable);
    }
    os_unfair_lock_unlock(v5 + 20);
  }
  return v5;
}

uint64_t CGPDFResourcesCreate()
{
  uint64_t result;

  if (CGPDFResourcesGetTypeID_onceToken != -1)
    dispatch_once(&CGPDFResourcesGetTypeID_onceToken, &__block_literal_global_16_7331);
  result = pdf_create_cftype();
  if (result)
    *(_DWORD *)(result + 80) = 0;
  return result;
}

BOOL CGPDFArrayGetDictionary(CGPDFArrayRef array, size_t index, CGPDFDictionaryRef *value)
{
  _BOOL4 Object;
  CGPDFObjectRef valuea;

  valuea = 0;
  Object = CGPDFArrayGetObject(array, index, &valuea);
  if (Object)
  {
    if (valuea && *((_DWORD *)valuea + 2) == 8)
    {
      if (value)
        *value = (CGPDFDictionaryRef)*((_QWORD *)valuea + 4);
      LOBYTE(Object) = 1;
    }
    else
    {
      LOBYTE(Object) = 0;
    }
  }
  return Object;
}

CGPDFScannerRef CGPDFScannerCreate(CGPDFContentStreamRef cs, CGPDFOperatorTableRef table, void *info)
{
  uint64_t cftype;
  uint64_t v7;

  if (CGPDFScannerGetTypeID_onceToken != -1)
    dispatch_once(&CGPDFScannerGetTypeID_onceToken, &__block_literal_global_19805);
  cftype = pdf_create_cftype();
  *(_QWORD *)(cftype + 16) = info;
  if (cs)
  {
    CFRetain(cs);
    v7 = *((_QWORD *)cs + 3);
  }
  else
  {
    v7 = 0;
  }
  *(_QWORD *)(cftype + 48) = v7;
  *(_QWORD *)(cftype + 56) = cs;
  CGPDFScannerPushTable((_QWORD *)cftype, (uint64_t)table);
  *(_DWORD *)(cftype + 112) = 0;
  *(_QWORD *)(cftype + 144) = 0;
  *(_QWORD *)(cftype + 120) = 0;
  *(_QWORD *)(cftype + 128) = 0;
  *(_BYTE *)(cftype + 136) = 0;
  *(_QWORD *)(cftype + 72) = 0x800000000;
  *(_QWORD *)(cftype + 80) = malloc_type_malloc(0x140uLL, 0x103204077D336DFuLL);
  return (CGPDFScannerRef)cftype;
}

_QWORD *CGPDFScannerPushTable(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t i;
  uint64_t v6;

  if (result)
  {
    if (a2)
    {
      v3 = result;
      v4 = malloc_type_malloc(0x248uLL, 0x566C45D1uLL);
      result = (_QWORD *)__CFSetLastAllocationEventName();
      if (v4)
      {
        for (i = 0; i != 73; ++i)
          v4[i] = *(_QWORD *)(a2 + 16 + i * 8);
        v4[(int)CGPDFGetOperatorForName("BI", 2uLL, 0)] = op_BI;
        v4[(int)CGPDFGetOperatorForName("BX", 2uLL, 0)] = op_BX;
        v4[(int)CGPDFGetOperatorForName("EX", 2uLL, 0)] = op_EX;
        v3[3] = v4;
        v6 = v3[4];
        result = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
        *result = v6;
        result[1] = v4;
        v3[4] = result;
      }
    }
  }
  return result;
}

void CGPDFDrawingContextRelease(void *a1)
{
  const void *v2;
  void *v3;
  unint64_t v4;
  unint64_t i;
  uint64_t v6;
  void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  if (a1)
  {
    v2 = *(const void **)a1;
    if (v2)
      CFRelease(v2);
    v3 = (void *)*((_QWORD *)a1 + 3);
    if (v3)
    {
      CGPDFGStateReleaseProperties(*((_QWORD **)a1 + 3));
      free(v3);
    }
    v4 = *((_QWORD *)a1 + 5);
    if (v4)
    {
      for (i = 0; i < v4; ++i)
      {
        v6 = *((_QWORD *)a1 + 7);
        v7 = *(void **)(v6 + 8 * i);
        if (v7)
        {
          CGPDFGStateReleaseProperties(*(_QWORD **)(v6 + 8 * i));
          free(v7);
          v4 = *((_QWORD *)a1 + 5);
        }
      }
    }
    while (v4 < *((_QWORD *)a1 + 6))
      free(*(void **)(*((_QWORD *)a1 + 7) + 8 * v4++));
    free(*((void **)a1 + 7));
    v8 = (const void *)*((_QWORD *)a1 + 8);
    if (v8)
      CFRelease(v8);
    v9 = (const void *)*((_QWORD *)a1 + 9);
    if (v9)
      CFRelease(v9);
    v10 = (const void *)*((_QWORD *)a1 + 16);
    if (v10)
      CFRelease(v10);
    free(a1);
  }
}

BOOL CGContextIsEmptyClipBoundingBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v8;
  double v9;
  double v10;

  if (!a1 || *(_DWORD *)(a1 + 16) != 1129601108)
  {
    handle_invalid_context((char)"CGContextIsEmptyClipBoundingBox", a1, a3, a4, a5, a6, a7, a8);
    return 1;
  }
  if (get_device_clip_bounding_box(a1) == INFINITY || v8 == INFINITY)
    return 1;
  return v10 == 0.0 || v9 == 0.0;
}

uint64_t pdf_page_get_xinfo(uint64_t a1)
{
  os_unfair_lock_s *v2;
  BOOL v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  _QWORD v9[5];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  v2 = (os_unfair_lock_s *)(a1 + 88);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 88));
  if (!*(_QWORD *)(a1 + 64))
  {
    v3 = 1;
    v4 = malloc_type_calloc(1uLL, 1uLL, 0x33BCE901uLL);
    __CFSetLastAllocationEventName();
    v10 = 0;
    v11 = &v10;
    v12 = 0x2000000000;
    v13 = 0;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 32));
    v5 = *(_QWORD *)(a1 + 24);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 32));
    v6 = MEMORY[0x1E0C809B0];
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 0x40000000;
    v9[2] = __CheckPageForSpecialBlends_block_invoke;
    v9[3] = &unk_1E165ED50;
    v9[4] = &v10;
    CGPDFResourcesIterateCategory(v5, "ExtGState", (uint64_t)v9);
    if (!*((_BYTE *)v11 + 24))
    {
      v8[0] = v6;
      v8[1] = 0x40000000;
      v8[2] = __CheckPageForSpecialBlends_block_invoke_2;
      v8[3] = &unk_1E165EDA0;
      v8[4] = &v10;
      CGPDFResourcesIterateCategory(v5, "XObject", (uint64_t)v8);
      v3 = *((_BYTE *)v11 + 24) != 0;
    }
    _Block_object_dispose(&v10, 8);
    *v4 = v3;
    *(_QWORD *)(a1 + 64) = v4;
  }
  os_unfair_lock_unlock(v2);
  return *(_QWORD *)(a1 + 64);
}

_QWORD *std::__hash_table<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::__unordered_map_hasher<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::hash<CGPDFPage *>,std::equal_to<CGPDFPage *>,true>,std::__unordered_map_equal<CGPDFPage *,std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>,std::equal_to<CGPDFPage *>,std::hash<CGPDFPage *>,true>,std::allocator<std::__hash_value_type<CGPDFPage *,std::__list_iterator<CGPDFPage *,void *>>>>::find<CGPDFPage *>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void CGContextRestoreToGStateMark(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  uint64_t v11;
  char *v12;
  char **v13;
  uint64_t v14;

  if (!a1)
  {
    v14 = 0;
LABEL_12:
    handle_invalid_context((char)"CGContextRestoreToGStateMark", v14, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    v14 = a1;
    goto LABEL_12;
  }
  if (!a2 || (v10 = *(void **)(a1 + 104), v10 == (void *)a2))
  {
    CGPostError((uint64_t)"%s: invalid gstate mark.", a2, a3, a4, a5, a6, a7, a8, (char)"CGContextRestoreToGStateMark");
  }
  else
  {
    if (v10)
    {
      CGGStackReset(*(uint64_t **)(a1 + 104));
      free(v10);
    }
    *(_QWORD *)(a1 + 104) = a2;
    v11 = *(_QWORD *)(a2 + 8);
    if (v11 == a2)
    {
      v12 = CGGStateCreate();
      v13 = *(char ***)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v12;
      *(_QWORD *)v12 = a2;
      *v13 = v12;
      *((_QWORD *)v12 + 1) = v13;
      v11 = *(_QWORD *)(a2 + 8);
    }
    *(_QWORD *)(a1 + 96) = v11;
  }
}

uint64_t CGContextGetStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 120) + 16);
  handle_invalid_context((char)"CGContextGetStyle", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGContextGetGStateMark(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  char **v14;
  uint64_t v15;

  if (!a1)
  {
    v15 = 0;
LABEL_8:
    handle_invalid_context((char)"CGContextGetGStateMark", v15, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    v15 = a1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(a1 + 104);
  v10 = CGGStackCreateWithGState(*(_QWORD *)(a1 + 96));
  *(_QWORD *)(a1 + 104) = v10;
  v11 = (_QWORD *)v10[1];
  if (v11 == v10)
  {
    v12 = v10;
    v13 = CGGStateCreate();
    v14 = (char **)v12[1];
    v12[1] = v13;
    *(_QWORD *)v13 = v12;
    *v14 = v13;
    *((_QWORD *)v13 + 1) = v14;
    v11 = (_QWORD *)v12[1];
  }
  *(_QWORD *)(a1 + 96) = v11;
  return v9;
}

double CGContextGetAlpha(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
    return *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 120) + 8);
  handle_invalid_context((char)"CGContextGetAlpha", a1, a3, a4, a5, a6, a7, a8);
  return 0.0;
}

uint64_t CGPDFResourcesIterateCategory(uint64_t result, char *key, uint64_t a3)
{
  uint64_t **i;
  CGPDFDictionaryRef value;

  if (result)
  {
    if (key)
    {
      for (i = *(uint64_t ***)(result + 16); i; i = (uint64_t **)*i)
      {
        value = 0;
        result = CGPDFDictionaryGetDictionary((CGPDFDictionaryRef)i[1], key, &value);
        if ((_DWORD)result)
        {
          result = (*(uint64_t (**)(uint64_t, CGPDFDictionaryRef))(a3 + 16))(a3, value);
          if (!(_DWORD)result)
            break;
        }
      }
    }
  }
  return result;
}

uint64_t CheckExtGStateForSpecialBlends(CGPDFDictionary *a1)
{
  uint64_t v1;
  _QWORD block[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2000000000;
  v7 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __CheckExtGStateForSpecialBlends_block_invoke;
  block[3] = &unk_1E165EDC8;
  block[4] = &v4;
  CGPDFDictionaryApplyBlock(a1, block, 0);
  v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void CGPDFDictionaryApplyBlock(CGPDFDictionaryRef dict, CGPDFDictionaryApplierBlock block, void *info)
{
  uint64_t ****i;
  uint64_t *v6;
  uint64_t ***v7;

  if (dict)
  {
    if (block)
    {
      for (i = (uint64_t ****)*((_QWORD *)dict + 7); i; i = (uint64_t ****)**i)
      {
        if (*((_DWORD *)i + 2) == 5)
        {
          v6 = (uint64_t *)i[4];
          v7 = *i;
          if (*i)
          {
            if (*((_DWORD *)v7 + 2) == 10)
              pdf_xref_resolve(*((_QWORD *)dict + 3), (unint64_t)v7[2], (uint64_t)v7[3]);
          }
          if (!(*((unsigned int (**)(CGPDFDictionaryApplierBlock, uint64_t *))block + 2))(block, v6))
            break;
        }
      }
    }
  }
}

int8x8_t *cf_color_space_state_hash(int8x8_t *result)
{
  int8x8_t v1;

  if (result)
  {
    v1 = veor_s8(result[7], (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)result[7].i8, *(int8x16_t *)result[7].i8, 8uLL));
    return (int8x8_t *)(v1.i32[0] ^ v1.i32[1]);
  }
  return result;
}

void CGPathApplyWithBlock2(double *cf, uint64_t a2)
{
  CFTypeID v4;
  _QWORD v5[5];

  if (cf)
  {
    if (CGPathDisableTypeValidation || (v4 = CFGetTypeID(cf), v4 == CGPathGetTypeID()))
    {
      v5[0] = MEMORY[0x1E0C809B0];
      v5[1] = 0x40000000;
      v5[2] = __CGPathApplyWithBlock2_block_invoke;
      v5[3] = &unk_1E1660808;
      v5[4] = a2;
      CG::Path::apply(cf + 2, (uint64_t)v5);
    }
  }
}

_QWORD *CGFontGetHMetrics(_QWORD *result)
{
  _QWORD *v1;
  unint64_t *v2;
  _QWORD *v3;
  int v4;
  unint64_t v5;

  if (result)
  {
    v1 = result;
    v2 = result + 6;
    result = (_QWORD *)atomic_load(result + 6);
    if (!result)
    {
      result = get_font_info(v1);
      if (result)
      {
        v3 = result;
        result = malloc_type_malloc(0x10uLL, 0x1000040451B5BE8uLL);
        *result = *(_QWORD *)((char *)v3 + 12);
        v4 = *((_DWORD *)v3 + 8);
        *((_DWORD *)result + 2) = *((_DWORD *)v3 + 5);
        *((_DWORD *)result + 3) = v4;
        while (1)
        {
          v5 = __ldaxr(v2);
          if (v5)
            break;
          if (!__stlxr((unint64_t)result, v2))
            return result;
        }
        __clrex();
        free(result);
        return (_QWORD *)v5;
      }
    }
  }
  return result;
}

uint64_t CGFontCopyFamilyName(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(result + 16) + 176))(*(_QWORD *)(result + 112));
  return result;
}

void CGContextStrokeRectWithWidth(CGContextRef c, CGRect rect, CGFloat width)
{
  CGFloat height;
  CGFloat v5;
  CGFloat y;
  CGFloat x;
  CGRect v9;

  height = rect.size.height;
  v5 = rect.size.width;
  y = rect.origin.y;
  x = rect.origin.x;
  CGContextSaveGState(c);
  CGContextSetLineWidth(c, width);
  v9.origin.x = x;
  v9.origin.y = y;
  v9.size.width = v5;
  v9.size.height = height;
  CGContextStrokeRect(c, v9);
  CGContextRestoreGState(c);
}

void CGContextSetLineWidth(CGContextRef c, CGFloat width)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (c && *((_DWORD *)c + 4) == 1129601108)
  {
    if (width >= 0.0 || width == -1.0905473e16)
    {
      v9 = *((_QWORD *)c + 12);
      if (*(double *)(*(_QWORD *)(v9 + 128) + 8) != width)
      {
        maybe_copy_stroke_state(*((_QWORD *)c + 12));
        *(CGFloat *)(*(_QWORD *)(v9 + 128) + 8) = width;
      }
    }
    else
    {
      CGPostError((uint64_t)"%s: invalid line width: negative values are not allowed.", (uint64_t)c, v2, v3, v4, v5, v6, v7, (char)"CGContextSetLineWidth");
    }
  }
  else
  {
    handle_invalid_context((char)"CGContextSetLineWidth", (uint64_t)c, v2, v3, v4, v5, v6, v7);
  }
}

void CGContextStrokeRect(CGContextRef c, CGRect rect)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  const void *v18;
  double v19;
  uint64_t v20;
  unsigned int (*v21)(void);
  CGContextRef v22;
  CGRect v24;

  if (!c)
  {
    v22 = 0;
LABEL_31:
    handle_invalid_context((char)"CGContextStrokeRect", (uint64_t)v22, v2, v3, v4, v5, v6, v7);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v22 = c;
    goto LABEL_31;
  }
  height = rect.size.height;
  width = rect.size.width;
  y = rect.origin.y;
  x = rect.origin.x;
  if (rect.origin.x != INFINITY && rect.origin.y != INFINITY)
  {
    v18 = (const void *)*((_QWORD *)c + 21);
    if (v18)
    {
      CFRelease(v18);
      *((_QWORD *)c + 21) = 0;
    }
    v19 = *(double *)(*(_QWORD *)(*((_QWORD *)c + 12) + 128) + 8);
    if (v19 > 0.0 || v19 == -1.0905473e16)
    {
      v20 = *((_QWORD *)c + 5);
      if (v20)
      {
        v21 = *(unsigned int (**)(void))(v20 + 64);
        if (v21)
        {
          if (v21() != 1006)
            return;
          x = rect.origin.x;
          y = rect.origin.y;
          width = rect.size.width;
          height = rect.size.height;
        }
        v24.origin.x = x;
        v24.origin.y = y;
        v24.size.width = width;
        v24.size.height = height;
        CGContextAddRect(c, v24);
        CGContextDrawPath(c, kCGPathStroke);
      }
    }
  }
}

uint64_t __get_session_key_block_invoke()
{
  return pthread_key_create((pthread_key_t *)&get_session_key_session_key, 0);
}

uint64_t img_alphamerge_read(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 **a4, int *a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  __int128 v35;
  _QWORD v36[2];

  v9 = a3;
  v36[1] = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)a1;
  v13 = *(_DWORD *)(a1 + 88);
  v36[0] = 0;
  v35 = 0uLL;
  switch(v13)
  {
    case 0:
      v23 = 0;
      goto LABEL_25;
    case 1:
      if (!*(_QWORD *)v12
        && *(uint64_t (**)(uint64_t, unsigned int, uint64_t, char **, int *, uint64_t, uint64_t, uint64_t))(v12 + 16) == img_raw_read)
      {
        v23 = img_raw_access(v12, 0);
      }
      else
      {
        v23 = 0;
      }
      v24 = *a5 * ((int)v9 - 1) / *(_DWORD *)(a1 + 56);
      if (v24 >= (int)v9)
      {
        v9 = (v9 - 1);
      }
      else
      {
        v25 = *(_DWORD *)(a1 + 64);
        if (v25 >= (int)v9)
          v26 = v9;
        else
          v26 = *(_DWORD *)(a1 + 64);
        if (v24 >= v25)
          v9 = v24;
        else
          v9 = v26;
      }
LABEL_25:
      if (!*(_QWORD *)v12
        && *(uint64_t (**)(uint64_t, unsigned int, uint64_t, char **, int *, uint64_t, uint64_t, uint64_t))(v12 + 16) == img_raw_read)
      {
        v28 = img_raw_access(v12, 0);
        v35 = *(_OWORD *)a4;
        v36[0] = *(_QWORD *)a5;
        if ((v28 & 1) == 0)
          break;
      }
      else
      {
        v35 = *(_OWORD *)a4;
        v36[0] = *(_QWORD *)a5;
        if (!v23)
          break;
      }
      v27 = img_raw_data(v12, a2, v9, &v35, v36);
      goto LABEL_31;
    case 2:
      v14 = *a4;
      v15 = *a5;
      v16 = *(_DWORD *)(a1 + 56);
      v17 = *(_DWORD *)(a1 + 60);
      v36[0] = __PAIR64__(v17, v16);
      v18 = (a3 - 1);
      v19 = v15 * (int)v18 / (int)(v17 + v15);
      if (v19 >= (int)a3
        || (v20 = *(_DWORD *)(a1 + 64), v18 = (v15 * (int)v18 / (int)(v17 + v15)), v19 >= v20))
      {
        v21 = &v14[v15 * (int)a3 - (int)(v18 * v17)];
        *((_QWORD *)&v35 + 1) = v21;
        v9 = v18;
      }
      else
      {
        if (v20 >= (int)a3)
          v9 = a3;
        else
          v9 = v20;
        v22 = *(_QWORD *)(a1 + 72);
        v21 = *(unsigned __int8 **)(a1 + 80);
        *((_QWORD *)&v35 + 1) = v21;
        if (v22)
        {
          *(_QWORD *)&v35 = v22;
          break;
        }
      }
      *(_QWORD *)&v35 = &v21[-(int)(v9 * v16)];
      break;
  }
  v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __int128 *, _QWORD *, uint64_t))(v12 + 16))(v12, a2, v9, &v35, v36, a6);
LABEL_31:
  v29 = v27;
  if ((int)v27 < 1)
    return 0;
  v30 = *(_DWORD *)(v12 + 40);
  if (v30 == 16)
    v31 = 2;
  else
    v31 = 1;
  if (v30 == 32)
    v32 = 4;
  else
    v32 = v31;
  if (*(_DWORD *)(a1 + 112) == 5)
    v33 = 5;
  else
    v33 = v32;
  img_alpha(*(_DWORD *)(v12 + 48), v27, *(unsigned int *)(v12 + 36), *(_DWORD *)(v12 + 44), (unsigned __int8 **)&v35, (int *)v36, *(unsigned int *)(a1 + 44), a4, a5, v33);
  return v29;
}

uint64_t img_raw_access(uint64_t a1, _DWORD *a2)
{
  int v3;
  uint64_t v4;
  uint64_t result;
  int v7;

  v3 = *(_DWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 96);
  if (v4 == -1)
  {
    result = *(_QWORD *)(a1 + 184);
    if (result)
    {
      if (v3)
        return 0;
    }
    else
    {
      result = (uint64_t)img_blocks_create(*(_QWORD *)(a1 + 144), 0, *(int **)(a1 + 152), 0);
      if (!result)
        return result;
      *(_QWORD *)(a1 + 184) = result;
      *(_QWORD *)(a1 + 88) = 0;
      if (v3)
        return 0;
    }
    return *(_QWORD *)(result + 40) == *(_QWORD *)(result + 48);
  }
  if (v4)
    return !v3 && !*(_QWORD *)(a1 + 152);
  if (get_image_pointer((_QWORD *)a1) && !v3)
    return 1;
  if (!a2)
    return 0;
  result = 0;
  v7 = *(_DWORD *)(a1 + 56);
  if (v7 >= *a2 && v7 - *a2 <= 64)
  {
    *a2 = v7;
    return 0;
  }
  return result;
}

uint64_t img_decode_read(uint64_t a1, unsigned int a2, uint64_t a3, uint16x4_t **a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v16;
  int *v17;
  uint64_t *v18;
  uint64_t image_pointer;
  double v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  int v34;
  int v35;
  BOOL v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  double v45;
  uint8x8_t v46;
  uint64_t v47;
  uint16x4_t *v48;
  char *v49;
  int v50;
  int v51;
  uint16x4_t *v52;
  uint16x4_t *v53;
  uint64_t v54;
  int v55;
  _DWORD *v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  unsigned int v64;
  uint64_t v65;
  int *v66;
  size_t v67;
  double v68;
  uint8x8_t v69;
  int *v70;
  uint64_t v71;
  int *v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  uint16x4_t *v76;
  int v77;
  uint64_t v78;
  signed int v79;
  int v80;
  int v81;
  int *v82;
  uint64_t *access_session;
  uint64_t v84;
  signed int v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  BOOL v91;
  int v92;
  int v93;
  int v94;
  char *v95;
  uint64_t v96;
  int *v97;
  size_t v98;
  double v99;
  uint8x8_t v100;
  void **v101;
  uint64_t v102;
  _QWORD *v103;
  int *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint16x4_t *v108;
  uint64_t v109;
  int v110;
  uint16x4_t *v111;
  uint16x4_t *v112;
  char *v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  unint64_t v119;
  char *v120;
  int v121;
  int ChunksAtPosition;
  double v123;
  uint8x8_t v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  void **v128;
  int v129;
  int v130;
  unint64_t v131;
  size_t v132;
  uint64_t v133;
  uint16x4_t *v134;
  int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  int v140;
  int v141;
  int v142;
  unsigned int v143;
  int *v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  unsigned int v149;
  int v150;
  int v151;
  uint64_t v152;

  result = 0;
  v152 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x80000000) == 0)
  {
    v11 = a3;
    v12 = (a3 - 1);
    if ((int)a3 >= 1)
    {
      v16 = *(_QWORD *)(a1 + 96);
      v18 = *(uint64_t **)(a1 + 144);
      v17 = *(int **)(a1 + 152);
      v144 = *(int **)(a1 + 160);
      if ((_DWORD)v16 == -1)
      {
        v28 = *(_DWORD *)(a1 + 128);
        v29 = *(_DWORD *)(a1 + 40);
        if (v29 >= 0)
          v30 = *(_DWORD *)(a1 + 40);
        else
          v30 = v29 + 7;
        v31 = *(_QWORD **)(a1 + 184);
        if (!v31)
        {
          v32 = img_blocks_create((uint64_t)v18, 0, v17, 0);
          if (!v32)
            return 0xFFFFFFFFLL;
          v31 = v32;
          *(_QWORD *)(a1 + 184) = v32;
          *(_QWORD *)(a1 + 88) = 0;
        }
        v33 = v11 + a2;
        v34 = *((_DWORD *)v31 + 15);
        v35 = *((_DWORD *)v31 + 17) + v34;
        if (v34 >= (int)(v11 + a2) || v35 <= (int)a2)
          return 0;
        v37 = __OFSUB__(v35, v33);
        v38 = v35 - v33;
        if (v38 < 0 != v37)
        {
          v11 = (v38 + v11);
          if ((int)v11 < 1)
            return 0;
        }
        *(_QWORD *)(a1 + 88) = a2;
        v148 = 0;
        v149 = a2;
        v150 = *(_QWORD *)(a1 + 120);
        v151 = v11;
        v39 = v31[5];
        if ((int)v39 >= 1)
        {
          v40 = v28;
          v41 = 0;
          v42 = 0;
          v43 = *((_DWORD *)v31 + 8);
          v141 = v30 >> 3;
          v142 = v43;
          v143 = (v30 >> 3) * v40;
          v140 = (v30 >> 3) + v143;
          v44 = 16 * v39;
          do
          {
            v146 = 0;
            v147 = 0;
            v145 = 0uLL;
            v145 = *(_OWORD *)(v31[9] + v42);
            if (CGSBoundsIntersection(&v148, (int *)&v145, &v146))
            {
              v47 = SHIDWORD(v146) - (uint64_t)(int)v149;
              v48 = a4[1];
              v49 = (char *)*a4 + (int)v47 * *a5;
              if (v48)
              {
                v50 = v146;
                v51 = v146 - v148;
                if (v48 == *a4)
                {
                  v52 = (uint16x4_t *)&v49[v140 * v51];
                  v53 = v52;
                }
                else
                {
                  v52 = (uint16x4_t *)&v49[v143 * v51];
                  v53 = (uint16x4_t *)((char *)v48 + a5[1] * v47 + v51 * v141);
                }
              }
              else
              {
                v53 = 0;
                v50 = v146;
                v52 = (uint16x4_t *)&v49[(int)(v143 * (v146 - v148))];
              }
              v54 = *(_QWORD *)(v31[10] + v41);
              if (v54)
              {
                decode_data(v144, v147, SHIDWORD(v147), (char *)(v54+ *(_QWORD *)(v31[11] + v41) * (SHIDWORD(v146) - (uint64_t)SDWORD1(v145))+ (v50 - (int)v145) * v142), *(_QWORD *)(v31[11] + v41), v52, *a5, v53, v45, v46, a5[1]);
              }
              else
              {
                CGBlt_fillBytes(*a5, HIDWORD(v147), 0, (char *)v52, *a5);
                if (v53 && v53 != v52)
                  CGBlt_fillBytes(a5[1], HIDWORD(v147), 0, (char *)v53, a5[1]);
              }
            }
            v42 += 16;
            v41 += 8;
          }
          while (v44 != v42);
        }
      }
      else
      {
        if (!(_DWORD)v16)
        {
          if (v16)
            _CGHandleAssert("img_decode_read_with_data_provider", 1202, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGSImage.c", "stage->param[IMG_DECODE_NDATA] == 0", "param = %ld", a6, a7, a8, 0);
          image_pointer = get_image_pointer((_QWORD *)a1);
          if (image_pointer)
          {
            v22 = image_pointer;
            v23 = *(_QWORD *)(a1 + 120);
            v24 = *(_QWORD *)(a1 + 136);
            v25 = *(int **)(a1 + 160);
            *(_QWORD *)(a1 + 88) = a2;
            v26 = (int)v24 * (unint64_t)a2;
            if (v26 == (int)v26)
            {
              decode_data(v25, v23, v11, (char *)(v22 + v26), v24, *a4, *a5, a4[1], v20, v21, a5[1]);
LABEL_9:
              v27 = *(_QWORD *)(a1 + 88) + (int)v11;
LABEL_132:
              *(_QWORD *)(a1 + 88) = v27;
              return v11;
            }
          }
          else
          {
            v79 = *(_DWORD *)(a1 + 136);
            v80 = *(_DWORD *)(a1 + 104);
            v81 = *(_DWORD *)(a1 + 88);
            v82 = *(int **)(a1 + 160);
            access_session = get_access_session(a1);
            v85 = (v80 + 15) & 0xFFFFFFF0;
            if (v79 - v85 < 64 || v79 <= v85)
              v85 = v79;
            if (v80 < 1)
              v85 = v79;
            v87 = *a5;
            v88 = v87 * v11;
            if (v88 != (int)v88)
              return 0;
            v89 = v87 * v12;
            if (v89 != (int)v89)
              return 0;
            v113 = (char *)*a4 + v88;
            v114 = (int)v89 / v85;
            if (v114 < (int)v11)
            {
              v115 = *(_DWORD *)(a1 + 64);
              LODWORD(v12) = v114;
              if (v114 < v115)
              {
                if (v115 >= (int)v11)
                  LODWORD(v12) = v11;
                else
                  LODWORD(v12) = *(_DWORD *)(a1 + 64);
                v85 = *(_DWORD *)(a1 + 56);
                v116 = v85 * (uint64_t)(int)v12;
                if (v116 != (int)v116)
                  return 0;
                v113 = (char *)(*(_QWORD *)(a1 + 72) + v116);
              }
            }
            v144 = v82;
            v117 = (int)v12 * (uint64_t)v85;
            if (v117 == (int)v117)
            {
              v118 = v81;
              v119 = v85;
              v120 = &v113[-v117];
              v121 = v118;
              if (v118 > (int)a2)
              {
                v121 = 0;
                *(_QWORD *)(a1 + 88) = 0;
              }
              if (v121 < (int)a2)
                *(_QWORD *)(a1 + 88) = a2;
              ChunksAtPosition = CGAccessSessionGetChunksAtPosition(access_session, (int)(v79 * a2), v119, v79 - (int)v119, (int)v12, &v113[-v117], 0, v84);
              v125 = ChunksAtPosition / v79;
              if (ChunksAtPosition % v79 < v80)
                v126 = ChunksAtPosition / v79;
              else
                v126 = v125 + 1;
              if (v80 >= 1)
                v11 = v126;
              else
                v11 = v125;
              if (v144)
              {
                decode_data(v144, *(unsigned int *)(a1 + 120), v11, v120, v119, *a4, *a5, a4[1], v123, v124, a5[1]);
              }
              else
              {
                v131 = *a5;
                if (v131 >= v119)
                  v132 = v119;
                else
                  v132 = *a5;
                if ((_DWORD)v11)
                {
                  v133 = (int)v11;
                  v134 = *a4;
                  do
                  {
                    memmove(v134, v120, v132);
                    v134 = (uint16x4_t *)((char *)v134 + v131);
                    v120 += v119;
                    --v133;
                  }
                  while (v133);
                }
              }
              goto LABEL_9;
            }
          }
          return 0;
        }
        v55 = *(_DWORD *)(a1 + 120);
        v56 = *(_DWORD **)(a1 + 136);
        if (v17)
        {
          v57 = *(_DWORD *)(a1 + 128);
          v58 = *(_DWORD *)(a1 + 40);
          v59 = v58 + 7;
          v140 = v58;
          if (v58 >= 0)
            v59 = v58;
          v142 = v59;
          v143 = v57;
          v60 = a3 + a2;
          v61 = v17[1];
          v62 = v17[3] + v61;
          *(_QWORD *)(a1 + 88) = a2;
          if (v62 <= (int)a2 || v60 <= v61)
          {
            v61 = 0;
            v60 = 0;
            v64 = 0;
            v141 = 0;
          }
          else
          {
            if (v62 < v60)
              v60 = v62;
            v90 = a2 - v61;
            v92 = v61 - a2;
            v91 = v61 <= (int)a2;
            if (v61 > (int)a2)
            {
              v64 = 0;
            }
            else
            {
              v61 = a2;
              v64 = v90;
            }
            if (v91)
              v93 = 0;
            else
              v93 = v92;
            v141 = v93;
          }
          v94 = v60 - v61;
          if (v60 - v61 != (_DWORD)a3 || v17[2] != v55)
          {
            CGBlt_fillBytes(*a5, a3, 0, (char *)*a4, *a5);
            v95 = (char *)a4[1];
            if (v95)
              CGBlt_fillBytes(a5[1], v11, 0, v95, a5[1]);
          }
          if (v94 >= 1)
          {
            v139 = v94;
            v138 = v16 << 32;
            MEMORY[0x1E0C80A78](result, a9);
            v97 = (int *)((char *)&v137 - v96);
            bzero((char *)&v137 - v96, v98);
            v101 = (void **)((char *)v97 + (v138 >> 30));
            if ((int)v16 >= 1)
            {
              v102 = v16;
              v103 = (_QWORD *)((char *)v97 + (v138 >> 30));
              v104 = v97;
              do
              {
                v106 = *v18++;
                v105 = v106;
                LODWORD(v106) = *v56++;
                *v103++ = v105 + (int)(v106 * v64);
                *v104++ = v106;
                --v102;
              }
              while (v102);
            }
            v107 = v142 >> 3;
            v108 = a4[1];
            v109 = (uint64_t)*a4 + *a5 * (uint64_t)v141;
            v110 = v139;
            if (v108)
            {
              if (v108 == *a4)
              {
                v111 = (uint16x4_t *)(v109 + (int)((v107 + v107 * v143) * *v17));
                v112 = v111;
              }
              else
              {
                v111 = (uint16x4_t *)(v109 + (int)(v107 * v143 * *v17));
                v112 = (uint16x4_t *)((char *)v108 + a5[1] * (uint64_t)v141 + *v17 * v107);
              }
            }
            else
            {
              v112 = 0;
              v111 = (uint16x4_t *)(v109 + (int)(v107 * v143 * *v17));
            }
            if ((_DWORD)v16 == 2 && v112 && (*(_DWORD *)(a1 + 44) & 0xFFFFFFFE) == 8)
            {
              if (v140 >= 16 && (v127 = *(_DWORD *)(a1 + 112)) != 0)
              {
                v128 = v101;
                CGBlt_swapBytes(v17[2] * v107, v139, v101[1], v112, v97[1], a5[1], v127);
              }
              else
              {
                v129 = v97[1];
                v130 = a5[1];
                v128 = v101;
                if (v129 == v130)
                  memcpy(v112, v101[1], (int)(v129 * v139));
                else
                  CGBlt_copyBytes(v17[2] * v107, v139, (char *)v101[1], (char *)v112, v129, v130);
              }
              v101 = v128;
            }
            decode_data(v144, v17[2], v110, (char *)*v101, *v97, v111, *a5, v112, v99, v100, a5[1]);
          }
        }
        else
        {
          v143 = *(_DWORD *)(a1 + 120);
          MEMORY[0x1E0C80A78](0, a9);
          v66 = (int *)((char *)&v137 - v65);
          bzero((char *)&v137 - v65, v67);
          v70 = &v66[(int)v16];
          *(_QWORD *)(a1 + 88) = a2;
          if ((int)v16 >= 1)
          {
            v71 = v16;
            v72 = &v66[(int)v16];
            v73 = v66;
            do
            {
              v75 = *v18++;
              v74 = v75;
              LODWORD(v75) = *v56++;
              *(_QWORD *)v72 = v74 + (int)(v75 * a2);
              v72 += 2;
              *v73++ = v75;
              --v71;
            }
            while (v71);
            if ((_DWORD)v16 == 2)
            {
              v76 = a4[1];
              if (v76)
              {
                if ((*(_DWORD *)(a1 + 44) & 0xFFFFFFFE) == 8)
                {
                  v77 = *(_DWORD *)(a1 + 40);
                  if (v77 >= 9 && (v78 = *(_QWORD *)(a1 + 112)) != 0)
                  {
                    CGBlt_swapBytes((v77 >> 3) * v143, v11, *((void **)v70 + 1), v76, v66[1], a5[1], v78);
                  }
                  else
                  {
                    v135 = v66[1];
                    v136 = a5[1];
                    if (v135 == v136)
                      memcpy(a4[1], *((const void **)v70 + 1), v135 * (int)v11);
                    else
                      CGBlt_copyBytes(v77 / 8 * v143, v11, *(char **)&v66[(int)v16 + 2], (char *)v76, v135, v136);
                  }
                }
              }
            }
          }
          decode_data(v144, v143, v11, *(char **)v70, *v66, *a4, *a5, a4[1], v68, v69, a5[1]);
        }
      }
      v27 = *(_QWORD *)(a1 + 88) + v11;
      goto LABEL_132;
    }
  }
  return result;
}

uint64_t get_image_pointer(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  if (a1[12] || a1[23])
    return 0;
  v2 = a1[24];
  if (!v2)
  {
    v4 = a1[18];
    v5 = CGDataProviderRetainBytePtr(v4);
    v2 = v5;
    if (v5)
      a1[24] = v5;
    else
      CGDataProviderReleaseBytePtr(v4);
    a1[11] = 0;
  }
  return v2;
}

void decode_data(int *a1, uint64_t a2, int a3, char *__src, int a5, uint16x4_t *__dst, int a7, uint16x4_t *a8, double a9, uint8x8_t a10, int a11)
{
  int *v12;
  uint64_t v14;
  int v15;
  int8x8_t *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  _BOOL8 v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint16x4_t *v44;
  int v45;
  uint64_t v46;
  char *v47;
  int v49;
  int v55;
  int v56;
  __int16 *v57;
  float *v58;
  float v59;
  float v60;
  uint16x4_t *v61;
  int v62;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  _BOOL8 v74;
  int v75;
  int v76;
  int v78;
  int8x8_t *v79;
  int8x8_t *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  _BOOL8 v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int8x8_t *v91;
  uint64_t v93;
  int8x8_t *v94;
  uint64_t v95;
  _QWORD *v96;
  uint16x4_t *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  int8x8_t *v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  _BOOL8 v115;
  int v116;
  int v117;
  int v118;
  int8x8_t *v119;
  int8x8_t *v120;
  int v121;
  int v122;
  int v123;
  int v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  _BOOL8 v129;
  int v130;
  int v131;
  int v133;
  int8x8_t *v134;
  int8x8_t *v135;
  int v136;
  _DWORD *v137;
  char *v138;
  _DWORD *v139;
  int8x8_t *v140;
  int v141;
  unsigned int v142;
  int v143;
  int v144;
  int v145;
  uint64_t v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  uint16x4_t *v154;
  __int16 v155;
  int v156;
  int8x8_t *v157;
  int8x8_t *v158;
  int v159;
  int v160;
  int v161;
  int8x8_t *v162;
  int v163;
  uint64_t v164;
  char *v165;
  int v166;
  uint16x4_t *v167;
  int v168;
  _QWORD *v169;
  int v170;
  _DWORD *v171;
  char v172;
  uint64_t v173;
  unsigned int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  _DWORD *v182;
  int v183;
  int v184;
  int v185;
  char *v186;
  char *v187;
  int v188;
  int v189;
  char v190;
  uint64_t v191;
  unsigned int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  unsigned int v197;
  uint64_t v198;
  int v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint16x4_t *v205;
  int v206;
  int v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint16x4_t *v213;
  int v214;
  char *v215;
  uint64_t v216;
  uint16x4_t *v217;
  int v218;
  float **v219;
  float *v220;
  int v221;
  float v222;
  int v223;
  float v224;
  BOOL v225;
  int v226;
  int v227;
  float *v228;
  float *v229;
  float v230;
  float v231;
  uint16x4_t *v232;
  int v233;
  float v234;
  float v235;
  int8x8_t *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  char *v241;
  uint64_t v242;
  uint16x4_t *v243;
  float **v244;
  int v245;
  float *v246;
  int v247;
  float v248;
  int v249;
  float v250;
  BOOL v251;
  int v252;
  int v253;
  unsigned int *v254;
  float *v255;
  float v256;
  float v257;
  uint16x4_t *v258;
  int v259;
  float v260;
  float v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  float *v268;
  int v269;
  char *v270;
  uint64_t v271;
  uint16x4_t *v272;
  int v273;
  uint64_t v274;
  int v275;
  int v276;
  int v277;
  float *v278;
  float *v279;
  float v280;
  float v281;
  float *v282;
  int v283;
  int8x8_t *v284;
  float *v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  char *v289;
  uint64_t v290;
  uint16x4_t *v291;
  uint64_t v292;
  int v293;
  int v294;
  int v295;
  int v296;
  unsigned int *v297;
  float *v298;
  float v299;
  float v300;
  float *v301;
  int v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint16x4_t *v308;
  int v309;
  char *v310;
  uint64_t v311;
  uint16x4_t *v312;
  int v313;
  float **v314;
  float *v315;
  int v316;
  float v317;
  int v318;
  float v319;
  BOOL v320;
  int v321;
  int v322;
  float *v323;
  float *v324;
  float v325;
  float v326;
  uint16x4_t *v327;
  int v328;
  float v329;
  float v330;
  int8x8_t *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  char *v336;
  uint64_t v337;
  uint16x4_t *v338;
  float **v339;
  int v340;
  float *v341;
  int v342;
  float v343;
  int v344;
  float v345;
  BOOL v346;
  int v347;
  int v348;
  unsigned int *v349;
  float *v350;
  float v351;
  float v352;
  uint16x4_t *v353;
  int v354;
  float v355;
  float v356;
  uint64_t v359;
  int v360;
  uint64_t v361;
  int *v362;
  uint64_t v363;
  uint64_t v364;
  uint16x4_t *v365;
  int v366;
  uint64_t v367;
  int v368;
  int v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  int v373;
  uint64_t v374;
  int v375;
  uint16x4_t *v376;
  int8x8_t v377;
  int v378;
  uint64_t v379;
  int v380;
  int v381;
  uint64_t v382;
  int v383;
  uint64_t v384;
  int v385;
  uint16x4_t *v386;
  __int16 v387;
  __int16 v388;
  __int16 v389;
  int v390;
  unsigned int v391;
  uint64_t v392;
  int v393;
  int v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  int v398;
  uint16x4_t *v399;
  int8x8_t v400;
  int v401;
  unsigned int v402;
  uint64_t v403;
  int v404;
  int v405;
  uint64_t v406;
  int v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  int v411;
  uint16x4_t *v412;
  int v413;
  int v414;
  int v415;
  int v416;
  uint64_t v417;
  _QWORD *v418;
  int v419;
  int v420;
  uint64_t v421;
  uint64_t v422;
  int v423;
  int v424;
  uint64_t v425;
  uint64_t v426;
  int v427;
  int v428;
  int8x8_t *v429;
  uint64_t v430;
  int v431;
  int v432;
  int v433;
  __int16 v434;
  __int16 v435;
  int v436;
  uint16x4_t *v437;
  __int16 v438;
  uint64_t v439;
  _DWORD *v440;
  _DWORD *v441;
  uint64_t v442;
  int v443;
  int v444;
  int v445;
  int v446;
  int v447;
  int v448;
  int v449;
  int v450;
  uint16x4_t *v451;
  int v452;
  int v453;
  unsigned int v454;
  unsigned int v455;
  uint64_t v456;
  int v457;
  uint16x4_t *v458;
  uint16x4_t v459;
  uint64_t v460;
  _DWORD *v461;
  uint64_t v462;
  uint64_t v463;
  _DWORD *v464;
  uint64_t v465;
  _DWORD *v466;
  _DWORD *v467;
  _DWORD *v468;
  int v469;
  int v470;
  int v471;
  int v472;
  int v473;
  int v474;
  int v475;
  int v476;
  int v477;
  int v478;
  int v479;
  int v480;
  int v481;
  int v482;
  int v483;
  int v484;
  int v485;
  int v486;
  int v487;
  int v488;
  uint16x4_t *v489;
  int v490;
  int v491;
  int v492;
  int v493;
  int v494;
  unsigned int v495;
  unsigned int v496;
  unsigned int v497;
  unsigned int v498;
  unsigned int v499;
  __int16 v500;
  int v501;
  uint16x4_t *v502;
  __int32 v503;
  __int16 v504;
  uint64_t v505;
  int v506;
  _DWORD *v507;
  uint64_t v508;
  uint64_t v509;
  _DWORD *v510;
  uint64_t v511;
  _DWORD *v512;
  _DWORD *v513;
  int v514;
  int v515;
  int v516;
  int v517;
  int v518;
  int v519;
  int v520;
  int v521;
  int v522;
  int v523;
  int v524;
  int v525;
  int v526;
  int v527;
  uint16x4_t *v528;
  int v529;
  int v530;
  int v531;
  int v532;
  unsigned int v533;
  unsigned int v534;
  unsigned int v535;
  unsigned int v536;
  int v537;
  unsigned int v538;
  uint64_t v539;
  _QWORD *v540;
  int v541;
  int v542;
  unsigned int v543;
  uint64_t v544;
  _QWORD *v545;
  int v546;
  unsigned __int16 *v547;
  uint64_t v548;
  int v549;
  unsigned __int8 *v550;
  uint64_t v551;
  int v552;
  int v553;
  uint16x4_t *v554;
  unsigned int v555;
  uint64_t v556;
  _DWORD *v557;
  _DWORD *v558;
  uint64_t v559;
  int v560;
  int v561;
  int v562;
  int v563;
  int v564;
  int v565;
  int v566;
  int v567;
  uint16x4_t *v568;
  unsigned int v569;
  unsigned int v570;
  unsigned int v571;
  unsigned int v572;
  int v573;
  uint16x4_t *v574;
  int8x8_t v575;
  uint64_t v576;
  _DWORD *v577;
  uint64_t v578;
  uint64_t v579;
  _DWORD *v580;
  uint64_t v581;
  _DWORD *v582;
  _DWORD *v583;
  _DWORD *v584;
  int v585;
  uint64_t v586;
  int v587;
  int v588;
  int v589;
  int32x4_t v590;
  int32x4_t v591;
  int32x4_t v592;
  int32x4_t v593;
  int v594;
  uint16x4_t *v595;
  unsigned int v596;
  char *v597;
  unsigned int v598;
  int8x8_t v599;
  uint64_t v600;
  uint64_t v601;
  int v602;
  uint16x4_t *v603;
  unsigned int v604;
  unsigned int v605;
  unsigned int v606;
  uint64_t v607;
  int v608;
  _DWORD *v609;
  uint64_t v610;
  uint64_t v611;
  _DWORD *v612;
  uint64_t v613;
  _DWORD *v614;
  _DWORD *v615;
  int v616;
  int v617;
  int v618;
  int v619;
  uint64_t v620;
  int v621;
  int v622;
  int v623;
  int v624;
  int v625;
  int v626;
  int v627;
  int v628;
  int v629;
  int v630;
  uint16x4_t *v631;
  unsigned int v632;
  unsigned int v633;
  unsigned int v634;
  unsigned int v635;
  unsigned int v636;
  unsigned int v637;
  unsigned int v638;
  unsigned int v639;
  int v640;
  _DWORD *v641;
  uint64_t v642;
  int v643;
  int v644;
  int v645;
  int v646;
  int v647;
  unsigned int v648;
  int v649;
  int8x8_t *v650;
  _QWORD *v651;
  _DWORD *v652;
  _DWORD *v653;
  int v654;
  _DWORD *v655;
  _DWORD *v656;
  uint64_t v657;
  int v658;
  int v659;
  int v660;
  int v661;
  int v662;
  int v663;
  int v664;
  int v665;
  int v666;
  int v667;
  int v668;
  int v669;
  int v670;
  int v671;
  int v672;
  int v673;
  int v674;
  int v675;
  unsigned int v676;
  unsigned int v677;
  unsigned int v678;
  unsigned int v679;
  int v680;
  __int16 v681;
  _QWORD *v682;
  _DWORD *v683;
  _DWORD *v684;
  _DWORD *v685;
  uint64_t v686;
  int v687;
  int v688;
  int v689;
  int v690;
  int v691;
  int v692;
  int v693;
  int v694;
  int v695;
  int v696;
  int v697;
  int v698;
  int v699;
  unsigned int v700;
  unsigned int v701;
  unsigned int v702;
  int v703;
  uint64_t v704;
  int v705;
  int v706;
  int v707;
  uint64_t v708;
  uint64_t v709;
  int v710;
  int v711;
  int v712;
  int v713;
  int v714;
  int8x8_t *v715;
  _BOOL8 v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  _BOOL8 v720;
  int v721;
  unsigned int v722;
  _BOOL8 v723;
  _BOOL8 v724;
  int v725;
  int v727;
  int v728;
  int v729;
  uint64_t v730;
  uint64_t v731;
  int v732;
  int v733;
  int v734;
  uint64_t v735;
  int8x8_t *v736;
  int v737;
  int v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  int v742;
  uint64_t v743;
  int v744;
  uint64_t v745;
  int v746;
  int v747;
  int8x8_t *v748;
  uint64_t v749;
  uint64_t v751;
  uint64_t v752;
  uint64_t v754;
  uint64_t v755;
  uint16x4_t *v756;

  v756 = a8;
  if (!__src)
    return;
  v12 = a1;
  if (!a1)
    return;
  v14 = a2;
  if ((int)a2 < 1)
    return;
  v15 = a3;
  if (a3 < 1 || !__dst)
    return;
  v17 = (int8x8_t *)__src;
  v18 = a1[1];
  if (v18 > 127)
  {
    if (v18 != 128)
    {
      if (v18 != 129)
      {
        if (v18 != 130)
          return;
        v20 = a8 == __dst ? -1 : a1[2];
        v742 = v20;
        v66 = a1[4];
        v67 = a1[5];
        if (((v67 | v66) & 0x1F) != 0)
          return;
        v68 = a1[3];
        v69 = v67 - v66 * v68;
        if (v67 < v66 * v68)
          return;
        v727 = a5;
        v70 = a1[7];
        if (!a1[6])
          v69 = 0;
        v71 = v69 + v66 * (v68 - 1);
        v72 = v69 + v66;
        if (v742)
          v72 = v69;
        else
          v71 = v69;
        if (v742 >= 0)
          v73 = v68 - 1;
        else
          v73 = a1[3];
        v74 = v742 >= 0 && v742 == 0;
        if (v742 >= 0)
          v75 = v72;
        else
          v75 = v69;
        if (v742 >= 0)
          v76 = v71;
        else
          v76 = v69;
        v720 = v74;
        if ((_DWORD)v70 == 2)
        {
          v78 = v67 * a2 + 7;
          v711 = v78 >> 3;
          v79 = (int8x8_t *)malloc_type_malloc((uint64_t)v78 >> 3, 0x705560E0uLL);
          v74 = v720;
          v12 = a1;
          LODWORD(v14) = a2;
          v80 = v79;
        }
        else
        {
          v711 = 0;
          v80 = 0;
        }
        v207 = v67 >> 5;
        v208 = (uint64_t)v75 >> 5;
        v209 = v73 * v14;
        v739 = (uint64_t)v76 >> 5;
        v210 = v727;
        v211 = a7;
        v212 = 4 * (v67 >> 5);
        v213 = v756;
        v748 = v80;
        v718 = v208;
        while (1)
        {
          if ((_DWORD)v70 == 4)
          {
            v214 = 0;
            v215 = (char *)v17 + 4 * v208;
            v216 = *((_QWORD *)v12 + 4);
            v217 = __dst;
            v218 = v209;
            v219 = (float **)(v216 + 8 * v74);
            do
            {
              v220 = *v219;
              v221 = v214 + 1;
              v222 = *v220 + (float)(*(float *)&v215[4 * v214] * v220[1]);
              if (v214 + 1 < v73)
                v223 = v214 + 1;
              else
                v223 = 0;
              v224 = 0.0;
              if (v222 >= 0.0)
              {
                v224 = 65535.0;
                if (v222 <= 0.99998)
                  v224 = v222 * 65535.0;
              }
              v217->i16[v214] = (int)v224;
              v225 = v221 < v73;
              if (v221 >= v73)
                v226 = v207;
              else
                v226 = 0;
              v215 += 4 * v226;
              v219 = (float **)(v216 + 8 * v74 + 8 * v223);
              if (v225)
                v227 = 0;
              else
                v227 = v73;
              v217 = (uint16x4_t *)((char *)v217 + 2 * v227);
              v214 = v223;
              --v218;
            }
            while (v218);
            if (v742 < 0 || !v213)
              goto LABEL_334;
            v228 = (float *)v17 + v739;
            v229 = *(float **)(v216 + 8 * v742);
            v230 = *v229;
            v231 = v229[1];
            v232 = v213;
            v233 = v14;
            do
            {
              v234 = v230 + (float)(*v228 * v231);
              v235 = 0.0;
              if (v234 >= 0.0)
              {
                v235 = 65535.0;
                if (v234 <= 0.99998)
                  v235 = v234 * 65535.0;
              }
              v232->i16[0] = (int)v235;
              v232 = (uint16x4_t *)((char *)v232 + 2);
              v228 = (float *)((char *)v228 + v212);
              --v233;
            }
            while (v233);
          }
          else
          {
            v236 = v17;
            if (v80)
            {
              v237 = v70;
              v238 = v70;
              v239 = v210;
              v236 = decode_swap(v237, v748, v17, v711);
              v210 = v239;
              v70 = v238;
              v208 = v718;
              v74 = v720;
              v80 = v748;
              v12 = a1;
              LODWORD(v14) = a2;
            }
            v240 = 0;
            v241 = (char *)v236 + 4 * v208;
            v242 = *((_QWORD *)v12 + 4);
            v243 = __dst;
            v244 = (float **)(v242 + 8 * v74);
            v245 = v209;
            do
            {
              v246 = *v244;
              v247 = v240 + 1;
              v248 = *v246 + (float)(COERCE_FLOAT(bswap32(*(_DWORD *)&v241[4 * v240])) * v246[1]);
              if (v240 + 1 < v73)
                v249 = v240 + 1;
              else
                v249 = 0;
              v250 = 0.0;
              if (v248 >= 0.0)
              {
                v250 = 65535.0;
                if (v248 <= 0.99998)
                  v250 = v248 * 65535.0;
              }
              v243->i16[v240] = (int)v250;
              v251 = v247 < v73;
              if (v247 >= v73)
                v252 = v207;
              else
                v252 = 0;
              v241 += 4 * v252;
              v244 = (float **)(v242 + 8 * v74 + 8 * v249);
              if (v251)
                v253 = 0;
              else
                v253 = v73;
              v243 = (uint16x4_t *)((char *)v243 + 2 * v253);
              v240 = v249;
              --v245;
            }
            while (v245);
            if (v742 < 0 || !v213)
              goto LABEL_334;
            v254 = (unsigned int *)v236 + v739;
            v255 = *(float **)(v242 + 8 * v742);
            v256 = *v255;
            v257 = v255[1];
            v258 = v213;
            v259 = v14;
            do
            {
              v260 = v256 + (float)(COERCE_FLOAT(bswap32(*v254)) * v257);
              v261 = 0.0;
              if (v260 >= 0.0)
              {
                v261 = 65535.0;
                if (v260 <= 0.99998)
                  v261 = v260 * 65535.0;
              }
              v258->i16[0] = (int)v261;
              v258 = (uint16x4_t *)((char *)v258 + 2);
              v254 = (unsigned int *)((char *)v254 + v212);
              --v259;
            }
            while (v259);
          }
          v213 = (uint16x4_t *)((char *)v213 + a11);
LABEL_334:
          v17 = (int8x8_t *)((char *)v17 + v210);
          __dst = (uint16x4_t *)((char *)__dst + v211);
          if (!--v15)
          {
            if (!v80)
              return;
            goto LABEL_432;
          }
        }
      }
      if (a8 == __dst)
        v26 = -1;
      else
        v26 = a1[2];
      v744 = v26;
      v121 = a1[4];
      v122 = a1[5];
      if (((v122 | v121) & 0x1F) != 0)
        return;
      v123 = a1[3];
      v124 = v122 - v121 * v123;
      if (v122 < v121 * v123)
        return;
      v729 = a5;
      v125 = a1[7];
      if (!a1[6])
        v124 = 0;
      v126 = v124 + v121 * (v123 - 1);
      v127 = v124 + v121;
      if (v744)
        v127 = v124;
      else
        v126 = v124;
      if (v744 >= 0)
        v128 = v123 - 1;
      else
        v128 = a1[3];
      v129 = v744 >= 0 && v744 == 0;
      if (v744 >= 0)
        v130 = v127;
      else
        v130 = v124;
      if (v744 >= 0)
        v131 = v126;
      else
        v131 = v124;
      v724 = v129;
      if ((_DWORD)v125 == 2)
      {
        v133 = v122 * a2 + 7;
        v714 = v133 >> 3;
        v134 = (int8x8_t *)malloc_type_malloc((uint64_t)v133 >> 3, 0x705560E0uLL);
        v129 = v724;
        v12 = a1;
        LODWORD(v14) = a2;
        v135 = v134;
      }
      else
      {
        v714 = 0;
        v135 = 0;
      }
      v303 = v122 >> 5;
      v304 = (uint64_t)v130 >> 5;
      v305 = (v128 * v14);
      v741 = (uint64_t)v131 >> 5;
      v306 = a7;
      v307 = 4 * (v122 >> 5);
      v308 = v756;
      v748 = v135;
      while (1)
      {
        if ((_DWORD)v125 == 4)
        {
          v309 = 0;
          v310 = (char *)v17 + 4 * v304;
          v311 = *((_QWORD *)v12 + 4) + 8 * v129;
          v312 = __dst;
          v313 = v305;
          v314 = (float **)v311;
          do
          {
            v315 = *v314;
            v316 = v309 + 1;
            v317 = *v315 + (float)(*(float *)&v310[4 * v309] * v315[1]);
            if (v309 + 1 < v128)
              v318 = v309 + 1;
            else
              v318 = 0;
            v319 = 0.0;
            if (v317 >= 0.0)
            {
              if (v317 <= 0.99608)
                v319 = v317 * 255.0;
              else
                v319 = 255.0;
            }
            v312->i8[v309] = (int)v319;
            v320 = v316 < v128;
            if (v316 >= v128)
              v321 = v303;
            else
              v321 = 0;
            v310 += 4 * v321;
            v314 = (float **)(v311 + 8 * v318);
            if (v320)
              v322 = 0;
            else
              v322 = v128;
            v312 = (uint16x4_t *)((char *)v312 + v322);
            v309 = v318;
            --v313;
          }
          while (v313);
          if (v744 < 0 || !v308)
            goto LABEL_430;
          v323 = (float *)v17 + v741;
          v324 = *(float **)(*((_QWORD *)v12 + 4) + 8 * v744);
          v325 = *v324;
          v326 = v324[1];
          v327 = v308;
          v328 = v14;
          do
          {
            v329 = v325 + (float)(*v323 * v326);
            v330 = 0.0;
            if (v329 >= 0.0)
            {
              if (v329 <= 0.99608)
                v330 = v329 * 255.0;
              else
                v330 = 255.0;
            }
            v327->i8[0] = (int)v330;
            v327 = (uint16x4_t *)((char *)v327 + 1);
            v323 = (float *)((char *)v323 + v307);
            --v328;
          }
          while (v328);
        }
        else
        {
          v331 = v17;
          if (v135)
          {
            v332 = v125;
            v333 = v125;
            v334 = v305;
            v331 = decode_swap(v332, v748, v17, v714);
            v305 = v334;
            v125 = v333;
            v304 = (uint64_t)v130 >> 5;
            v129 = v724;
            v135 = v748;
            v12 = a1;
            LODWORD(v14) = a2;
          }
          v335 = 0;
          v336 = (char *)v331 + 4 * v304;
          v337 = *((_QWORD *)v12 + 4) + 8 * v129;
          v338 = __dst;
          v339 = (float **)v337;
          v340 = v305;
          do
          {
            v341 = *v339;
            v342 = v335 + 1;
            v343 = *v341 + (float)(COERCE_FLOAT(bswap32(*(_DWORD *)&v336[4 * v335])) * v341[1]);
            if (v335 + 1 < v128)
              v344 = v335 + 1;
            else
              v344 = 0;
            v345 = 0.0;
            if (v343 >= 0.0)
            {
              if (v343 <= 0.99608)
                v345 = v343 * 255.0;
              else
                v345 = 255.0;
            }
            v338->i8[v335] = (int)v345;
            v346 = v342 < v128;
            if (v342 >= v128)
              v347 = v303;
            else
              v347 = 0;
            v336 += 4 * v347;
            v339 = (float **)(v337 + 8 * v344);
            if (v346)
              v348 = 0;
            else
              v348 = v128;
            v338 = (uint16x4_t *)((char *)v338 + v348);
            v335 = v344;
            --v340;
          }
          while (v340);
          if (v744 < 0 || !v308)
            goto LABEL_430;
          v349 = (unsigned int *)v331 + v741;
          v350 = *(float **)(*((_QWORD *)v12 + 4) + 8 * v744);
          v351 = *v350;
          v352 = v350[1];
          v353 = v308;
          v354 = v14;
          do
          {
            v355 = v351 + (float)(COERCE_FLOAT(bswap32(*v349)) * v352);
            v356 = 0.0;
            if (v355 >= 0.0)
            {
              if (v355 <= 0.99608)
                v356 = v355 * 255.0;
              else
                v356 = 255.0;
            }
            v353->i8[0] = (int)v356;
            v353 = (uint16x4_t *)((char *)v353 + 1);
            v349 = (unsigned int *)((char *)v349 + v307);
            --v354;
          }
          while (v354);
        }
        v308 = (uint16x4_t *)((char *)v308 + a11);
LABEL_430:
        v17 = (int8x8_t *)((char *)v17 + v729);
        __dst = (uint16x4_t *)((char *)__dst + v306);
        if (!--v15)
        {
          if (!v135)
            return;
LABEL_432:
          v102 = v748;
LABEL_433:
          free(v102);
          return;
        }
      }
    }
    if (a8 == __dst)
      v25 = -1;
    else
      v25 = a1[2];
    v107 = a1[4];
    v108 = a1[5];
    if (((v108 | v107) & 0x1F) != 0)
      return;
    v109 = a1[3];
    v110 = v108 - v107 * v109;
    if (v108 < v107 * v109)
      return;
    v111 = a1[7];
    if (!a1[6])
      v110 = 0;
    v112 = v110 + v107 * (v109 - 1);
    v113 = v110 + v107;
    if (v25)
      v113 = v110;
    else
      v112 = v110;
    if (v25 >= 0)
      v114 = v109 - 1;
    else
      v114 = a1[3];
    v115 = v25 >= 0 && v25 == 0;
    if (v25 >= 0)
      v116 = v113;
    else
      v116 = v110;
    if (v25 >= 0)
      v117 = v112;
    else
      v117 = v110;
    v733 = v25;
    v723 = v115;
    if ((_DWORD)v111 == 2)
    {
      v118 = v108 * a2 + 7;
      v713 = v118 >> 3;
      v119 = (int8x8_t *)malloc_type_malloc((uint64_t)v118 >> 3, 0x705560E0uLL);
      v115 = v723;
      v25 = v733;
      v12 = a1;
      LODWORD(v14) = a2;
      v120 = v119;
    }
    else
    {
      v713 = 0;
      v120 = 0;
    }
    v262 = v108 >> 5;
    v263 = (uint64_t)v116 >> 5;
    v264 = (v114 * v14);
    v745 = (uint64_t)v117 >> 5;
    v265 = a5;
    v266 = a7;
    v267 = 4 * v262;
    v740 = v25;
    v268 = (float *)v756;
    v736 = v120;
    v719 = v111;
    v731 = a7;
    while (1)
    {
      if ((_DWORD)v111 == 4)
      {
        v269 = 0;
        v270 = (char *)v17 + 4 * v263;
        v271 = *((_QWORD *)v12 + 4);
        v272 = __dst;
        v273 = v264;
        v274 = v271 + 8 * v115;
        do
        {
          v275 = v269 + 1;
          *(float *)&v272->i32[v269] = **(float **)v274
                                     + (float)(*(float *)&v270[4 * v269] * *(float *)(*(_QWORD *)v274 + 4));
          if (v269 + 1 < v114)
            ++v269;
          else
            v269 = 0;
          if (v275 >= v114)
            v276 = v262;
          else
            v276 = 0;
          v270 += 4 * v276;
          v274 = v271 + 8 * v115 + 8 * v269;
          if (v275 >= v114)
            v277 = v114;
          else
            v277 = 0;
          v272 = (uint16x4_t *)((char *)v272 + 4 * v277);
          --v273;
        }
        while (v273);
        if (v25 < 0 || !v268)
          goto LABEL_374;
        v278 = (float *)v17 + v745;
        v279 = *(float **)(v271 + 8 * v740);
        v280 = *v279;
        v281 = v279[1];
        v282 = v268;
        v283 = v14;
        do
        {
          *v282++ = v280 + (float)(*v278 * v281);
          v278 = (float *)((char *)v278 + v267);
          --v283;
        }
        while (v283);
      }
      else
      {
        v284 = v17;
        if (v120)
        {
          v285 = v268;
          v286 = v263;
          v287 = v264;
          v284 = decode_swap(v111, v120, v17, v713);
          v264 = v287;
          v263 = v286;
          v120 = v736;
          v25 = v733;
          v12 = a1;
          LODWORD(v14) = a2;
          v111 = v719;
          v115 = v723;
          v268 = v285;
          v266 = v731;
        }
        v288 = 0;
        v289 = (char *)v284 + 4 * v263;
        v290 = *((_QWORD *)v12 + 4);
        v291 = __dst;
        v292 = v290 + 8 * v115;
        v293 = v264;
        do
        {
          v294 = v288 + 1;
          *(float *)&v291->i32[v288] = **(float **)v292
                                     + (float)(COERCE_FLOAT(bswap32(*(_DWORD *)&v289[4 * v288]))
                                             * *(float *)(*(_QWORD *)v292 + 4));
          if (v288 + 1 < v114)
            ++v288;
          else
            v288 = 0;
          if (v294 >= v114)
            v295 = v262;
          else
            v295 = 0;
          v289 += 4 * v295;
          v292 = v290 + 8 * v115 + 8 * v288;
          if (v294 >= v114)
            v296 = v114;
          else
            v296 = 0;
          v291 = (uint16x4_t *)((char *)v291 + 4 * v296);
          --v293;
        }
        while (v293);
        if (v25 < 0 || !v268)
          goto LABEL_374;
        v297 = (unsigned int *)v284 + v745;
        v298 = *(float **)(v290 + 8 * v740);
        v299 = *v298;
        v300 = v298[1];
        v301 = v268;
        v302 = v14;
        do
        {
          *v301++ = v299 + (float)(COERCE_FLOAT(bswap32(*v297)) * v300);
          v297 = (unsigned int *)((char *)v297 + v267);
          --v302;
        }
        while (v302);
      }
      v268 = (float *)((char *)v268 + a11);
LABEL_374:
      v17 = (int8x8_t *)((char *)v17 + v265);
      __dst = (uint16x4_t *)((char *)__dst + v266);
      if (!--v15)
      {
        if (!v120)
          return;
        v102 = v736;
        goto LABEL_433;
      }
    }
  }
  if (v18 != 1)
  {
    if (v18 != 2)
    {
      if (v18 == 4)
      {
        v19 = a8 == __dst ? -1 : a1[2];
        v27 = a1[4];
        v28 = a1[5];
        if (((v28 | v27) & 0xF) == 0 && !a1[7])
        {
          v29 = a1[3];
          v30 = v28 - v27 * v29;
          if (v28 >= v27 * v29)
          {
            if (!a1[6])
              v30 = 0;
            v31 = v30 + v27 * (v29 - 1);
            v32 = v30 + v27;
            v33 = v19 == 0;
            if (v19)
              v34 = v30;
            else
              v34 = v32;
            if (!v19)
              v31 = v30;
            if (v19 >= 0)
              v35 = v29 - 1;
            else
              v35 = a1[3];
            if (v19 >= 0)
            {
              v36 = v34;
            }
            else
            {
              v33 = 0;
              v36 = v30;
            }
            if (v19 >= 0)
              v37 = v31;
            else
              v37 = v30;
            v38 = v28 >> 4;
            v39 = a7 >> 1;
            if (a7 >> 1 >= (int)a2)
              v39 = a2;
            v40 = (uint64_t)v36 >> 4;
            v41 = *((_QWORD *)a1 + 4);
            v42 = (uint64_t)v37 >> 4;
            do
            {
              v43 = 0;
              v44 = __dst;
              v45 = v35 * v39;
              v46 = v41 + 8 * v33;
              v47 = (char *)v17 + 2 * v40;
              do
              {
                _H0 = *(_WORD *)&v47[2 * v43];
                v49 = v43 + 1;
                __asm { FCVT            S0, H0 }
                _S0 = **(float **)v46 + (float)(_S0 * *(float *)(*(_QWORD *)v46 + 4));
                __asm { FCVT            H0, S0 }
                v44->i16[v43] = LOWORD(_S0);
                if (v43 + 1 < v35)
                  ++v43;
                else
                  v43 = 0;
                if (v49 >= v35)
                  v55 = v38;
                else
                  v55 = 0;
                v47 += 2 * v55;
                v46 = v41 + 8 * v33 + 8 * v43;
                if (v49 >= v35)
                  v56 = v35;
                else
                  v56 = 0;
                v44 = (uint16x4_t *)((char *)v44 + 2 * v56);
                --v45;
              }
              while (v45);
              if ((v19 & 0x80000000) == 0 && v756)
              {
                v57 = (__int16 *)v17 + v42;
                v58 = *(float **)(v41 + 8 * v19);
                v59 = *v58;
                v60 = v58[1];
                v61 = v756;
                v62 = v39;
                do
                {
                  _H2 = *v57;
                  __asm { FCVT            S2, H2 }
                  _S2 = v59 + (float)(_S2 * v60);
                  __asm { FCVT            H2, S2 }
                  v61->i16[0] = LOWORD(_S2);
                  v61 = (uint16x4_t *)((char *)v61 + 2);
                  v57 += v38;
                  --v62;
                }
                while (v62);
                v756 = (uint16x4_t *)((char *)v756 + a11);
              }
              v17 = (int8x8_t *)((char *)v17 + a5);
              __dst = (uint16x4_t *)((char *)__dst + a7);
              --v15;
            }
            while (v15);
          }
        }
      }
      return;
    }
    v23 = a1[3];
    if (a8 == __dst)
      v24 = -1;
    else
      v24 = a1[2];
    v104 = a1[4];
    v103 = a1[5];
    v722 = v24;
    if (v103 == v104 * v23)
    {
      v105 = 0;
      if ((v24 & 0x80000000) == 0)
      {
LABEL_142:
        --v23;
        if (v24)
        {
          v743 = 0;
          v106 = v105 + v104 * v23;
        }
        else
        {
          v106 = v105;
          v743 = 1;
          v105 += v104;
        }
        goto LABEL_208;
      }
    }
    else
    {
      if (v103 <= v104 * v23)
        return;
      if (a1[6])
        v105 = v103 - v104 * v23;
      else
        v105 = 0;
      if ((v24 & 0x80000000) == 0)
        goto LABEL_142;
    }
    v743 = 0;
    v106 = 0;
LABEL_208:
    v717 = a1[7];
    if ((_DWORD)v717)
    {
      v144 = a3;
      if ((v103 & 7) == 0 && v104 == 16 && (_DWORD)v717 == 2)
      {
        switch(v23)
        {
          case 4:
            v366 = v103 >> 3;
            v367 = *a1;
            v368 = v105 >> 3;
            if ((v24 & 0x80000000) != 0)
            {
              v425 = a5 - (uint64_t)(v366 * (int)a2);
              v426 = a7 - 8 * (int)a2;
              v427 = a3;
              if (*a1)
              {
                if (v367 == 2)
                {
                  v651 = (_QWORD *)*((_QWORD *)a1 + 4);
                  v652 = (_DWORD *)*v651;
                  v653 = (_DWORD *)v651[1];
                  v654 = a2;
                  v655 = (_DWORD *)v651[2];
                  v656 = (_DWORD *)v651[3];
                  v657 = v368;
                  v659 = v652[2];
                  v658 = v652[3];
                  v661 = v653[2];
                  v660 = v653[3];
                  v663 = v655[2];
                  v662 = v655[3];
                  v665 = v656[2];
                  v664 = v656[3];
                  v666 = v652[4];
                  v667 = v653[4];
                  v668 = v655[4];
                  v669 = v656[4];
                  v670 = v654 + 1;
                  do
                  {
                    v671 = v670;
                    do
                    {
                      v672 = *(unsigned __int16 *)((char *)v17->u16 + v657);
                      v673 = *(unsigned __int16 *)((char *)&v17->u16[1] + v657);
                      v674 = *(unsigned __int16 *)((char *)&v17->u16[2] + v657);
                      v675 = *(unsigned __int16 *)((char *)&v17->u16[3] + v657);
                      v17 = (int8x8_t *)((char *)v17 + v366);
                      v676 = ((v659 + v658 * v672) >> v666) & ~((v659 + v658 * v672) >> v666 >> 31);
                      v677 = ((v661 + v660 * v673) >> v667) & ~((v661 + v660 * v673) >> v667 >> 31);
                      v678 = ((v663 + v662 * v674) >> v668) & ~((v663 + v662 * v674) >> v668 >> 31);
                      v679 = ((v665 + v664 * v675) >> v669) & ~((v665 + v664 * v675) >> v669 >> 31);
                      if (v676 >= 0xFFFF)
                        LOWORD(v676) = -1;
                      if (v677 >= 0xFFFF)
                        LOWORD(v677) = -1;
                      if (v678 >= 0xFFFF)
                        LOWORD(v678) = -1;
                      if (v679 >= 0xFFFF)
                        LOWORD(v679) = -1;
                      __dst->i16[0] = v676;
                      __dst->i16[1] = v677;
                      __dst->i16[2] = v678;
                      __dst->i16[3] = v679;
                      ++__dst;
                      --v671;
                    }
                    while (v671 > 1);
                    v17 = (int8x8_t *)((char *)v17 + (int)v425);
                    __dst = (uint16x4_t *)((char *)__dst + (int)v426);
                    _VF = __OFSUB__(v427--, 1);
                  }
                  while (!((v427 < 0) ^ _VF | (v427 == 0)));
                }
                else if (v367 == 1)
                {
                  do
                  {
                    v428 = a2 + 1;
                    do
                    {
                      v429 = (int8x8_t *)((char *)v17 + v366);
                      *__dst++ = (uint16x4_t)vmvn_s8(*(int8x8_t *)((char *)v17 + v368));
                      --v428;
                      v17 = v429;
                    }
                    while (v428 > 1);
                    v17 = (int8x8_t *)((char *)v429 + v425);
                    __dst = (uint16x4_t *)((char *)__dst + v426);
                    _VF = __OFSUB__(v427--, 1);
                  }
                  while (!((v427 < 0) ^ _VF | (v427 == 0)));
                }
              }
              else
              {
                do
                {
                  v649 = a2 + 1;
                  do
                  {
                    v650 = (int8x8_t *)((char *)v17 + v366);
                    *__dst++ = *(uint16x4_t *)((char *)v17 + v368);
                    --v649;
                    v17 = v650;
                  }
                  while (v649 > 1);
                  v17 = (int8x8_t *)((char *)v650 + (int)v425);
                  __dst = (uint16x4_t *)((char *)__dst + (int)v426);
                  _VF = __OFSUB__(v427--, 1);
                }
                while (!((v427 < 0) ^ _VF | (v427 == 0)));
              }
            }
            else
            {
              v369 = v106 >> 3;
              v370 = a5 - (uint64_t)(v366 * (int)a2);
              v371 = a7 - 8 * (int)a2;
              v372 = a11 - 2 * (int)a2;
              v373 = a3;
              if (*a1)
              {
                if (v367 == 2)
                {
                  v460 = *((_QWORD *)a1 + 4);
                  v461 = *(_DWORD **)(v460 + 8 * (v368 > v369));
                  v462 = 8;
                  v463 = 16;
                  if (v368 > v369)
                    v462 = 16;
                  v464 = *(_DWORD **)(v460 + v462);
                  v465 = 24;
                  if (v368 > v369)
                    v463 = 24;
                  v466 = *(_DWORD **)(v460 + v463);
                  if (v368 > v369)
                    v465 = 32;
                  v467 = *(_DWORD **)(v460 + v465);
                  v468 = *(_DWORD **)(v460 + 32 * (v369 > v368));
                  v470 = v468[2];
                  v469 = v468[3];
                  v755 = (int)v370;
                  v472 = v461[2];
                  v471 = v461[3];
                  v474 = v464[2];
                  v473 = v464[3];
                  v476 = v466[2];
                  v475 = v466[3];
                  v477 = v14;
                  v479 = v467[2];
                  v478 = v467[3];
                  v480 = v468[4];
                  v481 = v461[4];
                  v482 = v372;
                  v483 = v464[4];
                  v752 = v482;
                  v484 = v371;
                  v485 = v466[4];
                  v749 = v484;
                  v746 = v477 + 1;
                  v486 = v467[4];
                  do
                  {
                    v487 = v373;
                    v488 = v746;
                    v489 = v756;
                    do
                    {
                      v490 = *(unsigned __int16 *)((char *)v17->u16 + v369);
                      v491 = *(unsigned __int16 *)((char *)v17->u16 + v368);
                      v492 = *(unsigned __int16 *)((char *)&v17->u16[1] + v368);
                      v493 = *(unsigned __int16 *)((char *)&v17->u16[2] + v368);
                      v494 = *(unsigned __int16 *)((char *)&v17->u16[3] + v368);
                      v17 = (int8x8_t *)((char *)v17 + v366);
                      v495 = ((v470 + v469 * v490) >> v480) & ~((v470 + v469 * v490) >> v480 >> 31);
                      v496 = ((v472 + v471 * v491) >> v481) & ~((v472 + v471 * v491) >> v481 >> 31);
                      v497 = ((v474 + v473 * v492) >> v483) & ~((v474 + v473 * v492) >> v483 >> 31);
                      v498 = ((v476 + v475 * v493) >> v485) & ~((v476 + v475 * v493) >> v485 >> 31);
                      v499 = ((v479 + v478 * v494) >> v486) & ~((v479 + v478 * v494) >> v486 >> 31);
                      if (v495 >= 0xFFFF)
                        LOWORD(v495) = -1;
                      if (v496 >= 0xFFFF)
                        LOWORD(v496) = -1;
                      if (v497 >= 0xFFFF)
                        LOWORD(v497) = -1;
                      if (v498 >= 0xFFFF)
                        LOWORD(v498) = -1;
                      v489->i16[0] = v495;
                      v489 = (uint16x4_t *)((char *)v489 + 2);
                      if (v499 >= 0xFFFF)
                        v500 = -1;
                      else
                        v500 = v499;
                      __dst->i16[0] = v496;
                      __dst->i16[1] = v497;
                      __dst->i16[2] = v498;
                      __dst->i16[3] = v500;
                      ++__dst;
                      --v488;
                    }
                    while (v488 > 1);
                    v17 = (int8x8_t *)((char *)v17 + v755);
                    v756 = (uint16x4_t *)((char *)v489 + v752);
                    __dst = (uint16x4_t *)((char *)__dst + v749);
                    v373 = v487 - 1;
                  }
                  while (v487 > 1);
                }
                else if (v367 == 1)
                {
                  v374 = v369;
                  do
                  {
                    v375 = a2 + 1;
                    v376 = v756;
                    do
                    {
                      v377 = *(int8x8_t *)((char *)v17 + v368);
                      v376->i16[0] = ~*(__int16 *)((char *)v17->i16 + v374);
                      v376 = (uint16x4_t *)((char *)v376 + 2);
                      v17 = (int8x8_t *)((char *)v17 + v366);
                      *__dst++ = (uint16x4_t)vmvn_s8(v377);
                      --v375;
                    }
                    while (v375 > 1);
                    v17 = (int8x8_t *)((char *)v17 + v370);
                    v756 = (uint16x4_t *)((char *)v376 + v372);
                    __dst = (uint16x4_t *)((char *)__dst + v371);
                    _VF = __OFSUB__(v373--, 1);
                  }
                  while (!((v373 < 0) ^ _VF | (v373 == 0)));
                }
              }
              else
              {
                v456 = v369;
                do
                {
                  v457 = a2 + 1;
                  v458 = v756;
                  do
                  {
                    v459 = *(uint16x4_t *)((char *)v17 + v368);
                    v458->i16[0] = *(__int16 *)((char *)v17->i16 + v456);
                    v458 = (uint16x4_t *)((char *)v458 + 2);
                    v17 = (int8x8_t *)((char *)v17 + v366);
                    *__dst++ = v459;
                    --v457;
                  }
                  while (v457 > 1);
                  v17 = (int8x8_t *)((char *)v17 + (int)v370);
                  v756 = (uint16x4_t *)((char *)v458 + (int)v372);
                  __dst = (uint16x4_t *)((char *)__dst + (int)v371);
                  _VF = __OFSUB__(v373--, 1);
                }
                while (!((v373 < 0) ^ _VF | (v373 == 0)));
              }
            }
            return;
          case 3:
            v378 = v103 >> 3;
            v379 = *a1;
            v380 = v105 >> 3;
            if ((v24 & 0x80000000) != 0)
            {
              v430 = a5 - (uint64_t)(v378 * (int)a2);
              v431 = a7 - 6 * a2;
              v432 = v15;
              if (*a1)
              {
                if (v379 == 2)
                {
                  v682 = (_QWORD *)*((_QWORD *)a1 + 4);
                  v684 = (_DWORD *)*v682;
                  v683 = (_DWORD *)v682[1];
                  v685 = (_DWORD *)v682[2];
                  v686 = v380;
                  v688 = v684[2];
                  v687 = v684[3];
                  v690 = v683[2];
                  v689 = v683[3];
                  v692 = v685[2];
                  v691 = v685[3];
                  v693 = v684[4];
                  v694 = v683[4];
                  v695 = v685[4];
                  do
                  {
                    v696 = v14 + 1;
                    do
                    {
                      v697 = *(unsigned __int16 *)((char *)v17->u16 + v686);
                      v698 = *(unsigned __int16 *)((char *)&v17->u16[1] + v686);
                      v699 = *(unsigned __int16 *)((char *)&v17->u16[2] + v686);
                      v17 = (int8x8_t *)((char *)v17 + v378);
                      v700 = ((v688 + v687 * v697) >> v693) & ~((v688 + v687 * v697) >> v693 >> 31);
                      v701 = ((v690 + v689 * v698) >> v694) & ~((v690 + v689 * v698) >> v694 >> 31);
                      v702 = ((v692 + v691 * v699) >> v695) & ~((v692 + v691 * v699) >> v695 >> 31);
                      if (v700 >= 0xFFFF)
                        LOWORD(v700) = -1;
                      if (v701 >= 0xFFFF)
                        LOWORD(v701) = -1;
                      if (v702 >= 0xFFFF)
                        LOWORD(v702) = -1;
                      __dst->i16[0] = v700;
                      __dst->i16[1] = v701;
                      __dst->i16[2] = v702;
                      __dst = (uint16x4_t *)((char *)__dst + 6);
                      --v696;
                    }
                    while (v696 > 1);
                    v17 = (int8x8_t *)((char *)v17 + (int)v430);
                    __dst = (uint16x4_t *)((char *)__dst + v431);
                    _VF = __OFSUB__(v432--, 1);
                  }
                  while (!((v432 < 0) ^ _VF | (v432 == 0)));
                }
                else if (v379 == 1)
                {
                  do
                  {
                    v433 = a2 + 1;
                    do
                    {
                      v434 = *(__int16 *)((char *)&v17->i16[1] + v380);
                      v435 = *(__int16 *)((char *)&v17->i16[2] + v380);
                      __dst->i16[0] = ~*(__int16 *)((char *)v17->i16 + v380);
                      __dst->i16[1] = ~v434;
                      __dst->i16[2] = ~v435;
                      v17 = (int8x8_t *)((char *)v17 + v378);
                      __dst = (uint16x4_t *)((char *)__dst + 6);
                      --v433;
                    }
                    while (v433 > 1);
                    v17 = (int8x8_t *)((char *)v17 + v430);
                    __dst = (uint16x4_t *)((char *)__dst + v431);
                    _VF = __OFSUB__(v432--, 1);
                  }
                  while (!((v432 < 0) ^ _VF | (v432 == 0)));
                }
              }
              else
              {
                do
                {
                  v680 = a2 + 1;
                  do
                  {
                    v681 = *(__int16 *)((char *)&v17->i16[2] + v380);
                    __dst->i32[0] = *(__int32 *)((char *)v17->i32 + v380);
                    __dst->i16[2] = v681;
                    v17 = (int8x8_t *)((char *)v17 + v378);
                    __dst = (uint16x4_t *)((char *)__dst + 6);
                    --v680;
                  }
                  while (v680 > 1);
                  v17 = (int8x8_t *)((char *)v17 + (int)v430);
                  __dst = (uint16x4_t *)((char *)__dst + v431);
                  _VF = __OFSUB__(v432--, 1);
                }
                while (!((v432 < 0) ^ _VF | (v432 == 0)));
              }
            }
            else
            {
              v381 = v106 >> 3;
              v382 = a5 - (uint64_t)(v378 * (int)a2);
              v383 = a7 - 6 * a2;
              v384 = a11 - 2 * (int)a2;
              if (*a1)
              {
                if (v379 == 2)
                {
                  v505 = *((_QWORD *)a1 + 4);
                  v506 = a2;
                  v507 = *(_DWORD **)(v505 + 8 * (v380 > v381));
                  v508 = 8;
                  v509 = 16;
                  if (v380 > v381)
                    v508 = 16;
                  v510 = *(_DWORD **)(v505 + v508);
                  v511 = 24;
                  if (v380 > v381)
                    v509 = 24;
                  v512 = *(_DWORD **)(v505 + v509);
                  if (v381 <= v380)
                    v511 = 0;
                  v513 = *(_DWORD **)(v505 + v511);
                  v515 = v513[2];
                  v514 = v513[3];
                  v517 = v507[2];
                  v516 = v507[3];
                  v518 = v510[2];
                  v519 = v510[3];
                  v521 = v512[2];
                  v520 = v512[3];
                  v522 = v513[4];
                  v523 = v507[4];
                  v524 = v510[4];
                  v525 = v384;
                  v526 = v512[4];
                  do
                  {
                    v527 = v506 + 1;
                    v528 = v756;
                    do
                    {
                      v529 = *(unsigned __int16 *)((char *)v17->u16 + v381);
                      v530 = *(unsigned __int16 *)((char *)v17->u16 + v380);
                      v531 = *(unsigned __int16 *)((char *)&v17->u16[1] + v380);
                      v532 = *(unsigned __int16 *)((char *)&v17->u16[2] + v380);
                      v17 = (int8x8_t *)((char *)v17 + v378);
                      v533 = ((v515 + v514 * v529) >> v522) & ~((v515 + v514 * v529) >> v522 >> 31);
                      v534 = ((v517 + v516 * v530) >> v523) & ~((v517 + v516 * v530) >> v523 >> 31);
                      v535 = ((v518 + v519 * v531) >> v524) & ~((v518 + v519 * v531) >> v524 >> 31);
                      v536 = ((v521 + v520 * v532) >> v526) & ~((v521 + v520 * v532) >> v526 >> 31);
                      if (v533 >= 0xFFFF)
                        LOWORD(v533) = -1;
                      if (v534 >= 0xFFFF)
                        LOWORD(v534) = -1;
                      if (v535 >= 0xFFFF)
                        LOWORD(v535) = -1;
                      if (v536 >= 0xFFFF)
                        LOWORD(v536) = -1;
                      v528->i16[0] = v533;
                      v528 = (uint16x4_t *)((char *)v528 + 2);
                      __dst->i16[0] = v534;
                      __dst->i16[1] = v535;
                      __dst->i16[2] = v536;
                      __dst = (uint16x4_t *)((char *)__dst + 6);
                      --v527;
                    }
                    while (v527 > 1);
                    v17 = (int8x8_t *)((char *)v17 + (int)v382);
                    v756 = (uint16x4_t *)((char *)v528 + v525);
                    __dst = (uint16x4_t *)((char *)__dst + v383);
                    _VF = __OFSUB__(v144--, 1);
                  }
                  while (!((v144 < 0) ^ _VF | (v144 == 0)));
                }
                else if (v379 == 1)
                {
                  do
                  {
                    v385 = v14 + 1;
                    v386 = v756;
                    do
                    {
                      v387 = *(__int16 *)((char *)v17->i16 + v380);
                      v388 = *(__int16 *)((char *)&v17->i16[1] + v380);
                      v389 = *(__int16 *)((char *)&v17->i16[2] + v380);
                      v386->i16[0] = ~*(__int16 *)((char *)v17->i16 + v381);
                      v386 = (uint16x4_t *)((char *)v386 + 2);
                      __dst->i16[0] = ~v387;
                      __dst->i16[1] = ~v388;
                      __dst->i16[2] = ~v389;
                      v17 = (int8x8_t *)((char *)v17 + v378);
                      __dst = (uint16x4_t *)((char *)__dst + 6);
                      --v385;
                    }
                    while (v385 > 1);
                    v17 = (int8x8_t *)((char *)v17 + v382);
                    v756 = (uint16x4_t *)((char *)v386 + v384);
                    __dst = (uint16x4_t *)((char *)__dst + v383);
                    _VF = __OFSUB__(v144--, 1);
                  }
                  while (!((v144 < 0) ^ _VF | (v144 == 0)));
                }
              }
              else
              {
                do
                {
                  v501 = v14 + 1;
                  v502 = v756;
                  do
                  {
                    v503 = *(__int32 *)((char *)v17->i32 + v380);
                    v504 = *(__int16 *)((char *)&v17->i16[2] + v380);
                    v502->i16[0] = *(__int16 *)((char *)v17->i16 + v381);
                    v502 = (uint16x4_t *)((char *)v502 + 2);
                    __dst->i32[0] = v503;
                    __dst->i16[2] = v504;
                    v17 = (int8x8_t *)((char *)v17 + v378);
                    __dst = (uint16x4_t *)((char *)__dst + 6);
                    --v501;
                  }
                  while (v501 > 1);
                  v17 = (int8x8_t *)((char *)v17 + (int)v382);
                  v756 = (uint16x4_t *)((char *)v502 + (int)v384);
                  __dst = (uint16x4_t *)((char *)__dst + v383);
                  _VF = __OFSUB__(v144--, 1);
                }
                while (!((v144 < 0) ^ _VF | (v144 == 0)));
              }
            }
            return;
          case 1:
            v145 = v103 >> 3;
            v146 = *a1;
            v147 = v105 >> 3;
            if ((v24 & 0x80000000) != 0)
            {
              v421 = a5 - (uint64_t)(v145 * (int)a2);
              v422 = a7 - 2 * (int)a2;
              v423 = a3;
              if (*a1)
              {
                if (v146 == 2)
                {
                  v641 = (_DWORD *)**((_QWORD **)a1 + 4);
                  v642 = v147;
                  v644 = v641[2];
                  v643 = v641[3];
                  v645 = v641[4];
                  do
                  {
                    v646 = v14 + 1;
                    do
                    {
                      v647 = *(unsigned __int16 *)((char *)v17->u16 + v642);
                      v17 = (int8x8_t *)((char *)v17 + v145);
                      v648 = ((v644 + v643 * v647) >> v645) & ~((v644 + v643 * v647) >> v645 >> 31);
                      if (v648 >= 0xFFFF)
                        LOWORD(v648) = -1;
                      __dst->i16[0] = v648;
                      __dst = (uint16x4_t *)((char *)__dst + 2);
                      --v646;
                    }
                    while (v646 > 1);
                    v17 = (int8x8_t *)((char *)v17 + (int)v421);
                    __dst = (uint16x4_t *)((char *)__dst + (int)v422);
                    _VF = __OFSUB__(v423--, 1);
                  }
                  while (!((v423 < 0) ^ _VF | (v423 == 0)));
                }
                else if (v146 == 1)
                {
                  do
                  {
                    v424 = v14 + 1;
                    do
                    {
                      __dst->i16[0] = ~*(__int16 *)((char *)v17->i16 + v147);
                      __dst = (uint16x4_t *)((char *)__dst + 2);
                      v17 = (int8x8_t *)((char *)v17 + v145);
                      --v424;
                    }
                    while (v424 > 1);
                    v17 = (int8x8_t *)((char *)v17 + v421);
                    __dst = (uint16x4_t *)((char *)__dst + v422);
                    _VF = __OFSUB__(v423--, 1);
                  }
                  while (!((v423 < 0) ^ _VF | (v423 == 0)));
                }
              }
              else
              {
                do
                {
                  v640 = v14 + 1;
                  do
                  {
                    __dst->i16[0] = *(__int16 *)((char *)v17->i16 + v147);
                    __dst = (uint16x4_t *)((char *)__dst + 2);
                    v17 = (int8x8_t *)((char *)v17 + v145);
                    --v640;
                  }
                  while (v640 > 1);
                  v17 = (int8x8_t *)((char *)v17 + (int)v421);
                  __dst = (uint16x4_t *)((char *)__dst + (int)v422);
                  _VF = __OFSUB__(v423--, 1);
                }
                while (!((v423 < 0) ^ _VF | (v423 == 0)));
              }
            }
            else
            {
              v148 = v106 >> 3;
              v149 = a5 - (uint64_t)(v145 * (int)a2);
              v150 = a7 - (uint64_t)(2 * (int)a2);
              v151 = a11 - 2 * (int)a2;
              v152 = a3;
              if (*a1)
              {
                if (v146 == 2)
                {
                  v439 = *((_QWORD *)a1 + 4);
                  v440 = *(_DWORD **)(v439 + 8 * (v147 > v148));
                  v441 = *(_DWORD **)(v439 + 8 * (v148 > v147));
                  v442 = v148;
                  v444 = v441[2];
                  v443 = v441[3];
                  v446 = v440[2];
                  v445 = v440[3];
                  v447 = v441[4];
                  v448 = v440[4];
                  v449 = v14 + 1;
                  do
                  {
                    v450 = v449;
                    v451 = v756;
                    do
                    {
                      v452 = *(unsigned __int16 *)((char *)v17->u16 + v442);
                      v453 = *(unsigned __int16 *)((char *)v17->u16 + v147);
                      v17 = (int8x8_t *)((char *)v17 + v145);
                      v454 = ((v444 + v443 * v452) >> v447) & ~((v444 + v443 * v452) >> v447 >> 31);
                      v455 = ((v446 + v445 * v453) >> v448) & ~((v446 + v445 * v453) >> v448 >> 31);
                      if (v454 >= 0xFFFF)
                        LOWORD(v454) = -1;
                      if (v455 >= 0xFFFF)
                        LOWORD(v455) = -1;
                      v451->i16[0] = v454;
                      v451 = (uint16x4_t *)((char *)v451 + 2);
                      __dst->i16[0] = v455;
                      __dst = (uint16x4_t *)((char *)__dst + 2);
                      --v450;
                    }
                    while (v450 > 1);
                    v17 = (int8x8_t *)((char *)v17 + (int)v149);
                    v756 = (uint16x4_t *)((char *)v451 + (int)v151);
                    __dst = (uint16x4_t *)((char *)__dst + (int)v150);
                    _VF = __OFSUB__(v152--, 1);
                  }
                  while (!((v152 < 0) ^ _VF | (v152 == 0)));
                }
                else if (v146 == 1)
                {
                  do
                  {
                    v153 = a2 + 1;
                    v154 = v756;
                    do
                    {
                      v155 = *(__int16 *)((char *)v17->i16 + v147);
                      v154->i16[0] = ~*(__int16 *)((char *)v17->i16 + v148);
                      v154 = (uint16x4_t *)((char *)v154 + 2);
                      __dst->i16[0] = ~v155;
                      __dst = (uint16x4_t *)((char *)__dst + 2);
                      v17 = (int8x8_t *)((char *)v17 + v145);
                      --v153;
                    }
                    while (v153 > 1);
                    v17 = (int8x8_t *)((char *)v17 + v149);
                    v756 = (uint16x4_t *)((char *)v154 + v151);
                    __dst = (uint16x4_t *)((char *)__dst + v150);
                    _VF = __OFSUB__(v152--, 1);
                  }
                  while (!((v152 < 0) ^ _VF | (v152 == 0)));
                }
              }
              else
              {
                do
                {
                  v436 = a2 + 1;
                  v437 = v756;
                  do
                  {
                    v438 = *(__int16 *)((char *)v17->i16 + v147);
                    v437->i16[0] = *(__int16 *)((char *)v17->i16 + v148);
                    v437 = (uint16x4_t *)((char *)v437 + 2);
                    __dst->i16[0] = v438;
                    __dst = (uint16x4_t *)((char *)__dst + 2);
                    v17 = (int8x8_t *)((char *)v17 + v145);
                    --v436;
                  }
                  while (v436 > 1);
                  v17 = (int8x8_t *)((char *)v17 + (int)v149);
                  v756 = (uint16x4_t *)((char *)v437 + (int)v151);
                  __dst = (uint16x4_t *)((char *)__dst + (int)v150);
                  _VF = __OFSUB__(v152--, 1);
                }
                while (!((v152 < 0) ^ _VF | (v152 == 0)));
              }
            }
            return;
        }
      }
      v156 = v103 * a2 + 7;
      v710 = v156 >> 3;
      v157 = (int8x8_t *)malloc_type_malloc((uint64_t)v156 >> 3, 0x705560E0uLL);
      v24 = v722;
      v12 = a1;
      LODWORD(v14) = a2;
      v158 = v157;
    }
    else
    {
      v158 = 0;
      v710 = 0;
      if (v104 == 16 && (v103 & 7) == 0)
      {
        switch(v23)
        {
          case 4:
            v390 = v103 >> 3;
            v391 = v24;
            v392 = *a1;
            if ((v391 & 0x80000000) != 0)
            {
              decode_word_16bpc_4(v14, v15, v390, (uint64_t)__src, a5, __dst, a7, v392, *((_QWORD **)a1 + 4), v105 >> 3);
            }
            else
            {
              v393 = v105 >> 3;
              v394 = v106 >> 3;
              v395 = a5 - (uint64_t)(v390 * (int)v14);
              v396 = a7 - 8 * (int)v14;
              v397 = a11 - 2 * (int)v14;
              if (*a1)
              {
                if (v392 == 2)
                {
                  v576 = *((_QWORD *)a1 + 4);
                  v577 = *(_DWORD **)(v576 + 8 * (v393 > v394));
                  v578 = 8;
                  v579 = 16;
                  if (v393 > v394)
                    v578 = 16;
                  v580 = *(_DWORD **)(v576 + v578);
                  v581 = 24;
                  if (v393 > v394)
                    v579 = 24;
                  v582 = *(_DWORD **)(v576 + v579);
                  if (v393 > v394)
                    v581 = 32;
                  v583 = *(_DWORD **)(v576 + v581);
                  v584 = *(_DWORD **)(v576 + 32 * (v394 > v393));
                  v585 = v14;
                  v586 = v390;
                  v588 = v584[2];
                  v587 = v584[3];
                  v589 = v584[4];
                  v591.i32[0] = v577[2];
                  v590.i32[0] = v577[3];
                  v590.i32[1] = v580[3];
                  v590.i32[2] = v582[3];
                  v590.i32[3] = v583[3];
                  v591.i32[1] = v580[2];
                  v591.i32[2] = v582[2];
                  v591.i32[3] = v583[2];
                  v592.i32[0] = v577[4];
                  v592.i32[1] = v580[4];
                  v592.i32[2] = v582[4];
                  v592.i32[3] = v583[4];
                  v593 = vnegq_s32(v592);
                  do
                  {
                    v594 = v585 + 1;
                    v595 = v756;
                    do
                    {
                      v596 = bswap32(*(unsigned __int16 *)((char *)v17->u16 + v394)) >> 16;
                      v597 = (char *)v17 + v586;
                      v598 = ((int)(v588 + v587 * v596) >> v589) & ~((int)(v588 + v587 * v596) >> v589 >> 31);
                      if (v598 >= 0xFFFF)
                        LOWORD(v598) = -1;
                      v599 = *(int8x8_t *)((char *)v17 + v393);
                      v595->i16[0] = v598;
                      v595 = (uint16x4_t *)((char *)v595 + 2);
                      *__dst++ = vqmovn_u32((uint32x4_t)vmaxq_s32(vshlq_s32(vmlaq_s32(v591, v590, (int32x4_t)vmovl_u16((uint16x4_t)vrev16_s8(v599))), v593), (int32x4_t)0));
                      --v594;
                      v17 = (int8x8_t *)((char *)v17 + v586);
                    }
                    while (v594 > 1);
                    v17 = (int8x8_t *)&v597[(int)v395];
                    v756 = (uint16x4_t *)((char *)v595 + (int)v397);
                    __dst = (uint16x4_t *)((char *)__dst + (int)v396);
                    _VF = __OFSUB__(v15--, 1);
                  }
                  while (!((v15 < 0) ^ _VF | (v15 == 0)));
                }
                else if (v392 == 1)
                {
                  do
                  {
                    v398 = v14 + 1;
                    v399 = v756;
                    do
                    {
                      v400 = *(int8x8_t *)((char *)v17 + v393);
                      v399->i16[0] = bswap32(~*(unsigned __int16 *)((char *)v17->u16 + v394)) >> 16;
                      v399 = (uint16x4_t *)((char *)v399 + 2);
                      v17 = (int8x8_t *)((char *)v17 + v390);
                      *__dst++ = (uint16x4_t)vrev16_s8(vmvn_s8(v400));
                      --v398;
                    }
                    while (v398 > 1);
                    v17 = (int8x8_t *)((char *)v17 + v395);
                    v756 = (uint16x4_t *)((char *)v399 + v397);
                    __dst = (uint16x4_t *)((char *)__dst + v396);
                    _VF = __OFSUB__(v15--, 1);
                  }
                  while (!((v15 < 0) ^ _VF | (v15 == 0)));
                }
              }
              else
              {
                do
                {
                  v573 = v14 + 1;
                  v574 = v756;
                  do
                  {
                    v575 = *(int8x8_t *)((char *)v17 + v393);
                    v574->i16[0] = bswap32(*(unsigned __int16 *)((char *)v17->u16 + v394)) >> 16;
                    v574 = (uint16x4_t *)((char *)v574 + 2);
                    v17 = (int8x8_t *)((char *)v17 + v390);
                    *__dst++ = (uint16x4_t)vrev16_s8(v575);
                    --v573;
                  }
                  while (v573 > 1);
                  v17 = (int8x8_t *)((char *)v17 + (int)v395);
                  v756 = (uint16x4_t *)((char *)v574 + (int)v397);
                  __dst = (uint16x4_t *)((char *)__dst + (int)v396);
                  _VF = __OFSUB__(v15--, 1);
                }
                while (!((v15 < 0) ^ _VF | (v15 == 0)));
              }
            }
            return;
          case 3:
            v401 = v103 >> 3;
            v402 = v24;
            v403 = *a1;
            if ((v402 & 0x80000000) != 0)
            {
              decode_word_16bpc_3(v14, v15, v401, (uint64_t)__src, a5, __dst, a7, v403, *((_QWORD **)a1 + 4), v105 >> 3);
            }
            else
            {
              v404 = v105 >> 3;
              v405 = v106 >> 3;
              v406 = a5 - (uint64_t)(v401 * (int)v14);
              v407 = a7 - 6 * v14;
              v408 = a11 - 2 * (int)v14;
              if (*a1)
              {
                if (v403 == 2)
                {
                  v607 = *((_QWORD *)a1 + 4);
                  v608 = v14;
                  v609 = *(_DWORD **)(v607 + 8 * (v404 > v405));
                  v610 = 8;
                  v611 = 16;
                  if (v404 > v405)
                    v610 = 16;
                  v612 = *(_DWORD **)(v607 + v610);
                  v613 = 24;
                  if (v404 > v405)
                    v611 = 24;
                  v614 = *(_DWORD **)(v607 + v611);
                  if (v405 <= v404)
                    v613 = 0;
                  v615 = *(_DWORD **)(v607 + v613);
                  v617 = v615[2];
                  v616 = v615[3];
                  v619 = v609[2];
                  v618 = v609[3];
                  v620 = v401;
                  v621 = v612[2];
                  v622 = v612[3];
                  v624 = v614[2];
                  v623 = v614[3];
                  v625 = v615[4];
                  v626 = v609[4];
                  v627 = v612[4];
                  v628 = v408;
                  v629 = v614[4];
                  do
                  {
                    v630 = v608 + 1;
                    v631 = v756;
                    do
                    {
                      v632 = bswap32(*(unsigned __int16 *)((char *)v17->u16 + v405));
                      v633 = bswap32(*(unsigned __int16 *)((char *)v17->u16 + v404));
                      v634 = bswap32(*(unsigned __int16 *)((char *)&v17->u16[1] + v404));
                      v635 = bswap32(*(unsigned __int16 *)((char *)&v17->u16[2] + v404));
                      v17 = (int8x8_t *)((char *)v17 + v620);
                      v636 = ((int)(v617 + v616 * HIWORD(v632)) >> v625) & ~((int)(v617 + v616 * HIWORD(v632)) >> v625 >> 31);
                      v637 = ((int)(v619 + v618 * HIWORD(v633)) >> v626) & ~((int)(v619 + v618 * HIWORD(v633)) >> v626 >> 31);
                      v638 = ((int)(v621 + v622 * HIWORD(v634)) >> v627) & ~((int)(v621 + v622 * HIWORD(v634)) >> v627 >> 31);
                      v639 = ((int)(v624 + v623 * HIWORD(v635)) >> v629) & ~((int)(v624 + v623 * HIWORD(v635)) >> v629 >> 31);
                      if (v636 >= 0xFFFF)
                        LOWORD(v636) = -1;
                      if (v637 >= 0xFFFF)
                        LOWORD(v637) = -1;
                      if (v638 >= 0xFFFF)
                        LOWORD(v638) = -1;
                      if (v639 >= 0xFFFF)
                        LOWORD(v639) = -1;
                      v631->i16[0] = v636;
                      v631 = (uint16x4_t *)((char *)v631 + 2);
                      __dst->i16[0] = v637;
                      __dst->i16[1] = v638;
                      __dst->i16[2] = v639;
                      __dst = (uint16x4_t *)((char *)__dst + 6);
                      --v630;
                    }
                    while (v630 > 1);
                    v17 = (int8x8_t *)((char *)v17 + (int)v406);
                    v756 = (uint16x4_t *)((char *)v631 + v628);
                    __dst = (uint16x4_t *)((char *)__dst + v407);
                    _VF = __OFSUB__(v15--, 1);
                  }
                  while (!((v15 < 0) ^ _VF | (v15 == 0)));
                }
                else if (v403 == 1)
                {
                  v409 = v405;
                  v410 = v401;
                  do
                  {
                    v411 = v14 + 1;
                    v412 = v756;
                    do
                    {
                      v413 = *(unsigned __int16 *)((char *)v17->u16 + v404);
                      v414 = *(unsigned __int16 *)((char *)&v17->u16[1] + v404);
                      v415 = *(unsigned __int16 *)((char *)&v17->u16[2] + v404);
                      v412->i16[0] = bswap32(~*(unsigned __int16 *)((char *)v17->u16 + v409)) >> 16;
                      v412 = (uint16x4_t *)((char *)v412 + 2);
                      __dst->i16[0] = bswap32(~v413) >> 16;
                      __dst->i16[1] = bswap32(~v414) >> 16;
                      __dst->i16[2] = bswap32(~v415) >> 16;
                      v17 = (int8x8_t *)((char *)v17 + v410);
                      __dst = (uint16x4_t *)((char *)__dst + 6);
                      --v411;
                    }
                    while (v411 > 1);
                    v17 = (int8x8_t *)((char *)v17 + v406);
                    v756 = (uint16x4_t *)((char *)v412 + v408);
                    __dst = (uint16x4_t *)((char *)__dst + v407);
                    _VF = __OFSUB__(v15--, 1);
                  }
                  while (!((v15 < 0) ^ _VF | (v15 == 0)));
                }
              }
              else
              {
                v600 = v405;
                v601 = v401;
                do
                {
                  v602 = v14 + 1;
                  v603 = v756;
                  do
                  {
                    v604 = bswap32(*(unsigned __int16 *)((char *)v17->u16 + v404)) >> 16;
                    v605 = bswap32(*(unsigned __int16 *)((char *)&v17->u16[1] + v404));
                    v606 = bswap32(*(unsigned __int16 *)((char *)&v17->u16[2] + v404));
                    v603->i16[0] = bswap32(*(unsigned __int16 *)((char *)v17->u16 + v600)) >> 16;
                    v603 = (uint16x4_t *)((char *)v603 + 2);
                    __dst->i16[0] = v604;
                    __dst->i16[1] = HIWORD(v605);
                    __dst->i16[2] = HIWORD(v606);
                    v17 = (int8x8_t *)((char *)v17 + v601);
                    __dst = (uint16x4_t *)((char *)__dst + 6);
                    --v602;
                  }
                  while (v602 > 1);
                  v17 = (int8x8_t *)((char *)v17 + (int)v406);
                  v756 = (uint16x4_t *)((char *)v603 + (int)v408);
                  __dst = (uint16x4_t *)((char *)__dst + v407);
                  _VF = __OFSUB__(v15--, 1);
                }
                while (!((v15 < 0) ^ _VF | (v15 == 0)));
              }
            }
            return;
          case 1:
            v196 = v103 >> 3;
            v197 = v24;
            v198 = *a1;
            if ((v197 & 0x80000000) != 0)
            {
              decode_word_16bpc_1(v14, v15, v196, (uint64_t)__src, a5, __dst, a7, v198, *((_QWORD *)a1 + 4), v105 >> 3);
            }
            else
            {
              v199 = v105 >> 3;
              v200 = v106 >> 3;
              v201 = a5 - (uint64_t)(v196 * (int)v14);
              v202 = a7 - (uint64_t)(2 * (int)v14);
              v203 = a11 - 2 * (int)v14;
              if (*a1)
              {
                if (v198 == 2)
                {
                  v556 = *((_QWORD *)a1 + 4);
                  v557 = *(_DWORD **)(v556 + 8 * (v199 > v200));
                  v558 = *(_DWORD **)(v556 + 8 * (v200 > v199));
                  v559 = v196;
                  v561 = v558[2];
                  v560 = v558[3];
                  v563 = v557[2];
                  v562 = v557[3];
                  v564 = v558[4];
                  v565 = v557[4];
                  v566 = v14 + 1;
                  do
                  {
                    v567 = v566;
                    v568 = v756;
                    do
                    {
                      v569 = bswap32(*(unsigned __int16 *)((char *)v17->u16 + v200));
                      v570 = bswap32(*(unsigned __int16 *)((char *)v17->u16 + v199));
                      v17 = (int8x8_t *)((char *)v17 + v559);
                      v571 = ((int)(v561 + v560 * HIWORD(v569)) >> v564) & ~((int)(v561 + v560 * HIWORD(v569)) >> v564 >> 31);
                      v572 = ((int)(v563 + v562 * HIWORD(v570)) >> v565) & ~((int)(v563 + v562 * HIWORD(v570)) >> v565 >> 31);
                      if (v571 >= 0xFFFF)
                        LOWORD(v571) = -1;
                      if (v572 >= 0xFFFF)
                        LOWORD(v572) = -1;
                      v568->i16[0] = v571;
                      v568 = (uint16x4_t *)((char *)v568 + 2);
                      __dst->i16[0] = v572;
                      __dst = (uint16x4_t *)((char *)__dst + 2);
                      --v567;
                    }
                    while (v567 > 1);
                    v17 = (int8x8_t *)((char *)v17 + (int)v201);
                    v756 = (uint16x4_t *)((char *)v568 + (int)v203);
                    __dst = (uint16x4_t *)((char *)__dst + (int)v202);
                    _VF = __OFSUB__(v15--, 1);
                  }
                  while (!((v15 < 0) ^ _VF | (v15 == 0)));
                }
                else if (v198 == 1)
                {
                  do
                  {
                    v204 = v14 + 1;
                    v205 = v756;
                    do
                    {
                      v206 = *(unsigned __int16 *)((char *)v17->u16 + v199);
                      v205->i16[0] = bswap32(~*(unsigned __int16 *)((char *)v17->u16 + v200)) >> 16;
                      v205 = (uint16x4_t *)((char *)v205 + 2);
                      __dst->i16[0] = bswap32(~v206) >> 16;
                      __dst = (uint16x4_t *)((char *)__dst + 2);
                      v17 = (int8x8_t *)((char *)v17 + v196);
                      --v204;
                    }
                    while (v204 > 1);
                    v17 = (int8x8_t *)((char *)v17 + v201);
                    v756 = (uint16x4_t *)((char *)v205 + v203);
                    __dst = (uint16x4_t *)((char *)__dst + v202);
                    _VF = __OFSUB__(v15--, 1);
                  }
                  while (!((v15 < 0) ^ _VF | (v15 == 0)));
                }
              }
              else
              {
                do
                {
                  v553 = v14 + 1;
                  v554 = v756;
                  do
                  {
                    v555 = bswap32(*(unsigned __int16 *)((char *)v17->u16 + v199));
                    v554->i16[0] = bswap32(*(unsigned __int16 *)((char *)v17->u16 + v200)) >> 16;
                    v554 = (uint16x4_t *)((char *)v554 + 2);
                    __dst->i16[0] = HIWORD(v555);
                    __dst = (uint16x4_t *)((char *)__dst + 2);
                    v17 = (int8x8_t *)((char *)v17 + v196);
                    --v553;
                  }
                  while (v553 > 1);
                  v17 = (int8x8_t *)((char *)v17 + (int)v201);
                  v756 = (uint16x4_t *)((char *)v554 + (int)v203);
                  __dst = (uint16x4_t *)((char *)__dst + (int)v202);
                  _VF = __OFSUB__(v15--, 1);
                }
                while (!((v15 < 0) ^ _VF | (v15 == 0)));
              }
            }
            return;
        }
        v710 = 0;
        v158 = 0;
      }
    }
    v159 = a5;
    if (v104 >= 16)
      v160 = 16;
    else
      v160 = v104;
    v161 = ~(-1 << v160);
    v738 = v23 * v14;
    v735 = (uint64_t)v105 >> 3;
    v708 = (uint64_t)v106 >> 3;
    v730 = v159;
    v704 = v24;
    v715 = v158;
    do
    {
      v747 = v15;
      v162 = v17;
      if (v158)
      {
        v162 = decode_swap(v717, v158, v17, v710);
        v158 = v715;
        v24 = v722;
        v12 = a1;
      }
      v163 = 0;
      v164 = *((_QWORD *)v12 + 4);
      v165 = (char *)v162 + v735;
      v166 = v162->u8[v735];
      v167 = __dst;
      v168 = v738;
      v169 = (_QWORD *)(v164 + 8 * v743);
      v170 = 8 - (v105 & 7);
      do
      {
        v171 = (_DWORD *)*v169;
        v172 = v170 - v160;
        if (v170 - v160 < 0)
        {
          LODWORD(v173) = -v170 >> 3;
          v174 = -v170 & 0xFFFFFFF8;
          if (v170 >= -7)
            v173 = 0;
          else
            v173 = v173;
          v165 += v173;
          if (v170 >= -7)
            v174 = 0;
          v170 += v174;
          do
          {
            v175 = *++v165;
            v170 += 8;
            v166 = v175 | (v166 << 8);
          }
          while (v170 - v160 < 0);
          v172 = v170 - v160;
        }
        v176 = v163 + 1;
        v177 = (v166 >> v172) & v161;
        if (v163 + 1 >= v23)
          v176 = 0;
        v178 = ((v171[2] + v177 * v171[3]) >> v171[4]) & ~((v171[2] + v177 * v171[3]) >> v171[4] >> 31);
        if (v163 + 1 >= v23)
          v179 = v23 * v104 - v103;
        else
          v179 = 0;
        if (v163 + 1 >= v23)
          v180 = v23;
        else
          v180 = 0;
        if (v178 >= 0xFFFF)
          LOWORD(v178) = -1;
        v167->i16[v163] = v178;
        v170 += v179 - v104;
        v167 = (uint16x4_t *)((char *)v167 + 2 * v180);
        v169 = (_QWORD *)(v164 + 8 * v743 + 8 * v176);
        v163 = v176;
        --v168;
      }
      while (v168);
      v181 = a2;
      if ((v24 & 0x80000000) == 0 && v756)
      {
        v182 = *(_DWORD **)(v164 + 8 * v704);
        v183 = v182[2];
        v184 = v182[3];
        v185 = v182[4];
        v186 = (char *)&v756[-1] + 6;
        v187 = (char *)v162 + v708;
        v188 = v162->u8[v708];
        v189 = 8 - (v106 & 7);
        do
        {
          v190 = v189 - v160;
          if (v189 - v160 < 0)
          {
            LODWORD(v191) = -v189 >> 3;
            v192 = -v189 & 0xFFFFFFF8;
            if (v189 >= -7)
              v191 = 0;
            else
              v191 = v191;
            v187 += v191;
            if (v189 >= -7)
              v192 = 0;
            v189 += v192;
            do
            {
              v193 = *++v187;
              v189 += 8;
              v188 = v193 | (v188 << 8);
            }
            while (v189 - v160 < 0);
            v190 = v189 - v160;
          }
          v189 -= v103;
          v194 = (v183 + ((v188 >> v190) & v161) * v184) >> v185;
          v195 = v194 & ~(v194 >> 31);
          if (v195 >= 0xFFFF)
            LOWORD(v195) = -1;
          *((_WORD *)v186 + 1) = v195;
          v186 += 2;
          --v181;
        }
        while (v181);
        v756 = (uint16x4_t *)((char *)v756 + a11);
      }
      v17 = (int8x8_t *)((char *)v17 + v730);
      __dst = (uint16x4_t *)((char *)__dst + a7);
      --v15;
    }
    while (v747 != 1);
    if (!v158)
      return;
    v102 = v715;
    goto LABEL_433;
  }
  v21 = a1[3];
  if (v756 == __dst)
    LODWORD(v22) = -1;
  else
    LODWORD(v22) = a1[2];
  v82 = a1[4];
  v81 = a1[5];
  v83 = v81 - v82 * v21;
  if (v83 < 0)
    return;
  if (!a1[6])
    v83 = 0;
  v84 = v83 + v82 * (v21 - 1);
  v85 = v83 + v82;
  if ((_DWORD)v22)
    v85 = v83;
  else
    v84 = v83;
  if ((int)v22 >= 0)
    v83 = v85;
  v732 = v83;
  v86 = (int)v22 >= 0 && (_DWORD)v22 == 0;
  v716 = v86;
  if ((int)v22 >= 0)
    v87 = v21 - 1;
  else
    v87 = a1[3];
  if ((int)v22 >= 0)
    v88 = v84;
  else
    v88 = 0;
  v705 = v88;
  v712 = v87;
  v709 = a1[7];
  if (a1[7])
  {
    v721 = ((int)v81 * (int)a2 + 7) >> 3;
    v728 = a5;
    v703 = a1[5];
    if ((int)v82 < 8 || ((v81 | v82) & 7) != 0)
    {
      v89 = a3;
      v90 = 0;
    }
    else
    {
      v89 = a3;
      if ((v87 & 0xFFFFFFFD) == 1 || v87 == 4)
        v90 = v87;
      else
        v90 = 0;
    }
    v91 = (int8x8_t *)malloc_type_malloc(v721, 0x705560E0uLL);
    v737 = v703 >> 3;
    v707 = (int)v82 >> 3;
    v734 = v732 >> 3;
    if ((int)v22 >= 0 && v756 == 0)
      v22 = 0xFFFFFFFFLL;
    else
      v22 = v22;
    v706 = v705 >> 3;
    v725 = a7;
    v93 = a7;
    while (1)
    {
      v94 = v17;
      if (v91)
        v94 = decode_swap(v709, v91, v17, v721);
      switch(v90)
      {
        case 4:
          v98 = *a1;
          v99 = (_QWORD *)*((_QWORD *)a1 + 4);
          if ((v22 & 0x80000000) != 0)
          {
            decode_byte_8bpc_4(a2, 1, v737, v707, (uint64_t)v94, v728, __dst, v725, v98, v99, v734);
            goto LABEL_133;
          }
          v97 = v756;
          decode_byte_8bpc_4a(a2, 1, v737, v707, (uint64_t)v94, v728, __dst, v725, v756, a11, v98, (uint64_t)v99, v734, v706);
          break;
        case 3:
          v100 = *a1;
          v101 = (_QWORD *)*((_QWORD *)a1 + 4);
          if ((v22 & 0x80000000) != 0)
          {
            decode_byte_8bpc_3(a2, 1, v737, v707, (uint64_t)v94, v728, __dst, v725, v100, v101, v734);
            goto LABEL_133;
          }
          v97 = v756;
          decode_byte_8bpc_3a(a2, 1, v737, v707, (uint64_t)v94, v728, __dst, v725, v756, a11, v100, (uint64_t)v101, v734, v706);
          break;
        case 1:
          v95 = *a1;
          v96 = (_QWORD *)*((_QWORD *)a1 + 4);
          if ((v22 & 0x80000000) != 0)
          {
            decode_byte_8bpc_1(a2, 1, v737, (uint64_t)v94, v728, __dst, v725, v95, v96, v734);
LABEL_133:
            v97 = v756;
            break;
          }
          v97 = v756;
          decode_byte_8bpc_1a(a2, 1, v737, (uint64_t)v94, v728, __dst, v725, v756, a11, v95, (uint64_t)v96, v734, v706);
          break;
        default:
          decode_byte_nbpc_N(a2, v82, v703, (uint64_t)v94, v732, (uint64_t)__dst, v712, (_QWORD *)(*((_QWORD *)a1 + 4) + 8 * v716), v712);
          v97 = v756;
          if ((v22 & 0x80000000) == 0)
            decode_byte_nbpc_1(a2, v82, v703, (uint64_t)v94, v705, (uint64_t)v756, *(_QWORD *)(*((_QWORD *)a1 + 4) + 8 * v22));
          break;
      }
      v17 = (int8x8_t *)((char *)v17 + v728);
      __dst = (uint16x4_t *)((char *)__dst + v93);
      if ((int)v22 >= 0)
        v97 = (uint16x4_t *)((char *)v97 + a11);
      v756 = v97;
      if (!--v89)
      {
        if (v91)
        {
          v102 = v91;
          goto LABEL_433;
        }
        return;
      }
    }
  }
  if ((v22 & 0x80000000) != 0 && (_DWORD)v81 == (_DWORD)v82 * v21)
  {
    v136 = *a1;
    if (*a1 >= 2)
    {
      if (v136 == 2 && (v82 & 7) == 0)
      {
        v420 = (int)v82 >> 3;
        goto LABEL_533;
      }
    }
    else
    {
      if ((int)v82 <= 15)
      {
        switch((int)v82)
        {
          case 1:
            v137 = &decode_byte_1bpc__LUT;
            if (v136 == 1)
              v137 = &unk_184EC30EC;
            v138 = (char *)__dst + 4;
            do
            {
              v139 = v138;
              v140 = v17;
              v141 = v21 * a2;
              do
              {
                v142 = v140->u8[0];
                v140 = (int8x8_t *)((char *)v140 + 1);
                v143 = v137[v142 & 0xF];
                *(v139 - 1) = *(_DWORD *)((char *)v137 + (((unint64_t)v142 >> 2) & 0x3C));
                if (v141 < 5)
                  break;
                *v139 = v143;
                v139 += 2;
                _CF = v141 >= 8;
                v141 -= 8;
              }
              while (v141 != 0 && _CF);
              v17 = (int8x8_t *)((char *)v17 + a5);
              v138 += a7;
              --v15;
            }
            while (v15);
            break;
          case 2:
            v547 = (unsigned __int16 *)&decode_byte_2bpc__LUT;
            if (v136 == 1)
              v547 = (unsigned __int16 *)&unk_184EC314C;
            do
            {
              v548 = 0;
              v549 = v21 * a2 + 4;
              do
              {
                __dst->i32[v548] = v547[v17->u8[v548] >> 4] | (v547[v17->i8[v548] & 0xF] << 16);
                ++v548;
                v549 -= 4;
              }
              while (v549 > 4);
              v17 = (int8x8_t *)((char *)v17 + a5);
              __dst = (uint16x4_t *)((char *)__dst + a7);
              --v15;
            }
            while (v15);
            break;
          case 4:
            v550 = (unsigned __int8 *)&decode_byte_4bpc__LUT;
            if (v136 == 1)
              v550 = (unsigned __int8 *)&unk_184EC317C;
            do
            {
              v551 = 0;
              v552 = v21 * a2 + 2;
              do
              {
                __dst->i16[v551] = v550[(unint64_t)v17->u8[v551] >> 4] | (v550[v17->i8[v551] & 0xF] << 8);
                ++v551;
                v552 -= 2;
              }
              while (v552 > 2);
              v17 = (int8x8_t *)((char *)v17 + a5);
              __dst = (uint16x4_t *)((char *)__dst + a7);
              --v15;
            }
            while (v15);
            break;
          case 8:
            decode_byte_8bpc(a2, a3, __src, a5, (char *)__dst, a7, v136, v21, a9, a10);
            break;
          default:
            goto LABEL_442;
        }
        return;
      }
      if ((_DWORD)v82 == 16)
      {
        decode_byte_16bpc(a2, a3, (uint64_t)__src, a5, (uint64_t)__dst, a7, v136, v21);
        return;
      }
      if ((_DWORD)v82 == 24 || (_DWORD)v82 == 32)
      {
        v420 = v82 >> 3;
LABEL_533:
        decode_byte_8bpc_N(a2, v15, v420, (uint64_t)__src, a5, (uint64_t)__dst, a7, *((uint64_t **)a1 + 4), v21);
        return;
      }
    }
  }
LABEL_442:
  if ((int)v22 >= 0 && v756 == 0)
    v359 = 0xFFFFFFFFLL;
  else
    v359 = v22;
  if ((int)v82 >= 8 && ((v81 | v82) & 7) == 0)
  {
    switch(v87)
    {
      case 4:
        v537 = (int)v81 >> 3;
        v538 = v82 >> 3;
        v539 = *a1;
        v540 = (_QWORD *)*((_QWORD *)a1 + 4);
        v541 = v732 >> 3;
        if ((v359 & 0x80000000) != 0)
          decode_byte_8bpc_4(a2, v15, v537, v538, (uint64_t)v17, a5, __dst, a7, v539, v540, v541);
        else
          decode_byte_8bpc_4a(a2, v15, v537, v538, (uint64_t)v17, a5, __dst, a7, v756, a11, v539, (uint64_t)v540, v541, v705 >> 3);
        return;
      case 3:
        v542 = (int)v81 >> 3;
        v543 = v82 >> 3;
        v544 = *a1;
        v545 = (_QWORD *)*((_QWORD *)a1 + 4);
        v546 = v732 >> 3;
        if ((v359 & 0x80000000) != 0)
          decode_byte_8bpc_3(a2, v15, v542, v543, (uint64_t)v17, a5, __dst, a7, v544, v545, v546);
        else
          decode_byte_8bpc_3a(a2, v15, v542, v543, (uint64_t)v17, a5, __dst, a7, v756, a11, v544, (uint64_t)v545, v546, v705 >> 3);
        return;
      case 1:
        v416 = (int)v81 >> 3;
        v417 = *a1;
        v418 = (_QWORD *)*((_QWORD *)a1 + 4);
        v419 = v732 >> 3;
        if ((v359 & 0x80000000) != 0)
          decode_byte_8bpc_1(a2, v15, v416, (uint64_t)__src, a5, __dst, a7, v417, v418, v419);
        else
          decode_byte_8bpc_1a(a2, v15, v416, (uint64_t)__src, a5, __dst, a7, v756, a11, v417, (uint64_t)v418, v419, v705 >> 3);
        return;
    }
  }
  v751 = a7;
  v754 = a5;
  do
  {
    v360 = v15;
    v361 = v14;
    v362 = v12;
    decode_byte_nbpc_N(v14, v82, v81, (uint64_t)v17, v732, (uint64_t)__dst, v87, (_QWORD *)(*((_QWORD *)v12 + 4) + 8 * v716), v87);
    v363 = v81;
    v364 = v82;
    v365 = v756;
    if ((v359 & 0x80000000) == 0)
      decode_byte_nbpc_1(v361, v364, v363, (uint64_t)v17, v705, (uint64_t)v756, *(_QWORD *)(*((_QWORD *)v362 + 4) + 8 * v359));
    v17 = (int8x8_t *)((char *)v17 + v754);
    __dst = (uint16x4_t *)((char *)__dst + v751);
    if ((int)v359 >= 0)
      v365 = (uint16x4_t *)((char *)v756 + a11);
    v756 = v365;
    --v15;
    v14 = v361;
    v12 = v362;
    v82 = v364;
    v81 = v363;
    v87 = v712;
  }
  while (v360 != 1);
}

uint64_t decode_byte_8bpc_1a(uint64_t result, int a2, int a3, uint64_t a4, int a5, _BYTE *a6, int a7, _BYTE *a8, int a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  BOOL v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;

  v13 = a5 - (uint64_t)(a3 * (int)result);
  v14 = a7 - (uint64_t)(int)result;
  v15 = a9 - (uint64_t)(int)result;
  if (a10)
  {
    if (a10 == 2)
    {
      v21 = *(_QWORD *)(a11 + 8 * (a12 > a13)) + 20;
      v22 = *(_QWORD *)(a11 + 8 * (a13 > a12)) + 20;
      v23 = a3;
      v24 = result + 1;
      do
      {
        v25 = v24;
        do
        {
          result = *(unsigned __int8 *)(v22 + *(unsigned __int8 *)(a4 + a13));
          v26 = *(_BYTE *)(v21 + *(unsigned __int8 *)(a4 + a12));
          *a8++ = result;
          *a6++ = v26;
          a4 += v23;
          --v25;
        }
        while (v25 > 1);
        a4 += (int)v13;
        a6 += (int)v14;
        a8 += (int)v15;
        v18 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v18 | (a2 == 0)));
    }
    else if (a10 == 1)
    {
      do
      {
        v16 = result + 1;
        do
        {
          v17 = *(_BYTE *)(a4 + a12);
          *a8++ = ~*(_BYTE *)(a4 + a13);
          *a6++ = ~v17;
          a4 += a3;
          --v16;
        }
        while (v16 > 1);
        a4 += (int)v13;
        a6 += v14;
        a8 += v15;
        v18 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v18 | (a2 == 0)));
    }
  }
  else
  {
    do
    {
      v19 = result + 1;
      do
      {
        v20 = *(_BYTE *)(a4 + a12);
        *a8++ = *(_BYTE *)(a4 + a13);
        *a6++ = v20;
        a4 += a3;
        --v19;
      }
      while (v19 > 1);
      a4 += v13;
      a6 += (int)v14;
      a8 += (int)v15;
      v18 = __OFSUB__(a2--, 1);
    }
    while (!((a2 < 0) ^ v18 | (a2 == 0)));
  }
  return result;
}

uint64_t decode_byte_8bpc_3(uint64_t result, int a2, int a3, int a4, uint64_t a5, int a6, _BYTE *a7, int a8, uint64_t a9, _QWORD *a10, int a11)
{
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  char v15;
  BOOL v16;
  int v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  char v27;

  v11 = a6 - (uint64_t)(a3 * (int)result);
  v12 = -3 * result + a8;
  if (a9)
  {
    if (a9 == 2)
    {
      v20 = *a10 + 20;
      v21 = a10[1] + 20;
      v22 = a11 + (uint64_t)a4;
      v23 = a10[2] + 20;
      v24 = 2 * a4 + a11;
      v25 = result + 1;
      do
      {
        LODWORD(result) = v25;
        do
        {
          v26 = *(_BYTE *)(v21 + *(unsigned __int8 *)(a5 + v22));
          v27 = *(_BYTE *)(v23 + *(unsigned __int8 *)(a5 + v24));
          *a7 = *(_BYTE *)(v20 + *(unsigned __int8 *)(a5 + a11));
          a7[1] = v26;
          a7[2] = v27;
          a5 += a3;
          a7 += 3;
          result = (result - 1);
        }
        while ((int)result > 1);
        a5 += (int)v11;
        a7 += v12;
        v16 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v16 | (a2 == 0)));
    }
    else if (a9 == 1)
    {
      v13 = result + 1;
      do
      {
        v14 = v13;
        do
        {
          v15 = *(_BYTE *)(a5 + a11 + (uint64_t)a4);
          result = *(unsigned __int8 *)(a5 + 2 * a4 + a11);
          *a7 = ~*(_BYTE *)(a5 + a11);
          a7[1] = ~v15;
          a7[2] = ~(_BYTE)result;
          a5 += a3;
          a7 += 3;
          --v14;
        }
        while (v14 > 1);
        a5 += (int)v11;
        a7 += v12;
        v16 = __OFSUB__(a2--, 1);
      }
      while (!((a2 < 0) ^ v16 | (a2 == 0)));
    }
  }
  else
  {
    v17 = result + 1;
    do
    {
      v18 = v17;
      do
      {
        v19 = *(_BYTE *)(a5 + a11 + (uint64_t)a4);
        result = *(unsigned __int8 *)(a5 + 2 * a4 + a11);
        *a7 = *(_BYTE *)(a5 + a11);
        a7[1] = v19;
        a7[2] = result;
        a5 += a3;
        a7 += 3;
        --v18;
      }
      while (v18 > 1);
      a5 += v11;
      a7 += v12;
      v16 = __OFSUB__(a2--, 1);
    }
    while (!((a2 < 0) ^ v16 | (a2 == 0)));
  }
  return result;
}

int8x8_t *decode_swap(uint64_t a1, int8x8_t *a2, int8x8_t *a3, int a4)
{
  int8x16_t *v4;
  int8x16_t v5;
  int v6;
  BOOL v7;
  int8x8_t *v8;
  int8x8_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  if (a1 == 2)
  {
    v8 = a2;
    if (a4 < 8)
    {
      v10 = a4;
    }
    else
    {
      do
      {
        v9 = *a3++;
        v10 = a4 - 8;
        *v8++ = vrev16_s8(v9);
        v7 = a4 > 0xF;
        a4 -= 8;
      }
      while (v7);
    }
    if (v10 >= 1)
    {
      v13 = v10 + 2;
      do
      {
        v14 = a3->u16[0];
        a3 = (int8x8_t *)((char *)a3 + 2);
        v8->i16[0] = bswap32(v14) >> 16;
        v8 = (int8x8_t *)((char *)v8 + 2);
        v13 -= 2;
      }
      while (v13 > 2);
    }
    return a2;
  }
  if (a1 == 4)
  {
    v4 = (int8x16_t *)a2;
    if (a4 < 16)
    {
      v6 = a4;
    }
    else
    {
      do
      {
        v5 = *(int8x16_t *)a3->i8;
        a3 += 2;
        v6 = a4 - 16;
        *v4++ = vrev32q_s8(v5);
        v7 = a4 > 0x1F;
        a4 -= 16;
      }
      while (v7);
    }
    if (v6 >= 1)
    {
      v11 = v6 + 4;
      do
      {
        v12 = a3->i32[0];
        a3 = (int8x8_t *)((char *)a3 + 4);
        v4->i32[0] = bswap32(v12);
        v4 = (int8x16_t *)((char *)v4 + 4);
        v11 -= 4;
      }
      while (v11 > 4);
    }
    return a2;
  }
  return a3;
}

uint64_t decode_byte_8bpc(uint64_t result, int a2, char *__src, int a4, char *__dst, int a6, int a7, int a8, double a9, uint8x8_t a10)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int16x8_t v17;
  char *v18;
  int v19;
  char *v20;
  char *v21;
  unsigned int v22;
  _BYTE *v23;
  char v24;
  size_t v25;
  uint64_t v26;

  v13 = a8 * result;
  v14 = a6;
  if (a7 == 1)
  {
    while (v13 < 5)
    {
      if (v13 > 0)
      {
        v18 = __src - 1;
        v20 = __dst - 1;
        v19 = a8 * result;
LABEL_8:
        v21 = v18 + 1;
        v22 = v19 + 1;
        v23 = v20 + 1;
        do
        {
          v24 = *v21++;
          *v23++ = ~v24;
          --v22;
        }
        while (v22 > 1);
      }
      __src += a4;
      __dst += a6;
      if (!--a2)
        return result;
    }
    v15 = 0;
    v16 = v13 + 4;
    do
    {
      a10.i32[0] = *(_DWORD *)&__src[v15];
      v17 = (int16x8_t)vmovl_u8(a10);
      *(int8x8_t *)v17.i8 = veor_s8(*(int8x8_t *)v17.i8, (int8x8_t)0xFF00FF00FF00FFLL);
      a10 = (uint8x8_t)vmovn_s16(v17);
      *(_DWORD *)&__dst[v15] = a10.i32[0];
      v15 += 4;
      v16 -= 4;
    }
    while (v16 > 8);
    v18 = &__src[v15 - 1];
    v19 = v13 - v15;
    v20 = &__dst[v15 - 1];
    goto LABEL_8;
  }
  v25 = v13;
  v26 = a4;
  do
  {
    result = (uint64_t)memcpy(__dst, __src, v25);
    __src += v26;
    __dst += v14;
    --a2;
  }
  while (a2);
  return result;
}

void img_alpha(int a1, int a2, uint64_t a3, int a4, unsigned __int8 **a5, int *a6, uint64_t a7, unsigned __int8 **a8, int *a9, int a10)
{
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  unsigned int *v24;
  unsigned __int8 *v25;
  float *v26;
  int v27;
  int v28;
  unsigned int *v29;
  unsigned __int8 *v30;
  __int16 *v31;
  int v32;
  int v33;
  unsigned int *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  int v37;
  int v38;
  unsigned int *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  int v42;
  uint64_t v43;
  unsigned __int16 *v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  __int16 v65;
  int v66;
  int v67;
  int v68;
  unint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned __int8 *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned __int8 *v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned __int8 *v83;
  unsigned int v84;
  int v85;
  unsigned __int8 *v86;
  int v87;
  __int16 v88;
  unsigned __int8 *v89;
  int v90;
  __int16 v91;
  unsigned __int8 *v92;
  unsigned int v93;
  int v94;
  __int16 v95;
  unsigned __int8 *v96;
  int v97;
  __int16 v98;
  unsigned __int8 *v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned __int8 *v103;
  __int32 v104;
  uint32x2_t v105;
  unsigned __int32 v106;
  uint32x2_t v107;
  int v108;
  int8x8_t v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  __int16 v119;
  char *v121;
  unsigned __int8 *v122;
  unsigned int *v123;
  int v124;
  int v126;
  int v127;
  int v128;
  unint64_t v129;
  int v130;
  unsigned int *v131;
  unsigned __int8 *v132;
  int v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  unint64_t v146;
  int v147;
  unsigned __int8 *v148;
  int v149;
  unsigned __int8 *v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned __int16 v157;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  float32x2_t *v163;
  float *v164;
  unsigned int *v165;
  float *v166;
  int v167;
  int v168;
  float v169;
  float v170;
  float v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned __int8 *v176;
  unsigned __int8 *v177;
  unsigned int *v178;
  unsigned __int8 *v179;
  int v180;
  int v181;
  __int16 v182;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned __int8 *v195;
  unsigned __int8 *v196;
  unsigned __int8 *v197;
  unsigned int *v198;
  uint64_t v199;
  unint64_t v200;
  int v201;
  unint64_t v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unint64_t v206;
  unint64_t v207;
  unsigned int v208;
  unsigned int v209;
  unint64_t v210;
  unint64_t v211;
  unsigned int v212;
  int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  int v217;
  int v218;
  float v219;
  float v220;
  float v221;
  int v222;
  float v223;
  float v224;
  float v225;
  uint64_t v226;
  unsigned int v227;
  BOOL v228;
  uint64_t v229;
  float v230;
  uint64_t v231;
  unsigned int v232;
  int v233;
  int v234;
  __int16 v235;
  int v255;
  __int16 v256;
  uint64_t v261;
  uint64_t v266;
  __int16 v267;
  float v268;
  uint64_t v269;
  int v274;
  int v275;
  unint64_t v276;
  int v277;
  unsigned int *v278;
  unint64_t v279;
  unint64_t v280;
  unsigned int v281;
  uint64_t v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int *v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int *v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int *v294;
  unsigned int *v295;
  unint64_t v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int *v299;
  unsigned int v300;
  unsigned int v301;
  int v302;
  unsigned int *v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int *v307;
  unsigned int v308;
  int v309;
  unsigned int *v310;
  unint64_t v311;
  unsigned int *v312;
  unsigned int v313;
  int v314;
  uint64_t v315;
  int v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  _WORD *v320;
  unsigned int v321;
  unsigned int v322;
  int v323;
  _WORD *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  unsigned int v329;
  unsigned int v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  __int16 v336;
  int v337;
  uint64_t v338;
  __int16 v339;
  int v340;
  uint64_t v341;
  unsigned int v342;
  unsigned int v343;
  int v344;
  uint64_t v345;
  unsigned int v346;
  uint64_t v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  size_t v360;
  size_t v361;
  size_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  int v367;
  int v368;
  uint64_t v369;
  uint64_t v370;
  unsigned __int8 *v371;
  int v373;

  v13 = a3;
  v14 = a4 - 1;
  v373 = a2;
  if ((a4 - 1) > 7)
  {
    v16 = 0;
    v15 = -1;
  }
  else
  {
    v15 = dword_184F7E9B0[v14];
    v16 = dword_184F7E9D0[v14];
  }
  v17 = a7 - 1;
  if ((a7 - 1) > 7)
  {
    v19 = 0;
    v18 = 0xFFFFFFFFLL;
  }
  else
  {
    v18 = dword_184F7E9B0[v17];
    v19 = dword_184F7E9D0[v17];
  }
  if (v19 == (_DWORD)v16 && *a5 == *a8 && *a6 == *a9 && a5[1] == a8[1] && a6[1] == a9[1])
  {
    if (v15 + (_DWORD)v18)
      return;
  }
  else if ((_DWORD)v18 + v15)
  {
    v18 = 0;
  }
  else
  {
    v18 = v18;
  }
  switch(a10)
  {
    case 1:
      if (v19 != (_DWORD)v16)
      {
        v40 = *a8;
        if ((_DWORD)a3 != 3 || (_DWORD)v16)
        {
          v41 = a8[1];
          v42 = *a9;
        }
        else
        {
          v41 = a8[1];
          v42 = *a9;
          if (v40 == v41)
          {
            v41 = *a8;
            if (v42 == a9[1])
            {
              v43 = v42;
              if ((int)v18 >= 0)
                v44 = 0;
              else
                v44 = inverted_8bit_alpha;
              v45 = a6[1];
              v46 = *a6 - (uint64_t)(3 * a1);
              v47 = v19 < 1;
              v48 = *a5;
              v49 = a5[1];
              if (v19 >= 1)
                v50 = 3;
              else
                v50 = 0;
              v51 = 2;
              if (v19 < 1)
                v51 = 3;
              v52 = 1;
              if (v19 < 1)
                v52 = 2;
              v53 = v50 | 0xC;
              v54 = v43 - 4 * a1;
              v55 = v45 - a1;
              do
              {
                v56 = v48 & 3;
                if (v56 > a1 || (((_BYTE)v49 + (_BYTE)v48) & 3) != 0)
                  v56 = a1;
                v57 = v373;
                if (v56 >= 1)
                {
                  v58 = v56 + 1;
                  do
                  {
                    v60 = *v49++;
                    v59 = v60;
                    if (v60)
                    {
                      if ((_DWORD)v59 == 255 || !(_DWORD)v18)
                      {
                        *(_WORD *)&v40[v47] = *(_WORD *)v48;
                        LOBYTE(v63) = v48[2];
                      }
                      else
                      {
                        if ((int)v18 < 1)
                        {
                          v64 = v44[v59];
                          v65 = v48[1] * (_WORD)v64;
                          v40[v47] = (unsigned __int16)(*v48 * (_WORD)v64) >> 8;
                          v40[v52] = HIBYTE(v65);
                          v62 = v48[2] * v64;
                        }
                        else
                        {
                          v61 = v48[1] * (_DWORD)v59 + ((v48[1] * v59) >> 8) + 1;
                          v40[v47] = (unsigned __int16)(*v48 * (_WORD)v59 + ((*v48 * v59) >> 8) + 1) >> 8;
                          v40[v52] = BYTE1(v61);
                          v62 = v48[2] * (_DWORD)v59 + ((v48[2] * v59) >> 8) + 1;
                        }
                        v63 = v62 >> 8;
                      }
                    }
                    else
                    {
                      LOBYTE(v63) = 0;
                      *(_WORD *)&v40[v47] = 0;
                    }
                    v40[v51] = v63;
                    v48 += 3;
                    v40[v50] = v59;
                    v40 += 4;
                    --v58;
                  }
                  while (v58 > 1);
                }
                v66 = a1 - v56;
                v67 = v66 >> 2;
                if ((_DWORD)v18)
                {
                  if (v66 >= 4)
                  {
                    v68 = v67 + 1;
                    do
                    {
                      v70 = *(_DWORD *)v49;
                      v49 += 4;
                      v69 = v70;
                      if (v70)
                      {
                        if ((_DWORD)v69 == -1)
                        {
                          v72 = *(_DWORD *)v48;
                          v71 = *((_DWORD *)v48 + 1);
                          v73 = *((_DWORD *)v48 + 2);
                          if (v19 < 1)
                          {
                            *(_DWORD *)v40 = (v72 << 8) | 0xFF;
                            *((_DWORD *)v40 + 1) = (__PAIR64__(v71, v72) >> 16) | 0xFF;
                            *((_DWORD *)v40 + 2) = (__PAIR64__(v73, v71) >> 8) | 0xFF;
                            *((_DWORD *)v40 + 3) = v73 | 0xFF;
                          }
                          else
                          {
                            *(_DWORD *)v40 = v72 | 0xFF000000;
                            *((_DWORD *)v40 + 1) = (__PAIR64__(v71, v72) >> 24) | 0xFF000000;
                            *((_DWORD *)v40 + 2) = (__PAIR64__(v73, v71) >> 16) | 0xFF000000;
                            *((_DWORD *)v40 + 3) = (v73 >> 8) | 0xFF000000;
                          }
                        }
                        else
                        {
                          LOBYTE(v74) = v69;
                          if ((v18 & 0x80000000) != 0)
                          {
                            if ((_BYTE)v69)
                            {
                              if (v69 == 255)
                              {
                                *(_WORD *)&v40[v47] = *(_WORD *)v48;
                                LOBYTE(v74) = v48[2];
                              }
                              else
                              {
                                v87 = inverted_8bit_alpha[v69];
                                v88 = v48[1] * (_WORD)v87;
                                v89 = &v40[v47];
                                *v89 = (unsigned __int16)(*v48 * (_WORD)v87) >> 8;
                                v89[1] = HIBYTE(v88);
                                v74 = (v48[2] * v87) >> 8;
                              }
                            }
                            else
                            {
                              *(_WORD *)&v40[v47] = 0;
                            }
                            v40[v47 + 2] = v74;
                            v40[v53 - 12] = v69;
                            LOBYTE(v74) = BYTE1(v69);
                            if (BYTE1(v69))
                            {
                              if (BYTE1(v69) == 255)
                              {
                                *(_WORD *)&v40[v47 + 4] = *(_WORD *)(v48 + 3);
                                LOBYTE(v74) = v48[5];
                              }
                              else
                              {
                                v90 = inverted_8bit_alpha[BYTE1(v69)];
                                v91 = v48[4] * (_WORD)v90;
                                v92 = &v40[v47];
                                v92[4] = (unsigned __int16)(v48[3] * (_WORD)v90) >> 8;
                                v92[5] = HIBYTE(v91);
                                v74 = (v48[5] * v90) >> 8;
                              }
                            }
                            else
                            {
                              *(_WORD *)&v40[v47 + 4] = 0;
                            }
                            v40[v47 + 6] = v74;
                            v40[v53 - 8] = BYTE1(v69);
                            LOBYTE(v93) = BYTE2(v69);
                            if (BYTE2(v69))
                            {
                              if (BYTE2(v69) == 255)
                              {
                                *(_WORD *)&v40[v47 + 8] = *((_WORD *)v48 + 3);
                                LOBYTE(v93) = v48[8];
                              }
                              else
                              {
                                v94 = inverted_8bit_alpha[BYTE2(v69)];
                                v95 = v48[7] * (_WORD)v94;
                                v96 = &v40[v47];
                                v96[8] = (unsigned __int16)(v48[6] * (_WORD)v94) >> 8;
                                v96[9] = HIBYTE(v95);
                                v93 = (v48[8] * v94) >> 8;
                              }
                            }
                            else
                            {
                              *(_WORD *)&v40[v47 + 8] = 0;
                            }
                            v40[v47 + 10] = v93;
                            v40[v53 - 4] = BYTE2(v69);
                            if ((v69 >> 24) == 255)
                            {
                              *(_WORD *)&v40[v47 + 12] = *(_WORD *)(v48 + 9);
                              LOBYTE(v84) = v48[11];
                            }
                            else if (BYTE3(v69))
                            {
                              v97 = inverted_8bit_alpha[v69 >> 24];
                              v98 = v48[10] * (_WORD)v97;
                              v99 = &v40[v47];
                              v99[12] = (unsigned __int16)(v48[9] * (_WORD)v97) >> 8;
                              v99[13] = HIBYTE(v98);
                              v84 = (v48[11] * v97) >> 8;
                            }
                            else
                            {
                              LOBYTE(v84) = 0;
                              *(_WORD *)&v40[v47 + 12] = 0;
                            }
                            LOBYTE(v69) = BYTE3(v69);
                          }
                          else
                          {
                            if ((_BYTE)v69)
                            {
                              if (v69 == 255)
                              {
                                *(_WORD *)&v40[v47] = *(_WORD *)v48;
                                LOBYTE(v74) = v48[2];
                              }
                              else
                              {
                                v75 = v69 * v48[1];
                                v76 = &v40[v47];
                                *v76 = (unsigned __int16)(v69 * *v48
                                                        + ((v69 * *v48) >> 8)
                                                        + 1) >> 8;
                                v76[1] = (unsigned __int16)(v75 + (v75 >> 8) + 1) >> 8;
                                v74 = (v69 * v48[2]
                                     + ((v69 * v48[2]) >> 8)
                                     + 1) >> 8;
                              }
                            }
                            else
                            {
                              *(_WORD *)&v40[v47] = 0;
                            }
                            v40[v47 + 2] = v74;
                            v40[v53 - 12] = v69;
                            LOBYTE(v74) = BYTE1(v69);
                            if (BYTE1(v69))
                            {
                              if (BYTE1(v69) == 255)
                              {
                                *(_WORD *)&v40[v47 + 4] = *(_WORD *)(v48 + 3);
                                LOBYTE(v74) = v48[5];
                              }
                              else
                              {
                                v77 = BYTE1(v69) * v48[3];
                                v78 = BYTE1(v69) * v48[4];
                                v79 = &v40[v47];
                                v79[4] = (unsigned __int16)(v77 + (v77 >> 8) + 1) >> 8;
                                v79[5] = (unsigned __int16)(v78 + (v78 >> 8) + 1) >> 8;
                                v74 = (BYTE1(v69) * v48[5] + ((BYTE1(v69) * v48[5]) >> 8) + 1) >> 8;
                              }
                            }
                            else
                            {
                              *(_WORD *)&v40[v47 + 4] = 0;
                            }
                            v40[v47 + 6] = v74;
                            v40[v53 - 8] = BYTE1(v69);
                            LOBYTE(v80) = BYTE2(v69);
                            if (BYTE2(v69))
                            {
                              if (BYTE2(v69) == 255)
                              {
                                *(_WORD *)&v40[v47 + 8] = *((_WORD *)v48 + 3);
                                LOBYTE(v80) = v48[8];
                              }
                              else
                              {
                                v81 = BYTE2(v69) * v48[6];
                                v82 = BYTE2(v69) * v48[7];
                                v83 = &v40[v47];
                                v83[8] = (unsigned __int16)(v81 + (v81 >> 8) + 1) >> 8;
                                v83[9] = (unsigned __int16)(v82 + (v82 >> 8) + 1) >> 8;
                                v80 = (BYTE2(v69) * v48[8] + ((BYTE2(v69) * v48[8]) >> 8) + 1) >> 8;
                              }
                            }
                            else
                            {
                              *(_WORD *)&v40[v47 + 8] = 0;
                            }
                            v40[v47 + 10] = v80;
                            v40[v53 - 4] = BYTE2(v69);
                            LODWORD(v69) = BYTE3(v69);
                            if ((_DWORD)v69 == 255)
                            {
                              *(_WORD *)&v40[v47 + 12] = *(_WORD *)(v48 + 9);
                              LOBYTE(v84) = v48[11];
                            }
                            else if ((_DWORD)v69)
                            {
                              v85 = v69 * v48[10] + ((v69 * v48[10]) >> 8) + 1;
                              v86 = &v40[v47];
                              v86[12] = (unsigned __int16)(v69 * v48[9] + ((v69 * v48[9]) >> 8) + 1) >> 8;
                              v86[13] = BYTE1(v85);
                              v84 = ((_DWORD)v69 * v48[11] + ((v69 * v48[11]) >> 8) + 1) >> 8;
                            }
                            else
                            {
                              LOBYTE(v84) = 0;
                              *(_WORD *)&v40[v47 + 12] = 0;
                            }
                          }
                          v40[v47 + 14] = v84;
                          v40[v53] = v69;
                        }
                      }
                      else
                      {
                        *(_QWORD *)v40 = 0;
                        *((_QWORD *)v40 + 1) = 0;
                      }
                      v48 += 12;
                      v40 += 16;
                      --v68;
                    }
                    while (v68 > 1);
                  }
                }
                else if (v66 >= 4)
                {
                  v100 = v67 + 1;
                  do
                  {
                    v102 = *(_DWORD *)v49;
                    v49 += 4;
                    v101 = v102;
                    v103 = v48;
                    v104 = *(_DWORD *)v48;
                    v105 = *(uint32x2_t *)(v103 + 4);
                    v106 = v105.u32[1];
                    if (v19 < 1)
                    {
                      v109 = vorr_s8(vorr_s8(vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)__PAIR64__(v101, v104), 0x10uLL), (int8x8_t)0xFF0000FF00), (int8x8_t)vshl_u32(v105, (uint32x2_t)0x1800000010)), (int8x8_t)vrev64_s32((int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)__PAIR64__(v101, v105.u32[0]), 8uLL), (int8x8_t)0xFF00FFFF00)));
                      v108 = v101 | (v104 << 8);
                      v110 = v106 & 0xFFFFFF00 | HIBYTE(v101);
                    }
                    else
                    {
                      v107.i32[0] = *(_QWORD *)(v103 + 4);
                      v107.i32[1] = v104;
                      v108 = v104 & 0xFFFFFF | (v101 << 24);
                      v109 = vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v101), (uint32x2_t)0x800000010), (int8x8_t)0xFF000000FF000000), (int8x8_t)vrev64_s32((int32x2_t)vshl_u32(v107, (uint32x2_t)0xFFFFFFE8FFFFFFF0))), vand_s8((int8x8_t)vshl_u32(v105, (uint32x2_t)0x1000000008), (int8x8_t)0xFF000000FFFF00));
                      v110 = v101 & 0xFF000000 | (v106 >> 8);
                    }
                    *(_DWORD *)v40 = v108;
                    *(int8x8_t *)(v40 + 4) = v109;
                    *((_DWORD *)v40 + 3) = v110;
                    v40 += 16;
                    --v100;
                    v48 = v103 + 12;
                  }
                  while (v100 > 1);
                  v48 = v103 + 12;
                }
                v111 = v66 & 3;
                if (v111)
                {
                  v112 = v111 + 1;
                  do
                  {
                    v114 = *v49++;
                    v113 = v114;
                    if (v114)
                    {
                      if ((_DWORD)v113 == 255 || !(_DWORD)v18)
                      {
                        *(_WORD *)&v40[v47] = *(_WORD *)v48;
                        LOBYTE(v117) = v48[2];
                      }
                      else
                      {
                        if ((int)v18 < 1)
                        {
                          v118 = v44[v113];
                          v119 = v48[1] * (_WORD)v118;
                          v40[v47] = (unsigned __int16)(*v48 * (_WORD)v118) >> 8;
                          v40[v52] = HIBYTE(v119);
                          v116 = v48[2] * v118;
                        }
                        else
                        {
                          v115 = v48[1] * (_DWORD)v113 + ((v48[1] * v113) >> 8) + 1;
                          v40[v47] = (unsigned __int16)(*v48 * (_WORD)v113 + ((*v48 * v113) >> 8) + 1) >> 8;
                          v40[v52] = BYTE1(v115);
                          v116 = v48[2] * (_DWORD)v113 + ((v48[2] * v113) >> 8) + 1;
                        }
                        v117 = v116 >> 8;
                      }
                    }
                    else
                    {
                      LOBYTE(v117) = 0;
                      *(_WORD *)&v40[v47] = 0;
                    }
                    v40[v51] = v117;
                    v48 += 3;
                    v40[v50] = v113;
                    v40 += 4;
                    --v112;
                  }
                  while (v112 > 1);
                }
                v48 += v46;
                v49 += v55;
                v40 += v54;
                --v373;
              }
              while (v57 > 1);
              return;
            }
          }
        }
        CGSConvertAlphaByteInterleved(v18, a1, a2, a3, *a5, a5[1], *a6, a6[1], v16, v40, v41, v42, a9[1], v19);
        return;
      }
      if ((_DWORD)v16)
      {
        v20 = *a5;
        v21 = a5[1];
        v22 = *a6;
        if (*a5 == v21)
        {
          v23 = a6[1];
          v24 = (unsigned int *)*a8;
          if (v22 == v23)
          {
            if (v24 == (unsigned int *)a8[1] && *a9 == a9[1])
            {
              if ((_DWORD)a3 == 3)
                CGSConvertAlphaByteMeshedXXXX(v18, a1, a2, (unsigned int *)*a5, *a6, (unsigned int *)*a8, *a9, v16);
              else
                CGSConvertAlphaByteMeshed(v18, a1, a2, a3, (uint64_t *)a5, v22, a8, *a9, v16);
              return;
            }
            v23 = *a6;
          }
        }
        else
        {
          v23 = a6[1];
          v24 = (unsigned int *)*a8;
        }
        CGSConvertAlphaByteInterleved(v18, a1, a2, a3, v20, v21, v22, v23, v16, (unsigned __int8 *)v24, a8[1], *a9, a9[1], v16);
        return;
      }
      v368 = a3 * a1;
      v122 = *a5;
      v121 = (char *)a5[1];
      v123 = (unsigned int *)*a8;
      v356 = *a9;
      v360 = *a6;
      v364 = a6[1];
      CGBlt_copyBytes(a1, a2, v121, (char *)a8[1], v364, a9[1]);
      if ((_DWORD)v18)
      {
        v124 = v373;
        _ZF = a1 > 3 && (_DWORD)v13 == 1;
        v126 = _ZF;
        do
        {
          if ((_DWORD)v13 == 3)
          {
            v127 = a1;
            v128 = v124;
            if (a1 >= 4)
            {
              v129 = 0;
              do
              {
                v130 = v127;
                v131 = &v123[v129 / 4];
                if (*(_DWORD *)v121 == -1)
                {
                  v145 = *(_QWORD *)&v122[v129];
                  v131[2] = *(_DWORD *)&v122[v129 + 8];
                  *(_QWORD *)v131 = v145;
                }
                else if (*(_DWORD *)v121)
                {
                  v132 = &v122[v129];
                  v133 = v122[v129];
                  v134 = &v123[v129 / 4];
                  if ((_DWORD)v18 == 1)
                  {
                    *(_BYTE *)v134 = (unsigned __int16)(*v121 * (_WORD)v133
                                                      + ((*v121 * v133) >> 8)
                                                      + 1) >> 8;
                    v135 = *v121 * v132[1];
                    *((_BYTE *)v134 + 1) = (unsigned __int16)(v135 + (v135 >> 8) + 1) >> 8;
                    v136 = *v121 * v132[2];
                    *((_BYTE *)v134 + 2) = (unsigned __int16)(v136 + (v136 >> 8) + 1) >> 8;
                    v137 = v121[1] * v132[3];
                    *((_BYTE *)v134 + 3) = (unsigned __int16)(v137 + (v137 >> 8) + 1) >> 8;
                    v138 = v121[1] * v132[4];
                    *((_BYTE *)v134 + 4) = (unsigned __int16)(v138 + (v138 >> 8) + 1) >> 8;
                    v139 = v121[1] * v132[5];
                    *((_BYTE *)v134 + 5) = (unsigned __int16)(v139 + (v139 >> 8) + 1) >> 8;
                    v140 = v121[2] * v132[6];
                    *((_BYTE *)v134 + 6) = (unsigned __int16)(v140 + (v140 >> 8) + 1) >> 8;
                    v141 = v121[2] * v132[7];
                    *((_BYTE *)v134 + 7) = (unsigned __int16)(v141 + (v141 >> 8) + 1) >> 8;
                    v142 = v121[2] * v132[8];
                    *((_BYTE *)v134 + 8) = (unsigned __int16)(v142 + (v142 >> 8) + 1) >> 8;
                    v143 = v121[3] * v132[9];
                    *((_BYTE *)v134 + 9) = (unsigned __int16)(v143 + (v143 >> 8) + 1) >> 8;
                    *((_BYTE *)v134 + 10) = (unsigned __int16)(v121[3] * v132[10]
                                                             + ((v121[3] * v132[10]) >> 8)
                                                             + 1) >> 8;
                    v144 = v121[3] * v132[11]
                         + ((v121[3] * v132[11]) >> 8)
                         + 1;
                  }
                  else
                  {
                    *(_BYTE *)v134 = (unsigned __int16)(inverted_8bit_alpha[*v121] * v133) >> 8;
                    *((_BYTE *)v134 + 1) = (unsigned __int16)(inverted_8bit_alpha[*v121] * v132[1]) >> 8;
                    *((_BYTE *)v134 + 2) = (unsigned __int16)(inverted_8bit_alpha[*v121] * v132[2]) >> 8;
                    *((_BYTE *)v134 + 3) = (unsigned __int16)(inverted_8bit_alpha[v121[1]] * v132[3]) >> 8;
                    *((_BYTE *)v134 + 4) = (unsigned __int16)(inverted_8bit_alpha[v121[1]] * v132[4]) >> 8;
                    *((_BYTE *)v134 + 5) = (unsigned __int16)(inverted_8bit_alpha[v121[1]] * v132[5]) >> 8;
                    *((_BYTE *)v134 + 6) = (unsigned __int16)(inverted_8bit_alpha[v121[2]] * v132[6]) >> 8;
                    *((_BYTE *)v134 + 7) = (unsigned __int16)(inverted_8bit_alpha[v121[2]] * v132[7]) >> 8;
                    *((_BYTE *)v134 + 8) = (unsigned __int16)(inverted_8bit_alpha[v121[2]] * v132[8]) >> 8;
                    *((_BYTE *)v134 + 9) = (unsigned __int16)(inverted_8bit_alpha[v121[3]] * v132[9]) >> 8;
                    *((_BYTE *)v134 + 10) = (unsigned __int16)(inverted_8bit_alpha[v121[3]] * v132[10]) >> 8;
                    LOWORD(v144) = inverted_8bit_alpha[v121[3]] * v132[11];
                  }
                  *((_BYTE *)v134 + 11) = BYTE1(v144);
                }
                else
                {
                  v131[2] = 0;
                  *(_QWORD *)v131 = 0;
                }
                v127 = v130 - 4;
                v121 += 4;
                v129 += 12;
              }
              while (v130 > 7);
              v123 = (unsigned int *)((char *)v123 + v129);
              v122 += v129;
            }
          }
          else
          {
            v128 = v124;
            if (v126)
            {
              v146 = 0;
              v147 = a1 + 4;
              do
              {
                if (*(_DWORD *)&v121[v146] == -1)
                {
                  v123[v146 / 4] = *(_DWORD *)&v122[v146];
                }
                else if (*(_DWORD *)&v121[v146])
                {
                  v148 = &v122[v146];
                  v149 = v122[v146];
                  v150 = (unsigned __int8 *)&v121[v146];
                  v151 = &v123[v146 / 4];
                  if ((_DWORD)v18 == 1)
                  {
                    *(_BYTE *)v151 = (unsigned __int16)(v121[v146] * (_WORD)v149
                                                      + ((v121[v146] * v149) >> 8)
                                                      + 1) >> 8;
                    v152 = v150[1] * v148[1];
                    *((_BYTE *)v151 + 1) = (unsigned __int16)(v152 + (v152 >> 8) + 1) >> 8;
                    *((_BYTE *)v151 + 2) = (unsigned __int16)(v150[2] * v148[2]
                                                            + ((v150[2] * v148[2]) >> 8)
                                                            + 1) >> 8;
                    v153 = v150[3] * v148[3] + ((v150[3] * v148[3]) >> 8) + 1;
                  }
                  else
                  {
                    *(_BYTE *)v151 = (unsigned __int16)(inverted_8bit_alpha[v121[v146]] * v149) >> 8;
                    *((_BYTE *)v151 + 1) = (unsigned __int16)(inverted_8bit_alpha[v150[1]] * v148[1]) >> 8;
                    *((_BYTE *)v151 + 2) = (unsigned __int16)(inverted_8bit_alpha[v150[2]] * v148[2]) >> 8;
                    LOWORD(v153) = inverted_8bit_alpha[v150[3]] * v148[3];
                  }
                  *((_BYTE *)v151 + 3) = BYTE1(v153);
                }
                else
                {
                  v123[v146 / 4] = 0;
                }
                v147 -= 4;
                v146 += 4;
              }
              while (v147 > 7);
              v127 = a1 - v146;
              v122 += v146;
              v123 = (unsigned int *)((char *)v123 + v146);
              v121 += v146;
            }
            else
            {
              v127 = a1;
            }
          }
          if (v127 >= 1)
          {
            do
            {
              v154 = *v121;
              if ((_DWORD)v18 == 1)
              {
                if ((int)v13 >= 1)
                {
                  v155 = 0;
                  do
                  {
                    *((_BYTE *)v123 + v155) = (unsigned __int16)(v122[v155] * (_WORD)v154
                                                               + ((v122[v155] * v154) >> 8)
                                                               + 1) >> 8;
                    ++v155;
                  }
                  while (v13 != v155);
                }
              }
              else if ((int)v13 >= 1)
              {
                v156 = 0;
                v157 = inverted_8bit_alpha[v154];
                do
                {
                  *((_BYTE *)v123 + v156) = (unsigned __int16)(v122[v156] * v157) >> 8;
                  ++v156;
                }
                while (v13 != v156);
              }
              v122 += (int)v13;
              v123 = (unsigned int *)((char *)v123 + (int)v13);
              ++v121;
              _VF = __OFSUB__(v127--, 1);
            }
            while (!((v127 < 0) ^ _VF | (v127 == 0)));
          }
          v124 = v128 - 1;
          v122 += v360 - v368;
          v121 += v364 - a1;
          v123 = (unsigned int *)((char *)v123 + v356 - v368);
        }
        while (v128 > 1);
      }
      else
      {
        CGBlt_copyBytes(v368, v373, (char *)*a5, (char *)*a8, *a6, *a9);
      }
      return;
    case 2:
      if (v19 != (_DWORD)v16)
      {
        CGSConvertAlphaWordInterleved(v18, a1, a2, a3, (unsigned __int16 *)*a5, a5[1], *a6, a6[1], v16, (unsigned __int16 *)*a8, a8[1], *a9, a9[1], v19);
        return;
      }
      if ((_DWORD)v16)
      {
        v35 = *a5;
        v36 = a5[1];
        v37 = *a6;
        if (*a5 == v36)
        {
          v38 = a6[1];
          v39 = (unsigned int *)*a8;
          if (v37 == v38)
          {
            if (v39 == (unsigned int *)a8[1] && *a9 == a9[1])
            {
              CGSConvertAlphaWordMeshed(v18, a1, a2, a3, (uint64_t)v35, v37, (uint64_t)v39, *a9, v16);
              return;
            }
            v38 = *a6;
          }
        }
        else
        {
          v38 = a6[1];
          v39 = (unsigned int *)*a8;
        }
        CGSConvertAlphaWordInterleved(v18, a1, a2, a3, (unsigned __int16 *)v35, v36, v37, v38, v16, (unsigned __int16 *)v39, a8[1], *a9, a9[1], v16);
        return;
      }
      v191 = *a6 - 2 * (int)a3 * a1;
      v192 = a6[1] - 2 * a1;
      v193 = *a9 - 2 * (int)a3 * a1;
      v194 = a9[1] - 2 * a1;
      v195 = *a5;
      v196 = a5[1];
      v198 = (unsigned int *)*a8;
      v197 = a8[1];
      if ((_DWORD)a3 != 3)
      {
        v199 = (a3 - 1);
        if ((_DWORD)a3 == 1)
        {
          while (1)
          {
            if (a1 < 4)
              goto LABEL_272;
            v200 = 0;
            v201 = (a1 >> 2) + 1;
            do
            {
              v202 = *(_QWORD *)&v196[v200];
              *(_QWORD *)&v197[v200] = v202;
              if (!(_DWORD)v18 || v202 == 0xFFFFFFFF)
              {
                *(_QWORD *)&v198[v200 / 4] = *(_QWORD *)&v195[v200];
                goto LABEL_270;
              }
              if (!v202)
              {
                *(_QWORD *)&v198[v200 / 4] = 0;
                goto LABEL_270;
              }
              LOWORD(v203) = v202;
              if ((int)v18 < 1)
              {
                if ((_WORD)v202)
                {
                  if ((unsigned __int16)v202 == 0xFFFF)
                    LOWORD(v203) = *(_WORD *)&v195[v200];
                  else
                    v203 = (0xFFFFFFFF / (unsigned __int16)v202 * *(unsigned __int16 *)&v195[v200]) >> 16;
                }
                LOWORD(v198[v200 / 4]) = v203;
                if (WORD1(v202) == 0xFFFF)
                {
                  LOWORD(v209) = *(_WORD *)&v195[v200 + 2];
                }
                else if (v202 >= 0x10000)
                {
                  v209 = (0xFFFFFFFF / WORD1(v202) * *(unsigned __int16 *)&v195[v200 + 2]) >> 16;
                }
                else
                {
                  LOWORD(v209) = 0;
                }
                HIWORD(v198[v200 / 4]) = v209;
                if (WORD2(v202))
                {
                  if (WORD2(v202) == 0xFFFF)
                    LOWORD(v210) = *(_WORD *)&v195[v200 + 4];
                  else
                    LODWORD(v210) = (0xFFFFFFFF / WORD2(v202) * *(unsigned __int16 *)&v195[v200 + 4]) >> 16;
                }
                else
                {
                  v210 = HIDWORD(v202);
                }
                LOWORD(v198[v200 / 4 + 1]) = v210;
                v211 = HIWORD(v202);
                if (!(_DWORD)v211)
                {
LABEL_266:
                  HIWORD(v198[v200 / 4 + 1]) = 0;
                  goto LABEL_270;
                }
                if ((_DWORD)v211 != 0xFFFF)
                {
                  v208 = 0xFFFFFFFF / v211 * *(unsigned __int16 *)&v195[v200 + 6];
                  goto LABEL_268;
                }
              }
              else
              {
                if ((_WORD)v202)
                {
                  if ((unsigned __int16)v202 == 0xFFFF)
                    LOWORD(v203) = *(_WORD *)&v195[v200];
                  else
                    v203 = ((unsigned __int16)v202 * *(unsigned __int16 *)&v195[v200]
                          + (((unsigned __int16)v202 * *(unsigned __int16 *)&v195[v200]) >> 16)
                          + 1) >> 16;
                }
                LOWORD(v198[v200 / 4]) = v203;
                if (WORD1(v202) == 0xFFFF)
                {
                  LOWORD(v204) = *(_WORD *)&v195[v200 + 2];
                }
                else if (v202 >= 0x10000)
                {
                  v205 = WORD1(v202) * *(unsigned __int16 *)&v195[v200 + 2];
                  v204 = (v205 + HIWORD(v205) + 1) >> 16;
                }
                else
                {
                  LOWORD(v204) = 0;
                }
                HIWORD(v198[v200 / 4]) = v204;
                if (WORD2(v202))
                {
                  if (WORD2(v202) == 0xFFFF)
                    LOWORD(v206) = *(_WORD *)&v195[v200 + 4];
                  else
                    LODWORD(v206) = (WORD2(v202) * *(unsigned __int16 *)&v195[v200 + 4]
                                   + ((WORD2(v202) * *(unsigned __int16 *)&v195[v200 + 4]) >> 16)
                                   + 1) >> 16;
                }
                else
                {
                  v206 = HIDWORD(v202);
                }
                LOWORD(v198[v200 / 4 + 1]) = v206;
                v207 = HIWORD(v202);
                if (!(_DWORD)v207)
                  goto LABEL_266;
                if ((_DWORD)v207 != 0xFFFF)
                {
                  v208 = *(unsigned __int16 *)&v195[v200 + 6] * (_DWORD)v207
                       + ((*(unsigned __int16 *)&v195[v200 + 6] * v207) >> 16)
                       + 1;
LABEL_268:
                  v212 = HIWORD(v208);
                  goto LABEL_269;
                }
              }
              LOWORD(v212) = *(_WORD *)&v195[v200 + 6];
LABEL_269:
              HIWORD(v198[v200 / 4 + 1]) = v212;
LABEL_270:
              --v201;
              v200 += 8;
            }
            while (v201 > 1);
            v197 += v200;
            v195 += v200;
            v196 += v200;
            v198 = (unsigned int *)((char *)v198 + v200);
LABEL_272:
            if ((a1 & 3) != 0)
            {
              v213 = (a1 & 3) + 1;
              do
              {
                v215 = *(unsigned __int16 *)v196;
                v196 += 2;
                v214 = v215;
                *(_WORD *)v197 = v215;
                v197 += 2;
                if (v215)
                {
                  if (v214 == 0xFFFF || !(_DWORD)v18)
                  {
                    LOWORD(v214) = *(_WORD *)v195;
                  }
                  else
                  {
                    if ((int)v18 < 1)
                      v216 = 0xFFFFFFFF / v214 * *(unsigned __int16 *)v195;
                    else
                      v216 = *(unsigned __int16 *)v195 * v214 + ((*(unsigned __int16 *)v195 * v214) >> 16) + 1;
                    v214 = HIWORD(v216);
                  }
                }
                *(_WORD *)v198 = v214;
                v198 = (unsigned int *)((char *)v198 + 2);
                v195 += 2;
                --v213;
              }
              while (v213 > 1);
            }
            v195 += v191;
            v196 += v192;
            v198 = (unsigned int *)((char *)v198 + v193);
            v197 += v194;
            if (!--v373)
              return;
          }
        }
        v325 = (int)v199;
        v326 = (int)a3;
        v359 = *a6 - 2 * (int)a3 * a1;
        v363 = 2 * a3;
        v327 = 2 * (int)a3;
        v367 = a3 - 2;
        v352 = *a9 - 2 * (int)a3 * a1;
        v355 = v192;
        v349 = a9[1] - 2 * a1;
        while (1)
        {
          v328 = a1;
          if (a1 >= 1)
            break;
LABEL_494:
          v195 += v359;
          v196 += v355;
          v198 = (unsigned int *)((char *)v198 + v352);
          v197 += v349;
          v228 = v373-- <= 1;
          if (v228)
            return;
        }
        while (1)
        {
          v330 = *(unsigned __int16 *)v196;
          v196 += 2;
          v329 = v330;
          *(_WORD *)v197 = v330;
          v197 += 2;
          if (v330 == 0xFFFF)
          {
            v336 = *(_WORD *)&v195[2 * v325];
            if ((int)v13 < 2)
            {
              v339 = *(_WORD *)&v195[2 * v325];
            }
            else
            {
              v337 = v367;
              v338 = v199;
              do
              {
                v339 = *(_WORD *)&v195[2 * v337];
                *((_WORD *)v198 + v338) = v336;
                --v337;
                v336 = v339;
                v228 = v338-- <= 1;
              }
              while (!v228);
            }
          }
          else
          {
            if (!v329)
            {
              if ((int)v13 >= 1)
              {
                v331 = v18;
                v332 = v199;
                v333 = v13;
                v334 = v325;
                v371 = v197;
                v335 = v326;
                bzero(v198, v363);
                v326 = v335;
                v197 = v371;
                v325 = v334;
                v13 = v333;
                v199 = v332;
                v18 = v331;
              }
              goto LABEL_492;
            }
            v340 = *(unsigned __int16 *)&v195[2 * v325];
            if ((_DWORD)v18)
            {
              if ((int)v18 < 1)
              {
                v346 = 0xFFFFFFFF / v329;
                if ((int)v13 > 1)
                {
                  v347 = v199;
                  do
                  {
                    v348 = v340 * v346;
                    v228 = v347 <= 1;
                    v340 = *(unsigned __int16 *)&v195[2 * (v347 - 1)];
                    *((_WORD *)v198 + v347--) = HIWORD(v348);
                  }
                  while (!v228);
                }
                v343 = v340 * v346;
              }
              else
              {
                if ((int)v13 >= 2)
                {
                  v341 = v199;
                  do
                  {
                    v342 = v340 * v329;
                    v228 = v341 <= 1;
                    v340 = *(unsigned __int16 *)&v195[2 * (v341 - 1)];
                    *((_WORD *)v198 + v341--) = (v342 + HIWORD(v342) + 1) >> 16;
                  }
                  while (!v228);
                }
                v343 = v340 * v329 + ((v340 * v329) >> 16) + 1;
              }
              *(_WORD *)v198 = HIWORD(v343);
              goto LABEL_492;
            }
            if ((int)v13 < 2)
            {
              v339 = *(_WORD *)&v195[2 * v325];
            }
            else
            {
              v344 = v367;
              v345 = v199;
              do
              {
                v339 = *(_WORD *)&v195[2 * v344];
                *((_WORD *)v198 + v345) = v340;
                --v344;
                LOWORD(v340) = v339;
                v228 = v345-- <= 1;
              }
              while (!v228);
            }
          }
          *(_WORD *)v198 = v339;
LABEL_492:
          v195 += 2 * v326;
          v198 = (unsigned int *)((char *)v198 + v327);
          v228 = v328-- <= 1;
          if (v228)
            goto LABEL_494;
        }
      }
      v274 = a1 & 3;
      v275 = (a1 >> 2) + 1;
      while (a1 < 4)
      {
LABEL_445:
        if (v274)
        {
          v315 = 0;
          v316 = v274 + 1;
          do
          {
            v318 = *(unsigned __int16 *)v196;
            v196 += 2;
            v317 = v318;
            *(_WORD *)v197 = v318;
            v197 += 2;
            if (v318)
            {
              if (v317 == 0xFFFF || !(_DWORD)v18)
              {
                *(unsigned int *)((char *)v198 + v315) = *(_DWORD *)&v195[v315];
                LOWORD(v317) = *(_WORD *)&v195[v315 + 4];
              }
              else
              {
                if ((int)v18 < 1)
                {
                  v322 = 0xFFFFFFFF / v317;
                  v323 = v322 * *(unsigned __int16 *)&v195[v315 + 2];
                  v324 = (_WORD *)((char *)v198 + v315);
                  *v324 = (v322 * *(unsigned __int16 *)&v195[v315]) >> 16;
                  v324[1] = HIWORD(v323);
                  v321 = v322 * *(unsigned __int16 *)&v195[v315 + 4];
                }
                else
                {
                  v319 = *(unsigned __int16 *)&v195[v315 + 2] * v317;
                  v320 = (_WORD *)((char *)v198 + v315);
                  *v320 = (*(unsigned __int16 *)&v195[v315] * v317
                         + ((*(unsigned __int16 *)&v195[v315] * v317) >> 16)
                         + 1) >> 16;
                  v320[1] = (v319 + HIWORD(v319) + 1) >> 16;
                  v321 = *(unsigned __int16 *)&v195[v315 + 4] * v317
                       + ((*(unsigned __int16 *)&v195[v315 + 4] * v317) >> 16)
                       + 1;
                }
                v317 = HIWORD(v321);
              }
            }
            else
            {
              *(unsigned int *)((char *)v198 + v315) = 0;
            }
            *(_WORD *)((char *)v198 + v315 + 4) = v317;
            --v316;
            v315 += 6;
          }
          while (v316 > 1);
          v195 += v315;
          v198 = (unsigned int *)((char *)v198 + v315);
        }
        v195 += v191;
        v196 += v192;
        v198 = (unsigned int *)((char *)v198 + v193);
        v197 += v194;
        if (!--v373)
          return;
      }
      v276 = 0;
      v277 = v275;
      while (1)
      {
        v278 = &v198[v276 / 4];
        v280 = *(_QWORD *)v196;
        v196 += 8;
        v279 = v280;
        *(_QWORD *)v197 = v280;
        v197 += 8;
        if (!(_DWORD)v18 || v279 == 0xFFFFFFFF)
        {
          v282 = *(_QWORD *)&v195[v276 + 16];
          *(_OWORD *)v278 = *(_OWORD *)&v195[v276];
          *((_QWORD *)v278 + 2) = v282;
        }
        else if (v279)
        {
          if ((int)v18 < 1)
          {
            LOWORD(v283) = v279;
            if ((_WORD)v279)
            {
              if ((unsigned __int16)v279 == 0xFFFF)
              {
                *v278 = *(_DWORD *)&v195[v276];
                LOWORD(v283) = *(_WORD *)&v195[v276 + 4];
              }
              else
              {
                v301 = 0xFFFFFFFF / (unsigned __int16)v279;
                v302 = v301 * *(unsigned __int16 *)&v195[v276 + 2];
                v303 = &v198[v276 / 4];
                *(_WORD *)v303 = (v301 * *(unsigned __int16 *)&v195[v276]) >> 16;
                *((_WORD *)v303 + 1) = HIWORD(v302);
                v283 = (v301 * *(unsigned __int16 *)&v195[v276 + 4]) >> 16;
              }
            }
            else
            {
              *v278 = 0;
            }
            LOWORD(v198[v276 / 4 + 1]) = v283;
            v304 = WORD1(v279);
            if (WORD1(v279) == 0xFFFF)
            {
              *(unsigned int *)((char *)&v198[v276 / 4 + 1] + 2) = *(_DWORD *)&v195[v276 + 6];
              LOWORD(v305) = *(_WORD *)&v195[v276 + 10];
            }
            else if (v304)
            {
              v306 = 0xFFFFFFFF / v304 * *(unsigned __int16 *)&v195[v276 + 8];
              v307 = &v198[v276 / 4];
              *((_WORD *)v307 + 3) = (0xFFFFFFFF / v304 * *(unsigned __int16 *)&v195[v276 + 6]) >> 16;
              *((_WORD *)v307 + 4) = HIWORD(v306);
              v305 = (0xFFFFFFFF / v304 * *(unsigned __int16 *)&v195[v276 + 10]) >> 16;
            }
            else
            {
              LOWORD(v305) = 0;
              *(unsigned int *)((char *)&v198[v276 / 4 + 1] + 2) = 0;
            }
            HIWORD(v198[v276 / 4 + 2]) = v305;
            LOWORD(v305) = WORD2(v279);
            if (WORD2(v279))
            {
              if (WORD2(v279) == 0xFFFF)
              {
                v198[v276 / 4 + 3] = *(_DWORD *)&v195[v276 + 12];
                LOWORD(v305) = *(_WORD *)&v195[v276 + 16];
              }
              else
              {
                v308 = 0xFFFFFFFF / WORD2(v279);
                v309 = v308 * *(unsigned __int16 *)&v195[v276 + 14];
                v310 = &v198[v276 / 4];
                *((_WORD *)v310 + 6) = (v308 * *(unsigned __int16 *)&v195[v276 + 12]) >> 16;
                *((_WORD *)v310 + 7) = HIWORD(v309);
                v305 = (v308 * *(unsigned __int16 *)&v195[v276 + 16]) >> 16;
              }
            }
            else
            {
              v198[v276 / 4 + 3] = 0;
            }
            v295 = &v198[v276 / 4];
            LOWORD(v198[v276 / 4 + 4]) = v305;
            v311 = HIWORD(v279);
            if (!(_DWORD)v311)
            {
LABEL_440:
              *(unsigned int *)((char *)v295 + 18) = 0;
              *((_WORD *)v295 + 11) = 0;
              goto LABEL_443;
            }
            if ((_DWORD)v311 != 0xFFFF)
            {
              v313 = 0xFFFFFFFF / v311;
              v314 = v313 * *(unsigned __int16 *)&v195[v276 + 20];
              v299 = &v198[v276 / 4];
              *((_WORD *)v299 + 9) = (v313 * *(unsigned __int16 *)&v195[v276 + 18]) >> 16;
              *((_WORD *)v299 + 10) = HIWORD(v314);
              v300 = v313 * *(unsigned __int16 *)&v195[v276 + 22];
              goto LABEL_442;
            }
          }
          else
          {
            LOWORD(v281) = v279;
            if ((_WORD)v279)
            {
              if ((unsigned __int16)v279 == 0xFFFF)
              {
                *v278 = *(_DWORD *)&v195[v276];
                LOWORD(v281) = *(_WORD *)&v195[v276 + 4];
              }
              else
              {
                v284 = (unsigned __int16)v279 * *(unsigned __int16 *)&v195[v276];
                v285 = (unsigned __int16)v279 * *(unsigned __int16 *)&v195[v276 + 2];
                v286 = &v198[v276 / 4];
                *(_WORD *)v286 = (v284 + HIWORD(v284) + 1) >> 16;
                *((_WORD *)v286 + 1) = (v285 + HIWORD(v285) + 1) >> 16;
                v287 = (unsigned __int16)v279 * *(unsigned __int16 *)&v195[v276 + 4];
                v281 = (v287 + HIWORD(v287) + 1) >> 16;
              }
            }
            else
            {
              *v278 = 0;
            }
            LOWORD(v198[v276 / 4 + 1]) = v281;
            v288 = WORD1(v279);
            if (WORD1(v279) == 0xFFFF)
            {
              *(unsigned int *)((char *)&v198[v276 / 4 + 1] + 2) = *(_DWORD *)&v195[v276 + 6];
              LOWORD(v288) = *(_WORD *)&v195[v276 + 10];
            }
            else if (v288)
            {
              v289 = v288 * *(unsigned __int16 *)&v195[v276 + 6];
              v290 = v288 * *(unsigned __int16 *)&v195[v276 + 8];
              v291 = &v198[v276 / 4];
              *((_WORD *)v291 + 3) = (v289 + HIWORD(v289) + 1) >> 16;
              *((_WORD *)v291 + 4) = (v290 + HIWORD(v290) + 1) >> 16;
              v288 = (v288 * *(unsigned __int16 *)&v195[v276 + 10]
                    + ((v288 * *(unsigned __int16 *)&v195[v276 + 10]) >> 16)
                    + 1) >> 16;
            }
            else
            {
              *(unsigned int *)((char *)&v198[v276 / 4 + 1] + 2) = 0;
            }
            HIWORD(v198[v276 / 4 + 2]) = v288;
            LOWORD(v288) = WORD2(v279);
            if (WORD2(v279))
            {
              if (WORD2(v279) == 0xFFFF)
              {
                v198[v276 / 4 + 3] = *(_DWORD *)&v195[v276 + 12];
                LOWORD(v288) = *(_WORD *)&v195[v276 + 16];
              }
              else
              {
                v292 = WORD2(v279) * *(unsigned __int16 *)&v195[v276 + 12];
                v293 = WORD2(v279) * *(unsigned __int16 *)&v195[v276 + 14];
                v294 = &v198[v276 / 4];
                *((_WORD *)v294 + 6) = (v292 + HIWORD(v292) + 1) >> 16;
                *((_WORD *)v294 + 7) = (v293 + HIWORD(v293) + 1) >> 16;
                v288 = (WORD2(v279) * *(unsigned __int16 *)&v195[v276 + 16]
                      + ((WORD2(v279) * *(unsigned __int16 *)&v195[v276 + 16]) >> 16)
                      + 1) >> 16;
              }
            }
            else
            {
              v198[v276 / 4 + 3] = 0;
            }
            v295 = &v198[v276 / 4];
            LOWORD(v198[v276 / 4 + 4]) = v288;
            v296 = HIWORD(v279);
            if (!(_DWORD)v296)
              goto LABEL_440;
            if ((_DWORD)v296 != 0xFFFF)
            {
              v297 = *(unsigned __int16 *)&v195[v276 + 18] * (_DWORD)v296;
              v298 = *(unsigned __int16 *)&v195[v276 + 20] * (_DWORD)v296;
              v299 = &v198[v276 / 4];
              *((_WORD *)v299 + 9) = (v297 + HIWORD(v297) + 1) >> 16;
              *((_WORD *)v299 + 10) = (v298 + HIWORD(v298) + 1) >> 16;
              v300 = *(unsigned __int16 *)&v195[v276 + 22] * (_DWORD)v296
                   + ((*(unsigned __int16 *)&v195[v276 + 22] * v296) >> 16)
                   + 1;
LABEL_442:
              *((_WORD *)v299 + 11) = HIWORD(v300);
              goto LABEL_443;
            }
          }
          v312 = &v198[v276 / 4];
          *(unsigned int *)((char *)v312 + 18) = *(_DWORD *)&v195[v276 + 18];
          *((_WORD *)v312 + 11) = *(_WORD *)&v195[v276 + 22];
        }
        else
        {
          *(_QWORD *)v278 = 0;
          *((_QWORD *)v278 + 1) = 0;
          *((_QWORD *)v278 + 2) = 0;
        }
LABEL_443:
        --v277;
        v276 += 24;
        if (v277 <= 1)
        {
          v198 = (unsigned int *)((char *)v198 + v276);
          v195 += v276;
          goto LABEL_445;
        }
      }
    case 4:
      if (v19 != (_DWORD)v16)
      {
        CGSConvertAlphaFloatInterleved(v18, a1, a2, a3, (uint64_t)*a5, (float *)a5[1], *a6, a6[1], v16, (float *)*a8, (float *)a8[1], *a9, a9[1], v19);
        return;
      }
      if ((_DWORD)v16)
      {
        v25 = *a5;
        v26 = (float *)a5[1];
        v27 = *a6;
        if (*a5 == (unsigned __int8 *)v26)
        {
          v28 = a6[1];
          v29 = (unsigned int *)*a8;
          if (v27 == v28)
          {
            if (v29 == (unsigned int *)a8[1] && *a9 == a9[1])
            {
              CGSConvertAlphaFloatMeshed(v18, a1, a2, a3, (uint64_t)v25, v27, (uint64_t)v29, *a9, v16);
              return;
            }
            v28 = *a6;
          }
        }
        else
        {
          v28 = a6[1];
          v29 = (unsigned int *)*a8;
        }
        CGSConvertAlphaFloatInterleved(v18, a1, a2, a3, (uint64_t)v25, v26, v27, v28, v16, (float *)v29, (float *)a8[1], *a9, a9[1], v16);
        return;
      }
      v159 = *a6 - 4 * (int)a3 * a1;
      v160 = a6[1] - 4 * a1;
      v161 = *a9 - 4 * (int)a3 * a1;
      v162 = a9[1] - 4 * a1;
      v163 = (float32x2_t *)*a5;
      v164 = (float *)a5[1];
      v165 = (unsigned int *)*a8;
      v166 = (float *)a8[1];
      if ((_DWORD)a3 != 3)
      {
        if ((_DWORD)a3 != 1)
        {
          v361 = *a6 - 4 * (int)a3 * a1;
          v365 = (a3 - 1);
          v369 = (int)a3 - 1;
          v353 = *a9 - 4 * (int)a3 * a1;
          v357 = a6[1] - 4 * a1;
          v350 = a9[1] - 4 * a1;
          do
          {
            v222 = a1;
            if (a1 >= 1)
            {
              do
              {
                v223 = *v164++;
                v224 = v223;
                *v166++ = v223;
                if (v223 == 0.0)
                {
                  if ((int)v13 >= 1)
                    bzero(v165, 4 * v13);
                }
                else
                {
                  v225 = v163->f32[v369];
                  if (!(_DWORD)v18 || v224 == 1.0)
                  {
                    if ((int)v13 < 2)
                    {
                      v230 = v163->f32[v369];
                    }
                    else
                    {
                      v229 = v365;
                      do
                      {
                        v228 = v229 <= 1;
                        v230 = v163->f32[(v229 - 1)];
                        *(float *)&v165[v229--] = v225;
                        v225 = v230;
                      }
                      while (!v228);
                    }
                    *(float *)v165 = v230;
                  }
                  else
                  {
                    if ((int)v18 < 1)
                    {
                      v224 = 1.0 / v224;
                      if ((int)v13 > 1)
                      {
                        v231 = v365;
                        do
                        {
                          *(float *)&v232 = v224 * v225;
                          v228 = v231 <= 1;
                          v225 = v163->f32[(v231 - 1)];
                          v165[v231--] = v232;
                        }
                        while (!v228);
                      }
                    }
                    else if ((int)v13 >= 2)
                    {
                      v226 = v365;
                      do
                      {
                        *(float *)&v227 = v224 * v225;
                        v228 = v226 <= 1;
                        v225 = v163->f32[(v226 - 1)];
                        v165[v226--] = v227;
                      }
                      while (!v228);
                    }
                    *(float *)v165 = v224 * v225;
                  }
                }
                v163 = (float32x2_t *)((char *)v163 + 4 * (int)v13);
                v165 += (int)v13;
                v228 = v222-- <= 1;
              }
              while (!v228);
            }
            v163 = (float32x2_t *)((char *)v163 + v361);
            v164 = (float *)((char *)v164 + v357);
            v165 = (unsigned int *)((char *)v165 + v353);
            v166 = (float *)((char *)v166 + v350);
            v228 = v373-- <= 1;
          }
          while (!v228);
          return;
        }
        while (a1 < 1)
        {
          v168 = v373;
LABEL_204:
          v163 = (float32x2_t *)((char *)v163 + v159);
          v164 = (float *)((char *)v164 + v160);
          v165 = (unsigned int *)((char *)v165 + v161);
          v166 = (float *)((char *)v166 + v162);
          v373 = v168 - 1;
          if (v168 == 1)
            return;
        }
        v167 = a1 + 1;
        v168 = v373;
        while (1)
        {
          v169 = *v164++;
          v170 = v169;
          *v166++ = v169;
          if (v169 != 1.0)
          {
            v171 = 0.0;
            if (v170 == 0.0)
              goto LABEL_201;
            if ((_DWORD)v18)
            {
              if ((int)v18 < 1)
                v170 = 1.0 / v170;
              v171 = v170 * v163->f32[0];
              goto LABEL_201;
            }
          }
          v171 = v163->f32[0];
LABEL_201:
          *(float *)v165++ = v171;
          v163 = (float32x2_t *)((char *)v163 + 4);
          if (--v167 <= 1)
            goto LABEL_204;
        }
      }
      while (a1 < 1)
      {
        v218 = v373;
LABEL_316:
        v163 = (float32x2_t *)((char *)v163 + v159);
        v164 = (float *)((char *)v164 + v160);
        v165 = (unsigned int *)((char *)v165 + v161);
        v166 = (float *)((char *)v166 + v162);
        v373 = v218 - 1;
        if (v218 == 1)
          return;
      }
      v217 = a1 + 1;
      v218 = v373;
      while (1)
      {
        v219 = *v164++;
        v220 = v219;
        *v166++ = v219;
        if (v219 != 1.0)
        {
          if (v220 == 0.0)
          {
            *(_QWORD *)v165 = 0;
            v221 = 0.0;
            goto LABEL_313;
          }
          if ((_DWORD)v18)
          {
            if ((int)v18 < 1)
              v220 = 1.0 / v220;
            *(float32x2_t *)v165 = vmul_n_f32(*v163, v220);
            v221 = v220 * v163[1].f32[0];
            goto LABEL_313;
          }
        }
        *(float32x2_t *)v165 = *v163;
        v221 = v163[1].f32[0];
LABEL_313:
        *((float *)v165 + 2) = v221;
        v163 = (float32x2_t *)((char *)v163 + 12);
        v165 += 3;
        if (--v217 <= 1)
          goto LABEL_316;
      }
    case 5:
      if (v19 != (_DWORD)v16)
      {
        convert_alpha_float16_interleved(v18, a1, a2, a3, (__int16 *)*a5, (__int16 *)a5[1], *a6, a6[1], v16, (char *)*a8, a8[1], *a9, a9[1], v19);
        return;
      }
      if (!(_DWORD)v16)
      {
        v172 = *a6 - 2 * (int)a3 * a1;
        v173 = a6[1] - 2 * a1;
        v174 = *a9 - 2 * (int)a3 * a1;
        v175 = a9[1] - 2 * a1;
        v176 = *a5;
        v177 = a5[1];
        v178 = (unsigned int *)*a8;
        v179 = a8[1];
        if ((_DWORD)a3 != 3)
        {
          if ((_DWORD)a3 != 1)
          {
            v362 = *a6 - 2 * (int)a3 * a1;
            v366 = (a3 - 1);
            v370 = (int)a3 - 1;
            v354 = *a9 - 2 * (int)a3 * a1;
            v358 = a6[1] - 2 * a1;
            v351 = a9[1] - 2 * a1;
            do
            {
              v255 = a1;
              if (a1 >= 1)
              {
                do
                {
                  v256 = *(_WORD *)v177;
                  v177 += 2;
                  _H0 = v256;
                  __asm { FCVT            S1, H0 }
                  *(_WORD *)v179 = v256;
                  v179 += 2;
                  if (_S1 == 0.0)
                  {
                    if ((int)v13 >= 1)
                      bzero(v178, 2 * v13);
                  }
                  else
                  {
                    _H0 = *(_WORD *)&v176[2 * v370];
                    if (!(_DWORD)v18 || _S1 == 1.0)
                    {
                      if ((int)v13 < 2)
                      {
                        v267 = *(_WORD *)&v176[2 * v370];
                      }
                      else
                      {
                        v266 = v366;
                        do
                        {
                          v228 = v266 <= 1;
                          v267 = *(_WORD *)&v176[2 * (v266 - 1)];
                          *((_WORD *)v178 + v266--) = _H0;
                          _H0 = v267;
                        }
                        while (!v228);
                      }
                      *(_WORD *)v178 = v267;
                    }
                    else
                    {
                      __asm { FCVT            S0, H0 }
                      if ((int)v18 < 1)
                      {
                        v268 = 1.0 / _S1;
                        if ((int)v13 > 1)
                        {
                          v269 = v366;
                          do
                          {
                            _H2 = *(_WORD *)&v176[2 * (v269 - 1)];
                            _S3 = v268 * _S0;
                            __asm
                            {
                              FCVT            S0, H2
                              FCVT            H2, S3
                            }
                            *((_WORD *)v178 + v269--) = _H2;
                          }
                          while (!(_NF ^ _VF | _ZF));
                        }
                        _S0 = v268 * _S0;
                      }
                      else
                      {
                        if ((int)v13 >= 2)
                        {
                          v261 = v366;
                          do
                          {
                            _H2 = *(_WORD *)&v176[2 * (v261 - 1)];
                            _S3 = _S0 * _S1;
                            __asm
                            {
                              FCVT            S0, H2
                              FCVT            H2, S3
                            }
                            *((_WORD *)v178 + v261--) = _H2;
                          }
                          while (!(_NF ^ _VF | _ZF));
                        }
                        _S0 = _S0 * _S1;
                      }
                      __asm { FCVT            H0, S0 }
                      *(_WORD *)v178 = _H0;
                    }
                  }
                  v176 += 2 * (int)v13;
                  v178 = (unsigned int *)((char *)v178 + 2 * (int)v13);
                  v228 = v255-- <= 1;
                }
                while (!v228);
              }
              v176 += v362;
              v177 += v358;
              v178 = (unsigned int *)((char *)v178 + v354);
              v179 += v351;
              v228 = v373-- <= 1;
            }
            while (!v228);
            return;
          }
          while (a1 < 1)
          {
            v181 = v373;
LABEL_220:
            v176 += v172;
            v177 += v173;
            v178 = (unsigned int *)((char *)v178 + v174);
            v179 += v175;
            v373 = v181 - 1;
            if (v181 == 1)
              return;
          }
          v180 = a1 + 1;
          v181 = v373;
          while (1)
          {
            v182 = *(_WORD *)v177;
            v177 += 2;
            _H2 = v182;
            __asm { FCVT            S1, H2 }
            *(_WORD *)v179 = v182;
            v179 += 2;
            if (_S1 != 1.0)
            {
              _H2 = 0;
              if (_S1 == 0.0)
                goto LABEL_217;
              if ((_DWORD)v18)
              {
                if ((int)v18 < 1)
                  _S1 = 1.0 / _S1;
                _H2 = *(_WORD *)v176;
                __asm { FCVT            S2, H2 }
                _S1 = _S1 * _S2;
                __asm { FCVT            H2, S1 }
                goto LABEL_217;
              }
            }
            _H2 = *(_WORD *)v176;
LABEL_217:
            *(_WORD *)v178 = _H2;
            v178 = (unsigned int *)((char *)v178 + 2);
            v176 += 2;
            if (--v180 <= 1)
              goto LABEL_220;
          }
        }
        while (a1 < 1)
        {
          v234 = v373;
LABEL_362:
          v176 += v172;
          v177 += v173;
          v178 = (unsigned int *)((char *)v178 + v174);
          v179 += v175;
          v373 = v234 - 1;
          if (v234 == 1)
            return;
        }
        v233 = a1 + 1;
        v234 = v373;
        while (1)
        {
          v235 = *(_WORD *)v177;
          v177 += 2;
          _H2 = v235;
          __asm { FCVT            S1, H2 }
          *(_WORD *)v179 = v235;
          v179 += 2;
          if (_S1 != 1.0)
          {
            if (_S1 == 0.0)
            {
              *v178 = 0;
              _H1 = 0;
              goto LABEL_359;
            }
            if ((_DWORD)v18)
            {
              if ((int)v18 < 1)
              {
                _S1 = 1.0 / _S1;
                _H2 = *(_WORD *)v176;
                __asm { FCVT            S2, H2 }
                _H3 = *((_WORD *)v176 + 1);
                __asm { FCVT            S3, H3 }
                _S2 = _S1 * _S2;
                _S3 = _S1 * _S3;
                __asm { FCVT            H2, S2 }
                *(_WORD *)v178 = LOWORD(_S2);
                __asm { FCVT            H2, S3 }
              }
              else
              {
                _H2 = *(_WORD *)v176;
                _H3 = *((_WORD *)v176 + 1);
                __asm { FCVT            S2, H2 }
                _S2 = _S1 * _S2;
                __asm { FCVT            H2, S2 }
                *(_WORD *)v178 = LOWORD(_S2);
                __asm { FCVT            S2, H3 }
                _S2 = _S1 * _S2;
                __asm { FCVT            H2, S2 }
              }
              *((_WORD *)v178 + 1) = _H2;
              _H2 = *((_WORD *)v176 + 2);
              __asm { FCVT            S2, H2 }
              _S1 = _S1 * _S2;
              __asm { FCVT            H1, S1 }
              goto LABEL_359;
            }
          }
          *v178 = *(_DWORD *)v176;
          _H1 = *((_WORD *)v176 + 2);
LABEL_359:
          *((_WORD *)v178 + 2) = _H1;
          v176 += 6;
          v178 = (unsigned int *)((char *)v178 + 6);
          if (--v233 <= 1)
            goto LABEL_362;
        }
      }
      v30 = *a5;
      v31 = (__int16 *)a5[1];
      v32 = *a6;
      if (*a5 == (unsigned __int8 *)v31)
      {
        v33 = a6[1];
        v34 = (unsigned int *)*a8;
        if (v32 == v33)
        {
          if (v34 == (unsigned int *)a8[1] && *a9 == a9[1])
          {
            convert_alpha_float16_meshed(v18, a1, a2, a3, (uint64_t)v30, v32, (uint64_t)v34, *a9, v16);
            return;
          }
          v33 = *a6;
        }
      }
      else
      {
        v33 = a6[1];
        v34 = (unsigned int *)*a8;
      }
      convert_alpha_float16_interleved(v18, a1, a2, a3, (__int16 *)v30, v31, v32, v33, v16, (char *)v34, a8[1], *a9, a9[1], v16);
      return;
    default:
      _CGHandleAssert("img_alpha", 159, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGSImage.c", "0", "unhandled component type %d", (uint64_t)a6, a7, v16, a10);
  }
}

double CGGStateGetFontDilation(uint64_t a1)
{
  return *(double *)(*(_QWORD *)(a1 + 136) + 72);
}

_DWORD *W8_pattern(uint64_t a1, _DWORD *a2, unsigned int a3, int a4, float *a5, float a6)
{
  float *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int v15;
  int v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  BOOL v33;
  float v34;
  float v35;
  float v36;
  int v37;

  v9 = *(float **)(*(_QWORD *)a1 + 64);
  v10 = *v9;
  v11 = v9[1];
  v12 = v9[3];
  if (a2 && a3 > 7 || (a2 = malloc_type_malloc(0x38uLL, 0x705560E0uLL)) != 0)
  {
    v13 = v11;
    if (v11 >= a6)
    {
      v13 = a6;
      if (v10 > a6)
        v13 = v10;
    }
    v14 = v13 * v9[2];
    if (a5)
      v15 = a4;
    else
      v15 = 0;
    if (v15 == 4)
    {
      v25 = a5[4];
      v26 = *a5;
      v27 = v11;
      if (v25 <= v11)
      {
        v27 = a5[4];
        if (v25 < v10)
          v27 = v10;
      }
      v29 = a5[1];
      v28 = a5[2];
      v30 = v11;
      if (v26 <= v11)
      {
        v30 = *a5;
        if (v26 < v10)
          v30 = v10;
      }
      if (v29 < v10)
        v31 = v10;
      else
        v31 = a5[1];
      if (v29 > v11)
        v31 = v11;
      if (v28 < v10)
        v32 = v10;
      else
        v32 = a5[2];
      v33 = v28 <= v11;
      v34 = v11 - (float)(v9[4] * v30);
      if (v33)
        v35 = v32;
      else
        v35 = v11;
      v36 = (float)((float)(v34 - (float)(v9[5] * v31)) - (float)(v9[6] * v35)) - v27;
      if (v36 >= v10)
        v24 = v12 + (float)(v36 * v14);
      else
        v24 = v10;
    }
    else
    {
      if (v15 == 3)
      {
        v19 = a5[1];
        v20 = v11;
        if (*a5 <= v11)
        {
          v20 = *a5;
          if (*a5 < v10)
            v20 = v10;
        }
        v21 = a5[2];
        v22 = v11;
        if (v19 <= v11)
        {
          v22 = a5[1];
          if (v19 < v10)
            v22 = v10;
        }
        if (v21 < v10)
          v23 = v10;
        else
          v23 = a5[2];
        if (v21 > v11)
          v23 = v11;
        v18 = (float)((float)(v22 * v9[5]) + (float)(v9[4] * v20)) + (float)(v9[6] * v23);
      }
      else
      {
        v16 = 0;
        if (v15 != 1)
          goto LABEL_53;
        if (*a5 < v10)
          v17 = v10;
        else
          v17 = *a5;
        if (*a5 <= v11)
          v18 = v17;
        else
          v18 = v11;
      }
      v24 = v12 + (float)(v18 * v14);
    }
    v16 = (int)v24;
LABEL_53:
    v37 = (int)(float)(v12 + v14);
    *(_OWORD *)a2 = xmmword_185005020;
    a2[6] = 0;
    *((_QWORD *)a2 + 2) = 1;
    a2[12] = v16 | (v16 << 8) | ((v16 | (v16 << 8)) << 16);
    *((_QWORD *)a2 + 4) = a2 + 12;
    if (v37 > 254)
    {
      *((_QWORD *)a2 + 5) = 0;
    }
    else
    {
      a2[13] = v37 | (v37 << 8) | ((v37 | (v37 << 8)) << 16);
      *((_QWORD *)a2 + 5) = a2 + 13;
    }
  }
  return a2;
}

size_t CGBitmapContextGetBitsPerPixel(CGContextRef context)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (context && *((_DWORD *)context + 4) == 1129601108 && *((_DWORD *)context + 6) == 4)
    return *(_QWORD *)(*((_QWORD *)context + 4) + 72);
  handle_invalid_context((char)"CGBitmapContextGetBitsPerPixel", (uint64_t)context, v1, v2, v3, v4, v5, v6);
  return 0;
}

size_t CGBitmapContextGetBitsPerComponent(CGContextRef context)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (context && *((_DWORD *)context + 4) == 1129601108 && *((_DWORD *)context + 6) == 4)
    return *(_QWORD *)(*((_QWORD *)context + 4) + 80);
  handle_invalid_context((char)"CGBitmapContextGetBitsPerComponent", (uint64_t)context, v1, v2, v3, v4, v5, v6);
  return 0;
}

uint64_t CGStyleGetIdentifier(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 16);
  return result;
}

_QWORD *CGImageGetEPSRep(_QWORD *result)
{
  _QWORD *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1)
      dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_211);
    if (v2 == CGImageGetTypeID_image_type_id)
      return (_QWORD *)v1[24];
    else
      return 0;
  }
  return result;
}

uint64_t CGGStateGetInterpolationQuality(uint64_t a1)
{
  return *(char *)(*(_QWORD *)(a1 + 120) + 4);
}

CGRect CGPDFPageGetBoxRect(CGPDFPageRef page, CGPDFBox box)
{
  double v2;
  double v3;
  double box_rect;
  double v5;
  double *v6;
  char *v7;
  CGRect result;

  v2 = 0.0;
  v3 = INFINITY;
  box_rect = INFINITY;
  v5 = 0.0;
  if (page && box <= kCGPDFArtBox)
  {
    v6 = (double *)((char *)page + 32 * box);
    box_rect = v6[7];
    v3 = v6[8];
    v7 = (char *)(v6 + 7);
    if (box_rect == INFINITY || v3 == INFINITY)
    {
      box_rect = pdf_page_get_box_rect(*((_QWORD *)page + 5), box);
    }
    else
    {
      v2 = *((double *)v7 + 2);
      v5 = *((double *)v7 + 3);
    }
  }
  result.size.height = v5;
  result.size.width = v2;
  result.origin.y = v3;
  result.origin.x = box_rect;
  return result;
}

uint64_t CGPDFContentStreamCreate(uint64_t a1)
{
  uint64_t v3;
  int v4;
  const void *Property;
  void *v6;
  os_unfair_lock_s *v7;
  const void *v8;
  CGPDFArray *v10;
  CFIndex v11;
  size_t v12;
  void *v13;
  CGPDFObjectRef value;

  v13 = 0;
  value = 0;
  if (!CGPDFDictionaryGetObject(*(CGPDFDictionaryRef *)(a1 + 16), "Contents", &value) || value == 0)
    goto LABEL_6;
  v4 = *((_DWORD *)value + 2);
  if (v4 != 7)
  {
    if (v4 == 9)
    {
      v13 = (void *)*((_QWORD *)value + 4);
      v3 = pdf_content_stream_create(1);
      CFArrayAppendValue(*(CFMutableArrayRef *)(v3 + 24), v13);
      goto LABEL_10;
    }
    return 0;
  }
  v10 = (CGPDFArray *)*((_QWORD *)value + 4);
  if (!v10)
  {
LABEL_6:
    v3 = pdf_content_stream_create(0);
LABEL_10:
    Property = *(const void **)(a1 + 72);
    if (Property)
      Property = CGPropertiesGetProperty((uint64_t)Property, CFSTR("kCGPDFPageShouldRenderExtraContentStream"));
    if (Property != (const void *)*MEMORY[0x1E0C9AE40])
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 88));
      v6 = *(void **)(a1 + 40);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 88));
      v13 = v6;
      if (v6)
        CFArrayAppendValue(*(CFMutableArrayRef *)(v3 + 24), v6);
    }
    *(_QWORD *)(v3 + 16) = a1;
    v7 = (os_unfair_lock_s *)(a1 + 32);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 32));
    v8 = *(const void **)(a1 + 24);
    os_unfair_lock_unlock(v7);
    if (v8)
      CFRetain(v8);
    *(_QWORD *)(v3 + 32) = v8;
    set_default_color_spaces((CGColorSpace *)v3);
    return v3;
  }
  v11 = *((_QWORD *)v10 + 2);
  v3 = pdf_content_stream_create(v11);
  if (!v11)
    goto LABEL_10;
  v12 = 0;
  while (CGPDFArrayGetStream(v10, v12, (CGPDFStreamRef *)&v13))
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(v3 + 24), v13);
    if (v11 == ++v12)
      goto LABEL_10;
  }
  if (v3)
  {
    CFRelease((CFTypeRef)v3);
    return 0;
  }
  return v3;
}

uint64_t pdf_content_stream_create(CFIndex a1)
{
  uint64_t cftype;

  if (CGPDFContentStreamGetTypeID_onceToken != -1)
    dispatch_once(&CGPDFContentStreamGetTypeID_onceToken, &__block_literal_global_16641);
  cftype = pdf_create_cftype();
  if (cftype)
    *(_QWORD *)(cftype + 24) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, 0);
  return cftype;
}

double pdf_page_get_drawing_transform(double *a1, uint64_t a2, int a3, int a4, int a5, int a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, double a13, double a14)
{
  double box_rect;
  double v25;
  CGFloat y;
  double v27;
  CGFloat width;
  double v29;
  CGFloat height;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  double x;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  double v38;
  double v39;
  CGFloat v40;
  double v41;
  int v42;
  int v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  CGFloat v54;
  CGFloat v55;
  double v56;
  CGFloat v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double result;
  unint64_t v83;
  double v84;
  double v85;
  double v88;
  double recta;
  unint64_t v92;
  double v93;
  CGRect v94;
  CGRect v95;
  CGRect v96;
  CGRect v97;
  CGRect v98;
  CGRect v99;
  CGRect v100;
  CGRect v101;
  CGRect v102;
  CGRect v103;
  CGRect v104;
  CGRect v105;
  CGRect v106;
  CGRect v107;
  CGRect v108;

  box_rect = pdf_page_get_box_rect(a2, a3);
  y = v25;
  width = v27;
  height = v29;
  if (a3)
  {
    v107.origin.x = pdf_page_get_box_rect(a2, 0);
    v107.origin.y = v31;
    v107.size.width = v32;
    v107.size.height = v33;
    v94.origin.x = box_rect;
    v94.origin.y = y;
    v94.size.width = width;
    v94.size.height = height;
    v95 = CGRectIntersection(v94, v107);
    box_rect = v95.origin.x;
    y = v95.origin.y;
    width = v95.size.width;
    height = v95.size.height;
  }
  v96.origin.x = box_rect;
  v96.origin.y = y;
  v96.size.width = width;
  v96.size.height = height;
  v108.origin.x = a7;
  v108.origin.y = a8;
  v108.size.width = a9;
  v108.size.height = a10;
  v97 = CGRectIntersection(v96, v108);
  x = v97.origin.x;
  v35 = v97.origin.y;
  v36 = v97.size.width;
  v37 = v97.size.height;
  if (v97.size.width < 0.0 || v97.size.height < 0.0)
  {
    v92 = (unint64_t)CGRectStandardize(v97);
    v98.origin.x = x;
    v98.origin.y = v35;
    v98.size.width = v36;
    v98.size.height = v37;
    v99 = CGRectStandardize(v98);
    v41 = v99.origin.y;
    v99.origin.x = x;
    v99.origin.y = v35;
    v99.size.width = v36;
    v99.size.height = v37;
    v100 = CGRectStandardize(v99);
    v38 = v100.origin.x + v100.size.width;
    v100.origin.x = x;
    v100.origin.y = v35;
    v100.size.width = v36;
    v100.size.height = v37;
    v101 = CGRectStandardize(v100);
    v39 = v101.origin.y + v101.size.height;
    v101.origin.x = x;
    v101.origin.y = v35;
    v101.size.width = v36;
    v101.size.height = v37;
    v102 = CGRectStandardize(v101);
    v40 = v102.size.width;
    v102.origin.x = x;
    x = *(double *)&v92;
    v102.origin.y = v35;
    v102.size.width = v36;
    v102.size.height = v37;
    v103 = CGRectStandardize(v102);
    v37 = v103.size.height;
  }
  else
  {
    v38 = v97.origin.x + v97.size.width;
    v39 = v97.origin.y + v97.size.height;
    v40 = v97.size.width;
    v41 = v97.origin.y;
  }
  v42 = (int)(pdf_page_get_rotation_angle(a2) + a4) % 360;
  v43 = v42 + (v42 < 0 ? 0x168 : 0);
  if (v43 == 90)
  {
    v47 = -v41;
    v48 = 0.0;
    v49 = -1.0;
    v85 = v38;
    v50 = v40;
    v93 = v37;
    v44 = 1.0;
    v45 = a14;
    v46 = a13;
  }
  else
  {
    v93 = v40;
    v44 = 0.0;
    v45 = a14;
    v46 = a13;
    if (v43 == 180)
    {
      v85 = v39;
      v48 = -1.0;
      v49 = 0.0;
      v47 = v38;
      v50 = v37;
    }
    else if (v43 == 270)
    {
      v47 = v39;
      v48 = 0.0;
      v49 = 1.0;
      v44 = -1.0;
      v85 = -x;
      v50 = v93;
      v93 = v37;
    }
    else
    {
      v47 = -x;
      v85 = -v41;
      v48 = 1.0;
      v50 = v37;
      v49 = 0.0;
    }
  }
  if (v46 < 0.0 || v45 < 0.0)
  {
    v54 = a11;
    v55 = a12;
    v56 = v46;
    v57 = v45;
    recta = v47;
    v88 = v49;
    v84 = v44;
    v83 = (unint64_t)CGRectStandardize(*(CGRect *)(&v45 - 3));
    v104.origin.x = a11;
    v104.origin.y = a12;
    v104.size.width = v46;
    v104.size.height = v57;
    v105 = CGRectStandardize(v104);
    v53 = v105.origin.y;
    v105.origin.x = a11;
    v105.origin.y = a12;
    v105.size.width = v46;
    v105.size.height = v57;
    v106 = CGRectStandardize(v105);
    v51 = v106.size.width;
    v106.origin.x = a11;
    v106.origin.y = a12;
    v106.size.width = v46;
    v106.size.height = v57;
    *(CGRect *)(&v45 - 3) = CGRectStandardize(v106);
    v52 = *(double *)&v83;
    v44 = v84;
    v49 = v88;
    v47 = recta;
  }
  else
  {
    v51 = v46;
    v52 = a11;
    v53 = a12;
  }
  v58 = v85 + v47 * 0.0 + v50 * -0.5;
  v59 = v93 * -0.5 + v47 + v85 * 0.0;
  v60 = v48 + v44 * 0.0;
  v61 = v44 + v48 * 0.0;
  v62 = v49 + v48 * 0.0;
  v63 = v48 + v49 * 0.0;
  v64 = v51 / v93;
  v65 = v45 / v50;
  v66 = fmin(v51 / v93, 1.0);
  v67 = fmin(v45 / v50, 1.0);
  if (a6)
  {
    v64 = v66;
    v65 = v67;
  }
  v68 = fmin(v64, v65);
  if (a5)
  {
    v64 = v68;
    v65 = v68;
  }
  v69 = v62 * 0.0 + v63 * v64;
  v70 = v62 * v65 + v63 * 0.0;
  v71 = v60 * 0.0 + v61 * v64;
  v72 = v60 * v65 + v61 * 0.0;
  v73 = v58 * 0.0 + v59 * v64 + 0.0;
  v74 = v65 * v58 + v59 * 0.0 + 0.0;
  v75 = v45 * 0.5;
  v76 = v69 + v70 * 0.0;
  v77 = v70 + v69 * 0.0;
  v78 = v71 + v72 * 0.0;
  v79 = v72 + v71 * 0.0;
  v80 = v51 * 0.5 + v73 + v74 * 0.0;
  v81 = v74 + v73 * 0.0 + v75;
  *a1 = v76 + v77 * 0.0;
  a1[1] = v77 + v76 * 0.0;
  a1[2] = v78 + v79 * 0.0;
  a1[3] = v79 + v78 * 0.0;
  result = v81 + v80 * 0.0 + v53;
  a1[4] = v52 + v80 + v81 * 0.0;
  a1[5] = result;
  return result;
}

double pdf_page_get_box_rect(uint64_t a1, int a2)
{
  double result;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  _OWORD v7[2];

  memset(v7, 0, sizeof(v7));
  switch(a2)
  {
    case 0:
      if (get_page_box(a1, "MediaBox", 1, (double *)v7))
        goto LABEL_10;
      return 0.0;
    case 1:
      if (get_page_box(a1, "CropBox", 1, (double *)v7))
        goto LABEL_10;
      v4 = a1;
      v5 = 0;
      goto LABEL_12;
    case 2:
      v6 = "BleedBox";
      goto LABEL_9;
    case 3:
      v6 = "TrimBox";
      goto LABEL_9;
    case 4:
      v6 = "ArtBox";
LABEL_9:
      if (get_page_box(a1, v6, 0, (double *)v7))
      {
LABEL_10:
        result = *(double *)v7;
      }
      else
      {
        v4 = a1;
        v5 = 1;
LABEL_12:
        pdf_page_get_box_rect(v4, v5);
      }
      break;
    default:
      result = INFINITY;
      break;
  }
  return result;
}

CGColorSpace *set_default_color_spaces(CGColorSpace *a1)
{
  CGColorSpace *result;

  *((_QWORD *)a1 + 6) = get_default_space(a1, "DefaultGray", 1);
  *((_QWORD *)a1 + 7) = get_default_space(a1, "DefaultRGB", 3);
  result = get_default_space(a1, "DefaultCMYK", 4);
  *((_QWORD *)a1 + 8) = result;
  return result;
}

CGColorSpace *get_default_space(CGColorSpace *result, const char *a2, uint64_t a3)
{
  CGColorSpace *v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v9;

  if (result)
  {
    v5 = result;
    while (1)
    {
      result = CGPDFResourcesGetColorSpace(*((_QWORD *)v5 + 4), a2);
      if (result)
        break;
      v5 = (CGColorSpace *)*((_QWORD *)v5 + 5);
      if (!v5)
        return 0;
    }
    v6 = *((_QWORD *)result + 3);
    if (*(_QWORD *)(v6 + 40) != a3)
      return 0;
    v7 = *(_DWORD *)(v6 + 24);
    v8 = v7 > 6;
    v9 = (1 << v7) & 0x68;
    if (!v8 && v9 != 0)
      return 0;
  }
  return result;
}

CGColorSpace *CGPDFResourcesGetColorSpace(uint64_t a1, const char *a2)
{
  CGColorSpace *Value;
  os_unfair_lock_s *v5;
  __CFString *v6;
  const __CFDictionary *v7;
  BOOL v8;
  CGPDFObjectRef resource;
  CGColorSpaceRef DeviceGray;

  Value = 0;
  if (a1 && a2)
  {
    v5 = (os_unfair_lock_s *)(a1 + 80);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
    v6 = (__CFString *)CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x600u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    v7 = *(const __CFDictionary **)(a1 + 24);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (v8 || (Value = (CGColorSpace *)CFDictionaryGetValue(v7, v6)) == 0)
    {
      if (!strcmp(a2, "DeviceGray"))
      {
        DeviceGray = CGColorSpaceCreateDeviceGray();
      }
      else if (!strcmp(a2, "DeviceRGB"))
      {
        DeviceGray = CGColorSpaceCreateDeviceRGB();
      }
      else if (!strcmp(a2, "DeviceCMYK"))
      {
        DeviceGray = CGColorSpaceCreateDeviceCMYK();
      }
      else if (!strcmp(a2, "Pattern"))
      {
        DeviceGray = CGColorSpaceCreatePattern(0);
      }
      else
      {
        resource = get_resource(a1, "ColorSpace", a2);
        DeviceGray = cg_create_colorspace((uint64_t)resource);
      }
      if (DeviceGray)
      {
        Value = (CGColorSpace *)table_set_value((__CFDictionary **)(a1 + 24), v6, DeviceGray);
        CGColorSpaceRelease(Value);
      }
      else
      {
        Value = 0;
      }
    }
    CFRelease(v6);
    os_unfair_lock_unlock(v5);
  }
  return Value;
}

CGColorSpaceRef cg_create_colorspace(uint64_t a1)
{
  int v2;
  const char *v3;
  uint64_t v4;
  CGPDFArray *v6;
  const __CFArray *v7;
  const __CFArray *Mutable;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  CGColorSpaceRef device_space;
  char *v13;
  uint64_t CalGray;
  CFIndex FirstIndexOfValue;
  char *value;
  CFRange v17;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 == 7)
  {
    v6 = *(CGPDFArray **)(a1 + 32);
    v4 = (uint64_t)CGPDFObjectCopyAssociation(a1, "ColorSpace");
    if (v4)
      return (CGColorSpaceRef)v4;
    if (!v6 || !*((_QWORD *)v6 + 2))
    {
      pdf_error("invalid color space: no entries in color space array.");
      return 0;
    }
    value = 0;
    if (!CGPDFArrayGetName(v6, 0, (const char **)&value))
    {
      pdf_error("invalid color space: first color space array entry must be a name.");
      return 0;
    }
    if (cg_create_colorspace_pred != -1)
      dispatch_once(&cg_create_colorspace_pred, &__block_literal_global_14284);
    v7 = (const __CFArray *)pthread_getspecific(cg_colorspaces_key);
    if (v7)
    {
      Mutable = v7;
      Count = CFArrayGetCount(v7);
      if (Count >= 1)
      {
        v10 = Count;
        v11 = 0;
        while (v6 != CFArrayGetValueAtIndex(Mutable, v11))
        {
          if (v10 == ++v11)
            goto LABEL_24;
        }
        pdf_error("invalid color space: color space cannot have a circular reference.");
        return 0;
      }
    }
    else
    {
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 100, 0);
    }
LABEL_24:
    CFArrayAppendValue(Mutable, v6);
    pthread_setspecific(cg_colorspaces_key, Mutable);
    device_space = create_device_space(value);
    if (!device_space)
    {
      v13 = value;
      if (!strcmp(value, "CalGray"))
      {
        CalGray = (uint64_t)create_CalGray(v6);
      }
      else if (!strcmp(v13, "CalRGB"))
      {
        CalGray = (uint64_t)create_CalRGB(v6);
      }
      else if (!strcmp(v13, "Lab"))
      {
        CalGray = (uint64_t)create_Lab(v6);
      }
      else if (!strcmp(v13, "ICCBased"))
      {
        CalGray = (uint64_t)create_ICCBased(v6);
      }
      else if (!strcmp(v13, "Separation"))
      {
        CalGray = create_Separation(v6);
      }
      else if (!strcmp(v13, "DeviceN"))
      {
        CalGray = create_DeviceN(v6);
      }
      else if (!strcmp(v13, "Indexed"))
      {
        CalGray = (uint64_t)create_Indexed(v6);
      }
      else
      {
        if (strcmp(v13, "Pattern"))
        {
LABEL_46:
          v4 = 0;
          goto LABEL_45;
        }
        CalGray = (uint64_t)create_Pattern(v6);
      }
      device_space = (CGColorSpaceRef)CalGray;
      if (!CalGray)
        goto LABEL_46;
    }
    v4 = CGPDFObjectSetAssociation(a1, device_space, "ColorSpace");
LABEL_45:
    v17.length = CFArrayGetCount(Mutable);
    v17.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(Mutable, v17, v6);
    CFArrayRemoveValueAtIndex(Mutable, FirstIndexOfValue);
    pthread_setspecific(cg_colorspaces_key, Mutable);
    return (CGColorSpaceRef)v4;
  }
  if (v2 != 5)
    return 0;
  v3 = *(const char **)(a1 + 32);
  v4 = (uint64_t)create_device_space(v3);
  if (!v4)
  {
    if (!strcmp(v3, "Pattern"))
      return CGColorSpaceCreatePattern(0);
    return 0;
  }
  return (CGColorSpaceRef)v4;
}

CGPDFObjectRef get_resource(uint64_t a1, char *key, const char *a3)
{
  uint64_t **v3;
  CGPDFDictionaryRef dict;
  CGPDFObjectRef value;

  if (!key)
    return 0;
  v3 = *(uint64_t ***)(a1 + 16);
  if (!v3)
    return 0;
  dict = 0;
  value = 0;
  while (!CGPDFDictionaryGetDictionary((CGPDFDictionaryRef)v3[1], key, &dict)
       || !CGPDFDictionaryGetObject(dict, a3, &value))
  {
    v3 = (uint64_t **)*v3;
    if (!v3)
      return 0;
  }
  return value;
}

CGPDFDictionary *pdf_reader_get_number_of_pages(uint64_t *a1)
{
  CGPDFDictionary *result;
  CGPDFInteger value;

  value = 0;
  if (CGPDFDictionaryGetInteger(*(CGPDFDictionaryRef *)(*a1 + 24), "N", &value))
    return (CGPDFDictionary *)(value & ~(value >> 63));
  result = get_pages_dictionary(*a1);
  if (result)
  {
    if (CGPDFDictionaryGetInteger(result, "Count", &value))
    {
      result = (CGPDFDictionary *)(value & ~(value >> 63));
      if (*a1)
      {
        if ((unint64_t)result >= *(_QWORD *)(*a1 + 160))
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CGPDFDictionaryRef get_pages_dictionary(uint64_t a1)
{
  CGPDFDictionary *trailer;
  CGPDFDictionary *v2;
  _BOOL4 Dictionary;
  CGPDFDictionaryRef result;
  BOOL v5;
  CGPDFDictionaryRef dict;
  CGPDFDictionaryRef value;

  dict = 0;
  value = 0;
  trailer = (CGPDFDictionary *)pdf_xref_get_trailer(a1);
  if (CGPDFDictionaryGetDictionary(trailer, "Root", &value))
    v2 = value;
  else
    v2 = 0;
  Dictionary = CGPDFDictionaryGetDictionary(v2, "Pages", &dict);
  result = 0;
  if (Dictionary)
  {
    v5 = is_page_tree_node((_BOOL8)dict);
    result = dict;
    if (!v5)
    {
      if (CGPDFDictionaryGetDictionary(dict, "Parent", &dict))
      {
        if (is_page_tree_node((_BOOL8)dict))
          return dict;
        else
          return 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

BOOL is_page_tree_node(_BOOL8 result)
{
  CGPDFDictionary *v1;
  char *__s1;
  CGPDFObjectRef value;

  if (result)
  {
    v1 = (CGPDFDictionary *)result;
    __s1 = 0;
    result = CGPDFDictionaryGetName((CGPDFDictionaryRef)result, "Type", (const char **)&__s1) && !strcmp(__s1, "Pages")
          || (value = 0, CGPDFDictionaryGetObject(v1, "Kids", &value))
          && value
          && *((_DWORD *)value + 2) == 7
          && CGPDFDictionaryGetInteger(v1, "Count", 0);
  }
  return result;
}

BOOL CGPDFDictionaryGetName(CGPDFDictionaryRef dict, const char *key, const char **value)
{
  _BOOL4 Object;
  int v5;
  CGPDFObjectRef valuea;

  if (value)
    *value = (const char *)&unk_185001FC0;
  valuea = 0;
  Object = CGPDFDictionaryGetObject(dict, key, &valuea);
  if (Object)
  {
    if (valuea)
    {
      v5 = *((_DWORD *)valuea + 2);
      LOBYTE(Object) = v5 == 5;
      if (v5 == 5 && value != 0)
      {
        *value = (const char *)*((_QWORD *)valuea + 4);
        LOBYTE(Object) = 1;
      }
    }
    else
    {
      LOBYTE(Object) = 0;
    }
  }
  return Object;
}

BOOL get_page_box(uint64_t a1, const char *a2, int a3, double *a4)
{
  __CFSet *Mutable;
  _BOOL8 Rect;
  _BOOL8 v10;
  void *value;

  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  value = *(void **)(a1 + 16);
  while (1)
  {
    Rect = CGPDFDictionaryGetRect((CGPDFDictionary *)value, a2, a4);
    if (Rect | a3 ^ 1u)
      break;
    if (*(_BYTE *)(a1 + 48))
    {
      CFSetAddValue(Mutable, value);
      if (CGPDFDictionaryGetDictionary((CGPDFDictionaryRef)value, "Parent", (CGPDFDictionaryRef *)&value)
        && !CFSetContainsValue(Mutable, value))
      {
        continue;
      }
    }
    v10 = 0;
    goto LABEL_8;
  }
  v10 = Rect;
LABEL_8:
  CFRelease(Mutable);
  return v10;
}

BOOL CGPDFDictionaryGetRect(CGPDFDictionary *a1, const char *a2, double *a3)
{
  _BOOL8 result;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  BOOL v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  result = CGPDFDictionaryGetNumbers(a1, a2, (uint64_t)&v12, (CGPDFArray *)4);
  if (a3 && result)
  {
    v5 = v12;
    v6 = v13;
    if (v12 < v14)
    {
      v7 = v14 - v12;
    }
    else
    {
      v5 = v14;
      v7 = v12 - v14;
    }
    v8 = v15 - v13;
    v9 = v13 - v15;
    v10 = v13 < v15;
    if (v13 >= v15)
      v6 = v15;
    *a3 = v5;
    a3[1] = v6;
    if (v10)
      v11 = v8;
    else
      v11 = v9;
    a3[2] = v7;
    a3[3] = v11;
  }
  return result;
}

BOOL CGPDFDictionaryGetNumbers(CGPDFDictionary *a1, const char *a2, uint64_t a3, CGPDFArray *a4)
{
  _BOOL8 result;
  CGPDFArrayRef v7;
  size_t v8;
  CGPDFArrayRef array;
  CGPDFReal value;

  array = 0;
  value = 0.0;
  result = CGPDFDictionaryGetArray(a1, a2, &array);
  if (result)
  {
    v7 = array;
    if (array)
      v7 = (CGPDFArrayRef)*((_QWORD *)array + 2);
    if (v7 == a4)
    {
      if (a4)
      {
        v8 = 0;
        do
        {
          result = CGPDFArrayGetNumber(array, v8, &value);
          if (!result)
            break;
          *(CGPDFReal *)(a3 + 8 * v8++) = value;
        }
        while (a4 != (CGPDFArray *)v8);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL CGPDFArrayGetNumber(CGPDFArrayRef array, size_t index, CGPDFReal *value)
{
  _BOOL4 Object;
  int v5;
  double v6;
  CGPDFObjectRef valuea;

  valuea = 0;
  Object = CGPDFArrayGetObject(array, index, &valuea);
  if (Object)
  {
    if (valuea)
    {
      v5 = *((_DWORD *)valuea + 2);
      switch(v5)
      {
        case 12:
          goto LABEL_6;
        case 4:
          v6 = *((double *)valuea + 4);
          if (!value)
            goto LABEL_8;
          goto LABEL_7;
        case 3:
LABEL_6:
          v6 = (double)*((uint64_t *)valuea + 4);
          if (!value)
          {
LABEL_8:
            LOBYTE(Object) = 1;
            return Object;
          }
LABEL_7:
          *value = v6;
          goto LABEL_8;
      }
    }
    LOBYTE(Object) = 0;
  }
  return Object;
}

BOOL CGPDFArrayGetObject(CGPDFArrayRef array, size_t index, CGPDFObjectRef *value)
{
  CGPDFArrayRef v3;
  size_t v5;

  if (array)
  {
    v3 = array;
    if (*((_QWORD *)array + 2) <= index)
    {
      LOBYTE(array) = 0;
    }
    else
    {
      array = (CGPDFArrayRef)*((_QWORD *)array + 3);
      if (index && array)
      {
        v5 = 1;
        do
        {
          array = *(CGPDFArrayRef *)array;
          if (v5 >= index)
            break;
          ++v5;
        }
        while (array);
      }
      if (array && *((_DWORD *)array + 2) == 10)
        array = (CGPDFArrayRef)pdf_xref_resolve(*((_QWORD *)v3 + 4), *((_QWORD *)array + 2), *((_QWORD *)array + 3));
      if (value)
        *value = array;
      LOBYTE(array) = array != 0;
    }
  }
  return (char)array;
}

BOOL CGPDFDictionaryGetInteger(CGPDFDictionaryRef dict, const char *key, CGPDFInteger *value)
{
  _BOOL4 Object;
  int v5;
  BOOL v6;
  CGPDFObjectRef valuea;

  valuea = 0;
  Object = CGPDFDictionaryGetObject(dict, key, &valuea);
  if (Object)
  {
    if (valuea && ((v5 = *((_DWORD *)valuea + 2), v5 != 12) ? (v6 = v5 == 3) : (v6 = 1), v6))
    {
      if (value)
        *value = *((_QWORD *)valuea + 4);
      LOBYTE(Object) = 1;
    }
    else
    {
      LOBYTE(Object) = 0;
    }
  }
  return Object;
}

BOOL CGPDFDictionaryGetArray(CGPDFDictionaryRef dict, const char *key, CGPDFArrayRef *value)
{
  _BOOL4 Object;
  int v5;
  CGPDFObjectRef valuea;

  if (value)
    *value = 0;
  valuea = 0;
  Object = CGPDFDictionaryGetObject(dict, key, &valuea);
  if (Object)
  {
    if (valuea)
    {
      v5 = *((_DWORD *)valuea + 2);
      LOBYTE(Object) = v5 == 7;
      if (v5 == 7 && value != 0)
      {
        *value = (CGPDFArrayRef)*((_QWORD *)valuea + 4);
        LOBYTE(Object) = 1;
      }
    }
    else
    {
      LOBYTE(Object) = 0;
    }
  }
  return Object;
}

BOOL CGPDFDictionaryGetDictionary(CGPDFDictionaryRef dict, const char *key, CGPDFDictionaryRef *value)
{
  _BOOL4 Object;
  int v5;
  CGPDFObjectRef valuea;

  if (value)
    *value = 0;
  valuea = 0;
  Object = CGPDFDictionaryGetObject(dict, key, &valuea);
  if (Object)
  {
    if (valuea)
    {
      v5 = *((_DWORD *)valuea + 2);
      LOBYTE(Object) = v5 == 8;
      if (v5 == 8 && value != 0)
      {
        *value = (CGPDFDictionaryRef)*((_QWORD *)valuea + 4);
        LOBYTE(Object) = 1;
      }
    }
    else
    {
      LOBYTE(Object) = 0;
    }
  }
  return Object;
}

BOOL CGPDFDictionaryGetObject(CGPDFDictionaryRef dict, const char *key, CGPDFObjectRef *value)
{
  _QWORD *UnresolvedObject;

  if (value)
    *value = 0;
  if (dict)
  {
    UnresolvedObject = CGPDFDictionaryGetUnresolvedObject((uint64_t)dict, (void *)key);
    if (UnresolvedObject)
    {
      if (*((_DWORD *)UnresolvedObject + 2) == 10)
        UnresolvedObject = pdf_xref_resolve(*((_QWORD *)dict + 3), UnresolvedObject[2], UnresolvedObject[3]);
      if (value)
        *value = (CGPDFObjectRef)UnresolvedObject;
      LOBYTE(UnresolvedObject) = 1;
    }
  }
  else
  {
    LOBYTE(UnresolvedObject) = 0;
  }
  return (char)UnresolvedObject;
}

void *CGPDFDictionaryGetUnresolvedObject(uint64_t a1, void *__key)
{
  void *result;

  result = 0;
  if (a1 && __key)
  {
    result = bsearch(__key, *(const void **)(a1 + 64), *(_QWORD *)(a1 + 16), 8uLL, (int (__cdecl *)(const void *, const void *))compare_key);
    if (result)
      return **(void ***)result;
  }
  return result;
}

char *pdf_xref_resolve(uint64_t a1, unint64_t a2, uint64_t a3)
{
  pthread_mutex_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  CGPDFDictionary *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t **v36;
  char *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  _BYTE *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const void *v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;

  if (!a1)
    return 0;
  v57 = 0;
  v55 = 0u;
  v56 = 0u;
  v6 = (pthread_mutex_t *)(a1 + 96);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
  if (a2 >= *(_QWORD *)(a1 + 160))
    goto LABEL_43;
  if (*(_BYTE *)(a1 + 200) && a2 < *(_QWORD *)(a1 + 192))
  {
    *(_BYTE *)(a1 + 200) = 0;
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
    {
      v9 = (_QWORD *)(v7 + 8);
      v8 = *(_QWORD *)(v7 + 8);
      if (v8 && (v10 = *(_QWORD *)(v8 + 8)) != 0)
      {
        v11 = *(CGPDFDictionary **)(v10 + 16);
        v58 = 0;
        if (v11)
        {
          while (CGPDFDictionaryGetOffset(v11, "Prev", &v58) && v58)
          {
            v18 = (_QWORD *)(v7 + 8);
            while (1)
            {
              v18 = (_QWORD *)*v18;
              if (!v18)
                break;
              if (*(_QWORD *)(v18[1] + 8) == v58)
                goto LABEL_18;
            }
            v19 = xref_table_create(v7, v58, v12, v13, v14, v15, v16, v17);
            if (!v19)
            {
              if (!*(_BYTE *)(a1 + 201))
                goto LABEL_43;
              v51 = *(_QWORD *)(a1 + 16);
              if (v51 && (v52 = *(_QWORD *)(v51 + 8)) != 0 && (v53 = *(_QWORD *)(v52 + 8)) != 0)
                v54 = *(const void **)(v53 + 16);
              else
                v54 = 0;
              v41 = (char *)CGPDFXRefTableCreateByScanningObjects((const void **)a1, v54);
              if (v41)
              {
                CGPDFXRefTableRelease(*(_QWORD *)(a1 + 16));
                *(_QWORD *)(a1 + 16) = v41;
                goto LABEL_35;
              }
              goto LABEL_40;
            }
            v20 = v19;
            v21 = (_QWORD *)*v9;
            v22 = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
            *v22 = v21;
            v22[1] = v20;
            *v9 = v22;
          }
        }
      }
      else
      {
        v58 = 0;
      }
LABEL_18:
      v23 = (_QWORD *)*v9;
      if (*v9)
      {
        v24 = 0;
        do
        {
          v25 = v23;
          v23 = (_QWORD *)*v23;
          *v25 = v24;
          v24 = v25;
        }
        while (v23);
      }
      else
      {
        v25 = 0;
      }
      *v9 = v25;
    }
    else
    {
      v26 = *(_QWORD *)(a1 + 8);
      if (v26)
      {
        v28 = (_QWORD *)(v26 + 8);
        v27 = *(_QWORD *)(v26 + 8);
        if (v27)
        {
          v29 = *(char **)(v27 + 8);
          if (v29)
          {
            while (1)
            {
              v58 = 0;
              if (!CGPDFDictionaryGetOffset(*((CGPDFDictionary **)v29 + 1), "Prev", &v58))
                break;
              if (!v58)
                goto LABEL_35;
              v36 = (uint64_t **)(v26 + 8);
              while (1)
              {
                v36 = (uint64_t **)*v36;
                if (!v36)
                  break;
                if (*v36[1] == v58)
                  goto LABEL_35;
              }
              v37 = xref_stream_create(*(uint64_t **)(v26 + 16), v58, v30, v31, v32, v33, v34, v35);
              if (!v37)
                goto LABEL_35;
              v29 = v37;
              v38 = (_QWORD *)*v28;
              v39 = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
              *v39 = v38;
              v39[1] = v29;
              *v28 = v39;
            }
            v48 = (_QWORD *)*v28;
            if (*v28)
            {
              v49 = 0;
              do
              {
                v50 = v48;
                v48 = (_QWORD *)*v48;
                *v50 = v49;
                v49 = v50;
              }
              while (v48);
            }
            else
            {
              v50 = 0;
            }
            *v28 = v50;
          }
        }
      }
    }
  }
LABEL_35:
  v40 = *(_QWORD *)(a1 + 168);
  v41 = (char *)(v40 + 40 * a2);
  v42 = v41 + 12;
  if ((v41[12] & 1) != 0)
    goto LABEL_40;
  if ((v41[12] & 2) != 0)
  {
LABEL_43:
    pthread_mutex_unlock(v6);
    return 0;
  }
  *v42 = v41[12] | 2;
  v43 = *(_QWORD *)(a1 + 16);
  if (!v43)
  {
    if ((CGPDFXRefStreamGetObject(*(_QWORD **)(a1 + 8), a2, a3, (uint64_t)&v55) & 1) != 0)
      goto LABEL_39;
    goto LABEL_42;
  }
  if ((CGPDFXRefTableGetObject(v43, a2, a3, (uint64_t)&v55) & 1) == 0)
  {
LABEL_42:
    *v42 &= ~2u;
    goto LABEL_43;
  }
LABEL_39:
  v44 = v55;
  v45 = v56;
  *((_QWORD *)v41 + 4) = v57;
  *(_OWORD *)v41 = v44;
  *((_OWORD *)v41 + 1) = v45;
  *v42 |= 1u;
  v46 = v40 + 40 * a2;
  *(_QWORD *)(v46 + 16) = a2;
  *(_QWORD *)(v46 + 24) = a3;
  CGPDFObjectSetObjectReference(v46, a2, a3);
LABEL_40:
  pthread_mutex_unlock(v6);
  return v41;
}

uint64_t pdf_object_scanner_read_indirect_object(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  CGPDFDictionary *v45;
  int v46;
  int v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD v55[2];
  uint64_t v56;
  uint64_t v57;

  v56 = 0;
  v57 = 0;
  memset(v55, 0, sizeof(v55));
  if (pdf_object_scanner_read_integer(a1[2], &v57, a3, a4, a5, a6, a7, a8))
  {
    v16 = v57;
    if (pdf_object_scanner_read_integer(a1[2], &v57, v10, v11, v12, v13, v14, v15))
    {
      v23 = v57;
      if (pdf_lexer_scan(a1[2], (uint64_t)v55, v17, v18, v19, v20, v21, v22) == 16)
      {
        result = pdf_object_scanner_read_object(a1, a2, v24, v25, v26, v27, v28, v29);
        if (!(_DWORD)result)
          return result;
        v44 = pdf_lexer_scan(a1[2], (uint64_t)v55, v31, v32, v33, v34, v35, v36);
        if ((DWORD2(v55[0]) - 5) <= 4)
          pdf_object_release_compound_value((uint64_t)v55);
        if (v44 != 14)
          goto LABEL_36;
        if (a2 && *(_DWORD *)(a2 + 8) == 8)
        {
          v45 = *(CGPDFDictionary **)(a2 + 32);
          while (1)
          {
            v46 = CGPDFSourceGetc(a1[1], v37, v38, v39, v40, v41, v42, v43);
            if (v46 == -1 || v46 == 10)
              break;
            if (v46 == 13)
            {
              v48 = CGPDFSourceGetc(a1[1], v37, v38, v39, v40, v41, v42, v43);
              if (v48 != 10)
                CGPDFSourceUngetc((_QWORD *)a1[1], v48);
              break;
            }
          }
          v49 = (_QWORD *)a1[1];
          if (v49)
          {
            v50 = v49[11];
            if (v49[18])
            {
              v51 = v49[24];
              v50 += v49[15];
            }
            else
            {
              v51 = v49[16];
            }
            v53 = v51 - v50 + v49[14];
          }
          else
          {
            v53 = -1;
          }
          v54 = CGPDFStreamCreate(*a1, v45, v49, v53);
          if (v54)
          {
            *(_DWORD *)(a2 + 8) = 9;
            *(_QWORD *)(a2 + 32) = v54;
LABEL_36:
            CGPDFObjectSetObjectReference(a2, v16, v23);
            return 1;
          }
        }
        else
        {
          pdf_error("missing or invalid stream dictionary for object.");
        }
        if ((*(_DWORD *)(a2 + 8) - 5) <= 4)
        {
          v52 = (_OWORD *)a2;
          goto LABEL_27;
        }
      }
      else
      {
        pdf_error("\"obj\" not found while reading object (%lu, %hu).", v16, v23);
        if ((DWORD2(v55[0]) - 5) <= 4)
        {
          v52 = v55;
LABEL_27:
          pdf_object_release_compound_value((uint64_t)v52);
        }
      }
    }
    else
    {
      pdf_error("missing or invalid generation number.");
    }
  }
  else
  {
    pdf_error("missing or invalid object number.");
  }
  return 0;
}

uint64_t pdf_object_scanner_read_compound_object(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  pthread_mutex_t *v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  __int128 v40;
  __int128 v41;
  const char *v42;

  v8 = a3;
  v10 = 0;
  v11 = (a3 + 1);
  v42 = 0;
  v40 = 0u;
  v41 = 0u;
  v12 = "missing or invalid generation number.";
  while (2)
  {
    v13 = pdf_lexer_scan(a1[2], (uint64_t)&v40, a3, a4, a5, a6, a7, a8);
    switch(v13)
    {
      case 0:
      case 15:
        if (v10)
        {
          do
          {
            v23 = *(_QWORD *)v10;
            if ((*(_DWORD *)(v10 + 8) - 5) <= 4)
              pdf_object_release_compound_value(v10);
            free((void *)v10);
            v10 = v23;
          }
          while (v23);
        }
        return 0;
      case 1:
        handle_choke((uint64_t)&v40);
        if (v10)
        {
          do
          {
            v25 = *(_QWORD *)v10;
            if ((*(_DWORD *)(v10 + 8) - 5) <= 4)
              pdf_object_release_compound_value(v10);
            free((void *)v10);
            v10 = v25;
          }
          while (v25);
        }
        goto LABEL_39;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 13:
        goto LABEL_5;
      case 7:
        if (DWORD2(v40) == 5)
          v26 = v42;
        else
          v26 = 0;
        if (v10)
        {
          do
          {
            v27 = *(_QWORD *)v10;
            if ((*(_DWORD *)(v10 + 8) - 5) <= 4)
              pdf_object_release_compound_value(v10);
            free((void *)v10);
            v10 = v27;
          }
          while (v27);
        }
LABEL_39:
        if ((DWORD2(v40) - 5) <= 4)
          pdf_object_release_compound_value((uint64_t)&v40);
        return 0;
      case 9:
      case 11:
        if (v8 >= 512)
        {
          pdf_error("exceeded array or dictionary nesting limit.");
          return 0;
        }
        if ((pdf_object_scanner_read_compound_object(a1, &v40, v11) & 1) == 0)
        {
          if (v10)
          {
            do
            {
              v24 = *(_QWORD *)v10;
              if ((*(_DWORD *)(v10 + 8) - 5) <= 4)
                pdf_object_release_compound_value(v10);
              free((void *)v10);
              v10 = v24;
            }
            while (v24);
          }
          return 0;
        }
LABEL_5:
        v14 = malloc_type_calloc(1uLL, 0x28uLL, 0x33BCE901uLL);
        __CFSetLastAllocationEventName();
        *v14 = 0;
        v16 = v40;
        v15 = v41;
        v14[4] = v42;
        *(_OWORD *)v14 = v16;
        *((_OWORD *)v14 + 1) = v15;
        *v14 = v10;
        v10 = (uint64_t)v14;
        continue;
      case 10:
        if (v10)
        {
          v28 = 0;
          do
          {
            v29 = v10;
            v10 = *(_QWORD *)v10;
            *(_QWORD *)v29 = v28;
            v28 = v29;
          }
          while (v10);
        }
        else
        {
          v29 = 0;
        }
        v35 = (pthread_mutex_t *)CGPDFDictionaryCreateWithObjects(*a1, (_QWORD **)v29);
        if (v35)
        {
          v36 = 8;
          goto LABEL_68;
        }
        if (!v29)
          return 0;
        do
        {
          v37 = *(_QWORD **)v29;
          if ((*(_DWORD *)(v29 + 8) - 5) <= 4)
            pdf_object_release_compound_value(v29);
          free((void *)v29);
          result = 0;
          v29 = (uint64_t)v37;
        }
        while (v37);
        return result;
      case 12:
        if (v10)
        {
          v30 = 0;
          do
          {
            v31 = v10;
            v10 = *(_QWORD *)v10;
            *(_QWORD *)v31 = v30;
            v30 = v31;
          }
          while (v10);
        }
        else
        {
          v31 = 0;
        }
        v35 = CGPDFArrayCreateWithObjects(*a1, (_QWORD *)v31);
        if (v35)
        {
          v36 = 7;
LABEL_68:
          *(_DWORD *)(a2 + 8) = v36;
          *(_BYTE *)(a2 + 12) |= 1u;
          *(_QWORD *)(a2 + 16) = 0;
          *(_QWORD *)(a2 + 24) = 0;
          *(_QWORD *)(a2 + 32) = v35;
          return 1;
        }
        else
        {
          if (!v31)
            return 0;
          do
          {
            v38 = *(_QWORD *)v31;
            if ((*(_DWORD *)(v31 + 8) - 5) <= 4)
              pdf_object_release_compound_value(v31);
            free((void *)v31);
            result = 0;
            v31 = v38;
          }
          while (v38);
        }
        return result;
      case 18:
        if (!v10)
          goto LABEL_55;
        v17 = *(_DWORD *)(v10 + 8);
        if (v17 != 12 && v17 != 3)
        {
          pdf_error("missing or invalid generation number.");
          goto LABEL_58;
        }
        v18 = *(_QWORD *)(v10 + 32);
        v19 = *(_QWORD *)v10;
        free((void *)v10);
        if (!v19)
        {
          v12 = "missing or invalid object number.";
LABEL_55:
          pdf_error(v12);
          return 0;
        }
        v20 = *(_DWORD *)(v19 + 8);
        if (v20 == 12 || v20 == 3)
        {
          v22 = *(_QWORD *)(v19 + 32);
          *(_DWORD *)(v19 + 8) = 10;
          *(_BYTE *)(v19 + 12) &= ~1u;
          *(_QWORD *)(v19 + 16) = v22;
          *(_WORD *)(v19 + 24) = v18;
          *(_DWORD *)(v19 + 26) = 0;
          *(_WORD *)(v19 + 30) = 0;
          v10 = v19;
          continue;
        }
        v10 = v19;
        pdf_error("missing or invalid object number.");
        do
        {
LABEL_58:
          v34 = *(_QWORD *)v10;
          if ((*(_DWORD *)(v10 + 8) - 5) <= 4)
            pdf_object_release_compound_value(v10);
          free((void *)v10);
          v10 = v34;
        }
        while (v34);
        return 0;
      default:
        pdf_error("encountered unexpected object type: %d.", v13);
        if (v10)
        {
          do
          {
            v32 = *(_QWORD *)v10;
            if ((*(_DWORD *)(v10 + 8) - 5) <= 4)
              pdf_object_release_compound_value(v10);
            free((void *)v10);
            v10 = v32;
          }
          while (v32);
        }
        return 0;
    }
  }
}

BOOL pdf_object_scanner_read_integer(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  _OWORD v14[2];
  uint64_t v15;

  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v9 = pdf_lexer_scan(a1, (uint64_t)v14, a3, a4, a5, a6, a7, a8);
  v10 = v9;
  if (v9 == 4)
  {
    if ((DWORD2(v14[0]) == 12 || DWORD2(v14[0]) == 3) && a2 != 0)
      *a2 = v15;
  }
  else
  {
    pdf_error("encountered unexpected object type: %d.", v9);
    if ((DWORD2(v14[0]) - 5) <= 4)
      pdf_object_release_compound_value((uint64_t)v14);
  }
  return v10 == 4;
}

uint64_t CGPDFObjectSetObjectReference(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *i;

  if (result)
  {
    *(_QWORD *)(result + 16) = a2;
    *(_QWORD *)(result + 24) = a3;
    switch(*(_DWORD *)(result + 8))
    {
      case 6:
        v5 = *(_QWORD *)(result + 32);
        if (v5)
        {
          *(_QWORD *)(v5 + 32) = a2;
          *(_QWORD *)(v5 + 40) = a3;
        }
        break;
      case 7:
        result = (uint64_t)CGPDFArraySetObjectReference(*(_QWORD **)(result + 32), a2, a3);
        break;
      case 8:
        result = (uint64_t)CGPDFDictionarySetObjectReference(*(_QWORD **)(result + 32), a2, a3);
        break;
      case 9:
        v6 = *(_QWORD **)(result + 32);
        if (v6)
        {
          v6[3] = a2;
          v6[4] = a3;
          v7 = v6[6];
          if (v7)
          {
            for (i = *(uint64_t **)(v7 + 56); i; i = *(uint64_t **)*i)
              result = CGPDFObjectSetOwningReference(*i, a2, a3);
          }
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

_QWORD *CGPDFDictionarySetObjectReference(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t *i;

  if (result)
  {
    result[4] = a2;
    result[5] = a3;
    for (i = (uint64_t *)result[7]; i; i = *(uint64_t **)*i)
      result = (_QWORD *)CGPDFObjectSetOwningReference(*i, a2, a3);
  }
  return result;
}

uint64_t CGPDFObjectSetOwningReference(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *i;

  if (result)
  {
    v5 = *(_DWORD *)(result + 8);
    switch(v5)
    {
      case 6:
        v6 = *(_QWORD *)(result + 32);
        if (v6)
        {
          *(_QWORD *)(v6 + 48) = a2;
          *(_QWORD *)(v6 + 56) = a3;
        }
        break;
      case 7:
        v7 = *(_QWORD *)(result + 32);
        if (v7)
        {
          for (i = *(_QWORD **)(v7 + 24); i; i = (_QWORD *)*i)
            result = CGPDFObjectSetOwningReference(i, a2, a3);
        }
        break;
      case 8:
        return CGPDFDictionarySetOwningReference(*(_QWORD *)(result + 32), a2, a3);
    }
  }
  return result;
}

_QWORD *CGPDFDictionaryCreateWithObjects(uint64_t a1, _QWORD **a2)
{
  _QWORD **v2;
  unint64_t v4;
  _QWORD *v5;
  size_t v6;
  _QWORD **v7;
  uint64_t cftype;
  _QWORD *v9;
  void *v10;
  uint64_t v11;

  v2 = a2;
  if (a2)
  {
    v4 = 0;
    v5 = a2;
    do
    {
      ++v4;
      v5 = (_QWORD *)*v5;
    }
    while (v5);
    if ((v4 & 1) != 0)
    {
      pdf_error("missing key or value while building dictionary.");
    }
    else
    {
      v6 = v4 >> 1;
      v7 = a2;
      while (*((_DWORD *)v7 + 2) == 5)
      {
        v7 = (_QWORD **)**v7;
        if (!v7)
          goto LABEL_10;
      }
      pdf_error("found non-name key while building dictionary.");
    }
    return 0;
  }
  else
  {
    v6 = 0;
LABEL_10:
    if (CGPDFDictionaryGetTypeID_onceToken != -1)
      dispatch_once(&CGPDFDictionaryGetTypeID_onceToken, &__block_literal_global_14354);
    cftype = pdf_create_cftype();
    v9 = (_QWORD *)cftype;
    if (cftype)
    {
      pthread_mutex_init((pthread_mutex_t *)(cftype + 72), 0);
      v9[2] = v6;
      v9[3] = a1;
      v9[6] = 0;
      v9[7] = v2;
      v9[4] = 0;
      v9[5] = 0;
      v10 = malloc_type_calloc(v6, 8uLL, 0x33BCE901uLL);
      __CFSetLastAllocationEventName();
      v9[8] = v10;
      if (v2)
      {
        v11 = 0;
        do
        {
          *(_QWORD *)(v9[8] + v11) = v2;
          v2 = (_QWORD **)**v2;
          v11 += 8;
        }
        while (v2);
        v10 = (void *)v9[8];
      }
      qsort(v10, v6, 8uLL, (int (__cdecl *)(const void *, const void *))compare_names_14355);
    }
  }
  return v9;
}

uint64_t pdf_create_cftype()
{
  uint64_t Instance;

  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    pdf_error("Unable to create CFRuntime object because _CFRuntimeCreateInstance(...) failed, likely due to an unknown object type ID.");
  return Instance;
}

uint64_t pdf_object_scanner_read_object(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t result;

  v15 = pdf_lexer_scan(a1[2], a2, a3, a4, a5, a6, a7, a8);
  result = 0;
  switch(v15)
  {
    case 0:
    case 15:
      return result;
    case 1:
      handle_choke(a2);
      goto LABEL_7;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 13:
      return 1;
    case 7:
      goto LABEL_7;
    case 9:
    case 11:
      return pdf_object_scanner_read_compound_object(a1, a2, 1, v10, v11, v12, v13, v14);
    default:
      pdf_error("encountered unexpected object type: %d.");
LABEL_7:
      if ((*(_DWORD *)(a2 + 8) - 5) <= 4)
        pdf_object_release_compound_value(a2);
      result = 0;
      *(_DWORD *)(a2 + 8) = 1;
      return result;
  }
}

uint64_t CGPDFXRefTableGetObject(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  _QWORD *object_offset;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *(_QWORD **)(a1 + 8);
  if (!v4)
    return 0;
  while (1)
  {
    v9 = v4[1];
    object_offset = xref_table_get_object_offset(*(_QWORD **)(v9 + 40), a2, a3);
    if (object_offset)
    {
      CGPDFSourceSetPosition(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)object_offset, v11, v12, v13, v14, v15, v16);
      return pdf_object_scanner_read_indirect_object(*(uint64_t **)(a1 + 16), a4, v20, v21, v22, v23, v24, v25);
    }
    v17 = *(uint64_t **)(v9 + 32);
    if (v17)
      break;
LABEL_7:
    v4 = (_QWORD *)*v4;
    if (!v4)
      return 0;
  }
  v18 = *v17;
  if ((CGPDFXRefStreamGetObject(v17, a2, a3, a4) & 1) == 0)
  {
    if (v18 && *(_QWORD *)(v18 + 16) != a1)
      return 0;
    goto LABEL_7;
  }
  return 1;
}

_QWORD *xref_table_get_object_offset(_QWORD *result, unint64_t a2, unsigned __int16 a3)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;

  if (result)
  {
    while (1)
    {
      v3 = (_QWORD *)result[1];
      v4 = a2 - *v3;
      if (a2 >= *v3 && a2 < v3[1] + *v3)
      {
        v5 = v3[2];
        if (v5)
          LODWORD(v5) = *(unsigned __int16 *)(v5 + 2 * v4);
        if ((_DWORD)v5 == a3)
          break;
      }
      result = (_QWORD *)*result;
      if (!result)
        return result;
    }
    return (_QWORD *)v3[v4 + 3];
  }
  return result;
}

pthread_mutex_t *CGPDFArrayCreateWithObjects(uint64_t a1, _QWORD *a2)
{
  pthread_mutex_t *cftype;
  pthread_mutex_t *v5;
  uint64_t v6;
  _QWORD *v7;

  if (CGPDFArrayGetTypeID_onceToken != -1)
    dispatch_once(&CGPDFArrayGetTypeID_onceToken, &__block_literal_global_5019);
  cftype = (pthread_mutex_t *)pdf_create_cftype();
  v5 = cftype;
  if (cftype)
  {
    pthread_mutex_init(cftype + 1, 0);
    v6 = 0;
    if (a2)
    {
      v7 = a2;
      do
      {
        ++v6;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    *(_QWORD *)&v5->__opaque[8] = v6;
    *(_QWORD *)&v5->__opaque[16] = a2;
    *(_QWORD *)&v5->__opaque[24] = a1;
    *(_QWORD *)&v5->__opaque[32] = 0;
    *(_QWORD *)&v5->__opaque[40] = 0;
    *(_QWORD *)&v5->__opaque[48] = 0;
  }
  return v5;
}

uint64_t pdf_xref_get_trailer(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        v4 = v3 + 16;
        return *(_QWORD *)v4;
      }
    }
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          v4 = v7 + 8;
          return *(_QWORD *)v4;
        }
      }
    }
  }
  return 0;
}

uint64_t CGPDFDictionarySetOwningReference(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD **i;

  if (result)
  {
    for (i = *(_QWORD ***)(result + 56); i; i = (_QWORD **)**i)
      result = CGPDFObjectSetOwningReference(*i, a2, a3);
  }
  return result;
}

uint64_t read_hex_string(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  char v22;
  int v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  size_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  size_t v34;
  char v36;

  v9 = -1;
  while (2)
  {
    if (a2 <= 0xD && ((1 << a2) & 0x3601) != 0)
      goto LABEL_4;
    switch((int)a2)
    {
      case ' ':
        goto LABEL_4;
      case '!':
      case '"':
      case '#':
      case '$':
      case '&':
      case '\'':
      case '(':
      case ')':
      case '*':
      case '+':
      case ',':
      case '-':
      case '.':
      case '/':
      case ':':
      case ';':
      case '<':
      case '=':
      case '?':
      case '@':
        goto LABEL_22;
      case '%':
        pdf_error("illegal comment encountered in hex string.");
        skip_comment(a1, v13, v14, v15, v16, v17, v18, v19);
        v10 = a1[2];
        v11 = *(_QWORD *)(v10 + 120);
        if (v11)
          goto LABEL_9;
        v22 = CGPDFSourceRefill(a1[2], v20, a3, a4, a5, a6, a7, a8);
        a2 = 0xFFFFFFFFLL;
        if ((v22 & 1) != 0)
          goto LABEL_6;
        continue;
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        v23 = -48;
        goto LABEL_16;
      case '>':
        if (v9 < 0)
          goto LABEL_28;
        v31 = a1[3];
        v32 = a1[4];
        v33 = (void *)a1[5];
        if (v31 < v32)
          goto LABEL_27;
        v34 = 2 * v32 + 128;
        a1[4] = v34;
        v33 = malloc_type_realloc(v33, v34, 0x33EA2F66uLL);
        a1[5] = v33;
        if (!v33)
          goto LABEL_30;
        v31 = a1[3];
LABEL_27:
        a1[3] = v31 + 1;
        *((_BYTE *)v33 + v31) = 16 * v9;
LABEL_28:
        v30 = 8;
        v29 = 1;
        goto LABEL_29;
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
        v23 = -55;
        goto LABEL_16;
      default:
        if ((a2 - 97) < 6)
        {
          v23 = -87;
LABEL_16:
          v24 = a2 + v23;
          if (v9 < 0)
          {
            v9 = a2 + v23;
          }
          else
          {
            v25 = a1[3];
            v26 = a1[4];
            v27 = (void *)a1[5];
            if (v25 >= v26)
            {
              v28 = 2 * v26 + 128;
              a1[4] = v28;
              v27 = malloc_type_realloc(v27, v28, 0x33EA2F66uLL);
              a1[5] = v27;
              if (!v27)
LABEL_30:
                _CGHandleAssert("lex_grow_buffer", 55, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Reader/CGPDFLexer.c", "lexer->buffer != NULL", "lexer buffer missing", a6, a7, a8, v36);
              v25 = a1[3];
            }
            a1[3] = v25 + 1;
            *((_BYTE *)v27 + v25) = v24 + 16 * v9;
            v9 = -1;
          }
LABEL_4:
          v10 = a1[2];
          v11 = *(_QWORD *)(v10 + 120);
          if (v11)
            goto LABEL_9;
          v12 = CGPDFSourceRefill(a1[2], a2, a3, a4, a5, a6, a7, a8);
          a2 = 0xFFFFFFFFLL;
          if (v12)
          {
LABEL_6:
            v11 = *(_QWORD *)(v10 + 120);
LABEL_9:
            v21 = *(unsigned __int8 **)(v10 + 128);
            *(_QWORD *)(v10 + 120) = v11 - 1;
            *(_QWORD *)(v10 + 128) = v21 + 1;
            a2 = *v21;
          }
          continue;
        }
LABEL_22:
        v29 = 0;
        v30 = 1;
LABEL_29:
        create_string_object((uint64_t)a1, v29);
        return v30;
    }
  }
}

uint64_t create_string_object(uint64_t a1, int a2)
{
  uint64_t v4;
  const void *v5;
  size_t v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(const void **)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(a1 + 56);
  if (CGPDFStringGetTypeID_onceToken != -1)
    dispatch_once(&CGPDFStringGetTypeID_onceToken, &__block_literal_global_2056);
  result = pdf_create_cftype();
  v9 = result;
  if (result)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v4;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_QWORD *)(result + 72) = v6;
    if (a2)
      v10 = 2;
    else
      v10 = 0;
    *(_BYTE *)(result + 64) = v10 | (v7 == 2) | *(_BYTE *)(result + 64) & 0xFC;
    result = (uint64_t)memcpy((void *)(result + 80), v5, v6);
    *(_BYTE *)(v9 + 80 + v6) = 0;
  }
  v11 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 12) |= 1u;
  *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) = v9;
  return result;
}

uint64_t CGPDFSourceReverseSearch(_QWORD *a1, char *__s, char *a3, char *a4, _QWORD *a5)
{
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  size_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  char *v54;
  char v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v63;
  char *v64;
  size_t v65;
  uint64_t v66;
  char __dst;

  if (!__s)
    return 0;
  v8 = strlen(__s);
  v12 = v8;
  if (a1)
  {
    v13 = a1[11];
    if (a1[18])
    {
      v14 = a1[24];
      v13 += a1[15];
    }
    else
    {
      v14 = a1[16];
    }
    v16 = v14 - v13;
    v66 = a1[2];
    if (v66 == -1)
      _CGHandleAssert("CGPDFSourceGetLength", 179, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Reader/CGPDFSource.c", "source->length != (pdf_off_t)-1", "source length would overflow", v9, v10, v11, v56);
    v15 = v16 + a1[14];
  }
  else
  {
    v66 = 0;
    v15 = -1;
  }
  if (v15 < v8)
    return 0;
  v18 = 64;
  do
  {
    v19 = v18;
    v18 *= 2;
  }
  while (v19 < v12);
  __dst = 0;
  v20 = (char *)malloc_type_malloc(v18, 0xF7414A9FuLL);
  v27 = v20;
  if (v15 < 1)
  {
LABEL_42:
    v17 = 0;
    goto LABEL_43;
  }
  v57 = a5;
  v58 = &v20[v12 - 1];
  v60 = v20;
  v63 = (uint64_t)a1;
  while (1)
  {
    if (v15 < (uint64_t)v19)
      v19 = v15;
    CGPDFSourceSetPosition((uint64_t)a1, v15 - v19, v21, v22, v23, v24, v25, v26);
    if (CGPDFSourceRead((uint64_t)a1, (uint64_t)v27, v19, v28, v29, v30, v31, v32) != v19)
    {
      pdf_error("failed to read %zu bytes at offset %lld.", v19, v15 - v19);
      goto LABEL_42;
    }
    v59 = v15 - v19;
    v64 = &v27[v19];
    v33 = (unint64_t)&v27[v19 - 1];
    if (v33 >= (unint64_t)v27)
      break;
LABEL_36:
    v15 -= v19;
    a1 = (_QWORD *)v63;
    if (v59 < 1)
      goto LABEL_42;
  }
  v34 = 0;
  v65 = v12 - 1 + v15;
  while (2)
  {
    if (*(unsigned __int8 *)(v33 + v34) != *__s)
      goto LABEL_35;
    v35 = v65 + v34;
    if ((uint64_t)(v65 + v34) > v66)
      goto LABEL_35;
    if (&v58[v19 + v34] > v64)
    {
      CGPDFSourceSetPosition(v63, v15 + v34 - 1, v21, v22, v23, v24, v25, v26);
      v27 = v60;
      if (CGPDFSourceRead(v63, v33 + v34, v12, v36, v37, v38, v39, v40) != v12)
      {
        pdf_error("failed to read %zu bytes at offset %lld.", v12, v15 + v34 - 1);
        goto LABEL_42;
      }
    }
    if (strncmp((const char *)(v33 + v34), __s, v12))
      goto LABEL_35;
    if (!a3 || v15 + v34 - 1 < 1)
    {
LABEL_30:
      if (!a4 || v35 >= v66)
      {
LABEL_38:
        *v57 = v15 + v34 - 1;
        v17 = 1;
        goto LABEL_43;
      }
      CGPDFSourceSetPosition(v63, v35, v21, v22, v23, v24, v25, v26);
      if (CGPDFSourceRead(v63, (uint64_t)&__dst, 1uLL, v48, v49, v50, v51, v52) != 1)
      {
        pdf_error("failed to read %zu bytes at offset %lld.", 1uLL, v35);
        goto LABEL_42;
      }
      v53 = __dst;
      v54 = strchr(a4, __dst);
      if (!v53 || v54)
        goto LABEL_38;
      goto LABEL_35;
    }
    CGPDFSourceSetPosition(v63, v15 + v34 - 2, v21, v22, v23, v24, v25, v26);
    if (CGPDFSourceRead(v63, (uint64_t)&__dst, 1uLL, v41, v42, v43, v44, v45) == 1)
    {
      v46 = __dst;
      v47 = strchr(a3, __dst);
      v27 = v60;
      if (!v46 || v47)
        goto LABEL_30;
LABEL_35:
      --v34;
      if (v33 + v34 < (unint64_t)v27)
        goto LABEL_36;
      continue;
    }
    break;
  }
  pdf_error("failed to read %zu bytes at offset %lld.", 1uLL, v15 + v34 - 2);
  v17 = 0;
  v27 = v60;
LABEL_43:
  free(v27);
  return v17;
}

void CGPDFSourceSetPosition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a1)
  {
    v8 = a2;
    v10 = *(void **)(a1 + 144);
    if (v10)
    {
      if (*(_BYTE *)(a1 + 152))
        free(v10);
      *(_QWORD *)(a1 + 144) = 0;
    }
    *(_BYTE *)(a1 + 208) = 0;
    if (v8 < 0)
    {
      v8 = 0;
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 16);
      if (v11 < v8 && v11 != -1)
        v8 = *(_QWORD *)(a1 + 16);
    }
    v13 = *(_QWORD *)(a1 + 112);
    v14 = v8 - v13;
    if (v8 >= v13)
    {
      v15 = *(_QWORD *)(a1 + 104) + v13;
      v16 = v15 <= v8;
      v17 = v15 - v8;
      if (!v16)
      {
LABEL_18:
        v18 = *(_QWORD *)(a1 + 88) + v14;
LABEL_21:
        *(_QWORD *)(a1 + 120) = v17;
        *(_QWORD *)(a1 + 128) = v18;
        return;
      }
      if (!*(_QWORD *)(a1 + 40))
        goto LABEL_23;
    }
    else if (!*(_QWORD *)(a1 + 40))
    {
      CGPDFSourceRewind(a1, a2, a3, a4, a5, a6, a7, a8);
LABEL_23:
      while (1)
      {
        v19 = *(_QWORD *)(a1 + 112);
        v14 = v8 - v19;
        if (v8 >= v19)
        {
          v20 = *(_QWORD *)(a1 + 104) + v19;
          v16 = v20 <= v8;
          v17 = v20 - v8;
          if (!v16)
            break;
        }
        if ((CGPDFSourceRefill(a1, a2, a3, a4, a5, a6, a7, a8) & 1) == 0)
          return;
      }
      goto LABEL_18;
    }
    v17 = 0;
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = v8;
    v18 = *(_QWORD *)(a1 + 88);
    goto LABEL_21;
  }
}

uint64_t CGPDFSourceRead(uint64_t a1, uint64_t __dst, size_t __n, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  char *v11;
  size_t v12;
  size_t v13;
  size_t v14;
  size_t v15;

  result = 0;
  if (a1 && __n)
  {
    v11 = (char *)__dst;
    v12 = __n;
    while (1)
    {
      v13 = *(_QWORD *)(a1 + 120);
      if (v12 <= v13)
        break;
      if (v11)
      {
        memmove(v11, *(const void **)(a1 + 128), v13);
        v13 = *(_QWORD *)(a1 + 120);
        v11 += v13;
      }
      v12 -= v13;
      v14 = *(_QWORD *)(a1 + 128) + v13;
      *(_QWORD *)(a1 + 120) = 0;
      *(_QWORD *)(a1 + 128) = v14;
      if ((CGPDFSourceRefill(a1, __dst, v13, a4, a5, a6, a7, a8) & 1) == 0)
        return __n - v12;
    }
    if (v11)
    {
      memcpy(v11, *(const void **)(a1 + 128), v12);
      v13 = *(_QWORD *)(a1 + 120);
    }
    v15 = *(_QWORD *)(a1 + 128) + v12;
    *(_QWORD *)(a1 + 120) = v13 - v12;
    *(_QWORD *)(a1 + 128) = v15;
    return __n;
  }
  return result;
}

CGColorSpaceRef create_device_space(const char *a1)
{
  if (!strcmp(a1, "DeviceGray"))
    return CGColorSpaceCreateDeviceGray();
  if (!strcmp(a1, "DeviceRGB"))
    return CGColorSpaceCreateDeviceRGB();
  if (!strcmp(a1, "DeviceCMYK"))
    return CGColorSpaceCreateDeviceCMYK();
  return 0;
}

uint64_t CGPDFSourceGetc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 *v10;

  v9 = *(_QWORD *)(a1 + 120);
  if (v9)
    goto LABEL_4;
  if (CGPDFSourceRefill(a1, a2, a3, a4, a5, a6, a7, a8))
  {
    v9 = *(_QWORD *)(a1 + 120);
LABEL_4:
    v10 = *(unsigned __int8 **)(a1 + 128);
    *(_QWORD *)(a1 + 120) = v9 - 1;
    *(_QWORD *)(a1 + 128) = v10 + 1;
    return *v10;
  }
  return 0xFFFFFFFFLL;
}

BOOL CGPDFDictionaryGetNumber(CGPDFDictionaryRef dict, const char *key, CGPDFReal *value)
{
  _BOOL4 Object;
  int v5;
  double v6;
  CGPDFObjectRef valuea;

  valuea = 0;
  Object = CGPDFDictionaryGetObject(dict, key, &valuea);
  if (Object)
  {
    if (valuea)
    {
      v5 = *((_DWORD *)valuea + 2);
      switch(v5)
      {
        case 12:
          goto LABEL_6;
        case 4:
          v6 = *((double *)valuea + 4);
          if (!value)
            goto LABEL_8;
          goto LABEL_7;
        case 3:
LABEL_6:
          v6 = (double)*((uint64_t *)valuea + 4);
          if (!value)
          {
LABEL_8:
            LOBYTE(Object) = 1;
            return Object;
          }
LABEL_7:
          *value = v6;
          goto LABEL_8;
      }
    }
    LOBYTE(Object) = 0;
  }
  return Object;
}

BOOL CGPDFDictionaryGetBoolean(CGPDFDictionaryRef dict, const char *key, CGPDFBoolean *value)
{
  _BOOL4 Object;
  CGPDFObjectRef valuea;

  valuea = 0;
  Object = CGPDFDictionaryGetObject(dict, key, &valuea);
  if (Object)
  {
    if (valuea && *((_DWORD *)valuea + 2) == 2)
    {
      if (value)
        *value = *((_BYTE *)valuea + 32);
      LOBYTE(Object) = 1;
    }
    else
    {
      LOBYTE(Object) = 0;
    }
  }
  return Object;
}

void *table_set_value(__CFDictionary **a1, void *key, void *value)
{
  void *result;
  __CFDictionary *Mutable;

  result = 0;
  if (key && value)
  {
    Mutable = *a1;
    if (!*a1)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
      *a1 = Mutable;
    }
    CFDictionarySetValue(Mutable, key, value);
    return value;
  }
  return result;
}

uint64_t CGPDFObjectSetAssociation(uint64_t a1, const void *a2, const char *a3)
{
  int v5;
  uint64_t v6;
  const void **v7;
  _QWORD *v8;
  uint64_t Object;
  uint64_t v11;

  v5 = *(_DWORD *)(a1 + 8);
  if (v5 == 9)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
    return CGPDFDictionarySetAssociation(v11, a2, a3);
  }
  if (v5 == 8)
  {
    v11 = *(_QWORD *)(a1 + 32);
    return CGPDFDictionarySetAssociation(v11, a2, a3);
  }
  if (v5 != 7)
    return 0;
  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
    return 0;
  pthread_mutex_lock((pthread_mutex_t *)(v6 + 64));
  v7 = *(const void ***)(v6 + 56);
  if (v7)
  {
    *(_QWORD *)(v6 + 56) = 0;
    CGPDFAssociationRelease(v7);
  }
  v8 = CGPDFAssociationCreate(a2, (uint64_t)a3);
  *(_QWORD *)(v6 + 56) = v8;
  Object = CGPDFAssociationGetObject((uint64_t)v8, a3);
  pthread_mutex_unlock((pthread_mutex_t *)(v6 + 64));
  return Object;
}

const void *CGPDFObjectCopyAssociation(uint64_t a1, const char *a2)
{
  int v3;
  uint64_t v4;
  const void *Object;
  const void *v6;
  uint64_t v8;

  if (!a1)
    return 0;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 == 9)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
  }
  else
  {
    if (v3 != 8)
    {
      if (v3 == 7)
      {
        v4 = *(_QWORD *)(a1 + 32);
        if (v4)
        {
          pthread_mutex_lock((pthread_mutex_t *)(v4 + 64));
          Object = (const void *)CGPDFAssociationGetObject(*(_QWORD *)(v4 + 56), a2);
          v6 = Object;
          if (Object)
            CFRetain(Object);
          pthread_mutex_unlock((pthread_mutex_t *)(v4 + 64));
          return v6;
        }
      }
      return 0;
    }
    v8 = *(_QWORD *)(a1 + 32);
  }
  return CGPDFDictionaryCopyAssociation(v8, a2);
}

uint64_t CGPDFAssociationGetObject(uint64_t result, const char *a2)
{
  uint64_t v2;
  const char *v3;

  if (result)
  {
    v2 = result;
    if (!a2)
      return *(_QWORD *)v2;
    v3 = *(const char **)(result + 8);
    if (v3 == a2 || !strcmp(v3, a2))
      return *(_QWORD *)v2;
    else
      return 0;
  }
  return result;
}

_QWORD *CGPDFAssociationCreate(const void *a1, uint64_t a2)
{
  _QWORD *v4;
  CFTypeRef v5;

  v4 = malloc_type_malloc(0x10uLL, 0x566C45D1uLL);
  __CFSetLastAllocationEventName();
  if (v4)
  {
    if (a1)
      v5 = CFRetain(a1);
    else
      v5 = 0;
    *v4 = v5;
    v4[1] = a2;
  }
  return v4;
}

BOOL CGPDFArrayGetName(CGPDFArrayRef array, size_t index, const char **value)
{
  _BOOL4 Object;
  CGPDFObjectRef valuea;

  valuea = 0;
  Object = CGPDFArrayGetObject(array, index, &valuea);
  if (Object)
  {
    if (valuea && *((_DWORD *)valuea + 2) == 5)
    {
      if (value)
        *value = (const char *)*((_QWORD *)valuea + 4);
      LOBYTE(Object) = 1;
    }
    else
    {
      LOBYTE(Object) = 0;
    }
  }
  return Object;
}

void *CGPDFContentStreamGetExtGState(uint64_t a1, const char *a2)
{
  uint64_t v3;
  const __CFAllocator *v4;
  const __CFAllocator *v5;
  uint64_t v6;
  BOOL v7;
  __CFString *v8;
  const __CFDictionary *v9;
  void *Value;
  CGPDFObjectRef resource;

  if (a1)
  {
    v3 = a1;
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    do
    {
      v6 = *(_QWORD *)(v3 + 32);
      if (v6)
        v7 = a2 == 0;
      else
        v7 = 1;
      if (!v7)
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v6 + 80));
        v8 = (__CFString *)CFStringCreateWithCStringNoCopy(v4, a2, 0x600u, v5);
        v9 = *(const __CFDictionary **)(v6 + 64);
        if (v8)
        {
          if (v9)
          {
            Value = (void *)CFDictionaryGetValue(v9, v8);
            if (Value)
              goto LABEL_13;
          }
        }
        resource = get_resource(v6, "ExtGState", a2);
        if (resource && *((_DWORD *)resource + 2) == 8)
        {
          Value = table_set_value((__CFDictionary **)(v6 + 64), v8, *((void **)resource + 4));
LABEL_13:
          CFRelease(v8);
          os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 80));
          if (Value)
            return Value;
          goto LABEL_16;
        }
        CFRelease(v8);
        os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 80));
      }
LABEL_16:
      v3 = *(_QWORD *)(v3 + 40);
    }
    while (v3);
  }
  return 0;
}

uint64_t CGPathIsEllipse(char *cf, CGRect *a2, uint64_t a3, uint64_t a4, CGAffineTransform *a5)
{
  CFTypeID v7;

  if (cf && (CGPathDisableTypeValidation || (v7 = CFGetTypeID(cf), v7 == CGPathGetTypeID())))
    return CG::Path::is_ellipse((CG::Path *)(cf + 16), a2, 0, 0, a5);
  else
    return 0;
}

uint64_t CGRenderingStateGetBaseCTM(uint64_t a1)
{
  return a1 + 24;
}

void CGContextDrawPathDirect(uint64_t a1, CGPathDrawingMode a2, const CGPath *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v12;
  double v13;
  CGPathDrawingMode v14;
  uint64_t v15;
  _QWORD v16[6];
  CGPathDrawingMode v17;

  if (!a1)
  {
    v15 = 0;
LABEL_11:
    handle_invalid_context((char)"CGContextDrawPathDirect", v15, (uint64_t)a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    v15 = a1;
    goto LABEL_11;
  }
  v12 = *(const void **)(a1 + 168);
  if (v12)
    CFRelease(v12);
  *(_QWORD *)(a1 + 168) = 0;
  v13 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 128) + 8);
  if (v13 > 0.0 || v13 == -1.0905473e16)
  {
    if (a2 != -1)
    {
LABEL_13:
      v14 = a2;
LABEL_14:
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 0x40000000;
      v16[2] = __CGContextDrawPathDirect_block_invoke;
      v16[3] = &__block_descriptor_tmp_3_13122;
      v17 = v14;
      v16[4] = a1;
      v16[5] = a4;
      if (draw_path(v14, (char *)a3, (uint64_t)v16) == 1006)
      {
        CGContextAddPath((CGContextRef)a1, a3);
        CGContextDrawPath((CGContextRef)a1, v14);
      }
    }
  }
  else
  {
    v14 = kCGPathFill;
    switch(a2)
    {
      case -1:
      case 2:
        return;
      case 3:
        goto LABEL_14;
      case 4:
        v14 = kCGPathEOFill;
        goto LABEL_14;
      default:
        goto LABEL_13;
    }
  }
}

CGDataProviderRef CGDataProviderCreateWithURL(CGDataProviderRef url)
{
  const __CFURL *v1;
  int v2;
  CFTypeID v3;
  int v4;
  CGDataProviderRef v5;
  const __CFData *i;
  uint64_t v7;
  __CFHTTPMessage *v8;
  __CFHTTPMessage *v9;
  const __CFData *v10;
  CGDataProvider *v11;
  UInt8 buffer[1025];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (url)
  {
    v1 = url;
    v2 = CGCFURLGetType(url);
    if ((v2 - 1) >= 2)
    {
      if (!v2 && CFURLGetFileSystemRepresentation(v1, 1u, buffer, 1025))
        return CGDataProviderCreateWithFilename((const char *)buffer);
      return 0;
    }
    v3 = CFGetTypeID(v1);
    if (v3 == CFURLGetTypeID())
    {
      v4 = CGCFURLGetType(v1);
      if (v4 == 2)
      {
        url = CFHTTPMessageCreateRequest(0, CFSTR("GET"), v1, (CFStringRef)*MEMORY[0x1E0C930E0]);
        if (!url)
          return url;
        v5 = url;
        v8 = http_message_send_request(url);
        if (v8)
        {
          v9 = v8;
          i = CFHTTPMessageCopyBody(v8);
          CFRelease(v9);
          CFRelease(v5);
          if (i)
          {
LABEL_22:
            v11 = CGDataProviderCreateWithCFData(i);
            CFRelease(i);
            return v11;
          }
          return 0;
        }
        goto LABEL_18;
      }
      if (v4 == 1)
      {
        url = CFReadStreamCreateWithFTPURL(0, v1);
        if (!url)
          return url;
        v5 = url;
        if (CFReadStreamOpen(url))
        {
          for (i = CFDataCreateMutable(0, 0); ; CFDataAppendBytes(i, buffer, v7))
          {
            v7 = CFReadStreamRead(v5, buffer, 1024);
            if (v7 < 1)
              break;
          }
          CFReadStreamClose(v5);
          CFRelease(v5);
          if (!i)
            return 0;
          if (CFDataGetLength(i))
            goto LABEL_22;
          v10 = i;
          goto LABEL_19;
        }
LABEL_18:
        v10 = v5;
LABEL_19:
        CFRelease(v10);
      }
    }
    return 0;
  }
  return url;
}

CGDataProviderRef CGDataProviderCreateWithFilename(const char *filename)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  unint64_t v6;
  int v7;
  const __CFURL *ValueAtIndex;
  const __CFURL *v9;
  const __CFURL *v10;
  const __CFString *v11;
  const __CFString *v12;
  const char *CStringPtr;
  const char *v14;
  size_t v15;
  int v16;
  unsigned int v17;
  const __CFURL *v18;
  const __CFURL *v19;
  const __CFURL *v20;
  const __CFURL *v21;
  const __CFString *v22;
  const __CFString *v23;
  const char *v24;
  const char *v25;
  size_t v26;
  int v27;
  unsigned int v28;
  void *v29;
  uint64_t v30;
  off_t st_size;
  int v32;
  off_t v33;
  CGDataProvider *Direct;
  const __CFString *v35;
  const __CFString *v36;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  const __CFString *v50;
  CFNumberRef v51;
  CFNumberRef v52;
  int valuePtr;
  stat v54;
  __int16 v55;
  __int16 v56;

  if (!filename)
    return 0;
  v56 = 45;
  v55 = 78;
  v2 = (const __CFArray *)CFCopySearchPathForDirectoriesInDomains();
  if (v2)
  {
    v3 = v2;
    Count = CFArrayGetCount(v2);
    if (Count < 1)
    {
      LOBYTE(v7) = 45;
    }
    else
    {
      v5 = Count;
      v6 = 0;
      v7 = 45;
      do
      {
        ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(v3, v6);
        v9 = CFURLCopyAbsoluteURL(ValueAtIndex);
        if (v9)
        {
          v10 = v9;
          v11 = CFURLCopyPath(v9);
          if (v11)
          {
            v12 = v11;
            CStringPtr = CFStringGetCStringPtr(v11, 0x8000100u);
            if (CStringPtr)
            {
              v14 = CStringPtr;
              v15 = strlen(CStringPtr);
              v16 = strncasecmp(v14, filename, v15);
              v17 = 0x554C53u >> (8 * v6);
              if (v6 > 2)
                v17 = v7;
              if (!v16)
                v7 = v17;
            }
            CFRelease(v12);
          }
          CFRelease(v10);
        }
        ++v6;
      }
      while (v5 != v6);
    }
    LOBYTE(v56) = v7;
    CFRelease(v3);
  }
  v18 = (const __CFURL *)CFCopyHomeDirectoryURLForUser();
  if (v18)
  {
    v19 = v18;
    v20 = CFURLCopyAbsoluteURL(v18);
    if (v20)
    {
      v21 = v20;
      v22 = CFURLCopyPath(v20);
      if (v22)
      {
        v23 = v22;
        v24 = CFStringGetCStringPtr(v22, 0x8000100u);
        if (v24)
        {
          v25 = v24;
          v26 = strlen(v24);
          if (!strncasecmp(v25, filename, v26))
            LOBYTE(v55) = 89;
        }
        CFRelease(v23);
      }
      CFRelease(v21);
    }
    CFRelease(v19);
  }
  v27 = open(filename, 0, 0);
  if (v27 < 0)
    return 0;
  v28 = v27;
  memset(&v54, 0, sizeof(v54));
  if (fstat(v27, &v54) < 0 || (v54.st_mode & 0xF000) != 0x8000 || !v54.st_size)
  {
    close(v28);
    return 0;
  }
  v29 = mmap(0, v54.st_size, 1, 16386, v28, 0);
  if (v29 != (void *)-1)
  {
    v30 = (uint64_t)v29;
    ERROR_CGDataProvider_BufferIsNotReadable();
    ERROR_CGDataProvider_BufferIsNotBigEnough();
    if (v30)
    {
      st_size = v54.st_size;
      v32 = fstat(v28, &v54);
      v33 = v54.st_size;
      close(v28);
      Direct = 0;
      if (v32 < 0 || st_size != v33)
        return Direct;
      v35 = CFStringCreateWithFormat(0, 0, CFSTR("mapped file: Library domain: [%s] home: [%s] original data pointer passed to provider: %p"), &v56, &v55, v30);
      Direct = CGDataProviderCreateWithDataInternal(0, v30, v54.st_size, (uint64_t)unmap_file, v35);
      if (v35)
      {
        v36 = v35;
LABEL_51:
        CFRelease(v36);
        goto LABEL_52;
      }
      goto LABEL_52;
    }
  }
  v38 = v54.st_size;
  if (v54.st_size > 10485760)
  {
LABEL_46:
    Direct = CGDataProviderCreateDirect((void *)v28, v38, &file_callbacks);
    goto LABEL_52;
  }
  v39 = malloc_type_malloc(v54.st_size, 0x705560E0uLL);
  if (!v39)
  {
    v38 = v54.st_size;
    goto LABEL_46;
  }
  v40 = (uint64_t)v39;
  v41 = read(v28, v39, v38);
  if (v41 == -1)
  {
    v49 = 0;
    goto LABEL_48;
  }
  v49 = v41;
  if (v41 < v38)
  {
LABEL_48:
    CGPostError((uint64_t)"%s: warning: failed to read entire file.", v42, v43, v44, v45, v46, v47, v48, (char)"read_file");
    bzero((void *)(v40 + v49), v38 - v49);
  }
  close(v28);
  v50 = CFStringCreateWithFormat(0, 0, CFSTR("data read from file: Library domain: [%s] home: [%s] original data pointer passed to provider: %p"), &v56, &v55, v40);
  Direct = CGDataProviderCreateWithDataInternal(0, v40, v54.st_size, (uint64_t)free_data_9192, v50);
  if (v50)
  {
    v36 = v50;
    goto LABEL_51;
  }
LABEL_52:
  if (Direct)
  {
    valuePtr = rootless_trusted_by_self_token();
    v51 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
    if (v51)
    {
      v52 = v51;
      CGDataProviderSetProperty((uint64_t)Direct, CFSTR("CGDataProviderTrustToken"), v51);
      CFRelease(v52);
    }
  }
  return Direct;
}

CGDataProviderRef CGDataProviderCreateWithDataInternal(uint64_t a1, uint64_t a2, off_t a3, uint64_t a4, const __CFString *a5)
{
  _QWORD *v10;
  CGDataProviderRef v11;
  CGDataProviderRef v12;
  CGDataProviderDirectCallbacks callbacks;

  if (!a2)
    return 0;
  v10 = malloc_type_malloc(0x20uLL, 0x2062DE7BuLL);
  *v10 = a1;
  v10[1] = a3;
  v10[2] = a2;
  v10[3] = a4;
  *(_QWORD *)&callbacks.version = 0;
  callbacks.getBytePointer = (CGDataProviderGetBytePointerCallback)data_get_byte_pointer;
  callbacks.releaseBytePointer = 0;
  callbacks.getBytesAtPosition = (CGDataProviderGetBytesAtPositionCallback)data_get_bytes_at_position;
  callbacks.releaseInfo = (CGDataProviderReleaseInfoCallback)data_release_info;
  v11 = CGDataProviderCreateDirect(v10, a3, &callbacks);
  v12 = v11;
  if (a5 && v11)
    *((_QWORD *)v11 + 35) = CGDataProviderCreateDebugString((uint64_t)v11, a5);
  return v12;
}

void CGDataProviderSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  unint64_t *v5;
  _DWORD *v6;

  if (a1 && a2 && a3)
  {
    v5 = (unint64_t *)(a1 + 272);
    if (!*(_QWORD *)(a1 + 272))
    {
      v6 = CGPropertiesCreate();
      while (!__ldxr(v5))
      {
        if (!__stxr((unint64_t)v6, v5))
          goto LABEL_11;
      }
      __clrex();
      CGPropertiesRelease((uint64_t)v6);
    }
LABEL_11:
    CGPropertiesSetProperty(*v5, a2, a3);
  }
}

uint64_t CGCFURLGetType(const __CFURL *a1)
{
  const __CFString *v1;
  const __CFString *v2;
  CFComparisonResult v3;
  CFComparisonResult v4;
  unsigned int v5;
  uint64_t v6;

  v1 = CFURLCopyScheme(a1);
  if (!v1)
    return 0xFFFFFFFFLL;
  v2 = v1;
  v3 = CFStringCompare(v1, CFSTR("file"), 1uLL);
  v4 = CFStringCompare(v2, CFSTR("ftp"), 1uLL);
  if (CFStringCompare(v2, CFSTR("http"), 1uLL) == kCFCompareEqualTo
    || (v3 == kCFCompareEqualTo ? (v5 = 0) : (v5 = -1),
        v4 == kCFCompareEqualTo ? (v6 = 1) : (v6 = v5),
        CFStringCompare(v2, CFSTR("https"), 1uLL) == kCFCompareEqualTo))
  {
    v6 = 2;
  }
  CFRelease(v2);
  return v6;
}

uint64_t CGColorSpaceSetProperty(uint64_t result, const void *a2, const void *a3)
{
  uint64_t v5;
  pthread_mutex_t *v6;
  _DWORD *v7;

  if (result)
  {
    v5 = result;
    v6 = (pthread_mutex_t *)(result + 32);
    pthread_mutex_lock((pthread_mutex_t *)(result + 32));
    v7 = *(_DWORD **)(*(_QWORD *)(v5 + 24) + 80);
    if (!v7)
    {
      v7 = CGPropertiesCreate();
      *(_QWORD *)(*(_QWORD *)(v5 + 24) + 80) = v7;
    }
    CGPropertiesSetProperty((uint64_t)v7, a2, a3);
    return pthread_mutex_unlock(v6);
  }
  return result;
}

void CGPropertiesSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  os_unfair_lock_s *v6;

  v6 = (os_unfair_lock_s *)(a1 + 4);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 4));
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 8), a2, a3);
  os_unfair_lock_unlock(v6);
}

uint64_t CGColorSpaceCreateWithState(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t Instance;
  uint64_t v10;
  unsigned int v11;

  if (!a1)
    return 0;
  if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1)
    dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_77);
  Instance = CGTypeCreateInstance(CGColorSpaceGetTypeID_type_id, 80, a3, a4, a5, a6, a7, a8);
  v10 = Instance;
  if (Instance)
  {
    pthread_mutex_init((pthread_mutex_t *)(Instance + 32), 0);
    do
      v11 = __ldxr(a1);
    while (__stxr(v11 + 1, a1));
    *(_QWORD *)(v10 + 24) = a1;
    *(_DWORD *)(v10 + 16) = 1;
  }
  return v10;
}

_QWORD *create_from_profile(_QWORD *a1, int a2)
{
  _QWORD *icc;
  uint64_t v4;
  const __CFData *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12[74];
  _BYTE __dst[296];
  uint64_t v14;

  icc = a1;
  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (create_from_profile_cglibrarypredicate != -1)
      dispatch_once(&create_from_profile_cglibrarypredicate, &__block_literal_global_220_1618);
    v4 = create_from_profile_f(icc, 0);
    if (v4)
    {
      v5 = (const __CFData *)v4;
      memcpy(__dst, &CGICCProfileInfoInitializer, sizeof(__dst));
      CGCMSUtilsGetICCProfileInfo(icc, (uint64_t)__dst, a2, v6, v7, v8, v9, v10);
      memcpy(v12, __dst, sizeof(v12));
      icc = color_space_state_create_icc(icc, v5, v12);
      CFRelease(v5);
    }
    else
    {
      return 0;
    }
  }
  return icc;
}

void CGCMSUtilsGetICCProfileInfo(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  const __CFData *ICCProfileInfo_f_7;
  const __CFData *v13;
  const UInt8 *BytePtr;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const UInt8 *v18;
  int v19;
  char v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int ICCProfileInfo_f_17;
  char ICCProfileInfo_f_32;
  char ICCProfileInfo_f_42;
  int v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  void *v35;
  const void *v36;
  const CFDictionaryValueCallBacks *v37;
  CFDictionaryRef v38;
  CFDictionaryRef v39;
  const __CFArray *v40;
  BOOL v41;
  const char *v42;
  const char *v43;
  char v44;
  const __CFArray *Retained;
  void *v46[3];
  void *v47[3];
  void *values[3];
  void *keys[2];
  const __CFString *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v42 = "profile != NULL";
    v43 = "profile missing";
    goto LABEL_113;
  }
  if (!a2)
  {
    v42 = "info != NULL";
    v43 = "profile info missing";
LABEL_113:
    _CGHandleAssert("CGCMSUtilsGetICCProfileInfo", 75, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSUtils.c", v42, v43, a6, a7, a8, v44);
  }
  if (CGCMSUtilsGetICCProfileInfo_cglibrarypredicate != -1)
    dispatch_once(&CGCMSUtilsGetICCProfileInfo_cglibrarypredicate, &__block_literal_global_1440);
  *(_QWORD *)(a2 + 4) = CGCMSUtilsGetICCProfileInfo_f(a1);
  *(_QWORD *)(a2 + 12) = v11;
  if (CGCMSUtilsGetICCProfileInfo_cglibrarypredicate_8 != -1)
    dispatch_once(&CGCMSUtilsGetICCProfileInfo_cglibrarypredicate_8, &__block_literal_global_10);
  ICCProfileInfo_f_7 = (const __CFData *)CGCMSUtilsGetICCProfileInfo_f_7(a1);
  if (ICCProfileInfo_f_7)
  {
    v13 = ICCProfileInfo_f_7;
    *(_BYTE *)(a2 + 282) = 0;
    BytePtr = CFDataGetBytePtr(ICCProfileInfo_f_7);
    v18 = BytePtr;
    v19 = *((_DWORD *)BytePtr + 4);
    if (v19 > 1213421087)
    {
      if (v19 <= 1296255028)
      {
        if (v19 == 1213421088)
        {
LABEL_36:
          v20 = 0;
          v21 = 0;
          v22 = 4;
LABEL_37:
          v23 = 3;
          goto LABEL_48;
        }
        if (v19 == 1281450528)
        {
          v20 = 0;
          v21 = 0;
          v22 = 3;
          goto LABEL_37;
        }
        v24 = 1282766368;
        goto LABEL_35;
      }
      if (v19 <= 1380401695)
      {
        switch(v19)
        {
          case 1296255029:
            goto LABEL_18;
          case 1296255030:
            goto LABEL_38;
          case 1296255031:
            goto LABEL_39;
          case 1296255032:
            goto LABEL_40;
          default:
            goto LABEL_47;
        }
      }
      switch(v19)
      {
        case 1501067552:
          goto LABEL_36;
        case 1482250784:
          v20 = 1;
          v22 = 7;
          break;
        case 1380401696:
          v20 = 0;
          v22 = 1;
          break;
        default:
          goto LABEL_47;
      }
      v23 = 3;
    }
    else
    {
      if (v19 <= 943934545)
      {
        if (v19 > 893602897)
        {
          switch(v19)
          {
            case 893602898:
LABEL_18:
              v20 = 0;
              v21 = 0;
              v22 = 4;
              v23 = 5;
              goto LABEL_48;
            case 910380114:
LABEL_38:
              v20 = 0;
              v21 = 0;
              v22 = 4;
              v23 = 6;
              goto LABEL_48;
            case 927157330:
LABEL_39:
              v20 = 0;
              v21 = 0;
              v22 = 4;
              v23 = 7;
              goto LABEL_48;
          }
          goto LABEL_47;
        }
        if (v19 != 860048466)
        {
          if (v19 == 876825682)
          {
            v20 = 0;
            v21 = 0;
            v23 = 4;
            v22 = 4;
            goto LABEL_48;
          }
          goto LABEL_47;
        }
        goto LABEL_36;
      }
      if (v19 <= 1129142602)
      {
        if (v19 == 943934546)
        {
LABEL_40:
          v20 = 0;
          v21 = 0;
          v22 = 4;
          v23 = 8;
          goto LABEL_48;
        }
        v24 = 1129142560;
LABEL_35:
        if (v19 == v24)
          goto LABEL_36;
LABEL_47:
        v23 = 0;
        v20 = 0;
        v21 = 0;
        v22 = 4;
LABEL_48:
        *(_DWORD *)a2 = v22;
        *(_QWORD *)(a2 + 288) = v23;
        v25 = *((_DWORD *)BytePtr + 3);
        if (v25 > 1886549105)
        {
          if (v25 == 1886549106 || v25 == 1936744803)
            goto LABEL_63;
        }
        else
        {
          if (v25 == 1818848875)
          {
            *(_BYTE *)(a2 + 280) = 0;
            if ((v20 & 1) == 0)
              goto LABEL_73;
            goto LABEL_71;
          }
          if (v25 == 1835955314)
          {
            if (CGCMSUtilsGetICCProfileInfo_cglibrarypredicate_13 != -1)
              dispatch_once(&CGCMSUtilsGetICCProfileInfo_cglibrarypredicate_13, &__block_literal_global_15_1441);
            *(_BYTE *)(a2 + 283) = CGCMSUtilsGetICCProfileInfo_f_12(a1);
            if (CGCMSUtilsGetICCProfileInfo_cglibrarypredicate_18 != -1)
              dispatch_once(&CGCMSUtilsGetICCProfileInfo_cglibrarypredicate_18, &__block_literal_global_20);
            ICCProfileInfo_f_17 = CGCMSUtilsGetICCProfileInfo_f_17(a1);
            *(_BYTE *)(a2 + 284) = ICCProfileInfo_f_17;
            if (*(_BYTE *)(a2 + 283))
              v21 = 0;
            else
              v21 = ICCProfileInfo_f_17 ^ 1;
            if (CGCMSUtilsGetICCProfileInfo_cglibrarypredicate_23 != -1)
              dispatch_once(&CGCMSUtilsGetICCProfileInfo_cglibrarypredicate_23, &__block_literal_global_25);
            *(_BYTE *)(a2 + 286) = CGCMSUtilsGetICCProfileInfo_f_22(a1);
LABEL_63:
            *(_BYTE *)(a2 + 280) = 1;
            if (CGCMSUtilsGetICCProfileInfo_cglibrarypredicate_28 != -1)
              dispatch_once(&CGCMSUtilsGetICCProfileInfo_cglibrarypredicate_28, &__block_literal_global_30);
            if ((CGCMSUtilsGetICCProfileInfo_f_27(a1) & 1) != 0)
            {
              ICCProfileInfo_f_32 = 1;
            }
            else
            {
              if (CGCMSUtilsGetICCProfileInfo_cglibrarypredicate_33 != -1)
                dispatch_once(&CGCMSUtilsGetICCProfileInfo_cglibrarypredicate_33, &__block_literal_global_35);
              ICCProfileInfo_f_32 = CGCMSUtilsGetICCProfileInfo_f_32(a1, CFSTR("aapy"));
            }
            *(_BYTE *)(a2 + 282) = ICCProfileInfo_f_32;
            if ((v20 & 1) != 0)
              goto LABEL_71;
LABEL_73:
            if (CGCMSUtilsGetICCProfileInfo_cglibrarypredicate_43 != -1)
              dispatch_once(&CGCMSUtilsGetICCProfileInfo_cglibrarypredicate_43, &__block_literal_global_45_1443);
            ICCProfileInfo_f_42 = CGCMSUtilsGetICCProfileInfo_f_42(a1);
            goto LABEL_76;
          }
        }
        if (CGCMSUtilsGetICCProfileInfo_cglibrarypredicate_39 != -1)
          dispatch_once(&CGCMSUtilsGetICCProfileInfo_cglibrarypredicate_39, &__block_literal_global_41);
        if (!CGCMSUtilsGetICCProfileInfo_f_38(a1))
        {
          if (profile_can_be_used_as_destination_cglibrarypredicate != -1)
            dispatch_once(&profile_can_be_used_as_destination_cglibrarypredicate, &__block_literal_global_358);
          v34 = (uint64_t (*)(uint64_t))profile_can_be_used_as_destination_f;
          if (profile_can_be_used_as_destination_cglibrarypredicate_359 != -1)
            dispatch_once(&profile_can_be_used_as_destination_cglibrarypredicate_359, &__block_literal_global_361);
          v35 = (void *)v34(profile_can_be_used_as_destination_s);
          if (v35)
          {
            v36 = v35;
            *(_OWORD *)keys = xmmword_1E1631B60;
            v50 = CFSTR("ColorSyncTransformTag");
            values[0] = v35;
            values[1] = CFSTR("ColorSyncRenderingIntentPerceptual");
            values[2] = CFSTR("ColorSyncTransformDeviceToPCS");
            v47[0] = a1;
            v47[1] = CFSTR("ColorSyncRenderingIntentPerceptual");
            v47[2] = CFSTR("ColorSyncTransformPCSToDevice");
            v37 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
            v38 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            CFRelease(v36);
            v39 = CFDictionaryCreate(0, (const void **)keys, (const void **)v47, 3, MEMORY[0x1E0C9B390], v37);
            v46[0] = v38;
            v46[1] = v39;
            v46[2] = 0;
            v40 = CFArrayCreate(0, (const void **)v46, 2, MEMORY[0x1E0C9B378]);
            Retained = CGColorSyncTransformCacheGetRetained(v40, 0);
            if (v38)
              CFRelease(v38);
            if (v39)
              CFRelease(v39);
            if (v40)
              CFRelease(v40);
            v41 = Retained != 0;
            CGColorSyncTransformCacheRelease(Retained);
          }
          else
          {
            v41 = 0;
          }
          *(_BYTE *)(a2 + 280) = v41;
          if ((v20 & 1) != 0)
            goto LABEL_71;
          goto LABEL_73;
        }
        *(_BYTE *)(a2 + 280) = 1;
        if ((v20 & 1) == 0)
          goto LABEL_73;
LABEL_71:
        ICCProfileInfo_f_42 = 1;
LABEL_76:
        *(_BYTE *)(a2 + 281) = ICCProfileInfo_f_42;
        v29 = a3 & v21;
        *(_BYTE *)(a2 + 285) = a3 & v21;
        v30 = *(_QWORD *)(a2 + 288);
        if (v30)
        {
          v31 = 0;
          v32 = *((_DWORD *)v18 + 4);
          v33 = a2 + 24;
          do
          {
            if (v32 == 1281450528)
            {
              if (v31 >= 3)
                _CGHandleAssert("CGCMSUtilsGetICCProfileInfo", 186, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSUtils.c", "k < 3", "component %zu too large", v15, v16, v17, v31);
              *(float64x2_t *)(v33 + 16 * v31) = vcvtq_f64_f32(CGCMSUtilsGetICCProfileInfo_range[v31 + 2]);
            }
            else if (v29)
            {
              *(_OWORD *)(v33 + 16 * v31) = xmmword_185004A60;
            }
            else
            {
              *(_OWORD *)(v33 + 16 * v31) = xmmword_185004A20;
            }
            ++v31;
          }
          while (v30 != v31);
        }
        if ((v29 & 1) != 0 && *(_DWORD *)a2 == 1)
          *(_BYTE *)(a2 + 282) = 1;
        CFRelease(v13);
        return;
      }
      if (v19 == 1129142603)
      {
        v20 = 0;
        v21 = 0;
        v22 = 2;
        v23 = 4;
        goto LABEL_48;
      }
      if (v19 != 1196573017)
      {
        v24 = 1212961568;
        goto LABEL_35;
      }
      v22 = 0;
      v20 = 0;
      v23 = 1;
    }
    v21 = 1;
    goto LABEL_48;
  }
}

_QWORD *color_space_state_create_icc(const void *a1, const __CFData *a2, int *a3)
{
  _QWORD *v4;
  uint64_t v7;
  CGColorSpaceRef DeviceGray;
  CGColorSpaceRef v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;

  if (a1)
  {
    v4 = 0;
    switch(*a3)
    {
      case 0:
        v7 = 1;
        DeviceGray = CGColorSpaceCreateDeviceGray();
        goto LABEL_6;
      case 1:
      case 3:
      case 7:
        v7 = 3;
        DeviceGray = CGColorSpaceCreateDeviceRGB();
        goto LABEL_6;
      case 2:
        v7 = 4;
        DeviceGray = CGColorSpaceCreateDeviceCMYK();
LABEL_6:
        v9 = DeviceGray;
        goto LABEL_7;
      case 4:
        v9 = 0;
        v4 = 0;
        v7 = *((_QWORD *)a3 + 36);
        if ((unint64_t)(v7 - 16) < 0xFFFFFFFFFFFFFFF1)
          return v4;
LABEL_7:
        v10 = malloc_type_calloc(0x70uLL, 1uLL, 0xB50ED88DuLL);
        v4 = v10;
        if (!v10)
          return v4;
        *(_DWORD *)v10 = 1;
        v10[4] = 0;
        *((_BYTE *)v10 + 10) = *((_BYTE *)a3 + 280);
        *((_BYTE *)v10 + 12) = *((_BYTE *)a3 + 281);
        *((_BYTE *)v10 + 11) = 0;
        *((_BYTE *)v10 + 14) = *((_BYTE *)a3 + 282);
        *((_BYTE *)v10 + 15) = *((_BYTE *)a3 + 286);
        v10[8] = *(_WORD *)((char *)a3 + 283);
        *((_BYTE *)v10 + 13) = *((_BYTE *)a3 + 285);
        *((_QWORD *)v10 + 5) = v7;
        *((_QWORD *)v10 + 13) = icc_vtable;
        v18 = *a3;
        *((_DWORD *)v10 + 5) = 6;
        *((_DWORD *)v10 + 6) = v18;
        *((_DWORD *)v10 + 7) = v18;
        *((_QWORD *)v10 + 9) = 0;
        *((_QWORD *)v10 + 10) = 0;
        *((_QWORD *)v10 + 4) = icc_get_default_color_components(v7, v11, v12, v13, v14, v15, v16, v17);
        v19 = malloc_type_calloc(1uLL, 0x90uLL, 0x10F20409491EBA0uLL);
        v4[11] = v19;
        if (!v19)
          goto LABEL_16;
        v20 = v19;
        *(_DWORD *)v19 = 0;
        v19[1] = CGDataProviderCreateWithCFData(a2);
        v20[2] = CFRetain(a1);
        v20[7] = v9;
        v21 = (char *)malloc_type_malloc(16 * v7, 0x100004000313F17uLL);
        v20[8] = v21;
        if (v21)
        {
          v29 = v21 + 8;
          v30 = (uint64_t *)(a3 + 8);
          do
          {
            *(v29 - 1) = *(v30 - 1);
            v31 = *v30;
            v30 += 2;
            *v29 = v31;
            v29 += 2;
            --v7;
          }
          while (v7);
          *(_OWORD *)(v20 + 3) = *(_OWORD *)(a3 + 1);
          v4[7] = icc_get_md5(v4, v22, v23, v24, v25, v26, v27, v28);
          v4[8] = v32;
          return v4;
        }
        free((void *)v4[11]);
LABEL_16:
        free(v4);
        break;
      default:
        return v4;
    }
  }
  return 0;
}

uint64_t icc_get_default_color_components(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((unint64_t)(a1 - 16) <= 0xFFFFFFFFFFFFFFF0)
    _CGHandleAssert("icc_get_default_color_components", 127, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpace_ICC.c", "component_count > 0 && component_count <= kCGColorSpaceICCMaxComponents", "Colorspace component count unhandled. count = %zu", a6, a7, a8, a1);
  return (uint64_t)*(&icc_get_default_color_components_components + a1 - 1);
}

uint64_t icc_get_md5(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  const void *v9;
  uint64_t v11;
  CC_MD5_CTX *v12;
  uint64_t v13;
  uint64_t i;
  float v15;
  uint64_t v16;
  float data;
  unsigned __int8 md[8];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)md = 0;
  v20 = 0;
  v9 = (char *)a1 + 20;
  v8 = *((_DWORD *)a1 + 5);
  if (v8 != 6)
    _CGHandleAssert("icc_get_md5", 43, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpace_ICC.c", "state->type == kCGColorSpaceICCBased", "Colorspace not ICC based. type = %d", a6, a7, a8, v8);
  v11 = a1[11];
  v12 = (CC_MD5_CTX *)malloc_type_malloc(0x5CuLL, 0x2062DE7BuLL);
  CC_MD5_Init(v12);
  if (v12)
  {
    CC_MD5_Update(v12, v9, 4u);
    CC_MD5_Update(v12, (const void *)(v11 + 24), 0x10u);
    CC_MD5_Update(v12, (char *)a1 + 18, 1u);
    CC_MD5_Update(v12, (char *)a1 + 19, 1u);
  }
  v13 = 2 * a1[5];
  if (v13)
  {
    for (i = 0; i != v13; ++i)
    {
      v15 = *(double *)(*(_QWORD *)(v11 + 64) + 8 * i);
      data = v15;
      if (v12)
        CC_MD5_Update(v12, &data, 4u);
    }
  }
  if (v12)
  {
    CC_MD5_Final(md, v12);
    v16 = *(_QWORD *)md;
  }
  else
  {
    v16 = 0;
  }
  free(v12);
  return v16;
}

double color_space_state_create_device_rgb()
{
  char *v0;
  double result;

  v0 = (char *)malloc_type_calloc(0x70uLL, 1uLL, 0x70A95D2DuLL);
  if (v0)
  {
    *(_DWORD *)v0 = 1;
    v0[12] = 1;
    *((_DWORD *)v0 + 2) = 0x10000;
    *((_WORD *)v0 + 7) = 256;
    *((_QWORD *)v0 + 13) = &device_rgb_vtable;
    *(_QWORD *)(v0 + 20) = 0x100000001;
    *((_DWORD *)v0 + 7) = 1;
    *((_QWORD *)v0 + 10) = 0;
    *((_QWORD *)v0 + 11) = 0;
    *((_QWORD *)v0 + 9) = CFSTR("kCGColorSpaceDeviceRGB");
    *((_QWORD *)v0 + 4) = &device_rgb_get_default_color_components_default_rgb;
    *((_QWORD *)v0 + 5) = 3;
    result = 2.51837737e257;
    *(_OWORD *)(v0 + 56) = xmmword_185004C80;
  }
  return result;
}

double color_space_state_create_device_gray()
{
  char *v0;
  double result;

  v0 = (char *)malloc_type_calloc(0x70uLL, 1uLL, 0x4F16AE18uLL);
  if (v0)
  {
    *(_DWORD *)v0 = 1;
    v0[12] = 1;
    *((_DWORD *)v0 + 2) = 0x10000;
    *((_WORD *)v0 + 7) = 256;
    *((_QWORD *)v0 + 13) = &device_gray_vtable;
    *((_DWORD *)v0 + 5) = 0;
    *((_QWORD *)v0 + 10) = 0;
    *((_QWORD *)v0 + 11) = 0;
    *((_QWORD *)v0 + 9) = CFSTR("kCGColorSpaceDeviceGray");
    *((_QWORD *)v0 + 5) = 1;
    *((_QWORD *)v0 + 3) = 0;
    *((_QWORD *)v0 + 4) = &xmmword_184F7DAD8;
    result = 3.05765335e180;
    *(_OWORD *)(v0 + 56) = xmmword_185004C70;
  }
  return result;
}

CGColorSpaceRef CGColorSpaceCreateDeviceCMYK(void)
{
  CGColorSpace *v0;

  if (CGColorSpaceCreateDeviceCMYK_predicate != -1)
    dispatch_once(&CGColorSpaceCreateDeviceCMYK_predicate, &__block_literal_global_99_5838);
  v0 = (CGColorSpace *)CGColorSpaceCreateDeviceCMYK_space;
  if (CGColorSpaceCreateDeviceCMYK_space)
    CFRetain((CFTypeRef)CGColorSpaceCreateDeviceCMYK_space);
  return v0;
}

double color_space_state_create_device_cmyk()
{
  char *v0;
  double result;

  v0 = (char *)malloc_type_calloc(0x70uLL, 1uLL, 0x8A9AA748uLL);
  if (v0)
  {
    *(_DWORD *)v0 = 1;
    v0[12] = 1;
    *((_DWORD *)v0 + 2) = 0x10000;
    *((_WORD *)v0 + 7) = 0;
    *((_QWORD *)v0 + 13) = &device_cmyk_vtable;
    *(_QWORD *)(v0 + 20) = 0x200000002;
    *((_DWORD *)v0 + 7) = 2;
    *((_QWORD *)v0 + 10) = 0;
    *((_QWORD *)v0 + 11) = 0;
    *((_QWORD *)v0 + 9) = CFSTR("kCGColorSpaceDeviceCMYK");
    *((_QWORD *)v0 + 4) = &device_cmyk_get_default_color_components_default_cmyk;
    *((_QWORD *)v0 + 5) = 4;
    result = -2.24810663e216;
    *(_OWORD *)(v0 + 56) = xmmword_185004C90;
  }
  return result;
}

CFTypeRef CGCMSUtilsCreateLinearSRGBProfile()
{
  CFTypeRef result;

  if (CGCMSUtilsCreateLinearSRGBProfile_once != -1)
    dispatch_once(&CGCMSUtilsCreateLinearSRGBProfile_once, &__block_literal_global_122_1496);
  result = (CFTypeRef)CGCMSUtilsCreateLinearSRGBProfile_linear_profile;
  if (CGCMSUtilsCreateLinearSRGBProfile_linear_profile)
    return CFRetain((CFTypeRef)CGCMSUtilsCreateLinearSRGBProfile_linear_profile);
  return result;
}

CFTypeRef CGCMSUtilsCreateLinearGrayProfile()
{
  CFTypeRef result;

  if (CGCMSUtilsCreateLinearGrayProfile_once != -1)
    dispatch_once(&CGCMSUtilsCreateLinearGrayProfile_once, &__block_literal_global_179);
  result = (CFTypeRef)CGCMSUtilsCreateLinearGrayProfile_linear_profile;
  if (CGCMSUtilsCreateLinearGrayProfile_linear_profile)
    return CFRetain((CFTypeRef)CGCMSUtilsCreateLinearGrayProfile_linear_profile);
  return result;
}

CFTypeRef CGCMSUtilsCreateLinearDisplayP3Profile()
{
  CFTypeRef result;

  if (CGCMSUtilsCreateLinearDisplayP3Profile_once != -1)
    dispatch_once(&CGCMSUtilsCreateLinearDisplayP3Profile_once, &__block_literal_global_188);
  result = (CFTypeRef)CGCMSUtilsCreateLinearDisplayP3Profile_linear_profile;
  if (CGCMSUtilsCreateLinearDisplayP3Profile_linear_profile)
    return CFRetain((CFTypeRef)CGCMSUtilsCreateLinearDisplayP3Profile_linear_profile);
  return result;
}

CFTypeID CGDataProviderGetTypeID(void)
{
  if (kCGDataProviderPropertyTrustToken_block_invoke_once != -1)
    dispatch_once(&kCGDataProviderPropertyTrustToken_block_invoke_once, &__block_literal_global_26_6088);
  return CGDataProviderGetTypeID_id;
}

_QWORD *CGClipStackGetClipAtIndex(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;

  if (result)
  {
    if (result[15] <= a2)
    {
      return 0;
    }
    else
    {
      v2 = result + 16;
      if (result[14] != 3)
        v2 = (_QWORD *)*v2;
      return (_QWORD *)v2[a2];
    }
  }
  return result;
}

uint64_t CGContextDelegateEndLayer(uint64_t a1)
{
  uint64_t (*v1)(void);

  if (a1 && (v1 = *(uint64_t (**)(void))(a1 + 200)) != 0)
    return v1();
  else
    return 0;
}

uint64_t CGContextDelegateBeginLayer(uint64_t a1)
{
  uint64_t (*v1)(void);

  if (a1 && (v1 = *(uint64_t (**)(void))(a1 + 192)) != 0)
    return v1();
  else
    return 0;
}

void function_finalize(_QWORD *a1)
{
  const void *v2;
  void (*v3)(_QWORD);
  void *v4;
  void *v5;

  v2 = (const void *)a1[12];
  if (v2)
    CFRelease(v2);
  CGPropertiesRelease(a1[13]);
  v3 = (void (*)(_QWORD))a1[10];
  if (v3)
    v3(a1[3]);
  v4 = (void *)a1[5];
  if (v4)
    free(v4);
  v5 = (void *)a1[7];
  if (v5)
    free(v5);
}

void gradient_release_info(CFTypeRef *a1)
{
  CFRelease(*a1);
  free(a1);
}

uint64_t CGGlyphLockGetQuantizationLevel(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  return 1;
}

uint64_t CGContextGetBlendMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;

  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
  {
    v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 120) + 4);
    if ((unsigned __int16)((unsigned __int16)v8 >> 10) <= 6u)
      return CGContextGetBlendMode_mode[(__int16)v8 >> 8];
  }
  else
  {
    handle_invalid_context((char)"CGContextGetBlendMode", a1, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

void CGPatternRelease(CGPatternRef pattern)
{
  if (pattern)
    CFRelease(pattern);
}

void CGContextSetShouldDrawBitmapRuns(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108)
    {
      CGGStateSetShouldDrawBitmapRuns(*(_QWORD *)(a1 + 96), a2);
      return;
    }
    v8 = a1;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetShouldDrawBitmapRuns", v8, a3, a4, a5, a6, a7, a8);
}

void CGContextConcatCTM(CGContextRef c, CGAffineTransform *transform)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  double b;
  double v10;
  double d;
  double tx;
  double ty;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  CGContextRef v24;

  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      v8 = (double *)*((_QWORD *)c + 12);
      b = transform->b;
      v10 = transform->c;
      d = transform->d;
      tx = transform->tx;
      ty = transform->ty;
      v14 = v8[3];
      v15 = v8[4];
      v16 = v8[5];
      v17 = v8[6];
      v18 = b * v16 + transform->a * v14;
      v19 = b * v17 + transform->a * v15;
      v20 = d * v16 + v10 * v14;
      v21 = d * v17 + v10 * v15;
      v22 = v8[7] + v16 * ty + tx * v14;
      v23 = v17 * ty + tx * v15 + v8[8];
      v8[3] = v18;
      v8[4] = v19;
      v8[5] = v20;
      v8[6] = v21;
      v8[7] = v22;
      v8[8] = v23;
      return;
    }
    v24 = c;
  }
  else
  {
    v24 = 0;
  }
  handle_invalid_context((char)"CGContextConcatCTM", (uint64_t)v24, v2, v3, v4, v5, v6, v7);
}

void CGContextClipToRect(CGContextRef c, CGRect rect)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v14;
  CGContextRef v15;

  if (!c)
  {
    v15 = 0;
LABEL_24:
    handle_invalid_context((char)"CGContextClipToRect", (uint64_t)v15, v2, v3, v4, v5, v6, v7);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v15 = c;
    goto LABEL_24;
  }
  if (rect.origin.x != INFINITY && rect.origin.y != INFINITY)
  {
    CGGStateClipToRect(*((_QWORD *)c + 12), rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
    v14 = (const void *)*((_QWORD *)c + 21);
    if (v14)
    {
      CFRelease(v14);
      *((_QWORD *)c + 21) = 0;
    }
  }
}

_QWORD *dlRecorder_EndLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *result;
  uint64_t v13;
  CFIndex Count;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  if (!a1 || (v9 = *(_QWORD *)(a1 + 288)) == 0)
  {
    CGPostError((uint64_t)"%s: CGContextDelegateGetInfo() returned NULL", a2, a3, a4, a5, a6, a7, a8, (char)"dlRecorder_EndLayer");
    return 0;
  }
  result = CG::DisplayListRecorder::currentDisplayList(*(CFArrayRef **)(a1 + 288));
  if (!result)
    return result;
  v13 = (uint64_t)result;
  CFRetain(result);
  if (CFArrayGetCount(*(CFArrayRef *)(v9 + 8)) >= 2)
  {
    Count = CFArrayGetCount(*(CFArrayRef *)(v9 + 8));
    if (Count)
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v9 + 8), Count - 1);
    else
      CGPostError((uint64_t)"%s: displayListStack underflow", v15, v16, v17, v18, v19, v20, v21, (char)"void CG::DisplayListRecorder::popDisplayListStack()");
    v26 = 0;
    goto LABEL_13;
  }
  v26 = *(_QWORD **)(v9 + 16);
  if (!v26)
    return 0;
  CFRelease(*(CFTypeRef *)(v9 + 16));
  *(_QWORD *)(v9 + 16) = 0;
LABEL_13:
  if (*(_QWORD *)(v13 + 592) != *(_QWORD *)(v13 + 600)
    && *(double *)(v13 + 88) != INFINITY
    && *(double *)(v13 + 96) != INFINITY)
  {
    v28 = *(_OWORD *)(a3 + 24);
    v29 = *(_OWORD *)(a3 + 40);
    v30 = *(_OWORD *)(a3 + 56);
    *(CGAffineTransform *)(a3 + 24) = CGAffineTransformIdentity;
    if (v26)
      CGDisplayListDelegateDrawDisplayList(v26, a2, a3, v13, v22, v23, v24, v25);
    else
      CG::DisplayListRecorder::DrawDisplayList((CFArrayRef *)v9, a2, a3, v13);
    *(_OWORD *)(a3 + 24) = v28;
    *(_OWORD *)(a3 + 40) = v29;
    *(_OWORD *)(a3 + 56) = v30;
  }
  CFRelease((CFTypeRef)v13);
  if (v26)
    return v26;
  else
    return (_QWORD *)a1;
}

uint64_t CG::DisplayListRecorder::DrawDisplayList(CFArrayRef *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double *v8;
  double *v9;
  uint64_t result;
  const __CFDictionary *v12;
  __int128 v13;
  _BYTE *v14;
  CGSize *p_size;
  const CGRect *v16;
  CGFloat *p_y;
  CGFloat *p_height;
  CGFloat height;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  __int128 v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *EntryDrawingState;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t EntryPatternState;
  uint64_t v45;
  const CGRect *v46;
  unsigned int v47;
  CGSize size;
  __int128 v49;
  int v50;
  CGImage *Image;
  CGImage *v52;
  CGAffineTransform v53;
  CGRect v54;
  CGRect v55;
  CGAffineTransform v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;

  v8 = (double *)CG::DisplayListRecorder::currentDisplayList(a1);
  if (!v8)
    return 1000;
  v9 = v8;
  if (v8[5] == INFINITY || v8[6] == INFINITY)
    return 0;
  result = 0;
  if (v9[7] == 0.0 || v9[8] == 0.0)
    return result;
  if (a4)
  {
    v12 = *(const __CFDictionary **)(a4 + 32);
    v13 = *(_OWORD *)(a3 + 40);
    *(_OWORD *)&v56.a = *(_OWORD *)(a3 + 24);
    *(_OWORD *)&v56.c = v13;
    *(_OWORD *)&v56.tx = *(_OWORD *)(a3 + 56);
    v14 = (char *)v9 + 73;
    if (!*((_BYTE *)v9 + 73))
      goto LABEL_29;
    p_size = &CGRectNull.size;
    v16 = (const CGRect *)(a4 + 88);
    p_y = (CGFloat *)(a4 + 96);
    if (*(_QWORD *)(a4 + 592) == *(_QWORD *)(a4 + 600))
      p_y = &CGRectNull.origin.y;
    else
      p_size = (CGSize *)(a4 + 104);
    if (*(_QWORD *)(a4 + 592) == *(_QWORD *)(a4 + 600))
    {
      v16 = &CGRectNull;
      p_height = &CGRectNull.size.height;
    }
    else
    {
      p_height = (CGFloat *)(a4 + 112);
    }
    height = *p_height;
    x = v16->origin.x;
    y = *p_y;
    width = p_size->width;
    if (v12 && CGCFDictionaryGetRect(v12, CFSTR("kCGContextBoundingBox"), (UInt8 *)&v54))
    {
      v57.origin.x = x;
      v57.origin.y = y;
      v57.size.width = width;
      v57.size.height = height;
      v58 = CGRectIntersection(v57, v54);
      x = v58.origin.x;
      y = v58.origin.y;
      width = v58.size.width;
      height = v58.size.height;
      v55.origin.x = v58.origin.x;
    }
  }
  else
  {
    v23 = *(_OWORD *)(a3 + 40);
    *(_OWORD *)&v56.a = *(_OWORD *)(a3 + 24);
    *(_OWORD *)&v56.c = v23;
    *(_OWORD *)&v56.tx = *(_OWORD *)(a3 + 56);
    v14 = (char *)v9 + 73;
    if (!*((_BYTE *)v9 + 73))
    {
      v12 = 0;
      goto LABEL_29;
    }
    v12 = 0;
    height = 0.0;
    y = INFINITY;
    width = 0.0;
    x = INFINITY;
  }
  v53 = v56;
  v59.origin.x = x;
  v59.origin.y = y;
  v59.size.width = width;
  v59.size.height = height;
  v55 = CGRectApplyAffineTransform(v59, &v53);
  CG::DisplayListRecorder::intersectRectWithClipConsideringStyle(&v55.origin.x, a2, *(double **)(a3 + 112), *(_QWORD *)(*(_QWORD *)(a3 + 120) + 16));
  v55.origin.x = v27;
  v55.origin.y = v24;
  v55.size.width = v25;
  v55.size.height = v26;
  if (v27 == INFINITY || v24 == INFINITY)
    return 0;
  result = 0;
  if (v25 == 0.0 || v26 == 0.0)
    return result;
LABEL_29:
  v28 = *(_QWORD *)(a4 + 592);
  v29 = *(_QWORD *)(a4 + 600);
  if (v28 == v29)
  {
LABEL_38:
    v32 = CG::DisplayList::displayListResourceForDisplayList((uint64_t)(v9 + 2), a4);
    if (!v32)
      return 1000;
    v33 = v32;
    EntryDrawingState = (_QWORD *)CG::DisplayList::getEntryDrawingState((uint64_t *)v9 + 2, a3, a2);
    v35 = EntryDrawingState[1];
    if (!v35)
      return 1000;
    v36 = EntryDrawingState;
    v37 = *(_DWORD *)(v35 + 8);
    v38 = EntryDrawingState[2];
    if (v38)
      v37 |= *(_DWORD *)(v38 + 8);
    v39 = v37 & 0x1000;
    v40 = EntryDrawingState[3];
    if (v40)
      v39 |= *(_DWORD *)(v40 + 8) & 0x3400;
    v41 = *(_QWORD *)(a3 + 120);
    if (*(double *)(v41 + 8) >= 1.0)
    {
      if (a4)
        v43 = *(_DWORD *)(a4 + 80) & 0x1000;
      else
        v43 = 0;
      v42 = v43 | v39;
    }
    else
    {
      v42 = v39 | 0x1000;
    }
    if ((v42 & 0x1000) == 0 && (((int)(*(_DWORD *)(v41 + 4) << 16) >> 24) - 3) < 0xFFFFFFFE)
      v42 |= 0x1000u;
    if ((v42 & 0x1000) == 0
      && v12
      && (CFDictionaryContainsKey(v12, CFSTR("kCGContextGroup"))
       || CFDictionaryContainsKey(v12, CFSTR("kCGContextColorSpace"))))
    {
      v42 |= 0x1000u;
    }
    if ((v42 & 0x3000) != 0)
      *((_DWORD *)v9 + 20) |= v42 & 0x3000;
    if (*((_BYTE *)v9 + 74))
    {
      if ((v42 & 0x400) != 0)
        EntryPatternState = CG::DisplayList::getEntryPatternState((_QWORD *)v9 + 2, a3, a2);
      else
        EntryPatternState = 0;
      v45 = operator new();
      v46 = &CGRectInfinite;
      v47 = *(_DWORD *)(*(_QWORD *)(a3 + 120) + 4);
      if (*v14)
        v46 = &v55;
      size = v46->size;
      *(CGPoint *)(v45 + 16) = v46->origin;
      *(CGSize *)(v45 + 32) = size;
      *(_OWORD *)(v45 + 120) = *(_OWORD *)&v56.tx;
      v49 = *(_OWORD *)&v56.a;
      *(_OWORD *)(v45 + 104) = *(_OWORD *)&v56.c;
      v50 = v47 << 8;
      if (((v47 >> 20) & 0xF) == 0)
        v50 = v47 << 12;
      *(_DWORD *)(v45 + 8) = (v42 << 8) | 7;
      *(_QWORD *)(v45 + 48) = v36;
      *(_QWORD *)(v45 + 56) = 0;
      *(_QWORD *)(v45 + 64) = 0;
      *(_QWORD *)(v45 + 72) = EntryPatternState;
      *(_QWORD *)v45 = &off_1E1629458;
      *(_QWORD *)(v45 + 80) = v33;
      *(_OWORD *)(v45 + 88) = v49;
      *(_DWORD *)(v45 + 136) = (char)v47;
      *(_DWORD *)(v45 + 140) = v50 >> 28;
      CG::DisplayList::appendEntry((int64x2_t *)v9 + 1, v45);
    }
    return 0;
  }
  while (1)
  {
    if (*(_BYTE *)(*(_QWORD *)v28 + 8) == 7)
    {
      v30 = *(_QWORD *)(*(_QWORD *)v28 + 80);
      if (v30)
      {
        v31 = *(_QWORD *)(v30 + 16);
        if (v31)
          break;
      }
    }
    v28 += 16;
LABEL_34:
    if (v28 == v29)
      goto LABEL_38;
  }
  if ((double *)v31 != v9)
  {
    v28 = *(_QWORD *)(v31 + 592);
    v29 = *(_QWORD *)(v31 + 600);
    goto LABEL_34;
  }
  Image = CG::DisplayList::createImage((CG::DisplayList *)(a4 + 16));
  if (Image)
  {
    v52 = Image;
    CG::DisplayListRecorder::DrawImage(a1, a2, a3, Image, *(double *)(a4 + 40), *(CGFloat *)(a4 + 48), *(double *)(a4 + 56), *(double *)(a4 + 64));
    CFRelease(v52);
    return 0;
  }
  return 1000;
}

void CGSoftMaskDelegateDrawSoftMask(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  const void *v10;

  if (a4 && *(_QWORD *)(a4 + 136))
  {
    v9 = CGContextCreateWithDelegateAndInfo(a1, 12, a2, a3, 0, 0, a7, a8);
    if (v9)
    {
      v10 = (const void *)v9;
      (*(void (**)(_QWORD, uint64_t))(a4 + 136))(*(_QWORD *)(a4 + 120), v9);
      CFRelease(v10);
    }
  }
}

uint64_t dlRecorder_DrawLayer(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  CFArrayRef *v12;
  double *v18;
  uint64_t v19;
  double v20;
  BOOL v22;
  double v24;
  char *Copy;
  uint64_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  const CGRect *v32;
  CGFloat *p_y;
  CGSize *p_size;
  CGFloat *p_height;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v41;
  double v42;

  if (!a1 || (v12 = *(CFArrayRef **)(a1 + 288)) == 0)
  {
    CGPostError((uint64_t)"%s: CGContextDelegateGetInfo() returned NULL", a2, a3, (uint64_t)a4, a5, a6, a7, a8, (char)"dlRecorder_DrawLayer");
    return 1000;
  }
  v18 = (double *)CG::DisplayListRecorder::currentDisplayList(v12);
  if (!v18)
    return 1000;
  v19 = (uint64_t)v18;
  v20 = v18[7];
  v22 = v18[5] == -8.98846567e307 && v18[6] == -8.98846567e307 && v20 == 1.79769313e308;
  if ((!v22 || v18[8] != 1.79769313e308)
    && *((_QWORD *)v18 + 74) != *((_QWORD *)v18 + 75)
    && v18[11] != INFINITY
    && v18[12] != INFINITY)
  {
    v24 = v18[8];
    v41 = v18[5];
    v42 = v18[6];
    Copy = CGGStateCreateCopy(a3);
    v26 = (uint64_t)Copy;
    v27 = *(float64x2_t *)(Copy + 24);
    v28 = *(float64x2_t *)(Copy + 40);
    v29 = vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(Copy + 56), v27, a9), v28, a10);
    v30 = vmulq_n_f64(v27, a11 / v20);
    v31 = vmulq_n_f64(v28, a12 / v24);
    *(float64x2_t *)(Copy + 24) = v30;
    *(float64x2_t *)(Copy + 40) = v31;
    *(float64x2_t *)(Copy + 56) = vmlsq_lane_f64(vmlsq_lane_f64(v29, v30, v41, 0), v31, v42, 0);
    v32 = &CGRectNull;
    p_y = &CGRectNull.origin.y;
    p_size = (CGSize *)(v19 + 104);
    p_height = (CGFloat *)(v19 + 112);
    if (*(_QWORD *)(v19 + 592) == *(_QWORD *)(v19 + 600))
      p_size = &CGRectNull.size;
    else
      p_y = (CGFloat *)(v19 + 96);
    if (*(_QWORD *)(v19 + 592) == *(_QWORD *)(v19 + 600))
      p_height = &CGRectNull.size.height;
    else
      v32 = (const CGRect *)(v19 + 88);
    CGGStateClipToRect((uint64_t)Copy, v32->origin.x, *p_y, p_size->width, *p_height);
    CGDisplayListDelegateDrawDisplayList(a4, a2, v26, v19, v36, v37, v38, v39);
    CGGStateRelease(v26);
  }
  return 0;
}

void CGDisplayListDelegateDrawDisplayList(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFDictionary *v13;
  _BOOL4 v14;
  double (*v15)(_QWORD *, uint64_t, uint64_t);
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  _BOOL4 v23;
  const CGRect *v24;
  CGFloat *v25;
  CGSize *v26;
  CGFloat *v27;
  double height;
  double x;
  double y;
  double width;
  unsigned int *v32;
  char *v33;
  __CFDictionary *Mutable;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __CFDictionary *v40;
  const void *v41;
  _QWORD *CGDisplayList;
  void (*v43)(_QWORD *, unsigned int *, char *, uint64_t);
  double *v44;
  double Bounds;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __n64 v53;
  const CGRect *v57;
  CGFloat *p_y;
  CGSize *p_size;
  CGFloat *p_height;
  void (*v61)(_QWORD *, unsigned int *, char *, uint64_t);
  unsigned int v62;
  unsigned int v63;
  CGContext *v64;
  CGContext *v65;
  uint64_t *v66;
  CGRect *v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  _OWORD v74[3];
  CGRect v75;
  CGRect v76;
  CGRect v77;
  CGRect v78;
  CGRect v79;
  CGRect v80;

  if (!a4 || *(_QWORD *)(a4 + 592) == *(_QWORD *)(a4 + 600))
    return;
  if (*(double *)(a4 + 88) == INFINITY || *(double *)(a4 + 96) == INFINITY)
    return;
  v13 = *(const __CFDictionary **)(a4 + 32);
  if (v13)
  {
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a4 + 32), CFSTR("kCGContextGroup")))
    {
      v14 = 1;
      if (!a3)
        goto LABEL_18;
LABEL_14:
      if (a1)
      {
        v15 = (double (*)(_QWORD *, uint64_t, uint64_t))a1[6];
        if (v15)
        {
          v16 = v15(a1, a2, a3);
          v18 = v17;
          v20 = v19;
          v22 = v21;
        }
        else
        {
          v20 = 1.79769313e308;
          v16 = -8.98846567e307;
          v18 = -8.98846567e307;
          v22 = 1.79769313e308;
        }
      }
      else
      {
        v20 = 0.0;
        v16 = INFINITY;
        v18 = INFINITY;
        v22 = 0.0;
      }
      v44 = *(double **)(a3 + 112);
      if (v44)
      {
        Bounds = CGClipStackGetBounds(v44);
        v47 = v46;
        v49 = v48;
        v51 = v50;
      }
      else
      {
        v47 = 0xFFDFFFFFFFFFFFFFLL;
        v49 = 0x7FEFFFFFFFFFFFFFLL;
        Bounds = -8.98846567e307;
        v51 = 0x7FEFFFFFFFFFFFFFLL;
      }
      v76.origin.x = v16;
      v76.origin.y = v18;
      v76.size.width = v20;
      v76.size.height = v22;
      v77 = CGRectIntersection(v76, *(CGRect *)&Bounds);
      if (v77.origin.x == INFINITY || v77.origin.y == INFINITY || v77.size.width == 0.0 || v77.size.height == 0.0)
        return;
      v52 = *(_OWORD *)(a3 + 40);
      v74[0] = *(_OWORD *)(a3 + 24);
      v74[1] = v52;
      v74[2] = *(_OWORD *)(a3 + 56);
      v53.n64_u64[0] = CGRectApplyInverseAffineTransform((double *)v74, *(__n64 *)&v77.origin.x, v77.origin.y, v77.size.width, v77.size.height).n64_u64[0];
      v57 = &CGRectNull;
      p_y = &CGRectNull.origin.y;
      p_size = (CGSize *)(a4 + 104);
      p_height = (CGFloat *)(a4 + 112);
      if (*(_QWORD *)(a4 + 592) == *(_QWORD *)(a4 + 600))
        p_size = &CGRectNull.size;
      else
        p_y = (CGFloat *)(a4 + 96);
      if (*(_QWORD *)(a4 + 592) == *(_QWORD *)(a4 + 600))
        p_height = &CGRectNull.size.height;
      else
        v57 = (const CGRect *)(a4 + 88);
      v80.size.height = *p_height;
      v80.origin.x = v57->origin.x;
      v80.origin.y = *p_y;
      v80.size.width = p_size->width;
      v78 = CGRectIntersection(*(CGRect *)v53.n64_u64, v80);
      x = v78.origin.x;
      v75 = v78;
      if (v78.origin.x == INFINITY)
        return;
      y = v78.origin.y;
      if (v78.origin.y == INFINITY)
        return;
      width = v78.size.width;
      if (v78.size.width == 0.0)
        return;
      height = v78.size.height;
      if (v78.size.height == 0.0)
        return;
      v23 = 0;
      if (!v14)
      {
        v73 = *(_QWORD *)(a3 + 120);
        if (*(double *)(v73 + 8) != 1.0
          || *(_QWORD *)(v73 + 16)
          || *(_QWORD *)(v73 + 40)
          || *(unsigned __int8 *)(v73 + 5) << 8 != 512)
        {
          v23 = 1;
        }
      }
      goto LABEL_24;
    }
    v14 = CFDictionaryContainsKey(v13, CFSTR("kCGContextColorSpace")) != 0;
    if (a3)
      goto LABEL_14;
  }
  else
  {
    v14 = 0;
    if (a3)
      goto LABEL_14;
  }
LABEL_18:
  v23 = 0;
  v24 = &CGRectNull;
  v25 = &CGRectNull.origin.y;
  v26 = &CGRectNull.size;
  if (*(_QWORD *)(a4 + 592) != *(_QWORD *)(a4 + 600))
    v26 = (CGSize *)(a4 + 104);
  v27 = (CGFloat *)(a4 + 112);
  if (*(_QWORD *)(a4 + 592) == *(_QWORD *)(a4 + 600))
  {
    v27 = &CGRectNull.size.height;
  }
  else
  {
    v25 = (CGFloat *)(a4 + 96);
    v24 = (const CGRect *)(a4 + 88);
  }
  height = *v27;
  x = v24->origin.x;
  y = *v25;
  width = v26->width;
  v75.origin.x = v24->origin.x;
  v75.origin.y = y;
  v75.size.width = width;
  v75.size.height = height;
LABEL_24:
  if (a1 && !a1[16])
  {
    if (v14 || v23)
    {
      v64 = (CGContext *)CGContextCreateWithDelegateAndInfo(a1, 0, a2, a3, 0, 0, a7, a8);
      if (!v64)
        return;
      v65 = v64;
      v79.origin.x = x;
      v79.origin.y = y;
      v79.size.width = width;
      v79.size.height = height;
      CGContextBeginTransparencyLayerWithRect(v64, v79, v13);
      v66 = (uint64_t *)*((_QWORD *)v65 + 13);
      v32 = (unsigned int *)*((_QWORD *)v65 + 14);
    }
    else
    {
      v32 = (unsigned int *)a2;
      if (!a2)
      {
        v32 = CGRenderingStateCreate();
        if (!v32)
          return;
      }
      v66 = CGGStackCreateWithGState(a3);
      v65 = 0;
    }
    if (height == 1.79769313e308 && width == 1.79769313e308 && y == -8.98846567e307 && x == -8.98846567e307)
      LODWORD(v70) = 0;
    else
      v70 = &v75;
    CG::DisplayList::execute(a4 + 16, (int)a1, (int)v32, (int)v66, (int)v70, 0);
    if (v65)
    {
      CGContextEndTransparencyLayer(v65);
      CFRelease(v65);
    }
    else
    {
      if (v66)
      {
        CGGStackReset(v66);
        free(v66);
      }
      if (v32 != (unsigned int *)a2 && v32)
      {
        do
        {
          v71 = __ldxr(v32);
          v72 = v71 - 1;
        }
        while (__stxr(v72, v32));
        if (!v72)
          goto LABEL_69;
      }
    }
  }
  else
  {
    v32 = (unsigned int *)a2;
    if (a2 || (v32 = CGRenderingStateCreate()) != 0)
    {
      v33 = (char *)a3;
      if (a3 || (v33 = CGGStateCreate()) != 0)
      {
        if (v23)
        {
          Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (Mutable)
          {
            v40 = Mutable;
            v41 = (const void *)*MEMORY[0x1E0C9AE50];
            if (*MEMORY[0x1E0C9AE50])
              CFDictionarySetValue(Mutable, CFSTR("kCGContextGroup"), v41);
            CGDisplayList = CG::DisplayList::createCGDisplayList(a4, v40, (uint64_t)v41, v35, v36, v37, v38, v39);
            CFRelease(v40);
            if (CGDisplayList)
            {
              if (a1)
              {
                v43 = (void (*)(_QWORD *, unsigned int *, char *, uint64_t))a1[16];
                if (v43)
                  v43(a1, v32, v33, a4);
              }
              if (CGDisplayList != (_QWORD *)a4)
                CFRelease(CGDisplayList);
            }
          }
        }
        else if (a1)
        {
          v61 = (void (*)(_QWORD *, unsigned int *, char *, uint64_t))a1[16];
          if (v61)
            v61(a1, v32, v33, a4);
        }
        if (v33 != (char *)a3)
          CGGStateRelease((uint64_t)v33);
      }
      if (v32 != (unsigned int *)a2)
      {
        do
        {
          v62 = __ldxr(v32);
          v63 = v62 - 1;
        }
        while (__stxr(v63, v32));
        if (!v63)
LABEL_69:
          free(v32);
      }
    }
  }
}

void CGContextEndTransparencyLayer(CGContextRef c)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v18;
  const void *v19;
  const void *v20;
  CGContextRef v21;
  char v22;

  if (!c)
  {
    v21 = 0;
LABEL_13:
    handle_invalid_context((char)"CGContextEndTransparencyLayer", (uint64_t)v21, v2, v3, v4, v5, v6, v7);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v21 = c;
    goto LABEL_13;
  }
  v10 = CGGStackRestore(*((uint64_t **)c + 13), v1, v2, v3, v4, v5, v6, v7);
  *((_QWORD *)c + 12) = v10;
  v16 = *((_QWORD *)c + 5);
  if (v16 && (v17 = *(uint64_t (**)(void))(v16 + 200)) != 0 && (v18 = v17()) != 0)
  {
    v19 = (const void *)v18;
    v20 = (const void *)*((_QWORD *)c + 5);
    if (v20 != v19)
    {
      if (v20)
        CFRelease(v20);
      *((_QWORD *)c + 5) = v19;
    }
  }
  else
  {
    CGPostError((uint64_t)"CGContextEndTransparencyLayer: unbalanced transparency layers.", v9, v10, v11, v12, v13, v14, v15, v22);
  }
}

uint64_t ripc_EndLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *Cache;
  CGColorSpace *v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  BOOL v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, _QWORD *, CGFloat, CGFloat, double, double);
  uint64_t v19;
  _QWORD *v20;
  CGColorSpace *v21;
  uint64_t v22;
  const void *v23;
  size_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  CGDataProvider *Image;
  CGDataProvider *v47;
  __int128 v48;
  void (*v49)(uint64_t, uint64_t, uint64_t, CGDataProvider *, double, double, double, double);
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  _OWORD v56[3];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  int v61[2];
  _QWORD v62[2];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;

  v5 = a1;
  v79 = *MEMORY[0x1E0C80C00];
  if (a1)
    v6 = *(_QWORD *)(a1 + 288);
  else
    v6 = 0;
  v7 = *(_QWORD **)(v6 + 88);
  if (v7)
  {
    Cache = CGColorTransformGetCache(*(_QWORD **)(v6 + 16));
    if (Cache)
    {
      v9 = (CGColorSpace *)Cache[2];
      if (v9)
        CFRetain((CFTypeRef)Cache[2]);
    }
    else
    {
      v9 = 0;
    }
    v75 = xmmword_185000760;
    v76 = unk_185000770;
    v77 = xmmword_185000780;
    v78 = 0;
    v71 = xmmword_185000720;
    v72 = unk_185000730;
    v73 = xmmword_185000740;
    v74 = unk_185000750;
    v67 = xmmword_1850006E0;
    v68 = unk_1850006F0;
    v69 = xmmword_185000700;
    v70 = unk_185000710;
    v63 = RIPImageDataInitializer;
    v64 = *(_OWORD *)algn_1850006B0;
    v65 = xmmword_1850006C0;
    v66 = unk_1850006D0;
    v60 = 0;
    v58 = 0u;
    v59 = 0u;
    v57 = 0u;
    *(_QWORD *)(v6 + 88) = *v7;
    v22 = *(_QWORD *)(v6 + 48);
    *(_QWORD *)(v6 + 48) = v7[4];
    v23 = *(const void **)(v6 + 16);
    if (v23)
      CFRelease(v23);
    *(_QWORD *)(v6 + 16) = v7[1];
    *(_OWORD *)(v6 + 24) = *((_OWORD *)v7 + 1);
    ripc_ReleaseClipState((_QWORD **)(v6 + 72));
    *(_QWORD *)(v6 + 72) = v7[5];
    free(v7);
    memset(v56, 0, sizeof(v56));
    if (!ripc_GetRenderingState(v6, a2, a3, (uint64_t)v56) || !v22)
    {
      if (!v22)
        return v5;
      goto LABEL_41;
    }
    if (!(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v22 + 32))(v22, 16, 0))
    {
LABEL_41:
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
      return v5;
    }
    if (*(int *)(v22 + 20) >= 1 && *(int *)(v22 + 24) >= 1 && *(_QWORD *)(v22 + 56))
    {
      if ((CGColorTransformConvertNeedsCMS(*(_QWORD **)(v6 + 120), v9, 0) & 1) == 0)
      {
        v34 = 0;
        v35 = *(_QWORD *)(v22 + 32);
        *(_QWORD *)&v65 = v35;
        DWORD2(v66) = *(_DWORD *)(v22 + 20);
        DWORD2(v65) = DWORD2(v66);
        HIDWORD(v66) = *(_DWORD *)(v22 + 24);
        *(_QWORD *)&v66 = 0;
        HIDWORD(v65) = HIDWORD(v66);
        LODWORD(v67) = *(_DWORD *)(v22 + 48);
        *((_QWORD *)&v67 + 1) = *(_QWORD *)(v22 + 56);
        *((_QWORD *)&v68 + 1) = *(_QWORD *)(v22 + 72);
        LODWORD(v68) = *(_DWORD *)(v22 + 64);
        v69 = 0uLL;
        goto LABEL_36;
      }
      v53 = 0;
      v24 = *(int *)(v22 + 24);
      v54 = *(_DWORD *)(v22 + 20);
      v55 = v24;
      v25 = *(_DWORD *)(v22 + 48);
      v26 = *(_QWORD *)(v22 + 72);
      v62[0] = *(_QWORD *)(v22 + 56);
      v62[1] = v26;
      v27 = *(_DWORD *)(v22 + 64);
      v61[0] = v25;
      v61[1] = v27;
      v28 = CGSImageDataLockPixels(v54, v24, (uint64_t)v62, v61, *(_DWORD **)(v22 + 32), v9, v54, v24, (uint64_t)&v53, 0, *(_QWORD **)(v6 + 120), *(_DWORD *)(v6 + 216), *(int **)(*(_QWORD *)(v6 + 48) + 32));
      if (v28)
      {
        v34 = (uint64_t *)v28;
        RIPImageDataInitialize((uint64_t)&v63, v6, v28, v29, v30, v31, v32, v33);
        v35 = v65;
LABEL_36:
        CGColorSpaceRelease(v9);
        if (v35 == RIPGetDepthForLayerFormat(0, v36, v37, v38, v39, v40, v41, v42))
          *(_QWORD *)&v65 = 0;
        v57 = *(_OWORD *)(v22 + 12);
        v60 = 0;
        *(_QWORD *)&v59 = 0;
        v58 = (unint64_t)&v63;
        DWORD2(v59) = 0;
        ripc_RenderImage(v6, a2, a3, (uint64_t *)v56, (int *)&v57, (uint64_t)&v57, v43, v44);
        if (v34)
          CGSImageDataUnlock(v34);
      }
    }
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 48))(v22, 0);
    goto LABEL_41;
  }
  v5 = *(_QWORD *)(v6 + 96);
  if (v5)
  {
    *(_QWORD *)(v6 + 96) = 0;
    v51 = 0;
    v52 = 0;
    v10 = *(_QWORD *)(v6 + 48);
    if (v10)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 72))(v10, &v51))
      {
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 48) + 88))(*(_QWORD *)(v6 + 48), v6 + 40);
        v11 = (double)(int)v51;
        v12 = (double)SHIDWORD(v51);
        v13 = (double)(int)v52;
        v14 = (double)SHIDWORD(v52);
        v15 = *(double *)(v6 + 40);
        if (v15 != 1.0)
        {
          v16 = 1.0 / v15;
          v11 = v16 * v11;
          v12 = v16 * v12;
          v13 = v16 * v13;
          v14 = v16 * v14;
        }
        v17 = v11 == INFINITY || v12 == INFINITY;
        if (!v17 && v13 != 0.0 && v14 != 0.0)
        {
          v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *, CGFloat, CGFloat, double, double))(v5 + 80);
          v19 = *(_QWORD *)(v6 + 48);
          v20 = CGColorTransformGetCache(*(_QWORD **)(v6 + 16));
          v21 = v20 ? (CGColorSpace *)v20[2] : 0;
          Image = RIPLayerCreateImage(v19, v21, v18 != ripc_DrawImage);
          if (Image)
          {
            v47 = Image;
            v48 = *(_OWORD *)(a3 + 40);
            v63 = *(_OWORD *)(a3 + 24);
            v64 = v48;
            v65 = *(_OWORD *)(a3 + 56);
            *(CGAffineTransform *)(a3 + 24) = CGAffineTransformIdentity;
            v49 = *(void (**)(uint64_t, uint64_t, uint64_t, CGDataProvider *, double, double, double, double))(v5 + 80);
            if (v49)
              v49(v5, a2, a3, Image, v11, v12, v13, v14);
            v50 = v64;
            *(_OWORD *)(a3 + 24) = v63;
            *(_OWORD *)(a3 + 40) = v50;
            *(_OWORD *)(a3 + 56) = v65;
            CFRelease(v47);
          }
        }
      }
    }
  }
  return v5;
}

void CGContextBeginTransparencyLayer(CGContextRef c, CFDictionaryRef auxiliaryInfo)
{
  const __CFDictionary *Value;
  const __CFDictionary *v5;
  CFTypeID v6;
  int v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CGContext *v13;
  __int128 v14;
  __int128 v15;

  if (auxiliaryInfo
    && ((Value = (const __CFDictionary *)CFDictionaryGetValue(auxiliaryInfo, CFSTR("kCGTransparencyLayerContentBounds")),
         v14 = 0u,
         v15 = 0u,
         Value)
     && (v5 = Value, v6 = CFGetTypeID(Value), v6 == CFDictionaryGetTypeID())
     && (get_point_from_dict(v5, (double *)&v14), v7)
     && (get_size_from_dict(v5, (double *)&v15), (v8 & 1) != 0)
     || CGCFDictionaryGetRect(auxiliaryInfo, CFSTR("kCGContextBoundingBox"), (UInt8 *)&v14)))
  {
    v10 = *((_QWORD *)&v14 + 1);
    v9 = v14;
    v12 = *((_QWORD *)&v15 + 1);
    v11 = v15;
    v13 = c;
  }
  else
  {
    v9 = 0xFFDFFFFFFFFFFFFFLL;
    v11 = 0x7FEFFFFFFFFFFFFFLL;
    v13 = c;
    v10 = 0xFFDFFFFFFFFFFFFFLL;
    v12 = 0x7FEFFFFFFFFFFFFFLL;
  }
  CGContextBeginTransparencyLayerWithRect(v13, *(CGRect *)&v9, auxiliaryInfo);
}

void CGContextBeginTransparencyLayerWithRect(CGContextRef c, CGRect rect, CFDictionaryRef auxInfo)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double height;
  double width;
  double y;
  double x;
  uint64_t v15;
  uint64_t (*v16)(__n128, __n128, __n128, __n128);
  const void *v17;
  CGFloat v18;
  CGFloat v19;
  double DeviceClipBoundingBox;
  double v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  double v29;
  double v30;
  double v31;
  __int128 v32;
  double v33;
  double v34;
  double v35;
  CGFloat DrawBoundingBoxWithMatrix;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  uint64_t v40;
  __int128 v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, _QWORD, _QWORD, CFDictionaryRef, _QWORD, double, double, double, double);
  uint64_t v53;
  const void *v54;
  CGContextRef v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char **v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  CGAffineTransform color;
  CGRect v91;
  CGRect v92;
  CGRect v93;
  CGRect v94;
  CGRect v95;
  CGRect v96;

  if (!c)
  {
    v55 = 0;
LABEL_22:
    handle_invalid_context((char)"CGContextBeginTransparencyLayerWithRect", (uint64_t)v55, v3, v4, v5, v6, v7, v8);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v55 = c;
    goto LABEL_22;
  }
  height = rect.size.height;
  width = rect.size.width;
  y = rect.origin.y;
  x = rect.origin.x;
  v15 = *((_QWORD *)c + 5);
  if (v15)
  {
    v16 = *(uint64_t (**)(__n128, __n128, __n128, __n128))(v15 + 192);
    if (v16)
    {
      v17 = (const void *)v16((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
      if (v17)
        goto LABEL_25;
    }
  }
  DeviceClipBoundingBox = CGContextGetDeviceClipBoundingBox((uint64_t)c, (uint64_t)auxInfo, v3, v4, v5, v6, v7, v8);
  v22 = v21;
  v23 = v18;
  v24 = v19;
  v25 = *((_QWORD *)c + 12);
  v26 = *(_QWORD *)(*(_QWORD *)(v25 + 120) + 16);
  if (v26)
  {
    v27 = *((_QWORD *)c + 14);
    v28 = *(_OWORD *)(v27 + 40);
    *(_OWORD *)&color.a = *(_OWORD *)(v27 + 24);
    *(_OWORD *)&color.c = v28;
    *(_OWORD *)&color.tx = *(_OWORD *)(v27 + 56);
    DeviceClipBoundingBox = CGStyleGetDrawBoundingBoxWithMatrix(v26, &color, DeviceClipBoundingBox, v22, v18, v19);
    v22 = v29;
    v23 = v30;
    v24 = v31;
  }
  if (x != -8.98846567e307 || y != -8.98846567e307 || width != 1.79769313e308 || height != 1.79769313e308)
  {
    v32 = *(_OWORD *)(v25 + 40);
    *(_OWORD *)&color.a = *(_OWORD *)(v25 + 24);
    *(_OWORD *)&color.c = v32;
    *(_OWORD *)&color.tx = *(_OWORD *)(v25 + 56);
    v33 = x;
    *(double *)&v32 = y;
    v34 = width;
    v35 = height;
    v91 = CGRectApplyAffineTransform(*(CGRect *)((char *)&v32 - 8), &color);
    DrawBoundingBoxWithMatrix = v91.origin.x;
    v37 = v91.origin.y;
    v38 = v91.size.width;
    v39 = v91.size.height;
    if (v26)
    {
      v40 = *((_QWORD *)c + 14);
      v41 = *(_OWORD *)(v40 + 40);
      *(_OWORD *)&color.a = *(_OWORD *)(v40 + 24);
      *(_OWORD *)&color.c = v41;
      *(_OWORD *)&color.tx = *(_OWORD *)(v40 + 56);
      DrawBoundingBoxWithMatrix = CGStyleGetDrawBoundingBoxWithMatrix(v26, &color, v91.origin.x, v37, v91.size.width, v91.size.height);
      v37 = v42;
      v38 = v43;
      v39 = v44;
    }
    v92.origin.x = DeviceClipBoundingBox;
    v92.origin.y = v22;
    v92.size.width = v23;
    v92.size.height = v24;
    v93 = CGRectIntersection(v92, *(CGRect *)&DrawBoundingBoxWithMatrix);
    DeviceClipBoundingBox = v93.origin.x;
    v22 = v93.origin.y;
    v23 = v93.size.width;
    v24 = v93.size.height;
  }
  v94.origin.x = DeviceClipBoundingBox;
  v94.origin.y = v22;
  v94.size.width = v23;
  v94.size.height = v24;
  v95 = CGRectIntegral(v94);
  v51 = CGContextDelegateCreateForContext(auxInfo, (uint64_t)c, v45, v46, v47, v48, v49, v50, (__n128)v95.origin, *(__n128 *)&v95.origin.y, (__n128)v95.size, *(__n128 *)&v95.size.height);
  v17 = (const void *)v51;
  if (!v51)
    goto LABEL_25;
  v52 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFDictionaryRef, _QWORD, double, double, double, double))(v51 + 192);
  if (v52)
  {
    v53 = v52(v51, *((_QWORD *)c + 14), *((_QWORD *)c + 12), auxInfo, *((_QWORD *)c + 5), x, y, width, height);
    v54 = (const void *)v53;
    if (v53 && (const void *)v53 == v17)
      goto LABEL_25;
  }
  else
  {
    v54 = 0;
  }
  CFRelease(v17);
  v17 = v54;
LABEL_25:
  v56 = *((_QWORD *)c + 13);
  v57 = *(_QWORD *)(v56 + 8);
  if (v57 == v56)
  {
    v58 = CGGStateCreate();
    v59 = *(char ***)(v56 + 8);
    *(_QWORD *)(v56 + 8) = v58;
    *(_QWORD *)v58 = v56;
    *v59 = v58;
    *((_QWORD *)v58 + 1) = v59;
    v57 = *(_QWORD *)(v56 + 8);
  }
  v60 = (char *)malloc_type_calloc(1uLL, 0x98uLL, 0xA3729uLL);
  *(_QWORD *)v60 = v60;
  *((_QWORD *)v60 + 1) = v60;
  *((_DWORD *)v60 + 4) = 1;
  v61 = *(_OWORD *)(v57 + 24);
  v62 = *(_OWORD *)(v57 + 40);
  *(_OWORD *)(v60 + 56) = *(_OWORD *)(v57 + 56);
  *(_OWORD *)(v60 + 40) = v62;
  *(_OWORD *)(v60 + 24) = v61;
  v63 = *(_QWORD *)(v57 + 72);
  if (v63)
    CFRetain(*(CFTypeRef *)(v57 + 72));
  *((_QWORD *)v60 + 9) = v63;
  CGGStateClipReset((uint64_t)v60);
  v64 = *(_QWORD *)(v57 + 120);
  v65 = (char *)malloc_type_calloc(1uLL, 0x38uLL, 0xA3729uLL);
  *(_DWORD *)v65 = 1;
  v66 = *((_DWORD *)v65 + 1) & 0xFFFF00FF | 0x200;
  *((_DWORD *)v65 + 1) = v66;
  *((_QWORD *)v65 + 1) = 0x3FF0000000000000;
  *((_QWORD *)v65 + 2) = 0;
  *(_OWORD *)(v65 + 24) = *(_OWORD *)(v64 + 24);
  v67 = *(_DWORD *)(v64 + 4) & 0xF0000 | v66 & 0xFFF002FF;
  *((_DWORD *)v65 + 1) = v67;
  v68 = v67 & 0xFF0FFFFF | *(_DWORD *)(v64 + 4) & 0xF00000;
  *((_DWORD *)v65 + 1) = v68;
  v69 = v68 & 0xFFFFFE00 | *(unsigned __int8 *)(v64 + 4);
  *((_DWORD *)v65 + 1) = v69;
  *((_DWORD *)v65 + 1) = v69 & 0xFCFFFFFF | *(_DWORD *)(v64 + 4) & 0x1000000;
  *((_QWORD *)v65 + 5) = 0;
  *((_QWORD *)v60 + 15) = v65;
  v60[20] &= ~2u;
  CGGStateStrokeCopy((uint64_t)v60, v57, v70, v71, v72, v73, v74, v75);
  CGGStateTextCopy((uint64_t)v60, v57, v76, v77, v78, v79, v80, v81);
  CGGStateDeviceCopy((uint64_t)v60, v57);
  v89 = *(_QWORD **)(v56 + 8);
  *(_QWORD *)(v56 + 8) = v60;
  *(_QWORD *)v60 = v56;
  *v89 = v60;
  *((_QWORD *)v60 + 1) = v89;
  *((_QWORD *)c + 12) = *(_QWORD *)(v56 + 8);
  if (v17)
  {
    *((_QWORD *)c + 5) = v17;
  }
  else
  {
    CGPostError((uint64_t)"CGContextBeginTransparencyLayer: cannot create transparency layer.", v82, v83, v84, v85, v86, v87, v88, SLOBYTE(color.a));
    CGGStateClipToRect(*((_QWORD *)c + 12), 0.0, 0.0, 0.0, 0.0);
  }
  color.a = 0.0;
  if (kCGColorComponents_block_invoke_once != -1)
    dispatch_once(&kCGColorComponents_block_invoke_once, &__block_literal_global_24_2179);
  if (CGCFDictionaryGetCFTypeRef(auxInfo, CFSTR("kCGContextBackgroundColor"), CGColorGetTypeID_color_type_id, (uint64_t *)&color))
  {
    CGContextSaveGState(c);
    CGContextSetBlendMode(c, kCGBlendModeCopy);
    CGContextSetFillColorWithColor(c, *(CGColorRef *)&color.a);
    v96.origin.x = -8.98846567e307;
    v96.size.width = 1.79769313e308;
    v96.origin.y = -8.98846567e307;
    v96.size.height = 1.79769313e308;
    CGContextFillRect(c, v96);
    CGContextRestoreGState(c);
  }
}

uint64_t CGCFDictionaryGetCFTypeRef(CFDictionaryRef theDict, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = 0;
  if (theDict)
  {
    if (a2)
    {
      result = (uint64_t)CFDictionaryGetValue(theDict, a2);
      if (result)
      {
        v8 = result;
        if (a3 && CFGetTypeID((CFTypeRef)result) != a3)
        {
          return 0;
        }
        else
        {
          if (a4)
            *a4 = v8;
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t ripc_BeginLayer(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float64x2_t v22;
  float64x2_t v23;
  _QWORD *v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  CGFloat v37;
  double v38;
  double v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  double v43;
  double v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  unsigned int *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  const void *v58;
  dispatch_once_t v59;
  unsigned int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  CGAffineTransform v66;
  CGColorSpace *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;

  v16 = a1;
  if (a1)
    v17 = *(_QWORD *)(a1 + 288);
  else
    v17 = 0;
  v67 = 0;
  if (!a5 || *(_QWORD *)(v17 + 96) || *(_QWORD *)(v17 + 88))
  {
    v69 = 0u;
    v70 = 0u;
    v68 = 0u;
    if ((ripc_GetRenderingState(v17, a2, a3, (uint64_t)&v68) & 1) == 0)
    {
      v69 = 0u;
      v70 = 0u;
      v68 = 0u;
      ripc_InitializeColorTransform(v17);
    }
    v18 = malloc_type_malloc(0x30uLL, 0x10600404FCFB723uLL);
    if (v18)
    {
      v24 = v18;
      *v18 = *(_QWORD *)(v17 + 88);
      *(_QWORD *)(v17 + 88) = v18;
      v18[4] = *(_QWORD *)(v17 + 48);
      v25 = *(_QWORD *)(v17 + 16);
      if (v25)
        CFRetain(*(CFTypeRef *)(v17 + 16));
      v24[1] = v25;
      *((_OWORD *)v24 + 1) = *(_OWORD *)(v17 + 24);
      v24[5] = *(_QWORD *)(v17 + 72);
      *(_QWORD *)(v17 + 72) = 0;
      if (a4)
      {
        memset(&v66, 0, 32);
        if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1)
          dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_77);
        CGCFDictionaryGetCFTypeRef(a4, CFSTR("kCGContextColorSpace"), CGColorSpaceGetTypeID_type_id, (uint64_t *)&v67);
        if (CGCFDictionaryGetRect(a4, CFSTR("kCGContextBoundingBox"), (UInt8 *)&v66))
        {
          v73.origin.x = v66.a;
          v73.origin.y = v66.b;
          v73.size.width = v66.c;
          v73.size.height = v66.d;
          v71.origin.x = a6;
          v71.origin.y = a7;
          v71.size.width = a8;
          v71.size.height = a9;
          *(CGRect *)((char *)&v22 - 24) = CGRectIntersection(v71, v73);
          a6 = v26;
          a7 = v27;
          a8 = v28;
          a9 = v22.f64[0];
        }
      }
      if (a6 != -8.98846567e307 || a7 != -8.98846567e307 || a8 != 1.79769313e308 || a9 != 1.79769313e308)
      {
        v22.f64[0] = *(float64_t *)(v17 + 40);
        v23.f64[0] = 1.0;
        __asm { FMOV            V5.2D, #1.0 }
        v34 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vceqq_f64(v22, v23).i64[0], 0), _Q5, (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v22.f64[0], 0));
        v35 = vmulq_f64(*(float64x2_t *)(a3 + 40), v34);
        v36 = vmulq_f64(*(float64x2_t *)(a3 + 56), v34);
        *(float64x2_t *)&v66.a = vmulq_f64(*(float64x2_t *)(a3 + 24), v34);
        *(float64x2_t *)&v66.c = v35;
        *(float64x2_t *)&v66.tx = v36;
        v37 = a6;
        v35.f64[0] = a7;
        v36.f64[0] = a8;
        v34.f64[0] = a9;
        v72 = CGRectApplyAffineTransform(*(CGRect *)((char *)&v34 - 24), &v66);
        v38 = v72.size.width + v72.origin.x;
        v39 = v72.origin.x + 0.0;
        if (v72.origin.x + 0.0 <= 1073741820.0)
        {
          if (v39 >= -1073741820.0)
            v40 = vcvtmd_s64_f64(v39);
          else
            v40 = -1073741823;
        }
        else
        {
          v40 = 0x3FFFFFFF;
        }
        LODWORD(v66.a) = v40;
        if (v38 <= 1073741820.0)
        {
          if (v38 >= -1073741820.0)
            v41 = vcvtpd_s64_f64(v38);
          else
            v41 = -1073741823;
        }
        else
        {
          v41 = 0x3FFFFFFF;
        }
        v42 = v41 - v40;
        LODWORD(v66.b) = v41 - v40;
        v43 = v72.size.height + v72.origin.y;
        v44 = v72.origin.y + 0.0;
        if (v44 <= 1073741820.0)
        {
          if (v44 >= -1073741820.0)
            v45 = vcvtmd_s64_f64(v44);
          else
            v45 = -1073741823;
        }
        else
        {
          v45 = 0x3FFFFFFF;
        }
        HIDWORD(v66.a) = v45;
        if (v43 <= 1073741820.0)
        {
          if (v43 >= -1073741820.0)
            v46 = vcvtpd_s64_f64(v43);
          else
            v46 = -1073741823;
        }
        else
        {
          v46 = 0x3FFFFFFF;
        }
        v47 = v46 - v45;
        HIDWORD(v66.b) = v46 - v45;
        if (*((_QWORD *)&v70 + 1))
        {
          v64 = 0;
          v65 = 0;
          if ((*(unsigned int (**)(_QWORD, uint64_t *))(**((_QWORD **)&v70 + 1) + 40))(*((_QWORD *)&v70 + 1), &v64))
          {
            LODWORD(v66.a) = v40 + v64;
            HIDWORD(v66.a) = v45 + HIDWORD(v64);
            LODWORD(v66.b) = v42 + v65;
            HIDWORD(v66.b) = v47 + HIDWORD(v65);
          }
        }
        if ((CGSBoundsIntersection((int *)&v69 + 2, (int *)&v66, (_DWORD *)&v69 + 2) & 1) == 0)
          *(_QWORD *)&v70 = 0;
      }
      v48 = *(_QWORD **)(v17 + 200);
      v49 = *(_QWORD **)(v17 + 120);
      if (v48 == v49)
      {
        v52 = *(_QWORD **)(v17 + 16);
        if (v52 != v48)
        {
          if (v52)
          {
            CFRelease(v52);
            v48 = *(_QWORD **)(v17 + 120);
          }
          if (v48)
            CFRetain(v48);
          *(_QWORD *)(v17 + 16) = v48;
        }
        v53 = *(_QWORD *)(v17 + 48);
        if (v53)
          v51 = *(unsigned int **)(v53 + 32);
        else
          v51 = 0;
      }
      else
      {
        v50 = *(_QWORD *)(v17 + 48);
        if (v50)
          v51 = *(unsigned int **)(v50 + 32);
        else
          v51 = 0;
        if (v67 && CGColorTransformConvertNeedsCMS(v49, v67, 0))
        {
          if (v67)
            v57 = *(_DWORD *)(*((_QWORD *)v67 + 3) + 24);
          else
            v57 = -1;
          v58 = *(const void **)(v17 + 16);
          if (v58)
            CFRelease(v58);
          *(_QWORD *)(v17 + 16) = 0;
          if (v57 <= 2)
          {
            v59 = RIPLayerDepthForModel(v57, *v51, v54, v55, v56, v19, v20, v21);
            if (v59)
            {
              v60 = (unsigned int *)v59;
              v61 = color_transform_create(v67, 0);
              if (v61)
              {
                *(_QWORD *)(v17 + 16) = v61;
                v51 = v60;
              }
            }
          }
        }
      }
      if (a2)
        v62 = *(unsigned int *)(a2 + 4);
      else
        v62 = 3;
      *(_QWORD *)(v17 + 48) = RIPLayerCreate((uint64_t)RIPLayer_ripl_class, (uint64_t)&v69 + 8, 49, (uint64_t)v51, v62, v19, v20, v21);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    *(_QWORD *)(v17 + 96) = a5;
  }
  return v16;
}

BOOL CGCFDictionaryGetRect(const __CFDictionary *a1, const void *a2, UInt8 *a3)
{
  const __CFData *Value;
  const __CFData *v5;
  CFTypeID v6;

  if (a1
    && a2
    && (Value = (const __CFData *)CFDictionaryGetValue(a1, a2)) != 0
    && (v5 = Value, v6 = CFGetTypeID(Value), v6 == CFDataGetTypeID()))
  {
    return get_value_from_data(v5, a3, 32);
  }
  else
  {
    return 0;
  }
}

void CGContextDrawLayerAtPoint(CGContextRef context, CGPoint point, CGLayerRef layer)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(__n128, __n128, double, double);
  CGContextRef v12;

  if (!context)
  {
    v12 = 0;
LABEL_9:
    handle_invalid_context((char)"CGContextDrawLayerAtPoint", (uint64_t)v12, v3, v4, v5, v6, v7, v8);
    return;
  }
  if (*((_DWORD *)context + 4) != 1129601108)
  {
    v12 = context;
    goto LABEL_9;
  }
  if (layer)
  {
    v9 = *((_QWORD *)layer + 2);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 40);
      if (v10)
      {
        v11 = *(void (**)(__n128, __n128, double, double))(v10 + 216);
        if (v11)
          v11((__n128)point, *(__n128 *)&point.y, *((double *)layer + 3), *((double *)layer + 4));
      }
    }
  }
}

uint64_t CG::DisplayList::displayListResourceForDisplayList(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD **v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  char isEqualTo;
  unint64_t *v26;
  unint64_t v27;
  _DWORD *CGDisplayList;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint8x8_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  char v67;
  char v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  float v73;
  float v74;
  _BOOL8 v75;
  unint64_t v76;
  unint64_t v77;
  size_t v78;
  int8x8_t v79;
  unint64_t v80;
  uint8x8_t v81;
  _QWORD *v82;
  CG::DisplayList *v83;
  unint64_t v84;
  _QWORD *v85;
  CG::DisplayList *v86;
  _QWORD *v87;
  _QWORD *v88;
  std::__shared_weak_count *v89;
  char v90;

  if (!a2)
    return 0;
  ++*(_QWORD *)(a1 + 696);
  v87 = (_QWORD *)(a1 + 416);
  v4 = XXH64_digest(*(_QWORD **)(a2 + 136));
  v11 = *(int8x8_t *)(a1 + 424);
  if (v11)
  {
    v12 = v4;
    v13 = (uint8x8_t)vcnt_s8(v11);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v15 = v4;
      if (v4 >= *(_QWORD *)&v11)
        v15 = v4 % *(_QWORD *)&v11;
    }
    else
    {
      v15 = (*(_QWORD *)&v11 - 1) & v4;
    }
    v17 = *(_QWORD ***)(*v87 + 8 * v15);
    if (v17)
    {
      v18 = *v17;
      if (*v17)
      {
        while (1)
        {
          v19 = v18[1];
          if (v19 == v12)
            break;
          if (v14 > 1)
          {
            if (v19 >= *(_QWORD *)&v11)
              v19 %= *(_QWORD *)&v11;
          }
          else
          {
            v19 &= *(_QWORD *)&v11 - 1;
          }
          if (v19 != v15)
            goto LABEL_33;
LABEL_32:
          v18 = (_QWORD *)*v18;
          if (!v18)
            goto LABEL_33;
        }
        v20 = (_QWORD *)v18[2];
        v21 = (std::__shared_weak_count *)v18[3];
        v88 = v20;
        v89 = v21;
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldxr(p_shared_owners);
          while (__stxr(v23 + 1, p_shared_owners));
        }
        v24 = v20[2];
        if (v24 == a2)
        {
          isEqualTo = 1;
          if (!v21)
            goto LABEL_31;
        }
        else if (v24)
        {
          isEqualTo = CG::DisplayList::isEqualTo((CG::DisplayList *)(v24 + 16), (const CG::DisplayList *)(a2 + 16), 0);
          if (!v21)
            goto LABEL_31;
        }
        else
        {
          isEqualTo = 0;
          if (!v21)
            goto LABEL_31;
        }
        v26 = (unint64_t *)&v21->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
LABEL_31:
        if ((isEqualTo & 1) != 0)
          return v18[2];
        goto LABEL_32;
      }
    }
  }
LABEL_33:
  CGDisplayList = CG::DisplayList::createCGDisplayList(a2, 0, v5, v6, v7, v8, v9, v10);
  v29 = operator new();
  v30 = v29;
  *(_DWORD *)(v29 + 8) = 184549376;
  *(_QWORD *)v29 = &off_1E16295F8;
  *(_QWORD *)(v29 + 16) = 0;
  if (CGDisplayList)
  {
    CG::DisplayListResourcePattern::setPattern((CG::DisplayListResourcePattern *)v29, CGDisplayList);
    *(_DWORD *)(v30 + 8) |= CGDisplayList[20] & 0x3000;
  }
  v31 = operator new(0x20uLL);
  v88 = v31;
  v89 = (std::__shared_weak_count *)(a1 + 432);
  *v31 = 0;
  v31[1] = 0;
  std::shared_ptr<CG::DisplayListResourceDisplayList>::shared_ptr[abi:se180100]<CG::DisplayListResourceDisplayList,void>(v31 + 2, v30);
  v90 = 1;
  v32 = v31[2];
  v33 = (std::__shared_weak_count *)v31[3];
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v36 = *(_QWORD *)(v32 + 16);
  if (v36)
    v37 = XXH64_digest(*(_QWORD **)(v36 + 136));
  else
    v37 = 0;
  v31[1] = v37;
  if (v33)
  {
    v38 = (unint64_t *)&v33->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v85 = (_QWORD *)(a1 + 432);
  v18 = v88;
  v40 = v88[2];
  v41 = (std::__shared_weak_count *)v88[3];
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  v44 = *(_QWORD *)(v40 + 16);
  if (v44)
    v45 = XXH64_digest(*(_QWORD **)(v44 + 136));
  else
    v45 = 0;
  v86 = (CG::DisplayList *)CGDisplayList;
  v88[1] = v45;
  if (v41)
  {
    v46 = (unint64_t *)&v41->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v48 = *(_QWORD *)(a1 + 424);
  if (v48)
  {
    v49 = v18[1];
    v50 = (uint8x8_t)vcnt_s8((int8x8_t)v48);
    v50.i16[0] = vaddlv_u8(v50);
    v51 = v50.u32[0];
    if (v50.u32[0] > 1uLL)
    {
      v52 = v18[1];
      if (v48 <= v49)
        v52 = v49 % v48;
    }
    else
    {
      v52 = (v48 - 1) & v49;
    }
    v53 = *(_QWORD **)(*v87 + 8 * v52);
    if (v53)
    {
      v54 = (_QWORD *)*v53;
      if (*v53)
      {
        do
        {
          v55 = v54[1];
          if (v55 != v49)
          {
            if (v51 > 1)
            {
              if (v55 >= v48)
                v55 %= v48;
            }
            else
            {
              v55 &= v48 - 1;
            }
            if (v55 != v52)
              break;
            goto LABEL_100;
          }
          v56 = v54[2];
          v57 = (std::__shared_weak_count *)v54[3];
          if (v57)
          {
            v58 = (unint64_t *)&v57->__shared_owners_;
            do
              v59 = __ldxr(v58);
            while (__stxr(v59 + 1, v58));
          }
          v60 = v18[2];
          v61 = (std::__shared_weak_count *)v18[3];
          if (v61)
          {
            v62 = (unint64_t *)&v61->__shared_owners_;
            do
              v63 = __ldxr(v62);
            while (__stxr(v63 + 1, v62));
          }
          v64 = *(_QWORD *)(v56 + 16);
          v65 = *(_QWORD *)(v60 + 16);
          if (v64 == v65)
          {
            v67 = 1;
            if (!v61)
              goto LABEL_91;
          }
          else
          {
            if (v64)
              v66 = v65 == 0;
            else
              v66 = 1;
            if (v66)
            {
              v67 = 0;
              if (!v61)
                goto LABEL_91;
            }
            else
            {
              v68 = CG::DisplayList::isEqualTo((CG::DisplayList *)(v64 + 16), (const CG::DisplayList *)(v65 + 16), 0);
              v67 = v68;
              if (!v61)
              {
LABEL_91:
                if (!v57)
                  goto LABEL_95;
                goto LABEL_92;
              }
            }
          }
          v69 = (unint64_t *)&v61->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (v70)
            goto LABEL_91;
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
          if (!v57)
            goto LABEL_95;
LABEL_92:
          v71 = (unint64_t *)&v57->__shared_owners_;
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (v72)
          {
LABEL_95:
            if ((v67 & 1) != 0)
              goto LABEL_126;
            goto LABEL_100;
          }
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
          if ((v67 & 1) != 0)
          {
LABEL_126:
            v18 = v54;
            v83 = v86;
            goto LABEL_123;
          }
LABEL_100:
          v54 = (_QWORD *)*v54;
        }
        while (v54);
      }
    }
  }
  v73 = (float)(unint64_t)(*(_QWORD *)(a1 + 440) + 1);
  v74 = *(float *)(a1 + 448);
  if (!v48 || (float)(v74 * (float)v48) < v73)
  {
    v75 = 1;
    if (v48 >= 3)
      v75 = (v48 & (v48 - 1)) != 0;
    v76 = v75 | (2 * v48);
    v77 = vcvtps_u32_f32(v73 / v74);
    if (v76 <= v77)
      v78 = v77;
    else
      v78 = v76;
    std::__hash_table<std::__hash_value_type<CGPDFFont *,unsigned long>,std::__unordered_map_hasher<CGPDFFont *,std::__hash_value_type<CGPDFFont *,unsigned long>,std::hash<CGPDFFont *>,std::equal_to<CGPDFFont *>,true>,std::__unordered_map_equal<CGPDFFont *,std::__hash_value_type<CGPDFFont *,unsigned long>,std::equal_to<CGPDFFont *>,std::hash<CGPDFFont *>,true>,std::allocator<std::__hash_value_type<CGPDFFont *,unsigned long>>>::__rehash<true>((uint64_t)v87, v78);
  }
  v79 = *(int8x8_t *)(a1 + 424);
  v80 = v18[1];
  v81 = (uint8x8_t)vcnt_s8(v79);
  v81.i16[0] = vaddlv_u8(v81);
  if (v81.u32[0] > 1uLL)
  {
    if (v80 >= *(_QWORD *)&v79)
      v80 %= *(_QWORD *)&v79;
  }
  else
  {
    v80 &= *(_QWORD *)&v79 - 1;
  }
  v82 = *(_QWORD **)(*v87 + 8 * v80);
  v83 = v86;
  if (v82)
  {
    *v18 = *v82;
LABEL_121:
    *v82 = v18;
    goto LABEL_122;
  }
  *v18 = *v85;
  *v85 = v18;
  *(_QWORD *)(*v87 + 8 * v80) = v85;
  if (*v18)
  {
    v84 = *(_QWORD *)(*v18 + 8);
    if (v81.u32[0] > 1uLL)
    {
      if (v84 >= *(_QWORD *)&v79)
        v84 %= *(_QWORD *)&v79;
    }
    else
    {
      v84 &= *(_QWORD *)&v79 - 1;
    }
    v82 = (_QWORD *)(*v87 + 8 * v84);
    goto LABEL_121;
  }
LABEL_122:
  ++*(_QWORD *)(a1 + 440);
  v88 = 0;
LABEL_123:
  std::unique_ptr<std::__hash_node<std::shared_ptr<CG::DisplayListResourceDisplayList>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<CG::DisplayListResourceDisplayList>,void *>>>>::reset[abi:se180100]((uint64_t)&v88);
  if (v83)
    CFRelease(v83);
  return v18[2];
}

void sub_184A378E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  const void *v6;
  va_list va;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, const void *);
  std::unique_ptr<std::__hash_node<std::shared_ptr<CG::DisplayListResourceDisplayList>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<CG::DisplayListResourceDisplayList>,void *>>>>::reset[abi:se180100]((uint64_t)va1);
  applesauce::CF::ObjectRef<CGDisplayList *>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

void set_initial_group_gstate(uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (a1)
  {
    v2 = *(const void **)(a1 + 264);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(a1 + 264) = 0;
    }
    CGPDFGStateSetFillAlpha(a1, 1.0);
    CGPDFGStateSetStrokeAlpha(a1, 1.0);
    v3 = *(const void **)(a1 + 192);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1 + 192) = 0;
    }
    *(_DWORD *)(a1 + 184) = 0;
  }
  else
  {
    CGPDFGStateSetFillAlpha(0, 1.0);
    CGPDFGStateSetStrokeAlpha(0, 1.0);
  }
}

void CGPDFGStateSetFillAlpha(uint64_t a1, CGFloat a2)
{
  CGColor *FillColor;
  CGColorRef CopyWithAlpha;

  if (a1)
  {
    *(CGFloat *)(a1 + 200) = a2;
    FillColor = (CGColor *)CGPDFGStateGetFillColor(a1);
    CopyWithAlpha = CGColorCreateCopyWithAlpha(FillColor, a2);
    CGPDFGStateSetFillColor(a1, CopyWithAlpha);
    if (CopyWithAlpha)
      CFRelease(CopyWithAlpha);
  }
}

CGColorRef CGColorCreateCopyWithAlpha(CGColorRef color, CGFloat alpha)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CGColorRef v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t NumberOfComponents;
  __n128 v19;
  size_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  CGColorSpace *ColorSpace;
  const CGFloat *v36;
  CGColorSpace *v38;
  CGPattern *v39;
  CGColorRef v40;
  _QWORD v41[2];

  v10 = color;
  v41[1] = *MEMORY[0x1E0C80C00];
  if (((unint64_t)color & 0x8000000000000000) != 0)
  {
    if (CGTaggedColorGetAlpha((uint64_t)color, v2, v3, v4, v5, v6, v7, v8) != alpha)
    {
      NumberOfComponents = CGTaggedColorGetNumberOfComponents((uint64_t)v10, v11, v12, v13, v14, v15, v16, v17);
      MEMORY[0x1E0C80A78](NumberOfComponents, v19);
      v21 = (char *)v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v21, v20);
      CGTaggedColorGetComponents((uint64_t)v10, (uint64_t)v21, v22, v23, v24, v25, v26, v27);
      *(CGFloat *)&v21[8 * NumberOfComponents - 8] = alpha;
      ColorSpace = CGTaggedColorGetColorSpace((unint64_t)v10, v28, v29, v30, v31, v32, v33, v34);
      return CGColorCreate(ColorSpace, (const CGFloat *)v21);
    }
LABEL_6:
    CFRetain(v10);
    return v10;
  }
  if (!color)
    return v10;
  v36 = (const CGFloat *)((char *)color + 64);
  if (*((double *)color + *((_QWORD *)color + 7) + 7) == alpha)
    goto LABEL_6;
  v38 = (CGColorSpace *)*((_QWORD *)color + 3);
  v39 = (CGPattern *)*((_QWORD *)v10 + 4);
  if (v39)
    v40 = CGColorCreateWithPattern(v38, v39, v36);
  else
    v40 = CGColorCreate(v38, (const CGFloat *)v10 + 8);
  v10 = v40;
  if (v40)
    *((CGFloat *)v40 + *((_QWORD *)v40 + 7) + 7) = alpha;
  return v10;
}

void CGPDFGStateSetStrokeAlpha(uint64_t a1, CGFloat a2)
{
  CGColor *StrokeColor;
  CGColorRef CopyWithAlpha;

  if (a1)
  {
    *(CGFloat *)(a1 + 208) = a2;
    StrokeColor = (CGColor *)CGPDFGStateGetStrokeColor(a1);
    CopyWithAlpha = CGColorCreateCopyWithAlpha(StrokeColor, a2);
    CGPDFGStateSetStrokeColor(a1, CopyWithAlpha);
    if (CopyWithAlpha)
      CFRelease(CopyWithAlpha);
  }
}

void CGPDFGStateSetStrokeColor(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v4;

  if (a1)
  {
    v4 = *(CFTypeRef *)(a1 + 64);
    if (v4 != cf)
    {
      if (v4)
        CFRelease(v4);
      if (cf)
        CFRetain(cf);
      *(_QWORD *)(a1 + 64) = cf;
    }
  }
}

BOOL get_value_from_data(const __CFData *a1, UInt8 *a2, CFIndex a3)
{
  CFIndex Length;
  _BOOL8 v8;
  CFRange v10;

  Length = CFDataGetLength(a1);
  v8 = Length >= 0 && Length == a3;
  if (a2 && v8)
  {
    v10.location = 0;
    v10.length = a3;
    CFDataGetBytes(a1, v10, a2);
  }
  return v8;
}

dispatch_once_t RIPLayerDepthForModel(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v12;
  int v13;
  int v14;

  v8 = a1 + 1;
  v9 = 0;
  v10 = WORD1(a2) & 0x3F;
  switch(v8)
  {
    case 0:
      return RIPGetDepthForLayerFormat(v9, a2, a3, a4, a5, a6, a7, a8);
    case 1:
      if (v10 <= 0x10)
      {
        if (v10 < 9 || (a2 & 1) != 0)
        {
          v9 = 1;
          if (v10 >= 9 && (a2 & 1) != 0)
            v9 = 23;
        }
        else
        {
          v9 = 12;
        }
      }
      else
      {
        v9 = 18;
      }
      return RIPGetDepthForLayerFormat(v9, a2, a3, a4, a5, a6, a7, a8);
    case 2:
      if (v10 > 0x10)
      {
        v9 = 20;
        return RIPGetDepthForLayerFormat(v9, a2, a3, a4, a5, a6, a7, a8);
      }
      if (v10 >= 9 && (a2 & 1) == 0)
      {
        v9 = 14;
        return RIPGetDepthForLayerFormat(v9, a2, a3, a4, a5, a6, a7, a8);
      }
      v12 = (a2 & 1) != 0 && v10 >= 9;
      v13 = 24;
      v14 = 6;
      goto LABEL_27;
    case 3:
      if (v10 <= 0x10)
      {
        if (v10 < 9 || (a2 & 1) != 0)
        {
          v12 = (a2 & 1) != 0 && v10 >= 9;
          v13 = 25;
          v14 = 10;
LABEL_27:
          if (v12)
            v9 = v13;
          else
            v9 = v14;
        }
        else
        {
          v9 = 16;
        }
      }
      else
      {
        v9 = 22;
      }
      return RIPGetDepthForLayerFormat(v9, a2, a3, a4, a5, a6, a7, a8);
    default:
      return 0;
  }
}

BOOL RIPImageDataInitialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  initialize_skipping_conditional_var(a1, a2, 0, a3, a5, a6, a7, a8);
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 192) = xmmword_184F7D918;
  *(_OWORD *)(a1 + 208) = unk_184F7D928;
  *(_OWORD *)(a1 + 224) = xmmword_184F7D938;
  *(_OWORD *)(a1 + 128) = CGConditionalVarInitializer;
  *(_OWORD *)(a1 + 144) = unk_184F7D8E8;
  *(_OWORD *)(a1 + 160) = xmmword_184F7D8F8;
  *(_OWORD *)(a1 + 176) = unk_184F7D908;
  return CGConditionalVarPost(a1 + 128, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t CGPDFXObjectGetValue(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;
  uint64_t v4;

  v2 = (pthread_mutex_t *)(a1 + 32);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
  if (!*(_QWORD *)(a1 + 96))
  {
    v3 = *(_DWORD *)(a1 + 16);
    if (v3 == 2)
    {
      v4 = (uint64_t)CGPDFGroupCreate(*(CGPDFDictionary **)(a1 + 24));
    }
    else if (v3 == 1)
    {
      v4 = CGPDFFormCreate(*(CGPDFDictionary **)(a1 + 24));
    }
    else
    {
      if (v3)
        abort();
      v4 = CGPDFImageCreate(*(_QWORD *)(a1 + 24));
    }
    *(_QWORD *)(a1 + 96) = v4;
  }
  pthread_mutex_unlock(v2);
  return *(_QWORD *)(a1 + 96);
}

char *CGPDFGroupCreate(CGPDFDictionary *a1)
{
  char *v2;
  __int128 v3;
  CGColorSpaceRef colorspace;
  int Type;
  uint64_t v7;
  CGPDFBoolean v8[2];
  CGPDFDictionaryRef dict;
  CGPDFObjectRef v10;
  char *__s1;
  CGPDFInteger value;
  _OWORD v13[3];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (char *)malloc_type_calloc(1uLL, 0x70uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (v2)
  {
    __s1 = 0;
    value = 0;
    dict = 0;
    v10 = 0;
    *(_WORD *)v8 = 0;
    *(_QWORD *)v2 = a1;
    if (a1)
      a1 = (CGPDFDictionary *)*((_QWORD *)a1 + 6);
    if (CGPDFDictionaryGetInteger(a1, "FormType", &value) && value != 1)
    {
LABEL_20:
      CGColorSpaceRelease(*((CGColorSpaceRef *)v2 + 12));
      free(v2);
      return 0;
    }
    if (!CGPDFDictionaryGetRect(a1, "BBox", (double *)v2 + 1))
    {
      goto LABEL_20;
    }
    if (CGPDFDictionaryGetNumbers(a1, "Matrix", (uint64_t)v13, (CGPDFArray *)6))
    {
      v3 = v13[1];
      *(_OWORD *)(v2 + 40) = v13[0];
      *(_OWORD *)(v2 + 56) = v3;
      *(_OWORD *)(v2 + 72) = v13[2];
    }
    else
    {
      *(CGAffineTransform *)(v2 + 40) = CGAffineTransformIdentity;
    }
    if (!CGPDFDictionaryGetDictionary(a1, "Resources", (CGPDFDictionaryRef *)v2 + 11))
      *((_QWORD *)v2 + 11) = 0;
    if (!CGPDFDictionaryGetDictionary(a1, "Group", &dict))
    {
      goto LABEL_20;
    }
    if (!CGPDFDictionaryGetName(dict, "S", (const char **)&__s1))
    {
      goto LABEL_20;
    }
    if (strcmp(__s1, "Transparency"))
    {
      goto LABEL_20;
    }
    v2[104] = 0;
    if (CGPDFDictionaryGetBoolean(dict, "I", &v8[1]))
      v2[104] = v8[1] != 0;
    v2[105] = 0;
    if (CGPDFDictionaryGetBoolean(dict, "K", v8))
      v2[105] = v8[0] != 0;
    *((_QWORD *)v2 + 12) = 0;
    if (CGPDFDictionaryGetObject(dict, "CS", &v10))
    {
      colorspace = cg_create_colorspace((uint64_t)v10);
      *((_QWORD *)v2 + 12) = colorspace;
      Type = CGColorSpaceGetType(colorspace);
      if ((Type - 7) < 3)
        goto LABEL_33;
      if (Type != 6)
      {
        if (Type != 5)
          return v2;
        goto LABEL_33;
      }
      v7 = *((_QWORD *)v2 + 12);
      if (!v7 || *(_DWORD *)(*(_QWORD *)(v7 + 24) + 24) >= 3u)
      {
LABEL_33:
        pdf_error("invalid group attributes color space.");
        goto LABEL_20;
      }
    }
  }
  return v2;
}

char *CGPDFDrawingContextCreateWithStream(CGPDFStream *a1, CGPDFDictionary *a2, CGPDFContentStreamRef *a3)
{
  CGPDFContentStreamRef v4;
  CGPDFContentStreamRef v5;
  uint64_t v6;
  char *v7;

  if (a3)
  {
    v4 = CGPDFContentStreamCreateWithStream(a1, a2, *a3);
    v5 = v4;
    v6 = (uint64_t)a3;
  }
  else
  {
    v4 = CGPDFContentStreamCreateWithStream(a1, a2, 0);
    v5 = v4;
    v6 = 0;
  }
  v7 = CGPDFDrawingContextCreateWithContentStream(v4, v6);
  if (v5)
    CFRelease(v5);
  return v7;
}

_QWORD *CGPDFContentStreamGetXObject(_QWORD *result, const char *a2)
{
  _QWORD *v3;

  if (result)
  {
    v3 = result;
    while (1)
    {
      result = CGPDFResourcesCopyXObject(v3[4], a2);
      if (result)
        break;
      v3 = (_QWORD *)v3[5];
      if (!v3)
        return 0;
    }
  }
  return result;
}

void CGCFDictionarySetRect(__CFDictionary *a1, const void *a2, double a3, double a4, double a5, double a6)
{
  CFDataRef v8;
  CFDataRef v9;
  _QWORD v10[4];

  *(double *)v10 = a3;
  *(double *)&v10[1] = a4;
  *(double *)&v10[2] = a5;
  *(double *)&v10[3] = a6;
  if (a1 && a2)
  {
    v8 = CFDataCreate(0, (const UInt8 *)v10, 32);
    if (v8)
    {
      v9 = v8;
      CFDictionarySetValue(a1, a2, v8);
      CFRelease(v9);
    }
  }
}

void rgba32_mark_image(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v13;
  int v14;
  int v15;
  int *v16;
  int v17;
  void *v18;
  void *v19;
  int v20;
  int v21;
  int v22;
  char *v23;
  char *v24;
  unsigned int v25;
  int v26;
  uint64_t i;

  v11 = a2;
  if ((_DWORD)a2 != 2 && !*(_QWORD *)(a1 + 96))
  {
    if (*(_QWORD *)(a1 + 48))
      v11 = 0;
    else
      v11 = a2;
  }
  v13 = *(int *)(a1 + 28);
  v14 = *(_DWORD *)(a1 + 4);
  v15 = *(_DWORD *)(a1 + 8);
  v25 = v15;
  v26 = v14;
  v16 = *(int **)(a1 + 136);
  if (v16)
  {
    v17 = *(_DWORD *)(a1 + 104);
    LODWORD(i) = *(_DWORD *)(a1 + 108);
    HIDWORD(i) = v17;
    shape_enum_clip_alloc(a1, a2, v16, 1, 1, 1, v17, i, v14, v15);
    v19 = v18;
    if (v18)
      goto LABEL_14;
  }
  v20 = 0;
  v21 = 0;
  v19 = 0;
  for (i = 0; ; v20 = HIDWORD(i))
  {
    v22 = *(_DWORD *)(a1 + 76);
    v23 = (char *)(*(_QWORD *)(a1 + 88) + v22 * (uint64_t)(a4 + v21 * a5) + 4 * (v20 + a3));
    v24 = (char *)(*(_QWORD *)(a1 + 40) + (*(int *)(a1 + 16) + (uint64_t)v21) * v13 + 4 * (*(_DWORD *)(a1 + 12) + v20));
    if (v11 == 1)
    {
      CGBlt_copyBytes(4 * v26, v25, v23, v24, v22 * a5, v13);
      if (!v19)
        return;
    }
    else if (v11)
    {
      CGSBlend8888toARGB8888(v23, v22 * a5, v24, v13, v26, v25, 0x1Bu, *(_QWORD *)(a1 + 48) != 0);
      if (!v19)
        return;
    }
    else
    {
      CGSConvertXRGB8888toARGB8888(v23, v22 * a5, v24, v13, v26, v25, a7, a8);
      if (!v19)
        return;
    }
LABEL_14:
    if (!shape_enum_clip_next((uint64_t)v19, (int *)&i + 1, &i, &v26, &v25))
      break;
    v21 = i;
  }
  free(v19);
}

uint64_t ARGB32_image(int **a1, unsigned __int8 *a2, uint64_t a3)
{
  int *v6;
  _BOOL4 v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _OWORD v47[64];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  memset(v47, 0, 512);
  if (*((_QWORD *)a2 + 12))
    v7 = 0;
  else
    v7 = *(float *)(a3 + 8) >= 1.0;
  v8 = *(_DWORD *)(*((_QWORD *)v6 + 7) + 16 * *a2 + 8 * v7 + 4 * (*((_QWORD *)a2 + 6) == 0));
  if (v8 > 28)
    return 0xFFFFFFFFLL;
  if (*((int *)a2 + 1) < 1 || *((int *)a2 + 2) < 1)
    return 0;
  if ((int)_blt_image_initialize((uint64_t)a2, a3, (uint64_t)&v30, (uint64_t)v47) < 1)
    return 0xFFFFFFFFLL;
  v18 = *v6;
  v19 = *v6 != 134755144 || v8 <= 23;
  v20 = *(_DWORD *)a3;
  if (v19)
    v21 = v8;
  else
    v21 = (v8 + 4);
  DWORD2(v30) = *(_DWORD *)a3;
  HIDWORD(v30) = v18;
  if (v20 != 134755144)
  {
    v22 = SAMPLEINDEX(v20, v10, v11, v12, v13, v14, v15, v16);
    if (!v22)
      return 0xFFFFFFFFLL;
    if (v22 > 0xB)
    {
      if (v22 > 0x13)
      {
LABEL_35:
        v27 = 0;
LABEL_37:
        *(_QWORD *)&v30 = *(_QWORD *)&RGB8_image_sample[2 * v22 + 2];
        if ((_QWORD)v30)
        {
          v28 = 134755224;
          goto LABEL_45;
        }
        if ((HIWORD(*(_DWORD *)a3) & 0x3Fu) <= 0x10)
        {
          *(_QWORD *)&v30 = *(_QWORD *)&RGB16_image_sample[2 * v22 + 2];
          if ((_QWORD)v30)
          {
            v28 = 269497256;
            v29 = 8;
LABEL_44:
            LODWORD(v31) = v29;
LABEL_45:
            DWORD2(v30) = v28;
            if ((_QWORD)v41)
              v27 = 0;
            if (v27 == 1 && (BYTE4(v31) & 0x77) == 0x73 && (v21 - 1) <= 1 && (a2[2] == 5 || !a2[2]))
            {
              if (v22 > 0xB)
              {
                if (v22 <= 0x13)
                {
                  if (v22 == 12 && (_DWORD)v21 == 1)
                  {
                    v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
                    if (v17.n128_f32[0] == 1.0)
                    {
                      rgba32_mark_image_W16((uint64_t)a2, (uint64_t)v36 >> SBYTE6(v31), *((uint64_t *)&v36 + 1) >> SBYTE7(v31), *((uint64_t *)&v38 + 1) >> SBYTE7(v31), v23, v24, v25, v26);
                      return 1;
                    }
                  }
                  else if (v22 == 13 && (_DWORD)v21 == 1)
                  {
                    v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
                    if (v17.n128_f32[0] == 1.0)
                    {
                      rgba32_mark_image_w16((uint64_t)a2, (uint64_t)v36 >> SBYTE6(v31), *((uint64_t *)&v36 + 1) >> SBYTE7(v31), *((uint64_t *)&v38 + 1) >> SBYTE7(v31), v23, v24, v25, v26);
                      return 1;
                    }
                  }
                  else if (v22 == 14 && (_DWORD)v21 == 1)
                  {
                    v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
                    if (v17.n128_f32[0] == 1.0)
                    {
                      ARGB32_mark_image_RGB48((uint64_t)a2, (uint64_t)v36 >> SBYTE6(v31), *((uint64_t *)&v36 + 1) >> SBYTE7(v31), *((uint64_t *)&v38 + 1) >> SBYTE7(v31), v23, v24, v25, v26);
                      return 1;
                    }
                  }
                  else if (v22 == 15 && (_DWORD)v21 == 1)
                  {
                    v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
                    if (v17.n128_f32[0] == 1.0)
                    {
                      ARGB32_mark_image_rgb48((uint64_t)a2, (uint64_t)v36 >> SBYTE6(v31), *((uint64_t *)&v36 + 1) >> SBYTE7(v31), *((uint64_t *)&v38 + 1) >> SBYTE7(v31), v23, v24, v25, v26);
                      return 1;
                    }
                  }
                  else if (v22 == 17)
                  {
                    v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
                    if (v17.n128_f32[0] == 1.0)
                    {
                      ARGB32_mark_image_rgba64((uint64_t)a2, v21, (uint64_t)v36 >> SBYTE6(v31), *((uint64_t *)&v36 + 1) >> SBYTE7(v31), *((uint64_t *)&v38 + 1) >> SBYTE7(v31), v24, v25, v26);
                      return 1;
                    }
                  }
                  else if (v22 == 16)
                  {
                    v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
                    if (v17.n128_f32[0] == 1.0)
                    {
                      ARGB32_mark_image_RGBA64((uint64_t)a2, v21, (uint64_t)v36 >> SBYTE6(v31), *((uint64_t *)&v36 + 1) >> SBYTE7(v31), *((uint64_t *)&v38 + 1) >> SBYTE7(v31), v24, v25, v26);
                      return 1;
                    }
                  }
                }
              }
              else if (v22 == 2 && (_DWORD)v21 == 1)
              {
                v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
                if (v17.n128_f32[0] == 1.0)
                {
                  rgba32_mark_image_W8((uint64_t)a2, (uint64_t)v36 >> SBYTE6(v31), *((uint64_t *)&v36 + 1) >> SBYTE7(v31), *((uint64_t *)&v38 + 1) >> SBYTE7(v31), v23, v24, v25, v26);
                  return 1;
                }
              }
              else
              {
                if (v22 != 5 || (_DWORD)v21 != 1)
                {
                  switch(v22)
                  {
                    case 6u:
                      v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
                      if (v17.n128_f32[0] != 1.0)
                        goto LABEL_60;
                      rgba32_mark_image_xrgb32((uint64_t)a2, v21, (uint64_t)v36 >> SBYTE6(v31), *((uint64_t *)&v36 + 1) >> SBYTE7(v31), *((uint64_t *)&v38 + 1) >> SBYTE7(v31), v24, v25, v26);
                      break;
                    case 7u:
                      v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
                      if (v17.n128_f32[0] != 1.0)
                        goto LABEL_60;
                      rgba32_mark_image_XRGB32((uint64_t)a2, v21, (uint64_t)v36 >> SBYTE6(v31), *((uint64_t *)&v36 + 1) >> SBYTE7(v31), *((uint64_t *)&v38 + 1) >> SBYTE7(v31), v24, v25, v26);
                      break;
                    case 8u:
                      v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
                      if (v17.n128_f32[0] != 1.0)
                        goto LABEL_60;
                      rgba32_mark_image_rgbx32((uint64_t)a2, v21, (uint64_t)v36 >> SBYTE6(v31), *((uint64_t *)&v36 + 1) >> SBYTE7(v31), *((uint64_t *)&v38 + 1) >> SBYTE7(v31), v24, v25, v26);
                      break;
                    case 9u:
                      v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
                      if (v17.n128_f32[0] != 1.0)
                        goto LABEL_60;
                      rgba32_mark_image_RGBX32((uint64_t)a2, v21, (uint64_t)v36 >> SBYTE6(v31), *((uint64_t *)&v36 + 1) >> SBYTE7(v31), *((uint64_t *)&v38 + 1) >> SBYTE7(v31), v24, v25, v26);
                      break;
                    default:
                      goto LABEL_60;
                  }
                  return 1;
                }
                v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
                if (v17.n128_f32[0] == 1.0)
                {
                  ARGB32_mark_image_RGB24((uint64_t)a2, (uint64_t)v36 >> SBYTE6(v31), *((uint64_t *)&v36 + 1) >> SBYTE7(v31), *((uint64_t *)&v38 + 1) >> SBYTE7(v31), v23, v24, v25, v26);
                  return 1;
                }
              }
            }
LABEL_60:
            rgba32_image_mark((uint64_t)a2, (uint64_t)&v30, v21, v17);
            return 1;
          }
        }
        *(_QWORD *)&v30 = *(_QWORD *)&RGBF_image_sample[2 * v22 + 2];
        if ((_QWORD)v30)
        {
          v28 = 538981289;
          v29 = 16;
          goto LABEL_44;
        }
        return 0xFFFFFFFFLL;
      }
      if (v22 - 14 < 4)
      {
LABEL_36:
        v27 = 1;
        goto LABEL_37;
      }
      if (v22 != 13 && v22 != 12)
        goto LABEL_35;
    }
    else
    {
      if (v22 - 5 < 5)
        goto LABEL_36;
      if (v22 != 2)
        goto LABEL_35;
    }
    if (*((_QWORD *)a2 + 12))
      goto LABEL_35;
    goto LABEL_36;
  }
  if ((_QWORD)v41 || (~DWORD1(v31) & 0xC3) != 0)
    goto LABEL_59;
  v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
  if ((BYTE4(v31) & 4) != 0 || (v21 - 1) > 1 || v17.n128_f32[0] != 1.0)
  {
    if (v17.n128_f32[0] >= 1.0)
      goto LABEL_58;
LABEL_59:
    *(_QWORD *)&v30 = rgba32_sample_rgba32;
    goto LABEL_60;
  }
  if (a2[2] != 5 && a2[2])
  {
LABEL_58:
    if (!*(_QWORD *)(a3 + 24))
    {
      if ((BYTE4(v31) & 4) != 0)
      {
        v17.n128_u64[0] = *(_QWORD *)(a3 + 32);
        *((_QWORD *)a2 + 8) = v17.n128_u64[0];
      }
      rgba32_mark((uint64_t)a1, v17);
      return 1;
    }
    goto LABEL_59;
  }
  rgba32_mark_image((uint64_t)a2, v21, (uint64_t)v36 >> SBYTE6(v31), *((uint64_t *)&v36 + 1) >> SBYTE7(v31), *((uint64_t *)&v38 + 1) >> SBYTE7(v31), v14, v15, v16);
  return 1;
}

uint64_t GRAYA8_image(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  int *v6;
  _BOOL8 v7;
  signed int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, int);
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  _OWORD v26[64];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = (int *)*a1;
  memset(v26, 0, 512);
  if (*((_QWORD *)a2 + 12))
    v7 = 0;
  else
    v7 = *(float *)(a3 + 8) >= 1.0;
  v8 = *(_DWORD *)(*((_QWORD *)v6 + 7) + 16 * *a2 + 8 * v7 + 4 * (*((_QWORD *)a2 + 6) == 0));
  if (v8 > 28)
    return 0xFFFFFFFFLL;
  if (*((int *)a2 + 1) < 1 || *((int *)a2 + 2) < 1)
    return 0;
  if ((int)_blt_image_initialize((uint64_t)a2, a3, (uint64_t)&v21, (uint64_t)v26) < 1)
    return 0xFFFFFFFFLL;
  v18 = *v6;
  v19 = *(_DWORD *)a3;
  v22 = v19;
  v23 = v18;
  if (v19 != 67637672)
  {
    v20 = SAMPLEINDEX(v19, v10, v11, v12, v13, v14, v15, v16);
    if (v20)
    {
      v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int))GRAYa8_image_sample[v20 + 1];
      if (v21)
        goto LABEL_18;
    }
    return 0xFFFFFFFFLL;
  }
  if (!v25 && (~v24 & 0xC3) == 0)
  {
    v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
    if (v17.n128_f32[0] >= 1.0 && !*(_QWORD *)(a3 + 24))
    {
      if ((v24 & 4) != 0)
      {
        v17.n128_u64[0] = *(_QWORD *)(a3 + 32);
        *((_QWORD *)a2 + 8) = v17.n128_u64[0];
      }
      GRAYA8_mark_inner(*(_QWORD *)(*a1 + 56), v17);
      return 1;
    }
  }
  v21 = GRAYA8_sample_W8_inner;
LABEL_18:
  GRAYa8_image_mark((uint64_t)a2, (uint64_t)&v21, v8, v17);
  return 1;
}

uint64_t W8_image(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL4 v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  char v22;
  unint64_t v23;
  uint64_t (*v24)(uint64_t, int *, int, int, int, int);
  uint64_t v25;
  int v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _OWORD v45[64];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v28 = 0u;
  memset(v45, 0, 512);
  if (*((_QWORD *)a2 + 12))
    v7 = 0;
  else
    v7 = *(float *)(a3 + 8) >= 1.0;
  v8 = *(_DWORD *)(*(_QWORD *)(v6 + 56) + 16 * *a2 + 8 * v7 + 4 * (*((_QWORD *)a2 + 6) == 0));
  if (v8 > 28)
    return 0xFFFFFFFFLL;
  if (*((int *)a2 + 1) < 1 || *((int *)a2 + 2) < 1)
    return 0;
  if ((int)_blt_image_initialize((uint64_t)a2, a3, (uint64_t)&v28, (uint64_t)v45) < 1)
    return 0xFFFFFFFFLL;
  v18 = 34083076;
  v19 = *(_DWORD *)a3;
  *((_QWORD *)&v28 + 1) = __PAIR64__(*(_DWORD *)v6, *(_DWORD *)a3);
  if (v19 != 34083076)
  {
    v20 = SAMPLEINDEX(v19, v10, v11, v12, v13, v14, v15, v16);
    if (v20)
    {
      if (v20 > 0xB)
      {
LABEL_21:
        v21 = 255;
        v22 = 1;
      }
      else
      {
        v22 = 0;
        v21 = 0;
        switch(v20)
        {
          case 2u:
            if (*((_QWORD *)a2 + 12))
              goto LABEL_21;
            v22 = 0;
            v21 = 16;
            break;
          case 5u:
            v22 = 0;
            v21 = 24;
            break;
          case 6u:
            break;
          case 7u:
            v22 = 0;
            v21 = 32;
            break;
          case 8u:
            v22 = 0;
            v21 = 8;
            break;
          case 9u:
            v22 = 0;
            v21 = 40;
            break;
          default:
            goto LABEL_21;
        }
      }
      *(_QWORD *)&v28 = *(_QWORD *)&W8_image_sample[2 * v20 + 2];
      if ((_QWORD)v28)
      {
LABEL_28:
        DWORD2(v28) = v18;
        if ((v22 & 1) != 0)
          goto LABEL_36;
        goto LABEL_29;
      }
      if ((HIWORD(*(_DWORD *)a3) & 0x3Fu) <= 0x10)
      {
        *(_QWORD *)&v28 = *(_QWORD *)&W16_image_sample[2 * v20 + 2];
        if ((_QWORD)v28)
        {
          v18 = 68161828;
          goto LABEL_28;
        }
      }
      *(_QWORD *)&v28 = *(_QWORD *)&WF_image_sample[2 * v20 + 2];
      if ((_QWORD)v28)
      {
        LODWORD(v29) = 8;
        v18 = 136319269;
        goto LABEL_28;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (!(_QWORD)v39 && (~DWORD1(v29) & 0xC3) == 0)
  {
    v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
    if (v17.n128_f32[0] >= 1.0 && !*(_QWORD *)(a3 + 24))
    {
      if ((BYTE4(v29) & 4) != 0)
      {
        v17.n128_u64[0] = *(_QWORD *)(a3 + 32);
        *((_QWORD *)a2 + 8) = v17.n128_u64[0];
      }
      W8_mark((uint64_t)a1, v17);
      return 1;
    }
  }
  *(_QWORD *)&v28 = W8_sample_W8;
  if (*((_QWORD *)a2 + 12))
    goto LABEL_36;
  v20 = 2;
  v21 = 16;
LABEL_29:
  if ((v8 - 1) <= 1 && (BYTE4(v29) & 7) == 3 && (a2[2] == 5 || !a2[2]) && v20 <= 0xB)
  {
    HIDWORD(v23) = v21;
    LODWORD(v23) = v21;
    switch((v23 >> 3))
    {
      case 0u:
        DWORD2(v28) = *(_DWORD *)a3;
        v24 = W8_image_mark_RGB32;
        goto LABEL_51;
      case 1u:
        DWORD2(v28) = *(_DWORD *)a3;
        v24 = W8_image_mark_RGB32;
        goto LABEL_53;
      case 2u:
        DWORD2(v28) = *(_DWORD *)a3;
        v24 = W8_image_mark_W8;
        goto LABEL_51;
      case 3u:
        DWORD2(v28) = *(_DWORD *)a3;
        v24 = W8_image_mark_RGB24;
        goto LABEL_51;
      case 4u:
        DWORD2(v28) = *(_DWORD *)a3;
        v24 = W8_image_mark_rgb32;
LABEL_51:
        v25 = (uint64_t)a2;
        v26 = v8;
        v27 = 0;
        break;
      case 5u:
        DWORD2(v28) = *(_DWORD *)a3;
        v24 = W8_image_mark_rgb32;
LABEL_53:
        v25 = (uint64_t)a2;
        v26 = v8;
        v27 = 8;
        break;
      default:
        goto LABEL_36;
    }
    W8_image_mark_image(v25, (uint64_t)&v28, v26, v27, (void (*)(_QWORD, _QWORD))v24);
    return 1;
  }
LABEL_36:
  W8_image_mark((uint64_t)a2, (uint64_t)&v28, v8, v17);
  return 1;
}

uint64_t argb32_image(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  double v18;
  double v19;
  int16x8_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t (*v28)(unint64_t, int *, int, int, int, int);
  uint64_t v29;
  int v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _OWORD v39[4];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[64];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  memset(v39, 0, sizeof(v39));
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v32 = 0u;
  memset(v46, 0, 512);
  if (*((_QWORD *)a2 + 12))
    v7 = 0;
  else
    v7 = *(float *)(a3 + 8) >= 1.0;
  v8 = *(unsigned int *)(*(_QWORD *)(v6 + 56) + 16 * *a2 + 8 * v7 + 4 * (*((_QWORD *)a2 + 6) == 0));
  if ((int)v8 > 28)
    return 0xFFFFFFFFLL;
  if (*((int *)a2 + 1) < 1 || *((int *)a2 + 2) < 1)
    return 0;
  if ((int)_blt_image_initialize((uint64_t)a2, a3, (uint64_t)&v32, (uint64_t)v46) < 1)
    return 0xFFFFFFFFLL;
  v21 = 134755160;
  v22 = *(_DWORD *)a3;
  *((_QWORD *)&v32 + 1) = __PAIR64__(*(_DWORD *)v6, *(_DWORD *)a3);
  if (v22 != 134755160)
  {
    v23 = SAMPLEINDEX(v22, v10, v11, v12, v13, v14, v15, v16);
    if (!v23)
      return 0xFFFFFFFFLL;
    if (v23 <= 0xB)
    {
      LOBYTE(v24) = 0;
      v25 = 0;
      switch(v23)
      {
        case 2u:
          v24 = *((_QWORD *)a2 + 12);
          if (v24)
            goto LABEL_34;
          v25 = 16;
          break;
        case 5u:
          LOBYTE(v24) = 0;
          v25 = 24;
          break;
        case 6u:
          break;
        case 7u:
          LOBYTE(v24) = 0;
          v25 = 32;
          break;
        case 8u:
          LOBYTE(v24) = 0;
          v25 = 8;
          break;
        case 9u:
          LOBYTE(v24) = 0;
          v25 = 40;
          break;
        default:
          goto LABEL_34;
      }
LABEL_35:
      *(_QWORD *)&v32 = argb32_image_sample[v23 + 1];
      if ((_QWORD)v32)
        goto LABEL_45;
      if ((HIWORD(*(_DWORD *)a3) & 0x3Fu) > 8)
      {
        if ((*(_DWORD *)a3 & 0x3F0000u) >> 16 > 0x10)
        {
LABEL_42:
          *(_QWORD *)&v32 = *(_QWORD *)&RGBF_image_sample[2 * v23 + 2];
          if ((_QWORD)v32)
          {
            v21 = 538981289;
            v26 = 16;
            goto LABEL_44;
          }
          return 0xFFFFFFFFLL;
        }
      }
      else
      {
        *(_QWORD *)&v32 = *(_QWORD *)&RGB8_image_sample[2 * v23 + 2];
        if ((_QWORD)v32)
        {
          v21 = 134755224;
          goto LABEL_45;
        }
      }
      *(_QWORD *)&v32 = *(_QWORD *)&RGB16_image_sample[2 * v23 + 2];
      if ((_QWORD)v32)
      {
        v21 = 269497256;
        v26 = 8;
LABEL_44:
        LODWORD(v33) = v26;
LABEL_45:
        DWORD2(v32) = v21;
        if ((v24 & 1) != 0)
          goto LABEL_63;
        goto LABEL_46;
      }
      goto LABEL_42;
    }
    if (v23 <= 0x13)
    {
      if (v23 - 14 < 4)
      {
        LOBYTE(v24) = 0;
LABEL_27:
        v25 = 0;
        goto LABEL_35;
      }
      if (v23 == 13 || v23 == 12)
      {
        v24 = *((_QWORD *)a2 + 12);
        if (!v24)
          goto LABEL_27;
      }
    }
LABEL_34:
    v25 = 255;
    LOBYTE(v24) = 1;
    goto LABEL_35;
  }
  if ((_QWORD)v40 || (~DWORD1(v33) & 0xC3) != 0)
    goto LABEL_30;
  v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
  if ((v8 - 1) > 1 || (BYTE4(v33) & 4) != 0 || (LODWORD(v18) = 1.0, v17.n128_f32[0] != 1.0))
  {
    LODWORD(v18) = 1.0;
    if (v17.n128_f32[0] >= 1.0)
      goto LABEL_29;
LABEL_30:
    *(_QWORD *)&v32 = argb32_sample_argb32;
    v23 = 9;
    v25 = 40;
LABEL_46:
    if ((BYTE4(v33) & 7) == 3 && (v8 - 1) <= 1 && (a2[2] == 5 || !a2[2]))
    {
      if (v23 <= 0xB)
      {
        HIDWORD(v27) = v25;
        LODWORD(v27) = v25;
        switch((v27 >> 3))
        {
          case 0u:
            if ((~DWORD1(v33) & 0x70) == 0 && !(_QWORD)v40 && *(float *)(a3 + 8) == 1.0)
            {
              argb32_mark_image_RGBX32((uint64_t)a2, v8, (uint64_t)v38 >> SBYTE6(v33), *((uint64_t *)&v38 + 1) >> SBYTE7(v33), *((uint64_t *)&v39[1] + 1) >> SBYTE7(v33), v14, v15, v16);
              return 1;
            }
            DWORD2(v32) = *(_DWORD *)a3;
            v28 = argb32_image_mark_RGB32;
            goto LABEL_135;
          case 1u:
            if ((~DWORD1(v33) & 0x70) == 0 && !(_QWORD)v40 && *(float *)(a3 + 8) == 1.0)
            {
              argb32_mark_image_XRGB32((uint64_t)a2, v8, (uint64_t)v38 >> SBYTE6(v33), *((uint64_t *)&v38 + 1) >> SBYTE7(v33), *((uint64_t *)&v39[1] + 1) >> SBYTE7(v33), v14, v15, v16);
              return 1;
            }
            DWORD2(v32) = *(_DWORD *)a3;
            v28 = argb32_image_mark_RGB32;
            goto LABEL_129;
          case 2u:
            if ((_DWORD)v8 == 1 && (BYTE4(v33) & 0x70) == 0x70 && !(_QWORD)v40 && *(float *)(a3 + 8) == 1.0)
            {
              argb32_mark_image_W8((uint64_t)a2, (uint64_t)v38 >> SBYTE6(v33), *((uint64_t *)&v38 + 1) >> SBYTE7(v33), *((uint64_t *)&v39[1] + 1) >> SBYTE7(v33), v13, v14, v15, v16);
              return 1;
            }
            DWORD2(v32) = *(_DWORD *)a3;
            v28 = argb32_image_mark_W8;
            goto LABEL_135;
          case 3u:
            if ((_DWORD)v8 == 1 && (BYTE4(v33) & 0x70) == 0x70 && !(_QWORD)v40 && *(float *)(a3 + 8) == 1.0)
            {
              argb32_mark_image_RGB24((uint64_t)a2, (uint64_t)v38 >> SBYTE6(v33), *((uint64_t *)&v38 + 1) >> SBYTE7(v33), *((uint64_t *)&v39[1] + 1) >> SBYTE7(v33), v13, v14, v15, v16);
              return 1;
            }
            DWORD2(v32) = *(_DWORD *)a3;
            v28 = argb32_image_mark_RGB24;
            goto LABEL_135;
          case 4u:
            if ((~DWORD1(v33) & 0x70) == 0 && !(_QWORD)v40 && *(float *)(a3 + 8) == 1.0)
            {
              argb32_mark_image_rgbx32((uint64_t)a2, v8, (uint64_t)v38 >> SBYTE6(v33), *((uint64_t *)&v38 + 1) >> SBYTE7(v33), *((uint64_t *)&v39[1] + 1) >> SBYTE7(v33), v14, v15, v16);
              return 1;
            }
            DWORD2(v32) = *(_DWORD *)a3;
            v28 = argb32_image_mark_rgb32;
            goto LABEL_135;
          case 5u:
            if ((~DWORD1(v33) & 0x70) == 0 && !(_QWORD)v40 && *(float *)(a3 + 8) == 1.0)
            {
              argb32_mark_image_xrgb32((uint64_t)a2, v8, (uint64_t)v38 >> SBYTE6(v33), *((uint64_t *)&v38 + 1) >> SBYTE7(v33), *((uint64_t *)&v39[1] + 1) >> SBYTE7(v33), v14, v15, v16);
              return 1;
            }
            if ((_QWORD)v40)
            {
              if (v21 == 134755160)
              {
                v17.n128_u32[0] = DWORD2(v40);
                if (*((float *)&v40 + 2) >= 1.0 && *(_OWORD *)((char *)v39 + 8) == 0)
                {
                  argb32_sample_rectilinear_argb32(a2, (uint64_t)&v32, v8, v17);
                  return 1;
                }
              }
            }
            DWORD2(v32) = *(_DWORD *)a3;
            v28 = argb32_image_mark_argb32;
LABEL_129:
            v29 = (uint64_t)a2;
            v30 = v8;
            v31 = 8;
            break;
          default:
            goto LABEL_63;
        }
LABEL_136:
        argb32_image_mark_image(v29, (uint64_t)&v32, v30, v31, (void (*)(_QWORD, _QWORD))v28);
        return 1;
      }
      if (v23 <= 0x13)
      {
        switch(v23)
        {
          case 0xCu:
            if ((_DWORD)v8 == 1 && (BYTE4(v33) & 0x70) == 0x70 && !(_QWORD)v40 && *(float *)(a3 + 8) == 1.0)
            {
              argb32_mark_image_W16((uint64_t)a2, (uint64_t)v38 >> SBYTE6(v33), *((uint64_t *)&v38 + 1) >> SBYTE7(v33), *((uint64_t *)&v39[1] + 1) >> SBYTE7(v33), v13, v14, v15, v16);
              return 1;
            }
            DWORD2(v32) = *(_DWORD *)a3;
            v28 = argb32_image_mark_W16;
            goto LABEL_135;
          case 0xDu:
            if ((_DWORD)v8 == 1 && (BYTE4(v33) & 0x70) == 0x70 && !(_QWORD)v40 && *(float *)(a3 + 8) == 1.0)
            {
              argb32_mark_image_w16((uint64_t)a2, (uint64_t)v38 >> SBYTE6(v33), *((uint64_t *)&v38 + 1) >> SBYTE7(v33), *((uint64_t *)&v39[1] + 1) >> SBYTE7(v33), v13, v14, v15, v16);
              return 1;
            }
            DWORD2(v32) = *(_DWORD *)a3;
            v28 = argb32_image_mark_w16;
            goto LABEL_135;
          case 0xEu:
            if ((_DWORD)v8 == 1 && (BYTE4(v33) & 0x70) == 0x70 && !(_QWORD)v40 && *(float *)(a3 + 8) == 1.0)
            {
              argb32_mark_image_RGB48((uint64_t)a2, (uint64_t)v38 >> SBYTE6(v33), *((uint64_t *)&v38 + 1) >> SBYTE7(v33), *((uint64_t *)&v39[1] + 1) >> SBYTE7(v33), v13, v14, v15, v16);
              return 1;
            }
            DWORD2(v32) = *(_DWORD *)a3;
            v28 = argb32_image_mark_RGB48;
            goto LABEL_135;
          case 0xFu:
            if ((_DWORD)v8 == 1 && (BYTE4(v33) & 0x70) == 0x70 && !(_QWORD)v40 && *(float *)(a3 + 8) == 1.0)
            {
              argb32_mark_image_rgb48((uint64_t)a2, (uint64_t)v38 >> SBYTE6(v33), *((uint64_t *)&v38 + 1) >> SBYTE7(v33), *((uint64_t *)&v39[1] + 1) >> SBYTE7(v33), v13, v14, v15, v16);
              return 1;
            }
            DWORD2(v32) = *(_DWORD *)a3;
            v28 = argb32_image_mark_rgb48;
            goto LABEL_135;
          case 0x10u:
            if ((~DWORD1(v33) & 0x70) == 0 && !(_QWORD)v40 && *(float *)(a3 + 8) == 1.0)
            {
              argb32_mark_image_RGBA64((uint64_t)a2, v8, (uint64_t)v38 >> SBYTE6(v33), *((uint64_t *)&v38 + 1) >> SBYTE7(v33), *((uint64_t *)&v39[1] + 1) >> SBYTE7(v33), v14, v15, v16);
              return 1;
            }
            DWORD2(v32) = *(_DWORD *)a3;
            v28 = argb32_image_mark_RGBA64;
            goto LABEL_135;
          case 0x11u:
            if ((~DWORD1(v33) & 0x70) == 0 && !(_QWORD)v40 && *(float *)(a3 + 8) == 1.0)
            {
              argb32_mark_image_rgba64((uint64_t)a2, v8, (uint64_t)v38 >> SBYTE6(v33), *((uint64_t *)&v38 + 1) >> SBYTE7(v33), *((uint64_t *)&v39[1] + 1) >> SBYTE7(v33), v14, v15, v16);
              return 1;
            }
            DWORD2(v32) = *(_DWORD *)a3;
            v28 = argb32_image_mark_rgba64;
LABEL_135:
            v29 = (uint64_t)a2;
            v30 = v8;
            v31 = 0;
            break;
          default:
            goto LABEL_63;
        }
        goto LABEL_136;
      }
    }
LABEL_63:
    argb32_image_mark((uint64_t)a2, (uint64_t)&v32, v8, v17);
    return 1;
  }
  if (a2[2] != 5 && a2[2])
  {
LABEL_29:
    if (!*(_QWORD *)(a3 + 24))
    {
      if ((BYTE4(v33) & 4) != 0)
      {
        v17.n128_u64[0] = *(_QWORD *)(a3 + 32);
        *((_QWORD *)a2 + 8) = v17.n128_u64[0];
      }
      argb32_mark(a1, (uint64_t)a2, v17, v18, v19, v20, v11, v12, v13, v14, v15, v16);
      return 1;
    }
    goto LABEL_30;
  }
  argb32_mark_image((uint64_t)a2, v8, (uint64_t)v38 >> SBYTE6(v33), *((uint64_t *)&v38 + 1) >> SBYTE7(v33), *((uint64_t *)&v39[1] + 1) >> SBYTE7(v33), v14, v15, v16);
  return 1;
}

uint64_t RGBA32_image(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL4 v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  double v18;
  double v19;
  int16x8_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _OWORD v50[64];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v33 = 0u;
  memset(v50, 0, 512);
  if (*((_QWORD *)a2 + 12))
    v7 = 0;
  else
    v7 = *(float *)(a3 + 8) >= 1.0;
  v8 = *(_DWORD *)(*(_QWORD *)(v6 + 56) + 16 * *a2 + 8 * v7 + 4 * (*((_QWORD *)a2 + 6) == 0));
  if (v8 > 28)
    return 0xFFFFFFFFLL;
  if (*((int *)a2 + 1) < 1 || *((int *)a2 + 2) < 1)
    return 0;
  if ((int)_blt_image_initialize((uint64_t)a2, a3, (uint64_t)&v33, (uint64_t)v50) < 1)
    return 0xFFFFFFFFLL;
  v21 = *(_DWORD *)v6;
  v22 = *(_DWORD *)v6 != 134755208 || v8 <= 23;
  v23 = *(_DWORD *)a3;
  if (v22)
    v24 = v8;
  else
    v24 = (v8 + 4);
  DWORD2(v33) = *(_DWORD *)a3;
  HIDWORD(v33) = v21;
  if (v23 != 134755208)
  {
    v25 = SAMPLEINDEX(v23, v10, v11, v12, v13, v14, v15, v16);
    if (!v25)
      return 0xFFFFFFFFLL;
    if (v25 > 0xB)
    {
      if (v25 > 0x13)
      {
LABEL_35:
        v30 = 0;
        goto LABEL_37;
      }
      if (v25 - 14 < 4)
      {
LABEL_36:
        v30 = 1;
LABEL_37:
        *(_QWORD *)&v33 = argb32_image_sample[v25 + 1];
        if ((_QWORD)v33)
        {
          v31 = 134755160;
          goto LABEL_48;
        }
        if ((HIWORD(*(_DWORD *)a3) & 0x3Fu) > 8)
        {
          if ((*(_DWORD *)a3 & 0x3F0000u) >> 16 > 0x10)
          {
LABEL_45:
            *(_QWORD *)&v33 = *(_QWORD *)&RGBF_image_sample[2 * v25 + 2];
            if ((_QWORD)v33)
            {
              v31 = 538981289;
              v32 = 16;
              goto LABEL_47;
            }
            return 0xFFFFFFFFLL;
          }
        }
        else
        {
          *(_QWORD *)&v33 = *(_QWORD *)&RGB8_image_sample[2 * v25 + 2];
          if ((_QWORD)v33)
          {
            v31 = 134755224;
            goto LABEL_48;
          }
        }
        *(_QWORD *)&v33 = *(_QWORD *)&RGB16_image_sample[2 * v25 + 2];
        if ((_QWORD)v33)
        {
          v31 = 269497256;
          v32 = 8;
LABEL_47:
          LODWORD(v34) = v32;
LABEL_48:
          DWORD2(v33) = v31;
          if ((_QWORD)v44)
            v30 = 0;
          if (v30 == 1 && (BYTE4(v34) & 0x77) == 0x73 && (v24 - 1) <= 1 && (a2[2] == 5 || !a2[2]))
          {
            if (v25 > 0xB)
            {
              if (v25 <= 0x13)
              {
                if (v25 == 12 && (_DWORD)v24 == 1)
                {
                  v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
                  if (v17.n128_f32[0] == 1.0)
                  {
                    argb32_mark_image_W16((uint64_t)a2, (uint64_t)v39 >> SBYTE6(v34), *((uint64_t *)&v39 + 1) >> SBYTE7(v34), *((uint64_t *)&v41 + 1) >> SBYTE7(v34), v26, v27, v28, v29);
                    return 1;
                  }
                }
                else if (v25 == 13 && (_DWORD)v24 == 1)
                {
                  v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
                  if (v17.n128_f32[0] == 1.0)
                  {
                    argb32_mark_image_w16((uint64_t)a2, (uint64_t)v39 >> SBYTE6(v34), *((uint64_t *)&v39 + 1) >> SBYTE7(v34), *((uint64_t *)&v41 + 1) >> SBYTE7(v34), v26, v27, v28, v29);
                    return 1;
                  }
                }
                else if (v25 == 14 && (_DWORD)v24 == 1)
                {
                  v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
                  if (v17.n128_f32[0] == 1.0)
                  {
                    RGBA32_mark_image_RGB48((uint64_t)a2, (uint64_t)v39 >> SBYTE6(v34), *((uint64_t *)&v39 + 1) >> SBYTE7(v34), *((uint64_t *)&v41 + 1) >> SBYTE7(v34), v26, v27, v28, v29);
                    return 1;
                  }
                }
                else if (v25 == 15 && (_DWORD)v24 == 1)
                {
                  v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
                  if (v17.n128_f32[0] == 1.0)
                  {
                    RGBA32_mark_image_rgb48((uint64_t)a2, (uint64_t)v39 >> SBYTE6(v34), *((uint64_t *)&v39 + 1) >> SBYTE7(v34), *((uint64_t *)&v41 + 1) >> SBYTE7(v34), v26, v27, v28, v29);
                    return 1;
                  }
                }
                else if (v25 == 17)
                {
                  v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
                  if (v17.n128_f32[0] == 1.0)
                  {
                    RGBA32_mark_image_rgba64((uint64_t)a2, v24, (uint64_t)v39 >> SBYTE6(v34), *((uint64_t *)&v39 + 1) >> SBYTE7(v34), *((uint64_t *)&v41 + 1) >> SBYTE7(v34), v27, v28, v29);
                    return 1;
                  }
                }
                else if (v25 == 16)
                {
                  v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
                  if (v17.n128_f32[0] == 1.0)
                  {
                    RGBA32_mark_image_RGBA64((uint64_t)a2, v24, (uint64_t)v39 >> SBYTE6(v34), *((uint64_t *)&v39 + 1) >> SBYTE7(v34), *((uint64_t *)&v41 + 1) >> SBYTE7(v34), v27, v28, v29);
                    return 1;
                  }
                }
              }
            }
            else if (v25 == 2 && (_DWORD)v24 == 1)
            {
              v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
              if (v17.n128_f32[0] == 1.0)
              {
                argb32_mark_image_W8((uint64_t)a2, (uint64_t)v39 >> SBYTE6(v34), *((uint64_t *)&v39 + 1) >> SBYTE7(v34), *((uint64_t *)&v41 + 1) >> SBYTE7(v34), v26, v27, v28, v29);
                return 1;
              }
            }
            else
            {
              if (v25 != 5 || (_DWORD)v24 != 1)
              {
                switch(v25)
                {
                  case 6u:
                    v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
                    if (v17.n128_f32[0] != 1.0)
                      goto LABEL_63;
                    argb32_mark_image_xrgb32((uint64_t)a2, v24, (uint64_t)v39 >> SBYTE6(v34), *((uint64_t *)&v39 + 1) >> SBYTE7(v34), *((uint64_t *)&v41 + 1) >> SBYTE7(v34), v27, v28, v29);
                    break;
                  case 7u:
                    v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
                    if (v17.n128_f32[0] != 1.0)
                      goto LABEL_63;
                    argb32_mark_image_XRGB32((uint64_t)a2, v24, (uint64_t)v39 >> SBYTE6(v34), *((uint64_t *)&v39 + 1) >> SBYTE7(v34), *((uint64_t *)&v41 + 1) >> SBYTE7(v34), v27, v28, v29);
                    break;
                  case 8u:
                    v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
                    if (v17.n128_f32[0] != 1.0)
                      goto LABEL_63;
                    argb32_mark_image_rgbx32((uint64_t)a2, v24, (uint64_t)v39 >> SBYTE6(v34), *((uint64_t *)&v39 + 1) >> SBYTE7(v34), *((uint64_t *)&v41 + 1) >> SBYTE7(v34), v27, v28, v29);
                    break;
                  case 9u:
                    v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
                    if (v17.n128_f32[0] != 1.0)
                      goto LABEL_63;
                    argb32_mark_image_RGBX32((uint64_t)a2, v24, (uint64_t)v39 >> SBYTE6(v34), *((uint64_t *)&v39 + 1) >> SBYTE7(v34), *((uint64_t *)&v41 + 1) >> SBYTE7(v34), v27, v28, v29);
                    break;
                  default:
                    goto LABEL_63;
                }
                return 1;
              }
              v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
              if (v17.n128_f32[0] == 1.0)
              {
                RGBA32_mark_image_RGB24((uint64_t)a2, (uint64_t)v39 >> SBYTE6(v34), *((uint64_t *)&v39 + 1) >> SBYTE7(v34), *((uint64_t *)&v41 + 1) >> SBYTE7(v34), v26, v27, v28, v29);
                return 1;
              }
            }
          }
LABEL_63:
          argb32_image_mark((uint64_t)a2, (uint64_t)&v33, v24, v17);
          return 1;
        }
        goto LABEL_45;
      }
      if (v25 != 13 && v25 != 12)
        goto LABEL_35;
    }
    else
    {
      if (v25 - 5 < 5)
        goto LABEL_36;
      if (v25 != 2)
        goto LABEL_35;
    }
    if (*((_QWORD *)a2 + 12))
      goto LABEL_35;
    goto LABEL_36;
  }
  if ((_QWORD)v44 || (~DWORD1(v34) & 0xC3) != 0)
    goto LABEL_62;
  v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
  if ((BYTE4(v34) & 4) != 0 || (v24 - 1) > 1 || (LODWORD(v18) = 1.0, v17.n128_f32[0] != 1.0))
  {
    LODWORD(v18) = 1.0;
    if (v17.n128_f32[0] >= 1.0)
      goto LABEL_61;
LABEL_62:
    *(_QWORD *)&v33 = argb32_sample_argb32;
    goto LABEL_63;
  }
  if (a2[2] != 5 && a2[2])
  {
LABEL_61:
    if (!*(_QWORD *)(a3 + 24))
    {
      if ((BYTE4(v34) & 4) != 0)
      {
        v17.n128_u64[0] = *(_QWORD *)(a3 + 32);
        *((_QWORD *)a2 + 8) = v17.n128_u64[0];
      }
      argb32_mark(a1, (uint64_t)a2, v17, v18, v19, v20, v11, v12, v13, v14, v15, v16);
      return 1;
    }
    goto LABEL_62;
  }
  argb32_mark_image((uint64_t)a2, v24, (uint64_t)v39 >> SBYTE6(v34), *((uint64_t *)&v39 + 1) >> SBYTE7(v34), *((uint64_t *)&v41 + 1) >> SBYTE7(v34), v14, v15, v16);
  return 1;
}

uint64_t _blt_image_initialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  int v7;
  uint32x2_t v8;
  uint64_t v9;
  float32x2_t v10;
  float64x2_t v11;
  double v18;
  double v19;
  int v20;
  int32x2_t v21;
  int64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  int8x16_t v26;
  int8x16_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  int64x2_t v31;
  int8x16_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int v50;
  float32x2_t *v51;
  float64x2_t v52;
  float64x2_t v53;
  int64x2_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float64x2_t v58;
  int64x2_t v59;
  uint64_t result;
  double v61;
  float *v62;
  double v63;
  double v64;
  double v65;
  double v66;
  uint64_t v67;
  double v68;
  float64x2_t v69;
  unint64_t v70;
  int8x16_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int v76;
  int v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  float64x2_t v84;
  double v85;
  double v86;
  double v87;
  double v88;
  uint64_t v89;
  double v90;
  uint64_t v91;
  uint64_t v92;
  int32x2_t v93;
  char v94;
  int v95;
  int v96;
  unsigned int v97;
  int64x2_t v98;
  int8x16_t v99;
  int64x2_t v100;
  int8x16_t v101;
  float64x2_t v102;
  int64x2_t v103;
  int v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int32x2_t v116;
  int32x2_t v117;
  float v118;
  float v119;
  void *v120;
  int v121;
  uint64_t (*v122)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);

  v6 = *(unsigned __int8 *)(a1 + 1) << 8;
  v7 = 4 * (v6 == 512);
  v8 = *(uint32x2_t *)(a2 + 32);
  *(uint32x2_t *)(a3 + 256) = v8;
  v9 = *(_QWORD *)(a2 + 24);
  if (v9)
  {
    v10.i32[0] = *(_DWORD *)(v9 + 12);
    v10.i32[1] = *(_DWORD *)v9;
    v11 = vcvtq_f64_f32(*(float32x2_t *)(v9 + 4));
    _Q1 = vcvtq_f64_f32(v10);
    __asm { FMLA            D2, D1, V1.D[1] }
    if (_D2 == 0.0)
      return 0xFFFFFFFFLL;
    v18 = 1.0 / _D2;
    v19 = (double)(*(_DWORD *)(a1 + 4) - 1);
    v20 = *(_DWORD *)(a1 + 8) - 1;
    v21 = vsub_s32(*(int32x2_t *)(a1 + 12), *(int32x2_t *)(a1 + 56));
    v22.i64[0] = v21.i32[0];
    v22.i64[1] = v21.i32[1];
    v23 = vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)(v9 + 16)), vcvtq_f64_s64(v22));
    v24 = vmulq_n_f64(v11, v18);
    v25 = vmulq_n_f64(_Q1, v18);
    v26 = (int8x16_t)vmulq_f64(v23, vnegq_f64(v25));
    v27 = (int8x16_t)vmlaq_f64((float64x2_t)vextq_s8(v26, v26, 8uLL), v23, v24);
    v28.f64[1] = v25.f64[1];
    v28.f64[0] = -v24.f64[1];
    v29.f64[0] = v25.f64[0];
    v29.f64[1] = -v24.f64[0];
    v30 = vaddq_f64(vmlaq_n_f64(vmulq_n_f64(v28, (double)(int)HIDWORD(*(_QWORD *)(a1 + 12)) + 0.5), v29, (double)(int)*(_QWORD *)(a1 + 12) + 0.5), (float64x2_t)vextq_s8(v27, v27, 8uLL));
    v31 = vcvtq_n_s64_f64(v30, 0x20uLL);
    *(int64x2_t *)(a3 + 96) = v31;
    *(_WORD *)(a3 + 22) = 8224;
    v23.f64[0] = v24.f64[0];
    v23.f64[1] = v25.f64[1];
    v32 = (int8x16_t)vcvtq_s64_f64(vmulq_f64(v23, (float64x2_t)xmmword_185005090));
    v33 = v32.i64[1];
    *(_QWORD *)(a3 + 136) = v32.i64[1];
    v34 = v32.i64[0];
    *(_QWORD *)(a3 + 120) = v32.i64[0];
    if (!(v32.i32[2] | v32.i32[0]))
      v7 |= 0x20u;
    if (v32.i64[1] >= 0)
      v35 = v32.u64[1];
    else
      v35 = -v32.i64[1];
    if (v32.i64[0] >= 0)
      v36 = v32.i64[0];
    else
      v36 = -v32.i64[0];
    v37 = v35 + v36;
    v38 = *(_DWORD *)(a2 + 36);
    v39 = v7 | 0x200;
    if (v35 >= v36)
      v40 = v36;
    else
      v40 = v35;
    if (v32.i64[0])
      v35 = v40;
    if (!v32.i64[1])
      v35 = v36;
    if (!(v35 >> 34))
      v7 |= 0x2000u;
    if (v38 >= 0x7FFFFFFF)
      v41 = 0x7FFFFFFFLL;
    else
      v41 = v38;
    if (v38 == 1)
    {
      v42 = 1;
    }
    else
    {
      v39 = v7;
      v42 = v41;
    }
    v43 = v42 << 32;
    v44 = v42 << 32;
    if (v37 >= v42 << 32)
      v45 = v42 << 32;
    else
      v45 = v37;
    if (v45)
    {
      if (v45 < 0x3FFFFFFFFFFFFFFFLL)
      {
        *(_QWORD *)(a3 + 216) = v45;
        *(_QWORD *)(a3 + 232) = 0x3FFFFFFFFFFFFFFFLL / v45;
        v46 = v45 >> 1;
        if (v46 <= 0x80000000)
          v46 = 0x80000000;
      }
      else
      {
        *(_QWORD *)(a3 + 216) = 0x3FFFFFFFFFFFFFFFLL;
        *(_QWORD *)(a3 + 232) = 1;
        v46 = 0x1FFFFFFFFFFFFFFFLL;
      }
    }
    else
    {
      *(_QWORD *)(a3 + 216) = 0;
      *(_QWORD *)(a3 + 232) = 0;
      v46 = 0x100000000;
    }
    v61 = (double)v20;
    *(_QWORD *)(a3 + 224) = v46;
    *(_QWORD *)(a3 + 56) = v44;
    v55 = v46;
    v62 = *(float **)(a2 + 40);
    if (v62)
    {
      v63 = v62[1];
      v64 = v62[3];
      v65 = v63 * 4294967300.0;
      _NF = v63 < -2147483650.0;
      v66 = -9.22337203e18;
      if (!_NF)
        v66 = v65;
      v67 = (uint64_t)v66;
      v68 = 9.22337203e18;
      if (v64 <= 2147483650.0)
        v68 = v64 * 4294967300.0;
      v44 = (uint64_t)v68;
      if ((v39 & 4) == 0)
      {
        if (v67 < -16777216)
          v67 = 0;
        if ((v43 | 0x1000000) < v44)
          v44 = v43;
      }
      v55 = v67 + v46;
    }
    v69 = vmlaq_n_f64(v30, v29, v19);
    *(_QWORD *)(a3 + 72) = v55;
    v70 = v44 - v46;
    *(_QWORD *)(a3 + 88) = v44 - v46;
    v71 = (int8x16_t)vcvtq_s64_f64(vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v24, (int8x16_t)v25, 8uLL), (float64x2_t)xmmword_185005090));
    v72 = v71.i64[1];
    *(_QWORD *)(a3 + 112) = v71.i64[1];
    v56 = v71.i64[0];
    *(_QWORD *)(a3 + 128) = v71.i64[0];
    if (v71.i32[2] | v71.i32[0])
      v50 = v39;
    else
      v50 = v39 | 0x10;
    if (v71.i64[1] >= 0)
      v73 = v71.u64[1];
    else
      v73 = -v71.i64[1];
    if (v71.i64[0] >= 0)
      v74 = v71.i64[0];
    else
      v74 = -v71.i64[0];
    v75 = v73 + v74;
    v76 = *(_DWORD *)(a2 + 32);
    v77 = v50 | 0x100;
    if (v73 >= v74)
      v78 = v74;
    else
      v78 = v73;
    if (v71.i64[0])
      v73 = v78;
    if (!v71.i64[1])
      v73 = v74;
    if (!(v73 >> 34))
      v50 |= 0x1000u;
    if (v76 >= 0x7FFFFFFF)
      v79 = 0x7FFFFFFFLL;
    else
      v79 = v76;
    if (v76 == 1)
    {
      v50 = v77;
      v79 = 1;
    }
    v80 = v79 << 32;
    v81 = v79 << 32;
    if (v75 >= v79 << 32)
      v82 = v79 << 32;
    else
      v82 = v75;
    if (v82)
    {
      if (v82 < 0x3FFFFFFFFFFFFFFFLL)
      {
        *(_QWORD *)(a3 + 192) = v82;
        *(_QWORD *)(a3 + 208) = 0x3FFFFFFFFFFFFFFFLL / v82;
        v83 = v82 >> 1;
        if (v83 <= 0x80000000)
          v83 = 0x80000000;
      }
      else
      {
        *(_QWORD *)(a3 + 192) = 0x3FFFFFFFFFFFFFFFLL;
        *(_QWORD *)(a3 + 208) = 1;
        v83 = 0x1FFFFFFFFFFFFFFFLL;
      }
    }
    else
    {
      *(_QWORD *)(a3 + 192) = 0;
      *(_QWORD *)(a3 + 208) = 0;
      v83 = 0x100000000;
    }
    v84 = vmlaq_n_f64(v69, v28, v61);
    *(_QWORD *)(a3 + 200) = v83;
    *(_QWORD *)(a3 + 48) = v81;
    v57 = v83;
    if (v62)
    {
      v85 = *v62;
      v86 = v62[2];
      v87 = v85 * 4294967300.0;
      _NF = v85 < -2147483650.0;
      v88 = -9.22337203e18;
      if (!_NF)
        v88 = v87;
      v89 = (uint64_t)v88;
      v90 = 9.22337203e18;
      if (v86 <= 2147483650.0)
        v90 = v86 * 4294967300.0;
      if (v89 >= -16777216)
        v91 = v89;
      else
        v91 = 0;
      if ((v80 | 0x1000000) >= (uint64_t)v90)
        v92 = (uint64_t)v90;
      else
        v92 = v80;
      if ((v50 & 4) != 0)
      {
        v81 = (uint64_t)v90;
      }
      else
      {
        v89 = v91;
        v81 = v92;
      }
      v57 = v89 + v83;
    }
    v49 = vcvtq_n_s64_f64(v84, 0x20uLL);
    *(_QWORD *)(a3 + 64) = v57;
    *(_QWORD *)(a3 + 80) = v81 - v83;
    v93 = vmovn_s64(vceqzq_s64((int64x2_t)vorrq_s8(v71, v32)));
    v94 = v93.i8[4] | v93.i8[0];
    v59.i64[0] = v81 - v83;
    v59.i64[1] = v70;
    v47.i64[0] = v80;
    v47.i64[1] = v43;
    if ((v94 & 1) != 0)
    {
      if (v71.i64[1] == 0x100000000)
        v95 = 66;
      else
        v95 = 2;
      v96 = v50 | v95;
      if (((unint64_t)(v31.i32[0] & 0xF0000000) - 1342177280) >> 29 >= 3)
        v97 = v96;
      else
        v97 = v96 & 0xFFFFEFFF;
      if ((~v50 & 0x1010) != 0)
        v50 = v96;
      else
        v50 = v97;
      if (v33 == 0x100000000)
        v50 |= 0x80u;
      if ((~v50 & 0x2020) == 0 && ((unint64_t)(v31.i32[2] & 0xF0000000) - 1342177280) >> 29 < 3)
        v50 &= ~0x2000u;
    }
  }
  else
  {
    v47 = vshll_n_s32((int32x2_t)vmin_u32(v8, (uint32x2_t)0x8000000080000000), 0x20uLL);
    v31 = (int64x2_t)vorrq_s8((int8x16_t)vshll_n_s32(*(int32x2_t *)(a1 + 56), 0x20uLL), (int8x16_t)vdupq_n_s64(0x80000000uLL));
    *(int64x2_t *)(a3 + 96) = v31;
    *(_WORD *)(a3 + 22) = 8224;
    v48 = vdupq_n_s64(0xFFFFFFFF80000000);
    v49 = vaddq_s64(vshll_n_s32(vadd_s32(*(int32x2_t *)(a1 + 4), *(int32x2_t *)(a1 + 56)), 0x20uLL), v48);
    *(_QWORD *)(a3 + 128) = 0;
    *(_QWORD *)(a3 + 136) = 0x100000000;
    *(_QWORD *)(a3 + 112) = 0x100000000;
    *(_QWORD *)(a3 + 120) = 0;
    v50 = v7 | 0xF2;
    *(_OWORD *)(a3 + 208) = xmmword_1850050A0;
    *(_OWORD *)(a3 + 224) = xmmword_1850050B0;
    *(_OWORD *)(a3 + 192) = xmmword_1850050C0;
    *(int64x2_t *)(a3 + 48) = v47;
    v51 = *(float32x2_t **)(a2 + 40);
    if (v51)
    {
      v52 = vcvtq_f64_f32(*v51);
      v53 = (float64x2_t)vdupq_n_s64(0x41F0000000000000uLL);
      v54 = vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)vdupq_n_s64(0xC1DFFFFFFFC00000), v52), (int8x16_t)vdupq_n_s64(0xC3DFFFFFFFC00000), (int8x16_t)vmulq_f64(v52, v53)));
      v55 = v54.i64[1] + 0x80000000;
      if (v6 == 512)
      {
        v34 = 0;
        v56 = 0;
        a4 = 0;
        v46 = 0x80000000;
        v57 = v54.i64[0] + 0x80000000;
        *(_QWORD *)(a3 + 64) = v54.i64[0] + 0x80000000;
        *(_QWORD *)(a3 + 72) = v55;
        v58 = vcvtq_f64_f32(v51[1]);
        v59 = vaddq_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v58, (float64x2_t)vdupq_n_s64(0x41DFFFFFFFC00000uLL)), (int8x16_t)vdupq_n_s64(0x43DFFFFFFFC00000uLL), (int8x16_t)vmulq_f64(v58, v53))), vdupq_n_s64(0xFFFFFFFF80000000));
        *(int64x2_t *)(a3 + 80) = v59;
      }
      else
      {
        v34 = 0;
        v56 = 0;
        a4 = 0;
        v98.i64[0] = -16777216;
        v98.i64[1] = -16777216;
        v99 = (int8x16_t)vcgtq_s64(v98, v54);
        v46 = 0x80000000;
        v100 = vdupq_n_s64(0x80000000uLL);
        v54.i64[0] = vaddq_s64(v54, v100).u64[0];
        v54.i64[1] += 0x80000000;
        v101 = vbslq_s8(v99, (int8x16_t)v100, (int8x16_t)v54);
        v102 = vcvtq_f64_f32(v51[1]);
        v103 = vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v102, (float64x2_t)vdupq_n_s64(0x41DFFFFFFFC00000uLL)), (int8x16_t)vdupq_n_s64(0x43DFFFFFFFC00000uLL), (int8x16_t)vmulq_f64(v102, v53)));
        v59 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v103, (int64x2_t)vorrq_s8((int8x16_t)v47, (int8x16_t)vdupq_n_s64(0x1000000uLL))), (int8x16_t)v47, (int8x16_t)v103), vdupq_n_s64(0xFFFFFFFF80000000));
        v55 = v101.i64[1];
        *(int8x16_t *)(a3 + 64) = v101;
        *(int64x2_t *)(a3 + 80) = v59;
        v57 = v101.i64[0];
      }
      v33 = 0x100000000;
    }
    else
    {
      v34 = 0;
      v56 = 0;
      a4 = 0;
      v55 = 0x80000000;
      v59 = vaddq_s64(v47, v48);
      v33 = 0x100000000;
      *(int64x2_t *)(a3 + 64) = vdupq_n_s64(0x80000000uLL);
      *(int64x2_t *)(a3 + 80) = v59;
      v57 = 0x80000000;
      v46 = 0x80000000;
    }
    v83 = 0x80000000;
    v72 = 0x100000000;
  }
  if (*(unsigned __int8 *)(a2 + 6) << 16)
    v104 = 0;
  else
    v104 = 0x3FFFFFFF;
  *(_DWORD *)(a3 + 188) = v104;
  if ((v50 & 2) != 0)
  {
    _VF = __OFADD__(v56, v72);
    v106 = v56 + v72;
    v105 = (v106 < 0) ^ _VF;
    v107 = v33 + v34;
    v108 = v49.i64[0] + (v106 >> 1);
    v109 = v31.i64[0] - (v106 >> 1);
    v110 = v105 ? v108 : v109;
    v111 = v105 ? v109 : v108;
    v112 = v107 >= 0 ? v31.i64[1] - (v107 >> 1) : v49.i64[1] + (v107 >> 1);
    v113 = v83 + (v83 >> 8);
    if (v110 >= (uint64_t)(v57 - v113) && v111 <= (uint64_t)(v59.i64[0] + v113))
    {
      v114 = v46 + (v46 >> 8);
      if (v112 >= (uint64_t)(v55 - v114))
      {
        if (v107 >= 0)
          v115 = v49.i64[1] + (v107 >> 1);
        else
          v115 = v31.i64[1] - (v107 >> 1);
        v50 |= v115 <= (uint64_t)(v59.i64[1] + v114);
      }
    }
  }
  if ((v50 & 4) != 0)
  {
    if ((v50 & 1) == 0)
      goto LABEL_143;
    v116 = vmovn_s64(vcgtzq_s64((int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v49, v31), (int8x16_t)v31, (int8x16_t)v49)));
    if ((v116.i32[0] & v116.i32[1] & 1) == 0)
      goto LABEL_143;
    v117 = vmovn_s64(vcgtq_s64(v47, (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v31, v49), (int8x16_t)v31, (int8x16_t)v49)));
    if ((v117.i32[0] & v117.i32[1] & 1) == 0)
      goto LABEL_143;
    v50 &= ~4u;
  }
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
LABEL_143:
  *(_DWORD *)(a3 + 20) = v50 | 0x20200000;
  v118 = *(float *)(a2 + 8);
  *(float *)(a3 + 184) = v118;
  v119 = 0.0;
  if (v118 < 0.0 || (v119 = 1.0, v118 > 1.0))
    *(float *)(a3 + 184) = v119;
  v120 = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_QWORD *)(a3 + 240) = 0;
  *(_QWORD *)(a3 + 248) = 0;
  if (a4 && *(_BYTE *)(a2 + 4))
  {
    v121 = v50 & 0x3000;
    if ((v50 & 0x3000) != 0)
    {
      if (v121 == 0x2000)
      {
        v120 = &_blt_image_interpolate_y;
      }
      else if (v121 == 4096)
      {
        v120 = &_blt_image_interpolate_x;
      }
      else
      {
        v120 = &_blt_image_interpolate_xy;
      }
    }
    else
    {
      v120 = 0;
    }
  }
  *(_QWORD *)(a3 + 176) = v120;
  v122 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 48);
  if (!v122 || (result = v122(*(_QWORD *)(a2 + 56), 0, a1 + 88, a1 + 76, a1 + 96, a1 + 80), (_DWORD)result != -1))
  {
    *(_QWORD *)(a3 + 24) = *(_QWORD *)(a1 + 76);
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(a1 + 88);
    return 1;
  }
  return result;
}

void argb32_mark_image(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v13;
  int v14;
  int v15;
  int *v16;
  int v17;
  void *v18;
  void *v19;
  int v20;
  int v21;
  int v22;
  char *v23;
  char *v24;
  unsigned int v25;
  int v26;
  uint64_t i;

  v11 = a2;
  if ((_DWORD)a2 != 2 && !*(_QWORD *)(a1 + 96))
  {
    if (*(_QWORD *)(a1 + 48))
      v11 = 0;
    else
      v11 = a2;
  }
  v13 = *(int *)(a1 + 28);
  v14 = *(_DWORD *)(a1 + 4);
  v15 = *(_DWORD *)(a1 + 8);
  v25 = v15;
  v26 = v14;
  v16 = *(int **)(a1 + 136);
  if (v16)
  {
    v17 = *(_DWORD *)(a1 + 104);
    LODWORD(i) = *(_DWORD *)(a1 + 108);
    HIDWORD(i) = v17;
    shape_enum_clip_alloc(a1, a2, v16, 1, 1, 1, v17, i, v14, v15);
    v19 = v18;
    if (v18)
      goto LABEL_14;
  }
  v20 = 0;
  v21 = 0;
  v19 = 0;
  for (i = 0; ; v20 = HIDWORD(i))
  {
    v22 = *(_DWORD *)(a1 + 76);
    v23 = (char *)(*(_QWORD *)(a1 + 88) + v22 * (uint64_t)(a4 + v21 * a5) + 4 * (v20 + a3));
    v24 = (char *)(*(_QWORD *)(a1 + 40) + (*(int *)(a1 + 16) + (uint64_t)v21) * v13 + 4 * (*(_DWORD *)(a1 + 12) + v20));
    if (v11 == 1)
    {
      CGBlt_copyBytes(4 * v26, v25, v23, v24, v22 * a5, v13);
      if (!v19)
        return;
    }
    else if (v11)
    {
      CGSBlend8888toRGBA8888(v23, v22 * a5, v24, v13, v26, v25, 0xC6u, *(_QWORD *)(a1 + 48) != 0);
      if (!v19)
        return;
    }
    else
    {
      CGSConvertRGBX8888toRGBA8888(v23, v22 * a5, v24, v13, v26, v25, a7, a8);
      if (!v19)
        return;
    }
LABEL_14:
    if (!shape_enum_clip_next((uint64_t)v19, (int *)&i + 1, &i, &v26, &v25))
      break;
    v21 = i;
  }
  free(v19);
}

void CGBlt_copyBytes(int a1, int a2, char *a3, char *a4, int a5, int a6)
{
  int v6;
  int v7;
  int v8;
  char *v9;
  char *v10;
  uint64_t v12;
  int v13;
  char *v14;
  char *v15;
  size_t v16;
  int v17;
  char *v18;
  char *v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;

  if (a1 >= 1)
  {
    v6 = a2;
    if (a2 >= 1)
    {
      v7 = a6;
      v8 = a5;
      v9 = a4;
      v10 = a3;
      if (a4 != a3 || a6 != a5)
      {
        qword_1ECDA5E30 = (uint64_t)"CGBlt_copyBytes: buffer check:\n";
        ERROR_CGBlt_copyBytes_BufferIsNotReadable();
        ERROR_CGBlt_copyBytes_BufferIsNotReadable();
        v12 = v6 - 1;
        ERROR_CGBlt_copyBytes_BufferIsNotBigEnough();
        ERROR_CGBlt_copyBytes_BufferIsNotBigEnough();
        qword_1ECDA5E30 = 0;
        v13 = v7 - v8;
        v14 = &v10[v12 * v8];
        v15 = &v9[(int)v12 * (uint64_t)v7];
        v16 = a1;
        if (v9 < v10 || &v14[a1 - 1] < v9)
        {
          v20 = 0;
          if (v9 < v10 && v13 >= 1 && &v15[v16 - 1] >= v10)
          {
            v21 = ((int)v10 - (int)v9) / v13;
            v22 = __OFSUB__(v6, v21);
            v23 = v6 - v21;
            if ((v23 < 0) ^ v22 | (v23 == 0))
              v20 = 0;
            else
              v20 = v23;
          }
        }
        else if (v7 >= v8)
        {
          v20 = 0;
          v8 = -v8;
          v7 = -v7;
          v9 = v15;
          v10 = v14;
        }
        else if (v9 == v10)
        {
          v20 = 0;
          v10 = v9;
        }
        else
        {
          v17 = ((int)v10 - (int)v9) / v13;
          if (v17 >= v6)
          {
            v20 = 0;
            v19 = v15;
            v18 = v14;
          }
          else
          {
            v14 = &v10[v8 * (uint64_t)v17];
            v15 = &v9[v7 * (uint64_t)v17];
            v18 = &v14[v8];
            v19 = &v15[v7];
            v20 = ~v17 + v6;
          }
          v8 = -v8;
          v7 = -v7;
          v9 = v15;
          v10 = v14;
          v15 = v19;
          v14 = v18;
        }
        while (1)
        {
          if (v6 <= v20)
          {
            if (!v20)
              return;
            v20 = 0;
            v8 = -v8;
            v7 = -v7;
            v9 = v15;
            v10 = v14;
          }
          memmove(v9, v10, v16);
          v10 += v8;
          --v6;
          v9 += v7;
        }
      }
    }
  }
}

uint64_t SAMPLEINDEX(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned __int8 v12;
  int v13;
  BOOL v14;
  unsigned __int8 v15;
  int v16;
  unsigned __int8 v17;
  BOOL v18;
  unsigned __int8 v19;
  char v21;

  v8 = a1 >> 22;
  v9 = HIWORD(a1) & 0x3F;
  v10 = (a1 >> 4) & 3;
  v11 = (a1 >> 2) & 3;
  switch((a1 >> 8) & 0xF)
  {
    case 0u:
      if (v8 == 8 && (a1 & 0xF000) == 0x1000 && v9 == 8)
        return 1;
      if (v8 != 16 || (a1 & 1) == 0)
        return 0;
      v16 = 191;
      goto LABEL_35;
    case 1u:
      if (v8 == 8 && v9 == 8)
      {
        if (v11 < 2)
          return 2;
        return 0;
      }
      if (v8 != 16)
      {
        if (v8 != 32 || v9 != 32 || v11 > 1)
          return 0;
        v14 = v10 == 2;
        v15 = 20;
        goto LABEL_113;
      }
      if ((a1 & 1) == 0)
      {
        if (v9 == 8)
        {
          if (v11 != 2)
            _CGHandleAssert("SAMPLEINDEX", 126, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/SAMPLEINDEX.c", "alpha == MESHED_ALPHA", "meshed alpha expected here (%u)", a6, a7, a8, v11);
          return 32;
        }
        if (v9 != 16 || v11 > 1)
          return 0;
        v14 = v10 == 2;
        v15 = 12;
LABEL_113:
        if (v14)
          return (v15 + 1);
        else
          return v15;
      }
      if (v9 != 16)
        return 0;
      if (v11)
      {
        if (v11 != 1)
          return 0;
        if (v10 != 2)
        {
          v16 = 111;
          goto LABEL_35;
        }
        return 28;
      }
      if (v10 == 2)
        return 28;
      v16 = 118;
      goto LABEL_35;
    case 3u:
      v13 = a1 >> 6;
      if ((HIWORD(a1) & 0x3F) > 9u)
      {
        if (v9 == 10)
          return 33;
        if (v9 == 16)
        {
          if ((a1 & 1) == 0)
          {
            if (v10 == 1)
              return 0;
            if (v8 != 48 || v11)
            {
              if (v13 != 2 || v8 != 64 || v11 != 2)
                return 0;
              v14 = v10 == 2;
              v15 = 16;
            }
            else
            {
              v14 = v10 == 2;
              v15 = 14;
            }
            goto LABEL_113;
          }
          if (v10)
          {
            if (v8 == 48 && !v11)
              return 29;
            v16 = 79;
            if (v13 == 2 && v8 == 64 && v11 == 2)
              return 30;
          }
          else
          {
            v16 = 72;
          }
LABEL_35:
          _CGHandleAssert("SAMPLEINDEX", v16, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/SAMPLEINDEX.c", "", "Unimplemented", a6, a7, a8, v21);
        }
LABEL_63:
        if (v9 != 32 || v10 == 1)
          return 0;
        if (v8 != 96 || v11)
        {
          if (v13 != 2 || v8 != 128 || v11 != 2)
            return 0;
          v14 = v10 == 2;
          v15 = 24;
        }
        else
        {
          v14 = v10 == 2;
          v15 = 22;
        }
        goto LABEL_113;
      }
      if (v9 != 5)
      {
        if (v9 == 8)
        {
          if (v10 != 2)
          {
            if (v10 == 1)
            {
              if (v8 != 32 || v11 != 2)
                return 0;
              if (v13 == 2)
                v17 = 7;
              else
                v17 = 0;
              v18 = v13 == 1;
              v19 = 9;
              goto LABEL_96;
            }
            if (v10)
              return 0;
          }
          if (v8 == 24)
            return 5;
          if (v8 == 32 && v11 == 2)
          {
            if (v13 == 2)
              v17 = 6;
            else
              v17 = 0;
            v18 = v13 == 1;
            v19 = 8;
LABEL_96:
            if (v18)
              return v19;
            else
              return v17;
          }
          return 0;
        }
        goto LABEL_63;
      }
      v12 = 0;
      if (v8 == 16 && v13 == 1)
      {
        if (v10 == 1)
        {
          if (v11 < 2)
            return 4;
        }
        else if (!v10 && v11 < 2)
        {
          return 3;
        }
        return 0;
      }
      return v12;
    case 4u:
      if (v8 == 32 && v9 == 8)
      {
        if (v10 != 2)
        {
          if (v10 == 1)
          {
            if (v11 < 2)
              return 11;
            return 0;
          }
          if (v10)
            return 0;
        }
        if (v11 < 2)
          return 10;
        return 0;
      }
      if (v8 != 64 || v9 != 16)
      {
        if (v10 == 1 || v8 != 128 || v9 != 32 || v11 > 1)
          return 0;
        v14 = v10 == 2;
        v15 = 26;
        goto LABEL_113;
      }
      if ((a1 & 1) == 0)
      {
        if (v10 == 1 || v11 > 1)
          return 0;
        v14 = v10 == 2;
        v15 = 18;
        goto LABEL_113;
      }
      if (v10 == 2)
        return 31;
      v16 = 166;
      goto LABEL_35;
    default:
      return 0;
  }
}

void CGSBlend8888toRGBA8888(char *a1, int a2, char *a3, int a4, int a5, int a6, unsigned int a7, char a8)
{
  int v11;
  char *v12;
  int v13;
  void *v14;
  vImagePixelCount v15;
  char *v16;
  char *v17;
  int v18;
  unint64_t v19;
  void *v20;
  BOOL v21;
  int v22;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer srcBottom;
  vImage_Buffer srcTop;

  v11 = a4;
  v12 = a3;
  v13 = a2;
  v14 = a1;
  v15 = a5;
  if (a3 > a1 && a2 == a4)
  {
    v16 = &a1[4 * a5];
    if (v16 <= a3)
    {
      v19 = (unint64_t)&v16[(a6 - 1) * a2];
      v20 = (void *)(v19 - 4 * a5);
      v21 = v19 > (unint64_t)a3;
      if (v19 <= (unint64_t)a3)
        v11 = a2;
      else
        v11 = -a2;
      if (v19 > (unint64_t)a3)
        v17 = &a3[(a6 - 1) * a2];
      else
        v17 = a3;
      if (v19 <= (unint64_t)a3)
        v18 = a2;
      else
        v18 = -a2;
      if (v19 <= (unint64_t)a3)
        v22 = a2;
      else
        v22 = -a2;
      if (v21)
        v14 = v20;
      if (v21)
        v12 = &a3[(a6 - 1) * a2];
      v13 = v22;
    }
    else
    {
      v11 = 4 * a5;
      v17 = (char *)malloc_type_malloc(4 * a5 * a6, 0x90BB46A2uLL);
      v18 = v13;
    }
  }
  else
  {
    v17 = a3;
    v18 = a4;
  }
  srcTop.data = v14;
  srcTop.height = a6;
  srcTop.width = v15;
  srcTop.rowBytes = v13;
  srcBottom.data = v12;
  srcBottom.height = a6;
  srcBottom.width = v15;
  srcBottom.rowBytes = v18;
  dest.data = v17;
  dest.height = a6;
  dest.width = v15;
  dest.rowBytes = v11;
  permuteMap[0] = a7 >> 6;
  permuteMap[1] = (a7 >> 4) & 3;
  permuteMap[2] = (a7 >> 2) & 3;
  permuteMap[3] = a7 & 3;
  vImagePremultipliedAlphaBlendWithPermute_RGBA8888(&srcTop, &srcBottom, &dest, permuteMap, a8 != 1, 0x10u);
  if (v12 != v17)
  {
    CGBlt_copyBytes(v11, a6, v17, v12, v11, v18);
    free(v17);
  }
}

void argb32_mark_image_RGBX32(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v13;
  int v14;
  int v15;
  int *v16;
  int v17;
  void *v18;
  void *v19;
  int v20;
  int v21;
  int v22;
  char *v23;
  char *v24;
  int v25;
  unsigned int v26;
  int v27;
  uint64_t i;

  v11 = a2;
  v13 = *(int *)(a1 + 28);
  v14 = *(_DWORD *)(a1 + 4);
  v15 = *(_DWORD *)(a1 + 8);
  v26 = v15;
  v27 = v14;
  v16 = *(int **)(a1 + 136);
  if (v16)
  {
    v17 = *(_DWORD *)(a1 + 104);
    LODWORD(i) = *(_DWORD *)(a1 + 108);
    HIDWORD(i) = v17;
    shape_enum_clip_alloc(a1, a2, v16, 1, 1, 1, v17, i, v14, v15);
    v19 = v18;
    if (v18)
      goto LABEL_9;
  }
  v20 = 0;
  v21 = 0;
  v19 = 0;
  for (i = 0; ; v20 = HIDWORD(i))
  {
    v22 = *(_DWORD *)(a1 + 76);
    v23 = (char *)(*(_QWORD *)(a1 + 88) + v22 * (uint64_t)(a4 + v21 * a5) + 4 * (v20 + a3));
    v24 = (char *)(*(_QWORD *)(a1 + 40) + (*(int *)(a1 + 16) + (uint64_t)v21) * v13 + 4 * (*(_DWORD *)(a1 + 12) + v20));
    v25 = v22 * a5;
    if (v11 == 2)
    {
      CGSBlend8888toRGBA8888(v23, v25, v24, v13, v27, v26, 0xE4u, *(_QWORD *)(a1 + 48) != 0);
      if (!v19)
        return;
    }
    else if (*(_QWORD *)(a1 + 96))
    {
      CGSConvertBGRA8888toRGBA8888(v23, v25, v24, v13, v27, v26, a7, a8);
      if (!v19)
        return;
    }
    else
    {
      CGSConvertBGRX8888toRGBA8888(v23, v25, v24, v13, v27, v26, a7, a8);
      if (!v19)
        return;
    }
LABEL_9:
    if (!shape_enum_clip_next((uint64_t)v19, (int *)&i + 1, &i, &v27, &v26))
      break;
    v21 = i;
  }
  free(v19);
}

void CGSConvertBGRA8888toRGBA8888(char *a1, unsigned int a2, char *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  char *v10;
  size_t v11;
  size_t v12;
  char *v13;
  uint64_t i;
  char *v15;
  int v16;
  char v17;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  if (a5 < 0)
    _CGHandleAssert("CGSConvertBGRA8888toRGBA8888", 430, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "width >= 0", "width (%d) < 0", a6, a7, a8, a5);
  v9 = a6;
  if ((a6 & 0x80000000) != 0)
    _CGHandleAssert("CGSConvertBGRA8888toRGBA8888", 430, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "height >= 0", "height (%d) < 0", a6, a7, a8, a6);
  if (a4 < 0)
    v10 = &a3[((int)a6 - 1) * a4];
  else
    v10 = a3;
  if (a4 >= 0)
    v11 = a4;
  else
    v11 = -a4;
  if (a4 >= 0)
    v12 = a2;
  else
    v12 = -a2;
  if (a4 < 0)
    v13 = &a1[((int)a6 - 1) * (uint64_t)(int)a2];
  else
    v13 = a1;
  if ((v12 & 0x80000000) != 0)
  {
    CGBlt_copyBytes(4 * a5, a6, v13, v10, v12, v11);
    if (v9 >= 1)
    {
      for (i = 0; i != v9; ++i)
      {
        if (a5 >= 1)
        {
          v15 = &v10[i * v11];
          v16 = a5;
          do
          {
            v17 = *v15;
            *v15 = v15[2];
            v15[2] = v17;
            v15 += 4;
            --v16;
          }
          while (v16);
        }
      }
    }
  }
  else
  {
    src.data = v13;
    src.height = (int)a6;
    src.width = a5;
    src.rowBytes = v12;
    dest.data = v10;
    dest.height = (int)a6;
    dest.width = a5;
    dest.rowBytes = v11;
    *(_DWORD *)permuteMap = 50331906;
    vImagePermuteChannels_ARGB8888(&src, &dest, permuteMap, 0);
  }
}

void argb32_image_mark_image(uint64_t a1, uint64_t a2, int a3, int a4, void (*a5)(_QWORD, _QWORD))
{
  __n128 v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  int v50;
  int v51;
  int *v52;
  int v53;
  void *v54;
  void *v55;
  int v56;
  int v57;
  void (*v58)(_QWORD, _QWORD);
  char *v59;
  _QWORD *v60;
  _DWORD v61[2];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  int v70;
  int v71;
  _QWORD v72[3];

  v72[1] = *MEMORY[0x1E0C80C00];
  v8.n128_u32[1] = 0;
  v8.n128_u64[1] = 0;
  v62 = 0u;
  v63 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v61[0] = a3;
  v61[1] = a4;
  v8.n128_f32[0] = (float)(*(float *)(a2 + 184) * 255.0) + 0.5;
  LOBYTE(v62) = (int)v8.n128_f32[0];
  v9 = (unint64_t)*(int *)(a1 + 28) >> 2;
  *(_QWORD *)&v63 = v9;
  v10 = *(_QWORD *)(a2 + 120);
  v11 = *(_DWORD *)(a2 + 20);
  v12 = HIBYTE(v11);
  v13 = BYTE2(v11);
  if (v10)
  {
    v14 = *(int *)(a2 + 24);
    v15 = (uint64_t *)(a2 + 104);
    v16 = (uint64_t *)(a2 + 72);
    v17 = (uint64_t *)(a2 + 88);
    v18 = v12;
  }
  else
  {
    v14 = (unint64_t)*(unsigned int *)(a2 + 8) >> 25;
    v15 = (uint64_t *)(a2 + 96);
    v16 = (uint64_t *)(a2 + 64);
    v17 = (uint64_t *)(a2 + 80);
    v10 = *(_QWORD *)(a2 + 112);
    v18 = v13;
  }
  v19 = *v17;
  v20 = *v16;
  v21 = *v15;
  v22 = v18;
  *((_QWORD *)&v64 + 1) = v18;
  *((_QWORD *)&v63 + 1) = v21;
  *((_QWORD *)&v68 + 1) = v14;
  *((_QWORD *)&v67 + 1) = v19;
  *((_QWORD *)&v66 + 1) = v20;
  *((_QWORD *)&v65 + 1) = v10;
  v23 = *(_QWORD *)(a2 + 128);
  if (v23)
  {
    v24 = (unint64_t)*(unsigned int *)(a2 + 8) >> 25;
    v25 = (uint64_t *)(a2 + 96);
    v26 = (uint64_t *)(a2 + 64);
    v27 = (uint64_t *)(a2 + 80);
    v12 = v13;
  }
  else
  {
    v24 = *(int *)(a2 + 24);
    v25 = (uint64_t *)(a2 + 104);
    v26 = (uint64_t *)(a2 + 72);
    v27 = (uint64_t *)(a2 + 88);
    v23 = *(_QWORD *)(a2 + 136);
  }
  v60 = &v58;
  v28 = *v27;
  v29 = *v26;
  v30 = *v25;
  *(_QWORD *)&v65 = v12;
  *(_QWORD *)&v64 = v30;
  *(_QWORD *)&v69 = v24;
  *(_QWORD *)&v68 = v28;
  *(_QWORD *)&v67 = v29;
  *(_QWORD *)&v66 = v23;
  v31 = *(int *)(a1 + 4);
  v32 = MEMORY[0x1E0C80A78](v20, v8);
  v59 = (char *)&v58 - v34 - 15;
  if (v35 <= 0xFFFFFFFFFFFFFFELL)
    v37 = (uint64_t *)((char *)&v58 - v34 - 15);
  else
    v37 = 0;
  if (v35 - 0xFFFFFFFFFFFFFFFLL >= 0xF000000000000402)
  {
    v58 = a5;
    v38 = v32;
    v39 = v36;
    v40 = (char *)malloc_type_malloc(16 * v31, 0x1B1F656EuLL);
    v36 = v39;
    v37 = (uint64_t *)v40;
    v32 = v38;
    a5 = v58;
  }
  *((_QWORD *)&v69 + 1) = v37;
  if (v37)
  {
    v41 = v31;
    if (*(_QWORD *)(a2 + 176))
    {
      if ((int)v31 >= 1)
      {
        v42 = v37 + 1;
        v43 = -v32;
        v44 = v36 - v21;
        do
        {
          if (((v43 + v21) | v44) < 0)
          {
            v47 = 0;
            v48 = 0;
          }
          else
          {
            v45 = ((v21 & (unint64_t)~(-1 << v22)) >> (v22 - 4)) & 0xF;
            v46 = weights_19497[v45];
            if (v45 - 7 >= 9)
              v47 = -(uint64_t)v14;
            else
              v47 = v14;
            v48 = v46 & 0xF;
          }
          v32 = v14 * (v21 >> v22);
          *(v42 - 1) = v32;
          *v42 = v48 | (16 * v47);
          v42 += 2;
          v21 += v10;
          v44 -= v10;
          --v41;
        }
        while (v41);
      }
    }
    else if ((int)v31 >= 1)
    {
      v49 = v37 + 1;
      do
      {
        *(v49 - 1) = v14 * (v21 >> v22);
        *v49 = 0;
        v49 += 2;
        v21 += v10;
        --v41;
      }
      while (v41);
    }
    v50 = *(_DWORD *)(a1 + 4);
    v51 = *(_DWORD *)(a1 + 8);
    v70 = v51;
    v71 = v50;
    v52 = *(int **)(a1 + 136);
    if (v52)
    {
      v53 = *(_DWORD *)(a1 + 104);
      LODWORD(v72[0]) = *(_DWORD *)(a1 + 108);
      HIDWORD(v72[0]) = v53;
      shape_enum_clip_alloc(v32, v33, v52, 1, 1, 1, v53, v72[0], v50, v51);
      v55 = v54;
      if (v54)
        goto LABEL_31;
    }
    v56 = 0;
    v57 = 0;
    v55 = 0;
    v72[0] = 0;
    while (1)
    {
      *((_QWORD *)&v62 + 1) = *(_QWORD *)(a1 + 40)
                            + 4 * v9 * (*(int *)(a1 + 16) + (uint64_t)v57)
                            + 4 * (v56 + *(_DWORD *)(a1 + 12));
      a5(a2, v61);
      if (!v55)
        break;
LABEL_31:
      if (!shape_enum_clip_next((uint64_t)v55, (int *)v72 + 1, v72, &v71, &v70))
      {
        free(v55);
        break;
      }
      v57 = v72[0];
      v56 = HIDWORD(v72[0]);
      v9 = v63;
    }
    if (v37 != (uint64_t *)v59)
      free(v37);
  }
}

void argb32_mark_image_XRGB32(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v13;
  int v14;
  int v15;
  int *v16;
  int v17;
  void *v18;
  void *v19;
  int v20;
  int v21;
  int v22;
  char *v23;
  char *v24;
  int v25;
  unsigned int v26;
  int v27;
  uint64_t i;

  v11 = a2;
  v13 = *(int *)(a1 + 28);
  v14 = *(_DWORD *)(a1 + 4);
  v15 = *(_DWORD *)(a1 + 8);
  v26 = v15;
  v27 = v14;
  v16 = *(int **)(a1 + 136);
  if (v16)
  {
    v17 = *(_DWORD *)(a1 + 104);
    LODWORD(i) = *(_DWORD *)(a1 + 108);
    HIDWORD(i) = v17;
    shape_enum_clip_alloc(a1, a2, v16, 1, 1, 1, v17, i, v14, v15);
    v19 = v18;
    if (v18)
      goto LABEL_9;
  }
  v20 = 0;
  v21 = 0;
  v19 = 0;
  for (i = 0; ; v20 = HIDWORD(i))
  {
    v22 = *(_DWORD *)(a1 + 76);
    v23 = (char *)(*(_QWORD *)(a1 + 88) + v22 * (uint64_t)(a4 + v21 * a5) + 4 * (v20 + a3));
    v24 = (char *)(*(_QWORD *)(a1 + 40) + (*(int *)(a1 + 16) + (uint64_t)v21) * v13 + 4 * (*(_DWORD *)(a1 + 12) + v20));
    v25 = v22 * a5;
    if (v11 == 2)
    {
      CGSBlend8888toRGBA8888(v23, v25, v24, v13, v27, v26, 0x39u, *(_QWORD *)(a1 + 48) != 0);
      if (!v19)
        return;
    }
    else if (*(_QWORD *)(a1 + 96))
    {
      CGSConvertABGR8888toRGBA8888(v23, v25, v24, v13, v27, v26, a7, a8);
      if (!v19)
        return;
    }
    else
    {
      CGSConvertXBGR8888toRGBA8888(v23, v25, v24, v13, v27, v26, a7, a8);
      if (!v19)
        return;
    }
LABEL_9:
    if (!shape_enum_clip_next((uint64_t)v19, (int *)&i + 1, &i, &v27, &v26))
      break;
    v21 = i;
  }
  free(v19);
}

void CGSConvertABGR8888toRGBA8888(char *a1, unsigned int a2, char *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  char *v10;
  size_t v11;
  size_t v12;
  char *v13;
  uint8x8_t v14;
  uint64_t i;
  __int32 *v16;
  int v17;
  int16x8_t v18;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;

  if (a5 < 0)
    _CGHandleAssert("CGSConvertABGR8888toRGBA8888", 363, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "width >= 0", "width (%d) < 0", a6, a7, a8, a5);
  v9 = a6;
  if ((a6 & 0x80000000) != 0)
    _CGHandleAssert("CGSConvertABGR8888toRGBA8888", 363, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-rgba8.c", "height >= 0", "height (%d) < 0", a6, a7, a8, a6);
  if (a4 < 0)
    v10 = &a3[((int)a6 - 1) * a4];
  else
    v10 = a3;
  if (a4 >= 0)
    v11 = a4;
  else
    v11 = -a4;
  if (a4 >= 0)
    v12 = a2;
  else
    v12 = -a2;
  if (a4 < 0)
    v13 = &a1[((int)a6 - 1) * (uint64_t)(int)a2];
  else
    v13 = a1;
  if ((v12 & 0x80000000) != 0)
  {
    CGBlt_copyBytes(4 * a5, a6, v13, v10, v12, v11);
    if (v9 >= 1)
    {
      for (i = 0; i != v9; ++i)
      {
        if (a5 >= 1)
        {
          v16 = (__int32 *)&v10[i * v11];
          v17 = a5;
          do
          {
            v14.i32[0] = *v16;
            v18 = (int16x8_t)vmovl_u8(v14);
            *(int16x4_t *)v18.i8 = vrev64_s16(*(int16x4_t *)v18.i8);
            v14 = (uint8x8_t)vmovn_s16(v18);
            *v16++ = v14.i32[0];
            --v17;
          }
          while (v17);
        }
      }
    }
  }
  else
  {
    src.data = v13;
    src.height = (int)a6;
    src.width = a5;
    src.rowBytes = v12;
    dest.data = v10;
    dest.height = (int)a6;
    dest.width = a5;
    dest.rowBytes = v11;
    *(_DWORD *)permuteMap = 66051;
    vImagePermuteChannels_ARGB8888(&src, &dest, permuteMap, 0);
  }
}

void CGSBlend8888toARGB8888(char *a1, int a2, char *a3, int a4, int a5, int a6, unsigned int a7, char a8)
{
  int v11;
  char *v12;
  int v13;
  void *v14;
  vImagePixelCount v15;
  char *v16;
  char *v17;
  int v18;
  unint64_t v19;
  void *v20;
  BOOL v21;
  int v22;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer srcBottom;
  vImage_Buffer srcTop;

  v11 = a4;
  v12 = a3;
  v13 = a2;
  v14 = a1;
  v15 = a5;
  if (a3 > a1 && a2 == a4)
  {
    v16 = &a1[4 * a5];
    if (v16 <= a3)
    {
      v19 = (unint64_t)&v16[(a6 - 1) * a2];
      v20 = (void *)(v19 - 4 * a5);
      v21 = v19 > (unint64_t)a3;
      if (v19 <= (unint64_t)a3)
        v11 = a2;
      else
        v11 = -a2;
      if (v19 > (unint64_t)a3)
        v17 = &a3[(a6 - 1) * a2];
      else
        v17 = a3;
      if (v19 <= (unint64_t)a3)
        v18 = a2;
      else
        v18 = -a2;
      if (v19 <= (unint64_t)a3)
        v22 = a2;
      else
        v22 = -a2;
      if (v21)
        v14 = v20;
      if (v21)
        v12 = &a3[(a6 - 1) * a2];
      v13 = v22;
    }
    else
    {
      v11 = 4 * a5;
      v17 = (char *)malloc_type_malloc(4 * a5 * a6, 0xE8732C4AuLL);
      v18 = v13;
    }
  }
  else
  {
    v17 = a3;
    v18 = a4;
  }
  srcTop.data = v14;
  srcTop.height = a6;
  srcTop.width = v15;
  srcTop.rowBytes = v13;
  srcBottom.data = v12;
  srcBottom.height = a6;
  srcBottom.width = v15;
  srcBottom.rowBytes = v18;
  dest.data = v17;
  dest.height = a6;
  dest.width = v15;
  dest.rowBytes = v11;
  permuteMap[0] = a7 >> 6;
  permuteMap[1] = (a7 >> 4) & 3;
  permuteMap[2] = (a7 >> 2) & 3;
  permuteMap[3] = a7 & 3;
  vImagePremultipliedAlphaBlendWithPermute_ARGB8888(&srcTop, &srcBottom, &dest, permuteMap, a8 != 1, 0x10u);
  if (v12 != v17)
  {
    CGBlt_copyBytes(v11, a6, v17, v12, v11, v18);
    free(v17);
  }
}

void ARGB32_mark_image_RGB24(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v10;
  int v11;
  int v12;
  int *v13;
  int v14;
  void *v15;
  void *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  size_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t i;
  char *v33;
  int v34;
  char *v35;
  __int16 v36;
  char v37;
  int v39;
  int v41;
  int v42;
  uint64_t v43;
  vImage_Buffer v44;
  vImage_Buffer v45;

  v8 = a4;
  v39 = a2;
  v10 = *(_DWORD *)(a1 + 28);
  v11 = *(_DWORD *)(a1 + 4);
  v12 = *(_DWORD *)(a1 + 8);
  v41 = v12;
  v42 = v11;
  v13 = *(int **)(a1 + 136);
  if (v13)
  {
    v14 = *(_DWORD *)(a1 + 104);
    LODWORD(v43) = *(_DWORD *)(a1 + 108);
    HIDWORD(v43) = v14;
    shape_enum_clip_alloc(a1, a2, v13, 1, 1, 1, v14, v43, v11, v12);
    v16 = v15;
    if (v15)
      goto LABEL_28;
  }
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v43 = 0;
  if (v11 < 0)
LABEL_4:
    _CGHandleAssert("CGSConvertRGB888toARGB8888", 241, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-argb8.c", "width >= 0", "width (%d) is negative", a6, a7, a8, v11);
  while (1)
  {
    if (v12 < 0)
      _CGHandleAssert("CGSConvertRGB888toARGB8888", 241, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/convert-to-argb8.c", "height >= 0", "height (%d) is negative", a6, a7, a8, v12);
    v19 = *(_DWORD *)(a1 + 76);
    v20 = *(_QWORD *)(a1 + 88) + v19 * (uint64_t)(a3 + v18 * v8) + 3 * (v17 + v39);
    v21 = *(_QWORD *)(a1 + 40) + (*(int *)(a1 + 16) + (uint64_t)v18) * v10 + 4 * (*(_DWORD *)(a1 + 12) + v17);
    v22 = v19 * (uint64_t)v8;
    v23 = v12 - 1;
    v24 = v20 + (int)v23 * v22;
    v25 = v21 + v23 * v10;
    v26 = (char *)(v10 < 0 ? v25 : v21);
    v27 = v10 >= 0 ? v10 : -v10;
    v28 = v10 >= 0 ? v22 : -(int)v22;
    v29 = (char *)(v10 < 0 ? v24 : v20);
    if ((v28 & 0x80000000) != 0)
    {
      v30 = (char *)malloc_type_malloc((int)v27 * v12, 0x37322E0uLL);
      v31 = v30;
      if (v12 >= 1)
      {
        for (i = 0; i != v12; ++i)
        {
          if (v11 >= 1)
          {
            v33 = &v30[i * v27];
            v34 = v11;
            v35 = &v29[i * (int)v28];
            do
            {
              v36 = *(_WORD *)v35;
              v37 = v35[2];
              *v33 = -1;
              *(_WORD *)(v33 + 1) = v36;
              v33[3] = v37;
              v35 += 3;
              v33 += 4;
              --v34;
            }
            while (v34);
          }
        }
      }
      CGBlt_copyBytes(4 * v11, v12, v30, v26, v27, v27);
      free(v31);
      v8 = a4;
      if (!v16)
        return;
    }
    else
    {
      v45.data = v29;
      v45.height = v12;
      v45.width = v11;
      v45.rowBytes = v28;
      v44.data = v26;
      v44.height = v12;
      v44.width = v11;
      v44.rowBytes = v27;
      vImageConvert_RGB888toARGB8888(&v45, 0, 0xFFu, &v44, 0, 0);
      if (!v16)
        return;
    }
LABEL_28:
    if (!shape_enum_clip_next((uint64_t)v16, (int *)&v43 + 1, &v43, &v42, &v41))
      break;
    v18 = v43;
    v17 = HIDWORD(v43);
    v12 = v41;
    v11 = v42;
    if (v42 < 0)
      goto LABEL_4;
  }
  free(v16);
}

os_unfair_lock_s *CGFontNameTableCopyRootName(os_unfair_lock_s *result, unsigned int a2)
{
  os_unfair_lock_s *v3;
  CFLocaleRef System;

  if (result)
  {
    v3 = result;
    System = CFLocaleGetSystem();
    return (os_unfair_lock_s *)copy_localized_value(v3, System, a2);
  }
  return result;
}

CGColorSpaceRef CGColorSpaceGetBaseColorSpace(CGColorSpaceRef space)
{
  uint64_t v1;

  if (space)
  {
    v1 = *((_QWORD *)space + 3);
    if ((*(_DWORD *)(v1 + 24) - 5) > 1)
      return 0;
    else
      return **(CGColorSpaceRef **)(v1 + 88);
  }
  return space;
}

uint64_t CGPatternIsColored(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 185);
}

double CGPatternGetStep(uint64_t a1)
{
  return *(double *)(a1 + 136);
}

CGFontRef CGFontCreateWithDataProvider(CGDataProviderRef provider)
{
  return (CGFontRef)CGFontCreateWithDataProviderAndData((uint64_t)provider, 0);
}

void CGImageSetCachingFlags(_BYTE *a1, char a2)
{
  CFTypeID v4;

  if (a1)
  {
    v4 = CFGetTypeID(a1);
    if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1)
      dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_211);
    if (v4 == CGImageGetTypeID_image_type_id)
      a1[36] = a2;
  }
}

CGGradientRef CGGradientRetain(CGGradientRef gradient)
{
  if (gradient)
    CFRetain(gradient);
  return gradient;
}

const void *defaults_setup()
{
  get_BOOLean_property("CGFontAutohintingEnabled", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&autohinting_enabled);
  get_BOOLean_property("CGFontAutohintingAdjustDilation", (const void *(*)(const char *))copy_local_domain_value, adjust_dilation);
  return get_BOOLean_property("CGFontAutohintingPreserveTextStems", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&preserve_text_stems);
}

const void *__should_allow_as_output_space_block_invoke()
{
  const void *result;
  BOOL v1;

  v1 = 0;
  result = get_BOOLean_property("ShouldAllowHDROutputSpaces", (const void *(*)(const char *))copy_local_domain_value, &v1);
  if ((_DWORD)result)
    should_allow_as_output_space_should_allow = v1;
  return result;
}

uint64_t ___Z15CGDefaultsCheckI35CGPDFDocumentPageResourcesCacheSizeENT_10ResultTypeEv_block_invoke()
{
  uint64_t result;

  result = get_integer_property("CGPDFDocumentPageResourcesCacheSize", (const void *(*)(const char *))copy_local_domain_value, &CGDefaultsCheck<CGPDFDocumentPageResourcesCacheSize>(void)::result);
  if ((result & 1) == 0)
    CGDefaultsCheck<CGPDFDocumentPageResourcesCacheSize>(void)::result = 16;
  return result;
}

const void *__useDebugBitmap_block_invoke()
{
  const void *result;
  BOOL v1;

  v1 = 0;
  result = get_BOOLean_property("AUTOUSEBITMAP", (const void *(*)(const char *))copy_local_domain_value, &v1);
  if ((_DWORD)result)
    useDebugBitmap_use_bitmap = v1;
  return result;
}

const void *__log_buffer_check_in_crash_reporter_block_invoke()
{
  const void *result;

  result = get_BOOLean_property("LOG_DATA_PROVIDER_BUFFER_CHECK", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&log_buffer_check_in_crash_reporter_status);
  log_buffer_check_in_crash_reporter_status = (char)result;
  return result;
}

const void *__should_highlight_2x_scaled_images_block_invoke()
{
  const void *result;

  result = get_BOOLean_property("CGContextHighlight2xScaledImages", copy_preference_value, (BOOL *)&should_highlight_2x_scaled_images_highlight_2x_scaled_images);
  if ((result & 1) == 0)
    should_highlight_2x_scaled_images_highlight_2x_scaled_images = 0;
  return result;
}

const void *__should_track_image_drawing_block_invoke()
{
  const void *result;

  result = get_BOOLean_property("CGContextTrackImageDrawing", copy_preference_value, (BOOL *)&should_track_image_drawing_should_track);
  if ((result & 1) == 0)
    should_track_image_drawing_should_track = 0;
  return result;
}

const void *defaults_setup(void *a1)
{
  get_BOOLean_property("CGFontUseLocalCache", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&cache_glyph_bitmaps);
  return get_BOOLean_property("CGFontPrintBitmapStats", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&print_statistics);
}

char *load_library(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *Function;

  Function = CGLibraryLoadFunction(a1, "cg_font_library_link_symbol");
  if (Function && verbose == 1)
  return Function;
}

uint64_t (**cg_font_library_link_symbol())()
{
  _QWORD *v0;

  v0 = malloc_type_calloc(1uLL, 0x38uLL, 0x1080040BF00B4C8uLL);
  *(_DWORD *)v0 = 1;
  v0[1] = 0;
  *((_OWORD *)v0 + 1) = cg_font_library_link_symbol_font_finder_callbacks;
  *((_OWORD *)v0 + 2) = *(_OWORD *)algn_1E162BB38;
  v0[6] = 0;
  font_finder = (uint64_t)v0;
  return xt_vtable;
}

uint64_t copy_string_property(const char *a1, const void *(*a2)(const char *), const __CFString **a3)
{
  uint64_t result;
  const __CFString *v5;
  CFTypeID v6;

  result = (uint64_t)a2(a1);
  if (result)
  {
    v5 = (const __CFString *)result;
    v6 = CFGetTypeID((CFTypeRef)result);
    if (v6 == CFStringGetTypeID())
    {
      if (a3)
        *a3 = v5;
      return 1;
    }
    else
    {
      CFRelease(v5);
      return 0;
    }
  }
  return result;
}

char *CGLibraryLoadFunction(uint64_t a1, char *__s1)
{
  char *result;
  uint64_t v5;
  const char **i;

  result = 0;
  if (a1 && __s1)
  {
    v5 = 0;
    for (i = (const char **)&links; strcmp(__s1, *i); i += 2)
    {
      if (++v5 == 7)
        return 0;
    }
    return (&links)[2 * v5 + 1];
  }
  return result;
}

const void *get_defaults()
{
  const void *result;
  BOOL v1;

  if (!_CFExecutableLinkedOnOrAfter())
    should_enable_lcd_styles = 0;
  v1 = 0;
  if (get_BOOLean_property("CGRIPShouldEnableLCDStyles", (const void *(*)(const char *))copy_local_domain_value, &v1))should_enable_lcd_styles = v1;
  result = get_BOOLean_property("CGRIPShouldUseGlyphBitmaps", (const void *(*)(const char *))copy_local_domain_value, &v1);
  if ((_DWORD)result)
    should_use_glyph_bitmaps = v1;
  return result;
}

void setup()
{
  _QWORD *v0;
  pthread_t v1;
  pthread_attr_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  get_BOOLean_property("CGFontCacheShouldEnable", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&enable_caching);
  get_integer_property("CGFontCacheMaxSize", (const void *(*)(const char *))copy_local_domain_value, &cache_max_size);
  get_BOOLean_property("CGFontCacheShouldReportSize", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&report_cache_size);
  get_integer_property("CGFontCacheReportingFrequency", (const void *(*)(const char *))copy_local_domain_value, &reporting_frequency);
  if (report_cache_size && reporting_frequency >= 1)
  {
    memset(&v2, 0, sizeof(v2));
    v1 = 0;
    v0 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
    *v0 = print_cache_size;
    v0[1] = 0;
    pthread_attr_init(&v2);
    pthread_attr_setscope(&v2, 1);
    pthread_attr_setdetachstate(&v2, 2);
    pthread_create(&v1, &v2, (void *(__cdecl *)(void *))thread_fun, v0);
    pthread_attr_destroy(&v2);
  }
  setup_source = (uint64_t)dispatch_source_create(MEMORY[0x1E0C80DA8], 0, 2uLL, MEMORY[0x1E0C80D38]);
  dispatch_source_set_event_handler((dispatch_source_t)setup_source, &__block_literal_global_10_5896);
  dispatch_resume((dispatch_object_t)setup_source);
}

const void *get_font_rendering_defaults()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  int v19;
  int v20;

  v19 = 0;
  if (!get_integer_property("CGFontAntialiasingStyle", (const void *(*)(const char *))copy_local_domain_value, &v19))goto LABEL_17;
  if (v19 > 127)
  {
    if (v19 <= 383)
    {
      if (v19 == 128)
      {
LABEL_15:
        v7 = &CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_323;
        v8 = 128;
        goto LABEL_16;
      }
      if (v19 == 256)
      {
LABEL_12:
        v7 = &CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_323;
        v8 = 256;
        goto LABEL_16;
      }
    }
    else
    {
      switch(v19)
      {
        case 384:
LABEL_13:
          v7 = &CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_323;
          v8 = 384;
          goto LABEL_16;
        case 1024:
LABEL_14:
          v7 = &CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_323;
          v8 = 1024;
          goto LABEL_16;
        case 1152:
LABEL_9:
          v7 = &CGCMSUtilsCreateLinearizedProfile_cglibrarypredicate_323;
          v8 = 1152;
LABEL_16:
          *((_DWORD *)v7 + 653) = v8;
          goto LABEL_17;
      }
    }
LABEL_32:
    CGPostError((uint64_t)"unrecognized font antialiasing style: %d.", v0, v1, v2, v3, v4, v5, v6, v19);
    goto LABEL_17;
  }
  switch(v19)
  {
    case 0:
      default_antialiasing_style = 0;
      break;
    case 1:
      goto LABEL_15;
    case 2:
      goto LABEL_12;
    case 3:
      goto LABEL_13;
    case 4:
      goto LABEL_9;
    case 5:
      goto LABEL_14;
    default:
      goto LABEL_32;
  }
LABEL_17:
  v20 = 0;
  if (!get_integer_property("CGFontSmoothingStyle", (const void *(*)(const char *))copy_local_domain_value, &v20))goto LABEL_31;
  if (v20 > 31)
  {
    if (v20 > 63)
    {
      if (v20 == 64)
      {
LABEL_29:
        allows_font_smoothing = 1;
        v16 = &w16_cacheColorLock;
        v17 = 64;
        goto LABEL_30;
      }
      if (v20 == 112)
      {
LABEL_27:
        allows_font_smoothing = 1;
        v16 = (_DWORD *)&w16_cacheColorLock;
        v17 = 112;
        goto LABEL_30;
      }
    }
    else
    {
      if (v20 == 32)
      {
LABEL_28:
        allows_font_smoothing = 1;
        v16 = (_DWORD *)&w16_cacheColorLock;
        v17 = 32;
        goto LABEL_30;
      }
      if (v20 == 48)
      {
LABEL_24:
        allows_font_smoothing = 1;
        v16 = (_DWORD *)&w16_cacheColorLock;
        v17 = 48;
LABEL_30:
        v16[32] = v17;
        goto LABEL_31;
      }
    }
LABEL_34:
    CGPostError((uint64_t)"unrecognized font smoothing style: %d.", v9, v10, v11, v12, v13, v14, v15, v20);
    goto LABEL_31;
  }
  switch(v20)
  {
    case 0:
      allows_font_smoothing = 0;
      break;
    case 1:
    case 16:
      allows_font_smoothing = 1;
      v16 = (_DWORD *)&w16_cacheColorLock;
      v17 = 16;
      goto LABEL_30;
    case 2:
      goto LABEL_28;
    case 3:
      goto LABEL_24;
    case 4:
      goto LABEL_29;
    case 5:
      goto LABEL_27;
    default:
      goto LABEL_34;
  }
LABEL_31:
  get_BOOLean_property("CGFontDebugGlyphBitmaps", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&default_glyph_bitmap_debugging);
  return get_BOOLean_property("CGFontDebugGlyphs", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&default_glyph_debugging);
}

uint64_t get_integer_property(const char *a1, const void *(*a2)(const char *), int *a3)
{
  const __CFNumber *v4;
  const __CFNumber *v5;
  CFTypeID v6;
  SInt32 IntValue;
  uint64_t v8;
  SInt32 valuePtr;

  v4 = (const __CFNumber *)a2(a1);
  if (v4)
  {
    v5 = v4;
    v6 = CFGetTypeID(v4);
    if (v6 == CFNumberGetTypeID())
    {
      valuePtr = 0;
      if (CFNumberGetValue(v5, kCFNumberIntType, &valuePtr))
      {
        if (a3)
        {
          IntValue = valuePtr;
LABEL_10:
          *a3 = IntValue;
          goto LABEL_11;
        }
        goto LABEL_11;
      }
    }
    else if (v6 == CFStringGetTypeID())
    {
      if (a3)
      {
        IntValue = CFStringGetIntValue((CFStringRef)v5);
        goto LABEL_10;
      }
LABEL_11:
      v8 = 1;
LABEL_13:
      CFRelease(v5);
      return v8;
    }
    v8 = 0;
    goto LABEL_13;
  }
  return 0;
}

const void *get_BOOLean_property(const char *a1, const void *(*a2)(const char *), BOOL *a3)
{
  const void *result;
  const void *v5;
  uint64_t v6;

  result = a2(a1);
  if (result)
  {
    v5 = result;
    v6 = get_BOOL((uint64_t)result, a3);
    CFRelease(v5);
    return (const void *)v6;
  }
  return result;
}

CFStringRef copy_local_domain_value(const char *a1)
{
  char *v2;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  CFPropertyListRef v8;

  if (copy_local_domain_value(char const*)::once != -1)
    dispatch_once_f(&copy_local_domain_value(char const*)::once, 0, (dispatch_function_t)load_allow_debugging_defaults);
  if (!allow_debugging_defaults)
    return 0;
  v2 = getenv(a1);
  if (v2)
    return CFStringCreateWithCString(0, v2, 0x600u);
  if (!a1)
    return 0;
  v4 = CFStringCreateWithCString(0, a1, 0x600u);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = (const __CFString *)*MEMORY[0x1E0C9B260];
  v7 = (const __CFString *)*MEMORY[0x1E0C9B230];
  v8 = CFPreferencesCopyValue(v4, (CFStringRef)*MEMORY[0x1E0C9B248], (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (!v8)
  {
    v8 = CFPreferencesCopyValue(v5, (CFStringRef)*MEMORY[0x1E0C9B228], v6, v7);
    if (!v8)
      v8 = CFPreferencesCopyValue(v5, CFSTR("com.apple.CoreGraphics"), v6, v7);
  }
  CFRelease(v5);
  return (CFStringRef)v8;
}

CFPropertyListRef copy_preference_value(const char *cStr)
{
  const __CFString *v1;
  const __CFString *v2;
  const __CFString *v3;
  const __CFString *v4;
  CFPropertyListRef v5;
  const __CFString *v6;
  const __CFString *v7;

  if (!cStr)
    return 0;
  v1 = CFStringCreateWithCString(0, cStr, 0x600u);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = (const __CFString *)*MEMORY[0x1E0C9B248];
  v4 = (const __CFString *)*MEMORY[0x1E0C9B230];
  v5 = CFPreferencesCopyValue(v1, (CFStringRef)*MEMORY[0x1E0C9B248], (CFStringRef)*MEMORY[0x1E0C9B240], (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (!v5)
  {
    v6 = (const __CFString *)*MEMORY[0x1E0C9B260];
    v5 = CFPreferencesCopyValue(v2, v3, (CFStringRef)*MEMORY[0x1E0C9B260], v4);
    if (!v5)
    {
      v7 = (const __CFString *)*MEMORY[0x1E0C9B228];
      v5 = CFPreferencesCopyValue(v2, (CFStringRef)*MEMORY[0x1E0C9B228], v6, (CFStringRef)*MEMORY[0x1E0C9B250]);
      if (!v5)
        v5 = CFPreferencesCopyValue(v2, v7, v6, v4);
    }
  }
  CFRelease(v2);
  return v5;
}

uint64_t __converter_initialize_block_invoke_2()
{
  uint64_t result;

  result = __CGTypeRegisterInternal(kCGCMSConverterClass);
  kCGCMSConverterID = result;
  return result;
}

uint64_t __CGTypeRegisterInternal(unsigned int *a1)
{
  char *v2;
  uint64_t v3;
  int8x16_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (char *)malloc_type_malloc(0x60uLL, 0x10D00408820D60FuLL);
  v3 = *a1;
  *(_QWORD *)v2 = v3;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 2);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 6);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 10);
  v4.i64[0] = (uint64_t)copy_description;
  v4.i64[1] = (uint64_t)copy_debug_description_20787;
  *(int8x16_t *)(v2 + 56) = vbslq_s8((int8x16_t)vceqzq_s64(*(int64x2_t *)(a1 + 14)), v4, *(int8x16_t *)(a1 + 14));
  if ((v3 & 4) != 0)
    v5 = *((_QWORD *)a1 + 9);
  else
    v5 = 0;
  *((_QWORD *)v2 + 9) = v5;
  if ((v3 & 8) != 0)
    v6 = *((_QWORD *)a1 + 10);
  else
    v6 = 0;
  *((_QWORD *)v2 + 10) = v6;
  if ((v3 & 0x10) != 0)
    v7 = *((_QWORD *)a1 + 11);
  else
    v7 = 0;
  *((_QWORD *)v2 + 11) = v7;
  return _CFRuntimeRegisterClass();
}

const void *__initialize_deep_mask_block_invoke()
{
  return get_BOOLean_property("FP16_DEEP_MASK_ON", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&initialize_deep_mask_fp16_deep_mask_on);
}

uint64_t CGImageGetIdentifier(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 24);
  return result;
}

const void *__data_provider_debug_info_enabled_block_invoke()
{
  return get_BOOLean_property("CGDataProviderEnableDebugInfo", (const void *(*)(const char *))copy_local_domain_value, (BOOL *)&data_provider_debug_info_enabled_enabled);
}

uint64_t CG::dasher::dash_path_element<CG::LineSegment>(uint64_t this, float64x2_t *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v11;
  double v12;
  double v13;
  double i;
  double v15;

  v2 = a2->f64[1];
  v3 = a2[1].f64[0];
  v4 = a2[1].f64[1];
  v5 = *(double *)(this + 48);
  v6 = *(double *)(this + 56);
  v7 = *(double *)(this + 32);
  v8 = *(double *)(this + 40);
  v9 = sqrt((v4 * v6 + v3 * v8 - (v2 * v6 + a2->f64[0] * v8)) * (v4 * v6 + v3 * v8 - (v2 * v6 + a2->f64[0] * v8))+ (v4 * v5 + v3 * v7 - (v2 * v5 + a2->f64[0] * v7)) * (v4 * v5 + v3 * v7 - (v2 * v5 + a2->f64[0] * v7)));
  if (v9 != 0.0)
  {
    v11 = this;
    v12 = *(double *)(this + 120);
    if (v9 <= v12)
    {
      if (*(_BYTE *)(this + 104))
      {
        this = CG::dasher::add_path_dash_segment<CG::LineSegment>(this, a2, 0.0, v9);
        *(_BYTE *)(v11 + 144) = 0;
        v12 = *(double *)(v11 + 120);
      }
      v15 = v12 - v9;
      goto LABEL_15;
    }
    v13 = 0.0;
    for (i = v12 + 0.0; i < v9; i = v13 + v12)
    {
      if (*(_BYTE *)(v11 + 104))
      {
        CG::dasher::add_path_dash_segment<CG::LineSegment>(v11, a2, v13, i);
        v12 = *(double *)(v11 + 120);
      }
      v13 = v13 + v12;
      this = CG::dasher::advance_dash_index(v11);
      v12 = *(double *)(v11 + 120);
    }
    if (v13 < v9)
    {
      if (*(_BYTE *)(v11 + 104))
      {
        this = CG::dasher::add_path_dash_segment<CG::LineSegment>(v11, a2, v13, v9);
        *(_BYTE *)(v11 + 144) = 0;
        v12 = *(double *)(v11 + 120);
      }
      v15 = v12 - (v9 - v13);
LABEL_15:
      *(double *)(v11 + 120) = v15;
    }
  }
  return this;
}

uint64_t CG::dasher::add_path_dash_segment<CG::LineSegment>(uint64_t result, float64x2_t *a2, double a3, double a4)
{
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  BOOL v17;
  float64x2_t v18;
  float64x2_t v19;
  uint64_t v20;
  float64x2_t v21;
  double v22;
  float64x2_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;

  v6 = (double *)result;
  v7 = 0.0;
  if (a3 > 0.0)
  {
    v8 = a2[1].f64[0];
    v9 = a2[1].f64[1];
    v11 = *(double *)(result + 48);
    v10 = *(double *)(result + 56);
    v13 = *(double *)(result + 32);
    v12 = *(double *)(result + 40);
    v14 = a2->f64[1];
    v15 = sqrt((v9 * v10 + v8 * v12 - (v14 * v10 + a2->f64[0] * v12))* (v9 * v10 + v8 * v12 - (v14 * v10 + a2->f64[0] * v12))+ (v9 * v11 + v8 * v13 - (v14 * v11 + a2->f64[0] * v13))* (v9 * v11 + v8 * v13 - (v14 * v11 + a2->f64[0] * v13)));
    v16 = a3 / v15;
    v17 = v15 > a3;
    v7 = 1.0;
    if (v17)
      v7 = v16;
  }
  v18 = a2[1];
  v19 = vaddq_f64(*a2, vmulq_n_f64(vsubq_f64(v18, *a2), v7));
  if (*(_BYTE *)(result + 144))
  {
    v20 = *(_QWORD *)result;
    v37 = v19;
    if (v20)
    {
      v35 = v18;
      v36 = v19;
      result = (*(uint64_t (**)(_QWORD, _QWORD, float64x2_t *, _QWORD))(v20 + 24))(*(_QWORD *)(v20 + 8), 0, &v37, *(_QWORD *)(v20 + 48));
      v18 = v35;
      v19 = v36;
    }
  }
  if (a3 == a4)
  {
    v21 = vsubq_f64(v18, v19);
    if (v21.f64[0] != 0.0 || v21.f64[1] != 0.0)
      v21 = vdivq_f64(v21, (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt(v21.f64[1] * v21.f64[1] + v21.f64[0] * v21.f64[0])), 0));
    v22 = *v6;
    v23 = vaddq_f64(v19, vmulq_f64(v21, (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL)));
  }
  else
  {
    v24 = a4 - a3;
    v25 = 0.0;
    if (a4 - a3 > 0.0)
    {
      v27 = v6[6];
      v26 = v6[7];
      v29 = v6[4];
      v28 = v6[5];
      v30 = vmlad_n_f64(vmuld_lane_f64(v26, v18, 1), v28, v18.f64[0]);
      v31 = vmlad_n_f64(vmuld_lane_f64(v27, v18, 1), v29, v18.f64[0]);
      v32 = vmlad_n_f64(vmuld_lane_f64(v26, v19, 1), v28, v19.f64[0]);
      v33 = vmlad_n_f64(vmuld_lane_f64(v27, v19, 1), v29, v19.f64[0]);
      v34 = sqrt((v30 - v32) * (v30 - v32) + (v31 - v33) * (v31 - v33));
      if (v34 <= v24)
        v25 = 1.0;
      else
        v25 = v24 / v34;
    }
    v23 = vaddq_f64(v19, vmulq_n_f64(vsubq_f64(v18, v19), v25));
    v22 = *v6;
  }
  v37 = v23;
  if (v22 != 0.0)
    return (*(uint64_t (**)(_QWORD, uint64_t, float64x2_t *, _QWORD))(*(_QWORD *)&v22 + 24))(*(_QWORD *)(*(_QWORD *)&v22 + 8), 1, &v37, *(_QWORD *)(*(_QWORD *)&v22 + 48));
  return result;
}

CGColorSpaceRef CGBitmapContextGetColorSpace(CGContextRef context)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (context && *((_DWORD *)context + 4) == 1129601108 && *((_DWORD *)context + 6) == 4)
    return *(CGColorSpaceRef *)(*((_QWORD *)context + 4) + 32);
  handle_invalid_context((char)"CGBitmapContextGetColorSpace", (uint64_t)context, v1, v2, v3, v4, v5, v6);
  return 0;
}

const UInt8 *CGGradientApply(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, const UInt8 *, double))
{
  uint64_t v6;
  uint64_t v7;
  const UInt8 *result;
  unint64_t v9;
  const UInt8 *v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a1 + 24);
  if (v6)
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 40) + 2;
  else
    v7 = 2;
  result = CFDataGetBytePtr(*(CFDataRef *)(a1 + 40));
  if (*(_QWORD *)(a1 + 48))
  {
    v9 = 0;
    v10 = result + 8;
    v11 = 8 * v7;
    do
    {
      result = (const UInt8 *)a3(a2, v10, *((double *)v10 - 1));
      ++v9;
      v10 += v11;
    }
    while (v9 < *(_QWORD *)(a1 + 48));
  }
  return result;
}

uint64_t CGContextGetShouldDrawBitmapRuns(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
    return (**(unsigned __int16 **)(*(_QWORD *)(a1 + 96) + 136) >> 7) & 1;
  handle_invalid_context((char)"CGContextGetShouldDrawBitmapRuns", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

unint64_t CGPathGetNumberOfPoints(char *cf, int32x2_t a2)
{
  CFTypeID v3;

  if (cf && (CGPathDisableTypeValidation || (v3 = CFGetTypeID(cf), v3 == CGPathGetTypeID())))
    return CG::Path::point_count((CG::Path *)(cf + 16), a2);
  else
    return 0;
}

uint64_t CGImageProviderGetBitmapInfo(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 36);
  return result;
}

uint64_t CGImageBlockSetGetColorSpace(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 80);
  return result;
}

void CGGStateSetLineDash(uint64_t a1, unsigned int *a2)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  if (!CGDashEqualToDash(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 32), (uint64_t)a2))
  {
    maybe_copy_stroke_state(a1);
    v4 = *(unsigned int **)(*(_QWORD *)(a1 + 128) + 32);
    if (v4)
    {
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stxr(v6, v4));
      if (!v6)
        free(v4);
    }
    if (a2)
    {
      do
        v7 = __ldxr(a2);
      while (__stxr(v7 + 1, a2));
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 128) + 32) = a2;
  }
}

BOOL CGDashEqualToDash(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a1 == a2)
    return 1;
  v2 = 0;
  if (a1 && a2)
  {
    if (*(double *)(a1 + 8) == *(double *)(a2 + 8) && (v3 = *(_QWORD *)(a1 + 16), v3 == *(_QWORD *)(a2 + 16)))
      return memcmp((const void *)(a1 + 24), (const void *)(a2 + 24), 8 * v3) == 0;
    else
      return 0;
  }
  return v2;
}

_BYTE *CGFontIsFixedPitch(_QWORD *a1)
{
  _BYTE *result;

  result = get_font_info(a1);
  if (result)
    return (_BYTE *)(result[48] != 0);
  return result;
}

void CGFontDBAddFontsFromPlist(CFMutableArrayRef *a1, CFDictionaryRef theDict)
{
  const void *Value;
  const void *v5;
  CFTypeID v6;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  CFTypeID v9;
  const void *v10;
  const void *v11;
  CFTypeID v12;
  const void *v13;
  const void *v14;
  CFTypeID v15;

  if (a1)
  {
    if (theDict)
    {
      Value = CFDictionaryGetValue(theDict, CFSTR("Names"));
      if (Value)
      {
        v5 = Value;
        v6 = CFGetTypeID(Value);
        if (v6 == CFDictionaryGetTypeID())
        {
          CFArrayInsertValueAtIndex(*a1, 1, v5);
          v7 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("Aliases"));
          if (v7)
          {
            v8 = v7;
            v9 = CFGetTypeID(v7);
            if (v9 == CFDictionaryGetTypeID())
            {
              v10 = CFDictionaryGetValue(v8, CFSTR("Faces"));
              if (v10)
              {
                v11 = v10;
                v12 = CFGetTypeID(v10);
                if (v12 == CFDictionaryGetTypeID())
                  CFArrayInsertValueAtIndex(a1[2], 0, v11);
              }
              v13 = CFDictionaryGetValue(v8, CFSTR("Families"));
              if (v13)
              {
                v14 = v13;
                v15 = CFGetTypeID(v13);
                if (v15 == CFDictionaryGetTypeID())
                  CFArrayInsertValueAtIndex(a1[3], 0, v14);
              }
            }
          }
        }
      }
    }
  }
}

__n128 CGPatternGetMatrix@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

_QWORD *_ripdata_finalize(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  _QWORD *v10;

  if (RIPGetCacheState_predicate != -1)
    dispatch_once(&RIPGetCacheState_predicate, &__block_literal_global_9_12336);
  v2 = RIPGetCacheState_cache_state;
  RIPLockCacheState();
  v3 = (_QWORD *)(a1 + 16);
  v4 = *(_QWORD **)(a1 + 24);
  if (v4 != (_QWORD *)(a1 + 16))
  {
    v5 = *(_QWORD *)(v2 + 16);
    do
    {
      v7 = v4[2];
      v8 = (_QWORD *)v4[3];
      v6 = v4 + 2;
      *(_QWORD *)(v7 + 8) = v8;
      *v8 = v7;
      *v6 = v6;
      v6[1] = v6;
      --*(_QWORD *)(v6[3] + 16);
      --v5;
      v4 = (_QWORD *)*(v6 - 1);
    }
    while (v4 != v3);
    *(_QWORD *)(v2 + 16) = v5;
  }
  RIPUnlockCacheState();
  result = *(_QWORD **)(a1 + 24);
  if (result != v3)
  {
    do
    {
      v10 = (_QWORD *)result[1];
      RIPCacheEntryRelease(result);
      result = v10;
    }
    while (v10 != v3);
  }
  return result;
}

void RIPCacheEntryRelease(void *a1)
{
  int v2;
  uint64_t v3;

  v2 = *((_DWORD *)a1 + 12);
  if (v2 == 2 || v2 == 1)
  {
    v3 = *((_QWORD *)a1 + 20);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  }
  else if (!v2)
  {
    free(*((void **)a1 + 16));
    free(*((void **)a1 + 17));
  }
  free(a1);
}

uint64_t CGImageGetCachingFlags(uint64_t result)
{
  if (result)
    return *(unsigned __int8 *)(result + 36);
  return result;
}

double CGPatternGetBounds(uint64_t a1)
{
  return *(double *)(a1 + 104);
}

void CGPDFSourceFinalize(uint64_t a1)
{
  void (*v2)(_QWORD);
  const void *v3;
  void *v4;

  if (*(_BYTE *)(a1 + 209))
  {
    v2 = *(void (**)(_QWORD))(a1 + 64);
    if (v2)
      v2(*(_QWORD *)(a1 + 80));
  }
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
  v4 = *(void **)(a1 + 144);
  if (v4)
  {
    if (*(_BYTE *)(a1 + 152))
      free(v4);
    *(_QWORD *)(a1 + 144) = 0;
  }
  free(*(void **)(a1 + 88));
}

void fstream_release(z_streamp strm)
{
  const void *v2;
  uint64_t avail_in;
  uint64_t v4;

  if (strm)
  {
    if (strm->state)
      inflateEnd(strm);
    v2 = *(const void **)&strm[1].avail_in;
    if (v2)
    {
      avail_in = strm->avail_in;
      if (!(_DWORD)avail_in)
        goto LABEL_9;
      v4 = avail_in - 1;
      do
        CGPDFSourceUngetc(*(_QWORD **)&strm[1].avail_in, strm->next_in[v4--]);
      while (v4 != -1);
      v2 = *(const void **)&strm[1].avail_in;
      if (v2)
LABEL_9:
        CFRelease(v2);
    }
    free((void *)strm[1].total_in);
    free(strm);
  }
}

double *CGFontAutohintTransformCreate(uint64_t a1, double *a2, int a3, double a4)
{
  double *v8;
  int v9;
  int v10;
  double v11;
  int v12;
  double y;
  double height;
  CGFloat x;
  double v16;
  double v17;
  CGFloat width;
  double v19;
  CGFloat v20;
  double v21;
  double v22;
  CGFloat v23;
  double v24;
  unsigned int v25;
  _DWORD *font_info;
  int v28;
  double v29;
  double v30;
  double v31;
  int v32;
  int v33;
  double v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  CGRect bboxes;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _OWORD v55[5];
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  _OWORD v59[5];
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _OWORD v63[5];
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  _OWORD v67[5];
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  CGGlyph glyphs[2];
  CGRect FontBBox;
  CGRect v73;

  if (CGFontAutohintTransformCreate_once[0] != -1)
    dispatch_once_f(CGFontAutohintTransformCreate_once, 0, (dispatch_function_t)defaults_setup);
  v8 = 0;
  if (a1 && autohinting_enabled)
  {
    v9 = *(_DWORD *)(a1 + 104);
    if (v9 < 0)
    {
      v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 16) + 136))(*(_QWORD *)(a1 + 112));
      *(_DWORD *)(a1 + 104) = v10;
      if (!v10)
        return 0;
    }
    else if (!v9)
    {
      return 0;
    }
    v11 = *a2;
    if (*a2 > 0.0 && v11 == a2[3] && a2[1] == 0.0 && a2[2] == 0.0)
    {
      v12 = v11 == (double)(int)v11 ? (int)v11 : 0;
      if ((v12 - 19) >= 0xFFFFFFF4)
      {
        v8 = (double *)malloc_type_malloc(0x78uLL, 0x1000040BC1FB88EuLL);
        *(_DWORD *)v8 = 1;
        *((_BYTE *)v8 + 5) = a3;
        v8[2] = a4;
        FontBBox = CGFontGetFontBBox((CGFontRef)a1);
        y = FontBBox.origin.y;
        if (FontBBox.origin.x != INFINITY && FontBBox.origin.y != INFINITY)
        {
          height = FontBBox.size.height;
          if (FontBBox.size.width < 0.0 || FontBBox.size.height < 0.0)
          {
            v73 = CGRectStandardize(FontBBox);
            y = v73.origin.y;
            height = v73.size.height;
          }
          *(_DWORD *)glyphs = 0;
          memset(&bboxes, 0, sizeof(bboxes));
          (*(void (**)(_QWORD, CGGlyph *, CGGlyph *))(*(_QWORD *)(a1 + 16) + 272))(*(_QWORD *)(a1 + 112), &glyphs[1], glyphs);
          if ((__int16)glyphs[1] != -1
            && glyphs[0] != 0xFFFF
            && CGFontGetGlyphBBoxes((CGFontRef)a1, glyphs, 1uLL, &bboxes))
          {
            x = bboxes.origin.x;
            v16 = 0.0;
            if (bboxes.origin.x != INFINITY)
            {
              v17 = bboxes.origin.y;
              if (bboxes.origin.y != INFINITY)
              {
                width = bboxes.size.width;
                if (bboxes.size.width != 0.0)
                {
                  v19 = bboxes.size.height;
                  if (bboxes.size.height != 0.0)
                  {
                    if (bboxes.size.width < 0.0 || bboxes.size.height < 0.0)
                      *(CGRect *)(&v17 - 1) = CGRectStandardize(*(CGRect *)&x);
                    v16 = v17 + v19;
                  }
                }
              }
            }
            if (CGFontGetGlyphBBoxes((CGFontRef)a1, &glyphs[1], 1uLL, &bboxes))
            {
              v20 = bboxes.origin.x;
              v21 = 0.0;
              if (bboxes.origin.x != INFINITY)
              {
                v22 = bboxes.origin.y;
                if (bboxes.origin.y != INFINITY)
                {
                  v23 = bboxes.size.width;
                  if (bboxes.size.width != 0.0)
                  {
                    v24 = bboxes.size.height;
                    if (bboxes.size.height != 0.0)
                    {
                      if (bboxes.size.width < 0.0 || bboxes.size.height < 0.0)
                        *(CGRect *)(&v22 - 1) = CGRectStandardize(*(CGRect *)&v20);
                      v21 = v22 + v24;
                    }
                  }
                }
              }
              if (v16 != v21)
              {
                font_info = get_font_info((_QWORD *)a1);
                if (font_info)
                {
                  v28 = font_info[2];
                  if (v28)
                  {
                    v47 = v12;
                    v29 = (double)v12 * 0.015125;
                    if (v29 > 0.3)
                      v29 = 0.3;
                    v30 = (double)v12 / (float)v28;
                    if (a3)
                      v31 = v29;
                    else
                      v31 = 0.0;
                    v32 = (int)(v31 + v31 + v16 * v30 + 0.5);
                    v33 = (int)(v31 + v31 + v21 * v30 + 0.5);
                    v54 = 0;
                    v52 = 0u;
                    v53 = 0u;
                    v50 = 0u;
                    v51 = 0u;
                    v49 = 0u;
                    memset(&bboxes, 0, sizeof(bboxes));
                    if (!CGFontGetDescriptor((_QWORD *)a1, (uint64_t)&bboxes))
                    {
                      v54 = 0;
                      v52 = 0u;
                      v53 = 0u;
                      v50 = 0u;
                      v51 = 0u;
                      v49 = 0u;
                      memset(&bboxes, 0, sizeof(bboxes));
                    }
                    v34 = y + height;
                    if ((int)(v16 * v30 + 0.5) != v32)
                    {
                      v35 = *((_OWORD *)v8 + 5);
                      v67[4] = *((_OWORD *)v8 + 4);
                      v68 = v35;
                      v69 = *((_OWORD *)v8 + 6);
                      v70 = *((_QWORD *)v8 + 14);
                      v36 = *((_OWORD *)v8 + 1);
                      v67[0] = *(_OWORD *)v8;
                      v67[1] = v36;
                      v37 = *((_OWORD *)v8 + 3);
                      v67[2] = *((_OWORD *)v8 + 2);
                      v67[3] = v37;
                      evaluate_autohint_transform((uint64_t)v67, v32, (int)(v31 + v31 + v21 * v30 + 0.5), *((double *)&v51 + 1), v31, v16, v21, v30, v34);
                      v38 = *((_OWORD *)v8 + 5);
                      v63[4] = *((_OWORD *)v8 + 4);
                      v64 = v38;
                      v65 = *((_OWORD *)v8 + 6);
                      v66 = *((_QWORD *)v8 + 14);
                      v39 = *((_OWORD *)v8 + 1);
                      v63[0] = *(_OWORD *)v8;
                      v63[1] = v39;
                      v40 = *((_OWORD *)v8 + 3);
                      v63[2] = *((_OWORD *)v8 + 2);
                      v63[3] = v40;
                      evaluate_autohint_transform((uint64_t)v63, v32, (int)(v31 + v31 + v21 * v30 + 0.5), *((double *)&v51 + 1), 0.0, v16, v21, v30, v34);
                      v41 = *((_OWORD *)v8 + 5);
                      v59[4] = *((_OWORD *)v8 + 4);
                      v60 = v41;
                      v61 = *((_OWORD *)v8 + 6);
                      v62 = *((_QWORD *)v8 + 14);
                      v42 = *((_OWORD *)v8 + 1);
                      v59[0] = *(_OWORD *)v8;
                      v59[1] = v42;
                      v43 = *((_OWORD *)v8 + 3);
                      v59[2] = *((_OWORD *)v8 + 2);
                      v59[3] = v43;
                      evaluate_autohint_transform((uint64_t)v59, (int)(v16 * v30 + 0.5), (int)(v21 * v30 + 0.5), *((double *)&v51 + 1), v31, v16, v21, v30, v34);
                      v44 = *((_OWORD *)v8 + 5);
                      v55[4] = *((_OWORD *)v8 + 4);
                      v56 = v44;
                      v57 = *((_OWORD *)v8 + 6);
                      v58 = *((_QWORD *)v8 + 14);
                      v45 = *((_OWORD *)v8 + 1);
                      v55[0] = *(_OWORD *)v8;
                      v55[1] = v45;
                      v46 = *((_OWORD *)v8 + 3);
                      v55[2] = *((_OWORD *)v8 + 2);
                      v55[3] = v46;
                      evaluate_autohint_transform((uint64_t)v55, (int)(v16 * v30 + 0.5), (int)(v21 * v30 + 0.5), *((double *)&v51 + 1), 0.0, v16, v21, v30, v34);
                      if (fabs(*((double *)&v68 + 1) + -1.0)
                         + fabs(*(double *)&v69 + -1.0)
                         + fabs(*((double *)&v64 + 1) + -1.0)
                         + fabs(*(double *)&v65 + -1.0) > fabs(*((double *)&v60 + 1) + -1.0)
                                                        + fabs(*(double *)&v61 + -1.0)
                                                        + fabs(*((double *)&v56 + 1) + -1.0)
                                                        + fabs(*(double *)&v57 + -1.0))
                      {
                        v32 = (int)(v16 * v30 + 0.5);
                        v33 = (int)(v21 * v30 + 0.5);
                      }
                    }
                    evaluate_autohint_transform((uint64_t)v8, v32, v33, *((double *)&v51 + 1), a4, v16, v21, v30, v34);
                    if (v16 / v21 <= 0.85 || v8[12] >= 0.33)
                    {
                      *((_BYTE *)v8 + 4) = 1;
                      *((_DWORD *)v8 + 2) = v47;
                      return v8;
                    }
                  }
                }
              }
            }
          }
        }
        *((_BYTE *)v8 + 4) = 0;
        do
          v25 = __ldxr((unsigned int *)v8);
        while (__stxr(v25 - 1, (unsigned int *)v8));
        if (v25 == 1)
          free(v8);
      }
    }
    return 0;
  }
  return v8;
}

BOOL CGFontGetGlyphBBoxes(CGFontRef font, const CGGlyph *glyphs, size_t count, CGRect *bboxes)
{
  CGFontRef v7;
  _BYTE *font_info;
  _BOOL8 v9;

  if (font)
  {
    v7 = font;
    font_info = get_font_info(font);
    if (font_info)
      v9 = font_info[104] == 0;
    else
      v9 = 1;
    LOBYTE(font) = (*(uint64_t (**)(_QWORD, _QWORD, _BOOL8, const CGGlyph *, size_t, CGRect *))(*((_QWORD *)v7 + 2) + 312))(*((_QWORD *)v7 + 14), 0, v9, glyphs, count, bboxes);
  }
  return (char)font;
}

uint64_t get_glyph_bboxes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CGRect v17;
  CGRect v18;

  result = 0;
  if (a1 && a6)
  {
    v9 = a5;
    v10 = a4;
    if (a4 || !a5)
    {
      if (a5)
      {
        if ((a3 & 1) != 0)
        {
          if (a2)
            FPFontGetUnitsPerEm();
          v16 = a6 + 16;
          do
          {
            v10 += 2;
            FPFontGetGlyphIdealBounds();
            v18 = CGRectApplyAffineTransform(v17, (CGAffineTransform *)&CGAffineTransformIdentity);
            *(CGRect *)(v16 - 16) = CGRectIntegral(v18);
            v16 += 32;
            --v9;
          }
          while (v9);
        }
        else
        {
          v11 = (_QWORD *)(a6 + 16);
          do
          {
            v10 += 2;
            FPFontGetGlyphDeviceBounds();
            *(v11 - 2) = v12;
            *(v11 - 1) = v13;
            *v11 = v14;
            v11[1] = v15;
            v11 += 4;
            --v9;
          }
          while (v9);
        }
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t get_glyphs_X_o()
{
  return FPFontGetGlyphsXo();
}

uint64_t evaluate_autohint_transform(uint64_t result, int a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  _QWORD *v21;
  char v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;

  if (!preserve_text_stems)
  {
    *(double *)(result + 24) = -a5;
    v23 = a5 + a6 * a8;
    v24 = a5 + a7 * a8;
    v25 = (float)a2 - a5;
    *(double *)(result + 40) = v23;
    *(double *)(result + 48) = v25;
    v26 = (float)a3 - a5;
    *(double *)(result + 72) = v24;
    *(double *)(result + 80) = v26;
    v27 = 0.0;
    v28 = 0.0;
    if (v23 != -a5)
      v28 = (v25 + a5) / (v23 + a5);
    v29 = a5 + a9 * a8;
    *(double *)(result + 88) = v28;
    if (v24 != v23)
      v27 = (v26 - v25) / (v24 - v23);
    *(double *)(result + 96) = v27;
    v30 = 0.0;
    if (v29 != v24)
      v30 = (v29 - v26) / (v29 - v24);
    *(double *)(result + 104) = v30;
    v21 = (_QWORD *)(result + 104);
    if (v27 >= 0.75 && v27 - v28 <= 0.3)
    {
      v22 = 0;
      goto LABEL_37;
    }
    *(double *)(result + 80) = v24;
    v34 = 0.0;
    v35 = 0.0;
    if (v23 != -a5)
      v35 = (v25 + a5) / (v23 + a5);
    *(double *)(result + 88) = v35;
    if (v24 != v23)
      v34 = (v24 - v25) / (v24 - v23);
    v22 = 0;
    *(double *)(result + 96) = v34;
LABEL_36:
    *v21 = 0x3FF0000000000000;
    goto LABEL_37;
  }
  if (a4 == 0.0)
    a4 = a7;
  if (a4 > a6 * 0.333)
    a4 = a6 * 0.333;
  if (a4 > (a7 - a6) * 0.5)
    a4 = (a7 - a6) * 0.5;
  v9 = a4 * a8;
  v10 = a4 * a8 + a5;
  *(double *)(result + 24) = -a5;
  *(double *)(result + 32) = v10;
  v11 = a5 + a6 * a8;
  v12 = -(v9 - a7 * a8) - a5;
  v13 = a5 + a7 * a8;
  v14 = (float)a2 - a5;
  *(double *)(result + 40) = v11;
  *(double *)(result + 48) = v14;
  v15 = (float)a3 - a5;
  *(double *)(result + 72) = v13;
  *(double *)(result + 80) = v15;
  v16 = v15 - v9 + a5 * -2.0;
  *(double *)(result + 56) = v12;
  *(double *)(result + 64) = v16;
  v17 = 0.0;
  v18 = 0.0;
  if (v11 != v9 + a5)
    v18 = (v14 - v10) / (v11 - v10);
  v19 = a5 + a9 * a8;
  *(double *)(result + 88) = v18;
  if (v12 != v11)
    v17 = (v16 - v14) / (v12 - v11);
  *(double *)(result + 96) = v17;
  v20 = 0.0;
  if (v19 != v13)
    v20 = (v19 - v15) / (v19 - v13);
  *(double *)(result + 104) = v20;
  v21 = (_QWORD *)(result + 104);
  if (v17 < 0.75 || v17 - v18 > 0.3)
  {
    *(double *)(result + 80) = v13;
    v31 = v13 - v9 + a5 * -2.0;
    *(double *)(result + 64) = v31;
    v32 = 0.0;
    v33 = 0.0;
    if (v11 != v10)
      v33 = (v14 - v10) / (v11 - v10);
    *(double *)(result + 88) = v33;
    if (v12 != v11)
      v32 = (v31 - v14) / (v12 - v11);
    *(double *)(result + 96) = v32;
    v22 = 1;
    goto LABEL_36;
  }
  v22 = 1;
LABEL_37:
  *(_BYTE *)(result + 112) = v22;
  return result;
}

BOOL CGFontGetDescriptor(_QWORD *a1, uint64_t a2)
{
  char *font_info;
  char *v5;
  uint64_t v6;
  int64x2_t v7;
  double v8;
  int v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64_t v13;
  float64_t v14;
  float64x2_t v15;
  uint64_t v17;
  float64x2_t v18;
  float64x2_t v19;

  font_info = (char *)get_font_info(a1);
  v5 = font_info;
  if (font_info)
  {
    v6 = *(_QWORD *)(font_info + 12);
    v7.i64[0] = (int)v6;
    v7.i64[1] = SHIDWORD(v6);
    v19 = (float64x2_t)vdupq_n_s64(0x408F400000000000uLL);
    *(double *)&v17 = (double)*((int *)font_info + 2);
    v18 = (float64x2_t)vdupq_lane_s64(v17, 0);
    v8 = (double)*((int *)font_info + 6);
    *(float64x2_t *)(a2 + 32) = vrndaq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_s64(v7), v19), v18));
    *(double *)(a2 + 48) = round(v8 * 1000.0 / *(double *)&v17);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(a1[2] + 128))(a1[14], a2 + 64, a2 + 72);
    v9 = *((_DWORD *)v5 + 8);
    v10.f64[0] = *(float64_t *)(a2 + 72);
    v10.f64[1] = (double)*((int *)v5 + 9);
    *(float64x2_t *)(a2 + 72) = vrndaq_f64(vdivq_f64(vmulq_f64(v10, v19), v18));
    *(double *)(a2 + 88) = round((double)v9 * 1000.0 / *(double *)&v17);
    *(_QWORD *)(a2 + 96) = 0;
    v7.i64[0] = *((int *)v5 + 5);
    v7.i64[1] = *((int *)v5 + 7);
    *(float64x2_t *)(a2 + 104) = vrndaq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_s64(v7), v19), v18));
    v11.f64[0] = *((float64_t *)v5 + 7);
    v11.f64[1] = *(float64_t *)(a2 + 64);
    *(float64x2_t *)(a2 + 56) = vrndaq_f64(vdivq_f64(vmulq_f64(v11, v19), v18));
    v12.f64[0] = (*(double (**)(_QWORD))(a1[2] + 112))(a1[14]);
    v12.f64[1] = v13;
    v15.f64[1] = v14;
    *(float64x2_t *)a2 = vrndaq_f64(vdivq_f64(vmulq_f64(v12, v19), v18));
    *(float64x2_t *)(a2 + 16) = vrndaq_f64(vdivq_f64(vmulq_f64(v15, v19), v18));
  }
  return v5 != 0;
}

double get_stems(uint64_t a1, double *a2, double *a3)
{
  double result;

  *a2 = (double)(int)FPFontGetStemV();
  result = (double)(int)FPFontGetStemH();
  *a3 = result;
  return result;
}

BOOL CGPathIsRegion(_BOOL8 cf, _QWORD *a2)
{
  uint64_t v3;
  CFTypeID v4;
  int v5;

  if (cf)
  {
    v3 = cf;
    if (CGPathDisableTypeValidation || (v4 = CFGetTypeID((CFTypeRef)cf), v4 == CGPathGetTypeID()))
    {
      v5 = *(_DWORD *)(v3 + 16);
      cf = v5 == 7;
      if (a2)
      {
        if (v5 == 7)
        {
          *a2 = *(_QWORD *)(v3 + 24);
          return 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return cf;
}

void converter_initialize()
{
  if (kCGCMSConverterID_block_invoke_once != -1)
    dispatch_once(&kCGCMSConverterID_block_invoke_once, &__block_literal_global_8_1929);
}

uint64_t CGContextGetShouldAntialias(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
    return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 120) + 7) & 1;
  handle_invalid_context((char)"CGContextGetShouldAntialias", a1, a3, a4, a5, a6, a7, a8);
  return 1;
}

uint64_t CGStyleGetData(uint64_t a1)
{
  if (a1)
    return a1 + 32;
  else
    return 0;
}

uint64_t *__color_space_state_create_sRGB_block_invoke_2()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncSRGBProfile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  color_space_state_create_sRGB_s = v1;
  return result;
}

void CGPathAddArcToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x1, CGFloat y1, CGFloat x2, CGFloat y2, CGFloat radius)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CGMutablePathRef v19;
  CGPath *v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const CGAffineTransform *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  CG::Path *v59;
  int v60;
  CGPoint v61;
  CGPoint v62;

  if (path)
  {
    v19 = path;
    if (CGPathDisableTypeValidation
      || (v20 = (CGPath *)CFGetTypeID(path), path = (CGMutablePathRef)CGPathGetTypeID(), v20 == path))
    {
      v21 = CGFloatValidateWithLog(x1, (uint64_t)path, (uint64_t)m, v7, v8, v9, v10, v11, v12);
      if (v21)
      {
        v29 = CGFloatValidateWithLog(y1, v21, v22, v23, v24, v25, v26, v27, v28);
        if (v29)
        {
          v37 = CGFloatValidateWithLog(x2, v29, v30, v31, v32, v33, v34, v35, v36);
          if (v37
            && CGFloatValidateWithLog(y2, v37, v38, v39, v40, v41, v42, v43, v44)
          {
            v60 = *((_DWORD *)v19 + 4);
            v59 = (CGMutablePathRef)((char *)v19 + 16);
            if ((v60 - 10) > 0xFFFFFFF6)
            {
              v62.x = x1;
              v62.y = y1;
              v61.x = x2;
              v61.y = y2;
              CG::Path::add_arc_to_point(v59, &v62, &v61, radius, (CGAffineTransform *)m, v55, v56, v57, v58);
            }
            else
            {
              CGPostError((uint64_t)"%s: no current point.", v52, v53, v54, v55, v56, v57, v58, (char)"CGPathAddArcToPoint");
            }
          }
        }
      }
    }
  }
}

void soft_mask_finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  void (*v5)(_QWORD);

  v2 = (const void *)a1[19];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[13];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[14];
  if (v4)
    CFRelease(v4);
  v5 = (void (*)(_QWORD))a1[18];
  if (v5)
    v5(a1[15]);
}

CGFloat CGFontGetItalicAngle(CGFontRef font)
{
  double *font_info;

  font_info = (double *)get_font_info(font);
  if (font_info)
    return font_info[7];
  else
    return 0.0;
}

char *CGPathIsRoundedRectWithTransform(char *cf, CGRect *a2, float64_t *a3, float64_t *a4, CGAffineTransform *a5)
{
  char *v9;
  CFTypeID v10;
  float64x2_t v11;

  if (cf)
  {
    v9 = cf;
    if (CGPathDisableTypeValidation || (v10 = CFGetTypeID(cf), v10 == CGPathGetTypeID()))
    {
      cf = (char *)CG::Path::is_rounded_rect((CG::Path *)(v9 + 16), a2, &v11, a5);
      if ((_DWORD)cf)
      {
        if (a3)
          *a3 = v11.f64[0];
        if (a4)
          *a4 = v11.f64[1];
      }
    }
    else
    {
      return 0;
    }
  }
  return cf;
}

char *CGPathIsRoundedRect(char *cf, CGRect *a2, float64_t *a3, float64_t *a4)
{
  char *v7;
  CFTypeID v8;
  float64x2_t v9;

  if (cf)
  {
    v7 = cf;
    if (CGPathDisableTypeValidation || (v8 = CFGetTypeID(cf), v8 == CGPathGetTypeID()))
    {
      cf = (char *)CG::Path::is_rounded_rect((CG::Path *)(v7 + 16), a2, &v9, 0);
      if ((_DWORD)cf)
      {
        if (a3)
          *a3 = v9.f64[0];
        if (a4)
          *a4 = v9.f64[1];
      }
    }
    else
    {
      return 0;
    }
  }
  return cf;
}

uint64_t CG::Path::is_rounded_rect(CG::Path *this, CGRect *a2, float64x2_t *a3, CGAffineTransform *a4)
{
  __int128 v7;
  __int128 v8;
  _OWORD *v9;
  __int128 v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGAffineTransform v15;

  if (*(_DWORD *)this == 2)
  {
    if (a4)
    {
      if (a2)
        *a2 = unit_rect;
      if (a3)
        *a3 = *(float64x2_t *)((char *)this + 56);
      v7 = *(_OWORD *)((char *)this + 8);
      v8 = *(_OWORD *)((char *)this + 40);
      *(_OWORD *)&a4->c = *(_OWORD *)((char *)this + 24);
      *(_OWORD *)&a4->tx = v8;
      *(_OWORD *)&a4->a = v7;
      return 1;
    }
    v9 = (_OWORD *)((char *)this + 8);
    if (*((double *)this + 2) == 0.0 && *((double *)this + 3) == 0.0
      || *(double *)v9 == 0.0 && *((double *)this + 4) == 0.0)
    {
      if (a2)
      {
        v10 = *(_OWORD *)((char *)this + 24);
        *(_OWORD *)&v15.a = *v9;
        *(_OWORD *)&v15.c = v10;
        *(_OWORD *)&v15.tx = *(_OWORD *)((char *)this + 40);
        a2->origin.x = transform_unit_rect(&v15);
        a2->origin.y = v11;
        a2->size.width = v12;
        a2->size.height = v13;
      }
      if (a3)
        *a3 = vabsq_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)((char *)this + 24), *((double *)this + 8)), *(float64x2_t *)((char *)this + 8), *((double *)this + 7)));
      return 1;
    }
  }
  return 0;
}

void shading_finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;
  void (*v4)(_QWORD);

  v2 = *(const void **)(a1 + 88);
  if (v2)
    CFRelease(v2);
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 24));
  switch(*(_DWORD *)(a1 + 20))
  {
    case 1:
      v3 = *(const void **)(a1 + 184);
      if (v3)
        goto LABEL_13;
      break;
    case 2:
      v3 = *(const void **)(a1 + 200);
      if (v3)
        goto LABEL_13;
      break;
    case 3:
      v3 = *(const void **)(a1 + 160);
      if (v3)
        goto LABEL_13;
      break;
    case 4:
      v3 = *(const void **)(a1 + 152);
      if (v3)
LABEL_13:
        CFRelease(v3);
      break;
    default:
      v4 = *(void (**)(_QWORD))(a1 + 112);
      if (v4)
        v4(*(_QWORD *)(a1 + 80));
      break;
  }
  free(*(void **)(a1 + 32));
}

uint64_t copy_character_set()
{
  return FPFontCopyCharacterSet();
}

id __send_analytics_event_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  int v5;
  image_offset *v6;
  image_offset *v7;
  uint64_t v8;
  uint64_t v10;
  image_offset *v11;
  uint64_t v12;
  image_offset *v14;
  image_offset image_offsets[15];
  _OWORD array[7];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (_block_invoke_onceToken != -1)
    dispatch_once(&_block_invoke_onceToken, &__block_literal_global_49_14690);
  v2 = *(void **)(a1 + 32);
  if (v2)
    v3 = (void *)objc_msgSend(v2, "mutableCopy");
  else
    v3 = (void *)objc_opt_new();
  v4 = v3;
  if (_block_invoke_appIdentifier)
    objc_msgSend(v3, "setObject:forKeyedSubscript:", _block_invoke_appIdentifier, CFSTR("bundleID"));
  v19 = 0;
  memset(array, 0, sizeof(array));
  v5 = backtrace((void **)array, 15);
  backtrace_image_offsets((void *const *)array, image_offsets, v5);
  if (v5 < 1)
  {
    v10 = MEMORY[0x1E0C9AAA0];
    objc_msgSend(v4, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("calledFromPDFKit"));
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v10, CFSTR("calledFromAppKit"));
  }
  else
  {
    v6 = &image_offsets[v5];
    v7 = image_offsets;
    v8 = MEMORY[0x1E0C9AAA0];
    while (*(_QWORD *)v7->uuid != (_QWORD)_block_invoke_pdfKit_uuid
         || *(_QWORD *)&v7->uuid[8] != *((_QWORD *)&_block_invoke_pdfKit_uuid + 1))
    {
      if (++v7 >= v6)
        goto LABEL_18;
    }
    v8 = MEMORY[0x1E0C9AAB0];
LABEL_18:
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v8, CFSTR("calledFromPDFKit"));
    v11 = image_offsets;
    v12 = MEMORY[0x1E0C9AAA0];
    while (*(_QWORD *)v11->uuid != (_QWORD)_block_invoke_appKit_uuid
         || *(_QWORD *)&v11->uuid[8] != *((_QWORD *)&_block_invoke_appKit_uuid + 1))
    {
      if (++v11 >= v6)
        goto LABEL_26;
    }
    v12 = MEMORY[0x1E0C9AAB0];
LABEL_26:
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v12, CFSTR("calledFromAppKit"));
    v14 = image_offsets;
    v10 = MEMORY[0x1E0C9AAA0];
    while (*(_QWORD *)v14->uuid != (_QWORD)_block_invoke_coreUI_uuid
         || *(_QWORD *)&v14->uuid[8] != *((_QWORD *)&_block_invoke_coreUI_uuid + 1))
    {
      if (++v14 >= v6)
        goto LABEL_34;
    }
    v10 = MEMORY[0x1E0C9AAB0];
  }
LABEL_34:
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v10, CFSTR("calledFromCoreUI"));
  return v4;
}

char *__device_state_create_root_block_invoke()
{
  char *result;

  result = (char *)malloc_type_malloc(0x30uLL, 0x2062DE7BuLL);
  *((_DWORD *)result + 1) = 1;
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 2) = 0;
  *((_WORD *)result + 12) = 0;
  *(_QWORD *)(result + 36) = 0;
  *(_QWORD *)(result + 28) = 0;
  *((_DWORD *)result + 11) = 0;
  device_state_create_root_root = (uint64_t)result;
  *result = 1;
  return result;
}

uint64_t CGPatternGetType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t CGPatternGetTiling(uint64_t a1)
{
  return *(unsigned int *)(a1 + 152);
}

void CGContextEOFillPath(CGContextRef c)
{
  CGContextDrawPath(c, kCGPathEOFill);
}

void __show_log_block_invoke()
{
  BOOL v0;

  if (show_log_show_log)
    v0 = 1;
  else
    v0 = getenv("CG_TRANSFORM_SHOW_REF_COUNT_BACKTRACE") != 0;
  show_log_show_log = v0;
}

void CGContextResetClip(CGContextRef c)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (c && *((_DWORD *)c + 4) == 1129601108)
    CGGStateResetClip(*((_QWORD *)c + 12));
  else
    handle_invalid_context((char)"CGContextResetClip", (uint64_t)c, v1, v2, v3, v4, v5, v6);
}

CGPathRef CGPathCreateCopyByStrokingPath(CGPathRef path, const CGAffineTransform *transform, CGFloat lineWidth, CGLineCap lineCap, CGLineJoin lineJoin, CGFloat miterLimit)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  CFTypeID v16;
  CFTypeID TypeID;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Instance;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const CGPath *v28;
  CG::Path *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (!path)
    return 0;
  v11 = *(_QWORD *)&lineJoin;
  if (!CGPathDisableTypeValidation)
  {
    v16 = CFGetTypeID(path);
    if (v16 != CGPathGetTypeID())
      return 0;
  }
  TypeID = CGPathGetTypeID();
  Instance = CGTypeCreateInstance(TypeID, 128, v18, v19, v20, v21, v22, v23);
  v28 = (const CGPath *)Instance;
  if (Instance)
  {
    v29 = CG::Path::Path((CG::Path *)(Instance + 16), (CGPathRef)((char *)path + 16), lineWidth, lineCap, v11, miterLimit, 0.0, 0, v25, v26, v27);
    if (transform)
      CG::Path::apply_transform(v29, transform, v30, v31, v32, v33, v34, v35);
  }
  return v28;
}

uint64_t CGPathCreateDashedPath(char *cf, _anonymous_namespace_ *this, const double *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  CFTypeID v14;
  CFTypeID TypeID;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Instance;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (!cf)
    return 0;
  if (!CGPathDisableTypeValidation)
  {
    v14 = CFGetTypeID(cf);
    if (v14 != CGPathGetTypeID())
      return 0;
  }
  TypeID = CGPathGetTypeID();
  Instance = CGTypeCreateInstance(TypeID, 128, v16, v17, v18, v19, v20, v21);
  v26 = Instance;
  if (Instance)
    CG::Path::Path((CG::Path *)(Instance + 16), (const CG::Path *)(cf + 16), a9, a3, a4, (const CGAffineTransform *)this, v23, v24, v25);
  return v26;
}

CG::Path *CG::Path::Path(CG::Path *this, const CG::Path *a2, double a3, const double *a4, unint64_t a5, const CGAffineTransform *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  path_iterator *v16;

  *(_DWORD *)this = 8;
  if (a5 && a4 && (*(_DWORD *)a2 - 10) > 0xFFFFFFF6)
  {
    v15 = operator new();
    *(_QWORD *)(v15 + 8) = this;
    *(_OWORD *)(v15 + 32) = unk_1E16265C0;
    *(_QWORD *)(v15 + 48) = 0;
    *(_DWORD *)v15 = 1;
    v16 = (path_iterator *)path_iterator_dasher_create(&a6->a, a4, a5, (unsigned int *)v15, a3);
    CG::Path::apply_iterator(a2, v16);
    if (v16)
      path_iterator::release((uint64_t)v16);
    path_iterator::release(v15);
  }
  else
  {
    CG::Path::append(this, a2, a6, a5, (uint64_t)a6, a7, a8, a9);
  }
  return this;
}

uint64_t CGPathCreateStrokedPath(char *cf, _anonymous_namespace_ *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11)
{
  int v14;
  CFTypeID v18;
  CFTypeID TypeID;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t Instance;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (!cf)
    return 0;
  v14 = a3;
  if (!CGPathDisableTypeValidation)
  {
    v18 = CFGetTypeID(cf);
    if (v18 != CGPathGetTypeID())
      return 0;
  }
    return 0;
  TypeID = CGPathGetTypeID();
  Instance = CGTypeCreateInstance(TypeID, 128, v20, v21, v22, v23, v24, v25);
  v30 = Instance;
  if (Instance)
    CG::Path::Path((CG::Path *)(Instance + 16), (const CG::Path *)(cf + 16), a9, v14, a4, a10, a11, (const CGAffineTransform *)this, v27, v28, v29);
  return v30;
}

CG::Path *CG::Path::Path(CG::Path *this, const CG::Path *a2, double a3, int a4, uint64_t a5, double a6, double a7, const CGAffineTransform *a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v16;
  uint64_t v19;
  path_iterator *v20;

  *(_DWORD *)this = 8;
  if ((*(_DWORD *)a2 - 10) > 0xFFFFFFF6)
  {
    v16 = a5;
    v19 = operator new();
    *(_QWORD *)(v19 + 8) = this;
    *(_OWORD *)(v19 + 32) = unk_1E16265C0;
    *(_QWORD *)(v19 + 48) = 0;
    *(_DWORD *)v19 = 1;
    v20 = (path_iterator *)path_iterator_stroker_create(a8, a4, v16, (unsigned int *)v19, a7, a3, a6);
    CG::Path::apply_iterator(a2, v20);
    path_iterator::release((uint64_t)v20);
    path_iterator::release(v19);
  }
  else
  {
    CG::Path::append(this, a2, a8, a5, (uint64_t)a8, a9, a10, a11);
  }
  return this;
}

void CG::Path::apply_iterator(CG::Path *this, path_iterator *a2)
{
  void (*v4)(_QWORD, _QWORD, _QWORD);
  void (*v5)(_QWORD, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, int, __int128 *);
  void *v9;
  path_iterator *v10;

  if (a2)
  {
    v4 = (void (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)a2 + 2);
    if (v4)
      v4(*((_QWORD *)a2 + 1), 0, *((_QWORD *)a2 + 6));
    v6 = MEMORY[0x1E0C809B0];
    v7 = 0x40000000;
    v8 = ___ZNK2CG4Path14apply_iteratorEP13path_iterator_block_invoke;
    v9 = &__block_descriptor_tmp_12503;
    v10 = a2;
    CG::Path::apply((double *)this, (uint64_t)&v6);
    v5 = (void (*)(_QWORD, _QWORD))*((_QWORD *)a2 + 4);
    if (v5)
      v5(*((_QWORD *)a2 + 1), *((_QWORD *)a2 + 6));
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    v7 = 0x40000000;
    v8 = ___ZNK2CG4Path14apply_iteratorEP13path_iterator_block_invoke;
    v9 = &__block_descriptor_tmp_12503;
    v10 = 0;
    CG::Path::apply((double *)this, (uint64_t)&v6);
  }
}

uint64_t path_iterator_dasher_create(double *a1, const void *a2, unint64_t a3, unsigned int *a4, double a5)
{
  const CGAffineTransform *v9;
  uint64_t result;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  void *v14;
  uint64_t v15;
  double *v16;
  double a;
  double d;
  float64x2_t v19;
  float64x2_t v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  void *v54;
  double v55;
  double *v56;
  double v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  double v61;
  unsigned int v62;
  char *v63;
  _BYTE *v64;
  uint64_t v65;

  if (a1)
  {
    v9 = (const CGAffineTransform *)a1;
    if (*a1 * a1[3] - a1[1] * a1[2] == 0.0)
      return 0;
  }
  else
  {
    v9 = &CGAffineTransformIdentity;
  }
  v11 = (_QWORD *)operator new();
  v12 = v11;
  *v11 = a4;
  v11[1] = 0;
  v13 = (void **)(v11 + 1);
  v11[2] = 0;
  v11[3] = 0;
  if (a3)
  {
    std::vector<unsigned long>::__vallocate[abi:se180100](v11 + 1, a3);
    v14 = (void *)v12[2];
    memmove(v14, a2, 8 * a3);
    v15 = (uint64_t)v14 + 8 * a3;
    v12[2] = v15;
    v16 = (double *)v12[1];
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  a = v9->a;
  d = v9->d;
  v19 = *(float64x2_t *)&v9->b;
  v20 = vnegq_f64(v19);
  v19.f64[0] = vmulq_laneq_f64(v20, v19, 1).f64[0] + v9->a * d;
  *((double *)v12 + 4) = d / v19.f64[0];
  *(float64x2_t *)(v12 + 5) = vdivq_f64(v20, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v19.f64[0], 0));
  *((double *)v12 + 7) = a / v19.f64[0];
  *((_BYTE *)v12 + 64) = 1;
  v12[16] = 0;
  v12[17] = 0;
  *(_OWORD *)(v12 + 9) = 0u;
  *(_OWORD *)(v12 + 11) = 0u;
  if (v16 != (double *)v15)
  {
    v21 = v16;
    do
    {
      *v21 = fabs(*v21);
      ++v21;
    }
    while (v21 != (double *)v15);
  }
  if ((((_DWORD)v15 - (_DWORD)v16) & 8) != 0)
  {
    v63 = 0;
    v64 = 0;
    v65 = 0;
    std::vector<double>::__init_with_size[abi:se180100]<double *,double *>(&v63, v16, v15, (v15 - (uint64_t)v16) >> 3);
    v25 = v63;
    if (v64 - v63 >= 1)
    {
      v26 = (v64 - v63) >> 3;
      v28 = (char *)v12[2];
      v27 = v12[3];
      if (v26 <= (v27 - (uint64_t)v28) >> 3)
      {
        if (v26 <= 0)
        {
          v36 = &v63[8 * v26];
          v37 = (char *)v12[2];
          v38 = &v28[8 * v26];
          v39 = &v37[-8 * v26];
          v40 = v37;
          if (v39 < v28)
          {
            v40 = (char *)v12[2];
            do
            {
              v41 = *(_QWORD *)v39;
              v39 += 8;
              *(_QWORD *)v40 = v41;
              v40 += 8;
            }
            while (v39 < v28);
          }
          v12[2] = v40;
          if (v37 != v38)
            memmove(&v37[-8 * ((v37 - v38) >> 3)], v28, v37 - v38);
          if (v36 != v25)
            memmove(v28, v25, v36 - v25);
        }
        else
        {
          v35 = v64 - v63;
          if (v64 != v63)
            memmove((void *)v12[2], v63, v64 - v63);
          v12[2] = &v28[v35];
        }
      }
      else
      {
        v29 = v12[1];
        v30 = (uint64_t)&v28[-v29] >> 3;
        if ((unint64_t)(v30 + v26) >> 61)
          std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
        v31 = v27 - v29;
        v32 = v31 >> 2;
        if (v31 >> 2 <= (unint64_t)(v30 + v26))
          v32 = v30 + v26;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
          v33 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v33 = v32;
        if (v33)
          v33 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v33);
        else
          v34 = 0;
        v42 = (_QWORD *)(v33 + 8 * v30);
        v43 = (char *)&v42[v26];
        v44 = 8 * v26;
        v45 = v42;
        v46 = (uint64_t *)v25;
        do
        {
          v47 = *v46++;
          *v45++ = v47;
          v44 -= 8;
        }
        while (v44);
        v48 = (char *)*v13;
        if (*v13 != v28)
        {
          v49 = v28;
          do
          {
            v50 = *((_QWORD *)v49 - 1);
            v49 -= 8;
            *--v42 = v50;
          }
          while (v49 != v48);
        }
        v51 = v33 + 8 * v34;
        v52 = (_BYTE *)v12[2];
        v53 = v52 - v28;
        if (v52 != v28)
          memmove(v43, v28, v52 - v28);
        v54 = (void *)v12[1];
        v12[1] = v42;
        v12[2] = &v43[v53];
        v12[3] = v51;
        if (v54)
          operator delete(v54);
      }
    }
    if (v25)
      operator delete(v25);
    v16 = (double *)v12[1];
    v15 = v12[2];
    if ((((_DWORD)v15 - (_DWORD)v16) & 8) != 0)
      _CGHandleAssert("dasher", 35, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Paths/Geometry/dasher.cc", "dash_pattern.size() % 2 == 0", "pattern size (%lu) is not a multiple of 2", v22, v23, v24, (v15 - (uint64_t)v16) >> 3);
  }
  v55 = 0.0;
  if (v16 == (double *)v15)
    goto LABEL_50;
  v56 = v16;
  do
  {
    v57 = *v56++;
    v55 = v55 + v57;
  }
  while (v56 != (double *)v15);
  if (v55 < 2.22044605e-16)
  {
LABEL_50:
    v12[2] = v16;
    v15 = (uint64_t)v16;
  }
  if (v16 != (double *)v15)
  {
    while (a5 < 0.0)
      a5 = v55 + a5;
    v58 = 0;
    v12[9] = 0;
    v59 = 1;
    *((_BYTE *)v12 + 64) = 1;
    v60 = (v15 - (uint64_t)v16) >> 3;
    while (1)
    {
      v61 = v16[v58];
      if (a5 < v61 || a5 == 0.0 && v61 == 0.0)
        break;
      a5 = a5 - v61;
      v59 ^= 1u;
      *((_BYTE *)v12 + 64) = v59;
      if (v58 < v60 - 1)
        ++v58;
      else
        v58 = 0;
      v12[9] = v58;
      if (v60 <= v58)
      {
        __break(1u);
        break;
      }
    }
    *((double *)v12 + 10) = v61 - a5;
  }
  result = operator new();
  *(_QWORD *)(result + 8) = v12;
  *(_OWORD *)(result + 16) = xmmword_1E1661860;
  *(_OWORD *)(result + 32) = *(_OWORD *)off_1E1661870;
  if (a4)
  {
    do
      v62 = __ldxr(a4);
    while (__stxr(v62 + 1, a4));
  }
  *(_QWORD *)(result + 48) = a4;
  *(_DWORD *)result = 1;
  return result;
}

void sub_184A3FBD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void **v3;
  void *v5;

  if (v2)
    operator delete(v2);
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 16) = v5;
    operator delete(v5);
  }
  MEMORY[0x186DC23C4](v1, 0x10A0C40535AADACLL);
  _Unwind_Resume(a1);
}

uint64_t CG::Path::is_ellipse(CG::Path *this, CGRect *a2, BOOL *a3, BOOL *a4, CGAffineTransform *a5)
{
  __int128 v8;
  __int128 v9;
  _OWORD *v10;
  __int128 v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGAffineTransform v16;

  if (*(_DWORD *)this == 4)
  {
    if (a4)
    {
      if (a2)
        *a2 = unit_rect;
      if (a3)
        *a3 = *((_BYTE *)this + 56);
      v8 = *(_OWORD *)((char *)this + 8);
      v9 = *(_OWORD *)((char *)this + 40);
      *((_OWORD *)a4 + 1) = *(_OWORD *)((char *)this + 24);
      *((_OWORD *)a4 + 2) = v9;
      *(_OWORD *)a4 = v8;
      return 1;
    }
    v10 = (_OWORD *)((char *)this + 8);
    if (*((double *)this + 2) == 0.0 && *((double *)this + 3) == 0.0
      || *(double *)v10 == 0.0 && *((double *)this + 4) == 0.0)
    {
      v11 = *(_OWORD *)((char *)this + 24);
      *(_OWORD *)&v16.a = *v10;
      *(_OWORD *)&v16.c = v11;
      *(_OWORD *)&v16.tx = *(_OWORD *)((char *)this + 40);
      if (a2)
      {
        a2->origin.x = transform_unit_rect(&v16);
        a2->origin.y = v12;
        a2->size.width = v13;
        a2->size.height = v14;
      }
      if (a3)
        *a3 = *((_BYTE *)this + 56);
      return 1;
    }
  }
  return 0;
}

CGBitmapInfo CGBitmapContextGetBitmapInfo(CGContextRef context)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (context && *((_DWORD *)context + 4) == 1129601108 && *((_DWORD *)context + 6) == 4)
    return *(_DWORD *)(*((_QWORD *)context + 4) + 40);
  handle_invalid_context((char)"CGBitmapContextGetBitmapInfo", (uint64_t)context, v1, v2, v3, v4, v5, v6);
  return 0;
}

CGAffineTransform *__cdecl CGAffineTransformRotate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat angle)
{
  CGAffineTransform *result;
  __double2 v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;

  v6 = __sincos_stret(angle);
  v7 = *(float64x2_t *)&t->a;
  v8 = *(float64x2_t *)&t->c;
  v9 = *(float64x2_t *)&t->tx;
  v10 = vmlsq_lane_f64(vmulq_n_f64(v8, v6.__cosval), *(float64x2_t *)&t->a, v6.__sinval, 0);
  *(float64x2_t *)&retstr->a = vmlaq_n_f64(vmulq_n_f64(v8, v6.__sinval), *(float64x2_t *)&t->a, v6.__cosval);
  *(float64x2_t *)&retstr->c = v10;
  *(float64x2_t *)&retstr->tx = vaddq_f64(v9, vmlaq_f64(vmulq_f64(v8, (float64x2_t)0), (float64x2_t)0, v7));
  return result;
}

uint64_t CGImageNotificationCenter()
{
  if (get_notification_center_onceToken != -1)
    dispatch_once(&get_notification_center_onceToken, &__block_literal_global_297);
  return get_notification_center_image_notification_center;
}

_QWORD *CGPathRandomAccess::clipper_paths_for_subpath_range(CGPathRandomAccess *this, CFRange a2, CGAffineTransform *a3, char a4)
{
  CFIndex length;
  unint64_t location;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char **v22;
  uint64_t v23;
  double **v24;
  double **v25;
  int64x2_t v26;
  int64x2_t *v27;
  unint64_t v28;
  int64x2_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  float64x2_t v45;
  int8x16_t v46;
  int8x16_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  int8x16_t v51;
  int8x16_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  double v57;
  double v58;
  int64x2_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  __int128 v73;
  __int128 v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  _QWORD *v80;
  _QWORD *v82;
  unint64_t v83;
  int64x2_t v86;
  int64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  unint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, double, double, double);
  void *v94;
  _QWORD *v95;
  unint64_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  _QWORD *v100;
  _QWORD v101[10];

  length = a2.length;
  location = a2.location;
  v6 = (_QWORD *)operator new();
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  v83 = location + length;
  if (location < location + length)
  {
    v80 = v6 + 2;
    v82 = v6;
    while (1)
    {
      v9 = (_QWORD *)v7[1];
      v8 = v7[2];
      if ((unint64_t)v9 >= v8)
      {
        v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *v7) >> 3);
        v12 = v11 + 1;
        if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
        v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v7) >> 3);
        if (2 * v13 > v12)
          v12 = 2 * v13;
        if (v13 >= 0x555555555555555)
          v14 = 0xAAAAAAAAAAAAAAALL;
        else
          v14 = v12;
        v95 = v80;
        if (v14)
          v14 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<std::vector<ClipperLib::IntPoint>>>(v14);
        else
          v15 = 0;
        v16 = (_QWORD *)(v14 + 24 * v11);
        v91 = v14;
        v92 = (uint64_t)v16;
        v94 = (void *)(v14 + 24 * v15);
        *v16 = 0;
        v16[1] = 0;
        v16[2] = 0;
        v93 = (void (*)(uint64_t, double, double, double))(v16 + 3);
        std::vector<std::vector<ClipperLib::IntPoint>>::__swap_out_circular_buffer(v7, &v91);
        v10 = (_QWORD *)v7[1];
        std::__split_buffer<std::vector<ClipperLib::IntPoint>>::~__split_buffer((uint64_t)&v91);
      }
      else
      {
        *v9 = 0;
        v9[1] = 0;
        v9[2] = 0;
        v10 = v9 + 3;
        v7[1] = v9 + 3;
      }
      v7[1] = v10;
      v17 = *(_QWORD *)this;
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3) <= location
        || (_QWORD *)*v7 == v10)
      {
        goto LABEL_65;
      }
      v18 = (uint64_t *)(v17 + 56 * location);
      v19 = *v18;
      v20 = v18[1];
      if (v20 != *v18)
        break;
LABEL_57:
      v7 = v82;
      if ((a4 & 1) != 0)
      {
        v76 = (char *)*(v10 - 3);
        v75 = (char *)*(v10 - 2);
        if (0xAAAAAAAAAAAAAAABLL * ((v75 - v76) >> 4) >= 2)
        {
          if (v76 == v75)
            goto LABEL_65;
          v78 = *((_QWORD *)v75 - 6);
          v77 = v75 - 48;
          if (v78 == *(_QWORD *)v76 && *((_QWORD *)v77 + 1) == *((_QWORD *)v76 + 1))
            *(v10 - 2) = v77;
        }
      }
      if (++location == v83)
        return v7;
    }
    v21 = 0;
    v89 = *(float64x2_t *)&a3->c;
    v90 = *(float64x2_t *)&a3->a;
    v88 = *(float64x2_t *)&a3->tx;
    v22 = (char **)(v10 - 3);
    v23 = v17 + 56 * location;
    v24 = (double **)(v23 + 24);
    v25 = (double **)(v23 + 32);
    while (1)
    {
      if (!v21)
      {
        if (*v25 == *v24)
          break;
        v26 = vcvtq_s64_f64(vaddq_f64(v88, vmlaq_n_f64(vmulq_n_f64(v89, (*v24)[1]), v90, **v24)));
        v27 = (int64x2_t *)*(v10 - 2);
        v28 = *(v10 - 1);
        if ((unint64_t)v27 >= v28)
        {
          v86 = v26;
          v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - *v22) >> 4);
          v31 = v30 + 1;
          if (v30 + 1 > 0x555555555555555)
            goto LABEL_66;
          v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (_QWORD)*v22) >> 4);
          if (2 * v32 > v31)
            v31 = 2 * v32;
          if (v32 >= 0x2AAAAAAAAAAAAAALL)
            v33 = 0x555555555555555;
          else
            v33 = v31;
          v34 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<ClipperLib::IntPoint>>(v33);
          v36 = &v34[48 * v30];
          *(int64x2_t *)v36 = v86;
          *((_QWORD *)v36 + 2) = location;
          *((_QWORD *)v36 + 3) = 0;
          *((_QWORD *)v36 + 4) = -1;
          *((_QWORD *)v36 + 5) = 0xBFF0000000000000;
          v38 = (char *)*(v10 - 3);
          v37 = (char *)*(v10 - 2);
          v39 = v36;
          if (v37 != v38)
          {
            do
            {
              v40 = *((_OWORD *)v37 - 3);
              v41 = *((_OWORD *)v37 - 1);
              *((_OWORD *)v39 - 2) = *((_OWORD *)v37 - 2);
              *((_OWORD *)v39 - 1) = v41;
              *((_OWORD *)v39 - 3) = v40;
              v39 -= 48;
              v37 -= 48;
            }
            while (v37 != v38);
            v37 = *v22;
          }
          v29 = (int64x2_t *)(v36 + 48);
          *(v10 - 3) = v39;
          *(v10 - 2) = v36 + 48;
          *(v10 - 1) = &v34[48 * v35];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *v27 = v26;
          v27[1].i64[0] = location;
          v27[1].i64[1] = 0;
          v29 = v27 + 3;
          v27[2].i64[0] = -1;
          v27[2].i64[1] = 0xBFF0000000000000;
        }
        *(v10 - 2) = v29;
        v19 = *v18;
        v20 = v18[1];
      }
      if (v21 >= (v20 - v19) >> 4)
        break;
      v42 = v19 + 16 * v21;
      if (*(_BYTE *)(v42 + 8))
      {
        v101[0] = 0;
        v101[1] = v101;
        v101[2] = 0x4802000000;
        v101[3] = __Block_byref_object_copy__24;
        v101[4] = __Block_byref_object_dispose__25;
        v101[5] = location;
        v101[6] = 0;
        v101[7] = -1;
        v101[8] = 0xBFF0000000000000;
        v43 = *(_QWORD *)v42;
        if (v43 >= ((char *)*v25 - (char *)*v24) >> 4)
          break;
        v44 = (uint64_t)&(*v24)[2 * v43];
        v45 = *(float64x2_t *)(v44 + 16);
        v46 = vorrq_s8((int8x16_t)vcltzq_f64(*(float64x2_t *)v44), (int8x16_t)vcgezq_f64(*(float64x2_t *)v44));
        v47 = vorrq_s8((int8x16_t)vcltzq_f64(v45), (int8x16_t)vcgezq_f64(v45));
        v48 = (float64x2_t)vbslq_s8(v46, vbslq_s8(vornq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)v44, v45), v47), *(int8x16_t *)v44, (int8x16_t)v45), (int8x16_t)v45);
        v49 = *(float64x2_t *)(v44 + 32);
        v50 = *(float64x2_t *)(v44 + 48);
        v51 = vorrq_s8((int8x16_t)vcltzq_f64(v49), (int8x16_t)vcgezq_f64(v49));
        v52 = vorrq_s8((int8x16_t)vcltzq_f64(v50), (int8x16_t)vcgezq_f64(v50));
        v53 = (float64x2_t)vbslq_s8(v51, vbslq_s8(vornq_s8((int8x16_t)vcgtq_f64(v49, v50), v52), (int8x16_t)v49, (int8x16_t)v50), (int8x16_t)v50);
        v54 = (float64x2_t)vbslq_s8(v46, vbslq_s8(vornq_s8((int8x16_t)vcgtq_f64(v45, *(float64x2_t *)v44), v47), *(int8x16_t *)v44, (int8x16_t)v45), (int8x16_t)v45);
        v55 = (float64x2_t)vbslq_s8(v51, vbslq_s8(vornq_s8((int8x16_t)vcgtq_f64(v50, v49), v52), (int8x16_t)v49, (int8x16_t)v50), (int8x16_t)v50);
        v56 = vsubq_f64((float64x2_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f64(v48), (int8x16_t)vcgezq_f64(v48)), vbslq_s8(vornq_s8((int8x16_t)vcgtq_f64(v48, v53), vorrq_s8((int8x16_t)vcltzq_f64(v53), (int8x16_t)vcgezq_f64(v53))), (int8x16_t)v48, (int8x16_t)v53), (int8x16_t)v53), (float64x2_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f64(v54), (int8x16_t)vcgezq_f64(v54)), vbslq_s8(vornq_s8((int8x16_t)vcgtq_f64(v55, v54), vorrq_s8((int8x16_t)vcltzq_f64(v55), (int8x16_t)vcgezq_f64(v55))), (int8x16_t)v54, (int8x16_t)v55), (int8x16_t)v55));
        if (v56.f64[0] <= v56.f64[1])
          v57 = v56.f64[1];
        else
          v57 = v56.f64[0];
        v91 = MEMORY[0x1E0C809B0];
        v92 = 0x40000000;
        v93 = ___ZNK25CGPathRandomAccessSubpath12clipper_pathEm17CGAffineTransformbRNSt3__16vectorIN10ClipperLib8IntPointENS1_9allocatorIS4_EEEE_block_invoke;
        v94 = &unk_1E16303B0;
        v95 = v101;
        v96 = v21;
        v97 = v90;
        v98 = v89;
        v99 = v88;
        v100 = v10 - 3;
        subdivide_bezier_with_flatness(v44, (uint64_t)&v91, fmin(v57 * 0.002, 0.6));
        _Block_object_dispose(v101, 8);
      }
      else
      {
        v58 = (double)v21 + 1.0;
        v59 = vcvtq_s64_f64(vaddq_f64(v88, vmlaq_n_f64(vmulq_n_f64(v89, (*v24)[2 * ((*(_QWORD *)v42 + 1) % (unint64_t)(((char *)*v25 - (char *)*v24) >> 4)) + 1]), v90, (*v24)[2 * ((*(_QWORD *)v42 + 1) % (unint64_t)(((char *)*v25 - (char *)*v24) >> 4))])));
        v60 = *(v10 - 2);
        v61 = *(v10 - 1);
        if (v60 >= v61)
        {
          v87 = v59;
          v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - (_QWORD)*v22) >> 4);
          v64 = v63 + 1;
          if (v63 + 1 > 0x555555555555555)
            goto LABEL_66;
          v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - (_QWORD)*v22) >> 4);
          if (2 * v65 > v64)
            v64 = 2 * v65;
          if (v65 >= 0x2AAAAAAAAAAAAAALL)
            v66 = 0x555555555555555;
          else
            v66 = v64;
          v67 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<ClipperLib::IntPoint>>(v66);
          v69 = &v67[48 * v63];
          *(int64x2_t *)v69 = v87;
          *((_QWORD *)v69 + 2) = location;
          *((double *)v69 + 3) = v58;
          *((_QWORD *)v69 + 4) = -1;
          *((_QWORD *)v69 + 5) = 0xBFF0000000000000;
          v71 = (char *)*(v10 - 3);
          v70 = (char *)*(v10 - 2);
          v72 = v69;
          if (v70 != v71)
          {
            do
            {
              v73 = *((_OWORD *)v70 - 3);
              v74 = *((_OWORD *)v70 - 1);
              *((_OWORD *)v72 - 2) = *((_OWORD *)v70 - 2);
              *((_OWORD *)v72 - 1) = v74;
              *((_OWORD *)v72 - 3) = v73;
              v72 -= 48;
              v70 -= 48;
            }
            while (v70 != v71);
            v70 = *v22;
          }
          v62 = v69 + 48;
          *(v10 - 3) = v72;
          *(v10 - 2) = v69 + 48;
          *(v10 - 1) = &v67[48 * v68];
          if (v70)
            operator delete(v70);
        }
        else
        {
          *(int64x2_t *)v60 = v59;
          *(_QWORD *)(v60 + 16) = location;
          *(double *)(v60 + 24) = v58;
          v62 = (char *)(v60 + 48);
          *(_QWORD *)(v60 + 32) = -1;
          *(_QWORD *)(v60 + 40) = 0xBFF0000000000000;
        }
        *(v10 - 2) = v62;
      }
      ++v21;
      v19 = *v18;
      v20 = v18[1];
      if (v21 >= (v20 - *v18) >> 4)
        goto LABEL_57;
    }
LABEL_65:
    __break(1u);
LABEL_66:
    std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
  }
  return v7;
}

void sub_184A4053C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t subdivide_bezier_with_flatness(uint64_t a1, uint64_t a2, double a3)
{
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  __n128 v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  double v17;
  double v18;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  unint64_t v31;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;

  v6 = *(float64x2_t *)a1;
  v5 = *(float64x2_t *)(a1 + 16);
  v7 = vsubq_f64(v5, *(float64x2_t *)a1);
  v9 = *(float64x2_t *)(a1 + 32);
  v8 = *(__n128 *)(a1 + 48);
  v10 = vsubq_f64(v9, v5);
  v11 = vsubq_f64((float64x2_t)v8, v9);
  v12 = vsubq_f64(v10, v7);
  v13 = vsubq_f64(v11, v10);
  v14 = (float64x2_t)vzip2q_s64((int64x2_t)v12, (int64x2_t)v13);
  v15 = (float64x2_t)vzip1q_s64((int64x2_t)v12, (int64x2_t)v13);
  v16 = vmlaq_f64(vmulq_f64(v14, v14), v15, v15);
  if (v16.f64[0] <= v16.f64[1])
    v16.f64[0] = v16.f64[1];
  v17 = a3 * a3;
  v18 = v16.f64[0] * 9.0 * 0.0625;
  if (v18 > v17)
  {
    v20 = vaddq_f64(v7, v12);
    v21 = vsubq_f64(v13, v12);
    __asm
    {
      FMOV            V5.2D, #3.0
      FMOV            V6.2D, #6.0
    }
    v28 = vmulq_f64(v21, _Q6);
    v29 = vmlaq_f64(v21, _Q5, v20);
    v30 = vmulq_f64(vaddq_f64(v12, v21), _Q6);
    v31 = 1;
    __asm
    {
      FMOV            V0.2D, #0.125
      FMOV            V3.2D, #0.25
      FMOV            V4.2D, #0.5
    }
    do
    {
      v28 = vmulq_f64(v28, _Q0);
      v30 = vsubq_f64(vmulq_f64(v30, _Q3), v28);
      v29 = vsubq_f64(vmulq_f64(v29, _Q4), vmulq_f64(v30, _Q4));
      v35 = 2 * v31;
      v18 = v18 * 0.0625;
      if (v18 <= v17)
        break;
      v36 = v31 > 0x8000;
      v31 *= 2;
    }
    while (!v36);
    v37 = 1;
    v39 = v28;
    do
    {
      v41 = vaddq_f64(v30, v29);
      v42 = vaddq_f64(v29, v6);
      v40 = vaddq_f64(v28, v30);
      (*(void (**)(uint64_t, float64_t, float64_t, double))(a2 + 16))(a2, v42.f64[0], v42.f64[1], 1.0 / (double)(unint64_t)v35 * (double)v37);
      v30 = v40;
      v29 = v41;
      v28 = v39;
      v6 = v42;
      ++v37;
    }
    while (v35 != v37);
    v8 = *(__n128 *)(a1 + 48);
  }
  return (*(uint64_t (**)(uint64_t, __n128, double, double))(a2 + 16))(a2, v8, v8.n128_f64[1], 1.0);
}

void ___ZNK25CGPathRandomAccessSubpath12clipper_pathEm17CGAffineTransformbRNSt3__16vectorIN10ClipperLib8IntPointENS1_9allocatorIS4_EEEE_block_invoke(uint64_t a1, double a2, double a3, double a4)
{
  void **v4;
  int64x2_t v5;
  int64x2_t *v6;
  unint64_t v7;
  int64x2_t *v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64x2_t *v17;
  unint64_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t *v21;
  int64x2_t *v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;

  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48) = (double)*(unint64_t *)(a1 + 40) + a4;
  v4 = *(void ***)(a1 + 96);
  v5 = vcvtq_s64_f64(vaddq_f64(*(float64x2_t *)(a1 + 80), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 64), a3), *(float64x2_t *)(a1 + 48), a2)));
  v6 = (int64x2_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v8 = (int64x2_t *)v4[1];
  v7 = (unint64_t)v4[2];
  if ((unint64_t)v8 >= v7)
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (_BYTE *)*v4) >> 4);
    v13 = v12 + 1;
    if (v12 + 1 > 0x555555555555555)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)*v4) >> 4);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x2AAAAAAAAAAAAAALL)
      v15 = 0x555555555555555;
    else
      v15 = v13;
    if (v15)
    {
      v25 = v5;
      v15 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<ClipperLib::IntPoint>>(v15);
      v5 = v25;
    }
    else
    {
      v16 = 0;
    }
    v17 = (int64x2_t *)(v15 + 48 * v12);
    v18 = v15 + 48 * v16;
    v20 = *v6;
    v19 = v6[1];
    *v17 = v5;
    v17[1] = v20;
    v17[2] = v19;
    v11 = v17 + 3;
    v22 = (int64x2_t *)*v4;
    v21 = (int64x2_t *)v4[1];
    if (v21 != *v4)
    {
      do
      {
        v23 = v21[-3];
        v24 = v21[-1];
        v17[-2] = v21[-2];
        v17[-1] = v24;
        v17[-3] = v23;
        v17 -= 3;
        v21 -= 3;
      }
      while (v21 != v22);
      v21 = (int64x2_t *)*v4;
    }
    *v4 = v17;
    v4[1] = v11;
    v4[2] = (void *)v18;
    if (v21)
      operator delete(v21);
  }
  else
  {
    v10 = *v6;
    v9 = *(int64x2_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 56);
    *v8 = v5;
    v8[1] = v10;
    v8[2] = v9;
    v11 = v8 + 3;
  }
  v4[1] = v11;
}

_QWORD *std::vector<std::vector<ClipperLib::IntPoint>>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    *(_QWORD *)(v4 - 24) = 0;
    *(_QWORD *)(v4 - 16) = 0;
    v4 -= 24;
    *(_QWORD *)(v4 + 16) = 0;
    v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v4 + 16) = v2[2];
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::vector<ClipperLib::IntPoint>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t ClipperLib::ClipperBase::AddPaths(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v4 = *a2;
  if (a2[1] != *a2)
  {
    v8 = result;
    v9 = 0;
    v10 = 0;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v4 + v9, a3, a4);
      ++v10;
      v4 = *a2;
      v9 += 24;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  return result;
}

uint64_t ClipperLib::ClipperBase::AddPath(uint64_t result, uint64_t a2, int a3, int a4)
{
  __int128 *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;
  int32x2_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  _BYTE *v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __n128 *v28;
  uint64_t v29;
  __n128 v30;
  __n128 v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 *v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _BOOL4 v52;
  char IsBetweenPt1AndPt3;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  _OWORD *v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  double v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  __n128 v106;
  uint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  char *v118;
  char *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t i;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  unint64_t v139;
  char *v140;
  char *v141;
  __int128 v142;
  _QWORD *v143;
  unint64_t v144;
  uint64_t *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  unint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  _QWORD *v158;
  ClipperLib::clipperException *exception;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v164;

  if (a3 == 1 && (a4 & 1) == 0)
  {
    exception = (ClipperLib::clipperException *)__cxa_allocate_exception(0x20uLL);
    ClipperLib::clipperException::clipperException(exception, "AddPath: Open paths must be subject.");
  }
  v6 = *(__int128 **)a2;
  v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  LODWORD(v8) = v7 - 1;
  if (a4 && (int)v7 >= 2)
  {
    LODWORD(v8) = -1431655765 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
    do
    {
      v8 = (v8 - 1);
      if (v7 <= v8)
        goto LABEL_212;
      v9 = (uint64_t *)&v6[3 * v8];
      v11 = *v9;
      v10 = v9[1];
      if (v11 != *(_QWORD *)v6 || v10 != *((_QWORD *)v6 + 1))
        goto LABEL_14;
    }
    while ((int)v8 > 1);
    LODWORD(v8) = 0;
  }
LABEL_14:
  LODWORD(v13) = v8 & ((int)v8 >> 31);
  while (1)
  {
    v14 = (v8 - 1);
    if ((int)v8 < 1)
      break;
    if (v7 <= v8 || v7 <= v14)
      goto LABEL_212;
    v15 = vmovn_s64(vceqq_s64((int64x2_t)v6[3 * v8], (int64x2_t)v6[3 * v14]));
    LODWORD(v8) = v8 - 1;
    if ((v15.i32[0] & v15.i32[1] & 1) == 0)
    {
      LODWORD(v13) = v14 + 1;
      break;
    }
  }
  if ((int)v13 <= a4)
    return 0;
  v164 = result;
  is_mul_ok((int)v13 + 1, 0xE8uLL);
  result = operator new[]();
  v16 = result;
  v17 = result;
  do
  {
    *(_QWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = 0;
    *(_OWORD *)(v17 + 16) = ClipperLib::PointInfoZero;
    *(_OWORD *)(v17 + 32) = unk_184F7D388;
    *(_QWORD *)(v17 + 48) = 0;
    *(_QWORD *)(v17 + 56) = 0;
    *(_OWORD *)(v17 + 64) = ClipperLib::PointInfoZero;
    *(_OWORD *)(v17 + 80) = unk_184F7D388;
    *(_QWORD *)(v17 + 96) = 0;
    *(_QWORD *)(v17 + 104) = 0;
    *(_OWORD *)(v17 + 112) = ClipperLib::PointInfoZero;
    *(_OWORD *)(v17 + 128) = unk_184F7D388;
    v17 += 232;
  }
  while (v17 != result + 232 * ((int)v13 + 1));
  v18 = *(__int128 **)a2;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4) <= 1)
    goto LABEL_212;
  v19 = v18[3];
  v20 = v18[5];
  *(_OWORD *)(result + 296) = v18[4];
  *(_OWORD *)(result + 312) = v20;
  *(_OWORD *)(result + 280) = v19;
  v21 = (_BYTE *)(v164 + 40);
  v161 = result;
  result = ClipperLib::RangeTest(*(_QWORD *)v18, *((_QWORD *)v18 + 1), (_BYTE *)(v164 + 40));
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4) <= v13)
    goto LABEL_212;
  result = ClipperLib::RangeTest(*(_QWORD *)(*(_QWORD *)a2 + 48 * v13), *(_QWORD *)(*(_QWORD *)a2 + 48 * v13 + 8), v21);
  v22 = *(__int128 **)a2;
  v23 = *(_QWORD *)(a2 + 8);
  v24 = v23 - *(_QWORD *)a2;
  if (v23 == *(_QWORD *)a2)
    goto LABEL_212;
  *(_QWORD *)(v16 + 224) = 0;
  v25 = v16 + 232 * v13;
  *(_OWORD *)(v16 + 192) = 0u;
  *(_OWORD *)(v16 + 208) = 0u;
  *(_OWORD *)(v16 + 160) = 0u;
  *(_OWORD *)(v16 + 176) = 0u;
  *(_OWORD *)(v16 + 128) = 0u;
  *(_OWORD *)(v16 + 144) = 0u;
  *(_OWORD *)(v16 + 96) = 0u;
  *(_OWORD *)(v16 + 112) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_OWORD *)(v16 + 80) = 0u;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_OWORD *)v16 = 0u;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_QWORD *)(v16 + 176) = v16 + 232;
  *(_QWORD *)(v16 + 184) = v25;
  v26 = *v22;
  v27 = v22[2];
  *(_OWORD *)(v16 + 64) = v22[1];
  *(_OWORD *)(v16 + 80) = v27;
  *(_OWORD *)(v16 + 48) = v26;
  *(_DWORD *)(v16 + 172) = -1;
  if (0xAAAAAAAAAAAAAAABLL * (v24 >> 4) <= v13)
  {
LABEL_212:
    __break(1u);
    return result;
  }
  v160 = a3;
  *(_QWORD *)(v25 + 224) = 0;
  *(_OWORD *)(v25 + 192) = 0uLL;
  *(_OWORD *)(v25 + 208) = 0uLL;
  v28 = (__n128 *)&v22[3 * v13];
  *(_OWORD *)(v25 + 160) = 0uLL;
  *(_OWORD *)(v25 + 176) = 0uLL;
  *(_OWORD *)(v25 + 128) = 0uLL;
  *(_OWORD *)(v25 + 144) = 0uLL;
  *(_OWORD *)(v25 + 96) = 0uLL;
  *(_OWORD *)(v25 + 112) = 0uLL;
  *(_OWORD *)(v25 + 64) = 0uLL;
  *(_OWORD *)(v25 + 80) = 0uLL;
  *(_OWORD *)(v25 + 32) = 0uLL;
  *(_OWORD *)(v25 + 48) = 0uLL;
  *(_OWORD *)v25 = 0uLL;
  *(_OWORD *)(v25 + 16) = 0uLL;
  v29 = v16 + 232 * v13;
  *(_QWORD *)(v29 + 176) = v16;
  *(_QWORD *)(v29 + 184) = v16 + 232 * (v13 - 1);
  v30 = *v28;
  v31 = v28[2];
  *(__n128 *)(v29 + 64) = v28[1];
  *(__n128 *)(v29 + 80) = v31;
  *(__n128 *)(v29 + 48) = v30;
  v32 = v16;
  v33 = (_QWORD *)v16;
  *(_DWORD *)(v29 + 172) = -1;
  if ((int)v13 < 2)
    goto LABEL_33;
  v34 = v16 + 232 * v13;
  v35 = v16 + 232 * (v13 - 2);
  do
  {
    v13 = (v13 - 1);
    if (0xAAAAAAAAAAAAAAABLL * ((v23 - (uint64_t)v22) >> 4) <= v13)
      goto LABEL_212;
    result = ClipperLib::RangeTest(*(_QWORD *)&v22[3 * v13], *((_QWORD *)&v22[3 * v13] + 1), v21);
    v22 = *(__int128 **)a2;
    v23 = *(_QWORD *)(a2 + 8);
    if (0xAAAAAAAAAAAAAAABLL * ((v23 - *(_QWORD *)a2) >> 4) <= v13)
      goto LABEL_212;
    v36 = v16 + 232 * v13;
    *(_QWORD *)(v36 + 224) = 0;
    *(_OWORD *)(v36 + 192) = 0u;
    *(_OWORD *)(v36 + 208) = 0u;
    v37 = (__n128 *)&v22[3 * v13];
    *(_OWORD *)(v36 + 160) = 0u;
    *(_OWORD *)(v36 + 176) = 0u;
    *(_OWORD *)(v36 + 128) = 0u;
    *(_OWORD *)(v36 + 144) = 0u;
    *(_OWORD *)(v36 + 96) = 0u;
    *(_OWORD *)(v36 + 112) = 0u;
    *(_OWORD *)(v36 + 64) = 0u;
    *(_OWORD *)(v36 + 80) = 0u;
    *(_OWORD *)(v36 + 32) = 0u;
    *(_OWORD *)(v36 + 48) = 0u;
    *(_OWORD *)v36 = 0u;
    *(_OWORD *)(v36 + 16) = 0u;
    *(_QWORD *)(v36 + 176) = v34;
    *(_QWORD *)(v36 + 184) = v35;
    v30 = *v37;
    v38 = v37[2];
    *(__n128 *)(v36 + 64) = v37[1];
    *(__n128 *)(v36 + 80) = v38;
    *(__n128 *)(v36 + 48) = v30;
    v34 -= 232;
    v35 -= 232;
    *(_DWORD *)(v36 + 172) = -1;
  }
  while ((int)v13 > 1);
  v32 = v16;
  v33 = (_QWORD *)v16;
LABEL_33:
  v39 = v33[6];
  v40 = v33[7];
  v41 = v33;
  v42 = a4;
  while (1)
  {
    while (1)
    {
      v43 = v39;
      v44 = v40;
      v45 = (_QWORD *)v41[22];
      v39 = v45[6];
      v40 = v45[7];
      if (v43 == v39 && v44 == v40)
        break;
      v47 = (_QWORD *)v41[23];
      if (v47 == v45)
        goto LABEL_61;
      if (v42)
      {
        v48 = v47[6];
        v49 = v47[7];
        v50 = v41[6];
        v162 = v41[7];
        v51 = v33;
        v52 = ClipperLib::SlopesEqual(v48, v49, v50, v162, v39, v40, *(unsigned __int8 *)(v164 + 40));
        v33 = v51;
        v42 = a4;
        if (v52)
        {
          if (!*(_BYTE *)(v164 + 72)
            || (IsBetweenPt1AndPt3 = ClipperLib::Pt2IsBetweenPt1AndPt3(v48, v49, v50, v162, v39, v40),
                v33 = v51,
                v42 = a4,
                (IsBetweenPt1AndPt3 & 1) == 0))
          {
            if (v41 == (_QWORD *)v32)
              v32 = (uint64_t)v45;
            v47[22] = v45;
            v55 = v41[22];
            *(_QWORD *)(v55 + 184) = v47;
            v41[23] = 0;
            v33 = *(_QWORD **)(v55 + 184);
            goto LABEL_33;
          }
        }
        goto LABEL_47;
      }
      if (v45 == v33)
      {
        v41 = v33;
        goto LABEL_65;
      }
LABEL_51:
      v41 = v45;
      if (v45[22] == v32)
        goto LABEL_65;
    }
    if ((v42 & 1) != 0 || v45 != (_QWORD *)v32)
    {
      if (v41 == v45)
        goto LABEL_61;
      if (v41 == (_QWORD *)v32)
        v32 = v41[22];
      v54 = v41[23];
      *(_QWORD *)(v54 + 176) = v45;
      v33 = (_QWORD *)v41[22];
      v33[23] = v54;
      v41[23] = 0;
      goto LABEL_33;
    }
    if (v41[23] == v32)
      goto LABEL_65;
LABEL_47:
    if (v45 == v33)
      break;
    v41 = v45;
    if ((v42 & 1) == 0)
      goto LABEL_51;
  }
  v41 = v33;
LABEL_61:
  if ((v42 & 1) == 0)
  {
LABEL_65:
    v56 = (_QWORD *)v164;
    v57 = v161;
    if (v41 == (_QWORD *)v41[22])
      goto LABEL_80;
    *(_BYTE *)(v164 + 73) = 1;
    *(_DWORD *)(*(_QWORD *)(v32 + 184) + 172) = -2;
    goto LABEL_67;
  }
  v56 = (_QWORD *)v164;
  v57 = v161;
  if (v41[23] != v41[22])
  {
LABEL_67:
    v58 = 1;
    v59 = v32;
    do
    {
      while (1)
      {
        v60 = (_OWORD *)(v59 + 48);
        v61 = *(_QWORD *)(v59 + 176);
        v62 = *(_OWORD *)(v59 + 64);
        if (*(_QWORD *)(v59 + 56) >= *(_QWORD *)(v61 + 56))
        {
          *(_OWORD *)v59 = *v60;
          *(_OWORD *)(v59 + 16) = v62;
          *(_OWORD *)(v59 + 32) = *(_OWORD *)(v59 + 80);
          v65 = *(_OWORD *)(v61 + 48);
          v66 = *(_OWORD *)(v61 + 80);
          *(_OWORD *)(v59 + 112) = *(_OWORD *)(v61 + 64);
          *(_OWORD *)(v59 + 128) = v66;
          *(_OWORD *)(v59 + 96) = v65;
        }
        else
        {
          *(_OWORD *)(v59 + 96) = *v60;
          *(_OWORD *)(v59 + 112) = v62;
          *(_OWORD *)(v59 + 128) = *(_OWORD *)(v59 + 80);
          v63 = *(_OWORD *)(v61 + 48);
          v64 = *(_OWORD *)(v61 + 80);
          *(_OWORD *)(v59 + 16) = *(_OWORD *)(v61 + 64);
          *(_OWORD *)(v59 + 32) = v64;
          *(_OWORD *)v59 = v63;
        }
        v67 = -1.0e40;
        v68 = *(_QWORD *)(v59 + 104) - *(_QWORD *)(v59 + 8);
        if (v68)
          v67 = (double)(uint64_t)(*(_QWORD *)(v59 + 96) - *(_QWORD *)v59) / (double)v68;
        *(double *)(v59 + 144) = v67;
        *(_DWORD *)(v59 + 152) = v160;
        if (v58)
          break;
        v58 = 0;
        v59 = v61;
        if (v61 == v32)
          goto LABEL_82;
      }
      v69 = *(_QWORD *)(v61 + 56);
      v70 = *(_QWORD *)(v32 + 56);
      v58 = v69 == v70;
      v59 = v61;
    }
    while (v61 != v32);
    if (v69 == v70)
    {
      if (a4)
        goto LABEL_80;
      v121 = *(_QWORD *)(v32 + 184);
      *(_DWORD *)(v121 + 172) = -2;
      v122 = *(_QWORD *)(v32 + 8);
      *(_QWORD *)(v32 + 156) = 2;
      for (i = v32; ; i = v128)
      {
        if (*(_QWORD *)i != *(_QWORD *)(v121 + 96))
        {
          v124 = *(_QWORD *)(i + 96);
          *(_QWORD *)(i + 96) = *(_QWORD *)i;
          *(_QWORD *)i = v124;
          v126 = *(_OWORD *)(i + 112);
          v125 = *(_OWORD *)(i + 128);
          v127 = *(_OWORD *)(i + 32);
          *(_OWORD *)(i + 112) = *(_OWORD *)(i + 16);
          *(_OWORD *)(i + 128) = v127;
          *(_OWORD *)(i + 16) = v126;
          *(_OWORD *)(i + 32) = v125;
        }
        v128 = *(_QWORD *)(i + 176);
        if (*(_DWORD *)(v128 + 172) == -2)
          break;
        *(_QWORD *)(i + 192) = v128;
        v121 = *(_QWORD *)(v128 + 184);
      }
      v130 = *(_QWORD **)(v164 + 24);
      v129 = *(_QWORD *)(v164 + 32);
      if ((unint64_t)v130 >= v129)
      {
        v132 = *(_QWORD *)(v164 + 16);
        v133 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v130 - v132) >> 3);
        v134 = v133 + 1;
        if (v133 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_209:
          std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
        v135 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v129 - v132) >> 3);
        if (2 * v135 > v134)
          v134 = 2 * v135;
        if (v135 >= 0x555555555555555)
          v136 = 0xAAAAAAAAAAAAAAALL;
        else
          v136 = v134;
        if (v136)
          v136 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<std::vector<ClipperLib::IntPoint>>>(v136);
        else
          v137 = 0;
        v138 = (_QWORD *)(v136 + 24 * v133);
        v139 = v136 + 24 * v137;
        *v138 = v122;
        v138[1] = 0;
        v138[2] = v32;
        v131 = v138 + 3;
        v141 = *(char **)(v164 + 16);
        v140 = *(char **)(v164 + 24);
        if (v140 == v141)
        {
          v143 = (_QWORD *)v164;
        }
        else
        {
          do
          {
            v142 = *(_OWORD *)(v140 - 24);
            *(v138 - 1) = *((_QWORD *)v140 - 1);
            *(_OWORD *)(v138 - 3) = v142;
            v138 -= 3;
            v140 -= 24;
          }
          while (v140 != v141);
          v143 = (_QWORD *)v164;
          v140 = *(char **)(v164 + 16);
        }
        v143[2] = v138;
        v143[3] = v131;
        v143[4] = v139;
        if (v140)
          operator delete(v140);
      }
      else
      {
        *v130 = v122;
        v130[1] = 0;
        v131 = v130 + 3;
        v130[2] = v32;
      }
      *(_QWORD *)(v164 + 24) = v131;
      v145 = *(uint64_t **)(v164 + 56);
      v144 = *(_QWORD *)(v164 + 64);
      if ((unint64_t)v145 < v144)
      {
        *v145 = v57;
        v146 = v145 + 1;
        goto LABEL_207;
      }
      v147 = *(_QWORD *)(v164 + 48);
      v148 = ((uint64_t)v145 - v147) >> 3;
      if (!((unint64_t)(v148 + 1) >> 61))
      {
        v149 = v144 - v147;
        v150 = v149 >> 2;
        if (v149 >> 2 <= (unint64_t)(v148 + 1))
          v150 = v148 + 1;
        if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFF8)
          v151 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v151 = v150;
        if (v151)
          v151 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v151);
        else
          v152 = 0;
        v153 = (uint64_t *)(v151 + 8 * v148);
        v154 = v151 + 8 * v152;
        *v153 = v57;
        v146 = v153 + 1;
        v156 = *(char **)(v164 + 48);
        v155 = *(char **)(v164 + 56);
        if (v155 == v156)
        {
          v158 = (_QWORD *)v164;
        }
        else
        {
          do
          {
            v157 = *((_QWORD *)v155 - 1);
            v155 -= 8;
            *--v153 = v157;
          }
          while (v155 != v156);
          v158 = (_QWORD *)v164;
          v155 = *(char **)(v164 + 48);
        }
        v158[6] = v153;
        v158[7] = v146;
        v158[8] = v154;
        if (v155)
          operator delete(v155);
LABEL_207:
        *(_QWORD *)(v164 + 56) = v146;
        return 1;
      }
LABEL_211:
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    }
LABEL_82:
    v72 = (uint64_t *)v56[7];
    v71 = v56[8];
    if ((unint64_t)v72 >= v71)
    {
      v74 = v56[6];
      v75 = ((uint64_t)v72 - v74) >> 3;
      if ((unint64_t)(v75 + 1) >> 61)
        goto LABEL_211;
      v76 = v71 - v74;
      v77 = v76 >> 2;
      if (v76 >> 2 <= (unint64_t)(v75 + 1))
        v77 = v75 + 1;
      if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
        v78 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v78 = v77;
      if (v78)
        v78 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v78);
      else
        v79 = 0;
      v80 = (uint64_t *)(v78 + 8 * v75);
      v81 = v78 + 8 * v79;
      *v80 = v57;
      v73 = v80 + 1;
      v83 = *(char **)(v164 + 48);
      v82 = *(char **)(v164 + 56);
      if (v82 == v83)
      {
        v85 = (_QWORD *)v164;
      }
      else
      {
        do
        {
          v84 = *((_QWORD *)v82 - 1);
          v82 -= 8;
          *--v80 = v84;
        }
        while (v82 != v83);
        v85 = (_QWORD *)v164;
        v82 = *(char **)(v164 + 48);
      }
      v85[6] = v80;
      v85[7] = v73;
      v85[8] = v81;
      if (v82)
        operator delete(v82);
    }
    else
    {
      *v72 = v57;
      v73 = v72 + 1;
    }
    *(_QWORD *)(v164 + 56) = v73;
    v86 = (_QWORD *)v164;
    v87 = *(uint64_t **)(v32 + 184);
    v88 = *v87;
    v89 = v87[1];
    v91 = v87[12];
    v90 = v87[13];
    if (v88 == v91 && v89 == v90)
      v32 = *(_QWORD *)(v32 + 176);
    v93 = 0;
    while (1)
    {
      while (1)
      {
        v94 = *(_QWORD **)(v32 + 184);
        if (*(_QWORD *)v32 == *v94
          && *(_QWORD *)(v32 + 8) == v94[1]
          && (*(_QWORD *)(v32 + 48) != *(_QWORD *)(v32 + 96) || *(_QWORD *)(v32 + 56) != *(_QWORD *)(v32 + 104)))
        {
          break;
        }
        v32 = *(_QWORD *)(v32 + 176);
      }
      if (*(double *)(v32 + 144) != -1.0e40)
      {
        v30.n128_u64[0] = v94[18];
        if (v30.n128_f64[0] != -1.0e40)
          goto LABEL_126;
      }
      v97 = v32;
      do
      {
        v98 = v97;
        v97 = *(_QWORD *)(v97 + 184);
      }
      while (*(double *)(v97 + 144) == -1.0e40);
      v30.n128_u64[0] = *(_QWORD *)(v98 + 144);
      v99 = v97;
      v32 = v98;
      if (v30.n128_f64[0] == -1.0e40)
      {
        v32 = v98;
        do
        {
          v32 = *(_QWORD *)(v32 + 176);
          v30.n128_u64[0] = *(_QWORD *)(v32 + 144);
        }
        while (v30.n128_f64[0] == -1.0e40);
        v99 = *(_QWORD *)(v32 + 184);
      }
      if (*(_QWORD *)(v32 + 104) != *(_QWORD *)(v99 + 8))
      {
        if (*(_QWORD *)v97 < *(_QWORD *)v32)
          v32 = v98;
LABEL_126:
        if (v32 == v93)
          return 1;
        if (!v93)
          v93 = v32;
        v100 = *(_QWORD *)(v32 + 8);
        v101 = *(double *)(v32 + 144);
        v102 = *(double *)(*(_QWORD *)(v32 + 184) + 144);
        if (v101 < v102)
          v103 = v32;
        else
          v103 = *(_QWORD *)(v32 + 184);
        if (v101 < v102)
          v104 = *(_QWORD *)(v32 + 184);
        else
          v104 = v32;
        if ((a4 & 1) != 0)
        {
          if (*(_QWORD *)(v104 + 176) == v103)
          {
            *(_DWORD *)(v104 + 160) = -1;
            v105 = 1;
          }
          else
          {
            *(_DWORD *)(v104 + 160) = 1;
            v105 = -1;
          }
        }
        else
        {
          v105 = 0;
          *(_DWORD *)(v104 + 160) = 0;
        }
        *(_DWORD *)(v103 + 160) = v105;
        v32 = ClipperLib::ClipperBase::ProcessBound(v86, (uint64_t *)v104, v101 >= v102, v30);
        if (*(_DWORD *)(v32 + 172) == -2)
          v32 = ClipperLib::ClipperBase::ProcessBound(v86, (uint64_t *)v32, v101 >= v102, v106);
        v107 = ClipperLib::ClipperBase::ProcessBound(v86, (uint64_t *)v103, v101 < v102, v106);
        if (*(_DWORD *)(v107 + 172) == -2)
          v107 = ClipperLib::ClipperBase::ProcessBound(v86, (uint64_t *)v107, v101 < v102, v30);
        if (*(_DWORD *)(v104 + 172) == -2)
        {
          v104 = 0;
        }
        else if (*(_DWORD *)(v103 + 172) == -2)
        {
          v103 = 0;
        }
        v109 = (_QWORD *)v86[3];
        v108 = v86[4];
        if ((unint64_t)v109 >= v108)
        {
          v111 = v86[2];
          v112 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v109 - v111) >> 3);
          v113 = v112 + 1;
          if (v112 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_209;
          v114 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v108 - v111) >> 3);
          if (2 * v114 > v113)
            v113 = 2 * v114;
          if (v114 >= 0x555555555555555)
            v115 = 0xAAAAAAAAAAAAAAALL;
          else
            v115 = v113;
          if (v115)
            v115 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<std::vector<ClipperLib::IntPoint>>>(v115);
          else
            v116 = 0;
          v117 = (_QWORD *)(v115 + 24 * v112);
          *v117 = v100;
          v117[1] = v104;
          v117[2] = v103;
          v119 = *(char **)(v164 + 16);
          v118 = *(char **)(v164 + 24);
          v120 = v117;
          if (v118 != v119)
          {
            do
            {
              v30 = *(__n128 *)(v118 - 24);
              *(v120 - 1) = *((_QWORD *)v118 - 1);
              *(__n128 *)(v120 - 3) = v30;
              v120 -= 3;
              v118 -= 24;
            }
            while (v118 != v119);
            v118 = *(char **)(v164 + 16);
          }
          v110 = v117 + 3;
          *(_QWORD *)(v164 + 16) = v120;
          *(_QWORD *)(v164 + 24) = v117 + 3;
          *(_QWORD *)(v164 + 32) = v115 + 24 * v116;
          if (v118)
            operator delete(v118);
        }
        else
        {
          *v109 = v100;
          v109[1] = v104;
          v110 = v109 + 3;
          v109[2] = v103;
        }
        *(_QWORD *)(v164 + 24) = v110;
        v86 = (_QWORD *)v164;
        if (v101 < v102)
          v32 = v107;
      }
    }
  }
LABEL_80:
  MEMORY[0x186DC23AC](v57, 0x1020C80638A78CFLL);
  return 0;
}

void sub_184A4164C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_184A41658(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x184A41660);
  __clang_call_terminate(a1);
}

BOOL ClipperLib::SlopesEqual(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unint64_t v13[2];
  unint64_t v14[2];

  if (a7)
  {
    ClipperLib::Int128Mul(v14, a2 - a4, a3 - a5);
    ClipperLib::Int128Mul(v13, a1 - a3, a4 - a6);
    return v14[1] == v13[1] && v14[0] == v13[0];
  }
  else
  {
    return (a3 - a5) * (a2 - a4) == (a4 - a6) * (a1 - a3);
  }
}

uint64_t ClipperLib::RangeTest(uint64_t result, uint64_t a2, _BYTE *a3)
{
  ClipperLib::clipperException *exception;

  if (!*a3)
  {
    if (result <= 0x3FFFFFFF && result >= -1073741823 && (unint64_t)(a2 - 0x40000000) >= 0xFFFFFFFF80000001)
      return result;
    *a3 = 1;
  }
  if (result > 0x3FFFFFFFFFFFFFFFLL
    || result < (uint64_t)0xC000000000000001
    || (unint64_t)(a2 - 0x4000000000000000) <= 0x8000000000000000)
  {
    exception = (ClipperLib::clipperException *)__cxa_allocate_exception(0x20uLL);
    ClipperLib::clipperException::clipperException(exception, "Coordinate outside allowed range");
  }
  return result;
}

void sub_184A417B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ClipperLib::Pt2IsBetweenPt1AndPt3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 == a5 && a2 == a6 || a1 == a3 && a2 == a4 || a5 == a3 && a6 == a4)
    return 0;
  if (a1 == a5)
    return (a4 <= a2) ^ (a4 < a6);
  return (a3 <= a1) ^ (a3 < a5);
}

uint64_t ClipperLib::ClipperBase::ProcessBound(_QWORD *a1, uint64_t *a2, int a3, __n128 a4)
{
  double *v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  double *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  double *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  char *v61;
  char *v62;
  __int128 v63;

  if (*((_DWORD *)a2 + 43) == -2)
  {
    v5 = (double *)a2;
    if ((a3 & 1) != 0)
    {
      do
      {
        v6 = v5;
        v7 = *((_QWORD *)v5 + 13);
        v5 = (double *)*((_QWORD *)v5 + 22);
      }
      while (v7 == *((_QWORD *)v5 + 1));
      if (v6 == (double *)a2)
        goto LABEL_27;
      a4.n128_u64[0] = 0xC83D6329F1C35CA5;
      while (v6[18] == -1.0e40)
      {
        v6 = (double *)*((_QWORD *)v6 + 23);
        if (v6 == (double *)a2)
          goto LABEL_27;
      }
    }
    else
    {
      do
      {
        v6 = v5;
        v8 = *((_QWORD *)v5 + 13);
        v5 = (double *)*((_QWORD *)v5 + 23);
      }
      while (v8 == *((_QWORD *)v5 + 1));
      if (v6 == (double *)a2)
        goto LABEL_27;
      a4.n128_u64[0] = 0xC83D6329F1C35CA5;
      while (v6[18] == -1.0e40)
      {
        v6 = (double *)*((_QWORD *)v6 + 22);
        if (v6 == (double *)a2)
          goto LABEL_27;
      }
    }
    if (v6 != (double *)a2)
    {
      v13 = 23;
      if (a3)
        v13 = 22;
      v14 = a2[v13];
      v15 = *(_QWORD *)(v14 + 8);
      *(_DWORD *)(v14 + 160) = 0;
      v16 = ClipperLib::ClipperBase::ProcessBound(a1, v14, a4);
      v18 = (_QWORD *)a1[3];
      v17 = a1[4];
      if ((unint64_t)v18 >= v17)
      {
        v53 = a1[2];
        v54 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v18 - v53) >> 3);
        v55 = v54 + 1;
        if (v54 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
        v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v53) >> 3);
        if (2 * v56 > v55)
          v55 = 2 * v56;
        if (v56 >= 0x555555555555555)
          v57 = 0xAAAAAAAAAAAAAAALL;
        else
          v57 = v55;
        if (v57)
          v57 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<std::vector<ClipperLib::IntPoint>>>(v57);
        else
          v58 = 0;
        v59 = (_QWORD *)(v57 + 24 * v54);
        v60 = v57 + 24 * v58;
        *v59 = v15;
        v59[1] = 0;
        v59[2] = v14;
        v19 = v59 + 3;
        v62 = (char *)a1[2];
        v61 = (char *)a1[3];
        if (v61 != v62)
        {
          do
          {
            v63 = *(_OWORD *)(v61 - 24);
            *(v59 - 1) = *((_QWORD *)v61 - 1);
            *(_OWORD *)(v59 - 3) = v63;
            v59 -= 3;
            v61 -= 24;
          }
          while (v61 != v62);
          v61 = (char *)a1[2];
        }
        a1[2] = v59;
        a1[3] = v19;
        a1[4] = v60;
        if (v61)
          operator delete(v61);
      }
      else
      {
        *v18 = v15;
        v18[1] = 0;
        v19 = v18 + 3;
        v18[2] = v14;
      }
      a1[3] = v19;
      return v16;
    }
LABEL_27:
    if (a3)
      return a2[22];
    else
      return a2[23];
  }
  if (*((double *)a2 + 18) == -1.0e40)
  {
    v9 = 22;
    if (a3)
      v9 = 23;
    v10 = (double *)a2[v9];
    v11 = *v10;
    v12 = *(double *)a2;
    if (v10[18] == -1.0e40)
    {
      if (*(_QWORD *)&v11 == *(_QWORD *)&v12 || *((_QWORD *)v10 + 12) == *(_QWORD *)&v12)
        goto LABEL_32;
      goto LABEL_31;
    }
    if (*(_QWORD *)&v11 != *(_QWORD *)&v12)
    {
LABEL_31:
      v20 = a2[12];
      *((double *)a2 + 12) = v12;
      *a2 = v20;
      v22 = *((_OWORD *)a2 + 7);
      v21 = *((_OWORD *)a2 + 8);
      v23 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a2 + 7) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a2 + 8) = v23;
      *((_OWORD *)a2 + 1) = v22;
      *((_OWORD *)a2 + 2) = v21;
    }
  }
LABEL_32:
  v24 = a2;
  if ((a3 & 1) != 0)
  {
    do
    {
      v25 = v24;
      v26 = v24[13];
      v24 = (uint64_t *)v24[22];
    }
    while (v26 == v24[1] && *((_DWORD *)v24 + 43) != -2);
    if (*((double *)v25 + 18) == -1.0e40 && *((_DWORD *)v24 + 43) != -2)
    {
      v27 = (double *)v25;
      do
        v27 = (double *)*((_QWORD *)v27 + 23);
      while (v27[18] == -1.0e40);
      if (*((_QWORD *)v27 + 12) > v24[12])
        v25 = (uint64_t *)v27;
    }
    if (v25 != a2)
    {
      v28 = a2;
      do
      {
        v29 = (uint64_t *)v28[22];
        v28[24] = (uint64_t)v29;
        if (v28 != a2 && *((double *)v28 + 18) == -1.0e40 && *v28 != *(_QWORD *)(v28[23] + 96))
        {
          v30 = v28[12];
          v28[12] = *v28;
          *v28 = v30;
          v32 = *((_OWORD *)v28 + 7);
          v31 = *((_OWORD *)v28 + 8);
          v33 = *((_OWORD *)v28 + 2);
          *((_OWORD *)v28 + 7) = *((_OWORD *)v28 + 1);
          *((_OWORD *)v28 + 8) = v33;
          *((_OWORD *)v28 + 1) = v32;
          *((_OWORD *)v28 + 2) = v31;
        }
        v28 = v29;
      }
      while (v29 != v25);
      if (*((double *)v25 + 18) == -1.0e40 && *v25 != *(_QWORD *)(v25[23] + 96))
      {
        v34 = v25[12];
        v25[12] = *v25;
        *v25 = v34;
        v36 = *((_OWORD *)v25 + 7);
        v35 = *((_OWORD *)v25 + 8);
        v37 = *((_OWORD *)v25 + 2);
        *((_OWORD *)v25 + 7) = *((_OWORD *)v25 + 1);
        *((_OWORD *)v25 + 8) = v37;
        *((_OWORD *)v25 + 1) = v36;
        *((_OWORD *)v25 + 2) = v35;
      }
    }
    v38 = v25 + 22;
  }
  else
  {
    do
    {
      v39 = v24;
      v40 = v24[13];
      v24 = (uint64_t *)v24[23];
    }
    while (v40 == v24[1] && *((_DWORD *)v24 + 43) != -2);
    if (*((double *)v39 + 18) == -1.0e40 && *((_DWORD *)v24 + 43) != -2)
    {
      v41 = (double *)v39;
      do
        v41 = (double *)*((_QWORD *)v41 + 22);
      while (v41[18] == -1.0e40);
      if (*((_QWORD *)v41 + 12) >= v24[12])
        v39 = (uint64_t *)v41;
    }
    if (v39 != a2)
    {
      v42 = a2;
      do
      {
        v43 = (uint64_t *)v42[23];
        v42[24] = (uint64_t)v43;
        if (v42 != a2 && *((double *)v42 + 18) == -1.0e40 && *v42 != *(_QWORD *)(v42[22] + 96))
        {
          v44 = v42[12];
          v42[12] = *v42;
          *v42 = v44;
          v46 = *((_OWORD *)v42 + 7);
          v45 = *((_OWORD *)v42 + 8);
          v47 = *((_OWORD *)v42 + 2);
          *((_OWORD *)v42 + 7) = *((_OWORD *)v42 + 1);
          *((_OWORD *)v42 + 8) = v47;
          *((_OWORD *)v42 + 1) = v46;
          *((_OWORD *)v42 + 2) = v45;
        }
        v42 = v43;
      }
      while (v43 != v39);
      if (*((double *)v39 + 18) == -1.0e40 && *v39 != *(_QWORD *)(v39[22] + 96))
      {
        v48 = v39[12];
        v39[12] = *v39;
        *v39 = v48;
        v50 = *((_OWORD *)v39 + 7);
        v49 = *((_OWORD *)v39 + 8);
        v51 = *((_OWORD *)v39 + 2);
        *((_OWORD *)v39 + 7) = *((_OWORD *)v39 + 1);
        *((_OWORD *)v39 + 8) = v51;
        *((_OWORD *)v39 + 1) = v50;
        *((_OWORD *)v39 + 2) = v49;
      }
    }
    v38 = v39 + 23;
  }
  return *v38;
}

void std::vector<ClipperLib::IntPoint>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;

  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) < a2)
  {
    v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 48;
    v4 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<ClipperLib::IntPoint>>(a2);
    v5 = &v4[48 * v3];
    v7 = &v4[48 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        v11 = *((_OWORD *)v8 - 3);
        v12 = *((_OWORD *)v8 - 1);
        *((_OWORD *)v10 - 2) = *((_OWORD *)v8 - 2);
        *((_OWORD *)v10 - 1) = v12;
        *((_OWORD *)v10 - 3) = v11;
        v10 -= 48;
        v8 -= 48;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void ClipperLib::ClipperBase::~ClipperBase(ClipperLib::ClipperBase *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1E1628C70;
  ClipperLib::ClipperBase::Clear(this);
  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
  {
    *((_QWORD *)this + 15) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 7) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
  {
    *((_QWORD *)this + 3) = v5;
    operator delete(v5);
  }
}

{
  ClipperLib::ClipperBase::~ClipperBase(this);
  JUMPOUT(0x186DC23C4);
}

_QWORD *ClipperLib::ClipperBase::Clear(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = this;
  v2 = this[2];
  this[3] = v2;
  this[1] = v2;
  v4 = this[6];
  v3 = this[7];
  if (v3 == v4)
  {
    v4 = this[7];
  }
  else
  {
    v5 = 0;
    do
    {
      this = *(_QWORD **)(v4 + 8 * v5);
      if (this)
      {
        this = (_QWORD *)MEMORY[0x186DC23AC](this, 0x1020C80638A78CFLL);
        v4 = v1[6];
        v3 = v1[7];
      }
      ++v5;
    }
    while (v5 < (v3 - v4) >> 3);
  }
  v1[7] = v4;
  *((_BYTE *)v1 + 40) = 0;
  *((_BYTE *)v1 + 73) = 0;
  return this;
}

uint64_t ClipperLib::ClipperBase::DisposeAllOutRecs(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = this;
  v2 = *(_QWORD *)(this + 80);
  v3 = *(_QWORD *)(this + 88);
  if (v3 == v2)
  {
    v2 = *(_QWORD *)(this + 88);
LABEL_10:
    *(_QWORD *)(v1 + 88) = v2;
  }
  else
  {
    v4 = 0;
    while (v4 < (v3 - v2) >> 3)
    {
      v5 = *(_QWORD *)(v2 + 8 * v4);
      if (*(_QWORD *)(v5 + 24))
        ClipperLib::DisposeOutPts((_QWORD *)(v5 + 24));
      this = MEMORY[0x186DC23C4](v5, 0x1020C401FC46325);
      v6 = *(_QWORD *)(v1 + 80);
      if (v4 >= (*(_QWORD *)(v1 + 88) - v6) >> 3)
        break;
      *(_QWORD *)(v6 + 8 * v4++) = 0;
      v2 = *(_QWORD *)(v1 + 80);
      v3 = *(_QWORD *)(v1 + 88);
      if (v4 >= (v3 - v2) >> 3)
        goto LABEL_10;
    }
    __break(1u);
  }
  return this;
}

double transform_for_bounds(CGRect a1, uint64_t a2)
{
  CGFloat x;
  double y;
  CGFloat width;
  double height;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double result;
  CGRect v14;
  CGRect v15;
  CGRect v16;
  CGRect v17;
  CGRect v18;

  v14 = CGRectIntegral(a1);
  x = v14.origin.x;
  y = v14.origin.y;
  width = v14.size.width;
  height = v14.size.height;
  if (v14.size.width < 0.0 || v14.size.height < 0.0)
  {
    v15 = CGRectStandardize(v14);
    v9 = v15.size.width;
    v15.origin.x = x;
    v15.origin.y = y;
    v15.size.width = width;
    v15.size.height = height;
    v16 = CGRectStandardize(v15);
    v10 = v16.size.height;
    v16.origin.x = x;
    v16.origin.y = y;
    v16.size.width = width;
    v16.size.height = height;
    v17 = CGRectStandardize(v16);
    v8 = v17.origin.x;
    v7 = v17.size.width;
    v17.origin.x = x;
    v17.origin.y = y;
    v17.size.width = width;
    v17.size.height = height;
    v18 = CGRectStandardize(v17);
    y = v18.origin.y;
    height = v18.size.height;
  }
  else
  {
    v7 = v14.size.width;
    v8 = v14.origin.x;
    v9 = v14.size.width;
    v10 = v14.size.height;
  }
  v11 = fabs(v10);
  v12 = fabs(v9);
  if (v12 <= v11)
    v12 = v11;
  *(double *)a2 = 1063256060.0 / v12;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  result = -(1063256060.0 / v12 * (y + height * 0.5));
  *(double *)(a2 + 24) = 1063256060.0 / v12;
  *(double *)(a2 + 32) = -(1063256060.0 / v12 * (v8 + v7 * 0.5));
  *(double *)(a2 + 40) = result;
  return result;
}

uint64_t *__color_space_state_create_extended_srgb_block_invoke_2()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncSRGBProfile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  color_space_state_create_extended_srgb_s = v1;
  return result;
}

uint64_t (*__create_from_profile_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCopyData");
  v1 = colorsync_smart_null_1622;
  if (result)
    v1 = result;
  create_from_profile_f = (uint64_t (*)(_QWORD, _QWORD))v1;
  return result;
}

uint64_t (*__color_space_state_create_sRGB_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  v1 = colorsync_smart_null_1622;
  if (result)
    v1 = result;
  color_space_state_create_sRGB_f = v1;
  return result;
}

void __create_default_transform_block_invoke()
{
  CGColorSpace *v0;

  v0 = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceGenericGrayGamma2_2"));
  create_default_transform_transform = color_transform_create(v0, 0);
  CGColorSpaceRelease(v0);
}

CFPropertyListRef CGColorSpaceCopyPropertyList(CGColorSpaceRef space)
{
  CFDataRef v2;
  const void *v4;
  const __CFData *v5;
  CFDataRef v6;
  const __CFString *v7;
  CFPropertyListRef v8;
  void *v9;
  uint64_t v10;
  CGColorSpace *v11;
  CFIndex v12;
  const __CFNumber *v13;
  CFDictionaryRef v14;
  CFPropertyListRef v15;
  uint64_t v16;
  char v17;
  CFNumberRef v18;
  CFDataRef v19;
  char valuePtr;
  void *values;
  CFNumberRef v22;
  CFDataRef v23;
  void *keys[2];
  const __CFString *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if ((CGColorSpaceGetType(space) & 0xFFFFFFFE) == 8)
    return 0;
  if (!space)
  {
    v2 = CGColorSpaceCopyICCData(0);
    if (v2 || CGColorSpaceGetType(0) != 7)
      return v2;
    v8 = CGColorSpaceCopyPropertyList(0);
    if (!v8)
      return 0;
    v9 = (void *)v8;
LABEL_33:
    v17 = -1;
    goto LABEL_34;
  }
  v4 = *(const void **)(*((_QWORD *)space + 3) + 72);
  if (v4)
  {
    v5 = (const __CFData *)CFRetain(v4);
    if (v5)
    {
      v2 = v5;
      if (CFEqual(v5, CFSTR("kCGColorSpaceDeviceGray")))
        return CFSTR("kCGColorSpaceGenericGrayGamma2_2");
      if (CFEqual(v2, CFSTR("kCGColorSpaceDeviceRGB")))
        return CFSTR("kCGColorSpaceSRGB");
      if (CFEqual(v2, CFSTR("kCGColorSpaceDeviceCMYK")))
        return CFSTR("kCGColorSpaceGenericCMYK");
      return v2;
    }
  }
  v6 = CGColorSpaceCopyICCData(space);
  if (v6)
  {
    v2 = v6;
    if (!*(_BYTE *)(*((_QWORD *)space + 3) + 13))
      return v2;
    if (CGColorSpaceGetType(space) == 6 && *(_BYTE *)(*((_QWORD *)space + 3) + 19))
    {
      v7 = CFSTR("kCGColorSpaceDisplayReferredDerivative");
    }
    else
    {
      if (CGColorSpaceGetType(space) != 6 || !*(_BYTE *)(*((_QWORD *)space + 3) + 18))
      {
        v7 = 0;
        v12 = 2;
        goto LABEL_28;
      }
      v7 = CFSTR("kCGColorSpaceSceneReferredDerivative");
    }
    v12 = 3;
LABEL_28:
    keys[0] = CFSTR("kCGColorSpaceICCData");
    keys[1] = CFSTR("kCGColorSpaceExtendedRange");
    v25 = v7;
    v13 = (const __CFNumber *)*MEMORY[0x1E0C9AE50];
    values = v2;
    v22 = v13;
    v23 = v13;
    v14 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, v12, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFRelease(v2);
    return v14;
  }
  if (CGColorSpaceGetType(space) != 7)
    return 0;
  v10 = *((_QWORD *)space + 3);
  v11 = (*(_DWORD *)(v10 + 24) - 5) > 1 ? 0 : **(CGColorSpace ***)(v10 + 88);
  v15 = CGColorSpaceCopyPropertyList(v11);
  if (!v15)
    return 0;
  v9 = (void *)v15;
  v16 = *((_QWORD *)space + 3);
  if (*(_DWORD *)(v16 + 24) != 5)
    goto LABEL_33;
  v17 = *(_BYTE *)(*(_QWORD *)(v16 + 88) + 8);
LABEL_34:
  valuePtr = v17;
  v18 = CFNumberCreate(0, kCFNumberSInt8Type, &valuePtr);
  v19 = CGColorSpaceCopyColorTable((uint64_t)space);
  *(_OWORD *)keys = xmmword_1E1662808;
  v25 = CFSTR("kCGIndexedColorTableKey");
  values = v9;
  v22 = v18;
  v23 = v19;
  v2 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v18)
    CFRelease(v18);
  if (v19)
    CFRelease(v19);
  CFRelease(v9);
  return v2;
}

CFDataRef CGColorSpaceCopyICCData(CGColorSpaceRef space)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFData *v8;
  uint64_t v9;
  const void *ProfileForCalGray;
  uint64_t v12;
  _BYTE v13[144];

  v8 = 0;
  if (space)
  {
    v9 = *((_QWORD *)space + 3);
    switch(*(_DWORD *)(v9 + 20))
    {
      case 3:
        CGColorSpaceGetCalibratedGrayData((uint64_t)space, v5, v6, v7, (uint64_t)v13);
        ProfileForCalGray = (const void *)CGCMSUtilsCreateProfileForCalGray((uint64_t)v13);
        if (CGCMSUtilsCreateDataForCalGray_cglibrarypredicate != -1)
          dispatch_once(&CGCMSUtilsCreateDataForCalGray_cglibrarypredicate, &__block_literal_global_114);
        v12 = ((uint64_t (*)(const void *, _QWORD))CGCMSUtilsCreateDataForCalGray_f)(ProfileForCalGray, 0);
        goto LABEL_13;
      case 4:
        CGColorSpaceGetCalibratedRGBData((uint64_t)space, v5, v6, v7, (uint64_t)v13);
        ProfileForCalGray = (const void *)CGCMSUtilsCreateProfileForCalRGB((uint64_t)v13);
        if (CGCMSUtilsCreateDataForCalRGB_cglibrarypredicate[0] != -1)
          dispatch_once(CGCMSUtilsCreateDataForCalRGB_cglibrarypredicate, &__block_literal_global_106);
        v12 = ((uint64_t (*)(const void *, _QWORD))CGCMSUtilsCreateDataForCalRGB_f)(ProfileForCalGray, 0);
        goto LABEL_13;
      case 5:
        ProfileForCalGray = (const void *)CGCMSUtilsCreateProfileForCalLab(*(char **)(v9 + 88), *(_QWORD *)(v9 + 88) + 24);
        if (CGCMSUtilsCreateDataForCalLab_cglibrarypredicate != -1)
          dispatch_once(&CGCMSUtilsCreateDataForCalLab_cglibrarypredicate, &__block_literal_global_120);
        v12 = ((uint64_t (*)(const void *, _QWORD))CGCMSUtilsCreateDataForCalLab_f)(ProfileForCalGray, 0);
LABEL_13:
        v8 = (const __CFData *)v12;
        if (ProfileForCalGray)
          CFRelease(ProfileForCalGray);
        return v8;
      case 6:
      case 0xA:
      case 0xB:
        return CGColorSpaceICCCopyData((uint64_t)space, v1, v2, v3, v4, v5, v6, v7);
      default:
        return v8;
    }
  }
  return v8;
}

__n128 CGColorSpaceGetCalibratedRGBData@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;

  v5 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(v5 + 20) != 4)
    _CGHandleAssert("CGColorSpaceGetCalibratedRGBData", 161, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpace_CalRGB.c", "space->state->type == kCGColorSpaceCalibratedRGB", "Colorspace %p not RGB based. Type = %d", a2, a3, a4, a1);
  v6 = *(_QWORD *)(v5 + 88);
  v7 = *(_OWORD *)(v6 + 112);
  *(_OWORD *)(a5 + 96) = *(_OWORD *)(v6 + 96);
  *(_OWORD *)(a5 + 112) = v7;
  *(_OWORD *)(a5 + 128) = *(_OWORD *)(v6 + 128);
  v8 = *(_OWORD *)(v6 + 48);
  *(_OWORD *)(a5 + 32) = *(_OWORD *)(v6 + 32);
  *(_OWORD *)(a5 + 48) = v8;
  v9 = *(_OWORD *)(v6 + 80);
  *(_OWORD *)(a5 + 64) = *(_OWORD *)(v6 + 64);
  *(_OWORD *)(a5 + 80) = v9;
  result = *(__n128 *)(v6 + 16);
  *(_OWORD *)a5 = *(_OWORD *)v6;
  *(__n128 *)(a5 + 16) = result;
  return result;
}

uint64_t CGCMSUtilsCreateProfileForCalRGB(uint64_t a1)
{
  float v1;
  float32x2_t v2;
  float v3;
  float32x4_t v4;
  float v5;
  const __CFAllocator *v6;
  uint64_t i;
  const void *v8;
  uint64_t j;
  const void *v10;
  uint64_t k;
  const void *v12;
  uint64_t m;
  const void *v14;
  CFArrayRef v15;
  uint64_t n;
  const void *v17;
  CFArrayRef v18;
  uint64_t ii;
  const void *v20;
  uint64_t v21;
  const CFArrayCallBacks *v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  CFDictionaryRef v27;
  uint64_t jj;
  const void *v29;
  uint64_t ProfileForCalRGB_f;
  CFArrayRef v32;
  CFArrayRef v33;
  CFArrayRef v34;
  CFArrayRef v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  void *v44[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  void *values;
  CFNumberRef v51;
  CFNumberRef v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  void *keys[2];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  const __CFString *v64;
  float32x4_t v65;
  float32x4_t v66;
  float v67[4];
  __int128 v68;
  uint64_t v69;
  float32x2_t v70;
  float v71;
  float32x2_t valuePtr;
  float v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  valuePtr = vcvt_f32_f64(*(float64x2_t *)a1);
  v1 = *(double *)(a1 + 16);
  v73 = v1;
  v2 = vcvt_f32_f64(*(float64x2_t *)(a1 + 24));
  v3 = *(double *)(a1 + 40);
  v71 = v3;
  v68 = *(_OWORD *)(a1 + 48);
  v69 = *(_QWORD *)(a1 + 64);
  v70 = v2;
  v4 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a1 + 104)), *(float64x2_t *)(a1 + 120));
  v65 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a1 + 72)), *(float64x2_t *)(a1 + 88));
  v66 = v4;
  v5 = *(double *)(a1 + 136);
  v67[0] = v5;
  v62 = xmmword_1E1631058;
  v63 = *(_OWORD *)off_1E1631068;
  v64 = CFSTR("Date");
  *(_OWORD *)keys = xmmword_1E1631018;
  v59 = *(_OWORD *)&off_1E1631028;
  v60 = xmmword_1E1631038;
  v61 = *(_OWORD *)&off_1E1631048;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  values = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  v51 = CFNumberCreate(0, kCFNumberFloatType, (char *)&valuePtr + 4);
  v52 = CFNumberCreate(0, kCFNumberFloatType, &v73);
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v35 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 3, MEMORY[0x1E0C9B378]);
  for (i = 0; i != 24; i += 8)
  {
    v8 = *(void **)((char *)&values + i);
    if (v8)
      CFRelease(v8);
  }
  values = CFNumberCreate(0, kCFNumberFloatType, &v70);
  v51 = CFNumberCreate(0, kCFNumberFloatType, (char *)&v70 + 4);
  v52 = CFNumberCreate(0, kCFNumberFloatType, &v71);
  v34 = CFArrayCreate(v6, (const void **)&values, 3, MEMORY[0x1E0C9B378]);
  for (j = 0; j != 24; j += 8)
  {
    v10 = *(void **)((char *)&values + j);
    if (v10)
      CFRelease(v10);
  }
  values = CFNumberCreate(0, kCFNumberFloatType, &v65);
  v51 = CFNumberCreate(0, kCFNumberFloatType, &v65.i32[1]);
  v52 = CFNumberCreate(0, kCFNumberFloatType, &v65.u32[2]);
  v33 = CFArrayCreate(v6, (const void **)&values, 3, MEMORY[0x1E0C9B378]);
  for (k = 0; k != 24; k += 8)
  {
    v12 = *(void **)((char *)&values + k);
    if (v12)
      CFRelease(v12);
  }
  values = CFNumberCreate(0, kCFNumberFloatType, (const void *)((unint64_t)&v65 | 0xC));
  v51 = CFNumberCreate(0, kCFNumberFloatType, &v66);
  v52 = CFNumberCreate(0, kCFNumberFloatType, &v66.i32[1]);
  v32 = CFArrayCreate(v6, (const void **)&values, 3, MEMORY[0x1E0C9B378]);
  for (m = 0; m != 24; m += 8)
  {
    v14 = *(void **)((char *)&values + m);
    if (v14)
      CFRelease(v14);
  }
  values = CFNumberCreate(0, kCFNumberFloatType, &v66.u32[2]);
  v51 = CFNumberCreate(0, kCFNumberFloatType, (char *)&v66.u64[1] + 4);
  v52 = CFNumberCreate(0, kCFNumberFloatType, v67);
  v15 = CFArrayCreate(v6, (const void **)&values, 3, MEMORY[0x1E0C9B378]);
  for (n = 0; n != 24; n += 8)
  {
    v17 = *(void **)((char *)&values + n);
    if (v17)
      CFRelease(v17);
  }
  values = CFNumberCreate(0, kCFNumberSInt16Type, &CGCMSUtilsCreateProfileForCalRGB_iccDate);
  v51 = CFNumberCreate(0, kCFNumberSInt16Type, &unk_184F0C712);
  v52 = CFNumberCreate(0, kCFNumberSInt16Type, &unk_184F0C714);
  *(_QWORD *)&v53 = CFNumberCreate(0, kCFNumberSInt16Type, &unk_184F0C716);
  *((_QWORD *)&v53 + 1) = CFNumberCreate(0, kCFNumberSInt16Type, &unk_184F0C718);
  *(_QWORD *)&v54 = CFNumberCreate(0, kCFNumberSInt16Type, &unk_184F0C71A);
  v18 = CFArrayCreate(v6, (const void **)&values, 6, MEMORY[0x1E0C9B378]);
  for (ii = 0; ii != 48; ii += 8)
  {
    v20 = *(void **)((char *)&values + ii);
    if (v20)
      CFRelease(v20);
  }
  v21 = 0;
  v48 = 0uLL;
  v49 = 0;
  v22 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  do
  {
    v23 = *((_QWORD *)&v68 + v21);
    v43 = 0;
    v42 = v23;
    v40 = 0;
    v41 = 0;
    v38 = 0;
    v39 = 0;
    v36 = 0;
    v37 = 0;
    v46 = 0u;
    v47 = 0u;
    *(_OWORD *)v44 = 0u;
    v45 = 0u;
    v44[0] = CFNumberCreate(0, kCFNumberSInt16Type, &v43);
    v44[1] = CFNumberCreate(0, kCFNumberDoubleType, &v42);
    *(_QWORD *)&v45 = CFNumberCreate(0, kCFNumberDoubleType, &v41);
    *((_QWORD *)&v45 + 1) = CFNumberCreate(0, kCFNumberDoubleType, &v40);
    *(_QWORD *)&v46 = CFNumberCreate(0, kCFNumberDoubleType, &v39);
    *((_QWORD *)&v46 + 1) = CFNumberCreate(0, kCFNumberDoubleType, &v38);
    *(_QWORD *)&v47 = CFNumberCreate(0, kCFNumberDoubleType, &v37);
    *((_QWORD *)&v47 + 1) = CFNumberCreate(0, kCFNumberDoubleType, &v36);
    v24 = 0;
    *((_QWORD *)&v48 + v21) = CFArrayCreate(0, (const void **)v44, 8, v22);
    do
    {
      v25 = v44[v24];
      if (v25)
        CFRelease(v25);
      ++v24;
    }
    while (v24 != 8);
    ++v21;
  }
  while (v21 != 3);
  values = v35;
  v51 = v34;
  v52 = v33;
  *(_QWORD *)&v53 = v32;
  v54 = v48;
  *((_QWORD *)&v53 + 1) = v15;
  *(_QWORD *)&v55 = v49;
  *((_QWORD *)&v55 + 1) = CFSTR("CG Cal RGB");
  *(_QWORD *)&v56 = CFSTR("calRGB");
  v26 = *MEMORY[0x1E0C9AE50];
  *((_QWORD *)&v56 + 1) = CFSTR("4.0");
  *(_QWORD *)&v57 = v26;
  *((_QWORD *)&v57 + 1) = v18;
  v27 = CFDictionaryCreate(v6, (const void **)keys, (const void **)&values, 13, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  for (jj = 0; jj != 64; jj += 8)
  {
    v29 = *(void **)((char *)&values + jj);
    if (v29)
      CFRelease(v29);
  }
  if (v18)
    CFRelease(v18);
  if (CGCMSUtilsCreateProfileForCalRGB_cglibrarypredicate != -1)
    dispatch_once(&CGCMSUtilsCreateProfileForCalRGB_cglibrarypredicate, &__block_literal_global_104);
  ProfileForCalRGB_f = CGCMSUtilsCreateProfileForCalRGB_f(v27);
  if (v27)
    CFRelease(v27);
  return ProfileForCalRGB_f;
}

CFDataRef CGColorSpaceICCCopyData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t FlexGTCProfile;
  CGDataProvider *v12;

  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 20);
  if (v9 == 6)
  {
    v12 = *(CGDataProvider **)(*(_QWORD *)(v8 + 88) + 8);
    return CGDataProviderCopyData(v12);
  }
  if (v9 == 10)
  {
    v12 = **(CGDataProvider ***)(v8 + 88);
    return CGDataProviderCopyData(v12);
  }
  if (v9 != 11)
    _CGHandleAssert("CGColorSpaceICCCopyData", 590, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpace_ICC.c", "s->state->type == kCGColorSpaceICCBased || s->state->type == kCGColorSpaceProfileSets || s->state->type == kCGColorSpaceFlexGTCProxy", "Colorspace not ICC. type = %d", a6, a7, a8, *(_DWORD *)(v8 + 20));
  FlexGTCProfile = CGColorSpaceFlexGTCProxyGetFlexGTCProfile(a1);
  if (CGColorSpaceICCCopyData_cglibrarypredicate != -1)
    dispatch_once(&CGColorSpaceICCCopyData_cglibrarypredicate, &__block_literal_global_35_6826);
  return (CFDataRef)CGColorSpaceICCCopyData_f(FlexGTCProfile, 0);
}

uint64_t pattern_notification_center_create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = CGNotificationCenterCreate(a1, a2, a3, a4, a5, a6, a7, a8);
  pattern_notification_center = result;
  return result;
}

uint64_t __get_notification_center_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = CGNotificationCenterCreate(a1, a2, a3, a4, a5, a6, a7, a8);
  get_notification_center_image_notification_center = result;
  return result;
}

uint64_t CGNotificationCenterCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t Instance;

  if (_block_invoke_once != -1)
    dispatch_once(&_block_invoke_once, &__block_literal_global_7_694);
  Instance = CGTypeCreateInstance(CGNotificationCenterGetTypeID_notification_center_type_id, 72, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(Instance + 80) = 0;
  pthread_mutex_init((pthread_mutex_t *)(Instance + 16), 0);
  return Instance;
}

uint64_t *__color_space_state_create_generic_gray_gamma_22_block_invoke_2()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncGenericGrayGamma22Profile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  color_space_state_create_generic_gray_gamma_22_s = v1;
  return result;
}

uint64_t (*__color_space_state_create_extended_srgb_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  v1 = colorsync_smart_null_1622;
  if (result)
    v1 = result;
  color_space_state_create_extended_srgb_f = v1;
  return result;
}

void release_image(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t (*__color_space_state_create_generic_gray_gamma_22_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  v1 = colorsync_smart_null_1622;
  if (result)
    v1 = result;
  color_space_state_create_generic_gray_gamma_22_f = v1;
  return result;
}

void CGPDFContentStreamFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[4];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[5];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[3];
  if (v4)
    CFRelease(v4);
}

CGColorSpaceRef CGColorSpaceCreateWithPlatformColorSpace(const void *ref)
{
  return create_colorspace_with_ColorSync_profile(ref, 0);
}

void CGContextSetShouldSubpixelQuantizeFonts(CGContextRef c, BOOL shouldSubpixelQuantizeFonts)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGContextRef v8;

  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      CGGStateSetShouldSubpixelQuantizeFonts(*((_QWORD *)c + 12), shouldSubpixelQuantizeFonts);
      return;
    }
    v8 = c;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetShouldSubpixelQuantizeFonts", (uint64_t)v8, v2, v3, v4, v5, v6, v7);
}

void CGContextSetShouldAntialiasFonts(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108)
    {
      CGGStateSetShouldAntialiasFonts(*(_QWORD *)(a1 + 96), a2);
      return;
    }
    v8 = a1;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetShouldAntialiasFonts", v8, a3, a4, a5, a6, a7, a8);
}

uint64_t __initialize_font_database_once_block_invoke()
{
  pthread_mutexattr_t v1;
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  v1.__sig = 0;
  *(_QWORD *)v1.__opaque = 0;
  pthread_mutexattr_init(&v1);
  pthread_mutexattr_settype(&v1, 2);
  pthread_mutex_init(&initialize_font_database_once_mutex, &v1);
  return pthread_mutexattr_destroy(&v1);
}

CGInterpolationQuality CGContextGetInterpolationQuality(CGContextRef c)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (c && *((_DWORD *)c + 4) == 1129601108)
    return *(char *)(*(_QWORD *)(*((_QWORD *)c + 12) + 120) + 4);
  handle_invalid_context((char)"CGContextGetInterpolationQuality", (uint64_t)c, v1, v2, v3, v4, v5, v6);
  return 0;
}

CGColorSpaceRef CGColorSpaceCreateWithPropertyList(CFPropertyListRef plist)
{
  CGColorSpace *Extended;
  CFTypeID v2;
  CFTypeID v4;
  CFTypeID v5;
  const void *Value;
  uint64_t *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFNumber *v16;
  const __CFNumber *v17;
  CFTypeID v18;
  const void *v19;
  const void *v20;
  const __CFData *v21;
  const __CFData *v22;
  CFTypeID v23;
  unint64_t Length;
  CGColorSpaceRef v25;
  size_t v26;
  CGColorSpace *v27;
  unsigned int *icc_derivative_with_state;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  const unsigned __int8 *BytePtr;
  const unsigned __int8 *v39;
  unsigned __int8 valuePtr;

  Extended = (CGColorSpace *)plist;
  if (!plist)
    return Extended;
  v2 = CFGetTypeID(plist);
  if (v2 != CFStringGetTypeID())
  {
    v4 = CFGetTypeID(Extended);
    if (v4 == CFDataGetTypeID())
      return (CGColorSpaceRef)CGColorSpaceFromICCDataCacheGetRetained(Extended);
    v5 = CFGetTypeID(Extended);
    if (v5 == CFDictionaryGetTypeID())
    {
      if (CFDictionaryContainsKey(Extended, CFSTR("kCGColorSpaceExtendedRange")) == 1)
      {
        Value = CFDictionaryGetValue(Extended, CFSTR("kCGColorSpaceICCData"));
        if (Value)
        {
          v7 = (uint64_t *)CGColorSpaceCreateWithPropertyList(Value);
          v8 = CFDictionaryGetValue(Extended, CFSTR("kCGColorSpaceDisplayReferredDerivative"));
          v9 = (const void *)*MEMORY[0x1E0C9AE50];
          v10 = CFDictionaryGetValue(Extended, CFSTR("kCGColorSpaceSceneReferredDerivative"));
          if (v8 == v9 || v10 == v9)
          {
            icc_derivative_with_state = (unsigned int *)color_space_state_create_icc_derivative_with_state(v7[3], v10 == v9, v8 == v9, v11, v12, v13, v14, v15);
            Extended = (CGColorSpace *)CGColorSpaceCreateWithState(icc_derivative_with_state, v29, v30, v31, v32, v33, v34, v35);
            if (icc_derivative_with_state)
            {
              do
              {
                v36 = __ldxr(icc_derivative_with_state);
                v37 = v36 - 1;
              }
              while (__stxr(v37, icc_derivative_with_state));
              if (!v37)
                color_space_state_dealloc((uint64_t)icc_derivative_with_state);
            }
            if (Extended)
              *((_QWORD *)Extended + 3) = color_space_state_register(*((_BYTE **)Extended + 3));
          }
          else
          {
            if (CFDictionaryGetValue(Extended, CFSTR("kCGColorSpaceExtendedRange")) != v9)
              return (CGColorSpaceRef)v7;
            Extended = CGColorSpaceCreateExtended((CGColorSpaceRef)v7);
          }
          CGColorSpaceRelease((CGColorSpaceRef)v7);
          return Extended;
        }
      }
      else
      {
        v16 = (const __CFNumber *)CFDictionaryGetValue(Extended, CFSTR("kCGLastIndexKey"));
        if (v16)
        {
          v17 = v16;
          v18 = CFGetTypeID(v16);
          if (v18 == CFNumberGetTypeID())
          {
            valuePtr = 0;
            if (CFNumberGetValue(v17, kCFNumberSInt8Type, &valuePtr) == 1)
            {
              v19 = CFDictionaryGetValue(Extended, CFSTR("kCGIndexedBaseColorSpaceKey"));
              if (v19)
              {
                v20 = v19;
                v21 = (const __CFData *)CFDictionaryGetValue(Extended, CFSTR("kCGIndexedColorTableKey"));
                if (v21)
                {
                  v22 = v21;
                  v23 = CFGetTypeID(v21);
                  if (v23 == CFDataGetTypeID())
                  {
                    Length = CFDataGetLength(v22);
                    v25 = CGColorSpaceCreateWithPropertyList(v20);
                    v26 = valuePtr;
                    if (!v25)
                    {
                      BytePtr = CFDataGetBytePtr(v22);
                      return CGColorSpaceCreateIndexed(0, v26, BytePtr);
                    }
                    v27 = v25;
                    if (Length >= *(_QWORD *)(*((_QWORD *)v25 + 3) + 40)
                                 + *(_QWORD *)(*((_QWORD *)v25 + 3) + 40) * (unint64_t)valuePtr)
                    {
                      v39 = CFDataGetBytePtr(v22);
                      Extended = CGColorSpaceCreateIndexed(v27, v26, v39);
                      CFRelease(v27);
                      return Extended;
                    }
                    CFRelease(v25);
                  }
                }
              }
            }
          }
        }
      }
    }
    return 0;
  }
  if (CFEqual(Extended, CFSTR("kCGColorSpaceDeviceGray")))
    return CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceGenericGrayGamma2_2"));
  if (CFEqual(Extended, CFSTR("kCGColorSpaceDeviceRGB")))
    return CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceSRGB"));
  if (CFEqual(Extended, CFSTR("kCGColorSpaceDeviceCMYK")))
    return CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceGenericCMYK"));
  return CGColorSpaceCreateWithName((CFStringRef)Extended);
}

CGColorRef CGColorCreateCopyByMatchingToColorSpace(CGColorSpaceRef a1, CGColorRenderingIntent intent, CGColorRef color, CFDictionaryRef options)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGColor *v8;
  CGColorSpace *v10;
  uint64_t v11;
  CFDictionaryRef v12;
  CGColorSpaceRef ColorSpace;
  CGColorSpace *ResolvedColorSpace;
  CGColorSpace *v15;
  _QWORD *v16;
  const CGFloat *Components;
  CGColor *v19;
  _QWORD v20[7];

  v8 = 0;
  if (!a1 || !color)
    return v8;
  v10 = a1;
  if (!*(_BYTE *)(*((_QWORD *)a1 + 3) + 10))
    return 0;
  v11 = *(_QWORD *)&intent;
  if (options)
  {
    v12 = options;
    goto LABEL_17;
  }
  if (((unint64_t)color & 0x8000000000000000) != 0)
    ColorSpace = CGTaggedColorGetColorSpace((unint64_t)color, *(uint64_t *)&intent, (uint64_t)color, 0, v4, v5, v6, v7);
  else
    ColorSpace = (CGColorSpaceRef)*((_QWORD *)color + 3);
  if (!CGColorSpaceEqualToColorSpace((uint64_t)v10, (uint64_t)ColorSpace))
  {
    a1 = v10;
    v12 = 0;
LABEL_17:
    v16 = (_QWORD *)color_transform_create(a1, v12);
    v8 = CGColorTransformConvertColor(v16, (unint64_t)color, v11);
    if (v16)
      CFRelease(v16);
    return v8;
  }
  if (create_resolved_device_space_predicate != -1)
    dispatch_once(&create_resolved_device_space_predicate, &__block_literal_global_37_2229);
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 0x40000000;
  v20[2] = __CGColorSpaceCreateResolved_block_invoke;
  v20[3] = &__block_descriptor_tmp_40_20979;
  v20[4] = create_resolved_device_space_gray;
  v20[5] = create_resolved_device_space_sRGB;
  v20[6] = create_resolved_device_space_cmyk;
  ResolvedColorSpace = (CGColorSpace *)CGColorSpaceCreateResolvedColorSpace(v10, (uint64_t)v20);
  v15 = ResolvedColorSpace;
  if (!ResolvedColorSpace || CFEqual(ResolvedColorSpace, v10))
  {
    CFRetain(color);
    CGColorSpaceRelease(v15);
    return color;
  }
  Components = CGColorGetComponents(color);
  v19 = CGColorCreate(v15, Components);
  CGColorSpaceRelease(v15);
  return v19;
}

uint64_t *__color_space_state_create_extended_gray_block_invoke_2()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncGenericGrayGamma22Profile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  color_space_state_create_extended_gray_s = v1;
  return result;
}

void CGContextSetOwnerIdentity(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v9 = 0;
LABEL_7:
    handle_invalid_context((char)"CGContextSetOwnerIdentity", v9, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    v9 = a1;
    goto LABEL_7;
  }
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
    *(_DWORD *)(v8 + 280) = a2;
}

uint64_t (*__color_space_state_create_extended_gray_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  v1 = colorsync_smart_null_1622;
  if (result)
    v1 = result;
  color_space_state_create_extended_gray_f = v1;
  return result;
}

uint64_t *__color_space_state_create_generic_cmyk_block_invoke_2()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncGenericCMYKProfile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  color_space_state_create_generic_cmyk_s = v1;
  return result;
}

CGAffineTransform *__cdecl CGPDFPageGetDrawingTransform(CGAffineTransform *__return_ptr retstr, CGAffineTransform *page, CGPDFBox box, CGRect rect, int rotate, BOOL preserveAspectRatio)
{
  if (page)
    pdf_page_get_drawing_transform(&retstr->a, *(_QWORD *)&page->ty, box, rotate, preserveAspectRatio, 1, -8.98846567e307, -8.98846567e307, 1.79769313e308, 1.79769313e308, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
  else
    *retstr = CGAffineTransformIdentity;
  return page;
}

uint64_t (*__color_space_state_create_generic_cmyk_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  v1 = colorsync_smart_null_1622;
  if (result)
    v1 = result;
  color_space_state_create_generic_cmyk_f = v1;
  return result;
}

char *create_local_db()
{
  char *result;

  result = CGFontDBCreate();
  local_db = (uint64_t)result;
  return result;
}

char *CGFontDBCreate()
{
  char *v0;
  char *v1;
  CFMutableArrayRef Mutable;
  CFMutableDictionaryRef v3;
  CFMutableDictionaryRef v4;
  CFMutableArrayRef v5;
  CFMutableArrayRef v6;

  v0 = (char *)malloc_type_calloc(1uLL, 0x60uLL, 0x1020040D7707FD8uLL);
  v1 = v0;
  if (v0)
  {
    pthread_mutex_init((pthread_mutex_t *)(v0 + 32), 0);
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)v1 = Mutable;
    if (!Mutable)
      goto LABEL_7;
    v3 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v3
      || (CFArrayAppendValue(*(CFMutableArrayRef *)v1, v3),
          v4 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]),
          (*((_QWORD *)v1 + 1) = v4) == 0)
      || (v5 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]), (*((_QWORD *)v1 + 2) = v5) == 0)
      || (v6 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]), (*((_QWORD *)v1 + 3) = v6) == 0))
    {
LABEL_7:
      CGFontDBRelease(v1);
      return 0;
    }
  }
  return v1;
}

uint64_t (*__transform_get_conv_type_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncTransformCopyProperty");
  v1 = colorsync_smart_null_1997;
  if (result)
    v1 = result;
  transform_get_conv_type_f = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v1;
  return result;
}

uint64_t CGFontGetVariations(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(result + 16) + 208))(*(_QWORD *)(result + 112));
  return result;
}

CGPoint CGContextConvertPointToDeviceSpace(CGContextRef c, CGPoint point)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double y;
  double x;
  double v10;
  double v11;
  double v12;
  CGAffineTransform v13;
  CGPoint result;

  y = point.y;
  x = point.x;
  if (c && *((_DWORD *)c + 4) == 1129601108)
  {
    CGContextGetUserSpaceToDeviceSpaceTransform(&v13, c);
    v10 = y * v13.d + v13.b * x;
    x = v13.tx + y * v13.c + v13.a * x;
    y = v13.ty + v10;
  }
  else
  {
    handle_invalid_context((char)"CGContextConvertPointToDeviceSpace", (uint64_t)c, v2, v3, v4, v5, v6, v7);
  }
  v11 = x;
  v12 = y;
  result.y = v12;
  result.x = v11;
  return result;
}

CGPoint CGContextConvertPointToUserSpace(CGContextRef c, CGPoint point)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double y;
  double x;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  CGAffineTransform v20;
  CGAffineTransform v21;
  CGPoint result;

  y = point.y;
  x = point.x;
  memset(&v21, 0, sizeof(v21));
  if (c && *((_DWORD *)c + 4) == 1129601108)
  {
    CGContextGetUserSpaceToDeviceSpaceTransform(&v21, c);
    v20 = v21;
    x = CGPointApplyInverseAffineTransform(&v20.a, v10, v11, v12, v13, v14, v15, v16, x, y);
    y = v17;
  }
  else
  {
    handle_invalid_context((char)"CGContextConvertPointToUserSpace", (uint64_t)c, v2, v3, v4, v5, v6, v7);
  }
  v18 = x;
  v19 = y;
  result.y = v19;
  result.x = v18;
  return result;
}

CGAffineTransform *__cdecl CGContextGetUserSpaceToDeviceSpaceTransform(CGAffineTransform *__return_ptr retstr, CGContextRef c)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGAffineTransform *result;
  double *v11;
  CGFloat v12;
  double b;
  double a;
  double d;
  double v16;
  double ty;
  double tx;
  CGContextRef v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  CGAffineTransform v26;

  memset(&v26, 0, sizeof(v26));
  if (!c)
  {
    v19 = 0;
LABEL_8:
    handle_invalid_context((char)"CGContextGetUserSpaceToDeviceSpaceTransform", (uint64_t)v19, v2, v3, v4, v5, v6, v7);
    *retstr = CGAffineTransformIdentity;
    return result;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v19 = c;
    goto LABEL_8;
  }
  result = (CGAffineTransform *)*((_QWORD *)c + 5);
  v11 = (double *)*((_QWORD *)c + 12);
  if (!result || (v12 = result->ty, v12 == 0.0))
  {
    v26 = CGAffineTransformIdentity;
    d = 1.0;
    ty = 0.0;
    tx = 0.0;
    v16 = 0.0;
    b = 0.0;
    a = 1.0;
  }
  else
  {
    result = (CGAffineTransform *)(*(_QWORD *(**)(CGAffineTransform *__return_ptr))&v12)(&v26);
    v11 = (double *)*((_QWORD *)c + 12);
    b = v26.b;
    a = v26.a;
    d = v26.d;
    v16 = v26.c;
    ty = v26.ty;
    tx = v26.tx;
  }
  v20 = v11[3];
  v21 = v11[4];
  v22 = v11[5];
  v23 = v11[6];
  v24 = v11[7];
  v25 = v11[8];
  retstr->a = v21 * v16 + v20 * a;
  retstr->b = v21 * d + v20 * b;
  retstr->c = v23 * v16 + v22 * a;
  retstr->d = v23 * d + v22 * b;
  retstr->tx = tx + v16 * v25 + v24 * a;
  retstr->ty = d * v25 + v24 * b + ty;
  return result;
}

uint64_t (*__transform_is_null_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncTransformCopyProperty");
  v1 = colorsync_smart_null_1115;
  if (result)
    v1 = result;
  transform_is_null_f = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v1;
  return result;
}

uint64_t (*__md5_creator_block_invoke_2())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileGetMD5");
  v1 = colorsync_smart_null_11226;
  if (result)
    v1 = result;
  md5_creator_f_16 = (uint64_t (*)(_QWORD))v1;
  return result;
}

uint64_t (*__md5_creator_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileGetTypeID");
  v1 = colorsync_smart_null_11226;
  if (result)
    v1 = result;
  md5_creator_f = v1;
  return result;
}

uint64_t (*__matrix_get_properties_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncMatrixGetProperties");
  v1 = colorsync_smart_null_746;
  if (result)
    v1 = result;
  matrix_get_properties_f = (uint64_t)v1;
  return result;
}

uint64_t (*__matrix_get_output_range_block_invoke_2())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncMatrixGetOutputRange");
  v1 = colorsync_smart_null_746;
  if (result)
    v1 = result;
  matrix_get_output_range_f_78 = (uint64_t)v1;
  return result;
}

uint64_t (*__matrix_get_output_range_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncMatrixGetOutputRange");
  v1 = colorsync_smart_null_746;
  if (result)
    v1 = result;
  matrix_get_output_range_f = v1;
  return result;
}

uint64_t (*__matrix_get_input_range_block_invoke_2())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncMatrixGetInputRange");
  v1 = colorsync_smart_null_746;
  if (result)
    v1 = result;
  matrix_get_input_range_f_57 = (uint64_t)v1;
  return result;
}

uint64_t (*__matrix_get_input_range_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncMatrixGetInputRange");
  v1 = colorsync_smart_null_746;
  if (result)
    v1 = result;
  matrix_get_input_range_f = v1;
  return result;
}

uint64_t __linked_on_golden_gate_or_later_block_invoke()
{
  uint64_t result;

  linked_on_golden_gate_or_later_linked_on_golden_gate_or_later = dyld_program_sdk_at_least();
  linked_on_golden_gate_or_later_linked_on_azul_or_later = dyld_program_sdk_at_least();
  linked_on_golden_gate_or_later_linked_on_archer_or_later = dyld_program_sdk_at_least();
  result = dyld_program_sdk_at_least();
  linked_on_golden_gate_or_later_linked_on_borealis_or_later = result;
  return result;
}

uint64_t (*__create_conversion_info_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncTransformGetTypeID");
  v1 = colorsync_smart_null_1115;
  if (result)
    v1 = result;
  create_conversion_info_f = v1;
  return result;
}

void __stroke_state_create_root_block_invoke()
{
  char *v0;
  CGColorSpace *v1;

  v0 = (char *)malloc_type_malloc(0x30uLL, 0x2062DE7BuLL);
  *(_DWORD *)v0 = 0;
  *((_DWORD *)v0 + 1) = 1;
  *(_OWORD *)(v0 + 8) = xmmword_185005060;
  *((_QWORD *)v0 + 3) = 0;
  *((_QWORD *)v0 + 4) = 0;
  v1 = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceGenericGrayGamma2_2"));
  *((_QWORD *)v0 + 5) = CGColorSpaceCopyDefaultColor((uint64_t)v1);
  CGColorSpaceRelease(v1);
  stroke_state_create_root_root = (uint64_t)v0;
  *v0 = 1;
}

_BYTE *CGSFillDRAM64(_BYTE *result, int a2, unsigned int a3, int a4, uint64_t a5, int a6, int a7, int a8, int a9, int a10)
{
  int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;
  int v24;
  char v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  int v35;
  int v36;
  int v37;
  BOOL v38;

  if ((int)a3 >= 1 && a4 >= 1)
  {
    v11 = a10;
    v12 = a7 - 1;
    if (a10 < 0)
      v11 = a10 % a8 + a8;
    if (v11 > a8)
      v11 %= a8;
    v13 = v12 & a9;
    v14 = (int)(a2 - a3);
    if (a3 >= 0x40 && (a7 & 3) == 0)
      __asm { BR              X14 }
    v15 = a7 | a3;
    v16 = (unint64_t)a3 >> 1;
    v17 = (unint64_t)a3 >> 4;
    if (v16 <= 1)
      v16 = 1;
    if (v17 <= 1)
      v17 = 1;
    do
    {
      v18 = a5 + v11 * (uint64_t)a6;
      if ((((result | v15) | (v18 + v13)) & 3) != 0)
      {
        if ((((result | v15) | (v18 + v13)) & 1) != 0)
        {
          v23 = a3;
          v24 = v12 & a9;
          do
          {
            v25 = *(_BYTE *)(v18 + v24);
            v24 = (v24 + 1) & v12;
            *result++ = v25;
            --v23;
          }
          while (v23);
        }
        else if (a3 >= 2)
        {
          v19 = v16;
          v20 = v12 & a9;
          do
          {
            v21 = *(_WORD *)(v18 + v20);
            v20 = (v20 + 2) & v12;
            *(_WORD *)result = v21;
            result += 2;
            --v19;
          }
          while (v19);
        }
      }
      else
      {
        if (a3 >= 0x10)
        {
          v26 = v17;
          v22 = v12 & a9;
          do
          {
            v27 = *(_DWORD *)(v18 + v22);
            v28 = (v22 + 4) & v12;
            v29 = *(_DWORD *)(v18 + v28);
            v30 = ((int)v28 + 4) & (int)v12;
            *(_DWORD *)result = v27;
            *((_DWORD *)result + 1) = v29;
            v31 = *(_DWORD *)(v18 + v30);
            v32 = ((int)v30 + 4) & (int)v12;
            v33 = *(_DWORD *)(v18 + v32);
            v22 = (v32 + 4) & v12;
            *((_DWORD *)result + 2) = v31;
            *((_DWORD *)result + 3) = v33;
            result += 16;
            --v26;
          }
          while (v26);
        }
        else
        {
          v22 = v12 & a9;
        }
        if ((((unint64_t)a3 >> 2) & 3) != 0)
        {
          v34 = ((unint64_t)a3 >> 2) & 3;
          do
          {
            v35 = *(_DWORD *)(v18 + v22);
            v22 = (v22 + 4) & v12;
            *(_DWORD *)result = v35;
            result += 4;
            --v34;
          }
          while (v34);
        }
      }
      v36 = v11 + 1;
      result += v14;
      if (v36 >= a8)
        v37 = a8;
      else
        v37 = 0;
      v11 = v36 - v37;
      v38 = __OFSUB__(a4--, 1);
    }
    while (!((a4 < 0) ^ v38 | (a4 == 0)));
  }
  return result;
}

uint64_t CGContextGetFillColorAsColor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
    return CGGStateGetFillColor(*(_QWORD *)(a1 + 96));
  handle_invalid_context((char)"CGContextGetFillColorAsColor", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

CGColorSpaceRef __create_resolved_space_block_invoke()
{
  CGColorSpaceRef result;

  create_resolved_space_gray = (uint64_t)CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceGenericGrayGamma2_2"));
  create_resolved_space_sRGB = (uint64_t)CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceSRGB"));
  result = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceGenericCMYK"));
  create_resolved_space_cmyk = (uint64_t)result;
  return result;
}

uint64_t (*__trc_get_properties_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncTRCGetProperties");
  v1 = colorsync_smart_null_746;
  if (result)
    v1 = result;
  trc_get_properties_f = (uint64_t)v1;
  return result;
}

uint64_t (*__trc_get_output_range_block_invoke_2())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncTRCGetOutputRange");
  v1 = colorsync_smart_null_746;
  if (result)
    v1 = result;
  trc_get_output_range_f_71 = (uint64_t)v1;
  return result;
}

uint64_t (*__trc_get_output_range_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncTRCGetOutputRange");
  v1 = colorsync_smart_null_746;
  if (result)
    v1 = result;
  trc_get_output_range_f = v1;
  return result;
}

uint64_t (*__trc_get_input_range_block_invoke_2())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncTRCGetInputRange");
  v1 = colorsync_smart_null_746;
  if (result)
    v1 = result;
  trc_get_input_range_f_50 = (uint64_t)v1;
  return result;
}

uint64_t (*__trc_get_input_range_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncTRCGetInputRange");
  v1 = colorsync_smart_null_746;
  if (result)
    v1 = result;
  trc_get_input_range_f = v1;
  return result;
}

uint64_t CGContextGetStrokeColorAsColor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
    return CGGStateGetStrokeColor(*(_QWORD *)(a1 + 96));
  handle_invalid_context((char)"CGContextGetStrokeColorAsColor", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t rip_auto_context_draw_path(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (!a1)
  {
    v10 = 112;
    pthread_mutex_lock((pthread_mutex_t *)0x70);
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 288);
  v10 = v9 + 112;
  pthread_mutex_lock((pthread_mutex_t *)(v9 + 112));
  if (!v9)
  {
LABEL_6:
    rip_auto_context_update_content_info_from_GState(0, a3);
    goto LABEL_7;
  }
  v11 = *(_QWORD *)(v9 + 88);
  if (v11)
  {
    rip_auto_context_update_content_info_from_GState(v9, a3);
LABEL_9:
    v12 = CGContextDelegateDrawPath(*(_QWORD *)(v11 + 40), a2, a3, a4, a5);
    *(_BYTE *)(v9 + 105) |= rip_auto_context_contains_transparency(v9, v13, v14, v15, v16, v17, v18, v19);
    goto LABEL_10;
  }
  v11 = *(_QWORD *)(v9 + 80);
  rip_auto_context_update_content_info_from_GState(v9, a3);
  if (v11)
    goto LABEL_9;
LABEL_7:
  v12 = 0;
LABEL_10:
  pthread_mutex_unlock((pthread_mutex_t *)v10);
  return v12;
}

uint64_t dlRecorder_DrawPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const CGPath *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFArrayRef *v8;

  if (a1)
  {
    v8 = *(CFArrayRef **)(a1 + 288);
    if (v8)
      return CG::DisplayListRecorder::DrawPath(v8, a2, a3, a4, a5, 0, 0);
  }
  CGPostError((uint64_t)"%s: CGContextDelegateGetInfo() returned NULL", a2, a3, a4, (uint64_t)a5, a6, a7, a8, (char)"dlRecorder_DrawPath");
  return 1000;
}

BOOL cf_color_space_state_equal(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v4;
  uint64_t v5;

  if (a1 == a2)
    return 1;
  result = 0;
  if (a1 && a2)
  {
    if (*(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20))
    {
      v5 = *(_QWORD *)(a1 + 56);
      v4 = *(_QWORD *)(a1 + 64);
      return v5 == *(_QWORD *)(a2 + 56) && v4 == *(_QWORD *)(a2 + 64);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFTypeRef CGStyleRetain(CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  return cf;
}

void CGContextStrokeLineSegments(CGContextRef c, const CGPoint *points, size_t count)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v11;
  uint64_t v12;
  double v13;
  CGContextRef v14;

  if (!c)
  {
    v14 = 0;
LABEL_12:
    handle_invalid_context((char)"CGContextStrokeLineSegments", (uint64_t)v14, count, v3, v4, v5, v6, v7);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v14 = c;
    goto LABEL_12;
  }
  v11 = (const void *)*((_QWORD *)c + 21);
  if (v11)
  {
    CFRelease(v11);
    *((_QWORD *)c + 21) = 0;
  }
  if (points)
  {
    if (count)
    {
      v12 = *((_QWORD *)c + 12);
      v13 = *(double *)(*(_QWORD *)(v12 + 128) + 8);
      if (v13 > 0.0 || v13 == -1.0905473e16)
        CGContextDelegateDrawLines(*((_QWORD *)c + 5), *((_QWORD *)c + 14), v12, points, count);
    }
  }
}

_OWORD *colorspace_from_ICC_data_data_key_retain(_OWORD *a1, _QWORD *a2)
{
  _OWORD *result;

  result = malloc_type_malloc(0x10uLL, 0x1000040451B5BE8uLL);
  if (result)
    *result = *a1;
  *a2 = result;
  return result;
}

CGFloat CGImageBlockSetGetSize(const CGSize *a1)
{
  const CGSize *v1;

  v1 = a1 + 1;
  if (!a1)
    v1 = &CGSizeZero;
  return v1->width;
}

uint64_t CGSoftMaskCreate(uint64_t a1, __int128 *a2, const void *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  uint64_t Instance;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  if (!a5 || a4 && (a4[6] != 1 || a4[4] != 1))
    return 0;
  if (_block_invoke_once_15426 != -1)
    dispatch_once(&_block_invoke_once_15426, &__block_literal_global_4_15427);
  Instance = CGTypeCreateInstance(CGSoftMaskGetTypeID_soft_mask_type_id, 144, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  v22 = Instance;
  if (Instance)
  {
    do
    {
      v23 = __ldxr(&identifier_15428);
      v24 = v23 + 1;
    }
    while (__stxr(v24, &identifier_15428));
    *(_DWORD *)(Instance + 16) = v24;
    v25 = *a2;
    v26 = a2[1];
    *(_OWORD *)(Instance + 56) = a2[2];
    *(_OWORD *)(Instance + 40) = v26;
    *(_OWORD *)(Instance + 24) = v25;
    *(double *)(Instance + 72) = a9;
    *(double *)(Instance + 80) = a10;
    *(double *)(Instance + 88) = a11;
    *(double *)(Instance + 96) = a12;
    if (a3)
      CFRetain(a3);
    *(_QWORD *)(v22 + 104) = a3;
    if (a4)
      CFRetain(a4);
    *(_QWORD *)(v22 + 112) = a4;
    *(_QWORD *)(v22 + 120) = a1;
    v27 = *(_QWORD *)(a5 + 16);
    *(_OWORD *)(v22 + 128) = *(_OWORD *)a5;
    *(_QWORD *)(v22 + 144) = v27;
    *(_QWORD *)(v22 + 152) = 0;
  }
  return v22;
}

CGPathRef CGPathCreateCopyByIntersectingPath(CGPathRef path, CGPathRef maskPath, BOOL evenOddFillRule)
{
  return (CGPathRef)pathCreateCopyByClippingWithPath(0, path, evenOddFillRule, maskPath, evenOddFillRule);
}

void load_bitmap_context_delegate_create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  const char **i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = 0;
  for (i = (const char **)&links; strcmp("__CGBitmapContextDelegateCreate", *i); i += 2)
  {
    if (++v9 == 7)
    {
      CGPostError((uint64_t)"Failed to load bitmap context.", v11, v12, v13, v14, v15, v16, v17, a9);
      return;
    }
  }
  creator = (&links)[2 * v9 + 1];
}

_QWORD *CGFontCacheCreate()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  if (CGFontCacheCreate_once != -1)
    dispatch_once_f(&CGFontCacheCreate_once, 0, (dispatch_function_t)setup);
  if (!enable_caching)
    return 0;
  v0 = malloc_type_calloc(1uLL, 0x30uLL, 0x102004002AA219BuLL);
  *v0 = 1;
  v0[1] = cache_max_size;
  v0[2] = 0;
  *((_DWORD *)v0 + 6) = 0;
  pthread_mutex_lock(&font_caches_mutex);
  v1 = font_caches;
  v2 = malloc_type_malloc(0x10uLL, 0x2062DE7BuLL);
  if (v2)
  {
    *v2 = v0;
    v2[1] = v1;
    v1 = (uint64_t)v2;
  }
  font_caches = v1;
  pthread_mutex_unlock(&font_caches_mutex);
  return v0;
}

unint64_t CG::Path::point_count(CG::Path *this, int32x2_t a2)
{
  unint64_t v2;
  int v3;
  const float *v4;
  int v5;
  int8x16_t v6;
  int32x2_t v7;
  uint32x2_t v8;
  int8x16_t v9;
  uint32x2_t v10;
  uint32x2_t v11;
  int8x16_t v12;
  unint64_t result;
  void *v14[16];

  switch(*(_DWORD *)this)
  {
    case 1:
      v2 = 4;
      goto LABEL_16;
    case 2:
    case 3:
      v2 = 17;
      goto LABEL_16;
    case 4:
      v2 = 13;
      goto LABEL_16;
    case 5:
      v2 = 2;
      goto LABEL_16;
    case 6:
      v2 = (unint64_t)(ceil(fmax(*((double *)this + 7) + -0.00000001, 0.0) / 1.57079633) * 3.0 + 1.0);
      goto LABEL_16;
    case 7:
      CG::Path::Path((CG::Path *)v14, this);
      if (LODWORD(v14[0]) != 9)
        CG::Path::convert_to_huge_((CG::Path *)v14);
      v2 = CG::Path::point_count((CG::Path *)v14);
      CG::Path::~Path(v14);
      goto LABEL_16;
    case 8:
      v2 = *((unsigned __int16 *)this + 4);
      v3 = *((unsigned __int16 *)this + 5);
      if (!*((_WORD *)this + 5))
        goto LABEL_16;
      v4 = (const float *)((char *)this + 12);
      v5 = (v3 + 1) & 0x1FFFE;
      v6 = (int8x16_t)*((unsigned __int16 *)this + 4);
      v7 = (int32x2_t)0x100000000;
      v8 = (uint32x2_t)vld1_dup_f32(v4);
      do
      {
        v9 = v6;
        v10 = (uint32x2_t)v7;
        v6 = (int8x16_t)vaddw_s32((int64x2_t)v6, vceq_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(v8, (uint32x2_t)vneg_s32(vmul_s32(v7, (int32x2_t)0x300000003))), (int8x8_t)0x700000007), (int32x2_t)0x400000004));
        v7 = vadd_s32(v7, (int32x2_t)0x200000002);
        v5 -= 2;
      }
      while (v5);
      a2.i32[0] = v3 - 1;
      v11 = vcgt_u32(v10, (uint32x2_t)vdup_lane_s32(a2, 0));
      v12.i64[0] = v11.i32[0];
      v12.i64[1] = v11.i32[1];
      result = vaddvq_s64((int64x2_t)vbslq_s8(v12, v9, v6));
      break;
    case 9:
      v2 = *((_QWORD *)this + 1) - *((_QWORD *)this + 10);
      goto LABEL_16;
    default:
      v2 = 0;
LABEL_16:
      result = v2;
      break;
  }
  return result;
}

void sub_184A45CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  CG::Path::~Path(&a9);
  _Unwind_Resume(a1);
}

uint64_t CGFontCopyCharacterSet(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(result + 16) + 232))(*(_QWORD *)(result + 112));
  return result;
}

uint64_t CGPDFStreamCreate(uint64_t a1, CGPDFDictionaryRef dict, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CGPDFInteger v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  CGPDFInteger v37;
  uint64_t cftype;
  uint64_t v39;
  uint64_t v41;
  CGPDFInteger value;

  value = 0;
  if (!CGPDFDictionaryGetInteger(dict, "Length", &value))
  {
    pdf_error("missing or invalid stream length.");
    v14 = 0;
    value = 0;
    if (a3)
      goto LABEL_3;
LABEL_6:
    v17 = -1;
    goto LABEL_9;
  }
  v14 = value;
  if (!a3)
    goto LABEL_6;
LABEL_3:
  v15 = a3[11];
  if (a3[18])
  {
    v16 = a3[24];
    v15 += a3[15];
  }
  else
  {
    v16 = a3[16];
  }
  v17 = v16 - v15 + a3[14];
LABEL_9:
  CGPDFSourceSetPosition((uint64_t)a3, v14 + a4, v8, v9, v10, v11, v12, v13);
  CGPDFSourceSkipWhitespace(a3, v18, v19, v20, v21, v22, v23, v24);
  if (!CGPDFSourceMatch((uint64_t)a3, (uint64_t)"endstream", v25, v26, v27, v28, v29, v30))
  {
    v41 = 0;
    CGPDFSourceSetPosition((uint64_t)a3, a4, v31, v32, v33, v34, v35, v36);
    if ((CGPDFSourceForwardSearch(a3, "endstream", "\n\r", &v41) & 1) != 0)
    {
      v37 = v41 - a4;
      pdf_error("invalid stream length %lld; should be %lld.", v14, v41 - a4);
      v14 = v37;
    }
    else
    {
    }
  }
  CGPDFSourceSetPosition((uint64_t)a3, v17, v31, v32, v33, v34, v35, v36);
  CGPDFSourcePreflightLargeRead((uint64_t)a3, v17, v14);
  if (CGPDFStreamGetTypeID_onceToken != -1)
    dispatch_once(&CGPDFStreamGetTypeID_onceToken, &__block_literal_global_19902);
  cftype = pdf_create_cftype();
  v39 = cftype;
  if (cftype)
  {
    *(_QWORD *)(cftype + 24) = 0;
    *(_QWORD *)(cftype + 32) = 0;
    *(_QWORD *)(cftype + 16) = a1;
    *(_BYTE *)(cftype + 40) = 0;
    *(_QWORD *)(cftype + 48) = dict;
    *(_QWORD *)(cftype + 56) = a4;
    *(_QWORD *)(cftype + 64) = v14;
    if (a3)
      CFRetain(a3);
    *(_QWORD *)(v39 + 72) = a3;
    *(_DWORD *)(v39 + 80) = 0;
  }
  return v39;
}

_QWORD **pdf_xref_create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *Copy;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *linearization_dictionary;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *i;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  _QWORD *v61;
  int64_t v62;
  char *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int integer;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  unint64_t v106;
  _BOOL4 v107;
  _QWORD *v108;
  CGPDFInteger v109;
  _QWORD *v110;
  CGPDFInteger v111;
  _QWORD *v112;
  CGPDFDictionary *trailer;
  CGPDFArrayRef *v114;
  CGPDFDictionary *v115;
  CGPDFArrayRef *v116;
  CGPDFDictionaryRef v117;
  uint64_t v118;
  _QWORD *v119;
  CGPDFDictionaryRef v120;
  CGPDFArray *v121;
  CGPDFInteger v122;
  char *v123;
  CGPDFDictionary *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  CGPDFStream *v139;
  const __CFAllocator *v140;
  __CFDictionary *Mutable;
  uint64_t v142;
  const __CFAllocator *v143;
  CGPDFDictionary *v144;
  const char *v145;
  CFStringRef v146;
  CFNumberRef v147;
  CFNumberRef v148;
  BOOL v149;
  const __CFData *v150;
  const __CFData *v151;
  CGPDFDictionary *v152;
  _QWORD *v153;
  uint64_t v154;
  unint64_t *v155;
  uint64_t v156;
  const UInt8 *v157;
  CFIndex Length;
  uint64_t v159;
  const UInt8 *v160;
  const unsigned __int8 *v161;
  const unsigned __int8 *v162;
  const unsigned __int8 *v163;
  const unsigned __int8 *v164;
  const unsigned __int8 *v165;
  const unsigned __int8 *v166;
  const unsigned __int8 *v167;
  const unsigned __int8 *v168;
  const unsigned __int8 *v169;
  const unsigned __int8 *v170;
  const unsigned __int8 *v171;
  const unsigned __int8 *v172;
  const unsigned __int8 *v173;
  unint64_t v174;
  unsigned int *v175;
  uint64_t v176;
  char *v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  char *v186;
  uint64_t *v187;
  void *v188;
  uint64_t v189;
  unint64_t v190;
  unsigned int v191;
  char *v192;
  unint64_t v193;
  _DWORD *v194;
  int v195;
  unint64_t v196;
  BOOL v197;
  unsigned int v198;
  int v199;
  unint64_t v200;
  int v201;
  uint64_t v202;
  unsigned int *v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unsigned int v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  unint64_t v212;
  unsigned int v213;
  int v214;
  unint64_t v215;
  int v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  int v221;
  unint64_t v222;
  uint64_t v223;
  int v224;
  unint64_t v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  char *v238;
  char *v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  unsigned int *v247;
  unsigned int *v248;
  int v249;
  unint64_t v250;
  unsigned int v251;
  int v252;
  unint64_t v253;
  int v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  unint64_t v261;
  unsigned int v262;
  int v263;
  unint64_t v264;
  int v265;
  unint64_t v266;
  unint64_t v267;
  unsigned int v268;
  uint64_t v269;
  int v270;
  unint64_t v271;
  int v272;
  unint64_t v273;
  int v274;
  unint64_t v275;
  unint64_t v276;
  unsigned int v277;
  uint64_t v278;
  int v279;
  unint64_t v280;
  int v281;
  unint64_t v282;
  int v283;
  uint64_t v284;
  _QWORD *v285;
  _QWORD *v286;
  uint64_t v287;
  const __CFNumber *v288;
  const __CFNumber *v289;
  CFTypeID v290;
  uint64_t v291;
  const UInt8 *v292;
  const UInt8 *v293;
  CFIndex v294;
  CFIndex v295;
  unsigned int *v296;
  const UInt8 *v297;
  const unsigned __int8 *v298;
  const unsigned __int8 *v299;
  const unsigned __int8 *v300;
  const unsigned __int8 *v301;
  const unsigned __int8 *v302;
  const unsigned __int8 *v303;
  const unsigned __int8 *v304;
  uint64_t v305;
  unint64_t v306;
  unsigned int v307;
  const UInt8 *v308;
  unint64_t v309;
  int v310;
  unint64_t v311;
  int v312;
  unint64_t v313;
  int v314;
  int v315;
  unint64_t v316;
  unint64_t v317;
  char *v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  unint64_t v322;
  char *v323;
  uint64_t v324;
  char *v325;
  char *v326;
  char *v327;
  char *v328;
  unint64_t v329;
  char *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t *v334;
  char *v335;
  uint64_t v336;
  unsigned int v337;
  uint64_t v338;
  const __CFNumber *v339;
  const __CFNumber *v340;
  CFTypeID v341;
  uint64_t v342;
  const __CFNumber *v343;
  const __CFNumber *v344;
  CFTypeID v345;
  uint64_t v346;
  _QWORD *v347;
  char *CryptFilter;
  char *v350;
  CGPDFArray *Standard;
  std::logic_error *v352;
  std::logic_error *exception;
  void (*v354)(void *);
  struct type_info *v355;
  std::logic_error *v356;
  std::logic_error *v357;
  std::logic_error *v358;
  char v359;
  _WORD *v360;
  CGPDFStream *v361;
  uint64_t v362;
  _QWORD **v363;
  _WORD *v364;
  const __CFData *v365;
  const __CFDictionary *v366;
  uint64_t *v367;
  uint64_t *v368;
  uint64_t *v369;
  unint64_t v370;
  unint64_t v371;
  uint64_t v372;
  CFIndex v373;
  unsigned int *v374;
  _QWORD *v375;
  uint64_t *v376;
  uint64_t v377;
  CGPDFInteger v378;
  CGPDFInteger valuePtr;
  CGPDFArrayRef array;
  char *__s1[2];
  __int128 v382;
  CGPDFStream *v383;
  uint64_t v384;
  int v385;
  CGPDFDictionaryRef v386;
  CGPDFDictionaryRef v387;
  CGPDFInteger v388;
  char *BytePtr;
  CGPDFInteger value[5];
  pthread_mutexattr_t v391;
  uint64_t v392;

  Copy = (_QWORD *)a1;
  v392 = *MEMORY[0x1E0C80C00];
  v377 = 0;
  v391.__sig = 0;
  *(_QWORD *)v391.__opaque = 0;
  CGPDFSourceSetPosition(a1, 0, a3, a4, a5, a6, a7, a8);
  if ((CGPDFSourceForwardSearch(Copy, "%PDF-", 0, &v377) & 1) == 0)
  {
    CGPDFSourceSetPosition((uint64_t)Copy, 0, v9, v10, v11, v12, v13, v14);
    if ((CGPDFSourceForwardSearch(Copy, "%!PS-Adobe-", 0, &v377) & 1) == 0)
    {
      return 0;
    }
  }
  v15 = (_QWORD **)malloc_type_calloc(1uLL, 0xD0uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  *((_BYTE *)v15 + 176) = 0;
  *(_OWORD *)(v15 + 23) = xmmword_185004D70;
  if (!Copy)
  {
    v20 = v377;
    if (!v377)
    {
      v19 = 0;
      Copy = 0;
      goto LABEL_10;
    }
    v19 = 0;
    goto LABEL_9;
  }
  v19 = Copy[2];
  if (v19 == -1)
    goto LABEL_61;
  v20 = v377;
  if (v377)
  {
LABEL_9:
    Copy = CGPDFSourceCreateCopy((uint64_t)Copy, v20, v19 - v20);
    goto LABEL_10;
  }
  CFRetain(Copy);
LABEL_10:
  *v15 = Copy;
  *((_DWORD *)v15 + 16) = 1;
  pthread_mutexattr_init(&v391);
  pthread_mutexattr_settype(&v391, 2);
  pthread_mutex_init((pthread_mutex_t *)(v15 + 12), &v391);
  pthread_mutexattr_destroy(&v391);
  v25 = *v15;
  if (*v15)
  {
    v26 = v25[2];
    if (v26 == -1)
LABEL_61:
      _CGHandleAssert("CGPDFSourceGetLength", 179, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Reader/CGPDFSource.c", "source->length != (pdf_off_t)-1", "source length would overflow", v16, v17, v18, v359);
  }
  else
  {
    v26 = 0;
  }
  linearization_dictionary = xref_read_linearization_dictionary(v25, v21, v22, v23, v24, v16, v17, v18);
  v15[3] = linearization_dictionary;
  if (!linearization_dictionary)
    goto LABEL_479;
  CGPDFSourceSkipWhitespace(*v15, v28, v29, v30, v31, v16, v17, v18);
  v38 = *v15;
  if (*v15)
  {
    v39 = v38[11];
    if (v38[18])
    {
      v40 = v38[24];
      v39 += v38[15];
    }
    else
    {
      v40 = v38[16];
    }
    v41 = v40 - v39 + v38[14];
  }
  else
  {
    v41 = -1;
  }
  if (CGPDFSourceMatch((uint64_t)v38, (uint64_t)"xref", v32, v33, v34, v35, v36, v37))
  {
    v42 = CGPDFXRefTableCreate((const void **)v15, v41, 0);
    v15[2] = v42;
    if (!v42)
      goto LABEL_72;
    v43 = 10000001;
    v44 = v42[1];
    if (v44)
    {
      v45 = *(_QWORD *)(v44 + 8);
      if (v45)
      {
        v46 = *(_QWORD **)(v45 + 40);
        while (v46)
        {
          v47 = v46;
          v46 = (_QWORD *)*v46;
          v48 = *(_QWORD *)v47[1];
          if (v48 < v43)
            v43 = v48;
        }
      }
    }
  }
  else
  {
    v49 = CGPDFXRefStreamCreate((const void **)v15, v41, 0);
    v15[1] = v49;
    if (!v49)
      goto LABEL_72;
    v43 = 10000001;
    for (i = (_QWORD *)v49[1]; i; i = (_QWORD *)*i)
    {
      v51 = *(_QWORD **)(i[1] + 16);
      while (v51)
      {
        v52 = v51;
        v51 = (_QWORD *)*v51;
        v53 = *(_QWORD *)v52[1];
        if (v53 < v43)
          v43 = v53;
      }
    }
  }
  v15[24] = (_QWORD *)v43;
  v54 = v15[2];
  if (!v54 && !v15[1])
  {
LABEL_479:
    if (v26 != 0x7FFFFFFFFFFFFFFFLL || v15[3])
    {
      __s1[0] = 0;
      v64 = *v15;
      if (*v15)
      {
        v65 = v64[2];
        if (v65 == -1)
          goto LABEL_61;
      }
      else
      {
        v65 = 0;
      }
      CGPDFSourceSetPosition((uint64_t)v64, v65, v29, v30, v31, v16, v17, v18);
      if (CGPDFSourceReverseSearch(*v15, "startxref", "\n\r", " \n\r", __s1))
      {
        CGPDFSourceSetPosition((uint64_t)*v15, (uint64_t)(__s1[0] + 9), v66, v67, v68, v69, v70, v71);
        v72 = *v15;
        value[0] = 0;
        integer = read_integer(v72, (unint64_t *)value, v73, v74, v75, v76, v77, v78);
        v86 = "missing or invalid value for cross-reference offset.";
        if (integer)
        {
          v87 = value[0];
          if ((value[0] & 0x8000000000000000) == 0)
          {
            v15[23] = (_QWORD *)value[0];
            CGPDFSourceSetPosition((uint64_t)*v15, v87, v79, v80, v81, v82, v83, v84);
            CGPDFSourceSkipWhitespace(*v15, v88, v89, v90, v91, v92, v93, v94);
            v101 = *v15;
            if (*v15)
            {
              v102 = v101[11];
              if (v101[18])
              {
                v103 = v101[24];
                v102 += v101[15];
              }
              else
              {
                v103 = v101[16];
              }
              v118 = v103 - v102 + v101[14];
            }
            else
            {
              v118 = -1;
            }
            if (CGPDFSourceMatch((uint64_t)v101, (uint64_t)"xref", v95, v96, v97, v98, v99, v100))
            {
              v54 = CGPDFXRefTableCreate((const void **)v15, v118, 1);
              v15[2] = v54;
              if (v54)
                goto LABEL_75;
            }
            else
            {
              v119 = CGPDFXRefStreamCreate((const void **)v15, v118, 1);
              v15[1] = v119;
              if (v119)
              {
                v54 = v15[2];
                if (!v54)
                  goto LABEL_41;
                goto LABEL_75;
              }
            }
            goto LABEL_72;
          }
        }
      }
      else
      {
        v86 = "failed to find start of cross-reference table.";
      }
      pdf_error(v86);
    }
LABEL_72:
    if (v19 != 0x7FFFFFFFFFFFFFFFLL || v15[3])
    {
      v54 = CGPDFXRefTableCreateByScanningObjects((const void **)v15, 0);
      v15[2] = v54;
      if (v54)
        goto LABEL_75;
    }
LABEL_433:
    pdf_xref_release((uint64_t)v15);
    return 0;
  }
  v15[23] = (_QWORD *)v41;
  *((_BYTE *)v15 + 200) = 1;
  if (!v54)
  {
LABEL_41:
    v55 = v15[1];
    if (v55)
    {
      v56 = (_QWORD *)v55[1];
      if (v56)
      {
        v57 = 0;
        do
        {
          v58 = v56[1];
          if (v58 && (v59 = *(_QWORD **)(v58 + 16)) != 0)
          {
            v60 = 0;
            do
            {
              v61 = v59;
              v59 = (_QWORD *)*v59;
              v62 = *(_QWORD *)(v61[1] + 8) + *(_QWORD *)v61[1];
              if ((uint64_t)v60 <= v62)
                v60 = v62;
            }
            while (v59);
          }
          else
          {
            v60 = 0;
          }
          if (v57 <= v60)
            v57 = v60;
          v56 = (_QWORD *)*v56;
        }
        while (v56);
        if (v57 > 0x989681)
        {
          v63 = "xref stream size too large.";
LABEL_93:
          v57 = 10000001;
          pdf_error(v63);
          goto LABEL_95;
        }
        goto LABEL_95;
      }
    }
LABEL_94:
    v57 = 0;
    goto LABEL_95;
  }
LABEL_75:
  v104 = (_QWORD *)v54[1];
  if (!v104)
    goto LABEL_94;
  v57 = 0;
  do
  {
    v105 = v104[1];
    v106 = *(_QWORD *)v105;
    if (!*(_QWORD *)v105)
    {
      value[0] = 0;
      v107 = CGPDFDictionaryGetInteger(*(CGPDFDictionaryRef *)(v105 + 16), "Size", value);
      v106 = 0;
      if (v107)
      {
        v108 = *(_QWORD **)(v105 + 40);
        if (v108)
        {
          v109 = 0;
          do
          {
            v110 = v108;
            v108 = (_QWORD *)*v108;
            v111 = *(_QWORD *)(v110[1] + 8) + *(_QWORD *)v110[1];
            if (v109 <= v111)
              v109 = v111;
          }
          while (v108);
        }
        else
        {
          v109 = 0;
        }
        v106 = value[0];
        if (value[0] <= v109)
          v106 = v109;
      }
    }
    if (v57 <= v106)
      v57 = v106;
    v104 = (_QWORD *)*v104;
  }
  while (v104);
  if (v57 > 0x989681)
  {
    v63 = "xref table size too large.";
    goto LABEL_93;
  }
LABEL_95:
  v15[20] = (_QWORD *)v57;
  v112 = malloc_type_calloc(1uLL, 40 * v57, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  v15[21] = v112;
  trailer = (CGPDFDictionary *)pdf_xref_get_trailer((uint64_t)v15);
  v114 = (CGPDFArrayRef *)(v15 + 6);
  if (CGPDFDictionaryGetArray(trailer, "ID", (CGPDFArrayRef *)v15 + 6))
    CGPDFArraySetObjectReference(*v114, 0, 0);
  v115 = (CGPDFDictionary *)pdf_xref_get_trailer((uint64_t)v15);
  if (!v115)
    goto LABEL_129;
  BytePtr = 0;
  value[0] = 0;
  __s1[0] = 0;
  v387 = 0;
  v388 = 0;
  v386 = 0;
  v116 = 0;
  if (!CGPDFDictionaryGetDictionary(v115, "Encrypt", &v387))
    goto LABEL_130;
  CGPDFDictionarySetObjectReference(v387, 0, 0);
  if (!CGPDFDictionaryGetName(v387, "Filter", (const char **)__s1))
  {
LABEL_129:
    v116 = 0;
    goto LABEL_130;
  }
  if (!CGPDFDictionaryGetName(v387, "SubFilter", (const char **)&BytePtr))
    BytePtr = 0;
  if (!CGPDFDictionaryGetInteger(v387, "V", value))
  {
    goto LABEL_129;
  }
  if (value[0] > 5uLL || ((1 << SLOBYTE(value[0])) & 0x36) == 0)
  {
    goto LABEL_129;
  }
  if ((value[0] & 0xFFFFFFFFFFFFFFFELL) == 4)
  {
    if (CGPDFDictionaryGetDictionary(v387, "CF", &v386))
      v117 = v386;
    else
      v117 = 0;
  }
  else
  {
    v117 = 0;
  }
  if (strcmp(__s1[0], "Standard"))
  {
    goto LABEL_129;
  }
  v116 = (CGPDFArrayRef *)malloc_type_calloc(1uLL, 0x38uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (v116)
  {
    v120 = v387;
    *v116 = *v114;
    v116[1] = v120;
    v116[3] = v117;
    v121 = (CGPDFArray *)CGPDFSecurityHandlerCreate(v116);
    v116[2] = v121;
    v122 = value[0];
    v116[6] = (CGPDFArrayRef)value[0];
    if (!v121)
      goto LABEL_451;
    if ((v122 & 0xFFFFFFFFFFFFFFFELL) == 4)
    {
      if (CGPDFDictionaryGetName(v387, "StmF", (const char **)&v388))
      {
        v123 = (char *)v388;
      }
      else
      {
        v123 = "Identity";
        v388 = (CGPDFInteger)"Identity";
      }
      CryptFilter = CGPDFSecurityManagerCreateCryptFilter((uint64_t)v116, v123);
    }
    else
    {
      CryptFilter = CGPDFCryptFilterCreateStandard((uint64_t)v116);
    }
    v116[4] = (CGPDFArrayRef)CryptFilter;
    if (!CryptFilter
      || ((value[0] & 0xFFFFFFFFFFFFFFFELL) != 4
        ? (Standard = (CGPDFArray *)CGPDFCryptFilterCreateStandard((uint64_t)v116))
        : (!CGPDFDictionaryGetName(v387, "StrF", (const char **)&v388)
         ? (char *)(v350 = "Identity", v388 = (CGPDFInteger)"Identity")
         : (v350 = (char *)v388),
           Standard = (CGPDFArray *)CGPDFSecurityManagerCreateCryptFilter((uint64_t)v116, v350)),
          (v116[5] = Standard) == 0))
    {
LABEL_451:
      CGPDFSecurityManagerRelease((uint64_t)v116);
      goto LABEL_129;
    }
  }
LABEL_130:
  v15[5] = v116;
  v124 = (CGPDFDictionary *)v15[3];
  if (!v124)
    goto LABEL_438;
  if (v116)
  {
    CGPDFSecurityManagerUnlock((uint64_t)v116, "", 0);
    v124 = (CGPDFDictionary *)v15[3];
  }
  v383 = 0;
  *(_OWORD *)__s1 = 0u;
  v382 = 0u;
  array = 0;
  CGPDFDictionaryGetArray(v124, "H", &array);
  if (!array
    || *((_QWORD *)array + 2) != 2
    || (v378 = 0, valuePtr = 0, !CGPDFArrayGetInteger(array, 0, &valuePtr))
    || !CGPDFArrayGetInteger(array, 1uLL, &v378))
  {
    v132 = 0;
LABEL_181:
    pdf_object_scanner_release(v132);
    v15[4] = 0;
    goto LABEL_432;
  }
  v125 = pdf_object_scanner_create_with_xref((const void **)v15, 0);
  v132 = v125;
  if (!v125)
    goto LABEL_181;
  CGPDFSourceSetPosition(v125[1], valuePtr, v126, v127, v128, v129, v130, v131);
  if (!pdf_object_scanner_read_indirect_object(v132, (uint64_t)__s1, v133, v134, v135, v136, v137, v138))
    goto LABEL_181;
  if (LODWORD(__s1[1]) != 9)
  {
    if ((LODWORD(__s1[1]) - 5) <= 4)
      pdf_object_release_compound_value((uint64_t)__s1);
    goto LABEL_181;
  }
  v368 = v132;
  v139 = v383;
  v140 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 11, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
  v142 = 0;
  v143 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
  do
  {
    if (v139)
      v144 = (CGPDFDictionary *)*((_QWORD *)v139 + 6);
    else
      v144 = 0;
    v145 = off_1E16473B8[v142];
    if (CGPDFDictionaryGetInteger(v144, v145, &valuePtr))
    {
      v146 = CFStringCreateWithCStringNoCopy(v140, v145, 0x8000100u, v143);
      v147 = CFNumberCreate(v140, kCFNumberLongType, &valuePtr);
      v148 = v147;
      if (v146)
        v149 = v147 == 0;
      else
        v149 = 1;
      if (!v149)
      {
        CFDictionaryAddValue(Mutable, v146, v147);
LABEL_155:
        CFRelease(v146);
        if (!v148)
          goto LABEL_157;
LABEL_156:
        CFRelease(v148);
        goto LABEL_157;
      }
      if (v146)
        goto LABEL_155;
      if (v147)
        goto LABEL_156;
    }
    else if (*v145 == 83)
    {
      goto LABEL_182;
    }
LABEL_157:
    ++v142;
  }
  while (v142 != 11);
  v150 = CGPDFStreamCopyData(v139, 0);
  if (!v150)
  {
LABEL_182:
    v376 = 0;
    v187 = 0;
    if (v139)
      goto LABEL_428;
    goto LABEL_429;
  }
  v151 = v150;
  if (!CFDataGetLength(v150))
  {
    v376 = 0;
    goto LABEL_425;
  }
  v152 = (CGPDFDictionary *)v15[3];
  v153 = v15[20];
  v362 = v19;
  v363 = v15;
  v361 = v139;
  v365 = v151;
  v366 = Mutable;
  v154 = operator new();
  *(_QWORD *)v154 = &off_1E1627FD8;
  *(_QWORD *)(v154 + 8) = v153;
  *(_OWORD *)(v154 + 16) = 0u;
  v155 = (unint64_t *)(v154 + 16);
  *(_OWORD *)(v154 + 64) = 0u;
  v367 = (uint64_t *)(v154 + 64);
  *(_OWORD *)(v154 + 32) = 0u;
  *(_OWORD *)(v154 + 48) = 0u;
  v376 = (uint64_t *)v154;
  *(_OWORD *)(v154 + 80) = 0u;
  v387 = 0;
  v388 = 0;
  v386 = 0;
  v385 = 0;
  if (!v152)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "NULL 'linearizationDict' parameter");
LABEL_458:
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    v354 = (void (*)(void *))MEMORY[0x1E0DE4360];
    v355 = (struct type_info *)off_1E1620B40;
    goto LABEL_465;
  }
  if (!Mutable)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "NULL 'hintOffsets' parameter");
    goto LABEL_458;
  }
  if (!CGPDFDictionaryGetInteger(v152, "N", &v388))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Required parameter: \"N\" missing from linearization dictionary");
LABEL_464:
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    v354 = (void (*)(void *))MEMORY[0x1E0DE42C0];
    v355 = (struct type_info *)off_1E1620B20;
LABEL_465:
    __cxa_throw(exception, v355, v354);
  }
  *v155 = v388;
  if (!CGPDFDictionaryGetInteger(v152, "O", &v388))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Required parameter: \"O\" missing from linearization dictionary");
    goto LABEL_464;
  }
  v376[5] = v388;
  if (!CGPDFDictionaryGetInteger(v152, "L", &v388))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Required parameter: \"L\" missing from linearization dictionary");
    goto LABEL_464;
  }
  v376[3] = v388;
  if (!CGPDFDictionaryGetOffset(v152, "T", &v387))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Required parameter: \"T\" missing from linearization dictionary");
    goto LABEL_464;
  }
  v376[4] = (uint64_t)v387;
  CGPDFDictionaryGetArray(v152, "H", &v386);
  if (!v386)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Required parameter: \"H\" missing from linearization dictionary");
    goto LABEL_464;
  }
  v156 = *((_QWORD *)v386 + 2);
  if (v156 != 2 && v156 != 4)
  {
    v357 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v357, "Invalid array size in linearization dictionary");
    goto LABEL_475;
  }
  CGPDFArrayGetInteger(v386, 0, &v388);
  v376[6] = v388;
  CGPDFArrayGetInteger(v386, 1uLL, &v388);
  v376[7] = v388;
  BytePtr = (char *)CFDataGetBytePtr(v151);
  if (!BytePtr)
  {
    v356 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v356, "CFDataGetBytePtr(hint_data) returned NULL");
    v356->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    __cxa_throw(v356, (struct type_info *)off_1E1620B20, MEMORY[0x1E0DE42C0]);
  }
  v157 = CFDataGetBytePtr(v151);
  Length = CFDataGetLength(v151);
  v159 = operator new();
  *(_QWORD *)(v159 + 48) = 0;
  v369 = (uint64_t *)(v159 + 48);
  v160 = &v157[Length];
  *(_QWORD *)(v159 + 56) = 0;
  *(_QWORD *)(v159 + 64) = 0;
  v384 = v159;
  v374 = (unsigned int *)v159;
  CGPDFHintTableSet::copyFromBuf((_DWORD *)v159, (unsigned int *)&BytePtr, (const unsigned __int8 **)&v157[Length], v161);
  CGPDFHintTableSet::rangeCheck(*v374, 0, v376[1]);
  CGPDFHintTableSet::copyFromBuf(v374 + 1, (unsigned int *)&BytePtr, (const unsigned __int8 **)&v157[Length], v162);
  CGPDFHintTableSet::rangeCheck(v374[1], 0, v376[3]);
  CGPDFHintTableSet::copyFromBuf((_WORD *)v374 + 4, (unsigned __int16 *)&BytePtr, (const unsigned __int8 **)&v157[Length], v163);
  CGPDFHintTableSet::rangeCheck(*((unsigned __int16 *)v374 + 4), 0, 20);
  CGPDFHintTableSet::copyFromBuf(v374 + 3, (unsigned int *)&BytePtr, (const unsigned __int8 **)&v157[Length], v164);
  CGPDFHintTableSet::rangeCheck(v374[3], 0, v376[3]);
  CGPDFHintTableSet::copyFromBuf((_WORD *)v374 + 8, (unsigned __int16 *)&BytePtr, (const unsigned __int8 **)&v157[Length], v165);
  CGPDFHintTableSet::rangeCheck(*((unsigned __int16 *)v374 + 8), 0, 32);
  CGPDFHintTableSet::copyFromBuf(v374 + 5, (unsigned int *)&BytePtr, (const unsigned __int8 **)&v157[Length], v166);
  CGPDFHintTableSet::rangeCheck(v374[5], 0, v376[3]);
  v364 = v374 + 6;
  CGPDFHintTableSet::copyFromBuf((_WORD *)v374 + 12, (unsigned __int16 *)&BytePtr, (const unsigned __int8 **)&v157[Length], v167);
  CGPDFHintTableSet::rangeCheck(*((unsigned __int16 *)v374 + 12), 0, 32);
  CGPDFHintTableSet::copyFromBuf(v374 + 7, (unsigned int *)&BytePtr, (const unsigned __int8 **)&v157[Length], v168);
  CGPDFHintTableSet::rangeCheck(v374[7], 0, v376[3]);
  CGPDFHintTableSet::copyFromBuf((_WORD *)v374 + 16, (unsigned __int16 *)&BytePtr, (const unsigned __int8 **)&v157[Length], v169);
  CGPDFHintTableSet::rangeCheck(*((unsigned __int16 *)v374 + 16), 0, 32);
  CGPDFHintTableSet::copyFromBuf((_WORD *)v374 + 17, (unsigned __int16 *)&BytePtr, (const unsigned __int8 **)&v157[Length], v170);
  CGPDFHintTableSet::rangeCheck(*((unsigned __int16 *)v374 + 17), 0, 20);
  CGPDFHintTableSet::copyFromBuf((_WORD *)v374 + 18, (unsigned __int16 *)&BytePtr, (const unsigned __int8 **)&v157[Length], v171);
  CGPDFHintTableSet::rangeCheck(*((unsigned __int16 *)v374 + 18), 0, 20);
  CGPDFHintTableSet::copyFromBuf((_WORD *)v374 + 19, (unsigned __int16 *)&BytePtr, (const unsigned __int8 **)&v157[Length], v172);
  CGPDFHintTableSet::rangeCheck(*((unsigned __int16 *)v374 + 19), 0, 32);
  CGPDFHintTableSet::copyFromBuf((_WORD *)v374 + 20, (unsigned __int16 *)&BytePtr, (const unsigned __int8 **)&v157[Length], v173);
  CGPDFHintTableSet::rangeCheck(*((unsigned __int16 *)v374 + 20), 0, 0x7FFFFFFFLL);
  v174 = *v155;
  v175 = v374;
  v176 = *((_QWORD *)v374 + 6);
  v177 = (char *)*((_QWORD *)v374 + 7);
  v178 = (uint64_t)&v177[-v176] >> 6;
  v360 = v374 + 8;
  if (v174 <= v178)
  {
    if (v174 >= v178)
    {
      v186 = (char *)*((_QWORD *)v374 + 7);
      goto LABEL_193;
    }
    v186 = (char *)(v176 + (v174 << 6));
    while (v177 != v186)
    {
      v188 = (void *)*((_QWORD *)v177 - 5);
      if (v188)
      {
        *((_QWORD *)v177 - 4) = v188;
        operator delete(v188);
        v175 = v374;
      }
      v177 -= 64;
    }
    goto LABEL_191;
  }
  v179 = v174 - v178;
  v180 = *((_QWORD *)v374 + 8);
  if (v174 - v178 <= (v180 - (uint64_t)v177) >> 6)
  {
    bzero(v177, v179 << 6);
    v175 = v374;
    v186 = &v177[64 * v179];
LABEL_191:
    *((_QWORD *)v175 + 7) = v186;
    goto LABEL_193;
  }
  if (v174 >> 58)
    std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
  value[4] = (CGPDFInteger)(v374 + 16);
  v181 = v180 - v176;
  if (v181 >> 5 > v174)
    v174 = v181 >> 5;
  if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFC0)
    v182 = 0x3FFFFFFFFFFFFFFLL;
  else
    v182 = v174;
  v183 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CGPageOffsetHintTablePageEntry>>(v182);
  v184 = &v183[64 * v178];
  value[0] = (CGPDFInteger)v183;
  value[1] = (CGPDFInteger)v184;
  value[3] = (CGPDFInteger)&v183[64 * v185];
  bzero(v184, v179 << 6);
  value[2] = (CGPDFInteger)&v184[64 * v179];
  std::vector<CGPageOffsetHintTablePageEntry>::__swap_out_circular_buffer(v369, value);
  std::__split_buffer<CGPageOffsetHintTablePageEntry>::~__split_buffer((uint64_t)value);
  v175 = v374;
  v186 = (char *)*((_QWORD *)v374 + 7);
LABEL_193:
  v189 = *v369;
  if ((char *)*v369 == v186)
    goto LABEL_366;
  v190 = 0;
  v191 = 0;
  v192 = BytePtr;
  v193 = *((unsigned __int16 *)v374 + 4);
  do
  {
    v194 = (_DWORD *)v189;
    if ((_DWORD)v193)
    {
      if (v193 < 0x19)
      {
        v199 = 0;
        v200 = v193;
      }
      else
      {
        if (v190 > 0x17)
        {
          v196 = v190;
        }
        else
        {
          do
          {
            v191 <<= 8;
            if (v192 < (char *)v160)
            {
              v195 = *v192++;
              v191 |= v195;
            }
            v196 = v190 + 8;
            v197 = v190 >= 0x10;
            v190 += 8;
          }
          while (!v197);
        }
        v190 = v196 - 24;
        v199 = ((v191 >> (v196 - 24)) & 0xFFFFFF) << (v193 - 24);
        v200 = v193 - 24;
      }
      while (v190 < v200)
      {
        v191 <<= 8;
        if (v192 < (char *)v160)
        {
          v201 = *v192++;
          v191 |= v201;
        }
        v190 += 8;
      }
      v190 -= v200;
      v198 = (v191 >> v190) & (0xFFFFFFFF >> -(char)v200) | v199;
    }
    else
    {
      v198 = 0;
    }
    v202 = *v175 + v198;
    *v194 = v202;
    v203 = v175;
    CGPDFHintTableSet::rangeCheck(v202, 1, v376[1]);
    v189 = (uint64_t)(v194 + 16);
    v175 = v203;
  }
  while (v194 + 16 != *((_DWORD **)v203 + 7));
  v204 = *v369;
  if (*v369 == v189)
    goto LABEL_366;
  v205 = *((unsigned __int16 *)v374 + 8);
  v206 = v190 & 0xFFFFFFFFFFFFFFF8;
  v207 = v374[1];
  v208 = v374[3];
  v209 = v376[3];
  v210 = *v369;
  do
  {
    if ((_DWORD)v205)
    {
      if (v205 < 0x19)
      {
        v214 = 0;
        v215 = v205;
      }
      else
      {
        if (v206 > 0x17)
        {
          v212 = v206;
        }
        else
        {
          do
          {
            v191 <<= 8;
            if (v192 < (char *)v160)
            {
              v211 = *v192++;
              v191 |= v211;
            }
            v212 = v206 + 8;
            v197 = v206 >= 0x10;
            v206 += 8;
          }
          while (!v197);
        }
        v206 = v212 - 24;
        v214 = ((v191 >> (v212 - 24)) & 0xFFFFFF) << (v205 - 24);
        v215 = v205 - 24;
      }
      while (v206 < v215)
      {
        v191 <<= 8;
        if (v192 < (char *)v160)
        {
          v216 = *v192++;
          v191 |= v216;
        }
        v206 += 8;
      }
      v206 -= v215;
      v213 = (v191 >> v206) & (0xFFFFFFFF >> -(char)v215) | v214;
    }
    else
    {
      v213 = 0;
    }
    *(_QWORD *)(v210 + 48) = v207;
    v217 = v208 + v213;
    *(_DWORD *)(v210 + 4) = v217;
    v207 += v217;
    if (v207 > v209)
    {
      v352 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v352, "%s: page offset + page length > file length");
      v352->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      __cxa_throw(v352, (struct type_info *)off_1E1620B20, MEMORY[0x1E0DE42C0]);
    }
    v149 = v210 == (_QWORD)v194;
    v210 += 64;
  }
  while (!v149);
  v218 = v206 & 0xFFFFFFFFFFFFFFF8;
  v219 = *((unsigned __int16 *)v374 + 17);
  v370 = v219;
  v371 = v219 - 24;
  while (2)
  {
    v220 = v204;
    if (!(_DWORD)v219)
    {
      LODWORD(v223) = 0;
      goto LABEL_255;
    }
    if (v219 < 0x19)
    {
      v224 = 0;
      v225 = v219;
LABEL_252:
      while (v218 < v225)
      {
        v191 <<= 8;
        if (v192 < (char *)v160)
        {
          v226 = *v192++;
          v191 |= v226;
        }
        v218 += 8;
      }
      v218 -= v225;
      LODWORD(v225) = (v191 >> v218) & (0xFFFFFFFF >> -(char)v225);
      goto LABEL_254;
    }
    if (v218 > 0x17)
    {
      v222 = v218;
    }
    else
    {
      do
      {
        v191 <<= 8;
        if (v192 < (char *)v160)
        {
          v221 = *v192++;
          v191 |= v221;
        }
        v222 = v218 + 8;
        v197 = v218 >= 0x10;
        v218 += 8;
      }
      while (!v197);
    }
    v218 = v222 - 24;
    v225 = v371;
    v224 = ((v191 >> (v222 - 24)) & 0xFFFFFF) << v371;
    if (v371)
      goto LABEL_252;
LABEL_254:
    LODWORD(v223) = v225 | v224;
LABEL_255:
    *(_WORD *)(v220 + 8) = v223;
    v223 = v223;
    v227 = *(_QWORD *)(v220 + 24);
    v228 = *(_QWORD *)(v220 + 32);
    v229 = (v228 - v227) >> 3;
    if (v223 <= v229)
    {
      if (v223 < v229)
        *(_QWORD *)(v220 + 32) = v227 + 8 * v223;
    }
    else
    {
      v230 = v223 - v229;
      v231 = *(_QWORD *)(v220 + 40);
      if (v230 <= (v231 - v228) >> 3)
      {
        bzero(*(void **)(v220 + 32), 8 * v230);
        *(_QWORD *)(v220 + 32) = v228 + 8 * v230;
        goto LABEL_272;
      }
      v232 = v231 - v227;
      if (v232 >> 2 > (unint64_t)v223)
        v223 = v232 >> 2;
      if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFF8)
        v233 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v233 = v223;
      v234 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CG::DisplayListResource const*>>(v233);
      v236 = v235;
      v237 = v220;
      v238 = *(char **)(v220 + 32);
      v372 = v237;
      v239 = *(char **)(v237 + 24);
      v240 = &v234[8 * v229];
      bzero(v240, 8 * v230);
      v241 = v240;
      if (v238 == v239)
      {
        v220 = v372;
        v175 = v374;
      }
      else
      {
        v175 = v374;
        do
        {
          v242 = *((_QWORD *)v238 - 1);
          v238 -= 8;
          *((_QWORD *)v241 - 1) = v242;
          v241 -= 8;
        }
        while (v238 != v239);
        v220 = v372;
        v239 = *(char **)(v372 + 24);
      }
      *(_QWORD *)(v220 + 24) = v241;
      *(_QWORD *)(v220 + 32) = &v240[8 * v230];
      *(_QWORD *)(v220 + 40) = &v234[8 * v236];
      v219 = v370;
      if (v239)
      {
        operator delete(v239);
LABEL_272:
        v175 = v374;
      }
    }
    v204 = v220 + 64;
    if (v220 + 64 != *((_QWORD *)v175 + 7))
      continue;
    break;
  }
  v243 = *v369;
  if (*v369 != v204)
  {
    v244 = v218 & 0xFFFFFFFFFFFFFFF8;
    v245 = *((unsigned __int16 *)v374 + 18);
    v246 = *v369;
    do
    {
      v247 = *(unsigned int **)(v246 + 24);
      v248 = *(unsigned int **)(v246 + 32);
      while (v247 != v248)
      {
        if ((_DWORD)v245)
        {
          if (v245 < 0x19)
          {
            v252 = 0;
            v253 = v245;
          }
          else
          {
            if (v244 > 0x17)
            {
              v250 = v244;
            }
            else
            {
              do
              {
                v191 <<= 8;
                if (v192 < (char *)v160)
                {
                  v249 = *v192++;
                  v191 |= v249;
                }
                v250 = v244 + 8;
                v197 = v244 >= 0x10;
                v244 += 8;
              }
              while (!v197);
            }
            v244 = v250 - 24;
            v252 = ((v191 >> (v250 - 24)) & 0xFFFFFF) << (v245 - 24);
            v253 = v245 - 24;
          }
          while (v244 < v253)
          {
            v191 <<= 8;
            if (v192 < (char *)v160)
            {
              v254 = *v192++;
              v191 |= v254;
            }
            v244 += 8;
          }
          v244 -= v253;
          v251 = (v191 >> v244) & (0xFFFFFFFF >> -(char)v253) | v252;
        }
        else
        {
          v251 = 0;
        }
        *v247 = v251;
        v247 += 2;
      }
      v149 = v246 == v220;
      v246 += 64;
    }
    while (!v149);
    v255 = v244 & 0xFFFFFFFFFFFFFFF8;
    v256 = *((unsigned __int16 *)v374 + 19);
    v257 = v243;
    do
    {
      v258 = *(_QWORD *)(v257 + 24);
      v259 = *(_QWORD *)(v257 + 32);
      while (v258 != v259)
      {
        if ((_DWORD)v256)
        {
          if (v256 < 0x19)
          {
            v263 = 0;
            v264 = v256;
          }
          else
          {
            if (v255 > 0x17)
            {
              v261 = v255;
            }
            else
            {
              do
              {
                v191 <<= 8;
                if (v192 < (char *)v160)
                {
                  v260 = *v192++;
                  v191 |= v260;
                }
                v261 = v255 + 8;
                v197 = v255 >= 0x10;
                v255 += 8;
              }
              while (!v197);
            }
            v255 = v261 - 24;
            v263 = ((v191 >> (v261 - 24)) & 0xFFFFFF) << (v256 - 24);
            v264 = v256 - 24;
          }
          while (v255 < v264)
          {
            v191 <<= 8;
            if (v192 < (char *)v160)
            {
              v265 = *v192++;
              v191 |= v265;
            }
            v255 += 8;
          }
          v255 -= v264;
          v262 = (v191 >> v255) & (0xFFFFFFFF >> -(char)v264) | v263;
        }
        else
        {
          v262 = 0;
        }
        *(_DWORD *)(v258 + 4) = v262;
        v258 += 8;
      }
      v149 = v257 == v220;
      v257 += 64;
    }
    while (!v149);
    v266 = (unsigned __int16)*v364;
    v267 = v255 & 0xFFFFFFFFFFFFFFF8;
    if (*v364)
    {
      v268 = v374[5];
      v269 = v243;
      while (v266 < 0x19)
      {
        v272 = 0;
        v273 = v266;
        if (v266)
          goto LABEL_337;
LABEL_339:
        *(_DWORD *)(v269 + 12) = (v273 | v272) + v268;
        v149 = v269 == v220;
        v269 += 64;
        if (v149)
          goto LABEL_341;
      }
      if (v267 > 0x17)
      {
        v271 = v267;
      }
      else
      {
        do
        {
          v191 <<= 8;
          if (v192 < (char *)v160)
          {
            v270 = *v192++;
            v191 |= v270;
          }
          v271 = v267 + 8;
          v197 = v267 >= 0x10;
          v267 += 8;
        }
        while (!v197);
      }
      v267 = v271 - 24;
      v272 = ((v191 >> (v271 - 24)) & 0xFFFFFF) << (v266 - 24);
      v273 = v266 - 24;
LABEL_337:
      while (v267 < v273)
      {
        v191 <<= 8;
        if (v192 < (char *)v160)
        {
          v274 = *v192++;
          v191 |= v274;
        }
        v267 += 8;
      }
      v267 -= v273;
      LODWORD(v273) = (v191 >> v267) & (0xFFFFFFFF >> -(char)v273);
      goto LABEL_339;
    }
LABEL_341:
    v275 = (unsigned __int16)*v360;
    if (*v360)
    {
      v276 = v267 & 0xFFFFFFFFFFFFFFF8;
      v277 = v374[7];
      v278 = v243;
      while (v275 < 0x19)
      {
        v281 = 0;
        v282 = v275;
        if (v275)
          goto LABEL_357;
LABEL_359:
        *(_DWORD *)(v278 + 16) = (v282 | v281) + v277;
        v149 = v278 == v220;
        v278 += 64;
        if (v149)
          goto LABEL_361;
      }
      if (v276 > 0x17)
      {
        v280 = v276;
      }
      else
      {
        do
        {
          v191 <<= 8;
          if (v192 < (char *)v160)
          {
            v279 = *v192++;
            v191 |= v279;
          }
          v280 = v276 + 8;
          v197 = v276 >= 0x10;
          v276 += 8;
        }
        while (!v197);
      }
      v276 = v280 - 24;
      v281 = ((v191 >> (v280 - 24)) & 0xFFFFFF) << (v275 - 24);
      v282 = v275 - 24;
LABEL_357:
      while (v276 < v282)
      {
        v191 <<= 8;
        if (v192 < (char *)v160)
        {
          v283 = *v192++;
          v191 |= v283;
        }
        v276 += 8;
      }
      v276 -= v282;
      LODWORD(v282) = (v191 >> v276) & (0xFFFFFFFF >> -(char)v282);
      goto LABEL_359;
    }
LABEL_361:
    *(_QWORD *)(v243 + 56) = v376[5];
    if (v204 - v243 >= 0x41)
    {
      *(_QWORD *)(v243 + 120) = 1;
      if (v243 + 128 < v204)
      {
        v284 = (*(_DWORD *)(v243 + 64) + 1);
        v285 = (_QWORD *)(v243 + 184);
        v286 = (_QWORD *)(v243 + 184);
        do
        {
          *v286 = v284;
          v286 += 8;
          v284 += *((unsigned int *)v285 - 14);
          v197 = (unint64_t)(v285 - 7) >= v220;
          v285 = v286;
        }
        while (!v197);
      }
    }
  }
LABEL_366:
  v287 = v384;
  v384 = 0;
  std::unique_ptr<CGPageOffsetHintTable>::reset[abi:se180100](v367, v287);
  std::unique_ptr<CGPageOffsetHintTable>::reset[abi:se180100](&v384, 0);
  v373 = CFDataGetLength(v365);
  v288 = (const __CFNumber *)CFDictionaryGetValue(v366, CFSTR("S"));
  v289 = v288;
  if (!v288)
  {
    v357 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v357, "Required parameter: \"S\" missing from hint offsets dictionary");
    goto LABEL_475;
  }
  v290 = CFGetTypeID(v288);
  if (v290 != CFNumberGetTypeID())
  {
    v357 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v357, "Parameter: \"S\" in hint offsets dictionary has wrong type");
    goto LABEL_475;
  }
  CFNumberGetValue(v289, kCFNumberSInt32Type, &v385);
  CGPDFHintTableSet::rangeCheck(v385, 0, v373);
  v291 = v385;
  v292 = CFDataGetBytePtr(v365);
  if (!v292)
  {
    v358 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v358, "CFDataGetBytePtr(hint_data) returned NULL");
    goto LABEL_471;
  }
  value[0] = (CGPDFInteger)&v292[v291];
  v293 = CFDataGetBytePtr(v365);
  v294 = CFDataGetLength(v365);
  if (*(_QWORD *)(*v367 + 56) == *(_QWORD *)(*v367 + 48))
  {
    v358 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v358, "_page_entries array is zero-length");
LABEL_471:
    v358->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    __cxa_throw(v358, (struct type_info *)off_1E1620B20, MEMORY[0x1E0DE42C0]);
  }
  v295 = v294;
  v296 = (unsigned int *)operator new();
  *((_QWORD *)v296 + 4) = 0;
  v375 = v296 + 8;
  v297 = &v293[v295];
  *((_QWORD *)v296 + 5) = 0;
  *((_QWORD *)v296 + 6) = 0;
  CGPDFHintTableSet::copyFromBuf(v296, (unsigned int *)value, (const unsigned __int8 **)&v293[v295], v298);
  CGPDFHintTableSet::rangeCheck(*v296, 0, v376[1]);
  CGPDFHintTableSet::copyFromBuf(v296 + 1, (unsigned int *)value, (const unsigned __int8 **)&v293[v295], v299);
  CGPDFHintTableSet::rangeCheck(v296[1], 0, v376[3]);
  CGPDFHintTableSet::copyFromBuf(v296 + 2, (unsigned int *)value, (const unsigned __int8 **)&v293[v295], v300);
  CGPDFHintTableSet::rangeCheck(v296[2], 0, v376[1]);
  CGPDFHintTableSet::copyFromBuf(v296 + 3, (unsigned int *)value, (const unsigned __int8 **)&v293[v295], v301);
  CGPDFHintTableSet::rangeCheck(v296[3], 0, v376[1]);
  CGPDFHintTableSet::copyFromBuf((_WORD *)v296 + 8, (unsigned __int16 *)value, (const unsigned __int8 **)&v293[v295], v302);
  CGPDFHintTableSet::rangeCheck(*((unsigned __int16 *)v296 + 8), 0, 32);
  CGPDFHintTableSet::copyFromBuf(v296 + 5, (unsigned int *)value, (const unsigned __int8 **)&v293[v295], v303);
  CGPDFHintTableSet::rangeCheck(v296[5], 0, 0x7FFFFFFFLL);
  CGPDFHintTableSet::copyFromBuf((_WORD *)v296 + 12, (unsigned __int16 *)value, (const unsigned __int8 **)&v293[v295], v304);
  CGPDFHintTableSet::rangeCheck(*((unsigned __int16 *)v296 + 12), 0, 32);
  std::vector<CGSharedObjectGroupEntry>::reserve((void **)v296 + 4, v296[3]);
  if (v296[3])
  {
    v305 = 0;
    v306 = 0;
    v307 = 0;
    v308 = (const UInt8 *)value[0];
    v309 = *((unsigned __int16 *)v296 + 12);
    while (v309 < 0x19)
    {
      v312 = 0;
      v313 = v309;
      if (v309)
        goto LABEL_386;
LABEL_388:
      v315 = v296[5] + (v313 | v312);
      v317 = *((_QWORD *)v296 + 5);
      v316 = *((_QWORD *)v296 + 6);
      if (v317 >= v316)
      {
        v319 = (uint64_t)(v317 - *v375) >> 4;
        v320 = v319 + 1;
        if ((unint64_t)(v319 + 1) >> 60)
          std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
        v321 = v316 - *v375;
        if (v321 >> 3 > v320)
          v320 = v321 >> 3;
        if ((unint64_t)v321 >= 0x7FFFFFFFFFFFFFF0)
          v322 = 0xFFFFFFFFFFFFFFFLL;
        else
          v322 = v320;
        v323 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(v322);
        v325 = &v323[16 * v319];
        *(_DWORD *)v325 = v315;
        *((_QWORD *)v325 + 1) = 0;
        v327 = (char *)*((_QWORD *)v296 + 4);
        v326 = (char *)*((_QWORD *)v296 + 5);
        v328 = v325;
        if (v326 != v327)
        {
          do
          {
            *((_OWORD *)v328 - 1) = *((_OWORD *)v326 - 1);
            v328 -= 16;
            v326 -= 16;
          }
          while (v326 != v327);
          v326 = (char *)*v375;
        }
        v318 = v325 + 16;
        *((_QWORD *)v296 + 4) = v328;
        *((_QWORD *)v296 + 5) = v325 + 16;
        *((_QWORD *)v296 + 6) = &v323[16 * v324];
        if (v326)
          operator delete(v326);
      }
      else
      {
        *(_DWORD *)v317 = v315;
        *(_QWORD *)(v317 + 8) = 0;
        v318 = (char *)(v317 + 16);
      }
      *((_QWORD *)v296 + 5) = v318;
      if (++v305 >= (unint64_t)v296[3])
        goto LABEL_404;
    }
    if (v306 > 0x17)
    {
      v311 = v306;
    }
    else
    {
      do
      {
        v307 <<= 8;
        if (v308 < v297)
        {
          v310 = *v308++;
          v307 |= v310;
        }
        v311 = v306 + 8;
        v197 = v306 >= 0x10;
        v306 += 8;
      }
      while (!v197);
    }
    v306 = v311 - 24;
    v312 = ((v307 >> (v311 - 24)) & 0xFFFFFF) << (v309 - 24);
    v313 = v309 - 24;
LABEL_386:
    while (v306 < v313)
    {
      v307 <<= 8;
      if (v308 < v297)
      {
        v314 = *v308++;
        v307 |= v314;
      }
      v306 += 8;
    }
    v306 -= v313;
    LODWORD(v313) = (v307 >> v306) & (0xFFFFFFFF >> -(char)v313);
    goto LABEL_388;
  }
  v318 = (char *)*((_QWORD *)v296 + 5);
LABEL_404:
  v329 = v296[2];
  v330 = (char *)*v375;
  if ((uint64_t)&v318[-*v375] >> 4 < v329)
    v329 = (uint64_t)&v318[-*v375] >> 4;
  v331 = *(unsigned int *)(v376[8] + 4);
  v332 = v376[6];
  if (v332 <= v331)
    v331 = (v331 + *((_DWORD *)v376 + 14));
  v151 = v365;
  Mutable = v366;
  if (v329)
  {
    v333 = 16 * v329;
    v334 = (uint64_t *)(v330 + 8);
    do
    {
      *v334 = v331;
      v331 += *((unsigned int *)v334 - 2);
      v334 += 2;
      v333 -= 16;
    }
    while (v333);
  }
  v335 = &v330[16 * v329];
  v336 = v296[1];
  if (v332 <= v336)
    v336 = (v336 + *((_DWORD *)v376 + 14));
  while (v335 != v318)
  {
    *((_QWORD *)v335 + 1) = v336;
    v337 = *(_DWORD *)v335;
    v335 += 16;
    v336 += v337;
  }
  v338 = v376[9];
  v376[9] = (uint64_t)v296;
  if (v338)
    std::default_delete<CGSharedObjectHintTable>::operator()[abi:se180100](v338);
  v19 = v362;
  v15 = v363;
  v139 = v361;
  v339 = (const __CFNumber *)CFDictionaryGetValue(v366, CFSTR("O"));
  v340 = v339;
  if (v339)
  {
    v341 = CFGetTypeID(v339);
    if (v341 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v340, kCFNumberSInt32Type, &v385);
      CGPDFHintTableSet::rangeCheck(v385, 0, v373);
      CGPDFHintTableSet::readGenericHintTable((CGPDFHintTableSet *)value, (const __CFData *)v376, v365, v385);
      v342 = v376[10];
      v376[10] = value[0];
      if (v342)
        MEMORY[0x186DC23C4](v342, 0x1000C40451B5BE8);
      goto LABEL_421;
    }
    v357 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v357, "Parameter: \"O\" in hint offsets dictionary has wrong type");
LABEL_475:
    v357->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    __cxa_throw(v357, (struct type_info *)off_1E1620B20, MEMORY[0x1E0DE42C0]);
  }
LABEL_421:
  v343 = (const __CFNumber *)CFDictionaryGetValue(v366, CFSTR("E"));
  v344 = v343;
  if (v343)
  {
    v345 = CFGetTypeID(v343);
    if (v345 != CFNumberGetTypeID())
    {
      v357 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v357, "Parameter: \"E\" in hint offsets dictionary has wrong type");
      goto LABEL_475;
    }
    CFNumberGetValue(v344, kCFNumberSInt32Type, &v385);
    CGPDFHintTableSet::rangeCheck(v385, 0, v373);
    CGPDFHintTableSet::readGenericHintTable((CGPDFHintTableSet *)value, (const __CFData *)v376, v365, v385);
    v346 = v376[11];
    v376[11] = value[0];
    if (v346)
      MEMORY[0x186DC23C4](v346, 0x1000C40451B5BE8);
  }
LABEL_425:
  if (v139)
    CFRelease(v139);
  v139 = v151;
LABEL_428:
  CFRelease(v139);
  v187 = v376;
LABEL_429:
  if (Mutable)
    CFRelease(Mutable);
  pdf_object_scanner_release(v368);
  v15[4] = v187;
  if (!v187)
  {
LABEL_432:
    if (v19 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_433;
    v347 = v15[3];
    if (v347)
      CFRelease(v347);
    v15[3] = 0;
  }
LABEL_438:
  *((_BYTE *)v15 + 201) = 1;
  return v15;
}

void sub_184A47E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,_QWORD *a28)
{
  void *v28;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;

  if (a2)
  {
    __cxa_free_exception(v28);
    v31 = a28[11];
    a28[11] = 0;
    if (v31)
      MEMORY[0x186DC23C4](v31, 0x1000C40451B5BE8);
    v32 = a28[10];
    a28[10] = 0;
    if (v32)
      MEMORY[0x186DC23C4](v32, 0x1000C40451B5BE8);
    v33 = a28[9];
    a28[9] = 0;
    if (v33)
      std::default_delete<CGSharedObjectHintTable>::operator()[abi:se180100](v33);
    std::unique_ptr<CGPageOffsetHintTable>::reset[abi:se180100](a21, 0);
    MEMORY[0x186DC23C4](a28, 0x10A1C40AA68228DLL);
    v34 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      (*(void (**)(void *))(*(_QWORD *)v34 + 16))(v34);
      pdf_error("CGHintTableSet constructor failed with exception: %s");
    }
    else
    {
      pdf_error("CGHintTableSet constructor failed with an unknown exception:");
    }
    __cxa_end_catch();
    JUMPOUT(0x184A47A24);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *CGPDFArraySetObjectReference(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *i;

  if (result)
  {
    result[5] = a2;
    result[6] = a3;
    for (i = (_QWORD *)result[3]; i; i = (_QWORD *)*i)
      result = (_QWORD *)CGPDFObjectSetOwningReference((uint64_t)i, a2, a3);
  }
  return result;
}

_QWORD *xref_table_create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unsigned __int8 *v75;
  unsigned int v76;
  _WORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unint64_t v96;

  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
    v11 = *(_QWORD **)(v10 + 8);
  else
    v11 = 0;
  CGPDFSourceSetPosition((uint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  if (!CGPDFSourceMatch((uint64_t)v11, (uint64_t)"xref", v12, v13, v14, v15, v16, v17))
  {
    pdf_error("failed to find start of cross-reference section.");
    return 0;
  }
  v18 = malloc_type_calloc(1uLL, 0x30uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (v18)
  {
    v25 = 0;
    v94 = 0;
    *v18 = 0;
    v18[1] = a2;
    while (1)
    {
      v96 = 0;
      if (!read_integer(v11, &v96, v19, v20, v21, v22, v23, v24)
        || (v32 = v96, (v96 & 0x8000000000000000) != 0))
      {
        if (!v25)
          goto LABEL_74;
        v79 = 0;
        do
        {
          v80 = v25;
          v81 = v79;
          v25 = (_QWORD *)*v25;
          *v80 = v79;
          v79 = v80;
        }
        while (v25);
        if (!v81)
        {
          v92 = (_QWORD *)v80[1];
          if ((uint64_t)v92[1] >= 1 && *v92 && !v92[3])
          {
            pdf_error("invalid first entry in cross-reference table.");
            v90 = v80;
            goto LABEL_73;
          }
        }
        v18[5] = v80;
        if (!CGPDFSourceMatch((uint64_t)v11, (uint64_t)"trailer", v26, v27, v28, v29, v30, v31))
        {
          pdf_error("invalid cross-reference section: missing trailer.");
          goto LABEL_75;
        }
        if (v11)
        {
          v88 = v11[11];
          if (v11[18])
          {
            v89 = v11[24];
            v88 += v11[15];
          }
          else
          {
            v89 = v11[16];
          }
          v93 = v89 - v88 + v11[14] - 7;
        }
        else
        {
          v93 = -8;
        }
        v18[3] = v93;
        if ((read_dictionary(*(uint64_t **)(a1 + 16), v18 + 2, v82, v83, v84, v85, v86, v87) & 1) == 0)
        {
          pdf_error("missing or invalid cross-reference trailer.");
          goto LABEL_75;
        }
        if (CGPDFDictionaryGetOffset((CGPDFDictionary *)v18[2], "XRefStm", &v94))
          v18[4] = CGPDFXRefStreamCreate(*(const void ***)a1, v94, 0);
        return v18;
      }
      if (v96 > 0x989680)
      {
        pdf_error("invalid cross-reference starting object.");
        goto LABEL_72;
      }
      v96 = 0;
      if (!read_integer(v11, &v96, v26, v27, v28, v29, v30, v31)
        || (v33 = v96, (v96 & 0x8000000000000000) != 0))
      {
        pdf_error("missing or invalid cross-reference count.");
        goto LABEL_72;
      }
      if (v96 > 0x989680 || v96 && (uint64_t)(v32 + v96) > 10000001)
      {
        pdf_error("invalid cross-reference count.");
        goto LABEL_72;
      }
      v34 = malloc_type_calloc(1uLL, 8 * v96 + 24, 0x33BCE901uLL);
      __CFSetLastAllocationEventName();
      if (!v34)
        goto LABEL_72;
      *v34 = v32;
      v34[1] = v33;
      if (v11)
      {
        v35 = v11[11];
        if (v11[18])
        {
          v36 = v11[24];
          v35 += v11[15];
        }
        else
        {
          v36 = v11[16];
        }
        v37 = v36 - v35 + v11[14];
      }
      else
      {
        v37 = -1;
      }
      CGPDFSourcePreflightLargeRead((uint64_t)v11, v37, 20 * v33);
      if ((uint64_t)v34[1] >= 1)
        break;
LABEL_51:
      v78 = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
      *v78 = v25;
      v78[1] = v34;
      v25 = v78;
    }
    v45 = 0;
    while (1)
    {
      v46 = v11[15];
      if (v46)
        goto LABEL_27;
      if (CGPDFSourceRefill((uint64_t)v11, v38, v39, v40, v41, v42, v43, v44))
        break;
      v48 = -1;
LABEL_28:
      v96 = 0;
      v95 = v48;
      skip_whitespace((uint64_t)v11, &v95, v39, v40, v41, v42, v43, v44);
      if (!read_integer_14824((uint64_t)v11, &v96, &v95, v49, v50, v51, v52, v53))
      {
        pdf_error("missing or invalid cross-reference offset.");
        goto LABEL_61;
      }
      v60 = "missing or invalid cross-reference offset.";
      if ((v96 & 0x8000000000000000) != 0)
        goto LABEL_60;
      v61 = &v34[v45];
      v61[3] = v96;
      if (!skip_whitespace((uint64_t)v11, &v95, v54, v55, v56, v57, v58, v59))
      {
LABEL_53:
        pdf_error("invalid cross-reference entry: missing separator.");
        goto LABEL_61;
      }
      if (!read_integer_14824((uint64_t)v11, &v96, &v95, v62, v63, v64, v65, v66))
      {
        pdf_error("missing or invalid cross-reference generation number.");
        goto LABEL_61;
      }
      v73 = v96;
      if (!skip_whitespace((uint64_t)v11, &v95, v67, v68, v69, v70, v71, v72))
        goto LABEL_53;
      if (v95 == 110)
      {
        if (v73 >> 16)
        {
          v60 = "Object entry has invalid cross-reference generation number.";
LABEL_60:
          pdf_error(v60);
LABEL_61:
          free(v34);
LABEL_72:
          v90 = v25;
LABEL_73:
          xref_section_list_release(v90);
LABEL_74:
          v18[5] = 0;
LABEL_75:
          xref_table_release((uint64_t)v18);
          return 0;
        }
        LODWORD(v73) = (unsigned __int16)v73;
      }
      else
      {
        if (v95 != 102)
        {
          goto LABEL_61;
        }
        LODWORD(v73) = 0;
        v61[3] = 0;
      }
      v74 = v11[15];
      if (!v74)
      {
        if (!CGPDFSourceRefill((uint64_t)v11, v38, v39, v40, v41, v42, v43, v44))
          goto LABEL_57;
        v74 = v11[15];
      }
      v75 = (unsigned __int8 *)v11[16];
      v11[15] = v74 - 1;
      v11[16] = v75 + 1;
      v76 = *v75;
      if (v76 > 0x20)
      {
LABEL_57:
        pdf_error("invalid cross-reference entry: missing terminator.");
        goto LABEL_61;
      }
      v60 = "invalid cross-reference entry: missing terminator.";
      if (((1 << v76) & 0x100002400) == 0)
        goto LABEL_60;
      if ((_DWORD)v73)
      {
        v77 = (_WORD *)v34[2];
        if (!v77)
        {
          v77 = malloc_type_calloc(1uLL, 2 * v34[1], 0x33BCE901uLL);
          __CFSetLastAllocationEventName();
          if (!v77)
            goto LABEL_61;
          v34[2] = v77;
        }
        v77[v45] = v73;
      }
      if (++v45 >= v34[1])
        goto LABEL_51;
    }
    v46 = v11[15];
LABEL_27:
    v47 = (unsigned __int8 *)v11[16];
    v11[15] = v46 - 1;
    v11[16] = v47 + 1;
    v48 = *v47;
    goto LABEL_28;
  }
  return v18;
}

uint64_t skip_whitespace(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;

  v10 = 0;
  v11 = *a2;
  while (v11 <= 0x20 && ((1 << v11) & 0x100003601) != 0)
  {
    v12 = *(_QWORD *)(a1 + 120);
    if (v12)
      goto LABEL_7;
    v13 = CGPDFSourceRefill(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v10 = 1;
    v11 = -1;
    if (v13)
    {
      v12 = *(_QWORD *)(a1 + 120);
LABEL_7:
      v14 = *(unsigned __int8 **)(a1 + 128);
      *(_QWORD *)(a1 + 120) = v12 - 1;
      *(_QWORD *)(a1 + 128) = v14 + 1;
      v11 = *v14;
      v10 = 1;
    }
  }
  *a2 = v11;
  return v10 & 1;
}

uint64_t read_integer(_QWORD *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unint64_t v24;
  char v25;
  uint64_t result;

  CGPDFSourceSkipWhitespace(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v17 = a1[15];
  if (!v17)
  {
    if (!CGPDFSourceRefill((uint64_t)a1, v10, v11, v12, v13, v14, v15, v16))
    {
      v22 = 0;
      LODWORD(v21) = -1;
      goto LABEL_29;
    }
    v17 = a1[15];
  }
  v18 = v17 - 1;
  v19 = (unsigned __int8 *)a1[16];
  v20 = v19 + 1;
  a1[15] = v18;
  a1[16] = v19 + 1;
  v21 = *v19;
  if ((v21 - 58) < 0xFFFFFFF6)
  {
LABEL_5:
    v22 = 0;
    goto LABEL_29;
  }
  while ((_DWORD)v21 == 48)
  {
    if (!v18)
    {
      if (!CGPDFSourceRefill((uint64_t)a1, v21, v11, v12, v13, v14, v15, v16))
      {
        v24 = 0;
        LODWORD(v21) = -1;
        goto LABEL_23;
      }
      v18 = a1[15];
      v20 = (unsigned __int8 *)a1[16];
    }
    v23 = v20;
    --v18;
    ++v20;
    a1[15] = v18;
    a1[16] = v20;
    v21 = *v23;
  }
  if ((v21 - 48) > 9)
  {
    v24 = 0;
    goto LABEL_23;
  }
  v24 = 0;
  v25 = 0;
  while (1)
  {
    v25 |= v24 > 0x1999999999999998;
    v24 = 10 * v24 + v21 - 48;
    if (!v18)
      break;
LABEL_16:
    a1[15] = --v18;
    a1[16] = v20 + 1;
    v21 = *v20++;
    if ((v21 - 48) >= 0xA)
    {
      if ((v25 & 1) != 0)
        goto LABEL_5;
      goto LABEL_23;
    }
  }
  if (CGPDFSourceRefill((uint64_t)a1, v21, v11, v12, v13, v14, v15, v16))
  {
    v18 = a1[15];
    v20 = (unsigned __int8 *)a1[16];
    goto LABEL_16;
  }
  LODWORD(v21) = -1;
  if ((v25 & 1) != 0)
    goto LABEL_5;
LABEL_23:
  if (a2)
    *a2 = v24;
  v22 = 1;
  if ((v21 + 1) <= 0x3F && ((1 << (v21 + 1)) & 0xA001064200006C03) != 0
    || (result = 0, (v21 - 91) <= 0x22) && ((1 << (v21 - 91)) & 0x500000005) != 0)
  {
LABEL_29:
    CGPDFSourceUngetc(a1, v21);
    return v22;
  }
  return result;
}

_QWORD *CGPDFSourceSkipWhitespace(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 *v10;

  v9 = a1[15];
  while (v9)
  {
LABEL_5:
    --v9;
    v10 = (unsigned __int8 *)a1[16];
    a1[15] = v9;
    a1[16] = v10 + 1;
    a2 = *v10;
    if (a2 > 0x20 || ((1 << a2) & 0x100003601) == 0)
      return CGPDFSourceUngetc(a1, a2);
  }
  if (CGPDFSourceRefill((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8))
  {
    v9 = a1[15];
    goto LABEL_5;
  }
  LODWORD(a2) = -1;
  return CGPDFSourceUngetc(a1, a2);
}

BOOL CGPDFSourceMatch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v8;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;

  v8 = (_BYTE *)a2;
  do
  {
    v10 = *v8;
    if (!*v8)
      break;
    v11 = *(_QWORD *)(a1 + 120);
    if (!v11)
    {
      if (!CGPDFSourceRefill(a1, a2, a3, a4, a5, a6, a7, a8))
        return v10 == 0;
      v11 = *(_QWORD *)(a1 + 120);
    }
    ++v8;
    v12 = *(unsigned __int8 **)(a1 + 128);
    *(_QWORD *)(a1 + 120) = v11 - 1;
    *(_QWORD *)(a1 + 128) = v12 + 1;
  }
  while (*v12 == v10);
  return v10 == 0;
}

void CGPDFSourcePreflightLargeRead(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  char *v8;

  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4)
    {
      v5 = a3;
      if (a3 > 2 * *(_QWORD *)(a1 + 96))
      {
        v6 = *(_QWORD *)(v4 + 272);
        if (v6)
        {
          if (CGPropertiesGetProperty(v6, CFSTR("kCGDataProviderHasHighLatency")))
          {
            if (v5 >= 0x1000000)
              v5 = 0x1000000;
            v8 = (char *)malloc_type_malloc(v5, 0xC6C9CD0AuLL);
            CGDataProviderGetBytesAtPosition(*(_QWORD *)(a1 + 40), v8, a2, v5);
            free(v8);
          }
        }
      }
    }
  }
}

void *xref_read_linearization_dictionary(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  uint64_t Length;
  uint64_t v67;
  size_t BytesAtPosition;
  double v69;
  uint64_t v71;
  CGPDFArrayRef v72;
  CGPDFReal value;
  CGPDFInteger v74;
  _OWORD v75[2];
  void *v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v9 = a1[11];
    if (a1[18])
    {
      v10 = a1[24];
      v9 += a1[15];
    }
    else
    {
      v10 = a1[16];
    }
    v11 = v10 - v9 + a1[14];
  }
  else
  {
    v11 = -1;
  }
  value = 0.0;
  v74 = 0;
  v72 = 0;
  CGPDFSourceSetPosition((uint64_t)a1, 1024, a3, a4, a5, a6, a7, a8);
  v12 = CGPDFSourceReverseSearch(a1, "/Linearized", 0, 0, &v71);
  CGPDFSourceSetPosition((uint64_t)a1, v11, v13, v14, v15, v16, v17, v18);
  v19 = 0;
  if (!v12)
    return v19;
  v20 = malloc_type_malloc(0x20uLL, 0x566C45D1uLL);
  __CFSetLastAllocationEventName();
  if (!v20)
    return 0;
  *v20 = 0;
  v20[1] = a1;
  v20[2] = pdf_lexer_create(0, a1, 0);
  *((_BYTE *)v20 + 24) = 0;
  CGPDFSourceSetPosition(v20[1], 0, v21, v22, v23, v24, v25, v26);
  v76 = 0;
  memset(v75, 0, sizeof(v75));
  if (pdf_lexer_scan(v20[2], (uint64_t)v75, v27, v28, v29, v30, v31, v32) != 4
    || pdf_lexer_scan(v20[2], (uint64_t)v75, v33, v34, v35, v36, v37, v38) != 4
    || pdf_lexer_scan(v20[2], (uint64_t)v75, v39, v40, v41, v42, v43, v44) != 16)
  {
    v57 = DWORD2(v75[0]);
    goto LABEL_18;
  }
  if (!pdf_object_scanner_read_object(v20, (uint64_t)v75, v45, v46, v47, v48, v49, v50))
  {
LABEL_20:
    v19 = 0;
    goto LABEL_21;
  }
  v57 = DWORD2(v75[0]);
  if (DWORD2(v75[0]) != 8)
  {
LABEL_18:
    if ((v57 - 5) <= 4)
      pdf_object_release_compound_value((uint64_t)v75);
    goto LABEL_20;
  }
  v19 = v76;
  if (pdf_lexer_scan(v20[2], (uint64_t)v75, v51, v52, v53, v54, v55, v56) != 17 && v19)
  {
    CFRelease(v19);
    goto LABEL_20;
  }
LABEL_21:
  pdf_lexer_release(v20[2]);
  free(v20);
  if (v19)
  {
    if (!CGPDFDictionaryGetNumber((CGPDFDictionaryRef)v19, "Linearized", &value))
    {
LABEL_45:
      CFRelease(v19);
      return 0;
    }
    if (value != 1.0)
    {
      pdf_log("unsupported linearization version.", value);
      goto LABEL_45;
    }
    if (!CGPDFDictionaryGetInteger((CGPDFDictionaryRef)v19, "L", &v74))
    {
      pdf_log("missing or invalid linearization length.", v65);
      goto LABEL_45;
    }
    Length = CGPDFSourceGetLength((uint64_t)a1, v58, v59, v60, v61, v62, v63, v64);
    if (Length == 0x7FFFFFFFFFFFFFFFLL && a1)
    {
      v67 = a1[5];
      if (v67)
      {
        BytesAtPosition = CGDataProviderGetBytesAtPosition(v67, (char *)v75, v74 - 1023, 0x400uLL);
        Length = 0x7FFFFFFFFFFFFFFFLL;
        if (BytesAtPosition == 1023)
        {
          Length = v74;
          if (a1[2] == 0x7FFFFFFFFFFFFFFFLL)
            a1[2] = v74;
        }
      }
      else
      {
        Length = 0x7FFFFFFFFFFFFFFFLL;
      }
    }
    if (v74 != Length)
    {
      pdf_log("linearization length mismatch.");
      goto LABEL_45;
    }
    if (!CGPDFDictionaryGetArray((CGPDFDictionaryRef)v19, "H", &v72))
      goto LABEL_42;
    if (!v72 || *((_QWORD *)v72 + 2) != 2)
    {
      pdf_log("invalid hints array (size = %zu)", v69);
      goto LABEL_45;
    }
    if (!CGPDFDictionaryGetInteger((CGPDFDictionaryRef)v19, "O", &v74)
      || !CGPDFDictionaryGetInteger((CGPDFDictionaryRef)v19, "E", &v74)
      || !CGPDFDictionaryGetInteger((CGPDFDictionaryRef)v19, "N", &v74)
      || !CGPDFDictionaryGetInteger((CGPDFDictionaryRef)v19, "T", &v74))
    {
LABEL_42:
      pdf_log("missing a required parameter (%s) in Linearization dictionary.", v69);
      goto LABEL_45;
    }
  }
  return v19;
}

uint64_t read_dictionary(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  _OWORD v10[2];
  uint64_t v11;

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  result = pdf_object_scanner_read_object(a1, (uint64_t)v10, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    if (DWORD2(v10[0]) == 8)
    {
      if (a2)
        *a2 = v11;
      return 1;
    }
    else
    {
      if ((DWORD2(v10[0]) - 5) <= 4)
        pdf_object_release_compound_value((uint64_t)v10);
      return 0;
    }
  }
  return result;
}

_QWORD *CGPDFXRefTableCreate(const void **a1, uint64_t a2, int a3)
{
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v4 = a2;
  v23 = a2;
  v6 = malloc_type_calloc(1uLL, 0x18uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (v6)
  {
    *v6 = a1;
    v7 = pdf_object_scanner_create_with_xref(a1, 0);
    v6[2] = v7;
    if (v7)
    {
      v14 = v6 + 1;
      while (1)
      {
        v15 = xref_table_create((uint64_t)v6, v4, v8, v9, v10, v11, v12, v13);
        if (!v15)
          break;
        v16 = v15;
        v17 = (_QWORD *)*v14;
        v18 = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
        *v18 = v17;
        v18[1] = v16;
        *v14 = v18;
        if (!a3)
          goto LABEL_14;
        if (!CGPDFDictionaryGetOffset((CGPDFDictionary *)v16[2], "Prev", &v23))
        {
          v18 = (_QWORD *)*v14;
LABEL_14:
          v21 = 0;
          do
          {
            v22 = v18;
            v18 = (_QWORD *)*v18;
            *v22 = v21;
            v21 = v22;
          }
          while (v18);
          *v14 = v22;
          if (!CGPDFDictionaryGetObject(*(CGPDFDictionaryRef *)(v22[1] + 16), "Root", 0))
            break;
          return v6;
        }
        v4 = v23;
        if (!v23)
          break;
        v19 = v6 + 1;
        while (1)
        {
          v19 = (_QWORD *)*v19;
          if (!v19)
            break;
          if (*(_QWORD *)(v19[1] + 8) == v23)
            goto LABEL_11;
        }
      }
    }
LABEL_11:
    CGPDFXRefTableRelease((uint64_t)v6);
    return 0;
  }
  return v6;
}

BOOL CGPDFDictionaryGetOffset(CGPDFDictionary *a1, const char *a2, _QWORD *a3)
{
  _BOOL8 result;
  int v5;
  BOOL v6;
  CGPDFObjectRef value;

  value = 0;
  result = CGPDFDictionaryGetObject(a1, a2, &value);
  if (result)
  {
    if (value && ((v5 = *((_DWORD *)value + 2), v5 != 12) ? (v6 = v5 == 3) : (v6 = 1), v6))
    {
      if (a3)
        *a3 = *((_QWORD *)value + 4);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_QWORD *pdf_object_scanner_create_with_xref(const void **a1, int a2)
{
  _QWORD *v4;
  const void *v5;
  int v6;

  v4 = malloc_type_malloc(0x20uLL, 0x566C45D1uLL);
  __CFSetLastAllocationEventName();
  if (v4)
  {
    v5 = *a1;
    *v4 = a1;
    v4[1] = v5;
    if (a2)
      v6 = 2;
    else
      v6 = 0;
    v4[2] = pdf_lexer_create((uint64_t)a1, v5, v6);
    *((_BYTE *)v4 + 24) = a2;
  }
  return v4;
}

uint64_t CGPDFSourceForwardSearch(_QWORD *a1, char *__s, char *a3, uint64_t *a4)
{
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  int64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char *v48;
  char v50;
  uint64_t *v51;
  char *v52;
  int __c;

  if (!__s)
    return 0;
  v7 = strlen(__s);
  v11 = v7;
  if (a1)
  {
    v12 = a1[11];
    if (a1[18])
    {
      v13 = a1[24];
      v12 += a1[15];
    }
    else
    {
      v13 = a1[16];
    }
    v16 = v13 - v12;
    v14 = a1[2];
    if (v14 == -1)
      _CGHandleAssert("CGPDFSourceGetLength", 179, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/PDF/Reader/CGPDFSource.c", "source->length != (pdf_off_t)-1", "source length would overflow", v8, v9, v10, v50);
    v15 = v16 + a1[14];
  }
  else
  {
    v14 = 0;
    v15 = -1;
  }
  if (v14 < (uint64_t)(v15 + v7))
    return 0;
  v51 = a4;
  v18 = 64;
  do
  {
    v19 = v18;
    v18 *= 2;
  }
  while (v19 < v11);
  LOBYTE(__c) = 0;
  v20 = (char *)malloc_type_malloc(v18, 0x611A2241uLL);
  v27 = v20;
  v17 = 0;
  if (v15 >= v14)
    goto LABEL_42;
  v52 = v20;
  while (1)
  {
    if (v19 + v15 > v14)
      v19 = v14 - v15;
    CGPDFSourceSetPosition((uint64_t)a1, v15, v21, v22, v23, v24, v25, v26);
    if (CGPDFSourceRead((uint64_t)a1, (uint64_t)v27, v19, v28, v29, v30, v31, v32) != v19)
    {
      pdf_error("failed to read %zu bytes at offset %lld.", v19, v15);
LABEL_41:
      v17 = 0;
      goto LABEL_42;
    }
    v33 = &v27[v19];
    v34 = v15;
    if (v19 >= 1)
      break;
LABEL_34:
    v15 += v19;
    v27 = v52;
    if (v15 >= v14)
      goto LABEL_41;
  }
  while (1)
  {
    v35 = v11 + v34;
    if (*v27 == *__s && v35 <= v14)
    {
      if (&v27[v11] > v33)
      {
        CGPDFSourceSetPosition((uint64_t)a1, v34, v21, v22, v23, v24, v25, v26);
        if (CGPDFSourceRead((uint64_t)a1, (uint64_t)v27, v11, v37, v38, v39, v40, v41) != v11)
        {
          pdf_error("failed to read %zu bytes at offset %lld.", v11, v34);
          goto LABEL_39;
        }
      }
      if (!strncmp(v27, __s, v11))
        break;
    }
LABEL_23:
    ++v27;
    ++v34;
    if (v27 >= v33)
      goto LABEL_34;
  }
  if (!a3 || v35 >= v14)
  {
LABEL_36:
    v27 = v52;
    *v51 = v34;
    v17 = 1;
    goto LABEL_42;
  }
  CGPDFSourceSetPosition((uint64_t)a1, v11 + v34, v21, v22, v23, v24, v25, v26);
  if (CGPDFSourceRead((uint64_t)a1, (uint64_t)&__c, 1uLL, v42, v43, v44, v45, v46) == 1)
  {
    v47 = (char)__c;
    v48 = strchr(a3, (char)__c);
    if (!v47 || v48)
      goto LABEL_36;
    goto LABEL_23;
  }
  pdf_error("failed to read %zu bytes at offset %lld.", 1uLL, v11 + v34);
LABEL_39:
  v17 = 0;
  v27 = v52;
LABEL_42:
  free(v27);
  return v17;
}

void CGContextDelegateDrawLines(uint64_t a1, uint64_t a2, uint64_t a3, const CGPoint *a4, unint64_t a5)
{
  const CGPoint *v6;
  void (*v10)(uint64_t, uint64_t, uint64_t, const CGPoint *, unint64_t);
  CGPath *Mutable;
  unint64_t v12;

  if (a1)
  {
    v6 = a4;
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t, const CGPoint *, unint64_t))(a1 + 56);
    if (v10)
    {
      v10(a1, a2, a3, a4, a5);
    }
    else
    {
      Mutable = CGPathCreateMutable();
      if (a5)
      {
        v12 = 0;
        do
        {
          CGPathAddLines(Mutable, (const CGAffineTransform *)(a3 + 24), v6, 2uLL);
          v12 += 2;
          v6 += 2;
        }
        while (v12 < a5);
      }
      CGContextDelegateDrawPath(a1, a2, a3, 2, Mutable);
      if (Mutable)
        CFRelease(Mutable);
    }
  }
}

_QWORD *ClipperLib::Clipper::AddLocalMaxPoly(_QWORD *a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  _QWORD *result;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  result = (_QWORD *)ClipperLib::Clipper::AddOutPt(a1, a2, a4);
  if (!*(_DWORD *)(a3 + 160))
    result = (_QWORD *)ClipperLib::Clipper::AddOutPt(a1, a3, a4);
  v9 = *(_DWORD *)(a2 + 172);
  v10 = *(_DWORD *)(a3 + 172);
  if (v9 == v10)
  {
    *(_DWORD *)(a2 + 172) = -1;
    *(_DWORD *)(a3 + 172) = -1;
  }
  else
  {
    if (v9 < v10)
    {
      v11 = a2;
      v12 = a3;
    }
    else
    {
      v11 = a3;
      v12 = a2;
    }
    return ClipperLib::Clipper::AppendPolygon(a1, v11, v12);
  }
  return result;
}

uint64_t ClipperLib::Clipper::ExecuteInternal(ClipperLib::Clipper *this)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  __int128 v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t *v84;
  __int128 *i;
  uint64_t v86;
  uint64_t v87;
  double v88;
  double v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _BOOL4 v100;
  BOOL v101;
  int v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  __int128 v109;
  void (*v110)(uint64_t, uint64_t, __int128 *, __int128 *, __int128 *);
  uint64_t v111;
  uint64_t v112;
  __int128 **v113;
  uint64_t v114;
  char *v115;
  _QWORD *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t *v120;
  char *v121;
  uint64_t v122;
  char v123;
  uint64_t *v124;
  _QWORD *v125;
  __int128 *j;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  __int128 *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  unint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  int v148;
  _QWORD *v149;
  int8x16_t v150;
  uint64_t v151;
  unint64_t v152;
  int **v153;
  int *OutRec;
  int *v155;
  uint64_t v156;
  _QWORD *v157;
  int *v158;
  uint64_t LowermostRec;
  int *v161;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  _DWORD *v169;
  uint64_t *v170;
  int v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t *v174;
  int v175;
  uint64_t *v176;
  unsigned __int8 v177;
  int v178;
  uint64_t *v180;
  int8x16_t v181;
  int v182;
  char v183;
  unsigned __int8 v184;
  int v185;
  uint64_t *v187;
  int8x16_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v196;
  _BOOL4 v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  _OWORD *v204;
  uint64_t v205;
  uint64_t v206;
  BOOL v207;
  char v208;
  uint64_t v209;
  uint64_t v210;
  _BOOL4 v212;
  char IsBetweenPt1AndPt3;
  uint64_t v214;
  __int128 v215;
  __int128 v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t *v221;
  uint64_t *v223;
  uint64_t v224;
  _DWORD *v225;
  int v226;
  uint64_t *v227;
  uint64_t *v228;
  uint64_t *v229;
  uint64_t *v230;
  int v231;
  ClipperLib::Clipper *v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  char v236;
  char **exception;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v243;
  unint64_t v244;
  _BOOL4 v245;
  uint64_t v246;
  char v247;
  _QWORD *v248;
  char *v249;
  uint64_t *v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  _OWORD v256[3];
  _OWORD v257[3];
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 *v261[2];

  (*(void (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 32))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  *(_QWORD *)&v258 = &v258;
  *((_QWORD *)&v258 + 1) = &v258;
  *(_QWORD *)&v259 = 0;
  std::__list_imp<long long>::clear((_QWORD *)this + 11);
  v250 = (uint64_t *)((char *)this + 88);
  if ((__int128 *)((char *)this + 88) == &v258)
  {
LABEL_448:
    __break(1u);
    JUMPOUT(0x184A4AA80);
  }
  v2 = v259;
  if ((_QWORD)v259)
  {
    v3 = v258;
    v4 = **((_QWORD **)&v258 + 1);
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v258 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    v5 = *((_QWORD *)this + 11);
    *(_QWORD *)(v5 + 8) = *((_QWORD *)&v3 + 1);
    **((_QWORD **)&v3 + 1) = v5;
    *((_QWORD *)this + 11) = v3;
    *(_QWORD *)(v3 + 8) = v250;
    *((_QWORD *)this + 13) += v2;
    *(_QWORD *)&v259 = 0;
  }
  std::__list_imp<long long>::clear(&v258);
  *((_QWORD *)this + 14) = 0;
  v254 = 0;
  v255 = 0;
  if ((ClipperLib::ClipperBase::PopScanbeam((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), &v255) & 1) == 0)
    return 0;
  ClipperLib::Clipper::InsertLocalMinimaIntoAEL(this, v255);
  v252 = (_QWORD *)((char *)this + 104);
  v249 = (char *)this + 40;
LABEL_6:
  if ((ClipperLib::ClipperBase::PopScanbeam((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), &v254) & 1) == 0)
  {
    v6 = *(_QWORD *)this;
    v7 = *(_QWORD *)(*(_QWORD *)this - 24);
    v8 = (char *)this + v7;
    if (*(_QWORD *)((char *)this + v7 + 8) == *(_QWORD *)((char *)this + v7 + 24))
    {
      v144 = v8 + 80;
      v143 = *((_QWORD *)v8 + 10);
      if (*((_QWORD *)v144 + 1) != v143)
      {
        v145 = 0;
        do
        {
          v146 = *(_QWORD *)(v143 + 8 * v145);
          v147 = *(_QWORD **)(v146 + 24);
          if (v147)
          {
            if (!*(_BYTE *)(v146 + 5))
            {
              v148 = *((unsigned __int8 *)this + 132) ^ *(unsigned __int8 *)(v146 + 4);
              if (v148 == ClipperLib::Area(v147) > 0.0)
              {
                v149 = v147;
                do
                {
                  v150 = *(int8x16_t *)(v149 + 7);
                  *(int8x16_t *)(v149 + 7) = vextq_s8(v150, v150, 8uLL);
                  v149 = (_QWORD *)v150.i64[0];
                }
                while ((_QWORD *)v150.i64[0] != v147);
                v7 = *(_QWORD *)(v6 - 24);
              }
            }
          }
          ++v145;
          v143 = *(_QWORD *)((char *)this + v7 + 80);
        }
        while (v145 < (*(_QWORD *)((char *)this + v7 + 88) - v143) >> 3);
      }
      v151 = *((_QWORD *)this + 1);
      if (v151 != *((_QWORD *)this + 2))
      {
        v152 = 0;
        do
        {
          v153 = *(int ***)(v151 + 8 * v152);
          OutRec = ClipperLib::Clipper::GetOutRec((int *)this, **v153);
          v155 = ClipperLib::Clipper::GetOutRec((int *)this, *v153[1]);
          if (*((_QWORD *)OutRec + 3))
          {
            v156 = (uint64_t)v155;
            v157 = v155 + 6;
            if (*((_QWORD *)v155 + 3))
            {
              if (!*((_BYTE *)OutRec + 5) && !*((_BYTE *)v155 + 5))
              {
                if (OutRec == v155)
                {
                  if (ClipperLib::Clipper::JoinPoints(this, (uint64_t *)v153, (uint64_t)OutRec, (uint64_t)OutRec))
                  {
                    *((_QWORD *)OutRec + 3) = *v153;
                    *((_QWORD *)OutRec + 4) = 0;
                    v169 = ClipperLib::ClipperBase::CreateOutRec((ClipperLib::Clipper *)((char *)this
                                                                                       + *(_QWORD *)(*(_QWORD *)this - 24)));
                    v170 = (uint64_t *)v153[1];
                    *((_QWORD *)v169 + 3) = v170;
                    v171 = *v169;
                    v172 = v170;
                    do
                    {
                      *(_DWORD *)v172 = v171;
                      v172 = (uint64_t *)v172[8];
                    }
                    while (v172 != v170);
                    v173 = (uint64_t *)*((_QWORD *)OutRec + 3);
                    v174 = v170;
                    while (1)
                    {
                      v175 = ClipperLib::PointInPolygon(v174[1], v174[2], v173);
                      if ((v175 & 0x80000000) == 0)
                        break;
                      v174 = (uint64_t *)v174[7];
                      if (v174 == v170)
                        goto LABEL_325;
                    }
                    v176 = v173;
                    if (v175)
                    {
LABEL_325:
                      v177 = *((_BYTE *)OutRec + 4) ^ 1;
                      *((_BYTE *)v169 + 4) = v177;
                      *((_QWORD *)v169 + 1) = OutRec;
                      if (*((_BYTE *)this + 133))
                      {
                        ClipperLib::Clipper::FixupFirstLefts2((uint64_t)this, (uint64_t)v169, (uint64_t)OutRec);
                        v177 = *((_BYTE *)v169 + 4);
                        v170 = (uint64_t *)*((_QWORD *)v169 + 3);
                      }
                      v178 = *((unsigned __int8 *)this + 132) ^ v177;
                      if (v178 == ClipperLib::Area(v170) > 0.0 && v170 != 0)
                      {
                        v180 = v170;
                        do
                        {
                          v181 = *(int8x16_t *)(v180 + 7);
                          *(int8x16_t *)(v180 + 7) = vextq_s8(v181, v181, 8uLL);
                          v180 = (uint64_t *)v181.i64[0];
                        }
                        while ((uint64_t *)v181.i64[0] != v170);
                      }
                    }
                    else
                    {
                      while (1)
                      {
                        v182 = ClipperLib::PointInPolygon(v176[1], v176[2], v170);
                        if ((v182 & 0x80000000) == 0)
                          break;
                        v176 = (uint64_t *)v176[7];
                        if (v176 == v173)
                          goto LABEL_338;
                      }
                      if (v182)
                      {
LABEL_338:
                        v183 = *((_BYTE *)OutRec + 4);
                        *((_BYTE *)v169 + 4) = v183;
                        v184 = v183 ^ 1;
                        *((_BYTE *)OutRec + 4) = v184;
                        *((_QWORD *)v169 + 1) = *((_QWORD *)OutRec + 1);
                        *((_QWORD *)OutRec + 1) = v169;
                        if (*((_BYTE *)this + 133))
                        {
                          ClipperLib::Clipper::FixupFirstLefts2((uint64_t)this, (uint64_t)OutRec, (uint64_t)v169);
                          v184 = *((_BYTE *)OutRec + 4);
                          v173 = (uint64_t *)*((_QWORD *)OutRec + 3);
                        }
                        v185 = *((unsigned __int8 *)this + 132) ^ v184;
                        if (v185 == ClipperLib::Area(v173) > 0.0 && v173 != 0)
                        {
                          v187 = v173;
                          do
                          {
                            v188 = *(int8x16_t *)(v187 + 7);
                            *(int8x16_t *)(v187 + 7) = vextq_s8(v188, v188, 8uLL);
                            v187 = (uint64_t *)v188.i64[0];
                          }
                          while ((uint64_t *)v188.i64[0] != v173);
                        }
                      }
                      else
                      {
                        *((_BYTE *)v169 + 4) = *((_BYTE *)OutRec + 4);
                        *((_QWORD *)v169 + 1) = *((_QWORD *)OutRec + 1);
                        if (*((_BYTE *)this + 133))
                          ClipperLib::Clipper::FixupFirstLefts1((uint64_t)this, (uint64_t)OutRec, (uint64_t)v169);
                      }
                    }
                  }
                }
                else
                {
                  v158 = OutRec;
                  do
                    v158 = (int *)*((_QWORD *)v158 + 1);
                  while (v158 != v155 && v158 != 0);
                  LowermostRec = (uint64_t)v155;
                  if (v158 != v155)
                  {
                    v161 = v155;
                    do
                      v161 = (int *)*((_QWORD *)v161 + 1);
                    while (v161 != OutRec && v161 != 0);
                    LowermostRec = (uint64_t)OutRec;
                    if (v161 != OutRec)
                      LowermostRec = ClipperLib::GetLowermostRec((uint64_t)OutRec, (uint64_t)v155);
                  }
                  if ((ClipperLib::Clipper::JoinPoints(this, (uint64_t *)v153, (uint64_t)OutRec, v156) & 1) != 0)
                  {
                    *v157 = 0;
                    v157[1] = 0;
                    *(_DWORD *)v156 = *OutRec;
                    *((_BYTE *)OutRec + 4) = *(_BYTE *)(LowermostRec + 4);
                    if (LowermostRec == v156)
                      *((_QWORD *)OutRec + 1) = *(_QWORD *)(v156 + 8);
                    *(_QWORD *)(v156 + 8) = OutRec;
                    if (*((_BYTE *)this + 133))
                    {
                      v163 = *(_QWORD *)this;
                      v164 = *(_QWORD *)(*(_QWORD *)this - 24);
                      v165 = *(_QWORD *)((char *)this + v164 + 80);
                      if (*(_QWORD *)((char *)this + v164 + 88) != v165)
                      {
                        v166 = 0;
                        do
                        {
                          v167 = *(_QWORD *)(v165 + 8 * v166);
                          if (*(_QWORD *)(v167 + 8) == v156 && *(_QWORD *)(v167 + 24) != 0)
                          {
                            *(_QWORD *)(v167 + 8) = OutRec;
                            v164 = *(_QWORD *)(v163 - 24);
                          }
                          ++v166;
                          v165 = *(_QWORD *)((char *)this + v164 + 80);
                        }
                        while (v166 < (*(_QWORD *)((char *)this + v164 + 88) - v165) >> 3);
                      }
                    }
                  }
                }
              }
            }
          }
          ++v152;
          v151 = *((_QWORD *)this + 1);
        }
        while (v152 < (*((_QWORD *)this + 2) - v151) >> 3);
        v6 = *(_QWORD *)this;
        v7 = *(_QWORD *)(*(_QWORD *)this - 24);
      }
      v189 = *(_QWORD *)((char *)this + v7 + 80);
      if (*(_QWORD *)((char *)this + v7 + 88) != v189)
      {
        v190 = 0;
        do
        {
          v191 = *(_QWORD *)(v189 + 8 * v190);
          v192 = *(_QWORD **)(v191 + 24);
          if (v192)
          {
            if (!*(_BYTE *)(v191 + 5))
            {
              *(_QWORD *)(v191 + 32) = 0;
              v243 = v191;
              v244 = v190;
              if (*((_BYTE *)this + *(_QWORD *)(v6 - 24) + 72))
                v197 = 1;
              else
                v197 = *((_BYTE *)this + 134) != 0;
              v245 = v197;
              v199 = v192 + 8;
              v198 = (_QWORD *)v192[8];
              if (v198 != v192)
              {
                v200 = 0;
                while (1)
                {
                  v201 = (_QWORD *)v192[7];
                  if (v198 == v201)
                    break;
                  v203 = v192[1];
                  v202 = v192[2];
                  v205 = v201[1];
                  v206 = v201[2];
                  v204 = v201 + 1;
                  v207 = v203 == v205 && v202 == v206;
                  v208 = v207;
                  if (v207)
                    goto LABEL_391;
                  v209 = v198[1];
                  v210 = v198[2];
                  if (v203 == v209 && v202 == v210)
                    goto LABEL_391;
                  v248 = v200;
                  v251 = v198[2];
                  v253 = v192[2];
                  v247 = v208;
                  v246 = v198[1];
                  v212 = ClipperLib::SlopesEqual(v209, v210, v203, v202, v205, v206, v249[*(_QWORD *)(*(_QWORD *)this - 24)]);
                  v202 = v253;
                  v208 = v247;
                  v200 = v248;
                  if (!v212)
                    goto LABEL_387;
                  if (!v245
                    || (IsBetweenPt1AndPt3 = ClipperLib::Pt2IsBetweenPt1AndPt3(v246, v251, v203, v253, v205, v206),
                        v208 = v247,
                        v202 = v253,
                        v200 = v248,
                        (IsBetweenPt1AndPt3 & 1) == 0))
                  {
LABEL_391:
                    v214 = v192[5];
                    if (v214 != -1 && (v192[3] != v214 || *((double *)v192 + 4) != *((double *)v192 + 6)))
                    {
                      if ((v208 & 1) != 0 || (v204 = v198 + 1, v203 == v198[1]) && v202 == v198[2])
                      {
                        v215 = *(_OWORD *)(v192 + 1);
                        v216 = *(_OWORD *)(v192 + 5);
                        v204[1] = *(_OWORD *)(v192 + 3);
                        v204[2] = v216;
                        *v204 = v215;
                        v201 = (_QWORD *)v192[7];
                        v198 = (_QWORD *)*v199;
                      }
                    }
                    v198[7] = v201;
                    *(_QWORD *)(v192[7] + 64) = v198;
                    v201 = (_QWORD *)*v199;
                    MEMORY[0x186DC23C4](v192, 0x1020C40EF4EB693);
                    v200 = 0;
                  }
                  else
                  {
LABEL_387:
                    if (v192 == v200)
                      goto LABEL_403;
                    if (!v200)
                      v200 = v192;
                  }
                  v199 = v201 + 8;
                  v198 = (_QWORD *)v201[8];
                  v192 = v201;
                  if (v198 == v201)
                    goto LABEL_402;
                }
              }
              v201 = v192;
LABEL_402:
              *(_QWORD *)&v258 = v201;
              ClipperLib::DisposeOutPts(&v258);
              v200 = 0;
LABEL_403:
              v190 = v244;
              *(_QWORD *)(v243 + 24) = v200;
              goto LABEL_404;
            }
            v193 = (_QWORD *)v192[8];
            if (v192 == v193)
            {
              *(_QWORD *)&v258 = *(_QWORD *)(v191 + 24);
            }
            else
            {
              do
              {
                v192 = (_QWORD *)v192[7];
                v194 = (_QWORD *)v192[8];
                if (v192[1] == v194[1] && v192[2] == v194[2])
                {
                  if (v192 == v193)
                    v193 = (_QWORD *)v192[8];
                  v194[7] = v192[7];
                  *(_QWORD *)(v192[7] + 64) = v194;
                  MEMORY[0x186DC23C4](v192, 0x1020C40EF4EB693);
                  v192 = v194;
                }
              }
              while (v192 != v193);
              v196 = (_QWORD *)v192[8];
              *(_QWORD *)&v258 = v192;
              if (v192 != v196)
                goto LABEL_404;
            }
            ClipperLib::DisposeOutPts(&v258);
            *(_QWORD *)(v191 + 24) = 0;
          }
LABEL_404:
          ++v190;
          v6 = *(_QWORD *)this;
          v189 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 80);
        }
        while (v190 < (*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 88) - v189) >> 3);
      }
      if (!*((_BYTE *)this + 134)
        || (v217 = *(_QWORD *)((char *)this + *(_QWORD *)(v6 - 24) + 80),
            *(_QWORD *)((char *)this + *(_QWORD *)(v6 - 24) + 88) == v217))
      {
LABEL_444:
        v142 = 1;
        goto LABEL_450;
      }
      v218 = 0;
      while (1)
      {
        v219 = *(_QWORD *)(v217 + 8 * v218);
        v220 = *(uint64_t **)(v219 + 24);
        if (v220)
        {
          if (!*(_BYTE *)(v219 + 5))
            break;
        }
LABEL_443:
        ++v218;
        v217 = *(_QWORD *)((char *)this + *(_QWORD *)(v6 - 24) + 80);
        if (v218 >= (*(_QWORD *)((char *)this + *(_QWORD *)(v6 - 24) + 88) - v217) >> 3)
          goto LABEL_444;
      }
      v221 = *(uint64_t **)(v219 + 24);
LABEL_411:
      if ((uint64_t *)v221[7] == v220)
        goto LABEL_442;
      v220 = (uint64_t *)v221[7];
      while (1)
      {
        if (v221[1] != v220[1] || v221[2] != v220[2])
          goto LABEL_431;
        if ((uint64_t *)v220[7] == v221)
          goto LABEL_431;
        v223 = (uint64_t *)v220[8];
        if (v223 == v221)
          goto LABEL_431;
        v224 = v221[8];
        v221[8] = (uint64_t)v223;
        v223[7] = (uint64_t)v221;
        v220[8] = v224;
        *(_QWORD *)(v224 + 56) = v220;
        *(_QWORD *)(v219 + 24) = v221;
        v225 = ClipperLib::ClipperBase::CreateOutRec((ClipperLib::Clipper *)((char *)this
                                                                           + *(_QWORD *)(*(_QWORD *)this - 24)));
        *((_QWORD *)v225 + 3) = v220;
        v226 = *v225;
        v227 = v220;
        do
        {
          *(_DWORD *)v227 = v226;
          v227 = (uint64_t *)v227[8];
        }
        while (v227 != v220);
        v228 = *(uint64_t **)(v219 + 24);
        v229 = v228;
        v230 = v220;
        while (1)
        {
          v231 = ClipperLib::PointInPolygon(v230[1], v230[2], v228);
          if ((v231 & 0x80000000) == 0)
            break;
          v230 = (uint64_t *)v230[7];
          if (v230 == v220)
            goto LABEL_427;
        }
        if (!v231)
          break;
LABEL_427:
        *((_BYTE *)v225 + 4) = *(_BYTE *)(v219 + 4) ^ 1;
        *((_QWORD *)v225 + 1) = v219;
        v220 = v221;
        if (*((_BYTE *)this + 133))
        {
          v232 = this;
          v233 = (uint64_t)v225;
          v234 = v219;
          goto LABEL_429;
        }
LABEL_431:
        v220 = (uint64_t *)v220[7];
        if (v220 == *(uint64_t **)(v219 + 24))
        {
          v221 = (uint64_t *)v221[7];
          if (v221 == v220)
          {
LABEL_442:
            v6 = *(_QWORD *)this;
            goto LABEL_443;
          }
          goto LABEL_411;
        }
      }
      while (1)
      {
        v235 = ClipperLib::PointInPolygon(v229[1], v229[2], v220);
        if ((v235 & 0x80000000) == 0)
          break;
        v229 = (uint64_t *)v229[7];
        if (v229 == v228)
          goto LABEL_437;
      }
      if (v235)
      {
LABEL_437:
        v236 = *(_BYTE *)(v219 + 4);
        *((_BYTE *)v225 + 4) = v236;
        *(_BYTE *)(v219 + 4) = v236 ^ 1;
        *((_QWORD *)v225 + 1) = *(_QWORD *)(v219 + 8);
        *(_QWORD *)(v219 + 8) = v225;
        v220 = v221;
        if (!*((_BYTE *)this + 133))
          goto LABEL_431;
        v232 = this;
        v233 = v219;
        v234 = (uint64_t)v225;
LABEL_429:
        ClipperLib::Clipper::FixupFirstLefts2((uint64_t)v232, v233, v234);
      }
      else
      {
        *((_BYTE *)v225 + 4) = *(_BYTE *)(v219 + 4);
        *((_QWORD *)v225 + 1) = *(_QWORD *)(v219 + 8);
        v220 = v221;
        if (!*((_BYTE *)this + 133))
          goto LABEL_431;
        ClipperLib::Clipper::FixupFirstLefts1((uint64_t)this, v219, (uint64_t)v225);
      }
      v220 = v221;
      goto LABEL_431;
    }
  }
  ClipperLib::Clipper::ProcessHorizontals(this);
  ClipperLib::Clipper::ClearGhostJoins((uint64_t)this);
  v9 = v254;
  v10 = *(_QWORD *)((char *)v252 + *(_QWORD *)(*(_QWORD *)this - 24));
  if (!v10)
    goto LABEL_143;
  *((_QWORD *)this + 14) = v10;
  do
  {
    v11 = *(_OWORD *)(v10 + 200);
    *(_OWORD *)(v10 + 216) = v11;
    if (*(_QWORD *)(v10 + 104) == v9)
    {
      v12 = *(_QWORD *)(v10 + 96);
    }
    else
    {
      v13 = *(double *)(v10 + 144) * (double)(v9 - *(_QWORD *)(v10 + 8));
      if (v13 >= 0.0)
        v14 = 0.5;
      else
        v14 = -0.5;
      v12 = *(_QWORD *)v10 + (uint64_t)(v13 + v14);
    }
    *(_QWORD *)(v10 + 48) = v12;
    v10 = v11;
  }
  while ((_QWORD)v11);
  while (1)
  {
    v15 = *((_QWORD *)this + 14);
    v16 = *(_QWORD *)(v15 + 216);
    if (!v16)
      break;
    v17 = 0;
    do
    {
      if (*(_QWORD *)(v15 + 48) <= *(_QWORD *)(v16 + 48))
      {
        v15 = v16;
        goto LABEL_97;
      }
      v18 = *(double *)(v15 + 144);
      v19 = *(double *)(v16 + 144);
      if (v18 == v19)
      {
        v20 = *(_QWORD *)(v15 + 56);
        v21 = *(_QWORD *)(v15 + 104);
        if (v21 != v20)
          goto LABEL_66;
        v22 = *(_QWORD *)(v15 + 96);
        v21 = *(_QWORD *)(v15 + 56);
        goto LABEL_71;
      }
      if (v18 == 0.0)
      {
        v22 = *(_QWORD *)v15;
        v23 = *(_QWORD *)(v16 + 8);
        if (v19 == -1.0e40)
          goto LABEL_43;
        v24 = (double)v23 - (double)*(uint64_t *)v16 / v19;
        v25 = (double)v22 / v19;
        goto LABEL_30;
      }
      v23 = *(_QWORD *)(v15 + 8);
      if (v19 == 0.0)
      {
        v22 = *(_QWORD *)v16;
        if (v18 == -1.0e40)
          goto LABEL_43;
        v24 = (double)v23 - (double)*(uint64_t *)v15 / v18;
        v25 = (double)v22 / v18;
LABEL_30:
        v26 = v25 + v24;
        if (v26 >= 0.0)
          v27 = 0.5;
        else
          v27 = -0.5;
        v23 = (uint64_t)(v26 + v27);
        goto LABEL_43;
      }
      v28 = (double)*(uint64_t *)v15 - (double)v23 * v18;
      v29 = (double)*(uint64_t *)v16 - (double)*(uint64_t *)(v16 + 8) * v19;
      v30 = (v29 - v28) / (v18 - v19);
      if (v30 >= 0.0)
        v31 = 0.5;
      else
        v31 = -0.5;
      v23 = (uint64_t)(v30 + v31);
      v32 = v29 + v19 * v30;
      v33 = v28 + v18 * v30;
      if (fabs(v18) >= fabs(v19))
        v33 = v32;
      if (v33 >= 0.0)
        v34 = 0.5;
      else
        v34 = -0.5;
      v22 = (uint64_t)(v33 + v34);
LABEL_43:
      v21 = *(_QWORD *)(v15 + 104);
      v35 = *(_QWORD *)(v16 + 104);
      if (v23 < v21 || v23 < v35)
      {
        if (v21 <= v35)
          v23 = *(_QWORD *)(v16 + 104);
        else
          v23 = *(_QWORD *)(v15 + 104);
        if (fabs(v18) >= fabs(v19))
        {
          if (v35 >= v21)
          {
            v22 = *(_QWORD *)(v16 + 96);
            goto LABEL_59;
          }
          v36 = *(_QWORD *)v16;
          v37 = v19 * (double)(v23 - *(_QWORD *)(v16 + 8));
        }
        else
        {
          if (v21 >= v35)
          {
            v22 = *(_QWORD *)(v15 + 96);
            goto LABEL_59;
          }
          v36 = *(_QWORD *)v15;
          v37 = v18 * (double)(v23 - *(_QWORD *)(v15 + 8));
        }
        if (v37 >= 0.0)
          v38 = 0.5;
        else
          v38 = -0.5;
        v22 = v36 + (uint64_t)(v37 + v38);
      }
LABEL_59:
      v20 = *(_QWORD *)(v15 + 56);
      if (v23 <= v20)
      {
        v20 = v23;
      }
      else if (fabs(v18) <= fabs(v19))
      {
        if (v21 != v20)
        {
LABEL_66:
          v39 = *(_QWORD *)v15;
          v40 = v18 * (double)(v20 - *(_QWORD *)(v15 + 8));
LABEL_67:
          if (v40 >= 0.0)
            v41 = 0.5;
          else
            v41 = -0.5;
          v22 = v39 + (uint64_t)(v40 + v41);
          goto LABEL_71;
        }
        v22 = *(_QWORD *)(v15 + 96);
        v20 = *(_QWORD *)(v15 + 104);
      }
      else
      {
        if (v35 != v20)
        {
          v39 = *(_QWORD *)v16;
          v40 = v19 * (double)(v20 - *(_QWORD *)(v16 + 8));
          goto LABEL_67;
        }
        v22 = *(_QWORD *)(v16 + 96);
        v20 = *(_QWORD *)(v16 + 104);
      }
LABEL_71:
      if (v20 < v9)
      {
        if (v21 == v9)
        {
          v22 = *(_QWORD *)(v15 + 96);
        }
        else
        {
          v42 = v18 * (double)(v9 - *(_QWORD *)(v15 + 8));
          if (v42 >= 0.0)
            v43 = 0.5;
          else
            v43 = -0.5;
          v22 = *(_QWORD *)v15 + (uint64_t)(v42 + v43);
        }
        v20 = v9;
      }
      v44 = operator new();
      v45 = v44;
      *(_QWORD *)v44 = v15;
      *(_QWORD *)(v44 + 8) = v16;
      *(_QWORD *)(v44 + 16) = v22;
      *(_QWORD *)(v44 + 24) = v20;
      *(_OWORD *)(v44 + 32) = ClipperLib::PointInfoZero;
      *(_OWORD *)(v44 + 48) = unk_184F7D388;
      v47 = (uint64_t *)*((_QWORD *)this + 8);
      v46 = *((_QWORD *)this + 9);
      if ((unint64_t)v47 >= v46)
      {
        v49 = (_QWORD *)*((_QWORD *)this + 7);
        v50 = v47 - v49;
        v51 = v50 + 1;
        if ((unint64_t)(v50 + 1) >> 61)
          std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
        v52 = v46 - (_QWORD)v49;
        if (v52 >> 2 > v51)
          v51 = v52 >> 2;
        if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
          v53 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v53 = v51;
        if (v53)
        {
          if (v53 >> 61)
            std::__throw_bad_array_new_length[abi:se180100]();
          v54 = (char *)operator new(8 * v53);
        }
        else
        {
          v54 = 0;
        }
        v55 = (uint64_t *)&v54[8 * v50];
        *v55 = v45;
        v48 = v55 + 1;
        if (v47 != v49)
        {
          do
          {
            v56 = *--v47;
            *--v55 = v56;
          }
          while (v47 != v49);
          v47 = (uint64_t *)*((_QWORD *)this + 7);
        }
        *((_QWORD *)this + 7) = v55;
        *((_QWORD *)this + 8) = v48;
        *((_QWORD *)this + 9) = &v54[8 * v53];
        if (v47)
          operator delete(v47);
      }
      else
      {
        *v47 = v44;
        v48 = v47 + 1;
      }
      *((_QWORD *)this + 8) = v48;
      ClipperLib::Clipper::SwapPositionsInSEL((uint64_t)this, v15, v16);
      v17 = 1;
LABEL_97:
      v16 = *(_QWORD *)(v15 + 216);
    }
    while (v16);
    v57 = *(_QWORD *)(v15 + 224);
    if (v57)
    {
      *(_QWORD *)(v57 + 216) = 0;
      if ((v17 & 1) != 0)
        continue;
    }
    goto LABEL_105;
  }
  v58 = *(_QWORD *)(v15 + 224);
  if (v58)
    *(_QWORD *)(v58 + 216) = 0;
LABEL_105:
  *((_QWORD *)this + 14) = 0;
  v59 = *((_QWORD *)this + 7);
  v60 = (char *)*((_QWORD *)this + 8);
  v61 = (uint64_t)&v60[-v59] >> 3;
  if (!v61)
  {
LABEL_143:
    for (i = *(__int128 **)((char *)v252 + *(_QWORD *)(*(_QWORD *)this - 24)); ; i = *v113)
    {
      v261[0] = i;
      if (!i)
        break;
      if (*((_QWORD *)i + 13) == v9)
      {
        v86 = *((_QWORD *)i + 24);
        if (v86)
        {
          if (*(double *)(v86 + 144) == -1.0e40)
          {
            ClipperLib::ClipperBase::UpdateEdgeIntoAEL((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (uint64_t *)v261);
            i = v261[0];
            if ((*((_DWORD *)v261[0] + 43) & 0x80000000) == 0)
              ClipperLib::Clipper::AddOutPt(this, (uint64_t)v261[0], v261[0]);
            v87 = *((_QWORD *)this + 14);
            *((_QWORD *)i + 28) = 0;
            if (v87)
              *(_QWORD *)(v87 + 224) = i;
            *((_QWORD *)this + 14) = i;
            *((_QWORD *)i + 27) = v87;
            goto LABEL_177;
          }
        }
        else
        {
          ClipperLib::GetMaximaPairEx(i);
          if (!v91 || *(double *)(v91 + 144) != -1.0e40)
          {
            if (*((_BYTE *)this + 134))
            {
              v92 = operator new(0x18uLL);
              v93 = *((_QWORD *)i + 12);
              v94 = *v250;
              v92[1] = v250;
              v92[2] = v93;
              *v92 = v94;
              *(_QWORD *)(v94 + 8) = v92;
              *v250 = (uint64_t)v92;
              ++*v252;
            }
            v95 = *((_QWORD *)i + 26);
            ClipperLib::GetMaximaPairEx(i);
            if (!v96)
            {
              v114 = v95;
              if ((*((_DWORD *)i + 43) & 0x80000000) == 0)
              {
                ClipperLib::Clipper::AddOutPt(this, (uint64_t)i, i + 6);
                v114 = *((_QWORD *)i + 26);
              }
              v115 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
              v116 = (_QWORD *)i + 25;
              v117 = *((_QWORD *)i + 25);
              if (v114 | v117)
                goto LABEL_228;
              if (*((__int128 **)v115 + 13) == i)
                goto LABEL_231;
              goto LABEL_193;
            }
            v97 = v96;
            v99 = (_QWORD *)i + 25;
            v98 = *((_QWORD *)i + 25);
            v100 = v98 != 0;
            if (v98 && v98 != v96)
            {
              do
              {
                ClipperLib::Clipper::IntersectEdges(this, i, (_DWORD *)v98, i + 6);
                ClipperLib::ClipperBase::SwapPositionsInAEL((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (uint64_t)i, v98);
                v98 = *((_QWORD *)i + 25);
                v100 = v98 != 0;
                if (v98)
                  v101 = v98 == v97;
                else
                  v101 = 1;
              }
              while (!v101);
            }
            v102 = *((_DWORD *)i + 43);
            if (v102 != -1)
            {
              if ((v102 & 0x80000000) == 0)
              {
                if ((*(_DWORD *)(v97 + 172) & 0x80000000) == 0)
                {
                  ClipperLib::Clipper::AddLocalMaxPoly(this, (uint64_t)i, v97, i + 6);
                  v103 = *(_QWORD *)(*(_QWORD *)this - 24);
                  v104 = (char *)this + v103;
                  v106 = *((_QWORD *)i + 25);
                  v105 = *((_QWORD *)i + 26);
                  if (*(__int128 *)((char *)i + 200) == 0)
                  {
                    if (*((__int128 **)v104 + 13) != i)
                      goto LABEL_226;
                  }
                  else if (v105)
                  {
                    v107 = (_QWORD *)(v105 + 200);
LABEL_219:
                    *v107 = v106;
                    if (v106)
                      *(_QWORD *)(v106 + 208) = v105;
LABEL_225:
                    *v99 = 0;
                    *((_QWORD *)i + 26) = 0;
                    v103 = *(_QWORD *)(*(_QWORD *)this - 24);
LABEL_226:
                    v115 = (char *)this + v103;
LABEL_227:
                    v117 = *(_QWORD *)(v97 + 200);
                    v114 = *(_QWORD *)(v97 + 208);
                    v116 = (_QWORD *)(v97 + 200);
                    if (*(_OWORD *)(v97 + 200) != 0)
                    {
LABEL_228:
                      if (v114)
                      {
                        v125 = (_QWORD *)(v114 + 200);
LABEL_232:
                        *v125 = v117;
                        if (v117)
                          *(_QWORD *)(v117 + 208) = v114;
                        *v116 = 0;
                        v116[1] = 0;
                        if (v95)
                        {
LABEL_194:
                          v113 = (__int128 **)(v95 + 200);
                          continue;
                        }
LABEL_235:
                        v113 = (__int128 **)((char *)v252 + *(_QWORD *)(*(_QWORD *)this - 24));
                        continue;
                      }
LABEL_231:
                      v125 = v115 + 104;
                      goto LABEL_232;
                    }
                    if (*((_QWORD *)v115 + 13) == v97)
                      goto LABEL_231;
LABEL_193:
                    if (v95)
                      goto LABEL_194;
                    goto LABEL_235;
                  }
                  v107 = v104 + 104;
                  goto LABEL_219;
                }
                if (*((_DWORD *)i + 40))
                {
LABEL_447:
                  exception = (char **)__cxa_allocate_exception(0x20uLL);
                  ClipperLib::clipperException::clipperException(exception, "DoMaxima error");
                }
                ClipperLib::Clipper::AddOutPt(this, (uint64_t)i, i + 6);
                *((_DWORD *)i + 43) = -1;
                v98 = *((_QWORD *)i + 25);
LABEL_200:
                v118 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
                v119 = *((_QWORD *)i + 26);
                if (v119 | v98)
                {
                  if (v119)
                  {
                    v120 = (uint64_t *)(v119 + 200);
                    goto LABEL_205;
                  }
LABEL_204:
                  v120 = (uint64_t *)(v118 + 104);
LABEL_205:
                  *v120 = v98;
                  if (v98)
                    *(_QWORD *)(v98 + 208) = v119;
                  *v99 = 0;
                  *((_QWORD *)i + 26) = 0;
                }
                else if (*((__int128 **)v118 + 13) == i)
                {
                  goto LABEL_204;
                }
                if ((*(_DWORD *)(v97 + 172) & 0x80000000) == 0)
                {
                  ClipperLib::Clipper::AddOutPt(this, v97, i + 6);
                  *(_DWORD *)(v97 + 172) = -1;
                }
                v115 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
                goto LABEL_227;
              }
LABEL_196:
              if (*((_DWORD *)i + 40))
                goto LABEL_447;
              goto LABEL_200;
            }
            if (*(_DWORD *)(v97 + 172) != -1)
              goto LABEL_196;
            v103 = *(_QWORD *)(*(_QWORD *)this - 24);
            v121 = (char *)this + v103;
            v122 = *((_QWORD *)i + 26);
            if (v122)
              v123 = 1;
            else
              v123 = v100;
            if ((v123 & 1) != 0)
            {
              if (v122)
              {
                v124 = (uint64_t *)(v122 + 200);
                goto LABEL_223;
              }
            }
            else if (*((__int128 **)v121 + 13) != i)
            {
              goto LABEL_226;
            }
            v124 = (uint64_t *)(v121 + 104);
LABEL_223:
            *v124 = v98;
            if (v100)
              *(_QWORD *)(v98 + 208) = v122;
            goto LABEL_225;
          }
        }
        v90 = *((_QWORD *)i + 12);
      }
      else
      {
        v88 = *((double *)i + 18) * (double)(v9 - *((_QWORD *)i + 1));
        if (v88 >= 0.0)
          v89 = 0.5;
        else
          v89 = -0.5;
        v90 = *(_QWORD *)i + (uint64_t)(v88 + v89);
      }
      *((_QWORD *)i + 6) = v90;
      *((_QWORD *)i + 7) = v9;
LABEL_177:
      if (*((_BYTE *)this + 134))
      {
        if ((*((_DWORD *)i + 43) & 0x80000000) == 0)
        {
          if (*((_DWORD *)i + 40))
          {
            v108 = *((_QWORD *)i + 26);
            if (v108)
            {
              if ((*(_DWORD *)(v108 + 172) & 0x80000000) == 0
                && *(_QWORD *)(v108 + 48) == *((_QWORD *)i + 6)
                && *(_DWORD *)(v108 + 160))
              {
                v109 = i[4];
                v258 = i[3];
                v259 = v109;
                v260 = i[5];
                v110 = (void (*)(uint64_t, uint64_t, __int128 *, __int128 *, __int128 *))*((_QWORD *)this + 17);
                if (v110)
                  v110(v108, v108 + 96, i, i + 6, &v258);
                v111 = ClipperLib::Clipper::AddOutPt(this, v108, &v258);
                v112 = ClipperLib::Clipper::AddOutPt(this, (uint64_t)i, &v258);
                v257[0] = v258;
                v257[1] = v259;
                v257[2] = v260;
                ClipperLib::Clipper::AddJoin(this, v111, v112, v257);
                i = v261[0];
              }
            }
          }
        }
      }
      v113 = (__int128 **)i + 25;
    }
    std::list<long long>::__sort<std::__less<void,void>>(*((uint64_t **)this + 12), v250, *((_QWORD *)this + 13));
    ClipperLib::Clipper::ProcessHorizontals(this);
    std::__list_imp<long long>::clear(v250);
    for (j = *(__int128 **)((char *)v252 + *(_QWORD *)(*(_QWORD *)this - 24)); ; j = (__int128 *)*((_QWORD *)j + 25))
    {
      v261[0] = j;
      if (!j)
      {
        ClipperLib::Clipper::InsertLocalMinimaIntoAEL(this, v9);
        goto LABEL_6;
      }
      if (*((_QWORD *)j + 13) == v9 && *((_QWORD *)j + 24))
      {
        if ((*((_DWORD *)j + 43) & 0x80000000) != 0)
          v127 = 0;
        else
          v127 = ClipperLib::Clipper::AddOutPt(this, (uint64_t)j, j + 6);
        ClipperLib::ClipperBase::UpdateEdgeIntoAEL((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (uint64_t *)v261);
        j = v261[0];
        v128 = *((_QWORD *)v261[0] + 25);
        v129 = *((_QWORD *)v261[0] + 26);
        if (v129)
        {
          v130 = *(_QWORD *)(v129 + 48);
          if (v130 == *(_QWORD *)v261[0])
          {
            v131 = *(_QWORD *)(v129 + 56);
            if (v131 == *((_QWORD *)v261[0] + 1) && v127 != 0 && (*(_DWORD *)(v129 + 172) & 0x80000000) == 0)
            {
              v133 = *(_QWORD *)(v129 + 104);
              if (v131 > v133
                && ClipperLib::SlopesEqual(*((_QWORD *)v261[0] + 6), *((_QWORD *)v261[0] + 7), *((_QWORD *)v261[0] + 12), *((_QWORD *)v261[0] + 13), v130, v131, *(_QWORD *)(v129 + 96), v133, v249[*(_QWORD *)(*(_QWORD *)this - 24)])&& *((_DWORD *)j + 40)&& *(_DWORD *)(v129 + 160))
              {
                v134 = ClipperLib::Clipper::AddOutPt(this, v129, j);
                v135 = j[7];
                v258 = j[6];
                v259 = v135;
                v260 = j[8];
                v136 = &v258;
LABEL_267:
                ClipperLib::Clipper::AddJoin(this, v127, v134, v136);
                continue;
              }
            }
          }
        }
        if (v128)
        {
          v137 = *(_QWORD *)(v128 + 48);
          if (v137 == *(_QWORD *)j)
          {
            v138 = *(_QWORD *)(v128 + 56);
            if (v138 == *((_QWORD *)j + 1) && v127 != 0 && (*(_DWORD *)(v128 + 172) & 0x80000000) == 0)
            {
              v140 = *(_QWORD *)(v128 + 104);
              if (v138 > v140
                && ClipperLib::SlopesEqual(*((_QWORD *)j + 6), *((_QWORD *)j + 7), *((_QWORD *)j + 12), *((_QWORD *)j + 13), v137, v138, *(_QWORD *)(v128 + 96), v140, v249[*(_QWORD *)(*(_QWORD *)this - 24)])&& *((_DWORD *)j + 40)&& *(_DWORD *)(v128 + 160))
              {
                v134 = ClipperLib::Clipper::AddOutPt(this, v128, j);
                v141 = j[7];
                v256[0] = j[6];
                v256[1] = v141;
                v256[2] = j[8];
                v136 = v256;
                goto LABEL_267;
              }
            }
          }
        }
      }
    }
  }
  if (v61 == 1)
  {
LABEL_139:
    if (v60 != (char *)v59)
    {
      v83 = 0;
      do
      {
        v84 = *(uint64_t **)(v59 + 8 * v83);
        ClipperLib::Clipper::IntersectEdges(this, (_DWORD *)*v84, (_DWORD *)v84[1], (__int128 *)v84 + 1);
        ClipperLib::ClipperBase::SwapPositionsInAEL((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), *v84, v84[1]);
        MEMORY[0x186DC23C4](v84, 0x1020C40038FC326);
        ++v83;
        v59 = *((_QWORD *)this + 7);
      }
      while (v83 < (*((_QWORD *)this + 8) - v59) >> 3);
    }
LABEL_142:
    *((_QWORD *)this + 8) = v59;
    *((_QWORD *)this + 14) = 0;
    goto LABEL_143;
  }
  v62 = *(_QWORD *)((char *)v252 + *(_QWORD *)(*(_QWORD *)this - 24));
  *((_QWORD *)this + 14) = v62;
  if (v62)
  {
    do
    {
      v63 = *(_OWORD *)(v62 + 200);
      *(_OWORD *)(v62 + 216) = v63;
      v62 = v63;
    }
    while ((_QWORD)v63);
    v59 = *((_QWORD *)this + 7);
    v60 = (char *)*((_QWORD *)this + 8);
    v61 = (uint64_t)&v60[-v59] >> 3;
  }
  *(_QWORD *)&v258 = ClipperLib::IntersectListSort;
  v64 = 126 - 2 * __clz(v61);
  if (v60 == (char *)v59)
    v65 = 0;
  else
    v65 = v64;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **,false>(v59, v60, (uint64_t (**)(_QWORD))&v258, v65, 1);
  v66 = *((_QWORD *)this + 7);
  v59 = *((_QWORD *)this + 8);
  v67 = v59 - v66;
  if (v59 == v66)
    goto LABEL_142;
  v68 = 0;
  v69 = 0;
  v70 = v67 >> 3;
  if ((unint64_t)(v67 >> 3) <= 1)
    v71 = 1;
  else
    v71 = v67 >> 3;
  v72 = 1;
  do
  {
    if (v70 <= v72)
      v73 = v72;
    else
      v73 = v70;
    v74 = *((_QWORD *)this + 7);
    v75 = (*((_QWORD *)this + 8) - v74) >> 3;
    if (v75 <= v69)
      goto LABEL_448;
    v76 = *(_QWORD **)(v74 + 8 * v69);
    v77 = v76[1];
    if (*(_QWORD *)(*v76 + 216) != v77 && *(_QWORD *)(*v76 + 224) != v77)
    {
      v78 = v72;
      v79 = v69;
      while (1)
      {
        if (v78 >= v70)
        {
          v79 = v73;
          goto LABEL_132;
        }
        if (v75 == v78)
          goto LABEL_448;
        v80 = *(uint64_t **)(v74 + 8 * v78);
        v82 = *v80;
        v81 = v80[1];
        if (*(_QWORD *)(v82 + 216) == v81)
          break;
        ++v78;
        ++v79;
        if (*(_QWORD *)(v82 + 224) == v81)
          goto LABEL_132;
      }
      v79 = v78;
LABEL_132:
      if (v79 == v70)
        break;
      if (v75 <= v79)
        goto LABEL_448;
      *(_QWORD *)(v74 + 8 * v69) = *(_QWORD *)(v74 + 8 * v79);
      *(_QWORD *)(v74 + 8 * v79) = v76;
      v74 = *((_QWORD *)this + 7);
      v75 = (*((_QWORD *)this + 8) - v74) >> 3;
    }
    if (v75 <= v69)
      goto LABEL_448;
    ClipperLib::Clipper::SwapPositionsInSEL((uint64_t)this, **(_QWORD **)(v74 + 8 * v69), *(_QWORD *)(*(_QWORD *)(v74 + 8 * v69) + 8));
    v68 = ++v69 >= v70;
    ++v72;
  }
  while (v69 != v71);
  if (v68)
  {
    v59 = *((_QWORD *)this + 7);
    v60 = (char *)*((_QWORD *)this + 8);
    goto LABEL_139;
  }
  v142 = 0;
LABEL_450:
  v238 = *((_QWORD *)this + 1);
  v239 = *((_QWORD *)this + 2);
  if (v239 != v238)
  {
    v240 = 0;
    do
    {
      v241 = *(_QWORD *)(v238 + 8 * v240);
      if (v241)
      {
        MEMORY[0x186DC23C4](v241, 0x1020C40038FC326);
        v238 = *((_QWORD *)this + 1);
        v239 = *((_QWORD *)this + 2);
      }
      ++v240;
    }
    while (v240 < (v239 - v238) >> 3);
    if (v239 != v238)
      *((_QWORD *)this + 2) = v238;
  }
  ClipperLib::Clipper::ClearGhostJoins((uint64_t)this);
  return v142;
}

void ClipperLib::ClipperBase::UpdateEdgeIntoAEL(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _OWORD *v8;
  __int128 v9;
  ClipperLib::clipperException *exception;

  v2 = *a2;
  v3 = *(_QWORD *)(*a2 + 192);
  if (!v3)
  {
    exception = (ClipperLib::clipperException *)__cxa_allocate_exception(0x20uLL);
    ClipperLib::clipperException::clipperException(exception, "UpdateEdgeIntoAEL: invalid call");
  }
  *(_DWORD *)(v3 + 172) = *(_DWORD *)(v2 + 172);
  v6 = v2 + 200;
  v5 = *(_QWORD *)(v2 + 200);
  v4 = *(_QWORD *)(v6 + 8);
  v7 = (_QWORD *)(a1 + 104);
  if (v4)
    v7 = (_QWORD *)(v4 + 200);
  *v7 = v3;
  if (v5)
    *(_QWORD *)(v5 + 208) = *(_QWORD *)(*a2 + 192);
  v8 = *(_OWORD **)(*a2 + 192);
  *(_OWORD *)((char *)v8 + 156) = *(_OWORD *)(*a2 + 156);
  *a2 = (uint64_t)v8;
  v9 = v8[1];
  v8[3] = *v8;
  v8[4] = v9;
  v8[5] = v8[2];
  *(_QWORD *)(*a2 + 208) = v4;
  *(_QWORD *)(*a2 + 200) = v5;
  if (*(double *)(*a2 + 144) != -1.0e40)
    std::priority_queue<long long>::push(a1 + 112, *(_QWORD *)(*a2 + 104));
}

void sub_184A4AC10(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ClipperLib::Clipper::ProcessHorizontals(ClipperLib::Clipper *this)
{
  _QWORD *v1;
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _QWORD *MaximaPair;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  void (*v31)(__int128 *, __int128 *, uint64_t, uint64_t, uint64_t);
  uint64_t *i;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  __int128 *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  ClipperLib::Clipper *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  char *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  __int128 *v99;
  __int128 *v100;
  _OWORD v101[3];
  _OWORD v102[3];
  _OWORD v103[3];
  _OWORD v104[3];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 *v108[2];

  v1 = (_QWORD *)((char *)this + 112);
  v2 = (__int128 *)*((_QWORD *)this + 14);
  if (!v2)
    return;
  v98 = (char *)this + 88;
  v93 = (char *)this + 40;
  v94 = (_QWORD *)((char *)this + 112);
  do
  {
    v4 = *((_QWORD *)v2 + 27);
    v5 = *((_QWORD *)v2 + 28);
    if (*(__int128 *)((char *)v2 + 216) == 0)
    {
      *v1 = 0;
    }
    else
    {
      v6 = (_QWORD *)(v5 + 216);
      if (!v5)
        v6 = v1;
      *v6 = v4;
      if (v4)
        *(_QWORD *)(v4 + 224) = v5;
    }
    *((_QWORD *)v2 + 27) = 0;
    *((_QWORD *)v2 + 28) = 0;
    v108[0] = v2;
    v7 = *(_QWORD *)v2;
    v8 = *((_QWORD *)v2 + 12);
    v9 = *((_DWORD *)v2 + 40);
    v10 = *(_QWORD *)v2 < v8;
    if (*(_QWORD *)v2 >= v8)
      v11 = *((_QWORD *)v2 + 12);
    else
      v11 = *(_QWORD *)v2;
    if (*(_QWORD *)v2 < v8)
      v12 = *((_QWORD *)v2 + 12);
    else
      v12 = *(_QWORD *)v2;
    v96 = v12;
    v97 = v11;
    v13 = v2;
    while (1)
    {
      v100 = v13;
      v13 = (__int128 *)*((_QWORD *)v13 + 24);
      if (!v13)
        break;
      if (*((double *)v13 + 18) != -1.0e40)
      {
        MaximaPair = 0;
        goto LABEL_20;
      }
    }
    MaximaPair = ClipperLib::GetMaximaPair(v100);
LABEL_20:
    v95 = (uint64_t)MaximaPair;
    if (*((_QWORD *)this + 13))
    {
      v15 = (char *)*((_QWORD *)this + 12);
      v16 = v98;
      if (v7 < v8)
      {
        v17 = v98;
        if (v15 == v98)
        {
          v15 = 0;
          v10 = 1;
        }
        else
        {
          while (1)
          {
            v18 = *((_QWORD *)v15 + 2);
            if (v18 > v7)
              break;
            v15 = (char *)*((_QWORD *)v15 + 1);
            if (v15 == v98)
            {
              v15 = 0;
              v10 = 1;
              v17 = v98;
              goto LABEL_33;
            }
          }
          if (v18 >= *((_QWORD *)v100 + 12))
            v17 = v98;
          else
            v17 = v15;
          v10 = 1;
          v15 = 0;
        }
        goto LABEL_33;
      }
      while (v16 != v15)
      {
        v19 = v16;
        v16 = *(char **)v16;
        v20 = *((_QWORD *)v16 + 2);
        if (v20 <= v7)
        {
          v17 = 0;
          if (v20 > *((_QWORD *)v100 + 12))
            v15 = v19;
          goto LABEL_33;
        }
      }
    }
    else
    {
      v15 = 0;
    }
    v17 = 0;
LABEL_33:
    v21 = 0;
    while (1)
    {
      v22 = 208;
      if (v10)
        v22 = 200;
      v23 = *(_QWORD *)((char *)v2 + v22);
      if (v23)
        break;
LABEL_98:
      v51 = *((_QWORD *)v2 + 24);
      if (!v51 || *(double *)(v51 + 144) != -1.0e40)
      {
        v65 = *((unsigned int *)v2 + 43);
        if ((v65 & 0x80000000) != 0)
        {
          v1 = v94;
          if (v51)
            goto LABEL_157;
        }
        else
        {
          v1 = v94;
          if (!v21)
          {
            v66 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 80);
            if (v65 >= (*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 88) - v66) >> 3)
            {
LABEL_189:
              __break(1u);
              return;
            }
            v67 = (uint64_t *)(*(_QWORD *)(v66 + 8 * v65) + 24);
            if (*((_DWORD *)v2 + 39) != 1)
              v67 = (uint64_t *)(*v67 + 64);
            v68 = *v67;
            v69 = (uint64_t *)*v94;
            if (*v94)
            {
              do
              {
                v70 = *((unsigned int *)v69 + 43);
                if ((v70 & 0x80000000) == 0)
                {
                  v71 = *(_QWORD *)v2;
                  v72 = *((_QWORD *)v2 + 12);
                  v73 = *v69;
                  v74 = v69[12];
                  if (*(_QWORD *)v2 >= v72)
                    v75 = *((_QWORD *)v2 + 12);
                  else
                    v75 = *(_QWORD *)v2;
                  if (*(_QWORD *)v2 <= v72)
                    v71 = *((_QWORD *)v2 + 12);
                  if (v73 >= v74)
                    v76 = v69[12];
                  else
                    v76 = *v69;
                  if (v73 <= v74)
                    v73 = v69[12];
                  if (v75 < v73 && v76 < v71)
                  {
                    v78 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 80);
                    if (v70 >= (*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 88) - v78) >> 3)
                      goto LABEL_189;
                    v79 = (uint64_t *)(*(_QWORD *)(v78 + 8 * v70) + 24);
                    if (*((_DWORD *)v69 + 39) != 1)
                      v79 = (uint64_t *)(*v79 + 64);
                    v80 = *v79;
                    v81 = *((_OWORD *)v69 + 7);
                    v105 = *((_OWORD *)v69 + 6);
                    v106 = v81;
                    v107 = *((_OWORD *)v69 + 8);
                    ClipperLib::Clipper::AddJoin(this, v80, v68, &v105);
                  }
                }
                v69 = (uint64_t *)v69[27];
              }
              while (v69);
            }
            v82 = v2[7];
            v102[0] = v2[6];
            v102[1] = v82;
            v102[2] = v2[8];
            ClipperLib::Clipper::AddGhostJoin(this, v68, v102);
            v51 = *((_QWORD *)v2 + 24);
            LODWORD(v65) = *((_DWORD *)v2 + 43);
          }
          if (v51)
          {
LABEL_157:
            if ((v65 & 0x80000000) != 0)
            {
              ClipperLib::ClipperBase::UpdateEdgeIntoAEL((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (uint64_t *)v108);
              goto LABEL_126;
            }
            v83 = ClipperLib::Clipper::AddOutPt(this, (uint64_t)v2, v2 + 6);
            ClipperLib::ClipperBase::UpdateEdgeIntoAEL((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (uint64_t *)v108);
            v84 = v108[0];
            if (!*((_DWORD *)v108[0] + 40))
              goto LABEL_126;
            v85 = *((_QWORD *)v108[0] + 25);
            v86 = *((_QWORD *)v108[0] + 26);
            if (v86
              && *(_QWORD *)(v86 + 48) == *(_QWORD *)v108[0]
              && (v87 = *(_QWORD *)(v86 + 56), v87 == *((_QWORD *)v108[0] + 1))
              && *(_DWORD *)(v86 + 160)
              && (*(_DWORD *)(v86 + 172) & 0x80000000) == 0
              && v87 > *(_QWORD *)(v86 + 104)
              && ClipperLib::SlopesEqual((_QWORD *)v108[0], *((_QWORD **)v108[0] + 26), v93[*(_QWORD *)(*(_QWORD *)this - 24)]))
            {
              v88 = this;
              v89 = v86;
            }
            else
            {
              if (!v85)
                goto LABEL_126;
              if (*(_QWORD *)(v85 + 48) != *(_QWORD *)v84)
                goto LABEL_126;
              v90 = *(_QWORD *)(v85 + 56);
              if (v90 != *((_QWORD *)v84 + 1)
                || !*(_DWORD *)(v85 + 160)
                || (*(_DWORD *)(v85 + 172) & 0x80000000) != 0
                || v90 <= *(_QWORD *)(v85 + 104)
                || !ClipperLib::SlopesEqual(v84, (_QWORD *)v85, v93[*(_QWORD *)(*(_QWORD *)this - 24)]))
              {
                goto LABEL_126;
              }
              v88 = this;
              v89 = v85;
            }
            v91 = ClipperLib::Clipper::AddOutPt(v88, v89, v84);
            v92 = v84[7];
            v101[0] = v84[6];
            v101[1] = v92;
            v101[2] = v84[8];
            ClipperLib::Clipper::AddJoin(this, v83, v91, v101);
            goto LABEL_126;
          }
        }
        if ((v65 & 0x80000000) == 0)
          ClipperLib::Clipper::AddOutPt(this, (uint64_t)v2, v2 + 6);
        v60 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        v62 = *((_QWORD *)v2 + 25);
        v63 = *((_QWORD *)v2 + 26);
        v61 = (_QWORD *)v2 + 25;
        if (*(__int128 *)((char *)v2 + 200) != 0)
          goto LABEL_119;
        if (*((__int128 **)v60 + 13) == v2)
          goto LABEL_122;
        goto LABEL_126;
      }
      ClipperLib::ClipperBase::UpdateEdgeIntoAEL((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (uint64_t *)v108);
      v2 = v108[0];
      if ((*((_DWORD *)v108[0] + 43) & 0x80000000) == 0)
        ClipperLib::Clipper::AddOutPt(this, (uint64_t)v108[0], v108[0]);
      v52 = *(_QWORD *)v2;
      v53 = *((_QWORD *)v2 + 12);
      v10 = *(_QWORD *)v2 < v53;
      if (*(_QWORD *)v2 >= v53)
        v54 = *((_QWORD *)v2 + 12);
      else
        v54 = *(_QWORD *)v2;
      if (*(_QWORD *)v2 < v53)
        v52 = *((_QWORD *)v2 + 12);
      v96 = v52;
      v97 = v54;
    }
    v99 = v2;
    while (1)
    {
      if (*((_QWORD *)this + 13))
      {
        if (v10)
        {
          if (v17 == v98)
          {
            v17 = v98;
            goto LABEL_58;
          }
          while (*((_QWORD *)v17 + 2) < *(_QWORD *)(v23 + 48))
          {
            if ((*((_DWORD *)v2 + 43) & 0x80000000) == 0 && v9)
            {
              v24 = *((_QWORD *)v2 + 1);
              *(_QWORD *)&v105 = *((_QWORD *)v17 + 2);
              *((_QWORD *)&v105 + 1) = v24;
              v106 = ClipperLib::PointInfoZero;
              v107 = unk_184F7D388;
              ClipperLib::Clipper::AddOutPt(this, (uint64_t)v2, &v105);
            }
            v17 = (char *)*((_QWORD *)v17 + 1);
            if (v17 == v98)
            {
              v17 = v98;
              break;
            }
          }
        }
        else
        {
          v25 = (char *)*((_QWORD *)this + 12);
          if (v15 == v25)
            goto LABEL_55;
          while (1)
          {
            v26 = *(char **)v15;
            if (*(_QWORD *)(*(_QWORD *)v15 + 16) <= *(_QWORD *)(v23 + 48))
              break;
            if ((*((_DWORD *)v2 + 43) & 0x80000000) == 0 && v9)
            {
              v27 = *((_QWORD *)v2 + 1);
              *(_QWORD *)&v105 = *(_QWORD *)(*(_QWORD *)v15 + 16);
              *((_QWORD *)&v105 + 1) = v27;
              v106 = ClipperLib::PointInfoZero;
              v107 = unk_184F7D388;
              ClipperLib::Clipper::AddOutPt(this, (uint64_t)v2, &v105);
              v26 = *(char **)v15;
              v25 = (char *)*((_QWORD *)this + 12);
            }
            v15 = v26;
            if (v26 == v25)
            {
              v15 = v25;
              break;
            }
          }
        }
      }
      if (!v10)
      {
LABEL_55:
        v28 = *(_QWORD *)(v23 + 48);
        if (v28 < v97)
          goto LABEL_97;
        goto LABEL_59;
      }
LABEL_58:
      v28 = *(_QWORD *)(v23 + 48);
      if (v28 > v96)
        goto LABEL_97;
LABEL_59:
      v29 = v108[0];
      if (v28 == *((_QWORD *)v108[0] + 12))
      {
        v30 = *((_QWORD *)v108[0] + 24);
        if (v30)
        {
          if (*(double *)(v23 + 144) < *(double *)(v30 + 144))
            goto LABEL_97;
        }
      }
      if ((*((_DWORD *)v108[0] + 43) & 0x80000000) == 0 && v9)
      {
        v31 = (void (*)(__int128 *, __int128 *, uint64_t, uint64_t, uint64_t))*((_QWORD *)this + 17);
        if (v31)
        {
          v31(v108[0], v108[0] + 6, v23, v23 + 96, v23 + 48);
          v29 = v108[0];
        }
        v21 = ClipperLib::Clipper::AddOutPt(this, (uint64_t)v29, (__int128 *)(v23 + 48));
        for (i = (uint64_t *)*((_QWORD *)this + 14); i; i = (uint64_t *)i[27])
        {
          v33 = *((unsigned int *)i + 43);
          if ((v33 & 0x80000000) == 0)
          {
            v34 = *(_QWORD *)v29;
            v35 = *((_QWORD *)v29 + 12);
            v36 = *i;
            v37 = i[12];
            if (*(_QWORD *)v29 >= v35)
              v38 = *((_QWORD *)v29 + 12);
            else
              v38 = *(_QWORD *)v29;
            if (*(_QWORD *)v29 <= v35)
              v34 = *((_QWORD *)v29 + 12);
            if (v36 >= v37)
              v39 = i[12];
            else
              v39 = *i;
            if (v36 <= v37)
              v36 = i[12];
            if (v38 < v36 && v39 < v34)
            {
              v41 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 80);
              if (v33 >= (*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 88) - v41) >> 3)
                goto LABEL_189;
              v42 = (uint64_t *)(*(_QWORD *)(v41 + 8 * v33) + 24);
              if (*((_DWORD *)i + 39) != 1)
                v42 = (uint64_t *)(*v42 + 64);
              v43 = *v42;
              v44 = *((_OWORD *)i + 7);
              v104[0] = *((_OWORD *)i + 6);
              v104[1] = v44;
              v104[2] = *((_OWORD *)i + 8);
              ClipperLib::Clipper::AddJoin(this, v43, v21, v104);
            }
          }
        }
        v45 = v29[1];
        v103[0] = *v29;
        v103[1] = v45;
        v103[2] = v29[2];
        ClipperLib::Clipper::AddGhostJoin(this, v21, v103);
      }
      if (v99 == v100 && v23 == v95)
        break;
      v46 = *((_QWORD *)v29 + 7);
      *(_QWORD *)&v105 = *(_QWORD *)(v23 + 48);
      *((_QWORD *)&v105 + 1) = v46;
      v106 = ClipperLib::PointInfoZero;
      v107 = unk_184F7D388;
      if (v10)
      {
        v47 = v29;
        v48 = (_DWORD *)v23;
      }
      else
      {
        v47 = (_DWORD *)v23;
        v48 = v29;
      }
      ClipperLib::Clipper::IntersectEdges(this, v47, v48, &v105);
      v49 = 208;
      if (v10)
        v49 = 200;
      v50 = *(_QWORD *)(v23 + v49);
      v2 = v108[0];
      ClipperLib::ClipperBase::SwapPositionsInAEL((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (uint64_t)v108[0], v23);
      v23 = v50;
      if (!v50)
      {
LABEL_97:
        v2 = v108[0];
        goto LABEL_98;
      }
    }
    if ((*((_DWORD *)v29 + 43) & 0x80000000) == 0)
      ClipperLib::Clipper::AddLocalMaxPoly(this, (uint64_t)v29, v95, v29 + 6);
    v55 = *(_QWORD *)(*(_QWORD *)this - 24);
    v56 = (char *)this + v55;
    v57 = *((_QWORD *)v29 + 25);
    v58 = *((_QWORD *)v29 + 26);
    v1 = v94;
    if (*(__int128 *)((char *)v29 + 200) == 0)
    {
      if (*((__int128 **)v56 + 13) == v29)
        goto LABEL_114;
    }
    else
    {
      if (v58)
      {
        v59 = (_QWORD *)(v58 + 200);
        goto LABEL_115;
      }
LABEL_114:
      v59 = v56 + 104;
LABEL_115:
      *v59 = v57;
      if (v57)
        *(_QWORD *)(v57 + 208) = v58;
      *((_QWORD *)v29 + 25) = 0;
      *((_QWORD *)v29 + 26) = 0;
      v55 = *(_QWORD *)(*(_QWORD *)this - 24);
    }
    v60 = (char *)this + v55;
    v62 = *(_QWORD *)(v95 + 200);
    v63 = *(_QWORD *)(v95 + 208);
    v61 = (_QWORD *)(v95 + 200);
    if (*(_OWORD *)(v95 + 200) == 0)
    {
      if (*((_QWORD *)v60 + 13) == v95)
        goto LABEL_122;
    }
    else
    {
LABEL_119:
      if (v63)
      {
        v64 = (_QWORD *)(v63 + 200);
        goto LABEL_123;
      }
LABEL_122:
      v64 = v60 + 104;
LABEL_123:
      *v64 = v62;
      if (v62)
        *(_QWORD *)(v62 + 208) = v63;
      *v61 = 0;
      v61[1] = 0;
    }
LABEL_126:
    v2 = (__int128 *)*v1;
  }
  while (*v1);
}

void std::priority_queue<long long>::push(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *(_QWORD **)a1;
    v8 = ((uint64_t)v5 - *(_QWORD *)a1) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        std::__throw_bad_array_new_length[abi:se180100]();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = a2;
    v6 = v13 + 8;
    while (v5 != v7)
    {
      v14 = *--v5;
      *((_QWORD *)v13 - 1) = v14;
      v13 -= 8;
    }
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = &v12[8 * v11];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  *(_QWORD *)(a1 + 8) = v6;
  v15 = *(_QWORD **)a1;
  v16 = (uint64_t)v6 - *(_QWORD *)a1;
  if (v16 >= 9)
  {
    v17 = (((unint64_t)v16 >> 3) - 2) >> 1;
    v18 = &v15[v17];
    v21 = *(v6 - 1);
    v20 = v6 - 1;
    v19 = v21;
    v22 = *v18;
    if (*v18 < v21)
    {
      do
      {
        *v20 = v22;
        v20 = v18;
        if (!v17)
          break;
        v17 = (v17 - 1) >> 1;
        v18 = &v15[v17];
        v22 = *v18;
      }
      while (*v18 < v19);
      *v20 = v19;
    }
  }
}

_QWORD *std::__list_imp<long long>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t ClipperLib::ClipperBase::PopScanbeam(uint64_t this, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;

  v2 = *(uint64_t **)(this + 112);
  v3 = *(uint64_t **)(this + 120);
  if (v2 == v3)
    return v2 != v3;
  *a2 = *v2;
  v4 = (char *)v3 - (char *)v2;
  if ((char *)v3 - (char *)v2 > 0)
  {
    if (v4 != 8)
    {
      v5 = 0;
      v6 = v4 >> 3;
      v7 = *v2;
      v8 = (unint64_t)((v4 >> 3) - 2) >> 1;
      v9 = v2;
      do
      {
        v10 = &v9[v5 + 1];
        v11 = (2 * v5) | 1;
        v5 = 2 * v5 + 2;
        if (v5 >= v6)
        {
          v12 = *v10;
          v5 = v11;
        }
        else
        {
          v12 = *v10;
          v13 = v10[1];
          if (*v10 <= v13)
            v12 = v10[1];
          if (*v10 >= v13)
            v5 = v11;
          else
            ++v10;
        }
        *v9 = v12;
        v9 = v10;
      }
      while (v5 <= v8);
      v14 = v3 - 1;
      if (v10 == v3 - 1)
      {
        *v10 = v7;
      }
      else
      {
        *v10 = *v14;
        *v14 = v7;
        v15 = (char *)v10 - (char *)v2 + 8;
        if (v15 >= 9)
        {
          v16 = (((unint64_t)v15 >> 3) - 2) >> 1;
          v17 = &v2[v16];
          v18 = *v17;
          v19 = *v10;
          if (*v17 < *v10)
          {
            do
            {
              *v10 = v18;
              v10 = v17;
              if (!v16)
                break;
              v16 = (v16 - 1) >> 1;
              v17 = &v2[v16];
              v18 = *v17;
            }
            while (*v17 < v19);
            *v10 = v19;
          }
        }
      }
    }
    v20 = v3 - 1;
    if (v2 == v3 - 1)
    {
LABEL_42:
      v21 = v2;
    }
    else
    {
      v21 = v3;
      while (1)
      {
        v22 = v21;
        v21 = v20;
        v23 = *a2;
        if (*a2 != *v2)
          break;
        v24 = (char *)v20 - (char *)v2;
        if ((char *)v21 - (char *)v2 <= 0)
        {
          *(_QWORD *)(this + 120) = v21;
          goto LABEL_46;
        }
        if (v24 != 8)
        {
          v25 = 0;
          v26 = v24 >> 3;
          v27 = (unint64_t)((v24 >> 3) - 2) >> 1;
          v28 = v2;
          do
          {
            v29 = &v28[v25 + 1];
            v30 = (2 * v25) | 1;
            v25 = 2 * v25 + 2;
            if (v25 >= v26)
            {
              v31 = *v29;
              v25 = v30;
            }
            else
            {
              v31 = *v29;
              v32 = v29[1];
              if (*v29 <= v32)
                v31 = v29[1];
              if (*v29 >= v32)
                v25 = v30;
              else
                ++v29;
            }
            *v28 = v31;
            v28 = v29;
          }
          while (v25 <= v27);
          v33 = v22 - 2;
          if (v29 == v33)
          {
            *v29 = v23;
          }
          else
          {
            *v29 = *v33;
            *v33 = v23;
            v34 = (char *)v29 - (char *)v2 + 8;
            if (v34 >= 9)
            {
              v35 = (((unint64_t)v34 >> 3) - 2) >> 1;
              v36 = &v2[v35];
              v37 = *v36;
              v38 = *v29;
              if (*v36 < *v29)
              {
                do
                {
                  *v29 = v37;
                  v29 = v36;
                  if (!v35)
                    break;
                  v35 = (v35 - 1) >> 1;
                  v36 = &v2[v35];
                  v37 = *v36;
                }
                while (*v36 < v38);
                *v29 = v38;
              }
            }
          }
        }
        v20 = v21 - 1;
        if (v2 == v21 - 1)
          goto LABEL_42;
      }
    }
    *(_QWORD *)(this + 120) = v21;
    return v2 != v3;
  }
LABEL_46:
  __break(1u);
  return this;
}

void ClipperLib::Clipper::InsertLocalMinimaIntoAEL(ClipperLib::Clipper *this, uint64_t a2)
{
  char *v2;
  char *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 *v38;
  char *v39;
  _QWORD *v40;
  _OWORD v41[3];
  _OWORD v42[3];
  _OWORD v43[4];

  v2 = (char *)this + 40;
  v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v6 = (_QWORD *)*((_QWORD *)v3 + 1);
  v4 = v3 + 8;
  v5 = v6;
  if (v6 != (_QWORD *)v4[2])
  {
    v9 = (uint64_t *)((char *)this + 112);
    do
    {
      if (*v5 != a2)
        return;
      *v4 = v5 + 3;
      v10 = v5[1];
      v11 = v5[2];
      if (v10)
      {
        ClipperLib::Clipper::InsertEdgeIntoAEL((uint64_t *)this, v5[1], 0);
        if (!v11)
        {
          ClipperLib::Clipper::SetWindingCount((uint64_t)this, v10);
          if (ClipperLib::Clipper::IsContributing((uint64_t)this, (_DWORD *)v10))
            ClipperLib::Clipper::AddOutPt(this, v10, (__int128 *)v10);
          std::priority_queue<long long>::push((uint64_t)v9 + *(_QWORD *)(*(_QWORD *)this - 24), *(_QWORD *)(v10 + 104));
          goto LABEL_65;
        }
        ClipperLib::Clipper::InsertEdgeIntoAEL((uint64_t *)this, v11, v10);
        ClipperLib::Clipper::SetWindingCount((uint64_t)this, v10);
        *(_QWORD *)(v11 + 164) = *(_QWORD *)(v10 + 164);
        if (ClipperLib::Clipper::IsContributing((uint64_t)this, (_DWORD *)v10))
          v12 = ClipperLib::Clipper::AddLocalMinPoly(this, v10, v11, v10);
        else
          v12 = 0;
        std::priority_queue<long long>::push((uint64_t)v9 + *(_QWORD *)(*(_QWORD *)this - 24), *(_QWORD *)(v10 + 104));
      }
      else
      {
        ClipperLib::Clipper::InsertEdgeIntoAEL((uint64_t *)this, v5[2], 0);
        ClipperLib::Clipper::SetWindingCount((uint64_t)this, v11);
        v12 = 0;
        if (ClipperLib::Clipper::IsContributing((uint64_t)this, (_DWORD *)v11))
          v12 = ClipperLib::Clipper::AddOutPt(this, v11, (__int128 *)v11);
        if (!v11)
          goto LABEL_65;
      }
      v13 = v11;
      if (*(double *)(v11 + 144) != -1.0e40)
        goto LABEL_21;
      v14 = *v9;
      *(_QWORD *)(v11 + 224) = 0;
      if (v14)
        *(_QWORD *)(v14 + 224) = v11;
      *v9 = v11;
      *(_QWORD *)(v11 + 216) = v14;
      v13 = *(_QWORD *)(v11 + 192);
      if (v13)
LABEL_21:
        std::priority_queue<long long>::push((uint64_t)v9 + *(_QWORD *)(*(_QWORD *)this - 24), *(_QWORD *)(v13 + 104));
      if (v10)
      {
        if (v12)
        {
          if (*(double *)(v11 + 144) == -1.0e40)
          {
            v16 = *((_QWORD *)this + 4);
            v15 = *((_QWORD *)this + 5);
            if (v15 != v16)
            {
              if (*(_DWORD *)(v11 + 160))
              {
                v17 = 0;
                do
                {
                  v18 = *(_QWORD **)(v16 + 8 * v17);
                  v19 = *v18;
                  v20 = *(_QWORD *)(*v18 + 8);
                  v23 = v18[2];
                  v21 = v18 + 2;
                  v22 = v23;
                  v24 = *(_QWORD *)v11;
                  v25 = *(_QWORD *)(v11 + 96);
                  v26 = v20 <= v23;
                  if (v20 >= v23)
                    v27 = v22;
                  else
                    v27 = v20;
                  if (v26)
                    v20 = v22;
                  if (v24 >= v25)
                    v28 = *(_QWORD *)(v11 + 96);
                  else
                    v28 = *(_QWORD *)v11;
                  if (v24 <= v25)
                    v24 = *(_QWORD *)(v11 + 96);
                  if (v27 < v24 && v28 < v20)
                  {
                    v30 = v21[1];
                    v43[0] = *v21;
                    v43[1] = v30;
                    v43[2] = v21[2];
                    ClipperLib::Clipper::AddJoin(this, v19, v12, v43);
                    v16 = *((_QWORD *)this + 4);
                    v15 = *((_QWORD *)this + 5);
                  }
                  ++v17;
                }
                while (v17 < (v15 - v16) >> 3);
              }
            }
          }
        }
        if ((*(_DWORD *)(v10 + 172) & 0x80000000) == 0)
        {
          v31 = *(_QWORD *)(v10 + 208);
          if (v31)
          {
            if (*(_QWORD *)(v31 + 48) == *(_QWORD *)v10
              && (*(_DWORD *)(v31 + 172) & 0x80000000) == 0
              && ClipperLib::SlopesEqual(*(_QWORD *)v31, *(_QWORD *)(v31 + 8), *(_QWORD *)(v31 + 96), *(_QWORD *)(v31 + 104), *(_QWORD *)(v10 + 48), *(_QWORD *)(v10 + 56), *(_QWORD *)(v10 + 96), *(_QWORD *)(v10 + 104), v2[*(_QWORD *)(*(_QWORD *)this - 24)])&& *(_DWORD *)(v10 + 160)&& *(_DWORD *)(v31 + 160))
            {
              v32 = ClipperLib::Clipper::AddOutPt(this, v31, (__int128 *)v10);
              v33 = *(_OWORD *)(v10 + 112);
              v42[0] = *(_OWORD *)(v10 + 96);
              v42[1] = v33;
              v42[2] = *(_OWORD *)(v10 + 128);
              ClipperLib::Clipper::AddJoin(this, v12, v32, v42);
            }
          }
        }
        v34 = *(_QWORD *)(v10 + 200);
        if (v34 != v11)
        {
          if ((*(_DWORD *)(v11 + 172) & 0x80000000) == 0)
          {
            v35 = *(_QWORD *)(v11 + 208);
            if ((*(_DWORD *)(v35 + 172) & 0x80000000) == 0
              && ClipperLib::SlopesEqual(*(_QWORD *)(v35 + 48), *(_QWORD *)(v35 + 56), *(_QWORD *)(v35 + 96), *(_QWORD *)(v35 + 104), *(_QWORD *)(v11 + 48), *(_QWORD *)(v11 + 56), *(_QWORD *)(v11 + 96), *(_QWORD *)(v11 + 104), v2[*(_QWORD *)(*(_QWORD *)this - 24)])&& *(_DWORD *)(v11 + 160)&& *(_DWORD *)(v35 + 160))
            {
              v36 = ClipperLib::Clipper::AddOutPt(this, v35, (__int128 *)v11);
              v37 = *(_OWORD *)(v11 + 112);
              v41[0] = *(_OWORD *)(v11 + 96);
              v41[1] = v37;
              v41[2] = *(_OWORD *)(v11 + 128);
              ClipperLib::Clipper::AddJoin(this, v12, v36, v41);
              v34 = *(_QWORD *)(v10 + 200);
            }
          }
          if (v34 && v34 != v11)
          {
            v38 = (__int128 *)(v10 + 48);
            do
            {
              ClipperLib::Clipper::IntersectEdges(this, (_DWORD *)v11, (_DWORD *)v34, v38);
              v34 = *(_QWORD *)(v34 + 200);
            }
            while (v34 != v11);
          }
        }
      }
LABEL_65:
      v39 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v40 = (_QWORD *)*((_QWORD *)v39 + 1);
      v4 = v39 + 8;
      v5 = v40;
    }
    while (v40 != (_QWORD *)v4[2]);
  }
}

uint64_t ClipperLib::Clipper::ClearGhostJoins(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(this + 32);
  v2 = *(_QWORD *)(this + 40);
  if (v2 != v1)
  {
    v3 = this;
    v4 = 0;
    do
    {
      this = *(_QWORD *)(v1 + 8 * v4);
      if (this)
      {
        this = MEMORY[0x186DC23C4](this, 0x1020C40038FC326);
        v1 = *(_QWORD *)(v3 + 32);
        v2 = *(_QWORD *)(v3 + 40);
      }
      ++v4;
    }
    while (v4 < (v2 - v1) >> 3);
    if (v2 != v1)
      *(_QWORD *)(v3 + 40) = v1;
  }
  return this;
}

uint64_t *std::list<long long>::__sort<std::__less<void,void>>(uint64_t *result, uint64_t *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *i;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *j;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      v4 = (uint64_t *)*a2;
      if (*(_QWORD *)(*a2 + 16) < result[2])
      {
        v5 = *v4;
        *(_QWORD *)(v5 + 8) = v4[1];
        *(_QWORD *)v4[1] = v5;
        v6 = *result;
        *(_QWORD *)(v6 + 8) = v4;
        *v4 = v6;
        *result = (uint64_t)v4;
        v4[1] = (uint64_t)result;
        return v4;
      }
    }
    else
    {
      v8 = a3 >> 1;
      v9 = (a3 >> 1) + 1;
      v10 = result;
      do
      {
        v10 = (uint64_t *)v10[1];
        --v9;
      }
      while (v9 > 1);
      v11 = (uint64_t *)std::list<long long>::__sort<std::__less<void,void>>(result, v10, a3 >> 1);
      result = (uint64_t *)std::list<long long>::__sort<std::__less<void,void>>(v10, a2, a3 - v8);
      v12 = v11[2];
      if (result[2] >= v12)
      {
        v14 = (uint64_t *)v11[1];
        i = result;
        result = v11;
      }
      else
      {
        for (i = (uint64_t *)result[1]; i != a2; i = (uint64_t *)i[1])
        {
          if (i[2] >= v12)
            goto LABEL_14;
        }
        i = a2;
LABEL_14:
        v15 = *i;
        v16 = *result;
        *(_QWORD *)(v16 + 8) = *(_QWORD *)(*i + 8);
        **(_QWORD **)(v15 + 8) = v16;
        v17 = *v11;
        v14 = (uint64_t *)v11[1];
        *(_QWORD *)(v17 + 8) = result;
        *result = v17;
        *v11 = v15;
        *(_QWORD *)(v15 + 8) = v11;
      }
      if (v14 != i && i != a2)
      {
        v18 = i;
        do
        {
          v19 = v14[2];
          if (i[2] >= v19)
          {
            v14 = (uint64_t *)v14[1];
          }
          else
          {
            for (j = (uint64_t *)i[1]; j != a2; j = (uint64_t *)j[1])
            {
              if (j[2] >= v19)
                goto LABEL_25;
            }
            j = a2;
LABEL_25:
            v21 = *j;
            v22 = *i;
            *(_QWORD *)(v22 + 8) = *(_QWORD *)(*j + 8);
            **(_QWORD **)(v21 + 8) = v22;
            if (v18 == i)
              v18 = j;
            v24 = *v14;
            v23 = (uint64_t *)v14[1];
            *(_QWORD *)(v24 + 8) = i;
            *i = v24;
            *v14 = v21;
            *(_QWORD *)(v21 + 8) = v14;
            v14 = v23;
            i = j;
          }
        }
        while (v14 != v18 && i != a2);
      }
    }
  }
  return result;
}

uint64_t ClipperLib::Clipper::AddOutPt(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _DWORD *OutRec;
  int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;

  v6 = *(unsigned int *)(a2 + 172);
  result = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  if ((v6 & 0x80000000) != 0)
  {
    OutRec = ClipperLib::ClipperBase::CreateOutRec((ClipperLib::ClipperBase *)result);
    *((_BYTE *)OutRec + 5) = *(_DWORD *)(a2 + 160) == 0;
    result = operator new();
    *((_QWORD *)OutRec + 3) = result;
    v17 = *OutRec;
    *(_DWORD *)result = *OutRec;
    *(_OWORD *)(result + 40) = a3[2];
    v18 = *a3;
    *(_OWORD *)(result + 24) = a3[1];
    *(_OWORD *)(result + 8) = v18;
    *(_QWORD *)(result + 56) = result;
    *(_QWORD *)(result + 64) = result;
    if (!*((_BYTE *)OutRec + 5))
    {
      v19 = *(_QWORD *)(a2 + 208);
      if (!v19)
        goto LABEL_37;
      v20 = 0;
      do
      {
        v21 = v20;
        v22 = *(_DWORD *)(v19 + 172);
        if ((v22 & 0x80000000) == 0)
        {
          if (*(_DWORD *)(v19 + 160))
          {
            v20 = v19;
            if (v21)
            {
              if (*(_DWORD *)(v21 + 172) == v22)
                v20 = 0;
              else
                v20 = v21;
            }
          }
        }
        v19 = *(_QWORD *)(v19 + 208);
      }
      while (v19);
      if (v20)
      {
        v23 = (char *)a1 + *(_QWORD *)(*a1 - 24);
        v24 = *(int *)(v20 + 172);
        v25 = *((_QWORD *)v23 + 10);
        if (v24 >= (*((_QWORD *)v23 + 11) - v25) >> 3)
          goto LABEL_40;
        v26 = *(_QWORD *)(v25 + 8 * v24);
        *((_QWORD *)OutRec + 1) = v26;
        *((_BYTE *)OutRec + 4) = *(_BYTE *)(v26 + 4) ^ 1;
      }
      else
      {
LABEL_37:
        *((_QWORD *)OutRec + 1) = 0;
        *((_BYTE *)OutRec + 4) = 0;
      }
    }
    *(_DWORD *)(a2 + 172) = v17;
    return result;
  }
  v8 = *(_QWORD *)(result + 80);
  if (v6 >= (*(_QWORD *)(result + 88) - v8) >> 3)
  {
LABEL_40:
    __break(1u);
    return result;
  }
  v9 = *(int **)(v8 + 8 * v6);
  v10 = *((_QWORD *)v9 + 3);
  v11 = *(_DWORD *)(a2 + 156);
  if (v11 == 1)
  {
    if (*(_QWORD *)a3 != *(_QWORD *)(v10 + 8) || *((_QWORD *)a3 + 1) != *(_QWORD *)(v10 + 16))
    {
LABEL_31:
      result = operator new();
      v28 = *v9;
      *(_OWORD *)(result + 40) = a3[2];
      v29 = *a3;
      *(_OWORD *)(result + 24) = a3[1];
      *(_DWORD *)result = v28;
      *(_OWORD *)(result + 8) = v29;
      v30 = *(_QWORD *)(v10 + 64);
      *(_QWORD *)(result + 56) = v10;
      *(_QWORD *)(result + 64) = v30;
      *(_QWORD *)(v30 + 56) = result;
      *(_QWORD *)(v10 + 64) = result;
      if (v11 == 1)
        *((_QWORD *)v9 + 3) = result;
      return result;
    }
    v13 = *((_QWORD *)a3 + 4);
    if (v13 != -1 && (*((_QWORD *)a3 + 2) != v13 || *((double *)a3 + 3) != *((double *)a3 + 5)))
    {
      v14 = *a3;
      v15 = a3[2];
      *(_OWORD *)(v10 + 24) = a3[1];
      *(_OWORD *)(v10 + 40) = v15;
      *(_OWORD *)(v10 + 8) = v14;
    }
    return v10;
  }
  else
  {
    result = *(_QWORD *)(v10 + 64);
    if (*(_QWORD *)a3 != *(_QWORD *)(result + 8) || *((_QWORD *)a3 + 1) != *(_QWORD *)(result + 16))
      goto LABEL_31;
    v31 = *((_QWORD *)a3 + 4);
    if (v31 != -1 && (*((_QWORD *)a3 + 2) != v31 || *((double *)a3 + 3) != *((double *)a3 + 5)))
    {
      v32 = *a3;
      v33 = a3[2];
      *(_OWORD *)(result + 24) = a3[1];
      *(_OWORD *)(result + 40) = v33;
      *(_OWORD *)(result + 8) = v32;
      return *(_QWORD *)(v10 + 64);
    }
  }
  return result;
}

uint64_t *ClipperLib::Clipper::InsertEdgeIntoAEL(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;

  v3 = *result;
  if (!*(uint64_t *)((char *)result + *(_QWORD *)(*result - 24) + 104))
  {
    *(_QWORD *)(a2 + 200) = 0;
    *(_QWORD *)(a2 + 208) = 0;
LABEL_43:
    v16 = (uint64_t *)((char *)result + *(_QWORD *)(v3 - 24) + 104);
    goto LABEL_44;
  }
  if (!a3)
  {
    a3 = *(uint64_t *)((char *)result + *(_QWORD *)(*result - 24) + 104);
    v18 = *(_QWORD *)(a2 + 48);
    v19 = *(_QWORD *)(a3 + 48);
    v20 = v18 < v19;
    if (v18 == v19)
    {
      v21 = *(_QWORD *)(a2 + 104);
      v22 = *(_QWORD *)(a3 + 104);
      if (v21 <= v22)
      {
        if (v21 == v22)
        {
          v25 = *(_QWORD *)(a2 + 96);
        }
        else
        {
          v26 = *(double *)(a2 + 144) * (double)(v22 - *(_QWORD *)(a2 + 8));
          v27 = 0.5;
          if (v26 < 0.0)
            v27 = -0.5;
          v25 = *(_QWORD *)a2 + (uint64_t)(v26 + v27);
        }
        if (*(_QWORD *)(a3 + 96) <= v25)
          goto LABEL_3;
LABEL_42:
        *(_QWORD *)(a2 + 208) = 0;
        *(_QWORD *)(a2 + 200) = *(uint64_t *)((char *)result + *(_QWORD *)(v3 - 24) + 104);
        *(_QWORD *)(*(uint64_t *)((char *)result + *(_QWORD *)(v3 - 24) + 104) + 208) = a2;
        goto LABEL_43;
      }
      v23 = *(double *)(a3 + 144) * (double)(v21 - *(_QWORD *)(a3 + 8));
      v24 = 0.5;
      if (v23 < 0.0)
        v24 = -0.5;
      v20 = *(_QWORD *)(a2 + 96) < *(_QWORD *)a3 + (uint64_t)(v23 + v24);
    }
    if (!v20)
      goto LABEL_3;
    goto LABEL_42;
  }
LABEL_3:
  v4 = *(_QWORD *)(a3 + 200);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 48);
    v6 = a3;
    while (1)
    {
      a3 = v6;
      v6 = v4;
      v7 = *(_QWORD *)(v4 + 48);
      v8 = v5 < v7;
      if (v5 == v7)
      {
        v9 = *(_QWORD *)(a2 + 104);
        v10 = *(_QWORD *)(v6 + 104);
        if (v9 <= v10)
        {
          if (v9 == v10)
          {
            v13 = *(_QWORD *)(a2 + 96);
          }
          else
          {
            v14 = *(double *)(a2 + 144) * (double)(v10 - *(_QWORD *)(a2 + 8));
            if (v14 >= 0.0)
              v15 = 0.5;
            else
              v15 = -0.5;
            v13 = *(_QWORD *)a2 + (uint64_t)(v14 + v15);
          }
          if (*(_QWORD *)(v6 + 96) > v13)
            goto LABEL_24;
          goto LABEL_21;
        }
        v11 = *(double *)(v6 + 144) * (double)(v9 - *(_QWORD *)(v6 + 8));
        if (v11 >= 0.0)
          v12 = 0.5;
        else
          v12 = -0.5;
        v8 = *(_QWORD *)(a2 + 96) < *(_QWORD *)v6 + (uint64_t)(v11 + v12);
      }
      if (v8)
        goto LABEL_24;
LABEL_21:
      v4 = *(_QWORD *)(v6 + 200);
      if (!v4)
      {
        a3 = v6;
        break;
      }
    }
  }
  v6 = 0;
LABEL_24:
  *(_QWORD *)(a2 + 200) = v6;
  v16 = (_QWORD *)(a3 + 200);
  v17 = *(_QWORD *)(a3 + 200);
  if (v17)
    *(_QWORD *)(v17 + 208) = a2;
  *(_QWORD *)(a2 + 208) = a3;
LABEL_44:
  *v16 = a2;
  return result;
}

_QWORD *ClipperLib::GetMaximaPair(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;

  result = (_QWORD *)a1[22];
  v4 = a1[12];
  v3 = a1[13];
  v5 = result[12] == v4 && result[13] == v3;
  if (!v5 || result[24])
  {
    result = (_QWORD *)a1[23];
    v6 = result[12] == v4 && result[13] == v3;
    if (!v6 || result[24])
      return 0;
  }
  return result;
}

uint64_t ClipperLib::Clipper::IsContributing(uint64_t a1, _DWORD *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  BOOL v8;
  uint64_t result;
  unsigned int v10;

  v2 = a2[38];
  v3 = 124;
  if (v2)
    v4 = 124;
  else
    v4 = 128;
  if (v2)
    v3 = 128;
  v5 = *(_DWORD *)(a1 + v3);
  v6 = *(_DWORD *)(a1 + v4);
  switch(v6)
  {
    case 2:
LABEL_10:
      v7 = a2[41];
      goto LABEL_13;
    case 1:
      v7 = a2[41];
      if (v7 < 0)
        v7 = -v7;
LABEL_13:
      if (v7 == 1)
        goto LABEL_14;
      return 0;
    case 0:
      if (a2[40])
        goto LABEL_14;
      goto LABEL_10;
  }
  if (a2[41] != -1)
    return 0;
LABEL_14:
  switch(*(_DWORD *)(a1 + 80))
  {
    case 0:
      v8 = v5 == 2;
      if (v5 >= 2)
        goto LABEL_21;
      return a2[42] != 0;
    case 1:
      goto LABEL_26;
    case 2:
      v8 = v5 == 2;
      if (v2)
      {
        if (v5 < 2)
          return a2[42] != 0;
LABEL_21:
        if (v8)
          return a2[42] > 0;
        v10 = a2[42];
      }
      else
      {
        if (v5 < 2)
          return a2[42] == 0;
LABEL_29:
        if (v8)
          return a2[42] < 1;
        v10 = ~a2[42];
      }
      result = v10 >> 31;
      break;
    case 3:
      if (a2[40])
        return 1;
LABEL_26:
      v8 = v5 == 2;
      if (v5 < 2)
        return a2[42] == 0;
      goto LABEL_29;
    default:
      return 1;
  }
  return result;
}

uint64_t ClipperLib::Clipper::SwapPositionsInSEL(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 216);
  if (!v3 && !*(_QWORD *)(a2 + 224))
    return result;
  v4 = *(_QWORD *)(a3 + 216);
  if (!v4)
  {
    v6 = (_QWORD *)(a3 + 224);
    v7 = *(_QWORD *)(a3 + 224);
    if (!v7)
      return result;
    if (v3 != a3)
    {
      v5 = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a2 + 216) = 0;
      *(_QWORD *)(a2 + 224) = v7;
LABEL_11:
      *(_QWORD *)(v7 + 216) = a2;
      goto LABEL_12;
    }
LABEL_17:
    v8 = *(_QWORD *)(a2 + 224);
    if (v8)
      *(_QWORD *)(v8 + 216) = a3;
    *(_QWORD *)(a3 + 216) = a2;
    *(_QWORD *)(a3 + 224) = v8;
    *(_QWORD *)(a2 + 216) = v4;
    *(_QWORD *)(a2 + 224) = a3;
    goto LABEL_25;
  }
  if (v3 == a3)
  {
    *(_QWORD *)(v4 + 224) = a2;
    goto LABEL_17;
  }
  if (v4 == a2)
  {
    if (v3)
      *(_QWORD *)(v3 + 224) = a3;
    v9 = *(_QWORD *)(a3 + 224);
    if (v9)
      *(_QWORD *)(v9 + 216) = a2;
    *(_QWORD *)(a2 + 216) = a3;
    *(_QWORD *)(a2 + 224) = v9;
    *(_QWORD *)(a3 + 216) = v3;
    *(_QWORD *)(a3 + 224) = a2;
    goto LABEL_25;
  }
  v5 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(v4 + 224) = a2;
  v6 = (_QWORD *)(a3 + 224);
  v7 = *(_QWORD *)(a3 + 224);
  *(_QWORD *)(a2 + 216) = v4;
  *(_QWORD *)(a2 + 224) = v7;
  if (v7)
    goto LABEL_11;
LABEL_12:
  *(_QWORD *)(a3 + 216) = v3;
  if (v3)
    *(_QWORD *)(v3 + 224) = a3;
  *v6 = v5;
  if (v5)
    *(_QWORD *)(v5 + 216) = a3;
LABEL_25:
  if (!*(_QWORD *)(a2 + 224) || (a2 = a3, !*(_QWORD *)(a3 + 224)))
    *(_QWORD *)(result + 112) = a2;
  return result;
}

uint64_t ClipperLib::Clipper::SetWindingCount(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  char i;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v2 = *(_QWORD *)(a2 + 208);
  v3 = *(_DWORD *)(a2 + 152);
  if (v2)
  {
    while (1)
    {
      if (*(_DWORD *)(v2 + 152) == v3)
      {
        v4 = *(_DWORD *)(v2 + 160);
        if (v4)
          break;
      }
      v2 = *(_QWORD *)(v2 + 208);
      if (!v2)
        goto LABEL_5;
    }
    v9 = *(_DWORD *)(a2 + 160);
    if (v9)
    {
      v10 = 124;
      if (!v3)
        v10 = 128;
      if (!*(_DWORD *)(result + v10))
        goto LABEL_45;
      v11 = *(_DWORD *)(v2 + 164);
      if (((v11 * v4) & 0x80000000) == 0)
      {
        if (((v9 * v4) & 0x80000000) == 0)
          v12 = *(_DWORD *)(a2 + 160);
        else
          v12 = 0;
        v9 = v11 + v12;
        goto LABEL_45;
      }
LABEL_28:
      if (v11 >= 0)
        v14 = v11;
      else
        v14 = -v11;
      if (v9 <= 1)
        v15 = 1;
      else
        v15 = *(_DWORD *)(a2 + 160);
      if (((v9 * v4) & 0x80000000) == 0)
        v16 = *(_DWORD *)(a2 + 160);
      else
        v16 = 0;
      v17 = v11 + v16;
      if (v14 >= 2)
        v9 = v17;
      else
        v9 = v15;
      goto LABEL_45;
    }
    if (*(_DWORD *)(result + 80) == 1)
    {
      v13 = 124;
      if (!v3)
        v13 = 128;
      if (!*(_DWORD *)(result + v13))
      {
        v18 = *(_QWORD *)(v2 + 208);
        for (i = 1; v18; v18 = *(_QWORD *)(v18 + 208))
        {
          if (*(_DWORD *)(v18 + 152) == v3)
            i ^= *(_DWORD *)(v18 + 160) != 0;
        }
        v9 = (i & 1) == 0;
        goto LABEL_45;
      }
      v11 = *(_DWORD *)(v2 + 164);
      if (v11 * v4 < 0)
        goto LABEL_28;
      v9 = ((v11 >> 31) | 1) + v11;
    }
    else
    {
      v9 = 1;
    }
LABEL_45:
    v7 = *(_DWORD *)(v2 + 168);
    *(_DWORD *)(a2 + 164) = v9;
    *(_DWORD *)(a2 + 168) = v7;
    v8 = (uint64_t *)(v2 + 200);
    goto LABEL_46;
  }
LABEL_5:
  v5 = *(_DWORD *)(a2 + 160);
  if (!v5)
  {
    v6 = 124;
    if (!v3)
      v6 = 128;
    if (*(_DWORD *)(result + v6) == 3)
      v5 = -1;
    else
      v5 = 1;
  }
  v7 = 0;
  *(_DWORD *)(a2 + 164) = v5;
  *(_DWORD *)(a2 + 168) = 0;
  v8 = (uint64_t *)(result + *(_QWORD *)(*(_QWORD *)result - 24) + 104);
LABEL_46:
  v20 = *v8;
  v21 = v3 == 0;
  v22 = 128;
  if (v21)
    v22 = 124;
  if (*(_DWORD *)(result + v22))
  {
    if (v20 != a2)
    {
      do
      {
        v7 += *(_DWORD *)(v20 + 160);
        v20 = *(_QWORD *)(v20 + 200);
      }
      while (v20 != a2);
      *(_DWORD *)(a2 + 168) = v7;
    }
  }
  else
  {
    while (v20 != a2)
    {
      if (*(_DWORD *)(v20 + 160))
      {
        v7 = v7 == 0;
        *(_DWORD *)(a2 + 168) = v7;
      }
      v20 = *(_QWORD *)(v20 + 200);
    }
  }
  return result;
}

_QWORD *ClipperLib::Clipper::IntersectEdges(_QWORD *result, _DWORD *a2, _DWORD *a3, __int128 *a4)
{
  _QWORD *v7;
  int v8;
  int v9;
  uint64_t (*v10)(_DWORD *, _DWORD *, _DWORD *, _DWORD *, __int128 *);
  int v11;
  int v12;
  int v13;
  int v14;
  int *v15;
  int *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  _DWORD *v21;
  int v22;
  int v23;
  int *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  _BOOL4 v29;
  int *v30;
  int v31;
  int *v32;
  int v33;
  int v34;
  int *v35;
  int *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;

  v7 = result;
  v8 = a2[43];
  v9 = a3[43];
  v10 = (uint64_t (*)(_DWORD *, _DWORD *, _DWORD *, _DWORD *, __int128 *))result[17];
  if (v10)
    result = (_QWORD *)v10(a2, a2 + 24, a3, a3 + 24, a4);
  v11 = a2[40];
  v12 = a3[40];
  if (!v11)
  {
    if (!v12)
      return result;
    if (a2[38] == a3[38])
    {
      if (*((_DWORD *)v7 + 20) != 1 || v9 < 0)
        return result;
    }
    else
    {
      v26 = a3[41];
      if (v26 < 0)
        v26 = -v26;
      if (v26 != 1 || *((_DWORD *)v7 + 20) == 1 && a3[42])
        return result;
    }
    result = (_QWORD *)ClipperLib::Clipper::AddOutPt(v7, (uint64_t)a2, a4);
    if ((v8 & 0x80000000) == 0)
      a2[43] = -1;
    return result;
  }
  v13 = a2[38];
  v14 = a3[38];
  if (!v12)
  {
    if (v13 == v14)
    {
      if (*((_DWORD *)v7 + 20) != 1 || v8 < 0)
        return result;
    }
    else
    {
      v27 = a2[41];
      if (v27 < 0)
        v27 = -v27;
      if (v27 != 1 || *((_DWORD *)v7 + 20) == 1 && a2[42])
        return result;
    }
    result = (_QWORD *)ClipperLib::Clipper::AddOutPt(v7, (uint64_t)a3, a4);
    if (v9 < 0)
      return result;
    v28 = -1;
    goto LABEL_98;
  }
  v15 = (int *)(v7 + 16);
  if (v13 == v14)
  {
    if (v13)
      v16 = (int *)v7 + 31;
    else
      v16 = (int *)(v7 + 16);
    v17 = *v16;
    v18 = a2[41];
    if (v17)
    {
      v19 = v18 + v12;
      if (!v19)
        v19 = -v18;
      a2[41] = v19;
      v20 = a3[41] - v11;
      if (v20)
        a3[41] = v20;
      else
        a3[41] = -v11;
      goto LABEL_59;
    }
    a2[41] = a3[41];
    a3[41] = v18;
LABEL_49:
    v29 = v13 == 0;
    if (v13)
      v30 = (int *)(v7 + 16);
    else
      v30 = (int *)v7 + 31;
    v31 = *v30;
    if (v14)
      v32 = (int *)v7 + 31;
    else
      v32 = (int *)(v7 + 16);
    if (!v14)
      v15 = (int *)v7 + 31;
    v33 = *v15;
    v34 = *v32;
    goto LABEL_70;
  }
  if (v14)
    v21 = (_DWORD *)v7 + 31;
  else
    v21 = v7 + 16;
  v22 = a2[42];
  v23 = v22 + v12;
  if (!*v21)
    v23 = v22 == 0;
  a2[42] = v23;
  if (v13)
    v24 = (int *)v7 + 31;
  else
    v24 = (int *)(v7 + 16);
  v17 = *v24;
  v25 = a3[42];
  if (!v17)
  {
    a3[42] = v25 == 0;
    goto LABEL_49;
  }
  a3[42] = v25 - v11;
LABEL_59:
  v29 = v13 == 0;
  if (v13)
    v35 = (int *)(v7 + 16);
  else
    v35 = (int *)v7 + 31;
  v31 = *v35;
  if (v14)
    v36 = (int *)v7 + 31;
  else
    v36 = (int *)(v7 + 16);
  if (!v14)
    v15 = (int *)v7 + 31;
  v33 = *v15;
  v34 = *v36;
  if (v17 == 3)
  {
    v37 = -(uint64_t)(int)a2[41];
    goto LABEL_74;
  }
  if (v17 == 2)
  {
    v37 = (int)a2[41];
    goto LABEL_74;
  }
LABEL_70:
  LODWORD(v37) = a2[41];
  if ((v37 & 0x80000000) == 0)
    v37 = v37;
  else
    v37 = -(int)v37;
LABEL_74:
  if (v34 == 3)
  {
    v38 = -(uint64_t)(int)a3[41];
    if (v8 < 0)
      goto LABEL_90;
LABEL_84:
    if ((v9 & 0x80000000) == 0)
    {
      if (v37 > 1 || v38 > 1 || v13 != v14 && *((_DWORD *)v7 + 20) != 3)
        return ClipperLib::Clipper::AddLocalMaxPoly(v7, (uint64_t)a2, (uint64_t)a3, a4);
      ClipperLib::Clipper::AddOutPt(v7, (uint64_t)a2, a4);
LABEL_96:
      v39 = v7;
      v40 = (uint64_t)a3;
LABEL_97:
      result = (_QWORD *)ClipperLib::Clipper::AddOutPt(v39, v40, a4);
      v41 = a2[39];
      a2[39] = a3[39];
      a3[39] = v41;
      v28 = a2[43];
      a2[43] = a3[43];
LABEL_98:
      a3[43] = v28;
      return result;
    }
    goto LABEL_90;
  }
  if (v34 != 2)
  {
    LODWORD(v38) = a3[41];
    if ((v38 & 0x80000000) == 0)
      v38 = v38;
    else
      v38 = -(int)v38;
    if (v8 < 0)
      goto LABEL_90;
    goto LABEL_84;
  }
  v38 = (int)a3[41];
  if ((v8 & 0x80000000) == 0)
    goto LABEL_84;
LABEL_90:
  if ((v8 & 0x80000000) == 0)
  {
    if (v38 > 1)
      return result;
    v39 = v7;
    v40 = (uint64_t)a2;
    goto LABEL_97;
  }
  if ((v9 & 0x80000000) == 0)
  {
    if (v37 > 1)
      return result;
    goto LABEL_96;
  }
  if (v37 <= 1 && v38 <= 1)
  {
    if (v31 == 3)
    {
      v42 = -(uint64_t)(int)a2[42];
    }
    else if (v31 == 2)
    {
      v42 = (int)a2[42];
    }
    else
    {
      LODWORD(v42) = a2[42];
      if ((int)v42 >= 0)
        v42 = v42;
      else
        v42 = -(int)v42;
    }
    if (v33 == 3)
    {
      v43 = -(uint64_t)(int)a3[42];
    }
    else if (v33 == 2)
    {
      v43 = (int)a3[42];
    }
    else
    {
      LODWORD(v43) = a3[42];
      if ((int)v43 >= 0)
        v43 = v43;
      else
        v43 = -(int)v43;
    }
    if (v13 == v14)
    {
      if (v37 == 1 && v38 == 1)
      {
        switch(*((_DWORD *)v7 + 20))
        {
          case 0:
            if (v42 >= 1 && v43 >= 1)
              return (_QWORD *)ClipperLib::Clipper::AddLocalMinPoly(v7, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
            return result;
          case 1:
            if (v42 > 0)
              return result;
            goto LABEL_133;
          case 2:
            if (v13 == 1 && v42 >= 1 && v43 > 0)
              return (_QWORD *)ClipperLib::Clipper::AddLocalMinPoly(v7, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
            if (v42 >= 1 || !v29)
              return result;
LABEL_133:
            if (v43 <= 0)
              return (_QWORD *)ClipperLib::Clipper::AddLocalMinPoly(v7, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
            return result;
          case 3:
            return (_QWORD *)ClipperLib::Clipper::AddLocalMinPoly(v7, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
          default:
            return result;
        }
      }
      v44 = a2[39];
      a2[39] = a3[39];
      a3[39] = v44;
    }
    else
    {
      return (_QWORD *)ClipperLib::Clipper::AddLocalMinPoly(v7, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
    }
  }
  return result;
}

double ClipperLib::GetMaximaPairEx(_QWORD *a1)
{
  double *MaximaPair;
  double result;

  MaximaPair = (double *)ClipperLib::GetMaximaPair(a1);
  if (MaximaPair && *((_DWORD *)MaximaPair + 43) != -2 && *((_QWORD *)MaximaPair + 25) == *((_QWORD *)MaximaPair + 26))
    return MaximaPair[18];
  return result;
}

uint64_t ClipperLib::ClipperBase::SwapPositionsInAEL(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 200);
  v3 = *(_QWORD *)(a2 + 208);
  if (v4 != v3)
  {
    v6 = *(_QWORD *)(a3 + 200);
    v5 = *(_QWORD *)(a3 + 208);
    if (v6 != v5)
    {
      if (v4 == a3)
      {
        if (v6)
        {
          *(_QWORD *)(v6 + 208) = a2;
          v3 = *(_QWORD *)(a2 + 208);
        }
        if (v3)
          *(_QWORD *)(v3 + 200) = a3;
        *(_QWORD *)(a3 + 200) = a2;
        *(_QWORD *)(a3 + 208) = v3;
        *(_QWORD *)(a2 + 200) = v6;
        *(_QWORD *)(a2 + 208) = a3;
        v3 = *(_QWORD *)(a3 + 208);
      }
      else
      {
        if (v6 == a2)
        {
          if (v4)
          {
            *(_QWORD *)(v4 + 208) = a3;
            v5 = *(_QWORD *)(a3 + 208);
          }
          if (v5)
            *(_QWORD *)(v5 + 200) = a2;
          *(_QWORD *)(a2 + 200) = a3;
          *(_QWORD *)(a2 + 208) = v5;
          v3 = a2;
          *(_QWORD *)(a3 + 200) = v4;
          *(_QWORD *)(a3 + 208) = a2;
        }
        else
        {
          *(_QWORD *)(a2 + 200) = v6;
          if (v6)
          {
            *(_QWORD *)(v6 + 208) = a2;
            v5 = *(_QWORD *)(a3 + 208);
          }
          *(_QWORD *)(a2 + 208) = v5;
          if (v5)
            *(_QWORD *)(v5 + 200) = a2;
          *(_QWORD *)(a3 + 200) = v4;
          if (v4)
            *(_QWORD *)(v4 + 208) = a3;
          *(_QWORD *)(a3 + 208) = v3;
          if (v3)
            *(_QWORD *)(v3 + 200) = a3;
        }
        if (!*(_QWORD *)(a2 + 208))
          goto LABEL_26;
      }
      a2 = a3;
      if (v3)
        return result;
LABEL_26:
      *(_QWORD *)(result + 104) = a2;
    }
  }
  return result;
}

void interpolate_intersection_metadata(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  unsigned int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t *v18;
  float v19;
  float v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t *v26;
  float v27;
  float v28;
  uint64_t v29;

  v9 = 0;
  v10 = a1 + 2;
  v11 = a1 + 6;
  v12 = a5[1];
  v29 = *a5;
  v13 = a5 + 2;
  do
  {
    v14 = *v10;
    if (*v10 != -1)
    {
      v15 = 0;
      v16 = *((double *)v10 + 1);
      while (1)
      {
        if (v14 == a2[v15 + 2])
        {
          v17 = *(double *)&a2[v15 + 3];
          if (vabdd_f64(v16, v17) <= 1.0 || v17 == 0.0 || v16 == 0.0)
            break;
        }
        v15 += 2;
        if (v15 == 4)
          goto LABEL_12;
      }
      if (v9 >= 2)
        __assert_rtn("interpolate_intersection_metadata", "CGPathClipping.cc", 66, "intersectionCount < 2");
      v18 = &v13[2 * v9];
      *v18 = v14;
      v19 = v16;
      v20 = v17;
      *((double *)v18 + 1) = interpolate_values_for_point(*a1, a1[1], *a2, a2[1], v29, v12, v19, v20);
      ++v9;
    }
LABEL_12:
    v10 += 2;
  }
  while (v10 != v11);
  v21 = a3 + 2;
  do
  {
    v22 = *v21;
    if (*v21 != -1)
    {
      v23 = 0;
      v24 = *((double *)v21 + 1);
      while (1)
      {
        if (v22 == a4[v23 + 2])
        {
          v25 = *(double *)&a4[v23 + 3];
          if (vabdd_f64(v24, v25) <= 1.0 || v25 == 0.0 || v24 == 0.0)
            break;
        }
        v23 += 2;
        if (v23 == 4)
          goto LABEL_24;
      }
      if (v9 >= 2)
        __assert_rtn("interpolate_intersection_metadata", "CGPathClipping.cc", 81, "intersectionCount < 2");
      v26 = &v13[2 * v9];
      *v26 = v22;
      v27 = v24;
      v28 = v25;
      *((double *)v26 + 1) = interpolate_values_for_point(*a3, a3[1], *a4, a4[1], v29, v12, v27, v28);
      ++v9;
    }
LABEL_24:
    v21 += 2;
  }
  while (v21 != a3 + 6);
}

float interpolate_values_for_point(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, float a8)
{
  float v8;
  float v9;
  float v10;
  double v11;

  v8 = vabds_f32(a7, a8);
  v9 = (float)((unint64_t)a7 + 1);
  if (a8 != 0.0)
    v9 = a8;
  v10 = (float)((unint64_t)a8 + 1);
  if (a7 == 0.0)
    v9 = a8;
  else
    v10 = a7;
  if (v8 > 1.0)
  {
    a8 = v9;
    a7 = v10;
  }
  v11 = (double)((a5 - a1) * (a3 - a1) + (a6 - a2) * (a4 - a2))
      / (double)((a3 - a1) * (a3 - a1) + (a4 - a2) * (a4 - a2));
  return v11 * a8 + a7 * (1.0 - v11);
}

uint64_t ClipperLib::Clipper::AddLocalMinPoly(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  BOOL v26;
  _OWORD v27[3];

  v6 = a2;
  v8 = *(double *)(a3 + 144);
  if (v8 != -1.0e40 && *(double *)(a2 + 144) <= v8)
  {
    v9 = ClipperLib::Clipper::AddOutPt(a1, a3, (__int128 *)a4);
    *(_DWORD *)(v6 + 172) = *(_DWORD *)(a3 + 172);
    *(_DWORD *)(v6 + 156) = 2;
    *(_DWORD *)(a3 + 156) = 1;
    v10 = *(_QWORD *)(a3 + 208);
    v11 = v6;
    v26 = v10 == v6;
    v6 = a3;
    if (!v26)
      goto LABEL_5;
    goto LABEL_4;
  }
  v9 = ClipperLib::Clipper::AddOutPt(a1, a2, (__int128 *)a4);
  *(_DWORD *)(a3 + 172) = *(_DWORD *)(v6 + 172);
  *(_DWORD *)(v6 + 156) = 1;
  *(_DWORD *)(a3 + 156) = 2;
  v10 = *(_QWORD *)(v6 + 208);
  v11 = a3;
  if (v10 == a3)
LABEL_4:
    v10 = *(_QWORD *)(v11 + 208);
LABEL_5:
  if (v10 && (*(_DWORD *)(v10 + 172) & 0x80000000) == 0)
  {
    v12 = *(_QWORD *)(a4 + 8);
    v13 = *(_QWORD *)(v10 + 104);
    if (v13 == v12)
    {
      v14 = *(_QWORD *)(v10 + 96);
    }
    else
    {
      v15 = *(double *)(v10 + 144) * (double)(v12 - *(_QWORD *)(v10 + 8));
      v16 = 0.5;
      if (v15 < 0.0)
        v16 = -0.5;
      v14 = *(_QWORD *)v10 + (uint64_t)(v15 + v16);
    }
    v17 = *(_QWORD *)(v6 + 104);
    if (v17 == v12)
    {
      v18 = *(_QWORD *)(v6 + 96);
    }
    else
    {
      v19 = *(double *)(v6 + 144) * (double)(v12 - *(_QWORD *)(v6 + 8));
      v20 = 0.5;
      if (v19 < 0.0)
        v20 = -0.5;
      v18 = *(_QWORD *)v6 + (uint64_t)(v19 + v20);
    }
    if (v14 == v18)
    {
      if (*(_DWORD *)(v6 + 160))
      {
        if (*(_DWORD *)(v10 + 160))
        {
          v22 = *(_QWORD *)(v6 + 96);
          v21 = (_OWORD *)(v6 + 96);
          if (ClipperLib::SlopesEqual(v14, v12, *(_QWORD *)(v10 + 96), v13, v14, v12, v22, v17, *((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 40)))
          {
            v23 = ClipperLib::Clipper::AddOutPt(a1, v10, (__int128 *)a4);
            v24 = v21[1];
            v27[0] = *v21;
            v27[1] = v24;
            v27[2] = v21[2];
            ClipperLib::Clipper::AddJoin(a1, v9, v23, v27);
          }
        }
      }
    }
  }
  return v9;
}

double ClipperLib::Area(_QWORD *a1)
{
  double result;
  _QWORD *v2;

  result = 0.0;
  if (a1)
  {
    v2 = a1;
    do
    {
      result = result
             + (double)(uint64_t)(v2[1] + *(_QWORD *)(v2[8] + 8))
             * (double)(uint64_t)(*(_QWORD *)(v2[8] + 16) - v2[2]);
      v2 = (_QWORD *)v2[7];
    }
    while (v2 != a1);
    return result * 0.5;
  }
  return result;
}

_DWORD *ClipperLib::ClipperBase::CreateOutRec(ClipperLib::ClipperBase *this)
{
  uint64_t v2;
  _DWORD *v3;
  unint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v2 = operator new();
  v3 = (_DWORD *)v2;
  *(_WORD *)(v2 + 4) = 0;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  v5 = (uint64_t *)*((_QWORD *)this + 11);
  v4 = *((_QWORD *)this + 12);
  if ((unint64_t)v5 >= v4)
  {
    v7 = (_QWORD *)*((_QWORD *)this + 10);
    v8 = v5 - v7;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        std::__throw_bad_array_new_length[abi:se180100]();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = v3;
    v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        v14 = *--v5;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      v5 = (uint64_t *)*((_QWORD *)this + 10);
    }
    *((_QWORD *)this + 10) = v13;
    *((_QWORD *)this + 11) = v6;
    *((_QWORD *)this + 12) = &v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  *((_QWORD *)this + 11) = v6;
  *v3 = (((unint64_t)v6 - *((_QWORD *)this + 10)) >> 3) - 1;
  return v3;
}

uint64_t CGFontDBPurgeFont(uint64_t result, const void *a2)
{
  uint64_t v3;
  pthread_mutex_t *v4;

  if (result)
  {
    v3 = result;
    v4 = (pthread_mutex_t *)(result + 32);
    pthread_mutex_lock((pthread_mutex_t *)(result + 32));
    purge_font_locked(v3, a2);
    return pthread_mutex_unlock(v4);
  }
  return result;
}

void purge_font_locked(uint64_t a1, const void *a2)
{
  uint64_t Count;
  __n128 v5;
  uint64_t v6;
  unint64_t v7;
  const void **v8;
  const void **v9;
  CFIndex v10;
  CFIndex v11;
  uint64_t v12;
  uint64_t v13;
  CFMutableDictionaryRef Mutable;
  const void *v15;
  const void **v16;
  CFIndex v17;
  __CFDictionary *v18;
  const void *v19;
  const void *Value;
  uint64_t *v21;
  uint64_t v22;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 8));
  MEMORY[0x1E0C80A78](Count, v5);
  v8 = (const void **)((char *)&v24[-2] - v6 - 7);
  if (v7 <= 0x1FFFFFFFFFFFFFFELL)
    v9 = (const void **)((char *)&v24[-2] - v6 - 7);
  else
    v9 = 0;
  if (v7 - 0x1FFFFFFFFFFFFFFFLL >= 0xE00000000000007ALL)
    v9 = (const void **)malloc_type_malloc(16 * Count, 0x281D7EBEuLL);
  if (!v9)
    return;
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 8), v9, &v9[Count]);
  if (!a2)
  {
    Mutable = CFDictionaryCreateMutable(0, Count, 0, 0);
    if (Count < 1)
    {
LABEL_27:
      CFRelease(Mutable);
      goto LABEL_33;
    }
    v15 = 0;
    v16 = &v9[Count];
    while (1)
    {
      v17 = CFGetRetainCount(v16[(_QWORD)v15]);
      if (v17 == 2)
        break;
      if (v17 == 1)
      {
        v18 = *(__CFDictionary **)(a1 + 8);
        v19 = v9[(_QWORD)v15];
LABEL_23:
        CFDictionaryRemoveValue(v18, v19);
      }
LABEL_24:
      v15 = (char *)v15 + 1;
      if ((const void *)Count == v15)
        goto LABEL_27;
    }
    if (!CFDictionaryContainsKey(Mutable, v16[(_QWORD)v15]))
    {
      CFDictionarySetValue(Mutable, v16[(_QWORD)v15], v15);
      goto LABEL_24;
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 8), v9[(_QWORD)v15]);
    Value = CFDictionaryGetValue(Mutable, v16[(_QWORD)v15]);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 8), v9[(_QWORD)Value]);
    v19 = v16[(_QWORD)v15];
    v18 = Mutable;
    goto LABEL_23;
  }
  v10 = CFGetRetainCount(a2);
  if (v10 > 2 || Count < 1)
    goto LABEL_33;
  v11 = v10;
  v12 = 0;
  v13 = 0;
  while (*(&v9[Count] + v12) != a2)
  {
LABEL_14:
    if (Count == ++v12)
      goto LABEL_29;
  }
  v24[v13] = v12;
  if (v13 != 1)
  {
    v13 = 1;
    goto LABEL_14;
  }
  v13 = 2;
LABEL_29:
  if (v10 == v13 && v13 >= 1)
  {
    v21 = v24;
    do
    {
      v22 = *v21++;
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 8), v9[v22]);
      --v11;
    }
    while (v11);
  }
LABEL_33:
  if (v9 != v8)
    free(v9);
}

void CGContextSetLineDash(CGContextRef c, CGFloat phase, const CGFloat *lengths, size_t count)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  double v11;
  double v12;
  CGContextRef v13;
  double *v14;
  unsigned int v15;
  unsigned int v16;

  if (!c)
  {
    v13 = 0;
LABEL_11:
    handle_invalid_context((char)"CGContextSetLineDash", (uint64_t)v13, count, v4, v5, v6, v7, v8);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v13 = c;
    goto LABEL_11;
  }
  if (count)
  {
    v10 = 0;
    v11 = 0.0;
    do
    {
      v12 = lengths[v10];
      if (v12 < 0.0)
      {
        CGPostError((uint64_t)"%s: invalid dash array: negative lengths are not allowed.", (uint64_t)lengths, count, v4, v5, v6, v7, v8, (char)"CGContextSetLineDash");
        return;
      }
      v11 = v11 + v12;
      ++v10;
    }
    while (count != v10);
    if (v11 == 0.0)
    {
      CGPostError((uint64_t)"%s: invalid dash array: at least one element must be non-zero.", (uint64_t)lengths, count, v4, v5, v6, v7, v8, (char)"CGContextSetLineDash");
    }
    else
    {
      v14 = CGDashCreate(lengths, count, phase);
      CGGStateSetLineDash(*((_QWORD *)c + 12), (unsigned int *)v14);
      if (v14)
      {
        do
        {
          v15 = __ldxr((unsigned int *)v14);
          v16 = v15 - 1;
        }
        while (__stxr(v16, (unsigned int *)v14));
        if (!v16)
          free(v14);
      }
    }
  }
  else
  {
    CGGStateSetLineDash(*((_QWORD *)c + 12), 0);
  }
}

void load_set_data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  const char **i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = 0;
  for (i = (const char **)&links; strcmp("__CGBitmapContextDelegateData", *i); i += 2)
  {
    if (++v9 == 7)
    {
      CGPostError((uint64_t)"Failed to load bitmap context.", v11, v12, v13, v14, v15, v16, v17, a9);
      return;
    }
  }
  set_data = (&links)[2 * v9 + 1];
}

CGImageRef CGImageCreateWithPNGDataProvider(CGDataProviderRef source, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  unsigned __int8 v4;
  _BOOL4 v5;
  uint64_t v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  int v12;
  CGColorSpaceRef ColorSpace;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v4 = intent;
  v5 = shouldInterpolate;
  if (CGImageCreateWithPNGDataProvider_predicate != -1)
    dispatch_once(&CGImageCreateWithPNGDataProvider_predicate, &__block_literal_global_12313);
  v8 = CGImageCreateWithPNGDataProvider_f(source, 0);
  if (!v8)
    return 0;
  v9 = (const void *)v8;
  if (CGImageCreateWithPNGDataProvider_predicate_3 != -1)
    dispatch_once(&CGImageCreateWithPNGDataProvider_predicate_3, &__block_literal_global_5_12314);
  v10 = (const void *)CGImageCreateWithPNGDataProvider_f_2(v9);
  if (!v10 || !CFEqual(v10, CFSTR("public.png")))
  {
    CFRelease(v9);
    return 0;
  }
  if (CGImageCreateWithPNGDataProvider_predicate_9 != -1)
    dispatch_once(&CGImageCreateWithPNGDataProvider_predicate_9, &__block_literal_global_11_12316);
  v11 = CGImageCreateWithPNGDataProvider_f_8(v9, 0, 0);
  CFRelease(v9);
  if (v11)
  {
    v12 = v5 ? 0x1000000 : 0;
    *(_DWORD *)(v11 + 36) = v12 & 0xFFFF00FF | (v4 << 8) | *(_DWORD *)(v11 + 36) & 0xFEFF00FF;
    if (decode)
    {
      ColorSpace = CGImageGetColorSpace((CGImageRef)v11);
      if (ColorSpace)
        v14 = *(_QWORD *)(*((_QWORD *)ColorSpace + 3) + 40);
      else
        v14 = 0;
      v16 = v14 + (((unint64_t)*(unsigned int *)(v11 + 36) >> 26) & 1);
      v17 = 2 * v16;
      v18 = malloc_type_malloc(16 * v16, 0x705560E0uLL);
      for (*(_QWORD *)(v11 + 160) = v18; v17; --v17)
      {
        v19 = *(_QWORD *)decode++;
        *v18++ = v19;
      }
    }
  }
  return (CGImageRef)v11;
}

double __text_state_create_root_block_invoke()
{
  char *v0;
  char v1;
  __int16 v2;
  double result;

  v0 = (char *)malloc_type_malloc(0x60uLL, 0x2062DE7BuLL);
  v1 = *(_WORD *)v0;
  *((_DWORD *)v0 + 1) = 1;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_WORD *)v0 = v1 & 0xFC | 2;
  if (once != -1)
    dispatch_once_f(&once, 0, (dispatch_function_t)get_font_rendering_defaults);
  *((_DWORD *)v0 + 12) = default_antialiasing_style;
  *((_DWORD *)v0 + 13) = default_smoothing_style;
  *((_DWORD *)v0 + 14) = 0;
  v2 = *(_WORD *)v0 & 0xFF02 | 0x3D;
  *((_QWORD *)v0 + 5) = 0x4000000000000000;
  result = 0.0;
  *((_OWORD *)v0 + 4) = 0u;
  *((_OWORD *)v0 + 5) = 0u;
  text_state_create_root_root = (uint64_t)v0;
  *(_WORD *)v0 = v2;
  return result;
}

uint64_t GRAYA8_mark_inner(uint64_t a1, __n128 a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  int16x4_t v7;
  double v8;
  uint8x8_t v9;
  int16x8_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint16x4_t *v20;
  int v21;
  int v22;
  _BYTE *v23;
  int8x16_t v24;
  uint64_t v25;
  int8x8_t v26;
  unsigned __int8 v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  size_t v45;
  _BYTE *v46;
  _BYTE *v47;
  BOOL v48;
  unint64_t v49;
  uint8x8_t *v50;
  double v51;
  uint8x8_t v52;
  int16x8_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  void *v60;
  int v61;
  unint64_t v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  uint64_t v69;
  char *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  unsigned __int8 *v77;
  uint64_t v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  uint64_t v81;
  unsigned __int8 *v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  unsigned int v87;
  int v88;
  unsigned __int8 *v89;
  uint64_t v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  uint64_t v93;
  unsigned __int8 *v94;
  uint64_t v95;
  int v96;
  int v97;
  unsigned __int8 v98;
  unsigned int v99;
  int v100;
  int v101;
  unsigned __int8 *v102;
  uint64_t v103;
  unsigned __int8 *v104;
  unsigned __int8 *v105;
  uint64_t v106;
  unsigned __int8 *v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  unsigned int v112;
  unsigned __int8 *v113;
  uint64_t v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  uint64_t v117;
  unsigned __int8 *v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  unsigned __int8 *v126;
  uint64_t v127;
  unsigned __int8 *v128;
  unsigned __int8 *v129;
  uint64_t v130;
  unsigned __int8 *v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  unsigned __int8 *v136;
  uint64_t v137;
  unsigned __int8 *v138;
  unsigned __int8 *v139;
  uint64_t v140;
  unsigned __int8 *v141;
  uint64_t v142;
  int v143;
  int v144;
  unsigned __int8 v145;
  int v146;
  unsigned __int8 *v147;
  uint64_t v148;
  unsigned __int8 *v149;
  unsigned __int8 *v150;
  uint64_t v151;
  unsigned __int8 *v152;
  uint64_t v153;
  int v154;
  int v155;
  int v156;
  unsigned int v157;
  unsigned __int8 *v158;
  uint64_t v159;
  unsigned __int8 *v160;
  unsigned __int8 *v161;
  uint64_t v162;
  unsigned __int8 *v163;
  uint64_t v164;
  int v165;
  int v166;
  int v167;
  int v168;
  unsigned int v169;
  unsigned __int8 *v170;
  uint64_t v171;
  unsigned __int8 *v172;
  unsigned __int8 *v173;
  uint64_t v174;
  unsigned __int8 *v175;
  uint64_t v176;
  int v177;
  int v178;
  int v179;
  int v180;
  unsigned int v181;
  int v182;
  unsigned __int8 *v183;
  uint64_t v184;
  unsigned __int8 *v185;
  unsigned __int8 *v186;
  uint64_t v187;
  unsigned __int8 *v188;
  uint64_t v189;
  int v190;
  int v191;
  unsigned int v192;
  int v193;
  unsigned __int8 *v194;
  uint64_t v195;
  unsigned __int8 *v196;
  unsigned __int8 *v197;
  uint64_t v198;
  unsigned __int8 *v199;
  uint64_t v200;
  int v201;
  int v202;
  int v203;
  int v204;
  unsigned __int8 *v205;
  uint64_t v206;
  unsigned __int8 *v207;
  unsigned __int8 *v208;
  uint64_t v209;
  unsigned __int8 *v210;
  uint64_t v211;
  int v212;
  int v213;
  unsigned int v214;
  int v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  unsigned __int8 *v219;
  uint64_t v220;
  unsigned __int8 *v221;
  unsigned __int8 *v222;
  uint64_t v223;
  unsigned __int8 *v224;
  uint64_t v225;
  int v226;
  int v227;
  int v228;
  int v229;
  unsigned __int8 *v230;
  uint64_t v231;
  unsigned __int8 *v232;
  unsigned __int8 *v233;
  uint64_t v234;
  unsigned __int8 *v235;
  uint64_t v236;
  int v237;
  int v238;
  int v239;
  int v240;
  unsigned __int8 *v241;
  uint64_t v242;
  unsigned __int8 *v243;
  unsigned __int8 *v244;
  uint64_t v245;
  unsigned __int8 *v246;
  uint64_t v247;
  int v248;
  int v249;
  int v250;
  int v251;
  unsigned __int8 *v252;
  uint64_t v253;
  unsigned __int8 *v254;
  unsigned __int8 *v255;
  uint64_t v256;
  unsigned __int8 *v257;
  uint64_t v258;
  int v259;
  int v260;
  int v261;
  int v262;
  unsigned __int8 *v263;
  uint64_t v264;
  unsigned __int8 *v265;
  unsigned __int8 *v266;
  uint64_t v267;
  unsigned __int8 *v268;
  uint64_t v269;
  int v270;
  int v271;
  int v272;
  int v273;
  unsigned __int8 *v274;
  uint64_t v275;
  unsigned __int8 *v276;
  unsigned __int8 *v277;
  uint64_t v278;
  unsigned __int8 *v279;
  uint64_t v280;
  int v281;
  int v282;
  int v283;
  int v284;
  unsigned __int8 *v285;
  uint64_t v286;
  unsigned __int8 *v287;
  unsigned __int8 *v288;
  uint64_t v289;
  unsigned __int8 *v290;
  uint64_t v291;
  int v292;
  int v293;
  int v294;
  int v295;
  unsigned __int8 *v296;
  uint64_t v297;
  unsigned __int8 *v298;
  unsigned __int8 *v299;
  uint64_t v300;
  unsigned __int8 *v301;
  uint64_t v302;
  int v303;
  int v304;
  int v305;
  int v306;
  unsigned __int8 *v307;
  uint64_t v308;
  unsigned __int8 *v309;
  unsigned __int8 *v310;
  uint64_t v311;
  unsigned __int8 *v312;
  uint64_t v313;
  int v314;
  int v315;
  unsigned int v316;
  int v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  unsigned __int8 *v321;
  uint64_t v322;
  unsigned __int8 *v323;
  unsigned __int8 *v324;
  uint64_t v325;
  unsigned __int8 *v326;
  uint64_t v327;
  int v328;
  int v329;
  int v330;
  int v331;
  unsigned __int8 *v332;
  uint64_t v333;
  unsigned __int8 *v334;
  unsigned __int8 *v335;
  uint64_t v336;
  unsigned __int8 *v337;
  uint64_t v338;
  int v339;
  int v340;
  int v341;
  int v342;
  unsigned __int8 *v343;
  uint64_t v344;
  unsigned __int8 *v345;
  unsigned __int8 *v346;
  uint64_t v347;
  unsigned __int8 *v348;
  uint64_t v349;
  int v350;
  int v351;
  int v352;
  int v353;
  unsigned __int8 *v354;
  uint64_t v355;
  unsigned __int8 *v356;
  unsigned __int8 *v357;
  uint64_t v358;
  unsigned __int8 *v359;
  uint64_t v360;
  int v361;
  int v362;
  int v363;
  int v364;
  unsigned __int8 *v365;
  uint64_t v366;
  unsigned __int8 *v367;
  unsigned __int8 *v368;
  uint64_t v369;
  unsigned __int8 *v370;
  uint64_t v371;
  uint8x8_t v372;
  int v373;
  uint64_t v374;
  int v375;
  unsigned __int8 *v376;
  uint64_t v377;
  unsigned __int8 *v378;
  unsigned __int8 *v379;
  uint64_t v380;
  unsigned __int8 *v381;
  uint64_t v382;
  int v383;
  unsigned __int8 *v384;
  uint64_t v385;
  unsigned __int8 *v386;
  unsigned __int8 *v387;
  uint64_t v388;
  unsigned __int8 *v389;
  uint64_t v390;
  int v391;
  int v392;
  unsigned __int8 *v393;
  uint64_t v394;
  unsigned __int8 *v395;
  unsigned __int8 *v396;
  uint64_t v397;
  unsigned __int8 *v398;
  uint64_t v399;
  unint64_t v400;
  int v401;
  uint64_t v402;
  char *v403;
  unint64_t v404;
  uint64_t v405;
  unsigned int v406;
  int v407;
  uint64_t v408;
  int v409;
  uint16x8_t v410;
  unsigned int v411;
  uint16x8_t v412;
  int16x8_t v413;
  int v414;
  unsigned int v415;
  int32x2_t v416;
  int v417;
  int v418;
  unsigned int v419;
  uint32x2_t v420;
  uint32x2_t v421;
  int32x2_t v422;
  int v423;
  int v424;
  __int8 v425;
  uint32x2_t v426;
  uint32x2_t v427;
  int v428;
  int v429;
  int v430;
  int v431;
  int v432;
  int v433;
  int v434;
  int v435;
  int v436;
  int v437;
  int v438;
  int v439;
  int v440;
  unsigned int v441;
  int v442;
  int v443;
  int v444;
  int v445;
  int v446;
  int v447;
  unsigned int v448;
  int v449;
  int v450;
  unsigned int v451;
  int v452;
  int v453;
  int v454;
  int v455;
  int v456;
  int v457;
  int v458;
  unsigned int v459;
  int v460;
  int v461;
  int v462;
  int v463;
  int v464;
  int v465;
  int v466;
  int v467;
  int v468;
  int v469;
  int v470;
  int v471;
  int v472;
  int v473;
  int v474;
  int v475;
  int v476;
  int v477;
  int v478;
  int v479;
  int v480;
  int v481;
  int v482;
  int v483;
  int v484;
  int v485;
  int v486;
  unsigned int v487;
  int v488;
  int v489;
  int v490;
  int v491;
  int v492;
  int v493;
  int v494;
  int v495;
  int v496;
  int v497;
  int v498;
  int v499;
  unint64_t v500;
  int v501;
  int v502;
  uint64_t v503;
  unint64_t v504;
  unsigned __int8 *v505;
  int v506;
  int v507;
  int v508;
  uint64_t v509;
  unint64_t v510;
  int v511;
  int v512;
  int v513;
  int v514;
  int v515;
  int v516;
  int v517;
  int v518;
  int v519;
  int v520;
  int v521;
  int v522;
  int v523;
  int v524;
  unint64_t v525;
  unint64_t v526;
  unsigned __int8 v527;
  unint64_t v528;
  uint64_t v529;
  unint64_t v530;
  unint64_t v531;
  unint64_t v532;
  uint64_t v533;
  unint64_t v534;
  int8x8_t v535;
  unint64_t v536;
  unint64_t v537;
  unint64_t v538;
  unint64_t v539;
  unint64_t v540;
  unint64_t v541;
  unint64_t v542;
  unint64_t v543;
  unint64_t v544;
  unint64_t v545;
  unint64_t v546;
  unint64_t v547;
  unint64_t v548;
  unint64_t v549;
  unint64_t v550;
  unint64_t v551;
  unint64_t v552;
  unint64_t v553;
  unint64_t v554;
  unint64_t v555;
  unint64_t v556;
  unint64_t v557;
  unint64_t v558;
  unint64_t v559;
  unint64_t v560;
  unsigned __int8 *v561;
  uint64_t v562;
  int v563[4];
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  _DWORD v573[1024];
  uint64_t v574;

  v4 = MEMORY[0x1E0C80A78](a1, a2);
  v574 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(v5 + 96);
  v12 = *(_QWORD *)(v5 + 48);
  v13 = *(_DWORD *)(v4 + 16 * *(_DWORD *)v5 + 8 * (v11 == 0) + 4 * (v12 == 0));
  if (v13 > 27)
    return 0xFFFFFFFFLL;
  v15 = v5;
  v16 = *(unsigned int *)(v5 + 4);
  v17 = v16 - 1;
  if ((int)v16 < 1)
    return 0;
  v18 = *(_DWORD *)(v5 + 8);
  v19 = (v18 - 1);
  if (v18 < 1)
    return 0;
  v20 = *(uint16x4_t **)(v5 + 136);
  v506 = *(_DWORD *)(v4 + 16 * *(_DWORD *)v5 + 8 * (v11 == 0) + 4 * (v12 == 0));
  if ((*(_DWORD *)v5 & 0xFF0000) == 0x50000 || !v20)
  {
    v22 = *(_DWORD *)v5 & 0xFF00;
    v500 = v5;
    if (v22 == 1024)
    {
      v573[0] = *(_DWORD *)(v5 + 4);
      v563[0] = v18;
      v23 = *(_BYTE **)(v5 + 88);
      LOBYTE(v8) = *v23;
      BYTE4(v8) = v23[1];
      *(int8x8_t *)v24.i8 = vdup_lane_s8(*(int8x8_t *)&v8, 0);
      v24.u64[1] = (unint64_t)vdup_lane_s8(*(int8x8_t *)&v8, 4);
      v25 = *(_QWORD *)(v5 + 40);
      v26 = vqtbl1_s8(v24, (int8x8_t)0xF060D040B020900);
      v535 = *(int8x8_t *)&v8;
      v27 = BYTE4(v8);
      v527 = ~BYTE4(v8);
      v525 = *(int *)(v5 + 28);
      v28 = v525 >> 1;
      v29 = *(int *)(v5 + 12) + (v525 >> 1) * *(int *)(v5 + 16);
      v30 = v25 + 2 * v29;
      v529 = v30;
      if (v20)
      {
        shape_enum_clip_alloc(v4, v5, (int *)v20, 1, 1, 1, *(_DWORD *)(v5 + 104), *(_DWORD *)(v5 + 108), v16, v18);
        if (!v31)
          return 1;
        v32 = v31;
LABEL_953:
        if (!shape_enum_clip_next(v32, (int *)&v562 + 1, &v562, v573, v563))
        {
          v60 = (void *)v32;
          goto LABEL_956;
        }
        v50 = (uint8x8_t *)(v30 + 2 * v28 * (int)v562 + 2 * SHIDWORD(v562));
        LODWORD(v16) = v573[0];
      }
      else
      {
        v32 = 0;
        v50 = (uint8x8_t *)(v25 + 2 * v29);
      }
      v537 = v28 - (int)v16;
      v524 = v16;
      switch(v13)
      {
        case 0:
          v406 = v563[0];
          v407 = 2 * v16;
          goto LABEL_959;
        case 1:
          v408 = *(_QWORD *)(v500 + 88);
          if (v408)
          {
            CGSFillDRAM64(v50, v525 & 0xFFFFFFFE, 2 * v16, v563[0], v408, 2, 2, 1, 0, 0);
            if (v32)
              goto LABEL_952;
            return 1;
          }
          v407 = 2 * v16;
          v406 = v563[0];
LABEL_959:
          CGBlt_fillBytes(v407, v406, 0, (char *)v50, v525 & 0xFFFFFFFE);
          if (!v32)
            return 1;
LABEL_952:
          v562 = 0;
          goto LABEL_953;
        case 2:
          v409 = v563[0];
          v410 = (uint16x8_t)vdupq_n_s16(v527);
          do
          {
            if ((int)v16 < 4)
            {
              v414 = v16;
            }
            else
            {
              v411 = (v16 >> 2) + 1;
              do
              {
                v412 = vmovl_u8(*v50);
                v413 = (int16x8_t)vmull_u16(*(uint16x4_t *)v410.i8, *(uint16x4_t *)v412.i8);
                *(uint16x4_t *)v413.i8 = vshr_n_u16((uint16x4_t)vadd_s16(vmovn_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v413, (uint32x4_t)v413, 8uLL)), (int16x4_t)0x1000100010001), 8uLL);
                v413.u64[1] = (unint64_t)vshr_n_u16((uint16x4_t)vadd_s16(vmovn_s32((int32x4_t)vmlal_high_u16(vshrq_n_u32(vmull_high_u16(v410, v412), 8uLL), v410, v412)), (int16x4_t)0x1000100010001), 8uLL);
                *v50++ = (uint8x8_t)vadd_s8(v26, vmovn_s16(v413));
                --v411;
              }
              while (v411 > 1);
              v414 = v16 & 3;
            }
            if (v414 >= 1)
            {
              v415 = v414 + 1;
              do
              {
                v50->i8[0] = v535.i8[0]
                           + ((unsigned __int16)(v50->u8[0] * v527 + ((v50->u8[0] * v527) >> 8) + 1) >> 8);
                v50->i8[1] = v27
                           + ((unsigned __int16)(v50->u8[1] * v527 + ((v50->u8[1] * v527) >> 8) + 1) >> 8);
                v50 = (uint8x8_t *)((char *)v50 + 2);
                --v415;
              }
              while (v415 > 1);
            }
            v50 = (uint8x8_t *)((char *)v50 + 2 * v537);
            --v409;
          }
          while (v409);
          goto LABEL_780;
        case 3:
          v416 = (int32x2_t)vand_s8(v535, (int8x8_t)0xFF000000FFLL);
          v417 = v563[0];
          do
          {
            v418 = v16;
            do
            {
              v419 = v50->u8[1];
              if (v419 == 255)
              {
                v50->i8[0] = v535.i8[0];
                v50->i8[1] = v27;
              }
              else if (v50->i8[1])
              {
                v420 = (uint32x2_t)vmul_s32(vdup_n_s32(v419), v416);
                v421 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v420, v420, 8uLL), (int32x2_t)0x100000001), 8uLL);
                v50->i8[1] = v421.i8[4];
                v50->i8[0] = v421.i8[0];
              }
              else
              {
                v50->i16[0] = 0;
              }
              v50 = (uint8x8_t *)((char *)v50 + 2);
              --v418;
            }
            while (v418);
            v50 = (uint8x8_t *)((char *)v50 + 2 * v537);
            --v417;
          }
          while (v417);
          goto LABEL_780;
        case 4:
          v422 = (int32x2_t)vand_s8(v535, (int8x8_t)0xFF000000FFLL);
          v423 = v563[0];
          do
          {
            v424 = v16;
            do
            {
              v425 = v50->i8[1];
              if (~v425 == 255)
              {
                v50->i8[0] = v535.i8[0];
                v50->i8[1] = v27;
              }
              else if (v425 == -1)
              {
                v50->i16[0] = 0;
              }
              else
              {
                v426 = (uint32x2_t)vmul_s32(vdup_n_s32(~v425), v422);
                v427 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v426, v426, 8uLL), (int32x2_t)0x100000001), 8uLL);
                v50->i8[1] = v427.i8[4];
                v50->i8[0] = v427.i8[0];
              }
              v50 = (uint8x8_t *)((char *)v50 + 2);
              --v424;
            }
            while (v424);
            v50 = (uint8x8_t *)((char *)v50 + 2 * v537);
            --v423;
          }
          while (v423);
          goto LABEL_780;
        case 5:
          v428 = v563[0];
          do
          {
            v429 = v16;
            do
            {
              v430 = v50->u8[1];
              v50->i8[0] = (unsigned __int16)(v430 * v535.u8[0]
                                            + v50->u8[0] * v527
                                            + ((v430 * v535.u8[0] + v50->u8[0] * v527) >> 8)
                                            + 1) >> 8;
              v50->i8[1] = (unsigned __int16)(255 * v430 + ((255 * v430) >> 8) + 1) >> 8;
              v50 = (uint8x8_t *)((char *)v50 + 2);
              --v429;
            }
            while (v429);
            v50 = (uint8x8_t *)((char *)v50 + 2 * v537);
            --v428;
          }
          while (v428);
          goto LABEL_780;
        case 6:
          v431 = v563[0];
          do
          {
            v432 = v16;
            do
            {
              v433 = v50->u8[1];
              if (v433 != 0xFF)
              {
                if ((v433 ^ 0xFF) == 0xFF)
                {
                  v50->i8[0] = v535.i8[0];
                  LOBYTE(v434) = v27;
                }
                else
                {
                  v50->i8[0] += (unsigned __int16)(v527 * v535.u8[0] + ((v527 * v535.u8[0]) >> 8) + 1) >> 8;
                  v434 = v433 + ((v527 * v27 + ((v527 * v27) >> 8) + 1) >> 8);
                }
                v50->i8[1] = v434;
              }
              v50 = (uint8x8_t *)((char *)v50 + 2);
              --v432;
            }
            while (v432);
            v50 = (uint8x8_t *)((char *)v50 + 2 * v537);
            --v431;
          }
          while (v431);
          goto LABEL_780;
        case 7:
          v435 = v563[0];
          do
          {
            v436 = v16;
            do
            {
              v50->i8[0] = (unsigned __int16)(v50->u8[0] * v27 + ((v50->u8[0] * v27) >> 8) + 1) >> 8;
              v50->i8[1] = (unsigned __int16)(v50->u8[1] * v27 + ((v50->u8[1] * v27) >> 8) + 1) >> 8;
              v50 = (uint8x8_t *)((char *)v50 + 2);
              --v436;
            }
            while (v436);
            v50 = (uint8x8_t *)((char *)v50 + 2 * v537);
            --v435;
          }
          while (v435);
          goto LABEL_780;
        case 8:
          v437 = v563[0];
          do
          {
            v438 = v16;
            do
            {
              v50->i8[0] = (unsigned __int16)(v50->u8[0] * v527 + ((v50->u8[0] * v527) >> 8) + 1) >> 8;
              v50->i8[1] = (unsigned __int16)(v50->u8[1] * v527 + ((v50->u8[1] * v527) >> 8) + 1) >> 8;
              v50 = (uint8x8_t *)((char *)v50 + 2);
              --v438;
            }
            while (v438);
            v50 = (uint8x8_t *)((char *)v50 + 2 * v537);
            --v437;
          }
          while (v437);
          goto LABEL_780;
        case 9:
          v439 = v563[0];
          do
          {
            v440 = v16;
            do
            {
              v441 = (v50->u8[1] ^ 0xFF) * v535.u8[0] + v50->u8[0] * v27;
              v50->i8[0] = (unsigned __int16)(v441 + (v441 >> 8) + 1) >> 8;
              v50->i8[1] = (unsigned __int16)(255 * v27 + ((255 * v27) >> 8) + 1) >> 8;
              v50 = (uint8x8_t *)((char *)v50 + 2);
              --v440;
            }
            while (v440);
            v50 = (uint8x8_t *)((char *)v50 + 2 * v537);
            --v439;
          }
          while (v439);
          goto LABEL_780;
        case 10:
          v442 = v563[0];
          do
          {
            v443 = v16;
            do
            {
              v444 = v50->u8[1];
              v50->i8[0] = (unsigned __int16)((v444 ^ 0xFF) * v535.u8[0]
                                            + v50->u8[0] * v527
                                            + (((v444 ^ 0xFF) * v535.u8[0] + v50->u8[0] * v527) >> 8)
                                            + 1) >> 8;
              v50->i8[1] = (unsigned __int16)((v444 ^ 0xFF) * v27
                                            + v444 * v527
                                            + (((v444 ^ 0xFF) * v27 + v444 * v527) >> 8)
                                            + 1) >> 8;
              v50 = (uint8x8_t *)((char *)v50 + 2);
              --v443;
            }
            while (v443);
            v50 = (uint8x8_t *)((char *)v50 + 2 * v537);
            --v442;
          }
          while (v442);
          goto LABEL_780;
        case 11:
          v445 = v563[0];
          do
          {
            v446 = v16;
            do
            {
              if (v12)
                v447 = v50->u8[1];
              else
                v447 = 255;
              v448 = ((v27 - v535.i8[0]) | (v27 << 16))
                   + (v447 - v50->i8[0])
                   + (v447 << 16);
              v449 = (255 * ((v448 >> 8) & 0x10001)) | v448;
              v50->i8[0] = BYTE2(v449) - v449;
              v50->i8[1] = BYTE2(v449);
              v50 = (uint8x8_t *)((char *)v50 + 2);
              --v446;
            }
            while (v446);
            v50 = (uint8x8_t *)((char *)v50 + 2 * v537);
            --v445;
          }
          while (v445);
LABEL_780:
          v563[0] = 0;
          if (!v32)
            return 1;
          goto LABEL_952;
        case 12:
          do
          {
            v450 = v573[0];
            do
            {
              v451 = (v535.u8[0] | (v27 << 16)) + v50->i16[0] + ((v50->u16[0] << 8) & 0xFF0000);
              v452 = (255 * ((v451 >> 8) & 0x10001)) | v451;
              v50->i8[0] = v452;
              v50->i8[1] = BYTE2(v452);
              v50 = (uint8x8_t *)((char *)v50 + 2);
              --v450;
            }
            while (v450);
            v50 = (uint8x8_t *)((char *)v50 + 2 * v537);
            --v563[0];
          }
          while (v563[0]);
          goto LABEL_951;
        case 13:
          if (!v27)
            goto LABEL_951;
          v533 = v32;
          v453 = v563[0];
          while (1)
          {
            v454 = v16;
            do
            {
              if (v12)
              {
                v455 = v50->u8[1];
                if (!v50->i8[1])
                {
                  v50->i8[0] = v535.i8[0];
                  v50->i8[1] = v27;
                  goto LABEL_794;
                }
              }
              else
              {
                v455 = 255;
              }
              v559 = v535.u8[0] | ((unint64_t)v27 << 8) | v559 & 0xFFFFFFFFFFFF0000;
              v560 = v560 & 0xFFFFFFFFFFFF0000 | v50->u16[0];
              v50->i16[0] = PDAmultiplyPDA(v560, v455, v535.u8[0], v27);
LABEL_794:
              v50 = (uint8x8_t *)((char *)v50 + 2);
              --v454;
            }
            while (v454);
            v50 = (uint8x8_t *)((char *)v50 + 2 * v537);
            v563[0] = --v453;
            LODWORD(v16) = v524;
            if (!v453)
              goto LABEL_950;
          }
        case 14:
          if (!v27)
            goto LABEL_951;
          v456 = v563[0];
          while (1)
          {
            v457 = v16;
            do
            {
              if (v12)
              {
                v458 = v50->u8[1];
                if (!v50->i8[1])
                {
                  v50->i8[0] = v535.i8[0];
                  v50->i8[1] = v27;
                  goto LABEL_805;
                }
              }
              else
              {
                v458 = 255;
              }
              v459 = (v50->u8[0] ^ 0xFF) * v535.u8[0] - v50->u8[0] + (v50->u8[0] << 8);
              v50->i8[0] = (unsigned __int16)(v459 + (v459 >> 8) + 1) >> 8;
              v50->i8[1] = (unsigned __int16)(255 * (v458 + v27)
                                            - v458 * v27
                                            + ((255 * (v458 + v27) - v458 * v27) >> 8)
                                            + 1) >> 8;
LABEL_805:
              v50 = (uint8x8_t *)((char *)v50 + 2);
              --v457;
            }
            while (v457);
            v50 = (uint8x8_t *)((char *)v50 + 2 * v537);
            v563[0] = --v456;
            if (!v456)
              goto LABEL_951;
          }
        case 15:
          if (!v27)
            goto LABEL_951;
          v533 = v32;
          v460 = v563[0];
          while (1)
          {
            v461 = v16;
            do
            {
              if (v12)
              {
                v462 = v50->u8[1];
                if (!v50->i8[1])
                {
                  v50->i8[0] = v535.i8[0];
                  v50->i8[1] = v27;
                  goto LABEL_816;
                }
              }
              else
              {
                v462 = 255;
              }
              v557 = v535.u8[0] | ((unint64_t)v27 << 8) | v557 & 0xFFFFFFFFFFFF0000;
              v558 = v558 & 0xFFFFFFFFFFFF0000 | v50->u16[0];
              v50->i16[0] = PDAoverlayPDA(v558, v462, v535.u8[0], v27);
LABEL_816:
              v50 = (uint8x8_t *)((char *)v50 + 2);
              --v461;
            }
            while (v461);
            v50 = (uint8x8_t *)((char *)v50 + 2 * v537);
            v563[0] = --v460;
            LODWORD(v16) = v524;
            if (!v460)
            {
LABEL_950:
              v13 = v506;
              v30 = v529;
              v28 = v525 >> 1;
              v32 = v533;
              goto LABEL_951;
            }
          }
        case 16:
          if (!v27)
            goto LABEL_951;
          v533 = v32;
          v463 = v563[0];
          while (1)
          {
            v464 = v16;
            do
            {
              if (v12)
              {
                v465 = v50->u8[1];
                if (!v50->i8[1])
                {
                  v50->i8[0] = v535.i8[0];
                  v50->i8[1] = v27;
                  goto LABEL_827;
                }
              }
              else
              {
                v465 = 255;
              }
              v553 = v535.u8[0] | ((unint64_t)v27 << 8) | v553 & 0xFFFFFFFFFFFF0000;
              v554 = v554 & 0xFFFFFFFFFFFF0000 | v50->u16[0];
              v50->i16[0] = PDAdarkenPDA(v554, v465, v535.u8[0], v27);
LABEL_827:
              v50 = (uint8x8_t *)((char *)v50 + 2);
              --v464;
            }
            while (v464);
            v50 = (uint8x8_t *)((char *)v50 + 2 * v537);
            v563[0] = --v463;
            LODWORD(v16) = v524;
            if (!v463)
              goto LABEL_950;
          }
        case 17:
          if (!v27)
            goto LABEL_951;
          v533 = v32;
          v466 = v563[0];
          while (1)
          {
            v467 = v16;
            do
            {
              if (v12)
              {
                v468 = v50->u8[1];
                if (!v50->i8[1])
                {
                  v50->i8[0] = v535.i8[0];
                  v50->i8[1] = v27;
                  goto LABEL_838;
                }
              }
              else
              {
                v468 = 255;
              }
              v555 = v535.u8[0] | ((unint64_t)v27 << 8) | v555 & 0xFFFFFFFFFFFF0000;
              v556 = v556 & 0xFFFFFFFFFFFF0000 | v50->u16[0];
              v50->i16[0] = PDAlightenPDA(v556, v468, v535.u8[0], v27);
LABEL_838:
              v50 = (uint8x8_t *)((char *)v50 + 2);
              --v467;
            }
            while (v467);
            v50 = (uint8x8_t *)((char *)v50 + 2 * v537);
            v563[0] = --v466;
            LODWORD(v16) = v524;
            if (!v466)
              goto LABEL_950;
          }
        case 18:
          if (!v27)
            goto LABEL_951;
          v533 = v32;
          v469 = v563[0];
          while (1)
          {
            v470 = v16;
            do
            {
              if (v12)
              {
                v471 = v50->u8[1];
                if (!v50->i8[1])
                {
                  v50->i8[0] = v535.i8[0];
                  v50->i8[1] = v27;
                  goto LABEL_849;
                }
              }
              else
              {
                v471 = 255;
              }
              v551 = v535.u8[0] | ((unint64_t)v27 << 8) | v551 & 0xFFFFFFFFFFFF0000;
              v552 = v552 & 0xFFFFFFFFFFFF0000 | v50->u16[0];
              v50->i16[0] = PDAcolordodgePDA(v552, v471, v535.u8[0], v27);
LABEL_849:
              v50 = (uint8x8_t *)((char *)v50 + 2);
              --v470;
            }
            while (v470);
            v50 = (uint8x8_t *)((char *)v50 + 2 * v537);
            v563[0] = --v469;
            LODWORD(v16) = v524;
            if (!v469)
              goto LABEL_950;
          }
        case 19:
          if (!v27)
            goto LABEL_951;
          v533 = v32;
          v472 = v563[0];
          while (1)
          {
            v473 = v16;
            do
            {
              if (v12)
              {
                v474 = v50->u8[1];
                if (!v50->i8[1])
                {
                  v50->i8[0] = v535.i8[0];
                  v50->i8[1] = v27;
                  goto LABEL_860;
                }
              }
              else
              {
                v474 = 255;
              }
              v549 = v535.u8[0] | ((unint64_t)v27 << 8) | v549 & 0xFFFFFFFFFFFF0000;
              v550 = v550 & 0xFFFFFFFFFFFF0000 | v50->u16[0];
              v50->i16[0] = PDAcolorburnPDA(v550, v474, v535.u8[0], v27);
LABEL_860:
              v50 = (uint8x8_t *)((char *)v50 + 2);
              --v473;
            }
            while (v473);
            v50 = (uint8x8_t *)((char *)v50 + 2 * v537);
            v563[0] = --v472;
            LODWORD(v16) = v524;
            if (!v472)
              goto LABEL_950;
          }
        case 20:
          if (!v27)
            goto LABEL_951;
          v533 = v32;
          v475 = v563[0];
          while (1)
          {
            v476 = v16;
            do
            {
              if (v12)
              {
                v477 = v50->u8[1];
                if (!v50->i8[1])
                {
                  v50->i8[0] = v535.i8[0];
                  v50->i8[1] = v27;
                  goto LABEL_871;
                }
              }
              else
              {
                v477 = 255;
              }
              v545 = v535.u8[0] | ((unint64_t)v27 << 8) | v545 & 0xFFFFFFFFFFFF0000;
              v546 = v546 & 0xFFFFFFFFFFFF0000 | v50->u16[0];
              v50->i16[0] = PDAsoftlightPDA(v546, v477, v535.u8[0], v27);
LABEL_871:
              v50 = (uint8x8_t *)((char *)v50 + 2);
              --v476;
            }
            while (v476);
            v50 = (uint8x8_t *)((char *)v50 + 2 * v537);
            v563[0] = --v475;
            LODWORD(v16) = v524;
            if (!v475)
              goto LABEL_950;
          }
        case 21:
          if (!v27)
            goto LABEL_951;
          v533 = v32;
          v478 = v563[0];
          while (1)
          {
            v479 = v16;
            do
            {
              if (v12)
              {
                v480 = v50->u8[1];
                if (!v50->i8[1])
                {
                  v50->i8[0] = v535.i8[0];
                  v50->i8[1] = v27;
                  goto LABEL_882;
                }
              }
              else
              {
                v480 = 255;
              }
              v547 = v535.u8[0] | ((unint64_t)v27 << 8) | v547 & 0xFFFFFFFFFFFF0000;
              v548 = v548 & 0xFFFFFFFFFFFF0000 | v50->u16[0];
              v50->i16[0] = PDAhardlightPDA(v548, v480, v535.u8[0], v27);
LABEL_882:
              v50 = (uint8x8_t *)((char *)v50 + 2);
              --v479;
            }
            while (v479);
            v50 = (uint8x8_t *)((char *)v50 + 2 * v537);
            v563[0] = --v478;
            LODWORD(v16) = v524;
            if (!v478)
              goto LABEL_950;
          }
        case 22:
          if (!v27)
            goto LABEL_951;
          v533 = v32;
          v481 = v563[0];
          while (1)
          {
            v482 = v16;
            do
            {
              if (v12)
              {
                v483 = v50->u8[1];
                if (!v50->i8[1])
                {
                  v50->i8[0] = v535.i8[0];
                  v50->i8[1] = v27;
                  goto LABEL_893;
                }
              }
              else
              {
                v483 = 255;
              }
              v543 = v535.u8[0] | ((unint64_t)v27 << 8) | v543 & 0xFFFFFFFFFFFF0000;
              v544 = v544 & 0xFFFFFFFFFFFF0000 | v50->u16[0];
              v50->i16[0] = PDAdifferencePDA(v544, v483, v535.u8[0], v27);
LABEL_893:
              v50 = (uint8x8_t *)((char *)v50 + 2);
              --v482;
            }
            while (v482);
            v50 = (uint8x8_t *)((char *)v50 + 2 * v537);
            v563[0] = --v481;
            LODWORD(v16) = v524;
            if (!v481)
              goto LABEL_950;
          }
        case 23:
          if (!v27)
            goto LABEL_951;
          v484 = v563[0];
          while (1)
          {
            v485 = v16;
            do
            {
              if (v12)
              {
                v486 = v50->u8[1];
                if (!v50->i8[1])
                {
                  v50->i8[0] = v535.i8[0];
                  v50->i8[1] = v27;
                  goto LABEL_904;
                }
              }
              else
              {
                v486 = 255;
              }
              v487 = 255 * (v50->u8[0] + v535.u8[0]) - 2 * v535.u8[0] * v50->u8[0];
              v50->i8[0] = (unsigned __int16)(v487 + (v487 >> 8) + 1) >> 8;
              v50->i8[1] = (unsigned __int16)(255 * (v486 + v27)
                                            - v486 * v27
                                            + ((255 * (v486 + v27) - v486 * v27) >> 8)
                                            + 1) >> 8;
LABEL_904:
              v50 = (uint8x8_t *)((char *)v50 + 2);
              --v485;
            }
            while (v485);
            v50 = (uint8x8_t *)((char *)v50 + 2 * v537);
            v563[0] = --v484;
            if (!v484)
            {
LABEL_951:
              if (v32)
                goto LABEL_952;
              return 1;
            }
          }
        case 24:
          if (!v27)
            goto LABEL_951;
          v533 = v32;
          v488 = v563[0];
          while (1)
          {
            v489 = v16;
            do
            {
              if (v12)
              {
                v490 = v50->u8[1];
                if (!v50->i8[1])
                {
                  v50->i8[0] = v535.i8[0];
                  v50->i8[1] = v27;
                  goto LABEL_915;
                }
              }
              else
              {
                v490 = 255;
              }
              v541 = v535.u8[0] | ((unint64_t)v27 << 8) | v541 & 0xFFFFFFFFFFFF0000;
              v542 = v542 & 0xFFFFFFFFFFFF0000 | v50->u16[0];
              v50->i16[0] = PDAhuePDA(v542, v490, v535.u8[0], v27);
LABEL_915:
              v50 = (uint8x8_t *)((char *)v50 + 2);
              --v489;
            }
            while (v489);
            v50 = (uint8x8_t *)((char *)v50 + 2 * v537);
            v563[0] = --v488;
            LODWORD(v16) = v524;
            if (!v488)
              goto LABEL_950;
          }
        case 25:
          if (!v27)
            goto LABEL_951;
          v533 = v32;
          v491 = v563[0];
          while (1)
          {
            v492 = v16;
            do
            {
              if (v12)
              {
                v493 = v50->u8[1];
                if (!v50->i8[1])
                {
                  v50->i8[0] = v535.i8[0];
                  v50->i8[1] = v27;
                  goto LABEL_926;
                }
              }
              else
              {
                v493 = 255;
              }
              v539 = v535.u8[0] | ((unint64_t)v27 << 8) | v539 & 0xFFFFFFFFFFFF0000;
              v540 = v540 & 0xFFFFFFFFFFFF0000 | v50->u16[0];
              v50->i16[0] = PDAhuePDA(v540, v493, v535.u8[0], v27);
LABEL_926:
              v50 = (uint8x8_t *)((char *)v50 + 2);
              --v492;
            }
            while (v492);
            v50 = (uint8x8_t *)((char *)v50 + 2 * v537);
            v563[0] = --v491;
            LODWORD(v16) = v524;
            if (!v491)
              goto LABEL_950;
          }
        case 26:
          if (!v27)
            goto LABEL_951;
          v533 = v32;
          v494 = v563[0];
          while (1)
          {
            v495 = v16;
            do
            {
              if (v12)
              {
                v496 = v50->u8[1];
                if (!v50->i8[1])
                {
                  v50->i8[0] = v535.i8[0];
                  v50->i8[1] = v27;
                  goto LABEL_937;
                }
              }
              else
              {
                v496 = 255;
              }
              v15 = v15 & 0xFFFFFFFFFFFF0000 | v50->u16[0];
              v538 = v535.u8[0] | ((unint64_t)v27 << 8) | v538 & 0xFFFFFFFFFFFF0000;
              v50->i16[0] = PDAhuePDA(v535.u8[0], v27, v15, v496);
LABEL_937:
              v50 = (uint8x8_t *)((char *)v50 + 2);
              --v495;
            }
            while (v495);
            v50 = (uint8x8_t *)((char *)v50 + 2 * v537);
            v563[0] = --v494;
            LODWORD(v16) = v524;
            if (!v494)
              goto LABEL_950;
          }
        case 27:
          if (!v27)
            goto LABEL_951;
          v533 = v32;
          v497 = v563[0];
          break;
        default:
          goto LABEL_951;
      }
LABEL_942:
      v498 = v16;
      while (v12)
      {
        v499 = v50->u8[1];
        if (v50->i8[1])
          goto LABEL_947;
        v50->i8[0] = v535.i8[0];
        v50->i8[1] = v27;
LABEL_948:
        v50 = (uint8x8_t *)((char *)v50 + 2);
        if (!--v498)
        {
          v50 = (uint8x8_t *)((char *)v50 + 2 * v537);
          v563[0] = --v497;
          LODWORD(v16) = v524;
          if (!v497)
            goto LABEL_950;
          goto LABEL_942;
        }
      }
      v499 = 255;
LABEL_947:
      v2 = v2 & 0xFFFFFFFFFFFF0000 | v50->u16[0];
      v3 = v535.u8[0] | ((unint64_t)v27 << 8) | v3 & 0xFFFFFFFFFFFF0000;
      v50->i16[0] = PDAhuePDA(v2, v499, v3, v27);
      goto LABEL_948;
    }
    v573[0] = *(_DWORD *)(v5 + 4);
    v563[0] = v18;
    v33 = *(_QWORD *)(v5 + 88);
    v34 = (unint64_t)*(int *)(v5 + 28) >> 1;
    v35 = (unsigned __int8 *)(*(_QWORD *)(v5 + 40) + 2 * (*(int *)(v5 + 12) + v34 * *(int *)(v5 + 16)));
    v36 = *(_DWORD *)(v5 + 56);
    v37 = *(_DWORD *)(v5 + 60);
    v38 = (unint64_t)*(int *)(v5 + 76) >> 1;
    if (v22 != 256)
    {
      LODWORD(v510) = *(_DWORD *)(v5 + 64);
      v508 = *(_DWORD *)(v5 + 68);
      v528 = v33 + 2 * v38 * v508;
      v48 = v11 != 0;
      if (v20)
      {
        v530 = (unint64_t)*(int *)(v5 + 76) >> 1;
        v501 = *(_DWORD *)(v5 + 60);
        v502 = *(_DWORD *)(v5 + 56);
        v41 = 1;
        v561 = *(unsigned __int8 **)(v5 + 88);
        v49 = (unint64_t)v561;
        goto LABEL_43;
      }
      v526 = v34 - v16;
      if (v33)
      {
        v509 = 0;
        v61 = v36 % (int)v510;
        v530 = (unint64_t)*(int *)(v5 + 76) >> 1;
        v62 = v33 + 2 * v38 * (v37 % v508);
        v63 = (unsigned __int8 *)(v62 + 2 * v61);
        v49 = v62 + 2 * (int)v510;
        v507 = 1;
        v561 = v63;
        v64 = (unsigned __int8 *)(*(_QWORD *)(v5 + 40) + 2 * (*(int *)(v5 + 12) + v34 * *(int *)(v5 + 16)));
        v501 = v37 % v508;
        v502 = v61;
        goto LABEL_47;
      }
      v501 = *(_DWORD *)(v5 + 60);
      v502 = *(_DWORD *)(v5 + 56);
      v49 = 0;
      v507 = 1;
      v65 = v16;
LABEL_46:
      v509 = 0;
      v561 = 0;
      v528 = 0;
      v530 = v38 - v65;
      v63 = (unsigned __int8 *)v33;
      v64 = v35;
      goto LABEL_47;
    }
    v33 += 2 * (v36 + v38 * v37);
    if (v38 == v34)
    {
      if ((uint64_t)&v35[-v33] < 1)
        goto LABEL_20;
      if (v16 < (unint64_t)&v35[-v33] >> 1)
      {
        v39 = v34 * v19;
        v40 = v33 + 2 * v34 * v19;
        if ((unint64_t)v35 <= v40 + 2 * (unint64_t)v17)
        {
          v35 += 2 * v39;
          v34 = -(uint64_t)v34;
          v41 = 1;
          v33 = v40;
          goto LABEL_40;
        }
LABEL_20:
        v41 = 1;
LABEL_40:
        v510 = v34;
        goto LABEL_41;
      }
      v35 += 2 * v17;
      v41 = -1;
      v510 = (unint64_t)*(int *)(v5 + 28) >> 1;
      v33 += 2 * v17;
    }
    else
    {
      v41 = 1;
      v510 = (unint64_t)*(int *)(v5 + 76) >> 1;
    }
LABEL_41:
    v501 = *(_DWORD *)(v5 + 60);
    v502 = *(_DWORD *)(v5 + 56);
    v48 = v11 != 0;
    if (v20)
    {
      v508 = 0;
      v561 = 0;
      v49 = -1;
      v528 = 0;
      v530 = v510;
LABEL_43:
      v507 = v41;
      shape_enum_clip_alloc(v4, v5, (int *)v20, v41, v34, 1, *(_DWORD *)(v5 + 104), *(_DWORD *)(v5 + 108), v16, v18);
      if (!v66)
        return 1;
      v67 = v66;
      while (2)
      {
        if (!shape_enum_clip_next(v67, (int *)&v562 + 1, &v562, v573, v563))
        {
          v60 = (void *)v67;
          goto LABEL_956;
        }
        v509 = v67;
        if (v528)
        {
          v64 = &v35[2 * v34 * (int)v562 + 2 * SHIDWORD(v562)];
          LODWORD(v16) = v573[0];
          v400 = v33 + 2 * v530 * (((int)v562 + *(_DWORD *)(v15 + 60)) % v508);
          v63 = (unsigned __int8 *)(v400 + 2 * ((HIDWORD(v562) + *(_DWORD *)(v15 + 56)) % (int)v510));
          v49 = v400 + 2 * (int)v510;
          v561 = v63;
          v401 = v573[0];
          v501 = ((int)v562 + *(_DWORD *)(v15 + 60)) % v508;
          v502 = (HIDWORD(v562) + *(_DWORD *)(v15 + 56)) % (int)v510;
        }
        else
        {
          LODWORD(v16) = v573[0];
          v401 = v573[0] * v507;
          v64 = &v35[2 * v34 * (int)v562 + 2 * HIDWORD(v562) * v507];
          v63 = (unsigned __int8 *)(v33 + 2 * (int)v562 * (int)v510 + 2 * HIDWORD(v562) * v507);
          v530 = (int)v510 - v573[0] * v507;
        }
        v526 = v34 - v401;
LABEL_47:
        switch(v13)
        {
          case 0:
            v68 = &v64[-2 * (int)v16 + 2];
            v69 = v526 + (int)v16;
            if (v507 < 0)
              v69 = v526 - (int)v16;
            else
              v68 = v64;
            v70 = (char *)&v68[2 * ((v69 * (v563[0] - 1)) & (v69 >> 63))];
            if (v69 < 0)
              v69 = -v69;
            CGBlt_fillBytes(2 * v16, v563[0], 0, v70, 2 * v69);
            goto LABEL_686;
          case 1:
            v71 = *(unsigned __int8 *)(v15 + 1);
            if (v71 == 2)
            {
              if ((int)v16 >= 16 && (2 * v510) <= 0x40)
              {
                LODWORD(v6) = 2 * v510;
                v372 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v6);
                v372.i16[0] = vaddlv_u8(v372);
                if (v372.i32[0] <= 1u)
                {
                  CGSFillDRAM64(v64, 2 * (v16 + v526), 2 * v16, v563[0], v33, 2 * v530, 2 * v510, v508, 2 * v502, v501);
                  goto LABEL_686;
                }
              }
LABEL_639:
              v373 = v563[0];
              v374 = 2 * v507;
              if (v12 == 0 || v48)
              {
                do
                {
                  v375 = v16;
                  do
                  {
                    *(_WORD *)v64 = *(_WORD *)v63;
                    v376 = &v63[2 * v507];
                    if ((unint64_t)v376 >= v49)
                      v377 = -(uint64_t)(int)v510;
                    else
                      v377 = 0;
                    v63 = &v376[2 * v377];
                    v64 += v374;
                    --v375;
                  }
                  while (v375);
                  v64 += 2 * v526;
                  v378 = v561;
                  v379 = &v561[2 * v530];
                  if ((unint64_t)v379 >= v528)
                    v380 = -(uint64_t)(v530 * v508);
                  else
                    v380 = 0;
                  v381 = &v379[2 * v380];
                  v382 = v49 + 2 * v380 + 2 * v530;
                  if (v528)
                  {
                    v49 = v382;
                    v378 = v381;
                  }
                  v561 = v378;
                  if (v528)
                    v63 = v381;
                  else
                    v63 += 2 * v530;
                  --v373;
                }
                while (v373);
              }
              else
              {
                do
                {
                  v383 = v16;
                  do
                  {
                    *v64 = *v63;
                    v64[1] = -1;
                    v384 = &v63[2 * v507];
                    if ((unint64_t)v384 >= v49)
                      v385 = -(uint64_t)(int)v510;
                    else
                      v385 = 0;
                    v63 = &v384[2 * v385];
                    v64 += v374;
                    --v383;
                  }
                  while (v383);
                  v64 += 2 * v526;
                  v386 = v561;
                  v387 = &v561[2 * v530];
                  if ((unint64_t)v387 >= v528)
                    v388 = -(uint64_t)(v530 * v508);
                  else
                    v388 = 0;
                  v389 = &v387[2 * v388];
                  v390 = v49 + 2 * v388 + 2 * v530;
                  if (v528)
                  {
                    v49 = v390;
                    v386 = v389;
                  }
                  v561 = v386;
                  if (v528)
                    v63 = v389;
                  else
                    v63 += 2 * v530;
                  --v373;
                }
                while (v373);
              }
              goto LABEL_685;
            }
            if (v71 != 1)
              goto LABEL_639;
            if (v12 != 0 && !v48)
            {
              v391 = v563[0];
              do
              {
                v392 = v16;
                do
                {
                  *v64 = *v63;
                  v64[1] = -1;
                  v393 = &v63[2 * v507];
                  if ((unint64_t)v393 >= v49)
                    v394 = -(uint64_t)(int)v510;
                  else
                    v394 = 0;
                  v63 = &v393[2 * v394];
                  v64 += 2 * v507;
                  --v392;
                }
                while (v392);
                v64 += 2 * v526;
                v395 = v561;
                v396 = &v561[2 * v530];
                if ((unint64_t)v396 >= v528)
                  v397 = -(uint64_t)(v530 * v508);
                else
                  v397 = 0;
                v398 = &v396[2 * v397];
                v399 = v49 + 2 * v397 + 2 * v530;
                if (v528)
                {
                  v49 = v399;
                  v395 = v398;
                }
                v561 = v395;
                if (v528)
                  v63 = v398;
                else
                  v63 += 2 * v530;
                --v391;
              }
              while (v391);
              goto LABEL_685;
            }
            if (v507 < 0)
            {
              v72 = v530 - (int)v16;
              v63 += -2 * (int)v16 + 2;
              v73 = v526 - (int)v16;
              v64 += -2 * (int)v16 + 2;
            }
            else
            {
              v72 = v530 + (int)v16;
              v73 = v526 + (int)v16;
            }
            v402 = v563[0] - 1;
            v403 = (char *)&v63[2 * ((v72 * v402) & (v72 >> 63))];
            if (v72 >= 0)
              v404 = v72;
            else
              v404 = -v72;
            if (v73 >= 0)
              LODWORD(v405) = v73;
            else
              v405 = -v73;
            v530 = v404;
            CGBlt_copyBytes(2 * v16, v563[0], v403, (char *)&v64[2 * ((v73 * v402) & (v73 >> 63))], 2 * v404, 2 * v405);
LABEL_686:
            v67 = v509;
            if (!v509)
              return 1;
            v562 = 0;
            continue;
          case 2:
            v74 = v563[0];
            do
            {
              v75 = v16;
              do
              {
                v76 = v63[1];
                if (v63[1])
                {
                  if (v76 == 255)
                  {
                    *v64 = *v63;
                    v64[1] = -1;
                  }
                  else
                  {
                    *v64 = *v63 + ((unsigned __int16)(*v64 * (v76 ^ 0xFF) + ((*v64 * (v76 ^ 0xFFu)) >> 8) + 1) >> 8);
                    v64[1] = v76
                           + ((unsigned __int16)(v64[1] * (v76 ^ 0xFF) + ((v64[1] * (v76 ^ 0xFFu)) >> 8) + 1) >> 8);
                  }
                }
                v77 = &v63[2 * v507];
                if ((unint64_t)v77 >= v49)
                  v78 = -(uint64_t)(int)v510;
                else
                  v78 = 0;
                v63 = &v77[2 * v78];
                v64 += 2 * v507;
                --v75;
              }
              while (v75);
              v64 += 2 * v526;
              v79 = v561;
              v80 = &v561[2 * v530];
              if ((unint64_t)v80 >= v528)
                v81 = -(uint64_t)(v530 * v508);
              else
                v81 = 0;
              v82 = &v80[2 * v81];
              v83 = v49 + 2 * v81 + 2 * v530;
              if (v528)
              {
                v49 = v83;
                v79 = v82;
              }
              v561 = v79;
              if (v528)
                v63 = v82;
              else
                v63 += 2 * v530;
              --v74;
            }
            while (v74);
            goto LABEL_685;
          case 3:
            v84 = v563[0];
            while (1)
            {
              v85 = v16;
              do
              {
                v86 = v64[1];
                if (v86 == 255)
                {
                  *v64 = *v63;
                  if (v48)
                    LOBYTE(v87) = v63[1];
                  else
                    LOBYTE(v87) = -1;
                }
                else
                {
                  if (!v64[1])
                  {
                    *(_WORD *)v64 = 0;
                    goto LABEL_92;
                  }
                  *v64 = (unsigned __int16)(*v63 * (_WORD)v86 + ((*v63 * v86) >> 8) + 1) >> 8;
                  if (v48)
                    v88 = v63[1];
                  else
                    v88 = 255;
                  v87 = (v88 * v86 + ((v88 * v86) >> 8) + 1) >> 8;
                }
                v64[1] = v87;
LABEL_92:
                v89 = &v63[2 * v507];
                if ((unint64_t)v89 >= v49)
                  v90 = -(uint64_t)(int)v510;
                else
                  v90 = 0;
                v63 = &v89[2 * v90];
                v64 += 2 * v507;
                --v85;
              }
              while (v85);
              v64 += 2 * v526;
              v91 = v561;
              v92 = &v561[2 * v530];
              if ((unint64_t)v92 >= v528)
                v93 = -(uint64_t)(v530 * v508);
              else
                v93 = 0;
              v94 = &v92[2 * v93];
              v95 = v49 + 2 * v93 + 2 * v530;
              if (v528)
              {
                v49 = v95;
                v91 = v94;
              }
              v561 = v91;
              if (v528)
                v63 = v94;
              else
                v63 += 2 * v530;
              if (!--v84)
                goto LABEL_685;
            }
          case 4:
            v96 = v563[0];
            while (1)
            {
              v97 = v16;
              do
              {
                v98 = v64[1];
                if (~v98 == 255)
                {
                  *v64 = *v63;
                  if (v48)
                    LOBYTE(v99) = v63[1];
                  else
                    LOBYTE(v99) = -1;
                }
                else
                {
                  if (v98 == 0xFF)
                  {
                    *(_WORD *)v64 = 0;
                    goto LABEL_119;
                  }
                  v100 = ~v98;
                  *v64 = (unsigned __int16)(*v63 * (_WORD)v100 + ((*v63 * v100) >> 8) + 1) >> 8;
                  if (v48)
                    v101 = v63[1];
                  else
                    v101 = 255;
                  v99 = (v101 * v100 + ((v101 * v100) >> 8) + 1) >> 8;
                }
                v64[1] = v99;
LABEL_119:
                v102 = &v63[2 * v507];
                if ((unint64_t)v102 >= v49)
                  v103 = -(uint64_t)(int)v510;
                else
                  v103 = 0;
                v63 = &v102[2 * v103];
                v64 += 2 * v507;
                --v97;
              }
              while (v97);
              v64 += 2 * v526;
              v104 = v561;
              v105 = &v561[2 * v530];
              if ((unint64_t)v105 >= v528)
                v106 = -(uint64_t)(v530 * v508);
              else
                v106 = 0;
              v107 = &v105[2 * v106];
              v108 = v49 + 2 * v106 + 2 * v530;
              if (v528)
              {
                v49 = v108;
                v104 = v107;
              }
              v561 = v104;
              if (v528)
                v63 = v107;
              else
                v63 += 2 * v530;
              if (!--v96)
                goto LABEL_685;
            }
          case 5:
            v109 = v563[0];
            do
            {
              v110 = v16;
              do
              {
                v111 = v64[1];
                v112 = v111 * *v63 + (v63[1] ^ 0xFF) * *v64;
                *v64 = (unsigned __int16)(v112 + (v112 >> 8) + 1) >> 8;
                v64[1] = (unsigned __int16)(255 * v111 + ((255 * v111) >> 8) + 1) >> 8;
                v113 = &v63[2 * v507];
                if ((unint64_t)v113 >= v49)
                  v114 = -(uint64_t)(int)v510;
                else
                  v114 = 0;
                v63 = &v113[2 * v114];
                v64 += 2 * v507;
                --v110;
              }
              while (v110);
              v64 += 2 * v526;
              v115 = v561;
              v116 = &v561[2 * v530];
              if ((unint64_t)v116 >= v528)
                v117 = -(uint64_t)(v530 * v508);
              else
                v117 = 0;
              v118 = &v116[2 * v117];
              v119 = v49 + 2 * v117 + 2 * v530;
              if (v528)
              {
                v49 = v119;
                v115 = v118;
              }
              v561 = v115;
              if (v528)
                v63 = v118;
              else
                v63 += 2 * v530;
              --v109;
            }
            while (v109);
            goto LABEL_685;
          case 6:
            v120 = v563[0];
            do
            {
              v121 = v16;
              do
              {
                v122 = v64[1];
                if ((_BYTE)v122 != 0xFF)
                {
                  if (~(_BYTE)v122 == 255)
                  {
                    *v64 = *v63;
                    if (v48)
                      LOBYTE(v123) = v63[1];
                    else
                      LOBYTE(v123) = -1;
                  }
                  else
                  {
                    v124 = ~(_BYTE)v122;
                    *v64 += (unsigned __int16)(*v63 * (_WORD)v124 + ((*v63 * v124) >> 8) + 1) >> 8;
                    if (v48)
                      v125 = v63[1];
                    else
                      v125 = 255;
                    v123 = v122 + ((v125 * v124 + ((v125 * v124) >> 8) + 1) >> 8);
                  }
                  v64[1] = v123;
                }
                v126 = &v63[2 * v507];
                if ((unint64_t)v126 >= v49)
                  v127 = -(uint64_t)(int)v510;
                else
                  v127 = 0;
                v63 = &v126[2 * v127];
                v64 += 2 * v507;
                --v121;
              }
              while (v121);
              v64 += 2 * v526;
              v128 = v561;
              v129 = &v561[2 * v530];
              if ((unint64_t)v129 >= v528)
                v130 = -(uint64_t)(v530 * v508);
              else
                v130 = 0;
              v131 = &v129[2 * v130];
              v132 = v49 + 2 * v130 + 2 * v530;
              if (v528)
              {
                v49 = v132;
                v128 = v131;
              }
              v561 = v128;
              if (v528)
                v63 = v131;
              else
                v63 += 2 * v530;
              --v120;
            }
            while (v120);
            goto LABEL_685;
          case 7:
            v133 = v563[0];
            do
            {
              v134 = v16;
              do
              {
                v135 = v63[1];
                if (v135 != 255)
                {
                  if (v63[1])
                  {
                    *v64 = (unsigned __int16)(*v64 * (_WORD)v135 + ((*v64 * v135) >> 8) + 1) >> 8;
                    v64[1] = (unsigned __int16)(v64[1] * (_WORD)v135 + ((v64[1] * v135) >> 8) + 1) >> 8;
                  }
                  else
                  {
                    *(_WORD *)v64 = 0;
                  }
                }
                v136 = &v63[2 * v507];
                if ((unint64_t)v136 >= v49)
                  v137 = -(uint64_t)(int)v510;
                else
                  v137 = 0;
                v63 = &v136[2 * v137];
                v64 += 2 * v507;
                --v134;
              }
              while (v134);
              v64 += 2 * v526;
              v138 = v561;
              v139 = &v561[2 * v530];
              if ((unint64_t)v139 >= v528)
                v140 = -(uint64_t)(v530 * v508);
              else
                v140 = 0;
              v141 = &v139[2 * v140];
              v142 = v49 + 2 * v140 + 2 * v530;
              if (v528)
              {
                v49 = v142;
                v138 = v141;
              }
              v561 = v138;
              if (v528)
                v63 = v141;
              else
                v63 += 2 * v530;
              --v133;
            }
            while (v133);
            goto LABEL_685;
          case 8:
            v143 = v563[0];
            do
            {
              v144 = v16;
              do
              {
                v145 = v63[1];
                if (~v145 != 255)
                {
                  if (v145 == 0xFF)
                  {
                    *(_WORD *)v64 = 0;
                  }
                  else
                  {
                    v146 = ~v145;
                    *v64 = (unsigned __int16)(*v64 * (_WORD)v146 + ((*v64 * v146) >> 8) + 1) >> 8;
                    v64[1] = (unsigned __int16)(v64[1] * (_WORD)v146 + ((v64[1] * v146) >> 8) + 1) >> 8;
                  }
                }
                v147 = &v63[2 * v507];
                if ((unint64_t)v147 >= v49)
                  v148 = -(uint64_t)(int)v510;
                else
                  v148 = 0;
                v63 = &v147[2 * v148];
                v64 += 2 * v507;
                --v144;
              }
              while (v144);
              v64 += 2 * v526;
              v149 = v561;
              v150 = &v561[2 * v530];
              if ((unint64_t)v150 >= v528)
                v151 = -(uint64_t)(v530 * v508);
              else
                v151 = 0;
              v152 = &v150[2 * v151];
              v153 = v49 + 2 * v151 + 2 * v530;
              if (v528)
              {
                v49 = v153;
                v149 = v152;
              }
              v561 = v149;
              if (v528)
                v63 = v152;
              else
                v63 += 2 * v530;
              --v143;
            }
            while (v143);
            goto LABEL_685;
          case 9:
            v154 = v563[0];
            do
            {
              v155 = v16;
              do
              {
                v156 = v63[1];
                v157 = (v64[1] ^ 0xFF) * *v63 + v156 * *v64;
                *v64 = (unsigned __int16)(v157 + (v157 >> 8) + 1) >> 8;
                v64[1] = (unsigned __int16)(255 * v156 + ((255 * v156) >> 8) + 1) >> 8;
                v158 = &v63[2 * v507];
                if ((unint64_t)v158 >= v49)
                  v159 = -(uint64_t)(int)v510;
                else
                  v159 = 0;
                v63 = &v158[2 * v159];
                v64 += 2 * v507;
                --v155;
              }
              while (v155);
              v64 += 2 * v526;
              v160 = v561;
              v161 = &v561[2 * v530];
              if ((unint64_t)v161 >= v528)
                v162 = -(uint64_t)(v530 * v508);
              else
                v162 = 0;
              v163 = &v161[2 * v162];
              v164 = v49 + 2 * v162 + 2 * v530;
              if (v528)
              {
                v49 = v164;
                v160 = v163;
              }
              v561 = v160;
              if (v528)
                v63 = v163;
              else
                v63 += 2 * v530;
              --v154;
            }
            while (v154);
            goto LABEL_685;
          case 10:
            v165 = v563[0];
            do
            {
              v166 = v16;
              do
              {
                v167 = v64[1];
                v168 = v63[1];
                v169 = (v167 ^ 0xFF) * *v63 + (v168 ^ 0xFF) * *v64;
                *v64 = (unsigned __int16)(v169 + (v169 >> 8) + 1) >> 8;
                v64[1] = (unsigned __int16)(v168 * (v167 ^ 0xFF)
                                          + (v168 ^ 0xFF) * v167
                                          + ((v168 * (v167 ^ 0xFF) + (v168 ^ 0xFFu) * v167) >> 8)
                                          + 1) >> 8;
                v170 = &v63[2 * v507];
                if ((unint64_t)v170 >= v49)
                  v171 = -(uint64_t)(int)v510;
                else
                  v171 = 0;
                v63 = &v170[2 * v171];
                v64 += 2 * v507;
                --v166;
              }
              while (v166);
              v64 += 2 * v526;
              v172 = v561;
              v173 = &v561[2 * v530];
              if ((unint64_t)v173 >= v528)
                v174 = -(uint64_t)(v530 * v508);
              else
                v174 = 0;
              v175 = &v173[2 * v174];
              v176 = v49 + 2 * v174 + 2 * v530;
              if (v528)
              {
                v49 = v176;
                v172 = v175;
              }
              v561 = v172;
              if (v528)
                v63 = v175;
              else
                v63 += 2 * v530;
              --v165;
            }
            while (v165);
            goto LABEL_685;
          case 11:
            v177 = v563[0];
            while (1)
            {
              v178 = v16;
              do
              {
                if (v12)
                {
                  v179 = v64[1];
                  if (v48)
                    goto LABEL_251;
                }
                else
                {
                  v179 = 255;
                  if (v48)
                  {
LABEL_251:
                    v180 = v63[1];
                    goto LABEL_254;
                  }
                }
                v180 = 255;
LABEL_254:
                v181 = ((v179 - *v64) | (v179 << 16)) + (v180 - *v63) + (v180 << 16);
                v182 = (255 * ((v181 >> 8) & 0x10001)) | v181;
                *v64 = BYTE2(v182) - v182;
                v64[1] = BYTE2(v182);
                v183 = &v63[2 * v507];
                if ((unint64_t)v183 >= v49)
                  v184 = -(uint64_t)(int)v510;
                else
                  v184 = 0;
                v63 = &v183[2 * v184];
                v64 += 2 * v507;
                --v178;
              }
              while (v178);
              v64 += 2 * v526;
              v185 = v561;
              v186 = &v561[2 * v530];
              if ((unint64_t)v186 >= v528)
                v187 = -(uint64_t)(v530 * v508);
              else
                v187 = 0;
              v188 = &v186[2 * v187];
              v189 = v49 + 2 * v187 + 2 * v530;
              if (v528)
              {
                v49 = v189;
                v185 = v188;
              }
              v561 = v185;
              if (v528)
                v63 = v188;
              else
                v63 += 2 * v530;
              if (!--v177)
              {
LABEL_685:
                v563[0] = 0;
                goto LABEL_686;
              }
            }
          case 12:
            do
            {
              v190 = v573[0];
              do
              {
                if (v48)
                  v191 = v63[1];
                else
                  v191 = 255;
                v192 = ((*v63 + *(_WORD *)v64) & 0xFF00FFFF | (HIBYTE(*(_WORD *)v64) << 16))
                     + (v191 << 16);
                v193 = (255 * ((v192 >> 8) & 0x10001)) | v192;
                *v64 = v193;
                v64[1] = BYTE2(v193);
                v194 = &v63[2 * v507];
                if ((unint64_t)v194 >= v49)
                  v195 = -(uint64_t)(int)v510;
                else
                  v195 = 0;
                v63 = &v194[2 * v195];
                v64 += 2 * v507;
                --v190;
              }
              while (v190);
              v64 += 2 * v526;
              v196 = v561;
              v197 = &v561[2 * v530];
              if ((unint64_t)v197 >= v528)
                v198 = -(uint64_t)(v530 * v508);
              else
                v198 = 0;
              v199 = &v197[2 * v198];
              v200 = v49 + 2 * v198 + 2 * v530;
              if (v528)
              {
                v49 = v200;
                v196 = v199;
              }
              v561 = v196;
              if (v528)
                v63 = v199;
              else
                v63 += 2 * v530;
              --v563[0];
            }
            while (v563[0]);
            goto LABEL_686;
          case 13:
            v503 = v33;
            v504 = v34;
            v505 = v35;
            v511 = v16;
            v201 = v563[0];
            while (1)
            {
              v202 = v511;
              do
              {
                if (v48)
                {
                  v203 = v63[1];
                  if (!v63[1])
                    goto LABEL_296;
                  if (!v12)
                  {
LABEL_294:
                    v204 = 255;
                    goto LABEL_295;
                  }
                }
                else
                {
                  v203 = 255;
                  if (!v12)
                    goto LABEL_294;
                }
                v204 = v64[1];
                if (!v64[1])
                {
                  *v64 = *v63;
                  v64[1] = v203;
                  goto LABEL_296;
                }
LABEL_295:
                v558 = v558 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v63;
                v559 = v559 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v64;
                *(_WORD *)v64 = PDAmultiplyPDA(v559, v204, *(_WORD *)v63, v203);
LABEL_296:
                v205 = &v63[2 * v507];
                if ((unint64_t)v205 >= v49)
                  v206 = -(uint64_t)(int)v510;
                else
                  v206 = 0;
                v63 = &v205[2 * v206];
                v64 += 2 * v507;
                --v202;
              }
              while (v202);
              v64 += 2 * v526;
              v207 = v561;
              v208 = &v561[2 * v530];
              v209 = -(uint64_t)(v530 * v508);
              if ((unint64_t)v208 < v528)
                v209 = 0;
              v210 = &v208[2 * v209];
              v211 = v49 + 2 * v209 + 2 * v530;
              if (v528)
              {
                v49 = v211;
                v207 = v210;
              }
              v561 = v207;
              if (v528)
                v63 = v210;
              else
                v63 += 2 * v530;
              v563[0] = --v201;
              if (!v201)
              {
LABEL_634:
                v35 = v505;
                v13 = v506;
                v15 = v500;
                v33 = v503;
                v34 = v504;
                goto LABEL_686;
              }
            }
          case 14:
            v212 = v563[0];
            while (1)
            {
              v213 = v16;
              do
              {
                if (v48)
                {
                  v214 = v63[1];
                  if (!v63[1])
                    goto LABEL_320;
                  if (!v12)
                  {
LABEL_317:
                    v215 = 255;
LABEL_318:
                    v217 = (*v64 ^ 0xFF) * *v63 - *v64 + (*v64 << 8);
                    v218 = 255 * (v215 + v214) - v215 * v214;
                    v216 = (v217 + (v217 >> 8) + 1) >> 8;
                    v214 = (v218 + (v218 >> 8) + 1) >> 8;
                    goto LABEL_319;
                  }
                }
                else
                {
                  v214 = 255;
                  if (!v12)
                    goto LABEL_317;
                }
                v215 = v64[1];
                if (v64[1])
                  goto LABEL_318;
                LOBYTE(v216) = *v63;
LABEL_319:
                *v64 = v216;
                v64[1] = v214;
LABEL_320:
                v219 = &v63[2 * v507];
                if ((unint64_t)v219 >= v49)
                  v220 = -(uint64_t)(int)v510;
                else
                  v220 = 0;
                v63 = &v219[2 * v220];
                v64 += 2 * v507;
                --v213;
              }
              while (v213);
              v64 += 2 * v526;
              v221 = v561;
              v222 = &v561[2 * v530];
              if ((unint64_t)v222 >= v528)
                v223 = -(uint64_t)(v530 * v508);
              else
                v223 = 0;
              v224 = &v222[2 * v223];
              v225 = v49 + 2 * v223 + 2 * v530;
              if (v528)
              {
                v49 = v225;
                v221 = v224;
              }
              v561 = v221;
              if (v528)
                v63 = v224;
              else
                v63 += 2 * v530;
              v563[0] = --v212;
              if (!v212)
                goto LABEL_686;
            }
          case 15:
            v503 = v33;
            v504 = v34;
            v505 = v35;
            v512 = v16;
            v226 = v563[0];
            while (1)
            {
              v227 = v512;
              do
              {
                if (v48)
                {
                  v228 = v63[1];
                  if (!v63[1])
                    goto LABEL_344;
                  if (!v12)
                  {
LABEL_342:
                    v229 = 255;
                    goto LABEL_343;
                  }
                }
                else
                {
                  v228 = 255;
                  if (!v12)
                    goto LABEL_342;
                }
                v229 = v64[1];
                if (!v64[1])
                {
                  *v64 = *v63;
                  v64[1] = v228;
                  goto LABEL_344;
                }
LABEL_343:
                v556 = v556 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v63;
                v557 = v557 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v64;
                *(_WORD *)v64 = PDAoverlayPDA(v557, v229, *(_WORD *)v63, v228);
LABEL_344:
                v230 = &v63[2 * v507];
                if ((unint64_t)v230 >= v49)
                  v231 = -(uint64_t)(int)v510;
                else
                  v231 = 0;
                v63 = &v230[2 * v231];
                v64 += 2 * v507;
                --v227;
              }
              while (v227);
              v64 += 2 * v526;
              v232 = v561;
              v233 = &v561[2 * v530];
              v234 = -(uint64_t)(v530 * v508);
              if ((unint64_t)v233 < v528)
                v234 = 0;
              v235 = &v233[2 * v234];
              v236 = v49 + 2 * v234 + 2 * v530;
              if (v528)
              {
                v49 = v236;
                v232 = v235;
              }
              v561 = v232;
              if (v528)
                v63 = v235;
              else
                v63 += 2 * v530;
              v563[0] = --v226;
              if (!v226)
                goto LABEL_634;
            }
          case 16:
            v503 = v33;
            v504 = v34;
            v505 = v35;
            v513 = v16;
            v237 = v563[0];
            while (1)
            {
              v238 = v513;
              do
              {
                if (v48)
                {
                  v239 = v63[1];
                  if (!v63[1])
                    goto LABEL_367;
                  if (!v12)
                  {
LABEL_365:
                    v240 = 255;
                    goto LABEL_366;
                  }
                }
                else
                {
                  v239 = 255;
                  if (!v12)
                    goto LABEL_365;
                }
                v240 = v64[1];
                if (!v64[1])
                {
                  *v64 = *v63;
                  v64[1] = v239;
                  goto LABEL_367;
                }
LABEL_366:
                v552 = v552 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v63;
                v553 = v553 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v64;
                *(_WORD *)v64 = PDAdarkenPDA(v553, v240, *(_WORD *)v63, v239);
LABEL_367:
                v241 = &v63[2 * v507];
                if ((unint64_t)v241 >= v49)
                  v242 = -(uint64_t)(int)v510;
                else
                  v242 = 0;
                v63 = &v241[2 * v242];
                v64 += 2 * v507;
                --v238;
              }
              while (v238);
              v64 += 2 * v526;
              v243 = v561;
              v244 = &v561[2 * v530];
              v245 = -(uint64_t)(v530 * v508);
              if ((unint64_t)v244 < v528)
                v245 = 0;
              v246 = &v244[2 * v245];
              v247 = v49 + 2 * v245 + 2 * v530;
              if (v528)
              {
                v49 = v247;
                v243 = v246;
              }
              v561 = v243;
              if (v528)
                v63 = v246;
              else
                v63 += 2 * v530;
              v563[0] = --v237;
              if (!v237)
                goto LABEL_634;
            }
          case 17:
            v503 = v33;
            v504 = v34;
            v505 = v35;
            v514 = v16;
            v248 = v563[0];
            while (1)
            {
              v249 = v514;
              do
              {
                if (v48)
                {
                  v250 = v63[1];
                  if (!v63[1])
                    goto LABEL_390;
                  if (!v12)
                  {
LABEL_388:
                    v251 = 255;
                    goto LABEL_389;
                  }
                }
                else
                {
                  v250 = 255;
                  if (!v12)
                    goto LABEL_388;
                }
                v251 = v64[1];
                if (!v64[1])
                {
                  *v64 = *v63;
                  v64[1] = v250;
                  goto LABEL_390;
                }
LABEL_389:
                v554 = v554 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v63;
                v555 = v555 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v64;
                *(_WORD *)v64 = PDAlightenPDA(v555, v251, *(_WORD *)v63, v250);
LABEL_390:
                v252 = &v63[2 * v507];
                if ((unint64_t)v252 >= v49)
                  v253 = -(uint64_t)(int)v510;
                else
                  v253 = 0;
                v63 = &v252[2 * v253];
                v64 += 2 * v507;
                --v249;
              }
              while (v249);
              v64 += 2 * v526;
              v254 = v561;
              v255 = &v561[2 * v530];
              v256 = -(uint64_t)(v530 * v508);
              if ((unint64_t)v255 < v528)
                v256 = 0;
              v257 = &v255[2 * v256];
              v258 = v49 + 2 * v256 + 2 * v530;
              if (v528)
              {
                v49 = v258;
                v254 = v257;
              }
              v561 = v254;
              if (v528)
                v63 = v257;
              else
                v63 += 2 * v530;
              v563[0] = --v248;
              if (!v248)
                goto LABEL_634;
            }
          case 18:
            v503 = v33;
            v504 = v34;
            v505 = v35;
            v515 = v16;
            v259 = v563[0];
            while (1)
            {
              v260 = v515;
              do
              {
                if (v48)
                {
                  v261 = v63[1];
                  if (!v63[1])
                    goto LABEL_413;
                  if (!v12)
                  {
LABEL_411:
                    v262 = 255;
                    goto LABEL_412;
                  }
                }
                else
                {
                  v261 = 255;
                  if (!v12)
                    goto LABEL_411;
                }
                v262 = v64[1];
                if (!v64[1])
                {
                  *v64 = *v63;
                  v64[1] = v261;
                  goto LABEL_413;
                }
LABEL_412:
                v550 = v550 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v63;
                v551 = v551 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v64;
                *(_WORD *)v64 = PDAcolordodgePDA(v551, v262, *(_WORD *)v63, v261);
LABEL_413:
                v263 = &v63[2 * v507];
                if ((unint64_t)v263 >= v49)
                  v264 = -(uint64_t)(int)v510;
                else
                  v264 = 0;
                v63 = &v263[2 * v264];
                v64 += 2 * v507;
                --v260;
              }
              while (v260);
              v64 += 2 * v526;
              v265 = v561;
              v266 = &v561[2 * v530];
              v267 = -(uint64_t)(v530 * v508);
              if ((unint64_t)v266 < v528)
                v267 = 0;
              v268 = &v266[2 * v267];
              v269 = v49 + 2 * v267 + 2 * v530;
              if (v528)
              {
                v49 = v269;
                v265 = v268;
              }
              v561 = v265;
              if (v528)
                v63 = v268;
              else
                v63 += 2 * v530;
              v563[0] = --v259;
              if (!v259)
                goto LABEL_634;
            }
          case 19:
            v503 = v33;
            v504 = v34;
            v505 = v35;
            v516 = v16;
            v270 = v563[0];
            while (1)
            {
              v271 = v516;
              do
              {
                if (v48)
                {
                  v272 = v63[1];
                  if (!v63[1])
                    goto LABEL_436;
                  if (!v12)
                  {
LABEL_434:
                    v273 = 255;
                    goto LABEL_435;
                  }
                }
                else
                {
                  v272 = 255;
                  if (!v12)
                    goto LABEL_434;
                }
                v273 = v64[1];
                if (!v64[1])
                {
                  *v64 = *v63;
                  v64[1] = v272;
                  goto LABEL_436;
                }
LABEL_435:
                v548 = v548 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v63;
                v549 = v549 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v64;
                *(_WORD *)v64 = PDAcolorburnPDA(v549, v273, *(_WORD *)v63, v272);
LABEL_436:
                v274 = &v63[2 * v507];
                if ((unint64_t)v274 >= v49)
                  v275 = -(uint64_t)(int)v510;
                else
                  v275 = 0;
                v63 = &v274[2 * v275];
                v64 += 2 * v507;
                --v271;
              }
              while (v271);
              v64 += 2 * v526;
              v276 = v561;
              v277 = &v561[2 * v530];
              v278 = -(uint64_t)(v530 * v508);
              if ((unint64_t)v277 < v528)
                v278 = 0;
              v279 = &v277[2 * v278];
              v280 = v49 + 2 * v278 + 2 * v530;
              if (v528)
              {
                v49 = v280;
                v276 = v279;
              }
              v561 = v276;
              if (v528)
                v63 = v279;
              else
                v63 += 2 * v530;
              v563[0] = --v270;
              if (!v270)
                goto LABEL_634;
            }
          case 20:
            v503 = v33;
            v504 = v34;
            v505 = v35;
            v517 = v16;
            v281 = v563[0];
            while (1)
            {
              v282 = v517;
              do
              {
                if (v48)
                {
                  v283 = v63[1];
                  if (!v63[1])
                    goto LABEL_459;
                  if (!v12)
                  {
LABEL_457:
                    v284 = 255;
                    goto LABEL_458;
                  }
                }
                else
                {
                  v283 = 255;
                  if (!v12)
                    goto LABEL_457;
                }
                v284 = v64[1];
                if (!v64[1])
                {
                  *v64 = *v63;
                  v64[1] = v283;
                  goto LABEL_459;
                }
LABEL_458:
                v544 = v544 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v63;
                v545 = v545 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v64;
                *(_WORD *)v64 = PDAsoftlightPDA(v545, v284, *(_WORD *)v63, v283);
LABEL_459:
                v285 = &v63[2 * v507];
                if ((unint64_t)v285 >= v49)
                  v286 = -(uint64_t)(int)v510;
                else
                  v286 = 0;
                v63 = &v285[2 * v286];
                v64 += 2 * v507;
                --v282;
              }
              while (v282);
              v64 += 2 * v526;
              v287 = v561;
              v288 = &v561[2 * v530];
              v289 = -(uint64_t)(v530 * v508);
              if ((unint64_t)v288 < v528)
                v289 = 0;
              v290 = &v288[2 * v289];
              v291 = v49 + 2 * v289 + 2 * v530;
              if (v528)
              {
                v49 = v291;
                v287 = v290;
              }
              v561 = v287;
              if (v528)
                v63 = v290;
              else
                v63 += 2 * v530;
              v563[0] = --v281;
              if (!v281)
                goto LABEL_634;
            }
          case 21:
            v503 = v33;
            v504 = v34;
            v505 = v35;
            v518 = v16;
            v292 = v563[0];
            while (1)
            {
              v293 = v518;
              do
              {
                if (v48)
                {
                  v294 = v63[1];
                  if (!v63[1])
                    goto LABEL_482;
                  if (!v12)
                  {
LABEL_480:
                    v295 = 255;
                    goto LABEL_481;
                  }
                }
                else
                {
                  v294 = 255;
                  if (!v12)
                    goto LABEL_480;
                }
                v295 = v64[1];
                if (!v64[1])
                {
                  *v64 = *v63;
                  v64[1] = v294;
                  goto LABEL_482;
                }
LABEL_481:
                v546 = v546 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v63;
                v547 = v547 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v64;
                *(_WORD *)v64 = PDAhardlightPDA(v547, v295, *(_WORD *)v63, v294);
LABEL_482:
                v296 = &v63[2 * v507];
                if ((unint64_t)v296 >= v49)
                  v297 = -(uint64_t)(int)v510;
                else
                  v297 = 0;
                v63 = &v296[2 * v297];
                v64 += 2 * v507;
                --v293;
              }
              while (v293);
              v64 += 2 * v526;
              v298 = v561;
              v299 = &v561[2 * v530];
              v300 = -(uint64_t)(v530 * v508);
              if ((unint64_t)v299 < v528)
                v300 = 0;
              v301 = &v299[2 * v300];
              v302 = v49 + 2 * v300 + 2 * v530;
              if (v528)
              {
                v49 = v302;
                v298 = v301;
              }
              v561 = v298;
              if (v528)
                v63 = v301;
              else
                v63 += 2 * v530;
              v563[0] = --v292;
              if (!v292)
                goto LABEL_634;
            }
          case 22:
            v503 = v33;
            v504 = v34;
            v505 = v35;
            v519 = v16;
            v303 = v563[0];
            while (1)
            {
              v304 = v519;
              do
              {
                if (v48)
                {
                  v305 = v63[1];
                  if (!v63[1])
                    goto LABEL_505;
                  if (!v12)
                  {
LABEL_503:
                    v306 = 255;
                    goto LABEL_504;
                  }
                }
                else
                {
                  v305 = 255;
                  if (!v12)
                    goto LABEL_503;
                }
                v306 = v64[1];
                if (!v64[1])
                {
                  *v64 = *v63;
                  v64[1] = v305;
                  goto LABEL_505;
                }
LABEL_504:
                v542 = v542 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v63;
                v543 = v543 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v64;
                *(_WORD *)v64 = PDAdifferencePDA(v543, v306, *(_WORD *)v63, v305);
LABEL_505:
                v307 = &v63[2 * v507];
                if ((unint64_t)v307 >= v49)
                  v308 = -(uint64_t)(int)v510;
                else
                  v308 = 0;
                v63 = &v307[2 * v308];
                v64 += 2 * v507;
                --v304;
              }
              while (v304);
              v64 += 2 * v526;
              v309 = v561;
              v310 = &v561[2 * v530];
              v311 = -(uint64_t)(v530 * v508);
              if ((unint64_t)v310 < v528)
                v311 = 0;
              v312 = &v310[2 * v311];
              v313 = v49 + 2 * v311 + 2 * v530;
              if (v528)
              {
                v49 = v313;
                v309 = v312;
              }
              v561 = v309;
              if (v528)
                v63 = v312;
              else
                v63 += 2 * v530;
              v563[0] = --v303;
              if (!v303)
                goto LABEL_634;
            }
          case 23:
            v314 = v563[0];
            while (1)
            {
              v315 = v16;
              do
              {
                if (v48)
                {
                  v316 = v63[1];
                  if (!v63[1])
                    goto LABEL_529;
                  if (!v12)
                  {
LABEL_526:
                    v317 = 255;
LABEL_527:
                    v319 = 255 * (*v63 + *v64) - 2 * *v64 * *v63;
                    v320 = 255 * (v317 + v316) - v317 * v316;
                    v318 = (v319 + (v319 >> 8) + 1) >> 8;
                    v316 = (v320 + (v320 >> 8) + 1) >> 8;
                    goto LABEL_528;
                  }
                }
                else
                {
                  v316 = 255;
                  if (!v12)
                    goto LABEL_526;
                }
                v317 = v64[1];
                if (v64[1])
                  goto LABEL_527;
                LOBYTE(v318) = *v63;
LABEL_528:
                *v64 = v318;
                v64[1] = v316;
LABEL_529:
                v321 = &v63[2 * v507];
                if ((unint64_t)v321 >= v49)
                  v322 = -(uint64_t)(int)v510;
                else
                  v322 = 0;
                v63 = &v321[2 * v322];
                v64 += 2 * v507;
                --v315;
              }
              while (v315);
              v64 += 2 * v526;
              v323 = v561;
              v324 = &v561[2 * v530];
              if ((unint64_t)v324 >= v528)
                v325 = -(uint64_t)(v530 * v508);
              else
                v325 = 0;
              v326 = &v324[2 * v325];
              v327 = v49 + 2 * v325 + 2 * v530;
              if (v528)
              {
                v49 = v327;
                v323 = v326;
              }
              v561 = v323;
              if (v528)
                v63 = v326;
              else
                v63 += 2 * v530;
              v563[0] = --v314;
              if (!v314)
                goto LABEL_686;
            }
          case 24:
            v503 = v33;
            v504 = v34;
            v505 = v35;
            v520 = v16;
            v328 = v563[0];
            while (1)
            {
              v329 = v520;
              do
              {
                if (v48)
                {
                  v330 = v63[1];
                  if (!v63[1])
                    goto LABEL_553;
                  if (!v12)
                  {
LABEL_551:
                    v331 = 255;
                    goto LABEL_552;
                  }
                }
                else
                {
                  v330 = 255;
                  if (!v12)
                    goto LABEL_551;
                }
                v331 = v64[1];
                if (!v64[1])
                {
                  *v64 = *v63;
                  v64[1] = v330;
                  goto LABEL_553;
                }
LABEL_552:
                v540 = v540 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v63;
                v541 = v541 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v64;
                *(_WORD *)v64 = PDAhuePDA(v541, v331, *(_WORD *)v63, v330);
LABEL_553:
                v332 = &v63[2 * v507];
                if ((unint64_t)v332 >= v49)
                  v333 = -(uint64_t)(int)v510;
                else
                  v333 = 0;
                v63 = &v332[2 * v333];
                v64 += 2 * v507;
                --v329;
              }
              while (v329);
              v64 += 2 * v526;
              v334 = v561;
              v335 = &v561[2 * v530];
              v336 = -(uint64_t)(v530 * v508);
              if ((unint64_t)v335 < v528)
                v336 = 0;
              v337 = &v335[2 * v336];
              v338 = v49 + 2 * v336 + 2 * v530;
              if (v528)
              {
                v49 = v338;
                v334 = v337;
              }
              v561 = v334;
              if (v528)
                v63 = v337;
              else
                v63 += 2 * v530;
              v563[0] = --v328;
              if (!v328)
                goto LABEL_634;
            }
          case 25:
            v503 = v33;
            v504 = v34;
            v505 = v35;
            v521 = v16;
            v339 = v563[0];
            while (1)
            {
              v340 = v521;
              do
              {
                if (v48)
                {
                  v341 = v63[1];
                  if (!v63[1])
                    goto LABEL_576;
                  if (!v12)
                  {
LABEL_574:
                    v342 = 255;
                    goto LABEL_575;
                  }
                }
                else
                {
                  v341 = 255;
                  if (!v12)
                    goto LABEL_574;
                }
                v342 = v64[1];
                if (!v64[1])
                {
                  *v64 = *v63;
                  v64[1] = v341;
                  goto LABEL_576;
                }
LABEL_575:
                v538 = v538 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v63;
                v539 = v539 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v64;
                *(_WORD *)v64 = PDAhuePDA(v539, v342, *(_WORD *)v63, v341);
LABEL_576:
                v343 = &v63[2 * v507];
                if ((unint64_t)v343 >= v49)
                  v344 = -(uint64_t)(int)v510;
                else
                  v344 = 0;
                v63 = &v343[2 * v344];
                v64 += 2 * v507;
                --v340;
              }
              while (v340);
              v64 += 2 * v526;
              v345 = v561;
              v346 = &v561[2 * v530];
              v347 = -(uint64_t)(v530 * v508);
              if ((unint64_t)v346 < v528)
                v347 = 0;
              v348 = &v346[2 * v347];
              v349 = v49 + 2 * v347 + 2 * v530;
              if (v528)
              {
                v49 = v349;
                v345 = v348;
              }
              v561 = v345;
              if (v528)
                v63 = v348;
              else
                v63 += 2 * v530;
              v563[0] = --v339;
              if (!v339)
                goto LABEL_634;
            }
          case 26:
            v503 = v33;
            v504 = v34;
            v505 = v35;
            v522 = v16;
            v350 = v563[0];
            while (1)
            {
              v351 = v522;
              do
              {
                if (v48)
                {
                  v352 = v63[1];
                  if (!v63[1])
                    goto LABEL_599;
                  if (!v12)
                  {
LABEL_597:
                    v353 = 255;
                    goto LABEL_598;
                  }
                }
                else
                {
                  v352 = 255;
                  if (!v12)
                    goto LABEL_597;
                }
                v353 = v64[1];
                if (!v64[1])
                {
                  *v64 = *v63;
                  v64[1] = v352;
                  goto LABEL_599;
                }
LABEL_598:
                v536 = v536 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v63;
                v534 = v534 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v64;
                *(_WORD *)v64 = PDAhuePDA(*(_WORD *)v63, v352, *(_WORD *)v64, v353);
LABEL_599:
                v354 = &v63[2 * v507];
                if ((unint64_t)v354 >= v49)
                  v355 = -(uint64_t)(int)v510;
                else
                  v355 = 0;
                v63 = &v354[2 * v355];
                v64 += 2 * v507;
                --v351;
              }
              while (v351);
              v64 += 2 * v526;
              v356 = v561;
              v357 = &v561[2 * v530];
              v358 = -(uint64_t)(v530 * v508);
              if ((unint64_t)v357 < v528)
                v358 = 0;
              v359 = &v357[2 * v358];
              v360 = v49 + 2 * v358 + 2 * v530;
              if (v528)
              {
                v49 = v360;
                v356 = v359;
              }
              v561 = v356;
              if (v528)
                v63 = v359;
              else
                v63 += 2 * v530;
              v563[0] = --v350;
              if (!v350)
                goto LABEL_634;
            }
          case 27:
            v503 = v33;
            v504 = v34;
            v505 = v35;
            v523 = v16;
            v361 = v563[0];
            break;
          default:
            goto LABEL_686;
        }
        break;
      }
LABEL_613:
      v362 = v523;
      while (1)
      {
        if (v48)
        {
          v363 = v63[1];
          if (!v63[1])
            goto LABEL_622;
          if (!v12)
            goto LABEL_620;
        }
        else
        {
          v363 = 255;
          if (!v12)
          {
LABEL_620:
            v364 = 255;
LABEL_621:
            v531 = v531 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v63;
            v532 = v532 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v64;
            *(_WORD *)v64 = PDAhuePDA(v532, v364, *(_WORD *)v63, v363);
            goto LABEL_622;
          }
        }
        v364 = v64[1];
        if (v64[1])
          goto LABEL_621;
        *v64 = *v63;
        v64[1] = v363;
LABEL_622:
        v365 = &v63[2 * v507];
        if ((unint64_t)v365 >= v49)
          v366 = -(uint64_t)(int)v510;
        else
          v366 = 0;
        v63 = &v365[2 * v366];
        v64 += 2 * v507;
        if (!--v362)
        {
          v64 += 2 * v526;
          v367 = v561;
          v368 = &v561[2 * v530];
          v369 = -(uint64_t)(v530 * v508);
          if ((unint64_t)v368 < v528)
            v369 = 0;
          v370 = &v368[2 * v369];
          v371 = v49 + 2 * v369 + 2 * v530;
          if (v528)
          {
            v49 = v371;
            v367 = v370;
          }
          v561 = v367;
          if (v528)
            v63 = v370;
          else
            v63 += 2 * v530;
          v563[0] = --v361;
          if (!v361)
            goto LABEL_634;
          goto LABEL_613;
        }
      }
    }
    v507 = v41;
    v508 = 0;
    v65 = v41 * (int)v16;
    v526 = v34 - v65;
    v49 = -1;
    v38 = v510;
    goto LABEL_46;
  }
  v21 = *(_DWORD *)(v5 + 128);
  if ((v21 | 8) == 8)
  {
    if ((*(_DWORD *)v5 & 0xFF00) == 0x400)
      GRAYa8_mark_constmask(v5, v13, v6, v7, v8, v9, v10);
    else
      GRAYa8_mark_pixelmask(v5, v13);
    return 1;
  }
  v42 = *(_DWORD *)(v5 + 112);
  v43 = *(_DWORD *)(v5 + 116);
  v44 = (v42 + 15) & 0xFFFFFFF0;
  v45 = v44 * v43;
  if ((int)v45 <= 4096)
  {
    v47 = v573;
  }
  else
  {
    v46 = malloc_type_malloc(v45, 0x515726E6uLL);
    if (!v46)
      return 1;
    v47 = v46;
    v20 = *(uint16x4_t **)(v15 + 136);
    v21 = *(_DWORD *)(v15 + 128);
  }
  CGSConvertBitsToMask(v20, *(_DWORD *)(v15 + 124), v47, v44, v42, v43, v21);
  v54 = *(_OWORD *)(v15 + 112);
  v569 = *(_OWORD *)(v15 + 96);
  v570 = v54;
  v55 = *(_OWORD *)(v15 + 144);
  v571 = *(_OWORD *)(v15 + 128);
  v572 = v55;
  v56 = *(_OWORD *)(v15 + 48);
  v565 = *(_OWORD *)(v15 + 32);
  v566 = v56;
  v57 = *(_OWORD *)(v15 + 80);
  v567 = *(_OWORD *)(v15 + 64);
  v568 = v57;
  v58 = *(_OWORD *)v15;
  v59 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)v563 = *(_OWORD *)v15;
  v564 = v59;
  HIDWORD(v570) = (v42 + 15) & 0xFFFFFFF0;
  *((_QWORD *)&v571 + 1) = v47;
  if (BYTE1(v563[0]) << 8 == 1024)
    GRAYa8_mark_constmask((uint64_t)v563, v506, *(double *)&v58, *(int16x4_t *)&v59, v51, v52, v53);
  else
    GRAYa8_mark_pixelmask((uint64_t)v563, v506);
  if (v47 != (_BYTE *)v573)
  {
    v60 = v47;
LABEL_956:
    free(v60);
  }
  return 1;
}

uint64_t GRAYa8_mark_constmask(uint64_t result, int a2, double a3, int16x4_t a4, double a5, uint8x8_t a6, int16x8_t a7)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  __int8 *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  BOOL v42;
  unsigned __int8 v43;
  int v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint16x4_t v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  int v54;
  uint16x4_t v55;
  unint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint32x4_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  int v68;
  int32x2_t v69;
  int v70;
  int v71;
  uint32x2_t v72;
  uint32x2_t v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  int v77;
  int32x2_t v78;
  int v79;
  int v80;
  uint32x2_t v81;
  uint32x2_t v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  unsigned int v100;
  int v101;
  int v102;
  unsigned int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  _BYTE *v108;
  int v109;
  int v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  unsigned int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  unsigned int v123;
  int v124;
  int v125;
  unsigned int v126;
  int v127;
  int32x2_t v128;
  int v129;
  uint32x2_t v130;
  uint32x2_t v131;
  uint32x2_t v132;
  int v133;
  int32x2_t v134;
  int32x2_t v135;
  int v136;
  uint32x2_t v137;
  uint32x2_t v138;
  int v139;
  unsigned int v140;
  int32x2_t v141;
  int v142;
  uint32x2_t v143;
  uint32x2_t v144;
  uint32x2_t v145;
  int v146;
  int32x2_t v147;
  int32x2_t v148;
  int v149;
  uint32x2_t v150;
  uint32x2_t v151;
  uint32x2_t v152;
  int v153;
  int32x2_t v154;
  int32x2_t v155;
  int v156;
  uint32x2_t v157;
  uint32x2_t v158;
  uint32x2_t v159;
  int v160;
  int32x2_t v161;
  int32x2_t v162;
  int v163;
  uint32x2_t v164;
  uint32x2_t v165;
  uint32x2_t v166;
  int v167;
  int32x2_t v168;
  __int8 v169;
  unsigned __int8 v170;
  int v171;
  unint64_t v172;
  int v173;
  unsigned __int8 v174;
  BOOL v175;
  int v176;
  int32x2_t v177;
  int v178;
  uint32x2_t v179;
  uint32x2_t v180;
  uint32x2_t v181;
  int v182;
  int32x2_t v183;
  int32x2_t v184;
  int v185;
  uint32x2_t v186;
  uint32x2_t v187;
  uint32x2_t v188;
  int v189;
  int32x2_t v190;
  int32x2_t v191;
  int v192;
  uint32x2_t v193;
  uint32x2_t v194;
  uint32x2_t v195;
  int v196;
  int32x2_t v197;
  int v198;
  unsigned int v199;
  BOOL v200;
  int v201;
  unsigned int v202;
  unsigned int v203;
  int32x2_t v204;
  int v205;
  uint32x2_t v206;
  uint32x2_t v207;
  uint32x2_t v208;
  int v209;
  int32x2_t v210;
  int32x2_t v211;
  int v212;
  uint32x2_t v213;
  uint32x2_t v214;
  uint32x2_t v215;
  int v216;
  int32x2_t v217;
  int32x2_t v218;
  int v219;
  uint32x2_t v220;
  uint32x2_t v221;
  uint32x2_t v222;
  int v223;
  int32x2_t v224;
  int32x2_t v225;
  int v226;
  uint32x2_t v227;
  uint32x2_t v228;
  uint32x2_t v229;
  int v230;
  int32x2_t v231;
  int v232;
  uint64_t v233;

  v9 = *(_QWORD *)(result + 136);
  if (!v9)
    return result;
  v11 = *(_DWORD *)(result + 4);
  v10 = *(_DWORD *)(result + 8);
  v12 = *(_QWORD *)(result + 48);
  v13 = *(__int8 **)(result + 88);
  a4.i8[0] = *v13;
  a4.i8[4] = v13[1];
  v14 = (unint64_t)*(int *)(result + 28) >> 1;
  v15 = (unsigned __int8 *)(*(_QWORD *)(result + 40) + 2 * (*(int *)(result + 12) + v14 * *(int *)(result + 16)));
  v16 = *(int *)(result + 124);
  v17 = v9 + *(int *)(result + 104) + *(int *)(result + 108) * (uint64_t)(int)v16;
  v233 = v16 - v11;
  v18 = v14 - v11;
  switch(a2)
  {
    case 0:
      do
      {
        v19 = v11;
        do
        {
          v20 = *(unsigned __int8 *)v17;
          if (*(_BYTE *)v17)
          {
            if (v20 == 255)
            {
              *(_WORD *)v15 = 0;
            }
            else
            {
              v21 = v20 ^ 0xFF;
              *v15 = (unsigned __int16)(*v15 * (_WORD)v21 + ((*v15 * v21) >> 8) + 1) >> 8;
              v15[1] = (unsigned __int16)(v15[1] * (_WORD)v21 + ((v15[1] * v21) >> 8) + 1) >> 8;
            }
          }
          ++v17;
          v15 += 2;
          --v19;
        }
        while (v19);
        v17 += v233;
        v15 += 2 * v18;
        --v10;
      }
      while (v10);
      return result;
    case 1:
      v22 = -1;
      v23 = v17 & 3;
      if ((v17 & 3) != 0)
      {
        v11 += v23;
        v22 = -1 << (8 * v23);
        v24 = v17 & 3;
        v17 &= 0xFFFFFFFFFFFFFFFCLL;
        v15 -= 2 * v24;
      }
      v25 = ((_BYTE)v11 + (_BYTE)v17) & 3;
      if ((((_BYTE)v11 + (_BYTE)v17) & 3) != 0)
      {
        v26 = 4 - v25;
        v23 += v26;
        v27 = 0xFFFFFFFF >> (8 * v26);
        if (v11 >= 4)
          v25 = v27;
        else
          v25 = 0;
        if (v11 >= 4)
          v27 = -1;
        v22 &= v27;
      }
      v28 = v233 - v23;
      v29 = v18 - v23;
      v30 = *v13;
      v31 = v13[1];
      do
      {
        v32 = *(_DWORD *)v17 & v22;
        v33 = v11 >> 2;
        result = v25;
        if (!v32)
          goto LABEL_40;
LABEL_22:
        if (v32 == -1)
        {
          *v15 = a4.i8[0];
          v15[1] = a4.u8[4];
          v15[2] = a4.i8[0];
          v15[3] = a4.u8[4];
          v15[4] = a4.i8[0];
          v15[5] = a4.u8[4];
LABEL_37:
          v15[6] = a4.i8[0];
          v15[7] = a4.u8[4];
          goto LABEL_40;
        }
        while (1)
        {
          if ((_BYTE)v32)
          {
            if (v32 == 255)
            {
              *v15 = a4.i8[0];
              v15[1] = a4.u8[4];
            }
            else
            {
              v34 = v32 ^ 0xFF;
              *v15 = ((unsigned __int16)(v34 * *v15 + ((v34 * *v15) >> 8) + 1) >> 8)
                   + ((unsigned __int16)(v32 * (_WORD)v30
                                       + ((v32 * v30) >> 8)
                                       + 1) >> 8);
              v15[1] = ((unsigned __int16)(v34 * v15[1] + ((v34 * v15[1]) >> 8) + 1) >> 8)
                     + ((unsigned __int16)(v32 * (_WORD)v31
                                         + ((v32 * v31) >> 8)
                                         + 1) >> 8);
            }
          }
          if (BYTE1(v32))
          {
            if (BYTE1(v32) == 255)
            {
              v15[2] = a4.i8[0];
              v15[3] = a4.u8[4];
            }
            else
            {
              v35 = BYTE1(v32) ^ 0xFF;
              v15[2] = ((unsigned __int16)(v35 * v15[2] + ((v35 * v15[2]) >> 8) + 1) >> 8)
                     + ((unsigned __int16)(BYTE1(v32) * (_WORD)v30 + ((BYTE1(v32) * v30) >> 8) + 1) >> 8);
              v15[3] = ((unsigned __int16)(v35 * v15[3] + ((v35 * v15[3]) >> 8) + 1) >> 8)
                     + ((unsigned __int16)(BYTE1(v32) * (_WORD)v31 + ((BYTE1(v32) * v31) >> 8) + 1) >> 8);
            }
          }
          if (BYTE2(v32))
          {
            if (BYTE2(v32) == 255)
            {
              v15[4] = a4.i8[0];
              v15[5] = a4.u8[4];
            }
            else
            {
              v36 = BYTE2(v32) ^ 0xFF;
              v15[4] = ((unsigned __int16)(v36 * v15[4] + ((v36 * v15[4]) >> 8) + 1) >> 8)
                     + ((unsigned __int16)(BYTE2(v32) * (_WORD)v30 + ((BYTE2(v32) * v30) >> 8) + 1) >> 8);
              v15[5] = ((unsigned __int16)(v36 * v15[5] + ((v36 * v15[5]) >> 8) + 1) >> 8)
                     + ((unsigned __int16)(BYTE2(v32) * (_WORD)v31 + ((BYTE2(v32) * v31) >> 8) + 1) >> 8);
            }
          }
          v37 = HIBYTE(v32);
          if (v37 == 255)
            goto LABEL_37;
          if (v37)
          {
            v38 = v37 * v30 + ((v37 * v30) >> 8) + 1;
            v39 = v37 * v31 + ((v37 * v31) >> 8) + 1;
            v40 = v37 ^ 0xFF;
            v15[6] = ((unsigned __int16)(v40 * v15[6] + ((v40 * v15[6]) >> 8) + 1) >> 8) + BYTE1(v38);
            v15[7] = ((unsigned __int16)(v40 * v15[7] + ((v40 * v15[7]) >> 8) + 1) >> 8) + BYTE1(v39);
          }
LABEL_40:
          while (1)
          {
            v41 = v33;
            v15 += 8;
            --v33;
            v17 += 4;
            if (v41 < 2)
              break;
            v32 = *(_DWORD *)v17;
            if (*(_DWORD *)v17)
              goto LABEL_22;
          }
          if (!(_DWORD)result)
            break;
          result = 0;
          v32 = *(_DWORD *)v17 & v25;
        }
        v17 += v28;
        v15 += 2 * v29;
        v42 = __OFSUB__(v10--, 1);
      }
      while (!((v10 < 0) ^ v42 | (v10 == 0)));
      return result;
    case 2:
      v43 = v13[1];
      v44 = -1;
      v45 = v17 & 3;
      if ((v17 & 3) != 0)
      {
        v11 += v45;
        v44 = -1 << (8 * v45);
        v46 = v17 & 3;
        v17 &= 0xFFFFFFFFFFFFFFFCLL;
        v15 -= 2 * v46;
      }
      v47 = ((_BYTE)v11 + (_BYTE)v17) & 3;
      if ((((_BYTE)v11 + (_BYTE)v17) & 3) != 0)
      {
        v48 = 4 - v47;
        v45 += v48;
        v49 = 0xFFFFFFFF >> (8 * v48);
        if (v11 >= 4)
          v47 = 0xFFFFFFFF >> (8 * v48);
        else
          v47 = 0;
        if (v11 >= 4)
          v49 = -1;
        v44 &= v49;
      }
      v50 = (uint16x4_t)vuzp1_s16(a4, a4);
      v51 = v233 - v45;
      v52 = ~a4.i8[4];
      v53 = a4.u8[0];
      v54 = v13[1];
      v55 = (uint16x4_t)vdup_n_s16(v52);
      v56 = v18 - v45;
      while (2)
      {
        v57 = *(_DWORD *)v17 & v44;
        LODWORD(result) = v11 >> 2;
        v58 = v47;
        if (!v57)
          goto LABEL_70;
LABEL_59:
        if (v57 == -1)
        {
          a6.i32[0] = *(_DWORD *)v15;
          v59 = vmull_u16(v55, (uint16x4_t)*(_OWORD *)&vmovl_u8(a6));
          *(uint16x4_t *)a7.i8 = vsra_n_u16(v50, (uint16x4_t)vadd_s16(vmovn_s32((int32x4_t)vsraq_n_u32(v59, v59, 8uLL)), (int16x4_t)0x1000100010001), 8uLL);
          a6 = (uint8x8_t)vmovn_s16(a7);
          *(_DWORD *)v15 = a6.i32[0];
          v15[4] = v53 + ((unsigned __int16)(v15[4] * (_WORD)v52 + ((v15[4] * v52) >> 8) + 1) >> 8);
          v15[5] = v43 + ((unsigned __int16)(v15[5] * (_WORD)v52 + ((v15[5] * v52) >> 8) + 1) >> 8);
          v15[6] = v53 + ((unsigned __int16)(v15[6] * (_WORD)v52 + ((v15[6] * v52) >> 8) + 1) >> 8);
          v60 = (v15[7] * v52 + ((v15[7] * v52) >> 8) + 1) >> 8;
          LOBYTE(v61) = v43;
LABEL_69:
          v15[7] = v61 + v60;
          goto LABEL_70;
        }
        while (1)
        {
          if ((_BYTE)v57)
          {
            v62 = v57 * v54 + ((v57 * v54) >> 8) + 1;
            *v15 = ((unsigned __int16)(~(v62 >> 8) * *v15
                                     + ((~(v62 >> 8) * *v15) >> 8)
                                     + 1) >> 8)
                 + ((unsigned __int16)(v57 * (_WORD)v53
                                     + ((v57 * v53) >> 8)
                                     + 1) >> 8);
            v15[1] = ((unsigned __int16)(~(v62 >> 8) * v15[1]
                                       + ((~(v62 >> 8) * v15[1]) >> 8)
                                       + 1) >> 8)
                   + BYTE1(v62);
          }
          if ((v57 & 0xFF00) != 0)
          {
            v63 = BYTE1(v57) * v54 + ((BYTE1(v57) * v54) >> 8) + 1;
            v15[2] = ((unsigned __int16)(~(v63 >> 8) * v15[2]
                                       + ((~(v63 >> 8) * v15[2]) >> 8)
                                       + 1) >> 8)
                   + ((unsigned __int16)(BYTE1(v57) * (_WORD)v53 + ((BYTE1(v57) * v53) >> 8) + 1) >> 8);
            v15[3] = ((unsigned __int16)(~(v63 >> 8) * v15[3]
                                       + ((~(v63 >> 8) * v15[3]) >> 8)
                                       + 1) >> 8)
                   + BYTE1(v63);
          }
          if ((v57 & 0xFF0000) != 0)
          {
            v64 = BYTE2(v57) * v54 + ((BYTE2(v57) * v54) >> 8) + 1;
            v15[4] = ((unsigned __int16)(~(v64 >> 8) * v15[4]
                                       + ((~(v64 >> 8) * v15[4]) >> 8)
                                       + 1) >> 8)
                   + ((unsigned __int16)(BYTE2(v57) * (_WORD)v53 + ((BYTE2(v57) * v53) >> 8) + 1) >> 8);
            v15[5] = ((unsigned __int16)(~(v64 >> 8) * v15[5]
                                       + ((~(v64 >> 8) * v15[5]) >> 8)
                                       + 1) >> 8)
                   + BYTE1(v64);
          }
          v65 = HIBYTE(v57);
          if (v65)
          {
            v66 = v65 * v53 + ((v65 * v53) >> 8) + 1;
            v60 = (v65 * v54 + ((v65 * v54) >> 8) + 1) >> 8;
            v67 = ~(_BYTE)v60;
            v15[6] = ((unsigned __int16)(v67 * v15[6] + ((v67 * v15[6]) >> 8) + 1) >> 8) + BYTE1(v66);
            v61 = (v67 * v15[7] + ((v67 * v15[7]) >> 8) + 1) >> 8;
            goto LABEL_69;
          }
LABEL_70:
          while (1)
          {
            v68 = result;
            v15 += 8;
            result = (result - 1);
            v17 += 4;
            if (v68 < 2)
              break;
            v57 = *(_DWORD *)v17;
            if (*(_DWORD *)v17)
              goto LABEL_59;
          }
          if (!v58)
            break;
          v58 = 0;
          v57 = *(_DWORD *)v17 & v47;
        }
        v17 += v51;
        v15 += 2 * v56;
        v42 = __OFSUB__(v10--, 1);
        if (!((v10 < 0) ^ v42 | (v10 == 0)))
          continue;
        return result;
      }
    case 3:
      v69 = (int32x2_t)vand_s8((int8x8_t)a4, (int8x8_t)0xFF000000FFLL);
      do
      {
        v70 = v11;
        do
        {
          v71 = *(unsigned __int8 *)v17;
          if (*(_BYTE *)v17)
          {
            if (v71 == 255)
            {
              v72 = (uint32x2_t)vmul_s32(vdup_n_s32(v15[1]), v69);
              v73 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v72, v72, 8uLL), (int32x2_t)0x100000001), 8uLL);
              LOBYTE(v74) = v73.i8[4];
              *v15 = v73.i8[0];
            }
            else
            {
              v75 = v15[1];
              v76 = (v75 * v71 + ((v75 * v71) >> 8) + 1) >> 8;
              v77 = v71 ^ 0xFF;
              *v15 = ((unsigned __int16)(v76 * v69.i16[0] + ((v76 * v69.i32[0]) >> 8) + 1) >> 8)
                   + ((unsigned __int16)(*v15 * (_WORD)v77 + ((*v15 * v77) >> 8) + 1) >> 8);
              v74 = ((v76 * v69.i32[1] + ((v76 * v69.i32[1]) >> 8) + 1) >> 8)
                  + ((v75 * v77 + ((v75 * v77) >> 8) + 1) >> 8);
            }
            v15[1] = v74;
          }
          ++v17;
          v15 += 2;
          --v70;
        }
        while (v70);
        v17 += v233;
        v15 += 2 * v18;
        --v10;
      }
      while (v10);
      return result;
    case 4:
      v78 = (int32x2_t)vand_s8((int8x8_t)a4, (int8x8_t)0xFF000000FFLL);
      do
      {
        v79 = v11;
        do
        {
          v80 = *(unsigned __int8 *)v17;
          if (*(_BYTE *)v17)
          {
            if (v80 == 255)
            {
              v81 = (uint32x2_t)vmul_s32(vdup_n_s32(v15[1] ^ 0xFFu), v78);
              v82 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v81, v81, 8uLL), (int32x2_t)0x100000001), 8uLL);
              LOBYTE(v83) = v82.i8[4];
              *v15 = v82.i8[0];
            }
            else
            {
              v84 = v15[1];
              v85 = ((v84 ^ 0xFF) * v80 + (((v84 ^ 0xFFu) * v80) >> 8) + 1) >> 8;
              v86 = v80 ^ 0xFF;
              *v15 = ((unsigned __int16)(v85 * v78.i16[0] + ((v85 * v78.i32[0]) >> 8) + 1) >> 8)
                   + ((unsigned __int16)(*v15 * (_WORD)v86 + ((*v15 * v86) >> 8) + 1) >> 8);
              v83 = ((v85 * v78.i32[1] + ((v85 * v78.i32[1]) >> 8) + 1) >> 8)
                  + ((v84 * v86 + ((v84 * v86) >> 8) + 1) >> 8);
            }
            v15[1] = v83;
          }
          ++v17;
          v15 += 2;
          --v79;
        }
        while (v79);
        v17 += v233;
        v15 += 2 * v18;
        --v10;
      }
      while (v10);
      return result;
    case 5:
      do
      {
        v87 = v11;
        do
        {
          v88 = *(unsigned __int8 *)v17;
          if (*(_BYTE *)v17)
          {
            v89 = v88 * a4.u8[0] + ((v88 * a4.u8[0]) >> 8) + 1;
            v90 = v88 * a4.u8[4] + ((v88 * a4.u8[4]) >> 8) + 1;
            v91 = v90 >> 8;
            v92 = v15[1];
            v93 = BYTE1(v90) ^ 0xFF;
            *v15 = (unsigned __int16)(BYTE1(v89) * (_WORD)v92
                                    + v93 * *v15
                                    + ((BYTE1(v89) * v92 + v93 * *v15) >> 8)
                                    + 1) >> 8;
            v15[1] = (unsigned __int16)((v93 + v91) * v92
                                      + (((v93 + v91) * v92) >> 8)
                                      + 1) >> 8;
          }
          ++v17;
          v15 += 2;
          --v87;
        }
        while (v87);
        v17 += v233;
        v15 += 2 * v18;
        --v10;
      }
      while (v10);
      return result;
    case 6:
      do
      {
        v94 = v11;
        do
        {
          v95 = *(unsigned __int8 *)v17;
          if (*(_BYTE *)v17)
          {
            v96 = v15[1];
            if ((_BYTE)v96 != 0xFF)
            {
              if (~(_BYTE)v96 == 255)
              {
                v97 = (v95 * a4.u8[4] + ((v95 * a4.u8[4]) >> 8) + 1) >> 8;
                *v15 = (unsigned __int16)(v95 * a4.u8[0] + ((v95 * a4.u8[0]) >> 8) + 1) >> 8;
              }
              else
              {
                v98 = v95 * a4.u8[0] + ((v95 * a4.u8[0]) >> 8) + 1;
                v99 = ~(_BYTE)v96;
                *v15 += (unsigned __int16)(BYTE1(v98) * (_WORD)v99 + ((BYTE1(v98) * v99) >> 8) + 1) >> 8;
                v100 = ((unsigned __int16)(v95 * a4.u8[4] + ((v95 * a4.u8[4]) >> 8) + 1) >> 8)
                     * v99;
                v97 = v96 + ((v100 + (v100 >> 8) + 1) >> 8);
              }
              v15[1] = v97;
            }
          }
          ++v17;
          v15 += 2;
          --v94;
        }
        while (v94);
        v17 += v233;
        v15 += 2 * v18;
        --v10;
      }
      while (v10);
      return result;
    case 7:
      do
      {
        v101 = v11;
        do
        {
          v102 = *(unsigned __int8 *)v17;
          if (*(_BYTE *)v17)
          {
            if (v102 == 255)
            {
              v103 = *v15 * a4.u8[4];
              v104 = a4.u8[4];
            }
            else
            {
              v104 = (~(_BYTE)v102
                                     + ((unsigned __int16)(v102 * a4.u8[4] + ((v102 * a4.u8[4]) >> 8) + 1) >> 8));
              v103 = *v15 * v104;
            }
            *v15 = (unsigned __int16)(v103 + (v103 >> 8) + 1) >> 8;
            v15[1] = (unsigned __int16)(v104 * v15[1] + ((v104 * v15[1]) >> 8) + 1) >> 8;
          }
          ++v17;
          v15 += 2;
          --v101;
        }
        while (v101);
        v17 += v233;
        v15 += 2 * v18;
        --v10;
      }
      while (v10);
      return result;
    case 8:
      do
      {
        v105 = v11;
        do
        {
          v106 = *(unsigned __int8 *)v17;
          if (*(_BYTE *)v17)
          {
            if (v106 == 255)
            {
              *v15 = (unsigned __int16)(*v15 * ~a4.i8[4]
                                      + ((*v15 * ~a4.i8[4]) >> 8)
                                      + 1) >> 8;
              v108 = v15 + 1;
              v107 = v15[1];
              v109 = ~a4.i8[4];
            }
            else
            {
              v107 = ~((v106 * a4.u8[4] + ((v106 * a4.u8[4]) >> 8) + 1) >> 8);
              *v15 = (unsigned __int16)(v107 * *v15 + ((v107 * *v15) >> 8) + 1) >> 8;
              v108 = v15 + 1;
              v109 = v15[1];
            }
            *v108 = (unsigned __int16)(v107 * v109 + ((v107 * v109) >> 8) + 1) >> 8;
          }
          ++v17;
          v15 += 2;
          --v105;
        }
        while (v105);
        v17 += v233;
        v15 += 2 * v18;
        --v10;
      }
      while (v10);
      return result;
    case 9:
      do
      {
        v110 = v11;
        do
        {
          v111 = *(unsigned __int8 *)v17;
          if (*(_BYTE *)v17)
          {
            v112 = v111 * a4.u8[0] + ((v111 * a4.u8[0]) >> 8) + 1;
            v113 = v111 * a4.u8[4] + ((v111 * a4.u8[4]) >> 8) + 1;
            v114 = v15[1];
            v115 = (~(_BYTE)v111 + BYTE1(v113));
            *v15 = (unsigned __int16)(BYTE1(v112) * (v114 ^ 0xFF)
                                    + *v15 * (_WORD)v115
                                    + ((BYTE1(v112) * (v114 ^ 0xFF) + *v15 * v115) >> 8)
                                    + 1) >> 8;
            v15[1] = (unsigned __int16)(BYTE1(v113) * (v114 ^ 0xFF)
                                      + v114 * v115
                                      + ((BYTE1(v113) * (v114 ^ 0xFFu) + v114 * v115) >> 8)
                                      + 1) >> 8;
          }
          ++v17;
          v15 += 2;
          --v110;
        }
        while (v110);
        v17 += v233;
        v15 += 2 * v18;
        --v10;
      }
      while (v10);
      return result;
    case 10:
      do
      {
        v116 = v11;
        do
        {
          v117 = *(unsigned __int8 *)v17;
          if (*(_BYTE *)v17)
          {
            v118 = v117 * a4.u8[0] + ((v117 * a4.u8[0]) >> 8) + 1;
            v119 = v15[1];
            v120 = ((unsigned __int16)(v117 * a4.u8[4] + ((v117 * a4.u8[4]) >> 8) + 1) >> 8);
            *v15 = (unsigned __int16)(BYTE1(v118) * (v119 ^ 0xFF)
                                    + (v120 ^ 0xFF) * *v15
                                    + ((BYTE1(v118) * (v119 ^ 0xFF) + (v120 ^ 0xFF) * *v15) >> 8)
                                    + 1) >> 8;
            v15[1] = (unsigned __int16)(v120 * (v119 ^ 0xFF)
                                      + (v120 ^ 0xFF) * v119
                                      + ((v120 * (v119 ^ 0xFF) + (v120 ^ 0xFFu) * v119) >> 8)
                                      + 1) >> 8;
          }
          ++v17;
          v15 += 2;
          --v116;
        }
        while (v116);
        v17 += v233;
        v15 += 2 * v18;
        --v10;
      }
      while (v10);
      return result;
    case 11:
      do
      {
        v121 = v11;
        do
        {
          if (*(_BYTE *)v17)
          {
            if (v12)
              v122 = v15[1];
            else
              v122 = 255;
            v123 = ((*(_BYTE *)v17 * (a4.i8[4] - a4.i8[0])) | ((*(_BYTE *)v17
                                                                                                * a4.i8[4]) << 16))
                 + (v122 - *v15)
                 + (v122 << 16);
            v124 = (255 * ((v123 >> 8) & 0x10001)) | v123;
            *v15 = BYTE2(v124) - v124;
            v15[1] = BYTE2(v124);
          }
          ++v17;
          v15 += 2;
          --v121;
        }
        while (v121);
        v17 += v233;
        v15 += 2 * v18;
        --v10;
      }
      while (v10);
      return result;
    case 12:
      do
      {
        v125 = v11;
        do
        {
          if (*(_BYTE *)v17)
          {
            v126 = ((*(_BYTE *)v17 * a4.i8[0]) | ((*(_BYTE *)v17 * a4.i8[4]) << 16))
                 + *(_WORD *)v15
                 + ((*(unsigned __int16 *)v15 << 8) & 0xFF0000);
            v127 = (255 * ((v126 >> 8) & 0x10001)) | v126;
            *v15 = v127;
            v15[1] = BYTE2(v127);
          }
          ++v17;
          v15 += 2;
          --v125;
        }
        while (v125);
        v17 += v233;
        v15 += 2 * v18;
        --v10;
      }
      while (v10);
      return result;
    case 13:
      v128 = (int32x2_t)vand_s8((int8x8_t)a4, (int8x8_t)0xFF000000FFLL);
      while (1)
      {
        v129 = v11;
        do
        {
          if (*(_BYTE *)v17)
          {
            v130 = (uint32x2_t)vmul_s32(vdup_n_s32(*(unsigned __int8 *)v17), v128);
            v131 = (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v130, v130, 8uLL), (int32x2_t)0x100000001);
            v132 = vshr_n_u32(v131, 8uLL);
            if (v132.i8[4])
            {
              if (v12)
              {
                v133 = v15[1];
                if (!v15[1])
                {
                  v15[1] = v132.u8[4];
                  *v15 = v132.i8[0];
                  goto LABEL_168;
                }
              }
              else
              {
                v133 = 255;
              }
              v134 = (int32x2_t)vand_s8((int8x8_t)vshl_u32(v131, (uint32x2_t)4294967288), (int8x8_t)0xFF00000000FFLL);
              v8 = v8 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v15;
              v7 = v7 & 0xFFFFFFFFFFFF0000 | vorr_s8((int8x8_t)v134, (int8x8_t)vdup_lane_s32(v134, 1)).u32[0];
              result = PDAmultiplyPDA(v8, v133, v7, v132.u8[4]);
              *(_WORD *)v15 = result;
            }
          }
LABEL_168:
          ++v17;
          v15 += 2;
          --v129;
        }
        while (v129);
        v17 += v233;
        v15 += 2 * v18;
        if (!--v10)
          return result;
      }
    case 14:
      v135 = (int32x2_t)vand_s8((int8x8_t)a4, (int8x8_t)0xFF000000FFLL);
      while (1)
      {
        v136 = v11;
        do
        {
          if (*(_BYTE *)v17)
          {
            v137 = (uint32x2_t)vmul_s32(vdup_n_s32(*(unsigned __int8 *)v17), v135);
            v138 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v137, v137, 8uLL), (int32x2_t)0x100000001), 8uLL);
            if (v138.i8[4])
            {
              if (v12)
              {
                v139 = v15[1];
                if (!v15[1])
                {
                  v15[1] = v138.u8[4];
                  *v15 = v138.i8[0];
                  goto LABEL_180;
                }
              }
              else
              {
                v139 = 255;
              }
              v140 = (*v15 ^ 0xFF) * v138.u8[0] - *v15 + (*v15 << 8);
              *v15 = (unsigned __int16)(v140 + (v140 >> 8) + 1) >> 8;
              v15[1] = (unsigned __int16)(255 * (v139 + v138.u8[4])
                                        - v138.u8[4] * (_WORD)v139
                                        + ((255 * (v139 + v138.u8[4]) - v138.u8[4] * v139) >> 8)
                                        + 1) >> 8;
            }
          }
LABEL_180:
          ++v17;
          v15 += 2;
          --v136;
        }
        while (v136);
        v17 += v233;
        v15 += 2 * v18;
        if (!--v10)
          return result;
      }
    case 15:
      v141 = (int32x2_t)vand_s8((int8x8_t)a4, (int8x8_t)0xFF000000FFLL);
      while (1)
      {
        v142 = v11;
        do
        {
          if (*(_BYTE *)v17)
          {
            v143 = (uint32x2_t)vmul_s32(vdup_n_s32(*(unsigned __int8 *)v17), v141);
            v144 = (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v143, v143, 8uLL), (int32x2_t)0x100000001);
            v145 = vshr_n_u32(v144, 8uLL);
            if (v145.i8[4])
            {
              if (v12)
              {
                v146 = v15[1];
                if (!v15[1])
                {
                  v15[1] = v145.u8[4];
                  *v15 = v145.i8[0];
                  goto LABEL_192;
                }
              }
              else
              {
                v146 = 255;
              }
              v147 = (int32x2_t)vand_s8((int8x8_t)vshl_u32(v144, (uint32x2_t)4294967288), (int8x8_t)0xFF00000000FFLL);
              v7 = v7 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v15;
              v8 = v8 & 0xFFFFFFFFFFFF0000 | vorr_s8((int8x8_t)v147, (int8x8_t)vdup_lane_s32(v147, 1)).u32[0];
              result = PDAoverlayPDA(v7, v146, v8, v145.u8[4]);
              *(_WORD *)v15 = result;
            }
          }
LABEL_192:
          ++v17;
          v15 += 2;
          --v142;
        }
        while (v142);
        v17 += v233;
        v15 += 2 * v18;
        if (!--v10)
          return result;
      }
    case 16:
      v148 = (int32x2_t)vand_s8((int8x8_t)a4, (int8x8_t)0xFF000000FFLL);
      while (1)
      {
        v149 = v11;
        do
        {
          if (*(_BYTE *)v17)
          {
            v150 = (uint32x2_t)vmul_s32(vdup_n_s32(*(unsigned __int8 *)v17), v148);
            v151 = (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v150, v150, 8uLL), (int32x2_t)0x100000001);
            v152 = vshr_n_u32(v151, 8uLL);
            if (v152.i8[4])
            {
              if (v12)
              {
                v153 = v15[1];
                if (!v15[1])
                {
                  v15[1] = v152.u8[4];
                  *v15 = v152.i8[0];
                  goto LABEL_204;
                }
              }
              else
              {
                v153 = 255;
              }
              v154 = (int32x2_t)vand_s8((int8x8_t)vshl_u32(v151, (uint32x2_t)4294967288), (int8x8_t)0xFF00000000FFLL);
              v7 = v7 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v15;
              v8 = v8 & 0xFFFFFFFFFFFF0000 | vorr_s8((int8x8_t)v154, (int8x8_t)vdup_lane_s32(v154, 1)).u32[0];
              result = PDAdarkenPDA(v7, v153, v8, v152.u8[4]);
              *(_WORD *)v15 = result;
            }
          }
LABEL_204:
          ++v17;
          v15 += 2;
          --v149;
        }
        while (v149);
        v17 += v233;
        v15 += 2 * v18;
        if (!--v10)
          return result;
      }
    case 17:
      v155 = (int32x2_t)vand_s8((int8x8_t)a4, (int8x8_t)0xFF000000FFLL);
      while (1)
      {
        v156 = v11;
        do
        {
          if (*(_BYTE *)v17)
          {
            v157 = (uint32x2_t)vmul_s32(vdup_n_s32(*(unsigned __int8 *)v17), v155);
            v158 = (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v157, v157, 8uLL), (int32x2_t)0x100000001);
            v159 = vshr_n_u32(v158, 8uLL);
            if (v159.i8[4])
            {
              if (v12)
              {
                v160 = v15[1];
                if (!v15[1])
                {
                  v15[1] = v159.u8[4];
                  *v15 = v159.i8[0];
                  goto LABEL_216;
                }
              }
              else
              {
                v160 = 255;
              }
              v161 = (int32x2_t)vand_s8((int8x8_t)vshl_u32(v158, (uint32x2_t)4294967288), (int8x8_t)0xFF00000000FFLL);
              v7 = v7 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v15;
              v8 = v8 & 0xFFFFFFFFFFFF0000 | vorr_s8((int8x8_t)v161, (int8x8_t)vdup_lane_s32(v161, 1)).u32[0];
              result = PDAlightenPDA(v7, v160, v8, v159.u8[4]);
              *(_WORD *)v15 = result;
            }
          }
LABEL_216:
          ++v17;
          v15 += 2;
          --v156;
        }
        while (v156);
        v17 += v233;
        v15 += 2 * v18;
        if (!--v10)
          return result;
      }
    case 18:
      v162 = (int32x2_t)vand_s8((int8x8_t)a4, (int8x8_t)0xFF000000FFLL);
      while (1)
      {
        v163 = v11;
        do
        {
          if (*(_BYTE *)v17)
          {
            v164 = (uint32x2_t)vmul_s32(vdup_n_s32(*(unsigned __int8 *)v17), v162);
            v165 = (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v164, v164, 8uLL), (int32x2_t)0x100000001);
            v166 = vshr_n_u32(v165, 8uLL);
            if (v166.i8[4])
            {
              if (v12)
              {
                v167 = v15[1];
                if (!v15[1])
                {
                  v15[1] = v166.u8[4];
                  *v15 = v166.i8[0];
                  goto LABEL_228;
                }
              }
              else
              {
                v167 = 255;
              }
              v168 = (int32x2_t)vand_s8((int8x8_t)vshl_u32(v165, (uint32x2_t)4294967288), (int8x8_t)0xFF00000000FFLL);
              v7 = v7 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v15;
              v8 = v8 & 0xFFFFFFFFFFFF0000 | vorr_s8((int8x8_t)v168, (int8x8_t)vdup_lane_s32(v168, 1)).u32[0];
              result = PDAcolordodgePDA(v7, v167, v8, v166.u8[4]);
              *(_WORD *)v15 = result;
            }
          }
LABEL_228:
          ++v17;
          v15 += 2;
          --v163;
        }
        while (v163);
        v17 += v233;
        v15 += 2 * v18;
        if (!--v10)
          return result;
      }
    case 19:
      v169 = *v13;
      v170 = v13[1];
      v232 = *(_DWORD *)(result + 4);
      while (1)
      {
        v171 = v11;
        v172 = v18;
        v173 = v171;
        do
        {
          v174 = *(_BYTE *)v17 * v170;
          if (*(_BYTE *)v17)
            v175 = (*(_BYTE *)v17 * v170) == 0;
          else
            v175 = 1;
          if (!v175)
          {
            if (v12)
            {
              v176 = v15[1];
              if (!v15[1])
              {
                *v15 = *(_BYTE *)v17 * v169;
                v15[1] = v174;
                goto LABEL_242;
              }
            }
            else
            {
              v176 = 255;
            }
            v7 = v7 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v15;
            v8 = (*(_BYTE *)v17 * v169) | ((unint64_t)(*(_BYTE *)v17 * v170) << 8) | v8 & 0xFFFFFFFFFFFF0000;
            result = PDAcolorburnPDA(v7, v176, v8, (*(_BYTE *)v17 * v170));
            *(_WORD *)v15 = result;
          }
LABEL_242:
          ++v17;
          v15 += 2;
          --v173;
        }
        while (v173);
        v17 += v233;
        v18 = v172;
        v15 += 2 * v172;
        --v10;
        v11 = v232;
        if (!v10)
          return result;
      }
    case 20:
      v177 = (int32x2_t)vand_s8((int8x8_t)a4, (int8x8_t)0xFF000000FFLL);
      while (1)
      {
        v178 = v11;
        do
        {
          if (*(_BYTE *)v17)
          {
            v179 = (uint32x2_t)vmul_s32(vdup_n_s32(*(unsigned __int8 *)v17), v177);
            v180 = (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v179, v179, 8uLL), (int32x2_t)0x100000001);
            v181 = vshr_n_u32(v180, 8uLL);
            if (v181.i8[4])
            {
              if (v12)
              {
                v182 = v15[1];
                if (!v15[1])
                {
                  v15[1] = v181.u8[4];
                  *v15 = v181.i8[0];
                  goto LABEL_254;
                }
              }
              else
              {
                v182 = 255;
              }
              v183 = (int32x2_t)vand_s8((int8x8_t)vshl_u32(v180, (uint32x2_t)4294967288), (int8x8_t)0xFF00000000FFLL);
              v7 = v7 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v15;
              v8 = v8 & 0xFFFFFFFFFFFF0000 | vorr_s8((int8x8_t)v183, (int8x8_t)vdup_lane_s32(v183, 1)).u32[0];
              result = PDAsoftlightPDA(v7, v182, v8, v181.u8[4]);
              *(_WORD *)v15 = result;
            }
          }
LABEL_254:
          ++v17;
          v15 += 2;
          --v178;
        }
        while (v178);
        v17 += v233;
        v15 += 2 * v18;
        if (!--v10)
          return result;
      }
    case 21:
      v184 = (int32x2_t)vand_s8((int8x8_t)a4, (int8x8_t)0xFF000000FFLL);
      while (1)
      {
        v185 = v11;
        do
        {
          if (*(_BYTE *)v17)
          {
            v186 = (uint32x2_t)vmul_s32(vdup_n_s32(*(unsigned __int8 *)v17), v184);
            v187 = (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v186, v186, 8uLL), (int32x2_t)0x100000001);
            v188 = vshr_n_u32(v187, 8uLL);
            if (v188.i8[4])
            {
              if (v12)
              {
                v189 = v15[1];
                if (!v15[1])
                {
                  v15[1] = v188.u8[4];
                  *v15 = v188.i8[0];
                  goto LABEL_266;
                }
              }
              else
              {
                v189 = 255;
              }
              v190 = (int32x2_t)vand_s8((int8x8_t)vshl_u32(v187, (uint32x2_t)4294967288), (int8x8_t)0xFF00000000FFLL);
              v7 = v7 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v15;
              v8 = v8 & 0xFFFFFFFFFFFF0000 | vorr_s8((int8x8_t)v190, (int8x8_t)vdup_lane_s32(v190, 1)).u32[0];
              result = PDAhardlightPDA(v7, v189, v8, v188.u8[4]);
              *(_WORD *)v15 = result;
            }
          }
LABEL_266:
          ++v17;
          v15 += 2;
          --v185;
        }
        while (v185);
        v17 += v233;
        v15 += 2 * v18;
        if (!--v10)
          return result;
      }
    case 22:
      v191 = (int32x2_t)vand_s8((int8x8_t)a4, (int8x8_t)0xFF000000FFLL);
      while (1)
      {
        v192 = v11;
        do
        {
          if (*(_BYTE *)v17)
          {
            v193 = (uint32x2_t)vmul_s32(vdup_n_s32(*(unsigned __int8 *)v17), v191);
            v194 = (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v193, v193, 8uLL), (int32x2_t)0x100000001);
            v195 = vshr_n_u32(v194, 8uLL);
            if (v195.i8[4])
            {
              if (v12)
              {
                v196 = v15[1];
                if (!v15[1])
                {
                  v15[1] = v195.u8[4];
                  *v15 = v195.i8[0];
                  goto LABEL_278;
                }
              }
              else
              {
                v196 = 255;
              }
              v197 = (int32x2_t)vand_s8((int8x8_t)vshl_u32(v194, (uint32x2_t)4294967288), (int8x8_t)0xFF00000000FFLL);
              v7 = v7 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v15;
              v8 = v8 & 0xFFFFFFFFFFFF0000 | vorr_s8((int8x8_t)v197, (int8x8_t)vdup_lane_s32(v197, 1)).u32[0];
              result = PDAdifferencePDA(v7, v196, v8, v195.u8[4]);
              *(_WORD *)v15 = result;
            }
          }
LABEL_278:
          ++v17;
          v15 += 2;
          --v192;
        }
        while (v192);
        v17 += v233;
        v15 += 2 * v18;
        if (!--v10)
          return result;
      }
    case 23:
      while (1)
      {
        v198 = v11;
        do
        {
          LOBYTE(v199) = *(_BYTE *)v17 * a4.i8[4];
          if (*(_BYTE *)v17)
            v200 = (*(_BYTE *)v17 * a4.i8[4]) == 0;
          else
            v200 = 1;
          if (!v200)
          {
            if (v12)
            {
              v201 = v15[1];
              if (!v15[1])
              {
                *v15 = *(_BYTE *)v17 * a4.i8[0];
LABEL_291:
                v15[1] = v199;
                goto LABEL_292;
              }
            }
            else
            {
              v201 = 255;
            }
            v202 = 255 * (*v15 + (*(_BYTE *)v17 * a4.i8[0]))
                 - 2 * (*(_BYTE *)v17 * a4.i8[0]) * *v15;
            v203 = 255 * (v201 + (*(_BYTE *)v17 * a4.i8[4]))
                 - v201 * (*(_BYTE *)v17 * a4.i8[4]);
            v199 = (v203 + (v203 >> 8) + 1) >> 8;
            *v15 = (unsigned __int16)(v202 + (v202 >> 8) + 1) >> 8;
            goto LABEL_291;
          }
LABEL_292:
          ++v17;
          v15 += 2;
          --v198;
        }
        while (v198);
        v17 += v233;
        v15 += 2 * v18;
        if (!--v10)
          return result;
      }
    case 24:
      v204 = (int32x2_t)vand_s8((int8x8_t)a4, (int8x8_t)0xFF000000FFLL);
      while (1)
      {
        v205 = v11;
        do
        {
          if (*(_BYTE *)v17)
          {
            v206 = (uint32x2_t)vmul_s32(vdup_n_s32(*(unsigned __int8 *)v17), v204);
            v207 = (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v206, v206, 8uLL), (int32x2_t)0x100000001);
            v208 = vshr_n_u32(v207, 8uLL);
            if (v208.i8[4])
            {
              if (v12)
              {
                v209 = v15[1];
                if (!v15[1])
                {
                  v15[1] = v208.u8[4];
                  *v15 = v208.i8[0];
                  goto LABEL_304;
                }
              }
              else
              {
                v209 = 255;
              }
              v210 = (int32x2_t)vand_s8((int8x8_t)vshl_u32(v207, (uint32x2_t)4294967288), (int8x8_t)0xFF00000000FFLL);
              v7 = v7 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v15;
              v8 = v8 & 0xFFFFFFFFFFFF0000 | vorr_s8((int8x8_t)v210, (int8x8_t)vdup_lane_s32(v210, 1)).u32[0];
              result = PDAhuePDA(v7, v209, v8, v208.u8[4]);
              *(_WORD *)v15 = result;
            }
          }
LABEL_304:
          ++v17;
          v15 += 2;
          --v205;
        }
        while (v205);
        v17 += v233;
        v15 += 2 * v18;
        if (!--v10)
          return result;
      }
    case 25:
      v211 = (int32x2_t)vand_s8((int8x8_t)a4, (int8x8_t)0xFF000000FFLL);
      while (1)
      {
        v212 = v11;
        do
        {
          if (*(_BYTE *)v17)
          {
            v213 = (uint32x2_t)vmul_s32(vdup_n_s32(*(unsigned __int8 *)v17), v211);
            v214 = (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v213, v213, 8uLL), (int32x2_t)0x100000001);
            v215 = vshr_n_u32(v214, 8uLL);
            if (v215.i8[4])
            {
              if (v12)
              {
                v216 = v15[1];
                if (!v15[1])
                {
                  v15[1] = v215.u8[4];
                  *v15 = v215.i8[0];
                  goto LABEL_316;
                }
              }
              else
              {
                v216 = 255;
              }
              v217 = (int32x2_t)vand_s8((int8x8_t)vshl_u32(v214, (uint32x2_t)4294967288), (int8x8_t)0xFF00000000FFLL);
              v7 = v7 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v15;
              v8 = v8 & 0xFFFFFFFFFFFF0000 | vorr_s8((int8x8_t)v217, (int8x8_t)vdup_lane_s32(v217, 1)).u32[0];
              result = PDAhuePDA(v7, v216, v8, v215.u8[4]);
              *(_WORD *)v15 = result;
            }
          }
LABEL_316:
          ++v17;
          v15 += 2;
          --v212;
        }
        while (v212);
        v17 += v233;
        v15 += 2 * v18;
        if (!--v10)
          return result;
      }
    case 26:
      v218 = (int32x2_t)vand_s8((int8x8_t)a4, (int8x8_t)0xFF000000FFLL);
      while (1)
      {
        v219 = v11;
        do
        {
          if (*(_BYTE *)v17)
          {
            v220 = (uint32x2_t)vmul_s32(vdup_n_s32(*(unsigned __int8 *)v17), v218);
            v221 = (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v220, v220, 8uLL), (int32x2_t)0x100000001);
            v222 = vshr_n_u32(v221, 8uLL);
            if (v222.i8[4])
            {
              if (v12)
              {
                v223 = v15[1];
                if (!v15[1])
                {
                  v15[1] = v222.u8[4];
                  *v15 = v222.i8[0];
                  goto LABEL_328;
                }
              }
              else
              {
                v223 = 255;
              }
              v224 = (int32x2_t)vand_s8((int8x8_t)vshl_u32(v221, (uint32x2_t)4294967288), (int8x8_t)0xFF00000000FFLL);
              v7 = v7 & 0xFFFFFFFFFFFF0000 | vorr_s8((int8x8_t)v224, (int8x8_t)vdup_lane_s32(v224, 1)).u32[0];
              v8 = v8 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v15;
              result = PDAhuePDA(v7, v222.u8[4], v8, v223);
              *(_WORD *)v15 = result;
            }
          }
LABEL_328:
          ++v17;
          v15 += 2;
          --v219;
        }
        while (v219);
        v17 += v233;
        v15 += 2 * v18;
        if (!--v10)
          return result;
      }
    case 27:
      v225 = (int32x2_t)vand_s8((int8x8_t)a4, (int8x8_t)0xFF000000FFLL);
      break;
    default:
      return result;
  }
LABEL_332:
  v226 = v11;
  while (1)
  {
    if (!*(_BYTE *)v17)
      goto LABEL_340;
    v227 = (uint32x2_t)vmul_s32(vdup_n_s32(*(unsigned __int8 *)v17), v225);
    v228 = (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v227, v227, 8uLL), (int32x2_t)0x100000001);
    v229 = vshr_n_u32(v228, 8uLL);
    if (!v229.i8[4])
      goto LABEL_340;
    if (!v12)
      break;
    v230 = v15[1];
    if (v15[1])
      goto LABEL_339;
    v15[1] = v229.u8[4];
    *v15 = v229.i8[0];
LABEL_340:
    ++v17;
    v15 += 2;
    if (!--v226)
    {
      v17 += v233;
      v15 += 2 * v18;
      if (!--v10)
        return result;
      goto LABEL_332;
    }
  }
  v230 = 255;
LABEL_339:
  v231 = (int32x2_t)vand_s8((int8x8_t)vshl_u32(v228, (uint32x2_t)4294967288), (int8x8_t)0xFF00000000FFLL);
  v7 = v7 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v15;
  v8 = v8 & 0xFFFFFFFFFFFF0000 | vorr_s8((int8x8_t)v231, (int8x8_t)vdup_lane_s32(v231, 1)).u32[0];
  result = PDAhuePDA(v7, v230, v8, v229.u8[4]);
  *(_WORD *)v15 = result;
  goto LABEL_340;
}

uint64_t __pdf_document_get_type_id_block_invoke()
{
  uint64_t result;

  result = pdf_register_cftype((uint64_t)&pdf_document_get_type_id_class);
  pdf_document_get_type_id_id = result;
  return result;
}

uint64_t pdf_register_cftype(uint64_t a1)
{
  uint64_t v2;

  v2 = _CFRuntimeRegisterClass();
  if (!v2)
    pdf_error("Failed to register CFRuntimeClass \"%s\".", *(const char **)(a1 + 8));
  return v2;
}

uint64_t CGStyleGetDrawOrdering(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 1;
  result = *(unsigned int *)(a1 + 20);
  if ((result - 3) < 2)
    return 0;
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result != 2)
      return 1;
    result = *(unsigned int *)(a1 + 40);
    if (result >= 3)
      return 1;
  }
  return result;
}

void td_Finalize(uint64_t a1)
{
  const void *v2;
  void (*v3)(void);

  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 96));
  CGPropertiesRelease(*(_QWORD *)(a1 + 64));
  v3 = *(void (**)(void))(a1 + 56);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 24))
      v3();
  }
}

void CGContextAddArc(CGContextRef c, CGFloat x, CGFloat y, CGFloat radius, CGFloat startAngle, CGFloat endAngle, int clockwise)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CGPath *Mutable;
  CGContextRef v21;

  if (!c)
  {
    v21 = 0;
LABEL_8:
    handle_invalid_context((char)"CGContextAddArc", (uint64_t)v21, v7, v8, v9, v10, v11, v12);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v21 = c;
    goto LABEL_8;
  }
  Mutable = (CGPath *)*((_QWORD *)c + 21);
  if (!Mutable)
  {
    Mutable = CGPathCreateMutable();
    *((_QWORD *)c + 21) = Mutable;
  }
  CGPathAddArc(Mutable, (const CGAffineTransform *)(*((_QWORD *)c + 12) + 24), x, y, radius, startAngle, endAngle, clockwise != 0);
}

uint64_t rips_s_BltShade(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int32x4_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v11;
  int v14;
  uint64_t result;
  double v17;
  float v18;
  float v19;
  char *v20;
  uint64_t *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  char *v32;
  char *v33;
  int *v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *Cache;
  __n128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  double *v55;
  size_t v56;
  uint64_t v57;
  double *v58;
  uint64_t v59;
  CGColor *v60;
  CGColorSpaceRef ColorSpace;
  uint64_t v62;
  double *Components;
  uint64_t v64;
  double *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  __int128 v74;
  __int128 v75;
  int *v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double *v81;
  double *v82;
  uint64_t *v83;
  char *v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD v87[2];
  _QWORD v88[2];
  int32x4_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  _OWORD v95[3];
  __int128 v96;
  uint64_t v97;
  uint64_t v98;

  v11 = (int *)a4;
  v98 = *MEMORY[0x1E0C80C00];
  v14 = *(_DWORD *)(a1 + 12);
  if ((v14 & 0x80) == 0)
  {
    if ((v14 & 0x1000) == 0)
      return (uint64_t)RIPLayerBltShade(a2, a3, a4, (uint64_t)a5, a6, a8, a7, a8);
    return 1;
  }
  v89 = 0uLL;
  v88[1] = 0;
  v88[0] = 0;
  v87[1] = 0;
  v87[0] = 0;
  v17 = *(double *)(a8 + 48);
  v18 = *(float *)(a1 + 112);
  if (!a3
    || (v89 = vaddq_s32(*(int32x4_t *)(a1 + 96), *a5),
        CGSBoundsIntersection((int *)(a3 + 12), v89.i32, v88)))
  {
    v19 = v17;
    if ((float)(v18 * v19) <= 0.0039062)
      goto LABEL_57;
    if (!v11)
    {
      v11 = (int *)v87;
      result = CGSBoundsIntersection((int *)(a2 + 12), a5->i32, v87);
      if (!(_DWORD)result)
        return result;
    }
    v20 = RIPLayerCreate((uint64_t)RIPLayer_ripl_class, (uint64_t)v11, 0, 0, *(unsigned int *)(a2 + 52), a6, a7, a8);
    if (!v20)
    {
LABEL_57:
      if (!a3)
        goto LABEL_62;
      goto LABEL_58;
    }
    v21 = (uint64_t *)v20;
    v22 = *(_OWORD *)(a8 + 16);
    v95[0] = *(_OWORD *)a8;
    v95[1] = v22;
    v23 = *(_OWORD *)(a8 + 48);
    v95[2] = *(_OWORD *)(a8 + 32);
    v96 = v23;
    v24 = *(_QWORD *)(a8 + 64);
    LODWORD(v95[0]) = 1;
    v97 = v24;
    *(_QWORD *)&v96 = 0x3FF0000000000000;
    RIPLayerBltShade((uint64_t)v20, 0, (uint64_t)v11, (uint64_t)a5, a6, (uint64_t)v95, a7, a8);
    v31 = *(float *)(a1 + 116);
    if (v31 >= 0.5)
      v32 = RIPLayerGaussianBlur((uint64_t)v21, *(unsigned int *)(a2 + 52), v25, v26, v27, v28, v29, v30, v31);
    else
      v32 = RIPLayerCreateWithLayer(*v21, (uint64_t *)((char *)v21 + 12), v21, *(unsigned int *)(a2 + 52));
    v33 = v32;
    if (!v32)
    {
LABEL_56:
      (*(void (**)(uint64_t *))(*v21 + 24))(v21);
      goto LABEL_57;
    }
    v34 = (int *)(v32 + 12);
    *(int32x2_t *)(v32 + 12) = vadd_s32(*(int32x2_t *)(v32 + 12), *(int32x2_t *)(a1 + 88));
    if (a3)
      v35 = (int *)(a3 + 12);
    else
      v35 = (int *)(v32 + 12);
    if (!CGSBoundsIntersection(v35, v34, &v89))
    {
LABEL_55:
      (*(void (**)(char *))(*(_QWORD *)v33 + 24))(v33);
      goto LABEL_56;
    }
    v94 = 0;
    v92 = 0u;
    v93 = 0u;
    v91 = 0u;
    v90 = 0u;
    if (*(float *)(a1 + 120) != 0.0 || *(float *)(a1 + 124) != 1.0)
      RIPLayerResample((uint64_t)v33, (float *)(a1 + 120), v36, v37, v38, v39, v40, v41);
    if (v19 >= 0.99609
      && !*(_QWORD *)(a5[3].i64[1] + 72)
      && (*(_BYTE *)(a1 + 13) & 0x10) == 0
      && *(int *)a8 <= 2
      && (!a3 || !*(_QWORD *)(a3 + 56)))
    {
      RIPLayerMask(v33, v21, v36, v37, v38, v39, v40, v41);
    }
    v42 = *(_QWORD *)(a1 + 80);
    if (!v42)
    {
      if (default_shadow_color_predicate != -1)
        dispatch_once(&default_shadow_color_predicate, &__block_literal_global_2);
      v42 = default_shadow_color_shadow_color;
    }
    v86 = v42;
    Cache = CGColorTransformGetCache(*(_QWORD **)(a8 + 16));
    if (Cache)
    {
      v45 = Cache[2];
      if (v45)
      {
        v46 = *(_QWORD *)(*(_QWORD *)(v45 + 24) + 40);
        if (v46 >> 61)
        {
          MEMORY[0x1E0C80A78](Cache, v44);
          v82 = (double *)&v78;
          v55 = 0;
LABEL_42:
          v59 = *(_QWORD *)(a8 + 16);
          v60 = (CGColor *)v86;
          v84 = v33;
          v83 = &v79;
          v85 = v54;
          v81 = v55;
          v80 = v59;
          if (v86)
          {
            if ((v86 & 0x8000000000000000) != 0)
            {
              ColorSpace = CGTaggedColorGetColorSpace(v86, v47, v48, v49, v50, v51, v52, v53);
              v60 = (CGColor *)v86;
            }
            else
            {
              ColorSpace = *(CGColorSpaceRef *)(v86 + 24);
            }
          }
          else
          {
            ColorSpace = 0;
          }
          v62 = *(unsigned int *)(a8 + 8);
          Components = (double *)CGColorGetComponents(v60);
          v64 = v62;
          v65 = v81;
          if ((CGColorTransformConvertColorComponents(v80, ColorSpace, v64, Components, v81) & 1) != 0)
          {
            RIPColorCreateWithColor(*(_DWORD *)(a8 + 24), v65, v85, 1.0);
            v73 = v72;
          }
          else
          {
            v73 = malloc_type_malloc(0xA0uLL, 0x106004074580882uLL);
            *v73 = &ripc_class;
            v73[1] = 0;
            v73[2] = 0;
            v73[3] = 0;
            *((_DWORD *)v73 + 39) = 1065353216;
          }
          if (v65 != v82)
            free(v65);
          v74 = *(_OWORD *)(a8 + 48);
          v92 = *(_OWORD *)(a8 + 32);
          v93 = v74;
          v94 = *(_QWORD *)(a8 + 64);
          v75 = *(_OWORD *)a8;
          v91 = *(_OWORD *)(a8 + 16);
          v90 = v75;
          *(double *)&v93 = (float)(v18 * v19);
          v33 = v84;
          if ((*(_BYTE *)(a1 + 13) & 0x10) != 0)
            RIPLayerDefine(a2, (__n128 *)&v89, v66, v67, v68, v69, v70, v71);
          RIPLayerBltShape((int *)a2, a3, v89.i32, (uint64_t)v33, (uint64_t)v73, 0, (uint64_t)&v90, v71);
          free(v73);
          goto LABEL_55;
        }
        Cache = (_QWORD *)(8 * v46);
      }
      else
      {
        Cache = 0;
      }
    }
    v56 = MEMORY[0x1E0C80A78](Cache, v44);
    v55 = (double *)((char *)&v79 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0));
    v82 = v55;
    if (v54 > 0x1FFFFFFFFFFFFFFELL)
      v55 = 0;
    if (v54 - 0x1FFFFFFFFFFFFFFFLL >= 0xE000000000000022)
    {
      v85 = v54;
      v58 = (double *)malloc_type_malloc(v56, 0xE11A308CuLL);
      v54 = v85;
      v55 = v58;
    }
    goto LABEL_42;
  }
LABEL_58:
  if (v11)
    v76 = v11;
  else
    v76 = (int *)a5;
  if (!CGSBoundsIntersection((int *)(a3 + 12), v76, v88))
    return 1;
LABEL_62:
  if ((*(_BYTE *)(a1 + 13) & 0x10) != 0)
    return 1;
  if (a3)
    v77 = (int *)v88;
  else
    v77 = v11;
  return (uint64_t)RIPLayerBltShade(a2, a3, (uint64_t)v77, (uint64_t)a5, a6, a8, a7, a8);
}

uint64_t rips_s_BltShape(uint64_t a1, int *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8)
{
  int v15;
  uint64_t v18;
  int *v19;
  int *v20;
  _QWORD v21[2];

  v15 = *(_DWORD *)(a1 + 12);
  if ((v15 & 0x10) != 0)
  {
    v21[0] = 0;
    v21[1] = 0;
    rips_s_BltShapeShadow(a1, (uint64_t)a2, a3, a5, a6, a7, a8, a8);
    if (!a3
      || (a4 ? (v19 = a4) : (v19 = (int *)(a5 + 12)), CGSBoundsIntersection((int *)(a3 + 12), v19, v21)))
    {
      if ((*(_BYTE *)(a1 + 13) & 0x10) == 0)
      {
        if (a3)
          v20 = (int *)v21;
        else
          v20 = a4;
        RIPLayerBltShape(a2, a3, v20, a5, a6, a7, a8, v18);
      }
    }
  }
  else if ((v15 & 0x1000) == 0)
  {
    return (uint64_t)RIPLayerBltShape(a2, a3, a4, a5, a6, a7, a8, a8);
  }
  return 1;
}

uint64_t (**rips_s_BltGlyph(uint64_t a1, _DWORD *a2, uint64_t a3, int *a4, int *a5, uint64_t a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10))()
{
  __int128 v16;
  __int128 v17;
  int v18;
  int *v21;
  char *v22;
  uint64_t v23;
  int *v24;
  _QWORD v26[2];
  _OWORD v27[3];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v16 = *(_OWORD *)(a10 + 48);
  v27[2] = *(_OWORD *)(a10 + 32);
  v28 = v16;
  v29 = *(_QWORD *)(a10 + 64);
  v17 = *(_OWORD *)(a10 + 16);
  v27[0] = *(_OWORD *)a10;
  v27[1] = v17;
  v18 = *(_DWORD *)(a1 + 12);
  if ((v18 & 0x20) == 0)
  {
    if ((v18 & 0x1000) == 0)
      return RIPLayerBltGlyph(a2, a3, a4, a5, a6, a7, a8, a10);
    return (uint64_t (**)())1;
  }
  v26[0] = 0;
  v26[1] = 0;
  if (a4)
    v21 = a4;
  else
    v21 = a5;
  v22 = RIPLayerCreate((uint64_t)RIPLayer_ripl_class, (uint64_t)v21, 0, 0, a2[13], a6, (uint64_t)a7, a8);
  LODWORD(v27[0]) = 2;
  *(_QWORD *)&v28 = 0x3FF0000000000000;
  RIPLayerBltGlyph(v22, 0, a4, a5, 0, 0, 0, (uint64_t)v27);
  rips_s_BltShapeShadow(a1, (uint64_t)a2, a3, (uint64_t)v22, a6, a7, a10, v23);
  if (v22)
    (*(void (**)(char *))(*(_QWORD *)v22 + 24))(v22);
  if (a3 && !CGSBoundsIntersection((int *)(a3 + 12), v21, v26) || (*(_BYTE *)(a1 + 13) & 0x10) != 0)
    return (uint64_t (**)())1;
  if (a3)
    v24 = (int *)v26;
  else
    v24 = a4;
  return RIPLayerBltGlyph(a2, a3, v24, a5, a6, a7, a8, a10);
}

uint64_t rips_s_BltShapeShadow(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  float v15;
  float v16;
  uint64_t (**v17)();
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  int *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  int *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *Cache;
  __n128 v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double *v58;
  size_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  CGColorSpaceRef ColorSpace;
  CGColor *v64;
  uint64_t v65;
  double *Components;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  __int128 v75;
  __int128 v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  double *v81;
  uint64_t *v82;
  _QWORD v83[2];
  int32x4_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;

  v14 = result;
  v90 = *MEMORY[0x1E0C80C00];
  v84 = 0uLL;
  v83[0] = 0;
  v83[1] = 0;
  v15 = *(double *)(a7 + 48);
  v16 = *(float *)(result + 112) * v15;
  if (a3)
  {
    v84 = vaddq_s32(*(int32x4_t *)(result + 96), *(int32x4_t *)(a4 + 12));
    result = CGSBoundsIntersection((int *)(a3 + 12), v84.i32, v83);
    if (!(_DWORD)result)
      return result;
  }
  if (v16 <= 0.0039062)
    return result;
  if (a5)
  {
    v17 = *(uint64_t (***)())a5;
    if (*(_QWORD *)a5)
    {
      while (v17 != RIPLayer_ripl_class)
      {
        if (*v17)
        {
          v17 = (uint64_t (**)())(*v17)();
          if (v17)
            continue;
        }
        goto LABEL_19;
      }
      if (*(_DWORD *)(a5 + 64))
      {
        v18 = *(_OWORD *)(a7 + 16);
        v85 = *(_OWORD *)a7;
        v86 = v18;
        v19 = *(_OWORD *)(a7 + 48);
        v87 = *(_OWORD *)(a7 + 32);
        v88 = v19;
        v20 = *(_QWORD *)(a7 + 64);
        LODWORD(v85) = 1;
        v89 = v20;
        *(_QWORD *)&v88 = 0x3FF0000000000000;
        v21 = RIPLayerCreate(*(_QWORD *)a4, a4 + 12, 0, 0, *(unsigned int *)(a2 + 52), (uint64_t)a6, a7, a8);
        if (v21)
        {
          v22 = (int *)v21;
          v23 = RIPLayerConvertLayer(*(_QWORD *)a4, *(_DWORD *)(a5 + 28) & 8, a5, *(unsigned int *)(a2 + 52));
          if (v23)
          {
            v25 = v23;
            if ((RIPLayerBltShape(v22, 0, 0, a4, (uint64_t)v23, a6, (uint64_t)&v85, v24) & 1) != 0)
            {
              v26 = *(float *)(v14 + 116);
              (*(void (**)(char *))(*(_QWORD *)v25 + 24))(v25);
              if (v26 < 0.5)
              {
                v15 = 0.0039062;
                goto LABEL_23;
              }
              v77 = RIPLayerGaussianBlur((uint64_t)v22, *(unsigned int *)(a2 + 52), v27, v28, v29, v30, v31, v32, *(float *)(v14 + 116));
              (*(void (**)(int *))(*(_QWORD *)v22 + 24))(v22);
              v15 = 0.0039062;
              v22 = (int *)v77;
              if (v77)
              {
LABEL_23:
                v34 = v22 + 3;
                v35 = v22[3];
                v36 = *(_DWORD *)(v14 + 88);
                if (v35 < 0)
                {
                  if ((int)(0x80000000 - v35) > v36)
                    return (*(uint64_t (**)(int *, int *))(*(_QWORD *)v22 + 24))(v22, v34);
                }
                else if ((v35 ^ 0x7FFFFFFF) < v36)
                {
                  return (*(uint64_t (**)(int *, int *))(*(_QWORD *)v22 + 24))(v22, v34);
                }
                v37 = v22[4];
                v38 = *(_DWORD *)(v14 + 92);
                if ((v37 & 0x80000000) == 0)
                {
                  if ((v37 ^ 0x7FFFFFFF) < v38)
                    return (*(uint64_t (**)(int *, int *))(*(_QWORD *)v22 + 24))(v22, v34);
LABEL_31:
                  v22[3] = v36 + v35;
                  v22[4] = v38 + v37;
                  if (a3)
                    v39 = (int *)(a3 + 12);
                  else
                    v39 = v22 + 3;
                  if (!CGSBoundsIntersection(v39, v34, &v84))
                    return (*(uint64_t (**)(int *, int *))(*(_QWORD *)v22 + 24))(v22, v34);
                  v89 = 0;
                  v87 = 0u;
                  v88 = 0u;
                  v85 = 0u;
                  v86 = 0u;
                  if (*(float *)(v14 + 120) != 0.0 || *(float *)(v14 + 124) != 1.0)
                    RIPLayerResample((uint64_t)v22, (float *)(v14 + 120), v40, v41, v42, v43, v44, v45);
                  if (v15 >= 0.99609
                    && (*(_BYTE *)(v14 + 13) & 0x10) == 0
                    && *(int *)a7 <= 2
                    && (!a3 || !*(_QWORD *)(a3 + 56)))
                  {
                    RIPLayerMask(v22, (_QWORD *)a4, v40, v41, v42, v43, v44, v45);
                  }
                  v46 = *(_QWORD *)(v14 + 80);
                  if (!v46)
                  {
                    if (default_shadow_color_predicate != -1)
                      dispatch_once(&default_shadow_color_predicate, &__block_literal_global_2);
                    v46 = default_shadow_color_shadow_color;
                  }
                  Cache = CGColorTransformGetCache(*(_QWORD **)(a7 + 16));
                  if (Cache)
                  {
                    v49 = Cache[2];
                    if (v49)
                    {
                      v50 = *(_QWORD *)(*(_QWORD *)(v49 + 24) + 40);
                      if (v50 >> 61)
                      {
                        v80 = *(_QWORD *)(*(_QWORD *)(v49 + 24) + 40);
                        MEMORY[0x1E0C80A78](Cache, v48);
                        v81 = (double *)&v78;
                        v58 = 0;
LABEL_59:
                        v62 = *(_QWORD *)(a7 + 16);
                        v82 = &v79;
                        if (v46)
                        {
                          if ((v46 & 0x8000000000000000) != 0)
                          {
                            ColorSpace = CGTaggedColorGetColorSpace(v46, v51, v52, v53, v54, v55, v56, v57);
                            v64 = (CGColor *)v46;
                            v46 = (unint64_t)ColorSpace;
                          }
                          else
                          {
                            v64 = (CGColor *)v46;
                            v46 = *(_QWORD *)(v46 + 24);
                          }
                        }
                        else
                        {
                          v64 = 0;
                        }
                        v65 = *(unsigned int *)(a7 + 8);
                        Components = (double *)CGColorGetComponents(v64);
                        if ((CGColorTransformConvertColorComponents(v62, (_QWORD *)v46, v65, Components, v58) & 1) != 0)
                        {
                          RIPColorCreateWithColor(*(_DWORD *)(a7 + 24), v58, v80, 1.0);
                          v74 = v73;
                        }
                        else
                        {
                          v74 = malloc_type_malloc(0xA0uLL, 0x106004074580882uLL);
                          *v74 = &ripc_class;
                          v74[1] = 0;
                          v74[2] = 0;
                          v74[3] = 0;
                          *((_DWORD *)v74 + 39) = 1065353216;
                        }
                        if (v58 != v81)
                          free(v58);
                        v75 = *(_OWORD *)(a7 + 48);
                        v87 = *(_OWORD *)(a7 + 32);
                        v88 = v75;
                        v89 = *(_QWORD *)(a7 + 64);
                        v76 = *(_OWORD *)(a7 + 16);
                        v85 = *(_OWORD *)a7;
                        v86 = v76;
                        *(double *)&v88 = v16;
                        if ((*(_BYTE *)(v14 + 13) & 0x10) != 0)
                          RIPLayerDefine(a2, (__n128 *)&v84, v67, v68, v69, v70, v71, v72);
                        RIPLayerBltShape((int *)a2, a3, v84.i32, (uint64_t)v22, (uint64_t)v74, a6, (uint64_t)&v85, v72);
                        free(v74);
                        return (*(uint64_t (**)(int *, int *))(*(_QWORD *)v22 + 24))(v22, v34);
                      }
                      Cache = (_QWORD *)(8 * v50);
                    }
                    else
                    {
                      Cache = 0;
                    }
                  }
                  v59 = MEMORY[0x1E0C80A78](Cache, v48);
                  v80 = v61;
                  v81 = (double *)((char *)&v79 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0));
                  if (v61 <= 0x1FFFFFFFFFFFFFFELL)
                    v58 = (double *)((char *)&v79 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0));
                  else
                    v58 = 0;
                  if (v61 - 0x1FFFFFFFFFFFFFFFLL >= 0xE000000000000022)
                    v58 = (double *)malloc_type_malloc(v59, 0xDB697BA7uLL);
                  goto LABEL_59;
                }
                if ((int)(0x80000000 - v37) <= v38)
                  goto LABEL_31;
                return (*(uint64_t (**)(int *, int *))(*(_QWORD *)v22 + 24))(v22, v34);
              }
              goto LABEL_19;
            }
            (*(void (**)(char *))(*(_QWORD *)v25 + 24))(v25);
          }
          (*(void (**)(int *))(*(_QWORD *)v22 + 24))(v22);
        }
        v15 = 0.0039062;
      }
    }
  }
LABEL_19:
  v33 = *(float *)(v14 + 116);
  if (v33 >= 0.5)
    result = (uint64_t)RIPLayerGaussianBlur(a4, *(unsigned int *)(a2 + 52), a3, a4, a5, (uint64_t)a6, a7, a8, v33);
  else
    result = (uint64_t)RIPLayerCreateWithLayer(*(_QWORD *)a4, (uint64_t *)(a4 + 12), (uint64_t *)a4, *(unsigned int *)(a2 + 52));
  v22 = (int *)result;
  if (result)
    goto LABEL_23;
  return result;
}

uint64_t ripl_Combine(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int8x16_t v10;
  __n128 v11;
  double v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int32x2_t *v23;
  int *v24;
  int *v25;
  uint64_t result;
  int *v27;
  int32x2_t *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  void *v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  int v56;
  char *v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  size_t v61;
  unsigned int v62;
  void *v63;
  char *v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;
  int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  uint8x16_t *v85;
  uint64_t v86;
  __int16 v87;
  int v88;
  int v89;
  int v90;
  BOOL v91;
  int v92;
  int v93;
  signed int v94;
  int v96;
  int v97;
  char *v98;
  _DWORD *v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  int v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  void *v108;
  void *v109;
  int v110;
  size_t v111;
  void *v112;
  uint64_t v113;
  int v114;
  unsigned int v115;
  int v116;
  double v117;
  int8x16_t v118;
  __n128 v119;
  __n128 *v120;
  int v121;
  uint8x16_t *v122;
  int v123;
  int v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  int v130;
  int v131;
  int *v132;
  void *v133;
  void *v134;
  unsigned int v135;
  int v136;
  size_t v137;
  char *v138;
  __int128 v139;
  int v140;
  int v141;
  unint64_t v142;
  size_t v143;
  void *v144;
  int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  int v149;
  unint64_t v150;
  size_t v151;
  void *v152;
  unint64_t v153;
  size_t v154;
  void *v155;
  unsigned int v156;
  void *v157;
  unint64_t v158;
  size_t v159;
  void *v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  int v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  unsigned int v171;
  int v172[2];
  __int128 v173;

  v173 = 0uLL;
  *(_QWORD *)v172 = 0;
  v6 = (_DWORD *)(a1 + 12);
  v7 = (_DWORD *)(a2 + 12);
  v8 = CGSBoundsIntersection((int *)(a1 + 12), (int *)(a2 + 12), &v173);
  if ((v8 & 1) == 0)
  {
    if (a3 || !*(_DWORD *)(a1 + 20) && !*(_DWORD *)(a1 + 24))
      return 0;
    goto LABEL_159;
  }
  v12 = *((double *)&v173 + 1);
  v13 = DWORD2(v173);
  v171 = DWORD2(v173);
  v14 = HIDWORD(v173);
  v170 = HIDWORD(v173);
  v15 = *(_QWORD *)(a1 + 56);
  if (v15)
  {
    v16 = *(int **)(a2 + 72);
    if (v16)
    {
LABEL_4:
      v17 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a1 + 12);
      v19 = *(_DWORD *)(a1 + 20);
      v18 = *(_DWORD *)(a1 + 24);
      v20 = v18 + *(_DWORD *)(a1 + 16) - (*(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 24));
      v172[0] = v20;
      v172[1] = v17;
      if (a3 >= 0)
        v21 = -1;
      else
        v21 = 1;
      shape_enum_clip_alloc(v8, v9, v16, 1, 1, v21, -v17, -v20, v19, v18);
      if (!v22)
        goto LABEL_159;
      v23 = (int32x2_t *)v22;
      if (!shape_enum_clip_next(v22, &v172[1], v172, &v171, &v170))
      {
LABEL_13:
        v24 = (int *)v23;
LABEL_14:
        free(v24);
LABEL_15:
        v25 = *(int **)(a1 + 72);
        goto LABEL_16;
      }
      if (a3 < 0 || v171 != *(_DWORD *)(a1 + 20) || v170 != *(_DWORD *)(a1 + 24))
      {
        do
          CGBlt_fillBytes(v171, v170, 0, (char *)(*(_QWORD *)(a1 + 56) + v172[1] + (*(_DWORD *)(a1 + 48) * v172[0])), *(_DWORD *)(a1 + 48));
        while (shape_enum_clip_next((uint64_t)v23, &v172[1], v172, &v171, &v170));
        goto LABEL_13;
      }
LABEL_157:
      v132 = (int *)v23;
LABEL_158:
      free(v132);
      goto LABEL_159;
    }
    v45 = *(_DWORD *)(a2 + 64);
    if (v45)
      goto LABEL_40;
    v81 = *(_QWORD *)(a2 + 56);
    if (v81)
    {
      v82 = HIDWORD(v173);
      goto LABEL_90;
    }
    if (*(_QWORD *)(a1 + 20) != *((_QWORD *)&v173 + 1))
    {
      v125 = (int)v173 - (uint64_t)*(int *)(a1 + 12);
      v88 = *(_DWORD *)(a1 + 16) + *(_DWORD *)(a1 + 24) - DWORD1(v173) - HIDWORD(v173);
      v172[0] = v88;
      v172[1] = v125;
      if ((a3 & 0x80000000) == 0)
        goto LABEL_97;
      v97 = *(_DWORD *)(a1 + 48);
      v98 = (char *)(v15 + v125 + (v97 * v88));
      v93 = DWORD2(v173);
      v94 = HIDWORD(v173);
      goto LABEL_115;
    }
LABEL_144:
    if ((a3 & 0x80000000) == 0)
      return 1;
    goto LABEL_159;
  }
  v27 = *(int **)(a1 + 72);
  if (v27)
  {
    v28 = *(int32x2_t **)(a2 + 72);
    if (v28)
    {
      v169 = 0;
      goto LABEL_27;
    }
    v58 = *(_DWORD *)(a2 + 64);
    if (v58)
    {
LABEL_68:
      v69 = *(_DWORD *)(a2 + 12);
      v70 = *(_DWORD *)(a2 + 16);
      if ((_DWORD)v173 == v69)
        v71 = v58 & 0xFF000000;
      else
        v71 = 0;
      v72 = v58;
      if (DWORD1(v173) != v70)
        v72 = 0;
      if ((_DWORD)v173 + DWORD2(v173) == *(_DWORD *)(a2 + 20) + v69)
        v73 = v58 & 0xFF00;
      else
        v73 = 0;
      v74 = DWORD1(v173) + HIDWORD(v173);
      if (DWORD1(v173) + HIDWORD(v173) == *(_DWORD *)(a2 + 24) + v70)
        v75 = v58 & 0xFF0000;
      else
        v75 = 0;
      v76 = v72 | v71 | v73 | v75;
      if (!v76)
        return 1;
      if (a3 < 0)
      {
        v168 = 0;
        v126 = v173 - *(_DWORD *)(a1 + 12);
        v127 = *(_DWORD *)(a1 + 24);
        v128 = *(_DWORD *)(a1 + 16) - v74 + v127;
        v172[0] = v128;
        v172[1] = v126;
        if (HIBYTE(v76))
        {
          v172[1] = ++v126;
          LODWORD(v13) = DWORD2(v173) - 1;
        }
        if (v75)
        {
          v172[0] = ++v128;
          v14 = HIDWORD(v173) - 1;
        }
        shape_combine((int32x2_t *)0xFFFFFFFFLL, 0, 0, *(_DWORD *)(a1 + 20), v127, v27, v126, v128, v13 - (v73 != 0) + v126, v14 - (v72 != 0) + v128, 0);
        if (!v129)
          goto LABEL_159;
        v23 = (int32x2_t *)v129;
        v130 = shape_bounds(v129, &v172[1], v172, (signed int *)&v168 + 1, &v168);
        if (v130)
        {
          v37 = v130;
          v38 = v168;
          v131 = *(_DWORD *)(a1 + 24) - v168 + *(_DWORD *)(a1 + 16);
          v40 = v172[1];
          *(_DWORD *)(a1 + 12) += v172[1];
          *(_DWORD *)(a1 + 16) = v131;
          v41 = HIDWORD(v168);
LABEL_30:
          v42 = v172[0];
          v43 = v38 - v172[0];
          *(_DWORD *)(a1 + 20) = v41 - v40;
          *(_DWORD *)(a1 + 24) = v43;
          v44 = *(void **)(a1 + 72);
          if (v44 && v44 != &the_empty_shape)
            free(v44);
          if (v37 == 9)
          {
            if (v23 == (int32x2_t *)&the_empty_shape)
              goto LABEL_19;
            v25 = (int *)v23;
LABEL_18:
            free(v25);
LABEL_19:
            *(_QWORD *)(a1 + 72) = 0;
LABEL_20:
            *(_DWORD *)(a1 + 64) = 0;
            return 1;
          }
          if (v40 | v42)
          {
            *(_QWORD *)(a1 + 72) = shape_offset((uint64_t)v44, v23, -v40, -v42);
            *(_DWORD *)(a1 + 64) = 4 * v37;
            if (v23 != (int32x2_t *)&the_empty_shape)
              free(v23);
            return 1;
          }
          *(_QWORD *)(a1 + 72) = v23;
          v124 = 4 * v37;
          goto LABEL_205;
        }
LABEL_156:
        if (v23 == (int32x2_t *)&the_empty_shape)
          goto LABEL_159;
        goto LABEL_157;
      }
      v168 = 0;
      v77 = v173 - *(_DWORD *)(a1 + 12);
      v172[0] = *(_DWORD *)(a1 + 16) - v74 + *(_DWORD *)(a1 + 24);
      v172[1] = v77;
      shape_enum_clip_alloc(v8, v9, v27, 1, 1, 1, v77, v172[0], SDWORD2(v173), SHIDWORD(v173));
      if (!v78)
        goto LABEL_159;
      v79 = (void *)v78;
      if (shape_enum_clip_next(v78, &v172[1], v172, (_DWORD *)&v168 + 1, &v168))
      {
        if (v168 == __PAIR64__(v13, v14))
        {
          free(v79);
          v80 = *(void **)(a1 + 72);
          if (v80 && v80 != &the_empty_shape)
            free(v80);
          *(_QWORD *)(a1 + 72) = 0;
          *(_QWORD *)(a1 + 12) = v173;
          *(_DWORD *)(a1 + 20) = v13;
          *(_DWORD *)(a1 + 24) = v14;
LABEL_232:
          *(_DWORD *)(a1 + 64) = v76;
          return 1;
        }
        v153 = ((int)v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
        if ((unint64_t)((int)v153 * (uint64_t)v14 + 4) >> 31)
          v154 = 0xFFFFFFFFLL;
        else
          v154 = ((_DWORD)v153 * v14 + 19) & 0xFFFFFFF0;
        if ((v154 & 0x80000000) == 0)
        {
          v155 = malloc_type_calloc(1uLL, v154, 0xD5847092uLL);
          *(_QWORD *)(a1 + 56) = v155;
          if (v155)
          {
            *(_DWORD *)(a1 + 48) = v153;
            v156 = *(_DWORD *)(a1 + 28) & 0xFFFFFFFD;
            *(_DWORD *)(a1 + 24) = v14;
            *(_DWORD *)(a1 + 28) = v156;
            *(_QWORD *)(a1 + 12) = v173;
            *(_DWORD *)(a1 + 20) = v13;
            do
              CGBlt_fillBytes(SHIDWORD(v168), v168, -1, (char *)(*(_QWORD *)(a1 + 56) + v172[0] * v153 + v172[1]), (v13 + 3) & 0xFFFFFFFC);
            while (shape_enum_clip_next((uint64_t)v79, &v172[1], v172, (_DWORD *)&v168 + 1, &v168));
            CGSCombineMask(*(char **)(a1 + 56), (v13 + 3) & 0xFFFFFFFC, *(char **)(a1 + 56), (v13 + 3) & 0xFFFFFFFC, v13, v14, v76);
            free(v79);
            v157 = *(void **)(a1 + 72);
            if (v157 && v157 != &the_empty_shape)
              free(v157);
            v76 = 0;
            *(_QWORD *)(a1 + 72) = 0;
            goto LABEL_232;
          }
        }
      }
      v132 = (int *)v79;
      goto LABEL_158;
    }
    if (*(_QWORD *)(a2 + 56))
    {
      v103 = HIDWORD(v173);
LABEL_130:
      v104 = (int)v173;
      v105 = v173 - *(_DWORD *)(a1 + 12);
      v106 = v103 + DWORD1(v173);
      v166 = *(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 16) - (v103 + DWORD1(v173));
      v167 = v105;
      v107 = *(int *)(a2 + 12);
      v162 = *(_DWORD *)(a2 + 24);
      v164 = *(_DWORD *)(a2 + 16);
      shape_enum_clip_alloc(v8, v9, v27, 1, 1, 0, v105, v166, v13, v14);
      if (v108)
      {
        v109 = v108;
        v161 = v107;
        v110 = (v13 + 3) & 0xFFFFFFFC;
        if ((unint64_t)(v110 * (uint64_t)v14 + 4) >> 31)
          v111 = 0xFFFFFFFFLL;
        else
          v111 = (v110 * v14 + 19) & 0xFFFFFFF0;
        if ((v111 & 0x80000000) == 0)
        {
          v112 = malloc_type_malloc(v111, 0x8F2EEE60uLL);
          *(_QWORD *)(a1 + 56) = v112;
          if (v112)
          {
            v113 = v104 - v161;
            v114 = v164 - v106 + v162;
            *(_DWORD *)(a1 + 48) = v110;
            v115 = *(_DWORD *)(a1 + 28) & 0xFFFFFFFD;
            *(_DWORD *)(a1 + 24) = v14;
            *(_DWORD *)(a1 + 28) = v115;
            *(_QWORD *)(a1 + 12) = v173;
            *(_DWORD *)(a1 + 20) = v13;
            while (1)
            {
              v116 = shape_enum_clip_next((uint64_t)v109, &v167, &v166, &v171, &v170);
              if (!v116)
                break;
              v120 = (__n128 *)(*(_QWORD *)(a1 + 56) + v166 * v110 + v167);
              if (v116 < 0)
              {
                CGBlt_fillBytes(v171, v170, 0, (char *)v120, (v13 + 3) & 0xFFFFFFFC);
              }
              else
              {
                v121 = *(_DWORD *)(a2 + 48);
                v122 = (uint8x16_t *)(*(_QWORD *)(a2 + 56) + v167 + v113 + (v121 * (v166 + v114)));
                v123 = (v13 + 3) & 0xFFFFFFFC;
                if (a3 < 0)
                  CGBlt_combineBytes(v171, v170, v122, v120, v121, v123, 1280, v117, v118, v119);
                else
                  CGBlt_copyBytes(v171, v170, v122->i8, (char *)v120, v121, v123);
              }
            }
            free(v109);
            v25 = *(int **)(a1 + 72);
            if (v25 == v27)
            {
              v25 = v27;
              goto LABEL_16;
            }
            if (!v27 || v27 == (int *)&the_empty_shape)
            {
LABEL_16:
              if (!v25 || v25 == (int *)&the_empty_shape)
                goto LABEL_19;
              goto LABEL_18;
            }
            v24 = v27;
            goto LABEL_14;
          }
        }
        free(v109);
      }
      if (*(int **)(a1 + 72) == v27 || !v27 || v27 == (int *)&the_empty_shape)
        goto LABEL_159;
      v132 = v27;
      goto LABEL_158;
    }
    if (*(_QWORD *)(a1 + 20) == *((_QWORD *)&v173 + 1))
      goto LABEL_144;
LABEL_242:
    v28 = 0;
LABEL_27:
    v29 = *(_DWORD *)(a2 + 16);
    v30 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a1 + 12);
    v31 = *(_DWORD *)(a1 + 20);
    v32 = *(_DWORD *)(a1 + 24);
    v33 = v32 + *(_DWORD *)(a1 + 16);
    v34 = *(_DWORD *)(a2 + 20);
    v172[0] = v33 - (v29 + *(_DWORD *)(a2 + 24));
    v172[1] = v30;
    shape_combine((int32x2_t *)(a3 >> 31), 0, 0, v31, v32, v27, v30, v172[0], v34 + v30, v33 - v29, v28);
    if (!v35)
      goto LABEL_159;
    v23 = (int32x2_t *)v35;
    v36 = shape_bounds(v35, &v172[1], v172, (signed int *)&v169 + 1, &v169);
    if (v36)
    {
      v37 = v36;
      v38 = v169;
      v39 = *(_DWORD *)(a1 + 24) - v169 + *(_DWORD *)(a1 + 16);
      v40 = v172[1];
      *(_DWORD *)(a1 + 12) += v172[1];
      *(_DWORD *)(a1 + 16) = v39;
      v41 = HIDWORD(v169);
      goto LABEL_30;
    }
    goto LABEL_156;
  }
  v58 = *(_DWORD *)(a1 + 64);
  v28 = *(int32x2_t **)(a2 + 72);
  if (!v58)
  {
    if (v28)
      goto LABEL_27;
    v58 = *(_DWORD *)(a2 + 64);
    if (!v58)
    {
      if (*(_QWORD *)(a2 + 56))
      {
        shape_alloc_bounds(v8, 0, 0, *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 24));
        v27 = (int *)v8;
        v103 = HIDWORD(v173);
        goto LABEL_130;
      }
      if ((a3 & 0x80000000) == 0)
      {
        *(_OWORD *)v6 = v173;
        return 1;
      }
      goto LABEL_242;
    }
    if (a3 < 0)
      goto LABEL_68;
    v99 = v7;
    goto LABEL_212;
  }
  if (v28)
  {
    if ((a3 & 0x80000000) == 0)
    {
      v163 = *((_QWORD *)&v173 + 1);
      v59 = ripl_Containment(&v173, v6, v58);
      v60 = (v13 + 3) & 0xFFFFFFFC;
      if ((unint64_t)(v14 * (uint64_t)v60 + 4) >> 31)
        v61 = 0xFFFFFFFFLL;
      else
        v61 = (v14 * v60 + 19) & 0xFFFFFFF0;
      if ((v61 & 0x80000000) != 0)
        goto LABEL_159;
      v62 = v59;
      v63 = malloc_type_malloc(v61, 0xBB88B74AuLL);
      *(_QWORD *)(a1 + 56) = v63;
      if (!v63)
        goto LABEL_159;
      *(_DWORD *)(a1 + 48) = v60;
      *(_DWORD *)(a1 + 28) &= ~2u;
      *(_QWORD *)(a1 + 12) = v173;
      *(_QWORD *)(a1 + 20) = v163;
      v8 = (uint64_t)memset(v63, 255, v61);
      if (!v62)
        goto LABEL_220;
      v64 = *(char **)(a1 + 56);
      v65 = (v13 + 3) & 0xFFFFFFFC;
      v66 = v13;
      v67 = v14;
      v68 = v62;
LABEL_219:
      v8 = CGSCombineMask(0, 0, v64, v65, v66, v67, v68);
LABEL_220:
      *(_DWORD *)(a1 + 64) = 0;
      v16 = *(int **)(a2 + 72);
      goto LABEL_4;
    }
LABEL_213:
    v150 = (*(int *)(a1 + 20) + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if ((v150 * *(int *)(a1 + 24) + 4) >> 31)
      v151 = 0xFFFFFFFFLL;
    else
      v151 = ((_DWORD)v150 * *(_DWORD *)(a1 + 24) + 19) & 0xFFFFFFF0;
    if ((v151 & 0x80000000) != 0)
      goto LABEL_159;
    v152 = malloc_type_malloc(v151, 0xA64D168CuLL);
    *(_QWORD *)(a1 + 56) = v152;
    if (!v152)
      goto LABEL_159;
    *(_DWORD *)(a1 + 48) = v150;
    *(_DWORD *)(a1 + 28) &= ~2u;
    memset(v152, 255, v151);
    v64 = *(char **)(a1 + 56);
    v66 = *(_DWORD *)(a1 + 20);
    v67 = *(_DWORD *)(a1 + 24);
    v68 = *(_DWORD *)(a1 + 64);
    v65 = v150;
    goto LABEL_219;
  }
  v100 = *(_DWORD *)(a2 + 64);
  if (v100)
  {
    if (a3 < 0)
    {
      v142 = (*(int *)(a1 + 20) + 3) & 0xFFFFFFFFFFFFFFFCLL;
      if ((v142 * *(int *)(a1 + 24) + 4) >> 31)
        v143 = 0xFFFFFFFFLL;
      else
        v143 = ((_DWORD)v142 * *(_DWORD *)(a1 + 24) + 19) & 0xFFFFFFF0;
      if ((v143 & 0x80000000) != 0)
        goto LABEL_159;
      v144 = malloc_type_malloc(v143, 0xE15CC3uLL);
      *(_QWORD *)(a1 + 56) = v144;
      if (!v144)
        goto LABEL_159;
      *(_DWORD *)(a1 + 48) = v142;
      *(_DWORD *)(a1 + 28) &= ~2u;
      memset(v144, 255, v143);
      CGSCombineMask(0, 0, *(char **)(a1 + 56), v142, *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 64));
      *(_DWORD *)(a1 + 64) = 0;
      v45 = *(_DWORD *)(a2 + 64);
      v12 = *((double *)&v173 + 1);
LABEL_40:
      v46 = *(_DWORD *)(a2 + 12);
      v47 = *(_DWORD *)(a2 + 16);
      if ((_DWORD)v173 == v46)
        v48 = v45 & 0xFF000000;
      else
        v48 = 0;
      v49 = v45;
      if (DWORD1(v173) != v47)
        v49 = 0;
      if (LODWORD(v12) + (_DWORD)v173 == *(_DWORD *)(a2 + 20) + v46)
        v50 = v45 & 0xFF00;
      else
        v50 = 0;
      v51 = v45 & 0xFF0000;
      if (HIDWORD(v12) + DWORD1(v173) == *(_DWORD *)(a2 + 24) + v47)
        v52 = v51;
      else
        v52 = 0;
      v53 = v49 | v48 | v50 | v52;
      v54 = (int)v173 - (uint64_t)*(int *)(a1 + 12);
      v55 = *(_DWORD *)(a1 + 16) - (HIDWORD(v12) + DWORD1(v173)) + *(_DWORD *)(a1 + 24);
      v172[0] = v55;
      v172[1] = v54;
      if ((a3 & 0x80000000) == 0)
      {
        if (v53)
        {
          v56 = *(_DWORD *)(a1 + 48);
          v57 = (char *)(*(_QWORD *)(a1 + 56) + v54 + (v56 * v55));
          CGSCombineMask(v57, v56, v57, v56, v13, v14, v53);
        }
        if (*(_DWORD *)(a1 + 20) == (_DWORD)v13 && *(_DWORD *)(a1 + 24) == v14)
          goto LABEL_15;
LABEL_96:
        v88 = v172[0];
LABEL_97:
        if (v172[1] >= 1)
          CGBlt_fillBytes(v172[1], v170, 0, (char *)(*(_QWORD *)(a1 + 56) + (*(_DWORD *)(a1 + 48) * v88)), *(_DWORD *)(a1 + 48));
        if (v88 >= 1)
          bzero(*(void **)(a1 + 56), (*(_DWORD *)(a1 + 48) * v88));
        v89 = *(_DWORD *)(a1 + 20);
        if (v89 > (int)v13 + v172[1])
          CGBlt_fillBytes(v89 - (v13 + v172[1]), v170, 0, (char *)(*(_QWORD *)(a1 + 56) + (*(_DWORD *)(a1 + 48) * v88) + (int)v13 + v172[1]), *(_DWORD *)(a1 + 48));
        v90 = *(_DWORD *)(a1 + 24);
        v91 = __OFSUB__(v90, v170 + v88);
        v92 = v90 - (v170 + v88);
        if (!((v92 < 0) ^ v91 | (v92 == 0)))
          bzero((void *)(*(_QWORD *)(a1 + 56) + (*(_DWORD *)(a1 + 48) * (v170 + v88))), (*(_DWORD *)(a1 + 48) * v92));
        goto LABEL_15;
      }
      v93 = v13 - ((v53 & 0xFF000000) != 0) - (v50 != 0);
      v94 = v14 - (v52 != 0) - (v49 != 0);
      if (v93 < 1 || v94 < 1)
        goto LABEL_15;
      if (v52)
        v96 = v55 + 1;
      else
        v96 = v55;
      if ((v53 & 0xFF000000) != 0)
        LODWORD(v54) = v54 + 1;
      v97 = *(_DWORD *)(a1 + 48);
      v98 = (char *)(*(_QWORD *)(a1 + 56) + (v97 * v96) + (int)v54);
LABEL_115:
      CGBlt_fillBytes(v93, v94, 0, v98, v97);
      goto LABEL_15;
    }
    v101 = v173;
    if ((_DWORD)v173 == *v6)
    {
      v102 = HIBYTE(v58);
      if ((_DWORD)v173 == *v7)
        v102 = 255 - (((HIBYTE(v100) ^ 0xFF) * (v102 ^ 0xFF) + (((HIBYTE(v100) ^ 0xFF) * (v102 ^ 0xFF)) >> 8) + 1) >> 8);
    }
    else
    {
      *v6 = v173;
      v102 = HIBYTE(v100);
    }
    v145 = DWORD1(v173);
    if (DWORD1(v173) == *(_DWORD *)(a1 + 16))
    {
      v146 = v58;
      if (DWORD1(v173) == *(_DWORD *)(a2 + 16))
        v146 = 255
             - (((v100 ^ 0xFF) * (v58 ^ 0xFF)
               + (((v100 ^ 0xFF) * (v58 ^ 0xFFu)) >> 8)
               + 1) >> 8);
    }
    else
    {
      *(_DWORD *)(a1 + 16) = DWORD1(v173);
      v146 = v100;
    }
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 20))
    {
      v147 = BYTE1(v58);
      if (v101 + (_DWORD)v13 == *(_DWORD *)(a2 + 20) + *(_DWORD *)(a2 + 12))
        v147 = 255
             - (((BYTE1(v100) ^ 0xFF) * (BYTE1(v58) ^ 0xFF) + (((BYTE1(v100) ^ 0xFF) * (BYTE1(v58) ^ 0xFFu)) >> 8) + 1) >> 8);
    }
    else
    {
      *(_DWORD *)(a1 + 20) = v13;
      v147 = BYTE1(v100);
    }
    v148 = BYTE2(v100);
    if (v14 == *(_DWORD *)(a1 + 24))
    {
      v148 = 255 - (((v148 ^ 0xFF) * (BYTE2(v58) ^ 0xFF) + (((v148 ^ 0xFF) * (BYTE2(v58) ^ 0xFF)) >> 8) + 1) >> 8);
      if (v145 + v14 != *(_DWORD *)(a2 + 24) + *(_DWORD *)(a2 + 16))
        v148 = BYTE2(v58);
    }
    else
    {
      *(_DWORD *)(a1 + 24) = v14;
    }
    v124 = v146 | (v102 << 24) | (v147 << 8) | (v148 << 16);
LABEL_205:
    *(_DWORD *)(a1 + 64) = v124;
    return 1;
  }
  if (!*(_QWORD *)(a2 + 56))
  {
    if (a3 < 0)
      goto LABEL_213;
    v99 = v6;
LABEL_212:
    v149 = ripl_Containment(&v173, v99, v58);
    *(_OWORD *)v6 = v173;
    *(_DWORD *)(a1 + 64) = v149;
    return 1;
  }
  if ((a3 & 0x80000000) == 0)
  {
    v165 = *((_QWORD *)&v173 + 1);
    v135 = ripl_Containment(&v173, v6, v58);
    v136 = (v13 + 3) & 0xFFFFFFFC;
    if ((unint64_t)(v14 * (uint64_t)v136 + 4) >> 31)
      v137 = 0xFFFFFFFFLL;
    else
      v137 = (v14 * v136 + 19) & 0xFFFFFFF0;
    if ((v137 & 0x80000000) == 0)
    {
      v138 = (char *)malloc_type_malloc(v137, 0xF308BA06uLL);
      *(_QWORD *)(a1 + 56) = v138;
      if (v138)
      {
        *(_DWORD *)(a1 + 48) = v136;
        *(_DWORD *)(a1 + 28) &= ~2u;
        *(_QWORD *)&v139 = v173;
        v140 = DWORD1(v173);
        v141 = v173;
        *((_QWORD *)&v139 + 1) = v165;
        *(_OWORD *)(a1 + 12) = v139;
        CGBlt_copyBytes(v13, v14, (char *)(*(_QWORD *)(a2 + 56)+ (*(_DWORD *)(a2 + 48)* (*(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 24) - HIDWORD(v173) - v140))- *(int *)(a2 + 12)+ v141), v138, *(_DWORD *)(a2 + 48), (v13 + 3) & 0xFFFFFFFC);
        if (v135)
          CGSCombineMask(*(char **)(a1 + 56), *(_DWORD *)(a1 + 48), *(char **)(a1 + 56), *(_DWORD *)(a1 + 48), v13, v14, v135);
        goto LABEL_20;
      }
    }
    goto LABEL_159;
  }
  v158 = (*(int *)(a1 + 20) + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if ((v158 * *(int *)(a1 + 24) + 4) >> 31)
    v159 = 0xFFFFFFFFLL;
  else
    v159 = ((_DWORD)v158 * *(_DWORD *)(a1 + 24) + 19) & 0xFFFFFFF0;
  if ((v159 & 0x80000000) == 0)
  {
    v160 = malloc_type_malloc(v159, 0x5FA7D7EEuLL);
    *(_QWORD *)(a1 + 56) = v160;
    if (v160)
    {
      *(_DWORD *)(a1 + 48) = v158;
      *(_DWORD *)(a1 + 28) &= ~2u;
      memset(v160, 255, v159);
      CGSCombineMask(0, 0, *(char **)(a1 + 56), v158, *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 64));
      *(_DWORD *)(a1 + 64) = 0;
      v82 = HIDWORD(v173);
      v81 = *(_QWORD *)(a2 + 56);
      v15 = *(_QWORD *)(a1 + 56);
LABEL_90:
      v83 = v82 + DWORD1(v173);
      v84 = *(_DWORD *)(a2 + 48);
      v85 = (uint8x16_t *)(v81
                         + (*(_DWORD *)(a2 + 24) + *(_DWORD *)(a2 + 16) - v83) * v84
                         + (int)v173
                         - (uint64_t)*(int *)(a2 + 12));
      v86 = (int)v173 - (uint64_t)*(int *)(a1 + 12);
      v172[0] = *(_DWORD *)(a1 + 16) - v83 + *(_DWORD *)(a1 + 24);
      v172[1] = v86;
      if (a3 >= 0)
        v87 = 256;
      else
        v87 = 1024;
      CGBlt_combineBytes(v13, v14, v85, (__n128 *)(v15 + *(_DWORD *)(a1 + 48) * v172[0] + v86), v84, *(_DWORD *)(a1 + 48), v87, v12, v10, v11);
      if (a3 < 0)
        goto LABEL_15;
      LODWORD(v13) = v171;
      if (*(_DWORD *)(a1 + 20) == v171)
      {
        LODWORD(v13) = *(_DWORD *)(a1 + 20);
        if (*(_DWORD *)(a1 + 24) == v170)
          goto LABEL_15;
      }
      goto LABEL_96;
    }
  }
LABEL_159:
  v133 = *(void **)(a1 + 56);
  if (v133 && (*(_BYTE *)(a1 + 28) & 2) == 0)
    free(v133);
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  v134 = *(void **)(a1 + 72);
  if (v134 && v134 != &the_empty_shape)
    free(v134);
  result = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t CGBlt_combineBytes(uint64_t result, int a2, uint8x16_t *a3, __n128 *a4, int a5, int a6, __int16 a7, double a8, int8x16_t a9, __n128 a10)
{
  int v10;
  uint64_t v11;
  int8x16_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  uint8x16_t *v15;
  uint64_t v16;
  uint8x16_t v17;
  uint8x16_t v18;
  uint8x16_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint8x16_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int32 v27;
  uint16x8_t v28;
  unsigned int v29;
  uint16x8_t v30;
  uint16x8_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 v34;
  uint64_t i;
  unint64_t v36;
  __n128 *v37;
  int8x16_t *v38;
  uint64_t v39;
  int8x16_t v40;
  int8x16_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned __int32 v44;
  unint64_t v45;
  __int8 v46;
  int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint8x16_t *v57;

  v10 = a7 & 0xF00;
  if (v10 != 1280)
  {
    if (v10 != 1024)
    {
      if (v10 == 256 && (int)result >= 1 && a2 >= 1)
      {
        v11 = 0;
        v12 = (int8x16_t)vdupq_n_s16(0xFE01u);
        do
        {
          if (result >= 0x20)
          {
            v16 = 0;
            v15 = a3;
            v14 = (unsigned __int8 *)a4;
            do
            {
              v18 = *v15;
              v17 = v15[1];
              v15 += 2;
              v19 = *((uint8x16_t *)v14 + 1);
              v20 = vminq_u16(vmull_u8(*(uint8x8_t *)v18.i8, *(uint8x8_t *)v14), (uint16x8_t)v12);
              v21 = vminq_u16(vmull_high_u8(v18, *(uint8x16_t *)v14), (uint16x8_t)v12);
              v22 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v20, v20, 8uLL), 8uLL), vrsraq_n_u16(v21, v21, 8uLL), 8uLL);
              v23 = vminq_u16(vmull_u8(*(uint8x8_t *)v17.i8, *(uint8x8_t *)v19.i8), (uint16x8_t)v12);
              v24 = vminq_u16(vmull_high_u8(v17, v19), (uint16x8_t)v12);
              a9 = (int8x16_t)vrsraq_n_u16(v24, v24, 8uLL);
              a10 = (__n128)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v23, v23, 8uLL), 8uLL), (uint16x8_t)a9, 8uLL);
              *(uint8x16_t *)v14 = v22;
              *((__n128 *)v14 + 1) = a10;
              v14 += 32;
              v13 = v16 + 32;
              v25 = v16 + 64;
              v16 += 32;
            }
            while (v25 <= result);
          }
          else
          {
            v13 = 0;
            v14 = (unsigned __int8 *)a4;
            v15 = a3;
          }
          v26 = v13 | 4;
          if ((v13 | 4) <= result)
          {
            do
            {
              v27 = v15->i32[0];
              v15 = (uint8x16_t *)((char *)v15 + 4);
              a9.i32[0] = v27;
              v28 = vmovl_u8(*(uint8x8_t *)a9.i8);
              a10.n128_u32[0] = *(_DWORD *)v14;
              LOBYTE(v29) = v28.i8[0];
              BYTE1(v29) = v28.i8[2];
              BYTE2(v29) = v28.i8[4];
              HIBYTE(v29) = v28.i8[6];
              v30 = vmovl_u8((uint8x8_t)a10.n128_u64[0]);
              a10.n128_u8[4] = 0;
              a10.n128_u8[5] = 0;
              a10.n128_u8[6] = 0;
              a10.n128_u8[7] = 0;
              a10.n128_u8[0] = v30.i8[0];
              a10.n128_u8[1] = v30.u8[2];
              a10.n128_u8[2] = v30.u8[4];
              a10.n128_u8[3] = v30.u8[6];
              v31 = vminq_u16(vmull_u8((uint8x8_t)v29, (uint8x8_t)a10.n128_u32[0]), (uint16x8_t)v12);
              a9 = (int8x16_t)vrsraq_n_u16(v31, v31, 8uLL);
              *(uint8x8_t *)a9.i8 = vqrshrn_n_u16((uint16x8_t)a9, 8uLL);
              *(int8x8_t *)a9.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a9, v12));
              *(_DWORD *)v14 = a9.i32[0];
              v14 += 4;
              v26 += 4;
            }
            while (v26 <= result);
            v13 = v26 - 4;
          }
          if (v13 + 1 <= result)
          {
            v32 = result - v13;
            v33 = v14;
            do
            {
              v34 = v15->i8[0];
              v15 = (uint8x16_t *)((char *)v15 + 1);
              a10.n128_u8[4] = 0;
              a10.n128_u8[5] = 0;
              a10.n128_u8[6] = 0;
              a10.n128_u8[7] = 0;
              a10.n128_u8[0] = *v33++;
              a9 = (int8x16_t)vminq_u16(vmull_u8((uint8x8_t)v34, (uint8x8_t)a10.n128_u8[0]), (uint16x8_t)v12);
              *(uint8x8_t *)a9.i8 = vqrshrn_n_u16(vrsraq_n_u16((uint16x8_t)a9, (uint16x8_t)a9, 8uLL), 8uLL);
              *v14 = a9.i8[0];
              v14 = v33;
              --v32;
            }
            while (v32);
          }
          a3 = (uint8x16_t *)((char *)a3 + a5);
          a4 = (__n128 *)((char *)a4 + a6);
          ++v11;
        }
        while (v11 != a2);
      }
      return result;
    }
    if ((int)result < 1 || a2 < 1)
      return result;
    v47 = a3 & 3;
    if ((a3 & 3) != 0)
    {
      v48 = 8 - v47;
      v49 = 4 - v47;
      v50 = result - v49;
      if (v48 > result)
      {
        v49 = result;
        v50 = 0;
      }
    }
    else
    {
      if (result >= 4)
        v49 = 0;
      else
        v49 = result;
      if (result >= 4)
        v50 = result;
      else
        v50 = 0;
    }
    v51 = v50 >> 2;
    v52 = v50 & 3;
    while (1)
    {
      v53 = v49;
      v54 = v51;
      if (v49)
        break;
LABEL_49:
      if (v54)
      {
        v56 = v54 - 1;
        v57 = a3;
        do
        {
          if (v57->i32[0] == -1)
            a4->n128_u32[0] = 0;
          v57 = (uint8x16_t *)((char *)v57 + 4);
          a4 = (__n128 *)((char *)a4 + 4);
          --v54;
        }
        while (v54);
        a3 = (uint8x16_t *)((char *)a3 + 4 * v56 + 4);
        v53 = v52;
        if (v52)
          break;
      }
      a3 = (uint8x16_t *)((char *)a3 + a5 - (uint64_t)(int)result);
      a4 = (__n128 *)((char *)a4 + a6 - (uint64_t)(int)result);
      if (!--a2)
        return result;
    }
    v55 = (v53 - 1);
    a3 = (uint8x16_t *)((char *)a3 + v55 + 1);
    a4 = (__n128 *)((char *)a4 + v55 + 1);
    goto LABEL_49;
  }
  if ((int)result >= 1 && a2 >= 1)
  {
    for (i = 0; i != a2; ++i)
    {
      if (result >= 0x20)
      {
        v39 = 0;
        v38 = (int8x16_t *)a3;
        v37 = a4;
        do
        {
          v41 = *v38;
          v40 = v38[1];
          v38 += 2;
          a9 = vmvnq_s8(v40);
          *(int8x16_t *)v37 = vmvnq_s8(v41);
          v37[1] = (__n128)a9;
          v37 += 2;
          v36 = v39 + 32;
          v42 = v39 + 64;
          v39 += 32;
        }
        while (v42 <= result);
      }
      else
      {
        v36 = 0;
        v37 = a4;
        v38 = (int8x16_t *)a3;
      }
      v43 = v36 | 4;
      if ((v36 | 4) <= result)
      {
        do
        {
          v44 = v38->i32[0];
          v38 = (int8x16_t *)((char *)v38 + 4);
          a9.i32[0] = v44;
          a9 = (int8x16_t)vmovl_u8(*(uint8x8_t *)a9.i8);
          *(int8x8_t *)a9.i8 = veor_s8(*(int8x8_t *)a9.i8, (int8x8_t)0xFF00FF00FF00FFLL);
          *(int8x8_t *)a9.i8 = vmovn_s16((int16x8_t)a9);
          v37->n128_u32[0] = a9.i32[0];
          v37 = (__n128 *)((char *)v37 + 4);
          v43 += 4;
        }
        while (v43 <= result);
        v36 = v43 - 4;
      }
      if (v36 + 1 <= result)
      {
        v45 = result - v36;
        do
        {
          v46 = v38->i8[0];
          v38 = (int8x16_t *)((char *)v38 + 1);
          v37->n128_u8[0] = ~v46;
          v37 = (__n128 *)((char *)v37 + 1);
          --v45;
        }
        while (v45);
      }
      a3 = (uint8x16_t *)((char *)a3 + a5);
      a4 = (__n128 *)((char *)a4 + a6);
    }
  }
  return result;
}

uint64_t ripl_Containment(_DWORD *a1, _DWORD *a2, int a3)
{
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  v3 = a3 & 0xFF000000;
  v4 = a1[1];
  v5 = a2[1];
  if (*a1 != *a2)
    v3 = 0;
  v6 = a3;
  if (v4 != v5)
    v6 = 0;
  if (a1[2] + *a1 == a2[2] + *a2)
    v7 = a3 & 0xFF00;
  else
    v7 = 0;
  if (a1[3] + v4 == a2[3] + v5)
    v8 = a3 & 0xFF0000;
  else
    v8 = 0;
  return v6 | v3 | v7 | v8;
}

float RIPColorCreateWithColor(int a1, double *a2, uint64_t a3, double a4)
{
  char *v8;
  float *v9;
  double v10;
  float v11;
  float result;

  v8 = (char *)malloc_type_malloc(0xA0uLL, 0x106004074580882uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &ripc_class;
  *((_DWORD *)v8 + 6) = a1;
  if (a3)
  {
    v9 = (float *)(v8 + 28);
    do
    {
      v10 = *a2++;
      v11 = v10;
      *v9++ = v11;
      --a3;
    }
    while (a3);
  }
  result = a4;
  *((float *)v8 + 39) = result;
  return result;
}

_QWORD *RIPLayerMask(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  BOOL v10;
  _QWORD *v11;

  if (a2)
  {
    v9 = (uint64_t)result;
    if (*a2)
      v10 = result == 0;
    else
      v10 = 1;
    if (!v10)
    {
      if (*result)
      {
        v11 = (_QWORD *)result[4];
        if (v11 == (_QWORD *)a2[4])
        {
          result = (_QWORD *)RIPGetDepthForLayerFormat(0, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          if (v11 == result)
            return (_QWORD *)ripl_Combine(v9, (uint64_t)a2, -2);
        }
      }
    }
  }
  return result;
}

char *RIPLayerGaussianBlur(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  signed int v10;
  _DWORD *v12;
  int v13;
  int v15;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  dispatch_once_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;
  double *v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64x2_t v31;
  uint64_t v32;
  int32x2_t v33;
  int32x2_t v34;
  int64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  int64x2_t v38;
  uint64x2_t v39;
  float64x2_t __x;
  long double v41;
  int32x2_t v42;
  int64x2_t v43;
  __int128 v44;
  _BYTE v45[72];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v10 = vcvtpd_s64_f64(fabs(a9));
  if (!*(_QWORD *)a1 || v10 > 0x7FFFFFF)
    return 0;
  v12 = *(_DWORD **)(a1 + 32);
  v13 = (*v12 >> 8) & 0xF;
  if (v13 != 3 && v13 != 0)
    return 0;
  v15 = HIWORD(*v12) & 0x3F;
  if (v15 != 32 && v15 != 8)
    return 0;
  v21 = RIPGetDepthForLayerFormat(0, a2, a3, a4, a5, a6, a7, a8);
  v44 = *(_OWORD *)(a1 + 12);
  *(_QWORD *)&v44 = (v44 - v10) | ((unint64_t)(DWORD1(v44) - v10) << 32);
  *((_QWORD *)&v44 + 1) = (DWORD2(v44) + 2 * v10) | ((unint64_t)(HIDWORD(v44)
                                                                                                  + 2 * v10) << 32);
  if (v12 == (_DWORD *)v21)
    v22 = 0;
  else
    v22 = 17;
  if (v12 == (_DWORD *)v21)
    v23 = 0;
  else
    v23 = *(_QWORD *)(a1 + 32);
  v24 = RIPLayerCreate(*(_QWORD *)a1, (uint64_t)&v44, v22, v23, a2, v18, v19, v20);
  if (v24)
  {
    if (v10 < 9)
    {
      if (v10 < 0)
      {
        v27 = (double *)v45;
LABEL_36:
        if ((RIPLayerSymmetricConvolve((uint64_t)v24, a1, v27, v10) & 1) == 0)
        {
          (*(void (**)(char *))(*(_QWORD *)v24 + 24))(v24);
          v24 = 0;
        }
        if (v27 != (double *)v45)
          free(v27);
        return v24;
      }
      v26 = (v10 + 1);
      v27 = (double *)v45;
    }
    else
    {
      v26 = (v10 + 1);
      v27 = (double *)malloc_type_malloc(8 * v26, 0x100004000313F17uLL);
    }
    v28 = 0;
    v29 = (double)v10 * 0.5;
    v30 = 1.0 / (v29 * 2.50662827);
    v39 = (uint64x2_t)vdupq_n_s64(v26 - 1);
    v31 = (uint64x2_t)xmmword_185004A00;
    v32 = (v26 + 1) & 0x1FFFFFFFELL;
    v37 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v29 * (v29 + v29)), 0);
    v38 = vdupq_n_s64(2uLL);
    do
    {
      v42 = vmovn_s64((int64x2_t)vcgeq_u64(v39, v31));
      v43 = (int64x2_t)v31;
      v33.i32[0] = v28;
      v33.i32[1] = v28 + 1;
      v34 = vmul_s32(v33, v33);
      v35.i64[0] = v34.i32[0];
      v35.i64[1] = v34.i32[1];
      __x = vdivq_f64(vnegq_f64(vcvtq_f64_s64(v35)), v37);
      v41 = exp(__x.f64[1]);
      v36.f64[0] = exp(__x.f64[0]);
      v36.f64[1] = v41;
      if ((v42.i8[0] & 1) != 0)
        v27[v28] = v30 * v36.f64[0];
      if ((v42.i8[4] & 1) != 0)
        v27[v28 + 1] = vmuld_lane_f64(v30, v36, 1);
      v28 += 2;
      v31 = (uint64x2_t)vaddq_s64(v43, v38);
    }
    while (v32 != v28);
    goto LABEL_36;
  }
  return v24;
}

uint64_t RIPLayerSymmetricConvolve(uint64_t a1, uint64_t a2, double *a3, unsigned int a4)
{
  unsigned int *v7;
  uint64_t v8;
  unsigned int v10;
  int v11;
  int v13;
  unsigned int v17;
  unsigned int v18;
  int8x16_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  __int128 v31;
  uint64_t v32;
  __int32 v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int Mask;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unsigned int v47;
  __n128 v48;
  int v49;
  unsigned int v50;
  int v51;
  void *v52;
  unsigned int v53;
  int v54;
  int v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int v59;
  uint64_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int v63;
  __int128 v64;
  int32x4_t v65;
  int32x4_t v66;

  if (!a1)
    return 0;
  if (!*(_QWORD *)a1 || a2 == 0)
    return 0;
  if (!*(_QWORD *)a2)
    return 0;
  v7 = *(unsigned int **)(a1 + 32);
  if (!v7 || v7 != *(unsigned int **)(a2 + 32))
    return 0;
  v65 = 0uLL;
  v10 = *v7;
  v11 = (*v7 >> 8) & 0xF;
  if (v11 != 3 && v11 != 0)
    return 0;
  v13 = HIWORD(v10) & 0x3F;
  if (v13 != 32 && v13 != 8)
    return 0;
  v18 = *(_DWORD *)(a1 + 12);
  v17 = *(_DWORD *)(a1 + 16);
  v19 = *(int8x16_t *)(a2 + 12);
  v66.i64[0] = __PAIR64__(v17, v18);
  v20 = 2 * a4;
  v60 = v19.i64[0];
  v56 = (int32x4_t)vextq_s8(v19, v19, 8uLL);
  v66.u64[1] = (unint64_t)vadd_s32(*(int32x2_t *)v56.i8, vdup_n_s32(2 * a4));
  if ((CGSBoundsIntersection((int *)(a1 + 12), v66.i32, &v65) & 1) == 0)
    return 0;
  v27 = v65.i64[0];
  v28.i64[0] = v60;
  v28.i64[1] = v66.i64[1];
  v29 = vsubq_s32(vaddq_s32(v65, v28), v66);
  v30 = vaddq_s32((int32x4_t)vdupq_laneq_s64((int64x2_t)vsubq_s32(v65, v28), 1), v56);
  *(_QWORD *)&v31 = v29.i64[0];
  *((_QWORD *)&v31 + 1) = v30.i64[0];
  v64 = v31;
  *(int32x2_t *)&v31 = vcgtz_s32(vrev64_s32(*(int32x2_t *)v30.i8));
  if ((DWORD1(v31) & v31 & 1) == 0)
    return 0;
  v32 = *(_QWORD *)(a1 + 56);
  if (v32)
  {
    v33 = v65.i32[3];
  }
  else
  {
    v57 = v29;
    v61 = v30;
    if (!ripl_CreateMask(a1, 1, v21, v22, v23, v24, v25, v26))
      return 0;
    v32 = *(_QWORD *)(a1 + 56);
    v10 = *v7;
    v18 = *(_DWORD *)(a1 + 12);
    v17 = *(_DWORD *)(a1 + 16);
    v27 = v65.i64[0];
    v33 = v65.i32[3];
    v29 = v57;
    v30 = v61;
  }
  v34 = v30.u32[1];
  v35 = v10 >> 25;
  v36 = v27 - v18;
  v37 = *(_DWORD *)(a1 + 24) + v17 - v33 - HIDWORD(v27);
  v38 = *(_DWORD *)(a1 + 48);
  v39 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a2 + 72))
  {
    if (!v39)
    {
      v58 = v29;
      v62 = v30;
      v54 = v37;
      v40 = v32;
      v41 = v30.u32[1];
      Mask = ripl_CreateMask(a2, 0, v21, v22, v23, v24, v25, v26);
      v34 = v41;
      v8 = 0;
      if (!Mask)
        return v8;
      v39 = *(_QWORD *)(a2 + 56);
      v32 = v40;
      v37 = v54;
      v29 = v58;
      v30 = v62;
    }
    goto LABEL_40;
  }
  if (v39 && !*(_DWORD *)(a2 + 64))
  {
LABEL_40:
    v51 = *(_DWORD *)(a2 + 48);
    v48 = (__n128)vaddq_s32(v30, v29);
    v46 = (char *)(v39
                 + (*(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 24) - v48.n128_u32[1]) * v51
                 + (v29.i32[0] - (uint64_t)*(int *)(a2 + 12)) * v35);
    goto LABEL_42;
  }
  v63 = v36;
  v43 = (v36 + a4) * v35;
  v44 = v32;
  v45 = v32 + v43;
  v46 = (char *)(v45 + v38 * (v37 + a4));
  v47 = v20 + 3;
  if (v30.i32[1] < (v20 + 3))
    v47 = v30.u32[1];
  if (v30.i32[1] >= 0)
    v34 = v47;
  v55 = v37;
  v59 = v34;
  CGBlt_fillBytes(v30.i32[0], v34, -1, (char *)(v45 + v38 * (v37 + a4)), v38);
  v49 = *(_DWORD *)(a2 + 64);
  if (v49 && (v50 = ripl_Containment(&v64, (_DWORD *)(a2 + 12), v49)) != 0)
  {
    CGSCombineMask(0, 0, v46, *(_DWORD *)(a1 + 48), SDWORD2(v64), v59, v50);
    v34 = v59;
    v51 = v38;
    v32 = v44;
    v36 = v63;
    v37 = v55;
  }
  else
  {
    v51 = v38;
    v32 = v44;
    v36 = v63;
    v37 = v55;
    v34 = v59;
  }
LABEL_42:
  v52 = (void *)(v32 + (v38 * v37) + (int)v35 * (uint64_t)v36);
  v53 = v34;
  if (!symmetric_convolve(DWORD2(v64), v34, v52, *(_DWORD *)(a1 + 48), (uint64_t)v46, v51, a3, a4, v48, v35))return 0;
  v8 = 1;
  if (v53 != HIDWORD(v64))
  {
    CGBlt_copyBytes(v65.i32[2], (2 * a4) | 1, (char *)v52 + (*(_DWORD *)(a1 + 48) * (v20 + 2)), (char *)v52 + (*(_DWORD *)(a1 + 48) * (HIDWORD(v64) - 1)), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 48));
    CGBlt_copyBytes(v65.i32[2], HIDWORD(v64) - v53, (char *)v52 + *(_DWORD *)(a1 + 48) * ((2 * a4) | 1), (char *)v52 + *(_DWORD *)(a1 + 48) * ((2 * a4) | 1) + *(unsigned int *)(a1 + 48), 0, *(_DWORD *)(a1 + 48));
  }
  return v8;
}

uint64_t ripl_CreateMask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  int v9;
  uint64_t v11;
  uint64_t v12;
  dispatch_once_t v13;
  int v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  size_t v18;
  int *v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  unsigned int v24;
  void *v25;
  uint64_t v26;
  unsigned int v27;
  int v28;

  if (*(_QWORD *)(a1 + 56))
    return 1;
  v9 = a2;
  v11 = *(_QWORD *)(a1 + 32);
  v13 = RIPGetDepthForLayerFormat(0, a2, a3, a4, a5, a6, a7, a8);
  result = 0;
  if (v11 == v13)
  {
    v14 = *(_DWORD *)(a1 + 20);
    v28 = v14;
    if (v14 < 1)
      return 0;
    v15 = *(_DWORD *)(a1 + 24);
    v27 = v15;
    if (v15 < 1)
      return 0;
    v16 = (v14 + 3) & 0xFFFFFFFC;
    v17 = v15 * (unint64_t)v16;
    v18 = v17 > 0x7FFFFFFB ? 0xFFFFFFFFLL : ((_DWORD)v17 + 19) & 0xFFFFFFF0;
    if ((v18 & 0x80000000) != 0)
      return 0;
    v19 = *(int **)(a1 + 72);
    if (v19)
    {
      if (v19 != (int *)&the_empty_shape)
      {
        v26 = 0;
        shape_enum_clip_alloc(0, v12, v19, 1, 1, 0, 0, 0, v14, v15);
        if (v20)
        {
          v21 = v20;
          v22 = malloc_type_malloc(v18, 0x6021F689uLL);
          *(_QWORD *)(a1 + 56) = v22;
          if (v22)
          {
            *(_DWORD *)(a1 + 48) = v16;
            *(_DWORD *)(a1 + 28) &= ~2u;
            while (1)
            {
              v23 = shape_enum_clip_next((uint64_t)v21, (int *)&v26 + 1, &v26, &v28, &v27);
              if (!v23)
                break;
              CGBlt_fillBytes(v28, v27, ~v23 >> 31, (char *)(*(_QWORD *)(a1 + 56) + (int)v26 * (uint64_t)(int)v16 + SHIDWORD(v26)), v16);
            }
            free(v21);
LABEL_23:
            if (v9)
            {
              v25 = *(void **)(a1 + 72);
              if (v25)
              {
                if (v25 != &the_empty_shape)
                  free(v25);
                *(_DWORD *)(a1 + 64) = 0;
                *(_QWORD *)(a1 + 72) = 0;
              }
              else if (*(_DWORD *)(a1 + 64))
              {
                *(_DWORD *)(a1 + 64) = 0;
              }
            }
            return 1;
          }
          free(v21);
        }
        return 0;
      }
      result = (uint64_t)malloc_type_calloc(1uLL, v18, 0x43FD8F5FuLL);
      *(_QWORD *)(a1 + 56) = result;
      if (result)
      {
        *(_DWORD *)(a1 + 48) = v16;
        *(_DWORD *)(a1 + 28) &= ~2u;
        goto LABEL_23;
      }
    }
    else
    {
      result = (uint64_t)malloc_type_malloc(v18, 0x9C994440uLL);
      *(_QWORD *)(a1 + 56) = result;
      if (result)
      {
        *(_DWORD *)(a1 + 48) = v16;
        *(_DWORD *)(a1 + 28) &= ~2u;
        memset((void *)result, 255, v18);
        v24 = *(_DWORD *)(a1 + 64);
        if (v24)
          CGSCombineMask(0, 0, *(char **)(a1 + 56), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 24), v24);
        goto LABEL_23;
      }
    }
  }
  return result;
}

uint64_t CGSCombineMask(char *a1, int a2, char *__b, int a4, int a5, int a6, unsigned int a7)
{
  int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned __int8 *v22;
  char *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned __int8 *v32;
  char *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned __int8 *v36;
  char *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  char *v42;
  unsigned int v43;
  unsigned int v45;
  unsigned __int8 *v46;
  char *v47;
  int v48;
  unsigned __int8 *v49;
  int v50;
  char *v51;
  int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  char *v62;
  unsigned int v63;
  char *v64;
  unsigned int v65;
  char *v66;
  char *v67;
  int v68;
  int v69;
  uint64_t v70;

  v9 = a2;
  v10 = (unsigned __int8 *)a1;
  v11 = HIBYTE(a7);
  if (a5 == 1)
  {
    v12 = BYTE1(a7) + v11;
    v13 = 255;
    if (v12 <= 0xFE)
      v14 = 255 - v12;
    else
      v14 = 0;
    v15 = v14 > 0xFE;
  }
  else
  {
    if (a5 < 2)
      return 0;
    v13 = BYTE1(a7) ^ 0xFF;
    if (BYTE1(a7))
      v16 = -2;
    else
      v16 = -1;
    if (v11)
      v14 = v11 ^ 0xFF;
    else
      v14 = 255;
    if (v11)
      v17 = a5;
    else
      v17 = a5 + 1;
    v15 = v17 + v16;
  }
  if (a6 == 1)
  {
    v18 = BYTE2(a7) + a7;
    v19 = 255;
    if (v18 <= 0xFE)
      v20 = 255 - v18;
    else
      v20 = 0;
    v21 = v20 > 0xFE;
    if (a1)
      goto LABEL_22;
LABEL_50:
    if (v20 > 0xFE)
      goto LABEL_79;
    v42 = __b;
    if (v14 <= 0xFE)
    {
      *__b = (unsigned __int16)(v20 * v14 + ((v20 * v14) >> 8) + 1) >> 8;
      v42 = __b + 1;
    }
    if (v15 < 4)
    {
      v43 = v15;
      if (!v15)
      {
LABEL_76:
        if (v13 <= 0xFE)
          *v42 = (unsigned __int16)(v20 * v13 + ((v20 * v13) >> 8) + 1) >> 8;
        __b += a4;
LABEL_79:
        if (!v21)
          goto LABEL_92;
        v62 = __b;
        if (v14 <= 0xFE)
        {
          if (v13 < 0xFF)
          {
            v63 = v21 + 1;
            v64 = __b;
            do
            {
              *v64 = v14;
              v64[v15 + 1] = v13;
              v64 += a4;
              --v63;
            }
            while (v63 > 1);
LABEL_91:
            __b += v21 * (uint64_t)a4;
LABEL_92:
            if (v19 > 0xFE)
              return 1;
            if (v14 <= 0xFE)
              *__b++ = (unsigned __int16)(v19 * v14 + ((v19 * v14) >> 8) + 1) >> 8;
            if (v15 >= 4)
            {
              if (v15 >= 7)
                v69 = 7;
              else
                v69 = v15;
              v70 = (v15 - v69 + 3) & 0xFFFFFFFC;
              memset(__b, v19, v70 + 4);
              v15 = v15 - v70 - 4;
              __b += v70 + 4;
            }
            if (v15 >= 1)
            {
              memset(__b, v19, v15);
              __b += v15;
            }
            if (v13 > 0xFE)
              return 1;
            v61 = v19 * v13;
            goto LABEL_104;
          }
          v65 = v21 + 1;
          v66 = __b;
          do
          {
            *v66 = v14;
            v66 += a4;
            --v65;
          }
          while (v65 > 1);
          v62 = __b + 1;
        }
        if (v13 <= 0xFE)
        {
          v67 = &v62[v15];
          v68 = v21 + 1;
          do
          {
            *v67 = v13;
            v67 += a4;
            --v68;
          }
          while (v68 > 1);
        }
        goto LABEL_91;
      }
    }
    else
    {
      memset(v42, v20, (v15 & 0xFFFFFFFC) - 4 + 4);
      v43 = v15 & 3;
      v42 += v15 & 0xFFFFFFFC;
      if ((v15 & 3) == 0)
        goto LABEL_76;
    }
    memset(v42, v20, v43);
    v42 += v43;
    goto LABEL_76;
  }
  if (a6 < 2)
    return 0;
  v20 = BYTE2(a7) ^ 0xFF;
  v19 = a7 ^ 0xFF;
  if ((_BYTE)a7)
    v40 = -2;
  else
    v40 = -1;
  v41 = v40 + a6;
  if (BYTE2(a7))
    v21 = v41;
  else
    v21 = v41 + 1;
  if (!a1)
    goto LABEL_50;
LABEL_22:
  if (a1 != __b || a2 != a4)
  {
    CGBlt_copyBytes(a5, a6, a1, __b, a2, a4);
    v9 = a4;
    v10 = (unsigned __int8 *)__b;
  }
  if (v20 <= 0xFE)
  {
    v22 = v10;
    v23 = __b;
    if (v14 <= 0xFE)
    {
      v22 = v10 + 1;
      v24 = ((v20 * v14 + ((v20 * v14) >> 8) + 1) >> 8) * *v10;
      *__b = (unsigned __int16)(v24 + (v24 >> 8) + 1) >> 8;
      v23 = __b + 1;
    }
    v25 = v15;
    if (v15 >= 4)
    {
      do
      {
        v25 -= 4;
        v26 = (v20 * v22[1] + ((v20 * v22[1]) >> 8) + 1) >> 8;
        *v23 = (unsigned __int16)(v20 * *v22 + ((v20 * *v22) >> 8) + 1) >> 8;
        v23[1] = v26;
        v27 = v22[2];
        v28 = v22[3];
        v22 += 4;
        v23[2] = (unsigned __int16)(v20 * v27 + ((v20 * v27) >> 8) + 1) >> 8;
        v23[3] = (unsigned __int16)(v20 * v28 + ((v20 * v28) >> 8) + 1) >> 8;
        v23 += 4;
      }
      while (v25 > 3);
    }
    if (v25)
    {
      v29 = v25 + 1;
      do
      {
        v30 = *v22++;
        *v23++ = (unsigned __int16)(v20 * v30 + ((v20 * v30) >> 8) + 1) >> 8;
        --v29;
      }
      while (v29 > 1);
    }
    if (v13 <= 0xFE)
    {
      v31 = (v20 * v13 + ((v20 * v13) >> 8) + 1) >> 8;
      *v23 = (unsigned __int16)(v31 * *v22 + ((v31 * *v22) >> 8) + 1) >> 8;
    }
    __b += a4;
    v10 += v9;
  }
  if (v21 < 1)
    goto LABEL_64;
  v32 = v10;
  v33 = __b;
  if (v14 > 0xFE)
    goto LABEL_60;
  if (v13 >= 0xFF)
  {
    v45 = v21 + 1;
    v46 = v10;
    v47 = __b;
    do
    {
      v48 = *v46;
      v46 += v9;
      *v47 = (unsigned __int16)(v14 * v48 + ((v14 * v48) >> 8) + 1) >> 8;
      v47 += a4;
      --v45;
    }
    while (v45 > 1);
    v32 = v10 + 1;
    v33 = __b + 1;
LABEL_60:
    if (v13 <= 0xFE)
    {
      v49 = &v32[v15];
      v50 = v21 + 1;
      v51 = &v33[v15];
      do
      {
        v52 = *v49;
        v49 += v9;
        *v51 = (unsigned __int16)(v13 * v52 + ((v13 * v52) >> 8) + 1) >> 8;
        v51 += a4;
        --v50;
      }
      while (v50 > 1);
    }
    goto LABEL_63;
  }
  v34 = v15 + 1;
  v35 = v21 + 1;
  v36 = v10;
  v37 = __b;
  do
  {
    v38 = *v36;
    v39 = v36[v34];
    v36 += v9;
    *v37 = (unsigned __int16)(v14 * v38 + ((v14 * v38) >> 8) + 1) >> 8;
    v37[v34] = (unsigned __int16)(v13 * v39 + ((v13 * v39) >> 8) + 1) >> 8;
    v37 += a4;
    --v35;
  }
  while (v35 > 1);
LABEL_63:
  v10 += v9 * (uint64_t)v21;
  __b += v21 * (uint64_t)a4;
LABEL_64:
  if (v19 > 0xFE)
    return 1;
  if (v14 <= 0xFE)
  {
    v53 = *v10++;
    v54 = ((v19 * v14 + ((v19 * v14) >> 8) + 1) >> 8) * v53;
    *__b++ = (unsigned __int16)(v54 + (v54 >> 8) + 1) >> 8;
  }
  if (v15 >= 4)
  {
    do
    {
      v55 = v15;
      v15 -= 4;
      v56 = (v19 * v10[1] + ((v19 * v10[1]) >> 8) + 1) >> 8;
      *__b = (unsigned __int16)(v19 * *v10 + ((v19 * *v10) >> 8) + 1) >> 8;
      __b[1] = v56;
      v57 = v10[2];
      v58 = v10[3];
      v10 += 4;
      __b[2] = (unsigned __int16)(v19 * v57 + ((v19 * v57) >> 8) + 1) >> 8;
      __b[3] = (unsigned __int16)(v19 * v58 + ((v19 * v58) >> 8) + 1) >> 8;
      __b += 4;
    }
    while (v55 > 7);
  }
  if (v15 >= 1)
  {
    v59 = v15 + 1;
    do
    {
      v60 = *v10++;
      *__b++ = (unsigned __int16)(v19 * v60 + ((v19 * v60) >> 8) + 1) >> 8;
      --v59;
    }
    while (v59 > 1);
  }
  if (v13 > 0xFE)
    return 1;
  v61 = ((v19 * v13 + ((v19 * v13) >> 8) + 1) >> 8) * *v10;
LABEL_104:
  *__b = (unsigned __int16)(v61 + (v61 >> 8) + 1) >> 8;
  return 1;
}

uint64_t symmetric_convolve(unsigned int a1, unsigned int a2, void *a3, unsigned int a4, uint64_t a5, int a6, double *a7, unsigned int a8, __n128 a9, unsigned int a10)
{
  char v15;
  size_t v16;
  uint64_t v17;
  float *v18;
  float *v19;
  int v20;
  double v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  unsigned int v30;
  double *v31;
  double v32;
  int v33;
  float v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  double *v39;
  double v40;
  float v41;
  vImagePixelCount v42;
  vImagePixelCount v43;
  vImagePixelCount v44;
  char *v45;
  char *v46;
  char *v47;
  BOOL v48;
  unsigned int v50;
  char *v51;
  size_t v52;
  uint64_t v53;
  uint32_t v54;
  int v55;
  const int16_t *v56;
  unsigned int v57;
  char *v58;
  size_t v59;
  vImagePixelCount v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  size_t v65;
  char *v66;
  vImagePixelCount v67;
  uint64_t v68;
  int v69;
  const int16_t *v70;
  unsigned int v71;
  size_t v72;
  char *v73;
  vImagePixelCount v74;
  uint64_t v75;
  void *v76;
  float *v77;
  void *v78;
  vImagePixelCount v79;
  size_t v80;
  unsigned int v81;
  float *v82;
  unsigned int v83;
  unsigned int v84;
  char *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  void *v90;
  unsigned int v91;
  unsigned int v92;
  const int16_t *v93;
  float *v94;
  size_t rowBytes;
  vImagePixelCount v96;
  vImage_Buffer dest;
  vImage_Buffer src;
  uint64_t v99;

  v88 = a5;
  v91 = a4;
  v90 = a3;
  v99 = *MEMORY[0x1E0C80C00];
  if (a10 <= 7)
    v15 = 1;
  else
    v15 = 2;
  v87 = (2 * a8) | 1;
  v16 = MEMORY[0x1E0C80A78](v87 << v15, a9);
  v18 = (float *)((char *)&v79 - v17);
  v19 = (float *)((char *)&v79 - v17);
  if (v16 >= 0x201)
    v19 = (float *)malloc_type_malloc(v16, 0x1BD9F336uLL);
  v20 = 2 * a8;
  v21 = *a7;
  v92 = a8;
  v86 = a6;
  if (a10 > 4)
  {
    v34 = v21;
    v19[a8] = v34;
    if (a8)
    {
      v35 = a8 + 1;
      if (a8 + 1 > 2)
        v36 = a8 + 1;
      else
        v36 = 2;
      v37 = v36 - 1;
      v38 = a8 - 1;
      v39 = a7 + 1;
      do
      {
        v40 = *v39++;
        v41 = v40;
        v19[v35++] = v41;
        v19[v38--] = v41;
        --v37;
      }
      while (v37);
    }
    v93 = 0;
    v94 = v19;
  }
  else if (a8)
  {
    v22 = a8 + 1;
    if (a8 + 1 > 2)
      v23 = a8 + 1;
    else
      v23 = 2;
    v24 = v23 - 1;
    v25 = a7 + 1;
    v26 = v24;
    v27 = v21;
    do
    {
      v28 = *v25++;
      v27 = v27 + v28 * 2.0;
      --v26;
    }
    while (v26);
    v29 = 16384.0 / v27;
    *((_WORD *)v19 + a8) = (int)(v21 * v29);
    v30 = a8 - 1;
    v31 = a7 + 1;
    do
    {
      v32 = *v31++;
      v33 = (int)(v29 * v32);
      *((_WORD *)v19 + v22) = v33;
      *((_WORD *)v19 + v30--) = v33;
      ++v22;
      --v24;
    }
    while (v24);
    v93 = (const int16_t *)v19;
    v94 = 0;
  }
  else
  {
    v93 = (const int16_t *)v19;
    v94 = 0;
    *(_WORD *)v19 = (int)(v21 * (16384.0 / v21));
  }
  v89 = a2;
  v42 = v20 + a2;
  v83 = 2 * a8;
  v84 = a1;
  v43 = v20 + a1;
  v44 = (v43 + v20);
  v45 = (char *)malloc_type_calloc(1uLL, ((_DWORD)v44 * a10 + 15) & 0xFFFFFFF0, 0x25611276uLL);
  v46 = (char *)malloc_type_malloc(((_DWORD)v43 * a10 * (_DWORD)v42 + 15) & 0xFFFFFFF0, 0x1EE74473uLL);
  v47 = v46;
  if (v45)
    v48 = v46 == 0;
  else
    v48 = 1;
  if (v48)
  {
    if (v45)
      free(v45);
    if (v47)
      free(v47);
    return 0;
  }
  else
  {
    v82 = v18;
    v80 = v44 * a10;
    v50 = v92;
    v51 = v45;
    v52 = a10 * v92 * v43;
    bzero(v46, v52);
    v79 = v42;
    bzero(&v47[(_DWORD)v43 * a10 * ((_DWORD)v42 - v50)], v52);
    v85 = v51;
    src.data = v51;
    src.height = 1;
    src.width = v44;
    src.rowBytes = v80;
    v80 = (size_t)v47;
    dest.data = &v47[v52];
    dest.height = 1;
    dest.width = v43;
    dest.rowBytes = v43 * a10;
    v81 = a10;
    rowBytes = dest.rowBytes;
    v96 = v43;
    if (a10 == 1)
    {
      v54 = v87;
      v53 = v88;
      v55 = v86;
      v56 = v93;
      if (v89)
      {
        v57 = 0;
        v58 = &v85[v83];
        v59 = v84;
        v60 = v92;
        v61 = v89;
        do
        {
          memcpy(v58, (const void *)(v53 + v57), v59);
          vImageConvolve_Planar8(&src, &dest, 0, v60, 0, v56, 1u, v54, 0x4000, 0, 0x14u);
          dest.data = (char *)dest.data + v96;
          v57 += v55;
          --v61;
        }
        while (v61);
      }
    }
    else
    {
      v62 = v88;
      if (a10 == 4)
      {
        v54 = v87;
        v69 = v86;
        v70 = v93;
        if (v89)
        {
          v71 = 0;
          v72 = 4 * v84;
          v73 = &v85[8 * v92];
          v74 = v92;
          v75 = v89;
          do
          {
            memcpy(v73, (const void *)(v62 + v71), v72);
            vImageConvolve_ARGB8888(&src, &dest, 0, v74, 0, v70, 1u, v54, 0x4000, 0, 0x14u);
            dest.data = (char *)dest.data + rowBytes;
            v71 += v69;
            --v75;
          }
          while (v75);
        }
      }
      else
      {
        v54 = v87;
        v63 = v86;
        if (a10 == 16 && v89)
        {
          v64 = 0;
          v65 = 16 * v84;
          v66 = &v85[32 * v92];
          v67 = v92;
          v68 = v89;
          do
          {
            memcpy(v66, (const void *)(v62 + v64), v65);
            vImageConvolve_ARGBFFFF(&src, &dest, 0, v67, 0, v94, 1u, v54, 0, 0x14u);
            dest.data = (char *)dest.data + rowBytes;
            v64 += v63;
            --v68;
          }
          while (v68);
        }
      }
    }
    v76 = (void *)v80;
    src.data = (void *)v80;
    src.height = v79;
    src.width = v96;
    src.rowBytes = rowBytes;
    dest.data = v90;
    dest.height = v79;
    dest.width = v96;
    dest.rowBytes = v91;
    if (v81 == 1)
    {
      vImageConvolve_Planar8(&src, &dest, 0, 0, 0, v93, v54, 1u, 0x4000, 0, 4u);
      v77 = v82;
      v78 = v85;
    }
    else
    {
      v77 = v82;
      v78 = v85;
      if (v81 == 16)
      {
        vImageConvolve_ARGBFFFF(&src, &dest, 0, 0, 0, v94, v54, 1u, 0, 4u);
      }
      else if (v81 == 4)
      {
        vImageConvolve_ARGB8888(&src, &dest, 0, 0, 0, v93, v54, 1u, 0x4000, 0, 4u);
      }
    }
    free(v78);
    free(v76);
    if (v19 != v77)
      free(v19);
    return 1;
  }
}

char *RIPLayerCreateWithLayer(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  size_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  char *v51;
  uint64_t v52;
  int v53;
  char *v54;
  int v55;
  int v56;
  int32x2_t *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  void *v65;
  int v66;
  BOOL v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned int v81;
  char *v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  int v89;
  signed int v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;

  if (a3)
  {
    v5 = *a3;
    if (*a3)
    {
      if (a3[4])
      {
        v6 = a2 ? (uint64_t)a2 : (uint64_t)a3 + 12;
        if ((*(_DWORD *)(v6 + 8) & 0x80000000) == 0 && (*(_DWORD *)(v6 + 12) & 0x80000000) == 0)
        {
          v93 = 0;
          v94 = 0;
          v9 = (_DWORD **)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *))(v5 + 32))(a3, 16, &v93);
          if (v9)
          {
            v17 = *v9;
            if (*v9)
            {
              if (v17 == (_DWORD *)RIPGetDepthForLayerFormat(0, v10, v11, v12, v13, v14, v15, v16))
              {
                v23 = (*(uint64_t (**)(uint64_t))(a1 + 8))(a1);
                v24 = (char *)malloc_type_calloc(1uLL, v23, 0xC1091532uLL);
                v21 = v24;
                if (!v24)
                  goto LABEL_80;
                *(_QWORD *)v24 = a1;
                *((_DWORD *)v24 + 2) = 1;
                *(_OWORD *)(v24 + 12) = *(_OWORD *)v6;
                *((_DWORD *)v24 + 7) = 0;
                *((_QWORD *)v24 + 4) = v17;
                pthread_mutex_init((pthread_mutex_t *)(v24 + 80), 0);
              }
              else
              {
                v21 = RIPLayerCreate(a1, v6, a3[9] != 0, (uint64_t)v17, a4, v18, v19, v20);
                if (!v21)
                  goto LABEL_80;
              }
              if ((CGSBoundsIntersection((int *)v21 + 3, (int *)a3 + 3, &v93) & 1) == 0)
              {
                if (v17 == (_DWORD *)RIPGetDepthForLayerFormat(0, v25, v26, v27, v28, v29, v30, v31)
                  && (*((_DWORD *)v21 + 5) || *((_DWORD *)v21 + 6)))
                {
                  *((_QWORD *)v21 + 9) = &the_empty_shape;
                  *((_DWORD *)v21 + 16) = 12;
                }
                goto LABEL_80;
              }
              if ((*(uint64_t (**)(char *, uint64_t, char *))(*(_QWORD *)v21 + 32))(v21, 32, v21 + 12))
              {
                v39 = v93;
                v40 = HIDWORD(v93);
                v91 = HIDWORD(v93);
                v92 = v93;
                v42 = v94;
                v41 = HIDWORD(v94);
                v89 = HIDWORD(v94);
                v90 = v94;
                v43 = RIPGetDepthForLayerFormat(0, v32, v33, v34, v35, v36, v37, v38);
                if (v17 != (_DWORD *)v43)
                {
                  v44 = *((_QWORD *)v21 + 7);
                  if (!v44)
                    goto LABEL_79;
                  v45 = (int)v93 - (uint64_t)*((int *)v21 + 3);
                  v46 = *((_DWORD *)v21 + 6) + *((_DWORD *)v21 + 4) - (HIDWORD(v94) + HIDWORD(v93));
                  v47 = (int)v93 - (uint64_t)*((int *)a3 + 3);
                  v48 = *((_DWORD *)a3 + 4) - (HIDWORD(v94) + HIDWORD(v93)) + *((_DWORD *)a3 + 6);
                  CGBlt_copyBytes(v42 * (*v17 >> 25), v41, (char *)(a3[7] + (*((_DWORD *)a3 + 12) * v48) + (*v17 >> 25) * (uint64_t)(int)v47), (char *)(v44+ (*((_DWORD *)v21 + 12) * v46)+ (*v17 >> 25) * (uint64_t)((int)v93 - *((_DWORD *)v21 + 3))), *((_DWORD *)a3 + 12), *((_DWORD *)v21 + 12));
                  v49 = *((_QWORD *)v21 + 9);
                  if (!v49 || v49 == *((_QWORD *)v21 + 7))
                    goto LABEL_79;
                  v50 = *((_DWORD *)v21 + 16);
                  v51 = (char *)(v49 + v45 + (v50 * v46));
                  v52 = a3[9];
                  if (!v52 || v52 == a3[7])
                  {
                    CGBlt_fillBytes(v42, v41, -1, v51, *((_DWORD *)v21 + 16));
                    goto LABEL_79;
                  }
                  v53 = *((_DWORD *)a3 + 16);
                  v54 = (char *)(v52 + v47 + (v53 * v48));
                  v55 = v42;
                  v56 = v41;
                  goto LABEL_28;
                }
                v57 = (int32x2_t *)a3[9];
                if (v57)
                {
                  v58 = *((_DWORD *)a3 + 4);
                  v59 = *((_DWORD *)a3 + 3) - *((_DWORD *)v21 + 3);
                  v60 = *((_DWORD *)v21 + 5);
                  v61 = *((_DWORD *)v21 + 6);
                  v62 = v61 + *((_DWORD *)v21 + 4);
                  v63 = *((_DWORD *)a3 + 5);
                  v91 = v62 - (v58 + *((_DWORD *)a3 + 6));
                  v92 = v59;
                  shape_combine(0, 0, 0, v60, v61, 0, v59, v91, v63 + v59, v62 - v58, v57);
                  if (v64)
                  {
                    v65 = (void *)v64;
                    v66 = shape_bounds(v64, &v92, &v91, &v90, &v89);
                    if (v66)
                    {
                      v68 = v66 == 9 && v92 == 0 && v91 == 0;
                      if (v68 && v90 == *((_DWORD *)v21 + 5) && v89 == *((_DWORD *)v21 + 6))
                      {
                        if (v65 != &the_empty_shape)
                          free(v65);
                        goto LABEL_79;
                      }
                      *((_QWORD *)v21 + 9) = v65;
                      v73 = 4 * v66;
                      goto LABEL_78;
                    }
                  }
                  goto LABEL_77;
                }
                v69 = *((_DWORD *)a3 + 16);
                if (v69)
                {
                  v43 = ripl_Containment(&v93, (_DWORD *)a3 + 3, v69);
                  v70 = v43;
                  v71 = *((_DWORD *)v21 + 6);
                  v72 = *((int *)v21 + 5);
                  if (__PAIR64__(v41, v42) == __PAIR64__(v71, v72))
                  {
                    *((_DWORD *)v21 + 16) = v43;
                    goto LABEL_79;
                  }
                  v78 = (int)v93 - (uint64_t)*((int *)v21 + 3);
                  v40 = v71 + *((_DWORD *)v21 + 4) - (HIDWORD(v93) + HIDWORD(v94));
                  v91 = v40;
                  v92 = v78;
                  if ((_DWORD)v43)
                  {
                    v79 = (v72 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                    v80 = (int)v71 * v79 + 4;
                    v81 = (v71 * v79 + 19) & 0xFFFFFFF0;
                    if (v80 >> 31)
                      v43 = 0xFFFFFFFFLL;
                    else
                      v43 = v81;
                    if ((int)v43 >= 1)
                    {
                      v43 = (size_t)malloc_type_malloc(v43, 0x7F66252BuLL);
                      *((_QWORD *)v21 + 7) = v43;
                      if (v43)
                      {
                        v82 = (char *)(v43 + v40 * (int)v79 + v78);
                        *((_DWORD *)v21 + 7) &= ~2u;
                        *((_DWORD *)v21 + 12) = v79;
                        CGBlt_fillBytes(v42, v41, -1, v82, v79);
                        CGSCombineMask(0, 0, v82, v79, v42, v41, v70);
                        goto LABEL_79;
                      }
                    }
                    v86 = v42 + v78;
                  }
                  else
                  {
                    v86 = v78 + v42;
                  }
                  v87 = v41 + v40;
                  v84 = v78;
                }
                else
                {
                  v74 = *((int *)v21 + 5);
                  if (!a3[7])
                  {
                    v83 = *((_DWORD *)v21 + 6);
                    if (v42 == (_DWORD)v74 && v41 == v83)
                      goto LABEL_79;
                    v84 = v93 - *((_DWORD *)v21 + 3);
                    v85 = v83 + *((_DWORD *)v21 + 4) - (HIDWORD(v93) + HIDWORD(v94));
                    v91 = v85;
                    v92 = v84;
                    v86 = v84 + v42;
                    v87 = v41 + v85;
LABEL_75:
                    shape_alloc_bounds(v43, v84, v85, v86, v87);
                    *((_QWORD *)v21 + 9) = v88;
                    if (v88)
                    {
                      v73 = 36;
LABEL_78:
                      *((_DWORD *)v21 + 16) = v73;
                      goto LABEL_79;
                    }
LABEL_77:
                    *((_QWORD *)v21 + 9) = &the_empty_shape;
                    v73 = 12;
                    goto LABEL_78;
                  }
                  v75 = (v74 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                  if ((v75 * *((int *)v21 + 6) + 4) >> 31)
                    v43 = 0xFFFFFFFFLL;
                  else
                    v43 = ((_DWORD)v75 * *((_DWORD *)v21 + 6) + 19) & 0xFFFFFFF0;
                  if ((int)v43 >= 1)
                  {
                    v43 = (size_t)malloc_type_malloc(v43, 0x2D4D6C7EuLL);
                    if (v43)
                    {
                      v76 = *((_DWORD *)v21 + 6);
                      *((_DWORD *)v21 + 7) &= ~2u;
                      *((_DWORD *)v21 + 12) = v75;
                      *((_QWORD *)v21 + 7) = v43;
                      v56 = HIDWORD(v94);
                      v51 = (char *)(v43
                                   + (v76 + *((_DWORD *)v21 + 4) - (HIDWORD(v94) + HIDWORD(v93))) * (int)v75
                                   + (int)v93
                                   - (uint64_t)*((int *)v21 + 3));
                      v77 = (int)v93 - (uint64_t)*((int *)a3 + 3);
                      v91 = *((_DWORD *)a3 + 4) - (HIDWORD(v94) + HIDWORD(v93)) + *((_DWORD *)a3 + 6);
                      v92 = v77;
                      v53 = *((_DWORD *)a3 + 12);
                      v54 = (char *)(a3[7] + v77 + (v53 * v91));
                      v55 = v94;
                      v50 = v75;
LABEL_28:
                      CGBlt_copyBytes(v55, v56, v54, v51, v53, v50);
LABEL_79:
                      (*(void (**)(char *, char *))(*(_QWORD *)v21 + 48))(v21, v21 + 12);
                      goto LABEL_80;
                    }
                  }
                  v86 = v42 + v39;
                  v87 = v41 + v40;
                  v84 = v39;
                }
                v85 = v40;
                goto LABEL_75;
              }
            }
            else
            {
              v21 = 0;
            }
LABEL_80:
            (*(void (**)(uint64_t *, _QWORD))(*a3 + 48))(a3, 0);
            return v21;
          }
        }
      }
    }
  }
  return 0;
}

void load_allow_debugging_defaults(void *a1)
{
  char *v1;
  CFPropertyListRef v2;
  int v3;

  v1 = getenv("CGAllowDebuggingDefaults");
  if (v1)
  {
    v3 = 0;
    allow_debugging_defaults = sscanf(v1, "%i", &v3) > 0;
  }
  else
  {
    v2 = CFPreferencesCopyValue(CFSTR("CGAllowDebuggingDefaults"), (CFStringRef)*MEMORY[0x1E0C9B228], (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
    if ((get_BOOL((uint64_t)v2, (BOOL *)&allow_debugging_defaults) & 1) == 0)
      allow_debugging_defaults = 0;
    if (v2)
      CFRelease(v2);
  }
}

uint64_t get_BOOL(uint64_t result, BOOL *a2)
{
  const __CFBoolean *v3;
  CFTypeID v4;
  BOOL v5;
  int valuePtr;

  if (result)
  {
    v3 = (const __CFBoolean *)result;
    v4 = CFGetTypeID((CFTypeRef)result);
    if (v4 == CFBooleanGetTypeID())
    {
      if (a2)
      {
        v5 = CFBooleanGetValue(v3) == 0;
LABEL_5:
        LOBYTE(result) = !v5;
        goto LABEL_24;
      }
      return 1;
    }
    if (v4 != CFStringGetTypeID())
    {
LABEL_15:
      if (v4 != CFNumberGetTypeID())
        return 0;
      valuePtr = 0;
      result = CFNumberGetValue(v3, kCFNumberIntType, &valuePtr);
      if (!(_DWORD)result)
        return result;
      if (!a2)
        return 1;
      v5 = valuePtr == 0;
      goto LABEL_5;
    }
    if (CFStringCompare((CFStringRef)v3, CFSTR("Yes"), 1uLL)
      && CFStringCompare((CFStringRef)v3, CFSTR("True"), 1uLL)
      && CFStringCompare((CFStringRef)v3, CFSTR("1"), 1uLL))
    {
      if (CFStringCompare((CFStringRef)v3, CFSTR("No"), 1uLL)
        && CFStringCompare((CFStringRef)v3, CFSTR("False"), 1uLL)
        && CFStringCompare((CFStringRef)v3, CFSTR("0"), 1uLL))
      {
        goto LABEL_15;
      }
      if (!a2)
        return 1;
      LOBYTE(result) = 0;
LABEL_24:
      *a2 = result;
      return 1;
    }
    result = 1;
    if (a2)
      goto LABEL_24;
  }
  return result;
}

_DWORD *RGBAf16_pattern(uint64_t a1, _DWORD *a2, unsigned int a3, int a4, float *a5, float a6)
{
  float *v9;
  float v10;
  int v13;
  float v16;
  float v17;
  char *v23;

  v9 = *(float **)(*(_QWORD *)a1 + 64);
  _S10 = *v9;
  v10 = v9[1];
  if (a2 && a3 > 7 || (a2 = malloc_type_malloc(0x38uLL, 0x705560E0uLL)) != 0)
  {
    if (_S10 <= a6)
      _S0 = a6;
    else
      _S0 = _S10;
    if (v10 < a6)
      _S0 = v10;
    if (a5)
      v13 = a4;
    else
      v13 = 0;
    if (v13 == 1)
    {
      _S10 = _S0 * *a5;
      _S1 = _S10;
      _S2 = _S10;
    }
    else
    {
      if (v13 == 4)
      {
        v17 = a5[4];
        _S10 = _S0 * (float)((float)(v10 - *a5) - v17);
        _S1 = _S0 * (float)((float)(v10 - a5[1]) - v17);
        v16 = (float)(v10 - a5[2]) - v17;
        goto LABEL_18;
      }
      _S1 = _S10;
      _S2 = _S10;
      if (v13 == 3)
      {
        _S10 = _S0 * *a5;
        _S1 = _S0 * a5[1];
        v16 = a5[2];
LABEL_18:
        _S2 = _S0 * v16;
      }
    }
    *(_OWORD *)a2 = xmmword_185004F40;
    a2[6] = 0;
    *((_QWORD *)a2 + 2) = 1;
    __asm { FCVT            H3, S10 }
    *((_WORD *)a2 + 24) = _H3;
    if (_S0 >= v10)
      v23 = 0;
    else
      v23 = (char *)(a2 + 12);
    *((_QWORD *)a2 + 4) = a2 + 12;
    *((_QWORD *)a2 + 5) = v23;
    __asm { FCVT            H1, S1 }
    *((_WORD *)a2 + 25) = _H1;
    __asm { FCVT            H1, S2 }
    *((_WORD *)a2 + 26) = _H1;
    __asm { FCVT            H0, S0 }
    *((_WORD *)a2 + 27) = _H0;
  }
  return a2;
}

CFMutableSetRef __get_states_cache_block_invoke()
{
  CFMutableSetRef result;

  result = CFSetCreateMutable(0, 0, &get_states_cache_callbacks);
  get_states_cache_states = (uint64_t)result;
  return result;
}

CGColorRef CGColorCreateSRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  CGColorSpace *v4;
  CGColor *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CGFloat components[2];
  CGFloat v15;
  CGFloat v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  components[0] = red;
  components[1] = green;
  v15 = blue;
  v16 = alpha;
  v4 = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceSRGB"));
  v5 = CGColorCreate(v4, components);
  CGColorSpaceRelease(v4);
  if (!v5)
    CGPostError((uint64_t)"Color creation failed for SRGB colorspace %p, {%f, %f, %f %f}", v6, v7, v8, v9, v10, v11, v12, (char)v4);
  return v5;
}

void CGContextSetShouldSmoothFonts(CGContextRef c, BOOL shouldSmoothFonts)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGContextRef v8;

  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      CGGStateSetShouldSmoothFonts(*((_QWORD *)c + 12), shouldSmoothFonts);
      return;
    }
    v8 = c;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetShouldSmoothFonts", (uint64_t)v8, v2, v3, v4, v5, v6, v7);
}

CFTypeID CGFontGetTypeID(void)
{
  if (_block_invoke_once_3017 != -1)
    dispatch_once(&_block_invoke_once_3017, &__block_literal_global_7_3018);
  return CGFontGetTypeID_font_type_id;
}

uint64_t CGNotificationCenterAddCallback(uint64_t result, uint64_t a2, uint64_t a3, const __CFString *a4, const __CFString *a5)
{
  uint64_t v9;
  _QWORD *v10;
  const __CFString *v11;
  CFTypeRef v12;
  const __CFString *v13;
  _QWORD *v14;
  _QWORD *v15;

  if (a2)
  {
    v9 = result;
    v10 = malloc_type_malloc(0x28uLL, 0x2062DE7BuLL);
    *(_DWORD *)v10 = 1;
    v10[1] = a3;
    if (a4)
      v11 = a4;
    else
      v11 = CFSTR("kCGNotificationAnyName");
    v12 = CFRetain(v11);
    v13 = CFSTR("kCGNotificationAnyObject");
    if (a5)
      v13 = a5;
    v10[2] = v12;
    v10[3] = v13;
    v10[4] = a2;
    pthread_mutex_lock((pthread_mutex_t *)(v9 + 16));
    v14 = *(_QWORD **)(v9 + 80);
    v15 = malloc_type_malloc(0x10uLL, 0x2062DE7BuLL);
    if (v15)
    {
      *v15 = v10;
      v15[1] = v14;
      v14 = v15;
    }
    *(_QWORD *)(v9 + 80) = v14;
    return pthread_mutex_unlock((pthread_mutex_t *)(v9 + 16));
  }
  return result;
}

void CGContextSetRGBFillColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CGColorSpace *DeviceRGB;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CGContextRef v18;
  char v19;
  CGFloat v20[5];

  v20[4] = *(CGFloat *)MEMORY[0x1E0C80C00];
  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      v20[0] = red;
      v20[1] = green;
      v20[2] = blue;
      v20[3] = alpha;
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
      set_fill_color_with_components((uint64_t *)c, DeviceRGB, v20, v13, v14, v15, v16, v17, v19);
      CGColorSpaceRelease(DeviceRGB);
      return;
    }
    v18 = c;
  }
  else
  {
    v18 = 0;
  }
  handle_invalid_context((char)"CGContextSetRGBFillColor", (uint64_t)v18, v5, v6, v7, v8, v9, v10);
}

uint64_t (*__copy_icc_profile_description_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCopyDescriptionString");
  v1 = colorsync_smart_null_6743;
  if (result)
    v1 = result;
  copy_icc_profile_description_f = (uint64_t (*)(_QWORD))v1;
  return result;
}

void CGContextSetAllowsFontSubpixelQuantization(CGContextRef c, BOOL allowsFontSubpixelQuantization)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGContextRef v8;

  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      *(_BYTE *)(*((_QWORD *)c + 14) + 86) = allowsFontSubpixelQuantization;
      return;
    }
    v8 = c;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetAllowsFontSubpixelQuantization", (uint64_t)v8, v2, v3, v4, v5, v6, v7);
}

_QWORD *CGPDFScannerFinalize(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  uint64_t **v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *result;
  _QWORD *v13;

  v2 = *(unsigned int *)(a1 + 72);
  if ((v2 & 0x80000000) != 0)
  {
    pdf_error("Fatal: Attempted to remove more than args stack count. Argument stack is inconsistent.");
  }
  else if ((_DWORD)v2)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(a1 + 80) + v3;
      if ((*(_DWORD *)(v4 + 8) - 5) <= 4)
        pdf_object_release_compound_value(v4);
      v3 += 40;
    }
    while (40 * v2 != v3);
  }
  *(_DWORD *)(a1 + 72) -= v2;
  free(*(void **)(a1 + 80));
  v5 = *(const void **)(a1 + 56);
  if (v5)
    CFRelease(v5);
  v6 = *(uint64_t ***)(a1 + 32);
  if (v6)
  {
    do
    {
      free(v6[1]);
      v6 = (uint64_t **)*v6;
    }
    while (v6);
    v7 = *(_QWORD **)(a1 + 32);
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
  }
  v9 = *(_QWORD **)(a1 + 96);
  if (v9)
  {
    do
    {
      v10 = (_QWORD *)*v9;
      free(v9);
      v9 = v10;
    }
    while (v10);
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (v11)
    pdf_lexer_release(v11);
  result = *(_QWORD **)(a1 + 144);
  if (result)
  {
    do
    {
      v13 = (_QWORD *)*result;
      free(result);
      result = v13;
    }
    while (v13);
  }
  return result;
}

void CGContextFlush(CGContextRef c)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v8)(CGContextRef);
  uint64_t v9;
  void (*v10)(void);
  CGContextRef v11;

  if (!c)
  {
    v11 = 0;
LABEL_10:
    handle_invalid_context((char)"CGContextFlush", (uint64_t)v11, v1, v2, v3, v4, v5, v6);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v11 = c;
    goto LABEL_10;
  }
  v8 = (void (*)(CGContextRef))*((_QWORD *)c + 7);
  if (v8)
    v8(c);
  v9 = *((_QWORD *)c + 5);
  if (v9)
  {
    v10 = *(void (**)(void))(v9 + 168);
    if (v10)
      v10();
  }
}

uint64_t CGGradientCreateWithColorsAndOptions(_QWORD *a1, CFArrayRef theArray, uint64_t a3, const __CFDictionary *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  unsigned int v12;
  CFIndex Count;
  size_t v14;
  const char *v15;
  CFIndex v16;
  CGColorSpaceRef v17;
  char v18;
  CFIndex v19;
  uint64_t v20;
  const void *ValueAtIndex;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CGColorSpaceRef v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  double *v39;
  CFIndex v40;
  uint64_t v41;
  double *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  CGColorSpaceRef v52;
  double *Components;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double Alpha;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int Type;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  CFIndex v76;
  size_t v77;
  double *v78;
  CGColor *v79;
  const CGFloat *v80;
  double *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  double *v91;
  double *v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  const char *v101;
  _QWORD v102[2];
  double *v103;
  uint64_t v104;
  CFTypeRef v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  if (!theArray)
  {
    v15 = "CGGradientCreateWithColors: non-NULL CFArrayRef with colors is required";
LABEL_49:
    CGPostError((uint64_t)v15, (uint64_t)theArray, a3, (uint64_t)a4, a5, a6, a7, a8, v102[0]);
    return 0;
  }
  v11 = a1;
  if (a1)
  {
    v12 = *(_DWORD *)(a1[3] + 24) - 3;
    if (v12 > 3)
    {
      Count = CFArrayGetCount(theArray);
      if (Count)
      {
        v14 = Count;
        CFRetain(v11);
        goto LABEL_10;
      }
      goto LABEL_48;
    }
    CGPostError((uint64_t)off_1E165ED28[v12], (uint64_t)theArray, a3, (uint64_t)a4, a5, a6, a7, a8, (char)"CGGradientCreateWithColors");
    return 0;
  }
  v16 = CFArrayGetCount(theArray);
  if (!v16)
  {
LABEL_48:
    v15 = "CGGradientCreateWithColors: CFArrayRef with colors cannot be empty";
    goto LABEL_49;
  }
  v14 = v16;
  v17 = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceGenericRGB"));
  if (!v17)
    return 0;
  v11 = v17;
LABEL_10:
  if (kCGColorComponents_block_invoke_once != -1)
    dispatch_once(&kCGColorComponents_block_invoke_once, &__block_literal_global_24_2179);
  v18 = 0;
  v19 = 0;
  v20 = CGColorGetTypeID_color_type_id;
  do
  {
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v19);
      if (!ValueAtIndex)
        goto LABEL_54;
      v22 = (unint64_t)ValueAtIndex;
      if (CFGetTypeID(ValueAtIndex) != v20)
        goto LABEL_54;
      v30 = (v22 & 0x8000000000000000) != 0
          ? CGTaggedColorGetColorSpace(v22, v23, v24, v25, v26, v27, v28, v29)
          : *(CGColorSpaceRef *)(v22 + 24);
      v31 = CFEqual(v30, v11);
      v18 |= (_DWORD)v31 == 0;
      if ((v18 & 1) == 0)
        break;
      if (!v11 || !*(_BYTE *)(v11[3] + 10))
      {
        CGColorSpaceGetType(v11);
        Type = CGColorSpaceGetType(v30);
        if (Type > 0xB)
          v73 = "Unknown";
        else
          v73 = off_1E1662A60[Type];
        CGPostError((uint64_t)"CGGradientCreateWithColors: unsupported color conversion from %s type to %s type", v66, v67, v68, v69, v70, v71, v72, (char)v73);
LABEL_54:
        CGColorSpaceRelease((CGColorSpaceRef)v11);
        return 0;
      }
      if (++v19 == v14)
        goto LABEL_25;
    }
    ++v19;
  }
  while (v19 != v14);
  if (v11)
LABEL_25:
    v33 = *(_QWORD *)(v11[3] + 40);
  else
    v33 = 0;
  v34 = v33 + 1;
  MEMORY[0x1E0C80A78](v31, v32);
  v38 = (char *)v102 - v37;
  if (v36 <= 0x1FFFFFFFFFFFFFFELL)
    v39 = (double *)((char *)v102 - v37);
  else
    v39 = 0;
  if (v36 - 0x1FFFFFFFFFFFFFFFLL >= 0xE000000000000012)
    v39 = (double *)malloc_type_malloc(8 * v35, 0xA53AE156uLL);
  v103 = v39;
  if ((v18 & 1) != 0)
  {
    v105 = (CFTypeRef)color_transform_create((CGColorSpaceRef)v11, 0);
    if (v105)
    {
      v102[0] = v38;
      v102[1] = v102;
      v40 = 0;
      v41 = v33;
      v104 = 8 * v33 + 8;
      v42 = v103;
      while (1)
      {
        v43 = (unint64_t)CFArrayGetValueAtIndex(theArray, v40);
        v51 = v43;
        if (v43)
          v52 = (v43 & 0x8000000000000000) != 0
              ? CGTaggedColorGetColorSpace(v43, v44, v45, v46, v47, v48, v49, v50)
              : *(CGColorSpaceRef *)(v43 + 24);
        else
          v52 = 0;
        Components = (double *)CGColorGetComponents((CGColorRef)v51);
        if ((CGColorTransformConvertColorComponents((uint64_t)v105, v52, 0, Components, v42) & 1) == 0)
          break;
        if (v51)
        {
          if (v51 < 0)
            Alpha = CGTaggedColorGetAlpha(v51, v54, v55, v56, v57, v58, v59, v60);
          else
            Alpha = *(double *)(v51 + 8 * *(_QWORD *)(v51 + 56) + 56);
        }
        else
        {
          Alpha = 0.0;
        }
        v42[v41] = Alpha;
        ++v40;
        v42 = (double *)((char *)v42 + v104);
        if (v14 == v40)
        {
          CFRelease(v105);
          v38 = (char *)v102[0];
          goto LABEL_59;
        }
      }
      CGColorSpaceGetType(v11);
      v91 = (double *)v102[0];
      v93 = CGColorSpaceGetType(v52);
      if (v93 > 0xB)
        v101 = "Unknown";
      else
        v101 = off_1E1662A60[v93];
      CGPostError((uint64_t)"CGGradientCreateWithColors: failed to convert color from %s type to %s type", v94, v95, v96, v97, v98, v99, v100, (char)v101);
      CFRelease(v105);
      v92 = v103;
      if (v103 == v91)
        goto LABEL_68;
    }
    else
    {
      v82 = CGColorSpaceGetType(v11);
      if (v82 > 0xB)
        v90 = "Unknown";
      else
        v90 = off_1E1662A60[v82];
      CGPostError((uint64_t)"CGGradientCreateWithColors: failed to create color transform for color space type %s", v83, v84, v85, v86, v87, v88, v89, (char)v90);
      v92 = v103;
      if (v103 == (double *)v38)
        goto LABEL_68;
    }
    free(v92);
LABEL_68:
    CGColorSpaceRelease((CGColorSpaceRef)v11);
    return 0;
  }
  v76 = 0;
  v77 = 8 * v34;
  v78 = v39;
  do
  {
    v79 = (CGColor *)CFArrayGetValueAtIndex(theArray, v76);
    v80 = CGColorGetComponents(v79);
    memmove(v78, v80, v77);
    ++v76;
    v78 = (double *)((char *)v78 + v77);
  }
  while (v14 != v76);
LABEL_59:
  v81 = v103;
  v74 = CGGradientCreateWithColorComponentsAndOptions(v11, (uint64_t)v103, a3, v14, a4, v62, v63, v64);
  CGColorSpaceRelease((CGColorSpaceRef)v11);
  if (v81 != (double *)v38)
    free(v81);
  return v74;
}

uint64_t CGGradientCreateWithColorComponentsAndOptions(_QWORD *a1, uint64_t a2, uint64_t a3, size_t a4, const __CFDictionary *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  unsigned int v13;
  char v16;
  char v17;
  char v18;
  double v19;
  double *v20;
  size_t v21;
  double v22;
  char v24;
  size_t v25;
  char v26;
  size_t v27;
  uint64_t v29;
  uint64_t Instance;
  unsigned int v31;
  unsigned int v32;
  __CFData *Mutable;
  UInt8 *MutableBytePtr;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  UInt8 *v40;
  char v41;
  uint64_t v42;
  UInt8 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  double *v49;
  UInt8 *v50;
  unint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;

  v8 = 0;
  if (!a1)
    return v8;
  v9 = a2;
  if (!a2 || !a4)
    return v8;
  v12 = a1[3];
  v13 = *(_DWORD *)(v12 + 24) - 3;
  if (v13 <= 3)
  {
    CGPostError((uint64_t)off_1E165ED28[v13], a2, a3, a4, (uint64_t)a5, a6, a7, a8, (char)"CGGradientCreateWithColorComponents");
    return 0;
  }
  if (a3)
  {
    v16 = 0;
    v17 = 0;
    v18 = 1;
    v19 = -INFINITY;
    v20 = (double *)a3;
    v21 = a4;
    do
    {
      v22 = v19;
      v19 = *v20;
      if (*v20 == 0.0)
      {
        v17 = 1;
      }
      else if (v19 == 1.0)
      {
        v16 = 1;
      }
      else if (v19 < 0.0 || v19 > 1.0)
      {
        return 0;
      }
      if (v22 > v19)
        v18 = 0;
      ++v20;
      --v21;
    }
    while (v21);
    v24 = v17;
    if ((v17 & 1) != 0)
      v25 = a4;
    else
      v25 = a4 + 1;
    v26 = v16;
    if ((v16 & 1) != 0)
      v27 = v25;
    else
      v27 = v25 + 1;
    goto LABEL_30;
  }
  if (a4 == 1)
    return 0;
  v24 = 1;
  v27 = a4;
  v26 = 1;
  v18 = 1;
LABEL_30:
  v55 = v18;
  v29 = *(_QWORD *)(v12 + 40);
  if (kCGGradientInterpolatesPremultiplied_block_invoke_once != -1)
    dispatch_once(&kCGGradientInterpolatesPremultiplied_block_invoke_once, &__block_literal_global_19_12579);
  v54 = v29 + 1;
  v56 = v29 + 2;
  Instance = CGTypeCreateInstance(CGGradientGetTypeID_gradient_type_id, 40, a3, a4, (uint64_t)a5, a6, a7, a8);
  v8 = Instance;
  do
  {
    v31 = __ldxr((unsigned int *)&CGGradientCreateWithColorComponentsAndOptions_identifier);
    v32 = v31 + 1;
  }
  while (__stxr(v32, (unsigned int *)&CGGradientCreateWithColorComponentsAndOptions_identifier));
  *(_DWORD *)(Instance + 16) = v32;
  CFRetain(a1);
  *(_QWORD *)(v8 + 24) = a1;
  *(_QWORD *)(v8 + 48) = v27;
  if (a5)
    *(_BYTE *)(v8 + 20) = CFDictionaryGetValue(a5, CFSTR("kCGGradientInterpolatesPremultiplied")) == (const void *)*MEMORY[0x1E0C9AE50];
  Mutable = CFDataCreateMutable(0, 8 * v27 * v56);
  *(_QWORD *)(v8 + 40) = Mutable;
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  v40 = MutableBytePtr;
  if (a3)
  {
    v41 = v24;
    v42 = 0;
    v52 = v41;
    v53 = v26;
    v50 = &MutableBytePtr[8 * v56];
    if ((v41 & 1) != 0)
      v43 = MutableBytePtr;
    else
      v43 = &MutableBytePtr[8 * v56];
    v44 = 8 * v29;
    v45 = 8 * v29 + 16;
    v51 = v44 ^ 0xFFFFFFFFFFFFFFF8;
    v46 = v44 + 8;
    do
    {
      *(_QWORD *)v43 = *(_QWORD *)(a3 + 8 * v42);
      CGColorSpaceAdjustColor((uint64_t)a1, v9, (double *)v43 + 1, v35, v36, v37, v38, v39);
      ++v42;
      v43 += v45;
      v9 += v46;
    }
    while (a4 != v42);
    if ((v55 & 1) == 0)
    {
      if ((v52 & 1) != 0)
        v47 = 0;
      else
        v47 = v56;
      mergesort(&v40[8 * v47], a4, 8 * v56, (int (__cdecl *)(const void *, const void *))is_smaller_stop);
    }
    if ((v52 & 1) == 0)
    {
      memcpy(v40 + 8, v50 + 8, 8 * v54);
      *(_QWORD *)v40 = 0;
    }
    if ((v53 & 1) == 0)
    {
      memcpy(v43 + 8, &v43[v51], 8 * v54);
      *(_QWORD *)v43 = 0x3FF0000000000000;
    }
  }
  else
  {
    v48 = 0;
    v49 = (double *)(MutableBytePtr + 8);
    do
    {
      *(v49 - 1) = (double)v48 / (double)(a4 - 1);
      CGColorSpaceAdjustColor((uint64_t)a1, v9, v49, v35, v36, v37, v38, v39);
      ++v48;
      v49 += v29 + 2;
      v9 += 8 * v29 + 8;
    }
    while (a4 != v48);
  }
  return v8;
}

void ripc_DrawLines(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  _DWORD *v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  void (*v21)(_QWORD, _QWORD, _QWORD);
  double *v22;
  unint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  void (*v38)(_QWORD, _QWORD);
  _OWORD v39[6];
  _QWORD v40[2];
  __int128 v41;
  uint64_t v42;
  char *v43;
  _OWORD v44[3];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  double v49;
  double v50;

  if (a1)
    v9 = *(_QWORD *)(a1 + 288);
  else
    v9 = 0;
  memset(v44, 0, sizeof(v44));
  v42 = 0;
  if (ripc_GetRenderingState(v9, a2, a3, (uint64_t)v44))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 8);
    v41 = *(_OWORD *)(v9 + 24);
    v11 = *(_QWORD *)(v9 + 40);
    v40[0] = v10;
    v40[1] = v11;
    v12 = *(_BYTE *)(a2 + 81);
    if (v12)
      v12 = *(_BYTE *)(*(_QWORD *)(a3 + 120) + 7) & 1;
    LOBYTE(v42) = v12;
    v43 = (char *)&v44[1] + 8;
    memset(v39, 0, sizeof(v39));
    ripc_GetRenderStroke(a3, (uint64_t)v39, (__int128 *)(a3 + 24));
    v17 = *(_DWORD **)(v9 + 64);
    if (!v17)
    {
      v17 = malloc_type_calloc(1uLL, 0xB8uLL, 0x415BF41uLL);
      *(_QWORD *)v17 = RIPRenderCreate_ripr_class;
      v17[2] = 1;
      *((_QWORD *)v17 + 2) = 0;
      *(_QWORD *)(v9 + 64) = v17;
    }
    if (a5)
    {
      if (a4)
      {
        if (*(_QWORD *)v17)
        {
          v18 = ripr_Acquire((uint64_t)v17, (uint64_t)v40);
          if (v18)
          {
            v48 = 0;
            v46 = 0u;
            v47 = 0u;
            v45 = 0u;
            v19 = (_QWORD *)ripr_stroke_acquire((uint64_t)v18, (uint64_t)&v45, (uint64_t)v39);
            if (v19)
            {
              v20 = (uint64_t)v19;
              v21 = (void (*)(_QWORD, _QWORD, _QWORD))v19[2];
              if (v21)
                v21(v19[1], v46, v19[6]);
              if (a5 >= 2)
              {
                v22 = (double *)(a4 + 16);
                v23 = 1;
                do
                {
                  v24 = *(v22 - 2);
                  v25 = *(v22 - 1);
                  v26 = *(double *)(a3 + 24);
                  v27 = *(double *)(a3 + 32);
                  v28 = *(double *)(a3 + 40);
                  v29 = *(double *)(a3 + 48);
                  v30 = *(double *)(a3 + 56);
                  v31 = *(double *)(a3 + 64);
                  v32 = v30 + v25 * v28 + v26 * v24;
                  v33 = v31 + v25 * v29 + v27 * v24;
                  v34 = *v22;
                  v35 = v22[1];
                  v22 += 4;
                  v36 = v30 + v28 * v35 + v26 * v34;
                  v37 = v31 + v29 * v35 + v27 * v34;
                  v49 = v32;
                  v50 = v33;
                  (*(void (**)(_QWORD, _QWORD, double *, _QWORD))(v20 + 24))(*(_QWORD *)(v20 + 8), 0, &v49, *(_QWORD *)(v20 + 48));
                  v49 = v36;
                  v50 = v37;
                  (*(void (**)(_QWORD, uint64_t, double *, _QWORD))(v20 + 24))(*(_QWORD *)(v20 + 8), 1, &v49, *(_QWORD *)(v20 + 48));
                  v23 += 2;
                }
                while (v23 < a5);
              }
              v38 = *(void (**)(_QWORD, _QWORD))(v20 + 32);
              if (v38)
                v38(*(_QWORD *)(v20 + 8), *(_QWORD *)(v20 + 48));
              path_iterator::release(v20);
            }
            else
            {
              ripr_Finish((uint64_t)v17);
            }
          }
        }
      }
    }
    ripc_Render(v9, a2, a3, (uint64_t *)v44, 1uLL, v13, v14, v15, v16);
  }
}

uint64_t (*__object_md5_creator_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileGetTypeID");
  v1 = colorsync_smart_null;
  if (result)
    v1 = result;
  object_md5_creator_f = v1;
  return result;
}

void CGContextDrawRadialGradient(CGContextRef c, CGGradientRef gradient, CGPoint startCenter, CGFloat startRadius, CGPoint endCenter, CGFloat endRadius, CGGradientDrawingOptions options)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  double y;
  double x;
  double v20;
  double v21;
  unsigned int (*v22)(__n128, __n128, double, __n128, __n128, double);
  _QWORD *v23;
  CGFunctionRef Function;
  uint64_t v25;
  double *v26;
  CGContextRef v27;
  CGShading *RadialInternal;

  if (!c)
  {
    v27 = 0;
LABEL_11:
    handle_invalid_context((char)"CGContextDrawRadialGradient", (uint64_t)v27, *(uint64_t *)&options, v7, v8, v9, v10, v11);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v27 = c;
    goto LABEL_11;
  }
  if (gradient)
  {
    v14 = *((_QWORD *)c + 5);
    if (v14)
    {
      y = endCenter.y;
      x = endCenter.x;
      v20 = startCenter.y;
      v21 = startCenter.x;
      v22 = *(unsigned int (**)(__n128, __n128, double, __n128, __n128, double))(v14 + 112);
      if (!v22
        || v22((__n128)startCenter, *(__n128 *)&startCenter.y, startRadius, (__n128)endCenter, *(__n128 *)&endCenter.y, endRadius) == 1006)
      {
        v23 = (_QWORD *)*((_QWORD *)gradient + 3);
        Function = CGGradientGetFunction((uint64_t)gradient, (uint64_t)gradient, *(uint64_t *)&options, v7, v8, v9, v10, v11);
        if (Function)
          v26 = (double *)*((_QWORD *)Function + 5);
        else
          v26 = 0;
        RadialInternal = (CGShading *)CGShadingCreateRadialInternal(v23, 0, 0, v26, Function, options & 1, (options >> 1) & 1, v25, v21, v20, startRadius, x, y, endRadius);
        CGContextDrawShading(c, RadialInternal);
        if (RadialInternal)
          CFRelease(RadialInternal);
      }
    }
  }
}

uint64_t rip_auto_context_draw_shading(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int content_type_from_color_space;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v22;

  if (!a1)
  {
    v7 = 112;
    pthread_mutex_lock((pthread_mutex_t *)0x70);
    v6 = 0;
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(a1 + 288);
  v7 = v6 + 112;
  pthread_mutex_lock((pthread_mutex_t *)(v6 + 112));
  if (!v6)
  {
LABEL_6:
    v8 = 0;
    goto LABEL_7;
  }
  v8 = *(_QWORD *)(v6 + 88);
  if (!v8)
    v8 = *(_QWORD *)(v6 + 80);
LABEL_7:
  rip_auto_context_update_content_info_from_GState(v6, a3);
  v9 = *(_QWORD *)(a4 + 24);
  content_type_from_color_space = rip_auto_context_get_content_type_from_color_space(v9);
  *(_DWORD *)(v6 + 108) |= content_type_from_color_space;
  if (content_type_from_color_space != 1)
  {
    if (content_type_from_color_space == 2)
    {
      if (v9)
        v18 = *(_BYTE *)(*(_QWORD *)(v9 + 24) + 14) != 0;
      else
        v18 = 0;
      v19 = *(_BYTE *)(v6 + 104) | v18;
    }
    else
    {
      v19 = 1;
    }
    *(_BYTE *)(v6 + 104) = v19;
  }
  if (v8)
  {
    v20 = *(_QWORD *)(v8 + 40);
    if (v20)
    {
      v21 = *(uint64_t (**)(void))(v20 + 96);
      if (v21)
        v22 = v21();
      else
        v22 = 1006;
    }
    else
    {
      v22 = 0;
    }
    *(_BYTE *)(v6 + 105) |= rip_auto_context_contains_transparency(v6, v11, v12, v13, v14, v15, v16, v17);
  }
  else
  {
    v22 = 0;
  }
  pthread_mutex_unlock((pthread_mutex_t *)v7);
  return v22;
}

uint64_t dlRecorder_DrawShading(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFArrayRef *v8;
  double *v12;
  double *v13;
  uint64_t result;
  __int128 v16;
  const CGRect *v17;
  CGFloat *p_y;
  CGSize *p_size;
  CGFloat *p_height;
  double v21;
  double v22;
  CGFloat width;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *EntryDrawingState;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t EntryPatternState;
  uint64_t v40;
  const CGRect *p_x;
  unsigned int v42;
  CGSize size;
  __int128 v44;
  int v45;
  CGFloat x;
  double v47;
  double v48;
  double v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  if (!a1 || (v8 = *(CFArrayRef **)(a1 + 288)) == 0)
  {
    CGPostError((uint64_t)"%s: CGContextDelegateGetInfo() returned NULL", a2, a3, (uint64_t)a4, a5, a6, a7, a8, (char)"dlRecorder_DrawShading");
    return 1000;
  }
  v12 = (double *)CG::DisplayListRecorder::currentDisplayList(v8);
  if (!v12)
    return 1000;
  v13 = v12;
  if (v12[5] == INFINITY || v12[6] == INFINITY)
    return 0;
  result = 0;
  if (v13[7] != 0.0 && v13[8] != 0.0)
  {
    v16 = *(_OWORD *)(a3 + 40);
    v50 = *(_OWORD *)(a3 + 24);
    v51 = v16;
    v52 = *(_OWORD *)(a3 + 56);
    if (!*((_BYTE *)v13 + 73))
      goto LABEL_23;
    if (a4[40])
    {
      v17 = (const CGRect *)(a4 + 48);
      p_y = (CGFloat *)(a4 + 56);
      p_size = (CGSize *)(a4 + 64);
      p_height = (CGFloat *)(a4 + 72);
    }
    else
    {
      v17 = &CGRectInfinite;
      p_height = &CGRectInfinite.size.height;
      p_y = &CGRectInfinite.origin.y;
      p_size = &CGRectInfinite.size;
    }
    v21 = *p_height;
    v22 = *p_y;
    width = p_size->width;
    x = v17->origin.x;
    v47 = v22;
    v48 = width;
    v49 = v21;
    CG::DisplayListRecorder::intersectRectWithClipConsideringStyle(&x, a2, *(double **)(a3 + 112), *(_QWORD *)(*(_QWORD *)(a3 + 120) + 16));
    result = 0;
    x = v27;
    v47 = v24;
    v48 = v25;
    v49 = v26;
    if (v27 != INFINITY && v24 != INFINITY)
    {
      result = 0;
      if (v25 != 0.0 && v26 != 0.0)
      {
LABEL_23:
        v28 = CG::DisplayList::shadingResourceForShading((CG::DisplayList *)(v13 + 2), (CGShading *)a4);
        if (v28)
        {
          v29 = v28;
          EntryDrawingState = (_QWORD *)CG::DisplayList::getEntryDrawingState((uint64_t *)v13 + 2, a3, a2);
          v31 = EntryDrawingState[1];
          if (v31)
          {
            v32 = EntryDrawingState;
            v33 = *(_DWORD *)(v31 + 8);
            v34 = EntryDrawingState[2];
            if (v34)
              v33 |= *(_DWORD *)(v34 + 8);
            v35 = v33 & 0x1000;
            v36 = EntryDrawingState[3];
            if (v36)
              v35 |= *(_DWORD *)(v36 + 8) & 0x3400;
            v37 = *(_QWORD *)(a3 + 120);
            if (*(double *)(v37 + 8) >= 1.0)
              v38 = *(_DWORD *)(v29 + 8) & 0x1000 | v35;
            else
              v38 = v35 | 0x1000;
            if ((v38 & 0x1000) == 0 && (((int)(*(_DWORD *)(v37 + 4) << 16) >> 24) - 3) < 0xFFFFFFFE)
              v38 |= 0x1000u;
            if ((v38 & 0x3000) != 0)
              *((_DWORD *)v13 + 20) |= v38 & 0x3000;
            if (*((_BYTE *)v13 + 74))
            {
              if ((v38 & 0x400) != 0)
                EntryPatternState = CG::DisplayList::getEntryPatternState((_QWORD *)v13 + 2, a3, a2);
              else
                EntryPatternState = 0;
              v40 = operator new();
              p_x = &CGRectInfinite;
              v42 = *(_DWORD *)(*(_QWORD *)(a3 + 120) + 4);
              if (*((_BYTE *)v13 + 73))
                p_x = (const CGRect *)&x;
              size = p_x->size;
              *(CGPoint *)(v40 + 16) = p_x->origin;
              *(CGSize *)(v40 + 32) = size;
              *(_OWORD *)(v40 + 120) = v52;
              v44 = v50;
              *(_OWORD *)(v40 + 104) = v51;
              v45 = v42 << 8;
              if (((v42 >> 20) & 0xF) == 0)
                v45 = v42 << 12;
              *(_DWORD *)(v40 + 8) = (v38 << 8) | 5;
              *(_QWORD *)(v40 + 48) = v32;
              *(_QWORD *)(v40 + 56) = 0;
              *(_QWORD *)(v40 + 64) = 0;
              *(_QWORD *)(v40 + 72) = EntryPatternState;
              *(_QWORD *)v40 = &off_1E16291F0;
              *(_QWORD *)(v40 + 80) = v29;
              *(_OWORD *)(v40 + 88) = v44;
              *(_DWORD *)(v40 + 136) = (char)v42;
              *(_DWORD *)(v40 + 140) = v45 >> 28;
              CG::DisplayList::appendEntry((int64x2_t *)v13 + 1, v40);
            }
            return 0;
          }
        }
        return 1000;
      }
    }
  }
  return result;
}

uint64_t CG::DisplayList::shadingResourceForShading(CG::DisplayList *this, CGShading *a2)
{
  CGShading *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CGShading **v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t EvaluatedCopy;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t *v42;
  uint64_t **v43;
  uint64_t **v44;
  uint64_t v45;
  char *v46;
  _opaque_pthread_t *v47;
  char *stackaddr_np;
  size_t stacksize_np;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[2];
  char v62;

  if (!a2)
    return 0;
  v2 = a2;
  ++*((_QWORD *)this + 82);
  v4 = (uint64_t *)((char *)this + 280);
  v5 = *((_QWORD *)this + 35);
  v6 = (uint64_t *)((char *)this + 280);
  if (!v5)
    goto LABEL_35;
  v6 = (uint64_t *)((char *)this + 280);
  do
  {
    v7 = *(_QWORD *)(v5 + 32);
    v8 = *(std::__shared_weak_count **)(v5 + 40);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = *(_QWORD *)(v7 + 16);
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      v11 = *(_QWORD *)(v7 + 16);
    }
    v13 = (uint64_t *)(v5 + 8);
    if (v11 >= (unint64_t)v2)
    {
      v13 = (uint64_t *)v5;
      v6 = (uint64_t *)v5;
    }
    v5 = *v13;
  }
  while (*v13);
  if (v4 == v6)
    goto LABEL_35;
  v14 = v6[4];
  v15 = (std::__shared_weak_count *)v6[5];
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  if (*(_QWORD *)(v14 + 16) >= (unint64_t)v2)
  {
    v20 = v6[4];
    v21 = (std::__shared_weak_count *)v6[5];
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      v18 = *(_QWORD *)(v20 + 16) <= (unint64_t)v2;
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 - 1, v22));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    else
    {
      v18 = *(_QWORD *)(v20 + 16) <= (unint64_t)v2;
    }
  }
  else
  {
    v18 = 0;
  }
  if (!v15)
    goto LABEL_34;
  v25 = (unint64_t *)&v15->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!v18)
      goto LABEL_35;
  }
  else
  {
LABEL_34:
    if (!v18)
    {
LABEL_35:
      v27 = operator new();
      v28 = *(_QWORD *)(*(_QWORD *)this - 136);
      *(_DWORD *)(v27 + 8) = 100663296;
      *(_QWORD *)v27 = &off_1E1629400;
      *(_QWORD *)(v27 + 16) = 0;
      v29 = (CGShading **)(v27 + 16);
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0;
      CFRetain(v2);
      *(_QWORD *)(v27 + 16) = v2;
      if (*((_QWORD *)v2 + 3))
      {
        *(_QWORD *)(v27 + 32) = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + v28) + 16))((char *)this + v28);
        v2 = *(CGShading **)(v27 + 16);
      }
      if (*((_BYTE *)this + 62))
      {
        if (v2)
        {
LABEL_39:
          switch(*((_DWORD *)v2 + 5))
          {
            case 1:
              v30 = (uint64_t *)((char *)v2 + 184);
              goto LABEL_49;
            case 2:
              v30 = (uint64_t *)((char *)v2 + 200);
              goto LABEL_49;
            case 3:
              v30 = (uint64_t *)((char *)v2 + 160);
              goto LABEL_49;
            case 4:
              v30 = (uint64_t *)((char *)v2 + 152);
LABEL_49:
              EvaluatedCopy = *v30;
              if (!*v30)
                goto LABEL_59;
              EvaluatedCopy = (uint64_t)CGFunctionCreateEvaluatedCopy(EvaluatedCopy);
              if (!EvaluatedCopy)
                goto LABEL_59;
              v37 = (const void *)EvaluatedCopy;
              if (*((_BYTE *)v2 + 40))
                v38 = (uint64_t)v2 + 48;
              else
                v38 = 0;
              EvaluatedCopy = CGShadingCreateEmpty(*((_DWORD *)v2 + 5), *((_QWORD **)v2 + 3), *((_QWORD *)v2 + 4), v38, v33, v34, v35, v36);
              if (EvaluatedCopy)
              {
                switch(*((_DWORD *)v2 + 5))
                {
                  case 1:
                    v39 = *(_OWORD *)((char *)v2 + 120);
                    v40 = *(_OWORD *)((char *)v2 + 136);
                    v41 = *(_OWORD *)((char *)v2 + 152);
                    *(_OWORD *)(EvaluatedCopy + 168) = *(_OWORD *)((char *)v2 + 168);
                    *(_OWORD *)(EvaluatedCopy + 152) = v41;
                    *(_OWORD *)(EvaluatedCopy + 136) = v40;
                    *(_OWORD *)(EvaluatedCopy + 120) = v39;
                    *(_QWORD *)(EvaluatedCopy + 184) = v37;
                    break;
                  case 2:
                    *(_OWORD *)(EvaluatedCopy + 120) = *(_OWORD *)((char *)v2 + 120);
                    v50 = *(_OWORD *)((char *)v2 + 136);
                    v51 = *(_OWORD *)((char *)v2 + 152);
                    v52 = *(_OWORD *)((char *)v2 + 168);
                    *(_OWORD *)(EvaluatedCopy + 184) = *(_OWORD *)((char *)v2 + 184);
                    *(_OWORD *)(EvaluatedCopy + 168) = v52;
                    *(_OWORD *)(EvaluatedCopy + 152) = v51;
                    *(_OWORD *)(EvaluatedCopy + 136) = v50;
                    *(_QWORD *)(EvaluatedCopy + 200) = v37;
                    break;
                  case 3:
                    v53 = *(_OWORD *)((char *)v2 + 120);
                    v54 = *((_QWORD *)v2 + 19);
                    *(_OWORD *)(EvaluatedCopy + 136) = *(_OWORD *)((char *)v2 + 136);
                    *(_OWORD *)(EvaluatedCopy + 120) = v53;
                    *(_QWORD *)(EvaluatedCopy + 152) = v54;
                    *(_QWORD *)(EvaluatedCopy + 160) = v37;
                    break;
                  case 4:
                    v55 = *(_OWORD *)((char *)v2 + 168);
                    v56 = *(_OWORD *)((char *)v2 + 184);
                    v57 = *((_QWORD *)v2 + 25);
                    *(_OWORD *)(EvaluatedCopy + 152) = *(_OWORD *)((char *)v2 + 152);
                    v58 = *(_OWORD *)((char *)v2 + 120);
                    *(_OWORD *)(EvaluatedCopy + 136) = *(_OWORD *)((char *)v2 + 136);
                    *(_OWORD *)(EvaluatedCopy + 120) = v58;
                    *(_QWORD *)(EvaluatedCopy + 200) = v57;
                    *(_OWORD *)(EvaluatedCopy + 184) = v56;
                    *(_OWORD *)(EvaluatedCopy + 168) = v55;
                    *(_QWORD *)(EvaluatedCopy + 152) = v37;
                    break;
                  default:
                    break;
                }
              }
              else
              {
                CFRelease(v37);
LABEL_58:
                EvaluatedCopy = 0;
              }
LABEL_59:
              *(_QWORD *)(v27 + 24) = EvaluatedCopy;
              break;
            default:
              goto LABEL_58;
          }
        }
      }
      else if (v2)
      {
        switch(*((_DWORD *)v2 + 5))
        {
          case 1:
            v31 = (uint64_t *)((char *)v2 + 184);
            goto LABEL_67;
          case 2:
            v31 = (uint64_t *)((char *)v2 + 200);
            goto LABEL_67;
          case 3:
            v31 = (uint64_t *)((char *)v2 + 160);
            goto LABEL_67;
          case 4:
            v31 = (uint64_t *)((char *)v2 + 152);
LABEL_67:
            v45 = *v31;
            if (!v45)
              break;
            v46 = *(char **)(v45 + 24);
            if (!v46)
              break;
            v47 = pthread_self();
            stackaddr_np = (char *)pthread_get_stackaddr_np(v47);
            stacksize_np = pthread_get_stacksize_np(v47);
            if (v46 > stackaddr_np)
              break;
            if (v46 <= &stackaddr_np[-stacksize_np])
              break;
            v2 = *v29;
            if (!*v29)
              break;
            goto LABEL_39;
          default:
            break;
        }
      }
      v42 = (uint64_t *)operator new(0x30uLL);
      v61[0] = v42;
      v61[1] = v4;
      std::shared_ptr<CG::DisplayListResourceShading>::shared_ptr[abi:se180100]<CG::DisplayListResourceShading,void>(v42 + 4, v27);
      v43 = (uint64_t **)((char *)this + 272);
      v62 = 1;
      v44 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>(v43, v6, &v60, &v59, v42 + 4);
      v6 = *v44;
      if (!*v44)
      {
        std::__tree<unsigned long>::__insert_node_at(v43, v60, v44, v42);
        v61[0] = 0;
        v6 = v42;
      }
      std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)v61);
    }
  }
  return v6[4];
}

void sub_184A58958(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DC23C4](v1, 0x10E1C40974E4E7ALL);
  _Unwind_Resume(a1);
}

uint64_t CGShadingCreateRadialInternal(_QWORD *a1, uint64_t a2, uint64_t a3, double *a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  uint64_t Empty;
  uint64_t v17;
  uint64_t v18;
  char v20;
  char v21;
  double v27;
  double v28;

  Empty = 0;
  if (a1 && a5)
  {
    v17 = *(_QWORD *)(a1[3] + 40);
    v18 = a5[6];
    if (v18 == v17 || v18 == v17 + 1)
    {
      v20 = a7;
      v21 = a6;
      if (vabdd_f64(a11, a14) >= 0.000001)
        v27 = a14;
      else
        v27 = a14 + 0.000001;
      Empty = CGShadingCreateEmpty(2, a1, a2, a3, (uint64_t)a5, a6, a7, a8);
      *(double *)(Empty + 120) = a9;
      *(double *)(Empty + 128) = a10;
      *(double *)(Empty + 136) = fabs(a11);
      *(_BYTE *)(Empty + 144) = v21;
      *(double *)(Empty + 152) = a12;
      *(double *)(Empty + 160) = a13;
      *(double *)(Empty + 168) = fabs(v27);
      *(_BYTE *)(Empty + 176) = v20;
      CFRetain(a5);
      *(_QWORD *)(Empty + 200) = a5;
      if (a4)
      {
        *(double *)(Empty + 184) = *a4;
        v28 = a4[1];
      }
      else
      {
        *(_QWORD *)(Empty + 184) = 0;
        v28 = 1.0;
      }
      *(double *)(Empty + 192) = v28;
    }
    else
    {
      return 0;
    }
  }
  return Empty;
}

uint64_t *__color_space_state_create_display_p3_block_invoke_2()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncDisplayP3Profile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  color_space_state_create_display_p3_s = v1;
  return result;
}

uint64_t ripl_retain(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;

  v2 = (pthread_mutex_t *)(a1 + 80);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 80));
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 != -1)
    *(_DWORD *)(a1 + 8) = v3 + 1;
  return pthread_mutex_unlock(v2);
}

uint64_t (*__color_space_state_create_display_p3_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  v1 = colorsync_smart_null_1622;
  if (result)
    v1 = result;
  color_space_state_create_display_p3_f = v1;
  return result;
}

float *rips_s_Create(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  size_t v6;
  float *v7;
  float *v8;
  double *v9;
  uint64_t v10;
  double v11;
  double v12;
  float v13;
  float v14;
  float v15;
  float v16;
  double v17;
  double v18;
  double v19;
  double v20;
  __double2 v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;

  v6 = (*(uint64_t (**)(void))(a1 + 8))();
  v7 = (float *)malloc_type_calloc(1uLL, v6, 0x774F7A69uLL);
  v8 = v7;
  if (v7)
  {
    *(_QWORD *)v7 = a1;
    *((_QWORD *)v7 + 1) = 1;
    if (a2)
      v9 = (double *)(a2 + 32);
    else
      v9 = 0;
    if (a2)
    {
      v10 = *(_QWORD *)(a2 + 24);
      if (v10)
      {
        if (v10 < 1 || !*(_QWORD *)(v10 + 32))
        {
          CFRetain((CFTypeRef)v10);
          *((_QWORD *)v8 + 10) = v10;
        }
      }
    }
    v11 = v9[3];
    v12 = 1.0;
    v13 = 1.0 - v11;
    v8[28] = v13;
    v8[30] = 0.0;
    v14 = v9[6];
    v8[31] = v14;
    if (a3)
      v12 = sqrt(fabs(a3->f64[0] * a3[1].f64[1] - a3->f64[1] * a3[1].f64[0]));
    else
      a3 = (float64x2_t *)&CGAffineTransformIdentity;
    v15 = v12 * v9[5];
    if (v15 <= 4194300.0)
      v16 = v15;
    else
      v16 = 4194300.0;
    v8[29] = v16;
    if (v11 <= 0.99609375)
    {
      v17 = v9[2] * 3.14159265 / 180.0;
      v18 = v9[1] * 3.14159265 / 180.0;
      v19 = 0.0;
      if (v18 <= 1.569051)
      {
        if (v18 >= 0.00174532925)
        {
          v20 = v9[4];
          v19 = v20 / tan(v18);
        }
        else
        {
          v19 = 1.79769313e308;
        }
      }
      v21 = __sincos_stret(v17);
      *((_DWORD *)v8 + 3) = 1777;
      v22 = vmlaq_n_f64(vmulq_n_f64(a3[1], -(v19 * v21.__sinval)), *a3, -(v19 * v21.__cosval));
      v23 = (float64x2_t)vdupq_n_s64(0xC1CFFFFFFF800000);
      v24 = (float64x2_t)vdupq_n_s64(0x41CFFFFFFF800000uLL);
      *(int32x2_t *)&v22.f64[0] = vmovn_s64(vcvtq_s64_f64(vrndaq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v23, v22), (int8x16_t)v23, vbslq_s8((int8x16_t)vcgtq_f64(v22, v24), (int8x16_t)v24, (int8x16_t)v22)))));
      *((_QWORD *)v8 + 11) = *(_QWORD *)&v22.f64[0];
      *(int32x2_t *)&v22.f64[0] = vadd_s32(vdup_n_s32(vcvtms_s32_f32(v16 + 0.5) + 1), vabs_s32(*(int32x2_t *)&v22.f64[0]));
      *((int32x2_t *)v8 + 12) = vneg_s32(*(int32x2_t *)&v22.f64[0]);
      *((int32x2_t *)v8 + 13) = vadd_s32(*(int32x2_t *)&v22.f64[0], *(int32x2_t *)&v22.f64[0]);
    }
  }
  return v8;
}

uint64_t rips_s_size()
{
  return 128;
}

_QWORD *CGIOSurfaceContextCreate(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, int a7)
{
  return CGIOSurfaceContextCreateWithOptions(a1, a2, a3, a4, a5, a6, a7, 0);
}

uint64_t __get_cache_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  cache_attributes_t v7;
  pthread_mutexattr_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  get_cache_image_cache = (uint64_t)malloc_type_calloc(1uLL, 0x48uLL, 0x1020040C6685353uLL);
  if (!get_cache_image_cache)
    _CGHandleAssert("get_cache_block_invoke", 159, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/RIP/RIPImageCache.c", "image_cache != NULL", "NULL image cache", v0, v1, v2, v7.version);
  v8.__sig = 0;
  *(_QWORD *)v8.__opaque = 0;
  pthread_mutexattr_init(&v8);
  pthread_mutexattr_settype(&v8, 2);
  pthread_mutex_init((pthread_mutex_t *)get_cache_image_cache, &v8);
  pthread_mutexattr_destroy(&v8);
  v7 = *(cache_attributes_t *)byte_1E1630D78;
  if (cache_create("com.apple.CoreGraphics.image_handle_cache", &v7, (cache_t **)(get_cache_image_cache + 64)))
    _CGHandleAssert("get_cache_block_invoke", 180, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/RIP/RIPImageCache.c", "cache_create(\"com.apple.CoreGraphics.image_handle_cache\", &attrs, &image_cache->cache) == 0", "cache creation failed", v3, v4, v5, v7.version);
  return cache_set_count_hint();
}

__n128 CGGStateSetCTM(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = v3;
  *(__n128 *)(a1 + 24) = result;
  return result;
}

uint64_t *__color_space_state_create_generic_rgb_block_invoke_2()
{
  uint64_t *result;
  uint64_t v1;

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t *)CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle
    && (result = (uint64_t *)dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "kColorSyncGenericRGBProfile")) != 0)
  {
    v1 = *result;
  }
  else
  {
    v1 = 0;
  }
  color_space_state_create_generic_rgb_s = v1;
  return result;
}

void CGFontRelease(CGFontRef font)
{
  if (font)
    CFRelease(font);
}

uint64_t (*__color_space_state_create_generic_rgb_block_invoke())()
{
  uint64_t (*result)();
  uint64_t (*v1)();

  if (CGLibraryLoadColorSyncDYLD_once != -1)
    dispatch_once(&CGLibraryLoadColorSyncDYLD_once, &__block_literal_global_19700);
  result = (uint64_t (*)())CGLibraryLoadColorSyncDYLD_handle;
  if (CGLibraryLoadColorSyncDYLD_handle)
    result = (uint64_t (*)())dlsym((void *)CGLibraryLoadColorSyncDYLD_handle, "ColorSyncProfileCreateWithName");
  v1 = colorsync_smart_null_1622;
  if (result)
    v1 = result;
  color_space_state_create_generic_rgb_f = v1;
  return result;
}

uint64_t W8_mark(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  int8x8_t v4;
  uint8x8_t v5;
  int16x8_t v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint16x4_t *v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  size_t v28;
  _BYTE *v29;
  _BYTE *v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  void *v50;
  _BYTE *v51;
  _BYTE *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  char *v57;
  unint64_t v58;
  int v59;
  int v60;
  unint64_t v61;
  _BYTE *v62;
  unint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  unsigned int v91;
  int v92;
  int v93;
  unsigned int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  unsigned int v102;
  int v103;
  int v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  int v113;
  unsigned int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  unsigned int v132;
  int v133;
  int v134;
  unsigned int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  unsigned int v144;
  int v145;
  int v146;
  unsigned int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  int v155;
  int v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  unsigned int v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  int v171;
  unsigned int v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  int v179;
  unsigned int v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  int v188;
  int v189;
  char v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  int v197;
  int v198;
  char v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  unsigned int v206;
  int v207;
  char v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  unsigned int v215;
  int v216;
  char v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  unsigned int v224;
  int v225;
  char v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  unsigned int v233;
  int v234;
  char v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  unsigned int v242;
  int v243;
  char v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  unsigned int v251;
  int v252;
  char v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  unsigned int v260;
  int v261;
  char v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  unsigned int v269;
  int v270;
  char v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  unsigned int v278;
  int v279;
  char v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  unsigned int v287;
  int v288;
  char v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  int v295;
  unsigned int v296;
  int v297;
  char v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  unsigned int v305;
  unsigned int v306;
  int v307;
  char v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  int v314;
  unsigned int v315;
  int v316;
  char v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  _BYTE *v322;
  int v323;
  int v324;
  unsigned int v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  int v329;
  unsigned int v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  unsigned int v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  _BYTE *v341;
  int v342;
  int v343;
  unsigned int v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  int v348;
  __int16 v349;
  __int16 v350;
  char v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  unsigned int v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint8x8_t v361;
  int v362;
  uint64_t v363;
  uint64_t v364;
  int v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  int v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  _BYTE *v378;
  uint64_t v379;
  char *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  int v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  int v388;
  int v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  char *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  int v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  int v403;
  unsigned int v404;
  int v405;
  uint64_t v406;
  int v407;
  int *v408;
  int v409;
  int *v410;
  int v411;
  int v412;
  unsigned int v413;
  unsigned int v414;
  unsigned int v415;
  unsigned int v416;
  unsigned int v417;
  unsigned int v418;
  unsigned int v419;
  unsigned int v420;
  unsigned int v421;
  unsigned int v422;
  int v423;
  int v424;
  unsigned int v425;
  unsigned int v426;
  int v427;
  int v428;
  int v429;
  unsigned int v430;
  unsigned int v431;
  int v432;
  unsigned int v433;
  int v434;
  int v435;
  int v436;
  unsigned int v437;
  unsigned int v438;
  unsigned int v439;
  int v440;
  int v441;
  int v442;
  unsigned int v443;
  unsigned int v444;
  int v445;
  unsigned int v446;
  int v447;
  int v448;
  int v449;
  unsigned int v450;
  unsigned int v451;
  int v452;
  unsigned int v453;
  int v454;
  unsigned int v455;
  int v456;
  int v457;
  unsigned int v458;
  int v459;
  __int16 v460;
  int v461;
  unsigned int v462;
  int v463;
  int v464;
  unsigned int v465;
  int v466;
  int v467;
  int v468;
  int v469;
  int v470;
  int v471;
  int v472;
  int v473;
  int v474;
  int v475;
  int v476;
  int v477;
  int v478;
  int v479;
  int v480;
  int v481;
  int v482;
  int v483;
  int v484;
  int v485;
  int v486;
  int v487;
  int v488;
  int v489;
  int v490;
  int v491;
  int v492;
  int v493;
  int v494;
  int v495;
  int v496;
  uint16x4_t v497;
  uint16x4_t v498;
  int v499;
  unsigned int v500;
  uint32x4_t v501;
  unsigned int v502;
  int v503;
  unsigned int v504;
  char v505;
  int v506;
  unsigned int v507;
  int v508;
  int v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  int v526;
  uint64_t v527;
  uint64_t v528;
  unint64_t v529;
  uint64_t v530;
  char *v531;
  int v532;
  int v533;
  uint64_t v534;
  int v535;
  uint64_t v536;
  uint64_t v537;
  unsigned int v538;
  unint64_t v539;
  unsigned __int8 v540;
  _BYTE *v541;
  unsigned int v542;
  _BYTE *v543;
  int v544[2];
  int v545[2];
  int v546;
  int v547;
  char *v548;
  uint64_t v549;
  char *v550;
  uint64_t v551;
  uint64_t v552;
  int v553;
  void *v554;
  void *v555;
  uint64_t v556;
  int v557[4];
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  _DWORD v567[1024];
  uint64_t v568;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v568 = *MEMORY[0x1E0C80C00];
  v7 = *(_BYTE **)(v3 + 96);
  v8 = *(_QWORD *)(v3 + 48);
  v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 56)
                 + 16 * *(_DWORD *)v3
                 + 8 * (v7 == 0)
                 + 4 * (v8 == 0));
  if (v9 > 27)
    return 0xFFFFFFFFLL;
  v11 = v3;
  v12 = *(unsigned int *)(v3 + 4);
  v13 = (v12 - 1);
  if ((int)v12 < 1)
    return 0;
  v14 = *(_DWORD *)(v3 + 8);
  v15 = (v14 - 1);
  if (v14 < 1)
    return 0;
  v16 = *(uint16x4_t **)(v3 + 136);
  if ((*(_DWORD *)v3 & 0xFF0000) == 0x50000 || !v16)
  {
    v18 = *(_DWORD *)v3 & 0xFF00;
    v525 = v3;
    v526 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 56)
                     + 16 * *(_DWORD *)v3
                     + 8 * (v7 == 0)
                     + 4 * (v8 == 0));
    if (v18 == 1024)
    {
      v567[0] = *(_DWORD *)(v3 + 4);
      v557[0] = v14;
      v19 = *(int *)(v3 + 28);
      if (v7)
        v20 = *v7;
      else
        v20 = 255;
      v31 = **(unsigned __int8 **)(v3 + 88);
      v33 = *(int *)(v3 + 12);
      v32 = *(_DWORD *)(v3 + 16);
      if (v8)
      {
        v552 = *(int *)(v3 + 32);
        v550 = (char *)(v8 + v33 + (int)v552 * (uint64_t)v32);
        v542 = 1;
      }
      else
      {
        v550 = 0;
        v552 = 0;
        v542 = 0;
      }
      v538 = v20 << 24;
      v540 = ~(_BYTE)v20;
      v39 = (char *)(*(_QWORD *)(v3 + 40) + v33 + v32 * (uint64_t)(int)v19);
      *(_QWORD *)v544 = *(int *)(v3 + 28);
      v548 = v39;
      if (!v16)
      {
        v554 = 0;
        if (v8)
          v43 = v12;
        else
          v43 = 0;
        v41 = v550;
        v42 = v552 - v43;
        v44 = v12;
        goto LABEL_906;
      }
      shape_enum_clip_alloc(v2, v3, (int *)v16, 1, 1, 1, *(_DWORD *)(v3 + 104), *(_DWORD *)(v3 + 108), v12, v14);
      v41 = v550;
      v42 = v552;
      if (!v40)
        return 1;
      while (1)
      {
        v554 = (void *)v40;
        if (!shape_enum_clip_next(v40, (int *)&v556 + 1, &v556, v567, v557))
          break;
        v39 += (int)v556 * (uint64_t)(int)v19 + SHIDWORD(v556);
        v44 = v567[0];
        if (v8)
        {
          v41 = &v550[(int)v552 * (uint64_t)(int)v556 + SHIDWORD(v556)];
          v42 = v552 - v567[0];
        }
        LODWORD(v12) = v567[0];
LABEL_906:
        v19 -= v44;
        switch(v9)
        {
          case 0:
            v398 = v19 + (int)v12;
            v399 = v557[0];
            v400 = v557[0] - 1;
            if (v398 >= 0)
              LODWORD(v401) = v398;
            else
              v401 = -v398;
            CGBlt_fillBytes(v12, v557[0], 0, &v39[(v398 * v400) & (v398 >> 63)], v401);
            if (!v8)
              goto LABEL_1157;
            v402 = v42 + (int)v12;
            v41 += (v402 * v400) & (v402 >> 63);
            if (v402 >= 0)
              v42 += (int)v12;
            else
              v42 = -v402;
            v403 = v12;
            v404 = v399;
            v405 = 0;
            goto LABEL_926;
          case 1:
            v406 = v19 + (int)v12;
            if (v406 < 0)
            {
              v39 += v406 * (v557[0] - 1);
              v406 = -v406;
            }
            v407 = 0;
            v408 = *(int **)(v525 + 88);
            if (v408)
              v407 = *v408;
            v409 = v557[0];
            CGBlt_fillBytes(v12, v557[0], v407, v39, v406);
            if (v8)
            {
              v404 = v409;
              v410 = *(int **)(v525 + 96);
              if (!v410)
                v410 = (int *)&PIXELALPHAPLANARCONSTANT_15938;
              v41 += ((v42 + (int)v12) * (v409 - 1)) & ((v42 + (int)v12) >> 63);
              if (v42 + (int)v12 >= 0)
                v42 += (int)v12;
              else
                v42 = -(v42 + (int)v12);
              v405 = *v410;
              v403 = v12;
LABEL_926:
              CGBlt_fillBytes(v403, v404, v405, v41, v42);
            }
            goto LABEL_1157;
          case 2:
            if (v8)
            {
              v411 = v538 | v31;
              do
              {
                v412 = v567[0];
                if (v567[0] >= 4)
                {
                  v413 = (v567[0] >> 2) + 1;
                  do
                  {
                    v414 = (*v39 | (*v41 << 16)) * v540;
                    v415 = ((v414 + 65537 + ((v414 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v414 + 1 + BYTE1(v414)) >> 8))
                         + v411;
                    *v39 = v415;
                    *v41 = HIBYTE(v415);
                    v416 = (v39[1] | (v41[1] << 16)) * v540;
                    v417 = ((v416 + 65537 + ((v416 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v416 + 1 + BYTE1(v416)) >> 8))
                         + v411;
                    v39[1] = v417;
                    v41[1] = HIBYTE(v417);
                    v418 = (v39[2] | (v41[2] << 16)) * v540;
                    v419 = ((v418 + 65537 + ((v418 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v418 + 1 + BYTE1(v418)) >> 8))
                         + v411;
                    v39[2] = v419;
                    v41[2] = HIBYTE(v419);
                    v420 = (v39[3] | (v41[3] << 16)) * v540;
                    v39[3] = ((unsigned __int16)(v420 + 1 + BYTE1(v420)) >> 8) + v411;
                    v41[3] = (((v420 + 65537 + ((v420 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v420 + 1 + BYTE1(v420)) >> 8))
                            + v411) >> 24;
                    v39 += 4;
                    v41 += 4 * v542;
                    --v413;
                  }
                  while (v413 > 1);
                  v412 = v567[0] & 3;
                }
                if (v412 >= 1)
                {
                  v421 = v412 + 1;
                  do
                  {
                    v422 = (*v39 | (*v41 << 16)) * v540;
                    *v39++ = ((unsigned __int16)(v422 + 1 + BYTE1(v422)) >> 8) + v411;
                    *v41 = (((v422 + 65537 + ((v422 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v422 + 1 + BYTE1(v422)) >> 8))
                          + v411) >> 24;
                    v41 += v542;
                    --v421;
                  }
                  while (v421 > 1);
                }
                v39 += v19;
                v41 += v42;
                --v557[0];
              }
              while (v557[0]);
            }
            else
            {
              v497 = (uint16x4_t)vdup_n_s16(v31);
              v498 = (uint16x4_t)vdup_n_s16(v540);
              do
              {
                v499 = v567[0];
                if (v567[0] >= 4)
                {
                  v500 = (v567[0] >> 2) + 1;
                  do
                  {
                    v5.i32[0] = *(_DWORD *)v39;
                    v501 = vmull_u16(v498, (uint16x4_t)*(_OWORD *)&vmovl_u8(v5));
                    *(uint16x4_t *)v6.i8 = vsra_n_u16(v497, (uint16x4_t)vadd_s16(vmovn_s32((int32x4_t)vsraq_n_u32(v501, v501, 8uLL)), (int16x4_t)0x1000100010001), 8uLL);
                    v5 = (uint8x8_t)vmovn_s16(v6);
                    *(_DWORD *)v39 = v5.i32[0];
                    v39 += 4;
                    v41 += 4 * v542;
                    --v500;
                  }
                  while (v500 > 1);
                  v499 = v567[0] & 3;
                }
                if (v499 >= 1)
                {
                  v502 = v499 + 1;
                  do
                  {
                    *v39 = v31
                         + ((unsigned __int16)(*v39 * v540
                                             + ((*v39 * v540) >> 8)
                                             + 1) >> 8);
                    ++v39;
                    --v502;
                  }
                  while (v502 > 1);
                  v41 += v499 * v542;
                }
                v39 += v19;
                v41 += v42;
                --v557[0];
              }
              while (v557[0]);
            }
            goto LABEL_1157;
          case 3:
            v423 = v538 | v31;
            do
            {
              v424 = v567[0];
              do
              {
                v425 = *v41;
                if (v425 == 255)
                {
                  *v39 = v31;
                  LOBYTE(v425) = v20;
                }
                else if (*v41)
                {
                  v426 = (v31 | (v20 << 16)) * (v425 ^ 0xFF)
                       + 65537
                       + ((((v31 | (v20 << 16)) * (v425 ^ 0xFF)) >> 8) & 0xFF00FF);
                  *v39 = v423 - BYTE1(v426);
                  v425 = (v423 - (v426 & 0xFF000000 | BYTE1(v426))) >> 24;
                }
                else
                {
                  *v39 = 0;
                }
                *v41 = v425;
                ++v39;
                v41 += v542;
                --v424;
              }
              while (v424);
              v39 += v19;
              v41 += v42;
              --v557[0];
            }
            while (v557[0]);
            goto LABEL_1157;
          case 4:
            v427 = v538 | v31;
            do
            {
              v428 = v567[0];
              do
              {
                v429 = *v41;
                if ((v429 ^ 0xFF) == 0xFF)
                {
                  *v39 = v31;
                  LOBYTE(v430) = v20;
                }
                else if (v429 != 0xFF)
                {
                  v431 = (v31 | (v20 << 16)) * v429 + 65537 + ((((v31 | (v20 << 16)) * v429) >> 8) & 0xFF00FF);
                  *v39 = v427 - BYTE1(v431);
                  v430 = (v427 - (v431 & 0xFF000000 | BYTE1(v431))) >> 24;
                }
                else
                {
                  LOBYTE(v430) = 0;
                  *v39 = 0;
                }
                *v41 = v430;
                ++v39;
                v41 += v542;
                --v428;
              }
              while (v428);
              v39 += v19;
              v41 += v42;
              --v557[0];
            }
            while (v557[0]);
            goto LABEL_1157;
          case 5:
            do
            {
              v432 = v567[0];
              do
              {
                v433 = (v31 | (v20 << 16)) * *v41
                     + (*v39 | (*v41 << 16)) * v540;
                v434 = v433 + 65537 + ((v433 >> 8) & 0xFF00FF);
                *v39++ = BYTE1(v434);
                *v41 = HIBYTE(v434);
                v41 += v542;
                --v432;
              }
              while (v432);
              v39 += v19;
              v41 += v42;
              --v557[0];
            }
            while (v557[0]);
            goto LABEL_1157;
          case 6:
            do
            {
              v435 = v567[0];
              do
              {
                v436 = *v41;
                if ((_BYTE)v436 != 0xFF)
                {
                  if (~(_BYTE)v436 == 255)
                  {
                    *v39 = v31;
                    LOBYTE(v437) = v20;
                  }
                  else
                  {
                    v438 = (v31 | (v20 << 16)) * ~(_BYTE)v436
                         + 65537
                         + ((((v31 | (v20 << 16)) * ~(_BYTE)v436) >> 8) & 0xFF00FF);
                    v439 = (*v39 | (v436 << 24)) + (v438 & 0xFF000000 | BYTE1(v438));
                    *v39 = v439;
                    v437 = HIBYTE(v439);
                  }
                  *v41 = v437;
                }
                ++v39;
                v41 += v542;
                --v435;
              }
              while (v435);
              v39 += v19;
              v41 += v42;
              --v557[0];
            }
            while (v557[0]);
            goto LABEL_1157;
          case 7:
            if (v8)
            {
              do
              {
                v440 = v567[0];
                do
                {
                  v441 = *v39;
                  v442 = *v41;
                  v443 = (v441 | (v442 << 16)) * v540
                       + 65537
                       + ((((v441 | (v442 << 16)) * v540) >> 8) & 0xFF00FF);
                  v444 = (v441 | (v442 << 24)) - (v443 & 0xFF000000 | BYTE1(v443));
                  *v39++ = v444;
                  *v41 = HIBYTE(v444);
                  v41 += v542;
                  --v440;
                }
                while (v440);
                v39 += v19;
                v41 += v42;
                --v557[0];
              }
              while (v557[0]);
            }
            else
            {
              do
              {
                v445 = v567[0];
                v446 = v567[0] - 1;
                do
                {
                  *v39 -= (unsigned __int16)(*v39 * v540
                                           + ((*v39 * v540) >> 8)
                                           + 1) >> 8;
                  ++v39;
                  --v445;
                }
                while (v445);
                v39 += v19;
                v41 += v42 + v542 + v542 * (unint64_t)v446;
                --v557[0];
              }
              while (v557[0]);
            }
            goto LABEL_1157;
          case 8:
            if (v8)
            {
              do
              {
                v447 = v567[0];
                do
                {
                  v448 = *v39;
                  v449 = *v41;
                  v450 = (v448 | (v449 << 16)) * v20 + 65537 + ((((v448 | (v449 << 16)) * v20) >> 8) & 0xFF00FF);
                  v451 = (v448 | (v449 << 24)) - (v450 & 0xFF000000 | BYTE1(v450));
                  *v39++ = v451;
                  *v41 = HIBYTE(v451);
                  v41 += v542;
                  --v447;
                }
                while (v447);
                v39 += v19;
                v41 += v42;
                --v557[0];
              }
              while (v557[0]);
            }
            else
            {
              do
              {
                v452 = v567[0];
                v453 = v567[0] - 1;
                do
                {
                  *v39 -= (unsigned __int16)(*v39 * (_WORD)v20
                                           + ((*v39 * v20) >> 8)
                                           + 1) >> 8;
                  ++v39;
                  --v452;
                }
                while (v452);
                v39 += v19;
                v41 += v42 + v542 + v542 * (unint64_t)v453;
                --v557[0];
              }
              while (v557[0]);
            }
            goto LABEL_1157;
          case 9:
            do
            {
              v454 = v567[0];
              do
              {
                v455 = (v31 | (v20 << 16)) * (*v41 ^ 0xFF)
                     + (*v39 | (*v41 << 16)) * v20;
                v456 = v455 + 65537 + ((v455 >> 8) & 0xFF00FF);
                *v39++ = BYTE1(v456);
                *v41 = HIBYTE(v456);
                v41 += v542;
                --v454;
              }
              while (v454);
              v39 += v19;
              v41 += v42;
              --v557[0];
            }
            while (v557[0]);
            goto LABEL_1157;
          case 10:
            do
            {
              v457 = v567[0];
              do
              {
                v458 = (v31 | (v20 << 16)) * (*v41 ^ 0xFF)
                     + (*v39 | (*v41 << 16)) * v540;
                v459 = v458 + 65537 + ((v458 >> 8) & 0xFF00FF);
                *v39++ = BYTE1(v459);
                *v41 = HIBYTE(v459);
                v41 += v542;
                --v457;
              }
              while (v457);
              v39 += v19;
              v41 += v42;
              --v557[0];
            }
            while (v557[0]);
            goto LABEL_1157;
          case 11:
            v460 = v20 - v31;
            if (v8)
            {
              do
              {
                v461 = v567[0];
                do
                {
                  v462 = ((v20 - v31) | (v20 << 16))
                       + (*v41 - *v39)
                       + (*v41 << 16);
                  v463 = (255 * ((v462 >> 8) & 0x10001)) | v462;
                  *v39++ = BYTE2(v463) - v463;
                  *v41 = BYTE2(v463);
                  v41 += v542;
                  --v461;
                }
                while (v461);
                v39 += v19;
                v41 += v42;
                --v557[0];
              }
              while (v557[0]);
            }
            else
            {
              do
              {
                v503 = v567[0];
                v504 = v567[0] - 1;
                do
                {
                  v505 = ((unsigned __int16)(v460 + (*v39 ^ 0xFF)) >> 8) | (2
                                                                                           * ((unsigned __int16)(v460 + (*v39 ^ 0xFF)) >> 8)) | (4 * (((unsigned __int16)(v460 + (*v39 ^ 0xFF)) >> 8) | (2 * ((unsigned __int16)(v460 + (*v39 ^ 0xFF)) >> 8))));
                  *v39 = ~((v460 + ~*v39) | (16 * v505) | v505);
                  ++v39;
                  --v503;
                }
                while (v503);
                v39 += v19;
                v41 += v42 + v542 + v542 * (unint64_t)v504;
                --v557[0];
              }
              while (v557[0]);
            }
            goto LABEL_1157;
          case 12:
            if (v8)
            {
              do
              {
                v464 = v567[0];
                do
                {
                  v465 = (v31 | (v20 << 16)) + (*v39 | (*v41 << 16));
                  v466 = (255 * ((v465 >> 8) & 0x10001)) | v465;
                  *v39++ = v466;
                  *v41 = BYTE2(v466);
                  v41 += v542;
                  --v464;
                }
                while (v464);
                v39 += v19;
                v41 += v42;
                --v557[0];
              }
              while (v557[0]);
            }
            else
            {
              do
              {
                v506 = v567[0];
                v507 = v567[0] - 1;
                do
                {
                  *v39 = -((*v39 + v31) >> 8) | (*v39 + v31);
                  ++v39;
                  --v506;
                }
                while (v506);
                v39 += v19;
                v41 += v42 + v542 + v542 * (unint64_t)v507;
                --v557[0];
              }
              while (v557[0]);
            }
            goto LABEL_1157;
          case 13:
            if (!v20)
              goto LABEL_1157;
            do
            {
              v467 = v567[0];
              do
              {
                if (v8)
                {
                  if (*v41)
                  {
                    v468 = PDAmultiplyPDA_15922(*v39, *v41, v31, v20);
                    *v39 = v468;
                    *v41 = HIBYTE(v468);
                  }
                  else
                  {
                    *v39 = v31;
                    *v41 = v20;
                  }
                }
                else
                {
                  *v39 = PDAmultiplyPDA_15922(*v39, 255, v31, v20);
                }
                ++v39;
                v41 += v542;
                --v467;
              }
              while (v467);
              v39 += v19;
              v41 += v42;
              --v557[0];
            }
            while (v557[0]);
            break;
          case 14:
            if (!v20)
              goto LABEL_1157;
            do
            {
              v469 = v567[0];
              do
              {
                if (v8)
                {
                  if (*v41)
                  {
                    v470 = PDAscreenPDA_15923(*v39, *v41, v31, v20);
                    *v39 = v470;
                    *v41 = HIBYTE(v470);
                  }
                  else
                  {
                    *v39 = v31;
                    *v41 = v20;
                  }
                }
                else
                {
                  *v39 = PDAscreenPDA_15923(*v39, 255, v31, v20);
                }
                ++v39;
                v41 += v542;
                --v469;
              }
              while (v469);
              v39 += v19;
              v41 += v42;
              --v557[0];
            }
            while (v557[0]);
            break;
          case 15:
            if (!v20)
              goto LABEL_1157;
            do
            {
              v471 = v567[0];
              do
              {
                if (v8)
                {
                  if (*v41)
                  {
                    v472 = PDAoverlayPDA_15924(*v39, *v41, v31, v20);
                    *v39 = v472;
                    *v41 = HIBYTE(v472);
                  }
                  else
                  {
                    *v39 = v31;
                    *v41 = v20;
                  }
                }
                else
                {
                  *v39 = PDAoverlayPDA_15924(*v39, 0xFFu, v31, v20);
                }
                ++v39;
                v41 += v542;
                --v471;
              }
              while (v471);
              v39 += v19;
              v41 += v42;
              --v557[0];
            }
            while (v557[0]);
            break;
          case 16:
            if (!v20)
              goto LABEL_1157;
            do
            {
              v473 = v567[0];
              do
              {
                if (v8)
                {
                  if (*v41)
                  {
                    v474 = PDAdarkenPDA_15926(*v39, *v41, v31, v20);
                    *v39 = v474;
                    *v41 = HIBYTE(v474);
                  }
                  else
                  {
                    *v39 = v31;
                    *v41 = v20;
                  }
                }
                else
                {
                  *v39 = PDAdarkenPDA_15926(*v39, 0xFFu, v31, v20);
                }
                ++v39;
                v41 += v542;
                --v473;
              }
              while (v473);
              v39 += v19;
              v41 += v42;
              --v557[0];
            }
            while (v557[0]);
            break;
          case 17:
            if (!v20)
              goto LABEL_1157;
            do
            {
              v475 = v567[0];
              do
              {
                if (v8)
                {
                  if (*v41)
                  {
                    v476 = PDAlightenPDA_15925(*v39, *v41, v31, v20);
                    *v39 = v476;
                    *v41 = HIBYTE(v476);
                  }
                  else
                  {
                    *v39 = v31;
                    *v41 = v20;
                  }
                }
                else
                {
                  *v39 = PDAlightenPDA_15925(*v39, 0xFFu, v31, v20);
                }
                ++v39;
                v41 += v542;
                --v475;
              }
              while (v475);
              v39 += v19;
              v41 += v42;
              --v557[0];
            }
            while (v557[0]);
            break;
          case 18:
            if (!v20)
              goto LABEL_1157;
            do
            {
              v477 = v567[0];
              do
              {
                if (v8)
                {
                  if (*v41)
                  {
                    v478 = PDAcolordodgePDA_15927(*v39, *v41, v31, v20);
                    *v39 = v478;
                    *v41 = HIBYTE(v478);
                  }
                  else
                  {
                    *v39 = v31;
                    *v41 = v20;
                  }
                }
                else
                {
                  *v39 = PDAcolordodgePDA_15927(*v39, 0xFFu, v31, v20);
                }
                ++v39;
                v41 += v542;
                --v477;
              }
              while (v477);
              v39 += v19;
              v41 += v42;
              --v557[0];
            }
            while (v557[0]);
            break;
          case 19:
            if (!v20)
              goto LABEL_1157;
            do
            {
              v479 = v567[0];
              do
              {
                if (v8)
                {
                  if (*v41)
                  {
                    v480 = PDAcolorburnPDA_15928(*v39, *v41, v31, v20);
                    *v39 = v480;
                    *v41 = HIBYTE(v480);
                  }
                  else
                  {
                    *v39 = v31;
                    *v41 = v20;
                  }
                }
                else
                {
                  *v39 = PDAcolorburnPDA_15928(*v39, 0xFFu, v31, v20);
                }
                ++v39;
                v41 += v542;
                --v479;
              }
              while (v479);
              v39 += v19;
              v41 += v42;
              --v557[0];
            }
            while (v557[0]);
            break;
          case 20:
            if (!v20)
              goto LABEL_1157;
            do
            {
              v481 = v567[0];
              do
              {
                if (v8)
                {
                  if (*v41)
                  {
                    v482 = PDAsoftlightPDA_15930(*v39, *v41, v31, v20);
                    *v39 = v482;
                    *v41 = HIBYTE(v482);
                  }
                  else
                  {
                    *v39 = v31;
                    *v41 = v20;
                  }
                }
                else
                {
                  *v39 = PDAsoftlightPDA_15930(*v39, 0xFFu, v31, v20);
                }
                ++v39;
                v41 += v542;
                --v481;
              }
              while (v481);
              v39 += v19;
              v41 += v42;
              --v557[0];
            }
            while (v557[0]);
            break;
          case 21:
            if (!v20)
              goto LABEL_1157;
            do
            {
              v483 = v567[0];
              do
              {
                if (v8)
                {
                  if (*v41)
                  {
                    v484 = PDAhardlightPDA_15929(*v39, *v41, v31, v20);
                    *v39 = v484;
                    *v41 = HIBYTE(v484);
                  }
                  else
                  {
                    *v39 = v31;
                    *v41 = v20;
                  }
                }
                else
                {
                  *v39 = PDAhardlightPDA_15929(*v39, 0xFFu, v31, v20);
                }
                ++v39;
                v41 += v542;
                --v483;
              }
              while (v483);
              v39 += v19;
              v41 += v42;
              --v557[0];
            }
            while (v557[0]);
            break;
          case 22:
            if (!v20)
              goto LABEL_1157;
            do
            {
              v485 = v567[0];
              do
              {
                if (v8)
                {
                  if (*v41)
                  {
                    v486 = PDAdifferencePDA_15931(*v39, *v41, v31, v20);
                    *v39 = v486;
                    *v41 = HIBYTE(v486);
                  }
                  else
                  {
                    *v39 = v31;
                    *v41 = v20;
                  }
                }
                else
                {
                  *v39 = PDAdifferencePDA_15931(*v39, 0xFFu, v31, v20);
                }
                ++v39;
                v41 += v542;
                --v485;
              }
              while (v485);
              v39 += v19;
              v41 += v42;
              --v557[0];
            }
            while (v557[0]);
            break;
          case 23:
            if (!v20)
              goto LABEL_1157;
            do
            {
              v487 = v567[0];
              do
              {
                if (v8)
                {
                  if (*v41)
                  {
                    v488 = PDAexclusionPDA_15932(*v39, *v41, v31, v20);
                    *v39 = v488;
                    *v41 = HIBYTE(v488);
                  }
                  else
                  {
                    *v39 = v31;
                    *v41 = v20;
                  }
                }
                else
                {
                  *v39 = PDAexclusionPDA_15932(*v39, 0xFFu, v31, v20);
                }
                ++v39;
                v41 += v542;
                --v487;
              }
              while (v487);
              v39 += v19;
              v41 += v42;
              --v557[0];
            }
            while (v557[0]);
            break;
          case 24:
            if (!v20)
              goto LABEL_1157;
            do
            {
              v489 = v567[0];
              do
              {
                if (v8)
                {
                  if (*v41)
                  {
                    v490 = PDAhuePDA_15933(*v39, *v41, v31, v20);
                    *v39 = v490;
                    *v41 = HIBYTE(v490);
                  }
                  else
                  {
                    *v39 = v31;
                    *v41 = v20;
                  }
                }
                else
                {
                  *v39 = PDAhuePDA_15933(*v39, 0xFFu, v31, v20);
                }
                ++v39;
                v41 += v542;
                --v489;
              }
              while (v489);
              v39 += v19;
              v41 += v42;
              --v557[0];
            }
            while (v557[0]);
            break;
          case 25:
            if (!v20)
              goto LABEL_1157;
            do
            {
              v491 = v567[0];
              do
              {
                if (v8)
                {
                  if (*v41)
                  {
                    v492 = PDAhuePDA_15933(*v39, *v41, v31, v20);
                    *v39 = v492;
                    *v41 = HIBYTE(v492);
                  }
                  else
                  {
                    *v39 = v31;
                    *v41 = v20;
                  }
                }
                else
                {
                  *v39 = PDAhuePDA_15933(*v39, 0xFFu, v31, v20);
                }
                ++v39;
                v41 += v542;
                --v491;
              }
              while (v491);
              v39 += v19;
              v41 += v42;
              --v557[0];
            }
            while (v557[0]);
            break;
          case 26:
            if (!v20)
              goto LABEL_1157;
            do
            {
              v493 = v567[0];
              do
              {
                if (v8)
                {
                  if (*v41)
                  {
                    v494 = PDAluminosityPDA_15935(v31, v20, *v39, *v41);
                    *v39 = v494;
                    *v41 = HIBYTE(v494);
                  }
                  else
                  {
                    *v39 = v31;
                    *v41 = v20;
                  }
                }
                else
                {
                  *v39 = PDAluminosityPDA_15935(v31, v20, *v39, 0xFFu);
                }
                ++v39;
                v41 += v542;
                --v493;
              }
              while (v493);
              v39 += v19;
              v41 += v42;
              --v557[0];
            }
            while (v557[0]);
            break;
          case 27:
            if (!v20)
              goto LABEL_1157;
            do
            {
              v495 = v567[0];
              do
              {
                if (v8)
                {
                  if (*v41)
                  {
                    v496 = PDAluminosityPDA_15935(*v39, *v41, v31, v20);
                    *v39 = v496;
                    *v41 = HIBYTE(v496);
                  }
                  else
                  {
                    *v39 = v31;
                    *v41 = v20;
                  }
                }
                else
                {
                  *v39 = PDAluminosityPDA_15935(*v39, 0xFFu, v31, v20);
                }
                ++v39;
                v41 += v542;
                --v495;
              }
              while (v495);
              v39 += v19;
              v41 += v42;
              --v557[0];
            }
            while (v557[0]);
            break;
          default:
            goto LABEL_1158;
        }
        v9 = v526;
LABEL_1157:
        v19 = *(_QWORD *)v544;
LABEL_1158:
        v39 = v548;
        v40 = (uint64_t)v554;
        if (!v554)
          return 1;
        v556 = 0;
      }
      v50 = v554;
      goto LABEL_1165;
    }
    v567[0] = *(_DWORD *)(v3 + 4);
    v557[0] = v14;
    v536 = *(int *)(v3 + 28);
    v21 = *(_QWORD *)(v3 + 88);
    v23 = *(int *)(v3 + 12);
    v22 = *(_DWORD *)(v3 + 16);
    if (v8)
    {
      v530 = *(int *)(v3 + 32);
      v531 = (char *)(v8 + v23 + (int)v530 * (uint64_t)v22);
      v24 = 0xFFFFFFFFLL;
    }
    else
    {
      v530 = 0;
      v531 = 0;
      v24 = 0;
    }
    v529 = *(_QWORD *)(v3 + 40) + v23 + v22 * (uint64_t)(int)v536;
    v35 = *(_DWORD *)(v3 + 56);
    v34 = *(_DWORD *)(v3 + 60);
    v36 = *(int *)(v3 + 76);
    if (v18 != 256)
    {
      v535 = *(_DWORD *)(v3 + 64);
      v533 = *(_DWORD *)(v3 + 68);
      if (v7)
      {
        v37 = *(int *)(v3 + 80);
        v38 = 1;
      }
      else
      {
        v37 = 0;
        v38 = 0;
      }
      v539 = v21 + *(int *)(v3 + 68) * (uint64_t)(int)v36;
      v24 &= 1u;
      if (v16)
      {
        v508 = *(_DWORD *)(v3 + 56);
        v509 = *(_DWORD *)(v3 + 60);
        v553 = v38;
        v555 = (void *)v24;
        v549 = *(int *)(v3 + 76);
        v53 = 1;
        v541 = *(_BYTE **)(v3 + 88);
        v51 = v541;
        goto LABEL_54;
      }
      v551 = v530 - (v24 * v12);
      if (v21)
      {
        v59 = v34 % v533;
        v60 = v35 % v535;
        v549 = *(int *)(v3 + 76);
        v528 = *(_QWORD *)(v3 + 88);
        v61 = v21 + (int)v36 * (uint64_t)v59;
        v51 = (_BYTE *)(v61 + v60);
        v21 = v61 + v535;
        v508 = v60;
        v509 = v59;
        if (v7)
        {
          v534 = 0;
          v527 = (uint64_t)v7;
          v7 += (int)v37 * (uint64_t)v59 + v60;
          v532 = 1;
          v38 = 1;
          v62 = (_BYTE *)v529;
          v57 = v531;
          v541 = (_BYTE *)(v61 + v60);
          v543 = v7;
        }
        else
        {
          v527 = 0;
          v534 = 0;
          v541 = (_BYTE *)(v61 + v60);
          v543 = 0;
          v532 = 1;
          v62 = (_BYTE *)v529;
          v57 = v531;
        }
        v58 = v12;
        goto LABEL_66;
      }
      v508 = *(_DWORD *)(v3 + 56);
      v509 = *(_DWORD *)(v3 + 60);
      v51 = 0;
      v532 = 1;
      v58 = v12;
LABEL_62:
      v539 = 0;
      v541 = 0;
      v534 = 0;
      v549 = v36 - v58;
      v37 -= v38 * (int)v12;
      v527 = (uint64_t)v7;
      v528 = (uint64_t)v51;
      v62 = (_BYTE *)v529;
      v57 = v531;
      v543 = v7;
      goto LABEL_66;
    }
    if (v7)
    {
      v37 = *(int *)(v3 + 80);
      v7 += v35 + (int)v37 * (uint64_t)v34;
      v38 = -1;
    }
    else
    {
      v37 = 0;
      v38 = 0;
    }
    v51 = (_BYTE *)(v21 + v35 + v34 * (uint64_t)(int)v36);
    if ((_DWORD)v36 == (_DWORD)v536 && (uint64_t)(v529 - (_QWORD)v51) >= 1)
    {
      if (v529 - (unint64_t)v51 <= v12)
      {
        v529 += v13;
        v51 += v13;
        v531 += v24 & v13;
        v7 += v38 & v13;
        v53 = -1;
        goto LABEL_49;
      }
      v52 = &v51[v36 * v15];
      if (v529 <= (unint64_t)&v52[v13])
      {
        v63 = v529 + v536 * v15;
        v536 = -v536;
        v36 = -v36;
        v531 += v530 * v15;
        v529 = v63;
        v530 = -v530;
        v24 &= 1u;
        v7 += v37 * v15;
        v37 = -v37;
        v38 &= 1u;
        v53 = 1;
        v51 = v52;
        goto LABEL_49;
      }
    }
    v24 &= 1u;
    v38 &= 1u;
    v53 = 1;
LABEL_49:
    v508 = *(_DWORD *)(v3 + 56);
    v509 = *(_DWORD *)(v3 + 60);
    if (v16)
    {
      v553 = v38;
      v555 = (void *)v24;
      v539 = 0;
      v541 = 0;
      v21 = -1;
      v549 = v36;
      v535 = v36;
      v533 = v37;
LABEL_54:
      v532 = v53;
      shape_enum_clip_alloc(v2, v3, (int *)v16, v53, v536, 1, *(_DWORD *)(v3 + 104), *(_DWORD *)(v3 + 108), v12, v14);
      v55 = v54;
      v527 = (uint64_t)v7;
      v528 = (uint64_t)v51;
      v56 = v7;
      v57 = v531;
      v551 = v530;
      if (!v54)
        return 1;
      while (2)
      {
        v543 = v56;
        if (!shape_enum_clip_next(v55, (int *)&v556 + 1, &v556, v567, v557))
        {
          v50 = (void *)v55;
LABEL_1165:
          free(v50);
          return 1;
        }
        v534 = v55;
        if (v539)
        {
          v62 = (_BYTE *)(v529 + v536 * (int)v556 + SHIDWORD(v556));
          v388 = ((int)v556 + *(_DWORD *)(v11 + 60)) % v533;
          v58 = v567[0];
          v389 = (HIDWORD(v556) + *(_DWORD *)(v11 + 56)) % v535;
          v390 = v528 + v549 * v388;
          v51 = (_BYTE *)(v390 + v389);
          v21 = v390 + v535;
          v24 = (uint64_t)v555;
          if ((_DWORD)v555)
            v57 = &v531[v530 * (int)v556 + SHIDWORD(v556)];
          v391 = v551;
          if ((_DWORD)v555)
            v391 = v530 - v567[0];
          v551 = v391;
          if (v553)
            v38 = v553;
          else
            v38 = 0;
          if (v553)
            v7 = (_BYTE *)(v527 + v37 * v388 + v389);
          v392 = (uint64_t)v543;
          if (v553)
            v392 = v527 + v37 * v388 + v389;
          v541 = (_BYTE *)(v390 + v389);
          v543 = (_BYTE *)v392;
          LODWORD(v12) = v567[0];
          v508 = (HIDWORD(v556) + *(_DWORD *)(v11 + 56)) % v535;
          v509 = ((int)v556 + *(_DWORD *)(v11 + 60)) % v533;
        }
        else
        {
          LODWORD(v12) = v567[0];
          v62 = (_BYTE *)(v529 + v536 * (int)v556 + SHIDWORD(v556) * (uint64_t)v532);
          v58 = v567[0] * v532;
          v51 = (_BYTE *)(v528 + (int)v556 * (uint64_t)v535 + SHIDWORD(v556) * (uint64_t)v532);
          v549 = v535 - v567[0] * v532;
          v24 = (uint64_t)v555;
          if ((_DWORD)v555)
            v57 = &v531[v530 * (int)v556 + SHIDWORD(v556) * (uint64_t)v532];
          v393 = v551;
          if ((_DWORD)v555)
            v393 = v530 - v567[0] * v532;
          v551 = v393;
          if (v553)
            v38 = v553;
          else
            v38 = 0;
          v539 = 0;
          if (v553)
          {
            v7 = (_BYTE *)(v527 + (int)v556 * (uint64_t)v533 + SHIDWORD(v556) * (uint64_t)v532);
            v37 = v533 - (int)v58;
          }
        }
LABEL_66:
        v553 = v38;
        v555 = (void *)v24;
        *(_QWORD *)v545 = v536 - v58;
        v537 = v37;
        switch(v9)
        {
          case 0:
            v64 = *(_QWORD *)v545 - (int)v12;
            v65 = &v62[-(int)v12 + 1];
            if (v532 >= 0)
            {
              v65 = v62;
              v64 = *(_QWORD *)v545 + (int)v12;
            }
            v66 = v557[0];
            v67 = v557[0] - 1;
            if (v64 >= 0)
              LODWORD(v68) = v64;
            else
              v68 = -v64;
            v69 = v24;
            CGBlt_fillBytes(v12, v557[0], 0, &v65[(v64 * v67) & (v64 >> 63)], v68);
            if (v69)
            {
              v70 = v551 - (int)v12;
              v71 = &v57[-(int)v12 + 1];
              if (v532 >= 0)
              {
                v71 = v57;
                v70 = v551 + (int)v12;
              }
              v72 = (v70 * v67) & (v70 >> 63);
              v57 = &v71[v72];
              if (v70 >= 0)
                v73 = v70;
              else
                v73 = -v70;
              v551 = v73;
              CGBlt_fillBytes(v12, v66, 0, &v71[v72], v73);
            }
            v9 = v526;
            goto LABEL_669;
          case 1:
            v74 = *(unsigned __int8 *)(v11 + 1);
            if (v74 == 2)
            {
              if ((int)v12 >= 32 && v535 <= 0x40)
              {
                v4.i32[0] = v535;
                v361 = (uint8x8_t)vcnt_s8(v4);
                v361.i16[0] = vaddlv_u8(v361);
                if (v361.i32[0] <= 1u)
                {
                  v362 = v12 + v545[0];
                  v546 = v557[0];
                  CGSFillDRAM64(v62, v362, v12, v557[0], v528, v549, v535, v533, v508, v509);
                  if (!(_DWORD)v555)
                    goto LABEL_669;
                  v55 = v534;
                  if (v553)
                    CGSFillDRAM64(v57, v12 + v551, v12, v546, v527, v37, v535, v533, v508, v509);
                  else
                    CGBlt_fillBytes(v12, v546, -1, v57, v12 + v551);
                  goto LABEL_670;
                }
              }
            }
            else if (v74 == 1)
            {
              if (v532 < 0)
              {
                v75 = v549 - (int)v12;
                v51 += -(int)v12 + 1;
                v76 = *(_QWORD *)v545 - (int)v12;
                v62 += -(int)v12 + 1;
              }
              else
              {
                v75 = v549 + (int)v12;
                v76 = *(_QWORD *)v545 + (int)v12;
              }
              v374 = v557[0] - 1;
              if (v75 >= 0)
                v375 = v75;
              else
                v375 = -v75;
              if (v76 >= 0)
                LODWORD(v376) = v76;
              else
                v376 = -v76;
              v547 = v557[0];
              v549 = v375;
              CGBlt_copyBytes(v12, v557[0], &v51[(v75 * v374) & (v75 >> 63)], &v62[(v76 * v374) & (v76 >> 63)], v375, v376);
              if (!(_DWORD)v555)
              {
                v9 = v526;
                goto LABEL_669;
              }
              v55 = v534;
              if (v553)
              {
                v377 = v37 - (int)v12;
                v378 = &v7[-(int)v12 + 1];
                v379 = v551 - (int)v12;
                v380 = &v57[-(int)v12 + 1];
                if (v532 >= 0)
                {
                  v380 = v57;
                  v378 = v7;
                  v377 = v37 + (int)v12;
                  v379 = v551 + (int)v12;
                }
                v381 = (v377 * v374) & (v377 >> 63);
                v7 = &v378[v381];
                if (v377 >= 0)
                  v37 = v377;
                else
                  v37 = -v377;
                v382 = (v379 * v374) & (v379 >> 63);
                v57 = &v380[v382];
                if (v379 >= 0)
                  v383 = v379;
                else
                  v383 = -v379;
                v551 = v383;
                CGBlt_copyBytes(v12, v547, &v378[v381], &v380[v382], v37, v383);
              }
              else
              {
                v394 = v551 - (int)v12;
                v395 = &v57[-(int)v12 + 1];
                if (v532 >= 0)
                {
                  v395 = v57;
                  v394 = v551 + (int)v12;
                }
                v396 = (v394 * v374) & (v394 >> 63);
                v57 = &v395[v396];
                if (v394 >= 0)
                  v397 = v394;
                else
                  v397 = -v394;
                v551 = v397;
                CGBlt_fillBytes(v12, v547, -1, &v395[v396], v397);
              }
              v9 = v526;
              goto LABEL_670;
            }
            if (!(_DWORD)v24)
            {
              v369 = v38;
              v322 = v541;
              v56 = v543;
              do
              {
                v370 = v567[0];
                do
                {
                  *v62 = *v51;
                  v62 += v532;
                  if ((unint64_t)&v51[v532] >= v21)
                    v371 = -(uint64_t)v535;
                  else
                    v371 = 0;
                  v51 += v532 + v371;
                  v7 += v369 + v371;
                  --v370;
                }
                while (v370);
                if (v539)
                {
                  if ((unint64_t)&v322[v549] >= v539)
                    v372 = -(v549 * v533);
                  else
                    v372 = 0;
                  v51 = &v322[v549 + v372];
                  if ((unint64_t)&v322[v549] >= v539)
                    v373 = -(v37 * v533);
                  else
                    v373 = 0;
                  v7 = &v56[v37 + v373];
                  v21 += v549 + v372;
                  v322 += v549 + v372;
                  v56 = v7;
                }
                else
                {
                  v51 += v549;
                  v7 += v37;
                }
                v62 += *(_QWORD *)v545;
                v57 += v551;
                --v557[0];
              }
              while (v557[0]);
              goto LABEL_835;
            }
            v363 = (int)v24;
            if (v38)
            {
              v364 = v38;
              v341 = v541;
              v56 = v543;
              do
              {
                v365 = v567[0];
                do
                {
                  *v62 = *v51;
                  *v57 = *v7;
                  v62 += v532;
                  v57 += v363;
                  if ((unint64_t)&v51[v532] >= v21)
                    v366 = -(uint64_t)v535;
                  else
                    v366 = 0;
                  v51 += v532 + v366;
                  v7 += v364 + v366;
                  --v365;
                }
                while (v365);
                if (v539)
                {
                  if ((unint64_t)&v341[v549] >= v539)
                    v367 = -(v549 * v533);
                  else
                    v367 = 0;
                  v51 = &v341[v549 + v367];
                  if ((unint64_t)&v341[v549] >= v539)
                    v368 = -(v37 * v533);
                  else
                    v368 = 0;
                  v7 = &v56[v37 + v368];
                  v21 += v549 + v367;
                  v341 += v549 + v367;
                  v56 = v7;
                }
                else
                {
                  v51 += v549;
                  v7 += v37;
                }
                v62 += *(_QWORD *)v545;
                v57 += v551;
                --v557[0];
              }
              while (v557[0]);
            }
            else
            {
              v341 = v541;
              v56 = v543;
              do
              {
                v384 = v567[0];
                do
                {
                  *v62 = *v51;
                  *v57 = -1;
                  v62 += v532;
                  v57 += (int)v24;
                  if ((unint64_t)&v51[v532] >= v21)
                    v385 = -(uint64_t)v535;
                  else
                    v385 = 0;
                  v51 += v532 + v385;
                  v7 += v385;
                  --v384;
                }
                while (v384);
                if (v539)
                {
                  if ((unint64_t)&v341[v549] >= v539)
                    v386 = -(v549 * v533);
                  else
                    v386 = 0;
                  v51 = &v341[v549 + v386];
                  if ((unint64_t)&v341[v549] >= v539)
                    v387 = -(v37 * v533);
                  else
                    v387 = 0;
                  v7 = &v56[v37 + v387];
                  v21 += v549 + v386;
                  v341 += v549 + v386;
                  v56 = v7;
                }
                else
                {
                  v51 += v549;
                  v7 += v37;
                }
                v62 += *(_QWORD *)v545;
                v57 += v551;
                --v557[0];
              }
              while (v557[0]);
            }
LABEL_871:
            v541 = v341;
            goto LABEL_872;
          case 2:
            if ((_DWORD)v24)
            {
              v77 = (int)v24;
              v78 = v38;
              v79 = v541;
              v56 = v543;
              do
              {
                v80 = v567[0];
                do
                {
                  v81 = *v7;
                  if (*v7)
                  {
                    if (v81 == 255)
                    {
                      *v62 = *v51;
                      LOBYTE(v82) = *v7;
                    }
                    else
                    {
                      v83 = (*v62 | (*v57 << 16)) * (v81 ^ 0xFF);
                      v84 = ((v83 + 65537 + ((v83 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v83 + 1 + BYTE1(v83)) >> 8))
                          + (*v51 | (v81 << 24));
                      *v62 = v84;
                      v82 = HIBYTE(v84);
                    }
                    *v57 = v82;
                  }
                  v62 += v532;
                  v57 += v77;
                  if ((unint64_t)&v51[v532] >= v21)
                    v85 = -(uint64_t)v535;
                  else
                    v85 = 0;
                  v51 += v532 + v85;
                  v7 += v78 + v85;
                  --v80;
                }
                while (v80);
                if (v539)
                {
                  if ((unint64_t)&v79[v549] >= v539)
                    v86 = -(v549 * v533);
                  else
                    v86 = 0;
                  v51 = &v79[v549 + v86];
                  if ((unint64_t)&v79[v549] >= v539)
                    v87 = -(v37 * v533);
                  else
                    v87 = 0;
                  v7 = &v56[v37 + v87];
                  v21 += v549 + v86;
                  v79 += v549 + v86;
                  v56 = v7;
                }
                else
                {
                  v51 += v549;
                  v7 += v37;
                }
                v62 += *(_QWORD *)v545;
                v57 += v551;
                --v557[0];
              }
              while (v557[0]);
              goto LABEL_264;
            }
            v321 = v38;
            v322 = v541;
            v56 = v543;
            do
            {
              v323 = v567[0];
              do
              {
                v324 = *v7;
                if (*v7)
                {
                  if (v324 == 255)
                    LOBYTE(v325) = *v51;
                  else
                    v325 = *v51
                         + ((*v62 * (v324 ^ 0xFF) + ((*v62 * (v324 ^ 0xFFu)) >> 8) + 1) >> 8);
                  *v62 = v325;
                }
                v62 += v532;
                if ((unint64_t)&v51[v532] >= v21)
                  v326 = -(uint64_t)v535;
                else
                  v326 = 0;
                v51 += v532 + v326;
                v7 += v321 + v326;
                --v323;
              }
              while (v323);
              if (v539)
              {
                if ((unint64_t)&v322[v549] >= v539)
                  v327 = -(v549 * v533);
                else
                  v327 = 0;
                v51 = &v322[v549 + v327];
                if ((unint64_t)&v322[v549] >= v539)
                  v328 = -(v37 * v533);
                else
                  v328 = 0;
                v7 = &v56[v37 + v328];
                v21 += v549 + v327;
                v322 += v549 + v327;
                v56 = v7;
              }
              else
              {
                v51 += v549;
                v7 += v37;
              }
              v62 += *(_QWORD *)v545;
              v57 += v551;
              --v557[0];
            }
            while (v557[0]);
            goto LABEL_835;
          case 3:
            v88 = (int)v24;
            if (v38)
            {
              v89 = v38;
              v79 = v541;
              v56 = v543;
              do
              {
                v90 = v567[0];
                do
                {
                  v91 = *v57;
                  if (v91 == 255)
                  {
                    *v62 = *v51;
                    LOBYTE(v91) = *v7;
                  }
                  else if (*v57)
                  {
                    v92 = *v51;
                    v93 = *v7;
                    v94 = (v92 | (v93 << 16)) * (v91 ^ 0xFF)
                        + 65537
                        + ((((v92 | (v93 << 16)) * (v91 ^ 0xFF)) >> 8) & 0xFF00FF);
                    v95 = v92 | (v93 << 24);
                    *v62 = v95 - BYTE1(v94);
                    v91 = (v95 - (v94 & 0xFF000000 | BYTE1(v94))) >> 24;
                  }
                  else
                  {
                    *v62 = 0;
                  }
                  *v57 = v91;
                  v62 += v532;
                  v57 += v88;
                  if ((unint64_t)&v51[v532] >= v21)
                    v96 = -(uint64_t)v535;
                  else
                    v96 = 0;
                  v51 += v532 + v96;
                  v7 += v89 + v96;
                  --v90;
                }
                while (v90);
                if (v539)
                {
                  if ((unint64_t)&v79[v549] >= v539)
                    v97 = -(v549 * v533);
                  else
                    v97 = 0;
                  v51 = &v79[v549 + v97];
                  if ((unint64_t)&v79[v549] >= v539)
                    v98 = -(v37 * v533);
                  else
                    v98 = 0;
                  v7 = &v56[v37 + v98];
                  v21 += v549 + v97;
                  v79 += v549 + v97;
                  v56 = v7;
                }
                else
                {
                  v51 += v549;
                  v7 += v37;
                }
                v62 += *(_QWORD *)v545;
                v57 += v551;
                --v557[0];
              }
              while (v557[0]);
              goto LABEL_264;
            }
            v322 = v541;
            v56 = v543;
            do
            {
              v329 = v567[0];
              do
              {
                v330 = *v57;
                if (*v57)
                {
                  if (v330 == 255)
                    LOBYTE(v330) = *v51;
                  else
                    v330 = *v51
                         - ((*v51 * (v330 ^ 0xFF) + ((*v51 * (v330 ^ 0xFF)) >> 8) + 1) >> 8);
                }
                *v62 = v330;
                v62 += v532;
                v57 += (int)v24;
                if ((unint64_t)&v51[v532] >= v21)
                  v331 = -(uint64_t)v535;
                else
                  v331 = 0;
                v51 += v532 + v331;
                v7 += v331;
                --v329;
              }
              while (v329);
              if (v539)
              {
                if ((unint64_t)&v322[v549] >= v539)
                  v332 = -(v549 * v533);
                else
                  v332 = 0;
                v51 = &v322[v549 + v332];
                if ((unint64_t)&v322[v549] >= v539)
                  v333 = -(v37 * v533);
                else
                  v333 = 0;
                v7 = &v56[v37 + v333];
                v21 += v549 + v332;
                v322 += v549 + v332;
                v56 = v7;
              }
              else
              {
                v51 += v549;
                v7 += v37;
              }
              v62 += *(_QWORD *)v545;
              v57 += v551;
              --v557[0];
            }
            while (v557[0]);
            goto LABEL_835;
          case 4:
            v99 = (int)v24;
            do
            {
              v100 = v567[0];
              do
              {
                v101 = *v57;
                if ((v101 ^ 0xFF) == 0xFF)
                {
                  if (v38)
                    LOBYTE(v102) = *v7;
                  else
                    LOBYTE(v102) = -1;
                }
                else if (v101 != 0xFF)
                {
                  if (v38)
                    v103 = *v7;
                  else
                    v103 = 255;
                  v104 = *v51;
                  v105 = (v104 | (v103 << 16)) * v101
                       + 65537
                       + ((((v104 | (v103 << 16)) * v101) >> 8) & 0xFF00FF);
                  v106 = v104 | (v103 << 24);
                  *v62 = v106 - BYTE1(v105);
                  v102 = (v106 - (v105 & 0xFF000000 | BYTE1(v105))) >> 24;
                }
                else
                {
                  LOBYTE(v102) = 0;
                  *v62 = 0;
                }
                *v57 = v102;
                v62 += v532;
                v57 += v99;
                if ((unint64_t)&v51[v532] >= v21)
                  v107 = -(uint64_t)v535;
                else
                  v107 = 0;
                v51 += v532 + v107;
                v7 += v38 + v107;
                --v100;
              }
              while (v100);
              if (v539)
              {
                if ((unint64_t)&v541[v549] >= v539)
                  v108 = -(v549 * v533);
                else
                  v108 = 0;
                v51 = &v541[v549 + v108];
                if ((unint64_t)&v541[v549] >= v539)
                  v109 = -(v37 * v533);
                else
                  v109 = 0;
                v7 = &v543[v37 + v109];
                v21 += v549 + v108;
                v541 += v549 + v108;
                v543 = v7;
              }
              else
              {
                v51 += v549;
                v7 += v37;
              }
              v62 += *(_QWORD *)v545;
              v57 += v551;
              --v557[0];
            }
            while (v557[0]);
            goto LABEL_669;
          case 5:
            v110 = (int)v24;
            v111 = v38;
            v112 = v541;
            v56 = v543;
            do
            {
              v113 = v567[0];
              do
              {
                v114 = (*v51 | (*v7 << 16)) * *v57
                     + (*v62 | (*v57 << 16)) * (*v7 ^ 0xFF);
                v115 = v114 + 65537 + ((v114 >> 8) & 0xFF00FF);
                *v62 = BYTE1(v115);
                *v57 = HIBYTE(v115);
                v62 += v532;
                v57 += v110;
                if ((unint64_t)&v51[v532] >= v21)
                  v116 = -(uint64_t)v535;
                else
                  v116 = 0;
                v51 += v532 + v116;
                v7 += v111 + v116;
                --v113;
              }
              while (v113);
              if (v539)
              {
                if ((unint64_t)&v112[v549] >= v539)
                  v117 = -(v549 * v533);
                else
                  v117 = 0;
                v51 = &v112[v549 + v117];
                if ((unint64_t)&v112[v549] >= v539)
                  v118 = -(v37 * v533);
                else
                  v118 = 0;
                v7 = &v56[v37 + v118];
                v21 += v549 + v117;
                v112 += v549 + v117;
                v56 = v7;
              }
              else
              {
                v51 += v549;
                v7 += v37;
              }
              v62 += *(_QWORD *)v545;
              v57 += v551;
              --v557[0];
            }
            while (v557[0]);
            goto LABEL_281;
          case 6:
            v119 = (int)v24;
            do
            {
              v120 = v567[0];
              do
              {
                v121 = *v57;
                if ((_BYTE)v121 != 0xFF)
                {
                  if (~(_BYTE)v121 == 255)
                  {
                    if (v38)
                      LOBYTE(v122) = *v7;
                    else
                      LOBYTE(v122) = -1;
                    *v62 = *v51;
                  }
                  else
                  {
                    if (v38)
                      v123 = *v7;
                    else
                      v123 = 255;
                    v124 = (*v51 | (v123 << 16)) * ~(_BYTE)v121;
                    v125 = ((v124 + 65537 + ((v124 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v124 + 1 + BYTE1(v124)) >> 8))
                         + (*v62 | (v121 << 24));
                    *v62 = v125;
                    v122 = HIBYTE(v125);
                  }
                  *v57 = v122;
                }
                v62 += v532;
                v57 += v119;
                if ((unint64_t)&v51[v532] >= v21)
                  v126 = -(uint64_t)v535;
                else
                  v126 = 0;
                v51 += v532 + v126;
                v7 += v38 + v126;
                --v120;
              }
              while (v120);
              if (v539)
              {
                if ((unint64_t)&v541[v549] >= v539)
                  v127 = -(v549 * v533);
                else
                  v127 = 0;
                v51 = &v541[v549 + v127];
                if ((unint64_t)&v541[v549] >= v539)
                  v128 = -(v37 * v533);
                else
                  v128 = 0;
                v7 = &v543[v37 + v128];
                v21 += v549 + v127;
                v541 += v549 + v127;
                v543 = v7;
              }
              else
              {
                v51 += v549;
                v7 += v37;
              }
              v62 += *(_QWORD *)v545;
              v57 += v551;
              --v557[0];
            }
            while (v557[0]);
            goto LABEL_669;
          case 7:
            if ((_DWORD)v24)
            {
              v129 = (int)v24;
              v130 = v38;
              v79 = v541;
              v56 = v543;
              do
              {
                v131 = v567[0];
                do
                {
                  v132 = *v7;
                  if (v132 != 255)
                  {
                    if (*v7)
                    {
                      v133 = *v62;
                      v134 = *v57;
                      v135 = (v133 | (v134 << 16)) * (v132 ^ 0xFF)
                           + 65537
                           + ((((v133 | (v134 << 16)) * (v132 ^ 0xFF)) >> 8) & 0xFF00FF);
                      v136 = v133 | (v134 << 24);
                      *v62 = v136 - BYTE1(v135);
                      v132 = (v136 - (v135 & 0xFF000000 | BYTE1(v135))) >> 24;
                    }
                    else
                    {
                      *v62 = 0;
                    }
                    *v57 = v132;
                  }
                  v62 += v532;
                  v57 += v129;
                  if ((unint64_t)&v51[v532] >= v21)
                    v137 = -(uint64_t)v535;
                  else
                    v137 = 0;
                  v51 += v532 + v137;
                  v7 += v130 + v137;
                  --v131;
                }
                while (v131);
                if (v539)
                {
                  if ((unint64_t)&v79[v549] >= v539)
                    v138 = -(v549 * v533);
                  else
                    v138 = 0;
                  v51 = &v79[v549 + v138];
                  if ((unint64_t)&v79[v549] >= v539)
                    v139 = -(v37 * v533);
                  else
                    v139 = 0;
                  v7 = &v56[v37 + v139];
                  v21 += v549 + v138;
                  v79 += v549 + v138;
                  v56 = v7;
                }
                else
                {
                  v51 += v549;
                  v7 += v37;
                }
                v62 += *(_QWORD *)v545;
                v57 += v551;
                --v557[0];
              }
              while (v557[0]);
              goto LABEL_264;
            }
            v334 = v38;
            v322 = v541;
            v56 = v543;
LABEL_716:
            v335 = v567[0];
            while (1)
            {
              v336 = *v7;
              if (!*v7)
                goto LABEL_720;
              if (v336 != 255)
                break;
LABEL_721:
              v62 += v532;
              if ((unint64_t)&v51[v532] >= v21)
                v337 = -(uint64_t)v535;
              else
                v337 = 0;
              v51 += v532 + v337;
              v7 += v334 + v337;
              if (!--v335)
              {
                if (v539)
                {
                  if ((unint64_t)&v322[v549] >= v539)
                    v338 = -(v549 * v533);
                  else
                    v338 = 0;
                  v51 = &v322[v549 + v338];
                  if ((unint64_t)&v322[v549] >= v539)
                    v339 = -(v37 * v533);
                  else
                    v339 = 0;
                  v7 = &v56[v37 + v339];
                  v21 += v549 + v338;
                  v322 += v549 + v338;
                  v56 = v7;
                }
                else
                {
                  v51 += v549;
                  v7 += v37;
                }
                v62 += *(_QWORD *)v545;
                v57 += v551;
                if (!--v557[0])
                  goto LABEL_835;
                goto LABEL_716;
              }
            }
            v336 = *v62
                 - ((*v62 * (v336 ^ 0xFF) + ((*v62 * (v336 ^ 0xFF)) >> 8) + 1) >> 8);
LABEL_720:
            *v62 = v336;
            goto LABEL_721;
          case 8:
            if (!(_DWORD)v24)
            {
              v340 = v38;
              v341 = v541;
              v56 = v543;
              while (1)
              {
                v342 = v567[0];
                do
                {
                  v343 = *v7;
                  if ((_BYTE)v343 == 0xFF)
                  {
                    LOBYTE(v344) = 0;
                  }
                  else
                  {
                    if (~(_BYTE)v343 == 255)
                      goto LABEL_743;
                    v344 = *v62
                         - ((*v62 * v343 + ((*v62 * v343) >> 8) + 1) >> 8);
                  }
                  *v62 = v344;
LABEL_743:
                  v62 += v532;
                  if ((unint64_t)&v51[v532] >= v21)
                    v345 = -(uint64_t)v535;
                  else
                    v345 = 0;
                  v51 += v532 + v345;
                  v7 += v340 + v345;
                  --v342;
                }
                while (v342);
                if (v539)
                {
                  if ((unint64_t)&v341[v549] >= v539)
                    v346 = -(v549 * v533);
                  else
                    v346 = 0;
                  v51 = &v341[v549 + v346];
                  if ((unint64_t)&v341[v549] >= v539)
                    v347 = -(v37 * v533);
                  else
                    v347 = 0;
                  v7 = &v56[v37 + v347];
                  v21 += v549 + v346;
                  v341 += v549 + v346;
                  v56 = v7;
                }
                else
                {
                  v51 += v549;
                  v7 += v37;
                }
                v62 += *(_QWORD *)v545;
                v57 += v551;
                if (!--v557[0])
                  goto LABEL_871;
              }
            }
            v140 = (int)v24;
            v141 = v38;
            v79 = v541;
            v56 = v543;
            do
            {
              v142 = v567[0];
              do
              {
                v143 = *v7;
                if ((v143 ^ 0xFF) != 0xFF)
                {
                  if (v143 != 0xFF)
                  {
                    v145 = *v62;
                    v146 = *v57;
                    v147 = (v145 | (v146 << 16)) * v143
                         + 65537
                         + ((((v145 | (v146 << 16)) * v143) >> 8) & 0xFF00FF);
                    v148 = v145 | (v146 << 24);
                    *v62 = v148 - BYTE1(v147);
                    v144 = (v148 - (v147 & 0xFF000000 | BYTE1(v147))) >> 24;
                  }
                  else
                  {
                    LOBYTE(v144) = 0;
                    *v62 = 0;
                  }
                  *v57 = v144;
                }
                v62 += v532;
                v57 += v140;
                if ((unint64_t)&v51[v532] >= v21)
                  v149 = -(uint64_t)v535;
                else
                  v149 = 0;
                v51 += v532 + v149;
                v7 += v141 + v149;
                --v142;
              }
              while (v142);
              if (v539)
              {
                if ((unint64_t)&v79[v549] >= v539)
                  v150 = -(v549 * v533);
                else
                  v150 = 0;
                v51 = &v79[v549 + v150];
                if ((unint64_t)&v79[v549] >= v539)
                  v151 = -(v37 * v533);
                else
                  v151 = 0;
                v7 = &v56[v37 + v151];
                v21 += v549 + v150;
                v79 += v549 + v150;
                v56 = v7;
              }
              else
              {
                v51 += v549;
                v7 += v37;
              }
              v62 += *(_QWORD *)v545;
              v57 += v551;
              --v557[0];
            }
            while (v557[0]);
LABEL_264:
            v541 = v79;
LABEL_872:
            v55 = v534;
            if (!v534)
              return 1;
LABEL_873:
            v556 = 0;
            continue;
          case 9:
            v152 = (int)v24;
            v153 = v38;
            v79 = v541;
            v56 = v543;
            do
            {
              v154 = v567[0];
              do
              {
                v155 = *v57;
                v156 = *v7;
                v157 = (*v51 | (v156 << 16)) * (v155 ^ 0xFF)
                     + (*v62 | (v155 << 16)) * v156
                     + 65537
                     + ((((*v51 | (v156 << 16)) * (v155 ^ 0xFF)
                        + (*v62 | (v155 << 16)) * v156) >> 8) & 0xFF00FF);
                *v62 = BYTE1(v157);
                *v57 = HIBYTE(v157);
                v62 += v532;
                v57 += v152;
                if ((unint64_t)&v51[v532] >= v21)
                  v158 = -(uint64_t)v535;
                else
                  v158 = 0;
                v51 += v532 + v158;
                v7 += v153 + v158;
                --v154;
              }
              while (v154);
              if (v539)
              {
                if ((unint64_t)&v79[v549] >= v539)
                  v159 = -(v549 * v533);
                else
                  v159 = 0;
                v51 = &v79[v549 + v159];
                if ((unint64_t)&v79[v549] >= v539)
                  v160 = -(v37 * v533);
                else
                  v160 = 0;
                v7 = &v56[v37 + v160];
                v21 += v549 + v159;
                v79 += v549 + v159;
                v56 = v7;
              }
              else
              {
                v51 += v549;
                v7 += v37;
              }
              v62 += *(_QWORD *)v545;
              v57 += v551;
              --v557[0];
            }
            while (v557[0]);
            goto LABEL_264;
          case 10:
            v161 = (int)v24;
            v162 = v38;
            v112 = v541;
            v56 = v543;
            do
            {
              v163 = v567[0];
              do
              {
                v164 = (*v51 | (*v7 << 16)) * (*v57 ^ 0xFF)
                     + (*v62 | (*v57 << 16)) * (*v7 ^ 0xFF);
                v165 = v164 + 65537 + ((v164 >> 8) & 0xFF00FF);
                *v62 = BYTE1(v165);
                *v57 = HIBYTE(v165);
                v62 += v532;
                v57 += v161;
                if ((unint64_t)&v51[v532] >= v21)
                  v166 = -(uint64_t)v535;
                else
                  v166 = 0;
                v51 += v532 + v166;
                v7 += v162 + v166;
                --v163;
              }
              while (v163);
              if (v539)
              {
                if ((unint64_t)&v112[v549] >= v539)
                  v167 = -(v549 * v533);
                else
                  v167 = 0;
                v51 = &v112[v549 + v167];
                if ((unint64_t)&v112[v549] >= v539)
                  v168 = -(v37 * v533);
                else
                  v168 = 0;
                v7 = &v56[v37 + v168];
                v21 += v549 + v167;
                v112 += v549 + v167;
                v56 = v7;
              }
              else
              {
                v51 += v549;
                v7 += v37;
              }
              v62 += *(_QWORD *)v545;
              v57 += v551;
              --v557[0];
            }
            while (v557[0]);
LABEL_281:
            v541 = v112;
            goto LABEL_872;
          case 11:
            if ((_DWORD)v24)
            {
              v169 = (int)v24;
              do
              {
                v170 = v567[0];
                do
                {
                  if (v38)
                    v171 = *v7;
                  else
                    v171 = 255;
                  v172 = ((*v57 - *v62) | (*v57 << 16))
                       + (v171 - *v51)
                       + (v171 << 16);
                  v173 = (255 * ((v172 >> 8) & 0x10001)) | v172;
                  *v62 = BYTE2(v173) - v173;
                  *v57 = BYTE2(v173);
                  v62 += v532;
                  v57 += v169;
                  if ((unint64_t)&v51[v532] >= v21)
                    v174 = -(uint64_t)v535;
                  else
                    v174 = 0;
                  v51 += v532 + v174;
                  v7 += v38 + v174;
                  --v170;
                }
                while (v170);
                if (v539)
                {
                  if ((unint64_t)&v541[v549] >= v539)
                    v175 = -(v549 * v533);
                  else
                    v175 = 0;
                  v51 = &v541[v549 + v175];
                  if ((unint64_t)&v541[v549] >= v539)
                    v176 = -(v37 * v533);
                  else
                    v176 = 0;
                  v7 = &v543[v37 + v176];
                  v21 += v549 + v175;
                  v541 += v549 + v175;
                  v543 = v7;
                }
                else
                {
                  v51 += v549;
                  v7 += v37;
                }
                v62 += *(_QWORD *)v545;
                v57 += v551;
                --v557[0];
              }
              while (v557[0]);
            }
            else
            {
              do
              {
                v348 = v567[0];
                do
                {
                  if (v38)
                    v349 = *v7;
                  else
                    v349 = 255;
                  v350 = v349 - *v51 + (*v62 ^ 0xFF);
                  v351 = HIBYTE(v350) | (2 * HIBYTE(v350)) | (4 * (HIBYTE(v350) | (2 * HIBYTE(v350))));
                  *v62 = ~(v350 | (16 * v351) | v351);
                  v62 += v532;
                  if ((unint64_t)&v51[v532] >= v21)
                    v352 = -(uint64_t)v535;
                  else
                    v352 = 0;
                  v51 += v532 + v352;
                  v7 += v38 + v352;
                  --v348;
                }
                while (v348);
                if (v539)
                {
                  if ((unint64_t)&v541[v549] >= v539)
                    v353 = -(v549 * v533);
                  else
                    v353 = 0;
                  v51 = &v541[v549 + v353];
                  if ((unint64_t)&v541[v549] >= v539)
                    v354 = -(v37 * v533);
                  else
                    v354 = 0;
                  v7 = &v543[v37 + v354];
                  v21 += v549 + v353;
                  v541 += v549 + v353;
                  v543 = v7;
                }
                else
                {
                  v51 += v549;
                  v7 += v37;
                }
                v62 += *(_QWORD *)v545;
                v57 += v551;
                --v557[0];
              }
              while (v557[0]);
            }
            goto LABEL_669;
          case 12:
            if (!(_DWORD)v24)
            {
              v355 = v38;
              v322 = v541;
              v56 = v543;
              do
              {
                v356 = v567[0];
                do
                {
                  v357 = *v51 + *v62;
                  *v62 = -(v357 >> 8) | v357;
                  v62 += v532;
                  if ((unint64_t)&v51[v532] >= v21)
                    v358 = -(uint64_t)v535;
                  else
                    v358 = 0;
                  v51 += v532 + v358;
                  v7 += v355 + v358;
                  --v356;
                }
                while (v356);
                if (v539)
                {
                  if ((unint64_t)&v322[v549] >= v539)
                    v359 = -(v549 * v533);
                  else
                    v359 = 0;
                  v51 = &v322[v549 + v359];
                  if ((unint64_t)&v322[v549] >= v539)
                    v360 = -(v37 * v533);
                  else
                    v360 = 0;
                  v7 = &v56[v37 + v360];
                  v21 += v549 + v359;
                  v322 += v549 + v359;
                  v56 = v7;
                }
                else
                {
                  v51 += v549;
                  v7 += v37;
                }
                v62 += *(_QWORD *)v545;
                v57 += v551;
                --v557[0];
              }
              while (v557[0]);
LABEL_835:
              v541 = v322;
              goto LABEL_872;
            }
            v177 = (int)v24;
            do
            {
              v178 = v567[0];
              do
              {
                if (v38)
                  v179 = *v7;
                else
                  v179 = 255;
                v180 = (*v62 | (*v57 << 16)) + *v51 + (v179 << 16);
                v181 = (255 * ((v180 >> 8) & 0x10001)) | v180;
                *v62 = v181;
                *v57 = BYTE2(v181);
                v62 += v532;
                v57 += v177;
                if ((unint64_t)&v51[v532] >= v21)
                  v182 = -(uint64_t)v535;
                else
                  v182 = 0;
                v51 += v532 + v182;
                v7 += v38 + v182;
                --v178;
              }
              while (v178);
              if (v539)
              {
                if ((unint64_t)&v541[v549] >= v539)
                  v183 = -(v549 * v533);
                else
                  v183 = 0;
                v51 = &v541[v549 + v183];
                if ((unint64_t)&v541[v549] >= v539)
                  v184 = -(v37 * v533);
                else
                  v184 = 0;
                v7 = &v543[v37 + v184];
                v21 += v549 + v183;
                v541 += v549 + v183;
                v543 = v7;
              }
              else
              {
                v51 += v549;
                v7 += v37;
              }
              v62 += *(_QWORD *)v545;
              v57 += v551;
              --v557[0];
            }
            while (v557[0]);
LABEL_669:
            v55 = v534;
LABEL_670:
            v56 = v543;
            if (!v55)
              return 1;
            goto LABEL_873;
          case 13:
            v185 = (int)v24;
            v186 = v38;
            v510 = -(v37 * v533);
            while (1)
            {
              v187 = v567[0];
              do
              {
                if (v38)
                {
                  v188 = *v7;
                  if (!*v7)
                    goto LABEL_334;
                  if ((_DWORD)v24)
                    goto LABEL_329;
                }
                else
                {
                  v188 = 255;
                  if ((_DWORD)v24)
                  {
LABEL_329:
                    if (*v57)
                    {
                      v189 = PDAmultiplyPDA_15922(*v62, *v57, *v51, v188);
                      v38 = v553;
                      LODWORD(v24) = (_DWORD)v555;
                      *v62 = v189;
                      *v57 = HIBYTE(v189);
                    }
                    else
                    {
                      *v62 = *v51;
                      *v57 = v188;
                    }
                    goto LABEL_334;
                  }
                }
                v190 = PDAmultiplyPDA_15922(*v62, 255, *v51, v188);
                v38 = v553;
                LODWORD(v24) = (_DWORD)v555;
                *v62 = v190;
LABEL_334:
                v62 += v532;
                v57 += v185;
                if ((unint64_t)&v51[v532] >= v21)
                  v191 = -(uint64_t)v535;
                else
                  v191 = 0;
                v51 += v532 + v191;
                v7 += v186 + v191;
                --v187;
              }
              while (v187);
              if (v539)
              {
                v37 = v537;
                v192 = -(v549 * v533);
                if ((unint64_t)&v541[v549] < v539)
                  v192 = 0;
                v51 = &v541[v549 + v192];
                v193 = v510;
                if ((unint64_t)&v541[v549] < v539)
                  v193 = 0;
                v7 = &v543[v537 + v193];
                v21 += v549 + v192;
                v541 += v549 + v192;
                v543 = v7;
              }
              else
              {
                v51 += v549;
                v37 = v537;
                v7 += v537;
              }
              v62 += *(_QWORD *)v545;
              v57 += v551;
              if (!--v557[0])
                goto LABEL_668;
            }
          case 14:
            v194 = (int)v24;
            v195 = v38;
            v511 = -(v37 * v533);
            while (1)
            {
              v196 = v567[0];
              do
              {
                if (v38)
                {
                  v197 = *v7;
                  if (!*v7)
                    goto LABEL_357;
                  if ((_DWORD)v24)
                    goto LABEL_352;
                }
                else
                {
                  v197 = 255;
                  if ((_DWORD)v24)
                  {
LABEL_352:
                    if (*v57)
                    {
                      v198 = PDAscreenPDA_15923(*v62, *v57, *v51, v197);
                      v38 = v553;
                      LODWORD(v24) = (_DWORD)v555;
                      *v62 = v198;
                      *v57 = HIBYTE(v198);
                    }
                    else
                    {
                      *v62 = *v51;
                      *v57 = v197;
                    }
                    goto LABEL_357;
                  }
                }
                v199 = PDAscreenPDA_15923(*v62, 255, *v51, v197);
                v38 = v553;
                LODWORD(v24) = (_DWORD)v555;
                *v62 = v199;
LABEL_357:
                v62 += v532;
                v57 += v194;
                if ((unint64_t)&v51[v532] >= v21)
                  v200 = -(uint64_t)v535;
                else
                  v200 = 0;
                v51 += v532 + v200;
                v7 += v195 + v200;
                --v196;
              }
              while (v196);
              if (v539)
              {
                v37 = v537;
                v201 = -(v549 * v533);
                if ((unint64_t)&v541[v549] < v539)
                  v201 = 0;
                v51 = &v541[v549 + v201];
                v202 = v511;
                if ((unint64_t)&v541[v549] < v539)
                  v202 = 0;
                v7 = &v543[v537 + v202];
                v21 += v549 + v201;
                v541 += v549 + v201;
                v543 = v7;
              }
              else
              {
                v51 += v549;
                v37 = v537;
                v7 += v537;
              }
              v62 += *(_QWORD *)v545;
              v57 += v551;
              if (!--v557[0])
                goto LABEL_668;
            }
          case 15:
            v203 = (int)v24;
            v204 = v38;
            v512 = -(v37 * v533);
            while (1)
            {
              v205 = v567[0];
              do
              {
                if (v38)
                {
                  v206 = *v7;
                  if (!*v7)
                    goto LABEL_380;
                  if ((_DWORD)v24)
                    goto LABEL_375;
                }
                else
                {
                  v206 = 255;
                  if ((_DWORD)v24)
                  {
LABEL_375:
                    if (*v57)
                    {
                      v207 = PDAoverlayPDA_15924(*v62, *v57, *v51, v206);
                      v38 = v553;
                      LODWORD(v24) = (_DWORD)v555;
                      *v62 = v207;
                      *v57 = HIBYTE(v207);
                    }
                    else
                    {
                      *v62 = *v51;
                      *v57 = v206;
                    }
                    goto LABEL_380;
                  }
                }
                v208 = PDAoverlayPDA_15924(*v62, 0xFFu, *v51, v206);
                v38 = v553;
                LODWORD(v24) = (_DWORD)v555;
                *v62 = v208;
LABEL_380:
                v62 += v532;
                v57 += v203;
                if ((unint64_t)&v51[v532] >= v21)
                  v209 = -(uint64_t)v535;
                else
                  v209 = 0;
                v51 += v532 + v209;
                v7 += v204 + v209;
                --v205;
              }
              while (v205);
              if (v539)
              {
                v37 = v537;
                v210 = -(v549 * v533);
                if ((unint64_t)&v541[v549] < v539)
                  v210 = 0;
                v51 = &v541[v549 + v210];
                v211 = v512;
                if ((unint64_t)&v541[v549] < v539)
                  v211 = 0;
                v7 = &v543[v537 + v211];
                v21 += v549 + v210;
                v541 += v549 + v210;
                v543 = v7;
              }
              else
              {
                v51 += v549;
                v37 = v537;
                v7 += v537;
              }
              v62 += *(_QWORD *)v545;
              v57 += v551;
              if (!--v557[0])
                goto LABEL_668;
            }
          case 16:
            v212 = (int)v24;
            v213 = v38;
            v513 = -(v37 * v533);
            while (1)
            {
              v214 = v567[0];
              do
              {
                if (v38)
                {
                  v215 = *v7;
                  if (!*v7)
                    goto LABEL_403;
                  if ((_DWORD)v24)
                    goto LABEL_398;
                }
                else
                {
                  v215 = 255;
                  if ((_DWORD)v24)
                  {
LABEL_398:
                    if (*v57)
                    {
                      v216 = PDAdarkenPDA_15926(*v62, *v57, *v51, v215);
                      v38 = v553;
                      LODWORD(v24) = (_DWORD)v555;
                      *v62 = v216;
                      *v57 = HIBYTE(v216);
                    }
                    else
                    {
                      *v62 = *v51;
                      *v57 = v215;
                    }
                    goto LABEL_403;
                  }
                }
                v217 = PDAdarkenPDA_15926(*v62, 0xFFu, *v51, v215);
                v38 = v553;
                LODWORD(v24) = (_DWORD)v555;
                *v62 = v217;
LABEL_403:
                v62 += v532;
                v57 += v212;
                if ((unint64_t)&v51[v532] >= v21)
                  v218 = -(uint64_t)v535;
                else
                  v218 = 0;
                v51 += v532 + v218;
                v7 += v213 + v218;
                --v214;
              }
              while (v214);
              if (v539)
              {
                v37 = v537;
                v219 = -(v549 * v533);
                if ((unint64_t)&v541[v549] < v539)
                  v219 = 0;
                v51 = &v541[v549 + v219];
                v220 = v513;
                if ((unint64_t)&v541[v549] < v539)
                  v220 = 0;
                v7 = &v543[v537 + v220];
                v21 += v549 + v219;
                v541 += v549 + v219;
                v543 = v7;
              }
              else
              {
                v51 += v549;
                v37 = v537;
                v7 += v537;
              }
              v62 += *(_QWORD *)v545;
              v57 += v551;
              if (!--v557[0])
                goto LABEL_668;
            }
          case 17:
            v221 = (int)v24;
            v222 = v38;
            v514 = -(v37 * v533);
            while (1)
            {
              v223 = v567[0];
              do
              {
                if (v38)
                {
                  v224 = *v7;
                  if (!*v7)
                    goto LABEL_426;
                  if ((_DWORD)v24)
                    goto LABEL_421;
                }
                else
                {
                  v224 = 255;
                  if ((_DWORD)v24)
                  {
LABEL_421:
                    if (*v57)
                    {
                      v225 = PDAlightenPDA_15925(*v62, *v57, *v51, v224);
                      v38 = v553;
                      LODWORD(v24) = (_DWORD)v555;
                      *v62 = v225;
                      *v57 = HIBYTE(v225);
                    }
                    else
                    {
                      *v62 = *v51;
                      *v57 = v224;
                    }
                    goto LABEL_426;
                  }
                }
                v226 = PDAlightenPDA_15925(*v62, 0xFFu, *v51, v224);
                v38 = v553;
                LODWORD(v24) = (_DWORD)v555;
                *v62 = v226;
LABEL_426:
                v62 += v532;
                v57 += v221;
                if ((unint64_t)&v51[v532] >= v21)
                  v227 = -(uint64_t)v535;
                else
                  v227 = 0;
                v51 += v532 + v227;
                v7 += v222 + v227;
                --v223;
              }
              while (v223);
              if (v539)
              {
                v37 = v537;
                v228 = -(v549 * v533);
                if ((unint64_t)&v541[v549] < v539)
                  v228 = 0;
                v51 = &v541[v549 + v228];
                v229 = v514;
                if ((unint64_t)&v541[v549] < v539)
                  v229 = 0;
                v7 = &v543[v537 + v229];
                v21 += v549 + v228;
                v541 += v549 + v228;
                v543 = v7;
              }
              else
              {
                v51 += v549;
                v37 = v537;
                v7 += v537;
              }
              v62 += *(_QWORD *)v545;
              v57 += v551;
              if (!--v557[0])
                goto LABEL_668;
            }
          case 18:
            v230 = (int)v24;
            v231 = v38;
            v515 = -(v37 * v533);
            while (1)
            {
              v232 = v567[0];
              do
              {
                if (v38)
                {
                  v233 = *v7;
                  if (!*v7)
                    goto LABEL_449;
                  if ((_DWORD)v24)
                    goto LABEL_444;
                }
                else
                {
                  v233 = 255;
                  if ((_DWORD)v24)
                  {
LABEL_444:
                    if (*v57)
                    {
                      v234 = PDAcolordodgePDA_15927(*v62, *v57, *v51, v233);
                      v38 = v553;
                      LODWORD(v24) = (_DWORD)v555;
                      *v62 = v234;
                      *v57 = HIBYTE(v234);
                    }
                    else
                    {
                      *v62 = *v51;
                      *v57 = v233;
                    }
                    goto LABEL_449;
                  }
                }
                v235 = PDAcolordodgePDA_15927(*v62, 0xFFu, *v51, v233);
                v38 = v553;
                LODWORD(v24) = (_DWORD)v555;
                *v62 = v235;
LABEL_449:
                v62 += v532;
                v57 += v230;
                if ((unint64_t)&v51[v532] >= v21)
                  v236 = -(uint64_t)v535;
                else
                  v236 = 0;
                v51 += v532 + v236;
                v7 += v231 + v236;
                --v232;
              }
              while (v232);
              if (v539)
              {
                v37 = v537;
                v237 = -(v549 * v533);
                if ((unint64_t)&v541[v549] < v539)
                  v237 = 0;
                v51 = &v541[v549 + v237];
                v238 = v515;
                if ((unint64_t)&v541[v549] < v539)
                  v238 = 0;
                v7 = &v543[v537 + v238];
                v21 += v549 + v237;
                v541 += v549 + v237;
                v543 = v7;
              }
              else
              {
                v51 += v549;
                v37 = v537;
                v7 += v537;
              }
              v62 += *(_QWORD *)v545;
              v57 += v551;
              if (!--v557[0])
                goto LABEL_668;
            }
          case 19:
            v239 = (int)v24;
            v240 = v38;
            v516 = -(v37 * v533);
            while (1)
            {
              v241 = v567[0];
              do
              {
                if (v38)
                {
                  v242 = *v7;
                  if (!*v7)
                    goto LABEL_472;
                  if ((_DWORD)v24)
                    goto LABEL_467;
                }
                else
                {
                  v242 = 255;
                  if ((_DWORD)v24)
                  {
LABEL_467:
                    if (*v57)
                    {
                      v243 = PDAcolorburnPDA_15928(*v62, *v57, *v51, v242);
                      v38 = v553;
                      LODWORD(v24) = (_DWORD)v555;
                      *v62 = v243;
                      *v57 = HIBYTE(v243);
                    }
                    else
                    {
                      *v62 = *v51;
                      *v57 = v242;
                    }
                    goto LABEL_472;
                  }
                }
                v244 = PDAcolorburnPDA_15928(*v62, 0xFFu, *v51, v242);
                v38 = v553;
                LODWORD(v24) = (_DWORD)v555;
                *v62 = v244;
LABEL_472:
                v62 += v532;
                v57 += v239;
                if ((unint64_t)&v51[v532] >= v21)
                  v245 = -(uint64_t)v535;
                else
                  v245 = 0;
                v51 += v532 + v245;
                v7 += v240 + v245;
                --v241;
              }
              while (v241);
              if (v539)
              {
                v37 = v537;
                v246 = -(v549 * v533);
                if ((unint64_t)&v541[v549] < v539)
                  v246 = 0;
                v51 = &v541[v549 + v246];
                v247 = v516;
                if ((unint64_t)&v541[v549] < v539)
                  v247 = 0;
                v7 = &v543[v537 + v247];
                v21 += v549 + v246;
                v541 += v549 + v246;
                v543 = v7;
              }
              else
              {
                v51 += v549;
                v37 = v537;
                v7 += v537;
              }
              v62 += *(_QWORD *)v545;
              v57 += v551;
              if (!--v557[0])
                goto LABEL_668;
            }
          case 20:
            v248 = (int)v24;
            v249 = v38;
            v517 = -(v37 * v533);
            while (1)
            {
              v250 = v567[0];
              do
              {
                if (v38)
                {
                  v251 = *v7;
                  if (!*v7)
                    goto LABEL_495;
                  if ((_DWORD)v24)
                    goto LABEL_490;
                }
                else
                {
                  v251 = 255;
                  if ((_DWORD)v24)
                  {
LABEL_490:
                    if (*v57)
                    {
                      v252 = PDAsoftlightPDA_15930(*v62, *v57, *v51, v251);
                      v38 = v553;
                      LODWORD(v24) = (_DWORD)v555;
                      *v62 = v252;
                      *v57 = HIBYTE(v252);
                    }
                    else
                    {
                      *v62 = *v51;
                      *v57 = v251;
                    }
                    goto LABEL_495;
                  }
                }
                v253 = PDAsoftlightPDA_15930(*v62, 0xFFu, *v51, v251);
                v38 = v553;
                LODWORD(v24) = (_DWORD)v555;
                *v62 = v253;
LABEL_495:
                v62 += v532;
                v57 += v248;
                if ((unint64_t)&v51[v532] >= v21)
                  v254 = -(uint64_t)v535;
                else
                  v254 = 0;
                v51 += v532 + v254;
                v7 += v249 + v254;
                --v250;
              }
              while (v250);
              if (v539)
              {
                v37 = v537;
                v255 = -(v549 * v533);
                if ((unint64_t)&v541[v549] < v539)
                  v255 = 0;
                v51 = &v541[v549 + v255];
                v256 = v517;
                if ((unint64_t)&v541[v549] < v539)
                  v256 = 0;
                v7 = &v543[v537 + v256];
                v21 += v549 + v255;
                v541 += v549 + v255;
                v543 = v7;
              }
              else
              {
                v51 += v549;
                v37 = v537;
                v7 += v537;
              }
              v62 += *(_QWORD *)v545;
              v57 += v551;
              if (!--v557[0])
                goto LABEL_668;
            }
          case 21:
            v257 = (int)v24;
            v258 = v38;
            v518 = -(v37 * v533);
            while (1)
            {
              v259 = v567[0];
              do
              {
                if (v38)
                {
                  v260 = *v7;
                  if (!*v7)
                    goto LABEL_518;
                  if ((_DWORD)v24)
                    goto LABEL_513;
                }
                else
                {
                  v260 = 255;
                  if ((_DWORD)v24)
                  {
LABEL_513:
                    if (*v57)
                    {
                      v261 = PDAhardlightPDA_15929(*v62, *v57, *v51, v260);
                      v38 = v553;
                      LODWORD(v24) = (_DWORD)v555;
                      *v62 = v261;
                      *v57 = HIBYTE(v261);
                    }
                    else
                    {
                      *v62 = *v51;
                      *v57 = v260;
                    }
                    goto LABEL_518;
                  }
                }
                v262 = PDAhardlightPDA_15929(*v62, 0xFFu, *v51, v260);
                v38 = v553;
                LODWORD(v24) = (_DWORD)v555;
                *v62 = v262;
LABEL_518:
                v62 += v532;
                v57 += v257;
                if ((unint64_t)&v51[v532] >= v21)
                  v263 = -(uint64_t)v535;
                else
                  v263 = 0;
                v51 += v532 + v263;
                v7 += v258 + v263;
                --v259;
              }
              while (v259);
              if (v539)
              {
                v37 = v537;
                v264 = -(v549 * v533);
                if ((unint64_t)&v541[v549] < v539)
                  v264 = 0;
                v51 = &v541[v549 + v264];
                v265 = v518;
                if ((unint64_t)&v541[v549] < v539)
                  v265 = 0;
                v7 = &v543[v537 + v265];
                v21 += v549 + v264;
                v541 += v549 + v264;
                v543 = v7;
              }
              else
              {
                v51 += v549;
                v37 = v537;
                v7 += v537;
              }
              v62 += *(_QWORD *)v545;
              v57 += v551;
              if (!--v557[0])
                goto LABEL_668;
            }
          case 22:
            v266 = (int)v24;
            v267 = v38;
            v519 = -(v37 * v533);
            while (1)
            {
              v268 = v567[0];
              do
              {
                if (v38)
                {
                  v269 = *v7;
                  if (!*v7)
                    goto LABEL_541;
                  if ((_DWORD)v24)
                    goto LABEL_536;
                }
                else
                {
                  v269 = 255;
                  if ((_DWORD)v24)
                  {
LABEL_536:
                    if (*v57)
                    {
                      v270 = PDAdifferencePDA_15931(*v62, *v57, *v51, v269);
                      v38 = v553;
                      LODWORD(v24) = (_DWORD)v555;
                      *v62 = v270;
                      *v57 = HIBYTE(v270);
                    }
                    else
                    {
                      *v62 = *v51;
                      *v57 = v269;
                    }
                    goto LABEL_541;
                  }
                }
                v271 = PDAdifferencePDA_15931(*v62, 0xFFu, *v51, v269);
                v38 = v553;
                LODWORD(v24) = (_DWORD)v555;
                *v62 = v271;
LABEL_541:
                v62 += v532;
                v57 += v266;
                if ((unint64_t)&v51[v532] >= v21)
                  v272 = -(uint64_t)v535;
                else
                  v272 = 0;
                v51 += v532 + v272;
                v7 += v267 + v272;
                --v268;
              }
              while (v268);
              if (v539)
              {
                v37 = v537;
                v273 = -(v549 * v533);
                if ((unint64_t)&v541[v549] < v539)
                  v273 = 0;
                v51 = &v541[v549 + v273];
                v274 = v519;
                if ((unint64_t)&v541[v549] < v539)
                  v274 = 0;
                v7 = &v543[v537 + v274];
                v21 += v549 + v273;
                v541 += v549 + v273;
                v543 = v7;
              }
              else
              {
                v51 += v549;
                v37 = v537;
                v7 += v537;
              }
              v62 += *(_QWORD *)v545;
              v57 += v551;
              if (!--v557[0])
                goto LABEL_668;
            }
          case 23:
            v275 = (int)v24;
            v276 = v38;
            v520 = -(v37 * v533);
            while (1)
            {
              v277 = v567[0];
              do
              {
                if (v38)
                {
                  v278 = *v7;
                  if (!*v7)
                    goto LABEL_564;
                  if ((_DWORD)v24)
                    goto LABEL_559;
                }
                else
                {
                  v278 = 255;
                  if ((_DWORD)v24)
                  {
LABEL_559:
                    if (*v57)
                    {
                      v279 = PDAexclusionPDA_15932(*v62, *v57, *v51, v278);
                      v38 = v553;
                      LODWORD(v24) = (_DWORD)v555;
                      *v62 = v279;
                      *v57 = HIBYTE(v279);
                    }
                    else
                    {
                      *v62 = *v51;
                      *v57 = v278;
                    }
                    goto LABEL_564;
                  }
                }
                v280 = PDAexclusionPDA_15932(*v62, 0xFFu, *v51, v278);
                v38 = v553;
                LODWORD(v24) = (_DWORD)v555;
                *v62 = v280;
LABEL_564:
                v62 += v532;
                v57 += v275;
                if ((unint64_t)&v51[v532] >= v21)
                  v281 = -(uint64_t)v535;
                else
                  v281 = 0;
                v51 += v532 + v281;
                v7 += v276 + v281;
                --v277;
              }
              while (v277);
              if (v539)
              {
                v37 = v537;
                v282 = -(v549 * v533);
                if ((unint64_t)&v541[v549] < v539)
                  v282 = 0;
                v51 = &v541[v549 + v282];
                v283 = v520;
                if ((unint64_t)&v541[v549] < v539)
                  v283 = 0;
                v7 = &v543[v537 + v283];
                v21 += v549 + v282;
                v541 += v549 + v282;
                v543 = v7;
              }
              else
              {
                v51 += v549;
                v37 = v537;
                v7 += v537;
              }
              v62 += *(_QWORD *)v545;
              v57 += v551;
              if (!--v557[0])
                goto LABEL_668;
            }
          case 24:
            v284 = (int)v24;
            v285 = v38;
            v521 = -(v37 * v533);
            while (1)
            {
              v286 = v567[0];
              do
              {
                if (v38)
                {
                  v287 = *v7;
                  if (!*v7)
                    goto LABEL_587;
                  if ((_DWORD)v24)
                    goto LABEL_582;
                }
                else
                {
                  v287 = 255;
                  if ((_DWORD)v24)
                  {
LABEL_582:
                    if (*v57)
                    {
                      v288 = PDAhuePDA_15933(*v62, *v57, *v51, v287);
                      v38 = v553;
                      LODWORD(v24) = (_DWORD)v555;
                      *v62 = v288;
                      *v57 = HIBYTE(v288);
                    }
                    else
                    {
                      *v62 = *v51;
                      *v57 = v287;
                    }
                    goto LABEL_587;
                  }
                }
                v289 = PDAhuePDA_15933(*v62, 0xFFu, *v51, v287);
                v38 = v553;
                LODWORD(v24) = (_DWORD)v555;
                *v62 = v289;
LABEL_587:
                v62 += v532;
                v57 += v284;
                if ((unint64_t)&v51[v532] >= v21)
                  v290 = -(uint64_t)v535;
                else
                  v290 = 0;
                v51 += v532 + v290;
                v7 += v285 + v290;
                --v286;
              }
              while (v286);
              if (v539)
              {
                v37 = v537;
                v291 = -(v549 * v533);
                if ((unint64_t)&v541[v549] < v539)
                  v291 = 0;
                v51 = &v541[v549 + v291];
                v292 = v521;
                if ((unint64_t)&v541[v549] < v539)
                  v292 = 0;
                v7 = &v543[v537 + v292];
                v21 += v549 + v291;
                v541 += v549 + v291;
                v543 = v7;
              }
              else
              {
                v51 += v549;
                v37 = v537;
                v7 += v537;
              }
              v62 += *(_QWORD *)v545;
              v57 += v551;
              if (!--v557[0])
                goto LABEL_668;
            }
          case 25:
            v293 = (int)v24;
            v294 = v38;
            v522 = -(v37 * v533);
            while (1)
            {
              v295 = v567[0];
              do
              {
                if (v38)
                {
                  v296 = *v7;
                  if (!*v7)
                    goto LABEL_610;
                  if ((_DWORD)v24)
                    goto LABEL_605;
                }
                else
                {
                  v296 = 255;
                  if ((_DWORD)v24)
                  {
LABEL_605:
                    if (*v57)
                    {
                      v297 = PDAhuePDA_15933(*v62, *v57, *v51, v296);
                      v38 = v553;
                      LODWORD(v24) = (_DWORD)v555;
                      *v62 = v297;
                      *v57 = HIBYTE(v297);
                    }
                    else
                    {
                      *v62 = *v51;
                      *v57 = v296;
                    }
                    goto LABEL_610;
                  }
                }
                v298 = PDAhuePDA_15933(*v62, 0xFFu, *v51, v296);
                v38 = v553;
                LODWORD(v24) = (_DWORD)v555;
                *v62 = v298;
LABEL_610:
                v62 += v532;
                v57 += v293;
                if ((unint64_t)&v51[v532] >= v21)
                  v299 = -(uint64_t)v535;
                else
                  v299 = 0;
                v51 += v532 + v299;
                v7 += v294 + v299;
                --v295;
              }
              while (v295);
              if (v539)
              {
                v37 = v537;
                v300 = -(v549 * v533);
                if ((unint64_t)&v541[v549] < v539)
                  v300 = 0;
                v51 = &v541[v549 + v300];
                v301 = v522;
                if ((unint64_t)&v541[v549] < v539)
                  v301 = 0;
                v7 = &v543[v537 + v301];
                v21 += v549 + v300;
                v541 += v549 + v300;
                v543 = v7;
              }
              else
              {
                v51 += v549;
                v37 = v537;
                v7 += v537;
              }
              v62 += *(_QWORD *)v545;
              v57 += v551;
              if (!--v557[0])
                goto LABEL_668;
            }
          case 26:
            v302 = (int)v24;
            v303 = v38;
            v523 = -(v37 * v533);
            while (1)
            {
              v304 = v567[0];
              do
              {
                if (v38)
                {
                  v305 = *v7;
                  if (!*v7)
                    goto LABEL_633;
                  if ((_DWORD)v24)
                    goto LABEL_628;
                }
                else
                {
                  v305 = 255;
                  if ((_DWORD)v24)
                  {
LABEL_628:
                    v306 = *v51;
                    if (*v57)
                    {
                      v307 = PDAluminosityPDA_15935(v306, v305, *v62, *v57);
                      v38 = v553;
                      LODWORD(v24) = (_DWORD)v555;
                      *v62 = v307;
                      *v57 = HIBYTE(v307);
                    }
                    else
                    {
                      *v62 = v306;
                      *v57 = v305;
                    }
                    goto LABEL_633;
                  }
                }
                v308 = PDAluminosityPDA_15935(*v51, v305, *v62, 0xFFu);
                v38 = v553;
                LODWORD(v24) = (_DWORD)v555;
                *v62 = v308;
LABEL_633:
                v62 += v532;
                v57 += v302;
                if ((unint64_t)&v51[v532] >= v21)
                  v309 = -(uint64_t)v535;
                else
                  v309 = 0;
                v51 += v532 + v309;
                v7 += v303 + v309;
                --v304;
              }
              while (v304);
              if (v539)
              {
                v37 = v537;
                v310 = -(v549 * v533);
                if ((unint64_t)&v541[v549] < v539)
                  v310 = 0;
                v51 = &v541[v549 + v310];
                v311 = v523;
                if ((unint64_t)&v541[v549] < v539)
                  v311 = 0;
                v7 = &v543[v537 + v311];
                v21 += v549 + v310;
                v541 += v549 + v310;
                v543 = v7;
              }
              else
              {
                v51 += v549;
                v37 = v537;
                v7 += v537;
              }
              v62 += *(_QWORD *)v545;
              v57 += v551;
              if (!--v557[0])
                goto LABEL_668;
            }
          case 27:
            v312 = (int)v24;
            v313 = v38;
            v524 = -(v37 * v533);
            break;
          default:
            goto LABEL_669;
        }
        break;
      }
LABEL_647:
      v314 = v567[0];
      while (1)
      {
        if (v38)
        {
          v315 = *v7;
          if (!*v7)
            goto LABEL_656;
          if (!(_DWORD)v24)
            goto LABEL_654;
        }
        else
        {
          v315 = 255;
          if (!(_DWORD)v24)
          {
LABEL_654:
            v317 = PDAluminosityPDA_15935(*v62, 0xFFu, *v51, v315);
            v38 = v553;
            LODWORD(v24) = (_DWORD)v555;
            *v62 = v317;
            goto LABEL_656;
          }
        }
        if (*v57)
        {
          v316 = PDAluminosityPDA_15935(*v62, *v57, *v51, v315);
          v38 = v553;
          LODWORD(v24) = (_DWORD)v555;
          *v62 = v316;
          *v57 = HIBYTE(v316);
        }
        else
        {
          *v62 = *v51;
          *v57 = v315;
        }
LABEL_656:
        v62 += v532;
        v57 += v312;
        if ((unint64_t)&v51[v532] >= v21)
          v318 = -(uint64_t)v535;
        else
          v318 = 0;
        v51 += v532 + v318;
        v7 += v313 + v318;
        if (!--v314)
        {
          if (v539)
          {
            v37 = v537;
            v319 = -(v549 * v533);
            if ((unint64_t)&v541[v549] < v539)
              v319 = 0;
            v51 = &v541[v549 + v319];
            v320 = v524;
            if ((unint64_t)&v541[v549] < v539)
              v320 = 0;
            v7 = &v543[v537 + v320];
            v21 += v549 + v319;
            v541 += v549 + v319;
            v543 = v7;
          }
          else
          {
            v51 += v549;
            v37 = v537;
            v7 += v537;
          }
          v62 += *(_QWORD *)v545;
          v57 += v551;
          if (!--v557[0])
          {
LABEL_668:
            v11 = v525;
            v9 = v526;
            goto LABEL_669;
          }
          goto LABEL_647;
        }
      }
    }
    v58 = v53 * (int)v12;
    v551 = v530 - (int)v24 * (int)v12;
    v21 = -1;
    v532 = v53;
    v533 = v37;
    v535 = v36;
    goto LABEL_62;
  }
  v17 = *(_DWORD *)(v3 + 128);
  if ((v17 | 8) == 8)
  {
    if ((*(_DWORD *)v3 & 0xFF00) == 0x400)
      W8_mark_constmask(v3, v9);
    else
      W8_mark_pixelmask(v3, v9);
    return 1;
  }
  v25 = *(_DWORD *)(v3 + 112);
  v26 = *(_DWORD *)(v3 + 116);
  v27 = (v25 + 15) & 0xFFFFFFF0;
  v28 = v27 * v26;
  if ((int)v28 <= 4096)
  {
    v30 = v567;
    goto LABEL_38;
  }
  v29 = malloc_type_malloc(v28, 0x8303D2FuLL);
  if (v29)
  {
    v30 = v29;
    v16 = *(uint16x4_t **)(v11 + 136);
    v17 = *(_DWORD *)(v11 + 128);
LABEL_38:
    CGSConvertBitsToMask(v16, *(_DWORD *)(v11 + 124), v30, v27, v25, v26, v17);
    v45 = *(_OWORD *)(v11 + 112);
    v563 = *(_OWORD *)(v11 + 96);
    v564 = v45;
    v46 = *(_OWORD *)(v11 + 144);
    v565 = *(_OWORD *)(v11 + 128);
    v566 = v46;
    v47 = *(_OWORD *)(v11 + 48);
    v559 = *(_OWORD *)(v11 + 32);
    v560 = v47;
    v48 = *(_OWORD *)(v11 + 80);
    v561 = *(_OWORD *)(v11 + 64);
    v562 = v48;
    v49 = *(_OWORD *)(v11 + 16);
    *(_OWORD *)v557 = *(_OWORD *)v11;
    v558 = v49;
    HIDWORD(v564) = (v25 + 15) & 0xFFFFFFF0;
    *((_QWORD *)&v565 + 1) = v30;
    if (BYTE1(v557[0]) << 8 == 1024)
      W8_mark_constmask((uint64_t)v557, v9);
    else
      W8_mark_pixelmask((uint64_t)v557, v9);
    if (v30 == (_BYTE *)v567)
      return 1;
    v50 = v30;
    goto LABEL_1165;
  }
  return 1;
}

uint64_t W8_mark_constmask(uint64_t a1, int a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int8x16_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  unsigned __int8 *v85;
  char v86;
  unsigned int *v87;
  unsigned __int8 *v88;
  int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  unsigned __int8 *v95;
  char v96;
  unsigned int *v97;
  unsigned __int8 *v98;
  int v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  int v104;
  unsigned int v105;
  int v106;
  int v107;
  unsigned int v108;
  int v109;
  int v110;
  unsigned int v111;
  int v112;
  int v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  int v119;
  uint64_t v120;
  int v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  unsigned int v128;
  unsigned int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  unsigned int v138;
  unsigned int v139;
  int v140;
  int v141;
  int v142;
  unsigned int v143;
  int v144;
  uint64_t v145;
  int v146;
  unsigned int v147;
  unsigned int v148;
  int v149;
  unsigned int v150;
  unsigned int v151;
  int v152;
  int v153;
  unsigned int v154;
  unsigned int v155;
  int v156;
  int v157;
  int v158;
  char v159;
  int v160;
  unsigned int v161;
  int v162;
  int v163;
  unsigned int v164;
  int v165;
  char v166;
  unsigned int *v167;
  unsigned __int8 *v168;
  int v169;
  int v170;
  unsigned int v171;
  uint64_t v172;
  int v173;
  char v174;
  unsigned int *v175;
  unsigned __int8 *v176;
  int v177;
  int v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  unsigned int v184;
  int v185;
  unsigned int v186;
  unsigned int v187;
  int v188;
  unsigned int v189;
  unsigned int v190;
  int v191;
  unsigned int v192;
  unsigned int v193;
  int v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  unsigned int v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  unsigned int v203;
  uint64_t v204;
  unsigned int v205;
  int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  int v216;
  unsigned int v217;
  unsigned int v218;
  int v219;
  unsigned int v220;
  unsigned int v221;
  int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  int v226;
  unsigned int v227;
  int v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  unsigned int v232;
  int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  int v238;
  uint64_t v239;
  int v240;
  int v241;
  uint64_t v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  int v246;
  int v247;
  unsigned int v248;
  int v249;
  uint64_t v250;
  int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(unsigned __int8 **)(a1 + 96);
  if (v4)
    v5 = *v4 << 24;
  else
    v5 = -16777216;
  v7 = *(_DWORD *)(a1 + 4);
  v6 = *(_DWORD *)(a1 + 8);
  v254 = *(int *)(a1 + 28);
  v8 = *(_QWORD *)(a1 + 136);
  v250 = *(_QWORD *)(a1 + 40);
  v9 = **(unsigned __int8 **)(a1 + 88);
  v10 = v5 | v9;
  pthread_mutex_lock(&W8_cacheColorLock);
  v11 = W8_cacheColor;
  v252 = v7;
  if (!W8_cacheColor || *(_DWORD *)(W8_cacheColor + 16) != v10)
  {
    v14 = 0;
    while (1)
    {
      if (!v11)
        goto LABEL_12;
      v15 = (_QWORD *)v14;
      v14 = v11;
      if (*(_DWORD *)(v11 + 16) == v10)
        break;
      v11 = *(_QWORD *)v11;
      if (!*(_QWORD *)v14)
      {
        if (W8_cacheColorCount > 6)
        {
          *v15 = 0;
        }
        else
        {
LABEL_12:
          v16 = (char *)W8_cacheColorBase;
          if (W8_cacheColorBase)
          {
            v17 = W8_cacheColorCount;
          }
          else
          {
            v16 = (char *)malloc_type_calloc(1uLL, 0x1CA8uLL, 0x10200408056D5EBuLL);
            v17 = 0;
            W8_cacheColorBase = (uint64_t)v16;
          }
          v14 = (uint64_t)&v16[24 * v17];
          *(_QWORD *)(v14 + 8) = &v16[1024 * (unint64_t)v17 + 168];
          W8_cacheColorCount = v17 + 1;
        }
        v18 = 0;
        *(_QWORD *)v14 = W8_cacheColor;
        W8_cacheColor = v14;
        *(_DWORD *)(v14 + 16) = v10;
        v20 = *(_QWORD *)(v14 + 8);
        v13 = v14 + 8;
        v19 = v20;
        v21 = vdupq_n_s32(v9 | (v5 >> 8));
        v22 = (int32x4_t)xmmword_185004DC0;
        v23 = vdupq_n_s32(v10);
        v24.i64[0] = 0xFF000000FFLL;
        v24.i64[1] = 0xFF000000FFLL;
        v25.i64[0] = 0x1000100010001;
        v25.i64[1] = 0x1000100010001;
        v26.i64[0] = 0xFF000000FF000000;
        v26.i64[1] = 0xFF000000FF000000;
        v27.i64[0] = 0x400000004;
        v27.i64[1] = 0x400000004;
        do
        {
          v28 = vmulq_s32((int32x4_t)veorq_s8((int8x16_t)v22, v24), v21);
          v29 = (int8x16_t)vaddq_s32(vaddq_s32(v28, v25), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v28, 8uLL) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)));
          *(int32x4_t *)(v19 + v18) = vsubq_s32(v23, (int32x4_t)vorrq_s8(vandq_s8(v29, v26), vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v29, 8uLL), v24)));
          v22 = vaddq_s32(v22, v27);
          v18 += 16;
        }
        while (v18 != 1024);
        result = pthread_mutex_unlock(&W8_cacheColorLock);
        goto LABEL_23;
      }
    }
    if (v15)
    {
      *v15 = *(_QWORD *)v11;
      *(_QWORD *)v11 = W8_cacheColor;
      W8_cacheColor = v11;
    }
  }
  result = pthread_mutex_unlock(&W8_cacheColorLock);
  v13 = v11 + 8;
LABEL_23:
  v30 = *(_QWORD *)v13;
  v31 = *(_DWORD *)(*(_QWORD *)v13 + 1020);
  v33 = *(int *)(a1 + 12);
  v32 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    v34 = *(int *)(a1 + 32);
    v35 = (unsigned __int8 *)(v3 + v33 + (int)v34 * (uint64_t)v32);
    v36 = 1;
  }
  else
  {
    v35 = 0;
    v34 = 0;
    v36 = 0;
  }
  if (v8)
  {
    v37 = v34 - v252;
    if (v3)
      v34 -= v252;
    v253 = v34;
    v38 = HIBYTE(v31);
    v39 = (unsigned __int8 *)(v250 + v33 + v32 * (uint64_t)(int)v254);
    v40 = *(int *)(a1 + 124);
    v41 = v8 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v40;
    v42 = v40 - v252;
    v255 = v254 - v252;
    switch(a2)
    {
      case 0:
        if (v3)
        {
          do
          {
            v43 = v252;
            do
            {
              v44 = *(unsigned __int8 *)v41;
              if (*(_BYTE *)v41)
              {
                if (v44 == 255)
                {
                  LOBYTE(v45) = 0;
                  *v39 = 0;
                }
                else
                {
                  v46 = *v39;
                  v47 = *v35;
                  v48 = (v46 | (v47 << 16)) * v44
                      + 65537
                      + ((((v46 | (v47 << 16)) * v44) >> 8) & 0xFF00FF);
                  v49 = v46 | (v47 << 24);
                  *v39 = v49 - BYTE1(v48);
                  v45 = (v49 - (v48 & 0xFF000000 | BYTE1(v48))) >> 24;
                }
                *v35 = v45;
              }
              ++v41;
              ++v39;
              v35 += v36;
              --v43;
            }
            while (v43);
            v41 += v42;
            v39 += v255;
            v35 += v253;
            --v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v80 = v252;
            do
            {
              v81 = *(unsigned __int8 *)v41;
              if (*(_BYTE *)v41)
              {
                if (v81 == 255)
                  LOBYTE(v82) = 0;
                else
                  v82 = *v39 - ((*v39 * v81 + ((*v39 * v81) >> 8) + 1) >> 8);
                *v39 = v82;
              }
              ++v41;
              ++v39;
              --v80;
            }
            while (v80);
            v41 += v42;
            v39 += v255;
            --v6;
          }
          while (v6);
        }
        return result;
      case 1:
        v83 = v41 & 3;
        if (!v3)
        {
          v165 = -1 << (8 * v83);
          if ((v41 & 3) != 0)
            v166 = v41 & 0xFC;
          else
            v166 = v41;
          if ((v41 & 3) != 0)
          {
            v167 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFFCLL);
          }
          else
          {
            v165 = -1;
            v167 = (unsigned int *)v41;
          }
          if ((v41 & 3) != 0)
            v168 = &v39[-(v41 & 3)];
          else
            v168 = v39;
          if ((v41 & 3) != 0)
            v169 = v83 + v252;
          else
            v169 = v252;
          if ((((_BYTE)v169 + v166) & 3) != 0)
          {
            v170 = 4 - (((_BYTE)v169 + v166) & 3);
            v83 += v170;
            v171 = 0xFFFFFFFF >> (8 * v170);
            if (v169 >= 4)
              v172 = v171;
            else
              v172 = 0;
            if (v169 >= 4)
              v171 = -1;
            v165 &= v171;
          }
          else
          {
            v172 = 0;
          }
          v229 = v42 - v83;
          v230 = v169 >> 2;
          v231 = v255 - v83;
          while (1)
          {
            v232 = *v167 & v165;
            v233 = v230;
            result = v172;
            if (!v232)
              goto LABEL_475;
LABEL_457:
            if (v232 == -1)
            {
              *(_DWORD *)v168 = 16843009 * v31;
              goto LABEL_475;
            }
            while (1)
            {
              if ((_BYTE)v232)
              {
                LOBYTE(v234) = v31;
                if (v232 != 255)
                  v234 = *(_DWORD *)(v30 + 4 * v232)
                       + (((v232 ^ 0xFF) * *v168
                         + (((v232 ^ 0xFF) * *v168) >> 8)
                         + 1) >> 8);
                *v168 = v234;
              }
              if (BYTE1(v232))
              {
                LOBYTE(v235) = v31;
                if (BYTE1(v232) != 255)
                  v235 = *(_DWORD *)(v30 + 4 * BYTE1(v232))
                       + (((BYTE1(v232) ^ 0xFF) * v168[1] + (((BYTE1(v232) ^ 0xFF) * v168[1]) >> 8) + 1) >> 8);
                v168[1] = v235;
              }
              if (BYTE2(v232))
              {
                LOBYTE(v236) = v31;
                if (BYTE2(v232) != 255)
                  v236 = *(_DWORD *)(v30 + 4 * BYTE2(v232))
                       + (((BYTE2(v232) ^ 0xFF) * v168[2] + (((BYTE2(v232) ^ 0xFF) * v168[2]) >> 8) + 1) >> 8);
                v168[2] = v236;
              }
              v237 = HIBYTE(v232);
              if (v237 == 255)
              {
                v168[3] = v31;
              }
              else if (v237)
              {
                v168[3] = *(_BYTE *)(v30 + 4 * v237)
                        + ((unsigned __int16)((v237 ^ 0xFF) * v168[3] + (((v237 ^ 0xFF) * v168[3]) >> 8) + 1) >> 8);
              }
LABEL_475:
              while (1)
              {
                v238 = v233;
                v168 += 4;
                --v233;
                ++v167;
                if (v238 < 2)
                  break;
                v232 = *v167;
                if (*v167)
                  goto LABEL_457;
              }
              if (!(_DWORD)result)
                break;
              result = 0;
              v232 = *v167 & v172;
            }
            v167 = (unsigned int *)((char *)v167 + v229);
            v168 += v231;
            if (!--v6)
              return result;
          }
        }
        v84 = -1 << (8 * v83);
        v85 = &v39[-(v41 & 3)];
        if ((v41 & 3) != 0)
          v86 = v41 & 0xFC;
        else
          v86 = v41;
        if ((v41 & 3) != 0)
        {
          v87 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFFCLL);
        }
        else
        {
          v84 = -1;
          v87 = (unsigned int *)v41;
        }
        if ((v41 & 3) != 0)
          v88 = &v35[-(v41 & 3)];
        else
          v88 = v35;
        if ((v41 & 3) != 0)
        {
          v89 = v83 + v252;
        }
        else
        {
          v85 = v39;
          v89 = v252;
        }
        if ((((_BYTE)v89 + v86) & 3) != 0)
        {
          v90 = 4 - (((_BYTE)v89 + v86) & 3);
          v83 += v90;
          v91 = 0xFFFFFFFF >> (8 * v90);
          if (v89 >= 4)
            v92 = v91;
          else
            v92 = 0;
          if (v89 >= 4)
            v91 = -1;
          v84 &= v91;
        }
        else
        {
          v92 = 0;
        }
        v181 = v42 - v83;
        result = v255 - v83;
        v182 = v89 >> 2;
        v183 = v37 - v83;
        do
        {
          v184 = *v87 & v84;
          v185 = v182;
          v186 = v92;
          if (!v184)
            goto LABEL_426;
LABEL_405:
          if (v184 == -1)
          {
            *v85 = v31;
            *v88 = HIBYTE(v31);
            v85[1] = v31;
            v88[1] = HIBYTE(v31);
            v85[2] = v31;
            v88[2] = HIBYTE(v31);
LABEL_423:
            v85[3] = v31;
            v88[3] = HIBYTE(v31);
            goto LABEL_426;
          }
          while (1)
          {
            if ((_BYTE)v184)
            {
              if (v184 == 255)
              {
                *v85 = v31;
                v187 = HIBYTE(v31);
              }
              else
              {
                v188 = *(_DWORD *)(v30 + 4 * v184);
                v189 = (*v85 | (*v88 << 16)) * (v184 ^ 0xFF);
                *v85 = ((unsigned __int16)(v189 + 1 + BYTE1(v189)) >> 8) + v188;
                v187 = (((v189 + 65537 + ((v189 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v189 + 1 + BYTE1(v189)) >> 8))
                      + (v188 & 0xFF0000FF)) >> 24;
              }
              *v88 = v187;
            }
            if (BYTE1(v184))
            {
              if (BYTE1(v184) == 255)
              {
                v85[1] = v31;
                v190 = HIBYTE(v31);
              }
              else
              {
                v191 = *(_DWORD *)(v30 + 4 * BYTE1(v184));
                v192 = (v85[1] | (v88[1] << 16)) * (BYTE1(v184) ^ 0xFF);
                v85[1] = ((unsigned __int16)(v192 + 1 + BYTE1(v192)) >> 8) + v191;
                v190 = (((v192 + 65537 + ((v192 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v192 + 1 + BYTE1(v192)) >> 8))
                      + (v191 & 0xFF0000FF)) >> 24;
              }
              v88[1] = v190;
            }
            if (BYTE2(v184))
            {
              if (BYTE2(v184) == 255)
              {
                v85[2] = v31;
                v193 = HIBYTE(v31);
              }
              else
              {
                v194 = *(_DWORD *)(v30 + 4 * BYTE2(v184));
                v195 = (v85[2] | (v88[2] << 16)) * (BYTE2(v184) ^ 0xFF);
                v85[2] = ((unsigned __int16)(v195 + 1 + BYTE1(v195)) >> 8) + v194;
                v193 = (((v195 + 65537 + ((v195 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v195 + 1 + BYTE1(v195)) >> 8))
                      + (v194 & 0xFF0000FF)) >> 24;
              }
              v88[2] = v193;
            }
            v196 = HIBYTE(v184);
            if (v196 == 255)
              goto LABEL_423;
            if (v196)
            {
              v197 = *(_DWORD *)(v30 + 4 * v196);
              v198 = (v85[3] | (v88[3] << 16)) * (v196 ^ 0xFF);
              v85[3] = ((unsigned __int16)(v198 + 1 + BYTE1(v198)) >> 8) + v197;
              v88[3] = (((v198 + 65537 + ((v198 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v198 + 1 + BYTE1(v198)) >> 8))
                      + (v197 & 0xFF0000FF)) >> 24;
            }
LABEL_426:
            while (1)
            {
              v199 = v185;
              v85 += 4;
              v88 += 4;
              --v185;
              ++v87;
              if (v199 < 2)
                break;
              v184 = *v87;
              if (*v87)
                goto LABEL_405;
            }
            if (!v186)
              break;
            v186 = 0;
            v184 = *v87 & v92;
          }
          v87 = (unsigned int *)((char *)v87 + v181);
          v85 += result;
          v88 += v183;
          --v6;
        }
        while (v6);
        return result;
      case 2:
        v93 = v41 & 3;
        if (v3)
        {
          v94 = -1 << (8 * v93);
          v95 = &v39[-(v41 & 3)];
          if ((v41 & 3) != 0)
            v96 = v41 & 0xFC;
          else
            v96 = v41;
          if ((v41 & 3) != 0)
          {
            v97 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFFCLL);
          }
          else
          {
            v94 = -1;
            v97 = (unsigned int *)v41;
          }
          if ((v41 & 3) != 0)
            v98 = &v35[-(v41 & 3)];
          else
            v98 = v35;
          if ((v41 & 3) != 0)
          {
            v99 = v93 + v252;
          }
          else
          {
            v95 = v39;
            v99 = v252;
          }
          if ((((_BYTE)v99 + v96) & 3) != 0)
          {
            v100 = 4 - (((_BYTE)v99 + v96) & 3);
            v93 += v100;
            v101 = 0xFFFFFFFF >> (8 * v100);
            if (v99 >= 4)
              v102 = v101;
            else
              v102 = 0;
            if (v99 >= 4)
              v101 = -1;
            v94 &= v101;
          }
          else
          {
            v102 = 0;
          }
          v200 = v42 - v93;
          v201 = v255 - v93;
          result = (v99 >> 2);
          v202 = ~HIBYTE(v31);
          v203 = v31 & 0xFF0000FF;
          v204 = v37 - v93;
          while (1)
          {
            v205 = *v97 & v94;
            v206 = result;
            v207 = v102;
            if (!v205)
              goto LABEL_447;
LABEL_436:
            if (v205 == -1)
              break;
            while (1)
            {
              if ((_BYTE)v205)
              {
                v216 = *(_DWORD *)(v30 + 4 * v205);
                v217 = (*v95 | (*v98 << 16)) * (~v216 >> 24);
                v218 = ((v217 + 65537 + ((v217 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v217 + 1 + BYTE1(v217)) >> 8))
                     + (v216 & 0xFF0000FF);
                *v95 = v218;
                *v98 = HIBYTE(v218);
              }
              if ((v205 & 0xFF00) != 0)
              {
                v219 = *(_DWORD *)(v30 + 4 * BYTE1(v205));
                v220 = (v95[1] | (v98[1] << 16)) * (~v219 >> 24);
                v221 = ((v220 + 65537 + ((v220 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v220 + 1 + BYTE1(v220)) >> 8))
                     + (v219 & 0xFF0000FF);
                v95[1] = v221;
                v98[1] = HIBYTE(v221);
              }
              if ((v205 & 0xFF0000) != 0)
              {
                v222 = *(_DWORD *)(v30 + 4 * BYTE2(v205));
                v223 = (v95[2] | (v98[2] << 16)) * (~v222 >> 24);
                v224 = ((v223 + 65537 + ((v223 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v223 + 1 + BYTE1(v223)) >> 8))
                     + (v222 & 0xFF0000FF);
                v95[2] = v224;
                v98[2] = HIBYTE(v224);
              }
              v225 = HIBYTE(v205);
              if (v225)
              {
                v226 = *(_DWORD *)(v30 + 4 * v225);
                v227 = (v95[3] | (v98[3] << 16)) * (~v226 >> 24);
                v215 = ((v227 + 65537 + ((v227 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v227 + 1 + BYTE1(v227)) >> 8))
                     + (v226 & 0xFF0000FF);
                goto LABEL_446;
              }
LABEL_447:
              while (1)
              {
                v228 = v206;
                v95 += 4;
                v98 += 4;
                --v206;
                ++v97;
                if (v228 < 2)
                  break;
                v205 = *v97;
                if (*v97)
                  goto LABEL_436;
              }
              if (!v207)
                break;
              v207 = 0;
              v205 = *v97 & v102;
            }
            v97 = (unsigned int *)((char *)v97 + v200);
            v95 += v201;
            v98 += v204;
            if (!--v6)
              return result;
          }
          v208 = (*v95 | (*v98 << 16)) * v202;
          v209 = ((v208 + 65537 + ((v208 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v208 + 1 + BYTE1(v208)) >> 8))
               + v203;
          *v95 = v209;
          *v98 = HIBYTE(v209);
          v210 = (v95[1] | (v98[1] << 16)) * v202;
          v211 = ((v210 + 65537 + ((v210 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v210 + 1 + BYTE1(v210)) >> 8))
               + v203;
          v95[1] = v211;
          v98[1] = HIBYTE(v211);
          v212 = (v95[2] | (v98[2] << 16)) * v202;
          v213 = ((v212 + 65537 + ((v212 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v212 + 1 + BYTE1(v212)) >> 8))
               + v203;
          v95[2] = v213;
          v98[2] = HIBYTE(v213);
          v214 = (v95[3] | (v98[3] << 16)) * v202;
          v215 = ((v214 + 65537 + ((v214 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v214 + 1 + BYTE1(v214)) >> 8))
               + v203;
LABEL_446:
          v95[3] = v215;
          v98[3] = HIBYTE(v215);
          goto LABEL_447;
        }
        v173 = -1 << (8 * v93);
        if ((v41 & 3) != 0)
          v174 = v41 & 0xFC;
        else
          v174 = v41;
        if ((v41 & 3) != 0)
        {
          v175 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFFCLL);
        }
        else
        {
          v173 = -1;
          v175 = (unsigned int *)v41;
        }
        if ((v41 & 3) != 0)
          v176 = &v39[-(v41 & 3)];
        else
          v176 = v39;
        if ((v41 & 3) != 0)
          v177 = v93 + v252;
        else
          v177 = v252;
        if ((((_BYTE)v177 + v174) & 3) != 0)
        {
          v178 = 4 - (((_BYTE)v177 + v174) & 3);
          v93 += v178;
          v179 = 0xFFFFFFFF >> (8 * v178);
          if (v177 >= 4)
            v180 = -1;
          else
            v180 = 0xFFFFFFFF >> (8 * v178);
          v173 &= v180;
          if (v177 < 4)
            v179 = 0;
        }
        else
        {
          v179 = 0;
        }
        v239 = v42 - v93;
        v240 = v177 >> 2;
        v241 = ~HIBYTE(v31);
        v242 = v255 - v93;
        break;
      case 3:
        do
        {
          v103 = v252;
          do
          {
            v104 = *(unsigned __int8 *)v41;
            if (*(_BYTE *)v41)
            {
              if (v104 == 255)
              {
                v105 = *(_DWORD *)(v30 + 4 * *v35);
              }
              else
              {
                v106 = *v35;
                v107 = *(_DWORD *)(v30 + 4 * ((v106 * v104 + ((v106 * v104) >> 8) + 1) >> 8));
                v108 = (*v39 | (v106 << 16)) * (v104 ^ 0xFF)
                     + 65537
                     + ((((*v39 | (v106 << 16)) * (v104 ^ 0xFFu)) >> 8) & 0xFF00FF);
                v105 = (v108 & 0xFF000000 | BYTE1(v108)) + (v107 & 0xFF0000FF);
              }
              *v39 = v105;
              *v35 = HIBYTE(v105);
            }
            ++v41;
            ++v39;
            v35 += v36;
            --v103;
          }
          while (v103);
          v41 += v42;
          v39 += v255;
          v35 += v253;
          --v6;
        }
        while (v6);
        return result;
      case 4:
        do
        {
          v109 = v252;
          do
          {
            v110 = *(unsigned __int8 *)v41;
            if (*(_BYTE *)v41)
            {
              if (v110 == 255)
              {
                v111 = *(_DWORD *)(v30 + 4 * ~*v35);
              }
              else
              {
                v112 = *v35;
                v113 = *(_DWORD *)(v30 + 4 * (((v112 ^ 0xFF) * v110 + (((v112 ^ 0xFFu) * v110) >> 8) + 1) >> 8));
                v114 = (*v39 | (v112 << 16)) * (v110 ^ 0xFF)
                     + 65537
                     + ((((*v39 | (v112 << 16)) * (v110 ^ 0xFFu)) >> 8) & 0xFF00FF);
                v111 = (v114 & 0xFF000000 | BYTE1(v114)) + (v113 & 0xFF0000FF);
              }
              *v39 = v111;
              *v35 = HIBYTE(v111);
            }
            ++v41;
            ++v39;
            v35 += v36;
            --v109;
          }
          while (v109);
          v41 += v42;
          v39 += v255;
          v35 += v253;
          --v6;
        }
        while (v6);
        return result;
      case 5:
        do
        {
          v115 = v252;
          do
          {
            if (*(_BYTE *)v41)
            {
              v116 = *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41);
              v117 = (v116 | (HIBYTE(v116) << 16)) * *v35
                   + (*v39 | (*v35 << 16)) * (HIBYTE(v116) ^ 0xFF);
              v118 = v117 + 65537 + ((v117 >> 8) & 0xFF00FF);
              *v39 = BYTE1(v118);
              *v35 = HIBYTE(v118);
            }
            ++v41;
            ++v39;
            v35 += v36;
            --v115;
          }
          while (v115);
          v41 += v42;
          v39 += v255;
          v35 += v253;
          --v6;
        }
        while (v6);
        return result;
      case 6:
        do
        {
          v119 = v252;
          do
          {
            v120 = *(unsigned __int8 *)v41;
            if (*(_BYTE *)v41)
            {
              v121 = *v35;
              if ((_BYTE)v121 != 0xFF)
              {
                if (~(_BYTE)v121 == 255)
                {
                  v122 = *(_DWORD *)(v30 + 4 * v120);
                }
                else
                {
                  v123 = (*(_DWORD *)(v30 + 4 * v120) | (HIBYTE(*(_DWORD *)(v30 + 4 * v120)) << 16))
                       * ~(_BYTE)v121;
                  v122 = ((v123 + 65537 + ((v123 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v123 + 1 + BYTE1(v123)) >> 8))
                       + (*v39 | (v121 << 24));
                }
                *v39 = v122;
                *v35 = HIBYTE(v122);
              }
            }
            ++v41;
            ++v39;
            v35 += v36;
            --v119;
          }
          while (v119);
          v41 += v42;
          v39 += v255;
          v35 += v253;
          --v6;
        }
        while (v6);
        return result;
      case 7:
        if (v3)
        {
          do
          {
            v124 = v252;
            do
            {
              v125 = *(unsigned __int8 *)v41;
              if (*(_BYTE *)v41)
              {
                v126 = *v39;
                v127 = *v35;
                if (v125 == 255)
                  v128 = (v126 | (v127 << 16)) * (v38 ^ 0xFF);
                else
                  v128 = (v126 | (v127 << 16))
                       * (v125 - ((unsigned __int16)(v38 * v125 + ((v38 * v125) >> 8) + 1) >> 8));
                v129 = (v126 | (v127 << 24))
                     - ((v128 + 65537 + ((v128 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v128 + 1 + BYTE1(v128)) >> 8));
                *v39 = v129;
                *v35 = HIBYTE(v129);
              }
              ++v41;
              ++v39;
              v35 += v36;
              --v124;
            }
            while (v124);
            v41 += v42;
            v39 += v255;
            v35 += v253;
            --v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v130 = v252;
            do
            {
              v131 = *(unsigned __int8 *)v41;
              if (*(_BYTE *)v41)
              {
                if (v131 == 255)
                {
                  LOBYTE(v132) = *v39;
                  v133 = v38 ^ 0xFF;
                }
                else
                {
                  v133 = *v39;
                  v132 = v131 - ((v38 * v131 + ((v38 * v131) >> 8) + 1) >> 8);
                }
                *v39 -= (unsigned __int16)(v133 * v132
                                         + ((v133 * v132) >> 8)
                                         + 1) >> 8;
              }
              ++v41;
              ++v39;
              --v130;
            }
            while (v130);
            v41 += v42;
            v39 += v255;
            --v6;
          }
          while (v6);
        }
        return result;
      case 8:
        if (v3)
        {
          do
          {
            v134 = v252;
            do
            {
              v135 = *(unsigned __int8 *)v41;
              if (*(_BYTE *)v41)
              {
                v136 = *v39;
                v137 = *v35;
                if (v135 == 255)
                  v138 = (v136 | (v137 << 16)) * v38;
                else
                  v138 = (v136 | (v137 << 16))
                       * ((unsigned __int16)(v38 * v135 + ((v38 * v135) >> 8) + 1) >> 8);
                v139 = (v136 | (v137 << 24))
                     - ((v138 + 65537 + ((v138 >> 8) & 0xFF00FF)) & 0xFF000000 | ((unsigned __int16)(v138 + 1 + BYTE1(v138)) >> 8));
                *v39 = v139;
                *v35 = HIBYTE(v139);
              }
              ++v41;
              ++v39;
              v35 += v36;
              --v134;
            }
            while (v134);
            v41 += v42;
            v39 += v255;
            v35 += v253;
            --v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v140 = v252;
            do
            {
              v141 = *(unsigned __int8 *)v41;
              if (*(_BYTE *)v41)
              {
                v142 = *v39;
                if (v141 == 255)
                  v143 = v38 * v142;
                else
                  v143 = ((unsigned __int16)(v38 * v141 + ((v38 * v141) >> 8) + 1) >> 8) * v142;
                *v39 = v142 - ((unsigned __int16)(v143 + (v143 >> 8) + 1) >> 8);
              }
              ++v41;
              ++v39;
              --v140;
            }
            while (v140);
            v41 += v42;
            v39 += v255;
            --v6;
          }
          while (v6);
        }
        return result;
      case 9:
        do
        {
          v144 = v252;
          do
          {
            v145 = *(unsigned __int8 *)v41;
            if (*(_BYTE *)v41)
            {
              v146 = *v35;
              v147 = *(_DWORD *)(v30 + 4 * v145);
              v148 = (v147 | (HIBYTE(v147) << 16)) * (v146 ^ 0xFF)
                   + (*v39 | (v146 << 16)) * (~(_BYTE)v145 + HIBYTE(v147))
                   + 65537
                   + ((((v147 | (HIBYTE(v147) << 16)) * (v146 ^ 0xFF)
                                    + (*v39 | (v146 << 16)) * (~(_BYTE)v145 + HIBYTE(v147))) >> 8) & 0xFF00FF);
              *v39 = BYTE1(v148);
              *v35 = HIBYTE(v148);
            }
            ++v41;
            ++v39;
            v35 += v36;
            --v144;
          }
          while (v144);
          v41 += v42;
          v39 += v255;
          v35 += v253;
          --v6;
        }
        while (v6);
        return result;
      case 10:
        do
        {
          v149 = v252;
          do
          {
            if (*(_BYTE *)v41)
            {
              v150 = *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41);
              v151 = (v150 | (HIBYTE(v150) << 16)) * (*v35 ^ 0xFF)
                   + (*v39 | (*v35 << 16)) * (HIBYTE(v150) ^ 0xFF);
              v152 = v151 + 65537 + ((v151 >> 8) & 0xFF00FF);
              *v39 = BYTE1(v152);
              *v35 = HIBYTE(v152);
            }
            ++v41;
            ++v39;
            v35 += v36;
            --v149;
          }
          while (v149);
          v41 += v42;
          v39 += v255;
          v35 += v253;
          --v6;
        }
        while (v6);
        return result;
      case 11:
        if (v3)
        {
          do
          {
            v153 = v252;
            do
            {
              if (*(_BYTE *)v41)
              {
                v154 = *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41);
                v155 = ((HIBYTE(v154) - v154) | (HIBYTE(v154) << 16))
                     + (*v35 - *v39)
                     + (*v35 << 16);
                v156 = (255 * ((v155 >> 8) & 0x10001)) | v155;
                *v39 = BYTE2(v156) - v156;
                *v35 = BYTE2(v156);
              }
              ++v41;
              ++v39;
              v35 += v36;
              --v153;
            }
            while (v153);
            v41 += v42;
            v39 += v255;
            v35 += v253;
            --v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v157 = v252;
            do
            {
              if (*(_BYTE *)v41)
              {
                v158 = (*v39 ^ 0xFF)
                     - *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41)
                     + HIBYTE(*(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41));
                v159 = BYTE1(v158) | (2 * BYTE1(v158)) | (4 * (BYTE1(v158) | (2 * BYTE1(v158))));
                *v39 = ~((~*v39
                        - *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41)
                        + HIBYTE(*(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41))) | (16 * v159) | v159);
              }
              ++v41;
              ++v39;
              --v157;
            }
            while (v157);
            v41 += v42;
            v39 += v255;
            --v6;
          }
          while (v6);
        }
        return result;
      case 12:
        if (v3)
        {
          do
          {
            v160 = v252;
            do
            {
              if (*(_BYTE *)v41)
              {
                v161 = (*(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41) | (HIBYTE(*(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41)) << 16))
                     + (*v39 | (*v35 << 16));
                v162 = (255 * ((v161 >> 8) & 0x10001)) | v161;
                *v39 = v162;
                *v35 = BYTE2(v162);
              }
              ++v41;
              ++v39;
              v35 += v36;
              --v160;
            }
            while (v160);
            v41 += v42;
            v39 += v255;
            v35 += v253;
            --v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v163 = v252;
            do
            {
              if (*(_BYTE *)v41)
              {
                v164 = *(unsigned __int8 *)(v30 + 4 * *(unsigned __int8 *)v41) + *v39;
                *v39 = -(v164 >> 8) | v164;
              }
              ++v41;
              ++v39;
              --v163;
            }
            while (v163);
            v41 += v42;
            v39 += v255;
            --v6;
          }
          while (v6);
        }
        return result;
      case 13:
        do
        {
          v50 = v252;
          do
          {
            if (*(_BYTE *)v41)
            {
              result = *(unsigned int *)(v30 + 4 * *(unsigned __int8 *)v41);
              v51 = BYTE3(result);
              if (BYTE3(result))
              {
                if (v3)
                {
                  if (*v35)
                  {
                    result = PDAmultiplyPDA_15922(*v39, *v35, *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v51);
                    v51 = BYTE3(result);
                  }
                  *v39 = result;
                  *v35 = v51;
                }
                else
                {
                  result = PDAmultiplyPDA_15922(*v39, 255, *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v51);
                  *v39 = result;
                }
              }
            }
            ++v41;
            ++v39;
            v35 += v36;
            --v50;
          }
          while (v50);
          v41 += v42;
          v39 += v255;
          v35 += v253;
          --v6;
        }
        while (v6);
        return result;
      case 14:
        do
        {
          v52 = v252;
          do
          {
            if (*(_BYTE *)v41)
            {
              result = *(unsigned int *)(v30 + 4 * *(unsigned __int8 *)v41);
              v53 = BYTE3(result);
              if (BYTE3(result))
              {
                if (v3)
                {
                  if (*v35)
                  {
                    result = PDAscreenPDA_15923(*v39, *v35, *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v53);
                    v53 = BYTE3(result);
                  }
                  *v39 = result;
                  *v35 = v53;
                }
                else
                {
                  result = PDAscreenPDA_15923(*v39, 255, *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v53);
                  *v39 = result;
                }
              }
            }
            ++v41;
            ++v39;
            v35 += v36;
            --v52;
          }
          while (v52);
          v41 += v42;
          v39 += v255;
          v35 += v253;
          --v6;
        }
        while (v6);
        return result;
      case 15:
        do
        {
          v54 = v252;
          do
          {
            if (*(_BYTE *)v41)
            {
              result = *(unsigned int *)(v30 + 4 * *(unsigned __int8 *)v41);
              v55 = BYTE3(result);
              if (BYTE3(result))
              {
                if (v3)
                {
                  if (*v35)
                  {
                    result = PDAoverlayPDA_15924(*v39, *v35, *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v55);
                    v55 = BYTE3(result);
                  }
                  *v39 = result;
                  *v35 = v55;
                }
                else
                {
                  result = PDAoverlayPDA_15924(*v39, 0xFFu, *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v55);
                  *v39 = result;
                }
              }
            }
            ++v41;
            ++v39;
            v35 += v36;
            --v54;
          }
          while (v54);
          v41 += v42;
          v39 += v255;
          v35 += v253;
          --v6;
        }
        while (v6);
        return result;
      case 16:
        do
        {
          v56 = v252;
          do
          {
            if (*(_BYTE *)v41)
            {
              result = *(unsigned int *)(v30 + 4 * *(unsigned __int8 *)v41);
              v57 = BYTE3(result);
              if (BYTE3(result))
              {
                if (v3)
                {
                  if (*v35)
                  {
                    result = PDAdarkenPDA_15926(*v39, *v35, *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v57);
                    v57 = BYTE3(result);
                  }
                  *v39 = result;
                  *v35 = v57;
                }
                else
                {
                  result = PDAdarkenPDA_15926(*v39, 0xFFu, *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v57);
                  *v39 = result;
                }
              }
            }
            ++v41;
            ++v39;
            v35 += v36;
            --v56;
          }
          while (v56);
          v41 += v42;
          v39 += v255;
          v35 += v253;
          --v6;
        }
        while (v6);
        return result;
      case 17:
        do
        {
          v58 = v252;
          do
          {
            if (*(_BYTE *)v41)
            {
              result = *(unsigned int *)(v30 + 4 * *(unsigned __int8 *)v41);
              v59 = BYTE3(result);
              if (BYTE3(result))
              {
                if (v3)
                {
                  if (*v35)
                  {
                    result = PDAlightenPDA_15925(*v39, *v35, *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v59);
                    v59 = BYTE3(result);
                  }
                  *v39 = result;
                  *v35 = v59;
                }
                else
                {
                  result = PDAlightenPDA_15925(*v39, 0xFFu, *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v59);
                  *v39 = result;
                }
              }
            }
            ++v41;
            ++v39;
            v35 += v36;
            --v58;
          }
          while (v58);
          v41 += v42;
          v39 += v255;
          v35 += v253;
          --v6;
        }
        while (v6);
        return result;
      case 18:
        do
        {
          v60 = v252;
          do
          {
            if (*(_BYTE *)v41)
            {
              result = *(unsigned int *)(v30 + 4 * *(unsigned __int8 *)v41);
              v61 = BYTE3(result);
              if (BYTE3(result))
              {
                if (v3)
                {
                  if (*v35)
                  {
                    result = PDAcolordodgePDA_15927(*v39, *v35, *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v61);
                    v61 = BYTE3(result);
                  }
                  *v39 = result;
                  *v35 = v61;
                }
                else
                {
                  result = PDAcolordodgePDA_15927(*v39, 0xFFu, *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v61);
                  *v39 = result;
                }
              }
            }
            ++v41;
            ++v39;
            v35 += v36;
            --v60;
          }
          while (v60);
          v41 += v42;
          v39 += v255;
          v35 += v253;
          --v6;
        }
        while (v6);
        return result;
      case 19:
        do
        {
          v62 = v252;
          do
          {
            if (*(_BYTE *)v41)
            {
              result = *(unsigned int *)(v30 + 4 * *(unsigned __int8 *)v41);
              v63 = BYTE3(result);
              if (BYTE3(result))
              {
                if (v3)
                {
                  if (*v35)
                  {
                    result = PDAcolorburnPDA_15928(*v39, *v35, *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v63);
                    v63 = BYTE3(result);
                  }
                  *v39 = result;
                  *v35 = v63;
                }
                else
                {
                  result = PDAcolorburnPDA_15928(*v39, 0xFFu, *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v63);
                  *v39 = result;
                }
              }
            }
            ++v41;
            ++v39;
            v35 += v36;
            --v62;
          }
          while (v62);
          v41 += v42;
          v39 += v255;
          v35 += v253;
          --v6;
        }
        while (v6);
        return result;
      case 20:
        do
        {
          v64 = v252;
          do
          {
            if (*(_BYTE *)v41)
            {
              result = *(unsigned int *)(v30 + 4 * *(unsigned __int8 *)v41);
              v65 = BYTE3(result);
              if (BYTE3(result))
              {
                if (v3)
                {
                  if (*v35)
                  {
                    result = PDAsoftlightPDA_15930(*v39, *v35, *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v65);
                    v65 = BYTE3(result);
                  }
                  *v39 = result;
                  *v35 = v65;
                }
                else
                {
                  result = PDAsoftlightPDA_15930(*v39, 0xFFu, *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v65);
                  *v39 = result;
                }
              }
            }
            ++v41;
            ++v39;
            v35 += v36;
            --v64;
          }
          while (v64);
          v41 += v42;
          v39 += v255;
          v35 += v253;
          --v6;
        }
        while (v6);
        return result;
      case 21:
        do
        {
          v66 = v252;
          do
          {
            if (*(_BYTE *)v41)
            {
              result = *(unsigned int *)(v30 + 4 * *(unsigned __int8 *)v41);
              v67 = BYTE3(result);
              if (BYTE3(result))
              {
                if (v3)
                {
                  if (*v35)
                  {
                    result = PDAhardlightPDA_15929(*v39, *v35, *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v67);
                    v67 = BYTE3(result);
                  }
                  *v39 = result;
                  *v35 = v67;
                }
                else
                {
                  result = PDAhardlightPDA_15929(*v39, 0xFFu, *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v67);
                  *v39 = result;
                }
              }
            }
            ++v41;
            ++v39;
            v35 += v36;
            --v66;
          }
          while (v66);
          v41 += v42;
          v39 += v255;
          v35 += v253;
          --v6;
        }
        while (v6);
        return result;
      case 22:
        do
        {
          v68 = v252;
          do
          {
            if (*(_BYTE *)v41)
            {
              result = *(unsigned int *)(v30 + 4 * *(unsigned __int8 *)v41);
              v69 = BYTE3(result);
              if (BYTE3(result))
              {
                if (v3)
                {
                  if (*v35)
                  {
                    result = PDAdifferencePDA_15931(*v39, *v35, *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v69);
                    v69 = BYTE3(result);
                  }
                  *v39 = result;
                  *v35 = v69;
                }
                else
                {
                  result = PDAdifferencePDA_15931(*v39, 0xFFu, *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v69);
                  *v39 = result;
                }
              }
            }
            ++v41;
            ++v39;
            v35 += v36;
            --v68;
          }
          while (v68);
          v41 += v42;
          v39 += v255;
          v35 += v253;
          --v6;
        }
        while (v6);
        return result;
      case 23:
        do
        {
          v70 = v252;
          do
          {
            if (*(_BYTE *)v41)
            {
              result = *(unsigned int *)(v30 + 4 * *(unsigned __int8 *)v41);
              v71 = BYTE3(result);
              if (BYTE3(result))
              {
                if (v3)
                {
                  if (*v35)
                  {
                    result = PDAexclusionPDA_15932(*v39, *v35, *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v71);
                    v71 = BYTE3(result);
                  }
                  *v39 = result;
                  *v35 = v71;
                }
                else
                {
                  result = PDAexclusionPDA_15932(*v39, 0xFFu, *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v71);
                  *v39 = result;
                }
              }
            }
            ++v41;
            ++v39;
            v35 += v36;
            --v70;
          }
          while (v70);
          v41 += v42;
          v39 += v255;
          v35 += v253;
          --v6;
        }
        while (v6);
        return result;
      case 24:
        do
        {
          v72 = v252;
          do
          {
            if (*(_BYTE *)v41)
            {
              result = *(unsigned int *)(v30 + 4 * *(unsigned __int8 *)v41);
              v73 = BYTE3(result);
              if (BYTE3(result))
              {
                if (v3)
                {
                  if (*v35)
                  {
                    result = PDAhuePDA_15933(*v39, *v35, *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v73);
                    v73 = BYTE3(result);
                  }
                  *v39 = result;
                  *v35 = v73;
                }
                else
                {
                  result = PDAhuePDA_15933(*v39, 0xFFu, *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v73);
                  *v39 = result;
                }
              }
            }
            ++v41;
            ++v39;
            v35 += v36;
            --v72;
          }
          while (v72);
          v41 += v42;
          v39 += v255;
          v35 += v253;
          --v6;
        }
        while (v6);
        return result;
      case 25:
        do
        {
          v74 = v252;
          do
          {
            if (*(_BYTE *)v41)
            {
              result = *(unsigned int *)(v30 + 4 * *(unsigned __int8 *)v41);
              v75 = BYTE3(result);
              if (BYTE3(result))
              {
                if (v3)
                {
                  if (*v35)
                  {
                    result = PDAhuePDA_15933(*v39, *v35, *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v75);
                    v75 = BYTE3(result);
                  }
                  *v39 = result;
                  *v35 = v75;
                }
                else
                {
                  result = PDAhuePDA_15933(*v39, 0xFFu, *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v75);
                  *v39 = result;
                }
              }
            }
            ++v41;
            ++v39;
            v35 += v36;
            --v74;
          }
          while (v74);
          v41 += v42;
          v39 += v255;
          v35 += v253;
          --v6;
        }
        while (v6);
        return result;
      case 26:
        do
        {
          v76 = v252;
          do
          {
            if (*(_BYTE *)v41)
            {
              result = *(unsigned int *)(v30 + 4 * *(unsigned __int8 *)v41);
              v77 = BYTE3(result);
              if (BYTE3(result))
              {
                if (v3)
                {
                  if (*v35)
                  {
                    result = PDAluminosityPDA_15935(*(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v77, *v39, *v35);
                    v77 = BYTE3(result);
                  }
                  *v39 = result;
                  *v35 = v77;
                }
                else
                {
                  result = PDAluminosityPDA_15935(*(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v77, *v39, 0xFFu);
                  *v39 = result;
                }
              }
            }
            ++v41;
            ++v39;
            v35 += v36;
            --v76;
          }
          while (v76);
          v41 += v42;
          v39 += v255;
          v35 += v253;
          --v6;
        }
        while (v6);
        return result;
      case 27:
        do
        {
          v78 = v252;
          do
          {
            if (*(_BYTE *)v41)
            {
              result = *(unsigned int *)(v30 + 4 * *(unsigned __int8 *)v41);
              v79 = BYTE3(result);
              if (BYTE3(result))
              {
                if (v3)
                {
                  if (*v35)
                  {
                    result = PDAluminosityPDA_15935(*v39, *v35, *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v79);
                    v79 = BYTE3(result);
                  }
                  *v39 = result;
                  *v35 = v79;
                }
                else
                {
                  result = PDAluminosityPDA_15935(*v39, 0xFFu, *(_DWORD *)(v30 + 4 * *(unsigned __int8 *)v41), v79);
                  *v39 = result;
                }
              }
            }
            ++v41;
            ++v39;
            v35 += v36;
            --v78;
          }
          while (v78);
          v41 += v42;
          v39 += v255;
          v35 += v253;
          --v6;
        }
        while (v6);
        return result;
      default:
        return result;
    }
    while (1)
    {
      v243 = *v175 & v173;
      v244 = v179;
      LODWORD(result) = v240;
      if (!v243)
        goto LABEL_496;
LABEL_485:
      if (v243 == -1)
        break;
      while (1)
      {
        if ((_BYTE)v243)
          *v176 = *(_BYTE *)(v30 + 4 * v243)
                + ((unsigned __int16)((~*(_DWORD *)(v30 + 4 * v243) >> 24) * *v176
                                    + (((~*(_DWORD *)(v30 + 4 * v243) >> 24) * *v176) >> 8)
                                    + 1) >> 8);
        if ((v243 & 0xFF00) != 0)
          v176[1] = *(_BYTE *)(v30 + 4 * BYTE1(v243))
                  + ((unsigned __int16)((~*(_DWORD *)(v30 + 4 * BYTE1(v243)) >> 24) * v176[1]
                                      + (((~*(_DWORD *)(v30 + 4 * BYTE1(v243)) >> 24) * v176[1]) >> 8)
                                      + 1) >> 8);
        if ((v243 & 0xFF0000) != 0)
          v176[2] = *(_BYTE *)(v30 + 4 * BYTE2(v243))
                  + ((unsigned __int16)((~*(_DWORD *)(v30 + 4 * BYTE2(v243)) >> 24) * v176[2]
                                      + (((~*(_DWORD *)(v30 + 4 * BYTE2(v243)) >> 24) * v176[2]) >> 8)
                                      + 1) >> 8);
        v248 = HIBYTE(v243);
        if (v248)
        {
          v247 = *(_DWORD *)(v30 + 4 * v248);
          v246 = v176[3];
          v245 = ~v247 >> 24;
          goto LABEL_495;
        }
LABEL_496:
        while (1)
        {
          v249 = result;
          v176 += 4;
          result = (result - 1);
          ++v175;
          if (v249 < 2)
            break;
          v243 = *v175;
          if (*v175)
            goto LABEL_485;
        }
        if (!v244)
          break;
        v244 = 0;
        v243 = *v175 & v179;
      }
      v175 = (unsigned int *)((char *)v175 + v239);
      v176 += v242;
      if (!--v6)
        return result;
    }
    *v176 = v31 + ((unsigned __int16)(*v176 * (_WORD)v241 + ((*v176 * v241) >> 8) + 1) >> 8);
    v176[1] = v31 + ((unsigned __int16)(v176[1] * (_WORD)v241 + ((v176[1] * v241) >> 8) + 1) >> 8);
    v176[2] = v31 + ((unsigned __int16)(v176[2] * (_WORD)v241 + ((v176[2] * v241) >> 8) + 1) >> 8);
    v245 = v176[3];
    v246 = ~HIBYTE(v31);
    LOBYTE(v247) = v31;
LABEL_495:
    v176[3] = v247 + ((unsigned __int16)(v245 * v246 + ((v245 * v246) >> 8) + 1) >> 8);
    goto LABEL_496;
  }
  return result;
}

