char *CGRegionEnumeratorCreate(char *result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *((_QWORD *)result + 2);
    result = (char *)malloc_type_malloc(0x38uLL, 0xEB07EEC6uLL);
    *(_DWORD *)result = 0;
    *(_OWORD *)(result + 4) = xmmword_185004E30;
    *(int32x2_t *)(result + 20) = vdup_n_s32(0x7FFFFFFEu);
    *((_QWORD *)result + 5) = 0;
    *((_QWORD *)result + 6) = 0;
    *((_QWORD *)result + 4) = 0;
    if ((_UNKNOWN *)v1 != &the_empty_shape && *(_DWORD *)(v1 + 4 * *(int *)(v1 + 4)) != 0x7FFFFFFF)
    {
      *((_DWORD *)result + 1) = 1;
      *((_QWORD *)result + 4) = v1;
      *((_QWORD *)result + 5) = v1 + 8;
    }
  }
  return result;
}

void CGRegionEnumeratorCreateWithDirection(uint64_t a1, int a2, int a3)
{
  int v3;
  int v4;

  if (a1)
  {
    if (a2)
      v3 = -1;
    else
      v3 = 1;
    if (a3)
      v4 = -1;
    else
      v4 = 1;
    shape_enum_alloc(a1, *(_DWORD **)(a1 + 16), v3, v4);
  }
}

uint64_t CGRegionForwardEnumeratorMake@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v2 = *(_QWORD *)(result + 16);
    a2[2] = 0;
    if ((_UNKNOWN *)v2 == &the_empty_shape)
    {
      v2 = 0;
      v3 = 0;
    }
    else if (*(_DWORD *)(v2 + 4 * *(int *)(v2 + 4)) == 0x7FFFFFFF)
    {
      v2 = 0;
      v3 = 0;
    }
    else
    {
      v3 = v2 + 8;
    }
  }
  else
  {
    v2 = 0;
    v3 = 0;
    a2[2] = 0;
  }
  *a2 = v2;
  a2[1] = v3;
  return result;
}

BOOL CGRegionEnumeratorGetNextBounds(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  return shape_enum_next(a1, a2, a3, a4, a5) != 0;
}

BOOL CGRegionEnumeratorGetNextRect(uint64_t a1, double *a2)
{
  int v3;
  double v4;
  double v5;
  double v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v3 = shape_enum_next(a1, (_DWORD *)&v9 + 1, &v9, (_DWORD *)&v8 + 1, &v8);
  if (v3)
  {
    v4 = (double)(int)v9;
    v5 = (double)(HIDWORD(v8) - HIDWORD(v9));
    v6 = (double)((int)v8 - (int)v9);
    *a2 = (double)SHIDWORD(v9);
    a2[1] = v4;
    a2[2] = v5;
    a2[3] = v6;
  }
  return v3 != 0;
}

uint64_t CGRegionForwardEnumeratorGetNextBounds(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  if (!a1)
    _CGHandleAssert("CGRegionForwardEnumeratorGetNextBounds", 69, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Regions/CGRegionEnumerator.c", "e != NULL", "region enumerator is missing", a6, a7, a8, v8);
  return shape_forward_enum_next(a1, a2, a3, a4, a5);
}

double CGRegionForwardEnumeratorGetNextRect(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double result;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;

  v13 = 0;
  v14 = 0;
  if (CGRegionForwardEnumeratorGetNextBounds(a1, (_DWORD *)&v14 + 1, &v14, (_DWORD *)&v13 + 1, &v13, a6, a7, a8))
  {
    result = (double)SHIDWORD(v14);
    v10 = (double)(int)v14;
    v11 = (double)(HIDWORD(v13) - HIDWORD(v14));
    v12 = (double)((int)v13 - (int)v14);
    *a2 = (double)SHIDWORD(v14);
    a2[1] = v10;
    a2[2] = v11;
    a2[3] = v12;
  }
  return result;
}

void op_BI(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __CFData *Mutable;
  unint64_t v36;
  UInt8 v37;
  UInt8 *v38;
  UInt8 v39;
  UInt8 v40;
  uint64_t v41;
  const void *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const void *v51;
  int v52;
  UInt8 *v53;
  __CFData *v54;
  CFIndex v55;
  uint64_t Inline;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  void (*v73)(uint64_t, _QWORD);
  int v74;
  UInt8 bytes[16];
  __int128 v76;
  const void *v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v77 = 0;
  *(_OWORD *)bytes = 0u;
  v76 = 0u;
  if (!pdf_scanner_read_compound_object(a1, (uint64_t)bytes, 0, *(unsigned int *)(a1 + 72), 1, a6, a7, a8))return;
  v16 = *(_DWORD *)&bytes[8];
  if (*(_DWORD *)&bytes[8] != 8)
  {
    pdf_error("failed to build inline image dictionary.");
    if ((v16 - 5) <= 4)
      pdf_object_release_compound_value((uint64_t)bytes);
    return;
  }
  v17 = v77;
  if (!v77)
    return;
  v18 = *(_QWORD *)(a1 + 64);
  if (v18)
    v19 = *(_QWORD *)(v18 + 16);
  else
    v19 = 0;
  v20 = CGPDFSourceGetc(v19, v9, v10, v11, v12, v13, v14, v15);
  v27 = v20;
  if (v20 > 0x20
    || ((1 << v20) & 0x100001601) == 0
    && (v20 != 13 || (v27 = CGPDFSourceGetc(v19, v20, v21, v22, v23, v24, v25, v26), v27 != 10)))
  {
    CGPDFSourceUngetc((_QWORD *)v19, v27);
  }
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v36 = 0;
  while (1)
  {
    if (!v19)
    {
      pdf_error("failed to find end of inline image.");
      goto LABEL_53;
    }
    if (*(_BYTE *)(v19 + 208))
      break;
    v37 = CGPDFSourceGetc(v19, v28, v29, v30, v31, v32, v33, v34);
    v38 = &bytes[v36];
    bytes[v36] = v37;
    if (v37 == 69)
    {
      v39 = CGPDFSourceGetc(v19, v28, v29, v30, v31, v32, v33, v34);
      bytes[v36 + 1] = v39;
      if (v39 != 73)
      {
        v36 += 2;
        goto LABEL_31;
      }
      v40 = CGPDFSourceGetc(v19, v28, v29, v30, v31, v32, v33, v34);
      bytes[v36 + 2] = v40;
      if ((v40 > 0x20u || ((1 << v40) & 0x100003601) == 0) && !*(_BYTE *)(v19 + 208))
      {
        v36 += 3;
        goto LABEL_31;
      }
      CFDataAppendBytes(Mutable, bytes, v36);
      v41 = CGPDFStreamCreateWithData(v17, 1, Mutable);
      if (v41)
      {
        v42 = (const void *)v41;
        v74 = 0;
        v43 = CGPDFStreamCreateFilterChain(v41, &v74);
        if (v43)
        {
          v51 = v43;
          if (v74 == 1)
          {
            do
            {
              while (1)
              {
                v52 = CGPDFSourceGetc((uint64_t)v51, v44, v45, v46, v47, v48, v49, v50);
                if (v52 == 255)
                  break;
                if (v52 == -1)
                  goto LABEL_45;
              }
            }
            while (CGPDFSourceGetc((uint64_t)v51, v44, v45, v46, v47, v48, v49, v50) != 217);
LABEL_49:
            CFRelease(v51);
            CFRelease(v42);
            goto LABEL_53;
          }
          Inline = CGPDFImageCreateInline(*(_QWORD *)(a1 + 56), (uint64_t)v42);
          if (Inline)
          {
            if (*(_BYTE *)(Inline + 16))
            {
              v57 = *(_QWORD *)(Inline + 64);
            }
            else
            {
              v58 = *(_QWORD *)(Inline + 72);
              if (v58)
                v58 = *(_QWORD *)(*(_QWORD *)(v58 + 24) + 40);
              v57 = *(_QWORD *)(Inline + 64) * v58;
            }
            v59 = *(_QWORD *)(Inline + 56) * ((unint64_t)(*(_QWORD *)(Inline + 48) * v57 + 7) >> 3);
            CFRelease((CFTypeRef)Inline);
            if (!v59)
              goto LABEL_49;
            while (CGPDFSourceGetc((uint64_t)v51, v60, v61, v62, v63, v64, v65, v66) != -1)
            {
              if (!--v59)
                goto LABEL_49;
            }
          }
LABEL_45:
          CFRelease(v51);
        }
        CFRelease(v42);
      }
      v54 = Mutable;
      v53 = v38;
      v55 = 3;
LABEL_48:
      CFDataAppendBytes(v54, v53, v55);
      v36 = 0;
    }
    else
    {
      ++v36;
LABEL_31:
      if (v36 >= 0x7FD)
      {
        v53 = bytes;
        v54 = Mutable;
        v55 = v36;
        goto LABEL_48;
      }
    }
  }
  pdf_error("failed to find end of inline image.");
  if (v36)
    CFDataAppendBytes(Mutable, bytes, v36);
LABEL_53:
  if (Mutable)
  {
    v67 = CGPDFStreamCreateWithData(v17, 1, Mutable);
    CFRelease(v17);
    CFRelease(Mutable);
    if (v67)
    {
      *(_OWORD *)bytes = 0u;
      v76 = 0u;
      *(_DWORD *)&bytes[8] = 9;
      v77 = (const void *)v67;
      v68 = *(_DWORD *)(a1 + 72);
      v69 = *(int *)(a1 + 76);
      if (v68 >= (int)v69)
      {
        *(_DWORD *)(a1 + 76) = 2 * v69;
        v70 = (char *)malloc_type_realloc(*(void **)(a1 + 80), 80 * v69, 0x103204077D336DFuLL);
        *(_QWORD *)(a1 + 80) = v70;
      }
      else
      {
        v70 = *(char **)(a1 + 80);
      }
      v71 = &v70[40 * *(int *)(a1 + 72)];
      *(_OWORD *)v71 = *(_OWORD *)bytes;
      *((_OWORD *)v71 + 1) = v76;
      *((_QWORD *)v71 + 4) = v77;
      ++*(_DWORD *)(a1 + 72);
      v72 = *(_QWORD *)(a1 + 24);
      v73 = *(void (**)(uint64_t, _QWORD))(v72 + 8 * (int)CGPDFGetOperatorForName("EI", 2uLL, 0));
      if (v73)
        v73(a1, *(_QWORD *)(a1 + 16));
      pdf_object_release_compound_value((uint64_t)bytes);
      if (*(_DWORD *)(a1 + 72) > v68)
        *(_DWORD *)(a1 + 72) = v68;
    }
  }
  else
  {
    CFRelease(v17);
  }
}

uint64_t op_BX(uint64_t result)
{
  ++*(_DWORD *)(result + 88);
  return result;
}

uint64_t op_EX(uint64_t result)
{
  --*(_DWORD *)(result + 88);
  return result;
}

uint64_t pdf_scanner_read_compound_object(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t result;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  const char *operator_name_string;
  const char *v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  pthread_mutex_t *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *object_list;
  _QWORD *v47;
  _QWORD *v48;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  size_t __n;

  v8 = a4;
  __n = 0;
  if ((int)a3 > 1000)
  {
    if ((a4 & 0x80000000) != 0 || (*(_DWORD *)(a1 + 72) & 0x80000000) != 0)
      pdf_error("Fatal: Attempted to remove more than args stack count. Argument stack is inconsistent.");
    pdf_error("failed to build compound object: nesting too deep.");
    return 0;
  }
  v12 = 0;
  v52 = 0;
  v50 = 0u;
  v51 = 0u;
  v13 = (a3 + 1);
  while (2)
  {
    v14 = pdf_lexer_scan(*(_QWORD *)(a1 + 64), (uint64_t)&v50, a3, a4, a5, a6, a7, a8);
    switch(v14)
    {
      case 0:
      case 15:
        if (pdf_scanner_advance_stream((_QWORD *)a1))
          continue;
        if (v8 < 0 || (v30 = *(_DWORD *)(a1 + 72), v30 < v12))
        {
          pdf_error("Fatal: Attempted to remove more than args stack count. Argument stack is inconsistent.");
          v30 = *(_DWORD *)(a1 + 72);
        }
        if (!v12)
          goto LABEL_65;
        if (v30 <= v8)
          pdf_error("Fatal: Attempted to remove beyond args stack count. Argument stack is inconsistent.");
        v31 = v8;
        v32 = v12 + v8;
        v33 = 40 * v8;
        do
        {
          v34 = *(_QWORD *)(a1 + 80) + v33;
          if ((*(_DWORD *)(v34 + 8) - 5) <= 4)
            pdf_object_release_compound_value(v34);
          ++v31;
          v33 += 40;
        }
        while (v31 < v32);
        goto LABEL_64;
      case 1:
        pdf_scanner_handle_choke((uint64_t)&v50);
        if (v8 < 0 || (v30 = *(_DWORD *)(a1 + 72), v30 < v12))
        {
          pdf_error("Fatal: Attempted to remove more than args stack count. Argument stack is inconsistent.");
          v30 = *(_DWORD *)(a1 + 72);
        }
        if (!v12)
          goto LABEL_65;
        if (v30 <= v8)
          pdf_error("Fatal: Attempted to remove beyond args stack count. Argument stack is inconsistent.");
        v35 = v8;
        v36 = v12 + v8;
        v37 = 40 * v8;
        do
        {
          v38 = *(_QWORD *)(a1 + 80) + v37;
          if ((*(_DWORD *)(v38 + 8) - 5) <= 4)
            pdf_object_release_compound_value(v38);
          ++v35;
          v37 += 40;
        }
        while (v35 < v36);
        goto LABEL_64;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 13:
        goto LABEL_12;
      case 7:
        operator_name_string = pdf_lexer_get_operator_name_string(*(_QWORD *)(a1 + 64), &__n);
        v19 = operator_name_string;
        v20 = __n;
        if (!(_DWORD)a5 || strncmp(operator_name_string, "BI", __n) && strncmp(v19, "ID", v20))
        {
          v21 = *(_QWORD *)(a1 + 72);
          v22 = *(_QWORD *)(a1 + 80);
          *(_QWORD *)(a1 + 72) = 0x800000000;
          *(_QWORD *)(a1 + 80) = malloc_type_malloc(0x140uLL, 0x103204077D336DFuLL);
          pdf_scanner_handle_xname(a1);
          if ((DWORD2(v50) - 5) <= 4)
            pdf_object_release_compound_value((uint64_t)&v50);
          v23 = *(unsigned int *)(a1 + 72);
          if ((v23 & 0x80000000) != 0)
          {
            pdf_error("Fatal: Attempted to remove more than args stack count. Argument stack is inconsistent.");
          }
          else if ((_DWORD)v23)
          {
            v24 = 0;
            v25 = 40 * v23;
            do
            {
              v26 = *(_QWORD *)(a1 + 80) + v24;
              if ((*(_DWORD *)(v26 + 8) - 5) <= 4)
                pdf_object_release_compound_value(v26);
              v24 += 40;
            }
            while (v25 != v24);
          }
          *(_QWORD *)(a1 + 72) = v21;
          *(_QWORD *)(a1 + 80) = v22;
          continue;
        }
        if ((DWORD2(v50) - 5) <= 4)
          pdf_object_release_compound_value((uint64_t)&v50);
LABEL_68:
        object_list = pdf_scanner_create_object_list(a1, v12);
        v40 = (pthread_mutex_t *)CGPDFDictionaryCreateWithObjects(0, (_QWORD **)object_list);
        if (!v40)
        {
          pdf_error("failed to build dictionary during parsing.");
          if (object_list)
          {
            do
            {
              v47 = (_QWORD *)*object_list;
              if ((*((_DWORD *)object_list + 2) - 5) <= 4)
                pdf_object_release_compound_value((uint64_t)object_list);
              free(object_list);
              object_list = v47;
            }
            while (v47);
          }
          return 0;
        }
        v41 = 8;
LABEL_70:
        *(_DWORD *)(a2 + 8) = v41;
        *(_QWORD *)(a2 + 32) = v40;
        return 1;
      case 9:
      case 11:
        if (!pdf_scanner_read_compound_object(a1, &v50, v13, *(unsigned int *)(a1 + 72), a5))
          continue;
LABEL_12:
        v15 = *(_DWORD *)(a1 + 72);
        v16 = *(int *)(a1 + 76);
        if (v15 >= (int)v16)
        {
          *(_DWORD *)(a1 + 76) = 2 * v16;
          v17 = (char *)malloc_type_realloc(*(void **)(a1 + 80), 80 * v16, 0x103204077D336DFuLL);
          *(_QWORD *)(a1 + 80) = v17;
          v15 = *(_DWORD *)(a1 + 72);
        }
        else
        {
          v17 = *(char **)(a1 + 80);
        }
        v27 = &v17[40 * v15];
        v28 = v50;
        v29 = v51;
        *((_QWORD *)v27 + 4) = v52;
        *(_OWORD *)v27 = v28;
        *((_OWORD *)v27 + 1) = v29;
        ++*(_DWORD *)(a1 + 72);
        ++v12;
        continue;
      case 10:
        goto LABEL_68;
      case 12:
        v39 = pdf_scanner_create_object_list(a1, v12);
        v40 = CGPDFArrayCreateWithObjects(0, v39);
        if (v40)
        {
          v41 = 7;
          goto LABEL_70;
        }
        pdf_error("failed to build array during parsing.");
        if (!v39)
          return 0;
        do
        {
          v48 = (_QWORD *)*v39;
          if ((*((_DWORD *)v39 + 2) - 5) <= 4)
            pdf_object_release_compound_value((uint64_t)v39);
          free(v39);
          result = 0;
          v39 = v48;
        }
        while (v48);
        return result;
      default:
        pdf_error("encountered unexpected object type: %d.", v14);
        if (v8 < 0 || (v30 = *(_DWORD *)(a1 + 72), v30 < v12))
        {
          pdf_error("Fatal: Attempted to remove more than args stack count. Argument stack is inconsistent.");
          v30 = *(_DWORD *)(a1 + 72);
        }
        if (!v12)
          goto LABEL_65;
        if (v30 <= v8)
          pdf_error("Fatal: Attempted to remove beyond args stack count. Argument stack is inconsistent.");
        v42 = v8;
        v43 = v12 + v8;
        v44 = 40 * v8;
        do
        {
          v45 = *(_QWORD *)(a1 + 80) + v44;
          if ((*(_DWORD *)(v45 + 8) - 5) <= 4)
            pdf_object_release_compound_value(v45);
          ++v42;
          v44 += 40;
        }
        while (v42 < v43);
LABEL_64:
        v30 = *(_DWORD *)(a1 + 72);
LABEL_65:
        result = 0;
        *(_DWORD *)(a1 + 72) = v30 - v12;
        return result;
    }
  }
}

_QWORD *pdf_scanner_create_object_list(uint64_t a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  _QWORD *result;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  if (*(_DWORD *)(a1 + 72) < a2)
    pdf_error("Attempting to create args list from args count for more objects than the stack has.");
  if (a2 < 1)
  {
    result = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = -a2;
    do
    {
      result = malloc_type_malloc(0x28uLL, 0x103204077D336DFuLL);
      v8 = result;
      if (v4)
      {
        *v5 = result;
        result = v4;
      }
      v9 = *(_QWORD *)(a1 + 80) + 40 * (v6 + *(_DWORD *)(a1 + 72));
      v11 = *(_OWORD *)v9;
      v10 = *(_OWORD *)(v9 + 16);
      v8[4] = *(_QWORD *)(v9 + 32);
      *(_OWORD *)v8 = v11;
      *((_OWORD *)v8 + 1) = v10;
      *v8 = 0;
      v4 = result;
      v5 = v8;
    }
    while (!__CFADD__(v6++, 1));
  }
  *(_DWORD *)(a1 + 72) -= a2;
  return result;
}

void pdf_scanner_handle_choke(uint64_t a1)
{
  uint64_t v1;

  if (!a1 || *(_DWORD *)(a1 + 8) != 6)
  {
    pdf_error("encountered unexpected input.");
    return;
  }
  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    goto LABEL_14;
  if (*(_QWORD *)(v1 + 24))
    decrypt_string(*(_QWORD *)(a1 + 32));
  if (*(_QWORD *)(v1 + 72) < 0x33uLL)
  {
    if (*(_QWORD *)(v1 + 24))
      decrypt_string(v1);
LABEL_14:
    return;
  }
  if (*(_QWORD *)(v1 + 24))
    decrypt_string(v1);
}

CGPDFScannerRef CGPDFScannerRetain(CGPDFScannerRef scanner)
{
  if (scanner)
    CFRetain(scanner);
  return scanner;
}

void CGPDFScannerRelease(CGPDFScannerRef scanner)
{
  if (scanner)
    CFRelease(scanner);
}

void CGPDFScannerStop(CGPDFScannerRef s)
{
  if (s)
    *((_BYTE *)s + 136) = 1;
}

CGPDFContentStreamRef CGPDFScannerGetContentStream(CGPDFScannerRef scanner)
{
  return (CGPDFContentStreamRef)*((_QWORD *)scanner + 7);
}

BOOL CGPDFScannerPopObject(CGPDFScannerRef scanner, CGPDFObjectRef *value)
{
  int v2;

  v2 = *((_DWORD *)scanner + 18);
  if (v2 <= 0)
  {
    pdf_error("stack underflow.", value);
  }
  else
  {
    if (value)
      *value = (CGPDFObjectRef)(*((_QWORD *)scanner + 10) + 40 * (v2 - 1));
    *((_DWORD *)scanner + 18) = v2 - 1;
  }
  return v2 > 0;
}

BOOL CGPDFScannerPopBoolean(CGPDFScannerRef scanner, CGPDFBoolean *value)
{
  int v2;
  uint64_t v3;
  unsigned int v4;

  v2 = *((_DWORD *)scanner + 18);
  if (v2 <= 0)
  {
    pdf_error("stack underflow.", value);
    return 0;
  }
  v3 = *((_QWORD *)scanner + 10);
  v4 = v2 - 1;
  *((_DWORD *)scanner + 18) = v4;
  if (!v3 || *(_DWORD *)(v3 + 40 * v4 + 8) != 2)
    return 0;
  if (value)
    *value = *(_BYTE *)(v3 + 40 * v4 + 32);
  return 1;
}

BOOL CGPDFScannerPopInteger(CGPDFScannerRef scanner, CGPDFInteger *value)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  int v5;

  v2 = *((_DWORD *)scanner + 18);
  if (v2 <= 0)
  {
    pdf_error("stack underflow.", value);
    return 0;
  }
  v3 = *((_QWORD *)scanner + 10);
  v4 = v2 - 1;
  *((_DWORD *)scanner + 18) = v4;
  if (!v3)
    return 0;
  v5 = *(_DWORD *)(v3 + 40 * v4 + 8);
  if (v5 != 12 && v5 != 3)
    return 0;
  if (value)
    *value = *(_QWORD *)(v3 + 40 * v4 + 32);
  return 1;
}

BOOL CGPDFScannerPopString(CGPDFScannerRef scanner, CGPDFStringRef *value)
{
  int v2;
  uint64_t v3;
  unsigned int v4;

  v2 = *((_DWORD *)scanner + 18);
  if (v2 <= 0)
  {
    pdf_error("stack underflow.", value);
    return 0;
  }
  v3 = *((_QWORD *)scanner + 10);
  v4 = v2 - 1;
  *((_DWORD *)scanner + 18) = v4;
  if (!v3 || *(_DWORD *)(v3 + 40 * v4 + 8) != 6)
    return 0;
  if (value)
    *value = *(CGPDFStringRef *)(v3 + 40 * v4 + 32);
  return 1;
}

BOOL CGPDFScannerPopArray(CGPDFScannerRef scanner, CGPDFArrayRef *value)
{
  int v2;
  uint64_t v3;
  unsigned int v4;

  v2 = *((_DWORD *)scanner + 18);
  if (v2 <= 0)
  {
    pdf_error("stack underflow.", value);
    return 0;
  }
  v3 = *((_QWORD *)scanner + 10);
  v4 = v2 - 1;
  *((_DWORD *)scanner + 18) = v4;
  if (!v3 || *(_DWORD *)(v3 + 40 * v4 + 8) != 7)
    return 0;
  if (value)
    *value = *(CGPDFArrayRef *)(v3 + 40 * v4 + 32);
  return 1;
}

BOOL CGPDFScannerPopDictionary(CGPDFScannerRef scanner, CGPDFDictionaryRef *value)
{
  int v2;
  uint64_t v3;
  unsigned int v4;

  v2 = *((_DWORD *)scanner + 18);
  if (v2 <= 0)
  {
    pdf_error("stack underflow.", value);
    return 0;
  }
  v3 = *((_QWORD *)scanner + 10);
  v4 = v2 - 1;
  *((_DWORD *)scanner + 18) = v4;
  if (!v3 || *(_DWORD *)(v3 + 40 * v4 + 8) != 8)
    return 0;
  if (value)
    *value = *(CGPDFDictionaryRef *)(v3 + 40 * v4 + 32);
  return 1;
}

BOOL CGPDFScannerPopStream(CGPDFScannerRef scanner, CGPDFStreamRef *value)
{
  int v2;
  uint64_t v3;
  unsigned int v4;

  v2 = *((_DWORD *)scanner + 18);
  if (v2 <= 0)
  {
    pdf_error("stack underflow.", value);
    return 0;
  }
  v3 = *((_QWORD *)scanner + 10);
  v4 = v2 - 1;
  *((_DWORD *)scanner + 18) = v4;
  if (!v3 || *(_DWORD *)(v3 + 40 * v4 + 8) != 9)
    return 0;
  if (value)
    *value = *(CGPDFStreamRef *)(v3 + 40 * v4 + 32);
  return 1;
}

BOOL GetNamedArrayCommandFromObject(uint64_t a1, CGPDFArray **a2, const char **a3)
{
  CGPDFArray *v3;

  if (a1 && *(_DWORD *)(a1 + 8) == 7 && (v3 = *(CGPDFArray **)(a1 + 32), (*a2 = v3) != 0) && *((_QWORD *)v3 + 2))
    return CGPDFArrayGetName(v3, 0, a3);
  else
    return 0;
}

void CreateColorSpaceFromInlineObject(uint64_t a1, CGColorSpaceRef *a2)
{
  int v4;
  const char *v5;
  CGColorSpaceRef DeviceCMYK;
  char *__s1;
  CGPDFArray *v8;

  if (!a1 || (v4 = *(_DWORD *)(a1 + 8), v4 == 12))
  {
    *a2 = 0;
    goto LABEL_4;
  }
  *a2 = 0;
  if (v4 != 7)
  {
    if (v4 == 5)
    {
      v5 = *(const char **)(a1 + 32);
      if (!strcmp(v5, "CMYK"))
      {
        DeviceCMYK = CGColorSpaceCreateDeviceCMYK();
      }
      else if (!strcmp(v5, "G"))
      {
        DeviceCMYK = CGColorSpaceCreateDeviceGray();
      }
      else
      {
        if (strcmp(v5, "RGB"))
          goto LABEL_4;
        DeviceCMYK = CGColorSpaceCreateDeviceRGB();
      }
      *a2 = DeviceCMYK;
      return;
    }
LABEL_4:
    CreateColorSpaceFromObject((CGColorSpaceRef)a1, a2);
    return;
  }
  __s1 = 0;
  v8 = 0;
  if (GetNamedArrayCommandFromObject(a1, &v8, (const char **)&__s1))
  {
    if (!strcmp(__s1, "I"))
    {
      CreateIndexedColorSpace(v8, a2);
      return;
    }
    goto LABEL_4;
  }
}

void CreateIndexedColorSpace(CGPDFArray *a1, CGColorSpaceRef *a2)
{
  CGColorSpace *v4;
  uint64_t v5;
  CGPDFInteger v6;
  unint64_t v7;
  int v8;
  UInt8 *v9;
  CGPDFStream *v10;
  _QWORD *v11;
  unint64_t v12;
  const __CFData *v13;
  const __CFData *v14;
  _QWORD *v15;
  const unsigned __int8 *v16;
  _QWORD *v17;
  CGPDFInteger v18;
  CFTypeRef cf;
  CGPDFObjectRef value;
  CFRange v21;

  *a2 = 0;
  cf = 0;
  value = 0;
  CGPDFArrayGetObject(a1, 1uLL, &value);
  CreateColorSpaceFromObject(value, (CGColorSpaceRef *)&cf);
  v4 = (CGColorSpace *)cf;
  if (cf)
  {
    v5 = *(_QWORD *)(*((_QWORD *)cf + 3) + 40);
    if (v5)
    {
      v18 = 0;
      CGPDFArrayGetInteger(a1, 2uLL, &v18);
      v6 = v18;
      CGPDFArrayGetObject(a1, 3uLL, &value);
      if (value)
      {
        v7 = v5 + v5 * v6;
        v8 = *((_DWORD *)value + 2);
        if (v8 == 6)
        {
          v17 = 0;
          CGPDFArrayGetString(a1, 3uLL, (CGPDFStringRef *)&v17);
          v11 = v17;
          if (v17)
          {
            if (v17[3])
              decrypt_string((uint64_t)v17);
            v12 = v11[9];
          }
          else
          {
            v12 = 0;
          }
          if (v12 >= v7)
          {
            v15 = v17;
            if (v17)
            {
              if (v17[3])
                decrypt_string((uint64_t)v17);
              v16 = (const unsigned __int8 *)(v15 + 10);
            }
            else
            {
              v16 = 0;
            }
            *a2 = CGColorSpaceCreateIndexed(v4, v18, v16);
          }
        }
        else if (v8 == 9)
        {
          v9 = (UInt8 *)malloc_type_malloc(v7, 0xC485A3F2uLL);
          if (value && *((_DWORD *)value + 2) == 9)
            v10 = (CGPDFStream *)*((_QWORD *)value + 4);
          else
            v10 = 0;
          LODWORD(v17) = 0;
          v13 = CGPDFStreamCopyData(v10, (CGPDFDataFormat *)&v17);
          if (v13)
          {
            v14 = v13;
            if (CFDataGetLength(v13) >= v7)
            {
              v21.location = 0;
              v21.length = v7;
              CFDataGetBytes(v14, v21, v9);
              *a2 = CGColorSpaceCreateIndexed(v4, v18, v9);
            }
            CFRelease(v14);
          }
          free(v9);
        }
      }
    }
    CFRelease(v4);
  }
}

CGColorSpaceRef CreateColorSpaceFromObject(CGColorSpaceRef result, CGColorSpaceRef *a2)
{
  int v3;
  const char *v4;
  const __CFArray *v5;
  const __CFArray *Mutable;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  void *v10;
  char *v11;
  CGPDFArray *v12;
  CGColorSpaceRef Pattern;
  CGPDFArray *v14;
  CGFloat v15;
  CFIndex FirstIndexOfValue;
  char *__s1;
  void *value;
  CGPDFDictionaryRef v19;
  CGFloat whitePoint;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  CGPDFReal gamma[2];
  uint64_t v28;
  CGPDFDictionaryRef dict[3];
  CGFloat blackPoint[4];
  CFRange v31;

  blackPoint[3] = *(CGFloat *)MEMORY[0x1E0C80C00];
  *a2 = 0;
  if (!result)
    return result;
  v3 = *((_DWORD *)result + 2);
  if (v3 == 7)
  {
    __s1 = 0;
    value = 0;
    result = (CGColorSpaceRef)GetNamedArrayCommandFromObject((uint64_t)result, (CGPDFArray **)&value, (const char **)&__s1);
    if (!(_DWORD)result)
      return result;
    if (CreateColorSpaceFromObject_pred != -1)
      dispatch_once(&CreateColorSpaceFromObject_pred, &__block_literal_global_19876);
    v5 = (const __CFArray *)pthread_getspecific(cp_colorspaces_key);
    if (v5)
    {
      Mutable = v5;
      Count = CFArrayGetCount(v5);
      if (Count >= 1)
      {
        v8 = Count;
        v9 = 0;
        do
        {
          v10 = value;
          if (v10 == CFArrayGetValueAtIndex(Mutable, v9))
            return (CGColorSpaceRef)fwrite("invalid color space: color space cannot have a circular reference.\n", 0x43uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        }
        while (v8 != ++v9);
      }
    }
    else
    {
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 100, 0);
    }
    CFArrayAppendValue(Mutable, value);
    pthread_setspecific(cp_colorspaces_key, Mutable);
    v11 = __s1;
    if (!strcmp(__s1, "CalGray"))
    {
      v12 = (CGPDFArray *)value;
      dict[0] = 0;
      *a2 = 0;
      if (!CGPDFArrayGetDictionary(v12, 1uLL, dict))
        goto LABEL_49;
      memset(blackPoint, 0, 24);
      gamma[0] = 0.0;
      if (!GetArrayValues(dict[0], "WhitePoint", (uint64_t)&whitePoint, 3))
        goto LABEL_49;
      GetArrayValues(dict[0], "BlackPoint", (uint64_t)blackPoint, 3);
      CGPDFDictionaryGetNumber(dict[0], "Gamma", gamma);
      Pattern = CGColorSpaceCreateCalibratedGray(&whitePoint, blackPoint, gamma[0]);
    }
    else
    {
      if (strcmp(v11, "CalRGB"))
      {
        if (!strcmp(v11, "Lab"))
        {
          CreateLabColorSpace((CGPDFArray *)value, a2);
        }
        else if (!strcmp(v11, "ICCBased"))
        {
          CreateICCBasedColorSpace((CGPDFArray *)value, a2);
        }
        else if (!strcmp(v11, "Indexed"))
        {
          CreateIndexedColorSpace(value, a2);
        }
        else
        {
          if (strcmp(v11, "DeviceN"))
          {
            if (strcmp(v11, "Pattern"))
            {
              if (!strcmp(v11, "Separation"))
                CreateSeparationColorSpace((CGPDFArray *)value, (uint64_t *)a2);
              goto LABEL_49;
            }
            if (value && *((_QWORD *)value + 2) >= 2uLL)
            {
              whitePoint = 0.0;
              CGPDFArrayGetObject((CGPDFArrayRef)value, 1uLL, (CGPDFObjectRef *)&whitePoint);
              blackPoint[0] = 0.0;
              CreateColorSpaceFromObject(*(_QWORD *)&whitePoint, blackPoint);
              v15 = blackPoint[0];
              if (*(_QWORD *)&blackPoint[0])
              {
                *a2 = CGColorSpaceCreatePattern(*(CGColorSpaceRef *)&blackPoint[0]);
                CFRelease(*(CFTypeRef *)&v15);
              }
              goto LABEL_49;
            }
            Pattern = CGColorSpaceCreatePattern(0);
            goto LABEL_48;
          }
          CreateDeviceNColorSpace((CGPDFArray *)value, (uint64_t *)a2);
        }
LABEL_49:
        v31.length = CFArrayGetCount(Mutable);
        v31.location = 0;
        FirstIndexOfValue = CFArrayGetFirstIndexOfValue(Mutable, v31, value);
        CFArrayRemoveValueAtIndex(Mutable, FirstIndexOfValue);
        return (CGColorSpaceRef)pthread_setspecific(cp_colorspaces_key, Mutable);
      }
      v14 = (CGPDFArray *)value;
      v19 = 0;
      *a2 = 0;
      if (!CGPDFArrayGetDictionary(v14, 1uLL, &v19))
        goto LABEL_49;
      memset(dict, 0, sizeof(dict));
      *(_OWORD *)gamma = xmmword_185003338;
      v28 = 0x3FF0000000000000;
      v22 = 0;
      v24 = 0u;
      v21 = 0u;
      whitePoint = 1.0;
      v23 = 0x3FF0000000000000;
      v25 = 0;
      v26 = 0x3FF0000000000000;
      if (!GetArrayValues(v19, "WhitePoint", (uint64_t)blackPoint, 3))
        goto LABEL_49;
      GetArrayValues(v19, "BlackPoint", (uint64_t)dict, 3);
      GetArrayValues(v19, "Gamma", (uint64_t)gamma, 3);
      GetArrayValues(v19, "Matrix", (uint64_t)&whitePoint, 9);
      Pattern = CGColorSpaceCreateCalibratedRGB(blackPoint, (const CGFloat *)dict, gamma, &whitePoint);
    }
LABEL_48:
    *a2 = Pattern;
    goto LABEL_49;
  }
  if (v3 != 5)
    return result;
  v4 = (const char *)*((_QWORD *)result + 4);
  if (!strcmp(v4, "DeviceCMYK"))
  {
    result = CGColorSpaceCreateDeviceCMYK();
  }
  else if (!strcmp(v4, "DeviceGray"))
  {
    result = CGColorSpaceCreateDeviceGray();
  }
  else if (!strcmp(v4, "DeviceRGB"))
  {
    result = CGColorSpaceCreateDeviceRGB();
  }
  else
  {
    result = (CGColorSpaceRef)strcmp(v4, "Pattern");
    if ((_DWORD)result)
      return result;
    result = CGColorSpaceCreatePattern(0);
  }
  *a2 = result;
  return result;
}

BOOL GetArrayValues(CGPDFDictionary *a1, const char *a2, uint64_t a3, int a4)
{
  _BOOL8 result;
  CGPDFArrayRef v7;
  size_t v8;
  uint64_t v9;
  CGPDFArrayRef value;

  value = 0;
  result = CGPDFDictionaryGetArray(a1, a2, &value);
  if (result)
  {
    v7 = value;
    if (value)
      v7 = (CGPDFArrayRef)*((_QWORD *)value + 2);
    if (v7 == (CGPDFArrayRef)a4)
    {
      if (a4 >= 1)
      {
        v8 = 0;
        do
        {
          v9 = 0;
          CGPDFArrayGetNumber(value, v8, (CGPDFReal *)&v9);
          *(_QWORD *)(a3 + 8 * v8++) = v9;
        }
        while (a4 != v8);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CGColorSpaceRef CreateLabColorSpace(CGPDFArray *a1, _QWORD *a2)
{
  CGColorSpaceRef result;
  CGPDFDictionaryRef value;
  CGFloat range[2];
  __int128 v6;
  CGFloat blackPoint[3];
  CGFloat whitePoint[4];

  whitePoint[3] = *(CGFloat *)MEMORY[0x1E0C80C00];
  value = 0;
  *a2 = 0;
  result = (CGColorSpaceRef)CGPDFArrayGetDictionary(a1, 1uLL, &value);
  if ((_DWORD)result)
  {
    memset(blackPoint, 0, sizeof(blackPoint));
    *(_OWORD *)range = xmmword_185003350;
    v6 = unk_185003360;
    result = (CGColorSpaceRef)GetArrayValues(value, "WhitePoint", (uint64_t)whitePoint, 3);
    if ((_DWORD)result)
    {
      GetArrayValues(value, "BlackPoint", (uint64_t)blackPoint, 3);
      GetArrayValues(value, "Range", (uint64_t)range, 4);
      result = CGColorSpaceCreateLab(whitePoint, blackPoint, range);
      *a2 = result;
    }
  }
  return result;
}

void CreateICCBasedColorSpace(CGPDFArray *a1, CGColorSpaceRef *a2)
{
  CGPDFDictionary *v3;
  const char *v4;
  CGColorSpaceRef DeviceRGB;
  CGColorSpace *v6;
  uint64_t v7;
  CGFloat *v8;
  CGFloat *v9;
  int8x16_t v10;
  int8x16_t v11;
  int64x2_t v17;
  int8x16_t *v18;
  uint64_t v19;
  const __CFData *v20;
  const __CFData *v21;
  CGDataProvider *v22;
  CGDataProvider *v23;
  CGPDFDataFormat format;
  CGPDFObjectRef v25;
  CGPDFInteger v26;
  CGPDFStreamRef value;

  *a2 = 0;
  value = 0;
  if (!CGPDFArrayGetStream(a1, 1uLL, &value))
    return;
  v26 = 0;
  if (!value)
    return;
  v3 = (CGPDFDictionary *)*((_QWORD *)value + 6);
  if (!v3
    || !CGPDFDictionaryGetInteger(*((CGPDFDictionaryRef *)value + 6), "N", &v26)
    || v26 > 4
    || (v26 & 0xFFFFFFFFFFFFFFFDLL) == 0)
  {
    return;
  }
  v25 = 0;
  if (!CGPDFDictionaryGetObject(v3, "Alternate", &v25))
  {
    if (v26 == 3)
    {
LABEL_18:
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
      goto LABEL_19;
    }
    if (v26 == 1)
      goto LABEL_16;
LABEL_17:
    DeviceRGB = CGColorSpaceCreateDeviceCMYK();
    goto LABEL_19;
  }
  if (!v25 || *((_DWORD *)v25 + 2) != 5)
    return;
  v4 = (const char *)*((_QWORD *)v25 + 4);
  if (!strcmp(v4, "DeviceCMYK"))
    goto LABEL_17;
  if (strcmp(v4, "DeviceGray"))
  {
    if (strcmp(v4, "DeviceRGB"))
      return;
    goto LABEL_18;
  }
LABEL_16:
  DeviceRGB = CGColorSpaceCreateDeviceGray();
LABEL_19:
  v6 = DeviceRGB;
  v7 = (2 * v26);
  v8 = (CGFloat *)malloc_type_malloc(8 * (int)v7, 0x100004000313F17uLL);
  v9 = v8;
  if ((int)v7 >= 1)
  {
    v10 = (int8x16_t)xmmword_185004A00;
    v11 = (int8x16_t)vdupq_n_s64(1uLL);
    __asm { FMOV            V2.2D, #1.0 }
    v17 = vdupq_n_s64(2uLL);
    v18 = (int8x16_t *)v8;
    v19 = v7;
    do
    {
      *v18++ = vbicq_s8(_Q2, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v10, v11)));
      v10 = (int8x16_t)vaddq_s64((int64x2_t)v10, v17);
      v19 -= 2;
    }
    while (v19);
  }
  GetArrayValues(v3, "Range", (uint64_t)v8, v7);
  format = CGPDFDataFormatRaw;
  v20 = CGPDFStreamCopyData(value, &format);
  if (v20)
  {
    v21 = v20;
    v22 = CGDataProviderCreateWithCFData(v20);
    if (v22)
    {
      v23 = v22;
      *a2 = CGColorSpaceCreateICCBased(v26, v9, v22, v6);
      CGDataProviderRelease(v23);
    }
    CFRelease(v21);
  }
  CGColorSpaceRelease(v6);
  free(v9);
}

void CreateDeviceNColorSpace(CGPDFArray *a1, uint64_t *a2)
{
  unint64_t v4;
  void *v5;
  void *v6;
  size_t v7;
  const char **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *Function;
  CGColorSpace *v13;
  unint64_t v14;
  CGColorSpace *v15;
  CGPDFObjectRef v16;
  CGPDFObjectRef v17;
  CGPDFArrayRef value;

  value = 0;
  *a2 = 0;
  if (CGPDFArrayGetArray(a1, 1uLL, &value))
  {
    v17 = 0;
    if (CGPDFArrayGetObject(a1, 2uLL, &v17))
    {
      v16 = 0;
      if (CGPDFArrayGetObject(a1, 3uLL, &v16))
      {
        v15 = 0;
        CreateColorSpaceFromObject(v17, &v15);
        if (value)
        {
          v4 = *((_QWORD *)value + 2);
          v5 = malloc_type_malloc(8 * v4, 0x10040436913F5uLL);
          v6 = v5;
          if (v4)
          {
            v7 = 0;
            v8 = (const char **)v5;
            while (CGPDFArrayGetName(value, v7, v8))
            {
              ++v7;
              ++v8;
              if (v4 == v7)
              {
                Function = CGPDFFunctionCreateFunction((char *)v16);
                v13 = v15;
                v14 = v4;
                goto LABEL_12;
              }
            }
            v13 = v15;
LABEL_15:
            CGColorSpaceRelease(v13);
            free(v6);
            return;
          }
        }
        else
        {
          v6 = malloc_type_malloc(0, 0x10040436913F5uLL);
        }
        Function = CGPDFFunctionCreateFunction((char *)v16);
        v13 = v15;
        v14 = 0;
LABEL_12:
        *a2 = CGColorSpaceCreateDeviceN(v14, (uint64_t)v6, v13, Function, 0, v9, v10, v11);
        if (Function)
          CFRelease(Function);
        goto LABEL_15;
      }
    }
  }
}

void CreateSeparationColorSpace(CGPDFArray *a1, uint64_t *a2)
{
  char *Function;
  CGColorSpace *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CGColorSpace *v9;
  CGPDFObjectRef v10;
  CGPDFObjectRef v11;
  char *value;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  value = 0;
  if (CGPDFArrayGetName(a1, 1uLL, (const char **)&value))
  {
    v11 = 0;
    if (CGPDFArrayGetObject(a1, 2uLL, &v11))
    {
      v10 = 0;
      if (CGPDFArrayGetObject(a1, 3uLL, &v10))
      {
        v13[0] = value;
        v9 = 0;
        CreateColorSpaceFromObject(v11, &v9);
        Function = CGPDFFunctionCreateFunction((char *)v10);
        v5 = v9;
        *a2 = CGColorSpaceCreateDeviceN(1uLL, (uint64_t)v13, v9, Function, 0, v6, v7, v8);
        if (v5)
          CGColorSpaceRelease(v5);
        if (Function)
          CFRelease(Function);
      }
    }
  }
}

void cp_build_colorspace_destroy(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

CGColorSpaceRef CreateColorSpaceFromName(const char *a1, CGColorSpaceRef *a2)
{
  CGColorSpaceRef result;

  if (!strcmp(a1, "DeviceGray"))
  {
    result = CGColorSpaceCreateDeviceGray();
  }
  else if (!strcmp(a1, "DeviceRGB"))
  {
    result = CGColorSpaceCreateDeviceRGB();
  }
  else if (!strcmp(a1, "DeviceCMYK"))
  {
    result = CGColorSpaceCreateDeviceCMYK();
  }
  else if (!strcmp(a1, "Pattern"))
  {
    result = CGColorSpaceCreatePattern(0);
  }
  else
  {
    result = 0;
  }
  *a2 = result;
  return result;
}

void CGPDFStreamFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 72);
  if (v3)
    CFRelease(v3);
}

uint64_t CGPDFStreamCreateWithData(const void *a1, char a2, const __CFData *a3)
{
  uint64_t cftype;
  CGDataProviderRef v7;
  CGDataProviderRef v8;
  CFIndex Length;
  _QWORD *v10;

  if (!a3)
    return 0;
  if (CGPDFStreamGetTypeID_onceToken != -1)
    dispatch_once(&CGPDFStreamGetTypeID_onceToken, &__block_literal_global_19902);
  cftype = pdf_create_cftype();
  if (cftype)
  {
    v7 = CGDataProviderCreateWithCFData(a3);
    if (v7)
    {
      v8 = v7;
      *(_QWORD *)(cftype + 16) = 0;
      *(_QWORD *)(cftype + 24) = 0;
      *(_QWORD *)(cftype + 32) = 0;
      *(_BYTE *)(cftype + 40) = a2;
      if (a1)
        CFRetain(a1);
      *(_QWORD *)(cftype + 48) = a1;
      *(_QWORD *)(cftype + 56) = 0;
      Length = CFDataGetLength(a3);
      *(_QWORD *)(cftype + 64) = Length;
      v10 = CGPDFSourceCreate(v8, 0, Length);
      *(_QWORD *)(cftype + 72) = v10;
      *(_DWORD *)(cftype + 80) = 0;
      if (v10)
        CFRelease(v8);
      return cftype;
    }
    return 0;
  }
  return cftype;
}

CFTypeRef CGPDFStreamRetain(CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  return cf;
}

void CGPDFStreamRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

CGPDFDictionaryRef CGPDFStreamGetDictionary(CGPDFDictionaryRef stream)
{
  if (stream)
    return (CGPDFDictionaryRef)*((_QWORD *)stream + 6);
  return stream;
}

uint64_t CGPDFStreamGetObjectReference(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

CFDataRef CGPDFStreamCopyRawData(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *Copy;
  const void *v3;
  UInt8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = a1[8];
  if (v1 >= 1)
  {
    Copy = CGPDFSourceCreateCopy(a1[9], a1[7], v1);
    if (Copy)
    {
      v3 = Copy;
      v4 = (UInt8 *)malloc_type_calloc(1uLL, v1, 0xD504CC28uLL);
      v10 = CGPDFSourceRead((uint64_t)v3, (uint64_t)v4, v1, v5, v6, v7, v8, v9);
      CFRelease(v3);
      if (v10 == v1)
        return CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, v1, (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
      free(v4);
    }
  }
  return 0;
}

uint64_t CGPDFStreamCreateDataProvider(const void *a1, int *a2)
{
  CFTypeRef *v4;
  _BYTE *FilterChain;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (CFTypeRef *)malloc_type_malloc(0x10uLL, 0x566C45D1uLL);
  __CFSetLastAllocationEventName();
  if (v4)
  {
    if (a1)
    {
      CFRetain(a1);
      *v4 = a1;
      FilterChain = CGPDFStreamCreateFilterChain((uint64_t)a1, a2);
      v4[1] = FilterChain;
      if (FilterChain)
        return CGDataProviderCreateSequentialWithInternalCallbacks((uint64_t)v4, (uint64_t)&chain_callbacks, v6, v7, v8, v9, v10, v11);
    }
    else
    {
      *v4 = 0;
      v4[1] = 0;
    }
    chain_release(v4);
  }
  return 0;
}

void chain_release(CFTypeRef *a1)
{
  CFTypeRef v2;

  v2 = a1[1];
  if (v2)
  {
    CFRelease(v2);
    a1[1] = 0;
  }
  if (*a1)
    CFRelease(*a1);
  free(a1);
}

uint64_t chain_get_bytes(uint64_t *a1, uint64_t __dst, size_t __n, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *FilterChain;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(_QWORD);

  FilterChain = (_BYTE *)a1[1];
  if (!FilterChain)
  {
    FilterChain = CGPDFStreamCreateFilterChain(*a1, 0);
    a1[1] = (uint64_t)FilterChain;
    if (!FilterChain)
      return 0;
  }
  v12 = CGPDFSourceRead((uint64_t)FilterChain, __dst, __n, a4, a5, a6, a7, a8);
  v13 = a1[1];
  if (v13)
  {
    v14 = *(unsigned int (**)(_QWORD))(v13 + 72);
    if (v14)
    {
      if (v14(*(_QWORD *)(v13 + 80)))
        return 0;
    }
  }
  return v12;
}

_QWORD *chain_skip_bytes(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = (_QWORD *)a1[1];
  if (result || (result = CGPDFStreamCreateFilterChain(*a1, 0), (a1[1] = (uint64_t)result) != 0))
  {
    v11 = result[11];
    if (result[18])
    {
      v12 = result[24];
      v11 += result[15];
    }
    else
    {
      v12 = result[16];
    }
    v13 = v12 - v11 + result[14];
    CGPDFSourceSetPosition((uint64_t)result, v13 + a2, a3, a4, a5, a6, a7, a8);
    v14 = (_QWORD *)a1[1];
    if (v14)
    {
      v15 = v14[14];
      v16 = v14[11];
      if (v14[18])
        v17 = v14[24] - (v14[15] + v16);
      else
        v17 = v14[16] - v16;
      v18 = v17 + v15;
    }
    else
    {
      v18 = -1;
    }
    return (_QWORD *)(v18 - v13);
  }
  return result;
}

void chain_rewind(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t chain_has_error(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 && (v2 = *(uint64_t (**)(_QWORD))(v1 + 72)) != 0)
    return v2(*(_QWORD *)(v1 + 80));
  else
    return 0;
}

uint64_t CGPDFStreamGetData(uint64_t a1, uint64_t a2, size_t a3)
{
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t result;
  int v14;

  v14 = 0;
  v5 = CGPDFStreamCreateFilterChain(a1, &v14);
  v11 = v5;
  if (!v5 || v14)
  {
    v12 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  else
  {
    v12 = CGPDFSourceRead((uint64_t)v5, a2, a3, v6, v7, v8, v9, v10);
  }
  CFRelease(v11);
  return v12;
}

uint64_t CGPDFStreamSetAssociation(uint64_t a1, const void *a2, const char *a3)
{
  return CGPDFDictionarySetAssociation(*(_QWORD *)(a1 + 48), a2, a3);
}

const void *CGPDFStreamCopyAssociation(uint64_t a1, const char *a2)
{
  return CGPDFDictionaryCopyAssociation(*(_QWORD *)(a1 + 48), a2);
}

uint64_t CGPDFStreamPrint(uint64_t a1, FILE *a2)
{
  return stream_print(a1, a2, 0, 0);
}

uint64_t stream_print(uint64_t result, FILE *a2, int a3, int a4)
{
  uint64_t v6;
  FILE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  int v16;
  _BYTE __ptr[1024];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v6 = result;
    v16 = 0;
    if (a2)
      v7 = a2;
    else
      v7 = (FILE *)*MEMORY[0x1E0C80C10];
    CGPDFDictionaryPrintWithIndent(*(_QWORD *)(result + 48), v7, 0);
    fprintf(v7, "%*s\n", a3, "");
    fprintf(v7, "%*sstream\n", a3, "");
    if (a4)
    {
      v8 = CGPDFStreamCreateFilterChain(v6, &v16);
      if (v8)
      {
        v14 = v8;
        while (1)
        {
          v15 = CGPDFSourceRead((uint64_t)v14, (uint64_t)__ptr, 0x400uLL, v9, v10, v11, v12, v13);
          if (!v15)
            break;
          fwrite(__ptr, 1uLL, v15, v7);
        }
        CFRelease(v14);
      }
    }
    else
    {
      fprintf(v7, "%*s...\n", a3, "");
    }
    return fprintf(v7, "%*sendstream\n", a3, "");
  }
  return result;
}

uint64_t CGPDFStreamPrintWithIndent(uint64_t a1, FILE *a2, int a3)
{
  return stream_print(a1, a2, a3, 0);
}

uint64_t CGPDFStreamPrintContents(uint64_t a1, FILE *a2)
{
  return stream_print(a1, a2, 0, 1);
}

uint64_t CGPDFStreamPrintContentsWithIndent(uint64_t a1, FILE *a2, int a3)
{
  return stream_print(a1, a2, a3, 1);
}

const __CFData *create_alpha_image(uint64_t a1)
{
  const __CFData *result;
  CGDataProvider *v3;
  CGBitmapInfo v4;
  CGColorSpace *DeviceGray;
  CGImageRef v6;

  result = CGDataProviderCreateWithCopyOfData(*(UInt8 **)(a1 + 120), *(_QWORD *)(a1 + 136) * *(_QWORD *)(a1 + 16));
  if (result)
  {
    v3 = result;
    if (*(_QWORD *)(a1 + 128) < 9uLL)
      v4 = 0;
    else
      v4 = *(_DWORD *)(a1 + 40) & 0x7100;
    DeviceGray = CGColorSpaceCreateDeviceGray();
    v6 = CGImageCreate(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), DeviceGray, v4, v3, 0, 1, kCGRenderingIntentDefault);
    CGColorSpaceRelease(DeviceGray);
    CGDataProviderRelease(v3);
    return v6;
  }
  return result;
}

void CGBitmapContextWriteImageToFile(CGContext *a1, char *a2)
{
  CGImageRef Image;

  if (*((_DWORD *)a1 + 6) == 4)
  {
    Image = CGBitmapContextCreateImage(a1);
    CGImageWriteToFile(Image, a2);
    if (Image)
      CFRelease(Image);
  }
}

void CGBitmapContextDumpContentToFile(CGContext *a1, char *a2)
{
  CGImageRef Image;

  Image = CGBitmapContextCreateImage(a1);
  CGImageDumpToFile((uint64_t)Image, a2);
  if (Image)
    CFRelease(Image);
}

void CGImageBlockRelease(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD *);

  if (a1)
  {
    v2 = (void (*)(_QWORD, _QWORD *))a1[9];
    if (v2)
      v2(a1[7], a1);
    free(a1);
  }
}

uint64_t CGImageBlockGetBitmapInfo(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 48);
  return result;
}

uint64_t CGPDFGetUnicharGuessForGlyphName(const char *a1, _WORD *a2)
{
  CFStringRef v4;
  CFStringRef v5;
  const __CFDictionary *v6;
  unsigned int Value;
  int v8;
  uint64_t v9;
  uint64_t v10;
  const char *v12;
  uint64_t v13;
  char *__endptr;

  if (!a1)
    return 0;
  if (!strcmp(a1, ".notdef"))
    return 0;
  v4 = CFStringCreateWithCString(0, a1, 0x600u);
  if (!v4)
    return 0;
  v5 = v4;
  if (get_name_table_predicate != -1)
    dispatch_once(&get_name_table_predicate, &__block_literal_global_19991);
  v6 = (const __CFDictionary *)get_name_table_name_table;
  os_unfair_lock_lock(&CGPDFGetUnicharGuessForGlyphName_lock);
  Value = CFDictionaryGetValue(v6, v5);
  if (!Value)
  {
    __endptr = 0;
    v8 = *(unsigned __int8 *)a1;
    if ((v8 | 0x20) == 0x78)
    {
      v9 = strtol(a1 + 1, &__endptr, 16);
      if (__endptr != a1 + 1 && !*__endptr)
      {
        v10 = v9;
        if ((unint64_t)(v9 - 32) < 0x5F || (unint64_t)(v9 - 160) <= 0x5F)
          goto LABEL_24;
      }
      LOBYTE(v8) = *a1;
    }
    if ((v8 & 0x80) != 0)
    {
      if (!__maskrune_l((char)v8, 0x100uLL, 0))
      {
LABEL_22:
        Value = 0;
        goto LABEL_23;
      }
    }
    else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * (char)v8 + 60) & 0x100) == 0)
    {
      goto LABEL_22;
    }
    v12 = a1 + 1;
    v13 = strtol(v12, &__endptr, 10);
    if (__endptr == v12)
      goto LABEL_22;
    if (*__endptr)
      goto LABEL_22;
    v10 = v13;
    if ((unint64_t)(v13 - 32) >= 0x5F && (unint64_t)(v13 - 160) >= 0x60)
      goto LABEL_22;
LABEL_24:
    Value = set_value(v6, v5, v10);
  }
LABEL_23:
  os_unfair_lock_unlock(&CGPDFGetUnicharGuessForGlyphName_lock);
  CFRelease(v5);
  return utf32_to_utf16(Value, a2);
}

const void *set_value(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  const void *result;

  result = CFDictionaryGetValue(a1, a2);
  if (!(_DWORD)result)
  {
    CFDictionarySetValue(a1, a2, (const void *)a3);
    return (const void *)a3;
  }
  return result;
}

uint64_t utf32_to_utf16(unsigned int a1, _WORD *a2)
{
  if (!a1)
    return 0;
  if (!HIWORD(a1))
  {
    if (a2)
      *a2 = a1;
    return 1;
  }
  if ((a1 - 0x10000) >> 20)
    return 0;
  if (a2)
  {
    *a2 = (a1 >> 10) - 10304;
    a2[1] = a1 & 0x3FF | 0xDC00;
  }
  return 2;
}

CFMutableDictionaryRef __get_name_table_block_invoke()
{
  CFMutableDictionaryRef result;

  result = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], 0);
  get_name_table_name_table = (uint64_t)result;
  return result;
}

uint64_t CGPDFGetUnicharGuessForCID(unsigned int a1, _WORD *a2)
{
  const __CFDictionary *v4;
  unsigned int Value;
  uint64_t v6;
  int v7;

  if (get_cid_table_predicate != -1)
    dispatch_once(&get_cid_table_predicate, &__block_literal_global_3_19996);
  v4 = (const __CFDictionary *)get_cid_table_cid_table;
  os_unfair_lock_lock(&CGPDFGetUnicharGuessForCID_lock);
  Value = CFDictionaryGetValue(v4, (const void *)a1);
  if (!Value)
  {
    v6 = next_default_value_default_value;
    if (next_default_value_default_value == 1114109)
      v7 = 1113088;
    else
      v7 = next_default_value_default_value + 1;
    next_default_value_default_value = v7;
    Value = set_value(v4, (const void *)a1, v6);
  }
  os_unfair_lock_unlock(&CGPDFGetUnicharGuessForCID_lock);
  return utf32_to_utf16(Value, a2);
}

CFMutableDictionaryRef __get_cid_table_block_invoke()
{
  CFMutableDictionaryRef result;

  result = CFDictionaryCreateMutable(0, 0, 0, 0);
  get_cid_table_cid_table = (uint64_t)result;
  return result;
}

uint64_t CGPDFCMapCreate(uint64_t a1)
{
  uint64_t cftype;
  int v3;
  uint64_t v4;
  const void *v5;
  CGPDFStream *v7;
  CGPDFDictionary *v8;
  CFDataRef v9;
  uint64_t v10;
  uint64_t (*v11)(CFDataRef);
  uint64_t v12;
  CGPDFDataFormat format;
  CGPDFObjectRef value;

  value = (CGPDFObjectRef)a1;
  if (CGPDFCMapGetTypeID_onceToken != -1)
    dispatch_once(&CGPDFCMapGetTypeID_onceToken, &__block_literal_global_20000);
  cftype = pdf_create_cftype();
  if (cftype)
  {
    format = CGPDFDataFormatRaw;
    if (a1)
    {
      v3 = *(_DWORD *)(a1 + 8);
      if (v3 == 9)
      {
        v7 = *(CGPDFStream **)(a1 + 32);
        if (v7)
          v8 = (CGPDFDictionary *)*((_QWORD *)v7 + 6);
        else
          v8 = 0;
        if (CGPDFDictionaryGetObject(v8, "UseCMap", &value))
        {
          pdf_error("embedded CMap files with /UseCMap entries aren't handled yet.");
        }
        else
        {
          v9 = CGPDFStreamCopyData(v7, &format);
          if (v9 && format == CGPDFDataFormatRaw)
          {
            v10 = cmap_vtable;
            if ((cmap_vtable || (pthread_once(&load_vtable_once, do_load_vtable), (v10 = cmap_vtable) != 0))
              && (v11 = *(uint64_t (**)(CFDataRef))(v10 + 8)) != 0)
            {
              v12 = v11(v9);
              *(_QWORD *)(cftype + 16) = v12;
              if (v12)
              {
                CFRelease(v9);
                goto LABEL_8;
              }
            }
            else
            {
              *(_QWORD *)(cftype + 16) = 0;
            }
            pdf_error("failed to parse embedded CMap.");
            CFRelease((CFTypeRef)cftype);
            v5 = v9;
LABEL_11:
            CFRelease(v5);
            return 0;
          }
          pdf_error("invalid embedded CMap stream.");
          if (v9)
            CFRelease(v9);
        }
LABEL_10:
        v5 = (const void *)cftype;
        goto LABEL_11;
      }
      if (v3 == 5)
      {
        v4 = cg_cmap_create_with_name(*(_QWORD *)(a1 + 32));
        *(_QWORD *)(cftype + 16) = v4;
        if (v4)
        {
LABEL_8:
          *(_DWORD *)(cftype + 32) = 0;
          return cftype;
        }
        goto LABEL_10;
      }
    }
    pdf_error("invalid CMap: not a name or stream.");
    goto LABEL_10;
  }
  return cftype;
}

void CGPDFCMapFinalize(uint64_t a1)
{
  void (*v2)(_QWORD);
  const void *v3;

  if (cmap_vtable)
  {
    v2 = *(void (**)(_QWORD))(cmap_vtable + 16);
    if (v2)
      v2(*(_QWORD *)(a1 + 16));
  }
  v3 = *(const void **)(a1 + 24);
  if (v3)
    CFRelease(v3);
}

void CGPDFCMapRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t CGPDFCMapCreateWithName(uint64_t a1)
{
  uint64_t cftype;
  uint64_t v3;

  if (CGPDFCMapGetTypeID_onceToken != -1)
    dispatch_once(&CGPDFCMapGetTypeID_onceToken, &__block_literal_global_20000);
  cftype = pdf_create_cftype();
  if (cftype)
  {
    v3 = cg_cmap_create_with_name(a1);
    *(_QWORD *)(cftype + 16) = v3;
    if (v3)
    {
      *(_DWORD *)(cftype + 32) = 0;
    }
    else
    {
      CFRelease((CFTypeRef)cftype);
      return 0;
    }
  }
  return cftype;
}

CFTypeRef CGPDFCMapRetain(CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  return cf;
}

uint64_t CGPDFCMapGetName(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  if (a1 && cmap_vtable && (v1 = *(uint64_t (**)(_QWORD))(cmap_vtable + 24)) != 0)
    return v1(*(_QWORD *)(a1 + 16));
  else
    return 0;
}

uint64_t CGPDFCMapGetROS(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  if (a1 && cmap_vtable && (v1 = *(uint64_t (**)(_QWORD))(cmap_vtable + 32)) != 0)
    return v1(*(_QWORD *)(a1 + 16));
  else
    return 0;
}

BOOL CGPDFCMapIsHorizontal(uint64_t a1)
{
  unsigned int (*v1)(_QWORD);

  if (!a1)
    return 1;
  if (cmap_vtable)
  {
    v1 = *(unsigned int (**)(_QWORD))(cmap_vtable + 40);
    if (v1)
      return v1(*(_QWORD *)(a1 + 16)) == 0;
  }
  return 1;
}

uint64_t CGPDFCMapGetCIDsForText(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t v6;
  _BYTE *v7;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t (*v16)(_QWORD, _BYTE *, uint64_t, uint64_t, char *);
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  BOOL v20;
  _QWORD v22[2];

  v6 = 0;
  v22[1] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v7 = a2;
    if (a2)
    {
      if (a3 && a4)
      {
        MEMORY[0x1E0C80A78](a1, a6);
        v14 = (char *)v22 - v13;
        if (v12 <= 0x1FFFFFFFFFFFFFFELL)
          v15 = (char *)v22 - v13;
        else
          v15 = 0;
        if (v12 - 0x1FFFFFFFFFFFFFFFLL >= 0xE000000000000066)
          v15 = (char *)malloc_type_malloc(8 * a3, 0xB02DCE6uLL);
        if (v15)
        {
          if (cmap_vtable
            && (v16 = *(uint64_t (**)(_QWORD, _BYTE *, uint64_t, uint64_t, char *))(cmap_vtable + 48)) != 0)
          {
            v17 = v16(*(_QWORD *)(a1 + 16), v7, a3, a4, v15);
            v6 = v17;
            if (a5 && v17)
            {
              for (i = 0; i != v17; ++i)
              {
                v19 = *(_QWORD *)&v15[8 * i];
                v20 = v19 == 1 && *v7 == 32;
                *(_BYTE *)(a5 + i) = v20;
                v7 += v19;
              }
            }
          }
          else
          {
            v6 = 0;
          }
          if (v15 != v14)
            free(v15);
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return v6;
}

char *CGPDFCMapGetUnicodeCMap(uint64_t a1)
{
  char *result;
  uint64_t (*v3)(_QWORD);
  const char *v4;
  int64_t v5;
  char *v6;
  size_t v7;
  char *v8;

  result = *(char **)(a1 + 24);
  if (!result)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 32));
    if (*(_QWORD *)(a1 + 24))
    {
LABEL_3:
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 32));
      return *(char **)(a1 + 24);
    }
    if (cmap_vtable && (v3 = *(uint64_t (**)(_QWORD))(cmap_vtable + 32)) != 0)
    {
      result = (char *)v3(*(_QWORD *)(a1 + 16));
      if (result)
      {
        v4 = result;
        result = strrchr(result, 45);
        if (result)
        {
          v5 = result - v4;
          result = (char *)malloc_type_malloc(result - v4 + 6, 0x44A537B1uLL);
          if (result)
          {
            v6 = result;
            v7 = v5 + 1;
            v8 = strncpy(result, v4, v7);
            strcpy(&v8[v7], "UCS2");
            *(_QWORD *)(a1 + 24) = CGPDFCMapCreateWithName((uint64_t)v8);
            free(v6);
            goto LABEL_3;
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CGPDFCMapGetMaxUnicodes(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  if (a1 && cmap_vtable && (v1 = *(uint64_t (**)(_QWORD))(cmap_vtable + 56)) != 0)
    return v1(*(_QWORD *)(a1 + 16));
  else
    return 0;
}

uint64_t CGPDFCMapGetUnicodesForIndex(uint64_t a1, unint64_t a2)
{
  uint64_t (*v2)(_QWORD, _QWORD);

  if (a1 && !(a2 >> 16) && cmap_vtable && (v2 = *(uint64_t (**)(_QWORD, _QWORD))(cmap_vtable + 64)) != 0)
    return v2(*(_QWORD *)(a1 + 16), (unsigned __int16)a2);
  else
    return 0;
}

uint64_t CGPDFCMapGetIndexForUnicodes(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  if (a1 && cmap_vtable && (v1 = *(uint64_t (**)(_QWORD))(cmap_vtable + 72)) != 0)
    return v1(*(_QWORD *)(a1 + 16));
  else
    return 0;
}

uint64_t CGPDFCMapGetZapfTable(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  if (a1 && cmap_vtable && (v1 = *(uint64_t (**)(_QWORD))(cmap_vtable + 80)) != 0)
    return v1(*(_QWORD *)(a1 + 16));
  else
    return 0;
}

uint64_t CGFontGetFontSubsetFormat(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(result + 16) + 336))(*(_QWORD *)(result + 112));
  return result;
}

uint64_t CGFontCreateFontSubset(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(result + 16) + 344))(*(_QWORD *)(result + 112));
  return result;
}

BOOL CGFontCanCreatePostScriptSubset(CGFontRef font, CGFontPostScriptFormat format)
{
  if (font)
    LOBYTE(font) = (*(uint64_t (**)(_QWORD, _QWORD))(*((_QWORD *)font + 2) + 368))(*((_QWORD *)font + 14), *(_QWORD *)&format);
  return (char)font;
}

CFDataRef CGFontCreatePostScriptSubset(CGFontRef font, CFStringRef subsetName, CGFontPostScriptFormat format, const CGGlyph *glyphs, size_t count, const CGGlyph *encoding)
{
  if (font && subsetName && (glyphs || !count))
    return (CFDataRef)(*(uint64_t (**)(_QWORD))(*((_QWORD *)font + 2) + 352))(*((_QWORD *)font + 14));
  else
    return 0;
}

CFDataRef CGFontCreatePostScriptEncoding(CFDataRef font, const CGGlyph *encoding)
{
  if (font)
    return (CFDataRef)(*(uint64_t (**)(_QWORD, const CGGlyph *))(*((_QWORD *)font + 2) + 360))(*((_QWORD *)font + 14), encoding);
  return font;
}

BOOL CheckParagraphUnilined(void *a1)
{
  return ((int)objc_msgSend(a1, "leftOrder") < 1
       || objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "paragraphsLeft"), "objectAtIndex:", 0), "count") <= 1)&& ((int)objc_msgSend(a1, "rightOrder") < 1|| objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "paragraphsRight"), "objectAtIndex:", 0), "count") <= 1);
}

CGColorSpaceRef image_can_be_converted_to_indexed(uint64_t a1)
{
  unint64_t Size;
  uint64_t v3;
  CGColorSpaceRef ColorSpace;
  CGColorSpaceRef result;
  _BOOL4 v6;
  BOOL v7;
  int v8;

  Size = CGImageGetSize((_QWORD *)a1);
  if (Size * v3 < 0x3E8)
    return 0;
  ColorSpace = CGImageGetColorSpace((CGImageRef)a1);
  if (CGColorSpaceGetType(ColorSpace) == 7 || CGColorSpaceGetType(ColorSpace) == 9)
    return 0;
  v6 = CGImageGetAlphaInfo((CGImageRef)a1) == kCGImageAlphaPremultipliedLast
    || CGImageGetAlphaInfo((CGImageRef)a1) == kCGImageAlphaPremultipliedFirst;
  if (CGImageGetAlphaInfo((CGImageRef)a1))
  {
    if (!ColorSpace)
      return 0;
    v7 = *(_QWORD *)(*((_QWORD *)ColorSpace + 3) + 40) != 1;
  }
  else
  {
    v7 = 0;
  }
  result = 0;
  if (!v6 && !v7)
  {
    result = CGImageGetColorSpace((CGImageRef)a1);
    if (result)
    {
      if (*(_QWORD *)(*((_QWORD *)result + 3) + 40) == 1 && CGImageGetDecodeType((CGImage *)a1) != 2)
      {
        if (!a1)
          return (CGColorSpaceRef)1;
        v8 = *(_DWORD *)(a1 + 36);
        if ((v8 & 0x2000000) == 0)
          return (CGColorSpaceRef)((v8 & 0x8000000) == 0);
      }
      return 0;
    }
  }
  return result;
}

CGImageRef copy_image_with_color_space_and_one_component(CGImage *image, CGColorSpace *a2, size_t a3)
{
  size_t v5;
  size_t v6;
  size_t v7;
  CGBitmapInfo BitmapInfo;
  char *DataProviderInternal;
  BOOL shouldInterpolate;
  CGColorRenderingIntent intent;
  unsigned int DecodeType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const CGFloat *decode;

  if (image)
  {
    v6 = *((_QWORD *)image + 5);
    v5 = *((_QWORD *)image + 6);
    v7 = *((_QWORD *)image + 9);
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
  }
  BitmapInfo = CGImageGetBitmapInfo(image);
  DataProviderInternal = CGImageGetDataProviderInternal((char *)image, 0);
  CGImageGetDecode(image);
  shouldInterpolate = CGImageGetShouldInterpolate(image);
  intent = CGImageGetRenderingIntent(image);
  DecodeType = CGImageGetDecodeType(image);
  if (DecodeType >= 2)
    _CGHandleAssert("copy_image_with_color_space_and_one_component", 72, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageCreateIndexed.c", "decode_type == kCGDecodeDefault || decode_type == kCGDecodeInvert", "decode variety (%d) not supported", v13, v14, v15, 2);
  if (DecodeType)
  {
    if (!image)
      return 0;
    v16 = *((_QWORD *)image + 8) - 1;
    if (v16 >= 8 || ((0xADu >> v16) & 1) == 0)
      return 0;
    decode = (const CGFloat *)*(&off_1E1662470 + v16);
  }
  else
  {
    decode = 0;
  }
  return CGImageCreate(v6, v5, a3, a3, v7, a2, BitmapInfo, (CGDataProviderRef)DataProviderInternal, decode, shouldInterpolate, intent);
}

CGImageRef CGImageCreate8BitIndexed(CGImage *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CGColorSpaceRef ColorSpace;
  CGColorSpace *v7;
  CGColorSpace *Indexed;
  CGImageRef v9;
  CGColorSpaceRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!image_can_be_converted_to_indexed((uint64_t)a1))
    return 0;
  if (!a1)
  {
    LOBYTE(v5) = 0;
LABEL_9:
    _CGHandleAssert("CGImageCreate8BitIndexed", 432, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageCreateIndexed.c", "CGImageGetBitsPerComponent(image) == 8", "bpc %lu", v2, v3, v4, v5);
  }
  v5 = *((_QWORD *)a1 + 7);
  if (v5 != 8)
    goto LABEL_9;
  ColorSpace = CGImageGetColorSpace(a1);
  if (!ColorSpace || *(_QWORD *)(*((_QWORD *)ColorSpace + 3) + 40) != 1)
  {
    v11 = CGImageGetColorSpace(a1);
    if (v11)
      v15 = *(_QWORD *)(*((_QWORD *)v11 + 3) + 40);
    else
      LOBYTE(v15) = 0;
    _CGHandleAssert("CGImageCreate8BitIndexed", 433, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageCreateIndexed.c", "CGColorSpaceGetNumberOfComponents(CGImageGetColorSpace(image)) == 1", "color components %lu", v12, v13, v14, v15);
  }
  v7 = CGImageGetColorSpace(a1);
  Indexed = CGColorSpaceCreateIndexed(v7, 0xFFuLL, CGImageCreate8BitIndexed_index_table);
  v9 = copy_image_with_color_space_and_one_component(a1, Indexed, 8uLL);
  CGColorSpaceRelease(Indexed);
  return v9;
}

_QWORD *CGPDFDrawingContextDrawText(_QWORD *result, uint64_t a2)
{
  uint64_t v3;
  __n128 v4;

  if (a2)
  {
    v3 = (uint64_t)result;
    CGPDFGStateSynchronizeContextForText(result[4], (CGContextRef)result[11]);
    result = *(_QWORD **)(a2 + 168);
    if (result)
      return CGPDFTextLayoutDrawGlyphs(result, (void (*)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, char *, char *, _QWORD, uint64_t))draw_glyphs_20173, v3, v4);
  }
  return result;
}

void draw_glyphs_20173(CGPDFContentStreamRef *a1, uint64_t a2, float64x2_t *a3, const CGPoint *a4, uint64_t a5, const CGGlyph *a6, uint64_t a7, unsigned __int8 *a8, size_t a9)
{
  size_t v15;
  float64x2_t v16;
  _QWORD *Procedures;
  _QWORD *v18;
  CGContext *v19;
  _OWORD *v20;
  CGFloat *p_y;
  int v22;
  CGPDFStream *v23;
  __int128 v24;
  CGContext *v25;
  CGContext *v26;
  uint64_t Mutator;
  double *v28;
  unsigned int v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  CGContext *v34;
  CGFont *v35;
  CGContext *v36;
  CGContext *v37;
  const CGGlyph *v38;
  const CGPoint *v39;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  CGPDFDictionaryRef value;
  CGAffineTransform v48;
  CGAffineTransform transform;
  CGFontRef font[2];

  v15 = a9;
  if (a2 && *(_DWORD *)(a2 + 200) == 5)
  {
    v16 = a3[1];
    *(float64x2_t *)&v48.a = *a3;
    *(float64x2_t *)&v48.c = v16;
    *(float64x2_t *)&v48.tx = a3[2];
    Procedures = CGPDFFontGetProcedures(a2);
    if (!Procedures)
      return;
    v18 = Procedures;
    value = 0;
    if (!CGPDFDictionaryGetDictionary(*(CGPDFDictionaryRef *)(a2 + 16), "Resources", &value))
      value = 0;
    v19 = a1[11];
    CGContextSaveGState(v19);
    CGContextSetInterpolationQuality(v19, kCGInterpolationHigh);
    transform = v48;
    CGContextConcatCTM(v19, &transform);
    if (a9)
    {
      v20 = (_OWORD *)(a2 + 56);
      p_y = &a4->y;
      do
      {
        v22 = *a8++;
        v23 = (CGPDFStream *)v18[v22];
        if (v23)
        {
          CGContextSaveGState(v19);
          CGContextTranslateCTM(v19, *(p_y - 1), *p_y);
          v24 = v20[1];
          *(_OWORD *)&transform.a = *v20;
          *(_OWORD *)&transform.c = v24;
          *(_OWORD *)&transform.tx = v20[2];
          CGContextConcatCTM(v19, &transform);
          CGPDFDrawingContextDrawGlyphStream(a1, v23, value, (uint64_t)v19);
          CGContextRestoreGState(v19);
        }
        p_y += 2;
        --v15;
      }
      while (v15);
    }
    v25 = v19;
LABEL_20:
    CGContextRestoreGState(v25);
    return;
  }
  if (CGPDFFontGetMutator(a2))
  {
    if (!a9)
      return;
    v45 = a3[1];
    v46 = *a3;
    v43 = a3[2];
    *(_OWORD *)font = 0u;
    memset(&transform, 0, sizeof(transform));
    v26 = a1[11];
    CGContextSaveGState(v26);
    Mutator = CGPDFFontGetMutator(a2);
    v28 = &a4->y;
    do
    {
      v44 = vmlaq_n_f64(vmlaq_n_f64(v43, v46, *(v28 - 1)), v45, *v28);
      v29 = *a8++;
      CGPDFFontMutatorGetMutation(Mutator, v29, (uint64_t)&transform);
      CGContextSetFont(v26, font[1]);
      if (BYTE2(transform.a))
      {
        v31 = v45;
        v30 = v46;
        v32 = v44;
      }
      else
      {
        v30 = vmlaq_n_f64(vmulq_n_f64(v45, transform.c), v46, transform.b);
        v31 = vmlaq_n_f64(vmulq_n_f64(v45, transform.tx), v46, transform.d);
        v32 = vaddq_f64(v44, vmlaq_n_f64(vmulq_n_f64(v45, *(double *)font), v46, transform.ty));
      }
      *(float64x2_t *)&v48.a = v30;
      *(float64x2_t *)&v48.c = v31;
      *(float64x2_t *)&v48.tx = v32;
      CGContextSetTextMatrix(v26, &v48);
      CGContextShowGlyphsAtPositions(v26, (const CGGlyph *)&transform, &CGPointZero, 1uLL);
      v28 += 2;
      --v15;
    }
    while (v15);
    v25 = v26;
    goto LABEL_20;
  }
  v33 = a3[1];
  *(float64x2_t *)&v48.a = *a3;
  *(float64x2_t *)&v48.c = v33;
  *(float64x2_t *)&v48.tx = a3[2];
  if (a9)
  {
    v34 = a1[11];
    v35 = (CGFont *)CGPDFFontGetFont(a2);
    CGContextSetFont(v34, v35);
    v36 = a1[11];
    transform = v48;
    CGContextSetTextMatrix(v36, &transform);
    if (CGPDFFontIsEmbedded(a2))
    {
      v37 = a1[11];
      v38 = a6;
      v39 = a4;
      v40 = a9;
    }
    else
    {
      v41 = 0;
      v42 = 0;
      do
      {
        if (a6[v42])
        {
          ++v42;
        }
        else
        {
          CGContextShowGlyphsAtPositions(a1[11], &a6[v41], &a4[v41], v42 - v41);
          v41 = ++v42;
        }
      }
      while (v42 != a9);
      v37 = a1[11];
      v38 = &a6[v41];
      v40 = a9 - v41;
      v39 = &a4[v41];
    }
    CGContextShowGlyphsAtPositions(v37, v38, v39, v40);
  }
}

void clip_to_glyphs_20177(uint64_t a1, uint64_t a2, float64x2_t *a3, uint64_t a4, uint64_t a5, __int16 *a6, uint64_t a7, unsigned __int8 *a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t Mutator;
  uint64_t v17;
  double *v18;
  unsigned int v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  double *v23;
  float64x2_t v24;
  float64x2_t v25;
  const void *Font;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  CGAffineTransform v31;

  if (!a2 || *(_DWORD *)(a2 + 200) != 5)
  {
    v15 = a9;
    v30 = 0u;
    memset(&v31, 0, sizeof(v31));
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    Mutator = CGPDFFontGetMutator(a2);
    if (Mutator)
    {
      if (a9)
      {
        v17 = Mutator;
        v18 = (double *)(a4 + 8);
        do
        {
          v19 = *a8++;
          CGPDFFontMutatorGetMutation(v17, v19, (uint64_t)&v27);
          v20 = *a3;
          v21 = a3[1];
          v22 = vmlaq_n_f64(vmlaq_n_f64(a3[2], *a3, *(v18 - 1)), v21, *v18);
          *(float64x2_t *)&v31.a = *a3;
          *(float64x2_t *)&v31.c = v21;
          *(float64x2_t *)&v31.tx = v22;
          if (!BYTE2(v27))
          {
            *(float64x2_t *)&v31.a = vmlaq_n_f64(vmulq_n_f64(v21, *(double *)&v28), v20, *((double *)&v27 + 1));
            *(float64x2_t *)&v31.c = vmlaq_n_f64(vmulq_n_f64(v21, *(double *)&v29), v20, *((double *)&v28 + 1));
            *(float64x2_t *)&v31.tx = vaddq_f64(v22, vmlaq_n_f64(vmulq_n_f64(v21, *(double *)&v30), v20, *((double *)&v29 + 1)));
          }
          CGTextClippingAppendGlyphs(a1, *((const void **)&v30 + 1), &v31, (__int16 *)&v27, (__int128 *)&CGPointZero, 1);
          v18 += 2;
          --v15;
        }
        while (v15);
      }
    }
    else if (a9)
    {
      v23 = (double *)(a4 + 8);
      do
      {
        v24 = a3[1];
        v25 = vmlaq_n_f64(vmlaq_n_f64(a3[2], *a3, *(v23 - 1)), v24, *v23);
        *(float64x2_t *)&v31.a = *a3;
        *(float64x2_t *)&v31.c = v24;
        *(float64x2_t *)&v31.tx = v25;
        Font = (const void *)CGPDFFontGetFont(a2);
        CGTextClippingAppendGlyphs(a1, Font, &v31, a6++, (__int128 *)&CGPointZero, 1);
        v23 += 2;
        --v15;
      }
      while (v15);
    }
  }
}

_QWORD *PDFOutputIntentCreate(uint64_t a1, const void *a2)
{
  _QWORD *v2;
  CFMutableArrayRef Mutable;
  const __CFArray *Value;
  const __CFArray *v7;
  CFTypeID v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v13;
  const void *v14;

  v2 = 0;
  if (!a1)
    return v2;
  if (!a2)
    return v2;
  v2 = malloc_type_calloc(1uLL, 0x20uLL, 0x33BCE901uLL);
  __CFSetLastAllocationEventName();
  if (!v2)
    return v2;
  *v2 = a1;
  v2[1] = CFRetain(a2);
  *((_BYTE *)v2 + 24) = 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v2[2] = Mutable;
  if (!Mutable)
    goto LABEL_20;
  Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("kCGPDFContextOutputIntents"));
  if (!Value || (v7 = Value, v8 = CFGetTypeID(Value), v8 != CFArrayGetTypeID()))
  {
    v13 = CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("kCGPDFContextOutputIntent"));
    if ((is_valid_output_intent((const __CFDictionary *)v13, 0) & 1) != 0)
    {
      CFArrayAppendValue((CFMutableArrayRef)v2[2], v13);
      goto LABEL_16;
    }
LABEL_20:
    PDFOutputIntentRelease(v2);
    return 0;
  }
  Count = CFArrayGetCount(v7);
  if (Count)
  {
    v10 = Count;
    for (i = 0; i != v10; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v7, i);
      if ((is_valid_output_intent((const __CFDictionary *)ValueAtIndex, i) & 1) != 0)
      {
        CFArrayAppendValue((CFMutableArrayRef)v2[2], ValueAtIndex);
      }
      else if (!i)
      {
        goto LABEL_20;
      }
    }
  }
LABEL_16:
  if (!CFArrayGetCount((CFArrayRef)v2[2]))
    goto LABEL_20;
  v14 = CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("GTS_PDFXVersion"));
  if (v14 && CFEqual(v14, CFSTR("PDF/X-3:2002")))
    *((_BYTE *)v2 + 24) = 1;
  return v2;
}

void PDFOutputIntentRelease(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  if (a1)
  {
    v2 = (const void *)a1[1];
    if (v2)
      CFRelease(v2);
    v3 = (const void *)a1[2];
    if (v3)
      CFRelease(v3);
    free(a1);
  }
}

const __CFDictionary *is_valid_output_intent(const __CFDictionary *result, uint64_t a2)
{
  const __CFDictionary *v3;
  CFTypeID v4;
  const __CFDictionary *v5;
  CFTypeID v6;
  int v7;
  CFTypeID v8;

  if (result)
  {
    v3 = result;
    v4 = CFGetTypeID(result);
    if (v4 != CFDictionaryGetTypeID())
      return 0;
    result = (const __CFDictionary *)CFDictionaryGetValue(v3, CFSTR("S"));
    if (!result)
      return result;
    v5 = result;
    v6 = CFGetTypeID(result);
    if (v6 != CFStringGetTypeID())
      return 0;
    v7 = CFEqual(v5, CFSTR("GTS_PDFX"));
    if (a2)
    {
      if (!v7)
      {
LABEL_12:
        result = (const __CFDictionary *)CFDictionaryGetValue(v3, CFSTR("OutputConditionIdentifier"));
        if (result)
        {
          v8 = CFGetTypeID(result);
          return (const __CFDictionary *)(v8 == CFStringGetTypeID());
        }
        return result;
      }
    }
    else if (v7)
    {
      goto LABEL_12;
    }
    result = (const __CFDictionary *)CFEqual(v5, CFSTR("GTS_PDFA1"));
    if (!(_DWORD)result)
      return result;
    goto LABEL_12;
  }
  return result;
}

_BYTE *PDFOutputIntentGetIsX3(_BYTE *result)
{
  int v1;

  if (result)
  {
    if (result[24] && (v1 = *(_DWORD *)(*(_QWORD *)result + 4), v1 <= 1))
      return (_BYTE *)(v1 != 1 || *(_DWORD *)(*(_QWORD *)result + 8) < 4);
    else
      return 0;
  }
  return result;
}

const void *get_string(const __CFDictionary *a1, const void *a2)
{
  const void *result;
  const void *v3;
  CFTypeID v4;

  result = CFDictionaryGetValue(a1, a2);
  if (result)
  {
    v3 = result;
    v4 = CFGetTypeID(result);
    if (v4 == CFStringGetTypeID())
      return v3;
    else
      return 0;
  }
  return result;
}

uint64_t evaluate_range(uint64_t result, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  double *v7;
  double v8;
  double v9;
  unint64_t v10;
  double v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double *v16;
  char *v17;
  double *v18;
  unint64_t v19;
  double *v20;
  double *v21;
  double v22;

  v6 = result;
  v7 = (double *)(a3[3] + 16 * a2);
  v8 = *v7;
  v9 = v7[1] - *v7;
  v10 = *a3;
  v11 = v9 / (double)(*a3 - 1);
  if (a2)
  {
    if (v10)
    {
      v13 = 0;
      v14 = a2 - 1;
      do
      {
        *(double *)(a3[6] + 8 * a2) = v8 + (double)v13 * v11;
        result = evaluate_range(v6, v14, a3, a4);
        ++v13;
      }
      while (v13 < *a3);
    }
  }
  else if (v10)
  {
    v15 = 0;
    v16 = (double *)(a4 + 8);
    do
    {
      v17 = (char *)a3[6];
      v18 = (double *)a3[7];
      *(double *)v17 = v8 + (double)v15 * v11;
      result = CGFunctionEvaluate(*(_QWORD *)(v6 + 16), v17, v18);
      v19 = a3[4];
      if (v19)
      {
        v20 = (double *)a3[7];
        v21 = v16;
        do
        {
          v22 = *v20;
          if (*v20 < *(v21 - 1))
          {
            *(v21 - 1) = v22;
            v22 = *v20;
          }
          if (v22 > *v21)
            *v21 = v22;
          v21 += 2;
          ++v20;
          --v19;
        }
        while (v19);
      }
      ++v15;
    }
    while (v15 < *a3);
  }
  return result;
}

void emit_samples(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  double *v7;
  double v8;
  double v9;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  double *v17;
  unint64_t v18;
  unint64_t v19;
  float64x2_t v20;
  float64x2_t v21;

  v7 = (double *)(a4[3] + 16 * a3);
  v8 = *v7;
  v9 = (v7[1] - *v7) / (double)(*a4 - 1);
  if (a3)
  {
    if (*a4)
    {
      v11 = 0;
      v12 = a3 - 1;
      do
      {
        *(double *)(a4[6] + 8 * a3) = v8 + (double)v11 * v9;
        emit_samples(a1, a2, v12, a4);
        ++v11;
      }
      while (v11 < *a4);
    }
  }
  else
  {
    v13 = a4[5];
    v14 = (char *)malloc_type_malloc(a4[4], 0x100004077774924uLL);
    if (*a4)
    {
      v15 = 0;
      v21 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
      do
      {
        v16 = (char *)a4[6];
        v17 = (double *)a4[7];
        *(double *)v16 = v8 + (double)v15 * v9;
        CGFunctionEvaluate(a1[2], v16, v17);
        v18 = a1[4];
        v19 = a1[5];
        if (v18 <= v19)
        {
          do
          {
            v20 = (float64x2_t)vbslq_s8((int8x16_t)vceqq_f64(vabsq_f64(*(float64x2_t *)(v13 + 16 * v18)), v21), (int8x16_t)xmmword_185005190, *(int8x16_t *)(v13 + 16 * v18));
            v14[v18 - a1[4]] = (int)((*(double *)(a4[7] + 8 * v18) - v20.f64[0])
                                   / vsubq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v20, 1), v20).f64[0]
                                   * 255.0
                                   + 0.5);
            ++v18;
            v19 = a1[5];
          }
          while (v18 <= v19);
          v18 = a1[4];
        }
        CGDataConsumerPutBytes(*(_QWORD *)(a2 + 24), (uint64_t)v14, v19 - v18 + 1);
        ++v15;
      }
      while (v15 < *a4);
    }
    free(v14);
  }
}

uint64_t CIF10_sample_CIF10_inner(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int *v42;
  unsigned int *v43;
  unint64_t v44;
  unint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned int v48;
  int v49;
  int v50;
  int64_t v51;
  unsigned int *v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int *v55;
  unsigned int *v56;
  unint64_t v57;
  unsigned __int8 *v58;
  unint64_t v59;
  unint64_t v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int *v70;
  unint64_t v71;
  unsigned __int8 *v72;
  uint64_t v73;
  char v74;
  unint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  unsigned __int8 *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned __int8 *v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_QWORD *)(result + 40);
  v6 = *(_DWORD *)(result + 24);
  v7 = *(_DWORD *)(result + 28);
  v8 = *(_QWORD *)(result + 176);
  v90 = *(_QWORD *)(result + 80);
  v92 = *(_QWORD *)(result + 88);
  v10 = *(_QWORD *)(result + 112);
  v9 = *(_QWORD *)(result + 120);
  v11 = *(_QWORD *)(result + 152) - 8;
  v12 = *(_QWORD *)(result + 144) - 1;
  if (v5)
    v13 = 0;
  else
    v13 = 0xFF00000000;
  v14 = *(_DWORD *)(result + 260) - 1;
  v15 = *(unsigned int *)(result + 256);
  v16 = (unsigned __int8 *)(v5 + (v15 - 1) + (v14 * v7));
  v89 = *(_DWORD *)(result + 188);
  v17 = v4 + (v14 * v6) + 4 * v15 - 8;
  v91 = *(_QWORD *)(result + 64);
  v93 = *(_QWORD *)(result + 72);
  do
  {
    while (1)
    {
      if (a3 >= v93)
      {
        if (a3 <= v92)
        {
          v26 = ((unint64_t)a3 >> 22) & 0x3C0;
          v27 = 0x3FFFFFFF;
          v28 = a3;
          v29 = v91;
        }
        else
        {
          v22 = *(_QWORD *)(result + 216);
          v23 = *(_QWORD *)(result + 224) + v92;
          v24 = v23 - a3 + (v22 >> 1);
          if (v24 < 1)
            goto LABEL_43;
          if (v24 >= v22)
            LODWORD(v25) = 0x3FFFFFFF;
          else
            v25 = (unint64_t)(*(_QWORD *)(result + 232) * v24) >> 32;
          v29 = v91;
          v27 = v89 | v25;
          v28 = v23 - 0x1000000;
          v26 = 448;
        }
      }
      else
      {
        v18 = *(_QWORD *)(result + 216);
        v19 = v93 - *(_QWORD *)(result + 224);
        v20 = a3 - v19 + (v18 >> 1);
        if (v20 < 1)
          goto LABEL_43;
        if (v20 >= v18)
          LODWORD(v21) = 0x3FFFFFFF;
        else
          v21 = (unint64_t)(*(_QWORD *)(result + 232) * v20) >> 32;
        v29 = v91;
        v27 = v89 | v21;
        v28 = v19 + 0x1000000;
        v26 = 512;
      }
      if (a2 >= v29)
        break;
      v30 = *(_QWORD *)(result + 192);
      v31 = v29 - *(_QWORD *)(result + 200);
      v32 = a2 - v31 + (v30 >> 1);
      if (v32 >= 1)
      {
        if (v32 < v30)
          v27 = ((v27 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v32) >> 32) >> 15)) | v89;
        v33 = v31 + 0x1000000;
        v34 = 32;
        goto LABEL_29;
      }
LABEL_43:
      --a4;
      a2 += v10;
      a3 += v9;
      v11 += 8;
      *(_BYTE *)++v12 = 0;
      if (!a4)
        return result;
    }
    if (a2 <= v90)
    {
      v34 = ((unint64_t)a2 >> 26) & 0x3C;
      v33 = a2;
      goto LABEL_29;
    }
    v35 = *(_QWORD *)(result + 192);
    v36 = *(_QWORD *)(result + 200) + v90;
    v37 = v36 - a2 + (v35 >> 1);
    if (v37 < 1)
      goto LABEL_43;
    if (v37 < v35)
      v27 = ((v27 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v37) >> 32) >> 15)) | v89;
    v33 = v36 - 0x1000000;
    v34 = 28;
LABEL_29:
    if (v27 < 0x400000)
      goto LABEL_43;
    v38 = v28 >> 32;
    v39 = v33 >> 32;
    v40 = v4 + (int)v38 * (uint64_t)v6;
    v41 = v40 + 4 * v39;
    v42 = *(unsigned int **)(result + 32);
    if (v17 >= v41)
      v43 = (unsigned int *)(v40 + 4 * v39);
    else
      v43 = (unsigned int *)v17;
    if (v43 < v42)
      v43 = *(unsigned int **)(result + 32);
    v44 = *v43;
    if (v5)
    {
      v45 = v5 + (int)v38 * (uint64_t)v7 + v39;
      v46 = *(unsigned __int8 **)(result + 40);
      if ((unint64_t)v16 >= v45)
        v47 = (unsigned __int8 *)v45;
      else
        v47 = v16;
      if (v47 >= v46)
        v46 = v47;
      v44 |= (unint64_t)*v46 << 32;
      if (!v8)
        goto LABEL_104;
    }
    else
    {
      v45 = 0;
      if (!v8)
        goto LABEL_104;
    }
    v48 = *(_DWORD *)(v8 + (v34 | v26));
LABEL_48:
    v49 = v48 & 0xF;
    v50 = HIBYTE(v48) & 3;
    switch(v49)
    {
      case 1:
        v70 = (unsigned int *)(v41 + SBYTE1(v48) * (uint64_t)v6);
        if (v17 < (unint64_t)v70)
          v70 = (unsigned int *)v17;
        if (v70 < v42)
          v70 = v42;
        v71 = *v70;
        if (v5)
        {
          v72 = (unsigned __int8 *)(v45 + SBYTE1(v48) * (uint64_t)v7);
          if (v16 < v72)
            v72 = v16;
          if ((unint64_t)v72 < *(_QWORD *)(result + 40))
            v72 = *(unsigned __int8 **)(result + 40);
          v71 |= (unint64_t)*v72 << 32;
        }
        v73 = interpolate_cif10a[v50];
        v74 = v50 + 1;
        v68 = v44 - ((v73 & v44) >> v74);
        v75 = (v73 & v71) >> v74;
        goto LABEL_103;
      case 2:
        v76 = (unsigned int *)(v41 + ((uint64_t)((unint64_t)HIWORD(v48) << 56) >> 54));
        if (v17 < (unint64_t)v76)
          v76 = (unsigned int *)v17;
        if (v76 < v42)
          v76 = v42;
        v77 = *v76;
        if (v5)
        {
          v78 = (unsigned __int8 *)(v45 + SBYTE2(v48));
          if (v16 < v78)
            v78 = v16;
          if ((unint64_t)v78 < *(_QWORD *)(result + 40))
            v78 = *(unsigned __int8 **)(result + 40);
          v77 |= (unint64_t)*v78 << 32;
        }
        v79 = (v48 >> 28) & 3;
        v80 = interpolate_cif10a[v79];
        v67 = v79 + 1;
        v68 = v44 - ((v80 & v44) >> v67);
        v69 = v80 & v77;
        goto LABEL_102;
      case 3:
        v51 = (unint64_t)HIWORD(v48) << 56;
        v52 = (unsigned int *)(v41 + (v51 >> 54));
        if (v17 < (unint64_t)v52)
          v52 = (unsigned int *)v17;
        if (v52 < v42)
          v52 = v42;
        v53 = *v52;
        v54 = v41 + SBYTE1(v48) * (uint64_t)v6;
        if (v17 >= v54)
          v55 = (unsigned int *)(v41 + SBYTE1(v48) * (uint64_t)v6);
        else
          v55 = (unsigned int *)v17;
        if (v55 < v42)
          v55 = v42;
        v88 = *v55;
        v56 = (unsigned int *)(v54 + (v51 >> 54));
        if (v17 < (unint64_t)v56)
          v56 = (unsigned int *)v17;
        if (v56 < v42)
          v56 = v42;
        v57 = *v56;
        if (v5)
        {
          v58 = (unsigned __int8 *)(v45 + SBYTE2(v48));
          v59 = *(_QWORD *)(result + 40);
          if (v16 < v58)
            v58 = v16;
          if ((unint64_t)v58 < v59)
            v58 = *(unsigned __int8 **)(result + 40);
          v53 |= (unint64_t)*v58 << 32;
          v60 = v45 + SBYTE1(v48) * (uint64_t)v7;
          if ((unint64_t)v16 >= v60)
            v61 = (unsigned __int8 *)(v45 + SBYTE1(v48) * (uint64_t)v7);
          else
            v61 = v16;
          if ((unint64_t)v61 < v59)
            v61 = *(unsigned __int8 **)(result + 40);
          v88 |= (unint64_t)*v61 << 32;
          v62 = (unsigned __int8 *)(v60 + SBYTE2(v48));
          if (v16 < v62)
            v62 = v16;
          if ((unint64_t)v62 < v59)
            v62 = *(unsigned __int8 **)(result + 40);
          v57 |= (unint64_t)*v62 << 32;
        }
        v63 = interpolate_cif10a[v50];
        v64 = v44 - ((v63 & v44) >> (v50 + 1)) + ((v63 & v88) >> (v50 + 1));
        v65 = v53 - ((v63 & v53) >> (v50 + 1)) + ((v63 & v57) >> (v50 + 1));
        LODWORD(v63) = (v48 >> 28) & 3;
        v66 = interpolate_cif10a[v63];
        v67 = v63 + 1;
        v68 = v64 - ((v64 & v66) >> v67);
        v69 = v65 & v66;
LABEL_102:
        v75 = v69 >> v67;
LABEL_103:
        v44 = v68 + v75;
        break;
    }
LABEL_104:
    *(_QWORD *)(v11 + 8) = v44 | v13;
    *(_BYTE *)(v12 + 1) = v27 >> 22;
    if (a4 == 1)
      break;
    v81 = 0;
    a2 += v10;
    v82 = v90 - a2;
    a3 += v9;
    v83 = v92 - a3;
    v84 = -8;
    while (((v83 | v82 | (a3 - v93) | (a2 - v91)) & 0x8000000000000000) == 0)
    {
      v41 = v4 + SHIDWORD(a3) * (uint64_t)v6 + 4 * (a2 >> 32);
      v42 = *(unsigned int **)(result + 32);
      if (v17 >= v41)
        v85 = (unsigned int *)(v4 + SHIDWORD(a3) * (uint64_t)v6 + 4 * (a2 >> 32));
      else
        v85 = (unsigned int *)v17;
      if (v85 < v42)
        v85 = *(unsigned int **)(result + 32);
      v44 = *v85;
      if (v5)
      {
        v45 = v5 + SHIDWORD(a3) * (uint64_t)v7 + (a2 >> 32);
        v86 = *(unsigned __int8 **)(result + 40);
        if ((unint64_t)v16 >= v45)
          v87 = v5 + SHIDWORD(a3) * (uint64_t)v7 + (a2 >> 32);
        else
          v87 = (unint64_t)v16;
        if (v87 >= (unint64_t)v86)
          v86 = (unsigned __int8 *)v87;
        v44 |= (unint64_t)*v86 << 32;
      }
      if (v8)
      {
        v48 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        if ((v48 & 0xF) != 0)
        {
          v12 += v81 + 1;
          v11 -= v84;
          a4 += ~(_DWORD)v81;
          v27 = -1;
          goto LABEL_48;
        }
      }
      *(_QWORD *)(v11 + 8 * v81 + 16) = v44 | v13;
      *(_BYTE *)(v12 + v81++ + 2) = -1;
      v84 -= 8;
      a2 += v10;
      v82 -= v10;
      a3 += v9;
      v83 -= v9;
      if (a4 - 1 == (_DWORD)v81)
        return result;
    }
    v12 += v81 + 1;
    v11 -= v84;
    a4 += ~(_DWORD)v81;
  }
  while (a4);
  return result;
}

char *CIF10_pattern(uint64_t a1, char *a2, unsigned int a3, int a4, float *a5, float a6)
{
  float *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  int v14;
  int v15;
  int v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unint64_t *v37;
  float v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  int v47;
  float v48;
  float v49;
  float v50;

  v9 = *(float **)(*(_QWORD *)a1 + 64);
  v10 = *v9;
  v11 = v9[1];
  v12 = v9[4];
  if (a2 && a3 > 7 || (a2 = (char *)malloc_type_malloc(0x34uLL, 0x705560E0uLL)) != 0)
  {
    if (v10 > a6)
      v13 = v10;
    else
      v13 = a6;
    if (v11 < a6)
      v13 = v11;
    if (a5)
      v14 = a4;
    else
      v14 = 0;
    if (v14 == 1)
    {
      if (*a5 <= v11)
      {
        v11 = *a5;
        if (*a5 < v10)
          v11 = v10;
      }
      v15 = (int)(float)(v12 + (float)(v11 * v13));
      v16 = v15;
      v17 = v15;
      goto LABEL_62;
    }
    if (v14 == 4)
    {
      v23 = a5[4];
      if (v23 < v10)
        v24 = v10;
      else
        v24 = a5[4];
      if (v23 <= v11)
        v25 = v24;
      else
        v25 = v11;
      v26 = a5[1];
      if (*a5 < v10)
        v27 = v10;
      else
        v27 = *a5;
      if (*a5 <= v11)
        v28 = v27;
      else
        v28 = v11;
      v29 = v11;
      if (v26 <= v11)
      {
        v29 = a5[1];
        if (v26 < v10)
          v29 = v10;
      }
      v30 = a5[2];
      v31 = v11;
      if (v30 <= v11)
      {
        v31 = a5[2];
        if (v30 < v10)
          v31 = v10;
      }
      v32 = (float)(v11 - v28) - v25;
      v33 = (float)(v11 - v29) - v25;
      v34 = (float)(v11 - v31) - v25;
      if (v32 >= v10)
        v35 = v12 + (float)(v32 * v13);
      else
        v35 = v10;
      if (v33 >= v10)
        v36 = v12 + (float)(v33 * v13);
      else
        v36 = v10;
      if (v34 >= v10)
        v22 = v12 + (float)(v34 * v13);
      else
        v22 = v10;
      v15 = (int)v35;
      v16 = (int)v36;
    }
    else
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      if (v14 != 3)
      {
LABEL_62:
        *(_OWORD *)a2 = xmmword_1850051A0;
        *((_DWORD *)a2 + 6) = 0;
        *((_QWORD *)a2 + 2) = 1;
        v37 = (unint64_t *)(a2 + 48);
        v38 = v9[2];
        v39 = (int)(float)(v12 + (float)(v13 * v9[3]));
        v40 = v38 * (float)v15;
        if (v40 < 0.0)
          v41 = 0.0;
        else
          v41 = v38 * (float)v15;
        if (v40 <= 1023.0)
          v42 = v41;
        else
          v42 = 1023.0;
        v43 = (int)v42;
        v44 = v38 * (float)v16;
        if (v44 < 0.0)
          v45 = 0.0;
        else
          v45 = v38 * (float)v16;
        if (v44 <= 1023.0)
          v46 = v45;
        else
          v46 = 1023.0;
        v47 = (int)v46;
        *((_QWORD *)a2 + 4) = v37;
        v48 = v38 * (float)v17;
        if (v48 < 0.0)
          v49 = 0.0;
        else
          v49 = v38 * (float)v17;
        if (v48 <= 1023.0)
          v50 = v49;
        else
          v50 = 1023.0;
        *v37 = (v43 << 52) | ((unint64_t)((int)v50 & 0x3FF | ((unsigned __int16)(v47 & 0x3FF) << 10)) << 32) | v39 | 0xC000000000000000;
        if ((_DWORD)v39 == 255)
        {
          *((_QWORD *)a2 + 5) = 0;
        }
        else
        {
          *((_DWORD *)a2 + 14) = v39;
          *((_QWORD *)a2 + 5) = a2 + 56;
        }
        return a2;
      }
      v18 = a5[1];
      if (*a5 < v10)
        v19 = v10;
      else
        v19 = *a5;
      if (*a5 > v11)
        v19 = v11;
      if (v18 < v10)
        v20 = v10;
      else
        v20 = a5[1];
      if (v18 > v11)
        v20 = v11;
      v21 = a5[2];
      if (v21 <= v11)
      {
        v11 = a5[2];
        if (v21 < v10)
          v11 = v10;
      }
      v15 = (int)(float)(v12 + (float)(v19 * v13));
      v16 = (int)(float)(v12 + (float)(v20 * v13));
      v22 = v12 + (float)(v11 * v13);
    }
    v17 = (int)v22;
    goto LABEL_62;
  }
  return a2;
}

uint64_t CIF10_mark(uint64_t a1, __n128 a2)
{
  return CIF10_mark_inner(*(_QWORD *)(*(_QWORD *)a1 + 56), a2);
}

uint64_t CIF10_mark_inner(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  unint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  int64x2_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint16x4_t *v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  size_t v30;
  _BYTE *v31;
  _BYTE *v32;
  unsigned __int32 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint32x4_t *v50;
  unint64_t v51;
  double v52;
  double v53;
  int64x2_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  void *v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unsigned int *v74;
  int v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  char *v84;
  int v85;
  uint64_t v86;
  int64x2_t v87;
  int32x2_t v88;
  int v89;
  unsigned int v90;
  int64x2_t v91;
  int64x2_t v92;
  unsigned __int32 v93;
  int64x2_t v94;
  unsigned __int32 v95;
  int64x2_t v96;
  unsigned __int32 v97;
  int64x2_t v98;
  unsigned int v99;
  uint32x2_t v100;
  int64x2_t v101;
  unint64_t v102;
  int64x2_t v103;
  int32x2_t v104;
  int v105;
  unsigned int v106;
  uint32x2_t v107;
  int8x8_t v108;
  unsigned __int32 v109;
  int32x2_t v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  uint32x2_t v114;
  int8x8_t v115;
  unsigned __int32 v116;
  int32x2_t v117;
  int32x2_t v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  uint32x2_t v123;
  uint32x2_t v124;
  int32x2_t v125;
  int8x8_t v126;
  int32x2_t v127;
  int v128;
  uint64_t v129;
  __int8 v130;
  unsigned int v131;
  uint32x2_t v132;
  int64x2_t v133;
  unint64_t v134;
  int8x8_t v135;
  unint64_t v136;
  int64x2_t v137;
  int64x2_t v138;
  int32x2_t v139;
  int v140;
  uint32x2_t v141;
  int8x8_t v142;
  unsigned int v143;
  int32x2_t v144;
  int v145;
  uint32x2_t v146;
  int8x8_t v147;
  unsigned int v148;
  int32x2_t v149;
  int32x2_t v150;
  int v151;
  int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  uint32x2_t v156;
  uint32x2_t v157;
  int32x2_t v158;
  int32x2_t v159;
  int32x2_t v160;
  int v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  uint32x2_t v166;
  uint32x2_t v167;
  int32x2_t v168;
  int32x2_t v169;
  int v170;
  int v171;
  unsigned int v172;
  unsigned int v173;
  int32x2_t v174;
  int32x2_t v175;
  int v176;
  int v177;
  unsigned int v178;
  unsigned int v179;
  int32x2_t v180;
  int v181;
  unint64_t v182;
  int v183;
  unint64_t v184;
  int v185;
  unint64_t v186;
  int v187;
  unint64_t v188;
  int v189;
  unint64_t v190;
  int v191;
  unint64_t v192;
  int v193;
  unint64_t v194;
  int v195;
  unint64_t v196;
  int v197;
  unint64_t v198;
  int v199;
  unint64_t v200;
  int v201;
  unint64_t v202;
  int v203;
  unint64_t v204;
  int v205;
  unint64_t v206;
  int v207;
  unint64_t v208;
  int v209;
  unint64_t v210;
  int32x4_t v211;
  int32x4_t v212;
  int8x16_t v213;
  int32x4_t v214;
  int32x4_t v215;
  int32x4_t v216;
  int8x16_t v222;
  int v223;
  unsigned int v224;
  uint32x4_t v225;
  uint32x4_t v226;
  uint32x4_t v227;
  unsigned int v228;
  uint32x2_t v229;
  int8x8_t v230;
  int v231;
  unsigned int v232;
  uint32x2_t v233;
  int8x8_t v234;
  int v235;
  unsigned int v236;
  uint32x2_t v237;
  int8x8_t v238;
  int v239;
  unsigned int v240;
  unsigned int v241;
  int32x2_t v242;
  int v243;
  unsigned int v244;
  unsigned int v245;
  int32x2_t v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  _BYTE *v250;
  unsigned int v251;
  uint64_t v252;
  char *v253;
  int v254;
  int v255;
  uint64_t v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  uint64_t v267;
  __int8 v268;
  uint32x2_t v269;
  int64x2_t v270;
  unint64_t v271;
  int8x8_t v272;
  unint64_t v273;
  int64x2_t v274;
  int64x2_t v275;
  unsigned int *v276;
  uint64_t v277;
  unsigned int *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unsigned int *v282;
  int v283;
  unsigned int v284;
  unsigned int v285;
  uint32x2_t v286;
  int8x8_t v287;
  unsigned int *v288;
  uint64_t v289;
  unsigned int *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  unsigned int v295;
  int v296;
  unsigned int v297;
  uint32x2_t v298;
  int8x8_t v299;
  unsigned __int32 v300;
  unsigned int *v301;
  uint64_t v302;
  unsigned int *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  int v308;
  unsigned int v309;
  int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  uint32x2_t v315;
  uint32x2_t v316;
  int32x2_t v317;
  unsigned int *v318;
  uint64_t v319;
  unsigned int *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  char v326;
  int v327;
  unsigned int v328;
  uint32x2_t v329;
  int64x2_t v330;
  unint64_t v331;
  int8x8_t v332;
  unint64_t v333;
  int64x2_t v334;
  int64x2_t v335;
  unsigned int *v336;
  uint64_t v337;
  unsigned int *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  int v342;
  unsigned int v343;
  unsigned int v344;
  uint32x2_t v345;
  int8x8_t v346;
  unsigned int *v347;
  uint64_t v348;
  unsigned int *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  unsigned int v354;
  unsigned int v355;
  uint32x2_t v356;
  int8x8_t v357;
  unsigned int *v358;
  uint64_t v359;
  unsigned int *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  int v365;
  int v366;
  unsigned int v367;
  unsigned int v368;
  unsigned int v369;
  unsigned int v370;
  uint32x2_t v371;
  uint32x2_t v372;
  int32x2_t v373;
  unsigned int *v374;
  uint64_t v375;
  unsigned int *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  int v381;
  int v382;
  int v383;
  unsigned int v384;
  unsigned int v385;
  unsigned int v386;
  unsigned int v387;
  unsigned int v388;
  uint32x2_t v389;
  uint32x2_t v390;
  int32x2_t v391;
  unsigned int *v392;
  uint64_t v393;
  unsigned int *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  int v398;
  int v399;
  int8x8_t v400;
  int8x8_t v401;
  unsigned int v402;
  unsigned int v403;
  int32x2_t v404;
  unsigned int *v405;
  uint64_t v406;
  unsigned int *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  int v411;
  int v412;
  int8x8_t v413;
  int8x8_t v414;
  unsigned int v415;
  unsigned int v416;
  int32x2_t v417;
  unsigned int *v418;
  uint64_t v419;
  unsigned int *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  int v425;
  unint64_t v426;
  int v427;
  unint64_t v428;
  unint64_t v429;
  unsigned int *v430;
  uint64_t v431;
  unsigned int *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  int v437;
  unint64_t v438;
  int v439;
  unint64_t v440;
  unint64_t v441;
  unsigned int *v442;
  uint64_t v443;
  unsigned int *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  int v449;
  unint64_t v450;
  int v451;
  unint64_t v452;
  unint64_t v453;
  unsigned int *v454;
  uint64_t v455;
  unsigned int *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  int v461;
  unint64_t v462;
  unsigned int v463;
  unint64_t v464;
  unint64_t v465;
  unsigned int *v466;
  uint64_t v467;
  unsigned int *v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  int v473;
  unint64_t v474;
  unsigned int v475;
  unint64_t v476;
  unint64_t v477;
  unsigned int *v478;
  uint64_t v479;
  unsigned int *v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  int v485;
  unint64_t v486;
  int v487;
  unint64_t v488;
  unint64_t v489;
  unsigned int *v490;
  uint64_t v491;
  unsigned int *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  int v497;
  unint64_t v498;
  int v499;
  unint64_t v500;
  unint64_t v501;
  unsigned int *v502;
  uint64_t v503;
  unsigned int *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  int v509;
  unint64_t v510;
  int v511;
  unint64_t v512;
  unint64_t v513;
  unsigned int *v514;
  uint64_t v515;
  unsigned int *v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  int v521;
  unint64_t v522;
  int v523;
  unint64_t v524;
  unint64_t v525;
  unsigned int *v526;
  uint64_t v527;
  unsigned int *v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  int v533;
  unint64_t v534;
  unsigned int v535;
  unint64_t v536;
  unint64_t v537;
  unsigned int *v538;
  uint64_t v539;
  unsigned int *v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  int v545;
  unint64_t v546;
  int v547;
  unint64_t v548;
  unint64_t v549;
  unsigned int *v550;
  uint64_t v551;
  unsigned int *v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  int v557;
  unint64_t v558;
  int v559;
  unint64_t v560;
  unint64_t v561;
  unsigned int *v562;
  uint64_t v563;
  unsigned int *v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  int v569;
  unint64_t v570;
  int v571;
  unint64_t v572;
  unint64_t v573;
  unsigned int *v574;
  uint64_t v575;
  unsigned int *v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  int v581;
  unint64_t v582;
  unsigned int v583;
  unsigned int v584;
  unint64_t v585;
  unint64_t v586;
  unsigned int *v587;
  uint64_t v588;
  unsigned int *v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  int v594;
  unint64_t v595;
  unsigned int v596;
  unint64_t v597;
  unint64_t v598;
  unsigned int *v599;
  uint64_t v600;
  unsigned int *v601;
  uint64_t v602;
  uint64_t v603;
  int v604;
  int v605;
  unsigned int v606;
  unsigned int v607;
  uint32x2_t v608;
  int8x8_t v609;
  unsigned int *v610;
  uint64_t v611;
  unsigned int *v612;
  uint64_t v613;
  uint64_t v614;
  int v615;
  unsigned int v616;
  uint32x2_t v617;
  int8x8_t v618;
  unsigned int *v619;
  uint64_t v620;
  unsigned int *v621;
  uint64_t v622;
  uint64_t v623;
  int v624;
  unsigned int v625;
  uint32x2_t v626;
  int8x8_t v627;
  unsigned int *v628;
  uint64_t v629;
  unsigned int *v630;
  uint64_t v631;
  uint64_t v632;
  int v633;
  unsigned int v634;
  uint32x2_t v635;
  int8x8_t v636;
  unsigned int *v637;
  uint64_t v638;
  unsigned int *v639;
  uint64_t v640;
  uint64_t v641;
  int v642;
  unsigned int v643;
  int32x2_t v644;
  unsigned int *v645;
  uint64_t v646;
  unsigned int *v647;
  uint64_t v648;
  uint64_t v649;
  int v650;
  unsigned int v651;
  int32x2_t v652;
  unsigned int *v653;
  uint64_t v654;
  unsigned int *v655;
  uint64_t v656;
  uint64_t v657;
  int v658;
  int v659;
  unint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint8x8_t v664;
  int v665;
  unsigned int v666;
  uint64_t v667;
  uint64_t v668;
  unsigned int *v669;
  int v670;
  unsigned int *v671;
  uint64_t v672;
  unsigned int *v673;
  uint64_t v674;
  uint64_t v675;
  unsigned int *v676;
  int v677;
  unsigned int *v678;
  uint64_t v679;
  unsigned int *v680;
  uint64_t v681;
  uint64_t v682;
  int v683;
  unsigned int *v684;
  uint64_t v685;
  unsigned int *v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  char *v690;
  int v691;
  unint64_t v692;
  uint64_t v693;
  int v694;
  uint64_t v695;
  char *v696;
  uint64_t v697;
  char *v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  char *v704;
  uint64_t v705;
  uint64_t v706;
  unint64_t v707;
  int v708;
  int v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  char *v727;
  char *v728;
  uint64_t v729;
  uint64_t v730;
  unint64_t v731;
  char *v732;
  uint64_t v733;
  int v734;
  uint64_t v735;
  int v736;
  int v737;
  uint64_t v738;
  unint64_t v739;
  uint64_t v740;
  unsigned __int8 *v741;
  unint64_t v742;
  unint64_t v743;
  char *v744;
  unsigned __int8 v745;
  unint64_t v746;
  uint64_t v747;
  uint64_t v748;
  unint64_t v749;
  unsigned int *v750;
  unsigned int v751;
  uint64_t v752;
  int v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  int v757[4];
  __int128 v758;
  __int128 v759;
  __int128 v760;
  __int128 v761;
  __int128 v762;
  __int128 v763;
  __int128 v764;
  __int128 v765;
  __int128 v766;
  _DWORD v767[1024];
  uint64_t v768;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v768 = *MEMORY[0x1E0C80C00];
  v9 = *(char **)(v3 + 96);
  v10 = *(_QWORD *)(v3 + 48);
  v11 = *(unsigned int *)(v2 + 16 * *(_DWORD *)v3 + 8 * (v9 == 0) + 4 * (v10 == 0));
  if ((int)v11 > 27)
    return 0xFFFFFFFFLL;
  v13 = v3;
  v14 = *(unsigned int *)(v3 + 4);
  v15 = v14 - 1;
  if ((int)v14 < 1)
    return 0;
  v16 = *(_DWORD *)(v3 + 8);
  v17 = (v16 - 1);
  if (v16 < 1)
    return 0;
  v18 = *(uint16x4_t **)(v3 + 136);
  if ((*(_DWORD *)v3 & 0xFF0000) == 0x50000 || !v18)
  {
    v20 = *(_DWORD *)v3 & 0xFF00;
    v735 = v11;
    if (v20 == 1024)
    {
      v767[0] = *(_DWORD *)(v3 + 4);
      v757[0] = v16;
      if (v9)
        v21 = *v9;
      else
        v21 = 255;
      v33 = *(_DWORD *)(*(_QWORD *)(v3 + 88) + 4);
      v35 = *(int *)(v3 + 12);
      v34 = *(int *)(v3 + 16);
      v36 = (unint64_t)*(int *)(v3 + 28) >> 2;
      v37 = v11;
      if (v10)
      {
        v38 = *(int *)(v3 + 32);
        v39 = (char *)(v10 + v35 + (int)v38 * (uint64_t)(int)v34);
        v751 = 1;
      }
      else
      {
        v39 = 0;
        v38 = 0;
        v751 = 0;
      }
      v745 = ~(_BYTE)v21;
      v747 = v38;
      v749 = (unint64_t)*(int *)(v3 + 28) >> 2;
      v752 = *(_QWORD *)(v3 + 40) + 4 * (v35 + v34 * v36);
      if (!v18)
      {
        v754 = 0;
        if (v10)
          v49 = v14;
        else
          v49 = 0;
        v48 = v38 - v49;
        v47 = v39;
        v50 = (uint32x4_t *)(*(_QWORD *)(v3 + 40) + 4 * (v35 + v34 * v36));
        v51 = v14;
        goto LABEL_66;
      }
      shape_enum_clip_alloc(v14, v3, (int *)v18, 1, 1, 1, *(_DWORD *)(v3 + 104), *(_DWORD *)(v3 + 108), v14, v16);
      v46 = v45;
      v47 = v39;
      v48 = v38;
      if (!v45)
        return 1;
      while (shape_enum_clip_next(v46, (int *)&v756 + 1, &v756, v767, v757))
      {
        v754 = v46;
        v50 = (uint32x4_t *)(v752 + 4 * v36 * (int)v756 + 4 * SHIDWORD(v756));
        v51 = v767[0];
        if (v10)
        {
          v47 = &v39[(int)v38 * (uint64_t)(int)v756 + SHIDWORD(v756)];
          v48 = v38 - v767[0];
        }
        LODWORD(v14) = v767[0];
LABEL_66:
        v78 = v37;
        v79 = v36 - v51;
        switch((int)v78)
        {
          case 0:
          case 1:
            v744 = v39;
            v80 = v38;
            v81 = v79 + (int)v14;
            v82 = v757[0];
            v83 = v757[0] - 1;
            v84 = &v50->i8[4 * ((v81 * v83) & (v81 >> 63))];
            if (v81 < 0)
              v81 = -v81;
            v85 = v14;
            CGBlt_fillBytes(4 * v14, v757[0], v33, v84, 4 * v81);
            if (v10)
            {
              v86 = v48 + v85;
              v47 += (v86 * v83) & (v86 >> 63);
              if (v86 >= 0)
                v48 += v85;
              else
                v48 = -v86;
              CGBlt_fillBytes(v85, v82, v33, v47, v48);
            }
            v37 = v735;
            v38 = v80;
            v39 = v744;
            break;
          case 2:
            if (v10)
            {
              v87.i64[0] = v21 | ((unint64_t)((v33 >> 20) & 0x3FF) << 32);
              v87.i64[1] = (v33 >> 10) & 0x3FF | ((unint64_t)(v33 & 0x3FF) << 32);
              v88 = vdup_n_s32(v745);
              do
              {
                v89 = v767[0];
                if (v767[0] >= 4)
                {
                  v90 = (v767[0] >> 2) + 1;
                  do
                  {
                    v91.i32[0] = (*v47 * v745 + ((*v47 * v745) >> 8) + 1) >> 8;
                    v91.i32[1] = ((((unsigned __int32)v50->i32[0] >> 20) & 0x3FF) * v745
                                + (((((unsigned __int32)v50->i32[0] >> 20) & 0x3FF) * v745) >> 8)
                                + 1) >> 8;
                    v91.i32[2] = ((((unsigned __int32)v50->i32[0] >> 10) & 0x3FF) * v745
                                + (((((unsigned __int32)v50->i32[0] >> 10) & 0x3FF) * v745) >> 8)
                                + 1) >> 8;
                    v91.i32[3] = ((v50->i32[0] & 0x3FF) * v745 + (((v50->i32[0] & 0x3FF) * v745) >> 8) + 1) >> 8;
                    v92 = vaddq_s64(v91, v87);
                    v50->i32[0] = ((unint64_t)v92.i64[0] >> 12) & 0x3FF00000 | v92.i16[6] & 0x3FF | ((v92.i16[4] & 0x3FF) << 10) | 0xC0000000;
                    *v47 = v92.i8[0];
                    v93 = v50->u32[1];
                    v92.i64[0] = ((v47[1] * v745
                                 + ((v47[1] * v745) >> 8)
                                 + 1) >> 8) | ((unint64_t)((((v93 >> 20) & 0x3FF) * v745
                                                                 + ((((v93 >> 20) & 0x3FF) * v745) >> 8)
                                                                 + 1) >> 8) << 32);
                    v92.i64[1] = ((((v93 >> 10) & 0x3FF) * v745 + ((((v93 >> 10) & 0x3FF) * v745) >> 8) + 1) >> 8) | ((unint64_t)(((v93 & 0x3FF) * v745 + (((v93 & 0x3FF) * v745) >> 8) + 1) >> 8) << 32);
                    v94 = vaddq_s64(v92, v87);
                    v50->i32[1] = ((unint64_t)v94.i64[0] >> 12) & 0x3FF00000 | v94.i16[6] & 0x3FF | ((v94.i16[4] & 0x3FF) << 10) | 0xC0000000;
                    v47[1] = v94.i8[0];
                    v95 = v50->u32[2];
                    v94.i64[0] = ((v47[2] * v745
                                 + ((v47[2] * v745) >> 8)
                                 + 1) >> 8) | ((unint64_t)((((v95 >> 20) & 0x3FF) * v745
                                                                 + ((((v95 >> 20) & 0x3FF) * v745) >> 8)
                                                                 + 1) >> 8) << 32);
                    v94.i64[1] = ((((v95 >> 10) & 0x3FF) * v745 + ((((v95 >> 10) & 0x3FF) * v745) >> 8) + 1) >> 8) | ((unint64_t)(((v95 & 0x3FF) * v745 + (((v95 & 0x3FF) * v745) >> 8) + 1) >> 8) << 32);
                    v96 = vaddq_s64(v94, v87);
                    v50->i32[2] = ((unint64_t)v96.i64[0] >> 12) & 0x3FF00000 | v96.i16[6] & 0x3FF | ((v96.i16[4] & 0x3FF) << 10) | 0xC0000000;
                    v47[2] = v96.i8[0];
                    v97 = v50->u32[3];
                    v96.i64[0] = ((v47[3] * v745
                                 + ((v47[3] * v745) >> 8)
                                 + 1) >> 8) | ((unint64_t)((((v97 >> 20) & 0x3FF) * v745
                                                                 + ((((v97 >> 20) & 0x3FF) * v745) >> 8)
                                                                 + 1) >> 8) << 32);
                    v96.i64[1] = ((((v97 >> 10) & 0x3FF) * v745 + ((((v97 >> 10) & 0x3FF) * v745) >> 8) + 1) >> 8) | ((unint64_t)(((v97 & 0x3FF) * v745 + (((v97 & 0x3FF) * v745) >> 8) + 1) >> 8) << 32);
                    v98 = vaddq_s64(v96, v87);
                    v50->i32[3] = ((unint64_t)v98.i64[0] >> 12) & 0x3FF00000 | v98.i16[6] & 0x3FF | ((v98.i16[4] & 0x3FF) << 10) | 0xC0000000;
                    v47[3] = v98.i8[0];
                    ++v50;
                    v47 += 4 * v751;
                    --v90;
                  }
                  while (v90 > 1);
                  v89 = v767[0] & 3;
                }
                if (v89 >= 1)
                {
                  v99 = v89 + 1;
                  do
                  {
                    v100 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v50->i32[0]), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), v88);
                    *(uint32x2_t *)v101.i8 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v100, v100, 8uLL), (int32x2_t)0x100000001), 8uLL);
                    v102 = v101.u32[0] | ((unint64_t)(((v50->i32[0] & 0x3FF) * v745
                                                            + (((v50->i32[0] & 0x3FF) * v745) >> 8)
                                                            + 1) >> 8) << 32);
                    v101.i32[0] = (*v47 * v745 + ((*v47 * v745) >> 8) + 1) >> 8;
                    v101.i64[1] = v102;
                    v103 = vaddq_s64(v101, v87);
                    v50->i32[0] = ((unint64_t)v103.i64[0] >> 12) & 0x3FF00000 | v103.i16[6] & 0x3FF | ((v103.i16[4] & 0x3FF) << 10) | 0xC0000000;
                    v50 = (uint32x4_t *)((char *)v50 + 4);
                    *v47 = v103.i8[0];
                    v47 += v751;
                    --v99;
                  }
                  while (v99 > 1);
                }
                v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
                v47 += v48;
                --v757[0];
              }
              while (v757[0]);
            }
            else
            {
              v211 = vdupq_n_s32(v745);
              v212 = vdupq_n_s32(v33 - 0x40000000);
              v213.i64[0] = 0x300000003;
              v213.i64[1] = 0x300000003;
              v214.i64[0] = 0x100000001;
              v214.i64[1] = 0x100000001;
              v215.i64[0] = 0x400000004;
              v215.i64[1] = 0x400000004;
              v216.i64[0] = 0x100000001000;
              v216.i64[1] = 0x100000001000;
              __asm { FMOV            V6.4S, #1.875 }
              v222 = (int8x16_t)vdupq_n_s32(0xFFC00u);
              do
              {
                v223 = v767[0];
                if (v767[0] >= 4)
                {
                  v224 = (v767[0] >> 2) + 1;
                  do
                  {
                    v225 = (uint32x4_t)vmulq_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(*v50, 0x14uLL) & __PAIR128__(0xFFFFF3FFFFFFF3FFLL, 0xFFFFF3FFFFFFF3FFLL)), v211);
                    v226 = (uint32x4_t)vmulq_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(*v50, 0xAuLL), v213), v211);
                    v227 = (uint32x4_t)vmulq_s32((int32x4_t)vandq_s8(*(int8x16_t *)v50, v213), v211);
                    *(int32x4_t *)v50++ = vaddq_s32((int32x4_t)vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vaddq_s32(vshlq_n_s32((int32x4_t)vsraq_n_u32(v225, v225, 8uLL), 0xCuLL), v216), _Q6), (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(v227, v227, 8uLL), v214), 8uLL)), vandq_s8((int8x16_t)vaddq_s32(
                                                                        vshlq_n_s32((int32x4_t)vsraq_n_u32(v226, v226, 8uLL), 2uLL), v215), v222)), v212);
                    v47 += 4 * v751;
                    --v224;
                  }
                  while (v224 > 1);
                  v223 &= 3u;
                }
                if (v223 >= 1)
                {
                  v228 = v223 + 1;
                  do
                  {
                    v229 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v50->i32[0]), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), *(int32x2_t *)v211.i8);
                    v230 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v229, v229, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                    v50->i32[0] = (v230.i32[0] | (((v50->i32[0] & 0x3FF) * v745
                                                 + (((v50->i32[0] & 0x3FF) * v745) >> 8)
                                                 + 1) >> 8) | v230.i32[1])
                                + v33
                                - 0x40000000;
                    v50 = (uint32x4_t *)((char *)v50 + 4);
                    --v228;
                  }
                  while (v228 > 1);
                  v47 += v223 * v751;
                }
                v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
                v47 += v48;
                --v757[0];
              }
              while (v757[0]);
            }
            goto LABEL_351;
          case 3:
            v104 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v33), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003);
            do
            {
              v105 = v767[0];
              do
              {
                v106 = *v47;
                if (v106 == 255)
                {
                  v50->i32[0] = v33;
                  LOBYTE(v106) = v21;
                }
                else if (*v47)
                {
                  v107 = (uint32x2_t)vmul_s32(v104, vdup_n_s32(v106));
                  v108 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v107, v107, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                  v109 = v108.i32[0] | (((v33 & 0x3FF) * v106 + (((v33 & 0x3FF) * v106) >> 8) + 1) >> 8);
                  v106 = (v106 * v21 + ((v106 * v21) >> 8) + 1) >> 8;
                  v50->i32[0] = v109 | v108.i32[1] | 0xC0000000;
                }
                else
                {
                  v50->i32[0] = 0;
                }
                *v47 = v106;
                v50 = (uint32x4_t *)((char *)v50 + 4);
                v47 += v751;
                --v105;
              }
              while (v105);
              v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
              v47 += v48;
              --v757[0];
            }
            while (v757[0]);
            goto LABEL_351;
          case 4:
            v110 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v33), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003);
            do
            {
              v111 = v767[0];
              do
              {
                if (~*v47 == 255)
                {
                  v50->i32[0] = v33;
                  LOBYTE(v112) = v21;
                }
                else if (*v47 == -1)
                {
                  LOBYTE(v112) = 0;
                  v50->i32[0] = 0;
                }
                else
                {
                  v113 = ~*v47;
                  v114 = (uint32x2_t)vmul_s32(v110, vdup_n_s32(v113));
                  v115 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v114, v114, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                  v116 = v115.i32[0] | (((v33 & 0x3FF) * v113 + (((v33 & 0x3FF) * v113) >> 8) + 1) >> 8);
                  v112 = (v113 * v21 + ((v113 * v21) >> 8) + 1) >> 8;
                  v50->i32[0] = v116 | v115.i32[1] | 0xC0000000;
                }
                *v47 = v112;
                v50 = (uint32x4_t *)((char *)v50 + 4);
                v47 += v751;
                --v111;
              }
              while (v111);
              v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
              v47 += v48;
              --v757[0];
            }
            while (v757[0]);
            goto LABEL_351;
          case 5:
            v117 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v33), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003);
            v118 = vdup_n_s32(v745);
            do
            {
              v119 = v767[0];
              do
              {
                v120 = *v47;
                v121 = ((v120 * v745 + ((v120 * v745) >> 8) + 1) >> 8) + ((v120 * v21 + ((v120 * v21) >> 8) + 1) >> 8);
                if (v121 >= 0xFF)
                  LOBYTE(v121) = -1;
                v122 = (((v50->i32[0] & 0x3FF) * v745 + (((v50->i32[0] & 0x3FF) * v745) >> 8) + 1) >> 8)
                     + (((v33 & 0x3FF) * v120 + (((v33 & 0x3FF) * v120) >> 8) + 1) >> 8);
                if (v122 >= 0x3FF)
                  v122 = 1023;
                v123 = (uint32x2_t)vmul_s32(v117, vdup_n_s32(v120));
                v124 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v50->i32[0]), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), v118);
                v125 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v124, v124, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v123, v123, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                v50->i32[0] = vorr_s8((int8x8_t)v125, (int8x8_t)vdup_lane_s32(v125, 1)).u32[0] | v122 | 0xC0000000;
                v50 = (uint32x4_t *)((char *)v50 + 4);
                *v47 = v121;
                v47 += v751;
                --v119;
              }
              while (v119);
              v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
              v47 += v48;
              --v757[0];
            }
            while (v757[0]);
            goto LABEL_351;
          case 6:
            v126.i32[0] = v33;
            v126.i32[1] = v33 >> 20;
            v127 = (int32x2_t)vand_s8(v126, (int8x8_t)0x300000003);
            do
            {
              v128 = v767[0];
              do
              {
                v129 = *v47;
                if ((_BYTE)v129 != 0xFF)
                {
                  if (~(_BYTE)v129 == 255)
                  {
                    v50->i32[0] = v33;
                    v130 = v21;
                  }
                  else
                  {
                    v131 = ~(_BYTE)v129;
                    v132 = (uint32x2_t)vmul_s32(v127, vdup_n_s32(v131));
                    *(uint32x2_t *)v133.i8 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v132, v132, 8uLL), (int32x2_t)0x100000001), 8uLL);
                    v134 = ((((v33 >> 10) & 0x3FF) * v131 + ((((v33 >> 10) & 0x3FF) * v131) >> 8) + 1) >> 8) | ((unint64_t)v133.u32[0] << 32);
                    v133.i32[0] = (v131 * v21 + ((v131 * v21) >> 8) + 1) >> 8;
                    v133.i64[1] = v134;
                    v135 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v50->i32[0]), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003);
                    v136 = v135.u32[0] | ((unint64_t)(v50->i32[0] & 0x3FF) << 32);
                    v137.i64[0] = v129 | ((unint64_t)v135.u32[1] << 32);
                    v137.i64[1] = v136;
                    v138 = vaddq_s64(v137, v133);
                    v130 = v138.i8[0];
                    v50->i32[0] = ((unint64_t)v138.i64[0] >> 12) & 0x3FF00000 | v138.i16[6] & 0x3FF | ((v138.i16[4] & 0x3FF) << 10) | 0xC0000000;
                  }
                  *v47 = v130;
                }
                v50 = (uint32x4_t *)((char *)v50 + 4);
                v47 += v751;
                --v128;
              }
              while (v128);
              v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
              v47 += v48;
              --v757[0];
            }
            while (v757[0]);
            goto LABEL_351;
          case 7:
            v139 = vdup_n_s32(v21);
            if (v10)
            {
              do
              {
                v140 = v767[0];
                do
                {
                  v141 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v50->i32[0]), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), v139);
                  v142 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v141, v141, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                  v143 = (*v47 * v21 + ((*v47 * v21) >> 8) + 1) >> 8;
                  v50->i32[0] = v142.i32[0] | (((v50->i32[0] & 0x3FF) * v21 + (((v50->i32[0] & 0x3FF) * v21) >> 8) + 1) >> 8) | v142.i32[1] | 0xC0000000;
                  v50 = (uint32x4_t *)((char *)v50 + 4);
                  *v47 = v143;
                  v47 += v751;
                  --v140;
                }
                while (v140);
                v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
                v47 += v48;
                --v757[0];
              }
              while (v757[0]);
            }
            else
            {
              do
              {
                v231 = v767[0];
                v232 = v767[0] - 1;
                do
                {
                  v233 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v50->i32[0]), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), v139);
                  v234 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v233, v233, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                  v50->i32[0] = v50->i32[0]
                              - (v234.i32[0] | (((v50->i32[0] & 0x3FF) * v21 + (((v50->i32[0] & 0x3FF) * v21) >> 8) + 1) >> 8) | v234.i32[1])
                              + 0x40000000;
                  v50 = (uint32x4_t *)((char *)v50 + 4);
                  --v231;
                }
                while (v231);
                v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
                v47 += v48 + v751 + v751 * (unint64_t)v232;
                --v757[0];
              }
              while (v757[0]);
            }
            goto LABEL_351;
          case 8:
            v144 = vdup_n_s32(v745);
            if (v10)
            {
              do
              {
                v145 = v767[0];
                do
                {
                  v146 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v50->i32[0]), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), v144);
                  v147 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v146, v146, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                  v148 = (*v47 * v745 + ((*v47 * v745) >> 8) + 1) >> 8;
                  v50->i32[0] = v147.i32[0] | (((v50->i32[0] & 0x3FF) * v745
                                              + (((v50->i32[0] & 0x3FF) * v745) >> 8)
                                              + 1) >> 8) | v147.i32[1] | 0xC0000000;
                  v50 = (uint32x4_t *)((char *)v50 + 4);
                  *v47 = v148;
                  v47 += v751;
                  --v145;
                }
                while (v145);
                v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
                v47 += v48;
                --v757[0];
              }
              while (v757[0]);
            }
            else
            {
              do
              {
                v235 = v767[0];
                v236 = v767[0] - 1;
                do
                {
                  v237 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v50->i32[0]), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), v144);
                  v238 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v237, v237, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                  v50->i32[0] = v50->i32[0]
                              - (v238.i32[0] | (((v50->i32[0] & 0x3FF) * v745
                                               + (((v50->i32[0] & 0x3FF) * v745) >> 8)
                                               + 1) >> 8) | v238.i32[1])
                              + 0x40000000;
                  v50 = (uint32x4_t *)((char *)v50 + 4);
                  --v235;
                }
                while (v235);
                v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
                v47 += v48 + v751 + v751 * (unint64_t)v236;
                --v757[0];
              }
              while (v757[0]);
            }
            goto LABEL_351;
          case 9:
            v149 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v33), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003);
            v150 = vdup_n_s32(v21);
            do
            {
              v151 = v767[0];
              do
              {
                v152 = *v47;
                v153 = v152 ^ 0xFF;
                v154 = ((v152 * v21 + ((v152 * v21) >> 8) + 1) >> 8) + ((v153 * v21 + ((v153 * v21) >> 8) + 1) >> 8);
                if (v154 >= 0xFF)
                  LOBYTE(v154) = -1;
                v155 = (((v50->i32[0] & 0x3FF) * v21 + (((v50->i32[0] & 0x3FF) * v21) >> 8) + 1) >> 8)
                     + (((v33 & 0x3FF) * v153 + (((v33 & 0x3FF) * v153) >> 8) + 1) >> 8);
                if (v155 >= 0x3FF)
                  v155 = 1023;
                v156 = (uint32x2_t)vmul_s32(v149, vdup_n_s32(v153));
                v157 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v50->i32[0]), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), v150);
                v158 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v157, v157, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v156, v156, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                v50->i32[0] = vorr_s8((int8x8_t)v158, (int8x8_t)vdup_lane_s32(v158, 1)).u32[0] | v155 | 0xC0000000;
                v50 = (uint32x4_t *)((char *)v50 + 4);
                *v47 = v154;
                v47 += v751;
                --v151;
              }
              while (v151);
              v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
              v47 += v48;
              --v757[0];
            }
            while (v757[0]);
            goto LABEL_351;
          case 10:
            v159 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v33), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003);
            v160 = vdup_n_s32(v745);
            do
            {
              v161 = v767[0];
              do
              {
                v162 = *v47;
                v163 = v162 ^ 0xFF;
                v164 = ((v162 * v745 + ((v162 * v745) >> 8) + 1) >> 8)
                     + ((v163 * v21 + ((v163 * v21) >> 8) + 1) >> 8);
                if (v164 >= 0xFF)
                  LOBYTE(v164) = -1;
                v165 = (((v50->i32[0] & 0x3FF) * v745 + (((v50->i32[0] & 0x3FF) * v745) >> 8) + 1) >> 8)
                     + (((v33 & 0x3FF) * v163 + (((v33 & 0x3FF) * v163) >> 8) + 1) >> 8);
                if (v165 >= 0x3FF)
                  v165 = 1023;
                v166 = (uint32x2_t)vmul_s32(v159, vdup_n_s32(v163));
                v167 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v50->i32[0]), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), v160);
                v168 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v167, v167, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v166, v166, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                v50->i32[0] = vorr_s8((int8x8_t)v168, (int8x8_t)vdup_lane_s32(v168, 1)).u32[0] | v165 | 0xC0000000;
                v50 = (uint32x4_t *)((char *)v50 + 4);
                *v47 = v164;
                v47 += v751;
                --v161;
              }
              while (v161);
              v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
              v47 += v48;
              --v757[0];
            }
            while (v757[0]);
            goto LABEL_351;
          case 11:
            v169 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v33), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003);
            v170 = v33 & 0x3FF;
            if (v10)
            {
              do
              {
                v171 = v767[0];
                do
                {
                  v172 = *v47 + v21;
                  if (v172 >= 0xFF)
                    LOBYTE(v172) = -1;
                  v173 = (v50->i32[0] & 0x3FF) + v170;
                  if (v173 >= 0x3FF)
                    v173 = 1023;
                  v174 = (int32x2_t)vshl_u32(vmin_u32((uint32x2_t)vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v50->i32[0]), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), v169), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                  v50->i32[0] = vorr_s8((int8x8_t)v174, (int8x8_t)vdup_lane_s32(v174, 1)).u32[0] | v173 | 0xC0000000;
                  v50 = (uint32x4_t *)((char *)v50 + 4);
                  *v47 = v172;
                  v47 += v751;
                  --v171;
                }
                while (v171);
                v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
                v47 += v48;
                --v757[0];
              }
              while (v757[0]);
            }
            else
            {
              do
              {
                v239 = v767[0];
                v240 = v767[0] - 1;
                do
                {
                  v241 = (v50->i32[0] & 0x3FF) + v170;
                  if (v241 >= 0x3FF)
                    v241 = 1023;
                  v242 = (int32x2_t)vshl_u32(vmin_u32((uint32x2_t)vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v50->i32[0]), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), v169), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                  v50->i32[0] = vorr_s8((int8x8_t)v242, (int8x8_t)vdup_lane_s32(v242, 1)).u32[0] | v241 | 0xC0000000;
                  v50 = (uint32x4_t *)((char *)v50 + 4);
                  --v239;
                }
                while (v239);
                v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
                v47 += v48 + v751 + v751 * (unint64_t)v240;
                --v757[0];
              }
              while (v757[0]);
            }
            goto LABEL_351;
          case 12:
            v175 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v33), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003);
            v176 = v33 & 0x3FF;
            if (v10)
            {
              do
              {
                v177 = v767[0];
                do
                {
                  v178 = *v47 + v21;
                  if (v178 >= 0xFF)
                    LOBYTE(v178) = -1;
                  v179 = (v50->i32[0] & 0x3FF) + v176;
                  if (v179 >= 0x3FF)
                    v179 = 1023;
                  v180 = (int32x2_t)vshl_u32(vmin_u32((uint32x2_t)vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v50->i32[0]), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), v175), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                  v50->i32[0] = vorr_s8((int8x8_t)v180, (int8x8_t)vdup_lane_s32(v180, 1)).u32[0] | v179 | 0xC0000000;
                  v50 = (uint32x4_t *)((char *)v50 + 4);
                  *v47 = v178;
                  v47 += v751;
                  --v177;
                }
                while (v177);
                v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
                v47 += v48;
                --v757[0];
              }
              while (v757[0]);
            }
            else
            {
              do
              {
                v243 = v767[0];
                v244 = v767[0] - 1;
                do
                {
                  v245 = (v50->i32[0] & 0x3FF) + v176;
                  if (v245 >= 0x3FF)
                    v245 = 1023;
                  v246 = (int32x2_t)vshl_u32(vmin_u32((uint32x2_t)vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v50->i32[0]), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), v175), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                  v50->i32[0] = vorr_s8((int8x8_t)v246, (int8x8_t)vdup_lane_s32(v246, 1)).u32[0] | v245 | 0xC0000000;
                  v50 = (uint32x4_t *)((char *)v50 + 4);
                  --v243;
                }
                while (v243);
                v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
                v47 += v48 + v751 + v751 * (unint64_t)v244;
                --v757[0];
              }
              while (v757[0]);
            }
            goto LABEL_351;
          case 13:
            if (!v21)
              goto LABEL_351;
            do
            {
              v181 = v767[0];
              do
              {
                if (v10)
                {
                  if (*v47)
                  {
                    v182 = PDAmultiplyPDA(v50->i32[0], *v47, v33, v21);
                    v50->i32[0] = HIDWORD(v182);
                    *v47 = v182;
                  }
                  else
                  {
                    v50->i32[0] = v33;
                    *v47 = v21;
                  }
                }
                else
                {
                  v50->i32[0] = PDAmultiplyPDA(v50->i32[0], 255, v33, v21) >> 32;
                }
                v50 = (uint32x4_t *)((char *)v50 + 4);
                v47 += v751;
                --v181;
              }
              while (v181);
              v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
              v47 += v48;
              --v757[0];
            }
            while (v757[0]);
            goto LABEL_320;
          case 14:
            if (!v21)
              goto LABEL_351;
            do
            {
              v183 = v767[0];
              do
              {
                if (v10)
                {
                  if (*v47)
                  {
                    v184 = PDAscreenPDA(v50->i32[0], *v47, v33, v21);
                    v50->i32[0] = HIDWORD(v184);
                    *v47 = v184;
                  }
                  else
                  {
                    v50->i32[0] = v33;
                    *v47 = v21;
                  }
                }
                else
                {
                  v50->i32[0] = PDAscreenPDA(v50->i32[0], 255, v33, v21) >> 32;
                }
                v50 = (uint32x4_t *)((char *)v50 + 4);
                v47 += v751;
                --v183;
              }
              while (v183);
              v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
              v47 += v48;
              --v757[0];
            }
            while (v757[0]);
            goto LABEL_320;
          case 15:
            if (!v21)
              goto LABEL_351;
            do
            {
              v185 = v767[0];
              do
              {
                if (v10)
                {
                  if (*v47)
                  {
                    v186 = PDAoverlayPDA(v50->i32[0], *v47, v33, v21);
                    v50->i32[0] = HIDWORD(v186);
                    *v47 = v186;
                  }
                  else
                  {
                    v50->i32[0] = v33;
                    *v47 = v21;
                  }
                }
                else
                {
                  v50->i32[0] = PDAoverlayPDA(v50->i32[0], 255, v33, v21) >> 32;
                }
                v50 = (uint32x4_t *)((char *)v50 + 4);
                v47 += v751;
                --v185;
              }
              while (v185);
              v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
              v47 += v48;
              --v757[0];
            }
            while (v757[0]);
            goto LABEL_320;
          case 16:
            if (!v21)
              goto LABEL_351;
            do
            {
              v187 = v767[0];
              do
              {
                if (v10)
                {
                  if (*v47)
                  {
                    v188 = PDAdarkenPDA(v50->i32[0], *v47, v33, v21);
                    v50->i32[0] = HIDWORD(v188);
                    *v47 = v188;
                  }
                  else
                  {
                    v50->i32[0] = v33;
                    *v47 = v21;
                  }
                }
                else
                {
                  v50->i32[0] = PDAdarkenPDA(v50->i32[0], 0xFFu, v33, v21) >> 32;
                }
                v50 = (uint32x4_t *)((char *)v50 + 4);
                v47 += v751;
                --v187;
              }
              while (v187);
              v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
              v47 += v48;
              --v757[0];
            }
            while (v757[0]);
            goto LABEL_320;
          case 17:
            if (!v21)
              goto LABEL_351;
            do
            {
              v189 = v767[0];
              do
              {
                if (v10)
                {
                  if (*v47)
                  {
                    v190 = PDAlightenPDA(v50->i32[0], *v47, v33, v21);
                    v50->i32[0] = HIDWORD(v190);
                    *v47 = v190;
                  }
                  else
                  {
                    v50->i32[0] = v33;
                    *v47 = v21;
                  }
                }
                else
                {
                  v50->i32[0] = PDAlightenPDA(v50->i32[0], 0xFFu, v33, v21) >> 32;
                }
                v50 = (uint32x4_t *)((char *)v50 + 4);
                v47 += v751;
                --v189;
              }
              while (v189);
              v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
              v47 += v48;
              --v757[0];
            }
            while (v757[0]);
            goto LABEL_320;
          case 18:
            if (!v21)
              goto LABEL_351;
            do
            {
              v191 = v767[0];
              do
              {
                if (v10)
                {
                  if (*v47)
                  {
                    v192 = PDAcolordodgePDA(v50->i32[0], *v47, v33, v21);
                    v50->i32[0] = HIDWORD(v192);
                    *v47 = v192;
                  }
                  else
                  {
                    v50->i32[0] = v33;
                    *v47 = v21;
                  }
                }
                else
                {
                  v50->i32[0] = PDAcolordodgePDA(v50->i32[0], 255, v33, v21) >> 32;
                }
                v50 = (uint32x4_t *)((char *)v50 + 4);
                v47 += v751;
                --v191;
              }
              while (v191);
              v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
              v47 += v48;
              --v757[0];
            }
            while (v757[0]);
            goto LABEL_320;
          case 19:
            if (!v21)
              goto LABEL_351;
            do
            {
              v193 = v767[0];
              do
              {
                if (v10)
                {
                  if (*v47)
                  {
                    v194 = PDAcolorburnPDA(v50->i32[0], *v47, v33, v21);
                    v50->i32[0] = HIDWORD(v194);
                    *v47 = v194;
                  }
                  else
                  {
                    v50->i32[0] = v33;
                    *v47 = v21;
                  }
                }
                else
                {
                  v50->i32[0] = PDAcolorburnPDA(v50->i32[0], 255, v33, v21) >> 32;
                }
                v50 = (uint32x4_t *)((char *)v50 + 4);
                v47 += v751;
                --v193;
              }
              while (v193);
              v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
              v47 += v48;
              --v757[0];
            }
            while (v757[0]);
            goto LABEL_320;
          case 20:
            if (!v21)
              goto LABEL_351;
            do
            {
              v195 = v767[0];
              do
              {
                if (v10)
                {
                  if (*v47)
                  {
                    v196 = PDAsoftlightPDA(v50->i32[0], *v47, v33, v21);
                    v50->i32[0] = HIDWORD(v196);
                    *v47 = v196;
                  }
                  else
                  {
                    v50->i32[0] = v33;
                    *v47 = v21;
                  }
                }
                else
                {
                  v50->i32[0] = PDAsoftlightPDA(v50->i32[0], 255, v33, v21) >> 32;
                }
                v50 = (uint32x4_t *)((char *)v50 + 4);
                v47 += v751;
                --v195;
              }
              while (v195);
              v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
              v47 += v48;
              --v757[0];
            }
            while (v757[0]);
            goto LABEL_320;
          case 21:
            if (!v21)
              goto LABEL_351;
            do
            {
              v197 = v767[0];
              do
              {
                if (v10)
                {
                  if (*v47)
                  {
                    v198 = PDAhardlightPDA(v50->i32[0], *v47, v33, v21);
                    v50->i32[0] = HIDWORD(v198);
                    *v47 = v198;
                  }
                  else
                  {
                    v50->i32[0] = v33;
                    *v47 = v21;
                  }
                }
                else
                {
                  v50->i32[0] = PDAhardlightPDA(v50->i32[0], 255, v33, v21) >> 32;
                }
                v50 = (uint32x4_t *)((char *)v50 + 4);
                v47 += v751;
                --v197;
              }
              while (v197);
              v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
              v47 += v48;
              --v757[0];
            }
            while (v757[0]);
            goto LABEL_320;
          case 22:
            if (!v21)
              goto LABEL_351;
            do
            {
              v199 = v767[0];
              do
              {
                if (v10)
                {
                  if (*v47)
                  {
                    v200 = PDAdifferencePDA(v50->i32[0], *v47, v33, v21);
                    v50->i32[0] = HIDWORD(v200);
                    *v47 = v200;
                  }
                  else
                  {
                    v50->i32[0] = v33;
                    *v47 = v21;
                  }
                }
                else
                {
                  v50->i32[0] = PDAdifferencePDA(v50->i32[0], 0xFFu, v33, v21) >> 32;
                }
                v50 = (uint32x4_t *)((char *)v50 + 4);
                v47 += v751;
                --v199;
              }
              while (v199);
              v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
              v47 += v48;
              --v757[0];
            }
            while (v757[0]);
            goto LABEL_320;
          case 23:
            if (!v21)
              goto LABEL_351;
            do
            {
              v201 = v767[0];
              do
              {
                if (v10)
                {
                  if (*v47)
                  {
                    v202 = PDAexclusionPDA(v50->i32[0], *v47, v33, v21);
                    v50->i32[0] = HIDWORD(v202);
                    *v47 = v202;
                  }
                  else
                  {
                    v50->i32[0] = v33;
                    *v47 = v21;
                  }
                }
                else
                {
                  v50->i32[0] = PDAexclusionPDA(v50->i32[0], 255, v33, v21) >> 32;
                }
                v50 = (uint32x4_t *)((char *)v50 + 4);
                v47 += v751;
                --v201;
              }
              while (v201);
              v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
              v47 += v48;
              --v757[0];
            }
            while (v757[0]);
            goto LABEL_320;
          case 24:
            if (!v21)
              goto LABEL_351;
            do
            {
              v203 = v767[0];
              do
              {
                if (v10)
                {
                  if (*v47)
                  {
                    v204 = PDAhuePDA(v50->i32[0], *v47, v33, v21);
                    v50->i32[0] = HIDWORD(v204);
                    *v47 = v204;
                  }
                  else
                  {
                    v50->i32[0] = v33;
                    *v47 = v21;
                  }
                }
                else
                {
                  v50->i32[0] = PDAhuePDA(v50->i32[0], 255, v33, v21) >> 32;
                }
                v50 = (uint32x4_t *)((char *)v50 + 4);
                v47 += v751;
                --v203;
              }
              while (v203);
              v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
              v47 += v48;
              --v757[0];
            }
            while (v757[0]);
            goto LABEL_320;
          case 25:
            if (!v21)
              goto LABEL_351;
            do
            {
              v205 = v767[0];
              do
              {
                if (v10)
                {
                  if (*v47)
                  {
                    v206 = PDAsaturationPDA(v50->i32[0], *v47, v33, v21);
                    v50->i32[0] = HIDWORD(v206);
                    *v47 = v206;
                  }
                  else
                  {
                    v50->i32[0] = v33;
                    *v47 = v21;
                  }
                }
                else
                {
                  v50->i32[0] = PDAsaturationPDA(v50->i32[0], 255, v33, v21) >> 32;
                }
                v50 = (uint32x4_t *)((char *)v50 + 4);
                v47 += v751;
                --v205;
              }
              while (v205);
              v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
              v47 += v48;
              --v757[0];
            }
            while (v757[0]);
            goto LABEL_320;
          case 26:
            if (!v21)
              goto LABEL_351;
            do
            {
              v207 = v767[0];
              do
              {
                if (v10)
                {
                  if (*v47)
                  {
                    v208 = PDAluminosityPDA(v33, v21, v50->i32[0], *v47);
                    v50->i32[0] = HIDWORD(v208);
                    *v47 = v208;
                  }
                  else
                  {
                    v50->i32[0] = v33;
                    *v47 = v21;
                  }
                }
                else
                {
                  v50->i32[0] = PDAluminosityPDA(v33, v21, v50->i32[0], 0xFFu) >> 32;
                }
                v50 = (uint32x4_t *)((char *)v50 + 4);
                v47 += v751;
                --v207;
              }
              while (v207);
              v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
              v47 += v48;
              --v757[0];
            }
            while (v757[0]);
            goto LABEL_320;
          case 27:
            if (!v21)
              goto LABEL_351;
            do
            {
              v209 = v767[0];
              do
              {
                if (v10)
                {
                  if (*v47)
                  {
                    v210 = PDAluminosityPDA(v50->i32[0], *v47, v33, v21);
                    v50->i32[0] = HIDWORD(v210);
                    *v47 = v210;
                  }
                  else
                  {
                    v50->i32[0] = v33;
                    *v47 = v21;
                  }
                }
                else
                {
                  v50->i32[0] = PDAluminosityPDA(v50->i32[0], 0xFFu, v33, v21) >> 32;
                }
                v50 = (uint32x4_t *)((char *)v50 + 4);
                v47 += v751;
                --v209;
              }
              while (v209);
              v50 = (uint32x4_t *)((char *)v50 + 4 * v79);
              v47 += v48;
              --v757[0];
            }
            while (v757[0]);
LABEL_320:
            v37 = v735;
            v38 = v747;
            v36 = v749;
            break;
          default:
LABEL_351:
            v37 = v78;
            break;
        }
        v46 = v754;
        if (!v754)
          return 1;
        v756 = 0;
      }
      v61 = (void *)v46;
      goto LABEL_1131;
    }
    v767[0] = *(_DWORD *)(v3 + 4);
    v757[0] = v16;
    v22 = *(_QWORD *)(v3 + 88);
    v24 = *(int *)(v3 + 12);
    v23 = *(int *)(v3 + 16);
    v739 = (unint64_t)*(int *)(v3 + 28) >> 2;
    if (v10)
    {
      v25 = *(int *)(v3 + 32);
      v732 = (char *)(v10 + v24 + (int)v25 * (uint64_t)(int)v23);
      v26 = 0xFFFFFFFFLL;
    }
    else
    {
      v732 = 0;
      v25 = 0;
      v26 = 0;
    }
    v731 = *(_QWORD *)(v3 + 40) + 4 * (v24 + v23 * v739);
    v40 = *(_DWORD *)(v3 + 56);
    v41 = *(_DWORD *)(v3 + 60);
    v743 = (unint64_t)*(int *)(v3 + 76) >> 2;
    v42 = *(_QWORD *)(v3 + 88);
    v707 = v3;
    if (v20 != 256)
    {
      v737 = *(_DWORD *)(v3 + 64);
      v736 = *(_DWORD *)(v3 + 68);
      if (v9)
      {
        v43 = *(int *)(v3 + 80);
        v44 = 1;
      }
      else
      {
        v43 = 0;
        v44 = 0;
      }
      v742 = v22 + 4 * v743 * v736;
      v26 &= 1u;
      if (v18)
      {
        v708 = *(_DWORD *)(v3 + 60);
        v709 = *(_DWORD *)(v3 + 56);
        v753 = v44;
        v755 = v26;
        v63 = 1;
        v750 = *(unsigned int **)(v3 + 88);
        v733 = (uint64_t)v750;
        goto LABEL_54;
      }
      v748 = v25 - (v26 * v14);
      if (v22)
      {
        v71 = v41 % v736;
        v708 = v41 % v736;
        v72 = v22 + 4 * v743 * v71;
        v73 = v40 % v737;
        v74 = (unsigned int *)(v72 + 4 * v73);
        v69 = v72 + 4 * v737;
        v75 = v735;
        v709 = v73;
        v750 = v74;
        v738 = 0;
        if (v9)
        {
          v76 = (uint64_t)&v9[(int)v43 * (uint64_t)(int)v71 + v73];
          v734 = 1;
          v44 = 1;
          v66 = (char *)v76;
        }
        else
        {
          v76 = 0;
          v66 = 0;
          v734 = 1;
        }
        v77 = (_BYTE *)v731;
        v67 = v732;
        v68 = v14;
        goto LABEL_359;
      }
      v708 = *(_DWORD *)(v3 + 60);
      v709 = *(_DWORD *)(v3 + 56);
      v69 = 0;
      v734 = 1;
      v68 = v14;
      v70 = (unint64_t)*(int *)(v3 + 76) >> 2;
LABEL_62:
      v75 = v735;
      v738 = 0;
      v750 = 0;
      v742 = 0;
      v743 = v70 - v68;
      v43 -= v44 * (int)v14;
      v76 = (uint64_t)v9;
      v66 = v9;
      v74 = (unsigned int *)v42;
      v77 = (_BYTE *)v731;
      v67 = v732;
      goto LABEL_359;
    }
    if (v9)
    {
      v43 = *(int *)(v3 + 80);
      v9 += v40 + (int)v43 * (uint64_t)v41;
      v44 = -1;
    }
    else
    {
      v43 = 0;
      v44 = 0;
    }
    v42 = v22 + 4 * (v40 + v41 * v743);
    if (v743 == v739 && (uint64_t)(v731 - v42) >= 1)
    {
      if (v14 >= (v731 - v42) >> 2)
      {
        v731 += 4 * v15;
        v732 += v26 & v15;
        v9 += v44 & v15;
        v63 = -1;
        v743 = (unint64_t)*(int *)(v3 + 28) >> 2;
        v42 += 4 * v15;
        goto LABEL_49;
      }
      v62 = v739 * v17;
      if (v731 <= v42 + 4 * v739 * v17 + 4 * v15)
      {
        v732 += v25 * v17;
        v25 = -v25;
        v26 &= 1u;
        v9 += v43 * v17;
        v43 = -v43;
        v44 &= 1u;
        v63 = 1;
        v42 += 4 * v739 * v17;
        v743 = -(uint64_t)v739;
        v739 = -(uint64_t)v739;
        v731 += 4 * v62;
        goto LABEL_49;
      }
    }
    v26 &= 1u;
    v44 &= 1u;
    v63 = 1;
LABEL_49:
    v708 = *(_DWORD *)(v3 + 60);
    v709 = *(_DWORD *)(v3 + 56);
    if (v18)
    {
      v753 = v44;
      v755 = v26;
      v750 = 0;
      v742 = 0;
      v733 = -1;
      v737 = v743;
      v736 = v43;
LABEL_54:
      v734 = v63;
      shape_enum_clip_alloc(v14, v3, (int *)v18, v63, v739, 1, *(_DWORD *)(v3 + 104), *(_DWORD *)(v3 + 108), v14, v16);
      v65 = v64;
      v741 = (unsigned __int8 *)v9;
      v66 = v9;
      v67 = v732;
      v748 = v25;
      if (!v64)
        return 1;
      while (2)
      {
        if (!shape_enum_clip_next(v65, (int *)&v756 + 1, &v756, v767, v757))
        {
          v61 = (void *)v65;
LABEL_1131:
          free(v61);
          return 1;
        }
        v738 = v65;
        v75 = v735;
        if (v742)
        {
          v77 = (_BYTE *)(v731 + 4 * v739 * (int)v756 + 4 * SHIDWORD(v756));
          v658 = ((int)v756 + *(_DWORD *)(v13 + 60)) % v736;
          v68 = v767[0];
          v659 = (HIDWORD(v756) + *(_DWORD *)(v13 + 56)) % v737;
          v660 = v42 + 4 * v743 * v658;
          v74 = (unsigned int *)(v660 + 4 * v659);
          v69 = v660 + 4 * v737;
          v26 = v755;
          if ((_DWORD)v755)
            v67 = &v732[v25 * (int)v756 + SHIDWORD(v756)];
          v661 = v748;
          if ((_DWORD)v755)
            v661 = v25 - v767[0];
          v748 = v661;
          v750 = (unsigned int *)(v660 + 4 * v659);
          if (v753)
            v44 = v753;
          else
            v44 = 0;
          v76 = (uint64_t)v741;
          if (v753)
          {
            v76 = (uint64_t)&v9[v43 * v658 + v659];
            v66 = (char *)v76;
          }
          LODWORD(v14) = v767[0];
          v708 = ((int)v756 + *(_DWORD *)(v13 + 60)) % v736;
          v709 = (HIDWORD(v756) + *(_DWORD *)(v13 + 56)) % v737;
        }
        else
        {
          v662 = SHIDWORD(v756) * (uint64_t)v734;
          LODWORD(v14) = v767[0];
          v77 = (_BYTE *)(v731 + 4 * v739 * (int)v756 + 4 * v662);
          v68 = v767[0] * v734;
          v74 = (unsigned int *)(v42 + 4 * (int)v756 * v737 + 4 * v662);
          v743 = v737 - v767[0] * v734;
          v26 = v755;
          if ((_DWORD)v755)
            v67 = &v732[v25 * (int)v756 + SHIDWORD(v756) * (uint64_t)v734];
          v663 = v748;
          if ((_DWORD)v755)
            v663 = v25 - v767[0] * v734;
          v748 = v663;
          if (v753)
            v44 = v753;
          else
            v44 = 0;
          v742 = 0;
          if (v753)
          {
            v66 = &v9[(int)v756 * v736 + v662];
            v43 = v736 - (int)v68;
          }
          v69 = v733;
          v76 = (uint64_t)v741;
        }
LABEL_359:
        v753 = v44;
        v755 = v26;
        v746 = v739 - v68;
        v740 = v43;
        switch(v75)
        {
          case 0:
            v741 = (unsigned __int8 *)v76;
            v733 = v69;
            v727 = v9;
            v729 = v42;
            v725 = v25;
            v247 = (int)v14;
            v248 = v746 - (int)v14;
            v249 = v14 - 1;
            v250 = &v77[-4 * (int)v14 + 4];
            if (v734 >= 0)
            {
              v250 = v77;
              v248 = v746 + (int)v14;
            }
            v251 = v757[0];
            v252 = v757[0] - 1;
            v253 = &v250[4 * ((v248 * v252) & (v248 >> 63))];
            if (v248 < 0)
              v248 = -v248;
            v254 = v14;
            v255 = v26;
            CGBlt_fillBytes(4 * v14, v757[0], 0, v253, 4 * v248);
            if (v255)
            {
              v256 = v748 - v247;
              v257 = &v67[-v249];
              if (v734 >= 0)
              {
                v257 = v67;
                v256 = v748 + v247;
              }
              v258 = (v256 * v252) & (v256 >> 63);
              v67 = &v257[v258];
              if (v256 >= 0)
                v259 = v256;
              else
                v259 = -v256;
              v748 = v259;
              CGBlt_fillBytes(v254, v251, 0, &v257[v258], v259);
            }
            v25 = v725;
            v9 = v727;
            goto LABEL_372;
          case 1:
            v260 = *(unsigned __int8 *)(v13 + 1);
            if (v260 == 2)
            {
              if ((int)v14 >= 8 && (4 * v737) <= 0x40)
              {
                LODWORD(v4) = 4 * v737;
                v664 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v4);
                v664.i16[0] = vaddlv_u8(v664);
                if (v664.i32[0] <= 1u)
                {
                  v741 = (unsigned __int8 *)v76;
                  v733 = v69;
                  v665 = v757[0];
                  v666 = v14;
                  CGSFillDRAM64(v77, 4 * (v14 + v746), 4 * v14, v757[0], v42, 4 * v743, 4 * v737, v736, 4 * v709, v708);
                  if (!(_DWORD)v755)
                    goto LABEL_1105;
                  v65 = v738;
                  if (v753)
                    CGSFillDRAM64(v67, v666 + v748, v666, v665, (uint64_t)v9, v43, v737, v736, v709, v708);
                  else
                    CGBlt_fillBytes(v666, v665, -1, v67, v666 + v748);
                  goto LABEL_1106;
                }
              }
LABEL_1139:
              if (!(_DWORD)v26)
              {
                v676 = v750;
                do
                {
                  v677 = v767[0];
                  do
                  {
                    *(_DWORD *)v77 = *v74;
                    v678 = &v74[v734];
                    if ((unint64_t)v678 >= v69)
                      v679 = -(uint64_t)v737;
                    else
                      v679 = 0;
                    v66 += v44 + v679;
                    v74 = &v678[v679];
                    v77 += 4 * v734;
                    --v677;
                  }
                  while (v677);
                  if (v742)
                  {
                    v680 = &v676[v743];
                    if ((unint64_t)v680 >= v742)
                      v681 = -(v43 * v736);
                    else
                      v681 = 0;
                    v76 += v43 + v681;
                    if ((unint64_t)v680 >= v742)
                      v682 = -(uint64_t)(v743 * v736);
                    else
                      v682 = 0;
                    v676 = &v680[v682];
                    v69 += 4 * v682 + 4 * v743;
                    v66 = (char *)v76;
                    v74 = v676;
                  }
                  else
                  {
                    v74 += v743;
                    v66 += v43;
                  }
                  v77 += 4 * v746;
                  v67 += v748;
                  --v757[0];
                }
                while (v757[0]);
                goto LABEL_1191;
              }
              v667 = (int)v26;
              v668 = 4 * v734;
              if (!v44)
              {
                v676 = v750;
                do
                {
                  v683 = v767[0];
                  do
                  {
                    *(_DWORD *)v77 = *v74;
                    *v67 = -1;
                    v67 += v667;
                    v684 = &v74[v734];
                    if ((unint64_t)v684 >= v69)
                      v685 = -(uint64_t)v737;
                    else
                      v685 = 0;
                    v66 += v685;
                    v74 = &v684[v685];
                    v77 += v668;
                    --v683;
                  }
                  while (v683);
                  if (v742)
                  {
                    v686 = &v676[v743];
                    if ((unint64_t)v686 >= v742)
                      v687 = -(v43 * v736);
                    else
                      v687 = 0;
                    v76 += v43 + v687;
                    if ((unint64_t)v686 >= v742)
                      v688 = -(uint64_t)(v743 * v736);
                    else
                      v688 = 0;
                    v676 = &v686[v688];
                    v69 += 4 * v688 + 4 * v743;
                    v66 = (char *)v76;
                    v74 = v676;
                  }
                  else
                  {
                    v74 += v743;
                    v66 += v43;
                  }
                  v77 += 4 * v746;
                  v67 += v748;
                  --v757[0];
                }
                while (v757[0]);
LABEL_1191:
                v750 = v676;
                goto LABEL_1104;
              }
              v669 = v750;
              do
              {
                v670 = v767[0];
                do
                {
                  *(_DWORD *)v77 = *v74;
                  *v67 = *v66;
                  v67 += v667;
                  v671 = &v74[v734];
                  if ((unint64_t)v671 >= v69)
                    v672 = -(uint64_t)v737;
                  else
                    v672 = 0;
                  v66 += v44 + v672;
                  v74 = &v671[v672];
                  v77 += v668;
                  --v670;
                }
                while (v670);
                if (v742)
                {
                  v673 = &v669[v743];
                  if ((unint64_t)v673 >= v742)
                    v674 = -(v43 * v736);
                  else
                    v674 = 0;
                  v76 += v43 + v674;
                  if ((unint64_t)v673 >= v742)
                    v675 = -(uint64_t)(v743 * v736);
                  else
                    v675 = 0;
                  v669 = &v673[v675];
                  v69 += 4 * v675 + 4 * v743;
                  v66 = (char *)v76;
                  v74 = v669;
                }
                else
                {
                  v74 += v743;
                  v66 += v43;
                }
                v77 += 4 * v746;
                v67 += v748;
                --v757[0];
              }
              while (v757[0]);
              v750 = v669;
              goto LABEL_1104;
            }
            if (v260 != 1)
              goto LABEL_1139;
            v741 = (unsigned __int8 *)v76;
            v729 = v42;
            v261 = (int)v14;
            v733 = v69;
            v262 = v25;
            if (v734 < 0)
            {
              v263 = v743 - (int)v14;
              v74 += -(int)v14 + 1;
              v264 = v746 - (int)v14;
              v77 += -4 * (int)v14 + 4;
            }
            else
            {
              v263 = v743 + (int)v14;
              v264 = v746 + (int)v14;
            }
            v689 = v757[0] - 1;
            v690 = (char *)&v74[(v263 * v689) & (v263 >> 63)];
            v691 = v757[0];
            if (v263 >= 0)
              v692 = v263;
            else
              v692 = -v263;
            if (v264 >= 0)
              LODWORD(v693) = v264;
            else
              v693 = -v264;
            v694 = v14;
            v743 = v692;
            CGBlt_copyBytes(4 * v14, v757[0], v690, &v77[4 * ((v264 * v689) & (v264 >> 63))], 4 * v692, 4 * v693);
            if ((_DWORD)v755)
            {
              v65 = v738;
              if (v753)
              {
                v695 = v740 - v261;
                v696 = &v66[-v694 + 1];
                v697 = v748 - v261;
                v698 = &v67[-v694 + 1];
                if (v734 >= 0)
                {
                  v696 = v66;
                  v698 = v67;
                  v695 = v740 + v261;
                  v697 = v748 + v261;
                }
                v699 = (v695 * v689) & (v695 >> 63);
                v66 = &v696[v699];
                if (v695 >= 0)
                  v700 = v695;
                else
                  v700 = -v695;
                v701 = (v697 * v689) & (v697 >> 63);
                v67 = &v698[v701];
                if (v697 >= 0)
                  v702 = v697;
                else
                  v702 = -v697;
                v748 = v702;
                CGBlt_copyBytes(v694, v691, &v696[v699], &v698[v701], v700, v702);
                v25 = v262;
                v43 = v700;
                v42 = v729;
              }
              else
              {
                v703 = v748 - v261;
                v704 = &v67[-v694 + 1];
                if (v734 >= 0)
                {
                  v704 = v67;
                  v703 = v748 + v261;
                }
                v705 = (v703 * v689) & (v703 >> 63);
                v67 = &v704[v705];
                if (v703 >= 0)
                  v706 = v703;
                else
                  v706 = -v703;
                v748 = v706;
                CGBlt_fillBytes(v694, v691, -1, &v704[v705], v706);
                v25 = v262;
                v42 = v729;
                v43 = v740;
              }
              goto LABEL_1106;
            }
            v25 = v262;
LABEL_372:
            v42 = v729;
            v43 = v740;
            goto LABEL_1105;
          case 2:
            if ((_DWORD)v26)
            {
              v265 = (int)v26;
              do
              {
                v266 = v767[0];
                do
                {
                  v267 = *v66;
                  if (*v66)
                  {
                    if ((_DWORD)v267 == 255)
                    {
                      *(_DWORD *)v77 = *v74;
                      v268 = *v66;
                    }
                    else
                    {
                      v269 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*(_DWORD *)v77), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v267 ^ 0xFF));
                      *(uint32x2_t *)v270.i8 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v269, v269, 8uLL), (int32x2_t)0x100000001), 8uLL);
                      v271 = v270.u32[0] | ((unint64_t)(((*(_DWORD *)v77 & 0x3FF) * (v267 ^ 0xFF)
                                                              + (((*(_DWORD *)v77 & 0x3FF) * (v267 ^ 0xFF)) >> 8)
                                                              + 1) >> 8) << 32);
                      v270.i32[0] = (*v67 * (v267 ^ 0xFF)
                                   + ((*v67 * (v267 ^ 0xFF)) >> 8)
                                   + 1) >> 8;
                      v270.i64[1] = v271;
                      v272 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v74), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003);
                      v273 = v272.u32[0] | ((unint64_t)(*v74 & 0x3FF) << 32);
                      v274.i64[0] = v267 | ((unint64_t)v272.u32[1] << 32);
                      v274.i64[1] = v273;
                      v275 = vaddq_s64(v270, v274);
                      v268 = v275.i8[0];
                      *(_DWORD *)v77 = ((unint64_t)v275.i64[0] >> 12) & 0x3FF00000 | v275.i16[6] & 0x3FF | ((v275.i16[4] & 0x3FF) << 10) | 0xC0000000;
                    }
                    *v67 = v268;
                  }
                  v67 += v265;
                  v276 = &v74[v734];
                  if ((unint64_t)v276 >= v69)
                    v277 = -(uint64_t)v737;
                  else
                    v277 = 0;
                  v66 += v44 + v277;
                  v74 = &v276[v277];
                  v77 += 4 * v734;
                  --v266;
                }
                while (v266);
                if (v742)
                {
                  v278 = &v750[v743];
                  if ((unint64_t)v278 >= v742)
                    v279 = -(v43 * v736);
                  else
                    v279 = 0;
                  v76 += v43 + v279;
                  if ((unint64_t)v278 >= v742)
                    v280 = -(uint64_t)(v743 * v736);
                  else
                    v280 = 0;
                  v74 = &v278[v280];
                  v69 += 4 * v280 + 4 * v743;
                  v66 = (char *)v76;
                  v750 = v74;
                }
                else
                {
                  v74 += v743;
                  v66 += v43;
                }
                v77 += 4 * v746;
                v67 += v748;
                --v757[0];
              }
              while (v757[0]);
              goto LABEL_1104;
            }
            v282 = v750;
            do
            {
              v604 = v767[0];
              do
              {
                v605 = *v66;
                if (*v66)
                {
                  if (v605 == 255)
                  {
                    v606 = *v74;
                  }
                  else
                  {
                    v607 = v605 ^ 0xFF;
                    v608 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*(_DWORD *)v77), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v607));
                    v609 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v608, v608, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                    v606 = *v74
                         - 0x40000000
                         + (v609.i32[0] | (((*(_DWORD *)v77 & 0x3FF) * v607
                                          + (((*(_DWORD *)v77 & 0x3FF) * v607) >> 8)
                                          + 1) >> 8) | v609.i32[1]);
                  }
                  *(_DWORD *)v77 = v606;
                }
                v610 = &v74[v734];
                if ((unint64_t)v610 >= v69)
                  v611 = -(uint64_t)v737;
                else
                  v611 = 0;
                v66 += v44 + v611;
                v74 = &v610[v611];
                v77 += 4 * v734;
                --v604;
              }
              while (v604);
              if (v742)
              {
                v612 = &v282[v743];
                if ((unint64_t)v612 >= v742)
                  v613 = -(v43 * v736);
                else
                  v613 = 0;
                v76 += v43 + v613;
                if ((unint64_t)v612 >= v742)
                  v614 = -(uint64_t)(v743 * v736);
                else
                  v614 = 0;
                v282 = &v612[v614];
                v69 += 4 * v614 + 4 * v743;
                v66 = (char *)v76;
                v74 = v282;
              }
              else
              {
                v74 += v743;
                v66 += v43;
              }
              v77 += 4 * v746;
              v67 += v748;
              --v757[0];
            }
            while (v757[0]);
            goto LABEL_1103;
          case 3:
            v281 = (int)v26;
            if (v44)
            {
              v282 = v750;
              do
              {
                v283 = v767[0];
                do
                {
                  v284 = *v67;
                  if (v284 == 255)
                  {
                    *(_DWORD *)v77 = *v74;
                    LOBYTE(v285) = *v66;
                  }
                  else if (*v67)
                  {
                    v285 = (*v66 * v284 + ((*v66 * v284) >> 8) + 1) >> 8;
                    v286 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v74), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v284));
                    v287 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v286, v286, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                    *(_DWORD *)v77 = v287.i32[0] | (((*v74 & 0x3FF) * v284 + (((*v74 & 0x3FF) * v284) >> 8) + 1) >> 8) | v287.i32[1] | 0xC0000000;
                  }
                  else
                  {
                    LOBYTE(v285) = 0;
                    *(_DWORD *)v77 = 0;
                  }
                  *v67 = v285;
                  v67 += v281;
                  v288 = &v74[v734];
                  if ((unint64_t)v288 >= v69)
                    v289 = -(uint64_t)v737;
                  else
                    v289 = 0;
                  v66 += v44 + v289;
                  v74 = &v288[v289];
                  v77 += 4 * v734;
                  --v283;
                }
                while (v283);
                if (v742)
                {
                  v290 = &v282[v743];
                  if ((unint64_t)v290 >= v742)
                    v291 = -(v43 * v736);
                  else
                    v291 = 0;
                  v76 += v43 + v291;
                  if ((unint64_t)v290 >= v742)
                    v292 = -(uint64_t)(v743 * v736);
                  else
                    v292 = 0;
                  v282 = &v290[v292];
                  v69 += 4 * v292 + 4 * v743;
                  v66 = (char *)v76;
                  v74 = v282;
                }
                else
                {
                  v74 += v743;
                  v66 += v43;
                }
                v77 += 4 * v746;
                v67 += v748;
                --v757[0];
              }
              while (v757[0]);
            }
            else
            {
              v282 = v750;
              do
              {
                v615 = v767[0];
                do
                {
                  v616 = *v67;
                  if (*v67)
                  {
                    if (v616 == 255)
                    {
                      v616 = *v74;
                    }
                    else
                    {
                      v617 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v74), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v616));
                      v618 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v617, v617, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                      v616 = *v74
                           - (v618.i32[0] | (((*v74 & 0x3FF) * v616 + (((*v74 & 0x3FF) * v616) >> 8) + 1) >> 8) | v618.i32[1])
                           + 0x40000000;
                    }
                  }
                  *(_DWORD *)v77 = v616;
                  v67 += v281;
                  v619 = &v74[v734];
                  if ((unint64_t)v619 >= v69)
                    v620 = -(uint64_t)v737;
                  else
                    v620 = 0;
                  v66 += v620;
                  v74 = &v619[v620];
                  v77 += 4 * v734;
                  --v615;
                }
                while (v615);
                if (v742)
                {
                  v621 = &v282[v743];
                  if ((unint64_t)v621 >= v742)
                    v622 = -(v43 * v736);
                  else
                    v622 = 0;
                  v76 += v43 + v622;
                  if ((unint64_t)v621 >= v742)
                    v623 = -(uint64_t)(v743 * v736);
                  else
                    v623 = 0;
                  v282 = &v621[v623];
                  v69 += 4 * v623 + 4 * v743;
                  v66 = (char *)v76;
                  v74 = v282;
                }
                else
                {
                  v74 += v743;
                  v66 += v43;
                }
                v77 += 4 * v746;
                v67 += v748;
                --v757[0];
              }
              while (v757[0]);
            }
            goto LABEL_1103;
          case 4:
            v293 = (int)v26;
            do
            {
              v294 = v767[0];
              do
              {
                if (~*v67 == 255)
                {
                  if (v44)
                    LOBYTE(v295) = *v66;
                  else
                    LOBYTE(v295) = -1;
                }
                else if (*v67 == -1)
                {
                  LOBYTE(v295) = 0;
                  *(_DWORD *)v77 = 0;
                }
                else
                {
                  if (v44)
                    v296 = *v66;
                  else
                    v296 = 255;
                  v297 = ~*v67;
                  v298 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v74), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v297));
                  v299 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v298, v298, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                  v300 = v299.i32[0] | (((*v74 & 0x3FF) * v297 + (((*v74 & 0x3FF) * v297) >> 8) + 1) >> 8);
                  v295 = (v296 * v297 + ((v296 * v297) >> 8) + 1) >> 8;
                  *(_DWORD *)v77 = v300 | v299.i32[1] | 0xC0000000;
                }
                *v67 = v295;
                v67 += v293;
                v301 = &v74[v734];
                if ((unint64_t)v301 >= v69)
                  v302 = -(uint64_t)v737;
                else
                  v302 = 0;
                v66 += v44 + v302;
                v74 = &v301[v302];
                v77 += 4 * v734;
                --v294;
              }
              while (v294);
              if (v742)
              {
                v303 = &v750[v743];
                if ((unint64_t)v303 >= v742)
                  v304 = -(v43 * v736);
                else
                  v304 = 0;
                v76 += v43 + v304;
                if ((unint64_t)v303 >= v742)
                  v305 = -(uint64_t)(v743 * v736);
                else
                  v305 = 0;
                v74 = &v303[v305];
                v69 += 4 * v305 + 4 * v743;
                v66 = (char *)v76;
                v750 = v74;
              }
              else
              {
                v74 += v743;
                v66 += v43;
              }
              v77 += 4 * v746;
              v67 += v748;
              --v757[0];
            }
            while (v757[0]);
            goto LABEL_1104;
          case 5:
            v306 = (int)v26;
            v307 = v44;
            do
            {
              v308 = v767[0];
              do
              {
                v309 = *v67;
                v310 = *v66;
                v311 = v310 * v309 + ((v310 * v309) >> 8) + 1;
                v312 = v310 ^ 0xFF;
                v313 = ((v312 * v309 + ((v312 * v309) >> 8) + 1) >> 8) + (v311 >> 8);
                if (v313 >= 0xFF)
                  LOBYTE(v313) = -1;
                v314 = (((*(_DWORD *)v77 & 0x3FF) * v312 + (((*(_DWORD *)v77 & 0x3FF) * v312) >> 8) + 1) >> 8)
                     + (((*v74 & 0x3FF) * v309 + (((*v74 & 0x3FF) * v309) >> 8) + 1) >> 8);
                if (v314 >= 0x3FF)
                  v314 = 1023;
                v315 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v74), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v309));
                v316 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*(_DWORD *)v77), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v312));
                v317 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v316, v316, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v315, v315, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                *(_DWORD *)v77 = vorr_s8((int8x8_t)v317, (int8x8_t)vdup_lane_s32(v317, 1)).u32[0] | v314 | 0xC0000000;
                *v67 = v313;
                v67 += v306;
                v318 = &v74[v734];
                if ((unint64_t)v318 >= v69)
                  v319 = -(uint64_t)v737;
                else
                  v319 = 0;
                v66 += v307 + v319;
                v74 = &v318[v319];
                v77 += 4 * v734;
                --v308;
              }
              while (v308);
              if (v742)
              {
                v320 = &v750[v743];
                if ((unint64_t)v320 >= v742)
                  v321 = -(v43 * v736);
                else
                  v321 = 0;
                v76 += v43 + v321;
                if ((unint64_t)v320 >= v742)
                  v322 = -(uint64_t)(v743 * v736);
                else
                  v322 = 0;
                v74 = &v320[v322];
                v69 += 4 * v322 + 4 * v743;
                v66 = (char *)v76;
                v750 = v74;
              }
              else
              {
                v74 += v743;
                v66 += v43;
              }
              v77 += 4 * v746;
              v67 += v748;
              --v757[0];
            }
            while (v757[0]);
            goto LABEL_1104;
          case 6:
            v323 = (int)v26;
            do
            {
              v324 = v767[0];
              do
              {
                v325 = *v67;
                if ((_BYTE)v325 != 0xFF)
                {
                  if (~(_BYTE)v325 == 255)
                  {
                    *(_DWORD *)v77 = *v74;
                    if (v44)
                      v326 = *v66;
                    else
                      v326 = -1;
                  }
                  else
                  {
                    if (v44)
                      v327 = *v66;
                    else
                      v327 = 255;
                    v328 = ~(_BYTE)v325;
                    v329 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v74), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v328));
                    *(uint32x2_t *)v330.i8 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v329, v329, 8uLL), (int32x2_t)0x100000001), 8uLL);
                    v331 = v330.u32[0] | ((unint64_t)(((*v74 & 0x3FF) * v328 + (((*v74 & 0x3FF) * v328) >> 8) + 1) >> 8) << 32);
                    v330.i32[0] = (v327 * v328 + ((v327 * v328) >> 8) + 1) >> 8;
                    v330.i64[1] = v331;
                    v332 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*(_DWORD *)v77), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003);
                    v333 = v332.u32[0] | ((unint64_t)(*(_DWORD *)v77 & 0x3FF) << 32);
                    v334.i64[0] = v325 | ((unint64_t)v332.u32[1] << 32);
                    v334.i64[1] = v333;
                    v335 = vaddq_s64(v330, v334);
                    v326 = v335.i8[0];
                    *(_DWORD *)v77 = ((unint64_t)v335.i64[0] >> 12) & 0x3FF00000 | v335.i16[6] & 0x3FF | ((v335.i16[4] & 0x3FF) << 10) | 0xC0000000;
                  }
                  *v67 = v326;
                }
                v67 += v323;
                v336 = &v74[v734];
                if ((unint64_t)v336 >= v69)
                  v337 = -(uint64_t)v737;
                else
                  v337 = 0;
                v66 += v44 + v337;
                v74 = &v336[v337];
                v77 += 4 * v734;
                --v324;
              }
              while (v324);
              if (v742)
              {
                v338 = &v750[v743];
                if ((unint64_t)v338 >= v742)
                  v339 = -(v43 * v736);
                else
                  v339 = 0;
                v76 += v43 + v339;
                if ((unint64_t)v338 >= v742)
                  v340 = -(uint64_t)(v743 * v736);
                else
                  v340 = 0;
                v74 = &v338[v340];
                v69 += 4 * v340 + 4 * v743;
                v66 = (char *)v76;
                v750 = v74;
              }
              else
              {
                v74 += v743;
                v66 += v43;
              }
              v77 += 4 * v746;
              v67 += v748;
              --v757[0];
            }
            while (v757[0]);
            goto LABEL_1104;
          case 7:
            if ((_DWORD)v26)
            {
              v341 = (int)v26;
              v282 = v750;
              do
              {
                v342 = v767[0];
                do
                {
                  v343 = *v66;
                  if (v343 != 255)
                  {
                    if (*v66)
                    {
                      v344 = (*v67 * v343 + ((*v67 * v343) >> 8) + 1) >> 8;
                      v345 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*(_DWORD *)v77), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v343));
                      v346 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v345, v345, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                      *(_DWORD *)v77 = v346.i32[0] | (((*(_DWORD *)v77 & 0x3FF) * v343
                                                     + (((*(_DWORD *)v77 & 0x3FF) * v343) >> 8)
                                                     + 1) >> 8) | v346.i32[1] | 0xC0000000;
                    }
                    else
                    {
                      LOBYTE(v344) = 0;
                      *(_DWORD *)v77 = 0;
                    }
                    *v67 = v344;
                  }
                  v67 += v341;
                  v347 = &v74[v734];
                  if ((unint64_t)v347 >= v69)
                    v348 = -(uint64_t)v737;
                  else
                    v348 = 0;
                  v66 += v44 + v348;
                  v74 = &v347[v348];
                  v77 += 4 * v734;
                  --v342;
                }
                while (v342);
                if (v742)
                {
                  v349 = &v282[v743];
                  if ((unint64_t)v349 >= v742)
                    v350 = -(v43 * v736);
                  else
                    v350 = 0;
                  v76 += v43 + v350;
                  if ((unint64_t)v349 >= v742)
                    v351 = -(uint64_t)(v743 * v736);
                  else
                    v351 = 0;
                  v282 = &v349[v351];
                  v69 += 4 * v351 + 4 * v743;
                  v66 = (char *)v76;
                  v74 = v282;
                }
                else
                {
                  v74 += v743;
                  v66 += v43;
                }
                v77 += 4 * v746;
                v67 += v748;
                --v757[0];
              }
              while (v757[0]);
LABEL_1103:
              v750 = v282;
              goto LABEL_1104;
            }
            v282 = v750;
LABEL_1025:
            v624 = v767[0];
            while (1)
            {
              v625 = *v66;
              if (!*v66)
                goto LABEL_1029;
              if (v625 != 255)
                break;
LABEL_1030:
              v628 = &v74[v734];
              if ((unint64_t)v628 >= v69)
                v629 = -(uint64_t)v737;
              else
                v629 = 0;
              v66 += v44 + v629;
              v74 = &v628[v629];
              v77 += 4 * v734;
              if (!--v624)
              {
                if (v742)
                {
                  v630 = &v282[v743];
                  if ((unint64_t)v630 >= v742)
                    v631 = -(v43 * v736);
                  else
                    v631 = 0;
                  v76 += v43 + v631;
                  if ((unint64_t)v630 >= v742)
                    v632 = -(uint64_t)(v743 * v736);
                  else
                    v632 = 0;
                  v282 = &v630[v632];
                  v69 += 4 * v632 + 4 * v743;
                  v66 = (char *)v76;
                  v74 = v282;
                }
                else
                {
                  v74 += v743;
                  v66 += v43;
                }
                v77 += 4 * v746;
                v67 += v748;
                if (!--v757[0])
                  goto LABEL_1103;
                goto LABEL_1025;
              }
            }
            v626 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*(_DWORD *)v77), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v625));
            v627 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v626, v626, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
            v625 = *(_DWORD *)v77
                 - (v627.i32[0] | (((*(_DWORD *)v77 & 0x3FF) * v625 + (((*(_DWORD *)v77 & 0x3FF) * v625) >> 8) + 1) >> 8) | v627.i32[1])
                 + 0x40000000;
LABEL_1029:
            *(_DWORD *)v77 = v625;
            goto LABEL_1030;
          case 8:
            if (!(_DWORD)v26)
            {
              v282 = v750;
              while (1)
              {
                v633 = v767[0];
                do
                {
                  v634 = *v66 ^ 0xFF;
                  if (v634)
                  {
                    if (v634 == 255)
                      goto LABEL_1051;
                    v635 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*(_DWORD *)v77), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v634));
                    v636 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v635, v635, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                    v634 = *(_DWORD *)v77
                         - (v636.i32[0] | (((*(_DWORD *)v77 & 0x3FF) * v634
                                          + (((*(_DWORD *)v77 & 0x3FF) * v634) >> 8)
                                          + 1) >> 8) | v636.i32[1])
                         + 0x40000000;
                  }
                  *(_DWORD *)v77 = v634;
LABEL_1051:
                  v637 = &v74[v734];
                  if ((unint64_t)v637 >= v69)
                    v638 = -(uint64_t)v737;
                  else
                    v638 = 0;
                  v66 += v44 + v638;
                  v74 = &v637[v638];
                  v77 += 4 * v734;
                  --v633;
                }
                while (v633);
                if (v742)
                {
                  v639 = &v282[v743];
                  if ((unint64_t)v639 >= v742)
                    v640 = -(v43 * v736);
                  else
                    v640 = 0;
                  v76 += v43 + v640;
                  if ((unint64_t)v639 >= v742)
                    v641 = -(uint64_t)(v743 * v736);
                  else
                    v641 = 0;
                  v282 = &v639[v641];
                  v69 += 4 * v641 + 4 * v743;
                  v66 = (char *)v76;
                  v74 = v282;
                }
                else
                {
                  v74 += v743;
                  v66 += v43;
                }
                v77 += 4 * v746;
                v67 += v748;
                if (!--v757[0])
                  goto LABEL_1103;
              }
            }
            v352 = (int)v26;
            do
            {
              v353 = v767[0];
              do
              {
                if (~*v66 != 255)
                {
                  if (*v66 == -1)
                  {
                    LOBYTE(v354) = 0;
                    *(_DWORD *)v77 = 0;
                  }
                  else
                  {
                    v355 = ~*v66;
                    v354 = (*v67 * v355 + ((*v67 * v355) >> 8) + 1) >> 8;
                    v356 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*(_DWORD *)v77), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v355));
                    v357 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v356, v356, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                    *(_DWORD *)v77 = v357.i32[0] | (((*(_DWORD *)v77 & 0x3FF) * v355
                                                   + (((*(_DWORD *)v77 & 0x3FF) * v355) >> 8)
                                                   + 1) >> 8) | v357.i32[1] | 0xC0000000;
                  }
                  *v67 = v354;
                }
                v67 += v352;
                v358 = &v74[v734];
                if ((unint64_t)v358 >= v69)
                  v359 = -(uint64_t)v737;
                else
                  v359 = 0;
                v66 += v44 + v359;
                v74 = &v358[v359];
                v77 += 4 * v734;
                --v353;
              }
              while (v353);
              if (v742)
              {
                v360 = &v750[v743];
                if ((unint64_t)v360 >= v742)
                  v361 = -(v43 * v736);
                else
                  v361 = 0;
                v76 += v43 + v361;
                if ((unint64_t)v360 >= v742)
                  v362 = -(uint64_t)(v743 * v736);
                else
                  v362 = 0;
                v74 = &v360[v362];
                v69 += 4 * v362 + 4 * v743;
                v66 = (char *)v76;
                v750 = v74;
              }
              else
              {
                v74 += v743;
                v66 += v43;
              }
              v77 += 4 * v746;
              v67 += v748;
              --v757[0];
            }
            while (v757[0]);
LABEL_1104:
            v741 = (unsigned __int8 *)v76;
            v733 = v69;
LABEL_1105:
            v65 = v738;
LABEL_1106:
            if (!v65)
              return 1;
            v756 = 0;
            continue;
          case 9:
            v363 = (int)v26;
            v364 = v44;
            do
            {
              v365 = v767[0];
              do
              {
                v366 = *v67;
                v367 = *v66;
                v368 = v366 ^ 0xFF;
                v369 = ((v367 * v366 + ((v367 * v366) >> 8) + 1) >> 8) + ((v367 * v368 + ((v367 * v368) >> 8) + 1) >> 8);
                if (v369 >= 0xFF)
                  LOBYTE(v369) = -1;
                v370 = (((*(_DWORD *)v77 & 0x3FF) * v367 + (((*(_DWORD *)v77 & 0x3FF) * v367) >> 8) + 1) >> 8)
                     + (((*v74 & 0x3FF) * v368 + (((*v74 & 0x3FF) * v368) >> 8) + 1) >> 8);
                if (v370 >= 0x3FF)
                  v370 = 1023;
                v371 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v74), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v368));
                v372 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*(_DWORD *)v77), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v367));
                v373 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v372, v372, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v371, v371, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                *(_DWORD *)v77 = vorr_s8((int8x8_t)v373, (int8x8_t)vdup_lane_s32(v373, 1)).u32[0] | v370 | 0xC0000000;
                *v67 = v369;
                v67 += v363;
                v374 = &v74[v734];
                if ((unint64_t)v374 >= v69)
                  v375 = -(uint64_t)v737;
                else
                  v375 = 0;
                v66 += v364 + v375;
                v74 = &v374[v375];
                v77 += 4 * v734;
                --v365;
              }
              while (v365);
              if (v742)
              {
                v376 = &v750[v743];
                if ((unint64_t)v376 >= v742)
                  v377 = -(v43 * v736);
                else
                  v377 = 0;
                v76 += v43 + v377;
                if ((unint64_t)v376 >= v742)
                  v378 = -(uint64_t)(v743 * v736);
                else
                  v378 = 0;
                v74 = &v376[v378];
                v69 += 4 * v378 + 4 * v743;
                v66 = (char *)v76;
                v750 = v74;
              }
              else
              {
                v74 += v743;
                v66 += v43;
              }
              v77 += 4 * v746;
              v67 += v748;
              --v757[0];
            }
            while (v757[0]);
            goto LABEL_1104;
          case 10:
            v379 = (int)v26;
            v380 = v44;
            do
            {
              v381 = v767[0];
              do
              {
                v382 = *v67;
                v383 = *v66;
                v384 = v382 ^ 0xFF;
                v385 = v383 * v384 + ((v383 * v384) >> 8) + 1;
                v386 = v383 ^ 0xFF;
                v387 = ((v386 * v382 + ((v386 * v382) >> 8) + 1) >> 8) + (v385 >> 8);
                if (v387 >= 0xFF)
                  LOBYTE(v387) = -1;
                v388 = (((*(_DWORD *)v77 & 0x3FF) * v386 + (((*(_DWORD *)v77 & 0x3FF) * v386) >> 8) + 1) >> 8)
                     + (((*v74 & 0x3FF) * v384 + (((*v74 & 0x3FF) * v384) >> 8) + 1) >> 8);
                if (v388 >= 0x3FF)
                  v388 = 1023;
                v389 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v74), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v384));
                v390 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*(_DWORD *)v77), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v386));
                v391 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v390, v390, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v389, v389, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                *(_DWORD *)v77 = vorr_s8((int8x8_t)v391, (int8x8_t)vdup_lane_s32(v391, 1)).u32[0] | v388 | 0xC0000000;
                *v67 = v387;
                v67 += v379;
                v392 = &v74[v734];
                if ((unint64_t)v392 >= v69)
                  v393 = -(uint64_t)v737;
                else
                  v393 = 0;
                v66 += v380 + v393;
                v74 = &v392[v393];
                v77 += 4 * v734;
                --v381;
              }
              while (v381);
              if (v742)
              {
                v394 = &v750[v743];
                if ((unint64_t)v394 >= v742)
                  v395 = -(v43 * v736);
                else
                  v395 = 0;
                v76 += v43 + v395;
                if ((unint64_t)v394 >= v742)
                  v396 = -(uint64_t)(v743 * v736);
                else
                  v396 = 0;
                v74 = &v394[v396];
                v69 += 4 * v396 + 4 * v743;
                v66 = (char *)v76;
                v750 = v74;
              }
              else
              {
                v74 += v743;
                v66 += v43;
              }
              v77 += 4 * v746;
              v67 += v748;
              --v757[0];
            }
            while (v757[0]);
            goto LABEL_1104;
          case 11:
            if ((_DWORD)v26)
            {
              v397 = (int)v26;
              do
              {
                v398 = v767[0];
                do
                {
                  if (v44)
                    v399 = *v66;
                  else
                    v399 = 255;
                  v400 = (int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*(_DWORD *)v77), (uint32x2_t)0xFFFFFFECFFFFFFF6);
                  v401 = (int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v74), (uint32x2_t)0xFFFFFFECFFFFFFF6);
                  v402 = v399 + *v67;
                  if (v402 >= 0xFF)
                    LOBYTE(v402) = -1;
                  v403 = (*v74 & 0x3FF) + (*(_DWORD *)v77 & 0x3FF);
                  if (v403 >= 0x3FF)
                    v403 = 1023;
                  v404 = (int32x2_t)vshl_u32(vmin_u32((uint32x2_t)vadd_s32((int32x2_t)vand_s8(v401, (int8x8_t)0x300000003), (int32x2_t)vand_s8(v400, (int8x8_t)0x300000003)), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                  *(_DWORD *)v77 = vorr_s8((int8x8_t)v404, (int8x8_t)vdup_lane_s32(v404, 1)).u32[0] | v403 | 0xC0000000;
                  *v67 = v402;
                  v67 += v397;
                  v405 = &v74[v734];
                  if ((unint64_t)v405 >= v69)
                    v406 = -(uint64_t)v737;
                  else
                    v406 = 0;
                  v66 += v44 + v406;
                  v74 = &v405[v406];
                  v77 += 4 * v734;
                  --v398;
                }
                while (v398);
                if (v742)
                {
                  v407 = &v750[v743];
                  if ((unint64_t)v407 >= v742)
                    v408 = -(v43 * v736);
                  else
                    v408 = 0;
                  v76 += v43 + v408;
                  if ((unint64_t)v407 >= v742)
                    v409 = -(uint64_t)(v743 * v736);
                  else
                    v409 = 0;
                  v74 = &v407[v409];
                  v69 += 4 * v409 + 4 * v743;
                  v66 = (char *)v76;
                  v750 = v74;
                }
                else
                {
                  v74 += v743;
                  v66 += v43;
                }
                v77 += 4 * v746;
                v67 += v748;
                --v757[0];
              }
              while (v757[0]);
              goto LABEL_1104;
            }
            v282 = v750;
            do
            {
              v642 = v767[0];
              do
              {
                v643 = (*v74 & 0x3FF) + (*(_DWORD *)v77 & 0x3FF);
                if (v643 >= 0x3FF)
                  v643 = 1023;
                v644 = (int32x2_t)vshl_u32(vmin_u32((uint32x2_t)vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v74), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*(_DWORD *)v77), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003)), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                *(_DWORD *)v77 = vorr_s8((int8x8_t)v644, (int8x8_t)vdup_lane_s32(v644, 1)).u32[0] | v643 | 0xC0000000;
                v645 = &v74[v734];
                if ((unint64_t)v645 >= v69)
                  v646 = -(uint64_t)v737;
                else
                  v646 = 0;
                v66 += v44 + v646;
                v74 = &v645[v646];
                v77 += 4 * v734;
                --v642;
              }
              while (v642);
              if (v742)
              {
                v647 = &v282[v743];
                if ((unint64_t)v647 >= v742)
                  v648 = -(v43 * v736);
                else
                  v648 = 0;
                v76 += v43 + v648;
                if ((unint64_t)v647 >= v742)
                  v649 = -(uint64_t)(v743 * v736);
                else
                  v649 = 0;
                v282 = &v647[v649];
                v69 += 4 * v649 + 4 * v743;
                v66 = (char *)v76;
                v74 = v282;
              }
              else
              {
                v74 += v743;
                v66 += v43;
              }
              v77 += 4 * v746;
              v67 += v748;
              --v757[0];
            }
            while (v757[0]);
            goto LABEL_1103;
          case 12:
            if ((_DWORD)v26)
            {
              v410 = (int)v26;
              do
              {
                v411 = v767[0];
                do
                {
                  if (v44)
                    v412 = *v66;
                  else
                    v412 = 255;
                  v413 = (int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*(_DWORD *)v77), (uint32x2_t)0xFFFFFFECFFFFFFF6);
                  v414 = (int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v74), (uint32x2_t)0xFFFFFFECFFFFFFF6);
                  v415 = v412 + *v67;
                  if (v415 >= 0xFF)
                    LOBYTE(v415) = -1;
                  v416 = (*v74 & 0x3FF) + (*(_DWORD *)v77 & 0x3FF);
                  if (v416 >= 0x3FF)
                    v416 = 1023;
                  v417 = (int32x2_t)vshl_u32(vmin_u32((uint32x2_t)vadd_s32((int32x2_t)vand_s8(v414, (int8x8_t)0x300000003), (int32x2_t)vand_s8(v413, (int8x8_t)0x300000003)), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                  *(_DWORD *)v77 = vorr_s8((int8x8_t)v417, (int8x8_t)vdup_lane_s32(v417, 1)).u32[0] | v416 | 0xC0000000;
                  *v67 = v415;
                  v67 += v410;
                  v418 = &v74[v734];
                  if ((unint64_t)v418 >= v69)
                    v419 = -(uint64_t)v737;
                  else
                    v419 = 0;
                  v66 += v44 + v419;
                  v74 = &v418[v419];
                  v77 += 4 * v734;
                  --v411;
                }
                while (v411);
                if (v742)
                {
                  v420 = &v750[v743];
                  if ((unint64_t)v420 >= v742)
                    v421 = -(v43 * v736);
                  else
                    v421 = 0;
                  v76 += v43 + v421;
                  if ((unint64_t)v420 >= v742)
                    v422 = -(uint64_t)(v743 * v736);
                  else
                    v422 = 0;
                  v74 = &v420[v422];
                  v69 += 4 * v422 + 4 * v743;
                  v66 = (char *)v76;
                  v750 = v74;
                }
                else
                {
                  v74 += v743;
                  v66 += v43;
                }
                v77 += 4 * v746;
                v67 += v748;
                --v757[0];
              }
              while (v757[0]);
              goto LABEL_1104;
            }
            v282 = v750;
            do
            {
              v650 = v767[0];
              do
              {
                v651 = (*v74 & 0x3FF) + (*(_DWORD *)v77 & 0x3FF);
                if (v651 >= 0x3FF)
                  v651 = 1023;
                v652 = (int32x2_t)vshl_u32(vmin_u32((uint32x2_t)vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v74), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*(_DWORD *)v77), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003)), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                *(_DWORD *)v77 = vorr_s8((int8x8_t)v652, (int8x8_t)vdup_lane_s32(v652, 1)).u32[0] | v651 | 0xC0000000;
                v653 = &v74[v734];
                if ((unint64_t)v653 >= v69)
                  v654 = -(uint64_t)v737;
                else
                  v654 = 0;
                v66 += v44 + v654;
                v74 = &v653[v654];
                v77 += 4 * v734;
                --v650;
              }
              while (v650);
              if (v742)
              {
                v655 = &v282[v743];
                if ((unint64_t)v655 >= v742)
                  v656 = -(v43 * v736);
                else
                  v656 = 0;
                v76 += v43 + v656;
                if ((unint64_t)v655 >= v742)
                  v657 = -(uint64_t)(v743 * v736);
                else
                  v657 = 0;
                v282 = &v655[v657];
                v69 += 4 * v657 + 4 * v743;
                v66 = (char *)v76;
                v74 = v282;
              }
              else
              {
                v74 += v743;
                v66 += v43;
              }
              v77 += 4 * v746;
              v67 += v748;
              --v757[0];
            }
            while (v757[0]);
            goto LABEL_1103;
          case 13:
            v741 = (unsigned __int8 *)v76;
            v728 = v9;
            v730 = v42;
            v423 = (int)v26;
            v424 = v44;
            v726 = v25;
            v710 = -(v43 * v736);
            while (1)
            {
              v425 = v767[0];
              v426 = v69;
              do
              {
                if (v44)
                {
                  v427 = *v66;
                  if (!*v66)
                    goto LABEL_646;
                  if ((_DWORD)v26)
                    goto LABEL_641;
                }
                else
                {
                  v427 = 255;
                  if ((_DWORD)v26)
                  {
LABEL_641:
                    if (*v67)
                    {
                      v428 = PDAmultiplyPDA(*(_DWORD *)v77, *v67, *v74, v427);
                      v69 = v426;
                      v44 = v753;
                      LODWORD(v26) = v755;
                      *(_DWORD *)v77 = HIDWORD(v428);
                      *v67 = v428;
                    }
                    else
                    {
                      *(_DWORD *)v77 = *v74;
                      *v67 = v427;
                    }
                    goto LABEL_646;
                  }
                }
                v429 = PDAmultiplyPDA(*(_DWORD *)v77, 255, *v74, v427);
                v69 = v426;
                v44 = v753;
                LODWORD(v26) = v755;
                *(_DWORD *)v77 = HIDWORD(v429);
LABEL_646:
                v67 += v423;
                v430 = &v74[v734];
                if ((unint64_t)v430 >= v69)
                  v431 = -(uint64_t)v737;
                else
                  v431 = 0;
                v66 += v424 + v431;
                v74 = &v430[v431];
                v77 += 4 * v734;
                --v425;
              }
              while (v425);
              if (v742)
              {
                v432 = &v750[v743];
                v43 = v740;
                v433 = v710;
                if ((unint64_t)v432 < v742)
                  v433 = 0;
                v66 = (char *)&v741[v740 + v433];
                v434 = -(uint64_t)(v743 * v736);
                if ((unint64_t)v432 < v742)
                  v434 = 0;
                v74 = &v432[v434];
                v69 += 4 * v434 + 4 * v743;
                v741 += v740 + v433;
                v750 = v74;
              }
              else
              {
                v74 += v743;
                v43 = v740;
                v66 += v740;
              }
              v77 += 4 * v746;
              v67 += v748;
              if (!--v757[0])
                goto LABEL_980;
            }
          case 14:
            v741 = (unsigned __int8 *)v76;
            v728 = v9;
            v730 = v42;
            v435 = (int)v26;
            v436 = v44;
            v726 = v25;
            v711 = -(v43 * v736);
            while (1)
            {
              v437 = v767[0];
              v438 = v69;
              do
              {
                if (v44)
                {
                  v439 = *v66;
                  if (!*v66)
                    goto LABEL_669;
                  if ((_DWORD)v26)
                    goto LABEL_664;
                }
                else
                {
                  v439 = 255;
                  if ((_DWORD)v26)
                  {
LABEL_664:
                    if (*v67)
                    {
                      v440 = PDAscreenPDA(*(_DWORD *)v77, *v67, *v74, v439);
                      v69 = v438;
                      v44 = v753;
                      LODWORD(v26) = v755;
                      *(_DWORD *)v77 = HIDWORD(v440);
                      *v67 = v440;
                    }
                    else
                    {
                      *(_DWORD *)v77 = *v74;
                      *v67 = v439;
                    }
                    goto LABEL_669;
                  }
                }
                v441 = PDAscreenPDA(*(_DWORD *)v77, 255, *v74, v439);
                v69 = v438;
                v44 = v753;
                LODWORD(v26) = v755;
                *(_DWORD *)v77 = HIDWORD(v441);
LABEL_669:
                v67 += v435;
                v442 = &v74[v734];
                if ((unint64_t)v442 >= v69)
                  v443 = -(uint64_t)v737;
                else
                  v443 = 0;
                v66 += v436 + v443;
                v74 = &v442[v443];
                v77 += 4 * v734;
                --v437;
              }
              while (v437);
              if (v742)
              {
                v444 = &v750[v743];
                v43 = v740;
                v445 = v711;
                if ((unint64_t)v444 < v742)
                  v445 = 0;
                v66 = (char *)&v741[v740 + v445];
                v446 = -(uint64_t)(v743 * v736);
                if ((unint64_t)v444 < v742)
                  v446 = 0;
                v74 = &v444[v446];
                v69 += 4 * v446 + 4 * v743;
                v741 += v740 + v445;
                v750 = v74;
              }
              else
              {
                v74 += v743;
                v43 = v740;
                v66 += v740;
              }
              v77 += 4 * v746;
              v67 += v748;
              if (!--v757[0])
                goto LABEL_980;
            }
          case 15:
            v741 = (unsigned __int8 *)v76;
            v728 = v9;
            v730 = v42;
            v447 = (int)v26;
            v448 = v44;
            v726 = v25;
            v712 = -(v43 * v736);
            while (1)
            {
              v449 = v767[0];
              v450 = v69;
              do
              {
                if (v44)
                {
                  v451 = *v66;
                  if (!*v66)
                    goto LABEL_692;
                  if ((_DWORD)v26)
                    goto LABEL_687;
                }
                else
                {
                  v451 = 255;
                  if ((_DWORD)v26)
                  {
LABEL_687:
                    if (*v67)
                    {
                      v452 = PDAoverlayPDA(*(_DWORD *)v77, *v67, *v74, v451);
                      v69 = v450;
                      v44 = v753;
                      LODWORD(v26) = v755;
                      *(_DWORD *)v77 = HIDWORD(v452);
                      *v67 = v452;
                    }
                    else
                    {
                      *(_DWORD *)v77 = *v74;
                      *v67 = v451;
                    }
                    goto LABEL_692;
                  }
                }
                v453 = PDAoverlayPDA(*(_DWORD *)v77, 255, *v74, v451);
                v69 = v450;
                v44 = v753;
                LODWORD(v26) = v755;
                *(_DWORD *)v77 = HIDWORD(v453);
LABEL_692:
                v67 += v447;
                v454 = &v74[v734];
                if ((unint64_t)v454 >= v69)
                  v455 = -(uint64_t)v737;
                else
                  v455 = 0;
                v66 += v448 + v455;
                v74 = &v454[v455];
                v77 += 4 * v734;
                --v449;
              }
              while (v449);
              if (v742)
              {
                v456 = &v750[v743];
                v43 = v740;
                v457 = v712;
                if ((unint64_t)v456 < v742)
                  v457 = 0;
                v66 = (char *)&v741[v740 + v457];
                v458 = -(uint64_t)(v743 * v736);
                if ((unint64_t)v456 < v742)
                  v458 = 0;
                v74 = &v456[v458];
                v69 += 4 * v458 + 4 * v743;
                v741 += v740 + v457;
                v750 = v74;
              }
              else
              {
                v74 += v743;
                v43 = v740;
                v66 += v740;
              }
              v77 += 4 * v746;
              v67 += v748;
              if (!--v757[0])
                goto LABEL_980;
            }
          case 16:
            v741 = (unsigned __int8 *)v76;
            v728 = v9;
            v730 = v42;
            v459 = (int)v26;
            v460 = v44;
            v726 = v25;
            v713 = -(v43 * v736);
            while (1)
            {
              v461 = v767[0];
              v462 = v69;
              do
              {
                if (v44)
                {
                  v463 = *v66;
                  if (!*v66)
                    goto LABEL_715;
                  if ((_DWORD)v26)
                    goto LABEL_710;
                }
                else
                {
                  v463 = 255;
                  if ((_DWORD)v26)
                  {
LABEL_710:
                    if (*v67)
                    {
                      v464 = PDAdarkenPDA(*(_DWORD *)v77, *v67, *v74, v463);
                      v69 = v462;
                      v44 = v753;
                      LODWORD(v26) = v755;
                      *(_DWORD *)v77 = HIDWORD(v464);
                      *v67 = v464;
                    }
                    else
                    {
                      *(_DWORD *)v77 = *v74;
                      *v67 = v463;
                    }
                    goto LABEL_715;
                  }
                }
                v465 = PDAdarkenPDA(*(_DWORD *)v77, 0xFFu, *v74, v463);
                v69 = v462;
                v44 = v753;
                LODWORD(v26) = v755;
                *(_DWORD *)v77 = HIDWORD(v465);
LABEL_715:
                v67 += v459;
                v466 = &v74[v734];
                if ((unint64_t)v466 >= v69)
                  v467 = -(uint64_t)v737;
                else
                  v467 = 0;
                v66 += v460 + v467;
                v74 = &v466[v467];
                v77 += 4 * v734;
                --v461;
              }
              while (v461);
              if (v742)
              {
                v468 = &v750[v743];
                v43 = v740;
                v469 = v713;
                if ((unint64_t)v468 < v742)
                  v469 = 0;
                v66 = (char *)&v741[v740 + v469];
                v470 = -(uint64_t)(v743 * v736);
                if ((unint64_t)v468 < v742)
                  v470 = 0;
                v74 = &v468[v470];
                v69 += 4 * v470 + 4 * v743;
                v741 += v740 + v469;
                v750 = v74;
              }
              else
              {
                v74 += v743;
                v43 = v740;
                v66 += v740;
              }
              v77 += 4 * v746;
              v67 += v748;
              if (!--v757[0])
                goto LABEL_980;
            }
          case 17:
            v741 = (unsigned __int8 *)v76;
            v728 = v9;
            v730 = v42;
            v471 = (int)v26;
            v472 = v44;
            v726 = v25;
            v714 = -(v43 * v736);
            while (1)
            {
              v473 = v767[0];
              v474 = v69;
              do
              {
                if (v44)
                {
                  v475 = *v66;
                  if (!*v66)
                    goto LABEL_738;
                  if ((_DWORD)v26)
                    goto LABEL_733;
                }
                else
                {
                  v475 = 255;
                  if ((_DWORD)v26)
                  {
LABEL_733:
                    if (*v67)
                    {
                      v476 = PDAlightenPDA(*(_DWORD *)v77, *v67, *v74, v475);
                      v69 = v474;
                      v44 = v753;
                      LODWORD(v26) = v755;
                      *(_DWORD *)v77 = HIDWORD(v476);
                      *v67 = v476;
                    }
                    else
                    {
                      *(_DWORD *)v77 = *v74;
                      *v67 = v475;
                    }
                    goto LABEL_738;
                  }
                }
                v477 = PDAlightenPDA(*(_DWORD *)v77, 0xFFu, *v74, v475);
                v69 = v474;
                v44 = v753;
                LODWORD(v26) = v755;
                *(_DWORD *)v77 = HIDWORD(v477);
LABEL_738:
                v67 += v471;
                v478 = &v74[v734];
                if ((unint64_t)v478 >= v69)
                  v479 = -(uint64_t)v737;
                else
                  v479 = 0;
                v66 += v472 + v479;
                v74 = &v478[v479];
                v77 += 4 * v734;
                --v473;
              }
              while (v473);
              if (v742)
              {
                v480 = &v750[v743];
                v43 = v740;
                v481 = v714;
                if ((unint64_t)v480 < v742)
                  v481 = 0;
                v66 = (char *)&v741[v740 + v481];
                v482 = -(uint64_t)(v743 * v736);
                if ((unint64_t)v480 < v742)
                  v482 = 0;
                v74 = &v480[v482];
                v69 += 4 * v482 + 4 * v743;
                v741 += v740 + v481;
                v750 = v74;
              }
              else
              {
                v74 += v743;
                v43 = v740;
                v66 += v740;
              }
              v77 += 4 * v746;
              v67 += v748;
              if (!--v757[0])
                goto LABEL_980;
            }
          case 18:
            v741 = (unsigned __int8 *)v76;
            v728 = v9;
            v730 = v42;
            v483 = (int)v26;
            v484 = v44;
            v726 = v25;
            v715 = -(v43 * v736);
            while (1)
            {
              v485 = v767[0];
              v486 = v69;
              do
              {
                if (v44)
                {
                  v487 = *v66;
                  if (!*v66)
                    goto LABEL_761;
                  if ((_DWORD)v26)
                    goto LABEL_756;
                }
                else
                {
                  v487 = 255;
                  if ((_DWORD)v26)
                  {
LABEL_756:
                    if (*v67)
                    {
                      v488 = PDAcolordodgePDA(*(_DWORD *)v77, *v67, *v74, v487);
                      v69 = v486;
                      v44 = v753;
                      LODWORD(v26) = v755;
                      *(_DWORD *)v77 = HIDWORD(v488);
                      *v67 = v488;
                    }
                    else
                    {
                      *(_DWORD *)v77 = *v74;
                      *v67 = v487;
                    }
                    goto LABEL_761;
                  }
                }
                v489 = PDAcolordodgePDA(*(_DWORD *)v77, 255, *v74, v487);
                v69 = v486;
                v44 = v753;
                LODWORD(v26) = v755;
                *(_DWORD *)v77 = HIDWORD(v489);
LABEL_761:
                v67 += v483;
                v490 = &v74[v734];
                if ((unint64_t)v490 >= v69)
                  v491 = -(uint64_t)v737;
                else
                  v491 = 0;
                v66 += v484 + v491;
                v74 = &v490[v491];
                v77 += 4 * v734;
                --v485;
              }
              while (v485);
              if (v742)
              {
                v492 = &v750[v743];
                v43 = v740;
                v493 = v715;
                if ((unint64_t)v492 < v742)
                  v493 = 0;
                v66 = (char *)&v741[v740 + v493];
                v494 = -(uint64_t)(v743 * v736);
                if ((unint64_t)v492 < v742)
                  v494 = 0;
                v74 = &v492[v494];
                v69 += 4 * v494 + 4 * v743;
                v741 += v740 + v493;
                v750 = v74;
              }
              else
              {
                v74 += v743;
                v43 = v740;
                v66 += v740;
              }
              v77 += 4 * v746;
              v67 += v748;
              if (!--v757[0])
                goto LABEL_980;
            }
          case 19:
            v741 = (unsigned __int8 *)v76;
            v728 = v9;
            v730 = v42;
            v495 = (int)v26;
            v496 = v44;
            v726 = v25;
            v716 = -(v43 * v736);
            while (1)
            {
              v497 = v767[0];
              v498 = v69;
              do
              {
                if (v44)
                {
                  v499 = *v66;
                  if (!*v66)
                    goto LABEL_784;
                  if ((_DWORD)v26)
                    goto LABEL_779;
                }
                else
                {
                  v499 = 255;
                  if ((_DWORD)v26)
                  {
LABEL_779:
                    if (*v67)
                    {
                      v500 = PDAcolorburnPDA(*(_DWORD *)v77, *v67, *v74, v499);
                      v69 = v498;
                      v44 = v753;
                      LODWORD(v26) = v755;
                      *(_DWORD *)v77 = HIDWORD(v500);
                      *v67 = v500;
                    }
                    else
                    {
                      *(_DWORD *)v77 = *v74;
                      *v67 = v499;
                    }
                    goto LABEL_784;
                  }
                }
                v501 = PDAcolorburnPDA(*(_DWORD *)v77, 255, *v74, v499);
                v69 = v498;
                v44 = v753;
                LODWORD(v26) = v755;
                *(_DWORD *)v77 = HIDWORD(v501);
LABEL_784:
                v67 += v495;
                v502 = &v74[v734];
                if ((unint64_t)v502 >= v69)
                  v503 = -(uint64_t)v737;
                else
                  v503 = 0;
                v66 += v496 + v503;
                v74 = &v502[v503];
                v77 += 4 * v734;
                --v497;
              }
              while (v497);
              if (v742)
              {
                v504 = &v750[v743];
                v43 = v740;
                v505 = v716;
                if ((unint64_t)v504 < v742)
                  v505 = 0;
                v66 = (char *)&v741[v740 + v505];
                v506 = -(uint64_t)(v743 * v736);
                if ((unint64_t)v504 < v742)
                  v506 = 0;
                v74 = &v504[v506];
                v69 += 4 * v506 + 4 * v743;
                v741 += v740 + v505;
                v750 = v74;
              }
              else
              {
                v74 += v743;
                v43 = v740;
                v66 += v740;
              }
              v77 += 4 * v746;
              v67 += v748;
              if (!--v757[0])
                goto LABEL_980;
            }
          case 20:
            v741 = (unsigned __int8 *)v76;
            v728 = v9;
            v730 = v42;
            v507 = (int)v26;
            v508 = v44;
            v726 = v25;
            v717 = -(v43 * v736);
            while (1)
            {
              v509 = v767[0];
              v510 = v69;
              do
              {
                if (v44)
                {
                  v511 = *v66;
                  if (!*v66)
                    goto LABEL_807;
                  if ((_DWORD)v26)
                    goto LABEL_802;
                }
                else
                {
                  v511 = 255;
                  if ((_DWORD)v26)
                  {
LABEL_802:
                    if (*v67)
                    {
                      v512 = PDAsoftlightPDA(*(_DWORD *)v77, *v67, *v74, v511);
                      v69 = v510;
                      v44 = v753;
                      LODWORD(v26) = v755;
                      *(_DWORD *)v77 = HIDWORD(v512);
                      *v67 = v512;
                    }
                    else
                    {
                      *(_DWORD *)v77 = *v74;
                      *v67 = v511;
                    }
                    goto LABEL_807;
                  }
                }
                v513 = PDAsoftlightPDA(*(_DWORD *)v77, 255, *v74, v511);
                v69 = v510;
                v44 = v753;
                LODWORD(v26) = v755;
                *(_DWORD *)v77 = HIDWORD(v513);
LABEL_807:
                v67 += v507;
                v514 = &v74[v734];
                if ((unint64_t)v514 >= v69)
                  v515 = -(uint64_t)v737;
                else
                  v515 = 0;
                v66 += v508 + v515;
                v74 = &v514[v515];
                v77 += 4 * v734;
                --v509;
              }
              while (v509);
              if (v742)
              {
                v516 = &v750[v743];
                v43 = v740;
                v517 = v717;
                if ((unint64_t)v516 < v742)
                  v517 = 0;
                v66 = (char *)&v741[v740 + v517];
                v518 = -(uint64_t)(v743 * v736);
                if ((unint64_t)v516 < v742)
                  v518 = 0;
                v74 = &v516[v518];
                v69 += 4 * v518 + 4 * v743;
                v741 += v740 + v517;
                v750 = v74;
              }
              else
              {
                v74 += v743;
                v43 = v740;
                v66 += v740;
              }
              v77 += 4 * v746;
              v67 += v748;
              if (!--v757[0])
                goto LABEL_980;
            }
          case 21:
            v741 = (unsigned __int8 *)v76;
            v728 = v9;
            v730 = v42;
            v519 = (int)v26;
            v520 = v44;
            v726 = v25;
            v718 = -(v43 * v736);
            while (1)
            {
              v521 = v767[0];
              v522 = v69;
              do
              {
                if (v44)
                {
                  v523 = *v66;
                  if (!*v66)
                    goto LABEL_830;
                  if ((_DWORD)v26)
                    goto LABEL_825;
                }
                else
                {
                  v523 = 255;
                  if ((_DWORD)v26)
                  {
LABEL_825:
                    if (*v67)
                    {
                      v524 = PDAhardlightPDA(*(_DWORD *)v77, *v67, *v74, v523);
                      v69 = v522;
                      v44 = v753;
                      LODWORD(v26) = v755;
                      *(_DWORD *)v77 = HIDWORD(v524);
                      *v67 = v524;
                    }
                    else
                    {
                      *(_DWORD *)v77 = *v74;
                      *v67 = v523;
                    }
                    goto LABEL_830;
                  }
                }
                v525 = PDAhardlightPDA(*(_DWORD *)v77, 255, *v74, v523);
                v69 = v522;
                v44 = v753;
                LODWORD(v26) = v755;
                *(_DWORD *)v77 = HIDWORD(v525);
LABEL_830:
                v67 += v519;
                v526 = &v74[v734];
                if ((unint64_t)v526 >= v69)
                  v527 = -(uint64_t)v737;
                else
                  v527 = 0;
                v66 += v520 + v527;
                v74 = &v526[v527];
                v77 += 4 * v734;
                --v521;
              }
              while (v521);
              if (v742)
              {
                v528 = &v750[v743];
                v43 = v740;
                v529 = v718;
                if ((unint64_t)v528 < v742)
                  v529 = 0;
                v66 = (char *)&v741[v740 + v529];
                v530 = -(uint64_t)(v743 * v736);
                if ((unint64_t)v528 < v742)
                  v530 = 0;
                v74 = &v528[v530];
                v69 += 4 * v530 + 4 * v743;
                v741 += v740 + v529;
                v750 = v74;
              }
              else
              {
                v74 += v743;
                v43 = v740;
                v66 += v740;
              }
              v77 += 4 * v746;
              v67 += v748;
              if (!--v757[0])
                goto LABEL_980;
            }
          case 22:
            v741 = (unsigned __int8 *)v76;
            v728 = v9;
            v730 = v42;
            v531 = (int)v26;
            v532 = v44;
            v726 = v25;
            v719 = -(v43 * v736);
            while (1)
            {
              v533 = v767[0];
              v534 = v69;
              do
              {
                if (v44)
                {
                  v535 = *v66;
                  if (!*v66)
                    goto LABEL_853;
                  if ((_DWORD)v26)
                    goto LABEL_848;
                }
                else
                {
                  v535 = 255;
                  if ((_DWORD)v26)
                  {
LABEL_848:
                    if (*v67)
                    {
                      v536 = PDAdifferencePDA(*(_DWORD *)v77, *v67, *v74, v535);
                      v69 = v534;
                      v44 = v753;
                      LODWORD(v26) = v755;
                      *(_DWORD *)v77 = HIDWORD(v536);
                      *v67 = v536;
                    }
                    else
                    {
                      *(_DWORD *)v77 = *v74;
                      *v67 = v535;
                    }
                    goto LABEL_853;
                  }
                }
                v537 = PDAdifferencePDA(*(_DWORD *)v77, 0xFFu, *v74, v535);
                v69 = v534;
                v44 = v753;
                LODWORD(v26) = v755;
                *(_DWORD *)v77 = HIDWORD(v537);
LABEL_853:
                v67 += v531;
                v538 = &v74[v734];
                if ((unint64_t)v538 >= v69)
                  v539 = -(uint64_t)v737;
                else
                  v539 = 0;
                v66 += v532 + v539;
                v74 = &v538[v539];
                v77 += 4 * v734;
                --v533;
              }
              while (v533);
              if (v742)
              {
                v540 = &v750[v743];
                v43 = v740;
                v541 = v719;
                if ((unint64_t)v540 < v742)
                  v541 = 0;
                v66 = (char *)&v741[v740 + v541];
                v542 = -(uint64_t)(v743 * v736);
                if ((unint64_t)v540 < v742)
                  v542 = 0;
                v74 = &v540[v542];
                v69 += 4 * v542 + 4 * v743;
                v741 += v740 + v541;
                v750 = v74;
              }
              else
              {
                v74 += v743;
                v43 = v740;
                v66 += v740;
              }
              v77 += 4 * v746;
              v67 += v748;
              if (!--v757[0])
                goto LABEL_980;
            }
          case 23:
            v741 = (unsigned __int8 *)v76;
            v728 = v9;
            v730 = v42;
            v543 = (int)v26;
            v544 = v44;
            v726 = v25;
            v720 = -(v43 * v736);
            while (1)
            {
              v545 = v767[0];
              v546 = v69;
              do
              {
                if (v44)
                {
                  v547 = *v66;
                  if (!*v66)
                    goto LABEL_876;
                  if ((_DWORD)v26)
                    goto LABEL_871;
                }
                else
                {
                  v547 = 255;
                  if ((_DWORD)v26)
                  {
LABEL_871:
                    if (*v67)
                    {
                      v548 = PDAexclusionPDA(*(_DWORD *)v77, *v67, *v74, v547);
                      v69 = v546;
                      v44 = v753;
                      LODWORD(v26) = v755;
                      *(_DWORD *)v77 = HIDWORD(v548);
                      *v67 = v548;
                    }
                    else
                    {
                      *(_DWORD *)v77 = *v74;
                      *v67 = v547;
                    }
                    goto LABEL_876;
                  }
                }
                v549 = PDAexclusionPDA(*(_DWORD *)v77, 255, *v74, v547);
                v69 = v546;
                v44 = v753;
                LODWORD(v26) = v755;
                *(_DWORD *)v77 = HIDWORD(v549);
LABEL_876:
                v67 += v543;
                v550 = &v74[v734];
                if ((unint64_t)v550 >= v69)
                  v551 = -(uint64_t)v737;
                else
                  v551 = 0;
                v66 += v544 + v551;
                v74 = &v550[v551];
                v77 += 4 * v734;
                --v545;
              }
              while (v545);
              if (v742)
              {
                v552 = &v750[v743];
                v43 = v740;
                v553 = v720;
                if ((unint64_t)v552 < v742)
                  v553 = 0;
                v66 = (char *)&v741[v740 + v553];
                v554 = -(uint64_t)(v743 * v736);
                if ((unint64_t)v552 < v742)
                  v554 = 0;
                v74 = &v552[v554];
                v69 += 4 * v554 + 4 * v743;
                v741 += v740 + v553;
                v750 = v74;
              }
              else
              {
                v74 += v743;
                v43 = v740;
                v66 += v740;
              }
              v77 += 4 * v746;
              v67 += v748;
              if (!--v757[0])
                goto LABEL_980;
            }
          case 24:
            v741 = (unsigned __int8 *)v76;
            v728 = v9;
            v730 = v42;
            v555 = (int)v26;
            v556 = v44;
            v726 = v25;
            v721 = -(v43 * v736);
            while (1)
            {
              v557 = v767[0];
              v558 = v69;
              do
              {
                if (v44)
                {
                  v559 = *v66;
                  if (!*v66)
                    goto LABEL_899;
                  if ((_DWORD)v26)
                    goto LABEL_894;
                }
                else
                {
                  v559 = 255;
                  if ((_DWORD)v26)
                  {
LABEL_894:
                    if (*v67)
                    {
                      v560 = PDAhuePDA(*(_DWORD *)v77, *v67, *v74, v559);
                      v69 = v558;
                      v44 = v753;
                      LODWORD(v26) = v755;
                      *(_DWORD *)v77 = HIDWORD(v560);
                      *v67 = v560;
                    }
                    else
                    {
                      *(_DWORD *)v77 = *v74;
                      *v67 = v559;
                    }
                    goto LABEL_899;
                  }
                }
                v561 = PDAhuePDA(*(_DWORD *)v77, 255, *v74, v559);
                v69 = v558;
                v44 = v753;
                LODWORD(v26) = v755;
                *(_DWORD *)v77 = HIDWORD(v561);
LABEL_899:
                v67 += v555;
                v562 = &v74[v734];
                if ((unint64_t)v562 >= v69)
                  v563 = -(uint64_t)v737;
                else
                  v563 = 0;
                v66 += v556 + v563;
                v74 = &v562[v563];
                v77 += 4 * v734;
                --v557;
              }
              while (v557);
              if (v742)
              {
                v564 = &v750[v743];
                v43 = v740;
                v565 = v721;
                if ((unint64_t)v564 < v742)
                  v565 = 0;
                v66 = (char *)&v741[v740 + v565];
                v566 = -(uint64_t)(v743 * v736);
                if ((unint64_t)v564 < v742)
                  v566 = 0;
                v74 = &v564[v566];
                v69 += 4 * v566 + 4 * v743;
                v741 += v740 + v565;
                v750 = v74;
              }
              else
              {
                v74 += v743;
                v43 = v740;
                v66 += v740;
              }
              v77 += 4 * v746;
              v67 += v748;
              if (!--v757[0])
                goto LABEL_980;
            }
          case 25:
            v741 = (unsigned __int8 *)v76;
            v728 = v9;
            v730 = v42;
            v567 = (int)v26;
            v568 = v44;
            v726 = v25;
            v722 = -(v43 * v736);
            while (1)
            {
              v569 = v767[0];
              v570 = v69;
              do
              {
                if (v44)
                {
                  v571 = *v66;
                  if (!*v66)
                    goto LABEL_922;
                  if ((_DWORD)v26)
                    goto LABEL_917;
                }
                else
                {
                  v571 = 255;
                  if ((_DWORD)v26)
                  {
LABEL_917:
                    if (*v67)
                    {
                      v572 = PDAsaturationPDA(*(_DWORD *)v77, *v67, *v74, v571);
                      v69 = v570;
                      v44 = v753;
                      LODWORD(v26) = v755;
                      *(_DWORD *)v77 = HIDWORD(v572);
                      *v67 = v572;
                    }
                    else
                    {
                      *(_DWORD *)v77 = *v74;
                      *v67 = v571;
                    }
                    goto LABEL_922;
                  }
                }
                v573 = PDAsaturationPDA(*(_DWORD *)v77, 255, *v74, v571);
                v69 = v570;
                v44 = v753;
                LODWORD(v26) = v755;
                *(_DWORD *)v77 = HIDWORD(v573);
LABEL_922:
                v67 += v567;
                v574 = &v74[v734];
                if ((unint64_t)v574 >= v69)
                  v575 = -(uint64_t)v737;
                else
                  v575 = 0;
                v66 += v568 + v575;
                v74 = &v574[v575];
                v77 += 4 * v734;
                --v569;
              }
              while (v569);
              if (v742)
              {
                v576 = &v750[v743];
                v43 = v740;
                v577 = v722;
                if ((unint64_t)v576 < v742)
                  v577 = 0;
                v66 = (char *)&v741[v740 + v577];
                v578 = -(uint64_t)(v743 * v736);
                if ((unint64_t)v576 < v742)
                  v578 = 0;
                v74 = &v576[v578];
                v69 += 4 * v578 + 4 * v743;
                v741 += v740 + v577;
                v750 = v74;
              }
              else
              {
                v74 += v743;
                v43 = v740;
                v66 += v740;
              }
              v77 += 4 * v746;
              v67 += v748;
              if (!--v757[0])
                goto LABEL_980;
            }
          case 26:
            v741 = (unsigned __int8 *)v76;
            v728 = v9;
            v730 = v42;
            v579 = (int)v26;
            v580 = v44;
            v726 = v25;
            v723 = -(v43 * v736);
            while (1)
            {
              v581 = v767[0];
              v582 = v69;
              do
              {
                if (v44)
                {
                  v583 = *v66;
                  if (!*v66)
                    goto LABEL_945;
                  if ((_DWORD)v26)
                    goto LABEL_940;
                }
                else
                {
                  v583 = 255;
                  if ((_DWORD)v26)
                  {
LABEL_940:
                    v584 = *v74;
                    if (*v67)
                    {
                      v585 = PDAluminosityPDA(v584, v583, *(_DWORD *)v77, *v67);
                      v69 = v582;
                      v44 = v753;
                      LODWORD(v26) = v755;
                      *(_DWORD *)v77 = HIDWORD(v585);
                      *v67 = v585;
                    }
                    else
                    {
                      *(_DWORD *)v77 = v584;
                      *v67 = v583;
                    }
                    goto LABEL_945;
                  }
                }
                v586 = PDAluminosityPDA(*v74, v583, *(_DWORD *)v77, 0xFFu);
                v69 = v582;
                v44 = v753;
                LODWORD(v26) = v755;
                *(_DWORD *)v77 = HIDWORD(v586);
LABEL_945:
                v67 += v579;
                v587 = &v74[v734];
                if ((unint64_t)v587 >= v69)
                  v588 = -(uint64_t)v737;
                else
                  v588 = 0;
                v66 += v580 + v588;
                v74 = &v587[v588];
                v77 += 4 * v734;
                --v581;
              }
              while (v581);
              if (v742)
              {
                v589 = &v750[v743];
                v43 = v740;
                v590 = v723;
                if ((unint64_t)v589 < v742)
                  v590 = 0;
                v66 = (char *)&v741[v740 + v590];
                v591 = -(uint64_t)(v743 * v736);
                if ((unint64_t)v589 < v742)
                  v591 = 0;
                v74 = &v589[v591];
                v69 += 4 * v591 + 4 * v743;
                v741 += v740 + v590;
                v750 = v74;
              }
              else
              {
                v74 += v743;
                v43 = v740;
                v66 += v740;
              }
              v77 += 4 * v746;
              v67 += v748;
              if (!--v757[0])
                goto LABEL_980;
            }
          case 27:
            v741 = (unsigned __int8 *)v76;
            v728 = v9;
            v730 = v42;
            v592 = (int)v26;
            v593 = v44;
            v726 = v25;
            v724 = -(v43 * v736);
            break;
          default:
            goto LABEL_1104;
        }
        break;
      }
LABEL_959:
      v594 = v767[0];
      v595 = v69;
      while (1)
      {
        if (v44)
        {
          v596 = *v66;
          if (!*v66)
            goto LABEL_968;
          if (!(_DWORD)v26)
            goto LABEL_966;
        }
        else
        {
          v596 = 255;
          if (!(_DWORD)v26)
          {
LABEL_966:
            v598 = PDAluminosityPDA(*(_DWORD *)v77, 0xFFu, *v74, v596);
            v69 = v595;
            v44 = v753;
            LODWORD(v26) = v755;
            *(_DWORD *)v77 = HIDWORD(v598);
            goto LABEL_968;
          }
        }
        if (*v67)
        {
          v597 = PDAluminosityPDA(*(_DWORD *)v77, *v67, *v74, v596);
          v69 = v595;
          v44 = v753;
          LODWORD(v26) = v755;
          *(_DWORD *)v77 = HIDWORD(v597);
          *v67 = v597;
        }
        else
        {
          *(_DWORD *)v77 = *v74;
          *v67 = v596;
        }
LABEL_968:
        v67 += v592;
        v599 = &v74[v734];
        if ((unint64_t)v599 >= v69)
          v600 = -(uint64_t)v737;
        else
          v600 = 0;
        v66 += v593 + v600;
        v74 = &v599[v600];
        v77 += 4 * v734;
        if (!--v594)
        {
          if (v742)
          {
            v601 = &v750[v743];
            v43 = v740;
            v602 = v724;
            if ((unint64_t)v601 < v742)
              v602 = 0;
            v66 = (char *)&v741[v740 + v602];
            v603 = -(uint64_t)(v743 * v736);
            if ((unint64_t)v601 < v742)
              v603 = 0;
            v74 = &v601[v603];
            v69 += 4 * v603 + 4 * v743;
            v741 += v740 + v602;
            v750 = v74;
          }
          else
          {
            v74 += v743;
            v43 = v740;
            v66 += v740;
          }
          v77 += 4 * v746;
          v67 += v748;
          if (!--v757[0])
          {
LABEL_980:
            v733 = v69;
            v13 = v707;
            v25 = v726;
            v9 = v728;
            v42 = v730;
            goto LABEL_1105;
          }
          goto LABEL_959;
        }
      }
    }
    v734 = v63;
    v68 = v63 * (int)v14;
    v748 = v25 - (int)v26 * (int)v14;
    v69 = -1;
    v736 = v43;
    v70 = v743;
    v737 = v743;
    goto LABEL_62;
  }
  v19 = *(_DWORD *)(v3 + 128);
  if ((v19 | 8) == 8)
  {
    if ((*(_DWORD *)v3 & 0xFF00) == 0x400)
      CIF10_mark_constmask(v3, v11, v4, v5, v6, v7, v8);
    else
      CIF10_mark_pixelmask(v3, v11);
    return 1;
  }
  v27 = *(_DWORD *)(v3 + 112);
  v28 = *(_DWORD *)(v3 + 116);
  v29 = (v27 + 15) & 0xFFFFFFF0;
  v30 = v29 * v28;
  if ((int)v30 <= 4096)
  {
    v32 = v767;
    goto LABEL_38;
  }
  v31 = malloc_type_malloc(v30, 0x85316A6AuLL);
  if (v31)
  {
    v32 = v31;
    v18 = *(uint16x4_t **)(v13 + 136);
    v19 = *(_DWORD *)(v13 + 128);
LABEL_38:
    CGSConvertBitsToMask(v18, *(_DWORD *)(v13 + 124), v32, v29, v27, v28, v19);
    v55 = *(_OWORD *)(v13 + 112);
    v763 = *(_OWORD *)(v13 + 96);
    v764 = v55;
    v56 = *(_OWORD *)(v13 + 144);
    v765 = *(_OWORD *)(v13 + 128);
    v766 = v56;
    v57 = *(_OWORD *)(v13 + 48);
    v759 = *(_OWORD *)(v13 + 32);
    v760 = v57;
    v58 = *(_OWORD *)(v13 + 80);
    v761 = *(_OWORD *)(v13 + 64);
    v762 = v58;
    v59 = *(_OWORD *)v13;
    v60 = *(_OWORD *)(v13 + 16);
    *(_OWORD *)v757 = *(_OWORD *)v13;
    v758 = v60;
    HIDWORD(v764) = (v27 + 15) & 0xFFFFFFF0;
    *((_QWORD *)&v765 + 1) = v32;
    if (BYTE1(v757[0]) << 8 == 1024)
      CIF10_mark_constmask((uint64_t)v757, v11, *(double *)&v59, *(double *)&v60, v52, v53, v54);
    else
      CIF10_mark_pixelmask((unint64_t)v757, v11);
    if (v32 == (_BYTE *)v767)
      return 1;
    v61 = v32;
    goto LABEL_1131;
  }
  return 1;
}

unint64_t PDAmultiplyPDA(unsigned int a1, int a2, __int16 a3, int a4)
{
  int32x2_t v4;
  unsigned int v5;
  int32x2_t v6;
  double v7;
  int32x2_t v8;

  v4 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a3), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003);
  v5 = ((a4 ^ 0xFF) + (a3 & 0x3FF)) * (a1 & 0x3FF);
  v6 = vmul_s32(vadd_s32(v4, vdup_n_s32(a4 ^ 0xFFu)), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a1), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003));
  v7 = COERCE_DOUBLE(vmla_s32(v6, v4, vdup_n_s32(a2 ^ 0xFFu)));
  if (a2 != 255)
  {
    v5 += (a3 & 0x3FF) * (a2 ^ 0xFF);
    *(double *)&v6 = v7;
  }
  v8 = (int32x2_t)vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32((uint32x2_t)v6, (uint32x2_t)v6, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
  return ((255 * (a4 + a2) - a4 * a2 + ((255 * (a4 + a2) - a4 * a2) >> 8) + 1) >> 8) | ((unint64_t)(vorr_s8((int8x8_t)v8, (int8x8_t)vdup_lane_s32(v8, 1)).u32[0] | ((v5 + (v5 >> 8) + 1) >> 8) & 0x3FF | 0xC0000000) << 32);
}

unint64_t PDAscreenPDA(unsigned int a1, int a2, unsigned int a3, int a4)
{
  unsigned int v4;
  int32x2_t v5;
  int32x2_t v6;
  int8x8_t v7;

  v4 = (a3 & 0x3FF) * (255 - (a1 & 0x3FF)) - (a1 & 0x3FF) + ((a1 & 0x3FF) << 8);
  v5 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a1), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003);
  v6 = vmla_s32(vmul_s32(v5, (int32x2_t)0xFF000000FFLL), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a3), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vsub_s32((int32x2_t)0xFF000000FFLL, v5));
  v5.i32[0] = vshr_n_u32((uint32x2_t)v6, 8uLL).u32[0];
  v5.i32[1] = vshr_n_s32(v6, 8uLL).i32[1];
  v7 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32((uint32x2_t)vadd_s32(v5, v6), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
  return ((255 * (a4 + a2) - a4 * a2 + ((255 * (a4 + a2) - a4 * a2) >> 8) + 1) >> 8) | ((unint64_t)(((v4 + (v4 >> 8) + 1) >> 8) & 0x3FF | v7.i32[0] | v7.i32[1] | 0xC0000000) << 32);
}

unint64_t PDAoverlayPDA(unsigned int a1, int a2, unsigned int a3, int a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  v4 = (a1 >> 20) & 0x3FF;
  v5 = (a1 >> 10) & 0x3FF;
  v6 = a1 & 0x3FF;
  v7 = (a3 >> 20) & 0x3FF;
  v8 = (a3 >> 10) & 0x3FF;
  v9 = a3 & 0x3FF;
  v10 = 2 * v4 * v7;
  v11 = 2 * v5 * v8;
  v12 = 2 * v6;
  v13 = a4 * a2;
  v14 = (a2 + 1) >> 1;
  v15 = a4 + 255;
  v16 = a2 + 255;
  v17 = (a4 + 255) * v4 + v7 * (a2 + 255) - (a4 * a2 + v10);
  v18 = a4 ^ 0xFF;
  v19 = a2 ^ 0xFF;
  v20 = v7 * (a2 ^ 0xFF) + (a4 ^ 0xFF) * v4 + v10;
  if (v4 < v14)
    v21 = v20;
  else
    v21 = v17;
  v22 = v15 * v5 + v8 * v16 - (v13 + v11);
  v23 = v8 * v19 + v18 * v5 + v11;
  if (v5 < v14)
    v24 = v23;
  else
    v24 = v22;
  if (v6 < v14)
    v25 = v18 * v6 + (v12 + v19) * v9;
  else
    v25 = v9 * v16 - (v13 + v12 * (a3 & 0x3FF)) + v15 * v6;
  return ((255 * (a4 + a2) - v13 + ((255 * (a4 + a2) - v13) >> 8) + 1) >> 8) | ((unint64_t)((((v21 + (v21 >> 8)) << 12) + 4096) & 0x3FF00000 | (4 * (v24 + (v24 >> 8)) + 4) & 0xFFC00 | ((v25 + (v25 >> 8) + 1) >> 8) & 0x3FF | 0xC0000000) << 32);
}

unint64_t PDAlightenPDA(__int16 a1, unsigned int a2, __int16 a3, unsigned int a4)
{
  int32x2_t v4;
  int32x2_t v5;
  double v6;
  unsigned int v7;
  double v8;
  unsigned int v9;
  int32x2_t v10;
  double v11;
  int32x2_t v12;

  v4 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a1), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003);
  v5 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a3), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003);
  v6 = COERCE_DOUBLE(vmax_u32((uint32x2_t)vmul_s32(v5, vdup_n_s32(a2)), (uint32x2_t)vmul_s32(v4, vdup_n_s32(a4))));
  v7 = (a1 & 0x3FF) * a4;
  if ((a3 & 0x3FF) * a2 > v7)
    v7 = (a3 & 0x3FF) * a2;
  v8 = COERCE_DOUBLE(vmla_s32(*(int32x2_t *)&v6, vdup_n_s32(a4 ^ 0xFF), v4));
  v9 = v7 + (a4 ^ 0xFF) * (a1 & 0x3FF);
  if (a4 == 255)
  {
    v9 = v7;
    *(double *)&v10 = v6;
  }
  else
  {
    *(double *)&v10 = v8;
  }
  v11 = COERCE_DOUBLE(vmla_s32(v10, v5, vdup_n_s32(a2 ^ 0xFF)));
  if (a2 != 255)
  {
    v9 += (a3 & 0x3FF) * (a2 ^ 0xFF);
    *(double *)&v10 = v11;
  }
  v12 = (int32x2_t)vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32((uint32x2_t)v10, (uint32x2_t)v10, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
  return ((int)(255 * (a4 + a2) - a4 * a2 + ((int)(255 * (a4 + a2) - a4 * a2) >> 8) + 1) >> 8) | ((unint64_t)(vorr_s8((int8x8_t)v12, (int8x8_t)vdup_lane_s32(v12, 1)).u32[0] | ((v9 + (v9 >> 8) + 1) >> 8) & 0x3FF | 0xC0000000) << 32);
}

unint64_t PDAdarkenPDA(__int16 a1, unsigned int a2, __int16 a3, unsigned int a4)
{
  int32x2_t v4;
  int32x2_t v5;
  double v6;
  unsigned int v7;
  double v8;
  unsigned int v9;
  int32x2_t v10;
  double v11;
  int32x2_t v12;

  v4 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a1), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003);
  v5 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a3), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003);
  v6 = COERCE_DOUBLE(vmin_u32((uint32x2_t)vmul_s32(v5, vdup_n_s32(a2)), (uint32x2_t)vmul_s32(v4, vdup_n_s32(a4))));
  v7 = (a1 & 0x3FF) * a4;
  if ((a3 & 0x3FF) * a2 < v7)
    v7 = (a3 & 0x3FF) * a2;
  v8 = COERCE_DOUBLE(vmla_s32(*(int32x2_t *)&v6, vdup_n_s32(a4 ^ 0xFF), v4));
  v9 = v7 + (a4 ^ 0xFF) * (a1 & 0x3FF);
  if (a4 == 255)
  {
    v9 = v7;
    *(double *)&v10 = v6;
  }
  else
  {
    *(double *)&v10 = v8;
  }
  v11 = COERCE_DOUBLE(vmla_s32(v10, v5, vdup_n_s32(a2 ^ 0xFF)));
  if (a2 != 255)
  {
    v9 += (a3 & 0x3FF) * (a2 ^ 0xFF);
    *(double *)&v10 = v11;
  }
  v12 = (int32x2_t)vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32((uint32x2_t)v10, (uint32x2_t)v10, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
  return ((int)(255 * (a4 + a2) - a4 * a2 + ((int)(255 * (a4 + a2) - a4 * a2) >> 8) + 1) >> 8) | ((unint64_t)(vorr_s8((int8x8_t)v12, (int8x8_t)vdup_lane_s32(v12, 1)).u32[0] | ((v9 + (v9 >> 8) + 1) >> 8) & 0x3FF | 0xC0000000) << 32);
}

unint64_t PDAcolordodgePDA(unsigned int a1, int a2, unsigned int a3, int a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v4 = (a1 >> 20) & 0x3FF;
  v5 = (a1 >> 10) & 0x3FF;
  v6 = a1 & 0x3FF;
  v7 = (a3 >> 20) & 0x3FF;
  v8 = a4 * a4;
  if (v4)
  {
    if (a4 == v7)
      v9 = 65025;
    else
      v9 = v8 * v4 / (a4 - v7);
  }
  else
  {
    v9 = 0;
  }
  v10 = (a3 >> 10) & 0x3FF;
  if (v5)
  {
    if (a4 == v10)
      v11 = 65025;
    else
      v11 = v8 * v5 / (a4 - v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = a3 & 0x3FF;
  if ((a1 & 0x3FF) != 0)
  {
    if (a4 == v12)
      v13 = 65025;
    else
      v13 = v8 * v6 / (a4 - v12);
  }
  else
  {
    v13 = 0;
  }
  v14 = v9 + (a4 ^ 0xFF) * v4;
  v15 = v11 + (a4 ^ 0xFF) * v5;
  v16 = v13 + (a4 ^ 0xFF) * v6;
  if (a4 == 255)
  {
    v14 = v9;
    v15 = v11;
    v16 = v13;
  }
  v17 = v14 + v7 * (a2 ^ 0xFF);
  v18 = v15 + v10 * (a2 ^ 0xFF);
  if (a2 == 255)
  {
    v17 = v14;
    v19 = v16;
  }
  else
  {
    v15 = v18;
    v19 = v16 + v12 * (a2 ^ 0xFF);
  }
  v20 = 255 * (a4 + a2) - a4 * a2;
  if (v17 >= v20)
    v17 = 255 * (a4 + a2) - a4 * a2;
  if (v15 >= v20)
    v15 = 255 * (a4 + a2) - a4 * a2;
  if (v19 >= v20)
    v19 = 255 * (a4 + a2) - a4 * a2;
  return ((v20 + (v20 >> 8) + 1) >> 8) | ((unint64_t)((((v17 + (v17 >> 8)) << 12)
                                                                          + 4096) & 0x3FF00000 | (4
                                                                                                * (v15
                                                                                                 + (v15 >> 8))
                                                                                                + 4) & 0xFFC00 | ((v19 + (v19 >> 8) + 1) >> 8) & 0x3FF | 0xC0000000) << 32);
}

unint64_t PDAcolorburnPDA(unsigned int a1, int a2, unsigned int a3, int a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;

  v4 = (a1 >> 20) & 0x3FF;
  v5 = (a1 >> 10) & 0x3FF;
  v6 = a1 & 0x3FF;
  v7 = (a3 >> 20) & 0x3FF;
  v8 = (a3 >> 10) & 0x3FF;
  v9 = a3 & 0x3FF;
  v10 = a4 * a2 + (a4 ^ 0xFF) * v4;
  v11 = a4 * a2 + (a4 ^ 0xFF) * v5;
  if (a4 == 255)
  {
    v10 = a4 * a2;
    v11 = 255 * a2;
    v12 = 255 * a2;
  }
  else
  {
    v12 = a4 * a2 + (a4 ^ 0xFF) * (a1 & 0x3FF);
  }
  if (a2 == 255)
    v13 = v10;
  else
    v13 = v10 + v7 * (a2 ^ 0xFF);
  if (a2 == 255)
    v14 = v11;
  else
    v14 = v11 + v8 * (a2 ^ 0xFF);
  if (a2 == 255)
    v15 = v12;
  else
    v15 = v12 + v9 * (a2 ^ 0xFF);
  v16 = a2 - v4;
  if (v16)
  {
    if (v7)
      v13 = (v13 - a4 * a4 * v16 / v7) & ~((int)(v13 - a4 * a4 * v16 / v7) >> 31);
    else
      v13 = 0;
  }
  v17 = a2 - v5;
  if (v17)
  {
    if (v8)
      v14 = (v14 - a4 * a4 * v17 / v8) & ~((int)(v14 - a4 * a4 * v17 / v8) >> 31);
    else
      v14 = 0;
  }
  v18 = a2 - v6;
  if (v18)
  {
    if ((a3 & 0x3FF) != 0)
      v15 = (v15 - a4 * a4 * v18 / v9) & ~((int)(v15 - a4 * a4 * v18 / v9) >> 31);
    else
      v15 = 0;
  }
  return ((255 * (a4 + a2) - a4 * a2 + ((255 * (a4 + a2) - a4 * a2) >> 8) + 1) >> 8) | ((unint64_t)((((v13 + (v13 >> 8)) << 12) + 4096) & 0x3FF00000 | (4 * (v14 + (v14 >> 8)) + 4) & 0xFFC00 | ((v15 + (v15 >> 8) + 1) >> 8) & 0x3FF | 0xC0000000) << 32);
}

unint64_t PDAhardlightPDA(unsigned int a1, int a2, unsigned int a3, int a4)
{
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;

  v4 = (a1 >> 20) & 0x3FF;
  v5 = (a1 >> 10) & 0x3FF;
  v6 = a1 & 0x3FF;
  v7 = (a3 >> 20) & 0x3FF;
  v8 = (a3 >> 10) & 0x3FF;
  v9 = a3 & 0x3FF;
  v10 = 2 * v4 * v7;
  v11 = 2 * v5 * v8;
  v12 = 2 * v6;
  v13 = a4 * a2;
  v14 = (a4 + 1) >> 1;
  v15 = a4 ^ 0xFF;
  v16 = a2 ^ 0xFF;
  v17 = v7 * (a2 ^ 0xFF) + (a4 ^ 0xFF) * v4 + v10;
  v18 = a4 + 255;
  v19 = a2 + 255;
  v20 = (a4 + 255) * v4 + v7 * (a2 + 255) - (a4 * a2 + v10);
  if (v7 <= v14)
    v20 = v17;
  v21 = v8 * v16 + v15 * v5 + v11;
  v22 = v18 * v5 + v8 * v19 - (v13 + v11);
  if (v8 <= v14)
    v22 = v21;
  v23 = v15 * v6 + (v12 + v16) * v9;
  v24 = v9 * v19 - (v13 + v12 * (a3 & 0x3FF)) + v18 * v6;
  if (v9 <= v14)
    v24 = v23;
  return ((255 * (a4 + a2) - v13 + ((255 * (a4 + a2) - v13) >> 8) + 1) >> 8) | ((unint64_t)((((v20 + (v20 >> 8)) << 12) + 4096) & 0x3FF00000 | (4 * (v22 + (v22 >> 8)) + 4) & 0xFFC00 | ((v24 + (v24 >> 8) + 1) >> 8) & 0x3FF | 0xC0000000) << 32);
}

unint64_t PDAsoftlightPDA(unsigned int a1, int a2, unsigned int a3, int a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;

  v4 = (a1 >> 20) & 0x3FF;
  v5 = (a1 >> 10) & 0x3FF;
  v6 = (a3 >> 20) & 0x3FF;
  v7 = (a3 >> 10) & 0x3FF;
  v8 = a3 & 0x3FF;
  v9 = 2 * v4 * v6 - v4 * v4 * (2 * v6 - a4) / a2;
  v10 = v9 & ~(v9 >> 31);
  v11 = 2 * v5 * v7 - v5 * v5 * (2 * v7 - a4) / a2;
  v12 = v11 & ~(v11 >> 31);
  v13 = v10 + (a4 ^ 0xFF) * v4;
  v14 = v12 + (a4 ^ 0xFF) * v5;
  v15 = ((2 * (a1 & 0x3FF) * v8 - (int)((a1 & 0x3FF) * (a1 & 0x3FF) * (2 * v8 - a4)) / a2) & ~((int)(2 * (a1 & 0x3FF) * v8 - (int)((a1 & 0x3FF) * (a1 & 0x3FF) * (2 * v8 - a4)) / a2) >> 31))
      + (a4 ^ 0xFF) * (a1 & 0x3FF);
  if (a4 == 255)
  {
    v13 = v10;
    v14 = v12;
    v15 = (2 * (a1 & 0x3FF) * v8 - (int)((a1 & 0x3FF) * (a1 & 0x3FF) * (2 * v8 - 255)) / a2) & ~((int)(2 * (a1 & 0x3FF) * v8 - (int)((a1 & 0x3FF) * (a1 & 0x3FF) * (2 * v8 - 255)) / a2) >> 31);
  }
  v16 = v13 + v6 * (a2 ^ 0xFF);
  v17 = v14 + v7 * (a2 ^ 0xFF);
  v18 = v15 + v8 * (a2 ^ 0xFF);
  if (a2 != 255)
  {
    v13 = v16;
    v14 = v17;
    v15 = v18;
  }
  return ((255 * (a4 + a2) - a4 * a2 + ((255 * (a4 + a2) - a4 * a2) >> 8) + 1) >> 8) | ((unint64_t)((((v13 + (v13 >> 8)) << 12) + 4096) & 0x3FF00000 | (4 * (v14 + (v14 >> 8)) + 4) & 0xFFC00 | ((v15 + (v15 >> 8) + 1) >> 8) & 0x3FF | 0xC0000000) << 32);
}

unint64_t PDAdifferencePDA(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  int32x2_t v4;
  int32x2_t v5;
  int32x2_t v6;
  int32x2_t v7;
  int32x2_t v8;
  int32x2_t v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  unsigned int v14;
  int v15;
  int32x2_t v16;
  uint32x2_t v17;
  int32x2_t v18;
  int32x2_t v19;
  int32x2_t v20;
  int8x8_t v21;

  v4 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a1), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003);
  v5 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a3), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003);
  v6 = vadd_s32(v5, v4);
  v7 = (int32x2_t)__PAIR64__(v4.u32[1], v5.u32[0]);
  v8 = vrev64_s32((int32x2_t)__PAIR64__(a2, a4));
  v4.i32[1] = v5.i32[1];
  v9 = vmul_s32(v4, (int32x2_t)__PAIR64__(a2, a4));
  v10 = (a1 & 0x3FF) * a4;
  v11 = (a3 & 0x3FF) * a2;
  v13 = v10 - v11;
  v12 = v10 - v11 < 0;
  v14 = 255 * ((a3 & 0x3FF) + (a1 & 0x3FF)) - v10 - v11;
  if (v12)
    v15 = -v13;
  else
    v15 = v13;
  v16 = vmul_s32(v7, v8);
  v17 = (uint32x2_t)__PAIR64__(v9.u32[1], v16.u32[0]);
  v18 = vneg_s32(v9);
  v9.i32[1] = v16.i32[1];
  v19 = (int32x2_t)vaba_u32((uint32x2_t)vsub_s32(vmla_s32(v18, v6, (int32x2_t)0xFF000000FFLL), v16), v17, (uint32x2_t)v9);
  v20.i32[0] = vshr_n_u32((uint32x2_t)v19, 8uLL).u32[0];
  v20.i32[1] = vshr_n_s32(v19, 8uLL).i32[1];
  v21 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32((uint32x2_t)vadd_s32(v20, v19), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
  return ((int)(255 * (a4 + a2) - a4 * a2 + ((int)(255 * (a4 + a2) - a4 * a2) >> 8) + 1) >> 8) | ((unint64_t)(((v14 + v15 + ((v14 + v15) >> 8) + 1) >> 8) & 0x3FF | v21.i32[0] | v21.i32[1] | 0xC0000000) << 32);
}

unint64_t PDAexclusionPDA(unsigned int a1, int a2, unsigned int a3, int a4)
{
  unsigned int v4;
  int32x2_t v5;
  int32x2_t v6;
  int32x2_t v7;
  int32x2_t v8;
  int32x2_t v9;
  int8x8_t v10;

  v4 = 255 * ((a3 & 0x3FF) + (a1 & 0x3FF)) - 2 * (a1 & 0x3FF) * (a3 & 0x3FF);
  v5 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a1), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003);
  v6 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a3), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003);
  v7 = vmul_s32(vadd_s32(v6, v5), (int32x2_t)0xFF000000FFLL);
  v8 = vmul_s32(v5, v6);
  v9 = vsub_s32(v7, vadd_s32(v8, v8));
  v6.i32[0] = vshr_n_u32((uint32x2_t)v9, 8uLL).u32[0];
  v6.i32[1] = vshr_n_s32(v9, 8uLL).i32[1];
  v10 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32((uint32x2_t)vadd_s32(v6, v9), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
  return ((255 * (a4 + a2) - a4 * a2 + ((255 * (a4 + a2) - a4 * a2) >> 8) + 1) >> 8) | ((unint64_t)(((v4 + (v4 >> 8) + 1) >> 8) & 0x3FF | v10.i32[0] | v10.i32[1] | 0xC0000000) << 32);
}

unint64_t PDAhuePDA(unsigned int a1, int a2, unsigned int a3, int a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  signed int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  signed int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  signed int v39;
  signed int v40;
  signed int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = (a1 >> 20) & 0x3FF;
  v5 = (a1 >> 10) & 0x3FF;
  v6 = a1 & 0x3FF;
  if (a4 == 255)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
  }
  else
  {
    v7 = (a4 ^ 0xFF) * v4;
    v4 = (v4 * a4 + ((v4 * a4) >> 8) + 1) >> 8;
    v8 = (a4 ^ 0xFF) * v5;
    v5 = (v5 * a4 + ((v5 * a4) >> 8) + 1) >> 8;
    v9 = (a4 ^ 0xFF) * v6;
    v6 = (v6 * a4 + ((v6 * a4) >> 8) + 1) >> 8;
  }
  v10 = (a3 >> 20) & 0x3FF;
  v11 = (a3 >> 10) & 0x3FF;
  v12 = a3 & 0x3FF;
  if (a2 != 255)
  {
    v7 += v10 * (a2 ^ 0xFF);
    v10 = (v10 * a2 + ((v10 * a2) >> 8) + 1) >> 8;
    v8 += v11 * (a2 ^ 0xFF);
    v11 = (v11 * a2 + ((v11 * a2) >> 8) + 1) >> 8;
    v9 += v12 * (a2 ^ 0xFF);
    v12 = (v12 * a2 + ((v12 * a2) >> 8) + 1) >> 8;
  }
  v39 = v10;
  v40 = v11;
  v41 = v12;
  v13 = v10 >= v11;
  v14 = v10 < v11;
  v15 = v13;
  if (v12 >= *(&v39 + v15))
  {
    v16 = v15;
    if (v12 > *(&v39 + v14))
    {
      v15 = v14;
      v14 = 2;
    }
  }
  else
  {
    v16 = 2;
  }
  v17 = *(&v39 + v14);
  v18 = *(&v39 + v16);
  v19 = __OFSUB__(v17, v18);
  v20 = v17 - v18;
  if ((v20 < 0) ^ v19 | (v20 == 0))
  {
    *(&v39 + v14) = 0;
    *(&v39 + v15) = 0;
  }
  else
  {
    if (v4 >= v5)
      v21 = v5;
    else
      v21 = v4;
    if (v4 <= v5)
      v22 = v5;
    else
      v22 = v4;
    if (v6 <= v22)
      v23 = v22;
    else
      v23 = v6;
    if (v6 >= v21)
      v22 = v23;
    else
      v21 = v6;
    v24 = v22 - v21;
    *(&v39 + v14) = v24;
    *(&v39 + v15) = ((*(&v39 + v15) - *(&v39 + v16)) * ((int)(v24 << 16) / v20) + 0x8000) >> 16;
  }
  *(&v39 + v16) = 0;
  v25 = 77 * (v4 - v39) + 151 * (v5 - v40) + 28 * (v6 - v41);
  v26 = v39 + ((v25 + 128) >> 8);
  v27 = v40 + ((v25 + 128) >> 8);
  v28 = (a4 * a2 + ((a4 * a2) >> 8) + 1) >> 8;
  v29 = v41 + ((v25 + 128) >> 8);
  if (v25 != (char)v25)
  {
    v30 = v39 >= v40 ? v40 + ((v25 + 128) >> 8) : v39 + ((v25 + 128) >> 8);
    v31 = v39 >= v40 ? v39 + ((v25 + 128) >> 8) : v40 + ((v25 + 128) >> 8);
    v32 = v29 <= v31 ? v31 : v41 + ((v25 + 128) >> 8);
    v33 = v29 >= v30 ? v30 : v41 + ((v25 + 128) >> 8);
    if (v29 >= v30)
      v31 = v32;
    if (v31 > v28 || v33 < 0)
    {
      v34 = (77 * v26 + 151 * v27 + 28 * v29 + 128) >> 8;
      if (v25 > -129)
      {
        v35 = v31 - v34;
        if (v31 != v34)
        {
          v36 = v28 - v34;
          goto LABEL_50;
        }
      }
      else
      {
        v35 = v34 - v33;
        if (v34 != v33)
        {
          v36 = (77 * v26 + 151 * v27 + 28 * v29 + 128) >> 8;
LABEL_50:
          v37 = (v36 << 16) / v35;
          v26 = v34 + ((v37 * (v26 - v34) + 0x8000) >> 16);
          v27 = v34 + ((v37 * (v27 - v34) + 0x8000) >> 16);
          v29 = v34 + ((v37 * (v29 - v34) + 0x8000) >> 16);
        }
      }
    }
  }
  return (a4 + a2 - v28) | ((unint64_t)(((((_WORD)v27
                                                              + (unsigned __int16)((v8 + (v8 >> 8) + 1) >> 8)) & 0x3FF) << 10) | ((v26 + ((v7 + (v7 >> 8) + 1) >> 8)) << 20) | (v29 + ((v9 + (v9 >> 8) + 1) >> 8)) & 0x3FF | 0xC0000000) << 32);
}

unint64_t PDAsaturationPDA(unsigned int a1, int a2, unsigned int a3, int a4)
{
  unsigned int v4;
  unsigned int v5;
  signed int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  signed int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  signed int v37;
  signed int v38;
  signed int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = (a1 >> 20) & 0x3FF;
  v5 = (a1 >> 10) & 0x3FF;
  v6 = a1 & 0x3FF;
  if (a4 == 255)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
  }
  else
  {
    v7 = (a4 ^ 0xFF) * v4;
    v4 = (v4 * a4 + ((v4 * a4) >> 8) + 1) >> 8;
    v8 = (a4 ^ 0xFF) * v5;
    v5 = (v5 * a4 + ((v5 * a4) >> 8) + 1) >> 8;
    v9 = (a4 ^ 0xFF) * v6;
    v6 = (v6 * a4 + ((v6 * a4) >> 8) + 1) >> 8;
  }
  v10 = (a3 >> 20) & 0x3FF;
  v11 = (a3 >> 10) & 0x3FF;
  v12 = a3 & 0x3FF;
  if (a2 != 255)
  {
    v7 += v10 * (a2 ^ 0xFF);
    v10 = (v10 * a2 + ((v10 * a2) >> 8) + 1) >> 8;
    v8 += v11 * (a2 ^ 0xFF);
    v11 = (v11 * a2 + ((v11 * a2) >> 8) + 1) >> 8;
    v9 += v12 * (a2 ^ 0xFF);
    v12 = (v12 * a2 + ((v12 * a2) >> 8) + 1) >> 8;
  }
  v37 = v4;
  v38 = v5;
  v39 = v6;
  v13 = v4 < v5;
  v14 = v4 >= v5;
  if (v6 >= *(&v37 + v14))
  {
    v15 = v4 >= v5;
    if (v6 > *(&v37 + v13))
    {
      v14 = v4 < v5;
      v13 = 2;
    }
  }
  else
  {
    v15 = 2;
  }
  v16 = *(&v37 + v13);
  v17 = *(&v37 + v15);
  v18 = __OFSUB__(v16, v17);
  v19 = v16 - v17;
  if ((v19 < 0) ^ v18 | (v19 == 0))
  {
    *(&v37 + v13) = 0;
    *(&v37 + v14) = 0;
  }
  else
  {
    if (v10 >= v11)
      v20 = v11;
    else
      v20 = v10;
    if (v10 <= v11)
      v10 = v11;
    if (v12 <= v10)
      v21 = v10;
    else
      v21 = v12;
    if (v12 >= v20)
    {
      v12 = v20;
      v10 = v21;
    }
    v22 = v10 - v12;
    *(&v37 + v13) = v22;
    *(&v37 + v14) = ((*(&v37 + v14) - *(&v37 + v15)) * ((int)(v22 << 16) / v19) + 0x8000) >> 16;
  }
  *(&v37 + v15) = 0;
  v23 = 77 * (v4 - v37) + 151 * (v5 - v38) + 28 * (v6 - v39);
  v24 = v37 + ((v23 + 128) >> 8);
  v25 = v38 + ((v23 + 128) >> 8);
  v26 = (a4 * a2 + ((a4 * a2) >> 8) + 1) >> 8;
  v27 = v39 + ((v23 + 128) >> 8);
  if (v23 != (char)v23)
  {
    v28 = v37 >= v38 ? v38 + ((v23 + 128) >> 8) : v37 + ((v23 + 128) >> 8);
    v29 = v37 >= v38 ? v37 + ((v23 + 128) >> 8) : v38 + ((v23 + 128) >> 8);
    v30 = v27 <= v29 ? v29 : v39 + ((v23 + 128) >> 8);
    v31 = v27 >= v28 ? v28 : v39 + ((v23 + 128) >> 8);
    if (v27 >= v28)
      v29 = v30;
    if (v29 > v26 || v31 < 0)
    {
      v32 = (77 * v24 + 151 * v25 + 28 * v27 + 128) >> 8;
      if (v23 > -129)
      {
        v33 = v29 - v32;
        if (v29 != v32)
        {
          v34 = v26 - v32;
          goto LABEL_45;
        }
      }
      else
      {
        v33 = v32 - v31;
        if (v32 != v31)
        {
          v34 = (77 * v24 + 151 * v25 + 28 * v27 + 128) >> 8;
LABEL_45:
          v35 = (v34 << 16) / v33;
          v24 = v32 + ((v35 * (v24 - v32) + 0x8000) >> 16);
          v25 = v32 + ((v35 * (v25 - v32) + 0x8000) >> 16);
          v27 = v32 + ((v35 * (v27 - v32) + 0x8000) >> 16);
        }
      }
    }
  }
  return (a4 + a2 - v26) | ((unint64_t)(((((_WORD)v25
                                                              + (unsigned __int16)((v8 + (v8 >> 8) + 1) >> 8)) & 0x3FF) << 10) | ((v24 + ((v7 + (v7 >> 8) + 1) >> 8)) << 20) | (v27 + ((v9 + (v9 >> 8) + 1) >> 8)) & 0x3FF | 0xC0000000) << 32);
}

unint64_t PDAluminosityPDA(unsigned int a1, unsigned int a2, __int16 a3, unsigned int a4)
{
  unsigned int v4;
  int32x2_t v5;
  int8x8_t v6;
  uint32x2_t v7;
  int32x2_t v8;
  unsigned int v9;
  unsigned int v10;
  int32x2_t v11;
  uint32x2_t v12;
  signed int v13;
  int32x2_t v14;
  signed __int32 v15;
  int32x2_t v16;
  signed __int32 v17;
  unsigned __int8 v18;
  __int32 v19;
  signed int v20;
  signed int v21;
  unsigned int v22;
  signed __int32 v23;
  int v24;
  int32x2_t v25;
  unsigned int v26;
  uint32x2_t v27;

  v4 = a1 & 0x3FF;
  v5 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a1), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003);
  v6 = (int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a3), (uint32x2_t)0xFFFFFFF6FFFFFFECLL);
  if (a4 == 255)
  {
    v9 = 0;
    v8 = 0;
  }
  else
  {
    v7 = (uint32x2_t)vmul_s32(v5, vdup_n_s32(a4));
    v8 = vmul_s32(vdup_n_s32(a4 ^ 0xFF), v5);
    v5 = (int32x2_t)vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v7, v7, 8uLL), (int32x2_t)0x100000001), 8uLL);
    v9 = (a4 ^ 0xFF) * v4;
    v4 = (v4 * a4 + ((v4 * a4) >> 8) + 1) >> 8;
  }
  v10 = a3 & 0x3FF;
  v11 = (int32x2_t)vand_s8(v6, (int8x8_t)0x300000003);
  if (a2 != 255)
  {
    v8 = vmla_s32(v8, v11, vdup_n_s32(a2 ^ 0xFF));
    v12 = (uint32x2_t)vmul_s32(v11, vdup_n_s32(a2));
    v11 = (int32x2_t)vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v12, v12, 8uLL), (int32x2_t)0x100000001), 8uLL);
    v9 += v10 * (a2 ^ 0xFF);
    v10 = (v10 * a2 + ((v10 * a2) >> 8) + 1) >> 8;
  }
  v13 = (a4 * a2 + ((a4 * a2) >> 8) + 1) >> 8;
  v14 = vmul_s32(vsub_s32(v11, v5), (int32x2_t)0x970000004DLL);
  v15 = vadd_s32(vdup_lane_s32(v14, 1), v14).u32[0] + 28 * (v10 - v4);
  v16 = vadd_s32(vdup_n_s32((v15 + 128) >> 8), v5);
  v17 = v4 + ((v15 + 128) >> 8);
  if (v15 != (char)v15)
  {
    v18 = vcgt_u32((uint32x2_t)vdup_lane_s32(v5, 1), (uint32x2_t)v5).u8[0];
    v19 = (v18 & 1) != 0 ? v16.i32[0] : v16.i32[1];
    v20 = (v18 & 1) != 0 ? v16.i32[1] : v16.i32[0];
    v21 = v17 <= v20 ? v20 : v17;
    if (v17 >= v19)
      v20 = v21;
    else
      v19 = v17;
    if (v20 > v13 || v19 < 0)
    {
      v22 = (77 * v16.i32[0] + 151 * v16.i32[1] + 28 * v17 + 128) >> 8;
      if (v15 > -129)
      {
        v23 = v20 - v22;
        if (v20 != v22)
        {
          v24 = v13 - v22;
          goto LABEL_26;
        }
      }
      else
      {
        v23 = v22 - v19;
        if (v22 != v19)
        {
          v24 = (77 * v16.i32[0] + 151 * v16.i32[1] + 28 * v17 + 128) >> 8;
LABEL_26:
          v25 = vdup_n_s32(v22);
          v26 = (v24 << 16) / v23;
          v17 = v22 + ((int)(v26 * (v17 - v22) + 0x8000) >> 16);
          v16 = vsra_n_s32(v25, vmla_s32((int32x2_t)0x800000008000, vdup_n_s32(v26), vsub_s32(v16, v25)), 0x10uLL);
        }
      }
    }
  }
  v27 = vshl_u32(vsra_n_u32((uint32x2_t)v16, (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32((uint32x2_t)v8, (uint32x2_t)v8, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0xA00000014);
  return (a4 + a2 - v13) | ((unint64_t)(v27.i32[0] | ((_WORD)v17 + (unsigned __int16)((v9 + (v9 >> 8) + 1) >> 8)) & 0x3FF | v27.i32[1] & 0xFFC00 | 0xC0000000) << 32);
}

uint64_t CIF10_mark_constmask(uint64_t result, unsigned int a2, double a3, double a4, double a5, double a6, int64x2_t a7)
{
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unint64_t v21;
  uint32x4_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  uint32x2_t v31;
  int8x8_t v32;
  unsigned int v33;
  int v34;
  int v35;
  uint32x4_t *v36;
  unsigned __int8 *v37;
  char v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  __int8 v50;
  unsigned int v51;
  uint32x2_t v52;
  int64x2_t v53;
  unint64_t v54;
  int64x2_t v55;
  __int8 v56;
  unsigned int v57;
  uint32x2_t v58;
  int64x2_t v59;
  unint64_t v60;
  int64x2_t v61;
  __int8 v62;
  unsigned int v63;
  uint32x2_t v64;
  int64x2_t v65;
  unint64_t v66;
  int64x2_t v67;
  unsigned int v68;
  __int16 v69;
  __int16 v70;
  int v71;
  unsigned __int8 v72;
  unsigned int v73;
  uint32x2_t v74;
  int64x2_t v75;
  unint64_t v76;
  int64x2_t v77;
  int v78;
  unsigned __int8 v79;
  unsigned int v80;
  int v81;
  int v82;
  uint32x4_t *v83;
  unsigned __int8 *v84;
  char v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  int64x2_t v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t i;
  int64x2_t v97;
  int64x2_t v98;
  unsigned __int32 v99;
  int64x2_t v100;
  unsigned __int32 v101;
  int64x2_t v102;
  unsigned __int32 v103;
  int64x2_t v104;
  uint64_t v105;
  int v106;
  int32x2_t v107;
  int v108;
  unsigned int v109;
  uint32x2_t v110;
  uint32x2_t v111;
  unsigned int v112;
  unsigned int v113;
  uint32x2_t v114;
  int8x8_t v115;
  int v116;
  int32x2_t v117;
  int v118;
  int v119;
  unsigned int v120;
  uint32x2_t v121;
  uint32x2_t v122;
  unsigned int v123;
  unsigned int v124;
  uint32x2_t v125;
  int8x8_t v126;
  int32x2_t v127;
  int v128;
  unsigned int v129;
  int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  uint32x2_t v135;
  uint32x2_t v136;
  int32x2_t v137;
  int v138;
  int v139;
  __int32 v140;
  unsigned int v141;
  uint32x2_t v142;
  int8x8_t v143;
  int v144;
  int v145;
  uint32x4_t *v146;
  int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  int v151;
  int v152;
  int32x4_t v153;
  uint64_t v154;
  uint64_t *v155;
  unint64_t v156;
  unsigned int v157;
  int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  uint32x2_t v162;
  int8x8_t v163;
  unsigned int v164;
  unsigned int v165;
  uint32x2_t v166;
  int8x8_t v167;
  unsigned int v168;
  unsigned int v169;
  uint32x2_t v170;
  int8x8_t v171;
  unsigned int v172;
  unsigned int v173;
  uint32x2_t v174;
  int8x8_t v175;
  int v176;
  int v177;
  int v178;
  uint32x4_t *v179;
  char v180;
  uint64_t v181;
  int v182;
  unsigned int v183;
  unsigned int v184;
  uint64_t v185;
  int v186;
  unint64_t v187;
  int32x4_t v188;
  int32x4_t v189;
  int8x16_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int8x16_t v199;
  int v200;
  int v201;
  uint64_t v202;
  uint32x4_t v203;
  uint32x4_t v204;
  uint32x4_t v205;
  int v206;
  int v207;
  uint32x2_t v208;
  uint32x2_t v209;
  unsigned int v210;
  unsigned int v211;
  uint32x2_t v212;
  int8x8_t v213;
  int v214;
  uint32x2_t v215;
  uint32x2_t v216;
  unsigned int v217;
  unsigned int v218;
  uint32x2_t v219;
  int8x8_t v220;

  v7 = *(_QWORD *)(result + 48);
  v8 = *(_QWORD *)(result + 136);
  v9 = *(unsigned __int8 **)(result + 96);
  if (v9)
    v10 = *v9;
  else
    v10 = 255;
  v12 = *(int *)(result + 12);
  v11 = *(int *)(result + 16);
  if (v7)
  {
    v13 = *(int *)(result + 32);
    v14 = (unsigned __int8 *)(v7 + v12 + (int)v13 * (uint64_t)(int)v11);
    v15 = 1;
    if (!v8)
      return result;
  }
  else
  {
    v14 = 0;
    v13 = 0;
    v15 = 0;
    if (!v8)
      return result;
  }
  v16 = *(_DWORD *)(result + 4);
  v17 = v13 - v16;
  if (v7)
    v18 = v13 - v16;
  else
    v18 = v13;
  v19 = *(_DWORD *)(result + 8);
  v20 = **(_DWORD **)(result + 88);
  v21 = (unint64_t)*(int *)(result + 28) >> 2;
  v22 = (uint32x4_t *)(*(_QWORD *)(result + 40) + 4 * (v12 + v21 * v11));
  v23 = *(int *)(result + 124);
  v24 = v8 + *(int *)(result + 104) + *(int *)(result + 108) * (uint64_t)(int)v23;
  v25 = v23 - v16;
  v26 = v21 - v16;
  result = a2;
  switch(a2)
  {
    case 0u:
      if (v7)
      {
        do
        {
          v27 = v16;
          do
          {
            v28 = *(unsigned __int8 *)v24;
            if (*(_BYTE *)v24)
            {
              if (v28 == 255)
              {
                LOBYTE(v29) = 0;
                v22->i32[0] = 0;
              }
              else
              {
                v30 = v28 ^ 0xFF;
                v29 = (*v14 * v30 + ((*v14 * v30) >> 8) + 1) >> 8;
                v31 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v22->i32[0]), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v30));
                v32 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v31, v31, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                result = v32.i32[0] | (((v22->i32[0] & 0x3FF) * v30 + (((v22->i32[0] & 0x3FF) * v30) >> 8) + 1) >> 8) | v32.i32[1] | 0xC0000000;
                v22->i32[0] = result;
              }
              *v14 = v29;
            }
            ++v24;
            v22 = (uint32x4_t *)((char *)v22 + 4);
            v14 += v15;
            --v27;
          }
          while (v27);
          v24 += v25;
          v22 = (uint32x4_t *)((char *)v22 + 4 * v26);
          v14 += v18;
          --v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v138 = v16;
          do
          {
            v139 = *(unsigned __int8 *)v24;
            if (*(_BYTE *)v24)
            {
              if (v139 == 255)
              {
                v140 = 0;
              }
              else
              {
                v141 = v139 ^ 0xFF;
                v142 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v22->i32[0]), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v141));
                v143 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v142, v142, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                result = v143.i32[0] | (((v22->i32[0] & 0x3FF) * v141 + (((v22->i32[0] & 0x3FF) * v141) >> 8) + 1) >> 8);
                v140 = v22->i32[0] - (result | v143.i32[1]) + 0x40000000;
              }
              v22->i32[0] = v140;
            }
            ++v24;
            v22 = (uint32x4_t *)((char *)v22 + 4);
            --v138;
          }
          while (v138);
          v24 += v25;
          v22 = (uint32x4_t *)((char *)v22 + 4 * v26);
          --v19;
        }
        while (v19);
      }
      return result;
    case 1u:
      v33 = v24 & 3;
      if (!v7)
      {
        v144 = v33 + v16;
        v145 = -1 << (8 * v33);
        v146 = (uint32x4_t *)((char *)v22 - 4 * (v24 & 3));
        if ((v24 & 3) != 0)
          v147 = v24 & 0xFFFFFFFC;
        else
          v147 = v24;
        if ((v24 & 3) != 0)
        {
          v24 &= 0xFFFFFFFFFFFFFFFCLL;
          v22 = v146;
        }
        else
        {
          v145 = -1;
          v144 = v16;
        }
        v148 = ((_BYTE)v144 + (_BYTE)v147) & 3;
        if ((((_BYTE)v144 + (_BYTE)v147) & 3) != 0)
        {
          v149 = 4 - v148;
          v33 += v149;
          v150 = 0xFFFFFFFF >> (8 * v149);
          if (v144 >= 4)
            v148 = 0xFFFFFFFF >> (8 * v149);
          else
            v148 = 0;
          if (v144 >= 4)
            v150 = -1;
          v145 &= v150;
        }
        v151 = v144 >> 2;
        v152 = v20 & 0x3FF00000;
        v153 = vdupq_n_s32(v20);
        v154 = v25 - v33;
        result = v20 & 0xFFC00;
        v155 = &qword_185004000;
        v156 = v26 - v33;
        while (1)
        {
          v157 = *(_DWORD *)v24 & v145;
          v158 = v151;
          v159 = v148;
          if (!v157)
            goto LABEL_167;
LABEL_146:
          if (v157 == -1)
          {
            *v22 = (uint32x4_t)v153;
            goto LABEL_167;
          }
          while (1)
          {
            if ((_BYTE)v157)
            {
              if (v157 == 255)
              {
                v160 = v20;
              }
              else
              {
                v33 = v33 & 0xC0000000 | (v152 * v157) & 0x3FF00000 | (result * v157) & 0xFFC00 | (v157 * (_WORD)v20) & 0x3FF;
                v161 = v157 ^ 0xFF;
                v162 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v22->i32[0]), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v161));
                v163 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v162, v162, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                v160 = v33
                     - 0x40000000
                     + (v163.i32[0] | (((v22->i32[0] & 0x3FF) * v161 + (((v22->i32[0] & 0x3FF) * v161) >> 8) + 1) >> 8) | v163.i32[1]);
              }
              v22->i32[0] = v160;
            }
            if (BYTE1(v157))
            {
              if (BYTE1(v157) == 255)
              {
                v164 = v20;
              }
              else
              {
                LODWORD(v17) = v17 & 0xC0000000 | (v152 * BYTE1(v157)) & 0x3FF00000 | (result * BYTE1(v157)) & 0xFFC00 | (BYTE1(v157) * (_WORD)v20) & 0x3FF;
                v165 = BYTE1(v157) ^ 0xFF;
                v166 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v22->u32[1]), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v165));
                v167 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v166, v166, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                v164 = v17
                     - 0x40000000
                     + (v167.i32[0] | (((v22->i32[1] & 0x3FF) * v165 + (((v22->i32[1] & 0x3FF) * v165) >> 8) + 1) >> 8) | v167.i32[1]);
              }
              v22->i32[1] = v164;
            }
            if (BYTE2(v157))
            {
              if (BYTE2(v157) == 255)
              {
                v168 = v20;
              }
              else
              {
                v147 = v147 & 0xC0000000 | (v152 * BYTE2(v157)) & 0x3FF00000 | (result * BYTE2(v157)) & 0xFFC00 | (BYTE2(v157) * (_WORD)v20) & 0x3FF;
                v169 = BYTE2(v157) ^ 0xFF;
                v170 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v22->u32[2]), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v169));
                v171 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v170, v170, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                v168 = v147
                     - 0x40000000
                     + (v171.i32[0] | (((v22->i32[2] & 0x3FF) * v169 + (((v22->i32[2] & 0x3FF) * v169) >> 8) + 1) >> 8) | v171.i32[1]);
              }
              v22->i32[2] = v168;
            }
            v172 = HIBYTE(v157);
            if (v172 == 255)
            {
              v22->i32[3] = v20;
            }
            else if (v172)
            {
              LODWORD(v155) = v155 & 0xC0000000 | (v152 * v172) & 0x3FF00000 | (result * v172) & 0xFFC00 | ((_WORD)v172 * (_WORD)v20) & 0x3FF;
              v173 = v172 ^ 0xFF;
              v174 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v22->u32[3]), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v173));
              v175 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v174, v174, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
              v22->i32[3] = (_DWORD)v155
                          - 0x40000000
                          + (v175.i32[0] | (((v22->i32[3] & 0x3FF) * v173 + (((v22->i32[3] & 0x3FF) * v173) >> 8) + 1) >> 8) | v175.i32[1]);
            }
LABEL_167:
            while (1)
            {
              v176 = v158;
              ++v22;
              --v158;
              v24 += 4;
              if (v176 < 2)
                break;
              v157 = *(_DWORD *)v24;
              if (*(_DWORD *)v24)
                goto LABEL_146;
            }
            if (!v159)
              break;
            v159 = 0;
            v157 = *(_DWORD *)v24 & v148;
          }
          v24 += v154;
          v22 = (uint32x4_t *)((char *)v22 + 4 * v156);
          if (!--v19)
            return result;
        }
      }
      v34 = v33 + v16;
      v35 = -1 << (8 * v33);
      v36 = (uint32x4_t *)((char *)v22 - 4 * (v24 & 3));
      v37 = &v14[-(v24 & 3)];
      if ((v24 & 3) != 0)
        v38 = v24 & 0xFC;
      else
        v38 = v24;
      if ((v24 & 3) != 0)
      {
        v24 &= 0xFFFFFFFFFFFFFFFCLL;
        v14 = v37;
        v22 = v36;
      }
      else
      {
        v35 = -1;
        v34 = v16;
      }
      v39 = ((_BYTE)v34 + v38) & 3;
      if ((((_BYTE)v34 + v38) & 3) != 0)
      {
        v40 = 4 - v39;
        v33 += v40;
        v41 = 0xFFFFFFFF >> (8 * v40);
        if (v34 >= 4)
          v39 = 0xFFFFFFFF >> (8 * v40);
        else
          v39 = 0;
        if (v34 >= 4)
          v41 = -1;
        v35 &= v41;
      }
      v42 = v25 - v33;
      v43 = v26 - v33;
      result = (v34 >> 2);
      v44 = v20 >> 20;
      v45 = v20 >> 10;
      v46 = v17 - v33;
      do
      {
        v47 = *(_DWORD *)v24 & v35;
        v48 = result;
        v49 = v39;
        if (!v47)
          goto LABEL_59;
LABEL_38:
        if (v47 == -1)
        {
          v22->i32[0] = v20;
          *v14 = v10;
          v22->i32[1] = v20;
          v14[1] = v10;
          v22->i32[2] = v20;
          v14[2] = v10;
LABEL_56:
          v22->i32[3] = v20;
          v14[3] = v10;
          goto LABEL_59;
        }
        while (1)
        {
          if ((_BYTE)v47)
          {
            if (v47 == 255)
            {
              v22->i32[0] = v20;
              v50 = v10;
            }
            else
            {
              v51 = v47 ^ 0xFF;
              v52 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v22->i32[0]), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v51));
              *(uint32x2_t *)v53.i8 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v52, v52, 8uLL), (int32x2_t)0x100000001), 8uLL);
              v54 = v53.u32[0] | ((unint64_t)(((v22->i32[0] & 0x3FF) * v51
                                                    + (((v22->i32[0] & 0x3FF) * v51) >> 8)
                                                    + 1) >> 8) << 32);
              v53.i32[0] = (v51 * *v14 + ((v51 * *v14) >> 8) + 1) >> 8;
              v53.i64[1] = v54;
              a7.i8[0] = v10 * v47;
              a7.i16[2] = (v47 * (_WORD)v44) & 0x3FF;
              a7.i16[4] = (v47 * (_WORD)v45) & 0x3FF;
              a7.i16[6] = (v47 * (_WORD)v20) & 0x3FF;
              v55 = vaddq_s64(v53, a7);
              v50 = v55.i8[0];
              v22->i32[0] = ((unint64_t)v55.i64[0] >> 12) & 0x3FF00000 | v55.i16[6] & 0x3FF | ((v55.i16[4] & 0x3FF) << 10) | 0xC0000000;
            }
            *v14 = v50;
          }
          if (BYTE1(v47))
          {
            if (BYTE1(v47) == 255)
            {
              v22->i32[1] = v20;
              v56 = v10;
            }
            else
            {
              v57 = BYTE1(v47) ^ 0xFF;
              v58 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v22->u32[1]), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v57));
              *(uint32x2_t *)v59.i8 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v58, v58, 8uLL), (int32x2_t)0x100000001), 8uLL);
              v60 = v59.u32[0] | ((unint64_t)(((v22->i32[1] & 0x3FF) * v57
                                                    + (((v22->i32[1] & 0x3FF) * v57) >> 8)
                                                    + 1) >> 8) << 32);
              v59.i32[0] = (v57 * v14[1] + ((v57 * v14[1]) >> 8) + 1) >> 8;
              v59.i64[1] = v60;
              a7.i8[0] = v10 * BYTE1(v47);
              a7.i16[2] = (BYTE1(v47) * (_WORD)v44) & 0x3FF;
              a7.i16[4] = (BYTE1(v47) * (_WORD)v45) & 0x3FF;
              a7.i16[6] = (BYTE1(v47) * (_WORD)v20) & 0x3FF;
              v61 = vaddq_s64(v59, a7);
              v56 = v61.i8[0];
              v22->i32[1] = ((unint64_t)v61.i64[0] >> 12) & 0x3FF00000 | v61.i16[6] & 0x3FF | ((v61.i16[4] & 0x3FF) << 10) | 0xC0000000;
            }
            v14[1] = v56;
          }
          if (BYTE2(v47))
          {
            if (BYTE2(v47) == 255)
            {
              v22->i32[2] = v20;
              v62 = v10;
            }
            else
            {
              v63 = BYTE2(v47) ^ 0xFF;
              v64 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v22->u32[2]), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v63));
              *(uint32x2_t *)v65.i8 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v64, v64, 8uLL), (int32x2_t)0x100000001), 8uLL);
              v66 = v65.u32[0] | ((unint64_t)(((v22->i32[2] & 0x3FF) * v63
                                                    + (((v22->i32[2] & 0x3FF) * v63) >> 8)
                                                    + 1) >> 8) << 32);
              v65.i32[0] = (v63 * v14[2] + ((v63 * v14[2]) >> 8) + 1) >> 8;
              v65.i64[1] = v66;
              a7.i8[0] = v10 * BYTE2(v47);
              a7.i16[2] = (BYTE2(v47) * (_WORD)v44) & 0x3FF;
              a7.i16[4] = (BYTE2(v47) * (_WORD)v45) & 0x3FF;
              a7.i16[6] = (BYTE2(v47) * (_WORD)v20) & 0x3FF;
              v67 = vaddq_s64(v65, a7);
              v62 = v67.i8[0];
              v22->i32[2] = ((unint64_t)v67.i64[0] >> 12) & 0x3FF00000 | v67.i16[6] & 0x3FF | ((v67.i16[4] & 0x3FF) << 10) | 0xC0000000;
            }
            v14[2] = v62;
          }
          v68 = HIBYTE(v47);
          if (v68 == 255)
            goto LABEL_56;
          if (v68)
          {
            v69 = v68 * v44;
            v70 = v68 * v45;
            v71 = ((_WORD)v68 * (_WORD)v20) & 0x3FF;
            v72 = v10 * v68;
            v73 = v68 ^ 0xFF;
            v74 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v22->u32[3]), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v73));
            *(uint32x2_t *)v75.i8 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v74, v74, 8uLL), (int32x2_t)0x100000001), 8uLL);
            v76 = v75.u32[0] | ((unint64_t)(((v22->i32[3] & 0x3FF) * v73
                                                  + (((v22->i32[3] & 0x3FF) * v73) >> 8)
                                                  + 1) >> 8) << 32);
            v75.i32[0] = (v73 * v14[3] + ((v73 * v14[3]) >> 8) + 1) >> 8;
            v75.i64[1] = v76;
            a7.i64[0] = v72 | ((unint64_t)(v69 & 0x3FF) << 32);
            a7.i32[2] = v70 & 0x3FF;
            a7.i8[12] = v71;
            a7.i8[13] = BYTE1(v71);
            a7.i8[14] = BYTE2(v71);
            a7.i8[15] = HIBYTE(v71);
            v77 = vaddq_s64(v75, a7);
            v22->i32[3] = ((unint64_t)v77.i64[0] >> 12) & 0x3FF00000 | v77.i16[6] & 0x3FF | ((v77.i16[4] & 0x3FF) << 10) | 0xC0000000;
            v14[3] = v77.i8[0];
          }
LABEL_59:
          while (1)
          {
            v78 = v48;
            ++v22;
            v14 += 4;
            --v48;
            v24 += 4;
            if (v78 < 2)
              break;
            v47 = *(_DWORD *)v24;
            if (*(_DWORD *)v24)
              goto LABEL_38;
          }
          if (!v49)
            break;
          v49 = 0;
          v47 = *(_DWORD *)v24 & v39;
        }
        v24 += v42;
        v22 = (uint32x4_t *)((char *)v22 + 4 * v43);
        v14 += v46;
        --v19;
      }
      while (v19);
      return result;
    case 2u:
      v79 = ~(_BYTE)v10;
      v80 = v24 & 3;
      if (v7)
      {
        v81 = v80 + v16;
        v82 = -1 << (8 * v80);
        v83 = (uint32x4_t *)((char *)v22 - 4 * (v24 & 3));
        v84 = &v14[-(v24 & 3)];
        if ((v24 & 3) != 0)
          v85 = v24 & 0xFC;
        else
          v85 = v24;
        if ((v24 & 3) != 0)
        {
          v24 &= 0xFFFFFFFFFFFFFFFCLL;
          v14 = v84;
          v22 = v83;
        }
        else
        {
          v82 = -1;
          v81 = v16;
        }
        v86 = ((_BYTE)v81 + v85) & 3;
        if ((((_BYTE)v81 + v85) & 3) != 0)
        {
          v87 = 4 - v86;
          v80 += v87;
          v88 = 0xFFFFFFFF >> (8 * v87);
          if (v81 >= 4)
            v86 = v88;
          else
            v86 = 0;
          if (v81 >= 4)
            v88 = -1;
          v82 &= v88;
        }
        v89 = v25 - v80;
        v90 = v26 - v80;
        result = (v81 >> 2);
        v91 = ~(_BYTE)v10;
        v92.i64[0] = v10 | ((unint64_t)((v20 >> 20) & 0x3FF) << 32);
        v92.i64[1] = (v20 >> 10) & 0x3FF | ((unint64_t)(v20 & 0x3FF) << 32);
        v93 = v17 - v80;
        while (1)
        {
          v94 = *(_DWORD *)v24 & v82;
          v95 = result;
          for (i = v86; ; i = v105)
          {
            if (v94 == -1)
            {
              v97.i32[0] = (*v14 * v91 + ((*v14 * v91) >> 8) + 1) >> 8;
              v97.i32[1] = ((((unsigned __int32)v22->i32[0] >> 20) & 0x3FF) * v91
                          + (((((unsigned __int32)v22->i32[0] >> 20) & 0x3FF) * v91) >> 8)
                          + 1) >> 8;
              v97.i32[2] = ((((unsigned __int32)v22->i32[0] >> 10) & 0x3FF) * v91
                          + (((((unsigned __int32)v22->i32[0] >> 10) & 0x3FF) * v91) >> 8)
                          + 1) >> 8;
              v97.i32[3] = ((v22->i32[0] & 0x3FF) * v91 + (((v22->i32[0] & 0x3FFu) * v91) >> 8) + 1) >> 8;
              v98 = vaddq_s64(v97, v92);
              v22->i32[0] = ((unint64_t)v98.i64[0] >> 12) & 0x3FF00000 | v98.i16[6] & 0x3FF | ((v98.i16[4] & 0x3FF) << 10) | 0xC0000000;
              *v14 = v98.i8[0];
              v99 = v22->u32[1];
              v98.i64[0] = ((v14[1] * v91 + ((v14[1] * v91) >> 8) + 1) >> 8) | ((unint64_t)((((v99 >> 20) & 0x3FF) * v91 + ((((v99 >> 20) & 0x3FF) * v91) >> 8) + 1) >> 8) << 32);
              v98.i64[1] = ((((v99 >> 10) & 0x3FF) * v91 + ((((v99 >> 10) & 0x3FF) * v91) >> 8) + 1) >> 8) | ((unint64_t)(((v99 & 0x3FF) * v91 + (((v99 & 0x3FF) * v91) >> 8) + 1) >> 8) << 32);
              v100 = vaddq_s64(v98, v92);
              v22->i32[1] = ((unint64_t)v100.i64[0] >> 12) & 0x3FF00000 | v100.i16[6] & 0x3FF | ((v100.i16[4] & 0x3FF) << 10) | 0xC0000000;
              v14[1] = v100.i8[0];
              v101 = v22->u32[2];
              v100.i64[0] = ((v14[2] * v91 + ((v14[2] * v91) >> 8) + 1) >> 8) | ((unint64_t)((((v101 >> 20) & 0x3FF) * v91 + ((((v101 >> 20) & 0x3FF) * v91) >> 8) + 1) >> 8) << 32);
              v100.i64[1] = ((((v101 >> 10) & 0x3FF) * v91 + ((((v101 >> 10) & 0x3FF) * v91) >> 8) + 1) >> 8) | ((unint64_t)(((v101 & 0x3FF) * v91 + (((v101 & 0x3FF) * v91) >> 8) + 1) >> 8) << 32);
              v102 = vaddq_s64(v100, v92);
              v22->i32[2] = ((unint64_t)v102.i64[0] >> 12) & 0x3FF00000 | v102.i16[6] & 0x3FF | ((v102.i16[4] & 0x3FF) << 10) | 0xC0000000;
              v14[2] = v102.i8[0];
              v103 = v22->u32[3];
              v102.i64[0] = ((v14[3] * v91 + ((v14[3] * v91) >> 8) + 1) >> 8) | ((unint64_t)((((v103 >> 20) & 0x3FF) * v91 + ((((v103 >> 20) & 0x3FF) * v91) >> 8) + 1) >> 8) << 32);
              v102.i64[1] = ((((v103 >> 10) & 0x3FF) * v91 + ((((v103 >> 10) & 0x3FF) * v91) >> 8) + 1) >> 8) | ((unint64_t)(((v103 & 0x3FF) * v91 + (((v103 & 0x3FF) * v91) >> 8) + 1) >> 8) << 32);
              v104 = vaddq_s64(v102, v92);
              v22->i32[3] = ((unint64_t)v104.i64[0] >> 12) & 0x3FF00000 | v104.i16[6] & 0x3FF | ((v104.i16[4] & 0x3FF) << 10) | 0xC0000000;
              v14[3] = v104.i8[0];
            }
LABEL_84:
            v105 = i;
            v106 = v95;
            ++v22;
            v14 += 4;
            --v95;
            v24 += 4;
            if (v106 < 2)
              break;
            v94 = *(_DWORD *)v24;
          }
          i = 0;
          if ((_DWORD)v105)
            goto LABEL_84;
          v24 += v89;
          v22 = (uint32x4_t *)((char *)v22 + 4 * v90);
          v14 += v93;
          if (!--v19)
            return result;
        }
      }
      v177 = v80 + v16;
      v178 = -1 << (8 * v80);
      v179 = (uint32x4_t *)((char *)v22 - 4 * (v24 & 3));
      if ((v24 & 3) != 0)
        v180 = v24 & 0xFC;
      else
        v180 = v24;
      if ((v24 & 3) != 0)
      {
        v24 &= 0xFFFFFFFFFFFFFFFCLL;
        v22 = v179;
      }
      else
      {
        v178 = -1;
        v177 = v16;
      }
      v181 = ((_BYTE)v177 + v180) & 3;
      if ((((_BYTE)v177 + v180) & 3) != 0)
      {
        v182 = 4 - v181;
        v80 += v182;
        v183 = 0xFFFFFFFF >> (8 * v182);
        if (v177 >= 4)
          v181 = v183;
        else
          v181 = 0;
        if (v177 >= 4)
          v183 = -1;
        v178 &= v183;
      }
      v184 = v20 - 0x40000000;
      v185 = v25 - v80;
      v186 = v177 >> 2;
      v187 = v26 - v80;
      v188 = vdupq_n_s32(v79);
      v189 = vdupq_n_s32(v184);
      v190.i64[0] = 0x300000003;
      v190.i64[1] = 0x300000003;
      v191.i64[0] = 0x100000001;
      v191.i64[1] = 0x100000001;
      v192.i64[0] = 0x400000004;
      v192.i64[1] = 0x400000004;
      v193.i64[0] = 0x100000001000;
      v193.i64[1] = 0x100000001000;
      __asm { FMOV            V6.4S, #1.875 }
      v199 = (int8x16_t)vdupq_n_s32(0xFFC00u);
      do
      {
        v200 = *(_DWORD *)v24 & v178;
        v201 = v186;
        v202 = v181;
LABEL_189:
        if (v200 == -1)
        {
          v203 = (uint32x4_t)vmulq_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(*v22, 0x14uLL) & __PAIR128__(0xFFFFF3FFFFFFF3FFLL, 0xFFFFF3FFFFFFF3FFLL)), v188);
          v204 = (uint32x4_t)vmulq_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(*v22, 0xAuLL), v190), v188);
          v205 = (uint32x4_t)vmulq_s32((int32x4_t)vandq_s8(*(int8x16_t *)v22, v190), v188);
          *(int32x4_t *)v22 = vaddq_s32((int32x4_t)vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vaddq_s32(vshlq_n_s32((int32x4_t)vsraq_n_u32(v203, v203, 8uLL), 0xCuLL), v193), _Q6), (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(v205, v205, 8uLL), v191), 8uLL)), vandq_s8((int8x16_t)vaddq_s32(vshlq_n_s32((int32x4_t)vsraq_n_u32(v204, v204, 8uLL), 2uLL), v192), v199)),
                                v189);
        }
        do
        {
          result = v202;
          v206 = v201;
          ++v22;
          --v201;
          v24 += 4;
          if (v206 >= 2)
          {
            v200 = *(_DWORD *)v24;
            v202 = result;
            goto LABEL_189;
          }
          v202 = 0;
        }
        while ((_DWORD)result);
        v24 += v185;
        v22 = (uint32x4_t *)((char *)v22 + 4 * v187);
        --v19;
      }
      while (v19);
      return result;
    case 7u:
      v107 = vdup_n_s32(v10);
      if (v7)
      {
        do
        {
          v108 = v16;
          do
          {
            result = *(unsigned __int8 *)v24;
            if (*(_BYTE *)v24)
            {
              if ((_DWORD)result == 255)
              {
                v109 = *v14 * v10 + ((*v14 * v10) >> 8) + 1;
                v110 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v22->i32[0]), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), v107);
                v111 = (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v110, v110, 8uLL), (int32x2_t)0x100000001);
                v112 = (v22->i32[0] & 0x3FF) * v10;
              }
              else
              {
                v113 = (~(_BYTE)result
                                       + ((unsigned __int16)(result * v10 + ((result * v10) >> 8) + 1) >> 8));
                v109 = *v14 * v113 + ((*v14 * v113) >> 8) + 1;
                v114 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v22->i32[0]), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v113));
                v111 = (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v114, v114, 8uLL), (int32x2_t)0x100000001);
                v112 = (v22->i32[0] & 0x3FF) * v113;
              }
              result = v109 >> 8;
              v115 = vand_s8((int8x8_t)vshl_u32(v111, (uint32x2_t)0x20000000CLL), (int8x8_t)0xFFC003FF00000);
              v22->i32[0] = v115.i32[0] | ((v112 + (v112 >> 8) + 1) >> 8) | v115.i32[1] | 0xC0000000;
              *v14 = result;
            }
            ++v24;
            v22 = (uint32x4_t *)((char *)v22 + 4);
            v14 += v15;
            --v108;
          }
          while (v108);
          v24 += v25;
          v22 = (uint32x4_t *)((char *)v22 + 4 * v26);
          v14 += v18;
          --v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v207 = v16;
          do
          {
            result = *(unsigned __int8 *)v24;
            if (*(_BYTE *)v24)
            {
              if ((_DWORD)result == 255)
              {
                v208 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v22->i32[0]), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), v107);
                v209 = (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v208, v208, 8uLL), (int32x2_t)0x100000001);
                v210 = (v22->i32[0] & 0x3FF) * v10;
              }
              else
              {
                v211 = (~(_BYTE)result
                                       + ((unsigned __int16)(result * v10 + ((result * v10) >> 8) + 1) >> 8));
                v212 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v22->i32[0]), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v211));
                v209 = (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v212, v212, 8uLL), (int32x2_t)0x100000001);
                v210 = (v22->i32[0] & 0x3FF) * v211;
              }
              v213 = vand_s8((int8x8_t)vshl_u32(v209, (uint32x2_t)0xC00000002), (int8x8_t)0x3FF00000000FFC00);
              result = v213.i32[1] | ((v210 + (v210 >> 8) + 1) >> 8) | v213.i32[0];
              v22->i32[0] = v22->i32[0] - result + 0x40000000;
            }
            ++v24;
            v22 = (uint32x4_t *)((char *)v22 + 4);
            --v207;
          }
          while (v207);
          v24 += v25;
          v22 = (uint32x4_t *)((char *)v22 + 4 * v26);
          --v19;
        }
        while (v19);
      }
      return result;
    case 8u:
      v116 = v10 ^ 0xFF;
      v117 = vdup_n_s32(v10 ^ 0xFF);
      if (v7)
      {
        result = 255;
        do
        {
          v118 = v16;
          do
          {
            v119 = *(unsigned __int8 *)v24;
            if (*(_BYTE *)v24)
            {
              if (v119 == 255)
              {
                v120 = *v14 * v116 + ((*v14 * v116) >> 8) + 1;
                v121 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v22->i32[0]), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), v117);
                v122 = (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v121, v121, 8uLL), (int32x2_t)0x100000001);
                v123 = (v22->i32[0] & 0x3FF) * v116;
              }
              else
              {
                v124 = ~((v119 * v10 + ((v119 * v10) >> 8) + 1) >> 8);
                v120 = v124 * *v14 + ((v124 * *v14) >> 8) + 1;
                v125 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v22->i32[0]), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v124));
                v122 = (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v125, v125, 8uLL), (int32x2_t)0x100000001);
                v123 = (v22->i32[0] & 0x3FF) * v124;
              }
              v126 = vand_s8((int8x8_t)vshl_u32(v122, (uint32x2_t)0x20000000CLL), (int8x8_t)0xFFC003FF00000);
              v22->i32[0] = v126.i32[0] | ((v123 + (v123 >> 8) + 1) >> 8) | v126.i32[1] | 0xC0000000;
              *v14 = BYTE1(v120);
            }
            ++v24;
            v22 = (uint32x4_t *)((char *)v22 + 4);
            v14 += v15;
            --v118;
          }
          while (v118);
          v24 += v25;
          v22 = (uint32x4_t *)((char *)v22 + 4 * v26);
          v14 += v18;
          --v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          LODWORD(result) = v16;
          do
          {
            v214 = *(unsigned __int8 *)v24;
            if (*(_BYTE *)v24)
            {
              if (v214 == 255)
              {
                v215 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v22->i32[0]), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), v117);
                v216 = (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v215, v215, 8uLL), (int32x2_t)0x100000001);
                v217 = (v22->i32[0] & 0x3FF) * v116;
              }
              else
              {
                v218 = ~((v214 * v10 + ((v214 * v10) >> 8) + 1) >> 8);
                v219 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v22->i32[0]), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v218));
                v216 = (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v219, v219, 8uLL), (int32x2_t)0x100000001);
                v217 = (v22->i32[0] & 0x3FF) * v218;
              }
              v220 = vand_s8((int8x8_t)vshl_u32(v216, (uint32x2_t)0xC00000002), (int8x8_t)0x3FF00000000FFC00);
              v22->i32[0] = v22->i32[0] - (v220.i32[1] | ((v217 + (v217 >> 8) + 1) >> 8) | v220.i32[0]) + 0x40000000;
            }
            ++v24;
            v22 = (uint32x4_t *)((char *)v22 + 4);
            result = (result - 1);
          }
          while ((_DWORD)result);
          v24 += v25;
          v22 = (uint32x4_t *)((char *)v22 + 4 * v26);
          --v19;
        }
        while (v19);
      }
      return result;
    case 9u:
      v127 = (int32x2_t)vshl_u32((uint32x2_t)vdup_n_s32(v20), (uint32x2_t)0xFFFFFFECFFFFFFF6);
      result = 255;
      do
      {
        v128 = v16;
        do
        {
          v129 = *(unsigned __int8 *)v24;
          if (*(_BYTE *)v24)
          {
            v130 = *v14;
            v131 = v130 ^ 0xFF;
            v132 = (v129 * v10 + ~(_BYTE)v129);
            v133 = ((v130 * v132 + ((v130 * v132) >> 8) + 1) >> 8)
                 + ((v131 * (v129 * v10) + ((v131 * (v129 * v10)) >> 8) + 1) >> 8);
            if (v133 >= 0xFF)
              LOBYTE(v133) = -1;
            v134 = (((v22->i32[0] & 0x3FF) * v132 + (((v22->i32[0] & 0x3FF) * v132) >> 8) + 1) >> 8)
                 + (((((_WORD)v20 * (_WORD)v129) & 0x3FF) * v131
                   + (((((_WORD)v20 * (_WORD)v129) & 0x3FF) * v131) >> 8)
                   + 1) >> 8);
            if (v134 >= 0x3FF)
              v134 = 1023;
            v135 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vmul_s32(v127, vdup_n_s32(v129)), (int8x8_t)0x300000003), vdup_n_s32(v131));
            v136 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v22->i32[0]), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v132));
            v137 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v136, v136, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v135, v135, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
            v22->i32[0] = vorr_s8((int8x8_t)v137, (int8x8_t)vdup_lane_s32(v137, 1)).u32[0] | v134 | 0xC0000000;
            *v14 = v133;
          }
          ++v24;
          v22 = (uint32x4_t *)((char *)v22 + 4);
          v14 += v15;
          --v128;
        }
        while (v128);
        v24 += v25;
        v22 = (uint32x4_t *)((char *)v22 + 4 * v26);
        v14 += v18;
        --v19;
      }
      while (v19);
      return result;
    default:
      return result;
  }
}

unint64_t CIF10_mark_pixelmask(unint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  unsigned int *v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int *v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int *v30;
  unint64_t v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  uint32x2_t v37;
  int8x8_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint32x2_t v53;
  uint32x2_t v54;
  int32x2_t v55;
  int8x8_t v56;
  int v57;
  unsigned int *v58;
  _BYTE *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  char v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint32x2_t v80;
  int64x2_t v81;
  unint64_t v82;
  int64x2_t v83;
  int64x2_t v84;
  uint32x2_t v85;
  int64x2_t v86;
  unint64_t v87;
  int8x8_t v88;
  unint64_t v89;
  int64x2_t v90;
  int64x2_t v91;
  unsigned int *v92;
  _BYTE *v93;
  unint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int8 *v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  unsigned int v109;
  uint32x2_t v110;
  int8x8_t v111;
  unsigned int v112;
  unsigned __int32 v113;
  int v114;
  unsigned int v115;
  int8x8_t v116;
  unsigned int v117;
  unsigned int v118;
  uint32x2_t v119;
  uint32x2_t v120;
  int32x2_t v121;
  unsigned int *v122;
  unsigned __int8 *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unsigned __int8 *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned __int8 *v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  unsigned int v140;
  uint32x2_t v141;
  int8x8_t v142;
  unsigned int v143;
  unsigned __int32 v144;
  int v145;
  unsigned int v146;
  int8x8_t v147;
  unsigned int v148;
  unsigned int v149;
  uint32x2_t v150;
  uint32x2_t v151;
  int32x2_t v152;
  unsigned int *v153;
  unsigned __int8 *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unsigned __int8 *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v170;
  unsigned __int8 *v171;
  int v172;
  int v173;
  int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  __int32 v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  int32x2_t v186;
  int32x2_t v187;
  uint32x2_t v188;
  uint32x2_t v189;
  int32x2_t v190;
  unsigned int *v191;
  unsigned __int8 *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unsigned __int8 *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned __int8 *v202;
  int v203;
  int v204;
  unsigned int v205;
  uint64_t v206;
  int v207;
  int v208;
  uint32x2_t v209;
  int8x8_t v210;
  unsigned int v211;
  unsigned int v212;
  uint32x2_t v213;
  int64x2_t v214;
  unint64_t v215;
  int8x8_t v216;
  unint64_t v217;
  int64x2_t v218;
  int64x2_t v219;
  unsigned int *v220;
  unsigned __int8 *v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unsigned __int8 *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unsigned __int8 *v232;
  int v233;
  int v234;
  int v235;
  unsigned int v236;
  unsigned int v237;
  uint32x2_t v238;
  int8x8_t v239;
  unsigned int v240;
  unsigned __int32 v241;
  unsigned int v242;
  unsigned int v243;
  int32x2_t v244;
  uint32x2_t v245;
  uint32x2_t v246;
  int32x2_t v247;
  unsigned int *v248;
  unsigned __int8 *v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unsigned __int8 *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unsigned __int8 *v261;
  int v262;
  int v263;
  int v264;
  unsigned int v265;
  unsigned int v266;
  uint32x2_t v267;
  uint32x2_t v268;
  unsigned int v269;
  unsigned int v270;
  uint32x2_t v271;
  int8x8_t v272;
  unsigned int *v273;
  unsigned __int8 *v274;
  unint64_t v275;
  uint64_t v276;
  unsigned __int8 *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unsigned __int8 *v283;
  uint64_t v284;
  int v285;
  int v286;
  int v287;
  int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int *v306;
  unsigned __int8 *v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  unsigned __int8 *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v319;
  unsigned __int8 *v320;
  int v321;
  int v322;
  int v323;
  int v324;
  unsigned int v325;
  unsigned int v326;
  __int32 v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int v330;
  unsigned int v331;
  unsigned int v332;
  unsigned int v333;
  unsigned int v334;
  unsigned int v335;
  int32x2_t v336;
  int32x2_t v337;
  uint32x2_t v338;
  uint32x2_t v339;
  int32x2_t v340;
  unsigned int *v341;
  unsigned __int8 *v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  unsigned __int8 *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unsigned __int8 *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  int v357;
  int v358;
  int v359;
  unsigned int v360;
  unsigned int v361;
  unsigned int v362;
  unsigned int v363;
  unsigned int v364;
  unsigned int v365;
  unsigned int v366;
  unsigned int v367;
  unsigned int v368;
  unsigned int *v369;
  unsigned __int8 *v370;
  uint64_t v371;
  unint64_t v372;
  uint64_t v373;
  unsigned __int8 *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unsigned __int8 *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  int v384;
  int v385;
  int v386;
  int v387;
  unsigned int v388;
  unsigned int v389;
  unsigned int v390;
  unsigned int v391;
  unsigned int v392;
  unsigned int v393;
  unsigned int v394;
  unsigned int v395;
  unsigned int v396;
  unsigned int *v397;
  unsigned __int8 *v398;
  uint64_t v399;
  unint64_t v400;
  uint64_t v401;
  unsigned __int8 *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unsigned __int8 *v407;
  uint64_t v408;
  uint64_t v409;
  int v410;
  int v411;
  int v412;
  unsigned int v413;
  unsigned int *v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unsigned __int8 *v422;
  uint64_t v423;
  uint64_t v424;
  int v425;
  int v426;
  int v427;
  unsigned int v428;
  uint64_t v429;
  unsigned int *v430;
  uint64_t v431;
  unint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unsigned __int8 *v438;
  uint64_t v439;
  uint64_t v440;
  int v441;
  int v442;
  int v443;
  unsigned int v444;
  uint64_t v445;
  unsigned int *v446;
  uint64_t v447;
  unint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unsigned __int8 *v454;
  uint64_t v455;
  uint64_t v456;
  int v457;
  int v458;
  int v459;
  unsigned int v460;
  unsigned int *v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  unsigned __int8 *v469;
  uint64_t v470;
  uint64_t v471;
  int v472;
  int v473;
  int v474;
  unsigned int v475;
  unsigned int *v476;
  uint64_t v477;
  unint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  unsigned __int8 *v484;
  uint64_t v485;
  uint64_t v486;
  int v487;
  int v488;
  int v489;
  unsigned int v490;
  uint64_t v491;
  unsigned int *v492;
  uint64_t v493;
  unint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  unsigned __int8 *v500;
  uint64_t v501;
  uint64_t v502;
  int v503;
  int v504;
  int v505;
  unsigned int v506;
  uint64_t v507;
  unsigned int *v508;
  uint64_t v509;
  unint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  unsigned __int8 *v516;
  uint64_t v517;
  uint64_t v518;
  int v519;
  int v520;
  int v521;
  unsigned int v522;
  uint64_t v523;
  unsigned int *v524;
  uint64_t v525;
  unint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  unsigned __int8 *v532;
  uint64_t v533;
  uint64_t v534;
  int v535;
  int v536;
  int v537;
  unsigned int v538;
  uint64_t v539;
  unsigned int *v540;
  uint64_t v541;
  unint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unsigned __int8 *v548;
  uint64_t v549;
  uint64_t v550;
  int v551;
  int v552;
  int v553;
  unsigned int v554;
  uint64_t v555;
  unsigned int *v556;
  uint64_t v557;
  unint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  unsigned __int8 *v564;
  uint64_t v565;
  uint64_t v566;
  int v567;
  int v568;
  int v569;
  unsigned int v570;
  uint64_t v571;
  unsigned int *v572;
  uint64_t v573;
  unint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  unsigned __int8 *v580;
  uint64_t v581;
  uint64_t v582;
  int v583;
  int v584;
  int v585;
  unsigned int v586;
  uint64_t v587;
  unsigned int *v588;
  uint64_t v589;
  unint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  unsigned __int8 *v596;
  uint64_t v597;
  uint64_t v598;
  int v599;
  int v600;
  int v601;
  unsigned int v602;
  uint64_t v603;
  unsigned int *v604;
  uint64_t v605;
  unint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  unsigned __int8 *v612;
  uint64_t v613;
  uint64_t v614;
  int v615;
  int v616;
  int v617;
  unsigned int v618;
  uint64_t v619;
  unsigned int *v620;
  uint64_t v621;
  unint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  unsigned __int8 *v628;
  uint64_t v629;
  uint64_t v630;
  int v631;
  int v632;
  int v633;
  unsigned int v634;
  unsigned int *v635;
  uint64_t v636;
  unint64_t v637;
  uint64_t v638;
  uint64_t v639;
  int v640;
  int v641;
  int v642;
  unsigned int v643;
  unsigned int v644;
  uint32x2_t v645;
  int8x8_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  int v651;
  int v652;
  unsigned int v653;
  unsigned int v654;
  unsigned int v655;
  unsigned int v656;
  uint32x2_t v657;
  uint32x2_t v658;
  int32x2_t v659;
  unsigned int *v660;
  uint64_t v661;
  unint64_t v662;
  uint64_t v663;
  unsigned int *v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  int8x8_t v671;
  _BYTE *v672;
  int v673;
  int v674;
  int v675;
  int v676;
  unsigned int v677;
  unsigned int v678;
  uint32x2_t v679;
  int32x2_t v680;
  uint32x2_t v681;
  uint32x2_t v682;
  uint32x2_t v683;
  int8x8_t v684;
  unsigned int v685;
  uint32x2_t v686;
  int8x8_t v687;
  unsigned int *v688;
  _BYTE *v689;
  unint64_t v690;
  uint64_t v691;
  _BYTE *v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  unsigned __int8 *v698;
  int v699;
  int v700;
  int v701;
  unsigned int v702;
  uint32x2_t v703;
  int8x8_t v704;
  unsigned __int32 v705;
  unsigned int v706;
  unsigned int v707;
  unsigned int v708;
  int32x2_t v709;
  uint32x2_t v710;
  uint32x2_t v711;
  int32x2_t v712;
  unsigned int *v713;
  unsigned __int8 *v714;
  uint64_t v715;
  unint64_t v716;
  uint64_t v717;
  unsigned __int8 *v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  unsigned __int8 *v722;
  uint64_t v723;
  uint64_t v724;
  int v725;
  int v726;
  int v727;
  unsigned int v728;
  uint32x2_t v729;
  int8x8_t v730;
  unsigned int *v731;
  unsigned __int8 *v732;
  unint64_t v733;
  uint64_t v734;
  unsigned __int8 *v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  int v739;
  int v740;
  int v741;
  unsigned int v742;
  unsigned int v743;
  unsigned int v744;
  unsigned int v745;
  unsigned int v746;
  unsigned int v747;
  unsigned int *v748;
  uint64_t v749;
  unint64_t v750;
  uint64_t v751;
  unsigned int *v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  int v756;
  int v757;
  unsigned int v758;
  uint32x2_t v759;
  int8x8_t v760;
  unsigned int v761;
  int32x2_t v762;
  int8x8_t v763;
  int v764;
  unsigned int *v765;
  uint64_t v766;
  unint64_t v767;
  unint64_t v768;
  uint64_t v769;
  unsigned int *v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  int v774;
  int v775;
  unsigned int v776;
  unsigned int v777;
  unsigned int v778;
  uint32x2_t v779;
  uint32x2_t v780;
  int32x2_t v781;
  int8x8_t v782;
  unsigned int v783;
  unsigned int *v784;
  uint64_t v785;
  unint64_t v786;
  unint64_t v787;
  uint64_t v788;
  unsigned int *v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  unint64_t v836;
  unint64_t v837;
  unint64_t v838;
  uint64_t v839;
  uint64_t v840;
  int v841;
  unint64_t v842;
  _BYTE *v843;
  unint64_t v844;
  int v845;
  int v846;
  unint64_t v847;
  unint64_t v848;
  unint64_t v849;
  unint64_t v850;
  unint64_t v851;
  unint64_t v852;
  unint64_t v853;
  unint64_t v854;
  unint64_t v855;
  unint64_t v856;
  unint64_t v857;
  unint64_t v858;
  unint64_t v859;
  unint64_t v860;
  unint64_t v861;
  int v862;

  v2 = *(_QWORD *)(result + 48);
  v3 = *(_QWORD *)(result + 136);
  v5 = *(int *)(result + 12);
  v4 = *(int *)(result + 16);
  if (v2)
  {
    v6 = *(int *)(result + 32);
    v7 = (char *)(v2 + v5 + (int)v6 * (uint64_t)(int)v4);
    v8 = -1;
    if (!v3)
      return result;
  }
  else
  {
    v7 = 0;
    v6 = 0;
    v8 = 0;
    if (!v3)
      return result;
  }
  v9 = *(_DWORD *)(result + 4);
  v10 = *(_DWORD *)(result + 8);
  v12 = *(_QWORD *)(result + 88);
  v11 = *(_QWORD *)(result + 96);
  v13 = (unint64_t)*(int *)(result + 28) >> 2;
  v14 = (unsigned int *)(*(_QWORD *)(result + 40) + 4 * (v5 + v13 * v4));
  v15 = *(int *)(result + 124);
  v16 = (_BYTE *)(v3 + *(int *)(result + 104) + *(int *)(result + 108) * (uint64_t)(int)v15);
  v17 = *(int *)(result + 56);
  v18 = *(int *)(result + 60);
  v19 = *(int *)(result + 76);
  if ((*(_DWORD *)result & 0xFF00) != 0x100)
  {
    v21 = *(_DWORD *)(result + 64);
    v22 = *(_DWORD *)(result + 68);
    v842 = v19 >> 2;
    v843 = *(_BYTE **)(result + 96);
    if (v11)
    {
      v840 = *(int *)(result + 80);
      v20 = 1;
    }
    else
    {
      v840 = 0;
      v20 = 0;
    }
    result = v12 + 4 * v842 * v22;
    v8 &= 1u;
    v27 = 1;
    v844 = v12;
    v23 = (unsigned int *)v12;
    goto LABEL_19;
  }
  v842 = v19 >> 2;
  if (v11)
  {
    v840 = *(int *)(result + 80);
    v843 = (_BYTE *)(v11 + v17 + (int)v840 * (uint64_t)(int)v18);
    v20 = -1;
  }
  else
  {
    v843 = 0;
    v840 = 0;
    v20 = 0;
  }
  v23 = (unsigned int *)(v12 + 4 * (v17 + v842 * v18));
  if (v842 == v13 && (char *)v14 - (char *)v23 >= 1)
  {
    if (v9 >= (uint64_t)((unint64_t)((char *)v14 - (char *)v23) >> 2))
    {
      v14 += v9 - 1;
      v23 += v9 - 1;
      v16 += v9 - 1;
      v7 += v8 & (v9 - 1);
      v27 = -1;
      v842 = (unint64_t)*(int *)(result + 28) >> 2;
      v843 += v20 & (v9 - 1);
      goto LABEL_16;
    }
    v24 = v10 - 1;
    v25 = v13 * v24;
    v26 = &v23[v13 * v24];
    if (v14 <= &v26[v9 - 1])
    {
      v13 = -(uint64_t)v13;
      v16 += v15 * v24;
      v15 = -v15;
      v7 += v6 * v24;
      v6 = -v6;
      v8 &= 1u;
      v842 = v13;
      v843 += v840 * v24;
      v840 = -v840;
      v20 &= 1u;
      v27 = 1;
      v23 = v26;
      v14 += v25;
      goto LABEL_16;
    }
  }
  v8 &= 1u;
  v20 &= 1u;
  v27 = 1;
LABEL_16:
  result = 0;
  v844 = 0;
  v12 = -1;
  v22 = v840;
  v21 = v842;
LABEL_19:
  v28 = v27 * v9;
  v841 = v9;
  v837 = result;
  v845 = v10;
  if (result)
  {
    v29 = (int)v18 % v22;
    v30 = &v23[v842 * v29];
    result = (int)v17 % v21;
    v23 = &v30[result];
    v12 = (unint64_t)&v30[v21];
    v31 = (unint64_t)v843;
    if ((v20 & 1) != 0)
      v31 = (unint64_t)&v843[v840 * v29 + result];
    v843 = (_BYTE *)v31;
    v844 = (unint64_t)v23;
  }
  else
  {
    v842 -= v28;
    v840 -= v20 * v9;
  }
  v839 = v15 - v28;
  v838 = v13 - v28;
  v836 = v6 - v8 * v9;
  v862 = v20;
  v846 = v8;
  switch(a2)
  {
    case 0:
      if (v8)
      {
        do
        {
          v32 = v9;
          v33 = v845;
          do
          {
            v34 = *v16;
            if (*v16)
            {
              if (v34 == 255)
              {
                LOBYTE(v35) = 0;
                *v14 = 0;
              }
              else
              {
                v36 = v34 ^ 0xFF;
                v35 = (*v7 * v36 + ((*v7 * v36) >> 8) + 1) >> 8;
                v37 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v14), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v36));
                v38 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v37, v37, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                *v14 = v38.i32[0] | (((*v14 & 0x3FF) * v36 + (((*v14 & 0x3FF) * v36) >> 8) + 1) >> 8) | v38.i32[1] | 0xC0000000;
              }
              *v7 = v35;
            }
            v16 += v27;
            v7 += v8;
            v14 += v27;
            --v32;
          }
          while (v32);
          v16 += v839;
          v14 += v838;
          v7 += v836;
          --v845;
        }
        while (v33 != 1);
      }
      else
      {
        do
        {
          v640 = v9;
          v641 = v845;
          do
          {
            v642 = *v16;
            if (*v16)
            {
              if (v642 == 255)
              {
                v643 = 0;
              }
              else
              {
                v644 = v642 ^ 0xFF;
                v645 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v14), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v644));
                v646 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v645, v645, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                v643 = *v14
                     - (v646.i32[0] | (((*v14 & 0x3FF) * v644 + (((*v14 & 0x3FF) * v644) >> 8) + 1) >> 8) | v646.i32[1])
                     + 0x40000000;
              }
              *v14 = v643;
            }
            v16 += v27;
            v14 += v27;
            --v640;
          }
          while (v640);
          v16 += v839;
          v14 += v838;
          --v845;
        }
        while (v641 != 1);
      }
      return result;
    case 1:
      if (v8)
      {
        v39 = v27;
        if (v20)
        {
          v40 = v20;
          v41 = v22;
          v42 = -(uint64_t)(v842 * v22);
          v43 = -(v840 * v41);
          v44 = -(uint64_t)v21;
          v45 = v843;
          do
          {
            v46 = v841;
            v47 = v845;
            do
            {
              v48 = *v16;
              if (*v16)
              {
                if (v48 == 255)
                {
                  *v14 = *v23;
                  LOBYTE(v49) = *v45;
                }
                else
                {
                  v51 = v48 ^ 0xFF;
                  v49 = ((*v7 * v51 + ((*v7 * v51) >> 8) + 1) >> 8)
                      + ((*v45 * v48 + ((*v45 * v48) >> 8) + 1) >> 8);
                  if (v49 >= 0xFF)
                    LOBYTE(v49) = -1;
                  v50 = (*v23 & 0x3FF) * v48 + (((*v23 & 0x3FF) * v48) >> 8) + 1;
                  v52 = ((*v14 & 0x3FF) * v51 + (((*v14 & 0x3FF) * v51) >> 8) + 1) >> 8;
                  v53 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v23), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v48));
                  v54 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v14), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v51));
                  v55 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v54, v54, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v53, v53, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                  v56 = (int8x8_t)vdup_lane_s32(v55, 1);
                  if (v52 + (v50 >> 8) >= 0x3FF)
                    v57 = 1023;
                  else
                    v57 = v52 + (v50 >> 8);
                  *v14 = vorr_s8((int8x8_t)v55, v56).u32[0] | v57 | 0xC0000000;
                }
                *v7 = v49;
              }
              v16 += v27;
              v7 += v8;
              v58 = &v23[v27];
              v59 = &v45[v40];
              if ((unint64_t)v58 >= v12)
                v60 = v44;
              else
                v60 = 0;
              v45 = &v59[v60];
              v23 = &v58[v60];
              v14 += v27;
              --v46;
            }
            while (v46);
            if (v837)
            {
              v61 = v844 + 4 * v842;
              if (v61 >= v837)
                v62 = v43;
              else
                v62 = 0;
              v63 = &v843[v840 + v62];
              if (v61 >= v837)
                v64 = v42;
              else
                v64 = 0;
              v23 = (unsigned int *)(v61 + 4 * v64);
              v12 += 4 * v64 + 4 * v842;
              v843 += v840 + v62;
              v844 = (unint64_t)v23;
              v45 = v63;
            }
            else
            {
              v23 += v842;
              v45 += v840;
            }
            v16 += v839;
            v14 += v838;
            result = v836;
            v7 += v836;
            --v845;
          }
          while (v47 != 1);
        }
        else
        {
          v772 = -(uint64_t)v21;
          v773 = -(uint64_t)(v842 * v22);
          do
          {
            v774 = v841;
            v775 = v845;
            do
            {
              v776 = *v16;
              if (*v16)
              {
                if (v776 == 255)
                {
                  *v14 = *v23;
                  LOBYTE(v777) = -1;
                }
                else
                {
                  v778 = v776 ^ 0xFF;
                  v777 = ((*v7 * v778 + ((*v7 * v778) >> 8) + 1) >> 8)
                       + ((255 * v776 + ((255 * v776) >> 8) + 1) >> 8);
                  if (v777 >= 0xFF)
                    LOBYTE(v777) = -1;
                  v779 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v23), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v776));
                  v780 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v14), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v778));
                  v781 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v780, v780, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v779, v779, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                  v782 = (int8x8_t)vdup_lane_s32(v781, 1);
                  if ((((*v14 & 0x3FF) * v778 + (((*v14 & 0x3FF) * v778) >> 8) + 1) >> 8)
                     + (((*v23 & 0x3FF) * v776 + (((*v23 & 0x3FF) * v776) >> 8) + 1) >> 8) >= 0x3FF)
                    v783 = 1023;
                  else
                    v783 = (((*v14 & 0x3FF) * v778 + (((*v14 & 0x3FF) * v778) >> 8) + 1) >> 8)
                         + (((*v23 & 0x3FF) * v776 + (((*v23 & 0x3FF) * v776) >> 8) + 1) >> 8);
                  *v14 = vorr_s8((int8x8_t)v781, v782).u32[0] | v783 | 0xC0000000;
                }
                *v7 = v777;
              }
              v16 += v39;
              v7 += v8;
              v784 = &v23[v39];
              if ((unint64_t)v784 >= v12)
                v785 = v772;
              else
                v785 = 0;
              v23 = &v784[v785];
              v14 += v39;
              --v774;
            }
            while (v774);
            v16 += v839;
            v14 += v838;
            v7 += v836;
            result = v842;
            v786 = v844;
            v787 = v844 + 4 * v842;
            if (v787 >= v837)
              v788 = v773;
            else
              v788 = 0;
            v789 = (unsigned int *)(v787 + 4 * v788);
            v790 = v12 + 4 * v788 + 4 * v842;
            if (v837)
            {
              v12 = v790;
              v786 = (unint64_t)v789;
              v23 = v789;
            }
            else
            {
              v23 += v842;
            }
            v844 = v786;
            --v845;
          }
          while (v775 != 1);
        }
      }
      else
      {
        v647 = v27;
        v648 = -(uint64_t)v21;
        v649 = -(uint64_t)(v842 * v22);
        v650 = 4 * v27;
        do
        {
          v651 = v841;
          v652 = v845;
          do
          {
            v653 = *v16;
            if (*v16)
            {
              if (v653 == 255)
              {
                v654 = *v23;
              }
              else
              {
                v655 = v653 ^ 0xFF;
                v656 = (((*v14 & 0x3FF) * v655 + (((*v14 & 0x3FF) * v655) >> 8) + 1) >> 8)
                     + (((*v23 & 0x3FF) * v653 + (((*v23 & 0x3FF) * v653) >> 8) + 1) >> 8);
                if (v656 >= 0x3FF)
                  v656 = 1023;
                v657 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v23), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v653));
                v658 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v14), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v655));
                v659 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v658, v658, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v657, v657, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                v654 = vorr_s8((int8x8_t)v659, (int8x8_t)vdup_lane_s32(v659, 1)).u32[0] | v656 | 0xC0000000;
              }
              *v14 = v654;
            }
            v16 += v647;
            v660 = &v23[v647];
            if ((unint64_t)v660 >= v12)
              v661 = v648;
            else
              v661 = 0;
            v23 = &v660[v661];
            v14 = (unsigned int *)((char *)v14 + v650);
            --v651;
          }
          while (v651);
          v16 += v839;
          v14 += v838;
          result = v844;
          v662 = v844 + 4 * v842;
          if (v662 >= v837)
            v663 = v649;
          else
            v663 = 0;
          v664 = (unsigned int *)(v662 + 4 * v663);
          v665 = v12 + 4 * v663 + 4 * v842;
          if (v837)
          {
            v12 = v665;
            result = (unint64_t)v664;
            v23 = v664;
          }
          else
          {
            v23 += v842;
          }
          v844 = result;
          --v845;
        }
        while (v652 != 1);
      }
      return result;
    case 2:
      v65 = v27;
      if (v8)
      {
        v66 = v20;
        v67 = v22;
        v68 = -(uint64_t)(v842 * v22);
        v69 = -(v840 * v67);
        v70 = -(uint64_t)v21;
        v71 = v843;
        while (1)
        {
          v72 = v9;
          v73 = v845;
          do
          {
            v74 = *v16;
            if (!*v16)
              goto LABEL_78;
            if (v74 == 255)
            {
              v75 = *v71;
              if (!*v71)
                goto LABEL_78;
              if ((_DWORD)v75 == 255)
              {
                *v14 = *v23;
                v76 = -1;
              }
              else
              {
                v85 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v14), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v75 ^ 0xFF));
                *(uint32x2_t *)v86.i8 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v85, v85, 8uLL), (int32x2_t)0x100000001), 8uLL);
                v87 = v86.u32[0] | ((unint64_t)(((*v14 & 0x3FF) * (v75 ^ 0xFF)
                                                      + (((*v14 & 0x3FF) * (v75 ^ 0xFF)) >> 8)
                                                      + 1) >> 8) << 32);
                v86.i32[0] = (*v7 * (v75 ^ 0xFF)
                            + ((*v7 * (v75 ^ 0xFF)) >> 8)
                            + 1) >> 8;
                v86.i64[1] = v87;
                v88 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v23), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003);
                v89 = v88.u32[0] | ((unint64_t)(*v23 & 0x3FF) << 32);
                v90.i64[0] = v75 | ((unint64_t)v88.u32[1] << 32);
                v90.i64[1] = v89;
                v91 = vaddq_s64(v86, v90);
                v76 = v91.i8[0];
                *v14 = ((unint64_t)v91.i64[0] >> 12) & 0x3FF00000 | v91.i16[6] & 0x3FF | ((v91.i16[4] & 0x3FF) << 10) | 0xC0000000;
              }
            }
            else
            {
              v77 = *v71 * v74 + ((*v71 * v74) >> 8) + 1;
              if ((v77 & 0xFF00) == 0)
                goto LABEL_78;
              v78 = (*v23 & 0x3FF) * v74 + (((*v23 & 0x3FF) * v74) >> 8) + 1;
              v79 = v77 >> 8;
              v80 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v14), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v79 ^ 0xFF));
              *(uint32x2_t *)v81.i8 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v80, v80, 8uLL), (int32x2_t)0x100000001), 8uLL);
              v82 = v81.u32[0] | ((unint64_t)(((*v14 & 0x3FF) * (v79 ^ 0xFF)
                                                    + (((*v14 & 0x3FF) * (v79 ^ 0xFF)) >> 8)
                                                    + 1) >> 8) << 32);
              v81.i32[0] = ((v79 ^ 0xFF) * *v7
                          + (((v79 ^ 0xFF) * *v7) >> 8)
                          + 1) >> 8;
              v81.i64[1] = v82;
              v83.i64[0] = v79 | ((unint64_t)(((((((*v23 >> 20) & 0x3FF) * v74
                                                       + ((((*v23 >> 20) & 0x3FF) * v74) >> 8)) << 12)
                                                     + 4096) & 0x3FF00000 | (v78 >> 8)) >> 20) << 32);
              v83.i32[2] = ((4 * (((*v23 >> 10) & 0x3FF) * v74 + ((((*v23 >> 10) & 0x3FF) * v74) >> 8)) + 4) | (v78 >> 8)) >> 10;
              v83.i32[3] = v78 >> 8;
              v84 = vaddq_s64(v81, v83);
              *v14 = ((unint64_t)v84.i64[0] >> 12) & 0x3FF00000 | v84.i16[6] & 0x3FF | ((v84.i16[4] & 0x3FF) << 10) | 0xC0000000;
              v76 = v84.i8[0];
            }
            *v7 = v76;
LABEL_78:
            v16 += v65;
            v7 += v8;
            v92 = &v23[v65];
            v93 = &v71[v66];
            if ((unint64_t)v92 >= v12)
              result = v70;
            else
              result = 0;
            v71 = &v93[result];
            v23 = &v92[result];
            v14 += v65;
            --v72;
          }
          while (v72);
          if (v837)
          {
            result = v842;
            v94 = v844 + 4 * v842;
            if (v94 >= v837)
              v95 = v69;
            else
              v95 = 0;
            v96 = &v843[v840 + v95];
            if (v94 >= v837)
              v97 = v68;
            else
              v97 = 0;
            v23 = (unsigned int *)(v94 + 4 * v97);
            v12 += 4 * v97 + 4 * v842;
            v843 += v840 + v95;
            v844 = (unint64_t)v23;
            v71 = v96;
          }
          else
          {
            v23 += v842;
            v71 += v840;
          }
          v16 += v839;
          v14 += v838;
          v7 += v836;
          --v845;
          if (v73 == 1)
            return result;
        }
      }
      v666 = v22;
      v667 = -(uint64_t)(v842 * v22);
      v668 = -(v840 * v666);
      v669 = -(uint64_t)v21;
      __asm { FMOV            V16.2S, #1.875 }
      v671 = (int8x8_t)vdup_n_s32(0xFFC00u);
      v672 = v843;
      break;
    case 3:
      v98 = v20;
      v99 = v22;
      v100 = -(uint64_t)(v842 * v22);
      v101 = -(v840 * v99);
      v102 = -(uint64_t)v21;
      v103 = v843;
      do
      {
        v104 = v841;
        v105 = v845;
        do
        {
          v106 = *v16;
          if (*v16)
          {
            if (v106 == 255)
            {
              if (v20)
                v107 = *v103;
              else
                v107 = 255;
              v109 = *v7;
              v110 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v23), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v109));
              v111 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v110, v110, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
              v112 = (v109 * v107 + ((v109 * v107) >> 8) + 1) >> 8;
              v113 = v111.i32[0] | (((*v23 & 0x3FF) * v109 + (((*v23 & 0x3FF) * v109) >> 8) + 1) >> 8) | v111.i32[1];
            }
            else
            {
              if (v20)
                v108 = *v103;
              else
                v108 = 255;
              v114 = *v7;
              v115 = (v114 * v106 + ((v114 * v106) >> 8) + 1) >> 8;
              v116 = (int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v23), (uint32x2_t)0xFFFFFFECFFFFFFF6);
              v117 = v106 ^ 0xFF;
              v112 = ((v115 * v108 + ((v115 * v108) >> 8) + 1) >> 8) + ((v114 * v117 + ((v114 * v117) >> 8) + 1) >> 8);
              if (v112 >= 0xFF)
                LOBYTE(v112) = -1;
              v118 = (((*v14 & 0x3FF) * v117 + (((*v14 & 0x3FF) * v117) >> 8) + 1) >> 8)
                   + ((v115 * (*v23 & 0x3FF) + ((v115 * (*v23 & 0x3FF)) >> 8) + 1) >> 8);
              if (v118 >= 0x3FF)
                v118 = 1023;
              v119 = (uint32x2_t)vmul_s32(vdup_n_s32(v115), (int32x2_t)vand_s8(v116, (int8x8_t)0x300000003));
              v120 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v14), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v117));
              v121 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v120, v120, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v119, v119, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
              v113 = vorr_s8((int8x8_t)v121, (int8x8_t)vdup_lane_s32(v121, 1)).u32[0] | v118;
              v20 = v862;
            }
            *v14 = v113 | 0xC0000000;
            *v7 = v112;
          }
          v16 += v27;
          v7 += v8;
          v122 = &v23[v27];
          v123 = &v103[v98];
          if ((unint64_t)v122 >= v12)
            v124 = v102;
          else
            v124 = 0;
          v103 = &v123[v124];
          v23 = &v122[v124];
          v14 += v27;
          --v104;
        }
        while (v104);
        if (v837)
        {
          v125 = v844 + 4 * v842;
          if (v125 >= v837)
            v126 = v101;
          else
            v126 = 0;
          v127 = &v843[v840 + v126];
          if (v125 >= v837)
            v128 = v100;
          else
            v128 = 0;
          v23 = (unsigned int *)(v125 + 4 * v128);
          v12 += 4 * v128 + 4 * v842;
          v843 += v840 + v126;
          v844 = (unint64_t)v23;
          v103 = v127;
        }
        else
        {
          v23 += v842;
          v103 += v840;
        }
        v16 += v839;
        v14 += v838;
        result = v836;
        v7 += v836;
        --v845;
      }
      while (v105 != 1);
      return result;
    case 4:
      v129 = v20;
      v130 = v22;
      v131 = -(uint64_t)(v842 * v22);
      v132 = -(v840 * v130);
      v133 = -(uint64_t)v21;
      v134 = v843;
      do
      {
        v135 = v841;
        v136 = v845;
        do
        {
          v137 = *v16;
          if (*v16)
          {
            if (v137 == 255)
            {
              if (v20)
                v138 = *v134;
              else
                v138 = 255;
              v140 = *v7 ^ 0xFF;
              v141 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v23), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v140));
              v142 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v141, v141, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
              v143 = (v140 * v138 + ((v140 * v138) >> 8) + 1) >> 8;
              v144 = v142.i32[0] | (((*v23 & 0x3FF) * v140 + (((*v23 & 0x3FF) * v140) >> 8) + 1) >> 8) | v142.i32[1];
            }
            else
            {
              if (v20)
                v139 = *v134;
              else
                v139 = 255;
              v145 = *v7;
              v146 = ((v145 ^ 0xFF) * v137 + (((v145 ^ 0xFFu) * v137) >> 8) + 1) >> 8;
              v147 = (int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v23), (uint32x2_t)0xFFFFFFECFFFFFFF6);
              v148 = v137 ^ 0xFF;
              v143 = ((v146 * v139 + ((v146 * v139) >> 8) + 1) >> 8) + ((v145 * v148 + ((v145 * v148) >> 8) + 1) >> 8);
              if (v143 >= 0xFF)
                LOBYTE(v143) = -1;
              v149 = (((*v14 & 0x3FF) * v148 + (((*v14 & 0x3FF) * v148) >> 8) + 1) >> 8)
                   + ((v146 * (*v23 & 0x3FF) + ((v146 * (*v23 & 0x3FF)) >> 8) + 1) >> 8);
              if (v149 >= 0x3FF)
                v149 = 1023;
              v150 = (uint32x2_t)vmul_s32(vdup_n_s32(v146), (int32x2_t)vand_s8(v147, (int8x8_t)0x300000003));
              v151 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v14), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v148));
              v152 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v151, v151, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v150, v150, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
              v144 = vorr_s8((int8x8_t)v152, (int8x8_t)vdup_lane_s32(v152, 1)).u32[0] | v149;
              v20 = v862;
            }
            *v14 = v144 | 0xC0000000;
            *v7 = v143;
          }
          v16 += v27;
          v7 += v8;
          v153 = &v23[v27];
          v154 = &v134[v129];
          if ((unint64_t)v153 >= v12)
            v155 = v133;
          else
            v155 = 0;
          v134 = &v154[v155];
          v23 = &v153[v155];
          v14 += v27;
          --v135;
        }
        while (v135);
        if (v837)
        {
          v156 = v844 + 4 * v842;
          if (v156 >= v837)
            v157 = v132;
          else
            v157 = 0;
          v158 = &v843[v840 + v157];
          if (v156 >= v837)
            v159 = v131;
          else
            v159 = 0;
          v23 = (unsigned int *)(v156 + 4 * v159);
          v12 += 4 * v159 + 4 * v842;
          v843 += v840 + v157;
          v844 = (unint64_t)v23;
          v134 = v158;
        }
        else
        {
          v23 += v842;
          v134 += v840;
        }
        v16 += v839;
        v14 += v838;
        result = v836;
        v7 += v836;
        --v845;
      }
      while (v136 != 1);
      return result;
    case 5:
      v160 = v8;
      v161 = v20;
      v162 = v22;
      v163 = -(uint64_t)(v842 * v22);
      v164 = -(v840 * v162);
      __asm { FMOV            V1.2S, #1.875 }
      v170 = -(uint64_t)v21;
      v171 = v843;
      do
      {
        v172 = v841;
        v173 = v845;
        do
        {
          v174 = *v16;
          if (*v16)
          {
            v175 = *v7;
            v176 = (*v171 * v174 + ((*v171 * v174) >> 8) + 1) >> 8;
            v177 = ((*v23 >> 20) & 0x3FF) * v174;
            v178 = v177 >> 8;
            v179 = v177 + 1;
            v180 = ((*v23 >> 10) & 0x3FF) * v174;
            v181 = ((*v23 & 0x3FF) * v174 + (((*v23 & 0x3FF) * v174) >> 8) + 1) >> 8;
            v182 = v176 * v175 + ((v176 * v175) >> 8) + 1;
            v183 = v176 ^ 0xFF;
            v184 = ((v183 * v175 + ((v183 * v175) >> 8) + 1) >> 8) + (v182 >> 8);
            if (v184 >= 0xFF)
              LOBYTE(v184) = -1;
            v185 = ((v183 * (*v14 & 0x3FF) + ((v183 * (*v14 & 0x3FF)) >> 8) + 1) >> 8)
                 + ((v181 * v175 + ((v181 * v175) >> 8) + 1) >> 8);
            if (v185 >= 0x3FF)
              v185 = 1023;
            v186.i32[0] = 1;
            v186.i32[1] = v178;
            v187 = vadd_s32((int32x2_t)__PAIR64__(v179, v180), v186);
            v186.i32[0] = vshl_n_s32(vadd_s32(v187, (int32x2_t)((v180 >> 8) | 0xC00000000)), 2uLL).u32[0];
            v186.i32[1] = vand_s8((int8x8_t)vshl_n_s32(v187, 0xCuLL), _D1).i32[1];
            v188 = (uint32x2_t)vmul_s32((int32x2_t)vshl_u32((uint32x2_t)vorr_s8((int8x8_t)vdup_n_s32(v181), (int8x8_t)v186), (uint32x2_t)0xFFFFFFECFFFFFFF6), vdup_n_s32(v175));
            v189 = (uint32x2_t)vmul_s32(vdup_n_s32(v183), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v14), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003));
            v190 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v188, v188, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v189, v189, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
            *v14 = vorr_s8((int8x8_t)v190, (int8x8_t)vdup_lane_s32(v190, 1)).u32[0] | v185 | 0xC0000000;
            *v7 = v184;
          }
          v16 += v27;
          v7 += v160;
          v191 = &v23[v27];
          v192 = &v171[v161];
          if ((unint64_t)v191 >= v12)
            v193 = v170;
          else
            v193 = 0;
          v171 = &v192[v193];
          v23 = &v191[v193];
          v14 += v27;
          --v172;
        }
        while (v172);
        if (v837)
        {
          v194 = v844 + 4 * v842;
          if (v194 >= v837)
            v195 = v164;
          else
            v195 = 0;
          v196 = &v843[v840 + v195];
          if (v194 >= v837)
            v197 = v163;
          else
            v197 = 0;
          v23 = (unsigned int *)(v194 + 4 * v197);
          v12 += 4 * v197 + 4 * v842;
          v843 += v840 + v195;
          v844 = (unint64_t)v23;
          v171 = v196;
        }
        else
        {
          v23 += v842;
          v171 += v840;
        }
        v16 += v839;
        v14 += v838;
        result = v836;
        v7 += v836;
        --v845;
      }
      while (v173 != 1);
      return result;
    case 6:
      v198 = v22;
      v199 = -(uint64_t)(v842 * v22);
      v200 = -(v840 * v198);
      v201 = -(uint64_t)v21;
      v202 = v843;
      do
      {
        v203 = v841;
        v204 = v845;
        do
        {
          v205 = *v16;
          if (*v16)
          {
            v206 = *v7;
            if ((_BYTE)v206 != 0xFF)
            {
              if (~(_BYTE)v206 == 255)
              {
                if (v20)
                  v207 = *v202;
                else
                  v207 = 255;
                v209 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v23), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v205));
                v210 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v209, v209, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                LODWORD(v206) = (v207 * v205 + ((v207 * v205) >> 8) + 1) >> 8;
                v211 = v210.i32[0] | (((*v23 & 0x3FF) * v205 + (((*v23 & 0x3FF) * v205) >> 8) + 1) >> 8) | v210.i32[1] | 0xC0000000;
              }
              else
              {
                if (v20)
                  v208 = *v202;
                else
                  v208 = 255;
                v212 = (~(_BYTE)v206 * v205 + ((~(_BYTE)v206 * v205) >> 8) + 1) >> 8;
                v213 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v23), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v212));
                *(uint32x2_t *)v214.i8 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v213, v213, 8uLL), (int32x2_t)0x100000001), 8uLL);
                v215 = v214.u32[0] | ((unint64_t)(((*v23 & 0x3FF) * v212 + (((*v23 & 0x3FF) * v212) >> 8) + 1) >> 8) << 32);
                v214.i32[0] = (v212 * v208 + ((v212 * v208) >> 8) + 1) >> 8;
                v214.i64[1] = v215;
                v216 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v14), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003);
                v217 = v216.u32[0] | ((unint64_t)(*v14 & 0x3FF) << 32);
                v218.i64[0] = v206 | ((unint64_t)v216.u32[1] << 32);
                v218.i64[1] = v217;
                v219 = vaddq_s64(v214, v218);
                LOBYTE(v206) = v219.i8[0];
                v211 = ((unint64_t)v219.i64[0] >> 12) & 0x3FF00000 | v219.i16[6] & 0x3FF | ((v219.i16[4] & 0x3FF) << 10) | 0xC0000000;
              }
              *v14 = v211;
              *v7 = v206;
            }
          }
          v16 += v27;
          v7 += v8;
          v220 = &v23[v27];
          v221 = &v202[v20];
          if ((unint64_t)v220 >= v12)
            v222 = v201;
          else
            v222 = 0;
          v202 = &v221[v222];
          v23 = &v220[v222];
          v14 += v27;
          --v203;
        }
        while (v203);
        result = v837;
        if (v837)
        {
          v223 = v844 + 4 * v842;
          if (v223 >= v837)
            v224 = v200;
          else
            v224 = 0;
          v225 = &v843[v840 + v224];
          if (v223 >= v837)
            v226 = v199;
          else
            v226 = 0;
          result = v12 + 4 * v226;
          v23 = (unsigned int *)(v223 + 4 * v226);
          v12 = result + 4 * v842;
          v843 = v225;
          v844 = (unint64_t)v23;
          v202 = v225;
        }
        else
        {
          v23 += v842;
          v202 += v840;
        }
        v16 += v839;
        v14 += v838;
        v7 += v836;
        --v845;
      }
      while (v204 != 1);
      return result;
    case 7:
      if (v8)
      {
        v227 = v8;
        v228 = v22;
        v229 = -(uint64_t)(v842 * v22);
        v230 = -(v840 * v228);
        v231 = -(uint64_t)v21;
        v232 = v843;
        do
        {
          v233 = v841;
          v234 = v845;
          do
          {
            v235 = *v16;
            if (*v16)
            {
              if (v235 == 255)
              {
                v236 = *v232;
                v237 = (v236 * *v7 + ((v236 * *v7) >> 8) + 1) >> 8;
                v238 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v14), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v236));
                v239 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v238, v238, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                v240 = v239.u32[1];
                v241 = v239.i32[0] | (((*v14 & 0x3FF) * v236 + (((*v14 & 0x3FF) * v236) >> 8) + 1) >> 8);
              }
              else
              {
                v242 = (*v232 * v235 + ((*v232 * v235) >> 8) + 1) >> 8;
                v243 = v235 ^ 0xFF;
                v237 = ((v242 * *v7 + ((v242 * *v7) >> 8) + 1) >> 8)
                     + ((*v7 * v243 + ((*v7 * v243) >> 8) + 1) >> 8);
                if (v237 >= 0xFF)
                  LOBYTE(v237) = -1;
                v240 = ((v242 * (*v14 & 0x3FF) + ((v242 * (*v14 & 0x3FF)) >> 8) + 1) >> 8)
                     + (((*v14 & 0x3FF) * v243 + (((*v14 & 0x3FF) * v243) >> 8) + 1) >> 8);
                if (v240 >= 0x3FF)
                  v240 = 1023;
                v244 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v14), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003);
                v245 = (uint32x2_t)vmul_s32(vdup_n_s32(v242), v244);
                v246 = (uint32x2_t)vmul_s32(v244, vdup_n_s32(v243));
                v247 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v245, v245, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v246, v246, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                v241 = vorr_s8((int8x8_t)v247, (int8x8_t)vdup_lane_s32(v247, 1)).u32[0];
              }
              *v14 = v241 | v240 | 0xC0000000;
              *v7 = v237;
            }
            v16 += v27;
            v7 += v227;
            v248 = &v23[v27];
            v249 = &v232[v20];
            if ((unint64_t)v248 >= v12)
              v250 = v231;
            else
              v250 = 0;
            v232 = &v249[v250];
            v23 = &v248[v250];
            v14 += v27;
            --v233;
          }
          while (v233);
          if (v837)
          {
            v251 = v844 + 4 * v842;
            if (v251 >= v837)
              v252 = v230;
            else
              v252 = 0;
            v253 = &v843[v840 + v252];
            if (v251 >= v837)
              v254 = v229;
            else
              v254 = 0;
            v23 = (unsigned int *)(v251 + 4 * v254);
            v12 += 4 * v254 + 4 * v842;
            v843 += v840 + v252;
            v844 = (unint64_t)v23;
            v232 = v253;
          }
          else
          {
            v23 += v842;
            v232 += v840;
          }
          v16 += v839;
          v14 += v838;
          result = v836;
          v7 += v836;
          --v845;
        }
        while (v234 != 1);
      }
      else
      {
        v694 = v22;
        v695 = -(uint64_t)(v842 * v22);
        v696 = -(v840 * v694);
        v697 = -(uint64_t)v21;
        v698 = v843;
        do
        {
          v699 = v841;
          v700 = v845;
          do
          {
            v701 = *v16;
            if (*v16)
            {
              if (v701 == 255)
              {
                v702 = *v698;
                v703 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v14), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v702));
                v704 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v703, v703, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                v705 = *v14
                     - (v704.i32[0] | (((*v14 & 0x3FF) * v702 + (((*v14 & 0x3FF) * v702) >> 8) + 1) >> 8) | v704.i32[1])
                     + 0x40000000;
              }
              else
              {
                v706 = (*v698 * v701 + ((*v698 * v701) >> 8) + 1) >> 8;
                v707 = v701 ^ 0xFF;
                v708 = ((v706 * (*v14 & 0x3FF) + ((v706 * (*v14 & 0x3FF)) >> 8) + 1) >> 8)
                     + (((*v14 & 0x3FF) * v707 + (((*v14 & 0x3FF) * v707) >> 8) + 1) >> 8);
                if (v708 >= 0x3FF)
                  v708 = 1023;
                v709 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v14), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003);
                v710 = (uint32x2_t)vmul_s32(vdup_n_s32(v706), v709);
                v711 = (uint32x2_t)vmul_s32(v709, vdup_n_s32(v707));
                v712 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v710, v710, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v711, v711, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                v705 = vorr_s8((int8x8_t)v712, (int8x8_t)vdup_lane_s32(v712, 1)).u32[0] | v708 | 0xC0000000;
              }
              *v14 = v705;
            }
            v16 += v27;
            v713 = &v23[v27];
            v714 = &v698[v20];
            if ((unint64_t)v713 >= v12)
              v715 = v697;
            else
              v715 = 0;
            v698 = &v714[v715];
            v23 = &v713[v715];
            v14 += v27;
            --v699;
          }
          while (v699);
          result = v837;
          if (v837)
          {
            v716 = v844 + 4 * v842;
            if (v716 >= v837)
              v717 = v696;
            else
              v717 = 0;
            v718 = &v843[v840 + v717];
            if (v716 >= v837)
              v719 = v695;
            else
              v719 = 0;
            result = v12 + 4 * v719;
            v23 = (unsigned int *)(v716 + 4 * v719);
            v12 = result + 4 * v842;
            v843 = v718;
            v844 = (unint64_t)v23;
            v698 = v718;
          }
          else
          {
            v23 += v842;
            v698 += v840;
          }
          v16 += v839;
          v14 += v838;
          --v845;
        }
        while (v700 != 1);
      }
      return result;
    case 8:
      v255 = v27;
      if (v8)
      {
        v256 = v8;
        v257 = v22;
        v258 = -(uint64_t)(v842 * v22);
        v259 = -(v840 * v257);
        v260 = -(uint64_t)v21;
        v261 = v843;
        do
        {
          v262 = v9;
          v263 = v845;
          do
          {
            v264 = *v16;
            if (*v16)
            {
              if (v264 == 255)
              {
                v265 = *v261 ^ 0xFF;
                v266 = v265 * *v7 + ((v265 * *v7) >> 8) + 1;
                v267 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v14), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v265));
                v268 = (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v267, v267, 8uLL), (int32x2_t)0x100000001);
                v269 = (*v14 & 0x3FF) * v265;
              }
              else
              {
                v270 = ((*v261 * v264 + ((*v261 * v264) >> 8) + 1) >> 8) ^ 0xFF;
                v266 = v270 * *v7 + ((v270 * *v7) >> 8) + 1;
                v271 = (uint32x2_t)vmul_s32(vdup_n_s32(v270), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v14), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003));
                v268 = (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v271, v271, 8uLL), (int32x2_t)0x100000001);
                v269 = v270 * (*v14 & 0x3FF);
              }
              v272 = vand_s8((int8x8_t)vshl_u32(v268, (uint32x2_t)0x20000000CLL), (int8x8_t)0xFFC003FF00000);
              *v14 = v272.i32[0] | ((v269 + (v269 >> 8) + 1) >> 8) | v272.i32[1] | 0xC0000000;
              *v7 = BYTE1(v266);
            }
            v16 += v255;
            v7 += v256;
            v273 = &v23[v255];
            v274 = &v261[v20];
            if ((unint64_t)v273 >= v12)
              result = v260;
            else
              result = 0;
            v261 = &v274[result];
            v23 = &v273[result];
            v14 += v255;
            --v262;
          }
          while (v262);
          if (v837)
          {
            result = v842;
            v275 = v844 + 4 * v842;
            if (v275 >= v837)
              v276 = v259;
            else
              v276 = 0;
            v277 = &v843[v840 + v276];
            if (v275 >= v837)
              v278 = v258;
            else
              v278 = 0;
            v23 = (unsigned int *)(v275 + 4 * v278);
            v12 += 4 * v278 + 4 * v842;
            v843 += v840 + v276;
            v844 = (unint64_t)v23;
            v261 = v277;
          }
          else
          {
            v23 += v842;
            v261 += v840;
          }
          v16 += v839;
          v14 += v838;
          v7 += v836;
          --v845;
        }
        while (v263 != 1);
      }
      else
      {
        v720 = -(uint64_t)v21;
        v721 = v22;
        v722 = v843;
        v723 = -(uint64_t)(v842 * v22);
        v724 = -(v840 * v721);
        do
        {
          v725 = v841;
          v726 = v845;
          do
          {
            v727 = *v16;
            if (*v16)
            {
              if (v727 == 255)
              {
                v728 = *v722 ^ 0xFF;
                v729 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v14), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v728));
              }
              else
              {
                v728 = ((*v722 * v727 + ((*v722 * v727) >> 8) + 1) >> 8) ^ 0xFF;
                v729 = (uint32x2_t)vmul_s32(vdup_n_s32(v728), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v14), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003));
              }
              v730 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v729, v729, 8uLL), (int32x2_t)0x100000001), (uint32x2_t)0xC00000002), (int8x8_t)0x3FF00000000FFC00);
              *v14 = *v14
                   - (v730.i32[1] | (((*v14 & 0x3FF) * v728 + (((*v14 & 0x3FF) * v728) >> 8) + 1) >> 8) | v730.i32[0])
                   + 0x40000000;
            }
            v16 += v255;
            v731 = &v23[v255];
            v732 = &v722[v20];
            if ((unint64_t)v731 >= v12)
              result = v720;
            else
              result = 0;
            v722 = &v732[result];
            v23 = &v731[result];
            v14 += v255;
            --v725;
          }
          while (v725);
          if (v837)
          {
            result = v842;
            v733 = v844 + 4 * v842;
            if (v733 >= v837)
              v734 = v724;
            else
              v734 = 0;
            v735 = &v843[v840 + v734];
            if (v733 >= v837)
              v736 = v723;
            else
              v736 = 0;
            v23 = (unsigned int *)(v733 + 4 * v736);
            v12 += 4 * v736 + 4 * v842;
            v843 += v840 + v734;
            v844 = (unint64_t)v23;
            v722 = v735;
          }
          else
          {
            v23 += v842;
            v722 += v840;
          }
          v16 += v839;
          v14 += v838;
          --v845;
        }
        while (v726 != 1);
      }
      return result;
    case 9:
      v279 = v8;
      v280 = v20;
      v281 = v22;
      v282 = -(uint64_t)v21;
      v283 = v843;
      v284 = -(uint64_t)(v842 * v22);
      do
      {
        v285 = v841;
        v286 = v845;
        do
        {
          v287 = *v16;
          if (*v16)
          {
            v288 = *v7;
            v289 = *v283 * v287 + ((*v283 * v287) >> 8) + 1;
            v290 = ((*v23 & 0x3FF) * v287 + (((*v23 & 0x3FF) * v287) >> 8) + 1) >> 8;
            v291 = (((((*v23 >> 20) & 0x3FF) * v287 + ((((*v23 >> 20) & 0x3FF) * v287) >> 8)) << 12) + 4096) & 0x3FF00000 | v290;
            v292 = (4 * (((*v23 >> 10) & 0x3FF) * v287 + ((((*v23 >> 10) & 0x3FF) * v287) >> 8)) + 4) | v290;
            LOBYTE(v293) = ~(_BYTE)v287 + BYTE1(v289);
            v294 = (v289 >> 8) * (v288 ^ 0xFF) + (((v289 >> 8) * (v288 ^ 0xFF)) >> 8) + 1;
            v295 = (v291 >> 20) * (v288 ^ 0xFF) + (((v291 >> 20) * (v288 ^ 0xFF)) >> 8) + 1;
            v296 = ((v292 >> 10) * (v288 ^ 0xFF) + (((v292 >> 10) * (v288 ^ 0xFF)) >> 8) + 1) >> 8;
            v297 = v290 * (v288 ^ 0xFF) + ((v290 * (v288 ^ 0xFF)) >> 8) + 1;
            v293 = v293;
            v298 = (v293 * v288 + ((v293 * v288) >> 8) + 1) >> 8;
            v299 = (((*v14 >> 20) & 0x3FF) * v293 + ((((*v14 >> 20) & 0x3FF) * v293) >> 8) + 1) >> 8;
            v300 = ((*v14 >> 10) & 0x3FF) * v293 + ((((*v14 >> 10) & 0x3FF) * v293) >> 8) + 1;
            v301 = ((*v14 & 0x3FF) * v293 + (((*v14 & 0x3FF) * v293) >> 8) + 1) >> 8;
            v302 = v298 + (v294 >> 8);
            if (v302 >= 0xFF)
              LOBYTE(v302) = -1;
            v303 = v299 + (v295 >> 8);
            if (v303 >= 0x3FF)
              v303 = 1023;
            v304 = v296 + (v300 >> 8);
            if (v304 >= 0x3FF)
              v304 = 1023;
            v305 = v301 + (v297 >> 8);
            if (v305 >= 0x3FF)
              v305 = 1023;
            *v14 = (v304 << 10) | (v303 << 20) | v305 | 0xC0000000;
            *v7 = v302;
          }
          v16 += v27;
          v7 += v279;
          v306 = &v23[v27];
          v307 = &v283[v280];
          if ((unint64_t)v306 >= v12)
            v308 = v282;
          else
            v308 = 0;
          v283 = &v307[v308];
          v23 = &v306[v308];
          v14 += v27;
          --v285;
        }
        while (v285);
        if (v837)
        {
          v309 = v844 + 4 * v842;
          if (v309 >= v837)
            v310 = -(v840 * v281);
          else
            v310 = 0;
          v311 = &v843[v840 + v310];
          if (v309 >= v837)
            v312 = v284;
          else
            v312 = 0;
          v23 = (unsigned int *)(v309 + 4 * v312);
          v12 += 4 * v312 + 4 * v842;
          v843 += v840 + v310;
          v844 = (unint64_t)v23;
          v283 = v311;
        }
        else
        {
          v23 += v842;
          v283 += v840;
        }
        v16 += v839;
        v14 += v838;
        result = v836;
        v7 += v836;
        --v845;
      }
      while (v286 != 1);
      return result;
    case 10:
      v313 = v8;
      v314 = v20;
      v315 = v22;
      v316 = -(uint64_t)(v842 * v22);
      v317 = -(v840 * v315);
      __asm { FMOV            V1.2S, #1.875 }
      v319 = -(uint64_t)v21;
      v320 = v843;
      do
      {
        v321 = v841;
        v322 = v845;
        do
        {
          v323 = *v16;
          if (*v16)
          {
            v324 = *v7;
            v325 = (*v320 * v323 + ((*v320 * v323) >> 8) + 1) >> 8;
            v326 = ((*v23 >> 20) & 0x3FF) * v323;
            v327 = v326 >> 8;
            v328 = v326 + 1;
            v329 = ((*v23 >> 10) & 0x3FF) * v323;
            v330 = ((*v23 & 0x3FF) * v323 + (((*v23 & 0x3FF) * v323) >> 8) + 1) >> 8;
            v331 = v324 ^ 0xFF;
            v332 = v325 * v331 + ((v325 * v331) >> 8) + 1;
            v333 = v325 ^ 0xFF;
            v334 = ((v333 * v324 + ((v333 * v324) >> 8) + 1) >> 8) + (v332 >> 8);
            if (v334 >= 0xFF)
              LOBYTE(v334) = -1;
            v335 = ((v333 * (*v14 & 0x3FF) + ((v333 * (*v14 & 0x3FF)) >> 8) + 1) >> 8)
                 + ((v330 * v331 + ((v330 * v331) >> 8) + 1) >> 8);
            if (v335 >= 0x3FF)
              v335 = 1023;
            v336.i32[0] = 1;
            v336.i32[1] = v327;
            v337 = vadd_s32((int32x2_t)__PAIR64__(v328, v329), v336);
            v336.i32[0] = vshl_n_s32(vadd_s32(v337, (int32x2_t)((v329 >> 8) | 0xC00000000)), 2uLL).u32[0];
            v336.i32[1] = vand_s8((int8x8_t)vshl_n_s32(v337, 0xCuLL), _D1).i32[1];
            v338 = (uint32x2_t)vmul_s32((int32x2_t)vshl_u32((uint32x2_t)vorr_s8((int8x8_t)vdup_n_s32(v330), (int8x8_t)v336), (uint32x2_t)0xFFFFFFECFFFFFFF6), vdup_n_s32(v331));
            v339 = (uint32x2_t)vmul_s32(vdup_n_s32(v333), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v14), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003));
            v340 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v338, v338, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v339, v339, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
            *v14 = vorr_s8((int8x8_t)v340, (int8x8_t)vdup_lane_s32(v340, 1)).u32[0] | v335 | 0xC0000000;
            *v7 = v334;
          }
          v16 += v27;
          v7 += v313;
          v341 = &v23[v27];
          v342 = &v320[v314];
          if ((unint64_t)v341 >= v12)
            v343 = v319;
          else
            v343 = 0;
          v320 = &v342[v343];
          v23 = &v341[v343];
          v14 += v27;
          --v321;
        }
        while (v321);
        if (v837)
        {
          v344 = v844 + 4 * v842;
          if (v344 >= v837)
            v345 = v317;
          else
            v345 = 0;
          v346 = &v843[v840 + v345];
          if (v344 >= v837)
            v347 = v316;
          else
            v347 = 0;
          v23 = (unsigned int *)(v344 + 4 * v347);
          v12 += 4 * v347 + 4 * v842;
          v843 += v840 + v345;
          v844 = (unint64_t)v23;
          v320 = v346;
        }
        else
        {
          v23 += v842;
          v320 += v840;
        }
        v16 += v839;
        v14 += v838;
        result = v836;
        v7 += v836;
        --v845;
      }
      while (v322 != 1);
      return result;
    case 11:
      v348 = v27;
      if (v8)
      {
        v349 = v8;
        v350 = v20;
        v351 = v22;
        v352 = v843;
        v353 = -(uint64_t)(v842 * v22);
        v354 = -(v840 * v351);
        v355 = -(uint64_t)v21;
        do
        {
          v356 = v841;
          v357 = v845;
          do
          {
            v358 = *v16;
            if (*v16)
            {
              if (v20)
                v359 = *v352;
              else
                v359 = 255;
              v360 = v359 * v358 + ((v359 * v358) >> 8) + 1;
              v361 = (((*v23 >> 20) & 0x3FF) * v358 + ((((*v23 >> 20) & 0x3FF) * v358) >> 8)) << 12;
              v362 = 4 * (((*v23 >> 10) & 0x3FF) * v358 + ((((*v23 >> 10) & 0x3FF) * v358) >> 8));
              v363 = (*v23 & 0x3FF) * v358 + (((*v23 & 0x3FF) * v358) >> 8) + 1;
              v364 = (v361 + 4096) & 0x3FF00000 | (v363 >> 8);
              v365 = *v7 + (v360 >> 8);
              if (v365 >= 0xFF)
                LOBYTE(v365) = -1;
              v366 = ((*v14 >> 20) & 0x3FF) + (v364 >> 20);
              if (v366 >= 0x3FF)
                v366 = 1023;
              v367 = ((*v14 >> 10) & 0x3FF) + (((v362 + 4) | (v363 >> 8)) >> 10);
              if (v367 >= 0x3FF)
                v367 = 1023;
              v368 = (*v14 & 0x3FF) + (v363 >> 8);
              if (v368 >= 0x3FF)
                v368 = 1023;
              *v14 = (v367 << 10) | (v366 << 20) | v368 | 0xC0000000;
              *v7 = v365;
              v20 = v862;
            }
            v16 += v27;
            v7 += v349;
            v369 = &v23[v27];
            v370 = &v352[v350];
            if ((unint64_t)v369 >= v12)
              v371 = v355;
            else
              v371 = 0;
            v352 = &v370[v371];
            v23 = &v369[v371];
            v14 += v27;
            --v356;
          }
          while (v356);
          if (v837)
          {
            v372 = v844 + 4 * v842;
            if (v372 >= v837)
              v373 = v354;
            else
              v373 = 0;
            v374 = &v843[v840 + v373];
            if (v372 >= v837)
              v375 = v353;
            else
              v375 = 0;
            v23 = (unsigned int *)(v372 + 4 * v375);
            v12 += 4 * v375 + 4 * v842;
            v843 += v840 + v373;
            v844 = (unint64_t)v23;
            v352 = v374;
          }
          else
          {
            v23 += v842;
            v352 += v840;
          }
          v16 += v839;
          v14 += v838;
          result = v836;
          v7 += v836;
          --v845;
        }
        while (v357 != 1);
      }
      else
      {
        v737 = -(uint64_t)v21;
        v738 = -(uint64_t)(v842 * v22);
        do
        {
          v739 = v841;
          v740 = v845;
          do
          {
            v741 = *v16;
            if (*v16)
            {
              v742 = (((*v23 >> 20) & 0x3FF) * v741 + ((((*v23 >> 20) & 0x3FF) * v741) >> 8)) << 12;
              v743 = 4 * (((*v23 >> 10) & 0x3FF) * v741 + ((((*v23 >> 10) & 0x3FF) * v741) >> 8));
              v744 = (*v23 & 0x3FF) * v741 + (((*v23 & 0x3FF) * v741) >> 8) + 1;
              v745 = ((*v14 >> 20) & 0x3FF) + (((v742 + 4096) & 0x3FF00000 | (v744 >> 8)) >> 20);
              if (v745 >= 0x3FF)
                v745 = 1023;
              v746 = ((*v14 >> 10) & 0x3FF) + (((v743 + 4) | (v744 >> 8)) >> 10);
              if (v746 >= 0x3FF)
                v746 = 1023;
              v747 = (*v14 & 0x3FF) + (v744 >> 8);
              if (v747 >= 0x3FF)
                v747 = 1023;
              *v14 = (v746 << 10) | (v745 << 20) | v747 | 0xC0000000;
            }
            v16 += v348;
            v748 = &v23[v348];
            if ((unint64_t)v748 >= v12)
              v749 = v737;
            else
              v749 = 0;
            v23 = &v748[v749];
            v14 += v348;
            --v739;
          }
          while (v739);
          v16 += v839;
          v14 += v838;
          result = v844;
          v750 = v844 + 4 * v842;
          if (v750 >= v837)
            v751 = v738;
          else
            v751 = 0;
          v752 = (unsigned int *)(v750 + 4 * v751);
          v753 = v12 + 4 * v751 + 4 * v842;
          if (v837)
          {
            v12 = v753;
            result = (unint64_t)v752;
            v23 = v752;
          }
          else
          {
            v23 += v842;
          }
          v844 = result;
          --v845;
        }
        while (v740 != 1);
      }
      return result;
    case 12:
      v376 = v27;
      if (v8)
      {
        v377 = v8;
        v378 = v20;
        v379 = v22;
        v380 = v843;
        v381 = -(uint64_t)(v842 * v22);
        v382 = -(v840 * v379);
        v383 = -(uint64_t)v21;
        do
        {
          v384 = v841;
          v385 = v845;
          do
          {
            v386 = *v16;
            if (*v16)
            {
              if (v20)
                v387 = *v380;
              else
                v387 = 255;
              v388 = v387 * v386 + ((v387 * v386) >> 8) + 1;
              v389 = (((*v23 >> 20) & 0x3FF) * v386 + ((((*v23 >> 20) & 0x3FF) * v386) >> 8)) << 12;
              v390 = 4 * (((*v23 >> 10) & 0x3FF) * v386 + ((((*v23 >> 10) & 0x3FF) * v386) >> 8));
              v391 = (*v23 & 0x3FF) * v386 + (((*v23 & 0x3FF) * v386) >> 8) + 1;
              v392 = (v389 + 4096) & 0x3FF00000 | (v391 >> 8);
              v393 = *v7 + (v388 >> 8);
              if (v393 >= 0xFF)
                LOBYTE(v393) = -1;
              v394 = ((*v14 >> 20) & 0x3FF) + (v392 >> 20);
              if (v394 >= 0x3FF)
                v394 = 1023;
              v395 = ((*v14 >> 10) & 0x3FF) + (((v390 + 4) | (v391 >> 8)) >> 10);
              if (v395 >= 0x3FF)
                v395 = 1023;
              v396 = (*v14 & 0x3FF) + (v391 >> 8);
              if (v396 >= 0x3FF)
                v396 = 1023;
              *v14 = (v395 << 10) | (v394 << 20) | v396 | 0xC0000000;
              *v7 = v393;
              v20 = v862;
            }
            v16 += v27;
            v7 += v377;
            v397 = &v23[v27];
            v398 = &v380[v378];
            if ((unint64_t)v397 >= v12)
              v399 = v383;
            else
              v399 = 0;
            v380 = &v398[v399];
            v23 = &v397[v399];
            v14 += v27;
            --v384;
          }
          while (v384);
          if (v837)
          {
            v400 = v844 + 4 * v842;
            if (v400 >= v837)
              v401 = v382;
            else
              v401 = 0;
            v402 = &v843[v840 + v401];
            if (v400 >= v837)
              v403 = v381;
            else
              v403 = 0;
            v23 = (unsigned int *)(v400 + 4 * v403);
            v12 += 4 * v403 + 4 * v842;
            v843 += v840 + v401;
            v844 = (unint64_t)v23;
            v380 = v402;
          }
          else
          {
            v23 += v842;
            v380 += v840;
          }
          v16 += v839;
          v14 += v838;
          result = v836;
          v7 += v836;
          --v845;
        }
        while (v385 != 1);
      }
      else
      {
        v754 = -(uint64_t)(v842 * v22);
        v755 = -(uint64_t)v21;
        do
        {
          v756 = v841;
          v757 = v845;
          do
          {
            v758 = *v16;
            if (*v16)
            {
              v759 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v23), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v758));
              v760 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v759, v759, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
              v761 = *v23
                   - (v760.i32[0] | (((*v23 & 0x3FF) * v758 + (((*v23 & 0x3FF) * v758) >> 8) + 1) >> 8) | v760.i32[1])
                   + 0x40000000;
              v762 = (int32x2_t)vshl_u32(vmin_u32((uint32x2_t)vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v761), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v14), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003)), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
              v763 = (int8x8_t)vdup_lane_s32(v762, 1);
              if ((v761 & 0x3FF) + (*v14 & 0x3FF) >= 0x3FF)
                v764 = 1023;
              else
                v764 = (v761 & 0x3FF) + (*v14 & 0x3FF);
              *v14 = vorr_s8((int8x8_t)v762, v763).u32[0] | v764 | 0xC0000000;
            }
            v16 += v376;
            v765 = &v23[v376];
            if ((unint64_t)v765 >= v12)
              v766 = v755;
            else
              v766 = 0;
            v23 = &v765[v766];
            v14 += v376;
            --v756;
          }
          while (v756);
          v16 += v839;
          result = v837;
          v14 += v838;
          v767 = v844;
          v768 = v844 + 4 * v842;
          if (v768 >= v837)
            v769 = v754;
          else
            v769 = 0;
          v770 = (unsigned int *)(v768 + 4 * v769);
          v771 = v12 + 4 * v769 + 4 * v842;
          if (v837)
          {
            v12 = v771;
            v767 = (unint64_t)v770;
            v23 = v770;
          }
          else
          {
            v23 += v842;
          }
          v844 = v767;
          --v845;
        }
        while (v757 != 1);
      }
      return result;
    case 13:
      v404 = v27;
      v405 = v8;
      v406 = v20;
      v407 = v843;
      v806 = -(uint64_t)(v842 * v22);
      v821 = v8;
      v791 = -(v840 * v22);
      v408 = 4 * v27;
      v409 = -(uint64_t)v21;
      do
      {
        v410 = v841;
        v847 = v12;
        do
        {
          v411 = *v16;
          if (*v16)
          {
            v412 = v20 ? *v407 : 255;
            v413 = v412 * v411 + ((v412 * v411) >> 8) + 1;
            if (BYTE1(v413))
            {
              if (v8)
              {
                if (*v7)
                {
                  result = PDAmultiplyPDA(*v14, *v7, (((*v23 & 0x3FF) * v411 + (((*v23 & 0x3FF) * v411) >> 8) + 1) >> 8) | (4 * (((*v23 >> 10) & 0x3FF) * v411 + ((((*v23 >> 10) & 0x3FF) * v411) >> 8))+ 4) & 0xFC00, BYTE1(v413));
                  v405 = v821;
                  v8 = v846;
                  v12 = v847;
                  v20 = v862;
                }
                else
                {
                  result = (v413 >> 8) | ((unint64_t)((((((*v23 >> 20) & 0x3FF) * v411
                                                              + ((((*v23 >> 20) & 0x3FF) * v411) >> 8)) << 12)
                                                            + 4096) & 0x3FF00000 | (((*v23 & 0x3FF) * v411
                                                                                   + (((*v23 & 0x3FF) * v411) >> 8)
                                                                                   + 1) >> 8) | (4
                                                                                               * (((*v23 >> 10) & 0x3FF)
                                                                                                * v411
                                                                                                + ((((*v23 >> 10) & 0x3FF)
                                                                                                  * v411) >> 8))
                                                                                               + 4) & 0xFFC00 | 0xC0000000) << 32);
                }
                *v14 = HIDWORD(result);
                *v7 = result;
              }
              else
              {
                result = PDAmultiplyPDA(*v14, 255, (((*v23 & 0x3FF) * v411 + (((*v23 & 0x3FF) * v411) >> 8) + 1) >> 8) | (4* (((*v23 >> 10) & 0x3FF)* v411+ ((((*v23 >> 10) & 0x3FF) * v411) >> 8))+ 4) & 0xFC00, BYTE1(v413));
                v405 = v821;
                v8 = v846;
                v12 = v847;
                v20 = v862;
                *v14 = HIDWORD(result);
              }
            }
          }
          v16 += v404;
          v7 += v405;
          v414 = &v23[v404];
          if ((unint64_t)v414 >= v12)
            v415 = v409;
          else
            v415 = 0;
          v407 += v406 + v415;
          v23 = &v414[v415];
          v14 = (unsigned int *)((char *)v14 + v408);
          --v410;
        }
        while (v410);
        if (v837)
        {
          v416 = v844 + 4 * v842;
          v417 = v791;
          if (v416 < v837)
            v417 = 0;
          v407 = &v843[v840 + v417];
          v418 = v806;
          if (v416 < v837)
            v418 = 0;
          v23 = (unsigned int *)(v416 + 4 * v418);
          v12 += 4 * v418 + 4 * v842;
          v843 += v840 + v417;
          v844 = (unint64_t)v23;
        }
        else
        {
          v23 += v842;
          v407 += v840;
        }
        v16 += v839;
        v14 += v838;
        v7 += v836;
        --v845;
      }
      while (v845);
      return result;
    case 14:
      v419 = v27;
      v420 = v8;
      v421 = v20;
      v422 = v843;
      v807 = -(uint64_t)(v842 * v22);
      v822 = v8;
      v792 = -(v840 * v22);
      v423 = 4 * v27;
      v424 = -(uint64_t)v21;
      do
      {
        v425 = v841;
        v848 = v12;
        do
        {
          v426 = *v16;
          if (*v16)
          {
            v427 = v20 ? *v422 : 255;
            v428 = v427 * v426 + ((v427 * v426) >> 8) + 1;
            if (BYTE1(v428))
            {
              v429 = (((((*v23 >> 20) & 0x3FF) * v426 + ((((*v23 >> 20) & 0x3FF) * v426) >> 8)) << 12) + 4096) & 0x3FF00000 | (((*v23 & 0x3FF) * v426 + (((*v23 & 0x3FF) * v426) >> 8) + 1) >> 8) | (4 * (((*v23 >> 10) & 0x3FF) * v426 + ((((*v23 >> 10) & 0x3FF) * v426) >> 8)) + 4) & 0xFFC00 | 0xC0000000;
              if (v8)
              {
                if (*v7)
                {
                  result = PDAscreenPDA(*v14, *v7, v429, BYTE1(v428));
                  v420 = v822;
                  v8 = v846;
                  v12 = v848;
                  v20 = v862;
                }
                else
                {
                  result = (v428 >> 8) | (unint64_t)(v429 << 32);
                }
                *v14 = HIDWORD(result);
                *v7 = result;
              }
              else
              {
                result = PDAscreenPDA(*v14, 255, v429, BYTE1(v428));
                v420 = v822;
                v8 = v846;
                v12 = v848;
                v20 = v862;
                *v14 = HIDWORD(result);
              }
            }
          }
          v16 += v419;
          v7 += v420;
          v430 = &v23[v419];
          if ((unint64_t)v430 >= v12)
            v431 = v424;
          else
            v431 = 0;
          v422 += v421 + v431;
          v23 = &v430[v431];
          v14 = (unsigned int *)((char *)v14 + v423);
          --v425;
        }
        while (v425);
        if (v837)
        {
          v432 = v844 + 4 * v842;
          v433 = v792;
          if (v432 < v837)
            v433 = 0;
          v422 = &v843[v840 + v433];
          v434 = v807;
          if (v432 < v837)
            v434 = 0;
          v23 = (unsigned int *)(v432 + 4 * v434);
          v12 += 4 * v434 + 4 * v842;
          v843 += v840 + v433;
          v844 = (unint64_t)v23;
        }
        else
        {
          v23 += v842;
          v422 += v840;
        }
        v16 += v839;
        v14 += v838;
        v7 += v836;
        --v845;
      }
      while (v845);
      return result;
    case 15:
      v435 = v27;
      v436 = v8;
      v437 = v20;
      v438 = v843;
      v808 = -(uint64_t)(v842 * v22);
      v823 = v8;
      v793 = -(v840 * v22);
      v439 = 4 * v27;
      v440 = -(uint64_t)v21;
      do
      {
        v441 = v841;
        v849 = v12;
        do
        {
          v442 = *v16;
          if (*v16)
          {
            v443 = v20 ? *v438 : 255;
            v444 = v443 * v442 + ((v443 * v442) >> 8) + 1;
            if (BYTE1(v444))
            {
              v445 = (((((*v23 >> 20) & 0x3FF) * v442 + ((((*v23 >> 20) & 0x3FF) * v442) >> 8)) << 12) + 4096) & 0x3FF00000 | (((*v23 & 0x3FF) * v442 + (((*v23 & 0x3FF) * v442) >> 8) + 1) >> 8) | (4 * (((*v23 >> 10) & 0x3FF) * v442 + ((((*v23 >> 10) & 0x3FF) * v442) >> 8)) + 4) & 0xFFC00 | 0xC0000000;
              if (v8)
              {
                if (*v7)
                {
                  result = PDAoverlayPDA(*v14, *v7, v445, BYTE1(v444));
                  v436 = v823;
                  v8 = v846;
                  v12 = v849;
                  v20 = v862;
                }
                else
                {
                  result = (v444 >> 8) | (unint64_t)(v445 << 32);
                }
                *v14 = HIDWORD(result);
                *v7 = result;
              }
              else
              {
                result = PDAoverlayPDA(*v14, 255, v445, BYTE1(v444));
                v436 = v823;
                v8 = v846;
                v12 = v849;
                v20 = v862;
                *v14 = HIDWORD(result);
              }
            }
          }
          v16 += v435;
          v7 += v436;
          v446 = &v23[v435];
          if ((unint64_t)v446 >= v12)
            v447 = v440;
          else
            v447 = 0;
          v438 += v437 + v447;
          v23 = &v446[v447];
          v14 = (unsigned int *)((char *)v14 + v439);
          --v441;
        }
        while (v441);
        if (v837)
        {
          v448 = v844 + 4 * v842;
          v449 = v793;
          if (v448 < v837)
            v449 = 0;
          v438 = &v843[v840 + v449];
          v450 = v808;
          if (v448 < v837)
            v450 = 0;
          v23 = (unsigned int *)(v448 + 4 * v450);
          v12 += 4 * v450 + 4 * v842;
          v843 += v840 + v449;
          v844 = (unint64_t)v23;
        }
        else
        {
          v23 += v842;
          v438 += v840;
        }
        v16 += v839;
        v14 += v838;
        v7 += v836;
        --v845;
      }
      while (v845);
      return result;
    case 16:
      v451 = v27;
      v452 = v8;
      v453 = v20;
      v454 = v843;
      v809 = -(uint64_t)(v842 * v22);
      v824 = v8;
      v794 = -(v840 * v22);
      v455 = 4 * v27;
      v456 = -(uint64_t)v21;
      do
      {
        v457 = v841;
        v850 = v12;
        do
        {
          v458 = *v16;
          if (*v16)
          {
            v459 = v20 ? *v454 : 255;
            v460 = v459 * v458 + ((v459 * v458) >> 8) + 1;
            if (BYTE1(v460))
            {
              if (v8)
              {
                if (*v7)
                {
                  result = PDAdarkenPDA(*v14, *v7, (((*v23 & 0x3FF) * v458 + (((*v23 & 0x3FF) * v458) >> 8) + 1) >> 8) | (4 * (((*v23 >> 10) & 0x3FF) * v458 + ((((*v23 >> 10) & 0x3FF) * v458) >> 8))+ 4) & 0xFC00, BYTE1(v460));
                  v452 = v824;
                  v8 = v846;
                  v12 = v850;
                  v20 = v862;
                }
                else
                {
                  result = (v460 >> 8) | ((unint64_t)((((((*v23 >> 20) & 0x3FF) * v458
                                                              + ((((*v23 >> 20) & 0x3FF) * v458) >> 8)) << 12)
                                                            + 4096) & 0x3FF00000 | (((*v23 & 0x3FF) * v458
                                                                                   + (((*v23 & 0x3FF) * v458) >> 8)
                                                                                   + 1) >> 8) | (4
                                                                                               * (((*v23 >> 10) & 0x3FF)
                                                                                                * v458
                                                                                                + ((((*v23 >> 10) & 0x3FF)
                                                                                                  * v458) >> 8))
                                                                                               + 4) & 0xFFC00 | 0xC0000000) << 32);
                }
                *v14 = HIDWORD(result);
                *v7 = result;
              }
              else
              {
                result = PDAdarkenPDA(*v14, 0xFFu, (((*v23 & 0x3FF) * v458 + (((*v23 & 0x3FF) * v458) >> 8) + 1) >> 8) | (4* (((*v23 >> 10) & 0x3FF)* v458+ ((((*v23 >> 10) & 0x3FF) * v458) >> 8))+ 4) & 0xFC00, BYTE1(v460));
                v452 = v824;
                v8 = v846;
                v12 = v850;
                v20 = v862;
                *v14 = HIDWORD(result);
              }
            }
          }
          v16 += v451;
          v7 += v452;
          v461 = &v23[v451];
          if ((unint64_t)v461 >= v12)
            v462 = v456;
          else
            v462 = 0;
          v454 += v453 + v462;
          v23 = &v461[v462];
          v14 = (unsigned int *)((char *)v14 + v455);
          --v457;
        }
        while (v457);
        if (v837)
        {
          v463 = v844 + 4 * v842;
          v464 = v794;
          if (v463 < v837)
            v464 = 0;
          v454 = &v843[v840 + v464];
          v465 = v809;
          if (v463 < v837)
            v465 = 0;
          v23 = (unsigned int *)(v463 + 4 * v465);
          v12 += 4 * v465 + 4 * v842;
          v843 += v840 + v464;
          v844 = (unint64_t)v23;
        }
        else
        {
          v23 += v842;
          v454 += v840;
        }
        v16 += v839;
        v14 += v838;
        v7 += v836;
        --v845;
      }
      while (v845);
      return result;
    case 17:
      v466 = v27;
      v467 = v8;
      v468 = v20;
      v469 = v843;
      v810 = -(uint64_t)(v842 * v22);
      v825 = v8;
      v795 = -(v840 * v22);
      v470 = 4 * v27;
      v471 = -(uint64_t)v21;
      do
      {
        v472 = v841;
        v851 = v12;
        do
        {
          v473 = *v16;
          if (*v16)
          {
            v474 = v20 ? *v469 : 255;
            v475 = v474 * v473 + ((v474 * v473) >> 8) + 1;
            if (BYTE1(v475))
            {
              if (v8)
              {
                if (*v7)
                {
                  result = PDAlightenPDA(*v14, *v7, (((*v23 & 0x3FF) * v473 + (((*v23 & 0x3FF) * v473) >> 8) + 1) >> 8) | (4 * (((*v23 >> 10) & 0x3FF) * v473 + ((((*v23 >> 10) & 0x3FF) * v473) >> 8))+ 4) & 0xFC00, BYTE1(v475));
                  v467 = v825;
                  v8 = v846;
                  v12 = v851;
                  v20 = v862;
                }
                else
                {
                  result = (v475 >> 8) | ((unint64_t)((((((*v23 >> 20) & 0x3FF) * v473
                                                              + ((((*v23 >> 20) & 0x3FF) * v473) >> 8)) << 12)
                                                            + 4096) & 0x3FF00000 | (((*v23 & 0x3FF) * v473
                                                                                   + (((*v23 & 0x3FF) * v473) >> 8)
                                                                                   + 1) >> 8) | (4
                                                                                               * (((*v23 >> 10) & 0x3FF)
                                                                                                * v473
                                                                                                + ((((*v23 >> 10) & 0x3FF)
                                                                                                  * v473) >> 8))
                                                                                               + 4) & 0xFFC00 | 0xC0000000) << 32);
                }
                *v14 = HIDWORD(result);
                *v7 = result;
              }
              else
              {
                result = PDAlightenPDA(*v14, 0xFFu, (((*v23 & 0x3FF) * v473 + (((*v23 & 0x3FF) * v473) >> 8) + 1) >> 8) | (4* (((*v23 >> 10) & 0x3FF)* v473+ ((((*v23 >> 10) & 0x3FF) * v473) >> 8))+ 4) & 0xFC00, BYTE1(v475));
                v467 = v825;
                v8 = v846;
                v12 = v851;
                v20 = v862;
                *v14 = HIDWORD(result);
              }
            }
          }
          v16 += v466;
          v7 += v467;
          v476 = &v23[v466];
          if ((unint64_t)v476 >= v12)
            v477 = v471;
          else
            v477 = 0;
          v469 += v468 + v477;
          v23 = &v476[v477];
          v14 = (unsigned int *)((char *)v14 + v470);
          --v472;
        }
        while (v472);
        if (v837)
        {
          v478 = v844 + 4 * v842;
          v479 = v795;
          if (v478 < v837)
            v479 = 0;
          v469 = &v843[v840 + v479];
          v480 = v810;
          if (v478 < v837)
            v480 = 0;
          v23 = (unsigned int *)(v478 + 4 * v480);
          v12 += 4 * v480 + 4 * v842;
          v843 += v840 + v479;
          v844 = (unint64_t)v23;
        }
        else
        {
          v23 += v842;
          v469 += v840;
        }
        v16 += v839;
        v14 += v838;
        v7 += v836;
        --v845;
      }
      while (v845);
      return result;
    case 18:
      v481 = v27;
      v482 = v8;
      v483 = v20;
      v484 = v843;
      v811 = -(uint64_t)(v842 * v22);
      v826 = v8;
      v796 = -(v840 * v22);
      v485 = 4 * v27;
      v486 = -(uint64_t)v21;
      do
      {
        v487 = v841;
        v852 = v12;
        do
        {
          v488 = *v16;
          if (*v16)
          {
            v489 = v20 ? *v484 : 255;
            v490 = v489 * v488 + ((v489 * v488) >> 8) + 1;
            if (BYTE1(v490))
            {
              v491 = (((((*v23 >> 20) & 0x3FF) * v488 + ((((*v23 >> 20) & 0x3FF) * v488) >> 8)) << 12) + 4096) & 0x3FF00000 | (((*v23 & 0x3FF) * v488 + (((*v23 & 0x3FF) * v488) >> 8) + 1) >> 8) | (4 * (((*v23 >> 10) & 0x3FF) * v488 + ((((*v23 >> 10) & 0x3FF) * v488) >> 8)) + 4) & 0xFFC00 | 0xC0000000;
              if (v8)
              {
                if (*v7)
                {
                  result = PDAcolordodgePDA(*v14, *v7, v491, BYTE1(v490));
                  v482 = v826;
                  v8 = v846;
                  v12 = v852;
                  v20 = v862;
                }
                else
                {
                  result = (v490 >> 8) | (unint64_t)(v491 << 32);
                }
                *v14 = HIDWORD(result);
                *v7 = result;
              }
              else
              {
                result = PDAcolordodgePDA(*v14, 255, v491, BYTE1(v490));
                v482 = v826;
                v8 = v846;
                v12 = v852;
                v20 = v862;
                *v14 = HIDWORD(result);
              }
            }
          }
          v16 += v481;
          v7 += v482;
          v492 = &v23[v481];
          if ((unint64_t)v492 >= v12)
            v493 = v486;
          else
            v493 = 0;
          v484 += v483 + v493;
          v23 = &v492[v493];
          v14 = (unsigned int *)((char *)v14 + v485);
          --v487;
        }
        while (v487);
        if (v837)
        {
          v494 = v844 + 4 * v842;
          v495 = v796;
          if (v494 < v837)
            v495 = 0;
          v484 = &v843[v840 + v495];
          v496 = v811;
          if (v494 < v837)
            v496 = 0;
          v23 = (unsigned int *)(v494 + 4 * v496);
          v12 += 4 * v496 + 4 * v842;
          v843 += v840 + v495;
          v844 = (unint64_t)v23;
        }
        else
        {
          v23 += v842;
          v484 += v840;
        }
        v16 += v839;
        v14 += v838;
        v7 += v836;
        --v845;
      }
      while (v845);
      return result;
    case 19:
      v497 = v27;
      v498 = v8;
      v499 = v20;
      v500 = v843;
      v812 = -(uint64_t)(v842 * v22);
      v827 = v8;
      v797 = -(v840 * v22);
      v501 = 4 * v27;
      v502 = -(uint64_t)v21;
      do
      {
        v503 = v841;
        v853 = v12;
        do
        {
          v504 = *v16;
          if (*v16)
          {
            v505 = v20 ? *v500 : 255;
            v506 = v505 * v504 + ((v505 * v504) >> 8) + 1;
            if (BYTE1(v506))
            {
              v507 = (((((*v23 >> 20) & 0x3FF) * v504 + ((((*v23 >> 20) & 0x3FF) * v504) >> 8)) << 12) + 4096) & 0x3FF00000 | (((*v23 & 0x3FF) * v504 + (((*v23 & 0x3FF) * v504) >> 8) + 1) >> 8) | (4 * (((*v23 >> 10) & 0x3FF) * v504 + ((((*v23 >> 10) & 0x3FF) * v504) >> 8)) + 4) & 0xFFC00 | 0xC0000000;
              if (v8)
              {
                if (*v7)
                {
                  result = PDAcolorburnPDA(*v14, *v7, v507, BYTE1(v506));
                  v498 = v827;
                  v8 = v846;
                  v12 = v853;
                  v20 = v862;
                }
                else
                {
                  result = (v506 >> 8) | (unint64_t)(v507 << 32);
                }
                *v14 = HIDWORD(result);
                *v7 = result;
              }
              else
              {
                result = PDAcolorburnPDA(*v14, 255, v507, BYTE1(v506));
                v498 = v827;
                v8 = v846;
                v12 = v853;
                v20 = v862;
                *v14 = HIDWORD(result);
              }
            }
          }
          v16 += v497;
          v7 += v498;
          v508 = &v23[v497];
          if ((unint64_t)v508 >= v12)
            v509 = v502;
          else
            v509 = 0;
          v500 += v499 + v509;
          v23 = &v508[v509];
          v14 = (unsigned int *)((char *)v14 + v501);
          --v503;
        }
        while (v503);
        if (v837)
        {
          v510 = v844 + 4 * v842;
          v511 = v797;
          if (v510 < v837)
            v511 = 0;
          v500 = &v843[v840 + v511];
          v512 = v812;
          if (v510 < v837)
            v512 = 0;
          v23 = (unsigned int *)(v510 + 4 * v512);
          v12 += 4 * v512 + 4 * v842;
          v843 += v840 + v511;
          v844 = (unint64_t)v23;
        }
        else
        {
          v23 += v842;
          v500 += v840;
        }
        v16 += v839;
        v14 += v838;
        v7 += v836;
        --v845;
      }
      while (v845);
      return result;
    case 20:
      v513 = v27;
      v514 = v8;
      v515 = v20;
      v516 = v843;
      v813 = -(uint64_t)(v842 * v22);
      v828 = v8;
      v798 = -(v840 * v22);
      v517 = 4 * v27;
      v518 = -(uint64_t)v21;
      do
      {
        v519 = v841;
        v854 = v12;
        do
        {
          v520 = *v16;
          if (*v16)
          {
            v521 = v20 ? *v516 : 255;
            v522 = v521 * v520 + ((v521 * v520) >> 8) + 1;
            if (BYTE1(v522))
            {
              v523 = (((((*v23 >> 20) & 0x3FF) * v520 + ((((*v23 >> 20) & 0x3FF) * v520) >> 8)) << 12) + 4096) & 0x3FF00000 | (((*v23 & 0x3FF) * v520 + (((*v23 & 0x3FF) * v520) >> 8) + 1) >> 8) | (4 * (((*v23 >> 10) & 0x3FF) * v520 + ((((*v23 >> 10) & 0x3FF) * v520) >> 8)) + 4) & 0xFFC00 | 0xC0000000;
              if (v8)
              {
                if (*v7)
                {
                  result = PDAsoftlightPDA(*v14, *v7, v523, BYTE1(v522));
                  v514 = v828;
                  v8 = v846;
                  v12 = v854;
                  v20 = v862;
                }
                else
                {
                  result = (v522 >> 8) | (unint64_t)(v523 << 32);
                }
                *v14 = HIDWORD(result);
                *v7 = result;
              }
              else
              {
                result = PDAsoftlightPDA(*v14, 255, v523, BYTE1(v522));
                v514 = v828;
                v8 = v846;
                v12 = v854;
                v20 = v862;
                *v14 = HIDWORD(result);
              }
            }
          }
          v16 += v513;
          v7 += v514;
          v524 = &v23[v513];
          if ((unint64_t)v524 >= v12)
            v525 = v518;
          else
            v525 = 0;
          v516 += v515 + v525;
          v23 = &v524[v525];
          v14 = (unsigned int *)((char *)v14 + v517);
          --v519;
        }
        while (v519);
        if (v837)
        {
          v526 = v844 + 4 * v842;
          v527 = v798;
          if (v526 < v837)
            v527 = 0;
          v516 = &v843[v840 + v527];
          v528 = v813;
          if (v526 < v837)
            v528 = 0;
          v23 = (unsigned int *)(v526 + 4 * v528);
          v12 += 4 * v528 + 4 * v842;
          v843 += v840 + v527;
          v844 = (unint64_t)v23;
        }
        else
        {
          v23 += v842;
          v516 += v840;
        }
        v16 += v839;
        v14 += v838;
        v7 += v836;
        --v845;
      }
      while (v845);
      return result;
    case 21:
      v529 = v27;
      v530 = v8;
      v531 = v20;
      v532 = v843;
      v814 = -(uint64_t)(v842 * v22);
      v829 = v8;
      v799 = -(v840 * v22);
      v533 = 4 * v27;
      v534 = -(uint64_t)v21;
      do
      {
        v535 = v841;
        v855 = v12;
        do
        {
          v536 = *v16;
          if (*v16)
          {
            v537 = v20 ? *v532 : 255;
            v538 = v537 * v536 + ((v537 * v536) >> 8) + 1;
            if (BYTE1(v538))
            {
              v539 = (((((*v23 >> 20) & 0x3FF) * v536 + ((((*v23 >> 20) & 0x3FF) * v536) >> 8)) << 12) + 4096) & 0x3FF00000 | (((*v23 & 0x3FF) * v536 + (((*v23 & 0x3FF) * v536) >> 8) + 1) >> 8) | (4 * (((*v23 >> 10) & 0x3FF) * v536 + ((((*v23 >> 10) & 0x3FF) * v536) >> 8)) + 4) & 0xFFC00 | 0xC0000000;
              if (v8)
              {
                if (*v7)
                {
                  result = PDAhardlightPDA(*v14, *v7, v539, BYTE1(v538));
                  v530 = v829;
                  v8 = v846;
                  v12 = v855;
                  v20 = v862;
                }
                else
                {
                  result = (v538 >> 8) | (unint64_t)(v539 << 32);
                }
                *v14 = HIDWORD(result);
                *v7 = result;
              }
              else
              {
                result = PDAhardlightPDA(*v14, 255, v539, BYTE1(v538));
                v530 = v829;
                v8 = v846;
                v12 = v855;
                v20 = v862;
                *v14 = HIDWORD(result);
              }
            }
          }
          v16 += v529;
          v7 += v530;
          v540 = &v23[v529];
          if ((unint64_t)v540 >= v12)
            v541 = v534;
          else
            v541 = 0;
          v532 += v531 + v541;
          v23 = &v540[v541];
          v14 = (unsigned int *)((char *)v14 + v533);
          --v535;
        }
        while (v535);
        if (v837)
        {
          v542 = v844 + 4 * v842;
          v543 = v799;
          if (v542 < v837)
            v543 = 0;
          v532 = &v843[v840 + v543];
          v544 = v814;
          if (v542 < v837)
            v544 = 0;
          v23 = (unsigned int *)(v542 + 4 * v544);
          v12 += 4 * v544 + 4 * v842;
          v843 += v840 + v543;
          v844 = (unint64_t)v23;
        }
        else
        {
          v23 += v842;
          v532 += v840;
        }
        v16 += v839;
        v14 += v838;
        v7 += v836;
        --v845;
      }
      while (v845);
      return result;
    case 22:
      v545 = v27;
      v546 = v8;
      v547 = v20;
      v548 = v843;
      v815 = -(uint64_t)(v842 * v22);
      v830 = v8;
      v800 = -(v840 * v22);
      v549 = 4 * v27;
      v550 = -(uint64_t)v21;
      do
      {
        v551 = v841;
        v856 = v12;
        do
        {
          v552 = *v16;
          if (*v16)
          {
            v553 = v20 ? *v548 : 255;
            v554 = v553 * v552 + ((v553 * v552) >> 8) + 1;
            if (BYTE1(v554))
            {
              v555 = (((((*v23 >> 20) & 0x3FF) * v552 + ((((*v23 >> 20) & 0x3FF) * v552) >> 8)) << 12) + 4096) & 0x3FF00000 | (((*v23 & 0x3FF) * v552 + (((*v23 & 0x3FF) * v552) >> 8) + 1) >> 8) | (4 * (((*v23 >> 10) & 0x3FF) * v552 + ((((*v23 >> 10) & 0x3FF) * v552) >> 8)) + 4) & 0xFFC00 | 0xC0000000;
              if (v8)
              {
                if (*v7)
                {
                  result = PDAdifferencePDA(*v14, *v7, v555, BYTE1(v554));
                  v546 = v830;
                  v8 = v846;
                  v12 = v856;
                  v20 = v862;
                }
                else
                {
                  result = (v554 >> 8) | (unint64_t)(v555 << 32);
                }
                *v14 = HIDWORD(result);
                *v7 = result;
              }
              else
              {
                result = PDAdifferencePDA(*v14, 0xFFu, v555, BYTE1(v554));
                v546 = v830;
                v8 = v846;
                v12 = v856;
                v20 = v862;
                *v14 = HIDWORD(result);
              }
            }
          }
          v16 += v545;
          v7 += v546;
          v556 = &v23[v545];
          if ((unint64_t)v556 >= v12)
            v557 = v550;
          else
            v557 = 0;
          v548 += v547 + v557;
          v23 = &v556[v557];
          v14 = (unsigned int *)((char *)v14 + v549);
          --v551;
        }
        while (v551);
        if (v837)
        {
          v558 = v844 + 4 * v842;
          v559 = v800;
          if (v558 < v837)
            v559 = 0;
          v548 = &v843[v840 + v559];
          v560 = v815;
          if (v558 < v837)
            v560 = 0;
          v23 = (unsigned int *)(v558 + 4 * v560);
          v12 += 4 * v560 + 4 * v842;
          v843 += v840 + v559;
          v844 = (unint64_t)v23;
        }
        else
        {
          v23 += v842;
          v548 += v840;
        }
        v16 += v839;
        v14 += v838;
        v7 += v836;
        --v845;
      }
      while (v845);
      return result;
    case 23:
      v561 = v27;
      v562 = v8;
      v563 = v20;
      v564 = v843;
      v816 = -(uint64_t)(v842 * v22);
      v831 = v8;
      v801 = -(v840 * v22);
      v565 = 4 * v27;
      v566 = -(uint64_t)v21;
      do
      {
        v567 = v841;
        v857 = v12;
        do
        {
          v568 = *v16;
          if (*v16)
          {
            v569 = v20 ? *v564 : 255;
            v570 = v569 * v568 + ((v569 * v568) >> 8) + 1;
            if (BYTE1(v570))
            {
              v571 = (((((*v23 >> 20) & 0x3FF) * v568 + ((((*v23 >> 20) & 0x3FF) * v568) >> 8)) << 12) + 4096) & 0x3FF00000 | (((*v23 & 0x3FF) * v568 + (((*v23 & 0x3FF) * v568) >> 8) + 1) >> 8) | (4 * (((*v23 >> 10) & 0x3FF) * v568 + ((((*v23 >> 10) & 0x3FF) * v568) >> 8)) + 4) & 0xFFC00 | 0xC0000000;
              if (v8)
              {
                if (*v7)
                {
                  result = PDAexclusionPDA(*v14, *v7, v571, BYTE1(v570));
                  v562 = v831;
                  v8 = v846;
                  v12 = v857;
                  v20 = v862;
                }
                else
                {
                  result = (v570 >> 8) | (unint64_t)(v571 << 32);
                }
                *v14 = HIDWORD(result);
                *v7 = result;
              }
              else
              {
                result = PDAexclusionPDA(*v14, 255, v571, BYTE1(v570));
                v562 = v831;
                v8 = v846;
                v12 = v857;
                v20 = v862;
                *v14 = HIDWORD(result);
              }
            }
          }
          v16 += v561;
          v7 += v562;
          v572 = &v23[v561];
          if ((unint64_t)v572 >= v12)
            v573 = v566;
          else
            v573 = 0;
          v564 += v563 + v573;
          v23 = &v572[v573];
          v14 = (unsigned int *)((char *)v14 + v565);
          --v567;
        }
        while (v567);
        if (v837)
        {
          v574 = v844 + 4 * v842;
          v575 = v801;
          if (v574 < v837)
            v575 = 0;
          v564 = &v843[v840 + v575];
          v576 = v816;
          if (v574 < v837)
            v576 = 0;
          v23 = (unsigned int *)(v574 + 4 * v576);
          v12 += 4 * v576 + 4 * v842;
          v843 += v840 + v575;
          v844 = (unint64_t)v23;
        }
        else
        {
          v23 += v842;
          v564 += v840;
        }
        v16 += v839;
        v14 += v838;
        v7 += v836;
        --v845;
      }
      while (v845);
      return result;
    case 24:
      v577 = v27;
      v578 = v8;
      v579 = v20;
      v580 = v843;
      v817 = -(uint64_t)(v842 * v22);
      v832 = v8;
      v802 = -(v840 * v22);
      v581 = 4 * v27;
      v582 = -(uint64_t)v21;
      do
      {
        v583 = v841;
        v858 = v12;
        do
        {
          v584 = *v16;
          if (*v16)
          {
            v585 = v20 ? *v580 : 255;
            v586 = v585 * v584 + ((v585 * v584) >> 8) + 1;
            if (BYTE1(v586))
            {
              v587 = (((((*v23 >> 20) & 0x3FF) * v584 + ((((*v23 >> 20) & 0x3FF) * v584) >> 8)) << 12) + 4096) & 0x3FF00000 | (((*v23 & 0x3FF) * v584 + (((*v23 & 0x3FF) * v584) >> 8) + 1) >> 8) | (4 * (((*v23 >> 10) & 0x3FF) * v584 + ((((*v23 >> 10) & 0x3FF) * v584) >> 8)) + 4) & 0xFFC00 | 0xC0000000;
              if (v8)
              {
                if (*v7)
                {
                  result = PDAhuePDA(*v14, *v7, v587, BYTE1(v586));
                  v578 = v832;
                  v8 = v846;
                  v12 = v858;
                  v20 = v862;
                }
                else
                {
                  result = (v586 >> 8) | (unint64_t)(v587 << 32);
                }
                *v14 = HIDWORD(result);
                *v7 = result;
              }
              else
              {
                result = PDAhuePDA(*v14, 255, v587, BYTE1(v586));
                v578 = v832;
                v8 = v846;
                v12 = v858;
                v20 = v862;
                *v14 = HIDWORD(result);
              }
            }
          }
          v16 += v577;
          v7 += v578;
          v588 = &v23[v577];
          if ((unint64_t)v588 >= v12)
            v589 = v582;
          else
            v589 = 0;
          v580 += v579 + v589;
          v23 = &v588[v589];
          v14 = (unsigned int *)((char *)v14 + v581);
          --v583;
        }
        while (v583);
        if (v837)
        {
          v590 = v844 + 4 * v842;
          v591 = v802;
          if (v590 < v837)
            v591 = 0;
          v580 = &v843[v840 + v591];
          v592 = v817;
          if (v590 < v837)
            v592 = 0;
          v23 = (unsigned int *)(v590 + 4 * v592);
          v12 += 4 * v592 + 4 * v842;
          v843 += v840 + v591;
          v844 = (unint64_t)v23;
        }
        else
        {
          v23 += v842;
          v580 += v840;
        }
        v16 += v839;
        v14 += v838;
        v7 += v836;
        --v845;
      }
      while (v845);
      return result;
    case 25:
      v593 = v27;
      v594 = v8;
      v595 = v20;
      v596 = v843;
      v818 = -(uint64_t)(v842 * v22);
      v833 = v8;
      v803 = -(v840 * v22);
      v597 = 4 * v27;
      v598 = -(uint64_t)v21;
      do
      {
        v599 = v841;
        v859 = v12;
        do
        {
          v600 = *v16;
          if (*v16)
          {
            v601 = v20 ? *v596 : 255;
            v602 = v601 * v600 + ((v601 * v600) >> 8) + 1;
            if (BYTE1(v602))
            {
              v603 = (((((*v23 >> 20) & 0x3FF) * v600 + ((((*v23 >> 20) & 0x3FF) * v600) >> 8)) << 12) + 4096) & 0x3FF00000 | (((*v23 & 0x3FF) * v600 + (((*v23 & 0x3FF) * v600) >> 8) + 1) >> 8) | (4 * (((*v23 >> 10) & 0x3FF) * v600 + ((((*v23 >> 10) & 0x3FF) * v600) >> 8)) + 4) & 0xFFC00 | 0xC0000000;
              if (v8)
              {
                if (*v7)
                {
                  result = PDAsaturationPDA(*v14, *v7, v603, BYTE1(v602));
                  v594 = v833;
                  v8 = v846;
                  v12 = v859;
                  v20 = v862;
                }
                else
                {
                  result = (v602 >> 8) | (unint64_t)(v603 << 32);
                }
                *v14 = HIDWORD(result);
                *v7 = result;
              }
              else
              {
                result = PDAsaturationPDA(*v14, 255, v603, BYTE1(v602));
                v594 = v833;
                v8 = v846;
                v12 = v859;
                v20 = v862;
                *v14 = HIDWORD(result);
              }
            }
          }
          v16 += v593;
          v7 += v594;
          v604 = &v23[v593];
          if ((unint64_t)v604 >= v12)
            v605 = v598;
          else
            v605 = 0;
          v596 += v595 + v605;
          v23 = &v604[v605];
          v14 = (unsigned int *)((char *)v14 + v597);
          --v599;
        }
        while (v599);
        if (v837)
        {
          v606 = v844 + 4 * v842;
          v607 = v803;
          if (v606 < v837)
            v607 = 0;
          v596 = &v843[v840 + v607];
          v608 = v818;
          if (v606 < v837)
            v608 = 0;
          v23 = (unsigned int *)(v606 + 4 * v608);
          v12 += 4 * v608 + 4 * v842;
          v843 += v840 + v607;
          v844 = (unint64_t)v23;
        }
        else
        {
          v23 += v842;
          v596 += v840;
        }
        v16 += v839;
        v14 += v838;
        v7 += v836;
        --v845;
      }
      while (v845);
      return result;
    case 26:
      v609 = v27;
      v610 = v8;
      v611 = v20;
      v612 = v843;
      v819 = -(uint64_t)(v842 * v22);
      v834 = v8;
      v804 = -(v840 * v22);
      v613 = 4 * v27;
      v614 = -(uint64_t)v21;
      do
      {
        v615 = v841;
        v860 = v12;
        do
        {
          v616 = *v16;
          if (*v16)
          {
            v617 = v20 ? *v612 : 255;
            v618 = v617 * v616 + ((v617 * v616) >> 8) + 1;
            if (BYTE1(v618))
            {
              v619 = (((((*v23 >> 20) & 0x3FF) * v616 + ((((*v23 >> 20) & 0x3FF) * v616) >> 8)) << 12) + 4096) & 0x3FF00000 | (((*v23 & 0x3FF) * v616 + (((*v23 & 0x3FF) * v616) >> 8) + 1) >> 8) | (4 * (((*v23 >> 10) & 0x3FF) * v616 + ((((*v23 >> 10) & 0x3FF) * v616) >> 8)) + 4) & 0xFFC00 | 0xC0000000;
              if (v8)
              {
                if (*v7)
                {
                  result = PDAluminosityPDA(v619, BYTE1(v618), *v14, *v7);
                  v610 = v834;
                  v8 = v846;
                  v12 = v860;
                  v20 = v862;
                }
                else
                {
                  result = (v618 >> 8) | (unint64_t)(v619 << 32);
                }
                *v14 = HIDWORD(result);
                *v7 = result;
              }
              else
              {
                result = PDAluminosityPDA(v619, BYTE1(v618), *v14, 0xFFu);
                v610 = v834;
                v8 = v846;
                v12 = v860;
                v20 = v862;
                *v14 = HIDWORD(result);
              }
            }
          }
          v16 += v609;
          v7 += v610;
          v620 = &v23[v609];
          if ((unint64_t)v620 >= v12)
            v621 = v614;
          else
            v621 = 0;
          v612 += v611 + v621;
          v23 = &v620[v621];
          v14 = (unsigned int *)((char *)v14 + v613);
          --v615;
        }
        while (v615);
        if (v837)
        {
          v622 = v844 + 4 * v842;
          v623 = v804;
          if (v622 < v837)
            v623 = 0;
          v612 = &v843[v840 + v623];
          v624 = v819;
          if (v622 < v837)
            v624 = 0;
          v23 = (unsigned int *)(v622 + 4 * v624);
          v12 += 4 * v624 + 4 * v842;
          v843 += v840 + v623;
          v844 = (unint64_t)v23;
        }
        else
        {
          v23 += v842;
          v612 += v840;
        }
        v16 += v839;
        v14 += v838;
        v7 += v836;
        --v845;
      }
      while (v845);
      return result;
    case 27:
      v625 = v27;
      v626 = v8;
      v627 = v20;
      v628 = v843;
      v820 = -(uint64_t)(v842 * v22);
      v835 = v8;
      v805 = -(v840 * v22);
      v629 = 4 * v27;
      v630 = -(uint64_t)v21;
      do
      {
        v631 = v841;
        v861 = v12;
        do
        {
          v632 = *v16;
          if (*v16)
          {
            v633 = v20 ? *v628 : 255;
            v634 = v633 * v632 + ((v633 * v632) >> 8) + 1;
            if (BYTE1(v634))
            {
              if (v8)
              {
                if (*v7)
                {
                  result = PDAluminosityPDA(*v14, *v7, (((*v23 & 0x3FF) * v632 + (((*v23 & 0x3FF) * v632) >> 8) + 1) >> 8) | (4 * (((*v23 >> 10) & 0x3FF) * v632 + ((((*v23 >> 10) & 0x3FF) * v632) >> 8))+ 4) & 0xFC00, BYTE1(v634));
                  v626 = v835;
                  v8 = v846;
                  v12 = v861;
                  v20 = v862;
                }
                else
                {
                  result = (v634 >> 8) | ((unint64_t)((((((*v23 >> 20) & 0x3FF) * v632
                                                              + ((((*v23 >> 20) & 0x3FF) * v632) >> 8)) << 12)
                                                            + 4096) & 0x3FF00000 | (((*v23 & 0x3FF) * v632
                                                                                   + (((*v23 & 0x3FF) * v632) >> 8)
                                                                                   + 1) >> 8) | (4
                                                                                               * (((*v23 >> 10) & 0x3FF)
                                                                                                * v632
                                                                                                + ((((*v23 >> 10) & 0x3FF)
                                                                                                  * v632) >> 8))
                                                                                               + 4) & 0xFFC00 | 0xC0000000) << 32);
                }
                *v14 = HIDWORD(result);
                *v7 = result;
              }
              else
              {
                result = PDAluminosityPDA(*v14, 0xFFu, (((*v23 & 0x3FF) * v632 + (((*v23 & 0x3FF) * v632) >> 8) + 1) >> 8) | (4* (((*v23 >> 10) & 0x3FF)* v632+ ((((*v23 >> 10) & 0x3FF) * v632) >> 8))+ 4) & 0xFC00, BYTE1(v634));
                v626 = v835;
                v8 = v846;
                v12 = v861;
                v20 = v862;
                *v14 = HIDWORD(result);
              }
            }
          }
          v16 += v625;
          v7 += v626;
          v635 = &v23[v625];
          if ((unint64_t)v635 >= v12)
            v636 = v630;
          else
            v636 = 0;
          v628 += v627 + v636;
          v23 = &v635[v636];
          v14 = (unsigned int *)((char *)v14 + v629);
          --v631;
        }
        while (v631);
        if (v837)
        {
          v637 = v844 + 4 * v842;
          v638 = v805;
          if (v637 < v837)
            v638 = 0;
          v628 = &v843[v840 + v638];
          v639 = v820;
          if (v637 < v837)
            v639 = 0;
          v23 = (unsigned int *)(v637 + 4 * v639);
          v12 += 4 * v639 + 4 * v842;
          v843 += v840 + v638;
          v844 = (unint64_t)v23;
        }
        else
        {
          v23 += v842;
          v628 += v840;
        }
        v16 += v839;
        v14 += v838;
        v7 += v836;
        --v845;
      }
      while (v845);
      return result;
    default:
      return result;
  }
  do
  {
    v673 = v9;
    v674 = v845;
    do
    {
      v675 = *v16;
      if (!*v16)
        goto LABEL_802;
      if (v675 == 255)
      {
        v676 = *v672;
        if (!*v672)
          goto LABEL_802;
        if (v676 == 255)
        {
          v677 = *v23;
        }
        else
        {
          v685 = v676 ^ 0xFF;
          v686 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v14), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v685));
          v687 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v686, v686, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
          v677 = *v23
               - 0x40000000
               + (v687.i32[0] | (((*v14 & 0x3FF) * v685 + (((*v14 & 0x3FF) * v685) >> 8) + 1) >> 8) | v687.i32[1]);
        }
      }
      else
      {
        v678 = *v672 * v675 + ((*v672 * v675) >> 8) + 1;
        if ((v678 & 0xFF00) == 0)
          goto LABEL_802;
        v679.i32[0] = *v23;
        v679.i32[1] = *v14;
        v680.i32[0] = *v16;
        v680.i32[1] = (v678 >> 8) ^ 0xFF;
        v681 = (uint32x2_t)vmul_s32((int32x2_t)(*(_QWORD *)&vshr_n_u32(v679, 0x14uLL) & 0xFFFFF3FFFFFFF3FFLL), v680);
        v682 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshr_n_u32(v679, 0xAuLL), (int8x8_t)0x300000003), v680);
        v683 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)v679, (int8x8_t)0x300000003), v680);
        v684 = vorr_s8(vorr_s8(vand_s8((int8x8_t)vadd_s32(vshl_n_s32((int32x2_t)vsra_n_u32(v681, v681, 8uLL), 0xCuLL), (int32x2_t)0x100000001000), _D16), (int8x8_t)vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v683, v683, 8uLL), (int32x2_t)0x100000001), 8uLL)), vand_s8((int8x8_t)vadd_s32(vshl_n_s32((int32x2_t)vsra_n_u32(v682, v682, 8uLL), 2uLL), (int32x2_t)0x400000004), v671));
        v677 = (v684.i32[1] + v684.i32[0]) | 0x80000000;
      }
      *v14 = v677;
LABEL_802:
      v16 += v65;
      v688 = &v23[v65];
      v689 = &v672[v20];
      if ((unint64_t)v688 >= v12)
        result = v669;
      else
        result = 0;
      v672 = &v689[result];
      v23 = &v688[result];
      v14 += v65;
      --v673;
    }
    while (v673);
    if (v837)
    {
      result = v842;
      v690 = v844 + 4 * v842;
      if (v690 >= v837)
        v691 = v668;
      else
        v691 = 0;
      v692 = &v843[v840 + v691];
      if (v690 >= v837)
        v693 = v667;
      else
        v693 = 0;
      v23 = (unsigned int *)(v690 + 4 * v693);
      v12 += 4 * v693 + 4 * v842;
      v843 += v840 + v691;
      v844 = (unint64_t)v23;
      v672 = v692;
    }
    else
    {
      v23 += v842;
      v672 += v840;
    }
    v16 += v839;
    v14 += v838;
    --v845;
  }
  while (v674 != 1);
  return result;
}

uint64_t CIF10_image(uint64_t *a1, float32x2_t *a2, uint64_t a3)
{
  int *v6;
  _BOOL8 v7;
  signed int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, int);
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  _OWORD v26[64];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = (int *)*a1;
  memset(v26, 0, 512);
  if (a2[12])
    v7 = 0;
  else
    v7 = *(float *)(a3 + 8) >= 1.0;
  v8 = *(_DWORD *)(*((_QWORD *)v6 + 7) + 16 * a2->u8[0] + 8 * v7 + 4 * (*(_QWORD *)&a2[6] == 0));
  if (v8 > 28)
    return 0xFFFFFFFFLL;
  if (a2->i32[1] < 1 || a2[1].i32[0] < 1)
    return 0;
  if ((int)_blt_image_initialize((uint64_t)a2, a3, (uint64_t)&v21, (uint64_t)v26) < 1)
    return 0xFFFFFFFFLL;
  v18 = *v6;
  v19 = *(_DWORD *)a3;
  v22 = v19;
  v23 = v18;
  if (v19 != 134886228)
  {
    v20 = SAMPLEINDEX(v19, v10, v11, v12, v13, v14, v15, v16);
    if (v20)
    {
      v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int))&CIF10_image_sample[8 * v20 + 8];
      if (v21)
      {
        v22 = 134886228;
        goto LABEL_19;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (!v25 && (~v24 & 0xC3) == 0)
  {
    v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
    if (v17.n128_f32[0] >= 1.0 && !*(_QWORD *)(a3 + 24))
    {
      if ((v24 & 4) != 0)
      {
        v17.n128_u64[0] = *(_QWORD *)(a3 + 32);
        a2[8] = (float32x2_t)v17.n128_u64[0];
      }
      CIF10_mark_inner(*(_QWORD *)(*a1 + 56), v17);
      return 1;
    }
  }
  v21 = CIF10_sample_CIF10_inner;
LABEL_19:
  CIF10_image_mark(a2, (uint64_t)&v21, v8, v17);
  return 1;
}

void CIF10_image_mark(float32x2_t *a1, uint64_t a2, unsigned int a3, __n128 a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v9;
  float32x2_t v10;
  float v11;
  float32x2_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void *v22;
  int v23;
  float32x2_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int32x2_t v56;
  float32x2_t v57;
  void *v63;
  void (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  float16x4_t v67;
  __n128 v68;
  __n128 v69;
  __n128 v70;
  unsigned __int8 *v71;
  _BYTE *v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  int v76;
  _BYTE *v77;
  uint32x2_t v78;
  int8x8_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  float v88;
  __int16 *v89;
  float v93;
  float v94;
  float v95;
  uint64_t v96;
  int8x8_t v97;
  unsigned __int32 v98;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v105;
  int v106;
  unsigned __int8 *v107;
  int v108;
  int v109;
  unsigned int v110;
  unsigned int v111;
  uint32x2_t v112;
  int8x8_t v113;
  unsigned int v114;
  uint64_t v115;
  _BYTE *v116;
  unsigned int *v117;
  uint64_t v118;
  unsigned int v119;
  unsigned __int8 *v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  uint32x2_t v125;
  uint32x2_t v126;
  int32x2_t v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  _BYTE *v131;
  unsigned int *v132;
  unsigned int v133;
  unint64_t v134;
  char v135;
  uint64_t v136;
  unsigned int v137;
  unsigned int v138;
  uint32x2_t v139;
  int32x2_t v140;
  unsigned int v141;
  unsigned __int32 v142;
  uint64_t v143;
  int v144;
  uint32x2_t v145;
  int64x2_t v146;
  unint64_t v147;
  int8x8_t v148;
  unint64_t v149;
  int64x2_t v150;
  int64x2_t v151;
  unsigned __int32 v152;
  unsigned int v153;
  int8x8_t v154;
  uint32x2_t v155;
  int64x2_t v156;
  unint64_t v157;
  int64x2_t v158;
  uint64_t v159;
  int64x2_t v160;
  uint64_t v161;
  int v162;
  unsigned __int8 *v163;
  int v164;
  unsigned int v165;
  unsigned int v166;
  uint32x2_t v167;
  int8x8_t v168;
  unsigned int v169;
  unsigned __int32 v170;
  int v171;
  unsigned int v172;
  unsigned int v173;
  uint32x2_t v174;
  uint32x2_t v175;
  int32x2_t v176;
  int v177;
  int v178;
  unsigned int v179;
  unsigned int v180;
  uint32x2_t v181;
  int8x8_t v182;
  unsigned int v183;
  unsigned __int32 v184;
  int v185;
  unsigned int v186;
  unsigned int v187;
  uint32x2_t v188;
  uint32x2_t v189;
  int32x2_t v190;
  int v191;
  int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  int32x2_t v202;
  int32x2_t v203;
  uint32x2_t v204;
  uint32x2_t v205;
  int32x2_t v206;
  int v207;
  unsigned int v208;
  unsigned int v209;
  uint64_t v210;
  uint32x2_t v211;
  int8x8_t v212;
  unsigned int v213;
  unsigned int v214;
  uint32x2_t v215;
  int64x2_t v216;
  unint64_t v217;
  int8x8_t v218;
  unint64_t v219;
  int64x2_t v220;
  int64x2_t v221;
  uint64_t v222;
  int v223;
  int v224;
  unsigned int v225;
  unsigned int v226;
  uint32x2_t v227;
  int8x8_t v228;
  unsigned int v229;
  unsigned __int32 v230;
  unsigned int v231;
  unsigned int v232;
  int32x2_t v233;
  uint32x2_t v234;
  uint32x2_t v235;
  int32x2_t v236;
  uint64_t v237;
  int v238;
  int v239;
  unsigned int v240;
  unsigned int v241;
  uint32x2_t v242;
  int8x8_t v243;
  unsigned int v244;
  unsigned __int32 v245;
  unsigned int v246;
  unsigned int v247;
  int32x2_t v248;
  uint32x2_t v249;
  uint32x2_t v250;
  int32x2_t v251;
  int v252;
  unsigned int v253;
  unsigned int v254;
  int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  __int32 v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  int32x2_t v268;
  int32x2_t v269;
  uint32x2_t v270;
  uint32x2_t v271;
  int32x2_t v272;
  int v273;
  int v274;
  int v275;
  unsigned int v276;
  unsigned int v277;
  __int32 v278;
  unsigned int v279;
  unsigned int v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  int32x2_t v287;
  int32x2_t v288;
  uint32x2_t v289;
  uint32x2_t v290;
  int32x2_t v291;
  uint64_t v292;
  int v293;
  int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  uint64_t v305;
  int v306;
  int v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  void *v318;
  uint64_t v319;
  int v320;
  unsigned __int8 *v321;
  int v322;
  unint64_t v323;
  unsigned int v324;
  unint64_t v325;
  unint64_t v326;
  int v327;
  int v328;
  unint64_t v329;
  unsigned int v330;
  unint64_t v331;
  unint64_t v332;
  unint64_t v333;
  int v334;
  int v335;
  unint64_t v336;
  unsigned int v337;
  unint64_t v338;
  unint64_t v339;
  unint64_t v340;
  int v341;
  int v342;
  unint64_t v343;
  unsigned int v344;
  unint64_t v345;
  unint64_t v346;
  int v347;
  int v348;
  unint64_t v349;
  unsigned int v350;
  unint64_t v351;
  unint64_t v352;
  int v353;
  int v354;
  unint64_t v355;
  unsigned int v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  int v360;
  int v361;
  unint64_t v362;
  unsigned int v363;
  unint64_t v364;
  unint64_t v365;
  unint64_t v366;
  int v367;
  int v368;
  unint64_t v369;
  unsigned int v370;
  unint64_t v371;
  unint64_t v372;
  unint64_t v373;
  int v374;
  int v375;
  unint64_t v376;
  unsigned int v377;
  unint64_t v378;
  unint64_t v379;
  unint64_t v380;
  int v381;
  int v382;
  unint64_t v383;
  unsigned int v384;
  unint64_t v385;
  unint64_t v386;
  unint64_t v387;
  int v388;
  int v389;
  unint64_t v390;
  unsigned int v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  int v395;
  int v396;
  unint64_t v397;
  unsigned int v398;
  unint64_t v399;
  unint64_t v400;
  unint64_t v401;
  int v402;
  int v403;
  unint64_t v404;
  unsigned int v405;
  unint64_t v406;
  unint64_t v407;
  unint64_t v408;
  int v409;
  unsigned __int8 *v410;
  int v411;
  unint64_t v412;
  unsigned int v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  unsigned __int8 *v417;
  int v418;
  int v419;
  unint64_t v420;
  unsigned int v421;
  unint64_t v422;
  unint64_t v423;
  int v424;
  int v425;
  unsigned int v426;
  unsigned int v427;
  uint32x2_t v428;
  int8x8_t v429;
  unsigned __int8 *v430;
  unsigned int *v431;
  int v432;
  unsigned int v433;
  unsigned __int32 v434;
  unsigned int v435;
  unsigned int v436;
  uint32x2_t v437;
  uint32x2_t v438;
  int32x2_t v439;
  unsigned int v440;
  unsigned __int8 *v441;
  int v442;
  unsigned int v443;
  uint64_t v444;
  unsigned int v445;
  uint32x2_t v446;
  int8x8_t v447;
  unsigned __int32 v448;
  __int32 v449;
  unsigned int v450;
  int8x8_t v451;
  int32x2_t v452;
  uint32x2_t v453;
  int32x2_t v454;
  unsigned int v455;
  uint32x2_t v456;
  int32x2_t v457;
  uint32x2_t v458;
  int8x8_t v459;
  unsigned int v460;
  int v461;
  int v462;
  unsigned int v463;
  uint32x2_t v464;
  int8x8_t v465;
  unsigned __int32 v466;
  unsigned int v467;
  unsigned int v468;
  unsigned int v469;
  int32x2_t v470;
  uint32x2_t v471;
  uint32x2_t v472;
  int32x2_t v473;
  int v474;
  int v475;
  unsigned int v476;
  uint32x2_t v477;
  int8x8_t v478;
  unsigned __int32 v479;
  unsigned int v480;
  unsigned int v481;
  unsigned int v482;
  int32x2_t v483;
  uint32x2_t v484;
  uint32x2_t v485;
  int32x2_t v486;
  int v487;
  int v488;
  unsigned int v489;
  unsigned int v490;
  unsigned int v491;
  unsigned int v492;
  unsigned int v493;
  unsigned int v494;
  int v495;
  unsigned int v496;
  uint32x2_t v497;
  int8x8_t v498;
  unsigned int v499;
  int32x2_t v500;
  int8x8_t v501;
  int v502;
  int v503;
  unsigned __int8 *v504;
  int v505;
  unsigned int v506;
  unsigned int v507;
  unsigned int v508;
  unsigned int v509;
  uint32x2_t v510;
  uint32x2_t v511;
  int32x2_t v512;
  int8x8_t v513;
  int v514;
  unsigned int v515;
  unsigned int *v516;
  uint64_t v517;
  unsigned __int8 *v518;
  int v519;
  unint64_t v520;
  char v521;
  unint64_t v522;
  unsigned int v523;
  int v524;
  unsigned int v525;
  unsigned int v526;
  uint64_t v527;
  unsigned int v528;
  uint32x2_t v529;
  int64x2_t v530;
  unint64_t v531;
  int64x2_t v532;
  int64x2_t v533;
  unsigned __int32 v534;
  unsigned int v535;
  int8x8_t v536;
  uint32x2_t v537;
  int64x2_t v538;
  unint64_t v539;
  int64x2_t v540;
  uint64_t v541;
  int64x2_t v542;
  unsigned int v543;
  unsigned __int32 v544;
  unsigned int v545;
  unsigned int v546;
  uint32x2_t v547;
  uint32x2_t v548;
  int32x2_t v549;
  unsigned int v550;
  unint64_t v551;
  unsigned int v552;
  int8x8_t v553;
  int32x2_t v554;
  uint32x2_t v555;
  int32x2_t v556;
  unsigned int v557;
  uint32x2_t v558;
  int32x2_t v559;
  uint32x2_t v560;
  int8x8_t v561;
  unint64_t v562;
  unsigned int v563;
  uint32x2_t v564;
  int8x8_t v565;
  unsigned int v566;
  uint64_t v567;
  unint64_t v568;
  void *v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  unsigned int v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  int v578;
  int v579;
  uint64_t v580;
  uint32x2_t v581;
  float64x2_t v582;
  int32x2_t v583;
  uint64_t v584;
  float32x2_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;

  v588 = *MEMORY[0x1E0C80C00];
  v4 = a1->u32[1];
  v572 = (int)v4;
  v5 = ((int)v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if ((int)v5 <= 0x1FFFFFF)
  {
    v9 = a1[3].i32[1];
    v10 = a1[5];
    v585 = a1[6];
    v586 = v4;
    v11 = *(float *)(a2 + 184);
    v12 = a1[17];
    v580 = *(_QWORD *)(a2 + 96);
    v13 = *(_QWORD *)(a2 + 104);
    v583 = (int32x2_t)v12;
    v584 = v13;
    v15 = a1[1].i32[1];
    v14 = a1[2].i32[0];
    v579 = a1[1].i32[0];
    v16 = *(int *)(a2 + 16);
    v17 = (v16 + 10) * v5;
    if (v17 > 65439)
    {
      v20 = (char *)malloc_type_calloc(1uLL, v17 + 96, 0x48537F98uLL);
      v19 = v20;
      v22 = v20;
      v23 = v586;
      if (!v20)
        return;
    }
    else
    {
      MEMORY[0x1E0C80A78](a1, a4);
      v19 = (char *)&v567 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v19, v18);
      v22 = 0;
      v23 = v586;
    }
    v24 = v10;
    v569 = v22;
    v573 = a3;
    v25 = (unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0;
    v26 = v25 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    *(_QWORD *)(a2 + 160) = v26;
    if ((_DWORD)v16)
      v27 = 8 * v5;
    else
      v27 = 0;
    v28 = v26 + v27;
    v29 = (int)(float)((float)(v11 * 255.0) + 0.5);
    v30 = v9 >> 2;
    *(_QWORD *)(a2 + 144) = v25;
    *(_QWORD *)(a2 + 152) = v26 + v27;
    v574 = a2;
    if (v585)
    {
      v31 = a1[4].i32[0];
      v32 = (_BYTE *)(*(_QWORD *)&v585 + v15 + (int)v31 * (uint64_t)(int)v14);
      v33 = v572;
      v577 = v31 - v572;
      v587 = 1;
    }
    else
    {
      v32 = 0;
      v577 = 0;
      v587 = 0;
      v33 = v572;
    }
    v34 = (unsigned int *)(*(_QWORD *)&v24 + 4 * (v15 + v30 * v14));
    v576 = v30 - v33;
    v35 = a1[13].i32[0];
    v36 = a1[13].i32[1];
    v37 = a1->u8[2];
    if (v37 == 6 || v37 == 1)
    {
      v38 = v573;
      v39 = v574;
      v40 = v580;
      v41 = v584;
      if (v583)
      {
        v568 = v30;
        v42 = 0;
        LODWORD(v43) = 0;
        v44 = a1[15].i32[1];
        v45 = (unsigned __int8 *)(*(_QWORD *)&v583 + v35 + (int)v44 * (uint64_t)v36);
        v33 = v572;
        v575 = v44 - v572;
        goto LABEL_33;
      }
      goto LABEL_603;
    }
    v568 = v30;
    if (!*(_QWORD *)&v583)
    {
      v45 = 0;
      v42 = 0;
      v575 = 0;
      LODWORD(v43) = 0;
      v38 = v573;
      v39 = v574;
      v40 = v580;
      goto LABEL_32;
    }
    shape_enum_clip_alloc((uint64_t)v20, v21, *(int **)&v583, 1, 1, 1, v35, v36, v23, v579);
    if (!v46)
    {
LABEL_603:
      if (v569)
        free(v569);
      return;
    }
    v42 = v46;
    v43 = 0;
    v47 = (int)((v16 * v5 + 15) & 0xFFFFFFF0);
    if (!(_DWORD)v16)
      v47 = 8 * v5;
    v48 = v572;
    v575 = -v572;
    v45 = (unsigned __int8 *)(v28 + v47 + 16);
    v38 = v573;
    v40 = v580;
LABEL_21:
    v49 = v577 + v48;
    while (1)
    {
      v50 = v38;
      while (1)
      {
        v51 = *((unsigned int *)v45 - 4);
        v52 = v51 - v43;
        if ((int)v51 > (int)v43)
          break;
        if ((int)v43 < *((_DWORD *)v45 - 3) + (int)v51)
        {
          v39 = v574;
          v23 = v586;
          v33 = v572;
          v38 = v50;
LABEL_32:
          v41 = v584;
LABEL_33:
          v571 = (v23 - 1) + 1;
          v56 = vdup_n_s32(v29);
          v570 = -v33;
          v583 = vdup_n_s32(0x43FF8000u);
          v57 = (float32x2_t)vdup_n_s32(0x43C00000u);
          __asm { FMOV            V0.2D, #0.5 }
          v582 = _Q0;
          v581 = (uint32x2_t)0xA00000014;
          v63 = v42;
          v584 = v29;
          while (2)
          {
            v578 = v43;
            v42 = v63;
            v64 = *(void (**)(uint64_t, uint64_t, uint64_t))v39;
            v580 = v40;
            v64(v39, v40, v41);
            v71 = *(unsigned __int8 **)(v39 + 160);
            v72 = *(_BYTE **)(v39 + 144);
            v73 = *(_DWORD *)(v39 + 8);
            if (v73 == *(_DWORD *)(v39 + 12))
            {
              if ((_DWORD)v29 == 255)
              {
                v74 = v586;
                v75 = v587;
              }
              else
              {
                v74 = v586;
                v75 = v587;
                v76 = v586;
                v77 = *(_BYTE **)(v39 + 144);
                do
                {
                  if (*v77)
                  {
                    v78 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*((_DWORD *)v71 + 1)), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), v56);
                    v79 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v78, v78, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                    *(_QWORD *)v71 = ((*v71 * (_DWORD)v29 + ((*v71 * v29) >> 8) + 1) >> 8) | ((unint64_t)(v79.i32[0] | (((*((_DWORD *)v71 + 1) & 0x3FF) * (_DWORD)v29 + (((*((_DWORD *)v71 + 1) & 0x3FF) * v29) >> 8) + 1) >> 8) | v79.i32[1] | 0xC0000000) << 32);
                  }
                  ++v77;
                  v71 += 8;
                  --v76;
                }
                while (v76);
                v71 += 8 * v570;
                v72 += v571 + v570;
              }
            }
            else
            {
              v80 = v42;
              v81 = v41;
              v82 = *(_QWORD *)(v39 + 152);
              v83 = HIWORD(v73) & 0x3F;
              if (v83 == 16)
              {
                v74 = v586;
                v75 = v587;
                if ((_DWORD)v584 != 255)
                {
                  v87 = 0;
                  v88 = *(float *)(v39 + 184);
                  v89 = (__int16 *)(v82 + 6);
                  v41 = v81;
                  v42 = v80;
                  v29 = v584;
                  do
                  {
                    if (v72[v87])
                    {
                      _H2 = *(v89 - 1);
                      _H3 = *v89;
                      __asm { FCVT            S3, H3 }
                      v93 = (float)(v88 * (float)(_S3 * 255.0)) + 0.5;
                      v94 = 0.0;
                      if (v93 >= 0.0)
                        v94 = v93;
                      if (v93 <= 255.0)
                        v95 = v94;
                      else
                        v95 = 255.0;
                      LODWORD(v96) = v95;
                      v68.n128_u32[0] = *(_DWORD *)(v89 - 3);
                      v68.n128_u64[0] = (unint64_t)vshl_u32(vmin_u32((uint32x2_t)vmovn_s64((int64x2_t)vcvtq_u64_f64(vaddq_f64(vcvtq_f64_f32(vmla_f32(v57, (float32x2_t)v583, vmul_n_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16((float16x4_t)v68.n128_u64[0]), v88))), v582))), (uint32x2_t)0x300000003), v581);
                      v97 = (int8x8_t)vdup_lane_s32((int32x2_t)v68.n128_u64[0], 1);
                      if (v96 >= 0xFF)
                        v96 = 255;
                      else
                        v96 = v96;
                      v98 = vorr_s8(v97, (int8x8_t)v68.n128_u64[0]).u32[0];
                      __asm { FCVT            S1, H2 }
                      v68.n128_f64[0] = (float)((float)((float)(v88 * _S1) * 511.0) + 384.0) + 0.5;
                      v100 = v68.n128_f64[0];
                      if (v68.n128_f64[0] >= 0x3FF)
                        v100 = 1023;
                      *(_QWORD *)&v71[8 * v87] = v96 | ((unint64_t)(v98 | v100) << 32) | 0xC000000000000000;
                    }
                    v89 += 4;
                    ++v87;
                  }
                  while (v74 != (_DWORD)v87);
                  goto LABEL_80;
                }
                v102 = 0;
                v103 = 0;
                do
                {
                  if (v72[v102])
                  {
                    v67.i16[0] = *(_WORD *)(v82 + v103);
                    v68.n128_u16[0] = *(_WORD *)(v82 + v103 + 2);
                    v69.n128_u16[0] = *(_WORD *)(v82 + v103 + 4);
                    v70.n128_u16[0] = *(_WORD *)(v82 + v103 + 6);
                    RGBAf16((unint64_t *)&v71[v103], v67, v68, v69, v70);
                    v74 = v586;
                    v75 = v587;
                  }
                  v103 += 8;
                  ++v102;
                }
                while (v74 != (_DWORD)v102);
                v38 = v573;
                v39 = v574;
              }
              else
              {
                v74 = v586;
                v75 = v587;
                if (v83 != 32)
                  _CGHandleAssert("CIF10_image_pixel", 11844, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/CIF10/blt_cif10.cc", "0", "unhandled bit depth (%u)", v65, v587, v66, v83);
                if ((_DWORD)v584 == 255)
                {
                  v101 = 0;
                  do
                  {
                    if (v72[v101])
                      *(_QWORD *)&v71[8 * v101] = *(_QWORD *)(v82 + 8 * v101);
                    ++v101;
                  }
                  while (v74 != (_DWORD)v101);
                }
                else
                {
                  v84 = 0;
                  do
                  {
                    if (v72[v84])
                    {
                      v85 = *(_QWORD *)(v82 + 8 * v84);
                      LODWORD(v86) = (((v85 * (unint64_t)v584) >> 8)
                                    + (_DWORD)v85 * (_DWORD)v584
                                    + 1) >> 8;
                      if (v86 >= 0xFF)
                        v86 = 255;
                      else
                        v86 = v86;
                      *(_QWORD *)&v71[8 * v84] = v86 | (((((((WORD2(v85) & 0x3FF)
                                                                         * (unint64_t)v584) >> 8)
                                                                       + (WORD2(v85) & 0x3FF)
                                                                       * (unint64_t)v584
                                                                       + 1) >> 8) | HIDWORD(v85) & 0xC0000000 | (4 * (((((v85 >> 42) & 0x3FF) * v584) >> 8) + ((v85 >> 42) & 0x3FF) * (_DWORD)v584) + 4) & 0x7FFFFC00 | (((((v85 >> 52) & 0x3FF) * (_DWORD)v584 + ((((v85 >> 52) & 0x3FF) * v584) >> 8)) << 12) + 4096) & 0xFFF00000) << 32);
                    }
                    ++v84;
                  }
                  while (v74 != (_DWORD)v84);
                }
              }
              v41 = v81;
              v42 = v80;
              v29 = v584;
            }
LABEL_80:
            __asm { FMOV            V0.2S, #1.875 }
            switch((int)v38)
            {
              case 0:
                v105 = v45 != 0;
                if (v585)
                {
                  v106 = v74;
                  v107 = v45;
                  v108 = v579;
                  do
                  {
                    v109 = *v72;
                    if (*v72)
                    {
                      if (v45)
                        v109 = ((unsigned __int16)(*v107 * (_WORD)v109
                                                                  + ((*v107 * v109) >> 8)
                                                                  + 1) >> 8);
                      if (v109)
                      {
                        if (v109 == 255)
                        {
                          LOBYTE(v110) = 0;
                          *v34 = 0;
                        }
                        else
                        {
                          v111 = v109 ^ 0xFF;
                          v110 = (*v32 * (v109 ^ 0xFF)
                                + ((*v32 * (v109 ^ 0xFFu)) >> 8)
                                + 1) >> 8;
                          v112 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v34), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v111));
                          v113 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v112, v112, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                          *v34 = v113.i32[0] | (((*v34 & 0x3FF) * v111 + (((*v34 & 0x3FF) * v111) >> 8) + 1) >> 8) | v113.i32[1] | 0xC0000000;
                        }
                        *v32 = v110;
                      }
                    }
                    ++v72;
                    v107 += v105;
                    ++v34;
                    ++v32;
                    --v106;
                  }
                  while (v106);
                }
                else
                {
                  v424 = v74;
                  v107 = v45;
                  v108 = v579;
                  do
                  {
                    v425 = *v72;
                    if (*v72)
                    {
                      if (v45)
                        v425 = ((unsigned __int16)(*v107 * (_WORD)v425
                                                                  + ((*v107 * v425) >> 8)
                                                                  + 1) >> 8);
                      if (v425)
                      {
                        if (v425 == 255)
                        {
                          v426 = 0;
                        }
                        else
                        {
                          v427 = v425 ^ 0xFF;
                          v428 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v34), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v427));
                          v429 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v428, v428, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                          v426 = *v34
                               - (v429.i32[0] | (((*v34 & 0x3FF) * v427 + (((*v34 & 0x3FF) * v427) >> 8) + 1) >> 8) | v429.i32[1])
                               + 0x40000000;
                        }
                        *v34 = v426;
                      }
                    }
                    ++v72;
                    v107 += v105;
                    ++v34;
                    --v424;
                  }
                  while (v424);
                }
                v45 = &v107[v575];
                v34 += v576;
                v32 += v577;
                v118 = v580;
                goto LABEL_547;
              case 1:
                v114 = *v72;
                if (v585)
                {
                  if (v45)
                  {
                    v115 = 0;
                    v116 = v72 + 1;
                    v117 = v34 - 1;
                    v118 = v580;
                    do
                    {
                      if (v114)
                      {
                        v119 = v45[v115] * v114 + ((v45[v115] * v114) >> 8) + 1;
                        if (BYTE1(v119))
                        {
                          if (BYTE1(v119) == 255)
                          {
                            v120 = &v71[8 * v115];
                            v34[v115] = *((_DWORD *)v120 + 1);
                            LOBYTE(v120) = *v120;
                          }
                          else
                          {
                            v121 = v119 >> 8;
                            v120 = &v71[8 * v115];
                            v122 = *((_DWORD *)v120 + 1);
                            v123 = v121 ^ 0xFF;
                            LODWORD(v120) = ((v123 * v32[v115]
                                            + ((v123 * v32[v115]) >> 8)
                                            + 1) >> 8)
                                          + ((*v120 * v121 + ((*v120 * v121) >> 8) + 1) >> 8);
                            if (v120 >= 0xFF)
                              LOBYTE(v120) = -1;
                            v124 = (((v122 & 0x3FF) * v121 + (((v122 & 0x3FF) * v121) >> 8) + 1) >> 8)
                                 + (((v34[v115] & 0x3FF) * v123 + (((v34[v115] & 0x3FF) * v123) >> 8) + 1) >> 8);
                            if (v124 >= 0x3FF)
                              v124 = 1023;
                            v125 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v122), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v121));
                            v126 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v34[v115]), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v123));
                            v127 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v125, v125, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v126, v126, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                            v34[v115] = vorr_s8((int8x8_t)v127, (int8x8_t)vdup_lane_s32(v127, 1)).u32[0] | v124 | 0xC0000000;
                          }
                          v32[v115] = (_BYTE)v120;
                        }
                      }
                      v114 = v116[v115++];
                      ++v117;
                    }
                    while (v74 != (_DWORD)v115);
                    v128 = (uint64_t)&v32[v115 - 1];
                    v45 += v115 + v575;
                  }
                  else
                  {
                    v504 = v72 + 1;
                    v128 = (uint64_t)(v32 - 1);
                    v117 = v34 - 1;
                    v505 = v74;
                    v118 = v580;
                    do
                    {
                      if (v114)
                      {
                        if (v114 == 255)
                        {
                          v117[1] = *((_DWORD *)v71 + 1);
                          LOBYTE(v506) = *v71;
                        }
                        else
                        {
                          v507 = v114 ^ 0xFF;
                          v506 = ((*(unsigned __int8 *)(v128 + 1) * v507
                                 + ((*(unsigned __int8 *)(v128 + 1) * v507) >> 8)
                                 + 1) >> 8)
                               + ((*v71 * v114 + ((*v71 * v114) >> 8) + 1) >> 8);
                          if (v506 >= 0xFF)
                            LOBYTE(v506) = -1;
                          v508 = ((*((_DWORD *)v71 + 1) & 0x3FF) * v114
                                + (((*((_DWORD *)v71 + 1) & 0x3FF) * v114) >> 8)
                                + 1) >> 8;
                          v509 = (v117[1] & 0x3FF) * v507 + (((v117[1] & 0x3FF) * v507) >> 8) + 1;
                          v510 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*((_DWORD *)v71 + 1)), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v114));
                          v511 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v117[1]), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v507));
                          v512 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v510, v510, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v511, v511, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                          v513 = (int8x8_t)vdup_lane_s32(v512, 1);
                          if (v508 + (v509 >> 8) >= 0x3FF)
                            v514 = 1023;
                          else
                            v514 = v508 + (v509 >> 8);
                          v117[1] = vorr_s8((int8x8_t)v512, v513).u32[0] | v514 | 0xC0000000;
                        }
                        *(_BYTE *)(v128 + 1) = v506;
                      }
                      v515 = *v504++;
                      v114 = v515;
                      v71 += 8;
                      ++v128;
                      ++v117;
                      --v505;
                    }
                    while (v505);
                    v45 = 0;
                  }
                  v516 = &v117[v576];
                  v517 = v128 + v577;
                  goto LABEL_577;
                }
                v430 = v72 + 1;
                v431 = v34 - 1;
                v432 = v74;
                if (v45)
                {
                  v118 = v580;
                  do
                  {
                    if (v114)
                    {
                      v433 = ((unsigned __int16)(*v45 * (_WORD)v114 + ((*v45 * v114) >> 8) + 1) >> 8);
                      if (v433)
                      {
                        if (v433 == 255)
                        {
                          v434 = *((_DWORD *)v71 + 1);
                        }
                        else
                        {
                          v435 = v433 ^ 0xFF;
                          v436 = (((v431[1] & 0x3FF) * v435 + (((v431[1] & 0x3FF) * v435) >> 8) + 1) >> 8)
                               + (((*((_DWORD *)v71 + 1) & 0x3FF) * v433
                                 + (((*((_DWORD *)v71 + 1) & 0x3FF) * v433) >> 8)
                                 + 1) >> 8);
                          if (v436 >= 0x3FF)
                            v436 = 1023;
                          v437 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*((_DWORD *)v71 + 1)), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v433));
                          v438 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v431[1]), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v435));
                          v439 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v438, v438, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v437, v437, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                          v434 = vorr_s8((int8x8_t)v439, (int8x8_t)vdup_lane_s32(v439, 1)).u32[0] | v436 | 0xC0000000;
                        }
                        v431[1] = v434;
                      }
                    }
                    v440 = *v430++;
                    v114 = v440;
                    v71 += 8;
                    ++v45;
                    ++v431;
                    --v432;
                  }
                  while (v432);
                  goto LABEL_495;
                }
                v118 = v580;
                do
                {
                  if (v114)
                  {
                    if (v114 == 255)
                    {
                      v544 = *((_DWORD *)v71 + 1);
                    }
                    else
                    {
                      v545 = v114 ^ 0xFF;
                      v546 = (((*((_DWORD *)v71 + 1) & 0x3FF) * v114 + (((*((_DWORD *)v71 + 1) & 0x3FF) * v114) >> 8) + 1) >> 8)
                           + (((v431[1] & 0x3FF) * v545 + (((v431[1] & 0x3FF) * v545) >> 8) + 1) >> 8);
                      if (v546 >= 0x3FF)
                        v546 = 1023;
                      v547 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*((_DWORD *)v71 + 1)), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v114));
                      v548 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v431[1]), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v545));
                      v549 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v547, v547, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v548, v548, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                      v544 = vorr_s8((int8x8_t)v549, (int8x8_t)vdup_lane_s32(v549, 1)).u32[0] | v546 | 0xC0000000;
                    }
                    v431[1] = v544;
                  }
                  v550 = *v430++;
                  v114 = v550;
                  v71 += 8;
                  ++v431;
                  --v432;
                }
                while (v432);
                goto LABEL_599;
              case 2:
                v129 = *v72;
                if (!*(_QWORD *)&v585)
                {
                  v441 = v72 + 1;
                  v431 = v34 - 1;
                  v442 = v74;
                  if (v45)
                  {
                    v118 = v580;
                    while (1)
                    {
                      if (!v129)
                        goto LABEL_494;
                      v443 = ((unsigned __int16)(*v45 * (_WORD)v129 + ((*v45 * v129) >> 8) + 1) >> 8);
                      if (!((unsigned __int16)(*v45 * (_WORD)v129 + ((*v45 * v129) >> 8) + 1) >> 8))
                        goto LABEL_494;
                      if (v443 == 255)
                      {
                        if (*(_QWORD *)v71)
                        {
                          v444 = HIDWORD(*(_QWORD *)v71);
                          if (*(_QWORD *)v71 != 255)
                          {
                            v445 = ~*v71;
                            v446 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v431[1]), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v445));
                            v447 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v446, v446, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                            v448 = v447.i32[0] | (((v431[1] & 0x3FF) * v445 + (((v431[1] & 0x3FF) * v445) >> 8) + 1) >> 8) | v447.i32[1];
                            v449 = v444 - 0x40000000;
                            goto LABEL_492;
                          }
                          goto LABEL_493;
                        }
                      }
                      else
                      {
                        v450 = v443 * *(_QWORD *)v71
                             + ((v443 * *(_QWORD *)v71) >> 8)
                             + 1;
                        if ((v450 & 0xFF00) != 0)
                        {
                          v451.i32[0] = HIDWORD(*(_QWORD *)v71);
                          v452.i32[0] = v443;
                          v453 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v451.u32[0]), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v443));
                          v454 = (int32x2_t)vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v453, v453, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                          v455 = ~(v450 >> 8);
                          v456 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v431[1]), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v455));
                          v451.i32[1] = v431[1];
                          v457 = (int32x2_t)vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v456, v456, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                          v452.i32[1] = v455;
                          v458 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8(v451, (int8x8_t)0x300000003), v452);
                          v459 = vorr_s8(vorr_s8((int8x8_t)vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v458, v458, 8uLL), (int32x2_t)0x100000001), 8uLL), (int8x8_t)vzip1_s32(v454, v457)), (int8x8_t)vzip2_s32(v454, v457));
                          v449 = v459.i32[1];
                          v448 = v459.i32[0] + 0x80000000;
LABEL_492:
                          LODWORD(v444) = v449 + v448;
LABEL_493:
                          v431[1] = v444;
                        }
                      }
LABEL_494:
                      v460 = *v441++;
                      v129 = v460;
                      v71 += 8;
                      ++v45;
                      ++v431;
                      if (!--v442)
                      {
LABEL_495:
                        v45 += v575;
LABEL_600:
                        v34 = &v431[v576 + 1];
                        v32 += v577;
                        goto LABEL_546;
                      }
                    }
                  }
                  v118 = v580;
                  while (2)
                  {
                    if (v129)
                    {
                      if (v129 == 255)
                      {
                        v551 = *(_QWORD *)v71;
                        if (*(_QWORD *)v71)
                        {
                          if (*(_QWORD *)v71 == 255)
                          {
                            v551 >>= 32;
                          }
                          else
                          {
                            v562 = HIDWORD(v551);
                            v563 = ~*v71;
                            v564 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v431[1]), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v563));
                            v565 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v564, v564, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                            LODWORD(v551) = v562
                                          - 0x40000000
                                          + (v565.i32[0] | (((v431[1] & 0x3FF) * v563
                                                           + (((v431[1] & 0x3FF) * v563) >> 8)
                                                           + 1) >> 8) | v565.i32[1]);
                          }
LABEL_597:
                          v431[1] = v551;
                        }
                      }
                      else
                      {
                        v552 = *(_QWORD *)v71 * v129
                             + ((*(_QWORD *)v71 * v129) >> 8)
                             + 1;
                        if ((v552 & 0xFF00) != 0)
                        {
                          v553.i32[0] = HIDWORD(*(_QWORD *)v71);
                          v554.i32[0] = v129;
                          v555 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v553.u32[0]), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v129));
                          v556 = (int32x2_t)vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v555, v555, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                          v557 = ~(v552 >> 8);
                          v558 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v431[1]), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v557));
                          v553.i32[1] = v431[1];
                          v559 = (int32x2_t)vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v558, v558, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                          v554.i32[1] = v557;
                          v560 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8(v553, (int8x8_t)0x300000003), v554);
                          v561 = vorr_s8(vorr_s8((int8x8_t)vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v560, v560, 8uLL), (int32x2_t)0x100000001), 8uLL), (int8x8_t)vzip1_s32(v556, v559)), (int8x8_t)vzip2_s32(v556, v559));
                          LODWORD(v551) = v561.i32[1] + v561.i32[0] + 0x80000000;
                          goto LABEL_597;
                        }
                      }
                    }
                    v566 = *v441++;
                    v129 = v566;
                    v71 += 8;
                    ++v431;
                    if (!--v442)
                    {
LABEL_599:
                      v45 = 0;
                      goto LABEL_600;
                    }
                    continue;
                  }
                }
                if (!v45)
                {
                  v518 = v72 + 1;
                  v161 = (uint64_t)(v32 - 1);
                  v132 = v34 - 1;
                  v519 = v74;
                  v118 = v580;
                  while (1)
                  {
                    if (v129)
                    {
                      if (v129 == 255)
                      {
                        v520 = *(_QWORD *)v71;
                        if (*(_QWORD *)v71)
                        {
                          if (*(_QWORD *)v71 == 255)
                          {
                            v132[1] = HIDWORD(v520);
                            v521 = -1;
                          }
                          else
                          {
                            v534 = v132[1];
                            v535 = ~*v71;
                            v536.i32[0] = v534;
                            v536.i32[1] = v534 >> 20;
                            v537 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8(v536, (int8x8_t)0x300000003), vdup_n_s32(v535));
                            *(uint32x2_t *)v538.i8 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v537, v537, 8uLL), (int32x2_t)0x100000001), 8uLL);
                            v539 = ((((v534 >> 10) & 0x3FF) * v535 + ((((v534 >> 10) & 0x3FF) * v535) >> 8) + 1) >> 8) | ((unint64_t)v538.u32[0] << 32);
                            v538.i32[0] = (v535 * *(unsigned __int8 *)(v161 + 1)
                                         + ((v535 * *(unsigned __int8 *)(v161 + 1)) >> 8)
                                         + 1) >> 8;
                            v538.i64[1] = v539;
                            *(int8x8_t *)v540.i8 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(HIDWORD(v520)), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003);
                            v541 = v540.u32[0] | ((HIDWORD(v520) & 0x3FF) << 32);
                            v540.i8[0] = *(_QWORD *)v71;
                            v540.i64[1] = v541;
                            v542 = vaddq_s64(v538, v540);
                            v521 = v542.i8[0];
                            v132[1] = ((unint64_t)v542.i64[0] >> 12) & 0x3FF00000 | v542.i16[6] & 0x3FF | ((v542.i16[4] & 0x3FF) << 10) | 0xC0000000;
                          }
                          goto LABEL_573;
                        }
                      }
                      else
                      {
                        v522 = *(_QWORD *)v71;
                        v523 = *(_QWORD *)v71 * v129
                             + ((*(_QWORD *)v71 * v129) >> 8)
                             + 1;
                        if ((v523 & 0xFF00) != 0)
                        {
                          v524 = ((HIDWORD(*(_QWORD *)v71) & 0x3FF) * v129
                                + (((HIDWORD(*(_QWORD *)v71) & 0x3FF) * v129) >> 8)
                                + 1) >> 8;
                          v525 = (((((v522 >> 52) & 0x3FF) * v129 + ((((v522 >> 52) & 0x3FF) * v129) >> 8)) << 12) + 4096) & 0x3FF00000 | v524;
                          v526 = (4 * (((v522 >> 42) & 0x3FF) * v129 + ((((v522 >> 42) & 0x3FF) * v129) >> 8)) + 4) | v524;
                          v527 = v523 >> 8;
                          v528 = (v527 ^ 0xFF) * *(unsigned __int8 *)(v161 + 1);
                          v529 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v132[1]), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v527 ^ 0xFF));
                          *(uint32x2_t *)v530.i8 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v529, v529, 8uLL), (int32x2_t)0x100000001), 8uLL);
                          v531 = v530.u32[0] | ((unint64_t)(((v132[1] & 0x3FF) * (v527 ^ 0xFF)
                                                                  + (((v132[1] & 0x3FF) * (v527 ^ 0xFF)) >> 8)
                                                                  + 1) >> 8) << 32);
                          v530.i32[0] = (v528 + (v528 >> 8) + 1) >> 8;
                          v530.i64[1] = v531;
                          v532.i64[0] = v527 | ((unint64_t)(v525 >> 20) << 32);
                          v532.i32[2] = v526 >> 10;
                          v532.i8[12] = v524;
                          v532.i8[13] = BYTE1(v524);
                          v532.i8[14] = BYTE2(v524);
                          v532.i8[15] = HIBYTE(v524);
                          v533 = vaddq_s64(v530, v532);
                          v132[1] = ((unint64_t)v533.i64[0] >> 12) & 0x3FF00000 | v533.i16[6] & 0x3FF | ((v533.i16[4] & 0x3FF) << 10) | 0xC0000000;
                          v521 = v533.i8[0];
LABEL_573:
                          *(_BYTE *)(v161 + 1) = v521;
                        }
                      }
                    }
                    v543 = *v518++;
                    v129 = v543;
                    v71 += 8;
                    ++v161;
                    ++v132;
                    if (!--v519)
                    {
                      v45 = 0;
                      goto LABEL_576;
                    }
                  }
                }
                v130 = 0;
                v131 = v72 + 1;
                v132 = v34 - 1;
                v118 = v580;
                do
                {
                  if (v129)
                  {
                    v133 = v45[v130] * v129 + ((v45[v130] * v129) >> 8) + 1;
                    if (BYTE1(v133))
                    {
                      if (BYTE1(v133) == 255)
                      {
                        v134 = *(_QWORD *)&v71[8 * v130];
                        if (!(_BYTE)v134)
                          goto LABEL_121;
                        if (*(_QWORD *)&v71[8 * v130] == 255)
                        {
                          v34[v130] = HIDWORD(v134);
                          v135 = -1;
                        }
                        else
                        {
                          v152 = v34[v130];
                          v153 = ~(_BYTE)v134;
                          v154.i32[0] = v152;
                          v154.i32[1] = v152 >> 20;
                          v155 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8(v154, (int8x8_t)0x300000003), vdup_n_s32(v153));
                          *(uint32x2_t *)v156.i8 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v155, v155, 8uLL), (int32x2_t)0x100000001), 8uLL);
                          v157 = ((((v152 >> 10) & 0x3FF) * v153 + ((((v152 >> 10) & 0x3FF) * v153) >> 8) + 1) >> 8) | ((unint64_t)v156.u32[0] << 32);
                          v156.i32[0] = (v153 * v32[v130]
                                       + ((v153 * v32[v130]) >> 8)
                                       + 1) >> 8;
                          v156.i64[1] = v157;
                          *(int8x8_t *)v158.i8 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(HIDWORD(v134)), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003);
                          v159 = v158.u32[0] | ((HIDWORD(v134) & 0x3FF) << 32);
                          v158.i8[0] = v134;
                          v158.i64[1] = v159;
                          v160 = vaddq_s64(v156, v158);
                          v135 = v160.i8[0];
                          v34[v130] = ((unint64_t)v160.i64[0] >> 12) & 0x3FF00000 | v160.i16[6] & 0x3FF | ((v160.i16[4] & 0x3FF) << 10) | 0xC0000000;
                        }
                      }
                      else
                      {
                        v136 = *(_QWORD *)&v71[8 * v130];
                        v137 = v133 >> 8;
                        v138 = v136 * (v133 >> 8) + ((v136 * (v133 >> 8)) >> 8) + 1;
                        if ((v138 & 0xFF00) == 0)
                          goto LABEL_121;
                        LODWORD(v136) = (WORD2(v136) & 0x3FF) * v137 + (((WORD2(v136) & 0x3FF) * v137) >> 8) + 1;
                        v139 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(HIDWORD(v136)), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v137));
                        v140 = (int32x2_t)vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v139, v139, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                        v141 = vorr_s8((int8x8_t)v140, (int8x8_t)vdup_lane_s32(v140, 1)).u32[0] | (v136 >> 8) | 0xC0000000;
                        v142 = v34[v130];
                        v143 = BYTE1(v138);
                        v144 = v143 ^ 0xFF;
                        v140.i32[0] = v142;
                        v140.i32[1] = v142 >> 20;
                        v145 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)v140, (int8x8_t)0x300000003), vdup_n_s32(v143 ^ 0xFF));
                        *(uint32x2_t *)v146.i8 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v145, v145, 8uLL), (int32x2_t)0x100000001), 8uLL);
                        v147 = ((((v142 >> 10) & 0x3FF) * v144 + ((((v142 >> 10) & 0x3FF) * v144) >> 8) + 1) >> 8) | ((unint64_t)v146.u32[0] << 32);
                        v146.i32[0] = (v144 * v32[v130]
                                     + ((v144 * v32[v130]) >> 8)
                                     + 1) >> 8;
                        v146.i64[1] = v147;
                        v148 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v141), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003);
                        v149 = v148.u32[0] | ((unint64_t)((v136 >> 8) & 0x3FF) << 32);
                        v150.i64[0] = v143 | ((unint64_t)v148.u32[1] << 32);
                        v150.i64[1] = v149;
                        v151 = vaddq_s64(v146, v150);
                        v34[v130] = ((unint64_t)v151.i64[0] >> 12) & 0x3FF00000 | v151.i16[6] & 0x3FF | ((v151.i16[4] & 0x3FF) << 10) | 0xC0000000;
                        v135 = v151.i8[0];
                      }
                      v32[v130] = v135;
                    }
                  }
LABEL_121:
                  v129 = v131[v130++];
                  ++v132;
                }
                while (v74 != (_DWORD)v130);
                v161 = (uint64_t)&v32[v130 - 1];
                v45 += v130 + v575;
LABEL_576:
                v516 = &v132[v576];
                v517 = v161 + v577;
LABEL_577:
                v34 = v516 + 1;
                v32 = (_BYTE *)(v517 + 1);
LABEL_546:
                v108 = v579;
LABEL_547:
                v503 = v108 - 1;
                if (!v503)
                  goto LABEL_601;
                v579 = v503;
                v63 = 0;
                v43 = (v578 + 1);
                v40 = *(_QWORD *)(v39 + 128) + v118;
                v41 += *(_QWORD *)(v39 + 136);
                if (v42)
                {
                  v584 = v41;
                  v48 = v572;
                  goto LABEL_21;
                }
                continue;
              case 3:
                v162 = v74;
                v163 = v45;
                do
                {
                  v164 = *v72;
                  if (*v72)
                  {
                    if (v45)
                      v164 = ((unsigned __int16)(*v163 * (_WORD)v164
                                                                + ((*v163 * v164) >> 8)
                                                                + 1) >> 8);
                    if (v164)
                    {
                      if (v164 == 255)
                      {
                        v165 = *v32;
                        v166 = (*v71 * v165 + ((*v71 * v165) >> 8) + 1) >> 8;
                        v167 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*((_DWORD *)v71 + 1)), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v165));
                        v168 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v167, v167, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                        v169 = v168.u32[1];
                        v170 = v168.i32[0] | (((*((_DWORD *)v71 + 1) & 0x3FF) * v165
                                             + (((*((_DWORD *)v71 + 1) & 0x3FF) * v165) >> 8)
                                             + 1) >> 8);
                      }
                      else
                      {
                        v171 = *v32;
                        v172 = (v171 * v164 + ((v171 * v164) >> 8) + 1) >> 8;
                        v173 = v164 ^ 0xFF;
                        v166 = ((v172 * *v71 + ((v172 * *v71) >> 8) + 1) >> 8)
                             + ((v171 * v173 + ((v171 * v173) >> 8) + 1) >> 8);
                        if (v166 >= 0xFF)
                          LOBYTE(v166) = -1;
                        v169 = ((v172 * (*((_DWORD *)v71 + 1) & 0x3FF)
                               + ((v172 * (*((_DWORD *)v71 + 1) & 0x3FF)) >> 8)
                               + 1) >> 8)
                             + (((*v34 & 0x3FF) * v173 + (((*v34 & 0x3FF) * v173) >> 8) + 1) >> 8);
                        if (v169 >= 0x3FF)
                          v169 = 1023;
                        v174 = (uint32x2_t)vmul_s32(vdup_n_s32(v172), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*((_DWORD *)v71 + 1)), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003));
                        v175 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v34), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v173));
                        v176 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v174, v174, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v175, v175, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                        v170 = vorr_s8((int8x8_t)v176, (int8x8_t)vdup_lane_s32(v176, 1)).u32[0];
                      }
                      *v34 = v170 | v169 | 0xC0000000;
                      *v32 = v166;
                    }
                  }
                  ++v72;
                  v71 += 8;
                  v163 += v45 != 0;
                  ++v34;
                  v32 += v75;
                  --v162;
                }
                while (v162);
                goto LABEL_544;
              case 4:
                v177 = v74;
                v163 = v45;
                do
                {
                  v178 = *v72;
                  if (*v72)
                  {
                    if (v45)
                      v178 = ((unsigned __int16)(*v163 * (_WORD)v178
                                                                + ((*v163 * v178) >> 8)
                                                                + 1) >> 8);
                    if (v178)
                    {
                      if (v178 == 255)
                      {
                        v179 = *v32 ^ 0xFF;
                        v180 = (*v71 * v179 + ((*v71 * v179) >> 8) + 1) >> 8;
                        v181 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*((_DWORD *)v71 + 1)), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v179));
                        v182 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v181, v181, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                        v183 = v182.u32[1];
                        v184 = v182.i32[0] | (((*((_DWORD *)v71 + 1) & 0x3FF) * v179
                                             + (((*((_DWORD *)v71 + 1) & 0x3FF) * v179) >> 8)
                                             + 1) >> 8);
                      }
                      else
                      {
                        v185 = *v32;
                        v186 = ((v185 ^ 0xFF) * v178 + (((v185 ^ 0xFFu) * v178) >> 8) + 1) >> 8;
                        v187 = v178 ^ 0xFF;
                        v180 = ((v186 * *v71 + ((v186 * *v71) >> 8) + 1) >> 8)
                             + ((v185 * v187 + ((v185 * v187) >> 8) + 1) >> 8);
                        if (v180 >= 0xFF)
                          LOBYTE(v180) = -1;
                        v183 = ((v186 * (*((_DWORD *)v71 + 1) & 0x3FF)
                               + ((v186 * (*((_DWORD *)v71 + 1) & 0x3FF)) >> 8)
                               + 1) >> 8)
                             + (((*v34 & 0x3FF) * v187 + (((*v34 & 0x3FF) * v187) >> 8) + 1) >> 8);
                        if (v183 >= 0x3FF)
                          v183 = 1023;
                        v188 = (uint32x2_t)vmul_s32(vdup_n_s32(v186), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*((_DWORD *)v71 + 1)), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003));
                        v189 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v34), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v187));
                        v190 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v188, v188, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v189, v189, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                        v184 = vorr_s8((int8x8_t)v190, (int8x8_t)vdup_lane_s32(v190, 1)).u32[0];
                      }
                      *v34 = v184 | v183 | 0xC0000000;
                      *v32 = v180;
                    }
                  }
                  ++v72;
                  v71 += 8;
                  v163 += v45 != 0;
                  ++v34;
                  v32 += v75;
                  --v177;
                }
                while (v177);
                goto LABEL_544;
              case 5:
                v191 = v74;
                v163 = v45;
                do
                {
                  v192 = *v72;
                  if (*v72)
                  {
                    if (!v45
                      || (v193 = *v163 * v192 + ((*v163 * v192) >> 8) + 1, v192 = BYTE1(v193), BYTE1(v193)))
                    {
                      v194 = *v32;
                      v195 = (*(_QWORD *)v71 * v192
                            + ((*(_QWORD *)v71 * v192) >> 8)
                            + 1) >> 8;
                      v196 = ((*(_QWORD *)v71 >> 52) & 0x3FF) * v192;
                      v197 = ((*(_QWORD *)v71 >> 42) & 0x3FF) * v192;
                      v198 = ((HIDWORD(*(_QWORD *)v71) & 0x3FF) * v192
                            + (((HIDWORD(*(_QWORD *)v71) & 0x3FF) * v192) >> 8)
                            + 1) >> 8;
                      v199 = v195 ^ 0xFF;
                      v200 = ((v199 * v194 + ((v199 * v194) >> 8) + 1) >> 8)
                           + ((v195 * v194 + ((v195 * v194) >> 8) + 1) >> 8);
                      if (v200 >= 0xFF)
                        LOBYTE(v200) = -1;
                      v201 = ((v199 * (*v34 & 0x3FF) + ((v199 * (*v34 & 0x3FF)) >> 8) + 1) >> 8)
                           + ((v198 * v194 + ((v198 * v194) >> 8) + 1) >> 8);
                      if (v201 >= 0x3FF)
                        v201 = 1023;
                      v202.i32[0] = 1;
                      v202.i32[1] = v196 >> 8;
                      v203 = vadd_s32((int32x2_t)__PAIR64__(v196 + 1, v197), v202);
                      v202.i32[0] = vshl_n_s32(vadd_s32(v203, (int32x2_t)((v197 >> 8) | 0xC00000000)), 2uLL).u32[0];
                      v202.i32[1] = vand_s8((int8x8_t)vshl_n_s32(v203, 0xCuLL), _D0).i32[1];
                      v204 = (uint32x2_t)vmul_s32((int32x2_t)vshl_u32((uint32x2_t)vorr_s8((int8x8_t)vdup_n_s32(v198), (int8x8_t)v202), (uint32x2_t)0xFFFFFFECFFFFFFF6), vdup_n_s32(v194));
                      v205 = (uint32x2_t)vmul_s32(vdup_n_s32(v199), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v34), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003));
                      v206 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v204, v204, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v205, v205, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                      *v34 = vorr_s8((int8x8_t)v206, (int8x8_t)vdup_lane_s32(v206, 1)).u32[0] | v201 | 0xC0000000;
                      *v32 = v200;
                    }
                  }
                  ++v72;
                  v71 += 8;
                  v163 += v45 != 0;
                  ++v34;
                  v32 += v75;
                  --v191;
                }
                while (v191);
                goto LABEL_544;
              case 6:
                v207 = v74;
                v163 = v45;
                do
                {
                  v208 = *v72;
                  if (*v72)
                  {
                    if (!v45 || (v209 = *v163 * v208 + ((*v163 * v208) >> 8) + 1, v208 = BYTE1(v209), BYTE1(v209)))
                    {
                      v210 = *v32;
                      if ((_BYTE)v210 != 0xFF)
                      {
                        if (~(_BYTE)v210 == 255)
                        {
                          LODWORD(v210) = (*v71 * v208 + ((*v71 * v208) >> 8) + 1) >> 8;
                          v211 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*((_DWORD *)v71 + 1)), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v208));
                          v212 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v211, v211, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                          v213 = v212.i32[0] | (((*((_DWORD *)v71 + 1) & 0x3FF) * v208
                                               + (((*((_DWORD *)v71 + 1) & 0x3FF) * v208) >> 8)
                                               + 1) >> 8) | v212.i32[1] | 0xC0000000;
                        }
                        else
                        {
                          v214 = (~(_BYTE)v210 * v208
                                + ((~(_BYTE)v210 * v208) >> 8)
                                + 1) >> 8;
                          v215 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*((_DWORD *)v71 + 1)), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v214));
                          *(uint32x2_t *)v216.i8 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v215, v215, 8uLL), (int32x2_t)0x100000001), 8uLL);
                          v217 = v216.u32[0] | ((unint64_t)(((*((_DWORD *)v71 + 1) & 0x3FF) * v214
                                                                  + (((*((_DWORD *)v71 + 1) & 0x3FF) * v214) >> 8)
                                                                  + 1) >> 8) << 32);
                          v216.i32[0] = (*v71 * v214 + ((*v71 * v214) >> 8) + 1) >> 8;
                          v216.i64[1] = v217;
                          v218 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v34), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003);
                          v219 = v218.u32[0] | ((unint64_t)(*v34 & 0x3FF) << 32);
                          v220.i64[0] = v210 | ((unint64_t)v218.u32[1] << 32);
                          v220.i64[1] = v219;
                          v221 = vaddq_s64(v216, v220);
                          LOBYTE(v210) = v221.i8[0];
                          v213 = ((unint64_t)v221.i64[0] >> 12) & 0x3FF00000 | v221.i16[6] & 0x3FF | ((v221.i16[4] & 0x3FF) << 10) | 0xC0000000;
                        }
                        *v34 = v213;
                        *v32 = v210;
                      }
                    }
                  }
                  ++v72;
                  v71 += 8;
                  v163 += v45 != 0;
                  ++v34;
                  v32 += v75;
                  --v207;
                }
                while (v207);
                goto LABEL_544;
              case 7:
                v222 = v45 != 0;
                if (v585)
                {
                  v223 = v74;
                  v163 = v45;
                  do
                  {
                    v224 = *v72;
                    if (*v72)
                    {
                      if (v45)
                        v224 = ((unsigned __int16)(*v163 * (_WORD)v224
                                                                  + ((*v163 * v224) >> 8)
                                                                  + 1) >> 8);
                      if (v224)
                      {
                        if (v224 == 255)
                        {
                          v225 = *v71;
                          v226 = (v225 * *v32 + ((v225 * *v32) >> 8) + 1) >> 8;
                          v227 = (uint32x2_t)vmul_s32(vdup_n_s32(v225), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v34), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003));
                          v228 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v227, v227, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                          v229 = v228.u32[1];
                          v230 = v228.i32[0] | ((v225 * (*v34 & 0x3FF) + ((v225 * (*v34 & 0x3FF)) >> 8) + 1) >> 8);
                        }
                        else
                        {
                          v231 = (*v71 * v224 + ((*v71 * v224) >> 8) + 1) >> 8;
                          v232 = v224 ^ 0xFF;
                          v226 = ((v231 * *v32 + ((v231 * *v32) >> 8) + 1) >> 8)
                               + ((*v32 * v232 + ((*v32 * v232) >> 8) + 1) >> 8);
                          if (v226 >= 0xFF)
                            LOBYTE(v226) = -1;
                          v229 = ((v231 * (*v34 & 0x3FF) + ((v231 * (*v34 & 0x3FF)) >> 8) + 1) >> 8)
                               + (((*v34 & 0x3FF) * v232 + (((*v34 & 0x3FF) * v232) >> 8) + 1) >> 8);
                          if (v229 >= 0x3FF)
                            v229 = 1023;
                          v233 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v34), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003);
                          v234 = (uint32x2_t)vmul_s32(vdup_n_s32(v231), v233);
                          v235 = (uint32x2_t)vmul_s32(v233, vdup_n_s32(v232));
                          v236 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v234, v234, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v235, v235, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                          v230 = vorr_s8((int8x8_t)v236, (int8x8_t)vdup_lane_s32(v236, 1)).u32[0];
                        }
                        *v34 = v230 | v229 | 0xC0000000;
                        *v32 = v226;
                      }
                    }
                    ++v72;
                    v71 += 8;
                    v163 += v222;
                    ++v34;
                    ++v32;
                    --v223;
                  }
                  while (v223);
                }
                else
                {
                  v461 = v74;
                  v163 = v45;
                  do
                  {
                    v462 = *v72;
                    if (*v72)
                    {
                      if (v45)
                        v462 = ((unsigned __int16)(*v163 * (_WORD)v462
                                                                  + ((*v163 * v462) >> 8)
                                                                  + 1) >> 8);
                      if (v462)
                      {
                        if (v462 == 255)
                        {
                          v463 = *v71;
                          v464 = (uint32x2_t)vmul_s32(vdup_n_s32(v463), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v34), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003));
                          v465 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v464, v464, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                          v466 = *v34
                               - (v465.i32[0] | ((v463 * (*v34 & 0x3FF) + ((v463 * (*v34 & 0x3FF)) >> 8) + 1) >> 8) | v465.i32[1])
                               + 0x40000000;
                        }
                        else
                        {
                          v467 = (*v71 * v462 + ((*v71 * v462) >> 8) + 1) >> 8;
                          v468 = v462 ^ 0xFF;
                          v469 = ((v467 * (*v34 & 0x3FF) + ((v467 * (*v34 & 0x3FF)) >> 8) + 1) >> 8)
                               + (((*v34 & 0x3FF) * v468 + (((*v34 & 0x3FF) * v468) >> 8) + 1) >> 8);
                          if (v469 >= 0x3FF)
                            v469 = 1023;
                          v470 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v34), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003);
                          v471 = (uint32x2_t)vmul_s32(vdup_n_s32(v467), v470);
                          v472 = (uint32x2_t)vmul_s32(v470, vdup_n_s32(v468));
                          v473 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v471, v471, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v472, v472, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                          v466 = vorr_s8((int8x8_t)v473, (int8x8_t)vdup_lane_s32(v473, 1)).u32[0] | v469 | 0xC0000000;
                        }
                        *v34 = v466;
                      }
                    }
                    ++v72;
                    v71 += 8;
                    v163 += v222;
                    ++v34;
                    --v461;
                  }
                  while (v461);
                }
                goto LABEL_544;
              case 8:
                v237 = v45 != 0;
                if (v585)
                {
                  v238 = v74;
                  v163 = v45;
                  do
                  {
                    v239 = *v72;
                    if (*v72)
                    {
                      if (v45)
                        v239 = ((unsigned __int16)(*v163 * (_WORD)v239
                                                                  + ((*v163 * v239) >> 8)
                                                                  + 1) >> 8);
                      if (v239)
                      {
                        if (v239 == 255)
                        {
                          v240 = *v71 ^ 0xFF;
                          v241 = (v240 * *v32 + ((v240 * *v32) >> 8) + 1) >> 8;
                          v242 = (uint32x2_t)vmul_s32(vdup_n_s32(v240), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v34), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003));
                          v243 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v242, v242, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                          v244 = v243.u32[1];
                          v245 = v243.i32[0] | ((v240 * (*v34 & 0x3FF) + ((v240 * (*v34 & 0x3FF)) >> 8) + 1) >> 8);
                        }
                        else
                        {
                          v246 = ((*v71 ^ 0xFF) * v239 + (((*v71 ^ 0xFFu) * v239) >> 8) + 1) >> 8;
                          v247 = v239 ^ 0xFF;
                          v241 = ((v246 * *v32 + ((v246 * *v32) >> 8) + 1) >> 8)
                               + ((*v32 * v247 + ((*v32 * v247) >> 8) + 1) >> 8);
                          if (v241 >= 0xFF)
                            LOBYTE(v241) = -1;
                          v244 = ((v246 * (*v34 & 0x3FF) + ((v246 * (*v34 & 0x3FF)) >> 8) + 1) >> 8)
                               + (((*v34 & 0x3FF) * v247 + (((*v34 & 0x3FF) * v247) >> 8) + 1) >> 8);
                          if (v244 >= 0x3FF)
                            v244 = 1023;
                          v248 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v34), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003);
                          v249 = (uint32x2_t)vmul_s32(vdup_n_s32(v246), v248);
                          v250 = (uint32x2_t)vmul_s32(v248, vdup_n_s32(v247));
                          v251 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v249, v249, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v250, v250, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                          v245 = vorr_s8((int8x8_t)v251, (int8x8_t)vdup_lane_s32(v251, 1)).u32[0];
                        }
                        *v34 = v245 | v244 | 0xC0000000;
                        *v32 = v241;
                      }
                    }
                    ++v72;
                    v71 += 8;
                    v163 += v237;
                    ++v34;
                    ++v32;
                    --v238;
                  }
                  while (v238);
                }
                else
                {
                  v474 = v74;
                  v163 = v45;
                  do
                  {
                    v475 = *v72;
                    if (*v72)
                    {
                      if (v45)
                        v475 = ((unsigned __int16)(*v163 * (_WORD)v475
                                                                  + ((*v163 * v475) >> 8)
                                                                  + 1) >> 8);
                      if (v475)
                      {
                        if (v475 == 255)
                        {
                          v476 = *v71 ^ 0xFF;
                          v477 = (uint32x2_t)vmul_s32(vdup_n_s32(v476), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v34), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003));
                          v478 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v477, v477, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                          v479 = *v34
                               - (v478.i32[0] | ((v476 * (*v34 & 0x3FF) + ((v476 * (*v34 & 0x3FF)) >> 8) + 1) >> 8) | v478.i32[1])
                               + 0x40000000;
                        }
                        else
                        {
                          v480 = ((*v71 ^ 0xFF) * v475 + (((*v71 ^ 0xFFu) * v475) >> 8) + 1) >> 8;
                          v481 = v475 ^ 0xFF;
                          v482 = ((v480 * (*v34 & 0x3FF) + ((v480 * (*v34 & 0x3FF)) >> 8) + 1) >> 8)
                               + (((*v34 & 0x3FF) * v481 + (((*v34 & 0x3FF) * v481) >> 8) + 1) >> 8);
                          if (v482 >= 0x3FF)
                            v482 = 1023;
                          v483 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v34), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003);
                          v484 = (uint32x2_t)vmul_s32(vdup_n_s32(v480), v483);
                          v485 = (uint32x2_t)vmul_s32(v483, vdup_n_s32(v481));
                          v486 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v484, v484, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v485, v485, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                          v479 = vorr_s8((int8x8_t)v486, (int8x8_t)vdup_lane_s32(v486, 1)).u32[0] | v482 | 0xC0000000;
                        }
                        *v34 = v479;
                      }
                    }
                    ++v72;
                    v71 += 8;
                    v163 += v237;
                    ++v34;
                    --v474;
                  }
                  while (v474);
                }
                goto LABEL_544;
              case 9:
                v252 = v74;
                v163 = v45;
                break;
              case 10:
                v273 = v74;
                v163 = v45;
                do
                {
                  v274 = *v72;
                  if (*v72)
                  {
                    if (!v45
                      || (v274 = ((unsigned __int16)(*v163 * (_WORD)v274
                                                                    + ((*v163 * v274) >> 8)
                                                                    + 1) >> 8)) != 0)
                    {
                      v275 = *v32;
                      v276 = (*(_QWORD *)v71 * v274
                            + ((*(_QWORD *)v71 * v274) >> 8)
                            + 1) >> 8;
                      v277 = ((*(_QWORD *)v71 >> 52) & 0x3FF) * v274;
                      v278 = v277 >> 8;
                      v279 = v277 + 1;
                      v280 = ((*(_QWORD *)v71 >> 42) & 0x3FF) * v274;
                      v281 = ((HIDWORD(*(_QWORD *)v71) & 0x3FF) * v274
                            + (((HIDWORD(*(_QWORD *)v71) & 0x3FF) * v274) >> 8)
                            + 1) >> 8;
                      v282 = v275 ^ 0xFF;
                      v283 = v276 * v282 + ((v276 * v282) >> 8) + 1;
                      v284 = v276 ^ 0xFF;
                      v285 = ((v284 * v275 + ((v284 * v275) >> 8) + 1) >> 8) + (v283 >> 8);
                      if (v285 >= 0xFF)
                        LOBYTE(v285) = -1;
                      v286 = ((v284 * (*v34 & 0x3FF) + ((v284 * (*v34 & 0x3FF)) >> 8) + 1) >> 8)
                           + ((v281 * v282 + ((v281 * v282) >> 8) + 1) >> 8);
                      if (v286 >= 0x3FF)
                        v286 = 1023;
                      v287.i32[0] = 1;
                      v287.i32[1] = v278;
                      v288 = vadd_s32((int32x2_t)__PAIR64__(v279, v280), v287);
                      v287.i32[0] = vshl_n_s32(vadd_s32(v288, (int32x2_t)((v280 >> 8) | 0xC00000000)), 2uLL).u32[0];
                      v287.i32[1] = vand_s8((int8x8_t)vshl_n_s32(v288, 0xCuLL), _D0).i32[1];
                      v289 = (uint32x2_t)vmul_s32((int32x2_t)vshl_u32((uint32x2_t)vorr_s8((int8x8_t)vdup_n_s32(v281), (int8x8_t)v287), (uint32x2_t)0xFFFFFFECFFFFFFF6), vdup_n_s32(v282));
                      v290 = (uint32x2_t)vmul_s32(vdup_n_s32(v284), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v34), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003));
                      v291 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v289, v289, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v290, v290, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                      *v34 = vorr_s8((int8x8_t)v291, (int8x8_t)vdup_lane_s32(v291, 1)).u32[0] | v286 | 0xC0000000;
                      *v32 = v285;
                    }
                  }
                  ++v72;
                  v71 += 8;
                  v163 += v45 != 0;
                  ++v34;
                  v32 += v75;
                  --v273;
                }
                while (v273);
                goto LABEL_544;
              case 11:
                v292 = v45 != 0;
                if (v585)
                {
                  v293 = v74;
                  v163 = v45;
                  do
                  {
                    v294 = *v72;
                    if (*v72)
                    {
                      if (!v45
                        || (v294 = ((unsigned __int16)(*v163 * (_WORD)v294
                                                                      + ((*v163 * v294) >> 8)
                                                                      + 1) >> 8)) != 0)
                      {
                        v295 = *(_QWORD *)v71 * v294
                             + ((*(_QWORD *)v71 * v294) >> 8)
                             + 1;
                        v296 = ((*(_QWORD *)v71 >> 52) & 0x3FF) * v294;
                        v297 = ((*(_QWORD *)v71 >> 42) & 0x3FF) * v294;
                        v298 = (HIDWORD(*(_QWORD *)v71) & 0x3FF) * v294
                             + (((HIDWORD(*(_QWORD *)v71) & 0x3FF) * v294) >> 8)
                             + 1;
                        v299 = (((v296 + (v296 >> 8)) << 12) + 4096) & 0x3FF00000 | (v298 >> 8);
                        v300 = (4 * (v297 + (v297 >> 8)) + 4) | (v298 >> 8);
                        v301 = *v32 + (v295 >> 8);
                        if (v301 >= 0xFF)
                          LOBYTE(v301) = -1;
                        v302 = ((*v34 >> 20) & 0x3FF) + (v299 >> 20);
                        if (v302 >= 0x3FF)
                          v302 = 1023;
                        v303 = ((*v34 >> 10) & 0x3FF) + (v300 >> 10);
                        if (v303 >= 0x3FF)
                          v303 = 1023;
                        v304 = (*v34 & 0x3FF) + (v298 >> 8);
                        if (v304 >= 0x3FF)
                          v304 = 1023;
                        *v34 = (v303 << 10) | (v302 << 20) | v304 | 0xC0000000;
                        *v32 = v301;
                      }
                    }
                    ++v72;
                    v71 += 8;
                    v163 += v292;
                    ++v34;
                    ++v32;
                    --v293;
                  }
                  while (v293);
                }
                else
                {
                  v487 = v74;
                  v163 = v45;
                  do
                  {
                    v488 = *v72;
                    if (*v72)
                    {
                      if (!v45
                        || (v488 = ((unsigned __int16)(*v163 * (_WORD)v488
                                                                      + ((*v163 * v488) >> 8)
                                                                      + 1) >> 8)) != 0)
                      {
                        v489 = ((*(_QWORD *)v71 >> 52) & 0x3FF) * v488;
                        v490 = ((*(_QWORD *)v71 >> 42) & 0x3FF) * v488;
                        v491 = (HIDWORD(*(_QWORD *)v71) & 0x3FF) * v488
                             + (((HIDWORD(*(_QWORD *)v71) & 0x3FF) * v488) >> 8)
                             + 1;
                        v492 = ((*v34 >> 20) & 0x3FF)
                             + (((((v489 + (v489 >> 8)) << 12) + 4096) & 0x3FF00000 | (v491 >> 8)) >> 20);
                        if (v492 >= 0x3FF)
                          v492 = 1023;
                        v493 = ((*v34 >> 10) & 0x3FF) + (((4 * (v490 + (v490 >> 8)) + 4) | (v491 >> 8)) >> 10);
                        if (v493 >= 0x3FF)
                          v493 = 1023;
                        v494 = (*v34 & 0x3FF) + (v491 >> 8);
                        if (v494 >= 0x3FF)
                          v494 = 1023;
                        *v34 = (v493 << 10) | (v492 << 20) | v494 | 0xC0000000;
                      }
                    }
                    ++v72;
                    v71 += 8;
                    v163 += v292;
                    ++v34;
                    --v487;
                  }
                  while (v487);
                }
                goto LABEL_544;
              case 12:
                v305 = v45 != 0;
                if (v585)
                {
                  v306 = v74;
                  v163 = v45;
                  do
                  {
                    v307 = *v72;
                    if (*v72)
                    {
                      if (!v45
                        || (v307 = ((unsigned __int16)(*v163 * (_WORD)v307
                                                                      + ((*v163 * v307) >> 8)
                                                                      + 1) >> 8)) != 0)
                      {
                        v308 = *(_QWORD *)v71 * v307
                             + ((*(_QWORD *)v71 * v307) >> 8)
                             + 1;
                        v309 = ((*(_QWORD *)v71 >> 52) & 0x3FF) * v307;
                        v310 = ((*(_QWORD *)v71 >> 42) & 0x3FF) * v307;
                        v311 = (HIDWORD(*(_QWORD *)v71) & 0x3FF) * v307
                             + (((HIDWORD(*(_QWORD *)v71) & 0x3FF) * v307) >> 8)
                             + 1;
                        v312 = (((v309 + (v309 >> 8)) << 12) + 4096) & 0x3FF00000 | (v311 >> 8);
                        v313 = (4 * (v310 + (v310 >> 8)) + 4) | (v311 >> 8);
                        v314 = *v32 + (v308 >> 8);
                        if (v314 >= 0xFF)
                          LOBYTE(v314) = -1;
                        v315 = ((*v34 >> 20) & 0x3FF) + (v312 >> 20);
                        if (v315 >= 0x3FF)
                          v315 = 1023;
                        v316 = ((*v34 >> 10) & 0x3FF) + (v313 >> 10);
                        if (v316 >= 0x3FF)
                          v316 = 1023;
                        v317 = (*v34 & 0x3FF) + (v311 >> 8);
                        if (v317 >= 0x3FF)
                          v317 = 1023;
                        *v34 = (v316 << 10) | (v315 << 20) | v317 | 0xC0000000;
                        *v32 = v314;
                      }
                    }
                    ++v72;
                    v71 += 8;
                    v163 += v305;
                    ++v34;
                    ++v32;
                    --v306;
                  }
                  while (v306);
                }
                else
                {
                  v495 = v74;
                  v163 = v45;
                  do
                  {
                    v496 = *v72;
                    if (*v72)
                    {
                      if (!v45
                        || (v496 = ((unsigned __int16)(*v163 * (_WORD)v496 + ((*v163 * v496) >> 8) + 1) >> 8)) != 0)
                      {
                        v497 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*((_DWORD *)v71 + 1)), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), vdup_n_s32(v496));
                        v498 = vand_s8((int8x8_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(v497, v497, 8uLL), (uint32x2_t)0x20000000CLL), (int32x2_t)0x400001000), (int8x8_t)0xFFC003FF00000);
                        v499 = *((_DWORD *)v71 + 1)
                             - (v498.i32[0] | (((*((_DWORD *)v71 + 1) & 0x3FF) * v496
                                              + (((*((_DWORD *)v71 + 1) & 0x3FF) * v496) >> 8)
                                              + 1) >> 8) | v498.i32[1])
                             + 0x40000000;
                        v500 = (int32x2_t)vshl_u32(vmin_u32((uint32x2_t)vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v499), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v34), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003)), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                        v501 = (int8x8_t)vdup_lane_s32(v500, 1);
                        if ((v499 & 0x3FF) + (*v34 & 0x3FF) >= 0x3FF)
                          v502 = 1023;
                        else
                          v502 = (v499 & 0x3FF) + (*v34 & 0x3FF);
                        *v34 = vorr_s8((int8x8_t)v500, v501).u32[0] | v502 | 0xC0000000;
                      }
                    }
                    ++v72;
                    v71 += 8;
                    v163 += v305;
                    ++v34;
                    --v495;
                  }
                  while (v495);
                }
                goto LABEL_544;
              case 13:
                v318 = v42;
                v319 = v41;
                v320 = v74;
                v321 = v45;
                do
                {
                  v322 = *v72;
                  if (*v72)
                  {
                    if (!v45
                      || (v322 = ((unsigned __int16)(*v321 * (_WORD)v322
                                                                    + ((*v321 * v322) >> 8)
                                                                    + 1) >> 8)) != 0)
                    {
                      v324 = *(_QWORD *)v71 * v322
                           + ((*(_QWORD *)v71 * v322) >> 8)
                           + 1;
                      if (BYTE1(v324))
                      {
                        v323 = *(_QWORD *)v71;
                        if (v585)
                        {
                          if (*v32)
                          {
                            v325 = PDAmultiplyPDA(*v34, *v32, (((WORD2(v323) & 0x3FF) * v322 + (((WORD2(v323) & 0x3FFu) * v322) >> 8) + 1) >> 8) | (4 * (((v323 >> 42) & 0x3FF) * v322 + ((((v323 >> 42) & 0x3FF) * v322) >> 8)) + 4) & 0xFC00, BYTE1(v324));
                            v75 = v587;
                          }
                          else
                          {
                            v325 = (v324 >> 8) | (((((((v323 >> 52) & 0x3FF) * v322
                                                    + ((((v323 >> 52) & 0x3FF) * v322) >> 8)) << 12)
                                                  + 4096) & 0x3FF00000 | (((WORD2(v323) & 0x3FF) * v322
                                                                         + (((WORD2(v323) & 0x3FFu) * v322) >> 8)
                                                                         + 1) >> 8) | (4
                                                                                     * (((v323 >> 42) & 0x3FF) * v322
                                                                                      + ((((v323 >> 42) & 0x3FF) * v322) >> 8))
                                                                                     + 4) & 0xFFC00 | 0xC0000000) << 32);
                          }
                          *v34 = HIDWORD(v325);
                          *v32 = v325;
                        }
                        else
                        {
                          v326 = PDAmultiplyPDA(*v34, 255, (((WORD2(v323) & 0x3FF) * v322 + (((WORD2(v323) & 0x3FFu) * v322) >> 8) + 1) >> 8) | (4 * (((v323 >> 42) & 0x3FF) * v322 + ((((v323 >> 42) & 0x3FF) * v322) >> 8)) + 4) & 0xFC00, BYTE1(v324));
                          v75 = v587;
                          *v34 = HIDWORD(v326);
                        }
                      }
                    }
                  }
                  ++v72;
                  v71 += 8;
                  v321 += v45 != 0;
                  ++v34;
                  v32 += v75;
                  --v320;
                }
                while (v320);
                goto LABEL_430;
              case 14:
                v318 = v42;
                v319 = v41;
                v327 = v74;
                v321 = v45;
                do
                {
                  v328 = *v72;
                  if (*v72)
                  {
                    if (!v45
                      || (v328 = ((unsigned __int16)(*v321 * (_WORD)v328
                                                                    + ((*v321 * v328) >> 8)
                                                                    + 1) >> 8)) != 0)
                    {
                      v330 = *(_QWORD *)v71 * v328
                           + ((*(_QWORD *)v71 * v328) >> 8)
                           + 1;
                      if (BYTE1(v330))
                      {
                        v329 = *(_QWORD *)v71;
                        v331 = (((((v329 >> 52) & 0x3FF) * v328 + ((((v329 >> 52) & 0x3FF) * v328) >> 8)) << 12) + 4096) & 0x3FF00000 | (((WORD2(v329) & 0x3FF) * v328 + (((WORD2(v329) & 0x3FFu) * v328) >> 8) + 1) >> 8) | (4 * (((v329 >> 42) & 0x3FF) * v328 + ((((v329 >> 42) & 0x3FF) * v328) >> 8)) + 4) & 0xFFC00 | 0xC0000000;
                        if (v585)
                        {
                          if (*v32)
                          {
                            v332 = PDAscreenPDA(*v34, *v32, v331, BYTE1(v330));
                            v75 = v587;
                          }
                          else
                          {
                            v332 = (v330 >> 8) | (v331 << 32);
                          }
                          *v34 = HIDWORD(v332);
                          *v32 = v332;
                        }
                        else
                        {
                          v333 = PDAscreenPDA(*v34, 255, v331, BYTE1(v330));
                          v75 = v587;
                          *v34 = HIDWORD(v333);
                        }
                      }
                    }
                  }
                  ++v72;
                  v71 += 8;
                  v321 += v45 != 0;
                  ++v34;
                  v32 += v75;
                  --v327;
                }
                while (v327);
                goto LABEL_430;
              case 15:
                v318 = v42;
                v319 = v41;
                v334 = v74;
                v321 = v45;
                do
                {
                  v335 = *v72;
                  if (*v72)
                  {
                    if (!v45
                      || (v335 = ((unsigned __int16)(*v321 * (_WORD)v335
                                                                    + ((*v321 * v335) >> 8)
                                                                    + 1) >> 8)) != 0)
                    {
                      v337 = *(_QWORD *)v71 * v335
                           + ((*(_QWORD *)v71 * v335) >> 8)
                           + 1;
                      if (BYTE1(v337))
                      {
                        v336 = *(_QWORD *)v71;
                        v338 = (((((v336 >> 52) & 0x3FF) * v335 + ((((v336 >> 52) & 0x3FF) * v335) >> 8)) << 12) + 4096) & 0x3FF00000 | (((WORD2(v336) & 0x3FF) * v335 + (((WORD2(v336) & 0x3FFu) * v335) >> 8) + 1) >> 8) | (4 * (((v336 >> 42) & 0x3FF) * v335 + ((((v336 >> 42) & 0x3FF) * v335) >> 8)) + 4) & 0xFFC00 | 0xC0000000;
                        if (v585)
                        {
                          if (*v32)
                          {
                            v339 = PDAoverlayPDA(*v34, *v32, v338, BYTE1(v337));
                            v75 = v587;
                          }
                          else
                          {
                            v339 = (v337 >> 8) | (v338 << 32);
                          }
                          *v34 = HIDWORD(v339);
                          *v32 = v339;
                        }
                        else
                        {
                          v340 = PDAoverlayPDA(*v34, 255, v338, BYTE1(v337));
                          v75 = v587;
                          *v34 = HIDWORD(v340);
                        }
                      }
                    }
                  }
                  ++v72;
                  v71 += 8;
                  v321 += v45 != 0;
                  ++v34;
                  v32 += v75;
                  --v334;
                }
                while (v334);
                goto LABEL_430;
              case 16:
                v318 = v42;
                v319 = v41;
                v341 = v74;
                v321 = v45;
                do
                {
                  v342 = *v72;
                  if (*v72)
                  {
                    if (!v45
                      || (v342 = ((unsigned __int16)(*v321 * (_WORD)v342
                                                                    + ((*v321 * v342) >> 8)
                                                                    + 1) >> 8)) != 0)
                    {
                      v344 = *(_QWORD *)v71 * v342
                           + ((*(_QWORD *)v71 * v342) >> 8)
                           + 1;
                      if (BYTE1(v344))
                      {
                        v343 = *(_QWORD *)v71;
                        if (v585)
                        {
                          if (*v32)
                          {
                            v345 = PDAdarkenPDA(*v34, *v32, (((WORD2(v343) & 0x3FF) * v342 + (((WORD2(v343) & 0x3FFu) * v342) >> 8) + 1) >> 8) | (4 * (((v343 >> 42) & 0x3FF) * v342 + ((((v343 >> 42) & 0x3FF) * v342) >> 8)) + 4) & 0xFC00, BYTE1(v344));
                            v75 = v587;
                          }
                          else
                          {
                            v345 = (v344 >> 8) | (((((((v343 >> 52) & 0x3FF) * v342
                                                    + ((((v343 >> 52) & 0x3FF) * v342) >> 8)) << 12)
                                                  + 4096) & 0x3FF00000 | (((WORD2(v343) & 0x3FF) * v342
                                                                         + (((WORD2(v343) & 0x3FFu) * v342) >> 8)
                                                                         + 1) >> 8) | (4
                                                                                     * (((v343 >> 42) & 0x3FF) * v342
                                                                                      + ((((v343 >> 42) & 0x3FF) * v342) >> 8))
                                                                                     + 4) & 0xFFC00 | 0xC0000000) << 32);
                          }
                          *v34 = HIDWORD(v345);
                          *v32 = v345;
                        }
                        else
                        {
                          v346 = PDAdarkenPDA(*v34, 0xFFu, (((WORD2(v343) & 0x3FF) * v342 + (((WORD2(v343) & 0x3FFu) * v342) >> 8) + 1) >> 8) | (4 * (((v343 >> 42) & 0x3FF) * v342 + ((((v343 >> 42) & 0x3FF) * v342) >> 8)) + 4) & 0xFC00, BYTE1(v344));
                          v75 = v587;
                          *v34 = HIDWORD(v346);
                        }
                      }
                    }
                  }
                  ++v72;
                  v71 += 8;
                  v321 += v45 != 0;
                  ++v34;
                  v32 += v75;
                  --v341;
                }
                while (v341);
                goto LABEL_430;
              case 17:
                v318 = v42;
                v319 = v41;
                v347 = v74;
                v321 = v45;
                do
                {
                  v348 = *v72;
                  if (*v72)
                  {
                    if (!v45
                      || (v348 = ((unsigned __int16)(*v321 * (_WORD)v348
                                                                    + ((*v321 * v348) >> 8)
                                                                    + 1) >> 8)) != 0)
                    {
                      v350 = *(_QWORD *)v71 * v348
                           + ((*(_QWORD *)v71 * v348) >> 8)
                           + 1;
                      if (BYTE1(v350))
                      {
                        v349 = *(_QWORD *)v71;
                        if (v585)
                        {
                          if (*v32)
                          {
                            v351 = PDAlightenPDA(*v34, *v32, (((WORD2(v349) & 0x3FF) * v348 + (((WORD2(v349) & 0x3FFu) * v348) >> 8) + 1) >> 8) | (4 * (((v349 >> 42) & 0x3FF) * v348 + ((((v349 >> 42) & 0x3FF) * v348) >> 8)) + 4) & 0xFC00, BYTE1(v350));
                            v75 = v587;
                          }
                          else
                          {
                            v351 = (v350 >> 8) | (((((((v349 >> 52) & 0x3FF) * v348
                                                    + ((((v349 >> 52) & 0x3FF) * v348) >> 8)) << 12)
                                                  + 4096) & 0x3FF00000 | (((WORD2(v349) & 0x3FF) * v348
                                                                         + (((WORD2(v349) & 0x3FFu) * v348) >> 8)
                                                                         + 1) >> 8) | (4
                                                                                     * (((v349 >> 42) & 0x3FF) * v348
                                                                                      + ((((v349 >> 42) & 0x3FF) * v348) >> 8))
                                                                                     + 4) & 0xFFC00 | 0xC0000000) << 32);
                          }
                          *v34 = HIDWORD(v351);
                          *v32 = v351;
                        }
                        else
                        {
                          v352 = PDAlightenPDA(*v34, 0xFFu, (((WORD2(v349) & 0x3FF) * v348 + (((WORD2(v349) & 0x3FFu) * v348) >> 8) + 1) >> 8) | (4 * (((v349 >> 42) & 0x3FF) * v348 + ((((v349 >> 42) & 0x3FF) * v348) >> 8)) + 4) & 0xFC00, BYTE1(v350));
                          v75 = v587;
                          *v34 = HIDWORD(v352);
                        }
                      }
                    }
                  }
                  ++v72;
                  v71 += 8;
                  v321 += v45 != 0;
                  ++v34;
                  v32 += v75;
                  --v347;
                }
                while (v347);
                goto LABEL_430;
              case 18:
                v318 = v42;
                v319 = v41;
                v353 = v74;
                v321 = v45;
                do
                {
                  v354 = *v72;
                  if (*v72)
                  {
                    if (!v45
                      || (v354 = ((unsigned __int16)(*v321 * (_WORD)v354
                                                                    + ((*v321 * v354) >> 8)
                                                                    + 1) >> 8)) != 0)
                    {
                      v356 = *(_QWORD *)v71 * v354
                           + ((*(_QWORD *)v71 * v354) >> 8)
                           + 1;
                      if (BYTE1(v356))
                      {
                        v355 = *(_QWORD *)v71;
                        v357 = (((((v355 >> 52) & 0x3FF) * v354 + ((((v355 >> 52) & 0x3FF) * v354) >> 8)) << 12) + 4096) & 0x3FF00000 | (((WORD2(v355) & 0x3FF) * v354 + (((WORD2(v355) & 0x3FFu) * v354) >> 8) + 1) >> 8) | (4 * (((v355 >> 42) & 0x3FF) * v354 + ((((v355 >> 42) & 0x3FF) * v354) >> 8)) + 4) & 0xFFC00 | 0xC0000000;
                        if (v585)
                        {
                          if (*v32)
                          {
                            v358 = PDAcolordodgePDA(*v34, *v32, v357, BYTE1(v356));
                            v75 = v587;
                          }
                          else
                          {
                            v358 = (v356 >> 8) | (v357 << 32);
                          }
                          *v34 = HIDWORD(v358);
                          *v32 = v358;
                        }
                        else
                        {
                          v359 = PDAcolordodgePDA(*v34, 255, v357, BYTE1(v356));
                          v75 = v587;
                          *v34 = HIDWORD(v359);
                        }
                      }
                    }
                  }
                  ++v72;
                  v71 += 8;
                  v321 += v45 != 0;
                  ++v34;
                  v32 += v75;
                  --v353;
                }
                while (v353);
                goto LABEL_430;
              case 19:
                v318 = v42;
                v319 = v41;
                v360 = v74;
                v321 = v45;
                do
                {
                  v361 = *v72;
                  if (*v72)
                  {
                    if (!v45
                      || (v361 = ((unsigned __int16)(*v321 * (_WORD)v361
                                                                    + ((*v321 * v361) >> 8)
                                                                    + 1) >> 8)) != 0)
                    {
                      v363 = *(_QWORD *)v71 * v361
                           + ((*(_QWORD *)v71 * v361) >> 8)
                           + 1;
                      if (BYTE1(v363))
                      {
                        v362 = *(_QWORD *)v71;
                        v364 = (((((v362 >> 52) & 0x3FF) * v361 + ((((v362 >> 52) & 0x3FF) * v361) >> 8)) << 12) + 4096) & 0x3FF00000 | (((WORD2(v362) & 0x3FF) * v361 + (((WORD2(v362) & 0x3FFu) * v361) >> 8) + 1) >> 8) | (4 * (((v362 >> 42) & 0x3FF) * v361 + ((((v362 >> 42) & 0x3FF) * v361) >> 8)) + 4) & 0xFFC00 | 0xC0000000;
                        if (v585)
                        {
                          if (*v32)
                          {
                            v365 = PDAcolorburnPDA(*v34, *v32, v364, BYTE1(v363));
                            v75 = v587;
                          }
                          else
                          {
                            v365 = (v363 >> 8) | (v364 << 32);
                          }
                          *v34 = HIDWORD(v365);
                          *v32 = v365;
                        }
                        else
                        {
                          v366 = PDAcolorburnPDA(*v34, 255, v364, BYTE1(v363));
                          v75 = v587;
                          *v34 = HIDWORD(v366);
                        }
                      }
                    }
                  }
                  ++v72;
                  v71 += 8;
                  v321 += v45 != 0;
                  ++v34;
                  v32 += v75;
                  --v360;
                }
                while (v360);
                goto LABEL_430;
              case 20:
                v318 = v42;
                v319 = v41;
                v367 = v74;
                v321 = v45;
                do
                {
                  v368 = *v72;
                  if (*v72)
                  {
                    if (!v45
                      || (v368 = ((unsigned __int16)(*v321 * (_WORD)v368
                                                                    + ((*v321 * v368) >> 8)
                                                                    + 1) >> 8)) != 0)
                    {
                      v370 = *(_QWORD *)v71 * v368
                           + ((*(_QWORD *)v71 * v368) >> 8)
                           + 1;
                      if (BYTE1(v370))
                      {
                        v369 = *(_QWORD *)v71;
                        v371 = (((((v369 >> 52) & 0x3FF) * v368 + ((((v369 >> 52) & 0x3FF) * v368) >> 8)) << 12) + 4096) & 0x3FF00000 | (((WORD2(v369) & 0x3FF) * v368 + (((WORD2(v369) & 0x3FFu) * v368) >> 8) + 1) >> 8) | (4 * (((v369 >> 42) & 0x3FF) * v368 + ((((v369 >> 42) & 0x3FF) * v368) >> 8)) + 4) & 0xFFC00 | 0xC0000000;
                        if (v585)
                        {
                          if (*v32)
                          {
                            v372 = PDAsoftlightPDA(*v34, *v32, v371, BYTE1(v370));
                            v75 = v587;
                          }
                          else
                          {
                            v372 = (v370 >> 8) | (v371 << 32);
                          }
                          *v34 = HIDWORD(v372);
                          *v32 = v372;
                        }
                        else
                        {
                          v373 = PDAsoftlightPDA(*v34, 255, v371, BYTE1(v370));
                          v75 = v587;
                          *v34 = HIDWORD(v373);
                        }
                      }
                    }
                  }
                  ++v72;
                  v71 += 8;
                  v321 += v45 != 0;
                  ++v34;
                  v32 += v75;
                  --v367;
                }
                while (v367);
                goto LABEL_430;
              case 21:
                v318 = v42;
                v319 = v41;
                v374 = v74;
                v321 = v45;
                do
                {
                  v375 = *v72;
                  if (*v72)
                  {
                    if (!v45
                      || (v375 = ((unsigned __int16)(*v321 * (_WORD)v375
                                                                    + ((*v321 * v375) >> 8)
                                                                    + 1) >> 8)) != 0)
                    {
                      v377 = *(_QWORD *)v71 * v375
                           + ((*(_QWORD *)v71 * v375) >> 8)
                           + 1;
                      if (BYTE1(v377))
                      {
                        v376 = *(_QWORD *)v71;
                        v378 = (((((v376 >> 52) & 0x3FF) * v375 + ((((v376 >> 52) & 0x3FF) * v375) >> 8)) << 12) + 4096) & 0x3FF00000 | (((WORD2(v376) & 0x3FF) * v375 + (((WORD2(v376) & 0x3FFu) * v375) >> 8) + 1) >> 8) | (4 * (((v376 >> 42) & 0x3FF) * v375 + ((((v376 >> 42) & 0x3FF) * v375) >> 8)) + 4) & 0xFFC00 | 0xC0000000;
                        if (v585)
                        {
                          if (*v32)
                          {
                            v379 = PDAhardlightPDA(*v34, *v32, v378, BYTE1(v377));
                            v75 = v587;
                          }
                          else
                          {
                            v379 = (v377 >> 8) | (v378 << 32);
                          }
                          *v34 = HIDWORD(v379);
                          *v32 = v379;
                        }
                        else
                        {
                          v380 = PDAhardlightPDA(*v34, 255, v378, BYTE1(v377));
                          v75 = v587;
                          *v34 = HIDWORD(v380);
                        }
                      }
                    }
                  }
                  ++v72;
                  v71 += 8;
                  v321 += v45 != 0;
                  ++v34;
                  v32 += v75;
                  --v374;
                }
                while (v374);
                goto LABEL_430;
              case 22:
                v318 = v42;
                v319 = v41;
                v381 = v74;
                v321 = v45;
                do
                {
                  v382 = *v72;
                  if (*v72)
                  {
                    if (!v45
                      || (v382 = ((unsigned __int16)(*v321 * (_WORD)v382
                                                                    + ((*v321 * v382) >> 8)
                                                                    + 1) >> 8)) != 0)
                    {
                      v384 = *(_QWORD *)v71 * v382
                           + ((*(_QWORD *)v71 * v382) >> 8)
                           + 1;
                      if (BYTE1(v384))
                      {
                        v383 = *(_QWORD *)v71;
                        v385 = (((((v383 >> 52) & 0x3FF) * v382 + ((((v383 >> 52) & 0x3FF) * v382) >> 8)) << 12) + 4096) & 0x3FF00000 | (((WORD2(v383) & 0x3FF) * v382 + (((WORD2(v383) & 0x3FFu) * v382) >> 8) + 1) >> 8) | (4 * (((v383 >> 42) & 0x3FF) * v382 + ((((v383 >> 42) & 0x3FF) * v382) >> 8)) + 4) & 0xFFC00 | 0xC0000000;
                        if (v585)
                        {
                          if (*v32)
                          {
                            v386 = PDAdifferencePDA(*v34, *v32, v385, BYTE1(v384));
                            v75 = v587;
                          }
                          else
                          {
                            v386 = (v384 >> 8) | (v385 << 32);
                          }
                          *v34 = HIDWORD(v386);
                          *v32 = v386;
                        }
                        else
                        {
                          v387 = PDAdifferencePDA(*v34, 0xFFu, v385, BYTE1(v384));
                          v75 = v587;
                          *v34 = HIDWORD(v387);
                        }
                      }
                    }
                  }
                  ++v72;
                  v71 += 8;
                  v321 += v45 != 0;
                  ++v34;
                  v32 += v75;
                  --v381;
                }
                while (v381);
                goto LABEL_430;
              case 23:
                v318 = v42;
                v319 = v41;
                v388 = v74;
                v321 = v45;
                do
                {
                  v389 = *v72;
                  if (*v72)
                  {
                    if (!v45
                      || (v389 = ((unsigned __int16)(*v321 * (_WORD)v389
                                                                    + ((*v321 * v389) >> 8)
                                                                    + 1) >> 8)) != 0)
                    {
                      v391 = *(_QWORD *)v71 * v389
                           + ((*(_QWORD *)v71 * v389) >> 8)
                           + 1;
                      if (BYTE1(v391))
                      {
                        v390 = *(_QWORD *)v71;
                        v392 = (((((v390 >> 52) & 0x3FF) * v389 + ((((v390 >> 52) & 0x3FF) * v389) >> 8)) << 12) + 4096) & 0x3FF00000 | (((WORD2(v390) & 0x3FF) * v389 + (((WORD2(v390) & 0x3FFu) * v389) >> 8) + 1) >> 8) | (4 * (((v390 >> 42) & 0x3FF) * v389 + ((((v390 >> 42) & 0x3FF) * v389) >> 8)) + 4) & 0xFFC00 | 0xC0000000;
                        if (v585)
                        {
                          if (*v32)
                          {
                            v393 = PDAexclusionPDA(*v34, *v32, v392, BYTE1(v391));
                            v75 = v587;
                          }
                          else
                          {
                            v393 = (v391 >> 8) | (v392 << 32);
                          }
                          *v34 = HIDWORD(v393);
                          *v32 = v393;
                        }
                        else
                        {
                          v394 = PDAexclusionPDA(*v34, 255, v392, BYTE1(v391));
                          v75 = v587;
                          *v34 = HIDWORD(v394);
                        }
                      }
                    }
                  }
                  ++v72;
                  v71 += 8;
                  v321 += v45 != 0;
                  ++v34;
                  v32 += v75;
                  --v388;
                }
                while (v388);
                goto LABEL_430;
              case 24:
                v318 = v42;
                v319 = v41;
                v395 = v74;
                v321 = v45;
                do
                {
                  v396 = *v72;
                  if (*v72)
                  {
                    if (!v45
                      || (v396 = ((unsigned __int16)(*v321 * (_WORD)v396
                                                                    + ((*v321 * v396) >> 8)
                                                                    + 1) >> 8)) != 0)
                    {
                      v398 = *(_QWORD *)v71 * v396
                           + ((*(_QWORD *)v71 * v396) >> 8)
                           + 1;
                      if (BYTE1(v398))
                      {
                        v397 = *(_QWORD *)v71;
                        v399 = (((((v397 >> 52) & 0x3FF) * v396 + ((((v397 >> 52) & 0x3FF) * v396) >> 8)) << 12) + 4096) & 0x3FF00000 | (((WORD2(v397) & 0x3FF) * v396 + (((WORD2(v397) & 0x3FFu) * v396) >> 8) + 1) >> 8) | (4 * (((v397 >> 42) & 0x3FF) * v396 + ((((v397 >> 42) & 0x3FF) * v396) >> 8)) + 4) & 0xFFC00 | 0xC0000000;
                        if (v585)
                        {
                          if (*v32)
                          {
                            v400 = PDAhuePDA(*v34, *v32, v399, BYTE1(v398));
                            v75 = v587;
                          }
                          else
                          {
                            v400 = (v398 >> 8) | (v399 << 32);
                          }
                          *v34 = HIDWORD(v400);
                          *v32 = v400;
                        }
                        else
                        {
                          v401 = PDAhuePDA(*v34, 255, v399, BYTE1(v398));
                          v75 = v587;
                          *v34 = HIDWORD(v401);
                        }
                      }
                    }
                  }
                  ++v72;
                  v71 += 8;
                  v321 += v45 != 0;
                  ++v34;
                  v32 += v75;
                  --v395;
                }
                while (v395);
                goto LABEL_430;
              case 25:
                v318 = v42;
                v319 = v41;
                v402 = v74;
                v321 = v45;
                do
                {
                  v403 = *v72;
                  if (*v72)
                  {
                    if (!v45
                      || (v403 = ((unsigned __int16)(*v321 * (_WORD)v403
                                                                    + ((*v321 * v403) >> 8)
                                                                    + 1) >> 8)) != 0)
                    {
                      v405 = *(_QWORD *)v71 * v403
                           + ((*(_QWORD *)v71 * v403) >> 8)
                           + 1;
                      if (BYTE1(v405))
                      {
                        v404 = *(_QWORD *)v71;
                        v406 = (((((v404 >> 52) & 0x3FF) * v403 + ((((v404 >> 52) & 0x3FF) * v403) >> 8)) << 12) + 4096) & 0x3FF00000 | (((WORD2(v404) & 0x3FF) * v403 + (((WORD2(v404) & 0x3FFu) * v403) >> 8) + 1) >> 8) | (4 * (((v404 >> 42) & 0x3FF) * v403 + ((((v404 >> 42) & 0x3FF) * v403) >> 8)) + 4) & 0xFFC00 | 0xC0000000;
                        if (v585)
                        {
                          if (*v32)
                          {
                            v407 = PDAsaturationPDA(*v34, *v32, v406, BYTE1(v405));
                            v75 = v587;
                          }
                          else
                          {
                            v407 = (v405 >> 8) | (v406 << 32);
                          }
                          *v34 = HIDWORD(v407);
                          *v32 = v407;
                        }
                        else
                        {
                          v408 = PDAsaturationPDA(*v34, 255, v406, BYTE1(v405));
                          v75 = v587;
                          *v34 = HIDWORD(v408);
                        }
                      }
                    }
                  }
                  ++v72;
                  v71 += 8;
                  v321 += v45 != 0;
                  ++v34;
                  v32 += v75;
                  --v402;
                }
                while (v402);
LABEL_430:
                v45 = &v321[v575];
                goto LABEL_431;
              case 26:
                v318 = v42;
                v319 = v41;
                v409 = v74;
                v410 = v45;
                do
                {
                  v411 = *v72;
                  if (*v72)
                  {
                    if (!v45
                      || (v411 = ((unsigned __int16)(*v410 * (_WORD)v411
                                                                    + ((*v410 * v411) >> 8)
                                                                    + 1) >> 8)) != 0)
                    {
                      v413 = *(_QWORD *)v71 * v411
                           + ((*(_QWORD *)v71 * v411) >> 8)
                           + 1;
                      if (BYTE1(v413))
                      {
                        v412 = *(_QWORD *)v71;
                        v414 = (((((v412 >> 52) & 0x3FF) * v411 + ((((v412 >> 52) & 0x3FF) * v411) >> 8)) << 12) + 4096) & 0x3FF00000 | (((WORD2(v412) & 0x3FF) * v411 + (((WORD2(v412) & 0x3FFu) * v411) >> 8) + 1) >> 8) | (4 * (((v412 >> 42) & 0x3FF) * v411 + ((((v412 >> 42) & 0x3FF) * v411) >> 8)) + 4) & 0xFFC00 | 0xC0000000;
                        if (v585)
                        {
                          if (*v32)
                          {
                            v415 = PDAluminosityPDA(v414, BYTE1(v413), *v34, *v32);
                            v75 = v587;
                          }
                          else
                          {
                            v415 = (v413 >> 8) | (v414 << 32);
                          }
                          *v34 = HIDWORD(v415);
                          *v32 = v415;
                        }
                        else
                        {
                          v416 = PDAluminosityPDA(v414, BYTE1(v413), *v34, 0xFFu);
                          v75 = v587;
                          *v34 = HIDWORD(v416);
                        }
                      }
                    }
                  }
                  ++v72;
                  v71 += 8;
                  v410 += v45 != 0;
                  ++v34;
                  v32 += v75;
                  --v409;
                }
                while (v409);
                v45 = &v410[v575];
                v34 += v576;
                v32 += v577;
                v38 = v573;
                v39 = v574;
                goto LABEL_432;
              case 27:
                v318 = v42;
                v319 = v41;
                v417 = v45;
                v418 = v74;
                do
                {
                  v419 = *v72;
                  if (*v72)
                  {
                    if (!v45
                      || (v419 = ((unsigned __int16)(*v417 * (_WORD)v419
                                                                    + ((*v417 * v419) >> 8)
                                                                    + 1) >> 8)) != 0)
                    {
                      v421 = *(_QWORD *)v71 * v419
                           + ((*(_QWORD *)v71 * v419) >> 8)
                           + 1;
                      if (BYTE1(v421))
                      {
                        v420 = *(_QWORD *)v71;
                        if (v585)
                        {
                          if (*v32)
                          {
                            v422 = PDAluminosityPDA(*v34, *v32, (((WORD2(v420) & 0x3FF) * v419 + (((WORD2(v420) & 0x3FFu) * v419) >> 8) + 1) >> 8) | (4 * (((v420 >> 42) & 0x3FF) * v419 + ((((v420 >> 42) & 0x3FF) * v419) >> 8)) + 4) & 0xFC00, BYTE1(v421));
                            v75 = v587;
                          }
                          else
                          {
                            v422 = (v421 >> 8) | (((((((v420 >> 52) & 0x3FF) * v419
                                                    + ((((v420 >> 52) & 0x3FF) * v419) >> 8)) << 12)
                                                  + 4096) & 0x3FF00000 | (((WORD2(v420) & 0x3FF) * v419
                                                                         + (((WORD2(v420) & 0x3FFu) * v419) >> 8)
                                                                         + 1) >> 8) | (4
                                                                                     * (((v420 >> 42) & 0x3FF) * v419
                                                                                      + ((((v420 >> 42) & 0x3FF) * v419) >> 8))
                                                                                     + 4) & 0xFFC00 | 0xC0000000) << 32);
                          }
                          *v34 = HIDWORD(v422);
                          *v32 = v422;
                        }
                        else
                        {
                          v423 = PDAluminosityPDA(*v34, 0xFFu, (((WORD2(v420) & 0x3FF) * v419 + (((WORD2(v420) & 0x3FFu) * v419) >> 8) + 1) >> 8) | (4 * (((v420 >> 42) & 0x3FF) * v419 + ((((v420 >> 42) & 0x3FF) * v419) >> 8)) + 4) & 0xFC00, BYTE1(v421));
                          v75 = v587;
                          *v34 = HIDWORD(v423);
                        }
                      }
                    }
                  }
                  ++v72;
                  v71 += 8;
                  v417 += v45 != 0;
                  ++v34;
                  v32 += v75;
                  --v418;
                }
                while (v418);
                v45 = &v417[v575];
LABEL_431:
                v34 += v576;
                v32 += v577;
                v38 = v573;
                v39 = v574;
LABEL_432:
                v118 = v580;
                v41 = v319;
                v108 = v579;
                v42 = v318;
                v29 = v584;
                goto LABEL_547;
              default:
                goto LABEL_545;
            }
            break;
          }
          while (2)
          {
            v253 = *v72;
            if (*v72)
            {
              if (!v45)
                goto LABEL_212;
              v254 = *v163 * v253 + ((*v163 * v253) >> 8) + 1;
              if (BYTE1(v254))
              {
                v253 = v254 >> 8;
LABEL_212:
                v255 = *v32;
                v256 = *(_QWORD *)v71 * v253;
                v257 = v256 + (v256 >> 8) + 1;
                v258 = ((*(_QWORD *)v71 >> 52) & 0x3FF) * v253;
                v259 = v258 >> 8;
                v260 = v258 + 1;
                v261 = ((*(_QWORD *)v71 >> 42) & 0x3FF) * v253;
                v262 = (HIDWORD(*(_QWORD *)v71) & 0x3FF) * v253;
                v263 = (v262 + (v262 >> 8) + 1) >> 8;
                v264 = v255 ^ 0xFF;
                v265 = (~(_BYTE)v253 + BYTE1(v257));
                v266 = ((v265 * v255 + ((v265 * v255) >> 8) + 1) >> 8)
                     + (((v257 >> 8) * v264 + (((v257 >> 8) * v264) >> 8) + 1) >> 8);
                if (v266 >= 0xFF)
                  LOBYTE(v266) = -1;
                v267 = (((*v34 & 0x3FF) * v265 + (((*v34 & 0x3FF) * v265) >> 8) + 1) >> 8)
                     + ((v263 * v264 + ((v263 * v264) >> 8) + 1) >> 8);
                if (v267 >= 0x3FF)
                  v267 = 1023;
                v268.i32[0] = 1;
                v268.i32[1] = v259;
                v269 = vadd_s32((int32x2_t)__PAIR64__(v260, v261), v268);
                v268.i32[0] = vshl_n_s32(vadd_s32(v269, (int32x2_t)((v261 >> 8) | 0xC00000000)), 2uLL).u32[0];
                v268.i32[1] = vand_s8((int8x8_t)vshl_n_s32(v269, 0xCuLL), _D0).i32[1];
                v270 = (uint32x2_t)vmul_s32((int32x2_t)vshl_u32((uint32x2_t)vorr_s8((int8x8_t)vdup_n_s32(v263), (int8x8_t)v268), (uint32x2_t)0xFFFFFFECFFFFFFF6), vdup_n_s32(v264));
                v271 = (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*v34), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x300000003), vdup_n_s32(v265));
                v272 = (int32x2_t)vshl_u32(vmin_u32(vsra_n_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v270, v270, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)vadd_s32((int32x2_t)vsra_n_u32(v271, v271, 8uLL), (int32x2_t)0x100000001), 8uLL), (uint32x2_t)0x300000003), (uint32x2_t)0x140000000ALL);
                *v34 = vorr_s8((int8x8_t)v272, (int8x8_t)vdup_lane_s32(v272, 1)).u32[0] | v267 | 0xC0000000;
                *v32 = v266;
              }
            }
            ++v72;
            v71 += 8;
            v163 += v45 != 0;
            ++v34;
            v32 += v75;
            if (!--v252)
            {
LABEL_544:
              v45 = &v163[v575];
              v34 += v576;
              v32 += v577;
LABEL_545:
              v118 = v580;
              goto LABEL_546;
            }
            continue;
          }
        }
        v53 = v43;
        v54 = shape_enum_clip_scan((uint64_t)v42, (_DWORD *)v45 - 4);
        v43 = v53;
        if (!v54)
          goto LABEL_601;
      }
      v579 -= v52;
      if (v579 < 1)
      {
LABEL_601:
        if (v42)
          free(v42);
        goto LABEL_603;
      }
      v38 = v50;
      v40 += *(_QWORD *)(v574 + 128) * v52;
      v584 += *(_QWORD *)(v574 + 136) * v52;
      v34 += v568 * v52;
      v55 = v49 * v52;
      if (!*(_QWORD *)&v585)
        v55 = 0;
      v32 += v55;
      v43 = v51;
    }
  }
}

unint64_t *RGBAf16(unint64_t *result, float16x4_t a2, __n128 a3, __n128 _Q2, __n128 _Q3)
{
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  unsigned __int32 v16;
  unsigned int v17;

  __asm { FCVT            S3, H3 }
  v10 = (float)(_S3 * 255.0) + 0.5;
  v11 = 0.0;
  if (v10 >= 0.0)
    v11 = v10;
  if (v10 <= 255.0)
    v12 = v11;
  else
    v12 = 255.0;
  LODWORD(v13) = v12;
  if (v12 >= 0xFF)
    v13 = 255;
  else
    v13 = v13;
  a2.i16[1] = a3.n128_u16[0];
  __asm { FMOV            V1.2D, #0.5 }
  _D0 = (int32x2_t)vshl_u32(vmin_u32((uint32x2_t)vmovn_s64((int64x2_t)vcvtq_u64_f64(vaddq_f64(vcvtq_f64_f32(vmla_f32((float32x2_t)vdup_n_s32(0x43C00000u), (float32x2_t)vdup_n_s32(0x43FF8000u), (float32x2_t)*(_OWORD *)&vcvtq_f32_f16(a2))), _Q1))), (uint32x2_t)0x300000003), (uint32x2_t)0xA00000014);
  v16 = vorr_s8((int8x8_t)_D0, (int8x8_t)vdup_lane_s32(_D0, 1)).u32[0];
  __asm { FCVT            S0, H2 }
  v17 = ((float)((float)(*(float *)_D0.i32 * 511.0) + 384.0) + 0.5);
  if (v17 >= 0x3FF)
    v17 = 1023;
  *result = v13 | ((unint64_t)(v16 | v17) << 32) | 0xC000000000000000;
  return result;
}

uint64_t CIF10_shade(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  float32x2_t *v3;
  uint64_t v4;
  uint64_t v5;
  float32x2_t *v6;
  int *v7;
  _BOOL8 v8;
  signed int v9;
  __n128 v11;
  void *v12;
  unint64_t v13;
  _BYTE *v14;
  void *v15;
  int v16;
  int v17;
  float *v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  _BYTE *v24;
  float *v25;
  float *v26;
  _BYTE v27[36];
  _BYTE v28[16];
  uint64_t v29;
  _BYTE v30[40];
  uint64_t v31;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v5 = v4;
  v6 = v3;
  v31 = *MEMORY[0x1E0C80C00];
  v7 = *(int **)v2;
  v8 = !*(_QWORD *)&v3[12] && !*(_QWORD *)(v4 + 72) && *(float *)(v4 + 4) >= 1.0;
  v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 56) + 16 * v3->u8[0] + 8 * v8 + 4 * (*(_QWORD *)&v3[6] == 0));
  if (v9 > 27)
    return 0xFFFFFFFFLL;
  if (v3->i32[1] < 1 || v3[1].i32[0] < 1)
    return 0;
  if ((int)_blt_shade_initialize((uint64_t)v3, v4, (uint64_t)&v15, (uint64_t)v27) < 1)
    return 0xFFFFFFFFLL;
  if ((*(_DWORD *)v5 & 0xF000000) == 0x3000000)
  {
    if (*(_QWORD *)(v5 + 16))
    {
      v12 = CIF10_shade_radial_RGB;
    }
    else if (*(_QWORD *)(v5 + 24))
    {
      v12 = CIF10_shade_conic_RGB;
    }
    else if (v21 < 2)
    {
      v12 = CIF10_shade_axial_RGB;
    }
    else
    {
      v12 = CIF10_shade_custom_RGB;
    }
    v15 = v12;
    if (v25)
    {
      v24 = v30;
      _blt_shade_samples_16((uint64_t)v30, 2, 3, v25, v26, 1uLL);
    }
    v13 = v21 * v20;
    if (v21 * v20 <= 480)
    {
      v14 = v28;
      v22 = v28;
LABEL_27:
      _blt_shade_samples_16((uint64_t)v14, 2, 3, v18, v19, v13);
      if (*(_BYTE *)(v5 + 1))
        v23 = &_blt_shade_samples_noise;
      goto LABEL_29;
    }
    v14 = malloc_type_malloc(8 * v13 + 32, 0xA5C3E662uLL);
    if (v14)
    {
      v22 = v14;
      v13 = v21 * v20;
      goto LABEL_27;
    }
    return 0xFFFFFFFFLL;
  }
  if (!v15)
    return 0xFFFFFFFFLL;
LABEL_29:
  v16 = *v7;
  v17 = v16;
  CIF10_image_mark(v6, (uint64_t)&v15, v9, v11);
  if (v22 && (v22 < v28 || &v29 < v22))
    free(v22);
  return 1;
}

void CIF10_shade_radial_RGB(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  int8x16_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  int v18;
  float v19;
  float v20;
  float v21;
  char *v22;
  int8x16_t *v23;
  uint64_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  float v36;
  float v37;
  int v38;
  int v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  BOOL v56;
  float v57;
  BOOL v58;
  int v59;
  float v60;
  unsigned __int16 *v61;
  int v62;
  unsigned __int16 v63;
  unsigned __int16 v64;
  int v65;
  int v66;
  unsigned __int16 v67;
  int v68;
  char v69;
  float v70;
  float v71;
  float v72;
  unsigned __int16 *v73;
  int v74;
  float v75;
  float v76;
  float v77;
  float v79;
  float v80;
  float v81;
  int v82;
  int v83;
  uint64_t v85;
  int v86;
  int v87;
  unsigned __int16 v88;
  int v89;
  unsigned __int16 *v90;
  unsigned __int16 *v91;
  int v92;
  int v93;
  unsigned __int16 v94;
  unsigned __int16 v95;
  int v96;
  int v97;
  unsigned __int16 v98;
  int v99;
  int v100;
  unsigned __int16 v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  unsigned __int16 v107;
  unsigned __int8 v108;
  int v109;
  char v110;
  char v111;
  unsigned __int16 *v112;
  int v113;
  unsigned __int16 v114;
  unsigned __int16 v115;
  int v116;
  int v117;
  unsigned __int16 v118;
  int v119;
  uint64_t v120;
  unsigned __int16 *v121;
  int v122;
  unsigned __int16 v123;
  unsigned __int16 v124;
  unsigned __int16 *v125;
  unsigned __int16 *v126;
  int32x2_t v127;
  int32x2_t v128;
  int32x2_t v129;
  int32x2_t v130;
  int v131;
  int32x2_t v132;
  int8x8_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int32x2_t v136;

  v5 = *(float *)(a1 + 280);
  v6 = *(float *)(a1 + 284);
  v7 = *(float *)(*(_QWORD *)(a1 + 272) + 4);
  v8 = v7 * (float)a2;
  v9 = v7 * (float)(uint64_t)a3;
  v10 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v9) + (float)(v5 * v8));
  v11 = *(float *)(a1 + 300) + (float)((float)(v9 * *(float *)(a1 + 292)) + (float)(v6 * v8));
  v13 = *(_QWORD *)(a1 + 400);
  v14 = *(float *)(a1 + 336);
  v15 = *(float *)(a1 + 344);
  v16 = *(float *)(a1 + 304);
  v17 = *(float *)(a1 + 308);
  v18 = *(_DWORD *)(a1 + 324);
  v19 = *(float *)(v13 + 8);
  v20 = *(float *)(v13 + 16);
  v21 = *(float *)(v13 + 20);
  v4.i32[0] = *(_DWORD *)(v13 + 28);
  v24 = a1 + 144;
  v22 = *(char **)(a1 + 144);
  v23 = *(int8x16_t **)(v24 + 8);
  v25 = *(unsigned __int16 **)(a1 + 376);
  v26 = *(_QWORD *)(a1 + 360);
  v27 = ((unint64_t)a2 >> 8) & 0xF;
  if (v19 != 0.0 || *(float *)v4.i32 != 0.0 || v6 != 0.0)
  {
    v39 = *(_DWORD *)(a1 + 320);
    v40 = *(float *)(v13 + 12);
    v41 = *(float *)(v13 + 24);
    v42 = *(float *)(v13 + 32);
    v43 = a1 + 368;
    v44 = *(_QWORD *)(a1 + 368);
    v45 = v44 + ((a3 >> 4) & 0xF0);
    v31 = v44 == 0;
    v46 = 15;
    if (v31)
    {
      v46 = 0;
      v27 = 0;
    }
    else
    {
      v43 = v45;
    }
    v47 = -v41;
    v48 = v17 - v16;
    while (1)
    {
      v49 = v47 + (float)((float)(v10 + v10) * v19);
      v50 = (float)((float)(v11 * v11) + (float)(v10 * v10)) - *(float *)v4.i32;
      if (v21 == 0.0)
      {
        v57 = v50 / v49;
      }
      else
      {
        v51 = (float)((float)(v21 * -4.0) * v50) + (float)(v49 * v49);
        if (v51 < 0.0)
          goto LABEL_54;
        v52 = sqrtf(v51);
        v53 = v42 * (float)(v49 - v52);
        v54 = v49 + v52;
        v55 = v42 * v54;
        v56 = (float)(v42 * v54) <= v53;
        if ((float)(v42 * v54) <= v53)
          v57 = v42 * v54;
        else
          v57 = v53;
        if (v56)
          v55 = v53;
        if (v55 < 0.0)
        {
          v58 = v55 < v40;
LABEL_40:
          v59 = v39;
          if (v58)
            goto LABEL_54;
LABEL_41:
          if ((v59 & 0x80000000) == 0)
            goto LABEL_53;
          goto LABEL_54;
        }
        if (v55 <= 1.0)
        {
          v60 = v16 + (float)(v55 * v48);
          goto LABEL_52;
        }
        if ((v18 & 0x80000000) == 0)
        {
          v59 = v18;
          if (v55 <= v20)
          {
LABEL_53:
            v61 = (unsigned __int16 *)(v26 + 8 * v59);
            v62 = v61[1];
            v68 = *(unsigned __int8 *)(v43 + v27);
            v63 = v61[2];
            v64 = v61[3];
            v65 = v68 + *v61;
            v66 = v68 + v62;
            v67 = v68 + v63;
            LOBYTE(v68) = v68 + v64;
            goto LABEL_56;
          }
        }
      }
      if (v57 < 0.0)
      {
        v58 = v57 < v40;
        goto LABEL_40;
      }
      if (v57 > 1.0)
      {
        v59 = v18;
        if (v57 > v20)
          goto LABEL_54;
        goto LABEL_41;
      }
      v60 = v16 + (float)(v57 * v48);
LABEL_52:
      v59 = (int)(float)(v15 * (float)(v60 - v14));
      if ((v59 & 0x80000000) == 0)
        goto LABEL_53;
LABEL_54:
      if (!v25)
      {
        v69 = 0;
        goto LABEL_58;
      }
      v68 = *(unsigned __int8 *)(v43 + v27);
      v65 = v68 + *v25;
      v66 = v68 + v25[1];
      v67 = v68 + v25[2];
      LOWORD(v68) = v68 + v25[3];
LABEL_56:
      v23->i64[0] = v68 | ((unint64_t)((v65 << 14) & 0x3FF00000 | (16 * v66) & 0xFFC00 | (v67 >> 6)) << 32);
      v69 = -1;
LABEL_58:
      v27 = ((_DWORD)v27 + 1) & v46;
      v10 = v5 + v10;
      v11 = v6 + v11;
      v23 = (int8x16_t *)((char *)v23 + 8);
      *v22++ = v69;
      if (!--a4)
        return;
    }
  }
  v28 = a1 + 368;
  v29 = *(_QWORD *)(a1 + 368);
  v30 = (BYTE1(a2) + 1) & 0xF;
  v31 = v29 == 0;
  if (v29)
    v32 = v29 + ((a3 >> 4) & 0xF0);
  else
    v32 = v28;
  if (v31)
    LODWORD(v33) = 0;
  else
    LODWORD(v33) = v30;
  if (v31)
    LODWORD(v34) = 0;
  else
    LODWORD(v34) = v27;
  if (v31)
    v35 = 0;
  else
    v35 = 15;
  v36 = v11 * v11;
  v37 = -v21;
  if (v36 <= (float)-v21)
  {
    v70 = fabsf(*(float *)(v13 + 32));
    v71 = v21 * -4.0;
    v72 = v17 - v16;
    v73 = (unsigned __int16 *)(v26 + 8 * v18);
    v74 = a4 + 2;
    while (1)
    {
      v75 = v36 + (float)(v10 * v10);
      v76 = v5 + v10;
      v77 = v36 + (float)(v76 * v76);
      if (v75 > v37 && v77 > v37)
      {
        if (v18 < 0)
        {
          if (!v25)
          {
            v111 = 0;
            v110 = 0;
            goto LABEL_82;
          }
          v86 = *v25;
          v87 = v25[1];
          v88 = v25[2];
          LOWORD(v89) = v25[3];
        }
        else
        {
          v86 = *v73;
          v87 = v73[1];
          v88 = v73[2];
          LOWORD(v89) = v73[3];
        }
        v104 = *(unsigned __int8 *)(v32 + v34);
        v105 = v104 + v86;
        v106 = v104 + v87;
        v107 = v104 + v88;
        v108 = v104 + v89;
        v109 = *(unsigned __int8 *)(v32 + v33);
        v99 = v109 + v86;
        v100 = v109 + v87;
        v101 = v109 + v88;
        LOBYTE(v89) = v109 + v89;
        v102 = v108;
        v103 = (v105 << 14) & 0x3FF00000 | (16 * v106) & 0xFFC00 | (v107 >> 6);
        goto LABEL_80;
      }
      v79 = sqrtf(v71 * v77);
      v80 = v70 * sqrtf(v71 * v75);
      v81 = v70 * v79;
      v82 = (int)(float)(v15 * (float)((float)(v16 + (float)(v80 * v72)) - v14));
      v83 = (int)(float)(v15 * (float)((float)(v16 + (float)((float)(v70 * v79) * v72)) - v14));
      if (v80 <= 1.0 && v81 <= 1.0)
      {
        v90 = (unsigned __int16 *)(v26 + 8 * v82);
        v91 = (unsigned __int16 *)(v26 + 8 * v83);
        v92 = *v91;
        v93 = v91[1];
        v94 = v91[2];
        v95 = v91[3];
        LODWORD(v91) = *(unsigned __int8 *)(v32 + v34);
        v96 = (_DWORD)v91 + *v90;
        v97 = (_DWORD)v91 + v90[1];
        v98 = (_WORD)v91 + v90[2];
        LOBYTE(v102) = (_BYTE)v91 + v90[3];
        v89 = *(unsigned __int8 *)(v32 + v33);
        v99 = v89 + v92;
        v100 = v89 + v93;
        v101 = v89 + v94;
        LOBYTE(v89) = v89 + v95;
        v102 = v102;
        v103 = (v96 << 14) & 0x3FF00000 | (16 * v97) & 0xFFC00 | (v98 >> 6);
LABEL_80:
        v23->i64[0] = v102 | (v103 << 32);
        v110 = -1;
        goto LABEL_81;
      }
      if (v80 <= 1.0)
      {
        if ((v82 & 0x80000000) == 0)
        {
          v85 = 4 * v82;
LABEL_86:
          v112 = (unsigned __int16 *)(v26 + 2 * v85);
          v113 = v112[1];
          v119 = *(unsigned __int8 *)(v32 + v34);
          v114 = v112[2];
          v115 = v112[3];
          v116 = v119 + *v112;
          v117 = v119 + v113;
          v118 = v119 + v114;
          LOBYTE(v119) = v119 + v115;
          goto LABEL_89;
        }
      }
      else if (v80 <= v20)
      {
        v85 = 4 * v18;
        if ((v18 & 0x80000000) == 0)
          goto LABEL_86;
      }
      if (!v25)
      {
        v110 = 0;
        goto LABEL_90;
      }
      v119 = *(unsigned __int8 *)(v32 + v34);
      v116 = v119 + *v25;
      v117 = v119 + v25[1];
      v118 = v119 + v25[2];
      LOWORD(v119) = v119 + v25[3];
LABEL_89:
      v23->i64[0] = v119 | ((unint64_t)((v116 << 14) & 0x3FF00000 | (16 * v117) & 0xFFC00 | (v118 >> 6)) << 32);
      v110 = -1;
LABEL_90:
      if (v81 <= 1.0)
      {
        if (v83 < 0)
          goto LABEL_97;
        v120 = 4 * v83;
      }
      else if (v81 > v20 || (v120 = 4 * v18, v18 < 0))
      {
LABEL_97:
        if (!v25)
        {
          v111 = 0;
          goto LABEL_82;
        }
        v89 = *(unsigned __int8 *)(v32 + v33);
        v99 = v89 + *v25;
        v100 = v89 + v25[1];
        v101 = v89 + v25[2];
        LOWORD(v89) = v89 + v25[3];
        goto LABEL_81;
      }
      v121 = (unsigned __int16 *)(v26 + 2 * v120);
      v122 = v121[1];
      v89 = *(unsigned __int8 *)(v32 + v33);
      v123 = v121[2];
      v124 = v121[3];
      v99 = v89 + *v121;
      v100 = v89 + v122;
      v101 = v89 + v123;
      LOBYTE(v89) = v89 + v124;
LABEL_81:
      v23->i64[1] = v89 | ((unint64_t)((v99 << 14) & 0x3FF00000 | (16 * v100) & 0xFFC00 | (v101 >> 6)) << 32);
      v111 = -1;
LABEL_82:
      v10 = v5 + v76;
      LOBYTE(v34) = (v34 + 1) & v35;
      LOBYTE(v33) = (v33 + 1) & v35;
      ++v23;
      *v22 = v110;
      v22[1] = v111;
      v22 += 2;
      v74 -= 2;
      if (v74 <= 2)
        return;
    }
  }
  if (v25 || (v18 & 0x80000000) == 0)
  {
    v125 = (unsigned __int16 *)(v26 + 8 * v18);
    if (v18 >= 0)
      v126 = v125;
    else
      v126 = v25;
    v127.i32[0] = *v126;
    v127.i32[1] = v126[1];
    v128 = vdup_n_s32(v126[2]);
    v129 = vdup_n_s32(v126[3]);
    v130 = vrev64_s32(v127);
    v131 = a4 + 4;
    do
    {
      v4.i8[0] = *(_BYTE *)(v32 + v34);
      v34 = ((_DWORD)v34 + 1) & v35;
      v4.i8[4] = *(_BYTE *)(v32 + v33);
      v132 = (int32x2_t)vand_s8(*(int8x8_t *)v4.i8, (int8x8_t)0xFF000000FFLL);
      v133 = vand_s8((int8x8_t)vadd_s32(v129, *(int32x2_t *)v4.i8), (int8x8_t)0xFF000000FFLL);
      v134.i64[0] = v133.u32[0];
      v134.i64[1] = v133.u32[1];
      v135 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_u32((uint32x2_t)vadd_s32(v132, v127), (uint32x2_t)0x40000000ELL), (int8x8_t)0xFFC003FF00000), vand_s8((int8x8_t)vshl_u32((uint32x2_t)vadd_s32(v130, v132), (uint32x2_t)0xE00000004), (int8x8_t)0x3FF00000000FFC00)), (int8x8_t)(*(_QWORD *)&vshr_n_u32((uint32x2_t)vadd_s32(v128, v132), 6uLL) & 0xFFFFFBFFFFFFFBFFLL)), 0x20uLL), v134);
      *v23 = v135;
      v33 = ((_DWORD)v33 + 1) & v35;
      v135.i8[0] = *(_BYTE *)(v32 + v34);
      v135.i8[4] = *(_BYTE *)(v32 + v33);
      v136 = (int32x2_t)vand_s8(*(int8x8_t *)v135.i8, (int8x8_t)0xFF000000FFLL);
      *(int8x8_t *)v135.i8 = vand_s8((int8x8_t)vadd_s32(v129, *(int32x2_t *)v135.i8), (int8x8_t)0xFF000000FFLL);
      v134.i64[0] = v135.u32[0];
      v134.i64[1] = v135.u32[1];
      *(_DWORD *)v22 = -1;
      v22 += 4;
      v131 -= 4;
      v4 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_u32((uint32x2_t)vadd_s32(v136, v127), (uint32x2_t)0x40000000ELL), (int8x8_t)0xFFC003FF00000), vand_s8((int8x8_t)vshl_u32((uint32x2_t)vadd_s32(v130, v136), (uint32x2_t)0xE00000004), (int8x8_t)0x3FF00000000FFC00)), (int8x8_t)(*(_QWORD *)&vshr_n_u32((uint32x2_t)vadd_s32(v128, v136), 6uLL) & 0xFFFFFBFFFFFFFBFFLL)), 0x20uLL), v134);
      v23[1] = v4;
      v23 += 2;
    }
    while (v131 > 4);
  }
  else
  {
    if (a4 >= 4)
      v38 = 4;
    else
      v38 = a4;
    bzero(v22, ((a4 - v38 + 3) & 0xFFFFFFFC) + 4);
  }
}

void CIF10_shade_conic_RGB(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float v12;
  float v13;
  float v15;
  uint64_t v16;
  unint64_t *v17;
  _BYTE *v18;
  uint64_t v19;
  float v20;
  float v21;
  unsigned int v22;
  float v23;
  unsigned int v24;
  float v25;
  BOOL v26;
  float v27;
  float v28;
  unsigned __int16 *v29;
  int v30;
  unsigned __int16 *v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  float v36;
  float v37;

  v4 = *(float *)(a1 + 280);
  v5 = *(float *)(*(_QWORD *)(a1 + 272) + 4);
  v6 = v5 * (float)a2;
  v7 = v5 * (float)a3;
  v8 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v7) + (float)(v4 * v6));
  v9 = *(_QWORD *)(a1 + 368);
  if (v9)
    v10 = v9 + (((unint64_t)a3 >> 4) & 0xF0);
  else
    v10 = a1 + 368;
  if (v9)
    v11 = 15;
  else
    v11 = 0;
  v12 = *(float *)(a1 + 284);
  v13 = *(float *)(a1 + 300) + (float)((float)(v7 * *(float *)(a1 + 292)) + (float)(v12 * v6));
  v36 = *(float *)(a1 + 336);
  v37 = *(float *)(a1 + 304);
  v15 = *(float *)(a1 + 344);
  v16 = *(_QWORD *)(a1 + 360);
  v18 = *(_BYTE **)(a1 + 144);
  v17 = *(unint64_t **)(a1 + 152);
  if (v9)
    v19 = ((unint64_t)a2 >> 8) & 0xF;
  else
    v19 = 0;
  v20 = *(float *)(a1 + 308) - *(float *)(a1 + 304);
  do
  {
    v21 = v15 * (float)((float)(v37 + (float)((float)((float)(atan2f(v13, v8) * 0.15915) + 0.5) * v20)) - v36);
    v22 = vcvtms_s32_f32(v21);
    v23 = ceilf(v21);
    v24 = vcvtms_s32_f32(v15 + v21);
    v25 = v21 - (float)(int)floorf(v21);
    if (v21 < 0.0)
      v22 = v24;
    v26 = v21 <= v15;
    v27 = ceilf(v21 - v15);
    v28 = (float)(v25 * 255.0) + 0.5;
    if (v26)
      v27 = v23;
    v29 = (unsigned __int16 *)(v16 + 2 * (int)(4 * v22));
    v30 = v29[1];
    v31 = (unsigned __int16 *)(v16 + 8 * (int)v27);
    v32 = v31[1];
    v33 = 255 - (int)v28;
    v34 = (int)v28 * *v31 + v33 * *v29;
    v35 = (int)v28 * v31[2] + v33 * v29[2];
    LODWORD(v29) = (int)v28 * v31[3] + v33 * v29[3];
    LODWORD(v31) = *(unsigned __int8 *)(v10 + v19);
    *v17++ = ((_BYTE)v31 + BYTE1(v29)) | ((unint64_t)((((_DWORD)v31 + (v34 >> 8)) << 14) & 0x3FF00000 | (16 * ((_DWORD)v31 + (((int)v28 * v32 + v33 * v30) >> 8))) & 0xFFC00 | ((unsigned __int16)((_WORD)v31 + (v35 >> 8)) >> 6)) << 32);
    v19 = ((_DWORD)v19 + 1) & v11;
    v8 = v4 + v8;
    v13 = v12 + v13;
    *v18++ = -1;
    --a4;
  }
  while (a4);
}

uint64_t CIF10_shade_custom_RGB(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  unsigned __int16 *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t *v26;
  char *v27;
  int v31;
  int v32;
  int v33;
  unsigned __int16 *v34;
  int v35;
  int v36;
  unsigned __int16 v37;
  char v38;

  v4 = *(float *)(result + 280);
  v5 = *(float *)(*(_QWORD *)(result + 272) + 4);
  v6 = v5 * (float)a2;
  v7 = v5 * (float)a3;
  v8 = *(float *)(result + 296) + (float)((float)(*(float *)(result + 288) * v7) + (float)(v4 * v6));
  v9 = result + 368;
  v10 = *(_QWORD *)(result + 368);
  v11 = 15;
  if (v10)
    v9 = v10 + (((unint64_t)a3 >> 4) & 0xF0);
  else
    v11 = 0;
  v12 = *(float *)(result + 284);
  v13 = *(float *)(result + 300) + (float)((float)(v7 * *(float *)(result + 292)) + (float)(v12 * v6));
  v14 = *(float *)(result + 304);
  v15 = *(float *)(result + 308);
  v16 = *(float *)(result + 312);
  v17 = *(float *)(result + 316);
  v18 = *(float *)(result + 336);
  v19 = *(float *)(result + 348);
  v20 = *(float *)(result + 344);
  v21 = *(float *)(result + 356);
  v22 = *(unsigned __int16 **)(result + 376);
  v23 = *(_QWORD *)(result + 360);
  v24 = 4 * *(_DWORD *)(result + 48);
  if (v10)
    v25 = ((unint64_t)a2 >> 8) & 0xF;
  else
    v25 = 0;
  v27 = *(char **)(result + 144);
  v26 = *(unint64_t **)(result + 152);
  do
  {
    if (v8 >= v14 && v13 >= v16 && v8 <= v15 && v13 <= v17)
    {
      v34 = (unsigned __int16 *)(v23
                               + 2 * v24 * (int)(float)(v21 * (float)(v13 - v19))
                               + 8 * (int)(float)(v20 * (float)(v8 - v18)));
      v35 = v34[1];
      v33 = *(unsigned __int8 *)(v9 + v25);
      v36 = v34[2];
      v37 = v34[3];
      v31 = v33 + *v34;
      v32 = v33 + v35;
      result = (v33 + v36);
      LOBYTE(v33) = v33 + v37;
      goto LABEL_21;
    }
    if (v22)
    {
      v33 = *(unsigned __int8 *)(v9 + v25);
      v31 = v33 + *v22;
      v32 = v33 + v22[1];
      result = v33 + v22[2];
      LOWORD(v33) = v33 + v22[3];
LABEL_21:
      *v26 = v33 | ((unint64_t)((v31 << 14) & 0x3FF00000 | (16 * v32) & 0xFFC00 | ((unsigned __int16)result >> 6)) << 32);
      v38 = -1;
      goto LABEL_22;
    }
    v38 = 0;
LABEL_22:
    v25 = ((_DWORD)v25 + 1) & v11;
    v8 = v4 + v8;
    v13 = v12 + v13;
    ++v26;
    *v27++ = v38;
    --a4;
  }
  while (a4);
  return result;
}

void CIF10_shade_axial_RGB(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int8x16_t v4;
  float v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  float v14;
  float v15;
  float v16;
  float v17;
  int v18;
  int v19;
  _DWORD *v20;
  int8x16_t *v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned __int16 *v32;
  int v33;
  unsigned __int16 v34;
  unsigned __int16 v35;
  int v36;
  int v37;
  unsigned __int16 v38;
  int v39;
  char v40;
  unsigned __int16 *v41;
  unsigned int v42;
  unsigned int v43;
  __int32 v44;
  int32x2_t v45;
  int32x2_t v46;
  int32x2_t v47;
  int32x2_t v48;
  int v49;
  int32x2_t v50;
  int8x8_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int32x2_t v54;
  unint64_t v55;
  int v56;

  v5 = *(float *)(a1 + 280);
  v6 = *(float *)(a1 + 296)
     + (float)((float)(*(float *)(a1 + 288) * (float)(*(float *)(*(_QWORD *)(a1 + 272) + 4) * (float)a3))
             + (float)(v5 * (float)(*(float *)(*(_QWORD *)(a1 + 272) + 4) * (float)a2)));
  v7 = a1 + 368;
  v8 = *(_QWORD *)(a1 + 368);
  v9 = ((unint64_t)a3 >> 4) & 0xF0;
  v10 = v8 + v9;
  if (v8)
    v11 = v8 + v9;
  else
    v11 = a1 + 368;
  if (v8)
    v12 = 15;
  else
    v12 = 0;
  v14 = *(float *)(a1 + 336);
  v15 = *(float *)(a1 + 344);
  v16 = *(float *)(a1 + 304);
  v17 = *(float *)(a1 + 308);
  v18 = *(_DWORD *)(a1 + 320);
  v19 = *(_DWORD *)(a1 + 324);
  v22 = a1 + 144;
  v20 = *(_DWORD **)(a1 + 144);
  v21 = *(int8x16_t **)(v22 + 8);
  v23 = *(unsigned __int16 **)(a1 + 376);
  v24 = *(_QWORD *)(a1 + 360);
  if (v5 != 0.0)
  {
    if (v8)
      v30 = (a2 >> 8) & 0xF;
    else
      LOBYTE(v30) = 0;
    while (1)
    {
      v31 = v18;
      if (v6 >= v16)
      {
        v31 = v19;
        if (v6 <= v17)
          v31 = (int)(float)(v15 * (float)(v6 - v14));
      }
      if (v31 < 0)
      {
        if (!v23)
        {
          v40 = 0;
          goto LABEL_40;
        }
        v39 = *(unsigned __int8 *)(v11 + v30);
        v36 = v39 + *v23;
        v37 = v39 + v23[1];
        v38 = v39 + v23[2];
        LOWORD(v39) = v39 + v23[3];
      }
      else
      {
        v32 = (unsigned __int16 *)(v24 + 8 * v31);
        v33 = v32[1];
        v39 = *(unsigned __int8 *)(v11 + v30);
        v34 = v32[2];
        v35 = v32[3];
        v36 = v39 + *v32;
        v37 = v39 + v33;
        v38 = v39 + v34;
        LOBYTE(v39) = v39 + v35;
      }
      v21->i64[0] = v39 | ((unint64_t)((v36 << 14) & 0x3FF00000 | (16 * v37) & 0xFFC00 | (v38 >> 6)) << 32);
      v40 = -1;
LABEL_40:
      LOBYTE(v30) = (v30 + 1) & v12;
      v6 = v5 + v6;
      v21 = (int8x16_t *)((char *)v21 + 8);
      *(_BYTE *)v20 = v40;
      v20 = (_DWORD *)((char *)v20 + 1);
      if (!--a4)
        return;
    }
  }
  if (v8)
    v25 = v10;
  else
    v25 = v7;
  if (v8)
    LODWORD(v26) = ((a2 >> 8) + 1) & 0xF;
  else
    LODWORD(v26) = 0;
  if (v8)
    LODWORD(v27) = (a2 >> 8) & 0xF;
  else
    LODWORD(v27) = 0;
  if (v8)
    v28 = 15;
  else
    v28 = 0;
  if (v6 >= v16)
  {
    v18 = v19;
    if (v6 <= v17)
      v18 = (int)(float)(v15 * (float)(v6 - v14));
  }
  if ((v18 & 0x80000000) == 0 || v23)
  {
    v41 = (unsigned __int16 *)(v24 + 8 * v18);
    if (v18 >= 0)
      v23 = v41;
    v42 = v23[3];
    v43 = v23[2];
    v45.i32[0] = *v23;
    v44 = v23[1];
    v45.i32[1] = v44;
    if (v8)
    {
      v46 = vdup_n_s32(v43);
      v47 = vdup_n_s32(v42);
      v48 = vrev64_s32(v45);
      v49 = a4 + 4;
      do
      {
        v4.i8[0] = *(_BYTE *)(v25 + v27);
        v27 = ((_DWORD)v27 + 1) & v28;
        v4.i8[4] = *(_BYTE *)(v25 + v26);
        v50 = (int32x2_t)vand_s8(*(int8x8_t *)v4.i8, (int8x8_t)0xFF000000FFLL);
        v51 = vand_s8((int8x8_t)vadd_s32(v47, *(int32x2_t *)v4.i8), (int8x8_t)0xFF000000FFLL);
        v52.i64[0] = v51.u32[0];
        v52.i64[1] = v51.u32[1];
        v53 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_u32((uint32x2_t)vadd_s32(v50, v45), (uint32x2_t)0x40000000ELL), (int8x8_t)0xFFC003FF00000), vand_s8((int8x8_t)vshl_u32((uint32x2_t)vadd_s32(v48, v50), (uint32x2_t)0xE00000004), (int8x8_t)0x3FF00000000FFC00)), (int8x8_t)(*(_QWORD *)&vshr_n_u32((uint32x2_t)vadd_s32(v46, v50), 6uLL) & 0xFFFFFBFFFFFFFBFFLL)), 0x20uLL), v52);
        *v21 = v53;
        v26 = ((_DWORD)v26 + 1) & v28;
        v53.i8[0] = *(_BYTE *)(v25 + v27);
        v53.i8[4] = *(_BYTE *)(v25 + v26);
        v54 = (int32x2_t)vand_s8(*(int8x8_t *)v53.i8, (int8x8_t)0xFF000000FFLL);
        *(int8x8_t *)v53.i8 = vand_s8((int8x8_t)vadd_s32(v47, *(int32x2_t *)v53.i8), (int8x8_t)0xFF000000FFLL);
        v52.i64[0] = v53.u32[0];
        v52.i64[1] = v53.u32[1];
        *v20++ = -1;
        v49 -= 4;
        v4 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_u32((uint32x2_t)vadd_s32(v54, v45), (uint32x2_t)0x40000000ELL), (int8x8_t)0xFFC003FF00000), vand_s8((int8x8_t)vshl_u32((uint32x2_t)vadd_s32(v48, v54), (uint32x2_t)0xE00000004), (int8x8_t)0x3FF00000000FFC00)), (int8x8_t)(*(_QWORD *)&vshr_n_u32((uint32x2_t)vadd_s32(v46, v54), 6uLL) & 0xFFFFFBFFFFFFFBFFLL)), 0x20uLL), v52);
        v21[1] = v4;
        v21 += 2;
      }
      while (v49 > 4);
    }
    else
    {
      v55 = v42 | ((unint64_t)((v43 >> 6) & 0xC00003FF | ((unsigned __int16)v45.i16[0] >> 6 << 20) | ((unsigned __int16)v44 >> 6 << 10)) << 32);
      v56 = a4 + 4;
      do
      {
        v21->i64[0] = v55;
        v21->i64[1] = v55;
        v21[1].i64[0] = v55;
        v21[1].i64[1] = v55;
        v56 -= 4;
        v21 += 2;
        *v20++ = -1;
      }
      while (v56 > 4);
    }
  }
  else
  {
    if (a4 >= 4)
      v29 = 4;
    else
      v29 = a4;
    bzero(v20, ((a4 - v29 + 3) & 0xFFFFFFFC) + 4);
  }
}

unint64_t *CIF10_sample_RGBAf16(uint64_t a1, uint64_t a2, uint64_t a3, int a4, float32x4_t a5, float32x4_t a6, __n128 a7, float32x4_t a8, double a9, double _D5)
{
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t *result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  unsigned __int16 *v40;
  unsigned int v41;
  int v42;
  int v43;
  int v44;
  unsigned __int16 *v45;
  unint64_t v46;
  float16x4_t v47;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  unsigned __int16 *v55;
  unsigned __int16 v56;
  unsigned __int16 v57;
  unsigned __int16 v58;
  _WORD *v59;
  unsigned __int16 *v60;
  float32x4_t v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  unsigned __int16 *v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v14 = *(_QWORD *)(a1 + 176);
  v69 = *(_QWORD *)(a1 + 80);
  v72 = *(unint64_t **)(a1 + 88);
  v78 = *(_QWORD *)(a1 + 120);
  v79 = *(_QWORD *)(a1 + 112);
  v68 = *(_DWORD *)(a1 + 188);
  v15 = (unint64_t *)(*(_QWORD *)(a1 + 152) - 8);
  v73 = *(_QWORD *)(a1 + 144) - 1;
  v77 = *(_QWORD *)(a1 + 40);
  v74 = *(_QWORD *)(a1 + 32);
  v75 = *(_DWORD *)(a1 + 24);
  v76 = v74 + ((*(_DWORD *)(a1 + 260) - 1) * v75) + 2 * (4 * *(_DWORD *)(a1 + 256)) - 8;
  v70 = *(_QWORD *)(a1 + 72);
  v71 = *(_QWORD *)(a1 + 64);
  while (1)
  {
    if (a3 >= v70)
    {
      result = v72;
      if (a3 <= (uint64_t)v72)
      {
        v27 = ((unint64_t)a3 >> 22) & 0x3C0;
        v28 = 0x3FFFFFFF;
        HIDWORD(v29) = HIDWORD(a3);
        v19 = a4;
        v21 = v71;
      }
      else
      {
        v23 = *(_QWORD *)(a1 + 216);
        v24 = (char *)v72 + *(_QWORD *)(a1 + 224);
        v25 = (uint64_t)&v24[(v23 >> 1) - a3];
        v19 = a4;
        v21 = v71;
        if (v25 < 1)
          goto LABEL_35;
        if (v25 >= v23)
          LODWORD(v26) = 0x3FFFFFFF;
        else
          v26 = (unint64_t)(*(_QWORD *)(a1 + 232) * v25) >> 32;
        v28 = v26 | v68;
        v29 = v24 - 0x1000000;
        v27 = 448;
      }
    }
    else
    {
      v16 = *(_QWORD *)(a1 + 216);
      v17 = v70 - *(_QWORD *)(a1 + 224);
      v18 = a3 - v17 + (v16 >> 1);
      v19 = a4;
      v21 = v71;
      result = v72;
      if (v18 < 1)
        goto LABEL_35;
      if (v18 >= v16)
        LODWORD(v22) = 0x3FFFFFFF;
      else
        v22 = (unint64_t)(*(_QWORD *)(a1 + 232) * v18) >> 32;
      v28 = v22 | v68;
      v29 = (char *)(v17 + 0x1000000);
      v27 = 512;
    }
    if (a2 >= v21)
    {
      if (a2 <= v69)
      {
        v34 = ((unint64_t)a2 >> 26) & 0x3C;
        v33 = a2;
      }
      else
      {
        v35 = *(_QWORD *)(a1 + 192);
        v36 = *(_QWORD *)(a1 + 200) + v69;
        v37 = v36 - a2 + (v35 >> 1);
        if (v37 < 1)
          goto LABEL_35;
        if (v37 < v35)
          v28 = ((v28 >> 15) * (((unint64_t)(*(_QWORD *)(a1 + 208) * v37) >> 32) >> 15)) | v68;
        v33 = v36 - 0x1000000;
        v34 = 28;
      }
    }
    else
    {
      v30 = *(_QWORD *)(a1 + 192);
      v31 = v21 - *(_QWORD *)(a1 + 200);
      v32 = a2 - v31 + (v30 >> 1);
      if (v32 < 1)
        goto LABEL_35;
      if (v32 < v30)
        v28 = ((v28 >> 15) * (((unint64_t)(*(_QWORD *)(a1 + 208) * v32) >> 32) >> 15)) | v68;
      v33 = v31 + 0x1000000;
      v34 = 32;
    }
    if (v28 >= 0x400000)
      break;
LABEL_35:
    v42 = v19 - 1;
    a2 += v79;
    a3 += v78;
    ++v15;
    *(_BYTE *)++v73 = 0;
LABEL_36:
    a4 = v42;
    if (!v42)
      return result;
  }
  v38 = v74 + SHIDWORD(v29) * (uint64_t)v75 + 8 * (v33 >> 32);
  v39 = *(unsigned __int16 **)(a1 + 32);
  v40 = (unsigned __int16 *)v76;
  if (v76 >= v38)
    v40 = (unsigned __int16 *)v38;
  if (v40 < v39)
    v40 = *(unsigned __int16 **)(a1 + 32);
  a8.i16[0] = 15360;
  if (v77)
    a8.i16[0] = v40[3];
  a8.i16[1] = v40[1];
  a8.i16[2] = *v40;
  a8.i16[3] = v40[2];
  if (!v14)
    goto LABEL_71;
  v41 = *(_DWORD *)(v14 + (v34 | v27));
LABEL_39:
  v43 = v41 & 0xF;
  v44 = HIBYTE(v41) & 3;
  switch(v43)
  {
    case 1:
      v55 = (unsigned __int16 *)(v38 + SBYTE1(v41) * (uint64_t)v75);
      if (v76 < (unint64_t)v55)
        v55 = (unsigned __int16 *)v76;
      if (v55 >= v39)
        v39 = v55;
      v56 = *v39;
      v57 = v39[1];
      v58 = v39[2];
      a6.i16[0] = 15360;
      if (v77)
        a6.i16[0] = v39[3];
      v59 = &interpolate_rgbaf16[4 * v44];
      goto LABEL_69;
    case 2:
      v60 = (unsigned __int16 *)(v38 + ((uint64_t)((unint64_t)HIWORD(v41) << 56) >> 53));
      if (v76 < (unint64_t)v60)
        v60 = (unsigned __int16 *)v76;
      if (v60 >= v39)
        v39 = v60;
      v56 = *v39;
      v57 = v39[1];
      v58 = v39[2];
      a6.i16[0] = 15360;
      if (v77)
        a6.i16[0] = v39[3];
      v59 = &interpolate_rgbaf16[4 * ((v41 >> 28) & 3)];
LABEL_69:
      LOWORD(_D5) = v59[3];
      __asm { FCVT            S5, H5 }
      v61 = vcvtq_f32_f16(*(float16x4_t *)a8.f32);
      a6.i16[1] = v57;
      a6.i16[2] = v56;
      a6.i16[3] = v58;
      a5 = vcvtq_f32_f16(*(float16x4_t *)a6.f32);
      a8 = vmlaq_n_f32(vmlsq_lane_f32(v61, v61, *(float32x2_t *)&_D5, 0), a5, *(float *)&_D5);
      goto LABEL_70;
    case 3:
      v45 = (unsigned __int16 *)(v38 + ((uint64_t)((unint64_t)HIWORD(v41) << 56) >> 53));
      if (v76 < (unint64_t)v45)
        v45 = (unsigned __int16 *)v76;
      if (v45 < v39)
        v45 = v39;
      a7.n128_u16[0] = 15360;
      if (v77)
        a7.n128_u16[0] = v45[3];
      v46 = v38 + SBYTE1(v41) * (uint64_t)v75 + 8 * SBYTE2(v41);
      if (v76 < v46)
        v46 = v76;
      if (v46 >= (unint64_t)v39)
        v39 = (unsigned __int16 *)v46;
      v47.i16[0] = 15360;
      if (v77)
        v47.i16[0] = v39[3];
      _D17.i16[0] = interpolate_rgbaf16[4 * v44 + 3];
      __asm { FCVT            S17, H17 }
      _D18.i16[0] = interpolate_rgbaf16[4 * ((v41 >> 28) & 3) + 3];
      __asm { FCVT            S18, H18 }
      a7.n128_u16[1] = v45[1];
      a7.n128_u16[2] = *v45;
      v52 = vcvtq_f32_f16(*(float16x4_t *)a8.f32);
      a7.n128_u16[3] = v45[2];
      v53 = vcvtq_f32_f16((float16x4_t)a7.n128_u64[0]);
      v47.i16[1] = v39[1];
      v47.i16[2] = *v39;
      v47.i16[3] = v39[2];
      a6 = vcvtq_f32_f16(v47);
      v54 = vmlaq_n_f32(vmlsq_lane_f32(v52, v52, _D17, 0), v53, _D17.f32[0]);
      a5 = vmlaq_n_f32(vmlsq_lane_f32(v53, v53, _D17, 0), a6, _D17.f32[0]);
      a8 = vmlaq_n_f32(vmlsq_lane_f32(v54, v54, _D18, 0), a5, _D18.f32[0]);
LABEL_70:
      *(float16x4_t *)a8.f32 = vcvt_f16_f32(a8);
      break;
  }
LABEL_71:
  v62 = 0;
  ++v15;
  v67 = v19;
  v63 = v19 - 1;
  a3 += v78;
  v64 = (unint64_t)result - a3;
  a2 += v79;
  v65 = v69 - a2;
  while (1)
  {
    a5.i16[0] = a8.i16[2];
    a6.i16[0] = a8.i16[1];
    a7.n128_u16[0] = a8.u16[3];
    result = RGBAf16(v15, *(float16x4_t *)a5.f32, (__n128)a6, a7, (__n128)a8);
    *(_BYTE *)(v73 + 1 + v62) = v28 >> 22;
    if (v63 == (_DWORD)v62)
      return result;
    if (((v64 | v65 | (a3 - v70) | (a2 - v71)) & 0x8000000000000000) != 0)
    {
      v73 += v62 + 1;
      v42 = ~(_DWORD)v62 + v67;
      goto LABEL_36;
    }
    v38 = v74 + SHIDWORD(a3) * (uint64_t)v75 + 8 * (a2 >> 32);
    v39 = *(unsigned __int16 **)(a1 + 32);
    v66 = (unsigned __int16 *)v76;
    if (v76 >= v38)
      v66 = (unsigned __int16 *)(v74 + SHIDWORD(a3) * (uint64_t)v75 + 8 * (a2 >> 32));
    if (v66 < v39)
      v66 = *(unsigned __int16 **)(a1 + 32);
    a8.i16[0] = 15360;
    if (v77)
      a8.i16[0] = v66[3];
    a8.i16[1] = v66[1];
    a8.i16[2] = *v66;
    a8.i16[3] = v66[2];
    if (v14)
    {
      v41 = *(_DWORD *)(v14 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
      if ((v41 & 0xF) != 0)
      {
        result = v72;
        v73 += v62 + 1;
        v19 = ~(_DWORD)v62 + v67;
        v28 = -1;
        goto LABEL_39;
      }
    }
    ++v62;
    ++v15;
    a3 += v78;
    v64 -= v78;
    a2 += v79;
    v65 -= v79;
    v28 = -1;
  }
}

uint64_t __init_appl_data_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = PDFXRefTableAddObject(*(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 464));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 64)
            + 8 * (int)(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))++) = result;
  return result;
}

void __emit_application_data_block_invoke(uint64_t a1, CFStringRef theString)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char __str[134];
  char buffer[128];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  CFStringGetCString(theString, buffer, 127, 0x600u);
  snprintf(__str, 0x86uLL, "%s%s", "AAPL:", buffer);
  PDFDocumentPrintNameReferencePair(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), (uint64_t)"/%N %R", (uint64_t)__str, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 64) + 8* *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)), v3, v4, v5, v6);
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

uint64_t __emit_application_data_streams_block_invoke(uint64_t a1, int a2, CFTypeRef cf)
{
  CFTypeID v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v22;

  v5 = CFGetTypeID(cf);
  result = CFDataGetTypeID();
  if (v5 == result)
  {
    v7 = PDFStreamCreateWithObjectNumber(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 64)+ 8 * *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)));
    PDFDocumentBeginObject(*v7, v7[1], v8, v9, v10, v11, v12, v13);
    PDFDocumentPrintf(*v7, (uint64_t)"<<", v14, v15, v16, v17, v18, v19, v22);
    PDFStreamBeginData((CGDataConsumerRef)v7);
    BytePtr = CFDataGetBytePtr((CFDataRef)cf);
    Length = CFDataGetLength((CFDataRef)cf);
    CGDataConsumerPutBytes(v7[3], (uint64_t)BytePtr, Length);
    PDFStreamEndData(v7);
    result = (uint64_t)PDFStreamEnd((CFDataRef *)v7);
  }
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void *__emit_thumbnail_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (CGLibraryLoadImageIODYLD_once != -1)
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_4_19707);
  if (!CGLibraryLoadImageIODYLD_handle)
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageDestinationAddImage");
  result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageDestinationAddImage");
  if (!result)
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageDestinationAddImage");
  emit_thumbnail_f_23 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))result;
  return result;
}

void *__emit_thumbnail_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (CGLibraryLoadImageIODYLD_once != -1)
    dispatch_once(&CGLibraryLoadImageIODYLD_once, &__block_literal_global_4_19707);
  if (!CGLibraryLoadImageIODYLD_handle)
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 28, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "handle != NULL", "Handle for \"%s\" failed to load", a6, a7, a8, (char)"CGImageDestinationCreateWithData");
  result = dlsym((void *)CGLibraryLoadImageIODYLD_handle, "CGImageDestinationCreateWithData");
  if (!result)
    _CGHandleAssert("CGLibraryLoadImageIOFunction", 30, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageIO.h", "ptr != NULL", "Could not find symbol \"%s\" in library handle %p", v9, v10, v11, (char)"CGImageDestinationCreateWithData");
  emit_thumbnail_f = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))result;
  return result;
}

uint64_t CGPDFNodeIsInlineContainer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_BYTE *)(a1 + 52))
    return 1;
  if (*(_DWORD *)a1 != 1 || *(uint64_t *)(a1 + 24) < 1)
    return 0;
  v2 = a1;
  while (*(_DWORD *)v2 != 517)
  {
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
      return 0;
  }
  v3 = *(_QWORD *)(v2 + 104);
  if (v3
    && (v4 = *(_QWORD *)(a1 + 16), (v4 & 0x8000000000000000) == 0)
    && *(_QWORD *)(v3 + 48) > v4
    && (v5 = *(_QWORD *)(v3 + 24)) != 0
    && (v6 = *(_QWORD *)(v5 + 24 * v4)) != 0
    && *(__int16 *)(v6 + 8) == -4)
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t CGPDFNodeGetChildCount(uint64_t result)
{
  if (result)
  {
    if ((*(_BYTE *)(result + 1) & 2) != 0)
      return *(unsigned int *)(result + 44);
    else
      return 0;
  }
  return result;
}

CGFloat CGPDFNodeInitInPage(int a1)
{
  size_t v2;
  char *v3;
  CGFloat result;

  if (a1 <= 512)
  {
    if (a1 > 257)
    {
      if (a1 == 258)
      {
        v2 = 200;
      }
      else
      {
        if (a1 != 259)
          return result;
LABEL_13:
        v2 = 120;
      }
    }
    else if (a1 == 1)
    {
      v2 = 72;
    }
    else
    {
      if (a1 != 257)
        return result;
      v2 = 208;
    }
  }
  else
  {
    switch(a1)
    {
      case 513:
      case 515:
        v2 = 112;
        break;
      case 514:
      case 516:
        goto LABEL_13;
      case 517:
        v2 = 152;
        break;
      default:
        if (a1 == 1537)
        {
          v2 = 144;
        }
        else
        {
          if (a1 != 1538)
            return result;
          v2 = 128;
        }
        break;
    }
  }
  v3 = (char *)malloc_type_calloc(v2, 1uLL, 0x2C7ACE11uLL);
  *(_DWORD *)v3 = a1;
  *((_DWORD *)v3 + 10) = 1;
  result = *(double *)&CPRangeNull;
  *((_OWORD *)v3 + 1) = CPRangeNull;
  *((_QWORD *)v3 + 4) = 0;
  *((_QWORD *)v3 + 7) = 0;
  *(_QWORD *)(v3 + 44) = 0;
  v3[52] = 0;
  if ((a1 & 0x300) != 0)
  {
    result = CGRectNull.origin.x;
    *((CGRect *)v3 + 2) = CGRectNull;
  }
  return result;
}

uint64_t CGPDFNodeRetain(uint64_t result)
{
  ++*(_DWORD *)(result + 40);
  return result;
}

void CGPDFNodeRelease(uint64_t a1)
{
  int v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  int v8;
  const void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const void *v13;
  void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;

  if (a1)
  {
    v2 = *(_DWORD *)(a1 + 40);
    if (v2)
    {
      v3 = v2 - 1;
      *(_DWORD *)(a1 + 40) = v3;
      if (!v3)
      {
        if (*(_DWORD *)(a1 + 44))
        {
          v4 = 0;
          do
          {
            v5 = *(_QWORD *)(a1 + 56);
            *(_QWORD *)(*(_QWORD *)(v5 + 8 * v4) + 8) = 0;
            CGPDFNodeRelease(*(_QWORD *)(v5 + 8 * v4++));
          }
          while (v4 < *(unsigned int *)(a1 + 44));
        }
        v6 = *(void **)(a1 + 56);
        if (v6)
          free(v6);
        if (CGPDFNodeIsInlineContainer(a1))
        {
          v7 = *(_QWORD *)(a1 + 64);
          if (v7)
          {
            *(_QWORD *)(v7 + 8) = 0;
            CGPDFNodeRelease(v7);
          }
          *(_QWORD *)(a1 + 64) = 0;
          *(_BYTE *)(a1 + 52) = 0;
        }
        CGPDFNodeRemoveSubType(a1);
        v8 = *(_DWORD *)a1;
        if (*(int *)a1 > 516)
        {
          if (v8 != 1538)
          {
            if (v8 == 1537)
            {
              v9 = *(const void **)(a1 + 120);
              if (!v9)
                goto LABEL_43;
              goto LABEL_42;
            }
            if (v8 != 517)
            {
LABEL_43:
              free((void *)a1);
              return;
            }
            *(_QWORD *)(a1 + 104) = 0;
            v10 = *(unsigned int *)(a1 + 112);
            if ((_DWORD)v10)
            {
              v11 = 0;
              v12 = 8;
              do
              {
                v13 = *(const void **)(*(_QWORD *)(a1 + 120) + v12);
                if (v13)
                {
                  CFRelease(v13);
                  v10 = *(unsigned int *)(a1 + 112);
                }
                ++v11;
                v12 += 32;
              }
              while (v11 < v10);
            }
            v14 = *(void **)(a1 + 120);
LABEL_40:
            free(v14);
            goto LABEL_43;
          }
          v9 = *(const void **)(a1 + 112);
          if (!v9)
            goto LABEL_43;
        }
        else
        {
          if (v8 != 257)
          {
            if (v8 != 258)
            {
              if (v8 != 259)
                goto LABEL_43;
              v9 = *(const void **)(a1 + 104);
              if (!v9)
                goto LABEL_43;
              goto LABEL_42;
            }
            v16 = *(const void **)(a1 + 128);
            if (v16)
              CFRelease(v16);
            v17 = *(const void **)(a1 + 168);
            if (v17)
              CFRelease(v17);
            v18 = *(const void **)(a1 + 176);
            if (v18)
              CFRelease(v18);
            v14 = *(void **)(a1 + 184);
            goto LABEL_40;
          }
          v15 = *(const void **)(a1 + 128);
          if (v15)
            CFRelease(v15);
          v9 = *(const void **)(a1 + 192);
          if (!v9)
            goto LABEL_43;
        }
LABEL_42:
        CFRelease(v9);
        goto LABEL_43;
      }
    }
  }
}

void CGPDFNodeRemoveSubType(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  int v5;
  void *v6;
  char *v7;
  uint64_t i;
  const void *v9;
  const void *v10;

  if ((*(_BYTE *)(a1 + 1) & 4) == 0)
    return;
  v2 = *(void ***)(a1 + 104);
  if (!v2)
    return;
  v3 = *(_DWORD *)v2;
  if (*(_DWORD *)v2 == 3)
  {
    free(v2[1]);
    free(v2[3]);
    v6 = v2[5];
    goto LABEL_16;
  }
  if (v3 == 2)
  {
    v7 = (char *)v2[5];
    if (!v7)
      goto LABEL_17;
    for (i = 32; i != 192; i += 40)
    {
      v9 = *(const void **)&v7[i];
      if (v9)
        CFRelease(v9);
    }
    v6 = v7;
LABEL_16:
    free(v6);
LABEL_17:
    v10 = v2[6];
    if (v10)
      CFRelease(v10);
    goto LABEL_19;
  }
  if (v3 != 1)
  {
LABEL_19:
    free(v2);
    *(_QWORD *)(a1 + 104) = 0;
    return;
  }
  v4 = *((_DWORD *)v2 + 5);
  if (!v4 || (v5 = v4 - 1, (*((_DWORD *)v2 + 5) = v5) == 0))
  {
    free(v2[3]);
    goto LABEL_19;
  }
}

uint64_t CGPDFNodeGetID(uint64_t result)
{
  if (!result)
    return -1;
  return result;
}

uint64_t CGPDFNodeGetFromID(uint64_t a1, uint64_t a2)
{
  return a2;
}

void CGPDFNodeAddChild(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  void *v10;
  void *v11;
  const void *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 && (*(_BYTE *)(a1 + 1) & 2) != 0)
  {
    v6 = *(_DWORD *)(a1 + 48);
    if (v6 <= a3)
    {
      if (v6)
        v8 = 2 * v6;
      else
        v8 = 4;
      v7 = a3 + 1;
      if (v8 <= a3 + 1)
        v9 = a3 + 1;
      else
        v9 = v8;
      v10 = malloc_type_calloc(v9, 8uLL, 0x2004093837F09uLL);
      v11 = v10;
      v12 = *(const void **)(a1 + 56);
      if (v12)
      {
        memcpy(v10, v12, 8 * *(unsigned int *)(a1 + 44));
        free(*(void **)(a1 + 56));
      }
      *(_QWORD *)(a1 + 56) = v11;
      *(_DWORD *)(a1 + 48) = v9;
    }
    else
    {
      v7 = a3 + 1;
    }
    v13 = *(_DWORD *)(a1 + 44);
    if (v13 <= a3)
      v13 = v7;
    *(_DWORD *)(a1 + 44) = v13;
    ++*(_DWORD *)(a2 + 40);
    v14 = *(_QWORD *)(a2 + 8);
    if (v14)
    {
      v15 = *(unsigned int *)(v14 + 44);
      if ((_DWORD)v15)
      {
        v16 = 0;
        v17 = -1;
        v18 = *(unsigned int *)(v14 + 44);
        do
        {
          v19 = *(_QWORD *)(v14 + 56);
          v20 = *(_QWORD *)(v19 + 8 * v16);
          if (v20 == a2)
          {
            if ((*(_BYTE *)(v14 + 1) & 2) == 0)
              goto LABEL_28;
            v21 = v15;
            if (v18 > v16)
            {
              if (v20)
              {
                *(_QWORD *)(v19 + 8 * v16) = 0;
                *(_QWORD *)(v20 + 8) = 0;
                CGPDFNodeRelease(v20);
                LODWORD(v18) = *(_DWORD *)(v14 + 44);
              }
              if ((_DWORD)v18 + v17)
              {
                memmove((void *)(*(_QWORD *)(v14 + 56) + 8 * v16), (const void *)(*(_QWORD *)(v14 + 56) + 8 * v16 + 8), 8 * (v18 + v17));
                LODWORD(v18) = *(_DWORD *)(v14 + 44);
              }
              v15 = (v18 - 1);
              *(_DWORD *)(v14 + 44) = v15;
LABEL_28:
              v21 = v15;
            }
          }
          else
          {
            v21 = v18;
          }
          ++v16;
          --v17;
          v18 = v21;
        }
        while (v16 < v21);
      }
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * a3) = a2;
    *(_QWORD *)(a2 + 8) = a1;
  }
}

uint64_t CGPDFNodeGetAncestorOfType(uint64_t result, int a2)
{
  for (; result; result = *(_QWORD *)(result + 8))
  {
    if (*(_DWORD *)result == a2)
      break;
  }
  return result;
}

void CGPDFNodeMakeSubType(uint64_t a1, int a2)
{
  int v2;
  size_t v6;
  _DWORD *v7;
  _DWORD *v8;

  v2 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 0x400) == 0)
    return;
  if (v2 == 1538)
  {
    if ((a2 & 0xFFFFFFFE) != 2)
      return;
    if (a2 == 2)
    {
      v6 = 56;
    }
    else
    {
      if (a2 != 3)
        return;
      v6 = 64;
    }
    goto LABEL_14;
  }
  if (v2 == 1537 && a2 == 1)
  {
    v6 = 48;
LABEL_14:
    v7 = malloc_type_calloc(1uLL, v6, 0x39832BCBuLL);
    if (v7)
    {
      v8 = v7;
      *v7 = a2;
      CGPDFNodeRemoveSubType(a1);
      *(_QWORD *)(a1 + 104) = v8;
    }
  }
}

unsigned int *CGPDFNodeGetType(unsigned int *result)
{
  if (result)
    return (unsigned int *)*result;
  return result;
}

uint64_t CGPDFNodeGetSubType(uint64_t result)
{
  unsigned int *v1;

  if (result)
  {
    if ((*(_BYTE *)(result + 1) & 4) != 0 && (v1 = *(unsigned int **)(result + 104)) != 0)
      return *v1;
    else
      return 0;
  }
  return result;
}

uint64_t CGPDFNodeGetParent(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 8);
  return result;
}

uint64_t CGPDFNodeGetChild(uint64_t result, unsigned int a2)
{
  if (result)
  {
    if ((*(_BYTE *)(result + 1) & 2) != 0 && *(_DWORD *)(result + 44) > a2)
      return *(_QWORD *)(*(_QWORD *)(result + 56) + 8 * a2);
    else
      return 0;
  }
  return result;
}

uint64_t CGPDFNodeGetChildIndex(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  if ((*(_BYTE *)(v1 + 1) & 2) == 0)
    return 0;
  v2 = *(unsigned int *)(v1 + 44);
  if (!(_DWORD)v2)
    return 0;
  v3 = 0;
  v4 = *(_QWORD *)(v1 + 56);
  while (*(_QWORD *)(v4 + 8 * v3) != a1)
  {
    if (v2 == ++v3)
      return 0;
  }
  return v3;
}

uint64_t CGPDFNodeGetLayout(uint64_t result)
{
  if (result)
  {
    while (*(_DWORD *)result != 517)
    {
      result = *(_QWORD *)(result + 8);
      if (!result)
        return result;
    }
    return *(_QWORD *)(result + 104);
  }
  return result;
}

double CGPDFNodeGetPageRotation(uint64_t a1)
{
  double v1;
  uint64_t v2;
  int RotationAngle;

  v1 = 0.0;
  if (a1)
  {
    while (*(_DWORD *)a1 != 517)
    {
      a1 = *(_QWORD *)(a1 + 8);
      if (!a1)
        return v1;
    }
    v2 = *(_QWORD *)(a1 + 104);
    if (v2)
    {
      RotationAngle = CGPDFPageGetRotationAngle(*(CGPDFPageRef *)(v2 + 16));
      if (RotationAngle)
        return (double)RotationAngle * -3.14159265 / 180.0;
    }
  }
  return v1;
}

double CGPDFNodeGetRotation(uint64_t a1)
{
  double result;
  uint64_t v2;
  uint64_t v3;
  uint64_t TextRange;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  __double2 v15;

  result = 0.0;
  if (a1)
  {
    if (*(_DWORD *)a1 == 1)
    {
      v2 = a1;
      while (1)
      {
        v2 = *(_QWORD *)(v2 + 8);
        if (!v2)
          break;
        if (*(_DWORD *)v2 == 517)
        {
          v3 = *(_QWORD *)(v2 + 104);
          if (v3)
          {
            TextRange = CGPDFNodeGetTextRange(a1);
            v6 = v5;
            if (v5 < 1)
            {
              v11 = 0.0;
              v9 = 0.0;
            }
            else
            {
              v7 = TextRange;
              v8 = 24 * TextRange + 8;
              v9 = 0.0;
              v10 = v5;
              v11 = 0.0;
              do
              {
                v12 = 0.0;
                if ((v7 & 0x8000000000000000) == 0 && *(_QWORD *)(v3 + 48) > v7)
                {
                  v13 = *(_QWORD *)(v3 + 24);
                  if (v13)
                  {
                    v14 = *(_QWORD *)(v13 + v8);
                    if (v14)
                      v12 = *(double *)(v14 + 40);
                  }
                }
                v15 = __sincos_stret(v12);
                v11 = v11 + v15.__cosval;
                v9 = v9 + v15.__sinval;
                v8 += 24;
                ++v7;
                --v10;
              }
              while (v10);
            }
            return atan2(v9 / (double)v6, v11 / (double)v6);
          }
          return result;
        }
      }
    }
    else
    {
      return *(double *)(a1 + 32);
    }
  }
  return result;
}

uint64_t CGPDFNodeGetTextRange(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TextRange;
  uint64_t v9;
  uint64_t v10;

  if (!a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == 0x7FFFFFFFFFFFFFFFLL && *(_QWORD *)(a1 + 24) == 0)
  {
    if ((*(_BYTE *)(a1 + 1) & 2) != 0 && (v4 = *(unsigned int *)(a1 + 44), (_DWORD)v4))
    {
      v5 = 0;
      v2 = 0;
      v6 = 0;
      v7 = 8 * v4;
      do
      {
        TextRange = CGPDFNodeGetTextRange(*(_QWORD *)(*(_QWORD *)(a1 + 56) + v5));
        v2 = CPRangeUnion(v2, v6, TextRange, v9);
        v6 = v10;
        v5 += 8;
      }
      while (v7 != v5);
    }
    else
    {
      v2 = 0;
      v6 = 0;
    }
    *(_QWORD *)(a1 + 16) = v2;
    *(_QWORD *)(a1 + 24) = v6;
  }
  return v2;
}

__n64 CGPDFNodeGetBounds(__n64 *a1)
{
  __n64 *v1;
  uint64_t v2;
  uint64_t TextRange;
  uint64_t v4;

  if (!a1)
    return (__n64)0x7FF0000000000000;
  if (a1->n64_u32[0] == 1)
  {
    v1 = a1;
    while (1)
    {
      v1 = (__n64 *)v1[1].n64_u64[0];
      if (!v1)
        break;
      if (v1->n64_u32[0] == 517)
      {
        v2 = v1[13].n64_i64[0];
        if (!v2)
          return (__n64)0x7FF0000000000000;
        TextRange = CGPDFNodeGetTextRange((uint64_t)a1);
        return CGPDFLayoutGetRectForTextRange(v2, TextRange, v4);
      }
    }
  }
  else if ((a1->n64_u32[0] & 0x300) != 0)
  {
    return a1[8];
  }
  return (__n64)0x7FF0000000000000;
}

double CGPDFNodeGetBaseline(uint64_t a1)
{
  double result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = 0.0;
  if (a1)
  {
    v2 = a1;
    while (*(_DWORD *)v2 != 517)
    {
      v2 = *(_QWORD *)(v2 + 8);
      if (!v2)
        return result;
    }
    v3 = *(_QWORD *)(v2 + 104);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      v5 = 0.0;
      if (v4 < 0)
      {
        v6 = 0.0;
      }
      else
      {
        v6 = 0.0;
        if (*(_QWORD *)(v3 + 48) > v4)
        {
          v7 = *(_QWORD *)(v3 + 24);
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 24 * v4);
            if (v8)
              v5 = *(double *)(v8 + 88);
          }
          v9 = *(_QWORD *)(v3 + 24);
          if (v9)
          {
            v10 = *(_QWORD *)(v9 + 24 * v4 + 8);
            if (v10)
              v6 = *(double *)(v10 + 48);
          }
        }
      }
      return v5 - v6;
    }
  }
  return result;
}

uint64_t CGPDFNodeGetZ(uint64_t result)
{
  if (result)
  {
    while ((*(_BYTE *)(result + 1) & 3) == 0)
    {
      result = *(_QWORD *)(result + 8);
      if (!result)
        return result;
    }
    return *(_QWORD *)(result + 96);
  }
  return result;
}

uint64_t CGPDFNodeIsLineBreakAfter(uint64_t result)
{
  if (result)
  {
    while (*(_DWORD *)result != 514)
    {
      result = *(_QWORD *)(result + 8);
      if (!result)
        return result;
    }
    return *(_BYTE *)(result + 104) != 0;
  }
  return result;
}

__CFArray *CGPDFNodeGetParagraphLinks(__n64 *a1)
{
  __CFArray *Mutable;
  __n64 *v3;
  unint64_t v4;
  uint64_t v5;
  CGPDFDictionary *v6;
  __n64 v7;
  __n64 v8;
  __n64 v9;
  __n64 v10;
  uint64_t v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  size_t i;
  CGPDFArray *v17;
  BOOL v18;
  size_t v19;
  CGPDFReal *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  CGPDFStringRef v27;
  _QWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFDictionaryRef DictionaryRepresentation;
  CGPDFStringRef v35;
  const char *v36;
  CFStringRef v37;
  CGFloat v39;
  double v40;
  CFDictionaryRef v41;
  __int128 valuePtr;
  CGPDFStringRef v43;
  char *v44;
  CGPDFDictionaryRef v45;
  CGPDFArrayRef array;
  char *__s1;
  CGPDFDictionaryRef dict;
  CGPDFArrayRef value;
  void *values[4];
  CGPDFReal v51[2];
  __int128 v52;
  uint64_t v53;
  CGPoint v54;
  CGRect v55;
  CGRect v56;

  v53 = *MEMORY[0x1E0C80C00];
  if (!a1 || a1->n64_u32[0] != 1537)
    return 0;
  Mutable = (__CFArray *)a1[15].n64_u64[0];
  if (!Mutable)
  {
    v3 = a1;
    while (v3->n64_u32[0] != 517)
    {
      v3 = (__n64 *)v3[1].n64_u64[0];
      if (!v3)
        return 0;
    }
    v4 = v3[13].n64_u64[0];
    if (!v4)
      return 0;
    v5 = *(_QWORD *)(v4 + 16);
    if (!v5)
      return 0;
    v6 = *(CGPDFDictionary **)(*(_QWORD *)(v5 + 40) + 16);
    if (!v6)
      return 0;
    value = 0;
    Mutable = 0;
    if (CGPDFDictionaryGetArray(v6, "Annots", &value))
    {
      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      v7.n64_u64[0] = CGPDFNodeGetBounds(a1).n64_u64[0];
      if (value)
      {
        v11 = *((_QWORD *)value + 2);
        if (v11)
        {
          v12 = v7.n64_f64[0];
          v13 = v8.n64_f64[0];
          v14 = v9.n64_f64[0];
          v15 = v10.n64_f64[0];
          for (i = 0; i != v11; ++i)
          {
            dict = 0;
            if (CGPDFArrayGetDictionary(value, i, &dict))
            {
              __s1 = 0;
              if (CGPDFDictionaryGetName(dict, "Subtype", (const char **)&__s1) && !strcmp(__s1, "Link"))
              {
                array = 0;
                if (CGPDFDictionaryGetArray(dict, "Rect", &array))
                {
                  v17 = array;
                  if (array)
                  {
                    if (*((_QWORD *)array + 2) == 4)
                    {
                      v18 = 0;
                      v19 = 0;
                      v20 = v51;
                      while (CGPDFArrayGetNumber(v17, v19, v20))
                      {
                        v18 = v19 > 2;
                        ++v20;
                        if (++v19 == 4)
                        {
                          v22 = v51[0];
                          v21 = v51[1];
                          v23 = *(double *)&v52 - v51[0];
                          v24 = *((double *)&v52 + 1) - v51[1];
                          goto LABEL_27;
                        }
                      }
                      if (!v18)
                        continue;
                      v24 = 0.0;
                      v21 = INFINITY;
                      v23 = 0.0;
                      v22 = INFINITY;
LABEL_27:
                      v39 = v23;
                      v40 = v24;
                      v25 = v22 + v23 * 0.5;
                      v26 = v21 + v24 * 0.5;
                      v55.origin.x = v12;
                      v55.origin.y = v13;
                      v55.size.width = v14;
                      v55.size.height = v15;
                      v54.x = v25;
                      v54.y = v26;
                      if (CGRectContainsPoint(v55, v54))
                      {
                        v44 = 0;
                        v45 = 0;
                        v43 = 0;
                        if (CGPDFDictionaryGetDictionary(dict, "A", &v45)
                          && CGPDFDictionaryGetName(v45, "S", (const char **)&v44)
                          && !strcmp(v44, "URI")
                          && CGPDFDictionaryGetString(v45, "URI", &v43))
                        {
                          v27 = v43;
                          if (v43)
                          {
                            if (*((_QWORD *)v43 + 3))
                              decrypt_string((uint64_t)v43);
                            if (*((_QWORD *)v27 + 9))
                            {
                              v28 = (_QWORD *)CGPDFSelectionCreateAtPointWithOptions(v5, 1, v25, v26);
                              valuePtr = 0uLL;
                              if (v28)
                              {
                                v29 = v28[23];
                                v30 = xmmword_185004A10;
                                if (v28[24] != v29)
                                  v30 = *(_OWORD *)(v29 + 8);
                                valuePtr = v30;
                                CFRelease(v28);
                                v31 = valuePtr;
                              }
                              else
                              {
                                v31 = -1;
                                *(_QWORD *)&valuePtr = -1;
                              }
                              *(_QWORD *)&valuePtr = v31 - CGPDFNodeGetTextRange((uint64_t)a1);
                              v32 = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
                              v33 = CFNumberCreate(0, kCFNumberCFIndexType, (char *)&valuePtr + 8);
                              v56.origin.x = v22;
                              v56.origin.y = v21;
                              v56.size.width = v39;
                              v56.size.height = v40;
                              DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v56);
                              v35 = v43;
                              if (v43)
                              {
                                if (*((_QWORD *)v43 + 3))
                                  decrypt_string((uint64_t)v43);
                                v36 = (char *)v35 + 80;
                              }
                              else
                              {
                                v36 = 0;
                              }
                              v37 = CFStringCreateWithCString(0, v36, 0x8000100u);
                              *(_OWORD *)v51 = xmmword_1E1662688;
                              v52 = *(_OWORD *)off_1E1662698;
                              values[0] = DictionaryRepresentation;
                              values[1] = (void *)v37;
                              values[2] = v32;
                              values[3] = v33;
                              v41 = CFDictionaryCreate(0, (const void **)v51, (const void **)values, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                              CFRelease(DictionaryRepresentation);
                              CFRelease(v37);
                              CFRelease(v32);
                              CFRelease(v33);
                              CFArrayAppendValue(Mutable, v41);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (CFArrayGetCount(Mutable))
      {
        a1[15].n64_u64[0] = (unint64_t)Mutable;
        return Mutable;
      }
      CFRelease(Mutable);
      return 0;
    }
  }
  return Mutable;
}

uint64_t CGPDFNodeIsHeading(uint64_t result)
{
  if (result)
  {
    while (*(_DWORD *)result != 1537)
    {
      result = *(_QWORD *)(result + 8);
      if (!result)
        return result;
    }
    return *(_BYTE *)(result + 128) != 0;
  }
  return result;
}

uint64_t CGPDFNodeIsPreformatted(uint64_t result)
{
  if (result)
  {
    while (*(_DWORD *)result != 1537)
    {
      result = *(_QWORD *)(result + 8);
      if (!result)
        return result;
    }
    return *(double *)(result + 112) != 0.0;
  }
  return result;
}

double CGPDFNodeGetPreformattedWidthUnit(uint64_t a1)
{
  double result;

  result = 0.0;
  if (a1)
  {
    while (*(_DWORD *)a1 != 1537)
    {
      a1 = *(_QWORD *)(a1 + 8);
      if (!a1)
        return result;
    }
    return *(double *)(a1 + 112);
  }
  return result;
}

uint64_t CGPDFNodeGetUserNode(uint64_t result)
{
  if (result)
  {
    if ((*(_BYTE *)(result + 1) & 1) != 0)
      return *(_QWORD *)(result + 112);
    else
      return 0;
  }
  return result;
}

uint64_t CGPDFNodeIsGraphic(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == 513)
      return 1;
    else
      return (*(_DWORD *)result >> 8) & 1;
  }
  return result;
}

uint64_t CGPDFNodeIsUsedGraphic(uint64_t result)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (result)
  {
    v1 = result;
    v2 = *(_DWORD *)result;
    v3 = *(_DWORD *)result != 513 && (*(_DWORD *)result & 0x100) == 0;
    if (v3)
      return 0;
    if ((v2 & 0x100) != 0 && *(_QWORD *)(result + 112))
      return 1;
    if ((v2 & 0x200) != 0 && (v4 = *(unsigned int *)(result + 44), (_DWORD)v4))
    {
      v5 = 0;
      do
      {
        if (v5 >= v4)
          v6 = 0;
        else
          v6 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v5);
        result = CGPDFNodeIsUsedGraphic(v6);
        if (!(_DWORD)result)
          break;
        v3 = v4 - 1 == v5++;
      }
      while (!v3);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void CGPDFNodeDrawInContext(uint64_t a1, CGContext *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a1)
  {
    v4 = *(_DWORD *)a1;
    if (*(_DWORD *)a1 == 257)
    {
      CGPDFNodeDrawImageInContext(a1, a2);
    }
    else if (v4 == 513)
    {
      v5 = *(unsigned int *)(a1 + 44);
      if ((_DWORD)v5)
      {
        v6 = 0;
        v7 = 8 * v5;
        do
        {
          CGPDFNodeDrawInContext(*(_QWORD *)(*(_QWORD *)(a1 + 56) + v6), a2);
          v6 += 8;
        }
        while (v7 != v6);
      }
    }
    else if (v4 == 258)
    {
      CGPDFNodeDrawShapeInContext(a1, a2);
    }
  }
}

void CGPDFNodeDrawShapeInContext(uint64_t a1, CGContext *a2)
{
  CGColor *v4;
  uint64_t v5;
  CGColor *v6;
  int v7;
  CGPathDrawingMode v8;
  const CGPath *ShapePath;
  const CGPath *v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[10];
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  if ((CGPDFNodeDrawPatternInContext(a1, a2, 0) & 1) != 0)
    v4 = 0;
  else
    v4 = *(CGColor **)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 184);
  if (v5 && *(_QWORD *)(v5 + 8))
  {
    v6 = 0;
    v7 = 1;
  }
  else
  {
    v7 = 0;
    v6 = *(CGColor **)(a1 + 176);
  }
  if ((unint64_t)v4 | (unint64_t)v6)
  {
    CGContextSaveGState(a2);
    CGPDFNodeApplyClipToContext(a1, a2);
    if (v6)
    {
      CGContextSetLineWidth(a2, *(CGFloat *)(a1 + 144));
      CGContextSetLineCap(a2, *(CGLineCap *)(a1 + 160));
      CGContextSetLineJoin(a2, *(CGLineJoin *)(a1 + 164));
      CGContextSetMiterLimit(a2, *(CGFloat *)(a1 + 152));
      CGContextSetStrokeColorWithColor(a2, v6);
    }
    if (v4)
    {
      CGContextSetFillColorWithColor(a2, v4);
      if (*(_BYTE *)(a1 + 136))
      {
        if (v6)
          v8 = kCGPathEOFillStroke;
        else
          v8 = kCGPathEOFill;
      }
      else if (v6)
      {
        v8 = kCGPathFillStroke;
      }
      else
      {
        v8 = kCGPathFill;
      }
    }
    else
    {
      v8 = kCGPathStroke;
    }
    ShapePath = (const CGPath *)CGPDFNodeCreateShapePath(a1);
    if (ShapePath)
    {
      v10 = ShapePath;
      CGContextAddPath(a2, ShapePath);
      CGContextDrawPath(a2, v8);
      CFRelease(v10);
    }
    CGContextRestoreGState(a2);
  }
  if (v7 && (CGPDFNodeDrawPatternInContext(a1, a2, 1) & 1) == 0)
  {
    if (*(_QWORD *)(a1 + 176))
    {
      v11 = *(_OWORD *)(a1 + 144);
      v17[8] = *(_OWORD *)(a1 + 128);
      v17[9] = v11;
      v18 = *(_OWORD *)(a1 + 160);
      v12 = *(_QWORD *)(a1 + 176);
      v13 = *(_OWORD *)(a1 + 80);
      v17[4] = *(_OWORD *)(a1 + 64);
      v17[5] = v13;
      v14 = *(_OWORD *)(a1 + 112);
      v17[6] = *(_OWORD *)(a1 + 96);
      v17[7] = v14;
      v15 = *(_OWORD *)(a1 + 16);
      v17[0] = *(_OWORD *)a1;
      v17[1] = v15;
      v16 = *(_OWORD *)(a1 + 48);
      v17[2] = *(_OWORD *)(a1 + 32);
      v17[3] = v16;
      v19 = v12;
      v20 = 0;
      *((_QWORD *)&v18 + 1) = 0;
      CGPDFNodeDrawShapeInContext(v17, a2);
    }
  }
}

void CGPDFNodeDrawImageInContext(uint64_t a1, CGContext *a2)
{
  uint64_t Image;
  CGImage *v5;
  CGPDFStream *v6;
  CGPDFStream *v7;
  CGImageRef v8;
  CGFloat *v9;
  CGFloat *v10;
  CGColorSpaceRef ColorSpace;
  uint64_t v12;
  CGImageRef v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  __int128 v19;
  double v20;
  CGColor *v21;
  CGAffineTransform v22;
  uint64_t v23;
  CGRect v24;

  Image = CGPDFNodeCreateImage();
  if (Image)
  {
    v5 = (CGImage *)Image;
    v6 = CPPDFCreateMaskingImageFromStream(*(CGPDFStream **)(a1 + 120));
    v23 = 0;
    if (v6)
    {
      v7 = v6;
      v8 = CPImageCreateWithMask(v5, (uint64_t)v6);
      CFRelease(v5);
      CFRelease(v7);
      v5 = v8;
    }
    else
    {
      v9 = (CGFloat *)CPPDFCreateMaskingColorsFromStream(*(_QWORD *)(a1 + 120), &v23);
      if (v9)
      {
        v10 = v9;
        ColorSpace = CGImageGetColorSpace(v5);
        if (ColorSpace)
          v12 = *(_QWORD *)(*((_QWORD *)ColorSpace + 3) + 40);
        else
          v12 = 0;
        if (v12 == v23)
        {
          v13 = CGImageCreateWithMaskingColors(v5, v10);
          CFRelease(v5);
          v5 = v13;
        }
        free(v10);
      }
    }
    CGContextSaveGState(a2);
    CGPDFNodeApplyClipToContext(a1, a2);
    v14 = *(double *)(a1 + 64);
    v15 = *(double *)(a1 + 72);
    v18 = *(_DWORD **)(a1 + 8);
    if (!v18 || *v18 != 513 || v14 != INFINITY && v15 != INFINITY)
    {
      v16 = *(_QWORD *)(a1 + 80);
      v17 = *(_QWORD *)(a1 + 88);
      CGContextClipToRect(a2, *(CGRect *)&v14);
    }
    v19 = *(_OWORD *)(a1 + 152);
    *(_OWORD *)&v22.a = *(_OWORD *)(a1 + 136);
    *(_OWORD *)&v22.c = v19;
    *(_OWORD *)&v22.tx = *(_OWORD *)(a1 + 168);
    CGContextConcatCTM(a2, &v22);
    v20 = *(double *)(a1 + 184);
    if (v20 != 1.0)
      CGContextSetAlpha(a2, v20);
    v21 = *(CGColor **)(a1 + 192);
    if (v21)
      CGContextSetFillColorWithColor(a2, v21);
    v24.origin.x = 0.0;
    v24.origin.y = 0.0;
    v24.size.width = 1.0;
    v24.size.height = 1.0;
    CGContextDrawImage(a2, v24, v5);
    if (v5)
      CFRelease(v5);
    CGContextRestoreGState(a2);
  }
}

CGPDFStream *CGPDFNodeCreateImage(uint64_t a1)
{
  int v2;
  CGImageRef Image;
  double width;
  double height;
  double PageRotation;
  CGFloat v7;
  __double2 v8;
  size_t v9;
  size_t v10;
  CGColorSpace *DeviceRGB;
  CGContext *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double x;
  double y;
  CGAffineTransform v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == 513 || v2 == 258)
  {
    x = *(double *)(a1 + 64);
    width = *(double *)(a1 + 80);
    y = *(double *)(a1 + 72);
    height = *(double *)(a1 + 88);
    PageRotation = CGPDFNodeGetPageRotation(a1);
    v7 = PageRotation;
    if (PageRotation != 0.0)
    {
      v8 = __sincos_stret(PageRotation);
      v23.a = v8.__cosval;
      v23.b = v8.__sinval;
      v23.c = -v8.__sinval;
      v23.d = v8.__cosval;
      v23.tx = 0.0;
      v23.ty = 0.0;
      v24.origin.x = x;
      v24.origin.y = y;
      v24.size.width = width;
      v24.size.height = height;
      v25 = CGRectApplyAffineTransform(v24, &v23);
      x = v25.origin.x;
      y = v25.origin.y;
      width = v25.size.width;
      height = v25.size.height;
    }
    v9 = vcvtpd_u64_f64(width);
    v10 = vcvtpd_u64_f64(height);
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    v12 = CGBitmapContextCreateWithData(0, v9, v10, 8uLL, 4 * v9, DeviceRGB, 1u, 0, 0);
    if (v12)
    {
      v13 = (uint64_t)v12;
      v26.size.width = (double)v9;
      v26.size.height = (double)v10;
      v26.origin.x = 0.0;
      v26.origin.y = 0.0;
      CGContextClearRect(v12, v26);
      if (*(_DWORD *)(v13 + 16) == 1129601108)
        *(float64x2_t *)(*(_QWORD *)(v13 + 96) + 56) = vmlsq_lane_f64(vmlsq_lane_f64(*(float64x2_t *)(*(_QWORD *)(v13 + 96) + 56), *(float64x2_t *)(*(_QWORD *)(v13 + 96) + 24), x, 0), *(float64x2_t *)(*(_QWORD *)(v13 + 96) + 40), y, 0);
      else
        handle_invalid_context((char)"CGContextTranslateCTM", v13, v14, v15, v16, v17, v18, v19);
      if (v7 != 0.0)
        CGContextRotateCTM((CGContextRef)v13, v7);
      CGPDFNodeDrawInContext(a1, (CGContext *)v13);
      Image = CGBitmapContextCreateImage((CGContextRef)v13);
      CFRelease((CFTypeRef)v13);
    }
    else
    {
      Image = 0;
    }
    CGColorSpaceRelease(DeviceRGB);
    return Image;
  }
  if (v2 != 257)
    return 0;
  Image = *(CGImageRef *)(a1 + 128);
  if (Image)
  {
    CFRetain(*(CFTypeRef *)(a1 + 128));
    return Image;
  }
  return CPPDFCreateImageFromStream(*(CGPDFStream **)(a1 + 120), 0, 0);
}

CGImageRef CPImageCreateWithMask(CGImage *cf, uint64_t a2)
{
  CGImageRef Image;
  size_t v4;
  size_t v5;
  size_t v6;
  size_t v7;
  size_t v8;
  size_t v9;
  CGColorSpace *DeviceRGB;
  CGContext *v11;
  CGContext *v12;
  CGImageRef v13;
  CGRect v15;
  CGRect v16;

  Image = cf;
  if (!cf)
  {
    v4 = 0;
    v5 = 0;
    if (a2)
      goto LABEL_3;
LABEL_5:
    v6 = 0;
    v7 = 0;
    goto LABEL_6;
  }
  CFRetain(cf);
  v4 = *((_QWORD *)Image + 5);
  v5 = *((_QWORD *)Image + 6);
  if (!a2)
    goto LABEL_5;
LABEL_3:
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
LABEL_6:
  if (v6 > v4 || v7 > v5)
  {
    if (v6 <= v4)
      v8 = v4;
    else
      v8 = v6;
    if (v7 <= v5)
      v9 = v5;
    else
      v9 = v7;
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    v11 = CGBitmapContextCreateWithData(0, v8, v9, 8uLL, 4 * v8, DeviceRGB, 1u, 0, 0);
    if (v11)
    {
      v12 = v11;
      v15.origin.x = 0.0;
      v15.origin.y = 0.0;
      v15.size.width = (double)v8;
      v15.size.height = (double)v9;
      CGContextClearRect(v11, v15);
      v16.origin.x = 0.0;
      v16.origin.y = 0.0;
      v16.size.width = (double)v8;
      v16.size.height = (double)v9;
      CGContextDrawImage(v12, v16, Image);
      if (Image)
        CFRelease(Image);
      Image = CGBitmapContextCreateImage(v12);
      CFRelease(v12);
    }
    CGColorSpaceRelease(DeviceRGB);
  }
  v13 = CGImageCreateWithMaskAndMatte((uint64_t)Image, a2, 0);
  if (Image)
    CFRelease(Image);
  return v13;
}

void CGPDFNodeApplyClipToContext(uint64_t a1, CGContextRef c)
{
  uint64_t i;
  const CGPath *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  CGContextBeginPath(c);
  if (a1)
  {
    if ((*(_BYTE *)(a1 + 1) & 1) != 0)
    {
      for (i = *(_QWORD *)(a1 + 104); i; i = *(_QWORD *)(i + 24))
      {
        v5 = *(const CGPath **)(i + 8);
        if (v5)
        {
          CFRetain(*(CFTypeRef *)(i + 8));
          CGContextAddPath(c, v5);
          clip((uint64_t)c, *(unsigned __int8 *)(i + 16), v6, v7, v8, v9, v10, v11);
          CFRelease(v5);
        }
      }
    }
  }
}

CGPDFContentStreamRef CGPDFNodeDrawPatternInContext(uint64_t a1, CGContext *a2, int a3)
{
  float64x2_t *v3;
  uint64_t v6;
  CGPDFContentStreamRef result;
  CGPDFDictionary *v9;
  CGPDFInteger v10;
  float64x2_t v11;
  float64x2_t v12;
  size_t v13;
  CGAffineTransform *v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  CGPDFStream *v23;
  _BOOL4 v24;
  int v25;
  CGPatternTiling v26;
  _BOOL4 Number;
  size_t v28;
  CGPDFReal *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  const void *v34;
  double v35;
  double v36;
  uint64_t v37;
  unint64_t v38;
  _BOOL4 v39;
  CGColorRef CopyWithAlpha;
  CGPatternRef v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  CGPattern *v49;
  double Alpha;
  _BOOL8 v51;
  CGColorSpace *ColorSpace;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  CGAffineTransform *Components;
  CGColorSpaceRef Pattern;
  CGColorSpace *v63;
  uint64_t ShapePath;
  const CGPath *v65;
  CGPathDrawingMode v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  CGPDFArrayRef array;
  CGPDFInteger value;
  CGPDFDictionaryRef dict;
  CGPDFStream *v79;
  CGAffineTransform v80;
  CGPatternCallbacks v81;
  CFTypeRef info;
  CFTypeRef cf;
  CGPDFDictionaryRef streamResources;
  CGPDFArrayRef v85;
  CGPDFReal v86;
  CGPDFReal v87;
  CGPDFInteger v88;
  CGAffineTransform v89;
  CGPDFReal v90[5];
  CGRect v91;

  v90[4] = *(CGPDFReal *)MEMORY[0x1E0C80C00];
  v3 = *(float64x2_t **)(a1 + 184);
  if (!v3)
    return 0;
  v6 = 1;
  if (!a3)
    v6 = 0;
  result = *(CGPDFContentStreamRef *)&v3->f64[v6];
  if (!result)
    return result;
  dict = 0;
  v79 = 0;
  CGPDFNodeExtractPDFObject((uint64_t)result, &v79, &dict);
  v9 = dict;
  if (!dict)
    return 0;
  value = 0;
  if (CGPDFDictionaryGetInteger(dict, "ShadingType", &value))
  {
    v10 = value;
    v11 = v3[2];
    *(float64x2_t *)&v89.a = v3[1];
    *(float64x2_t *)&v89.c = v11;
    v12 = v3[3];
LABEL_8:
    *(float64x2_t *)&v89.tx = v12;
    return (CGPDFContentStreamRef)CGPDFNodeDrawShadingInContext(a1, a2, v9, v10, (uint64_t)&v89, a3);
  }
  result = (CGPDFContentStreamRef)CGPDFDictionaryGetInteger(v9, "PatternType", &value);
  if (!(_DWORD)result)
    return result;
  array = 0;
  if (CGPDFDictionaryGetArray(v9, "Matrix", &array))
  {
    v13 = 0;
    v14 = &v89;
    while (CGPDFArrayGetNumber(array, v13, &v14->a))
    {
      ++v13;
      v14 = (CGAffineTransform *)((char *)v14 + 8);
      if (v13 == 6)
      {
        v15 = *(float64x2_t *)&v89.a;
        v16 = *(float64x2_t *)&v89.c;
        v17 = *(float64x2_t *)&v89.tx;
        goto LABEL_17;
      }
    }
    v17 = 0uLL;
    v15 = (float64x2_t)xmmword_185004990;
    v16 = (float64x2_t)xmmword_185004A20;
  }
  else
  {
    v16 = (float64x2_t)xmmword_185004A20;
    v15 = (float64x2_t)xmmword_185004990;
    v17 = 0uLL;
  }
LABEL_17:
  v18 = v3[1];
  v19 = v3[2];
  v20 = vmlaq_n_f64(vmulq_laneq_f64(v19, v15, 1), v18, v15.f64[0]);
  v21 = vmlaq_n_f64(vmulq_laneq_f64(v19, v16, 1), v18, v16.f64[0]);
  v22 = vaddq_f64(v3[3], vmlaq_n_f64(vmulq_laneq_f64(v19, v17, 1), v18, v17.f64[0]));
  if (value == 2)
  {
    v68 = v22;
    v71 = v20;
    v74 = v21;
    v80.a = 0.0;
    result = (CGPDFContentStreamRef)CGPDFDictionaryGetObject(v9, "Shading", (CGPDFObjectRef *)&v80);
    if (!(_DWORD)result)
      return result;
    v90[0] = 0.0;
    *(_QWORD *)&v81.version = 0;
    CGPDFNodeExtractPDFObject(*(uint64_t *)&v80.a, v90, &v81);
    v9 = *(CGPDFDictionary **)&v81.version;
    if (*(_QWORD *)&v81.version)
    {
      result = (CGPDFContentStreamRef)CGPDFDictionaryGetInteger(*(CGPDFDictionaryRef *)&v81.version, "ShadingType", &value);
      if ((_DWORD)result)
      {
        v10 = value;
        *(float64x2_t *)&v89.a = v71;
        *(float64x2_t *)&v89.c = v74;
        v12 = v68;
        goto LABEL_8;
      }
      return result;
    }
    return 0;
  }
  if (value != 1)
    return 0;
  v23 = v79;
  if (!v79)
    return 0;
  v67 = v22;
  v70 = v20;
  v73 = v21;
  v88 = 0;
  result = (CGPDFContentStreamRef)CGPDFDictionaryGetInteger(v9, "PaintType", &v88);
  if (!(_DWORD)result)
    return result;
  if (v88 != 1)
  {
    if (v88 == 2)
    {
      v24 = 0;
      goto LABEL_31;
    }
    return 0;
  }
  v24 = 1;
LABEL_31:
  result = (CGPDFContentStreamRef)CGPDFDictionaryGetInteger(v9, "TilingType", &v88);
  if ((_DWORD)result)
  {
    v25 = v88 == 3 ? 2 : 1;
    v26 = v88 == 2 ? kCGPatternTilingNoDistortion : v25;
    v86 = 0.0;
    v87 = 0.0;
    Number = CGPDFDictionaryGetNumber(v9, "XStep", &v87);
    result = 0;
    if (Number)
    {
      result = (CGPDFContentStreamRef)CGPDFDictionaryGetNumber(v9, "YStep", &v86);
      if ((_DWORD)result)
      {
        v85 = 0;
        result = (CGPDFContentStreamRef)CGPDFDictionaryGetArray(v9, "BBox", &v85);
        if ((_DWORD)result)
        {
          v28 = 0;
          v29 = v90;
          do
          {
            result = (CGPDFContentStreamRef)CGPDFArrayGetNumber(v85, v28, v29);
            if (!(_DWORD)result)
              return result;
            ++v28;
            ++v29;
          }
          while (v28 != 4);
          v30 = v90[0];
          v31 = v90[1];
          v32 = v90[2];
          v33 = v90[3];
          streamResources = 0;
          result = (CGPDFContentStreamRef)CGPDFDictionaryGetDictionary(v9, "Resources", &streamResources);
          if ((_DWORD)result)
          {
            result = CGPDFContentStreamCreateWithStream(v23, streamResources, 0);
            if (result)
            {
              v34 = result;
              v35 = v32 - v30;
              v36 = v33 - v31;
              CGContextGetCTM(&v89, a2);
              v72 = vmlaq_n_f64(vmulq_laneq_f64(*(float64x2_t *)&v89.c, v70, 1), *(float64x2_t *)&v89.a, v70.f64[0]);
              v75 = vmlaq_n_f64(vmulq_laneq_f64(*(float64x2_t *)&v89.c, v73, 1), *(float64x2_t *)&v89.a, v73.f64[0]);
              v69 = vaddq_f64(*(float64x2_t *)&v89.tx, vmlaq_n_f64(vmulq_laneq_f64(*(float64x2_t *)&v89.c, v67, 1), *(float64x2_t *)&v89.a, v67.f64[0]));
              v37 = 168;
              if (a3)
                v37 = 176;
              v38 = *(_QWORD *)(a1 + v37);
              if (v38)
                v39 = v24;
              else
                v39 = 0;
              if (v39)
                CopyWithAlpha = CGColorCreateCopyWithAlpha((CGColorRef)v38, 1.0);
              else
                CopyWithAlpha = 0;
              info = v34;
              cf = CopyWithAlpha;
              v81.releaseInfo = (CGPatternReleaseInfoCallback)CGPDFNodeReleaseTile;
              *(float64x2_t *)&v80.a = v72;
              *(float64x2_t *)&v80.c = v75;
              *(float64x2_t *)&v80.tx = v69;
              *(_OWORD *)&v81.version = xmmword_1E1662780;
              v91.origin.x = v30;
              v91.origin.y = v31;
              v91.size.width = v35;
              v91.size.height = v36;
              v41 = CGPatternCreate(&info, v91, &v80, v87, v86, v26, v24, &v81);
              if (!v41)
              {
                if (info)
                  CFRelease(info);
                if (cf)
                  CFRelease(cf);
                return 0;
              }
              v49 = v41;
              v80.a = 1.0;
              if (v38)
              {
                if (v24)
                {
                  if ((v38 & 0x8000000000000000) != 0)
                    Alpha = CGTaggedColorGetAlpha(v38, v42, v43, v44, v45, v46, v47, v48);
                  else
                    Alpha = *(double *)(v38 + 8 * *(_QWORD *)(v38 + 56) + 56);
                  ColorSpace = 0;
                  v80.a = Alpha;
                }
                else
                {
                  if ((v38 & 0x8000000000000000) != 0)
                  {
                    ColorSpace = CGTaggedColorGetColorSpace(v38, v42, v43, v44, v45, v46, v47, v48);
                    v60 = CGTaggedColorGetAlpha(v38, v53, v54, v55, v56, v57, v58, v59);
                  }
                  else
                  {
                    ColorSpace = *(CGColorSpace **)(v38 + 24);
                    v60 = *(double *)(v38 + 8 * *(_QWORD *)(v38 + 56) + 56);
                  }
                  v80.a = v60;
                  if (ColorSpace)
                  {
                    Components = (CGAffineTransform *)CGColorGetComponents((CGColorRef)v38);
LABEL_73:
                    Pattern = CGColorSpaceCreatePattern(ColorSpace);
                    if (Pattern)
                    {
                      v63 = Pattern;
                      ShapePath = CGPDFNodeCreateShapePath(a1);
                      v51 = ShapePath != 0;
                      if (ShapePath)
                      {
                        v65 = (const CGPath *)ShapePath;
                        CGContextSaveGState(a2);
                        CGPDFNodeApplyClipToContext(a1, a2);
                        CGContextAddPath(a2, v65);
                        if (a3)
                        {
                          CGContextSetLineWidth(a2, *(CGFloat *)(a1 + 144));
                          CGContextSetLineCap(a2, *(CGLineCap *)(a1 + 160));
                          CGContextSetLineJoin(a2, *(CGLineJoin *)(a1 + 164));
                          CGContextSetMiterLimit(a2, *(CGFloat *)(a1 + 152));
                          CGContextSetStrokeColorSpace(a2, v63);
                          CGContextSetStrokePattern(a2, v49, &Components->a);
                          v66 = kCGPathStroke;
                        }
                        else
                        {
                          CGContextSetFillColorSpace(a2, v63);
                          CGContextSetFillPattern(a2, v49, &Components->a);
                          v66 = *(unsigned __int8 *)(a1 + 136);
                        }
                        CGContextDrawPath(a2, v66);
                        CGContextRestoreGState(a2);
                        CFRelease(v65);
                      }
                      CGColorSpaceRelease(v63);
                    }
                    else
                    {
                      v51 = 0;
                    }
                    CFRelease(v49);
                    return (CGPDFContentStreamRef)v51;
                  }
                }
              }
              else
              {
                ColorSpace = 0;
              }
              Components = &v80;
              goto LABEL_73;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CGPDFNodeCreateShapePath(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v4;

  v4 = (_DWORD *)a1;
  if (!a1 || *(_DWORD *)a1 != 258)
    return 0;
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    CFRetain(*(CFTypeRef *)(a1 + 128));
  }
  else
  {
    CGPDFNodeLoadPaths(&v4, 1u);
    v2 = *(_QWORD *)(a1 + 128);
    if (v2)
      CFRetain(*(CFTypeRef *)(a1 + 128));
    CGPDFNodePurgePaths((uint64_t *)&v4, 1u);
  }
  return v2;
}

void CGPDFNodeLoadPaths(_DWORD **a1, unsigned int a2)
{
  __CFArray *Mutable;
  uint64_t Count;
  int64_t v6;
  _DWORD *v7;
  _QWORD *v8;
  CFIndex v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  _QWORD *ValueAtIndex;
  uint64_t v16;
  uint64_t v17;
  int32x2_t *v18;
  uint64_t v19;
  int v20;
  CGPDFOperatorTable *v21;
  CGPDFContentStream *v22;
  uint64_t v23;
  CGPDFScanner *v24;
  uint64_t v25;
  CFIndex v26;
  int v27;
  unsigned int v28;
  _QWORD *v29;
  const void *v30;
  CFRange v31;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  CGPDFNodeCollectShapesWithoutPaths(a1, a2, Mutable);
  Count = CFArrayGetCount(Mutable);
  if (Count >= 1)
  {
    v6 = Count;
    v31.location = 0;
    v31.length = Count;
    CFArraySortValues(Mutable, v31, (CFComparatorFunction)comparePDFObjectID, 0);
    v7 = malloc_type_calloc(v6, 4uLL, 0x100004052888210uLL);
    v8 = malloc_type_calloc(v6, 8uLL, 0x6004044C4A2DFuLL);
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 1;
    do
    {
      v13 = *((_DWORD *)CFArrayGetValueAtIndex(Mutable, v9) + 30);
      if (v12 == 1 || v13 != v11)
      {
        v7[v10++] = v13;
        v11 = v13;
      }
      v9 = v12;
      v14 = v6 <= v12++;
    }
    while (!v14);
    ValueAtIndex = CFArrayGetValueAtIndex(Mutable, 0);
    if (ValueAtIndex)
    {
      while (*(_DWORD *)ValueAtIndex != 517)
      {
        ValueAtIndex = (_QWORD *)ValueAtIndex[1];
        if (!ValueAtIndex)
          goto LABEL_24;
      }
      v16 = ValueAtIndex[13];
      if (v16)
      {
        v17 = *(_QWORD *)(v16 + 16);
        if (v17)
        {
          v18 = CPPDFContextCreate();
          if (v18)
          {
            v19 = (uint64_t)v18;
            *(CGRect *)v18->i8 = CGPDFPageGetBoxRect((CGPDFPageRef)v17, kCGPDFCropBox);
            pthread_mutex_lock((pthread_mutex_t *)(v17 + 216));
            v20 = *(_DWORD *)(v17 + 48);
            pthread_mutex_unlock((pthread_mutex_t *)(v17 + 216));
            *(_DWORD *)(v19 + 2284) = v20;
            *(_QWORD *)(v19 + 2288) = v17;
            *(_QWORD *)(v19 + 2344) = 0;
            *(_QWORD *)(v19 + 2304) = v10;
            *(_QWORD *)(v19 + 2320) = v7;
            *(_QWORD *)(v19 + 2328) = v8;
            *(_QWORD *)(v19 + 2312) = 0;
            *(_BYTE *)(v19 + 2336) = 0;
            v21 = CGPDFOperatorTableCreate();
            AddLazyPdfOperators(v21);
            v22 = (CGPDFContentStream *)CGPDFContentStreamCreate(*(_QWORD *)(v17 + 40));
            v23 = *(unsigned int *)(v19 + 2056);
            *(_DWORD *)(v19 + 2056) = v23 + 1;
            *(_QWORD *)(v19 + 8 * v23 + 56) = v22;
            v24 = CGPDFScannerCreate(v22, v21, (void *)v19);
            *(_BYTE *)(*(_QWORD *)(v19 + 40) + 8) = 1;
            CPPDFContextSaveGState(v19);
            *(_BYTE *)(*(_QWORD *)(v19 + 40) + 8) = 0;
            CGPDFScannerScan(v24);
            CPPDFContextRestoreGState(v19);
            v25 = *(_QWORD *)(v19 + 40);
            if (v25)
              *(_BYTE *)(v25 + 8) = 0;
            if (v22)
              CFRelease(v22);
            if (v24)
              CFRelease(v24);
            if (v21)
              CFRelease(v21);
            CPPDFContextRelease(v19);
          }
        }
      }
    }
LABEL_24:
    v26 = 0;
    v27 = 0;
    v28 = 1;
    do
    {
      v29 = CFArrayGetValueAtIndex(Mutable, v26);
      if (*((_DWORD *)v29 + 30) == v7[v27])
      {
        v30 = (const void *)v8[v27];
        v29[16] = v30;
        if (v28 != 1 && v30)
          CFRetain(v30);
      }
      else
      {
        v29[16] = v8[++v27];
      }
      v26 = v28;
      v14 = v6 <= v28++;
    }
    while (!v14);
    free(v8);
    free(v7);
  }
  CFRelease(Mutable);
}

void CGPDFNodePurgePaths(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const void *v5;

  if (a2)
  {
    v3 = a2;
    do
    {
      v4 = *a1;
      if (*a1)
      {
        if (*(_DWORD *)v4 == 258)
        {
          v5 = *(const void **)(v4 + 128);
          if (v5)
            CFRelease(v5);
          *(_QWORD *)(v4 + 128) = 0;
        }
        else if ((*(_DWORD *)v4 & 0x200) != 0)
        {
          CGPDFNodePurgePaths(*(_QWORD *)(v4 + 56), *(unsigned int *)(v4 + 44));
        }
      }
      ++a1;
      --v3;
    }
    while (v3);
  }
}

void CGPDFNodeCollectShapesWithoutPaths(_DWORD **a1, unsigned int a2, __CFArray *a3)
{
  uint64_t v5;
  _DWORD *v6;

  if (a2)
  {
    v5 = a2;
    do
    {
      v6 = *a1;
      if (*a1)
      {
        if (*v6 == 258)
        {
          if (!*((_QWORD *)v6 + 16))
            CFArrayAppendValue(a3, v6);
        }
        else if ((*v6 & 0x200) != 0)
        {
          CGPDFNodeCollectShapesWithoutPaths(*((_QWORD *)v6 + 7), v6[11], a3);
        }
      }
      ++a1;
      --v5;
    }
    while (v5);
  }
}

uint64_t comparePDFObjectID(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  _BOOL8 v5;

  v2 = *(_DWORD *)(a1 + 120);
  v3 = *(_DWORD *)(a2 + 120);
  v4 = v2 >= v3;
  v5 = v2 > v3;
  if (v4)
    return v5;
  else
    return -1;
}

uint64_t CGPDFNodeExtractPDFObject(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;

  if (!result || (v3 = *(_DWORD *)(result + 8), v3 == 12))
  {
    v4 = 0;
    *a2 = 0;
LABEL_4:
    *a3 = v4;
    return result;
  }
  *a2 = 0;
  *a3 = 0;
  if (v3 == 8)
  {
    v4 = *(_QWORD *)(result + 32);
    goto LABEL_4;
  }
  if (v3 == 9)
  {
    v4 = *(_QWORD *)(result + 32);
    *a2 = v4;
    if (v4)
      v4 = *(_QWORD *)(v4 + 48);
    goto LABEL_4;
  }
  return result;
}

BOOL CGPDFNodeDrawShadingInContext(uint64_t a1, CGContext *a2, CGPDFDictionaryRef dict, uint64_t a4, uint64_t a5, int a6)
{
  CGColorSpaceRef v12;
  size_t v13;
  CGAffineTransform *v14;
  double a;
  double b;
  double v17;
  double v18;
  _BOOL8 v19;
  char *Function;
  char *v22;
  size_t v23;
  uint64_t v24;
  CGAffineTransform *v25;
  const void *v26;
  uint64_t v27;
  _BOOL4 Boolean;
  uint64_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t AxialInternal;
  CGShading *v33;
  uint64_t ShapePath;
  const CGPath *v35;
  CGPath *Mutable;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  double **cf;
  CGPDFBoolean v52;
  CGPDFArrayRef v53;
  CGPDFArrayRef v54;
  CGPDFObjectRef v55;
  CGPDFArrayRef array;
  CGPDFObjectRef value;
  CGColorSpaceRef v58;
  CGAffineTransform v59;
  uint64_t v60;
  CGRect v61;

  v60 = *MEMORY[0x1E0C80C00];
  if ((a4 & 0xFFFFFFFFFFFFFFFELL) == 2)
  {
    value = 0;
    v58 = 0;
    if (CGPDFDictionaryGetObject(dict, "ColorSpace", &value))
    {
      CreateColorSpaceFromObject(value, &v58);
      v12 = v58;
      if (v58)
      {
        array = 0;
        if (CGPDFDictionaryGetArray(dict, "BBox", &array))
        {
          v13 = 0;
          v14 = &v59;
          while (CGPDFArrayGetNumber(array, v13, &v14->a))
          {
            ++v13;
            v14 = (CGAffineTransform *)((char *)v14 + 8);
            if (v13 == 4)
            {
              a = v59.a;
              b = v59.b;
              v17 = v59.c - v59.a;
              v18 = v59.d - v59.b;
              goto LABEL_12;
            }
          }
        }
        v17 = 0.0;
        a = INFINITY;
        b = INFINITY;
        v18 = 0.0;
LABEL_12:
        v55 = 0;
        if (CGPDFDictionaryGetObject(dict, "Function", &v55))
        {
          Function = CGPDFFunctionCreateFunction((char *)v55);
          if (Function)
          {
            v22 = Function;
            v54 = 0;
            if (CGPDFDictionaryGetArray(dict, "Coords", &v54))
            {
              cf = (double **)v22;
              v23 = 0;
              if (a4 == 2)
                v24 = 4;
              else
                v24 = 6;
              v25 = &v59;
              while (CGPDFArrayGetNumber(v54, v23, &v25->a))
              {
                ++v23;
                v25 = (CGAffineTransform *)((char *)v25 + 8);
                if (v24 == v23)
                  goto LABEL_24;
              }
              if ((_DWORD)v24 != (_DWORD)v23)
              {
                v26 = cf;
                goto LABEL_44;
              }
LABEL_24:
              v53 = 0;
              if (CGPDFDictionaryGetArray(dict, "Extend", &v53))
              {
                v52 = 0;
                Boolean = CGPDFArrayGetBoolean(v53, 0, &v52);
                if (v52)
                  v29 = Boolean;
                else
                  v29 = 0;
                v30 = CGPDFArrayGetBoolean(v53, 1uLL, &v52);
                if (v52)
                  v31 = v30;
                else
                  v31 = 0;
              }
              else
              {
                v29 = 0;
                v31 = 0;
              }
              if (a4 == 2)
                AxialInternal = CGShadingCreateAxialInternal(v12, 0, 0, cf[5], cf, v29, v31, v27, v59.a, v59.b, v59.c, v59.d);
              else
                AxialInternal = CGShadingCreateRadialInternal(v12, 0, 0, cf[5], cf, v29, v31, v27, v59.a, v59.b, v59.c, v59.d, v59.tx, v59.ty);
              v33 = (CGShading *)AxialInternal;
              CFRelease(cf);
              if (v33)
              {
                ShapePath = CGPDFNodeCreateShapePath(a1);
                v19 = ShapePath != 0;
                if (ShapePath)
                {
                  v35 = (const CGPath *)ShapePath;
                  CGContextSaveGState(a2);
                  CGPDFNodeApplyClipToContext(a1, a2);
                  if (a != INFINITY && b != INFINITY)
                  {
                    Mutable = CGPathCreateMutable();
                    v61.origin.x = a;
                    v61.origin.y = b;
                    v61.size.width = v17;
                    v61.size.height = v18;
                    CGPathAddRect(Mutable, (const CGAffineTransform *)a5, v61);
                    CGContextAddPath(a2, Mutable);
                    clip((uint64_t)a2, 0, v37, v38, v39, v40, v41, v42);
                    if (Mutable)
                      CFRelease(Mutable);
                  }
                  CGContextAddPath(a2, v35);
                  if (a6)
                  {
                    CGContextSetLineWidth(a2, *(CGFloat *)(a1 + 144));
                    CGContextSetLineCap(a2, *(CGLineCap *)(a1 + 160));
                    CGContextSetLineJoin(a2, *(CGLineJoin *)(a1 + 164));
                    CGContextSetMiterLimit(a2, *(CGFloat *)(a1 + 152));
                    CGContextReplacePathWithStrokedPath(a2);
                    v49 = 0;
                  }
                  else
                  {
                    v49 = *(unsigned __int8 *)(a1 + 136);
                  }
                  clip((uint64_t)a2, v49, v43, v44, v45, v46, v47, v48);
                  v50 = *(_OWORD *)(a5 + 16);
                  *(_OWORD *)&v59.a = *(_OWORD *)a5;
                  *(_OWORD *)&v59.c = v50;
                  *(_OWORD *)&v59.tx = *(_OWORD *)(a5 + 32);
                  CGContextConcatCTM(a2, &v59);
                  CGContextDrawShading(a2, v33);
                  CGContextRestoreGState(a2);
                  CFRelease(v35);
                }
                CFRelease(v33);
                goto LABEL_46;
              }
            }
            else
            {
              v26 = v22;
LABEL_44:
              CFRelease(v26);
            }
          }
        }
        v19 = 0;
LABEL_46:
        CGColorSpaceRelease(v12);
        return v19;
      }
    }
  }
  return 0;
}

void CGPDFNodeDrawTile(CGPDFContentStreamRef *a1, CGContextRef c)
{
  CGColor *v4;
  CGPDFOperatorTable *v5;
  CGPDFScanner *v6;
  CGPDFScanner *v7;

  v4 = a1[1];
  if (v4)
    CGContextSetFillColorWithColor(c, v4);
  CGContextBeginPath(c);
  v5 = CGPDFOperatorTableCreate();
  CGPDFNodeInitOperatorTable(v5);
  v6 = CGPDFScannerCreate(*a1, v5, c);
  if (v6)
  {
    v7 = v6;
    CGPDFScannerScan(v6);
    CFRelease(v7);
  }
  if (v5)
    CFRelease(v5);
}

void CGPDFNodeReleaseTile(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)a1;
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 8);
  if (v3)
    CFRelease(v3);
}

void CGPDFNodeInitOperatorTable(CGPDFOperatorTable *a1)
{
  CGPDFOperatorTableSetCallback(a1, "b", (CGPDFOperatorCallback)op_b_20473);
  CGPDFOperatorTableSetCallback(a1, "b*", (CGPDFOperatorCallback)op_bstar_20475);
  CGPDFOperatorTableSetCallback(a1, "B", (CGPDFOperatorCallback)op_B_20477);
  CGPDFOperatorTableSetCallback(a1, "B*", (CGPDFOperatorCallback)op_Bstar_20479);
  CGPDFOperatorTableSetCallback(a1, "c", (CGPDFOperatorCallback)op_c_20481);
  CGPDFOperatorTableSetCallback(a1, "cm", (CGPDFOperatorCallback)op_cm_20483);
  CGPDFOperatorTableSetCallback(a1, "cs", (CGPDFOperatorCallback)op_cs_20485);
  CGPDFOperatorTableSetCallback(a1, "CS", (CGPDFOperatorCallback)op_CS_20487);
  CGPDFOperatorTableSetCallback(a1, "d", (CGPDFOperatorCallback)op_d_20489);
  CGPDFOperatorTableSetCallback(a1, "Do", (CGPDFOperatorCallback)op_Do_20491);
  CGPDFOperatorTableSetCallback(a1, "EI", (CGPDFOperatorCallback)op_EI_20493);
  CGPDFOperatorTableSetCallback(a1, "f", (CGPDFOperatorCallback)op_f_20495);
  CGPDFOperatorTableSetCallback(a1, "f*", (CGPDFOperatorCallback)op_fstar_20497);
  CGPDFOperatorTableSetCallback(a1, "F", (CGPDFOperatorCallback)op_f_20495);
  CGPDFOperatorTableSetCallback(a1, "g", (CGPDFOperatorCallback)op_g_20500);
  CGPDFOperatorTableSetCallback(a1, "G", (CGPDFOperatorCallback)op_G_20502);
  CGPDFOperatorTableSetCallback(a1, "gs", (CGPDFOperatorCallback)op_gs_20504);
  CGPDFOperatorTableSetCallback(a1, "h", (CGPDFOperatorCallback)op_h_20506);
  CGPDFOperatorTableSetCallback(a1, "j", (CGPDFOperatorCallback)op_j_20508);
  CGPDFOperatorTableSetCallback(a1, "J", (CGPDFOperatorCallback)op_J_20510);
  CGPDFOperatorTableSetCallback(a1, "k", (CGPDFOperatorCallback)op_k_20512);
  CGPDFOperatorTableSetCallback(a1, "K", (CGPDFOperatorCallback)op_K_20514);
  CGPDFOperatorTableSetCallback(a1, "l", (CGPDFOperatorCallback)op_l_20516);
  CGPDFOperatorTableSetCallback(a1, "m", (CGPDFOperatorCallback)op_m_20518);
  CGPDFOperatorTableSetCallback(a1, "M", (CGPDFOperatorCallback)op_M_20520);
  CGPDFOperatorTableSetCallback(a1, "n", (CGPDFOperatorCallback)op_n_20522);
  CGPDFOperatorTableSetCallback(a1, "q", (CGPDFOperatorCallback)op_q_20524);
  CGPDFOperatorTableSetCallback(a1, "Q", (CGPDFOperatorCallback)op_Q_20526);
  CGPDFOperatorTableSetCallback(a1, "re", (CGPDFOperatorCallback)op_re_20528);
  CGPDFOperatorTableSetCallback(a1, "rg", (CGPDFOperatorCallback)op_rg_20530);
  CGPDFOperatorTableSetCallback(a1, "RG", (CGPDFOperatorCallback)op_RG_20532);
  CGPDFOperatorTableSetCallback(a1, "s", (CGPDFOperatorCallback)op_s_20534);
  CGPDFOperatorTableSetCallback(a1, "S", (CGPDFOperatorCallback)op_S_20535);
  CGPDFOperatorTableSetCallback(a1, "sc", (CGPDFOperatorCallback)op_scn_20537);
  CGPDFOperatorTableSetCallback(a1, "scn", (CGPDFOperatorCallback)op_scn_20537);
  CGPDFOperatorTableSetCallback(a1, "SC", (CGPDFOperatorCallback)op_SCN_20540);
  CGPDFOperatorTableSetCallback(a1, "SCN", (CGPDFOperatorCallback)op_SCN_20540);
  CGPDFOperatorTableSetCallback(a1, "v", (CGPDFOperatorCallback)op_v_20543);
  CGPDFOperatorTableSetCallback(a1, "w", (CGPDFOperatorCallback)op_w_20545);
  CGPDFOperatorTableSetCallback(a1, "W", (CGPDFOperatorCallback)op_W_20547);
  CGPDFOperatorTableSetCallback(a1, "W*", (CGPDFOperatorCallback)op_Wstar_20549);
  CGPDFOperatorTableSetCallback(a1, "y", (CGPDFOperatorCallback)op_y_20551);
}

void op_b_20473(int a1, CGContextRef c)
{
  if (!CGContextIsPathEmpty(c))
    CGContextClosePath(c);
  CGContextDrawPath(c, kCGPathFillStroke);
}

void op_bstar_20475(int a1, CGContextRef c)
{
  if (!CGContextIsPathEmpty(c))
    CGContextClosePath(c);
  CGContextDrawPath(c, kCGPathEOFillStroke);
}

void op_B_20477(int a1, CGContextRef c)
{
  CGContextDrawPath(c, kCGPathFillStroke);
}

void op_Bstar_20479(int a1, CGContextRef c)
{
  CGContextDrawPath(c, kCGPathEOFillStroke);
}

void op_c_20481(CGPDFScanner *a1, CGContext *a2)
{
  CGFloat y;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;

  v8 = 0.0;
  v6 = 0.0;
  v7 = 0.0;
  v4 = 0.0;
  v5 = 0.0;
  y = 0.0;
  if (common_ReadCGPathCurve(a1, &v8, &v7, &v6, &v5, &v4, &y) && !CGContextIsPathEmpty(a2))
    CGContextAddCurveToPoint(a2, v8, v7, v6, v5, v4, y);
}

void op_cm_20483(CGPDFScanner *a1, CGContext *a2)
{
  CGAffineTransform v3;
  CGAffineTransform v4;

  memset(&v4, 0, sizeof(v4));
  if (common_ReadCGAffineTransform(a1, &v4.a))
  {
    v3 = v4;
    CGContextConcatCTM(a2, &v3);
  }
}

void op_cs_20485(CGPDFScanner *a1, CGContext *a2)
{
  CGColorSpace *ColorSpace;
  CGColorSpace *v4;

  ColorSpace = CGPDFNodeCreateColorSpace(a1);
  if (ColorSpace)
  {
    v4 = ColorSpace;
    CGContextSetFillColorSpace(a2, ColorSpace);
    CGColorSpaceRelease(v4);
  }
}

void op_CS_20487(CGPDFScanner *a1, CGContext *a2)
{
  CGColorSpace *ColorSpace;
  CGColorSpace *v4;

  ColorSpace = CGPDFNodeCreateColorSpace(a1);
  if (ColorSpace)
  {
    v4 = ColorSpace;
    CGContextSetStrokeColorSpace(a2, ColorSpace);
    CGColorSpaceRelease(v4);
  }
}

void op_d_20489(CGPDFScanner *a1, CGContext *a2)
{
  unint64_t v4;
  CGPDFReal *v5;
  size_t v6;
  unsigned int v7;
  CGFloat v9;
  CGContext *v10;
  const CGFloat *v11;
  size_t v12;
  CGPDFReal v13;
  CGPDFReal value;
  CGPDFArrayRef array;

  value = 0.0;
  array = 0;
  if (CGPDFScannerPopNumber(a1, &value) && CGPDFScannerPopArray(a1, &array))
  {
    if (array)
    {
      v4 = *((_QWORD *)array + 2);
      v5 = (CGPDFReal *)malloc_type_malloc(8 * v4, 0x100004000313F17uLL);
      if (v4)
      {
        v6 = 0;
        v7 = 1;
        do
        {
          v13 = 0.0;
          if (!CGPDFArrayGetNumber(array, v6, &v13))
            break;
          v5[v6] = v13;
          v6 = v7;
        }
        while (v4 > v7++);
        if (v4 != v6)
          goto LABEL_13;
        v9 = value;
        v10 = a2;
        v11 = v5;
        v12 = v4;
LABEL_12:
        CGContextSetLineDash(v10, v9, v11, v12);
LABEL_13:
        free(v5);
        return;
      }
    }
    else
    {
      v5 = (CGPDFReal *)malloc_type_malloc(0, 0x100004000313F17uLL);
    }
    v9 = value;
    v10 = a2;
    v11 = v5;
    v12 = 0;
    goto LABEL_12;
  }
}

__n128 op_Do_20491(CGPDFScanner *a1, CGContext *a2)
{
  __n128 result;
  CGPDFContentStream *v5;
  CGPDFObjectRef Resource;
  CGPDFStream *v7;
  CGPDFDictionary *v8;
  char *v9;
  CGPDFContentStreamRef v10;
  CGPDFContentStream *v11;
  CGPDFOperatorTable *v12;
  CGPDFScannerRef v13;
  CGPDFScanner *v14;
  size_t v15;
  CGAffineTransform *v16;
  size_t v17;
  CGAffineTransform *v18;
  CGAffineTransform v24;
  CGPDFArrayRef array;
  CGPDFDictionaryRef streamResources;
  char *__s1;
  char *value;
  CGAffineTransform v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  CGPDFStream *v37;
  uint64_t v38;
  CGAffineTransform v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  CGRect v43;

  v42 = *MEMORY[0x1E0C80C00];
  value = 0;
  if (CGPDFScannerPopName(a1, (const char **)&value))
  {
    v5 = (CGPDFContentStream *)*((_QWORD *)a1 + 7);
    Resource = CGPDFContentStreamGetResource(v5, "XObject", value);
    if (Resource)
    {
      if (*((_DWORD *)Resource + 2) == 9)
      {
        v7 = (CGPDFStream *)*((_QWORD *)Resource + 4);
        if (v7)
        {
          v8 = (CGPDFDictionary *)*((_QWORD *)v7 + 6);
          if (v8)
          {
            __s1 = 0;
            if (CGPDFDictionaryGetName(v8, "Subtype", (const char **)&__s1))
            {
              v9 = __s1;
              if (!strcmp(__s1, "Image"))
              {
                *(_OWORD *)&v29.tx = 0u;
                v30 = 0u;
                *(_OWORD *)&v29.a = 0u;
                *(_OWORD *)&v29.c = CPRangeNull;
                __asm { FMOV            V0.2D, #1.0 }
                v33 = _Q0;
                v39 = CGAffineTransformIdentity;
                LODWORD(v29.a) = 257;
                v31 = 0;
                v32 = 0;
                v34 = 0;
                v35 = 0;
                v36 = 0;
                v37 = v7;
                v38 = 0;
                v40 = 0x3FF0000000000000;
                v41 = 0;
                CGPDFNodeDrawImageInContext((uint64_t)&v29, a2);
              }
              else if (!strcmp(v9, "Form"))
              {
                streamResources = 0;
                if (CGPDFDictionaryGetDictionary(v8, "Resources", &streamResources))
                {
                  v10 = CGPDFContentStreamCreateWithStream(v7, streamResources, v5);
                  if (v10)
                  {
                    v11 = v10;
                    v12 = CGPDFOperatorTableCreate();
                    CGPDFNodeInitOperatorTable();
                    v13 = CGPDFScannerCreate(v11, v12, a2);
                    if (v13)
                    {
                      v14 = v13;
                      CGContextSaveGState(a2);
                      array = 0;
                      if (CGPDFDictionaryGetArray(v8, "Matrix", &array))
                      {
                        v15 = 0;
                        v16 = &v29;
                        while (CGPDFArrayGetNumber(array, v15, &v16->a))
                        {
                          ++v15;
                          v16 = (CGAffineTransform *)((char *)v16 + 8);
                          if (v15 == 6)
                          {
                            v24 = v29;
                            CGContextConcatCTM(a2, &v24);
                            break;
                          }
                        }
                      }
                      if (CGPDFDictionaryGetArray(v8, "BBox", &array))
                      {
                        v17 = 0;
                        v18 = &v29;
                        while (CGPDFArrayGetNumber(array, v17, &v18->a))
                        {
                          ++v17;
                          v18 = (CGAffineTransform *)((char *)v18 + 8);
                          if (v17 == 4)
                          {
                            v43.origin.x = v29.a;
                            v43.origin.y = v29.b;
                            v43.size.width = v29.c - v29.a;
                            v43.size.height = v29.d - v29.b;
                            CGContextClipToRect(a2, v43);
                            break;
                          }
                        }
                      }
                      CGPDFScannerScan(v14);
                      CGContextRestoreGState(a2);
                      CFRelease(v14);
                    }
                    if (v12)
                      CFRelease(v12);
                    CFRelease(v11);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 op_EI_20493(CGPDFScanner *a1, CGContext *a2)
{
  __n128 result;
  _OWORD v9[4];
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CGPDFStreamRef v16;
  uint64_t v17;
  CGAffineTransform v18;
  uint64_t v19;
  uint64_t v20;
  CGPDFStreamRef value;

  value = 0;
  if (CGPDFScannerPopStream(a1, &value))
  {
    memset(&v9[2], 0, 32);
    v9[0] = 0u;
    v9[1] = CPRangeNull;
    LODWORD(v9[0]) = 257;
    v10 = 0;
    v11 = 0;
    __asm { FMOV            V0.2D, #1.0 }
    v12 = _Q0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = value;
    v18 = CGAffineTransformIdentity;
    v17 = 0;
    v19 = 0x3FF0000000000000;
    v20 = 0;
    CGPDFNodeDrawImageInContext((uint64_t)v9, a2);
  }
  return result;
}

void op_f_20495(int a1, CGContextRef c)
{
  CGContextDrawPath(c, kCGPathFill);
}

void op_fstar_20497(int a1, CGContextRef c)
{
  CGContextDrawPath(c, kCGPathEOFill);
}

void op_g_20500(CGPDFScanner *a1, CGContext *a2)
{
  _BOOL4 v3;
  double v4;
  CGColorSpace *DeviceGray;
  double v6;
  CGFloat components[3];

  components[2] = *(CGFloat *)MEMORY[0x1E0C80C00];
  v6 = 0.0;
  components[1] = 1.0;
  v3 = CGPDFScannerPopNumber(a1, &v6);
  v4 = v6;
  if (!v3)
    v4 = 0.0;
  components[0] = v4;
  DeviceGray = CGColorSpaceCreateDeviceGray();
  CGContextSetFillColorSpace(a2, DeviceGray);
  CGContextSetFillColor(a2, components);
  CGColorSpaceRelease(DeviceGray);
}

void op_G_20502(CGPDFScanner *a1, CGContext *a2)
{
  _BOOL4 v3;
  double v4;
  CGColorSpace *DeviceGray;
  double v6;
  CGFloat components[3];

  components[2] = *(CGFloat *)MEMORY[0x1E0C80C00];
  v6 = 0.0;
  components[1] = 1.0;
  v3 = CGPDFScannerPopNumber(a1, &v6);
  v4 = v6;
  if (!v3)
    v4 = 0.0;
  components[0] = v4;
  DeviceGray = CGColorSpaceCreateDeviceGray();
  CGContextSetStrokeColorSpace(a2, DeviceGray);
  CGContextSetStrokeColor(a2, components);
  CGColorSpaceRelease(DeviceGray);
}

void op_gs_20504(CGPDFScanner *a1, CGContext *a2)
{
  CGPDFContentStream *v4;
  CGPDFObjectRef Resource;
  CGPDFDictionary *v6;
  unint64_t v7;
  CGPDFReal *v8;
  size_t v9;
  unsigned int v10;
  CGFloat v12;
  CGContext *v13;
  const CGFloat *v14;
  size_t v15;
  CGPDFReal v16;
  CGPDFReal phase;
  CGPDFArrayRef v18;
  CGPDFArrayRef array;
  CGPDFInteger v20;
  CGPDFReal alpha;
  char *value;

  value = 0;
  if (CGPDFScannerPopName(a1, (const char **)&value))
  {
    v4 = (CGPDFContentStream *)*((_QWORD *)a1 + 7);
    if (v4)
    {
      Resource = CGPDFContentStreamGetResource(v4, "ExtGState", value);
      if (Resource)
      {
        if (*((_DWORD *)Resource + 2) == 8)
        {
          v6 = (CGPDFDictionary *)*((_QWORD *)Resource + 4);
          alpha = 0.0;
          if (CGPDFDictionaryGetNumber(v6, "ca", &alpha))
            CGContextSetAlpha(a2, alpha);
          if (CGPDFDictionaryGetNumber(v6, "CA", &alpha))
            CGContextSetAlpha(a2, alpha);
          if (CGPDFDictionaryGetNumber(v6, "LW", &alpha))
            CGContextSetLineWidth(a2, alpha);
          if (CGPDFDictionaryGetNumber(v6, "ML", &alpha))
            CGContextSetMiterLimit(a2, alpha);
          v20 = 0;
          if (CGPDFDictionaryGetInteger(v6, "LC", &v20) && (unint64_t)v20 <= 2)
            CGContextSetLineCap(a2, (CGLineCap)v20);
          if (CGPDFDictionaryGetInteger(v6, "LJ", &v20) && (unint64_t)v20 <= 2)
            CGContextSetLineJoin(a2, (CGLineJoin)v20);
          array = 0;
          if (CGPDFDictionaryGetArray(v6, "D", &array))
          {
            phase = 0.0;
            v18 = 0;
            if (CGPDFArrayGetArray(array, 0, &v18) && CGPDFArrayGetNumber(array, 1uLL, &phase))
            {
              if (v18)
              {
                v7 = *((_QWORD *)v18 + 2);
                v8 = (CGPDFReal *)malloc_type_malloc(8 * v7, 0x100004000313F17uLL);
                if (v7)
                {
                  v9 = 0;
                  v10 = 1;
                  do
                  {
                    v16 = 0.0;
                    if (!CGPDFArrayGetNumber(v18, v9, &v16))
                      break;
                    v8[v9] = v16;
                    v9 = v10;
                  }
                  while (v7 > v10++);
                  if (v7 != v9)
                    goto LABEL_32;
                  v12 = phase;
                  v13 = a2;
                  v14 = v8;
                  v15 = v7;
LABEL_31:
                  CGContextSetLineDash(v13, v12, v14, v15);
LABEL_32:
                  free(v8);
                  return;
                }
              }
              else
              {
                v8 = (CGPDFReal *)malloc_type_malloc(0, 0x100004000313F17uLL);
              }
              v12 = phase;
              v13 = a2;
              v14 = v8;
              v15 = 0;
              goto LABEL_31;
            }
          }
        }
      }
    }
  }
}

void op_h_20506(int a1, CGContextRef c)
{
  if (!CGContextIsPathEmpty(c))
    CGContextClosePath(c);
}

void op_j_20508(CGPDFScanner *a1, CGContext *a2)
{
  CGPDFInteger value;

  value = 0;
  if (CGPDFScannerPopInteger(a1, &value) && (unint64_t)value <= 2)
    CGContextSetLineJoin(a2, (CGLineJoin)value);
}

void op_J_20510(CGPDFScanner *a1, CGContext *a2)
{
  CGPDFInteger value;

  value = 0;
  if (CGPDFScannerPopInteger(a1, &value) && (unint64_t)value <= 2)
    CGContextSetLineCap(a2, (CGLineCap)value);
}

void op_k_20512(CGPDFScanner *a1, CGContext *a2)
{
  _BOOL4 v4;
  double v5;
  _BOOL4 v6;
  double v7;
  _BOOL4 v8;
  double v9;
  _BOOL4 v10;
  double v11;
  CGColorSpace *DeviceCMYK;
  CGPDFReal value;
  CGFloat components[6];

  components[5] = *(CGFloat *)MEMORY[0x1E0C80C00];
  value = 0.0;
  components[4] = 1.0;
  v4 = CGPDFScannerPopNumber(a1, &value);
  v5 = value;
  if (!v4)
    v5 = 1.0;
  components[3] = v5;
  v6 = CGPDFScannerPopNumber(a1, &value);
  v7 = value;
  if (!v6)
    v7 = 0.0;
  components[2] = v7;
  v8 = CGPDFScannerPopNumber(a1, &value);
  v9 = value;
  if (!v8)
    v9 = 0.0;
  components[1] = v9;
  v10 = CGPDFScannerPopNumber(a1, &value);
  v11 = value;
  if (!v10)
    v11 = 0.0;
  components[0] = v11;
  DeviceCMYK = CGColorSpaceCreateDeviceCMYK();
  CGContextSetFillColorSpace(a2, DeviceCMYK);
  CGContextSetFillColor(a2, components);
  CGColorSpaceRelease(DeviceCMYK);
}

void op_K_20514(CGPDFScanner *a1, CGContext *a2)
{
  _BOOL4 v4;
  double v5;
  _BOOL4 v6;
  double v7;
  _BOOL4 v8;
  double v9;
  _BOOL4 v10;
  double v11;
  CGColorSpace *DeviceCMYK;
  CGPDFReal value;
  CGFloat components[6];

  components[5] = *(CGFloat *)MEMORY[0x1E0C80C00];
  value = 0.0;
  components[4] = 1.0;
  v4 = CGPDFScannerPopNumber(a1, &value);
  v5 = value;
  if (!v4)
    v5 = 1.0;
  components[3] = v5;
  v6 = CGPDFScannerPopNumber(a1, &value);
  v7 = value;
  if (!v6)
    v7 = 0.0;
  components[2] = v7;
  v8 = CGPDFScannerPopNumber(a1, &value);
  v9 = value;
  if (!v8)
    v9 = 0.0;
  components[1] = v9;
  v10 = CGPDFScannerPopNumber(a1, &value);
  v11 = value;
  if (!v10)
    v11 = 0.0;
  components[0] = v11;
  DeviceCMYK = CGColorSpaceCreateDeviceCMYK();
  CGContextSetStrokeColorSpace(a2, DeviceCMYK);
  CGContextSetStrokeColor(a2, components);
  CGColorSpaceRelease(DeviceCMYK);
}

void op_l_20516(CGPDFScanner *a1, CGContext *a2)
{
  CGFloat v4;
  CGPDFReal value;

  v4 = 0.0;
  value = 0.0;
  if (CGPDFScannerPopNumber(a1, &v4) && CGPDFScannerPopNumber(a1, &value) && !CGContextIsPathEmpty(a2))
    CGContextAddLineToPoint(a2, value, v4);
}

void op_m_20518(CGPDFScanner *a1, CGContext *a2)
{
  CGFloat v4;
  CGFloat y;
  CGPDFReal value;

  y = 0.0;
  value = 0.0;
  if (!CGPDFScannerPopNumber(a1, &y))
    y = 0.0;
  if (CGPDFScannerPopNumber(a1, &value))
  {
    v4 = value;
  }
  else
  {
    value = 0.0;
    v4 = 0.0;
  }
  CGContextMoveToPoint(a2, v4, y);
}

void op_M_20520(CGPDFScanner *a1, CGContext *a2)
{
  CGPDFReal value;

  value = 0.0;
  if (CGPDFScannerPopNumber(a1, &value))
    CGContextSetMiterLimit(a2, value);
}

void op_n_20522(int a1, CGContextRef c)
{
  CGContextBeginPath(c);
}

void op_q_20524(int a1, CGContextRef c)
{
  CGContextSaveGState(c);
}

void op_Q_20526(int a1, CGContextRef c)
{
  CGContextRestoreGState(c);
}

void op_re_20528(CGPDFScanner *a1, CGContext *a2)
{
  CGRect v3;

  memset(&v3, 0, sizeof(v3));
  if (common_ReadCGRect(a1, &v3.origin.x))
    CGContextAddRect(a2, v3);
}

void op_rg_20530(CGPDFScanner *a1, CGContext *a2)
{
  _BOOL4 v4;
  double v5;
  _BOOL4 v6;
  double v7;
  _BOOL4 v8;
  double v9;
  CGColorSpace *DeviceRGB;
  double v11;
  CGFloat components[5];

  components[4] = *(CGFloat *)MEMORY[0x1E0C80C00];
  v11 = 0.0;
  components[3] = 1.0;
  v4 = CGPDFScannerPopNumber(a1, &v11);
  v5 = v11;
  if (!v4)
    v5 = 0.0;
  components[2] = v5;
  v6 = CGPDFScannerPopNumber(a1, &v11);
  v7 = v11;
  if (!v6)
    v7 = 0.0;
  components[1] = v7;
  v8 = CGPDFScannerPopNumber(a1, &v11);
  v9 = v11;
  if (!v8)
    v9 = 0.0;
  components[0] = v9;
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  CGContextSetFillColorSpace(a2, DeviceRGB);
  CGContextSetFillColor(a2, components);
  CGColorSpaceRelease(DeviceRGB);
}

void op_RG_20532(CGPDFScanner *a1, CGContext *a2)
{
  _BOOL4 v4;
  double v5;
  _BOOL4 v6;
  double v7;
  _BOOL4 v8;
  double v9;
  CGColorSpace *DeviceRGB;
  double v11;
  CGFloat components[5];

  components[4] = *(CGFloat *)MEMORY[0x1E0C80C00];
  v11 = 0.0;
  components[3] = 1.0;
  v4 = CGPDFScannerPopNumber(a1, &v11);
  v5 = v11;
  if (!v4)
    v5 = 0.0;
  components[2] = v5;
  v6 = CGPDFScannerPopNumber(a1, &v11);
  v7 = v11;
  if (!v6)
    v7 = 0.0;
  components[1] = v7;
  v8 = CGPDFScannerPopNumber(a1, &v11);
  v9 = v11;
  if (!v8)
    v9 = 0.0;
  components[0] = v9;
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  CGContextSetStrokeColorSpace(a2, DeviceRGB);
  CGContextSetStrokeColor(a2, components);
  CGColorSpaceRelease(DeviceRGB);
}

void op_s_20534(int a1, CGContextRef c)
{
  if (!CGContextIsPathEmpty(c))
    CGContextClosePath(c);
  CGContextDrawPath(c, kCGPathStroke);
}

void op_S_20535(int a1, CGContextRef c)
{
  CGContextDrawPath(c, kCGPathStroke);
}

void op_scn_20537(uint64_t a1, CGContext *a2)
{
  CGPDFNodeDrawColor(a1, a2, 0);
}

void op_SCN_20540(uint64_t a1, CGContext *a2)
{
  CGPDFNodeDrawColor(a1, a2, 1);
}

void op_v_20543(CGPDFScanner *a1, CGContext *a2)
{
  CGPoint PathCurrentPoint;
  CGFloat v5;
  CGPDFReal value;
  CGPDFReal v7;
  CGPDFReal v8;

  v7 = 0.0;
  v8 = 0.0;
  v5 = 0.0;
  value = 0.0;
  if (CGPDFScannerPopNumber(a1, &v5)
    && CGPDFScannerPopNumber(a1, &value)
    && CGPDFScannerPopNumber(a1, &v7)
    && CGPDFScannerPopNumber(a1, &v8)
    && !CGContextIsPathEmpty(a2))
  {
    PathCurrentPoint = CGContextGetPathCurrentPoint(a2);
    CGContextAddCurveToPoint(a2, PathCurrentPoint.x, PathCurrentPoint.y, v8, v7, value, v5);
  }
}

void op_w_20545(CGPDFScanner *a1, CGContext *a2)
{
  CGPDFReal value;

  value = 0.0;
  if (CGPDFScannerPopNumber(a1, &value))
    CGContextSetLineWidth(a2, value);
}

void op_W_20547(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  clip(a2, 0, a3, a4, a5, a6, a7, a8);
}

void op_Wstar_20549(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  clip(a2, 1, a3, a4, a5, a6, a7, a8);
}

void op_y_20551(CGPDFScanner *a1, CGContext *a2)
{
  CGFloat v4;
  CGPDFReal value;
  CGPDFReal v6;
  CGPDFReal v7;

  v6 = 0.0;
  v7 = 0.0;
  v4 = 0.0;
  value = 0.0;
  if (CGPDFScannerPopNumber(a1, &v4)
    && CGPDFScannerPopNumber(a1, &value)
    && CGPDFScannerPopNumber(a1, &v6)
    && CGPDFScannerPopNumber(a1, &v7)
    && !CGContextIsPathEmpty(a2))
  {
    CGContextAddCurveToPoint(a2, v7, v6, value, v4, value, v4);
  }
}

void CGPDFNodeDrawColor(uint64_t a1, CGContext *a2, int a3)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  double v9;
  double *v10;
  CGPDFObjectRef Resource;
  int v12;
  CGPDFContentStream *v13;
  CGPattern *v14;
  CGPattern *v15;
  CGPatternCallbacks v16;
  CGPDFReal value;
  CGRect v18;

  value = 0.0;
  v3 = *(_DWORD *)(a1 + 72);
  if (v3 <= 0)
  {
    pdf_error("stack underflow.");
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 80);
    v6 = v3 - 1;
    *(_DWORD *)(a1 + 72) = v6;
    if (v5)
    {
      switch(*(_DWORD *)(v5 + 40 * v6 + 8))
      {
        case 3:
        case 0xC:
          v9 = (double)*(uint64_t *)(v5 + 40 * v6 + 32);
          goto LABEL_7;
        case 4:
          v9 = *(double *)(v5 + 40 * v6 + 32);
LABEL_7:
          value = v9;
          v10 = (double *)malloc_type_malloc(0x28uLL, 0x100004000313F17uLL);
          Resource = 0;
          v10[1] = 1.0;
          *v10 = v9;
          v12 = 1;
          goto LABEL_15;
        case 5:
          v13 = *(CGPDFContentStream **)(a1 + 56);
          if (v13)
            Resource = CGPDFContentStreamGetResource(v13, "Pattern", *(const char **)(v5 + 40 * v6 + 32));
          else
            Resource = 0;
          v10 = (double *)malloc_type_malloc(0x28uLL, 0x100004000313F17uLL);
          v12 = 0;
          *v10 = 1.0;
LABEL_15:
          while (CGPDFScannerPopNumber((CGPDFScannerRef)a1, &value))
          {
            if ((v12 + 1) >= 5)
              v10 = (double *)malloc_type_realloc(v10, 8 * (v12 + 2), 0x100004000313F17uLL);
            memmove(v10 + 1, v10, 8 * (v12 + 1));
            *v10 = value;
            ++v12;
          }
          if (Resource)
          {
            *(_OWORD *)&v16.version = xmmword_1E1662798;
            v16.releaseInfo = 0;
            v18.origin.x = 0.0;
            v18.origin.y = 0.0;
            v18.size.width = 1.0;
            v18.size.height = 1.0;
            v14 = CGPatternCreate(0, v18, (CGAffineTransform *)&CGAffineTransformIdentity, 1.0, 1.0, kCGPatternTilingConstantSpacingMinimalDistortion, v12 == 0, &v16);
            if (v14)
            {
              v15 = v14;
              if (a3)
                CGContextSetStrokePattern(a2, v14, v10);
              else
                CGContextSetFillPattern(a2, v14, v10);
              CFRelease(v15);
            }
          }
          else if (a3)
          {
            CGContextSetStrokeColor(a2, v10);
          }
          else
          {
            CGContextSetFillColor(a2, v10);
          }
          free(v10);
          break;
        default:
          return;
      }
    }
  }
}

CGPDFContentStream *CGPDFNodeCreateColorSpace(CGPDFScanner *a1)
{
  _BOOL4 v2;
  CGPDFContentStream *result;
  CGColorSpaceRef v4;
  char *value;

  value = 0;
  v2 = CGPDFScannerPopName(a1, (const char **)&value);
  result = 0;
  if (v2)
  {
    if (value)
    {
      v4 = 0;
      CreateColorSpaceFromName(value, &v4);
      result = v4;
      if (!v4)
      {
        result = (CGPDFContentStream *)*((_QWORD *)a1 + 7);
        if (result)
        {
          result = CGPDFContentStreamGetResource(result, "ColorSpace", value);
          if (result)
          {
            CreateColorSpaceFromObject(result, &v4);
            return v4;
          }
        }
      }
    }
  }
  return result;
}

CFStringRef CGPDFNodeCreateImageName(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (!a1)
    return 0;
  v1 = a1;
  while (*(_DWORD *)v1 != 517)
  {
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      return 0;
  }
  v2 = *(_QWORD *)(v1 + 104);
  if (v2 && (v3 = *(_QWORD *)(v2 + 16)) != 0)
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("page%uimage%u"), *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8), a1);
  else
    return 0;
}

uint64_t CGPDFNodeHasRectClips(uint64_t a1)
{
  uint64_t v1;
  const CGPath *v2;
  uint64_t v3;

  if ((*(_BYTE *)(a1 + 1) & 1) == 0)
    return 1;
  v1 = *(_QWORD *)(a1 + 104);
  if (!v1)
    return 1;
  do
  {
    v2 = *(const CGPath **)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v1 + 8));
      v3 = (uint64_t)CGPathIsCongruentToARect(v2);
      CFRelease(v2);
    }
    else
    {
      v3 = 1;
    }
    v1 = *(_QWORD *)(v1 + 24);
  }
  while (v1 && (v3 & 1) != 0);
  return v3;
}

BOOL CGPDFNodeIsEvenOddShape(_BOOL8 result)
{
  if (result)
    return *(_DWORD *)result == 258 && *(_BYTE *)(result + 136) != 0;
  return result;
}

double CGPDFNodeGetShapeLineWidth(uint64_t a1)
{
  double result;

  result = 0.0;
  if (a1)
  {
    if (*(_DWORD *)a1 == 258)
      return *(double *)(a1 + 144);
  }
  return result;
}

double CGPDFNodeGetShapeMiterLimit(uint64_t a1)
{
  double result;

  result = 0.0;
  if (a1)
  {
    if (*(_DWORD *)a1 == 258)
      return *(double *)(a1 + 152);
  }
  return result;
}

_DWORD *CGPDFNodeGetShapeLineCap(_DWORD *result)
{
  if (result)
  {
    if (*result == 258)
      return (_DWORD *)result[40];
    else
      return 0;
  }
  return result;
}

_DWORD *CGPDFNodeGetShapeLineJoin(_DWORD *result)
{
  if (result)
  {
    if (*result == 258)
      return (_DWORD *)result[41];
    else
      return 0;
  }
  return result;
}

uint64_t CGPDFNodeGetShapeFillColor(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == 258)
      return *(_QWORD *)(result + 168);
    else
      return 0;
  }
  return result;
}

uint64_t CGPDFNodeGetShapeStrokeColor(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == 258)
      return *(_QWORD *)(result + 176);
    else
      return 0;
  }
  return result;
}

uint64_t CGPDFNodeGetClip(uint64_t result)
{
  if (result)
  {
    if ((*(_BYTE *)(result + 1) & 1) != 0)
      return *(_QWORD *)(result + 104);
    else
      return 0;
  }
  return result;
}

uint64_t CGPDFNodeClipGetNextClip(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

uint64_t CGPDFNodeClipCreatePath(uint64_t a1)
{
  uint64_t v1;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
    CFRetain(*(CFTypeRef *)(a1 + 8));
  return v1;
}

BOOL CGPDFNodeClipIsEvenOdd(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 16) != 0;
  return result;
}

uint64_t CGPDFNodeGetListStyle(uint64_t result)
{
  _DWORD *v1;

  if (result)
  {
    while (1)
    {
      if (*(_DWORD *)result == 1537)
      {
        v1 = *(_DWORD **)(result + 104);
        if (v1)
        {
          if (*v1 == 1)
            break;
        }
      }
      result = *(_QWORD *)(result + 8);
      if (!result)
        return result;
    }
    return v1[1];
  }
  return result;
}

uint64_t CGPDFNodeGetAncestorOfTypeAndSubType(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  _DWORD *v4;

  v3 = 0;
  if (a1 && (a2 & 0x400) != 0)
  {
    while (1)
    {
      if (*(_DWORD *)a1 == a2)
      {
        v4 = *(_DWORD **)(a1 + 104);
        if (v4)
        {
          if (*v4 == a3)
            break;
        }
      }
      a1 = *(_QWORD *)(a1 + 8);
      if (!a1)
        return 0;
    }
    return a1;
  }
  return v3;
}

uint64_t CGPDFNodeGetListFirstItemNumber(uint64_t result)
{
  _DWORD *v1;

  if (result)
  {
    while (1)
    {
      if (*(_DWORD *)result == 1537)
      {
        v1 = *(_DWORD **)(result + 104);
        if (v1)
        {
          if (*v1 == 1)
            break;
        }
      }
      result = *(_QWORD *)(result + 8);
      if (!result)
        return result;
    }
    return v1[4];
  }
  return result;
}

uint64_t CGPDFNodeGetListFirstParagraph(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    while (1)
    {
      if (*(_DWORD *)result == 1537)
      {
        v1 = *(_QWORD *)(result + 104);
        if (v1)
        {
          if (*(_DWORD *)v1 == 1)
            break;
        }
      }
      result = *(_QWORD *)(result + 8);
      if (!result)
        return result;
    }
    return *(_QWORD *)(v1 + 8);
  }
  return result;
}

uint64_t CGPDFNodeGetListItemCount(uint64_t result)
{
  _DWORD *v1;

  if (result)
  {
    while (1)
    {
      if (*(_DWORD *)result == 1537)
      {
        v1 = *(_DWORD **)(result + 104);
        if (v1)
        {
          if (*v1 == 1)
            break;
        }
      }
      result = *(_QWORD *)(result + 8);
      if (!result)
        return result;
    }
    return v1[5];
  }
  return result;
}

uint64_t CGPDFNodeGetItemParagraphCount(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  if (result)
  {
    while (1)
    {
      if (*(_DWORD *)result == 1537)
      {
        v2 = *(_QWORD *)(result + 104);
        if (v2)
        {
          if (*(_DWORD *)v2 == 1)
            break;
        }
      }
      result = *(_QWORD *)(result + 8);
      if (!result)
        return result;
    }
    if (*(_DWORD *)(v2 + 20) <= a2)
    {
      return 0;
    }
    else
    {
      v3 = *(_QWORD *)(v2 + 24);
      v4 = *(_DWORD *)(v3 + 4 * a2);
      if (a2)
        return (v4 - *(_DWORD *)(v3 + 4 * (a2 - 1)));
      else
        return (v4 + 1);
    }
  }
  return result;
}

uint64_t CGPDFNodeGetItemMarkerRange(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v3;

  if (!a1)
    return CGPDFNodeGetTextRange(a1);
  while (1)
  {
    if (*(_DWORD *)a1 == 1537)
    {
      v1 = *(_DWORD **)(a1 + 104);
      if (v1)
      {
        if (*v1 == 1)
          break;
      }
    }
    a1 = *(_QWORD *)(a1 + 8);
    if (!a1)
      return CGPDFNodeGetTextRange(a1);
  }
  if (*(_DWORD *)(a1 + 44)
    && (v3 = **(_QWORD **)(a1 + 56)) != 0
    && (*(_BYTE *)(v3 + 1) & 2) != 0
    && *(_DWORD *)(v3 + 44))
  {
    return CGPDFNodeGetTextRange(**(_QWORD **)(v3 + 56));
  }
  else
  {
    return CGPDFNodeGetTextRange(0);
  }
}

uint64_t CGPDFNodeGetItemMarkerPrefixRange(uint64_t result)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    while (1)
    {
      if (*(_DWORD *)result == 1537)
      {
        v1 = *(_DWORD **)(result + 104);
        if (v1)
        {
          if (*v1 == 1)
            break;
        }
      }
      result = *(_QWORD *)(result + 8);
      if (!result)
        return result;
    }
    if (*(_DWORD *)(result + 44)
      && (v2 = **(_QWORD **)(result + 56)) != 0
      && (*(_BYTE *)(v2 + 1) & 2) != 0
      && *(_DWORD *)(v2 + 44))
    {
      v3 = **(_QWORD **)(v2 + 56);
    }
    else
    {
      v3 = 0;
    }
    return CGPDFNodeGetTextRange(v3);
  }
  return result;
}

uint64_t CGPDFNodeGetItemMarkerSuffixRange(uint64_t result)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    while (1)
    {
      if (*(_DWORD *)result == 1537)
      {
        v1 = *(_DWORD **)(result + 104);
        if (v1)
        {
          if (*v1 == 1)
            break;
        }
      }
      result = *(_QWORD *)(result + 8);
      if (!result)
        return result;
    }
    if (*(_DWORD *)(result + 44)
      && (v2 = **(_QWORD **)(result + 56)) != 0
      && (*(_BYTE *)(v2 + 1) & 2) != 0
      && *(_DWORD *)(v2 + 44))
    {
      v3 = **(_QWORD **)(v2 + 56);
    }
    else
    {
      v3 = 0;
    }
    result = CGPDFNodeGetTextRange(v3);
    v5 = v4;
    v6 = v1[9];
    if (v5 > v6)
      return result + v5 - v6;
  }
  return result;
}

uint64_t CGPDFNodeGetTableRowCount(uint64_t result)
{
  _DWORD *v1;

  if (result)
  {
    while (1)
    {
      if (*(_DWORD *)result == 1538)
      {
        v1 = *(_DWORD **)(result + 104);
        if (v1)
        {
          if (*v1 == 3)
            break;
        }
      }
      result = *(_QWORD *)(result + 8);
      if (!result)
        return result;
    }
    return v1[1];
  }
  return result;
}

uint64_t CGPDFNodeGetTableRowDividerPositions(uint64_t result, void *__dst)
{
  uint64_t v2;
  int v3;

  if (result)
  {
    while (1)
    {
      if (*(_DWORD *)result == 1538)
      {
        v2 = *(_QWORD *)(result + 104);
        if (v2)
        {
          if (*(_DWORD *)v2 == 3)
            break;
        }
      }
      result = *(_QWORD *)(result + 8);
      if (!result)
        return result;
    }
    v3 = *(_DWORD *)(v2 + 4);
    if (v3)
    {
      memcpy(__dst, *(const void **)(v2 + 8), 8 * (v3 + 1));
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CGPDFNodeGetTableColumnCount(uint64_t result)
{
  _DWORD *v1;

  if (result)
  {
    while (1)
    {
      if (*(_DWORD *)result == 1538)
      {
        v1 = *(_DWORD **)(result + 104);
        if (v1)
        {
          if (*v1 == 3)
            break;
        }
      }
      result = *(_QWORD *)(result + 8);
      if (!result)
        return result;
    }
    return v1[4];
  }
  return result;
}

uint64_t CGPDFNodeGetTableColumnDividerPositions(uint64_t result, void *__dst)
{
  uint64_t v2;
  int v3;

  if (result)
  {
    while (1)
    {
      if (*(_DWORD *)result == 1538)
      {
        v2 = *(_QWORD *)(result + 104);
        if (v2)
        {
          if (*(_DWORD *)v2 == 3)
            break;
        }
      }
      result = *(_QWORD *)(result + 8);
      if (!result)
        return result;
    }
    v3 = *(_DWORD *)(v2 + 16);
    if (v3)
    {
      memcpy(__dst, *(const void **)(v2 + 24), 8 * (v3 + 1));
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CGPDFNodeGetTableGraphicNodeCount(uint64_t result)
{
  _DWORD *v1;

  if (result)
  {
    while (1)
    {
      if (*(_DWORD *)result == 1538)
      {
        v1 = *(_DWORD **)(result + 104);
        if (v1)
        {
          if (*v1 == 3)
            break;
        }
      }
      result = *(_QWORD *)(result + 8);
      if (!result)
        return result;
    }
    return v1[8];
  }
  return result;
}

uint64_t CGPDFNodeGetTableGraphicNodes(uint64_t result, void *__dst)
{
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    while (1)
    {
      if (*(_DWORD *)result == 1538)
      {
        v2 = *(_QWORD *)(result + 104);
        if (v2)
        {
          if (*(_DWORD *)v2 == 3)
            break;
        }
      }
      result = *(_QWORD *)(result + 8);
      if (!result)
        return result;
    }
    v3 = *(unsigned int *)(v2 + 32);
    if ((_DWORD)v3)
    {
      memcpy(__dst, *(const void **)(v2 + 40), 8 * v3);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CGPDFNodeGetTableBackgroundColor(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    while (1)
    {
      if (*(_DWORD *)result == 1538)
      {
        v1 = *(_QWORD *)(result + 104);
        if (v1)
        {
          if (*(_DWORD *)v1 == 3)
            break;
        }
      }
      result = *(_QWORD *)(result + 8);
      if (!result)
        return result;
    }
    return *(_QWORD *)(v1 + 48);
  }
  return result;
}

uint64_t CGPDFNodeGetTableHasHeaderRow(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    while (1)
    {
      if (*(_DWORD *)result == 1538)
      {
        v1 = *(_QWORD *)(result + 104);
        if (v1)
        {
          if (*(_DWORD *)v1 == 3)
            break;
        }
      }
      result = *(_QWORD *)(result + 8);
      if (!result)
        return result;
    }
    return *(unsigned __int8 *)(v1 + 56) != 0;
  }
  return result;
}

uint64_t CGPDFNodeGetTableCellRowSpan(uint64_t a1)
{
  __int128 *v1;
  _DWORD *v2;

  v1 = &CPRangeNull;
  if (a1)
  {
    while (1)
    {
      if (*(_DWORD *)a1 == 1538)
      {
        v2 = *(_DWORD **)(a1 + 104);
        if (v2)
        {
          if (*v2 == 2)
            break;
        }
      }
      a1 = *(_QWORD *)(a1 + 8);
      if (!a1)
        return *(_QWORD *)v1;
    }
    v1 = (__int128 *)(v2 + 2);
  }
  return *(_QWORD *)v1;
}

uint64_t CGPDFNodeGetTableCellColumnSpan(uint64_t a1)
{
  __int128 *v1;
  _DWORD *v2;

  v1 = &CPRangeNull;
  if (a1)
  {
    while (1)
    {
      if (*(_DWORD *)a1 == 1538)
      {
        v2 = *(_DWORD **)(a1 + 104);
        if (v2)
        {
          if (*v2 == 2)
            break;
        }
      }
      a1 = *(_QWORD *)(a1 + 8);
      if (!a1)
        return *(_QWORD *)v1;
    }
    v1 = (__int128 *)(v2 + 6);
  }
  return *(_QWORD *)v1;
}

CGFloat CGPDFNodeGetTableCellBorderBounds(uint64_t a1, int a2)
{
  const CGRect *v2;
  uint64_t v3;
  uint64_t v4;

  if (!a1)
    goto LABEL_10;
  v2 = &CGRectNull;
  do
  {
    if (*(_DWORD *)a1 == 1538)
    {
      v3 = *(_QWORD *)(a1 + 104);
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          break;
      }
    }
    a1 = *(_QWORD *)(a1 + 8);
  }
  while (a1);
  v4 = *(_QWORD *)(v3 + 40);
  if (v4)
    v2 = (const CGRect *)(v4 + 40 * a2);
  else
LABEL_10:
    v2 = &CGRectNull;
  return v2->origin.x;
}

uint64_t CGPDFNodeGetTableCellBorderColor(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    while (1)
    {
      if (*(_DWORD *)result == 1538)
      {
        v2 = *(_QWORD *)(result + 104);
        if (v2)
        {
          if (*(_DWORD *)v2 == 2)
            break;
        }
      }
      result = *(_QWORD *)(result + 8);
      if (!result)
        return result;
    }
    v3 = *(_QWORD *)(v2 + 40);
    if (v3)
      return *(_QWORD *)(v3 + 40 * a2 + 32);
    else
      return 0;
  }
  return result;
}

uint64_t CGPDFNodeGetTableCellBackgroundColor(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    while (1)
    {
      if (*(_DWORD *)result == 1538)
      {
        v1 = *(_QWORD *)(result + 104);
        if (v1)
        {
          if (*(_DWORD *)v1 == 2)
            break;
        }
      }
      result = *(_QWORD *)(result + 8);
      if (!result)
        return result;
    }
    return *(_QWORD *)(v1 + 48);
  }
  return result;
}

uint64_t CGPDFNodeGetSectionBackgroundColor(uint64_t result)
{
  if (result)
  {
    while (*(_DWORD *)result != 1538)
    {
      result = *(_QWORD *)(result + 8);
      if (!result)
        return result;
    }
    return *(_QWORD *)(result + 112);
  }
  return result;
}

uint64_t CGPDFNodeGetBackgroundColor(uint64_t a1)
{
  _DWORD *v1;
  uint64_t *v2;
  uint64_t v3;

  if (!a1)
    return 0;
  while (1)
  {
    if (*(_DWORD *)a1 == 1538)
    {
      v1 = *(_DWORD **)(a1 + 104);
      if (v1 && (*v1 == 2 || *v1 == 3))
        v2 = (uint64_t *)(v1 + 12);
      else
        v2 = (uint64_t *)(a1 + 112);
      v3 = *v2;
      if (v3)
        break;
    }
    a1 = *(_QWORD *)(a1 + 8);
    if (!a1)
      return 0;
  }
  return v3;
}

uint64_t CGPDFNodeGetNodeContainingTextRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t TextRange;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = 0;
  if (!a1 || !a3)
    return result;
  TextRange = CGPDFNodeGetTextRange(a1);
  if (!v8)
  {
    v13 = *(_DWORD *)a1;
LABEL_30:
    if (v13 != 517 || a2 < 0)
      return 0;
    v17 = *(_QWORD *)(a1 + 104);
    if (v17)
      v17 = *(_QWORD *)(v17 + 48);
    result = a1;
    if (a2 + a3 > v17)
      return 0;
    return result;
  }
  if (v8 <= 0)
    v9 = TextRange + v8;
  else
    v9 = TextRange;
  if (v8 <= 0)
    v10 = TextRange;
  else
    v10 = TextRange + v8;
  if (a3 <= 0)
    v11 = a2 + a3;
  else
    v11 = a2;
  if (a3 <= 0)
    v12 = a2;
  else
    v12 = a2 + a3;
  v13 = *(_DWORD *)a1;
  if (v9 > v11 || v10 < v12)
    goto LABEL_30;
  if (v13 == 513)
    return a1;
  if ((v13 & 0x200) == 0)
    return a1;
  v14 = *(unsigned int *)(a1 + 44);
  if (!(_DWORD)v14)
    return a1;
  v15 = 0;
  while (1)
  {
    v16 = (*(_BYTE *)(a1 + 1) & 2) != 0 && v15 < *(unsigned int *)(a1 + 44)
        ? *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v15)
        : 0;
    result = CGPDFNodeGetNodeContainingTextRange(v16, a2, a3);
    if (result)
      break;
    if (v14 == ++v15)
      return a1;
  }
  return result;
}

_DWORD *CGPDFNodeGetNodeFollowingTextIndex(_DWORD *result, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v4;
  uint64_t TextRange;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  BOOL v10;

  if (result)
  {
    v4 = (uint64_t)result;
    TextRange = CGPDFNodeGetTextRange((uint64_t)result);
    v7 = TextRange + v6;
    if (TextRange + v6 > a2)
    {
      while (1)
      {
        result = (_DWORD *)CGPDFNodeGetNodeContainingTextRange(v4, a2, 1);
        if (!result)
          break;
        v8 = *result;
        v9 = (*result - 257) < 2 || v8 == 1;
        if (!v9 && v8 != 513)
          goto LABEL_11;
LABEL_12:
        v10 = (v8 - 257) < 2 || v8 == 1;
        if (v10 || v8 == 513)
          return result;
        ++a2;
        v2 = result;
        if (v7 == a2)
          return 0;
      }
      v8 = 0;
LABEL_11:
      result = v2;
      goto LABEL_12;
    }
    return 0;
  }
  return result;
}

_DWORD *CGPDFNodeGetNodePrecedingTextIndex(_DWORD *result, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v4;
  uint64_t TextRange;
  uint64_t v6;
  int v7;
  BOOL v8;
  BOOL v9;

  if (result)
  {
    v4 = (uint64_t)result;
    TextRange = CGPDFNodeGetTextRange((uint64_t)result);
    if (TextRange > a2)
      return 0;
    v6 = TextRange;
    while (1)
    {
      result = (_DWORD *)CGPDFNodeGetNodeContainingTextRange(v4, a2, 1);
      if (!result)
        break;
      v7 = *result;
      v8 = (*result - 257) < 2 || v7 == 1;
      if (!v8 && v7 != 513)
        goto LABEL_14;
LABEL_15:
      v9 = (v7 - 257) < 2 || v7 == 1;
      if (v9 || v7 == 513)
        return result;
      v2 = result;
      if (a2-- <= v6)
        return 0;
    }
    v7 = 0;
LABEL_14:
    result = v2;
    goto LABEL_15;
  }
  return result;
}

uint64_t CGPDFNodeGetInlineNode(uint64_t a1)
{
  if (CGPDFNodeIsInlineContainer(a1))
    return *(_QWORD *)(a1 + 64);
  else
    return 0;
}

BOOL CGPDFNodeIsAncestorOfNode(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  v2 = a2 != 0;
  if (a2 != a1 && a2)
  {
    do
    {
      a2 = *(_QWORD *)(a2 + 8);
      v2 = a2 != 0;
    }
    while (a2 != a1 && a2 != 0);
  }
  return v2;
}

uint64_t CGPDFNodeGetFirstDescendantOfType(int *a1, uint64_t a2, uint64_t a3)
{
  int *v3;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t FirstDescendantOfType;

  v3 = a1;
  if (a1)
  {
    v6 = *a1;
    if ((a3 & 1) != 0 || v6 != (_DWORD)a2)
    {
      if ((v6 & 0x200) != 0 && (v7 = a1[11], (_DWORD)v7))
      {
        v8 = (_QWORD *)*((_QWORD *)a1 + 7);
        while (1)
        {
          FirstDescendantOfType = CGPDFNodeGetFirstDescendantOfType(*v8, a2, a3);
          if (FirstDescendantOfType)
            return FirstDescendantOfType;
          ++v8;
          if (!--v7)
            goto LABEL_9;
        }
      }
      else
      {
LABEL_9:
        if ((a3 & (v6 == (_DWORD)a2)) == 0)
          return 0;
      }
    }
  }
  return (uint64_t)v3;
}

uint64_t CGPDFNodeGetLastDescendantOfType(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  int v6;
  uint64_t v7;
  uint64_t i;
  uint64_t LastDescendantOfType;

  v3 = a1;
  if (a1)
  {
    v6 = *a1;
    if ((a3 & 1) != 0 || v6 != (_DWORD)a2)
    {
      if ((v6 & 0x200) != 0)
        v7 = a1[11];
      else
        v7 = 0;
      for (i = 8 * v7 - 8; i != -8; i -= 8)
      {
        LastDescendantOfType = CGPDFNodeGetLastDescendantOfType(*(_QWORD *)(*((_QWORD *)v3 + 7) + i), a2, a3);
        if (LastDescendantOfType)
          return LastDescendantOfType;
      }
      if ((a3 & (v6 == (_DWORD)a2)) == 0)
        return 0;
    }
  }
  return (uint64_t)v3;
}

uint64_t CGPDFNodeGetCGPDFAnnotation(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)result == 259)
      return *(_QWORD *)(result + 104);
    else
      return 0;
  }
  return result;
}

void CGPDFNodeSetCGPDFAnnotation(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v4;

  if (a1)
  {
    if (*(_DWORD *)a1 == 259)
    {
      v4 = *(CFTypeRef *)(a1 + 104);
      if (v4 != cf)
      {
        if (v4)
          CFRelease(v4);
        *(_QWORD *)(a1 + 104) = cf;
        if (cf)
          CFRetain(cf);
      }
    }
  }
}

BOOL CGPDFNodeMap(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t), uint64_t a3)
{
  unint64_t v4;
  int v7;
  _BOOL8 result;
  uint64_t v9;
  char v10;
  unint64_t v11;

  if (!a1)
    return 1;
  if ((*(_BYTE *)(a1 + 1) & 2) == 0)
    return 1;
  v4 = *(unsigned int *)(a1 + 44);
  if (!(_DWORD)v4)
    return 1;
  v7 = ((uint64_t (*)(_QWORD, _QWORD))a2)(0, **(_QWORD **)(a1 + 56));
  result = 0;
  if (v7)
  {
    v9 = 1;
    while (v4 != v9)
    {
      v10 = a2(v9, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v9), a3);
      ++v9;
      if ((v10 & 1) == 0)
      {
        v11 = v9 - 1;
        return v11 >= v4;
      }
    }
    v11 = v4;
    return v11 >= v4;
  }
  return result;
}

BOOL CGPDFNodeMapByType(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v5;
  BOOL v6;
  _DWORD *v7;
  uint64_t v8;

  if (a1 && (*(_BYTE *)(a1 + 1) & 2) != 0 && (v3 = *(unsigned int *)(a1 + 44), (_DWORD)v3))
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = *(_DWORD **)(*(_QWORD *)(a1 + 56) + 8 * v5);
      if (v7)
      {
        v8 = 1;
        while (kCGPDFNodeTypeOrder[v8] != *v7)
        {
          if (++v8 == 12)
            goto LABEL_9;
        }
        if (v8 >= 0xC)
          __assert_rtn("CGPDFNodeMapByType", "CGPDFNode.c", 4050, "typeIndex < 12");
      }
      else
      {
LABEL_9:
        LODWORD(v8) = 0;
      }
      if (((*(uint64_t (**)(uint64_t))(a2 + 8 * v8))(v5) & 1) == 0)
        break;
      v6 = ++v5 >= v3;
    }
    while (v5 != v3);
  }
  else
  {
    return 1;
  }
  return v6;
}

uint64_t CGPDFNodeTypeGetIndex(int a1)
{
  uint64_t result;

  result = 1;
  while (kCGPDFNodeTypeOrder[result] != a1)
  {
    if (++result == 12)
      return 0;
  }
  return result;
}

__n64 *CGPDFNodePrint(__n64 *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
    return (__n64 *)CGPDFNodePrintTabbed(result, 0, a3, a4, a5, a6, a7, a8);
  return result;
}

uint64_t CGPDFNodePrintTabbed(__n64 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  const char *Name;
  int TextRange;
  int v15;
  int v16;
  __n64 v17;
  __n64 v18;
  __n64 v19;
  __n64 v20;
  __n64 *v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n64 *v34;
  int v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  __n64 *v39;
  uint64_t v40;
  __CFString *StringForRanges;
  __CFString *v42;
  char *v43;
  __n64 v44;
  double v45;
  double v46;
  double v47;
  const char *v48;
  const char *v49;
  char buffer[1024];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v10 = a1->n64_u32[0];
  if ((v10 & 0x200) == 0)
  {
    v11 = 0;
    if (!a2)
      goto LABEL_8;
LABEL_5:
    v12 = a2;
    do
    {
      printf("    ");
      --v12;
    }
    while (v12);
    v10 = a1->n64_u32[0];
    goto LABEL_8;
  }
  v11 = a1[5].n64_u32[1];
  if (a2)
    goto LABEL_5;
LABEL_8:
  Name = CGPDFNodeTypeGetName(v10, a2, a3, a4, a5, a6, a7, a8);
  TextRange = CGPDFNodeGetTextRange((uint64_t)a1);
  v16 = v15;
  v17.n64_u64[0] = CGPDFNodeGetBounds(a1).n64_u64[0];
  v21 = a1;
  while (v21->n64_u32[0] != 517)
  {
    v21 = (__n64 *)v21[1].n64_u64[0];
    if (!v21)
      goto LABEL_15;
  }
  v22 = v21[13].n64_u64[0];
  if (v22)
  {
    v23 = *(_QWORD *)(v22 + 16);
    if (v23)
    {
      v24 = *(_DWORD *)(*(_QWORD *)(v23 + 40) + 8);
      goto LABEL_16;
    }
  }
LABEL_15:
  v24 = -1;
LABEL_16:
  result = printf("CGPDFNodeRef: %p, type: <%s>, page %d, child count: %zu, text range: [%d, %d], bounds: (%.2f, %.2f), [%.2f, %.2f]\n", a1, Name, v24, v11, TextRange, v16, v17.n64_f64[0], v18.n64_f64[0], v19.n64_f64[0], v20.n64_f64[0]);
  if (v11)
  {
    v33 = 0;
    while (1)
    {
      if ((a1->n64_u8[1] & 2) == 0 || a1[5].n64_u32[1] <= v33)
      {
        v35 = 0;
        v34 = 0;
        goto LABEL_27;
      }
      v34 = *(__n64 **)(a1[7].n64_u64[0] + 8 * v33);
      if (!v34)
        break;
      v35 = v34->n64_u32[0];
      if ((v34->n64_u32[0] & 0x200) == 0)
        goto LABEL_27;
      if (a2)
      {
        v36 = a2;
        do
        {
          printf("    ");
          --v36;
        }
        while (v36);
      }
      v37 = CGPDFNodeTypeGetName(v35, v26, v27, v28, v29, v30, v31, v32);
      printf("Tagged node type: %s.\n", v37);
      result = CGPDFNodePrintTabbed(v34, a2 + 1);
LABEL_46:
      if (++v33 == v11)
        return result;
    }
    v35 = 0;
LABEL_27:
    if (a2 != -1)
    {
      v38 = a2 + 1;
      do
      {
        printf("    ");
        --v38;
      }
      while (v38);
    }
    if (v35 == 1)
    {
      v39 = v34;
      if (v34->n64_u32[0] == 1)
      {
        while (1)
        {
          v39 = (__n64 *)v39[1].n64_u64[0];
          if (!v39)
            break;
          if (v39->n64_u32[0] == 517)
          {
            v40 = v39[13].n64_i64[0];
            if (!v40)
              break;
            StringForRanges = CGPDFLayoutCreateStringForRanges(v40, (uint64_t)&v34[2], 1);
            if (!StringForRanges)
              break;
            v42 = StringForRanges;
            if (CFStringGetCString(StringForRanges, buffer, 1023, 0x8000100u))
              v43 = buffer;
            else
              v43 = 0;
            CFRelease(v42);
            goto LABEL_43;
          }
        }
      }
    }
    else if ((v35 & 0x300) != 0)
    {
      v44.n64_u64[0] = CGPDFNodeGetBounds(v34).n64_u64[0];
      v43 = buffer;
      __sprintf_chk(buffer, 0, 0x400uLL, "bounds: (%.2f, %.2f), [%.2f, %.2f]", v44.n64_f64[0], v45, v46, v47);
LABEL_43:
      v48 = CGPDFNodeTypeGetName(v35, v26, v27, v28, v29, v30, v31, v32);
      v49 = "(null)";
      if (v43)
        v49 = v43;
      result = printf("Leaf-node type: %s, %s\n", v48, v49);
      goto LABEL_46;
    }
    v43 = 0;
    goto LABEL_43;
  }
  return result;
}

const char *CGPDFNodeTypeGetName(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *result;

  if (a1 <= 512)
  {
    if (a1 <= 256)
    {
      if (!a1)
        return "None";
      if (a1 == 1)
        return "Word";
    }
    else
    {
      switch(a1)
      {
        case 257:
          return "Image";
        case 258:
          return "Shape";
        case 259:
          return "Annotation";
      }
    }
LABEL_23:
    CGLog(2, (uint64_t)"%s: Unexpected node type (%d)", a3, a4, a5, a6, a7, a8, (char)"CGPDFNodeTypeGetName");
    return 0;
  }
  else
  {
    switch(a1)
    {
      case 513:
        result = "Group";
        break;
      case 514:
        result = "Text Line";
        break;
      case 515:
        result = "Column";
        break;
      case 516:
        result = "Layout Area";
        break;
      case 517:
        result = "Page";
        break;
      default:
        if (a1 == 1537)
        {
          result = "Paragraph";
        }
        else
        {
          if (a1 != 1538)
            goto LABEL_23;
          result = "Section";
        }
        break;
    }
  }
  return result;
}

uint64_t ascii85_filter_rewind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_BYTE *)(a1 + 8) = 0;
  return CGPDFSourceRewind(*(_QWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ascii85_filter_refill(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int32x4_t v24;
  int32x4_t v25;
  unint64_t v26;
  int8x16_t v27;
  uint64_t v28;
  uint64x2_t v29;
  int8x16_t v30;
  int8x16_t v31;
  __int32 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;

  if (*(_BYTE *)(a1 + 8))
    return 0;
  v11 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
LABEL_4:
  if (v11 + 4 >= a3 || *(_BYTE *)(a1 + 8))
    return *(_QWORD *)(a1 + 16);
  v12 = 0;
  v13 = 0;
  v14 = 8;
  v15 = 5;
  while (1)
  {
    do
    {
      v16 = CGPDFSourceGetc(*(_QWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
      if ((v16 + 1) > 0x21)
        goto LABEL_10;
    }
    while (((1 << (v16 + 1)) & 0x200006C02) != 0);
    if (v16 == -1)
      goto LABEL_32;
LABEL_10:
    if (v16 == 122)
    {
      if (!v13)
      {
        v20 = 4;
        do
        {
          v22 = *(_QWORD *)(a1 + 16);
          v21 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 16) = v22 + 1;
          *(_BYTE *)(v21 + v22) = 0;
          --v20;
        }
        while (v20);
        goto LABEL_28;
      }
      v35 = 122;
      goto LABEL_31;
    }
    if (v16 == 126)
      break;
    if ((v16 - 118) <= 0xFFFFFFAA)
    {
      v35 = v16;
LABEL_31:
      pdf_error("ASCII85Decode: invalid character 0x%02x encountered in stream.", v35);
LABEL_32:
      *(_BYTE *)(a1 + 8) = 1;
      return *(_QWORD *)(a1 + 16);
    }
    v12 = v16 + 85 * v12 - 33;
    ++v13;
    --v15;
    --v14;
    if (v13 == 5)
    {
      v17 = 4;
      do
      {
        v19 = *(_QWORD *)(a1 + 16);
        v18 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 16) = v19 + 1;
        *(_BYTE *)(v18 + v19) = HIBYTE(v12);
        v12 <<= 8;
        --v17;
      }
      while (v17);
LABEL_28:
      v11 = *(_QWORD *)(a1 + 16);
      goto LABEL_4;
    }
  }
  *(_BYTE *)(a1 + 8) = 1;
  v23 = CGPDFSourceGetc(*(_QWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
  if (v13 != 1 && v23 == 62)
  {
    v24.i64[0] = 0x5500000055;
    v24.i64[1] = 0x5500000055;
    if (!v13)
      return *(_QWORD *)(a1 + 16);
    v25.i32[1] = 1;
    v25.i64[1] = 0x100000001;
    v25.i32[0] = v12 + 1;
    v26 = v14 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v27 = (int8x16_t)v25;
      v25 = vmulq_s32(v25, v24);
      v26 -= 4;
    }
    while (v26);
    v28 = v13 - 1;
    v29 = (uint64x2_t)vdupq_lane_s64(v15 - 1, 0);
    v30 = (int8x16_t)vdupq_n_s64((v14 & 0xFFFFFFFFFFFFFFFCLL) - 4);
    v31 = vbslq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)vorrq_s8(v30, (int8x16_t)xmmword_185004A00), v29), (int32x4_t)vcgtq_u64((uint64x2_t)vorrq_s8(v30, (int8x16_t)xmmword_1850051B0), v29)), v27, (int8x16_t)v25);
    *(int32x2_t *)v31.i8 = vmul_s32(*(int32x2_t *)v31.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL));
    v32 = v31.i32[0] * v31.i32[1];
    do
    {
      v34 = *(_QWORD *)(a1 + 16);
      v33 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v34 + 1;
      *(_BYTE *)(v33 + v34) = HIBYTE(v32);
      v32 <<= 8;
      --v28;
    }
    while (v28);
    goto LABEL_28;
  }
  pdf_error("ASCII85Decode: encountered unexpected EOF.");
  return *(_QWORD *)(a1 + 16);
}

void ascii85_filter_finalize(const void **a1)
{
  const void *v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      CFRelease(v2);
    free(a1);
  }
}

CGFloat CGClipStackCreateMutable()
{
  char *v0;
  CGFloat result;

  v0 = (char *)malloc_type_malloc(0x98uLL, 0x2062DE7BuLL);
  *(_DWORD *)v0 = 1;
  *((_DWORD *)v0 + 1) = 0;
  *((_DWORD *)v0 + 2) = 0;
  result = CGRectInfinite.origin.x;
  *(CGRect *)(v0 + 48) = CGRectInfinite;
  *(CGRect *)(v0 + 80) = CGRectInfinite;
  *(CGRect *)(v0 + 16) = CGRectInfinite;
  *((_QWORD *)v0 + 14) = 3;
  *((_QWORD *)v0 + 15) = 0;
  *((_QWORD *)v0 + 16) = 0;
  return result;
}

unsigned int *CGClipStackRetain(unsigned int *result)
{
  unsigned int v1;

  if (result)
  {
    do
      v1 = __ldxr(result);
    while (__stxr(v1 + 1, result));
  }
  return result;
}

BOOL CGClipStackEqual(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  if (a1 == a2)
    return 1;
  result = 0;
  if (a1)
  {
    if (a2)
      return *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4);
  }
  return result;
}

uint64_t CGClipStackEquivalent(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;

  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
    return 0;
  result = CGRectEqualToRect(*(CGRect *)(a1 + 16), *(CGRect *)(a2 + 16));
  if (!(_DWORD)result)
    return result;
  result = CGRectEqualToRect(*(CGRect *)(a1 + 48), *(CGRect *)(a2 + 48));
  if (!(_DWORD)result)
    return result;
  result = CGRectEqualToRect(*(CGRect *)(a1 + 80), *(CGRect *)(a2 + 80));
  if (!(_DWORD)result)
    return result;
  v5 = *(_QWORD *)(a1 + 120);
  if (v5 != *(_QWORD *)(a2 + 120))
    return 0;
  if (!v5)
    return 1;
  v6 = 0;
  v7 = 0;
  v8 = (_QWORD *)(a1 + 128);
  v9 = (_QWORD *)(a2 + 128);
  do
  {
    if (*(_QWORD *)(a1 + 112) == 3)
      v10 = &v8[v7];
    else
      v10 = (uint64_t *)(*v8 + v6 * 8);
    if (*(_QWORD *)(a2 + 120) <= v7)
    {
      v12 = 0;
    }
    else
    {
      if (*(_QWORD *)(a2 + 112) == 3)
        v11 = &v9[v6];
      else
        v11 = (uint64_t *)(*v9 + 8 * v7);
      v12 = *v11;
    }
    result = CGClipEqualToClip(*v10, v12);
    if ((result & 1) == 0)
      break;
    ++v7;
    ++v6;
  }
  while (v7 < *(_QWORD *)(a1 + 120));
  return result;
}

uint64_t CGClipStackContainsMask(uint64_t result)
{
  if (result)
    return *(_BYTE *)(result + 8) & 1;
  return result;
}

void CGClipStackPrint(uint64_t a1, FILE *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  const CGPath *v10;
  CGRect BoundingBox;

  if (a1)
  {
    fprintf(a2, "ClipStack: (%f, %f %f, %f)\n", *(double *)(a1 + 16), *(double *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40));
    v4 = *(_QWORD *)(a1 + 120);
    if (v4)
    {
      v5 = 0;
      v6 = (uint64_t *)(a1 + 128);
      do
      {
        if (*(_QWORD *)(a1 + 120) <= v5)
        {
          v8 = 0;
        }
        else
        {
          v7 = v6;
          if (*(_QWORD *)(a1 + 112) != 3)
            v7 = (uint64_t *)(*(_QWORD *)(a1 + 128) + 8 * v5);
          v8 = *v7;
        }
        v9 = *(unsigned __int8 *)(v8 + 8);
        switch((char)v9)
        {
          case 0:
            fprintf(a2, "Clip %zu (Rect): (%g %g %g %g)\n");
            break;
          case 2:
            if (v9 == 2)
              v10 = *(const CGPath **)(v8 + 24);
            else
              v10 = 0;
            BoundingBox = CGPathGetBoundingBox(v10);
            fprintf(a2, "Clip %zu (Path): bbox (%g %g %g %g)\n", v5, BoundingBox.origin.x, BoundingBox.origin.y, BoundingBox.size.width, BoundingBox.size.height);
            CGPathPrint(v10, a2);
            break;
          case 3:
            fprintf(a2, "Clip %zu (Mask)\n");
            break;
          case 4:
            fprintf(a2, "Clip %zu (Text clipping)\n");
            break;
          default:
            break;
        }
        ++v5;
        ++v6;
      }
      while (v4 != v5);
    }
  }
  else
  {
    fprintf(a2, "ClipStack: (%f, %f %f, %f)\n", -8.98846567e307, -8.98846567e307, 1.79769313e308, 1.79769313e308);
  }
}

uint64_t `anonymous namespace'::apply_element(_anonymous_namespace_ *this, void *a2, CGPathElementType a3, const CGPoint *a4, path_iterator *a5)
{
  uint64_t (*v6)(void);

  if (a2 >= 5)
  {
    if ((_DWORD)a2 != -3)
      abort();
    (*(void (**)(void))(*(_QWORD *)this + 16))();
    (*(void (**)(void))(*(_QWORD *)this + 16))();
    (*(void (**)(void))(*(_QWORD *)this + 16))();
    (*(void (**)(void))(*(_QWORD *)this + 16))();
    v6 = *(uint64_t (**)(void))(*(_QWORD *)this + 16);
  }
  else
  {
    v6 = *(uint64_t (**)(void))(*(_QWORD *)this + 16);
  }
  return v6();
}

CGPDFObjectRef common_op_sh(CGPDFScanner *a1, double *a2, _QWORD *a3, CGPath **a4)
{
  CGPDFObjectRef result;
  int v9;
  uint64_t v10;
  size_t v11;
  CGPDFReal *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  CGPath *Mutable;
  const CGAffineTransform *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  CGPDFArrayRef array;
  char *value;
  CGPDFReal v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  value = 0;
  result = (CGPDFObjectRef)CGPDFScannerPopName(a1, (const char **)&value);
  if (!(_DWORD)result)
    return result;
  result = (CGPDFObjectRef)*((_QWORD *)a1 + 7);
  if (!result)
    return result;
  result = CGPDFContentStreamGetResource(result, "Shading", value);
  *a3 = result;
  if (!result)
    return result;
  v9 = *((_DWORD *)result + 2);
  if (v9 == 9)
  {
    v10 = *((_QWORD *)result + 4);
    if (v10)
    {
      result = *(CGPDFObjectRef *)(v10 + 48);
      if (!result)
        return result;
      goto LABEL_9;
    }
    return 0;
  }
  if (v9 != 8)
    return 0;
  result = (CGPDFObjectRef)*((_QWORD *)result + 4);
LABEL_9:
  array = 0;
  if (CGPDFDictionaryGetArray(result, "BBox", &array))
  {
    v11 = 0;
    v12 = &v26;
    while (CGPDFArrayGetNumber(array, v11, v12))
    {
      ++v11;
      ++v12;
      if (v11 == 4)
      {
        v13 = v26;
        v14 = v27;
        v15 = v28 - v26;
        v16 = v29 - v27;
        goto LABEL_16;
      }
    }
  }
  v15 = 0.0;
  v13 = INFINITY;
  v14 = INFINITY;
  v16 = 0.0;
LABEL_16:
  Mutable = CGPathCreateMutable();
  *a4 = Mutable;
  if (v13 == INFINITY || v14 == INFINITY)
  {
    v20 = *a2;
    v21 = a2[1];
    v22 = a2[2];
    v23 = a2[3];
    v19 = 0;
  }
  else
  {
    v19 = (const CGAffineTransform *)(*((_QWORD *)a2 + 5) + 16);
    v20 = v13;
    v21 = v14;
    v22 = v15;
    v23 = v16;
  }
  CGPathAddRect(Mutable, v19, *(CGRect *)&v20);
  return (CGPDFObjectRef)1;
}

BOOL common_op_gs(uint64_t a1, CGPDFDictionaryRef dict)
{
  _BOOL8 result;
  CGPDFInteger v5;
  CGPDFReal value;

  value = 0.0;
  result = CGPDFDictionaryGetNumber(dict, "CA", &value);
  if (result)
  {
    *(CGPDFReal *)(*(_QWORD *)(a1 + 40) + 344) = value;
    result = CGPDFDictionaryGetNumber(dict, "ca", &value);
    if (result)
    {
      *(CGPDFReal *)(*(_QWORD *)(a1 + 40) + 336) = value;
      result = CGPDFDictionaryGetNumber(dict, "LW", &value);
      if (result)
      {
        *(CGPDFReal *)(*(_QWORD *)(a1 + 40) + 296) = value;
        result = CGPDFDictionaryGetNumber(dict, "ML", &value);
        if (result)
        {
          *(CGPDFReal *)(*(_QWORD *)(a1 + 40) + 288) = value;
          result = CGPDFDictionaryGetNumber(dict, "FL", &value);
          if (result)
          {
            *(CGPDFReal *)(*(_QWORD *)(a1 + 40) + 312) = value;
            result = CGPDFDictionaryGetNumber(dict, "SM", &value);
            if (result)
            {
              *(CGPDFReal *)(*(_QWORD *)(a1 + 40) + 320) = value;
              v5 = 0;
              result = CGPDFDictionaryGetInteger(dict, "LC", &v5);
              if (result)
              {
                *(_BYTE *)(*(_QWORD *)(a1 + 40) + 304) = v5;
                result = CGPDFDictionaryGetInteger(dict, "LJ", &v5);
                if (result)
                {
                  *(_BYTE *)(*(_QWORD *)(a1 + 40) + 305) = v5;
                  return 1;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

CGPDFObjectRef common_op_Do(CGPDFScanner *a1, const char **a2, _QWORD *a3, uint64_t a4)
{
  CGPDFObjectRef result;
  uint64_t v9;
  char *value;

  value = 0;
  result = (CGPDFObjectRef)CGPDFScannerPopName(a1, (const char **)&value);
  if ((_DWORD)result)
  {
    result = (CGPDFObjectRef)*((_QWORD *)a1 + 7);
    if (result)
    {
      result = CGPDFContentStreamGetResource(result, "XObject", value);
      if (result)
      {
        *(_QWORD *)a4 = 0;
        if (*((_DWORD *)result + 2) == 9
          && (v9 = *((_QWORD *)result + 4), (*(_QWORD *)a4 = v9) != 0)
          && (*a3 = 0, *(_QWORD *)a4))
        {
          result = *(CGPDFObjectRef *)(*(_QWORD *)a4 + 48);
          *a3 = result;
          if (result)
            return (CGPDFObjectRef)CGPDFDictionaryGetName(result, "Subtype", a2);
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t common_op_ri(CGPDFScanner *a1, uint64_t a2)
{
  uint64_t result;
  char *v4;
  int v5;
  char *value;

  *(_DWORD *)(*(_QWORD *)(a2 + 40) + 308) = 0;
  value = 0;
  result = CGPDFScannerPopName(a1, (const char **)&value);
  if ((_DWORD)result)
  {
    v4 = value;
    result = strcmp(value, "AbsoluteColorimetric");
    if ((_DWORD)result)
    {
      v5 = 1;
    }
    else
    {
      result = strcmp(v4, "RelativeColorimetric");
      if ((_DWORD)result)
      {
        v5 = 2;
      }
      else
      {
        result = strcmp(v4, "Perceptual");
        if ((_DWORD)result)
        {
          v5 = 3;
        }
        else
        {
          result = strcmp(v4, "Saturation");
          if (!(_DWORD)result)
            return result;
          v5 = 4;
        }
      }
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 40) + 308) = v5;
  }
  return result;
}

CGColorRef common_PopRGBAlphaCGColorCreate(CGPDFScanner *a1, CGColorSpace *a2)
{
  CGPDFReal value;
  uint64_t v6;
  CGPDFReal v7[3];

  v7[2] = *(CGPDFReal *)MEMORY[0x1E0C80C00];
  if (!CGPDFScannerPopNumber(a1, v7))
    v7[0] = 0.0;
  if (!CGPDFScannerPopNumber(a1, (CGPDFReal *)&v6))
    v6 = 0;
  if (!CGPDFScannerPopNumber(a1, &value))
    value = 0.0;
  v7[1] = 1.0;
  return CGColorCreate(a2, &value);
}

CGColorRef common_PopCMYKAlphaCGColorCreate(CGPDFScanner *a1, CGColorSpace *a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGPDFReal v8[3];

  v8[2] = *(CGPDFReal *)MEMORY[0x1E0C80C00];
  if (!CGPDFScannerPopNumber(a1, v8))
    v8[0] = 1.0;
  if (!CGPDFScannerPopNumber(a1, (CGPDFReal *)&v7))
    v7 = 0;
  if (!CGPDFScannerPopNumber(a1, (CGPDFReal *)&v6))
    v6 = 0;
  if (!CGPDFScannerPopNumber(a1, (CGPDFReal *)&v5))
    v5 = 0;
  v8[1] = 1.0;
  return CGColorCreate(a2, (const CGFloat *)&v5);
}

BOOL common_ReadCGPathCurve(CGPDFScanner *a1, CGPDFReal *a2, CGPDFReal *a3, CGPDFReal *a4, CGPDFReal *a5, CGPDFReal *a6, CGPDFReal *value)
{
  return CGPDFScannerPopNumber(a1, value)
      && CGPDFScannerPopNumber(a1, a6)
      && CGPDFScannerPopNumber(a1, a5)
      && CGPDFScannerPopNumber(a1, a4)
      && CGPDFScannerPopNumber(a1, a3)
      && CGPDFScannerPopNumber(a1, a2);
}

BOOL common_ReadCGAffineTransform(CGPDFScanner *a1, CGPDFReal *a2)
{
  return CGPDFScannerPopNumber(a1, a2 + 5)
      && CGPDFScannerPopNumber(a1, a2 + 4)
      && CGPDFScannerPopNumber(a1, a2 + 3)
      && CGPDFScannerPopNumber(a1, a2 + 2)
      && CGPDFScannerPopNumber(a1, a2 + 1)
      && CGPDFScannerPopNumber(a1, a2);
}

BOOL common_ReadCGRect(CGPDFScanner *a1, CGPDFReal *a2)
{
  return CGPDFScannerPopNumber(a1, a2 + 3)
      && CGPDFScannerPopNumber(a1, a2 + 2)
      && CGPDFScannerPopNumber(a1, a2 + 1)
      && CGPDFScannerPopNumber(a1, a2);
}

CGPDFObjectRef common_GetResourceDictionary(CGPDFObjectRef result, const char *a2, const char *a3)
{
  if (result)
  {
    result = CGPDFContentStreamGetResource(result, a2, a3);
    if (result)
    {
      if (*((_DWORD *)result + 2) == 8)
        return (CGPDFObjectRef)*((_QWORD *)result + 4);
      else
        return 0;
    }
  }
  return result;
}

const __CFLocale *CGFontNameTableCopyNameForLocale(os_unfair_lock_s *a1, uint64_t a2, unsigned int a3)
{
  const __CFLocale *v3;
  const __CFString *v6;
  const __CFLocale *v7;

  v3 = 0;
  if (a1 && a2)
  {
    v6 = CGCreateCanonicalLanguageLocale();
    while (1)
    {
      v7 = (const __CFLocale *)copy_localized_value(a1, v6, a3);
      if (v7)
      {
        v3 = v7;
        goto LABEL_10;
      }
      v3 = (const __CFLocale *)CGCreateContainingLocaleForLocale(v6);
      if (!v3)
        goto LABEL_10;
      if (v3 == CFLocaleGetSystem())
        break;
      CFRelease(v6);
      v6 = CGCreateCanonicalLanguageLocale();
      CFRelease(v3);
    }
    CFRelease(v3);
    v3 = 0;
LABEL_10:
    CFRelease(v6);
  }
  return v3;
}

uint64_t CGFontNameTableGetPostScriptName(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 8);
  return result;
}

void CGFontNameTablePrint(uint64_t a1, FILE *a2)
{
  FILE *v3;
  const __CFData *v4;
  const __CFData *v5;
  const UInt8 *BytePtr;
  unint64_t Length;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned __int16 v22;
  int v23;
  __int16 v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  const UInt8 *v27;
  CFStringEncoding v28;
  const __CFString *v29;
  const __CFString *v30;
  CFIndex v31;
  CFIndex v32;
  char *v33;
  const __CFData *cf;

  if (a1)
  {
    if (a2)
      v3 = a2;
    else
      v3 = (FILE *)*MEMORY[0x1E0C80C20];
    if (!*(_QWORD *)a1
      || (v4 = (const __CFData *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 424))(*(_QWORD *)(*(_QWORD *)a1 + 112), 1851878757)) == 0)
    {
      fwrite("  <<unavailable>>\n", 0x12uLL, 1uLL, v3);
      return;
    }
    v5 = v4;
    BytePtr = CFDataGetBytePtr(v4);
    cf = v5;
    Length = CFDataGetLength(v5);
    v8 = 2 * (Length > 1);
    v9 = (v8 + 2);
    if (Length >= v9)
    {
      v10 = BytePtr[v8 | 1] | (BytePtr[v8] << 8);
      v9 = v8 | 4;
      v11 = v8 | 4;
      LODWORD(v8) = v8 + 2;
    }
    else
    {
      v10 = 0;
      v11 = v8 + 2;
    }
    if (Length >= v9)
    {
      v12 = bswap32(*(unsigned __int16 *)&BytePtr[v8]) >> 16;
      for (LODWORD(v8) = v11; v10; --v10)
      {
LABEL_14:
        v13 = (v8 + 2);
        if (Length >= v13)
        {
          v14 = BytePtr[(v8 + 1)] | (BytePtr[v8] << 8);
          v13 = (v8 + 4);
          v15 = v8 + 4;
          LODWORD(v8) = v8 + 2;
        }
        else
        {
          v14 = 0;
          v15 = v8 + 2;
        }
        if (Length >= v13)
        {
          v16 = BytePtr[(v8 + 1)] | (BytePtr[v8] << 8);
          v13 = (v15 + 2);
          v17 = v15 + 2;
          LODWORD(v8) = v15;
        }
        else
        {
          v16 = 0;
          v17 = v15;
        }
        if (Length >= v13)
        {
          v18 = BytePtr[(v8 + 1)] | (BytePtr[v8] << 8);
          v13 = (v17 + 2);
          v19 = v17 + 2;
          LODWORD(v8) = v17;
        }
        else
        {
          v18 = 0;
          v19 = v17;
        }
        if (Length >= v13)
        {
          v20 = BytePtr[(v8 + 1)] | (BytePtr[v8] << 8);
          v13 = (v19 + 2);
          v21 = v19 + 2;
          LODWORD(v8) = v19;
        }
        else
        {
          v20 = 0;
          v21 = v19;
        }
        if (Length >= v13)
        {
          v22 = BytePtr[(v8 + 1)] | (BytePtr[v8] << 8);
          v13 = (v21 + 2);
          v23 = v21 + 2;
          LODWORD(v8) = v21;
        }
        else
        {
          v22 = 0;
          v23 = v21;
        }
        if (Length >= v13)
        {
          v24 = BytePtr[(v8 + 1)] | (BytePtr[v8] << 8);
          LODWORD(v8) = v23;
        }
        else
        {
          v24 = 0;
        }
        v25 = v24 + v12;
        if (Length > v25)
        {
          if (Length >= v25 + (unint64_t)v22)
            v26 = v22;
          else
            v26 = Length - v25;
          v27 = &BytePtr[v25];
          fprintf(v3, "  (%u; %u; %u; %u): ", v14, v16, v18, v20);
          if (v14 == 1)
            v28 = v16;
          else
            v28 = 268435712;
          v29 = CFStringCreateWithBytes(0, v27, v26, v28, 0);
          v30 = v29;
          if (v29)
          {
            v31 = CFStringGetLength(v29);
            v32 = CFStringGetMaximumSizeForEncoding(v31, 0x8000100u) + 1;
            v33 = (char *)malloc_type_malloc(v32, 0x7B96445DuLL);
            if (CFStringGetCString(v30, v33, v32, 0x8000100u))
              fputs(v33, v3);
            else
              fwrite("<<invalid>>", 0xBuLL, 1uLL, v3);
            free(v33);
          }
          else
          {
            fwrite("<<null>>", 8uLL, 1uLL, v3);
          }
          CFRelease(v30);
          fputc(10, v3);
        }
      }
    }
    else
    {
      LOWORD(v12) = 0;
      if (v10)
        goto LABEL_14;
    }
    CFRelease(cf);
  }
}

CFStringRef copy_description(const void *a1, const __CFDictionary *a2)
{
  uint64_t ClassWithTypeID;
  uint64_t v5;
  const __CFAllocator *v6;

  if (!a1)
    return 0;
  CFGetTypeID(a1);
  ClassWithTypeID = _CFRuntimeGetClassWithTypeID();
  if (!ClassWithTypeID)
    return 0;
  v5 = ClassWithTypeID;
  v6 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v6, a2, CFSTR("<%s %p>"), *(_QWORD *)(v5 + 8), a1);
}

CFStringRef copy_debug_description_20787(const void *a1)
{
  return copy_description(a1, 0);
}

uint64_t __CGTypeRegister(uint64_t a1)
{
  char *v2;
  int8x16_t v3;
  uint64_t v4;

  v2 = (char *)malloc_type_malloc(0x60uLL, 0x10D00408820D60FuLL);
  *(_QWORD *)v2 = 0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  v3.i64[0] = (uint64_t)copy_description;
  v3.i64[1] = (uint64_t)copy_debug_description_20787;
  *(int8x16_t *)(v2 + 56) = vbslq_s8((int8x16_t)vceqzq_s64(*(int64x2_t *)(a1 + 56)), v3, *(int8x16_t *)(a1 + 56));
  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
    *(_QWORD *)v2 = 4;
  *((_QWORD *)v2 + 9) = v4;
  *((_QWORD *)v2 + 10) = 0;
  return _CFRuntimeRegisterClass();
}

uint64_t cs_finalize(uint64_t a1)
{
  color_space_state_unregister(*(_QWORD *)(a1 + 24));
  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 32));
}

__CFString *cs_copy_format_description(_QWORD *a1)
{
  unsigned int Type;
  const __CFAllocator *v3;
  __CFString *Mutable;
  __CFString *v5;
  const char *v6;
  char v7;
  const __CFString *v8;
  uint64_t v9;
  const char *v10;
  const __CFString *v11;
  uint64_t (*v12)(_QWORD *);
  uint64_t v13;
  CFStringRef v14;
  uint64_t v15;
  const void *v16;
  const __CFAllocator *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __CFString *v25;
  uint64_t v26;
  uint64_t Names;
  unint64_t i;
  _QWORD *v29;
  uint64_t (*v30)(_QWORD *);
  const __CFString *v31;
  uint64_t (*v32)(_QWORD *);
  uint64_t (*v33)(_QWORD *);
  uint64_t v34;
  int v35;
  const void **v36;
  const void *v37;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  Type = CGColorSpaceGetType(a1);
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = Mutable;
  if (Type > 0xB)
    v6 = "Unknown";
  else
    v6 = off_1E1662A60[Type];
  CFStringAppendFormat(Mutable, 0, CFSTR("<CGColorSpace %p> (%s"), a1, v6);
  if (CGColorSpaceGetType(a1) == 6 && *(_BYTE *)(a1[3] + 18))
  {
    v7 = 0;
    v8 = CFSTR("HLG scene referred derivative");
  }
  else if (CGColorSpaceGetType(a1) == 6 && *(_BYTE *)(a1[3] + 19))
  {
    v7 = 0;
    v8 = CFSTR("PQ display referred derivative");
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  switch(Type)
  {
    case 5u:
      if (a1)
      {
        v12 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)(a1[3] + 104) + 48);
        if (v12)
        {
          v13 = v12(a1);
          if (v13)
          {
            v14 = (CFStringRef)v13;
            CFStringAppendFormat(v5, 0, CFSTR("; %@"), v13);
            goto LABEL_61;
          }
        }
      }
      goto LABEL_62;
    case 6u:
    case 0xAu:
    case 0xBu:
      if (!a1)
      {
        CFStringAppendFormat(v5, 0, CFSTR("; %s; "), "Unknown model");
        v11 = CFSTR("-- no description tag -- ");
        goto LABEL_47;
      }
      v9 = *(unsigned int *)(a1[3] + 28);
      if (v9 > 7)
        v10 = "Unknown model";
      else
        v10 = off_1E1662AC0[v9];
      CFStringAppendFormat(v5, 0, CFSTR("; %s; "), v10);
      v29 = *(_QWORD **)(a1[3] + 104);
      v30 = (uint64_t (*)(_QWORD *))v29[6];
      if (!v30)
        goto LABEL_36;
      v31 = (const __CFString *)v30(a1);
      if (v31)
        goto LABEL_41;
      v29 = *(_QWORD **)(a1[3] + 104);
LABEL_36:
      v32 = (uint64_t (*)(_QWORD *))v29[3];
      if (!v32)
        goto LABEL_39;
      v31 = (const __CFString *)v32(a1);
      if (v31)
        goto LABEL_41;
      v29 = *(_QWORD **)(a1[3] + 104);
LABEL_39:
      v33 = (uint64_t (*)(_QWORD *))v29[5];
      if (v33 && (v31 = (const __CFString *)v33(a1)) != 0)
      {
LABEL_41:
        CFStringAppend(v5, v31);
        CFRelease(v31);
      }
      else
      {
        CFStringAppend(v5, CFSTR("-- no description tag -- "));
      }
      if (!*(_BYTE *)(a1[3] + 13))
        goto LABEL_48;
      v11 = CFSTR("; extended range");
LABEL_47:
      CFStringAppend(v5, v11);
LABEL_48:
      if ((v7 & 1) == 0)
        CFStringAppendFormat(v5, 0, CFSTR("; %@"), v8);
      goto LABEL_62;
    case 7u:
      if (a1 && (v15 = a1[3], (*(_DWORD *)(v15 + 24) - 5) <= 1))
        v16 = **(const void ***)(v15 + 88);
      else
        v16 = 0;
      v14 = CFCopyDescription(v16);
      CFStringAppendFormat(v5, 0, CFSTR("; base %@"), v14);
      goto LABEL_61;
    case 8u:
      if (CGColorSpaceGetType(a1) != 8)
      {
        v39 = CGColorSpaceGetType(a1);
        _CGHandleAssert("deviceN_copy_names", 1455, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpace.c", "CGColorSpaceGetType(s) == kCGColorSpaceDeviceN", "colorspace must be DeviceN. Type = %d", v40, v41, v42, v39);
      }
      v17 = CFGetAllocator(a1);
      v25 = CFStringCreateMutable(v17, 0);
      if (a1)
      {
        v26 = *(_QWORD *)(a1[3] + 40);
        Names = CGColorSpaceGetNames((uint64_t)a1, v18, v19, v20, v21, v22, v23, v24);
        CFStringAppendFormat(v25, 0, CFSTR("\n\tnames: ["));
        if (v26)
        {
          for (i = 0; i != v26; ++i)
          {
            CFStringAppendFormat(v25, 0, CFSTR("%s"), *(_QWORD *)(Names + 8 * i));
            if (i >= v26 - 1)
              CFStringAppendFormat(v25, 0, CFSTR("]\n"));
            else
              CFStringAppendFormat(v25, 0, CFSTR(", "));
          }
        }
      }
      else
      {
        CGColorSpaceGetNames(0, v18, v19, v20, v21, v22, v23, v24);
        CFStringAppendFormat(v25, 0, CFSTR("\n\tnames: ["));
      }
      CFStringAppendFormat(v5, 0, CFSTR("%@"), v25);
      CFRelease(v25);
      if (!a1)
        goto LABEL_56;
      v34 = a1[3];
      v35 = *(_DWORD *)(v34 + 20);
      switch(v35)
      {
        case 6:
          v36 = (const void **)(*(_QWORD *)(v34 + 88) + 56);
          break;
        case 10:
          v36 = (const void **)(*(_QWORD *)(v34 + 88) + 48);
          break;
        case 8:
          v36 = (const void **)(*(_QWORD *)(v34 + 88) + 8);
          break;
        default:
LABEL_56:
          v37 = 0;
          goto LABEL_60;
      }
      v37 = *v36;
LABEL_60:
      v14 = CFCopyDescription(v37);
      CFStringAppendFormat(v5, 0, CFSTR("\talternate: %@"), v14);
LABEL_61:
      CFRelease(v14);
LABEL_62:
      CFStringAppend(v5, CFSTR(")"));
      return v5;
    default:
      goto LABEL_62;
  }
}

CGColorSpaceRef CGColorSpaceCreateExtended(CGColorSpaceRef space)
{
  CGColorSpace *v2;
  _BYTE *v3;
  CFDataRef v5;
  const __CFData *v6;
  const void *v7;
  CFTypeRef Extended_f;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *icc;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25[74];
  _BYTE __dst[296];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = colorspace_from_properties((uint64_t)space, CFSTR("kCGColorSpaceExtendedDerivative"));
  if (!v2)
  {
    if (!space)
      return 0;
    v3 = (_BYTE *)*((_QWORD *)space + 3);
    if (!v3[15] || v3[16] || v3[17])
      return 0;
    CFRetain(space);
    if (*(_BYTE *)(*((_QWORD *)space + 3) + 13))
    {
      CFRetain(space);
      v2 = space;
LABEL_28:
      CGColorSpaceRelease(space);
      return v2;
    }
    v5 = CGColorSpaceCopyICCData(space);
    if (!v5)
    {
      v2 = 0;
      goto LABEL_28;
    }
    v6 = v5;
    if (CGColorSpaceGetType(space) == 6)
    {
      v7 = *(const void **)(*(_QWORD *)(*((_QWORD *)space + 3) + 88) + 16);
      if (!v7)
        goto LABEL_26;
      Extended_f = CFRetain(v7);
    }
    else
    {
      if (CGColorSpaceCreateExtended_cglibrarypredicate != -1)
        dispatch_once(&CGColorSpaceCreateExtended_cglibrarypredicate, &__block_literal_global_47);
      Extended_f = (CFTypeRef)CGColorSpaceCreateExtended_f(v6, 0);
    }
    v9 = (void *)Extended_f;
    if (Extended_f)
    {
      memcpy(__dst, &CGICCProfileInfoInitializer, sizeof(__dst));
      CGCMSUtilsGetICCProfileInfo(v9, (uint64_t)__dst, 1, v10, v11, v12, v13, v14);
      memcpy(v25, __dst, sizeof(v25));
      icc = (unsigned int *)color_space_state_create_icc(v9, v6, v25);
      v2 = (CGColorSpace *)CGColorSpaceCreateWithState(icc, v16, v17, v18, v19, v20, v21, v22);
      if (icc)
      {
        do
        {
          v23 = __ldxr(icc);
          v24 = v23 - 1;
        }
        while (__stxr(v24, icc));
        if (!v24)
          color_space_state_dealloc((uint64_t)icc);
      }
      if (v2)
      {
        *((_QWORD *)v2 + 3) = color_space_state_register(*((_BYTE **)v2 + 3));
        CGColorSpaceSetProperty((uint64_t)v2, CFSTR("kCGColorSpaceExtendedDerivative"), v2);
      }
      CFRelease(v9);
      goto LABEL_27;
    }
LABEL_26:
    v2 = 0;
LABEL_27:
    CFRelease(v6);
    goto LABEL_28;
  }
  return v2;
}

CGColorSpaceRef colorspace_from_properties(uint64_t a1, const void *a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  const __CFString *v6;
  CFTypeID v7;
  CGColorSpaceRef v8;
  CFTypeID v9;

  if (!a1)
    return 0;
  v4 = (pthread_mutex_t *)(a1 + 32);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 80);
  if (!v5)
  {
    pthread_mutex_unlock(v4);
    return 0;
  }
  v6 = (const __CFString *)CGPropertiesCopyProperty(v5, a2);
  pthread_mutex_unlock(v4);
  if (!v6)
    return 0;
  v7 = CFGetTypeID(v6);
  if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1)
    dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_77);
  if (v7 == CGColorSpaceGetTypeID_type_id)
  {
    CFRetain(v6);
    v8 = (CGColorSpaceRef)v6;
  }
  else
  {
    v9 = CFGetTypeID(v6);
    if (v9 == CFStringGetTypeID())
      v8 = CGColorSpaceCreateWithName(v6);
    else
      v8 = 0;
  }
  CFRelease(v6);
  return v8;
}

uint64_t colorsync_smart_null_20884()
{
  return 0;
}

BOOL CGColorSpaceIsDisplayReferredDerivative(_QWORD *a1)
{
  return CGColorSpaceGetType(a1) == 6 && *(_BYTE *)(a1[3] + 19) != 0;
}

BOOL CGColorSpaceIsSceneReferredDerivative(_QWORD *a1)
{
  return CGColorSpaceGetType(a1) == 6 && *(_BYTE *)(a1[3] + 18) != 0;
}

uint64_t CGColorSpaceGetMD5Digest(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *(_QWORD *)(result + 24);
    if (v1)
      return v1 + 56;
    else
      return 0;
  }
  return result;
}

uint64_t CGColorSpaceGetIdentifier(uint64_t a1)
{
  int8x8_t *v1;
  int8x8_t v2;

  if (!a1)
    return 0;
  v1 = *(int8x8_t **)(a1 + 24);
  if (!v1)
    return 0;
  v2 = veor_s8(v1[7], (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v1[7].i8, *(int8x16_t *)v1[7].i8, 8uLL));
  return (v2.i32[0] ^ v2.i32[1]);
}

uint64_t CGColorSpaceIsICCCompatible(uint64_t result)
{
  unsigned int v1;

  if (result)
  {
    v1 = *(_DWORD *)(*(_QWORD *)(result + 24) + 20);
    if (v1 > 0xB)
      return 0;
    else
      return (0xC78u >> v1) & 1;
  }
  return result;
}

CFTypeRef CGColorSpaceCopyColorSyncProfile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  CFTypeRef result;
  const void *FlexGTCProfile;
  CFDataRef v13;
  _BYTE v14[144];
  _BYTE v15[56];

  if (a1)
  {
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 24);
    switch(*(_DWORD *)(v9 + 20))
    {
      case 3:
        CGColorSpaceGetCalibratedGrayData(a1, a6, a7, a8, (uint64_t)v15);
        return (CFTypeRef)CGCMSUtilsCreateProfileForCalGray((uint64_t)v15);
      case 4:
        CGColorSpaceGetCalibratedRGBData(a1, a6, a7, a8, (uint64_t)v14);
        return (CFTypeRef)CGCMSUtilsCreateProfileForCalRGB((uint64_t)v14);
      case 5:
        return (CFTypeRef)CGCMSUtilsCreateProfileForCalLab(*(char **)(v9 + 88), *(_QWORD *)(v9 + 88) + 24);
      case 6:
        FlexGTCProfile = *(const void **)(*(_QWORD *)(v9 + 88) + 16);
        if (!FlexGTCProfile)
          return 0;
        goto LABEL_8;
      case 0xA:
        v13 = CGColorSpaceICCCopyData(a1, a2, a3, a4, a5, a6, a7, a8);
        if (CGColorSpaceCopyColorSyncProfile_cglibrarypredicate != -1)
          dispatch_once(&CGColorSpaceCopyColorSyncProfile_cglibrarypredicate, &__block_literal_global_20912);
        v8 = CGColorSpaceCopyColorSyncProfile_f(v13, 0);
        if (v13)
          CFRelease(v13);
        return (CFTypeRef)v8;
      case 0xB:
        FlexGTCProfile = (const void *)CGColorSpaceFlexGTCProxyGetFlexGTCProfile(a1);
        if (!FlexGTCProfile)
          return 0;
LABEL_8:
        result = CFRetain(FlexGTCProfile);
        break;
      default:
        return (CFTypeRef)v8;
    }
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t CGColorSpaceGetDescriptor(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *(_QWORD *)(result + 24);
    if (*(_DWORD *)(v1 + 20) >= 3u)
      return *(_QWORD *)(v1 + 88);
    else
      return 0;
  }
  return result;
}

BOOL CGColorSpaceIgnoresIntent(uint64_t a1)
{
  return !a1 || *(_BYTE *)(*(_QWORD *)(a1 + 24) + 12) != 0;
}

CGColorSpaceRef CGColorSpaceCopyBaseColorSpace(uint64_t a1)
{
  uint64_t v2;
  CFTypeRef *v3;
  CFTypeRef v4;
  int v6;

  if (a1
    && (v2 = *(_QWORD *)(a1 + 24), (*(_DWORD *)(v2 + 24) - 5) <= 1)
    && (v3 = *(CFTypeRef **)(v2 + 88), (v4 = *v3) != 0))
  {
    CFRetain(*v3);
  }
  else if (CGColorSpaceContainsFlexGTCInfo(a1) && (v6 = 0, CGColorSpaceGetCICPInfo(a1, &v6)))
  {
    return CGColorSpaceCreateFromCICP(v6);
  }
  else
  {
    return 0;
  }
  return (CGColorSpaceRef)v4;
}

CGColorSpaceRef CGColorSpaceCreatePQBasedCopy(CGColorSpaceRef result)
{
  _BOOL8 v1;
  CFTypeID v2;
  int v3;

  if (result)
  {
    v1 = (_BOOL8)result;
    v2 = CFGetTypeID(result);
    if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1)
      dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_77);
    if (v2 == CGColorSpaceGetTypeID_type_id && (v3 = 0, CGColorSpaceGetCICPInfo(v1, &v3)))
    {
      BYTE1(v3) = 16;
      return CGColorSpaceCreateFromCICP(v3);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CGColorSpaceRef CGColorSpaceCreateHLGBasedCopy(CGColorSpaceRef result)
{
  _BOOL8 v1;
  CFTypeID v2;
  int v3;

  if (result)
  {
    v1 = (_BOOL8)result;
    v2 = CFGetTypeID(result);
    if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1)
      dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_77);
    if (v2 == CGColorSpaceGetTypeID_type_id && (v3 = 0, CGColorSpaceGetCICPInfo(v1, &v3)))
    {
      BYTE1(v3) = 18;
      return CGColorSpaceCreateFromCICP(v3);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_QWORD *CGColorSpaceCreateSceneReferredLinearDerivative(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t *ExtendedLinearized;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *icc_derivative_with_state;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v1 = a1;
  if (CGColorSpaceGetType(a1) == 6 && *(_BYTE *)(v1[3] + 18))
  {
    CFRetain(v1);
    return v1;
  }
  if (CGColorSpaceGetType(v1) == 6)
  {
    v2 = v1[3];
    if (*(_BYTE *)(v2 + 19))
      return 0;
  }
  else
  {
    if (!v1)
      return v1;
    v2 = v1[3];
  }
  if (!*(_BYTE *)(v2 + 17))
    return 0;
  ExtendedLinearized = (uint64_t *)CGColorSpaceCreateExtendedLinearized((CGColorSpaceRef)v1);
  icc_derivative_with_state = (unsigned int *)color_space_state_create_icc_derivative_with_state(ExtendedLinearized[3], 1, 0, v4, v5, v6, v7, v8);
  v1 = (_QWORD *)CGColorSpaceCreateWithState(icc_derivative_with_state, v10, v11, v12, v13, v14, v15, v16);
  if (icc_derivative_with_state)
  {
    do
    {
      v17 = __ldxr(icc_derivative_with_state);
      v18 = v17 - 1;
    }
    while (__stxr(v18, icc_derivative_with_state));
    if (!v18)
      color_space_state_dealloc((uint64_t)icc_derivative_with_state);
  }
  if (v1)
    v1[3] = color_space_state_register((_BYTE *)v1[3]);
  CGColorSpaceRelease((CGColorSpaceRef)ExtendedLinearized);
  return v1;
}

CGColorSpaceRef CGColorSpaceCreateExtendedLinearized(CGColorSpaceRef space)
{
  CGColorSpace *v2;
  CFDataRef v3;
  CFDataRef v4;
  void *LinearizedProfile;
  uint64_t ExtendedLinearized_f;
  const __CFData *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *icc;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  unsigned int v23;
  int v25[74];
  _BYTE __dst[296];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = colorspace_from_properties((uint64_t)space, CFSTR("kCGColorSpaceExtendedLinearDerivative"));
  if (v2)
    return v2;
  if (!space)
    return 0;
  if (!*(_BYTE *)(*((_QWORD *)space + 3) + 15))
    return 0;
  v3 = CGColorSpaceCopyICCData(space);
  if (!v3)
    return 0;
  v4 = v3;
  LinearizedProfile = (void *)CGCMSUtilsCreateLinearizedProfile((uint64_t)v3);
  if (CGColorSpaceCreateExtendedLinearized_cglibrarypredicate != -1)
    dispatch_once(&CGColorSpaceCreateExtendedLinearized_cglibrarypredicate, &__block_literal_global_45_20935);
  ExtendedLinearized_f = CGColorSpaceCreateExtendedLinearized_f(LinearizedProfile, 0);
  v7 = (const __CFData *)ExtendedLinearized_f;
  if (LinearizedProfile && ExtendedLinearized_f)
  {
    memcpy(__dst, &CGICCProfileInfoInitializer, sizeof(__dst));
    CGCMSUtilsGetICCProfileInfo(LinearizedProfile, (uint64_t)__dst, 1, v8, v9, v10, v11, v12);
    memcpy(v25, __dst, sizeof(v25));
    icc = (unsigned int *)color_space_state_create_icc(LinearizedProfile, v7, v25);
    v21 = (_QWORD *)CGColorSpaceCreateWithState(icc, v14, v15, v16, v17, v18, v19, v20);
    if (icc)
    {
      do
      {
        v22 = __ldxr(icc);
        v23 = v22 - 1;
      }
      while (__stxr(v23, icc));
      if (!v23)
        color_space_state_dealloc((uint64_t)icc);
    }
    if (v21)
    {
      v21[3] = color_space_state_register((_BYTE *)v21[3]);
      CGColorSpaceSetProperty((uint64_t)v21, CFSTR("kCGColorSpaceExtendedLinearDerivative"), v21);
    }
    goto LABEL_17;
  }
  v21 = 0;
  v2 = 0;
  if (LinearizedProfile)
  {
LABEL_17:
    CFRelease(LinearizedProfile);
    v2 = (CGColorSpace *)v21;
  }
  if (v7)
    CFRelease(v7);
  CFRelease(v4);
  return v2;
}

_QWORD *CGColorSpaceCreateDisplayReferredLinearDerivative(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t *ExtendedLinearized;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *icc_derivative_with_state;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v1 = a1;
  if (CGColorSpaceGetType(a1) == 6 && *(_BYTE *)(v1[3] + 19))
  {
    CFRetain(v1);
    return v1;
  }
  if (CGColorSpaceGetType(v1) == 6)
  {
    v2 = v1[3];
    if (*(_BYTE *)(v2 + 18))
      return 0;
  }
  else
  {
    if (!v1)
      return v1;
    v2 = v1[3];
  }
  if (!*(_BYTE *)(v2 + 16))
    return 0;
  ExtendedLinearized = (uint64_t *)CGColorSpaceCreateExtendedLinearized((CGColorSpaceRef)v1);
  icc_derivative_with_state = (unsigned int *)color_space_state_create_icc_derivative_with_state(ExtendedLinearized[3], 0, 1, v4, v5, v6, v7, v8);
  v1 = (_QWORD *)CGColorSpaceCreateWithState(icc_derivative_with_state, v10, v11, v12, v13, v14, v15, v16);
  if (icc_derivative_with_state)
  {
    do
    {
      v17 = __ldxr(icc_derivative_with_state);
      v18 = v17 - 1;
    }
    while (__stxr(v18, icc_derivative_with_state));
    if (!v18)
      color_space_state_dealloc((uint64_t)icc_derivative_with_state);
  }
  if (v1)
    v1[3] = color_space_state_register((_BYTE *)v1[3]);
  CGColorSpaceRelease((CGColorSpaceRef)ExtendedLinearized);
  return v1;
}

CGColorSpaceRef CGColorSpaceCreateLinearized(CGColorSpaceRef space)
{
  CGColorSpace *v2;
  CFDataRef v3;
  CFDataRef v4;
  void *LinearizedProfile;
  uint64_t Linearized_f;
  const __CFData *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *icc;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  unsigned int v23;
  int v25[74];
  _BYTE __dst[296];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = colorspace_from_properties((uint64_t)space, CFSTR("kCGColorSpaceLinearDerivative"));
  if (v2)
    return v2;
  if (!space)
    return 0;
  if (!*(_BYTE *)(*((_QWORD *)space + 3) + 15))
    return 0;
  v3 = CGColorSpaceCopyICCData(space);
  if (!v3)
    return 0;
  v4 = v3;
  LinearizedProfile = (void *)CGCMSUtilsCreateLinearizedProfile((uint64_t)v3);
  if (CGColorSpaceCreateLinearized_cglibrarypredicate != -1)
    dispatch_once(&CGColorSpaceCreateLinearized_cglibrarypredicate, &__block_literal_global_42_20949);
  Linearized_f = CGColorSpaceCreateLinearized_f(LinearizedProfile, 0);
  v7 = (const __CFData *)Linearized_f;
  if (LinearizedProfile && Linearized_f)
  {
    memcpy(__dst, &CGICCProfileInfoInitializer, sizeof(__dst));
    CGCMSUtilsGetICCProfileInfo(LinearizedProfile, (uint64_t)__dst, 0, v8, v9, v10, v11, v12);
    memcpy(v25, __dst, sizeof(v25));
    icc = (unsigned int *)color_space_state_create_icc(LinearizedProfile, v7, v25);
    v21 = (_QWORD *)CGColorSpaceCreateWithState(icc, v14, v15, v16, v17, v18, v19, v20);
    if (icc)
    {
      do
      {
        v22 = __ldxr(icc);
        v23 = v22 - 1;
      }
      while (__stxr(v23, icc));
      if (!v23)
        color_space_state_dealloc((uint64_t)icc);
    }
    if (v21)
    {
      v21[3] = color_space_state_register((_BYTE *)v21[3]);
      CGColorSpaceSetProperty((uint64_t)v21, CFSTR("kCGColorSpaceLinearDerivative"), v21);
    }
    goto LABEL_17;
  }
  v21 = 0;
  v2 = 0;
  if (LinearizedProfile)
  {
LABEL_17:
    CFRelease(LinearizedProfile);
    v2 = (CGColorSpace *)v21;
  }
  if (v7)
    CFRelease(v7);
  CFRelease(v4);
  return v2;
}

uint64_t CGColorSpaceGetAlternateColorSpace(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  if (result)
  {
    v1 = *(_QWORD *)(result + 24);
    v2 = *(_DWORD *)(v1 + 20);
    switch(v2)
    {
      case 6:
        v3 = *(_QWORD *)(v1 + 88) + 56;
        break;
      case 10:
        v3 = *(_QWORD *)(v1 + 88) + 48;
        break;
      case 8:
        v3 = *(_QWORD *)(v1 + 88) + 8;
        break;
      default:
        return 0;
    }
    return *(_QWORD *)v3;
  }
  return result;
}

uint64_t CGColorSpaceCreateCopyWithNativeGamma(CGColorSpace *a1)
{
  CFDataRef v1;
  CFDataRef v2;
  void *ProfileWithNativeGamma_f;
  CFArrayRef v4;
  uint64_t i;
  const void *v6;
  CFDictionaryRef v7;
  uint64_t CopyWithNativeGamma_f;
  const __CFData *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *icc;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  _BYTE v28[296];
  void *values[37];
  void *v30[4];

  v30[3] = *(void **)MEMORY[0x1E0C80C00];
  v1 = CGColorSpaceCopyICCData(a1);
  if (!v1)
    return 0;
  v2 = v1;
  if (CGCMSUtilsCreateProfileWithNativeGamma_cglibrarypredicate != -1)
    dispatch_once(&CGCMSUtilsCreateProfileWithNativeGamma_cglibrarypredicate, &__block_literal_global_340);
  ProfileWithNativeGamma_f = (void *)CGCMSUtilsCreateProfileWithNativeGamma_f(v2, 0);
  if (ProfileWithNativeGamma_f)
  {
    values[0] = CFNumberCreate(0, kCFNumberSInt16Type, &CGCMSUtilsCreateProfileWithNativeGamma_iccDate);
    values[1] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_184F0C766);
    values[2] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_184F0C768);
    values[3] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_184F0C76A);
    values[4] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_184F0C76C);
    values[5] = CFNumberCreate(0, kCFNumberSInt16Type, &unk_184F0C76E);
    v4 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 6, MEMORY[0x1E0C9B378]);
    for (i = 0; i != 6; ++i)
    {
      v6 = values[i];
      if (v6)
        CFRelease(v6);
    }
    *(_OWORD *)v28 = xmmword_1E1631A68;
    *(_QWORD *)&v28[16] = CFSTR("Date");
    v30[0] = CFSTR("copyWithNativeGamma");
    v30[1] = ProfileWithNativeGamma_f;
    v30[2] = v4;
    v7 = CFDictionaryCreate(0, (const void **)v28, (const void **)v30, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (CGCMSUtilsCreateProfileWithNativeGamma_cglibrarypredicate_346 != -1)
      dispatch_once(&CGCMSUtilsCreateProfileWithNativeGamma_cglibrarypredicate_346, &__block_literal_global_348);
    ProfileWithNativeGamma_f = (void *)CGCMSUtilsCreateProfileWithNativeGamma_f_345(v7);
    CFRelease(v7);
  }
  if (CGColorSpaceCreateCopyWithNativeGamma_cglibrarypredicate != -1)
    dispatch_once(&CGColorSpaceCreateCopyWithNativeGamma_cglibrarypredicate, &__block_literal_global_49_20983);
  CopyWithNativeGamma_f = CGColorSpaceCreateCopyWithNativeGamma_f(ProfileWithNativeGamma_f, 0);
  v9 = (const __CFData *)CopyWithNativeGamma_f;
  if (ProfileWithNativeGamma_f && CopyWithNativeGamma_f)
  {
    memcpy(values, &CGICCProfileInfoInitializer, sizeof(values));
    CGCMSUtilsGetICCProfileInfo(ProfileWithNativeGamma_f, (uint64_t)values, 1, v10, v11, v12, v13, v14);
    memcpy(v28, values, sizeof(v28));
    icc = (unsigned int *)color_space_state_create_icc(ProfileWithNativeGamma_f, v9, (int *)v28);
    v23 = CGColorSpaceCreateWithState(icc, v16, v17, v18, v19, v20, v21, v22);
    if (icc)
    {
      do
      {
        v24 = __ldxr(icc);
        v25 = v24 - 1;
      }
      while (__stxr(v25, icc));
      if (!v25)
        color_space_state_dealloc((uint64_t)icc);
    }
    if (v23)
      *(_QWORD *)(v23 + 24) = color_space_state_register(*(_BYTE **)(v23 + 24));
    goto LABEL_24;
  }
  v23 = 0;
  v26 = 0;
  if (ProfileWithNativeGamma_f)
  {
LABEL_24:
    CFRelease(ProfileWithNativeGamma_f);
    v26 = v23;
  }
  if (v9)
    CFRelease(v9);
  CFRelease(v2);
  return v26;
}

CGColorSpaceRef CGColorSpaceCreateCopyWithStandardRange(CGColorSpaceRef s)
{
  CGColorSpaceRef colorspace_with_ColorSync_profile;
  CFDataRef v3;
  CFDataRef v4;
  const void *CopyWithStandardRange_f;
  const void *v6;

  colorspace_with_ColorSync_profile = colorspace_from_properties((uint64_t)s, CFSTR("kCGColorSpaceStandardRangeOriginal"));
  if (!colorspace_with_ColorSync_profile)
  {
    if (!s)
      return 0;
    if (!*(_BYTE *)(*((_QWORD *)s + 3) + 13))
    {
      CFRetain(s);
      return s;
    }
    v3 = CGColorSpaceCopyICCData(s);
    if (v3)
    {
      v4 = v3;
      if (CGColorSpaceCreateCopyWithStandardRange_cglibrarypredicate != -1)
        dispatch_once(&CGColorSpaceCreateCopyWithStandardRange_cglibrarypredicate, &__block_literal_global_51_20987);
      CopyWithStandardRange_f = (const void *)CGColorSpaceCreateCopyWithStandardRange_f(v4, 0);
      if (CopyWithStandardRange_f)
      {
        v6 = CopyWithStandardRange_f;
        colorspace_with_ColorSync_profile = create_colorspace_with_ColorSync_profile(CopyWithStandardRange_f, 0);
        CGColorSpaceSetProperty((uint64_t)colorspace_with_ColorSync_profile, CFSTR("kCGColorSpaceStandardRangeOriginal"), colorspace_with_ColorSync_profile);
        CFRelease(v6);
      }
      else
      {
        colorspace_with_ColorSync_profile = 0;
      }
      CFRelease(v4);
    }
    else
    {
      return 0;
    }
  }
  return colorspace_with_ColorSync_profile;
}

uint64_t CGColorSpaceCreateCopyWithPQTransferFunctions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  CGPostError((uint64_t)"CGColorSpaceCreateCopyWithPQTransferFunctions is decomissioned. Please use CGColorSpaceCreateFromCICP", a2, a3, a4, a5, a6, a7, a8, vars0);
  return 0;
}

uint64_t CGColorSpaceCopyICCProfileASCIIDescriptionString(uint64_t a1)
{
  uint64_t (*v1)(void);

  if (a1 && (v1 = *(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 104) + 40)) != 0)
    return v1();
  else
    return 0;
}

float CGColorSpaceSanitizeHeadroom(_QWORD *a1, float a2)
{
  float HeadroomInfo;
  _BYTE *v4;
  float v5;
  BOOL v6;
  float result;

  if (a2 == 0.0)
  {
    HeadroomInfo = CGColorSpaceGetHeadroomInfo(a1, 0);
  }
  else
  {
    HeadroomInfo = 1.0;
    if (a1)
    {
      v4 = (_BYTE *)a1[3];
      if (v4[13] || v4[16] || v4[17])
        HeadroomInfo = a2;
    }
  }
  v5 = 1.0;
  if (HeadroomInfo >= 1.0)
    v5 = HeadroomInfo;
  v6 = HeadroomInfo == 0.0;
  result = 0.0;
  if (!v6)
    return v5;
  return result;
}

float CGColorSpaceGetHeadroomInfo(_QWORD *a1, int *a2)
{
  CFTypeID v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  const void *v15;
  CFTypeID v16;
  const __CFDictionary *Value;
  const __CFDictionary *v18;
  CFTypeID v19;
  const __CFNumber *v20;
  _BYTE *v21;
  float valuePtr;

  valuePtr = 0.0;
  if (!a1)
    goto LABEL_6;
  v4 = CFGetTypeID(a1);
  if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1)
    dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_77);
  if (v4 != CGColorSpaceGetTypeID_type_id || CGColorSpaceGetType(a1) - 7 < 3)
  {
LABEL_6:
    v5 = 0;
    goto LABEL_7;
  }
  if (!CGColorSpaceContainsFlexGTCInfo((_BOOL8)a1)
    || (v14 = (const void *)CGColorSpaceCopyFlexGTCInfo((uint64_t)a1, v7, v8, v9, v10, v11, v12, v13)) == 0)
  {
LABEL_18:
    v21 = (_BYTE *)a1[3];
    if (v21[13])
    {
      valuePtr = 0.0;
    }
    else
    {
      if (!v21[16] && !v21[17])
      {
        valuePtr = 1.0;
        goto LABEL_25;
      }
      valuePtr = 4.9261;
    }
    v5 = 2;
    goto LABEL_7;
  }
  v15 = v14;
  v16 = CFGetTypeID(v14);
  if (v16 != CFDictionaryGetTypeID()
    || (Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v15, CFSTR("com.apple.ColorSync.MonoGainMapParams"))) == 0|| (v18 = Value, v19 = CFGetTypeID(Value), v19 != CFDictionaryGetTypeID())|| (v20 = (const __CFNumber *)CFDictionaryGetValue(v18, CFSTR("com.apple.ColorSync.GainMapBaselineHeadroom"))) == 0)
  {
    CFRelease(v15);
    goto LABEL_18;
  }
  CFNumberGetValue(v20, kCFNumberFloatType, &valuePtr);
  valuePtr = exp2f(valuePtr);
  CFRelease(v15);
LABEL_25:
  v5 = 1;
LABEL_7:
  if (a2)
    *a2 = v5;
  return valuePtr;
}

BOOL CGColorSpaceDumpPropertyList(CGColorSpace *a1)
{
  CFPropertyListRef v2;
  const void *v3;
  CFDataRef Data;
  const __CFData *v5;
  const __CFString *v6;
  const __CFString *v7;
  const char *CStringPtr;
  FILE *v9;
  FILE *v10;
  size_t Length;
  const UInt8 *BytePtr;
  _BOOL8 v13;
  char __filename[8];
  uint64_t v16;
  size_t (*v17)(uint64_t);
  void *v18;
  char *v19;
  char buffer[256];
  char v21[1024];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = CGColorSpaceCopyPropertyList(a1);
  if (!v2)
    return 0;
  v3 = v2;
  Data = CFPropertyListCreateData(0, v2, kCFPropertyListXMLFormat_v1_0, 0, 0);
  if (Data)
  {
    v5 = Data;
    bzero(v21, 0x400uLL);
    *(_QWORD *)__filename = MEMORY[0x1E0C809B0];
    v16 = 0x40000000;
    v17 = __initialize_path_block_invoke;
    v18 = &__block_descriptor_tmp_78_21002;
    v19 = v21;
    if (initialize_path_predicate != -1)
      dispatch_once(&initialize_path_predicate, __filename);
    if (v21[0] && (v6 = CFCopyDescription(a1)) != 0)
    {
      v7 = v6;
      CStringPtr = CFStringGetCStringPtr(v6, 0x600u);
      if (!CStringPtr)
      {
        CStringPtr = buffer;
        CFStringGetCString(v7, buffer, 256, 0x600u);
      }
      bzero(__filename, 0x400uLL);
      __sprintf_chk(__filename, 0, 0x400uLL, "%s/%s.plist", v21, CStringPtr);
      v9 = fopen(__filename, "w");
      if (v9)
      {
        v10 = v9;
        Length = CFDataGetLength(v5);
        BytePtr = CFDataGetBytePtr(v5);
        v13 = 0;
        if (BytePtr && Length)
          v13 = fwrite(BytePtr, 1uLL, Length, v10) == Length;
        fclose(v10);
      }
      else
      {
        v13 = 0;
      }
      CFRelease(v7);
    }
    else
    {
      v13 = 0;
    }
    CFRelease(v5);
  }
  else
  {
    v13 = 0;
  }
  CFRelease(v3);
  return v13;
}

size_t __initialize_path_block_invoke(uint64_t a1)
{
  size_t result;

  result = confstr(65537, *(char **)(a1 + 32), 0x400uLL);
  if (!result)
    **(_BYTE **)(a1 + 32) = 0;
  return result;
}

CGColorSpaceRef CGColorSpaceCreateWithURL(CFURLRef fileURL)
{
  __CFReadStream *v1;
  CGColorSpaceRef v2;
  __CFData *i;
  CFIndex v4;
  CFPropertyListRef v5;
  const void *v6;
  UInt8 buffer[8];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (!fileURL)
    return 0;
  v1 = CFReadStreamCreateWithFile(0, fileURL);
  v2 = v1;
  if (!v1)
    return v2;
  if (!CFReadStreamOpen(v1))
  {
    CFRelease(v2);
    return 0;
  }
  for (i = CFDataCreateMutable(0, 0); ; CFDataAppendBytes(i, buffer, v4))
  {
    v4 = CFReadStreamRead(v2, buffer, 1024);
    if (!v4)
      break;
  }
  CFReadStreamClose(v2);
  CFRelease(v2);
  if (!i)
    return 0;
  *(_QWORD *)buffer = 0;
  v5 = CFPropertyListCreateWithData(0, i, 0, (CFPropertyListFormat *)buffer, 0);
  if (v5)
  {
    v6 = v5;
    v2 = CGColorSpaceCreateWithPropertyList(v5);
    CFRelease(v6);
  }
  else
  {
    v2 = 0;
  }
  CFRelease(i);
  return v2;
}

void TrueTypeSubset::~TrueTypeSubset(TrueTypeSubset *this)
{
  FontSubset::~FontSubset(this);
  JUMPOUT(0x186DC23C4);
}

void TrueTypeSubset::emit_definition(TrueTypeSubset *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  char *glyph_index_set;
  const __CFData *embedded_font;
  void *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  CFIndex Length;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  const UInt8 *BytePtr;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110[3];
  void *__p[3];

  if (*((_QWORD *)this + 13))
  {
    v9 = *((_QWORD *)this + 1);
    v10 = **(_QWORD **)(v9 + 8);
    PDFDocumentBeginObject(v10, *((_QWORD *)this + 6), a3, a4, a5, a6, a7, a8);
    PDFDocumentPrintf(v10, (uint64_t)"<<", v11, v12, v13, v14, v15, v16, v104);
    PDFDocumentPrintf(v10, (uint64_t)"/Type /Font", v17, v18, v19, v20, v21, v22, v105);
    PDFDocumentPrintf(v10, (uint64_t)"/Subtype /TrueType", v23, v24, v25, v26, v27, v28, v106);
    v35 = (char *)*((_QWORD *)this + 8);
    if (*((char *)this + 87) >= 0)
      v35 = (char *)this + 64;
    PDFDocumentPrintf(v10, (uint64_t)"/BaseFont /%N", v29, v30, v31, v32, v33, v34, (uint64_t)v35);
    FontDescriptor::FontDescriptor((FontDescriptor *)v110, (const PDFFont *)v9, *((_DWORD *)this + 10) == 1);
    PDFDocumentPrintReference(v10, (uint64_t)"/FontDescriptor %R", (uint64_t)v110[1], v36, v37, v38, v39, v40);
    if (*((_DWORD *)this + 10) == 1)
    {
      PDFDocumentPrintf(v10, (uint64_t)"/Encoding /MacRomanEncoding", v41, v42, v43, v44, v45, v46, v107);
      v47 = 0;
    }
    else
    {
      v47 = PDFXRefTableAddObject(*(_QWORD **)(v10 + 464));
      PDFDocumentPrintReference(v10, (uint64_t)"/ToUnicode %R", v47, v48, v49, v50, v51, v52);
    }
    FontSubset::emit_widths(this);
    PDFDocumentPrintf(v10, (uint64_t)">>", v53, v54, v55, v56, v57, v58, v107);
    PDFDocumentEndObject(v10, v59, v60, v61, v62, v63, v64, v65);
    if (v47)
    {
      v109 = v9;
      FontSubset::get_encoding_vector((FontSubset *)__p, (uint64_t)this);
      ToUnicode::write<std::vector<unsigned short>>((uint64_t)&v109, v47, __p);
      if (__p[0])
        operator delete(__p[0]);
    }
    if (*(_BYTE *)(v9 + 56))
    {
      FontDescriptor::emit_definition(v110, (uint64_t)this + 64, 0, v66, v67, v68, v69, v70);
      return;
    }
    v71 = PDFXRefTableAddObject(*(_QWORD **)(v10 + 464));
    FontDescriptor::emit_definition(v110, (uint64_t)this + 64, v71, v72, v73, v74, v75, v76);
    v77 = (_QWORD *)*((_QWORD *)this + 1);
    glyph_index_set = FontSubset::create_glyph_index_set(this);
    if (*((_DWORD *)this + 10) == 1)
    {
      embedded_font = (const __CFData *)PDFFont::create_embedded_font(v77, (uint64_t *)this + 8, (uint64_t)glyph_index_set, 0, 0);
    }
    else
    {
      FontSubset::get_encoding_vector((FontSubset *)__p, (uint64_t)this);
      v80 = __p[0];
      if (__p[1] == __p[0])
      {
        __break(1u);
        return;
      }
      embedded_font = (const __CFData *)PDFFont::create_embedded_font(v77, (uint64_t *)this + 8, (uint64_t)glyph_index_set, (uint64_t)__p[0], 0);
      if (v80)
        operator delete(v80);
    }
    CGFontIndexSetRelease((uint64_t)glyph_index_set);
    if (embedded_font)
    {
      if ((unint64_t)(CFDataGetLength(embedded_font) - 0x80000000) > 0xFFFFFFFF80000000)
      {
        v81 = **(_QWORD **)(*((_QWORD *)this + 1) + 8);
        v82 = PDFStreamCreateWithObjectNumber(v81, v71);
        PDFDocumentBeginObject(*v82, v82[1], v83, v84, v85, v86, v87, v88);
        PDFDocumentPrintf(*v82, (uint64_t)"<<", v89, v90, v91, v92, v93, v94, v108);
        Length = CFDataGetLength(embedded_font);
        v96 = Length;
        PDFDocumentPrintf(v81, (uint64_t)"/Length1 %d", v97, v98, v99, v100, v101, v102, Length);
        PDFStreamBeginData((CGDataConsumerRef)v82);
        BytePtr = CFDataGetBytePtr(embedded_font);
        CGDataConsumerPutBytes(v82[3], (uint64_t)BytePtr, v96);
        PDFStreamEndData(v82);
        PDFStreamEnd((CFDataRef *)v82);
        PDFStreamRelease((uint64_t)v82);
      }
      CFRelease(embedded_font);
    }
  }
}

void sub_184E27EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  void *v14;

  if (v14)
    operator delete(v14);
  _Unwind_Resume(exception_object);
}

void PDFFormRelease(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v10;
  uint64_t v11;

  if (a1)
  {
    if ((*(_DWORD *)a1)-- == 1)
    {
      if (*((_DWORD *)a1 + 6) <= 1u)
      {
        v10 = (const void *)a1[4];
        if (v10)
          CFRelease(v10);
      }
      v11 = a1[2];
      if (v11)
        PDFContentStreamRelease(v11, a2, a3, a4, a5, a6, a7, a8);
      free(a1);
    }
  }
}

void pattern_finalize_21066(uint64_t a1)
{
  CGColorSpaceRef *v1;

  v1 = *(CGColorSpaceRef **)(a1 + 88);
  if (v1)
    CGColorSpaceRelease(*v1);
}

uint64_t pattern_get_descriptor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

CGColorRef pattern_create_default_color(CGColorSpace *a1)
{
  CGPattern *UncoloredEmpty;
  CGPattern *v3;
  uint64_t v4;
  const CGFloat *v5;
  CGColorRef v6;

  if (**(_QWORD **)(*((_QWORD *)a1 + 3) + 88))
    UncoloredEmpty = (CGPattern *)CGPatternCreateUncoloredEmpty();
  else
    UncoloredEmpty = (CGPattern *)CGPatternCreateColoredEmpty();
  v3 = UncoloredEmpty;
  v4 = *((_QWORD *)a1 + 3);
  if (v4)
    v5 = *(const CGFloat **)(v4 + 32);
  else
    v5 = 0;
  v6 = CGColorCreateWithPattern(a1, UncoloredEmpty, v5);
  if (v3)
    CFRelease(v3);
  return v6;
}

uint64_t *VEC::template_mark_pixelmask_row<(CGCompositeOperation)0,_rgba16_t>(uint64_t *result, uint16x4_t **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, double a8, int8x8_t a9, double a10, double a11, double a12, uint32x4_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint16x4_t *v20;
  char *v21;
  uint64_t v22;
  int8x16_t v23;
  uint64_t v24;
  uint32x4_t v25;
  int32x4_t v26;
  unsigned __int32 v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  uint16x8_t v35;
  uint32x4_t v36;
  uint32x4_t v37;
  int8x16_t *v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int64_t v42;
  int64_t v43;
  uint64_t v44;
  uint32x4_t v45;
  int32x4_t v46;
  uint32x4_t v47;
  unint64_t v48;
  uint64_t v49;

  v17 = a17;
  v18 = *result;
  v19 = *a3;
  v20 = *a2;
  v21 = *a4;
  if (a17 < 2)
    goto LABEL_33;
  v22 = 2 * a6;
  v23.i64[0] = -1;
  v23.i64[1] = -1;
  v24 = 16 * a6;
  a9.i32[1] = 0;
  v25 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v26.i64[0] = 0x800000008000;
  v26.i64[1] = 0x800000008000;
  while (1)
  {
    v27 = *(unsigned __int16 *)v21;
    if (!*(_WORD *)v21)
    {
      v38 = (int8x16_t *)&v21[v17];
      v39 = (int8x16_t *)v21;
      do
        v40 = v39++;
      while (v39 <= v38 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v40)) & 0x80) != 0);
      do
      {
        v41 = v40;
        v40 = (int8x16_t *)((char *)v40 + 4);
      }
      while (v40 <= v38 && !v41->i32[0]);
      if (v41 < v38)
      {
        while (!v41->i8[0])
        {
          v41 = (int8x16_t *)((char *)v41 + 1);
          if (v41 >= v38)
          {
            v41 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      v42 = (char *)v41 - v21;
      v43 = ((char *)v41 - v21) * a6;
      v18 += 8 * v43;
      v20 += v43;
      v21 += v43;
      v17 -= v42;
      goto LABEL_30;
    }
    if (v27 != 0xFFFF)
      break;
    v28 = (int8x16_t *)&v21[v17];
    v29 = (int8x16_t *)v21;
    do
      v30 = v29++;
    while (v29 <= v28 && (vminvq_u8((uint8x16_t)vceqq_s8(*v30, v23)) & 0x80) != 0);
    do
    {
      v31 = v30;
      v30 = (int8x16_t *)((char *)v30 + 4);
    }
    while (v30 <= v28 && v31->i32[0] == -1);
    if (v31 < v28)
    {
      while (v31->u8[0] == 255)
      {
        v31 = (int8x16_t *)((char *)v31 + 1);
        if (v31 >= v28)
        {
          v31 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    v32 = 0;
    v33 = (char *)v31 - v21;
    v34 = (char *)v31 - v21;
    do
    {
      *(_OWORD *)&v20->i8[v32] = 0uLL;
      v21 += v22;
      v34 -= 2;
      v32 += v24;
    }
    while (v34 > 1);
    v20 = (uint16x4_t *)((char *)v20 + v32);
    v18 += v32;
    v17 = v17 - v33 + v34;
LABEL_30:
    if (v17 <= 1)
      goto LABEL_33;
  }
  while (1)
  {
    a13.i32[0] = v27;
    v35 = (uint16x8_t)vqtbl1q_s8((int8x16_t)a13, (int8x16_t)xmmword_1850049E0);
    v36 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*v20, *(uint16x4_t *)v35.i8), v25), v26);
    v37 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(*(uint16x8_t *)v20->i8, v35), v25), v26);
    a13 = vsraq_n_u32(v37, v37, 0x10uLL);
    *(uint16x8_t *)v20->i8 = vqsubq_u16(*(uint16x8_t *)v20->i8, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v36, v36, 0x10uLL), 0x10uLL), a13, 0x10uLL));
    v21 += v22;
    v17 -= 2;
    if (v17 < 2)
      break;
    v27 = *(unsigned __int16 *)v21;
    v18 += v24;
    v20 = (uint16x4_t *)((char *)v20 + v24);
    if ((unsigned __int16)(v27 - 1) >= 0xFFFEu)
      goto LABEL_30;
  }
  v18 += v24;
  v20 = (uint16x4_t *)((char *)v20 + v24);
LABEL_33:
  v44 = v17 + a16;
  if (v44)
  {
    v45 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v46.i64[0] = 0x800000008000;
    v46.i64[1] = 0x800000008000;
    do
    {
      if (*v21)
      {
        a9.i32[0] = *v21;
        v47 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*v20, (uint16x4_t)vdup_lane_s8(a9, 0)), v45), v46);
        a9 = (int8x8_t)vqsub_u16(*v20, vqshrn_n_u32(vsraq_n_u32(v47, v47, 0x10uLL), 0x10uLL));
        *v20 = (uint16x4_t)a9;
      }
      v48 = v18 + 8 * a6;
      v21 += a6;
      if (v48 >= v19)
        v49 = -(uint64_t)a5;
      else
        v49 = 0;
      v18 = v48 + 8 * v49;
      v20 += a6;
      --v44;
    }
    while (v44);
  }
  *result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

uint16x4_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)1,_rgba16_t>(uint16x4_t **result, uint16x4_t **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, double a8, uint32x4_t a9, double a10, double a11, double a12, int8x16_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  unint64_t v17;
  uint16x4_t *v18;
  unint64_t v19;
  uint16x4_t *v20;
  char *v21;
  uint64_t v22;
  int8x16_t v23;
  uint64_t v24;
  int32x4_t v25;
  unsigned __int32 v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int64_t v38;
  int64_t v39;
  uint64_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint32x4_t v44;
  uint32x4_t v45;
  uint32x4_t v46;
  uint32x4_t v47;
  uint64_t v48;
  uint32x4_t v49;
  int32x4_t v50;
  int8x8_t v51;
  uint16x4_t *v52;
  uint64_t v53;

  v17 = a17;
  v18 = *result;
  v19 = *a3;
  v20 = *a2;
  v21 = *a4;
  if (a17 < 2)
    goto LABEL_34;
  v22 = 2 * a6;
  v23.i64[0] = -1;
  v23.i64[1] = -1;
  v24 = 16 * a6;
  a9 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v25.i64[0] = 0x800000008000;
  v25.i64[1] = 0x800000008000;
  while (1)
  {
    v26 = *(unsigned __int16 *)v21;
    if (!*(_WORD *)v21)
    {
      v34 = (int8x16_t *)&v21[v17];
      v35 = (int8x16_t *)v21;
      do
        v36 = v35++;
      while (v35 <= v34 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v36)) & 0x80) != 0);
      do
      {
        v37 = v36;
        v36 = (int8x16_t *)((char *)v36 + 4);
      }
      while (v36 <= v34 && !v37->i32[0]);
      if (v37 < v34)
      {
        while (!v37->i8[0])
        {
          v37 = (int8x16_t *)((char *)v37 + 1);
          if (v37 >= v34)
          {
            v37 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      v38 = (char *)v37 - v21;
      v39 = ((char *)v37 - v21) * a6;
      v18 += v39;
      v20 += v39;
      v21 += v39;
      v17 -= v38;
      goto LABEL_31;
    }
    if (v26 != 0xFFFF)
      break;
    v27 = (int8x16_t *)&v21[v17];
    v28 = (int8x16_t *)v21;
    do
      v29 = v28++;
    while (v28 <= v27 && (vminvq_u8((uint8x16_t)vceqq_s8(*v29, v23)) & 0x80) != 0);
    do
    {
      v30 = v29;
      v29 = (int8x16_t *)((char *)v29 + 4);
    }
    while (v29 <= v27 && v30->i32[0] == -1);
    if (v30 < v27)
    {
      while (v30->u8[0] == 255)
      {
        v30 = (int8x16_t *)((char *)v30 + 1);
        if (v30 >= v27)
        {
          v30 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    v31 = 0;
    v32 = (char *)v30 - v21;
    v33 = (char *)v30 - v21;
    do
    {
      *(_OWORD *)&v20->i8[v31] = *(_OWORD *)&v18->i8[v31];
      v21 += v22;
      v33 -= 2;
      v31 += v24;
    }
    while (v33 > 1);
    v20 = (uint16x4_t *)((char *)v20 + v31);
    v18 = (uint16x4_t *)((char *)v18 + v31);
    v17 = v17 - v32 + v33;
LABEL_31:
    if (v17 <= 1)
      goto LABEL_34;
  }
  v40 = 0;
  while (1)
  {
    v41 = *(uint16x8_t *)&v18->i8[v40];
    v42 = *(uint16x8_t *)&v20->i8[v40];
    a13.i32[0] = v26;
    a13 = vqtbl1q_s8(a13, (int8x16_t)xmmword_1850049E0);
    v43 = (uint16x8_t)vmvnq_s8(a13);
    v44 = vqaddq_u32(vmull_u16(*(uint16x4_t *)v41.i8, *(uint16x4_t *)a13.i8), vmull_u16(*(uint16x4_t *)v42.i8, *(uint16x4_t *)v43.i8));
    v45 = vqaddq_u32(vmull_high_u16(v41, (uint16x8_t)a13), vmull_high_u16(v42, v43));
    v46 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v44, a9), v25);
    v47 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v45, a9), v25);
    *(uint16x8_t *)&v20->i8[v40] = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v46, v46, 0x10uLL), 0x10uLL), vsraq_n_u32(v47, v47, 0x10uLL), 0x10uLL);
    v21 += v22;
    v17 -= 2;
    if (v17 < 2)
      break;
    v26 = *(unsigned __int16 *)v21;
    v40 += v24;
    if ((unsigned __int16)(v26 - 1) >= 0xFFFEu)
    {
      v18 = (uint16x4_t *)((char *)v18 + v40);
      v20 = (uint16x4_t *)((char *)v20 + v40);
      goto LABEL_31;
    }
  }
  v18 = (uint16x4_t *)((char *)v18 + v24 + v40);
  v20 = (uint16x4_t *)((char *)v20 + v24 + v40);
LABEL_34:
  v48 = v17 + a16;
  if (v48)
  {
    v49 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v50.i64[0] = 0x800000008000;
    v50.i64[1] = 0x800000008000;
    do
    {
      if (*v21)
      {
        a9.i32[0] = *v21;
        v51 = vdup_lane_s8(*(int8x8_t *)a9.i8, 0);
        a9 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vmull_u16(*v18, (uint16x4_t)v51), vmull_u16(*v20, (uint16x4_t)vmvn_s8(v51))), v49), v50);
        *(uint16x4_t *)a9.i8 = vqshrn_n_u32(vsraq_n_u32(a9, a9, 0x10uLL), 0x10uLL);
        *v20 = *(uint16x4_t *)a9.i8;
      }
      v52 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v52 >= v19)
        v53 = -(uint64_t)a5;
      else
        v53 = 0;
      v18 = &v52[v53];
      v20 += a6;
      --v48;
    }
    while (v48);
  }
  *result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

uint16x4_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)2,_rgba16_t>(uint16x4_t **result, uint16x4_t **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, double a8, int32x4_t a9, double a10, double a11, double a12, double a13, int8x16_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  unint64_t v18;
  uint16x4_t *v19;
  unint64_t v20;
  uint16x4_t *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint32x4_t v25;
  int8x16_t v26;
  unsigned __int32 v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  int8x16_t v35;
  uint16x8_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int8x16_t *v42;
  int64_t v43;
  int64_t v44;
  uint64_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  int16x8_t v49;
  uint32x4_t v50;
  uint32x4_t v51;
  uint32x4_t v52;
  uint32x4_t v53;
  int16x4_t v54;
  uint16x8_t v55;
  uint32x4_t v56;
  uint32x4_t v57;
  uint64_t v58;
  uint32x4_t v59;
  int32x4_t v60;
  uint32x4_t v61;
  uint16x4_t v62;
  uint16x4_t *v63;
  uint64_t v64;

  v18 = a18;
  v19 = *result;
  v20 = *a3;
  v21 = *a2;
  v22 = *a4;
  if (a18 < 2)
    goto LABEL_34;
  v23 = 2 * a6;
  v24 = 16 * a6;
  v25 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a9.i64[0] = 0x800000008000;
  a9.i64[1] = 0x800000008000;
  v26.i64[0] = -1;
  v26.i64[1] = -1;
  while (1)
  {
    v27 = *(unsigned __int16 *)v22;
    if (!*(_WORD *)v22)
    {
      v39 = (int8x16_t *)&v22[v18];
      v40 = (int8x16_t *)v22;
      do
        v41 = v40++;
      while (v40 <= v39 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v41)) & 0x80) != 0);
      do
      {
        v42 = v41;
        v41 = (int8x16_t *)((char *)v41 + 4);
      }
      while (v41 <= v39 && !v42->i32[0]);
      if (v42 < v39)
      {
        while (!v42->i8[0])
        {
          v42 = (int8x16_t *)((char *)v42 + 1);
          if (v42 >= v39)
          {
            v42 = (int8x16_t *)&v22[v18];
            break;
          }
        }
      }
      v43 = (char *)v42 - v22;
      v44 = ((char *)v42 - v22) * a6;
      v19 += v44;
      v21 += v44;
      v22 += v44;
      v18 -= v43;
      goto LABEL_31;
    }
    if (v27 != 0xFFFF)
      break;
    v28 = (int8x16_t *)&v22[v18];
    v29 = (int8x16_t *)v22;
    do
      v30 = v29++;
    while (v29 <= v28 && (vminvq_u8((uint8x16_t)vceqq_s8(*v30, v26)) & 0x80) != 0);
    do
    {
      v31 = v30;
      v30 = (int8x16_t *)((char *)v30 + 4);
    }
    while (v30 <= v28 && v31->i32[0] == -1);
    if (v31 < v28)
    {
      while (v31->u8[0] == 255)
      {
        v31 = (int8x16_t *)((char *)v31 + 1);
        if (v31 >= v28)
        {
          v31 = (int8x16_t *)&v22[v18];
          break;
        }
      }
    }
    v32 = 0;
    v33 = (char *)v31 - v22;
    v34 = (char *)v31 - v22;
    do
    {
      v35 = *(int8x16_t *)&v19->i8[v32];
      v36 = *(uint16x8_t *)&v21->i8[v32];
      a14 = vbicq_s8(v35, (int8x16_t)vceqzq_s16((int16x8_t)vqtbl1q_s8(v35, (int8x16_t)xmmword_1850049F0)));
      v37 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v36.i8, *(uint16x4_t *)v35.i8, 3), v25), a9);
      v38 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v36, (uint16x8_t)v35, 7), v25), a9);
      *(uint16x8_t *)&v21->i8[v32] = vqaddq_u16((uint16x8_t)a14, vqsubq_u16(v36, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v37, v37, 0x10uLL), 0x10uLL), vsraq_n_u32(v38, v38, 0x10uLL), 0x10uLL)));
      v22 += v23;
      v34 -= 2;
      v32 += v24;
    }
    while (v34 > 1);
    v21 = (uint16x4_t *)((char *)v21 + v32);
    v19 = (uint16x4_t *)((char *)v19 + v32);
    v18 = v18 - v33 + v34;
LABEL_31:
    if (v18 <= 1)
      goto LABEL_34;
  }
  v45 = 0;
  while (1)
  {
    v46 = *(uint16x8_t *)&v19->i8[v45];
    v47 = *(uint16x8_t *)&v21->i8[v45];
    a14.i32[0] = v27;
    v48 = (uint16x8_t)vqtbl1q_s8(a14, (int8x16_t)xmmword_1850049E0);
    v49 = (int16x8_t)vmull_u16(*(uint16x4_t *)v46.i8, *(uint16x4_t *)v48.i8);
    v50 = vmull_high_u16(v46, v48);
    v51 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)v49, v25), a9);
    *(uint16x4_t *)v51.i8 = vqshrn_n_u32(vsraq_n_u32(v51, v51, 0x10uLL), 0x10uLL);
    v52 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v50, v25), a9);
    v53 = vsraq_n_u32(v52, v52, 0x10uLL);
    *(int16x4_t *)v49.i8 = vdup_lane_s16(*(int16x4_t *)v51.i8, 3);
    v54 = (int16x4_t)vqshrn_n_u32(v53, 0x10uLL);
    v49.i64[1] = vdupq_lane_s16(v54, 3).u64[0];
    v55 = (uint16x8_t)vbicq_s8((int8x16_t)vqshrn_high_n_u32(*(uint16x4_t *)v51.i8, v53, 0x10uLL), (int8x16_t)vceqzq_s16(v49));
    v56 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v47.i8, *(uint16x4_t *)v51.i8, 3), v25), a9);
    v57 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_lane_u16(v47, (uint16x4_t)v54, 3), v25), a9);
    a14 = (int8x16_t)vsraq_n_u32(v57, v57, 0x10uLL);
    *(uint16x8_t *)&v21->i8[v45] = vqaddq_u16(v55, vqsubq_u16(v47, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v56, v56, 0x10uLL), 0x10uLL), (uint32x4_t)a14, 0x10uLL)));
    v22 += v23;
    v18 -= 2;
    if (v18 < 2)
      break;
    v27 = *(unsigned __int16 *)v22;
    v45 += v24;
    if ((unsigned __int16)(v27 - 1) >= 0xFFFEu)
    {
      v19 = (uint16x4_t *)((char *)v19 + v45);
      v21 = (uint16x4_t *)((char *)v21 + v45);
      goto LABEL_31;
    }
  }
  v19 = (uint16x4_t *)((char *)v19 + v24 + v45);
  v21 = (uint16x4_t *)((char *)v21 + v24 + v45);
LABEL_34:
  v58 = v18 + a17;
  if (v58)
  {
    v59 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v60.i64[0] = 0x800000008000;
    v60.i64[1] = 0x800000008000;
    do
    {
      if (*v22)
      {
        a9.i32[0] = *v22;
        v61 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*v19, (uint16x4_t)vdup_lane_s8(*(int8x8_t *)a9.i8, 0)), v59), v60);
        *(uint16x4_t *)v61.i8 = vqshrn_n_u32(vsraq_n_u32(v61, v61, 0x10uLL), 0x10uLL);
        v62 = (uint16x4_t)vbic_s8(*(int8x8_t *)v61.i8, (int8x8_t)vceqz_s16(vdup_lane_s16(*(int16x4_t *)v61.i8, 3)));
        a9 = vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*v21, *(uint16x4_t *)v61.i8, 3), v59), v60);
        *(uint16x4_t *)a9.i8 = vqadd_u16(v62, vqsub_u16(*v21, vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a9, (uint32x4_t)a9, 0x10uLL), 0x10uLL)));
        *v21 = *(uint16x4_t *)a9.i8;
      }
      v63 = &v19[a6];
      v22 += a6;
      if ((unint64_t)v63 >= v20)
        v64 = -(uint64_t)a5;
      else
        v64 = 0;
      v19 = &v63[v64];
      v21 += a6;
      --v58;
    }
    while (v58);
  }
  *result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)3,_rgba16_t>(int8x8_t **result, uint16x4_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, double a8, double a9, double a10, int32x4_t a11, double a12, double a13, double a14, uint32x4_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  unint64_t v18;
  int8x8_t *v19;
  unint64_t v20;
  uint16x4_t *v21;
  char *v22;
  unsigned int v23;
  int8x16_t v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint32x4_t v28;
  int32x4_t v29;
  unsigned __int32 v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint32x4_t v40;
  uint32x4_t v41;
  uint32x4_t v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int8x16_t *v46;
  int64_t v47;
  int64_t v48;
  uint64_t v49;
  uint16x8_t v50;
  int8x16_t v51;
  uint16x8_t v52;
  uint32x4_t v53;
  uint32x4_t v54;
  uint16x8_t v55;
  uint32x4_t v56;
  uint32x4_t v57;
  uint32x4_t v58;
  uint32x4_t v59;
  uint64_t v60;
  int8x8_t v61;
  __int16 v62;
  uint32x4_t v63;
  int32x4_t v64;
  int8x8_t v65;
  uint32x4_t v66;
  int8x8_t *v67;
  uint64_t v68;

  v18 = a18;
  v19 = *result;
  v20 = *a3;
  v21 = *a2;
  v22 = *a4;
  if (a18 < 2)
    goto LABEL_37;
  if (a7)
    v23 = 0;
  else
    v23 = -1;
  v24.i64[0] = 0xFFFF000000000000;
  v24.i64[1] = 0xFFFF000000000000;
  v25 = vandq_s8((int8x16_t)vdupq_n_s16(v23), v24);
  v26 = 2 * a6;
  v27 = 16 * a6;
  v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v29.i64[0] = 0x800000008000;
  v29.i64[1] = 0x800000008000;
  a11.i64[0] = -1;
  a11.i64[1] = -1;
  while (1)
  {
    v30 = *(unsigned __int16 *)v22;
    if (!*(_WORD *)v22)
    {
      v43 = (int8x16_t *)&v22[v18];
      v44 = (int8x16_t *)v22;
      do
        v45 = v44++;
      while (v44 <= v43 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v45)) & 0x80) != 0);
      do
      {
        v46 = v45;
        v45 = (int8x16_t *)((char *)v45 + 4);
      }
      while (v45 <= v43 && !v46->i32[0]);
      if (v46 < v43)
      {
        while (!v46->i8[0])
        {
          v46 = (int8x16_t *)((char *)v46 + 1);
          if (v46 >= v43)
          {
            v46 = (int8x16_t *)&v22[v18];
            break;
          }
        }
      }
      v47 = (char *)v46 - v22;
      v48 = ((char *)v46 - v22) * a6;
      v19 += v48;
      v21 += v48;
      v22 += v48;
      v18 -= v47;
      goto LABEL_34;
    }
    if (v30 != 0xFFFF)
      break;
    v31 = (int8x16_t *)&v22[v18];
    v32 = (int8x16_t *)v22;
    do
      v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqq_s8(*v33, (int8x16_t)a11)) & 0x80) != 0);
    do
    {
      v34 = v33;
      v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && v34->i32[0] == -1);
    if (v34 < v31)
    {
      while (v34->u8[0] == 255)
      {
        v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          v34 = (int8x16_t *)&v22[v18];
          break;
        }
      }
    }
    v35 = 0;
    v36 = (char *)v34 - v22;
    v37 = (char *)v34 - v22;
    do
    {
      v38 = *(uint16x8_t *)&v21->i8[v35];
      v39 = (uint16x8_t)vorrq_s8(*(int8x16_t *)&v19->i8[v35], v25);
      a15 = vmull_lane_u16(*(uint16x4_t *)v39.i8, *(uint16x4_t *)v38.i8, 3);
      v40 = vmull_high_laneq_u16(v39, v38, 7);
      v41 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(a15, v28), v29);
      v42 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v40, v28), v29);
      *(uint16x8_t *)&v21->i8[v35] = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v41, v41, 0x10uLL), 0x10uLL), vsraq_n_u32(v42, v42, 0x10uLL), 0x10uLL);
      v22 += v26;
      v37 -= 2;
      v35 += v27;
    }
    while (v37 > 1);
    v21 = (uint16x4_t *)((char *)v21 + v35);
    v19 = (int8x8_t *)((char *)v19 + v35);
    v18 = v18 - v36 + v37;
LABEL_34:
    if (v18 <= 1)
      goto LABEL_37;
  }
  v49 = 0;
  while (1)
  {
    v50 = *(uint16x8_t *)&v21->i8[v49];
    a15.i32[0] = v30;
    v51 = vqtbl1q_s8((int8x16_t)a15, (int8x16_t)xmmword_1850049E0);
    v52 = (uint16x8_t)vorrq_s8(*(int8x16_t *)&v19->i8[v49], v25);
    v53 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v52.i8, *(uint16x4_t *)v51.i8), v28), v29);
    v54 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v52, (uint16x8_t)v51), v28), v29);
    v55 = (uint16x8_t)vmvnq_s8(v51);
    v56 = vqaddq_u32(vmull_u16(*(uint16x4_t *)v50.i8, *(uint16x4_t *)v55.i8), vmull_lane_u16(vqshrn_n_u32(vsraq_n_u32(v53, v53, 0x10uLL), 0x10uLL), *(uint16x4_t *)v50.i8, 3));
    a15 = vmull_high_u16(v50, v55);
    v57 = vqaddq_u32(a15, vmull_laneq_u16(vqshrn_n_u32(vsraq_n_u32(v54, v54, 0x10uLL), 0x10uLL), v50, 7));
    v58 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v56, v28), v29);
    v59 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v57, v28), v29);
    *(uint16x8_t *)&v21->i8[v49] = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v58, v58, 0x10uLL), 0x10uLL), vsraq_n_u32(v59, v59, 0x10uLL), 0x10uLL);
    v22 += v26;
    v18 -= 2;
    if (v18 < 2)
      break;
    v30 = *(unsigned __int16 *)v22;
    v49 += v27;
    if ((unsigned __int16)(v30 - 1) >= 0xFFFEu)
    {
      v19 = (int8x8_t *)((char *)v19 + v49);
      v21 = (uint16x4_t *)((char *)v21 + v49);
      goto LABEL_34;
    }
  }
  v19 = (int8x8_t *)((char *)v19 + v27 + v49);
  v21 = (uint16x4_t *)((char *)v21 + v27 + v49);
LABEL_37:
  v60 = v18 + a17;
  if (v60)
  {
    v61.i32[0] = 0;
    v61.i16[2] = 0;
    if (a7)
      v62 = 0;
    else
      v62 = -1;
    v61.i16[3] = v62;
    v63 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v64.i64[0] = 0x800000008000;
    v64.i64[1] = 0x800000008000;
    do
    {
      if (*v22)
      {
        a11.i32[0] = *v22;
        v65 = vdup_lane_s8(*(int8x8_t *)a11.i8, 0);
        v66 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(*v19, v61), (uint16x4_t)v65), v63), v64);
        a11 = vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vmull_u16(*v21, (uint16x4_t)vmvn_s8(v65)), vmull_lane_u16(vqshrn_n_u32(vsraq_n_u32(v66, v66, 0x10uLL), 0x10uLL), *v21, 3)), v63), v64);
        *(uint16x4_t *)a11.i8 = vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a11, (uint32x4_t)a11, 0x10uLL), 0x10uLL);
        *v21 = *(uint16x4_t *)a11.i8;
      }
      v67 = &v19[a6];
      v22 += a6;
      if ((unint64_t)v67 >= v20)
        v68 = -(uint64_t)a5;
      else
        v68 = 0;
      v19 = &v67[v68];
      v21 += a6;
      --v60;
    }
    while (v60);
  }
  *result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)4,_rgba16_t>(int8x8_t **result, uint16x4_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, double a8, double a9, double a10, int32x4_t a11, double a12, double a13, double a14, int8x16_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  unint64_t v18;
  int8x8_t *v19;
  unint64_t v20;
  uint16x4_t *v21;
  char *v22;
  unsigned int v23;
  int8x16_t v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint32x4_t v28;
  int32x4_t v29;
  unsigned __int32 v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint32x4_t v40;
  uint32x4_t v41;
  int8x16_t *v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int64_t v46;
  int64_t v47;
  uint64_t v48;
  int8x16_t v49;
  int8x16_t v50;
  uint16x8_t v51;
  uint32x4_t v52;
  uint32x4_t v53;
  uint16x8_t v54;
  uint32x4_t v55;
  uint32x4_t v56;
  uint32x4_t v57;
  uint64_t v58;
  int8x8_t v59;
  __int16 v60;
  uint32x4_t v61;
  int32x4_t v62;
  int8x8_t v63;
  uint32x4_t v64;
  int8x8_t *v65;
  uint64_t v66;

  v18 = a18;
  v19 = *result;
  v20 = *a3;
  v21 = *a2;
  v22 = *a4;
  if (a18 < 2)
    goto LABEL_37;
  if (a7)
    v23 = 0;
  else
    v23 = -1;
  v24.i64[0] = 0xFFFF000000000000;
  v24.i64[1] = 0xFFFF000000000000;
  v25 = vandq_s8((int8x16_t)vdupq_n_s16(v23), v24);
  v26 = 2 * a6;
  v27 = 16 * a6;
  v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v29.i64[0] = 0x800000008000;
  v29.i64[1] = 0x800000008000;
  a11.i64[0] = -1;
  a11.i64[1] = -1;
  while (1)
  {
    v30 = *(unsigned __int16 *)v22;
    if (!*(_WORD *)v22)
    {
      v42 = (int8x16_t *)&v22[v18];
      v43 = (int8x16_t *)v22;
      do
        v44 = v43++;
      while (v43 <= v42 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v44)) & 0x80) != 0);
      do
      {
        v45 = v44;
        v44 = (int8x16_t *)((char *)v44 + 4);
      }
      while (v44 <= v42 && !v45->i32[0]);
      if (v45 < v42)
      {
        while (!v45->i8[0])
        {
          v45 = (int8x16_t *)((char *)v45 + 1);
          if (v45 >= v42)
          {
            v45 = (int8x16_t *)&v22[v18];
            break;
          }
        }
      }
      v46 = (char *)v45 - v22;
      v47 = ((char *)v45 - v22) * a6;
      v19 += v47;
      v21 += v47;
      v22 += v47;
      v18 -= v46;
      goto LABEL_34;
    }
    if (v30 != 0xFFFF)
      break;
    v31 = (int8x16_t *)&v22[v18];
    v32 = (int8x16_t *)v22;
    do
      v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqq_s8(*v33, (int8x16_t)a11)) & 0x80) != 0);
    do
    {
      v34 = v33;
      v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && v34->i32[0] == -1);
    if (v34 < v31)
    {
      while (v34->u8[0] == 255)
      {
        v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          v34 = (int8x16_t *)&v22[v18];
          break;
        }
      }
    }
    v35 = 0;
    v36 = (char *)v34 - v22;
    v37 = (char *)v34 - v22;
    do
    {
      v38 = *(uint16x8_t *)&v21->i8[v35];
      v39 = (uint16x8_t)vorrq_s8(*(int8x16_t *)&v19->i8[v35], v25);
      v40 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v39.i8, *(uint16x4_t *)v38.i8, 3), v28), v29);
      v41 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v39, v38, 7), v28), v29);
      a15 = (int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v40, v40, 0x10uLL), 0x10uLL), vsraq_n_u32(v41, v41, 0x10uLL), 0x10uLL);
      *(uint16x8_t *)&v21->i8[v35] = vqsubq_u16(v39, (uint16x8_t)a15);
      v22 += v26;
      v37 -= 2;
      v35 += v27;
    }
    while (v37 > 1);
    v21 = (uint16x4_t *)((char *)v21 + v35);
    v19 = (int8x8_t *)((char *)v19 + v35);
    v18 = v18 - v36 + v37;
LABEL_34:
    if (v18 <= 1)
      goto LABEL_37;
  }
  v48 = 0;
  while (1)
  {
    v49 = *(int8x16_t *)&v21->i8[v48];
    a15.i32[0] = v30;
    v50 = vqtbl1q_s8(a15, (int8x16_t)xmmword_1850049E0);
    v51 = (uint16x8_t)vorrq_s8(*(int8x16_t *)&v19->i8[v48], v25);
    v52 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v51.i8, *(uint16x4_t *)v50.i8), v28), v29);
    v53 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v51, (uint16x8_t)v50), v28), v29);
    a15 = vmvnq_s8(v50);
    v54 = (uint16x8_t)vmvnq_s8(v49);
    v55 = vqaddq_u32(vmull_high_u16((uint16x8_t)v49, (uint16x8_t)a15), vmull_laneq_u16(vqshrn_n_u32(vsraq_n_u32(v53, v53, 0x10uLL), 0x10uLL), v54, 7));
    v56 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vmull_u16(*(uint16x4_t *)v49.i8, *(uint16x4_t *)a15.i8), vmull_lane_u16(vqshrn_n_u32(vsraq_n_u32(v52, v52, 0x10uLL), 0x10uLL), *(uint16x4_t *)v54.i8, 3)), v28), v29);
    v57 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v55, v28), v29);
    *(uint16x8_t *)&v21->i8[v48] = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v56, v56, 0x10uLL), 0x10uLL), vsraq_n_u32(v57, v57, 0x10uLL), 0x10uLL);
    v22 += v26;
    v18 -= 2;
    if (v18 < 2)
      break;
    v30 = *(unsigned __int16 *)v22;
    v48 += v27;
    if ((unsigned __int16)(v30 - 1) >= 0xFFFEu)
    {
      v19 = (int8x8_t *)((char *)v19 + v48);
      v21 = (uint16x4_t *)((char *)v21 + v48);
      goto LABEL_34;
    }
  }
  v19 = (int8x8_t *)((char *)v19 + v27 + v48);
  v21 = (uint16x4_t *)((char *)v21 + v27 + v48);
LABEL_37:
  v58 = v18 + a17;
  if (v58)
  {
    v59.i32[0] = 0;
    v59.i16[2] = 0;
    if (a7)
      v60 = 0;
    else
      v60 = -1;
    v59.i16[3] = v60;
    v61 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v62.i64[0] = 0x800000008000;
    v62.i64[1] = 0x800000008000;
    do
    {
      if (*v22)
      {
        a11.i32[0] = *v22;
        v63 = vdup_lane_s8(*(int8x8_t *)a11.i8, 0);
        v64 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(*v19, v59), (uint16x4_t)v63), v61), v62);
        a11 = vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vmull_u16(*v21, (uint16x4_t)vmvn_s8(v63)), vmull_lane_u16(vqshrn_n_u32(vsraq_n_u32(v64, v64, 0x10uLL), 0x10uLL), (uint16x4_t)vmvn_s8((int8x8_t)*v21), 3)), v61), v62);
        *(uint16x4_t *)a11.i8 = vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a11, (uint32x4_t)a11, 0x10uLL), 0x10uLL);
        *v21 = *(uint16x4_t *)a11.i8;
      }
      v65 = &v19[a6];
      v22 += a6;
      if ((unint64_t)v65 >= v20)
        v66 = -(uint64_t)a5;
      else
        v66 = 0;
      v19 = &v65[v66];
      v21 += a6;
      --v58;
    }
    while (v58);
  }
  *result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

uint16x4_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)5,_rgba16_t>(uint16x4_t **result, uint16x4_t **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, double a8, int32x4_t a9, double a10, double a11, double a12, uint16x8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  unint64_t v17;
  uint16x4_t *v18;
  unint64_t v19;
  uint16x4_t *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint32x4_t v24;
  int32x4_t v25;
  unsigned __int32 v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint32x4_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  uint32x4_t v39;
  uint32x4_t v40;
  uint32x4_t v41;
  int8x16_t *v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int64_t v46;
  int64_t v47;
  uint64_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint32x4_t v52;
  uint32x4_t v53;
  uint32x4_t v54;
  uint32x4_t v55;
  uint32x4_t v56;
  uint32x4_t v57;
  uint16x8_t v58;
  uint32x4_t v59;
  uint32x4_t v60;
  uint32x4_t v61;
  uint64_t v62;
  uint32x4_t v63;
  int32x4_t v64;
  uint32x4_t v65;
  uint32x4_t v66;
  uint16x4_t *v67;
  uint64_t v68;

  v17 = a17;
  v18 = *result;
  v19 = *a3;
  v20 = *a2;
  v21 = *a4;
  if (a17 < 2)
    goto LABEL_34;
  v22 = 2 * a6;
  v23 = 16 * a6;
  v24 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v25.i64[0] = 0x800000008000;
  v25.i64[1] = 0x800000008000;
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    v26 = *(unsigned __int16 *)v21;
    if (!*(_WORD *)v21)
    {
      v42 = (int8x16_t *)&v21[v17];
      v43 = (int8x16_t *)v21;
      do
        v44 = v43++;
      while (v43 <= v42 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v44)) & 0x80) != 0);
      do
      {
        v45 = v44;
        v44 = (int8x16_t *)((char *)v44 + 4);
      }
      while (v44 <= v42 && !v45->i32[0]);
      if (v45 < v42)
      {
        while (!v45->i8[0])
        {
          v45 = (int8x16_t *)((char *)v45 + 1);
          if (v45 >= v42)
          {
            v45 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      v46 = (char *)v45 - v21;
      v47 = ((char *)v45 - v21) * a6;
      v18 += v47;
      v20 += v47;
      v21 += v47;
      v17 -= v46;
      goto LABEL_31;
    }
    if (v26 != 0xFFFF)
      break;
    v27 = (int8x16_t *)&v21[v17];
    v28 = (int8x16_t *)v21;
    do
      v29 = v28++;
    while (v28 <= v27 && (vminvq_u8((uint8x16_t)vceqq_s8(*v29, (int8x16_t)a9)) & 0x80) != 0);
    do
    {
      v30 = v29;
      v29 = (int8x16_t *)((char *)v29 + 4);
    }
    while (v29 <= v27 && v30->i32[0] == -1);
    if (v30 < v27)
    {
      while (v30->u8[0] == 255)
      {
        v30 = (int8x16_t *)((char *)v30 + 1);
        if (v30 >= v27)
        {
          v30 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    v31 = 0;
    v32 = (char *)v30 - v21;
    v33 = (char *)v30 - v21;
    do
    {
      v34 = *(uint16x8_t *)&v18->i8[v31];
      v35 = *(uint16x8_t *)&v20->i8[v31];
      v36 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v35.i8, *(uint16x4_t *)v34.i8, 3), v24), v25);
      v37 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v35, v34, 7), v24), v25);
      a13 = vqsubq_u16(v35, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v36, v36, 0x10uLL), 0x10uLL), vsraq_n_u32(v37, v37, 0x10uLL), 0x10uLL));
      v38 = vmull_lane_u16(*(uint16x4_t *)v34.i8, *(uint16x4_t *)v35.i8, 3);
      v39 = vmull_high_laneq_u16(v34, v35, 7);
      v40 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v38, v24), v25);
      v41 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v39, v24), v25);
      *(uint16x8_t *)&v20->i8[v31] = vqaddq_u16(a13, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v40, v40, 0x10uLL), 0x10uLL), vsraq_n_u32(v41, v41, 0x10uLL), 0x10uLL));
      v21 += v22;
      v33 -= 2;
      v31 += v23;
    }
    while (v33 > 1);
    v20 = (uint16x4_t *)((char *)v20 + v31);
    v18 = (uint16x4_t *)((char *)v18 + v31);
    v17 = v17 - v32 + v33;
LABEL_31:
    if (v17 <= 1)
      goto LABEL_34;
  }
  v48 = 0;
  while (1)
  {
    v49 = *(uint16x8_t *)&v18->i8[v48];
    v50 = *(uint16x8_t *)&v20->i8[v48];
    a13.i32[0] = v26;
    v51 = (uint16x8_t)vqtbl1q_s8((int8x16_t)a13, (int8x16_t)xmmword_1850049E0);
    v52 = vmull_u16(*(uint16x4_t *)v49.i8, *(uint16x4_t *)v51.i8);
    v53 = vmull_high_u16(v49, v51);
    v54 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v52, v24), v25);
    *(uint16x4_t *)v54.i8 = vqshrn_n_u32(vsraq_n_u32(v54, v54, 0x10uLL), 0x10uLL);
    v55 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v53, v24), v25);
    *(uint16x4_t *)v55.i8 = vqshrn_n_u32(vsraq_n_u32(v55, v55, 0x10uLL), 0x10uLL);
    v56 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v50.i8, *(uint16x4_t *)v54.i8, 3), v24), v25);
    v57 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_lane_u16(v50, *(uint16x4_t *)v55.i8, 3), v24), v25);
    v58 = vqsubq_u16(v50, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v56, v56, 0x10uLL), 0x10uLL), vsraq_n_u32(v57, v57, 0x10uLL), 0x10uLL));
    a13 = (uint16x8_t)vmull_lane_u16(*(uint16x4_t *)v54.i8, *(uint16x4_t *)v50.i8, 3);
    v59 = vmull_laneq_u16(*(uint16x4_t *)v55.i8, v50, 7);
    v60 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)a13, v24), v25);
    v61 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v59, v24), v25);
    *(uint16x8_t *)&v20->i8[v48] = vqaddq_u16(v58, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v60, v60, 0x10uLL), 0x10uLL), vsraq_n_u32(v61, v61, 0x10uLL), 0x10uLL));
    v21 += v22;
    v17 -= 2;
    if (v17 < 2)
      break;
    v26 = *(unsigned __int16 *)v21;
    v48 += v23;
    if ((unsigned __int16)(v26 - 1) >= 0xFFFEu)
    {
      v18 = (uint16x4_t *)((char *)v18 + v48);
      v20 = (uint16x4_t *)((char *)v20 + v48);
      goto LABEL_31;
    }
  }
  v18 = (uint16x4_t *)((char *)v18 + v23 + v48);
  v20 = (uint16x4_t *)((char *)v20 + v23 + v48);
LABEL_34:
  v62 = v17 + a16;
  if (v62)
  {
    v63 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v64.i64[0] = 0x800000008000;
    v64.i64[1] = 0x800000008000;
    do
    {
      if (*v21)
      {
        a9.i32[0] = *v21;
        v65 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*v18, (uint16x4_t)vdup_lane_s8(*(int8x8_t *)a9.i8, 0)), v63), v64);
        *(uint16x4_t *)v65.i8 = vqshrn_n_u32(vsraq_n_u32(v65, v65, 0x10uLL), 0x10uLL);
        v66 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*v20, *(uint16x4_t *)v65.i8, 3), v63), v64);
        a9 = vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v65.i8, *v20, 3), v63), v64);
        *(uint16x4_t *)a9.i8 = vqadd_u16(vqsub_u16(*v20, vqshrn_n_u32(vsraq_n_u32(v66, v66, 0x10uLL), 0x10uLL)), vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a9, (uint32x4_t)a9, 0x10uLL), 0x10uLL));
        *v20 = *(uint16x4_t *)a9.i8;
      }
      v67 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v67 >= v19)
        v68 = -(uint64_t)a5;
      else
        v68 = 0;
      v18 = &v67[v68];
      v20 += a6;
      --v62;
    }
    while (v62);
  }
  *result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)6,_rgba16_t>(int8x8_t **result, int16x4_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, double a8, double a9, double a10, int32x4_t a11, uint64_t a12, uint64_t a13, unint64_t a14)
{
  int8x16_t v14;
  unint64_t v15;
  int8x8_t *v16;
  unint64_t v17;
  int16x4_t *v18;
  char *v19;
  unsigned int v20;
  int8x16_t v21;
  int8x16_t v22;
  uint64_t v23;
  uint64_t v24;
  uint32x4_t v25;
  int8x16_t v26;
  __int32 v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  int8x16_t v35;
  uint16x8_t v36;
  int16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint32x4_t v40;
  uint32x4_t v41;
  uint32x4_t v42;
  uint32x4_t v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int8x16_t *v46;
  int8x16_t *v47;
  int64_t v48;
  int64_t v49;
  uint64_t v50;
  int8x16_t v51;
  int16x8_t v52;
  uint16x8_t v53;
  uint32x4_t v54;
  uint32x4_t v55;
  int16x8_t v56;
  uint16x8_t v57;
  int8x16_t v58;
  uint32x4_t v59;
  uint32x4_t v60;
  uint64_t v61;
  int8x8_t v62;
  __int16 v63;
  uint32x4_t v64;
  int32x4_t v65;
  int16x4_t v66;
  uint32x4_t v67;
  int16x4_t v68;
  uint32x4_t v69;
  int8x8_t *v70;
  uint64_t v71;

  v15 = a14;
  v16 = *result;
  v17 = *a3;
  v18 = *a2;
  v19 = *a4;
  if (a14 < 2)
    goto LABEL_37;
  if (a7)
    v20 = 0;
  else
    v20 = -1;
  v21.i64[0] = 0xFFFF000000000000;
  v21.i64[1] = 0xFFFF000000000000;
  v22 = vandq_s8((int8x16_t)vdupq_n_s16(v20), v21);
  v23 = 2 * a6;
  v24 = 16 * a6;
  v25 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a11.i64[0] = 0x800000008000;
  a11.i64[1] = 0x800000008000;
  v26.i64[0] = -1;
  v26.i64[1] = -1;
  while (1)
  {
    v27 = *(unsigned __int16 *)v19;
    if (!*(_WORD *)v19)
    {
      v44 = (int8x16_t *)&v19[v15];
      v45 = (int8x16_t *)v19;
      do
        v46 = v45++;
      while (v45 <= v44 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v46)) & 0x80) != 0);
      do
      {
        v47 = v46;
        v46 = (int8x16_t *)((char *)v46 + 4);
      }
      while (v46 <= v44 && !v47->i32[0]);
      if (v47 < v44)
      {
        while (!v47->i8[0])
        {
          v47 = (int8x16_t *)((char *)v47 + 1);
          if (v47 >= v44)
          {
            v47 = (int8x16_t *)&v19[v15];
            break;
          }
        }
      }
      v48 = (char *)v47 - v19;
      v49 = ((char *)v47 - v19) * a6;
      v16 += v49;
      v18 += v49;
      v19 += v49;
      v15 -= v48;
      goto LABEL_34;
    }
    if (v27 != 0xFFFF)
      break;
    v28 = (int8x16_t *)&v19[v15];
    v29 = (int8x16_t *)v19;
    do
      v30 = v29++;
    while (v29 <= v28 && (vminvq_u8((uint8x16_t)vceqq_s8(*v30, v26)) & 0x80) != 0);
    do
    {
      v31 = v30;
      v30 = (int8x16_t *)((char *)v30 + 4);
    }
    while (v30 <= v28 && v31->i32[0] == -1);
    if (v31 < v28)
    {
      while (v31->u8[0] == 255)
      {
        v31 = (int8x16_t *)((char *)v31 + 1);
        if (v31 >= v28)
        {
          v31 = (int8x16_t *)&v19[v15];
          break;
        }
      }
    }
    v32 = 0;
    v33 = (char *)v31 - v19;
    v34 = (char *)v31 - v19;
    do
    {
      v35 = *(int8x16_t *)&v18->i8[v32];
      v36 = (uint16x8_t)vorrq_s8(*(int8x16_t *)&v16->i8[v32], v22);
      v37 = (int16x8_t)vqtbl1q_s8(v35, (int8x16_t)xmmword_1850049F0);
      v38 = (uint16x8_t)vbicq_s8(v35, (int8x16_t)vceqzq_s16(v37));
      v39 = (uint16x8_t)vmvnq_s8((int8x16_t)v37);
      v40 = vmull_u16(*(uint16x4_t *)v36.i8, *(uint16x4_t *)v39.i8);
      v41 = vmull_high_u16(v36, v39);
      v42 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v40, v25), a11);
      v43 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v41, v25), a11);
      v14 = (int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v42, v42, 0x10uLL), 0x10uLL), vsraq_n_u32(v43, v43, 0x10uLL), 0x10uLL);
      *(uint16x8_t *)&v18->i8[v32] = vqaddq_u16(v38, (uint16x8_t)v14);
      v19 += v23;
      v34 -= 2;
      v32 += v24;
    }
    while (v34 > 1);
    v18 = (int16x4_t *)((char *)v18 + v32);
    v16 = (int8x8_t *)((char *)v16 + v32);
    v15 = v15 - v33 + v34;
LABEL_34:
    if (v15 <= 1)
      goto LABEL_37;
  }
  v50 = 0;
  while (1)
  {
    v51 = *(int8x16_t *)&v18->i8[v50];
    v14.i32[0] = v27;
    v52 = (int16x8_t)vqtbl1q_s8(v14, (int8x16_t)xmmword_1850049E0);
    v53 = (uint16x8_t)vorrq_s8(*(int8x16_t *)&v16->i8[v50], v22);
    v54 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v53.i8, *(uint16x4_t *)v52.i8), v25), a11);
    v55 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v53, (uint16x8_t)v52), v25), a11);
    v56 = (int16x8_t)vqtbl1q_s8(v51, (int8x16_t)xmmword_1850049F0);
    v57 = (uint16x8_t)vbicq_s8(v51, (int8x16_t)vceqzq_s16(v56));
    v58 = vmvnq_s8((int8x16_t)v56);
    v59 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(vqshrn_n_u32(vsraq_n_u32(v54, v54, 0x10uLL), 0x10uLL), *(uint16x4_t *)v58.i8), v25), a11);
    v60 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(vqshrn_n_u32(vsraq_n_u32(v55, v55, 0x10uLL), 0x10uLL), (uint16x4_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)), v25), a11);
    v14 = (int8x16_t)vceqzq_s16(v52);
    *(int8x16_t *)&v18->i8[v50] = vbslq_s8(v14, v51, (int8x16_t)vqaddq_u16(v57, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v59, v59, 0x10uLL), 0x10uLL), vsraq_n_u32(v60, v60, 0x10uLL), 0x10uLL)));
    v19 += v23;
    v15 -= 2;
    if (v15 < 2)
      break;
    v27 = *(unsigned __int16 *)v19;
    v50 += v24;
    if ((unsigned __int16)(v27 - 1) >= 0xFFFEu)
    {
      v16 = (int8x8_t *)((char *)v16 + v50);
      v18 = (int16x4_t *)((char *)v18 + v50);
      goto LABEL_34;
    }
  }
  v16 = (int8x8_t *)((char *)v16 + v24 + v50);
  v18 = (int16x4_t *)((char *)v18 + v24 + v50);
LABEL_37:
  v61 = v15 + a13;
  if (v61)
  {
    v62.i32[0] = 0;
    v62.i16[2] = 0;
    if (a7)
      v63 = 0;
    else
      v63 = -1;
    v62.i16[3] = v63;
    v64 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v65.i64[0] = 0x800000008000;
    v65.i64[1] = 0x800000008000;
    do
    {
      if (*v19)
      {
        a11.i32[0] = *v19;
        v66 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a11.i8, 0);
        v67 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(*v16, v62), (uint16x4_t)v66), v64), v65);
        v68 = vdup_lane_s16(*v18, 3);
        v69 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(vqshrn_n_u32(vsraq_n_u32(v67, v67, 0x10uLL), 0x10uLL), (uint16x4_t)vmvn_s8((int8x8_t)v68)), v64), v65);
        *(int8x8_t *)a11.i8 = vbsl_s8((int8x8_t)vceqz_s16(v66), (int8x8_t)*v18, (int8x8_t)vqadd_u16((uint16x4_t)vbic_s8((int8x8_t)*v18, (int8x8_t)vceqz_s16(v68)), vqshrn_n_u32(vsraq_n_u32(v69, v69, 0x10uLL), 0x10uLL)));
        *v18 = *(int16x4_t *)a11.i8;
      }
      v70 = &v16[a6];
      v19 += a6;
      if ((unint64_t)v70 >= v17)
        v71 = -(uint64_t)a5;
      else
        v71 = 0;
      v16 = &v70[v71];
      v18 += a6;
      --v61;
    }
    while (v61);
  }
  *result = v16;
  *a3 = v17;
  *a2 = v18;
  *a4 = v19;
  return result;
}

uint16x4_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)7,_rgba16_t>(uint16x4_t **result, uint16x4_t **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, double a8, int32x4_t a9, double a10, double a11, double a12, uint16x8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  unint64_t v17;
  uint16x4_t *v18;
  unint64_t v19;
  uint16x4_t *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint32x4_t v24;
  int32x4_t v25;
  unsigned __int32 v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint32x4_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int8x16_t *v42;
  int64_t v43;
  int64_t v44;
  uint64_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  uint16x8_t v51;
  uint32x4_t v52;
  uint32x4_t v53;
  uint64_t v54;
  uint32x4_t v55;
  int32x4_t v56;
  uint16x4_t v57;
  uint32x4_t v58;
  uint16x4_t *v59;
  uint64_t v60;

  v17 = a17;
  v18 = *result;
  v19 = *a3;
  v20 = *a2;
  v21 = *a4;
  if (a17 < 2)
    goto LABEL_34;
  v22 = 2 * a6;
  v23 = 16 * a6;
  v24 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v25.i64[0] = 0x800000008000;
  v25.i64[1] = 0x800000008000;
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    v26 = *(unsigned __int16 *)v21;
    if (!*(_WORD *)v21)
    {
      v39 = (int8x16_t *)&v21[v17];
      v40 = (int8x16_t *)v21;
      do
        v41 = v40++;
      while (v40 <= v39 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v41)) & 0x80) != 0);
      do
      {
        v42 = v41;
        v41 = (int8x16_t *)((char *)v41 + 4);
      }
      while (v41 <= v39 && !v42->i32[0]);
      if (v42 < v39)
      {
        while (!v42->i8[0])
        {
          v42 = (int8x16_t *)((char *)v42 + 1);
          if (v42 >= v39)
          {
            v42 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      v43 = (char *)v42 - v21;
      v44 = ((char *)v42 - v21) * a6;
      v18 += v44;
      v20 += v44;
      v21 += v44;
      v17 -= v43;
      goto LABEL_31;
    }
    if (v26 != 0xFFFF)
      break;
    v27 = (int8x16_t *)&v21[v17];
    v28 = (int8x16_t *)v21;
    do
      v29 = v28++;
    while (v28 <= v27 && (vminvq_u8((uint8x16_t)vceqq_s8(*v29, (int8x16_t)a9)) & 0x80) != 0);
    do
    {
      v30 = v29;
      v29 = (int8x16_t *)((char *)v29 + 4);
    }
    while (v29 <= v27 && v30->i32[0] == -1);
    if (v30 < v27)
    {
      while (v30->u8[0] == 255)
      {
        v30 = (int8x16_t *)((char *)v30 + 1);
        if (v30 >= v27)
        {
          v30 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    v31 = 0;
    v32 = (char *)v30 - v21;
    v33 = (char *)v30 - v21;
    do
    {
      v34 = *(uint16x8_t *)&v18->i8[v31];
      v35 = *(uint16x8_t *)&v20->i8[v31];
      a13 = (uint16x8_t)vmull_lane_u16(*(uint16x4_t *)v35.i8, *(uint16x4_t *)v34.i8, 3);
      v36 = vmull_high_laneq_u16(v35, v34, 7);
      v37 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)a13, v24), v25);
      v38 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v36, v24), v25);
      *(uint16x8_t *)&v20->i8[v31] = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v37, v37, 0x10uLL), 0x10uLL), vsraq_n_u32(v38, v38, 0x10uLL), 0x10uLL);
      v21 += v22;
      v33 -= 2;
      v31 += v23;
    }
    while (v33 > 1);
    v20 = (uint16x4_t *)((char *)v20 + v31);
    v18 = (uint16x4_t *)((char *)v18 + v31);
    v17 = v17 - v32 + v33;
LABEL_31:
    if (v17 <= 1)
      goto LABEL_34;
  }
  v45 = 0;
  while (1)
  {
    v46 = *(uint16x8_t *)&v18->i8[v45];
    v47 = *(uint16x8_t *)&v20->i8[v45];
    a13.i32[0] = v26;
    v48 = (uint16x8_t)vqtbl1q_s8((int8x16_t)a13, (int8x16_t)xmmword_1850049E0);
    v49 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v48.i8, *(uint16x4_t *)v46.i8, 3), v24), v25);
    v50 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v48, v46, 7), v24), v25);
    v51 = vqsubq_u16(v48, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v49, v49, 0x10uLL), 0x10uLL), vsraq_n_u32(v50, v50, 0x10uLL), 0x10uLL));
    v52 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v47.i8, *(uint16x4_t *)v51.i8), v24), v25);
    v53 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v47, v51), v24), v25);
    a13 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v52, v52, 0x10uLL), 0x10uLL), vsraq_n_u32(v53, v53, 0x10uLL), 0x10uLL);
    *(uint16x8_t *)&v20->i8[v45] = vqsubq_u16(v47, a13);
    v21 += v22;
    v17 -= 2;
    if (v17 < 2)
      break;
    v26 = *(unsigned __int16 *)v21;
    v45 += v23;
    if ((unsigned __int16)(v26 - 1) >= 0xFFFEu)
    {
      v18 = (uint16x4_t *)((char *)v18 + v45);
      v20 = (uint16x4_t *)((char *)v20 + v45);
      goto LABEL_31;
    }
  }
  v18 = (uint16x4_t *)((char *)v18 + v23 + v45);
  v20 = (uint16x4_t *)((char *)v20 + v23 + v45);
LABEL_34:
  v54 = v17 + a16;
  if (v54)
  {
    v55 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v56.i64[0] = 0x800000008000;
    v56.i64[1] = 0x800000008000;
    do
    {
      if (*v21)
      {
        a9.i32[0] = *v21;
        v57 = (uint16x4_t)vdup_lane_s8(*(int8x8_t *)a9.i8, 0);
        v58 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(v57, *v18, 3), v55), v56);
        a9 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*v20, vqsub_u16(v57, vqshrn_n_u32(vsraq_n_u32(v58, v58, 0x10uLL), 0x10uLL))), v55), v56);
        *(uint16x4_t *)a9.i8 = vqsub_u16(*v20, vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a9, (uint32x4_t)a9, 0x10uLL), 0x10uLL));
        *v20 = *(uint16x4_t *)a9.i8;
      }
      v59 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v59 >= v19)
        v60 = -(uint64_t)a5;
      else
        v60 = 0;
      v18 = &v59[v60];
      v20 += a6;
      --v54;
    }
    while (v54);
  }
  *result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

uint16x4_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)8,_rgba16_t>(uint16x4_t **result, uint16x4_t **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, double a8, int32x4_t a9, double a10, double a11, double a12, uint16x8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  unint64_t v17;
  uint16x4_t *v18;
  unint64_t v19;
  uint16x4_t *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint32x4_t v24;
  int32x4_t v25;
  unsigned __int32 v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint32x4_t v36;
  uint32x4_t v37;
  int8x16_t *v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int64_t v42;
  int64_t v43;
  uint64_t v44;
  uint16x8_t v45;
  int8x16_t v46;
  uint16x8_t v47;
  uint32x4_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  uint32x4_t v51;
  uint32x4_t v52;
  uint32x4_t v53;
  uint64_t v54;
  uint32x4_t v55;
  int32x4_t v56;
  uint32x4_t v57;
  uint16x4_t *v58;
  uint64_t v59;

  v17 = a17;
  v18 = *result;
  v19 = *a3;
  v20 = *a2;
  v21 = *a4;
  if (a17 < 2)
    goto LABEL_34;
  v22 = 2 * a6;
  v23 = 16 * a6;
  v24 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v25.i64[0] = 0x800000008000;
  v25.i64[1] = 0x800000008000;
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    v26 = *(unsigned __int16 *)v21;
    if (!*(_WORD *)v21)
    {
      v38 = (int8x16_t *)&v21[v17];
      v39 = (int8x16_t *)v21;
      do
        v40 = v39++;
      while (v39 <= v38 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v40)) & 0x80) != 0);
      do
      {
        v41 = v40;
        v40 = (int8x16_t *)((char *)v40 + 4);
      }
      while (v40 <= v38 && !v41->i32[0]);
      if (v41 < v38)
      {
        while (!v41->i8[0])
        {
          v41 = (int8x16_t *)((char *)v41 + 1);
          if (v41 >= v38)
          {
            v41 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      v42 = (char *)v41 - v21;
      v43 = ((char *)v41 - v21) * a6;
      v18 += v43;
      v20 += v43;
      v21 += v43;
      v17 -= v42;
      goto LABEL_31;
    }
    if (v26 != 0xFFFF)
      break;
    v27 = (int8x16_t *)&v21[v17];
    v28 = (int8x16_t *)v21;
    do
      v29 = v28++;
    while (v28 <= v27 && (vminvq_u8((uint8x16_t)vceqq_s8(*v29, (int8x16_t)a9)) & 0x80) != 0);
    do
    {
      v30 = v29;
      v29 = (int8x16_t *)((char *)v29 + 4);
    }
    while (v29 <= v27 && v30->i32[0] == -1);
    if (v30 < v27)
    {
      while (v30->u8[0] == 255)
      {
        v30 = (int8x16_t *)((char *)v30 + 1);
        if (v30 >= v27)
        {
          v30 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    v31 = 0;
    v32 = (char *)v30 - v21;
    v33 = (char *)v30 - v21;
    do
    {
      v34 = *(uint16x8_t *)&v18->i8[v31];
      v35 = *(uint16x8_t *)&v20->i8[v31];
      v36 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v35.i8, *(uint16x4_t *)v34.i8, 3), v24), v25);
      v37 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v35, v34, 7), v24), v25);
      a13 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v36, v36, 0x10uLL), 0x10uLL), vsraq_n_u32(v37, v37, 0x10uLL), 0x10uLL);
      *(uint16x8_t *)&v20->i8[v31] = vqsubq_u16(v35, a13);
      v21 += v22;
      v33 -= 2;
      v31 += v23;
    }
    while (v33 > 1);
    v20 = (uint16x4_t *)((char *)v20 + v31);
    v18 = (uint16x4_t *)((char *)v18 + v31);
    v17 = v17 - v32 + v33;
LABEL_31:
    if (v17 <= 1)
      goto LABEL_34;
  }
  v44 = 0;
  while (1)
  {
    v45 = *(uint16x8_t *)&v18->i8[v44];
    v46 = *(int8x16_t *)&v20->i8[v44];
    a13.i32[0] = v26;
    v47 = (uint16x8_t)vqtbl1q_s8((int8x16_t)a13, (int8x16_t)xmmword_1850049E0);
    v48 = vmull_lane_u16(*(uint16x4_t *)v47.i8, *(uint16x4_t *)v45.i8, 3);
    v49 = vmull_high_laneq_u16(v47, v45, 7);
    v50 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v48, v24), v25);
    v51 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v49, v24), v25);
    v52 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v46.i8, vqshrn_n_u32(vsraq_n_u32(v50, v50, 0x10uLL), 0x10uLL)), v24), v25);
    v53 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL), vqshrn_n_u32(vsraq_n_u32(v51, v51, 0x10uLL), 0x10uLL)), v24), v25);
    a13 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v52, v52, 0x10uLL), 0x10uLL), vsraq_n_u32(v53, v53, 0x10uLL), 0x10uLL);
    *(uint16x8_t *)&v20->i8[v44] = vqsubq_u16((uint16x8_t)v46, a13);
    v21 += v22;
    v17 -= 2;
    if (v17 < 2)
      break;
    v26 = *(unsigned __int16 *)v21;
    v44 += v23;
    if ((unsigned __int16)(v26 - 1) >= 0xFFFEu)
    {
      v18 = (uint16x4_t *)((char *)v18 + v44);
      v20 = (uint16x4_t *)((char *)v20 + v44);
      goto LABEL_31;
    }
  }
  v18 = (uint16x4_t *)((char *)v18 + v23 + v44);
  v20 = (uint16x4_t *)((char *)v20 + v23 + v44);
LABEL_34:
  v54 = v17 + a16;
  if (v54)
  {
    v55 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v56.i64[0] = 0x800000008000;
    v56.i64[1] = 0x800000008000;
    do
    {
      if (*v21)
      {
        a9.i32[0] = *v21;
        v57 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16((uint16x4_t)vdup_lane_s8(*(int8x8_t *)a9.i8, 0), *v18, 3), v55), v56);
        a9 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*v20, vqshrn_n_u32(vsraq_n_u32(v57, v57, 0x10uLL), 0x10uLL)), v55), v56);
        *(uint16x4_t *)a9.i8 = vqsub_u16(*v20, vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a9, (uint32x4_t)a9, 0x10uLL), 0x10uLL));
        *v20 = *(uint16x4_t *)a9.i8;
      }
      v58 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v58 >= v19)
        v59 = -(uint64_t)a5;
      else
        v59 = 0;
      v18 = &v58[v59];
      v20 += a6;
      --v54;
    }
    while (v54);
  }
  *result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

uint16x4_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)9,_rgba16_t>(uint16x4_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, double a8, int32x4_t a9, double a10, double a11, double a12, uint32x4_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  unint64_t v17;
  uint16x4_t *v18;
  unint64_t v19;
  int8x8_t *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint32x4_t v24;
  int32x4_t v25;
  unsigned __int32 v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  uint16x8_t v34;
  int8x16_t v35;
  uint16x8_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  uint32x4_t v39;
  uint32x4_t v40;
  int8x16_t *v41;
  int8x16_t *v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int64_t v45;
  int64_t v46;
  uint64_t v47;
  uint16x8_t v48;
  int8x16_t v49;
  int8x16_t v50;
  uint32x4_t v51;
  uint32x4_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint32x4_t v55;
  uint32x4_t v56;
  uint32x4_t v57;
  uint32x4_t v58;
  uint64_t v59;
  uint32x4_t v60;
  int32x4_t v61;
  int8x8_t v62;
  uint32x4_t v63;
  uint16x4_t *v64;
  uint64_t v65;

  v17 = a17;
  v18 = *result;
  v19 = *a3;
  v20 = *a2;
  v21 = *a4;
  if (a17 < 2)
    goto LABEL_34;
  v22 = 2 * a6;
  v23 = 16 * a6;
  v24 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v25.i64[0] = 0x800000008000;
  v25.i64[1] = 0x800000008000;
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    v26 = *(unsigned __int16 *)v21;
    if (!*(_WORD *)v21)
    {
      v41 = (int8x16_t *)&v21[v17];
      v42 = (int8x16_t *)v21;
      do
        v43 = v42++;
      while (v42 <= v41 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v43)) & 0x80) != 0);
      do
      {
        v44 = v43;
        v43 = (int8x16_t *)((char *)v43 + 4);
      }
      while (v43 <= v41 && !v44->i32[0]);
      if (v44 < v41)
      {
        while (!v44->i8[0])
        {
          v44 = (int8x16_t *)((char *)v44 + 1);
          if (v44 >= v41)
          {
            v44 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      v45 = (char *)v44 - v21;
      v46 = ((char *)v44 - v21) * a6;
      v18 += v46;
      v20 += v46;
      v21 += v46;
      v17 -= v45;
      goto LABEL_31;
    }
    if (v26 != 0xFFFF)
      break;
    v27 = (int8x16_t *)&v21[v17];
    v28 = (int8x16_t *)v21;
    do
      v29 = v28++;
    while (v28 <= v27 && (vminvq_u8((uint8x16_t)vceqq_s8(*v29, (int8x16_t)a9)) & 0x80) != 0);
    do
    {
      v30 = v29;
      v29 = (int8x16_t *)((char *)v29 + 4);
    }
    while (v29 <= v27 && v30->i32[0] == -1);
    if (v30 < v27)
    {
      while (v30->u8[0] == 255)
      {
        v30 = (int8x16_t *)((char *)v30 + 1);
        if (v30 >= v27)
        {
          v30 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    v31 = 0;
    v32 = (char *)v30 - v21;
    v33 = (char *)v30 - v21;
    do
    {
      v34 = *(uint16x8_t *)&v18->i8[v31];
      v35 = *(int8x16_t *)&v20->i8[v31];
      v36 = (uint16x8_t)vmvnq_s8(v35);
      v37 = vqaddq_u32(vmull_lane_u16(*(uint16x4_t *)v34.i8, *(uint16x4_t *)v36.i8, 3), vmull_lane_u16(*(uint16x4_t *)v35.i8, *(uint16x4_t *)v34.i8, 3));
      a13 = vmull_high_laneq_u16(v34, v36, 7);
      v38 = vqaddq_u32(a13, vmull_high_laneq_u16((uint16x8_t)v35, v34, 7));
      v39 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v37, v24), v25);
      v40 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v38, v24), v25);
      *(uint16x8_t *)&v20->i8[v31] = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v39, v39, 0x10uLL), 0x10uLL), vsraq_n_u32(v40, v40, 0x10uLL), 0x10uLL);
      v21 += v22;
      v33 -= 2;
      v31 += v23;
    }
    while (v33 > 1);
    v20 = (int8x8_t *)((char *)v20 + v31);
    v18 = (uint16x4_t *)((char *)v18 + v31);
    v17 = v17 - v32 + v33;
LABEL_31:
    if (v17 <= 1)
      goto LABEL_34;
  }
  v47 = 0;
  while (1)
  {
    v48 = *(uint16x8_t *)&v18->i8[v47];
    v49 = *(int8x16_t *)&v20->i8[v47];
    a13.i32[0] = v26;
    v50 = vqtbl1q_s8((int8x16_t)a13, (int8x16_t)xmmword_1850049E0);
    v51 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v48.i8, *(uint16x4_t *)v50.i8), v24), v25);
    *(uint16x4_t *)v51.i8 = vqshrn_n_u32(vsraq_n_u32(v51, v51, 0x10uLL), 0x10uLL);
    v52 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v48, (uint16x8_t)v50), v24), v25);
    *(uint16x4_t *)v52.i8 = vqshrn_n_u32(vsraq_n_u32(v52, v52, 0x10uLL), 0x10uLL);
    v53 = (uint16x8_t)vmvnq_s8(v49);
    v54 = (uint16x8_t)vmvnq_s8(v50);
    v55 = vmull_u16(*(uint16x4_t *)v49.i8, *(uint16x4_t *)v54.i8);
    a13 = vqaddq_u32(vmull_laneq_u16(*(uint16x4_t *)v52.i8, v53, 7), vmull_high_u16((uint16x8_t)v49, v54));
    v56 = vmull_high_lane_u16((uint16x8_t)v49, *(uint16x4_t *)v52.i8, 3);
    v57 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vmull_lane_u16(*(uint16x4_t *)v51.i8, *(uint16x4_t *)v53.i8, 3), v55), vmull_lane_u16(*(uint16x4_t *)v49.i8, *(uint16x4_t *)v51.i8, 3)), v24), v25);
    v58 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(a13, v56), v24), v25);
    *(uint16x8_t *)&v20->i8[v47] = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v57, v57, 0x10uLL), 0x10uLL), vsraq_n_u32(v58, v58, 0x10uLL), 0x10uLL);
    v21 += v22;
    v17 -= 2;
    if (v17 < 2)
      break;
    v26 = *(unsigned __int16 *)v21;
    v47 += v23;
    if ((unsigned __int16)(v26 - 1) >= 0xFFFEu)
    {
      v18 = (uint16x4_t *)((char *)v18 + v47);
      v20 = (int8x8_t *)((char *)v20 + v47);
      goto LABEL_31;
    }
  }
  v18 = (uint16x4_t *)((char *)v18 + v23 + v47);
  v20 = (int8x8_t *)((char *)v20 + v23 + v47);
LABEL_34:
  v59 = v17 + a16;
  if (v59)
  {
    v60 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v61.i64[0] = 0x800000008000;
    v61.i64[1] = 0x800000008000;
    do
    {
      if (*v21)
      {
        a9.i32[0] = *v21;
        v62 = vdup_lane_s8(*(int8x8_t *)a9.i8, 0);
        v63 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*v18, (uint16x4_t)v62), v60), v61);
        *(uint16x4_t *)v63.i8 = vqshrn_n_u32(vsraq_n_u32(v63, v63, 0x10uLL), 0x10uLL);
        a9 = vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vmull_lane_u16(*(uint16x4_t *)v63.i8, (uint16x4_t)vmvn_s8(*v20), 3), vmull_u16((uint16x4_t)*v20, (uint16x4_t)vmvn_s8(v62))), vmull_lane_u16((uint16x4_t)*v20, *(uint16x4_t *)v63.i8, 3)), v60), v61);
        *(uint16x4_t *)a9.i8 = vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a9, (uint32x4_t)a9, 0x10uLL), 0x10uLL);
        *v20 = *(int8x8_t *)a9.i8;
      }
      v64 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v64 >= v19)
        v65 = -(uint64_t)a5;
      else
        v65 = 0;
      v18 = &v64[v65];
      v20 += a6;
      --v59;
    }
    while (v59);
  }
  *result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

uint16x4_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)10,_rgba16_t>(uint16x4_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, double a7, double a8, int32x4_t a9, double a10, double a11, double a12, int8x16_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  unint64_t v17;
  uint16x4_t *v18;
  unint64_t v19;
  int8x8_t *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint32x4_t v24;
  int32x4_t v25;
  unsigned __int32 v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint16x8_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  uint32x4_t v39;
  uint32x4_t v40;
  int8x16_t *v41;
  int8x16_t *v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int64_t v45;
  int64_t v46;
  uint64_t v47;
  uint16x8_t v48;
  int8x16_t v49;
  uint16x8_t v50;
  uint32x4_t v51;
  uint32x4_t v52;
  uint32x4_t v53;
  uint32x4_t v54;
  uint16x8_t v55;
  uint32x4_t v56;
  uint32x4_t v57;
  uint32x4_t v58;
  uint64_t v59;
  uint32x4_t v60;
  int32x4_t v61;
  uint32x4_t v62;
  uint16x4_t *v63;
  uint64_t v64;

  v17 = a17;
  v18 = *result;
  v19 = *a3;
  v20 = *a2;
  v21 = *a4;
  if (a17 < 2)
    goto LABEL_34;
  v22 = 2 * a6;
  v23 = 16 * a6;
  v24 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v25.i64[0] = 0x800000008000;
  v25.i64[1] = 0x800000008000;
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    v26 = *(unsigned __int16 *)v21;
    if (!*(_WORD *)v21)
    {
      v41 = (int8x16_t *)&v21[v17];
      v42 = (int8x16_t *)v21;
      do
        v43 = v42++;
      while (v42 <= v41 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v43)) & 0x80) != 0);
      do
      {
        v44 = v43;
        v43 = (int8x16_t *)((char *)v43 + 4);
      }
      while (v43 <= v41 && !v44->i32[0]);
      if (v44 < v41)
      {
        while (!v44->i8[0])
        {
          v44 = (int8x16_t *)((char *)v44 + 1);
          if (v44 >= v41)
          {
            v44 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      v45 = (char *)v44 - v21;
      v46 = ((char *)v44 - v21) * a6;
      v18 += v46;
      v20 += v46;
      v21 += v46;
      v17 -= v45;
      goto LABEL_31;
    }
    if (v26 != 0xFFFF)
      break;
    v27 = (int8x16_t *)&v21[v17];
    v28 = (int8x16_t *)v21;
    do
      v29 = v28++;
    while (v28 <= v27 && (vminvq_u8((uint8x16_t)vceqq_s8(*v29, (int8x16_t)a9)) & 0x80) != 0);
    do
    {
      v30 = v29;
      v29 = (int8x16_t *)((char *)v29 + 4);
    }
    while (v29 <= v27 && v30->i32[0] == -1);
    if (v30 < v27)
    {
      while (v30->u8[0] == 255)
      {
        v30 = (int8x16_t *)((char *)v30 + 1);
        if (v30 >= v27)
        {
          v30 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    v31 = 0;
    v32 = (char *)v30 - v21;
    v33 = (char *)v30 - v21;
    do
    {
      v34 = *(int8x16_t *)&v18->i8[v31];
      v35 = *(int8x16_t *)&v20->i8[v31];
      a13 = vmvnq_s8(v35);
      v36 = (uint16x8_t)vmvnq_s8(v34);
      v37 = vqaddq_u32(vmull_lane_u16(*(uint16x4_t *)v34.i8, *(uint16x4_t *)a13.i8, 3), vmull_lane_u16(*(uint16x4_t *)v35.i8, *(uint16x4_t *)v36.i8, 3));
      v38 = vqaddq_u32(vmull_high_laneq_u16((uint16x8_t)v34, (uint16x8_t)a13, 7), vmull_high_laneq_u16((uint16x8_t)v35, v36, 7));
      v39 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v37, v24), v25);
      v40 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v38, v24), v25);
      *(uint16x8_t *)&v20->i8[v31] = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v39, v39, 0x10uLL), 0x10uLL), vsraq_n_u32(v40, v40, 0x10uLL), 0x10uLL);
      v21 += v22;
      v33 -= 2;
      v31 += v23;
    }
    while (v33 > 1);
    v20 = (int8x8_t *)((char *)v20 + v31);
    v18 = (uint16x4_t *)((char *)v18 + v31);
    v17 = v17 - v32 + v33;
LABEL_31:
    if (v17 <= 1)
      goto LABEL_34;
  }
  v47 = 0;
  while (1)
  {
    v48 = *(uint16x8_t *)&v18->i8[v47];
    v49 = *(int8x16_t *)&v20->i8[v47];
    a13.i32[0] = v26;
    v50 = (uint16x8_t)vqtbl1q_s8(a13, (int8x16_t)xmmword_1850049E0);
    v51 = vmull_u16(*(uint16x4_t *)v48.i8, *(uint16x4_t *)v50.i8);
    v52 = vmull_high_u16(v48, v50);
    v53 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v51, v24), v25);
    *(uint16x4_t *)v53.i8 = vqshrn_n_u32(vsraq_n_u32(v53, v53, 0x10uLL), 0x10uLL);
    v54 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v52, v24), v25);
    *(uint16x4_t *)v54.i8 = vqshrn_n_u32(vsraq_n_u32(v54, v54, 0x10uLL), 0x10uLL);
    v55 = (uint16x8_t)vmvnq_s8(v49);
    a13 = (int8x16_t)vqaddq_u32(vmull_lane_u16(*(uint16x4_t *)v53.i8, *(uint16x4_t *)v55.i8, 3), vmull_u16(*(uint16x4_t *)v49.i8, (uint16x4_t)vmvn_s8((int8x8_t)vdup_lane_s16(*(int16x4_t *)v53.i8, 3))));
    v56 = vqaddq_u32(vmull_laneq_u16(*(uint16x4_t *)v54.i8, v55, 7), vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL), (uint16x4_t)vmvn_s8((int8x8_t)vdup_lane_s16(*(int16x4_t *)v54.i8, 3))));
    v57 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)a13, v24), v25);
    v58 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v56, v24), v25);
    *(uint16x8_t *)&v20->i8[v47] = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v57, v57, 0x10uLL), 0x10uLL), vsraq_n_u32(v58, v58, 0x10uLL), 0x10uLL);
    v21 += v22;
    v17 -= 2;
    if (v17 < 2)
      break;
    v26 = *(unsigned __int16 *)v21;
    v47 += v23;
    if ((unsigned __int16)(v26 - 1) >= 0xFFFEu)
    {
      v18 = (uint16x4_t *)((char *)v18 + v47);
      v20 = (int8x8_t *)((char *)v20 + v47);
      goto LABEL_31;
    }
  }
  v18 = (uint16x4_t *)((char *)v18 + v23 + v47);
  v20 = (int8x8_t *)((char *)v20 + v23 + v47);
LABEL_34:
  v59 = v17 + a16;
  if (v59)
  {
    v60 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v61.i64[0] = 0x800000008000;
    v61.i64[1] = 0x800000008000;
    do
    {
      if (*v21)
      {
        a9.i32[0] = *v21;
        v62 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*v18, (uint16x4_t)vdup_lane_s8(*(int8x8_t *)a9.i8, 0)), v60), v61);
        *(uint16x4_t *)v62.i8 = vqshrn_n_u32(vsraq_n_u32(v62, v62, 0x10uLL), 0x10uLL);
        a9 = vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vmull_lane_u16(*(uint16x4_t *)v62.i8, (uint16x4_t)vmvn_s8(*v20), 3), vmull_lane_u16((uint16x4_t)*v20, (uint16x4_t)vmvn_s8(*(int8x8_t *)v62.i8), 3)), v60), v61);
        *(uint16x4_t *)a9.i8 = vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a9, (uint32x4_t)a9, 0x10uLL), 0x10uLL);
        *v20 = *(int8x8_t *)a9.i8;
      }
      v63 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v63 >= v19)
        v64 = -(uint64_t)a5;
      else
        v64 = 0;
      v18 = &v63[v64];
      v20 += a6;
      --v59;
    }
    while (v59);
  }
  *result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)11,_rgba16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, int8x8_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  int8x8_t *v17;
  unint64_t v18;
  int8x8_t *v19;
  char *v20;
  unsigned int v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  uint32x4_t v29;
  int32x4_t v30;
  __int32 v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  int8x16_t v39;
  int8x16_t v40;
  uint16x8_t v41;
  int8x16_t *v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int64_t v46;
  int64_t v47;
  uint64_t v48;
  int8x16_t v49;
  int16x8_t v50;
  uint16x8_t v51;
  int8x16_t v52;
  int8x16_t v53;
  uint32x4_t v54;
  uint32x4_t v55;
  uint32x4_t v56;
  uint32x4_t v57;
  uint32x4_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint64_t v62;
  __int16 v63;
  int8x8_t v64;
  int8x8_t v65;
  __int16 v66;
  uint32x4_t v67;
  int32x4_t v68;
  int16x4_t v69;
  int8x8_t v70;
  int16x4_t v71;
  uint32x4_t v72;
  uint16x4_t v73;
  uint16x4_t v74;
  int8x8_t *v75;
  uint64_t v76;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a15 < 2)
    goto LABEL_40;
  if (a7)
    v21 = 0;
  else
    v21 = -1;
  v22.i64[0] = 0xFFFF000000000000;
  v22.i64[1] = 0xFFFF000000000000;
  v23 = vandq_s8((int8x16_t)vdupq_n_s16(v21), v22);
  if (a8)
    v24 = 0;
  else
    v24 = -1;
  v25 = vandq_s8((int8x16_t)vdupq_n_s16(v24), v22);
  v26 = 2 * a6;
  v27 = 16 * a6;
  v28.i64[0] = -1;
  v28.i64[1] = -1;
  a13.i32[1] = 0;
  v29 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v30.i64[0] = 0x800000008000;
  v30.i64[1] = 0x800000008000;
  while (1)
  {
    v31 = *(unsigned __int16 *)v20;
    if (!*(_WORD *)v20)
    {
      v42 = (int8x16_t *)&v20[v16];
      v43 = (int8x16_t *)v20;
      do
        v44 = v43++;
      while (v43 <= v42 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v44)) & 0x80) != 0);
      do
      {
        v45 = v44;
        v44 = (int8x16_t *)((char *)v44 + 4);
      }
      while (v44 <= v42 && !v45->i32[0]);
      if (v45 < v42)
      {
        while (!v45->i8[0])
        {
          v45 = (int8x16_t *)((char *)v45 + 1);
          if (v45 >= v42)
          {
            v45 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      v46 = (char *)v45 - v20;
      v47 = ((char *)v45 - v20) * a6;
      v17 += v47;
      v19 += v47;
      v20 += v47;
      v16 -= v46;
      goto LABEL_37;
    }
    if (v31 != 0xFFFF)
      break;
    v32 = (int8x16_t *)&v20[v16];
    v33 = (int8x16_t *)v20;
    do
      v34 = v33++;
    while (v33 <= v32 && (vminvq_u8((uint8x16_t)vceqq_s8(*v34, v28)) & 0x80) != 0);
    do
    {
      v35 = v34;
      v34 = (int8x16_t *)((char *)v34 + 4);
    }
    while (v34 <= v32 && v35->i32[0] == -1);
    if (v35 < v32)
    {
      while (v35->u8[0] == 255)
      {
        v35 = (int8x16_t *)((char *)v35 + 1);
        if (v35 >= v32)
        {
          v35 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    v36 = 0;
    v37 = (char *)v35 - v20;
    v38 = (char *)v35 - v20;
    do
    {
      v39 = vorrq_s8(*(int8x16_t *)&v17->i8[v36], v23);
      v40 = vorrq_s8(*(int8x16_t *)&v19->i8[v36], v25);
      v15 = vqtbl1q_s8(v39, (int8x16_t)xmmword_1850049F0);
      v41 = (uint16x8_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1850049F0);
      *(uint16x8_t *)&v19->i8[v36] = vqsubq_u16(vqaddq_u16(v41, (uint16x8_t)v15), vqaddq_u16(vqsubq_u16((uint16x8_t)v15, (uint16x8_t)v39), vqsubq_u16(v41, (uint16x8_t)v40)));
      v20 += v26;
      v38 -= 2;
      v36 += v27;
    }
    while (v38 > 1);
    v19 = (int8x8_t *)((char *)v19 + v36);
    v17 = (int8x8_t *)((char *)v17 + v36);
    v16 = v16 - v37 + v38;
LABEL_37:
    if (v16 <= 1)
      goto LABEL_40;
  }
  v48 = 0;
  while (1)
  {
    v49 = *(int8x16_t *)&v19->i8[v48];
    v15.i32[0] = v31;
    v50 = (int16x8_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_1850049E0);
    v51 = (uint16x8_t)vorrq_s8(*(int8x16_t *)&v17->i8[v48], v23);
    v52 = (int8x16_t)vceqzq_s16(v50);
    v53 = vorrq_s8(vbicq_s8(v25, v52), v49);
    v54 = vmull_u16(*(uint16x4_t *)v51.i8, *(uint16x4_t *)v50.i8);
    v55 = vmull_high_u16(v51, (uint16x8_t)v50);
    v56 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v54, v29), v30);
    *(uint16x4_t *)v56.i8 = vqshrn_n_u32(vsraq_n_u32(v56, v56, 0x10uLL), 0x10uLL);
    v57 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v55, v29), v30);
    v58 = vsraq_n_u32(v57, v57, 0x10uLL);
    *(int16x4_t *)v59.i8 = vdup_lane_s16(*(int16x4_t *)v56.i8, 3);
    v60 = vqshrn_high_n_u32(*(uint16x4_t *)v56.i8, v58, 0x10uLL);
    v59.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v58, 0x10uLL), 3);
    v61 = (uint16x8_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1850049F0);
    v15 = (int8x16_t)vqsubq_u16(v59, v60);
    *(int8x16_t *)&v19->i8[v48] = vbslq_s8(v52, v49, (int8x16_t)vqsubq_u16(vqaddq_u16(v61, v59), vqaddq_u16((uint16x8_t)v15, vqsubq_u16(v61, (uint16x8_t)v53))));
    v20 += v26;
    v16 -= 2;
    if (v16 < 2)
      break;
    v31 = *(unsigned __int16 *)v20;
    v48 += v27;
    if ((unsigned __int16)(v31 - 1) >= 0xFFFEu)
    {
      v17 = (int8x8_t *)((char *)v17 + v48);
      v19 = (int8x8_t *)((char *)v19 + v48);
      goto LABEL_37;
    }
  }
  v17 = (int8x8_t *)((char *)v17 + v27 + v48);
  v19 = (int8x8_t *)((char *)v19 + v27 + v48);
LABEL_40:
  v62 = v16 + a14;
  if (v62)
  {
    if (a7)
      v63 = 0;
    else
      v63 = -1;
    v64.i32[0] = 0;
    v64.i16[2] = 0;
    v64.i16[3] = v63;
    v65.i32[0] = 0;
    v65.i16[2] = 0;
    if (a8)
      v66 = 0;
    else
      v66 = -1;
    v65.i16[3] = v66;
    v67 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v68.i64[0] = 0x800000008000;
    v68.i64[1] = 0x800000008000;
    do
    {
      if (*v20)
      {
        a13.i32[0] = *v20;
        v69 = (int16x4_t)vdup_lane_s8(a13, 0);
        v70 = (int8x8_t)vceqz_s16(v69);
        v71 = (int16x4_t)vorr_s8(*v19, vbic_s8(v65, v70));
        v72 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(*v17, v64), (uint16x4_t)v69), v67), v68);
        *(uint16x4_t *)v72.i8 = vqshrn_n_u32(vsraq_n_u32(v72, v72, 0x10uLL), 0x10uLL);
        v73 = (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v72.i8, 3);
        v74 = (uint16x4_t)vdup_lane_s16(v71, 3);
        a13 = vbsl_s8(v70, *v19, (int8x8_t)vqsub_u16(vqadd_u16(v74, v73), vqadd_u16(vqsub_u16(v73, *(uint16x4_t *)v72.i8), vqsub_u16(v74, (uint16x4_t)v71))));
        *v19 = a13;
      }
      v75 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v75 >= v18)
        v76 = -(uint64_t)a5;
      else
        v76 = 0;
      v17 = &v75[v76];
      v19 += a6;
      --v62;
    }
    while (v62);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)12,_rgba16_t>(int8x8_t **result, uint16x4_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, double a8, double a9, double a10, uint32x4_t a11, double a12, double a13, double a14, uint16x8_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  unint64_t v18;
  int8x8_t *v19;
  unint64_t v20;
  uint16x4_t *v21;
  char *v22;
  unsigned int v23;
  int8x16_t v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  int32x4_t v29;
  unsigned __int32 v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  int8x16_t *v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int64_t v42;
  int64_t v43;
  uint64_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint32x4_t v47;
  uint32x4_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  uint64_t v51;
  int8x8_t v52;
  __int16 v53;
  uint32x4_t v54;
  int32x4_t v55;
  int8x8_t *v56;
  uint64_t v57;

  v18 = a18;
  v19 = *result;
  v20 = *a3;
  v21 = *a2;
  v22 = *a4;
  if (a18 < 2)
    goto LABEL_37;
  if (a7)
    v23 = 0;
  else
    v23 = -1;
  v24.i64[0] = 0xFFFF000000000000;
  v24.i64[1] = 0xFFFF000000000000;
  v25 = vandq_s8((int8x16_t)vdupq_n_s16(v23), v24);
  v26 = 2 * a6;
  v27 = 16 * a6;
  v28.i64[0] = -1;
  v28.i64[1] = -1;
  a11 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v29.i64[0] = 0x800000008000;
  v29.i64[1] = 0x800000008000;
  while (1)
  {
    v30 = *(unsigned __int16 *)v22;
    if (!*(_WORD *)v22)
    {
      v38 = (int8x16_t *)&v22[v18];
      v39 = (int8x16_t *)v22;
      do
        v40 = v39++;
      while (v39 <= v38 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v40)) & 0x80) != 0);
      do
      {
        v41 = v40;
        v40 = (int8x16_t *)((char *)v40 + 4);
      }
      while (v40 <= v38 && !v41->i32[0]);
      if (v41 < v38)
      {
        while (!v41->i8[0])
        {
          v41 = (int8x16_t *)((char *)v41 + 1);
          if (v41 >= v38)
          {
            v41 = (int8x16_t *)&v22[v18];
            break;
          }
        }
      }
      v42 = (char *)v41 - v22;
      v43 = ((char *)v41 - v22) * a6;
      v19 += v43;
      v21 += v43;
      v22 += v43;
      v18 -= v42;
      goto LABEL_34;
    }
    if (v30 != 0xFFFF)
      break;
    v31 = (int8x16_t *)&v22[v18];
    v32 = (int8x16_t *)v22;
    do
      v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqq_s8(*v33, v28)) & 0x80) != 0);
    do
    {
      v34 = v33;
      v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && v34->i32[0] == -1);
    if (v34 < v31)
    {
      while (v34->u8[0] == 255)
      {
        v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          v34 = (int8x16_t *)&v22[v18];
          break;
        }
      }
    }
    v35 = 0;
    v36 = (char *)v34 - v22;
    v37 = (char *)v34 - v22;
    do
    {
      *(uint16x8_t *)&v21->i8[v35] = vqaddq_u16(*(uint16x8_t *)&v21->i8[v35], (uint16x8_t)vorrq_s8(*(int8x16_t *)&v19->i8[v35], v25));
      v22 += v26;
      v37 -= 2;
      v35 += v27;
    }
    while (v37 > 1);
    v21 = (uint16x4_t *)((char *)v21 + v35);
    v19 = (int8x8_t *)((char *)v19 + v35);
    v18 = v18 - v36 + v37;
LABEL_34:
    if (v18 <= 1)
      goto LABEL_37;
  }
  v44 = 0;
  while (1)
  {
    a15.i32[0] = v30;
    v45 = (uint16x8_t)vqtbl1q_s8((int8x16_t)a15, (int8x16_t)xmmword_1850049E0);
    v46 = (uint16x8_t)vorrq_s8(*(int8x16_t *)&v19->i8[v44], v25);
    v47 = vmull_u16(*(uint16x4_t *)v46.i8, *(uint16x4_t *)v45.i8);
    v48 = vmull_high_u16(v46, v45);
    v49 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v47, a11), v29);
    v50 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v48, a11), v29);
    a15 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v49, v49, 0x10uLL), 0x10uLL), vsraq_n_u32(v50, v50, 0x10uLL), 0x10uLL);
    *(uint16x8_t *)&v21->i8[v44] = vqaddq_u16(*(uint16x8_t *)&v21->i8[v44], a15);
    v22 += v26;
    v18 -= 2;
    if (v18 < 2)
      break;
    v30 = *(unsigned __int16 *)v22;
    v44 += v27;
    if ((unsigned __int16)(v30 - 1) >= 0xFFFEu)
    {
      v19 = (int8x8_t *)((char *)v19 + v44);
      v21 = (uint16x4_t *)((char *)v21 + v44);
      goto LABEL_34;
    }
  }
  v19 = (int8x8_t *)((char *)v19 + v27 + v44);
  v21 = (uint16x4_t *)((char *)v21 + v27 + v44);
LABEL_37:
  v51 = v18 + a17;
  if (v51)
  {
    v52.i32[0] = 0;
    v52.i16[2] = 0;
    if (a7)
      v53 = 0;
    else
      v53 = -1;
    v52.i16[3] = v53;
    v54 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v55.i64[0] = 0x800000008000;
    v55.i64[1] = 0x800000008000;
    do
    {
      if (*v22)
      {
        a11.i32[0] = *v22;
        a11 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(*v19, v52), (uint16x4_t)vdup_lane_s8(*(int8x8_t *)a11.i8, 0)), v54), v55);
        *(uint16x4_t *)a11.i8 = vqadd_u16(*v21, vqshrn_n_u32(vsraq_n_u32(a11, a11, 0x10uLL), 0x10uLL));
        *v21 = *(uint16x4_t *)a11.i8;
      }
      v56 = &v19[a6];
      v22 += a6;
      if ((unint64_t)v56 >= v20)
        v57 = -(uint64_t)a5;
      else
        v57 = 0;
      v19 = &v56[v57];
      v21 += a6;
      --v51;
    }
    while (v51);
  }
  *result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)13,_rgba16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, int32x4_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  int8x8_t *v17;
  unint64_t v18;
  int8x8_t *v19;
  char *v20;
  unsigned int v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint32x4_t v28;
  int8x16_t v29;
  __int32 v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int8x16_t v42;
  uint16x8_t v43;
  uint32x4_t v44;
  uint32x4_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  uint32x4_t v51;
  uint32x4_t v52;
  int8x16_t *v53;
  int8x16_t *v54;
  int8x16_t *v55;
  int8x16_t *v56;
  int64_t v57;
  int64_t v58;
  uint64_t v59;
  int16x8_t v60;
  uint16x8_t v61;
  int8x16_t v62;
  uint32x4_t v63;
  uint32x4_t v64;
  uint32x4_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int8x16_t v68;
  int8x16_t v69;
  uint32x4_t v70;
  int8x16_t v71;
  uint32x4_t v72;
  int8x16_t v73;
  uint16x4_t v74;
  uint32x4_t v75;
  uint32x4_t v76;
  uint32x4_t v77;
  uint32x4_t v78;
  uint32x4_t v79;
  int8x16_t v80;
  uint64_t v81;
  __int16 v82;
  int8x8_t v83;
  int8x8_t v84;
  __int16 v85;
  uint32x4_t v86;
  int32x4_t v87;
  int16x4_t v88;
  int8x8_t v89;
  int16x4_t v90;
  int16x4_t v91;
  int16x4_t v92;
  int8x8_t v93;
  uint16x4_t v94;
  uint32x4_t v95;
  uint32x4_t v96;
  int8x8_t *v97;
  uint64_t v98;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a15 < 2)
    goto LABEL_40;
  if (a7)
    v21 = 0;
  else
    v21 = -1;
  v22.i64[0] = 0xFFFF000000000000;
  v22.i64[1] = 0xFFFF000000000000;
  v23 = vandq_s8((int8x16_t)vdupq_n_s16(v21), v22);
  if (a8)
    v24 = 0;
  else
    v24 = -1;
  v25 = vandq_s8((int8x16_t)vdupq_n_s16(v24), v22);
  v26 = 2 * a6;
  v27 = 16 * a6;
  v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a13.i64[0] = 0x800000008000;
  a13.i64[1] = 0x800000008000;
  v29.i64[0] = -1;
  v29.i64[1] = -1;
  while (1)
  {
    v30 = *(unsigned __int16 *)v20;
    if (!*(_WORD *)v20)
    {
      v53 = (int8x16_t *)&v20[v16];
      v54 = (int8x16_t *)v20;
      do
        v55 = v54++;
      while (v54 <= v53 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v55)) & 0x80) != 0);
      do
      {
        v56 = v55;
        v55 = (int8x16_t *)((char *)v55 + 4);
      }
      while (v55 <= v53 && !v56->i32[0]);
      if (v56 < v53)
      {
        while (!v56->i8[0])
        {
          v56 = (int8x16_t *)((char *)v56 + 1);
          if (v56 >= v53)
          {
            v56 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      v57 = (char *)v56 - v20;
      v58 = ((char *)v56 - v20) * a6;
      v17 += v58;
      v19 += v58;
      v20 += v58;
      v16 -= v57;
      goto LABEL_37;
    }
    if (v30 != 0xFFFF)
      break;
    v31 = (int8x16_t *)&v20[v16];
    v32 = (int8x16_t *)v20;
    do
      v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqq_s8(*v33, v29)) & 0x80) != 0);
    do
    {
      v34 = v33;
      v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && v34->i32[0] == -1);
    if (v34 < v31)
    {
      while (v34->u8[0] == 255)
      {
        v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          v34 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    v35 = 0;
    v36 = (char *)v34 - v20;
    v37 = (char *)v34 - v20;
    do
    {
      v38 = vorrq_s8(*(int8x16_t *)&v17->i8[v35], v23);
      v39 = vorrq_s8(*(int8x16_t *)&v19->i8[v35], v25);
      v40 = (int16x8_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_1850049F0);
      v41 = (int16x8_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1850049F0);
      v42 = (int8x16_t)vceqzq_s16(v41);
      v43 = (uint16x8_t)vbicq_s8(v39, v42);
      v44 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v38.i8, *(uint16x4_t *)v43.i8), v28), a13);
      v45 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16((uint16x8_t)v38, v43), v28), a13);
      v46 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v44, v44, 0x10uLL), 0x10uLL), vsraq_n_u32(v45, v45, 0x10uLL), 0x10uLL);
      v47 = (uint16x8_t)vmvnq_s8((int8x16_t)v41);
      v48 = (uint16x8_t)vmvnq_s8((int8x16_t)v40);
      v49 = vqaddq_u32(vmull_u16(*(uint16x4_t *)v38.i8, *(uint16x4_t *)v47.i8), vmull_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v48.i8));
      v50 = vqaddq_u32(vmull_high_u16((uint16x8_t)v38, v47), vmull_high_u16(v43, v48));
      v51 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v49, v28), a13);
      v52 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v50, v28), a13);
      v15 = (int8x16_t)vceqzq_s16(v40);
      *(int8x16_t *)&v19->i8[v35] = vbslq_s8(v15, v39, vbslq_s8(v42, v38, (int8x16_t)vqaddq_u16(v46, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v51, v51, 0x10uLL), 0x10uLL), vsraq_n_u32(v52, v52, 0x10uLL), 0x10uLL))));
      v20 += v26;
      v37 -= 2;
      v35 += v27;
    }
    while (v37 > 1);
    v19 = (int8x8_t *)((char *)v19 + v35);
    v17 = (int8x8_t *)((char *)v17 + v35);
    v16 = v16 - v36 + v37;
LABEL_37:
    if (v16 <= 1)
      goto LABEL_40;
  }
  v59 = 0;
  while (1)
  {
    v15.i32[0] = v30;
    v60 = (int16x8_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_1850049E0);
    v61 = (uint16x8_t)vorrq_s8(*(int8x16_t *)&v17->i8[v59], v23);
    v62 = vorrq_s8(vbicq_s8(v25, (int8x16_t)vceqzq_s16(v60)), *(int8x16_t *)&v19->i8[v59]);
    v63 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v61.i8, *(uint16x4_t *)v60.i8), v28), a13);
    *(uint16x4_t *)v63.i8 = vqshrn_n_u32(vsraq_n_u32(v63, v63, 0x10uLL), 0x10uLL);
    v64 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v61, (uint16x8_t)v60), v28), a13);
    v65 = vsraq_n_u32(v64, v64, 0x10uLL);
    *(uint16x4_t *)v61.i8 = vqshrn_n_u32(v65, 0x10uLL);
    *(int16x4_t *)v66.i8 = vdup_lane_s16(*(int16x4_t *)v63.i8, 3);
    v67 = (int16x8_t)vqtbl1q_s8(v62, (int8x16_t)xmmword_1850049F0);
    v68 = (int8x16_t)vceqzq_s16(v67);
    v69 = vbicq_s8(v62, v68);
    v70 = vmull_u16(*(uint16x4_t *)v63.i8, *(uint16x4_t *)v69.i8);
    v71 = vmvnq_s8((int8x16_t)v67);
    v72 = vmull_u16(*(uint16x4_t *)v63.i8, *(uint16x4_t *)v71.i8);
    v73 = (int8x16_t)vqshrn_high_n_u32(*(uint16x4_t *)v63.i8, v65, 0x10uLL);
    v66.u64[1] = (unint64_t)vdup_lane_s16(*(int16x4_t *)v61.i8, 3);
    v74 = (uint16x4_t)vextq_s8(v69, v69, 8uLL).u64[0];
    v75 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v70, v28), a13);
    v76 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v61.i8, v74), v28), a13);
    v77 = vqaddq_u32(vmull_u16(*(uint16x4_t *)v61.i8, (uint16x4_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL)), vmull_u16(v74, (uint16x4_t)vmvn_s8((int8x8_t)v66.u64[1])));
    v78 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v72, vmull_u16(*(uint16x4_t *)v69.i8, (uint16x4_t)vmvn_s8(*(int8x8_t *)v66.i8))), v28), a13);
    v79 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v77, v28), a13);
    v80 = vbslq_s8(v68, v73, (int8x16_t)vqaddq_u16(vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v75, v75, 0x10uLL), 0x10uLL), vsraq_n_u32(v76, v76, 0x10uLL), 0x10uLL), vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v78, v78, 0x10uLL), 0x10uLL), vsraq_n_u32(v79, v79, 0x10uLL), 0x10uLL)));
    v15 = (int8x16_t)vceqzq_s16(v66);
    *(int8x16_t *)&v19->i8[v59] = vbslq_s8(v15, v62, v80);
    v20 += v26;
    v16 -= 2;
    if (v16 < 2)
      break;
    v30 = *(unsigned __int16 *)v20;
    v59 += v27;
    if ((unsigned __int16)(v30 - 1) >= 0xFFFEu)
    {
      v17 = (int8x8_t *)((char *)v17 + v59);
      v19 = (int8x8_t *)((char *)v19 + v59);
      goto LABEL_37;
    }
  }
  v17 = (int8x8_t *)((char *)v17 + v27 + v59);
  v19 = (int8x8_t *)((char *)v19 + v27 + v59);
LABEL_40:
  v81 = v16 + a14;
  if (v81)
  {
    if (a7)
      v82 = 0;
    else
      v82 = -1;
    v83.i32[0] = 0;
    v83.i16[2] = 0;
    v83.i16[3] = v82;
    v84.i32[0] = 0;
    v84.i16[2] = 0;
    if (a8)
      v85 = 0;
    else
      v85 = -1;
    v84.i16[3] = v85;
    v86 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v87.i64[0] = 0x800000008000;
    v87.i64[1] = 0x800000008000;
    do
    {
      if (*v20)
      {
        a13.i32[0] = *v20;
        v88 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a13.i8, 0);
        v89 = vbic_s8(v84, (int8x8_t)vceqz_s16(v88));
        a13 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(*v17, v83), (uint16x4_t)v88), v86), v87);
        *(uint16x4_t *)a13.i8 = vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a13, (uint32x4_t)a13, 0x10uLL), 0x10uLL);
        v90 = vdup_lane_s16(*(int16x4_t *)a13.i8, 3);
        v91 = (int16x4_t)vorr_s8(*v19, v89);
        v92 = vdup_lane_s16(v91, 3);
        v93 = (int8x8_t)vceqz_s16(v92);
        v94 = (uint16x4_t)vbic_s8((int8x8_t)v91, v93);
        v95 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)a13.i8, v94), v86), v87);
        v96 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vmull_u16(*(uint16x4_t *)a13.i8, (uint16x4_t)vmvn_s8((int8x8_t)v92)), vmull_u16(v94, (uint16x4_t)vmvn_s8((int8x8_t)v90))), v86), v87);
        *(int8x8_t *)a13.i8 = vbsl_s8((int8x8_t)vceqz_s16(v90), (int8x8_t)v91, vbsl_s8(v93, *(int8x8_t *)a13.i8, (int8x8_t)vqadd_u16(vqshrn_n_u32(vsraq_n_u32(v95, v95, 0x10uLL), 0x10uLL), vqshrn_n_u32(vsraq_n_u32(v96, v96, 0x10uLL), 0x10uLL))));
        *v19 = *(int8x8_t *)a13.i8;
      }
      v97 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v97 >= v18)
        v98 = -(uint64_t)a5;
      else
        v98 = 0;
      v17 = &v97[v98];
      v19 += a6;
      --v81;
    }
    while (v81);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)14,_rgba16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, int32x4_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  int8x8_t *v17;
  unint64_t v18;
  int8x8_t *v19;
  char *v20;
  unsigned int v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint32x4_t v28;
  int8x16_t v29;
  __int32 v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  int8x16_t v38;
  int8x16_t v39;
  uint16x8_t v40;
  uint32x4_t v41;
  uint32x4_t v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int8x16_t *v46;
  int64_t v47;
  int64_t v48;
  uint64_t v49;
  int16x8_t v50;
  uint16x8_t v51;
  int8x16_t v52;
  int16x8_t v53;
  uint32x4_t v54;
  uint32x4_t v55;
  uint32x4_t v56;
  uint32x4_t v57;
  int16x4_t v58;
  int8x16_t v59;
  uint32x4_t v60;
  uint16x8_t v61;
  uint32x4_t v62;
  uint32x4_t v63;
  uint32x4_t v64;
  int8x16_t v65;
  uint64_t v66;
  __int16 v67;
  int8x8_t v68;
  int8x8_t v69;
  __int16 v70;
  uint32x4_t v71;
  int32x4_t v72;
  int16x4_t v73;
  int16x4_t v74;
  uint16x4_t v75;
  uint32x4_t v76;
  int8x8_t *v77;
  uint64_t v78;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a15 < 2)
    goto LABEL_40;
  if (a7)
    v21 = 0;
  else
    v21 = -1;
  v22.i64[0] = 0xFFFF000000000000;
  v22.i64[1] = 0xFFFF000000000000;
  v23 = vandq_s8((int8x16_t)vdupq_n_s16(v21), v22);
  if (a8)
    v24 = 0;
  else
    v24 = -1;
  v25 = vandq_s8((int8x16_t)vdupq_n_s16(v24), v22);
  v26 = 2 * a6;
  v27 = 16 * a6;
  v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a13.i64[0] = 0x800000008000;
  a13.i64[1] = 0x800000008000;
  v29.i64[0] = -1;
  v29.i64[1] = -1;
  while (1)
  {
    v30 = *(unsigned __int16 *)v20;
    if (!*(_WORD *)v20)
    {
      v43 = (int8x16_t *)&v20[v16];
      v44 = (int8x16_t *)v20;
      do
        v45 = v44++;
      while (v44 <= v43 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v45)) & 0x80) != 0);
      do
      {
        v46 = v45;
        v45 = (int8x16_t *)((char *)v45 + 4);
      }
      while (v45 <= v43 && !v46->i32[0]);
      if (v46 < v43)
      {
        while (!v46->i8[0])
        {
          v46 = (int8x16_t *)((char *)v46 + 1);
          if (v46 >= v43)
          {
            v46 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      v47 = (char *)v46 - v20;
      v48 = ((char *)v46 - v20) * a6;
      v17 += v48;
      v19 += v48;
      v20 += v48;
      v16 -= v47;
      goto LABEL_37;
    }
    if (v30 != 0xFFFF)
      break;
    v31 = (int8x16_t *)&v20[v16];
    v32 = (int8x16_t *)v20;
    do
      v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqq_s8(*v33, v29)) & 0x80) != 0);
    do
    {
      v34 = v33;
      v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && v34->i32[0] == -1);
    if (v34 < v31)
    {
      while (v34->u8[0] == 255)
      {
        v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          v34 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    v35 = 0;
    v36 = (char *)v34 - v20;
    v37 = (char *)v34 - v20;
    do
    {
      v38 = vorrq_s8(*(int8x16_t *)&v17->i8[v35], v23);
      v39 = vorrq_s8(*(int8x16_t *)&v19->i8[v35], v25);
      v40 = (uint16x8_t)vbicq_s8(v39, (int8x16_t)vceqzq_s16((int16x8_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1850049F0)));
      v41 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v38.i8, *(uint16x4_t *)v40.i8), v28), a13);
      v42 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16((uint16x8_t)v38, v40), v28), a13);
      v15 = (int8x16_t)vceqzq_s16((int16x8_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_1850049F0));
      *(int8x16_t *)&v19->i8[v35] = vbslq_s8(v15, v39, (int8x16_t)vqaddq_u16(vqsubq_u16((uint16x8_t)v38, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v41, v41, 0x10uLL), 0x10uLL), vsraq_n_u32(v42, v42, 0x10uLL), 0x10uLL)), v40));
      v20 += v26;
      v37 -= 2;
      v35 += v27;
    }
    while (v37 > 1);
    v19 = (int8x8_t *)((char *)v19 + v35);
    v17 = (int8x8_t *)((char *)v17 + v35);
    v16 = v16 - v36 + v37;
LABEL_37:
    if (v16 <= 1)
      goto LABEL_40;
  }
  v49 = 0;
  while (1)
  {
    v15.i32[0] = v30;
    v50 = (int16x8_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_1850049E0);
    v51 = (uint16x8_t)vorrq_s8(*(int8x16_t *)&v17->i8[v49], v23);
    v52 = vorrq_s8(vbicq_s8(v25, (int8x16_t)vceqzq_s16(v50)), *(int8x16_t *)&v19->i8[v49]);
    v53 = (int16x8_t)vmull_u16(*(uint16x4_t *)v51.i8, *(uint16x4_t *)v50.i8);
    v54 = vmull_high_u16(v51, (uint16x8_t)v50);
    v55 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)v53, v28), a13);
    *(uint16x4_t *)v55.i8 = vqshrn_n_u32(vsraq_n_u32(v55, v55, 0x10uLL), 0x10uLL);
    v56 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v54, v28), a13);
    v57 = vsraq_n_u32(v56, v56, 0x10uLL);
    *(int16x4_t *)v53.i8 = vdup_lane_s16(*(int16x4_t *)v55.i8, 3);
    v58 = (int16x4_t)vqshrn_n_u32(v57, 0x10uLL);
    v59 = vbicq_s8(v52, (int8x16_t)vceqzq_s16((int16x8_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_1850049F0)));
    v60 = vmull_u16(*(uint16x4_t *)v55.i8, *(uint16x4_t *)v59.i8);
    v61 = vqshrn_high_n_u32(*(uint16x4_t *)v55.i8, v57, 0x10uLL);
    v53.u64[1] = (unint64_t)vdup_lane_s16(v58, 3);
    v62 = vmull_u16((uint16x4_t)v58, (uint16x4_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL));
    v63 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v60, v28), a13);
    v64 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v62, v28), a13);
    v65 = (int8x16_t)vqaddq_u16(vqsubq_u16(v61, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v63, v63, 0x10uLL), 0x10uLL), vsraq_n_u32(v64, v64, 0x10uLL), 0x10uLL)), (uint16x8_t)v59);
    v15 = (int8x16_t)vceqzq_s16(v53);
    *(int8x16_t *)&v19->i8[v49] = vbslq_s8(v15, v52, v65);
    v20 += v26;
    v16 -= 2;
    if (v16 < 2)
      break;
    v30 = *(unsigned __int16 *)v20;
    v49 += v27;
    if ((unsigned __int16)(v30 - 1) >= 0xFFFEu)
    {
      v17 = (int8x8_t *)((char *)v17 + v49);
      v19 = (int8x8_t *)((char *)v19 + v49);
      goto LABEL_37;
    }
  }
  v17 = (int8x8_t *)((char *)v17 + v27 + v49);
  v19 = (int8x8_t *)((char *)v19 + v27 + v49);
LABEL_40:
  v66 = v16 + a14;
  if (v66)
  {
    if (a7)
      v67 = 0;
    else
      v67 = -1;
    v68.i32[0] = 0;
    v68.i16[2] = 0;
    v68.i16[3] = v67;
    v69.i32[0] = 0;
    v69.i16[2] = 0;
    if (a8)
      v70 = 0;
    else
      v70 = -1;
    v69.i16[3] = v70;
    v71 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v72.i64[0] = 0x800000008000;
    v72.i64[1] = 0x800000008000;
    do
    {
      if (*v20)
      {
        a13.i32[0] = *v20;
        v73 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a13.i8, 0);
        v74 = (int16x4_t)vorr_s8(*v19, vbic_s8(v69, (int8x8_t)vceqz_s16(v73)));
        a13 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(*v17, v68), (uint16x4_t)v73), v71), v72);
        *(uint16x4_t *)a13.i8 = vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a13, (uint32x4_t)a13, 0x10uLL), 0x10uLL);
        v75 = (uint16x4_t)vbic_s8((int8x8_t)v74, (int8x8_t)vdup_lane_s16(vceqz_s16(v74), 3));
        v76 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)a13.i8, v75), v71), v72);
        *(int8x8_t *)a13.i8 = vbsl_s8((int8x8_t)vdup_lane_s16(vceqz_s16(*(int16x4_t *)a13.i8), 3), (int8x8_t)v74, (int8x8_t)vqadd_u16(vqsub_u16(*(uint16x4_t *)a13.i8, vqshrn_n_u32(vsraq_n_u32(v76, v76, 0x10uLL), 0x10uLL)), v75));
        *v19 = *(int8x8_t *)a13.i8;
      }
      v77 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v77 >= v18)
        v78 = -(uint64_t)a5;
      else
        v78 = 0;
      v17 = &v77[v78];
      v19 += a6;
      --v66;
    }
    while (v66);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)15,_rgba16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, double a13, int32x4_t a14, uint64_t a15, unint64_t a16)
{
  int8x16_t v16;
  unint64_t v17;
  int8x8_t *v18;
  unint64_t v19;
  int8x8_t *v20;
  char *v21;
  unsigned int v22;
  int8x16_t v23;
  int8x16_t v24;
  unsigned int v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t v28;
  uint32x4_t v29;
  int8x16_t v30;
  __int32 v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  int16x8_t v39;
  int8x16_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  int16x8_t v47;
  int8x16_t v48;
  int8x16_t v49;
  uint32x4_t v50;
  uint32x4_t v51;
  int8x16_t *v52;
  int8x16_t *v53;
  int8x16_t *v54;
  int8x16_t *v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  int16x8_t v59;
  uint16x8_t v60;
  int8x16_t v61;
  uint32x4_t v62;
  uint32x4_t v63;
  uint32x4_t v64;
  uint16x8_t v65;
  uint16x4_t v66;
  int8x16_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  uint16x8_t v71;
  int8x16_t v72;
  uint32x4_t v73;
  uint32x4_t v74;
  int16x8_t v75;
  int8x16_t v76;
  int8x16_t v77;
  uint32x4_t v78;
  uint32x4_t v79;
  uint64_t v80;
  __int16 v81;
  int8x8_t v82;
  __int16 v83;
  int8x8_t v84;
  uint32x4_t v85;
  int32x4_t v86;
  int16x4_t v87;
  int16x4_t v88;
  uint32x4_t v89;
  int16x4_t v90;
  int16x4_t v91;
  int16x4_t v92;
  int16x4_t v93;
  int8x16_t v94;
  uint32x4_t v95;
  int8x8_t *v96;
  uint64_t v97;

  v17 = a16;
  v18 = *result;
  v19 = *a3;
  v20 = *a2;
  v21 = *a4;
  if (a16 < 2)
    goto LABEL_40;
  if (a7)
    v22 = 0;
  else
    v22 = -1;
  v23.i64[0] = 0xFFFF000000000000;
  v23.i64[1] = 0xFFFF000000000000;
  v24 = vandq_s8((int8x16_t)vdupq_n_s16(v22), v23);
  if (a8)
    v25 = 0;
  else
    v25 = -1;
  v26 = vandq_s8((int8x16_t)vdupq_n_s16(v25), v23);
  v27 = 2 * a6;
  v28 = 16 * a6;
  v29 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a14.i64[0] = 0x800000008000;
  a14.i64[1] = 0x800000008000;
  v30.i64[0] = -1;
  v30.i64[1] = -1;
  while (1)
  {
    v31 = *(unsigned __int16 *)v21;
    if (!*(_WORD *)v21)
    {
      v52 = (int8x16_t *)&v21[v17];
      v53 = (int8x16_t *)v21;
      do
        v54 = v53++;
      while (v53 <= v52 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v54)) & 0x80) != 0);
      do
      {
        v55 = v54;
        v54 = (int8x16_t *)((char *)v54 + 4);
      }
      while (v54 <= v52 && !v55->i32[0]);
      if (v55 < v52)
      {
        while (!v55->i8[0])
        {
          v55 = (int8x16_t *)((char *)v55 + 1);
          if (v55 >= v52)
          {
            v55 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      v56 = (char *)v55 - v21;
      v57 = ((char *)v55 - v21) * a6;
      v18 += v57;
      v20 += v57;
      v21 += v57;
      v17 -= v56;
      goto LABEL_37;
    }
    if (v31 != 0xFFFF)
      break;
    v32 = (int8x16_t *)&v21[v17];
    v33 = (int8x16_t *)v21;
    do
      v34 = v33++;
    while (v33 <= v32 && (vminvq_u8((uint8x16_t)vceqq_s8(*v34, v30)) & 0x80) != 0);
    do
    {
      v35 = v34;
      v34 = (int8x16_t *)((char *)v34 + 4);
    }
    while (v34 <= v32 && v35->i32[0] == -1);
    if (v35 < v32)
    {
      while (v35->u8[0] == 255)
      {
        v35 = (int8x16_t *)((char *)v35 + 1);
        if (v35 >= v32)
        {
          v35 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    v36 = 0;
    v37 = (char *)v35 - v21;
    v38 = (char *)v35 - v21;
    do
    {
      v39 = (int16x8_t)vorrq_s8(*(int8x16_t *)&v18->i8[v36], v24);
      v40 = vorrq_s8(*(int8x16_t *)&v20->i8[v36], v26);
      v41 = (int16x8_t)vqtbl1q_s8((int8x16_t)v39, (int8x16_t)xmmword_1850049F0);
      v42 = (int16x8_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1850049F0);
      v43 = (int16x8_t)vminq_u16((uint16x8_t)v39, (uint16x8_t)v41);
      v44 = (int16x8_t)vminq_u16((uint16x8_t)v40, (uint16x8_t)v42);
      v45 = (uint16x8_t)vsubq_s16(v41, v43);
      v46 = (uint16x8_t)vsubq_s16(v42, v44);
      v47 = (int16x8_t)vcgtq_u16(vrhaddq_u16((uint16x8_t)v42, (uint16x8_t)0), (uint16x8_t)v44);
      v48 = (int8x16_t)vqaddq_u32(vmull_u16(*(uint16x4_t *)v45.i8, *(uint16x4_t *)v44.i8), vmull_u16(*(uint16x4_t *)v46.i8, *(uint16x4_t *)v43.i8));
      v49 = (int8x16_t)vqaddq_u32(vmull_high_u16(v45, (uint16x8_t)v44), vmull_high_u16(v46, (uint16x8_t)v43));
      v50 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v47.i8), v48, (int8x16_t)vqsubq_u32(vmull_lane_u16((uint16x4_t)vdup_lane_s16(*(int16x4_t *)v39.i8, 3), *(uint16x4_t *)v40.i8, 3), (uint32x4_t)v48)), v29), a14);
      v51 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v47), v49, (int8x16_t)vqsubq_u32(vmull_laneq_u16((uint16x4_t)vdup_laneq_s16(v39, 7), (uint16x8_t)v40, 7), (uint32x4_t)v49)), v29), a14);
      v16 = (int8x16_t)vceqzq_s16(v42);
      *(int8x16_t *)&v20->i8[v36] = vbslq_s8((int8x16_t)vceqzq_s16(v41), v40, vbslq_s8(v16, (int8x16_t)v39, (int8x16_t)vsubq_s16(vaddq_s16(v44, v43), (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v50, v50, 0x10uLL), 0x10uLL), vsraq_n_u32(v51, v51, 0x10uLL), 0x10uLL))));
      v21 += v27;
      v38 -= 2;
      v36 += v28;
    }
    while (v38 > 1);
    v20 = (int8x8_t *)((char *)v20 + v36);
    v18 = (int8x8_t *)((char *)v18 + v36);
    v17 = v17 - v37 + v38;
LABEL_37:
    if (v17 <= 1)
      goto LABEL_40;
  }
  v58 = 0;
  while (1)
  {
    v16.i32[0] = v31;
    v59 = (int16x8_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_1850049E0);
    v60 = (uint16x8_t)vorrq_s8(*(int8x16_t *)&v18->i8[v58], v24);
    v61 = vorrq_s8(vbicq_s8(v26, (int8x16_t)vceqzq_s16(v59)), *(int8x16_t *)&v20->i8[v58]);
    v62 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v60.i8, *(uint16x4_t *)v59.i8), v29), a14);
    *(uint16x4_t *)v62.i8 = vqshrn_n_u32(vsraq_n_u32(v62, v62, 0x10uLL), 0x10uLL);
    v63 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v60, (uint16x8_t)v59), v29), a14);
    v64 = vsraq_n_u32(v63, v63, 0x10uLL);
    *(uint16x4_t *)v59.i8 = vqshrn_n_u32(v64, 0x10uLL);
    *(int16x4_t *)v65.i8 = vdup_lane_s16(*(int16x4_t *)v62.i8, 3);
    v66 = vmin_u16(*(uint16x4_t *)v62.i8, *(uint16x4_t *)v65.i8);
    v65.u64[1] = (unint64_t)vdup_lane_s16(*(int16x4_t *)v59.i8, 3);
    v67 = (int8x16_t)vqshrn_high_n_u32(*(uint16x4_t *)v62.i8, v64, 0x10uLL);
    v68 = (int16x8_t)vqtbl1q_s8(v61, (int8x16_t)xmmword_1850049F0);
    v69 = (int16x8_t)vminq_u16((uint16x8_t)v67, v65);
    v70 = (int16x8_t)vminq_u16((uint16x8_t)v61, (uint16x8_t)v68);
    v71 = (uint16x8_t)vsubq_s16((int16x8_t)v65, v69);
    v72 = (int8x16_t)vsubq_s16(v68, v70);
    v73 = vmull_u16(*(uint16x4_t *)v72.i8, v66);
    v74 = vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL), vmin_u16(*(uint16x4_t *)v59.i8, (uint16x4_t)v65.u64[1]));
    v75 = (int16x8_t)vcgtq_u16(vrhaddq_u16((uint16x8_t)v68, (uint16x8_t)0), (uint16x8_t)v70);
    v76 = (int8x16_t)vqaddq_u32(vmull_u16(*(uint16x4_t *)v71.i8, *(uint16x4_t *)v70.i8), v73);
    v77 = (int8x16_t)vqaddq_u32(vmull_high_u16(v71, (uint16x8_t)v70), v74);
    v78 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v75.i8), v76, (int8x16_t)vqsubq_u32(vmull_lane_u16(*(uint16x4_t *)v65.i8, *(uint16x4_t *)v61.i8, 3), (uint32x4_t)v76)), v29), a14);
    v79 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v75), v77, (int8x16_t)vqsubq_u32(vmull_laneq_u16((uint16x4_t)v65.u64[1], (uint16x8_t)v61, 7), (uint32x4_t)v77)), v29), a14);
    v16 = (int8x16_t)vsubq_s16(vaddq_s16(v70, v69), (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v78, v78, 0x10uLL), 0x10uLL), vsraq_n_u32(v79, v79, 0x10uLL), 0x10uLL));
    *(int8x16_t *)&v20->i8[v58] = vbslq_s8((int8x16_t)vceqzq_s16((int16x8_t)v65), v61, vbslq_s8((int8x16_t)vceqzq_s16(v68), v67, v16));
    v21 += v27;
    v17 -= 2;
    if (v17 < 2)
      break;
    v31 = *(unsigned __int16 *)v21;
    v58 += v28;
    if ((unsigned __int16)(v31 - 1) >= 0xFFFEu)
    {
      v18 = (int8x8_t *)((char *)v18 + v58);
      v20 = (int8x8_t *)((char *)v20 + v58);
      goto LABEL_37;
    }
  }
  v18 = (int8x8_t *)((char *)v18 + v28 + v58);
  v20 = (int8x8_t *)((char *)v20 + v28 + v58);
LABEL_40:
  v80 = v17 + a15;
  if (v80)
  {
    if (a7)
      v81 = 0;
    else
      v81 = -1;
    v82.i32[0] = 0;
    v82.i16[2] = 0;
    v82.i16[3] = v81;
    if (a8)
      v83 = 0;
    else
      v83 = -1;
    v84.i32[0] = 0;
    v84.i16[2] = 0;
    v84.i16[3] = v83;
    v85 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v86.i64[0] = 0x800000008000;
    v86.i64[1] = 0x800000008000;
    do
    {
      if (*v21)
      {
        a14.i32[0] = *v21;
        v87 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a14.i8, 0);
        v88 = (int16x4_t)vorr_s8(*v20, vbic_s8(v84, (int8x8_t)vceqz_s16(v87)));
        v89 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(*v18, v82), (uint16x4_t)v87), v85), v86);
        *(uint16x4_t *)v89.i8 = vqshrn_n_u32(vsraq_n_u32(v89, v89, 0x10uLL), 0x10uLL);
        v90 = vdup_lane_s16(*(int16x4_t *)v89.i8, 3);
        v91 = vdup_lane_s16(v88, 3);
        v92 = (int16x4_t)vmin_u16(*(uint16x4_t *)v89.i8, (uint16x4_t)v90);
        v93 = (int16x4_t)vmin_u16((uint16x4_t)v88, (uint16x4_t)v91);
        v94 = (int8x16_t)vqaddq_u32(vmull_u16((uint16x4_t)vsub_s16(v90, v92), (uint16x4_t)v93), vmull_u16((uint16x4_t)vsub_s16(v91, v93), (uint16x4_t)v92));
        v95 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)vbslq_s8((int8x16_t)vmovl_s16((int16x4_t)vcgt_u16(vrhadd_u16((uint16x4_t)v91, 0), (uint16x4_t)v93)), v94, (int8x16_t)vqsubq_u32(vmull_lane_u16((uint16x4_t)v90, (uint16x4_t)v88, 3), (uint32x4_t)v94)), v85), v86);
        *(int8x8_t *)a14.i8 = vbsl_s8((int8x8_t)vceqz_s16(v90), (int8x8_t)v88, vbsl_s8((int8x8_t)vceqz_s16(v91), *(int8x8_t *)v89.i8, (int8x8_t)vsub_s16(vadd_s16(v93, v92), (int16x4_t)vqshrn_n_u32(vsraq_n_u32(v95, v95, 0x10uLL), 0x10uLL))));
        *v20 = *(int8x8_t *)a14.i8;
      }
      v96 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v96 >= v19)
        v97 = -(uint64_t)a5;
      else
        v97 = 0;
      v18 = &v96[v97];
      v20 += a6;
      --v80;
    }
    while (v80);
  }
  *result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)16,_rgba16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, int32x4_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  int8x8_t *v17;
  unint64_t v18;
  int8x8_t *v19;
  char *v20;
  unsigned int v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint32x4_t v28;
  int8x16_t v29;
  __int32 v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint32x4_t v44;
  uint16x8_t v45;
  uint32x4_t v46;
  uint16x8_t v47;
  uint32x4_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  int8x16_t *v51;
  int8x16_t *v52;
  int8x16_t *v53;
  int8x16_t *v54;
  int64_t v55;
  int64_t v56;
  uint64_t v57;
  int16x8_t v58;
  uint16x8_t v59;
  int16x8_t v60;
  uint32x4_t v61;
  int16x4_t v62;
  uint32x4_t v63;
  uint32x4_t v64;
  int16x4_t v65;
  int16x8_t v66;
  int8x16_t v67;
  uint16x4_t v68;
  uint32x4_t v69;
  int8x16_t v70;
  uint16x4_t v71;
  int8x16_t v72;
  uint16x4_t v73;
  int8x16_t v74;
  uint32x4_t v75;
  uint32x4_t v76;
  uint32x4_t v77;
  uint32x4_t v78;
  uint64_t v79;
  __int16 v80;
  int8x8_t v81;
  int8x8_t v82;
  __int16 v83;
  uint32x4_t v84;
  int32x4_t v85;
  int16x4_t v86;
  int16x4_t v87;
  int16x4_t v88;
  int16x4_t v89;
  uint16x4_t v90;
  uint16x4_t v91;
  uint32x4_t v92;
  int8x8_t *v93;
  uint64_t v94;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a15 < 2)
    goto LABEL_40;
  if (a7)
    v21 = 0;
  else
    v21 = -1;
  v22.i64[0] = 0xFFFF000000000000;
  v22.i64[1] = 0xFFFF000000000000;
  v23 = vandq_s8((int8x16_t)vdupq_n_s16(v21), v22);
  if (a8)
    v24 = 0;
  else
    v24 = -1;
  v25 = vandq_s8((int8x16_t)vdupq_n_s16(v24), v22);
  v26 = 2 * a6;
  v27 = 16 * a6;
  v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a13.i64[0] = 0x800000008000;
  a13.i64[1] = 0x800000008000;
  v29.i64[0] = -1;
  v29.i64[1] = -1;
  while (1)
  {
    v30 = *(unsigned __int16 *)v20;
    if (!*(_WORD *)v20)
    {
      v51 = (int8x16_t *)&v20[v16];
      v52 = (int8x16_t *)v20;
      do
        v53 = v52++;
      while (v52 <= v51 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v53)) & 0x80) != 0);
      do
      {
        v54 = v53;
        v53 = (int8x16_t *)((char *)v53 + 4);
      }
      while (v53 <= v51 && !v54->i32[0]);
      if (v54 < v51)
      {
        while (!v54->i8[0])
        {
          v54 = (int8x16_t *)((char *)v54 + 1);
          if (v54 >= v51)
          {
            v54 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      v55 = (char *)v54 - v20;
      v56 = ((char *)v54 - v20) * a6;
      v17 += v56;
      v19 += v56;
      v20 += v56;
      v16 -= v55;
      goto LABEL_37;
    }
    if (v30 != 0xFFFF)
      break;
    v31 = (int8x16_t *)&v20[v16];
    v32 = (int8x16_t *)v20;
    do
      v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqq_s8(*v33, v29)) & 0x80) != 0);
    do
    {
      v34 = v33;
      v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && v34->i32[0] == -1);
    if (v34 < v31)
    {
      while (v34->u8[0] == 255)
      {
        v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          v34 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    v35 = 0;
    v36 = (char *)v34 - v20;
    v37 = (char *)v34 - v20;
    do
    {
      v38 = vorrq_s8(*(int8x16_t *)&v17->i8[v35], v23);
      v39 = vorrq_s8(*(int8x16_t *)&v19->i8[v35], v25);
      v40 = (int16x8_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_1850049F0);
      v41 = (int16x8_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1850049F0);
      v42 = vminq_u16((uint16x8_t)v38, (uint16x8_t)v40);
      v43 = vminq_u16((uint16x8_t)v39, (uint16x8_t)v41);
      v44 = vmull_lane_u16(*(uint16x4_t *)v42.i8, *(uint16x4_t *)v39.i8, 3);
      v45 = (uint16x8_t)vmvnq_s8((int8x16_t)v41);
      v46 = vmull_u16(*(uint16x4_t *)v42.i8, *(uint16x4_t *)v45.i8);
      v47 = (uint16x8_t)vmvnq_s8((int8x16_t)v40);
      v48 = vqaddq_u32(vqaddq_u32(vminq_u32(vmull_high_laneq_u16(v43, (uint16x8_t)v38, 7), vmull_high_laneq_u16(v42, (uint16x8_t)v39, 7)), vmull_high_u16(v42, v45)), vmull_high_u16(v43, v47));
      v49 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vminq_u32(vmull_lane_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v38.i8, 3), v44), v46), vmull_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v47.i8)), v28), a13);
      v50 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v48, v28), a13);
      v15 = vbslq_s8((int8x16_t)vceqzq_s16(v41), v38, (int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v49, v49, 0x10uLL), 0x10uLL), vsraq_n_u32(v50, v50, 0x10uLL), 0x10uLL));
      *(int8x16_t *)&v19->i8[v35] = vbslq_s8((int8x16_t)vceqzq_s16(v40), v39, v15);
      v20 += v26;
      v37 -= 2;
      v35 += v27;
    }
    while (v37 > 1);
    v19 = (int8x8_t *)((char *)v19 + v35);
    v17 = (int8x8_t *)((char *)v17 + v35);
    v16 = v16 - v36 + v37;
LABEL_37:
    if (v16 <= 1)
      goto LABEL_40;
  }
  v57 = 0;
  while (1)
  {
    v15.i32[0] = v30;
    v58 = (int16x8_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_1850049E0);
    v59 = (uint16x8_t)vorrq_s8(*(int8x16_t *)&v17->i8[v57], v23);
    v60 = (int16x8_t)vorrq_s8(vbicq_s8(v25, (int8x16_t)vceqzq_s16(v58)), *(int8x16_t *)&v19->i8[v57]);
    v61 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v59.i8, *(uint16x4_t *)v58.i8), v28), a13);
    v62 = (int16x4_t)vqshrn_n_u32(vsraq_n_u32(v61, v61, 0x10uLL), 0x10uLL);
    v63 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v59, (uint16x8_t)v58), v28), a13);
    v64 = vsraq_n_u32(v63, v63, 0x10uLL);
    v65 = (int16x4_t)vqshrn_n_u32(v64, 0x10uLL);
    *(int16x4_t *)v58.i8 = vdup_lane_s16(v62, 3);
    v66 = (int16x8_t)vqtbl1q_s8((int8x16_t)v60, (int8x16_t)xmmword_1850049F0);
    v67 = (int8x16_t)vminq_u16((uint16x8_t)v60, (uint16x8_t)v66);
    v68 = vmin_u16((uint16x4_t)v62, *(uint16x4_t *)v58.i8);
    v69 = vmull_lane_u16(*(uint16x4_t *)v67.i8, (uint16x4_t)v62, 3);
    v70 = (int8x16_t)vqshrn_high_n_u32((uint16x4_t)v62, v64, 0x10uLL);
    v58.i64[1] = vdupq_lane_s16(v65, 3).u64[0];
    v71 = vmin_u16((uint16x4_t)v65, (uint16x4_t)v58.u64[1]);
    v72 = (int8x16_t)vdupq_laneq_s16(v60, 7);
    v73 = (uint16x4_t)vextq_s8(v67, v67, 8uLL).u64[0];
    v74 = vmvnq_s8((int8x16_t)v66);
    v75 = vqaddq_u32(vminq_u32(v69, vmull_lane_u16(v68, *(uint16x4_t *)v60.i8, 3)), vmull_u16(v68, *(uint16x4_t *)v74.i8));
    v76 = vqaddq_u32(vminq_u32(vmull_high_lane_u16((uint16x8_t)v67, (uint16x4_t)v65, 3), vmull_u16(v71, (uint16x4_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL))), vmull_u16(v71, (uint16x4_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL)));
    v77 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v75, vmull_u16(*(uint16x4_t *)v67.i8, (uint16x4_t)vmvn_s8(*(int8x8_t *)v58.i8))), v28), a13);
    v78 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v76, vmull_u16(v73, (uint16x4_t)vmvn_s8((int8x8_t)v58.u64[1]))), v28), a13);
    v15 = (int8x16_t)vceqzq_s16(v58);
    *(int8x16_t *)&v19->i8[v57] = vbslq_s8(v15, (int8x16_t)v60, vbslq_s8((int8x16_t)vceqzq_s16(v66), v70, (int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v77, v77, 0x10uLL), 0x10uLL), vsraq_n_u32(v78, v78, 0x10uLL), 0x10uLL)));
    v20 += v26;
    v16 -= 2;
    if (v16 < 2)
      break;
    v30 = *(unsigned __int16 *)v20;
    v57 += v27;
    if ((unsigned __int16)(v30 - 1) >= 0xFFFEu)
    {
      v17 = (int8x8_t *)((char *)v17 + v57);
      v19 = (int8x8_t *)((char *)v19 + v57);
      goto LABEL_37;
    }
  }
  v17 = (int8x8_t *)((char *)v17 + v27 + v57);
  v19 = (int8x8_t *)((char *)v19 + v27 + v57);
LABEL_40:
  v79 = v16 + a14;
  if (v79)
  {
    if (a7)
      v80 = 0;
    else
      v80 = -1;
    v81.i32[0] = 0;
    v81.i16[2] = 0;
    v81.i16[3] = v80;
    v82.i32[0] = 0;
    v82.i16[2] = 0;
    if (a8)
      v83 = 0;
    else
      v83 = -1;
    v82.i16[3] = v83;
    v84 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v85.i64[0] = 0x800000008000;
    v85.i64[1] = 0x800000008000;
    do
    {
      if (*v20)
      {
        a13.i32[0] = *v20;
        v86 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a13.i8, 0);
        v87 = (int16x4_t)vorr_s8(*v19, vbic_s8(v82, (int8x8_t)vceqz_s16(v86)));
        a13 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(*v17, v81), (uint16x4_t)v86), v84), v85);
        *(uint16x4_t *)a13.i8 = vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a13, (uint32x4_t)a13, 0x10uLL), 0x10uLL);
        v88 = vdup_lane_s16(*(int16x4_t *)a13.i8, 3);
        v89 = vdup_lane_s16(v87, 3);
        v90 = vmin_u16(*(uint16x4_t *)a13.i8, (uint16x4_t)v88);
        v91 = vmin_u16((uint16x4_t)v87, (uint16x4_t)v89);
        v92 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vminq_u32(vmull_lane_u16(v90, (uint16x4_t)v87, 3), vmull_lane_u16(v91, *(uint16x4_t *)a13.i8, 3)), vmull_u16(v90, (uint16x4_t)vmvn_s8((int8x8_t)v89))), vmull_u16(v91, (uint16x4_t)vmvn_s8((int8x8_t)v88))), v84), v85);
        *(int8x8_t *)a13.i8 = vbsl_s8((int8x8_t)vceqz_s16(v88), (int8x8_t)v87, vbsl_s8((int8x8_t)vceqz_s16(v89), *(int8x8_t *)a13.i8, (int8x8_t)vqshrn_n_u32(vsraq_n_u32(v92, v92, 0x10uLL), 0x10uLL)));
        *v19 = *(int8x8_t *)a13.i8;
      }
      v93 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v93 >= v18)
        v94 = -(uint64_t)a5;
      else
        v94 = 0;
      v17 = &v93[v94];
      v19 += a6;
      --v79;
    }
    while (v79);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)17,_rgba16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, int32x4_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  int8x8_t *v17;
  unint64_t v18;
  int8x8_t *v19;
  char *v20;
  unsigned int v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint32x4_t v28;
  int8x16_t v29;
  __int32 v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint32x4_t v44;
  uint16x8_t v45;
  uint32x4_t v46;
  uint16x8_t v47;
  uint32x4_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  int8x16_t *v51;
  int8x16_t *v52;
  int8x16_t *v53;
  int8x16_t *v54;
  int64_t v55;
  int64_t v56;
  uint64_t v57;
  int16x8_t v58;
  uint16x8_t v59;
  int16x8_t v60;
  uint32x4_t v61;
  int16x4_t v62;
  uint32x4_t v63;
  uint32x4_t v64;
  int16x4_t v65;
  int16x8_t v66;
  int8x16_t v67;
  uint16x4_t v68;
  uint32x4_t v69;
  int8x16_t v70;
  uint16x4_t v71;
  int8x16_t v72;
  uint16x4_t v73;
  int8x16_t v74;
  uint32x4_t v75;
  uint32x4_t v76;
  uint32x4_t v77;
  uint32x4_t v78;
  uint64_t v79;
  __int16 v80;
  int8x8_t v81;
  int8x8_t v82;
  __int16 v83;
  uint32x4_t v84;
  int32x4_t v85;
  int16x4_t v86;
  int16x4_t v87;
  int16x4_t v88;
  int16x4_t v89;
  uint16x4_t v90;
  uint16x4_t v91;
  uint32x4_t v92;
  int8x8_t *v93;
  uint64_t v94;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a15 < 2)
    goto LABEL_40;
  if (a7)
    v21 = 0;
  else
    v21 = -1;
  v22.i64[0] = 0xFFFF000000000000;
  v22.i64[1] = 0xFFFF000000000000;
  v23 = vandq_s8((int8x16_t)vdupq_n_s16(v21), v22);
  if (a8)
    v24 = 0;
  else
    v24 = -1;
  v25 = vandq_s8((int8x16_t)vdupq_n_s16(v24), v22);
  v26 = 2 * a6;
  v27 = 16 * a6;
  v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a13.i64[0] = 0x800000008000;
  a13.i64[1] = 0x800000008000;
  v29.i64[0] = -1;
  v29.i64[1] = -1;
  while (1)
  {
    v30 = *(unsigned __int16 *)v20;
    if (!*(_WORD *)v20)
    {
      v51 = (int8x16_t *)&v20[v16];
      v52 = (int8x16_t *)v20;
      do
        v53 = v52++;
      while (v52 <= v51 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v53)) & 0x80) != 0);
      do
      {
        v54 = v53;
        v53 = (int8x16_t *)((char *)v53 + 4);
      }
      while (v53 <= v51 && !v54->i32[0]);
      if (v54 < v51)
      {
        while (!v54->i8[0])
        {
          v54 = (int8x16_t *)((char *)v54 + 1);
          if (v54 >= v51)
          {
            v54 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      v55 = (char *)v54 - v20;
      v56 = ((char *)v54 - v20) * a6;
      v17 += v56;
      v19 += v56;
      v20 += v56;
      v16 -= v55;
      goto LABEL_37;
    }
    if (v30 != 0xFFFF)
      break;
    v31 = (int8x16_t *)&v20[v16];
    v32 = (int8x16_t *)v20;
    do
      v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqq_s8(*v33, v29)) & 0x80) != 0);
    do
    {
      v34 = v33;
      v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && v34->i32[0] == -1);
    if (v34 < v31)
    {
      while (v34->u8[0] == 255)
      {
        v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          v34 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    v35 = 0;
    v36 = (char *)v34 - v20;
    v37 = (char *)v34 - v20;
    do
    {
      v38 = vorrq_s8(*(int8x16_t *)&v17->i8[v35], v23);
      v39 = vorrq_s8(*(int8x16_t *)&v19->i8[v35], v25);
      v40 = (int16x8_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_1850049F0);
      v41 = (int16x8_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1850049F0);
      v42 = vminq_u16((uint16x8_t)v38, (uint16x8_t)v40);
      v43 = vminq_u16((uint16x8_t)v39, (uint16x8_t)v41);
      v44 = vmull_lane_u16(*(uint16x4_t *)v42.i8, *(uint16x4_t *)v39.i8, 3);
      v45 = (uint16x8_t)vmvnq_s8((int8x16_t)v41);
      v46 = vmull_u16(*(uint16x4_t *)v42.i8, *(uint16x4_t *)v45.i8);
      v47 = (uint16x8_t)vmvnq_s8((int8x16_t)v40);
      v48 = vqaddq_u32(vqaddq_u32(vmaxq_u32(vmull_high_laneq_u16(v42, (uint16x8_t)v39, 7), vmull_high_laneq_u16(v43, (uint16x8_t)v38, 7)), vmull_high_u16(v42, v45)), vmull_high_u16(v43, v47));
      v49 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vmaxq_u32(v44, vmull_lane_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v38.i8, 3)), v46), vmull_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v47.i8)), v28), a13);
      v50 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v48, v28), a13);
      v15 = vbslq_s8((int8x16_t)vceqzq_s16(v41), v38, (int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v49, v49, 0x10uLL), 0x10uLL), vsraq_n_u32(v50, v50, 0x10uLL), 0x10uLL));
      *(int8x16_t *)&v19->i8[v35] = vbslq_s8((int8x16_t)vceqzq_s16(v40), v39, v15);
      v20 += v26;
      v37 -= 2;
      v35 += v27;
    }
    while (v37 > 1);
    v19 = (int8x8_t *)((char *)v19 + v35);
    v17 = (int8x8_t *)((char *)v17 + v35);
    v16 = v16 - v36 + v37;
LABEL_37:
    if (v16 <= 1)
      goto LABEL_40;
  }
  v57 = 0;
  while (1)
  {
    v15.i32[0] = v30;
    v58 = (int16x8_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_1850049E0);
    v59 = (uint16x8_t)vorrq_s8(*(int8x16_t *)&v17->i8[v57], v23);
    v60 = (int16x8_t)vorrq_s8(vbicq_s8(v25, (int8x16_t)vceqzq_s16(v58)), *(int8x16_t *)&v19->i8[v57]);
    v61 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v59.i8, *(uint16x4_t *)v58.i8), v28), a13);
    v62 = (int16x4_t)vqshrn_n_u32(vsraq_n_u32(v61, v61, 0x10uLL), 0x10uLL);
    v63 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v59, (uint16x8_t)v58), v28), a13);
    v64 = vsraq_n_u32(v63, v63, 0x10uLL);
    v65 = (int16x4_t)vqshrn_n_u32(v64, 0x10uLL);
    *(int16x4_t *)v58.i8 = vdup_lane_s16(v62, 3);
    v66 = (int16x8_t)vqtbl1q_s8((int8x16_t)v60, (int8x16_t)xmmword_1850049F0);
    v67 = (int8x16_t)vminq_u16((uint16x8_t)v60, (uint16x8_t)v66);
    v68 = vmin_u16((uint16x4_t)v62, *(uint16x4_t *)v58.i8);
    v69 = vmull_lane_u16(*(uint16x4_t *)v67.i8, (uint16x4_t)v62, 3);
    v70 = (int8x16_t)vqshrn_high_n_u32((uint16x4_t)v62, v64, 0x10uLL);
    v58.i64[1] = vdupq_lane_s16(v65, 3).u64[0];
    v71 = vmin_u16((uint16x4_t)v65, (uint16x4_t)v58.u64[1]);
    v72 = (int8x16_t)vdupq_laneq_s16(v60, 7);
    v73 = (uint16x4_t)vextq_s8(v67, v67, 8uLL).u64[0];
    v74 = vmvnq_s8((int8x16_t)v66);
    v75 = vqaddq_u32(vmaxq_u32(vmull_lane_u16(v68, *(uint16x4_t *)v60.i8, 3), v69), vmull_u16(v68, *(uint16x4_t *)v74.i8));
    v76 = vqaddq_u32(vmaxq_u32(vmull_u16(v71, (uint16x4_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL)), vmull_high_lane_u16((uint16x8_t)v67, (uint16x4_t)v65, 3)), vmull_u16(v71, (uint16x4_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL)));
    v77 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v75, vmull_u16(*(uint16x4_t *)v67.i8, (uint16x4_t)vmvn_s8(*(int8x8_t *)v58.i8))), v28), a13);
    v78 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v76, vmull_u16(v73, (uint16x4_t)vmvn_s8((int8x8_t)v58.u64[1]))), v28), a13);
    v15 = (int8x16_t)vceqzq_s16(v58);
    *(int8x16_t *)&v19->i8[v57] = vbslq_s8(v15, (int8x16_t)v60, vbslq_s8((int8x16_t)vceqzq_s16(v66), v70, (int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v77, v77, 0x10uLL), 0x10uLL), vsraq_n_u32(v78, v78, 0x10uLL), 0x10uLL)));
    v20 += v26;
    v16 -= 2;
    if (v16 < 2)
      break;
    v30 = *(unsigned __int16 *)v20;
    v57 += v27;
    if ((unsigned __int16)(v30 - 1) >= 0xFFFEu)
    {
      v17 = (int8x8_t *)((char *)v17 + v57);
      v19 = (int8x8_t *)((char *)v19 + v57);
      goto LABEL_37;
    }
  }
  v17 = (int8x8_t *)((char *)v17 + v27 + v57);
  v19 = (int8x8_t *)((char *)v19 + v27 + v57);
LABEL_40:
  v79 = v16 + a14;
  if (v79)
  {
    if (a7)
      v80 = 0;
    else
      v80 = -1;
    v81.i32[0] = 0;
    v81.i16[2] = 0;
    v81.i16[3] = v80;
    v82.i32[0] = 0;
    v82.i16[2] = 0;
    if (a8)
      v83 = 0;
    else
      v83 = -1;
    v82.i16[3] = v83;
    v84 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v85.i64[0] = 0x800000008000;
    v85.i64[1] = 0x800000008000;
    do
    {
      if (*v20)
      {
        a13.i32[0] = *v20;
        v86 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a13.i8, 0);
        v87 = (int16x4_t)vorr_s8(*v19, vbic_s8(v82, (int8x8_t)vceqz_s16(v86)));
        a13 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(*v17, v81), (uint16x4_t)v86), v84), v85);
        *(uint16x4_t *)a13.i8 = vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a13, (uint32x4_t)a13, 0x10uLL), 0x10uLL);
        v88 = vdup_lane_s16(*(int16x4_t *)a13.i8, 3);
        v89 = vdup_lane_s16(v87, 3);
        v90 = vmin_u16(*(uint16x4_t *)a13.i8, (uint16x4_t)v88);
        v91 = vmin_u16((uint16x4_t)v87, (uint16x4_t)v89);
        v92 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vmaxq_u32(vmull_lane_u16(v90, (uint16x4_t)v87, 3), vmull_lane_u16(v91, *(uint16x4_t *)a13.i8, 3)), vmull_u16(v90, (uint16x4_t)vmvn_s8((int8x8_t)v89))), vmull_u16(v91, (uint16x4_t)vmvn_s8((int8x8_t)v88))), v84), v85);
        *(int8x8_t *)a13.i8 = vbsl_s8((int8x8_t)vceqz_s16(v88), (int8x8_t)v87, vbsl_s8((int8x8_t)vceqz_s16(v89), *(int8x8_t *)a13.i8, (int8x8_t)vqshrn_n_u32(vsraq_n_u32(v92, v92, 0x10uLL), 0x10uLL)));
        *v19 = *(int8x8_t *)a13.i8;
      }
      v93 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v93 >= v18)
        v94 = -(uint64_t)a5;
      else
        v94 = 0;
      v17 = &v93[v94];
      v19 += a6;
      --v79;
    }
    while (v79);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)18,_rgba16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, int32x4_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  int8x8_t *v17;
  unint64_t v18;
  int8x8_t *v19;
  char *v20;
  unsigned int v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint32x4_t v28;
  int32x4_t v29;
  int8x16_t v30;
  __int32 v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  int16x8_t v39;
  int8x16_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int8x16_t v43;
  int16x8_t v44;
  uint16x8_t v45;
  int16x8_t v46;
  int8x16_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint32x4_t v50;
  uint32x4_t v51;
  uint16x8_t v52;
  uint32x4_t v53;
  uint32x4_t v54;
  uint32x4_t v55;
  uint32x4_t v56;
  uint32x4_t v57;
  int8x16_t *v58;
  int8x16_t *v59;
  int8x16_t *v60;
  int8x16_t *v61;
  int64_t v62;
  int64_t v63;
  uint64_t v64;
  int16x8_t v65;
  uint16x8_t v66;
  int8x16_t v67;
  uint32x4_t v68;
  int16x4_t v69;
  uint32x4_t v70;
  uint32x4_t v71;
  int16x4_t v72;
  uint32x4_t v73;
  uint16x4_t v74;
  int8x16_t v75;
  int16x8_t v76;
  int16x8_t v77;
  uint16x8_t v78;
  int16x8_t v79;
  uint16x8_t v80;
  uint32x4_t v81;
  uint16x8_t v82;
  int8x16_t v83;
  uint32x4_t v84;
  uint32x4_t v85;
  uint32x4_t v86;
  uint64_t v87;
  __int16 v88;
  int8x8_t v89;
  int8x8_t v90;
  __int16 v91;
  uint32x4_t v92;
  int32x4_t v93;
  int16x4_t v94;
  int16x4_t v95;
  int16x4_t v96;
  int16x4_t v97;
  uint16x4_t v98;
  int16x4_t v99;
  uint32x4_t v100;
  uint32x4_t v101;
  int8x8_t *v102;
  uint64_t v103;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a15 < 2)
    goto LABEL_40;
  if (a7)
    v21 = 0;
  else
    v21 = -1;
  v22.i64[0] = 0xFFFF000000000000;
  v22.i64[1] = 0xFFFF000000000000;
  v23 = vandq_s8((int8x16_t)vdupq_n_s16(v21), v22);
  if (a8)
    v24 = 0;
  else
    v24 = -1;
  v25 = vandq_s8((int8x16_t)vdupq_n_s16(v24), v22);
  v26 = 2 * a6;
  v27 = 16 * a6;
  v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a13.i64[0] = 0xFFFFFFFFFFFFLL;
  a13.i64[1] = 0xFFFFFFFFFFFFLL;
  v29.i64[0] = 0x800000008000;
  v29.i64[1] = 0x800000008000;
  v30.i64[0] = -1;
  v30.i64[1] = -1;
  while (1)
  {
    v31 = *(unsigned __int16 *)v20;
    if (!*(_WORD *)v20)
    {
      v58 = (int8x16_t *)&v20[v16];
      v59 = (int8x16_t *)v20;
      do
        v60 = v59++;
      while (v59 <= v58 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v60)) & 0x80) != 0);
      do
      {
        v61 = v60;
        v60 = (int8x16_t *)((char *)v60 + 4);
      }
      while (v60 <= v58 && !v61->i32[0]);
      if (v61 < v58)
      {
        while (!v61->i8[0])
        {
          v61 = (int8x16_t *)((char *)v61 + 1);
          if (v61 >= v58)
          {
            v61 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      v62 = (char *)v61 - v20;
      v63 = ((char *)v61 - v20) * a6;
      v17 += v63;
      v19 += v63;
      v20 += v63;
      v16 -= v62;
      goto LABEL_37;
    }
    if (v31 != 0xFFFF)
      break;
    v32 = (int8x16_t *)&v20[v16];
    v33 = (int8x16_t *)v20;
    do
      v34 = v33++;
    while (v33 <= v32 && (vminvq_u8((uint8x16_t)vceqq_s8(*v34, v30)) & 0x80) != 0);
    do
    {
      v35 = v34;
      v34 = (int8x16_t *)((char *)v34 + 4);
    }
    while (v34 <= v32 && v35->i32[0] == -1);
    if (v35 < v32)
    {
      while (v35->u8[0] == 255)
      {
        v35 = (int8x16_t *)((char *)v35 + 1);
        if (v35 >= v32)
        {
          v35 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    v36 = 0;
    v37 = (char *)v35 - v20;
    v38 = (char *)v35 - v20;
    do
    {
      v39 = (int16x8_t)vorrq_s8(*(int8x16_t *)&v17->i8[v36], v23);
      v40 = vorrq_s8(*(int8x16_t *)&v19->i8[v36], v25);
      v41 = (int16x8_t)vqtbl1q_s8((int8x16_t)v39, (int8x16_t)xmmword_1850049F0);
      v42 = (int16x8_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1850049F0);
      v43 = (int8x16_t)vminq_u16((uint16x8_t)v39, (uint16x8_t)v41);
      v44 = (int16x8_t)vminq_u16((uint16x8_t)v40, (uint16x8_t)v42);
      v45 = (uint16x8_t)vandq_s8(v43, (int8x16_t)a13);
      v46 = (int16x8_t)vbicq_s8((int8x16_t)vtstq_s16(v44, v44), (int8x16_t)vcgtq_u16((uint16x8_t)v41, v45));
      v47 = (int8x16_t)vmovl_high_s16(v46);
      v48 = (uint16x8_t)vorrq_s8((int8x16_t)vqsubq_u16((uint16x8_t)v41, v45), (int8x16_t)vceqzq_s16(v44));
      v49 = (uint16x8_t)vmvnq_s8((int8x16_t)v41);
      v50 = vqaddq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcvtnq_u32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v44.i8)), vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)vdup_lane_s16(*(int16x4_t *)v39.i8, 3), *(uint16x4_t *)v39.i8, 3))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v48.i8)))), (int8x16_t)vmovl_s16(*(int16x4_t *)v46.i8)), vmull_u16(*(uint16x4_t *)v44.i8, *(uint16x4_t *)v49.i8));
      v51 = vqaddq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcvtnq_u32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_high_u16((uint16x8_t)v44)), vcvtq_f32_u32(vmull_laneq_u16((uint16x4_t)vdup_laneq_s16(v39, 7), (uint16x8_t)v39, 7))), vcvtq_f32_u32(vmovl_high_u16(v48)))), v47), vmull_high_u16((uint16x8_t)v44, v49));
      v52 = (uint16x8_t)vmvnq_s8((int8x16_t)v42);
      v53 = vmull_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v52.i8);
      v54 = vqaddq_u32(v51, vmull_high_u16((uint16x8_t)v43, v52));
      v55 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v50, v53), v28), v29);
      *(uint16x4_t *)v55.i8 = vqshrn_n_u32(vsraq_n_u32(v55, v55, 0x10uLL), 0x10uLL);
      v56 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v54, v28), v29);
      v57 = vsraq_n_u32(v56, v56, 0x10uLL);
      *(int16x4_t *)v52.i8 = vdup_lane_s16(*(int16x4_t *)v55.i8, 3);
      v52.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v57, 0x10uLL), 3);
      v15 = vbslq_s8((int8x16_t)vceqzq_s16(v42), (int8x16_t)v39, (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v55.i8, v57, 0x10uLL), v52));
      *(int8x16_t *)&v19->i8[v36] = vbslq_s8((int8x16_t)vceqzq_s16(v41), v40, v15);
      v20 += v26;
      v38 -= 2;
      v36 += v27;
    }
    while (v38 > 1);
    v19 = (int8x8_t *)((char *)v19 + v36);
    v17 = (int8x8_t *)((char *)v17 + v36);
    v16 = v16 - v37 + v38;
LABEL_37:
    if (v16 <= 1)
      goto LABEL_40;
  }
  v64 = 0;
  while (1)
  {
    v15.i32[0] = v31;
    v65 = (int16x8_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_1850049E0);
    v66 = (uint16x8_t)vorrq_s8(*(int8x16_t *)&v17->i8[v64], v23);
    v67 = vorrq_s8(vbicq_s8(v25, (int8x16_t)vceqzq_s16(v65)), *(int8x16_t *)&v19->i8[v64]);
    v68 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v66.i8, *(uint16x4_t *)v65.i8), v28), v29);
    v69 = (int16x4_t)vqshrn_n_u32(vsraq_n_u32(v68, v68, 0x10uLL), 0x10uLL);
    v70 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v66, (uint16x8_t)v65), v28), v29);
    v71 = vsraq_n_u32(v70, v70, 0x10uLL);
    v72 = (int16x4_t)vqshrn_n_u32(v71, 0x10uLL);
    *(int16x4_t *)v65.i8 = vdup_lane_s16(v69, 3);
    v73 = vmull_lane_u16(*(uint16x4_t *)v65.i8, (uint16x4_t)v69, 3);
    v74 = vmin_u16((uint16x4_t)v69, *(uint16x4_t *)v65.i8);
    v75 = (int8x16_t)vqshrn_high_n_u32((uint16x4_t)v69, v71, 0x10uLL);
    v65.u64[1] = (unint64_t)vdup_lane_s16(v72, 3);
    v76 = (int16x8_t)vqtbl1q_s8(v67, (int8x16_t)xmmword_1850049F0);
    v77 = (int16x8_t)vminq_u16((uint16x8_t)v67, (uint16x8_t)v76);
    v78 = (uint16x8_t)vandq_s8((int8x16_t)vminq_u16((uint16x8_t)v75, (uint16x8_t)v65), (int8x16_t)a13);
    v79 = (int16x8_t)vbicq_s8((int8x16_t)vtstq_s16(v77, v77), (int8x16_t)vcgtq_u16((uint16x8_t)v65, v78));
    v80 = (uint16x8_t)vorrq_s8((int8x16_t)vqsubq_u16((uint16x8_t)v65, v78), (int8x16_t)vceqzq_s16(v77));
    v81 = vqaddq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcvtnq_u32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v77.i8)), vcvtq_f32_u32(v73)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v80.i8)))), (int8x16_t)vmovl_s16(*(int16x4_t *)v79.i8)), vmull_u16(*(uint16x4_t *)v77.i8, (uint16x4_t)vmvn_s8(*(int8x8_t *)v65.i8)));
    v82 = (uint16x8_t)vqaddq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcvtnq_u32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_high_u16((uint16x8_t)v77)), vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)v65.u64[1], (uint16x4_t)v72, 3))), vcvtq_f32_u32(vmovl_high_u16(v80)))), (int8x16_t)vmovl_high_s16(v79)), vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL), (uint16x4_t)vmvn_s8((int8x8_t)v65.u64[1])));
    v83 = vmvnq_s8((int8x16_t)v76);
    v84 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v81, vmull_u16(v74, *(uint16x4_t *)v83.i8)), v28), v29);
    *(uint16x4_t *)v84.i8 = vqshrn_n_u32(vsraq_n_u32(v84, v84, 0x10uLL), 0x10uLL);
    v85 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32((uint32x4_t)v82, vmull_u16(vmin_u16((uint16x4_t)v72, (uint16x4_t)v65.u64[1]), (uint16x4_t)*(_OWORD *)&vextq_s8(v83, v83, 8uLL))), v28), v29);
    v86 = vsraq_n_u32(v85, v85, 0x10uLL);
    *(int16x4_t *)v82.i8 = vdup_lane_s16(*(int16x4_t *)v84.i8, 3);
    v82.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v86, 0x10uLL), 3);
    v15 = (int8x16_t)vceqzq_s16(v65);
    *(int8x16_t *)&v19->i8[v64] = vbslq_s8(v15, v67, vbslq_s8((int8x16_t)vceqzq_s16(v76), v75, (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v84.i8, v86, 0x10uLL), v82)));
    v20 += v26;
    v16 -= 2;
    if (v16 < 2)
      break;
    v31 = *(unsigned __int16 *)v20;
    v64 += v27;
    if ((unsigned __int16)(v31 - 1) >= 0xFFFEu)
    {
      v17 = (int8x8_t *)((char *)v17 + v64);
      v19 = (int8x8_t *)((char *)v19 + v64);
      goto LABEL_37;
    }
  }
  v17 = (int8x8_t *)((char *)v17 + v27 + v64);
  v19 = (int8x8_t *)((char *)v19 + v27 + v64);
LABEL_40:
  v87 = v16 + a14;
  if (v87)
  {
    if (a7)
      v88 = 0;
    else
      v88 = -1;
    v89.i32[0] = 0;
    v89.i16[2] = 0;
    v89.i16[3] = v88;
    v90.i32[0] = 0;
    v90.i16[2] = 0;
    if (a8)
      v91 = 0;
    else
      v91 = -1;
    v90.i16[3] = v91;
    v92 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v93.i64[0] = 0x800000008000;
    v93.i64[1] = 0x800000008000;
    do
    {
      if (*v20)
      {
        a13.i32[0] = *v20;
        v94 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a13.i8, 0);
        v95 = (int16x4_t)vorr_s8(*v19, vbic_s8(v90, (int8x8_t)vceqz_s16(v94)));
        a13 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(*v17, v89), (uint16x4_t)v94), v92), v93);
        *(uint16x4_t *)a13.i8 = vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a13, (uint32x4_t)a13, 0x10uLL), 0x10uLL);
        v96 = vdup_lane_s16(*(int16x4_t *)a13.i8, 3);
        v97 = vdup_lane_s16(v95, 3);
        v98 = vmin_u16(*(uint16x4_t *)a13.i8, (uint16x4_t)v96);
        v99 = (int16x4_t)vmin_u16((uint16x4_t)v95, (uint16x4_t)v97);
        v100 = vmull_u16(v98, (uint16x4_t)vmvn_s8((int8x8_t)v97));
        v98.i16[3] = 0;
        v101 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcvtnq_u32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v99)), vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)v96, *(uint16x4_t *)a13.i8, 3))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vqsub_u16((uint16x4_t)v96, v98), (int8x8_t)vceqz_s16(v99)))))), (int8x16_t)vmovl_s16((int16x4_t)vbic_s8((int8x8_t)vtst_s16(v99, v99), (int8x8_t)vcgt_u16((uint16x4_t)v96, v98)))), vmull_u16((uint16x4_t)v99, (uint16x4_t)vmvn_s8((int8x8_t)v96))), v100),
                                          v92),
                             v93);
        *(uint16x4_t *)v101.i8 = vqshrn_n_u32(vsraq_n_u32(v101, v101, 0x10uLL), 0x10uLL);
        *(int8x8_t *)a13.i8 = vbsl_s8((int8x8_t)vceqz_s16(v96), (int8x8_t)v95, vbsl_s8((int8x8_t)vceqz_s16(v97), *(int8x8_t *)a13.i8, (int8x8_t)vmin_u16(*(uint16x4_t *)v101.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v101.i8, 3))));
        *v19 = *(int8x8_t *)a13.i8;
      }
      v102 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v102 >= v18)
        v103 = -(uint64_t)a5;
      else
        v103 = 0;
      v17 = &v102[v103];
      v19 += a6;
      --v87;
    }
    while (v87);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)19,_rgba16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, double a13, int8x8_t a14, uint64_t a15, unint64_t a16)
{
  int8x16_t v16;
  unint64_t v17;
  int8x8_t *v18;
  unint64_t v19;
  int8x8_t *v20;
  char *v21;
  unsigned int v22;
  int8x16_t v23;
  int8x16_t v24;
  unsigned int v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t v29;
  int8x16_t v30;
  uint32x4_t v31;
  int32x4_t v32;
  __int32 v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  int16x8_t v41;
  int8x16_t v42;
  int16x8_t v43;
  int16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  float32x4_t v48;
  float32x4_t v49;
  uint16x4_t v50;
  uint16x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  uint16x8_t v54;
  uint32x4_t v55;
  uint32x4_t v56;
  uint16x8_t v57;
  uint32x4_t v58;
  float32x4_t v59;
  int32x4_t v60;
  int8x16_t *v61;
  int8x16_t *v62;
  int8x16_t *v63;
  int8x16_t *v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  int16x8_t v68;
  uint16x8_t v69;
  int8x16_t v70;
  int16x8_t v71;
  int16x4_t v72;
  uint32x4_t v73;
  uint32x4_t v74;
  int16x4_t v75;
  uint32x4_t v76;
  uint16x4_t v77;
  int8x16_t v78;
  int16x8_t v79;
  int8x16_t v80;
  uint16x8_t v81;
  float32x4_t v82;
  float32x4_t v83;
  uint16x4_t v84;
  uint32x4_t v85;
  uint32x4_t v86;
  int8x16_t v87;
  int32x4_t v88;
  uint16x8_t v89;
  int8x16_t v90;
  uint64_t v91;
  __int16 v92;
  int8x8_t v93;
  int8x8_t v94;
  __int16 v95;
  uint32x4_t v96;
  int32x4_t v97;
  float32x4_t v98;
  int16x4_t v99;
  int16x4_t v100;
  uint32x4_t v101;
  int16x4_t v102;
  int16x4_t v103;
  uint16x4_t v104;
  uint16x4_t v105;
  float32x4_t v106;
  int16x4_t v107;
  int8x8_t *v108;
  uint64_t v109;

  v17 = a16;
  v18 = *result;
  v19 = *a3;
  v20 = *a2;
  v21 = *a4;
  if (a16 < 2)
    goto LABEL_40;
  if (a7)
    v22 = 0;
  else
    v22 = -1;
  v23.i64[0] = 0xFFFF000000000000;
  v23.i64[1] = 0xFFFF000000000000;
  v24 = vandq_s8((int8x16_t)vdupq_n_s16(v22), v23);
  if (a8)
    v25 = 0;
  else
    v25 = -1;
  v26 = vandq_s8((int8x16_t)vdupq_n_s16(v25), v23);
  v27 = 2 * a6;
  v28 = 16 * a6;
  v29 = (float32x4_t)vdupq_n_s32(0x37800080u);
  v30.i64[0] = -1;
  v30.i64[1] = -1;
  a14.i32[1] = 0;
  v31 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  v32.i64[0] = 0x800000008000;
  v32.i64[1] = 0x800000008000;
  while (1)
  {
    v33 = *(unsigned __int16 *)v21;
    if (!*(_WORD *)v21)
    {
      v61 = (int8x16_t *)&v21[v17];
      v62 = (int8x16_t *)v21;
      do
        v63 = v62++;
      while (v62 <= v61 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v63)) & 0x80) != 0);
      do
      {
        v64 = v63;
        v63 = (int8x16_t *)((char *)v63 + 4);
      }
      while (v63 <= v61 && !v64->i32[0]);
      if (v64 < v61)
      {
        while (!v64->i8[0])
        {
          v64 = (int8x16_t *)((char *)v64 + 1);
          if (v64 >= v61)
          {
            v64 = (int8x16_t *)&v21[v17];
            break;
          }
        }
      }
      v65 = (char *)v64 - v21;
      v66 = ((char *)v64 - v21) * a6;
      v18 += v66;
      v20 += v66;
      v21 += v66;
      v17 -= v65;
      goto LABEL_37;
    }
    if (v33 != 0xFFFF)
      break;
    v34 = (int8x16_t *)&v21[v17];
    v35 = (int8x16_t *)v21;
    do
      v36 = v35++;
    while (v35 <= v34 && (vminvq_u8((uint8x16_t)vceqq_s8(*v36, v30)) & 0x80) != 0);
    do
    {
      v37 = v36;
      v36 = (int8x16_t *)((char *)v36 + 4);
    }
    while (v36 <= v34 && v37->i32[0] == -1);
    if (v37 < v34)
    {
      while (v37->u8[0] == 255)
      {
        v37 = (int8x16_t *)((char *)v37 + 1);
        if (v37 >= v34)
        {
          v37 = (int8x16_t *)&v21[v17];
          break;
        }
      }
    }
    v38 = 0;
    v39 = (char *)v37 - v21;
    v40 = (char *)v37 - v21;
    do
    {
      v41 = (int16x8_t)vorrq_s8(*(int8x16_t *)&v18->i8[v38], v24);
      v42 = vorrq_s8(*(int8x16_t *)&v20->i8[v38], v26);
      v43 = (int16x8_t)vqtbl1q_s8((int8x16_t)v41, (int8x16_t)xmmword_1850049F0);
      v44 = (int16x8_t)vqtbl1q_s8(v42, (int8x16_t)xmmword_1850049F0);
      v45 = vminq_u16((uint16x8_t)v41, (uint16x8_t)v43);
      v46 = vminq_u16((uint16x8_t)v42, (uint16x8_t)v44);
      v47 = vqsubq_u16((uint16x8_t)v44, v46);
      v48 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v47.i8));
      v49 = vcvtq_f32_u32(vmovl_high_u16(v47));
      v50 = (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v41.i8, 3);
      v51 = (uint16x4_t)vdup_laneq_s16(v41, 7);
      v52 = vcvtq_f32_u32(vmovl_high_u16(v45));
      v53 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v45.i8));
      v54 = (uint16x8_t)vmvnq_s8((int8x16_t)v43);
      v55 = vmull_u16(*(uint16x4_t *)v46.i8, *(uint16x4_t *)v54.i8);
      v56 = vmull_high_u16(v46, v54);
      v57 = (uint16x8_t)vmvnq_s8((int8x16_t)v44);
      v58 = vmull_u16(*(uint16x4_t *)v45.i8, *(uint16x4_t *)v57.i8);
      v59 = vaddq_f32(vcvtq_f32_u32(v56), vcvtq_f32_u32(vmull_high_u16(v45, v57)));
      *(int16x4_t *)v56.i8 = vqmovun_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(v55), vcvtq_f32_u32(v58)), vcvtq_f32_u32(vmull_lane_u16(v50, *(uint16x4_t *)v42.i8, 3))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v48, vcvtq_f32_u32(vmull_lane_u16(v50, *(uint16x4_t *)v41.i8, 3))), v53), (int8x16_t)vceqzq_f32(v48))), v29)));
      v60 = vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(v59, vcvtq_f32_u32(vmull_laneq_u16(v51, (uint16x8_t)v42, 7))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v49, vcvtq_f32_u32(vmull_laneq_u16(v51, (uint16x8_t)v41, 7))), v52), (int8x16_t)vceqzq_f32(v49))), v29));
      *(int16x4_t *)v49.f32 = vdup_lane_s16(*(int16x4_t *)v56.i8, 3);
      *(int16x4_t *)&v49.u32[2] = vdup_lane_s16(vqmovun_s32(v60), 3);
      v16 = (int8x16_t)vminq_u16((uint16x8_t)vqmovun_high_s32(*(int16x4_t *)v56.i8, v60), (uint16x8_t)v49);
      *(int8x16_t *)&v20->i8[v38] = vbslq_s8((int8x16_t)vceqzq_s16(v43), v42, vbslq_s8((int8x16_t)vceqzq_s16(v44), (int8x16_t)v41, v16));
      v21 += v27;
      v40 -= 2;
      v38 += v28;
    }
    while (v40 > 1);
    v20 = (int8x8_t *)((char *)v20 + v38);
    v18 = (int8x8_t *)((char *)v18 + v38);
    v17 = v17 - v39 + v40;
LABEL_37:
    if (v17 <= 1)
      goto LABEL_40;
  }
  v67 = 0;
  while (1)
  {
    v16.i32[0] = v33;
    v68 = (int16x8_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_1850049E0);
    v69 = (uint16x8_t)vorrq_s8(*(int8x16_t *)&v18->i8[v67], v24);
    v70 = vorrq_s8(vbicq_s8(v26, (int8x16_t)vceqzq_s16(v68)), *(int8x16_t *)&v20->i8[v67]);
    v71 = (int16x8_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v69.i8, *(uint16x4_t *)v68.i8), v31), v32);
    v72 = (int16x4_t)vqshrn_n_u32(vsraq_n_u32((uint32x4_t)v71, (uint32x4_t)v71, 0x10uLL), 0x10uLL);
    v73 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v69, (uint16x8_t)v68), v31), v32);
    v74 = vsraq_n_u32(v73, v73, 0x10uLL);
    v75 = (int16x4_t)vqshrn_n_u32(v74, 0x10uLL);
    *(int16x4_t *)v71.i8 = vdup_lane_s16(v72, 3);
    v76 = vmull_lane_u16(*(uint16x4_t *)v71.i8, (uint16x4_t)v72, 3);
    v77 = vmin_u16((uint16x4_t)v72, *(uint16x4_t *)v71.i8);
    v78 = (int8x16_t)vqshrn_high_n_u32((uint16x4_t)v72, v74, 0x10uLL);
    v71.u64[1] = (unint64_t)vdup_lane_s16(v75, 3);
    v79 = (int16x8_t)vqtbl1q_s8(v70, (int8x16_t)xmmword_1850049F0);
    v80 = (int8x16_t)vminq_u16((uint16x8_t)v70, (uint16x8_t)v79);
    v81 = vqsubq_u16((uint16x8_t)v79, (uint16x8_t)v80);
    v82 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v81.i8));
    v83 = vcvtq_f32_u32(vmovl_high_u16(v81));
    v84 = vmin_u16((uint16x4_t)v75, (uint16x4_t)v71.u64[1]);
    v85 = vmull_u16(*(uint16x4_t *)v80.i8, (uint16x4_t)vmvn_s8(*(int8x8_t *)v71.i8));
    v86 = vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v80, v80, 8uLL), (uint16x4_t)vmvn_s8((int8x8_t)v71.u64[1]));
    v87 = vmvnq_s8((int8x16_t)v79);
    *(int16x4_t *)v76.i8 = vqmovun_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(v85), vcvtq_f32_u32(vmull_u16(v77, *(uint16x4_t *)v87.i8))), vcvtq_f32_u32(vmull_lane_u16(*(uint16x4_t *)v71.i8, *(uint16x4_t *)v70.i8, 3))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v82, vcvtq_f32_u32(v76)), vcvtq_f32_u32(vmovl_u16(v77))), (int8x16_t)vceqzq_f32(v82))), v29)));
    v88 = vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(v86), vcvtq_f32_u32(vmull_u16(v84, (uint16x4_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL)))), vcvtq_f32_u32(vmull_laneq_u16((uint16x4_t)v71.u64[1], (uint16x8_t)v70, 7))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v83, vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)v71.u64[1], (uint16x4_t)v75, 3))), vcvtq_f32_u32(vmovl_u16(v84))), (int8x16_t)vceqzq_f32(v83))), v29));
    *(int16x4_t *)v89.i8 = vdup_lane_s16(*(int16x4_t *)v76.i8, 3);
    v89.u64[1] = (unint64_t)vdup_lane_s16(vqmovun_s32(v88), 3);
    v90 = (int8x16_t)vminq_u16((uint16x8_t)vqmovun_high_s32(*(int16x4_t *)v76.i8, v88), v89);
    v16 = (int8x16_t)vceqzq_s16(v79);
    *(int8x16_t *)&v20->i8[v67] = vbslq_s8((int8x16_t)vceqzq_s16(v71), v70, vbslq_s8(v16, v78, v90));
    v21 += v27;
    v17 -= 2;
    if (v17 < 2)
      break;
    v33 = *(unsigned __int16 *)v21;
    v67 += v28;
    if ((unsigned __int16)(v33 - 1) >= 0xFFFEu)
    {
      v18 = (int8x8_t *)((char *)v18 + v67);
      v20 = (int8x8_t *)((char *)v20 + v67);
      goto LABEL_37;
    }
  }
  v18 = (int8x8_t *)((char *)v18 + v28 + v67);
  v20 = (int8x8_t *)((char *)v20 + v28 + v67);
LABEL_40:
  v91 = v17 + a15;
  if (v91)
  {
    if (a7)
      v92 = 0;
    else
      v92 = -1;
    v93.i32[0] = 0;
    v93.i16[2] = 0;
    v93.i16[3] = v92;
    v94.i32[0] = 0;
    v94.i16[2] = 0;
    if (a8)
      v95 = 0;
    else
      v95 = -1;
    v94.i16[3] = v95;
    v96 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v97.i64[0] = 0x800000008000;
    v97.i64[1] = 0x800000008000;
    v98 = (float32x4_t)vdupq_n_s32(0x37800080u);
    do
    {
      if (*v21)
      {
        a14.i32[0] = *v21;
        v99 = (int16x4_t)vdup_lane_s8(a14, 0);
        v100 = (int16x4_t)vorr_s8(*v20, vbic_s8(v94, (int8x8_t)vceqz_s16(v99)));
        v101 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(*v18, v93), (uint16x4_t)v99), v96), v97);
        *(uint16x4_t *)v101.i8 = vqshrn_n_u32(vsraq_n_u32(v101, v101, 0x10uLL), 0x10uLL);
        v102 = vdup_lane_s16(*(int16x4_t *)v101.i8, 3);
        v103 = vdup_lane_s16(v100, 3);
        v104 = vmin_u16(*(uint16x4_t *)v101.i8, (uint16x4_t)v102);
        v105 = vmin_u16((uint16x4_t)v100, (uint16x4_t)v103);
        v106 = vcvtq_f32_u32(vmovl_u16(vqsub_u16((uint16x4_t)v103, v105)));
        v107 = vqmovun_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmull_u16(v105, (uint16x4_t)vmvn_s8((int8x8_t)v102))), vcvtq_f32_u32(vmull_u16(v104, (uint16x4_t)vmvn_s8((int8x8_t)v103)))), vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)v102, (uint16x4_t)v100, 3))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v106, vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)v102, *(uint16x4_t *)v101.i8, 3))), vcvtq_f32_u32(vmovl_u16(v104))), (int8x16_t)vceqzq_f32(v106))), v98)));
        a14 = vbsl_s8((int8x8_t)vceqz_s16(v102), (int8x8_t)v100, vbsl_s8((int8x8_t)vceqz_s16(v103), *(int8x8_t *)v101.i8, (int8x8_t)vmin_u16((uint16x4_t)v107, (uint16x4_t)vdup_lane_s16(v107, 3))));
        *v20 = a14;
      }
      v108 = &v18[a6];
      v21 += a6;
      if ((unint64_t)v108 >= v19)
        v109 = -(uint64_t)a5;
      else
        v109 = 0;
      v18 = &v108[v109];
      v20 += a6;
      --v91;
    }
    while (v91);
  }
  *result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)20,_rgba16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, int32x4_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  int8x8_t *v17;
  unint64_t v18;
  int8x8_t *v19;
  char *v20;
  unsigned int v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint32x4_t v28;
  int8x16_t v29;
  __int32 v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  int16x4_t v44;
  int32x4_t v45;
  uint32x4_t v46;
  uint16x8_t v47;
  uint32x4_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  uint32x4_t v51;
  uint16x8_t v52;
  uint32x4_t v53;
  uint32x4_t v54;
  uint32x4_t v55;
  uint32x4_t v56;
  uint16x8_t v57;
  uint32x4_t v58;
  uint32x4_t v59;
  uint32x4_t v60;
  uint32x4_t v61;
  uint32x4_t v62;
  int8x16_t *v63;
  int8x16_t *v64;
  int8x16_t *v65;
  int8x16_t *v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int8x16_t v72;
  uint32x4_t v73;
  int16x4_t v74;
  uint32x4_t v75;
  uint32x4_t v76;
  int16x4_t v77;
  int16x8_t v78;
  int8x16_t v79;
  int16x4_t v80;
  uint16x8_t v81;
  uint16x4_t v82;
  int8x16_t v83;
  int32x4_t v84;
  int8x16_t v85;
  uint32x4_t v86;
  uint16x4_t v87;
  uint32x4_t v88;
  uint32x4_t v89;
  int8x16_t v90;
  uint32x4_t v91;
  uint32x4_t v92;
  uint32x4_t v93;
  int8x16_t v94;
  uint64_t v95;
  __int16 v96;
  int8x8_t v97;
  int8x8_t v98;
  __int16 v99;
  uint32x4_t v100;
  int32x4_t v101;
  int16x4_t v102;
  int16x4_t v103;
  int16x4_t v104;
  int16x4_t v105;
  uint16x4_t v106;
  uint16x4_t v107;
  uint16x4_t v108;
  uint32x4_t v109;
  uint32x4_t v110;
  uint32x4_t v111;
  int8x8_t *v112;
  uint64_t v113;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a15 < 2)
    goto LABEL_40;
  if (a7)
    v21 = 0;
  else
    v21 = -1;
  v22.i64[0] = 0xFFFF000000000000;
  v22.i64[1] = 0xFFFF000000000000;
  v23 = vandq_s8((int8x16_t)vdupq_n_s16(v21), v22);
  if (a8)
    v24 = 0;
  else
    v24 = -1;
  v25 = vandq_s8((int8x16_t)vdupq_n_s16(v24), v22);
  v26 = 2 * a6;
  v27 = 16 * a6;
  v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a13.i64[0] = 0x800000008000;
  a13.i64[1] = 0x800000008000;
  v29.i64[0] = -1;
  v29.i64[1] = -1;
  while (1)
  {
    v30 = *(unsigned __int16 *)v20;
    if (!*(_WORD *)v20)
    {
      v63 = (int8x16_t *)&v20[v16];
      v64 = (int8x16_t *)v20;
      do
        v65 = v64++;
      while (v64 <= v63 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v65)) & 0x80) != 0);
      do
      {
        v66 = v65;
        v65 = (int8x16_t *)((char *)v65 + 4);
      }
      while (v65 <= v63 && !v66->i32[0]);
      if (v66 < v63)
      {
        while (!v66->i8[0])
        {
          v66 = (int8x16_t *)((char *)v66 + 1);
          if (v66 >= v63)
          {
            v66 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      v67 = (char *)v66 - v20;
      v68 = ((char *)v66 - v20) * a6;
      v17 += v68;
      v19 += v68;
      v20 += v68;
      v16 -= v67;
      goto LABEL_37;
    }
    if (v30 != 0xFFFF)
      break;
    v31 = (int8x16_t *)&v20[v16];
    v32 = (int8x16_t *)v20;
    do
      v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqq_s8(*v33, v29)) & 0x80) != 0);
    do
    {
      v34 = v33;
      v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && v34->i32[0] == -1);
    if (v34 < v31)
    {
      while (v34->u8[0] == 255)
      {
        v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          v34 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    v35 = 0;
    v36 = (char *)v34 - v20;
    v37 = (char *)v34 - v20;
    do
    {
      v38 = vorrq_s8(*(int8x16_t *)&v17->i8[v35], v23);
      v39 = vorrq_s8(*(int8x16_t *)&v19->i8[v35], v25);
      v40 = (int16x8_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_1850049F0);
      v41 = (int16x8_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1850049F0);
      v42 = vminq_u16((uint16x8_t)v38, (uint16x8_t)v40);
      v43 = vminq_u16((uint16x8_t)v39, (uint16x8_t)v41);
      v44 = vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmull_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v43.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v41.i8)))));
      v45 = vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmull_high_u16(v43, v43)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL)))));
      v46 = vmull_lane_u16((uint16x4_t)v44, *(uint16x4_t *)v38.i8, 3);
      v47 = vqsubq_u16(v43, (uint16x8_t)vqmovun_high_s32(v44, v45));
      v48 = vmull_u16(*(uint16x4_t *)v47.i8, *(uint16x4_t *)v42.i8);
      v49 = vmull_high_u16(v47, v42);
      v50 = vqaddq_u32(v46, vqaddq_u32(v48, v48));
      v51 = vqaddq_u32(vmull_laneq_u16((uint16x4_t)vqmovun_s32(v45), (uint16x8_t)v38, 7), vqaddq_u32(v49, v49));
      v52 = (uint16x8_t)vmvnq_s8((int8x16_t)v40);
      v53 = vmull_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v52.i8);
      v54 = vmull_high_u16(v43, v52);
      v55 = vqaddq_u32(v50, v53);
      v56 = vqaddq_u32(v51, v54);
      v57 = (uint16x8_t)vmvnq_s8((int8x16_t)v41);
      v58 = vmull_u16(*(uint16x4_t *)v42.i8, *(uint16x4_t *)v57.i8);
      v59 = vqaddq_u32(v56, vmull_high_u16(v42, v57));
      v60 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v55, v58), v28), a13);
      *(uint16x4_t *)v60.i8 = vqshrn_n_u32(vsraq_n_u32(v60, v60, 0x10uLL), 0x10uLL);
      v61 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v59, v28), a13);
      v62 = vsraq_n_u32(v61, v61, 0x10uLL);
      *(int16x4_t *)v57.i8 = vdup_lane_s16(*(int16x4_t *)v60.i8, 3);
      v57.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v62, 0x10uLL), 3);
      v15 = vbslq_s8((int8x16_t)vceqzq_s16(v41), v38, (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v60.i8, v62, 0x10uLL), v57));
      *(int8x16_t *)&v19->i8[v35] = vbslq_s8((int8x16_t)vceqzq_s16(v40), v39, v15);
      v20 += v26;
      v37 -= 2;
      v35 += v27;
    }
    while (v37 > 1);
    v19 = (int8x8_t *)((char *)v19 + v35);
    v17 = (int8x8_t *)((char *)v17 + v35);
    v16 = v16 - v36 + v37;
LABEL_37:
    if (v16 <= 1)
      goto LABEL_40;
  }
  v69 = 0;
  while (1)
  {
    v15.i32[0] = v30;
    v70 = (int16x8_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_1850049E0);
    v71 = (int16x8_t)vorrq_s8(*(int8x16_t *)&v17->i8[v69], v23);
    v72 = vorrq_s8(vbicq_s8(v25, (int8x16_t)vceqzq_s16(v70)), *(int8x16_t *)&v19->i8[v69]);
    v73 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v71.i8, *(uint16x4_t *)v70.i8), v28), a13);
    v74 = (int16x4_t)vqshrn_n_u32(vsraq_n_u32(v73, v73, 0x10uLL), 0x10uLL);
    v75 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16((uint16x8_t)v71, (uint16x8_t)v70), v28), a13);
    v76 = vsraq_n_u32(v75, v75, 0x10uLL);
    *(int16x4_t *)v71.i8 = vdup_lane_s16(v74, 3);
    v77 = (int16x4_t)vqshrn_n_u32(v76, 0x10uLL);
    v78 = (int16x8_t)vqtbl1q_s8(v72, (int8x16_t)xmmword_1850049F0);
    v79 = (int8x16_t)vminq_u16((uint16x8_t)v72, (uint16x8_t)v78);
    v80 = vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmull_u16(*(uint16x4_t *)v79.i8, *(uint16x4_t *)v79.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v78.i8)))));
    v81 = (uint16x8_t)vmull_lane_u16((uint16x4_t)v80, (uint16x4_t)v74, 3);
    v82 = vmin_u16((uint16x4_t)v74, *(uint16x4_t *)v71.i8);
    v83 = (int8x16_t)vqshrn_high_n_u32((uint16x4_t)v74, v76, 0x10uLL);
    v71.u64[1] = (unint64_t)vdup_lane_s16(v77, 3);
    v84 = vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmull_high_u16((uint16x8_t)v79, (uint16x8_t)v79)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL)))));
    v85 = (int8x16_t)vqsubq_u16((uint16x8_t)v79, (uint16x8_t)vqmovun_high_s32(v80, v84));
    v86 = vmull_u16(*(uint16x4_t *)v85.i8, v82);
    v87 = vmin_u16((uint16x4_t)v77, (uint16x4_t)v71.u64[1]);
    v88 = vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL), v87);
    v89 = vqaddq_u32(vqaddq_u32(vmull_lane_u16((uint16x4_t)vqmovun_s32(v84), (uint16x4_t)v77, 3), vqaddq_u32(v88, v88)), vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL), (uint16x4_t)vmvn_s8((int8x8_t)v71.u64[1])));
    v90 = vmvnq_s8((int8x16_t)v78);
    v91 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vqaddq_u32((uint32x4_t)v81, vqaddq_u32(v86, v86)), vmull_u16(*(uint16x4_t *)v79.i8, (uint16x4_t)vmvn_s8(*(int8x8_t *)v71.i8))), vmull_u16(v82, *(uint16x4_t *)v90.i8)), v28), a13);
    *(uint16x4_t *)v91.i8 = vqshrn_n_u32(vsraq_n_u32(v91, v91, 0x10uLL), 0x10uLL);
    v92 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v89, vmull_u16(v87, (uint16x4_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL))), v28), a13);
    v93 = vsraq_n_u32(v92, v92, 0x10uLL);
    *(int16x4_t *)v81.i8 = vdup_lane_s16(*(int16x4_t *)v91.i8, 3);
    v81.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v93, 0x10uLL), 3);
    v94 = vbslq_s8((int8x16_t)vceqzq_s16(v78), v83, (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v91.i8, v93, 0x10uLL), v81));
    v15 = (int8x16_t)vceqzq_s16(v71);
    *(int8x16_t *)&v19->i8[v69] = vbslq_s8(v15, v72, v94);
    v20 += v26;
    v16 -= 2;
    if (v16 < 2)
      break;
    v30 = *(unsigned __int16 *)v20;
    v69 += v27;
    if ((unsigned __int16)(v30 - 1) >= 0xFFFEu)
    {
      v17 = (int8x8_t *)((char *)v17 + v69);
      v19 = (int8x8_t *)((char *)v19 + v69);
      goto LABEL_37;
    }
  }
  v17 = (int8x8_t *)((char *)v17 + v27 + v69);
  v19 = (int8x8_t *)((char *)v19 + v27 + v69);
LABEL_40:
  v95 = v16 + a14;
  if (v95)
  {
    if (a7)
      v96 = 0;
    else
      v96 = -1;
    v97.i32[0] = 0;
    v97.i16[2] = 0;
    v97.i16[3] = v96;
    v98.i32[0] = 0;
    v98.i16[2] = 0;
    if (a8)
      v99 = 0;
    else
      v99 = -1;
    v98.i16[3] = v99;
    v100 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v101.i64[0] = 0x800000008000;
    v101.i64[1] = 0x800000008000;
    do
    {
      if (*v20)
      {
        a13.i32[0] = *v20;
        v102 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a13.i8, 0);
        v103 = (int16x4_t)vorr_s8(*v19, vbic_s8(v98, (int8x8_t)vceqz_s16(v102)));
        a13 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(*v17, v97), (uint16x4_t)v102), v100), v101);
        *(uint16x4_t *)a13.i8 = vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a13, (uint32x4_t)a13, 0x10uLL), 0x10uLL);
        v104 = vdup_lane_s16(*(int16x4_t *)a13.i8, 3);
        v105 = vdup_lane_s16(v103, 3);
        v106 = vmin_u16(*(uint16x4_t *)a13.i8, (uint16x4_t)v104);
        v107 = vmin_u16((uint16x4_t)v103, (uint16x4_t)v105);
        v108 = (uint16x4_t)vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmull_u16(v107, v107)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v105)))));
        v109 = vmull_lane_u16(v108, *(uint16x4_t *)a13.i8, 3);
        v110 = vmull_u16(vqsub_u16(v107, v108), v106);
        v111 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vqaddq_u32(v109, vqaddq_u32(v110, v110)), vmull_u16(v107, (uint16x4_t)vmvn_s8((int8x8_t)v104))), vmull_u16(v106, (uint16x4_t)vmvn_s8((int8x8_t)v105))), v100), v101);
        *(uint16x4_t *)v111.i8 = vqshrn_n_u32(vsraq_n_u32(v111, v111, 0x10uLL), 0x10uLL);
        *(int8x8_t *)a13.i8 = vbsl_s8((int8x8_t)vceqz_s16(v104), (int8x8_t)v103, vbsl_s8((int8x8_t)vceqz_s16(v105), *(int8x8_t *)a13.i8, (int8x8_t)vmin_u16(*(uint16x4_t *)v111.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v111.i8, 3))));
        *v19 = *(int8x8_t *)a13.i8;
      }
      v112 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v112 >= v18)
        v113 = -(uint64_t)a5;
      else
        v113 = 0;
      v17 = &v112[v113];
      v19 += a6;
      --v95;
    }
    while (v95);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)21,_rgba16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, double a13, int32x4_t a14, uint64_t a15, unint64_t a16)
{
  int8x16_t v16;
  int16x8_t v17;
  unint64_t v18;
  int8x8_t *v19;
  unint64_t v20;
  int8x8_t *v21;
  char *v22;
  unsigned int v23;
  int8x16_t v24;
  int8x16_t v25;
  unsigned int v26;
  int8x16_t v27;
  uint64_t v28;
  uint64_t v29;
  uint32x4_t v30;
  int8x16_t v31;
  __int32 v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  int8x16_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  int16x8_t v46;
  int8x16_t v47;
  uint32x4_t v48;
  uint32x4_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint32x4_t v52;
  uint32x4_t v53;
  uint32x4_t v54;
  uint32x4_t v55;
  uint16x8_t v56;
  uint32x4_t v57;
  uint32x4_t v58;
  uint16x8_t v59;
  uint32x4_t v60;
  uint32x4_t v61;
  uint32x4_t v62;
  uint32x4_t v63;
  uint32x4_t v64;
  int8x16_t *v65;
  int8x16_t *v66;
  int8x16_t *v67;
  int8x16_t *v68;
  int64_t v69;
  int64_t v70;
  uint64_t v71;
  int16x8_t v72;
  uint16x8_t v73;
  int16x8_t v74;
  uint32x4_t v75;
  int16x4_t v76;
  uint32x4_t v77;
  uint32x4_t v78;
  int16x4_t v79;
  uint32x4_t v80;
  int8x16_t v81;
  int16x8_t v82;
  uint16x8_t v83;
  int8x16_t v84;
  int16x8_t v85;
  uint32x4_t v86;
  uint16x4_t v87;
  uint16x4_t v88;
  uint32x4_t v89;
  uint16x8_t v90;
  uint16x8_t v91;
  uint32x4_t v92;
  uint32x4_t v93;
  int8x16_t v94;
  uint32x4_t v95;
  uint32x4_t v96;
  uint32x4_t v97;
  int8x16_t v98;
  uint64_t v99;
  __int16 v100;
  int8x8_t v101;
  __int16 v102;
  int8x8_t v103;
  uint32x4_t v104;
  int32x4_t v105;
  int16x4_t v106;
  int16x4_t v107;
  int16x4_t v108;
  int16x4_t v109;
  uint16x4_t v110;
  uint16x4_t v111;
  uint32x4_t v112;
  uint32x4_t v113;
  uint32x4_t v114;
  int8x8_t *v115;
  uint64_t v116;

  v18 = a16;
  v19 = *result;
  v20 = *a3;
  v21 = *a2;
  v22 = *a4;
  if (a16 < 2)
    goto LABEL_40;
  if (a7)
    v23 = 0;
  else
    v23 = -1;
  v24.i64[0] = 0xFFFF000000000000;
  v24.i64[1] = 0xFFFF000000000000;
  v25 = vandq_s8((int8x16_t)vdupq_n_s16(v23), v24);
  if (a8)
    v26 = 0;
  else
    v26 = -1;
  v27 = vandq_s8((int8x16_t)vdupq_n_s16(v26), v24);
  v28 = 2 * a6;
  v29 = 16 * a6;
  v30 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a14.i64[0] = 0x800000008000;
  a14.i64[1] = 0x800000008000;
  v31.i64[0] = -1;
  v31.i64[1] = -1;
  while (1)
  {
    v32 = *(unsigned __int16 *)v22;
    if (!*(_WORD *)v22)
    {
      v65 = (int8x16_t *)&v22[v18];
      v66 = (int8x16_t *)v22;
      do
        v67 = v66++;
      while (v66 <= v65 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v67)) & 0x80) != 0);
      do
      {
        v68 = v67;
        v67 = (int8x16_t *)((char *)v67 + 4);
      }
      while (v67 <= v65 && !v68->i32[0]);
      if (v68 < v65)
      {
        while (!v68->i8[0])
        {
          v68 = (int8x16_t *)((char *)v68 + 1);
          if (v68 >= v65)
          {
            v68 = (int8x16_t *)&v22[v18];
            break;
          }
        }
      }
      v69 = (char *)v68 - v22;
      v70 = ((char *)v68 - v22) * a6;
      v19 += v70;
      v21 += v70;
      v22 += v70;
      v18 -= v69;
      goto LABEL_37;
    }
    if (v32 != 0xFFFF)
      break;
    v33 = (int8x16_t *)&v22[v18];
    v34 = (int8x16_t *)v22;
    do
      v35 = v34++;
    while (v34 <= v33 && (vminvq_u8((uint8x16_t)vceqq_s8(*v35, v31)) & 0x80) != 0);
    do
    {
      v36 = v35;
      v35 = (int8x16_t *)((char *)v35 + 4);
    }
    while (v35 <= v33 && v36->i32[0] == -1);
    if (v36 < v33)
    {
      while (v36->u8[0] == 255)
      {
        v36 = (int8x16_t *)((char *)v36 + 1);
        if (v36 >= v33)
        {
          v36 = (int8x16_t *)&v22[v18];
          break;
        }
      }
    }
    v37 = 0;
    v38 = (char *)v36 - v22;
    v39 = (char *)v36 - v22;
    do
    {
      v40 = vorrq_s8(*(int8x16_t *)&v19->i8[v37], v25);
      v41 = (int16x8_t)vorrq_s8(*(int8x16_t *)&v21->i8[v37], v27);
      v42 = (int16x8_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1850049F0);
      v43 = (int16x8_t)vqtbl1q_s8((int8x16_t)v41, (int8x16_t)xmmword_1850049F0);
      v44 = vminq_u16((uint16x8_t)v40, (uint16x8_t)v42);
      v45 = vminq_u16((uint16x8_t)v41, (uint16x8_t)v43);
      v46 = (int16x8_t)vcgeq_u16(vrhaddq_u16((uint16x8_t)v42, (uint16x8_t)0), v44);
      v47 = (int8x16_t)vzip1q_s16(v46, v46);
      v48 = vmull_u16(*(uint16x4_t *)v44.i8, *(uint16x4_t *)v45.i8);
      v49 = vmull_high_u16(v44, v45);
      v50 = vqsubq_u16((uint16x8_t)v43, v45);
      v51 = vqsubq_u16((uint16x8_t)v42, v44);
      v52 = vmull_u16(*(uint16x4_t *)v50.i8, *(uint16x4_t *)v51.i8);
      v53 = vmull_high_u16(v50, v51);
      v54 = (uint32x4_t)vbslq_s8((int8x16_t)vzip2q_s16(v46, v46), (int8x16_t)vqaddq_u32(v49, v49), (int8x16_t)vqsubq_u32(vmull_laneq_u16((uint16x4_t)vdup_laneq_s16(v41, 7), (uint16x8_t)v40, 7), vqaddq_u32(v53, v53)));
      v55 = (uint32x4_t)vbslq_s8(v47, (int8x16_t)vqaddq_u32(v48, v48), (int8x16_t)vqsubq_u32(vmull_lane_u16((uint16x4_t)vdup_lane_s16(*(int16x4_t *)v41.i8, 3), *(uint16x4_t *)v40.i8, 3), vqaddq_u32(v52, v52)));
      v56 = (uint16x8_t)vmvnq_s8((int8x16_t)v42);
      v57 = vmull_u16(*(uint16x4_t *)v45.i8, *(uint16x4_t *)v56.i8);
      v58 = vqaddq_u32(v54, vmull_high_u16(v45, v56));
      v59 = (uint16x8_t)vmvnq_s8((int8x16_t)v43);
      v60 = vmull_u16(*(uint16x4_t *)v44.i8, *(uint16x4_t *)v59.i8);
      v61 = vqaddq_u32(v58, vmull_high_u16(v44, v59));
      v62 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(v55, v57), v60), v30), a14);
      *(uint16x4_t *)v62.i8 = vqshrn_n_u32(vsraq_n_u32(v62, v62, 0x10uLL), 0x10uLL);
      v63 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v61, v30), a14);
      v64 = vsraq_n_u32(v63, v63, 0x10uLL);
      *(int16x4_t *)v59.i8 = vdup_lane_s16(*(int16x4_t *)v62.i8, 3);
      v59.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v64, 0x10uLL), 3);
      v17 = (int16x8_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v62.i8, v64, 0x10uLL), v59);
      v16 = vbslq_s8((int8x16_t)vceqzq_s16(v43), v40, (int8x16_t)v17);
      *(int8x16_t *)&v21->i8[v37] = vbslq_s8((int8x16_t)vceqzq_s16(v42), (int8x16_t)v41, v16);
      v22 += v28;
      v39 -= 2;
      v37 += v29;
    }
    while (v39 > 1);
    v21 = (int8x8_t *)((char *)v21 + v37);
    v19 = (int8x8_t *)((char *)v19 + v37);
    v18 = v18 - v38 + v39;
LABEL_37:
    if (v18 <= 1)
      goto LABEL_40;
  }
  v71 = 0;
  while (1)
  {
    v16.i32[0] = v32;
    v72 = (int16x8_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_1850049E0);
    v73 = (uint16x8_t)vorrq_s8(*(int8x16_t *)&v19->i8[v71], v25);
    v74 = (int16x8_t)vorrq_s8(vbicq_s8(v27, (int8x16_t)vceqzq_s16(v72)), *(int8x16_t *)&v21->i8[v71]);
    v75 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v73.i8, *(uint16x4_t *)v72.i8), v30), a14);
    v76 = (int16x4_t)vqshrn_n_u32(vsraq_n_u32(v75, v75, 0x10uLL), 0x10uLL);
    v77 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v73, (uint16x8_t)v72), v30), a14);
    v78 = vsraq_n_u32(v77, v77, 0x10uLL);
    v79 = (int16x4_t)vqshrn_n_u32(v78, 0x10uLL);
    *(int16x4_t *)v72.i8 = vdup_lane_s16(v76, 3);
    *(uint16x4_t *)v73.i8 = vmin_u16((uint16x4_t)v76, *(uint16x4_t *)v72.i8);
    v80 = vmull_lane_u16((uint16x4_t)vdup_lane_s16(*(int16x4_t *)v74.i8, 3), (uint16x4_t)v76, 3);
    v81 = (int8x16_t)vqshrn_high_n_u32((uint16x4_t)v76, v78, 0x10uLL);
    v72.u64[1] = (unint64_t)vdup_lane_s16(v79, 3);
    v82 = (int16x8_t)vqtbl1q_s8((int8x16_t)v74, (int8x16_t)xmmword_1850049F0);
    v83 = vminq_u16((uint16x8_t)v81, (uint16x8_t)v72);
    v84 = (int8x16_t)vminq_u16((uint16x8_t)v74, (uint16x8_t)v82);
    v85 = (int16x8_t)vcgeq_u16(vrhaddq_u16((uint16x8_t)v72, (uint16x8_t)0), v83);
    v86 = vmull_u16(*(uint16x4_t *)v73.i8, *(uint16x4_t *)v84.i8);
    v87 = vmin_u16((uint16x4_t)v79, (uint16x4_t)v72.u64[1]);
    v88 = (uint16x4_t)vextq_s8(v84, v84, 8uLL).u64[0];
    v89 = vmull_u16(v87, v88);
    v90 = vqsubq_u16((uint16x8_t)v82, (uint16x8_t)v84);
    v91 = vqsubq_u16((uint16x8_t)v72, v83);
    v92 = vmull_u16(*(uint16x4_t *)v90.i8, *(uint16x4_t *)v91.i8);
    v93 = vmull_high_u16(v90, v91);
    v94 = vmvnq_s8((int8x16_t)v82);
    v95 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32((uint32x4_t)vbslq_s8((int8x16_t)vzip1q_s16(v85, v85), (int8x16_t)vqaddq_u32(v86, v86), (int8x16_t)vqsubq_u32(v80, vqaddq_u32(v92, v92))), vmull_u16(*(uint16x4_t *)v84.i8, (uint16x4_t)vmvn_s8(*(int8x8_t *)v72.i8))), vmull_u16(*(uint16x4_t *)v73.i8, *(uint16x4_t *)v94.i8)), v30), a14);
    *(uint16x4_t *)v95.i8 = vqshrn_n_u32(vsraq_n_u32(v95, v95, 0x10uLL), 0x10uLL);
    v96 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32((uint32x4_t)vbslq_s8((int8x16_t)vzip2q_s16(v85, v85), (int8x16_t)vqaddq_u32(v89, v89), (int8x16_t)vqsubq_u32(vmull_lane_u16((uint16x4_t)vdup_laneq_s16(v74, 7), (uint16x4_t)v79, 3), vqaddq_u32(v93, v93))), vmull_u16(v88, (uint16x4_t)vmvn_s8((int8x8_t)v72.u64[1]))), vmull_u16(v87, (uint16x4_t)*(_OWORD *)&vextq_s8(v94, v94, 8uLL))), v30), a14);
    v97 = vsraq_n_u32(v96, v96, 0x10uLL);
    *(int16x4_t *)v94.i8 = vdup_lane_s16(*(int16x4_t *)v95.i8, 3);
    v94.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v97, 0x10uLL), 3);
    v98 = (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v95.i8, v97, 0x10uLL), (uint16x8_t)v94);
    v17 = vceqzq_s16(v82);
    v16 = (int8x16_t)vceqzq_s16(v72);
    *(int8x16_t *)&v21->i8[v71] = vbslq_s8(v16, (int8x16_t)v74, vbslq_s8((int8x16_t)v17, v81, v98));
    v22 += v28;
    v18 -= 2;
    if (v18 < 2)
      break;
    v32 = *(unsigned __int16 *)v22;
    v71 += v29;
    if ((unsigned __int16)(v32 - 1) >= 0xFFFEu)
    {
      v19 = (int8x8_t *)((char *)v19 + v71);
      v21 = (int8x8_t *)((char *)v21 + v71);
      goto LABEL_37;
    }
  }
  v19 = (int8x8_t *)((char *)v19 + v29 + v71);
  v21 = (int8x8_t *)((char *)v21 + v29 + v71);
LABEL_40:
  v99 = v18 + a15;
  if (v99)
  {
    if (a7)
      v100 = 0;
    else
      v100 = -1;
    v101.i32[0] = 0;
    v101.i16[2] = 0;
    v101.i16[3] = v100;
    if (a8)
      v102 = 0;
    else
      v102 = -1;
    v103.i32[0] = 0;
    v103.i16[2] = 0;
    v103.i16[3] = v102;
    v104 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v105.i64[0] = 0x800000008000;
    v105.i64[1] = 0x800000008000;
    do
    {
      if (*v22)
      {
        a14.i32[0] = *v22;
        v106 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a14.i8, 0);
        v107 = (int16x4_t)vorr_s8(*v21, vbic_s8(v103, (int8x8_t)vceqz_s16(v106)));
        a14 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(*v19, v101), (uint16x4_t)v106), v104), v105);
        *(uint16x4_t *)a14.i8 = vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a14, (uint32x4_t)a14, 0x10uLL), 0x10uLL);
        v108 = vdup_lane_s16(*(int16x4_t *)a14.i8, 3);
        v109 = vdup_lane_s16(v107, 3);
        v110 = vmin_u16(*(uint16x4_t *)a14.i8, (uint16x4_t)v108);
        v111 = vmin_u16((uint16x4_t)v107, (uint16x4_t)v109);
        *(uint16x4_t *)v17.i8 = vcge_u16(vrhadd_u16((uint16x4_t)v108, 0), v110);
        v112 = vmull_u16(v110, v111);
        v113 = vmull_u16(vqsub_u16((uint16x4_t)v109, v111), vqsub_u16((uint16x4_t)v108, v110));
        v17 = (int16x8_t)vbslq_s8((int8x16_t)vzip1q_s16(v17, v17), (int8x16_t)vqaddq_u32(v112, v112), (int8x16_t)vqsubq_u32(vmull_lane_u16((uint16x4_t)v109, *(uint16x4_t *)a14.i8, 3), vqaddq_u32(v113, v113)));
        v114 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32((uint32x4_t)v17, vmull_u16(v111, (uint16x4_t)vmvn_s8((int8x8_t)v108))), vmull_u16(v110, (uint16x4_t)vmvn_s8((int8x8_t)v109))), v104), v105);
        *(uint16x4_t *)v114.i8 = vqshrn_n_u32(vsraq_n_u32(v114, v114, 0x10uLL), 0x10uLL);
        *(int8x8_t *)a14.i8 = vbsl_s8((int8x8_t)vceqz_s16(v108), (int8x8_t)v107, vbsl_s8((int8x8_t)vceqz_s16(v109), *(int8x8_t *)a14.i8, (int8x8_t)vmin_u16(*(uint16x4_t *)v114.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v114.i8, 3))));
        *v21 = *(int8x8_t *)a14.i8;
      }
      v115 = &v19[a6];
      v22 += a6;
      if ((unint64_t)v115 >= v20)
        v116 = -(uint64_t)a5;
      else
        v116 = 0;
      v19 = &v115[v116];
      v21 += a6;
      --v99;
    }
    while (v99);
  }
  *result = v19;
  *a3 = v20;
  *a2 = v21;
  *a4 = v22;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)22,_rgba16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, int32x4_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  int8x8_t *v17;
  unint64_t v18;
  int8x8_t *v19;
  char *v20;
  unsigned int v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint32x4_t v28;
  int8x16_t v29;
  __int32 v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint32x4_t v44;
  uint32x4_t v45;
  uint16x8_t v46;
  uint32x4_t v47;
  uint16x8_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  uint16x8_t v51;
  uint32x4_t v52;
  uint32x4_t v53;
  uint32x4_t v54;
  uint32x4_t v55;
  uint32x4_t v56;
  int8x16_t *v57;
  int8x16_t *v58;
  int8x16_t *v59;
  int8x16_t *v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  int16x8_t v64;
  uint16x8_t v65;
  int16x8_t v66;
  uint32x4_t v67;
  int16x4_t v68;
  uint32x4_t v69;
  uint32x4_t v70;
  int16x4_t v71;
  int16x8_t v72;
  int8x16_t v73;
  uint16x4_t v74;
  uint32x4_t v75;
  int8x16_t v76;
  int8x16_t v77;
  uint16x4_t v78;
  uint16x4_t v79;
  uint32x4_t v80;
  uint32x4_t v81;
  int8x16_t v82;
  uint32x4_t v83;
  uint32x4_t v84;
  uint32x4_t v85;
  uint64_t v86;
  __int16 v87;
  int8x8_t v88;
  int8x8_t v89;
  __int16 v90;
  uint32x4_t v91;
  int32x4_t v92;
  int16x4_t v93;
  int16x4_t v94;
  uint32x4_t v95;
  int16x4_t v96;
  int16x4_t v97;
  uint16x4_t v98;
  uint16x4_t v99;
  uint32x4_t v100;
  uint32x4_t v101;
  int8x8_t *v102;
  uint64_t v103;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a15 < 2)
    goto LABEL_40;
  if (a7)
    v21 = 0;
  else
    v21 = -1;
  v22.i64[0] = 0xFFFF000000000000;
  v22.i64[1] = 0xFFFF000000000000;
  v23 = vandq_s8((int8x16_t)vdupq_n_s16(v21), v22);
  if (a8)
    v24 = 0;
  else
    v24 = -1;
  v25 = vandq_s8((int8x16_t)vdupq_n_s16(v24), v22);
  v26 = 2 * a6;
  v27 = 16 * a6;
  v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a13.i64[0] = 0x800000008000;
  a13.i64[1] = 0x800000008000;
  v29.i64[0] = -1;
  v29.i64[1] = -1;
  while (1)
  {
    v30 = *(unsigned __int16 *)v20;
    if (!*(_WORD *)v20)
    {
      v57 = (int8x16_t *)&v20[v16];
      v58 = (int8x16_t *)v20;
      do
        v59 = v58++;
      while (v58 <= v57 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v59)) & 0x80) != 0);
      do
      {
        v60 = v59;
        v59 = (int8x16_t *)((char *)v59 + 4);
      }
      while (v59 <= v57 && !v60->i32[0]);
      if (v60 < v57)
      {
        while (!v60->i8[0])
        {
          v60 = (int8x16_t *)((char *)v60 + 1);
          if (v60 >= v57)
          {
            v60 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      v61 = (char *)v60 - v20;
      v62 = ((char *)v60 - v20) * a6;
      v17 += v62;
      v19 += v62;
      v20 += v62;
      v16 -= v61;
      goto LABEL_37;
    }
    if (v30 != 0xFFFF)
      break;
    v31 = (int8x16_t *)&v20[v16];
    v32 = (int8x16_t *)v20;
    do
      v33 = v32++;
    while (v32 <= v31 && (vminvq_u8((uint8x16_t)vceqq_s8(*v33, v29)) & 0x80) != 0);
    do
    {
      v34 = v33;
      v33 = (int8x16_t *)((char *)v33 + 4);
    }
    while (v33 <= v31 && v34->i32[0] == -1);
    if (v34 < v31)
    {
      while (v34->u8[0] == 255)
      {
        v34 = (int8x16_t *)((char *)v34 + 1);
        if (v34 >= v31)
        {
          v34 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    v35 = 0;
    v36 = (char *)v34 - v20;
    v37 = (char *)v34 - v20;
    do
    {
      v38 = vorrq_s8(*(int8x16_t *)&v17->i8[v35], v23);
      v39 = vorrq_s8(*(int8x16_t *)&v19->i8[v35], v25);
      v40 = (int16x8_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_1850049F0);
      v41 = (int16x8_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1850049F0);
      v42 = vminq_u16((uint16x8_t)v38, (uint16x8_t)v40);
      v43 = vminq_u16((uint16x8_t)v39, (uint16x8_t)v41);
      v44 = vmull_lane_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v38.i8, 3);
      v44.i32[3] = 0;
      v45 = vmull_high_laneq_u16(v43, (uint16x8_t)v38, 7);
      v46 = (uint16x8_t)vabdq_u32(vmull_lane_u16(*(uint16x4_t *)v42.i8, *(uint16x4_t *)v39.i8, 3), v44);
      v45.i32[3] = 0;
      v47 = vabdq_u32(vmull_high_laneq_u16(v42, (uint16x8_t)v39, 7), v45);
      v48 = (uint16x8_t)vmvnq_s8((int8x16_t)v40);
      v49 = vmull_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v48.i8);
      v50 = vqaddq_u32(v47, vmull_high_u16(v43, v48));
      v51 = (uint16x8_t)vmvnq_s8((int8x16_t)v41);
      v52 = vmull_u16(*(uint16x4_t *)v42.i8, *(uint16x4_t *)v51.i8);
      v53 = vqaddq_u32(v50, vmull_high_u16(v42, v51));
      v54 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32((uint32x4_t)v46, v49), v52), v28), a13);
      *(uint16x4_t *)v54.i8 = vqshrn_n_u32(vsraq_n_u32(v54, v54, 0x10uLL), 0x10uLL);
      v55 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v53, v28), a13);
      v56 = vsraq_n_u32(v55, v55, 0x10uLL);
      *(int16x4_t *)v46.i8 = vdup_lane_s16(*(int16x4_t *)v54.i8, 3);
      v46.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v56, 0x10uLL), 3);
      v15 = vbslq_s8((int8x16_t)vceqzq_s16(v41), v38, (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v54.i8, v56, 0x10uLL), v46));
      *(int8x16_t *)&v19->i8[v35] = vbslq_s8((int8x16_t)vceqzq_s16(v40), v39, v15);
      v20 += v26;
      v37 -= 2;
      v35 += v27;
    }
    while (v37 > 1);
    v19 = (int8x8_t *)((char *)v19 + v35);
    v17 = (int8x8_t *)((char *)v17 + v35);
    v16 = v16 - v36 + v37;
LABEL_37:
    if (v16 <= 1)
      goto LABEL_40;
  }
  v63 = 0;
  while (1)
  {
    v15.i32[0] = v30;
    v64 = (int16x8_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_1850049E0);
    v65 = (uint16x8_t)vorrq_s8(*(int8x16_t *)&v17->i8[v63], v23);
    v66 = (int16x8_t)vorrq_s8(vbicq_s8(v25, (int8x16_t)vceqzq_s16(v64)), *(int8x16_t *)&v19->i8[v63]);
    v67 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v65.i8, *(uint16x4_t *)v64.i8), v28), a13);
    v68 = (int16x4_t)vqshrn_n_u32(vsraq_n_u32(v67, v67, 0x10uLL), 0x10uLL);
    v69 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16(v65, (uint16x8_t)v64), v28), a13);
    v70 = vsraq_n_u32(v69, v69, 0x10uLL);
    v71 = (int16x4_t)vqshrn_n_u32(v70, 0x10uLL);
    *(int16x4_t *)v64.i8 = vdup_lane_s16(v68, 3);
    v72 = (int16x8_t)vqtbl1q_s8((int8x16_t)v66, (int8x16_t)xmmword_1850049F0);
    v73 = (int8x16_t)vminq_u16((uint16x8_t)v66, (uint16x8_t)v72);
    v74 = vmin_u16((uint16x4_t)v68, *(uint16x4_t *)v64.i8);
    v75 = vmull_lane_u16(*(uint16x4_t *)v73.i8, (uint16x4_t)v68, 3);
    v76 = (int8x16_t)vqshrn_high_n_u32((uint16x4_t)v68, v70, 0x10uLL);
    v64.i64[1] = vdupq_lane_s16(v71, 3).u64[0];
    v77 = (int8x16_t)vdupq_laneq_s16(v66, 7);
    v78 = vmin_u16((uint16x4_t)v71, (uint16x4_t)v64.u64[1]);
    v79 = (uint16x4_t)vextq_s8(v73, v73, 8uLL).u64[0];
    v75.i32[3] = 0;
    v80 = vmull_high_lane_u16((uint16x8_t)v73, (uint16x4_t)v71, 3);
    v80.i32[3] = 0;
    v81 = vqaddq_u32(vabdq_u32(vmull_lane_u16(v74, *(uint16x4_t *)v66.i8, 3), v75), vmull_u16(*(uint16x4_t *)v73.i8, (uint16x4_t)vmvn_s8(*(int8x8_t *)v64.i8)));
    v82 = vmvnq_s8((int8x16_t)v72);
    v83 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(v81, vmull_u16(v74, *(uint16x4_t *)v82.i8)), v28), a13);
    *(uint16x4_t *)v83.i8 = vqshrn_n_u32(vsraq_n_u32(v83, v83, 0x10uLL), 0x10uLL);
    v84 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vabdq_u32(vmull_u16(v78, (uint16x4_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL)), v80), vmull_u16(v79, (uint16x4_t)vmvn_s8((int8x8_t)v64.u64[1]))), vmull_u16(v78, (uint16x4_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL))), v28), a13);
    v85 = vsraq_n_u32(v84, v84, 0x10uLL);
    *(int16x4_t *)v82.i8 = vdup_lane_s16(*(int16x4_t *)v83.i8, 3);
    v82.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v85, 0x10uLL), 3);
    v15 = (int8x16_t)vceqzq_s16(v64);
    *(int8x16_t *)&v19->i8[v63] = vbslq_s8(v15, (int8x16_t)v66, vbslq_s8((int8x16_t)vceqzq_s16(v72), v76, (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v83.i8, v85, 0x10uLL), (uint16x8_t)v82)));
    v20 += v26;
    v16 -= 2;
    if (v16 < 2)
      break;
    v30 = *(unsigned __int16 *)v20;
    v63 += v27;
    if ((unsigned __int16)(v30 - 1) >= 0xFFFEu)
    {
      v17 = (int8x8_t *)((char *)v17 + v63);
      v19 = (int8x8_t *)((char *)v19 + v63);
      goto LABEL_37;
    }
  }
  v17 = (int8x8_t *)((char *)v17 + v27 + v63);
  v19 = (int8x8_t *)((char *)v19 + v27 + v63);
LABEL_40:
  v86 = v16 + a14;
  if (v86)
  {
    if (a7)
      v87 = 0;
    else
      v87 = -1;
    v88.i32[0] = 0;
    v88.i16[2] = 0;
    v88.i16[3] = v87;
    v89.i32[0] = 0;
    v89.i16[2] = 0;
    if (a8)
      v90 = 0;
    else
      v90 = -1;
    v89.i16[3] = v90;
    v91 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v92.i64[0] = 0x800000008000;
    v92.i64[1] = 0x800000008000;
    do
    {
      if (*v20)
      {
        a13.i32[0] = *v20;
        v93 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a13.i8, 0);
        v94 = (int16x4_t)vorr_s8(*v19, vbic_s8(v89, (int8x8_t)vceqz_s16(v93)));
        v95 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(*v17, v88), (uint16x4_t)v93), v91), v92);
        *(uint16x4_t *)v95.i8 = vqshrn_n_u32(vsraq_n_u32(v95, v95, 0x10uLL), 0x10uLL);
        v96 = vdup_lane_s16(*(int16x4_t *)v95.i8, 3);
        v97 = vdup_lane_s16(v94, 3);
        v98 = vmin_u16(*(uint16x4_t *)v95.i8, (uint16x4_t)v96);
        v99 = vmin_u16((uint16x4_t)v94, (uint16x4_t)v97);
        v100 = vmull_lane_u16(v99, *(uint16x4_t *)v95.i8, 3);
        v100.i32[3] = 0;
        v101 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vabdq_u32(vmull_lane_u16(v98, (uint16x4_t)v94, 3), v100), vmull_u16(v99, (uint16x4_t)vmvn_s8((int8x8_t)v96))), vmull_u16(v98, (uint16x4_t)vmvn_s8((int8x8_t)v97))), v91), v92);
        *(uint16x4_t *)v101.i8 = vqshrn_n_u32(vsraq_n_u32(v101, v101, 0x10uLL), 0x10uLL);
        *(int8x8_t *)a13.i8 = vbsl_s8((int8x8_t)vceqz_s16(v96), (int8x8_t)v94, vbsl_s8((int8x8_t)vceqz_s16(v97), *(int8x8_t *)v95.i8, (int8x8_t)vmin_u16(*(uint16x4_t *)v101.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v101.i8, 3))));
        *v19 = *(int8x8_t *)a13.i8;
      }
      v102 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v102 >= v18)
        v103 = -(uint64_t)a5;
      else
        v103 = 0;
      v17 = &v102[v103];
      v19 += a6;
      --v86;
    }
    while (v86);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

int8x8_t **VEC::template_mark_pixelmask_row<(CGCompositeOperation)23,_rgba16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, char **a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, int32x4_t a13, uint64_t a14, unint64_t a15)
{
  int8x16_t v15;
  unint64_t v16;
  int8x8_t *v17;
  unint64_t v18;
  int8x8_t *v19;
  char *v20;
  unsigned int v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint32x4_t v28;
  int32x4_t v29;
  int8x16_t v30;
  __int32 v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int16x8_t v41;
  int16x8_t v42;
  uint16x8_t v43;
  int8x16_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  int8x16_t v47;
  uint16x8_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  uint32x4_t v51;
  uint32x4_t v52;
  uint16x8_t v53;
  int8x16_t v54;
  int8x16_t *v55;
  int8x16_t *v56;
  int8x16_t *v57;
  int8x16_t *v58;
  int64_t v59;
  int64_t v60;
  uint64_t v61;
  int16x8_t v62;
  uint16x8_t v63;
  int8x16_t v64;
  uint32x4_t v65;
  uint32x4_t v66;
  uint32x4_t v67;
  uint32x4_t v68;
  uint32x4_t v69;
  int16x8_t v70;
  uint16x4_t v71;
  int8x16_t v72;
  int16x8_t v73;
  int8x16_t v74;
  uint16x8_t v75;
  uint16x8_t v76;
  int8x16_t v77;
  int8x16_t v78;
  uint32x4_t v79;
  uint32x4_t v80;
  uint16x8_t v81;
  int8x16_t v82;
  int8x16_t v83;
  uint64_t v84;
  __int16 v85;
  int8x8_t v86;
  int8x8_t v87;
  __int16 v88;
  uint32x4_t v89;
  int32x4_t v90;
  int16x4_t v91;
  int16x4_t v92;
  int16x4_t v93;
  int16x4_t v94;
  int8x8_t v95;
  uint16x4_t v96;
  uint16x4_t v97;
  uint32x4_t v98;
  int8x8_t *v99;
  uint64_t v100;

  v16 = a15;
  v17 = *result;
  v18 = *a3;
  v19 = *a2;
  v20 = *a4;
  if (a15 < 2)
    goto LABEL_40;
  if (a7)
    v21 = 0;
  else
    v21 = -1;
  v22.i64[0] = 0xFFFF000000000000;
  v22.i64[1] = 0xFFFF000000000000;
  v23 = vandq_s8((int8x16_t)vdupq_n_s16(v21), v22);
  if (a8)
    v24 = 0;
  else
    v24 = -1;
  v25 = vandq_s8((int8x16_t)vdupq_n_s16(v24), v22);
  v26 = 2 * a6;
  v27 = 16 * a6;
  v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
  a13.i64[0] = 0xFFFFFFFFFFFFLL;
  a13.i64[1] = 0xFFFFFFFFFFFFLL;
  v29.i64[0] = 0x800000008000;
  v29.i64[1] = 0x800000008000;
  v30.i64[0] = -1;
  v30.i64[1] = -1;
  while (1)
  {
    v31 = *(unsigned __int16 *)v20;
    if (!*(_WORD *)v20)
    {
      v55 = (int8x16_t *)&v20[v16];
      v56 = (int8x16_t *)v20;
      do
        v57 = v56++;
      while (v56 <= v55 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v57)) & 0x80) != 0);
      do
      {
        v58 = v57;
        v57 = (int8x16_t *)((char *)v57 + 4);
      }
      while (v57 <= v55 && !v58->i32[0]);
      if (v58 < v55)
      {
        while (!v58->i8[0])
        {
          v58 = (int8x16_t *)((char *)v58 + 1);
          if (v58 >= v55)
          {
            v58 = (int8x16_t *)&v20[v16];
            break;
          }
        }
      }
      v59 = (char *)v58 - v20;
      v60 = ((char *)v58 - v20) * a6;
      v17 += v60;
      v19 += v60;
      v20 += v60;
      v16 -= v59;
      goto LABEL_37;
    }
    if (v31 != 0xFFFF)
      break;
    v32 = (int8x16_t *)&v20[v16];
    v33 = (int8x16_t *)v20;
    do
      v34 = v33++;
    while (v33 <= v32 && (vminvq_u8((uint8x16_t)vceqq_s8(*v34, v30)) & 0x80) != 0);
    do
    {
      v35 = v34;
      v34 = (int8x16_t *)((char *)v34 + 4);
    }
    while (v34 <= v32 && v35->i32[0] == -1);
    if (v35 < v32)
    {
      while (v35->u8[0] == 255)
      {
        v35 = (int8x16_t *)((char *)v35 + 1);
        if (v35 >= v32)
        {
          v35 = (int8x16_t *)&v20[v16];
          break;
        }
      }
    }
    v36 = 0;
    v37 = (char *)v35 - v20;
    v38 = (char *)v35 - v20;
    do
    {
      v39 = vorrq_s8(*(int8x16_t *)&v17->i8[v36], v23);
      v40 = vorrq_s8(*(int8x16_t *)&v19->i8[v36], v25);
      v41 = (int16x8_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1850049F0);
      v42 = (int16x8_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1850049F0);
      v43 = vminq_u16((uint16x8_t)v39, (uint16x8_t)v41);
      v44 = (int8x16_t)vminq_u16((uint16x8_t)v40, (uint16x8_t)v42);
      v45 = (uint16x8_t)vmvnq_s8(v44);
      v46 = (uint16x8_t)vandq_s8(v44, (int8x16_t)a13);
      v47 = (int8x16_t)vcgtq_u16(v46, v45);
      v48 = vabdq_u16(v45, v46);
      v49 = vmull_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v48.i8);
      v50 = vmull_high_u16(v43, v48);
      v51 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v49, v28), v29);
      v52 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v50, v28), v29);
      v53 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v51, v51, 0x10uLL), 0x10uLL), vsraq_n_u32(v52, v52, 0x10uLL), 0x10uLL);
      v54 = vbslq_s8(v47, (int8x16_t)vqsubq_u16((uint16x8_t)v44, v53), (int8x16_t)vqaddq_u16((uint16x8_t)v44, v53));
      v15 = (int8x16_t)vceqzq_s16(v41);
      *(int8x16_t *)&v19->i8[v36] = vbslq_s8(v15, v40, vbslq_s8((int8x16_t)vceqzq_s16(v42), v39, (int8x16_t)vminq_u16((uint16x8_t)v54, (uint16x8_t)vqtbl1q_s8(v54, (int8x16_t)xmmword_1850049F0))));
      v20 += v26;
      v38 -= 2;
      v36 += v27;
    }
    while (v38 > 1);
    v19 = (int8x8_t *)((char *)v19 + v36);
    v17 = (int8x8_t *)((char *)v17 + v36);
    v16 = v16 - v37 + v38;
LABEL_37:
    if (v16 <= 1)
      goto LABEL_40;
  }
  v61 = 0;
  while (1)
  {
    v15.i32[0] = v31;
    v62 = (int16x8_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_1850049E0);
    v63 = (uint16x8_t)vorrq_s8(*(int8x16_t *)&v17->i8[v61], v23);
    v64 = vorrq_s8(vbicq_s8(v25, (int8x16_t)vceqzq_s16(v62)), *(int8x16_t *)&v19->i8[v61]);
    v65 = vmull_u16(*(uint16x4_t *)v63.i8, *(uint16x4_t *)v62.i8);
    v66 = vmull_high_u16(v63, (uint16x8_t)v62);
    v67 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v65, v28), v29);
    *(uint16x4_t *)v67.i8 = vqshrn_n_u32(vsraq_n_u32(v67, v67, 0x10uLL), 0x10uLL);
    v68 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v66, v28), v29);
    v69 = vsraq_n_u32(v68, v68, 0x10uLL);
    *(uint16x4_t *)v65.i8 = vqshrn_n_u32(v69, 0x10uLL);
    *(int16x4_t *)v70.i8 = vdup_lane_s16(*(int16x4_t *)v67.i8, 3);
    v71 = vmin_u16(*(uint16x4_t *)v67.i8, *(uint16x4_t *)v70.i8);
    v72 = (int8x16_t)vqshrn_high_n_u32(*(uint16x4_t *)v67.i8, v69, 0x10uLL);
    v70.u64[1] = (unint64_t)vdup_lane_s16(*(int16x4_t *)v65.i8, 3);
    v73 = (int16x8_t)vqtbl1q_s8(v64, (int8x16_t)xmmword_1850049F0);
    v74 = (int8x16_t)vminq_u16((uint16x8_t)v64, (uint16x8_t)v73);
    v75 = (uint16x8_t)vmvnq_s8(v74);
    v76 = (uint16x8_t)vandq_s8(v74, (int8x16_t)a13);
    v77 = (int8x16_t)vcgtq_u16(v76, v75);
    v78 = (int8x16_t)vabdq_u16(v75, v76);
    v79 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(v71, *(uint16x4_t *)v78.i8), v28), v29);
    v80 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(vmin_u16(*(uint16x4_t *)v65.i8, (uint16x4_t)v70.u64[1]), (uint16x4_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL)), v28), v29);
    v81 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v79, v79, 0x10uLL), 0x10uLL), vsraq_n_u32(v80, v80, 0x10uLL), 0x10uLL);
    v82 = vbslq_s8(v77, (int8x16_t)vqsubq_u16((uint16x8_t)v74, v81), (int8x16_t)vqaddq_u16((uint16x8_t)v74, v81));
    v83 = vbslq_s8((int8x16_t)vceqzq_s16(v73), v72, (int8x16_t)vminq_u16((uint16x8_t)v82, (uint16x8_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_1850049F0)));
    v15 = (int8x16_t)vceqzq_s16(v70);
    *(int8x16_t *)&v19->i8[v61] = vbslq_s8(v15, v64, v83);
    v20 += v26;
    v16 -= 2;
    if (v16 < 2)
      break;
    v31 = *(unsigned __int16 *)v20;
    v61 += v27;
    if ((unsigned __int16)(v31 - 1) >= 0xFFFEu)
    {
      v17 = (int8x8_t *)((char *)v17 + v61);
      v19 = (int8x8_t *)((char *)v19 + v61);
      goto LABEL_37;
    }
  }
  v17 = (int8x8_t *)((char *)v17 + v27 + v61);
  v19 = (int8x8_t *)((char *)v19 + v27 + v61);
LABEL_40:
  v84 = v16 + a14;
  if (v84)
  {
    if (a7)
      v85 = 0;
    else
      v85 = -1;
    v86.i32[0] = 0;
    v86.i16[2] = 0;
    v86.i16[3] = v85;
    v87.i32[0] = 0;
    v87.i16[2] = 0;
    if (a8)
      v88 = 0;
    else
      v88 = -1;
    v87.i16[3] = v88;
    v89 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v90.i64[0] = 0x800000008000;
    v90.i64[1] = 0x800000008000;
    do
    {
      if (*v20)
      {
        a13.i32[0] = *v20;
        v91 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)a13.i8, 0);
        v92 = (int16x4_t)vorr_s8(*v19, vbic_s8(v87, (int8x8_t)vceqz_s16(v91)));
        a13 = vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(*v17, v86), (uint16x4_t)v91), v89), v90);
        *(uint16x4_t *)a13.i8 = vqshrn_n_u32(vsraq_n_u32((uint32x4_t)a13, (uint32x4_t)a13, 0x10uLL), 0x10uLL);
        v93 = vdup_lane_s16(*(int16x4_t *)a13.i8, 3);
        v94 = vdup_lane_s16(v92, 3);
        v95 = (int8x8_t)vmin_u16((uint16x4_t)v92, (uint16x4_t)v94);
        v96 = (uint16x4_t)vmvn_s8(v95);
        v97 = (uint16x4_t)v95;
        v97.i16[3] = 0;
        v98 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(vmin_u16(*(uint16x4_t *)a13.i8, (uint16x4_t)v93), vabd_u16(v96, v97)), v89), v90);
        *(uint16x4_t *)v98.i8 = vqshrn_n_u32(vsraq_n_u32(v98, v98, 0x10uLL), 0x10uLL);
        *(int8x8_t *)v98.i8 = vbsl_s8((int8x8_t)vcgt_u16(v97, v96), (int8x8_t)vqsub_u16((uint16x4_t)v95, *(uint16x4_t *)v98.i8), (int8x8_t)vqadd_u16((uint16x4_t)v95, *(uint16x4_t *)v98.i8));
        *(int8x8_t *)a13.i8 = vbsl_s8((int8x8_t)vceqz_s16(v93), (int8x8_t)v92, vbsl_s8((int8x8_t)vceqz_s16(v94), *(int8x8_t *)a13.i8, (int8x8_t)vmin_u16(*(uint16x4_t *)v98.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v98.i8, 3))));
        *v19 = *(int8x8_t *)a13.i8;
      }
      v99 = &v17[a6];
      v20 += a6;
      if ((unint64_t)v99 >= v18)
        v100 = -(uint64_t)a5;
      else
        v100 = 0;
      v17 = &v99[v100];
      v19 += a6;
      --v84;
    }
    while (v84);
  }
  *result = v17;
  *a3 = v18;
  *a2 = v19;
  *a4 = v20;
  return result;
}

uint64_t *VEC::template_mark_pixelshape_row<(CGCompositeOperation)0,_rgba16_t>(uint64_t *result, _QWORD **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t i;
  unint64_t v15;
  uint64_t v16;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    do
    {
      *(_OWORD *)&v12[v13] = 0uLL;
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (_QWORD *)((char *)v12 + v13 * 8);
    v10 += v13 * 8;
  }
  for (i = v9 + a8; i; --i)
  {
    *v12 = 0;
    v15 = v10 + 8 * a5;
    if (v15 >= v11)
      v16 = -(uint64_t)a4;
    else
      v16 = 0;
    v10 = v15 + 8 * v16;
    v12 += a5;
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

_QWORD **VEC::template_mark_pixelshape_row<(CGCompositeOperation)1,_rgba16_t>(_QWORD **result, _QWORD **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t i;
  _QWORD *v15;
  uint64_t v16;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    do
    {
      *(_OWORD *)&v12[v13] = *(_OWORD *)&v10[v13];
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (_QWORD *)((char *)v12 + v13 * 8);
    v10 = (_QWORD *)((char *)v10 + v13 * 8);
  }
  for (i = v9 + a8; i; --i)
  {
    *v12 = *v10;
    v15 = &v10[a5];
    if ((unint64_t)v15 >= v11)
      v16 = -(uint64_t)a4;
    else
      v16 = 0;
    v10 = &v15[v16];
    v12 += a5;
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

uint16x4_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)2,_rgba16_t>(uint16x4_t **result, uint16x4_t **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  uint16x4_t *v10;
  unint64_t v11;
  uint16x4_t *v12;
  uint64_t v13;
  uint32x4_t v14;
  int32x4_t v15;
  int8x16_t v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint32x4_t v19;
  uint32x4_t v20;
  uint64_t v21;
  uint32x4_t v22;
  int32x4_t v23;
  uint32x4_t v24;
  uint16x4_t *v25;
  uint64_t v26;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    v14 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v15.i64[0] = 0x800000008000;
    v15.i64[1] = 0x800000008000;
    do
    {
      v16 = *(int8x16_t *)v10[v13].i8;
      v17 = *(uint16x8_t *)v12[v13].i8;
      v18 = (uint16x8_t)vbicq_s8(v16, (int8x16_t)vceqzq_s16((int16x8_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_1850049F0)));
      v19 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v17.i8, *(uint16x4_t *)v16.i8, 3), v14), v15);
      v20 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v17, (uint16x8_t)v16, 7), v14), v15);
      *(uint16x8_t *)v12[v13].i8 = vqaddq_u16(v18, vqsubq_u16(v17, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v19, v19, 0x10uLL), 0x10uLL), vsraq_n_u32(v20, v20, 0x10uLL), 0x10uLL)));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (uint16x4_t *)((char *)v12 + v13 * 8);
    v10 = (uint16x4_t *)((char *)v10 + v13 * 8);
  }
  v21 = v9 + a8;
  if (v21)
  {
    v22 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v23.i64[0] = 0x800000008000;
    v23.i64[1] = 0x800000008000;
    do
    {
      v24 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*v12, *v10, 3), v22), v23);
      *v12 = vqadd_u16((uint16x4_t)vbic_s8((int8x8_t)*v10, (int8x8_t)vceqz_s16(vdup_lane_s16((int16x4_t)*v10, 3))), vqsub_u16(*v12, vqshrn_n_u32(vsraq_n_u32(v24, v24, 0x10uLL), 0x10uLL)));
      v25 = &v10[a5];
      if ((unint64_t)v25 >= v11)
        v26 = -(uint64_t)a4;
      else
        v26 = 0;
      v10 = &v25[v26];
      v12 += a5;
      --v21;
    }
    while (v21);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)3,_rgba16_t>(int8x8_t **result, uint16x4_t **a2, unint64_t *a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  uint16x4_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  uint32x4_t v17;
  int32x4_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint32x4_t v21;
  uint32x4_t v22;
  uint32x4_t v23;
  uint32x4_t v24;
  uint64_t v25;
  int8x8_t v26;
  __int16 v27;
  uint32x4_t v28;
  int32x4_t v29;
  uint32x4_t v30;
  int8x8_t *v31;
  uint64_t v32;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    v17 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v18.i64[0] = 0x800000008000;
    v18.i64[1] = 0x800000008000;
    do
    {
      v19 = *(uint16x8_t *)v12[v13].i8;
      v20 = (uint16x8_t)vorrq_s8(*(int8x16_t *)v10[v13].i8, v16);
      v21 = vmull_lane_u16(*(uint16x4_t *)v20.i8, *(uint16x4_t *)v19.i8, 3);
      v22 = vmull_high_laneq_u16(v20, v19, 7);
      v23 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v21, v17), v18);
      v24 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v22, v17), v18);
      *(uint16x8_t *)v12[v13].i8 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v23, v23, 0x10uLL), 0x10uLL), vsraq_n_u32(v24, v24, 0x10uLL), 0x10uLL);
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (uint16x4_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v25 = v9 + a8;
  if (v25)
  {
    v26.i32[0] = 0;
    v26.i16[2] = 0;
    if (a6)
      v27 = 0;
    else
      v27 = -1;
    v26.i16[3] = v27;
    v28 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v29.i64[0] = 0x800000008000;
    v29.i64[1] = 0x800000008000;
    do
    {
      v30 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16((uint16x4_t)vorr_s8(*v10, v26), *v12, 3), v28), v29);
      *v12 = vqshrn_n_u32(vsraq_n_u32(v30, v30, 0x10uLL), 0x10uLL);
      v31 = &v10[a5];
      if ((unint64_t)v31 >= v11)
        v32 = -(uint64_t)a4;
      else
        v32 = 0;
      v10 = &v31[v32];
      v12 += a5;
      --v25;
    }
    while (v25);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)4,_rgba16_t>(int8x8_t **result, uint16x4_t **a2, unint64_t *a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  uint16x4_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  uint32x4_t v17;
  int32x4_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint32x4_t v21;
  uint32x4_t v22;
  uint64_t v23;
  int8x8_t v24;
  __int16 v25;
  uint32x4_t v26;
  int32x4_t v27;
  uint16x4_t v28;
  uint32x4_t v29;
  int8x8_t *v30;
  uint64_t v31;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    v17 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v18.i64[0] = 0x800000008000;
    v18.i64[1] = 0x800000008000;
    do
    {
      v19 = *(uint16x8_t *)v12[v13].i8;
      v20 = (uint16x8_t)vorrq_s8(*(int8x16_t *)v10[v13].i8, v16);
      v21 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v20.i8, *(uint16x4_t *)v19.i8, 3), v17), v18);
      v22 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v20, v19, 7), v17), v18);
      *(uint16x8_t *)v12[v13].i8 = vqsubq_u16(v20, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v21, v21, 0x10uLL), 0x10uLL), vsraq_n_u32(v22, v22, 0x10uLL), 0x10uLL));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (uint16x4_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v23 = v9 + a8;
  if (v23)
  {
    v24.i32[0] = 0;
    v24.i16[2] = 0;
    if (a6)
      v25 = 0;
    else
      v25 = -1;
    v24.i16[3] = v25;
    v26 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v27.i64[0] = 0x800000008000;
    v27.i64[1] = 0x800000008000;
    do
    {
      v28 = (uint16x4_t)vorr_s8(*v10, v24);
      v29 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(v28, *v12, 3), v26), v27);
      *v12 = vqsub_u16(v28, vqshrn_n_u32(vsraq_n_u32(v29, v29, 0x10uLL), 0x10uLL));
      v30 = &v10[a5];
      if ((unint64_t)v30 >= v11)
        v31 = -(uint64_t)a4;
      else
        v31 = 0;
      v10 = &v30[v31];
      v12 += a5;
      --v23;
    }
    while (v23);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

uint16x4_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)5,_rgba16_t>(uint16x4_t **result, uint16x4_t **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  uint16x4_t *v10;
  unint64_t v11;
  uint16x4_t *v12;
  uint64_t v13;
  uint32x4_t v14;
  int32x4_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint32x4_t v18;
  uint32x4_t v19;
  uint16x8_t v20;
  uint32x4_t v21;
  uint32x4_t v22;
  uint32x4_t v23;
  uint32x4_t v24;
  uint64_t v25;
  uint32x4_t v26;
  int32x4_t v27;
  uint32x4_t v28;
  uint32x4_t v29;
  uint16x4_t *v30;
  uint64_t v31;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    v14 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v15.i64[0] = 0x800000008000;
    v15.i64[1] = 0x800000008000;
    do
    {
      v16 = *(uint16x8_t *)v10[v13].i8;
      v17 = *(uint16x8_t *)v12[v13].i8;
      v18 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v17.i8, *(uint16x4_t *)v16.i8, 3), v14), v15);
      v19 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v17, v16, 7), v14), v15);
      v20 = vqsubq_u16(v17, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v18, v18, 0x10uLL), 0x10uLL), vsraq_n_u32(v19, v19, 0x10uLL), 0x10uLL));
      v21 = vmull_lane_u16(*(uint16x4_t *)v16.i8, *(uint16x4_t *)v17.i8, 3);
      v22 = vmull_high_laneq_u16(v16, v17, 7);
      v23 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v21, v14), v15);
      v24 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v22, v14), v15);
      *(uint16x8_t *)v12[v13].i8 = vqaddq_u16(v20, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v23, v23, 0x10uLL), 0x10uLL), vsraq_n_u32(v24, v24, 0x10uLL), 0x10uLL));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (uint16x4_t *)((char *)v12 + v13 * 8);
    v10 = (uint16x4_t *)((char *)v10 + v13 * 8);
  }
  v25 = v9 + a8;
  if (v25)
  {
    v26 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v27.i64[0] = 0x800000008000;
    v27.i64[1] = 0x800000008000;
    do
    {
      v28 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*v12, *v10, 3), v26), v27);
      v29 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*v10, *v12, 3), v26), v27);
      *v12 = vqadd_u16(vqsub_u16(*v12, vqshrn_n_u32(vsraq_n_u32(v28, v28, 0x10uLL), 0x10uLL)), vqshrn_n_u32(vsraq_n_u32(v29, v29, 0x10uLL), 0x10uLL));
      v30 = &v10[a5];
      if ((unint64_t)v30 >= v11)
        v31 = -(uint64_t)a4;
      else
        v31 = 0;
      v10 = &v30[v31];
      v12 += a5;
      --v25;
    }
    while (v25);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)6,_rgba16_t>(int8x8_t **result, int16x4_t **a2, unint64_t *a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int16x4_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  uint32x4_t v17;
  int32x4_t v18;
  int8x16_t v19;
  uint16x8_t v20;
  int16x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint32x4_t v24;
  uint32x4_t v25;
  uint32x4_t v26;
  uint32x4_t v27;
  uint64_t v28;
  int8x8_t v29;
  __int16 v30;
  uint32x4_t v31;
  int32x4_t v32;
  int16x4_t v33;
  uint32x4_t v34;
  int8x8_t *v35;
  uint64_t v36;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    v17 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v18.i64[0] = 0x800000008000;
    v18.i64[1] = 0x800000008000;
    do
    {
      v19 = *(int8x16_t *)v12[v13].i8;
      v20 = (uint16x8_t)vorrq_s8(*(int8x16_t *)v10[v13].i8, v16);
      v21 = (int16x8_t)vqtbl1q_s8(v19, (int8x16_t)xmmword_1850049F0);
      v22 = (uint16x8_t)vbicq_s8(v19, (int8x16_t)vceqzq_s16(v21));
      v23 = (uint16x8_t)vmvnq_s8((int8x16_t)v21);
      v24 = vmull_u16(*(uint16x4_t *)v20.i8, *(uint16x4_t *)v23.i8);
      v25 = vmull_high_u16(v20, v23);
      v26 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v24, v17), v18);
      v27 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v25, v17), v18);
      *(uint16x8_t *)v12[v13].i8 = vqaddq_u16(v22, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v26, v26, 0x10uLL), 0x10uLL), vsraq_n_u32(v27, v27, 0x10uLL), 0x10uLL));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int16x4_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v28 = v9 + a8;
  if (v28)
  {
    v29.i32[0] = 0;
    v29.i16[2] = 0;
    if (a6)
      v30 = 0;
    else
      v30 = -1;
    v29.i16[3] = v30;
    v31 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v32.i64[0] = 0x800000008000;
    v32.i64[1] = 0x800000008000;
    do
    {
      v33 = vdup_lane_s16(*v12, 3);
      v34 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)vorr_s8(*v10, v29), (uint16x4_t)vmvn_s8((int8x8_t)v33)), v31), v32);
      *v12 = (int16x4_t)vqadd_u16((uint16x4_t)vbic_s8((int8x8_t)*v12, (int8x8_t)vceqz_s16(v33)), vqshrn_n_u32(vsraq_n_u32(v34, v34, 0x10uLL), 0x10uLL));
      v35 = &v10[a5];
      if ((unint64_t)v35 >= v11)
        v36 = -(uint64_t)a4;
      else
        v36 = 0;
      v10 = &v35[v36];
      v12 += a5;
      --v28;
    }
    while (v28);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

uint16x4_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)7,_rgba16_t>(uint16x4_t **result, uint16x4_t **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  uint16x4_t *v10;
  unint64_t v11;
  uint16x4_t *v12;
  uint64_t v13;
  uint32x4_t v14;
  int32x4_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint32x4_t v18;
  uint32x4_t v19;
  uint32x4_t v20;
  uint32x4_t v21;
  uint64_t v22;
  uint32x4_t v23;
  int32x4_t v24;
  uint32x4_t v25;
  uint16x4_t *v26;
  uint64_t v27;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    v14 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v15.i64[0] = 0x800000008000;
    v15.i64[1] = 0x800000008000;
    do
    {
      v16 = *(uint16x8_t *)v10[v13].i8;
      v17 = *(uint16x8_t *)v12[v13].i8;
      v18 = vmull_lane_u16(*(uint16x4_t *)v17.i8, *(uint16x4_t *)v16.i8, 3);
      v19 = vmull_high_laneq_u16(v17, v16, 7);
      v20 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v18, v14), v15);
      v21 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v19, v14), v15);
      *(uint16x8_t *)v12[v13].i8 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v20, v20, 0x10uLL), 0x10uLL), vsraq_n_u32(v21, v21, 0x10uLL), 0x10uLL);
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (uint16x4_t *)((char *)v12 + v13 * 8);
    v10 = (uint16x4_t *)((char *)v10 + v13 * 8);
  }
  v22 = v9 + a8;
  if (v22)
  {
    v23 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v24.i64[0] = 0x800000008000;
    v24.i64[1] = 0x800000008000;
    do
    {
      v25 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*v12, *v10, 3), v23), v24);
      *v12 = vqshrn_n_u32(vsraq_n_u32(v25, v25, 0x10uLL), 0x10uLL);
      v26 = &v10[a5];
      if ((unint64_t)v26 >= v11)
        v27 = -(uint64_t)a4;
      else
        v27 = 0;
      v10 = &v26[v27];
      v12 += a5;
      --v22;
    }
    while (v22);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

uint16x4_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)8,_rgba16_t>(uint16x4_t **result, uint16x4_t **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  uint16x4_t *v10;
  unint64_t v11;
  uint16x4_t *v12;
  uint64_t v13;
  uint32x4_t v14;
  int32x4_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint32x4_t v18;
  uint32x4_t v19;
  uint64_t v20;
  uint32x4_t v21;
  int32x4_t v22;
  uint32x4_t v23;
  uint16x4_t *v24;
  uint64_t v25;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    v14 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v15.i64[0] = 0x800000008000;
    v15.i64[1] = 0x800000008000;
    do
    {
      v16 = *(uint16x8_t *)v10[v13].i8;
      v17 = *(uint16x8_t *)v12[v13].i8;
      v18 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v17.i8, *(uint16x4_t *)v16.i8, 3), v14), v15);
      v19 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v17, v16, 7), v14), v15);
      *(uint16x8_t *)v12[v13].i8 = vqsubq_u16(v17, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v18, v18, 0x10uLL), 0x10uLL), vsraq_n_u32(v19, v19, 0x10uLL), 0x10uLL));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (uint16x4_t *)((char *)v12 + v13 * 8);
    v10 = (uint16x4_t *)((char *)v10 + v13 * 8);
  }
  v20 = v9 + a8;
  if (v20)
  {
    v21 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v22.i64[0] = 0x800000008000;
    v22.i64[1] = 0x800000008000;
    do
    {
      v23 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*v12, *v10, 3), v21), v22);
      *v12 = vqsub_u16(*v12, vqshrn_n_u32(vsraq_n_u32(v23, v23, 0x10uLL), 0x10uLL));
      v24 = &v10[a5];
      if ((unint64_t)v24 >= v11)
        v25 = -(uint64_t)a4;
      else
        v25 = 0;
      v10 = &v24[v25];
      v12 += a5;
      --v20;
    }
    while (v20);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

uint16x4_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)9,_rgba16_t>(uint16x4_t **result, uint16x4_t **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  uint16x4_t *v10;
  unint64_t v11;
  uint16x4_t *v12;
  uint64_t v13;
  uint32x4_t v14;
  int32x4_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint32x4_t v18;
  uint32x4_t v19;
  uint16x8_t v20;
  uint32x4_t v21;
  uint32x4_t v22;
  uint32x4_t v23;
  uint32x4_t v24;
  uint64_t v25;
  uint32x4_t v26;
  int32x4_t v27;
  uint32x4_t v28;
  uint32x4_t v29;
  uint16x4_t *v30;
  uint64_t v31;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    v14 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v15.i64[0] = 0x800000008000;
    v15.i64[1] = 0x800000008000;
    do
    {
      v16 = *(uint16x8_t *)v10[v13].i8;
      v17 = *(uint16x8_t *)v12[v13].i8;
      v18 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*(uint16x4_t *)v16.i8, *(uint16x4_t *)v17.i8, 3), v14), v15);
      v19 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_laneq_u16(v16, v17, 7), v14), v15);
      v20 = vqsubq_u16(v16, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v18, v18, 0x10uLL), 0x10uLL), vsraq_n_u32(v19, v19, 0x10uLL), 0x10uLL));
      v21 = vmull_lane_u16(*(uint16x4_t *)v17.i8, *(uint16x4_t *)v16.i8, 3);
      v22 = vmull_high_laneq_u16(v17, v16, 7);
      v23 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v21, v14), v15);
      v24 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v22, v14), v15);
      *(uint16x8_t *)v12[v13].i8 = vqaddq_u16(v20, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v23, v23, 0x10uLL), 0x10uLL), vsraq_n_u32(v24, v24, 0x10uLL), 0x10uLL));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (uint16x4_t *)((char *)v12 + v13 * 8);
    v10 = (uint16x4_t *)((char *)v10 + v13 * 8);
  }
  v25 = v9 + a8;
  if (v25)
  {
    v26 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v27.i64[0] = 0x800000008000;
    v27.i64[1] = 0x800000008000;
    do
    {
      v28 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*v10, *v12, 3), v26), v27);
      v29 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_lane_u16(*v12, *v10, 3), v26), v27);
      *v12 = vqadd_u16(vqsub_u16(*v10, vqshrn_n_u32(vsraq_n_u32(v28, v28, 0x10uLL), 0x10uLL)), vqshrn_n_u32(vsraq_n_u32(v29, v29, 0x10uLL), 0x10uLL));
      v30 = &v10[a5];
      if ((unint64_t)v30 >= v11)
        v31 = -(uint64_t)a4;
      else
        v31 = 0;
      v10 = &v30[v31];
      v12 += a5;
      --v25;
    }
    while (v25);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

uint16x4_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)10,_rgba16_t>(uint16x4_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  uint16x4_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  uint32x4_t v14;
  int32x4_t v15;
  int8x16_t v16;
  int8x16_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint32x4_t v20;
  uint32x4_t v21;
  uint32x4_t v22;
  uint32x4_t v23;
  uint64_t v24;
  uint32x4_t v25;
  int32x4_t v26;
  uint32x4_t v27;
  uint16x4_t *v28;
  uint64_t v29;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    v14 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v15.i64[0] = 0x800000008000;
    v15.i64[1] = 0x800000008000;
    do
    {
      v16 = *(int8x16_t *)v10[v13].i8;
      v17 = *(int8x16_t *)v12[v13].i8;
      v18 = (uint16x8_t)vmvnq_s8(v17);
      v19 = (uint16x8_t)vmvnq_s8(v16);
      v20 = vqaddq_u32(vmull_lane_u16(*(uint16x4_t *)v16.i8, *(uint16x4_t *)v18.i8, 3), vmull_lane_u16(*(uint16x4_t *)v17.i8, *(uint16x4_t *)v19.i8, 3));
      v21 = vqaddq_u32(vmull_high_laneq_u16((uint16x8_t)v16, v18, 7), vmull_high_laneq_u16((uint16x8_t)v17, v19, 7));
      v22 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v20, v14), v15);
      v23 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v21, v14), v15);
      *(uint16x8_t *)v12[v13].i8 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v22, v22, 0x10uLL), 0x10uLL), vsraq_n_u32(v23, v23, 0x10uLL), 0x10uLL);
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (uint16x4_t *)((char *)v10 + v13 * 8);
  }
  v24 = v9 + a8;
  if (v24)
  {
    v25 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v26.i64[0] = 0x800000008000;
    v26.i64[1] = 0x800000008000;
    do
    {
      v27 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vmull_lane_u16(*v10, (uint16x4_t)vmvn_s8(*v12), 3), vmull_lane_u16((uint16x4_t)*v12, (uint16x4_t)vmvn_s8((int8x8_t)*v10), 3)), v25), v26);
      *v12 = (int8x8_t)vqshrn_n_u32(vsraq_n_u32(v27, v27, 0x10uLL), 0x10uLL);
      v28 = &v10[a5];
      if ((unint64_t)v28 >= v11)
        v29 = -(uint64_t)a4;
      else
        v29 = 0;
      v10 = &v28[v29];
      v12 += a5;
      --v24;
    }
    while (v24);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)11,_rgba16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned int v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint64_t v24;
  int8x8_t v25;
  __int16 v26;
  int8x8_t v27;
  __int16 v28;
  int16x4_t v29;
  int16x4_t v30;
  uint16x4_t v31;
  uint16x4_t v32;
  int8x8_t *v33;
  uint64_t v34;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15 = (int8x16_t)vdupq_n_s16(v14);
    v16.i64[0] = 0xFFFF000000000000;
    v16.i64[1] = 0xFFFF000000000000;
    if (a7)
      v17 = 0;
    else
      v17 = -1;
    v18 = vandq_s8(v15, v16);
    v19 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v16);
    do
    {
      v20 = vorrq_s8(*(int8x16_t *)v10[v13].i8, v18);
      v21 = vorrq_s8(*(int8x16_t *)v12[v13].i8, v19);
      v22 = (uint16x8_t)vqtbl1q_s8(v20, (int8x16_t)xmmword_1850049F0);
      v23 = (uint16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1850049F0);
      *(uint16x8_t *)v12[v13].i8 = vqsubq_u16(vqaddq_u16(v23, v22), vqaddq_u16(vqsubq_u16(v22, (uint16x8_t)v20), vqsubq_u16(v23, (uint16x8_t)v21)));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v24 = v9 + a8;
  if (v24)
  {
    v25.i32[0] = 0;
    v25.i16[2] = 0;
    if (a6)
      v26 = 0;
    else
      v26 = -1;
    v27.i32[0] = 0;
    v27.i16[2] = 0;
    v27.i16[3] = v26;
    if (a7)
      v28 = 0;
    else
      v28 = -1;
    v25.i16[3] = v28;
    do
    {
      v29 = (int16x4_t)vorr_s8(*v10, v27);
      v30 = (int16x4_t)vorr_s8(*v12, v25);
      v31 = (uint16x4_t)vdup_lane_s16(v29, 3);
      v32 = (uint16x4_t)vdup_lane_s16(v30, 3);
      *v12 = (int8x8_t)vqsub_u16(vqadd_u16(v32, v31), vqadd_u16(vqsub_u16(v31, (uint16x4_t)v29), vqsub_u16(v32, (uint16x4_t)v30)));
      v33 = &v10[a5];
      if ((unint64_t)v33 >= v11)
        v34 = -(uint64_t)a4;
      else
        v34 = 0;
      v10 = &v33[v34];
      v12 += a5;
      --v24;
    }
    while (v24);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)12,_rgba16_t>(int8x8_t **result, uint16x4_t **a2, unint64_t *a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  uint16x4_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  uint64_t v17;
  int8x8_t v18;
  __int16 v19;
  int8x8_t *v20;
  uint64_t v21;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    do
    {
      *(uint16x8_t *)v12[v13].i8 = vqaddq_u16(*(uint16x8_t *)v12[v13].i8, (uint16x8_t)vorrq_s8(*(int8x16_t *)v10[v13].i8, v16));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (uint16x4_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v17 = v9 + a8;
  if (v17)
  {
    v18.i32[0] = 0;
    v18.i16[2] = 0;
    if (a6)
      v19 = 0;
    else
      v19 = -1;
    v18.i16[3] = v19;
    do
    {
      *v12 = vqadd_u16(*v12, (uint16x4_t)vorr_s8(*v10, v18));
      v20 = &v10[a5];
      if ((unint64_t)v20 >= v11)
        v21 = -(uint64_t)a4;
      else
        v21 = 0;
      v10 = &v20[v21];
      v12 += a5;
      --v17;
    }
    while (v17);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)13,_rgba16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned int v17;
  int8x16_t v18;
  uint32x4_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int8x16_t v25;
  uint16x8_t v26;
  uint32x4_t v27;
  uint32x4_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint32x4_t v32;
  uint32x4_t v33;
  uint32x4_t v34;
  uint32x4_t v35;
  uint64_t v36;
  __int16 v37;
  int8x8_t v38;
  int8x8_t v39;
  __int16 v40;
  uint32x4_t v41;
  int32x4_t v42;
  int16x4_t v43;
  int16x4_t v44;
  int16x4_t v45;
  int16x4_t v46;
  int8x8_t v47;
  uint16x4_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  int8x8_t *v51;
  uint64_t v52;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7)
      v17 = 0;
    else
      v17 = -1;
    v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    v19 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v20.i64[0] = 0x800000008000;
    v20.i64[1] = 0x800000008000;
    do
    {
      v21 = vorrq_s8(*(int8x16_t *)v10[v13].i8, v16);
      v22 = vorrq_s8(*(int8x16_t *)v12[v13].i8, v18);
      v23 = (int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1850049F0);
      v24 = (int16x8_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_1850049F0);
      v25 = (int8x16_t)vceqzq_s16(v24);
      v26 = (uint16x8_t)vbicq_s8(v22, v25);
      v27 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v21.i8, *(uint16x4_t *)v26.i8), v19), v20);
      v28 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16((uint16x8_t)v21, v26), v19), v20);
      v29 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v27, v27, 0x10uLL), 0x10uLL), vsraq_n_u32(v28, v28, 0x10uLL), 0x10uLL);
      v30 = (uint16x8_t)vmvnq_s8((int8x16_t)v24);
      v31 = (uint16x8_t)vmvnq_s8((int8x16_t)v23);
      v32 = vqaddq_u32(vmull_u16(*(uint16x4_t *)v21.i8, *(uint16x4_t *)v30.i8), vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v31.i8));
      v33 = vqaddq_u32(vmull_high_u16((uint16x8_t)v21, v30), vmull_high_u16(v26, v31));
      v34 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v32, v19), v20);
      v35 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v33, v19), v20);
      *(int8x16_t *)v12[v13].i8 = vbslq_s8((int8x16_t)vceqzq_s16(v23), v22, vbslq_s8(v25, v21, (int8x16_t)vqaddq_u16(v29, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v34, v34, 0x10uLL), 0x10uLL), vsraq_n_u32(v35, v35, 0x10uLL), 0x10uLL))));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v36 = v9 + a8;
  if (v36)
  {
    if (a6)
      v37 = 0;
    else
      v37 = -1;
    v38.i32[0] = 0;
    v38.i16[2] = 0;
    v38.i16[3] = v37;
    v39.i32[0] = 0;
    v39.i16[2] = 0;
    if (a7)
      v40 = 0;
    else
      v40 = -1;
    v39.i16[3] = v40;
    v41 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v42.i64[0] = 0x800000008000;
    v42.i64[1] = 0x800000008000;
    do
    {
      v43 = (int16x4_t)vorr_s8(*v10, v38);
      v44 = vdup_lane_s16(v43, 3);
      v45 = (int16x4_t)vorr_s8(*v12, v39);
      v46 = vdup_lane_s16(v45, 3);
      v47 = (int8x8_t)vceqz_s16(v46);
      v48 = (uint16x4_t)vbic_s8((int8x8_t)v45, v47);
      v49 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)v43, v48), v41), v42);
      v50 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vmull_u16((uint16x4_t)v43, (uint16x4_t)vmvn_s8((int8x8_t)v46)), vmull_u16(v48, (uint16x4_t)vmvn_s8((int8x8_t)v44))), v41), v42);
      *v12 = vbsl_s8((int8x8_t)vceqz_s16(v44), (int8x8_t)v45, vbsl_s8(v47, (int8x8_t)v43, (int8x8_t)vqadd_u16(vqshrn_n_u32(vsraq_n_u32(v49, v49, 0x10uLL), 0x10uLL), vqshrn_n_u32(vsraq_n_u32(v50, v50, 0x10uLL), 0x10uLL))));
      v51 = &v10[a5];
      if ((unint64_t)v51 >= v11)
        v52 = -(uint64_t)a4;
      else
        v52 = 0;
      v10 = &v51[v52];
      v12 += a5;
      --v36;
    }
    while (v36);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)14,_rgba16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned int v17;
  int8x16_t v18;
  uint32x4_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  uint16x8_t v23;
  uint32x4_t v24;
  uint32x4_t v25;
  uint64_t v26;
  __int16 v27;
  int8x8_t v28;
  int8x8_t v29;
  __int16 v30;
  uint32x4_t v31;
  int32x4_t v32;
  int16x4_t v33;
  int16x4_t v34;
  uint16x4_t v35;
  uint32x4_t v36;
  int8x8_t *v37;
  uint64_t v38;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7)
      v17 = 0;
    else
      v17 = -1;
    v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    v19 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v20.i64[0] = 0x800000008000;
    v20.i64[1] = 0x800000008000;
    do
    {
      v21 = vorrq_s8(*(int8x16_t *)v10[v13].i8, v16);
      v22 = vorrq_s8(*(int8x16_t *)v12[v13].i8, v18);
      v23 = (uint16x8_t)vbicq_s8(v22, (int8x16_t)vceqzq_s16((int16x8_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_1850049F0)));
      v24 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(*(uint16x4_t *)v21.i8, *(uint16x4_t *)v23.i8), v19), v20);
      v25 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_high_u16((uint16x8_t)v21, v23), v19), v20);
      *(int8x16_t *)v12[v13].i8 = vbslq_s8((int8x16_t)vceqzq_s16((int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1850049F0)), v22, (int8x16_t)vqaddq_u16(vqsubq_u16((uint16x8_t)v21, vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v24, v24, 0x10uLL), 0x10uLL), vsraq_n_u32(v25, v25, 0x10uLL), 0x10uLL)), v23));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v26 = v9 + a8;
  if (v26)
  {
    if (a6)
      v27 = 0;
    else
      v27 = -1;
    v28.i32[0] = 0;
    v28.i16[2] = 0;
    v28.i16[3] = v27;
    v29.i32[0] = 0;
    v29.i16[2] = 0;
    if (a7)
      v30 = 0;
    else
      v30 = -1;
    v29.i16[3] = v30;
    v31 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v32.i64[0] = 0x800000008000;
    v32.i64[1] = 0x800000008000;
    do
    {
      v33 = (int16x4_t)vorr_s8(*v10, v28);
      v34 = (int16x4_t)vorr_s8(*v12, v29);
      v35 = (uint16x4_t)vbic_s8((int8x8_t)v34, (int8x8_t)vdup_lane_s16(vceqz_s16(v34), 3));
      v36 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16((uint16x4_t)v33, v35), v31), v32);
      *v12 = vbsl_s8((int8x8_t)vdup_lane_s16(vceqz_s16(v33), 3), (int8x8_t)v34, (int8x8_t)vqadd_u16(vqsub_u16((uint16x4_t)v33, vqshrn_n_u32(vsraq_n_u32(v36, v36, 0x10uLL), 0x10uLL)), v35));
      v37 = &v10[a5];
      if ((unint64_t)v37 >= v11)
        v38 = -(uint64_t)a4;
      else
        v38 = 0;
      v10 = &v37[v38];
      v12 += a5;
      --v26;
    }
    while (v26);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)15,_rgba16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned int v17;
  int8x16_t v18;
  uint32x4_t v19;
  int32x4_t v20;
  int16x8_t v21;
  int8x16_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  int16x8_t v29;
  int8x16_t v30;
  int8x16_t v31;
  uint32x4_t v32;
  uint32x4_t v33;
  uint64_t v34;
  __int16 v35;
  int8x8_t v36;
  __int16 v37;
  int8x8_t v38;
  uint32x4_t v39;
  int32x4_t v40;
  int16x4_t v41;
  int16x4_t v42;
  int16x4_t v43;
  int16x4_t v44;
  int16x4_t v45;
  int16x4_t v46;
  int8x16_t v47;
  uint32x4_t v48;
  int8x8_t *v49;
  uint64_t v50;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7)
      v17 = 0;
    else
      v17 = -1;
    v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    v19 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v20.i64[0] = 0x800000008000;
    v20.i64[1] = 0x800000008000;
    do
    {
      v21 = (int16x8_t)vorrq_s8(*(int8x16_t *)v10[v13].i8, v16);
      v22 = vorrq_s8(*(int8x16_t *)v12[v13].i8, v18);
      v23 = (int16x8_t)vqtbl1q_s8((int8x16_t)v21, (int8x16_t)xmmword_1850049F0);
      v24 = (int16x8_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_1850049F0);
      v25 = (int16x8_t)vminq_u16((uint16x8_t)v21, (uint16x8_t)v23);
      v26 = (int16x8_t)vminq_u16((uint16x8_t)v22, (uint16x8_t)v24);
      v27 = (uint16x8_t)vsubq_s16(v23, v25);
      v28 = (uint16x8_t)vsubq_s16(v24, v26);
      v29 = (int16x8_t)vcgtq_u16(vrhaddq_u16((uint16x8_t)v24, (uint16x8_t)0), (uint16x8_t)v26);
      v30 = (int8x16_t)vqaddq_u32(vmull_u16(*(uint16x4_t *)v27.i8, *(uint16x4_t *)v26.i8), vmull_u16(*(uint16x4_t *)v28.i8, *(uint16x4_t *)v25.i8));
      v31 = (int8x16_t)vqaddq_u32(vmull_high_u16(v27, (uint16x8_t)v26), vmull_high_u16(v28, (uint16x8_t)v25));
      v32 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v29.i8), v30, (int8x16_t)vqsubq_u32(vmull_lane_u16((uint16x4_t)vdup_lane_s16(*(int16x4_t *)v21.i8, 3), *(uint16x4_t *)v22.i8, 3), (uint32x4_t)v30)), v19), v20);
      v33 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v29), v31, (int8x16_t)vqsubq_u32(vmull_laneq_u16((uint16x4_t)vdup_laneq_s16(v21, 7), (uint16x8_t)v22, 7), (uint32x4_t)v31)), v19), v20);
      *(int8x16_t *)v12[v13].i8 = vbslq_s8((int8x16_t)vceqzq_s16(v23), v22, vbslq_s8((int8x16_t)vceqzq_s16(v24), (int8x16_t)v21, (int8x16_t)vsubq_s16(vaddq_s16(v26, v25), (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v32, v32, 0x10uLL), 0x10uLL), vsraq_n_u32(v33, v33, 0x10uLL), 0x10uLL))));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v34 = v9 + a8;
  if (v34)
  {
    if (a6)
      v35 = 0;
    else
      v35 = -1;
    v36.i32[0] = 0;
    v36.i16[2] = 0;
    v36.i16[3] = v35;
    if (a7)
      v37 = 0;
    else
      v37 = -1;
    v38.i32[0] = 0;
    v38.i16[2] = 0;
    v38.i16[3] = v37;
    v39 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v40.i64[0] = 0x800000008000;
    v40.i64[1] = 0x800000008000;
    do
    {
      v41 = (int16x4_t)vorr_s8(*v10, v36);
      v42 = (int16x4_t)vorr_s8(*v12, v38);
      v43 = vdup_lane_s16(v41, 3);
      v44 = vdup_lane_s16(v42, 3);
      v45 = (int16x4_t)vmin_u16((uint16x4_t)v41, (uint16x4_t)v43);
      v46 = (int16x4_t)vmin_u16((uint16x4_t)v42, (uint16x4_t)v44);
      v47 = (int8x16_t)vqaddq_u32(vmull_u16((uint16x4_t)vsub_s16(v43, v45), (uint16x4_t)v46), vmull_u16((uint16x4_t)vsub_s16(v44, v46), (uint16x4_t)v45));
      v48 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32((uint32x4_t)vbslq_s8((int8x16_t)vmovl_s16((int16x4_t)vcgt_u16(vrhadd_u16((uint16x4_t)v44, 0), (uint16x4_t)v46)), v47, (int8x16_t)vqsubq_u32(vmull_lane_u16((uint16x4_t)v43, (uint16x4_t)v42, 3), (uint32x4_t)v47)), v39), v40);
      *v12 = vbsl_s8((int8x8_t)vceqz_s16(v43), (int8x8_t)v42, vbsl_s8((int8x8_t)vceqz_s16(v44), (int8x8_t)v41, (int8x8_t)vsub_s16(vadd_s16(v46, v45), (int16x4_t)vqshrn_n_u32(vsraq_n_u32(v48, v48, 0x10uLL), 0x10uLL))));
      v49 = &v10[a5];
      if ((unint64_t)v49 >= v11)
        v50 = -(uint64_t)a4;
      else
        v50 = 0;
      v10 = &v49[v50];
      v12 += a5;
      --v34;
    }
    while (v34);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)16,_rgba16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned int v17;
  int8x16_t v18;
  uint32x4_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int16x8_t v23;
  int16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint32x4_t v27;
  uint16x8_t v28;
  uint32x4_t v29;
  uint16x8_t v30;
  uint32x4_t v31;
  uint32x4_t v32;
  uint32x4_t v33;
  uint64_t v34;
  __int16 v35;
  int8x8_t v36;
  int8x8_t v37;
  __int16 v38;
  uint32x4_t v39;
  int32x4_t v40;
  int16x4_t v41;
  int16x4_t v42;
  int16x4_t v43;
  int16x4_t v44;
  uint16x4_t v45;
  uint16x4_t v46;
  uint32x4_t v47;
  int8x8_t *v48;
  uint64_t v49;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7)
      v17 = 0;
    else
      v17 = -1;
    v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    v19 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v20.i64[0] = 0x800000008000;
    v20.i64[1] = 0x800000008000;
    do
    {
      v21 = vorrq_s8(*(int8x16_t *)v10[v13].i8, v16);
      v22 = vorrq_s8(*(int8x16_t *)v12[v13].i8, v18);
      v23 = (int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1850049F0);
      v24 = (int16x8_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_1850049F0);
      v25 = vminq_u16((uint16x8_t)v21, (uint16x8_t)v23);
      v26 = vminq_u16((uint16x8_t)v22, (uint16x8_t)v24);
      v27 = vmull_lane_u16(*(uint16x4_t *)v25.i8, *(uint16x4_t *)v22.i8, 3);
      v28 = (uint16x8_t)vmvnq_s8((int8x16_t)v24);
      v29 = vmull_u16(*(uint16x4_t *)v25.i8, *(uint16x4_t *)v28.i8);
      v30 = (uint16x8_t)vmvnq_s8((int8x16_t)v23);
      v31 = vqaddq_u32(vqaddq_u32(vminq_u32(vmull_high_laneq_u16(v26, (uint16x8_t)v21, 7), vmull_high_laneq_u16(v25, (uint16x8_t)v22, 7)), vmull_high_u16(v25, v28)), vmull_high_u16(v26, v30));
      v32 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vminq_u32(vmull_lane_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v21.i8, 3), v27), v29), vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v30.i8)), v19), v20);
      v33 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v31, v19), v20);
      *(int8x16_t *)v12[v13].i8 = vbslq_s8((int8x16_t)vceqzq_s16(v23), v22, vbslq_s8((int8x16_t)vceqzq_s16(v24), v21, (int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v32, v32, 0x10uLL), 0x10uLL), vsraq_n_u32(v33, v33, 0x10uLL), 0x10uLL)));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v34 = v9 + a8;
  if (v34)
  {
    if (a6)
      v35 = 0;
    else
      v35 = -1;
    v36.i32[0] = 0;
    v36.i16[2] = 0;
    v36.i16[3] = v35;
    v37.i32[0] = 0;
    v37.i16[2] = 0;
    if (a7)
      v38 = 0;
    else
      v38 = -1;
    v37.i16[3] = v38;
    v39 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v40.i64[0] = 0x800000008000;
    v40.i64[1] = 0x800000008000;
    do
    {
      v41 = (int16x4_t)vorr_s8(*v10, v36);
      v42 = (int16x4_t)vorr_s8(*v12, v37);
      v43 = vdup_lane_s16(v41, 3);
      v44 = vdup_lane_s16(v42, 3);
      v45 = vmin_u16((uint16x4_t)v41, (uint16x4_t)v43);
      v46 = vmin_u16((uint16x4_t)v42, (uint16x4_t)v44);
      v47 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vminq_u32(vmull_lane_u16(v45, (uint16x4_t)v42, 3), vmull_lane_u16(v46, (uint16x4_t)v41, 3)), vmull_u16(v45, (uint16x4_t)vmvn_s8((int8x8_t)v44))), vmull_u16(v46, (uint16x4_t)vmvn_s8((int8x8_t)v43))), v39), v40);
      *v12 = vbsl_s8((int8x8_t)vceqz_s16(v43), (int8x8_t)v42, vbsl_s8((int8x8_t)vceqz_s16(v44), (int8x8_t)v41, (int8x8_t)vqshrn_n_u32(vsraq_n_u32(v47, v47, 0x10uLL), 0x10uLL)));
      v48 = &v10[a5];
      if ((unint64_t)v48 >= v11)
        v49 = -(uint64_t)a4;
      else
        v49 = 0;
      v10 = &v48[v49];
      v12 += a5;
      --v34;
    }
    while (v34);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)17,_rgba16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned int v17;
  int8x16_t v18;
  uint32x4_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int16x8_t v23;
  int16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint32x4_t v27;
  uint16x8_t v28;
  uint32x4_t v29;
  uint16x8_t v30;
  uint32x4_t v31;
  uint32x4_t v32;
  uint32x4_t v33;
  uint64_t v34;
  __int16 v35;
  int8x8_t v36;
  int8x8_t v37;
  __int16 v38;
  uint32x4_t v39;
  int32x4_t v40;
  int16x4_t v41;
  int16x4_t v42;
  int16x4_t v43;
  int16x4_t v44;
  uint16x4_t v45;
  uint16x4_t v46;
  uint32x4_t v47;
  int8x8_t *v48;
  uint64_t v49;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7)
      v17 = 0;
    else
      v17 = -1;
    v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    v19 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v20.i64[0] = 0x800000008000;
    v20.i64[1] = 0x800000008000;
    do
    {
      v21 = vorrq_s8(*(int8x16_t *)v10[v13].i8, v16);
      v22 = vorrq_s8(*(int8x16_t *)v12[v13].i8, v18);
      v23 = (int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1850049F0);
      v24 = (int16x8_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_1850049F0);
      v25 = vminq_u16((uint16x8_t)v21, (uint16x8_t)v23);
      v26 = vminq_u16((uint16x8_t)v22, (uint16x8_t)v24);
      v27 = vmull_lane_u16(*(uint16x4_t *)v25.i8, *(uint16x4_t *)v22.i8, 3);
      v28 = (uint16x8_t)vmvnq_s8((int8x16_t)v24);
      v29 = vmull_u16(*(uint16x4_t *)v25.i8, *(uint16x4_t *)v28.i8);
      v30 = (uint16x8_t)vmvnq_s8((int8x16_t)v23);
      v31 = vqaddq_u32(vqaddq_u32(vmaxq_u32(vmull_high_laneq_u16(v25, (uint16x8_t)v22, 7), vmull_high_laneq_u16(v26, (uint16x8_t)v21, 7)), vmull_high_u16(v25, v28)), vmull_high_u16(v26, v30));
      v32 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vmaxq_u32(v27, vmull_lane_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v21.i8, 3)), v29), vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v30.i8)), v19), v20);
      v33 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v31, v19), v20);
      *(int8x16_t *)v12[v13].i8 = vbslq_s8((int8x16_t)vceqzq_s16(v23), v22, vbslq_s8((int8x16_t)vceqzq_s16(v24), v21, (int8x16_t)vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v32, v32, 0x10uLL), 0x10uLL), vsraq_n_u32(v33, v33, 0x10uLL), 0x10uLL)));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v34 = v9 + a8;
  if (v34)
  {
    if (a6)
      v35 = 0;
    else
      v35 = -1;
    v36.i32[0] = 0;
    v36.i16[2] = 0;
    v36.i16[3] = v35;
    v37.i32[0] = 0;
    v37.i16[2] = 0;
    if (a7)
      v38 = 0;
    else
      v38 = -1;
    v37.i16[3] = v38;
    v39 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v40.i64[0] = 0x800000008000;
    v40.i64[1] = 0x800000008000;
    do
    {
      v41 = (int16x4_t)vorr_s8(*v10, v36);
      v42 = (int16x4_t)vorr_s8(*v12, v37);
      v43 = vdup_lane_s16(v41, 3);
      v44 = vdup_lane_s16(v42, 3);
      v45 = vmin_u16((uint16x4_t)v41, (uint16x4_t)v43);
      v46 = vmin_u16((uint16x4_t)v42, (uint16x4_t)v44);
      v47 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vmaxq_u32(vmull_lane_u16(v45, (uint16x4_t)v42, 3), vmull_lane_u16(v46, (uint16x4_t)v41, 3)), vmull_u16(v45, (uint16x4_t)vmvn_s8((int8x8_t)v44))), vmull_u16(v46, (uint16x4_t)vmvn_s8((int8x8_t)v43))), v39), v40);
      *v12 = vbsl_s8((int8x8_t)vceqz_s16(v43), (int8x8_t)v42, vbsl_s8((int8x8_t)vceqz_s16(v44), (int8x8_t)v41, (int8x8_t)vqshrn_n_u32(vsraq_n_u32(v47, v47, 0x10uLL), 0x10uLL)));
      v48 = &v10[a5];
      if ((unint64_t)v48 >= v11)
        v49 = -(uint64_t)a4;
      else
        v49 = 0;
      v10 = &v48[v49];
      v12 += a5;
      --v34;
    }
    while (v34);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)18,_rgba16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned int v17;
  int8x16_t v18;
  uint32x4_t v19;
  int8x16_t v20;
  int32x4_t v21;
  int16x8_t v22;
  int8x16_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int8x16_t v26;
  int16x8_t v27;
  uint16x8_t v28;
  int16x8_t v29;
  int8x16_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint32x4_t v34;
  uint16x8_t v35;
  uint32x4_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  uint32x4_t v39;
  uint32x4_t v40;
  uint64_t v41;
  __int16 v42;
  int8x8_t v43;
  int8x8_t v44;
  __int16 v45;
  uint32x4_t v46;
  int32x4_t v47;
  int16x4_t v48;
  int16x4_t v49;
  int16x4_t v50;
  int16x4_t v51;
  uint16x4_t v52;
  int16x4_t v53;
  uint32x4_t v54;
  uint32x4_t v55;
  int8x8_t *v56;
  uint64_t v57;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7)
      v17 = 0;
    else
      v17 = -1;
    v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    v19 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v20.i64[0] = 0xFFFFFFFFFFFFLL;
    v20.i64[1] = 0xFFFFFFFFFFFFLL;
    v21.i64[0] = 0x800000008000;
    v21.i64[1] = 0x800000008000;
    do
    {
      v22 = (int16x8_t)vorrq_s8(*(int8x16_t *)v10[v13].i8, v16);
      v23 = vorrq_s8(*(int8x16_t *)v12[v13].i8, v18);
      v24 = (int16x8_t)vqtbl1q_s8((int8x16_t)v22, (int8x16_t)xmmword_1850049F0);
      v25 = (int16x8_t)vqtbl1q_s8(v23, (int8x16_t)xmmword_1850049F0);
      v26 = (int8x16_t)vminq_u16((uint16x8_t)v22, (uint16x8_t)v24);
      v27 = (int16x8_t)vminq_u16((uint16x8_t)v23, (uint16x8_t)v25);
      v28 = (uint16x8_t)vandq_s8(v26, v20);
      v29 = (int16x8_t)vbicq_s8((int8x16_t)vtstq_s16(v27, v27), (int8x16_t)vcgtq_u16((uint16x8_t)v24, v28));
      v30 = (int8x16_t)vmovl_high_s16(v29);
      v31 = (uint16x8_t)vorrq_s8((int8x16_t)vqsubq_u16((uint16x8_t)v24, v28), (int8x16_t)vceqzq_s16(v27));
      v32 = (uint16x8_t)vmvnq_s8((int8x16_t)v24);
      v33 = (uint16x8_t)vqaddq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcvtnq_u32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v27.i8)), vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)vdup_lane_s16(*(int16x4_t *)v22.i8, 3), *(uint16x4_t *)v22.i8, 3))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v31.i8)))), (int8x16_t)vmovl_s16(*(int16x4_t *)v29.i8)), vmull_u16(*(uint16x4_t *)v27.i8, *(uint16x4_t *)v32.i8));
      v34 = vqaddq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcvtnq_u32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_high_u16((uint16x8_t)v27)), vcvtq_f32_u32(vmull_laneq_u16((uint16x4_t)vdup_laneq_s16(v22, 7), (uint16x8_t)v22, 7))), vcvtq_f32_u32(vmovl_high_u16(v31)))), v30), vmull_high_u16((uint16x8_t)v27, v32));
      v35 = (uint16x8_t)vmvnq_s8((int8x16_t)v25);
      v36 = vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v35.i8);
      v37 = vqaddq_u32(v34, vmull_high_u16((uint16x8_t)v26, v35));
      v38 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32((uint32x4_t)v33, v36), v19), v21);
      *(uint16x4_t *)v38.i8 = vqshrn_n_u32(vsraq_n_u32(v38, v38, 0x10uLL), 0x10uLL);
      v39 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v37, v19), v21);
      v40 = vsraq_n_u32(v39, v39, 0x10uLL);
      *(int16x4_t *)v33.i8 = vdup_lane_s16(*(int16x4_t *)v38.i8, 3);
      v33.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v40, 0x10uLL), 3);
      *(int8x16_t *)v12[v13].i8 = vbslq_s8((int8x16_t)vceqzq_s16(v24), v23, vbslq_s8((int8x16_t)vceqzq_s16(v25), (int8x16_t)v22, (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v38.i8, v40, 0x10uLL), v33)));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v41 = v9 + a8;
  if (v41)
  {
    if (a6)
      v42 = 0;
    else
      v42 = -1;
    v43.i32[0] = 0;
    v43.i16[2] = 0;
    v43.i16[3] = v42;
    v44.i32[0] = 0;
    v44.i16[2] = 0;
    if (a7)
      v45 = 0;
    else
      v45 = -1;
    v44.i16[3] = v45;
    v46 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v47.i64[0] = 0x800000008000;
    v47.i64[1] = 0x800000008000;
    do
    {
      v48 = (int16x4_t)vorr_s8(*v10, v43);
      v49 = (int16x4_t)vorr_s8(*v12, v44);
      v50 = vdup_lane_s16(v48, 3);
      v51 = vdup_lane_s16(v49, 3);
      v52 = vmin_u16((uint16x4_t)v48, (uint16x4_t)v50);
      v53 = (int16x4_t)vmin_u16((uint16x4_t)v49, (uint16x4_t)v51);
      v54 = vmull_u16(v52, (uint16x4_t)vmvn_s8((int8x8_t)v51));
      v52.i16[3] = 0;
      v55 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcvtnq_u32_f32(vdivq_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v53)), vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)v50, (uint16x4_t)v48, 3))), vcvtq_f32_u32(vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vqsub_u16((uint16x4_t)v50, v52), (int8x8_t)vceqz_s16(v53)))))), (int8x16_t)vmovl_s16((int16x4_t)vbic_s8((int8x8_t)vtst_s16(v53, v53), (int8x8_t)vcgt_u16((uint16x4_t)v50, v52)))), vmull_u16((uint16x4_t)v53, (uint16x4_t)vmvn_s8((int8x8_t)v50))), v54),
                                       v46),
                          v47);
      *(uint16x4_t *)v55.i8 = vqshrn_n_u32(vsraq_n_u32(v55, v55, 0x10uLL), 0x10uLL);
      *v12 = vbsl_s8((int8x8_t)vceqz_s16(v50), (int8x8_t)v49, vbsl_s8((int8x8_t)vceqz_s16(v51), (int8x8_t)v48, (int8x8_t)vmin_u16(*(uint16x4_t *)v55.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v55.i8, 3))));
      v56 = &v10[a5];
      if ((unint64_t)v56 >= v11)
        v57 = -(uint64_t)a4;
      else
        v57 = 0;
      v10 = &v56[v57];
      v12 += a5;
      --v41;
    }
    while (v41);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)19,_rgba16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned int v17;
  int8x16_t v18;
  float32x4_t v19;
  int16x8_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int16x8_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint16x4_t v29;
  uint16x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint16x8_t v33;
  uint32x4_t v34;
  uint32x4_t v35;
  uint16x8_t v36;
  uint32x4_t v37;
  float32x4_t v38;
  int32x4_t v39;
  uint64_t v40;
  int8x8_t v41;
  __int16 v42;
  int8x8_t v43;
  __int16 v44;
  float32x4_t v45;
  int16x4_t v46;
  int16x4_t v47;
  int16x4_t v48;
  int16x4_t v49;
  uint16x4_t v50;
  uint16x4_t v51;
  float32x4_t v52;
  int16x4_t v53;
  int8x8_t *v54;
  uint64_t v55;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7)
      v17 = 0;
    else
      v17 = -1;
    v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    v19 = (float32x4_t)vdupq_n_s32(0x37800080u);
    do
    {
      v20 = (int16x8_t)vorrq_s8(*(int8x16_t *)v10[v13].i8, v16);
      v21 = vorrq_s8(*(int8x16_t *)v12[v13].i8, v18);
      v22 = (int16x8_t)vqtbl1q_s8((int8x16_t)v20, (int8x16_t)xmmword_1850049F0);
      v23 = (int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1850049F0);
      v24 = vminq_u16((uint16x8_t)v20, (uint16x8_t)v22);
      v25 = vminq_u16((uint16x8_t)v21, (uint16x8_t)v23);
      v26 = vqsubq_u16((uint16x8_t)v23, v25);
      v27 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v26.i8));
      v28 = vcvtq_f32_u32(vmovl_high_u16(v26));
      v29 = (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v20.i8, 3);
      v30 = (uint16x4_t)vdup_laneq_s16(v20, 7);
      v31 = vcvtq_f32_u32(vmovl_high_u16(v24));
      v32 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v24.i8));
      v33 = (uint16x8_t)vmvnq_s8((int8x16_t)v22);
      v34 = vmull_u16(*(uint16x4_t *)v25.i8, *(uint16x4_t *)v33.i8);
      v35 = vmull_high_u16(v25, v33);
      v36 = (uint16x8_t)vmvnq_s8((int8x16_t)v23);
      v37 = vmull_u16(*(uint16x4_t *)v24.i8, *(uint16x4_t *)v36.i8);
      v38 = vaddq_f32(vcvtq_f32_u32(v35), vcvtq_f32_u32(vmull_high_u16(v24, v36)));
      *(int16x4_t *)v35.i8 = vqmovun_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(v34), vcvtq_f32_u32(v37)), vcvtq_f32_u32(vmull_lane_u16(v29, *(uint16x4_t *)v21.i8, 3))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v27, vcvtq_f32_u32(vmull_lane_u16(v29, *(uint16x4_t *)v20.i8, 3))), v32), (int8x16_t)vceqzq_f32(v27))), v19)));
      v39 = vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(v38, vcvtq_f32_u32(vmull_laneq_u16(v30, (uint16x8_t)v21, 7))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v28, vcvtq_f32_u32(vmull_laneq_u16(v30, (uint16x8_t)v20, 7))), v31), (int8x16_t)vceqzq_f32(v28))), v19));
      *(int16x4_t *)v27.f32 = vdup_lane_s16(*(int16x4_t *)v35.i8, 3);
      *(int16x4_t *)&v27.u32[2] = vdup_lane_s16(vqmovun_s32(v39), 3);
      *(int8x16_t *)v12[v13].i8 = vbslq_s8((int8x16_t)vceqzq_s16(v22), v21, vbslq_s8((int8x16_t)vceqzq_s16(v23), (int8x16_t)v20, (int8x16_t)vminq_u16((uint16x8_t)vqmovun_high_s32(*(int16x4_t *)v35.i8, v39), (uint16x8_t)v27)));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v40 = v9 + a8;
  if (v40)
  {
    v41.i32[0] = 0;
    v41.i16[2] = 0;
    if (a6)
      v42 = 0;
    else
      v42 = -1;
    v43.i32[0] = 0;
    v43.i16[2] = 0;
    v43.i16[3] = v42;
    if (a7)
      v44 = 0;
    else
      v44 = -1;
    v41.i16[3] = v44;
    v45 = (float32x4_t)vdupq_n_s32(0x37800080u);
    do
    {
      v46 = (int16x4_t)vorr_s8(*v10, v43);
      v47 = (int16x4_t)vorr_s8(*v12, v41);
      v48 = vdup_lane_s16(v46, 3);
      v49 = vdup_lane_s16(v47, 3);
      v50 = vmin_u16((uint16x4_t)v46, (uint16x4_t)v48);
      v51 = vmin_u16((uint16x4_t)v47, (uint16x4_t)v49);
      v52 = vcvtq_f32_u32(vmovl_u16(vqsub_u16((uint16x4_t)v49, v51)));
      v53 = vqmovun_s32(vcvtnq_s32_f32(vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(vcvtq_f32_u32(vmull_u16(v51, (uint16x4_t)vmvn_s8((int8x8_t)v48))), vcvtq_f32_u32(vmull_u16(v50, (uint16x4_t)vmvn_s8((int8x8_t)v49)))), vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)v48, (uint16x4_t)v47, 3))), (float32x4_t)vbicq_s8((int8x16_t)vdivq_f32(vmulq_f32(v52, vcvtq_f32_u32(vmull_lane_u16((uint16x4_t)v48, (uint16x4_t)v46, 3))), vcvtq_f32_u32(vmovl_u16(v50))), (int8x16_t)vceqzq_f32(v52))), v45)));
      *v12 = vbsl_s8((int8x8_t)vceqz_s16(v48), (int8x8_t)v47, vbsl_s8((int8x8_t)vceqz_s16(v49), (int8x8_t)v46, (int8x8_t)vmin_u16((uint16x4_t)v53, (uint16x4_t)vdup_lane_s16(v53, 3))));
      v54 = &v10[a5];
      if ((unint64_t)v54 >= v11)
        v55 = -(uint64_t)a4;
      else
        v55 = 0;
      v10 = &v54[v55];
      v12 += a5;
      --v40;
    }
    while (v40);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)20,_rgba16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned int v17;
  int8x16_t v18;
  uint32x4_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int16x8_t v23;
  int16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  int16x4_t v27;
  int32x4_t v28;
  uint32x4_t v29;
  uint16x8_t v30;
  uint32x4_t v31;
  uint32x4_t v32;
  uint32x4_t v33;
  uint32x4_t v34;
  uint16x8_t v35;
  uint32x4_t v36;
  uint32x4_t v37;
  uint16x8_t v38;
  uint32x4_t v39;
  uint16x8_t v40;
  uint32x4_t v41;
  uint32x4_t v42;
  uint32x4_t v43;
  uint32x4_t v44;
  uint32x4_t v45;
  uint64_t v46;
  __int16 v47;
  int8x8_t v48;
  int8x8_t v49;
  __int16 v50;
  uint32x4_t v51;
  int32x4_t v52;
  int16x4_t v53;
  int16x4_t v54;
  int16x4_t v55;
  int16x4_t v56;
  uint16x4_t v57;
  uint16x4_t v58;
  uint16x4_t v59;
  uint32x4_t v60;
  uint32x4_t v61;
  uint32x4_t v62;
  int8x8_t *v63;
  uint64_t v64;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7)
      v17 = 0;
    else
      v17 = -1;
    v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    v19 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v20.i64[0] = 0x800000008000;
    v20.i64[1] = 0x800000008000;
    do
    {
      v21 = vorrq_s8(*(int8x16_t *)v10[v13].i8, v16);
      v22 = vorrq_s8(*(int8x16_t *)v12[v13].i8, v18);
      v23 = (int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1850049F0);
      v24 = (int16x8_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_1850049F0);
      v25 = vminq_u16((uint16x8_t)v21, (uint16x8_t)v23);
      v26 = vminq_u16((uint16x8_t)v22, (uint16x8_t)v24);
      v27 = vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v26.i8)), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v24.i8)))));
      v28 = vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmull_high_u16(v26, v26)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL)))));
      v29 = vmull_lane_u16((uint16x4_t)v27, *(uint16x4_t *)v21.i8, 3);
      v30 = vqsubq_u16(v26, (uint16x8_t)vqmovun_high_s32(v27, v28));
      v31 = vmull_u16(*(uint16x4_t *)v30.i8, *(uint16x4_t *)v25.i8);
      v32 = vmull_high_u16(v30, v25);
      v33 = vqaddq_u32(v29, vqaddq_u32(v31, v31));
      v34 = vqaddq_u32(vmull_laneq_u16((uint16x4_t)vqmovun_s32(v28), (uint16x8_t)v21, 7), vqaddq_u32(v32, v32));
      v35 = (uint16x8_t)vmvnq_s8((int8x16_t)v23);
      v36 = vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v35.i8);
      v37 = vmull_high_u16(v26, v35);
      v38 = (uint16x8_t)vqaddq_u32(v33, v36);
      v39 = vqaddq_u32(v34, v37);
      v40 = (uint16x8_t)vmvnq_s8((int8x16_t)v24);
      v41 = vmull_u16(*(uint16x4_t *)v25.i8, *(uint16x4_t *)v40.i8);
      v42 = vqaddq_u32(v39, vmull_high_u16(v25, v40));
      v43 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32((uint32x4_t)v38, v41), v19), v20);
      *(uint16x4_t *)v43.i8 = vqshrn_n_u32(vsraq_n_u32(v43, v43, 0x10uLL), 0x10uLL);
      v44 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v42, v19), v20);
      v45 = vsraq_n_u32(v44, v44, 0x10uLL);
      *(int16x4_t *)v38.i8 = vdup_lane_s16(*(int16x4_t *)v43.i8, 3);
      v38.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v45, 0x10uLL), 3);
      *(int8x16_t *)v12[v13].i8 = vbslq_s8((int8x16_t)vceqzq_s16(v23), v22, vbslq_s8((int8x16_t)vceqzq_s16(v24), v21, (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v43.i8, v45, 0x10uLL), v38)));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v46 = v9 + a8;
  if (v46)
  {
    if (a6)
      v47 = 0;
    else
      v47 = -1;
    v48.i32[0] = 0;
    v48.i16[2] = 0;
    v48.i16[3] = v47;
    v49.i32[0] = 0;
    v49.i16[2] = 0;
    if (a7)
      v50 = 0;
    else
      v50 = -1;
    v49.i16[3] = v50;
    v51 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v52.i64[0] = 0x800000008000;
    v52.i64[1] = 0x800000008000;
    do
    {
      v53 = (int16x4_t)vorr_s8(*v10, v48);
      v54 = (int16x4_t)vorr_s8(*v12, v49);
      v55 = vdup_lane_s16(v53, 3);
      v56 = vdup_lane_s16(v54, 3);
      v57 = vmin_u16((uint16x4_t)v53, (uint16x4_t)v55);
      v58 = vmin_u16((uint16x4_t)v54, (uint16x4_t)v56);
      v59 = (uint16x4_t)vqmovun_s32(vcvtnq_s32_f32(vdivq_f32(vcvtq_f32_u32(vmull_u16(v58, v58)), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v56)))));
      v60 = vmull_lane_u16(v59, (uint16x4_t)v53, 3);
      v61 = vmull_u16(vqsub_u16(v58, v59), v57);
      v62 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vqaddq_u32(v60, vqaddq_u32(v61, v61)), vmull_u16(v58, (uint16x4_t)vmvn_s8((int8x8_t)v55))), vmull_u16(v57, (uint16x4_t)vmvn_s8((int8x8_t)v56))), v51), v52);
      *(uint16x4_t *)v62.i8 = vqshrn_n_u32(vsraq_n_u32(v62, v62, 0x10uLL), 0x10uLL);
      *v12 = vbsl_s8((int8x8_t)vceqz_s16(v55), (int8x8_t)v54, vbsl_s8((int8x8_t)vceqz_s16(v56), (int8x8_t)v53, (int8x8_t)vmin_u16(*(uint16x4_t *)v62.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v62.i8, 3))));
      v63 = &v10[a5];
      if ((unint64_t)v63 >= v11)
        v64 = -(uint64_t)a4;
      else
        v64 = 0;
      v10 = &v63[v64];
      v12 += a5;
      --v46;
    }
    while (v46);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)21,_rgba16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  int16x8_t v9;
  unint64_t v10;
  int8x8_t *v11;
  unint64_t v12;
  int8x8_t *v13;
  uint64_t v14;
  unsigned int v15;
  int8x16_t v16;
  int8x16_t v17;
  unsigned int v18;
  int8x16_t v19;
  uint32x4_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  int16x8_t v28;
  int8x16_t v29;
  uint32x4_t v30;
  uint32x4_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint32x4_t v34;
  uint32x4_t v35;
  uint32x4_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint32x4_t v39;
  uint32x4_t v40;
  uint16x8_t v41;
  uint32x4_t v42;
  uint32x4_t v43;
  uint32x4_t v44;
  uint32x4_t v45;
  uint32x4_t v46;
  uint64_t v47;
  __int16 v48;
  int8x8_t v49;
  __int16 v50;
  int8x8_t v51;
  uint32x4_t v52;
  int32x4_t v53;
  int16x4_t v54;
  int16x4_t v55;
  int16x4_t v56;
  int16x4_t v57;
  uint16x4_t v58;
  uint16x4_t v59;
  uint32x4_t v60;
  uint32x4_t v61;
  uint32x4_t v62;
  int8x8_t *v63;
  uint64_t v64;

  v10 = a9;
  v11 = *result;
  v12 = *a3;
  v13 = *a2;
  if (a9 >= 2)
  {
    v14 = 0;
    if (a6)
      v15 = 0;
    else
      v15 = -1;
    v16.i64[0] = 0xFFFF000000000000;
    v16.i64[1] = 0xFFFF000000000000;
    v17 = vandq_s8((int8x16_t)vdupq_n_s16(v15), v16);
    if (a7)
      v18 = 0;
    else
      v18 = -1;
    v19 = vandq_s8((int8x16_t)vdupq_n_s16(v18), v16);
    v20 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v21.i64[0] = 0x800000008000;
    v21.i64[1] = 0x800000008000;
    do
    {
      v22 = vorrq_s8(*(int8x16_t *)v11[v14].i8, v17);
      v23 = (int16x8_t)vorrq_s8(*(int8x16_t *)v13[v14].i8, v19);
      v24 = (int16x8_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_1850049F0);
      v25 = (int16x8_t)vqtbl1q_s8((int8x16_t)v23, (int8x16_t)xmmword_1850049F0);
      v26 = vminq_u16((uint16x8_t)v22, (uint16x8_t)v24);
      v27 = vminq_u16((uint16x8_t)v23, (uint16x8_t)v25);
      v28 = (int16x8_t)vcgeq_u16(vrhaddq_u16((uint16x8_t)v24, (uint16x8_t)0), v26);
      v29 = (int8x16_t)vzip1q_s16(v28, v28);
      v30 = vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v27.i8);
      v31 = vmull_high_u16(v26, v27);
      v32 = vqsubq_u16((uint16x8_t)v25, v27);
      v33 = vqsubq_u16((uint16x8_t)v24, v26);
      v34 = vmull_u16(*(uint16x4_t *)v32.i8, *(uint16x4_t *)v33.i8);
      v35 = vmull_high_u16(v32, v33);
      v36 = (uint32x4_t)vbslq_s8((int8x16_t)vzip2q_s16(v28, v28), (int8x16_t)vqaddq_u32(v31, v31), (int8x16_t)vqsubq_u32(vmull_laneq_u16((uint16x4_t)vdup_laneq_s16(v23, 7), (uint16x8_t)v22, 7), vqaddq_u32(v35, v35)));
      v37 = (uint16x8_t)vbslq_s8(v29, (int8x16_t)vqaddq_u32(v30, v30), (int8x16_t)vqsubq_u32(vmull_lane_u16((uint16x4_t)vdup_lane_s16(*(int16x4_t *)v23.i8, 3), *(uint16x4_t *)v22.i8, 3), vqaddq_u32(v34, v34)));
      v38 = (uint16x8_t)vmvnq_s8((int8x16_t)v24);
      v39 = vmull_u16(*(uint16x4_t *)v27.i8, *(uint16x4_t *)v38.i8);
      v40 = vqaddq_u32(v36, vmull_high_u16(v27, v38));
      v41 = (uint16x8_t)vmvnq_s8((int8x16_t)v25);
      v42 = vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v41.i8);
      v43 = vqaddq_u32(v40, vmull_high_u16(v26, v41));
      v44 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32((uint32x4_t)v37, v39), v42), v20), v21);
      *(uint16x4_t *)v44.i8 = vqshrn_n_u32(vsraq_n_u32(v44, v44, 0x10uLL), 0x10uLL);
      v45 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v43, v20), v21);
      v46 = vsraq_n_u32(v45, v45, 0x10uLL);
      *(int16x4_t *)v37.i8 = vdup_lane_s16(*(int16x4_t *)v44.i8, 3);
      v9 = (int16x8_t)vqshrn_high_n_u32(*(uint16x4_t *)v44.i8, v46, 0x10uLL);
      v37.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v46, 0x10uLL), 3);
      *(int8x16_t *)v13[v14].i8 = vbslq_s8((int8x16_t)vceqzq_s16(v24), (int8x16_t)v23, vbslq_s8((int8x16_t)vceqzq_s16(v25), v22, (int8x16_t)vminq_u16((uint16x8_t)v9, v37)));
      v10 -= 2;
      v14 += 2 * a5;
    }
    while (v10 > 1);
    v13 = (int8x8_t *)((char *)v13 + v14 * 8);
    v11 = (int8x8_t *)((char *)v11 + v14 * 8);
  }
  v47 = v10 + a8;
  if (v47)
  {
    if (a6)
      v48 = 0;
    else
      v48 = -1;
    v49.i32[0] = 0;
    v49.i16[2] = 0;
    v49.i16[3] = v48;
    if (a7)
      v50 = 0;
    else
      v50 = -1;
    v51.i32[0] = 0;
    v51.i16[2] = 0;
    v51.i16[3] = v50;
    v52 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v53.i64[0] = 0x800000008000;
    v53.i64[1] = 0x800000008000;
    do
    {
      v54 = (int16x4_t)vorr_s8(*v11, v49);
      v55 = (int16x4_t)vorr_s8(*v13, v51);
      v56 = vdup_lane_s16(v54, 3);
      v57 = vdup_lane_s16(v55, 3);
      v58 = vmin_u16((uint16x4_t)v54, (uint16x4_t)v56);
      v59 = vmin_u16((uint16x4_t)v55, (uint16x4_t)v57);
      *(uint16x4_t *)v9.i8 = vcge_u16(vrhadd_u16((uint16x4_t)v56, 0), v58);
      v60 = vmull_u16(v58, v59);
      v61 = vmull_u16(vqsub_u16((uint16x4_t)v57, v59), vqsub_u16((uint16x4_t)v56, v58));
      v9 = (int16x8_t)vbslq_s8((int8x16_t)vzip1q_s16(v9, v9), (int8x16_t)vqaddq_u32(v60, v60), (int8x16_t)vqsubq_u32(vmull_lane_u16((uint16x4_t)v57, (uint16x4_t)v54, 3), vqaddq_u32(v61, v61)));
      v62 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32((uint32x4_t)v9, vmull_u16(v59, (uint16x4_t)vmvn_s8((int8x8_t)v56))), vmull_u16(v58, (uint16x4_t)vmvn_s8((int8x8_t)v57))), v52), v53);
      *(uint16x4_t *)v62.i8 = vqshrn_n_u32(vsraq_n_u32(v62, v62, 0x10uLL), 0x10uLL);
      *v13 = vbsl_s8((int8x8_t)vceqz_s16(v56), (int8x8_t)v55, vbsl_s8((int8x8_t)vceqz_s16(v57), (int8x8_t)v54, (int8x8_t)vmin_u16(*(uint16x4_t *)v62.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v62.i8, 3))));
      v63 = &v11[a5];
      if ((unint64_t)v63 >= v12)
        v64 = -(uint64_t)a4;
      else
        v64 = 0;
      v11 = &v63[v64];
      v13 += a5;
      --v47;
    }
    while (v47);
  }
  *result = v11;
  *a3 = v12;
  *a2 = v13;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)22,_rgba16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned int v17;
  int8x16_t v18;
  uint32x4_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int16x8_t v23;
  int16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint32x4_t v27;
  uint32x4_t v28;
  uint32x4_t v29;
  uint32x4_t v30;
  uint16x8_t v31;
  uint32x4_t v32;
  uint32x4_t v33;
  uint16x8_t v34;
  uint32x4_t v35;
  uint32x4_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  uint32x4_t v39;
  uint64_t v40;
  __int16 v41;
  int8x8_t v42;
  int8x8_t v43;
  __int16 v44;
  uint32x4_t v45;
  int32x4_t v46;
  int16x4_t v47;
  int16x4_t v48;
  int16x4_t v49;
  int16x4_t v50;
  uint16x4_t v51;
  uint16x4_t v52;
  uint32x4_t v53;
  uint32x4_t v54;
  int8x8_t *v55;
  uint64_t v56;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7)
      v17 = 0;
    else
      v17 = -1;
    v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    v19 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v20.i64[0] = 0x800000008000;
    v20.i64[1] = 0x800000008000;
    do
    {
      v21 = vorrq_s8(*(int8x16_t *)v10[v13].i8, v16);
      v22 = vorrq_s8(*(int8x16_t *)v12[v13].i8, v18);
      v23 = (int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1850049F0);
      v24 = (int16x8_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_1850049F0);
      v25 = vminq_u16((uint16x8_t)v21, (uint16x8_t)v23);
      v26 = vminq_u16((uint16x8_t)v22, (uint16x8_t)v24);
      v27 = vmull_lane_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v21.i8, 3);
      v28 = vmull_high_laneq_u16(v26, (uint16x8_t)v21, 7);
      v27.i32[3] = 0;
      v29 = vabdq_u32(vmull_lane_u16(*(uint16x4_t *)v25.i8, *(uint16x4_t *)v22.i8, 3), v27);
      v28.i32[3] = 0;
      v30 = vabdq_u32(vmull_high_laneq_u16(v25, (uint16x8_t)v22, 7), v28);
      v31 = (uint16x8_t)vmvnq_s8((int8x16_t)v23);
      v32 = vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v31.i8);
      v33 = vqaddq_u32(v30, vmull_high_u16(v26, v31));
      v34 = (uint16x8_t)vmvnq_s8((int8x16_t)v24);
      v35 = vmull_u16(*(uint16x4_t *)v25.i8, *(uint16x4_t *)v34.i8);
      v36 = vqaddq_u32(v33, vmull_high_u16(v25, v34));
      v37 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(v29, v32), v35), v19), v20);
      *(uint16x4_t *)v37.i8 = vqshrn_n_u32(vsraq_n_u32(v37, v37, 0x10uLL), 0x10uLL);
      v38 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v36, v19), v20);
      v39 = vsraq_n_u32(v38, v38, 0x10uLL);
      *(int16x4_t *)v34.i8 = vdup_lane_s16(*(int16x4_t *)v37.i8, 3);
      v34.u64[1] = (unint64_t)vdup_lane_s16((int16x4_t)vqshrn_n_u32(v39, 0x10uLL), 3);
      *(int8x16_t *)v12[v13].i8 = vbslq_s8((int8x16_t)vceqzq_s16(v23), v22, vbslq_s8((int8x16_t)vceqzq_s16(v24), v21, (int8x16_t)vminq_u16(vqshrn_high_n_u32(*(uint16x4_t *)v37.i8, v39, 0x10uLL), v34)));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v40 = v9 + a8;
  if (v40)
  {
    if (a6)
      v41 = 0;
    else
      v41 = -1;
    v42.i32[0] = 0;
    v42.i16[2] = 0;
    v42.i16[3] = v41;
    v43.i32[0] = 0;
    v43.i16[2] = 0;
    if (a7)
      v44 = 0;
    else
      v44 = -1;
    v43.i16[3] = v44;
    v45 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v46.i64[0] = 0x800000008000;
    v46.i64[1] = 0x800000008000;
    do
    {
      v47 = (int16x4_t)vorr_s8(*v10, v42);
      v48 = (int16x4_t)vorr_s8(*v12, v43);
      v49 = vdup_lane_s16(v47, 3);
      v50 = vdup_lane_s16(v48, 3);
      v51 = vmin_u16((uint16x4_t)v47, (uint16x4_t)v49);
      v52 = vmin_u16((uint16x4_t)v48, (uint16x4_t)v50);
      v53 = vmull_lane_u16(v52, (uint16x4_t)v47, 3);
      v53.i32[3] = 0;
      v54 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vqaddq_u32(vqaddq_u32(vabdq_u32(vmull_lane_u16(v51, (uint16x4_t)v48, 3), v53), vmull_u16(v52, (uint16x4_t)vmvn_s8((int8x8_t)v49))), vmull_u16(v51, (uint16x4_t)vmvn_s8((int8x8_t)v50))), v45), v46);
      *(uint16x4_t *)v54.i8 = vqshrn_n_u32(vsraq_n_u32(v54, v54, 0x10uLL), 0x10uLL);
      *v12 = vbsl_s8((int8x8_t)vceqz_s16(v49), (int8x8_t)v48, vbsl_s8((int8x8_t)vceqz_s16(v50), (int8x8_t)v47, (int8x8_t)vmin_u16(*(uint16x4_t *)v54.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v54.i8, 3))));
      v55 = &v10[a5];
      if ((unint64_t)v55 >= v11)
        v56 = -(uint64_t)a4;
      else
        v56 = 0;
      v10 = &v55[v56];
      v12 += a5;
      --v40;
    }
    while (v40);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

int8x8_t **VEC::template_mark_pixelshape_row<(CGCompositeOperation)23,_rgba16_t>(int8x8_t **result, int8x8_t **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, unint64_t a9)
{
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned int v17;
  int8x16_t v18;
  uint32x4_t v19;
  int8x16_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int16x8_t v24;
  int16x8_t v25;
  uint16x8_t v26;
  int8x16_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  int8x16_t v30;
  uint16x8_t v31;
  uint32x4_t v32;
  uint32x4_t v33;
  uint32x4_t v34;
  uint32x4_t v35;
  uint16x8_t v36;
  int8x16_t v37;
  uint64_t v38;
  __int16 v39;
  int8x8_t v40;
  int8x8_t v41;
  __int16 v42;
  uint32x4_t v43;
  int32x4_t v44;
  int16x4_t v45;
  int16x4_t v46;
  int16x4_t v47;
  int16x4_t v48;
  int8x8_t v49;
  uint16x4_t v50;
  uint16x4_t v51;
  uint32x4_t v52;
  int8x8_t *v53;
  uint64_t v54;

  v9 = a9;
  v10 = *result;
  v11 = *a3;
  v12 = *a2;
  if (a9 >= 2)
  {
    v13 = 0;
    if (a6)
      v14 = 0;
    else
      v14 = -1;
    v15.i64[0] = 0xFFFF000000000000;
    v15.i64[1] = 0xFFFF000000000000;
    v16 = vandq_s8((int8x16_t)vdupq_n_s16(v14), v15);
    if (a7)
      v17 = 0;
    else
      v17 = -1;
    v18 = vandq_s8((int8x16_t)vdupq_n_s16(v17), v15);
    v19 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v20.i64[0] = 0xFFFFFFFFFFFFLL;
    v20.i64[1] = 0xFFFFFFFFFFFFLL;
    v21.i64[0] = 0x800000008000;
    v21.i64[1] = 0x800000008000;
    do
    {
      v22 = vorrq_s8(*(int8x16_t *)v10[v13].i8, v16);
      v23 = vorrq_s8(*(int8x16_t *)v12[v13].i8, v18);
      v24 = (int16x8_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_1850049F0);
      v25 = (int16x8_t)vqtbl1q_s8(v23, (int8x16_t)xmmword_1850049F0);
      v26 = vminq_u16((uint16x8_t)v22, (uint16x8_t)v24);
      v27 = (int8x16_t)vminq_u16((uint16x8_t)v23, (uint16x8_t)v25);
      v28 = (uint16x8_t)vmvnq_s8(v27);
      v29 = (uint16x8_t)vandq_s8(v27, v20);
      v30 = (int8x16_t)vcgtq_u16(v29, v28);
      v31 = vabdq_u16(v28, v29);
      v32 = vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v31.i8);
      v33 = vmull_high_u16(v26, v31);
      v34 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v32, v19), v21);
      v35 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(v33, v19), v21);
      v36 = vqshrn_high_n_u32(vqshrn_n_u32(vsraq_n_u32(v34, v34, 0x10uLL), 0x10uLL), vsraq_n_u32(v35, v35, 0x10uLL), 0x10uLL);
      v37 = vbslq_s8(v30, (int8x16_t)vqsubq_u16((uint16x8_t)v27, v36), (int8x16_t)vqaddq_u16((uint16x8_t)v27, v36));
      *(int8x16_t *)v12[v13].i8 = vbslq_s8((int8x16_t)vceqzq_s16(v24), v23, vbslq_s8((int8x16_t)vceqzq_s16(v25), v22, (int8x16_t)vminq_u16((uint16x8_t)v37, (uint16x8_t)vqtbl1q_s8(v37, (int8x16_t)xmmword_1850049F0))));
      v9 -= 2;
      v13 += 2 * a5;
    }
    while (v9 > 1);
    v12 = (int8x8_t *)((char *)v12 + v13 * 8);
    v10 = (int8x8_t *)((char *)v10 + v13 * 8);
  }
  v38 = v9 + a8;
  if (v38)
  {
    if (a6)
      v39 = 0;
    else
      v39 = -1;
    v40.i32[0] = 0;
    v40.i16[2] = 0;
    v40.i16[3] = v39;
    v41.i32[0] = 0;
    v41.i16[2] = 0;
    if (a7)
      v42 = 0;
    else
      v42 = -1;
    v41.i16[3] = v42;
    v43 = (uint32x4_t)vdupq_n_s32(0xFFFE8000);
    v44.i64[0] = 0x800000008000;
    v44.i64[1] = 0x800000008000;
    do
    {
      v45 = (int16x4_t)vorr_s8(*v10, v40);
      v46 = (int16x4_t)vorr_s8(*v12, v41);
      v47 = vdup_lane_s16(v45, 3);
      v48 = vdup_lane_s16(v46, 3);
      v49 = (int8x8_t)vmin_u16((uint16x4_t)v46, (uint16x4_t)v48);
      v50 = (uint16x4_t)vmvn_s8(v49);
      v51 = (uint16x4_t)v49;
      v51.i16[3] = 0;
      v52 = (uint32x4_t)vaddq_s32((int32x4_t)vminq_u32(vmull_u16(vmin_u16((uint16x4_t)v45, (uint16x4_t)v47), vabd_u16(v50, v51)), v43), v44);
      *(uint16x4_t *)v52.i8 = vqshrn_n_u32(vsraq_n_u32(v52, v52, 0x10uLL), 0x10uLL);
      *(int8x8_t *)v52.i8 = vbsl_s8((int8x8_t)vcgt_u16(v51, v50), (int8x8_t)vqsub_u16((uint16x4_t)v49, *(uint16x4_t *)v52.i8), (int8x8_t)vqadd_u16((uint16x4_t)v49, *(uint16x4_t *)v52.i8));
      *v12 = vbsl_s8((int8x8_t)vceqz_s16(v47), (int8x8_t)v46, vbsl_s8((int8x8_t)vceqz_s16(v48), (int8x8_t)v45, (int8x8_t)vmin_u16(*(uint16x4_t *)v52.i8, (uint16x4_t)vdup_lane_s16(*(int16x4_t *)v52.i8, 3))));
      v53 = &v10[a5];
      if ((unint64_t)v53 >= v11)
        v54 = -(uint64_t)a4;
      else
        v54 = 0;
      v10 = &v53[v54];
      v12 += a5;
      --v38;
    }
    while (v38);
  }
  *result = v10;
  *a3 = v11;
  *a2 = v12;
  return result;
}

BOOL CGPDFDrawingContextShouldDrawOCG(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  CFNumberRef v6;
  const void *Value;
  unint64_t valuePtr;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 104) && (a2 | a3) != 0)
    {
      valuePtr = a3 | (unint64_t)(a2 << 36);
      v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
      Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 104), v6);
      CFRelease(v6);
      if (Value == (const void *)*MEMORY[0x1E0C9AE50])
        return 1;
      if (Value == (const void *)*MEMORY[0x1E0C9AE40])
        return 0;
    }
  }
  return *(_BYTE *)(a1 + 112) != 0;
}

void CGPDFDrawingContextDraw(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t GStateMark;
  CGPDFScanner *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!CGContextIsEmptyClipBoundingBox(a2, a2, a3, a4, a5, a6, a7, a8))
  {
    *(_QWORD *)(a1 + 88) = a2;
    GStateMark = CGContextGetGStateMark(a2, v10, v11, v12, v13, v14, v15, v16);
    if (CGPDFDrawingContextGetOperatorTable_predicate != -1)
      dispatch_once(&CGPDFDrawingContextGetOperatorTable_predicate, &__block_literal_global_7120);
    v18 = CGPDFScannerCreate(*(CGPDFContentStreamRef *)a1, (CGPDFOperatorTableRef)CGPDFDrawingContextGetOperatorTable_operator_table, (void *)a1);
    CGPDFScannerScan(v18);
    if (v18)
      CFRelease(v18);
    CGContextRestoreToGStateMark(a2, GStateMark, v19, v20, v21, v22, v23, v24);
  }
}

void CGPDFDrawingContextDrawWithContentTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t GStateMark;
  CGPDFOperatorTable *ContentTypesTable;
  CGPDFScanner *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (!CGContextIsEmptyClipBoundingBox(a2, a2, a3, a4, a5, a6, a7, a8))
  {
    *(_QWORD *)(a1 + 88) = a2;
    GStateMark = CGContextGetGStateMark(a2, v11, v12, v13, v14, v15, v16, v17);
    if (CGPDFDrawingContextGetOperatorTable_predicate != -1)
      dispatch_once(&CGPDFDrawingContextGetOperatorTable_predicate, &__block_literal_global_7120);
    if (a3 == 0xFFFFFFFFLL)
      ContentTypesTable = (CGPDFOperatorTable *)CGPDFDrawingContextGetOperatorTable_operator_table;
    else
      ContentTypesTable = CGPDFDrawingContextCreateContentTypesTable(a3);
    v20 = CGPDFScannerCreate(*(CGPDFContentStreamRef *)a1, ContentTypesTable, (void *)a1);
    CGPDFScannerScan(v20);
    if (v20)
      CFRelease(v20);
    if (a3 != 0xFFFFFFFFLL)
    {
      if (ContentTypesTable)
        CFRelease(ContentTypesTable);
    }
    CGContextRestoreToGStateMark(a2, GStateMark, v21, v22, v23, v24, v25, v26);
  }
}

void CGPDFDrawingContextDrawStream(CGPDFContentStreamRef *a1, CGPDFStream *a2, CGPDFDictionary *a3, __int128 *a4, uint64_t a5)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD **v15;
  void *v16;

  v7 = CGPDFDrawingContextCreateWithStream(a2, a3, a1);
  v14 = (uint64_t)v7;
  if (a4)
  {
    v15 = (_QWORD **)*((_QWORD *)v7 + 7);
    v16 = *v15;
    if (*v15)
    {
      CGPDFGStateReleaseProperties(*v15);
      free(v16);
    }
    **(_QWORD **)(v14 + 56) = CGPDFGStateCreateCopy(a4);
    *(_QWORD *)(v14 + 32) = **(_QWORD **)(v14 + 56);
  }
  CGPDFDrawingContextDraw(v14, a5, v8, v9, v10, v11, v12, v13);
  CGPDFDrawingContextRelease((void *)v14);
}

void CGPDFDrawingContextDrawGlyphStream(CGPDFContentStreamRef *a1, CGPDFStream *a2, CGPDFDictionary *a3, uint64_t a4)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = CGPDFDrawingContextCreateWithStream(a2, a3, a1);
  v5[8] = 1;
  CGPDFDrawingContextDraw((uint64_t)v5, a4, v6, v7, v8, v9, v10, v11);
  CGPDFDrawingContextRelease(v5);
}

uint64_t sub_184E3095C()
{
  return MEMORY[0x1E0DEA318]();
}

uint64_t sub_184E30968()
{
  return MEMORY[0x1E0DEA368]();
}

uint64_t sub_184E30974()
{
  return MEMORY[0x1E0DEA3C0]();
}

uint64_t sub_184E30980()
{
  return MEMORY[0x1E0DEA3D0]();
}

uint64_t sub_184E3098C()
{
  return MEMORY[0x1E0DEA3E0]();
}

uint64_t sub_184E30998()
{
  return MEMORY[0x1E0DEA3E8]();
}

uint64_t sub_184E309A4()
{
  return MEMORY[0x1E0DEA3F0]();
}

uint64_t sub_184E309B0()
{
  return MEMORY[0x1E0DEA568]();
}

uint64_t sub_184E309BC()
{
  return MEMORY[0x1E0DEA630]();
}

uint64_t sub_184E309C8()
{
  return MEMORY[0x1E0DEA800]();
}

uint64_t sub_184E309D4()
{
  return MEMORY[0x1E0DEAA58]();
}

uint64_t sub_184E309E0()
{
  return MEMORY[0x1E0DEAAB8]();
}

uint64_t sub_184E309EC()
{
  return MEMORY[0x1E0DEAAD8]();
}

uint64_t sub_184E309F8()
{
  return MEMORY[0x1E0DEAB28]();
}

uint64_t sub_184E30A04()
{
  return MEMORY[0x1E0CB1AD0]();
}

uint64_t sub_184E30A10()
{
  return MEMORY[0x1E0DEAE28]();
}

uint64_t sub_184E30A1C()
{
  return MEMORY[0x1E0DEAFE8]();
}

uint64_t sub_184E30A28()
{
  return MEMORY[0x1E0DEAFF8]();
}

uint64_t sub_184E30A34()
{
  return MEMORY[0x1E0DEB4F8]();
}

uint64_t sub_184E30A40()
{
  return MEMORY[0x1E0DEB528]();
}

uint64_t sub_184E30A4C()
{
  return MEMORY[0x1E0DEB570]();
}

uint64_t sub_184E30A58()
{
  return MEMORY[0x1E0DEB580]();
}

uint64_t sub_184E30A64()
{
  return MEMORY[0x1E0DEB598]();
}

uint64_t sub_184E30A70()
{
  return MEMORY[0x1E0DEB5A0]();
}

uint64_t sub_184E30A7C()
{
  return MEMORY[0x1E0DEB5A8]();
}

uint64_t sub_184E30A88()
{
  return MEMORY[0x1E0DEB5B0]();
}

uint64_t sub_184E30A94()
{
  return MEMORY[0x1E0DEB618]();
}

uint64_t sub_184E30AA0()
{
  return MEMORY[0x1E0DEB628]();
}

uint64_t sub_184E30AAC()
{
  return MEMORY[0x1E0DEB630]();
}

uint64_t sub_184E30AB8()
{
  return MEMORY[0x1E0DEB660]();
}

uint64_t sub_184E30AC4()
{
  return MEMORY[0x1E0DEB668]();
}

uint64_t sub_184E30AD0()
{
  return MEMORY[0x1E0DEB6A0]();
}

uint64_t sub_184E30ADC()
{
  return MEMORY[0x1E0DEB6C0]();
}

uint64_t sub_184E30AE8()
{
  return MEMORY[0x1E0DEB6D0]();
}

uint64_t sub_184E30AF4()
{
  return MEMORY[0x1E0DEB848]();
}

uint64_t sub_184E30B00()
{
  return MEMORY[0x1E0DEB940]();
}

uint64_t sub_184E30B0C()
{
  return MEMORY[0x1E0DEBB68]();
}

uint64_t sub_184E30B18()
{
  return MEMORY[0x1E0DEC050]();
}

uint64_t sub_184E30B24()
{
  return MEMORY[0x1E0DEC2A8]();
}

uint64_t sub_184E30B30()
{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t sub_184E30B3C()
{
  return MEMORY[0x1E0DECF30]();
}

uint64_t sub_184E30B48()
{
  return MEMORY[0x1E0DECFF0]();
}

uint64_t sub_184E30B54()
{
  return MEMORY[0x1E0DED040]();
}

uint64_t sub_184E30B60()
{
  return MEMORY[0x1E0DED068]();
}

uint64_t sub_184E30B6C()
{
  return MEMORY[0x1E0DED120]();
}

uint64_t sub_184E30B78()
{
  return MEMORY[0x1E0DED170]();
}

uint64_t sub_184E30B84()
{
  return MEMORY[0x1E0DED1B0]();
}

uint64_t sub_184E30B90()
{
  return MEMORY[0x1E0DED290]();
}

uint64_t sub_184E30B9C()
{
  return MEMORY[0x1E0DED2B8]();
}

uint64_t sub_184E30BA8()
{
  return MEMORY[0x1E0DED388]();
}

uint64_t sub_184E30BB4()
{
  return MEMORY[0x1E0DED3D0]();
}

uint64_t sub_184E30BC0()
{
  return MEMORY[0x1E0DED510]();
}

uint64_t sub_184E30BCC()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t sub_184E30BD8()
{
  return MEMORY[0x1E0DED980]();
}

uint64_t sub_184E30BE4()
{
  return MEMORY[0x1E0DED9C8]();
}

uint64_t sub_184E30BF0()
{
  return MEMORY[0x1E0DEDB10]();
}

uint64_t sub_184E30BFC()
{
  return MEMORY[0x1E0DEDB18]();
}

uint64_t sub_184E30C08()
{
  return MEMORY[0x1E0DEDB20]();
}

uint64_t sub_184E30C14()
{
  return MEMORY[0x1E0DEDB28]();
}

uint64_t sub_184E30C20()
{
  return MEMORY[0x1E0DEDEF8]();
}

uint64_t sub_184E30C2C()
{
  return MEMORY[0x1E0DEDF10]();
}

uint64_t sub_184E30C38()
{
  return MEMORY[0x1E0DEDF30]();
}

uint64_t sub_184E30C44()
{
  return MEMORY[0x1E0DEDF38]();
}

uint64_t sub_184E30C50()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t sub_184E30C5C()
{
  return MEMORY[0x1E0DEDF48]();
}

uint64_t sub_184E30C68()
{
  return MEMORY[0x1E0DEDFC8]();
}

uint64_t sub_184E30C74()
{
  return MEMORY[0x1E0DEDFF0]();
}

uint64_t sub_184E30C80()
{
  return MEMORY[0x1E0DEE020]();
}

uint64_t sub_184E30C8C()
{
  return MEMORY[0x1E0DEE228]();
}

uint64_t sub_184E30C98()
{
  return MEMORY[0x1E0DEE240]();
}

uint64_t sub_184E30CA4()
{
  return MEMORY[0x1E0DEE258]();
}

uint64_t sub_184E30CB0()
{
  return MEMORY[0x1E0DEE270]();
}

uint64_t sub_184E30CBC()
{
  return MEMORY[0x1E0DEE8E0]();
}

uint64_t sub_184E30CC8()
{
  return MEMORY[0x1E0DEE8E8]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1E0D15430]();
}

CCCryptorStatus CCCryptorCreate(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, CCCryptorRef *cryptorRef)
{
  return MEMORY[0x1E0C80098](*(_QWORD *)&op, *(_QWORD *)&alg, *(_QWORD *)&options, key, keyLength, iv, cryptorRef);
}

CCCryptorStatus CCCryptorFinal(CCCryptorRef cryptorRef, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x1E0C800A8](cryptorRef, dataOut, dataOutAvailable, dataOutMoved);
}

CCCryptorStatus CCCryptorRelease(CCCryptorRef cryptorRef)
{
  return MEMORY[0x1E0C80108](cryptorRef);
}

CCCryptorStatus CCCryptorReset(CCCryptorRef cryptorRef, const void *iv)
{
  return MEMORY[0x1E0C80110](cryptorRef, iv);
}

CCCryptorStatus CCCryptorUpdate(CCCryptorRef cryptorRef, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x1E0C80118](cryptorRef, dataIn, dataInLength, dataOut, dataOutAvailable, dataOutMoved);
}

int CC_MD5_Final(unsigned __int8 *md, CC_MD5_CTX *c)
{
  return MEMORY[0x1E0C80310](md, c);
}

int CC_MD5_Init(CC_MD5_CTX *c)
{
  return MEMORY[0x1E0C80318](c);
}

int CC_MD5_Update(CC_MD5_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C80320](c, data, *(_QWORD *)&len);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80370](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80378](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C80380](c, data, *(_QWORD *)&len);
}

int CC_SHA384_Final(unsigned __int8 *md, CC_SHA512_CTX *c)
{
  return MEMORY[0x1E0C80390](md, c);
}

int CC_SHA384_Init(CC_SHA512_CTX *c)
{
  return MEMORY[0x1E0C80398](c);
}

int CC_SHA384_Update(CC_SHA512_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C803A0](c, data, *(_QWORD *)&len);
}

int CC_SHA512_Final(unsigned __int8 *md, CC_SHA512_CTX *c)
{
  return MEMORY[0x1E0C803B0](md, c);
}

int CC_SHA512_Init(CC_SHA512_CTX *c)
{
  return MEMORY[0x1E0C803B8](c);
}

int CC_SHA512_Update(CC_SHA512_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C803C0](c, data, *(_QWORD *)&len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context)
{
  return (CFAllocatorRef)MEMORY[0x1E0C97CA8](allocator, context);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
  MEMORY[0x1E0C97CB0](allocator, ptr);
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
  MEMORY[0x1E0C97CE8](theArray, otherArray, otherRange.location, otherRange.length);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
  MEMORY[0x1E0C97D00](theArray, range.location, range.length, applier, context);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1E0C97D30](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D50](allocator, capacity, theArray);
}

void CFArrayExchangeValuesAtIndices(CFMutableArrayRef theArray, CFIndex idx1, CFIndex idx2)
{
  MEMORY[0x1E0C97D58](theArray, idx1, idx2);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D78](theArray, range.location, range.length, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values)
{
  MEMORY[0x1E0C97DA8](theArray, range.location, range.length, values);
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x1E0C97DB0](theArray, idx, value);
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
  MEMORY[0x1E0C97DB8](theArray);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
  MEMORY[0x1E0C97DC0](theArray, idx);
}

void CFArrayReplaceValues(CFMutableArrayRef theArray, CFRange range, const void **newValues, CFIndex newCount)
{
  MEMORY[0x1E0C97DC8](theArray, range.location, range.length, newValues, newCount);
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x1E0C97DD0](theArray, idx, value);
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
  MEMORY[0x1E0C97DE0](theArray, range.location, range.length, comparator, context);
}

CFAttributedStringRef CFAttributedStringCreate(CFAllocatorRef alloc, CFStringRef str, CFDictionaryRef attributes)
{
  return (CFAttributedStringRef)MEMORY[0x1E0C97DF0](alloc, str, attributes);
}

CFMutableAttributedStringRef CFAttributedStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableAttributedStringRef)MEMORY[0x1E0C97E00](alloc, maxLength);
}

CFMutableAttributedStringRef CFAttributedStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFAttributedStringRef aStr)
{
  return (CFMutableAttributedStringRef)MEMORY[0x1E0C97E08](alloc, maxLength, aStr);
}

CFIndex CFAttributedStringGetLength(CFAttributedStringRef aStr)
{
  return MEMORY[0x1E0C97E48](aStr);
}

CFStringRef CFAttributedStringGetString(CFAttributedStringRef aStr)
{
  return (CFStringRef)MEMORY[0x1E0C97E50](aStr);
}

void CFAttributedStringReplaceAttributedString(CFMutableAttributedStringRef aStr, CFRange range, CFAttributedStringRef replacement)
{
  MEMORY[0x1E0C97E68](aStr, range.location, range.length, replacement);
}

void CFAttributedStringReplaceString(CFMutableAttributedStringRef aStr, CFRange range, CFStringRef replacement)
{
  MEMORY[0x1E0C97E70](aStr, range.location, range.length, replacement);
}

void CFAttributedStringSetAttributes(CFMutableAttributedStringRef aStr, CFRange range, CFDictionaryRef replacement, Boolean clearOtherAttributes)
{
  MEMORY[0x1E0C97E80](aStr, range.location, range.length, replacement, clearOtherAttributes);
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1E0C97E90](arg);
}

CFMutableBitVectorRef CFBitVectorCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableBitVectorRef)MEMORY[0x1E0C97F68](allocator, capacity);
}

CFBit CFBitVectorGetBitAtIndex(CFBitVectorRef bv, CFIndex idx)
{
  return MEMORY[0x1E0C97F78](bv, idx);
}

void CFBitVectorSetBits(CFMutableBitVectorRef bv, CFRange range, CFBit value)
{
  MEMORY[0x1E0C97FB8](bv, range.location, range.length, *(_QWORD *)&value);
}

void CFBitVectorSetCount(CFMutableBitVectorRef bv, CFIndex count)
{
  MEMORY[0x1E0C97FC0](bv, count);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1E0C98000](bundle);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1E0C98120](bundle);
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x1E0C98150]();
}

CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1E0C98180](bundle, key);
}

Boolean CFCalendarComposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime *at, const char *componentDesc, ...)
{
  return MEMORY[0x1E0C98228](calendar, at, componentDesc);
}

CFCalendarRef CFCalendarCreateWithIdentifier(CFAllocatorRef allocator, CFCalendarIdentifier identifier)
{
  return (CFCalendarRef)MEMORY[0x1E0C98240](allocator, identifier);
}

Boolean CFCalendarDecomposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime at, const char *componentDesc, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, componentDesc);
  v3 = va_arg(va, _QWORD);
  return MEMORY[0x1E0C98248](calendar, v3, at);
}

void CFCalendarSetTimeZone(CFCalendarRef calendar, CFTimeZoneRef tz)
{
  MEMORY[0x1E0C98298](calendar, tz);
}

CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier)
{
  return (CFCharacterSetRef)MEMORY[0x1E0C982F0](theSetIdentifier);
}

Boolean CFCharacterSetIsLongCharacterMember(CFCharacterSetRef theSet, UTF32Char theChar)
{
  return MEMORY[0x1E0C98328](theSet, *(_QWORD *)&theChar);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x1E0C98350](cf);
}

uint64_t CFCopyHomeDirectoryURLForUser()
{
  return MEMORY[0x1E0C98368]();
}

uint64_t CFCopySearchPathForDirectoriesInDomains()
{
  return MEMORY[0x1E0C98370]();
}

uint64_t CFCopySystemVersionString()
{
  return MEMORY[0x1E0C98378]();
}

CFStringRef CFCopyTypeIDDescription(CFTypeID type_id)
{
  return (CFStringRef)MEMORY[0x1E0C98380](type_id);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
  MEMORY[0x1E0C98390](theData, bytes, length);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFDataRef CFDataCreateCopy(CFAllocatorRef allocator, CFDataRef theData)
{
  return (CFDataRef)MEMORY[0x1E0C983B0](allocator, theData);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983B8](allocator, capacity);
}

CFMutableDataRef CFDataCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDataRef theData)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983C0](allocator, capacity, theData);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1E0C983C8](allocator, bytes, length, bytesDeallocator);
}

void CFDataDeleteBytes(CFMutableDataRef theData, CFRange range)
{
  MEMORY[0x1E0C983D0](theData, range.location, range.length);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
  MEMORY[0x1E0C983F0](theData, range.location, range.length, buffer);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1E0C98408](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

void CFDataIncreaseLength(CFMutableDataRef theData, CFIndex extraLength)
{
  MEMORY[0x1E0C98420](theData, extraLength);
}

void CFDataReplaceBytes(CFMutableDataRef theData, CFRange range, const UInt8 *newBytes, CFIndex newLength)
{
  MEMORY[0x1E0C98428](theData, range.location, range.length, newBytes, newLength);
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
  MEMORY[0x1E0C98430](theData, length);
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1E0C98448](allocator, at);
}

CFDateFormatterRef CFDateFormatterCreateISO8601Formatter(CFAllocatorRef allocator, CFISO8601DateFormatOptions formatOptions)
{
  return (CFDateFormatterRef)MEMORY[0x1E0C98480](allocator, formatOptions);
}

CFStringRef CFDateFormatterCreateStringWithDate(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFDateRef date)
{
  return (CFStringRef)MEMORY[0x1E0C98490](allocator, formatter, date);
}

CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C984D8](theDate);
  return result;
}

CFTypeID CFDateGetTypeID(void)
{
  return MEMORY[0x1E0C984E8]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98508](theDict, applier, context);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98538](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98558](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x1E0C985A0](theDict, keys, values);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1E0C985C8](theDict, key, value);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
  MEMORY[0x1E0C985D8](theDict);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x1E0C985E8](theDict, key);
}

void CFDictionaryReplaceValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C985F8](theDict, key, value);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x1E0C98650](allocator, domain, code, userInfo);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x1E0C98718](cf);
}

CFIndex CFGetRetainCount(CFTypeRef cf)
{
  return MEMORY[0x1E0C98720](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFDataRef CFHTTPMessageCopyBody(CFHTTPMessageRef message)
{
  return (CFDataRef)MEMORY[0x1E0C927F0](message);
}

CFHTTPMessageRef CFHTTPMessageCreateRequest(CFAllocatorRef alloc, CFStringRef requestMethod, CFURLRef url, CFStringRef httpVersion)
{
  return (CFHTTPMessageRef)MEMORY[0x1E0C92838](alloc, requestMethod, url, httpVersion);
}

CFIndex CFHTTPMessageGetResponseStatusCode(CFHTTPMessageRef response)
{
  return MEMORY[0x1E0C92848](response);
}

void CFHTTPMessageSetBody(CFHTTPMessageRef message, CFDataRef bodyData)
{
  MEMORY[0x1E0C92860](message, bodyData);
}

void CFHTTPMessageSetHeaderFieldValue(CFHTTPMessageRef message, CFStringRef headerField, CFStringRef value)
{
  MEMORY[0x1E0C92868](message, headerField, value);
}

CFHashCode CFHash(CFTypeRef cf)
{
  return MEMORY[0x1E0C98758](cf);
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x1E0C98798](allocator, localeIdentifier);
}

CFLocaleIdentifier CFLocaleCreateCanonicalLanguageIdentifierFromString(CFAllocatorRef allocator, CFStringRef localeIdentifier)
{
  return (CFLocaleIdentifier)MEMORY[0x1E0C987A0](allocator, localeIdentifier);
}

CFLocaleIdentifier CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(CFAllocatorRef allocator, uint32_t lcid)
{
  return (CFLocaleIdentifier)MEMORY[0x1E0C987D0](allocator, *(_QWORD *)&lcid);
}

CFLocaleIdentifier CFLocaleGetIdentifier(CFLocaleRef locale)
{
  return (CFLocaleIdentifier)MEMORY[0x1E0C987D8](locale);
}

CFLocaleRef CFLocaleGetSystem(void)
{
  return (CFLocaleRef)MEMORY[0x1E0C987F0]();
}

CFTypeRef CFLocaleGetValue(CFLocaleRef locale, CFLocaleKey key)
{
  return (CFTypeRef)MEMORY[0x1E0C98800](locale, key);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988D0]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
  MEMORY[0x1E0C98900](center, observer, name, object);
}

CFTypeID CFNullGetTypeID(void)
{
  return MEMORY[0x1E0C98908]();
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x1E0C989A8](number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x1E0C989D0](number);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A60](key, applicationID, userName, hostName);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1E0C98AA0](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AD0](allocator, data, options, format, error);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AE0](allocator, stream, streamLength, options, format, error);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
  MEMORY[0x1E0C98B10](stream);
}

CFTypeRef CFReadStreamCopyProperty(CFReadStreamRef stream, CFStreamPropertyKey propertyName)
{
  return (CFTypeRef)MEMORY[0x1E0C98B28](stream, propertyName);
}

CFReadStreamRef CFReadStreamCreateForHTTPRequest(CFAllocatorRef alloc, CFHTTPMessageRef request)
{
  return (CFReadStreamRef)MEMORY[0x1E0C928E0](alloc, request);
}

CFReadStreamRef CFReadStreamCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFReadStreamRef)MEMORY[0x1E0C98B38](alloc, bytes, length, bytesDeallocator);
}

CFReadStreamRef CFReadStreamCreateWithFTPURL(CFAllocatorRef alloc, CFURLRef ftpURL)
{
  return (CFReadStreamRef)MEMORY[0x1E0C928E8](alloc, ftpURL);
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x1E0C98B48](alloc, fileURL);
}

CFStreamStatus CFReadStreamGetStatus(CFReadStreamRef stream)
{
  return MEMORY[0x1E0C98B68](stream);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x1E0C98B80](stream);
}

CFIndex CFReadStreamRead(CFReadStreamRef stream, UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x1E0C98B88](stream, buffer, bufferLength);
}

Boolean CFReadStreamSetProperty(CFReadStreamRef stream, CFStreamPropertyKey propertyName, CFTypeRef propertyValue)
{
  return MEMORY[0x1E0C98BA8](stream, propertyName, propertyValue);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98D70](theSet, value);
}

void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98D78](theSet, applier, context);
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1E0C98D80](theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1E0C98D98](allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x1E0C98DA8](theSet);
}

const void *__cdecl CFSetGetValue(CFSetRef theSet, const void *value)
{
  return (const void *)MEMORY[0x1E0C98DC0](theSet, value);
}

Boolean CFSetGetValueIfPresent(CFSetRef theSet, const void *candidate, const void **value)
{
  return MEMORY[0x1E0C98DC8](theSet, candidate, value);
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98DE0](theSet, value);
}

void CFSetSetValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98DF0](theSet, value);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
  MEMORY[0x1E0C98ED8](theString, appendedString);
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
  MEMORY[0x1E0C98EE0](theString, cStr, *(_QWORD *)&encoding);
}

void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars)
{
  MEMORY[0x1E0C98EE8](theString, chars, numChars);
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  MEMORY[0x1E0C98EF0](theString, formatOptions, format);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x1E0C98F58](alloc, theString, separatorString);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x1E0C98F68](alloc, theArray, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1E0C98F78](alloc, theString);
}

CFDataRef CFStringCreateExternalRepresentation(CFAllocatorRef alloc, CFStringRef theString, CFStringEncoding encoding, UInt8 lossByte)
{
  return (CFDataRef)MEMORY[0x1E0C98F80](alloc, theString, *(_QWORD *)&encoding, lossByte);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F90](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F98](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1E0C98FB8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1E0C98FE0](alloc, cStr, *(_QWORD *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars)
{
  return (CFStringRef)MEMORY[0x1E0C98FE8](alloc, chars, numChars);
}

CFStringRef CFStringCreateWithFileSystemRepresentation(CFAllocatorRef alloc, const char *buffer)
{
  return (CFStringRef)MEMORY[0x1E0C99008](alloc, buffer);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1E0C99018](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithFormatAndArguments(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments)
{
  return (CFStringRef)MEMORY[0x1E0C99020](alloc, formatOptions, format, arguments);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1E0C99030](alloc, str, range.location, range.length);
}

void CFStringDelete(CFMutableStringRef theString, CFRange range)
{
  MEMORY[0x1E0C99038](theString, range.location, range.length);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3;
  CFIndex v4;
  CFRange result;

  v3 = MEMORY[0x1E0C99050](theString, stringToFind, compareOptions);
  result.length = v4;
  result.location = v3;
  return result;
}

CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C99058](theString, stringToFind, replacementString, rangeToSearch.location, rangeToSearch.length, compareOptions);
}

Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1E0C99068](theString, stringToFind, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1E0C99080](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1E0C990B0](theString, idx);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
  MEMORY[0x1E0C990C0](theString, range.location, range.length, buffer);
}

double CFStringGetDoubleValue(CFStringRef str)
{
  double result;

  MEMORY[0x1E0C990D0](str);
  return result;
}

Boolean CFStringGetFileSystemRepresentation(CFStringRef string, char *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1E0C990E0](string, buffer, maxBufLen);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x1E0C990F0](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99118](length, *(_QWORD *)&encoding);
}

uint64_t CFStringGetRangeOfCharacterClusterAtIndex()
{
  return MEMORY[0x1E0C99158]();
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1E0C99180](theString, prefix);
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return MEMORY[0x1E0C99190](theString, suffix);
}

void CFStringInsert(CFMutableStringRef str, CFIndex idx, CFStringRef insertedStr)
{
  MEMORY[0x1E0C991B8](str, idx, insertedStr);
}

void CFStringReplaceAll(CFMutableStringRef theString, CFStringRef replacement)
{
  MEMORY[0x1E0C991F8](theString, replacement);
}

CFStringTokenizerRef CFStringTokenizerCreate(CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringTokenizerRef)MEMORY[0x1E0C99220](alloc, string, range.location, range.length, options, locale);
}

CFRange CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer)
{
  CFIndex v1;
  CFIndex v2;
  CFRange result;

  v1 = MEMORY[0x1E0C99230](tokenizer);
  result.length = v2;
  result.location = v1;
  return result;
}

CFStringTokenizerTokenType CFStringTokenizerGoToTokenAtIndex(CFStringTokenizerRef tokenizer, CFIndex index)
{
  return MEMORY[0x1E0C99238](tokenizer, index);
}

void CFStringTrimWhitespace(CFMutableStringRef theString)
{
  MEMORY[0x1E0C99258](theString);
}

CFTimeZoneRef CFTimeZoneCreateWithName(CFAllocatorRef allocator, CFStringRef name, Boolean tryAbbrev)
{
  return (CFTimeZoneRef)MEMORY[0x1E0C99288](allocator, name, tryAbbrev);
}

CFTimeZoneRef CFTimeZoneCreateWithTimeIntervalFromGMT(CFAllocatorRef allocator, CFTimeInterval ti)
{
  return (CFTimeZoneRef)MEMORY[0x1E0C99290](allocator, ti);
}

CFURLRef CFURLCopyAbsoluteURL(CFURLRef relativeURL)
{
  return (CFURLRef)MEMORY[0x1E0C992C8](relativeURL);
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x1E0C992D8](anURL, pathStyle);
}

CFStringRef CFURLCopyFragment(CFURLRef anURL, CFStringRef charactersToLeaveEscaped)
{
  return (CFStringRef)MEMORY[0x1E0C992E8](anURL, charactersToLeaveEscaped);
}

CFStringRef CFURLCopyLastPathComponent(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x1E0C992F8](url);
}

CFStringRef CFURLCopyParameterString(CFURLRef anURL, CFStringRef charactersToLeaveEscaped)
{
  return (CFStringRef)MEMORY[0x1E0C99308](anURL, charactersToLeaveEscaped);
}

CFStringRef CFURLCopyPath(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C99318](anURL);
}

CFStringRef CFURLCopyPathExtension(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x1E0C99320](url);
}

CFStringRef CFURLCopyQueryString(CFURLRef anURL, CFStringRef charactersToLeaveEscaped)
{
  return (CFStringRef)MEMORY[0x1E0C99328](anURL, charactersToLeaveEscaped);
}

Boolean CFURLCopyResourcePropertyForKey(CFURLRef url, CFStringRef key, void *propertyValueTypeRefPtr, CFErrorRef *error)
{
  return MEMORY[0x1E0C99338](url, key, propertyValueTypeRefPtr, error);
}

CFStringRef CFURLCopyScheme(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C99348](anURL);
}

CFURLRef CFURLCreateCopyAppendingPathComponent(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99380](allocator, url, pathComponent, isDirectory);
}

CFURLRef CFURLCreateCopyAppendingPathExtension(CFAllocatorRef allocator, CFURLRef url, CFStringRef extension)
{
  return (CFURLRef)MEMORY[0x1E0C99388](allocator, url, extension);
}

CFURLRef CFURLCreateCopyDeletingLastPathComponent(CFAllocatorRef allocator, CFURLRef url)
{
  return (CFURLRef)MEMORY[0x1E0C99390](allocator, url);
}

CFURLRef CFURLCreateCopyDeletingPathExtension(CFAllocatorRef allocator, CFURLRef url)
{
  return (CFURLRef)MEMORY[0x1E0C99398](allocator, url);
}

CFDataRef CFURLCreateData(CFAllocatorRef allocator, CFURLRef url, CFStringEncoding encoding, Boolean escapeWhitespace)
{
  return (CFDataRef)MEMORY[0x1E0C993A0](allocator, url, *(_QWORD *)&encoding, escapeWhitespace);
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C993C8](allocator, buffer, bufLen, isDirectory);
}

CFStringRef CFURLCreateStringByAddingPercentEscapes(CFAllocatorRef allocator, CFStringRef originalString, CFStringRef charactersToLeaveUnescaped, CFStringRef legalURLCharactersToBeEscaped, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C993F8](allocator, originalString, charactersToLeaveUnescaped, legalURLCharactersToBeEscaped, *(_QWORD *)&encoding);
}

CFURLRef CFURLCreateWithBytes(CFAllocatorRef allocator, const UInt8 *URLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1E0C99418](allocator, URLBytes, length, *(_QWORD *)&encoding, baseURL);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99420](allocator, filePath, pathStyle, isDirectory);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1E0C99448](allocator, URLString, baseURL);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1E0C99490](url, resolveAgainstBase, buffer, maxBufLen);
}

CFStringRef CFURLGetString(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C994A0](anURL);
}

CFTypeID CFURLGetTypeID(void)
{
  return MEMORY[0x1E0C994B8]();
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1E0C99518](alloc);
}

void CFWriteStreamClose(CFWriteStreamRef stream)
{
  MEMORY[0x1E0C99600](stream);
}

CFTypeRef CFWriteStreamCopyProperty(CFWriteStreamRef stream, CFStreamPropertyKey propertyName)
{
  return (CFTypeRef)MEMORY[0x1E0C99610](stream, propertyName);
}

CFWriteStreamRef CFWriteStreamCreateWithAllocatedBuffers(CFAllocatorRef alloc, CFAllocatorRef bufferAllocator)
{
  return (CFWriteStreamRef)MEMORY[0x1E0C99620](alloc, bufferAllocator);
}

CFWriteStreamRef CFWriteStreamCreateWithFTPURL(CFAllocatorRef alloc, CFURLRef ftpURL)
{
  return (CFWriteStreamRef)MEMORY[0x1E0C92A90](alloc, ftpURL);
}

Boolean CFWriteStreamOpen(CFWriteStreamRef stream)
{
  return MEMORY[0x1E0C99650](stream);
}

CFIndex CFWriteStreamWrite(CFWriteStreamRef stream, const UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x1E0C99688](stream, buffer, bufferLength);
}

uint64_t CGApplyGainMapHeadRoom_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))CGApplyGainMapHeadRoom_ptr[0])(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t CGBufIsConstantValue_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))CGBufIsConstantValue_ptr[0])(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t FPFontCanCreatePostScriptSubset()
{
  return MEMORY[0x1E0D22420]();
}

uint64_t FPFontCopyCharacterSet()
{
  return MEMORY[0x1E0D22428]();
}

uint64_t FPFontCopyFamilyName()
{
  return MEMORY[0x1E0D22430]();
}

uint64_t FPFontCopyFullName()
{
  return MEMORY[0x1E0D22438]();
}

uint64_t FPFontCopyGlyphBitmap()
{
  return MEMORY[0x1E0D22440]();
}

uint64_t FPFontCopyGlyphNameForGlyph()
{
  return MEMORY[0x1E0D22448]();
}

uint64_t FPFontCopyGlyphPath()
{
  return MEMORY[0x1E0D22450]();
}

uint64_t FPFontCopyNames()
{
  return MEMORY[0x1E0D22460]();
}

uint64_t FPFontCopyPath()
{
  return MEMORY[0x1E0D22468]();
}

uint64_t FPFontCopyPostScriptName()
{
  return MEMORY[0x1E0D22470]();
}

uint64_t FPFontCopyRegistryOrderingSupplement()
{
  return MEMORY[0x1E0D22478]();
}

uint64_t FPFontCopyTable()
{
  return MEMORY[0x1E0D22488]();
}

uint64_t FPFontCopyTableTags()
{
  return MEMORY[0x1E0D22490]();
}

uint64_t FPFontCreateCopyWithVariation()
{
  return MEMORY[0x1E0D22498]();
}

uint64_t FPFontCreateFontSubset()
{
  return MEMORY[0x1E0D224A0]();
}

uint64_t FPFontCreateFontsFromData()
{
  return MEMORY[0x1E0D224A8]();
}

uint64_t FPFontCreateFontsWithPath()
{
  return MEMORY[0x1E0D224B0]();
}

uint64_t FPFontCreatePostScriptEncoding()
{
  return MEMORY[0x1E0D224C0]();
}

uint64_t FPFontCreatePostScriptSubset()
{
  return MEMORY[0x1E0D224C8]();
}

uint64_t FPFontCreateWithDataAndExtra()
{
  return MEMORY[0x1E0D224D8]();
}

uint64_t FPFontCreateWithPathAndName()
{
  return MEMORY[0x1E0D224E0]();
}

uint64_t FPFontGetBoundingBox()
{
  return MEMORY[0x1E0D224E8]();
}

uint64_t FPFontGetCIDsForGlyphs()
{
  return MEMORY[0x1E0D224F0]();
}

uint64_t FPFontGetDefaultInstance()
{
  return MEMORY[0x1E0D22500]();
}

uint64_t FPFontGetFontInfo()
{
  return MEMORY[0x1E0D22508]();
}

uint64_t FPFontGetGlyphDeviceAdvance()
{
  return MEMORY[0x1E0D22518]();
}

uint64_t FPFontGetGlyphDeviceBounds()
{
  return MEMORY[0x1E0D22520]();
}

uint64_t FPFontGetGlyphIdealAdvanceWidths()
{
  return MEMORY[0x1E0D22530]();
}

uint64_t FPFontGetGlyphIdealBounds()
{
  return MEMORY[0x1E0D22538]();
}

uint64_t FPFontGetGlyphIdealVerticalAdvanceWidth()
{
  return MEMORY[0x1E0D22540]();
}

uint64_t FPFontGetGlyphNameMaxLength()
{
  return MEMORY[0x1E0D22550]();
}

uint64_t FPFontGetGlyphVerticalTranslate()
{
  return MEMORY[0x1E0D22558]();
}

uint64_t FPFontGetGlyphsForCIDs()
{
  return MEMORY[0x1E0D22560]();
}

uint64_t FPFontGetGlyphsForCharacters()
{
  return MEMORY[0x1E0D22570]();
}

uint64_t FPFontGetGlyphsForGlyphNames()
{
  return MEMORY[0x1E0D22578]();
}

uint64_t FPFontGetGlyphsForUnichars()
{
  return MEMORY[0x1E0D22580]();
}

uint64_t FPFontGetGlyphsXo()
{
  return MEMORY[0x1E0D22588]();
}

uint64_t FPFontGetInstanceNameID()
{
  return MEMORY[0x1E0D22590]();
}

uint64_t FPFontGetNumberOfGlyphs()
{
  return MEMORY[0x1E0D22598]();
}

uint64_t FPFontGetPostScriptName()
{
  return MEMORY[0x1E0D225A8]();
}

uint64_t FPFontGetStemH()
{
  return MEMORY[0x1E0D225B0]();
}

uint64_t FPFontGetStemV()
{
  return MEMORY[0x1E0D225B8]();
}

uint64_t FPFontGetTrueTypeEncoding()
{
  return MEMORY[0x1E0D225C8]();
}

uint64_t FPFontGetType1Encoding()
{
  return MEMORY[0x1E0D225D0]();
}

uint64_t FPFontGetUnicharsForGlyph()
{
  return MEMORY[0x1E0D225E0]();
}

uint64_t FPFontGetUnitsPerEm()
{
  return MEMORY[0x1E0D225E8]();
}

uint64_t FPFontGetVMetrics()
{
  return MEMORY[0x1E0D225F0]();
}

uint64_t FPFontGetVariation()
{
  return MEMORY[0x1E0D225F8]();
}

uint64_t FPFontGetVariationAxes()
{
  return MEMORY[0x1E0D22600]();
}

uint64_t FPFontIsBitmapOnly()
{
  return MEMORY[0x1E0D22640]();
}

uint64_t FPFontIsNamedInstance()
{
  return MEMORY[0x1E0D22648]();
}

uint64_t FPFontRelease()
{
  return MEMORY[0x1E0D22660]();
}

uint64_t FPFontRetain()
{
  return MEMORY[0x1E0D22668]();
}

uint64_t FPFontShouldAutoHint()
{
  return MEMORY[0x1E0D22670]();
}

uint64_t FPGetFontSubsetFormat()
{
  return MEMORY[0x1E0D22678]();
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x1E0CBBB40](buffer);
}

size_t IOSurfaceGetBytesPerRow(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBB90](buffer);
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC28](buffer);
}

OSType IOSurfaceGetPixelFormat(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC68](buffer);
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1E0CBBD28](buffer, *(_QWORD *)&options, seed);
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1E0CBBE88](buffer, *(_QWORD *)&options, seed);
}

id NSAllocateObject(Class aClass, NSUInteger extraBytes, NSZone *zone)
{
  return (id)MEMORY[0x1E0CB2868](aClass, extraBytes, zone);
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2;
  NSUInteger v3;
  NSRange result;

  v2 = MEMORY[0x1E0CB2C58](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

void NSZoneFree(NSZone *zone, void *ptr)
{
  MEMORY[0x1E0CB3458](zone, ptr);
}

NSZone *__cdecl NSZoneFromPointer(void *ptr)
{
  return (NSZone *)MEMORY[0x1E0CB3460](ptr);
}

void *__cdecl NSZoneMalloc(NSZone *zone, NSUInteger size)
{
  return (void *)MEMORY[0x1E0CB3468](zone, size);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1E0CD65F0](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1E0CD6610](allocator);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
  MEMORY[0x1E0C80940](a1, a2, *(_QWORD *)&a3);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

uint64_t _CFBundleGetMainBundleIfLooksLikeBundle()
{
  return MEMORY[0x1E0C9A028]();
}

uint64_t _CFDictionaryIsMutable()
{
  return MEMORY[0x1E0C9A110]();
}

uint64_t _CFExecutableLinkedOnOrAfter()
{
  return MEMORY[0x1E0C9A178]();
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1E0C9A498]();
}

uint64_t _CFRuntimeGetClassWithTypeID()
{
  return MEMORY[0x1E0C9A4A0]();
}

uint64_t _CFRuntimeInitStaticInstance()
{
  return MEMORY[0x1E0C9A4A8]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1E0C9A4B0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t PB::TextFormatter::beginObject(PB::TextFormatter *this, const char *a2)
{
  return MEMORY[0x1E0D82EC0](this, a2);
}

uint64_t PB::TextFormatter::format()
{
  return MEMORY[0x1E0D82EC8]();
}

{
  return MEMORY[0x1E0D82ED0]();
}

uint64_t PB::TextFormatter::format(PB::TextFormatter *this, const char *a2)
{
  return MEMORY[0x1E0D82ED8](this, a2);
}

{
  return MEMORY[0x1E0D82EF8](this, a2);
}

{
  return MEMORY[0x1E0D82F00](this, a2);
}

{
  return MEMORY[0x1E0D82F08](this, a2);
}

uint64_t PB::TextFormatter::format(PB::TextFormatter *this, const char *a2, double a3)
{
  return MEMORY[0x1E0D82EE0](this, a2, a3);
}

uint64_t PB::TextFormatter::format(PB::TextFormatter *this, const char *a2, float a3)
{
  return MEMORY[0x1E0D82EE8](this, a2, a3);
}

uint64_t PB::TextFormatter::endObject(PB::TextFormatter *this)
{
  return MEMORY[0x1E0D82F10](this);
}

void PB::Base::~Base(PB::Base *this)
{
  MEMORY[0x1E0D82F18](this);
}

uint64_t PB::Data::Data(PB::Data *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1E0D82F28](this, a2);
}

uint64_t PB::Data::Data(PB::Data *this, const PB::Data *a2)
{
  return MEMORY[0x1E0D82F30](this, a2);
}

uint64_t PB::Reader::recallMark()
{
  return MEMORY[0x1E0D82F38]();
}

uint64_t PB::Reader::read(PB::Reader *this, PB::Data *a2)
{
  return MEMORY[0x1E0D82F40](this, a2);
}

uint64_t PB::Reader::read()
{
  return MEMORY[0x1E0D82F48]();
}

uint64_t PB::Reader::skip(PB::Reader *this)
{
  return MEMORY[0x1E0D82F58](this);
}

uint64_t PB::Reader::placeMark()
{
  return MEMORY[0x1E0D82F60]();
}

uint64_t PB::Reader::Reader(PB::Reader *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1E0D82F68](this, a2);
}

uint64_t PB::Writer::writeVarInt(PB::Writer *this)
{
  return MEMORY[0x1E0D82F90](this);
}

{
  return MEMORY[0x1E0D82F98](this);
}

{
  return MEMORY[0x1E0D82FA0](this);
}

uint64_t PB::Writer::writeSubmessage(PB::Writer *this, const PB::Base *a2)
{
  return MEMORY[0x1E0D82FA8](this, a2);
}

uint64_t PB::Writer::write(PB::Writer *this, const PB::Data *a2)
{
  return MEMORY[0x1E0D82FB0](this, a2);
}

uint64_t PB::Writer::write()
{
  return MEMORY[0x1E0D82FB8]();
}

uint64_t PB::Writer::write(PB::Writer *this)
{
  return MEMORY[0x1E0D82FC8](this);
}

uint64_t PB::Writer::write(PB::Writer *this, double a2)
{
  return MEMORY[0x1E0D82FD0](this, a2);
}

uint64_t PB::Writer::write(PB::Writer *this, float a2)
{
  return MEMORY[0x1E0D82FD8](this, a2);
}

uint64_t PB::Writer::Writer(PB::Writer *this)
{
  return MEMORY[0x1E0D82FF0](this);
}

void PB::Writer::~Writer(PB::Writer *this)
{
  MEMORY[0x1E0D82FF8](this);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x1E0DE41C8](this, __c, __pos);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x1E0DE41F0]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4278](this, a2);
}

{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4290](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::logic_error *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4298](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4308](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x1E0DE4320](this, a2);
}

void std::invalid_argument::~invalid_argument(std::invalid_argument *this)
{
  MEMORY[0x1E0DE4368](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
  MEMORY[0x1E0DE43F8](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add, __p_new_stuff);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4440](this, __s);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4488](this, __pos, __n1, __s);
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
  MEMORY[0x1E0DE44B0](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1E0DE44C8](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1E0DE46B0]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1E0DE46B8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE4700]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1E0DE47A8]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

double std::stod(const std::string *__str, size_t *__idx)
{
  double result;

  MEMORY[0x1E0DE4A68](__str, __idx);
  return result;
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA0](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA8](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x1E0DE4AB8](this);
}

uint64_t std::__sort<std::__less<double,double> &,double *>()
{
  return MEMORY[0x1E0DE4AE0]();
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x1E0DE4C50](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

uint64_t operator delete[]()
{
  return off_1E1620C70();
}

void operator delete(void *__p)
{
  off_1E1620C78(__p);
}

uint64_t operator delete()
{
  return off_1E1620C80();
}

uint64_t operator new[]()
{
  return off_1E1620C88();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E1620C90(__sz);
}

uint64_t operator new()
{
  return off_1E1620C98();
}

uint64_t __CFSetLastAllocationEventName()
{
  return MEMORY[0x1E0C9A9A0]();
}

__darwin_ct_rune_t ___tolower_l(__darwin_ct_rune_t a1, locale_t a2)
{
  return MEMORY[0x1E0C80A40](*(_QWORD *)&a1, a2);
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

void __cxa_bad_cast(void)
{
  MEMORY[0x1E0DE5070]();
}

void __cxa_bad_typeid(void)
{
  MEMORY[0x1E0DE5078]();
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1E0DE50E0](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

int __maskrune_l(__darwin_ct_rune_t a1, unint64_t a2, locale_t a3)
{
  return MEMORY[0x1E0C80B58](*(_QWORD *)&a1, a2, a3);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1E0C80B68]();
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x1E0C80BC8](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x1E0C80BD0](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

int __sprintf_chk(char *a1, int a2, size_t a3, const char *a4, ...)
{
  return MEMORY[0x1E0C80BE8](a1, *(_QWORD *)&a2, a3, a4);
}

uint64_t __strcat_chk()
{
  return MEMORY[0x1E0C80C30]();
}

uint64_t __strcpy_chk()
{
  return MEMORY[0x1E0C80C38]();
}

uint64_t __strlcat_chk()
{
  return MEMORY[0x1E0C80C40]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1E0C80C48]();
}

uint64_t __strncat_chk()
{
  return MEMORY[0x1E0C80C50]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C70](*(_QWORD *)&a1);
}

uint64_t _amkrtemp()
{
  return MEMORY[0x1E0C80CB8]();
}

const mach_header *__cdecl _dyld_get_image_header(uint32_t image_index)
{
  return (const mach_header *)MEMORY[0x1E0C80E60](*(_QWORD *)&image_index);
}

const char *__cdecl _dyld_get_image_name(uint32_t image_index)
{
  return (const char *)MEMORY[0x1E0C80E68](*(_QWORD *)&image_index);
}

uint32_t _dyld_image_count(void)
{
  return MEMORY[0x1E0C80EB8]();
}

uint64_t _objc_getClassForTag()
{
  return MEMORY[0x1E0DE79A0]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

uint64_t _xpc_runtime_is_app_sandboxed()
{
  return MEMORY[0x1E0C812A0]();
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1E0C813B0]();
}

long double acos(long double __x)
{
  long double result;

  MEMORY[0x1E0C81500](__x);
  return result;
}

float acosf(float a1)
{
  float result;

  MEMORY[0x1E0C81508](a1);
  return result;
}

long double acosh(long double __x)
{
  long double result;

  MEMORY[0x1E0C81510](__x);
  return result;
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
  MEMORY[0x1E0C81580](__buf, __nbytes);
}

long double asin(long double __x)
{
  long double result;

  MEMORY[0x1E0C81598](__x);
  return result;
}

long double asinh(long double __x)
{
  long double result;

  MEMORY[0x1E0C815A8](__x);
  return result;
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1E0C81608](a1, a2);
}

long double atan(long double __x)
{
  long double result;

  MEMORY[0x1E0C81618](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  long double result;

  MEMORY[0x1E0C81620](__y, __x);
  return result;
}

float atan2f(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C81628](a1, a2);
  return result;
}

long double atanh(long double __x)
{
  long double result;

  MEMORY[0x1E0C81638](__x);
  return result;
}

double atof(const char *a1)
{
  double result;

  MEMORY[0x1E0C81658](a1);
  return result;
}

int backtrace(void **a1, int a2)
{
  return MEMORY[0x1E0C816B8](a1, *(_QWORD *)&a2);
}

void backtrace_image_offsets(void *const *array, image_offset *image_offsets, int size)
{
  MEMORY[0x1E0C816C0](array, image_offsets, *(_QWORD *)&size);
}

char *__cdecl basename_r(const char *a1, char *a2)
{
  return (char *)MEMORY[0x1E0C816E0](a1, a2);
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x1E0C81738](__key, __base, __nel, __width, __compar);
}

void *__cdecl bsearch_b(const void *__key, const void *__base, size_t __nel, size_t __width, void *__compar)
{
  return (void *)MEMORY[0x1E0C81740](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int cache_create(const char *name, const cache_attributes_t *attrs, cache_t **cache_out)
{
  return MEMORY[0x1E0C81770](name, attrs, cache_out);
}

int cache_get_and_retain(cache_t *cache, void *key, void **value_out)
{
  return MEMORY[0x1E0C81788](cache, key, value_out);
}

uintptr_t cache_hash_byte_string(const char *data, size_t bytes)
{
  return MEMORY[0x1E0C817C0](data, bytes);
}

uint64_t cache_print()
{
  return MEMORY[0x1E0C817D0]();
}

int cache_release_value(cache_t *cache, void *value)
{
  return MEMORY[0x1E0C817D8](cache, value);
}

int cache_remove(cache_t *cache, void *key)
{
  return MEMORY[0x1E0C817E0](cache, key);
}

int cache_remove_all(cache_t *cache)
{
  return MEMORY[0x1E0C817E8](cache);
}

int cache_set_and_retain(cache_t *cache, void *key, void *value, cache_cost_t cost)
{
  return MEMORY[0x1E0C817F8](cache, key, value, cost);
}

uint64_t cache_set_count_hint()
{
  return MEMORY[0x1E0C81808]();
}

long double cbrt(long double __x)
{
  long double result;

  MEMORY[0x1E0C81850](__x);
  return result;
}

Ivar *__cdecl class_copyIvarList(Class cls, unsigned int *outCount)
{
  return (Ivar *)MEMORY[0x1E0DE7A70](cls, outCount);
}

Class class_getSuperclass(Class cls)
{
  return (Class)MEMORY[0x1E0DE7AD8](cls);
}

void clearerr(FILE *a1)
{
  MEMORY[0x1E0C82648](a1);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x1E0C82698](a1);
}

size_t confstr(int a1, char *a2, size_t a3)
{
  return MEMORY[0x1E0C826D0](*(_QWORD *)&a1, a2, a3);
}

long double cos(long double __x)
{
  long double result;

  MEMORY[0x1E0C82B40](__x);
  return result;
}

long double cosh(long double __x)
{
  long double result;

  MEMORY[0x1E0C82B50](__x);
  return result;
}

int deflate(z_streamp strm, int flush)
{
  return MEMORY[0x1E0DE92C0](strm, *(_QWORD *)&flush);
}

int deflateEnd(z_streamp strm)
{
  return MEMORY[0x1E0DE92D0](strm);
}

int deflateInit_(z_streamp strm, int level, const char *version, int stream_size)
{
  return MEMORY[0x1E0DE92E0](strm, *(_QWORD *)&level, version, *(_QWORD *)&stream_size);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
  MEMORY[0x1E0C82E10](predicate, context, function);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x1E0C83028](a1, a2);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1E0C83158]();
}

long double erf(long double __x)
{
  long double result;

  MEMORY[0x1E0C831F0](__x);
  return result;
}

long double erfc(long double __x)
{
  long double result;

  MEMORY[0x1E0C831F8](__x);
  return result;
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x1E0C83280](__x);
  return result;
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83288](__x);
  return result;
}

float exp2f(float a1)
{
  float result;

  MEMORY[0x1E0C83290](a1);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x1E0C83298](a1);
  return result;
}

long double expm1(long double __x)
{
  long double result;

  MEMORY[0x1E0C832A0](__x);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

long double fdim(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C83310](__x, __y);
  return result;
}

FILE *__cdecl fdopen(int a1, const char *a2)
{
  return (FILE *)MEMORY[0x1E0C83318](*(_QWORD *)&a1, a2);
}

int ferror(FILE *a1)
{
  return MEMORY[0x1E0C83348](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1E0C83370](a1);
}

float fmodf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C83448](a1, a2);
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

int fprintf_l(FILE *a1, locale_t a2, const char *a3, ...)
{
  return MEMORY[0x1E0C83480](a1, a2, a3);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1E0C83488](*(_QWORD *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1E0C83490](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C834A0](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x1E0C83530](a1, a2, *(_QWORD *)&a3);
}

int fseeko(FILE *__stream, off_t a2, int __whence)
{
  return MEMORY[0x1E0C83538](__stream, a2, *(_QWORD *)&__whence);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83560](*(_QWORD *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

int getattrlist(const char *a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return MEMORY[0x1E0C83610](a1, a2, a3, a4, *(_QWORD *)&a5);
}

int getc(FILE *a1)
{
  return MEMORY[0x1E0C83638](a1);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1E0C83660](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

long double hypot(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C838E8](__x, __y);
  return result;
}

int inflate(z_streamp strm, int flush)
{
  return MEMORY[0x1E0DE93A0](strm, *(_QWORD *)&flush);
}

int inflateEnd(z_streamp strm)
{
  return MEMORY[0x1E0DE93B8](strm);
}

int inflateInit_(z_streamp strm, const char *version, int stream_size)
{
  return MEMORY[0x1E0DE93D0](strm, version, *(_QWORD *)&stream_size);
}

int inflateReset(z_streamp strm)
{
  return MEMORY[0x1E0DE93D8](strm);
}

ptrdiff_t ivar_getOffset(Ivar v)
{
  return MEMORY[0x1E0DE7B30](v);
}

const char *__cdecl ivar_getTypeEncoding(Ivar v)
{
  return (const char *)MEMORY[0x1E0DE7B38](v);
}

double j0(double a1)
{
  double result;

  MEMORY[0x1E0C839D0](a1);
  return result;
}

double j1(double a1)
{
  double result;

  MEMORY[0x1E0C839D8](a1);
  return result;
}

double lgamma_r(double a1, int *a2)
{
  double result;

  MEMORY[0x1E0C83B68](a2, a1);
  return result;
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BB8](__x);
  return result;
}

long double log10(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BC0](__x);
  return result;
}

long double log1p(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BD0](__x);
  return result;
}

long double log2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BE8](__x);
  return result;
}

long double logb(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BF8](__x);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x1E0C83C00](a1);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

malloc_zone_t *malloc_default_purgeable_zone(void)
{
  return (malloc_zone_t *)MEMORY[0x1E0C83E80]();
}

malloc_zone_t *malloc_default_zone(void)
{
  return (malloc_zone_t *)MEMORY[0x1E0C83E88]();
}

int malloc_make_nonpurgeable(void *ptr)
{
  return MEMORY[0x1E0C83EC0](ptr);
}

void malloc_make_purgeable(void *ptr)
{
  MEMORY[0x1E0C83EC8](ptr);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x1E0C83F08](memptr, alignment, size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

void *__cdecl malloc_type_zone_calloc(malloc_zone_t *zone, size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F20](zone, count, size, type_id);
}

void malloc_zone_free(malloc_zone_t *zone, void *ptr)
{
  MEMORY[0x1E0C83F70](zone, ptr);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x1E0C840B8](__b, __pattern16, __len);
}

void memset_pattern4(void *__b, const void *__pattern4, size_t __len)
{
  MEMORY[0x1E0C840C0](__b, __pattern4, __len);
}

int mergesort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return MEMORY[0x1E0C840D8](__base, __nel, __width, __compar);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1E0C84160](a1, a2);
}

int mkstemps(char *a1, int a2)
{
  return MEMORY[0x1E0C841B0](a1, *(_QWORD *)&a2);
}

char *__cdecl mktemp(char *a1)
{
  return (char *)MEMORY[0x1E0C841C0](a1);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1E0C841D8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

long double modf(long double __x, long double *__y)
{
  long double result;

  MEMORY[0x1E0C841E0](__y, __x);
  return result;
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1E0C84220](a1, a2);
}

double nan(const char *a1)
{
  double result;

  MEMORY[0x1E0C84228](a1);
  return result;
}

long double nextafter(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C843A8](__x, __y);
  return result;
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyCppObjectAtomic(void *dest, const void *src, void (__cdecl *copyHelper)(void *, const void *))
{
  MEMORY[0x1E0DE7C20](dest, src, copyHelper);
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
  MEMORY[0x1E0DE7C30](dest, src, size, atomic, hasStrong);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_throw(id exception)
{
  MEMORY[0x1E0DE7CA0](exception);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F98](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

void objc_terminate(void)
{
  MEMORY[0x1E0DE7FD8]();
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x1E0DE7FF8](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x1E0C844C0](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_variant_allows_internal_security_policies()
{
  return MEMORY[0x1E0C849D8]();
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1E0C849F0]();
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C84BC0](a1, a2);
  return result;
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1E0C84BC8](*(_QWORD *)&__fd, __buf, __nbyte, a4);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return MEMORY[0x1E0C84CB0](a1);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x1E0C84CC8](a1);
}

int pthread_attr_setdetachstate(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x1E0C84CD8](a1, *(_QWORD *)&a2);
}

int pthread_attr_setscope(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x1E0C84CF8](a1, *(_QWORD *)&a2);
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D18](a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D20](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1E0C84D28](a1, a2);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1E0C84D48](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1E0C84D50](a1, a2, a3, a4);
}

void *__cdecl pthread_get_stackaddr_np(pthread_t a1)
{
  return (void *)MEMORY[0x1E0C84DA0](a1);
}

size_t pthread_get_stacksize_np(pthread_t a1)
{
  return MEMORY[0x1E0C84DA8](a1);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1E0C84DC0](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1E0C84DE0](a1, a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_mutexattr_destroy(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1E0C84E40](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1E0C84E48](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1E0C84E60](a1, *(_QWORD *)&a2);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1E0C84E68](a1, a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1E0C84ED8]();
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1E0C84F18](a1, a2);
}

int putchar(int a1)
{
  return MEMORY[0x1E0C84F50](*(_QWORD *)&a1);
}

int puts(const char *a1)
{
  return MEMORY[0x1E0C84F60](a1);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  MEMORY[0x1E0C84F88](__base, __nel, __width, __compar);
}

void qsort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
  MEMORY[0x1E0C84F90](__base, __nel, __width, __compar);
}

void qsort_r(void *__base, size_t __nel, size_t __width, void *a4, int (__cdecl *__compar)(void *, const void *, const void *))
{
  MEMORY[0x1E0C84F98](__base, __nel, __width, a4, __compar);
}

int rand(void)
{
  return MEMORY[0x1E0C84FB0]();
}

int rand_r(unsigned int *a1)
{
  return MEMORY[0x1E0C84FB8](a1);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x1E0C85008](a1);
}

long double remquo(long double __x, long double __y, int *__z)
{
  long double result;

  MEMORY[0x1E0C850F8](__z, __x, __y);
  return result;
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
  MEMORY[0x1E0C85100](__from, __to, __ec);
}

uint64_t rootless_trusted_by_self_token()
{
  return MEMORY[0x1E0C85160]();
}

uint64_t rootless_verify_trusted_by_self_token()
{
  return MEMORY[0x1E0C85168]();
}

long double sin(long double __x)
{
  long double result;

  MEMORY[0x1E0C85418](__x);
  return result;
}

long double sinh(long double __x)
{
  long double result;

  MEMORY[0x1E0C85428](__x);
  return result;
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1E0C85438](*(_QWORD *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int snprintf_l(char *a1, size_t a2, locale_t a3, const char *a4, ...)
{
  return MEMORY[0x1E0C85448](a1, a2, a3, a4);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85460](a1, a2);
}

int sprintf_l(char *a1, locale_t a2, const char *a3, ...)
{
  return MEMORY[0x1E0C85468](a1, a2, a3);
}

void srandom(unsigned int a1)
{
  MEMORY[0x1E0C85488](*(_QWORD *)&a1);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85498](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

char *__cdecl strcat(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1E0C85510](__s1, __s2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C85518](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x1E0C85530](__dst, __src);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1E0C85540](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85568](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x1E0C85590](a1, a2, a3);
}

char *__cdecl strncat(char *__s1, const char *__s2, size_t __n)
{
  return (char *)MEMORY[0x1E0C855A0](__s1, __s2, __n);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1E0C855B0](__dst, __src, __n);
}

char *__cdecl strndup(const char *__s1, size_t __n)
{
  return (char *)MEMORY[0x1E0C855B8](__s1, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C855E8](__s, *(_QWORD *)&__c);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1E0C85610](__s1, __s2);
}

double strtod_l(const char *a1, char **a2, locale_t a3)
{
  double result;

  MEMORY[0x1E0C85620](a1, a2, a3);
  return result;
}

intmax_t strtoimax_l(const char *nptr, char **endptr, int base, locale_t a4)
{
  return MEMORY[0x1E0C85640](nptr, endptr, *(_QWORD *)&base, a4);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85658](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t strtol_l(const char *a1, char **a2, int a3, locale_t a4)
{
  return MEMORY[0x1E0C85660](a1, a2, *(_QWORD *)&a3, a4);
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x1E0DEEAC0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1E0DEEAF8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1E0DEEB20]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1E0DEEB28]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1E0DEEBE0]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1E0DEEC00]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1E0DEEC08]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1E0DEEC40]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1E0DEECB0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x1E0DEED08]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1E0DEED20]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x1E0DEED28]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1E0DEED60]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1E0DEED88]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1E0DEED98]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1E0DEEDE8]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1E0DEEE38]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1E0DEEE50]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1E0DEEE98]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1E0C857A0](a1, a2, a3, a4, a5);
}

long double tan(long double __x)
{
  long double result;

  MEMORY[0x1E0C857E8](__x);
  return result;
}

long double tanh(long double __x)
{
  long double result;

  MEMORY[0x1E0C857F8](__x);
  return result;
}

long double tgamma(long double __x)
{
  long double result;

  MEMORY[0x1E0C858D0](__x);
  return result;
}

time_t time(time_t *a1)
{
  return MEMORY[0x1E0C85950](a1);
}

UCharDirection u_charDirection(UChar32 c)
{
  return MEMORY[0x1E0DE5960](*(_QWORD *)&c);
}

uint64_t ubidi_close()
{
  return MEMORY[0x1E0DE5BD8]();
}

uint64_t ubidi_countRuns()
{
  return MEMORY[0x1E0DE5BE0]();
}

uint64_t ubidi_getLength()
{
  return MEMORY[0x1E0DE5BF0]();
}

uint64_t ubidi_getProcessedLength()
{
  return MEMORY[0x1E0DE5C20]();
}

uint64_t ubidi_getResultLength()
{
  return MEMORY[0x1E0DE5C28]();
}

uint64_t ubidi_getVisualMap()
{
  return MEMORY[0x1E0DE5C30]();
}

uint64_t ubidi_open()
{
  return MEMORY[0x1E0DE5C38]();
}

uint64_t ubidi_setContext()
{
  return MEMORY[0x1E0DE5C50]();
}

uint64_t ubidi_setPara()
{
  return MEMORY[0x1E0DE5C60]();
}

uint64_t ubidi_setReorderingMode()
{
  return MEMORY[0x1E0DE5C70]();
}

uint64_t ubidi_writeReordered()
{
  return MEMORY[0x1E0DE5C80]();
}

int unlink(const char *a1)
{
  return MEMORY[0x1E0C859B8](a1);
}

vImage_Error vImageByteSwap_Planar16U(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CC38](src, dest, *(_QWORD *)&flags);
}

uint64_t vImageCGCompositeConstMask_ARGB16F()
{
  return MEMORY[0x1E0C8CC40]();
}

uint64_t vImageCGCompositeConstShape_ARGB16F()
{
  return MEMORY[0x1E0C8CC48]();
}

uint64_t vImageCGCompositeImage_ARGB16F()
{
  return MEMORY[0x1E0C8CC50]();
}

uint64_t vImageCGCompositeMarkConstDeepMaskARGB_ARGB16F()
{
  return MEMORY[0x1E0C8CC58]();
}

uint64_t vImageCGCompositeMarkConstDeepMaskXRGB_ARGB16F()
{
  return MEMORY[0x1E0C8CC60]();
}

uint64_t vImageCGCompositePixelMask_ARGB16F()
{
  return MEMORY[0x1E0C8CC68]();
}

uint64_t vImageCGCompositePixelShape_ARGB16F()
{
  return MEMORY[0x1E0C8CC70]();
}

vImage_Error vImageConvert_AnyToAny(const vImageConverterRef converter, const vImage_Buffer *srcs, const vImage_Buffer *dests, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CEF0](converter, srcs, dests, tempBuffer, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_Planar8ToBGRX8888(const vImage_Buffer *blue, const vImage_Buffer *green, const vImage_Buffer *red, Pixel_8 alpha, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CF68](blue, green, red, alpha, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_Planar8ToXRGB8888(Pixel_8 alpha, const vImage_Buffer *red, const vImage_Buffer *green, const vImage_Buffer *blue, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CF70](alpha, red, green, blue, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_RGB888toARGB8888(const vImage_Buffer *a1, const vImage_Buffer *a2, Pixel_8 a3, const vImage_Buffer *a4, BOOL a5, vImage_Flags a6)
{
  return MEMORY[0x1E0C8D028](a1, a2, a3, a4, a5, *(_QWORD *)&a6);
}

vImage_Error vImageConvert_RGB888toBGRA8888(const vImage_Buffer *a1, const vImage_Buffer *a2, Pixel_8 a3, const vImage_Buffer *a4, BOOL a5, vImage_Flags a6)
{
  return MEMORY[0x1E0C8D030](a1, a2, a3, a4, a5, *(_QWORD *)&a6);
}

vImage_Error vImageConvert_RGB888toRGBA8888(const vImage_Buffer *a1, const vImage_Buffer *a2, Pixel_8 a3, const vImage_Buffer *a4, BOOL a5, vImage_Flags a6)
{
  return MEMORY[0x1E0C8D048](a1, a2, a3, a4, a5, *(_QWORD *)&a6);
}

vImage_Error vImageConvert_XRGB2101010ToARGB16F(const vImage_Buffer *src, Pixel_F alpha, const vImage_Buffer *dest, int32_t RGB101010RangeMin, int32_t RGB101010RangeMax, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8D0A0](src, dest, *(_QWORD *)&RGB101010RangeMin, *(_QWORD *)&RGB101010RangeMax, permuteMap, *(_QWORD *)&flags, alpha);
}

vImageConverterRef vImageConverter_CreateWithCGColorConversionInfo(CGColorConversionInfoRef colorConversionInfoRef, const vImage_CGImageFormat *sFormat, const vImage_CGImageFormat *dFormat, const CGFloat *bg, vImage_Flags flags, vImage_Error *error)
{
  return (vImageConverterRef)MEMORY[0x1E0C8D118](colorConversionInfoRef, sFormat, dFormat, bg, *(_QWORD *)&flags, error);
}

vImageConverterRef vImageConverter_CreateWithCGImageFormat(const vImage_CGImageFormat *srcFormat, const vImage_CGImageFormat *destFormat, const CGFloat *backgroundColor, vImage_Flags flags, vImage_Error *error)
{
  return (vImageConverterRef)MEMORY[0x1E0C8D120](srcFormat, destFormat, backgroundColor, *(_QWORD *)&flags, error);
}

void vImageConverter_Release(vImageConverterRef converter)
{
  MEMORY[0x1E0C8D160](converter);
}

vImage_Error vImageConvolve_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImagePixelCount srcOffsetToROI_X, vImagePixelCount srcOffsetToROI_Y, const int16_t *kernel, uint32_t kernel_height, uint32_t kernel_width, int32_t divisor, const Pixel_8888 backgroundColor, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D1B0](src, dest, tempBuffer, srcOffsetToROI_X, srcOffsetToROI_Y, kernel, *(_QWORD *)&kernel_height, *(_QWORD *)&kernel_width);
}

vImage_Error vImageConvolve_ARGBFFFF(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImagePixelCount srcOffsetToROI_X, vImagePixelCount srcOffsetToROI_Y, const float *kernel, uint32_t kernel_height, uint32_t kernel_width, const Pixel_FFFF backgroundColor, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D1B8](src, dest, tempBuffer, srcOffsetToROI_X, srcOffsetToROI_Y, kernel, *(_QWORD *)&kernel_height, *(_QWORD *)&kernel_width);
}

vImage_Error vImageConvolve_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImagePixelCount srcOffsetToROI_X, vImagePixelCount srcOffsetToROI_Y, const int16_t *kernel, uint32_t kernel_height, uint32_t kernel_width, int32_t divisor, Pixel_8 backgroundColor, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D1D0](src, dest, tempBuffer, srcOffsetToROI_X, srcOffsetToROI_Y, kernel, *(_QWORD *)&kernel_height, *(_QWORD *)&kernel_width);
}

vImage_Error vImageDilate_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, vImagePixelCount srcOffsetToROI_X, vImagePixelCount srcOffsetToROI_Y, const unsigned __int8 *kernel, vImagePixelCount kernel_height, vImagePixelCount kernel_width, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D210](src, dest, srcOffsetToROI_X, srcOffsetToROI_Y, kernel, kernel_height, kernel_width, *(_QWORD *)&flags);
}

vImage_Error vImageExtractChannel_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, uint64_t channelIndex, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D288](src, dest, channelIndex, *(_QWORD *)&flags);
}

vImage_Error vImageMatrixMultiply_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const int16_t matrix[16], int32_t divisor, const int16_t *pre_bias, const int32_t *post_bias, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D410](src, dest, matrix, *(_QWORD *)&divisor, pre_bias, post_bias, *(_QWORD *)&flags);
}

vImage_Error vImageMatrixMultiply_ARGBFFFF(const vImage_Buffer *src, const vImage_Buffer *dest, const float matrix[16], const float *pre_bias, const float *post_bias, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D420](src, dest, matrix, pre_bias, post_bias, *(_QWORD *)&flags);
}

vImage_Error vImageMin_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImagePixelCount srcOffsetToROI_X, vImagePixelCount srcOffsetToROI_Y, vImagePixelCount kernel_height, vImagePixelCount kernel_width, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D470](src, dest, tempBuffer, srcOffsetToROI_X, srcOffsetToROI_Y, kernel_height, kernel_width, *(_QWORD *)&flags);
}

vImage_Error vImageOverwriteChannelsWithScalar_ARGB8888(Pixel_8 scalar, const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t copyMask, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D4B0](scalar, src, dest, copyMask, *(_QWORD *)&flags);
}

vImage_Error vImageOverwriteChannelsWithScalar_ARGBFFFF(Pixel_F scalar, const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t copyMask, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D4B8](src, dest, copyMask, *(_QWORD *)&flags, scalar);
}

vImage_Error vImagePermuteChannelsWithMaskedInsert_ARGB16U(const vImage_Buffer *src, const vImage_Buffer *dest, const uint8_t permuteMap[4], uint8_t copyMask, const Pixel_ARGB_16U backgroundColor, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D4F8](src, dest, permuteMap, copyMask, backgroundColor, *(_QWORD *)&flags);
}

vImage_Error vImagePermuteChannelsWithMaskedInsert_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const uint8_t permuteMap[4], uint8_t copyMask, const Pixel_8888 backgroundColor, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D500](src, dest, permuteMap, copyMask, backgroundColor, *(_QWORD *)&flags);
}

vImage_Error vImagePermuteChannels_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8D520](src, dest, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImagePremultipliedAlphaBlendWithPermute_ARGB8888(const vImage_Buffer *srcTop, const vImage_Buffer *srcBottom, const vImage_Buffer *dest, const uint8_t permuteMap[4], BOOL makeDestAlphaOpaque, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D5B8](srcTop, srcBottom, dest, permuteMap, makeDestAlphaOpaque, *(_QWORD *)&flags);
}

vImage_Error vImagePremultipliedAlphaBlendWithPermute_RGBA8888(const vImage_Buffer *srcTop, const vImage_Buffer *srcBottom, const vImage_Buffer *dest, const uint8_t permuteMap[4], BOOL makeDestAlphaOpaque, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D5C0](srcTop, srcBottom, dest, permuteMap, makeDestAlphaOpaque, *(_QWORD *)&flags);
}

vImage_Error vImagePremultiplyData_RGBAFFFF(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D638](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageUnpremultiplyData_RGBAFFFF(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D7E0](src, dest, *(_QWORD *)&flags);
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  return MEMORY[0x1E0C85A58](a1, a2, a3);
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x1E0C85A68](a1, a2, a3);
}

int vfprintf_l(FILE *a1, locale_t a2, const char *a3, va_list a4)
{
  return MEMORY[0x1E0C85A70](a1, a2, a3, a4);
}

kern_return_t vm_copy(vm_map_t target_task, vm_address_t source_address, vm_size_t size, vm_address_t dest_address)
{
  return MEMORY[0x1E0C85A90](*(_QWORD *)&target_task, source_address, size, dest_address);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x1E0C85A98](*(_QWORD *)&target_task, address, size);
}

kern_return_t vm_protect(vm_map_t target_task, vm_address_t address, vm_size_t size, BOOLean_t set_maximum, vm_prot_t new_protection)
{
  return MEMORY[0x1E0C85AE0](*(_QWORD *)&target_task, address, size, *(_QWORD *)&set_maximum, *(_QWORD *)&new_protection);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1E0C85B98](__str, __size, __format, a4);
}

int vsnprintf_l(char *a1, size_t a2, locale_t a3, const char *a4, va_list a5)
{
  return MEMORY[0x1E0C85BA0](a1, a2, a3, a4, a5);
}

int vsscanf(const char *__str, const char *__format, va_list a3)
{
  return MEMORY[0x1E0C85BB0](__str, __format, a3);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1E0C85D40](*(_QWORD *)&__fd, __buf, __nbyte);
}

xmlBufferPtr xmlBufferCreate(void)
{
  return (xmlBufferPtr)MEMORY[0x1E0DE8C80]();
}

void xmlBufferFree(xmlBufferPtr buf)
{
  MEMORY[0x1E0DE8C88](buf);
}

xmlNodePtr xmlDocGetRootElement(const xmlDoc *doc)
{
  return (xmlNodePtr)MEMORY[0x1E0DE8D18](doc);
}

void xmlFreeDoc(xmlDocPtr cur)
{
  MEMORY[0x1E0DE8D38](cur);
}

void xmlFreeTextWriter(xmlTextWriterPtr writer)
{
  MEMORY[0x1E0DE8D60](writer);
}

xmlTextWriterPtr xmlNewTextWriterMemory(xmlBufferPtr buf, int compression)
{
  return (xmlTextWriterPtr)MEMORY[0x1E0DE8E48](buf, *(_QWORD *)&compression);
}

xmlChar *__cdecl xmlNodeListGetString(xmlDocPtr doc, const xmlNode *list, int inLine)
{
  return (xmlChar *)MEMORY[0x1E0DE8E78](doc, list, *(_QWORD *)&inLine);
}

xmlDocPtr xmlReadFile(const char *URL, const char *encoding, int options)
{
  return (xmlDocPtr)MEMORY[0x1E0DE8ED8](URL, encoding, *(_QWORD *)&options);
}

int xmlStrcmp(const xmlChar *str1, const xmlChar *str2)
{
  return MEMORY[0x1E0DE9000](str1, str2);
}

int xmlTextWriterEndDocument(xmlTextWriterPtr writer)
{
  return MEMORY[0x1E0DE90C8](writer);
}

int xmlTextWriterEndElement(xmlTextWriterPtr writer)
{
  return MEMORY[0x1E0DE90D0](writer);
}

int xmlTextWriterSetIndent(xmlTextWriterPtr writer, int indent)
{
  return MEMORY[0x1E0DE90E8](writer, *(_QWORD *)&indent);
}

int xmlTextWriterSetIndentString(xmlTextWriterPtr writer, const xmlChar *str)
{
  return MEMORY[0x1E0DE90F0](writer, str);
}

int xmlTextWriterStartDocument(xmlTextWriterPtr writer, const char *version, const char *encoding, const char *standalone)
{
  return MEMORY[0x1E0DE90F8](writer, version, encoding, standalone);
}

int xmlTextWriterStartElement(xmlTextWriterPtr writer, const xmlChar *name)
{
  return MEMORY[0x1E0DE9100](writer, name);
}

int xmlTextWriterWriteAttribute(xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *content)
{
  return MEMORY[0x1E0DE9108](writer, name, content);
}

int xmlTextWriterWriteFormatAttribute(xmlTextWriterPtr writer, const xmlChar *name, const char *format, ...)
{
  return MEMORY[0x1E0DE9118](writer, name, format);
}

int xmlTextWriterWriteFormatRaw(xmlTextWriterPtr writer, const char *format, ...)
{
  return MEMORY[0x1E0DE9120](writer, format);
}

int xmlTextWriterWriteRaw(xmlTextWriterPtr writer, const xmlChar *content)
{
  return MEMORY[0x1E0DE9128](writer, content);
}

xmlXPathObjectPtr xmlXPathEvalExpression(const xmlChar *str, xmlXPathContextPtr ctxt)
{
  return (xmlXPathObjectPtr)MEMORY[0x1E0DE9158](str, ctxt);
}

void xmlXPathFreeContext(xmlXPathContextPtr ctxt)
{
  MEMORY[0x1E0DE9160](ctxt);
}

void xmlXPathFreeObject(xmlXPathObjectPtr obj)
{
  MEMORY[0x1E0DE9168](obj);
}

xmlXPathContextPtr xmlXPathNewContext(xmlDocPtr doc)
{
  return (xmlXPathContextPtr)MEMORY[0x1E0DE9178](doc);
}

double y0(double a1)
{
  double result;

  MEMORY[0x1E0C86800](a1);
  return result;
}

double y1(double a1)
{
  double result;

  MEMORY[0x1E0C86808](a1);
  return result;
}

uint64_t sub_184E33368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGApplyGainMapHeadRoom_ptr[0] = (uint64_t (*)())CGApplyGainMapHeadRoom();
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))CGApplyGainMapHeadRoom_ptr[0])(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_184E333CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGBufIsConstantValue_ptr[0] = (uint64_t (*)())CGBufIsConstantValue();
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))CGBufIsConstantValue_ptr[0])(a1, a2, a3, a4, a5, a6, a7, a8);
}

