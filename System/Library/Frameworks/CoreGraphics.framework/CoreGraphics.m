BOOL CGColorSpaceUsesITUR_2100TF(CGColorSpaceRef a1)
{
  uint64_t v1;

  if (a1)
  {
    v1 = *((_QWORD *)a1 + 3);
    if (*(_BYTE *)(v1 + 16))
      LOBYTE(a1) = 1;
    else
      LOBYTE(a1) = *(_BYTE *)(v1 + 17) != 0;
  }
  return (char)a1;
}

BOOL CGColorSpaceIsHLGBased(CGColorSpaceRef s)
{
  if (s)
    LOBYTE(s) = *(_BYTE *)(*((_QWORD *)s + 3) + 17) != 0;
  return (char)s;
}

BOOL CGColorSpaceIsPQBased(CGColorSpaceRef s)
{
  if (s)
    LOBYTE(s) = *(_BYTE *)(*((_QWORD *)s + 3) + 16) != 0;
  return (char)s;
}

BOOL icc_md5_equal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = *(_DWORD *)(a1 + 20);
  if (v8 != 6 || (v8 = *(_DWORD *)(a2 + 20), v8 != 6))
    _CGHandleAssert("icc_get_icc_md5", 69, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpace_ICC.c", "state->type == kCGColorSpaceICCBased", "Colorspace not ICC based. type = %d", a6, a7, a8, v8);
  v9 = *(_QWORD *)(a1 + 88);
  v10 = *(_QWORD *)(a2 + 88);
  if (v9 == v10)
    return 1;
  v12 = *(_QWORD *)(v9 + 24);
  v11 = *(_QWORD *)(v9 + 32);
  v14 = *(_QWORD *)(v10 + 24);
  v13 = *(_QWORD *)(v10 + 32);
  return v12 == v14 && v11 == v13;
}

uint64_t CGColorSpaceEqualToColorSpaceIgnoringRange(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);

  if (a1 == a2)
    return 1;
  result = 0;
  if (!a1 || !a2)
    return result;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a2 + 24);
  if (v4 == v5)
    return 1;
  result = 0;
  if (v4 && v5)
  {
    if (*(_DWORD *)(v4 + 20) == *(_DWORD *)(v5 + 20)
      && (v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 104) + 32)) != 0)
    {
      return v6(v4);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

size_t CGColorSpaceGetNumberOfComponents(size_t space)
{
  if (space)
    return *(_QWORD *)(*(_QWORD *)(space + 24) + 40);
  return space;
}

CGColorSpaceModel CGColorSpaceGetModel(CGColorSpaceRef space)
{
  if (space)
    return *(_DWORD *)(*((_QWORD *)space + 3) + 24);
  else
    return -1;
}

BOOL CGColorSpaceIsUncalibrated(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(*(_QWORD *)(result + 24) + 9) != 0;
  return result;
}

void CGColorRelease(CGColorRef color)
{
  if (color)
    CFRelease(color);
}

size_t CGImageGetWidth(size_t image)
{
  if (image)
    return *(_QWORD *)(image + 40);
  return image;
}

BOOL CGRectIsNull(CGRect rect)
{
  return rect.origin.y == INFINITY || rect.origin.x == INFINITY;
}

size_t CGImageGetHeight(size_t image)
{
  if (image)
    return *(_QWORD *)(image + 48);
  return image;
}

void path_finalize(void **a1)
{
  CG::Path::~Path(a1 + 2);
}

CGColorSpaceRef CGColorSpaceRetain(CGColorSpaceRef space)
{
  if (space)
    CFRetain(space);
  return space;
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  CGAffineTransform *result;

  retstr->a = sx;
  retstr->b = 0.0;
  retstr->c = 0.0;
  retstr->d = sy;
  retstr->tx = 0.0;
  retstr->ty = 0.0;
  return result;
}

CGColorSpaceRef CGImageGetColorSpace(CGColorSpaceRef image)
{
  CGColorSpaceRef v1;
  CFTypeID v2;

  if (image)
  {
    v1 = image;
    v2 = CFGetTypeID(image);
    if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1)
      dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_211);
    if (v2 == CGImageGetTypeID_image_type_id)
      return (CGColorSpaceRef)*((_QWORD *)v1 + 18);
    else
      return 0;
  }
  return image;
}

unint64_t argb32_image_mark_argb32(unint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v6;
  unsigned int *v7;
  int v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned int *v15;
  uint64_t v16;
  char v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  char v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  char v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int *v60;
  int v61;
  unsigned int v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t *v96;

  v6 = *((unsigned __int8 *)a2 + 8);
  v89 = *a2;
  v7 = *(unsigned int **)(result + 32);
  if (*(_QWORD *)(result + 40))
    v8 = 0;
  else
    v8 = -16777216;
  v9 = (unsigned int *)*((_QWORD *)a2 + 2);
  v88 = *((_QWORD *)a2 + 3) - a5;
  v11 = *((_QWORD *)a2 + 15);
  v10 = *((_QWORD *)a2 + 16);
  v12 = *((_QWORD *)a2 + 7);
  v85 = *((_QWORD *)a2 + 9);
  v13 = *((_QWORD *)a2 + 5) + v85 * a4;
  v14 = (char *)v7
      + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
      + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3);
  v94 = result;
  v90 = a5;
  v86 = v12;
  v87 = v11;
  if (*(_QWORD *)(result + 176))
  {
    v84 = *((_QWORD *)a2 + 11);
    v82 = ~(-1 << v12);
    v83 = *((_QWORD *)a2 + 13);
    v81 = v12 - 4;
    v15 = (unsigned int *)(v14 - 4);
    v79 = a5;
    v80 = -v11;
    v78 = v10 + 16 * a3 + 8;
    while (1)
    {
      if (((v83 - v13) | (v13 - v84)) < 0)
      {
        v20 = 0;
        v95 = 0;
      }
      else
      {
        v16 = ((v13 & (unint64_t)v82) >> v81) & 0xF;
        v17 = weights_19497[v16];
        v18 = (unint64_t)(v16 - 7) >= 9;
        v19 = v80;
        if (!v18)
          v19 = v11;
        v95 = v19;
        v20 = v17 & 0xF;
      }
      v21 = *(_QWORD *)(v94 + 32) + (v13 >> v12) * v11;
      v92 = a6;
      v91 = v13;
      if (v89 != 1)
        break;
      if (a5 >= 1)
      {
        v23 = (uint64_t *)v78;
        v22 = v79;
        while (1)
        {
          v24 = *(v23 - 1);
          v25 = *v23;
          v26 = v21 + v24;
          if ((unint64_t)v15 >= v21 + v24)
            v27 = (unsigned int *)(v21 + v24);
          else
            v27 = v15;
          if (v27 < v7)
            v27 = v7;
          v28 = *v27;
          v29 = v25 & 0xF;
          if ((v25 & 0xF) != 0)
            break;
          if (v20)
          {
            v40 = (unsigned int *)(v26 + v95);
            if ((unint64_t)v15 < v26 + v95)
              v40 = v15;
            if (v40 < v7)
              v40 = v7;
            v41 = BLEND8_19499[v20];
            v38 = v28 - ((v41 & v28) >> v20);
            v39 = (v41 & *v40) >> v20;
            goto LABEL_42;
          }
LABEL_43:
          result = v28 | v8;
          if (v6 != 255)
            result = PDM_13345(result, v6);
          v23 += 2;
          *v9++ = result;
          if (!--v22)
            goto LABEL_85;
        }
        v30 = (unsigned int *)(v26 + (v25 >> 4));
        if (v15 < v30)
          v30 = v15;
        if (v30 < v7)
          v30 = v7;
        v31 = *v30;
        if (v20)
        {
          v32 = (unsigned int *)(v26 + v95);
          if (v15 >= v32)
            v33 = v32;
          else
            v33 = v15;
          if (v33 < v7)
            v33 = v7;
          v34 = *v33;
          v35 = (unsigned int *)((char *)v32 + (v25 >> 4));
          if (v15 < v35)
            v35 = v15;
          if (v35 < v7)
            v35 = v7;
          v36 = BLEND8_19499[v20];
          v28 = v28 - ((v36 & v28) >> v20) + ((v36 & v34) >> v20);
          v31 = v31 - ((v36 & v31) >> v20) + ((v36 & *v35) >> v20);
        }
        v37 = BLEND8_19499[*v23 & 0xF];
        v38 = v28 - ((v37 & v28) >> v29);
        v39 = (v37 & v31) >> v29;
LABEL_42:
        v28 = v38 + v39;
        goto LABEL_43;
      }
LABEL_85:
      v11 = v87;
      v9 += v88;
      LOBYTE(v12) = v86;
      v13 = v91 + v85;
      a6 = v92 - 1;
      a5 = v90;
      if (v92 == 1)
        return result;
    }
    if (a5 < 1)
      goto LABEL_85;
    v43 = (uint64_t *)v78;
    v42 = v79;
    while (1)
    {
      v44 = *(v43 - 1);
      v45 = *v43;
      v46 = v21 + v44;
      if ((unint64_t)v15 >= v21 + v44)
        v47 = (unsigned int *)(v21 + v44);
      else
        v47 = v15;
      if (v47 < v7)
        v47 = v7;
      v48 = *v47;
      v49 = v45 & 0xF;
      if ((v45 & 0xF) != 0)
        break;
      if (v20)
      {
        v60 = (unsigned int *)(v46 + v95);
        if ((unint64_t)v15 < v46 + v95)
          v60 = v15;
        if (v60 < v7)
          v60 = v7;
        v61 = BLEND8_19499[v20];
        v58 = v48 - ((v61 & v48) >> v20);
        v59 = (v61 & *v60) >> v20;
        goto LABEL_77;
      }
LABEL_78:
      v62 = v48 | v8;
      if (v6 != 255)
      {
        result = PDM_13345(v48 | v8, v6);
        v62 = result;
      }
      if (HIBYTE(v62))
      {
        if (HIBYTE(v62) == 255)
          *v9 = v62;
        else
          result = (unint64_t)DplusDM_13347(v9, v62, *v9, ~v62 >> 24);
      }
      v43 += 2;
      ++v9;
      if (!--v42)
        goto LABEL_85;
    }
    v50 = (unsigned int *)(v46 + (v45 >> 4));
    if (v15 < v50)
      v50 = v15;
    if (v50 < v7)
      v50 = v7;
    v51 = *v50;
    if (v20)
    {
      v52 = (unsigned int *)(v46 + v95);
      if (v15 >= v52)
        v53 = v52;
      else
        v53 = v15;
      if (v53 < v7)
        v53 = v7;
      v54 = *v53;
      v55 = (unsigned int *)((char *)v52 + (v45 >> 4));
      if (v15 < v55)
        v55 = v15;
      if (v55 < v7)
        v55 = v7;
      v56 = BLEND8_19499[v20];
      v48 = v48 - ((v56 & v48) >> v20) + ((v56 & v54) >> v20);
      v51 = v51 - ((v56 & v51) >> v20) + ((v56 & *v55) >> v20);
    }
    v57 = BLEND8_19499[*v43 & 0xF];
    v58 = v48 - ((v57 & v48) >> v49);
    v59 = (v57 & v51) >> v49;
LABEL_77:
    v48 = v58 + v59;
    goto LABEL_78;
  }
  v96 = (uint64_t *)(v10 + 16 * a3);
  v63 = v14 - 4;
  v93 = a5;
  do
  {
    v64 = *(char **)(v94 + 32);
    v65 = &v64[(v13 >> v12) * v11];
    v66 = v13;
    v67 = a6;
    if (v89 == 1)
    {
      if (a5 >= 1)
      {
        v68 = v96;
        v69 = v93;
        do
        {
          v70 = *v68;
          v68 += 2;
          v71 = &v65[v70];
          if (v63 < &v65[v70])
            v71 = v63;
          if (v71 < v64)
            v71 = v64;
          result = *(_DWORD *)v71 | v8;
          if (v6 != 255)
            result = PDM_13345(result, v6);
          *v9++ = result;
          --v69;
        }
        while (v69);
      }
    }
    else
    {
      v72 = v96;
      v73 = v93;
      if (a5 >= 1)
      {
        do
        {
          v74 = *v72;
          v72 += 2;
          v75 = &v65[v74];
          if (v63 < &v65[v74])
            v75 = v63;
          if ((unint64_t)v75 < *(_QWORD *)(v94 + 32))
            v75 = *(char **)(v94 + 32);
          v76 = *(_DWORD *)v75;
          v77 = v76 | v8;
          if (v6 != 255)
          {
            result = PDM_13345(v76 | v8, v6);
            v77 = result;
          }
          if (HIBYTE(v77))
          {
            if (HIBYTE(v77) == 255)
              *v9 = v77;
            else
              result = (unint64_t)DplusDM_13347(v9, v77, *v9, ~v77 >> 24);
          }
          ++v9;
          --v73;
        }
        while (v73);
      }
    }
    v11 = v87;
    v9 += v88;
    LOBYTE(v12) = v86;
    v13 = v66 + v85;
    a6 = v67 - 1;
    a5 = v90;
  }
  while (v67 != 1);
  return result;
}

void argb32_image_mark(uint64_t a1, uint64_t a2, int a3, __n128 a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  int v38;
  uint64_t v39;
  unsigned __int8 *v40;
  _QWORD *v41;
  void *v42;
  uint64_t v43;
  int v44;
  int v45;
  void *v46;
  void (*v47)(_QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  _BYTE *v49;
  int v50;
  unsigned int v51;
  int v52;
  _BYTE *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  float *v59;
  float v60;
  float v61;
  float v62;
  float v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  unsigned __int8 *v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float *v78;
  float v79;
  float v80;
  float v81;
  float v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unsigned __int8 v91;
  unsigned __int8 *v92;
  int v93;
  unsigned int v94;
  unsigned int *v95;
  unsigned int *v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  unsigned __int8 *v99;
  int v100;
  unint64_t v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  unsigned __int8 v106;
  int v107;
  unsigned __int8 *v108;
  unsigned int v109;
  int v110;
  unsigned int v111;
  unsigned int v112;
  int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  int v139;
  unsigned __int8 *v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  int v145;
  unsigned __int8 *v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  int v150;
  int v151;
  unsigned int v152;
  int v153;
  int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  int v158;
  int v159;
  unsigned int v160;
  int v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  int v167;
  unsigned int v168;
  unsigned int v169;
  int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  int v191;
  unsigned int v192;
  unsigned int v193;
  int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  int v199;
  unsigned int v200;
  unsigned int v201;
  int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  int v207;
  unsigned int v208;
  unsigned int v209;
  int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  int v215;
  unsigned int v216;
  unsigned int v217;
  int v218;
  unsigned int v219;
  unsigned int v220;
  unsigned __int32 v221;
  unsigned int v222;
  unsigned __int32 v223;
  unsigned __int32 v224;
  unsigned int v225;
  int v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  unsigned int v230;
  int v231;
  unsigned int v232;
  unsigned int v233;
  int v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  int v239;
  unsigned int v240;
  unsigned int v241;
  int v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  int v247;
  unsigned int v248;
  unsigned int v249;
  int v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  unsigned int v255;
  int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  int v269;
  unsigned int v270;
  unsigned int v271;
  int v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int v276;
  int v277;
  unsigned int v278;
  unsigned int v279;
  int v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  int v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  float *v297;
  float v298;
  float v299;
  float v300;
  float v301;
  int v302;
  int v303;
  int v304;
  int v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  float *v310;
  float v311;
  float v312;
  float v313;
  float v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  int v323;
  unsigned int *v324;
  unsigned __int8 v325;
  unsigned __int8 *v326;
  int v327;
  unsigned int v328;
  int v329;
  unsigned int v330;
  unsigned __int8 v331;
  unint64_t v332;
  uint64_t v333;
  void *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  _QWORD *v342;
  int v343;
  int *v344;
  int v345;
  uint64_t v346;
  uint64_t v347;
  void *v348;
  uint64_t v349;
  uint64_t v350;

  v343 = a3;
  v350 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a1 + 4);
  v337 = (int)v4;
  v5 = ((int)v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if ((int)v5 > 0x1FFFFFF)
    return;
  v8 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v9 = *(float *)(a2 + 184);
  v344 = *(int **)(a1 + 136);
  v10 = *(_QWORD *)(a2 + 96);
  v346 = *(_QWORD *)(a2 + 104);
  v347 = v10;
  v12 = *(int *)(a1 + 24);
  v11 = *(int *)(a1 + 28);
  v13 = *(int *)(a1 + 20);
  v348 = (void *)*(int *)(a1 + 16);
  v349 = v7;
  v14 = *(int *)(a1 + 12);
  v345 = *(_DWORD *)(a1 + 8);
  v342 = (_QWORD *)a2;
  v15 = *(int *)(a2 + 16);
  v16 = (v15 + 6) * v5;
  if (v16 > 65439)
  {
    v19 = (char *)malloc_type_calloc(1uLL, v16 + 96, 0x3023562EuLL);
    v18 = v19;
    v21 = v19;
    v22 = v342;
    if (!v19)
      return;
  }
  else
  {
    MEMORY[0x1E0C80A78](a1, a4);
    v18 = (char *)&v332 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v18, v17);
    v21 = 0;
    v22 = v342;
  }
  v334 = v21;
  v23 = a1;
  v24 = (int)(float)((float)(v9 * 255.0) + 0.5);
  v333 = v8 + (v12 - 1) * v11 + 4 * v13;
  v25 = v11 >> 2;
  v26 = (unint64_t)(v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  v27 = v26 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((_DWORD)v15)
    v28 = 4 * v5;
  else
    v28 = 0;
  v29 = v27 + v28;
  v22[18] = v26;
  v22[19] = v27 + v28;
  v22[20] = v27;
  v30 = v8 + 4 * (v14 + v25 * (_QWORD)v348);
  v31 = v337;
  v332 = v11 >> 2;
  v341 = v25 - v337;
  v32 = *(int *)(v23 + 104);
  v33 = *(_DWORD *)(v23 + 108);
  v339 = v23;
  v34 = *(unsigned __int8 *)(v23 + 2);
  if (v34 == 6 || v34 == 1)
  {
    v36 = v346;
    v35 = v347;
    if (!v344)
      goto LABEL_619;
    v37 = 0;
    v38 = 0;
    v39 = *(int *)(v339 + 124);
    v40 = (unsigned __int8 *)v344 + v32 + (int)v39 * (uint64_t)v33;
    v31 = v337;
    v340 = v39 - v337;
    v41 = v342;
    goto LABEL_25;
  }
  if (!v344)
  {
    v40 = 0;
    v37 = 0;
    v340 = 0;
    v38 = 0;
    v41 = v342;
    v36 = v346;
    v35 = v347;
    goto LABEL_25;
  }
  shape_enum_clip_alloc((uint64_t)v19, v20, v344, 1, 1, 1, v32, v33, v4, v345);
  if (!v42)
    goto LABEL_619;
  v37 = v42;
  v38 = 0;
  v43 = (int)((v15 * v5 + 15) & 0xFFFFFFF0);
  if (!(_DWORD)v15)
    v43 = 4 * v5;
  v340 = -v337;
  v40 = (unsigned __int8 *)(v29 + v43 + 16);
  v41 = v342;
  v36 = v346;
  v35 = v347;
  while (1)
  {
    while (1)
    {
      v44 = *((_DWORD *)v40 - 4);
      v45 = v44 - v38;
      if (v44 > v38)
        break;
      if (v38 < *((_DWORD *)v40 - 3) + v44)
      {
        v31 = v337;
LABEL_25:
        v335 = -v31;
        v336 = (v4 - 1) + 1;
        v338 = v333 - 4;
        v46 = v37;
LABEL_26:
        LODWORD(v344) = v38;
        v37 = v46;
        v47 = (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t))*v41;
        v346 = v36;
        v347 = v35;
        v47(v41, v35, v36, v4);
        v48 = v41[20];
        v49 = (_BYTE *)v41[18];
        v51 = *((_DWORD *)v41 + 2);
        v50 = *((_DWORD *)v41 + 3);
        v348 = v37;
        if (v51 == v50)
        {
          if (v24 != 255)
          {
            v52 = v4;
            v53 = v49;
            v54 = v343;
            do
            {
              if (*v53)
                *(_DWORD *)v48 = PDM_13345(*(_DWORD *)v48, v24);
              ++v53;
              v48 += 4;
              --v52;
            }
            while (v52);
            v48 += 4 * v335;
            v49 += v336 + v335;
LABEL_33:
            v37 = v348;
            goto LABEL_73;
          }
        }
        else
        {
          v55 = v41[19];
          if (v51 != 134755160)
          {
            v57 = HIWORD(v51) & 0x3F;
            if (v57 == 16)
            {
              v54 = v343;
              if (v50 == 134755208)
              {
                if (v24 == 255)
                {
                  v307 = 0;
                  do
                  {
                    if (v49[v307])
                      *(_DWORD *)(v48 + 4 * v307) = HIDWORD(*(_QWORD *)(v55 + 8 * v307)) & 0xFF000000 | BYTE1(*(_QWORD *)(v55 + 8 * v307)) | (*(_QWORD *)(v55 + 8 * v307) >> 24) & 0xFF0000 | (BYTE3(*(_QWORD *)(v55 + 8 * v307)) << 8);
                    ++v307;
                  }
                  while ((_DWORD)v4 != (_DWORD)v307);
                }
                else
                {
                  v75 = 0;
                  do
                  {
                    if (v49[v75])
                      *(_DWORD *)(v48 + 4 * v75) = PDM_13345(HIDWORD(*(_QWORD *)(v55 + 8 * v75)) & 0xFF000000 | BYTE1(*(_QWORD *)(v55 + 8 * v75)) | (*(_QWORD *)(v55 + 8 * v75) >> 24) & 0xFF0000 | (BYTE3(*(_QWORD *)(v55 + 8 * v75)) << 8), v24);
                    ++v75;
                  }
                  while ((_DWORD)v4 != (_DWORD)v75);
                }
              }
              else if (v24 == 255)
              {
                v320 = 0;
                do
                {
                  if (v49[v320])
                    *(_DWORD *)(v48 + 4 * v320) = ((unsigned __int16)WORD2(*(_QWORD *)(v55 + 8 * v320)) >> 8) | HIDWORD(*(_QWORD *)(v55 + 8 * v320)) & 0xFF000000 | (BYTE1(*(_QWORD *)(v55 + 8 * v320)) << 16) | (BYTE3(*(_QWORD *)(v55 + 8 * v320)) << 8);
                  ++v320;
                }
                while ((_DWORD)v4 != (_DWORD)v320);
              }
              else
              {
                v88 = 0;
                do
                {
                  if (v49[v88])
                    *(_DWORD *)(v48 + 4 * v88) = PDM_13345(((unsigned __int16)WORD2(*(_QWORD *)(v55 + 8 * v88)) >> 8) | HIDWORD(*(_QWORD *)(v55 + 8 * v88)) & 0xFF000000 | (BYTE1(*(_QWORD *)(v55 + 8 * v88)) << 16) | (BYTE3(*(_QWORD *)(v55 + 8 * v88)) << 8), v24);
                  ++v88;
                }
                while ((_DWORD)v4 != (_DWORD)v88);
              }
              goto LABEL_33;
            }
            v54 = v343;
            if (v57 != 32)
            {
              if (v50 == 134755208)
              {
                if (v24 == 255)
                {
                  v308 = 0;
                  do
                  {
                    if (v49[v308])
                      *(_DWORD *)(v48 + 4 * v308) = bswap32(*(_DWORD *)(v55 + 4 * v308));
                    ++v308;
                  }
                  while ((_DWORD)v4 != (_DWORD)v308);
                }
                else
                {
                  v76 = 0;
                  do
                  {
                    if (v49[v76])
                      *(_DWORD *)(v48 + 4 * v76) = PDM_13345(bswap32(*(_DWORD *)(v55 + 4 * v76)), v24);
                    ++v76;
                  }
                  while ((_DWORD)v4 != (_DWORD)v76);
                }
              }
              else if (v24 == 255)
              {
                v321 = 0;
                do
                {
                  if (v49[v321])
                  {
                    HIDWORD(v322) = *(_DWORD *)(v55 + 4 * v321);
                    LODWORD(v322) = HIDWORD(v322);
                    *(_DWORD *)(v48 + 4 * v321) = v322 >> 8;
                  }
                  ++v321;
                }
                while ((_DWORD)v4 != (_DWORD)v321);
              }
              else
              {
                v89 = 0;
                do
                {
                  if (v49[v89])
                  {
                    HIDWORD(v90) = *(_DWORD *)(v55 + 4 * v89);
                    LODWORD(v90) = HIDWORD(v90);
                    *(_DWORD *)(v48 + 4 * v89) = PDM_13345(v90 >> 8, v24);
                  }
                  ++v89;
                }
                while ((_DWORD)v4 != (_DWORD)v89);
              }
              goto LABEL_33;
            }
            if (v50 == 134755208)
            {
              if (v24 != 255)
              {
                v58 = 0;
                v59 = (float *)(v55 + 8);
                do
                {
                  if (v49[v58])
                  {
                    v60 = v59[1];
                    if (v60 <= 0.0)
                    {
                      v68 = 0;
                    }
                    else
                    {
                      v61 = *(v59 - 2);
                      v62 = *(v59 - 1);
                      v63 = *v59;
                      v64 = (int)(float)((float)(v60 * 255.0) + 0.5);
                      if (v60 > 1.0)
                      {
                        v64 = 255;
                        v60 = 1.0;
                      }
                      v65 = (int)(float)((float)(v61 * 255.0) + 0.5);
                      if (v61 < 0.0)
                        v65 = 0;
                      if (v61 > v60)
                        v65 = v64;
                      v66 = (int)(float)((float)(v62 * 255.0) + 0.5);
                      if (v62 < 0.0)
                        v66 = 0;
                      if (v62 > v60)
                        v66 = v64;
                      v67 = (int)(float)((float)(v63 * 255.0) + 0.5);
                      if (v63 < 0.0)
                        v67 = 0;
                      if (v63 > v60)
                        v67 = v64;
                      v68 = PDM_13345(v65 | (v64 << 24) | (v66 << 8) | (v67 << 16), v24);
                    }
                    *(_DWORD *)(v48 + 4 * v58) = v68;
                  }
                  ++v58;
                  v59 += 4;
                }
                while ((_DWORD)v4 != (_DWORD)v58);
                goto LABEL_33;
              }
              v296 = 0;
              v297 = (float *)(v55 + 8);
              v37 = v348;
              do
              {
                if (v49[v296])
                {
                  v298 = v297[1];
                  if (v298 <= 0.0)
                  {
                    v306 = 0;
                  }
                  else
                  {
                    v299 = *(v297 - 2);
                    v300 = *(v297 - 1);
                    v301 = *v297;
                    v302 = (int)(float)((float)(v298 * 255.0) + 0.5);
                    if (v298 > 1.0)
                    {
                      v302 = 255;
                      v298 = 1.0;
                    }
                    v303 = (int)(float)((float)(v299 * 255.0) + 0.5);
                    if (v299 < 0.0)
                      v303 = 0;
                    if (v299 > v298)
                      v303 = v302;
                    v304 = (int)(float)((float)(v300 * 255.0) + 0.5);
                    if (v300 < 0.0)
                      v304 = 0;
                    if (v300 > v298)
                      v304 = v302;
                    v305 = (int)(float)((float)(v301 * 255.0) + 0.5);
                    if (v301 < 0.0)
                      v305 = 0;
                    if (v301 > v298)
                      v305 = v302;
                    v306 = v303 | (v302 << 24) | (v304 << 8) | (v305 << 16);
                  }
                  *(_DWORD *)(v48 + 4 * v296) = v306;
                }
                ++v296;
                v297 += 4;
              }
              while ((_DWORD)v4 != (_DWORD)v296);
            }
            else
            {
              if (v24 != 255)
              {
                v77 = 0;
                v78 = (float *)(v55 + 8);
                do
                {
                  if (v49[v77])
                  {
                    v79 = v78[1];
                    if (v79 <= 0.0)
                    {
                      v87 = 0;
                    }
                    else
                    {
                      v80 = *(v78 - 2);
                      v81 = *(v78 - 1);
                      v82 = *v78;
                      v83 = (int)(float)((float)(v79 * 255.0) + 0.5);
                      if (v79 > 1.0)
                      {
                        v83 = 255;
                        v79 = 1.0;
                      }
                      v84 = (int)(float)((float)(v80 * 255.0) + 0.5);
                      if (v80 < 0.0)
                        v84 = 0;
                      if (v80 > v79)
                        v84 = v83;
                      v85 = (int)(float)((float)(v81 * 255.0) + 0.5);
                      if (v81 < 0.0)
                        v85 = 0;
                      if (v81 > v79)
                        v85 = v83;
                      v86 = (int)(float)((float)(v82 * 255.0) + 0.5);
                      if (v82 < 0.0)
                        v86 = 0;
                      if (v82 > v79)
                        v86 = v83;
                      v87 = PDM_13345((v84 << 16) | (v83 << 24) | (v85 << 8) | v86, v24);
                    }
                    *(_DWORD *)(v48 + 4 * v77) = v87;
                  }
                  ++v77;
                  v78 += 4;
                }
                while ((_DWORD)v4 != (_DWORD)v77);
                goto LABEL_33;
              }
              v309 = 0;
              v310 = (float *)(v55 + 8);
              v37 = v348;
              do
              {
                if (v49[v309])
                {
                  v311 = v310[1];
                  if (v311 <= 0.0)
                  {
                    v319 = 0;
                  }
                  else
                  {
                    v312 = *(v310 - 2);
                    v313 = *(v310 - 1);
                    v314 = *v310;
                    v315 = (int)(float)((float)(v311 * 255.0) + 0.5);
                    if (v311 > 1.0)
                    {
                      v311 = 1.0;
                      v315 = 255;
                    }
                    v316 = (int)(float)((float)(v312 * 255.0) + 0.5);
                    if (v312 < 0.0)
                      v316 = 0;
                    if (v312 > v311)
                      v316 = v315;
                    v317 = (int)(float)((float)(v313 * 255.0) + 0.5);
                    if (v313 < 0.0)
                      v317 = 0;
                    if (v313 > v311)
                      v317 = v315;
                    v318 = (int)(float)((float)(v314 * 255.0) + 0.5);
                    if (v314 < 0.0)
                      v318 = 0;
                    if (v314 > v311)
                      v318 = v315;
                    v319 = (v316 << 16) | (v315 << 24) | (v317 << 8) | v318;
                  }
                  *(_DWORD *)(v48 + 4 * v309) = v319;
                }
                ++v309;
                v310 += 4;
              }
              while ((_DWORD)v4 != (_DWORD)v309);
            }
LABEL_73:
            switch(v54)
            {
              case 0:
                v70 = v4;
                v71 = v40;
                do
                {
                  v72 = *v49;
                  if (*v49)
                  {
                    if (v40)
                      v72 = (*v71 * v72 + ((*v71 * v72) >> 8) + 1) >> 8;
                    if ((_BYTE)v72)
                    {
                      if (v72 == 255)
                        v73 = 0;
                      else
                        v73 = PDM_13345(*(_DWORD *)v30, ~(_BYTE)v72);
                      *(_DWORD *)v30 = v73;
                    }
                  }
                  ++v49;
                  v71 += v40 != 0;
                  v30 += 4;
                  --v70;
                }
                while (v70);
                v40 = &v71[v340];
                v74 = v341;
                goto LABEL_522;
              case 1:
                v91 = *v49;
                v92 = v49 + 1;
                if (v40)
                {
                  v93 = v4;
                  do
                  {
                    if (v91)
                    {
                      v94 = *v40 * v91 + ((*v40 * v91) >> 8) + 1;
                      v95 = (unsigned int *)v338;
                      if (v338 >= v30)
                        v95 = (unsigned int *)v30;
                      if ((unint64_t)v95 >= *(_QWORD *)(v339 + 40))
                        v96 = v95;
                      else
                        v96 = *(unsigned int **)(v339 + 40);
                      if (BYTE1(v94))
                      {
                        if (BYTE1(v94) == 255)
                          *v96 = *(_DWORD *)v48;
                        else
                          DMplusDM_13346(v96, *(_DWORD *)v48, BYTE1(v94), *v96, ~(v94 >> 8));
                      }
                    }
                    else
                    {
                      v96 = (unsigned int *)v30;
                    }
                    v97 = *v92++;
                    v91 = v97;
                    v48 += 4;
                    ++v40;
                    v30 = (unint64_t)(v96 + 1);
                    --v93;
                  }
                  while (v93);
                  v40 += v340;
                  v37 = v348;
                }
                else
                {
                  v323 = v4;
                  do
                  {
                    v324 = (unsigned int *)v338;
                    if (v338 >= v30)
                      v324 = (unsigned int *)v30;
                    if ((unint64_t)v324 >= *(_QWORD *)(v339 + 40))
                      v96 = v324;
                    else
                      v96 = *(unsigned int **)(v339 + 40);
                    if (v91)
                    {
                      if (v91 == 255)
                        *v96 = *(_DWORD *)v48;
                      else
                        DMplusDM_13346(v96, *(_DWORD *)v48, v91, *v96, ~v91);
                    }
                    v325 = *v92++;
                    v91 = v325;
                    v48 += 4;
                    v30 = (unint64_t)(v96 + 1);
                    --v323;
                  }
                  while (v323);
                  v40 = 0;
                }
                v30 = (unint64_t)&v96[v341 + 1];
                goto LABEL_604;
              case 2:
                v98 = *v49;
                if (v40)
                {
                  v99 = v49 + 1;
                  v100 = v4;
                  while (1)
                  {
                    v101 = v30;
                    if (!v98)
                      goto LABEL_160;
                    v102 = *v40 * v98 + ((*v40 * v98) >> 8) + 1;
                    if (!BYTE1(v102))
                      goto LABEL_160;
                    if (BYTE1(v102) == 255)
                    {
                      v103 = *(_DWORD *)v48;
                      v104 = HIBYTE(*(_DWORD *)v48);
                      if (v104)
                      {
                        if (v104 != 255)
                          goto LABEL_159;
                        *(_DWORD *)v30 = v103;
                      }
                    }
                    else
                    {
                      v105 = PDM_13345(*(_DWORD *)v48, BYTE1(v102));
                      if (HIBYTE(v105))
                      {
                        v103 = v105;
LABEL_159:
                        DplusDM_13347((_DWORD *)v30, v103, *(_DWORD *)v30, ~v103 >> 24);
                      }
                    }
LABEL_160:
                    v106 = *v99++;
                    v98 = v106;
                    v48 += 4;
                    ++v40;
                    v30 += 4;
                    if (!--v100)
                    {
                      v40 += v340;
                      v41 = v342;
                      goto LABEL_616;
                    }
                  }
                }
                v326 = v49 + 1;
                v327 = v4;
                do
                {
                  if (!v98)
                    goto LABEL_614;
                  if (v98 == 255)
                  {
                    v328 = *(_DWORD *)v48;
                    v329 = HIBYTE(*(_DWORD *)v48);
                    if (!v329)
                      goto LABEL_614;
                    if (v329 == 255)
                    {
                      *(_DWORD *)v30 = v328;
                      goto LABEL_614;
                    }
                  }
                  else
                  {
                    v330 = PDM_13345(*(_DWORD *)v48, v98);
                    if (!HIBYTE(v330))
                      goto LABEL_614;
                    v328 = v330;
                  }
                  DplusDM_13347((_DWORD *)v30, v328, *(_DWORD *)v30, ~v328 >> 24);
LABEL_614:
                  v331 = *v326++;
                  v98 = v331;
                  v48 += 4;
                  v30 += 4;
                  --v327;
                }
                while (v327);
                v40 = 0;
                v101 = v30 - 4;
LABEL_616:
                v30 = v101 + 4 * v341 + 4;
LABEL_523:
                v295 = v346;
                v294 = v347;
                v37 = v348;
LABEL_524:
                if (v345 == 1)
                  goto LABEL_617;
                --v345;
                v46 = 0;
                v38 = (_DWORD)v344 + 1;
                v35 = v41[16] + v294;
                v36 = v41[17] + v295;
                if (v37)
                  continue;
                goto LABEL_26;
              case 3:
                v107 = v4;
                v108 = v40;
                do
                {
                  v109 = *v49;
                  if (*v49)
                  {
                    if (v40)
                      v109 = (*v108 * v109 + ((*v108 * v109) >> 8) + 1) >> 8;
                    if ((_BYTE)v109)
                    {
                      if (v109 == 255)
                        *(_DWORD *)v30 = PDM_13345(*(_DWORD *)v48, *(unsigned __int8 *)(v30 + 3));
                      else
                        DMplusDM_13346((unsigned int *)v30, *(_DWORD *)v48, (unsigned __int16)(HIBYTE(*(_DWORD *)v30) * v109+ 128+ ((HIBYTE(*(_DWORD *)v30) * v109 + 128) >> 8)) >> 8, *(_DWORD *)v30, ~(_BYTE)v109);
                    }
                  }
                  ++v49;
                  v48 += 4;
                  v108 += v40 != 0;
                  v30 += 4;
                  --v107;
                }
                while (v107);
                goto LABEL_520;
              case 4:
                v110 = v4;
                v108 = v40;
                do
                {
                  v111 = *v49;
                  if (*v49)
                  {
                    if (v40)
                      v111 = (*v108 * v111 + ((*v108 * v111) >> 8) + 1) >> 8;
                    if ((_BYTE)v111)
                    {
                      if (v111 == 255)
                      {
                        *(_DWORD *)v30 = PDM_13345(*(_DWORD *)v48, *(unsigned __int8 *)(v30 + 3) ^ 0xFFu);
                      }
                      else
                      {
                        v112 = (~*(_DWORD *)v30 >> 24) * v111 + 128;
                        DMplusDM_13346((unsigned int *)v30, *(_DWORD *)v48, (unsigned __int16)(v112 + (v112 >> 8)) >> 8, *(_DWORD *)v30, ~(_BYTE)v111);
                      }
                    }
                  }
                  ++v49;
                  v48 += 4;
                  v108 += v40 != 0;
                  v30 += 4;
                  --v110;
                }
                while (v110);
                goto LABEL_520;
              case 5:
                v113 = v4;
                v108 = v40;
                while (1)
                {
                  v114 = *v49;
                  if (*v49)
                  {
                    if (!v40)
                      goto LABEL_187;
                    v115 = *v108 * v114 + ((*v108 * v114) >> 8) + 1;
                    if (BYTE1(v115))
                      break;
                  }
LABEL_188:
                  ++v49;
                  v48 += 4;
                  v108 += v40 != 0;
                  v30 += 4;
                  if (!--v113)
                    goto LABEL_520;
                }
                v114 = v115 >> 8;
LABEL_187:
                v116 = PDM_13345(*(_DWORD *)v48, v114);
                DMplusDM_13346((unsigned int *)v30, v116, HIBYTE(*(_DWORD *)v30), *(_DWORD *)v30, ~v116 >> 24);
                goto LABEL_188;
              case 6:
                v117 = v4;
                v108 = v40;
                while (1)
                {
                  v118 = *v49;
                  if (*v49)
                  {
                    if (!v40)
                      goto LABEL_195;
                    v119 = *v108 * v118 + ((*v108 * v118) >> 8) + 1;
                    if (BYTE1(v119))
                      break;
                  }
LABEL_199:
                  ++v49;
                  v48 += 4;
                  v108 += v40 != 0;
                  v30 += 4;
                  if (!--v117)
                    goto LABEL_520;
                }
                v118 = v119 >> 8;
LABEL_195:
                if (~HIBYTE(*(_DWORD *)v30))
                {
                  if (~HIBYTE(*(_DWORD *)v30) == 255)
                    *(_DWORD *)v30 = PDM_13345(*(_DWORD *)v48, v118);
                  else
                    DplusDM_13347((_DWORD *)v30, *(_DWORD *)v30, *(_DWORD *)v48, (unsigned __int16)(~HIBYTE(*(_DWORD *)v30) * v118+ 128+ ((~HIBYTE(*(_DWORD *)v30)* v118+ 128) >> 8)) >> 8);
                }
                goto LABEL_199;
              case 7:
                v120 = v4;
                v108 = v40;
                do
                {
                  v121 = *v49;
                  if (*v49)
                  {
                    if (v40)
                      v121 = (*v108 * v121 + ((*v108 * v121) >> 8) + 1) >> 8;
                    if ((_BYTE)v121)
                    {
                      if (v121 == 255)
                      {
                        *(_DWORD *)v30 = PDM_13345(*(_DWORD *)v30, *(unsigned __int8 *)(v48 + 3));
                      }
                      else
                      {
                        v122 = *(unsigned __int8 *)(v48 + 3) * v121 + 128;
                        DMplusDM_13346((unsigned int *)v30, *(_DWORD *)v30, (unsigned __int16)(v122 + (v122 >> 8)) >> 8, *(_DWORD *)v30, ~(_BYTE)v121);
                      }
                    }
                  }
                  ++v49;
                  v48 += 4;
                  v108 += v40 != 0;
                  v30 += 4;
                  --v120;
                }
                while (v120);
                goto LABEL_520;
              case 8:
                v123 = v4;
                v108 = v40;
                do
                {
                  v124 = *v49;
                  if (*v49)
                  {
                    if (v40)
                      v124 = (*v108 * v124 + ((*v108 * v124) >> 8) + 1) >> 8;
                    if ((_BYTE)v124)
                    {
                      if (v124 == 255)
                      {
                        *(_DWORD *)v30 = PDM_13345(*(_DWORD *)v30, *(unsigned __int8 *)(v48 + 3) ^ 0xFFu);
                      }
                      else
                      {
                        v125 = (~*(_DWORD *)v48 >> 24) * v124 + 128;
                        DMplusDM_13346((unsigned int *)v30, *(_DWORD *)v30, (unsigned __int16)(v125 + (v125 >> 8)) >> 8, *(_DWORD *)v30, ~(_BYTE)v124);
                      }
                    }
                  }
                  ++v49;
                  v48 += 4;
                  v108 += v40 != 0;
                  v30 += 4;
                  --v123;
                }
                while (v123);
                goto LABEL_520;
              case 9:
                v126 = v4;
                v108 = v40;
                while (1)
                {
                  v127 = *v49;
                  if (*v49)
                  {
                    if (!v40)
                      goto LABEL_226;
                    v128 = *v108 * v127 + ((*v108 * v127) >> 8) + 1;
                    if (BYTE1(v128))
                      break;
                  }
LABEL_227:
                  ++v49;
                  v48 += 4;
                  v108 += v40 != 0;
                  v30 += 4;
                  if (!--v126)
                    goto LABEL_520;
                }
                v127 = v128 >> 8;
LABEL_226:
                v129 = PDM_13345(*(_DWORD *)v48, v127);
                DMplusDM_13346((unsigned int *)v30, v129, ~*(_DWORD *)v30 >> 24, *(_DWORD *)v30, (~(_BYTE)v127 + HIBYTE(v129)));
                goto LABEL_227;
              case 10:
                v130 = v4;
                v108 = v40;
                while (1)
                {
                  v131 = *v49;
                  if (*v49)
                  {
                    if (!v40)
                      goto LABEL_234;
                    v132 = *v108 * v131 + ((*v108 * v131) >> 8) + 1;
                    if (BYTE1(v132))
                      break;
                  }
LABEL_235:
                  ++v49;
                  v48 += 4;
                  v108 += v40 != 0;
                  v30 += 4;
                  if (!--v130)
                    goto LABEL_520;
                }
                v131 = v132 >> 8;
LABEL_234:
                v133 = PDM_13345(*(_DWORD *)v48, v131);
                DMplusDM_13346((unsigned int *)v30, v133, ~*(_DWORD *)v30 >> 24, *(_DWORD *)v30, ~v133 >> 24);
                goto LABEL_235;
              case 11:
                v134 = v4;
                v108 = v40;
                while (1)
                {
                  v135 = *v49;
                  if (*v49)
                  {
                    if (!v40)
                      goto LABEL_242;
                    v136 = *v108 * v135 + ((*v108 * v135) >> 8) + 1;
                    if (BYTE1(v136))
                      break;
                  }
LABEL_245:
                  ++v49;
                  v48 += 4;
                  v108 += v40 != 0;
                  v30 += 4;
                  if (!--v134)
                    goto LABEL_520;
                }
                v135 = v136 >> 8;
LABEL_242:
                v137 = PDM_13345(*(_DWORD *)v48, v135);
                v138 = HIBYTE(*(_DWORD *)v30);
                if (!v349)
                  LOBYTE(v138) = -1;
                DAplusdDA_13348((_DWORD *)v30, *(_DWORD *)v30, v138, v137, HIBYTE(v137));
                goto LABEL_245;
              case 12:
                v139 = v4;
                v140 = v40;
                while (1)
                {
                  v141 = *v49;
                  if (*v49)
                  {
                    if (!v40)
                      goto LABEL_252;
                    v142 = *v140 * v141 + ((*v140 * v141) >> 8) + 1;
                    if (BYTE1(v142))
                      break;
                  }
LABEL_253:
                  ++v49;
                  v48 += 4;
                  v140 += v40 != 0;
                  v30 += 4;
                  if (!--v139)
                  {
                    v40 = &v140[v340];
                    goto LABEL_521;
                  }
                }
                v141 = v142 >> 8;
LABEL_252:
                v143 = PDM_13345(*(_DWORD *)v48, v141);
                v144 = ((*(_DWORD *)v30 >> 8) & 0xFF00FF) + ((v143 >> 8) & 0xFF00FF);
                *(_DWORD *)v30 = (v144 << 8) & 0xFF00FF00 | ((*(_DWORD *)v30 & 0xFF00FF) + (v143 & 0xFF00FF)) & 0xFF00FF | (15 * (v144 & 0x1000100 | (((*(_DWORD *)v30 & 0xFF00FF) + (v143 & 0xFF00FF)) >> 8) & 0x10001)) | (240 * (v144 & 0x1000100 | (((*(_DWORD *)v30 & 0xFF00FF) + (v143 & 0xFF00FF)) >> 8) & 0x10001));
                goto LABEL_253;
              case 13:
                v145 = v4;
                v146 = v40;
                while (1)
                {
                  v147 = *v49;
                  if (*v49)
                  {
                    if (v40)
                    {
                      v148 = *v146 * v147 + ((*v146 * v147) >> 8) + 1;
                      if (!BYTE1(v148))
                        goto LABEL_267;
                      v147 = v148 >> 8;
                    }
                    v149 = PDM_13345(*(_DWORD *)v48, v147);
                    v150 = HIBYTE(v149);
                    if (HIBYTE(v149))
                    {
                      v151 = v149;
                      v152 = *(_DWORD *)v30;
                      if (v349)
                      {
                        v153 = HIBYTE(v152);
                        if (!HIBYTE(v152))
                          goto LABEL_266;
                      }
                      else
                      {
                        v153 = 255;
                      }
                      v151 = PDAmultiplyPDA_13349(v152, v153, v151, v150);
LABEL_266:
                      *(_DWORD *)v30 = v151;
                    }
                  }
LABEL_267:
                  ++v49;
                  v48 += 4;
                  v146 += v40 != 0;
                  v30 += 4;
                  if (!--v145)
                    goto LABEL_338;
                }
              case 14:
                v154 = v4;
                v146 = v40;
                while (1)
                {
                  v155 = *v49;
                  if (*v49)
                  {
                    if (v40)
                    {
                      v156 = *v146 * v155 + ((*v146 * v155) >> 8) + 1;
                      if (!BYTE1(v156))
                        goto LABEL_281;
                      v155 = v156 >> 8;
                    }
                    v157 = PDM_13345(*(_DWORD *)v48, v155);
                    v158 = HIBYTE(v157);
                    if (HIBYTE(v157))
                    {
                      v159 = v157;
                      v160 = *(_DWORD *)v30;
                      if (v349)
                      {
                        v161 = HIBYTE(v160);
                        if (!HIBYTE(v160))
                          goto LABEL_280;
                      }
                      else
                      {
                        v161 = 255;
                      }
                      v159 = PDAscreenPDA_13350(v160, v161, v159, v158);
LABEL_280:
                      *(_DWORD *)v30 = v159;
                    }
                  }
LABEL_281:
                  ++v49;
                  v48 += 4;
                  v146 += v40 != 0;
                  v30 += 4;
                  if (!--v154)
                    goto LABEL_338;
                }
              case 15:
                v162 = v4;
                v146 = v40;
                while (1)
                {
                  v163 = *v49;
                  if (*v49)
                  {
                    if (v40)
                    {
                      v164 = *v146 * v163 + ((*v146 * v163) >> 8) + 1;
                      if (!BYTE1(v164))
                        goto LABEL_295;
                      v163 = v164 >> 8;
                    }
                    v165 = PDM_13345(*(_DWORD *)v48, v163);
                    v166 = HIBYTE(v165);
                    if (HIBYTE(v165))
                    {
                      v167 = v165;
                      v168 = *(_DWORD *)v30;
                      if (v349)
                      {
                        v169 = HIBYTE(v168);
                        if (!HIBYTE(v168))
                          goto LABEL_294;
                      }
                      else
                      {
                        v169 = 255;
                      }
                      v167 = PDAoverlayPDA_13351(v168, v169, v167, v166);
LABEL_294:
                      *(_DWORD *)v30 = v167;
                    }
                  }
LABEL_295:
                  ++v49;
                  v48 += 4;
                  v146 += v40 != 0;
                  v30 += 4;
                  if (!--v162)
                    goto LABEL_338;
                }
              case 16:
                v170 = v4;
                v146 = v40;
                while (1)
                {
                  v171 = *v49;
                  if (*v49)
                  {
                    if (v40)
                    {
                      v172 = *v146 * v171 + ((*v146 * v171) >> 8) + 1;
                      if (!BYTE1(v172))
                        goto LABEL_309;
                      v171 = v172 >> 8;
                    }
                    v173 = PDM_13345(*(_DWORD *)v48, v171);
                    v174 = HIBYTE(v173);
                    if (HIBYTE(v173))
                    {
                      v175 = v173;
                      v176 = *(_DWORD *)v30;
                      if (v349)
                      {
                        v177 = HIBYTE(v176);
                        if (!HIBYTE(v176))
                          goto LABEL_308;
                      }
                      else
                      {
                        v177 = 255;
                      }
                      v175 = PDAdarkenPDA_13353(v176, v177, v175, v174);
LABEL_308:
                      *(_DWORD *)v30 = v175;
                    }
                  }
LABEL_309:
                  ++v49;
                  v48 += 4;
                  v146 += v40 != 0;
                  v30 += 4;
                  if (!--v170)
                    goto LABEL_338;
                }
              case 17:
                v178 = v4;
                v146 = v40;
                while (1)
                {
                  v179 = *v49;
                  if (*v49)
                  {
                    if (v40)
                    {
                      v180 = *v146 * v179 + ((*v146 * v179) >> 8) + 1;
                      if (!BYTE1(v180))
                        goto LABEL_323;
                      v179 = v180 >> 8;
                    }
                    v181 = PDM_13345(*(_DWORD *)v48, v179);
                    v182 = HIBYTE(v181);
                    if (HIBYTE(v181))
                    {
                      v183 = v181;
                      v184 = *(_DWORD *)v30;
                      if (v349)
                      {
                        v185 = HIBYTE(v184);
                        if (!HIBYTE(v184))
                          goto LABEL_322;
                      }
                      else
                      {
                        v185 = 255;
                      }
                      v183 = PDAlightenPDA_13352(v184, v185, v183, v182);
LABEL_322:
                      *(_DWORD *)v30 = v183;
                    }
                  }
LABEL_323:
                  ++v49;
                  v48 += 4;
                  v146 += v40 != 0;
                  v30 += 4;
                  if (!--v178)
                    goto LABEL_338;
                }
              case 18:
                v186 = v4;
                v146 = v40;
                while (1)
                {
                  v187 = *v49;
                  if (*v49)
                  {
                    if (v40)
                    {
                      v188 = *v146 * v187 + ((*v146 * v187) >> 8) + 1;
                      if (!BYTE1(v188))
                        goto LABEL_337;
                      v187 = v188 >> 8;
                    }
                    v189 = PDM_13345(*(_DWORD *)v48, v187);
                    v190 = HIBYTE(v189);
                    if (HIBYTE(v189))
                    {
                      v191 = v189;
                      v192 = *(_DWORD *)v30;
                      if (v349)
                      {
                        v193 = HIBYTE(v192);
                        if (!HIBYTE(v192))
                          goto LABEL_336;
                      }
                      else
                      {
                        v193 = 255;
                      }
                      v191 = PDAcolordodgePDA_13354(v192, v193, v191, v190);
LABEL_336:
                      *(_DWORD *)v30 = v191;
                    }
                  }
LABEL_337:
                  ++v49;
                  v48 += 4;
                  v146 += v40 != 0;
                  v30 += 4;
                  if (!--v186)
                  {
LABEL_338:
                    v40 = &v146[v340];
                    goto LABEL_521;
                  }
                }
              case 19:
                v108 = v40;
                v194 = v4;
                while (1)
                {
                  v195 = *v49;
                  if (*v49)
                  {
                    if (v40)
                    {
                      v196 = *v108 * v195 + ((*v108 * v195) >> 8) + 1;
                      if (!BYTE1(v196))
                        goto LABEL_351;
                      v195 = v196 >> 8;
                    }
                    v197 = PDM_13345(*(_DWORD *)v48, v195);
                    v198 = HIBYTE(v197);
                    if (HIBYTE(v197))
                    {
                      v199 = v197;
                      v200 = *(_DWORD *)v30;
                      if (v349)
                      {
                        v201 = HIBYTE(v200);
                        if (!HIBYTE(v200))
                          goto LABEL_350;
                      }
                      else
                      {
                        v201 = 255;
                      }
                      v199 = PDAcolorburnPDA_13355(v200, v201, v199, v198);
LABEL_350:
                      *(_DWORD *)v30 = v199;
                    }
                  }
LABEL_351:
                  ++v49;
                  v48 += 4;
                  v108 += v40 != 0;
                  v30 += 4;
                  if (!--v194)
                    goto LABEL_520;
                }
              case 20:
                v108 = v40;
                v202 = v4;
                while (1)
                {
                  v203 = *v49;
                  if (*v49)
                  {
                    if (v40)
                    {
                      v204 = *v108 * v203 + ((*v108 * v203) >> 8) + 1;
                      if (!BYTE1(v204))
                        goto LABEL_365;
                      v203 = v204 >> 8;
                    }
                    v205 = PDM_13345(*(_DWORD *)v48, v203);
                    v206 = HIBYTE(v205);
                    if (HIBYTE(v205))
                    {
                      v207 = v205;
                      v208 = *(_DWORD *)v30;
                      if (v349)
                      {
                        v209 = HIBYTE(v208);
                        if (!HIBYTE(v208))
                          goto LABEL_364;
                      }
                      else
                      {
                        v209 = 255;
                      }
                      v207 = PDAsoftlightPDA_13357(v208, v209, v207, v206);
LABEL_364:
                      *(_DWORD *)v30 = v207;
                    }
                  }
LABEL_365:
                  ++v49;
                  v48 += 4;
                  v108 += v40 != 0;
                  v30 += 4;
                  if (!--v202)
                    goto LABEL_520;
                }
              case 21:
                v108 = v40;
                v210 = v4;
                while (1)
                {
                  v211 = *v49;
                  if (*v49)
                  {
                    if (v40)
                    {
                      v212 = *v108 * v211 + ((*v108 * v211) >> 8) + 1;
                      if (!BYTE1(v212))
                        goto LABEL_379;
                      v211 = v212 >> 8;
                    }
                    v213 = PDM_13345(*(_DWORD *)v48, v211);
                    v214 = HIBYTE(v213);
                    if (HIBYTE(v213))
                    {
                      v215 = v213;
                      v216 = *(_DWORD *)v30;
                      if (v349)
                      {
                        v217 = HIBYTE(v216);
                        if (!HIBYTE(v216))
                          goto LABEL_378;
                      }
                      else
                      {
                        v217 = 255;
                      }
                      v215 = PDAhardlightPDA_13356(v216, v217, v215, v214);
LABEL_378:
                      *(_DWORD *)v30 = v215;
                    }
                  }
LABEL_379:
                  ++v49;
                  v48 += 4;
                  v108 += v40 != 0;
                  v30 += 4;
                  if (!--v210)
                    goto LABEL_520;
                }
              case 22:
                v108 = v40;
                v218 = v4;
                while (1)
                {
                  v219 = *v49;
                  if (*v49)
                  {
                    if (v40)
                    {
                      v220 = *v108 * v219 + ((*v108 * v219) >> 8) + 1;
                      if (!BYTE1(v220))
                        goto LABEL_393;
                      v219 = v220 >> 8;
                    }
                    v221 = PDM_13345(*(_DWORD *)v48, v219);
                    v222 = HIBYTE(v221);
                    if (HIBYTE(v221))
                    {
                      v223 = v221;
                      v224 = *(_DWORD *)v30;
                      if (v349)
                      {
                        v225 = HIBYTE(v224);
                        if (!HIBYTE(v224))
                          goto LABEL_392;
                      }
                      else
                      {
                        v225 = 255;
                      }
                      v223 = PDAdifferencePDA_13358(v224, v225, v223, v222);
LABEL_392:
                      *(_DWORD *)v30 = v223;
                    }
                  }
LABEL_393:
                  ++v49;
                  v48 += 4;
                  v108 += v40 != 0;
                  v30 += 4;
                  if (!--v218)
                    goto LABEL_520;
                }
              case 23:
                v108 = v40;
                v226 = v4;
                while (1)
                {
                  v227 = *v49;
                  if (*v49)
                  {
                    if (v40)
                    {
                      v228 = *v108 * v227 + ((*v108 * v227) >> 8) + 1;
                      if (!BYTE1(v228))
                        goto LABEL_407;
                      v227 = v228 >> 8;
                    }
                    v229 = PDM_13345(*(_DWORD *)v48, v227);
                    v230 = HIBYTE(v229);
                    if (HIBYTE(v229))
                    {
                      v231 = v229;
                      v232 = *(_DWORD *)v30;
                      if (v349)
                      {
                        v233 = HIBYTE(v232);
                        if (!HIBYTE(v232))
                          goto LABEL_406;
                      }
                      else
                      {
                        v233 = 255;
                      }
                      v231 = PDAexclusionPDA_13359(v232, v233, v231, v230);
LABEL_406:
                      *(_DWORD *)v30 = v231;
                    }
                  }
LABEL_407:
                  ++v49;
                  v48 += 4;
                  v108 += v40 != 0;
                  v30 += 4;
                  if (!--v226)
                    goto LABEL_520;
                }
              case 24:
                v108 = v40;
                v234 = v4;
                while (1)
                {
                  v235 = *v49;
                  if (*v49)
                  {
                    if (v40)
                    {
                      v236 = *v108 * v235 + ((*v108 * v235) >> 8) + 1;
                      if (!BYTE1(v236))
                        goto LABEL_421;
                      v235 = v236 >> 8;
                    }
                    v237 = PDM_13345(*(_DWORD *)v48, v235);
                    v238 = HIBYTE(v237);
                    if (HIBYTE(v237))
                    {
                      v239 = v237;
                      v240 = *(_DWORD *)v30;
                      if (v349)
                      {
                        v241 = HIBYTE(v240);
                        if (!HIBYTE(v240))
                          goto LABEL_420;
                      }
                      else
                      {
                        v241 = 255;
                      }
                      v239 = PDAhuePDA_13360(v240, v241, v239, v238);
LABEL_420:
                      *(_DWORD *)v30 = v239;
                    }
                  }
LABEL_421:
                  ++v49;
                  v48 += 4;
                  v108 += v40 != 0;
                  v30 += 4;
                  if (!--v234)
                    goto LABEL_520;
                }
              case 25:
                v108 = v40;
                v242 = v4;
                while (1)
                {
                  v243 = *v49;
                  if (*v49)
                  {
                    if (v40)
                    {
                      v244 = *v108 * v243 + ((*v108 * v243) >> 8) + 1;
                      if (!BYTE1(v244))
                        goto LABEL_435;
                      v243 = v244 >> 8;
                    }
                    v245 = PDM_13345(*(_DWORD *)v48, v243);
                    v246 = HIBYTE(v245);
                    if (HIBYTE(v245))
                    {
                      v247 = v245;
                      v248 = *(_DWORD *)v30;
                      if (v349)
                      {
                        v249 = HIBYTE(v248);
                        if (!HIBYTE(v248))
                          goto LABEL_434;
                      }
                      else
                      {
                        v249 = 255;
                      }
                      v247 = PDAsaturationPDA_13361(v248, v249, v247, v246);
LABEL_434:
                      *(_DWORD *)v30 = v247;
                    }
                  }
LABEL_435:
                  ++v49;
                  v48 += 4;
                  v108 += v40 != 0;
                  v30 += 4;
                  if (!--v242)
                    goto LABEL_520;
                }
              case 26:
                v108 = v40;
                v250 = v4;
                while (1)
                {
                  v251 = *v49;
                  if (*v49)
                  {
                    if (v40)
                    {
                      v252 = *v108 * v251 + ((*v108 * v251) >> 8) + 1;
                      if (!BYTE1(v252))
                        goto LABEL_449;
                      v251 = v252 >> 8;
                    }
                    v253 = PDM_13345(*(_DWORD *)v48, v251);
                    if (HIBYTE(v253))
                    {
                      v254 = *(_DWORD *)v30;
                      if (v349)
                      {
                        v255 = HIBYTE(v254);
                        if (!HIBYTE(v254))
                          goto LABEL_448;
                      }
                      else
                      {
                        v255 = 255;
                      }
                      v253 = PDAluminosityPDA_13362(v253, HIBYTE(v253), v254, v255);
LABEL_448:
                      *(_DWORD *)v30 = v253;
                    }
                  }
LABEL_449:
                  ++v49;
                  v48 += 4;
                  v108 += v40 != 0;
                  v30 += 4;
                  if (!--v250)
                    goto LABEL_520;
                }
              case 27:
                v108 = v40;
                v256 = v4;
                while (1)
                {
                  v257 = *v49;
                  if (*v49)
                  {
                    if (v40)
                    {
                      v258 = *v108 * v257 + ((*v108 * v257) >> 8) + 1;
                      if (!BYTE1(v258))
                        goto LABEL_463;
                      v257 = v258 >> 8;
                    }
                    v259 = PDM_13345(*(_DWORD *)v48, v257);
                    v260 = HIBYTE(v259);
                    if (HIBYTE(v259))
                    {
                      v261 = v259;
                      v262 = *(_DWORD *)v30;
                      if (v349)
                      {
                        v263 = HIBYTE(v262);
                        if (!HIBYTE(v262))
                          goto LABEL_462;
                      }
                      else
                      {
                        v263 = 255;
                      }
                      v261 = PDAluminosityPDA_13362(v262, v263, v261, v260);
LABEL_462:
                      *(_DWORD *)v30 = v261;
                    }
                  }
LABEL_463:
                  ++v49;
                  v48 += 4;
                  v108 += v40 != 0;
                  v30 += 4;
                  if (!--v256)
                    goto LABEL_520;
                }
              case 28:
                v108 = v40;
                v264 = v4;
                while (1)
                {
                  v265 = *v49;
                  if (*v49)
                  {
                    if (v40)
                    {
                      v266 = *v108 * v265 + ((*v108 * v265) >> 8) + 1;
                      if (!BYTE1(v266))
                        goto LABEL_477;
                      v265 = v266 >> 8;
                    }
                    v267 = PDM_13345(*(_DWORD *)v48, v265);
                    v268 = HIBYTE(v267);
                    if (HIBYTE(v267))
                    {
                      v269 = v267;
                      v270 = *(_DWORD *)v30;
                      if (v349)
                      {
                        v271 = HIBYTE(v270);
                        if (!HIBYTE(v270))
                          goto LABEL_476;
                      }
                      else
                      {
                        v271 = 255;
                      }
                      v269 = PDAtranspose_huePDA_13363(v270, v271, v269, v268);
LABEL_476:
                      *(_DWORD *)v30 = v269;
                    }
                  }
LABEL_477:
                  ++v49;
                  v48 += 4;
                  v108 += v40 != 0;
                  v30 += 4;
                  if (!--v264)
                    goto LABEL_520;
                }
              case 29:
                v108 = v40;
                v272 = v4;
                while (1)
                {
                  v273 = *v49;
                  if (*v49)
                  {
                    if (v40)
                    {
                      v274 = *v108 * v273 + ((*v108 * v273) >> 8) + 1;
                      if (!BYTE1(v274))
                        goto LABEL_491;
                      v273 = v274 >> 8;
                    }
                    v275 = PDM_13345(*(_DWORD *)v48, v273);
                    v276 = HIBYTE(v275);
                    if (HIBYTE(v275))
                    {
                      v277 = v275;
                      v278 = *(_DWORD *)v30;
                      if (v349)
                      {
                        v279 = HIBYTE(v278);
                        if (!HIBYTE(v278))
                          goto LABEL_490;
                      }
                      else
                      {
                        v279 = 255;
                      }
                      v277 = PDAtranspose_saturationPDA_13364(v278, v279, v277, v276);
LABEL_490:
                      *(_DWORD *)v30 = v277;
                    }
                  }
LABEL_491:
                  ++v49;
                  v48 += 4;
                  v108 += v40 != 0;
                  v30 += 4;
                  if (!--v272)
                    goto LABEL_520;
                }
              case 30:
                v108 = v40;
                v280 = v4;
                while (1)
                {
                  v281 = *v49;
                  if (*v49)
                  {
                    if (v40)
                    {
                      v282 = *v108 * v281 + ((*v108 * v281) >> 8) + 1;
                      if (!BYTE1(v282))
                        goto LABEL_505;
                      v281 = v282 >> 8;
                    }
                    v283 = PDM_13345(*(_DWORD *)v48, v281);
                    if (HIBYTE(v283))
                    {
                      v284 = *(_DWORD *)v30;
                      if (v349)
                      {
                        v285 = HIBYTE(v284);
                        if (!HIBYTE(v284))
                          goto LABEL_504;
                      }
                      else
                      {
                        v285 = 255;
                      }
                      v283 = PDAtranspose_luminosityPDA_13365(v283, HIBYTE(v283), v284, v285);
LABEL_504:
                      *(_DWORD *)v30 = v283;
                    }
                  }
LABEL_505:
                  ++v49;
                  v48 += 4;
                  v108 += v40 != 0;
                  v30 += 4;
                  if (!--v280)
                    goto LABEL_520;
                }
              case 31:
                v108 = v40;
                v286 = v4;
                break;
              default:
LABEL_604:
                v295 = v346;
                v294 = v347;
                goto LABEL_524;
            }
            while (1)
            {
              v287 = *v49;
              if (*v49)
              {
                if (v40)
                {
                  v288 = *v108 * v287 + ((*v108 * v287) >> 8) + 1;
                  if (!BYTE1(v288))
                    goto LABEL_519;
                  v287 = v288 >> 8;
                }
                v289 = PDM_13345(*(_DWORD *)v48, v287);
                v290 = HIBYTE(v289);
                if (HIBYTE(v289))
                {
                  v291 = v289;
                  v292 = *(_DWORD *)v30;
                  if (v349)
                  {
                    v293 = HIBYTE(v292);
                    if (!HIBYTE(v292))
                      goto LABEL_518;
                  }
                  else
                  {
                    v293 = 255;
                  }
                  v291 = PDAtranspose_luminosityPDA_13365(v292, v293, v291, v290);
LABEL_518:
                  *(_DWORD *)v30 = v291;
                }
              }
LABEL_519:
              ++v49;
              v48 += 4;
              v108 += v40 != 0;
              v30 += 4;
              if (!--v286)
              {
LABEL_520:
                v40 = &v108[v340];
LABEL_521:
                v74 = v341;
                v41 = v342;
LABEL_522:
                v30 += 4 * v74;
                goto LABEL_523;
              }
            }
          }
          if (v24 == 255)
          {
            v69 = 0;
            do
            {
              if (v49[v69])
                *(_DWORD *)(v48 + 4 * v69) = BYTE2(*(_DWORD *)(v55 + 4 * v69)) | *(_DWORD *)(v55 + 4 * v69) & 0xFF00FF00 | (*(_DWORD *)(v55 + 4 * v69) << 16);
              ++v69;
            }
            while ((_DWORD)v4 != (_DWORD)v69);
          }
          else
          {
            v56 = 0;
            do
            {
              if (v49[v56])
                *(_DWORD *)(v48 + 4 * v56) = PDM_13345(BYTE2(*(_DWORD *)(v55 + 4 * v56)) | *(_DWORD *)(v55 + 4 * v56) & 0xFF00FF00 | (*(_DWORD *)(v55 + 4 * v56) << 16), v24);
              ++v56;
            }
            while ((_DWORD)v4 != (_DWORD)v56);
          }
          v37 = v348;
        }
        v54 = v343;
        goto LABEL_73;
      }
      if (!shape_enum_clip_scan((uint64_t)v37, (_DWORD *)v40 - 4))
        goto LABEL_617;
    }
    v345 -= v45;
    if (v345 < 1)
      break;
    v35 += v41[16] * v45;
    v36 += v41[17] * v45;
    v30 += 4 * v332 * v45;
    v38 = v44;
  }
LABEL_617:
  if (v37)
    free(v37);
LABEL_619:
  if (v334)
    free(v334);
}

void RGBA32_shade_axial_RGB(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, int8x8_t a12)
{
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  float v21;
  float v22;
  float v23;
  float v24;
  int v25;
  int v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  _WORD *v39;
  unsigned __int16 v40;
  __int16 v41;
  unsigned __int16 v42;
  unsigned __int16 v43;
  __int16 v44;
  char v45;
  unsigned __int16 *v46;
  unsigned __int16 *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  int32x2_t v52;
  int32x2_t v53;
  int v54;
  int32x2_t v55;
  int32x2_t v56;
  __int8 *v57;
  int32x2_t v58;
  int8x8_t v59;
  int32x2_t v60;
  int32x4_t v61;
  int v62;

  v12 = *(float *)(a1 + 280);
  v13 = *(float *)(a1 + 296)
      + (float)((float)(*(float *)(a1 + 288) * (float)(*(float *)(*(_QWORD *)(a1 + 272) + 4) * (float)a3))
              + (float)(v12 * (float)(*(float *)(*(_QWORD *)(a1 + 272) + 4) * (float)a2)));
  v14 = a1 + 368;
  v15 = *(_QWORD *)(a1 + 368);
  v16 = ((unint64_t)a3 >> 4) & 0xF0;
  v17 = v15 + v16;
  if (v15)
    v18 = v15 + v16;
  else
    v18 = a1 + 368;
  if (v15)
    v19 = 15;
  else
    v19 = 0;
  v21 = *(float *)(a1 + 336);
  v22 = *(float *)(a1 + 344);
  v23 = *(float *)(a1 + 304);
  v24 = *(float *)(a1 + 308);
  v25 = *(_DWORD *)(a1 + 320);
  v26 = *(_DWORD *)(a1 + 324);
  v29 = a1 + 144;
  v27 = *(_DWORD **)(a1 + 144);
  v28 = *(_QWORD *)(v29 + 8);
  v30 = *(unsigned __int16 **)(a1 + 376);
  v31 = *(_QWORD *)(a1 + 360);
  if (v12 != 0.0)
  {
    if (v15)
      v37 = (a2 >> 8) & 0xF;
    else
      LOBYTE(v37) = 0;
    while (1)
    {
      v38 = v25;
      if (v13 >= v23)
      {
        v38 = v26;
        if (v13 <= v24)
          v38 = (int)(float)(v22 * (float)(v13 - v21));
      }
      if (v38 < 0)
      {
        if (!v30)
        {
          v45 = 0;
          goto LABEL_40;
        }
        v40 = v30[1];
        v41 = *(unsigned __int8 *)(v18 + v37);
        v42 = v30[2];
        v43 = v30[3];
        v44 = v41 + *v30;
      }
      else
      {
        v39 = (_WORD *)(v31 + 8 * v38);
        v40 = v39[1];
        v41 = *(unsigned __int8 *)(v18 + v37);
        v42 = v39[2];
        v43 = v39[3];
        v44 = v41 + *v39;
      }
      *(_DWORD *)v28 = (v41 + v40) & 0xFF00 | HIBYTE(v44) | (((unsigned __int16)(v41 + v42) >> 8) << 16) & 0xFFFFFF | (((unsigned __int16)(v41 + v43) >> 8) << 24);
      v45 = -1;
LABEL_40:
      LOBYTE(v37) = (v37 + 1) & v19;
      v13 = v12 + v13;
      v28 += 4;
      *(_BYTE *)v27 = v45;
      v27 = (_DWORD *)((char *)v27 + 1);
      if (!--a4)
        return;
    }
  }
  if (v15)
    v32 = v17;
  else
    v32 = v14;
  if (v15)
    LODWORD(v33) = ((a2 >> 8) + 1) & 0xF;
  else
    LODWORD(v33) = 0;
  if (v15)
    LODWORD(v34) = (a2 >> 8) & 0xF;
  else
    LODWORD(v34) = 0;
  if (v15)
    v35 = 15;
  else
    v35 = 0;
  if (v13 >= v23)
  {
    v25 = v26;
    if (v13 <= v24)
      v25 = (int)(float)(v22 * (float)(v13 - v21));
  }
  if ((v25 & 0x80000000) == 0 || v30)
  {
    v46 = (unsigned __int16 *)(v31 + 8 * v25);
    if (v25 < 0)
      v47 = v30;
    else
      v47 = v46;
    v48 = *v47;
    v49 = v47[3];
    v50 = v47[2];
    v51 = v47[1];
    if (v15)
    {
      v52 = vdup_n_s32(v48);
      v53 = vdup_n_s32(v51);
      v54 = a4 + 4;
      v55 = vdup_n_s32(v50);
      v56 = vdup_n_s32(v49);
      do
      {
        v57 = (__int8 *)(v32 + v34);
        v34 = ((_DWORD)v34 + 1) & v35;
        a12.i8[0] = *v57;
        a12.i8[4] = *(_BYTE *)(v32 + v33);
        v58 = (int32x2_t)vand_s8(a12, (int8x8_t)0xFF000000FFLL);
        v59 = vorr_s8(vorr_s8((int8x8_t)(*(_QWORD *)&vshr_n_u32((uint32x2_t)vadd_s32(v52, v58), 8uLL) & 0xFFFFFEFFFFFFFEFFLL), vand_s8((int8x8_t)vadd_s32(v53, v58), (int8x8_t)0xFF000000FF00)), vorr_s8(vand_s8((int8x8_t)vshl_n_s32(vadd_s32(v55, v58), 8uLL), (int8x8_t)0xFF000000FF0000), (int8x8_t)(*(_QWORD *)&vshl_n_s32(vadd_s32(v56, v58), 0x10uLL) & 0xFF00FFFFFF00FFFFLL)));
        *(int8x8_t *)v28 = v59;
        v33 = ((_DWORD)v33 + 1) & v35;
        v59.i8[0] = *(_BYTE *)(v32 + v34);
        v59.i8[4] = *(_BYTE *)(v32 + v33);
        v60 = (int32x2_t)vand_s8(v59, (int8x8_t)0xFF000000FFLL);
        a12 = vorr_s8(vorr_s8((int8x8_t)(*(_QWORD *)&vshr_n_u32((uint32x2_t)vadd_s32(v52, v60), 8uLL) & 0xFFFFFEFFFFFFFEFFLL), vand_s8((int8x8_t)vadd_s32(v53, v60), (int8x8_t)0xFF000000FF00)), vorr_s8(vand_s8((int8x8_t)vshl_n_s32(vadd_s32(v55, v60), 8uLL), (int8x8_t)0xFF000000FF0000), (int8x8_t)(*(_QWORD *)&vshl_n_s32(vadd_s32(v56, v60), 0x10uLL) & 0xFF00FFFFFF00FFFFLL)));
        *(double *)(v28 + 8) = *(double *)&a12;
        *v27++ = -1;
        v54 -= 4;
        v28 += 16;
      }
      while (v54 > 4);
    }
    else
    {
      v61 = vdupq_n_s32((v48 >> 8) & 0xFF00FFFF | (BYTE1(v49) << 24) | v51 & 0xFF00 | (BYTE1(v50) << 16));
      v62 = a4 + 4;
      do
      {
        *(int32x4_t *)v28 = v61;
        v28 += 16;
        *v27++ = -1;
        v62 -= 4;
      }
      while (v62 > 4);
    }
  }
  else
  {
    if (a4 >= 4)
      v36 = 4;
    else
      v36 = a4;
    bzero(v27, ((a4 - v36 + 3) & 0xFFFFFFFC) + 4);
  }
}

uint64_t argb32_sample_argb32(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  unint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int *v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  int v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  uint64_t v101;
  unsigned int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v4 = *(_DWORD *)(result + 24);
  v5 = *(_QWORD *)(result + 112);
  v6 = *(_QWORD *)(result + 48);
  v7 = *(_QWORD *)(result + 56);
  if (v6)
  {
    v109 = *(_QWORD *)(result + 112);
    if (v5 > v6)
      v109 = v5 % v6;
  }
  else
  {
    v109 = 0;
  }
  v8 = *(_QWORD *)(result + 176);
  v9 = *(_QWORD *)(result + 32);
  v10 = *(_QWORD *)(result + 120);
  if (v7)
  {
    v11 = v10 % v7;
    if (v10 <= v7)
      v11 = *(_QWORD *)(result + 120);
    v108 = v11;
  }
  else
  {
    v108 = 0;
  }
  v104 = *(_QWORD *)(result + 80);
  v105 = *(_QWORD *)(result + 64);
  v106 = *(_QWORD *)(result + 88);
  v107 = *(_QWORD *)(result + 72);
  v12 = *(_QWORD *)(result + 152) - 4;
  v13 = *(_QWORD *)(result + 144) - 1;
  if (*(_QWORD *)(result + 40))
    v14 = 0;
  else
    v14 = -16777216;
  v103 = *(_DWORD *)(result + 188);
  v15 = v9 + ((*(_DWORD *)(result + 260) - 1) * v4) + 4 * *(unsigned int *)(result + 256) - 4;
  v16 = -*(_QWORD *)(result + 64);
  v17 = -*(_QWORD *)(result + 72);
  do
  {
    while (1)
    {
      if (a3 < v107)
      {
        v18 = *(_QWORD *)(result + 216);
        v19 = v107 - *(_QWORD *)(result + 224);
        v20 = a3 - v19 + (v18 >> 1);
        if (v20 < 1)
          goto LABEL_55;
        if (v20 >= v18)
          LODWORD(v21) = 0x3FFFFFFF;
        else
          v21 = (unint64_t)(*(_QWORD *)(result + 232) * v20) >> 32;
        v28 = v103 | v21;
        v29 = v19 + 0x1000000;
        v26 = a3 - (v19 + 0x1000000);
        v27 = 512;
        goto LABEL_25;
      }
      if (a3 <= v106)
      {
        v26 = 0;
        v27 = ((unint64_t)a3 >> 22) & 0x3C0;
        v28 = 0x3FFFFFFF;
        v29 = a3;
LABEL_25:
        v30 = v105;
        goto LABEL_28;
      }
      v22 = *(_QWORD *)(result + 216);
      v23 = *(_QWORD *)(result + 224) + v106;
      v24 = v23 - a3 + (v22 >> 1);
      if (v24 < 1)
        goto LABEL_55;
      if (v24 >= v22)
        LODWORD(v25) = 0x3FFFFFFF;
      else
        v25 = (unint64_t)(*(_QWORD *)(result + 232) * v24) >> 32;
      v30 = v105;
      v28 = v103 | v25;
      v29 = v23 - 0x1000000;
      v26 = a3 - (v23 - 0x1000000);
      v27 = 448;
LABEL_28:
      if (a2 >= v30)
        break;
      v31 = *(_QWORD *)(result + 192);
      v32 = v30 - *(_QWORD *)(result + 200);
      v33 = a2 - v32 + (v31 >> 1);
      if (v33 >= 1)
      {
        if (v33 < v31)
          v28 = ((v28 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v33) >> 32) >> 15)) | v103;
        v34 = v32 + 0x1000000;
        v35 = a2 - (v32 + 0x1000000);
        v36 = 32;
        goto LABEL_39;
      }
LABEL_55:
      --a4;
      a2 += v5;
      a3 += v10;
      v12 += 4;
      *(_BYTE *)++v13 = 0;
      if (!a4)
        return result;
    }
    if (a2 <= v104)
    {
      v35 = 0;
      v36 = ((unint64_t)a2 >> 26) & 0x3C;
      v34 = a2;
      goto LABEL_39;
    }
    v37 = *(_QWORD *)(result + 192);
    v38 = *(_QWORD *)(result + 200) + v104;
    v39 = v38 - a2 + (v37 >> 1);
    if (v39 < 1)
      goto LABEL_55;
    if (v39 < v37)
      v28 = ((v28 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v39) >> 32) >> 15)) | v103;
    v34 = v38 - 0x1000000;
    v35 = a2 - (v38 - 0x1000000);
    v36 = 28;
LABEL_39:
    if (v28 < 0x400000)
      goto LABEL_55;
    if (v6)
    {
      v40 = (v7 & ((v29 % v7) >> 63)) + v29 % v7;
      v41 = (v6 & ((v34 % v6) >> 63)) + v34 % v6;
      if (v40 >= v7)
        v42 = v7;
      else
        v42 = 0;
      v29 = v40 - v42;
      if (v41 >= v6)
        v43 = v6;
      else
        v43 = 0;
      v34 = v41 - v43;
      v26 += v29;
      v35 += v34;
    }
    v44 = v9 + SHIDWORD(v29) * (uint64_t)v4;
    v45 = v34 >> 32;
    v46 = v44 + 4 * v45;
    v47 = *(unsigned int **)(result + 32);
    if (v15 >= v46)
      v48 = (unsigned int *)(v44 + 4 * v45);
    else
      v48 = (unsigned int *)v15;
    if (v48 < v47)
      v48 = *(unsigned int **)(result + 32);
    v49 = *v48;
    if (!v8)
      goto LABEL_104;
    v50 = *(_DWORD *)(v8 + (v36 | v27));
LABEL_58:
    v51 = v50 & 0xF;
    v52 = v50 >> 8;
    v53 = HIBYTE(v50) & 3;
    switch(v51)
    {
      case 1:
        LODWORD(v77) = SBYTE1(v50);
        if (v6)
        {
          v78 = v52 << 56;
          v79 = v26 + ((uint64_t)SBYTE1(v50) << 32);
          v80 = v7 & (v79 >> 63);
          if (v80 + v79 >= v7)
            v81 = v7;
          else
            v81 = 0;
          v77 = (v80 + (v78 >> 24) - v81) >> 32;
        }
        v82 = (unsigned int *)(v46 + (int)v77 * (uint64_t)v4);
        if (v15 < (unint64_t)v82)
          v82 = (unsigned int *)v15;
        if (v82 < v47)
          v82 = v47;
        v83 = interpolate_8888_19472[v53];
        v84 = v53 + 1;
        v75 = v49 - ((v83 & v49) >> v84);
        v76 = (v83 & *v82) >> v84;
        goto LABEL_93;
      case 2:
        v85 = SBYTE2(v50);
        if (v6)
        {
          v86 = v35 + ((uint64_t)SBYTE2(v50) << 32);
          v87 = v6 & (v86 >> 63);
          if (v87 + v86 >= v6)
            v88 = v6;
          else
            v88 = 0;
          v85 = (v87 + ((uint64_t)((unint64_t)HIWORD(v50) << 56) >> 24) - v88) >> 32;
        }
        v89 = (unsigned int *)(v46 + 4 * v85);
        if (v15 < (unint64_t)v89)
          v89 = (unsigned int *)v15;
        if (v89 < v47)
          v89 = v47;
        v49 = v49
            - ((interpolate_8888_19472[(v50 >> 28) & 3] & v49) >> (((v50 >> 28) & 3) + 1))
            + ((interpolate_8888_19472[(v50 >> 28) & 3] & *v89) >> (((v50 >> 28) & 3) + 1));
        break;
      case 3:
        v102 = HIBYTE(v50) & 3;
        LODWORD(v54) = SBYTE1(v50);
        v55 = SBYTE2(v50);
        if (v6)
        {
          v101 = v52 << 56;
          v56 = (unint64_t)HIWORD(v50) << 56;
          v57 = v26 + ((uint64_t)SBYTE1(v50) << 32);
          v58 = v35 + (v56 >> 24);
          v59 = v7 & (v57 >> 63);
          v60 = v6 & (v58 >> 63);
          v61 = v60 + v58;
          if (v59 + v57 >= v7)
            v62 = v7;
          else
            v62 = 0;
          if (v61 >= v6)
            v63 = v6;
          else
            v63 = 0;
          v54 = (v59 + (v101 >> 24) - v62) >> 32;
          v55 = (v60 + (v56 >> 24) - v63) >> 32;
        }
        v64 = (unsigned int *)(v46 + 4 * v55);
        if (v15 < (unint64_t)v64)
          v64 = (unsigned int *)v15;
        if (v64 < v47)
          v64 = v47;
        v65 = *v64;
        v66 = v46 + (int)v54 * (uint64_t)v4;
        if (v15 >= v66)
          v67 = (unsigned int *)(v46 + (int)v54 * (uint64_t)v4);
        else
          v67 = (unsigned int *)v15;
        if (v67 < v47)
          v67 = v47;
        v68 = *v67;
        v69 = (unsigned int *)(v66 + 4 * v55);
        if (v15 < (unint64_t)v69)
          v69 = (unsigned int *)v15;
        if (v69 < v47)
          v69 = v47;
        v70 = interpolate_8888_19472[v102];
        v71 = v49 - ((v70 & v49) >> (v102 + 1)) + ((v70 & v68) >> (v102 + 1));
        v72 = v65 - ((v70 & v65) >> (v102 + 1)) + ((v70 & *v69) >> (v102 + 1));
        v73 = (v50 >> 28) & 3;
        v74 = interpolate_8888_19472[v73];
        LOBYTE(v73) = v73 + 1;
        v75 = v71 - ((v71 & v74) >> v73);
        v76 = (v72 & v74) >> v73;
LABEL_93:
        v49 = v75 + v76;
        break;
    }
LABEL_104:
    *(_DWORD *)(v12 + 4) = v49 | v14;
    *(_BYTE *)(v13 + 1) = v28 >> 22;
    if (a4 == 1)
      break;
    v90 = 0;
    a2 += v5;
    v91 = v104 - a2;
    a3 += v10;
    v92 = v106 - a3;
    v93 = -4;
    while (((v92 | v91 | (v17 + a3) | (v16 + a2)) & 0x8000000000000000) == 0)
    {
      if (v6)
      {
        v94 = (v7 & ((v26 + v108) >> 63)) + v26 + v108;
        v95 = (v6 & ((v35 + v109) >> 63)) + v35 + v109;
        if (v94 >= v7)
          v96 = v7;
        else
          v96 = 0;
        v97 = v94 - v96;
        if (v95 >= v6)
          v98 = v6;
        else
          v98 = 0;
        v99 = v95 - v98;
        v35 = v99;
        v26 = v97;
      }
      else
      {
        v99 = a2;
        HIDWORD(v97) = HIDWORD(a3);
      }
      v46 = v9 + SHIDWORD(v97) * (uint64_t)v4 + 4 * (v99 >> 32);
      v47 = *(unsigned int **)(result + 32);
      if (v15 >= v46)
        v100 = (unsigned int *)v46;
      else
        v100 = (unsigned int *)v15;
      if (v100 < v47)
        v100 = *(unsigned int **)(result + 32);
      v49 = *v100;
      if (v8)
      {
        v50 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        if ((v50 & 0xF) != 0)
        {
          v13 += v90 + 1;
          v12 -= v93;
          a4 += ~(_DWORD)v90;
          v28 = -1;
          goto LABEL_58;
        }
      }
      *(_DWORD *)(v12 + 4 * v90 + 8) = v49 | v14;
      *(_BYTE *)(v13 + v90++ + 2) = -1;
      v93 -= 4;
      a2 += v5;
      v91 -= v5;
      a3 += v10;
      v92 -= v10;
      if (a4 - 1 == (_DWORD)v90)
        return result;
    }
    v13 += v90 + 1;
    v12 -= v93;
    a4 += ~(_DWORD)v90;
  }
  while (a4);
  return result;
}

void argb32_shade_axial_RGB(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, int8x8_t a12)
{
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  float v21;
  float v22;
  float v23;
  float v24;
  int v25;
  int v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  _WORD *v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  char v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  int32x2_t v56;
  int32x2_t v57;
  int v58;
  int32x2_t v59;
  int32x2_t v60;
  __int8 *v61;
  int32x2_t v62;
  int8x8_t v63;
  int32x2_t v64;
  int32x4_t v65;
  int v66;

  v12 = *(float *)(a1 + 280);
  v13 = *(float *)(a1 + 296)
      + (float)((float)(*(float *)(a1 + 288) * (float)(*(float *)(*(_QWORD *)(a1 + 272) + 4) * (float)a3))
              + (float)(v12 * (float)(*(float *)(*(_QWORD *)(a1 + 272) + 4) * (float)a2)));
  v14 = a1 + 368;
  v15 = *(_QWORD *)(a1 + 368);
  v16 = ((unint64_t)a3 >> 4) & 0xF0;
  v17 = v15 + v16;
  if (v15)
    v18 = v15 + v16;
  else
    v18 = a1 + 368;
  if (v15)
    v19 = 15;
  else
    v19 = 0;
  v21 = *(float *)(a1 + 336);
  v22 = *(float *)(a1 + 344);
  v23 = *(float *)(a1 + 304);
  v24 = *(float *)(a1 + 308);
  v25 = *(_DWORD *)(a1 + 320);
  v26 = *(_DWORD *)(a1 + 324);
  v29 = a1 + 144;
  v27 = *(_DWORD **)(a1 + 144);
  v28 = *(_QWORD *)(v29 + 8);
  v30 = *(unsigned __int16 **)(a1 + 376);
  v31 = *(_QWORD *)(a1 + 360);
  if (v12 != 0.0)
  {
    if (v15)
      v37 = (a2 >> 8) & 0xF;
    else
      LOBYTE(v37) = 0;
    while (1)
    {
      v38 = v25;
      if (v13 >= v23)
      {
        v38 = v26;
        if (v13 <= v24)
          v38 = (int)(float)(v22 * (float)(v13 - v21));
      }
      if (v38 < 0)
      {
        if (!v30)
        {
          v49 = 0;
          goto LABEL_40;
        }
        v48 = *(unsigned __int8 *)(v18 + v37);
        v44 = v48 + *v30;
        v45 = v48 + v30[1];
        v46 = v48 + v30[2];
        v47 = v48 + v30[3];
      }
      else
      {
        v39 = (_WORD *)(v31 + 8 * v38);
        v40 = v39[1];
        v41 = *(unsigned __int8 *)(v18 + v37);
        v42 = v39[2];
        v43 = v39[3];
        v44 = v41 + *v39;
        v45 = v41 + v40;
        v46 = v41 + v42;
        v47 = v41 + v43;
      }
      *(_DWORD *)v28 = v45 & 0xFF00 | (HIBYTE(v44) << 16) & 0xFFFFFF | HIBYTE(v46) | (HIBYTE(v47) << 24);
      v49 = -1;
LABEL_40:
      LOBYTE(v37) = (v37 + 1) & v19;
      v13 = v12 + v13;
      v28 += 4;
      *(_BYTE *)v27 = v49;
      v27 = (_DWORD *)((char *)v27 + 1);
      if (!--a4)
        return;
    }
  }
  if (v15)
    v32 = v17;
  else
    v32 = v14;
  if (v15)
    LODWORD(v33) = ((a2 >> 8) + 1) & 0xF;
  else
    LODWORD(v33) = 0;
  if (v15)
    LODWORD(v34) = (a2 >> 8) & 0xF;
  else
    LODWORD(v34) = 0;
  if (v15)
    v35 = 15;
  else
    v35 = 0;
  if (v13 >= v23)
  {
    v25 = v26;
    if (v13 <= v24)
      v25 = (int)(float)(v22 * (float)(v13 - v21));
  }
  if ((v25 & 0x80000000) == 0 || v30)
  {
    v50 = (unsigned __int16 *)(v31 + 8 * v25);
    if (v25 < 0)
      v51 = v30;
    else
      v51 = v50;
    v52 = *v51;
    v53 = v51[3];
    v54 = v51[2];
    v55 = v51[1];
    if (v15)
    {
      v56 = vdup_n_s32(v52);
      v57 = vdup_n_s32(v55);
      v58 = a4 + 4;
      v59 = vdup_n_s32(v54);
      v60 = vdup_n_s32(v53);
      do
      {
        v61 = (__int8 *)(v32 + v34);
        v34 = ((_DWORD)v34 + 1) & v35;
        a12.i8[0] = *v61;
        a12.i8[4] = *(_BYTE *)(v32 + v33);
        v62 = (int32x2_t)vand_s8(a12, (int8x8_t)0xFF000000FFLL);
        v63 = vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_n_s32(vadd_s32(v56, v62), 8uLL), (int8x8_t)0xFF000000FF0000), vand_s8((int8x8_t)vadd_s32(v57, v62), (int8x8_t)0xFF000000FF00)), vorr_s8((int8x8_t)(*(_QWORD *)&vshr_n_u32((uint32x2_t)vadd_s32(v59, v62), 8uLL) & 0xFFFFFEFFFFFFFEFFLL), (int8x8_t)(*(_QWORD *)&vshl_n_s32(vadd_s32(v60, v62), 0x10uLL) & 0xFF00FFFFFF00FFFFLL)));
        *(int8x8_t *)v28 = v63;
        v33 = ((_DWORD)v33 + 1) & v35;
        v63.i8[0] = *(_BYTE *)(v32 + v34);
        v63.i8[4] = *(_BYTE *)(v32 + v33);
        v64 = (int32x2_t)vand_s8(v63, (int8x8_t)0xFF000000FFLL);
        a12 = vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_n_s32(vadd_s32(v56, v64), 8uLL), (int8x8_t)0xFF000000FF0000), vand_s8((int8x8_t)vadd_s32(v57, v64), (int8x8_t)0xFF000000FF00)), vorr_s8((int8x8_t)(*(_QWORD *)&vshr_n_u32((uint32x2_t)vadd_s32(v59, v64), 8uLL) & 0xFFFFFEFFFFFFFEFFLL), (int8x8_t)(*(_QWORD *)&vshl_n_s32(vadd_s32(v60, v64), 0x10uLL) & 0xFF00FFFFFF00FFFFLL)));
        *(double *)(v28 + 8) = *(double *)&a12;
        *v27++ = -1;
        v58 -= 4;
        v28 += 16;
      }
      while (v58 > 4);
    }
    else
    {
      v65 = vdupq_n_s32((unsigned __int16)(v54 >> 8) | (BYTE1(v52) << 16) & 0xFFFFFF | (BYTE1(v53) << 24) | v55 & 0xFF00);
      v66 = a4 + 4;
      do
      {
        *(int32x4_t *)v28 = v65;
        v28 += 16;
        *v27++ = -1;
        v66 -= 4;
      }
      while (v66 > 4);
    }
  }
  else
  {
    if (a4 >= 4)
      v36 = 4;
    else
      v36 = a4;
    bzero(v27, ((a4 - v36 + 3) & 0xFFFFFFFC) + 4);
  }
}

void RGBA32_shade_radial_RGB(uint64_t a1, uint64_t a2, unint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  int v25;
  float v26;
  float v27;
  float v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  float v43;
  float v44;
  int v45;
  int v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  BOOL v63;
  float v64;
  BOOL v65;
  int v66;
  float v67;
  _WORD *v68;
  unsigned __int16 v69;
  __int16 v70;
  unsigned __int16 v71;
  unsigned __int16 v72;
  __int16 v73;
  char v74;
  float v75;
  float v76;
  float v77;
  unsigned __int16 *v78;
  int v79;
  float v80;
  float v81;
  float v82;
  float v84;
  float v85;
  float v86;
  int v87;
  int v88;
  uint64_t v90;
  unsigned __int16 v91;
  unsigned __int16 v92;
  int v93;
  int v94;
  _WORD *v95;
  __int16 *v96;
  __int16 v97;
  __int16 v98;
  __int16 v99;
  __int16 v100;
  __int16 v101;
  __int16 v102;
  unsigned int v103;
  __int16 v104;
  __int16 v105;
  __int16 v106;
  __int16 v107;
  __int16 v108;
  int v109;
  __int16 v110;
  __int16 v111;
  unsigned int v112;
  unsigned int v113;
  __int16 v114;
  char v115;
  char v116;
  _WORD *v117;
  unsigned __int16 v118;
  __int16 v119;
  unsigned __int16 v120;
  unsigned __int16 v121;
  __int16 v122;
  uint64_t v123;
  _WORD *v124;
  __int16 v125;
  __int16 v126;
  __int16 v127;
  __int16 v128;
  __int16 v129;
  unsigned __int16 *v130;
  unsigned __int16 *v131;
  int32x2_t v132;
  int32x2_t v133;
  int32x2_t v134;
  int32x2_t v135;
  int v136;
  _BYTE *v137;
  int32x2_t v138;
  int8x8_t v139;
  int32x2_t v140;

  v12 = *(float *)(a1 + 280);
  v13 = *(float *)(a1 + 284);
  v14 = *(float *)(*(_QWORD *)(a1 + 272) + 4);
  v15 = v14 * (float)a2;
  v16 = v14 * (float)(uint64_t)a3;
  v17 = *(float *)(a1 + 296) + (float)((float)(*(float *)(a1 + 288) * v16) + (float)(v12 * v15));
  v18 = *(float *)(a1 + 300) + (float)((float)(v16 * *(float *)(a1 + 292)) + (float)(v13 * v15));
  v20 = *(_QWORD *)(a1 + 400);
  v21 = *(float *)(a1 + 336);
  v22 = *(float *)(a1 + 344);
  v23 = *(float *)(a1 + 304);
  v24 = *(float *)(a1 + 308);
  v25 = *(_DWORD *)(a1 + 324);
  LODWORD(a12) = *(_DWORD *)(v20 + 8);
  v26 = *(float *)(v20 + 16);
  v27 = *(float *)(v20 + 20);
  v28 = *(float *)(v20 + 28);
  v31 = a1 + 144;
  v29 = *(char **)(a1 + 144);
  v30 = *(_QWORD *)(v31 + 8);
  v32 = *(unsigned __int16 **)(a1 + 376);
  v33 = *(_QWORD *)(a1 + 360);
  v34 = ((unint64_t)a2 >> 8) & 0xF;
  if (*(float *)&a12 != 0.0 || v28 != 0.0 || v13 != 0.0)
  {
    v46 = *(_DWORD *)(a1 + 320);
    v47 = *(float *)(v20 + 12);
    v48 = *(float *)(v20 + 24);
    v49 = *(float *)(v20 + 32);
    v50 = a1 + 368;
    v51 = *(_QWORD *)(a1 + 368);
    v52 = v51 + ((a3 >> 4) & 0xF0);
    v38 = v51 == 0;
    v53 = 15;
    if (v38)
    {
      v53 = 0;
      v34 = 0;
    }
    else
    {
      v50 = v52;
    }
    v54 = -v48;
    v55 = v24 - v23;
    while (1)
    {
      v56 = v54 + (float)((float)(v17 + v17) * *(float *)&a12);
      v57 = (float)((float)(v18 * v18) + (float)(v17 * v17)) - v28;
      if (v27 == 0.0)
      {
        v64 = v57 / v56;
      }
      else
      {
        v58 = (float)((float)(v27 * -4.0) * v57) + (float)(v56 * v56);
        if (v58 < 0.0)
          goto LABEL_54;
        v59 = sqrtf(v58);
        v60 = v49 * (float)(v56 - v59);
        v61 = v56 + v59;
        v62 = v49 * v61;
        v63 = (float)(v49 * v61) <= v60;
        if ((float)(v49 * v61) <= v60)
          v64 = v49 * v61;
        else
          v64 = v60;
        if (v63)
          v62 = v60;
        if (v62 < 0.0)
        {
          v65 = v62 < v47;
LABEL_40:
          v66 = v46;
          if (v65)
            goto LABEL_54;
LABEL_41:
          if ((v66 & 0x80000000) == 0)
            goto LABEL_53;
          goto LABEL_54;
        }
        if (v62 <= 1.0)
        {
          v67 = v23 + (float)(v62 * v55);
          goto LABEL_52;
        }
        if ((v25 & 0x80000000) == 0)
        {
          v66 = v25;
          if (v62 <= v26)
          {
LABEL_53:
            v68 = (_WORD *)(v33 + 8 * v66);
            v69 = v68[1];
            v70 = *(unsigned __int8 *)(v50 + v34);
            v71 = v68[2];
            v72 = v68[3];
            v73 = v70 + *v68;
            goto LABEL_56;
          }
        }
      }
      if (v64 < 0.0)
      {
        v65 = v64 < v47;
        goto LABEL_40;
      }
      if (v64 > 1.0)
      {
        v66 = v25;
        if (v64 > v26)
          goto LABEL_54;
        goto LABEL_41;
      }
      v67 = v23 + (float)(v64 * v55);
LABEL_52:
      v66 = (int)(float)(v22 * (float)(v67 - v21));
      if ((v66 & 0x80000000) == 0)
        goto LABEL_53;
LABEL_54:
      if (!v32)
      {
        v74 = 0;
        goto LABEL_58;
      }
      v69 = v32[1];
      v70 = *(unsigned __int8 *)(v50 + v34);
      v71 = v32[2];
      v72 = v32[3];
      v73 = v70 + *v32;
LABEL_56:
      *(_DWORD *)v30 = (v70 + v69) & 0xFF00 | HIBYTE(v73) | (((unsigned __int16)(v70 + v71) >> 8) << 16) & 0xFFFFFF | (((unsigned __int16)(v70 + v72) >> 8) << 24);
      v74 = -1;
LABEL_58:
      v34 = ((_DWORD)v34 + 1) & v53;
      v17 = v12 + v17;
      v18 = v13 + v18;
      v30 += 4;
      *v29++ = v74;
      if (!--a4)
        return;
    }
  }
  v35 = a1 + 368;
  v36 = *(_QWORD *)(a1 + 368);
  v37 = (BYTE1(a2) + 1) & 0xF;
  v38 = v36 == 0;
  if (v36)
    v39 = v36 + ((a3 >> 4) & 0xF0);
  else
    v39 = v35;
  if (v38)
    LODWORD(v40) = 0;
  else
    LODWORD(v40) = v37;
  if (v38)
    LODWORD(v41) = 0;
  else
    LODWORD(v41) = v34;
  if (v38)
    v42 = 0;
  else
    v42 = 15;
  v43 = v18 * v18;
  v44 = -v27;
  if (v43 <= (float)-v27)
  {
    v75 = fabsf(*(float *)(v20 + 32));
    v76 = v27 * -4.0;
    v77 = v24 - v23;
    v78 = (unsigned __int16 *)(v33 + 8 * v25);
    v79 = a4 + 2;
    while (1)
    {
      v80 = v43 + (float)(v17 * v17);
      v81 = v12 + v17;
      v82 = v43 + (float)(v81 * v81);
      if (v80 > v44 && v82 > v44)
      {
        if (v25 < 0)
        {
          if (!v32)
          {
            v116 = 0;
            v115 = 0;
            goto LABEL_82;
          }
          v91 = *v32;
          v92 = v32[1];
          v93 = v32[2];
          v94 = v32[3];
        }
        else
        {
          v91 = *v78;
          v92 = v78[1];
          v93 = v78[2];
          v94 = v78[3];
        }
        v109 = *(unsigned __int8 *)(v39 + v41);
        v110 = v109 + v91;
        v111 = v109 + v92;
        v112 = (v109 + v93) >> 8;
        v113 = (v109 + v94) >> 8;
        v114 = *(unsigned __int8 *)(v39 + v40);
        v105 = v114 + v91;
        v106 = v114 + v92;
        v107 = v114 + v93;
        v108 = v114 + v94;
        *(_DWORD *)v30 = v111 & 0xFF00 | HIBYTE(v110) | (v112 << 16) & 0xFFFFFF | (v113 << 24);
        goto LABEL_80;
      }
      v84 = sqrtf(v76 * v82);
      v85 = v75 * sqrtf(v76 * v80);
      v86 = v75 * v84;
      v87 = (int)(float)(v22 * (float)((float)(v23 + (float)(v85 * v77)) - v21));
      v88 = (int)(float)(v22 * (float)((float)(v23 + (float)((float)(v75 * v84) * v77)) - v21));
      if (v85 <= 1.0 && v86 <= 1.0)
      {
        v95 = (_WORD *)(v33 + 8 * v87);
        v96 = (__int16 *)(v33 + 8 * v88);
        v97 = *v96;
        v98 = v96[1];
        v99 = v96[2];
        v100 = v96[3];
        LODWORD(v96) = *(unsigned __int8 *)(v39 + v41);
        v101 = (_WORD)v96 + *v95;
        v102 = (_WORD)v96 + v95[1];
        v103 = (v96 + (unsigned __int16)v95[2]) >> 8;
        LODWORD(v95) = (v96 + (unsigned __int16)v95[3]) >> 8;
        v104 = *(unsigned __int8 *)(v39 + v40);
        v105 = v104 + v97;
        v106 = v104 + v98;
        v107 = v104 + v99;
        v108 = v104 + v100;
        *(_DWORD *)v30 = v102 & 0xFF00 | HIBYTE(v101) | (v103 << 16) & 0xFFFFFF | (v95 << 24);
LABEL_80:
        v115 = -1;
        goto LABEL_81;
      }
      if (v85 <= 1.0)
      {
        if ((v87 & 0x80000000) == 0)
        {
          v90 = 4 * v87;
LABEL_86:
          v117 = (_WORD *)(v33 + 2 * v90);
          v118 = v117[1];
          v119 = *(unsigned __int8 *)(v39 + v41);
          v120 = v117[2];
          v121 = v117[3];
          v122 = v119 + *v117;
          goto LABEL_89;
        }
      }
      else if (v85 <= v26)
      {
        v90 = 4 * v25;
        if ((v25 & 0x80000000) == 0)
          goto LABEL_86;
      }
      if (!v32)
      {
        v115 = 0;
        goto LABEL_90;
      }
      v118 = v32[1];
      v119 = *(unsigned __int8 *)(v39 + v41);
      v120 = v32[2];
      v121 = v32[3];
      v122 = v119 + *v32;
LABEL_89:
      *(_DWORD *)v30 = (v119 + v118) & 0xFF00 | HIBYTE(v122) | (((unsigned __int16)(v119 + v120) >> 8) << 16) & 0xFFFFFF | (((unsigned __int16)(v119 + v121) >> 8) << 24);
      v115 = -1;
LABEL_90:
      if (v86 <= 1.0)
      {
        if (v88 < 0)
          goto LABEL_97;
        v123 = 4 * v88;
      }
      else if (v86 > v26 || (v123 = 4 * v25, v25 < 0))
      {
LABEL_97:
        if (!v32)
        {
          v116 = 0;
          goto LABEL_82;
        }
        v129 = *(unsigned __int8 *)(v39 + v40);
        v105 = v129 + *v32;
        v106 = v129 + v32[1];
        v107 = v129 + v32[2];
        v108 = v129 + v32[3];
        goto LABEL_81;
      }
      v124 = (_WORD *)(v33 + 2 * v123);
      v125 = v124[1];
      v126 = *(unsigned __int8 *)(v39 + v40);
      v127 = v124[2];
      v128 = v124[3];
      v105 = v126 + *v124;
      v106 = v126 + v125;
      v107 = v126 + v127;
      v108 = v126 + v128;
LABEL_81:
      *(_DWORD *)(v30 + 4) = v106 & 0xFF00 | HIBYTE(v105) | (HIBYTE(v107) << 16) & 0xFFFFFF | (HIBYTE(v108) << 24);
      v116 = -1;
LABEL_82:
      v17 = v12 + v81;
      LOBYTE(v41) = (v41 + 1) & v42;
      LOBYTE(v40) = (v40 + 1) & v42;
      v30 += 8;
      *v29 = v115;
      v29[1] = v116;
      v29 += 2;
      v79 -= 2;
      if (v79 <= 2)
        return;
    }
  }
  if (v32 || (v25 & 0x80000000) == 0)
  {
    v130 = (unsigned __int16 *)(v33 + 8 * v25);
    if (v25 >= 0)
      v131 = v130;
    else
      v131 = v32;
    v132 = vdup_n_s32(*v131);
    v133 = vdup_n_s32(v131[1]);
    v134 = vdup_n_s32(v131[2]);
    v135 = vdup_n_s32(v131[3]);
    v136 = a4 + 4;
    do
    {
      v137 = (_BYTE *)(v39 + v41);
      v41 = ((_DWORD)v41 + 1) & v42;
      LOBYTE(a12) = *v137;
      BYTE4(a12) = *(_BYTE *)(v39 + v40);
      v138 = (int32x2_t)vand_s8(*(int8x8_t *)&a12, (int8x8_t)0xFF000000FFLL);
      v139 = vorr_s8(vorr_s8((int8x8_t)(*(_QWORD *)&vshr_n_u32((uint32x2_t)vadd_s32(v132, v138), 8uLL) & 0xFFFFFEFFFFFFFEFFLL), vand_s8((int8x8_t)vadd_s32(v133, v138), (int8x8_t)0xFF000000FF00)), vorr_s8(vand_s8((int8x8_t)vshl_n_s32(vadd_s32(v134, v138), 8uLL), (int8x8_t)0xFF000000FF0000), (int8x8_t)(*(_QWORD *)&vshl_n_s32(vadd_s32(v135, v138), 0x10uLL) & 0xFF00FFFFFF00FFFFLL)));
      *(int8x8_t *)v30 = v139;
      v40 = ((_DWORD)v40 + 1) & v42;
      v139.i8[0] = *(_BYTE *)(v39 + v41);
      v139.i8[4] = *(_BYTE *)(v39 + v40);
      v140 = (int32x2_t)vand_s8(v139, (int8x8_t)0xFF000000FFLL);
      a12 = COERCE_DOUBLE(vorr_s8(vorr_s8((int8x8_t)(*(_QWORD *)&vshr_n_u32((uint32x2_t)vadd_s32(v132, v140), 8uLL) & 0xFFFFFEFFFFFFFEFFLL), vand_s8((int8x8_t)vadd_s32(v133, v140), (int8x8_t)0xFF000000FF00)), vorr_s8(vand_s8((int8x8_t)vshl_n_s32(vadd_s32(v134, v140), 8uLL), (int8x8_t)0xFF000000FF0000), (int8x8_t)(*(_QWORD *)&vshl_n_s32(vadd_s32(v135, v140), 0x10uLL) & 0xFF00FFFFFF00FFFFLL))));
      *(double *)(v30 + 8) = a12;
      *(_DWORD *)v29 = -1;
      v29 += 4;
      v136 -= 4;
      v30 += 16;
    }
    while (v136 > 4);
  }
  else
  {
    if (a4 >= 4)
      v45 = 4;
    else
      v45 = a4;
    bzero(v29, ((a4 - v45 + 3) & 0xFFFFFFFC) + 4);
  }
}

void CGImageRelease(CGImageRef image)
{
  if (image)
    CFRelease(image);
}

BOOL CGRectIsInfinite(CGRect rect)
{
  return rect.origin.x == -8.98846567e307
      && rect.origin.y == -8.98846567e307
      && rect.size.width == 1.79769313e308
      && rect.size.height == 1.79769313e308;
}

uint64_t get_parser_font(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

CGColorSpaceRef CGColorGetColorSpace(CGColorSpaceRef color)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (color)
  {
    if (((unint64_t)color & 0x8000000000000000) != 0)
      return CGTaggedColorGetColorSpace((unint64_t)color, v1, v2, v3, v4, v5, v6, v7);
    else
      return (CGColorSpaceRef)*((_QWORD *)color + 3);
  }
  return color;
}

CGPatternRef CGColorGetPattern(CGColorRef color)
{
  if ((uint64_t)color < 1)
    return 0;
  else
    return (CGPatternRef)*((_QWORD *)color + 4);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  CGAffineTransform *result;

  retstr->a = 1.0;
  retstr->b = 0.0;
  retstr->c = 0.0;
  retstr->d = 1.0;
  retstr->tx = tx;
  retstr->ty = ty;
  return result;
}

void CGContextRelease(CGContextRef c)
{
  if (c)
    CFRelease(c);
}

uint64_t compare_names(_QWORD *a1, _QWORD *a2)
{
  if (*a1 > *a2)
    return 1;
  else
    return 0xFFFFFFFFLL;
}

void CGPathRelease(CGPathRef path)
{
  if (path)
    CFRelease(path);
}

uint64_t CGGStateGetCompositeOperation(uint64_t a1)
{
  return ((__int16)*(_DWORD *)(*(_QWORD *)(a1 + 120) + 4) >> 8);
}

uint64_t CGContextDelegateGetInfo(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 288);
  return result;
}

uint64_t CGContextDelegateGetCallback(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    result = get_callback_address(result, a2, (uint64_t)"CGContextDelegateGetCallback", a4, a5, a6, a7, a8);
    if (result)
      return *(_QWORD *)result;
  }
  return result;
}

_QWORD *CGContextDelegateSetCallback(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    result = (_QWORD *)get_callback_address((uint64_t)result, a2, (uint64_t)"CGContextDelegateSetCallback", a4, a5, a6, a7, a8);
    if (result)
      *result = a3;
  }
  return result;
}

_QWORD *CGContextDelegateSetCallbacks(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  if (result)
  {
    v8 = a3;
    if (a3)
    {
      v9 = (uint64_t)result;
      v10 = (uint64_t *)(a2 + 8);
      do
      {
        v11 = *v10;
        result = (_QWORD *)get_callback_address(v9, *((unsigned int *)v10 - 2), (uint64_t)"CGContextDelegateSetCallback", a4, a5, a6, a7, a8);
        if (result)
          *result = v11;
        v10 += 2;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t get_callback_address(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  switch((int)a2)
  {
    case 0:
      result = a1 + 24;
      break;
    case 1:
      result = a1 + 32;
      break;
    case 2:
      result = a1 + 40;
      break;
    case 3:
      result = a1 + 48;
      break;
    case 4:
      result = a1 + 56;
      break;
    case 5:
      result = a1 + 64;
      break;
    case 6:
      result = a1 + 72;
      break;
    case 7:
      result = a1 + 80;
      break;
    case 8:
      result = a1 + 88;
      break;
    case 9:
      result = a1 + 96;
      break;
    case 10:
      result = a1 + 128;
      break;
    case 11:
      result = a1 + 136;
      break;
    case 12:
      result = a1 + 152;
      break;
    case 13:
      result = a1 + 160;
      break;
    case 14:
      result = a1 + 168;
      break;
    case 15:
      result = a1 + 176;
      break;
    case 17:
      result = a1 + 192;
      break;
    case 18:
      result = a1 + 200;
      break;
    case 19:
      result = a1 + 208;
      break;
    case 20:
      result = a1 + 216;
      break;
    case 21:
      result = a1 + 104;
      break;
    case 22:
      result = a1 + 112;
      break;
    case 23:
      result = a1 + 144;
      break;
    case 24:
      result = a1 + 224;
      break;
    case 25:
      result = a1 + 232;
      break;
    case 26:
      result = a1 + 240;
      break;
    case 27:
      result = a1 + 120;
      break;
    case 28:
      result = a1 + 248;
      break;
    case 29:
      result = a1 + 256;
      break;
    case 30:
      result = a1 + 264;
      break;
    case 31:
      result = a1 + 272;
      break;
    default:
      CGPostError((uint64_t)"%s: Unsupported delegate callback: %d.", a2, a3, a4, a5, a6, a7, a8, a3);
      result = 0;
      break;
  }
  return result;
}

BOOL CGImageIsSubimage(uint64_t a1, _QWORD *a2, _OWORD *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 240);
  if (v3)
  {
    if (a2)
      *a2 = v3;
    if (a3)
      *a3 = *(_OWORD *)(a1 + 248);
  }
  return v3 != 0;
}

CGFloat CGColorGetAlpha(CGColorRef color)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!color)
    return 0.0;
  if (((unint64_t)color & 0x8000000000000000) != 0)
    return CGTaggedColorGetAlpha((uint64_t)color, v1, v2, v3, v4, v5, v6, v7);
  return *((double *)color + *((_QWORD *)color + 7) + 7);
}

CFTypeID CGImageGetTypeID(void)
{
  if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1)
    dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_211);
  return CGImageGetTypeID_image_type_id;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  if (rect.size.width < 0.0 || rect.size.height < 0.0)
    rect = CGRectStandardize(rect);
  return rect.origin.x + rect.size.width * 0.5;
}

uint64_t CGGStateGetStyle(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 120) + 16);
}

BOOL color_equal(CGColor *a1, CGColor *a2)
{
  return CGColorEqualToColor(a1, a2);
}

CGImageRef CGImageRetain(CGImageRef image)
{
  if (image)
    CFRetain(image);
  return image;
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  double b;
  double c;
  double d;
  double a;
  double v7;
  double v8;
  double v9;
  CGFloat v10;
  double tx;
  double ty;
  double v13;
  CGFloat v14;

  b = t1->b;
  c = t1->c;
  d = t1->d;
  a = t2->a;
  v7 = t2->b;
  v8 = t2->c;
  v9 = t2->d;
  v10 = b * v9 + t1->a * v7;
  retstr->a = b * v8 + t1->a * t2->a;
  retstr->b = v10;
  retstr->c = d * v8 + c * a;
  retstr->d = d * v9 + c * v7;
  tx = t1->tx;
  ty = t1->ty;
  v13 = v8 * ty + tx * a;
  v14 = v9 * ty + tx * v7 + t2->ty;
  retstr->tx = t2->tx + v13;
  retstr->ty = v14;
  return t1;
}

uint64_t strike_key_hash(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t CGFontGetParserFont(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(result + 16) + 96))(*(_QWORD *)(result + 112));
  return result;
}

BOOL CGRectIsEmpty(CGRect rect)
{
  if (rect.origin.x == INFINITY || rect.origin.y == INFINITY)
    return 1;
  if (rect.size.height == 0.0)
    return 1;
  return rect.size.width == 0.0;
}

void CGContextFillPath(CGContextRef c)
{
  CGContextDrawPath(c, kCGPathFill);
}

_QWORD *CGImageGetImageProvider(_QWORD *result)
{
  _QWORD *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1)
      dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_211);
    if (v2 == CGImageGetTypeID_image_type_id)
      return (_QWORD *)v1[26];
    else
      return 0;
  }
  return result;
}

void CGDisplayListRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

BOOL CGColorSpaceSupportsOutput(CGColorSpaceRef space)
{
  if (space)
    LOBYTE(space) = *(_BYTE *)(*((_QWORD *)space + 3) + 10) != 0;
  return (char)space;
}

uint64_t compare_key(const char *a1, uint64_t a2)
{
  return strcmp(a1, *(const char **)(*(_QWORD *)a2 + 32));
}

const void *CGImageGetProperty(uint64_t a1, const void *a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 216)) != 0)
    return CGPropertiesGetProperty(v2, a2);
  else
    return 0;
}

uint64_t __send_analytics_event_block_invoke_2()
{
  void *v0;
  void *v1;
  id v2;
  unsigned int v3;
  id v4;
  int v5;
  uint32_t i;
  uint64_t result;
  const mach_header *image_header;
  const char *image_name;
  BOOL v10;
  __int128 *v11;
  BOOL v12;
  _BOOL4 v13;
  uint32_t ncmds;
  uint64_t v16;
  char *v17;

  v0 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier");
  _block_invoke_appIdentifier = (uint64_t)v0;
  if (v0)
  {
    v1 = v0;
    v2 = v0;
    if ((objc_msgSend(v1, "hasPrefix:", CFSTR("com.apple")) & 1) == 0)
    {
      v3 = time(0);
      srandom(v3);
      if ((float)((float)rand() * 4.6566e-10) > 0.005)
        send_analytics_event_sSendAnalytics = 1;
    }
  }
  else
  {
    _block_invoke_appIdentifier = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3898], "processInfo"), "processName");
    v4 = (id)_block_invoke_appIdentifier;
  }
  v5 = 0;
  for (i = 0; ; ++i)
  {
    result = _dyld_image_count();
    if (i >= result || v5 >= 3)
      break;
    image_header = _dyld_get_image_header(i);
    image_name = _dyld_get_image_name(i);
    v10 = string_ends_with(image_name, "PDFKit");
    v11 = &_block_invoke_pdfKit_uuid;
    if (!v10)
    {
      v12 = string_ends_with(image_name, "AppKit");
      v11 = &_block_invoke_appKit_uuid;
      if (!v12)
      {
        v13 = string_ends_with(image_name, "CoreUI");
        v11 = &_block_invoke_coreUI_uuid;
        if (!v13)
          continue;
      }
    }
    ncmds = image_header->ncmds;
    if (ncmds)
    {
      if (image_header->magic == -805638658 || image_header->magic == -17958193)
        v16 = 32;
      else
        v16 = 28;
      v17 = (char *)image_header + v16;
      while (*(_DWORD *)v17 != 27)
      {
        v17 += *((unsigned int *)v17 + 1);
        if (!--ncmds)
          goto LABEL_24;
      }
      *v11 = *(_OWORD *)(v17 + 8);
    }
LABEL_24:
    ++v5;
  }
  return result;
}

BOOL string_ends_with(const char *a1, char *__s)
{
  _BOOL8 result;
  size_t v5;
  size_t v6;

  result = 0;
  if (a1)
  {
    if (__s)
    {
      v5 = strlen(__s);
      v6 = strlen(a1);
      return strncmp(&a1[v6 - v5], __s, v5) == 0;
    }
  }
  return result;
}

void CGContextClearRect(CGContextRef c, CGRect rect)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CGRect v13;

  height = rect.size.height;
  width = rect.size.width;
  y = rect.origin.y;
  x = rect.origin.x;
  CGContextSaveGState(c);
  CGContextSetCompositeOperation((uint64_t)c, 0, v7, v8, v9, v10, v11, v12);
  v13.origin.x = x;
  v13.origin.y = y;
  v13.size.width = width;
  v13.size.height = height;
  CGContextFillRect(c, v13);
  CGContextRestoreGState(c);
}

void CGContextSaveGState(CGContextRef c)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CGContextRef v7;

  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      *((_QWORD *)c + 12) = CGGStackSave(*((_QWORD *)c + 13));
      return;
    }
    v7 = c;
  }
  else
  {
    v7 = 0;
  }
  handle_invalid_context((char)"CGContextSaveGState", (uint64_t)v7, v1, v2, v3, v4, v5, v6);
}

uint64_t CGGStackSave(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  char **v4;
  char *Copy;
  char **v6;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 == a1)
  {
    v3 = CGGStateCreate();
    v4 = *(char ***)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)v3 = a1;
    *v4 = v3;
    *((_QWORD *)v3 + 1) = v4;
    v2 = *(_QWORD *)(a1 + 8);
  }
  Copy = CGGStateCreateCopy(v2);
  v6 = *(char ***)(a1 + 8);
  *(_QWORD *)(a1 + 8) = Copy;
  *(_QWORD *)Copy = a1;
  *v6 = Copy;
  *((_QWORD *)Copy + 1) = v6;
  return *(_QWORD *)(a1 + 8);
}

void CGContextRestoreGState(CGContextRef c)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGContextRef v8;

  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      *((_QWORD *)c + 12) = CGGStackRestore(*((uint64_t **)c + 13), v1, v2, v3, v4, v5, v6, v7);
      return;
    }
    v8 = c;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextRestoreGState", (uint64_t)v8, v2, v3, v4, v5, v6, v7);
}

uint64_t CGGStackRestore(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;

  v9 = (uint64_t *)a1[1];
  if (v9 == a1 || (v10 = (uint64_t *)v9[1], v10 == a1))
  {
    CGPostError((uint64_t)"%s: CG GState restored too many times", a2, a3, a4, a5, a6, a7, a8, (char)"CGGStackRestore");
  }
  else
  {
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = v10;
    *v10 = v11;
    *v9 = (uint64_t)v9;
    v9[1] = (uint64_t)v9;
    CGGStateRelease((uint64_t)v9);
  }
  return a1[1];
}

char *CGGStateCreate()
{
  char *v0;

  v0 = (char *)malloc_type_calloc(1uLL, 0x98uLL, 0xA3729uLL);
  *(_QWORD *)v0 = v0;
  *((_QWORD *)v0 + 1) = v0;
  *((_DWORD *)v0 + 4) = 1;
  *(CGAffineTransform *)(v0 + 24) = CGAffineTransformIdentity;
  CGGStateClipReset((uint64_t)v0);
  CGGStateReset((uint64_t)v0);
  return v0;
}

CGFloat CGGStateClipReset(uint64_t a1)
{
  char *v2;
  CGFloat result;

  CGClipStackRelease(*(void **)(a1 + 112));
  v2 = (char *)malloc_type_malloc(0x98uLL, 0x2062DE7BuLL);
  *(_DWORD *)v2 = 1;
  *((_DWORD *)v2 + 1) = 0;
  *((_DWORD *)v2 + 2) = 0;
  result = CGRectInfinite.origin.x;
  *(CGRect *)(v2 + 48) = CGRectInfinite;
  *(CGRect *)(v2 + 80) = CGRectInfinite;
  *(CGRect *)(v2 + 16) = CGRectInfinite;
  *((_QWORD *)v2 + 15) = 0;
  *((_QWORD *)v2 + 16) = 0;
  *((_QWORD *)v2 + 14) = 3;
  *(_QWORD *)(a1 + 112) = v2;
  *(CGRect *)(a1 + 80) = CGRectInfinite;
  *(_BYTE *)(a1 + 20) &= ~1u;
  return result;
}

void CGGStateReset(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;

  CGGStateSetFillColor(a1, 0);
  device_state_release(*(unsigned int **)(a1 + 144));
  if (device_state_create_root_predicate != -1)
    dispatch_once(&device_state_create_root_predicate, &__block_literal_global_14880);
  v9 = device_state_create_root_root;
  if (device_state_create_root_root)
  {
    v10 = (unsigned int *)(device_state_create_root_root + 4);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 144) = v9;
  *(_BYTE *)(a1 + 20) |= 0x10u;
  text_state_release(*(_QWORD **)(a1 + 136), v2, v3, v4, v5, v6, v7, v8);
  if (text_state_create_root_predicate != -1)
    dispatch_once(&text_state_create_root_predicate, &__block_literal_global_18076);
  v12 = text_state_create_root_root;
  if (text_state_create_root_root)
  {
    v13 = (unsigned int *)(text_state_create_root_root + 4);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_QWORD *)(a1 + 136) = v12;
  *(_BYTE *)(a1 + 20) |= 8u;
  if (*(_QWORD *)(a1 + 120))
  {
    maybeCopyRenderingState(a1);
    renderingStateReset(*(_QWORD *)(a1 + 120));
  }
  else
  {
    v22 = malloc_type_calloc(1uLL, 0x38uLL, 0xA3729uLL);
    *v22 = 1;
    renderingStateReset((uint64_t)v22);
    *(_QWORD *)(a1 + 120) = v22;
    *(_BYTE *)(a1 + 20) &= ~2u;
  }
  stroke_state_release(*(_QWORD **)(a1 + 128), v15, v16, v17, v18, v19, v20, v21);
  if (stroke_state_create_root_predicate != -1)
    dispatch_once(&stroke_state_create_root_predicate, &__block_literal_global_16181);
  v23 = stroke_state_create_root_root;
  if (stroke_state_create_root_root)
  {
    v24 = (unsigned int *)(stroke_state_create_root_root + 4);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  *(_QWORD *)(a1 + 128) = v23;
  *(_BYTE *)(a1 + 20) |= 4u;
}

void CGGStateSetFillColor(uint64_t a1, void *a2)
{
  void *v4;

  v4 = *(void **)(a1 + 72);
  if (!CGColorEqualToColor((CGColorRef)v4, (CGColorRef)a2))
  {
    if (v4)
      CFRelease(v4);
    if (a2)
      CFRetain(a2);
    *(_QWORD *)(a1 + 72) = a2;
  }
}

BOOL CGColorEqualToColor(CGColorRef color1, CGColorRef color2)
{
  CGColorRef v2;
  uint64_t v4;

  if (color1 == color2)
  {
    LOBYTE(color1) = 1;
  }
  else
  {
    v2 = color1;
    LOBYTE(color1) = 0;
    if (((unint64_t)v2 & 0x8000000000000000) == 0 && ((unint64_t)color2 & 0x8000000000000000) == 0)
    {
      LOBYTE(color1) = 0;
      if (v2)
      {
        if (color2)
        {
          v4 = *((_QWORD *)v2 + 7);
          if (v4 == *((_QWORD *)color2 + 7) && !memcmp((char *)v2 + 64, (char *)color2 + 64, 8 * v4))
          {
            LODWORD(color1) = CGPatternEqualToPattern(*((_QWORD *)v2 + 4), *((_QWORD *)color2 + 4));
            if ((_DWORD)color1)
              LOBYTE(color1) = CGColorSpaceEqualToColorSpace(*((_QWORD *)v2 + 3), *((_QWORD *)color2 + 3));
          }
          else
          {
            LOBYTE(color1) = 0;
          }
        }
      }
    }
  }
  return (char)color1;
}

char *CGGStateCreateCopy(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  char v14;
  __int128 v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = (char *)malloc_type_malloc(0x98uLL, 0x2062DE7BuLL);
  *(_QWORD *)v8 = v8;
  *((_QWORD *)v8 + 1) = v8;
  *((_DWORD *)v8 + 4) = 1;
  v9 = *(_OWORD *)(a1 + 24);
  v10 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v8 + 40) = v10;
  *(_OWORD *)(v8 + 24) = v9;
  v11 = *(_QWORD *)(a1 + 72);
  if (v11)
    CFRetain(*(CFTypeRef *)(a1 + 72));
  *((_QWORD *)v8 + 9) = v11;
  v12 = *(unsigned int **)(a1 + 112);
  if (v12)
  {
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *((_QWORD *)v8 + 14) = v12;
  *(_BYTE *)(a1 + 20) |= 1u;
  v14 = v8[20] | 1;
  v8[20] = v14;
  v15 = *(_OWORD *)(a1 + 96);
  *((_OWORD *)v8 + 5) = *(_OWORD *)(a1 + 80);
  *((_OWORD *)v8 + 6) = v15;
  v16 = *(unsigned int **)(a1 + 120);
  if (v16)
  {
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v14 = v8[20];
  }
  *((_QWORD *)v8 + 15) = v16;
  v8[20] = v14 | 2;
  *(_BYTE *)(a1 + 20) |= 2u;
  *((_QWORD *)v8 + 16) = 0;
  CGGStateStrokeCopy((uint64_t)v8, a1, v2, v3, v4, v5, v6, v7);
  *((_QWORD *)v8 + 17) = 0;
  CGGStateTextCopy((uint64_t)v8, a1, v18, v19, v20, v21, v22, v23);
  *((_QWORD *)v8 + 18) = 0;
  CGGStateDeviceCopy((uint64_t)v8, a1);
  return v8;
}

void CGGStateRelease(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;

  if (a1)
  {
    v2 = (unsigned int *)(a1 + 16);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stxr(v4, v2));
    if (!v4)
    {
      CGClipStackRelease(*(void **)(a1 + 112));
      device_state_release(*(unsigned int **)(a1 + 144));
      renderingStateRelease(*(unsigned int **)(a1 + 120));
      stroke_state_release(*(_QWORD **)(a1 + 128), v5, v6, v7, v8, v9, v10, v11);
      text_state_release(*(_QWORD **)(a1 + 136), v12, v13, v14, v15, v16, v17, v18);
      v19 = *(const void **)(a1 + 72);
      if (v19)
        CFRelease(v19);
      free((void *)a1);
    }
  }
}

void text_state_release(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  const void *v12;
  const void *v13;

  if (a1)
  {
    v9 = (unsigned int *)a1 + 1;
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stxr(v11, v9));
    if (!v11)
    {
      if ((*(_WORD *)a1 & 1) != 0)
        _CGHandleAssert("text_state_release", 117, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Context/CGGStateText.c", "!ts->is_root", "is root %d", a6, a7, a8, 1);
      v12 = (const void *)a1[1];
      if (v12)
        CFRelease(v12);
      v13 = (const void *)a1[8];
      if (v13)
        CFRelease(v13);
      free(a1);
    }
  }
}

void stroke_state_release(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  const void *v15;

  if (a1)
  {
    v9 = (unsigned int *)a1 + 1;
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stxr(v11, v9));
    if (!v11)
    {
      if (*(_BYTE *)a1)
        _CGHandleAssert("stroke_state_release", 86, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Context/CGGStateStroke.c", "!ss->is_root", "is root: %d", a6, a7, a8, 1);
      v12 = (unsigned int *)a1[4];
      if (v12)
      {
        do
        {
          v13 = __ldxr(v12);
          v14 = v13 - 1;
        }
        while (__stxr(v14, v12));
        if (!v14)
          free(v12);
      }
      v15 = (const void *)a1[5];
      if (v15)
        CFRelease(v15);
      free(a1);
    }
  }
}

void device_state_release(unsigned int *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  const void *v5;
  const void *v6;

  if (a1)
  {
    v2 = a1 + 1;
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stxr(v4, v2));
    if (!v4)
    {
      v5 = (const void *)*((_QWORD *)a1 + 4);
      if (v5)
        CFRelease(v5);
      v6 = (const void *)*((_QWORD *)a1 + 5);
      if (v6)
        CFRelease(v6);
      free(a1);
    }
  }
}

void CGClipStackRelease(void *a1)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  if (a1)
  {
    do
    {
      v2 = __ldxr((unsigned int *)a1);
      v3 = v2 - 1;
    }
    while (__stxr(v3, (unsigned int *)a1));
    if (!v3)
    {
      v4 = *((_QWORD *)a1 + 15);
      if (*((_QWORD *)a1 + 14) == 3)
      {
        if (v4)
        {
          v5 = 0;
          do
            CGClipRelease(*((char **)a1 + v5++ + 16));
          while (v5 < *((_QWORD *)a1 + 15));
        }
      }
      else
      {
        if (v4)
        {
          v6 = 0;
          do
            CGClipRelease(*(char **)(*((_QWORD *)a1 + 16) + 8 * v6++));
          while (v6 < *((_QWORD *)a1 + 15));
        }
        free(*((void **)a1 + 16));
      }
      free(a1);
    }
  }
}

void renderingStateRelease(unsigned int *a1)
{
  unsigned int v2;
  unsigned int v3;
  const void *v4;
  const void *v5;

  if (a1)
  {
    do
    {
      v2 = __ldxr(a1);
      v3 = v2 - 1;
    }
    while (__stxr(v3, a1));
    if (!v3)
    {
      v4 = (const void *)*((_QWORD *)a1 + 2);
      if (v4)
        CFRelease(v4);
      v5 = (const void *)*((_QWORD *)a1 + 5);
      if (v5)
        CFRelease(v5);
      free(a1);
    }
  }
}

void renderingStateReset(uint64_t a1)
{
  int v2;
  const void *v3;
  const void *v4;

  *(_QWORD *)(a1 + 8) = 0x3FF0000000000000;
  v2 = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 4) = v2 & 0xFC000000 | 0x1320200;
  v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v4 = *(const void **)(a1 + 40);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_DWORD *)(a1 + 48) = 0;
}

uint64_t CGPatternEqualToPattern(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;

  if (a1 == a2)
    return 1;
  result = 0;
  if (a1 && a2)
  {
    v5 = *(_DWORD *)(a1 + 20);
    if (v5 != *(_DWORD *)(a2 + 20) || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
    result = 0;
    if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 32), *(float64x2_t *)(a2 + 32)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 48), *(float64x2_t *)(a2 + 48)))), 0xFuLL))) & 1) != 0&& *(double *)(a1 + 64) == *(double *)(a2 + 64))
    {
      if (*(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72))
      {
        if (v5 == 1)
          goto LABEL_12;
        if (v5)
        {
LABEL_16:
          result = CGRectEqualToRect(*(CGRect *)(a1 + 104), *(CGRect *)(a2 + 104));
          if ((_DWORD)result)
          {
            result = 0;
            if (*(double *)(a1 + 136) == *(double *)(a2 + 136) && *(double *)(a1 + 144) == *(double *)(a2 + 144))
            {
              if (*(_DWORD *)(a1 + 152) == *(_DWORD *)(a2 + 152)
                && *(unsigned __int8 *)(a1 + 184) == *(unsigned __int8 *)(a2 + 184)
                && (!*(_BYTE *)(a1 + 184) || *(_QWORD *)(a1 + 80) == *(_QWORD *)(a2 + 80))
                && *(unsigned __int8 *)(a1 + 185) == *(unsigned __int8 *)(a2 + 185))
              {
                return *(unsigned __int8 *)(a1 + 186) == *(unsigned __int8 *)(a2 + 186);
              }
              return 0;
            }
          }
          return result;
        }
        if (*(_QWORD *)(a1 + 168) == *(_QWORD *)(a2 + 168))
        {
LABEL_12:
          if (*(_QWORD *)(a1 + 80) != *(_QWORD *)(a2 + 80))
            return 0;
          goto LABEL_16;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t get_chunks_direct(_QWORD *a1, int64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  size_t BytesAtPositionInternal;
  char v24;
  uint64_t v25;

  check_same_thread();
  v16 = (_QWORD *)*a1;
  if (!*(_QWORD *)(*a1 + 96) && !v16[14] && !v16[10])
    _CGHandleAssert("get_chunks_direct", 173, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGAccessSession.c", "CGDataProviderCanGetBytesAtPosition(provider)", "data provider provides no callback to read data at a position", v13, v14, v15, v24);
  v17 = v16[4];
  if (v17 == -1)
    _CGHandleAssert("get_chunks_direct", 177, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGAccessSession.c", "provider_size != (-1UL)", "invalid provider size", v13, v14, v15, v24);
  v18 = 0;
  if ((a2 & 0x8000000000000000) == 0)
  {
    v25 = a1[2];
    if ((v25 & 0x8000000000000000) == 0)
    {
      if (a4)
      {
        v18 = 0;
        v19 = a1[2];
        v20 = a2;
        do
        {
          if (v19 + v20 > (uint64_t)v17)
          {
            v20 = v17 - v19;
            if ((uint64_t)(v17 - v19) < 1)
              break;
          }
          if (v20 >= a2)
            v20 = a2;
          v21 = a1[1];
          if (v21)
          {
            memmove(a5, (const void *)(v21 + v19), v20);
            BytesAtPositionInternal = v20;
          }
          else
          {
            BytesAtPositionInternal = CGDataProviderDirectGetBytesAtPositionInternal(v16, a5, v19, v20, v12, v13, v14, v15);
            if (!BytesAtPositionInternal)
              return v18;
          }
          v18 += BytesAtPositionInternal;
          v19 = v20 + a3 + a1[2];
          a1[2] = v19;
          if (v19 < 0 || v19 > v17)
          {
            a1[2] = v17;
            if (v18 + v25 > v17)
              return v17 - v25;
            return v18;
          }
          a5 += a2 + a6;
          --a4;
        }
        while (a4);
      }
    }
  }
  return v18;
}

size_t CGDataProviderDirectGetBytesAtPositionInternal(_QWORD *a1, char *a2, uint64_t a3, size_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v9;
  int64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  const UInt8 *(__cdecl *v18)(CFDataRef);
  const char *v19;
  int64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t (*v23)(_QWORD, char *, size_t, uint64_t);
  unint64_t v24;
  unint64_t v25;
  char v27;

  if (a3 < 0)
    _CGHandleAssert("CGDataProviderDirectGetBytesAtPositionInternal", 684, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProvider.c", "pos >= 0", "position (%lld) may not be negative", a6, a7, a8, a3);
  v9 = a4;
  if (a4)
  {
    if (!a1 || (v11 = a1[4], v11 == -1))
      _CGHandleAssert("CGDataProviderDirectGetBytesAtPositionInternal", 688, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProvider.c", "size != (-1)", "size overflow", a6, a7, a8, v27);
    v13 = CGDataProviderRetainBytePtr((uint64_t)a1);
    if (v13)
    {
      if ((uint64_t)(v9 + a3) > v11)
        v9 = (v11 - a3) & ~((v11 - a3) >> 63);
      if (v9)
      {
        v17 = "CGDataProviderDirectGetBytesAtPositionInternal calling provider created with getBytePtr callback";
        v18 = (const UInt8 *(__cdecl *)(CFDataRef))a1[10];
        if (v18 == getCFDataBytePointer)
          v17 = "CGDataProviderDirectGetBytesAtPositionInternal calling provider created with CFData";
        if ((char *)v18 == (char *)data_get_byte_pointer)
          v19 = "CGDataProviderDirectGetBytesAtPositionInternal calling provider created with data";
        else
          v19 = v17;
        qword_1ECDA5E30 = (uint64_t)v19;
        memcpy(a2, (const void *)(v13 + a3), v9);
        qword_1ECDA5E30 = 0;
      }
    }
    else
    {
      if (!a1[12] && !a1[14])
        goto LABEL_31;
      v20 = a1[4];
      if (v20 == -1)
        _CGHandleAssert("provider_get_bytes_at_position", 642, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProvider.c", "provider->size != (off_t)(-1)", "provider size too large", v14, v15, v16, v27);
      v21 = (uint64_t)(v9 + a3) <= v20 ? v9 : v20 - a3;
      if (v21 >= 1)
      {
        v22 = 0;
        do
        {
          v9 = v22;
          if (!v21)
            break;
          v23 = (uint64_t (*)(_QWORD, char *, size_t, uint64_t))a1[12];
          if (!v23)
          {
            v23 = (uint64_t (*)(_QWORD, char *, size_t, uint64_t))a1[14];
            if (!v23)
              break;
          }
          v24 = v23(a1[3], &a2[v9], v9 + a3, v21);
          v25 = v24 >= v21 ? v21 : v24;
          v21 -= v25;
          v22 = v25 + v9;
        }
        while (v24);
      }
      else
      {
LABEL_31:
        v9 = 0;
      }
    }
    CGDataProviderReleaseBytePtr((uint64_t)a1);
  }
  return v9;
}

uint64_t CGDataProviderRetainBytePtr(uint64_t result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  const char *DebugString;
  unsigned int v6;
  char *v7;

  if (result)
  {
    v1 = result;
    if (*(_QWORD *)(result + 80) && (CGDataProviderIsZombie((_DWORD *)result) & 1) == 0)
    {
      pthread_mutex_lock((pthread_mutex_t *)(v1 + 184));
      v2 = (unsigned int *)(v1 + 248);
      do
        v3 = __ldxr(v2);
      while (__stxr(v3 + 1, v2));
      if (!v3)
      {
        v4 = (*(uint64_t (**)(_QWORD))(v1 + 80))(*(_QWORD *)(v1 + 24));
        *(_QWORD *)(v1 + 264) = v4;
        if (v4)
        {
          v7 = 0;
          DebugString = CGDataProviderGetDebugString(v1);
          if (DebugString)
          {
            asprintf(&v7, "CGDataProvider: %p\n%s\n", (const void *)v1, DebugString);
            qword_1ECDA5E30 = (uint64_t)v7;
            ERROR_CGDataProvider_BufferIsNotReadable();
            ERROR_CGDataProvider_BufferIsNotBigEnough();
            qword_1ECDA5E30 = 0;
            free(v7);
          }
          else
          {
            ERROR_CGDataProvider_BufferIsNotReadable();
            ERROR_CGDataProvider_BufferIsNotBigEnough();
          }
        }
        else
        {
          do
            v6 = __ldxr(v2);
          while (__stxr(v6 - 1, v2));
        }
      }
      if (*(_QWORD *)(v1 + 264))
        CFRetain((CFTypeRef)v1);
      pthread_mutex_unlock((pthread_mutex_t *)(v1 + 184));
      return *(_QWORD *)(v1 + 264);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void CGDataProviderReleaseBytePtr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  void (*v5)(_QWORD, _QWORD);

  if (a1 && *(_QWORD *)(a1 + 80) && *(_QWORD *)(a1 + 264))
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 184));
    v2 = (unsigned int *)(a1 + 248);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stxr(v4, v2));
    if (!v4)
    {
      v5 = *(void (**)(_QWORD, _QWORD))(a1 + 88);
      if (v5)
        v5(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 264));
      *(_QWORD *)(a1 + 264) = 0;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 184));
    CFRelease((CFTypeRef)a1);
  }
}

unint64_t provider_for_destination_get_bytes_at_position_inner(uint64_t a1, char *a2, unint64_t a3, unint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t BitsPerPixel;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  size_t BytesAtPositionInternal;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  size_t v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  _BYTE *v62;
  unint64_t v63;
  _WORD *v64;
  unint64_t v65;
  float v66;
  float *v67;
  unint64_t v68;
  __int16 v69;
  _WORD *v70;
  unint64_t v71;
  _BYTE *v72;
  unint64_t v73;
  _BOOL4 v75;
  BOOL v76;
  uint8_t v77;
  _WORD *v78;
  unint64_t v79;
  uint8_t v80;
  float v81;
  float *v82;
  unint64_t v83;
  float v84;
  uint8_t v85;
  __int16 v86;
  _WORD *v87;
  unint64_t v88;
  __int16 v89;
  _QWORD *v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  vImageConverter *v98;
  unint64_t result;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  void *v105;
  unint64_t v108;
  _BYTE dest[344];
  _BYTE src[344];
  _OWORD __src[22];
  _QWORD __dst[43];
  uint8_t permuteMap[4];
  __int128 backgroundColor;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  if ((a3 & 0x8000000000000000) != 0)
    _CGHandleAssert("provider_for_destination_get_bytes_at_position_inner", 573, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderForDestination.c", "pos >= 0", "position = %lld", a6, a7, a8, a3);
  v11 = *(char **)(a1 + 728);
  v108 = *(_QWORD *)(a1 + 736);
  v12 = (const void *)(a1 + 32);
  v104 = *(_QWORD *)(a1 + 752);
  v105 = *(void **)(a1 + 744);
  memcpy(__dst, (const void *)(a1 + 32), 0x130uLL);
  BitsPerPixel = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v13, v14, v15, v16, v17, v18, v19);
  memcpy(__dst, (const void *)(a1 + 360), 0x130uLL);
  v28 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v21, v22, v23, v24, v25, v26, v27);
  __dst[1] = 0;
  *(_OWORD *)&__dst[3] = 0u;
  __dst[0] = v11;
  __dst[2] = 1;
  v29 = *(_DWORD *)(a1 + 720);
  LODWORD(__dst[4]) = v29;
  memcpy(&__dst[5], v12, 0x130uLL);
  if (*(_QWORD *)(a1 + 72))
    __dst[10] = &__dst[11];
  __src[0] = 0u;
  __src[1] = 1uLL;
  *(_QWORD *)&__src[2] = v29;
  memcpy((char *)&__src[2] + 8, (const void *)(a1 + 360), 0x130uLL);
  if (*(_QWORD *)(a1 + 400))
    *(_QWORD *)&__src[5] = (char *)&__src[5] + 8;
  v32 = a4;
  if (*(_QWORD *)(a1 + 8) >= 8 * a4 / v28)
    v33 = 8 * a4 / v28;
  else
    v33 = *(_QWORD *)(a1 + 8);
  v37 = destination_position_to_source_position(v28, *(_QWORD *)(a1 + 664), *(_QWORD *)(a1 + 672), BitsPerPixel, *(_QWORD *)(a1 + 336), a3, v30, v31);
  if (v37 < 0)
    _CGHandleAssert("provider_for_destination_get_bytes_with_work_buffer", 456, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderForDestination.c", "src_pos >= 0", "source position (%lld) may not be negative", v34, v35, v36, v37);
  if (*(_QWORD *)(a1 + 696))
  {
    v38 = v108;
  }
  else
  {
    v38 = v108;
    if (!*(_QWORD *)(a1 + 688) && !*(_QWORD *)(a1 + 712))
    {
      v11 = a2;
      __dst[0] = a2;
    }
  }
  v39 = *(_QWORD **)a1;
  v47 = byte_count_to_byte_count(v28, *(_QWORD *)(a1 + 664), *(_QWORD *)(a1 + 672), *(_QWORD *)(a1 + 680), BitsPerPixel, *(_QWORD *)(a1 + 336), v32, v36);
  if (v47 > v38)
  {
    CGPostError((uint64_t)"%s: bytes_to_read %zd > interim_buffer_size %zd", v40, v41, v42, v43, v44, v45, v46, (char)"provider_for_destination_get_bytes_with_work_buffer");
    _CGHandleAssert("provider_for_destination_get_bytes_with_work_buffer", 474, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderForDestination.c", "bytes_to_read <= interim_buffer_size", "read size (%lu) exceeds interim space to store the data (%lu)", v100, v101, v102, v47);
  }
  if (v37 >= 1)
  {
    v48 = *(_QWORD *)(a1 + 336);
    if (v48)
    {
      if (v37 / v48 == *(_QWORD *)(a1 + 16) - 1)
        v47 = (v33 * BitsPerPixel + 7) >> 3;
    }
  }
  if (*(_BYTE *)(a1 + 724))
    BytesAtPositionInternal = CGDataProviderDirectGetBytesAtPositionInternal(v39, v11, v37, v47, v43, v44, v45, v46);
  else
    BytesAtPositionInternal = CGDataProviderSequentialGetBytesInternal((uint64_t)v39, (uint64_t)v11, v47);
  v53 = BytesAtPositionInternal;
  if (BytesAtPositionInternal > v47)
    _CGHandleAssert("provider_for_destination_get_bytes_with_work_buffer", 487, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderForDestination.c", "bytes_read <= bytes_to_read", "read size (%lu) exceeds space to store the data (%lu)", v50, v51, v52, BytesAtPositionInternal);
  v54 = 8 * BytesAtPositionInternal / BitsPerPixel;
  if (v33 < v54)
    v54 = v33;
  if (v47 == BytesAtPositionInternal)
    v55 = v33;
  else
    v55 = v54;
  if (!v55)
    goto LABEL_118;
  *((_QWORD *)&__src[0] + 1) = v55;
  __dst[1] = v55;
  if (*(_BYTE *)(a1 + 725))
  {
    v56 = *(_DWORD *)(a1 + 56);
    if (v56 == 9)
    {
      v57 = 3;
    }
    else
    {
      if (v56 != 8)
      {
        v58 = v56 - 1;
        if ((v56 - 1) > 8)
        {
          v59 = 0;
LABEL_37:
          v60 = *(_DWORD *)(a1 + 60);
          v61 = v59 + *(_QWORD *)(a1 + 48);
          switch(*(_DWORD *)(a1 + 32))
          {
            case 1:
              switch(v61)
              {
                case 5:
                  v72 = (_BYTE *)(__dst[0] + 4 * (v56 == 5));
                  v73 = v55;
                  do
                  {
                    *v72 = -1;
                    v72 += 5;
                    --v73;
                  }
                  while (v73);
                  break;
                case 4:
                  v75 = (v60 & 0xFFFFBFFF) == 0 && v56 == 5;
                  *(_QWORD *)src = __dst[0];
                  *(_QWORD *)&src[8] = 1;
                  v76 = v60 == 0x2000 && v56 == 6;
                  *(_QWORD *)&src[16] = v55;
                  *(_QWORD *)&src[24] = 4 * v55;
                  if (v76)
                    v75 = 1;
                  *(_QWORD *)dest = __dst[0];
                  *(_QWORD *)&dest[8] = 1;
                  *(_QWORD *)&dest[16] = v55;
                  *(_QWORD *)&dest[24] = 4 * v55;
                  if (v75)
                    v77 = 1;
                  else
                    v77 = 8;
                  vImageOverwriteChannelsWithScalar_ARGB8888(0xFFu, (const vImage_Buffer *)src, (const vImage_Buffer *)dest, v77, 0x10u);
                  break;
                case 2:
                  if (v56 == 5)
                    v62 = (_BYTE *)(__dst[0] + 1);
                  else
                    v62 = (_BYTE *)__dst[0];
                  v63 = v55;
                  do
                  {
                    *v62 = -1;
                    v62 += 2;
                    --v63;
                  }
                  while (v63);
                  break;
                default:
                  _CGHandleAssert("overwrite_alpha_8bit", 146, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderForDestination.c", "", "Unimplemented", v50, v51, v52, v103);
              }
              goto LABEL_113;
            case 2:
              if (v61 == 5)
              {
                v78 = (_WORD *)(__dst[0] + 8 * (v56 == 5));
                v79 = v55;
                do
                {
                  *v78 = -1;
                  v78 += 5;
                  --v79;
                }
                while (v79);
                goto LABEL_113;
              }
              if (v61 == 4)
              {
                *(_QWORD *)&backgroundColor = -1;
                *(_DWORD *)permuteMap = 50462976;
                *(_QWORD *)src = __dst[0];
                *(_QWORD *)&src[8] = 1;
                *(_QWORD *)&src[16] = v55;
                *(_QWORD *)&src[24] = 4 * v55;
                *(_QWORD *)dest = __dst[0];
                *(_QWORD *)&dest[8] = 1;
                if (v56 == 5)
                  v80 = 1;
                else
                  v80 = 8;
                *(_QWORD *)&dest[16] = v55;
                *(_QWORD *)&dest[24] = 4 * v55;
                goto LABEL_112;
              }
              if (v61 != 2)
                _CGHandleAssert("overwrite_alpha_16bitInteger", 215, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderForDestination.c", "", "Unimplemented", v50, v51, v52, v103);
              v64 = (_WORD *)(__dst[0] + 2 * (v56 == 5));
              v65 = v55;
              do
              {
                *v64 = -1;
                v64 += 2;
                --v65;
              }
              while (v65);
              break;
            case 4:
              switch(v61)
              {
                case 5:
                  v81 = 256.0;
                  if (v60 != 0x4000)
                    v81 = 1.0;
                  v82 = (float *)(__dst[0] + 16 * (v56 == 5));
                  v83 = v55;
                  do
                  {
                    *v82 = v81;
                    v82 += 5;
                    --v83;
                  }
                  while (v83);
                  break;
                case 4:
                  v84 = 256.0;
                  *(_QWORD *)src = __dst[0];
                  *(_QWORD *)&src[8] = 1;
                  if (v60 != 0x4000)
                    v84 = 1.0;
                  *(_QWORD *)&src[16] = v55;
                  *(_QWORD *)&src[24] = 4 * v55;
                  *(_QWORD *)dest = __dst[0];
                  *(_QWORD *)&dest[8] = 1;
                  *(_QWORD *)&dest[16] = v55;
                  *(_QWORD *)&dest[24] = 4 * v55;
                  if (v56 == 5)
                    v85 = 1;
                  else
                    v85 = 8;
                  vImageOverwriteChannelsWithScalar_ARGBFFFF(v84, (const vImage_Buffer *)src, (const vImage_Buffer *)dest, v85, 0x10u);
                  break;
                case 2:
                  v66 = 256.0;
                  if (v60 != 0x4000)
                    v66 = 1.0;
                  v67 = (float *)(__dst[0] + 4 * (v56 == 5));
                  v68 = v55;
                  do
                  {
                    *v67 = v66;
                    v67 += 2;
                    --v68;
                  }
                  while (v68);
                  break;
                default:
                  _CGHandleAssert("overwrite_alpha_32bitFloat", 385, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderForDestination.c", "", "Unimplemented", v50, v51, v52, v103);
              }
              goto LABEL_113;
            case 5:
              switch(v61)
              {
                case 5:
                  v86 = word_1850053B4[v60 == 12288];
                  v87 = (_WORD *)(__dst[0] + 8 * (v56 == 5));
                  v88 = v55;
                  do
                  {
                    *v87 = v86;
                    v87 += 5;
                    --v88;
                  }
                  while (v88);
                  break;
                case 4:
                  v89 = word_1850053B4[v60 == 12288];
                  *(_QWORD *)&backgroundColor = -1;
                  LOWORD(backgroundColor) = v89;
                  WORD3(backgroundColor) = v89;
                  *(_DWORD *)permuteMap = 50462976;
                  *(_QWORD *)src = __dst[0];
                  *(_QWORD *)&src[8] = 1;
                  *(_QWORD *)&src[16] = v55;
                  *(_QWORD *)&src[24] = 4 * v55;
                  *(_QWORD *)dest = __dst[0];
                  *(_QWORD *)&dest[8] = 1;
                  *(_QWORD *)&dest[16] = v55;
                  *(_QWORD *)&dest[24] = 4 * v55;
                  if (v56 == 5)
                    v80 = 1;
                  else
                    v80 = 8;
LABEL_112:
                  vImagePermuteChannelsWithMaskedInsert_ARGB16U((const vImage_Buffer *)src, (const vImage_Buffer *)dest, permuteMap, v80, (const uint16_t *)&backgroundColor, 0x10u);
                  break;
                case 2:
                  v69 = word_1850053B4[v60 == 12288];
                  v70 = (_WORD *)(__dst[0] + 2 * (v56 == 5));
                  v71 = v55;
                  do
                  {
                    *v70 = v69;
                    v70 += 2;
                    --v71;
                  }
                  while (v71);
                  break;
                default:
                  _CGHandleAssert("overwrite_alpha_16bitFloat", 302, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderForDestination.c", "", "Unimplemented", v50, v51, v52, v103);
              }
              break;
            default:
              _CGHandleAssert("overwrite_alpha", 409, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderForDestination.c", "", "Unimplemented", v50, v51, v52, v103);
          }
          goto LABEL_113;
        }
LABEL_36:
        v59 = qword_184F7EB80[v58];
        goto LABEL_37;
      }
      v57 = 1;
    }
    v58 = v56 - 1;
    v56 = v57;
    goto LABEL_36;
  }
LABEL_113:
  *(_QWORD *)&__src[0] = a2;
  v90 = *(_QWORD **)(a1 + 688);
  if (v90)
  {
    v91 = *(_OWORD *)(a1 + 792);
    v118 = *(_OWORD *)(a1 + 776);
    v92 = *(_QWORD *)(a1 + 704);
    v93 = *(_QWORD *)(a1 + 760);
    v94 = *(_DWORD *)(a1 + 768);
    v119 = v91;
    v120 = *(_OWORD *)(a1 + 808);
    v95 = *(_QWORD **)(a1 + 24);
    v96 = *(unsigned int *)(a1 + 720);
    v97 = *(_QWORD **)(a1 + 696);
    *(_QWORD *)&backgroundColor = v92;
    *((_QWORD *)&backgroundColor + 1) = v105;
    v115 = v104;
    v116 = v93;
    v117 = v94;
    memcpy(src, __dst, sizeof(src));
    memcpy(dest, __src, sizeof(dest));
    if ((CGColorTransformConvertUsingCMSConverter(v90, v95, v96, v97, &backgroundColor, (uint64_t)src, (uint64_t)dest) & 1) == 0)
      return 0;
  }
  else
  {
    v98 = *(vImageConverter **)(a1 + 712);
    if (v98)
    {
      memcpy(src, __dst, sizeof(src));
      memcpy(dest, __src, sizeof(dest));
      if (!vImageConverterConvert(v98, (uint64_t)src, (uint64_t)dest, v105))
        return 0;
    }
  }
LABEL_118:
  if (v47 == v53)
    result = v32;
  else
    result = (v55 * v28 + 7) >> 3;
  if (a5)
  {
    *(_QWORD *)(a1 + 352) += v53;
    *(_QWORD *)(a1 + 680) += result;
  }
  return result;
}

uint64_t CGBitmapPixelInfoGetBitsPerPixel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unsigned int v11;
  uint64_t v12;
  char vars0;

  HIDWORD(v9) = *(_DWORD *)(a1 + 32);
  LODWORD(v9) = HIDWORD(v9);
  v8 = v9 >> 16;
  if ((v8 - 1) < 2)
    return 16;
  if ((v8 - 3) < 2)
    return 32;
  if (v8)
    _CGHandleAssert("CGBitmapPixelInfoGetBitsPerPixel", 142, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGBitmapPixelInfo.c", "", "Unimplemented", a6, a7, a8, vars0);
  v11 = *(_DWORD *)(a1 + 24) - 1;
  if (v11 > 8)
    v12 = 0;
  else
    v12 = qword_184F7EB80[v11];
  return (v12 + *(_QWORD *)(a1 + 16)) * *(_QWORD *)(a1 + 8);
}

unint64_t byte_count_to_byte_count(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  if (!a2)
    _CGHandleAssert("byte_count_to_byte_count", 23, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderForDestinationUtils.c", "input_bytes_per_row != 0", "0 rowBytes", a6, a7, a8, v8);
  if (a7)
  {
    if (a6)
    {
      if (a7 >= a2)
        v9 = a7 / a2;
      else
        v9 = 0;
      v10 = a7 - v9 * a2;
      v11 = a3 - a4 % a2;
      if (a3 <= a4 % a2)
      {
        v12 = 0;
        v11 = 0;
      }
      else
      {
        v12 = (8 * v11 / a1 * a5 + 7) >> 3;
      }
      if (v10 < v11)
      {
        v11 = 0;
        v12 = 0;
      }
      return v10 + v9 * a6 + v12 - v11;
    }
    else if (a5 != a1)
    {
      return (8 * a5 * a7 / a1 + 7) >> 3;
    }
  }
  return a7;
}

BOOL vImageConverterConvert(vImageConverter *a1, uint64_t a2, uint64_t a3, void *a4)
{
  vImagePixelCount v4;
  vImagePixelCount v5;
  void *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  size_t v19;
  int8x16_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  vImage_Error v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  __int8 *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int8x16_t v50;
  vImage_Buffer v51;
  _BYTE v52[312];
  vImage_Buffer v53;
  _BYTE v54[304];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  if (!(v4 * v5))
    return 0;
  v9 = *(void **)a2;
  v10 = *(_QWORD *)(a2 + 24);
  memcpy(v52, (const void *)(a2 + 32), sizeof(v52));
  v53.data = v9;
  v53.height = v5;
  v53.width = v4;
  if (!v10)
  {
    memcpy(v54, &v52[8], sizeof(v54));
    v10 = ((unint64_t)CGBitmapPixelInfoGetBitsPerPixel((uint64_t)v54, v11, v12, v13, v14, v15, v16, v17) >> 3)
        * v4;
  }
  v53.rowBytes = v10;
  v18 = *(void **)a3;
  v19 = *(_QWORD *)(a3 + 24);
  memcpy(v52, (const void *)(a3 + 32), sizeof(v52));
  v51.data = v18;
  v20 = *(int8x16_t *)(a3 + 8);
  *(int8x16_t *)&v51.height = vextq_s8(v20, v20, 8uLL);
  if (!v19)
  {
    v50 = v20;
    memcpy(v54, &v52[8], sizeof(v54));
    v19 = ((unint64_t)CGBitmapPixelInfoGetBitsPerPixel((uint64_t)v54, v21, v22, v23, v24, v25, v26, v27) >> 3)
        * v50.i64[0];
  }
  v51.rowBytes = v19;
  if (a4)
    return vImageConverter_convert_internal(a1, &v53, &v51, a4);
  v29 = vImageConvert_AnyToAny(a1, &v53, &v51, 0, 0x80u);
  if (v29 < 0)
  {
    CGPostError((uint64_t)"vImageConvert_AnyToAny failed to return valid buffer size", v30, v31, v32, v33, v34, v35, v36, v50.i8[0]);
    return 0;
  }
  if (!v29)
  {
    vImageConverter_convert_internal(a1, &v53, &v51, 0);
    return 0;
  }
  v37 = MEMORY[0x1E0C80A78]();
  v39 = &v50.i8[-v38];
  if (v37 <= 0x400)
    return vImageConverter_convert_internal(a1, &v53, &v51, (char *)&v50 - v38);
  v40 = (char *)malloc_type_malloc(v37, 0xE3B5A78DuLL);
  if (!v40)
  {
    CGPostError((uint64_t)"vImageConverter could not allocate buffer %s", v41, v42, v43, v44, v45, v46, v47, (char)"vImageConverterConvert");
    return 0;
  }
  v48 = v40;
  v28 = vImageConverter_convert_internal(a1, &v53, &v51, v40);
  if (v48 != v39)
    free(v48);
  return v28;
}

BOOL vImageConverter_convert_internal(vImageConverter *a1, const vImage_Buffer *a2, const vImage_Buffer *a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  vImage_Error v11;

  v11 = vImageConvert_AnyToAny(a1, a2, a3, a4, 0x10u);
  if (v11)
    CGPostError((uint64_t)"vImageConvert_AnyToAny failed in %s", v4, v5, v6, v7, v8, v9, v10, (char)"vImageConverter_convert_internal");
  return v11 == 0;
}

unint64_t provider_for_destination_get_bytes_at_position(uint64_t a1, char *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if (!*(_BYTE *)(a1 + 724))
    _CGHandleAssert("provider_for_destination_get_bytes_at_position", 611, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderForDestination.c", "info->src_provider_uses_random_access == true", "", a6, a7, a8, vars0);
  return provider_for_destination_get_bytes_at_position_inner(a1, a2, a3, a4, 0, a6, a7, a8);
}

unint64_t destination_position_to_source_position(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a6 & 0x8000000000000000) != 0)
    _CGHandleAssert("destination_position_to_source_position", 107, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderForDestinationUtils.c", "destination_position >= 0", "position %lld", a6, a6, a8, a6);
  return byte_count_to_byte_count(a1, a2, a3, 0, a4, a5, a6, a8);
}

uint64_t imageProvider_getBytesAtPosition(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  size_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  const char *DebugString;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  size_t v41;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;

  if (!a1)
    _CGHandleAssert("imageProvider_getBytesAtPosition", 120, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderImageProvider.c", "imageProvider != NULL", "provider missing", a6, a7, a8, v43);
  v8 = a2;
  if (!a2)
  {
    CGPostError((uint64_t)"%s: cannot write to a NULL buffer", 0, a3, a4, a5, a6, a7, a8, (char)"imageProvider_getBytesAtPosition");
    return 0;
  }
  v9 = a4;
  ERROR_CGBlt_copyBytes_BufferIsNotReadable();
  ERROR_CGBlt_copyBytes_BufferIsNotBigEnough();
  if (a3 < 0)
    return 0;
  v11 = a1;
  if (*(_QWORD *)(a1 + 64) <= (unint64_t)a3)
    return 0;
  v12 = *(_QWORD *)(a1 + 8);
  if (!v12)
  {
    bzero(v8, v9);
    return 0;
  }
  v13 = *(_QWORD *)(v12 + 120);
  if (!v13)
    return 0;
  result = 0;
  v52 = &v8[v9];
  v16 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 56);
  v17 = a3 / v15;
  v18 = (double)v16;
  v50 = v15;
  v51 = (unint64_t)&v8[v9 - 1];
  v19 = a3 % v15;
  v49 = &v8[v9];
  v44 = v16;
  v45 = *(_QWORD *)(v12 + 120);
  do
  {
    if (!v9)
      break;
    v20 = 0;
    v21 = 0;
    do
    {
      v22 = *(_QWORD *)(v11 + 8);
      if (v22)
      {
        if (*(_QWORD *)(v22 + 120) > v21)
        {
          v23 = *(double **)(v22 + 8 * v21 + 128);
          if (v23)
          {
            v25 = v23[2];
            v26 = v23[3];
            v27 = v23[4];
            v28 = v17 - (uint64_t)v25;
            v29 = v17 >= (uint64_t)v25 && v17 < (uint64_t)v25 + (uint64_t)v27;
            v24 = v23[1];
            v30 = v16 * (uint64_t)v24;
            v31 = !v29 || v19 < v30;
            v32 = v16 * (uint64_t)v26;
            if (!v31 && v19 < v30 + v32)
            {
              v56 = v16 * (uint64_t)v24;
              v46 = v17;
              v34 = result;
              v54 = v30 + v32;
              v55 = v16 * (uint64_t)v26;
              v53 = (uint64_t)v25 + (uint64_t)v27;
              v35 = *(char **)v23;
              v36 = *((_QWORD *)v23 + 5);
              v47 = (unint64_t)(v26 * v18 + (v27 + -1.0) * (double)v36);
              v57 = 0;
              DebugString = CGDataProviderGetDebugString(*(_QWORD *)(v11 + 72));
              if (DebugString)
              {
                asprintf(&v57, "CGDataProviderForImageProvider: image provider: %p block set count: %zu block: %p block index %zu block data: %p block bpr: %zu block size: %zu\n%s\n", *(const void **)a1, v45, v23, v21, v35, v36, v47, DebugString);
                qword_1ECDA5E30 = (uint64_t)v57;
                ERROR_CGDataProvider_BufferIsNotReadable();
                ERROR_CGDataProvider_BufferIsNotBigEnough();
                qword_1ECDA5E30 = 0;
                free(v57);
              }
              else
              {
                ERROR_CGDataProvider_BufferIsNotReadable();
                ERROR_CGDataProvider_BufferIsNotBigEnough();
              }
              v38 = v56;
              v39 = &v35[v36 * v28 - v56];
              v17 = v46;
              do
              {
                v40 = v55 + v38 - v19;
                if (v40 >= v9)
                  v40 = v9;
                if ((unint64_t)v8 > v51)
                  v8 = (char *)v51;
                if (&v8[v40] <= v52)
                  v41 = v40;
                else
                  v41 = v49 - v8;
                memcpy(v8, &v39[v19], v41);
                v8 += v41;
                v9 -= v41;
                v34 += v41;
                v20 += v41;
                v19 += v41;
                if (v19 != v50)
                  break;
                v19 = 0;
                ++v17;
                if (v50 > v54)
                  break;
                v38 = v56;
                if (v56)
                  break;
                v39 += v36;
              }
              while (v9 && v17 < v53);
              v11 = a1;
              v16 = v44;
              v13 = v45;
              result = v34;
            }
          }
        }
      }
      ++v21;
    }
    while (v21 < v13 && v9);
  }
  while (v9 && v20);
  return result;
}

const char *CGDataProviderGetDebugString(uint64_t a1)
{
  const __CFString *v2;

  if (data_provider_debug_info_enabled_predicate == -1)
  {
    if (!a1)
      return 0;
  }
  else
  {
    dispatch_once(&data_provider_debug_info_enabled_predicate, &__block_literal_global_38);
    if (!a1)
      return 0;
  }
  if (data_provider_debug_info_enabled_enabled)
  {
    v2 = *(const __CFString **)(a1 + 280);
    if (v2)
      return CFStringGetCStringPtr(v2, 0x8000100u);
  }
  return 0;
}

uint64_t CGDataProviderIsZombie(_DWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeID v8;
  int v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;

  if (!a1)
    return 1;
  v8 = CFGetTypeID(a1);
  if (kCGDataProviderPropertyTrustToken_block_invoke_once != -1)
    dispatch_once(&kCGDataProviderPropertyTrustToken_block_invoke_once, &__block_literal_global_26_6088);
  if (v8 != CGDataProviderGetTypeID_id)
    return 1;
  v9 = a1[4];
  if (v9 != 48879)
  {
    if (v9 == 57005)
      v10 = "Data Provider %p is over released";
    else
      v10 = "Object %p is not a CGDataProvider";
    CGLog(3, (uint64_t)v10, v2, v3, v4, v5, v6, v7, (char)a1);
    if (CGOSAppleInternalBuild_predicate != -1)
      dispatch_once(&CGOSAppleInternalBuild_predicate, &__block_literal_global_16536);
    if (CGOSAppleInternalBuild_is_internal)
      _CGHandleAssert("CGDataProviderIsZombie", 996, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProvider.c", "0", "", v11, v12, v13, v15);
    return 1;
  }
  return 0;
}

uint64_t CGColorTransformConvertUsingCMSConverter(_QWORD *a1, _QWORD *a2, uint64_t a3, _QWORD *CGCMSConverter, __int128 *a5, uint64_t a6, uint64_t a7)
{
  CFTypeID v14;
  CFTypeID v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD *, uint64_t, uint64_t, _OWORD *);
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _OWORD v26[5];
  uint64_t v27;

  v14 = CFGetTypeID(a1);
  if (kCGColorTransformDefaultCMYK_block_invoke_once != -1)
    dispatch_once(&kCGColorTransformDefaultCMYK_block_invoke_once, &__block_literal_global_25_15643);
  if (v14 != CGColorTransformGetTypeID_type_id)
    return 0;
  if (!CGCMSConverter)
  {
    CGCMSConverter = CGColorTransformCreateCGCMSConverter(a1, a2, a3);
    v22 = a5[2];
    v23 = a5[3];
    v24 = a5[4];
    v25 = *((_QWORD *)a5 + 10);
    v20 = *a5;
    v21 = a5[1];
    if (CGCMSConverter)
      goto LABEL_7;
    return 0;
  }
  CFRetain(CGCMSConverter);
  v22 = a5[2];
  v23 = a5[3];
  v24 = a5[4];
  v25 = *((_QWORD *)a5 + 10);
  v20 = *a5;
  v21 = a5[1];
LABEL_7:
  v15 = CFGetTypeID(CGCMSConverter);
  v16 = kCGCMSConverterID;
  if (!kCGCMSConverterID)
  {
    pthread_once(&CGCMSConverterGetTypeID_once, converter_initialize);
    v16 = kCGCMSConverterID;
  }
  if (v15 == v16)
  {
    v17 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t, _OWORD *))CGCMSConverter[7];
    v26[2] = v22;
    v26[3] = v23;
    v26[4] = v24;
    v27 = v25;
    v26[0] = v20;
    v26[1] = v21;
    v18 = v17(CGCMSConverter, a6, a7, v26);
  }
  else
  {
    v18 = 0;
  }
  CFRelease(CGCMSConverter);
  return v18;
}

uint64_t convert_icc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  vImageConverter *v11;
  vImageConverter *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _BOOL8 v17;
  __int128 v18;
  __int128 v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  size_t v23;
  BOOL v24;
  int v25;
  _BOOL4 v27;
  void *v28;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  size_t v44;
  int8x16_t v45;
  int8x16_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int8x16_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  size_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  int8x16_t v68;
  void *v69;
  vImageConverter *converter;
  void *tempBuffer;
  void *tempBuffera[2];
  vImage_Buffer dests;
  vImage_Buffer __dst[10];
  vImage_Buffer srcs;
  _BYTE v76[320];

  if (!*(_BYTE *)(a1 + 224))
  {
    v18 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)&__dst[1].data = *(_OWORD *)(a4 + 32);
    *(_OWORD *)&__dst[1].width = v18;
    *(_OWORD *)&__dst[2].data = *(_OWORD *)(a4 + 64);
    __dst[2].width = *(_QWORD *)(a4 + 80);
    v19 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&__dst[0].data = *(_OWORD *)a4;
    *(_OWORD *)&__dst[0].width = v19;
    return convert_using_vImageConverter(a1, (const std::__fs::filesystem::path *)a2, (const std::__fs::filesystem::path *)a3, (vImageConverter ***)__dst, a5, a6, a7, a8);
  }
  if (!a2
    || !a3
    || *(_QWORD *)(a2 + 8) != *(_QWORD *)(a3 + 8)
    || *(_QWORD *)(a2 + 16) != *(_QWORD *)(a3 + 16)
    || !*(_QWORD *)(a1 + 88))
  {
    goto LABEL_31;
  }
  v12 = *(vImageConverter **)(a4 + 40);
  v11 = *(vImageConverter **)(a4 + 48);
  v14 = *(void **)(a4 + 56);
  v13 = *(void **)(a4 + 64);
  v16 = *(void **)(a4 + 72);
  v15 = *(void **)(a4 + 80);
  if ((converter_does_tone_mapping(a1) & 1) == 0
    && (*(_DWORD *)(a1 + 16) == 3 || CFEqual(*(CFTypeRef *)(a1 + 32), *(CFTypeRef *)(a1 + 24)))
    && conversion_formats_are_equal(a2, a3))
  {
    copy((const std::__fs::filesystem::path *)a2, (const std::__fs::filesystem::path *)a3, (std::__fs::filesystem::copy_options)a3, (std::error_code *)a4);
    return 1;
  }
  v20 = *(_DWORD *)(a2 + 40);
  if (v20 > 5 || ((1 << v20) & 0x36) == 0)
  {
LABEL_31:
    CGPostError((uint64_t)"%s : Unable to complete color conversion", a2, a3, a4, a5, a6, a7, a8, (char)"convert_using_colorsync_transform");
    return 0;
  }
  converter = v11;
  tempBuffer = v14;
  v69 = v13;
  v21 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a3 + 56) > v21)
    v21 = *(_QWORD *)(a3 + 56);
  v22 = (*(_QWORD *)(a2 + 8) + *(_QWORD *)(a2 + 8) * v21) * *(_QWORD *)(a2 + 16);
  v23 = 4 * v22;
  v24 = v20 == 4 && *(_DWORD *)(a2 + 68) == 0x2000;
  v25 = v24;
  v27 = *(_DWORD *)(a3 + 40) == 4 && *(_DWORD *)(a3 + 68) == 0x2000;
  if (v25 == 1)
  {
    v28 = 0;
    v16 = *(void **)a2;
  }
  else if (v16)
  {
    v28 = 0;
  }
  else
  {
    v28 = malloc_type_calloc(1uLL, 4 * v22, 0xED0FFC7DuLL);
    v16 = v28;
  }
  if (v27)
  {
    v30 = 0;
    v15 = *(void **)a3;
  }
  else if (v15)
  {
    v30 = 0;
  }
  else
  {
    v30 = malloc_type_calloc(1uLL, v23, 0x865F0C1EuLL);
    v15 = v30;
  }
  if (!v16)
    _CGHandleAssert("convert_using_colorsync_transform", 3607, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "colorsync_transform_info.buffer_in != NULL", "%s has no source buffer", a6, a7, a8, (char)"convert_using_colorsync_transform");
  if (!v15)
    _CGHandleAssert("convert_using_colorsync_transform", 3608, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "colorsync_transform_info.buffer_out != NULL", "%s has no destination buffer", a6, a7, a8, (char)"convert_using_colorsync_transform");
  if ((v25 & 1) != 0)
    goto LABEL_44;
  if (v12)
  {
    v39 = *(_DWORD *)(a2 + 64);
    v40 = v39 & 0xFFFFFFFE;
    v24 = v39 == 0;
    v41 = 128;
    v42 = 96;
    if (!v24)
      v42 = 128;
    if (v40 != 8)
      v41 = v42;
    v66 = v41;
    v67 = v28;
    v43 = *(void **)a2;
    v68 = *(int8x16_t *)(a2 + 8);
    v44 = *(_QWORD *)(a2 + 24);
    memcpy(__dst, (const void *)(a2 + 32), 0x138uLL);
    v45 = v68;
    srcs.data = v43;
    v46 = vextq_s8(v45, v45, 8uLL);
    *(int8x16_t *)&srcs.height = v46;
    if (!v44)
    {
      memcpy(v76, &__dst[0].height, 0x130uLL);
      v44 = ((unint64_t)CGBitmapPixelInfoGetBitsPerPixel((uint64_t)v76, v47, v48, v49, v50, v51, v52, v53) >> 3)
          * v68.i64[0];
      v45 = *(int8x16_t *)(a2 + 8);
      v46 = vextq_s8(v45, v45, 8uLL);
    }
    srcs.rowBytes = v44;
    __dst[0].data = v16;
    *(int8x16_t *)&__dst[0].height = v46;
    v28 = v67;
    __dst[0].rowBytes = (unint64_t)(v45.i64[0] * v66) >> 3;
    if (tempBuffer)
    {
      if (!vImageConvert_AnyToAny(v12, &srcs, __dst, tempBuffer, 0x10u))
      {
LABEL_44:
        v31 = v28;
        v32 = colorsync_alpha_info_from_conversion_format(a2, a2, a3, a4, a5, a6, a7, a8);
        if (convert_using_colorsync_transform_cglibrarypredicate != -1)
          dispatch_once(&convert_using_colorsync_transform_cglibrarypredicate, &__block_literal_global_60_1992);
        if (convert_using_colorsync_transform_f(*(_QWORD *)(a1 + 88), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), v15, 7, v32, 0, v16))
        {
          if (v27)
          {
            v17 = 1;
LABEL_61:
            v28 = v31;
            goto LABEL_62;
          }
          if (converter)
          {
            v54 = *(int8x16_t *)(a3 + 8);
            *(int8x16_t *)tempBuffera = vextq_s8(v54, v54, 8uLL);
            *(_OWORD *)&srcs.height = *(_OWORD *)tempBuffera;
            v55 = 16;
            if (!(_DWORD)v32)
              v55 = 12;
            v56 = v54.i64[0];
            srcs.data = v15;
            srcs.rowBytes = v54.i64[0] * v55;
            v57 = *(void **)a3;
            v58 = *(_QWORD *)(a3 + 24);
            memcpy(__dst, (const void *)(a3 + 32), 0x138uLL);
            dests.data = v57;
            *(_OWORD *)&dests.height = *(_OWORD *)tempBuffera;
            if (!v58)
            {
              memcpy(v76, &__dst[0].height, 0x130uLL);
              v58 = ((unint64_t)CGBitmapPixelInfoGetBitsPerPixel((uint64_t)v76, v59, v60, v61, v62, v63, v64, v65) >> 3)
                  * v56;
            }
            dests.rowBytes = v58;
            if (v69)
            {
              v17 = vImageConvert_AnyToAny(converter, &srcs, &dests, v69, 0x10u) == 0;
              goto LABEL_61;
            }
          }
        }
        else
        {
          CGLog(3, (uint64_t)"ColorSyncTransformConvert failed", v33, v34, v35, v36, v37, v38, 7);
        }
        v17 = 0;
        goto LABEL_61;
      }
    }
  }
  v17 = 0;
LABEL_62:
  if (v28)
    free(v28);
  if (v30)
    free(v30);
  return v17;
}

uint64_t convert_using_vImageConverter(uint64_t a1, const std::__fs::filesystem::path *a2, const std::__fs::filesystem::path *a3, vImageConverter ***a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::__fs::filesystem::copy_options v12;
  std::error_code *v13;
  uint64_t result;
  vImageConverter **v15;
  char *v16;
  vImageConverter **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  _BYTE v24[344];
  _BYTE __dst[344];

  if (!a2
    || !a3
    || a2->__pn_.__r_.__value_.__l.__size_ != a3->__pn_.__r_.__value_.__l.__size_
    || a2->__pn_.__r_.__value_.__r.__words[2] != a3->__pn_.__r_.__value_.__r.__words[2])
  {
    CGPostError((uint64_t)"%s : Unable to complete color conversion", (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (char)"convert_using_vImageConverter");
    return 0;
  }
  if ((converter_does_tone_mapping(a1) & 1) == 0
    && (*(_DWORD *)(a1 + 16) == 3 || CFEqual(*(CFTypeRef *)(a1 + 32), *(CFTypeRef *)(a1 + 24)))
    && conversion_formats_are_equal((uint64_t)a2, (uint64_t)a3))
  {
    copy(a2, a3, v12, v13);
    return 1;
  }
  v15 = *a4;
  if (*a4)
  {
    v16 = 0;
LABEL_16:
    v17 = a4[1];
    memcpy(__dst, a2, sizeof(__dst));
    memcpy(v24, a3, sizeof(v24));
    v23 = vImageConverterConvert(*v15, (uint64_t)__dst, (uint64_t)v24, v17);
    if (v16)
      CGvImageConverterCacheRelease(v16);
    if (v23)
      return 1;
    post_conversion_error((uint64_t)a2, (uint64_t)a3, (uint64_t)"vImageConvert_AnyToAny", v18, v19, v20, v21, v22);
    return 0;
  }
  result = (uint64_t)CGCMSConverterCreateCachedCGvImageConverter((_QWORD *)a1, a2, a3);
  v16 = (char *)result;
  v15 = (vImageConverter **)result;
  if (result)
    goto LABEL_16;
  return result;
}

BOOL cs_equal(uint64_t a1, uint64_t a2)
{
  return CGColorSpaceEqualToColorSpace(a1, a2);
}

BOOL CGColorSpaceEqualToColorSpace(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 == a2)
    return 1;
  result = 0;
  if (!a1 || !a2)
    return result;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a2 + 24);
  if (v4 == v5)
    return 1;
  result = 0;
  if (v4 && v5)
  {
    if (*(_DWORD *)(v4 + 20) == *(_DWORD *)(v5 + 20))
    {
      v7 = *(_QWORD *)(v4 + 56);
      v6 = *(_QWORD *)(v4 + 64);
      v9 = *(_QWORD *)(v5 + 56);
      v8 = *(_QWORD *)(v5 + 64);
      return v7 == v9 && v6 == v8;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void check_same_thread()
{
  _opaque_pthread_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (get_session_key_pred != -1)
    dispatch_once(&get_session_key_pred, &__block_literal_global_18593);
  v0 = (_opaque_pthread_t *)pthread_getspecific(get_session_key_session_key);
  if (v0 != pthread_self())
    CGPostError((uint64_t)"CGAccessSession cannot be shared between threads.Session created on thread %p used by %p", v1, v2, v3, v4, v5, v6, v7, (char)v0);
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
  CGRect v7;

  v7 = rect;
  if (rect.origin.x != INFINITY && rect.origin.y != INFINITY)
    CGContextFillRects(c, &v7, 1uLL);
}

void CGContextFillRects(CGContextRef c, const CGRect *rects, size_t count)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v11;
  uint64_t v12;
  unsigned int (*v13)(void);
  CGContextRef v14;

  if (!c)
  {
    v14 = 0;
LABEL_13:
    handle_invalid_context((char)"CGContextFillRects", (uint64_t)v14, count, v3, v4, v5, v6, v7);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v14 = c;
    goto LABEL_13;
  }
  v11 = (const void *)*((_QWORD *)c + 21);
  if (v11)
  {
    CFRelease(v11);
    *((_QWORD *)c + 21) = 0;
  }
  if (rects)
  {
    if (count)
    {
      v12 = *((_QWORD *)c + 5);
      if (v12)
      {
        v13 = *(unsigned int (**)(void))(v12 + 64);
        if (!v13 || v13() == 1006)
        {
          CGContextAddRects(c, rects, count);
          CGContextDrawPath(c, kCGPathFill);
        }
      }
    }
  }
}

uint64_t ripc_DrawRects(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double *a5, uint64_t a6)
{
  uint64_t v10;
  char v11;
  unsigned int v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char v19;
  _DWORD *v20;
  _DWORD *v21;
  _OWORD v22[6];
  _QWORD v23[2];
  __int128 v24;
  uint64_t v25;
  char *v26;
  _OWORD v27[3];

  if (a1)
    v10 = *(_QWORD *)(a1 + 288);
  else
    v10 = 0;
  v11 = 0;
  v12 = 2;
  switch(a4)
  {
    case 0:
      goto LABEL_10;
    case 1:
      v11 = 0;
      v12 = 4;
      goto LABEL_10;
    case 2:
      v11 = 1;
      v12 = 1;
      goto LABEL_10;
    case 3:
      v11 = 0;
      v12 = 3;
      goto LABEL_10;
    case 4:
      v11 = 0;
      v12 = 5;
LABEL_10:
      memset(v27, 0, sizeof(v27));
      v25 = 0;
      result = ripc_GetRenderingState(v10, a2, a3, (uint64_t)v27);
      if ((_DWORD)result)
      {
        v17.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 8);
        v24 = *(_OWORD *)(v10 + 24);
        v18 = *(_QWORD *)(v10 + 40);
        v23[0] = v17.n128_u64[0];
        v23[1] = v18;
        v19 = *(_BYTE *)(a2 + 81);
        if (v19)
          v19 = *(_BYTE *)(*(_QWORD *)(a3 + 120) + 7) & 1;
        LOBYTE(v25) = v19;
        v26 = (char *)&v27[1] + 8;
        if ((v11 & 1) == 0)
        {
          v20 = *(_DWORD **)(v10 + 56);
          if (!v20)
          {
            v20 = malloc_type_calloc(1uLL, 0xB8uLL, 0x415BF41uLL);
            *(_QWORD *)v20 = RIPRenderCreate_ripr_class;
            v20[2] = 1;
            *((_QWORD *)v20 + 2) = 0;
            *(_QWORD *)(v10 + 56) = v20;
          }
          RIPRenderRectangles(v20, (uint64_t)v23, (double *)(a3 + 24), a5, a6, 0);
        }
        if ((v12 & 1) != 0)
        {
          memset(v22, 0, sizeof(v22));
          ripc_GetRenderStroke(a3, (uint64_t)v22, (__int128 *)(a3 + 24));
          v21 = *(_DWORD **)(v10 + 64);
          if (!v21)
          {
            v21 = malloc_type_calloc(1uLL, 0xB8uLL, 0x415BF41uLL);
            *(_QWORD *)v21 = RIPRenderCreate_ripr_class;
            v21[2] = 1;
            *((_QWORD *)v21 + 2) = 0;
            *(_QWORD *)(v10 + 64) = v21;
          }
          RIPRenderRectangles(v21, (uint64_t)v23, (double *)(a3 + 24), a5, a6, (uint64_t)v22);
        }
        ripc_Render(v10, a2, a3, (uint64_t *)v27, v12, v14, v15, v16, v17);
        result = 0;
      }
      break;
    default:
      result = 1000;
      break;
  }
  return result;
}

void RIPRenderRectangles(_QWORD *a1, uint64_t a2, double *a3, double *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  double v10;
  double v11;
  double v12;
  double v13;
  _BOOL4 v14;
  _BOOL4 v15;
  _BOOL4 v16;
  double v17;
  double v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  double *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  double *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double *v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double *v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  float64x2_t v66;
  double v67;
  float64x2_t v68;
  double v69;
  double v70;
  double v71;
  double v72;
  int32x2_t v73;
  int32x2_t v74;
  int32x2_t *v75;
  int8x8_t v76;
  int32x2_t v77;
  int32x2_t v78;
  int32x2_t v79;
  double *v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  void (*v93)(_QWORD, _QWORD);
  double *v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  float v103;
  float v104;
  double v105;
  double v106;
  float v107;
  float v108;
  float v109;
  float v110;
  double v111;
  double v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  double v117;
  double v118;

  if (a1)
  {
    v6 = a5;
    if (a5)
    {
      if (a4 && a2 && *a1)
      {
        v11 = *a3;
        v10 = a3[1];
        v12 = a3[2];
        v13 = a3[3];
        v14 = v13 == 0.0 && *a3 == 0.0;
        if (v14)
        {
          v15 = 0;
          v16 = 1;
        }
        else
        {
          v16 = v10 == 0.0;
          if (v12 != 0.0)
            v16 = 0;
          v15 = v16;
        }
        v17 = a3[4];
        v18 = a3[5];
        if (!a6 && a5 == 1 && v16 && !a1[2])
        {
          v38 = *(double *)(a2 + 8);
          v39 = v17 * v38;
          v40 = v18 * v38;
          v41 = *a4;
          v42 = a4[1];
          if (v15)
          {
            v43 = v11 * v38;
            v44 = v13 * v38;
            v45 = v39 + v11 * v38 * v41;
            v46 = v40 + v44 * v42;
            v47 = a4[2];
            v48 = a4[3];
          }
          else
          {
            v43 = v12 * v38;
            v44 = v10 * v38;
            v45 = v39 + v12 * v38 * v42;
            v46 = v40 + v44 * v41;
            v48 = a4[2];
            v47 = a4[3];
          }
          v63 = v45 + v43 * v47;
          v64 = v46 + v44 * v48;
          if (v45 <= v63)
            v65 = v63;
          else
            v65 = v45;
          if (v45 > v63)
            v45 = v63;
          if (v45 < -4194303.0)
            v45 = -4194303.0;
          v66.f64[0] = v45 * 256.0 + 0.5;
          if (v65 <= 4194303.0)
            v67 = v65;
          else
            v67 = 4194303.0;
          v68.f64[0] = v67 * 256.0 + 0.5;
          if (v66.f64[0] < v68.f64[0])
          {
            if (v46 <= v64)
              v69 = v46;
            else
              v69 = v46 + v44 * v48;
            if (v46 > v64)
              v64 = v46;
            if (v69 >= -4194303.0)
              v70 = v69;
            else
              v70 = -4194303.0;
            v71 = v70 * 256.0 + 0.5;
            if (v64 > 4194303.0)
              v64 = 4194303.0;
            v72 = v64 * 256.0 + 0.5;
            if (v71 < v72)
            {
              v66.f64[1] = v71;
              v73 = vmovn_s64(vcvtq_s64_f64(v66));
              v68.f64[1] = v72;
              v74 = vmovn_s64(vcvtq_s64_f64(v68));
              v75 = *(int32x2_t **)(a2 + 40);
              if (v75)
              {
                *(int32x2_t *)&v66.f64[0] = vshl_n_s32(vadd_s32(v75[1], *v75), 8uLL);
                *(int32x2_t *)&v68.f64[0] = vshl_n_s32(*v75, 8uLL);
                v73 = vmax_s32(*(int32x2_t *)&v68.f64[0], v73);
                v74 = vmin_s32(*(int32x2_t *)&v66.f64[0], v74);
              }
              LODWORD(v68.f64[0]) = 0;
              LOBYTE(v66.f64[0]) = *(_BYTE *)(a2 + 32);
              v76 = vdup_lane_s8(vceq_s8(*(int8x8_t *)&v66.f64[0], *(int8x8_t *)&v68.f64[0]), 0);
              v77 = (int32x2_t)vbsl_s8(v76, (int8x8_t)(*(_QWORD *)&vadd_s32(v74, (int32x2_t)0xFF000000FFLL) & 0xFFFFFF00FFFFFF00), (int8x8_t)v74);
              v78 = (int32x2_t)vbsl_s8(v76, (int8x8_t)(*(_QWORD *)&v73 & 0xFFFFFF00FFFFFF00), (int8x8_t)v73);
              v79 = vcgt_s32(v77, v78);
              if ((v79.i32[0] & v79.i32[1] & 1) != 0)
              {
                a1[21] = v78;
                a1[22] = v77;
                a1[2] = a1 + 21;
              }
            }
          }
        }
        else
        {
          v19 = ripr_Acquire((uint64_t)a1, a2);
          if (v19)
          {
            v111 = v18;
            v112 = v17;
            if (a6)
            {
              v116 = 0;
              v114 = 0u;
              v115 = 0u;
              v113 = 0u;
              v20 = (_QWORD *)ripr_stroke_acquire((uint64_t)v19, (uint64_t)&v113, a6);
              if (v20)
              {
                v21 = (uint64_t)v20;
                v22 = (void (*)(_QWORD, _QWORD, _QWORD))v20[2];
                if (v22)
                  v22(v20[1], v114, v20[6]);
                if (v15)
                {
                  v23 = a4 + 2;
                  do
                  {
                    v24 = v17 + v11 * *(v23 - 2);
                    v25 = v18 + v13 * *(v23 - 1);
                    v26 = *v23;
                    v27 = v23[1];
                    v23 += 4;
                    v28 = v24 + v11 * v26;
                    v29 = v25 + v13 * v27;
                    v117 = v28;
                    v118 = v25;
                    (*(void (**)(_QWORD, _QWORD, double *, _QWORD))(v21 + 24))(*(_QWORD *)(v21 + 8), 0, &v117, *(_QWORD *)(v21 + 48));
                    v117 = v24;
                    v118 = v25;
                    (*(void (**)(_QWORD, uint64_t, double *, _QWORD))(v21 + 24))(*(_QWORD *)(v21 + 8), 1, &v117, *(_QWORD *)(v21 + 48));
                    v117 = v24;
                    v118 = v29;
                    (*(void (**)(_QWORD, uint64_t, double *, _QWORD))(v21 + 24))(*(_QWORD *)(v21 + 8), 1, &v117, *(_QWORD *)(v21 + 48));
                    v117 = v28;
                    v118 = v29;
                    (*(void (**)(_QWORD, uint64_t, double *, _QWORD))(v21 + 24))(*(_QWORD *)(v21 + 8), 1, &v117, *(_QWORD *)(v21 + 48));
                    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(v21 + 24))(*(_QWORD *)(v21 + 8), 4, 0, *(_QWORD *)(v21 + 48));
                    --v6;
                  }
                  while (v6);
                }
                else if (v14)
                {
                  v49 = a4 + 2;
                  do
                  {
                    v50 = v18 + v10 * *(v49 - 2);
                    v51 = v17 + v12 * *(v49 - 1);
                    v52 = *v49;
                    v53 = v49[1];
                    v49 += 4;
                    v54 = v50 + v10 * v52;
                    v55 = v51 + v12 * v53;
                    v117 = v55;
                    v118 = v50;
                    (*(void (**)(_QWORD, _QWORD, double *, _QWORD))(v21 + 24))(*(_QWORD *)(v21 + 8), 0, &v117, *(_QWORD *)(v21 + 48));
                    v117 = v51;
                    v118 = v50;
                    (*(void (**)(_QWORD, uint64_t, double *, _QWORD))(v21 + 24))(*(_QWORD *)(v21 + 8), 1, &v117, *(_QWORD *)(v21 + 48));
                    v117 = v51;
                    v118 = v54;
                    (*(void (**)(_QWORD, uint64_t, double *, _QWORD))(v21 + 24))(*(_QWORD *)(v21 + 8), 1, &v117, *(_QWORD *)(v21 + 48));
                    v117 = v55;
                    v118 = v54;
                    (*(void (**)(_QWORD, uint64_t, double *, _QWORD))(v21 + 24))(*(_QWORD *)(v21 + 8), 1, &v117, *(_QWORD *)(v21 + 48));
                    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(v21 + 24))(*(_QWORD *)(v21 + 8), 4, 0, *(_QWORD *)(v21 + 48));
                    --v6;
                  }
                  while (v6);
                }
                else
                {
                  v80 = a4 + 2;
                  do
                  {
                    v81 = *(v80 - 2);
                    v82 = *(v80 - 1);
                    v83 = v17 + v12 * v82 + v11 * v81;
                    v84 = v18 + v13 * v82 + v10 * v81;
                    v85 = *v80;
                    v86 = v80[1];
                    v80 += 4;
                    v117 = v83;
                    v118 = v84;
                    (*(void (**)(_QWORD, _QWORD, double *, _QWORD))(v21 + 24))(*(_QWORD *)(v21 + 8), 0, &v117, *(_QWORD *)(v21 + 48));
                    v87 = v83 + v11 * v85;
                    v88 = v84 + v10 * v85;
                    v117 = v87;
                    v118 = v88;
                    (*(void (**)(_QWORD, uint64_t, double *, _QWORD))(v21 + 24))(*(_QWORD *)(v21 + 8), 1, &v117, *(_QWORD *)(v21 + 48));
                    v89 = v87 + v12 * v86;
                    v90 = v88 + v13 * v86;
                    v117 = v89;
                    v118 = v90;
                    (*(void (**)(_QWORD, uint64_t, double *, _QWORD))(v21 + 24))(*(_QWORD *)(v21 + 8), 1, &v117, *(_QWORD *)(v21 + 48));
                    v91 = v89 + -v11 * v85;
                    v92 = v90 + -v10 * v85;
                    v18 = v111;
                    v17 = v112;
                    v117 = v91;
                    v118 = v92;
                    (*(void (**)(_QWORD, uint64_t, double *, _QWORD))(v21 + 24))(*(_QWORD *)(v21 + 8), 1, &v117, *(_QWORD *)(v21 + 48));
                    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(v21 + 24))(*(_QWORD *)(v21 + 8), 4, 0, *(_QWORD *)(v21 + 48));
                    --v6;
                  }
                  while (v6);
                }
                v93 = *(void (**)(_QWORD, _QWORD))(v21 + 32);
                if (v93)
                  v93(*(_QWORD *)(v21 + 8), *(_QWORD *)(v21 + 48));
                path_iterator::release(v21);
              }
              else
              {
                ripr_Finish((uint64_t)a1);
              }
            }
            else
            {
              v30 = *((_QWORD *)v19 + 3);
              if (v15)
              {
                v31 = a4 + 2;
                do
                {
                  v32 = v17 + v11 * *(v31 - 2);
                  v33 = v18 + v13 * *(v31 - 1);
                  v34 = *v31;
                  v35 = v31[1];
                  v31 += 4;
                  v36 = v32 + v11 * v34;
                  v37 = v33 + v13 * v35;
                  *(float *)&v32 = v32;
                  *(float *)&v33 = v33;
                  *(float *)&v36 = v36;
                  *(float *)&v37 = v37;
                  aa_rectat(v30, *(float *)&v32, *(float *)&v33, *(float *)&v36, *(float *)&v37);
                  --v6;
                }
                while (v6);
              }
              else if (v14)
              {
                v56 = a4 + 2;
                do
                {
                  v57 = v18 + v10 * *(v56 - 2);
                  v58 = v17 + v12 * *(v56 - 1);
                  v59 = *v56;
                  v60 = v56[1];
                  v56 += 4;
                  v61 = v57 + v10 * v59;
                  v62 = v58 + v12 * v60;
                  *(float *)&v58 = v58;
                  *(float *)&v59 = v57;
                  *(float *)&v57 = v62;
                  *(float *)&v62 = v61;
                  aa_rectat(v30, *(float *)&v58, *(float *)&v59, *(float *)&v57, *(float *)&v62);
                  --v6;
                }
                while (v6);
              }
              else
              {
                v94 = a4 + 2;
                do
                {
                  v95 = *(v94 - 2);
                  v96 = *(v94 - 1);
                  v97 = v112 + v12 * v96 + v11 * v95;
                  v98 = v111 + v13 * v96 + v10 * v95;
                  v99 = *v94;
                  v100 = v94[1];
                  v94 += 4;
                  *(float *)&v95 = v97;
                  *(float *)&v96 = v98;
                  aa_moveto(v30, *(float *)&v95, *(float *)&v96);
                  v101 = v97 + v11 * v99;
                  v102 = v98 + v10 * v99;
                  v103 = v101;
                  v104 = v102;
                  aa_lineto(v30, v103, v104);
                  v105 = v101 + v12 * v100;
                  v106 = v102 + v13 * v100;
                  v107 = v105;
                  v108 = v106;
                  aa_lineto(v30, v107, v108);
                  v109 = v105 + -v11 * v99;
                  v110 = v106 + -v10 * v99;
                  aa_lineto(v30, v109, v110);
                  aa_close(v30);
                  --v6;
                }
                while (v6);
              }
            }
          }
        }
      }
    }
  }
}

void CGvImageConverterCacheRelease(char *value)
{
  if (get_cache_predicate_16225 != -1)
    dispatch_once(&get_cache_predicate_16225, &__block_literal_global_6_16226);
  if (cache_release_value(*(cache_t **)(get_cache_converter_cache + 64), value))
    CGvImageConverterDeallocate(value);
}

void _CGHandleAssert(const char *a1, int a2, const char *a3, const char *a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  os_unfair_lock_lock(&_CGHandleAssert_assert_lock);
  v14 = snprintf(_CGHandleAssert_assertStr, 0x800uLL, "CoreGraphics assert(%s) failed in %s:\n\t", a4, a1);
  v15 = v14;
  if (v14 >= 0x800)
    v16 = 2048;
  else
    v16 = v14;
  v17 = &_CGHandleAssert_assertStr[v16];
  v18 = vsnprintf(&_CGHandleAssert_assertStr[v16], 2048 - v16, a5, &a9);
  if (v15 <= 0x7FF && !v18)
    *v17 = 0;
  CGPostError((uint64_t)"%s", v19, v20, v21, v22, v23, v24, v25, (char)_CGHandleAssert_assertStr);
  qword_1ECDA5E30 = (uint64_t)_CGHandleAssert_assertStr;
  __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, a3, a2, a4);
}

void CGClipRelease(char *a1)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  const void *v5;
  unsigned int *v6;

  if (a1)
  {
    do
    {
      v2 = __ldxr((unsigned int *)a1);
      v3 = v2 - 1;
    }
    while (__stxr(v3, (unsigned int *)a1));
    if (!v3)
    {
      v4 = a1[8];
      switch(v4)
      {
        case 4:
          CGTextClippingRelease(*((unsigned int **)a1 + 3));
          break;
        case 3:
          CGClipMaskRelease(*((unsigned int **)a1 + 3));
          break;
        case 2:
          v5 = (const void *)*((_QWORD *)a1 + 3);
          if (v5)
            CFRelease(v5);
          break;
      }
      v6 = (unsigned int *)*((_QWORD *)a1 + 2);
      if (v6)
        CGClipStrokeRelease(v6);
      free(a1);
    }
  }
}

uint64_t convert_indexed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double v9;
  int *v10;
  _DWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t BitsPerPixel;
  double v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  float v108;
  const char *v109;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  float *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  int Type;
  float v146;
  float v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  BOOL v152;
  uint64_t v153;
  char v154;
  unsigned int v155;
  unint64_t v156;
  unsigned __int8 *v157;
  uint64_t v158;
  _BYTE *v159;
  unsigned int v160;
  unsigned int v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  float v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  float *v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  int v186;
  uint64_t v187;
  _BOOL8 v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  _BOOL4 v194;
  uint64_t v195;
  float *v196;
  char *v197;
  _BYTE *v198;
  unsigned __int8 *v199;
  uint64_t v200;
  _WORD *v201;
  unsigned int v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int v206;
  float v207;
  float v208;
  unsigned int v209;
  float v210;
  float v211;
  unsigned int v215;
  int v216;
  uint64_t v217;
  int v218;
  _BYTE *v219;
  uint64_t v220;
  float v221;
  float *v222;
  uint64_t v223;
  __int16 *v225;
  uint64_t v226;
  int v232;
  _WORD *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  float v240;
  unint64_t v241;
  uint64_t v242;
  float *v243;
  char *v244;
  char *v245;
  char *v246;
  unint64_t v247;
  float v248;
  float v249;
  uint64_t v250;
  unsigned int width;
  float v252;
  float v253;
  unsigned int v254;
  float v255;
  float v256;
  unint64_t v258;
  uint64_t v259;
  float *v260;
  char *v261;
  char *v262;
  char *v263;
  char *v264;
  unsigned int v265;
  float v266;
  float v267;
  unsigned int v268;
  float v269;
  float v270;
  char v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  char v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  char v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  char v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  char v299;
  int *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  _BOOL8 v312;
  _BOOL8 v313;
  uint64_t v314;
  uint64_t v315;
  float *v316;
  float *v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  int v321;
  int v322;
  uint64_t v323;
  int v324;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  int v331;
  _BOOL8 v332;
  _BOOL4 v333;
  int v334;
  int v335;
  uint64_t v336;
  vImage_Buffer permuteMap;
  vImage_Buffer v339;
  vImage_Buffer v340;
  vImage_Buffer v341;
  vImage_Buffer v342;
  vImage_Buffer v343;
  vImage_Buffer __dst[10];

  v8 = a3;
  v9 = 1.0;
  if (*(_DWORD *)(a4 + 32) == 2)
    v9 = (*(double *)(*(_QWORD *)(a2 + 80) + 8) - **(double **)(a2 + 80))
       / (double)(*(_DWORD *)(a1 + 208) - 1);
  v10 = (int *)(a3 + 40);
  v11 = (_DWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v13 = v12 != 8 || (*(_DWORD *)(a3 + 40) - 7) > 2;
  v334 = *(_DWORD *)(a4 + 32);
  if (!v13)
  {
    v50 = *(_QWORD *)(a3 + 48);
    _ZF = v50 - 1 < 2 || v50 == 4;
    if (!_ZF)
      _CGHandleAssert("convert_indexed_1_2_4_bit", 4112, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "bits_per_component == 1 || bits_per_component == 2 || bits_per_component == 4", "%lu bits per component content unhandled here", a6, a7, a8, *(_QWORD *)(a3 + 48));
    v52 = *(_QWORD *)(a4 + 24);
    if (!v52)
      v52 = *(_QWORD *)(a1 + 216);
    v54 = *(_QWORD *)(a2 + 8);
    v53 = *(_QWORD *)(a2 + 16);
    v55 = *(float **)a2;
    v56 = *(_QWORD *)a3;
    v57 = *(_QWORD *)(a1 + 40);
    memcpy(__dst, (const void *)(a2 + 40), 0x130uLL);
    BitsPerPixel = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v59, v60, v61, v62, v63, v64, v65);
    if (v52)
    {
      v68 = *(_DWORD *)(a2 + 64);
      if (v68 == 8)
        v69 = 1;
      else
        v69 = *(_DWORD *)(a2 + 64);
      if (v68 == 9)
        v70 = 3;
      else
        v70 = v69;
      v71 = *(_DWORD *)(v8 + 64);
      if (v71 == 9)
      {
        v71 = 3;
      }
      else if (v71 == 8)
      {
        v71 = 1;
      }
      v332 = (v70 & 0xFFFFFFFD) == 4;
      v147 = flt_1850040D0[v50 == 2];
      if (v50 == 1)
        v147 = 0.0039216;
      if (v53)
      {
        v148 = *(_QWORD *)(a2 + 24);
        v149 = *(_QWORD *)(v8 + 24);
        v150 = (*(_DWORD *)(a1 + 208) - 1);
        v152 = (v71 - 5) < 0xFFFFFFFC || (v70 - 5) < 0xFFFFFFFE;
        _ZF = v70 == 4;
        v153 = -1;
        if (!_ZF)
          v153 = 1;
        v154 = v50 - 24;
        while (!v54)
        {
LABEL_113:
          v55 = (float *)((char *)v55 + v148);
          v56 += v149;
          if (!--v53)
            return 1;
        }
        v155 = 0;
        v156 = 0;
        v157 = (unsigned __int8 *)v55 + v332;
        v158 = v54;
        v159 = (_BYTE *)v56;
        while (1)
        {
          v160 = *v157;
          if (v9 != 1.0)
          {
            v67 = (double)v160 * v9 + 0.5 + **(double **)(a2 + 80);
            v160 = (int)v67;
          }
          if (v152)
          {
            LOBYTE(v161) = -1;
            if (!v71)
              goto LABEL_93;
          }
          else
          {
            v161 = v157[v153];
            if (v334 == 2)
            {
              v67 = fmax(fmin((double)v161* (*(double *)(*(_QWORD *)(a2 + 80) + 24) - *(double *)(*(_QWORD *)(a2 + 80) + 16))+ 0.5+ *(double *)(*(_QWORD *)(a2 + 80) + 16) * 255.0, 255.0), 0.0);
              v161 = (int)v67;
            }
            else if (v334 == 1)
            {
              LOBYTE(v161) = ~(_BYTE)v161;
            }
          }
          if (v71 == 4 || v71 == 2)
          {
            if (v50 < 0x19)
            {
              v163 = v50;
              if (v155 >= 8)
                goto LABEL_90;
            }
            else
            {
              v162 = v155 - 8;
              if (v155 >= 8)
              {
                do
                {
                  *v159++ = v156 >> v162;
                  v162 -= 8;
                  v155 -= 8;
                }
                while (v155 > 7);
              }
              v156 = ((unint64_t)v161 >> v154) | (v156 << 24);
              v155 |= 0x18u;
              v163 = v50 - 24;
LABEL_90:
              v164 = v155 - 8;
              do
              {
                v155 -= 8;
                *v159++ = v156 >> v164;
                v164 -= 8;
              }
              while (v155 > 7);
            }
            v156 = ~(-1 << v163) & v161 | (v156 << v163);
            v155 += v163;
          }
LABEL_93:
          if (v57)
          {
            v165 = 0;
            v166 = (v150 - v160) & ((int)(v150 - v160) >> 31);
            v167 = v52 + v57 * (v160 + ((v150 - v160) & ((int)(v150 - v160) >> 31)));
            while (1)
            {
              LOBYTE(v67) = *(_BYTE *)(v167 + v165);
              *(float *)&v67 = v147 * (float)LODWORD(v67);
              LODWORD(v166) = llroundf(*(float *)&v67);
              if (v50 >= 0x19)
                break;
              v169 = v50;
              if (v155 >= 8)
                goto LABEL_100;
LABEL_102:
              v156 = ~(-1 << v169) & v166 | (v156 << v169);
              v155 += v169;
              if (++v165 == v57)
                goto LABEL_103;
            }
            v168 = v155 - 8;
            if (v155 >= 8)
            {
              do
              {
                *v159++ = v156 >> v168;
                v168 -= 8;
                v155 -= 8;
              }
              while (v155 > 7);
            }
            v156 = (v166 >> v154) | (v156 << 24);
            v155 |= 0x18u;
            v169 = v50 - 24;
LABEL_100:
            v170 = v155 - 8;
            do
            {
              v155 -= 8;
              *v159++ = v156 >> v170;
              v170 -= 8;
            }
            while (v155 > 7);
            goto LABEL_102;
          }
LABEL_103:
          if ((v71 & 0xFFFFFFFD) == 1)
          {
            if (v50 < 0x19)
            {
              v172 = v50;
              if (v155 >= 8)
                goto LABEL_109;
            }
            else
            {
              v171 = v155 - 8;
              if (v155 >= 8)
              {
                do
                {
                  *v159++ = v156 >> v171;
                  v171 -= 8;
                  v155 -= 8;
                }
                while (v155 > 7);
              }
              v156 = ((unint64_t)v161 >> v154) | (v156 << 24);
              v155 |= 0x18u;
              v172 = v50 - 24;
LABEL_109:
              v173 = v155 - 8;
              do
              {
                v155 -= 8;
                *v159++ = v156 >> v173;
                v173 -= 8;
              }
              while (v155 > 7);
            }
            v156 = ~(-1 << v172) & v161 | (v156 << v172);
            v155 += v172;
          }
          v157 += BitsPerPixel >> 3;
          if (!--v158)
            goto LABEL_113;
        }
      }
      return 1;
    }
    v109 = "convert_indexed_1_2_4_bit";
LABEL_265:
    CGPostError((uint64_t)"%s : Unable to complete color conversion", v36, v37, v38, v39, v40, v41, v42, (char)v109);
    return 0;
  }
  if (v12 != 8)
  {
    if (v12 == 32)
    {
      if (*v11 == 4)
      {
        v111 = *(_QWORD *)(a4 + 24);
        memcpy(__dst, (const void *)(a2 + 40), 0x130uLL);
        if (CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v112, v113, v114, v115, v116, v117, v118) != 32
          || *(_QWORD *)(a2 + 48) != 32)
        {
          memcpy(__dst, v11, 0x130uLL);
          v280 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v273, v274, v275, v276, v277, v278, v279);
          _CGHandleAssert("convert_indexed_float", 4410, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "CGBitmapPixelInfoGetBitsPerPixel(src->pixel_info) == 32 && CGBitmapPixelInfoGetBitsPerComponent(src->pixel_info) == 32", "invalid pixel type bpp %lu bpc %lu", v281, v282, v283, v280);
        }
        if (!v111)
          v111 = *(_QWORD *)(a1 + 216);
        v120 = *(_QWORD *)(a2 + 8);
        v119 = *(_QWORD *)(a2 + 16);
        v121 = *(float **)a2;
        v302 = v8;
        v122 = *(char **)v8;
        v123 = *(_QWORD *)(a1 + 40);
        memcpy(__dst, v11, 0x130uLL);
        v131 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v124, v125, v126, v127, v128, v129, v130);
        memcpy(__dst, v10, 0x130uLL);
        v139 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v132, v133, v134, v135, v136, v137, v138);
        if (!v111)
        {
          v109 = "convert_indexed_float";
          goto LABEL_265;
        }
        v327 = v131;
        if (*v10 > 5 || ((1 << *v10) & 0x36) == 0)
          _CGHandleAssert("convert_indexed_float", 4435, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "dst_component == kCGPixelComponent8BitInteger || dst_component == kCGPixelComponent16BitInteger || dst_component == kCGPixelComponent16BitFloat || dst_component == kCGPixelComponent32BitFloat", "invalid destination component type %u", v40, v41, v42, *v10);
        v140 = v139;
        v331 = *v10;
        v336 = *(_QWORD *)(a2 + 24);
        v141 = *(_QWORD *)(v302 + 24);
        v142 = a1;
        v322 = *(_DWORD *)(a1 + 208);
        Type = CGColorSpaceGetType(*(_QWORD **)(a1 + 24));
        memset(&v343, 0, sizeof(v343));
        memset(&v342, 0, sizeof(v342));
        memset(&v341, 0, sizeof(v341));
        if (Type == 5)
        {
          CGColorSpaceGetLabData(*(_QWORD *)(v142 + 24), v143, v144, v106, &v341);
          v146 = 256.0;
        }
        else
        {
          v146 = 255.0;
        }
        if (v119)
        {
          v238 = v140 >> 5;
          v239 = v140 >> 7;
          v240 = v9;
          v241 = v140 >> 6;
          do
          {
            if (v120)
            {
              v242 = v120;
              v243 = v121;
              v244 = v122;
              v245 = v122;
              v246 = v122;
              v247 = (unint64_t)v122;
              do
              {
                v248 = *v243 * 255.0;
                if (v240 != 1.0)
                {
                  v144 = *(_QWORD *)(a2 + 80);
                  v248 = *(double *)v144 + (float)((float)(v248 * v240) + 0.5);
                }
                v249 = fmaxf(v248, 0.0);
                if (v249 > 255.0)
                  v249 = 255.0;
                v339 = v342;
                v340 = v343;
                permuteMap = v341;
                if (v123)
                {
                  v144 = 0;
                  v106 = v111
                       + v123
                       * (((v322 - 1 - (int)v249) & (((v322 - 1) - (int)v249) >> 31))
                                         + (int)v249);
                  v250 = 32;
                  do
                  {
                    switch(v331)
                    {
                      case 1:
                        *(_BYTE *)(v247 + v144) = *(_BYTE *)(v106 + v144);
                        break;
                      case 2:
                        *(_WORD *)&v246[2 * v144] = *(unsigned __int8 *)(v106 + v144) | (*(unsigned __int8 *)(v106 + v144) << 8);
                        break;
                      case 4:
                        __dst[1] = v339;
                        __dst[2] = v340;
                        width = permuteMap.width;
                        v252 = 1.0;
                        __dst[0] = permuteMap;
                        v253 = 0.0;
                        if (Type == 5)
                        {
                          if (v144)
                          {
                            if (v144 <= 2)
                            {
                              v253 = *(double *)((char *)&__dst[0].data + v250);
                              v252 = *(double *)((char *)&__dst[0].height + v250);
                            }
                          }
                          else
                          {
                            v252 = 100.0;
                          }
                        }
                        LOBYTE(width) = *(_BYTE *)(v106 + v144);
                        *(float *)&v244[4 * v144] = v253 + (float)((float)((float)(v252 - v253) * (float)width) / v146);
                        break;
                      case 5:
                        __dst[1] = v339;
                        __dst[2] = v340;
                        v254 = permuteMap.width;
                        v255 = 1.0;
                        __dst[0] = permuteMap;
                        v256 = 0.0;
                        if (Type == 5)
                        {
                          if (v144)
                          {
                            if (v144 <= 2)
                            {
                              v256 = *(double *)((char *)&__dst[0].data + v250);
                              v255 = *(double *)((char *)&__dst[0].height + v250);
                            }
                          }
                          else
                          {
                            v255 = 100.0;
                          }
                        }
                        LOBYTE(v254) = *(_BYTE *)(v106 + v144);
                        _S5 = v256 + (float)((float)((float)(v255 - v256) * (float)v254) / v146);
                        __asm { FCVT            H5, S5 }
                        *(_WORD *)&v245[2 * v144] = LOWORD(_S5);
                        break;
                      default:
                        v272 = v331;
LABEL_302:
                        _CGHandleAssert("write_out_pixel", 3952, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "0", "unhandled component type %u", v247, v144, v106, v272);
                    }
                    ++v144;
                    v250 += 16;
                  }
                  while (v123 != v144);
                }
                switch(v331)
                {
                  case 1:
                    v247 += v238;
                    break;
                  case 2:
                    v246 += 2 * v241;
                    break;
                  case 4:
                    v244 += 4 * v239;
                    break;
                  case 5:
                    v245 += 2 * v241;
                    break;
                  default:
                    v295 = v331;
LABEL_310:
                    _CGHandleAssert("increment_dest_pointer", 4101, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "0", "unhandled component type %u", v247, v144, v106, v295);
                }
                v243 += v327 >> 5;
                --v242;
              }
              while (v242);
            }
            v121 = (float *)((char *)v121 + v336);
            v122 += v141;
            --v119;
          }
          while (v119);
        }
        return 1;
      }
    }
    else if (v12 == 16)
    {
      if (*v11 == 5)
        return convert_indexed_float16(a1, a2, (uint64_t *)a3, *(_QWORD *)(a4 + 24), v9);
      if (*v11 == 2)
      {
        v73 = *(_QWORD *)(a4 + 24);
        memcpy(__dst, (const void *)(a2 + 40), 0x130uLL);
        if (CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v74, v75, v76, v77, v78, v79, v80) != 16
          || *(_QWORD *)(a2 + 48) != 16
          || *v11 != 2)
        {
          memcpy(__dst, v11, 0x130uLL);
          v291 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v284, v285, v286, v287, v288, v289, v290);
          _CGHandleAssert("convert_indexed_16bit", 4283, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "CGBitmapPixelInfoGetBitsPerPixel(src->pixel_info) == 16 && CGBitmapPixelInfoGetBitsPerComponent(src->pixel_info) == 16 && CGBitmapPixelInfoGetCGPixelComponentType(src->pixel_info) == kCGPixelComponent16BitInteger", "bpp %lu  bpc %lu  type %u", v292, v293, v294, v291);
        }
        if (!v73)
          v73 = *(_QWORD *)(a1 + 216);
        v82 = *(_QWORD *)(a2 + 8);
        v81 = *(_QWORD *)(a2 + 16);
        v83 = *(float **)a2;
        v301 = v8;
        v84 = *(char **)v8;
        v85 = *(_QWORD *)(a1 + 40);
        memcpy(__dst, v11, 0x130uLL);
        v93 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v86, v87, v88, v89, v90, v91, v92);
        memcpy(__dst, v10, 0x130uLL);
        v101 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v94, v95, v96, v97, v98, v99, v100);
        if (!v73)
        {
          v109 = "convert_indexed_16bit";
          goto LABEL_265;
        }
        v326 = v101;
        v330 = v93;
        if (*v10 > 5 || ((1 << *v10) & 0x36) == 0)
          _CGHandleAssert("convert_indexed_16bit", 4308, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "dst_component == kCGPixelComponent8BitInteger || dst_component == kCGPixelComponent16BitInteger || dst_component == kCGPixelComponent16BitFloat || dst_component == kCGPixelComponent32BitFloat", "invalid destination component type = %u", v40, v41, v42, *v10);
        v335 = *v10;
        v102 = *(_QWORD *)(a2 + 24);
        v103 = *(_QWORD *)(v301 + 24);
        v321 = *(_DWORD *)(a1 + 208);
        v107 = CGColorSpaceGetType(*(_QWORD **)(a1 + 24));
        memset(&v343, 0, sizeof(v343));
        memset(&v342, 0, sizeof(v342));
        memset(&v341, 0, sizeof(v341));
        if (v107 == 5)
        {
          CGColorSpaceGetLabData(*(_QWORD *)(a1 + 24), v104, v105, v106, &v341);
          v108 = 256.0;
        }
        else
        {
          v108 = 255.0;
        }
        if (v81)
        {
          v258 = v326 >> 5;
          do
          {
            if (v82)
            {
              v259 = v82;
              v260 = v83;
              v261 = v84;
              v262 = v84;
              v263 = v84;
              v264 = v84;
              while (2)
              {
                v247 = *(unsigned __int16 *)v260;
                if (v9 != 1.0)
                  v247 = (int)((double)v247 * v9 + 0.5 + **(double **)(a2 + 80));
                v144 = v247 >> 8;
                v339 = v342;
                v340 = v343;
                permuteMap = v341;
                if (v85)
                {
                  v247 = 0;
                  v144 = v73
                       + v85
                       * (v144 + ((v321 - 1 - v144) & (((v321 - 1) - (int)v144) >> 31)));
                  v106 = 32;
                  while (2)
                  {
                    switch(v335)
                    {
                      case 1:
                        v264[v247] = *(_BYTE *)(v144 + v247);
                        goto LABEL_290;
                      case 2:
                        *(_WORD *)&v263[2 * v247] = *(unsigned __int8 *)(v144 + v247) | (*(unsigned __int8 *)(v144 + v247) << 8);
                        goto LABEL_290;
                      case 4:
                        __dst[1] = v339;
                        __dst[2] = v340;
                        v265 = permuteMap.width;
                        v266 = 1.0;
                        __dst[0] = permuteMap;
                        v267 = 0.0;
                        if (v107 == 5)
                        {
                          if (v247)
                          {
                            if (v247 <= 2)
                            {
                              v267 = *(double *)((char *)&__dst[0].data + v106);
                              v266 = *(double *)((char *)&__dst[0].height + v106);
                            }
                          }
                          else
                          {
                            v266 = 100.0;
                          }
                        }
                        LOBYTE(v265) = *(_BYTE *)(v144 + v247);
                        *(float *)&v261[4 * v247] = v267 + (float)((float)((float)(v266 - v267) * (float)v265) / v108);
                        goto LABEL_290;
                      case 5:
                        __dst[1] = v339;
                        __dst[2] = v340;
                        v268 = permuteMap.width;
                        v269 = 1.0;
                        __dst[0] = permuteMap;
                        v270 = 0.0;
                        if (v107 == 5)
                        {
                          if (v247)
                          {
                            if (v247 <= 2)
                            {
                              v270 = *(double *)((char *)&__dst[0].data + v106);
                              v269 = *(double *)((char *)&__dst[0].height + v106);
                            }
                          }
                          else
                          {
                            v269 = 100.0;
                          }
                        }
                        LOBYTE(v268) = *(_BYTE *)(v144 + v247);
                        _S3 = v270 + (float)((float)((float)(v269 - v270) * (float)v268) / v108);
                        __asm { FCVT            H3, S3 }
                        *(_WORD *)&v262[2 * v247] = LOWORD(_S3);
LABEL_290:
                        ++v247;
                        v106 += 16;
                        if (v85 == v247)
                          break;
                        continue;
                      default:
                        v272 = v335;
                        goto LABEL_302;
                    }
                    break;
                  }
                }
                switch(v335)
                {
                  case 1:
                    v264 += v326 >> 4;
                    goto LABEL_296;
                  case 2:
                    v263 += 2 * v258;
                    goto LABEL_296;
                  case 4:
                    v261 += 4 * (v326 >> 6);
                    goto LABEL_296;
                  case 5:
                    v262 += 2 * v258;
LABEL_296:
                    v260 = (float *)((char *)v260 + 2 * (v330 >> 4));
                    if (!--v259)
                      break;
                    continue;
                  default:
                    v295 = v335;
                    goto LABEL_310;
                }
                break;
              }
            }
            v83 = (float *)((char *)v83 + v102);
            v84 += v103;
            --v81;
          }
          while (v81);
        }
        return 1;
      }
    }
    CGPostError((uint64_t)"%s : Unable to complete color conversion", a2, a3, a4, a5, a6, a7, a8, (char)"convert_indexed");
    _CGHandleAssert("convert_indexed", 4493, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "", "Unimplemented", v296, v297, v298, v299);
  }
  v14 = *(_QWORD *)(a4 + 24);
  if (!v14)
    v14 = *(_QWORD *)(a1 + 216);
  v311 = v14;
  v15 = *(_QWORD *)(a2 + 16);
  v310 = *(_QWORD *)(a2 + 8);
  v16 = *(float **)a2;
  v17 = *(_QWORD *)a3;
  v19 = *(_QWORD *)(a1 + 40);
  memcpy(__dst, (const void *)(a2 + 40), 0x130uLL);
  v27 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v20, v21, v22, v23, v24, v25, v26);
  memcpy(__dst, (const void *)(v8 + 40), 0x130uLL);
  v35 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v28, v29, v30, v31, v32, v33, v34);
  if (!v311)
  {
    v109 = "convert_indexed_8bit";
    goto LABEL_265;
  }
  v329 = v27;
  v43 = *v10;
  if (*v10 > 5 || ((1 << v43) & 0x36) == 0)
    _CGHandleAssert("convert_indexed_8bit", 4209, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "dst_component == kCGPixelComponent8BitInteger || dst_component == kCGPixelComponent16BitInteger || dst_component == kCGPixelComponent16BitFloat || dst_component == kCGPixelComponent32BitFloat", "unhandled component type %u", v40, v41, v42, *v10);
  v44 = v35;
  v308 = *(_QWORD *)(v8 + 24);
  v309 = *(_QWORD *)(a2 + 24);
  v324 = *(_DWORD *)(a1 + 208);
  v48 = CGColorSpaceGetType(*(_QWORD **)(a1 + 24));
  memset(&v343, 0, sizeof(v343));
  memset(&v342, 0, sizeof(v342));
  memset(&v341, 0, sizeof(v341));
  if (v48 == 5)
  {
    CGColorSpaceGetLabData(*(_QWORD *)(a1 + 24), v45, v46, v47, &v341);
    v49 = 1132462080;
  }
  else
  {
    v49 = 1132396544;
  }
  v174 = *(float *)&v49;
  v175 = v334;
  v176 = v15;
  v177 = v310;
  v178 = v311;
  v179 = v16;
  v180 = v17;
  v181 = a2;
  v182 = *(_DWORD *)(a2 + 64);
  v184 = v308;
  v183 = v309;
  if (v182 == 9)
  {
    v182 = 3;
  }
  else if (v182 == 8)
  {
    v182 = 1;
  }
  v186 = *(_DWORD *)(v8 + 64);
  if (v186 == 9)
  {
    v187 = 3;
  }
  else if (v186 == 8)
  {
    v187 = 1;
  }
  else
  {
    v187 = *(unsigned int *)(v8 + 64);
  }
  v313 = (v182 & 0xFFFFFFFD) == 4;
  v189 = (_DWORD)v187 == 2 || (v187 & 0xFFFFFFFD) == 4;
  v312 = v189;
  if (v15)
  {
    v300 = (int *)(v8 + 40);
    v303 = v8;
    v190 = v329 >> 3;
    v191 = v44 >> 3;
    v192 = (v324 - 1);
    v194 = (v182 - 3) < 2 && (v187 - 1) < 4;
    v333 = v194;
    if (v182 == 4)
      v195 = -1;
    else
      v195 = 1;
    v320 = v44 >> 5;
    v323 = v195;
    v328 = v44 >> 4;
    v306 = v190;
    v307 = v187;
    v305 = v44 >> 3;
    v304 = v192;
    do
    {
      if (v177)
      {
        v196 = (float *)(v180 + 4 * v312);
        v197 = (char *)(v180 + 2 * v312);
        v198 = (_BYTE *)(v180 + v312);
        v199 = (unsigned __int8 *)v179 + v313;
        v200 = v177;
        v201 = v197;
        do
        {
          v202 = *v199;
          if (v9 != 1.0)
            v202 = (int)((double)v202 * v9 + 0.5 + **(double **)(v181 + 80));
          v339 = v342;
          v340 = v343;
          permuteMap = v341;
          if (v19)
          {
            v203 = 0;
            v204 = v178 + v19 * (v202 + ((v192 - v202) & ((int)(v192 - v202) >> 31)));
            v205 = 32;
            do
            {
              switch(v43)
              {
                case 1:
                  v198[v203] = *(_BYTE *)(v204 + v203);
                  break;
                case 2:
                  v201[v203] = *(unsigned __int8 *)(v204 + v203) | (*(unsigned __int8 *)(v204 + v203) << 8);
                  break;
                case 4:
                  __dst[1] = v339;
                  __dst[2] = v340;
                  v206 = permuteMap.width;
                  v207 = 1.0;
                  __dst[0] = permuteMap;
                  v208 = 0.0;
                  if (v48 == 5)
                  {
                    if (v203)
                    {
                      if (v203 <= 2)
                      {
                        v208 = *(double *)((char *)&__dst[0].data + v205);
                        v207 = *(double *)((char *)&__dst[0].height + v205);
                      }
                    }
                    else
                    {
                      v207 = 100.0;
                    }
                  }
                  LOBYTE(v206) = *(_BYTE *)(v204 + v203);
                  v196[v203] = v208 + (float)((float)((float)(v207 - v208) * (float)v206) / v174);
                  break;
                case 5:
                  __dst[1] = v339;
                  __dst[2] = v340;
                  v209 = permuteMap.width;
                  v210 = 1.0;
                  __dst[0] = permuteMap;
                  v211 = 0.0;
                  if (v48 == 5)
                  {
                    if (v203)
                    {
                      if (v203 <= 2)
                      {
                        v211 = *(double *)((char *)&__dst[0].data + v205);
                        v210 = *(double *)((char *)&__dst[0].height + v205);
                      }
                    }
                    else
                    {
                      v210 = 100.0;
                    }
                  }
                  LOBYTE(v209) = *(_BYTE *)(v204 + v203);
                  _S0 = v211 + (float)((float)((float)(v210 - v211) * (float)v209) / v174);
                  __asm { FCVT            H0, S0 }
                  *(_WORD *)&v197[2 * v203] = LOWORD(_S0);
                  break;
                default:
                  _CGHandleAssert("write_out_pixel", 3952, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "0", "unhandled component type %u", v187, v190, v191, v43);
              }
              ++v203;
              v205 += 16;
            }
            while (v19 != v203);
          }
          if (!(_DWORD)v187)
            goto LABEL_202;
          if (v333)
          {
            v215 = v199[v323];
            if (v175 == 2)
            {
              v216 = (int)fmax(fmin((double)v215* (*(double *)(*(_QWORD *)(v181 + 80) + 24) - *(double *)(*(_QWORD *)(v181 + 80) + 16))+ 0.5+ *(double *)(*(_QWORD *)(v181 + 80) + 16) * 255.0, 255.0), 0.0);
            }
            else if (v175 == 1)
            {
              LOWORD(v216) = ~(_WORD)v215;
            }
            else
            {
              LOWORD(v216) = v199[v323];
            }
          }
          else
          {
            LOWORD(v216) = 255;
          }
          if (v187 > 6)
LABEL_308:
            _CGHandleAssert("write_out_alpha", 4047, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "0", "unhandled alpha info %u", v187, v190, v191, v187);
          v217 = v19;
          if (((1 << v187) & 0x2A) == 0)
          {
            if (((1 << v187) & 0x54) == 0)
              goto LABEL_308;
            v217 = -1;
          }
          switch(v43)
          {
            case 1:
              v198[v217] = v216;
              if (v19 && v187 <= 2 && (_BYTE)v216 != 0xFF)
              {
                v218 = v216 | (v216 << 8);
                v219 = v198;
                v220 = v19;
                do
                {
                  *v219 = (v218 * *v219 + 0x7FFF) >> 16;
                  ++v219;
                  --v220;
                }
                while (v220);
LABEL_202:
                v199 += v190;
                switch(v43)
                {
                  case 1:
                    goto LABEL_204;
                  case 2:
                    goto LABEL_206;
                  case 4:
                    goto LABEL_209;
                  case 5:
                    goto LABEL_212;
                  default:
                    _CGHandleAssert("increment_dest_pointer", 4101, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "0", "unhandled component type %u", v187, v190, v191, v43);
                }
              }
              v199 += v190;
LABEL_204:
              v198 += v191;
              break;
            case 2:
              v201[v217] = v216 | (unsigned __int16)((_WORD)v216 << 8);
              if (v19 && v187 <= 2 && (_BYTE)v216 != 0xFF)
              {
                v232 = v216 | (v216 << 8);
                v233 = v201;
                v234 = v19;
                do
                {
                  *v233 = (v232 * (unsigned __int16)*v233 + 0x7FFF) >> 16;
                  ++v233;
                  --v234;
                }
                while (v234);
                goto LABEL_202;
              }
              v199 += v190;
LABEL_206:
              v201 += v328;
              break;
            case 4:
              if ((_BYTE)v216 == 0xFF)
              {
                v196[v217] = 1.0;
              }
              else
              {
                v221 = (double)v216 / 255.0;
                v196[v217] = v221;
                if (v187 <= 2)
                {
                  if ((_BYTE)v216)
                  {
                    v222 = v196;
                    v223 = v19;
                    if (v19)
                    {
                      do
                      {
                        *v222 = *v222 * v196[v217];
                        ++v222;
                        --v223;
                      }
                      while (v223);
                      goto LABEL_202;
                    }
                  }
                  else if (v19)
                  {
                    v316 = v179;
                    v318 = v176;
                    v314 = v180;
                    bzero(v196, 4 * v19);
                    v192 = v304;
                    v191 = v305;
                    v190 = v306;
                    v187 = v307;
                    v184 = v308;
                    v183 = v309;
                    v177 = v310;
                    v180 = v314;
                    v179 = v316;
                    v176 = v318;
                    v178 = v311;
                    v175 = v334;
                    v181 = a2;
                  }
                }
              }
              v199 += v190;
LABEL_209:
              v196 += v320;
              break;
            case 5:
              if ((_BYTE)v216 == 0xFF)
              {
                *(_WORD *)&v197[2 * v217] = 15360;
              }
              else
              {
                _S0 = (float)v216 / 255.0;
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v197[2 * v217] = LOWORD(_S0);
                if (v187 <= 2)
                {
                  if ((_BYTE)v216)
                  {
                    v225 = (__int16 *)v197;
                    v226 = v19;
                    if (v19)
                    {
                      do
                      {
                        _H0 = *v225;
                        _H1 = *(_WORD *)&v197[2 * v217];
                        __asm
                        {
                          FCVT            S1, H1
                          FCVT            S0, H0
                        }
                        _S0 = _S0 * _S1;
                        __asm { FCVT            H0, S0 }
                        *v225++ = LOWORD(_S0);
                        --v226;
                      }
                      while (v226);
                      goto LABEL_202;
                    }
                  }
                  else if (v19)
                  {
                    v317 = v179;
                    v319 = v176;
                    v315 = v180;
                    bzero(v197, 2 * v19);
                    v192 = v304;
                    v191 = v305;
                    v190 = v306;
                    v187 = v307;
                    v184 = v308;
                    v183 = v309;
                    v177 = v310;
                    v180 = v315;
                    v179 = v317;
                    v176 = v319;
                    v178 = v311;
                    v175 = v334;
                    v181 = a2;
                  }
                }
              }
              v199 += v190;
LABEL_212:
              v197 += 2 * v328;
              break;
            default:
              _CGHandleAssert("write_out_alpha", 4065, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "0", "unhandled component type %u", v187, v190, v191, v43);
          }
          --v200;
        }
        while (v200);
      }
      v179 = (float *)((char *)v179 + v183);
      v180 += v184;
      --v176;
    }
    while (v176);
    v10 = v300;
    v8 = v303;
    v186 = *(_DWORD *)(v303 + 64);
  }
  if ((v186 - 1) > 8)
    v235 = 0;
  else
    v235 = qword_184F7EB80[v186 - 1];
  if (*(_DWORD *)(v8 + 68) == 0x2000 && *v10 == 1 && v235 + *(_QWORD *)(v8 + 56) == 4)
  {
    v236 = *(char **)v8;
    v237 = *(_QWORD *)(v8 + 8) * *(_QWORD *)(v8 + 16);
    LODWORD(permuteMap.data) = 66051;
    __dst[0].data = v236;
    __dst[0].height = 1;
    __dst[0].width = v237 & 0x3FFFFFFFFFFFFFFFLL;
    __dst[0].rowBytes = 4 * v237;
    vImagePermuteChannels_ARGB8888(__dst, __dst, (const uint8_t *)&permuteMap, 0);
  }
  return 1;
}

uint64_t data_get_byte_pointer(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t CGContextDelegateDrawRects(uint64_t result)
{
  uint64_t (*v1)(void);

  if (result)
  {
    v1 = *(uint64_t (**)(void))(result + 64);
    if (v1)
      return v1();
    else
      return 1006;
  }
  return result;
}

void copy(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::__fs::filesystem::copy_options __opt, std::error_code *__ec)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t BitsPerPixel;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  char *v22;
  size_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE __dst[304];

  memcpy(__dst, &__from[1].__pn_.__r_.__value_.__r.__words[2], sizeof(__dst));
  BitsPerPixel = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v6, v7, v8, v9, v10, v11, v12);
  memcpy(__dst, &__to[1].__pn_.__r_.__value_.__r.__words[2], sizeof(__dst));
  if (BitsPerPixel != CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v14, v15, v16, v17, v18, v19, v20))
  {
    memcpy(__dst, &__to[1].__pn_.__r_.__value_.__r.__words[2], sizeof(__dst));
    CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v25, v26, v27, v28, v29, v30, v31);
    _CGHandleAssert("copy", 552, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSConverter.c", "src_bits_per_pixel == CGBitmapPixelInfoGetBitsPerPixel(dst->pixel_info)", "src bpp: %zu dest bpp: %zu", v32, v33, v34, BitsPerPixel);
  }
  if (__from->__pn_.__r_.__value_.__r.__words[2])
  {
    v21 = 0;
    v22 = (char *)__from->__pn_.__r_.__value_.__r.__words[0];
    v23 = (__from->__pn_.__r_.__value_.__l.__size_ * BitsPerPixel + 7) >> 3;
    v24 = (char *)__to->__pn_.__r_.__value_.__r.__words[0];
    do
    {
      memcpy(v24, v22, v23);
      v24 += (unint64_t)__to[1].__pn_.__r_.__value_.__l.__data_;
      v22 += (unint64_t)__from[1].__pn_.__r_.__value_.__l.__data_;
      ++v21;
    }
    while (v21 < __from->__pn_.__r_.__value_.__r.__words[2]);
  }
}

BOOL conversion_formats_are_equal(uint64_t a1, uint64_t a2)
{
  const void *v2;
  _BYTE v4[304];
  _BYTE __dst[304];

  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8)
    || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16)
    || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
  {
    return 0;
  }
  v2 = (const void *)(a2 + 40);
  memcpy(__dst, (const void *)(a1 + 40), sizeof(__dst));
  memcpy(v4, v2, sizeof(v4));
  return CGBitmapPixelInfoIsEqualToBitmapPixelInfo((uint64_t)__dst, (uint64_t)v4);
}

uint64_t partial_get_byte_pointer(uint64_t *a1)
{
  uint64_t result;

  result = CGDataProviderRetainBytePtr(*a1);
  if (result)
    result += a1[1];
  return result;
}

void partial_release_byte_pointer(uint64_t *a1)
{
  CGDataProviderReleaseBytePtr(*a1);
}

CGDataProviderRef CGImageGetDataProvider(CGImageRef image)
{
  return (CGDataProviderRef)CGImageGetDataProviderInternal((char *)image, 0);
}

uint64_t CGvImage_converter_data_make_nonpurgeable()
{
  return 1;
}

unint64_t CGBitmapGetAlignedBytesPerRow(uint64_t a1)
{
  return (a1 + 31) & 0xFFFFFFFFFFFFFFE0;
}

uint64_t CGStyleGetColor(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  if (rect.size.width < 0.0 || rect.size.height < 0.0)
    rect = CGRectStandardize(rect);
  return rect.origin.y + rect.size.height * 0.5;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  if (rect.size.width < 0.0 || rect.size.height < 0.0)
    rect = CGRectStandardize(rect);
  return rect.origin.y + rect.size.height;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  if (rect.size.width < 0.0 || rect.size.height < 0.0)
    rect = CGRectStandardize(rect);
  return rect.origin.x + rect.size.width;
}

CGPathRef CGPathCreateWithRoundedRect(CGRect rect, CGFloat cornerWidth, CGFloat cornerHeight, const CGAffineTransform *transform)
{
  const CGAffineTransform *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  double v16;
  double v17;
  CFTypeID TypeID;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t Instance;
  CGRect v27;
  CGSize v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;

  height = rect.size.height;
  width = rect.size.width;
  y = rect.origin.y;
  x = rect.origin.x;
  if (cornerWidth >= 0.0)
    v16 = cornerWidth;
  else
    v16 = 0.0;
  if (cornerHeight >= 0.0)
    v17 = cornerHeight;
  else
    v17 = 0.0;
  if (rect.size.width < 0.0 || rect.size.height < 0.0)
  {
    v29 = CGRectStandardize(rect);
    if (v16 > v29.size.width * 0.5)
      v16 = v29.size.width * 0.5;
    v30.origin.x = x;
    v30.origin.y = y;
    v30.size.width = width;
    v30.size.height = height;
    rect = CGRectStandardize(v30);
  }
  else if (v16 > rect.size.width * 0.5)
  {
    v16 = rect.size.width * 0.5;
  }
  if (v17 > rect.size.height * 0.5)
    v17 = rect.size.height * 0.5;
    return 0;
  if (v16 != 0.0 && v17 != 0.0)
  {
    TypeID = CGPathGetTypeID();
    Instance = CGTypeCreateInstance(TypeID, 88, v19, v20, v21, v22, v23, v24);
    if (Instance)
    {
      v31.origin.x = x;
      v31.origin.y = y;
      v31.size.width = width;
      v31.size.height = height;
      v27 = CGRectStandardize(v31);
      v28.width = v16;
      v28.height = v17;
      CG::Path::append_rounded_rect((CG::Path *)(Instance + 16), &v27, v28, transform);
    }
    return (CGPathRef)Instance;
  }
  v32.origin.x = x;
  v32.origin.y = y;
  v32.size.width = width;
  v32.size.height = height;
  return CGPathCreateWithRect(v32, transform);
}

void CGPathAddRoundedRect(CGMutablePathRef path, const CGAffineTransform *transform, CGRect rect, CGFloat cornerWidth, CGFloat cornerHeight)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double height;
  double width;
  CGFloat y;
  CGFloat x;
  CFTypeID v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  double v24;
  double v25;
  CG::Path *v26;
  CGRect v27;
  CGSize v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;

  if (path)
  {
    height = rect.size.height;
    width = rect.size.width;
    y = rect.origin.y;
    x = rect.origin.x;
    if (CGPathDisableTypeValidation || (v19 = CFGetTypeID(path), v19 == CGPathGetTypeID()))
    {
      {
        if (cornerWidth < 0.0)
          goto LABEL_21;
        v23 = height < 0.0 || width < 0.0;
        v24 = width;
        if (v23)
        {
          v29.origin.x = x;
          v29.origin.y = y;
          v29.size.width = width;
          v29.size.height = height;
          *(CGRect *)(&v24 - 2) = CGRectStandardize(v29);
        }
        if (cornerWidth + cornerWidth > v24)
LABEL_21:
          _CGHandleAssert("CGPathAddRoundedRect", 598, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Paths/CGPath.cc", "corner_width >= 0 && 2 * corner_width <= CGRectGetWidth(rect)", "corner width %f too big {o:{%f,%f}, s:{%f,%f}}", v20, v21, v22, SLOBYTE(cornerWidth));
        if (cornerHeight < 0.0)
          goto LABEL_22;
        v25 = height;
        if (v23)
        {
          v30.origin.x = x;
          v30.origin.y = y;
          v30.size.width = width;
          v30.size.height = height;
          *(CGRect *)(&v25 - 3) = CGRectStandardize(v30);
        }
        if (cornerHeight + cornerHeight > v25)
LABEL_22:
          _CGHandleAssert("CGPathAddRoundedRect", 599, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Paths/CGPath.cc", "corner_height >= 0 && 2 * corner_height <= CGRectGetHeight(rect)", "corner height %f too big {o:{%f,%f}, s:{%f,%f}}", v20, v21, v22, SLOBYTE(cornerHeight));
        v26 = (CGMutablePathRef)((char *)path + 16);
        v31.origin.x = x;
        v31.origin.y = y;
        v31.size.width = width;
        v31.size.height = height;
        v32 = CGRectStandardize(v31);
        if (cornerWidth == 0.0 || cornerHeight == 0.0)
        {
          v27 = v32;
          CG::Path::append_rect(v26, &v27, (float64x2_t *)transform);
        }
        else
        {
          v27 = v32;
          v28.width = cornerWidth;
          v28.height = cornerHeight;
          CG::Path::append_rounded_rect(v26, &v27, v28, transform);
        }
      }
    }
  }
}

void CG::Path::append_rounded_rect(CG::Path *this, const CGRect *a2, CGSize a3, const CGAffineTransform *a4)
{
  const CGAffineTransform *v7;
  double v8;
  CGFloat x;
  CGFloat y;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v15;
  float64x2_t v16;
  CGFloat v17;
  CGFloat v23;
  float64x2_t v24;
  double v25;
  double v26;
  CGPoint origin;
  double v30;
  double v31;
  float64x2_t v33;
  double v36;
  CGFloat v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double height;
  CGFloat v56;
  double width;
  double v58;
  CGPoint v59;
  CGPoint v60;
  CGAffineTransform v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;

  if (*(_DWORD *)this)
  {
    height = a3.height;
    width = a3.width;
    CG::Path::reserve_space(this, 18, 10);
    v8 = height;
    x = a2->origin.x;
    y = a2->origin.y;
    v61.c = 0.0;
    v61.d = 1.0;
    v61.tx = x;
    v61.ty = y;
    v11 = vmulq_n_f64((float64x2_t)0x3FF0000000000000uLL, width);
    v12 = vmulq_n_f64(*(float64x2_t *)&v61.c, height);
    *(float64x2_t *)&v61.a = v11;
    *(float64x2_t *)&v61.c = v12;
    if (a4)
    {
      _D2 = v61.tx;
      _Q6 = *(_OWORD *)&a4->a;
      v15 = *(float64x2_t *)&a4->c;
      v16 = vmlaq_n_f64(vmulq_laneq_f64(v15, v11, 1), *(float64x2_t *)&a4->a, v11.f64[0]);
      v17 = a4->tx + vmlad_n_f64(v61.ty * v15.f64[0], v61.tx, a4->a);
      __asm { FMLA            D3, D2, V6.D[1] }
      v23 = _D3 + a4->ty;
      v24 = vmlaq_n_f64(vmulq_laneq_f64(v15, v12, 1), *(float64x2_t *)&a4->a, v12.f64[0]);
      *(float64x2_t *)&v61.a = v16;
      *(float64x2_t *)&v61.c = v24;
      v61.tx = v17;
      v61.ty = v23;
    }
    v26 = a2->size.width;
    v25 = a2->size.height;
    if (v26 < 0.0 || v25 < 0.0)
    {
      v62.origin.x = x;
      v62.origin.y = y;
      v62.size.width = a2->size.width;
      v62.size.height = a2->size.height;
      v63 = CGRectStandardize(v62);
      v58 = v63.size.width / width;
      v63.origin.x = x;
      v63.origin.y = y;
      v63.size.width = v26;
      v63.size.height = v25;
      v64 = CGRectStandardize(v63);
      v8 = height;
      v25 = v64.size.height;
    }
    else
    {
      v58 = v26 / width;
    }
    v37 = v25 / v8;
    v56 = v25 / v8 * 0.5;
    v38.n128_f64[0] = v58;
    v38.n128_f64[1] = v56;
    CG::Path::move_to_point(this, (float64x2_t *)&v61, v7, v38);
    v60.x = v58;
    v60.y = v37;
    v59.x = v58 * 0.5;
    v59.y = v37;
    CG::Path::add_arc_to_point(this, &v60, &v59, 1.0, &v61, v39, v40, v41, v42);
    v60.x = 0.0;
    v60.y = v37;
    v59.x = 0.0;
    v59.y = v56;
    CG::Path::add_arc_to_point(this, &v60, &v59, 1.0, &v61, v43, v44, v45, v46);
    v60.x = 0.0;
    v60.y = 0.0;
    v59.x = v58 * 0.5;
    v59.y = 0.0;
    CG::Path::add_arc_to_point(this, &v60, &v59, 1.0, &v61, v47, v48, v49, v50);
    v60.x = v58;
    v60.y = 0.0;
    v59.x = v58;
    v59.y = v56;
    CG::Path::add_arc_to_point(this, &v60, &v59, 1.0, &v61, v51, v52, v53, v54);
    CG::Path::close_subpath(this);
  }
  else
  {
    origin = a2->origin;
    _D4 = a2->size.width;
    _D2 = a2->size.height;
    v30 = a3.width / _D4;
    *(_DWORD *)this = 2;
    v31 = a3.height / _D2;
    if (a4)
    {
      _Q7 = *(_OWORD *)&a4->a;
      v33 = *(float64x2_t *)&a4->c;
      _D18 = 0;
      __asm { FMLA            D6, D4, V7.D[1] }
      v36 = vmlad_n_f64(_D2 * v33.f64[0], 0.0, a4->a);
      __asm { FMLA            D2, D18, V7.D[1] }
      origin = (CGPoint)vaddq_f64(*(float64x2_t *)&a4->tx, vmlaq_n_f64(vmulq_laneq_f64(v33, (float64x2_t)origin, 1), *(float64x2_t *)&a4->a, origin.x));
      _D4 = vmlad_n_f64(0.0 * v33.f64[0], _D4, a4->a);
    }
    else
    {
      v36 = 0.0;
      _D6 = 0;
    }
    *((double *)this + 1) = _D4;
    *((_QWORD *)this + 2) = _D6;
    *((double *)this + 3) = v36;
    *((double *)this + 4) = _D2;
    *(CGPoint *)((char *)this + 40) = origin;
    *((double *)this + 7) = v30;
    *((double *)this + 8) = v31;
  }
}

CGFloat CGRectGetMinY(CGRect rect)
{
  if (rect.size.width < 0.0 || rect.size.height < 0.0)
    rect = CGRectStandardize(rect);
  return rect.origin.y;
}

CGFloat CGRectGetHeight(CGRect rect)
{
  if (rect.size.width < 0.0 || rect.size.height < 0.0)
    rect = CGRectStandardize(rect);
  return rect.size.height;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  if (rect.size.width < 0.0 || rect.size.height < 0.0)
    *(_QWORD *)&rect.origin.x = (unint64_t)CGRectStandardize(rect);
  return rect.origin.x;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  if (rect.size.width < 0.0 || rect.size.height < 0.0)
    rect = CGRectStandardize(rect);
  return rect.size.width;
}

void CGContextStrokeEllipseInRect(CGContextRef c, CGRect rect)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  CGContextRef v18;
  const void *v19;
  CGRect v20;

  if (!c)
  {
    v18 = 0;
LABEL_23:
    handle_invalid_context((char)"CGContextStrokeEllipseInRect", (uint64_t)v18, v2, v3, v4, v5, v6, v7);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v18 = c;
    goto LABEL_23;
  }
  height = rect.size.height;
  width = rect.size.width;
  y = rect.origin.y;
  x = rect.origin.x;
  if (rect.origin.x != INFINITY && rect.origin.y != INFINITY)
  {
    v19 = (const void *)*((_QWORD *)c + 21);
    if (v19)
    {
      CFRelease(v19);
      *((_QWORD *)c + 21) = 0;
    }
    v20.origin.x = x;
    v20.origin.y = y;
    v20.size.width = width;
    v20.size.height = height;
    CGContextAddEllipseInRect(c, v20);
    CGContextDrawPath(c, kCGPathStroke);
  }
}

void CGContextFillEllipseInRect(CGContextRef c, CGRect rect)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  CGContextRef v18;
  const void *v19;
  CGRect v20;

  if (!c)
  {
    v18 = 0;
LABEL_23:
    handle_invalid_context((char)"CGContextFillEllipseInRect", (uint64_t)v18, v2, v3, v4, v5, v6, v7);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v18 = c;
    goto LABEL_23;
  }
  height = rect.size.height;
  width = rect.size.width;
  y = rect.origin.y;
  x = rect.origin.x;
  if (rect.origin.x != INFINITY && rect.origin.y != INFINITY)
  {
    v19 = (const void *)*((_QWORD *)c + 21);
    if (v19)
    {
      CFRelease(v19);
      *((_QWORD *)c + 21) = 0;
    }
    v20.origin.x = x;
    v20.origin.y = y;
    v20.size.width = width;
    v20.size.height = height;
    CGContextAddEllipseInRect(c, v20);
    CGContextDrawPath(c, kCGPathFill);
  }
}

void CGContextAddEllipseInRect(CGContextRef c, CGRect rect)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  CGPath *v15;
  CGContextRef v16;

  if (!c)
  {
    v16 = 0;
LABEL_23:
    handle_invalid_context((char)"CGContextAddEllipseInRect", (uint64_t)v16, v2, v3, v4, v5, v6, v7);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v16 = c;
    goto LABEL_23;
  }
  if (rect.origin.x != INFINITY && rect.origin.y != INFINITY)
  {
    v14 = *((_QWORD *)c + 12);
    v15 = (CGPath *)*((_QWORD *)c + 21);
    if (v15)
      CGPathAddEllipseInRect(v15, (const CGAffineTransform *)(v14 + 24), rect);
    else
      *((_QWORD *)c + 21) = CGPathCreateWithEllipseInRect(rect, (const CGAffineTransform *)(v14 + 24));
  }
}

CGPathRef CGPathCreateWithEllipseInRect(CGRect rect, const CGAffineTransform *transform)
{
  const CGAffineTransform *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  CFTypeID TypeID;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Instance;
  CGRect v23;
  CGRect v24;

  height = rect.size.height;
  width = rect.size.width;
  y = rect.origin.y;
  x = rect.origin.x;
    return 0;
  TypeID = CGPathGetTypeID();
  Instance = CGTypeCreateInstance(TypeID, 88, v15, v16, v17, v18, v19, v20);
  if (Instance)
  {
    v24.origin.x = x;
    v24.origin.y = y;
    v24.size.width = width;
    v24.size.height = height;
    v23 = CGRectStandardize(v24);
    CG::Path::append_ellipse((CG::Path *)(Instance + 16), &v23, 1, 0, transform);
  }
  return (CGPathRef)Instance;
}

uint64_t img_blocks_extent(_QWORD *a1, int *a2)
{
  uint64_t result;
  int *v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD v9[2];

  if (a1[23])
    return 0;
  v5 = (int *)a1[19];
  v9[0] = 0;
  v9[1] = 0;
  if (v5)
  {
    if (a2)
    {
      v6 = CGSBoundsIntersection(a2, v5, v9);
      a2 = (int *)v9;
      if (!v6)
        return 0xFFFFFFFFLL;
    }
    else
    {
      a2 = v5;
    }
  }
  v7 = img_blocks_create(a1[18], 0, a2, 0);
  if (v7)
  {
    v8 = v7;
    result = 0;
    a1[23] = v8;
    a1[11] = 0;
    return result;
  }
  return 0xFFFFFFFFLL;
}

_QWORD *img_blocks_create(uint64_t a1, CGFloat *a2, int *a3, uint64_t a4)
{
  uint64_t v4;
  CGFloat *v7;
  CGFloat *v8;
  double v9;
  double v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  _OWORD *v45;
  unsigned int v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;

  if (!a1)
    return 0;
  v4 = a4;
  v7 = a2 + 1;
  v8 = (CGFloat *)(a1 + 16);
  if (a2)
    v8 = a2;
  else
    v7 = (CGFloat *)(a1 + 24);
  v9 = *v7;
  v10 = *v8;
  if (!a3)
  {
    if (!a4)
      goto LABEL_13;
LABEL_9:
    if (img_blocks_options_predicate != -1)
      dispatch_once(&img_blocks_options_predicate, &__block_literal_global_63);
    if (img_blocks_options_options_singleton)
    {
      v11 = CGImageProviderCopyImageBlockSetWithOptions(a1, img_blocks_options_options_singleton);
      if (v11)
        goto LABEL_14;
    }
    goto LABEL_13;
  }
  v49.origin.x = (double)*a3;
  v49.origin.y = (double)a3[1];
  v49.size.width = (double)a3[2];
  v49.size.height = (double)a3[3];
  v47.origin.x = 0.0;
  v47.origin.y = 0.0;
  v47.size.width = *v8;
  v47.size.height = *v7;
  CGRectIntersection(v47, v49);
  if (v4)
    goto LABEL_9;
LABEL_13:
  v11 = CGImageProviderCopyImageBlockSetWithOptions(a1, 0);
  v4 = 0;
  v12 = 0;
  if (!v11)
    return v12;
LABEL_14:
  v13 = *(_QWORD *)(v11 + 120);
  if (!v13)
  {
    CGImageBlockSetRelease(v11);
    v43 = "%s: Assertion failed - empty image block set ";
LABEL_47:
    CGPostError((uint64_t)v43, v36, v37, v38, v39, v40, v41, v42, (char)"img_blocks_create");
    return 0;
  }
  v14 = malloc_type_malloc(32 * v13 + 96, 0x8C10942CuLL);
  if (!v14)
  {
    CGImageBlockSetRelease(v11);
    v43 = "%s: Cannot allocate memory";
    goto LABEL_47;
  }
  v12 = v14;
  *v14 = v11;
  v14[1] = v4;
  v14[4] = *(_QWORD *)(v11 + 72);
  if (a2)
  {
    v9 = *(double *)(v11 + 24);
    v10 = *(double *)(v11 + 16);
  }
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v14[2] = (int)vcvtpd_s64_f64(v10);
  v14[3] = (int)vcvtpd_s64_f64(v9);
  v45 = v14 + 7;
  v21 = (uint64_t)&v14[2 * v13 + 12];
  v14[8] = 0;
  v14[9] = v14 + 12;
  v14[10] = v21;
  v14[11] = v21 + 8 * v13;
  v46 = vcvtpd_s64_f64(*(double *)(v11 + 48));
  do
  {
    if (*(_QWORD *)(v11 + 120) <= v18 || (v22 = *(_QWORD *)(v11 + 8 * v18 + 128)) == 0)
    {
      v29 = a1;
      v30 = v11;
      v31 = v18;
      v32 = 0;
      v33 = "Null block";
      goto LABEL_27;
    }
    v23 = *(_QWORD *)v22;
    *(_QWORD *)(v12[10] + 8 * v19) = *(_QWORD *)v22;
    if (!v23)
    {
      v29 = a1;
      v30 = v11;
      v31 = v18;
      v32 = v22;
      v33 = "Null data pointer";
      goto LABEL_27;
    }
    v24 = (unint64_t *)(v12[9] + 16 * v19);
    v48 = CGRectIntegral(*(CGRect *)(v22 + 8));
    *v24 = (int)v48.origin.x | ((unint64_t)(int)v48.origin.y << 32);
    v24[1] = (int)v48.size.width | ((unint64_t)(int)v48.size.height << 32);
    v25 = (_OWORD *)v12[9];
    v26 = &v25[v19];
    v27 = *((int *)v26 + 2);
    if ((v27 & 0x80000000) != 0 || (*((_DWORD *)v26 + 3) & 0x80000000) != 0)
    {
      v29 = a1;
      v30 = v11;
      v31 = v18;
      v32 = v22;
      v33 = "Invalid size";
      goto LABEL_27;
    }
    v28 = *(_QWORD *)(v22 + 40);
    *(_QWORD *)(v12[11] + 8 * v19) = v28;
    if (v28 < v12[4] * v27)
    {
      v29 = a1;
      v30 = v11;
      v31 = v18;
      v32 = v22;
      v33 = "Invalid bytes-per-row";
LABEL_27:
      img_blocks_error(v29, v30, v31, v32, (uint64_t)v33, v15, v16, v17);
      goto LABEL_28;
    }
    if ((int)v27 >= 0 && v27 >= v46)
      ++v20;
    if (v19)
    {
      v12[7] = CGSBoundsUnion(v12[7], v12[8], *(_QWORD *)&v25[v19], *((_QWORD *)&v25[v19] + 1));
      v12[8] = v35;
    }
    else
    {
      *v45 = *v25;
    }
    ++v19;
LABEL_28:
    ++v18;
  }
  while (v13 != v18);
  v12[5] = v19;
  v12[6] = v20;
  if (!v19 || *((int *)v12 + 16) < 1 || *((int *)v12 + 17) <= 0)
  {
    CGImageBlockSetRelease(v11);
    free(v12);
    v43 = "%s: Assertion failed - image block set contains no usable blocks";
    goto LABEL_47;
  }
  return v12;
}

char *CGImageBlockSetCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, double a6, double a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11)
{
  int v12;

  if (a1)
    v12 = *(_DWORD *)(a1 + 36);
  else
    v12 = 0;
  return CGImageBlockSetCreateWithBitmapInfo(a1, 0, v12, 0, 0, a2, a3, a4, a6, a7, a8, a9, a10, a11, a5);
}

CGImageRef CGImageCreateWithImageInRect(CGImageRef image, CGRect rect)
{
  double v3;
  double v4;
  double x;
  uint64_t v7;
  double y;
  double width;
  double height;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  CGDataProvider *v34;
  CGDataProvider *v35;
  CGImageRef v36;
  uint64x2_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *DataProviderInternal;
  CGDataProviderRef Partial;
  CGDataProvider *v44;
  CGBitmapInfo v45;
  unsigned int v46;
  size_t v47;
  unint64_t v48;
  CGColorSpaceRef ColorSpace;
  unint64_t v50;
  const CGFloat *v51;
  BOOL shouldInterpolate;
  CGColorRenderingIntent intent;
  CGColorSpace *v54;
  uint64_t v55;
  char *Mask;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  double v62;
  double v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const void *v72;
  uint64_t v73;
  char *v74;
  CGDataProviderRef v75;
  CGDataProvider *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  double *v80;
  _BOOL8 v81;
  __CFData *v82;
  unsigned int v83;
  uint64_t v84;
  char *v85;
  CGDataProviderRef v86;
  size_t v87;
  unsigned int v88;
  CGColorSpace *v89;
  const CGFloat *v90;
  size_t v91;
  BOOL v92;
  CGColorRenderingIntent RenderingIntent;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t *v103;
  uint64_t v104;
  CGImageRef v105;
  double v106;
  CGFloat *decode;
  size_t v108;
  size_t v109;
  size_t v110;
  CGBitmapInfo v111[2];
  CGBitmapInfo v112;
  CGBitmapInfo bitmapInfoa;
  CGBitmapInfo bitmapInfo[2];
  uint64_t v115;
  size_t v116;
  int v117[2];
  CGRect v118;
  CGRect v119;
  CGRect v120;
  CGRect v121;
  CGRect v122;
  CGRect v123;
  CGRect v124;
  CGRect v125;
  CGRect v126;
  CGRect v127;
  CGRect v128;
  CGRect v129;
  CGRect v130;
  CGRect v131;
  CGRect v132;
  CGRect v133;
  CGRect v134;
  CGRect v135;
  CGRect v136;

  if (!image || *((_QWORD *)image + 24))
    return 0;
  v3 = (double)*((unint64_t *)image + 5);
  v4 = (double)*((unint64_t *)image + 6);
  v118 = CGRectIntegral(rect);
  v135.origin.x = 0.0;
  v135.origin.y = 0.0;
  v135.size.width = v3;
  v135.size.height = v4;
  v119 = CGRectIntersection(v118, v135);
  x = v119.origin.x;
  if (v119.origin.x == INFINITY || v119.origin.y == INFINITY)
    return 0;
  y = v119.origin.y;
  width = v119.size.width;
  height = v119.size.height;
  v136.origin.x = 0.0;
  v136.origin.y = 0.0;
  v136.size.width = v3;
  v136.size.height = v4;
  if (CGRectEqualToRect(v119, v136))
  {
    CFRetain(image);
    return image;
  }
  if ((*((_BYTE *)image + 39) & 2) == 0)
  {
    v13 = height < 0.0 || width < 0.0;
    if (v13)
    {
      v120.origin.x = x;
      v120.origin.y = y;
      v120.size.width = width;
      v120.size.height = height;
      v121 = CGRectStandardize(v120);
      v14 = (unint64_t)v121.size.width;
      v121.origin.x = x;
      v121.origin.y = y;
      v121.size.width = width;
      v121.size.height = height;
      v122 = CGRectStandardize(v121);
      v15 = (unint64_t)v122.size.height;
      v122.origin.x = x;
      v122.origin.y = y;
      v122.size.width = width;
      v122.size.height = height;
      v115 = (unint64_t)COERCE_DOUBLE(CGRectStandardize(v122));
      v123.origin.x = x;
      v123.origin.y = y;
      v123.size.width = width;
      v123.size.height = height;
      v124 = CGRectStandardize(v123);
      v16 = v124.origin.y;
    }
    else
    {
      v14 = (unint64_t)width;
      v15 = (unint64_t)height;
      v16 = y;
      v115 = (unint64_t)x;
    }
    v20 = *((_QWORD *)image + 26);
    if (v20)
    {
      v21 = CGImageProviderCreateWithImageProviderInRect(v20, *((_QWORD *)image + 18), x, y, width, height);
      if (!v21)
        return 0;
      v26 = (const void *)v21;
      v7 = CGImageCreateWithImageProvider(v21, *((double **)image + 20), HIBYTE(*((_DWORD *)image + 9)) & 1, ((__int16)*((_DWORD *)image + 9) >> 8), v22, v23, v24, v25);
      CFRelease(v26);
    }
    else
    {
      *(_QWORD *)v117 = *((_QWORD *)image + 9);
      if ((*((_DWORD *)image + 8) & 0x7000) == 0x2000)
      {
        v38 = 4;
      }
      else if ((*((_DWORD *)image + 8) & 0x7000) == 0x1000)
      {
        v38 = 2;
      }
      else
      {
        v38 = 1;
      }
      v116 = v38;
      if (v13)
      {
        v130.origin.x = x;
        v130.origin.y = y;
        v130.size.width = width;
        v130.size.height = height;
        v131 = CGRectStandardize(v130);
        v39 = (unint64_t)v131.size.width;
        v131.origin.x = x;
        v131.origin.y = y;
        v131.size.width = width;
        v131.size.height = height;
        v132 = CGRectStandardize(v131);
        v40 = (unint64_t)v132.size.height;
        v132.origin.x = x;
        v132.origin.y = y;
        v132.size.width = width;
        v132.size.height = height;
        v41 = (unint64_t)COERCE_DOUBLE(CGRectStandardize(v132));
        v133.origin.x = x;
        v133.origin.y = y;
        v133.size.width = width;
        v133.size.height = height;
        v134 = CGRectStandardize(v133);
        y = v134.origin.y;
      }
      else
      {
        v39 = (unint64_t)width;
        v40 = (unint64_t)height;
        v41 = (unint64_t)x;
      }
      DataProviderInternal = CGImageGetDataProviderInternal((char *)image, 0);
      Partial = CGDataProviderCreatePartial((uint64_t)DataProviderInternal, v41, (unint64_t)y, v39, v40, *((_QWORD *)image + 8), (unint64_t *)v117, (uint64_t *)&v116);
      if (!Partial)
        return 0;
      v44 = Partial;
      v45 = CGImageGetBitmapInfo(image);
      if (v116 == 1)
        v46 = v45 & 0xFFFF8FFF;
      else
        v46 = v45;
      bitmapInfoa = v46;
      v47 = *((_QWORD *)image + 8);
      v109 = *(_QWORD *)v117;
      *(_QWORD *)v111 = *((_QWORD *)image + 7);
      v48 = v14;
      ColorSpace = CGImageGetColorSpace(image);
      v50 = v15;
      v51 = CGImageGetDecode(image);
      shouldInterpolate = CGImageGetShouldInterpolate(image);
      intent = CGImageGetRenderingIntent(image);
      decode = (CGFloat *)v51;
      v15 = v50;
      v54 = ColorSpace;
      v14 = v48;
      v7 = (uint64_t)CGImageCreate(v39, v40, *(size_t *)v111, v47, v109, v54, bitmapInfoa, v44, decode, shouldInterpolate, intent);
      CGDataProviderRelease(v44);
    }
    CGImageCopyHeadroomFromOriginal((uint64_t *)v7, image, v27, v28, v29, v30, v31, v32);
    if (!v7)
      return (CGImageRef)v7;
    v55 = (unint64_t)v16;
    Mask = (char *)CGImageGetMask(image);
    if (!Mask)
    {
LABEL_80:
      if (!*((_QWORD *)image + 21))
      {
LABEL_88:
        *(_DWORD *)(v7 + 36) = *(_DWORD *)(v7 + 36) & 0xF7FFFFFF | (((*((_DWORD *)image + 9) >> 27) & 1) << 27);
        if (!*((_QWORD *)image + 23))
        {
LABEL_96:
          if (*((_QWORD *)image + 30))
            v105 = (CGImageRef)*((_QWORD *)image + 30);
          else
            v105 = image;
          if (v105)
            CFRetain(v105);
          *(_QWORD *)(v7 + 240) = v105;
          v106 = *((double *)image + 32) + (double)(unint64_t)v55;
          *(double *)(v7 + 248) = *((double *)image + 31) + (double)(unint64_t)v115;
          *(double *)(v7 + 256) = v106;
          *(_BYTE *)(v7 + 38) = *((_WORD *)image + 19);
          return (CGImageRef)v7;
        }
        v100 = *(_QWORD *)(v7 + 144);
        if (v100)
          v101 = *(_QWORD *)(*(_QWORD *)(v100 + 24) + 40);
        else
          v101 = 0;
        v102 = malloc_type_malloc(8 * v101, 0x705560E0uLL);
        *(_QWORD *)(v7 + 184) = v102;
        if (v102)
        {
          if (v101)
          {
            v103 = (uint64_t *)*((_QWORD *)image + 23);
            do
            {
              v104 = *v103++;
              *v102++ = v104;
              --v101;
            }
            while (v101);
          }
          goto LABEL_96;
        }
        goto LABEL_102;
      }
      v94 = *(_QWORD *)(v7 + 144);
      if (v94)
        v95 = *(_QWORD *)(*(_QWORD *)(v94 + 24) + 40);
      else
        v95 = 0;
      v96 = malloc_type_malloc(16 * v95, 0x705560E0uLL);
      *(_QWORD *)(v7 + 168) = v96;
      if (v96)
      {
        v97 = 2 * v95;
        if (2 * v95)
        {
          v98 = (uint64_t *)*((_QWORD *)image + 21);
          do
          {
            v99 = *v98++;
            *v96++ = v99;
            --v97;
          }
          while (v97);
        }
        goto LABEL_88;
      }
LABEL_102:
      CFRelease((CFTypeRef)v7);
      return 0;
    }
    v57 = Mask;
    v58 = *((_QWORD *)image + 5);
    v59 = *((_QWORD *)Mask + 5);
    if (v58 == v59)
    {
      v60 = *((_QWORD *)image + 6);
      v61 = *((_QWORD *)Mask + 6);
      if (v60 == v61)
        goto LABEL_60;
    }
    else
    {
      v61 = *((_QWORD *)Mask + 6);
      v60 = *((_QWORD *)image + 6);
    }
    v62 = (double)v59 / (double)v58;
    v63 = (double)v61 / (double)v60;
    v64 = vcvtpd_u64_f64(v62 * (double)(v115 + v14));
    if (v59 >= v64)
      v14 = v64;
    else
      v14 = *((_QWORD *)Mask + 5);
    v65 = vcvtpd_u64_f64(v63 * (double)(v55 + v15));
    v115 = vcvtmd_u64_f64(v62 * (double)(unint64_t)v115);
    if (v61 >= v65)
      v15 = v65;
    else
      v15 = v61;
    v55 = vcvtmd_u64_f64(v63 * (double)(unint64_t)v55);
LABEL_60:
    *(_QWORD *)v117 = 0;
    if ((Mask[39] & 2) != 0)
    {
      v116 = *((_QWORD *)Mask + 9);
      *(_QWORD *)v117 = 1;
      v74 = CGImageGetDataProviderInternal(Mask, 0);
      v75 = CGDataProviderCreatePartial((uint64_t)v74, v115, v55, v14, v15, *((_QWORD *)v57 + 8), &v116, (uint64_t *)v117);
      if (!v75)
        goto LABEL_102;
      v76 = v75;
      *(_QWORD *)bitmapInfo = v55;
      v77 = *((_QWORD *)v57 + 7);
      v78 = *((_QWORD *)v57 + 8);
      v79 = *((_QWORD *)v57 + 9);
      v80 = (double *)CGImageGetDecode((CGImageRef)v57);
      v81 = CGImageGetShouldInterpolate((CGImageRef)v57);
      v82 = mask_create(v14, v15, v77, v78, v79, v76, v80, v81, 4);
    }
    else
    {
      v66 = *((_QWORD *)Mask + 26);
      if (v66)
      {
        v67 = CGImageProviderCreateWithImageProviderInRect(v66, *((_QWORD *)v57 + 18), (double)(unint64_t)v115, (double)(unint64_t)v55, (double)v14, (double)v15);
        if (!v67)
          goto LABEL_102;
        v72 = (const void *)v67;
        *(_QWORD *)bitmapInfo = v55;
        v73 = CGImageCreateWithImageProvider(v67, *((double **)v57 + 20), HIBYTE(*((_DWORD *)v57 + 9)) & 1, ((__int16)*((_DWORD *)v57 + 9) >> 8), v68, v69, v70, v71);
        CFRelease(v72);
        goto LABEL_78;
      }
      v83 = *((_DWORD *)v57 + 8);
      v116 = *((_QWORD *)v57 + 9);
      if ((v83 & 0x7000) == 0x2000)
      {
        v84 = 4;
      }
      else if ((v83 & 0x7000) == 0x1000)
      {
        v84 = 2;
      }
      else
      {
        v84 = 1;
      }
      *(_QWORD *)v117 = v84;
      v85 = CGImageGetDataProviderInternal(v57, 0);
      v86 = CGDataProviderCreatePartial((uint64_t)v85, v115, v55, v14, v15, *((_QWORD *)v57 + 8), &v116, (uint64_t *)v117);
      if (!v86)
        goto LABEL_102;
      v76 = v86;
      *(_QWORD *)bitmapInfo = v55;
      v87 = v116;
      if (*(_QWORD *)v117 >= 2uLL)
        v88 = v83;
      else
        v88 = v83 & 0xFFFF8FFF;
      v112 = v88;
      v108 = *((_QWORD *)v57 + 8);
      v110 = *((_QWORD *)v57 + 7);
      v89 = CGImageGetColorSpace((CGImageRef)v57);
      v90 = CGImageGetDecode((CGImageRef)v57);
      v91 = v14;
      v92 = CGImageGetShouldInterpolate((CGImageRef)v57);
      RenderingIntent = CGImageGetRenderingIntent((CGImageRef)v57);
      v82 = CGImageCreate(v91, v15, v110, v108, v87, v89, v112, v76, v90, v92, RenderingIntent);
    }
    v73 = (uint64_t)v82;
    CGDataProviderRelease(v76);
LABEL_78:
    if (!v73)
      goto LABEL_102;
    *(_QWORD *)(v7 + 176) = v73;
    v55 = *(_QWORD *)bitmapInfo;
    goto LABEL_80;
  }
  if (width < 0.0 || height < 0.0)
  {
    v125.origin.x = x;
    v125.origin.y = y;
    v125.size.width = width;
    v125.size.height = height;
    v126 = CGRectStandardize(v125);
    v17 = (unint64_t)v126.size.width;
    v126.origin.x = x;
    v126.origin.y = y;
    v126.size.width = width;
    v126.size.height = height;
    v127 = CGRectStandardize(v126);
    v18 = (unint64_t)v127.size.height;
    v127.origin.x = x;
    v127.origin.y = y;
    v127.size.width = width;
    v127.size.height = height;
    v19 = (unint64_t)COERCE_DOUBLE(CGRectStandardize(v127));
    v128.origin.x = x;
    v128.origin.y = y;
    v128.size.width = width;
    v128.size.height = height;
    v129 = CGRectStandardize(v128);
    y = v129.origin.y;
  }
  else
  {
    v17 = (unint64_t)width;
    v18 = (unint64_t)height;
    v19 = (unint64_t)x;
  }
  v116 = 1;
  v33 = *((_QWORD *)image + 8);
  *(_QWORD *)v117 = *((_QWORD *)image + 9);
  v34 = CGDataProviderCreatePartial(*((_QWORD *)image + 19), v19, (unint64_t)y, v17, v18, v33, (unint64_t *)v117, (uint64_t *)&v116);
  if (!v34)
    return 0;
  v35 = v34;
  v7 = (uint64_t)mask_create(v17, v18, *((_QWORD *)image + 7), *((_QWORD *)image + 8), *(unint64_t *)v117, v34, *((double **)image + 20), HIBYTE(*((_DWORD *)image + 9)) & 1, 4);
  CGDataProviderRelease(v35);
  if (v7)
  {
    if (*((_QWORD *)image + 30))
      v36 = (CGImageRef)*((_QWORD *)image + 30);
    else
      v36 = image;
    if (v36)
      CFRetain(v36);
    *(_QWORD *)(v7 + 240) = v36;
    v37.i64[0] = v19;
    v37.i64[1] = (unint64_t)y;
    *(float64x2_t *)(v7 + 248) = vaddq_f64(*(float64x2_t *)((char *)image + 248), vcvtq_f64_u64(v37));
  }
  return (CGImageRef)v7;
}

uint64_t CGImageProviderCreateWithImageProviderInRect(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  CGFloat v8;
  CGFloat v9;
  CGFloat x;
  uint64_t Instance;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;

  if (!a1)
    return 0;
  v9 = *(double *)(a1 + 16);
  v8 = *(double *)(a1 + 24);
  v40 = CGRectIntegral(*(CGRect *)&a3);
  v38.origin.x = 0.0;
  v38.origin.y = 0.0;
  v38.size.width = v9;
  v38.size.height = v8;
  v39 = CGRectIntersection(v38, v40);
  x = v39.origin.x;
  if (v39.origin.x == INFINITY || v39.origin.y == INFINITY)
    return 0;
  y = v39.origin.y;
  width = v39.size.width;
  height = v39.size.height;
  v41.origin.x = 0.0;
  v41.origin.y = 0.0;
  v41.size.width = v9;
  v41.size.height = v8;
  if (CGRectEqualToRect(v39, v41))
  {
    CFRetain((CFTypeRef)a1);
    return a1;
  }
  else
  {
    if (kCGImageProviderContentHeadroom_block_invoke_once != -1)
      dispatch_once(&kCGImageProviderContentHeadroom_block_invoke_once, &__block_literal_global_69_3132);
    Instance = CGTypeCreateInstance(CGImageProviderGetTypeID_image_provider_type_id, 168, v18, v19, v20, v21, v22, v23);
    if (Instance)
    {
      v24 = *(const void **)(a1 + 40);
      if (a2 && !CGColorSpaceEqualToColorSpace(a2, *(_QWORD *)(a1 + 40)))
      {
        CGLog(1, (uint64_t)"%s: Given colorspace does not match source colorspace.", v25, v26, v27, v28, v29, v30, (char)"CGImageProviderRef CGImageProviderCreateWithImageProviderInRect(CGImageProviderRef, CGRect, CGColorSpaceRef)");
        v24 = (const void *)a2;
      }
      *(CGFloat *)(Instance + 16) = width;
      *(CGFloat *)(Instance + 24) = height;
      *(_QWORD *)(Instance + 48) = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(Instance + 56) = Instance;
      *(_QWORD *)(Instance + 32) = *(_QWORD *)(a1 + 32);
      if (v24)
        CFRetain(v24);
      *(_QWORD *)(Instance + 40) = v24;
      *(_OWORD *)(Instance + 64) = subImageProviderCallbacks;
      *(_QWORD *)(Instance + 80) = subImageProviderReleaseInfo;
      *(_QWORD *)(Instance + 112) = 0;
      *(_WORD *)(Instance + 128) = 256;
      CFRetain((CFTypeRef)a1);
      *(_QWORD *)(Instance + 144) = a1;
      *(CGFloat *)(Instance + 152) = x;
      *(CGFloat *)(Instance + 160) = y;
      *(CGFloat *)(Instance + 168) = width;
      *(CGFloat *)(Instance + 176) = height;
      *(_DWORD *)(Instance + 132) = *(_DWORD *)(a1 + 132);
      *(_QWORD *)(Instance + 136) = create_debug_string(Instance, v31, v32, v33, v34, v35, v36, v37);
    }
  }
  return Instance;
}

uint64_t CGImageProviderCreate(int a1, _QWORD *a2, uint64_t a3, uint64_t a4, CFDictionaryRef theDict, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v22;
  const __CFNumber *Value;
  BOOL v24;
  const void *v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t Instance;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  BOOL v42;
  int Float;
  float v44;
  char v45;
  int valuePtr;
  double v47;

  v10 = 0;
  if (a2 && a4)
  {
    if (a9 >= 1.0 && a9 == (double)(unint64_t)a9 && a10 >= 1.0 && a10 == (double)(unint64_t)a10)
    {
      switch(*(_DWORD *)a4)
      {
        case 0:
        case 1:
        case 2:
        case 3:
          if (!*(_QWORD *)(a4 + 8))
            return 0;
          v22 = *(_QWORD *)(a2[3] + 40);
          valuePtr = 0;
          if (theDict)
          {
            if (CFDictionaryContainsKey(theDict, CFSTR("kCGImageProviderBitmapInfo")))
            {
              Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("kCGImageProviderBitmapInfo"));
              CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
              v24 = 1;
            }
            else
            {
              v25 = CFDictionaryGetValue(theDict, CFSTR("kCGImageProviderAlphaIsOne"));
              v24 = v25 != 0;
              if (v25)
              {
                v26 = 5;
              }
              else if (CFDictionaryGetValue(theDict, CFSTR("kCGImageProviderAlphaIsPremultiplied")))
              {
                v26 = 1;
              }
              else if (CFDictionaryGetValue(theDict, CFSTR("kCGImageProviderAlphaIsNotPremultiplied")))
              {
                v26 = 3;
              }
              else
              {
                v26 = 0;
              }
              valuePtr = v26;
            }
            if (CFDictionaryContainsKey(theDict, CFSTR("kCGImageProviderBitmapInfo")))
              goto LABEL_41;
          }
          else
          {
            v24 = 0;
          }
          switch(a1)
          {
            case 1:
              goto LABEL_41;
            case 2:
              v27 = valuePtr;
              goto LABEL_38;
            case 3:
              v28 = valuePtr | 0x2000;
              break;
            case 4:
              v28 = valuePtr | 0x2100;
              break;
            case 5:
              v27 = valuePtr | 0x100;
LABEL_38:
              v28 = v27 | 0x1000;
              break;
            case 6:
              v28 = 204806;
              break;
            default:
              CGPostError((uint64_t)"%s: invalid image componenttype %d.", (uint64_t)a2, a3, a4, (uint64_t)theDict, a6, a7, a8, (char)"CGImageProviderCreate");
              return 0;
          }
          valuePtr = v28;
LABEL_41:
          if ((valuePtr & 0x1F) != 0)
            v29 = v22 + 1;
          else
            v29 = v22;
          v30 = *(_DWORD *)(a2[3] + 24);
          if (v30 > 7)
            goto LABEL_52;
          if (((1 << v30) & 0x97) != 0)
            goto LABEL_46;
          if (((1 << v30) & 0x28) == 0)
          {
LABEL_52:
            CGPostError((uint64_t)"%s: unsupported image provider color space model.", (uint64_t)a2, a3, a4, (uint64_t)theDict, a6, a7, a8, (char)"CGImageProviderCreate");
            return 0;
          }
          if ((valuePtr & 0x1Fu) - 1 <= 1)
          {
            CGPostError((uint64_t)"%s: unsupported image provider color space and alpha combination.", (uint64_t)a2, a3, a4, (uint64_t)theDict, a6, a7, a8, (char)"CGImageProviderCreate");
            return 0;
          }
LABEL_46:
          switch(a1)
          {
            case 1:
              goto LABEL_56;
            case 2:
            case 5:
              v29 *= 2;
              goto LABEL_56;
            case 3:
            case 4:
              v29 *= 4;
              goto LABEL_56;
            case 6:
              if (v30 != 1)
              {
                CGPostError((uint64_t)"%s: invalid image provider component type color space type combination.", (uint64_t)a2, a3, a4, (uint64_t)theDict, a6, a7, a8, (char)"CGImageProviderCreate");
                return 0;
              }
              v29 = 4;
LABEL_56:
              if (kCGImageProviderContentHeadroom_block_invoke_once != -1)
                dispatch_once(&kCGImageProviderContentHeadroom_block_invoke_once, &__block_literal_global_69_3132);
              Instance = CGTypeCreateInstance(CGImageProviderGetTypeID_image_provider_type_id, 128, a3, a4, (uint64_t)theDict, a6, a7, a8);
              v10 = Instance;
              if (Instance)
              {
                *(double *)(Instance + 16) = a9;
                *(double *)(Instance + 24) = a10;
                v32 = valuePtr;
                *(_DWORD *)(Instance + 32) = a1;
                *(_DWORD *)(Instance + 36) = v32;
                CFRetain(a2);
                *(_QWORD *)(v10 + 40) = a2;
                *(_QWORD *)(v10 + 48) = v29;
                *(_QWORD *)(v10 + 56) = a3;
                *(_DWORD *)(v10 + 64) = *(_DWORD *)a4;
                switch(*(_DWORD *)a4)
                {
                  case 0:
                  case 1:
                    v40 = *(_OWORD *)a4;
                    *(_QWORD *)(v10 + 80) = *(_QWORD *)(a4 + 16);
                    goto LABEL_64;
                  case 2:
                    v40 = *(_OWORD *)a4;
                    v41 = *(_OWORD *)(a4 + 16);
                    goto LABEL_63;
                  case 3:
                    v40 = *(_OWORD *)a4;
                    v41 = *(_OWORD *)(a4 + 16);
                    *(_OWORD *)(v10 + 96) = *(_OWORD *)(a4 + 32);
LABEL_63:
                    *(_OWORD *)(v10 + 80) = v41;
LABEL_64:
                    *(_OWORD *)(v10 + 64) = v40;
                    if (theDict)
                    {
                      *(_QWORD *)(v10 + 112) = CFRetain(theDict);
                      v42 = CFDictionaryGetValue(theDict, CFSTR("kCGImageProviderSupportsMultipleResolutions")) != 0;
                    }
                    else
                    {
                      v42 = 0;
                      *(_QWORD *)(v10 + 112) = 0;
                    }
                    *(_BYTE *)(v10 + 128) = v42;
                    *(_BYTE *)(v10 + 129) = 0;
                    *(_BYTE *)(v10 + 130) = v24;
                    *(_QWORD *)(v10 + 136) = create_debug_string(v10, v33, v34, v35, v36, v37, v38, v39);
                    v47 = 0.0;
                    Float = CGCFDictionaryGetFloat(theDict, CFSTR("kCGImageProviderContentHeadroom"), &v47);
                    v44 = v47;
                    if (!Float)
                      v44 = 0.0;
                    *(float *)(v10 + 132) = v44;
                    break;
                  default:
                    _CGHandleAssert("CGImageProviderCreate", 380, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageProvider.c", "", "Unimplemented", v37, v38, v39, v45);
                }
              }
              return result;
            default:
              CGPostError((uint64_t)"%s: invalid image provider component type.", (uint64_t)a2, a3, a4, (uint64_t)theDict, a6, a7, a8, (char)"CGImageProviderCreate");
              return 0;
          }
        default:
          CGPostError((uint64_t)"%s: invalid image provider callbacks version: %d.", (uint64_t)a2, a3, a4, (uint64_t)theDict, a6, a7, a8, (char)"CGImageProviderCreate");
          return 0;
      }
    }
    else
    {
      CGPostError((uint64_t)"%s: invalid image provider size: %g x %g.", (uint64_t)a2, a3, a4, (uint64_t)theDict, a6, a7, a8, (char)"CGImageProviderCreate");
      return 0;
    }
  }
  return v10;
}

CFStringRef create_debug_string(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFStringRef v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  char **v14;
  const void **v15;
  const void **v16;
  const void **v17;
  char **v18;
  const void **v19;
  char **v20;
  const void *v21;
  const __CFString *debug_string;
  const __CFString *v23;
  Dl_info v25;
  char *v26;
  char __str[128];
  char v28[645];
  _QWORD v29[2];
  __int128 v30;
  uint64_t v31;
  _QWORD v32[3];
  _QWORD v33[2];
  _QWORD v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  if (data_provider_debug_info_enabled_predicate != -1)
    dispatch_once(&data_provider_debug_info_enabled_predicate, &__block_literal_global_38);
  v9 = 0;
  if (a1 && data_provider_debug_info_enabled_enabled)
  {
    v26 = 0;
    v10 = *(_DWORD *)(a1 + 64);
    if (v10 >= 2)
    {
      if (v10 == 2)
      {
        v11 = 3;
      }
      else
      {
        if (v10 != 3)
          _CGHandleAssert("create_debug_string", 108, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImageProvider.c", "count != 0 && count <= kMaxCount", "count: %lu", a6, a7, a8, 0);
        v11 = 5;
      }
    }
    else
    {
      v11 = 2;
    }
    v12 = *(_QWORD *)(a1 + 80);
    v34[0] = *(_QWORD *)(a1 + 72);
    v34[1] = v12;
    v33[0] = v34[0];
    v33[1] = v12;
    v32[0] = v34[0];
    v32[1] = v12;
    v29[0] = v34[0];
    v29[1] = v12;
    v13 = *(_OWORD *)(a1 + 88);
    v32[2] = *(_QWORD *)(a1 + 88);
    v30 = v13;
    v31 = *(_QWORD *)(a1 + 104);
    bzero(v28, 0x285uLL);
    v14 = create_debug_string_names_v2;
    v15 = (const void **)v32;
    v16 = (const void **)v33;
    if (!v10)
      v16 = (const void **)v34;
    v17 = (const void **)v29;
    if (v10 != 3)
      v17 = 0;
    v18 = create_debug_string_names_v3;
    if (v10 != 3)
      v18 = 0;
    if (v10 != 2)
    {
      v15 = v17;
      v14 = v18;
    }
    if (v10 >= 2)
      v19 = v15;
    else
      v19 = v16;
    if (v10 >= 2)
      v20 = v14;
    else
      v20 = create_debug_string_names_v1;
    do
    {
      v21 = *v19;
      if (*v19)
      {
        memset(&v25, 0, sizeof(v25));
        if (dladdr(v21, &v25))
          snprintf(__str, 0x80uLL, "%s %s:%s");
        else
          snprintf(__str, 0x80uLL, "%s %p");
        __strcat_chk();
        __strcat_chk();
      }
      ++v20;
      ++v19;
      --v11;
    }
    while (v11);
    if (*(_BYTE *)(a1 + 129))
      asprintf(&v26, "CGImageProvider: version: %d size: [%f, %f] headroom: %f subImage rect [[%f, %f][%f, %f]]\n%s");
    else
      asprintf(&v26, "CGImageProvider: version: %d size: [%f, %f] headroom: %f\n%s");
    if (*(_BYTE *)(a1 + 129))
      debug_string = (const __CFString *)create_debug_string(*(_QWORD *)(a1 + 144));
    else
      debug_string = 0;
    if (debug_string)
      v23 = debug_string;
    else
      v23 = &stru_1E1664C98;
    v9 = CFStringCreateWithFormat(0, 0, CFSTR("%s%@%@"), v26, v23, &stru_1E1664C98);
    if (debug_string)
      CFRelease(debug_string);
    free(v26);
  }
  return v9;
}

char *subImageProviderCopyImageBlockSet(uint64_t a1, double a2, double a3, double a4, double a5, uint64_t a6, const __CFDictionary *a7)
{
  uint64_t v9;
  const __CFAllocator **v10;
  const void *Value;
  const __CFNumber *v12;
  const __CFAllocator *v13;
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v15;
  CFNumberRef v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  CGFloat v39;
  BOOL v40;
  unint64_t v41;
  CGFloat v42;
  unint64_t v43;
  double v44;
  double v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  int v49;
  char *v50;
  _QWORD *v51;
  _QWORD *v52;
  void (*v53)(_QWORD, _QWORD);
  _QWORD *v55;
  _QWORD *v56;
  void (*v57)(_QWORD, _QWORD);
  uint64_t v58;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  uint64_t v63;
  _QWORD valuePtr[2];
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;

  valuePtr[1] = *MEMORY[0x1E0C80C00];
  valuePtr[0] = 0;
  v65 = CGRectStandardize(*(CGRect *)&a2);
  v71 = *(CGRect *)(a1 + 152);
  v65.origin.x = v71.origin.x + v65.origin.x;
  v65.origin.y = v65.origin.y + v71.origin.y;
  v66 = CGRectIntersection(v65, v71);
  y = v66.origin.y;
  x = v66.origin.x;
  height = v66.size.height;
  width = v66.size.width;
  v9 = *(_QWORD *)(a1 + 48);
  v10 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (a7)
  {
    Value = CFDictionaryGetValue(a7, CFSTR("kCGImageBlockFormatRequest"));
    if (Value && CFEqual(Value, CFSTR("kCGImageBlockFormatBGRx8")))
      v9 = 4;
    v12 = (const __CFNumber *)CFDictionaryGetValue(a7, CFSTR("kCGImageBlockBaseAddressAlignmentRequest"));
    if (v12)
      CFNumberGetValue(v12, kCFNumberCFIndexType, valuePtr);
    v13 = *v10;
    MutableCopy = CFDictionaryCreateMutableCopy(v13, 0, a7);
  }
  else
  {
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  v15 = MutableCopy;
  v63 = 0;
  v16 = CFNumberCreate(v13, kCFNumberLongType, &v63);
  CFDictionarySetValue(v15, CFSTR("kCGImageBlockTileRequest"), v16);
  if (v16)
    CFRelease(v16);
  v17 = CGImageProviderCopyImageBlockSetWithOptions(*(_QWORD *)(a1 + 144), (uint64_t)v15);
  v19 = v17;
  if (v15)
    CFRelease(v15);
  if (!v19)
  {
    v17 = CGImageProviderCopyImageBlockSetWithOptions(*(_QWORD *)(a1 + 144), (uint64_t)a7);
    v19 = v17;
    if (!v17)
      return 0;
  }
  v20 = *(_QWORD *)(v19 + 120);
  MEMORY[0x1E0C80A78](v17, v18);
  v23 = (char *)&v58 - v22;
  if (v21 <= 0x1FFFFFFFFFFFFFFELL)
    v24 = (char *)&v58 - v22;
  else
    v24 = 0;
  if (v21 - 0x1FFFFFFFFFFFFFFFLL >= 0xE000000000000022)
    v24 = (char *)malloc_type_malloc(8 * v20, 0x4B848ADEuLL);
  if (v20)
  {
    v58 = (uint64_t)&v58;
    v25 = 0;
    v26 = 0;
    do
    {
      if (v19)
      {
        if (*(_QWORD *)(v19 + 120) > v25)
        {
          v27 = *(_QWORD *)(v19 + 8 * v25 + 128);
          if (v27)
          {
            v29 = *(double *)(v27 + 8);
            v28 = *(double *)(v27 + 16);
            v30 = *(double *)(v27 + 24);
            v31 = *(double *)(a1 + 152);
            v32 = *(double *)(a1 + 160);
            v72.size.width = *(CGFloat *)(a1 + 168);
            v72.size.height = *(CGFloat *)(a1 + 176);
            v67.origin.x = v29;
            v67.origin.y = v28;
            v67.size.width = v30;
            v67.size.height = *(CGFloat *)(v27 + 32);
            v72.origin.x = v31;
            v72.origin.y = v32;
            v68 = CGRectIntersection(v67, v72);
            v39 = v68.size.width;
            v40 = v68.origin.x == INFINITY || v68.origin.y == INFINITY;
            if (!v40 && *(_QWORD *)v27)
            {
              v41 = *(_QWORD *)(v27 + 40);
              if (v41 >= v9 * (uint64_t)v30)
              {
                v42 = v68.size.height;
                v43 = *(_QWORD *)v27 + v9 * (uint64_t)(v68.origin.x - v29) + v41 * (uint64_t)(v68.origin.y - v28);
                if (valuePtr[0] && v43 % valuePtr[0])
                {
                  if (v26)
                  {
                    v55 = v24;
                    do
                    {
                      v56 = (_QWORD *)*v55;
                      if (*v55)
                      {
                        v57 = (void (*)(_QWORD, _QWORD))v56[9];
                        if (v57)
                          v57(v56[7], *v55);
                        free(v56);
                      }
                      ++v55;
                      --v26;
                    }
                    while (v26);
                  }
                  goto LABEL_52;
                }
                v44 = v68.origin.x - v31;
                v45 = v68.origin.y - v32;
                v46 = CGImageBlockCreate((_QWORD *)v43, v41, 0, 0, v68.origin.x - v31, v68.origin.y - v32, v68.size.width, v68.size.height);
                if (v46)
                {
                  v47 = v46;
                  if (v26)
                  {
                    v69.origin.y = y;
                    v69.origin.x = x;
                    v69.size.height = height;
                    v69.size.width = width;
                    v73.origin.x = v44;
                    v73.origin.y = v45;
                    v73.size.width = v39;
                    v73.size.height = v42;
                    v70 = CGRectUnion(v69, v73);
                    y = v70.origin.y;
                    x = v70.origin.x;
                    v39 = v70.size.width;
                    v42 = v70.size.height;
                  }
                  else
                  {
                    y = v45;
                    x = v44;
                  }
                  *(_QWORD *)&v24[8 * v26++] = v47;
                  height = v42;
                  width = v39;
                }
              }
              else
              {
                CGPostError((uint64_t)"CGImageProviderCopyImageBlockSet: invalid bytes/row.\nCGImageProviderCopyImageBlockSet(<CGImageProvider %p>):\n\t<CGImageBlockSet %p> (count = %ld) [%ld]:\n\t\t<CGImageBlock %p> (size = %ld x %ld, pixel-size = %ld, data = %p, bytes-per-row = %ld)", v41, v33, v34, v35, v36, v37, v38, *(_QWORD *)(a1 + 144));
              }
            }
          }
        }
      }
      ++v25;
    }
    while (v20 != v25);
    if (!v26)
      goto LABEL_52;
    v48 = *(_QWORD *)(a1 + 144);
    if (v48)
      v49 = *(_DWORD *)(v48 + 36);
    else
      v49 = 0;
    v50 = CGImageBlockSetCreateWithBitmapInfo(v48, 0, v49, 0, 0, v26, (uint64_t)v24, v19, *(double *)(a1 + 168), *(double *)(a1 + 176), x, y, width, height, subImageBlockSetCallbacks);
    if (!v50)
    {
      v51 = v24;
      do
      {
        v52 = (_QWORD *)*v51;
        if (*v51)
        {
          v53 = (void (*)(_QWORD, _QWORD))v52[9];
          if (v53)
            v53(v52[7], *v51);
          free(v52);
        }
        ++v51;
        --v26;
      }
      while (v26);
      goto LABEL_52;
    }
  }
  else
  {
LABEL_52:
    CGImageBlockSetRelease(v19);
    v50 = 0;
  }
  if (v24 != v23)
    free(v24);
  return v50;
}

uint64_t CGImageProviderCopyImageBlockSetWithOptions(uint64_t a1, uint64_t a2)
{
  if (!a1)
    return 0;
  switch(*(_DWORD *)(a1 + 64))
  {
    case 0:
      if (a2)
        return 0;
      break;
    case 1:
    case 2:
    case 3:
      return (*(uint64_t (**)(_QWORD))(a1 + 72))(*(_QWORD *)(a1 + 56));
    default:
      return 0;
  }
  return (*(uint64_t (**)(_QWORD))(a1 + 72))(*(_QWORD *)(a1 + 56));
}

_QWORD *CGImageBlockCreate(_QWORD *result, uint64_t a2, uint64_t a3, _DWORD *a4, double a5, double a6, double a7, double a8)
{
  _QWORD *v11;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  _OWORD *v16;
  CGRect v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;

  if (result)
  {
    v11 = result;
    if (a4 && *a4)
      return 0;
    v17 = CGRectStandardize(*(CGRect *)&a5);
    x = v17.origin.x;
    y = v17.origin.y;
    width = v17.size.width;
    height = v17.size.height;
    if (v17.size.width < 0.0 || v17.size.height < 0.0)
    {
      v18 = CGRectStandardize(v17);
      if (v18.size.width == 0.0)
        return 0;
      v19.origin.x = x;
      v19.origin.y = y;
      v19.size.width = width;
      v19.size.height = height;
      v17 = CGRectStandardize(v19);
    }
    else if (v17.size.width == 0.0)
    {
      return 0;
    }
    if (v17.size.height != 0.0)
    {
      v20.origin.x = x;
      v20.origin.y = y;
      v20.size.width = width;
      v20.size.height = height;
      v22 = CGRectIntegral(v20);
      v21.origin.x = x;
      v21.origin.y = y;
      v21.size.width = width;
      v21.size.height = height;
      if (CGRectEqualToRect(v21, v22))
      {
        result = malloc_type_malloc(0x50uLL, 0x2062DE7BuLL);
        *result = v11;
        *((CGFloat *)result + 1) = x;
        *((CGFloat *)result + 2) = y;
        *((CGFloat *)result + 3) = width;
        *((CGFloat *)result + 4) = height;
        result[5] = a2;
        v16 = result + 8;
        result[7] = a3;
        if (a4)
        {
          *v16 = *(_OWORD *)a4;
        }
        else
        {
          *(_QWORD *)v16 = 0;
          result[9] = 0;
        }
        return result;
      }
    }
    return 0;
  }
  return result;
}

CGRect CGRectStandardize(CGRect rect)
{
  double width;
  double y;
  double v3;
  double v5;
  double v6;
  double height;
  double v8;

  width = rect.size.width;
  y = rect.origin.y;
  v3 = INFINITY;
  if (rect.origin.x == INFINITY || y == INFINITY)
  {
    v5 = 0.0;
    rect.size.width = 0.0;
    v6 = INFINITY;
  }
  else
  {
    if (rect.size.width < 0.0)
      rect.size.width = -rect.size.width;
    height = -0.0;
    if (width >= 0.0)
      width = -0.0;
    v6 = rect.origin.x + width;
    v5 = -rect.size.height;
    if (rect.size.height < 0.0)
      height = rect.size.height;
    else
      v5 = rect.size.height;
    v3 = y + height;
  }
  v8 = v5;
  rect.size.height = v8;
  rect.origin.y = v3;
  rect.origin.x = v6;
  return rect;
}

char *CGImageBlockSetCreateWithBitmapInfo(uint64_t a1, int a2, int a3, uint64_t a4, _QWORD *ColorSpace, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, CGFloat a11, CGFloat a12, CGFloat a13, CGFloat a14, _DWORD *a15)
{
  char *v15;
  _OWORD *v30;
  uint64_t v32;
  uint64_t v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;

  v15 = 0;
  if (a6 && a1 && a7)
  {
    if (a15 && *a15)
      return 0;
    v15 = 0;
    if (a9 <= 0.0 || a10 <= 0.0)
      return v15;
    if (a9 != (double)(unint64_t)a9)
      return 0;
    if (a10 != (double)(unint64_t)a10)
      return 0;
    v34.origin.x = a11;
    v34.origin.y = a12;
    v34.size.width = a13;
    v34.size.height = a14;
    v36 = CGRectIntegral(v34);
    v35.origin.x = a11;
    v35.origin.y = a12;
    v35.size.width = a13;
    v35.size.height = a14;
    if (!CGRectEqualToRect(v35, v36))
      return 0;
    v15 = (char *)malloc_type_malloc(8 * a6 + 128, 0x705560E0uLL);
    *(_DWORD *)v15 = 1;
    CFRetain((CFTypeRef)a1);
    *((_QWORD *)v15 + 1) = a1;
    *((double *)v15 + 2) = a9;
    *((double *)v15 + 3) = a10;
    *((CGFloat *)v15 + 4) = a11;
    *((CGFloat *)v15 + 5) = a12;
    *((CGFloat *)v15 + 6) = a13;
    *((CGFloat *)v15 + 7) = a14;
    if (!a2)
      a2 = *(_DWORD *)(a1 + 32);
    *((_DWORD *)v15 + 16) = a2;
    if (!a4)
      a4 = *(_QWORD *)(a1 + 48);
    *((_QWORD *)v15 + 9) = a4;
    if (ColorSpace || (ColorSpace = CGImageProviderGetColorSpace((_QWORD *)a1)) != 0)
      CFRetain(ColorSpace);
    *((_QWORD *)v15 + 10) = ColorSpace;
    *((_QWORD *)v15 + 11) = 0;
    v30 = v15 + 104;
    *((_QWORD *)v15 + 12) = a8;
    if (a15)
    {
      *v30 = *(_OWORD *)a15;
    }
    else
    {
      *(_QWORD *)v30 = 0;
      *((_QWORD *)v15 + 14) = 0;
    }
    v32 = 0;
    *((_QWORD *)v15 + 15) = a6;
    do
    {
      v33 = *(_QWORD *)(a7 + 8 * v32);
      if (v33)
        *(_DWORD *)(v33 + 48) = a3;
      *(_QWORD *)&v15[8 * v32++ + 128] = v33;
    }
    while (a6 != v32);
  }
  return v15;
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  double x;
  BOOL v3;
  BOOL v4;
  BOOL result;
  double height;
  double width;
  double y;
  double v9;
  double v10;
  double v11;
  double v12;
  BOOL v13;
  CGRect v14;
  CGRect v15;
  CGRect v16;

  x = rect1.origin.x;
  v3 = rect1.origin.y == INFINITY || rect1.origin.x == INFINITY;
  v4 = rect2.origin.x == INFINITY;
  if (rect2.origin.y == INFINITY)
    v4 = 1;
  result = v3 && v4;
  if (!v3 && !v4)
  {
    height = rect2.size.height;
    width = rect2.size.width;
    y = rect2.origin.y;
    v9 = rect2.origin.x;
    v10 = rect1.size.height;
    v11 = rect1.size.width;
    v12 = rect1.origin.y;
    if (rect1.size.width < 0.0 || rect1.size.height < 0.0)
    {
      v14 = CGRectStandardize(rect1);
      x = v14.origin.x;
      v12 = v14.origin.y;
      v11 = v14.size.width;
      v10 = v14.size.height;
    }
    if (width < 0.0 || height < 0.0)
    {
      v15.origin.x = v9;
      v15.origin.y = y;
      v15.size.width = width;
      v15.size.height = height;
      v16 = CGRectStandardize(v15);
      v9 = v16.origin.x;
      y = v16.origin.y;
      width = v16.size.width;
      height = v16.size.height;
    }
    v13 = v10 == height;
    if (v11 != width)
      v13 = 0;
    if (v12 != y)
      v13 = 0;
    return x == v9 && v13;
  }
  return result;
}

_QWORD *CGImageProviderGetColorSpace(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = result[15];
    if (!v2)
      return (_QWORD *)v1[5];
    result = CGPropertiesGetProperty(v2, CFSTR("kCGImageProviderColorSpaceChangedOnImageCopy"));
    if (!result)
      return (_QWORD *)v1[5];
  }
  return result;
}

const void *CGPropertiesGetProperty(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *v4;
  const void *Value;

  v4 = (os_unfair_lock_s *)(a1 + 4);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 4));
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), a2);
  os_unfair_lock_unlock(v4);
  return Value;
}

CGDataProviderRef CGDataProviderCreatePartial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t *a7, uint64_t *a8)
{
  CGDataProviderRef Direct;
  unint64_t v9;
  CGDataProviderRef v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  off_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  CGDataProvider *v36;
  CGDataProviderRef Sequential;
  unint64_t *v38;
  uint64_t v40;

  Direct = 0;
  if (!a1)
    return Direct;
  if (!a4)
    return Direct;
  v9 = a5;
  if (!a5 || !a7 || !a8)
    return Direct;
  v12 = (CGDataProviderRef)a1;
  v13 = a6 * a2;
  v14 = a6 * a4;
  v15 = (a6 * a2) & 7;
  if (*(void (**)(uint64_t))(a1 + 72) != partial_release_info)
  {
    Direct = 0;
    v16 = *a8;
    v17 = *a7;
    v18 = *a8;
    switch(*a8)
    {
      case 1:
        goto LABEL_23;
      case 2:
        if (a6 & 0xF | *a7 & 1)
          v18 = 1;
        else
          v18 = 2;
        goto LABEL_23;
      case 4:
        v25 = (a6 & 0x1F | *a7 & 3) == 0;
        v26 = 4;
        goto LABEL_20;
      case 8:
        v25 = (a6 & 0x3F | *a7 & 7) == 0;
        v26 = 8;
LABEL_20:
        if (v25)
          v18 = v26;
        else
          v18 = 1;
LABEL_23:
        v24 = v17 * a3 + (v13 >> 3);
        v23 = (unint64_t)(v14 + v15 + 7) >> 3;
        goto LABEL_24;
      default:
        return Direct;
    }
  }
  v19 = *(_QWORD *)(a1 + 24);
  if (!v19)
    return 0;
  v17 = *(_QWORD *)(v19 + 16);
  v12 = *(CGDataProviderRef *)v19;
  v20 = v17 * a3 + (v13 >> 3) + *(_QWORD *)(v19 + 8);
  v21 = *(_QWORD *)(v19 + 72) + v15;
  v22 = (unint64_t)(v14 + v15 + 7) >> 3;
  if (v22 >= *(_QWORD *)(v19 + 24))
    v23 = *(_QWORD *)(v19 + 24);
  else
    v23 = v22;
  v16 = *(_QWORD *)(v19 + 96);
  v24 = v20 + (v21 >> 3);
  v15 = v21 & 7;
  if (*(_QWORD *)(v19 + 32) < a5)
    v9 = *(_QWORD *)(v19 + 32);
  v18 = *(_QWORD *)(v19 + 96);
LABEL_24:
  if (v23 > v17)
    return 0;
  v40 = v18;
  v27 = (unint64_t *)malloc_type_malloc(0x68uLL, 0x2062DE7BuLL);
  v27[2] = v17;
  v27[3] = v23;
  *v27 = 0;
  v27[1] = v24;
  v27[4] = v9;
  v27[5] = 0;
  v27[6] = 0;
  v27[7] = v23 * v9;
  v27[8] = 0;
  v27[9] = v15;
  v27[10] = 0;
  v27[11] = 0;
  v27[12] = v16;
  if (v16 == v40 && !v15)
  {
    v28 = *((_QWORD *)v12 + 4);
    if ((v28 & 0x8000000000000000) == 0)
    {
      v29 = v23 + v17 * (v9 - 1);
      if (v29 + v24 <= v28)
      {
        if (CGDataProviderHasDataPtr(v12))
        {
          Direct = CGDataProviderCreateDirect(v27, v29, &partial_direct_callbacks);
          v35 = v40;
          goto LABEL_35;
        }
        if (*((_QWORD *)v12 + 12) || *((_QWORD *)v12 + 14) || *((_QWORD *)v12 + 10))
        {
          CGDataProviderCreateDirectWithInternalCallbacks((uint64_t)v27, v29, (uint64_t)&partial_internal_callbacks, v30, v31, v32, v33, v34);
          v35 = v40;
          Direct = v36;
LABEL_35:
          if (Direct)
            goto LABEL_38;
        }
      }
    }
  }
  Sequential = CGDataProviderCreateSequential(v27, (const CGDataProviderSequentialCallbacks *)&partial_sequential_callbacks + (v15 != 0));
  Direct = Sequential;
  if (!Sequential)
  {
    free(v27);
    return Direct;
  }
  *((_QWORD *)Sequential + 4) = v27[7];
  v35 = v40;
LABEL_38:
  if (v16 == v35)
    CGDataProviderRetain(v12);
  else
    v12 = CGDataProviderCreateWithSwappedProvider(v12, v35);
  *v27 = (unint64_t)v12;
  if (!v12)
  {
    CGDataProviderRelease(Direct);
    return 0;
  }
  v38 = v27 + 2;
  if (*((_DWORD *)Direct + 5) == 1)
    v38 = v27 + 3;
  *a7 = *v38;
  *a8 = v16;
  return Direct;
}

_QWORD *CGDataProviderHasDataPtr(_QWORD *result)
{
  _QWORD *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (kCGDataProviderPropertyTrustToken_block_invoke_once != -1)
      dispatch_once(&kCGDataProviderPropertyTrustToken_block_invoke_once, &__block_literal_global_26_6088);
    if (v2 == CGDataProviderGetTypeID_id)
      return (_QWORD *)(v1[10] != 0);
    else
      return 0;
  }
  return result;
}

size_t CGImageGetBitsPerPixel(size_t image)
{
  if (image)
    return *(_QWORD *)(image + 64);
  return image;
}

void argb32_sample_rectilinear_argb32(_DWORD *a1, uint64_t a2, int a3, __n128 a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  _DWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  int *v20;
  _DWORD *v21;
  int v22;
  void *v23;
  void *v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int16x8_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int16x8_t v57;
  int16x8_t v58;
  uint8x8_t v59;
  unint64_t v60;
  unsigned int v61;
  uint8x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int8x8_t v65;
  uint16x8_t v66;
  uint16x8_t v67;
  unsigned __int32 v68;
  uint8x8_t v69;
  int16x8_t v70;
  uint8x8_t v71;
  uint8x8_t v72;
  int8x16_t v73;
  uint16x8_t v74;
  int16x8_t v75;
  int8x8_t v76;
  uint8x8_t v77;
  int16x8_t v78;
  unsigned __int32 v79;
  int8x16_t v80;
  uint16x8_t v81;
  int16x8_t v82;
  uint16x8_t v83;
  int16x8_t v84;
  uint8x8_t v85;
  uint8x8_t v86;
  int8x16_t v87;
  uint8x8_t v88;
  int8x16_t v89;
  uint8x8_t v90;
  uint8x8_t v91;
  int8x16_t v92;
  uint8x8_t v93;
  int8x16_t v94;
  unsigned __int32 v95;
  unsigned int v96;
  uint64_t v97;
  _DWORD *v98;
  uint64_t *v99;
  _DWORD *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  _DWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unsigned int *v111;
  int v112;
  int16x8_t v113;
  int16x8_t v114;
  int v115;
  unsigned int v116;
  _QWORD v117[3];

  v117[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 40);
  v109 = (int)a1[7];
  v6 = a1[1];
  v5 = a1[2];
  v115 = v5;
  v116 = v6;
  if ((int)v6 < 1 || v5 < 1)
    return;
  v8 = a1;
  if ((int)a1[5] < 1)
    return;
  if ((int)a1[6] < 1)
    return;
  if ((int)a1[17] < 1)
    return;
  if ((int)a1[16] < 1)
    return;
  v10 = a2;
  MEMORY[0x1E0C80A78](a1, a4);
  v17 = (char *)&v97 - v16;
  v18 = (char *)&v97 - v16;
  if (v6 >= 0x401)
  {
    v18 = (char *)malloc_type_malloc(4 * v6, 0x776ED063uLL);
    if (!v18)
      return;
  }
  v98 = v17;
  v99 = &v97;
  v19 = *((_QWORD *)v8 + 5) + ((int)v8[6] - 1) * v109 + 4 * (int)v8[5] - 4;
  v20 = (int *)*((_QWORD *)v8 + 17);
  v21 = v18;
  v105 = v10;
  v100 = v8;
  v104 = v18;
  if (v20)
  {
    v22 = v8[26];
    LODWORD(v117[0]) = v8[27];
    HIDWORD(v117[0]) = v22;
    shape_enum_clip_alloc((uint64_t)v18, v11, v20, 1, 1, 1, v22, v117[0], v6, v5);
    v24 = v23;
    if (v23)
      goto LABEL_75;
  }
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v117[0] = 0;
  while (2)
  {
    v27 = v26;
    v28 = (unsigned int *)(*((_QWORD *)v8 + 5) + ((int)v8[4] + (uint64_t)v26) * v109 + 4 * (v25 + v8[3]));
    v29 = *(unsigned int *)(v10 + 20);
    v110 = v29 >> 24;
    v30 = *(_QWORD *)(v10 + 104);
    v106 = *(_QWORD *)(v10 + 136);
    v31 = v30 + v106 * v27;
    v108 = *(_QWORD *)(v10 + 32);
    v32 = rectilinear_weights;
    if ((_DWORD)v6)
    {
      v33 = *(_QWORD *)(v10 + 112);
      v34 = *(_QWORD *)(v10 + 96) + v33 * v25;
      v35 = v6;
      v36 = -*(_QWORD *)(v10 + 64);
      v37 = *(_QWORD *)(v10 + 80) - v34;
      v38 = v21;
      do
      {
        v39 = v34 >> SBYTE2(v29);
        if ((v37 | (v36 + v34)) < 0)
        {
          v41 = 0;
        }
        else
        {
          v40 = rectilinear_weights[((v34 & (unint64_t)~(-1 << SBYTE2(v29))) >> (BYTE2(v29) - 4)) & 0xF];
          v39 -= v40 >> 4;
          v41 = v40 & 0xF;
        }
        v42 = *(unsigned int *)(v10 + 256);
        v20 = (int *)(v42 - (v41 != 0));
        v43 = v42 - 1;
        if (v39 >= (uint64_t)v20)
        {
          LODWORD(v41) = 0;
          v39 = v43;
        }
        if (v39 < 0)
        {
          LODWORD(v41) = 0;
          LODWORD(v39) = 0;
        }
        *v38++ = v41 | ((_DWORD)v39 << 16);
        v34 += v33;
        v37 -= v33;
        --v35;
      }
      while (v35);
    }
    v103 = ~(-1 << v110);
    v101 = v24;
    v102 = (v110 - 4);
    v44 = v115;
    v45 = 0uLL;
    v107 = v6;
    do
    {
      v46 = *(unsigned int *)(v10 + 260);
      v47 = v31 >> v110;
      if (((*(_QWORD *)(v10 + 88) - v31) | (v31 - *(_QWORD *)(v10 + 72))) < 0)
      {
        v49 = 0;
      }
      else
      {
        v48 = rectilinear_weights[((v31 & (unint64_t)v103) >> v102) & 0xF];
        v47 -= v48 >> 4;
        v49 = v48 & 0xF;
      }
      v50 = v46 - (v49 != 0);
      v51 = v46 - 1;
      if (v47 >= v50)
        v52 = 0;
      else
        v52 = v49;
      if (v47 >= v50)
        v53 = v51;
      else
        v53 = v47;
      v112 = v44;
      if (v53 < 0)
      {
        LODWORD(v52) = 0;
        v55 = v108;
LABEL_38:
        v56 = v55;
        goto LABEL_39;
      }
      v54 = *(int *)(v10 + 24);
      v55 = v108 + (int)v54 * (uint64_t)(int)v53;
      if (!v52)
        goto LABEL_38;
      v56 = v55 + v54;
LABEL_39:
      v57 = vdupq_n_s16(v52);
      v58 = vdupq_n_s16(16 - (int)v52);
      v59 = (uint8x8_t)vzip1_s32((int32x2_t)vdup_n_s8(v52), (int32x2_t)vdup_n_s8(16 - (int)v52));
      v111 = v28;
      v113 = v58;
      v114 = v57;
      while ((unint64_t)v28 <= v19)
      {
        v60 = ((unint64_t)*v21 >> 14) & 0x3FFFC;
        v61 = *v21 & 0xF;
        if (a3 != 2)
        {
          if (!v4)
          {
            if (v56 == v55)
            {
              if (v61)
              {
                v90 = *(uint8x8_t *)(v55 + v60);
                v91 = (uint8x8_t)vzip1_s32((int32x2_t)vdup_n_s8(v61), (int32x2_t)vdup_n_s8(16 - v61));
                v92 = (int8x16_t)vmull_u8(v90, v91);
                v79 = vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vextq_s8(v92, v92, 8uLL), v90, v91), 4uLL).u32[0];
                goto LABEL_64;
              }
              v95 = *(_DWORD *)(v55 + v60);
            }
            else
            {
              if (v61)
              {
                v77 = (uint8x8_t)vzip1_s32((int32x2_t)vdup_n_s8(v61), (int32x2_t)vdup_n_s8(16 - v61));
                v78 = vmlaq_s16(vmulq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)(v55 + v60), v77), v57), (int16x8_t)vmull_u8(*(uint8x8_t *)(v56 + v60), v77), v58);
                *(int16x4_t *)v78.i8 = vadd_s16(*(int16x4_t *)v78.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL));
                v79 = vraddhn_s16(v78, v45).u32[0];
              }
              else
              {
                v93.i32[0] = *(_DWORD *)(v55 + v60);
                v93.i32[1] = *(_DWORD *)(v56 + v60);
                v94 = (int8x16_t)vmull_u8(v93, v59);
                v79 = vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vextq_s8(v94, v94, 8uLL), v93, v59), 4uLL).u32[0];
              }
LABEL_64:
              v95 = v79;
            }
            v96 = v95 | 0xFF000000;
LABEL_66:
            *v28 = v96;
            goto LABEL_67;
          }
          if (v56 == v55)
          {
            if (!v61)
            {
              v96 = *(_DWORD *)(v55 + v60);
              goto LABEL_66;
            }
            v85 = *(uint8x8_t *)(v55 + v60);
            v86 = (uint8x8_t)vzip1_s32((int32x2_t)vdup_n_s8(v61), (int32x2_t)vdup_n_s8(16 - v61));
            v87 = (int8x16_t)vmull_u8(v85, v86);
            v68 = vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vextq_s8(v87, v87, 8uLL), v85, v86), 4uLL).u32[0];
          }
          else if (v61)
          {
            v69 = (uint8x8_t)vzip1_s32((int32x2_t)vdup_n_s8(v61), (int32x2_t)vdup_n_s8(16 - v61));
            v70 = vmlaq_s16(vmulq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)(v55 + v60), v69), v57), (int16x8_t)vmull_u8(*(uint8x8_t *)(v56 + v60), v69), v58);
            *(int16x4_t *)v70.i8 = vadd_s16(*(int16x4_t *)v70.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL));
            v68 = vraddhn_s16(v70, v45).u32[0];
          }
          else
          {
            v88.i32[0] = *(_DWORD *)(v55 + v60);
            v88.i32[1] = *(_DWORD *)(v56 + v60);
            v89 = (int8x16_t)vmull_u8(v88, v59);
            v68 = vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vextq_s8(v89, v89, 8uLL), v88, v59), 4uLL).u32[0];
          }
          goto LABEL_59;
        }
        if (v56 == v55)
        {
          if (!v61)
          {
            DplusDM_13347(v28, *(_DWORD *)(v55 + v60), *v28, ~*(_DWORD *)(v55 + v60) >> 24);
            v58 = v113;
            v57 = v114;
            v45 = 0uLL;
            goto LABEL_67;
          }
          v71 = *(uint8x8_t *)(v55 + v60);
          v72 = (uint8x8_t)vzip1_s32((int32x2_t)vdup_n_s8(v61), (int32x2_t)vdup_n_s8(16 - v61));
          v73 = (int8x16_t)vmull_u8(v71, v72);
          v74 = (uint16x8_t)vextq_s8(v73, v73, 8uLL);
          v75.i64[0] = vmlal_u8(v74, v71, v72).u64[0];
          v75.i64[1] = v74.i64[0];
          v76 = vrshrn_n_s16(v75, 4uLL);
          goto LABEL_55;
        }
        if (!v61)
        {
          v71.i32[0] = *(_DWORD *)(v55 + v60);
          v71.i32[1] = *(_DWORD *)(v56 + v60);
          v80 = (int8x16_t)vmull_u8(v71, v59);
          v81 = (uint16x8_t)vextq_s8(v80, v80, 8uLL);
          v82.i64[0] = vmlal_u8(v81, v71, v59).u64[0];
          v82.i64[1] = v81.i64[0];
          v76 = vrshrn_n_s16(v82, 4uLL);
LABEL_55:
          v71.i32[0] = *v28;
          v83.i64[0] = 0x1000100010001;
          v83.i64[1] = 0x1000100010001;
          v84 = (int16x8_t)vmlal_u8(v83, (uint8x8_t)vdup_lane_s8(vmvn_s8(v76), 3), v71);
          v68 = vadd_s8(v76, vaddhn_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v84, 8uLL), v84)).u32[0];
          goto LABEL_59;
        }
        v62 = (uint8x8_t)vzip1_s32((int32x2_t)vdup_n_s8(v61), (int32x2_t)vdup_n_s8(16 - v61));
        v63 = vmlaq_s16(vmulq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)(v55 + v60), v62), v57), (int16x8_t)vmull_u8(*(uint8x8_t *)(v56 + v60), v62), v58);
        *(int16x4_t *)v64.i8 = vadd_s16(*(int16x4_t *)v63.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL));
        v63.i64[0] = v64.i64[0];
        v63.i64[1] = *(_QWORD *)(v55 + v60);
        v65 = vraddhn_s16(v63, v45);
        *(int8x8_t *)v63.i8 = vdup_lane_s8(vmvn_s8(v65), 3);
        v65.i32[0] = *v28;
        v66.i64[0] = 0x1000100010001;
        v66.i64[1] = 0x1000100010001;
        v67 = vmlal_u8(v66, *(uint8x8_t *)v63.i8, (uint8x8_t)v65);
        v64.u64[1] = (unint64_t)v65;
        v68 = vaddhn_s16((int16x8_t)vsraq_n_u16(v67, v67, 8uLL), v64).u32[0];
LABEL_59:
        *v28 = v68;
LABEL_67:
        ++v28;
        ++v21;
        LODWORD(v6) = v6 - 1;
        if (!(_DWORD)v6)
          break;
      }
      v44 = v112 - 1;
      v115 = v112 - 1;
      v21 = v104;
      v10 = v105;
      if (v112 == 1)
        goto LABEL_74;
      LODWORD(v6) = v107;
      v31 += v106;
      v28 = (unsigned int *)((char *)v111 + v109);
    }
    while (v19 >= (unint64_t)v111 + v109);
    CGLog(3, (uint64_t)"%s destination ptr is out-of-buffer", (uint64_t)v20, (uint64_t)v32, v12, v13, v14, v15, (char)"argb32_sample_rectilinear_argb32");
LABEL_74:
    v8 = v100;
    v24 = v101;
    if (v101)
    {
LABEL_75:
      if (shape_enum_clip_next((uint64_t)v24, (int *)v117 + 1, v117, &v116, &v115))
      {
        v26 = v117[0];
        v25 = HIDWORD(v117[0]);
        v6 = v116;
        continue;
      }
      free(v24);
    }
    break;
  }
  if (v21 != v98)
    free(v21);
}

unint64_t argb32_mark_constmask(uint64_t a1, int a2)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t result;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  unsigned __int32 v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  int v97;
  unint64_t v98;
  unsigned int v99;
  int v100;
  unint64_t v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  unsigned int v116;
  int v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  unint64_t v121;
  int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  unsigned int v127;
  unsigned int *v128;
  unsigned int *v129;
  unsigned int v130;
  int v131;
  int v132;
  int v133;
  unsigned int v134;
  unsigned int v135;
  _DWORD *v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  int v140;
  unint64_t v141;
  int v142;
  unint64_t v143;
  int v144;
  int v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  int v150;
  int32x4_t v151;
  uint64_t v152;

  v4 = *(_DWORD *)(a1 + 8);
  v150 = *(_DWORD *)(a1 + 4);
  v5 = *(int *)(a1 + 28);
  v7 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 136);
  v9 = **(_DWORD **)(a1 + 88);
  pthread_mutex_lock(&argb32_cacheColorLock);
  v10 = argb32_cacheColor;
  v146 = v5;
  if (!argb32_cacheColor || *(_DWORD *)(argb32_cacheColor + 16) != v9)
  {
    v13 = 0;
    while (1)
    {
      if (!v10)
        goto LABEL_9;
      v14 = (_QWORD *)v13;
      v13 = v10;
      if (*(_DWORD *)(v10 + 16) == v9)
        break;
      v10 = *(_QWORD *)v10;
      if (!*(_QWORD *)v13)
      {
        if (argb32_cacheColorCount > 6)
        {
          *v14 = 0;
        }
        else
        {
LABEL_9:
          v15 = (char *)argb32_cacheColorBase;
          if (argb32_cacheColorBase)
          {
            v16 = argb32_cacheColorCount;
          }
          else
          {
            v15 = (char *)malloc_type_calloc(1uLL, 0x1CA8uLL, 0x10200408056D5EBuLL);
            v16 = 0;
            argb32_cacheColorBase = (uint64_t)v15;
          }
          v13 = (uint64_t)&v15[24 * v16];
          *(_QWORD *)(v13 + 8) = &v15[1024 * (unint64_t)v16 + 168];
          argb32_cacheColorCount = v16 + 1;
        }
        v17 = 0;
        *(_QWORD *)v13 = argb32_cacheColor;
        argb32_cacheColor = v13;
        *(_DWORD *)(v13 + 16) = v9;
        v19 = *(_QWORD *)(v13 + 8);
        v12 = v13 + 8;
        v18 = v19;
        do
        {
          *(_DWORD *)(v18 + 4 * v17) = PDM_13345(v9, v17);
          ++v17;
        }
        while ((_DWORD)v17 != 256);
        result = pthread_mutex_unlock(&argb32_cacheColorLock);
        goto LABEL_20;
      }
    }
    if (v14)
    {
      *v14 = *(_QWORD *)v10;
      *(_QWORD *)v10 = argb32_cacheColor;
      argb32_cacheColor = v10;
    }
  }
  result = pthread_mutex_unlock(&argb32_cacheColorLock);
  v12 = v10 + 8;
LABEL_20:
  if (!v8)
    return result;
  v20 = *(_QWORD *)v12;
  v21 = *(_DWORD *)(*(_QWORD *)v12 + 1020);
  v22 = HIBYTE(v21);
  v23 = v146 >> 2;
  v24 = (unsigned int *)(v7 + 4 * (*(int *)(a1 + 12) + (v146 >> 2) * *(int *)(a1 + 16)));
  v25 = *(int *)(a1 + 124);
  v26 = v8 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v25;
  v147 = v25 - v150;
  v27 = v23 - v150;
  switch(a2)
  {
    case 0:
      do
      {
        v28 = v150;
        do
        {
          v29 = *(unsigned __int8 *)v26;
          if (*(_BYTE *)v26)
          {
            if (v29 == 255)
              result = 0;
            else
              result = PDM_13345(*v24, v29 ^ 0xFFu);
            *v24 = result;
          }
          ++v26;
          ++v24;
          --v28;
        }
        while (v28);
        v26 += v147;
        v24 += v27;
        --v4;
      }
      while (v4);
      return result;
    case 1:
      v95 = -1;
      v96 = v26 & 3;
      if ((v26 & 3) != 0)
      {
        v97 = v96 + v150;
        v95 = -1 << (8 * v96);
        v98 = v26 & 3;
        v26 &= 0xFFFFFFFFFFFFFFFCLL;
        v24 -= v98;
      }
      else
      {
        v97 = v150;
      }
      if ((((_BYTE)v97 + (_BYTE)v26) & 3) != 0)
      {
        v118 = 4 - (((_BYTE)v97 + (_BYTE)v26) & 3);
        v96 += v118;
        v119 = 0xFFFFFFFF >> (8 * v118);
        if (v97 >= 4)
          v120 = v119;
        else
          v120 = 0;
        if (v97 >= 4)
          v119 = -1;
        v95 &= v119;
      }
      else
      {
        v120 = 0;
      }
      v148 = v147 - v96;
      v142 = v97 >> 2;
      v151 = vdupq_n_s32(v21);
      v141 = v27 - v96;
      v145 = v95;
      do
      {
        v125 = *(_DWORD *)v26 & v95;
        v126 = v142;
        v127 = v120;
        if (!v125)
          goto LABEL_376;
LABEL_358:
        if (v125 == -1)
        {
          *(int32x4_t *)v24 = v151;
          goto LABEL_376;
        }
        while (1)
        {
          if ((_BYTE)v125)
          {
            if (v125 == 255)
              *v24 = v21;
            else
              DplusDM_13347(v24, *(_DWORD *)(v20 + 4 * v125), *v24, ~(_BYTE)v125);
          }
          if (BYTE1(v125))
          {
            v128 = v24 + 1;
            if (BYTE1(v125) == 255)
              *v128 = v21;
            else
              DplusDM_13347(v128, *(_DWORD *)(v20 + 4 * BYTE1(v125)), *v128, ~(v125 >> 8));
          }
          if (BYTE2(v125))
          {
            v129 = v24 + 2;
            if (BYTE2(v125) == 255)
              *v129 = v21;
            else
              DplusDM_13347(v129, *(_DWORD *)(v20 + 4 * BYTE2(v125)), *v129, ~HIWORD(v125));
          }
          result = (unint64_t)(v24 + 3);
          v130 = HIBYTE(v125);
          if (HIBYTE(v125) == 255)
          {
            *(_DWORD *)result = v21;
          }
          else if (v130)
          {
            result = (unint64_t)DplusDM_13347((_DWORD *)result, *(_DWORD *)(v20 + 4 * v130), *(_DWORD *)result, ~v125 >> 24);
          }
LABEL_376:
          while (1)
          {
            v131 = v126;
            v24 += 4;
            --v126;
            v26 += 4;
            if (v131 < 2)
              break;
            v125 = *(_DWORD *)v26;
            if (*(_DWORD *)v26)
              goto LABEL_358;
          }
          if (!v127)
            break;
          v127 = 0;
          v125 = *(_DWORD *)v26 & v120;
        }
        v26 += v148;
        v24 += v141;
        --v4;
        v95 = v145;
      }
      while (v4);
      return result;
    case 2:
      v99 = v26 & 3;
      if ((v26 & 3) != 0)
      {
        v100 = v99 + v150;
        v144 = -1 << (8 * v99);
        v101 = v26 & 3;
        v26 &= 0xFFFFFFFFFFFFFFFCLL;
        v24 -= v101;
      }
      else
      {
        v144 = -1;
        v100 = v150;
      }
      v121 = v23 - v150;
      if ((((_BYTE)v100 + (_BYTE)v26) & 3) != 0)
      {
        v122 = 4 - (((_BYTE)v100 + (_BYTE)v26) & 3);
        v99 += v122;
        v123 = 0xFFFFFFFF >> (8 * v122);
        if (v100 >= 4)
          v124 = v123;
        else
          v124 = 0;
        if (v100 >= 4)
          v123 = -1;
        v144 &= v123;
      }
      else
      {
        v124 = 0;
      }
      v152 = v147 - v99;
      v149 = v100 >> 2;
      v132 = ~HIBYTE(v21);
      v143 = v121 - v99;
      while (1)
      {
        v133 = v149;
        v134 = *(_DWORD *)v26 & v144;
        v135 = v124;
        if (!v134)
          goto LABEL_397;
LABEL_386:
        if (v134 == -1)
          break;
        while (1)
        {
          if ((_BYTE)v134)
            result = (unint64_t)DplusDM_13347(v24, *(_DWORD *)(v20 + 4 * v134), *v24, ~*(_DWORD *)(v20 + 4 * v134) >> 24);
          if ((v134 & 0xFF00) != 0)
            result = (unint64_t)DplusDM_13347(v24 + 1, *(_DWORD *)(v20 + 4 * BYTE1(v134)), v24[1], ~*(_DWORD *)(v20 + 4 * BYTE1(v134)) >> 24);
          if ((v134 & 0xFF0000) != 0)
            result = (unint64_t)DplusDM_13347(v24 + 2, *(_DWORD *)(v20 + 4 * BYTE2(v134)), v24[2], ~*(_DWORD *)(v20 + 4 * BYTE2(v134)) >> 24);
          if (HIBYTE(v134))
          {
            v138 = *(_DWORD *)(v20 + 4 * HIBYTE(v134));
            v136 = v24 + 3;
            v137 = v24[3];
            v139 = ~v138 >> 24;
            goto LABEL_396;
          }
LABEL_397:
          while (1)
          {
            v140 = v133;
            v24 += 4;
            --v133;
            v26 += 4;
            if (v140 < 2)
              break;
            v134 = *(_DWORD *)v26;
            if (*(_DWORD *)v26)
              goto LABEL_386;
          }
          if (!v135)
            break;
          v135 = 0;
          v134 = *(_DWORD *)v26 & v124;
        }
        v26 += v152;
        v24 += v143;
        if (!--v4)
          return result;
      }
      DplusDM_13347(v24, v21, *v24, v132);
      DplusDM_13347(v24 + 1, v21, v24[1], v132);
      DplusDM_13347(v24 + 2, v21, v24[2], v132);
      v136 = v24 + 3;
      v137 = v24[3];
      v138 = v21;
      v139 = ~HIBYTE(v21);
LABEL_396:
      result = (unint64_t)DplusDM_13347(v136, v138, v137, v139);
      goto LABEL_397;
    case 3:
      do
      {
        v102 = v150;
        do
        {
          v103 = *(unsigned __int8 *)v26;
          if (*(_BYTE *)v26)
          {
            if (v103 == 255)
              *v24 = *(_DWORD *)(v20 + (((unint64_t)*v24 >> 22) & 0x3FC));
            else
              result = (unint64_t)DplusDM_13347(v24, *(_DWORD *)(v20+ 4* ((HIBYTE(*v24) * v103+ 128+ ((HIBYTE(*v24) * v103 + 128) >> 8)) >> 8)), *v24, v103 ^ 0xFFu);
          }
          ++v26;
          ++v24;
          --v102;
        }
        while (v102);
        v26 += v147;
        v24 += v27;
        --v4;
      }
      while (v4);
      return result;
    case 4:
      do
      {
        v104 = v150;
        do
        {
          v105 = *(unsigned __int8 *)v26;
          if (*(_BYTE *)v26)
          {
            if (v105 == 255)
              *v24 = *(_DWORD *)(v20 + 4 * (~*v24 >> 24));
            else
              result = (unint64_t)DplusDM_13347(v24, *(_DWORD *)(v20+ 4* (((~*v24 >> 24) * v105 + 128 + (((~*v24 >> 24) * v105 + 128) >> 8)) >> 8)), *v24, v105 ^ 0xFFu);
          }
          ++v26;
          ++v24;
          --v104;
        }
        while (v104);
        v26 += v147;
        v24 += v27;
        --v4;
      }
      while (v4);
      return result;
    case 5:
      do
      {
        v30 = v150;
        do
        {
          if (*(_BYTE *)v26)
          {
            v31 = *(_DWORD *)(v20 + 4 * *(unsigned __int8 *)v26);
            result = (unint64_t)DMplusDM_13346(v24, v31, HIBYTE(*v24), *v24, ~v31 >> 24);
          }
          ++v26;
          ++v24;
          --v30;
        }
        while (v30);
        v26 += v147;
        v24 += v27;
        --v4;
      }
      while (v4);
      return result;
    case 6:
      do
      {
        v106 = v150;
        do
        {
          v107 = *(unsigned __int8 *)v26;
          if (*(_BYTE *)v26 && ~HIBYTE(*v24))
          {
            if (~HIBYTE(*v24) == 255)
              *v24 = *(_DWORD *)(v20 + 4 * v107);
            else
              result = (unint64_t)DplusDM_13347(v24, *v24, *(_DWORD *)(v20 + 4 * v107), ~HIBYTE(*v24));
          }
          ++v26;
          ++v24;
          --v106;
        }
        while (v106);
        v26 += v147;
        v24 += v27;
        --v4;
      }
      while (v4);
      return result;
    case 7:
      do
      {
        v108 = v150;
        do
        {
          v109 = *(unsigned __int8 *)v26;
          if (*(_BYTE *)v26)
          {
            if (v109 == 255)
              v110 = HIBYTE(v21);
            else
              v110 = (~(_BYTE)v109
                                     + ((unsigned __int16)(v22 * v109 + 128 + ((v22 * v109 + 128) >> 8)) >> 8));
            result = PDM_13345(*v24, v110);
            *v24 = result;
          }
          ++v26;
          ++v24;
          --v108;
        }
        while (v108);
        v26 += v147;
        v24 += v27;
        --v4;
      }
      while (v4);
      return result;
    case 8:
      v111 = ~HIBYTE(v21);
      do
      {
        v112 = v150;
        do
        {
          v113 = *(unsigned __int8 *)v26;
          if (*(_BYTE *)v26)
          {
            if (v113 == 255)
              v114 = v111;
            else
              v114 = ~((v22 * v113 + 128 + ((v22 * v113 + 128) >> 8)) >> 8);
            result = PDM_13345(*v24, v114);
            *v24 = result;
          }
          ++v26;
          ++v24;
          --v112;
        }
        while (v112);
        v26 += v147;
        v24 += v27;
        --v4;
      }
      while (v4);
      return result;
    case 9:
      do
      {
        v32 = v150;
        do
        {
          if (*(_BYTE *)v26)
            result = (unint64_t)DMplusDM_13346(v24, *(_DWORD *)(v20 + 4 * *(unsigned __int8 *)v26), ~*v24 >> 24, *v24, (~*(_BYTE *)v26+ HIBYTE(*(_DWORD *)(v20 + 4 * *(unsigned __int8 *)v26))));
          ++v26;
          ++v24;
          --v32;
        }
        while (v32);
        v26 += v147;
        v24 += v27;
        --v4;
      }
      while (v4);
      return result;
    case 10:
      do
      {
        v33 = v150;
        do
        {
          if (*(_BYTE *)v26)
          {
            v34 = *(_DWORD *)(v20 + 4 * *(unsigned __int8 *)v26);
            result = (unint64_t)DMplusDM_13346(v24, v34, ~*v24 >> 24, *v24, ~v34 >> 24);
          }
          ++v26;
          ++v24;
          --v33;
        }
        while (v33);
        v26 += v147;
        v24 += v27;
        --v4;
      }
      while (v4);
      return result;
    case 11:
      do
      {
        v35 = v150;
        do
        {
          if (*(_BYTE *)v26)
          {
            v37 = HIBYTE(*v24);
            if (!v6)
              LOBYTE(v37) = -1;
            v36 = *(_DWORD *)(v20 + 4 * *(unsigned __int8 *)v26);
            result = (unint64_t)DAplusdDA_13348(v24, *v24, v37, v36, HIBYTE(v36));
          }
          ++v26;
          ++v24;
          --v35;
        }
        while (v35);
        v26 += v147;
        v24 += v27;
        --v4;
      }
      while (v4);
      return result;
    case 12:
      do
      {
        v115 = v150;
        do
        {
          if (*(_BYTE *)v26)
          {
            v116 = *(_DWORD *)(v20 + 4 * *(unsigned __int8 *)v26);
            v117 = ((*v24 >> 8) & 0xFF00FF) + ((v116 >> 8) & 0xFF00FF);
            *v24 = (v117 << 8) & 0xFF00FF00 | ((*v24 & 0xFF00FF) + (v116 & 0xFF00FF)) & 0xFF00FF | (15
                                                                                                  * (v117 & 0x1000100 | (((*v24 & 0xFF00FF) + (v116 & 0xFF00FF)) >> 8) & 0x10001)) | (240 * (v117 & 0x1000100 | (((*v24 & 0xFF00FF) + (v116 & 0xFF00FF)) >> 8) & 0x10001));
          }
          ++v26;
          ++v24;
          --v115;
        }
        while (v115);
        v26 += v147;
        v24 += v27;
        --v4;
      }
      while (v4);
      return result;
    case 13:
      while (1)
      {
        v38 = v150;
        do
        {
          if (*(_BYTE *)v26)
          {
            v39 = *(_DWORD *)(v20 + 4 * *(unsigned __int8 *)v26);
            if (HIBYTE(v39))
            {
              result = *v24;
              if (v6)
              {
                v40 = BYTE3(result);
                if (!BYTE3(result))
                  goto LABEL_65;
              }
              else
              {
                v40 = 255;
              }
              result = PDAmultiplyPDA_13349(result, v40, v39, HIBYTE(v39));
              v39 = result;
LABEL_65:
              *v24 = v39;
            }
          }
          ++v26;
          ++v24;
          --v38;
        }
        while (v38);
        v26 += v147;
        v24 += v27;
        if (!--v4)
          return result;
      }
    case 14:
      while (1)
      {
        v41 = v150;
        do
        {
          if (*(_BYTE *)v26)
          {
            v42 = *(_DWORD *)(v20 + 4 * *(unsigned __int8 *)v26);
            if (HIBYTE(v42))
            {
              result = *v24;
              if (v6)
              {
                v43 = BYTE3(result);
                if (!BYTE3(result))
                  goto LABEL_77;
              }
              else
              {
                v43 = 255;
              }
              result = PDAscreenPDA_13350(result, v43, v42, HIBYTE(v42));
              v42 = result;
LABEL_77:
              *v24 = v42;
            }
          }
          ++v26;
          ++v24;
          --v41;
        }
        while (v41);
        v26 += v147;
        v24 += v27;
        if (!--v4)
          return result;
      }
    case 15:
      while (1)
      {
        v44 = v150;
        do
        {
          if (*(_BYTE *)v26)
          {
            v45 = *(_DWORD *)(v20 + 4 * *(unsigned __int8 *)v26);
            if (HIBYTE(v45))
            {
              result = *v24;
              if (v6)
              {
                v46 = BYTE3(result);
                if (!BYTE3(result))
                  goto LABEL_89;
              }
              else
              {
                v46 = 255;
              }
              result = PDAoverlayPDA_13351(result, v46, v45, HIBYTE(v45));
              v45 = result;
LABEL_89:
              *v24 = v45;
            }
          }
          ++v26;
          ++v24;
          --v44;
        }
        while (v44);
        v26 += v147;
        v24 += v27;
        if (!--v4)
          return result;
      }
    case 16:
      while (1)
      {
        v47 = v150;
        do
        {
          if (*(_BYTE *)v26)
          {
            v48 = *(_DWORD *)(v20 + 4 * *(unsigned __int8 *)v26);
            if (HIBYTE(v48))
            {
              result = *v24;
              if (v6)
              {
                v49 = BYTE3(result);
                if (!BYTE3(result))
                  goto LABEL_101;
              }
              else
              {
                v49 = 255;
              }
              result = PDAdarkenPDA_13353(result, v49, v48, HIBYTE(v48));
              v48 = result;
LABEL_101:
              *v24 = v48;
            }
          }
          ++v26;
          ++v24;
          --v47;
        }
        while (v47);
        v26 += v147;
        v24 += v27;
        if (!--v4)
          return result;
      }
    case 17:
      while (1)
      {
        v50 = v150;
        do
        {
          if (*(_BYTE *)v26)
          {
            v51 = *(_DWORD *)(v20 + 4 * *(unsigned __int8 *)v26);
            if (HIBYTE(v51))
            {
              result = *v24;
              if (v6)
              {
                v52 = BYTE3(result);
                if (!BYTE3(result))
                  goto LABEL_113;
              }
              else
              {
                v52 = 255;
              }
              result = PDAlightenPDA_13352(result, v52, v51, HIBYTE(v51));
              v51 = result;
LABEL_113:
              *v24 = v51;
            }
          }
          ++v26;
          ++v24;
          --v50;
        }
        while (v50);
        v26 += v147;
        v24 += v27;
        if (!--v4)
          return result;
      }
    case 18:
      while (1)
      {
        v53 = v150;
        do
        {
          if (*(_BYTE *)v26)
          {
            v54 = *(_DWORD *)(v20 + 4 * *(unsigned __int8 *)v26);
            if (HIBYTE(v54))
            {
              result = *v24;
              if (v6)
              {
                v55 = BYTE3(result);
                if (!BYTE3(result))
                  goto LABEL_125;
              }
              else
              {
                v55 = 255;
              }
              result = PDAcolordodgePDA_13354(result, v55, v54, HIBYTE(v54));
              v54 = result;
LABEL_125:
              *v24 = v54;
            }
          }
          ++v26;
          ++v24;
          --v53;
        }
        while (v53);
        v26 += v147;
        v24 += v27;
        if (!--v4)
          return result;
      }
    case 19:
      while (1)
      {
        v56 = v150;
        do
        {
          if (*(_BYTE *)v26)
          {
            v57 = *(_DWORD *)(v20 + 4 * *(unsigned __int8 *)v26);
            if (HIBYTE(v57))
            {
              result = *v24;
              if (v6)
              {
                v58 = BYTE3(result);
                if (!BYTE3(result))
                  goto LABEL_137;
              }
              else
              {
                v58 = 255;
              }
              result = PDAcolorburnPDA_13355(result, v58, v57, HIBYTE(v57));
              v57 = result;
LABEL_137:
              *v24 = v57;
            }
          }
          ++v26;
          ++v24;
          --v56;
        }
        while (v56);
        v26 += v147;
        v24 += v27;
        if (!--v4)
          return result;
      }
    case 20:
      while (1)
      {
        v59 = v150;
        do
        {
          if (*(_BYTE *)v26)
          {
            v60 = *(_DWORD *)(v20 + 4 * *(unsigned __int8 *)v26);
            if (HIBYTE(v60))
            {
              result = *v24;
              if (v6)
              {
                v61 = BYTE3(result);
                if (!BYTE3(result))
                  goto LABEL_149;
              }
              else
              {
                v61 = 255;
              }
              result = PDAsoftlightPDA_13357(result, v61, v60, HIBYTE(v60));
              v60 = result;
LABEL_149:
              *v24 = v60;
            }
          }
          ++v26;
          ++v24;
          --v59;
        }
        while (v59);
        v26 += v147;
        v24 += v27;
        if (!--v4)
          return result;
      }
    case 21:
      while (1)
      {
        v62 = v150;
        do
        {
          if (*(_BYTE *)v26)
          {
            v63 = *(_DWORD *)(v20 + 4 * *(unsigned __int8 *)v26);
            if (HIBYTE(v63))
            {
              result = *v24;
              if (v6)
              {
                v64 = BYTE3(result);
                if (!BYTE3(result))
                  goto LABEL_161;
              }
              else
              {
                v64 = 255;
              }
              result = PDAhardlightPDA_13356(result, v64, v63, HIBYTE(v63));
              v63 = result;
LABEL_161:
              *v24 = v63;
            }
          }
          ++v26;
          ++v24;
          --v62;
        }
        while (v62);
        v26 += v147;
        v24 += v27;
        if (!--v4)
          return result;
      }
    case 22:
      while (1)
      {
        v65 = v150;
        do
        {
          if (*(_BYTE *)v26)
          {
            v66 = *(_DWORD *)(v20 + 4 * *(unsigned __int8 *)v26);
            if (HIBYTE(v66))
            {
              result = *v24;
              if (v6)
              {
                v67 = BYTE3(result);
                if (!BYTE3(result))
                  goto LABEL_173;
              }
              else
              {
                v67 = 255;
              }
              result = PDAdifferencePDA_13358(result, v67, v66, HIBYTE(v66));
              v66 = result;
LABEL_173:
              *v24 = v66;
            }
          }
          ++v26;
          ++v24;
          --v65;
        }
        while (v65);
        v26 += v147;
        v24 += v27;
        if (!--v4)
          return result;
      }
    case 23:
      while (1)
      {
        v68 = v150;
        do
        {
          if (*(_BYTE *)v26)
          {
            v69 = *(_DWORD *)(v20 + 4 * *(unsigned __int8 *)v26);
            if (HIBYTE(v69))
            {
              result = *v24;
              if (v6)
              {
                v70 = BYTE3(result);
                if (!BYTE3(result))
                  goto LABEL_185;
              }
              else
              {
                v70 = 255;
              }
              result = PDAexclusionPDA_13359(result, v70, v69, HIBYTE(v69));
              v69 = result;
LABEL_185:
              *v24 = v69;
            }
          }
          ++v26;
          ++v24;
          --v68;
        }
        while (v68);
        v26 += v147;
        v24 += v27;
        if (!--v4)
          return result;
      }
    case 24:
      while (1)
      {
        v71 = v150;
        do
        {
          if (*(_BYTE *)v26)
          {
            v72 = *(_DWORD *)(v20 + 4 * *(unsigned __int8 *)v26);
            if (HIBYTE(v72))
            {
              result = *v24;
              if (v6)
              {
                v73 = BYTE3(result);
                if (!BYTE3(result))
                  goto LABEL_197;
              }
              else
              {
                v73 = 255;
              }
              result = PDAhuePDA_13360(result, v73, v72, HIBYTE(v72));
              v72 = result;
LABEL_197:
              *v24 = v72;
            }
          }
          ++v26;
          ++v24;
          --v71;
        }
        while (v71);
        v26 += v147;
        v24 += v27;
        if (!--v4)
          return result;
      }
    case 25:
      while (1)
      {
        v74 = v150;
        do
        {
          if (*(_BYTE *)v26)
          {
            v75 = *(_DWORD *)(v20 + 4 * *(unsigned __int8 *)v26);
            if (HIBYTE(v75))
            {
              result = *v24;
              if (v6)
              {
                v76 = BYTE3(result);
                if (!BYTE3(result))
                  goto LABEL_209;
              }
              else
              {
                v76 = 255;
              }
              result = PDAsaturationPDA_13361(result, v76, v75, HIBYTE(v75));
              v75 = result;
LABEL_209:
              *v24 = v75;
            }
          }
          ++v26;
          ++v24;
          --v74;
        }
        while (v74);
        v26 += v147;
        v24 += v27;
        if (!--v4)
          return result;
      }
    case 26:
      while (1)
      {
        v77 = v150;
        do
        {
          if (*(_BYTE *)v26)
          {
            result = *(unsigned int *)(v20 + 4 * *(unsigned __int8 *)v26);
            if (BYTE3(result))
            {
              v78 = *v24;
              if (v6)
              {
                v79 = HIBYTE(v78);
                if (!HIBYTE(v78))
                  goto LABEL_221;
              }
              else
              {
                v79 = 255;
              }
              result = PDAluminosityPDA_13362(result, BYTE3(result), v78, v79);
LABEL_221:
              *v24 = result;
            }
          }
          ++v26;
          ++v24;
          --v77;
        }
        while (v77);
        v26 += v147;
        v24 += v27;
        if (!--v4)
          return result;
      }
    case 27:
      while (1)
      {
        v80 = v150;
        do
        {
          if (*(_BYTE *)v26)
          {
            v81 = *(_DWORD *)(v20 + 4 * *(unsigned __int8 *)v26);
            if (HIBYTE(v81))
            {
              result = *v24;
              if (v6)
              {
                v82 = BYTE3(result);
                if (!BYTE3(result))
                  goto LABEL_233;
              }
              else
              {
                v82 = 255;
              }
              result = PDAluminosityPDA_13362(result, v82, v81, HIBYTE(v81));
              v81 = result;
LABEL_233:
              *v24 = v81;
            }
          }
          ++v26;
          ++v24;
          --v80;
        }
        while (v80);
        v26 += v147;
        v24 += v27;
        if (!--v4)
          return result;
      }
    case 28:
      while (1)
      {
        v83 = v150;
        do
        {
          if (*(_BYTE *)v26)
          {
            v84 = *(_DWORD *)(v20 + 4 * *(unsigned __int8 *)v26);
            if (HIBYTE(v84))
            {
              result = *v24;
              if (v6)
              {
                v85 = BYTE3(result);
                if (!BYTE3(result))
                  goto LABEL_245;
              }
              else
              {
                v85 = 255;
              }
              result = PDAtranspose_huePDA_13363(result, v85, v84, HIBYTE(v84));
              v84 = result;
LABEL_245:
              *v24 = v84;
            }
          }
          ++v26;
          ++v24;
          --v83;
        }
        while (v83);
        v26 += v147;
        v24 += v27;
        if (!--v4)
          return result;
      }
    case 29:
      while (1)
      {
        v86 = v150;
        do
        {
          if (*(_BYTE *)v26)
          {
            v87 = *(_DWORD *)(v20 + 4 * *(unsigned __int8 *)v26);
            if (HIBYTE(v87))
            {
              result = *v24;
              if (v6)
              {
                v88 = BYTE3(result);
                if (!BYTE3(result))
                  goto LABEL_257;
              }
              else
              {
                v88 = 255;
              }
              result = PDAtranspose_saturationPDA_13364(result, v88, v87, HIBYTE(v87));
              v87 = result;
LABEL_257:
              *v24 = v87;
            }
          }
          ++v26;
          ++v24;
          --v86;
        }
        while (v86);
        v26 += v147;
        v24 += v27;
        if (!--v4)
          return result;
      }
    case 30:
      while (1)
      {
        v89 = v150;
        do
        {
          if (*(_BYTE *)v26)
          {
            result = *(unsigned int *)(v20 + 4 * *(unsigned __int8 *)v26);
            if (BYTE3(result))
            {
              v90 = *v24;
              if (v6)
              {
                v91 = HIBYTE(v90);
                if (!HIBYTE(v90))
                  goto LABEL_269;
              }
              else
              {
                v91 = 255;
              }
              result = PDAtranspose_luminosityPDA_13365(result, BYTE3(result), v90, v91);
LABEL_269:
              *v24 = result;
            }
          }
          ++v26;
          ++v24;
          --v89;
        }
        while (v89);
        v26 += v147;
        v24 += v27;
        if (!--v4)
          return result;
      }
    case 31:
      goto LABEL_273;
    default:
      return result;
  }
  do
  {
LABEL_273:
    v92 = v150;
    do
    {
      if (*(_BYTE *)v26)
      {
        v93 = *(_DWORD *)(v20 + 4 * *(unsigned __int8 *)v26);
        if (HIBYTE(v93))
        {
          result = *v24;
          if (v6)
          {
            v94 = BYTE3(result);
            if (!BYTE3(result))
              goto LABEL_281;
          }
          else
          {
            v94 = 255;
          }
          result = PDAtranspose_luminosityPDA_13365(result, v94, v93, HIBYTE(v93));
          v93 = result;
LABEL_281:
          *v24 = v93;
        }
      }
      ++v26;
      ++v24;
      --v92;
    }
    while (v92);
    v26 += v147;
    v24 += v27;
    --v4;
  }
  while (v4);
  return result;
}

uint64_t CGGStateGetTextDrawingMode(uint64_t a1)
{
  return *(char *)(*(_QWORD *)(a1 + 136) + 1);
}

uint64_t CGGStateGetFontSmoothingBackgroundColor(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 136) + 64);
}

CGColorRef CGColorRetain(CGColorRef color)
{
  if (color)
    CFRetain(color);
  return color;
}

uint64_t CGContextCreateWithDelegate(const void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return CGContextCreateWithDelegateAndInfo(a1, a2, a3, a4, 0, 0, a7, a8);
}

void CGContextDelegateRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

size_t CGImageGetBytesPerRow(size_t image)
{
  if (image)
    return *(_QWORD *)(image + 72);
  return image;
}

CFDataRef CGFontCopyTableForTag(CFDataRef font, uint32_t tag)
{
  if (font)
    return (CFDataRef)(*(uint64_t (**)(_QWORD, _QWORD))(*((_QWORD *)font + 2) + 424))(*((_QWORD *)font + 14), *(_QWORD *)&tag);
  return font;
}

uint64_t data_provider_retain_count(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  uint64_t result;
  unsigned int *v12;
  unsigned int v13;
  const __CFAllocator *v14;

  if (a1 == -1)
  {
    v12 = a2 + 63;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 - 1, v12));
    if (v13 == 1)
    {
      data_provider_finalize((uint64_t)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v14 = CFGetAllocator(a2);
      CFAllocatorDeallocate(v14, a2);
    }
    return 0;
  }
  if (!a1)
    return a2[63];
  if (a1 != 1)
    return 0;
  v9 = a2 + 63;
  do
  {
    v10 = __ldxr(v9);
    result = v10 + 1;
  }
  while (__stxr(result, v9));
  return result;
}

double data_provider_finalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void (*v10)(_QWORD);
  uint64_t v11;
  const void *v12;
  double result;
  _OWORD *v14;

  v8 = *(_QWORD *)(a1 + 264);
  if (v8)
    _CGHandleAssert("data_provider_finalize", 390, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProvider.c", "provider->byte_pointer == NULL", "byte pointer = %p", a6, a7, a8, v8);
  if (*(_DWORD *)(a1 + 248))
    _CGHandleAssert("data_provider_finalize", 392, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProvider.c", "CGAtomicGet(&provider->byte_ptr_retain_count) == 0", "retain count %d", a6, a7, a8, *(_DWORD *)(a1 + 248));
  if (*(_DWORD *)(a1 + 256))
    _CGHandleAssert("data_provider_finalize", 394, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProvider.c", "CGAtomicGet(&provider->data_retain_count) == 0", "data retain count %d", a6, a7, a8, *(_DWORD *)(a1 + 256));
  v10 = *(void (**)(_QWORD))(a1 + 72);
  if (v10)
    v10(*(_QWORD *)(a1 + 24));
  v11 = *(_QWORD *)(a1 + 272);
  if (v11)
    CGPropertiesRelease(v11);
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 184));
  v12 = *(const void **)(a1 + 280);
  if (v12)
    CFRelease(v12);
  result = 0.0;
  *(_OWORD *)(a1 + 20) = 0u;
  v14 = (_OWORD *)(a1 + 20);
  *(_OWORD *)((char *)v14 + 252) = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[1] = 0u;
  *((_DWORD *)v14 - 1) = 57005;
  return result;
}

void provider_for_destination_release_info(uint64_t a1)
{
  const void *v2;
  vImageConverter *v3;
  const void *v4;
  char *v5;
  void *v6;
  void *v7;
  void *v8;
  vImageConverter *v9;
  vImageConverter *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  if (!*(_BYTE *)(a1 + 724))
    CGDataProviderUnlock(*(_QWORD *)a1);
  CGDataProviderRelease(*(CGDataProviderRef *)a1);
  v2 = *(const void **)(a1 + 688);
  if (v2)
    CFRelease(v2);
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 24));
  v3 = *(vImageConverter **)(a1 + 712);
  if (v3)
    vImageConverter_Release(v3);
  v4 = *(const void **)(a1 + 696);
  if (v4)
    CFRelease(v4);
  v5 = *(char **)(a1 + 704);
  if (v5)
    CGvImageConverterCacheRelease(v5);
  v6 = *(void **)(a1 + 728);
  if (v6)
    free(v6);
  v7 = *(void **)(a1 + 744);
  if (v7)
    free(v7);
  v8 = *(void **)(a1 + 760);
  if (v8)
    free(v8);
  v9 = *(vImageConverter **)(a1 + 776);
  if (v9)
    vImageConverter_Release(v9);
  v10 = *(vImageConverter **)(a1 + 784);
  if (v10)
    vImageConverter_Release(v10);
  v11 = *(void **)(a1 + 792);
  if (v11)
    free(v11);
  v12 = *(void **)(a1 + 800);
  if (v12)
    free(v12);
  v13 = *(void **)(a1 + 808);
  if (v13)
    free(v13);
  v14 = *(void **)(a1 + 816);
  if (v14)
    free(v14);
  free((void *)a1);
}

void imageProvider_releaseInfo(CFTypeRef *a1)
{
  uint64_t v2;

  v2 = (uint64_t)a1[1];
  if (v2)
  {
    CGImageBlockSetRelease(v2);
    a1[1] = 0;
  }
  if (*a1)
    CFRelease(*a1);
  free(a1);
}

void data_release_info(_QWORD *a1)
{
  void (*v2)(_QWORD, _QWORD, _QWORD);

  v2 = (void (*)(_QWORD, _QWORD, _QWORD))a1[3];
  if (v2)
    v2(*a1, a1[2], a1[1]);
  free(a1);
}

void partial_release_info(uint64_t a1)
{
  uint64_t *v2;

  v2 = *(uint64_t **)(a1 + 40);
  if (v2)
    CGAccessSessionRelease(v2);
  CGDataProviderRelease(*(CGDataProviderRef *)a1);
  free((void *)a1);
}

_QWORD *CGImageGetMask(_QWORD *result)
{
  _QWORD *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1)
      dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_211);
    if (v2 == CGImageGetTypeID_image_type_id)
      return (_QWORD *)v1[22];
    else
      return 0;
  }
  return result;
}

const CGFloat *__cdecl CGImageGetDecode(const CGFloat *image)
{
  const CGFloat *v1;
  CFTypeID v2;

  if (image)
  {
    v1 = image;
    v2 = CFGetTypeID(image);
    if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1)
      dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_211);
    if (v2 == CGImageGetTypeID_image_type_id)
      return (const CGFloat *)*((_QWORD *)v1 + 20);
    else
      return 0;
  }
  return image;
}

_QWORD *CGImageGetMaskingColors(_QWORD *result)
{
  _QWORD *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1)
      dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_211);
    if (v2 == CGImageGetTypeID_image_type_id)
      return (_QWORD *)v1[21];
    else
      return 0;
  }
  return result;
}

size_t CGImageGetBitsPerComponent(size_t image)
{
  if (image)
    return *(_QWORD *)(image + 56);
  return image;
}

_QWORD *CGImageGetMatte(_QWORD *result)
{
  _QWORD *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1)
      dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_211);
    if (v2 == CGImageGetTypeID_image_type_id)
      return (_QWORD *)v1[23];
    else
      return 0;
  }
  return result;
}

uint64_t colorsync_transform_data_make_nonpurgeable()
{
  return 1;
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (c && *((_DWORD *)c + 4) == 1129601108)
    *(float64x2_t *)(*((_QWORD *)c + 12) + 56) = vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(*((_QWORD *)c + 12) + 56), *(float64x2_t *)(*((_QWORD *)c + 12) + 24), tx), *(float64x2_t *)(*((_QWORD *)c + 12) + 40), ty);
  else
    handle_invalid_context((char)"CGContextTranslateCTM", (uint64_t)c, v3, v4, v5, v6, v7, v8);
}

void provider_allocator_deallocate(uint64_t a1, uint64_t a2)
{
  CGDataProviderReleaseBytePtr(a2);
}

CFHashCode color_hash(CFHashCode result)
{
  CFHashCode v1;
  uint64_t v2;
  uint64_t i;

  v1 = result;
  if ((result & 0x8000000000000000) == 0)
  {
    result = *(_QWORD *)(result + 48);
    if (!result)
    {
      result = CFHash(*(CFTypeRef *)(v1 + 24));
      v2 = *(_QWORD *)(v1 + 56);
      if (v2)
      {
        for (i = 0; i != v2; ++i)
          result ^= i + (*(double *)(v1 + 64 + 8 * i) * 4294967300.0);
      }
      *(_QWORD *)(v1 + 48) = result;
    }
  }
  return result;
}

uint64_t cs_hash(uint64_t result)
{
  int8x8_t *v1;
  int8x8_t v2;

  if (result)
  {
    v1 = *(int8x8_t **)(result + 24);
    if (v1)
    {
      v2 = veor_s8(v1[7], (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v1[7].i8, *(int8x16_t *)v1[7].i8, 8uLL));
      return (v2.i32[0] ^ v2.i32[1]);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CGColorSpaceGetProcessColorModel(uint64_t a1)
{
  if (a1)
    return *(unsigned int *)(*(_QWORD *)(a1 + 24) + 28);
  else
    return 0xFFFFFFFFLL;
}

uint64_t CGImageBlockSetGetCount(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 120);
  return result;
}

void CGPathAddEllipseInRect(CGMutablePathRef path, const CGAffineTransform *m, CGRect rect)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  CFTypeID v15;
  CGRect v16;
  CGRect v17;

  if (path)
  {
    height = rect.size.height;
    width = rect.size.width;
    y = rect.origin.y;
    x = rect.origin.x;
    if (CGPathDisableTypeValidation || (v15 = CFGetTypeID(path), v15 == CGPathGetTypeID()))
    {
      {
        v17.origin.x = x;
        v17.origin.y = y;
        v17.size.width = width;
        v17.size.height = height;
        v16 = CGRectStandardize(v17);
        CG::Path::append_ellipse((CGMutablePathRef)((char *)path + 16), &v16, 1, 0, m);
      }
    }
  }
}

void CGContextAddPath(CGContextRef c, CGPathRef path)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeID v10;
  const CGAffineTransform *v11;
  CGPath *v12;
  CGContextRef v13;

  if (!c)
  {
    v13 = 0;
LABEL_10:
    handle_invalid_context((char)"CGContextAddPath", (uint64_t)v13, v2, v3, v4, v5, v6, v7);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v13 = c;
    goto LABEL_10;
  }
  if (path)
  {
    if (CGPathDisableTypeValidation || (v10 = CFGetTypeID(path), v10 == CGPathGetTypeID()))
    {
      v11 = (const CGAffineTransform *)(*((_QWORD *)c + 12) + 24);
      v12 = (CGPath *)*((_QWORD *)c + 21);
      if (v12)
        CGPathAddPath(v12, v11, path);
      else
        *((_QWORD *)c + 21) = CGPathCreateMutableCopyByTransformingPath(path, v11);
    }
  }
}

void CG::Path::add_arc_to_point(CG::Path *this, const CGPoint *a2, const CGPoint *a3, double a4, CGAffineTransform *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  __int128 v23;
  CGFloat v24;
  CGFloat v25;
  double v26;
  double v27;
  double v28;
  double v29;
  __double2 v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  BOOL v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  float64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  CGPoint v52;
  _OWORD v53[3];

  *(_QWORD *)&v21 = *(_OWORD *)&CG::Path::current_point(this, (uint64_t)a2, (uint64_t)a3, (uint64_t)a5, a6, a7, a8, a9);
  if (a5)
  {
    v23 = *(_OWORD *)&a5->c;
    v53[0] = *(_OWORD *)&a5->a;
    v53[1] = v23;
    v53[2] = *(_OWORD *)&a5->tx;
    v21 = CGPointApplyInverseAffineTransform((double *)v53, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  }
  v24 = a2->x - v21;
  v25 = a2->y - v22;
  v50 = v21;
  v51 = v22;
  v26 = a3->x - v21;
  v27 = a3->y - v22;
  if (v24 != 0.0 || (v28 = 0.0, v29 = 0.0, v25 != 0.0))
  {
    v28 = atan2(v25, v24);
    v29 = a4;
  }
  v48 = v29;
  v49 = v28;
  v30 = __sincos_stret(v28);
  v31 = 0.0;
  v32 = v25 * v30.__sinval + v30.__cosval * v24 + 0.0;
  v33 = v25 * v30.__cosval - v30.__sinval * v24 + 0.0;
  v34 = v27 * v30.__sinval + v30.__cosval * v26 + 0.0;
  v35 = v27 * v30.__cosval - v30.__sinval * v26 + 0.0;
  v36 = v32 == v34 && v33 == v35;
  v37 = 0.0;
  if (!v36)
    v37 = 3.14159265 - fabs(atan2(v35 - v33, v34 - v32));
  v42 = sin(v37 * 0.5);
  if (v42 == 0.0)
  {
    v43 = v33;
    v44 = 0.0;
    v45 = 0.0;
    v46 = v35;
  }
  else
  {
    v47 = fabs(cos(v37 * 0.5) / v42);
    v45 = v48;
    v32 = v32 - v48 * v47;
    v46 = v35;
    if (v35 <= v33)
    {
      v43 = -v48;
      v44 = v37 + -1.57079633;
      v31 = 1.57079633;
    }
    else
    {
      v44 = 1.57079633 - v37;
      v31 = -1.57079633;
      v43 = v48;
    }
  }
  v52.x = v50 + v43 * -v30.__sinval + v30.__cosval * v32 + 0.0;
  v52.y = v51 + v43 * v30.__cosval + v30.__sinval * v32 + 0.0;
  CG::Path::add_arc(this, (float64x2_t *)&v52, v45, v49 + v31, v49 + v44, v46 <= v33, a5, v38, v39, v40, v41);
}

CGPoint CGPathGetCurrentPoint(CGPathRef path)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeID v9;
  CG::Path *v10;
  int v11;
  double v12;
  double v13;
  CGPoint result;

  if (path
    && (CGPathDisableTypeValidation || (v9 = CFGetTypeID(path), v9 == CGPathGetTypeID()))
    && (v11 = *((_DWORD *)path + 4), v10 = (CGPathRef)((char *)path + 16), (v11 - 10) > 0xFFFFFFF6))
  {
    *(_QWORD *)&v12 = *(_OWORD *)&CG::Path::current_point(v10, v1, v2, v3, v4, v5, v6, v7);
  }
  else
  {
    CGPostError((uint64_t)"%s: no current point.", v1, v2, v3, v4, v5, v6, v7, (char)"CGPathGetCurrentPoint");
    v12 = 0.0;
    v13 = 0.0;
  }
  result.y = v13;
  result.x = v12;
  return result;
}

float64x2_t CG::Path::current_point(CG::Path *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float64x2_t result;
  const void *v14;
  unsigned int i;
  int v16;
  unsigned int v17;
  int32x2_t v18;
  int64x2_t v19;
  const CGPoint *v20;
  uint64_t v21;
  int32x2_t v22;
  int64x2_t v23;
  int8x16_t v24;
  int8x16_t v25;

  result = 0uLL;
  switch(*(_DWORD *)this)
  {
    case 0:
      return result;
    case 1:
      return *(float64x2_t *)((char *)this + 40);
    case 2:
    case 4:
      __asm { FMOV            V3.2D, #0.5 }
      return vaddq_f64(*(float64x2_t *)((char *)this + 40), vaddq_f64(*(float64x2_t *)((char *)this + 8), vmulq_f64(*(float64x2_t *)((char *)this + 24), _Q3)));
    case 3:
      return vaddq_f64(*(float64x2_t *)((char *)this + 40), vaddq_f64(*(float64x2_t *)((char *)this + 8), vmulq_n_f64(*(float64x2_t *)((char *)this + 24), (1.0 - *((double *)this + 10) + *((double *)this + 12)) * 0.5)));
    case 5:
      return *(float64x2_t *)((char *)this + 24);
    case 6:
      return vaddq_f64(*(float64x2_t *)((char *)this + 40), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)((char *)this + 24), *((double *)this + 9)), *(float64x2_t *)((char *)this + 8), *((double *)this + 8)));
    case 7:
      v14 = (const void *)CGSRegionPathEnumerator(*((_QWORD **)this + 1));
      for (i = 0; ; i |= v17)
      {
        v16 = CGSNextPoint((uint64_t)v14, (double *)v25.i64);
        if (!v16)
          break;
        v17 = v16 < 0;
        v18 = vdup_n_s32(v17);
        v19.i64[0] = v18.u32[0];
        v19.i64[1] = v18.u32[1];
        v24 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v19, 0x3FuLL)), v25, v24);
      }
      CGSReleaseRegionEnumerator(v14);
      v22 = vdup_n_s32(i);
      v23.i64[0] = v22.u32[0];
      v23.i64[1] = v22.u32[1];
      return (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v23, 0x3FuLL)), v24, v25);
    case 8:
      if (*((_WORD *)this + 4))
        v20 = (const CGPoint *)((char *)this + 16 * *((unsigned __int16 *)this + 4));
      else
        v20 = &CGPointZero;
      return *(float64x2_t *)v20;
    case 9:
      v21 = *((_QWORD *)this + 1);
      if (v21)
        v20 = (const CGPoint *)(*((_QWORD *)this + 4) + 16 * v21 - 16);
      else
        v20 = &CGPointZero;
      return *(float64x2_t *)v20;
    default:
      _CGHandleAssert("current_point", 1593, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Paths/path.cc", "0", "unhandled type %u", a6, a7, a8, *(_DWORD *)this);
  }
}

void CGPathAddArc(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y, CGFloat radius, CGFloat startAngle, CGFloat endAngle, BOOL clockwise)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  CGMutablePathRef v20;
  CGPath *v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const CGAffineTransform *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  CGPoint v44;

  if (path)
  {
    v13 = clockwise;
    v20 = path;
    if (CGPathDisableTypeValidation
      || (v21 = (CGPath *)CFGetTypeID(path), path = (CGMutablePathRef)CGPathGetTypeID(), v21 == path))
    {
      v22 = CGFloatValidateWithLog(x, (uint64_t)path, (uint64_t)m, clockwise, v8, v9, v10, v11, v12);
      if (v22
        && CGFloatValidateWithLog(y, v22, v23, v24, v25, v26, v27, v28, v29)
      {
        if (fabs(startAngle) > 6283.18531 || fabs(endAngle) > 6283.18531)
        {
          CGPostError((uint64_t)"%s: invalid value for start or end angle.", v37, v38, v39, v40, v41, v42, v43, (char)"CGPathAddArc");
        }
        else
        {
          v44.x = x;
          v44.y = y;
          CG::Path::add_arc((CGMutablePathRef)((char *)v20 + 16), (float64x2_t *)&v44, radius, startAngle, endAngle, v13, (CGAffineTransform *)m, v40, v41, v42, v43);
        }
      }
    }
  }
}

void CG::Path::add_arc(CG::Path *this, float64x2_t *a2, float64_t a3, double a4, double a5, int a6, CGAffineTransform *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  double v12;
  int v14;
  CGRect v16;

  if ((*(_DWORD *)this - 10) <= 0xFFFFFFF6)
  {
    v12 = a5 + -6.28318531;
    if (a4 == 0.0 && a5 >= 6.28318531 && v12 < 0.000001 && a6 != 0)
    {
      v16.origin = (CGPoint)vsubq_f64(*a2, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a3, 0));
      v16.size.width = a3 + a3;
      v16.size.height = a3 + a3;
      v14 = 1;
LABEL_16:
      CG::Path::append_ellipse(this, &v16, 0, v14, a7);
      return;
    }
    if (a4 == 0.0 && fabs(v12) < 0.000001 && a6 == 0)
    {
      v16.origin = (CGPoint)vsubq_f64(*a2, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a3, 0));
      v16.size.width = a3 + a3;
      v16.size.height = a3 + a3;
      v14 = 0;
      goto LABEL_16;
    }
  }
  if (a6)
  {
    if (a4 < a5)
    {
      a4 = a4 + ceil((a4 - a5) / -6.28318531) * 6.28318531;
      if (a4 < a5)
        _CGHandleAssert("add_arc", 35, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Paths/path-subpath-arc.cc", "start >= end", "clockwise: start angle %f not less than end angle %f", a9, a10, a11, SLOBYTE(a4));
    }
  }
  else if (a5 < a4)
  {
    a5 = a5 + ceil((a5 - a4) / -6.28318531) * 6.28318531;
    if (a5 < a4)
      _CGHandleAssert("add_arc", 41, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Paths/path-subpath-arc.cc", "end >= start", "widdershins: end angle %f not less than start angle %f", a9, a10, a11, SLOBYTE(a5));
  }
  CG::Path::add_arc_relative(this, a2, a3, a4, a5 - a4, (float64x2_t *)a7, 0);
}

void CG::Path::append_ellipse(CG::Path *this, const CGRect *a2, int a3, int a4, const CGAffineTransform *a5)
{
  const CGAffineTransform *v10;
  double height;
  double width;
  double v13;
  double v14;
  double v15;
  double y;
  double x;
  double v18;
  CGPoint origin;
  float64x2_t v23;
  double v30;
  double v31;
  double a;
  double b;
  double c;
  double d;
  double tx;
  double ty;
  const CGAffineTransform *v38;
  const CGAffineTransform *v39;
  const CGAffineTransform *v40;
  const CGAffineTransform *v41;
  CGPoint v42;
  CGPoint v43;
  CGPoint v44;
  double v45;
  double v46;
  double v47;
  double v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;

  if (*(_DWORD *)this)
  {
    CG::Path::reserve_space(this, 14, 6);
    width = a2->size.width;
    height = a2->size.height;
    v13 = width * 0.5;
    v44.x = width * 0.5;
    v44.y = 0.0;
    v45 = 0.0;
    v14 = -0.5;
    if (!a4)
      v14 = 0.5;
    v15 = v14 * height;
    v46 = v14 * height;
    x = a2->origin.x;
    y = a2->origin.y;
    if (width < 0.0 || height < 0.0)
    {
      v49.origin.x = a2->origin.x;
      v49.origin.y = a2->origin.y;
      v49.size.width = width;
      v49.size.height = height;
      v50 = CGRectStandardize(v49);
      v18 = v50.origin.x + v50.size.width * 0.5;
      v47 = v18;
      v50.origin.x = x;
      v50.origin.y = y;
      v50.size.width = width;
      v50.size.height = height;
      v51 = CGRectStandardize(v50);
      y = v51.origin.y;
      height = v51.size.height;
    }
    else
    {
      v18 = x + v13;
      v47 = x + v13;
    }
    v31 = y + height * 0.5;
    v48 = v31;
    if (a5)
    {
      a = a5->a;
      b = a5->b;
      c = a5->c;
      d = a5->d;
      tx = a5->tx;
      ty = a5->ty;
      v44.x = c * 0.0 + v13 * a5->a;
      v44.y = d * 0.0 + v13 * b;
      v45 = v15 * c + a * 0.0;
      v46 = v15 * d + b * 0.0;
      v47 = tx + c * v31 + v18 * a;
      v48 = d * v31 + v18 * b + ty;
    }
    CG::Path::move_to_point(this, (float64x2_t *)&v44, v10, (__n128)xmmword_185004990);
    v42 = (CGPoint)xmmword_185004A20;
    v43 = (CGPoint)xmmword_185004E80;
    CG::Path::add_curve_to_point(this, (float64x2_t *)&v43, (float64x2_t *)&v42, (float64x2_t *)&v44, v38, (float64x2_t)xmmword_185004E90);
    v42 = (CGPoint)xmmword_185004C50;
    v43 = (CGPoint)xmmword_185004EA0;
    CG::Path::add_curve_to_point(this, (float64x2_t *)&v43, (float64x2_t *)&v42, (float64x2_t *)&v44, v39, (float64x2_t)xmmword_185004EB0);
    v42 = (CGPoint)xmmword_185004C40;
    v43 = (CGPoint)xmmword_185004EC0;
    CG::Path::add_curve_to_point(this, (float64x2_t *)&v43, (float64x2_t *)&v42, (float64x2_t *)&v44, v40, (float64x2_t)xmmword_185004ED0);
    v42 = (CGPoint)xmmword_185004990;
    v43 = (CGPoint)xmmword_185004EE0;
    CG::Path::add_curve_to_point(this, (float64x2_t *)&v43, (float64x2_t *)&v42, (float64x2_t *)&v44, v41, (float64x2_t)xmmword_185004EF0);
    if (a3)
      CG::Path::close_subpath(this);
  }
  else
  {
    origin = a2->origin;
    _D2 = a2->size.width;
    _D1 = a2->size.height;
    *(_DWORD *)this = 4;
    if (a5)
    {
      _Q5 = *(_OWORD *)&a5->a;
      v23 = *(float64x2_t *)&a5->c;
      _D16 = 0;
      __asm { FMLA            D4, D2, V5.D[1] }
      v30 = vmlad_n_f64(_D1 * v23.f64[0], 0.0, a5->a);
      __asm { FMLA            D1, D16, V5.D[1] }
      origin = (CGPoint)vaddq_f64(*(float64x2_t *)&a5->tx, vmlaq_n_f64(vmulq_laneq_f64(v23, (float64x2_t)origin, 1), *(float64x2_t *)&a5->a, origin.x));
      _D2 = vmlad_n_f64(0.0 * v23.f64[0], _D2, a5->a);
    }
    else
    {
      v30 = 0.0;
      _D4 = 0;
    }
    *((double *)this + 1) = _D2;
    *((_QWORD *)this + 2) = _D4;
    *((double *)this + 3) = v30;
    *((double *)this + 4) = _D1;
    *(CGPoint *)((char *)this + 40) = origin;
    *((_BYTE *)this + 56) = a4;
    *((_BYTE *)this + 57) = a3;
  }
}

void CG::Path::move_to_point(CG::Path *this, float64x2_t *a2, const CGAffineTransform *a3, __n128 a4)
{
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  float64x2_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float64x2_t v16;
  float64x2_t v17;
  uint64_t i;
  float64x2_t v19;
  __n128 v20;

  if (a2)
    a4 = (__n128)vaddq_f64(a2[2], vmlaq_n_f64(vmulq_laneq_f64(a2[1], (float64x2_t)a4, 1), *a2, a4.n128_f64[0]));
  v5 = *(_DWORD *)this;
  v20 = a4;
  if (*(_DWORD *)this == 9)
    goto LABEL_13;
  if (v5 == 8)
    goto LABEL_7;
  if (!v5)
  {
    *(_DWORD *)this = 8;
LABEL_7:
    v6 = *((unsigned __int16 *)this + 4);
    if (v6 <= 6)
    {
      v7 = *((_WORD *)this + 5);
      if (*((_WORD *)this + 4) && *((_WORD *)this + 5) && !(*((_DWORD *)this + 3) >> (3 * v7 - 3)))
      {
        *((__n128 *)this + (v6 - 1) + 1) = a4;
      }
      else
      {
        *((_WORD *)this + 4) = v6 + 1;
        *((__n128 *)this + v6 + 1) = a4;
        *((_WORD *)this + 5) = v7 + 1;
      }
      return;
    }
  }
  CG::Path::convert_to_huge_(this);
  a4 = v20;
LABEL_13:
  v8 = *((_QWORD *)this + 1);
  v9 = *((_QWORD *)this + 2);
  if (v9)
    v10 = v8 == 0;
  else
    v10 = 1;
  if (v10 || (v11 = (float64x2_t *)*((_QWORD *)this + 4), *((_BYTE *)v11->f64 + *((_QWORD *)this + 3) - v9)))
  {
    *((_QWORD *)this + 9) = v8;
    *(int8x16_t *)((char *)this + 40) = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)((char *)this + 40), (float64x2_t)a4), (int8x16_t)a4, *(int8x16_t *)((char *)this + 40));
    *(int8x16_t *)((char *)this + 56) = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)a4, *(float64x2_t *)((char *)this + 56)), (int8x16_t)a4, *(int8x16_t *)((char *)this + 56));
    CG::Path::reserve_space(this, 1, 1);
    v12 = *((_QWORD *)this + 1);
    v13 = *((_QWORD *)this + 2);
    v15 = *((_QWORD *)this + 3);
    v14 = *((_QWORD *)this + 4);
    *(__n128 *)(v14 + 16 * v12) = v20;
    *((_QWORD *)this + 1) = v12 + 1;
    *((_QWORD *)this + 2) = v13 + 1;
    *(_BYTE *)(v14 + v15 - (v13 + 1)) = 0;
  }
  else
  {
    v11[v8 - 1] = (float64x2_t)a4;
    v16 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    *(float64x2_t *)((char *)this + 40) = v16;
    v17 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    *(float64x2_t *)((char *)this + 56) = v17;
    for (i = *((_QWORD *)this + 1); i; --i)
    {
      v19 = *v11++;
      v16 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v16, v19), (int8x16_t)v19, (int8x16_t)v16);
      *(float64x2_t *)((char *)this + 40) = v16;
      v17 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v19, v17), (int8x16_t)v19, (int8x16_t)v17);
      *(float64x2_t *)((char *)this + 56) = v17;
    }
  }
}

void CG::Path::close_subpath(CG::Path *this)
{
  __int16 v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  char v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  switch(*(_DWORD *)this)
  {
    case 0:
      *(_DWORD *)this = 8;
      goto LABEL_4;
    case 1:
    case 2:
    case 3:
    case 7:
      return;
    case 4:
      *((_BYTE *)this + 57) = 1;
      return;
    case 8:
LABEL_4:
      v2 = *((_WORD *)this + 5);
      if (!v2)
        return;
      v3 = *((_DWORD *)this + 3);
      if ((v3 >> (3 * v2 - 3)) == 4)
        return;
      v4 = *((unsigned __int16 *)this + 4);
      if (v4 > 6)
      {
LABEL_12:
        CG::Path::convert_to_huge_(this);
LABEL_13:
        v9 = *((_QWORD *)this + 2);
        if (v9 && *(_BYTE *)(*((_QWORD *)this + 4) + *((_QWORD *)this + 3) - v9) != 4)
        {
          CG::Path::reserve_space(this, 1, 1);
          v11 = *((_QWORD *)this + 3);
          v10 = *((_QWORD *)this + 4);
          v12 = *((_QWORD *)this + 1);
          v13 = *((_QWORD *)this + 2);
          *(_OWORD *)(v10 + 16 * v12) = *(_OWORD *)(v10 + 16 * *((_QWORD *)this + 9));
          ++v13;
          *((_QWORD *)this + 1) = v12 + 1;
          *((_QWORD *)this + 2) = v13;
          *(_BYTE *)(v10 + v11 - v13) = 4;
          ++*((_QWORD *)this + 10);
        }
      }
      else
      {
        v5 = v4 - 1;
        v6 = 3 * v2 - 3;
        v7 = *((unsigned __int16 *)this + 5);
        do
        {
          if (((v3 >> v6) & 7) == 0)
            break;
          v5 -= point_counts[(v3 >> v6) & 7];
          v6 -= 3;
          v8 = __OFSUB__(v7--, 1);
        }
        while (!((v7 < 0) ^ v8 | (v7 == 0)));
        *((_WORD *)this + 4) = v4 + 1;
        *((_OWORD *)this + v4 + 1) = *((_OWORD *)this + v5 + 1);
        *((_DWORD *)this + 3) = v3 | (4 << (3 * v2));
        *((_WORD *)this + 5) = v2 + 1;
      }
      return;
    case 9:
      goto LABEL_13;
    default:
      goto LABEL_12;
  }
}

void CG::Path::reserve_space(CG::Path *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  char *v14;

  if (*(_DWORD *)this != 9)
    CG::Path::convert_to_huge_(this);
  v6 = *((_QWORD *)this + 1);
  v7 = __CFADD__(a2, v6);
  v8 = a2 + v6;
  if (v7
    || (v9 = *((_QWORD *)this + 2), v7 = __CFADD__(a3, v9), v10 = a3 + v9, v7)
    || v8 >> 60
    || (v7 = __CFADD__(v10, 16 * v8), v11 = v10 + 16 * v8, v7)
    || (v12 = *((_QWORD *)this + 3), v12 >= 0x7FFFFFFFFFFFFFFFLL))
  {
    abort();
  }
  if (v11 > v12)
  {
    if (v11 <= 2 * v12)
      v11 = 2 * v12;
    if (v11 <= 0x110)
      v13 = 272;
    else
      v13 = v11;
    v14 = (char *)malloc_type_malloc(v13, 0x6AE0B856uLL);
    memcpy(v14, *((const void **)this + 4), 16 * *((_QWORD *)this + 1));
    memcpy(&v14[v13 - *((_QWORD *)this + 2)], (const void *)(*((_QWORD *)this + 4) + *((_QWORD *)this + 3) - *((_QWORD *)this + 2)), *((_QWORD *)this + 2));
    free(*((void **)this + 4));
    *((_QWORD *)this + 3) = v13;
    *((_QWORD *)this + 4) = v14;
  }
}

float64x2_t CG::Path::add_curve_to_point(CG::Path *this, float64x2_t *a2, float64x2_t *a3, float64x2_t *a4, const CGAffineTransform *a5, float64x2_t result)
{
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  int v11;
  uint64_t v12;
  float64x2_t *v13;
  __int16 v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float64x2_t *v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;

  if (a4)
  {
    v7 = a4[1];
    v8 = a4[2];
    result = vaddq_f64(v8, vmlaq_n_f64(vmulq_laneq_f64(v7, result, 1), *a4, result.f64[0]));
    v9 = vaddq_f64(v8, vmlaq_n_f64(vmulq_n_f64(v7, a2->f64[1]), *a4, a2->f64[0]));
    v10 = vaddq_f64(v8, vmlaq_n_f64(vmulq_n_f64(v7, a3->f64[1]), *a4, a3->f64[0]));
  }
  else
  {
    v9 = *a2;
    v10 = *a3;
  }
  v11 = *(_DWORD *)this;
  v25 = v9;
  v26 = result;
  v24 = v10;
  if (*(_DWORD *)this == 9)
    goto LABEL_11;
  if (v11 == 8)
    goto LABEL_8;
  if (!v11)
  {
    *(_DWORD *)this = 8;
LABEL_8:
    v12 = *((unsigned __int16 *)this + 4);
    if (v12 <= 4)
    {
      *((float64x2_t *)this + v12 + 1) = result;
      v13 = (float64x2_t *)((char *)this + 16 * v12 + 16);
      *((_WORD *)this + 4) = v12 + 3;
      v13[1] = v9;
      v13[2] = v10;
      v14 = *((_WORD *)this + 5);
      *((_DWORD *)this + 3) |= 3 << (3 * v14);
      *((_WORD *)this + 5) = v14 + 1;
      return result;
    }
  }
  CG::Path::convert_to_huge_(this);
  v10 = v24;
  v9 = v25;
  result = v26;
LABEL_11:
  v15 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)((char *)this + 40), result), (int8x16_t)result, *(int8x16_t *)((char *)this + 40));
  v16 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v15, v9), (int8x16_t)v9, (int8x16_t)v15);
  *(int8x16_t *)((char *)this + 40) = vbslq_s8((int8x16_t)vcgtq_f64(v16, v10), (int8x16_t)v10, (int8x16_t)v16);
  v17 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(result, *(float64x2_t *)((char *)this + 56)), (int8x16_t)result, *(int8x16_t *)((char *)this + 56));
  v18 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v9, v17), (int8x16_t)v9, (int8x16_t)v17);
  *(int8x16_t *)((char *)this + 56) = vbslq_s8((int8x16_t)vcgtq_f64(v10, v18), (int8x16_t)v10, (int8x16_t)v18);
  CG::Path::reserve_space(this, 3, 1);
  v20 = *((_QWORD *)this + 3);
  v19 = *((_QWORD *)this + 4);
  v21 = *((_QWORD *)this + 1);
  v22 = *((_QWORD *)this + 2);
  v23 = (float64x2_t *)(v19 + 16 * v21);
  *v23 = v26;
  v23[1] = v25;
  result = v24;
  v23[2] = v24;
  ++v22;
  *((_QWORD *)this + 1) = v21 + 3;
  *((_QWORD *)this + 2) = v22;
  *(_BYTE *)(v19 + v20 - v22) = 3;
  return result;
}

float64x2_t CG::Path::add_line_to_point(CG::Path *this, float64x2_t *a2, const CGAffineTransform *a3, float64x2_t result)
{
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float64x2_t v12;

  if (a2)
    result = vaddq_f64(a2[2], vmlaq_n_f64(vmulq_laneq_f64(a2[1], result, 1), *a2, result.f64[0]));
  v5 = *(_DWORD *)this;
  v12 = result;
  if (*(_DWORD *)this == 9)
    goto LABEL_10;
  if (v5 == 8)
    goto LABEL_7;
  if (!v5)
  {
    *(_DWORD *)this = 8;
LABEL_7:
    v6 = *((unsigned __int16 *)this + 4);
    if (v6 <= 6)
    {
      *((_WORD *)this + 4) = v6 + 1;
      *((float64x2_t *)this + v6 + 1) = result;
      v7 = *((_WORD *)this + 5);
      *((_DWORD *)this + 3) |= 1 << (3 * v7);
      *((_WORD *)this + 5) = v7 + 1;
      return result;
    }
  }
  CG::Path::convert_to_huge_(this);
  result = v12;
LABEL_10:
  *(int8x16_t *)((char *)this + 40) = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)((char *)this + 40), result), (int8x16_t)result, *(int8x16_t *)((char *)this + 40));
  *(int8x16_t *)((char *)this + 56) = vbslq_s8((int8x16_t)vcgtq_f64(result, *(float64x2_t *)((char *)this + 56)), (int8x16_t)result, *(int8x16_t *)((char *)this + 56));
  CG::Path::reserve_space(this, 1, 1);
  v8 = *((_QWORD *)this + 1);
  v9 = *((_QWORD *)this + 2);
  v11 = *((_QWORD *)this + 3);
  v10 = *((_QWORD *)this + 4);
  result = v12;
  *(float64x2_t *)(v10 + 16 * v8) = v12;
  *((_QWORD *)this + 1) = v8 + 1;
  *((_QWORD *)this + 2) = v9 + 1;
  *(_BYTE *)(v10 + v11 - (v9 + 1)) = 1;
  return result;
}

float64x2_t CG::Path::add_quad_curve_to_point(CG::Path *this, float64x2_t *a2, float64x2_t *a3, const CGAffineTransform *a4, float64x2_t result)
{
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  float64x2_t v12;
  float64x2_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float64x2_t *v18;
  float64x2_t v19;
  float64x2_t v20;

  if (a3)
  {
    v6 = a3[1];
    v7 = a3[2];
    result = vaddq_f64(v7, vmlaq_n_f64(vmulq_laneq_f64(v6, result, 1), *a3, result.f64[0]));
    v8 = vaddq_f64(v7, vmlaq_n_f64(vmulq_n_f64(v6, a2->f64[1]), *a3, a2->f64[0]));
  }
  else
  {
    v8 = *a2;
  }
  v9 = *(_DWORD *)this;
  v19 = v8;
  v20 = result;
  if (*(_DWORD *)this == 9)
    goto LABEL_11;
  if (v9 == 8)
    goto LABEL_8;
  if (!v9)
  {
    *(_DWORD *)this = 8;
LABEL_8:
    v10 = *((unsigned __int16 *)this + 4);
    if (v10 <= 5)
    {
      *((float64x2_t *)this + v10 + 1) = result;
      *((_WORD *)this + 4) = v10 + 2;
      *((float64x2_t *)this + v10 + 2) = v8;
      v11 = *((_WORD *)this + 5);
      *((_DWORD *)this + 3) |= 2 << (3 * v11);
      *((_WORD *)this + 5) = v11 + 1;
      return result;
    }
  }
  CG::Path::convert_to_huge_(this);
  v8 = v19;
  result = v20;
LABEL_11:
  v12 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)((char *)this + 40), result), (int8x16_t)result, *(int8x16_t *)((char *)this + 40));
  *(int8x16_t *)((char *)this + 40) = vbslq_s8((int8x16_t)vcgtq_f64(v12, v8), (int8x16_t)v8, (int8x16_t)v12);
  v13 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(result, *(float64x2_t *)((char *)this + 56)), (int8x16_t)result, *(int8x16_t *)((char *)this + 56));
  *(int8x16_t *)((char *)this + 56) = vbslq_s8((int8x16_t)vcgtq_f64(v8, v13), (int8x16_t)v8, (int8x16_t)v13);
  CG::Path::reserve_space(this, 2, 1);
  v15 = *((_QWORD *)this + 3);
  v14 = *((_QWORD *)this + 4);
  v16 = *((_QWORD *)this + 1);
  v17 = *((_QWORD *)this + 2);
  v18 = (float64x2_t *)(v14 + 16 * v16);
  result = v19;
  *v18 = v20;
  v18[1] = v19;
  ++v17;
  *((_QWORD *)this + 1) = v16 + 2;
  *((_QWORD *)this + 2) = v17;
  *(_BYTE *)(v14 + v15 - v17) = 2;
  return result;
}

void CG::Path::~Path(void **this)
{
  const void *v1;

  if (*(_DWORD *)this == 9)
  {
    free(this[4]);
  }
  else if (*(_DWORD *)this == 7)
  {
    v1 = this[1];
    if (v1)
      CFRelease(v1);
  }
}

CGMutablePathRef CGPathCreateMutableCopyByTransformingPath(CGPathRef path, const CGAffineTransform *transform)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeID v10;
  CFTypeID TypeID;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Instance;
  CGPath *v19;
  CG::Path *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (!path)
    return 0;
  if (!CGPathDisableTypeValidation)
  {
    v10 = CFGetTypeID(path);
    if (v10 != CGPathGetTypeID())
      return 0;
  }
    return 0;
  TypeID = CGPathGetTypeID();
  Instance = CGTypeCreateInstance(TypeID, 128, v12, v13, v14, v15, v16, v17);
  v19 = (CGPath *)Instance;
  if (Instance)
  {
    v20 = CG::Path::Path((CG::Path *)(Instance + 16), (CGPathRef)((char *)path + 16));
    if (transform)
    {
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)&transform->a, (float64x2_t)xmmword_185004990), (int32x4_t)vceqq_f64(*(float64x2_t *)&transform->c, (float64x2_t)xmmword_185004A20))))) & 1) != 0|| transform->tx != 0.0|| transform->ty != 0.0)
      {
        CG::Path::apply_transform(v20, transform, v21, v22, v23, v24, v25, v26);
      }
    }
  }
  return v19;
}

CG::Path *CG::Path::Path(CG::Path *this, const CG::Path *a2)
{
  int v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  CFTypeRef v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  size_t v23;
  void *v24;

  v3 = *(_DWORD *)a2;
  *(_DWORD *)this = *(_DWORD *)a2;
  switch(v3)
  {
    case 1:
      v5 = *(_OWORD *)((char *)a2 + 8);
      v6 = *(_OWORD *)((char *)a2 + 24);
      v7 = *(_OWORD *)((char *)a2 + 40);
      goto LABEL_6;
    case 2:
      v5 = *(_OWORD *)((char *)a2 + 8);
      v6 = *(_OWORD *)((char *)a2 + 24);
      v7 = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 56);
      goto LABEL_6;
    case 3:
      v8 = *(_OWORD *)((char *)a2 + 8);
      v9 = *(_OWORD *)((char *)a2 + 24);
      *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)this + 24) = v9;
      *(_OWORD *)((char *)this + 8) = v8;
      v10 = *(_OWORD *)((char *)a2 + 56);
      v11 = *(_OWORD *)((char *)a2 + 72);
      v12 = *(_OWORD *)((char *)a2 + 88);
      *(_OWORD *)((char *)this + 104) = *(_OWORD *)((char *)a2 + 104);
      *(_OWORD *)((char *)this + 88) = v12;
      *(_OWORD *)((char *)this + 72) = v11;
      goto LABEL_15;
    case 4:
      v5 = *(_OWORD *)((char *)a2 + 8);
      v6 = *(_OWORD *)((char *)a2 + 24);
      v7 = *(_OWORD *)((char *)a2 + 40);
      *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
LABEL_6:
      *(_OWORD *)((char *)this + 40) = v7;
      goto LABEL_8;
    case 5:
      v5 = *(_OWORD *)((char *)a2 + 8);
      v6 = *(_OWORD *)((char *)a2 + 24);
LABEL_8:
      *(_OWORD *)((char *)this + 24) = v6;
      *(_OWORD *)((char *)this + 8) = v5;
      break;
    case 6:
      *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
      v13 = *(_OWORD *)((char *)a2 + 24);
      v14 = *(_OWORD *)((char *)a2 + 40);
      v15 = *(_OWORD *)((char *)a2 + 56);
      *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
      *(_OWORD *)((char *)this + 56) = v15;
      *(_OWORD *)((char *)this + 40) = v14;
      *(_OWORD *)((char *)this + 24) = v13;
      break;
    case 7:
      v16 = (CFTypeRef)*((_QWORD *)a2 + 1);
      if (v16)
        v16 = CFRetain(v16);
      *((_QWORD *)this + 1) = v16;
      break;
    case 8:
      v17 = *(_OWORD *)((char *)a2 + 8);
      v18 = *(_OWORD *)((char *)a2 + 24);
      v19 = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 56);
      *(_OWORD *)((char *)this + 40) = v19;
      *(_OWORD *)((char *)this + 24) = v18;
      *(_OWORD *)((char *)this + 8) = v17;
      v20 = *(_OWORD *)((char *)a2 + 72);
      v21 = *(_OWORD *)((char *)a2 + 88);
      v22 = *(_OWORD *)((char *)a2 + 104);
      *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
      *(_OWORD *)((char *)this + 104) = v22;
      *(_OWORD *)((char *)this + 88) = v21;
      *(_OWORD *)((char *)this + 72) = v20;
      break;
    case 9:
      *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
      *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
      v23 = *((_QWORD *)a2 + 3);
      *((_QWORD *)this + 3) = v23;
      *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
      v24 = malloc_type_malloc(v23, 0xA6C2B256uLL);
      *((_QWORD *)this + 4) = v24;
      memcpy(v24, *((const void **)a2 + 4), 16 * *((_QWORD *)this + 1));
      memcpy((void *)(*((_QWORD *)this + 4) + *((_QWORD *)this + 3) - *((_QWORD *)this + 2)), (const void *)(*((_QWORD *)a2 + 4) + *((_QWORD *)this + 3) - *((_QWORD *)this + 2)), *((_QWORD *)this + 2));
      *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 40);
      v10 = *(_OWORD *)((char *)a2 + 56);
LABEL_15:
      *(_OWORD *)((char *)this + 56) = v10;
      break;
    default:
      return this;
  }
  return this;
}

double *create_color(_QWORD *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeID v10;
  double *v11;
  uint64_t v12;
  uint64_t Instance;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!a1)
    return 0;
  v10 = CFGetTypeID(a1);
  if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1)
    dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_77);
  v11 = 0;
  if (a2 && v10 == CGColorSpaceGetTypeID_type_id)
  {
    v12 = *(_QWORD *)(a1[3] + 40) + 1;
    if (kCGColorComponents_block_invoke_once != -1)
      dispatch_once(&kCGColorComponents_block_invoke_once, &__block_literal_global_24_2179);
    Instance = CGTypeCreateInstance(CGColorGetTypeID_color_type_id, 8 * v12 + 48, v4, v5, v6, v7, v8, v9);
    v11 = (double *)Instance;
    if (Instance)
    {
      do
      {
        v14 = __ldxr((unsigned int *)&create_color_identifier);
        v15 = v14 + 1;
      }
      while (__stxr(v15, (unsigned int *)&create_color_identifier));
      *(_DWORD *)(Instance + 16) = v15;
      CFRetain(a1);
      *((_QWORD *)v11 + 3) = a1;
      v11[4] = 0.0;
      *((_QWORD *)v11 + 7) = v12;
      memcpy(v11 + 8, a2, 8 * v12);
      CGColorSpaceAdjustColor((uint64_t)a1, (uint64_t)a2, v11 + 8, v16, v17, v18, v19, v20);
    }
  }
  return v11;
}

uint64_t CGTypeCreateInstance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a2 > 0xFFFFFFFFLL || (result = _CFRuntimeCreateInstance()) == 0)
  {
    CGPostError((uint64_t)"%s: failed to create instance of type %jd.", a2, a3, a4, a5, a6, a7, a8, (char)"CGTypeCreateInstance");
    return 0;
  }
  return result;
}

uint64_t CGColorSpaceAdjustColor(uint64_t result, uint64_t a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double *v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double *v14;
  double v15;
  BOOL v16;
  double *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;

  if (result)
  {
    v8 = a3;
    v9 = (double *)a2;
    v10 = *(_QWORD *)(result + 24);
    if (!a2)
      v9 = *(double **)(v10 + 32);
    v11 = *(_QWORD *)(v10 + 40);
    v12 = v9[v11];
    v13 = 0.0;
    if (v12 >= 0.0)
    {
      v13 = v9[v11];
      if (v12 > 1.0)
        v13 = 1.0;
    }
    if (v13 != a3[v11])
      a3[v11] = v13;
    switch(*(_DWORD *)(v10 + 20))
    {
      case 5:
        v17 = *(double **)(v10 + 88);
        v18 = 0.0;
        if (*v9 >= 0.0)
        {
          v18 = *v9;
          if (*v9 > 100.0)
            v18 = 100.0;
        }
        if (v18 != *a3)
          *a3 = v18;
        v19 = v9[1];
        v20 = v17[6];
        if (v19 >= v20)
        {
          v20 = v9[1];
          if (v19 > v17[7])
            v20 = v17[7];
        }
        if (v20 != a3[1])
          a3[1] = v20;
        v21 = v9[2];
        v22 = v17[8];
        if (v21 >= v22)
        {
          v22 = v9[2];
          if (v21 > v17[9])
            v22 = v17[9];
        }
        if (v22 != a3[2])
          a3[2] = v22;
        return result;
      case 6:
      case 0xA:
      case 0xB:
        result = CGColorSpaceICCGetRange(result, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (!v11)
          return result;
        v14 = (double *)(result + 8);
        break;
      case 7:
        v23 = (int)(*v9 + 0.5);
        if (v23 < 0)
        {
          v24 = 0.0;
        }
        else
        {
          v24 = (double)v23;
          if ((double)v23 > (double)*(unint64_t *)(*(_QWORD *)(v10 + 88) + 8))
            v24 = (double)*(unint64_t *)(*(_QWORD *)(v10 + 88) + 8);
        }
        if (v24 != *a3)
          *a3 = v24;
        return result;
      case 9:
        if (**(_QWORD **)(v10 + 88))
          v16 = v11 == 0;
        else
          v16 = 1;
        if (!v16)
          goto LABEL_48;
        return result;
      default:
        for (; v11; --v11)
        {
LABEL_48:
          v25 = 0.0;
          if (*v9 >= 0.0)
          {
            v25 = *v9;
            if (*v9 > 1.0)
              v25 = 1.0;
          }
          if (v25 != *v8)
            *v8 = v25;
          ++v8;
          ++v9;
        }
        return result;
    }
    do
    {
      v15 = *(v14 - 1);
      if (fabs(v15) == INFINITY || fabs(*v14) == INFINITY)
      {
        v15 = *v9;
      }
      else
      {
        if (*v9 >= v15)
        {
          v15 = *v9;
          if (*v9 > *v14)
            v15 = *v14;
        }
        if (v15 == *v8)
          goto LABEL_21;
      }
      *v8 = v15;
LABEL_21:
      ++v8;
      ++v9;
      v14 += 2;
      --v11;
    }
    while (v11);
  }
  return result;
}

CGMutablePathRef CGPathCreateMutable(void)
{
  CFTypeID TypeID;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  TypeID = CGPathGetTypeID();
  return (CGMutablePathRef)CGTypeCreateInstance(TypeID, 128, v1, v2, v3, v4, v5, v6);
}

CFTypeID CGPathGetTypeID(void)
{
  if (CGPathGetTypeID::once != -1)
    dispatch_once(&CGPathGetTypeID::once, &__block_literal_global_16054);
  if (_ZZZ15CGPathGetTypeIDEUb_E4once != -1)
    dispatch_once(&_ZZZ15CGPathGetTypeIDEUb_E4once, &__block_literal_global_21_16055);
  return CGPathGetTypeID::path_type_id;
}

uint64_t CGColorSpaceICCGetRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v10;

  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 20);
  if (v9 == 6 || v9 == 10)
  {
    v10 = *(_QWORD *)(v8 + 88) + 64;
  }
  else
  {
    if (v9 != 11)
      _CGHandleAssert("CGColorSpaceICCGetRange", 577, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpace_ICC.c", "s->state->type == kCGColorSpaceICCBased || s->state->type == kCGColorSpaceProfileSets || s->state->type == kCGColorSpaceFlexGTCProxy", "Colorspace not ICC. type = %d", a6, a7, a8, *(_DWORD *)(v8 + 20));
    v10 = *(_QWORD *)(v8 + 88) + 88;
  }
  return *(_QWORD *)v10;
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CGMutablePathRef v11;
  CGPath *v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const CGAffineTransform *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const CGAffineTransform *v28;
  __n128 v29;

  if (path)
  {
    v11 = path;
    if (CGPathDisableTypeValidation
      || (v12 = (CGPath *)CFGetTypeID(path), path = (CGMutablePathRef)CGPathGetTypeID(), v12 == path))
    {
      v13 = CGFloatValidateWithLog(x, (uint64_t)path, (uint64_t)m, v4, v5, v6, v7, v8, v9);
      if (v13
        && CGFloatValidateWithLog(y, v13, v14, v15, v16, v17, v18, v19, v20)
      {
        v29.n128_f64[0] = x;
        v29.n128_f64[1] = y;
        CG::Path::move_to_point((CGMutablePathRef)((char *)v11 + 16), (float64x2_t *)m, v28, v29);
      }
    }
  }
}

void CGPathAddCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cp1x, CGFloat cp1y, CGFloat cp2x, CGFloat cp2y, CGFloat x, CGFloat y)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CGMutablePathRef v19;
  CGPath *v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const CGAffineTransform *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const CGAffineTransform *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  CG::Path *v43;
  int v44;
  float64x2_t v45;
  CGPoint v48;
  CGPoint v49;

  if (path)
  {
    v19 = path;
    if (CGPathDisableTypeValidation
      || (v20 = (CGPath *)CFGetTypeID(path), path = (CGMutablePathRef)CGPathGetTypeID(), v20 == path))
    {
      v21 = CGFloatValidateWithLog(x, (uint64_t)path, (uint64_t)m, v8, v9, v10, v11, v12, v13);
      if (v21
        && CGFloatValidateWithLog(y, v21, v22, v23, v24, v25, v26, v27, v28)
      {
        v44 = *((_DWORD *)v19 + 4);
        v43 = (CGMutablePathRef)((char *)v19 + 16);
        if ((v44 - 10) > 0xFFFFFFF6)
        {
          v45.f64[0] = cp1x;
          v45.f64[1] = cp1y;
          v49.x = cp2x;
          v49.y = cp2y;
          v48.x = x;
          v48.y = y;
          CG::Path::add_curve_to_point(v43, (float64x2_t *)&v49, (float64x2_t *)&v48, (float64x2_t *)m, v39, v45);
        }
        else
        {
          CGPostError((uint64_t)"%s: no current point.", v36, v37, v38, (uint64_t)v39, v40, v41, v42, (char)"CGPathAddCurveToPoint");
        }
      }
    }
  }
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CGMutablePathRef v11;
  CGPath *v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const CGAffineTransform *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const CGAffineTransform *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  CG::Path *v35;
  int v36;
  float64x2_t v37;

  if (path)
  {
    v11 = path;
    if (CGPathDisableTypeValidation
      || (v12 = (CGPath *)CFGetTypeID(path), path = (CGMutablePathRef)CGPathGetTypeID(), v12 == path))
    {
      v13 = CGFloatValidateWithLog(x, (uint64_t)path, (uint64_t)m, v4, v5, v6, v7, v8, v9);
      if (v13
        && CGFloatValidateWithLog(y, v13, v14, v15, v16, v17, v18, v19, v20)
      {
        v36 = *((_DWORD *)v11 + 4);
        v35 = (CGMutablePathRef)((char *)v11 + 16);
        if ((v36 - 10) > 0xFFFFFFF6)
        {
          v37.f64[0] = x;
          v37.f64[1] = y;
          CG::Path::add_line_to_point(v35, (float64x2_t *)m, v29, v37);
        }
        else
        {
          CGPostError((uint64_t)"%s: no current point.", v28, (uint64_t)v29, v30, v31, v32, v33, v34, (char)"CGPathAddLineToPoint");
        }
      }
    }
  }
}

void CGPathAddQuadCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cpx, CGFloat cpy, CGFloat x, CGFloat y)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CGMutablePathRef v15;
  CGPath *v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const CGAffineTransform *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const CGAffineTransform *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  CG::Path *v39;
  int v40;
  float64x2_t v41;
  CGPoint v44;

  if (path)
  {
    v15 = path;
    if (CGPathDisableTypeValidation
      || (v16 = (CGPath *)CFGetTypeID(path), path = (CGMutablePathRef)CGPathGetTypeID(), v16 == path))
    {
      v17 = CGFloatValidateWithLog(x, (uint64_t)path, (uint64_t)m, v6, v7, v8, v9, v10, v11);
      if (v17
        && CGFloatValidateWithLog(y, v17, v18, v19, v20, v21, v22, v23, v24)
      {
        v40 = *((_DWORD *)v15 + 4);
        v39 = (CGMutablePathRef)((char *)v15 + 16);
        if ((v40 - 10) > 0xFFFFFFF6)
        {
          v41.f64[0] = cpx;
          v41.f64[1] = cpy;
          v44.x = x;
          v44.y = y;
          CG::Path::add_quad_curve_to_point(v39, (float64x2_t *)&v44, (float64x2_t *)m, v34, v41);
        }
        else
        {
          CGPostError((uint64_t)"%s: no current point.", v32, v33, (uint64_t)v34, v35, v36, v37, v38, (char)"CGPathAddQuadCurveToPoint");
        }
      }
    }
  }
}

BOOL CGFloatValidateWithLog(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  char v27;

  v9 = fabs(a1);
  if (v9 >= INFINITY && v9 <= INFINITY)
  {
    CGPostError((uint64_t)"Error: this application, or a library it uses, has passed an invalid numeric value (NaN, or not-a-number) to CoreGraphics API and this value is being ignored. Please fix this problem.", a3, a4, a5, a6, a7, a8, a9, v26);
    if (handle_invalid_numerics_predicate != -1)
      dispatch_once(&handle_invalid_numerics_predicate, &__block_literal_global_5_17941);
    if (handle_invalid_numerics_show_log)
    {
      v17 = CGBacktraceCreate(0);
      CGPostError((uint64_t)"Backtrace:\n%s\n", v18, v19, v20, v21, v22, v23, v24, (char)v17);
      free(v17);
    }
    else
    {
      CGPostError((uint64_t)"If you want to see the backtrace, please set CG_NUMERICS_SHOW_BACKTRACE environmental variable.\n", v10, v11, v12, v13, v14, v15, v16, v27);
    }
  }
  return v9 > INFINITY || v9 < INFINITY;
}

BOOL `anonymous namespace'::transform_is_valid(_anonymous_namespace_ *this, const CGAffineTransform *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if (!this)
    return 1;
  result = CGFloatValidateWithLog(*(double *)this, (uint64_t)this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    result = CGFloatValidateWithLog(*((double *)this + 1), result, v10, v11, v12, v13, v14, v15, v16);
    if ((_DWORD)result)
    {
      result = CGFloatValidateWithLog(*((double *)this + 2), result, v17, v18, v19, v20, v21, v22, v23);
      if ((_DWORD)result)
      {
        result = CGFloatValidateWithLog(*((double *)this + 3), result, v24, v25, v26, v27, v28, v29, v30);
        if ((_DWORD)result)
        {
          result = CGFloatValidateWithLog(*((double *)this + 4), result, v31, v32, v33, v34, v35, v36, v37);
          if ((_DWORD)result)
            return CGFloatValidateWithLog(*((double *)this + 5), result, v38, v39, v40, v41, v42, v43, v44);
        }
      }
    }
  }
  return result;
}

void CG::Path::apply_transform(CG::Path *this, const CGAffineTransform *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double ty;
  double v11;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double b;
  double c;
  double d;
  double v22;
  double v23;
  double v24;
  double v25;
  CGFloat v26;
  double v27;
  uint64_t v28;
  float64x2_t v29;
  float64x2_t v30;
  double *v31;
  float64x2_t v32;
  uint64_t v33;
  double *v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  uint64_t *v41;
  __int128 v42;
  uint64_t *v43;
  const void *v44;
  _OWORD v45[3];

  while (*(_DWORD *)this == 7)
  {
    if (fabs(a2->a) == 1.0 && fabs(a2->d) == 1.0 && a2->b == 0.0 && a2->c == 0.0)
    {
      ty = a2->ty;
      v11 = floor(ty);
      if (floor(a2->tx) == a2->tx && v11 == ty)
      {
        v41 = (uint64_t *)*((_QWORD *)this + 1);
        v42 = *(_OWORD *)&a2->c;
        v45[0] = *(_OWORD *)&a2->a;
        v45[1] = v42;
        v45[2] = *(_OWORD *)&a2->tx;
        v43 = CGRegionCreateByTransformingRegion(v41, (uint64_t)v45, 1, a4, a5, a6, a7, a8);
        v44 = (const void *)*((_QWORD *)this + 1);
        if (v44)
          CFRelease(v44);
        *((_QWORD *)this + 1) = v43;
        return;
      }
    }
    CG::Path::convert_to_huge_(this);
  }
  switch(*(_DWORD *)this)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
      v13 = *((double *)this + 1);
      v14 = *((double *)this + 2);
      v15 = *((double *)this + 3);
      v16 = *((double *)this + 4);
      v17 = *((double *)this + 5);
      v18 = *((double *)this + 6);
      b = a2->b;
      c = a2->c;
      d = a2->d;
      v22 = v14 * c + v13 * a2->a;
      v23 = v14 * d + v13 * b;
      v24 = v16 * c + v15 * a2->a;
      v25 = v16 * d + v15 * b;
      v26 = a2->tx + c * v18 + v17 * a2->a;
      v27 = d * v18 + v17 * b + a2->ty;
      *((double *)this + 1) = v22;
      *((double *)this + 2) = v23;
      *((double *)this + 3) = v24;
      *((double *)this + 4) = v25;
      *((CGFloat *)this + 5) = v26;
      *((double *)this + 6) = v27;
      break;
    case 5:
      *(float64x2_t *)((char *)this + 8) = vaddq_f64(*(float64x2_t *)&a2->tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&a2->c, *((double *)this + 2)), *(float64x2_t *)&a2->a, *((double *)this + 1)));
      *(float64x2_t *)((char *)this + 24) = vaddq_f64(*(float64x2_t *)&a2->tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&a2->c, *((double *)this + 4)), *(float64x2_t *)&a2->a, *((double *)this + 3)));
      break;
    case 8:
      v28 = *((unsigned __int16 *)this + 4);
      if (*((_WORD *)this + 4))
      {
        v29 = *(float64x2_t *)&a2->a;
        v30 = *(float64x2_t *)&a2->c;
        v31 = (double *)((char *)this + 16);
        v32 = *(float64x2_t *)&a2->tx;
        do
        {
          *(float64x2_t *)v31 = vaddq_f64(v32, vmlaq_n_f64(vmulq_n_f64(v30, v31[1]), v29, *v31));
          v31 += 2;
          --v28;
        }
        while (v28);
      }
      break;
    case 9:
      v33 = *((_QWORD *)this + 1);
      if (v33)
      {
        v34 = (double *)*((_QWORD *)this + 4);
        v35 = *(float64x2_t *)&a2->a;
        v36 = *(float64x2_t *)&a2->c;
        v37 = *(float64x2_t *)&a2->tx;
        v38 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
        v39 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
        do
        {
          v40 = vaddq_f64(v37, vmlaq_n_f64(vmulq_n_f64(v36, v34[1]), v35, *v34));
          *(float64x2_t *)v34 = v40;
          v34 += 2;
          v39 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v39, v40), (int8x16_t)v40, (int8x16_t)v39);
          v38 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v40, v38), (int8x16_t)v40, (int8x16_t)v38);
          --v33;
        }
        while (v33);
      }
      else
      {
        v38 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
        v39 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
      }
      *(float64x2_t *)((char *)this + 40) = v39;
      *(float64x2_t *)((char *)this + 56) = v38;
      break;
    default:
      return;
  }
}

int8x16_t CG::Path::append_tiny(CG::Path *this, const CGPoint *a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  unsigned int v5;
  int8x16_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const CGPoint *v17;
  uint64_t v18;
  uint64_t v19;
  const CGPoint *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  float64x2_t v26;
  float64x2_t *v27;
  float64x2_t v28;

  v5 = a5;
  CG::Path::reserve_space(this, a3, a5);
  if (v5)
  {
    v10 = 0;
    v11 = *((_QWORD *)this + 1);
    do
    {
      v12 = *((_QWORD *)this + 3);
      v13 = *((_QWORD *)this + 4);
      v14 = *((_QWORD *)this + 2) + 1;
      *((_QWORD *)this + 2) = v14;
      *(_BYTE *)(v13 + v12 - v14) = a4 & 7;
      switch(a4 & 7)
      {
        case 0u:
        case 1u:
        case 4u:
          result = (int8x16_t)a2[v10++];
          v15 = *((_QWORD *)this + 4);
          v16 = *((_QWORD *)this + 1);
          *((_QWORD *)this + 1) = v16 + 1;
          *(int8x16_t *)(v15 + 16 * v16) = result;
          goto LABEL_5;
        case 2u:
          v17 = &a2[v10];
          v18 = *((_QWORD *)this + 1);
          v19 = *((_QWORD *)this + 4) + 16 * v18;
          *(CGPoint *)v19 = *v17;
          v10 += 2;
          *((_QWORD *)this + 1) = v18 + 2;
          result = (int8x16_t)v17[1];
          *(int8x16_t *)(v19 + 16) = result;
          break;
        case 3u:
          v20 = &a2[v10];
          v21 = *((_QWORD *)this + 1);
          v22 = *((_QWORD *)this + 4) + 16 * v21;
          *(CGPoint *)v22 = *v20;
          *(CGPoint *)(v22 + 16) = v20[1];
          v10 += 3;
          *((_QWORD *)this + 1) = v21 + 3;
          result = (int8x16_t)v20[2];
          *(int8x16_t *)(v22 + 32) = result;
          break;
        default:
LABEL_5:
          if ((a4 & 7) == 4)
            ++*((_QWORD *)this + 10);
          break;
      }
      a4 >>= 3;
      --v5;
    }
    while (v5);
    v23 = *((_QWORD *)this + 1);
    v24 = v23 > v11;
    v25 = v23 - v11;
    if (v24)
    {
      result = *(int8x16_t *)((char *)this + 40);
      v26 = *(float64x2_t *)((char *)this + 56);
      v27 = (float64x2_t *)(*((_QWORD *)this + 4) + 16 * v11);
      do
      {
        v28 = *v27++;
        result = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)result, v28), (int8x16_t)v28, result);
        *(int8x16_t *)((char *)this + 40) = result;
        v26 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v28, v26), (int8x16_t)v28, (int8x16_t)v26);
        *(float64x2_t *)((char *)this + 56) = v26;
        --v25;
      }
      while (v25);
    }
  }
  return result;
}

void CGPathAddRect(CGMutablePathRef path, const CGAffineTransform *m, CGRect rect)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  CFTypeID v15;
  CGRect v16;
  CGRect v17;

  if (path)
  {
    height = rect.size.height;
    width = rect.size.width;
    y = rect.origin.y;
    x = rect.origin.x;
    if (CGPathDisableTypeValidation || (v15 = CFGetTypeID(path), v15 == CGPathGetTypeID()))
    {
      {
        v17.origin.x = x;
        v17.origin.y = y;
        v17.size.width = width;
        v17.size.height = height;
        v16 = CGRectStandardize(v17);
        CG::Path::append_rect((CGMutablePathRef)((char *)path + 16), &v16, (float64x2_t *)m);
      }
    }
  }
}

void CG::Path::append_rect(CG::Path *this, const CGRect *a2, float64x2_t *a3)
{
  const CGAffineTransform *v6;
  float64x2_t v7;
  const CGAffineTransform *v8;
  const CGAffineTransform *v9;
  float64x2_t v10;
  const CGAffineTransform *v11;
  CGPoint v12;
  float64x2_t v16;
  double v23;
  CGPoint origin;
  float64x2_t v25;

  if (*(_DWORD *)this)
  {
    CG::Path::reserve_space(this, 5, 5);
    origin = a2->origin;
    v25 = vaddq_f64((float64x2_t)a2->size, (float64x2_t)a2->origin);
    CG::Path::move_to_point(this, a3, v6, (__n128)a2->origin);
    v7.f64[0] = v25.f64[0];
    v7.f64[1] = origin.y;
    CG::Path::add_line_to_point(this, a3, v8, v7);
    CG::Path::add_line_to_point(this, a3, v9, v25);
    v10.f64[0] = origin.x;
    v10.f64[1] = v25.f64[1];
    CG::Path::add_line_to_point(this, a3, v11, v10);
    CG::Path::close_subpath(this);
  }
  else
  {
    v12 = a2->origin;
    _D2 = a2->size.width;
    _D1 = a2->size.height;
    *(_DWORD *)this = 1;
    if (a3)
    {
      _Q5 = *a3;
      v16 = a3[1];
      _D16 = 0;
      __asm { FMLA            D4, D2, V5.D[1] }
      v23 = vmlad_n_f64(_D1 * v16.f64[0], 0.0, a3->f64[0]);
      __asm { FMLA            D1, D16, V5.D[1] }
      v12 = (CGPoint)vaddq_f64(a3[2], vmlaq_n_f64(vmulq_laneq_f64(v16, (float64x2_t)v12, 1), *a3, v12.x));
      _D2 = vmlad_n_f64(0.0 * v16.f64[0], _D2, a3->f64[0]);
    }
    else
    {
      v23 = 0.0;
      _D4 = 0;
    }
    *((double *)this + 1) = _D2;
    *((_QWORD *)this + 2) = _D4;
    *((double *)this + 3) = v23;
    *((double *)this + 4) = _D1;
    *(CGPoint *)((char *)this + 40) = v12;
  }
}

double CGPointApplyInverseAffineTransform(double *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  double v11;
  double v12;
  double v13;
  double v14;

  v11 = a9;
  v12 = a1[2];
  v13 = a1[3];
  v14 = *a1 * v13 - a1[1] * v12;
  if (v14 != 0.0)
    return (v13 * (a9 - a1[4]) - v12 * (a10 - a1[5])) / v14;
  CGPostError((uint64_t)"%s: singular matrix.", a2, a3, a4, a5, a6, a7, a8, (char)"CGPointApplyInverseAffineTransform");
  return v11;
}

void CGContextBeginPath(CGContextRef c)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v8;
  CGContextRef v9;

  if (!c)
  {
    v9 = 0;
LABEL_8:
    handle_invalid_context((char)"CGContextBeginPath", (uint64_t)v9, v1, v2, v3, v4, v5, v6);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v9 = c;
    goto LABEL_8;
  }
  v8 = (const void *)*((_QWORD *)c + 21);
  if (v8)
  {
    CFRelease(v8);
    *((_QWORD *)c + 21) = 0;
  }
}

CGPathRef copy_clip_path(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 48))
    {
      *a2 = 0;
      *(_BYTE *)(v2 + 48) = 0;
      return CGContextCopyPath(*(CGContextRef *)(a1 + 88));
    }
    if (*(_BYTE *)(v2 + 49))
    {
      *a2 = 1;
      *(_BYTE *)(v2 + 49) = 0;
      return CGContextCopyPath(*(CGContextRef *)(a1 + 88));
    }
  }
  return 0;
}

void CGColorTransformRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t CGImageBlockGetData(uint64_t result)
{
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t color_transform_retain_count(uint64_t a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  const __CFAllocator *v8;

  if (a1 == -1)
  {
    log_refcount((char)a2);
    v6 = a2 + 5;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 - 1, v6));
    if (v7 == 1)
    {
      color_transform_finalize((uint64_t)a2);
      v8 = CFGetAllocator(a2);
      CFAllocatorDeallocate(v8, a2);
    }
    return 0;
  }
  if (!a1)
    return a2[5];
  if (a1 != 1)
    return 0;
  log_refcount((char)a2);
  v3 = a2 + 5;
  do
  {
    v4 = __ldxr(v3);
    result = v4 + 1;
  }
  while (__stxr(result, v3));
  return result;
}

void log_refcount(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  if (show_log_predicate != -1)
    dispatch_once(&show_log_predicate, &__block_literal_global_45_15646);
  if (show_log_show_log)
  {
    v9 = CGBacktraceCreate(10);
    CGPostError((uint64_t)"CGColorTransform %p. Refcount = %d operation = %ld Backtrace:\n%s\n", v2, v3, v4, v5, v6, v7, v8, a1);
    free(v9);
  }
}

void CGImageProviderRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float64x2_t v10;

  if (c && *((_DWORD *)c + 4) == 1129601108)
  {
    v9 = *((_QWORD *)c + 12);
    v10 = vmulq_n_f64(*(float64x2_t *)(v9 + 40), sy);
    *(float64x2_t *)(v9 + 24) = vmulq_n_f64(*(float64x2_t *)(v9 + 24), sx);
    *(float64x2_t *)(v9 + 40) = v10;
  }
  else
  {
    handle_invalid_context((char)"CGContextScaleCTM", (uint64_t)c, v3, v4, v5, v6, v7, v8);
  }
}

void CGPathRandomAccess::add_path(CGPathRandomAccess *this, CGPathRef path, CGAffineTransform *a3, int a4)
{
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v13[9];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  _QWORD v18[4];
  _QWORD v19[7];
  _QWORD block[5];
  _QWORD v21[5];
  void *v22;
  void *v23;
  uint64_t v24;

  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x4002000000;
  v21[3] = __Block_byref_object_copy__17;
  v21[4] = __Block_byref_object_dispose__18;
  v24 = 0;
  v8 = MEMORY[0x1E0C809B0];
  v22 = 0;
  v23 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN18CGPathRandomAccess8add_pathEPK6CGPath17CGAffineTransformb_block_invoke;
  block[3] = &unk_1E1630360;
  block[4] = v21;
  CGPathApplyWithBlock(path, block);
  v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
  v19[0] = 0;
  v19[1] = v19;
  v19[2] = 0x3802000000;
  v19[3] = __Block_byref_object_copy__20;
  v19[4] = __Block_byref_object_dispose__21;
  v19[5] = 0;
  v19[6] = 0;
  v18[0] = 0;
  v18[1] = v18;
  v18[2] = 0x2000000000;
  v18[3] = 0;
  v13[0] = v8;
  v13[1] = 0x40000000;
  v13[2] = ___ZN18CGPathRandomAccess8add_pathEPK6CGPath17CGAffineTransformb_block_invoke_22;
  v13[3] = &unk_1E1630388;
  v13[7] = this;
  v13[8] = v9;
  v17 = a4;
  v13[4] = v18;
  v13[5] = v21;
  v13[6] = v19;
  v10 = *(_OWORD *)&a3->a;
  v11 = *(_OWORD *)&a3->c;
  v16 = *(_OWORD *)&a3->tx;
  v15 = v11;
  v14 = v10;
  CGPathApplyWithBlock(path, v13);
  v12 = *((_QWORD *)this + 1);
  if (0x6DB6DB6DB6DB6DB7 * ((v12 - *(_QWORD *)this) >> 3) > v9 && a4)
  {
    if (*(_QWORD *)this == v12)
    {
      __break(1u);
      return;
    }
    CGPathRandomAccessSubpath::close_if_needed((CGPathRandomAccessSubpath *)(v12 - 56));
  }
  _Block_object_dispose(v18, 8);
  _Block_object_dispose(v19, 8);
  _Block_object_dispose(v21, 8);
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
}

void sub_1849B7FF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  v3 = *(void **)(v1 - 120);
  if (v3)
  {
    *(_QWORD *)(v1 - 112) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void CGPathApplyWithBlock(CGPathRef path, CGPathApplyBlock block)
{
  CFTypeID v4;
  _QWORD v5[5];

  if (path)
  {
    if (CGPathDisableTypeValidation || (v4 = CFGetTypeID(path), v4 == CGPathGetTypeID()))
    {
      v5[0] = MEMORY[0x1E0C809B0];
      v5[1] = 0x40000000;
      v5[2] = __CGPathApplyWithBlock_block_invoke;
      v5[3] = &unk_1E1660780;
      v5[4] = block;
      CG::Path::apply((double *)path + 2, (uint64_t)v5);
    }
  }
}

uint64_t CG::stroker::end_contour(uint64_t this)
{
  uint64_t v1;
  int v2;
  float64x2_t v3;
  float64x2_t v4;
  uint64_t v5;

  v1 = this;
  v2 = *(_DWORD *)(this + 80);
  if (v2 == 4)
  {
    CG::stroker::add_cap(this, (double *)(this + 136), *(double *)(this + 168), *(double *)(this + 176));
    CG::stroker::unroll_path((_QWORD *)v1);
    v4 = vnegq_f64(*(float64x2_t *)(v1 + 120));
    this = CG::stroker::add_cap(v1, (double *)(v1 + 88), v4.f64[0], v4.f64[1]);
    v5 = *(_QWORD *)(v1 + 72);
    if (v5)
      return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(v5 + 24))(*(_QWORD *)(v5 + 8), 4, 0, *(_QWORD *)(v5 + 48));
  }
  else if (v2 == 3)
  {
    v3 = vsubq_f64(*(float64x2_t *)(this + 184), *(float64x2_t *)(this + 88));
    return CG::stroker::add_point(this, (double *)(this + 88), v3.f64[0], v3.f64[1]);
  }
  return this;
}

_QWORD *CG::stroker::unroll_path(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t i;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[3];
  uint64_t v10;

  v1 = this;
  v10 = *MEMORY[0x1E0C80C00];
  v2 = this[27];
  for (i = this[28]; i != v2; i -= 24)
  {
    v4 = *(_DWORD *)(i - 24);
    if (v4 == 3)
    {
      v6 = v1[9];
      if (v6)
      {
        v7 = *(_OWORD *)(i - 40);
        v8 = *(_OWORD *)(i - 16);
        v9[0] = *(_OWORD *)(i - 64);
        v9[1] = v7;
        v9[2] = v8;
        this = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _OWORD *, _QWORD))(v6 + 24))(*(_QWORD *)(v6 + 8), 3, v9, *(_QWORD *)(v6 + 48));
      }
      i -= 48;
    }
    else if (v4 == 1)
    {
      v5 = v1[9];
      v9[0] = *(_OWORD *)(i - 16);
      if (v5)
        this = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _OWORD *, _QWORD))(v5 + 24))(*(_QWORD *)(v5 + 8), 1, v9, *(_QWORD *)(v5 + 48));
    }
    v2 = v1[27];
  }
  v1[28] = i;
  return this;
}

void ripr_stroke_iterate(uint64_t a1, int a2, double *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;

  switch(a2)
  {
    case -3:
      v3 = *a3;
      v4 = a3[1];
      v5 = a3[2];
      v6 = a3[3];
      aa_rectat(a1, v3, v4, v5, v6);
      break;
    case 0:
      v7 = *a3;
      v8 = a3[1];
      aa_moveto(a1, v7, v8);
      break;
    case 1:
      v9 = *a3;
      v10 = a3[1];
      aa_lineto(a1, v9, v10);
      break;
    case 2:
      v11 = *a3;
      v12 = a3[1];
      v13 = a3[2];
      v14 = a3[3];
      aa_quadto(a1, v11, v12, v13, v14);
      break;
    case 3:
      v15 = *a3;
      v16 = a3[1];
      v17 = a3[2];
      v18 = a3[3];
      v19 = a3[4];
      v20 = a3[5];
      aa_cubeto(a1, v15, v16, v17, v18, v19, v20);
      break;
    case 4:
      aa_close(a1);
      break;
    default:
      abort();
  }
}

void CGPathApply(CGPathRef path, void *info, CGPathApplierFunction function)
{
  _BOOL4 v6;
  CFTypeID v7;
  _QWORD v8[6];

  if (path)
  {
    if (CGPathDisableTypeValidation)
    {
      v6 = 1;
      if (!function)
        return;
    }
    else
    {
      v7 = CFGetTypeID(path);
      v6 = v7 == CGPathGetTypeID();
      if (!function)
        return;
    }
    if (v6)
    {
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 0x40000000;
      v8[2] = __CGPathApply_block_invoke;
      v8[3] = &__block_descriptor_tmp_10_16062;
      v8[4] = function;
      v8[5] = info;
      CG::Path::apply((double *)path + 2, (uint64_t)v8);
    }
  }
}

void CG::Path::apply(double *a1, uint64_t a2)
{
  int v2;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41[2];
  double v42[2];
  double v43[2];
  char v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    v44 = 0;
    switch(v2)
    {
      case 1:
        v5 = a1[6];
        v45 = a1[5];
        v46 = v5;
        v6 = a1[1];
        v7 = a1[2];
        v43[0] = v45 + v6;
        v43[1] = v5 + v7;
        v8 = a1[3];
        v9 = a1[4];
        v42[0] = v45 + v6 + v8;
        v42[1] = v5 + v7 + v9;
        v41[0] = v45 + v8;
        v41[1] = v5 + v9;
        (*(void (**)(uint64_t, _QWORD, double *, char *))(a2 + 16))(a2, 0, &v45, &v44);
        if (!v44)
        {
          (*(void (**)(uint64_t, uint64_t, double *, char *))(a2 + 16))(a2, 1, v43, &v44);
          if (!v44)
          {
            (*(void (**)(uint64_t, uint64_t, double *, char *))(a2 + 16))(a2, 1, v42, &v44);
            if (!v44)
            {
              (*(void (**)(uint64_t, uint64_t, double *, char *))(a2 + 16))(a2, 1, v41, &v44);
              if (!v44)
                (*(void (**)(uint64_t, uint64_t, _QWORD, char *))(a2 + 16))(a2, 4, 0, &v44);
            }
          }
        }
        break;
      case 5:
        (*(void (**)(uint64_t, _QWORD, int *, char *))(a2 + 16))(a2, 0, (int *)a1 + 2, &v44);
        if (!v44)
          (*(void (**)(uint64_t, uint64_t, int *, char *))(a2 + 16))(a2, 1, (int *)a1 + 6, &v44);
        break;
      case 6:
        v11 = a1[1];
        v10 = a1[2];
        v13 = a1[3];
        v12 = a1[4];
        v15 = a1[5];
        v14 = a1[6];
        v16 = a1[7];
        LOBYTE(v43[0]) = 0;
        v39 = v11;
        v40 = v10;
        v45 = v15 + v11 + v13 * 0.0;
        v46 = v14 + v10 + v12 * 0.0;
        (*(void (**)(uint64_t, _QWORD, double *, double *))(a2 + 16))(a2, 0, &v45, v43);
        if (!LOBYTE(v43[0]))
        {
          if (v16 >= 1.57079633)
          {
            v27 = 0.0;
            v17 = 1.0;
            while (1)
            {
              v18 = v17;
              v28 = v17 + v27 * -0.55228475;
              v29 = v27 + v18 * 0.55228475;
              v30 = -(v27 - v18 * 0.55228475);
              v31 = v18 + v27 * 0.55228475;
              v45 = v15 + v13 * v29 + v39 * v28;
              v46 = v14 + v12 * v29 + v40 * v28;
              v47 = v15 + v13 * v31 + v39 * v30;
              v48 = v14 + v12 * v31 + v40 * v30;
              v49 = v15 + v13 * v18 - v39 * v27;
              v50 = v14 + v12 * v18 - v40 * v27;
              (*(void (**)(uint64_t, uint64_t, double *, double *))(a2 + 16))(a2, 3, &v45, v43);
              if (LOBYTE(v43[0]))
                break;
              v17 = -v27;
              v16 = v16 + -1.57079633;
              v27 = v18;
              if (v16 < 1.57079633)
                goto LABEL_29;
            }
          }
          else
          {
            v17 = 1.0;
            v18 = 0.0;
LABEL_29:
            if (v16 > 0.00000001)
            {
              v33 = a1[9];
              v32 = a1[10];
              v34 = a1[8];
              v35 = v17 - v32 * v18;
              v36 = v18 + v32 * v17;
              v37 = v34 + v32 * v33;
              v38 = v33 - v32 * v34;
              v45 = v15 + v13 * v36 + v39 * v35;
              v46 = v14 + v12 * v36 + v40 * v35;
              v47 = v15 + v13 * v38 + v39 * v37;
              v48 = v14 + v12 * v38 + v40 * v37;
              v49 = v15 + v13 * v33 + v39 * v34;
              v50 = v14 + v12 * v33 + v40 * v34;
              (*(void (**)(uint64_t, uint64_t, double *, double *))(a2 + 16))(a2, 3, &v45, v43);
            }
          }
        }
        break;
      case 8:
        if (*((_WORD *)a1 + 5))
        {
          v19 = 0;
          v20 = 0;
          v21 = *((_DWORD *)a1 + 3);
          do
          {
            (*(void (**)(uint64_t, _QWORD, double *, char *))(a2 + 16))(a2, v21 & 7, &a1[2 * v19 + 2], &v44);
            if (v44)
              break;
            v19 += point_counts[v21 & 7];
            v21 >>= 3;
            ++v20;
          }
          while (v20 < *((unsigned __int16 *)a1 + 5));
        }
        break;
      case 9:
        if (*((_QWORD *)a1 + 2))
        {
          v22 = 0;
          v23 = 0;
          v24 = -1;
          do
          {
            v25 = *((_QWORD *)a1 + 4);
            v26 = *(unsigned __int8 *)(v25 + *((_QWORD *)a1 + 3) + v24);
            (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(a2 + 16))(a2, v26, v25 + 16 * v23, &v44);
            if (v44)
              break;
            v23 += point_counts[v26];
            ++v22;
            --v24;
          }
          while (v22 < *((_QWORD *)a1 + 2));
        }
        break;
      default:
        CG::Path::Path((CG::Path *)&v45, (const CG::Path *)a1);
        if (LODWORD(v45) != 9)
          CG::Path::convert_to_huge_((CG::Path *)&v45);
        CG::Path::apply(&v45, a2);
        CG::Path::~Path((void **)&v45);
        break;
    }
  }
}

void sub_1849B889C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  CG::Path::~Path((void **)va);
  _Unwind_Resume(a1);
}

uint64_t aa_quadto(uint64_t result, float a2, float a3, float a4, float a5)
{
  uint64_t v5;
  double v6;
  unsigned int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  double v34;
  double v35;
  double v36;
  char v37;
  int v38;
  double *v39;
  double v40;
  double v41;
  double v42;
  double v43;
  int v44;
  int v45;
  int v46;
  int v47;
  BOOL v48;
  int v49;
  int v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  char v59;
  _DWORD v60[8];
  uint64_t v61;

  v5 = result;
  v61 = *MEMORY[0x1E0C80C00];
  v6 = *(double *)(result + 168);
  v7 = *(_DWORD *)(result + 176);
  v8 = a2;
  v9 = a4;
  v10 = a3;
  v11 = a5;
  v12 = BYTE1(v7);
  if (v6 != 0.0)
  {
    v8 = v6 * v8;
    v10 = v6 * v10;
    v9 = v6 * v9;
    v11 = v6 * v11;
  }
  v13 = *(double *)(result + 128);
  v55 = *(double *)(result + 136);
  v56 = v13;
  v54 = *(double *)(result + 160);
  v14 = *(double *)(result + 96);
  v15 = *(double *)(result + 104);
  v17 = *(double *)(result + 32);
  v16 = *(double *)(result + 40);
  if ((v7 & 0x30000) == 0)
  {
    v37 = 1;
    v20 = v9;
    v21 = v11;
    v25 = v9;
    v28 = v11;
    goto LABEL_38;
  }
  v19 = *(double *)(result + 64);
  v18 = *(double *)(result + 72);
  v20 = *(double *)(result + 80);
  v21 = *(double *)(result + 88);
  v22 = fabs(v9);
  v23 = -1.0e15;
  if (v9 <= 0.0)
    v24 = -1.0e15;
  else
    v24 = 1.0e15;
  if (v22 >= 1.0e15)
    v25 = v24;
  else
    v25 = v9;
  v26 = fabs(v11);
  if (v11 <= 0.0)
    v27 = -1.0e15;
  else
    v27 = 1.0e15;
  if (v26 >= 1.0e15)
    v28 = v27;
  else
    v28 = v11;
  v29 = (v25 > v20) | (4 * (v25 < v19));
  v30 = (8 * (v28 < v18)) | (2 * (v28 > v21));
  if (v30)
    v31 = v29 == 0;
  else
    v31 = 1;
  if (v31)
    v32 = 0;
  else
    v32 = 16;
  v33 = v29 | v30 | v32;
  v34 = fabs(v8);
  if (v8 <= 0.0)
    v35 = -1.0e15;
  else
    v35 = 1.0e15;
  if (v34 >= 1.0e15)
    v8 = v35;
  v36 = fabs(v10);
  if (v10 > 0.0)
    v23 = 1.0e15;
  if (v36 >= 1.0e15)
    v10 = v23;
  if (BYTE1(v7) != v33 || ((v7 >> 8) & 0xF) != ((v8 > v20) | (4 * (v8 < v19)) | (8 * (v10 < v18)) | (2 * (v10 > v21))))
  {
    v37 = 0;
    goto LABEL_36;
  }
  if (!BYTE1(v7))
  {
    v37 = 1;
LABEL_36:
    v9 = *(double *)(result + 64);
    v11 = *(double *)(result + 72);
LABEL_38:
    v38 = 0;
    v39 = (double *)&v59;
    v57 = *(double *)(result + 104);
    v58 = v14;
    while (1)
    {
      v40 = v8 + v8;
      v41 = v10 + v10;
      v42 = v17 + v25;
      v43 = v16 + v28;
      if (v38 <= 22)
      {
        v45 = (v42 - v40) * (v42 - v40) > v14;
        if ((v43 - v41) * (v43 - v41) > v15)
          v45 = 1;
        v44 = v45 << 31 >> 31;
        if ((v37 & 1) != 0)
        {
          if ((v44 & 1) == 0)
            goto LABEL_62;
          goto LABEL_61;
        }
      }
      else
      {
        if ((v37 & 1) != 0)
          goto LABEL_62;
        v44 = 0;
      }
      v46 = (v25 > v20) | (4 * (v25 < v9));
      v47 = (2 * (v28 > v21)) | (8 * (v28 < v11));
      v48 = !v47 || v46 == 0;
      v49 = v48 ? 0 : 16;
      v50 = v46 | v47 | v49;
      if (!(v50 | v12))
        break;
      if (v50 == v12)
      {
        if (!v44 || (v12 & 0xF) == ((v8 > v20) | (4 * (v8 < v9)) | (2 * (v10 > v21)) | (8 * (v10 < v11))))
          goto LABEL_64;
LABEL_61:
        v39[4] = v25;
        v39[5] = v28;
        v51 = v40 + v42;
        v52 = v8 + v25;
        v25 = v51 * 0.25;
        v53 = v10 + v28;
        v28 = (v41 + v43) * 0.25;
        *v39 = v25;
        v39[1] = v28;
        v39[2] = v52 * 0.5;
        v39[3] = v53 * 0.5;
        v39 += 6;
        ++v38;
        v8 = (v17 + v8) * 0.5;
        v10 = (v16 + v10) * 0.5;
      }
      else
      {
        if (v44)
          goto LABEL_61;
        result = aa_clip_edge(v60, v12, v50, v9, v11, v20, v21, v56, v55, v54, v17, v16, v25, v28);
        v15 = v57;
        v14 = v58;
        v12 = v50;
        if ((_DWORD)result)
          goto LABEL_63;
LABEL_64:
        if (!v38)
        {
          v7 = *(_DWORD *)(v5 + 176);
          goto LABEL_69;
        }
        v17 = *(v39 - 6);
        v16 = *(v39 - 5);
        v39 -= 6;
        v8 = v39[2];
        v10 = v39[3];
        --v38;
        v25 = v39[4];
        v28 = v39[5];
      }
    }
    if (!v44)
    {
LABEL_62:
      v60[0] = (int)(v54 + v56 * v25);
      v60[1] = (int)(v54 + v55 * v28);
      LODWORD(result) = 1;
LABEL_63:
      result = (uint64_t)aa_add_edges((char *)v5, (uint64_t)v60, (int)result);
      v15 = v57;
      v14 = v58;
      goto LABEL_64;
    }
    goto LABEL_61;
  }
LABEL_69:
  *(double *)(v5 + 32) = v25;
  *(double *)(v5 + 40) = v28;
  *(_DWORD *)(v5 + 176) = v7 & 0xFFFF00FF | (v12 << 8);
  return result;
}

uint64_t aa_lineto(uint64_t result, float a2, float a3)
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  _DWORD v27[8];
  uint64_t v28;

  v3 = result;
  v28 = *MEMORY[0x1E0C80C00];
  v4 = *(double *)(result + 168);
  v5 = a2;
  v6 = a3;
  if (v4 == 0.0)
    v4 = 1.0;
  v7 = v4 * v5;
  v8 = v4 * v6;
  v9 = *(_DWORD *)(result + 176);
  if ((v9 & 0x30000) == 0)
    goto LABEL_23;
  v10 = *(double *)(result + 64);
  v11 = *(double *)(result + 72);
  v12 = *(double *)(result + 80);
  v13 = *(double *)(result + 88);
  v14 = fabs(v7);
  v15 = -1.0e15;
  if (v7 <= 0.0)
    v16 = -1.0e15;
  else
    v16 = 1.0e15;
  if (v14 >= 1.0e15)
    v7 = v16;
  v17 = fabs(v8);
  if (v8 > 0.0)
    v15 = 1.0e15;
  if (v17 >= 1.0e15)
    v8 = v15;
  v18 = (v7 > v12) | (4 * (v7 < v10));
  v19 = (8 * (v8 < v11)) | (2 * (v8 > v13));
  v20 = !v19 || v18 == 0;
  v21 = v20 ? 0 : 16;
  v22 = v18 | v19 | v21;
  if (!(v22 | *(_DWORD *)(result + 176) & 0xFF00))
  {
LABEL_23:
    v24 = *(double *)(result + 160);
    v25 = v24 + *(double *)(result + 128) * v7;
    v26 = v24 + *(double *)(result + 136) * v8;
    v27[0] = (int)v25;
    v27[1] = (int)v26;
    v23 = 1;
    goto LABEL_24;
  }
  if (v22 != BYTE1(v9))
  {
    result = aa_clip_edge(v27, BYTE1(v9), v22, v10, v11, v12, v13, *(double *)(result + 128), *(double *)(result + 136), *(double *)(result + 160), *(double *)(result + 32), *(double *)(result + 40), v7, v8);
    *(_BYTE *)(v3 + 177) = v22;
    if ((_DWORD)result)
    {
      v23 = result;
LABEL_24:
      result = (uint64_t)aa_add_edges((char *)v3, (uint64_t)v27, v23);
    }
  }
  *(double *)(v3 + 32) = v7;
  *(double *)(v3 + 40) = v8;
  return result;
}

void ripr_path_fill(uint64_t a1, uint64_t a2)
{
  double *v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;

  v2 = *(double **)(a2 + 8);
  switch(*(_DWORD *)a2)
  {
    case 0:
      v3 = *v2;
      v4 = v2[1];
      aa_moveto(a1, v3, v4);
      break;
    case 1:
      v5 = *v2;
      v6 = v2[1];
      aa_lineto(a1, v5, v6);
      break;
    case 2:
      v7 = *v2;
      v8 = v2[1];
      v9 = v2[2];
      v10 = v2[3];
      aa_quadto(a1, v7, v8, v9, v10);
      break;
    case 3:
      v11 = *v2;
      v12 = v2[1];
      v13 = v2[2];
      v14 = v2[3];
      v15 = v2[4];
      v16 = v2[5];
      aa_cubeto(a1, v11, v12, v13, v14, v15, v16);
      break;
    case 4:
      aa_close(a1);
      break;
    default:
      return;
  }
}

uint64_t aa_cubeto(uint64_t result, float a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7;
  double v8;
  unsigned int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  int v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  int v33;
  int v34;
  BOOL v35;
  int v36;
  int v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  char v45;
  int v46;
  int v47;
  double *v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  int v57;
  int v58;
  int v59;
  int v60;
  BOOL v61;
  int v62;
  int v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  char v70;
  _DWORD v71[8];
  uint64_t v72;

  v7 = result;
  v72 = *MEMORY[0x1E0C80C00];
  v8 = *(double *)(result + 168);
  v9 = *(_DWORD *)(result + 176);
  v10 = a2;
  v11 = a4;
  v12 = a6;
  v13 = a3;
  v14 = a5;
  v15 = a7;
  v16 = BYTE1(v9);
  if (v8 != 0.0)
  {
    v10 = v8 * v10;
    v13 = v8 * v13;
    v11 = v8 * v11;
    v14 = v8 * v14;
    v12 = v8 * v12;
    v15 = v8 * v15;
  }
  v18 = *(double *)(result + 120);
  v17 = *(double *)(result + 128);
  v65 = *(double *)(result + 136);
  v66 = v17;
  v64 = *(double *)(result + 160);
  v19 = *(double *)(result + 112);
  v21 = *(double *)(result + 32);
  v20 = *(double *)(result + 40);
  if ((v9 & 0x30000) == 0)
  {
    v45 = 1;
    v24 = v12;
    v25 = v15;
    v29 = v12;
    v32 = v15;
LABEL_49:
    v47 = 0;
    v48 = (double *)&v70;
    v68 = v18;
    v69 = v19;
    v67 = v24;
    while (1)
    {
      v49 = v10 + v10;
      v50 = v13 + v13;
      v51 = v11 + v11;
      v52 = v14 + v14;
      v53 = v21 + v11;
      v54 = v20 + v14;
      v55 = v10 + v29;
      v56 = v13 + v32;
      if (v47 <= 22)
      {
        if ((v53 - v49) * (v53 - v49) <= v19)
        {
          v58 = (v55 - v51) * (v55 - v51) > v19;
          if ((v56 - v52) * (v56 - v52) > v18)
            v58 = 1;
          v57 = v58 << 31 >> 31;
          if ((v54 - v50) * (v54 - v50) > v18)
            v57 = -1;
        }
        else
        {
          v57 = -1;
        }
        if ((v45 & 1) != 0)
        {
LABEL_71:
          if (!v57)
          {
LABEL_75:
            v71[0] = (int)(v64 + v66 * v29);
            v71[1] = (int)(v64 + v65 * v32);
            LODWORD(result) = 1;
LABEL_76:
            result = (uint64_t)aa_add_edges((char *)v7, (uint64_t)v71, (int)result);
            v24 = v67;
            v18 = v68;
            goto LABEL_77;
          }
          goto LABEL_74;
        }
      }
      else
      {
        if ((v45 & 1) != 0)
          goto LABEL_75;
        v57 = 0;
      }
      v59 = (v29 > v24) | (4 * (v29 < v12));
      v60 = (2 * (v32 > v25)) | (8 * (v32 < v15));
      if (v60)
        v61 = v59 == 0;
      else
        v61 = 1;
      if (v61)
        v62 = 0;
      else
        v62 = 16;
      v63 = v59 | v60 | v62;
      if (!(v63 | v16))
        goto LABEL_71;
      if (v63 == v16)
      {
        if (!v57
          || (v16 & 0xF) == (((v11 > v24) | (4 * (v11 < v12)) | (2 * (v14 > v25)) | (8 * (v14 < v15))) & ((v10 > v24) | (4 * (v10 < v12)) | (2 * (v13 > v25)) | (8 * (v13 < v15)))))
        {
          goto LABEL_77;
        }
LABEL_74:
        v48[6] = v29;
        v48[7] = v32;
        v48[4] = (v11 + v29) * 0.5;
        v48[5] = (v14 + v32) * 0.5;
        v29 = (v51 + v49 + v53 + v55) * 0.125;
        v32 = (v52 + v50 + v54 + v56) * 0.125;
        v48[2] = (v51 + v55) * 0.25;
        v48[3] = (v52 + v56) * 0.25;
        v11 = (v49 + v53) * 0.25;
        v14 = (v50 + v54) * 0.25;
        *v48 = v29;
        v48[1] = v32;
        v48 += 8;
        v10 = (v21 + v10) * 0.5;
        v13 = (v20 + v13) * 0.5;
        ++v47;
      }
      else
      {
        if (v57)
          goto LABEL_74;
        result = aa_clip_edge(v71, v16, v63, v12, v15, v24, v25, v66, v65, v64, v21, v20, v29, v32);
        v24 = v67;
        v18 = v68;
        v16 = v63;
        if ((_DWORD)result)
          goto LABEL_76;
LABEL_77:
        if (!v47)
        {
          v9 = *(_DWORD *)(v7 + 176);
          goto LABEL_82;
        }
        v21 = *(v48 - 8);
        v20 = *(v48 - 7);
        v48 -= 8;
        v10 = v48[2];
        v13 = v48[3];
        --v47;
        v11 = v48[4];
        v14 = v48[5];
        v29 = v48[6];
        v32 = v48[7];
        v19 = v69;
      }
    }
  }
  v23 = *(double *)(result + 64);
  v22 = *(double *)(result + 72);
  v24 = *(double *)(result + 80);
  v25 = *(double *)(result + 88);
  v26 = fabs(v12);
  v27 = -1.0e15;
  if (v12 <= 0.0)
    v28 = -1.0e15;
  else
    v28 = 1.0e15;
  if (v26 >= 1.0e15)
    v29 = v28;
  else
    v29 = v12;
  v30 = fabs(v15);
  if (v15 <= 0.0)
    v31 = -1.0e15;
  else
    v31 = 1.0e15;
  if (v30 >= 1.0e15)
    v32 = v31;
  else
    v32 = v15;
  v33 = (v29 > v24) | (4 * (v29 < v23));
  v34 = (8 * (v32 < v22)) | (2 * (v32 > v25));
  if (v34)
    v35 = v33 == 0;
  else
    v35 = 1;
  if (v35)
    v36 = 0;
  else
    v36 = 16;
  v37 = v33 | v34 | v36;
  v38 = fabs(v11);
  if (v11 <= 0.0)
    v39 = -1.0e15;
  else
    v39 = 1.0e15;
  if (v38 >= 1.0e15)
    v11 = v39;
  v40 = fabs(v14);
  if (v14 <= 0.0)
    v41 = -1.0e15;
  else
    v41 = 1.0e15;
  if (v40 >= 1.0e15)
    v14 = v41;
  v42 = fabs(v10);
  if (v10 <= 0.0)
    v43 = -1.0e15;
  else
    v43 = 1.0e15;
  if (v42 >= 1.0e15)
    v10 = v43;
  v44 = fabs(v13);
  if (v13 > 0.0)
    v27 = 1.0e15;
  if (v44 >= 1.0e15)
    v13 = v27;
  if (BYTE1(v9) != v37)
  {
    v45 = 0;
    goto LABEL_48;
  }
  v45 = 0;
  v46 = (v9 >> 8) & 0xF;
  if (v46 != ((v11 > v24) | (4 * (v11 < v23)) | (8 * (v14 < v22)) | (2 * (v14 > v25)))
    || v46 != ((v10 > v24) | (4 * (v10 < v23)) | (8 * (v13 < v22)) | (2 * (v13 > v25))))
  {
    goto LABEL_48;
  }
  if (!BYTE1(v9))
  {
    v45 = 1;
LABEL_48:
    v12 = *(double *)(result + 64);
    v15 = *(double *)(result + 72);
    goto LABEL_49;
  }
LABEL_82:
  *(double *)(v7 + 32) = v29;
  *(double *)(v7 + 40) = v32;
  *(_DWORD *)(v7 + 176) = v9 & 0xFFFF00FF | (v16 << 8);
  return result;
}

char *aa_add_edges(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  char v19;

  v3 = (uint64_t)result;
  v5 = *((_DWORD *)result + 4);
  v4 = *((_DWORD *)result + 5);
  if (!a3)
    goto LABEL_37;
  v6 = a3;
  v7 = 0;
  v8 = (int *)(a2 + 4);
  do
  {
    v9 = v5;
    v5 = *(v8 - 1);
    v10 = *v8;
    v11 = *v8 - v4;
    if (*v8 == v4)
    {
      v7 += ((4064 - (v4 & 0xFFF)) | ((v4 & 0xFFF) - 31)) >= 0;
      goto LABEL_32;
    }
    v12 = v5 - v9;
    v13 = *(_DWORD *)v3;
    if (v5 - v9 < 1)
    {
      if (v13 > v5)
        *(_DWORD *)v3 = v5;
      v14 = v9;
      if (*(_DWORD *)(v3 + 8) < v9)
LABEL_9:
        *(_DWORD *)(v3 + 8) = v14;
    }
    else
    {
      if (v13 > v9)
        *(_DWORD *)v3 = v9;
      v14 = v5;
      if (*(_DWORD *)(v3 + 8) < v5)
        goto LABEL_9;
    }
    if (v5 == v9)
      goto LABEL_19;
    v15 = ((uint64_t)v12 << 12) / v11;
    if (!(_DWORD)v15)
    {
      v9 = (v5 + v9) >> 1;
LABEL_19:
      LODWORD(v15) = 0;
      LODWORD(v16) = 0;
      ++*(_WORD *)(v3 + 188);
      v18 = v7 + (((4064 - (v9 & 0xFFF)) | ((v9 & 0xFFF) - 31)) >= 0);
      v19 = 0;
LABEL_20:
      v17 = v9;
      goto LABEL_21;
    }
    v16 = ((uint64_t)v11 << 12) / v12;
    v18 = v7;
    if (!(_DWORD)v16)
    {
      v19 = 0;
      v9 = (v5 + v9) >> 1;
      goto LABEL_20;
    }
    v19 = 1;
    v17 = v5;
LABEL_21:
    result = aa_new_edge(v3);
    if (!result)
      return result;
    *((_DWORD *)result + 8) = v16;
    *((_DWORD *)result + 9) = v15;
    result[47] = v19;
    if (v10 - v4 < 1)
    {
      *((_WORD *)result + 22) = -1;
      *((_DWORD *)result + 4) = v17;
      *((_DWORD *)result + 5) = v9;
      *((_DWORD *)result + 6) = v10;
      *((_DWORD *)result + 7) = v4;
      if (*(_DWORD *)(v3 + 4) > v10)
        *(_DWORD *)(v3 + 4) = v10;
      v7 = v18;
      if (*(_DWORD *)(v3 + 12) < v4)
        *(_DWORD *)(v3 + 12) = v4;
    }
    else
    {
      *((_WORD *)result + 22) = 1;
      *((_DWORD *)result + 4) = v9;
      *((_DWORD *)result + 5) = v17;
      *((_DWORD *)result + 6) = v4;
      *((_DWORD *)result + 7) = v10;
      if (*(_DWORD *)(v3 + 4) > v4)
        *(_DWORD *)(v3 + 4) = v4;
      v7 = v18;
      if (*(_DWORD *)(v3 + 12) < v10)
        *(_DWORD *)(v3 + 12) = v10;
    }
    v4 = v10;
LABEL_32:
    v8 += 2;
    --v6;
  }
  while (v6);
  if (v7)
    *(_DWORD *)(v3 + 176) |= 0xC0000u;
LABEL_37:
  *(_DWORD *)(v3 + 16) = v5;
  *(_DWORD *)(v3 + 20) = v4;
  return result;
}

char *aa_new_edge(uint64_t a1)
{
  _DWORD *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  char *v6;
  char *v7;

  v2 = *(_DWORD **)(a1 + 192);
  v3 = v2[2];
  v4 = v2[3] + 1;
  if (v4 > v3)
  {
    v5 = 2 * v3;
    v2 = malloc_type_malloc((192 * v3) | 0x18, 0x705560E0uLL);
    if (!v2)
      return 0;
    *(_QWORD *)v2 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v2;
    v2[2] = v5;
    v4 = 1;
  }
  v6 = (char *)&v2[24 * v4 - 24];
  ++*(_DWORD *)(a1 + 184);
  *((_QWORD *)v6 + 3) = 0;
  *((_QWORD *)v6 + 4) = 0;
  v7 = v6 + 24;
  v2[3] = v4;
  return v7;
}

double aa_moveto(uint64_t a1, float a2, float a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  double v23;
  int v24;
  double v25;
  double v26;
  double v27;
  int v28;
  double result;

  aa_close(a1);
  v6 = *(_DWORD *)(a1 + 176);
  ++*(_DWORD *)(a1 + 180);
  v7 = 1.0;
  if (*(double *)(a1 + 168) != 0.0)
    v7 = *(double *)(a1 + 168);
  v8 = v7 * a2;
  v9 = v7 * a3;
  if ((v6 & 0x30000) != 0)
  {
    v10 = *(double *)(a1 + 64);
    v11 = *(double *)(a1 + 72);
    v12 = *(double *)(a1 + 80);
    v13 = *(double *)(a1 + 88);
    v14 = fabs(v8);
    v15 = -1.0e15;
    if (v8 <= 0.0)
      v16 = -1.0e15;
    else
      v16 = 1.0e15;
    if (v14 >= 1.0e15)
      v17 = v16;
    else
      v17 = v8;
    v18 = fabs(v9);
    if (v9 > 0.0)
      v15 = 1.0e15;
    if (v18 >= 1.0e15)
      v9 = v15;
    if (v17 <= v12)
      v8 = v17;
    else
      v8 = *(double *)(a1 + 80);
    v19 = (v17 > v12) | (4 * (v17 < v10));
    v20 = (8 * (v9 < v11)) | (2 * (v9 > v13));
    if (v17 < v10)
      v8 = *(double *)(a1 + 64);
    if (v20)
      v21 = v19 == 0;
    else
      v21 = 1;
    if (v21)
      v22 = 0;
    else
      v22 = 16;
    if (v9 > v13)
      v23 = *(double *)(a1 + 88);
    else
      v23 = v9;
    v24 = v19 | v20 | v22;
    *(double *)(a1 + 48) = v17;
    *(double *)(a1 + 56) = v9;
    *(double *)(a1 + 32) = v17;
    *(double *)(a1 + 40) = v9;
    if (v9 >= v11)
      v9 = v23;
    else
      v9 = v11;
  }
  else
  {
    v24 = 0;
    *(double *)(a1 + 48) = v8;
    *(double *)(a1 + 56) = v9;
    *(double *)(a1 + 32) = v8;
    *(double *)(a1 + 40) = v9;
  }
  v25 = *(double *)(a1 + 160);
  v26 = *(double *)(a1 + 128);
  v27 = *(double *)(a1 + 136);
  *(_DWORD *)(a1 + 176) = v6 & 0xFFFF0000 | (v24 << 8) | v24;
  v28 = (int)(v25 + v26 * v8);
  result = v25 + v27 * v9;
  *(_DWORD *)(a1 + 24) = v28;
  *(_DWORD *)(a1 + 28) = (int)result;
  *(_DWORD *)(a1 + 16) = v28;
  *(_DWORD *)(a1 + 20) = (int)result;
  return result;
}

uint64_t aa_close(uint64_t result)
{
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  double v5;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  _DWORD *v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(result + 180))
  {
    v1 = result;
    v2 = *(double *)(result + 32);
    v3 = *(double *)(result + 40);
    v4 = *(double *)(result + 48);
    v5 = *(double *)(result + 56);
    v6 = *(_DWORD *)(result + 28);
    v7 = *(_DWORD *)(result + 20);
    v8 = v4 == v2 && v5 == v3;
    if (!v8
      && (*(double *)(result + 32) = v4,
          *(double *)(result + 40) = v5,
          v9 = *(_DWORD *)(result + 176),
          (v9 & 0x30000) != 0)
      && (*(_DWORD *)(result + 176) = *(_DWORD *)(result + 176) & 0xFFFF00FF | (*(_DWORD *)(result + 176) << 8),
          BYTE1(v9) | v9))
    {
      result = aa_clip_edge(v11, BYTE1(v9), v9, *(double *)(result + 64), *(double *)(result + 72), *(double *)(result + 80), *(double *)(result + 88), *(double *)(result + 128), *(double *)(result + 136), *(double *)(result + 160), v2, v3, v4, v5);
      if ((_DWORD)result)
        v7 = HIDWORD(v11[(result - 1)]);
    }
    else
    {
      result = 0;
    }
    if (v6 != v7)
    {
      v10 = &v11[result];
      *v10 = *(_DWORD *)(v1 + 24);
      v10[1] = v6;
      result = (result + 1);
    }
    if ((_DWORD)result)
      return (uint64_t)aa_add_edges((char *)v1, (uint64_t)v11, result);
  }
  return result;
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeID v9;
  CG::Path *v10;
  int v11;

  if (path)
  {
    if (CGPathDisableTypeValidation || (v9 = CFGetTypeID(path), v9 == CGPathGetTypeID()))
    {
      v11 = *((_DWORD *)path + 4);
      v10 = (CGMutablePathRef)((char *)path + 16);
      if ((v11 - 10) > 0xFFFFFFF6)
        CG::Path::close_subpath(v10);
      else
        CGPostError((uint64_t)"%s: no current point.", v1, v2, v3, v4, v5, v6, v7, (char)"CGPathCloseSubpath");
    }
  }
}

uint64_t ripr_path_stroke(uint64_t result, uint64_t a2)
{
  __int128 *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *(__int128 **)(a2 + 8);
  switch(*(_DWORD *)a2)
  {
    case 0:
      v6 = *v2;
      if (result)
        result = (*(uint64_t (**)(_QWORD, _QWORD, __int128 *, _QWORD))(result + 24))(*(_QWORD *)(result + 8), 0, &v6, *(_QWORD *)(result + 48));
      break;
    case 1:
      v6 = *v2;
      if (result)
        result = (*(uint64_t (**)(_QWORD, uint64_t, __int128 *, _QWORD))(result + 24))(*(_QWORD *)(result + 8), 1, &v6, *(_QWORD *)(result + 48));
      break;
    case 2:
      if (result)
      {
        v3 = v2[1];
        v6 = *v2;
        v7 = v3;
        result = (*(uint64_t (**)(_QWORD, uint64_t, __int128 *, _QWORD))(result + 24))(*(_QWORD *)(result + 8), 2, &v6, *(_QWORD *)(result + 48));
      }
      break;
    case 3:
      if (result)
      {
        v4 = v2[1];
        v5 = v2[2];
        v6 = *v2;
        v7 = v4;
        v8 = v5;
        result = (*(uint64_t (**)(_QWORD, uint64_t, __int128 *, _QWORD))(result + 24))(*(_QWORD *)(result + 8), 3, &v6, *(_QWORD *)(result + 48));
      }
      break;
    case 4:
      if (result)
        result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(result + 24))(*(_QWORD *)(result + 8), 4, 0, *(_QWORD *)(result + 48));
      break;
    default:
      return result;
  }
  return result;
}

__n128 `anonymous namespace'::iterate(_anonymous_namespace_ *this, void *a2, float64x2_t *a3, const CGPoint *a4, path_iterator *a5)
{
  __n128 result;
  int v8;
  __n128 *v9;
  __n128 *v10;
  int v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  int v24;
  int v25;
  float64x2_t v26;
  float64x2_t v27;
  __n128 *v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;

  switch((int)a2)
  {
    case 0:
      if ((*((_DWORD *)this + 20) - 3) <= 1)
        CG::stroker::end_contour((uint64_t)this);
      *((_DWORD *)this + 20) = 2;
      *(float64x2_t *)((char *)this + 184) = *a3;
      result = *(__n128 *)((char *)this + 184);
      *(__n128 *)((char *)this + 136) = result;
      *(__n128 *)((char *)this + 88) = result;
      return result;
    case 1:
      v8 = *((_DWORD *)this + 20);
      if (!v8)
        return result;
      if (v8 == 1)
        *((_DWORD *)this + 20) = 2;
      *(float64x2_t *)((char *)this + 184) = *a3;
      v9 = (__n128 *)((char *)this + 184);
      v10 = (__n128 *)((char *)this + 136);
      if (!CG::stroker::add_line_segment(this, (const Point *)this + 34, (const Point *)this + 46))
        return result;
      goto LABEL_14;
    case 2:
      v11 = *((_DWORD *)this + 20);
      if (v11)
      {
        if (v11 == 1)
          *((_DWORD *)this + 20) = 2;
        v12 = *a3;
        v13 = a3[1];
        *(float64x2_t *)((char *)this + 184) = v13;
        v9 = (__n128 *)((char *)this + 184);
        v10 = (__n128 *)((char *)this + 136);
        __asm { FMOV            V3.2D, #3.0 }
        v19 = vsubq_f64(v12, vdivq_f64(vsubq_f64(v12, *(float64x2_t *)((char *)this + 136)), _Q3));
        v20 = vaddq_f64(v12, vdivq_f64(vsubq_f64(v13, v12), _Q3));
        v40 = *(float64x2_t *)((char *)this + 136);
        v41 = v19;
        v21 = *(float64x2_t *)((char *)this + 184);
        v42 = v20;
        v43 = v21;
        v22 = vsubq_f64(v19, v40);
        v23 = vsubq_f64(v20, v19);
        v44 = vmulq_f64(v22, _Q3);
        v45 = vmulq_f64(vsubq_f64(v23, v22), _Q3);
        v46 = vaddq_f64(v22, vsubq_f64(vsubq_f64(v43, v20), vaddq_f64(v23, v23)));
        CG::stroker::add_cubic_segment(this, &v40);
        if (v24)
        {
LABEL_14:
          result = *v9;
          *v10 = *v9;
        }
      }
      break;
    case 3:
      v25 = *((_DWORD *)this + 20);
      if (v25)
      {
        if (v25 == 1)
          *((_DWORD *)this + 20) = 2;
        v26 = *a3;
        v27 = a3[1];
        *(float64x2_t *)((char *)this + 184) = a3[2];
        v28 = (__n128 *)((char *)this + 184);
        v40 = *(float64x2_t *)((char *)this + 136);
        v41 = v26;
        v29 = *(float64x2_t *)((char *)this + 184);
        v42 = v27;
        v43 = v29;
        v30 = vsubq_f64(v26, v40);
        __asm { FMOV            V4.2D, #3.0 }
        v32 = vsubq_f64(v27, v26);
        v44 = vmulq_f64(v30, _Q4);
        v45 = vmulq_f64(vsubq_f64(v32, v30), _Q4);
        v46 = vaddq_f64(v30, vsubq_f64(vsubq_f64(v43, v27), vaddq_f64(v32, v32)));
        CG::stroker::add_cubic_segment(this, &v40);
        if (v33)
        {
          result = *v28;
          *(__n128 *)((char *)this + 136) = *v28;
        }
      }
      break;
    case 4:
      v34 = *((_DWORD *)this + 20);
      if (v34 >= 2)
      {
        if (v34 == 4)
        {
          CG::stroker::add_line_segment(this, (const Point *)this + 34, (const Point *)this + 22);
          *(_OWORD *)((char *)this + 136) = *(_OWORD *)((char *)this + 88);
          CG::stroker::add_join(this, (double *)this + 11, (double *)this + 13, (double *)this + 15);
          v35 = *((_QWORD *)this + 9);
          if (v35)
          {
            (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(v35 + 24))(*(_QWORD *)(v35 + 8), 4, 0, *(_QWORD *)(v35 + 48));
            v36 = *((_QWORD *)this + 9);
            v40 = *(float64x2_t *)((char *)this + 200);
            if (v36)
              (*(void (**)(_QWORD, _QWORD, float64x2_t *, _QWORD))(v36 + 24))(*(_QWORD *)(v36 + 8), 0, &v40, *(_QWORD *)(v36 + 48));
          }
          CG::stroker::unroll_path(this);
          v37 = *((_QWORD *)this + 9);
          if (v37)
            (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(v37 + 24))(*(_QWORD *)(v37 + 8), 4, 0, *(_QWORD *)(v37 + 48));
        }
        else
        {
          v38 = (_OWORD *)((char *)this + 88);
          v39 = vsubq_f64(*(float64x2_t *)((char *)this + 184), *(float64x2_t *)((char *)this + 88));
          CG::stroker::add_point((uint64_t)this, (double *)this + 11, v39.f64[0], v39.f64[1]);
          *(_OWORD *)((char *)this + 136) = *v38;
        }
        *((_DWORD *)this + 20) = 1;
        result = *(__n128 *)((char *)this + 88);
        *(__n128 *)((char *)this + 184) = result;
      }
      break;
    default:
      abort();
  }
  return result;
}

uint64_t aa_clip_edge(_DWORD *a1, int a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  double v19;
  unsigned int v20;
  double v21;
  double v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  double v26;

  v19 = a12;
  v20 = a3 & 0xFFFFFFEF;
  v21 = a14 - a12;
  v22 = a13 - a11;
  v23 = 0;
  v24 = a2 & 0xFFFFFFEF;
  if ((a2 & 0xFFFFFFEF) == 0)
    goto LABEL_13;
  v25 = 16 * (v20 == 0);
  while ((v20 & v24) == 0)
  {
    if (v24)
    {
      if ((v24 & 4) == 0)
        goto LABEL_6;
    }
    else
    {
      *a1 = (int)(a10 + a8 * a11);
      a1[1] = (int)(a10 + a9 * v19);
      a1 += 2;
      v23 = (v23 + 1);
LABEL_13:
      v25 = 0;
      v22 = -v22;
      v21 = -v21;
      v19 = a14;
      a11 = a13;
      v24 = v20;
      v20 = 0;
      if ((v24 & 4) == 0)
      {
LABEL_6:
        if ((v24 & 1) != 0)
        {
          if ((v25 & 5) != 0)
          {
            v24 &= ~1u;
          }
          else
          {
            v19 = v19 + (a6 - a11) * v21 / v22;
            v24 = (2 * (v19 > a7)) | (8 * (v19 < a5));
          }
          v25 |= 1u;
          a11 = a6;
        }
        else if ((v24 & 2) != 0)
        {
          if ((v25 & 0xA) != 0)
          {
            v24 &= ~2u;
          }
          else
          {
            a11 = a11 + (a7 - v19) * v22 / v21;
            v24 = (a11 > a6) | (4 * (a11 < a4));
          }
          v25 |= 2u;
          v19 = a7;
        }
        else if ((v24 & 8) != 0)
        {
          v24 &= ~8u;
          v26 = a11 + (a5 - v19) * v22 / v21;
          if ((v25 & 0xA) == 0)
          {
            a11 = v26;
            v24 = (v26 > a6) | (4 * (v26 < a4));
          }
          v25 |= 8u;
          v19 = a5;
        }
        goto LABEL_26;
      }
    }
    if ((v25 & 5) != 0)
    {
      v24 &= ~4u;
    }
    else
    {
      v19 = v19 + (a4 - a11) * v21 / v22;
      v24 = (2 * (v19 > a7)) | (8 * (v19 < a5));
    }
    v25 |= 4u;
    a11 = a4;
LABEL_26:
    if (!(v25 & 0x10 | v20 | v24))
      goto LABEL_27;
  }
  if (a2 == a3)
    return v23;
  if (((a3 | a2) & 0x10) == 0)
  {
    LOBYTE(a3) = a3 | a2 | 0x10;
    goto LABEL_28;
  }
  if ((v20 & v24 & 4) != 0)
  {
    if ((a2 & 4) == 0)
    {
      if ((a2 & 8) != 0)
        v19 = a5;
      else
        v19 = a7;
      a11 = a4;
      goto LABEL_27;
    }
  }
  else if ((v20 & v24 & 1) != 0)
  {
    if ((a2 & 1) == 0)
    {
      if ((a2 & 8) != 0)
        v19 = a5;
      else
        v19 = a7;
      a11 = a6;
      goto LABEL_27;
    }
  }
  else if ((v20 & v24 & 2) != 0)
  {
    if ((a2 & 2) == 0)
    {
      if ((a2 & 4) != 0)
        a11 = a4;
      else
        a11 = a6;
      v19 = a7;
      goto LABEL_27;
    }
  }
  else
  {
    if ((v20 & v24 & 8) == 0)
    {
LABEL_27:
      *a1 = (int)(a10 + a8 * a11);
      a1[1] = (int)(a10 + a9 * v19);
      a1 += 2;
      v23 = (v23 + 1);
      goto LABEL_28;
    }
    if ((a2 & 8) == 0)
    {
      if ((a2 & 4) != 0)
        a11 = a4;
      else
        a11 = a6;
      v19 = a5;
      goto LABEL_27;
    }
  }
LABEL_28:
  if ((a3 & 0x10) != 0)
  {
    if ((a3 & 4) == 0)
      a4 = a6;
    if ((a3 & 8) == 0)
      a5 = a7;
    *a1 = (int)(a10 + a8 * a4);
    a1[1] = (int)(a10 + a9 * a5);
    return (v23 + 1);
  }
  return v23;
}

BOOL CG::stroker::add_line_segment(CG::stroker *this, const Point *a2, const Point *a3)
{
  float64x2_t v4;
  double v5;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  float64x2_t *v21;
  float64x2_t v22;
  __int128 v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  __int128 v31;
  float64x2_t v32;
  Point v33[2];
  double v34;

  v4 = vsubq_f64(*(float64x2_t *)&a3->v, *(float64x2_t *)&a2->v);
  v32 = v4;
  v5 = vmlad_n_f64(vmuld_lane_f64(v4.f64[1], v4, 1), v4.f64[0], v4.f64[0]);
  if (v5 <= 0.00000001)
  {
    if (*((_DWORD *)this + 20) == 2)
      *((_DWORD *)this + 20) = 3;
  }
  else
  {
    v8 = *(double *)this;
    v9 = *((double *)this + 1);
    v11 = *((double *)this + 2);
    v10 = *((double *)this + 3);
    if (*(double *)this * v10 - v9 * v11 >= 0.0)
    {
      v14 = -v9;
      v15 = -v11;
      v12 = *((double *)this + 3);
      v13 = *(double *)this;
    }
    else
    {
      v12 = -v10;
      v13 = -v8;
      v14 = *((double *)this + 1);
      v15 = *((double *)this + 2);
    }
    v16 = v15 * v4.f64[1] + v4.f64[0] * v12;
    v17 = v13 * v4.f64[1] + v4.f64[0] * v14;
    if (v16 != 0.0 || v17 != 0.0)
    {
      v18 = sqrt(v17 * v17 + v16 * v16);
      v16 = v16 / v18;
      v17 = v17 / v18;
    }
    *(double *)&v31 = v16;
    *((double *)&v31 + 1) = v17;
    v19 = v11 * v16 - v17 * v8;
    v20 = v10 * v16 - v17 * v9;
    v21 = (float64x2_t *)((char *)this + 152);
    if (*((_DWORD *)this + 20) == 4)
    {
      CG::stroker::add_join(this, (double *)&a2->v, v32.f64, (double *)&v31);
      *v21 = v32;
      *(_OWORD *)((char *)this + 168) = v31;
    }
    else
    {
      *((_DWORD *)this + 20) = 4;
      v22 = v32;
      *v21 = v32;
      *(float64x2_t *)((char *)this + 104) = v22;
      v23 = v31;
      *(_OWORD *)((char *)this + 168) = v31;
      *(_OWORD *)((char *)this + 120) = v23;
      v24 = v20 + *(double *)&a2[2].v;
      v25 = *((_QWORD *)this + 9);
      *(double *)&v33[0].v = v19 + *(double *)&a2->v;
      v34 = v24;
      if (v25)
        (*(void (**)(_QWORD, _QWORD, Point *, _QWORD))(v25 + 24))(*(_QWORD *)(v25 + 8), 0, v33, *(_QWORD *)(v25 + 48));
    }
    v26 = *(double *)&a2[2].v - v20;
    *(double *)&v33[0].v = *(double *)&a2->v - v19;
    v34 = v26;
    CG::stroker::push_opposite_element(this, kCGPathElementAddLineToPoint, v33);
    v27 = *(double *)&a3->v;
    v28 = *(double *)&a3[2].v;
    v29 = *((_QWORD *)this + 9);
    *(double *)&v33[0].v = v19 + *(double *)&a3->v;
    v34 = v20 + v28;
    if (v29)
    {
      (*(void (**)(_QWORD, uint64_t, Point *, _QWORD))(v29 + 24))(*(_QWORD *)(v29 + 8), 1, v33, *(_QWORD *)(v29 + 48));
      v27 = *(double *)&a3->v;
      v28 = *(double *)&a3[2].v;
    }
    *((double *)this + 25) = v27 - v19;
    *((double *)this + 26) = v28 - v20;
  }
  return v5 > 0.00000001;
}

uint64_t CG::stroker::add_cap(uint64_t result, double *a2, double a3, double a4)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;

  v5 = result;
  v34 = *MEMORY[0x1E0C80C00];
  v6 = *(double *)(result + 16);
  v7 = *(double *)(result + 24);
  v8 = *(double *)(result + 8);
  v9 = v6 * a3 - a4 * *(double *)result;
  v10 = v7 * a3 - a4 * v8;
  v11 = *(_DWORD *)(result + 40);
  if (v11 && v10 * v10 + v9 * v9 > 0.0025)
  {
    v12 = v6 * a4 + a3 * *(double *)result;
    v13 = v7 * a4 + a3 * v8;
    if (v11 != 2)
    {
      if (v11 != 1)
        abort();
      v14 = *(_QWORD *)(result + 72);
      if (v14)
      {
        v15 = a2[1];
        v16 = v12 + *a2;
        v28 = v12 * 0.55228475 + v9 + *a2;
        v29 = v13 * 0.55228475 + v10 + v15;
        v30 = v9 * 0.55228475 + v16;
        v31 = v10 * 0.55228475 + v13 + v15;
        v32 = v16;
        v33 = v13 + v15;
        result = (*(uint64_t (**)(_QWORD, uint64_t, double *, _QWORD))(v14 + 24))(*(_QWORD *)(v14 + 8), 3, &v28, *(_QWORD *)(v14 + 48));
        v17 = *(_QWORD *)(v5 + 72);
        if (v17)
        {
          v18 = a2[1];
          v19 = *a2 - v9;
          v28 = v12 + *a2 - v9 * 0.55228475;
          v29 = v13 + v18 - v10 * 0.55228475;
          v30 = v12 * 0.55228475 + v19;
          v31 = v13 * 0.55228475 + v18 - v10;
          v32 = v19;
          v33 = v18 - v10;
          return (*(uint64_t (**)(_QWORD, uint64_t, double *, _QWORD))(v17 + 24))(*(_QWORD *)(v17 + 8), 3, &v28, *(_QWORD *)(v17 + 48));
        }
      }
      return result;
    }
    v23 = *a2;
    v24 = a2[1];
    v25 = *(_QWORD *)(result + 72);
    v28 = v12 + v9 + *a2;
    v29 = v13 + v10 + v24;
    if (v25)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, double *, _QWORD))(v25 + 24))(*(_QWORD *)(v25 + 8), 1, &v28, *(_QWORD *)(v25 + 48));
      v23 = *a2;
      v24 = a2[1];
      v25 = *(_QWORD *)(v5 + 72);
    }
    v26 = v23 - v9;
    v27 = v24 - v10;
    v28 = v12 + v26;
    v29 = v13 + v27;
    if (!v25)
    {
      v28 = v26;
      v29 = v27;
      return result;
    }
    result = (*(uint64_t (**)(_QWORD, uint64_t, double *, _QWORD))(v25 + 24))(*(_QWORD *)(v25 + 8), 1, &v28, *(_QWORD *)(v25 + 48));
    v22 = *(_QWORD *)(v5 + 72);
    v20 = *a2 - v9;
    v21 = a2[1] - v10;
  }
  else
  {
    v20 = *a2 - v9;
    v21 = a2[1] - v10;
    v22 = *(_QWORD *)(result + 72);
  }
  v28 = v20;
  v29 = v21;
  if (v22)
    return (*(uint64_t (**)(_QWORD, uint64_t, double *, _QWORD))(v22 + 24))(*(_QWORD *)(v22 + 8), 1, &v28, *(_QWORD *)(v22 + 48));
  return result;
}

void `anonymous namespace'::add_element_to_path(_anonymous_namespace_ *this, void *a2, uint64_t a3, const CGAffineTransform *a4, const CGAffineTransform *a5)
{
  CGRect v6;
  CGRect v7;

  switch((int)a2)
  {
    case -3:
      v7.origin.x = *(CGFloat *)a3;
      v7.origin.y = *(CGFloat *)(a3 + 8);
      v7.size.width = *(double *)(a3 + 16) - *(double *)a3;
      v7.size.height = *(double *)(a3 + 24) - v7.origin.y;
      v6 = CGRectStandardize(v7);
      CG::Path::append_rect(this, &v6, 0);
      break;
    case 0:
      CG::Path::move_to_point(this, 0, (const CGAffineTransform *)a3, *(__n128 *)a3);
      break;
    case 1:
      CG::Path::add_line_to_point(this, 0, (const CGAffineTransform *)a3, *(float64x2_t *)a3);
      break;
    case 2:
      CG::Path::add_quad_curve_to_point(this, (float64x2_t *)(a3 + 16), 0, a4, *(float64x2_t *)a3);
      break;
    case 3:
      CG::Path::add_curve_to_point(this, (float64x2_t *)(a3 + 16), (float64x2_t *)(a3 + 32), 0, a5, *(float64x2_t *)a3);
      break;
    case 4:
      CG::Path::close_subpath(this);
      break;
    default:
      abort();
  }
}

uint64_t ___ZNK2CG4Path14apply_iteratorEP13path_iterator_block_invoke(uint64_t result, int a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  switch(a2)
  {
    case 0:
      v3 = *(_QWORD *)(result + 32);
      v10 = *a3;
      if (v3)
        result = (*(uint64_t (**)(_QWORD, _QWORD, __int128 *, _QWORD))(v3 + 24))(*(_QWORD *)(v3 + 8), 0, &v10, *(_QWORD *)(v3 + 48));
      break;
    case 1:
      v4 = *(_QWORD *)(result + 32);
      v10 = *a3;
      if (v4)
        result = (*(uint64_t (**)(_QWORD, uint64_t, __int128 *, _QWORD))(v4 + 24))(*(_QWORD *)(v4 + 8), 1, &v10, *(_QWORD *)(v4 + 48));
      break;
    case 2:
      v5 = *(_QWORD *)(result + 32);
      if (v5)
      {
        v6 = a3[1];
        v10 = *a3;
        v11 = v6;
        result = (*(uint64_t (**)(_QWORD, uint64_t, __int128 *, _QWORD))(v5 + 24))(*(_QWORD *)(v5 + 8), 2, &v10, *(_QWORD *)(v5 + 48));
      }
      break;
    case 3:
      v7 = *(_QWORD *)(result + 32);
      if (v7)
      {
        v8 = a3[1];
        v10 = *a3;
        v11 = v8;
        v12 = a3[2];
        result = (*(uint64_t (**)(_QWORD, uint64_t, __int128 *, _QWORD))(v7 + 24))(*(_QWORD *)(v7 + 8), 3, &v10, *(_QWORD *)(v7 + 48));
      }
      break;
    case 4:
      v9 = *(_QWORD *)(result + 32);
      if (v9)
        result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(v9 + 24))(*(_QWORD *)(v9 + 8), 4, 0, *(_QWORD *)(v9 + 48));
      break;
    default:
      abort();
  }
  return result;
}

void ___ZN18CGPathRandomAccess8add_pathEPK6CGPath17CGAffineTransformb_block_invoke(uint64_t a1, int *a2)
{
  int v2;
  _QWORD *v3;
  unint64_t v4;
  int64x2_t *v5;
  int64x2_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  int64x2_t *v26;
  unint64_t v27;

  v2 = *a2;
  if ((*a2 - 2) < 2)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v9 = *(_QWORD *)(v7 + 40);
    v8 = *(_QWORD *)(v7 + 48);
    if (v9 != v8)
    {
      ++*(_QWORD *)(v8 - 16);
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(_QWORD *)(v10 + 48);
      if (v12 != v11)
      {
        v13 = *(_QWORD *)(v11 - 8) + 3;
LABEL_12:
        *(_QWORD *)(v11 - 8) = v13;
        return;
      }
    }
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v2 == 1)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v16 = *(_QWORD *)(v14 + 40);
    v15 = *(_QWORD *)(v14 + 48);
    if (v16 != v15)
    {
      ++*(_QWORD *)(v15 - 16);
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v18 = *(_QWORD *)(v17 + 40);
      v11 = *(_QWORD *)(v17 + 48);
      if (v18 != v11)
      {
        v13 = *(_QWORD *)(v11 - 8) + 1;
        goto LABEL_12;
      }
    }
    goto LABEL_28;
  }
  if (v2)
    return;
  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (int64x2_t *)v3[6];
  v4 = v3[7];
  if ((unint64_t)v5 >= v4)
  {
    v19 = (int64x2_t *)v3[5];
    v20 = v5 - v19;
    v21 = v20 + 1;
    if (!((unint64_t)(v20 + 1) >> 60))
    {
      v22 = v4 - (_QWORD)v19;
      if (v22 >> 3 > v21)
        v21 = v22 >> 3;
      v23 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0;
      v24 = 0xFFFFFFFFFFFFFFFLL;
      if (!v23)
        v24 = v21;
      if (v24)
      {
        v24 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(v24);
        v19 = (int64x2_t *)v3[5];
        v5 = (int64x2_t *)v3[6];
      }
      else
      {
        v25 = 0;
      }
      v26 = (int64x2_t *)(v24 + 16 * v20);
      v27 = v24 + 16 * v25;
      *v26 = vdupq_n_s64(1uLL);
      v6 = v26 + 1;
      if (v5 != v19)
      {
        do
        {
          v26[-1] = v5[-1];
          --v26;
          --v5;
        }
        while (v5 != v19);
        v19 = (int64x2_t *)v3[5];
      }
      v3[5] = v26;
      v3[6] = v6;
      v3[7] = v27;
      if (v19)
        operator delete(v19);
      goto LABEL_26;
    }
LABEL_29:
    std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
  }
  *v5 = vdupq_n_s64(1uLL);
  v6 = v5 + 1;
LABEL_26:
  v3[6] = v6;
}

uint64_t CG::stroker::add_point(uint64_t result, double *a2, double a3, double a4)
{
  int v4;
  _BOOL4 v6;
  _BOOL4 v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  double v39;
  double v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  double v48;
  double v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(result + 40);
  if (v4)
  {
    v6 = a3 == 0.0;
    v7 = a4 == 0.0;
    if (v6 && v7)
      v8 = 1.0;
    else
      v8 = a3;
    if (v6 && v7)
      v9 = 1.0;
    else
      v9 = a4;
    v10 = *(double *)result;
    v11 = *(double *)(result + 8);
    v13 = *(double *)(result + 16);
    v12 = *(double *)(result + 24);
    if (*(double *)result * v12 - v11 * v13 >= 0.0)
    {
      v16 = -v11;
      v17 = -v13;
      v14 = *(double *)(result + 24);
      v15 = *(double *)result;
    }
    else
    {
      v14 = -v12;
      v15 = -v10;
      v16 = *(double *)(result + 8);
      v17 = *(double *)(result + 16);
    }
    v18 = v9 * v17 + v8 * v14;
    v19 = v9 * v15 + v8 * v16;
    if (v18 != 0.0 || v19 != 0.0)
    {
      v20 = sqrt(v19 * v19 + v18 * v18);
      v18 = v18 / v20;
      v19 = v19 / v20;
    }
    v21 = v13 * v18 - v19 * v10;
    v22 = v12 * v18 - v19 * v11;
    v23 = v13 * v19 + v18 * v10;
    v24 = v12 * v19 + v18 * v11;
    if (v4 == 2)
    {
      v44 = *a2;
      v45 = a2[1];
      v46 = v21 + *a2;
      v27 = result + 72;
      v47 = *(_QWORD *)(result + 72);
      v52 = v46 - v23;
      v53 = v22 + v45 - v24;
      if (v47)
      {
        result = (*(uint64_t (**)(_QWORD, _QWORD, double *, _QWORD))(v47 + 24))(*(_QWORD *)(v47 + 8), 0, &v52, *(_QWORD *)(v47 + 48));
        v44 = *a2;
        v45 = a2[1];
        v47 = *(_QWORD *)v27;
        v52 = v23 + v21 + *a2;
        v53 = v24 + v22 + v45;
        if (v47)
        {
          result = (*(uint64_t (**)(_QWORD, uint64_t, double *, _QWORD))(v47 + 24))(*(_QWORD *)(v47 + 8), 1, &v52, *(_QWORD *)(v47 + 48));
          v44 = *a2;
          v45 = a2[1];
          v47 = *(_QWORD *)v27;
        }
      }
      else
      {
        v52 = v23 + v46;
        v53 = v24 + v22 + v45;
      }
      v48 = v44 - v21;
      v49 = v45 - v22;
      v52 = v23 + v48;
      v53 = v24 + v49;
      if (v47)
      {
        result = (*(uint64_t (**)(_QWORD, uint64_t, double *, _QWORD))(v47 + 24))(*(_QWORD *)(v47 + 8), 1, &v52, *(_QWORD *)(v47 + 48));
        v50 = *(_QWORD *)v27;
        v51 = a2[1] - v22 - v24;
        v52 = *a2 - v21 - v23;
        v53 = v51;
        if (v50)
          result = (*(uint64_t (**)(_QWORD, uint64_t, double *, _QWORD))(v50 + 24))(*(_QWORD *)(v50 + 8), 1, &v52, *(_QWORD *)(v50 + 48));
      }
      else
      {
        v52 = v48 - v23;
        v53 = v49 - v24;
      }
      goto LABEL_30;
    }
    if (v4 != 1)
      abort();
    v25 = v22 + a2[1];
    v27 = result + 72;
    v26 = *(_QWORD *)(result + 72);
    v52 = v21 + *a2;
    v53 = v25;
    if (v26)
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, double *, _QWORD))(v26 + 24))(*(_QWORD *)(v26 + 8), 0, &v52, *(_QWORD *)(v26 + 48));
      v28 = *(_QWORD *)v27;
      if (*(_QWORD *)v27)
      {
        v29 = v23 * 0.55228475;
        v30 = v24 * 0.55228475;
        v31 = v21 * 0.55228475;
        v32 = v22 * 0.55228475;
        v33 = a2[1];
        v34 = v23 + *a2;
        v52 = v23 * 0.55228475 + v21 + *a2;
        v53 = v24 * 0.55228475 + v22 + v33;
        v54 = v21 * 0.55228475 + v34;
        v55 = v22 * 0.55228475 + v24 + v33;
        v56 = v34;
        v57 = v24 + v33;
        result = (*(uint64_t (**)(_QWORD, uint64_t, double *, _QWORD))(v28 + 24))(*(_QWORD *)(v28 + 8), 3, &v52, *(_QWORD *)(v28 + 48));
        v35 = *(_QWORD *)v27;
        if (*(_QWORD *)v27)
        {
          v36 = a2[1];
          v37 = *a2 - v21;
          v52 = v23 + *a2 - v31;
          v53 = v24 + v36 - v32;
          v54 = v29 + v37;
          v55 = v30 + v36 - v22;
          v56 = v37;
          v57 = v36 - v22;
          result = (*(uint64_t (**)(_QWORD, uint64_t, double *, _QWORD))(v35 + 24))(*(_QWORD *)(v35 + 8), 3, &v52, *(_QWORD *)(v35 + 48));
          v38 = *(_QWORD *)v27;
          if (*(_QWORD *)v27)
          {
            v39 = a2[1];
            v40 = *a2 - v23;
            v52 = *a2 - v21 - v29;
            v53 = v39 - v22 - v30;
            v54 = v40 - v31;
            v55 = v39 - v24 - v32;
            v56 = v40;
            v57 = v39 - v24;
            result = (*(uint64_t (**)(_QWORD, uint64_t, double *, _QWORD))(v38 + 24))(*(_QWORD *)(v38 + 8), 3, &v52, *(_QWORD *)(v38 + 48));
            v41 = *(_QWORD *)v27;
            if (*(_QWORD *)v27)
            {
              v42 = a2[1];
              v43 = v21 + *a2;
              v52 = v31 + *a2 - v23;
              v53 = v32 + v42 - v24;
              v54 = v43 - v29;
              v55 = v22 + v42 - v30;
              v56 = v43;
              v57 = v22 + v42;
              result = (*(uint64_t (**)(_QWORD, uint64_t, double *, _QWORD))(v41 + 24))(*(_QWORD *)(v41 + 8), 3, &v52, *(_QWORD *)(v41 + 48));
LABEL_30:
              if (*(_QWORD *)v27)
                return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v27 + 24))(*(_QWORD *)(*(_QWORD *)v27 + 8), 4, 0, *(_QWORD *)(*(_QWORD *)v27 + 48));
            }
          }
        }
      }
    }
  }
  return result;
}

void CGPathRandomAccessSubpath::close_if_needed(CGPathRandomAccessSubpath *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  double *v5;
  double *v6;
  uint64_t v7;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  char v22;

  v1 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  v3 = v2 - *(_QWORD *)this;
  if ((unint64_t)v3 >= 0x20)
  {
    if (v1 == v2)
      goto LABEL_24;
    v5 = (double *)*((_QWORD *)this + 3);
    v6 = (double *)*((_QWORD *)this + 4);
    v7 = (((char *)v6 - (char *)v5) >> 4) - 1;
    if (*(_QWORD *)(v2 - 16) == v7)
      return;
    if (v5 == v6)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    if (*(v6 - 2) != *v5 || *(v6 - 1) != v5[1])
    {
      v9 = *((_QWORD *)this + 2);
      if (v2 < v9)
      {
        *(_QWORD *)v2 = v7;
        *(_BYTE *)(v2 + 8) = 0;
        v10 = (char *)(v2 + 16);
LABEL_22:
        *((_QWORD *)this + 1) = v10;
        return;
      }
      v11 = v3 >> 4;
      v12 = (v3 >> 4) + 1;
      if (!(v12 >> 60))
      {
        v13 = v9 - v1;
        if (v13 >> 3 > v12)
          v12 = v13 >> 3;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
          v14 = 0xFFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        v15 = (char *)std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(v14);
        v16 = &v15[16 * v11];
        v18 = &v15[16 * v17];
        *(_QWORD *)v16 = v7;
        v16[8] = 0;
        v10 = v16 + 16;
        v20 = *(_BYTE **)this;
        v19 = (_BYTE *)*((_QWORD *)this + 1);
        if (v19 != *(_BYTE **)this)
        {
          do
          {
            v21 = *((_QWORD *)v19 - 2);
            v19 -= 16;
            v22 = v19[8];
            *((_QWORD *)v16 - 2) = v21;
            v16 -= 16;
            v16[8] = v22;
          }
          while (v19 != v20);
          v19 = *(_BYTE **)this;
        }
        *(_QWORD *)this = v16;
        *((_QWORD *)this + 1) = v10;
        *((_QWORD *)this + 2) = v18;
        if (v19)
          operator delete(v19);
        goto LABEL_22;
      }
LABEL_25:
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    }
  }
}

BOOL points_are_nearly_collinear(CGPoint a1, CGPoint a2, CGPoint a3, CGAffineTransform *a4)
{
  double b;
  double c;
  double d;
  double tx;
  double ty;
  double v9;
  double v10;
  double v11;

  b = a4->b;
  c = a4->c;
  d = a4->d;
  tx = a4->tx;
  ty = a4->ty;
  v9 = tx + a1.y * c + a4->a * a1.x;
  v10 = ty + a1.y * d + b * a1.x;
  v11 = tx + a2.y * c + a4->a * a2.x;
  return ((uint64_t)v10 - (uint64_t)(ty + a2.y * d + b * a2.x)) * ((uint64_t)v11 - (uint64_t)(tx + a3.y * c + a4->a * a3.x)) == ((uint64_t)(ty + a2.y * d + b * a2.x) - (uint64_t)(ty + a3.y * d + b * a3.x)) * ((uint64_t)v9 - (uint64_t)v11);
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  double x;
  BOOL result;
  double y;

  x = point.x;
  if (rect.origin.x == INFINITY || rect.origin.y == INFINITY)
    return 0;
  y = point.y;
  if (rect.size.width < 0.0 || rect.size.height < 0.0)
    rect = CGRectStandardize(rect);
  result = 0;
  if (x >= rect.origin.x && x < rect.origin.x + rect.size.width && y >= rect.origin.y)
    return y < rect.origin.y + rect.size.height;
  return result;
}

uint64_t aa_render_shape(uint64_t result, int a2, void **a3, int a4, int a5, int a6, int a7, int a8, __n128 a9)
{
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  size_t v37;
  uint64_t v38;
  char *v39;
  char v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  char *v45;
  uint64_t **v46;
  char *v47;
  uint64_t *v48;
  int v49;
  signed int v50;
  uint64_t *v51;
  signed int v52;
  unsigned int v53;
  _QWORD *v54;
  int *v55;
  _DWORD *v56;
  int v57;
  uint64_t v58;
  char *v59;
  signed int v60;
  uint64_t v61;
  int *v62;
  uint64_t *v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v75;
  int v76;
  unsigned int v77;
  size_t v78;
  char *v79;
  _DWORD *v80;
  int *v81;
  int v82;
  int v83;
  unsigned int v84;
  char *v86;
  _DWORD *v87;
  _DWORD *v88;
  char *v89;
  int v90;
  unsigned int *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  int v97;
  BOOL v98;
  int v99;
  unsigned int *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  unsigned int v105;
  int v106;
  uint64_t **v107;
  signed int v108;
  uint64_t v109;
  int v110;
  char *v111;
  int v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t *v121;
  int v122;
  uint64_t *v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t **v130;
  _DWORD *v131;
  int v132;
  int *v133;
  int *v134;
  int v135;
  int v136;
  int v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t **v144;
  char *v145;
  void **v146;
  uint64_t v147;
  signed int v148;
  int v149;
  _DWORD *v150;
  signed int v151;
  int v152;
  int v153;
  int v154;
  uint64_t v155;
  int *v156;
  int v157;
  _DWORD *v158;
  uint64_t v159;

  v159 = *MEMORY[0x1E0C80C00];
  if (!a3)
    return 0;
  v9 = result;
  v10 = *(_DWORD *)result;
  v11 = *(_DWORD *)(result + 4);
  v12 = *(_DWORD *)(result + 8);
  v13 = *(_DWORD *)(result + 12);
  if (v12 - *(_DWORD *)result < 31 || v13 - v11 < 31)
    return 0;
  v15 = *(_DWORD *)(result + 184);
  if (24 * v15 + 44 < 1)
    return 0;
  v16 = (a4 / 4);
  v17 = (char *)*a3;
  if (*a3)
  {
    if (a4 < 36)
      return 0;
  }
  else if (a4 >= 256)
  {
    v16 = v16;
  }
  else
  {
    v16 = 64;
  }
  v18 = v10 >> 12;
  v19 = (v12 + 4095) >> 12;
  v20 = v11 >> 12;
  v21 = v13 + 4095;
  v22 = v21 >> 12;
  if ((a2 & 4) == 0)
  {
    v153 = 0;
    v154 = a2;
    v146 = a3;
    v141 = 0;
    v23 = v11 >> 12;
    v24 = v21 >> 12;
    goto LABEL_15;
  }
  result = 0;
  if (a7 > a5)
  {
    v146 = a3;
    if (a8 > a6)
    {
      v29 = v10 >> 12;
      result = 0;
      if (v20 <= a6)
        v23 = a6;
      else
        v23 = v11 >> 12;
      if (v20 >= a6)
        v30 = 3;
      else
        v30 = 4;
      if (v22 >= a8)
        v24 = a8;
      else
        v24 = v21 >> 12;
      v32 = v29 - a5;
      v31 = v29 < a5;
      if (v29 <= a5)
        v29 = a5;
      v33 = !v31;
      v34 = v30 - v33 - (a8 >= v22);
      v35 = v19 <= a7;
      if (v19 >= a7)
        v19 = a7;
      if (v34 == v35)
        a2 &= ~4u;
      if (v24 > v23 && v19 > v29)
      {
        v18 = v29;
        v141 = (a8 - v22) & ~((a8 - v22) >> 31);
        v153 = v32 & ~(v32 >> 31);
        v154 = a2;
LABEL_15:
        v152 = v18;
        if (v15 == 2 && *(_WORD *)(v9 + 188) == 2)
        {
          v25 = (v10 + 15) >> 12;
          v26 = (v12 + 4080) >> 12;
          if ((v154 & 4) != 0)
          {
            result = 0;
            if (v25 <= v152)
              v25 = v152;
            if (v26 >= v19)
              v26 = v19;
            if (v24 <= v23 || v26 <= v25)
              return result;
            v20 = v23;
            v22 = v24;
          }
          if (v17
            || (result = (uint64_t)malloc_type_realloc(0, (4 * (int)v16 + 511) & 0xFFFFFFFFFFFFFE00, 0x7492344AuLL),
                (v17 = (char *)result) != 0))
          {
            *(_QWORD *)v17 = 0x280000000;
            v27 = v24 + v141;
            *((_DWORD *)v17 + 2) = v24 + v141 - v22;
            *((_DWORD *)v17 + 3) = 4;
            v28 = v153 - v152 + v26;
            *((_DWORD *)v17 + 4) = v153 - v152 + v25;
            *((_DWORD *)v17 + 5) = v28;
            *((_DWORD *)v17 + 6) = v27 - v20;
            *(_QWORD *)(v17 + 28) = 0x7FFFFFFF00000002;
            *v146 = v17;
            return 36;
          }
          return result;
        }
        v157 = v19;
        v36 = v24 - v23;
        if (v24 - v23 > 1015)
        {
          v37 = 8 * (v36 + 16);
          v39 = (char *)malloc_type_malloc(v37, 0x705560E0uLL);
          v139 = v39;
        }
        else
        {
          v37 = 8 * (v24 - v23 + 16);
          MEMORY[0x1E0C80A78](result, a9);
          v39 = (char *)&v138 - v38;
          bzero((char *)&v138 - v38, v37);
          v139 = 0;
        }
        v40 = v154;
        bzero(v39, v37);
        v41 = (uint64_t)&v39[-8 * v23 + 32];
        *(_DWORD *)(v9 + 176) = *(_DWORD *)(v9 + 176) & 0xFC0FFFFF | ((v40 & 1) << 25);
        v140 = v41;
        v142 = v23 << 12;
        if ((v40 & 4) != 0)
          v42 = aa_distribute_clip_edges(v9, v41, (v23 << 12), (v24 << 12));
        else
          v42 = aa_distribute_edges(v9, v41);
        v43 = v152;
        v44 = v157;
        if (!v42
          || !v17
          && (v45 = (char *)malloc_type_realloc(0, (4 * (int)v16 + 511) & 0xFFFFFFFFFFFFFE00, 0x7492344AuLL),
              v44 = v157,
              (v17 = v45) == 0))
        {
LABEL_251:
          result = (uint64_t)v139;
          if (!v139)
            return result;
          free(v139);
          return 0;
        }
        *(_QWORD *)(v9 + 200) = 0;
        *(_QWORD *)(v9 + 208) = 0;
        v46 = (uint64_t **)(v9 + 200);
        v47 = &v39[8 * v36 + 32];
        v48 = *(uint64_t **)v47;
        if (*(_QWORD *)v47)
        {
          v49 = v141;
          v50 = v142;
        }
        else
        {
          v49 = v141;
          v50 = v142;
          do
          {
            v51 = (uint64_t *)*((_QWORD *)v47 - 1);
            v47 -= 8;
            v48 = v51;
            ++v49;
          }
          while (!v51);
        }
        v52 = *((_DWORD *)v48 + 5);
        v53 = v52 & 0xFFFFF000;
        if (v52 == (v52 & 0xFFFFF000))
        {
          do
          {
            v54 = v48;
            v48 = (uint64_t *)*v48;
          }
          while (v48);
          *v54 = *((_QWORD *)v47 - 1);
          *((_QWORD *)v47 - 1) = *(_QWORD *)v47;
          *(_QWORD *)v47 = 0;
          v53 = v52 - 4096;
          v47 -= 8;
        }
        else
        {
          --v49;
        }
        *(_QWORD *)v17 = 0x280000000;
        v55 = (int *)(v17 + 8);
        if (v52 < v23 << 12)
          goto LABEL_69;
        v56 = v17 + 4;
        v57 = 1;
        v58 = v16;
        v59 = v47;
        v143 = v9;
        v144 = (uint64_t **)(v9 + 200);
LABEL_73:
        v60 = v52;
        if (v52 == v50)
        {
          if (*v56 != 2)
          {
            *v55 = v49;
            v55[1] = 2;
            v55 += 2;
          }
          goto LABEL_69;
        }
        v52 = v53;
        v61 = *(_QWORD *)v59;
        if (*(_QWORD *)v59)
        {
          *(_QWORD *)v59 = *(_QWORD *)v61;
          *(_QWORD *)v61 = 0;
        }
        else if (!v57)
        {
          goto LABEL_247;
        }
        v150 = v56;
        v148 = v53;
        v62 = 0;
        v55[1] = 2;
        v158 = v55 + 1;
        v141 = v49;
        *v55 = v49;
        v55 += 2;
        v145 = v59;
LABEL_78:
        v151 = v60;
        v63 = *v46;
        if (!*v46)
        {
          v57 = 0;
          v66 = 4096;
          goto LABEL_173;
        }
        v64 = 0;
        v57 = 0;
        v65 = 4096;
        v66 = 4096;
        v147 = v61;
LABEL_80:
        v67 = *((unsigned __int8 *)v63 + 47);
        if (v67 == 1)
        {
          v68 = *((_DWORD *)v63 + 8);
          if (v68 < 0)
            v68 = -v68;
          if (v68 >= 0x1000)
            v69 = 4096;
          else
            v69 = v68;
        }
        else
        {
          v69 = 4096;
        }
        v70 = *((unsigned __int8 *)v63 + 46);
        v71 = *((_DWORD *)v63 + 10);
        if (v70 == 1)
        {
          v64 = (v71 + 15) >> 12;
          goto LABEL_115;
        }
        if (v70 != 2)
        {
          v69 = v65;
          goto LABEL_115;
        }
        v72 = (v71 + 4080) >> 12;
        if ((int)v65 >= (int)v69)
          LODWORD(v65) = v69;
        v69 = (v72 - v64);
        v73 = v69 * v65;
        if ((int)v69 * (int)v65 >= v66)
          v73 = v66;
        if ((int)v69 > 0 && (int)v65 < 4096)
          v66 = v73;
        if ((v40 & 4) != 0)
        {
          if (v72 <= v43 || v64 >= v44)
            goto LABEL_115;
          if (v72 >= v44)
            v72 = v44;
          if (v64 <= v43)
            v64 = v43;
        }
        if (v64 >= v72)
          goto LABEL_115;
        v64 = v64 - v43 + v153;
        v75 = v72 - v43 + v153;
        if (v62 && (v76 = *v62, *v62 >= v64))
        {
          if (v62 == v158 + 2 || (v80 = v158, *(v62 - 2) < v64))
          {
            v81 = v62 - 1;
            v69 = *(v62 - 1);
            if ((int)v69 <= v64 || (*v81 = v64, (int)v69 <= v75))
            {
              if (v76 < v75)
                *v62 = v75;
              goto LABEL_115;
            }
            *v62 = v75;
            v64 = v69;
            v75 = v76;
          }
          else
          {
            do
            {
              v83 = v80[2];
              v80 += 2;
              v82 = v83;
            }
            while (v83 < v64);
            v84 = *(v80 - 1);
            v81 = v80 - 1;
            v69 = v84;
            if (v75 <= v82 && (int)v69 <= v64)
              goto LABEL_115;
          }
          v77 = ((unint64_t)((char *)v81 - (char *)v158) >> 2) - 1;
        }
        else
        {
          v77 = -1;
        }
        if ((((char *)v55 - v17) >> 2) + 5 > (int)v58)
        {
          v149 = v75;
          LODWORD(v156) = v66;
          v155 = v58;
          v78 = (8 * (int)v58 + 511) & 0xFFFFFFFFFFFFFE00;
          if (v17 == *v146)
          {
            v86 = (char *)malloc_type_realloc(0, v78, 0x7492344AuLL);
            v79 = v17;
            if (!v86)
            {
LABEL_249:
              if (v79 != *v146)
                malloc_type_realloc(v79, 0, 0x7492344AuLL);
              goto LABEL_251;
            }
            v17 = v86;
            memmove(v86, v79, 4 * (int)v58);
          }
          else
          {
            v79 = v17;
            v17 = (char *)malloc_type_realloc(v17, v78, 0x7492344AuLL);
            if (!v17)
              goto LABEL_249;
          }
          v58 = (2 * v155);
          v87 = v158;
          v88 = v150;
          v89 = (char *)v150 + v17 - v79;
          if (!v150)
            v89 = 0;
          if (v17 != v79)
          {
            v55 = (int *)((char *)v55 + v17 - v79);
            v88 = v89;
          }
          v150 = v88;
          if (v17 != v79)
            v87 = (_DWORD *)((char *)v158 + v17 - v79);
          v158 = v87;
          if (v17 == v79)
            v17 = v79;
          v43 = v152;
          v44 = v157;
          v61 = v147;
          v66 = (int)v156;
          v75 = v149;
        }
        if ((v77 & 0x80000000) != 0)
        {
          v55[1] = v75;
          v62 = v55 + 1;
          *v55 = v64;
          v55 += 2;
          v40 = v154;
          goto LABEL_115;
        }
        v90 = ((unint64_t)((char *)v55 - (char *)v158) >> 2) + ~v77;
        v55 = &v158[v77 + 1];
        v91 = (unsigned int *)&v55[v90];
        if (v90 < 1)
        {
          v40 = v154;
        }
        else
        {
          v40 = v154;
          do
          {
            if (v55[1] >= v64)
              break;
            v55 += 2;
          }
          while (v55 < (int *)v91);
        }
        v92 = 0;
        v93 = (unint64_t)((char *)v91 - (char *)v55) >> 2;
        v95 = *v55;
        v94 = v55[1];
        v96 = (_DWORD)v93 != 0;
        v97 = 2;
        v98 = 1;
        v99 = v64;
        v100 = (unsigned int *)v55;
        while (1)
        {
          if (v96)
          {
            if (v98 && (int)v95 > v99)
            {
              v101 = v95;
              v102 = v92;
LABEL_154:
              if (!(_DWORD)v93 || v99 <= (int)v95)
              {
                v102 = v102 ^ 2;
                *v55 = v99;
                --v97;
                v99 = v75;
              }
              goto LABEL_162;
            }
            v103 = v100[2];
            LODWORD(v93) = v93 - 1;
            *v55 = v95;
            if (!v98 && v55 == (int *)v100 && (v93 & 1) == 0)
            {
              v55 += (int)v93 + 1;
LABEL_171:
              v62 = v55 - 1;
LABEL_115:
              v57 |= v67;
              v63 = (uint64_t *)*v63;
              v65 = v69;
              if (!v63)
              {
LABEL_173:
                v156 = v62;
                if (v61)
                {
                  v106 = v151;
                  v107 = v144;
                  v59 = v145;
                  if (v151 <= v148)
                  {
                    v155 = v58;
                    v111 = v17;
                    v112 = *(_DWORD *)(v61 + 20);
                    v109 = v143;
                    goto LABEL_185;
                  }
                  v108 = v151 - v66;
                  v106 = *(_DWORD *)(v61 + 20);
                  v109 = v143;
                  if (v151 - v66 <= v106)
                  {
                    v155 = v58;
                    v111 = v17;
                    v112 = v106;
                    if (v106 != v148)
                    {
                      v113 = v142;
                      goto LABEL_186;
                    }
                    v113 = v142;
                    if (!v57)
                    {
LABEL_186:
                      v114 = v140;
                      while (1)
                      {
                        v115 = *(_DWORD *)(v61 + 16);
                        if ((v115 - 2) >= 2)
                        {
                          if (v115 == 1)
                          {
                            v116 = v61;
                            aa_ael_remove((char *)v109, v114, v113, v112, *(uint64_t **)(v61 + 8));
                            v62 = v156;
                            v44 = v157;
                            v117 = *(_QWORD *)(v116 + 8);
                            *(_QWORD *)(v117 + 72) = *(_QWORD *)(v109 + 216);
                            *(_QWORD *)(v117 + 48) = v117 + 72;
                            *(_QWORD *)(v109 + 216) = v117 + 48;
                          }
                          else
                          {
                            if (v115)
                              abort();
                            aa_ael_insert((char *)v109, v114, v113, v112, *(uint64_t ***)(v61 + 8));
                            v44 = v157;
                            v62 = v156;
                          }
                        }
                        v61 = *(_QWORD *)v59;
                        if (!*(_QWORD *)v59)
                          break;
                        *(_QWORD *)v59 = *(_QWORD *)v61;
                        *(_QWORD *)v61 = 0;
                        if (*(_DWORD *)(v61 + 20) != v112)
                          goto LABEL_194;
                      }
                      v110 = -1;
                      goto LABEL_199;
                    }
                    v110 = 0;
                    v108 = v148;
                    v17 = v111;
                  }
                  else
                  {
                    if (v57)
                    {
                      v110 = 0;
                      goto LABEL_203;
                    }
                    v155 = v58;
                    v111 = v17;
                    v112 = v106;
                    v106 = v151 - v66;
LABEL_185:
                    v113 = v142;
                    if (v112 == v106)
                      goto LABEL_186;
LABEL_194:
                    v110 = 0;
LABEL_199:
                    v17 = v111;
                    if (v106 == v148)
                    {
                      v118 = v111;
                      v119 = v61;
                      v120 = *v107;
                      v108 = v148;
                      v58 = v155;
                      v40 = v154;
                      goto LABEL_230;
                    }
                    v110 = 1;
                    v108 = v106;
                  }
                  v58 = v155;
                  v40 = v154;
LABEL_203:
                  v46 = v107;
LABEL_204:
                  v121 = *v46;
                  if (*v46)
                  {
                    v122 = 0;
                    v120 = *v46;
                    do
                    {
                      v123 = v121;
                      if (*((_BYTE *)v121 + 47) == 1)
                      {
                        v124 = *((int *)v121 + 9);
                        v125 = *((_DWORD *)v121 + 4)
                             + ((unint64_t)((v108 - (uint64_t)*((int *)v121 + 6)) * v124) >> 12);
                        *((_DWORD *)v121 + 10) = v125;
                      }
                      else
                      {
                        LODWORD(v124) = 0;
                        v125 = *((_DWORD *)v121 + 10);
                      }
                      v121 = (uint64_t *)*v121;
                      v126 = v123[1];
                      if (v126)
                      {
                        v127 = *v123;
                        v128 = v123[1];
                        do
                        {
                          v129 = *(_DWORD *)(v128 + 40);
                          if (v125 > v129 || v125 == v129 && (int)v124 <= *(_DWORD *)(v128 + 36))
                            break;
                          v123[1] = *(_QWORD *)(v128 + 8);
                          v130 = *(uint64_t ***)(v128 + 8);
                          if (v130)
                          {
                            *v130 = v123;
                            v127 = *v123;
                          }
                          *(_QWORD *)v128 = v127;
                          if (v127)
                            *(_QWORD *)(v127 + 8) = v128;
                          *(_QWORD *)(v128 + 8) = v123;
                          *v123 = v128;
                          if (v120 == (uint64_t *)v128)
                            v120 = v123;
                          v127 = v128;
                          v128 = v123[1];
                        }
                        while (v128);
                      }
                      else
                      {
                        v128 = 0;
                      }
                      if (v128 != v126)
                        ++v122;
                    }
                    while (v121);
                  }
                  else
                  {
                    v120 = 0;
                    v122 = 0;
                  }
                  *v46 = v120;
                  if (((v122 == 0) & ~v110) != 0)
                  {
                    v110 = 0;
                  }
                  else
                  {
                    v107 = v46;
                    v118 = v17;
                    v119 = v61;
LABEL_230:
                    aa_ael_mark(*(unsigned int *)(v109 + 176), v120);
                    v44 = v157;
                    v61 = v119;
                    v17 = v118;
                    v62 = v156;
                    v46 = v107;
                  }
                  v60 = v108;
                  v43 = v152;
                  if (v110 < 0)
                  {
                    v57 = 1;
                    v52 = v148;
                    goto LABEL_238;
                  }
                  goto LABEL_78;
                }
                v52 = v148;
                v46 = v144;
                v59 = v145;
                if (v151 > v148)
                {
                  if (v148 <= v151 - v66)
                    v108 = v151 - v66;
                  else
                    v108 = v148;
                  v109 = v143;
                  if (v57)
                  {
                    v61 = 0;
                    v110 = 0;
                    goto LABEL_204;
                  }
                  v57 = 1;
                  v52 = v148;
                }
                v43 = v152;
LABEL_238:
                v131 = v158;
                v132 = ((unint64_t)((char *)v55 - (char *)v158) >> 2) + 1;
                *v158 = v132;
                v49 = v141;
                v50 = v142;
                v56 = v150;
                if (v150)
                {
                  if (v132 == *v150)
                  {
                    if (v132 != 2)
                    {
                      v133 = v150 + 1;
                      v134 = v158 + 1;
                      while (v134 != v55)
                      {
                        v136 = *v134++;
                        v135 = v136;
                        v137 = *v133++;
                        if (v135 != v137)
                          goto LABEL_246;
                      }
                    }
                    v55 = v158 - 1;
                  }
                  else
                  {
LABEL_246:
                    v56 = v158;
                  }
                }
                else
                {
                  v56 = v131;
                }
LABEL_247:
                v53 = v52 - 4096;
                ++v49;
                v59 -= 8;
                if (v52 < v50)
                {
LABEL_69:
                  *v55 = 0x7FFFFFFF;
                  *v146 = v17;
                  if (v139)
                    free(v139);
                  return ((_DWORD)v55 - (_DWORD)v17 + 4);
                }
                goto LABEL_73;
              }
              goto LABEL_80;
            }
            v102 = v92 ^ 1;
            ++v100;
            v101 = v94;
            v94 = v103;
            if (v98)
              goto LABEL_154;
          }
          else
          {
            LODWORD(v93) = 0;
            v102 = v92;
            v101 = v95;
            if (v98)
              goto LABEL_154;
          }
          v97 = 0;
LABEL_162:
          if ((_DWORD)v92)
            v104 = (_DWORD)v102 == 0;
          else
            v104 = 1;
          v105 = v104;
          v55 += v105;
          v96 = (_DWORD)v93 != 0;
          v98 = v97 != 0;
          v95 = v101;
          v92 = v102;
          if (!(v93 | v97))
            goto LABEL_171;
        }
      }
    }
  }
  return result;
}

uint64_t aa_render(uint64_t result, unsigned int a2, char *a3, unint64_t a4, int a5, int a6, int a7, int a8, __n128 a9)
{
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v15;
  char *v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  char *v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int **v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  char *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  int v51;
  size_t v52;
  uint64_t v53;
  int32x4_t *v54;
  uint16x8_t *v55;
  int32x4_t *v56;
  uint16x8_t v57;
  int32x4_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t *v61;
  uint64_t v62;
  int *v63;
  int *v64;
  int *v65;
  int *v66;
  int *v67;
  int v68;
  int *v69;
  int *v70;
  int v71;
  int **v72;
  int *v73;
  uint64_t v74;
  int *v75;
  int v76;
  int v77;
  int v78;
  int32x4_t v79;
  int v80;
  unsigned int v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  int32x4_t *v90;
  unsigned int v91;
  signed int v92;
  int v93;
  int v94;
  unint64_t v95;
  int v96;
  int v97;
  int v98;
  unint64_t v99;
  int v100;
  signed int v101;
  int v102;
  int32x4_t *v103;
  unsigned int v104;
  unsigned int v105;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  uint64_t *v115;
  int v116;
  int v117;
  char *v118;
  char *v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int32x4_t *v125;
  unsigned int v126;
  int v127;
  uint64_t v128;
  unsigned int v129;
  uint16x8_t *v130;
  int8x16_t v131;
  int8x16_t v132;
  unsigned int v133;
  char v134;
  __int8 v135;
  __int8 v136;
  __int8 v137;
  unsigned int v138;
  char v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  unsigned int v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  signed int v155;
  size_t v156;
  int v157;
  uint64_t v158;
  BOOL v159;
  uint64_t v160;
  int v161;
  char *v162;
  unint64_t v163;
  unint64_t v164;
  size_t v165;
  char *v166;
  int v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  char *v174;
  uint64_t v175;
  char *v176;
  int v177;
  char *v178;
  unint64_t v179;
  char *v180;
  uint64_t v181;
  int32x4_t *v182;
  void *v183;
  uint16x8_t *v184;
  uint64_t v185;
  int v186;
  int v187;
  uint64_t v188;
  int v189;
  int v190;
  char *v191;
  unsigned int v192;
  uint16x8_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  signed int v197;
  uint64_t v198;
  int **v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  size_t v204;
  unint64_t v205;
  uint64_t v206;

  v206 = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)a4)
    return 0;
  v9 = result;
  v11 = *(_DWORD *)result;
  v10 = *(_DWORD *)(result + 4);
  v13 = *(_DWORD *)(result + 8);
  v12 = *(_DWORD *)(result + 12);
  if (v13 - *(_DWORD *)result < 31 || v12 - v10 < 31)
    return 0;
  v15 = *(_DWORD *)(result + 184);
  if (24 * v15 + 44 < 1)
    return 0;
  v16 = a3;
  v17 = a2;
  v18 = v11 >> 12;
  v19 = (v13 + 4095) >> 12;
  v20 = v10 >> 12;
  v21 = (v12 + 4095) >> 12;
  if ((a2 & 4) != 0)
  {
    result = 0;
    if (a7 <= a5)
      return result;
    v22 = a8 - a6 - 1;
    if (a8 - a6 < 1)
      return result;
    result = 0;
    v23 = v20 - a6;
    if (v20 >= a6)
      v24 = -(uint64_t)(v23 * (int)a4);
    else
      v24 = 0;
    if (v20 < a6)
      v20 = a6;
    v25 = v18 - a5;
    if (v18 < a5)
      v26 = a5;
    else
      v26 = v18;
    v27 = v21 - a8;
    if (v21 - a8 >= 1)
      v21 = a8;
    v28 = v19 - a7;
    v29 = v19 - a7 >= 1 ? a7 : v19;
    if (v21 <= v20)
      return result;
    v188 = v26;
    v187 = v29;
    if (v29 <= (int)v26)
      return result;
    v30 = &a3[(v25 & ~(v25 >> 31)) + v24];
    if (v23 >= 0)
      v31 = 3;
    else
      v31 = 4;
    if (v31 + (~v25 >> 31) - (v27 < 1) == v28 < 1)
      v17 = a2 & 0xFFFFFFFB;
    else
      v17 = a2;
    if ((v27 | v28) < 0 || v30 != a3)
    {
      v32 = a4;
      bzero(a3, (a8 - a6) * (int)a4);
      a4 = v32;
      v17 |= 0x40u;
      v15 = *(_DWORD *)(v9 + 184);
    }
    v16 = v30;
  }
  else
  {
    v22 = v21 + ~v20;
    v188 = (v11 >> 12);
    v187 = (v13 + 4095) >> 12;
  }
  v33 = (v22 * a4);
  v191 = &v16[(int)v33];
  v203 = a4;
  if (v15 == 2 && *(_WORD *)(v9 + 188) == 2)
  {
    v34 = *(_DWORD *)v9;
    if (*(_DWORD *)v9 <= (_DWORD)v188 << 12)
      v34 = (_DWORD)v188 << 12;
    if (*(_DWORD *)(v9 + 8) >= v187 << 12)
      v35 = v187 << 12;
    else
      v35 = *(_DWORD *)(v9 + 8);
    v36 = v35 - 1;
    v37 = (int **)(v34 >> 12);
    v38 = (v36 >> 12);
    if ((_DWORD)v37 == v36 >> 12)
    {
      v39 = 0;
      v40 = ((v36 - v34) >> 4);
      v41 = v40;
    }
    else
    {
      v41 = (v36 >> 4);
      v40 = ~(v34 >> 4);
      v39 = (int)v38 + ~(_DWORD)v37;
    }
    if (*(_DWORD *)(v9 + 4) <= v20 << 12)
      v140 = v20 << 12;
    else
      v140 = *(_DWORD *)(v9 + 4);
    if (*(_DWORD *)(v9 + 12) >= v21 << 12)
      v141 = v21 << 12;
    else
      v141 = *(_DWORD *)(v9 + 12);
    v142 = v141 - 1;
    v143 = v140 >> 12;
    v144 = v142 >> 12;
    if (v140 >> 12 == v142 >> 12)
    {
      v145 = 0;
      v146 = 0;
      v142 -= v140;
      v147 = v140 >> 12;
    }
    else
    {
      v147 = v143 + 1;
      v145 = ~(v140 >> 4);
      v146 = v144 - (v143 + 1);
    }
    v148 = (v142 >> 4);
    if (v145 <= 0xFE)
    {
      v149 = v145;
    }
    else
    {
      v147 = v140 >> 12;
      v149 = 0;
    }
    if (v145 <= 0xFE)
      v150 = v146;
    else
      v150 = v146 + 1;
    if (v148 == 255)
      v151 = 0;
    else
      v151 = v148;
    if (v148 == 255)
      v152 = v150 + 1;
    else
      v152 = v150;
    v153 = (int)v37;
    v154 = (int)v188;
    v155 = v147 - v20;
    v204 = v39;
    v205 = (int)v37 - (uint64_t)(int)v188;
    LODWORD(v200) = v144;
    v199 = v37;
    v201 = v151;
    if ((v17 & 0x40) == 0 && v143 == v20 && v152 * v39 >= 0x21 && (_DWORD)v37 == (_DWORD)v188 && v144 == v21 - 1)
    {
      v156 = v39;
      if ((_DWORD)v38 == v187 - 1)
      {
        v157 = a4;
        v198 = v33;
        v158 = v38;
        v197 = v147 - v20;
        memset(&v191[(int)a4 - (int)a4 * (v152 + v155)], 255, v152 * (int)a4);
        v154 = (int)v188;
        v155 = v197;
        v38 = v158;
        v33 = v198;
        v39 = v204;
        LODWORD(a4) = v157;
        v156 = 0;
        v159 = v41 == 255 && v40 == 255;
        if (v159)
          v152 = 0;
      }
    }
    else
    {
      v156 = v39;
    }
    v160 = (int)v38;
    v202 = (int)v38 - v154;
    if (!v149)
    {
LABEL_256:
      if (v152)
      {
        v168 = v203;
        v169 = v155 * (int)v203;
        if (v156)
        {
          if (v156 >= 0x20)
          {
            v175 = -(uint64_t)(int)v203;
            v176 = &v16[(int)v33 - (uint64_t)(int)v188 - v169];
            do
            {
              memset(&v176[v153 + 1], 255, v156);
              v176[v153] = v40;
              v176[v160] = v41;
              v176 += v175;
              --v152;
            }
            while (v152);
          }
          else
          {
            v170 = 0;
            v171 = (int)v203;
            v172 = &v16[(int)v33 + (uint64_t)(int)v38 - (int)v188 - v169];
            v173 = &v16[(int)v33 + (uint64_t)(int)v199 - (int)v188 - v169];
            do
            {
              memset(&v173[v170 + 1], 255, v156);
              v173[v170] = v40;
              v172[v170] = v41;
              v170 -= v171;
              --v152;
            }
            while (v152);
          }
        }
        else
        {
          v174 = &v16[(int)v33 - (uint64_t)(int)v188 - v169];
          do
          {
            v174[v153] = v40;
            v174[v160] = v41;
            v174 -= v168;
            --v152;
          }
          while (v152);
        }
      }
      if (!(_DWORD)v201)
        return 0xFFFFFFFFLL;
      v177 = ((_DWORD)v200 - v20) * v203;
      v178 = &v191[-v177];
      v179 = ((v41 * (unint64_t)v201) >> 8)
           + v41 * (unint64_t)v201
           + 1;
      if (v204 < 0x21)
      {
        if (!v204)
        {
LABEL_273:
          v178[v205] = (unsigned __int16)(((v40 * v201) >> 8) + v40 * v201 + 1) >> 8;
          v178[v202] = BYTE1(v179);
          return 0xFFFFFFFFLL;
        }
        v180 = &v191[-v177 - (uint64_t)(int)v188 + 1 + (int)v199];
      }
      else
      {
        v180 = &v178[(int)v205 + 1];
      }
      memset(v180, v201, v204);
      goto LABEL_273;
    }
    v161 = (v143 - v20) * a4;
    v162 = &v191[-v161];
    v163 = ((v149 * (unint64_t)v40) >> 8)
         + v149 * (unint64_t)v40
         + 1;
    v164 = ((v149 * (unint64_t)v41) >> 8)
         + v149 * (unint64_t)v41
         + 1;
    if (v39 < 0x21)
    {
      if (!v39)
      {
LABEL_255:
        v162[v205] = BYTE1(v163);
        v162[v202] = BYTE1(v164);
        goto LABEL_256;
      }
      v194 = ((v149 * (unint64_t)v41) >> 8)
           + v149 * (unint64_t)v41
           + 1;
      v195 = ((v149 * (unint64_t)v40) >> 8)
           + v149 * (unint64_t)v40
           + 1;
      v166 = &v191[-v161 - (uint64_t)(int)v188 + 1 + (int)v199];
      v167 = v149;
      v165 = v204;
      v198 = v33;
      v196 = v38;
      v197 = v155;
    }
    else
    {
      v165 = v204;
      v166 = &v162[(int)v205 + 1];
      v167 = v149;
      v198 = v33;
      v195 = ((v149 * (unint64_t)v40) >> 8)
           + v149 * (unint64_t)v40
           + 1;
      v196 = v38;
      v197 = v155;
      v194 = ((v149 * (unint64_t)v41) >> 8)
           + v149 * (unint64_t)v41
           + 1;
    }
    memset(v166, v167, v165);
    BYTE1(v164) = BYTE1(v194);
    BYTE1(v163) = BYTE1(v195);
    v155 = v197;
    LODWORD(v38) = v196;
    LODWORD(v33) = v198;
    goto LABEL_255;
  }
  v42 = (v20 << 12);
  v43 = (v21 << 12);
  if (v21 - v20 > 1015)
  {
    v44 = 8 * (v21 - v20 + 16);
    v46 = (char *)malloc_type_malloc(v44, 0x705560E0uLL);
    v183 = v46;
  }
  else
  {
    v44 = 8 * (v21 - v20 + 16);
    MEMORY[0x1E0C80A78](result, a9);
    v46 = (char *)&v181 - v45;
    bzero((char *)&v181 - v45, v44);
    v183 = 0;
  }
  bzero(v46, v44);
  v47 = (uint64_t *)(v46 + 32);
  v48 = (uint64_t)&v47[-v20];
  *(_DWORD *)(v9 + 176) = ((v17 << 21) & 0x400000 | ((v17 & 1) << 25) | *(_DWORD *)(v9 + 176) & 0xFC0FFFFF) ^ 0x600000;
  if ((v17 & 4) != 0)
  {
    v49 = aa_distribute_clip_edges(v9, v48, (v20 << 12), v43);
    if ((_DWORD)v49)
      goto LABEL_50;
  }
  else
  {
    v49 = aa_distribute_edges(v9, v48);
    if ((_DWORD)v49)
    {
LABEL_50:
      v51 = v19 - v18;
      if (v19 - v18 > 1015)
      {
        v52 = 4 * (v51 + 16);
        v54 = (int32x4_t *)malloc_type_malloc(v52, 0x705560E0uLL);
        v182 = v54;
      }
      else
      {
        v52 = 4 * (v19 - v18 + 16);
        MEMORY[0x1E0C80A78](v49, v50);
        v54 = (int32x4_t *)((char *)&v181 - v53);
        bzero((char *)&v181 - v53, v52);
        v182 = 0;
      }
      bzero(v54, v52);
      *(_QWORD *)(v9 + 200) = 0;
      v55 = (uint16x8_t *)&aa_mono_levels;
      if ((v17 & 0x20) == 0)
        v55 = (uint16x8_t *)&aa_gray_levels;
      v184 = v55;
      v199 = (int **)(v9 + 200);
      *(_QWORD *)(v9 + 208) = 0;
      if ((int)v42 >= (int)v43)
      {
LABEL_210:
        if (v182)
          free(v182);
        if (v183)
          free(v183);
        return 0xFFFFFFFFLL;
      }
      v56 = v54;
      LODWORD(v195) = 0;
      LODWORD(v194) = 0;
      LODWORD(v202) = (_DWORD)v188 << 12;
      LODWORD(v201) = v187 << 12;
      v204 = (size_t)v54[1].u64 + (-((_DWORD)v54 - 4 * v18 + 16 + 4 * (_DWORD)v188) & 0x1FLL) + -4 * v18;
      v205 = (unint64_t)&v54[3].u64[1] + 4 * v51 + 4;
      v189 = ((v17 >> 6) & 1) - 1;
      v57 = *v184;
      v186 = v187 + 3;
      v185 = -(uint64_t)(int)v203;
      v58 = 0uLL;
      v203 = (unint64_t)v54;
      v193 = v57;
      while (1)
      {
        v59 = *v47;
        if (*v47)
        {
          *v47 = *(_QWORD *)v59;
          *(_QWORD *)v59 = 0;
        }
        v200 = v47;
        LODWORD(v196) = 0;
        v60 = v42 + 4096;
        v190 = v42 + 4096;
        if ((int)v42 + 4096 >= (int)v43)
          v60 = v43;
        v192 = v60;
        if (!v59)
        {
LABEL_102:
          v74 = v192;
          if (v192 == (_DWORD)v42)
            goto LABEL_187;
          goto LABEL_103;
        }
        while (1)
        {
          v74 = *(unsigned int *)(v59 + 20);
          if ((_DWORD)v42 == (_DWORD)v74)
          {
            v74 = v42;
            v61 = v200;
            do
            {
LABEL_69:
              switch(*(_DWORD *)(v59 + 16))
              {
                case 0:
                  aa_ael_insert((char *)v9, v48, v74, v43, *(uint64_t ***)(v59 + 8));
                  break;
                case 1:
                  aa_ael_remove((char *)v9, v48, v74, v43, *(uint64_t **)(v59 + 8));
                  v62 = *(_QWORD *)(v59 + 8);
                  *(_QWORD *)(v62 + 72) = *(_QWORD *)(v9 + 216);
                  *(_QWORD *)(v62 + 48) = v62 + 72;
                  *(_QWORD *)(v9 + 216) = v62 + 48;
                  break;
                case 2:
                  break;
                case 3:
                  v63 = *v199;
                  if (*v199)
                  {
                    v64 = *v199;
                    do
                    {
                      v65 = v63;
                      v67 = v63;
                      v63 = *(int **)v63;
                      v66 = (int *)*((_QWORD *)v67 + 1);
                      if (v66)
                      {
                        v68 = v65[10];
                        v69 = v63;
                        v70 = v66;
                        do
                        {
                          v71 = v70[10];
                          if (v68 > v71 || v68 == v71 && v65[9] >= v70[9])
                            break;
                          *((_QWORD *)v65 + 1) = *((_QWORD *)v70 + 1);
                          v72 = (int **)*((_QWORD *)v70 + 1);
                          if (v72)
                          {
                            *v72 = v65;
                            v69 = *(int **)v65;
                          }
                          *(_QWORD *)v70 = v69;
                          if (v69)
                            *((_QWORD *)v69 + 1) = v70;
                          *((_QWORD *)v70 + 1) = v65;
                          *(_QWORD *)v65 = v70;
                          if (v64 == v70)
                            v64 = v65;
                          v69 = v70;
                          v70 = (int *)*((_QWORD *)v65 + 1);
                        }
                        while (v70);
                        if (v66 != v70 && (*(_BYTE *)(v9 + 178) & 0xC0) != 0)
                        {
                          v73 = v63;
                          do
                          {
                            if (v73)
                              aa_intersection_event((char *)v9, v48, v66, v73, v74, v43);
                            v73 = v70;
                            v159 = v66 == v65;
                            v66 = v65;
                          }
                          while (!v159);
                        }
                      }
                    }
                    while (v63);
                  }
                  else
                  {
                    v64 = 0;
                  }
                  *(_QWORD *)(v9 + 200) = v64;
                  *(_QWORD *)v59 = *(_QWORD *)(v9 + 216);
                  *(_QWORD *)(v9 + 216) = v59;
                  v61 = v200;
                  v56 = (int32x4_t *)v203;
                  break;
                default:
                  abort();
              }
              v59 = *v61;
              if (!*v61)
                break;
              *v61 = *(_QWORD *)v59;
              *(_QWORD *)v59 = 0;
            }
            while (*(_DWORD *)(v59 + 20) == (_DWORD)v74);
            goto LABEL_99;
          }
LABEL_103:
          v75 = *v199;
          v76 = v202;
          v77 = v201;
          if (*v199)
          {
            v78 = -2 * v42;
            v197 = ((_DWORD)v74 - (_DWORD)v42) << 16;
            LODWORD(v198) = 16 * (v74 - v42);
            v79 = vdupq_n_s32(v197);
            v76 = v202;
            v80 = v202;
            v77 = v201;
            do
            {
              v81 = *((unsigned __int8 *)v75 + 46);
              v82 = v75[4];
              if (*((_BYTE *)v75 + 47))
              {
                v83 = v75[6];
                v84 = v75[10];
                v85 = v75[8];
                v86 = v82 + ((unint64_t)(v75[9] * (uint64_t)((int)v74 - v83)) >> 12);
                v75[10] = v86;
                if (v81)
                {
                  v87 = v81 - 1;
                  v88 = 1 - v81;
                  v89 = v85;
                  v90 = (int32x4_t *)(v204 + 4 * (v84 >> 12));
                  v91 = v81 - 2;
                  v92 = v84 & 0xFFFFF000;
                  if ((int)v85 < 1)
                  {
                    v94 = v86 & v91 | v84 & v88;
                    if (v92 <= v86)
                    {
                      v92 = v84;
                      v96 = v42;
                    }
                    else
                    {
                      v99 = (unint64_t)((int)v85 * (uint64_t)(v92 - v82)) >> 12;
                      v96 = v83 + v99;
                      if (v90 >= v56 && (unint64_t)v90 <= v205)
                      {
                        v90->i32[0] += (v88 ^ (8 * (v92 - v84) * (v96 - v42))) + v87;
                        v90 = (int32x4_t *)((char *)v90 - 4);
                      }
                      if (v92 - 4096 > v86)
                      {
                        v100 = (v78 + 2 * v83 + 2 * (_DWORD)v99 - (_DWORD)v85) << 15;
                        do
                        {
                          v101 = v92;
                          if (v90 >= v56 && (unint64_t)v90 <= v205)
                          {
                            v90->i32[0] += v88 - (v100 ^ v88);
                            v90 = (int32x4_t *)((char *)v90 - 4);
                          }
                          v96 -= v89;
                          v92 -= 4096;
                          v100 -= v89 << 16;
                        }
                        while (v101 - 0x2000 > v86);
                      }
                    }
                    goto LABEL_136;
                  }
                  v93 = v92 + 4096;
                  v94 = v86 & v88 | v84 & v91;
                  if (v92 + 4096 >= v86)
                  {
                    v92 = v84;
                    v96 = v42;
                  }
                  else
                  {
                    v95 = (unint64_t)((v93 - v82) * v85) >> 12;
                    v96 = v83 + v95;
                    if ((unint64_t)v90 >= v203 && (unint64_t)v90 <= v205)
                    {
                      v90->i32[0] += (v88 ^ (8 * (v93 - v84) * (v96 - v42))) + v87;
                      v90 = (int32x4_t *)((char *)v90 + 4);
                    }
                    if (v92 + 0x2000 < v86)
                    {
                      v97 = (v78 + (_DWORD)v85 + 2 * v83 + 2 * (_DWORD)v95) << 15;
                      v56 = (int32x4_t *)v203;
                      do
                      {
                        v98 = v93;
                        if (v90 >= v56 && (unint64_t)v90 <= v205)
                        {
                          v90->i32[0] += (v97 ^ v88) + v87;
                          v90 = (int32x4_t *)((char *)v90 + 4);
                        }
                        v96 += v85;
                        v93 += 4096;
                        v97 += (_DWORD)v85 << 16;
                      }
                      while (v98 + 0x2000 < v86);
                      v92 = v98 + 4096;
                      goto LABEL_136;
                    }
                    v92 += 4096;
                  }
                  v56 = (int32x4_t *)v203;
LABEL_136:
                  if (v90 >= v56 && (unint64_t)v90 <= v205)
                    v90->i32[0] += (v88 ^ (8 * (v86 - v92) * (v74 - 2 * v42 + v96))) + v87;
LABEL_139:
                  if (v81 < 2)
                  {
                    if (v76 >= v94)
                      v76 = v94;
                    if (v86 <= (int)v202)
                      v80 = v202;
                    else
                      v80 = v86;
                  }
                  else
                  {
                    if (v77 <= v94)
                      v77 = v94;
                    if (v86 >= (int)v201)
                      v102 = v201;
                    else
                      v102 = v86;
                    if (v86 > v80)
                    {
                      v103 = (int32x4_t *)(v204 + 4 * (v80 >> 12));
                      v104 = ~(v80 >> 12) + (v102 >> 12);
                      if ((v104 & 0x80000000) != 0)
                      {
                        v105 = v80;
                      }
                      else
                      {
                        if (v103 >= v56 && (unint64_t)v103 <= v205)
                        {
                          v103->i32[0] += ((_DWORD)v74
                                         - (_DWORD)v42
                                         - (((v80 & 0xFFFu) * ((_DWORD)v74 - (_DWORD)v42)) >> 12)) << 16;
                          v103 = (int32x4_t *)((char *)v103 + 4);
                        }
                        if (v104 >= 4)
                        {
                          do
                          {
                            v104 -= 4;
                            *v103 = vaddq_s32(*v103, v79);
                            ++v103;
                          }
                          while (v104 > 3);
                        }
                        if (v104 >= 2)
                        {
                          *(int32x2_t *)v103->i8 = vadd_s32(*(int32x2_t *)v103->i8, *(int32x2_t *)v79.i8);
                          v103 = (int32x4_t *)((char *)v103 + 8);
                          v104 -= 2;
                        }
                        v105 = v102 & 0xFFFFF000;
                        if (v104)
                        {
                          v103->i32[0] += v197;
                          v103 = (int32x4_t *)((char *)v103 + 4);
                        }
                      }
                      if (v103 >= v56 && (unint64_t)v103 <= v205)
                        v103->i32[0] += v198 * (v102 - v105);
                    }
                  }
                }
              }
              else
              {
                v94 = v75[4];
                v86 = v94;
                if (*((_BYTE *)v75 + 46))
                  goto LABEL_139;
              }
              v75 = *(int **)v75;
            }
            while (v75);
          }
          v107 = v76 >> 12;
          v108 = (v77 + 4095) >> 12;
          v109 = v194;
          if (v76 >> 12 >= (int)v194)
            v110 = v194;
          else
            v110 = v76 >> 12;
          v111 = v195;
          if (v108 <= (int)v195)
            v112 = v195;
          else
            v112 = (v77 + 4095) >> 12;
          v113 = v196;
          if ((_DWORD)v196)
            v114 = v196;
          else
            v114 = 2;
          if ((_DWORD)v196)
          {
            v107 = v110;
            v108 = v112;
          }
          if (v76 <= v77)
            v113 = v114;
          LODWORD(v196) = v113;
          if (v76 <= v77)
            v109 = v107;
          LODWORD(v194) = v109;
          if (v76 <= v77)
            v111 = v108;
          LODWORD(v195) = v111;
          if (!v59)
            break;
          v61 = v200;
          if (*(_DWORD *)(v59 + 20) == (_DWORD)v74)
            goto LABEL_69;
LABEL_99:
          aa_ael_mark(*(unsigned int *)(v9 + 176), *(uint64_t **)(v9 + 200));
          v42 = v74;
          v57 = v193;
          v58 = 0uLL;
          if (!v59)
            goto LABEL_102;
        }
LABEL_187:
        v115 = v200;
        v116 = v188;
        v117 = v188;
        v118 = v191;
        v119 = v191;
        if ((_DWORD)v196)
        {
          v117 = v188;
          v119 = v191;
          if ((int)v195 >= (int)v188)
          {
            v117 = v188;
            v119 = v191;
            if ((int)v194 <= v187)
            {
              v120 = v194;
              if ((int)v194 <= (int)v188)
                v120 = v188;
              if ((int)v195 >= v187)
                v121 = v187;
              else
                v121 = v195;
              v122 = v120 - v188;
              v123 = v189 & ((v120 - (int)v188) >> 2);
              v119 = v191;
              v124 = v123 - 1;
              if (v123 >= 1)
              {
                bzero(v191, 4 * (v189 & (v122 >> 2)));
                v58 = 0uLL;
                v57 = v193;
                v119 = &v118[4 * v124 + 4];
              }
              v125 = (int32x4_t *)(v204 + 4 * (int)((v122 & 0xFFFFFFFC) + v116));
              v126 = (v121 - v116 + 3) & 0xFFFFFFFC;
              v127 = v126 - (v122 & 0xFFFFFFFC);
              if (v127 < 16)
              {
                v130 = v184;
              }
              else
              {
                v128 = 0;
                v129 = v127 + 16;
                v130 = v184;
                do
                {
                  v131 = (int8x16_t)vqmovun_high_s32(vqmovun_s32(vshrq_n_s32(*v125, 0x14uLL)), vshrq_n_s32(v125[1], 0x14uLL));
                  v132 = (int8x16_t)vqmovun_high_s32(vqmovun_s32(vshrq_n_s32(v125[2], 0x14uLL)), vshrq_n_s32(v125[3], 0x14uLL));
                  *(uint8x16_t *)&v119[v128] = vqmovn_high_u16(vqmovn_u16((uint16x8_t)vorrq_s8(v131, (int8x16_t)vcgtq_u16((uint16x8_t)v131, v57))), (uint16x8_t)vorrq_s8(v132, (int8x16_t)vcgtq_u16((uint16x8_t)v132, v57)));
                  v125[2] = v58;
                  v125[3] = v58;
                  *v125 = v58;
                  v125[1] = v58;
                  v125 += 4;
                  v129 -= 16;
                  v128 += 16;
                }
                while (v129 > 0x1F);
                v127 -= v128;
                v119 += v128;
              }
              if (v127 >= 4)
              {
                do
                {
                  v133 = v127;
                  v134 = v130[1].i8[(unint64_t)v125->u32[0] >> 20];
                  v135 = v130[1].i8[(unint64_t)v125->u32[1] >> 20];
                  v125->i64[0] = v58.i64[0];
                  *v119 = v134;
                  v119[1] = v135;
                  v136 = v130[1].i8[(unint64_t)v125->u32[2] >> 20];
                  v137 = v130[1].i8[(unint64_t)v125->u32[3] >> 20];
                  v125->i64[1] = v58.i64[0];
                  v119[2] = v136;
                  v119[3] = v137;
                  v127 = v133 - 4;
                  v119 += 4;
                  ++v125;
                }
                while (v133 > 7);
              }
              v117 = v126 + v116;
              if (v127 >= 1)
              {
                v138 = v127 + 1;
                do
                {
                  v139 = v130[1].i8[(unint64_t)v125->u32[0] >> 20];
                  v125->i32[0] = 0;
                  v125 = (int32x4_t *)((char *)v125 + 4);
                  *v119++ = v139;
                  --v138;
                }
                while (v138 > 1);
              }
            }
          }
        }
        if ((v189 & ((v186 - v117) >> 2)) >= 1)
        {
          bzero(v119, 4 * (v189 & ((v186 - v117) >> 2)));
          v58 = 0uLL;
          v57 = v193;
        }
        v191 = &v118[v185];
        v47 = v115 + 1;
        v42 = v190;
        if (v190 >= (int)v43)
          goto LABEL_210;
      }
    }
  }
  result = (uint64_t)v183;
  if (v183)
  {
    free(v183);
    return 0;
  }
  return result;
}

char *aa_ael_insert(char *result, uint64_t a2, int a3, int a4, uint64_t **a5)
{
  uint64_t **v5;
  char *v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t *v26;
  uint64_t *v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  int v31;
  int *v32;
  int *v33;
  BOOL v34;

  v5 = a5;
  v9 = result;
  v10 = (uint64_t *)*((_QWORD *)result + 25);
  if (!v10)
  {
    *a5 = 0;
    a5[1] = 0;
    *((_QWORD *)result + 25) = a5;
    goto LABEL_68;
  }
  v11 = (*((_DWORD *)result + 44) >> 20) & 3;
  v12 = v11 - 1;
  v13 = *((_QWORD *)result + 26);
  v15 = *((_DWORD *)a5 + 9);
  v14 = *((_DWORD *)a5 + 10);
  v16 = *((_DWORD *)v10 + 10) - v14;
  if (!v16)
  {
    v17 = *((_DWORD *)v10 + 9);
    if (v17 == v15)
      goto LABEL_48;
    if (v17 <= v15)
      v16 = 1 - v11;
    else
      v16 = v11 - 1;
  }
  if (v16 >= 1)
  {
    *a5 = v10;
    a5[1] = 0;
    *((_QWORD *)result + 25) = a5;
    v10[1] = (uint64_t)a5;
    goto LABEL_68;
  }
  if (!v16)
    goto LABEL_48;
  if (!v13 || (uint64_t *)v13 == v10)
  {
LABEL_32:
    v24 = 1 - v11;
    while (1)
    {
      v19 = v10;
      v10 = (uint64_t *)*v10;
      if (!v10)
        goto LABEL_43;
      v18 = *((_DWORD *)v10 + 10) - v14;
      if (!v18)
      {
        v25 = *((_DWORD *)v10 + 9);
        if (v25 == v15)
          goto LABEL_46;
        if (v25 <= v15)
          v18 = v24;
        else
          v18 = v12;
      }
      if ((v18 & 0x80000000) == 0)
        goto LABEL_42;
    }
  }
  v18 = *(_DWORD *)(v13 + 40) - v14;
  if (!v18)
  {
    v23 = *(_DWORD *)(v13 + 36);
    if (v23 == v15 || (v23 <= v15 ? (v18 = 1 - v11) : (v18 = v11 - 1), !v18))
    {
      v10 = (uint64_t *)*((_QWORD *)result + 26);
      goto LABEL_48;
    }
  }
  if (v18 < 0)
  {
    v10 = (uint64_t *)*((_QWORD *)result + 26);
    goto LABEL_32;
  }
  v19 = *(uint64_t **)(v13 + 8);
  if (v19 == v10)
  {
    v19 = (uint64_t *)*((_QWORD *)result + 25);
  }
  else if (v19)
  {
    v20 = 1 - v11;
    while (1)
    {
      v21 = *((_DWORD *)v19 + 10) - v14;
      if (!v21)
      {
        v22 = *((_DWORD *)v19 + 9);
        if (v22 == v15)
          break;
        if (v22 <= v15)
          v21 = v20;
        else
          v21 = v12;
      }
      if (v21 <= 0)
        break;
      v19 = (uint64_t *)v19[1];
      v18 = v21;
    }
  }
LABEL_42:
  v10 = (uint64_t *)*v19;
  if (v18)
  {
LABEL_43:
    *a5 = v10;
    a5[1] = v19;
    *v19 = (uint64_t)a5;
    if (*a5)
      (*a5)[1] = (uint64_t)a5;
    *((_QWORD *)result + 26) = a5;
    goto LABEL_68;
  }
LABEL_46:
  if (!v10)
    v10 = v19;
LABEL_48:
  if (*((_DWORD *)v10 + 22) == 2)
  {
    v26 = (uint64_t *)v10[10];
    v27 = (uint64_t *)v26[1];
    *a5 = v26;
    a5[1] = v27;
    if (v27)
    {
      *v27 = (uint64_t)a5;
      v28 = v10;
      v10 = *a5;
    }
    else
    {
      v28 = v10;
      v10 = v26;
    }
  }
  else
  {
    v28 = (_QWORD *)*((_QWORD *)result + 28);
    if (v28)
    {
      *((_QWORD *)result + 28) = *v28;
    }
    else
    {
      result = aa_new_edge((uint64_t)result);
      v28 = result;
      if (!result)
        return result;
    }
    result = (char *)memmove(v28, v10, 0x60uLL);
    v29 = (_QWORD *)v10[1];
    if (v29)
      *v29 = v28;
    if (*v10)
      *(_QWORD *)(*v10 + 8) = v28;
    if (v10 == *((uint64_t **)v9 + 25))
      *((_QWORD *)v9 + 25) = v28;
    *v10 = 0;
    v10[1] = 0;
    *((_DWORD *)v28 + 16) = 0;
    v28[6] = 0;
    v28[7] = v28;
    *((_DWORD *)v28 + 22) = 2;
    v28[9] = 0;
    v28[10] = v10;
    *((_DWORD *)v10 + 16) = 2;
    v10[7] = (uint64_t)v28;
    *v5 = v10;
    v5[1] = 0;
  }
  v10[1] = (uint64_t)v5;
  v28[10] = v5;
  *((_DWORD *)v5 + 16) = 2;
  v5[7] = v28;
  *((_WORD *)v28 + 22) += *((_WORD *)v5 + 22);
  v30 = *((_DWORD *)v5 + 7);
  if (*((_DWORD *)v28 + 7) >= v30)
  {
    v31 = *((_DWORD *)v5 + 6);
    if (*((_DWORD *)v28 + 6) <= v31)
    {
      *((_QWORD *)v9 + 26) = v28;
      return result;
    }
  }
  else
  {
    *((_DWORD *)v28 + 7) = v30;
    v31 = *((_DWORD *)v5 + 6);
    *((_DWORD *)v28 + 5) = *((_DWORD *)v5 + 5);
    if (*((_DWORD *)v28 + 6) <= v31)
      goto LABEL_67;
  }
  *((_DWORD *)v28 + 6) = v31;
  *((_DWORD *)v28 + 4) = *((_DWORD *)v5 + 4);
LABEL_67:
  *((_QWORD *)v9 + 26) = v28;
  v5 = (uint64_t **)v28;
LABEL_68:
  if ((v9[178] & 0xC0) != 0)
  {
    v33 = (int *)*v5;
    v32 = (int *)v5[1];
    do
    {
      if (v32)
        result = aa_intersection_event(v9, a2, v32, (int *)v5, a3, a4);
      v34 = v32 == v33;
      v32 = v33;
    }
    while (!v34);
  }
  return result;
}

char *aa_intersection_event(char *result, uint64_t a2, int *a3, int *a4, int a5, int a6)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  BOOL v28;
  double v29;
  int v30;
  int v31;
  char **v33;
  char *v34;
  char *v35;
  int v36;
  int v37;
  char *v38;

  v6 = a3[9];
  v7 = a4[9];
  if (v6 == v7)
    return result;
  v8 = 4;
  if (v6 >= 0)
    v9 = 4;
  else
    v9 = 5;
  v10 = a3[v9];
  if (v7 >= 0)
    v8 = 5;
  if (v10 >= a4[v8])
    return result;
  v11 = a3 + 5;
  v12 = a4 + 5;
  if (v7 >= 0)
    v12 = a4 + 4;
  if (v6 < 0)
    v11 = a3 + 4;
  if (*v12 >= *v11)
    return result;
  v14 = a3[6];
  v13 = a3[7];
  v15 = a4[6];
  if (v13 >= a4[7])
    v13 = a4[7];
  v16 = v14 <= v15 ? a4[6] : a3[6];
  if (v13 <= v16)
    return result;
  if (v13 >= a6)
    v13 = a6;
  if (v16 <= a5)
    v16 = a5;
  if (v13 <= v16)
    return result;
  v17 = (uint64_t)result;
  v18 = *((double *)result + 19);
  v19 = (double)a3[4];
  v20 = v18 * (double)v6;
  v21 = (double)a4[4];
  v22 = v18 * (double)v7;
  v23 = v19 + v20 * (double)(v16 - v14);
  v24 = v19 + v20 * (double)(v13 - v14);
  v25 = v18 - v18;
  v26 = v23 - (v21 + v22 * (double)(v16 - v15));
  v27 = v24 - (v21 + v22 * (double)(v13 - v15));
  v28 = v27 == v25 || v26 == v25;
  if (v28 || v26 <= v25 != v27 > v25)
    return result;
  v29 = fabs(v26);
  v30 = v16 + vcvtmd_s64_f64(v29 / (fabs(v27) + v29) * (double)(v13 - v16));
  v31 = v30 + 1;
  if (v30 >= v13 || v31 < v16)
    return result;
  v33 = (char **)(a2 + 8 * (v31 >> 12));
  v34 = *v33;
  if (!*v33)
  {
LABEL_40:
    v35 = 0;
    goto LABEL_41;
  }
  while (1)
  {
    v35 = v34;
    v36 = *((_DWORD *)v34 + 5) - v31;
    if (v36)
    {
      if (v36 * (((*((_DWORD *)result + 44) >> 20) & 3) - 1) > 0)
        goto LABEL_41;
      goto LABEL_38;
    }
    v37 = *((_DWORD *)v35 + 4);
    if (v37 != 1)
      break;
LABEL_38:
    v34 = *(char **)v35;
    v33 = (char **)v35;
    if (!*(_QWORD *)v35)
    {
      v33 = (char **)v35;
      goto LABEL_40;
    }
  }
  if (v37 == 3)
    return result;
LABEL_41:
  result = (char *)*((_QWORD *)result + 27);
  if (result)
  {
    v38 = *(char **)result;
  }
  else
  {
    result = *(char **)(v17 + 224);
    if (result)
    {
      *(_QWORD *)(v17 + 224) = *(_QWORD *)result;
    }
    else
    {
      result = aa_new_edge(v17);
      if (!result)
        return result;
    }
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    *((_QWORD *)result + 2) = 0;
    *((_DWORD *)result + 6) = v30;
    *((_DWORD *)result + 7) = v31;
    *((_QWORD *)result + 4) = 0;
    result[47] = 0;
    *((_WORD *)result + 22) = 0;
    *((_QWORD *)result + 9) = 0;
    v38 = result + 72;
    *((_QWORD *)result + 6) = result + 72;
    result += 48;
  }
  *(_QWORD *)(v17 + 216) = v38;
  *(_QWORD *)result = v35;
  *((_QWORD *)result + 1) = 0;
  *((_DWORD *)result + 4) = 3;
  *((_DWORD *)result + 5) = v31;
  *v33 = result;
  return result;
}

char *aa_ael_remove(char *result, uint64_t a2, int a3, int a4, uint64_t *a5)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  int *v10;
  uint64_t *v11;

  v7 = (uint64_t *)*((_QWORD *)result + 25);
  v6 = (uint64_t *)*((_QWORD *)result + 26);
  v8 = *a5;
  if (v7 == a5)
  {
    *((_QWORD *)result + 25) = v8;
    if (v8)
      *(_QWORD *)(v8 + 8) = 0;
    if (v6 == a5)
      *((_QWORD *)result + 26) = v8;
  }
  else
  {
    v10 = (int *)a5[1];
    if (v10)
      *(_QWORD *)v10 = v8;
    if (v8)
      *(_QWORD *)(v8 + 8) = v10;
    if (*((_DWORD *)a5 + 16) == 2)
    {
      v11 = (uint64_t *)a5[7];
      *((_WORD *)v11 + 22) -= *((_WORD *)a5 + 22);
      if (v8)
      {
        v11[10] = v8;
        return result;
      }
      if (v10)
      {
        v11[10] = (uint64_t)v10;
        return result;
      }
      v11[10] = 0;
      v8 = *v11;
      v10 = (int *)v11[1];
      if (v10)
        *(_QWORD *)v10 = v8;
      if (v8)
        *(_QWORD *)(v8 + 8) = v10;
      *v11 = *((_QWORD *)result + 28);
      *((_QWORD *)result + 28) = v11;
      if (v6 == v11)
        *((_QWORD *)result + 26) = v8;
      if (v7 == v11)
      {
        *((_QWORD *)result + 25) = v8;
        return result;
      }
    }
    else if (v6 == a5)
    {
      *((_QWORD *)result + 26) = v10;
    }
    if ((result[178] & 0xC0) != 0)
    {
      if (v8)
        return aa_intersection_event(result, a2, v10, (int *)v8, a3, a4);
    }
  }
  return result;
}

uint64_t aa_ael_mark(uint64_t result, uint64_t *a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;
  char v5;
  char v6;

  if (a2)
  {
    v2 = 0;
    v3 = (BYTE3(result) & 3) - 1;
    v4 = 1;
    do
    {
      v2 += *((__int16 *)a2 + 22);
      v5 = v4;
      if (v4)
        v6 = 0;
      else
        v6 = 2;
      v4 = (v2 & v3) == 0;
      if ((v2 & v3) == 0)
        v5 = v6;
      *((_BYTE *)a2 + 46) = v5;
      a2 = (uint64_t *)*a2;
    }
    while (a2);
  }
  return result;
}

uint64_t aa_distribute_edges(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t *v13;
  int v14;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  uint64_t *v23;
  int v24;

  v2 = *(_DWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  v3 = *(uint64_t **)(a1 + 192);
  if (!v3)
    return 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = (v2 >> 20) & 3;
  v10 = v9 - 1;
  do
  {
    v11 = *((_DWORD *)v3 + 3);
    if (v11)
    {
      v12 = 0;
      v13 = v3 + 3;
      do
      {
        if (*((_WORD *)v13 + 22))
        {
          if (v9)
          {
            v15 = *((_DWORD *)v13 + 6);
            v14 = *((_DWORD *)v13 + 7);
            v16 = v13 + 2;
            v17 = v15;
            v18 = v14;
          }
          else
          {
            v14 = *((_DWORD *)v13 + 6);
            v15 = *((_DWORD *)v13 + 7);
            v16 = (_DWORD *)v13 + 5;
            v17 = (4095 - v15);
            v18 = (4095 - v14);
          }
          *((_DWORD *)v13 + 10) = *v16;
          if (!v6 || (int)v17 < (int)v4 || (v19 = v6, (v17 ^ v4) >= 0x1000))
          {
            if (!v7 || (int)v17 < (int)v5 || (v19 = v7, (v17 ^ v5) >= 0x1000))
              v19 = (_QWORD *)(a2 + 8 * (v15 >> 12));
          }
          v20 = (uint64_t *)*v19;
          if (*v19)
          {
            do
            {
              v21 = v20;
              v22 = *((_DWORD *)v20 + 5) - v15;
              if (v22)
              {
                if (v22 * v10 > 0)
                  goto LABEL_25;
              }
              else if (!*((_DWORD *)v21 + 4))
              {
                goto LABEL_25;
              }
              v20 = (uint64_t *)*v21;
              v19 = v21;
            }
            while (*v21);
            v19 = v21;
          }
          v21 = 0;
LABEL_25:
          v13[6] = (uint64_t)v21;
          v13[7] = (uint64_t)v13;
          *((_DWORD *)v13 + 16) = 0;
          *((_DWORD *)v13 + 17) = v15;
          *v19 = v13 + 6;
          if (!v6 || (int)v18 < (int)v4 || (v18 ^ v4) >= 0x1000)
          {
            if ((int)v18 < (int)v17 || (v6 = v19, (v18 ^ v17) >= 0x1000))
              v6 = (_QWORD *)(a2 + 8 * (v14 >> 12));
          }
          v23 = (uint64_t *)*v6;
          if (*v6)
          {
            do
            {
              v24 = *((_DWORD *)v23 + 5) - v14;
              if (!v24)
                break;
              if (v24 * v10 > 0)
                break;
              v6 = v23;
              v23 = (uint64_t *)*v23;
            }
            while (v23);
          }
          v13[9] = (uint64_t)v23;
          v13[10] = (uint64_t)v13;
          *((_DWORD *)v13 + 22) = 1;
          *((_DWORD *)v13 + 23) = v14;
          v8 = (v8 + 1);
          v4 = v18;
          v5 = v17;
          v7 = v19;
          *v6 = v13 + 9;
        }
        else
        {
          *v13 = *(_QWORD *)(a1 + 224);
          *(_QWORD *)(a1 + 224) = v13;
          v19 = v7;
          v17 = v5;
          v18 = v4;
        }
        ++v12;
        v13 += 12;
      }
      while (v12 != v11);
    }
    else
    {
      v19 = v7;
      v17 = v5;
      v18 = v4;
    }
    v3 = (uint64_t *)*v3;
    v4 = v18;
    v5 = v17;
    v7 = v19;
  }
  while (v3);
  return v8;
}

CGBitmapInfo CGImageGetBitmapInfo(CGImageRef image)
{
  CGImageRef v1;
  CFTypeID v2;

  if (image)
  {
    v1 = image;
    v2 = CFGetTypeID(image);
    if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1)
      dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_211);
    if (v2 == CGImageGetTypeID_image_type_id)
      LODWORD(image) = *((_DWORD *)v1 + 8);
    else
      LODWORD(image) = 0;
  }
  return image;
}

size_t CGColorGetNumberOfComponents(size_t color)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (color)
  {
    if ((color & 0x8000000000000000) != 0)
      return CGTaggedColorGetNumberOfComponents(color, v1, v2, v3, v4, v5, v6, v7);
    else
      return *(_QWORD *)(color + 56);
  }
  return color;
}

void xt_font_cfarray_release(uint64_t a1, uint64_t a2)
{
  xt_font_release(a2);
}

CGContextRef CGContextRetain(CGContextRef c)
{
  if (c)
    CFRetain(c);
  return c;
}

uint64_t CGPatternGetShading(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)(result + 20) == 1)
      return *(_QWORD *)(result + 80);
    else
      return 0;
  }
  return result;
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  float64x2_t v4;
  __int128 v5;

  v4 = *(float64x2_t *)&t->c;
  v5 = *(_OWORD *)&t->a;
  *(float64x2_t *)&t->tx = vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)&t->tx, *(float64x2_t *)&t->a, tx), v4, ty);
  *(_OWORD *)&retstr->a = v5;
  *(float64x2_t *)&retstr->c = v4;
  *(_OWORD *)&retstr->tx = *(_OWORD *)&t->tx;
  return t;
}

uint64_t GRAYA8_shade(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  _BOOL8 v8;
  signed int v9;
  __n128 v11;
  void *v12;
  void *v13;
  int v14;
  int v15;
  uint64_t v16;
  void *v17;
  _BYTE v18[36];
  char v19;
  _QWORD v20[483];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v5 = v4;
  v6 = (uint64_t)v3;
  v20[482] = *MEMORY[0x1E0C80C00];
  v7 = *(int **)v2;
  v8 = !*((_QWORD *)v3 + 12) && !*(_QWORD *)(v4 + 72) && *(float *)(v4 + 4) >= 1.0;
  v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 56) + 16 * *v3 + 8 * v8 + 4 * (*((_QWORD *)v3 + 6) == 0));
  if (v9 > 27)
    return 0xFFFFFFFFLL;
  if (*((int *)v3 + 1) < 1 || *((int *)v3 + 2) < 1)
    return 0;
  if ((int)_blt_shade_initialize((uint64_t)v3, v4, (uint64_t)&v13, (uint64_t)v18) < 1)
    return 0xFFFFFFFFLL;
  if ((*(_DWORD *)v5 & 0xF000000) != 0x1000000)
  {
    if (v13)
      goto LABEL_22;
    return 0xFFFFFFFFLL;
  }
  if (*(_QWORD *)(v5 + 16))
  {
    v12 = GRAYA8_shade_radial_Gray;
  }
  else if (*(_QWORD *)(v5 + 24))
  {
    v12 = GRAYA8_shade_conic_Gray;
  }
  else if (v16 < 2)
  {
    v12 = GRAYA8_shade_axial_Gray;
  }
  else
  {
    v12 = GRAYA8_shade_custom_Gray;
  }
  v13 = v12;
LABEL_22:
  v14 = *v7;
  v15 = v14;
  GRAYa8_image_mark(v6, (uint64_t)&v13, v9, v11);
  if (v17 && (v17 < &v19 || v20 < v17))
    free(v17);
  return 1;
}

void GRAYa8_image_mark(uint64_t a1, uint64_t a2, unsigned int a3, __n128 a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  float v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __n128 v21;
  void *v22;
  _QWORD *v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  int v34;
  int v35;
  int *v36;
  int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  _BYTE *v57;
  unsigned int v58;
  int v59;
  _BYTE *v60;
  int v61;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unsigned int v66;
  int v67;
  unsigned __int8 *v68;
  int v69;
  int v70;
  int v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  int v81;
  _BYTE *v82;
  unsigned __int8 *v83;
  int v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  int v93;
  unsigned __int8 *v94;
  unsigned __int8 *v95;
  int v96;
  unsigned __int8 *v97;
  int v98;
  unsigned int v99;
  int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  unsigned __int8 *v104;
  unsigned __int8 *v105;
  int v106;
  int v107;
  unsigned __int8 *v108;
  int v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  int v113;
  unsigned int v114;
  unsigned __int8 *v115;
  int v116;
  unsigned __int8 *v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  int v121;
  unsigned __int8 *v122;
  int v123;
  int v124;
  int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned __int8 *v128;
  int v129;
  int v130;
  int v131;
  unsigned int v132;
  _BYTE *v133;
  unsigned __int8 *v134;
  int v135;
  int v136;
  int v137;
  unsigned int v138;
  _BYTE *v139;
  _BYTE *v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  char v144;
  unsigned __int8 v145;
  char v146;
  char v147;
  unsigned __int8 *v148;
  int v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  unsigned __int8 *v154;
  int v155;
  int v156;
  int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  int v161;
  unsigned __int8 *v162;
  int v163;
  int v164;
  unsigned int v165;
  int v166;
  unsigned __int8 *v167;
  int v168;
  unsigned __int8 *v169;
  int v170;
  unsigned int v171;
  unsigned int v172;
  int v173;
  unsigned int v174;
  int v175;
  uint64_t v176;
  unint64_t v177;
  unsigned __int8 *v178;
  int v179;
  int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  int v184;
  unsigned int v185;
  unsigned __int8 *v186;
  int v187;
  int v188;
  unsigned int v189;
  unsigned int v190;
  int v191;
  unsigned int v192;
  int v193;
  uint64_t v194;
  unint64_t v195;
  unsigned __int8 *v196;
  int v197;
  int v198;
  unsigned int v199;
  unsigned int v200;
  int v201;
  unsigned int v202;
  int v203;
  uint64_t v204;
  unint64_t v205;
  unsigned __int8 *v206;
  int v207;
  int v208;
  unsigned int v209;
  unsigned int v210;
  int v211;
  unsigned int v212;
  int v213;
  uint64_t v214;
  unint64_t v215;
  unsigned __int8 *v216;
  int v217;
  int v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  int v222;
  __int16 v223;
  unsigned __int8 *v224;
  int v225;
  int v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  int v230;
  __int16 v231;
  unsigned __int8 *v232;
  int v233;
  int v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  int v238;
  __int16 v239;
  unsigned __int8 *v240;
  int v241;
  int v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  int v246;
  __int16 v247;
  unsigned __int8 *v248;
  int v249;
  int v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  int v254;
  __int16 v255;
  unsigned __int8 *v256;
  int v257;
  int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  int v262;
  unsigned int v263;
  unsigned __int8 *v264;
  int v265;
  unsigned __int8 *v266;
  int v267;
  unsigned int v268;
  unsigned int v269;
  unsigned int v270;
  int v271;
  __int16 v272;
  unsigned __int8 *v273;
  int v274;
  int v275;
  unsigned int v276;
  unsigned int v277;
  unsigned int v278;
  int v279;
  __int16 v280;
  unsigned __int8 *v281;
  int v282;
  int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  int v287;
  unint64_t v288;
  unsigned __int8 *v289;
  int v290;
  int v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  int v295;
  unsigned __int8 *v296;
  unsigned __int8 *v297;
  int v298;
  unsigned int v299;
  int v300;
  _BYTE *v301;
  unsigned __int8 *v302;
  int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  int v307;
  uint64_t v308;
  unint64_t v309;
  void *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v339;
  _QWORD *v340;
  unsigned int v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  int *v347;
  int v348;
  uint64_t v349;
  uint64_t v350;

  v341 = a3;
  v350 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a1 + 4);
  v5 = ((int)v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if ((int)v5 > 0x1FFFFFF)
    return;
  v7 = *(int *)(a1 + 28);
  v8 = *(_QWORD *)(a1 + 40);
  v349 = *(_QWORD *)(a1 + 48);
  v9 = *(float *)(a2 + 184);
  v10 = *(int **)(a1 + 136);
  v346 = v8;
  v347 = v10;
  v11 = *(_QWORD *)(a2 + 96);
  v344 = *(_QWORD *)(a2 + 104);
  v345 = v11;
  v13 = *(int *)(a1 + 12);
  v12 = *(int *)(a1 + 16);
  v14 = *(_DWORD *)(a1 + 8);
  v340 = (_QWORD *)a2;
  v15 = *(int *)(a2 + 16);
  v16 = (v15 + 4) * v5;
  if (v16 > 65439)
  {
    v19 = (char *)malloc_type_calloc(1uLL, v16 + 96, 0xC0C1E7D8uLL);
    v18 = v19;
    v22 = v19;
    v23 = v340;
    if (!v19)
      return;
  }
  else
  {
    MEMORY[0x1E0C80A78](a1, a4);
    v18 = (char *)&v308 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v18, v17);
    v22 = 0;
    v23 = v340;
  }
  v310 = v22;
  v348 = v14;
  v21.n128_f32[0] = (float)(v9 * 255.0) + 0.5;
  v24 = (int)v21.n128_f32[0];
  v25 = v7 >> 1;
  v26 = (unint64_t)(v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  v27 = v26 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = 2 * v5 + 15;
  v29 = v28 & 0xFFFFFFFFFFFFFFF0;
  if ((_DWORD)v15)
    v30 = v28 & 0xFFFFFFFFFFFFFFF0;
  else
    v30 = 0;
  v31 = v27 + v30;
  v23[18] = v26;
  v23[19] = v27 + v30;
  v23[20] = v27;
  v32 = (unsigned __int8 *)(v346 + 2 * (v13 + v25 * v12));
  v311 = (int)v4;
  v309 = v25;
  v343 = v25 - (int)v4;
  v33 = *(int *)(a1 + 104);
  v34 = *(_DWORD *)(a1 + 108);
  v35 = *(unsigned __int8 *)(a1 + 2);
  if (v35 == 6 || v35 == 1)
  {
    if (!v347)
      goto LABEL_386;
    v36 = 0;
    v37 = 0;
    v38 = *(int *)(a1 + 124);
    v39 = (unsigned __int8 *)v347 + v33 + (int)v38 * (uint64_t)v34;
    v40 = v311;
    v342 = v38 - v311;
    v41 = v341;
    v42 = v340;
    goto LABEL_25;
  }
  if (!v347)
  {
    v342 = 0;
    v36 = 0;
    v39 = 0;
    v37 = 0;
    v41 = v341;
    v42 = v340;
    v40 = v311;
LABEL_25:
    v45 = v344;
    v44 = v345;
    goto LABEL_26;
  }
  v21.n128_f64[0] = shape_enum_clip_alloc((uint64_t)v19, v20, v347, 1, 1, 1, v33, v34, v4, v348);
  v45 = v344;
  v44 = v345;
  if (!v43)
    goto LABEL_386;
  v36 = v43;
  v46 = (int)((v15 * v5 + 15) & 0xFFFFFFF0);
  if (!(_DWORD)v15)
    v46 = v29;
  v47 = v31 + v46;
  v37 = 0;
  v342 = -v311;
  v39 = (unsigned __int8 *)(v47 + 16);
  v42 = v340;
  while (1)
  {
    while (1)
    {
      v48 = *((_DWORD *)v39 - 4);
      v49 = v48 - v37;
      if (v48 > v37)
        break;
      if (v37 < *((_DWORD *)v39 - 3) + v48)
      {
        v40 = v311;
        v41 = v341;
LABEL_26:
        v50 = v24 ^ 0xFF;
        v313 = (v4 - 1) + 1;
        v312 = -v40;
        v51 = v36;
LABEL_27:
        v52 = v41;
        LODWORD(v346) = v37;
        v347 = v51;
        ((void (*)(_QWORD *, uint64_t, uint64_t, uint64_t, __n128))*v42)(v42, v44, v45, v4, v21);
        v56 = (unsigned __int8 *)v42[20];
        v57 = (_BYTE *)v42[18];
        v58 = *((_DWORD *)v42 + 2);
        if (v58 == *((_DWORD *)v42 + 3))
        {
          v41 = v52;
          if (v24 != 255)
          {
            v59 = v4;
            v60 = (_BYTE *)v42[18];
            do
            {
              if (*v60)
              {
                *v56 = (unsigned __int16)(*v56 * (_WORD)v24 + ((*v56 * v24) >> 8) + 1) >> 8;
                v56[1] = (unsigned __int16)(v56[1] * (_WORD)v24 + ((v56[1] * v24) >> 8) + 1) >> 8;
              }
              ++v60;
              v56 += 2;
              --v59;
            }
            while (v59);
            v56 += 2 * v312;
            v57 += v313 + v312;
          }
        }
        else
        {
          v61 = HIWORD(v58) & 0x3F;
          if (v61 == 32 || v61 == 16)
            _CGHandleAssert("GRAYa8_image_pixel", 6877, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/blt_gray_with_alpha8.cc", "bitdepth != 16 && bitdepth != 32", "Invalid bitdepth (%u)", v53, v54, v55, v61);
          v63 = v42[19];
          v41 = v52;
          v64 = 0;
          v65 = v56 + 1;
          if (v24 == 255)
          {
            do
            {
              if (v57[v64])
                *(_WORD *)(v65 - 1) = *(_WORD *)(v63 + 2 * v64);
              ++v64;
              v65 += 2;
            }
            while ((_DWORD)v4 != (_DWORD)v64);
          }
          else
          {
            do
            {
              if (v57[v64])
              {
                v66 = *(_WORD *)(v63 + 2 * v64) * v50;
                *(_WORD *)(v65 - 1) = *(_WORD *)(v63 + 2 * v64)
                                    - ((v66 + (v66 >> 8) + 1) & 0xFF00 | ((HIBYTE(*(unsigned __int16 *)(v63 + 2 * v64))
                                                                         * v50
                                                                         + ((HIBYTE(*(unsigned __int16 *)(v63 + 2 * v64))
                                                                                         * v50) >> 8)
                                                                         + 1) >> 8));
              }
              ++v64;
              v65 += 2;
            }
            while ((_DWORD)v4 != (_DWORD)v64);
          }
        }
        switch((int)v41)
        {
          case 0:
            v67 = v4;
            v68 = v39;
            do
            {
              v69 = *v57;
              if (*v57)
              {
                if (v39)
                  v69 = ((unsigned __int16)(*v68 * (_WORD)v69 + ((*v68 * v69) >> 8) + 1) >> 8);
                if (v69)
                {
                  if (v69 == 255)
                  {
                    *(_WORD *)v32 = 0;
                  }
                  else
                  {
                    v70 = v69 ^ 0xFF;
                    *v32 = (unsigned __int16)(*v32 * (_WORD)v70 + ((*v32 * v70) >> 8) + 1) >> 8;
                    v32[1] = (unsigned __int16)(v32[1] * (_WORD)v70 + ((v32[1] * v70) >> 8) + 1) >> 8;
                  }
                }
              }
              ++v57;
              v68 += v39 != 0;
              v32 += 2;
              --v67;
            }
            while (v67);
            v39 = &v68[v342];
            goto LABEL_308;
          case 1:
            v71 = *v57;
            if (v39)
            {
              v72 = v32 - 2;
              v73 = v56 + 1;
              v74 = v57 + 1;
              v75 = v4;
              v76 = v346;
              do
              {
                if (v71)
                {
                  v77 = *v39 * v71 + ((*v39 * v71) >> 8) + 1;
                  if (BYTE1(v77))
                  {
                    if (BYTE1(v77) == 255)
                    {
                      *((_WORD *)v72 + 1) = *(_WORD *)(v73 - 1);
                    }
                    else
                    {
                      v78 = v77 >> 8;
                      v79 = v78 * *(v73 - 1) + (v78 ^ 0xFF) * v72[2];
                      v72[2] = (unsigned __int16)(v79 + (v79 >> 8) + 1) >> 8;
                      v72[3] = (unsigned __int16)(v78 * *v73
                                                + (v78 ^ 0xFF) * v72[3]
                                                + ((v78 * *v73 + (v78 ^ 0xFF) * v72[3]) >> 8)
                                                + 1) >> 8;
                    }
                  }
                }
                v80 = *v74++;
                v71 = v80;
                ++v39;
                v72 += 2;
                v73 += 2;
                --v75;
              }
              while (v75);
              goto LABEL_79;
            }
            v296 = v56 + 1;
            v297 = v57 + 1;
            v72 = v32 - 2;
            v298 = v4;
            v76 = v346;
            do
            {
              if (v71)
              {
                if (v71 == 255)
                {
                  *((_WORD *)v72 + 1) = *(_WORD *)(v296 - 1);
                }
                else
                {
                  v299 = *(v296 - 1) * v71 + v72[2] * (v71 ^ 0xFF);
                  v72[2] = (unsigned __int16)(v299 + (v299 >> 8) + 1) >> 8;
                  v72[3] = (unsigned __int16)(*v296 * (_WORD)v71
                                            + v72[3] * (v71 ^ 0xFF)
                                            + ((*v296 * v71 + v72[3] * (v71 ^ 0xFFu)) >> 8)
                                            + 1) >> 8;
                }
              }
              v300 = *v297++;
              v71 = v300;
              v296 += 2;
              v72 += 2;
              --v298;
            }
            while (v298);
            goto LABEL_381;
          case 2:
            v81 = *v57;
            if (v39)
            {
              v72 = v32 - 2;
              v82 = v56 + 1;
              v83 = v57 + 1;
              v84 = v4;
              v76 = v346;
              while (1)
              {
                if (!v81)
                  goto LABEL_78;
                v85 = *v39 * v81 + ((*v39 * v81) >> 8) + 1;
                if (!BYTE1(v85))
                  goto LABEL_78;
                if (BYTE1(v85) == 255)
                {
                  v86 = *v82;
                  if (*v82)
                  {
                    if (v86 == 255)
                    {
                      v72[2] = *(v82 - 1);
                      LOBYTE(v87) = -1;
                    }
                    else
                    {
                      v72[2] = *(v82 - 1)
                             + ((unsigned __int16)(v72[2] * (v86 ^ 0xFF) + ((v72[2] * (v86 ^ 0xFFu)) >> 8) + 1) >> 8);
                      v87 = v86 + ((v72[3] * (v86 ^ 0xFF) + ((v72[3] * (v86 ^ 0xFFu)) >> 8) + 1) >> 8);
                    }
                    goto LABEL_77;
                  }
                }
                else
                {
                  v88 = v85 >> 8;
                  v89 = v88 * *v82 + ((v88 * *v82) >> 8) + 1;
                  if (BYTE1(v89))
                  {
                    v72[2] = ((unsigned __int16)(((v89 >> 8) ^ 0xFF) * v72[2] + ((((v89 >> 8) ^ 0xFF) * v72[2]) >> 8) + 1) >> 8)
                           + ((unsigned __int16)(v88 * *(v82 - 1)
                                               + ((v88 * *(v82 - 1)) >> 8)
                                               + 1) >> 8);
                    v87 = ((((v89 >> 8) ^ 0xFF) * v72[3] + ((((v89 >> 8) ^ 0xFF) * v72[3]) >> 8) + 1) >> 8) + (v89 >> 8);
LABEL_77:
                    v72[3] = v87;
                  }
                }
LABEL_78:
                v90 = *v83++;
                v81 = v90;
                ++v39;
                v72 += 2;
                v82 += 2;
                if (!--v84)
                {
LABEL_79:
                  v39 += v342;
                  goto LABEL_382;
                }
              }
            }
            v301 = v56 + 1;
            v302 = v57 + 1;
            v72 = v32 - 2;
            v303 = v4;
            v76 = v346;
            do
            {
              if (!v81)
                goto LABEL_380;
              if (v81 != 255)
              {
                v306 = *v301 * v81 + ((*v301 * v81) >> 8) + 1;
                if (!BYTE1(v306))
                  goto LABEL_380;
                v72[2] = ((unsigned __int16)(((v306 >> 8) ^ 0xFF) * v72[2] + ((((v306 >> 8) ^ 0xFF) * v72[2]) >> 8) + 1) >> 8)
                       + ((unsigned __int16)(*(v301 - 1) * (_WORD)v81
                                           + ((*(v301 - 1) * v81) >> 8)
                                           + 1) >> 8);
                v304 = (((v306 >> 8) ^ 0xFF) * v72[3] + ((((v306 >> 8) ^ 0xFF) * v72[3]) >> 8) + 1) >> 8;
                goto LABEL_378;
              }
              v304 = *v301;
              if (!*v301)
                goto LABEL_380;
              if (v304 != 255)
              {
                v72[2] = *(v301 - 1)
                       + ((unsigned __int16)(v72[2] * (v304 ^ 0xFF) + ((v72[2] * (v304 ^ 0xFF)) >> 8) + 1) >> 8);
                v306 = v72[3] * (v304 ^ 0xFF) + ((v72[3] * (v304 ^ 0xFF)) >> 8) + 1;
LABEL_378:
                v305 = v304 + (v306 >> 8);
                goto LABEL_379;
              }
              v72[2] = *(v301 - 1);
              LOBYTE(v305) = -1;
LABEL_379:
              v72[3] = v305;
LABEL_380:
              v307 = *v302++;
              v81 = v307;
              v301 += 2;
              v72 += 2;
              --v303;
            }
            while (v303);
LABEL_381:
            v39 = 0;
LABEL_382:
            v32 = &v72[2 * v343 + 2];
LABEL_359:
            if (!--v348)
            {
              v36 = v347;
              goto LABEL_384;
            }
            v51 = 0;
            v37 = v76 + 1;
            v44 += v42[16];
            v45 += v42[17];
            v36 = v347;
            if (v347)
              continue;
            goto LABEL_27;
          case 3:
            v91 = v56 + 1;
            v92 = v32 + 1;
            v93 = v4;
            v94 = v39;
            do
            {
              v95 = v92;
              v96 = *v57;
              if (*v57)
              {
                if (v39)
                  v96 = ((unsigned __int16)(*v94 * (_WORD)v96 + ((*v94 * v96) >> 8) + 1) >> 8);
                if (v96)
                {
                  if (v96 == 255)
                  {
                    v97 = v32 + 1;
                    v98 = *v95;
                    *(v95 - 1) = (unsigned __int16)(v98 * *(v91 - 1) + ((v98 * *(v91 - 1)) >> 8) + 1) >> 8;
                    v99 = *v91 * v98;
                  }
                  else
                  {
                    v100 = *v95;
                    v101 = (v100 * v96 + ((v100 * v96) >> 8) + 1) >> 8;
                    v102 = v96 ^ 0xFF;
                    v103 = *(v95 - 1) * v102 + v101 * *(v91 - 1);
                    *(v95 - 1) = (unsigned __int16)(v103 + (v103 >> 8) + 1) >> 8;
                    v99 = v100 * v102 + v101 * *v91;
                    v97 = v95;
                  }
                  *v97 = (unsigned __int16)(v99 + (v99 >> 8) + 1) >> 8;
                }
              }
              ++v57;
              v94 += v39 != 0;
              v32 += 2;
              v91 += 2;
              v92 = v95 + 2;
              --v93;
            }
            while (v93);
            goto LABEL_101;
          case 4:
            v104 = v56 + 1;
            v105 = v32 + 1;
            v106 = v4;
            v94 = v39;
            do
            {
              v95 = v105;
              v107 = *v57;
              if (*v57)
              {
                if (v39)
                  v107 = ((unsigned __int16)(*v94 * (_WORD)v107 + ((*v94 * v107) >> 8) + 1) >> 8);
                if (v107)
                {
                  if (v107 == 255)
                  {
                    v108 = v32 + 1;
                    v109 = *v95 ^ 0xFF;
                    *(v95 - 1) = (unsigned __int16)((*v95 ^ 0xFF) * *(v104 - 1)
                                                  + ((v109 * *(v104 - 1)) >> 8)
                                                  + 1) >> 8;
                    v110 = *v104 * v109;
                  }
                  else
                  {
                    v111 = *v95;
                    v112 = ((v111 ^ 0xFF) * v107 + (((v111 ^ 0xFFu) * v107) >> 8) + 1) >> 8;
                    v113 = v107 ^ 0xFF;
                    v114 = *(v95 - 1) * v113 + v112 * *(v104 - 1);
                    *(v95 - 1) = (unsigned __int16)(v114 + (v114 >> 8) + 1) >> 8;
                    v110 = v111 * v113 + v112 * *v104;
                    v108 = v95;
                  }
                  *v108 = (unsigned __int16)(v110 + (v110 >> 8) + 1) >> 8;
                }
              }
              ++v57;
              v94 += v39 != 0;
              v32 += 2;
              v104 += 2;
              v105 = v95 + 2;
              --v106;
            }
            while (v106);
LABEL_101:
            v39 = &v94[v342];
            v32 = &v95[2 * v343 + 1];
            goto LABEL_358;
          case 5:
            v115 = v56 + 1;
            v116 = v4;
            v117 = v39;
            do
            {
              v118 = *v57;
              if (*v57)
              {
                if (!v39
                  || (v118 = ((unsigned __int16)(*v117 * (_WORD)v118
                                                                + ((*v117 * v118) >> 8)
                                                                + 1) >> 8)) != 0)
                {
                  v119 = (*(v115 - 1) * v118 + ((*(v115 - 1) * v118) >> 8) + 1) >> 8;
                  v120 = *v115 * v118 + ((*v115 * v118) >> 8) + 1;
                  v121 = v32[1];
                  *v32 = (unsigned __int16)(v119 * v121
                                          + ((v120 >> 8) ^ 0xFF) * *v32
                                          + ((v119 * v121 + ((v120 >> 8) ^ 0xFF) * *v32) >> 8)
                                          + 1) >> 8;
                  v32[1] = (unsigned __int16)((((v120 >> 8) ^ 0xFF) + (v120 >> 8)) * v121
                                            + (((((v120 >> 8) ^ 0xFF) + (v120 >> 8)) * v121) >> 8)
                                            + 1) >> 8;
                }
              }
              ++v57;
              v117 += v39 != 0;
              v32 += 2;
              v115 += 2;
              --v116;
            }
            while (v116);
            goto LABEL_307;
          case 6:
            v122 = v56 + 1;
            v123 = v4;
            v117 = v39;
            do
            {
              v124 = *v57;
              if (*v57)
              {
                if (!v39
                  || (v124 = ((unsigned __int16)(*v117 * (_WORD)v124
                                                                + ((*v117 * v124) >> 8)
                                                                + 1) >> 8)) != 0)
                {
                  v125 = v32[1];
                  if ((_BYTE)v125 != 0xFF)
                  {
                    if (~(_BYTE)v125 == 255)
                    {
                      *v32 = (unsigned __int16)(*(v122 - 1) * (_WORD)v124 + ((*(v122 - 1) * v124) >> 8) + 1) >> 8;
                      v126 = (*v122 * v124 + ((*v122 * v124) >> 8) + 1) >> 8;
                    }
                    else
                    {
                      v127 = (~(_BYTE)v125 * v124
                            + ((~(_BYTE)v125 * v124) >> 8)
                            + 1) >> 8;
                      *v32 += (unsigned __int16)(v127 * *(v122 - 1) + ((v127 * *(v122 - 1)) >> 8) + 1) >> 8;
                      v126 = v125 + ((v127 * *v122 + ((v127 * *v122) >> 8) + 1) >> 8);
                    }
                    v32[1] = v126;
                  }
                }
              }
              ++v57;
              v117 += v39 != 0;
              v32 += 2;
              v122 += 2;
              --v123;
            }
            while (v123);
            goto LABEL_307;
          case 7:
            v128 = v56 + 1;
            v129 = v4;
            v117 = v39;
            do
            {
              v130 = *v57;
              if (*v57)
              {
                if (v39)
                  v130 = ((unsigned __int16)(*v117 * (_WORD)v130
                                                            + ((*v117 * v130) >> 8)
                                                            + 1) >> 8);
                if (v130)
                {
                  if (v130 == 255)
                  {
                    v131 = *v128;
                    *v32 = (unsigned __int16)(v131 * *v32 + ((v131 * *v32) >> 8) + 1) >> 8;
                    v133 = v32 + 1;
                    v132 = v32[1];
                  }
                  else
                  {
                    v132 = (v130 ^ 0xFF) + ((*v128 * v130 + ((*v128 * v130) >> 8) + 1) >> 8);
                    *v32 = (unsigned __int16)(v132 * *v32 + ((v132 * *v32) >> 8) + 1) >> 8;
                    v133 = v32 + 1;
                    v131 = v32[1];
                  }
                  *v133 = (unsigned __int16)(v132 * v131 + ((v132 * v131) >> 8) + 1) >> 8;
                }
              }
              ++v57;
              v117 += v39 != 0;
              v32 += 2;
              v128 += 2;
              --v129;
            }
            while (v129);
            goto LABEL_307;
          case 8:
            v134 = v56 + 1;
            v135 = v4;
            v117 = v39;
            do
            {
              v136 = *v57;
              if (*v57)
              {
                if (v39)
                  v136 = ((unsigned __int16)(*v117 * (_WORD)v136
                                                            + ((*v117 * v136) >> 8)
                                                            + 1) >> 8);
                if (v136)
                {
                  if (v136 == 255)
                  {
                    v137 = *v134 ^ 0xFF;
                    *v32 = (unsigned __int16)((*v134 ^ 0xFF) * *v32 + ((v137 * *v32) >> 8) + 1) >> 8;
                    v139 = v32 + 1;
                    v138 = v32[1];
                  }
                  else
                  {
                    v138 = (v136 ^ 0xFF) + (((*v134 ^ 0xFF) * v136 + (((*v134 ^ 0xFFu) * v136) >> 8) + 1) >> 8);
                    *v32 = (unsigned __int16)(v138 * *v32 + ((v138 * *v32) >> 8) + 1) >> 8;
                    v139 = v32 + 1;
                    v137 = v32[1];
                  }
                  *v139 = (unsigned __int16)(v138 * v137 + ((v138 * v137) >> 8) + 1) >> 8;
                }
              }
              ++v57;
              v117 += v39 != 0;
              v32 += 2;
              v134 += 2;
              --v135;
            }
            while (v135);
            goto LABEL_307;
          case 9:
            v140 = v56 + 1;
            v141 = v4;
            v117 = v39;
            while (1)
            {
              v142 = *v57;
              if (*v57)
              {
                if (!v39)
                  goto LABEL_147;
                v143 = *v117 * v142 + ((*v117 * v142) >> 8) + 1;
                if (BYTE1(v143))
                  break;
              }
LABEL_148:
              ++v57;
              v117 += v39 != 0;
              v32 += 2;
              v140 += 2;
              if (!--v141)
                goto LABEL_307;
            }
            v142 = v143 >> 8;
LABEL_147:
            v144 = *v140 * v142;
            v145 = v32[1];
            v146 = *(v140 - 1) * v142 * ~v145;
            v147 = v144 + ~(_BYTE)v142;
            *v32 = v146 + v147 * *v32;
            v32[1] = v144 * ~v145 + v147 * v145;
            goto LABEL_148;
          case 10:
            v148 = v56 + 1;
            v149 = v4;
            v117 = v39;
            do
            {
              v150 = *v57;
              if (*v57)
              {
                if (!v39
                  || (v150 = ((unsigned __int16)(*v117 * (_WORD)v150
                                                                + ((*v117 * v150) >> 8)
                                                                + 1) >> 8)) != 0)
                {
                  v151 = (*(v148 - 1) * v150 + ((*(v148 - 1) * v150) >> 8) + 1) >> 8;
                  v152 = (*v148 * v150 + ((*v148 * v150) >> 8) + 1) >> 8;
                  v153 = v32[1];
                  *v32 = (unsigned __int16)(v151 * (v153 ^ 0xFF)
                                          + (v152 ^ 0xFF) * *v32
                                          + ((v151 * (v153 ^ 0xFF) + (v152 ^ 0xFF) * *v32) >> 8)
                                          + 1) >> 8;
                  v32[1] = (unsigned __int16)(v152 * (v153 ^ 0xFF)
                                            + (v152 ^ 0xFF) * v153
                                            + ((v152 * (v153 ^ 0xFF) + (v152 ^ 0xFF) * v153) >> 8)
                                            + 1) >> 8;
                }
              }
              ++v57;
              v117 += v39 != 0;
              v32 += 2;
              v148 += 2;
              --v149;
            }
            while (v149);
            goto LABEL_307;
          case 11:
            v154 = v56 + 1;
            v155 = v4;
            v117 = v39;
            do
            {
              v156 = *v57;
              if (*v57)
              {
                if (!v39
                  || (v156 = ((unsigned __int16)(*v117 * (_WORD)v156
                                                                + ((*v117 * v156) >> 8)
                                                                + 1) >> 8)) != 0)
                {
                  if (v349)
                    v157 = v32[1];
                  else
                    v157 = 255;
                  v158 = (*(v154 - 1) * v156 + ((*(v154 - 1) * v156) >> 8) + 1) >> 8;
                  v159 = (*v154 * v156 + ((*v154 * v156) >> 8) + 1) >> 8;
                  v160 = ((v159 - v158) | (v159 << 16))
                       + (v157 - *v32)
                       + (v157 << 16);
                  v161 = (255 * ((v160 >> 8) & 0x10001)) | v160;
                  *v32 = BYTE2(v161) - v161;
                  v32[1] = BYTE2(v161);
                }
              }
              ++v57;
              v117 += v39 != 0;
              v32 += 2;
              v154 += 2;
              --v155;
            }
            while (v155);
            goto LABEL_307;
          case 12:
            v162 = v56 + 1;
            v163 = v4;
            v117 = v39;
            do
            {
              v164 = *v57;
              if (*v57)
              {
                if (!v39
                  || (v164 = ((unsigned __int16)(*v117 * (_WORD)v164
                                                                + ((*v117 * v164) >> 8)
                                                                + 1) >> 8)) != 0)
                {
                  v165 = ((*(unsigned __int16 *)v32 | (*(unsigned __int16 *)v32 << 8)) & 0xFF00FF)
                       + ((*(v162 - 1) * v164 + ((*(v162 - 1) * v164) >> 8) + 1) >> 8)
                       + ((257 * *v162 * v164 + 256) & 0xFF0000);
                  v166 = (255 * ((v165 >> 8) & 0x10001)) | v165;
                  *v32 = v166;
                  v32[1] = BYTE2(v166);
                }
              }
              ++v57;
              v117 += v39 != 0;
              v32 += 2;
              v162 += 2;
              --v163;
            }
            while (v163);
            goto LABEL_307;
          case 13:
            v344 = v45;
            v345 = v44;
            v167 = v56 + 1;
            v168 = v4;
            v169 = v39;
            while (1)
            {
              v170 = *v57;
              if (!*v57)
                goto LABEL_184;
              if (v39)
              {
                v171 = *v169 * v170 + ((*v169 * v170) >> 8) + 1;
                v170 = BYTE1(v171);
                if (!BYTE1(v171))
                  goto LABEL_184;
              }
              v172 = *v167 * v170 + ((*v167 * v170) >> 8) + 1;
              v173 = BYTE1(v172);
              if (!BYTE1(v172))
                goto LABEL_184;
              v174 = (*(v167 - 1) * v170 + ((*(v167 - 1) * v170) >> 8) + 1) >> 8;
              if (!v349)
                break;
              v175 = v32[1];
              if (v32[1])
                goto LABEL_183;
              *v32 = v174;
              v32[1] = BYTE1(v172);
LABEL_184:
              ++v57;
              v169 += v39 != 0;
              v32 += 2;
              v167 += 2;
              if (!--v168)
                goto LABEL_294;
            }
            v175 = 255;
LABEL_183:
            v176 = v172 & 0xFF00 | v174;
            v177 = v339 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v32;
            v338 = v338 & 0xFFFFFFFFFFFF0000 | v176;
            v339 = v177;
            *(_WORD *)v32 = PDAmultiplyPDA(v177, v175, v176, v173);
            goto LABEL_184;
          case 14:
            v178 = v56 + 1;
            v179 = v4;
            v117 = v39;
            while (1)
            {
              v180 = *v57;
              if (!*v57)
                goto LABEL_197;
              if (v39)
              {
                v180 = ((unsigned __int16)(*v117 * (_WORD)v180 + ((*v117 * v180) >> 8) + 1) >> 8);
                if (!v180)
                  goto LABEL_197;
              }
              v181 = *v178 * v180 + ((*v178 * v180) >> 8) + 1;
              if (!BYTE1(v181))
                goto LABEL_197;
              v182 = (*(v178 - 1) * v180 + ((*(v178 - 1) * v180) >> 8) + 1) >> 8;
              v183 = v181 >> 8;
              if (v349)
              {
                v184 = v32[1];
                if (!v32[1])
                  goto LABEL_196;
              }
              else
              {
                v184 = 255;
              }
              v185 = (*v32 ^ 0xFF) * v182 - *v32 + (*v32 << 8);
              v182 = (v185 + (v185 >> 8) + 1) >> 8;
              v183 = (255 * (v183 + v184) - v183 * v184 + ((255 * (v183 + v184) - v183 * v184) >> 8) + 1) >> 8;
LABEL_196:
              *v32 = v182;
              v32[1] = v183;
LABEL_197:
              ++v57;
              v117 += v39 != 0;
              v32 += 2;
              v178 += 2;
              if (!--v179)
                goto LABEL_307;
            }
          case 15:
            v344 = v45;
            v345 = v44;
            v186 = v56 + 1;
            v187 = v4;
            v169 = v39;
            while (1)
            {
              v188 = *v57;
              if (!*v57)
                goto LABEL_209;
              if (v39)
              {
                v189 = *v169 * v188 + ((*v169 * v188) >> 8) + 1;
                v188 = BYTE1(v189);
                if (!BYTE1(v189))
                  goto LABEL_209;
              }
              v190 = *v186 * v188 + ((*v186 * v188) >> 8) + 1;
              v191 = BYTE1(v190);
              if (!BYTE1(v190))
                goto LABEL_209;
              v192 = (*(v186 - 1) * v188 + ((*(v186 - 1) * v188) >> 8) + 1) >> 8;
              if (!v349)
                break;
              v193 = v32[1];
              if (v32[1])
                goto LABEL_208;
              *v32 = v192;
              v32[1] = BYTE1(v190);
LABEL_209:
              ++v57;
              v169 += v39 != 0;
              v32 += 2;
              v186 += 2;
              if (!--v187)
                goto LABEL_294;
            }
            v193 = 255;
LABEL_208:
            v194 = v190 & 0xFF00 | v192;
            v195 = v337 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v32;
            v336 = v336 & 0xFFFFFFFFFFFF0000 | v194;
            v337 = v195;
            *(_WORD *)v32 = PDAoverlayPDA(v195, v193, v194, v191);
            goto LABEL_209;
          case 16:
            v344 = v45;
            v345 = v44;
            v196 = v56 + 1;
            v197 = v4;
            v169 = v39;
            while (1)
            {
              v198 = *v57;
              if (!*v57)
                goto LABEL_221;
              if (v39)
              {
                v199 = *v169 * v198 + ((*v169 * v198) >> 8) + 1;
                v198 = BYTE1(v199);
                if (!BYTE1(v199))
                  goto LABEL_221;
              }
              v200 = *v196 * v198 + ((*v196 * v198) >> 8) + 1;
              v201 = BYTE1(v200);
              if (!BYTE1(v200))
                goto LABEL_221;
              v202 = (*(v196 - 1) * v198 + ((*(v196 - 1) * v198) >> 8) + 1) >> 8;
              if (!v349)
                break;
              v203 = v32[1];
              if (v32[1])
                goto LABEL_220;
              *v32 = v202;
              v32[1] = BYTE1(v200);
LABEL_221:
              ++v57;
              v169 += v39 != 0;
              v32 += 2;
              v196 += 2;
              if (!--v197)
                goto LABEL_294;
            }
            v203 = 255;
LABEL_220:
            v204 = v200 & 0xFF00 | v202;
            v205 = v333 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v32;
            v332 = v332 & 0xFFFFFFFFFFFF0000 | v204;
            v333 = v205;
            *(_WORD *)v32 = PDAdarkenPDA(v205, v203, v204, v201);
            goto LABEL_221;
          case 17:
            v344 = v45;
            v345 = v44;
            v206 = v56 + 1;
            v207 = v4;
            v169 = v39;
            while (1)
            {
              v208 = *v57;
              if (!*v57)
                goto LABEL_233;
              if (v39)
              {
                v209 = *v169 * v208 + ((*v169 * v208) >> 8) + 1;
                v208 = BYTE1(v209);
                if (!BYTE1(v209))
                  goto LABEL_233;
              }
              v210 = *v206 * v208 + ((*v206 * v208) >> 8) + 1;
              v211 = BYTE1(v210);
              if (!BYTE1(v210))
                goto LABEL_233;
              v212 = (*(v206 - 1) * v208 + ((*(v206 - 1) * v208) >> 8) + 1) >> 8;
              if (!v349)
                break;
              v213 = v32[1];
              if (v32[1])
                goto LABEL_232;
              *v32 = v212;
              v32[1] = BYTE1(v210);
LABEL_233:
              ++v57;
              v169 += v39 != 0;
              v32 += 2;
              v206 += 2;
              if (!--v207)
                goto LABEL_294;
            }
            v213 = 255;
LABEL_232:
            v214 = v210 & 0xFF00 | v212;
            v215 = v335 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v32;
            v334 = v334 & 0xFFFFFFFFFFFF0000 | v214;
            v335 = v215;
            *(_WORD *)v32 = PDAlightenPDA(v215, v213, v214, v211);
            goto LABEL_233;
          case 18:
            v344 = v45;
            v345 = v44;
            v216 = v56 + 1;
            v217 = v4;
            v169 = v39;
            while (1)
            {
              v218 = *v57;
              if (!*v57)
                goto LABEL_245;
              if (v39)
              {
                v219 = *v169 * v218 + ((*v169 * v218) >> 8) + 1;
                v218 = BYTE1(v219);
                if (!BYTE1(v219))
                  goto LABEL_245;
              }
              v220 = *v216 * v218 + ((*v216 * v218) >> 8) + 1;
              if (!BYTE1(v220))
                goto LABEL_245;
              v221 = (*(v216 - 1) * v218 + ((*(v216 - 1) * v218) >> 8) + 1) >> 8;
              if (!v349)
                break;
              v222 = v32[1];
              if (v32[1])
                goto LABEL_244;
              *v32 = v221;
              v32[1] = BYTE1(v220);
LABEL_245:
              ++v57;
              v169 += v39 != 0;
              v32 += 2;
              v216 += 2;
              if (!--v217)
                goto LABEL_294;
            }
            v222 = 255;
LABEL_244:
            v223 = *(_WORD *)v32;
            v331 = v331 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v32;
            v330 = v330 & 0xFFFFFFFFFFFF0000 | v220 & 0xFF00 | v221;
            *(_WORD *)v32 = PDAcolordodgePDA(v223, v222, v330, BYTE1(v220));
            goto LABEL_245;
          case 19:
            v344 = v45;
            v345 = v44;
            v224 = v56 + 1;
            v225 = v4;
            v169 = v39;
            while (1)
            {
              v226 = *v57;
              if (!*v57)
                goto LABEL_257;
              if (v39)
              {
                v227 = *v169 * v226 + ((*v169 * v226) >> 8) + 1;
                v226 = BYTE1(v227);
                if (!BYTE1(v227))
                  goto LABEL_257;
              }
              v228 = *v224 * v226 + ((*v224 * v226) >> 8) + 1;
              if (!BYTE1(v228))
                goto LABEL_257;
              v229 = (*(v224 - 1) * v226 + ((*(v224 - 1) * v226) >> 8) + 1) >> 8;
              if (!v349)
                break;
              v230 = v32[1];
              if (v32[1])
                goto LABEL_256;
              *v32 = v229;
              v32[1] = BYTE1(v228);
LABEL_257:
              ++v57;
              v169 += v39 != 0;
              v32 += 2;
              v224 += 2;
              if (!--v225)
                goto LABEL_294;
            }
            v230 = 255;
LABEL_256:
            v231 = *(_WORD *)v32;
            v329 = v329 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v32;
            v328 = v328 & 0xFFFFFFFFFFFF0000 | v228 & 0xFF00 | v229;
            *(_WORD *)v32 = PDAcolorburnPDA(v231, v230, v328, BYTE1(v228));
            goto LABEL_257;
          case 20:
            v344 = v45;
            v345 = v44;
            v232 = v56 + 1;
            v233 = v4;
            v169 = v39;
            while (1)
            {
              v234 = *v57;
              if (!*v57)
                goto LABEL_269;
              if (v39)
              {
                v235 = *v169 * v234 + ((*v169 * v234) >> 8) + 1;
                v234 = BYTE1(v235);
                if (!BYTE1(v235))
                  goto LABEL_269;
              }
              v236 = *v232 * v234 + ((*v232 * v234) >> 8) + 1;
              if (!BYTE1(v236))
                goto LABEL_269;
              v237 = (*(v232 - 1) * v234 + ((*(v232 - 1) * v234) >> 8) + 1) >> 8;
              if (!v349)
                break;
              v238 = v32[1];
              if (v32[1])
                goto LABEL_268;
              *v32 = v237;
              v32[1] = BYTE1(v236);
LABEL_269:
              ++v57;
              v169 += v39 != 0;
              v32 += 2;
              v232 += 2;
              if (!--v233)
                goto LABEL_294;
            }
            v238 = 255;
LABEL_268:
            v239 = *(_WORD *)v32;
            v325 = v325 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v32;
            v324 = v324 & 0xFFFFFFFFFFFF0000 | v236 & 0xFF00 | v237;
            *(_WORD *)v32 = PDAsoftlightPDA(v239, v238, v324, BYTE1(v236));
            goto LABEL_269;
          case 21:
            v344 = v45;
            v345 = v44;
            v240 = v56 + 1;
            v241 = v4;
            v169 = v39;
            while (1)
            {
              v242 = *v57;
              if (!*v57)
                goto LABEL_281;
              if (v39)
              {
                v243 = *v169 * v242 + ((*v169 * v242) >> 8) + 1;
                v242 = BYTE1(v243);
                if (!BYTE1(v243))
                  goto LABEL_281;
              }
              v244 = *v240 * v242 + ((*v240 * v242) >> 8) + 1;
              if (!BYTE1(v244))
                goto LABEL_281;
              v245 = (*(v240 - 1) * v242 + ((*(v240 - 1) * v242) >> 8) + 1) >> 8;
              if (!v349)
                break;
              v246 = v32[1];
              if (v32[1])
                goto LABEL_280;
              *v32 = v245;
              v32[1] = BYTE1(v244);
LABEL_281:
              ++v57;
              v169 += v39 != 0;
              v32 += 2;
              v240 += 2;
              if (!--v241)
                goto LABEL_294;
            }
            v246 = 255;
LABEL_280:
            v247 = *(_WORD *)v32;
            v327 = v327 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v32;
            v326 = v326 & 0xFFFFFFFFFFFF0000 | v244 & 0xFF00 | v245;
            *(_WORD *)v32 = PDAhardlightPDA(v247, v246, v326, BYTE1(v244));
            goto LABEL_281;
          case 22:
            v344 = v45;
            v345 = v44;
            v248 = v56 + 1;
            v249 = v4;
            v169 = v39;
            while (1)
            {
              v250 = *v57;
              if (!*v57)
                goto LABEL_293;
              if (v39)
              {
                v251 = *v169 * v250 + ((*v169 * v250) >> 8) + 1;
                v250 = BYTE1(v251);
                if (!BYTE1(v251))
                  goto LABEL_293;
              }
              v252 = *v248 * v250 + ((*v248 * v250) >> 8) + 1;
              if (!BYTE1(v252))
                goto LABEL_293;
              v253 = (*(v248 - 1) * v250 + ((*(v248 - 1) * v250) >> 8) + 1) >> 8;
              if (!v349)
                break;
              v254 = v32[1];
              if (v32[1])
                goto LABEL_292;
              *v32 = v253;
              v32[1] = BYTE1(v252);
LABEL_293:
              ++v57;
              v169 += v39 != 0;
              v32 += 2;
              v248 += 2;
              if (!--v249)
              {
LABEL_294:
                v39 = &v169[v342];
                goto LABEL_357;
              }
            }
            v254 = 255;
LABEL_292:
            v255 = *(_WORD *)v32;
            v323 = v323 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v32;
            v322 = v322 & 0xFFFFFFFFFFFF0000 | v252 & 0xFF00 | v253;
            *(_WORD *)v32 = PDAdifferencePDA(v255, v254, v322, BYTE1(v252));
            goto LABEL_293;
          case 23:
            v256 = v56 + 1;
            v257 = v4;
            v117 = v39;
            while (1)
            {
              v258 = *v57;
              if (!*v57)
                goto LABEL_306;
              if (v39)
              {
                v258 = ((unsigned __int16)(*v117 * (_WORD)v258 + ((*v117 * v258) >> 8) + 1) >> 8);
                if (!v258)
                  goto LABEL_306;
              }
              v259 = *v256 * v258 + ((*v256 * v258) >> 8) + 1;
              if (!BYTE1(v259))
                goto LABEL_306;
              v260 = (*(v256 - 1) * v258 + ((*(v256 - 1) * v258) >> 8) + 1) >> 8;
              v261 = v259 >> 8;
              if (v349)
              {
                v262 = v32[1];
                if (!v32[1])
                  goto LABEL_305;
              }
              else
              {
                v262 = 255;
              }
              v263 = 255 * (v260 + *v32) - 2 * v260 * *v32;
              v260 = (v263 + (v263 >> 8) + 1) >> 8;
              v261 = (255 * (v261 + v262) - v261 * v262 + ((255 * (v261 + v262) - v261 * v262) >> 8) + 1) >> 8;
LABEL_305:
              *v32 = v260;
              v32[1] = v261;
LABEL_306:
              ++v57;
              v117 += v39 != 0;
              v32 += 2;
              v256 += 2;
              if (!--v257)
              {
LABEL_307:
                v39 = &v117[v342];
LABEL_308:
                v32 += 2 * v343;
                goto LABEL_358;
              }
            }
          case 24:
            v344 = v45;
            v345 = v44;
            v264 = v56 + 1;
            v265 = v4;
            v266 = v39;
            while (1)
            {
              v267 = *v57;
              if (!*v57)
                goto LABEL_319;
              if (v39)
              {
                v268 = *v266 * v267 + ((*v266 * v267) >> 8) + 1;
                v267 = BYTE1(v268);
                if (!BYTE1(v268))
                  goto LABEL_319;
              }
              v269 = *v264 * v267 + ((*v264 * v267) >> 8) + 1;
              if (!BYTE1(v269))
                goto LABEL_319;
              v270 = (*(v264 - 1) * v267 + ((*(v264 - 1) * v267) >> 8) + 1) >> 8;
              if (!v349)
                break;
              v271 = v32[1];
              if (v32[1])
                goto LABEL_318;
              *v32 = v270;
              v32[1] = BYTE1(v269);
LABEL_319:
              ++v57;
              v266 += v39 != 0;
              v32 += 2;
              v264 += 2;
              if (!--v265)
                goto LABEL_356;
            }
            v271 = 255;
LABEL_318:
            v272 = *(_WORD *)v32;
            v321 = v321 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v32;
            v320 = v320 & 0xFFFFFFFFFFFF0000 | v269 & 0xFF00 | v270;
            *(_WORD *)v32 = PDAhuePDA(v272, v271, v320, BYTE1(v269));
            goto LABEL_319;
          case 25:
            v344 = v45;
            v345 = v44;
            v273 = v56 + 1;
            v266 = v39;
            v274 = v4;
            while (1)
            {
              v275 = *v57;
              if (!*v57)
                goto LABEL_331;
              if (v39)
              {
                v276 = *v266 * v275 + ((*v266 * v275) >> 8) + 1;
                v275 = BYTE1(v276);
                if (!BYTE1(v276))
                  goto LABEL_331;
              }
              v277 = *v273 * v275 + ((*v273 * v275) >> 8) + 1;
              if (!BYTE1(v277))
                goto LABEL_331;
              v278 = (*(v273 - 1) * v275 + ((*(v273 - 1) * v275) >> 8) + 1) >> 8;
              if (!v349)
                break;
              v279 = v32[1];
              if (v32[1])
                goto LABEL_330;
              *v32 = v278;
              v32[1] = BYTE1(v277);
LABEL_331:
              ++v57;
              v266 += v39 != 0;
              v32 += 2;
              v273 += 2;
              if (!--v274)
                goto LABEL_356;
            }
            v279 = 255;
LABEL_330:
            v280 = *(_WORD *)v32;
            v319 = v319 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v32;
            v318 = v318 & 0xFFFFFFFFFFFF0000 | v277 & 0xFF00 | v278;
            *(_WORD *)v32 = PDAhuePDA(v280, v279, v318, BYTE1(v277));
            goto LABEL_331;
          case 26:
            v344 = v45;
            v345 = v44;
            v281 = v56 + 1;
            v266 = v39;
            v282 = v4;
            while (1)
            {
              v283 = *v57;
              if (!*v57)
                goto LABEL_343;
              if (v39)
              {
                v284 = *v266 * v283 + ((*v266 * v283) >> 8) + 1;
                v283 = BYTE1(v284);
                if (!BYTE1(v284))
                  goto LABEL_343;
              }
              v285 = *v281 * v283 + ((*v281 * v283) >> 8) + 1;
              if (!BYTE1(v285))
                goto LABEL_343;
              v286 = (*(v281 - 1) * v283 + ((*(v281 - 1) * v283) >> 8) + 1) >> 8;
              if (!v349)
                break;
              v287 = v32[1];
              if (v32[1])
                goto LABEL_342;
              *v32 = v286;
              v32[1] = BYTE1(v285);
LABEL_343:
              ++v57;
              v266 += v39 != 0;
              v32 += 2;
              v281 += 2;
              if (!--v282)
                goto LABEL_356;
            }
            v287 = 255;
LABEL_342:
            v288 = v316 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v32;
            v317 = v317 & 0xFFFFFFFFFFFF0000 | v285 & 0xFF00 | v286;
            v316 = v288;
            *(_WORD *)v32 = PDAhuePDA(v286, BYTE1(v285), v288, v287);
            goto LABEL_343;
          case 27:
            v344 = v45;
            v345 = v44;
            v289 = v56 + 1;
            v266 = v39;
            v290 = v4;
            break;
          default:
            goto LABEL_358;
        }
        while (1)
        {
          v291 = *v57;
          if (!*v57)
            goto LABEL_355;
          if (v39)
          {
            v292 = *v266 * v291 + ((*v266 * v291) >> 8) + 1;
            v291 = BYTE1(v292);
            if (!BYTE1(v292))
              goto LABEL_355;
          }
          v293 = *v289 * v291 + ((*v289 * v291) >> 8) + 1;
          if (!BYTE1(v293))
            goto LABEL_355;
          v294 = (*(v289 - 1) * v291 + ((*(v289 - 1) * v291) >> 8) + 1) >> 8;
          if (!v349)
            break;
          v295 = v32[1];
          if (v32[1])
            goto LABEL_354;
          *v32 = v294;
          v32[1] = BYTE1(v293);
LABEL_355:
          ++v57;
          v266 += v39 != 0;
          v32 += 2;
          v289 += 2;
          if (!--v290)
          {
LABEL_356:
            v39 = &v266[v342];
LABEL_357:
            v45 = v344;
            v32 += 2 * v343;
            v41 = v341;
            v42 = v340;
            v44 = v345;
LABEL_358:
            v76 = v346;
            goto LABEL_359;
          }
        }
        v295 = 255;
LABEL_354:
        v315 = v315 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)v32;
        v314 = v314 & 0xFFFFFFFFFFFF0000 | v293 & 0xFF00 | v294;
        *(_WORD *)v32 = PDAhuePDA(v315, v295, v314, BYTE1(v293));
        goto LABEL_355;
      }
      if (!shape_enum_clip_scan((uint64_t)v36, (_DWORD *)v39 - 4))
        goto LABEL_384;
    }
    v348 -= v49;
    if (v348 < 1)
      break;
    v44 += v42[16] * v49;
    v45 += v42[17] * v49;
    v32 += 2 * v309 * v49;
    v37 = v48;
  }
LABEL_384:
  if (v36)
    free(v36);
LABEL_386:
  if (v310)
    free(v310);
}

void GRAYA8_shade_axial_Gray(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;
  _BYTE *v14;
  float *v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  char v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  int v31;

  v4 = a4;
  v5 = *(float *)(a1 + 280);
  v6 = *(float *)(a1 + 296)
     + (float)((float)(*(float *)(a1 + 288) * (float)(*(float *)(*(_QWORD *)(a1 + 272) + 4) * (float)a3))
             + (float)(v5 * (float)(*(float *)(*(_QWORD *)(a1 + 272) + 4) * (float)a2)));
  v7 = *(float *)(a1 + 336);
  v8 = *(float *)(a1 + 344);
  v9 = *(float *)(a1 + 304);
  v10 = *(float *)(a1 + 308);
  v11 = *(_DWORD *)(a1 + 320);
  v12 = *(_DWORD *)(a1 + 324);
  v13 = *(_DWORD **)(a1 + 144);
  v14 = *(_BYTE **)(a1 + 152);
  v15 = *(float **)(a1 + 384);
  if (*(_QWORD *)(a1 + 392))
    v16 = *(float **)(a1 + 392);
  else
    v16 = *(float **)(a1 + 272);
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  if (v18)
    v19 = *(_QWORD *)(a1 + 40);
  else
    v19 = *(_QWORD *)(a1 + 272);
  if (v5 != 0.0)
  {
    while (1)
    {
      v21 = v11;
      if (v6 >= v9)
      {
        v21 = v12;
        if (v6 <= v10)
          v21 = (int)(float)(v8 * (float)(v6 - v7));
      }
      if ((v21 & 0x80000000) != 0)
      {
        if (!v15)
        {
          v26 = 0;
          goto LABEL_30;
        }
        v23 = *v16;
        v25 = *v16 * *v15;
      }
      else
      {
        v22 = v21;
        if (!v18)
          v22 = 0;
        v23 = *(float *)(v19 + 4 * v22);
        if (v18)
          v24 = *(float *)(v19 + 4 * v22);
        else
          v24 = 1.0;
        v25 = *(float *)(v17 + 4 * v21) * v24;
      }
      SHADE(v14, v25, v23);
      v26 = -1;
LABEL_30:
      v6 = v5 + v6;
      v14 += 2;
      *(_BYTE *)v13 = v26;
      v13 = (_DWORD *)((char *)v13 + 1);
      if (!--v4)
        return;
    }
  }
  if (v6 >= v9)
  {
    v11 = *(_DWORD *)(a1 + 324);
    if (v6 <= v10)
      v11 = (int)(float)(v8 * (float)(v6 - v7));
  }
  if ((v11 & 0x80000000) == 0 || v15)
  {
    if ((v11 & 0x80000000) != 0)
    {
      v28 = *v16;
      v30 = *v16 * *v15;
    }
    else
    {
      v27 = v11;
      if (!v18)
        v27 = 0;
      v28 = *(float *)(v19 + 4 * v27);
      v29 = 1.0;
      if (v18)
        v29 = *(float *)(v19 + 4 * v27);
      v30 = *(float *)(v17 + 4 * v11) * v29;
    }
    v31 = a4 + 4;
    do
    {
      SHADE(v14, v30, v28);
      SHADE(v14 + 2, v30, v28);
      SHADE(v14 + 4, v30, v28);
      SHADE(v14 + 6, v30, v28);
      *v13++ = -1;
      v31 -= 4;
      v14 += 8;
    }
    while (v31 > 4);
  }
  else
  {
    if (a4 >= 4)
      v20 = 4;
    else
      v20 = a4;
    bzero(*(void **)(a1 + 144), ((a4 - v20 + 3) & 0xFFFFFFFC) + 4);
  }
}

double SHADE(_BYTE *a1, float a2, float a3)
{
  double v3;
  float v4;
  double v5;
  BOOL v6;
  double v7;
  double v8;
  float v9;
  double v10;
  double result;

  v3 = a2;
  if (v3 > 1.0)
    v3 = 1.0;
  v4 = v3;
  v5 = v4;
  v6 = v3 < 0.0;
  v7 = 0.0;
  if (v6)
    v5 = 0.0;
  v8 = a3;
  if (v8 > 1.0)
    v8 = 1.0;
  v6 = v8 < 0.0;
  v9 = v8;
  v10 = v9;
  if (!v6)
    v7 = v10;
  *a1 = (int)(v5 * 255.0 + 0.5);
  result = v7 * 255.0 + 0.5;
  a1[1] = (int)result;
  return result;
}

uint64_t GRAYA8_sample_GRAYA8(uint64_t result, uint64_t a2, uint64_t a3, int a4, double a5, double a6, double a7, int8x8_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  __int8 *v52;
  __int8 *v53;
  int v54;
  int32x2_t v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  int v59;
  int8x8_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int8 *v73;
  unsigned __int8 *v74;
  __int32 v75;
  __int8 *v76;
  __int8 *v77;
  __int8 *v78;
  int v79;
  __int8 *v80;
  __int8 *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int8 *v87;
  unsigned __int8 *v88;
  unsigned int v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int8 *v96;
  unsigned __int8 *v97;
  uint32x2_t v98;
  int32x2_t v99;
  int32x2_t v100;
  __int8 *v101;
  __int8 *v102;
  int v103;
  int8x8_t v104;
  uint32x2_t v105;
  int32x2_t v106;
  int32x2_t v107;
  int32x2_t v108;
  int8x8_t v109;
  int32x2_t v110;
  int32x2_t v111;
  int32x2_t v112;
  int8x8_t v113;
  uint32x2_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int8 *v127;
  unsigned __int8 *v128;
  int v129;
  unsigned int v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;

  v12 = *(_DWORD *)(result + 8);
  if (v12 >> 6 != 2)
    _CGHandleAssert("GRAYA8_sample_GRAYA8_inner", 10201, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/blt_gray_with_alpha8.cc", "skip == LAST_SKIP", "skip = %d", a10, a11, a12, v12 >> 6);
  if (((v12 >> 4) & 3) != 0)
    _CGHandleAssert("GRAYA8_sample_GRAYA8_inner", 10202, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt/blt_gray_with_alpha8.cc", "reverse == NO_REVERSE", "reverse = %d", a10, a11, a12, (v12 >> 4) & 3);
  v13 = *(_DWORD *)(result + 24);
  v14 = *(_QWORD *)(result + 112);
  v15 = *(_QWORD *)(result + 48);
  v16 = *(_QWORD *)(result + 56);
  if (v15)
  {
    v138 = *(_QWORD *)(result + 112);
    if (v14 > v15)
      v138 = v14 % v15;
  }
  else
  {
    v138 = 0;
  }
  v17 = *(_QWORD *)(result + 176);
  v18 = *(_QWORD *)(result + 120);
  v19 = *(_QWORD *)(result + 32);
  if (v16)
  {
    v137 = *(_QWORD *)(result + 120);
    if (v18 > v16)
      v137 = v18 % v16;
  }
  else
  {
    v137 = 0;
  }
  v133 = *(_QWORD *)(result + 80);
  v134 = *(_QWORD *)(result + 64);
  v135 = *(_QWORD *)(result + 88);
  v136 = *(_QWORD *)(result + 72);
  v132 = *(_DWORD *)(result + 188);
  v20 = *(_QWORD *)(result + 152) - 2;
  v21 = *(_QWORD *)(result + 144) - 1;
  v22 = *(_QWORD *)(result + 40);
  v23 = v19 + (2 * *(_DWORD *)(result + 256)) + ((*(_DWORD *)(result + 260) - 1) * v13) - 2;
  do
  {
    while (1)
    {
      if (a3 >= v136)
      {
        if (a3 <= v135)
        {
          v32 = 0;
          v33 = ((unint64_t)a3 >> 22) & 0x3C0;
          v34 = 0x3FFFFFFF;
          v35 = a3;
        }
        else
        {
          v28 = *(_QWORD *)(result + 216);
          v29 = *(_QWORD *)(result + 224) + v135;
          v30 = v29 - a3 + (v28 >> 1);
          if (v30 < 1)
            goto LABEL_52;
          if (v30 >= v28)
            LODWORD(v31) = 0x3FFFFFFF;
          else
            v31 = (unint64_t)(*(_QWORD *)(result + 232) * v30) >> 32;
          v34 = v31 | v132;
          v35 = v29 - 0x1000000;
          v32 = a3 - (v29 - 0x1000000);
          v33 = 448;
        }
      }
      else
      {
        v24 = *(_QWORD *)(result + 216);
        v25 = v136 - *(_QWORD *)(result + 224);
        v26 = a3 - v25 + (v24 >> 1);
        if (v26 < 1)
          goto LABEL_52;
        if (v26 >= v24)
          LODWORD(v27) = 0x3FFFFFFF;
        else
          v27 = (unint64_t)(*(_QWORD *)(result + 232) * v26) >> 32;
        v34 = v27 | v132;
        v35 = v25 + 0x1000000;
        v32 = a3 - (v25 + 0x1000000);
        v33 = 512;
      }
      if (a2 >= v134)
        break;
      v36 = *(_QWORD *)(result + 192);
      v37 = v134 - *(_QWORD *)(result + 200);
      v38 = a2 - v37 + (v36 >> 1);
      if (v38 >= 1)
      {
        if (v38 < v36)
          v34 = ((v34 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v38) >> 32) >> 15)) | v132;
        v39 = v37 + 0x1000000;
        v40 = a2 - (v37 + 0x1000000);
        v41 = 32;
        goto LABEL_36;
      }
LABEL_52:
      --a4;
      a2 += v14;
      a3 += v18;
      v20 += 2;
      *(_BYTE *)++v21 = 0;
      if (!a4)
        return result;
    }
    if (a2 <= v133)
    {
      v40 = 0;
      v41 = ((unint64_t)a2 >> 26) & 0x3C;
      v39 = a2;
      goto LABEL_36;
    }
    v42 = *(_QWORD *)(result + 192);
    v43 = *(_QWORD *)(result + 200) + v133;
    v44 = v43 - a2 + (v42 >> 1);
    if (v44 < 1)
      goto LABEL_52;
    if (v44 < v42)
      v34 = ((v34 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v44) >> 32) >> 15)) | v132;
    v39 = v43 - 0x1000000;
    v40 = a2 - (v43 - 0x1000000);
    v41 = 28;
LABEL_36:
    if (v34 < 0x400000)
      goto LABEL_52;
    if (v15)
    {
      v45 = (v16 & ((v35 % v16) >> 63)) + v35 % v16;
      v46 = (v15 & ((v39 % v15) >> 63)) + v39 % v15;
      if (v45 >= v16)
        v47 = v16;
      else
        v47 = 0;
      v35 = v45 - v47;
      if (v46 >= v15)
        v48 = v15;
      else
        v48 = 0;
      v39 = v46 - v48;
      v32 += v35;
      v40 += v39;
    }
    v49 = v19 + SHIDWORD(v35) * (uint64_t)v13;
    v50 = v39 >> 32;
    v51 = v49 + 2 * v50;
    v52 = *(__int8 **)(result + 32);
    if (v23 >= v51)
      v53 = (__int8 *)(v49 + 2 * v50);
    else
      v53 = (__int8 *)v23;
    if (v53 < v52)
      v53 = *(__int8 **)(result + 32);
    if (v22)
      v54 = v53[1];
    else
      v54 = 255;
    v55.i32[0] = *v53;
    v55.i32[1] = v54;
    if (!v17)
      goto LABEL_126;
    v56 = *(_DWORD *)(v17 + (v41 | v33));
LABEL_58:
    v57 = v56 & 0xF;
    v58 = v56 >> 8;
    v59 = HIBYTE(v56) & 3;
    v60 = vand_s8((int8x8_t)v55, (int8x8_t)0xFF000000FFLL);
    switch(v57)
    {
      case 1:
        LODWORD(v82) = SBYTE1(v56);
        if (v15)
        {
          v83 = v58 << 56;
          v84 = v32 + (v83 >> 24);
          v85 = v16 & (v84 >> 63);
          if (v85 + v84 >= v16)
            v86 = v16;
          else
            v86 = 0;
          v82 = (v85 + (v83 >> 24) - v86) >> 32;
        }
        v87 = (__int8 *)(v51 + (int)v82 * (uint64_t)v13);
        if (v23 < (unint64_t)v87)
          v87 = (__int8 *)v23;
        if (v87 >= v52)
          v88 = (unsigned __int8 *)v87;
        else
          v88 = (unsigned __int8 *)v52;
        v89 = *v88;
        v90 = 255;
        if (v22)
          v90 = v88[1];
        v91 = interpolate_graya[2 * v59 + 1];
LABEL_112:
        a8 = (int8x8_t)vdup_n_s32(interpolate_graya[2 * v91 + 1]);
        v98 = (uint32x2_t)vneg_s32(vdup_n_s32(v91 + 1));
        v99 = vsub_s32(v55, (int32x2_t)vshl_u32((uint32x2_t)vand_s8(a8, v60), v98));
        v100 = (int32x2_t)vshl_u32((uint32x2_t)vand_s8(a8, (int8x8_t)__PAIR64__(v90, v89)), v98);
LABEL_125:
        v55 = vadd_s32(v99, v100);
        break;
      case 2:
        v92 = SBYTE2(v56);
        if (v15)
        {
          v93 = v40 + ((uint64_t)SBYTE2(v56) << 32);
          v94 = v15 & (v93 >> 63);
          if (v94 + v93 >= v15)
            v95 = v15;
          else
            v95 = 0;
          v92 = (v94 + ((uint64_t)((unint64_t)HIWORD(v56) << 56) >> 24) - v95) >> 32;
        }
        v96 = (__int8 *)(v51 + 2 * v92);
        if (v23 < (unint64_t)v96)
          v96 = (__int8 *)v23;
        if (v96 >= v52)
          v97 = (unsigned __int8 *)v96;
        else
          v97 = (unsigned __int8 *)v52;
        v89 = *v97;
        v90 = 255;
        if (v22)
          v90 = v97[1];
        v91 = (v56 >> 28) & 3;
        goto LABEL_112;
      case 3:
        LODWORD(v61) = SBYTE1(v56);
        v62 = SBYTE2(v56);
        if (v15)
        {
          v63 = v58 << 56;
          v64 = v32 + (v63 >> 24);
          v65 = v40 + ((uint64_t)SBYTE2(v56) << 32);
          v66 = v16 & (v64 >> 63);
          v67 = v15 & (v65 >> 63);
          v68 = v67 + v65;
          if (v66 + v64 >= v16)
            v69 = v16;
          else
            v69 = 0;
          if (v68 >= v15)
            v70 = v15;
          else
            v70 = 0;
          v61 = (v66 + (v63 >> 24) - v69) >> 32;
          v62 = (v67 + ((uint64_t)((unint64_t)HIWORD(v56) << 56) >> 24) - v70) >> 32;
        }
        v71 = (int)v61 * (uint64_t)v13;
        v72 = 2 * v62;
        v73 = (__int8 *)(v51 + 2 * v62);
        if (v23 < (unint64_t)v73)
          v73 = (__int8 *)v23;
        if (v73 >= v52)
          v74 = (unsigned __int8 *)v73;
        else
          v74 = (unsigned __int8 *)v52;
        v75 = *v74;
        if (v22)
        {
          v76 = (__int8 *)(v74 + 1);
          v77 = (__int8 *)(v51 + v71);
          if (v23 >= (unint64_t)v77)
            v78 = v77;
          else
            v78 = (__int8 *)v23;
          if (v78 < v52)
            v78 = v52;
          v79 = v78[1];
          v80 = &v77[v72];
          if (v23 < (unint64_t)v80)
            v80 = (__int8 *)v23;
          if (v80 >= v52)
            v81 = v80;
          else
            v81 = v52;
          a8.i8[0] = *v76;
          a8.i8[4] = v81[1];
        }
        else
        {
          v101 = (__int8 *)(v51 + v71);
          if (v23 >= (unint64_t)v101)
            v78 = v101;
          else
            v78 = (__int8 *)v23;
          if (v78 < v52)
            v78 = v52;
          v102 = &v101[v72];
          if (v23 < (unint64_t)v102)
            v102 = (__int8 *)v23;
          if (v102 >= v52)
            v81 = v102;
          else
            v81 = v52;
          a8 = (int8x8_t)0xFF000000FFLL;
          v79 = 255;
        }
        v103 = (v56 >> 28) & 3;
        v104 = (int8x8_t)vdup_n_s32(interpolate_graya[2 * v59 + 1]);
        v105 = (uint32x2_t)vneg_s32(vdup_n_s32(v59 + 1));
        v106 = (int32x2_t)vshl_u32((uint32x2_t)vand_s8(v104, v60), v105);
        v107 = vsub_s32(v55, v106);
        v106.i32[0] = v75;
        v108 = vzip1_s32(v106, (int32x2_t)a8);
        v109 = vand_s8(v104, (int8x8_t)0xFF000000FFLL);
        v110 = (int32x2_t)vshl_u32((uint32x2_t)vand_s8(v109, (int8x8_t)v108), v105);
        v111 = vsub_s32(v108, v110);
        v110.i8[0] = *v78;
        v110.i32[1] = v79;
        v112 = vadd_s32(v107, (int32x2_t)vshl_u32((uint32x2_t)vand_s8(v109, (int8x8_t)v110), v105));
        a8.i8[0] = *v81;
        v113 = (int8x8_t)vadd_s32(v111, (int32x2_t)vshl_u32((uint32x2_t)vand_s8(v109, a8), v105));
        a8 = vand_s8((int8x8_t)vdup_n_s32(interpolate_graya[2 * v103 + 1]), (int8x8_t)0xFF000000FFLL);
        v114 = (uint32x2_t)vneg_s32(vdup_n_s32(v103 + 1));
        v99 = vsub_s32(v112, (int32x2_t)vshl_u32((uint32x2_t)vand_s8((int8x8_t)v112, a8), v114));
        v100 = (int32x2_t)vshl_u32((uint32x2_t)vand_s8(v113, a8), v114);
        goto LABEL_125;
    }
LABEL_126:
    *(_BYTE *)(v20 + 2) = v55.i8[0];
    v20 += 2;
    *(_BYTE *)(v20 + 1) = v55.i8[4];
    *(_BYTE *)(v21 + 1) = v34 >> 22;
    if (a4 == 1)
      break;
    v115 = 0;
    v116 = a4 - 1;
    a2 += v14;
    v117 = v133 - a2;
    a3 += v18;
    v118 = v135 - a3;
    --a4;
    while ((((a2 - v134) | v117 | (a3 - v136) | v118) & 0x8000000000000000) == 0)
    {
      if (v15)
      {
        v119 = (v16 & ((v32 + v137) >> 63)) + v32 + v137;
        v120 = (v15 & ((v40 + v138) >> 63)) + v40 + v138;
        if (v119 >= v16)
          v121 = v16;
        else
          v121 = 0;
        v122 = v119 - v121;
        if (v120 >= v15)
          v123 = v15;
        else
          v123 = 0;
        v124 = v120 - v123;
        v40 = v124;
        v32 = v122;
      }
      else
      {
        v124 = a2;
        HIDWORD(v122) = HIDWORD(a3);
      }
      v125 = v19 + SHIDWORD(v122) * (uint64_t)v13;
      v126 = v124 >> 32;
      v51 = v125 + 2 * v126;
      v52 = *(__int8 **)(result + 32);
      if (v23 >= v51)
        v127 = (__int8 *)(v125 + 2 * v126);
      else
        v127 = (__int8 *)v23;
      if (v127 >= v52)
        v128 = (unsigned __int8 *)v127;
      else
        v128 = *(unsigned __int8 **)(result + 32);
      if (v22)
        v129 = v128[1];
      else
        v129 = 255;
      v130 = *v128;
      if (v17)
      {
        v56 = *(_DWORD *)(v17 + (((unint64_t)a3 >> 22) & 0x3C0 | ((unint64_t)a2 >> 26) & 0x3C));
        if ((v56 & 0xF) != 0)
        {
          v55 = (int32x2_t)__PAIR64__(v129, v130);
          v34 = -1;
          v21 += v115 + 1;
          goto LABEL_58;
        }
      }
      --a4;
      *(_BYTE *)(v20 + 2) = v130;
      v20 += 2;
      *(_BYTE *)(v20 + 1) = v129;
      v131 = v21 + v115++;
      a2 += v14;
      *(_BYTE *)(v131 + 2) = -1;
      v117 -= v14;
      a3 += v18;
      v118 -= v18;
      if (v116 == (_DWORD)v115)
        return result;
    }
    v21 += v115 + 1;
  }
  while (a4);
  return result;
}

uint64_t argb32_shade(uint64_t a1, __n128 a2)
{
  uint64_t *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __n128 v13;
  void *v14;
  unint64_t v15;
  _BYTE *v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _OWORD v42[2];
  int v43;
  _BYTE v44[16];
  uint64_t v45;
  _BYTE v46[40];
  uint64_t v47;

  v2 = (uint64_t *)MEMORY[0x1E0C80A78](a1, a2);
  v5 = v4;
  v6 = (uint64_t)v3;
  v7 = 0;
  v47 = *MEMORY[0x1E0C80C00];
  v8 = *v2;
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  *(_OWORD *)v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  memset(v17, 0, sizeof(v17));
  v9 = *(_QWORD *)(v8 + 56);
  v10 = *v3;
  if (!*((_QWORD *)v3 + 12))
  {
    if (*(_QWORD *)(v4 + 72))
      v7 = 0;
    else
      v7 = *(float *)(v4 + 4) >= 1.0;
  }
  v43 = 0;
  memset(v42, 0, sizeof(v42));
  v11 = *(_DWORD *)(v9 + 16 * v10 + 8 * v7 + 4 * (*((_QWORD *)v3 + 6) == 0));
  if (v11 > 27)
    return 0xFFFFFFFFLL;
  if (*((int *)v3 + 1) < 1 || *((int *)v3 + 2) < 1)
    return 0;
  if ((int)_blt_shade_initialize((uint64_t)v3, v4, (uint64_t)v17, (uint64_t)v42) < 1)
    return 0xFFFFFFFFLL;
  if ((*(_DWORD *)v5 & 0xF000000) == 0x3000000)
  {
    if (*(_QWORD *)(v5 + 16))
    {
      v14 = argb32_shade_radial_RGB;
    }
    else if (*(_QWORD *)(v5 + 24))
    {
      v14 = argb32_shade_conic_RGB;
    }
    else if (*((uint64_t *)&v19 + 1) < 2)
    {
      v14 = argb32_shade_axial_RGB;
    }
    else
    {
      v14 = argb32_shade_custom_RGB;
    }
    *(_QWORD *)&v17[0] = v14;
    if ((_QWORD)v40)
    {
      *((_QWORD *)&v39 + 1) = v46;
      _blt_shade_samples_16((uint64_t)v46, 2, 3, (float *)v40, *((float **)&v40 + 1), 1uLL);
    }
    v15 = *((_QWORD *)&v19 + 1) * v19;
    if ((uint64_t)(*((_QWORD *)&v19 + 1) * v19) <= 480)
    {
      v16 = v44;
      v38[1] = v44;
LABEL_27:
      _blt_shade_samples_16((uint64_t)v16, 2, 3, (float *)v18, *((float **)&v18 + 1), v15);
      if (*(_BYTE *)(v5 + 1))
        *(_QWORD *)&v39 = &_blt_shade_samples_noise;
      goto LABEL_29;
    }
    v16 = malloc_type_malloc(8 * v15 + 32, 0x54320A8DuLL);
    if (v16)
    {
      v38[1] = v16;
      v15 = *((_QWORD *)&v19 + 1) * v19;
      goto LABEL_27;
    }
    return 0xFFFFFFFFLL;
  }
  if (!*(_QWORD *)&v17[0])
    return 0xFFFFFFFFLL;
LABEL_29:
  DWORD2(v17[0]) = *(_DWORD *)v8;
  HIDWORD(v17[0]) = DWORD2(v17[0]);
  argb32_image_mark(v6, (uint64_t)v17, v11, v13);
  if (v38[1] && (v38[1] < v44 || &v45 < v38[1]))
    free(v38[1]);
  return 1;
}

uint64_t RGBA32_shade(uint64_t a1, __n128 a2)
{
  uint64_t *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __n128 v13;
  void *v14;
  unint64_t v15;
  _BYTE *v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _OWORD v42[2];
  int v43;
  _BYTE v44[16];
  uint64_t v45;
  _BYTE v46[40];
  uint64_t v47;

  v2 = (uint64_t *)MEMORY[0x1E0C80A78](a1, a2);
  v5 = v4;
  v6 = (uint64_t)v3;
  v7 = 0;
  v47 = *MEMORY[0x1E0C80C00];
  v8 = *v2;
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  *(_OWORD *)v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  memset(v17, 0, sizeof(v17));
  v9 = *(_QWORD *)(v8 + 56);
  v10 = *v3;
  if (!*((_QWORD *)v3 + 12))
  {
    if (*(_QWORD *)(v4 + 72))
      v7 = 0;
    else
      v7 = *(float *)(v4 + 4) >= 1.0;
  }
  v43 = 0;
  memset(v42, 0, sizeof(v42));
  v11 = *(_DWORD *)(v9 + 16 * v10 + 8 * v7 + 4 * (*((_QWORD *)v3 + 6) == 0));
  if (v11 > 27)
    return 0xFFFFFFFFLL;
  if (*((int *)v3 + 1) < 1 || *((int *)v3 + 2) < 1)
    return 0;
  if ((int)_blt_shade_initialize((uint64_t)v3, v4, (uint64_t)v17, (uint64_t)v42) < 1)
    return 0xFFFFFFFFLL;
  if (v11 >= 24 && *(_DWORD *)v8 == 134755208)
    v11 += 4;
  if ((*(_DWORD *)v5 & 0xF000000) == 0x3000000)
  {
    if (*(_QWORD *)(v5 + 16))
    {
      v14 = RGBA32_shade_radial_RGB;
    }
    else if (*(_QWORD *)(v5 + 24))
    {
      v14 = RGBA32_shade_conic_RGB;
    }
    else if (*((uint64_t *)&v19 + 1) < 2)
    {
      v14 = RGBA32_shade_axial_RGB;
    }
    else
    {
      v14 = RGBA32_shade_custom_RGB;
    }
    *(_QWORD *)&v17[0] = v14;
    if ((_QWORD)v40)
    {
      *((_QWORD *)&v39 + 1) = v46;
      _blt_shade_samples_16((uint64_t)v46, 2, 3, (float *)v40, *((float **)&v40 + 1), 1uLL);
    }
    v15 = *((_QWORD *)&v19 + 1) * v19;
    if ((uint64_t)(*((_QWORD *)&v19 + 1) * v19) <= 480)
    {
      v16 = v44;
      v38[1] = v44;
LABEL_30:
      _blt_shade_samples_16((uint64_t)v16, 2, 3, (float *)v18, *((float **)&v18 + 1), v15);
      if (*(_BYTE *)(v5 + 1))
        *(_QWORD *)&v39 = &_blt_shade_samples_noise;
      goto LABEL_32;
    }
    v16 = malloc_type_malloc(8 * v15 + 32, 0xE83E6668uLL);
    if (v16)
    {
      v38[1] = v16;
      v15 = *((_QWORD *)&v19 + 1) * v19;
      goto LABEL_30;
    }
    return 0xFFFFFFFFLL;
  }
  if (!*(_QWORD *)&v17[0])
    return 0xFFFFFFFFLL;
LABEL_32:
  DWORD2(v17[0]) = *(_DWORD *)v8;
  HIDWORD(v17[0]) = DWORD2(v17[0]);
  argb32_image_mark(v6, (uint64_t)v17, v11, v13);
  if (v38[1] && (v38[1] < v44 || &v45 < v38[1]))
    free(v38[1]);
  return 1;
}

uint64_t _blt_shade_initialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float v19;
  double v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  unsigned int v28;
  double v29;
  double v30;
  float *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  float *v41;
  float v42;
  double v43;
  float v44;
  float v45;
  double v46;
  double v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  int8x16_t v53;
  int64x2_t v54;
  int v55;
  uint64_t v56;
  __int128 v57;
  float v58;
  float v59;

  v4 = *(float **)(a2 + 40);
  v5 = *v4;
  v6 = v4[1];
  v7 = v4[2];
  v8 = v4[3];
  v9 = v5 * v8 - v6 * v7;
  if (v9 == 0.0)
    return 0xFFFFFFFFLL;
  v11 = v4[5];
  v12 = v4[4];
  v13 = 1.0 / v9;
  *(_QWORD *)(a3 + 272) = &_blt_shade_constants;
  v14 = v13 * v5;
  v15 = v13 * v6;
  v20 = v13 * v7;
  v16 = v13 * v8;
  v17 = v20 * v11 - v16 * v12;
  v18 = v15 * v12 - v14 * v11;
  *(float *)&v12 = v16;
  *(_DWORD *)(a3 + 280) = LODWORD(v12);
  v19 = v15;
  *(float *)(a3 + 284) = -v19;
  *(float *)&v20 = v20;
  *(float *)(a3 + 288) = -*(float *)&v20;
  v21 = v14;
  *(float *)(a3 + 292) = v21;
  v22 = v17;
  *(float *)(a3 + 296) = v22;
  v23 = v18;
  *(float *)(a3 + 300) = v23;
  v10 = 0xFFFFFFFFLL;
  if (fabsf(*(float *)&v12) == INFINITY
    || fabsf(v19) == INFINITY
    || fabsf(*(float *)&v20) == INFINITY
    || fabsf(v21) == INFINITY
    || fabsf(v22) == INFINITY
    || fabsf(v23) == INFINITY)
  {
    return v10;
  }
  v24 = *(_QWORD *)(a2 + 32);
  if (v24)
  {
    v25 = *(float *)v24;
    *(_DWORD *)(a3 + 304) = *(_DWORD *)v24;
    v26 = *(float *)(v24 + 4);
    *(float *)(a3 + 308) = v26;
    *(_DWORD *)(a3 + 312) = *(_DWORD *)(v24 + 8);
    v27 = *(float *)(v24 + 12);
  }
  else
  {
    *(_DWORD *)(a3 + 312) = 0;
    *(_QWORD *)(a3 + 304) = 0x3F80000000000000;
    v25 = 0.0;
    v26 = 1.0;
    v27 = 1.0;
  }
  *(float *)(a3 + 316) = v27;
  *(_QWORD *)(a3 + 360) = 0;
  v28 = *(_DWORD *)(a2 + 48);
  v29 = (double)v28;
  LODWORD(v20) = *(_DWORD *)(a2 + 52);
  v30 = (double)*(unint64_t *)&v20;
  v31 = *(float **)(a2 + 56);
  if (v31)
  {
    v32 = (v29 + -0.00390625) / (float)(v31[1] - *v31);
    *(float *)(a3 + 344) = v32;
    v33 = *v31;
    *(float *)(a3 + 336) = *v31;
    *(float *)(a3 + 340) = v31[1];
    v34 = (v30 + -0.00390625) / (float)(v31[3] - v31[2]);
    *(float *)(a3 + 356) = v34;
    *(float *)(a3 + 348) = v31[2];
    v35 = v31[3];
  }
  else
  {
    *(_DWORD *)(a3 + 348) = 0;
    v32 = v29 + -0.00390625;
    *(float *)(a3 + 344) = v32;
    *(_QWORD *)(a3 + 336) = 0x3F80000000000000;
    v36 = v30 + -0.00390625;
    *(float *)(a3 + 356) = v36;
    v35 = 1.0;
    v33 = 0.0;
  }
  *(float *)(a3 + 352) = v35;
  *(_QWORD *)(a3 + 328) = -1;
  if ((*(_BYTE *)(a2 + 3) & 0x10) == 0)
  {
    v37 = -1;
LABEL_20:
    *(_DWORD *)(a3 + 320) = v37;
    goto LABEL_22;
  }
  v38 = vcvtms_s32_f32(v32 * (float)(v25 - v33));
  *(_DWORD *)(a3 + 320) = v38;
  if ((v38 & 0x80000000) == 0)
  {
    if (v28 > v38)
      goto LABEL_22;
    v37 = v28 - 1;
    goto LABEL_20;
  }
  *(_DWORD *)(a3 + 320) = 0;
LABEL_22:
  if ((*(_BYTE *)(a2 + 3) & 0x20) == 0)
  {
    v39 = -1;
LABEL_27:
    *(_DWORD *)(a3 + 324) = v39;
    goto LABEL_29;
  }
  v40 = vcvtps_s32_f32(v32 * (float)(v26 - v33));
  *(_DWORD *)(a3 + 324) = v40;
  if ((v40 & 0x80000000) != 0)
  {
    *(_DWORD *)(a3 + 324) = 0;
    goto LABEL_29;
  }
  if (v28 <= v40)
  {
    v39 = v28 - 1;
    goto LABEL_27;
  }
LABEL_29:
  *(_OWORD *)(a3 + 384) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a3 + 376) = 0;
  v41 = *(float **)(a2 + 16);
  if (!v41)
  {
    a4 = 0;
LABEL_55:
    *(_QWORD *)(a3 + 360) = 0;
    *(_QWORD *)(a3 + 368) = 0;
    *(_WORD *)(a3 + 22) = 2056;
    v53 = (int8x16_t)vdupq_n_s64(0x80uLL);
    *(int8x16_t *)(a3 + 96) = vorrq_s8((int8x16_t)vshll_n_s32(*(int32x2_t *)(a1 + 56), 8uLL), v53);
    *(_OWORD *)(a3 + 208) = xmmword_185004CA0;
    *(_OWORD *)(a3 + 224) = xmmword_185004CB0;
    *(_QWORD *)(a3 + 120) = 0;
    *(_QWORD *)(a3 + 128) = 0;
    *(_OWORD *)(a3 + 192) = xmmword_185004CC0;
    v54 = vaddq_s64(vshll_n_s32(*(int32x2_t *)(a1 + 64), 8uLL), vdupq_n_s64(0xFFFFFFFFFFFFFF80));
    *(_QWORD *)(a3 + 400) = a4;
    *(_QWORD *)(a3 + 136) = 256;
    *(_QWORD *)(a3 + 112) = 256;
    *(int8x16_t *)(a3 + 64) = v53;
    *(int64x2_t *)(a3 + 80) = v54;
    if (*(unsigned __int8 *)(a2 + 2) << 16)
      v55 = 0;
    else
      v55 = 0x3FFFFFFF;
    *(_DWORD *)(a3 + 188) = v55;
    *(_DWORD *)(a3 + 20) = 134742016;
    v56 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)&v57 = v56;
    *((_QWORD *)&v57 + 1) = HIDWORD(v56);
    *(_QWORD *)(a3 + 24) = *(_QWORD *)(a1 + 76);
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(a1 + 88);
    *(_OWORD *)(a3 + 48) = v57;
    v58 = *(float *)(a2 + 4);
    *(float *)(a3 + 184) = v58;
    v59 = 0.0;
    if (v58 < 0.0 || (v59 = 1.0, v58 > 1.0))
      *(float *)(a3 + 184) = v59;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 160) = 0u;
    *(_QWORD *)(a3 + 176) = 0;
    v10 = 1;
    *(_QWORD *)(a3 + 240) = 0;
    *(_QWORD *)(a3 + 248) = 0;
    return v10;
  }
  v42 = *v41;
  v43 = *v41;
  *(float *)a4 = *v41;
  v44 = *(float *)(*(_QWORD *)(a2 + 16) + 8);
  *(float *)(a4 + 4) = v44;
  v45 = *(float *)(*(_QWORD *)(a2 + 16) + 4);
  *(float *)(a4 + 8) = v45;
  v46 = v44 - v43;
  v47 = v45 * v45 - v46 * v46;
  v48 = v47;
  v49 = v43 * -2.0 * v46;
  *(float *)(a4 + 20) = v48;
  *(float *)(a4 + 24) = v49;
  *(float *)(a4 + 28) = v42 * v42;
  if (v47 == 0.0)
    v50 = 0.0;
  else
    v50 = 1.0 / (v47 + v47);
  *(float *)(a4 + 32) = v50;
  if (!(*(_DWORD *)a2 >> 28))
  {
    *(_QWORD *)(a4 + 12) = 0x3F80000000000000;
    goto LABEL_55;
  }
  if (v42 >= v44)
  {
    if (v42 <= v44)
      v52 = 3.4028e38;
    else
      v52 = 1.0 - v44 / v46;
    v51 = -3.4028e38;
  }
  else
  {
    v51 = -v43 / v46;
    v52 = 3.4028e38;
  }
  if ((*(_DWORD *)a2 & 0x10000000) == 0)
    v51 = 0.0;
  *(float *)(a4 + 12) = v51;
  if ((*(_DWORD *)a2 & 0x20000000) == 0)
    v52 = 1.0;
  *(float *)(a4 + 16) = v52;
  v10 = 0xFFFFFFFFLL;
  if (fabsf(v50) != INFINITY
    && fabsf(v48) != INFINITY
    && fabsf(v42) != INFINITY
    && fabsf(v44) != INFINITY
    && fabsf(v45) != INFINITY
    && fabsf(v51) != INFINITY
    && fabsf(v52) != INFINITY
    && fabsf(v49) != INFINITY
    && fabsf(v42 * v42) != INFINITY)
  {
    goto LABEL_55;
  }
  return v10;
}

uint64_t _blt_shade_samples_16(uint64_t result, int a2, int a3, float *a4, float *a5, unint64_t a6)
{
  float v6;
  unsigned int v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  BOOL v14;
  float v15;
  float v16;
  float v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *i;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  _WORD *v26;
  unsigned int v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  unint64_t v40;
  uint64_t v41;
  float v42;
  int v43;
  uint64_t v44;

  v6 = 65535.0;
  if (a2 == 2)
    v6 = 65280.0;
  if (a2 == 1)
    v6 = 7936.0;
  switch(a3)
  {
    case 1:
      if (!a6)
        return result;
      v19 = 0;
      for (i = (_WORD *)(result + 2); ; i += 2)
      {
        v21 = a4[v19];
        if (!a5)
          goto LABEL_36;
        v22 = *a5++;
        v23 = v22;
        if (v22 >= 0.0)
          break;
        *(_DWORD *)(i - 1) = 0;
LABEL_42:
        if (a6 <= ++v19)
          return result;
      }
      if (v23 <= 1.0)
        v24 = v6 * v23;
      else
LABEL_36:
        v24 = v6;
      v25 = 1.0;
      if (v21 <= 1.0)
      {
        v25 = a4[v19];
        if (v21 < 0.0)
          v25 = 0.0;
      }
      *(i - 1) = (int)(float)((float)(v25 * v24) + 0.5);
      *i = (int)(float)(v24 + 0.5);
      goto LABEL_42;
    case 4:
      if (!a6)
        return result;
      v26 = (_WORD *)(result + 4);
      v27 = 1;
      while (1)
      {
        v29 = *a4;
        v28 = a4[1];
        v31 = a4[2];
        v30 = a4[3];
        if (!a5)
          break;
        v32 = *a5++;
        v33 = v32;
        if (v32 >= 0.0)
        {
          v14 = v33 <= 1.0;
          v34 = v6 * v33;
          if (!v14)
            v34 = v6;
          goto LABEL_52;
        }
        *(_QWORD *)(v26 - 2) = 0;
LABEL_70:
        v40 = v27++;
        v26 += 5;
        a4 += 4;
        if (v40 >= a6)
          return result;
      }
      v34 = v6;
LABEL_52:
      if (v29 < 0.0)
        v35 = 0.0;
      else
        v35 = *a4;
      if (v29 <= 1.0)
        v36 = v35;
      else
        v36 = 1.0;
      if (v28 < 0.0)
        v37 = 0.0;
      else
        v37 = a4[1];
      if (v28 > 1.0)
        v37 = 1.0;
      v38 = 1.0;
      v39 = 1.0;
      if (v31 <= 1.0)
      {
        v39 = a4[2];
        if (v31 < 0.0)
          v39 = 0.0;
      }
      if (v30 <= 1.0)
      {
        v38 = a4[3];
        if (v30 < 0.0)
          v38 = 0.0;
      }
      *(v26 - 2) = (int)(float)((float)(v36 * v34) + 0.5);
      *(v26 - 1) = (int)(float)((float)(v37 * v34) + 0.5);
      *v26 = (int)(float)((float)(v39 * v34) + 0.5);
      v26[1] = (int)(float)((float)(v38 * v34) + 0.5);
      v26[2] = (int)(float)(v34 + 0.5);
      goto LABEL_70;
    case 3:
      if (a6)
      {
        v7 = 1;
        while (1)
        {
          v9 = *a4;
          v8 = a4[1];
          v10 = a4[2];
          if (!a5)
            break;
          v11 = *a5++;
          v12 = v11;
          if (v11 >= 0.0)
          {
            v14 = v12 <= 1.0;
            v13 = v6 * v12;
            if (!v14)
              v13 = v6;
            goto LABEL_16;
          }
          *(_QWORD *)result = 0;
LABEL_28:
          result += 8;
          v18 = v7++;
          a4 += 3;
          if (v18 >= a6)
            return result;
        }
        v13 = v6;
LABEL_16:
        if (v9 < 0.0)
          v15 = 0.0;
        else
          v15 = *a4;
        if (v9 > 1.0)
          v15 = 1.0;
        v16 = 1.0;
        v17 = 1.0;
        if (v8 <= 1.0)
        {
          v17 = a4[1];
          if (v8 < 0.0)
            v17 = 0.0;
        }
        if (v10 <= 1.0)
        {
          v16 = a4[2];
          if (v10 < 0.0)
            v16 = 0.0;
        }
        *(_WORD *)result = (int)(float)((float)(v15 * v13) + 0.5);
        *(_WORD *)(result + 2) = (int)(float)((float)(v17 * v13) + 0.5);
        *(_WORD *)(result + 4) = (int)(float)((float)(v16 * v13) + 0.5);
        *(_WORD *)(result + 6) = (int)(float)(v13 + 0.5);
        goto LABEL_28;
      }
      break;
    default:
      if (a5)
      {
        if (a6)
        {
          v41 = 0;
          do
          {
            v42 = a5[v41];
            if (v42 >= 0.0)
            {
              v43 = (int)v6;
              if (v42 <= 1.0)
                v43 = (int)(float)((float)(v42 * v6) + 0.5);
            }
            else
            {
              LOWORD(v43) = 0;
            }
            *(_WORD *)(result + 2 * v41++) = v43;
          }
          while (a6 > v41);
        }
      }
      else if (a6)
      {
        v44 = 0;
        do
          *(_WORD *)(result + 2 * v44++) = (int)v6;
        while (a6 > v44);
      }
      break;
  }
  return result;
}

BOOL CGImageIsMask(CGImageRef image)
{
  if (image)
    LODWORD(image) = (*((unsigned __int8 *)image + 39) >> 1) & 1;
  return (char)image;
}

BOOL CGColorSpaceUsesExtendedRange(CGColorSpaceRef space)
{
  if (space)
    LOBYTE(space) = *(_BYTE *)(*((_QWORD *)space + 3) + 13) != 0;
  return (char)space;
}

CFTypeID CGColorGetTypeID(void)
{
  if (kCGColorComponents_block_invoke_once != -1)
    dispatch_once(&kCGColorComponents_block_invoke_once, &__block_literal_global_24_2179);
  return CGColorGetTypeID_color_type_id;
}

uint64_t CGPatternGetImage(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)(result + 20) || !*(_BYTE *)(result + 184))
      return 0;
    else
      return *(_QWORD *)(result + 80);
  }
  return result;
}

uint64_t CGImageBlockGetBytesPerRow(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 40);
  return result;
}

CFStringRef CGColorSpaceGetName(CFStringRef space)
{
  if (space)
    return *(CFStringRef *)(space->length + 72);
  return space;
}

CGFontRef CGFontRetain(CGFontRef font)
{
  if (font)
    CFRetain(font);
  return font;
}

BOOL CGAffineTransformIsIdentity(CGAffineTransform *t)
{
  return t->a == 1.0 && t->b == 0.0 && t->c == 0.0 && t->d == 1.0 && t->tx == 0.0 && t->ty == 0.0;
}

void CGContextSetTextPosition(CGContextRef c, CGFloat x, CGFloat y)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (c && *((_DWORD *)c + 4) == 1129601108)
  {
    *((CGFloat *)c + 19) = x;
    *((CGFloat *)c + 20) = y;
  }
  else
  {
    handle_invalid_context((char)"CGContextSetTextPosition", (uint64_t)c, v3, v4, v5, v6, v7, v8);
  }
}

uint64_t CGDataProviderGetSizeOfData(uint64_t a1)
{
  if (a1)
    return *(_QWORD *)(a1 + 32);
  else
    return -1;
}

uint64_t CGSReleaseRegion(const void *a1)
{
  if (a1)
    CFRelease(a1);
  return 0;
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  float64x2_t v4;
  __int128 v5;

  v4 = vmulq_n_f64(*(float64x2_t *)&t->c, sy);
  *(float64x2_t *)&t->a = vmulq_n_f64(*(float64x2_t *)&t->a, sx);
  *(float64x2_t *)&t->c = v4;
  v5 = *(_OWORD *)&t->tx;
  *(_OWORD *)&retstr->c = *(_OWORD *)&t->c;
  *(_OWORD *)&retstr->tx = v5;
  *(_OWORD *)&retstr->a = *(_OWORD *)&t->a;
  return t;
}

BOOL CGAffineTransformEqualToTransform(CGAffineTransform *t1, CGAffineTransform *t2)
{
  return t1->a == t2->a && t1->b == t2->b && t1->c == t2->c && t1->d == t2->d && t1->tx == t2->tx && t1->ty == t2->ty;
}

void rgba32_mark_constmask(uint64_t a1, int a2)
{
  int v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64x2_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned __int8 v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  unsigned int v99;
  unint64_t v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  unint64_t v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  unsigned int v125;
  int v126;
  unsigned int v127;
  int v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int *v131;
  unsigned int *v132;
  unsigned int v133;
  int v134;
  int v135;
  unsigned int v136;
  int v137;
  unsigned int v138;
  _DWORD *v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  unsigned int v143;
  int v144;
  BOOL v145;
  unint64_t v146;
  uint64_t v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int32x4_t v153;
  int v154;
  int v155;

  v5 = *(_DWORD *)(a1 + 4);
  v4 = *(_DWORD *)(a1 + 8);
  v6 = *(int *)(a1 + 28);
  v7 = *(_QWORD *)(a1 + 48);
  v152 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 136);
  v9 = **(_DWORD **)(a1 + 88);
  pthread_mutex_lock(&rgba32_cacheColorLock);
  v10 = rgba32_cacheColor;
  v155 = v4;
  if (!rgba32_cacheColor || *(_DWORD *)(rgba32_cacheColor + 16) != v9)
  {
    v13 = 0;
    while (1)
    {
      if (!v10)
        goto LABEL_9;
      v14 = (_QWORD *)v13;
      v13 = v10;
      if (*(_DWORD *)(v10 + 16) == v9)
        break;
      v10 = *(_QWORD *)v10;
      if (!*(_QWORD *)v13)
      {
        if (rgba32_cacheColorCount > 6)
        {
          *v14 = 0;
        }
        else
        {
LABEL_9:
          v15 = (char *)rgba32_cacheColorBase;
          if (rgba32_cacheColorBase)
          {
            v16 = rgba32_cacheColorCount;
          }
          else
          {
            v15 = (char *)malloc_type_calloc(1uLL, 0x1CA8uLL, 0x10200408056D5EBuLL);
            v16 = 0;
            rgba32_cacheColorBase = (uint64_t)v15;
          }
          v13 = (uint64_t)&v15[24 * v16];
          *(_QWORD *)(v13 + 8) = &v15[1024 * (unint64_t)v16 + 168];
          rgba32_cacheColorCount = v16 + 1;
        }
        v17 = 0;
        *(_QWORD *)v13 = rgba32_cacheColor;
        rgba32_cacheColor = v13;
        *(_DWORD *)(v13 + 16) = v9;
        v19 = *(_QWORD *)(v13 + 8);
        v12 = v13 + 8;
        v18 = v19;
        do
        {
          *(_DWORD *)(v18 + 4 * v17) = PDM_19476(v9, v17);
          ++v17;
        }
        while ((_DWORD)v17 != 256);
        pthread_mutex_unlock(&rgba32_cacheColorLock);
        goto LABEL_20;
      }
    }
    if (v14)
    {
      *v14 = *(_QWORD *)v10;
      *(_QWORD *)v10 = rgba32_cacheColor;
      rgba32_cacheColor = v10;
    }
  }
  pthread_mutex_unlock(&rgba32_cacheColorLock);
  v12 = v10 + 8;
LABEL_20:
  if (!v8)
    return;
  v20 = v5;
  v21 = *(_QWORD *)v12;
  v22 = *(_DWORD *)(*(_QWORD *)v12 + 1020);
  v23 = v6 >> 2;
  v24 = (unsigned int *)(v152 + 4 * (*(int *)(a1 + 12) + (v6 >> 2) * *(int *)(a1 + 16)));
  v25 = *(int *)(a1 + 124);
  v26 = v8 + *(int *)(a1 + 104) + *(int *)(a1 + 108) * (uint64_t)(int)v25;
  v27 = v25 - v5;
  v28 = v23 - v5;
  switch(a2)
  {
    case 0:
      do
      {
        v29 = v5;
        do
        {
          v30 = *(unsigned __int8 *)v26;
          if (*(_BYTE *)v26)
          {
            if (v30 == 255)
              v31 = 0;
            else
              v31 = PDM_19476(*v24, v30 ^ 0xFFu);
            *v24 = v31;
          }
          ++v26;
          ++v24;
          --v29;
        }
        while (v29);
        v26 += v27;
        v24 += v28;
        --v155;
      }
      while (v155);
      return;
    case 1:
      v91 = -1;
      v92 = v26 & 3;
      if ((v26 & 3) != 0)
      {
        v20 = v92 + v5;
        v91 = -1 << (8 * v92);
        v93 = v26 & 3;
        v26 &= 0xFFFFFFFFFFFFFFFCLL;
        v24 -= v93;
      }
      v94 = v23 - v5;
      if ((((_BYTE)v20 + (_BYTE)v26) & 3) != 0)
      {
        v95 = 4 - (((_BYTE)v20 + (_BYTE)v26) & 3);
        v92 += v95;
        v96 = 0xFFFFFFFF >> (8 * v95);
        if (v20 >= 4)
          v97 = v96;
        else
          v97 = 0;
        if (v20 >= 4)
          v96 = -1;
        v91 &= v96;
      }
      else
      {
        v97 = 0;
      }
      v150 = v27 - v92;
      v148 = v20 >> 2;
      v153 = vdupq_n_s32(v22);
      v146 = v94 - v92;
      do
      {
        v127 = *(_DWORD *)v26 & v91;
        v128 = v148;
        v129 = v97;
        if (!v127)
          goto LABEL_375;
LABEL_357:
        if (v127 == -1)
        {
          *(int32x4_t *)v24 = v153;
          goto LABEL_375;
        }
        while (1)
        {
          if ((_BYTE)v127)
          {
            if (v127 == 255)
              *v24 = v22;
            else
              DplusDM_19478(v24, *(_DWORD *)(v21 + 4 * v127), *v24, ~(_BYTE)v127);
          }
          if (BYTE1(v127))
          {
            v130 = v24 + 1;
            if (BYTE1(v127) == 255)
              *v130 = v22;
            else
              DplusDM_19478(v130, *(_DWORD *)(v21 + 4 * BYTE1(v127)), *v130, ~(v127 >> 8));
          }
          if (BYTE2(v127))
          {
            v131 = v24 + 2;
            if (BYTE2(v127) == 255)
              *v131 = v22;
            else
              DplusDM_19478(v131, *(_DWORD *)(v21 + 4 * BYTE2(v127)), *v131, ~HIWORD(v127));
          }
          v132 = v24 + 3;
          v133 = HIBYTE(v127);
          if (HIBYTE(v127) == 255)
          {
            *v132 = v22;
          }
          else if (v133)
          {
            DplusDM_19478(v132, *(_DWORD *)(v21 + 4 * v133), *v132, ~v127 >> 24);
          }
LABEL_375:
          while (1)
          {
            v134 = v128;
            v24 += 4;
            --v128;
            v26 += 4;
            if (v134 < 2)
              break;
            v127 = *(_DWORD *)v26;
            if (*(_DWORD *)v26)
              goto LABEL_357;
          }
          if (!v129)
            break;
          v129 = 0;
          v127 = *(_DWORD *)v26 & v97;
        }
        v26 += v150;
        v24 += v146;
        --v155;
      }
      while (v155);
      return;
    case 2:
      v98 = -1;
      v99 = v26 & 3;
      if ((v26 & 3) != 0)
      {
        v20 = v99 + v5;
        v98 = -1 << (8 * v99);
        v100 = v26 & 3;
        v26 &= 0xFFFFFFFFFFFFFFFCLL;
        v24 -= v100;
      }
      if ((((_BYTE)v20 + (_BYTE)v26) & 3) != 0)
      {
        v101 = 4 - (((_BYTE)v20 + (_BYTE)v26) & 3);
        v99 += v101;
        v102 = 0xFFFFFFFF >> (8 * v101);
        if (v20 >= 4)
          v103 = v102;
        else
          v103 = 0;
        if (v20 >= 4)
          v102 = -1;
        v98 &= v102;
      }
      else
      {
        v103 = 0;
      }
      v151 = v27 - v99;
      v149 = v20 >> 2;
      v135 = ~(_BYTE)v22;
      v147 = v23 - v5 - v99;
      v154 = v98;
      while (2)
      {
        v136 = *(_DWORD *)v26 & v98;
        v137 = v149;
        v138 = v103;
        if (!v136)
          goto LABEL_396;
LABEL_385:
        if (v136 == -1)
        {
          DplusDM_19478(v24, v22, *v24, v135);
          DplusDM_19478(v24 + 1, v22, v24[1], v135);
          DplusDM_19478(v24 + 2, v22, v24[2], v135);
          v139 = v24 + 3;
          v140 = v24[3];
          v141 = v22;
          v142 = ~(_BYTE)v22;
LABEL_395:
          DplusDM_19478(v139, v141, v140, v142);
          goto LABEL_396;
        }
        while (1)
        {
          if ((_BYTE)v136)
            DplusDM_19478(v24, *(_DWORD *)(v21 + 4 * v136), *v24, ~*(_BYTE *)(v21 + 4 * v136));
          if ((v136 & 0xFF00) != 0)
            DplusDM_19478(v24 + 1, *(_DWORD *)(v21 + 4 * BYTE1(v136)), v24[1], ~*(_BYTE *)(v21 + 4 * BYTE1(v136)));
          if ((v136 & 0xFF0000) != 0)
            DplusDM_19478(v24 + 2, *(_DWORD *)(v21 + 4 * BYTE2(v136)), v24[2], ~*(_BYTE *)(v21 + 4 * BYTE2(v136)));
          v143 = HIBYTE(v136);
          if (HIBYTE(v136))
          {
            v141 = *(_DWORD *)(v21 + 4 * v143);
            v139 = v24 + 3;
            v140 = v24[3];
            v142 = ~*(_BYTE *)(v21 + 4 * v143);
            goto LABEL_395;
          }
LABEL_396:
          while (1)
          {
            v144 = v137;
            v24 += 4;
            --v137;
            v26 += 4;
            if (v144 < 2)
              break;
            v136 = *(_DWORD *)v26;
            if (*(_DWORD *)v26)
              goto LABEL_385;
          }
          if (!v138)
            break;
          v138 = 0;
          v136 = *(_DWORD *)v26 & v103;
        }
        v26 += v151;
        v24 += v147;
        v145 = v155-- == 1;
        v98 = v154;
        if (!v145)
          continue;
        return;
      }
    case 3:
      do
      {
        v104 = v5;
        do
        {
          v105 = *(unsigned __int8 *)v26;
          if (*(_BYTE *)v26)
          {
            if (v105 == 255)
            {
              *v24 = *(_DWORD *)(v21 + 4 * *(unsigned __int8 *)v24);
            }
            else
            {
              v106 = *v24 * v105 + 128;
              DplusDM_19478(v24, *(_DWORD *)(v21 + 4 * ((v106 + (v106 >> 8)) >> 8)), *v24, v105 ^ 0xFF);
            }
          }
          ++v26;
          ++v24;
          --v104;
        }
        while (v104);
        v26 += v27;
        v24 += v28;
        --v155;
      }
      while (v155);
      return;
    case 4:
      do
      {
        v107 = v5;
        do
        {
          v108 = *(unsigned __int8 *)v26;
          if (*(_BYTE *)v26)
          {
            if (v108 == 255)
              *v24 = *(_DWORD *)(v21 + 4 * ~*(_BYTE *)v24);
            else
              DplusDM_19478(v24, *(_DWORD *)(v21+ 4* ((~*(_BYTE *)v24 * v108+ 128+ ((~*(_BYTE *)v24 * v108 + 128) >> 8)) >> 8)), *v24, v108 ^ 0xFF);
          }
          ++v26;
          ++v24;
          --v107;
        }
        while (v107);
        v26 += v27;
        v24 += v28;
        --v155;
      }
      while (v155);
      return;
    case 5:
      do
      {
        v109 = v5;
        do
        {
          if (*(_BYTE *)v26)
            DMplusDM_19477(v24, *(_DWORD *)(v21 + 4 * *(unsigned __int8 *)v26), *v24, *v24, ~*(_BYTE *)(v21 + 4 * *(unsigned __int8 *)v26));
          ++v26;
          ++v24;
          --v109;
        }
        while (v109);
        v26 += v27;
        v24 += v28;
        --v155;
      }
      while (v155);
      return;
    case 6:
      do
      {
        v110 = v5;
        do
        {
          v111 = *(unsigned __int8 *)v26;
          if (*(_BYTE *)v26 && *v24 != 0xFF)
          {
            if (~*(_BYTE *)v24 == 255)
              *v24 = *(_DWORD *)(v21 + 4 * v111);
            else
              DplusDM_19478(v24, *v24, *(_DWORD *)(v21 + 4 * v111), ~*(_BYTE *)v24);
          }
          ++v26;
          ++v24;
          --v110;
        }
        while (v110);
        v26 += v27;
        v24 += v28;
        --v155;
      }
      while (v155);
      return;
    case 7:
      do
      {
        v112 = v5;
        do
        {
          v113 = *(unsigned __int8 *)v26;
          if (*(_BYTE *)v26)
          {
            if (v113 == 255)
              v114 = v22;
            else
              v114 = (~(_BYTE)v113
                                     + ((unsigned __int16)(v22 * (_WORD)v113
                                                         + 128
                                                         + ((v22 * v113 + 128) >> 8)) >> 8));
            *v24 = PDM_19476(*v24, v114);
          }
          ++v26;
          ++v24;
          --v112;
        }
        while (v112);
        v26 += v27;
        v24 += v28;
        --v155;
      }
      while (v155);
      return;
    case 8:
      v115 = v22;
      v116 = ~(_BYTE)v22;
      do
      {
        v117 = v28;
        v118 = v5;
        do
        {
          v119 = *(unsigned __int8 *)v26;
          if (*(_BYTE *)v26)
          {
            if (v119 == 255)
              v120 = v116;
            else
              v120 = ~((v115 * v119 + 128 + ((v115 * v119 + 128) >> 8)) >> 8);
            *v24 = PDM_19476(*v24, v120);
          }
          ++v26;
          ++v24;
          --v118;
        }
        while (v118);
        v26 += v27;
        v28 = v117;
        v24 += v117;
        --v155;
      }
      while (v155);
      return;
    case 9:
      do
      {
        v121 = v5;
        do
        {
          if (*(_BYTE *)v26)
            DMplusDM_19477(v24, *(_DWORD *)(v21 + 4 * *(unsigned __int8 *)v26), ~*(_BYTE *)v24, *v24, (*(_DWORD *)(v21 + 4 * *(unsigned __int8 *)v26) + ~*(_BYTE *)v26));
          ++v26;
          ++v24;
          --v121;
        }
        while (v121);
        v26 += v27;
        v24 += v28;
        --v155;
      }
      while (v155);
      return;
    case 10:
      do
      {
        v122 = v5;
        do
        {
          if (*(_BYTE *)v26)
            DMplusDM_19477(v24, *(_DWORD *)(v21 + 4 * *(unsigned __int8 *)v26), ~*(_BYTE *)v24, *v24, ~*(_BYTE *)(v21 + 4 * *(unsigned __int8 *)v26));
          ++v26;
          ++v24;
          --v122;
        }
        while (v122);
        v26 += v27;
        v24 += v28;
        --v155;
      }
      while (v155);
      return;
    case 11:
      do
      {
        v32 = v5;
        do
        {
          if (*(_BYTE *)v26)
          {
            if (v7)
              v33 = *v24;
            else
              v33 = -1;
            *(int32x2_t *)v11.i8 = DAplusdDA_19479(v24, *v24, v33, *(_DWORD *)(v21 + 4 * *(unsigned __int8 *)v26), *(_DWORD *)(v21 + 4 * *(unsigned __int8 *)v26), v11);
          }
          ++v26;
          ++v24;
          --v32;
        }
        while (v32);
        v26 += v27;
        v24 += v28;
        --v155;
      }
      while (v155);
      return;
    case 12:
      do
      {
        v123 = v5;
        v124 = v155;
        do
        {
          if (*(_BYTE *)v26)
          {
            v125 = *(_DWORD *)(v21 + 4 * *(unsigned __int8 *)v26);
            v126 = ((*v24 >> 8) & 0xFF00FF) + ((v125 >> 8) & 0xFF00FF);
            *v24 = (v126 << 8) & 0xFF00FF00 | ((*v24 & 0xFF00FF) + (v125 & 0xFF00FF)) & 0xFF00FF | (15
                                                                                                  * (v126 & 0x1000100 | (((*v24 & 0xFF00FF) + (v125 & 0xFF00FF)) >> 8) & 0x10001)) | (240 * (v126 & 0x1000100 | (((*v24 & 0xFF00FF) + (v125 & 0xFF00FF)) >> 8) & 0x10001));
          }
          ++v26;
          ++v24;
          --v123;
        }
        while (v123);
        v26 += v27;
        v24 += v28;
        --v155;
      }
      while (v124 != 1);
      return;
    case 13:
      while (1)
      {
        v34 = v5;
        do
        {
          if (*(_BYTE *)v26)
          {
            v35 = *(_DWORD *)(v21 + 4 * *(unsigned __int8 *)v26);
            if ((_BYTE)v35)
            {
              if (v7)
              {
                v36 = *v24;
                if (!*v24)
                  goto LABEL_48;
              }
              else
              {
                LOBYTE(v36) = -1;
              }
              v35 = PDAmultiplyPDA_19480(*v24, v36, v35, v35);
LABEL_48:
              *v24 = v35;
            }
          }
          ++v26;
          ++v24;
          --v34;
        }
        while (v34);
        v26 += v27;
        v24 += v28;
        if (!--v155)
          return;
      }
    case 14:
      while (1)
      {
        v37 = v5;
        do
        {
          if (*(_BYTE *)v26)
          {
            v38 = *(_DWORD *)(v21 + 4 * *(unsigned __int8 *)v26);
            if ((_BYTE)v38)
            {
              if (v7)
              {
                v39 = *v24;
                if (!*v24)
                  goto LABEL_60;
              }
              else
              {
                LOBYTE(v39) = -1;
              }
              v38 = PDAscreenPDA_19481(*v24, v39, v38, v38);
LABEL_60:
              *v24 = v38;
            }
          }
          ++v26;
          ++v24;
          --v37;
        }
        while (v37);
        v26 += v27;
        v24 += v28;
        if (!--v155)
          return;
      }
    case 15:
      while (1)
      {
        v40 = v5;
        do
        {
          if (*(_BYTE *)v26)
          {
            v41 = *(_DWORD *)(v21 + 4 * *(unsigned __int8 *)v26);
            if ((_BYTE)v41)
            {
              if (v7)
              {
                v42 = *v24;
                if (!*v24)
                  goto LABEL_72;
              }
              else
              {
                LOBYTE(v42) = -1;
              }
              v41 = PDAoverlayPDA_19482(*v24, v42, v41, v41);
LABEL_72:
              *v24 = v41;
            }
          }
          ++v26;
          ++v24;
          --v40;
        }
        while (v40);
        v26 += v27;
        v24 += v28;
        if (!--v155)
          return;
      }
    case 16:
      while (1)
      {
        v43 = v5;
        do
        {
          if (*(_BYTE *)v26)
          {
            v44 = *(_DWORD *)(v21 + 4 * *(unsigned __int8 *)v26);
            if ((_BYTE)v44)
            {
              if (v7)
              {
                v45 = *v24;
                if (!*v24)
                  goto LABEL_84;
              }
              else
              {
                LOBYTE(v45) = -1;
              }
              v44 = PDAdarkenPDA_19484(*v24, v45, v44, v44);
LABEL_84:
              *v24 = v44;
            }
          }
          ++v26;
          ++v24;
          --v43;
        }
        while (v43);
        v26 += v27;
        v24 += v28;
        if (!--v155)
          return;
      }
    case 17:
      while (1)
      {
        v46 = v5;
        do
        {
          if (*(_BYTE *)v26)
          {
            v47 = *(_DWORD *)(v21 + 4 * *(unsigned __int8 *)v26);
            if ((_BYTE)v47)
            {
              if (v7)
              {
                v48 = *v24;
                if (!*v24)
                  goto LABEL_96;
              }
              else
              {
                LOBYTE(v48) = -1;
              }
              v47 = PDAlightenPDA_19483(*v24, v48, v47, v47);
LABEL_96:
              *v24 = v47;
            }
          }
          ++v26;
          ++v24;
          --v46;
        }
        while (v46);
        v26 += v27;
        v24 += v28;
        if (!--v155)
          return;
      }
    case 18:
      while (1)
      {
        v49 = v5;
        do
        {
          if (*(_BYTE *)v26)
          {
            v50 = *(_DWORD *)(v21 + 4 * *(unsigned __int8 *)v26);
            if ((_BYTE)v50)
            {
              if (v7)
              {
                v51 = *v24;
                if (!*v24)
                  goto LABEL_108;
              }
              else
              {
                LOBYTE(v51) = -1;
              }
              v50 = PDAcolordodgePDA_19485(*v24, v51, v50, v50);
LABEL_108:
              *v24 = v50;
            }
          }
          ++v26;
          ++v24;
          --v49;
        }
        while (v49);
        v26 += v27;
        v24 += v28;
        if (!--v155)
          return;
      }
    case 19:
      while (1)
      {
        v52 = v5;
        do
        {
          if (*(_BYTE *)v26)
          {
            v53 = *(_DWORD *)(v21 + 4 * *(unsigned __int8 *)v26);
            if ((_BYTE)v53)
            {
              if (v7)
              {
                v54 = *v24;
                if (!*v24)
                  goto LABEL_120;
              }
              else
              {
                LOBYTE(v54) = -1;
              }
              v53 = PDAcolorburnPDA_19486(*v24, v54, v53, v53);
LABEL_120:
              *v24 = v53;
            }
          }
          ++v26;
          ++v24;
          --v52;
        }
        while (v52);
        v26 += v27;
        v24 += v28;
        if (!--v155)
          return;
      }
    case 20:
      while (1)
      {
        v55 = v5;
        do
        {
          if (*(_BYTE *)v26)
          {
            v56 = *(_DWORD *)(v21 + 4 * *(unsigned __int8 *)v26);
            if ((_BYTE)v56)
            {
              if (v7)
              {
                v57 = *v24;
                if (!*v24)
                  goto LABEL_132;
              }
              else
              {
                LOBYTE(v57) = -1;
              }
              v56 = PDAsoftlightPDA_19488(*v24, v57, v56, v56);
LABEL_132:
              *v24 = v56;
            }
          }
          ++v26;
          ++v24;
          --v55;
        }
        while (v55);
        v26 += v27;
        v24 += v28;
        if (!--v155)
          return;
      }
    case 21:
      while (1)
      {
        v58 = v5;
        do
        {
          if (*(_BYTE *)v26)
          {
            v59 = *(_DWORD *)(v21 + 4 * *(unsigned __int8 *)v26);
            if ((_BYTE)v59)
            {
              if (v7)
              {
                v60 = *v24;
                if (!*v24)
                  goto LABEL_144;
              }
              else
              {
                LOBYTE(v60) = -1;
              }
              v59 = PDAhardlightPDA_19487(*v24, v60, v59, v59);
LABEL_144:
              *v24 = v59;
            }
          }
          ++v26;
          ++v24;
          --v58;
        }
        while (v58);
        v26 += v27;
        v24 += v28;
        if (!--v155)
          return;
      }
    case 22:
      while (1)
      {
        v61 = v5;
        do
        {
          if (*(_BYTE *)v26)
          {
            v62 = *(_DWORD *)(v21 + 4 * *(unsigned __int8 *)v26);
            if ((_BYTE)v62)
            {
              if (v7)
              {
                v63 = *v24;
                if (!*v24)
                  goto LABEL_156;
              }
              else
              {
                LOBYTE(v63) = -1;
              }
              v62 = PDAdifferencePDA_19489(*v24, v63, v62, v62);
LABEL_156:
              *v24 = v62;
            }
          }
          ++v26;
          ++v24;
          --v61;
        }
        while (v61);
        v26 += v27;
        v24 += v28;
        if (!--v155)
          return;
      }
    case 23:
      while (1)
      {
        v64 = v5;
        do
        {
          if (*(_BYTE *)v26)
          {
            v65 = *(_DWORD *)(v21 + 4 * *(unsigned __int8 *)v26);
            if ((_BYTE)v65)
            {
              if (v7)
              {
                v66 = *v24;
                if (!*v24)
                  goto LABEL_168;
              }
              else
              {
                LOBYTE(v66) = -1;
              }
              v65 = PDAexclusionPDA_19490(*v24, v66, v65, v65);
LABEL_168:
              *v24 = v65;
            }
          }
          ++v26;
          ++v24;
          --v64;
        }
        while (v64);
        v26 += v27;
        v24 += v28;
        if (!--v155)
          return;
      }
    case 24:
      while (1)
      {
        v67 = v5;
        do
        {
          if (*(_BYTE *)v26)
          {
            v68 = *(_DWORD *)(v21 + 4 * *(unsigned __int8 *)v26);
            if ((_BYTE)v68)
            {
              if (v7)
              {
                v69 = *v24;
                if (!*v24)
                  goto LABEL_180;
              }
              else
              {
                LOBYTE(v69) = -1;
              }
              v68 = PDAhuePDA_19491(*v24, v69, v68, v68);
LABEL_180:
              *v24 = v68;
            }
          }
          ++v26;
          ++v24;
          --v67;
        }
        while (v67);
        v26 += v27;
        v24 += v28;
        if (!--v155)
          return;
      }
    case 25:
      while (1)
      {
        v70 = v5;
        do
        {
          if (*(_BYTE *)v26)
          {
            v71 = *(_DWORD *)(v21 + 4 * *(unsigned __int8 *)v26);
            if ((_BYTE)v71)
            {
              if (v7)
              {
                v72 = *v24;
                if (!*v24)
                  goto LABEL_192;
              }
              else
              {
                LOBYTE(v72) = -1;
              }
              v71 = PDAsaturationPDA_19492(*v24, v72, v71, v71);
LABEL_192:
              *v24 = v71;
            }
          }
          ++v26;
          ++v24;
          --v70;
        }
        while (v70);
        v26 += v27;
        v24 += v28;
        if (!--v155)
          return;
      }
    case 26:
      while (1)
      {
        v73 = v5;
        do
        {
          if (*(_BYTE *)v26)
          {
            v74 = *(_DWORD *)(v21 + 4 * *(unsigned __int8 *)v26);
            if ((_BYTE)v74)
            {
              if (v7)
              {
                v75 = *v24;
                if (!*v24)
                  goto LABEL_204;
              }
              else
              {
                LOBYTE(v75) = -1;
              }
              v74 = PDAluminosityPDA_19493(v74, v74, *v24, v75);
LABEL_204:
              *v24 = v74;
            }
          }
          ++v26;
          ++v24;
          --v73;
        }
        while (v73);
        v26 += v27;
        v24 += v28;
        if (!--v155)
          return;
      }
    case 27:
      while (1)
      {
        v76 = v5;
        do
        {
          if (*(_BYTE *)v26)
          {
            v77 = *(_DWORD *)(v21 + 4 * *(unsigned __int8 *)v26);
            if ((_BYTE)v77)
            {
              if (v7)
              {
                v78 = *v24;
                if (!*v24)
                  goto LABEL_216;
              }
              else
              {
                LOBYTE(v78) = -1;
              }
              v77 = PDAluminosityPDA_19493(*v24, v78, v77, v77);
LABEL_216:
              *v24 = v77;
            }
          }
          ++v26;
          ++v24;
          --v76;
        }
        while (v76);
        v26 += v27;
        v24 += v28;
        if (!--v155)
          return;
      }
    case 28:
      while (1)
      {
        v79 = v5;
        do
        {
          if (*(_BYTE *)v26)
          {
            v80 = *(_DWORD *)(v21 + 4 * *(unsigned __int8 *)v26);
            if ((_BYTE)v80)
            {
              if (v7)
              {
                v81 = *v24;
                if (!*v24)
                  goto LABEL_228;
              }
              else
              {
                LOBYTE(v81) = -1;
              }
              v80 = PDAtranspose_huePDA_19494(*v24, v81, v80, v80);
LABEL_228:
              *v24 = v80;
            }
          }
          ++v26;
          ++v24;
          --v79;
        }
        while (v79);
        v26 += v27;
        v24 += v28;
        if (!--v155)
          return;
      }
    case 29:
      while (1)
      {
        v82 = v5;
        do
        {
          if (*(_BYTE *)v26)
          {
            v83 = *(_DWORD *)(v21 + 4 * *(unsigned __int8 *)v26);
            if ((_BYTE)v83)
            {
              if (v7)
              {
                v84 = *v24;
                if (!*v24)
                  goto LABEL_240;
              }
              else
              {
                LOBYTE(v84) = -1;
              }
              v83 = PDAtranspose_saturationPDA_19495(*v24, v84, v83, v83);
LABEL_240:
              *v24 = v83;
            }
          }
          ++v26;
          ++v24;
          --v82;
        }
        while (v82);
        v26 += v27;
        v24 += v28;
        if (!--v155)
          return;
      }
    case 30:
      while (1)
      {
        v85 = v5;
        do
        {
          if (*(_BYTE *)v26)
          {
            v86 = *(_DWORD *)(v21 + 4 * *(unsigned __int8 *)v26);
            if ((_BYTE)v86)
            {
              if (v7)
              {
                v87 = *v24;
                if (!*v24)
                  goto LABEL_252;
              }
              else
              {
                LOBYTE(v87) = -1;
              }
              v86 = PDAtranspose_luminosityPDA_19496(v86, v86, *v24, v87);
LABEL_252:
              *v24 = v86;
            }
          }
          ++v26;
          ++v24;
          --v85;
        }
        while (v85);
        v26 += v27;
        v24 += v28;
        if (!--v155)
          return;
      }
    case 31:
      break;
    default:
      return;
  }
LABEL_256:
  v88 = v5;
  while (1)
  {
    if (!*(_BYTE *)v26)
      goto LABEL_265;
    v89 = *(_DWORD *)(v21 + 4 * *(unsigned __int8 *)v26);
    if (!(_BYTE)v89)
      goto LABEL_265;
    if (v7)
    {
      v90 = *v24;
      if (!*v24)
        goto LABEL_264;
    }
    else
    {
      LOBYTE(v90) = -1;
    }
    v89 = PDAtranspose_luminosityPDA_19496(*v24, v90, v89, v89);
LABEL_264:
    *v24 = v89;
LABEL_265:
    ++v26;
    ++v24;
    if (!--v88)
    {
      v26 += v27;
      v24 += v28;
      if (!--v155)
        return;
      goto LABEL_256;
    }
  }
}

int CGFontGetCapHeight(CGFontRef font)
{
  _DWORD *font_info;

  font_info = get_font_info(font);
  if (font_info)
    LODWORD(font_info) = font_info[6];
  return (int)font_info;
}

BOOL CGSizeMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGSize *size)
{
  BOOL result;

  if (!dict || !size)
    return 0;
  get_size_from_dict(dict, &size->width);
  return result;
}

uint64_t CGImageBlockSetGetComponentType(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 64);
  return result;
}

void CGContextSetFont(CGContextRef c, CGFontRef font)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGContextRef v8;

  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      CGGStateSetFont(*((_QWORD *)c + 12), font);
      return;
    }
    v8 = c;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetFont", (uint64_t)v8, v2, v3, v4, v5, v6, v7);
}

void CGContextSetFontRenderingStyle(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108)
    {
      CGGStateSetFontRenderingStyle(*(_QWORD *)(a1 + 96), a2);
      return;
    }
    v8 = a1;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetFontRenderingStyle", v8, a3, a4, a5, a6, a7, a8);
}

CGSize CGSizeApplyAffineTransform(CGSize size, CGAffineTransform *t)
{
  CGFloat v2;
  double v3;
  double v4;
  CGSize result;

  v2 = size.height * t->c + t->a * size.width;
  v3 = size.height * t->d + t->b * size.width;
  v4 = v2;
  result.height = v3;
  result.width = v4;
  return result;
}

void CGContextStrokePath(CGContextRef c)
{
  CGContextDrawPath(c, kCGPathStroke);
}

uint64_t CGImageBlockSetGetPixelSize(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 72);
  return result;
}

uint64_t copy_table_tags()
{
  return FPFontCopyTableTags();
}

uint64_t get_glyphs_for_unichars()
{
  return FPFontGetGlyphsForUnichars();
}

CFTypeID CGColorSpaceGetTypeID(void)
{
  if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1)
    dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_77);
  return CGColorSpaceGetTypeID_type_id;
}

CFDictionaryRef CGPointCreateDictionaryRepresentation(CGPoint point)
{
  double y;
  double x;
  __CFDictionary *Mutable;

  y = point.y;
  x = point.x;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  add_number_to_dict(Mutable, CFSTR("X"), x);
  add_number_to_dict(Mutable, CFSTR("Y"), y);
  return Mutable;
}

CFDictionaryRef CGSizeCreateDictionaryRepresentation(CGSize size)
{
  double height;
  double width;
  __CFDictionary *Mutable;

  height = size.height;
  width = size.width;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  add_number_to_dict(Mutable, CFSTR("Width"), width);
  add_number_to_dict(Mutable, CFSTR("Height"), height);
  return Mutable;
}

CFDictionaryRef CGRectCreateDictionaryRepresentation(CGRect a1)
{
  double height;
  double width;
  double y;
  double x;
  __CFDictionary *Mutable;

  height = a1.size.height;
  width = a1.size.width;
  y = a1.origin.y;
  x = a1.origin.x;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  add_number_to_dict(Mutable, CFSTR("X"), x);
  add_number_to_dict(Mutable, CFSTR("Y"), y);
  add_number_to_dict(Mutable, CFSTR("Width"), width);
  add_number_to_dict(Mutable, CFSTR("Height"), height);
  return Mutable;
}

void add_number_to_dict(__CFDictionary *a1, const void *a2, double a3)
{
  CFNumberRef v5;
  double valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

uint64_t CGImageBlockSetGetImageBlock(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (*(_QWORD *)(result + 120) <= a2)
      return 0;
    else
      return *(_QWORD *)(result + 8 * a2 + 128);
  }
  return result;
}

unint64_t *xt_font_cfarray_retain(uint64_t a1, unint64_t *a2)
{
  unint64_t *result;
  unint64_t v3;

  result = a2;
  if (a2)
  {
    do
      v3 = __ldxr(a2);
    while (__stxr(v3 + 1, a2));
  }
  return result;
}

const char **__img_globals_block_invoke()
{
  uint64_t i;
  const char **result;
  char *v2;

  for (i = 0; i != 39; ++i)
  {
    result = (const char **)&_block_invoke_matte_additive;
    switch((int)i)
    {
      case 0:
        v2 = "AAAAAAAA";
        goto LABEL_42;
      case 1:
        v2 = "WWWWWWWW";
        goto LABEL_42;
      case 2:
        v2 = "-RRRRRGGGGGBBBBB";
        goto LABEL_42;
      case 3:
        v2 = "-rrrrrgggggbbbbb";
        goto LABEL_42;
      case 4:
        v2 = "RRRRRRRRGGGGGGGGBBBBBBBB";
        goto LABEL_42;
      case 5:
        v2 = "RRRRRRRRGGGGGGGGBBBBBBBBAAAAAAAA";
        goto LABEL_42;
      case 6:
        v2 = "rrrrrrrrggggggggbbbbbbbbaaaaaaaa";
        goto LABEL_42;
      case 7:
        v2 = "AAAAAAAARRRRRRRRGGGGGGGGBBBBBBBB";
        goto LABEL_42;
      case 8:
        v2 = "aaaaaaaarrrrrrrrggggggggbbbbbbbb";
        goto LABEL_42;
      case 9:
        v2 = "CCCCCCCCMMMMMMMMYYYYYYYYKKKKKKKK";
        goto LABEL_42;
      case 10:
        v2 = "ccccccccmmmmmmmmyyyyyyyykkkkkkkk";
        goto LABEL_42;
      case 11:
        v2 = "WWWWWWWWWWWWWWWW";
        goto LABEL_42;
      case 12:
        v2 = "wwwwwwwwwwwwwwww";
        goto LABEL_42;
      case 13:
        v2 = "RRRRRRRRRRRRRRRRGGGGGGGGGGGGGGGGBBBBBBBBBBBBBBBB";
        goto LABEL_42;
      case 14:
        v2 = "rrrrrrrrrrrrrrrrggggggggggggggggbbbbbbbbbbbbbbbb";
        goto LABEL_42;
      case 15:
        v2 = "RRRRRRRRRRRRRRRRGGGGGGGGGGGGGGGGBBBBBBBBBBBBBBBBAAAAAAAAAAAAAAAA";
        goto LABEL_42;
      case 16:
        v2 = "rrrrrrrrrrrrrrrrggggggggggggggggbbbbbbbbbbbbbbbbaaaaaaaaaaaaaaaa";
        goto LABEL_42;
      case 17:
        v2 = "CCCCCCCCCCCCCCCCMMMMMMMMMMMMMMMMYYYYYYYYYYYYYYYYKKKKKKKKKKKKKKKK";
        goto LABEL_42;
      case 18:
        v2 = "ccccccccccccccccmmmmmmmmmmmmmmmmyyyyyyyyyyyyyyyykkkkkkkkkkkkkkkk";
        goto LABEL_42;
      case 19:
        v2 = "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB";
        goto LABEL_42;
      case 20:
        v2 = "rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrggggggggggggggggggggggggggggggggbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb";
        goto LABEL_42;
      case 21:
        v2 = "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAAAAAAAAAAA"
             "AAAAAAAAAAAAAAAAAAAAA";
        goto LABEL_42;
      case 22:
        v2 = "rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrggggggggggggggggggggggggggggggggbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbaaaaaaaaaaa"
             "aaaaaaaaaaaaaaaaaaaaa";
        goto LABEL_42;
      case 23:
        v2 = "WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW";
        goto LABEL_42;
      case 24:
        v2 = "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww";
        goto LABEL_42;
      case 25:
        v2 = "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYKKKKKKKKKKK"
             "KKKKKKKKKKKKKKKKKKKKK";
        goto LABEL_42;
      case 26:
        v2 = "ccccccccccccccccccccccccccccccccmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyykkkkkkkkkkk"
             "kkkkkkkkkkkkkkkkkkkkk";
        goto LABEL_42;
      case 27:
        break;
      case 28:
        result = (const char **)&_block_invoke_matte_lab;
        break;
      case 29:
        v2 = "_Wf16_";
        goto LABEL_42;
      case 30:
        v2 = "_WF16_";
        goto LABEL_42;
      case 31:
        v2 = "_RGBf16_";
        goto LABEL_42;
      case 32:
        v2 = "_RGBF16_";
        goto LABEL_42;
      case 33:
        v2 = "_RGBAf16_";
        goto LABEL_42;
      case 34:
        v2 = "_RGBAF16_";
        goto LABEL_42;
      case 35:
        v2 = "_CMYKf16_";
        goto LABEL_42;
      case 36:
        v2 = "_CMYKF16_";
        goto LABEL_42;
      case 37:
        v2 = "_GRAYA8_";
        goto LABEL_42;
      case 38:
        v2 = "_CIF10_";
LABEL_42:
        result = CGBlt_depth(v2);
        break;
      default:
        result = 0;
        break;
    }
    img_globals_globals[i] = (uint64_t)result;
  }
  return result;
}

const char **CGBlt_depth(char *__s2)
{
  uint64_t v2;
  const char **v3;
  uint64_t v4;

  if (!__s2)
    return 0;
  v2 = 0;
  while (1)
  {
    v3 = *(const char ***)((char *)&blt_depth + v2);
    if ((has_matching_encoding(v3[1], __s2) & 1) != 0)
      break;
    v2 += 8;
    if (v2 == 216)
    {
      v4 = 0;
      while (1)
      {
        v3 = (const char **)((char *)&blt_image_depth + v4);
        if (has_matching_encoding(*(const char **)((char *)&blt_image_depth + v4 + 8), __s2))
          break;
        v4 += 72;
        if (v4 == 864)
          return 0;
      }
      return v3;
    }
  }
  return v3;
}

const char *has_matching_encoding(const char *result, char *__s2)
{
  const char *v2;
  const char **v4;
  int v5;
  const char *v6;

  if (result)
  {
    v2 = result;
    result = *(const char **)result;
    if (result)
    {
      v4 = (const char **)(v2 + 8);
      do
      {
        v5 = strcmp(result, __s2);
        result = (const char *)(v5 == 0);
        if (!v5)
          break;
        v6 = *v4++;
        result = v6;
      }
      while (v6);
    }
  }
  return result;
}

CGPathRef CGPathRetain(CGPathRef path)
{
  if (path)
    CFRetain(path);
  return path;
}

CGColorSpaceRef CGColorSpaceCreateCalibratedRGB(const CGFloat *whitePoint, const CGFloat *blackPoint, const CGFloat *gamma, const CGFloat *matrix)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v12;
  uint64_t v13;
  BOOL v14;
  char *v15;
  uint64_t i;
  uint64_t v17;
  const CGFloat *v18;
  uint64_t v19;
  const CGFloat *v20;
  uint64_t v21;
  const CGFloat *v22;
  CC_MD5_CTX *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  CGColorSpace *v37;
  unsigned int v38;
  unsigned int v39;
  __int128 v41;
  unsigned __int8 md[24];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (!whitePoint)
    goto LABEL_42;
  v12 = (char *)malloc_type_calloc(0x70uLL, 1uLL, 0x203FB65BuLL);
  v13 = (uint64_t)v12;
  *(_DWORD *)v12 = 1;
  *((_WORD *)v12 + 4) = 0;
  if (matrix)
    v14 = matrix[2] * -(matrix[6] * matrix[4])
        + *matrix * matrix[4] * matrix[8]
        + matrix[2] * matrix[3] * matrix[7]
        + -(matrix[3] * matrix[1]) * matrix[8]
        + matrix[1] * matrix[5] * matrix[6]
        + -(*matrix * matrix[5]) * matrix[7] != 0.0;
  else
    v14 = 1;
  *(_QWORD *)(v12 + 20) = 0x100000004;
  v12[10] = v14;
  *(_WORD *)(v12 + 11) = 256;
  *((_WORD *)v12 + 7) = 256;
  *((_QWORD *)v12 + 5) = 3;
  *((_QWORD *)v12 + 13) = &color_space_state_create_calibrated_rgb_calibrated_rgb_vtable;
  *((_DWORD *)v12 + 7) = 1;
  *((_QWORD *)v12 + 10) = 0;
  *((_QWORD *)v12 + 9) = 0;
  *((_QWORD *)v12 + 4) = &calibrated_rgb_get_default_color_components_default_rgb;
  v15 = (char *)malloc_type_calloc(0x90uLL, 1uLL, 0x8C70A895uLL);
  *(_QWORD *)(v13 + 88) = v15;
  if (!v15)
  {
    free((void *)v13);
LABEL_42:
    v37 = (CGColorSpace *)CGColorSpaceCreateWithState(0, (uint64_t)blackPoint, (uint64_t)gamma, (uint64_t)matrix, v4, v5, v6, v7);
    goto LABEL_43;
  }
  for (i = 0; i != 3; ++i)
    *(CGFloat *)&v15[i * 8] = whitePoint[i];
  v17 = 0;
  v18 = (const CGFloat *)&default_black_point_17149;
  if (blackPoint)
    v18 = blackPoint;
  do
  {
    *(CGFloat *)&v15[v17 * 8 + 24] = v18[v17];
    ++v17;
  }
  while (v17 != 3);
  v19 = 0;
  v20 = (const CGFloat *)&xmmword_185003338;
  if (gamma)
    v20 = gamma;
  do
  {
    *(CGFloat *)&v15[v19 * 8 + 48] = v20[v19];
    ++v19;
  }
  while (v19 != 3);
  v21 = 0;
  v22 = (const CGFloat *)&color_space_state_create_calibrated_rgb_default_matrix;
  if (matrix)
    v22 = matrix;
  do
  {
    *(CGFloat *)&v15[v21 * 8 + 72] = v22[v21];
    ++v21;
  }
  while (v21 != 9);
  memset(md, 0, 16);
  v23 = (CC_MD5_CTX *)malloc_type_malloc(0x5CuLL, 0x2062DE7BuLL);
  CC_MD5_Init(v23);
  if (v23)
    CC_MD5_Update(v23, (const void *)(v13 + 20), 4u);
  v24 = 0;
  v25 = *(_QWORD *)(v13 + 88);
  do
  {
    if (v23)
      CC_MD5_Update(v23, (const void *)(v25 + v24), 8u);
    v24 += 8;
  }
  while (v24 != 24);
  for (j = 0; j != 24; j += 8)
  {
    if (v23)
      CC_MD5_Update(v23, (const void *)(v25 + 24 + j), 8u);
  }
  for (k = 0; k != 24; k += 8)
  {
    if (v23)
      CC_MD5_Update(v23, (const void *)(v25 + 48 + k), 8u);
  }
  for (m = 0; m != 9; ++m)
  {
    while (v23)
    {
      CC_MD5_Update(v23, (const void *)(v25 + 8 * m++ + 72), 8u);
      if (m == 9)
      {
        CC_MD5_Final(md, v23);
        v29 = *(_OWORD *)md;
        goto LABEL_37;
      }
    }
  }
  v29 = 0uLL;
LABEL_37:
  v41 = v29;
  free(v23);
  *(_OWORD *)(v13 + 56) = v41;
  v37 = (CGColorSpace *)CGColorSpaceCreateWithState((unsigned int *)v13, v30, v31, v32, v33, v34, v35, v36);
  do
  {
    v38 = __ldxr((unsigned int *)v13);
    v39 = v38 - 1;
  }
  while (__stxr(v39, (unsigned int *)v13));
  if (!v39)
    color_space_state_dealloc(v13);
LABEL_43:
  if (v37)
    *((_QWORD *)v37 + 3) = color_space_state_register(*((_BYTE **)v37 + 3));
  return v37;
}

void CGContextDrawTiledImage(CGContextRef c, CGRect rect, CGImageRef image)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CGFloat height;
  CGFloat width;
  double y;
  CGFloat x;
  _BOOL4 v15;
  double v16;
  unint64_t v17;
  CGContextRef v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  __int128 v30;
  CGPatternRef v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  CGPattern *v39;
  CGColorSpace *ColorSpace;
  const CGFloat *Components;
  CGColorSpace *Pattern;
  CGColorSpace *v43;
  CGColor *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  CGColor *FillColorAsColor;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  CGColor *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  CGAffineTransform v78;
  CGSize v79;
  CGRect v80;
  CGRect v81;
  CGRect v82;
  CGRect v83;
  CGRect v84;
  CGRect ClipBoundingBox;

  if (!c)
  {
    v18 = 0;
LABEL_12:
    handle_invalid_context((char)"CGContextDrawTiledImage", (uint64_t)v18, v3, v4, v5, v6, v7, v8);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v18 = c;
    goto LABEL_12;
  }
  height = rect.size.height;
  width = rect.size.width;
  y = rect.origin.y;
  x = rect.origin.x;
  v15 = rect.size.height < 0.0 || rect.size.width < 0.0;
  v16 = rect.size.width;
  if (v15)
  {
    v80 = CGRectStandardize(rect);
    v16 = v80.size.width;
  }
  if (image)
    v17 = *((_QWORD *)image + 5);
  else
    v17 = 0;
  v19 = height;
  if (v15)
  {
    v81.origin.x = x;
    v81.origin.y = y;
    v81.size.width = width;
    v81.size.height = height;
    *(CGRect *)(&v19 - 3) = CGRectStandardize(v81);
  }
  if (image)
    v20 = (double)*((unint64_t *)image + 6);
  else
    v20 = 0.0;
  v21 = v16 / (double)v17;
  v22 = v19 / v20;
  if (v15)
  {
    v82.origin.x = x;
    v82.origin.y = y;
    v82.size.width = width;
    v82.size.height = height;
    *(_QWORD *)&v23 = (unint64_t)CGRectStandardize(v82);
    v83.origin.x = x;
    v83.origin.y = y;
    v83.size.width = width;
    v83.size.height = height;
    v84 = CGRectStandardize(v83);
    y = v84.origin.y;
  }
  else
  {
    v23 = x;
  }
  v24 = (double *)*((_QWORD *)c + 12);
  v25 = v24[3];
  v26 = v24[4];
  v27 = v24[5];
  v28 = v24[6];
  v29 = v24[8];
  *(double *)&v30 = v22 * v28 + v26 * 0.0;
  *((double *)&v30 + 1) = v24[7] + v27 * y + v23 * v25;
  v78.b = v28 * 0.0 + v21 * v26;
  v78.c = v22 * v27 + v25 * 0.0;
  v78.a = v27 * 0.0 + v21 * v25;
  *(_OWORD *)&v78.d = v30;
  v78.ty = v28 * y + v23 * v26 + v29;
  v31 = CGPatternCreateWithImage2((unint64_t *)image, &v78, kCGPatternTilingConstantSpacing);
  if (v31)
  {
    v39 = v31;
    v77 = 0x3FF0000000000000;
    if (image && (*((_BYTE *)image + 39) & 2) != 0)
    {
      FillColorAsColor = (CGColor *)CGContextGetFillColorAsColor((uint64_t)c, v32, v33, v34, v35, v36, v37, v38);
      if (!FillColorAsColor)
        goto LABEL_33;
      v54 = (unint64_t)FillColorAsColor;
      Components = CGColorGetComponents(FillColorAsColor);
      if ((v54 & 0x8000000000000000) != 0)
        ColorSpace = CGTaggedColorGetColorSpace(v54, v55, v56, v57, v58, v59, v60, v61);
      else
        ColorSpace = *(CGColorSpace **)(v54 + 24);
    }
    else
    {
      ColorSpace = 0;
      Components = (const CGFloat *)&v77;
    }
    Pattern = CGColorSpaceCreatePattern(ColorSpace);
    if (Pattern)
    {
      v43 = Pattern;
      v44 = CGColorCreateWithPattern(Pattern, v39, Components);
      CGColorSpaceRelease(v43);
      CFRelease(v39);
      if (!v44)
        return;
      if (*((_DWORD *)c + 4) == 1129601108)
      {
        v51 = *((_QWORD *)c + 14);
        v52 = *(_OWORD *)(v51 + 40);
        *(_OWORD *)&v78.a = *(_OWORD *)(v51 + 24);
        *(_OWORD *)&v78.c = v52;
        *(_OWORD *)&v78.tx = *(_OWORD *)(v51 + 56);
      }
      else
      {
        handle_invalid_context((char)"CGContextGetBaseCTM", (uint64_t)c, v45, v46, v47, v48, v49, v50);
        v78 = CGAffineTransformIdentity;
        if (*((_DWORD *)c + 4) != 1129601108)
        {
          handle_invalid_context((char)"CGContextSetBaseCTM", (uint64_t)c, v63, v64, v65, v66, v67, v68);
          goto LABEL_38;
        }
      }
      *(CGAffineTransform *)(*((_QWORD *)c + 14) + 24) = CGAffineTransformIdentity;
LABEL_38:
      CGContextSaveGState(c);
      v79.width = 0.0;
      v79.height = 0.0;
      CGContextSetPatternPhase(c, v79);
      CGContextSetFillColorWithColor(c, v44);
      ClipBoundingBox = CGContextGetClipBoundingBox(c);
      CGContextFillRect(c, ClipBoundingBox);
      CGContextRestoreGState(c);
      if (*((_DWORD *)c + 4) == 1129601108)
      {
        v75 = *((_QWORD *)c + 14);
        v76 = *(_OWORD *)&v78.c;
        *(_OWORD *)(v75 + 24) = *(_OWORD *)&v78.a;
        *(_OWORD *)(v75 + 40) = v76;
        *(_OWORD *)(v75 + 56) = *(_OWORD *)&v78.tx;
      }
      else
      {
        handle_invalid_context((char)"CGContextSetBaseCTM", (uint64_t)c, v69, v70, v71, v72, v73, v74);
      }
      v62 = v44;
      goto LABEL_42;
    }
LABEL_33:
    v62 = v39;
LABEL_42:
    CFRelease(v62);
  }
}

CGPatternRef CGPatternCreateWithImage2(unint64_t *cf, _OWORD *a2, CGPatternTiling a3)
{
  double v6;
  double v7;
  BOOL v8;
  __int128 v9;
  uint64_t v10;
  double v11;
  double v12;
  CGPatternRef result;
  BOOL v14;
  CGAffineTransform v15;

  if (cf)
  {
    v6 = (double)cf[5];
    v7 = (double)cf[6];
    v8 = (*((_DWORD *)cf + 9) & 0x2000000) == 0;
    CFRetain(cf);
  }
  else
  {
    v6 = 0.0;
    v8 = 1;
    v7 = 0.0;
  }
  v9 = a2[1];
  *(_OWORD *)&v15.a = *a2;
  *(_OWORD *)&v15.c = v9;
  *(_OWORD *)&v15.tx = a2[2];
  v10 = 0;
  *(_QWORD *)&v9 = 0;
  v11 = v6;
  v12 = v7;
  result = CGPatternCreate(cf, *(CGRect *)((char *)&v9 - 8), &v15, v6, v7, a3, v8, &image_callbacks_16476);
  if (cf)
    v14 = (*((_BYTE *)cf + 39) & 0xE) == 0;
  else
    v14 = 0;
  *((_BYTE *)result + 186) = v14;
  *((_BYTE *)result + 184) = 1;
  return result;
}

CGPatternRef CGPatternCreate(void *info, CGRect bounds, CGAffineTransform *matrix, CGFloat xStep, CGFloat yStep, CGPatternTiling tiling, BOOL isColored, const CGPatternCallbacks *callbacks)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  uint64_t Instance;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  __int128 v26;
  __int128 v27;
  CGFloat v28;
  CGFloat v29;
  CGPatternReleaseInfoCallback releaseInfo;

  if (!callbacks)
    return 0;
  height = bounds.size.height;
  width = bounds.size.width;
  y = bounds.origin.y;
  x = bounds.origin.x;
  if (kCGPatternWillDeallocate_block_invoke_once != -1)
    dispatch_once(&kCGPatternWillDeallocate_block_invoke_once, &__block_literal_global_5_16460);
  Instance = CGTypeCreateInstance(CGPatternGetTypeID_pattern_type_id, 176, *(uint64_t *)&tiling, isColored, (uint64_t)callbacks, v8, v9, v10);
  v23 = Instance;
  if (Instance)
  {
    do
    {
      v24 = __ldxr(identifier_16461);
      v25 = v24 + 1;
    }
    while (__stxr(v25, identifier_16461));
    *(_DWORD *)(Instance + 16) = v25;
    *(_DWORD *)(Instance + 20) = 0;
    v26 = *(_OWORD *)&matrix->a;
    v27 = *(_OWORD *)&matrix->c;
    *(_OWORD *)(Instance + 56) = *(_OWORD *)&matrix->tx;
    *(_OWORD *)(Instance + 40) = v27;
    *(_OWORD *)(Instance + 24) = v26;
    *(_BYTE *)(Instance + 72) = 1;
    *(_BYTE *)(Instance + 184) = 0;
    *(_QWORD *)(Instance + 80) = info;
    *(CGFloat *)&v26 = x;
    *(CGFloat *)&v27 = y;
    v28 = width;
    v29 = height;
    *(CGRect *)(Instance + 104) = CGRectStandardize(*(CGRect *)&v26);
    *(double *)(v23 + 136) = fabs(xStep);
    *(double *)(v23 + 144) = fabs(yStep);
    *(_DWORD *)(v23 + 152) = tiling;
    *(_BYTE *)(v23 + 185) = isColored;
    *(_BYTE *)(v23 + 186) = 0;
    releaseInfo = callbacks->releaseInfo;
    *(_OWORD *)(v23 + 160) = *(_OWORD *)&callbacks->version;
    *(_QWORD *)(v23 + 176) = releaseInfo;
    *(_QWORD *)(v23 + 88) = 0;
    *(_QWORD *)(v23 + 96) = 0;
  }
  return (CGPatternRef)v23;
}

CGColorRef CGColorCreateWithPattern(CGColorSpaceRef space, CGPatternRef pattern, const CGFloat *components)
{
  double *color;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CGColorSpaceRef v15;
  CGColorSpace *v16;
  CGColorSpaceRef DeviceGray;
  CGColorSpace *v18;
  uint64_t v19;
  const void *v20;
  CGColorSpaceRef v21;
  char v23;

  color = 0;
  if (pattern && space && components)
  {
    if (CGColorSpaceGetType(space) == 9)
    {
      v14 = *(_QWORD *)(*((_QWORD *)space + 3) + 40);
      if (*((_BYTE *)pattern + 185) && v14)
      {
        CGPostError((uint64_t)"Invalid color: colored pattern specified with uncolored pattern color space.", v7, v8, v9, v10, v11, v12, v13, v23);
        v15 = CGColorSpaceCreatePattern(0);
        color = create_color(v15, components);
        v16 = v15;
      }
      else
      {
        if (*((_BYTE *)pattern + 185) || v14)
        {
          color = create_color(space, components);
          if (!color)
            return (CGColorRef)color;
          goto LABEL_19;
        }
        CGPostError((uint64_t)"Invalid color: uncolored pattern specified with colored pattern color space.", v7, v8, v9, v10, v11, v12, v13, v23);
        DeviceGray = CGColorSpaceCreateDeviceGray();
        v18 = DeviceGray;
        if (DeviceGray && (v19 = *((_QWORD *)DeviceGray + 3)) != 0)
          v20 = *(const void **)(v19 + 32);
        else
          v20 = 0;
        v21 = CGColorSpaceCreatePattern(DeviceGray);
        color = create_color(v21, v20);
        CGColorSpaceRelease(v21);
        v16 = v18;
      }
      CGColorSpaceRelease(v16);
      if (color)
      {
LABEL_19:
        CFRetain(pattern);
        *((_QWORD *)color + 4) = pattern;
      }
    }
    else
    {
      return 0;
    }
  }
  return (CGColorRef)color;
}

CGColorSpace *create_colorspace_using_colorspace_state(void *a1, const __CFData *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *icc;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CGColorSpace *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t MatchingSingleton;
  uint64_t v22;
  int __dst[74];
  _QWORD __src[38];

  __src[37] = *MEMORY[0x1E0C80C00];
  memset(__src, 0, 296);
  LODWORD(__src[0]) = -1;
  CGCMSUtilsGetICCProfileInfo(a1, (uint64_t)__src, a3, a4, a5, a6, a7, a8);
  memcpy(__dst, __src, sizeof(__dst));
  icc = (unsigned int *)color_space_state_create_icc(a1, a2, __dst);
  v18 = (CGColorSpace *)CGColorSpaceCreateWithState(icc, v11, v12, v13, v14, v15, v16, v17);
  if (icc)
  {
    do
    {
      v19 = __ldxr(icc);
      v20 = v19 - 1;
    }
    while (__stxr(v20, icc));
    if (!v20)
      color_space_state_dealloc((uint64_t)icc);
  }
  MatchingSingleton = CGColorSpaceFindMatchingSingleton((uint64_t)v18);
  if (MatchingSingleton)
  {
    v22 = MatchingSingleton;
    CGColorSpaceRelease(v18);
    return (CGColorSpace *)v22;
  }
  else
  {
    if (create_colorspace_using_colorspace_state_cglibrarypredicate != -1)
      dispatch_once(&create_colorspace_using_colorspace_state_cglibrarypredicate, &__block_literal_global_186_6830);
    if ((create_colorspace_using_colorspace_state_f(a1, CFSTR("hdgm")) & 1) == 0 && v18)
      *((_QWORD *)v18 + 3) = color_space_state_register(*((_BYTE **)v18 + 3));
  }
  return v18;
}

CGColorSpace *create_colorspace_with_ColorSync_profile(const void *a1, const __CFDictionary *a2)
{
  CFTypeID v4;
  void *v5;
  CGColorSpace *v6;
  uint64_t colorspace_with_ColorSync_profile_f_181;
  const __CFData *v8;
  CGColorSpace *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  CGColorSpace *colorspace_using_colorspace_state;

  if (!a1)
    return 0;
  v4 = CFGetTypeID(a1);
  if (create_colorspace_with_ColorSync_profile_cglibrarypredicate != -1)
    dispatch_once(&create_colorspace_with_ColorSync_profile_cglibrarypredicate, &__block_literal_global_175_6829);
  if (v4 == create_colorspace_with_ColorSync_profile_f())
  {
    v5 = (void *)CFRetain(a1);
    if (!a2)
      goto LABEL_10;
    goto LABEL_9;
  }
  v5 = 0;
  if (a2)
LABEL_9:
    LODWORD(a2) = CFDictionaryGetValue(a2, CFSTR("kCGColorSpaceExtendedRange")) == (const void *)*MEMORY[0x1E0C9AE50];
LABEL_10:
  if (create_colorspace_with_ColorSync_profile_cglibrarypredicate_178 != -1)
    dispatch_once(&create_colorspace_with_ColorSync_profile_cglibrarypredicate_178, &__block_literal_global_180);
  v6 = 0;
  if (create_colorspace_with_ColorSync_profile_f_177(v5, 0, 0))
  {
    if (create_colorspace_with_ColorSync_profile_cglibrarypredicate_182 != -1)
      dispatch_once(&create_colorspace_with_ColorSync_profile_cglibrarypredicate_182, &__block_literal_global_184);
    colorspace_with_ColorSync_profile_f_181 = create_colorspace_with_ColorSync_profile_f_181(v5, 0);
    if (colorspace_with_ColorSync_profile_f_181)
    {
      v8 = (const __CFData *)colorspace_with_ColorSync_profile_f_181;
      v9 = (CGColorSpace *)colorspace_with_name_from_icc_data(colorspace_with_ColorSync_profile_f_181, (uint64_t)v5);
      v6 = v9;
      if (v9)
        v15 = (int)a2;
      else
        v15 = 0;
      if (v15 == 1)
      {
        v16 = (_BYTE *)*((_QWORD *)v9 + 3);
        if (!v16[15] || v16[16] || v16[17])
        {
          CGColorSpaceRelease(v9);
          v6 = 0;
        }
        else
        {
          colorspace_using_colorspace_state = create_colorspace_using_colorspace_state(v5, v8, 1, v10, v11, v12, v13, v14);
          CGColorSpaceRelease(v6);
          v6 = colorspace_using_colorspace_state;
        }
      }
      else if (!v9)
      {
        v6 = create_colorspace_using_colorspace_state(v5, v8, (int)a2, v10, v11, v12, v13, v14);
      }
      CFRelease(v8);
    }
    else
    {
      v6 = 0;
    }
  }
  if (v5)
    CFRelease(v5);
  return v6;
}

CGColorSpaceRef create_ICCBased(CGPDFArray *a1)
{
  CGPDFDictionary *v1;
  CGColorSpaceRef ICCBased;
  CGColorSpace *colorspace;
  CGColorSpaceRef DeviceCMYK;
  CGFloat *v6;
  __n128 v7;
  CGFloat *v8;
  CGPDFInteger v9;
  CGFloat *v10;
  CFDataRef v11;
  CFDataRef v12;
  CGDataProvider *v13;
  CGPDFStreamRef stream;
  CGPDFObjectRef v15;
  CGPDFInteger value;
  CGPDFDataFormat format;

  if (!a1 || *((_QWORD *)a1 + 2) != 2)
  {
    return 0;
  }
  v15 = 0;
  value = 0;
  stream = 0;
  if (!CGPDFArrayGetStream(a1, 1uLL, &stream))
  {
    return 0;
  }
  if (stream)
    v1 = (CGPDFDictionary *)*((_QWORD *)stream + 6);
  else
    v1 = 0;
  if (!CGPDFDictionaryGetInteger(v1, "N", &value) || value <= 0)
  {
    return 0;
  }
  if ((unint64_t)value > 4 || ((1 << value) & 0x1A) == 0)
  {
    return 0;
  }
  if (!CGPDFDictionaryGetObject(v1, "Alternate", &v15)
    || (colorspace = (CGColorSpace *)cg_create_colorspace(v15)) == 0)
  {
    switch(value)
    {
      case 4:
        DeviceCMYK = CGColorSpaceCreateDeviceCMYK();
        goto LABEL_25;
      case 3:
        DeviceCMYK = CGColorSpaceCreateDeviceRGB();
        goto LABEL_25;
      case 1:
        DeviceCMYK = CGColorSpaceCreateDeviceGray();
LABEL_25:
        colorspace = DeviceCMYK;
        goto LABEL_27;
    }
    colorspace = 0;
  }
LABEL_27:
  v6 = (CGFloat *)malloc_type_malloc(16 * value, 0x100004000313F17uLL);
  if (v6)
  {
    v8 = v6;
    if ((get_array(v1, "Range", v6, (CGPDFArray *)(2 * value), 0, v7) & 1) == 0)
    {
      v9 = value;
      if (value >= 1)
      {
        v10 = v8;
        do
        {
          *(_OWORD *)v10 = xmmword_185004A20;
          v10 += 2;
          --v9;
        }
        while (v9);
      }
    }
    format = CGPDFDataFormatRaw;
    v11 = CGPDFStreamCopyData(stream, &format);
    if (v11)
    {
      v12 = v11;
      if (format)
      {
        CFRelease(v11);
      }
      else
      {
        v13 = CGDataProviderCreateWithCFData(v11);
        CFRelease(v12);
        if (v13)
        {
          ICCBased = CGColorSpaceCreateICCBased(value, v8, v13, colorspace);
          CGColorSpaceRelease(colorspace);
          CGDataProviderRelease(v13);
          free(v8);
          return ICCBased;
        }
      }
    }
    CGColorSpaceRelease(colorspace);
    free(v8);
  }
  else
  {
    CGColorSpaceRelease(colorspace);
  }
  return 0;
}

CGColorSpaceRef CGColorSpaceCreateICCBased(size_t nComponents, const CGFloat *range, CGDataProviderRef profile, CGColorSpaceRef alternate)
{
  CGColorSpace *Retained;
  size_t v5;
  CFDataRef v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  int v19;

  Retained = 0;
  if (nComponents <= 4)
  {
    v5 = nComponents;
    if (((1 << nComponents) & 0x1A) != 0)
    {
      if (alternate
        && (CGColorSpaceGetType(alternate) == 9 || *(_QWORD *)(*((_QWORD *)alternate + 3) + 40) != v5))
      {
        return 0;
      }
      v9 = CGDataProviderCopyData(profile);
      Retained = (CGColorSpace *)CGColorSpaceFromICCDataCacheGetRetained(v9);
      if (v9)
        CFRelease(v9);
      if (!Retained || (v17 = *((_QWORD *)Retained + 3), *(_QWORD *)(v17 + 40) != v5))
      {
LABEL_23:
        CGColorSpaceRelease(Retained);
        if (alternate)
        {
          CFRetain(alternate);
          return alternate;
        }
        return 0;
      }
      if (range)
      {
        v18 = (double *)CGColorSpaceICCGetRange((uint64_t)Retained, v10, v11, v12, v13, v14, v15, v16);
        while (*range == *v18)
        {
          ++v18;
          ++range;
          if (!--v5)
          {
            v17 = *((_QWORD *)Retained + 3);
            goto LABEL_15;
          }
        }
        goto LABEL_23;
      }
LABEL_15:
      v19 = *(_DWORD *)(v17 + 20);
      if ((v19 - 10) >= 2 && v19 != 6)
        _CGHandleAssert("CGColorSpaceICCSetAlternate", 605, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpace_ICC.c", "s->state->type == kCGColorSpaceICCBased || s->state->type == kCGColorSpaceProfileSets || s->state->type == kCGColorSpaceFlexGTCProxy", "Colorspace not ICC. type = %d", v14, v15, v16, *(_DWORD *)(v17 + 20));
      CGColorSpaceRelease(*(CGColorSpaceRef *)(*(_QWORD *)(v17 + 88) + 56));
      if (alternate)
        CFRetain(alternate);
      *(_QWORD *)(*(_QWORD *)(*((_QWORD *)Retained + 3) + 88) + 56) = alternate;
    }
  }
  return Retained;
}

void *CGColorSpaceFromICCDataCacheGetRetained(void *result)
{
  void *v1;
  const void *v2;
  uint64_t v3;
  CFTypeID v4;
  void *v5;
  CFTypeID v6;
  const void *v7;
  _QWORD *v8;
  unsigned int *icc_with_data;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t MatchingSingleton;
  _QWORD *v21;
  uint64_t v22;
  void *value;
  _QWORD key[3];

  key[2] = *MEMORY[0x1E0C80C00];
  value = 0;
  if (result)
  {
    v1 = result;
    if (CGColorSpaceFromICCDataCacheGetRetained_cglibrarypredicate != -1)
      dispatch_once(&CGColorSpaceFromICCDataCacheGetRetained_cglibrarypredicate, &__block_literal_global_15277);
    result = (void *)CGColorSpaceFromICCDataCacheGetRetained_f(v1, 0);
    if (result)
    {
      v2 = result;
      if (CGColorSpaceFromICCDataCacheGetRetained_cglibrarypredicate_4 != -1)
        dispatch_once(&CGColorSpaceFromICCDataCacheGetRetained_cglibrarypredicate_4, &__block_literal_global_6_15278);
      if (!CGColorSpaceFromICCDataCacheGetRetained_f_3(v2, 0, 0))
        goto LABEL_42;
      if (CGColorSpaceFromICCDataCacheGetRetained_cglibrarypredicate_9 != -1)
        dispatch_once(&CGColorSpaceFromICCDataCacheGetRetained_cglibrarypredicate_9, &__block_literal_global_11_15279);
      key[0] = CGColorSpaceFromICCDataCacheGetRetained_f_8(v2);
      key[1] = v3;
      if (get_cache_predicate_15280 != -1)
        dispatch_once(&get_cache_predicate_15280, &__block_literal_global_14_15281);
      pthread_mutex_lock((pthread_mutex_t *)get_cache_colorspace_cache);
      if (get_cache_predicate_15280 != -1)
        dispatch_once(&get_cache_predicate_15280, &__block_literal_global_14_15281);
      if (!cache_get_and_retain(*(cache_t **)(get_cache_colorspace_cache + 64), key, &value))
        goto LABEL_26;
      v4 = CFGetTypeID(v1);
      if (kCGDataProviderPropertyTrustToken_block_invoke_once != -1)
        dispatch_once(&kCGDataProviderPropertyTrustToken_block_invoke_once, &__block_literal_global_26_6088);
      if (v4 == CGDataProviderGetTypeID_id)
      {
        v5 = CGDataProviderCopyData((CGDataProviderRef)v1);
      }
      else
      {
        v6 = CFGetTypeID(v1);
        if (v6 != CFDataGetTypeID())
          goto LABEL_36;
        v5 = (void *)CFRetain(v1);
      }
      v7 = v5;
      if (v5)
      {
        v8 = (_QWORD *)colorspace_with_name_from_icc_data((uint64_t)v5, 0);
        if (v8)
        {
LABEL_23:
          CFRelease(v7);
          value = v8;
          if (get_cache_predicate_15280 != -1)
            dispatch_once(&get_cache_predicate_15280, &__block_literal_global_14_15281);
          cache_set_and_retain(*(cache_t **)(get_cache_colorspace_cache + 64), key, value, 0);
LABEL_26:
          if (value)
            CFRetain(value);
          goto LABEL_37;
        }
        icc_with_data = (unsigned int *)color_space_state_create_icc_with_data((const __CFData *)v7);
        if (icc_with_data)
        {
          v17 = icc_with_data;
          v8 = (_QWORD *)CGColorSpaceCreateWithState(icc_with_data, v10, v11, v12, v13, v14, v15, v16);
          do
          {
            v18 = __ldxr(v17);
            v19 = v18 - 1;
          }
          while (__stxr(v19, v17));
          if (!v19)
            color_space_state_dealloc((uint64_t)v17);
          MatchingSingleton = CGColorSpaceFindMatchingSingleton((uint64_t)v8);
          if (MatchingSingleton)
          {
            v21 = (_QWORD *)MatchingSingleton;
            CGColorSpaceRelease((CGColorSpaceRef)v8);
            v8 = v21;
          }
          else
          {
            v22 = *(_QWORD *)(*(_QWORD *)(v8[3] + 88) + 16);
            if (CGColorSpaceCreateWithICCDataInternal_cglibrarypredicate != -1)
              dispatch_once(&CGColorSpaceCreateWithICCDataInternal_cglibrarypredicate, &__block_literal_global_28);
            if ((CGColorSpaceCreateWithICCDataInternal_f(v22, CFSTR("hdgm")) & 1) == 0)
              v8[3] = color_space_state_register((_BYTE *)v8[3]);
          }
          goto LABEL_23;
        }
        CFRelease(v7);
      }
LABEL_36:
      value = 0;
LABEL_37:
      if (get_cache_predicate_15280 != -1)
        dispatch_once(&get_cache_predicate_15280, &__block_literal_global_14_15281);
      cache_release_value(*(cache_t **)(get_cache_colorspace_cache + 64), value);
      if (get_cache_predicate_15280 != -1)
        dispatch_once(&get_cache_predicate_15280, &__block_literal_global_14_15281);
      pthread_mutex_unlock((pthread_mutex_t *)get_cache_colorspace_cache);
LABEL_42:
      CFRelease(v2);
      return value;
    }
  }
  return result;
}

uint64_t colorspace_with_name_from_icc_data(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const void *v3;
  const __CFString *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int (*v13)(uint64_t, uint64_t);
  unsigned int (*v14)(uint64_t, uint64_t);
  unsigned int (*v15)(uint64_t, uint64_t);
  unsigned int (*v16)(uint64_t, uint64_t);
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t (*v21)(uint64_t, uint64_t);

  if (a2)
  {
    v2 = a2;
    v3 = 0;
  }
  else
  {
    if (colorspace_with_name_from_icc_data_cglibrarypredicate != -1)
      dispatch_once(&colorspace_with_name_from_icc_data_cglibrarypredicate, &__block_literal_global_53_6768);
    v2 = colorspace_with_name_from_icc_data_f(a1, 0);
    v3 = (const void *)v2;
    if (!v2)
      return v2;
  }
  if (colorspace_with_name_from_icc_data_cglibrarypredicate_55 != -1)
    dispatch_once(&colorspace_with_name_from_icc_data_cglibrarypredicate_55, &__block_literal_global_57);
  if ((colorspace_with_name_from_icc_data_f_54(v2, CFSTR("hdgm")) & 1) == 0)
  {
    if (colorspace_with_name_from_icc_data_cglibrarypredicate_59 != -1)
      dispatch_once(&colorspace_with_name_from_icc_data_cglibrarypredicate_59, &__block_literal_global_61_6769);
    if (colorspace_with_name_from_icc_data_f_58(v2))
    {
      v6 = CFSTR("kCGColorSpaceGenericGrayGamma2_2");
    }
    else
    {
      if (colorspace_with_name_from_icc_data_cglibrarypredicate_64 != -1)
        dispatch_once(&colorspace_with_name_from_icc_data_cglibrarypredicate_64, &__block_literal_global_66_6770);
      if (colorspace_with_name_from_icc_data_f_63(v2))
      {
        v6 = CFSTR("kCGColorSpaceDisplayP3");
      }
      else
      {
        if (colorspace_with_name_from_icc_data_cglibrarypredicate_69 != -1)
          dispatch_once(&colorspace_with_name_from_icc_data_cglibrarypredicate_69, &__block_literal_global_71_6771);
        if (colorspace_with_name_from_icc_data_f_68(v2))
        {
          v6 = CFSTR("kCGColorSpaceSRGB");
        }
        else
        {
          if (colorspace_with_name_from_icc_data_cglibrarypredicate_74 != -1)
            dispatch_once(&colorspace_with_name_from_icc_data_cglibrarypredicate_74, &__block_literal_global_76_6772);
          if (colorspace_with_name_from_icc_data_f_73(v2))
          {
            v6 = CFSTR("kCGColorSpaceAdobeRGB1998");
          }
          else
          {
            if (colorspace_with_name_from_icc_data_cglibrarypredicate_79 != -1)
              dispatch_once(&colorspace_with_name_from_icc_data_cglibrarypredicate_79, &__block_literal_global_81_6773);
            if (colorspace_with_name_from_icc_data_f_78(v2))
            {
              v6 = CFSTR("kCGColorSpaceGenericLab");
            }
            else
            {
              if (colorspace_with_name_from_icc_data_cglibrarypredicate_84 != -1)
                dispatch_once(&colorspace_with_name_from_icc_data_cglibrarypredicate_84, &__block_literal_global_86_6774);
              if (colorspace_with_name_from_icc_data_f_83(v2))
              {
                v7 = CGColorSpaceCoreMedia709();
LABEL_33:
                v2 = v7;
                if (!v3)
                  return v2;
                goto LABEL_10;
              }
              if (colorspace_with_name_from_icc_data_cglibrarypredicate_89 != -1)
                dispatch_once(&colorspace_with_name_from_icc_data_cglibrarypredicate_89, &__block_literal_global_91_6775);
              if (colorspace_with_name_from_icc_data_f_88(v2))
              {
                v6 = CFSTR("kCGColorSpaceDisplayP3_709OETF");
              }
              else
              {
                if (colorspace_with_name_from_icc_data_cglibrarypredicate_94 != -1)
                  dispatch_once(&colorspace_with_name_from_icc_data_cglibrarypredicate_94, &__block_literal_global_96);
                if (colorspace_with_name_from_icc_data_cglibrarypredicate_98 == -1)
                {
                  v8 = ((uint64_t (*)(uint64_t, uint64_t))colorspace_with_name_from_icc_data_f_93)(colorspace_with_name_from_icc_data_s, v2);
                }
                else
                {
                  v17 = (uint64_t (*)(uint64_t, uint64_t))colorspace_with_name_from_icc_data_f_93;
                  dispatch_once(&colorspace_with_name_from_icc_data_cglibrarypredicate_98, &__block_literal_global_100);
                  v8 = v17(colorspace_with_name_from_icc_data_s, v2);
                }
                if (v8)
                  goto LABEL_53;
                if (colorspace_with_name_from_icc_data_cglibrarypredicate_103 != -1)
                  dispatch_once(&colorspace_with_name_from_icc_data_cglibrarypredicate_103, &__block_literal_global_105);
                if (colorspace_with_name_from_icc_data_cglibrarypredicate_107 == -1)
                {
                  v9 = ((uint64_t (*)(uint64_t, uint64_t))colorspace_with_name_from_icc_data_f_102)(colorspace_with_name_from_icc_data_s_106, v2);
                }
                else
                {
                  v18 = (uint64_t (*)(uint64_t, uint64_t))colorspace_with_name_from_icc_data_f_102;
                  dispatch_once(&colorspace_with_name_from_icc_data_cglibrarypredicate_107, &__block_literal_global_109);
                  v9 = v18(colorspace_with_name_from_icc_data_s_106, v2);
                }
                if (v9)
                {
LABEL_53:
                  v6 = CFSTR("kCGColorSpaceITUR_2100_HLG");
                }
                else
                {
                  if (colorspace_with_name_from_icc_data_cglibrarypredicate_112 != -1)
                    dispatch_once(&colorspace_with_name_from_icc_data_cglibrarypredicate_112, &__block_literal_global_114_6776);
                  if (colorspace_with_name_from_icc_data_cglibrarypredicate_116 == -1)
                  {
                    v10 = ((uint64_t (*)(uint64_t, uint64_t))colorspace_with_name_from_icc_data_f_111)(colorspace_with_name_from_icc_data_s_115, v2);
                  }
                  else
                  {
                    v19 = (uint64_t (*)(uint64_t, uint64_t))colorspace_with_name_from_icc_data_f_111;
                    dispatch_once(&colorspace_with_name_from_icc_data_cglibrarypredicate_116, &__block_literal_global_118_6777);
                    v10 = v19(colorspace_with_name_from_icc_data_s_115, v2);
                  }
                  if (v10)
                  {
                    v6 = CFSTR("kCGColorSpaceDisplayP3_HLG");
                  }
                  else
                  {
                    if (colorspace_with_name_from_icc_data_cglibrarypredicate_121 != -1)
                      dispatch_once(&colorspace_with_name_from_icc_data_cglibrarypredicate_121, &__block_literal_global_123_6778);
                    if (colorspace_with_name_from_icc_data_cglibrarypredicate_125 == -1)
                    {
                      v11 = ((uint64_t (*)(uint64_t, uint64_t))colorspace_with_name_from_icc_data_f_120)(colorspace_with_name_from_icc_data_s_124, v2);
                    }
                    else
                    {
                      v20 = (uint64_t (*)(uint64_t, uint64_t))colorspace_with_name_from_icc_data_f_120;
                      dispatch_once(&colorspace_with_name_from_icc_data_cglibrarypredicate_125, &__block_literal_global_127_6779);
                      v11 = v20(colorspace_with_name_from_icc_data_s_124, v2);
                    }
                    if (v11)
                    {
                      v6 = CFSTR("kCGColorSpaceDisplayP3_PQ");
                    }
                    else
                    {
                      if (colorspace_with_name_from_icc_data_cglibrarypredicate_130 != -1)
                        dispatch_once(&colorspace_with_name_from_icc_data_cglibrarypredicate_130, &__block_literal_global_132_6780);
                      if (colorspace_with_name_from_icc_data_cglibrarypredicate_134 == -1)
                      {
                        v12 = ((uint64_t (*)(uint64_t, uint64_t))colorspace_with_name_from_icc_data_f_129)(colorspace_with_name_from_icc_data_s_133, v2);
                      }
                      else
                      {
                        v21 = (uint64_t (*)(uint64_t, uint64_t))colorspace_with_name_from_icc_data_f_129;
                        dispatch_once(&colorspace_with_name_from_icc_data_cglibrarypredicate_134, &__block_literal_global_136_6781);
                        v12 = v21(colorspace_with_name_from_icc_data_s_133, v2);
                      }
                      if (v12)
                        goto LABEL_76;
                      if (colorspace_with_name_from_icc_data_cglibrarypredicate_139 != -1)
                        dispatch_once(&colorspace_with_name_from_icc_data_cglibrarypredicate_139, &__block_literal_global_141_6782);
                      v13 = (unsigned int (*)(uint64_t, uint64_t))colorspace_with_name_from_icc_data_f_138;
                      if (colorspace_with_name_from_icc_data_cglibrarypredicate_143 != -1)
                        dispatch_once(&colorspace_with_name_from_icc_data_cglibrarypredicate_143, &__block_literal_global_145_6783);
                      if (v13(colorspace_with_name_from_icc_data_s_142, v2))
                      {
LABEL_76:
                        v6 = CFSTR("kCGColorSpaceITUR_2100_PQ");
                      }
                      else
                      {
                        if (colorspace_with_name_from_icc_data_cglibrarypredicate_148 != -1)
                          dispatch_once(&colorspace_with_name_from_icc_data_cglibrarypredicate_148, &__block_literal_global_150);
                        v14 = (unsigned int (*)(uint64_t, uint64_t))colorspace_with_name_from_icc_data_f_147;
                        if (colorspace_with_name_from_icc_data_cglibrarypredicate_152 != -1)
                          dispatch_once(&colorspace_with_name_from_icc_data_cglibrarypredicate_152, &__block_literal_global_154_6784);
                        if (v14(colorspace_with_name_from_icc_data_s_151, v2))
                        {
                          v6 = CFSTR("kCGColorSpaceITUR_709_PQ");
                        }
                        else
                        {
                          if (colorspace_with_name_from_icc_data_cglibrarypredicate_157 != -1)
                            dispatch_once(&colorspace_with_name_from_icc_data_cglibrarypredicate_157, &__block_literal_global_159_6785);
                          v15 = (unsigned int (*)(uint64_t, uint64_t))colorspace_with_name_from_icc_data_f_156;
                          if (colorspace_with_name_from_icc_data_cglibrarypredicate_161 != -1)
                            dispatch_once(&colorspace_with_name_from_icc_data_cglibrarypredicate_161, &__block_literal_global_163_6786);
                          if (v15(colorspace_with_name_from_icc_data_s_160, v2))
                          {
                            v6 = CFSTR("kCGColorSpaceITUR_709_HLG");
                          }
                          else
                          {
                            if (colorspace_with_name_from_icc_data_cglibrarypredicate_166 != -1)
                              dispatch_once(&colorspace_with_name_from_icc_data_cglibrarypredicate_166, &__block_literal_global_168);
                            v16 = (unsigned int (*)(uint64_t, uint64_t))colorspace_with_name_from_icc_data_f_165;
                            if (colorspace_with_name_from_icc_data_cglibrarypredicate_170 != -1)
                              dispatch_once(&colorspace_with_name_from_icc_data_cglibrarypredicate_170, &__block_literal_global_172);
                            if (!v16(colorspace_with_name_from_icc_data_s_169, v2))
                              goto LABEL_9;
                            v6 = CFSTR("kCGColorSpaceITUR_2020_sRGBGamma");
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v7 = (uint64_t)CGColorSpaceCreateWithName(v6);
    goto LABEL_33;
  }
LABEL_9:
  v2 = 0;
  if (v3)
LABEL_10:
    CFRelease(v3);
  return v2;
}

uint64_t get_array(CGPDFDictionary *a1, const char *a2, _QWORD *a3, CGPDFArray *a4, uint64_t *a5, __n128 a6)
{
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](a1, a6);
  v13 = (char *)v20 - v12;
  if (v11 <= 0x1FFFFFFFFFFFFFFELL)
    v14 = (char *)v20 - v12;
  else
    v14 = 0;
  if (v11 - 0x1FFFFFFFFFFFFFFFLL >= 0xE000000000000082)
    v14 = (char *)malloc_type_malloc(8 * (_QWORD)a4, 0xA1830990uLL);
  if (CGPDFDictionaryGetNumbers(a1, a2, (uint64_t)v14, a4))
  {
    if (a4)
    {
      v15 = (uint64_t *)v14;
      do
      {
        v16 = *v15++;
        *a3++ = v16;
        a4 = (CGPDFArray *)((char *)a4 - 1);
      }
      while (a4);
    }
LABEL_14:
    v18 = 1;
    goto LABEL_15;
  }
  if (a5)
  {
    for (; a4; a4 = (CGPDFArray *)((char *)a4 - 1))
    {
      v17 = *a5++;
      *a3++ = v17;
    }
    goto LABEL_14;
  }
  v18 = 0;
LABEL_15:
  if (v14 != v13)
    free(v14);
  return v18;
}

CFDataRef CGPDFStreamCopyData(CGPDFStreamRef stream, CGPDFDataFormat *format)
{
  uint64_t v2;
  int *v3;
  _BYTE *FilterChain;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __CFData *Mutable;
  unint64_t v12;
  UInt8 bytes[4096];
  uint64_t v15;

  v2 = ((uint64_t (*)(CGPDFStreamRef))MEMORY[0x1E0C80A78])(stream);
  v15 = *MEMORY[0x1E0C80C00];
  FilterChain = CGPDFStreamCreateFilterChain(v2, v3);
  if (!FilterChain)
    return 0;
  v5 = FilterChain;
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (Mutable)
  {
    do
    {
      v12 = CGPDFSourceRead((uint64_t)v5, (uint64_t)bytes, 0x1000uLL, v6, v7, v8, v9, v10);
      CFDataAppendBytes(Mutable, bytes, v12);
    }
    while (v12 > 0xFFF);
    CFRelease(v5);
  }
  return Mutable;
}

void sub_1849C49FC(_Unwind_Exception *exception_object, int a2)
{
  const void *v2;

  if (a2)
  {
    objc_begin_catch(exception_object);
    pdf_error("Exception in CGPDFStreamCopyData");
    CFRelease(v2);
    objc_end_catch();
    JUMPOUT(0x1849C49B4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1849C4A44(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x1849C4A2CLL);
}

BOOL CGPDFArrayGetStream(CGPDFArrayRef array, size_t index, CGPDFStreamRef *value)
{
  _BOOL4 Object;
  CGPDFObjectRef valuea;

  valuea = 0;
  Object = CGPDFArrayGetObject(array, index, &valuea);
  if (Object)
  {
    if (valuea && *((_DWORD *)valuea + 2) == 9)
    {
      if (value)
        *value = (CGPDFStreamRef)*((_QWORD *)valuea + 4);
      LOBYTE(Object) = 1;
    }
    else
    {
      LOBYTE(Object) = 0;
    }
  }
  return Object;
}

uint64_t CGColorSpaceFindMatchingSingleton(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!a1)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 40);
  if (v2 == 4)
  {
    if (CGColorSpaceFindMatchingSingleton_predicate_120 != -1)
      dispatch_once(&CGColorSpaceFindMatchingSingleton_predicate_120, &__block_literal_global_122_5888);
    v4 = CGColorSpaceFindMatchingSingleton_spaces_119_0;
    if (!CGColorSpaceEqualToColorSpace(a1, CGColorSpaceFindMatchingSingleton_spaces_119_0))
      return 0;
    return v4;
  }
  if (v2 != 3)
  {
    if (v2 == 1)
    {
      if (CGColorSpaceFindMatchingSingleton_predicate != -1)
        dispatch_once(&CGColorSpaceFindMatchingSingleton_predicate, &__block_literal_global_114_5886);
      v3 = 0;
      while (1)
      {
        v4 = CGColorSpaceFindMatchingSingleton_spaces[v3];
        if (CGColorSpaceEqualToColorSpace(a1, v4))
          break;
        if (++v3 == 3)
          return 0;
      }
      return v4;
    }
    return 0;
  }
  if (CGColorSpaceFindMatchingSingleton_predicate_116 != -1)
    dispatch_once(&CGColorSpaceFindMatchingSingleton_predicate_116, &__block_literal_global_118_5887);
  v5 = 0;
  while (1)
  {
    v4 = CGColorSpaceFindMatchingSingleton_spaces_115[v5];
    if (CGColorSpaceEqualToColorSpace(a1, v4))
      break;
    if (++v5 == 14)
      return 0;
  }
  return v4;
}

_QWORD *color_space_state_create_icc_with_data(const __CFData *a1)
{
  void *icc_with_data_f;
  uint64_t icc_with_data_f_15;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  CFArrayRef ProfileSet;
  CFArrayRef v11;
  uint64_t v12;
  _QWORD *icc;
  int __dst[74];
  _QWORD __src[38];

  __src[37] = *MEMORY[0x1E0C80C00];
  memset(__src, 0, 296);
  LODWORD(__src[0]) = -1;
  if (color_space_state_create_icc_with_data_cglibrarypredicate != -1)
    dispatch_once(&color_space_state_create_icc_with_data_cglibrarypredicate, &__block_literal_global_6749);
  icc_with_data_f = (void *)color_space_state_create_icc_with_data_f(a1, 0);
  if (color_space_state_create_icc_with_data_cglibrarypredicate_11 != -1)
    dispatch_once(&color_space_state_create_icc_with_data_cglibrarypredicate_11, &__block_literal_global_13_6750);
  if ((color_space_state_create_icc_with_data_f_10(icc_with_data_f, 0, 0) & 1) != 0)
  {
    if (color_space_state_create_icc_with_data_cglibrarypredicate_16 != -1)
      dispatch_once(&color_space_state_create_icc_with_data_cglibrarypredicate_16, &__block_literal_global_18_6751);
    icc_with_data_f_15 = color_space_state_create_icc_with_data_f_15(icc_with_data_f);
    if (icc_with_data_f_15)
    {
      v9 = (void *)icc_with_data_f_15;
      ProfileSet = CGCMSUtilsCreateProfileSet(0, icc_with_data_f, CFSTR("ColorSyncTransformDeviceToPCS"), 0, 0, 0);
      v11 = CGCMSUtilsCreateProfileSet(0, v9, CFSTR("ColorSyncTransformPCSToPCS"), 0, 0, 0);
      v12 = color_space_state_create_with_profile_sets((unint64_t)ProfileSet, (unint64_t)v11);
      icc = (_QWORD *)v12;
      if (v12)
        *(_WORD *)(v12 + 14) = 1;
      CFRelease(v9);
      if (ProfileSet)
        CFRelease(ProfileSet);
      if (v11)
        CFRelease(v11);
    }
    else
    {
      CGCMSUtilsGetICCProfileInfo(icc_with_data_f, (uint64_t)__src, 0, v4, v5, v6, v7, v8);
      memcpy(__dst, __src, sizeof(__dst));
      icc = color_space_state_create_icc(icc_with_data_f, a1, __dst);
    }
    CFRelease(icc_with_data_f);
  }
  else
  {
    if (icc_with_data_f)
      CFRelease(icc_with_data_f);
    return 0;
  }
  return icc;
}

uint64_t cs_retain_count(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  const __CFAllocator *v8;

  if (a1 == -1)
  {
    v5 = *(_QWORD *)(a2 + 24);
    if (!*(_BYTE *)(v5 + 8))
    {
      v6 = (unsigned int *)(a2 + 16);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 - 1, v6));
      if (v7 == 1)
      {
        color_space_state_unregister(v5);
        pthread_mutex_destroy((pthread_mutex_t *)(a2 + 32));
        v8 = CFGetAllocator((CFTypeRef)a2);
        CFAllocatorDeallocate(v8, (void *)a2);
      }
    }
    return 0;
  }
  if (a1)
  {
    if (a1 == 1 && !*(_BYTE *)(*(_QWORD *)(a2 + 24) + 8))
    {
      v3 = (unsigned int *)(a2 + 16);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 1, v3));
    }
    return 0;
  }
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 8))
    return 0xFFFFFFFFLL;
  else
    return *(unsigned int *)(a2 + 16);
}

void color_space_state_unregister(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  if (a1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&colorspace_state_lock);
    if (*(_BYTE *)(a1 + 11))
    {
      do
      {
        v2 = __ldxr((unsigned int *)a1);
        v3 = v2 - 1;
      }
      while (__stxr(v3, (unsigned int *)a1));
      if (v3)
      {
        os_unfair_lock_unlock((os_unfair_lock_t)&colorspace_state_lock);
        return;
      }
      if (get_states_cache_predicate != -1)
        dispatch_once(&get_states_cache_predicate, &__block_literal_global_6943);
      CFSetRemoveValue((CFMutableSetRef)get_states_cache_states, (const void *)a1);
      os_unfair_lock_unlock((os_unfair_lock_t)&colorspace_state_lock);
      goto LABEL_12;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&colorspace_state_lock);
    do
    {
      v4 = __ldxr((unsigned int *)a1);
      v5 = v4 - 1;
    }
    while (__stxr(v5, (unsigned int *)a1));
    if (!v5)
LABEL_12:
      color_space_state_dealloc(a1);
  }
}

CGColorSpaceRef CGColorSpaceCreateIndexed(CGColorSpaceRef baseSpace, size_t lastIndex, const unsigned __int8 *colorTable)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int Type;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  CGColorSpaceRef *v16;
  CGColorSpaceRef *v17;
  size_t v18;
  CGColorSpace *v19;
  uint64_t i;
  CC_MD5_CTX *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  const void *v27;
  CGColorSpace *v28;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  __int128 v40;
  unsigned __int8 md[24];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (lastIndex > 0xFF)
    goto LABEL_23;
  if (!baseSpace)
    goto LABEL_23;
  if (!colorTable)
    goto LABEL_23;
  Type = CGColorSpaceGetType(baseSpace);
  if (Type == 7)
    goto LABEL_23;
  if (Type == 9)
    goto LABEL_23;
  v12 = (char *)malloc_type_calloc(0x70uLL, 1uLL, 0x3DC1B04EuLL);
  if (!v12)
    goto LABEL_23;
  v13 = (uint64_t)v12;
  *(_DWORD *)v12 = 1;
  v14 = *((_QWORD *)baseSpace + 3);
  v12[12] = *(_BYTE *)(v14 + 12);
  *((_DWORD *)v12 + 2) = 0;
  *((_WORD *)v12 + 7) = 0;
  LODWORD(v14) = *(_DWORD *)(v14 + 28);
  *((_QWORD *)v12 + 13) = color_space_state_create_indexed_indexed_vtable;
  *(_QWORD *)(v12 + 20) = 0x500000007;
  v15 = v12 + 20;
  *((_DWORD *)v12 + 7) = v14;
  *((_QWORD *)v12 + 9) = 0;
  *((_QWORD *)v12 + 10) = 0;
  *((_QWORD *)v12 + 4) = &indexed_get_default_color_components_default_indexed;
  *((_QWORD *)v12 + 5) = 1;
  v16 = (CGColorSpaceRef *)malloc_type_calloc(0x90uLL, 1uLL, 0xDBCE9105uLL);
  *(_QWORD *)(v13 + 88) = v16;
  if (!v16)
  {
LABEL_22:
    free((void *)v13);
LABEL_23:
    v28 = (CGColorSpace *)CGColorSpaceCreateWithState(0, lastIndex, (uint64_t)colorTable, v3, v4, v5, v6, v7);
    goto LABEL_24;
  }
  v17 = v16;
  CFRetain(baseSpace);
  *v17 = baseSpace;
  v17[1] = (CGColorSpaceRef)lastIndex;
  v18 = *(_QWORD *)(*((_QWORD *)baseSpace + 3) + 40) + *(_QWORD *)(*((_QWORD *)baseSpace + 3) + 40) * lastIndex;
  v19 = (CGColorSpace *)malloc_type_malloc(v18, 0xCA8BCBA7uLL);
  v17[2] = v19;
  if (!v19)
  {
    free(*(void **)(v13 + 88));
    goto LABEL_22;
  }
  if (v18)
  {
    for (i = 0; i != v18; ++i)
      *((_BYTE *)v17[2] + i) = colorTable[i];
  }
  memset(md, 0, 16);
  v21 = (CC_MD5_CTX *)malloc_type_malloc(0x5CuLL, 0x2062DE7BuLL);
  CC_MD5_Init(v21);
  if (v21)
    CC_MD5_Update(v21, v15, 4u);
  v22 = *(uint64_t **)(v13 + 88);
  v23 = *v22;
  if (*v22)
  {
    v24 = *(_QWORD *)(v23 + 24);
    if (v24)
      v25 = v21 == 0;
    else
      v25 = 1;
    if (v25)
    {
      v27 = v22 + 1;
      v26 = v22[1];
    }
    else
    {
      CC_MD5_Update(v21, (const void *)(v24 + 56), 0x10u);
      v23 = *v22;
      v27 = v22 + 1;
      v26 = v22[1];
      if (!*v22)
        goto LABEL_31;
    }
    v23 = *(_QWORD *)(*(_QWORD *)(v23 + 24) + 40);
  }
  else
  {
    v27 = v22 + 1;
    v26 = v22[1];
  }
  if (!v21)
  {
    v30 = 0uLL;
    goto LABEL_33;
  }
LABEL_31:
  md5_update(v21, (char *)v22[2], v23 + v23 * v26);
  CC_MD5_Update(v21, v27, 8u);
  CC_MD5_Final(md, v21);
  v30 = *(_OWORD *)md;
LABEL_33:
  v40 = v30;
  free(v21);
  *(_OWORD *)(v13 + 56) = v40;
  v28 = (CGColorSpace *)CGColorSpaceCreateWithState((unsigned int *)v13, v31, v32, v33, v34, v35, v36, v37);
  do
  {
    v38 = __ldxr((unsigned int *)v13);
    v39 = v38 - 1;
  }
  while (__stxr(v39, (unsigned int *)v13));
  if (!v39)
    color_space_state_dealloc(v13);
LABEL_24:
  if (v28)
    *((_QWORD *)v28 + 3) = color_space_state_register(*((_BYTE **)v28 + 3));
  return v28;
}

CGColorSpaceRef CGColorSpaceCreatePattern(CGColorSpaceRef baseSpace)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  const void *v13;
  void *v14;
  CGColorSpaceRef *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CGColorSpaceRef *v23;
  CGColorSpaceRef *v24;
  CC_MD5_CTX *v25;
  uint64_t v26;
  CGColorSpace *v27;
  __int128 v29;
  __int128 v30;
  unsigned int v31;
  unsigned int v32;
  __int128 v33;
  unsigned __int8 md[24];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (baseSpace && CGColorSpaceGetType(baseSpace) == 9)
    goto LABEL_18;
  v9 = (char *)malloc_type_calloc(0x70uLL, 1uLL, 0x3A988F3EuLL);
  if (!v9)
    goto LABEL_18;
  v10 = (uint64_t)v9;
  *(_DWORD *)v9 = 1;
  *((_WORD *)v9 + 4) = 0;
  v9[10] = 0;
  if (baseSpace)
  {
    v11 = *((_QWORD *)baseSpace + 3);
    v12 = *(_BYTE *)(v11 + 12);
    *(_QWORD *)(v9 + 20) = 0x600000009;
    v13 = v9 + 20;
    v9[12] = v12;
    v9[11] = 0;
    *((_WORD *)v9 + 7) = 0;
    *((_QWORD *)v9 + 5) = *(_QWORD *)(v11 + 40);
    *((_QWORD *)v9 + 13) = color_space_state_create_pattern_pattern_vtable;
    *((_DWORD *)v9 + 7) = *(_DWORD *)(v11 + 28);
    *((_QWORD *)v9 + 10) = 0;
    *((_QWORD *)v9 + 9) = 0;
    v14 = *(void **)(v11 + 32);
  }
  else
  {
    *((_DWORD *)v9 + 5) = 9;
    v13 = v9 + 20;
    *(_WORD *)(v9 + 11) = 256;
    *((_WORD *)v9 + 7) = 0;
    *((_QWORD *)v9 + 5) = 0;
    *((_QWORD *)v9 + 9) = CFRetain(CFSTR("kCGColorSpaceColoredPattern"));
    *(_QWORD *)(v10 + 104) = color_space_state_create_pattern_pattern_vtable;
    *(_QWORD *)(v10 + 24) = -4294967290;
    *(_QWORD *)(v10 + 80) = 0;
    v14 = &pattern_get_default_color_components_default_colored_pattern;
  }
  *(_QWORD *)(v10 + 32) = v14;
  v15 = (CGColorSpaceRef *)malloc_type_calloc(0x90uLL, 1uLL, 0xCC627293uLL);
  *(_QWORD *)(v10 + 88) = v15;
  if (!v15)
  {
    free((void *)v10);
LABEL_18:
    v27 = (CGColorSpace *)CGColorSpaceCreateWithState(0, v2, v3, v4, v5, v6, v7, v8);
    goto LABEL_19;
  }
  v23 = v15;
  v24 = v15;
  if (baseSpace)
  {
    CFRetain(baseSpace);
    v24 = *(CGColorSpaceRef **)(v10 + 88);
  }
  *v23 = baseSpace;
  memset(md, 0, 16);
  if (*v24)
  {
    v25 = (CC_MD5_CTX *)malloc_type_malloc(0x5CuLL, 0x2062DE7BuLL);
    CC_MD5_Init(v25);
    if (v25)
      CC_MD5_Update(v25, v13, 4u);
    if (*v24 && (v26 = *((_QWORD *)*v24 + 3)) != 0)
    {
      if (v25)
      {
        CC_MD5_Update(v25, (const void *)(v26 + 56), 0x10u);
LABEL_23:
        CC_MD5_Final(md, v25);
        v29 = *(_OWORD *)md;
LABEL_26:
        v33 = v29;
        free(v25);
        v30 = v33;
        goto LABEL_27;
      }
    }
    else if (v25)
    {
      goto LABEL_23;
    }
    v29 = 0uLL;
    goto LABEL_26;
  }
  v30 = xmmword_1850051C0;
LABEL_27:
  *(_OWORD *)(v10 + 56) = v30;
  v27 = (CGColorSpace *)CGColorSpaceCreateWithState((unsigned int *)v10, v16, v17, v18, v19, v20, v21, v22);
  do
  {
    v31 = __ldxr((unsigned int *)v10);
    v32 = v31 - 1;
  }
  while (__stxr(v32, (unsigned int *)v10));
  if (!v32)
    color_space_state_dealloc(v10);
LABEL_19:
  if (v27)
    *((_QWORD *)v27 + 3) = color_space_state_register(*((_BYTE **)v27 + 3));
  return v27;
}

unsigned int *color_space_state_register(_BYTE *a1)
{
  __CFSet *v2;
  unsigned int *Value;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  os_unfair_lock_lock((os_unfair_lock_t)&colorspace_state_lock);
  if (get_states_cache_predicate != -1)
    dispatch_once(&get_states_cache_predicate, &__block_literal_global_6943);
  v2 = (__CFSet *)get_states_cache_states;
  Value = (unsigned int *)CFSetGetValue((CFSetRef)get_states_cache_states, a1);
  if (Value)
  {
    v4 = Value;
    do
      v5 = __ldxr(Value);
    while (__stxr(v5 + 1, Value));
    if (!a1)
      goto LABEL_14;
  }
  else
  {
    CFSetSetValue(v2, a1);
    a1[11] = 1;
    do
      v6 = __ldxr((unsigned int *)a1);
    while (__stxr(v6 + 1, (unsigned int *)a1));
    v4 = (unsigned int *)a1;
  }
  do
  {
    v7 = __ldxr((unsigned int *)a1);
    v8 = v7 - 1;
  }
  while (__stxr(v8, (unsigned int *)a1));
  if (!v8)
    color_space_state_dealloc((uint64_t)a1);
LABEL_14:
  os_unfair_lock_unlock((os_unfair_lock_t)&colorspace_state_lock);
  return v4;
}

void color_space_state_dealloc(uint64_t a1)
{
  void (*v2)(uint64_t);
  const void *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 8))
  {
    CFStringGetCStringPtr(*(CFStringRef *)(a1 + 72), 0x8000100u);
    _CGHandleAssert("color_space_state_dealloc", 111, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/color-space-state.c", "!state->is_singleton", "tried to deallocate a singleton color_space_state (%p \"%s\")", v5, v6, v7, a1);
  }
  v2 = **(void (***)(uint64_t))(a1 + 104);
  if (v2)
    v2(a1);
  v3 = *(const void **)(a1 + 72);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 48);
  if (v4)
    CFRelease(v4);
  CGPropertiesRelease(*(_QWORD *)(a1 + 80));
  free(*(void **)(a1 + 88));
  free((void *)a1);
}

void indexed_finalize(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
  {
    CGColorSpaceRelease(*(CGColorSpaceRef *)v1);
    free(*(void **)(v1 + 16));
  }
}

void icc_finalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  const void *v10;
  const void *v11;

  v8 = *(_DWORD *)(a1 + 20);
  if (v8 != 6)
    _CGHandleAssert("icc_finalize", 91, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/ColorSpaces/CGColorSpace_ICC.c", "state->type == kCGColorSpaceICCBased", "Colorspace not ICC based. type = %d", a6, a7, a8, v8);
  v9 = *(_QWORD *)(a1 + 88);
  if (v9)
  {
    CGColorSpaceRelease(*(CGColorSpaceRef *)(v9 + 56));
    CGDataProviderRelease(*(CGDataProviderRef *)(v9 + 8));
    v10 = *(const void **)(v9 + 16);
    if (v10)
      CFRelease(v10);
    v11 = *(const void **)(v9 + 40);
    if (v11)
      CFRelease(v11);
    free(*(void **)(v9 + 64));
  }
}

BOOL CGFloatIsValid(double a1)
{
  double v1;

  v1 = fabs(a1);
  return v1 > INFINITY || v1 < INFINITY;
}

void CGContextSetTextMatrix(CGContextRef c, CGAffineTransform *t)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  CGContextRef v10;

  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      v8 = *(_OWORD *)&t->a;
      v9 = *(_OWORD *)&t->c;
      *(_OWORD *)((char *)c + 152) = *(_OWORD *)&t->tx;
      *(_OWORD *)((char *)c + 136) = v9;
      *(_OWORD *)((char *)c + 120) = v8;
      return;
    }
    v10 = c;
  }
  else
  {
    v10 = 0;
  }
  handle_invalid_context((char)"CGContextSetTextMatrix", (uint64_t)v10, v2, v3, v4, v5, v6, v7);
}

BOOL CGRectMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGRect *rect)
{
  int v4;
  BOOL result;

  if (!dict)
    return 0;
  if (!rect)
    return 0;
  get_point_from_dict(dict, &rect->origin.x);
  if (!v4)
    return 0;
  get_size_from_dict(dict, &rect->size.width);
  return result;
}

double get_point_from_dict(const __CFDictionary *a1, double *a2)
{
  double result;
  int v5;

  result = get_number_from_dict(a1, CFSTR("X"), a2);
  if (v5)
    return get_number_from_dict(a1, CFSTR("Y"), a2 + 1);
  return result;
}

double get_size_from_dict(const __CFDictionary *a1, double *a2)
{
  double result;
  int v5;

  result = get_number_from_dict(a1, CFSTR("Width"), a2);
  if (v5)
    return get_number_from_dict(a1, CFSTR("Height"), a2 + 1);
  return result;
}

double get_number_from_dict(const __CFDictionary *a1, const void *a2, double *a3)
{
  const __CFNumber *Value;
  double result;
  const __CFNumber *v6;
  float v7;
  double valuePtr;

  Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    v6 = Value;
    valuePtr = 0.0;
    if (CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr))
    {
      result = valuePtr;
      *a3 = valuePtr;
    }
    else
    {
      v7 = 0.0;
      if (CFNumberGetValue(v6, kCFNumberFloatType, &v7))
      {
        result = v7;
        *a3 = v7;
      }
    }
  }
  return result;
}

void color_transform_base_finalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
  *(_BYTE *)(a1 + 40) = 0;
}

CFTypeRef CGColorTransformRetain(CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  return cf;
}

void CGContextSetFillColorSpace(CGContextRef c, CGColorSpaceRef space)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGContextRef v8;
  char v9;

  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      set_fill_color_with_components((uint64_t *)c, space, 0, v3, v4, v5, v6, v7, v9);
      return;
    }
    v8 = c;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetFillColorSpace", (uint64_t)v8, v2, v3, v4, v5, v6, v7);
}

void CGContextSetStrokeColorSpace(CGContextRef c, CGColorSpaceRef space)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGContextRef v8;
  char v9;

  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      set_stroke_color_with_components((uint64_t *)c, space, 0, v3, v4, v5, v6, v7, v9);
      return;
    }
    v8 = c;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetStrokeColorSpace", (uint64_t)v8, v2, v3, v4, v5, v6, v7);
}

CGAffineTransform *__cdecl CGContextGetTextMatrix(CGAffineTransform *__return_ptr retstr, CGAffineTransform *c)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const CGAffineTransform *v9;
  __int128 v10;

  if (c && LODWORD(c->c) == 1129601108)
  {
    v9 = (CGAffineTransform *)((char *)c + 120);
  }
  else
  {
    handle_invalid_context((char)"CGContextGetTextMatrix", (uint64_t)c, v2, v3, v4, v5, v6, v7);
    v9 = &CGAffineTransformIdentity;
  }
  v10 = *(_OWORD *)&v9->c;
  *(_OWORD *)&retstr->a = *(_OWORD *)&v9->a;
  *(_OWORD *)&retstr->c = v10;
  *(_OWORD *)&retstr->tx = *(_OWORD *)&v9->tx;
  return c;
}

uint64_t CGImageProviderGetPixelSize(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 48);
  return result;
}

void CGImageTextureDataRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

CGFloat CGImageProviderGetSize(const CGSize *a1)
{
  const CGSize *v1;

  v1 = a1 + 1;
  if (!a1)
    v1 = &CGSizeZero;
  return v1->width;
}

const void *CGImageProviderGetProperty(uint64_t a1, const void *a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *(_QWORD *)(a1 + 120)) != 0)
    return CGPropertiesGetProperty(v2, a2);
  else
    return 0;
}

uint64_t CGImageProviderGetAlphaInfo(uint64_t result)
{
  if (result)
    return *(_DWORD *)(result + 36) & 0x1F;
  return result;
}

uint64_t CGPDFGStateGetStrokeColor(uint64_t result)
{
  uint64_t v1;
  CGColorSpace *DeviceGray;

  if (result)
  {
    v1 = result;
    result = *(_QWORD *)(result + 64);
    if (!result)
    {
      DeviceGray = CGColorSpaceCreateDeviceGray();
      *(_QWORD *)(v1 + 64) = CGColorSpaceCopyDefaultColor((uint64_t)DeviceGray);
      CGColorSpaceRelease(DeviceGray);
      return *(_QWORD *)(v1 + 64);
    }
  }
  return result;
}

const void *CGColorTransformCreateCGCMSConverter(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  CFTypeID v6;
  CGColorSpace *ResolvedColorSpace;
  _QWORD *Cache;
  const void *Converter;
  _QWORD v11[5];

  if (!a1)
    return 0;
  v6 = CFGetTypeID(a1);
  if (kCGColorTransformDefaultCMYK_block_invoke_once != -1)
    dispatch_once(&kCGColorTransformDefaultCMYK_block_invoke_once, &__block_literal_global_25_15643);
  if (v6 != CGColorTransformGetTypeID_type_id)
    return 0;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v11[2] = __create_resolved_source_space_block_invoke;
  v11[3] = &__block_descriptor_tmp_27_15656;
  v11[4] = a1;
  ResolvedColorSpace = (CGColorSpace *)CGColorSpaceCreateResolvedColorSpace(a2, (uint64_t)v11);
  Cache = CGColorTransformGetCache(a1);
  Converter = CGColorTransformCacheCreateConverter((uint64_t)Cache, ResolvedColorSpace, a3);
  CGColorSpaceRelease(ResolvedColorSpace);
  return Converter;
}

uint64_t rip_auto_context_update_content_info_from_GState(uint64_t a1, uint64_t a2)
{
  uint64_t FillColor;
  const void *v5;
  uint64_t StrokeColor;
  const void *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  int v11;
  unint64_t ColorSpace;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int content_type_from_color_space;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;

  FillColor = CGGStateGetFillColor(a2);
  if (FillColor < 1)
    v5 = 0;
  else
    v5 = *(const void **)(FillColor + 32);
  update_colored_pattern_info(a1 + 264, v5);
  StrokeColor = CGGStateGetStrokeColor(a2);
  if (StrokeColor < 1)
    v7 = 0;
  else
    v7 = *(const void **)(StrokeColor + 32);
  update_colored_pattern_info(a1 + 288, v7);
  if (!*(_BYTE *)(a1 + 104))
  {
    v8 = CGGStateGetFillColor(a2);
    v10 = CGColorIsWideGamut(v8)
       || (v9 = CGGStateGetStrokeColor(a2), CGColorIsWideGamut(v9))
       || *(_QWORD *)(a1 + 264) && *(_BYTE *)(a1 + 272)
       || *(_QWORD *)(a1 + 288) && *(_BYTE *)(a1 + 296);
    *(_BYTE *)(a1 + 104) = v10;
  }
  v11 = *(_DWORD *)(a1 + 108);
  ColorSpace = CGGStateGetFillColor(a2);
  if (ColorSpace)
  {
    if ((ColorSpace & 0x8000000000000000) != 0)
      ColorSpace = (unint64_t)CGTaggedColorGetColorSpace(ColorSpace, v13, v14, v15, v16, v17, v18, v19);
    else
      ColorSpace = *(_QWORD *)(ColorSpace + 24);
  }
  content_type_from_color_space = rip_auto_context_get_content_type_from_color_space(ColorSpace);
  v21 = *(_DWORD *)(a1 + 276);
  v22 = CGGStateGetStrokeColor(a2);
  if (v22)
  {
    if ((v22 & 0x8000000000000000) != 0)
      v22 = (unint64_t)CGTaggedColorGetColorSpace(v22, v23, v24, v25, v26, v27, v28, v29);
    else
      v22 = *(_QWORD *)(v22 + 24);
  }
  *(_DWORD *)(a1 + 108) = content_type_from_color_space | v11 | v21 | rip_auto_context_get_content_type_from_color_space(v22) | *(_DWORD *)(a1 + 300) | (2 * (*(_QWORD *)(*(_QWORD *)(a2 + 120) + 16) != 0));
  v36 = CGPixelComponentMax(*(unsigned int *)(a1 + 280), *(_DWORD *)(a1 + 100), v30, v31, v32, v33, v34, v35);
  *(_DWORD *)(a1 + 100) = v36;
  result = CGPixelComponentMax(*(unsigned int *)(a1 + 304), v36, v37, v38, v39, v40, v41, v42);
  *(_DWORD *)(a1 + 100) = result;
  *(_BYTE *)(a1 + 105) |= *(_BYTE *)(a1 + 297) | *(_BYTE *)(a1 + 273);
  return result;
}

uint64_t CGGStateGetStrokeColor(uint64_t a1)
{
  uint64_t result;
  CGColorSpace *v3;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 40);
  if (!result)
  {
    v3 = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceGenericGrayGamma2_2"));
    *(_QWORD *)(*(_QWORD *)(a1 + 128) + 40) = CGColorSpaceCopyDefaultColor((uint64_t)v3);
    CGColorSpaceRelease(v3);
    return *(_QWORD *)(*(_QWORD *)(a1 + 128) + 40);
  }
  return result;
}

uint64_t CGPixelComponentMax(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result >= 0xA)
    _CGHandleAssert("sort_weight", 280, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGBitmapPixelInfo.c", "(int)type >= 0 && (int)type <= (int)kCGPixelComponentTypeMax", "invalid pixel component type %d", a6, a7, a8, result);
  if (a2 >= 0xA)
    _CGHandleAssert("sort_weight", 280, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGBitmapPixelInfo.c", "(int)type >= 0 && (int)type <= (int)kCGPixelComponentTypeMax", "invalid pixel component type %d", a6, a7, a8, a2);
  if (sort_weight_weight[(int)result] <= sort_weight_weight[a2])
    return a2;
  else
    return result;
}

uint64_t rip_auto_context_get_content_type_from_color_space(uint64_t result)
{
  uint64_t v1;

  while (2)
  {
    if (result)
    {
      v1 = *(_QWORD *)(result + 24);
      result = 1;
      switch(*(_DWORD *)(v1 + 28))
      {
        case 0:
          return result;
        case 1:
          result = 2;
          break;
        case 2:
          result = 4;
          break;
        case 3:
          result = 8;
          break;
        case 4:
          result = 16;
          break;
        default:
          if (*(_DWORD *)(v1 + 24) == 6)
          {
            result = **(_QWORD **)(v1 + 88);
            if (result)
              continue;
          }
          else
          {
            result = 0;
          }
          break;
      }
    }
    break;
  }
  return result;
}

void update_colored_pattern_info(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CGContextRef v13;
  void (*v14)(_QWORD, CGContextRef);
  uint64_t v15;
  int v16;

  v3 = *(CFTypeRef *)a1;
  if (cf && *((_BYTE *)cf + 185))
  {
    if (v3 != cf)
    {
      if (v3)
        CFRelease(v3);
      CFRetain(cf);
      *(_QWORD *)a1 = cf;
      v13 = CGBitmapContextCreateWithCallbacks(2uLL, 2uLL, 0, 0, 0, 0, 0, v5);
      v14 = (void (*)(_QWORD, CGContextRef))*((_QWORD *)cf + 21);
      if (v14)
        v14(*((_QWORD *)cf + 10), v13);
      v15 = *(_QWORD *)(CGContextGetDelegate((uint64_t)v13, v6, v7, v8, v9, v10, v11, v12) + 288);
      *(_WORD *)(a1 + 8) = *(_WORD *)(v15 + 104);
      v16 = *(_DWORD *)(v15 + 108);
      LODWORD(v15) = *(_DWORD *)(v15 + 100);
      *(_DWORD *)(a1 + 12) = v16;
      *(_DWORD *)(a1 + 16) = v15;
      if (v13)
        CFRelease(v13);
    }
  }
  else if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
}

BOOL CGColorIsWideGamut(unint64_t a1)
{
  CGColor *v2;
  CGColor *v3;
  const CGFloat *Components;
  _BOOL8 v5;
  double v6;
  double v7;

  if (CGColorIsWideGamut_predicate != -1)
    dispatch_once(&CGColorIsWideGamut_predicate, &__block_literal_global_18_2241);
  v2 = CGColorTransformConvertColor((_QWORD *)CGColorIsWideGamut_transform, a1, 0);
  if (!v2)
    return 0;
  v3 = v2;
  Components = CGColorGetComponents(v2);
  v5 = 1;
  if (*Components >= -0.25 && *Components <= 1.03)
  {
    v6 = Components[1];
    if (v6 >= -0.2 && v6 <= 1.05)
    {
      v7 = Components[2];
      v5 = v7 > 1.02 || v7 < -0.1;
    }
  }
  CFRelease(v3);
  return v5;
}

CGColorRef CGColorTransformConvertColor(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFTypeID v13;
  CGColorRef v14;
  CGColorSpaceRef ColorSpace;
  _QWORD *Cache;
  __n128 v17;
  CGColorSpace *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  CGFloat *v23;
  CGFloat *v24;
  double *Components;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double Alpha;
  _QWORD v35[2];

  v35[1] = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v13 = CFGetTypeID(a1);
  if (kCGColorTransformDefaultCMYK_block_invoke_once != -1)
    dispatch_once(&kCGColorTransformDefaultCMYK_block_invoke_once, &__block_literal_global_25_15643);
  v14 = 0;
  if (a2 && v13 == CGColorTransformGetTypeID_type_id)
  {
    if ((a2 & 0x8000000000000000) != 0)
      ColorSpace = CGTaggedColorGetColorSpace(a2, v6, v7, v8, v9, v10, v11, v12);
    else
      ColorSpace = *(CGColorSpaceRef *)(a2 + 24);
    Cache = CGColorTransformGetCache(a1);
    if (Cache)
    {
      v18 = (CGColorSpace *)Cache[2];
      if (v18)
      {
        v19 = *(_QWORD *)(*((_QWORD *)v18 + 3) + 40);
LABEL_15:
        MEMORY[0x1E0C80A78](Cache, v17);
        v23 = (CGFloat *)((char *)v35 - v22);
        if (v21 <= 0x1FFFFFFFFFFFFFFELL)
          v24 = (CGFloat *)((char *)v35 - v22);
        else
          v24 = 0;
        if (v21 - 0x1FFFFFFFFFFFFFFFLL >= 0xE000000000000022)
          v24 = (CGFloat *)malloc_type_malloc(8 * v20, 0xF69293D9uLL);
        Components = (double *)CGColorGetComponents((CGColorRef)a2);
        if ((CGColorTransformConvertColorComponents((uint64_t)a1, ColorSpace, a3, Components, v24) & 1) != 0)
        {
          if ((a2 & 0x8000000000000000) != 0)
            Alpha = CGTaggedColorGetAlpha(a2, v26, v27, v28, v29, v30, v31, v32);
          else
            Alpha = *(double *)(a2 + 8 * *(_QWORD *)(a2 + 56) + 56);
          v24[v19] = Alpha;
          v14 = CGColorCreate(v18, v24);
          if (v24 != v23)
            free(v24);
        }
        else
        {
          if (v24 != v23)
            free(v24);
          return 0;
        }
        return v14;
      }
    }
    else
    {
      v18 = 0;
    }
    v19 = 0;
    goto LABEL_15;
  }
  return v14;
}

__CFArray *create_colorsync_profile_sequence(CGColorSpace *a1, CGColorSpace *a2, unsigned int a3, int a4)
{
  _BOOL4 v7;
  const __CFArray *ProfileSetForColorSpace;
  uint64_t v9;
  __CFString *v10;
  _BOOL4 v11;
  const __CFArray *v12;
  __CFArray *Mutable;
  __CFArray *v14;
  CFRange v16;
  CFRange v17;

  if (a2)
    v7 = *(_BYTE *)(*((_QWORD *)a2 + 3) + 13) != 0;
  else
    v7 = 0;
  ProfileSetForColorSpace = CGCMSUtilsCreateProfileSetForColorSpace(a2, CFSTR("ColorSyncTransformDeviceToPCS"), a3, a4, v7, 0);
  if (CGColorSpaceGetType(a1) == 6)
  {
    v9 = *((_QWORD *)a1 + 3);
    if (*(_BYTE *)(v9 + 18))
      v10 = CFSTR("ColorSyncTransformPCSToSceneLinear");
    else
      v10 = CFSTR("ColorSyncTransformPCSToDevice");
  }
  else
  {
    if (!a1)
    {
      v11 = 0;
      v10 = CFSTR("ColorSyncTransformPCSToDevice");
      goto LABEL_12;
    }
    v9 = *((_QWORD *)a1 + 3);
    v10 = CFSTR("ColorSyncTransformPCSToDevice");
  }
  v11 = *(unsigned __int8 *)(v9 + 13) != 0;
LABEL_12:
  v12 = CGCMSUtilsCreateProfileSetForColorSpace(a1, v10, a3, a4, v11, 1u);
  if (v12 && ProfileSetForColorSpace)
  {
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v16.length = CFArrayGetCount(ProfileSetForColorSpace);
      v16.location = 0;
      CFArrayAppendArray(Mutable, ProfileSetForColorSpace, v16);
      v17.length = CFArrayGetCount(v12);
      v17.location = 0;
      CFArrayAppendArray(Mutable, v12, v17);
    }
  }
  else
  {
    Mutable = 0;
    v14 = 0;
    if (!ProfileSetForColorSpace)
      goto LABEL_18;
  }
  CFRelease(ProfileSetForColorSpace);
  v14 = Mutable;
LABEL_18:
  if (v12)
    CFRelease(v12);
  return v14;
}

CFArrayRef CGCMSUtilsCreateProfileSetForColorSpace(CGColorSpace *a1, __CFString *a2, unsigned int a3, int a4, int a5, unsigned int a6)
{
  __CFArray *ProfileSet;
  CFDataRef v13;
  void *ProfileSetForColorSpace_f;
  CFArrayRef result;
  void *FlexGTCProfile;
  __CFString *v17;
  void **v18;
  uint64_t v19;
  const __CFArray *v20;
  uint64_t Count;
  CFIndex v22;
  void *v23;
  const void *ValueAtIndex;
  CFTypeID v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const __CFDictionary *v29;
  CGColorSpace *v30;
  __CFString *v31;
  const __CFDictionary *v32;
  char v33;

  ProfileSet = 0;
  switch(CGColorSpaceGetType(a1))
  {
    case 3u:
    case 4u:
    case 5u:
      v13 = CGColorSpaceCopyICCData(a1);
      if (CGCMSUtilsCreateProfileSetForColorSpace_cglibrarypredicate != -1)
        dispatch_once(&CGCMSUtilsCreateProfileSetForColorSpace_cglibrarypredicate, &__block_literal_global_354);
      ProfileSetForColorSpace_f = (void *)CGCMSUtilsCreateProfileSetForColorSpace_f(v13, 0);
      ProfileSet = CGCMSUtilsCreateProfileSet(a1, ProfileSetForColorSpace_f, a2, a3, a4, a5);
      if (v13)
        CFRelease(v13);
      if (ProfileSetForColorSpace_f)
        CFRelease(ProfileSetForColorSpace_f);
      goto LABEL_8;
    case 6u:
      FlexGTCProfile = *(void **)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 88) + 16);
      goto LABEL_36;
    case 0xAu:
      if (a3 > 4)
        v17 = CFSTR("ColorSyncRenderingIntentPerceptual");
      else
        v17 = (__CFString *)*((_QWORD *)&off_1E1631B78 + a3);
      if (a4)
        v18 = (void **)MEMORY[0x1E0C9AE50];
      else
        v18 = (void **)MEMORY[0x1E0C9AE40];
      v19 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 88) + 8 * a6;
      v20 = *(const __CFArray **)(v19 + 8);
      if (v20)
      {
        Count = CFArrayGetCount(*(CFArrayRef *)(v19 + 8));
        ProfileSet = CFArrayCreateMutable(0, Count, MEMORY[0x1E0C9B378]);
        if (Count >= 1)
        {
          v22 = 0;
          v23 = *v18;
          do
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v20, v22);
            v25 = CFGetTypeID(ValueAtIndex);
            if (v25 != CFDictionaryGetTypeID())
              _CGHandleAssert("copy_set_with_parameters", 1525, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGCMSUtils.c", "CFGetTypeID(oldDict) == CFDictionaryGetTypeID()", "expected dictionary", v26, v27, v28, v33);
            if (!v22 && CFEqual(a2, CFSTR("ColorSyncTransformDeviceToPCS"))
              || Count - 1 == v22 && CFEqual(a2, CFSTR("ColorSyncTransformPCSToDevice")))
            {
              v29 = (const __CFDictionary *)ValueAtIndex;
              v30 = a1;
              v31 = a2;
            }
            else
            {
              v29 = (const __CFDictionary *)ValueAtIndex;
              v30 = a1;
              v31 = CFSTR("ColorSyncTransformPCSToPCS");
            }
            v32 = copy_profile_dictionary_with_parameters(v29, v30, v31, v17, v23);
            if (v32)
            {
              CFArrayAppendValue(ProfileSet, v32);
              CFRelease(v32);
            }
            ++v22;
          }
          while (Count != v22);
        }
      }
      else
      {
        ProfileSet = 0;
      }
      goto LABEL_8;
    case 0xBu:
      if (a6)
      {
        if (a6 == 1)
          FlexGTCProfile = **(void ***)(*((_QWORD *)a1 + 3) + 88);
        else
          FlexGTCProfile = 0;
      }
      else
      {
        FlexGTCProfile = (void *)CGColorSpaceFlexGTCProxyGetFlexGTCProfile((uint64_t)a1);
      }
LABEL_36:
      result = CGCMSUtilsCreateProfileSet(a1, FlexGTCProfile, a2, a3, a4, a5);
      break;
    default:
LABEL_8:
      result = ProfileSet;
      break;
  }
  return result;
}

CFArrayRef CGCMSUtilsCreateProfileSet(_QWORD *a1, void *a2, void *a3, unsigned int a4, int a5, int a6)
{
  const __CFString *v9;
  void *v10;
  void *v11;
  const __CFString *v12;
  CFArrayRef v13;
  CFIndex v15;
  CFDictionaryRef v16;
  CFDictionaryRef v17;
  void *values[7];
  void *keys[8];

  keys[7] = *(void **)MEMORY[0x1E0C80C00];
  if (a4 > 4)
    v9 = CFSTR("ColorSyncRenderingIntentPerceptual");
  else
    v9 = (const __CFString *)*((_QWORD *)&off_1E1631B78 + a4);
  if (a5)
    v10 = (void *)*MEMORY[0x1E0C9AE50];
  else
    v10 = (void *)*MEMORY[0x1E0C9AE40];
  if (a6)
    v11 = (void *)*MEMORY[0x1E0C9AE50];
  else
    v11 = (void *)*MEMORY[0x1E0C9AE40];
  if (CGColorSpaceGetType(a1) == 6 && *(_BYTE *)(a1[3] + 19))
  {
    v12 = CFSTR("com.apple.cmm.PQDerivative");
  }
  else
  {
    v12 = (const __CFString *)*MEMORY[0x1E0C9B0D0];
    if (CGColorSpaceGetType(a1) == 6 && *(_BYTE *)(a1[3] + 18))
      v12 = CFSTR("com.apple.cmm.HLGDerivative");
  }
  v13 = 0;
  if (a2 && a3 && v10 && v12 != 0)
  {
    keys[0] = CFSTR("ColorSyncProfile");
    keys[1] = CFSTR("ColorSyncRenderingIntent");
    keys[2] = CFSTR("ColorSyncTransformTag");
    keys[3] = CFSTR("ColorSyncBlackPointCompensation");
    keys[4] = CFSTR("com.apple.cmm.ExtendedRange");
    keys[5] = CFSTR("com.apple.cmm.HDRDerivative");
    keys[6] = CFSTR("kCGColorSpace");
    values[0] = a2;
    values[1] = (void *)v9;
    values[2] = a3;
    values[3] = v10;
    values[4] = v11;
    values[5] = (void *)v12;
    if (a1)
      v15 = 7;
    else
      v15 = 6;
    values[6] = a1;
    v16 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v15, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v16)
    {
      v17 = v16;
      keys[0] = v16;
      v13 = CFArrayCreate(0, (const void **)keys, 1, MEMORY[0x1E0C9B378]);
      CFRelease(v17);
    }
    else
    {
      return 0;
    }
  }
  return v13;
}

uint64_t render_glyph_list(uint64_t result, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  char *Color;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  if (*((_QWORD *)a2 + 2))
  {
    v9 = result;
    v33[0] = 0;
    v33[1] = 0;
    v10 = a5[5];
    if (v10)
    {
      if ((*(_BYTE *)(v10 + 12) & 0x10) != 0)
        v11 = a5[5];
      else
        v11 = 0;
    }
    else
    {
      v11 = 0;
    }
    v12 = (__int128 *)(a5 + 1);
    if (v11)
      v12 = (__int128 *)(a5 + 3);
    v13 = *v12;
    v34 = *a2;
    v35 = v13;
    v36 = 0;
    v37 = 0;
    result = CGSBoundsIntersection((int *)&v35, (int *)&v34, v33);
    if ((_DWORD)result)
    {
      *(_DWORD *)(v9 + 104) = (int)(*(_DWORD *)(*(_QWORD *)(a4 + 120) + 4) << 16) >> 24;
      *(_BYTE *)(v9 + 108) = *(_BYTE *)(a3 + 82);
      *(_DWORD *)(v9 + 112) = (int)(*(_DWORD *)(*(_QWORD *)(a4 + 120) + 4) << 12) >> 28;
      v15 = *(double *)(*(_QWORD *)(a4 + 136) + 40);
      *(float *)(v9 + 168) = v15;
      result = (uint64_t)ripc_GetColor(v9, a3, a4, 2, (int *)v33, (uint64_t)&v37, (double *)(v9 + 152), v14);
      if (result)
      {
        v17 = result;
        Color = ripc_GetColor(v9, a3, a4, 8, (int *)v33, (uint64_t)&v36, (double *)(v9 + 160), v16);
        if (v11)
          (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD *, __int128 *, uint64_t, uint64_t *, char *, uint64_t *, uint64_t))(*(_QWORD *)v11 + 64))(v11, *(_QWORD *)(v9 + 48), *a5, v33, a2, v17, &v37, Color, &v36, v9 + 104);
        else
          RIPLayerBltGlyph(*(_DWORD **)(v9 + 48), *a5, v33, a2, v17, &v37, (uint64_t)Color, v9 + 104);
        RIPObjectRelease(v17, v19, v20, v21, v22, v23, v24, v25);
        return RIPObjectRelease((uint64_t)Color, v26, v27, v28, v29, v30, v31, v32);
      }
    }
  }
  return result;
}

char *ripc_GetColor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6, double *a7, uint64_t a8)
{
  int *v9;
  uint64_t v11;
  uint64_t v12;
  char *v14;
  uint64_t FillColor;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double Alpha;
  double v25;
  double v26;
  int v27;
  uint64_t v28;
  unint64_t PatternBaseColor;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  float64x2_t v35;
  double v36;
  int v37;
  int v38;
  _QWORD *Cache;
  __n128 v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double *v50;
  double *v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  size_t v55;
  uint64_t v56;
  double v57;
  CGColor *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  CGColorSpaceRef ColorSpace;
  uint64_t v64;
  double *Components;
  float *v66;
  double *v67;
  double v68;
  float v69;
  int v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  double v74;
  double v75;
  double v76;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  int v90;
  unsigned int v91;
  double v92;
  unsigned int v93;
  int v94;
  double v95;
  double v97;
  double v99;
  double v101;
  double v105;
  uint64_t v108;
  uint64_t v109;
  double v110;
  uint64_t v111;
  int v112;
  unsigned int v113;
  CGAffineTransform *v114;
  __int128 v115;
  int v116;
  CGFloat v117;
  unint64_t v118;
  uint64_t v119;
  double v120;
  double v121;
  double v122;
  double v123;
  unsigned int v124;
  BOOL v125;
  unsigned int v126;
  BOOL v127;
  CGFloat v128;
  uint64_t v130;
  uint64_t v131;
  uint64_t v133;
  uint64_t *v134;
  int v135;
  uint64_t v136;
  uint64_t *Entry;
  uint64_t *v138;
  double v139;
  uint64_t v140;
  CGFloat v141;
  CGFloat v142;
  BOOL v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  double v148;
  double v149;
  int v150;
  int v151;
  BOOL v152;
  double v153;
  double v154;
  CGFloat v155;
  CGFloat v156;
  CGFloat v157;
  CGFloat v158;
  int v159;
  int v161;
  unsigned __int8 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  double v167;
  double v168;
  unsigned int v169;
  int v170;
  double v171;
  unsigned int v172;
  double v173;
  int *v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t *v192;
  _QWORD *v193;
  int v194;
  CGFloat v195;
  unint64_t *v196;
  _QWORD *v197;
  _QWORD *v199;
  unint64_t v201;
  _QWORD *v202;
  CGFloat v203;
  int v204;
  __int128 v205;
  CGFloat v206;
  CGFloat v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t *v211;
  _QWORD v212[2];
  CGFloat v213;
  CGFloat v214;
  double v215;
  CGFloat v216;
  CGFloat v217;
  CGFloat v218;
  double v219;
  CGFloat v220;
  double v221;
  CGFloat v222;
  double v223;
  CGFloat v224;
  CGFloat v225;
  double v226;
  CGFloat v227;
  double height;
  CGFloat y;
  uint64_t v230;
  CGFloat v231;
  CGFloat width;
  double x;
  int *v234;
  uint64_t v235;
  unint64_t v236;
  CGAffineTransform v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  unint64_t v244;
  uint64_t v245;
  CGAffineTransform v246;
  int v247;
  CGAffineTransform v248;
  uint64_t v249;
  CGRect v250;
  CGRect v251;
  CGRect v252;
  CGRect v253;
  CGRect v254;
  CGRect v255;
  CGRect v256;
  CGRect v257;
  CGRect v258;
  CGRect v259;
  CGRect v260;
  CGRect v261;

  v9 = (int *)a6;
  v11 = a3;
  v12 = a2;
  v249 = *MEMORY[0x1E0C80C00];
  if ((a4 & 2) != 0)
  {
    FillColor = CGGStateGetFillColor(a3);
    if (FillColor)
    {
      v14 = *(char **)(a1 + 176);
      if ((FillColor & 0x8000000000000000) == 0)
      {
LABEL_10:
        Alpha = *(double *)(FillColor + 8 * *(_QWORD *)(FillColor + 56) + 56);
        goto LABEL_11;
      }
LABEL_7:
      v23 = FillColor;
      Alpha = CGTaggedColorGetAlpha(FillColor, v16, v17, v18, v19, v20, v21, v22);
      FillColor = v23;
LABEL_11:
      v25 = Alpha * *(double *)(*(_QWORD *)(v11 + 120) + 8);
      goto LABEL_12;
    }
LABEL_17:
    v14 = 0;
    *a7 = *(double *)(*(_QWORD *)(v11 + 120) + 8) * 0.0;
    return v14;
  }
  if ((a4 & 1) != 0)
  {
    FillColor = CGGStateGetStrokeColor(a3);
    if (FillColor)
    {
      v14 = *(char **)(a1 + 184);
      if ((FillColor & 0x8000000000000000) == 0)
        goto LABEL_10;
      goto LABEL_7;
    }
    goto LABEL_17;
  }
  if ((a4 & 8) == 0)
    return 0;
  v52 = *(_QWORD *)(a3 + 136);
  FillColor = *(_QWORD *)(v52 + 64);
  if (!FillColor)
  {
    v14 = 0;
    *a7 = 0.0;
    return v14;
  }
  v14 = *(char **)(a1 + 192);
  if (FillColor < 0)
  {
    v53 = *(_QWORD *)(v52 + 64);
    v54 = CGTaggedColorGetAlpha(FillColor, a2, a3, a4, (uint64_t)a5, a6, (uint64_t)a7, a8);
    FillColor = v53;
    v25 = v54;
  }
  else
  {
    v25 = *(double *)(FillColor + 8 * *(_QWORD *)(FillColor + 56) + 56);
  }
LABEL_12:
  *a7 = v25;
  v26 = 0.0;
  if (v25 < 0.0 || (v26 = 1.0, v25 > 1.0))
  {
    *a7 = v26;
    v25 = v26;
  }
  if (FillColor < 0)
    v27 = FillColor;
  else
    v27 = *(_DWORD *)(FillColor + 16);
  if (*((_QWORD *)v14 + 1) == FillColor && *((_DWORD *)v14 + 4) == v27)
    goto LABEL_57;
  v236 = FillColor;
  if (FillColor < 1 || (v28 = *(_QWORD *)(FillColor + 32)) == 0)
  {
    LODWORD(width) = v27;
    Cache = CGColorTransformGetCache(*(_QWORD **)(a1 + 120));
    v234 = v9;
    v235 = v12;
    if (Cache)
    {
      v41 = Cache[2];
      if (v41)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v41 + 24) + 40);
        if (v42 >> 61)
        {
          *(_QWORD *)&x = &v213;
          MEMORY[0x1E0C80A78](Cache, v40);
          v50 = (double *)v212;
          v51 = 0;
LABEL_45:
          v58 = (CGColor *)v236;
          v59 = v14;
          v60 = v11;
          v61 = *(_QWORD *)(a1 + 120);
          v62 = a1;
          if ((v236 & 0x8000000000000000) != 0)
          {
            ColorSpace = CGTaggedColorGetColorSpace(v236, v43, v44, v45, v46, v47, v48, v49);
            v58 = (CGColor *)v236;
          }
          else
          {
            ColorSpace = *(CGColorSpaceRef *)(v236 + 24);
          }
          v64 = ((int)(*(_DWORD *)(*(_QWORD *)(v60 + 120) + 4) << 12) >> 28);
          Components = (double *)CGColorGetComponents(v58);
          if (CGColorTransformConvertColorComponents(v61, ColorSpace, v64, Components, v51))
          {
            a1 = v62;
            v14 = v59;
            if (v42)
            {
              v66 = (float *)(v59 + 28);
              v67 = v51;
              do
              {
                v68 = *v67++;
                v69 = v68;
                *v66++ = v69;
                --v42;
              }
              while (v42);
            }
            v70 = *(_DWORD *)(v62 + 128);
            v11 = v60;
            v71 = v236;
            v72 = LODWORD(width);
          }
          else
          {
            v70 = 0;
            v71 = 0;
            v72 = 0;
            v14 = v59;
            *((_DWORD *)v59 + 7) = 0;
            a1 = v62;
            v11 = v60;
          }
          v9 = v234;
          *((_DWORD *)v14 + 6) = v70;
          *((_QWORD *)v14 + 1) = v71;
          *((_DWORD *)v14 + 4) = v72;
          v12 = v235;
          if (v51 != v50)
            free(v51);
          *((_DWORD *)v14 + 39) = 1065353216;
LABEL_57:
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 48) + 29) & 2) != 0)
          {
            v73 = *(_QWORD *)(v11 + 120);
            v74 = *(double *)(v73 + 24);
            v75 = *(double *)(v73 + 32);
            v76 = *(double *)(a1 + 40);
            _ZF = v76 == 1.0;
            v78 = *(double *)(v12 + 24) * v76;
            v79 = *(double *)(v12 + 32) * v76;
            v80 = *(double *)(v12 + 40) * v76;
            v81 = *(double *)(v12 + 48) * v76;
            v82 = *(double *)(v12 + 56) * v76;
            v83 = *(double *)(v12 + 64) * v76;
            if (_ZF)
            {
              v78 = *(double *)(v12 + 24);
              v84 = *(double *)(v12 + 32);
            }
            else
            {
              v84 = v79;
            }
            if (_ZF)
              v85 = *(double *)(v12 + 40);
            else
              v85 = v80;
            if (_ZF)
              v86 = *(double *)(v12 + 48);
            else
              v86 = v81;
            if (_ZF)
              v87 = *(double *)(v12 + 56);
            else
              v87 = v82;
            if (_ZF)
              v88 = *(double *)(v12 + 64);
            else
              v88 = v83;
            v89 = v75 * v85 + v78 * v74 + v87;
            if (v89 <= 1073741820.0)
            {
              v91 = vcvtmd_s64_f64(v89);
              if (v89 >= -1073741820.0)
                v90 = v91;
              else
                v90 = -1073741823;
            }
            else
            {
              v90 = 0x3FFFFFFF;
            }
            *v9 = v90;
            v92 = v75 * v86 + v84 * v74 + v88;
            if (v92 <= 1073741820.0)
            {
              if (v92 >= -1073741820.0)
                v93 = vcvtmd_s64_f64(v92);
              else
                v93 = -1073741823;
            }
            else
            {
              v93 = 0x3FFFFFFF;
            }
            v9[1] = v93;
          }
          else
          {
            *(_QWORD *)v9 = 0;
          }
          return v14;
        }
        Cache = (_QWORD *)(8 * v42);
      }
      else
      {
        v42 = 0;
        Cache = 0;
      }
    }
    else
    {
      v42 = 0;
    }
    v55 = MEMORY[0x1E0C80A78](Cache, v40);
    v50 = (CGFloat *)((char *)&v213 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v42 <= 0x1FFFFFFFFFFFFFFELL)
      v51 = (CGFloat *)((char *)&v213 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0));
    else
      v51 = 0;
    x = v57;
    if (v42 - 0x1FFFFFFFFFFFFFFFLL >= 0xE000000000000022)
      v51 = (double *)malloc_type_malloc(v55, 0x2BA212EuLL);
    goto LABEL_45;
  }
  PatternBaseColor = CGColorGetPatternBaseColor(FillColor);
  if (v25 < 0.0 || v25 > 1.0)
    _CGHandleAssert("ripc_GetPattern", 685, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/RIP/RIPColor.c", "alpha >= 0 && alpha <= 1", "alpha (%f) must be [0,1]", v30, v31, v32, SLOBYTE(v25));
  v34 = PatternBaseColor;
  v239 = 0u;
  v240 = 0u;
  v238 = 0u;
  *(_QWORD *)v9 = 0;
  v35 = *(float64x2_t *)(v12 + 40);
  v241 = *(float64x2_t *)(v12 + 24);
  v242 = v35;
  v243 = *(float64x2_t *)(v12 + 56);
  v36 = *(double *)(a1 + 40);
  if (v36 != 1.0)
  {
    v241 = vmulq_n_f64(v241, v36);
    v242 = vmulq_n_f64(v242, v36);
    v243 = vmulq_n_f64(v243, v36);
  }
  v37 = *(unsigned __int8 *)(v12 + 81);
  v230 = v11;
  v231 = *(double *)&a1;
  if (v37)
    v38 = (*(_DWORD *)(*(_QWORD *)(v11 + 120) + 4) >> 8) & 0x10000;
  else
    v38 = 0;
  v94 = *(unsigned __int8 *)(v12 + 82);
  v244 = 0;
  v245 = 0;
  _D12 = *(double *)(v28 + 24);
  v95 = *(double *)(v28 + 32);
  v97 = *(double *)(v28 + 48);
  _D14 = *(double *)(v28 + 56);
  v99 = *(double *)(v28 + 64);
  _V0.D[1] = v241.f64[1];
  v101 = vmlad_n_f64(v95 * v242.f64[0], _D12, v241.f64[0]);
  v226 = *(double *)(v28 + 40);
  v227 = v95;
  __asm { FMLA            D9, D12, V0.D[1] }
  v237.a = v101;
  v237.b = _D9;
  v105 = vmlad_n_f64(v97 * v242.f64[0], v226, v241.f64[0]);
  __asm { FMLA            D11, D3, V0.D[1] }
  v237.c = v105;
  v237.d = _D11;
  __asm { FMLA            D1, D14, V0.D[1] }
  v224 = vmlad_n_f64(v99 * v242.f64[0], _D14, v241.f64[0]) + 0.0;
  v225 = v97;
  v237.tx = v224;
  v237.ty = _D1 + 0.0;
  v223 = _D1 + 0.0;
  v250 = *(CGRect *)(v28 + 104);
  v246 = v237;
  width = v250.size.width;
  x = v250.origin.x;
  height = v250.size.height;
  y = v250.origin.y;
  v251 = CGRectApplyAffineTransform(v250, &v246);
  v110 = v251.origin.x;
  v111 = 0;
  v112 = *(_DWORD *)(v28 + 20);
  if (v112 != 1)
  {
    v14 = 0;
    if (v251.origin.x == INFINITY)
      return v14;
    if (v251.origin.y == INFINITY)
      return v14;
    v14 = 0;
    if (v251.size.width == 0.0 || v251.size.height == 0.0)
      return v14;
    if (v112 || !*(_BYTE *)(v28 + 184))
      v111 = 0;
    else
      v111 = *(_QWORD *)(v28 + 80);
  }
  v220 = v251.origin.y;
  v221 = v251.size.width;
  v222 = v251.size.height;
  v113 = vcvtpd_s64_f64(v25 * 255.0) | (v94 << 8);
  v114 = &v237;
  if (!v111)
    v114 = (CGAffineTransform *)&v241;
  v115 = *(_OWORD *)&v114->c;
  v238 = *(_OWORD *)&v114->a;
  v239 = v115;
  v240 = *(_OWORD *)&v114->tx;
  v219 = _D12;
  if (RIPGetCacheState_predicate != -1)
  {
    v195 = v251.origin.x;
    dispatch_once(&RIPGetCacheState_predicate, &__block_literal_global_9_12336);
    v110 = v195;
  }
  v116 = v113 | v38;
  if (*(_BYTE *)(RIPGetCacheState_cache_state + 33)
    && (v117 = v110, v118 = CGColorGetPatternBaseColor(v236), v110 = v117, !v118))
  {
    v133 = *(_QWORD *)(v236 + 32);
    if (v133)
    {
      if (!*(_DWORD *)(v133 + 20) && *(_BYTE *)(v133 + 184) && (v140 = *(_QWORD *)(v133 + 80)) != 0)
      {
        v134 = (uint64_t *)(v140 + 232);
        v135 = 2;
      }
      else
      {
        v134 = (uint64_t *)(v133 + 88);
        v135 = 1;
      }
      v119 = v12;
      v136 = *v134;
    }
    else
    {
      v119 = v12;
      v136 = 0;
      v135 = 1;
    }
    *(_QWORD *)&v246.a = MEMORY[0x1E0C809B0];
    *(_QWORD *)&v246.b = 0x40000000;
    *(_QWORD *)&v246.c = __lookup_pattern_entry_block_invoke;
    *(_QWORD *)&v246.d = &__block_descriptor_tmp_18334;
    *(_QWORD *)&v246.tx = &v238;
    v246.ty = v231;
    v247 = v116;
    Entry = RIPDataGetEntry(*(uint64_t *)&v231, v136, v135, (uint64_t)&v246);
    v110 = v117;
    if (Entry)
    {
      v138 = Entry;
      if (v111)
      {
        v139 = v220;
      }
      else
      {
        v141 = *((double *)Entry + 18);
        v142 = *((double *)Entry + 19);
        v252.origin.x = v117;
        v139 = v220;
        v252.origin.y = v220;
        v252.size.width = v221;
        v252.size.height = v222;
        *(_QWORD *)&v261.origin.x = Entry[16];
        *(_QWORD *)&v261.origin.y = Entry[17];
        v261.size.width = v141;
        v261.size.height = v142;
        v143 = CGRectEqualToRect(v252, v261);
        v110 = v117;
        if (!v143)
        {
          *(CGFloat *)v212 = v141;
          *(CGFloat *)&v212[1] = v142;
          _CGHandleAssert("ripc_GetPattern", 725, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/RIP/RIPColor.c", "CGRectEqualToRect(bbox, p->bounds)", "bbox{o:{%f,%f}, s:{%f,%f}} != bounds{o:{%f,%f}, s:{%f,%f}}", v144, v145, v146, SLOBYTE(v117));
        }
      }
      get_pattern_phase(v241.f64, v9, *(double *)(*(_QWORD *)(v230 + 120) + 24), *(double *)(*(_QWORD *)(v230 + 120) + 32), v110, v139);
      v147 = v138[20];
      if (v147)
      {
        v14 = (char *)v138[20];
        (*(void (**)(void))(*(_QWORD *)v147 + 16))();
        return v14;
      }
      return 0;
    }
  }
  else
  {
    v119 = v12;
  }
  if (x == INFINITY
    || y == INFINITY
    || width == 0.0
    || height == 0.0
    || *(double *)(v28 + 136) != width
    || *(double *)(v28 + 144) != height
    || v221 * v222 > (double)(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v231 + 48) + 24)
                            * *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v231 + 48) + 20)))
  {
    goto LABEL_112;
  }
  v120 = fabs(width * v101);
  v121 = fabs(width * _D9);
  v122 = fabs(height * v105);
  v123 = fabs(height * _D11);
  v124 = vcvtd_n_s64_f64(v121, 8uLL);
  if (vcvtd_n_s64_f64(v122, 8uLL))
    v125 = 0;
  else
    v125 = v124 == 0;
  if (v125)
  {
    v128 = v219;
  }
  else
  {
    v126 = vcvtd_n_s64_f64(v123, 8uLL);
    if (vcvtd_n_s64_f64(v120, 8uLL))
      v127 = 0;
    else
      v127 = v126 == 0;
    v128 = v219;
    if (v127)
    {
      v120 = v122;
      v123 = v121;
    }
    else
    {
      v120 = v120 + v122;
      v123 = v121 + v123;
      if (v120 > 1.0 || v123 > 1.0)
      {
LABEL_112:
        v130 = *(_QWORD *)&v231;
        v131 = v119;
        return create_pattern_tile_pattern(v130, v131, v230, v236, a5, &v241, v108, v109, v25);
      }
    }
  }
  v235 = v119;
  v148 = round(v120);
  if (v120 <= 1.0)
    v148 = 1.0;
  v149 = round(v123);
  if (v123 <= 1.0)
    v149 = 1.0;
  v150 = (int)v148;
  v151 = (int)v149;
  LODWORD(v245) = (int)v148;
  HIDWORD(v245) = (int)v149;
  v152 = (int)v148 <= 1 && v151 < 2;
  if (!v152 && !*(_DWORD *)(v28 + 152))
  {
    v179 = vcvtd_n_s64_f64(v149 - v123, 8uLL);
    if (vcvtd_n_s64_f64(v148 - v120, 8uLL) || v179 != 0)
    {
      v130 = *(_QWORD *)&v231;
      v131 = v235;
      return create_pattern_tile_pattern(v130, v131, v230, v236, a5, &v241, v108, v109, v25);
    }
  }
  v215 = v110;
  v234 = v9;
  v217 = (double)v151;
  v218 = (double)v150;
  v153 = v148 / v120;
  v154 = v149 / v123;
  v155 = v101 * v153;
  v156 = _D9 * v153;
  v237.a = v155;
  v237.b = v156;
  v157 = v105 * v154;
  v158 = _D11 * v154;
  v237.c = v157;
  v237.d = v158;
  v246 = v237;
  v253.size.width = width;
  v253.origin.x = x;
  v253.size.height = height;
  v253.origin.y = y;
  v254 = CGRectApplyAffineTransform(v253, &v246);
  v213 = v254.size.height;
  v214 = v254.size.width;
  y = v254.origin.x;
  LODWORD(x) = vcvtmd_s64_f64(v254.origin.x);
  width = v254.origin.y;
  v159 = vcvtmd_s64_f64(v254.origin.y);
  v216 = floor(v254.origin.x);
  v244 = __PAIR64__(v159, LODWORD(x));
  height = floor(v254.origin.y);
  v248.a = v128;
  v248.b = v227;
  v248.c = v226;
  v248.d = v225;
  v248.tx = _D14;
  v248.ty = v99;
  CGAffineTransformInvert(&v246, &v248);
  v237.a = v246.b * v157 + v246.a * v155;
  v237.b = v246.b * v158 + v246.a * v156;
  v237.c = v246.d * v157 + v246.c * v155;
  v237.d = v246.d * v158 + v246.c * v156;
  v237.tx = v224 + v157 * v246.ty + v246.tx * v155 + v216 - y;
  v237.ty = v158 * v246.ty + v246.tx * v156 + v223 + height - width;
  if (*(_BYTE *)(v28 + 186))
    _NF = v25 < 1.0;
  else
    _NF = 1;
  if (_NF)
    v161 = 33;
  else
    v161 = 32;
  v162 = RIPShouldCachePatterns();
  v166 = v161 | 4;
  if ((v162 & (v34 == 0)) == 0)
    v166 = v161;
  v167 = *(double *)(*(_QWORD *)(*(_QWORD *)&v231 + 48) + 32);
  v168 = (double)SLODWORD(x);
  v169 = v150 | v151;
  if ((v169 & 0x80000000) != 0)
  {
    v170 = v166;
    v255.origin.x = v216;
    v255.origin.y = height;
    v171 = v217;
    v255.size.width = v218;
    v255.size.height = v217;
    if (COERCE_DOUBLE(CGRectStandardize(v255)) != v168)
      return 0;
    v256.origin.x = v216;
    v256.origin.y = height;
    v256.size.width = v218;
    v256.size.height = v217;
    v257 = CGRectStandardize(v256);
    if (v257.origin.y != (double)v159)
      return 0;
    x = v167;
    v258.origin.x = v216;
    v258.origin.y = height;
    v258.size.width = v218;
    v258.size.height = v217;
    v259 = CGRectStandardize(v258);
    if (v259.size.width != v218)
      return 0;
    v172 = v169 >> 31;
    v173 = v217;
    v174 = v234;
    v175 = v235;
    v166 = v170;
    if (v172)
    {
      v260.origin.x = v216;
      v260.origin.y = height;
      v260.size.width = v218;
      v260.size.height = v217;
      *(CGRect *)(&v173 - 3) = CGRectStandardize(v260);
      v166 = v170;
    }
  }
  else
  {
    v176 = v159;
    v171 = v217;
    v14 = 0;
    v174 = v234;
    if (v216 != v168 || height != (double)v176)
      return v14;
    x = *(double *)(*(_QWORD *)(*(_QWORD *)&v231 + 48) + 32);
    v173 = v217;
    v175 = v235;
  }
  if (v173 != v171)
    return 0;
  v177 = *(_QWORD *)(*(_QWORD *)&v231 + 8);
  if (v177)
    v178 = *(unsigned int *)(v177 + 96);
  else
    v178 = 3;
  v181 = RIPLayerCreate((uint64_t)RIPLayer_ripl_class, (uint64_t)&v244, v166 | 8u, *(uint64_t *)&x, v178, v163, v164, v165);
  if (!v181)
  {
    v130 = *(_QWORD *)&v231;
    v131 = v175;
    return create_pattern_tile_pattern(v130, v131, v230, v236, a5, &v241, v108, v109, v25);
  }
  v182 = v181;
  v183 = v175;
  v184 = v230;
  build_tile((uint64_t)v181, *(uint64_t *)&v231, v183, v230, v236, &CGSizeZero.width, &v237, v216, height, v214, v213, v25);
  *((_DWORD *)v182 + 3) = 0;
  *((_DWORD *)v182 + 4) = 0;
  v14 = v182;
  get_pattern_phase(v241.f64, v174, *(double *)(*(_QWORD *)(v184 + 120) + 24), *(double *)(*(_QWORD *)(v184 + 120) + 32), v215, v220);
  if (RIPShouldCachePatterns()
    && !v34
    && ((*((_DWORD *)v182 + 12) * *((_DWORD *)v182 + 6)) & 0x80000000) == 0)
  {
    if (v111)
    {
      v192 = (unint64_t *)(v111 + 232);
      v193 = *(_QWORD **)(v111 + 232);
      if (v193)
      {
        v194 = 2;
        goto LABEL_204;
      }
      v197 = RIPDataCreate(v111, v185, v186, v187, v188, v189, v190, v191);
      v193 = v197;
      while (!__ldxr(v192))
      {
        if (!__stxr((unint64_t)v197, v192))
          goto LABEL_198;
      }
      __clrex();
LABEL_198:
      v201 = *v192;
      v194 = 2;
    }
    else
    {
      v196 = (unint64_t *)(v28 + 88);
      v193 = *(_QWORD **)(v28 + 88);
      if (v193)
      {
        v194 = 1;
LABEL_204:
        v202 = RIPCacheEntryCreate(v194, (uint64_t)v193);
        v202[8] = *(_QWORD *)&x;
        *((_DWORD *)v202 + 18) = v116;
        v203 = v231;
        v204 = *(_DWORD *)(*(_QWORD *)&v231 + 148);
        *(_OWORD *)((char *)v202 + 76) = *(_OWORD *)(*(_QWORD *)&v231 + 132);
        *((_DWORD *)v202 + 23) = v204;
        v205 = v239;
        *((_OWORD *)v202 + 6) = v238;
        *((_OWORD *)v202 + 7) = v205;
        (*(void (**)(char *))(*(_QWORD *)v182 + 16))(v182);
        v202[20] = v182;
        v206 = v220;
        v202[16] = *(_QWORD *)&v215;
        *((CGFloat *)v202 + 17) = v206;
        v207 = v222;
        *((double *)v202 + 18) = v221;
        *((CGFloat *)v202 + 19) = v207;
        RIPLockCacheState();
        v208 = (_QWORD *)v193[3];
        v209 = *v202;
        v193[3] = v202;
        *v202 = v193 + 2;
        *v208 = v209;
        *(_QWORD *)(v209 + 8) = v208;
        ++v193[5];
        ripc_AddEntry(*(_QWORD *)(*(_QWORD *)&v203 + 208), (uint64_t)v202);
        if (v193[5] <= 0x20uLL)
        {
          RIPUnlockCacheState();
        }
        else
        {
          v210 = (uint64_t *)v193[2];
          RIPCacheEntryRemove(v210);
          v210[1] = 0;
          RIPUnlockCacheState();
          do
          {
            v211 = (uint64_t *)v210[1];
            RIPCacheEntryRelease(v210);
            v210 = v211;
          }
          while (v211);
        }
        return v14;
      }
      v199 = RIPDataCreate(v28, v185, v186, v187, v188, v189, v190, v191);
      v193 = v199;
      while (!__ldxr(v196))
      {
        if (!__stxr((unint64_t)v199, v196))
          goto LABEL_200;
      }
      __clrex();
LABEL_200:
      v201 = *v196;
      v194 = 1;
    }
    if ((_QWORD *)v201 != v193)
    {
      CFRelease(v193);
      v193 = (_QWORD *)v201;
    }
    if (v193)
      goto LABEL_204;
  }
  return v14;
}

const CGFloat *__cdecl CGColorGetComponents(CGColorRef color)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const CGFloat *BytePtr;
  uint64_t NumberOfComponents;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFData *v18;
  _QWORD v20[2];

  BytePtr = (const CGFloat *)color;
  v20[1] = *MEMORY[0x1E0C80C00];
  if (color)
  {
    if (((unint64_t)color & 0x8000000000000000) != 0)
    {
      NumberOfComponents = CGTaggedColorGetNumberOfComponents((uint64_t)color, v1, v2, v3, v4, v5, v6, v7);
      v10 = 8 * NumberOfComponents;
      MEMORY[0x1E0C80A78](NumberOfComponents, v11);
      bzero((char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
      CGTaggedColorGetComponents((uint64_t)BytePtr, (uint64_t)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v12, v13, v14, v15, v16, v17);
      v18 = CFDataCreate(0, (const UInt8 *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
      BytePtr = (const CGFloat *)CFDataGetBytePtr(v18);
      CFAutorelease(v18);
    }
    else
    {
      return (const CGFloat *)((char *)color + 64);
    }
  }
  return BytePtr;
}

uint64_t CGGStateGetFillColor(uint64_t a1)
{
  uint64_t result;
  CGColorSpace *v3;

  result = *(_QWORD *)(a1 + 72);
  if (!result)
  {
    v3 = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceGenericGrayGamma2_2"));
    *(_QWORD *)(a1 + 72) = CGColorSpaceCopyDefaultColor((uint64_t)v3);
    CGColorSpaceRelease(v3);
    return *(_QWORD *)(a1 + 72);
  }
  return result;
}

uint64_t RIPObjectRelease(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v8)(void);

  if (result)
  {
    if (!*(_QWORD *)result)
      _CGHandleAssert("RIPObjectRelease", 19, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/RIP/RIPClass.c", "RIPObjectValid(object)", "Release of invalid RIP object %p", a6, a7, a8, result);
    v8 = *(uint64_t (**)(void))(*(_QWORD *)result + 24);
    if (v8)
      return v8();
  }
  return result;
}

uint64_t CGColorTransformConvertColorComponents(uint64_t result, _QWORD *a2, uint64_t a3, double *a4, double *a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeID v17;
  CGColorSpace *ResolvedColorSpace;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t **v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  double *v31;
  double *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t j;
  uint64_t v40;
  _QWORD *Cache;
  uint64_t *v42;
  uint64_t v43;
  _QWORD *Converter;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t i;
  double v54;
  uint64_t v55;
  char *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  void **v60;
  _QWORD *v61;
  uint64_t v62;
  _OWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD v69[5];

  if (!result)
    return result;
  v9 = (_QWORD *)result;
  v17 = CFGetTypeID((CFTypeRef)result);
  if (kCGColorTransformDefaultCMYK_block_invoke_once != -1)
    dispatch_once(&kCGColorTransformDefaultCMYK_block_invoke_once, &__block_literal_global_25_15643);
  if (v17 != CGColorTransformGetTypeID_type_id)
    return 0;
  if (!a4 || !a5)
  {
    CGPostError((uint64_t)"%s: NULL components", v10, v11, v12, v13, v14, v15, v16, (char)"CGColorTransformConvertColorComponents");
    return 0;
  }
  v69[0] = MEMORY[0x1E0C809B0];
  v69[1] = 0x40000000;
  v69[2] = __create_resolved_source_space_block_invoke;
  v69[3] = &__block_descriptor_tmp_27_15656;
  v69[4] = v9;
  ResolvedColorSpace = (CGColorSpace *)CGColorSpaceCreateResolvedColorSpace(a2, (uint64_t)v69);
  if (!CGColorTransformGetAttributes(v9))
  {
    Cache = CGColorTransformGetCache(v9);
    if (Cache)
    {
      v42 = (uint64_t *)Cache[2];
      if (v42)
      {
        v43 = v42[3];
        if (v43)
          v42 = (uint64_t *)(v43 + 56);
        else
          v42 = 0;
      }
    }
    else
    {
      v42 = 0;
    }
    if (ResolvedColorSpace)
    {
      v46 = *((_QWORD *)ResolvedColorSpace + 3);
      v47 = v46 ? (uint64_t *)(v46 + 56) : 0;
    }
    else
    {
      v47 = 0;
    }
    if (v42 == v47
      || v42
      && v47
      && ((v49 = *v42, v48 = v42[1], v51 = *v47, v50 = v47[1], v49 == v51) ? (v52 = v48 == v50) : (v52 = 0), v52))
    {
      if (ResolvedColorSpace)
      {
        for (i = *(_QWORD *)(*((_QWORD *)ResolvedColorSpace + 3) + 40); i; --i)
        {
          v54 = *a4++;
          *a5++ = v54;
        }
      }
      goto LABEL_106;
    }
  }
  v19 = CGColorTransformGetCache(v9);
  v20 = v9[11];
  pthread_mutex_lock((pthread_mutex_t *)v20);
  v21 = *(_QWORD **)(v20 + 80);
  if (!v21)
  {
LABEL_44:
    pthread_mutex_unlock((pthread_mutex_t *)v20);
    if (CGColorSpaceGetType(ResolvedColorSpace) - 7 >= 3
      && CGColorTransformCacheGetConversionType((uint64_t)v19, ResolvedColorSpace, a3) == 3)
    {
      if (ResolvedColorSpace)
      {
        for (j = *(_QWORD *)(*((_QWORD *)ResolvedColorSpace + 3) + 40); j; --j)
        {
          v40 = *(_QWORD *)a4++;
          *(_QWORD *)a5++ = v40;
        }
      }
      goto LABEL_106;
    }
    Converter = CGColorTransformCacheCreateConverter((uint64_t)v19, ResolvedColorSpace, a3);
    if (CGCMSConverterConvertColorComponents(Converter, a4, a5))
    {
      if (ResolvedColorSpace)
      {
        v45 = *(_QWORD *)(*((_QWORD *)ResolvedColorSpace + 3) + 40);
        if (v45 > 4)
        {
LABEL_104:
          if (Converter)
            CFRelease(Converter);
          goto LABEL_106;
        }
      }
      else
      {
        v45 = 0;
      }
      v55 = v9[11];
      pthread_mutex_lock((pthread_mutex_t *)v55);
      if (*(_QWORD *)(v55 + 72) > 0x3FuLL)
      {
        v58 = *(_QWORD **)(v55 + 80);
        if (v58)
        {
          v59 = *(_QWORD *)(v55 + 80);
          do
          {
            v60 = (void **)v59;
            v59 = *(_QWORD *)(v59 + 8);
          }
          while (v59);
          v56 = (char *)*v60;
        }
        else
        {
          v56 = 0;
        }
        v57 = x_list_remove(v58, (uint64_t)v56);
        *(_QWORD *)(v55 + 80) = v57;
      }
      else
      {
        v56 = (char *)malloc_type_malloc(0x58uLL, 0x100004038113C5CuLL);
        v57 = *(_QWORD **)(v55 + 80);
        ++*(_QWORD *)(v55 + 72);
      }
      v61 = malloc_type_malloc(0x10uLL, 0x2062DE7BuLL);
      if (v61)
      {
        *v61 = v56;
        v61[1] = v57;
        v57 = v61;
      }
      *(_QWORD *)(v55 + 80) = v57;
      v62 = *((_QWORD *)ResolvedColorSpace + 3);
      if (v62)
        v63 = (_OWORD *)(v62 + 56);
      else
        v63 = 0;
      *(_OWORD *)v56 = *v63;
      *((_DWORD *)v56 + 4) = a3;
      if (v45)
      {
        v64 = v56 + 24;
        do
        {
          v65 = *(_QWORD *)a4++;
          *v64++ = v65;
          --v45;
        }
        while (v45);
      }
      v66 = *(unsigned int *)(v55 + 64);
      if ((_DWORD)v66)
      {
        v67 = v56 + 56;
        do
        {
          v68 = *(_QWORD *)a5++;
          *v67++ = v68;
          --v66;
        }
        while (v66);
      }
      pthread_mutex_unlock((pthread_mutex_t *)v55);
      goto LABEL_104;
    }
    if (Converter)
      CFRelease(Converter);
    CGColorSpaceRelease(ResolvedColorSpace);
    return 0;
  }
  v22 = *(uint64_t ***)(v20 + 80);
  while (1)
  {
    if (ResolvedColorSpace)
    {
      v23 = *((_QWORD *)ResolvedColorSpace + 3);
      v24 = (uint64_t *)(v23 + 56);
      if (!v23)
        v24 = 0;
    }
    else
    {
      v24 = 0;
    }
    v25 = *v22;
    if (v24 == *v22
      || (v25 ? (v26 = v24 == 0) : (v26 = 1),
          !v26 && ((v28 = *v24, v27 = v24[1], *v25 == v28) ? (v29 = v25[1] == v27) : (v29 = 0), v29)))
    {
      if (*((_DWORD *)v25 + 4) == (_DWORD)a3)
      {
        if (!ResolvedColorSpace)
          goto LABEL_34;
        v30 = *(_QWORD *)(*((_QWORD *)ResolvedColorSpace + 3) + 40);
        if (v30 <= 4)
          break;
      }
    }
LABEL_28:
    v22 = (uint64_t **)v22[1];
    if (!v22)
      goto LABEL_44;
  }
  if (v30)
  {
    v31 = (double *)(v25 + 3);
    v32 = a4;
    while (*v31 == *v32)
    {
      ++v32;
      ++v31;
      if (!--v30)
        goto LABEL_34;
    }
    goto LABEL_28;
  }
LABEL_34:
  v33 = *(unsigned int *)(v20 + 64);
  if ((_DWORD)v33)
  {
    v34 = v25 + 7;
    do
    {
      v35 = *v34++;
      *(_QWORD *)a5++ = v35;
      --v33;
    }
    while (v33);
  }
  v69[0] = v21;
  if ((uint64_t *)*v21 == v25)
  {
    v38 = v69;
LABEL_81:
    *v38 = v21[1];
    v21[1] = v69[0];
  }
  else
  {
    v36 = v21;
    while (1)
    {
      v37 = v36;
      v36 = (_QWORD *)v36[1];
      if (!v36)
        break;
      if ((uint64_t *)*v36 == v25)
      {
        v38 = v37 + 1;
        v21 = v36;
        goto LABEL_81;
      }
    }
  }
  *(_QWORD *)(v20 + 80) = v21;
  pthread_mutex_unlock((pthread_mutex_t *)v20);
LABEL_106:
  CGColorSpaceRelease(ResolvedColorSpace);
  return 1;
}

_QWORD *CGColorTransformGetCache(_QWORD *result)
{
  _QWORD *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (kCGColorTransformDefaultCMYK_block_invoke_once != -1)
      dispatch_once(&kCGColorTransformDefaultCMYK_block_invoke_once, &__block_literal_global_25_15643);
    if (v2 == CGColorTransformGetTypeID_type_id)
      return *(_QWORD **)(v1[3] + 16);
    else
      return 0;
  }
  return result;
}

CGColorSpaceRef __create_resolved_source_space_block_invoke(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2;
  switch(CGColorSpaceGetType(a2))
  {
    case 0u:
      if (!v2)
      {
        v5 = *(_QWORD *)(a1 + 32);
        if (!v5)
          return 0;
LABEL_24:
        v2 = *(_QWORD **)(v5 + 40);
        goto LABEL_25;
      }
      v5 = *(_QWORD *)(a1 + 32);
      if (!*(_BYTE *)(v2[3] + 9))
      {
        if (!v5)
          return 0;
        goto LABEL_24;
      }
      if (!v5)
        return 0;
      v2 = *(_QWORD **)(v5 + 64);
LABEL_25:
      if (v2)
        CFRetain(v2);
      return (CGColorSpaceRef)v2;
    case 1u:
      if (v2)
      {
        v6 = *(_QWORD *)(a1 + 32);
        if (*(_BYTE *)(v2[3] + 9))
        {
          if (!v6)
            return 0;
          v2 = *(_QWORD **)(v6 + 72);
          goto LABEL_25;
        }
      }
      else
      {
        v6 = *(_QWORD *)(a1 + 32);
      }
      if (!v6)
        return 0;
      v2 = *(_QWORD **)(v6 + 48);
      goto LABEL_25;
    case 2u:
      if (v2)
      {
        v7 = *(_QWORD *)(a1 + 32);
        if (*(_BYTE *)(v2[3] + 9))
        {
          if (v7)
          {
            v2 = *(_QWORD **)(v7 + 80);
            goto LABEL_25;
          }
          return 0;
        }
      }
      else
      {
        v7 = *(_QWORD *)(a1 + 32);
      }
      if (v7)
      {
        v2 = *(_QWORD **)(v7 + 56);
        goto LABEL_25;
      }
      return 0;
    case 3u:
    case 4u:
    case 6u:
    case 0xAu:
    case 0xBu:
      return create_calibrated_space(v2, *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 96));
    default:
      goto LABEL_25;
  }
}

uint64_t CGColorSpaceCreateResolvedColorSpace(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  CGColorSpace *ResolvedColorSpace;
  CGColorSpace *v7;
  uint64_t Indexed;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  CGColorSpace *v14;
  uint64_t v15;

  if (!a1)
    return (uint64_t)a1;
  switch(CGColorSpaceGetType(a1))
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 6u:
    case 0xAu:
    case 0xBu:
      return (*(uint64_t (**)(uint64_t, _QWORD *))(a2 + 16))(a2, a1);
    case 7u:
      CFRetain(a1);
      v5 = *(_QWORD *)(a1[3] + 88);
      ResolvedColorSpace = (CGColorSpace *)CGColorSpaceCreateResolvedColorSpace(*(_QWORD *)v5, a2);
      v7 = ResolvedColorSpace;
      if (*(CGColorSpace **)v5 == ResolvedColorSpace)
        goto LABEL_12;
      Indexed = (uint64_t)CGColorSpaceCreateIndexed(ResolvedColorSpace, *(_QWORD *)(v5 + 8), *(const unsigned __int8 **)(v5 + 16));
      goto LABEL_11;
    case 8u:
      CFRetain(a1);
      v9 = *(_QWORD *)(a1[3] + 88);
      v7 = (CGColorSpace *)CGColorSpaceCreateResolvedColorSpace(*(_QWORD *)(v9 + 8), a2);
      if (*(CGColorSpace **)(v9 + 8) == v7)
        goto LABEL_12;
      Indexed = CGColorSpaceCreateDeviceN(*(_QWORD *)(a1[3] + 40), *(_QWORD *)v9, v7, *(_QWORD **)(v9 + 16), *(_QWORD *)(v9 + 24), v10, v11, v12);
      goto LABEL_11;
    case 9u:
      CFRetain(a1);
      v13 = *(_QWORD **)(a1[3] + 88);
      v14 = (CGColorSpace *)CGColorSpaceCreateResolvedColorSpace(*v13, a2);
      v7 = v14;
      if ((CGColorSpace *)*v13 == v14)
      {
LABEL_12:
        CGColorSpaceRelease(v7);
        return (uint64_t)a1;
      }
      Indexed = (uint64_t)CGColorSpaceCreatePattern(v14);
LABEL_11:
      v15 = Indexed;
      CGColorSpaceRelease(v7);
      CGColorSpaceRelease((CGColorSpaceRef)a1);
      result = v15;
      break;
    default:
      CFRetain(a1);
      return (uint64_t)a1;
  }
  return result;
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  CGColorRef result;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  unsigned int Type;
  uint64_t v9;
  unsigned int v10;
  double v11;
  double v12;
  double v13;
  double v14;
  unint64_t v15;
  unint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  unsigned int v26;
  float v27;
  float v28;
  float v29;
  double v30;
  float v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;

  result = 0;
  if (!space || !components)
    return result;
  if (CGColorSpaceGetType(space) == 9)
    return 0;
  if (CGColorCreate_onceToken != -1)
    dispatch_once(&CGColorCreate_onceToken, &__block_literal_global_2177);
  if (!CGColorCreate_supportsTaggedPointers)
    return (CGColorRef)create_color(space, components);
  v5 = *((_QWORD *)space + 3);
  v6 = *(const void **)(v5 + 72);
  if (!v6)
    return (CGColorRef)create_color(space, components);
  v7 = *(_QWORD *)(v5 + 40);
  Type = CGColorSpaceGetType(space);
  if (Type < 5 && ((0x1Bu >> Type) & 1) != 0)
  {
    v10 = dword_184F732D8[Type];
  }
  else
  {
    v9 = *(_QWORD *)(*((_QWORD *)space + 3) + 40);
    if (v9 == 2)
    {
      if (CFEqual(v6, CFSTR("kCGColorSpaceSRGB")))
      {
        v10 = 7;
      }
      else if (CFEqual(v6, CFSTR("kCGColorSpaceExtendedSRGB")))
      {
        v10 = 14;
      }
      else if (CFEqual(v6, CFSTR("kCGColorSpaceDisplayP3")))
      {
        v10 = 12;
      }
      else if (CFEqual(v6, CFSTR("kCGColorSpaceLinearSRGB")))
      {
        v10 = 16;
      }
      else if (CFEqual(v6, CFSTR("kCGColorSpaceExtendedLinearSRGB")))
      {
        v10 = 17;
      }
      else if (CFEqual(v6, CFSTR("kCGColorSpaceDCIP3")))
      {
        v10 = 13;
      }
      else
      {
        if (!CFEqual(v6, CFSTR("kCGColorSpaceAdobeRGB1998")))
          return (CGColorRef)create_color(space, components);
        v10 = 8;
      }
    }
    else
    {
      if (v9 != 1)
        return (CGColorRef)create_color(space, components);
      if (CFEqual(v6, CFSTR("kCGColorSpaceExtendedGray")))
      {
        v10 = 15;
      }
      else
      {
        if (!CFEqual(v6, CFSTR("kCGColorSpaceGenericGrayGamma2_2")))
          return (CGColorRef)create_color(space, components);
        v10 = 9;
      }
    }
  }
  if (v7 == 1)
  {
    v18 = *components;
    v17 = components[1];
    v19 = (int)(*components * 65535.0);
    if ((double)v19 / 65535.0 == *components)
    {
      v20 = (int)(v17 * 65535.0);
      if ((double)v20 / 65535.0 == v17)
      {
        if (CGTaggedColorCreate_predicate != -1)
        {
          v39 = v10;
          dispatch_once(&CGTaggedColorCreate_predicate, &__block_literal_global_26_2178);
          v10 = v39;
        }
        v21 = *MEMORY[0x1E0DE7C58];
        result = (CGColorRef)((v19 << 39) | (v20 << 23) | (32 * v10) | 0x850000000000000FLL | 0x800);
        goto LABEL_54;
      }
    }
    if (v18 == 1.0 && (v24 = v17 * 100.0, v24 / 100.0 == v17))
    {
      v25 = v17 * 100.0;
      v26 = 15;
    }
    else if (v18 == 0.0 && (v27 = v17 * 100.0, v27 / 100.0 == v17))
    {
      v25 = v17 * 100.0;
      v26 = 14;
    }
    else
    {
      v29 = v18 * 100.0;
      v30 = v29;
      if (v17 == 1.0 && v30 / 100.0 == v18)
      {
        v25 = v18 * 100.0;
        v26 = 13;
      }
      else
      {
        if (v17 != 0.0 || v30 / 100.0 != v18)
        {
          v33 = (int)v29;
          v34 = v17 * 100.0;
          v35 = (int)v34;
          if ((double)v33 / 100.0 != v18 || (double)v35 / 100.0 != v17)
            return (CGColorRef)create_color(space, components);
          if (CGTaggedColorCreate_predicate != -1)
          {
            v41 = v10;
            dispatch_once(&CGTaggedColorCreate_predicate, &__block_literal_global_26_2178);
            v10 = v41;
          }
          v21 = *MEMORY[0x1E0DE7C58];
          result = (CGColorRef)((v33 << 39) | (v35 << 23) | (32 * v10) | 0x850000000000180FLL);
          goto LABEL_54;
        }
        v25 = v18 * 100.0;
        v26 = 12;
      }
    }
LABEL_89:
    result = (CGColorRef)CGTaggedColorCreate_Float32BPC(v26, v10, LODWORD(v25));
    goto LABEL_90;
  }
  if (v7 != 3)
    return (CGColorRef)create_color(space, components);
  v11 = *components;
  v12 = components[1];
  v14 = components[2];
  v13 = components[3];
  if ((double)(int)(*components * 255.0) / 255.0 == *components
    && (double)(int)(v12 * 255.0) / 255.0 == v12
    && (double)(int)(v14 * 255.0) / 255.0 == v14
    && (double)(int)(v13 * 255.0) / 255.0 == v13)
  {
    v15 = ((unint64_t)(int)(*components * 255.0) << 24) | ((unint64_t)(int)(v12 * 255.0) << 16) | ((unint64_t)(int)(v14 * 255.0) << 8) | (int)(v13 * 255.0);
    if (CGTaggedColorCreate_predicate != -1)
    {
      v38 = v10;
      dispatch_once(&CGTaggedColorCreate_predicate, &__block_literal_global_26_2178);
      v10 = v38;
    }
    result = (CGColorRef)((32 * v10) | (v15 << 23) | 0x850000000000000FLL);
    v16 = *MEMORY[0x1E0DE7C58] ^ (unint64_t)result;
    goto LABEL_55;
  }
  if (v11 != v12 || v12 != v14)
    return (CGColorRef)create_color(space, components);
  v22 = (int)(v11 * 65535.0);
  if ((double)v22 / 65535.0 != v11
    || (v23 = (int)(v13 * 65535.0), (double)v23 / 65535.0 != v13))
  {
    if (v11 == 1.0 && (v28 = v13 * 100.0, v28 / 100.0 == v13))
    {
      v25 = v13 * 100.0;
      v26 = 11;
    }
    else if (v11 == 0.0 && (v31 = v13 * 100.0, v31 / 100.0 == v13))
    {
      v25 = v13 * 100.0;
      v26 = 10;
    }
    else if (v13 == 1.0 && (v32 = v11 * 100.0, v32 / 100.0 == v11))
    {
      v25 = v11 * 100.0;
      v26 = 9;
    }
    else
    {
      if (v13 != 0.0)
        return (CGColorRef)create_color(space, components);
      v37 = v11 * 100.0;
      if (v37 / 100.0 != v11)
        return (CGColorRef)create_color(space, components);
      v25 = v11 * 100.0;
      v26 = 8;
    }
    goto LABEL_89;
  }
  if (CGTaggedColorCreate_predicate != -1)
  {
    v40 = v10;
    dispatch_once(&CGTaggedColorCreate_predicate, &__block_literal_global_26_2178);
    v10 = v40;
  }
  v21 = *MEMORY[0x1E0DE7C58];
  result = (CGColorRef)((v22 << 39) | (v23 << 23) | (32 * v10) | 0x850000000000000FLL | 0x1000);
LABEL_54:
  v16 = v21 ^ (unint64_t)result;
LABEL_55:
  if ((~v16 & 0xC000000000000007) != 0)
    result = (CGColorRef)(v16 & 0xFFFFFFFFFFFFFFF8 | *(unsigned __int8 *)(MEMORY[0x1E0DE7C48] + (v16 & 7)));
LABEL_90:
  if (!result)
    return (CGColorRef)create_color(space, components);
  return result;
}

uint64_t CGColorSpaceGetType(_QWORD *a1)
{
  CFTypeID v2;

  if (!a1)
    return 0xFFFFFFFFLL;
  v2 = CFGetTypeID(a1);
  if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1)
    dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_77);
  if (v2 == CGColorSpaceGetTypeID_type_id)
    return *(unsigned int *)(a1[3] + 20);
  else
    return 0xFFFFFFFFLL;
}

CGColorSpaceRef create_calibrated_space(_QWORD *cf, int a2)
{
  CGColorSpaceRef result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;

  if (a2)
  {
    if (cf)
      CFRetain(cf);
    return (CGColorSpaceRef)cf;
  }
  else
  {
    switch(CGColorSpaceGetType(cf))
    {
      case 3u:
        goto LABEL_10;
      case 4u:
        goto LABEL_11;
      case 6u:
      case 0xAu:
      case 0xBu:
        if (!cf)
          goto LABEL_13;
        v7 = *(_DWORD *)(cf[3] + 24);
        if (v7 == 2)
        {
          result = CGColorSpaceCreateDeviceCMYK();
        }
        else if (v7 == 1)
        {
LABEL_11:
          result = CGColorSpaceCreateDeviceRGB();
        }
        else
        {
          if (v7)
LABEL_13:
            _CGHandleAssert("create_calibrated_space", 363, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorTransform.c", "", "Unimplemented", v4, v5, v6, v8);
LABEL_10:
          result = CGColorSpaceCreateDeviceGray();
        }
        break;
      default:
        goto LABEL_13;
    }
  }
  return result;
}

uint64_t CGSBoundsIntersection(int *a1, int *a2, _DWORD *a3)
{
  _BOOL8 v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  v3 = 0;
  if (a1 && a2)
  {
    v4 = a1[2];
    if (v4 < 1)
      return 0;
    v5 = a2[2];
    if (v5 < 0)
      return 0;
    v6 = a1[3];
    if (v6 < 1)
      return 0;
    v7 = a2[3];
    if (v7 < 0)
      return 0;
    v8 = *a1 + v4;
    v9 = *a2 + v5;
    if (*a1 <= *a2)
      v10 = *a2;
    else
      v10 = *a1;
    if (v8 < v9)
      v9 = v8;
    v11 = v9 - v10;
    if (v11 < 1)
    {
      return 0;
    }
    else
    {
      if (a3)
      {
        *a3 = v10;
        a3[2] = v11;
      }
      v12 = a1[1];
      v13 = a2[1];
      v14 = v12 + v6;
      v15 = v13 + v7;
      if (v12 <= v13)
        v16 = a2[1];
      else
        v16 = a1[1];
      if (v14 >= v15)
        v14 = v15;
      v17 = v14 - v16;
      v3 = v14 > v16;
      if (a3 && v17 >= 1)
      {
        a3[1] = v16;
        a3[3] = v17;
        return 1;
      }
    }
  }
  return v3;
}

uint64_t CGColorTransformCacheGetConversionType(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *cache_entry;
  const void *v14;
  const void *v15;
  char *updated;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v22;

  v22 = -1;
  if (!*(_QWORD *)(a1 + 40))
  {
    v8 = *(uint64_t **)(a1 + 16);
    if (v8)
    {
      v9 = v8[3];
      if (v9)
        v8 = (uint64_t *)(v9 + 56);
      else
        v8 = 0;
    }
    if (a2)
    {
      v10 = a2[3];
      v11 = v10 ? (uint64_t *)(v10 + 56) : 0;
    }
    else
    {
      v11 = 0;
    }
    if (v8 == v11)
      return 3;
    if (v8 && v11)
    {
      v18 = *v8;
      v17 = v8[1];
      v20 = *v11;
      v19 = v11[1];
      if (v18 == v20 && v17 == v19)
        return 3;
    }
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 56));
  if (a2)
  {
    v6 = a2[3];
    if (v6)
      v7 = (_QWORD *)(v6 + 56);
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  cache_entry = find_cache_entry(*(_QWORD *)(a1 + 120), v7);
  if (cache_entry)
  {
    v22 = *((_DWORD *)cache_entry + 4);
  }
  else
  {
    v14 = (const void *)CGCMSConverterCreate(*(_QWORD **)(a1 + 16), a2, a3, *(unsigned __int8 *)(a1 + 48), *(const __CFDictionary **)(a1 + 40), (int *)&v22);
    if (v14)
    {
      v15 = v14;
      updated = (char *)update_cache(a1, v14, v22, (uint64_t)a2, a3);
      CFRelease(v15);
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 56));
      if (updated)
        cache_entry_release(updated);
      return v22;
    }
  }
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 56));
  return v22;
}

void set_stroke_color_with_components(uint64_t *a1, CGColorSpace *a2, const CGFloat *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  CGColorSpaceRef ColorSpace;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  unint64_t StrokeColor;
  CGColor *v22;
  CGColor *v23;

  if (a2)
  {
    ColorSpace = a2;
    v12 = 0;
    goto LABEL_3;
  }
  StrokeColor = CGGStateGetStrokeColor(a1[12]);
  if (!StrokeColor)
    goto LABEL_19;
  v12 = StrokeColor;
  if ((StrokeColor & 0x8000000000000000) == 0)
  {
    ColorSpace = *(CGColorSpaceRef *)(StrokeColor + 24);
    if (ColorSpace)
      goto LABEL_3;
LABEL_19:
    v20 = "No color space specified for stroke color.";
    goto LABEL_20;
  }
  ColorSpace = CGTaggedColorGetColorSpace(StrokeColor, v13, v14, v15, v16, v17, v18, v19);
  if (!ColorSpace)
    goto LABEL_19;
LABEL_3:
  if (!a3)
  {
    v22 = CGColorSpaceCopyDefaultColor((uint64_t)ColorSpace);
    goto LABEL_15;
  }
  if (CGColorSpaceGetType(ColorSpace) == 9)
  {
    v20 = "No pattern specified with pattern color space.";
LABEL_20:
    CGPostError((uint64_t)v20, v13, v14, v15, v16, v17, v18, v19, a9);
    return;
  }
  if (!v12)
    v12 = CGGStateGetStrokeColor(a1[12]);
  if ((CGColorEqualToColorComponents(v12, (uint64_t)ColorSpace, 0, a3, v16, v17, v18, v19) & 1) == 0)
  {
    v22 = CGColorCreate(ColorSpace, a3);
LABEL_15:
    v23 = v22;
    CGContextSetStrokeColorWithColor((CGContextRef)a1, v22);
    if (v23)
      CFRelease(v23);
  }
}

void CGGStateSetStrokeColor(uint64_t a1, void *a2)
{
  const void *v4;

  if (!CGColorEqualToColor(*(CGColorRef *)(*(_QWORD *)(a1 + 128) + 40), (CGColorRef)a2))
  {
    maybe_copy_stroke_state(a1);
    v4 = *(const void **)(*(_QWORD *)(a1 + 128) + 40);
    if (v4)
      CFRelease(v4);
    if (a2)
      CFRetain(a2);
    *(_QWORD *)(*(_QWORD *)(a1 + 128) + 40) = a2;
  }
}

void maybe_copy_stroke_state(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  __int16 v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;

  if ((*(_BYTE *)(a1 + 20) & 4) != 0)
  {
    v2 = *(_QWORD *)(a1 + 128);
    v3 = malloc_type_malloc(0x30uLL, 0x2062DE7BuLL);
    v11 = v3;
    *(_BYTE *)v3 = 0;
    v3[1] = 1;
    *((_QWORD *)v3 + 1) = *(_QWORD *)(v2 + 8);
    v12 = *(_WORD *)(v2 + 2);
    *((_BYTE *)v3 + 2) = v12;
    *((_WORD *)v3 + 1) = v12 | (*(unsigned __int8 *)(v2 + 3) << 8);
    *((_OWORD *)v3 + 1) = *(_OWORD *)(v2 + 16);
    *((_BYTE *)v3 + 1) = *(_BYTE *)(v2 + 1);
    v13 = *(unsigned int **)(v2 + 32);
    if (v13)
    {
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    *((_QWORD *)v3 + 4) = v13;
    v15 = *(_QWORD *)(v2 + 40);
    if (v15)
      CFRetain(*(CFTypeRef *)(v2 + 40));
    *((_QWORD *)v11 + 5) = v15;
    *(_QWORD *)(a1 + 128) = v11;
    stroke_state_release((_QWORD *)v2, v4, v5, v6, v7, v8, v9, v10);
    *(_BYTE *)(a1 + 20) &= ~4u;
  }
}

void CGContextSetStrokeColorWithColor(CGContextRef c, CGColorRef color)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGContextRef v8;

  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      CGGStateSetStrokeColor(*((_QWORD *)c + 12), color);
      return;
    }
    v8 = c;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetStrokeColorWithColor", (uint64_t)v8, v2, v3, v4, v5, v6, v7);
}

void set_fill_color_with_components(uint64_t *a1, CGColorSpace *a2, const CGFloat *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  CGColorSpaceRef ColorSpace;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  unint64_t FillColor;
  CGColor *v22;
  CGColor *v23;

  if (a2)
  {
    ColorSpace = a2;
    v12 = 0;
    goto LABEL_3;
  }
  FillColor = CGGStateGetFillColor(a1[12]);
  if (!FillColor)
    goto LABEL_19;
  v12 = FillColor;
  if ((FillColor & 0x8000000000000000) == 0)
  {
    ColorSpace = *(CGColorSpaceRef *)(FillColor + 24);
    if (ColorSpace)
      goto LABEL_3;
LABEL_19:
    v20 = "No color space specified for fill color.";
    goto LABEL_20;
  }
  ColorSpace = CGTaggedColorGetColorSpace(FillColor, v13, v14, v15, v16, v17, v18, v19);
  if (!ColorSpace)
    goto LABEL_19;
LABEL_3:
  if (!a3)
  {
    v22 = CGColorSpaceCopyDefaultColor((uint64_t)ColorSpace);
    goto LABEL_15;
  }
  if (CGColorSpaceGetType(ColorSpace) == 9)
  {
    v20 = "No pattern specified for pattern color space.";
LABEL_20:
    CGPostError((uint64_t)v20, v13, v14, v15, v16, v17, v18, v19, a9);
    return;
  }
  if (!v12)
    v12 = CGGStateGetFillColor(a1[12]);
  if ((CGColorEqualToColorComponents(v12, (uint64_t)ColorSpace, 0, a3, v16, v17, v18, v19) & 1) == 0)
  {
    v22 = CGColorCreate(ColorSpace, a3);
LABEL_15:
    v23 = v22;
    CGContextSetFillColorWithColor((CGContextRef)a1, v22);
    if (v23)
      CFRelease(v23);
  }
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGContextRef v8;

  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      CGGStateSetFillColor(*((_QWORD *)c + 12), color);
      return;
    }
    v8 = c;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetFillColorWithColor", (uint64_t)v8, v2, v3, v4, v5, v6, v7);
}

CGColorSpace *CGColorSpaceCopyDefaultColor(uint64_t a1)
{
  CGColorSpace *v1;
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t (*v4)(CGColorSpace *);
  CGColorRef v5;
  unint64_t *v6;
  uint64_t v8;

  v1 = (CGColorSpace *)a1;
  if (a1)
  {
    v2 = (pthread_mutex_t *)(a1 + 32);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
    v3 = *((_QWORD *)v1 + 3);
    if (v3)
    {
      if (!*(_QWORD *)(v3 + 48))
      {
        v4 = *(uint64_t (**)(CGColorSpace *))(*(_QWORD *)(v3 + 104) + 16);
        if (v4)
          v5 = (CGColorRef)v4(v1);
        else
          v5 = CGColorCreate(v1, *(const CGFloat **)(v3 + 32));
        v6 = (unint64_t *)(*((_QWORD *)v1 + 3) + 48);
        while (!__ldxr(v6))
        {
          if (!__stxr((unint64_t)v5, v6))
            goto LABEL_14;
        }
        __clrex();
        if (v5)
          CFRelease(v5);
      }
LABEL_14:
      v8 = *((_QWORD *)v1 + 3);
      v1 = *(CGColorSpace **)(v8 + 48);
      if (v1)
        CFRetain(*(CFTypeRef *)(v8 + 48));
    }
    else
    {
      v1 = 0;
    }
    pthread_mutex_unlock(v2);
  }
  return v1;
}

const void *CGColorTransformCacheCreateConverter(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  pthread_mutex_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *cache_entry;
  _QWORD *v11;
  CFTypeRef *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const void *v17;
  char *updated;
  int v20;
  _QWORD *v21;

  v6 = (pthread_mutex_t *)(a1 + 56);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 56));
  if (a2)
  {
    v7 = a2[3];
    if (v7)
      v8 = (_QWORD *)(v7 + 56);
    else
      v8 = 0;
  }
  else
  {
    v8 = 0;
  }
  v20 = 0;
  v9 = *(_QWORD **)(a1 + 120);
  cache_entry = find_cache_entry((uint64_t)v9, v8);
  if (cache_entry)
  {
    v11 = &cache_entry[(int)a3];
    v13 = v11[3];
    v12 = (CFTypeRef *)(v11 + 3);
    if (v13)
    {
      v21 = v9;
      if (v9)
      {
        if ((_QWORD *)*v9 == cache_entry)
        {
          v16 = &v21;
LABEL_18:
          *v16 = v9[1];
          v9[1] = v21;
        }
        else
        {
          v14 = v9;
          while (1)
          {
            v15 = v14;
            v14 = (_QWORD *)v14[1];
            if (!v14)
              break;
            if ((_QWORD *)*v14 == cache_entry)
            {
              v16 = v15 + 1;
              v9 = v14;
              goto LABEL_18;
            }
          }
        }
      }
      *(_QWORD *)(a1 + 120) = v9;
      if (*v12)
        v17 = CFRetain(*v12);
      else
        v17 = 0;
      goto LABEL_22;
    }
  }
  v20 = -1;
  v17 = (const void *)CGCMSConverterCreate(*(_QWORD **)(a1 + 16), a2, a3, *(unsigned __int8 *)(a1 + 48), *(const __CFDictionary **)(a1 + 40), &v20);
  if (!v17)
  {
LABEL_22:
    pthread_mutex_unlock(v6);
    return v17;
  }
  updated = (char *)update_cache(a1, v17, v20, (uint64_t)a2, a3);
  pthread_mutex_unlock(v6);
  if (updated)
    cache_entry_release(updated);
  return v17;
}

_QWORD *find_cache_entry(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;

  if (!a1)
    return 0;
  while (1)
  {
    v2 = *(_QWORD **)a1;
    if (*(_QWORD **)a1 == a2)
      break;
    if (a2 && v2 && *v2 == *a2 && v2[1] == a2[1])
      return v2;
    a1 = *(_QWORD *)(a1 + 8);
    if (!a1)
      return 0;
  }
  return a2;
}

_QWORD *CGCMSConverterConvertColorComponents(_QWORD *cf, double *a2, double *a3)
{
  _QWORD *v3;
  CFTypeID v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __n128 v15;
  float *v16;
  size_t v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  float *v22;
  size_t v23;
  float *v24;
  uint64_t v25;
  double v26;
  float v27;
  int v28;
  float *v29;
  float v30;
  uint64_t v32;
  float *v33;
  float *v34;
  uint64_t *v35;
  float *v36;
  int64x2_t v37;
  size_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  float *v59;
  int64x2_t v60;
  size_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;

  v3 = cf;
  v83 = *MEMORY[0x1E0C80C00];
  if (cf)
  {
    v6 = CFGetTypeID(cf);
    v8 = kCGCMSConverterID;
    if (!kCGCMSConverterID)
    {
      pthread_once(&CGCMSConverterGetTypeID_once, converter_initialize);
      v8 = kCGCMSConverterID;
    }
    if (v6 == v8)
    {
      v35 = &v32;
      v10 = v3[5];
      v9 = v3[6];
      v11 = MEMORY[0x1E0C80A78](4 * v9, v7);
      v34 = (float *)((char *)&v32 - v13);
      if (v12 <= 0x3FFFFFFFFFFFFFFELL)
        v16 = (float *)((char *)&v32 - v13);
      else
        v16 = 0;
      v17 = v11;
      if (v12 - 0x3FFFFFFFFFFFFFFFLL >= v14)
        v16 = (float *)malloc_type_malloc(v11, 0x5AA7223CuLL);
      v18 = MEMORY[0x1E0C80A78](4 * v10, v15);
      v33 = (float *)((char *)&v32 - v20);
      if (v19 <= 0x3FFFFFFFFFFFFFFELL)
        v22 = (float *)((char *)&v32 - v20);
      else
        v22 = 0;
      v23 = v18;
      if (v19 - 0x3FFFFFFFFFFFFFFFLL >= v21)
        v22 = (float *)malloc_type_malloc(v18, 0x88E8DE09uLL);
      if (v9)
      {
        v24 = v16;
        v25 = v9;
        do
        {
          v26 = *a2++;
          v27 = v26;
          *v24++ = v27;
          --v25;
        }
        while (v25);
      }
      v82 = 0;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v65 = 0u;
      v62 = 0u;
      v58 = 0;
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v39 = 0u;
      v60 = vdupq_n_s64(1uLL);
      v59 = v16;
      v61 = v17;
      DWORD1(v65) = 0x2000;
      v63 = 32;
      v64 = v9;
      v28 = *((_DWORD *)v3 + 21);
      DWORD2(v62) = 4;
      LODWORD(v62) = v28;
      v36 = v22;
      v37 = v60;
      v38 = v23;
      DWORD1(v41) = 0x2000;
      *(_QWORD *)&v40 = 32;
      *((_QWORD *)&v40 + 1) = v10;
      DWORD2(v39) = 4;
      LODWORD(v39) = v28;
      v3 = CGCMSConverterConvert(v3, (uint64_t)&v59, (uint64_t)&v36);
      if ((_DWORD)v3 && v10)
      {
        v29 = v22;
        do
        {
          v30 = *v29++;
          *a3++ = v30;
          --v10;
        }
        while (v10);
      }
      if (v16 != v34)
        free(v16);
      if (v22 != v33)
        free(v22);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

_QWORD *CGCMSConverterConvert(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  CFTypeID v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t, _OWORD *);
  _OWORD v9[5];
  uint64_t v10;

  if (result)
  {
    v5 = result;
    v6 = CFGetTypeID(result);
    v7 = kCGCMSConverterID;
    if (!kCGCMSConverterID)
    {
      pthread_once(&CGCMSConverterGetTypeID_once, converter_initialize);
      v7 = kCGCMSConverterID;
    }
    if (v6 == v7)
    {
      v8 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t, _OWORD *))v5[7];
      v10 = 0;
      memset(v9, 0, sizeof(v9));
      return (_QWORD *)v8(v5, a2, a3, v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t CGColorEqualToColorComponents(unint64_t result, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  CGColorSpaceRef v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const CGFloat *Components;
  uint64_t NumberOfComponents;

  if (result)
  {
    v11 = result;
    v12 = (result & 0x8000000000000000) != 0
        ? CGTaggedColorGetColorSpace(result, a2, a3, (uint64_t)a4, a5, a6, a7, a8)
        : *(CGColorSpaceRef *)(result + 24);
    result = CGColorSpaceEqualToColorSpace((uint64_t)v12, a2);
    if ((_DWORD)result)
    {
      if (v11 < 1)
        v13 = 0;
      else
        v13 = *(_QWORD *)(v11 + 32);
      if (v13 == a3)
      {
        Components = CGColorGetComponents((CGColorRef)v11);
        if (v11 < 0)
          NumberOfComponents = CGTaggedColorGetNumberOfComponents(v11, v14, v15, v16, v17, v18, v19, v20);
        else
          NumberOfComponents = *(_QWORD *)(v11 + 56);
        ERROR_CGColor_ComponentsArrayIsNotReadable((uint64_t)a4);
        ERROR_CGColor_ComponentsArrayNotLongEnough((uint64_t)a4, NumberOfComponents - 1);
        return memcmp(Components, a4, 8 * NumberOfComponents) == 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

double ERROR_CGColor_ComponentsArrayNotLongEnough(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8 * a2);
}

double ERROR_CGColor_ComponentsArrayIsNotReadable(uint64_t a1)
{
  return *(double *)a1;
}

uint64_t update_cache(uint64_t a1, const void *a2, int a3, uint64_t a4, int a5)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *cache_entry;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  CFTypeRef *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  _DWORD *v22;
  char v23;
  uint64_t v24;
  _OWORD *v25;
  BOOL v26;
  uint64_t i;
  char v28;
  CFTypeRef v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t *v35;

  if (a4)
  {
    v10 = *(_QWORD *)(a4 + 24);
    if (v10)
      v11 = (_QWORD *)(v10 + 56);
    else
      v11 = 0;
  }
  else
  {
    v11 = 0;
  }
  cache_entry = find_cache_entry(*(_QWORD *)(a1 + 120), v11);
  if (!cache_entry)
  {
    v20 = *(unsigned __int8 *)(a1 + 49);
    v21 = malloc_type_malloc(0x40uLL, 0x10C0040AF2BCAA4uLL);
    v22 = v21;
    if (a4)
    {
      v23 = 0;
      v24 = *(_QWORD *)(a4 + 24);
      if (v24)
        v25 = (_OWORD *)(v24 + 56);
      else
        v25 = 0;
      *(_OWORD *)v21 = *v25;
      v21[4] = a3;
      if (a5 == 1 || !v20)
        goto LABEL_22;
      v26 = *(_BYTE *)(*(_QWORD *)(a4 + 24) + 12) == 0;
    }
    else
    {
      *(_OWORD *)v21 = MEMORY[0];
      v21[4] = a3;
      v26 = a5 == 1 || v20 == 0;
    }
    v23 = !v26;
LABEL_22:
    for (i = 6; i != 16; i += 2)
    {
      v28 = v23 ^ 1;
      if (i == 8)
        v28 = 1;
      if ((v28 & 1) != 0)
        v29 = 0;
      else
        v29 = CFRetain(a2);
      *(_QWORD *)&v22[i] = v29;
    }
    if ((v23 & 1) == 0)
      *(_QWORD *)&v22[2 * a5 + 6] = CFRetain(a2);
    v30 = *(_QWORD **)(a1 + 120);
    v31 = malloc_type_malloc(0x10uLL, 0x2062DE7BuLL);
    if (v31)
    {
      *v31 = v22;
      v31[1] = v30;
      v30 = v31;
      *(_QWORD *)(a1 + 120) = v31;
    }
    else
    {
      *(_QWORD *)(a1 + 120) = v30;
      if (!v30)
        return 0;
    }
    v32 = 0;
    v33 = v30;
    do
    {
      ++v32;
      v33 = (_QWORD *)v33[1];
    }
    while (v33);
    if (v32 == 16)
    {
      v34 = v30;
      do
      {
        v35 = v34;
        v34 = (uint64_t *)v34[1];
      }
      while (v34);
      v19 = *v35;
      x_list_remove(v30, *v35);
      return v19;
    }
    return 0;
  }
  v16 = &cache_entry[a5];
  v18 = v16[3];
  v17 = (CFTypeRef *)(v16 + 3);
  if (v18)
    _CGHandleAssert("update_cache", 150, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorTransformCache.c", "entry == NULL || entry->converters[intent] == NULL", "entry %p converters %p", v13, v14, v15, (char)cache_entry);
  v19 = 0;
  *v17 = CFRetain(a2);
  return v19;
}

uint64_t RIPShouldCachePatterns()
{
  if (RIPGetCacheState_predicate != -1)
    dispatch_once(&RIPGetCacheState_predicate, &__block_literal_global_9_12336);
  return *(unsigned __int8 *)(RIPGetCacheState_cache_state + 33);
}

double *get_pattern_phase(double *result, int *a2, double a3, double a4, double a5, double a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  int v10;
  unsigned int v11;
  double v12;
  unsigned int v13;

  v6 = result[2] * a4 + *result * a3;
  v7 = result[3] * a4 + result[1] * a3;
  v8 = a6 + result[5];
  v9 = v6 + a5 + result[4];
  if (v9 <= 1073741820.0)
  {
    v11 = llround(v9);
    if (v9 >= -1073741820.0)
      v10 = v11;
    else
      v10 = -1073741823;
  }
  else
  {
    v10 = 0x3FFFFFFF;
  }
  *a2 = v10;
  v12 = v7 + v8;
  if (v12 <= 1073741820.0)
  {
    if (v12 >= -1073741820.0)
      v13 = llround(v12);
    else
      v13 = -1073741823;
  }
  else
  {
    v13 = 0x3FFFFFFF;
  }
  a2[1] = v13;
  return result;
}

uint64_t colorsync_transform_data_key_hash(_OWORD *a1)
{
  __int128 v1;
  _OWORD v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  return MEMORY[0x186DC26D0](v3, 32);
}

uint64_t CG::DisplayList::getEntryPatternState(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _BOOL4 v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t **v35;
  uint64_t **v36;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  _OWORD v43[3];
  __int128 __s1;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  ++a1[93];
  v6 = a1 + 70;
  v7 = a1[70];
  v8 = a1 + 70;
  if (!v7)
    goto LABEL_37;
  v8 = a1 + 70;
  do
  {
    v9 = *(_QWORD *)(v7 + 32);
    v10 = *(std::__shared_weak_count **)(v7 + 40);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      v13 = CG::CompareEntryStatePattern::operator()(v9, a2, a3);
      v14 = (unint64_t *)&v10->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    else
    {
      v13 = CG::CompareEntryStatePattern::operator()(v9, a2, a3);
    }
    v16 = (uint64_t *)(v7 + 8);
    if (!v13)
    {
      v8 = (uint64_t *)v7;
      v16 = (uint64_t *)v7;
    }
    v7 = *v16;
  }
  while (*v16);
  if (v6 == v8)
    goto LABEL_37;
  v17 = v8[4];
  v18 = (std::__shared_weak_count *)v8[5];
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  if (CG::CompareEntryStatePattern::operator()(v17, a2, a3))
  {
    v21 = 0;
    goto LABEL_32;
  }
  v23 = v8[4];
  v22 = (std::__shared_weak_count *)v8[5];
  if (v22)
  {
    v24 = (unint64_t *)&v22->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = *(_OWORD *)(a3 + 40);
  __s1 = *(_OWORD *)(a3 + 24);
  v45 = v26;
  v46 = *(_OWORD *)(a3 + 56);
  v27 = *(_OWORD *)(v23 + 24);
  v43[0] = *(_OWORD *)(v23 + 8);
  v43[1] = v27;
  v43[2] = *(_OWORD *)(v23 + 40);
  v28 = memcmp(&__s1, v43, 0x30uLL);
  if (v28 < 0)
    goto LABEL_24;
  if (v28)
    goto LABEL_27;
  v38 = *(_QWORD *)(a2 + 120);
  v39 = *(double *)(v38 + 24);
  v40 = *(double *)(v23 + 56);
  if (v39 < v40)
    goto LABEL_24;
  if (v39 > v40)
    goto LABEL_27;
  v41 = *(double *)(v38 + 32);
  v42 = *(double *)(v23 + 64);
  if (v41 < v42)
  {
LABEL_24:
    v21 = 0;
    if (!v22)
      goto LABEL_32;
    goto LABEL_28;
  }
  if (v41 > v42)
  {
LABEL_27:
    v21 = 1;
    if (!v22)
      goto LABEL_32;
    goto LABEL_28;
  }
  v21 = *(double *)(*(_QWORD *)(a2 + 144) + 16) >= *(double *)(v23 + 72);
  if (!v22)
    goto LABEL_32;
LABEL_28:
  v29 = (unint64_t *)&v22->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  if (!v18)
    goto LABEL_36;
LABEL_32:
  v31 = (unint64_t *)&v18->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (v21)
      return v8[4];
  }
  else
  {
LABEL_36:
    if (v21)
      return v8[4];
  }
LABEL_37:
  v33 = operator new();
  *(_QWORD *)v33 = &off_1E1629570;
  *(_OWORD *)(v33 + 40) = *(_OWORD *)(a3 + 56);
  *(_OWORD *)(v33 + 24) = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(v33 + 8) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(v33 + 56) = *(_OWORD *)(*(_QWORD *)(a2 + 120) + 24);
  *(_QWORD *)(v33 + 72) = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 16);
  v34 = (uint64_t *)operator new(0x30uLL);
  *(_QWORD *)&__s1 = v34;
  *((_QWORD *)&__s1 + 1) = v6;
  LOBYTE(v45) = 0;
  std::shared_ptr<CG::DisplayListEntryStatePattern const>::shared_ptr[abi:se180100]<CG::DisplayListEntryStatePattern,void>(v34 + 4, v33);
  v35 = (uint64_t **)(a1 + 69);
  LOBYTE(v45) = 1;
  v36 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStatePattern const>>(v35, v8, v43, &v47, v34 + 4);
  v8 = *v36;
  if (!*v36)
  {
    std::__tree<unsigned long>::__insert_node_at(v35, *(uint64_t *)&v43[0], v36, v34);
    *(_QWORD *)&__s1 = 0;
    v8 = v34;
  }
  std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)&__s1);
  return v8[4];
}

void sub_1849C9CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned long>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:se180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

_QWORD *std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStatePattern const>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  _QWORD *v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _BOOL4 v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _BOOL4 v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _BOOL4 v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  _BOOL4 v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;

  v9 = a1 + 1;
  if (a1 + 1 == a2)
    goto LABEL_19;
  v11 = *a5;
  v12 = (std::__shared_weak_count *)a5[1];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = a2[4];
  v16 = (std::__shared_weak_count *)a2[5];
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v19 = CG::CompareEntryStatePattern::operator()(v11, v15);
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    if (!v12)
      goto LABEL_18;
  }
  else
  {
    v19 = CG::CompareEntryStatePattern::operator()(v11, v15);
    if (!v12)
      goto LABEL_18;
  }
  v22 = (unint64_t *)&v12->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (v19)
      goto LABEL_19;
LABEL_45:
    v41 = a2[4];
    v42 = (std::__shared_weak_count *)a2[5];
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = *a5;
    v46 = (std::__shared_weak_count *)a5[1];
    if (v46)
    {
      v47 = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
      v49 = CG::CompareEntryStatePattern::operator()(v41, v45);
      v50 = (unint64_t *)&v46->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    else
    {
      v49 = CG::CompareEntryStatePattern::operator()(v41, v45);
    }
    if (!v42)
      goto LABEL_60;
    v52 = (unint64_t *)&v42->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
      if (v49)
      {
LABEL_61:
        a4 = a2 + 1;
        v54 = (_QWORD *)a2[1];
        if (v54)
        {
          do
          {
            v55 = v54;
            v54 = (_QWORD *)*v54;
          }
          while (v54);
        }
        else
        {
          v56 = a2;
          do
          {
            v55 = (_QWORD *)v56[2];
            v27 = *v55 == (_QWORD)v56;
            v56 = v55;
          }
          while (!v27);
        }
        if (v55 != v9)
        {
          v57 = *a5;
          v58 = (std::__shared_weak_count *)a5[1];
          if (v58)
          {
            v59 = (unint64_t *)&v58->__shared_owners_;
            do
              v60 = __ldxr(v59);
            while (__stxr(v60 + 1, v59));
          }
          v61 = v55[4];
          v62 = (std::__shared_weak_count *)v55[5];
          if (v62)
          {
            v63 = (unint64_t *)&v62->__shared_owners_;
            do
              v64 = __ldxr(v63);
            while (__stxr(v64 + 1, v63));
            v65 = CG::CompareEntryStatePattern::operator()(v57, v61);
            v66 = (unint64_t *)&v62->__shared_owners_;
            do
              v67 = __ldaxr(v66);
            while (__stlxr(v67 - 1, v66));
            if (!v67)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
          else
          {
            v65 = CG::CompareEntryStatePattern::operator()(v57, v61);
          }
          if (!v58)
            goto LABEL_89;
          v68 = (unint64_t *)&v58->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
            if (!v65)
              return std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStatePattern const>>((uint64_t)a1, a3, a5);
          }
          else
          {
LABEL_89:
            if (!v65)
              return std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStatePattern const>>((uint64_t)a1, a3, a5);
          }
        }
        if (*a4)
        {
          *a3 = v55;
          return v55;
        }
        else
        {
          *a3 = a2;
        }
        return a4;
      }
    }
    else
    {
LABEL_60:
      if (v49)
        goto LABEL_61;
    }
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
LABEL_18:
  if (!v19)
    goto LABEL_45;
LABEL_19:
  if ((_QWORD *)*a1 == a2)
  {
    v25 = a2;
    goto LABEL_65;
  }
  v24 = (_QWORD *)*a2;
  if (*a2)
  {
    do
    {
      v25 = v24;
      v24 = (_QWORD *)v24[1];
    }
    while (v24);
  }
  else
  {
    v26 = a2;
    do
    {
      v25 = (_QWORD *)v26[2];
      v27 = *v25 == (_QWORD)v26;
      v26 = v25;
    }
    while (v27);
  }
  v28 = v25[4];
  v29 = (std::__shared_weak_count *)v25[5];
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = *a5;
  v33 = (std::__shared_weak_count *)a5[1];
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    v36 = CG::CompareEntryStatePattern::operator()(v28, v32);
    v37 = (unint64_t *)&v33->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    if (!v29)
    {
LABEL_42:
      if (!v36)
        return std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStatePattern const>>((uint64_t)a1, a3, a5);
      goto LABEL_65;
    }
  }
  else
  {
    v36 = CG::CompareEntryStatePattern::operator()(v28, v32);
    if (!v29)
      goto LABEL_42;
  }
  v39 = (unint64_t *)&v29->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (v40)
    goto LABEL_42;
  ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
  std::__shared_weak_count::__release_weak(v29);
  if (v36)
  {
LABEL_65:
    if (*a2)
    {
      *a3 = v25;
      return v25 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  return std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStatePattern const>>((uint64_t)a1, a3, a5);
}

BOOL CG::CompareEntryStatePattern::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  int v7;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  _OWORD v14[3];
  _OWORD __s1[3];

  v5 = *(_OWORD *)(a1 + 24);
  __s1[0] = *(_OWORD *)(a1 + 8);
  __s1[1] = v5;
  __s1[2] = *(_OWORD *)(a1 + 40);
  v6 = *(_OWORD *)(a3 + 40);
  v14[0] = *(_OWORD *)(a3 + 24);
  v14[1] = v6;
  v14[2] = *(_OWORD *)(a3 + 56);
  v7 = memcmp(__s1, v14, 0x30uLL);
  if (v7 < 0)
    return 1;
  if (v7)
    return 0;
  v9 = *(double *)(a1 + 56);
  v10 = *(_QWORD *)(a2 + 120);
  v11 = *(double *)(v10 + 24);
  if (v9 < v11)
    return 1;
  if (v9 > v11)
    return 0;
  v12 = *(double *)(a1 + 64);
  v13 = *(double *)(v10 + 32);
  if (v12 < v13)
    return 1;
  if (v12 > v13)
    return 0;
  return *(double *)(a1 + 72) < *(double *)(*(_QWORD *)(a2 + 144) + 16);
}

uint64_t CG::DisplayList::getEntryStrokeState(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _BOOL4 v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  char v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t StrokeColor;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  uint64_t *v49;
  uint64_t **v50;
  uint64_t **v51;
  double v53;
  double v54;
  double v55;
  double v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  BOOL v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  std::__shared_weak_count *v67;
  char v68;

  ++a1[92];
  v6 = a1 + 67;
  v7 = a1[67];
  if (!v7)
  {
    v8 = a1 + 67;
    goto LABEL_47;
  }
  v8 = a1 + 67;
  do
  {
    v9 = *(std::__shared_weak_count **)(v7 + 40);
    v66 = *(uint64_t **)(v7 + 32);
    v67 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      v12 = CG::CompareEntryStateStroke::operator()((uint64_t *)&v66, a2);
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    else
    {
      v12 = CG::CompareEntryStateStroke::operator()((uint64_t *)&v66, a2);
    }
    v14 = (uint64_t *)(v7 + 8);
    if (!v12)
    {
      v8 = (uint64_t *)v7;
      v14 = (uint64_t *)v7;
    }
    v7 = *v14;
  }
  while (*v14);
  if (v6 == v8)
    goto LABEL_47;
  v15 = v8[5];
  v62 = v8[4];
  v63 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  if (CG::CompareEntryStateStroke::operator()(&v62, a2))
  {
    v18 = 0;
    goto LABEL_42;
  }
  v20 = v8[4];
  v19 = (std::__shared_weak_count *)v8[5];
  if (v19)
  {
    v21 = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  StrokeColor = CGGStateGetStrokeColor(a2);
  v31 = *(_QWORD *)(v20 + 8);
  if (v31)
    v32 = *(_QWORD *)(v31 + 16);
  else
    v32 = 0;
  v33 = CGColorCompare(StrokeColor, v32, v24, v25, v26, v27, v28, v29, v30);
  if (v33 == -1)
    goto LABEL_37;
  if (v33 == 1)
    goto LABEL_34;
  v34 = *(_QWORD *)(a2 + 128);
  v35 = *(_QWORD *)(v20 + 40);
  v36 = v35 ? *(_QWORD *)(v35 + 16) : 0;
  v37 = CGDashCompare(*(_QWORD *)(v34 + 32), v36);
  if (v37 == -1)
    goto LABEL_37;
  if (v37 == 1)
    goto LABEL_34;
  v38 = *(double *)(v34 + 8);
  v39 = *(double *)(v20 + 16);
  if (v38 < v39)
  {
LABEL_37:
    v18 = 0;
    if (!v19)
      goto LABEL_42;
    goto LABEL_38;
  }
  if (v38 <= v39)
  {
    v53 = *(double *)(v34 + 24);
    v54 = *(double *)(v20 + 24);
    if (v53 < v54)
      goto LABEL_37;
    if (v53 <= v54)
    {
      v55 = *(double *)(v34 + 16);
      v56 = *(double *)(v20 + 32);
      if (v55 < v56)
        goto LABEL_37;
      if (v55 <= v56)
      {
        v57 = *(_WORD *)(v34 + 2);
        v58 = (__int16)(v57 << 8);
        v59 = *(_WORD *)(v20 + 48);
        if (v58 < (__int16)(v59 << 8))
          goto LABEL_37;
        if (v58 <= (__int16)(v59 << 8))
        {
          v60 = v57 >> 8;
          if (v60 >= v59 >> 8)
          {
            if (v60 <= v59 >> 8)
            {
              if (*(_BYTE *)(v34 + 1))
                v61 = 1;
              else
                v61 = *(_BYTE *)(v20 + 50) == 0;
              v18 = v61;
              if (!v19)
                goto LABEL_42;
              goto LABEL_38;
            }
            goto LABEL_34;
          }
          goto LABEL_37;
        }
      }
    }
  }
LABEL_34:
  v18 = 1;
  if (!v19)
    goto LABEL_42;
LABEL_38:
  v40 = (unint64_t *)&v19->__shared_owners_;
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_42:
  v42 = v63;
  if (!v63)
    goto LABEL_46;
  v43 = (unint64_t *)&v63->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    if ((v18 & 1) != 0)
      return v8[4];
  }
  else
  {
LABEL_46:
    if ((v18 & 1) != 0)
      return v8[4];
  }
LABEL_47:
  v45 = operator new();
  v46 = (*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 24))(a1, *(_QWORD *)(*(_QWORD *)(a2 + 128) + 32));
  *(_QWORD *)v45 = &off_1E1629490;
  *(_QWORD *)(v45 + 8) = a3;
  *(_QWORD *)(v45 + 40) = v46;
  v47 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(v45 + 16) = *(_QWORD *)(v47 + 8);
  *(_QWORD *)(v45 + 32) = *(_QWORD *)(v47 + 16);
  *(_QWORD *)(v45 + 24) = *(_QWORD *)(v47 + 24);
  v48 = *(_WORD *)(v47 + 2);
  *(_BYTE *)(v45 + 48) = v48;
  *(_WORD *)(v45 + 48) = v48 | (*(unsigned __int8 *)(v47 + 3) << 8);
  *(_BYTE *)(v45 + 50) = *(_BYTE *)(v47 + 1);
  v49 = (uint64_t *)operator new(0x30uLL);
  v66 = v49;
  v67 = (std::__shared_weak_count *)v6;
  v68 = 0;
  std::shared_ptr<CG::DisplayListEntryStateStroke const>::shared_ptr[abi:se180100]<CG::DisplayListEntryStateStroke,void>(v49 + 4, v45);
  v50 = (uint64_t **)(a1 + 66);
  v68 = 1;
  v51 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListEntryStateStroke const>,CG::CompareEntryStateStroke,std::allocator<std::shared_ptr<CG::DisplayListEntryStateStroke const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateStroke const>>(v50, v8, &v65, &v64, v49 + 4);
  v8 = *v51;
  if (!*v51)
  {
    std::__tree<unsigned long>::__insert_node_at(v50, v65, v51, v49);
    v66 = 0;
    v8 = v49;
  }
  std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)&v66);
  return v8[4];
}

void sub_1849CA5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL CG::CompareEntryStateStroke::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t StrokeColor;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  __int16 v27;
  __int16 v28;
  int v29;
  int v30;

  v4 = *(_QWORD *)(*a1 + 8);
  if (v4)
    v5 = *(_QWORD *)(v4 + 16);
  else
    v5 = 0;
  StrokeColor = CGGStateGetStrokeColor(a2);
  v14 = CGColorCompare(v5, StrokeColor, v7, v8, v9, v10, v11, v12, v13);
  if (v14 == -1)
    return 1;
  if (v14 == 1)
    return 0;
  v15 = *a1;
  v16 = *(_QWORD *)(v15 + 40);
  v17 = v16 ? *(_QWORD *)(v16 + 16) : 0;
  v18 = *(_QWORD *)(a2 + 128);
  v19 = CGDashCompare(v17, *(_QWORD *)(v18 + 32));
  if (v19 == -1)
    return 1;
  if (v19 == 1)
    return 0;
  v21 = *(double *)(v15 + 16);
  v22 = *(double *)(v18 + 8);
  if (v21 < v22)
    return 1;
  if (v21 > v22)
    return 0;
  v23 = *(double *)(v15 + 24);
  v24 = *(double *)(v18 + 24);
  if (v23 < v24)
    return 1;
  if (v23 > v24)
    return 0;
  v25 = *(double *)(v15 + 32);
  v26 = *(double *)(v18 + 16);
  if (v25 < v26)
    return 1;
  if (v25 > v26)
    return 0;
  v27 = *(_WORD *)(v15 + 48);
  v28 = *(_WORD *)(v18 + 2);
  v29 = (__int16)(v28 << 8);
  if (v29 > (__int16)(v27 << 8))
    return 1;
  if (v29 < (__int16)(v27 << 8))
    return 0;
  v30 = v28 >> 8;
  if (v30 > v27 >> 8)
    return 1;
  if (v30 < v27 >> 8)
    return 0;
  return *(_BYTE *)(v18 + 1) && *(_BYTE *)(v15 + 50) == 0;
}

_QWORD *std::__tree<std::shared_ptr<CG::DisplayListEntryStateStroke const>,CG::CompareEntryStateStroke,std::allocator<std::shared_ptr<CG::DisplayListEntryStateStroke const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateStroke const>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  _QWORD *v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _BOOL4 v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _BOOL4 v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _BOOL4 v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  _BOOL4 v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;

  v9 = a1 + 1;
  if (a1 + 1 == a2)
    goto LABEL_19;
  v11 = *a5;
  v12 = (std::__shared_weak_count *)a5[1];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = a2[4];
  v16 = (std::__shared_weak_count *)a2[5];
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v19 = CG::CompareEntryStateStroke::operator()(v11, v15);
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    if (!v12)
      goto LABEL_18;
  }
  else
  {
    v19 = CG::CompareEntryStateStroke::operator()(v11, v15);
    if (!v12)
      goto LABEL_18;
  }
  v22 = (unint64_t *)&v12->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (v19)
      goto LABEL_19;
LABEL_45:
    v41 = a2[4];
    v42 = (std::__shared_weak_count *)a2[5];
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = *a5;
    v46 = (std::__shared_weak_count *)a5[1];
    if (v46)
    {
      v47 = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
      v49 = CG::CompareEntryStateStroke::operator()(v41, v45);
      v50 = (unint64_t *)&v46->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    else
    {
      v49 = CG::CompareEntryStateStroke::operator()(v41, v45);
    }
    if (!v42)
      goto LABEL_60;
    v52 = (unint64_t *)&v42->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
      if (v49)
      {
LABEL_61:
        a4 = a2 + 1;
        v54 = (_QWORD *)a2[1];
        if (v54)
        {
          do
          {
            v55 = v54;
            v54 = (_QWORD *)*v54;
          }
          while (v54);
        }
        else
        {
          v56 = a2;
          do
          {
            v55 = (_QWORD *)v56[2];
            v27 = *v55 == (_QWORD)v56;
            v56 = v55;
          }
          while (!v27);
        }
        if (v55 != v9)
        {
          v57 = *a5;
          v58 = (std::__shared_weak_count *)a5[1];
          if (v58)
          {
            v59 = (unint64_t *)&v58->__shared_owners_;
            do
              v60 = __ldxr(v59);
            while (__stxr(v60 + 1, v59));
          }
          v61 = v55[4];
          v62 = (std::__shared_weak_count *)v55[5];
          if (v62)
          {
            v63 = (unint64_t *)&v62->__shared_owners_;
            do
              v64 = __ldxr(v63);
            while (__stxr(v64 + 1, v63));
            v65 = CG::CompareEntryStateStroke::operator()(v57, v61);
            v66 = (unint64_t *)&v62->__shared_owners_;
            do
              v67 = __ldaxr(v66);
            while (__stlxr(v67 - 1, v66));
            if (!v67)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
          else
          {
            v65 = CG::CompareEntryStateStroke::operator()(v57, v61);
          }
          if (!v58)
            goto LABEL_89;
          v68 = (unint64_t *)&v58->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
            if (!v65)
              return std::__tree<std::shared_ptr<CG::DisplayListEntryStateStroke const>,CG::CompareEntryStateStroke,std::allocator<std::shared_ptr<CG::DisplayListEntryStateStroke const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateStroke const>>((uint64_t)a1, a3, a5);
          }
          else
          {
LABEL_89:
            if (!v65)
              return std::__tree<std::shared_ptr<CG::DisplayListEntryStateStroke const>,CG::CompareEntryStateStroke,std::allocator<std::shared_ptr<CG::DisplayListEntryStateStroke const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateStroke const>>((uint64_t)a1, a3, a5);
          }
        }
        if (*a4)
        {
          *a3 = v55;
          return v55;
        }
        else
        {
          *a3 = a2;
        }
        return a4;
      }
    }
    else
    {
LABEL_60:
      if (v49)
        goto LABEL_61;
    }
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
LABEL_18:
  if (!v19)
    goto LABEL_45;
LABEL_19:
  if ((_QWORD *)*a1 == a2)
  {
    v25 = a2;
    goto LABEL_65;
  }
  v24 = (_QWORD *)*a2;
  if (*a2)
  {
    do
    {
      v25 = v24;
      v24 = (_QWORD *)v24[1];
    }
    while (v24);
  }
  else
  {
    v26 = a2;
    do
    {
      v25 = (_QWORD *)v26[2];
      v27 = *v25 == (_QWORD)v26;
      v26 = v25;
    }
    while (v27);
  }
  v28 = v25[4];
  v29 = (std::__shared_weak_count *)v25[5];
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = *a5;
  v33 = (std::__shared_weak_count *)a5[1];
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    v36 = CG::CompareEntryStateStroke::operator()(v28, v32);
    v37 = (unint64_t *)&v33->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    if (!v29)
    {
LABEL_42:
      if (!v36)
        return std::__tree<std::shared_ptr<CG::DisplayListEntryStateStroke const>,CG::CompareEntryStateStroke,std::allocator<std::shared_ptr<CG::DisplayListEntryStateStroke const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateStroke const>>((uint64_t)a1, a3, a5);
      goto LABEL_65;
    }
  }
  else
  {
    v36 = CG::CompareEntryStateStroke::operator()(v28, v32);
    if (!v29)
      goto LABEL_42;
  }
  v39 = (unint64_t *)&v29->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (v40)
    goto LABEL_42;
  ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
  std::__shared_weak_count::__release_weak(v29);
  if (v36)
  {
LABEL_65:
    if (*a2)
    {
      *a3 = v25;
      return v25 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  return std::__tree<std::shared_ptr<CG::DisplayListEntryStateStroke const>,CG::CompareEntryStateStroke,std::allocator<std::shared_ptr<CG::DisplayListEntryStateStroke const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateStroke const>>((uint64_t)a1, a3, a5);
}

uint64_t CG::DisplayList::dashResourceForDash(uint64_t a1, unsigned int *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _BOOL4 v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  char v34;

  if (!a2)
    return 0;
  v3 = (uint64_t *)(a1 + 208);
  v4 = *(_QWORD *)(a1 + 208);
  ++*(_QWORD *)(a1 + 632);
  v5 = (uint64_t *)(a1 + 208);
  if (!v4)
    goto LABEL_37;
  v5 = (uint64_t *)(a1 + 208);
  do
  {
    v6 = *(_QWORD *)(v4 + 32);
    v7 = *(std::__shared_weak_count **)(v4 + 40);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = CGDashCompare(*(_QWORD *)(v6 + 16), (uint64_t)a2) == -1;
      v11 = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    else
    {
      v10 = CGDashCompare(*(_QWORD *)(v6 + 16), (uint64_t)a2) == -1;
    }
    v13 = (uint64_t *)(v4 + 8);
    if (!v10)
    {
      v5 = (uint64_t *)v4;
      v13 = (uint64_t *)v4;
    }
    v4 = *v13;
  }
  while (*v13);
  if (v3 == v5)
    goto LABEL_37;
  v14 = v5[4];
  v15 = (std::__shared_weak_count *)v5[5];
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  if (CGDashCompare(*(_QWORD *)(v14 + 16), (uint64_t)a2) == -1)
  {
    v22 = 0;
  }
  else
  {
    v18 = v5[4];
    v19 = (std::__shared_weak_count *)v5[5];
    if (!v19)
    {
      v22 = CGDashCompare((uint64_t)a2, *(_QWORD *)(v18 + 16)) != -1;
      if (!v15)
        goto LABEL_36;
      goto LABEL_31;
    }
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    v22 = CGDashCompare((uint64_t)a2, *(_QWORD *)(v18 + 16)) != -1;
    do
      v23 = __ldaxr(v20);
    while (__stlxr(v23 - 1, v20));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      if (!v15)
        goto LABEL_36;
      goto LABEL_31;
    }
  }
  if (!v15)
    goto LABEL_36;
LABEL_31:
  v25 = (unint64_t *)&v15->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_36:
  if (!v22)
  {
LABEL_37:
    v27 = operator new();
    *(_DWORD *)(v27 + 8) = 50331648;
    *(_QWORD *)v27 = &off_1E1629258;
    *(_QWORD *)(v27 + 16) = 0;
    CG::DisplayListResourceDash::setDash(v27, a2);
    v28 = (uint64_t *)operator new(0x30uLL);
    v33[0] = v28;
    v33[1] = v3;
    std::shared_ptr<CG::DisplayListResourceDash>::shared_ptr[abi:se180100]<CG::DisplayListResourceDash,void>(v28 + 4, v27);
    v29 = (uint64_t **)(v3 - 1);
    v34 = 1;
    v30 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceDash>,CG::CompareResourceDash,std::allocator<std::shared_ptr<CG::DisplayListResourceDash>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceDash>>(v29, v5, &v32, &v31, v28 + 4);
    v5 = *v30;
    if (!*v30)
    {
      std::__tree<unsigned long>::__insert_node_at(v29, v32, v30, v28);
      v33[0] = 0;
      v5 = v28;
    }
    std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)v33);
  }
  return v5[4];
}

void sub_1849CAE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::shared_ptr<CG::DisplayListEntryStateStroke const>,CG::CompareEntryStateStroke,std::allocator<std::shared_ptr<CG::DisplayListEntryStateStroke const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateStroke const>>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _BOOL4 v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _BOOL4 v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v7 = v4;
        v8 = *a3;
        v9 = (std::__shared_weak_count *)a3[1];
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldxr(p_shared_owners);
          while (__stxr(v11 + 1, p_shared_owners));
        }
        v12 = v7[4];
        v13 = (std::__shared_weak_count *)v7[5];
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
          v16 = CG::CompareEntryStateStroke::operator()(v8, v12);
          v17 = (unint64_t *)&v13->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        else
        {
          v16 = CG::CompareEntryStateStroke::operator()(v8, v12);
        }
        if (!v9)
          break;
        v19 = (unint64_t *)&v9->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (v20)
          break;
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        if (v16)
          goto LABEL_18;
LABEL_21:
        v21 = v7[4];
        v22 = (std::__shared_weak_count *)v7[5];
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
        v25 = *a3;
        v26 = (std::__shared_weak_count *)a3[1];
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
          v29 = CG::CompareEntryStateStroke::operator()(v21, v25);
          v30 = (unint64_t *)&v26->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        else
        {
          v29 = CG::CompareEntryStateStroke::operator()(v21, v25);
        }
        if (v22)
        {
          v32 = (unint64_t *)&v22->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        if (v29)
        {
          v5 = v7 + 1;
          v4 = (_QWORD *)v7[1];
          if (v4)
            continue;
        }
        goto LABEL_41;
      }
      if (!v16)
        goto LABEL_21;
LABEL_18:
      v4 = (_QWORD *)*v7;
      v5 = v7;
      if (!*v7)
        goto LABEL_41;
    }
  }
  v7 = (_QWORD *)(a1 + 8);
LABEL_41:
  *a2 = v7;
  return v5;
}

BOOL CG::CompareEntryStateStroke::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  __int16 v12;
  __int16 v13;
  int v14;
  BOOL v16;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 < v3)
    return 1;
  if (v2 > v3)
    return 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a2 + 40);
  if (v4 < v5)
    return 1;
  if (v4 > v5)
    return 0;
  v6 = *(double *)(a1 + 16);
  v7 = *(double *)(a2 + 16);
  if (v6 < v7)
    return 1;
  if (v6 > v7)
    return 0;
  v8 = *(double *)(a1 + 24);
  v9 = *(double *)(a2 + 24);
  if (v8 < v9)
    return 1;
  if (v8 > v9)
    return 0;
  v10 = *(double *)(a1 + 32);
  v11 = *(double *)(a2 + 32);
  if (v10 < v11)
    return 1;
  if (v10 > v11)
    return 0;
  v12 = *(_WORD *)(a1 + 48);
  v13 = *(_WORD *)(a2 + 48);
  if ((char)v12 < (char)v13)
    return 1;
  if ((char)v12 > (char)v13)
    return 0;
  v14 = v12 >> 8;
  if (v14 < v13 >> 8)
    return 1;
  if (v14 > v13 >> 8)
    return 0;
  if (*(_BYTE *)(a1 + 50))
    v16 = 1;
  else
    v16 = *(_BYTE *)(a2 + 50) == 0;
  return !v16;
}

void dl_Finalize(char *a1)
{
  const void *v2;
  void **v3;

  *((_QWORD *)a1 + 2) = &off_1E1628F98;
  v3 = (void **)(a1 + 592);
  std::vector<std::shared_ptr<CG::DisplayListEntry const>>::__destroy_vector::operator()[abi:se180100](&v3);
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*((_QWORD **)a1 + 72));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*((_QWORD **)a1 + 69));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*((_QWORD **)a1 + 66));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*((_QWORD **)a1 + 63));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*((_QWORD **)a1 + 60));
  std::__hash_table<std::shared_ptr<CG::DisplayListResourceDisplayList>,CG::HashResourceDisplayList,CG::EqualsResourceDisplayList,std::allocator<std::shared_ptr<CG::DisplayListResourceDisplayList>>>::~__hash_table((uint64_t)(a1 + 432));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*((_QWORD **)a1 + 52));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*((_QWORD **)a1 + 49));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*((_QWORD **)a1 + 46));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*((_QWORD **)a1 + 43));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*((_QWORD **)a1 + 40));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*((_QWORD **)a1 + 37));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*((_QWORD **)a1 + 34));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*((_QWORD **)a1 + 31));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*((_QWORD **)a1 + 28));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*((_QWORD **)a1 + 25));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*((_QWORD **)a1 + 22));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*((_QWORD **)a1 + 19));
  free(*((void **)a1 + 17));
  std::shared_ptr<CG::DisplayListResourceCFTypeRef>::~shared_ptr[abi:se180100]((uint64_t)(a1 + 120));
  v2 = (const void *)*((_QWORD *)a1 + 4);
  if (v2)
    CFRelease(v2);
}

void std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*a1);
    std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(a1[1]);
    std::shared_ptr<CG::DisplayListResourceCFTypeRef>::~shared_ptr[abi:se180100]((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListEntry const*,std::shared_ptr<CG::DisplayListEntry const>::__shared_ptr_default_delete<CG::DisplayListEntry const,CG::DisplayListEntry const>,std::allocator<CG::DisplayListEntry const>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListEntryStateDrawing *,std::shared_ptr<CG::DisplayListEntryStateDrawing const>::__shared_ptr_default_delete<CG::DisplayListEntryStateDrawing const,CG::DisplayListEntryStateDrawing>,std::allocator<CG::DisplayListEntryStateDrawing>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CG::DisplayListEntryStateDrawing::~DisplayListEntryStateDrawing(CG::DisplayListEntryStateDrawing *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceColorSpace *,std::shared_ptr<CG::DisplayListResourceColorSpace>::__shared_ptr_default_delete<CG::DisplayListResourceColorSpace,CG::DisplayListResourceColorSpace>,std::allocator<CG::DisplayListResourceColorSpace>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CG::DisplayListResourceColorSpace::~DisplayListResourceColorSpace(CGColorSpaceRef *this)
{
  *this = (CGColorSpaceRef)&off_1E16295C8;
  CGColorSpaceRelease(this[2]);
  JUMPOUT(0x186DC23C4);
}

{
  *this = (CGColorSpaceRef)&off_1E16295C8;
  CGColorSpaceRelease(this[2]);
}

void CG::DisplayListResourceColor::~DisplayListResourceColor(CG::DisplayListResourceColor *this)
{
  const void *v1;

  *(_QWORD *)this = &off_1E16292F0;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x186DC23C4);
}

{
  const void *v1;

  *(_QWORD *)this = &off_1E16292F0;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceColor *,std::shared_ptr<CG::DisplayListResourceColor>::__shared_ptr_default_delete<CG::DisplayListResourceColor,CG::DisplayListResourceColor>,std::allocator<CG::DisplayListResourceColor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListEntryStateFill *,std::shared_ptr<CG::DisplayListEntryStateFill const>::__shared_ptr_default_delete<CG::DisplayListEntryStateFill const,CG::DisplayListEntryStateFill>,std::allocator<CG::DisplayListEntryStateFill>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CG::DisplayListEntryStateFill::~DisplayListEntryStateFill(CG::DisplayListEntryStateFill *this)
{
  JUMPOUT(0x186DC23C4);
}

void CG::DisplayListShape::~DisplayListShape(CG::DisplayListShape *this)
{
  void *v2;
  BOOL v3;

  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
    v3 = v2 == &the_empty_shape;
  else
    v3 = 1;
  if (!v3)
    free(v2);
  if (*(_QWORD *)this)
    free(*(void **)this);
  std::mutex::~mutex((std::mutex *)((char *)this + 56));
}

void std::__shared_ptr_emplace<CG::DisplayListShape>::__on_zero_shared(uint64_t a1)
{
  CG::DisplayListShape::~DisplayListShape((CG::DisplayListShape *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceClip *,std::shared_ptr<CG::DisplayListResourceClip>::__shared_ptr_default_delete<CG::DisplayListResourceClip,CG::DisplayListResourceClip>,std::allocator<CG::DisplayListResourceClip>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CG::DisplayListResourceClip::~DisplayListResourceClip(void **this)
{
  *this = &off_1E1629228;
  CGClipStackRelease(this[2]);
  JUMPOUT(0x186DC23C4);
}

{
  *this = &off_1E1629228;
  CGClipStackRelease(this[2]);
}

void CG::DisplayListEntryGlyphs::~DisplayListEntryGlyphs(void **this)
{
  *this = &off_1E1629190;
  free(this[29]);
  free(this[30]);
  JUMPOUT(0x186DC23C4);
}

{
  *this = &off_1E1629190;
  free(this[29]);
  free(this[30]);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceFont *,std::shared_ptr<CG::DisplayListResourceFont>::__shared_ptr_default_delete<CG::DisplayListResourceFont,CG::DisplayListResourceFont>,std::allocator<CG::DisplayListResourceFont>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CG::DisplayListResourceFont::~DisplayListResourceFont(CG::DisplayListResourceFont *this)
{
  const void *v1;

  *(_QWORD *)this = &off_1E1629288;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x186DC23C4);
}

{
  const void *v1;

  *(_QWORD *)this = &off_1E1629288;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

void CG::DisplayListEntryRects::~DisplayListEntryRects(void **this)
{
  *this = &off_1E16290F8;
  free(this[17]);
  JUMPOUT(0x186DC23C4);
}

{
  *this = &off_1E16290F8;
  free(this[17]);
}

void CG::DisplayListEntryAction::~DisplayListEntryAction(CG::DisplayListEntryAction *this)
{
  JUMPOUT(0x186DC23C4);
}

void CG::DisplayListEntryPath::~DisplayListEntryPath(CG::DisplayListEntryPath *this)
{
  CG::DisplayListEntryPath::~DisplayListEntryPath(this);
  JUMPOUT(0x186DC23C4);
}

{
  const void *v1;

  *(_QWORD *)this = &off_1E1629050;
  v1 = (const void *)*((_QWORD *)this + 11);
  if (v1)
    CFRelease(v1);
}

void CG::DisplayListEntryImage::~DisplayListEntryImage(CG::DisplayListEntryImage *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceImage *,std::shared_ptr<CG::DisplayListResourceImage>::__shared_ptr_default_delete<CG::DisplayListResourceImage,CG::DisplayListResourceImage>,std::allocator<CG::DisplayListResourceImage>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CG::DisplayListResourceImage::~DisplayListResourceImage(CG::DisplayListResourceImage *this)
{
  const void *v1;

  *(_QWORD *)this = &off_1E1629320;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x186DC23C4);
}

{
  const void *v1;

  *(_QWORD *)this = &off_1E1629320;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceSoftMask *,std::shared_ptr<CG::DisplayListResourceSoftMask>::__shared_ptr_default_delete<CG::DisplayListResourceSoftMask,CG::DisplayListResourceSoftMask>,std::allocator<CG::DisplayListResourceSoftMask>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CG::DisplayListResourceSoftMask::~DisplayListResourceSoftMask(CG::DisplayListResourceSoftMask *this)
{
  const void *v1;

  *(_QWORD *)this = &off_1E1629518;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x186DC23C4);
}

{
  const void *v1;

  *(_QWORD *)this = &off_1E1629518;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceShading *,std::shared_ptr<CG::DisplayListResourceShading>::__shared_ptr_default_delete<CG::DisplayListResourceShading,CG::DisplayListResourceShading>,std::allocator<CG::DisplayListResourceShading>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CG::DisplayListResourceShading::~DisplayListResourceShading(CG::DisplayListResourceShading *this)
{
  CG::DisplayListResourceShading::~DisplayListResourceShading(this);
  JUMPOUT(0x186DC23C4);
}

{
  const void *v2;
  const void *v3;

  *(_QWORD *)this = &off_1E1629400;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 3);
  if (v3)
    CFRelease(v3);
}

void CG::DisplayListEntryShading::~DisplayListEntryShading(CG::DisplayListEntryShading *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceDisplayList *,std::shared_ptr<CG::DisplayListResourceDisplayList>::__shared_ptr_default_delete<CG::DisplayListResourceDisplayList,CG::DisplayListResourceDisplayList>,std::allocator<CG::DisplayListResourceDisplayList>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CG::DisplayListResourceDisplayList::~DisplayListResourceDisplayList(CG::DisplayListResourceDisplayList *this)
{
  CG::DisplayListResourceDisplayList::~DisplayListResourceDisplayList(this);
  JUMPOUT(0x186DC23C4);
}

{
  const void *v1;

  *(_QWORD *)this = &off_1E16295F8;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

void CG::DisplayListEntryDisplayList::~DisplayListEntryDisplayList(CG::DisplayListEntryDisplayList *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListResourceStyle *,std::shared_ptr<CG::DisplayListResourceStyle>::__shared_ptr_default_delete<CG::DisplayListResourceStyle,CG::DisplayListResourceStyle>,std::allocator<CG::DisplayListResourceStyle>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CG::DisplayListResourceStyle::~DisplayListResourceStyle(CG::DisplayListResourceStyle *this)
{
  const void *v1;

  *(_QWORD *)this = &off_1E1629350;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x186DC23C4);
}

{
  const void *v1;

  *(_QWORD *)this = &off_1E1629350;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListEntryStateStroke *,std::shared_ptr<CG::DisplayListEntryStateStroke const>::__shared_ptr_default_delete<CG::DisplayListEntryStateStroke const,CG::DisplayListEntryStateStroke>,std::allocator<CG::DisplayListEntryStateStroke>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CG::DisplayListEntryStateStroke::~DisplayListEntryStateStroke(CG::DisplayListEntryStateStroke *this)
{
  JUMPOUT(0x186DC23C4);
}

uint64_t std::__shared_ptr_pointer<CG::DisplayListEntryStatePattern *,std::shared_ptr<CG::DisplayListEntryStatePattern const>::__shared_ptr_default_delete<CG::DisplayListEntryStatePattern const,CG::DisplayListEntryStatePattern>,std::allocator<CG::DisplayListEntryStatePattern>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CG::DisplayListEntryStatePattern::~DisplayListEntryStatePattern(CG::DisplayListEntryStatePattern *this)
{
  JUMPOUT(0x186DC23C4);
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  CGAffineTransform *result;
  __double2 v4;

  v4 = __sincos_stret(angle);
  retstr->a = v4.__cosval;
  retstr->b = v4.__sinval;
  retstr->c = -v4.__sinval;
  retstr->d = v4.__cosval;
  retstr->tx = 0.0;
  retstr->ty = 0.0;
  return result;
}

uint64_t CGGlyphLockAccessCustomized(uint64_t *a1, const void *a2, _OWORD *a3, __int16 a4, unint64_t a5, double a6, double a7)
{
  *a1 = CGGlyphBuilderCreate(a2, a3, a4, a5, a6, a7);
  return 1;
}

uint64_t CGGlyphLockAccess(uint64_t *a1, const void *a2, _OWORD *a3, uint64_t a4, __int16 a5)
{
  *a1 = CGGlyphBuilderCreate(a2, a3, a5, 0, 0.0, 0.0);
  return 1;
}

CFTypeRef *CGGlyphLockUnlock(CFTypeRef **a1)
{
  CFTypeRef *result;

  result = *a1;
  if (result)
  {
    CGGlyphBuilderUnlockBitmaps(result);
    result = CGGlyphBuilderRelease(*a1);
    *a1 = 0;
  }
  return result;
}

void draw_glyph_bitmap_run_with_compositing(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  __n128 v21;
  char *v22;
  unint64_t v23;
  char *v24;
  __int16 *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  double v32;
  float64x2_t v33;
  float64x2_t v34;
  unint64_t v35;
  __int16 v36;
  char *v37;
  unint64_t QuantizationLevelWithStyle;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  CFTypeRef *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  _DWORD *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  _DWORD *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  _DWORD *v71;
  unsigned int v72;
  unsigned int v73;
  char *v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  unsigned __int16 *v85;
  unsigned __int8 *v86;
  int v87;
  unsigned __int8 v88;
  unsigned int v89;
  BOOL v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  __int16 v94;
  unsigned int v95;
  int32x2_t v96;
  char *v97;
  int v98;
  int v99;
  int v100;
  __int128 *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  char *v108;
  char *v109;
  char *v110;
  char v111[8];
  char *v112;
  char *v113;
  char *v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  size_t v119;
  char *v120;
  uint64_t v121;
  int32x2_t v122[2];
  unint64_t v123;
  _OWORD v124[3];
  char v125[1024];
  uint64_t v126;

  v121 = a4;
  v126 = *MEMORY[0x1E0C80C00];
  if (a10 >> 61)
    v12 = -1;
  else
    v12 = a10;
  MEMORY[0x1E0C80A78](a1, a2);
  v22 = &v111[-v17];
  v23 = v12 - 0x1FFFFFFFFFFFFFFFLL;
  if (v12 <= 0x1FFFFFFFFFFFFFFELL)
    v24 = &v111[-v17];
  else
    v24 = 0;
  v117 = v13;
  v118 = v14;
  v116 = v18;
  v119 = v20;
  v25 = v15;
  v26 = v16;
  if (v23 >= v19)
    v24 = (char *)malloc_type_malloc(v20, 0x6B45CACAuLL);
  if (v24)
  {
    v27 = (char *)MEMORY[0x1E0C80A78](v24, v21);
    v113 = &v111[-v29];
    if (v28 <= 0x3FFFFFFFFFFFFFFELL)
      v30 = &v111[-v29];
    else
      v30 = 0;
    v120 = v27;
    if (v28 - 0x3FFFFFFFFFFFFFFFLL >= 0xC000000000000102)
      v30 = (char *)malloc_type_malloc(4 * a10, 0xF4F7B1EEuLL);
    if (v30)
    {
      v112 = v22;
      v31 = *(_QWORD *)(v121 + 136);
      v32 = *(double *)(v31 + 16);
      v33 = vmulq_n_f64(*(float64x2_t *)a7, v32);
      v34 = vmulq_n_f64(*(float64x2_t *)(a7 + 16), v32);
      v124[0] = v33;
      v124[1] = v34;
      v124[2] = *(_OWORD *)(a7 + 32);
      v35 = *(_QWORD *)(v31 + 88);
      v115 = a6;
      v36 = a6;
      v37 = v30;
      QuantizationLevelWithStyle = CGFontGetQuantizationLevelWithStyle((uint64_t)v124, v36, v35);
      v123 = QuantizationLevelWithStyle;
      v114 = v37;
      v39.n128_u64[0] = (unint64_t)CGFontGetGlyphIdentifiers(v25, (float64x2_t *)a7, v26, a10, &v123, (uint64_t)v37, (uint64_t)v120, v122);
      MEMORY[0x1E0C80A78](v40, v39);
      v42 = &v111[-v41];
      if (v12 <= 0x1FFFFFFFFFFFFFFELL)
        v43 = &v111[-v41];
      else
        v43 = 0;
      if (v23 >= 0xE000000000000402)
        v43 = (char *)malloc_type_malloc(v119, 0xC66E0719uLL);
      if (v43)
      {
        v44 = (CFTypeRef *)CGGlyphBuilderCreate(*(const void **)(*(_QWORD *)(v121 + 136) + 8), v124, v115, QuantizationLevelWithStyle, *(double *)(*(_QWORD *)(v121 + 136) + 72), *(double *)(*(_QWORD *)(v121 + 136) + 80));
        if (CGGlyphBuilderLockBitmaps((uint64_t)v44, (uint64_t)v114, a10, (uint64_t)v43, v45, v46, v47, v48))
        {
          v49 = 0;
          v50 = v120 + 4;
          v51 = *((_DWORD *)v120 + 1);
          v52 = *(_DWORD *)v120;
          v53 = *(_DWORD *)v120;
          v54 = v51;
          v55 = v51;
          v56 = *(_DWORD *)v120;
          do
          {
            v57 = *(_DWORD **)&v43[8 * v49];
            if (v57)
            {
              v58 = v57[5];
              if (v58)
              {
                v59 = v57[6];
                if (v59)
                {
                  v60 = v57[3] + *(v50 - 1);
                  v61 = v60 + v58;
                  v62 = v57[4] + *v50;
                  v63 = v62 - v59;
                  if (v60 < v53)
                    v53 = v60;
                  if (v61 > v56)
                    v56 = v61;
                  if (v63 < v55)
                    v55 = v63;
                  if (v62 > v54)
                    v54 = v62;
                }
              }
            }
            ++v49;
            v50 += 2;
          }
          while (a10 != v49);
          v64 = CGGlyphBitmapCreate(0, v115, v53 - v52, v54 - v51, v56 - v53, v54 - v55, 0, 0);
          if (v64)
          {
            v65 = (uint64_t)v64;
            if (v64[5])
            {
              v66 = v64[6];
              if (v66)
              {
                bzero(v64 + 10, (v64[8] * v66));
                v69 = v120;
                v70 = 0;
                do
                {
                  v71 = *(_DWORD **)&v43[8 * v70];
                  if (v71)
                  {
                    if (v71[5])
                    {
                      v72 = v71[6];
                      if (v72)
                      {
                        v73 = 0;
                        v74 = &v69[8 * v70];
                        do
                        {
                          v75 = *(_DWORD *)v74 + v71[3] - (v52 + *(_DWORD *)(v65 + 12));
                          v76 = v75 & ~(v75 >> 31);
                          v78 = *(_DWORD *)(v65 + 20);
                          v77 = *(_DWORD *)(v65 + 24);
                          if (v76 >= v78 - 1)
                            v76 = v78 - 1;
                          v79 = v77 - 1;
                          if ((int)((v73 + v51 + *(_DWORD *)(v65 + 16) - (*((_DWORD *)v74 + 1) + v71[4])) & ~((int)(v73 + v51 + *(_DWORD *)(v65 + 16) - (*((_DWORD *)v74 + 1) + v71[4])) >> 31)) < v77 - 1)
                            v79 = (v73 + v51 + *(_DWORD *)(v65 + 16) - (*((_DWORD *)v74 + 1) + v71[4])) & ~((int)(v73 + v51 + *(_DWORD *)(v65 + 16) - (*((_DWORD *)v74 + 1) + v71[4])) >> 31);
                          if ((v76 & 0x80000000) == 0 && (v79 & 0x80000000) == 0)
                          {
                            v80 = v71[5];
                            v81 = v78 - v76;
                            if (v80 >= v81)
                              v80 = v81;
                            v82 = (*(_DWORD *)(v65 + 32) * v79);
                            v83 = *(_DWORD *)(v65 + 28) * v76 + 7;
                            v84 = v71[7];
                            v85 = (unsigned __int16 *)((char *)v71 + v71[8] * v73 + 40);
                            v86 = (unsigned __int8 *)(v65 + 40 + v82 + (v83 >> 3));
                            switch(v84)
                            {
                              case 8:
                                if (v80 >= 1)
                                {
                                  v87 = -v80;
                                  do
                                  {
                                    v89 = *(unsigned __int8 *)v85;
                                    v85 = (unsigned __int16 *)((char *)v85 + 1);
                                    v88 = v89;
                                    if (v89 <= *v86)
                                      v88 = *v86;
                                    *v86++ = v88;
                                    v90 = __CFADD__(v87++, 1);
                                  }
                                  while (!v90);
                                  v72 = v71[6];
                                }
                                break;
                              case 16:
                                if (v80 >= 1)
                                {
                                  v91 = -v80;
                                  do
                                  {
                                    v93 = *v85++;
                                    v92 = v93;
                                    v94 = v93 & 0x1F;
                                    v95 = *(unsigned __int16 *)v86;
                                    if ((v93 & 0x1F) <= (v95 & 0x1F))
                                      v94 = *(_WORD *)v86 & 0x1F;
                                    v96 = (int32x2_t)vshl_u32(vmax_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v92), (uint32x2_t)0xFFFFFFFBFFFFFFF6), (int8x8_t)0x1F0000001FLL), (uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v95), (uint32x2_t)0xFFFFFFFBFFFFFFF6), (int8x8_t)0x1F0000001FLL)), (uint32x2_t)0x50000000ALL);
                                    *(_WORD *)v86 = vorr_s8((int8x8_t)v96, (int8x8_t)vdup_lane_s32(v96, 1)).u16[0] | v94;
                                    v86 += 2;
                                    v90 = __CFADD__(v91++, 1);
                                  }
                                  while (!v90);
                                }
                                break;
                              case 1:
                                _CGHandleAssert("draw_glyph_bitmap_run_with_compositing", 325, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/RIP/RIPContextDrawGlyphs.c", "", "Unimplemented", (uint64_t)v69, v67, v68, v111[0]);
                            }
                          }
                          ++v73;
                        }
                        while (v73 < v72);
                      }
                    }
                  }
                  ++v70;
                }
                while (v70 != a10);
              }
            }
            v97 = v42;
            CGGlyphBuilderUnlockBitmaps(v44);
            CGGlyphBuilderRelease(v44);
            if (*(_DWORD *)(v65 + 20))
            {
              v98 = *(_DWORD *)(v65 + 24);
              if (v98)
              {
                if (default_glyph_bitmap_debugging && *(_DWORD *)(v65 + 28) == 8)
                {
                  bzero(v125, 0x400uLL);
                  __sprintf_chk(v125, 0, 0x400uLL, "*/final_run_bitmap.%03d.tiff", ++draw_glyph_bitmap_run_with_compositing_file_count);
                  CGGlyph8BitBitmapSaveAsImage(*(unsigned int *)(v65 + 20), *(unsigned int *)(v65 + 24), *(unsigned int *)(v65 + 32), (UInt8 *)(v65 + 40), v125);
                  v98 = *(_DWORD *)(v65 + 24);
                }
                v99 = *(_DWORD *)(v65 + 12);
                v100 = *(_DWORD *)(v65 + 16);
                v101 = (__int128 *)malloc_type_malloc(0x50uLL, 0x23EBFCD2uLL);
                *(_QWORD *)v101 = 0;
                *((_QWORD *)v101 + 1) = 0;
                *((_QWORD *)v101 + 2) = 0;
                *((_QWORD *)v101 + 3) = 1;
                *((_QWORD *)v101 + 4) = 0;
                RIPGlyphListAppendBitmap((uint64_t)v101, v99 + v52, (v100 + v51 - v98), v65, v102, v103, v104, v105);
                render_glyph_list(v116, v101, v117, v121, v118);
                free(v101);
              }
            }
            do
            {
              v106 = __ldxr((unsigned int *)v65);
              v107 = v106 - 1;
            }
            while (__stxr(v107, (unsigned int *)v65));
            v108 = v112;
            v109 = v113;
            if (!v107)
              free((void *)v65);
          }
          else
          {
            v97 = v42;
            CGGlyphBuilderUnlockBitmaps(v44);
            CGGlyphBuilderRelease(v44);
            v108 = v112;
            v109 = v113;
          }
          if (v43 != v97)
            free(v43);
          if (v114 != v109)
            free(v114);
          if (v120 != v108)
          {
            v110 = v120;
            goto LABEL_89;
          }
        }
      }
    }
    else
    {
      v110 = v120;
      if (v120 != v22)
LABEL_89:
        free(v110);
    }
  }
}

void draw_glyph_bitmaps(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, __n128 a5, uint64_t a6, uint64_t a7, __int16 *a8, uint64_t a9, unint64_t a10)
{
  int v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  float64x2_t v29;
  float64x2_t v30;
  unint64_t v31;
  unint64_t QuantizationLevelWithStyle;
  uint64_t v33;
  uint64_t v34;
  CGFont *v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  int v42;
  int v43;
  double v44;
  double v45;
  BOOL v46;
  __int16 v47;
  __int16 v48;
  int v49;
  unsigned int v50;
  CGFloat v51;
  CGFloat v52;
  char *v53;
  double v54;
  char *v55;
  BOOL v56;
  _BOOL4 v57;
  CFTypeRef *v58;
  __n128 v59;
  int *v60;
  CGFloat v61;
  CGFloat v62;
  CGFloat v63;
  CGFloat v64;
  CGFloat v65;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  int v70;
  char *v71;
  char *v72;
  uint64_t v73;
  int **v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  float64x2_t v78;
  float64x2_t v79;
  __int128 v80;
  unint64_t v81;
  int32x2_t v82;
  uint64_t v83;
  uint64_t v84;
  CGRect v85;
  CGRect v86;
  CGRect v87;
  CGRect v88;
  CGRect v89;
  CGRect v90;
  CGRect v91;
  CGRect v92;
  CGRect v93;
  CGRect v94;
  CGRect v95;
  CGRect v96;
  CGRect v97;
  CGRect v98;
  CGRect v99;
  CGRect v100;
  CGRect v101;

  v76 = a3;
  v75 = a1;
  v84 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](a1, a5);
  v18 = (char *)&v60 - v17;
  if (v16 <= 0x1FFFFFFFFFFFFFFELL)
    v19 = (char *)&v60 - v17;
  else
    v19 = 0;
  v20 = v15;
  if (v16 - 0x1FFFFFFFFFFFFFFFLL >= 0xE000000000000102)
    v19 = (char *)malloc_type_malloc(8 * a10, 0x956ACBCuLL);
  v82 = 0;
  v83 = 0;
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  if (v19)
  {
    v73 = a2;
    v74 = &v60;
    v21 = MEMORY[0x1E0C80A78](v19, (__n128)0);
    v24 = (char *)&v60 - v23;
    if (v22 <= 0x3FFFFFFFFFFFFFFELL)
      v25 = (char *)&v60 - v23;
    else
      v25 = 0;
    v77 = (char *)v21;
    if (v22 - 0x3FFFFFFFFFFFFFFFLL >= 0xC000000000000102)
      v25 = (char *)malloc_type_malloc(4 * a10, 0xE98C3CE7uLL);
    if (!v25)
    {
      v55 = v77;
      v56 = v77 == v18;
LABEL_26:
      if (!v56)
        free(v55);
      return;
    }
    v72 = v18;
    v71 = v24;
    v26 = v76;
    v27 = *(_QWORD *)(v76 + 136);
    v28 = *(double *)(v27 + 16);
    v29 = vmulq_n_f64(*(float64x2_t *)a7, v28);
    v30 = vmulq_n_f64(*(float64x2_t *)(a7 + 16), v28);
    v78 = v29;
    v79 = v30;
    v80 = *(_OWORD *)(a7 + 32);
    v31 = *(_QWORD *)(v27 + 88);
    v70 = v20;
    QuantizationLevelWithStyle = CGFontGetQuantizationLevelWithStyle((uint64_t)&v78, v20, v31);
    v81 = QuantizationLevelWithStyle;
    v33 = (uint64_t)v77;
    CGFontGetGlyphIdentifiers(a8, (float64x2_t *)a7, a9, a10, &v81, (uint64_t)v25, (uint64_t)v77, &v82);
    v34 = *(_QWORD *)(v26 + 136);
    v35 = *(CGFont **)(v34 + 8);
    v36 = (double)a4[6];
    v37 = (double)a4[7];
    v38 = (double)a4[8];
    v39 = (double)a4[9];
    v40 = (double)v82.i32[0];
    v41 = (double)v82.i32[1];
    v42 = v83;
    v43 = HIDWORD(v83);
    v44 = (double)(int)v83;
    v45 = (double)SHIDWORD(v83);
    v85.origin.x = v36;
    v85.origin.y = v37;
    v85.size.width = v38;
    v85.size.height = v39;
    v99.origin.x = (double)v82.i32[0];
    v99.origin.y = (double)v82.i32[1];
    v99.size.width = (double)(int)v83;
    v99.size.height = (double)SHIDWORD(v83);
    v46 = CGRectIntersectsRect(v85, v99);
    v47 = v70;
    if (!v46)
    {
      v65 = v37;
      v60 = a4;
      v48 = v70;
      get_glyph_bounding_box(v35, &v78);
      v87 = CGRectIntegral(v86);
      x = v87.origin.x;
      y = v87.origin.y;
      width = v87.size.width;
      height = v87.size.height;
      v49 = v42 | v43;
      v50 = (v42 | v43) >> 31;
      v51 = v40;
      v52 = v41;
      if (v49 < 0)
      {
        v88.origin.x = v40;
        v88.origin.y = v41;
        v88.size.width = v44;
        v88.size.height = (double)v43;
        *(_QWORD *)&v51 = (unint64_t)CGRectStandardize(v88);
        v89.origin.x = v40;
        v89.origin.y = v41;
        v89.size.width = v44;
        v89.size.height = (double)v43;
        v90 = CGRectStandardize(v89);
        v52 = v90.origin.y;
      }
      v91.origin.x = x;
      v91.origin.y = y;
      v91.size.width = width;
      v91.size.height = height;
      v92 = CGRectOffset(v91, v51, v52);
      v64 = v92.origin.x;
      v63 = v92.origin.y;
      v62 = v92.size.width;
      v61 = v92.size.height;
      v53 = v72;
      if ((v50 & 1) != 0)
      {
        v93.origin.x = v40;
        v93.origin.y = v41;
        v93.size.width = v44;
        v93.size.height = v45;
        v94 = CGRectStandardize(v93);
        v54 = v94.origin.x + v94.size.width;
        v94.origin.x = v40;
        v94.origin.y = v41;
        v94.size.width = v44;
        v94.size.height = v45;
        v95 = CGRectStandardize(v94);
        v41 = v95.origin.y;
        v45 = v95.size.height;
      }
      else
      {
        v54 = v40 + v44;
      }
      v96.origin.x = x;
      v96.origin.y = y;
      v96.size.width = width;
      v96.size.height = height;
      v100 = CGRectOffset(v96, v54, v41 + v45);
      v97.origin.x = v64;
      v97.origin.y = v63;
      v97.size.width = v62;
      v97.size.height = v61;
      v98 = CGRectUnion(v97, v100);
      v101.origin.x = v36;
      v101.origin.y = v65;
      v101.size.width = v38;
      v101.size.height = v39;
      v57 = CGRectIntersectsRect(v98, v101);
      v26 = v76;
      if (!v57)
        goto LABEL_23;
      v34 = *(_QWORD *)(v76 + 136);
      v47 = v48;
      a4 = v60;
      v33 = (uint64_t)v77;
    }
    v58 = (CFTypeRef *)CGGlyphBuilderCreate(v35, &v78, v47, QuantizationLevelWithStyle, *(double *)(v34 + 72), *(double *)(v34 + 80));
    render_glyphs(v75, v58, v73, v26, (uint64_t)a4, (uint64_t)v25, v33, a10, v59);
    CGGlyphBuilderRelease(v58);
    v53 = v72;
LABEL_23:
    if (v25 != v71)
      free(v25);
    v55 = v77;
    v56 = v77 == v53;
    goto LABEL_26;
  }
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  double x;
  double y;
  double v5;
  double height;
  double width;
  double v10;
  double v11;
  double v12;
  CGRect v13;
  CGRect v14;
  CGRect v15;

  x = rect1.origin.x;
  if (rect1.origin.x == INFINITY || rect1.origin.y == INFINITY)
    return 0;
  y = rect2.origin.y;
  v5 = rect2.origin.x;
  if (rect2.origin.x == INFINITY || rect2.origin.y == INFINITY)
    return 0;
  height = rect2.size.height;
  width = rect2.size.width;
  v10 = rect1.size.height;
  v11 = rect1.size.width;
  v12 = rect1.origin.y;
  if (rect1.size.width < 0.0 || rect1.size.height < 0.0)
  {
    v13 = CGRectStandardize(rect1);
    x = v13.origin.x;
    v12 = v13.origin.y;
    v11 = v13.size.width;
    v10 = v13.size.height;
  }
  if (width < 0.0 || height < 0.0)
  {
    v14.origin.x = v5;
    v14.origin.y = y;
    v14.size.width = width;
    v14.size.height = height;
    v15 = CGRectStandardize(v14);
    v5 = v15.origin.x;
    y = v15.origin.y;
    width = v15.size.width;
    height = v15.size.height;
  }
  if (x >= v5)
  {
    if (x > v5 && v5 + width <= x)
      return 0;
  }
  else if (x + v11 <= v5)
  {
    return 0;
  }
  if (v12 >= y)
    return v12 <= y || y + height > v12;
  return v12 + v10 > y;
}

uint64_t CGGlyphBuilderCreate(const void *a1, _OWORD *a2, __int16 a3, unint64_t a4, double a5, double a6)
{
  uint64_t v12;
  CFTypeID v13;
  int v14;
  __int128 v15;
  uint64_t v16;

  if (CGGlyphBuilderCreate::once != -1)
    dispatch_once_f(&CGGlyphBuilderCreate::once, 0, (dispatch_function_t)defaults_setup);
  v12 = operator new();
  if (a1)
  {
    v13 = CFGetTypeID(a1);
    if (_block_invoke_once_3017 != -1)
      dispatch_once(&_block_invoke_once_3017, &__block_literal_global_7_3018);
    if (v13 == CGFontGetTypeID_font_type_id)
      CFRetain(a1);
    else
      a1 = 0;
  }
  *(_QWORD *)v12 = a1;
  v14 = CGFontRenderingStyleStandardize(a3);
  *(_DWORD *)(v12 + 8) = v14;
  *(double *)(v12 + 16) = a5;
  *(double *)(v12 + 24) = a6;
  v15 = a2[1];
  *(_OWORD *)(v12 + 32) = *a2;
  *(_OWORD *)(v12 + 48) = v15;
  *(_OWORD *)(v12 + 64) = a2[2];
  *(_QWORD *)(v12 + 80) = CGFontGetQuantizationLevelWithStyle(v12 + 32, v14, a4);
  if (cache_glyph_bitmaps)
  {
    if (CGFontCacheGetLocalCache_predicate != -1)
      dispatch_once(&CGFontCacheGetLocalCache_predicate, &__block_literal_global_5899);
    v16 = CGFontCacheGetLocalCache_local_font_cache;
  }
  else
  {
    v16 = 0;
  }
  *(_QWORD *)(v12 + 88) = v16;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_QWORD *)(v12 + 128) = 0;
  *(_DWORD *)(v12 + 136) = 1065353216;
  return v12;
}

void sub_1849CC73C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DC23C4](v1, 0x10A0C4063A40F4BLL);
  _Unwind_Resume(a1);
}

unint64_t CGFontGetQuantizationLevelWithStyle(uint64_t a1, __int16 a2, unint64_t a3)
{
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  double v9;
  double v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  signed int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  CGAffineTransform v24;
  CGAffineTransform v25;

  v5 = CGFontRenderingStyleStandardize(a2);
  if ((v5 & 4) == 0)
  {
    v6 = 0x100000000;
    LODWORD(a3) = 1;
    return v6 | a3;
  }
  if ((v5 & 8) == 0)
  {
    v6 = 0x8000000000;
    LODWORD(a3) = 128;
    return v6 | a3;
  }
  if (v5 > 0xFFF)
  {
LABEL_44:
    v6 = a3 & 0xFFFFFFFF00000000;
    return v6 | a3;
  }
  if (CGFontGetQuantizationLevel_once != -1)
    dispatch_once_f(&CGFontGetQuantizationLevel_once, 0, (dispatch_function_t)defaults_setup_19265);
  LODWORD(a3) = 0;
  if (!a1 || (v7 = QX, QX < 1))
  {
    v6 = 0;
    return v6 | a3;
  }
  v8 = QY;
  v6 = 0;
  if (QY >= 1)
  {
    if (*(double *)(a1 + 8) == 0.0 && *(double *)(a1 + 16) == 0.0)
    {
      v9 = *(double *)a1;
      v10 = *(double *)(a1 + 24);
      if ((*(double *)a1 == v10 || v9 == -v10)
        && ((v11 = (int)v9 - 6, v9 == (double)(int)v9) ? (v12 = v11 > 0x12) : (v12 = 1), !v12))
      {
        a3 = scale_level[v11];
      }
      else
      {
        v13 = vcvtpd_s64_f64(1.0 / (fabs(v9) * 0.03));
        if (QX >= v13)
          v14 = v13;
        else
          v14 = QX;
        if (v13 < 1)
          v15 = 1;
        else
          v15 = v14;
        v16 = vcvtpd_s64_f64(1.0 / (fabs(v10) * 0.12));
        if (QY >= v16)
          v17 = v16;
        else
          v17 = QY;
        v18 = v17 << 32;
        v12 = v16 < 1;
        v19 = 0x100000000;
        if (!v12)
          v19 = v18;
        a3 = v19 | v15;
      }
    }
    else
    {
      v20 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)&v24.a = *(_OWORD *)a1;
      *(_OWORD *)&v24.c = v20;
      *(_OWORD *)&v24.tx = *(_OWORD *)(a1 + 32);
      CGAffineTransformInvert(&v25, &v24);
      if (v7 < 2)
      {
        v21 = 1;
      }
      else
      {
        v21 = 1;
        while ((v25.d * 0.0 + v25.b * (1.0 / (double)v21)) * (v25.d * 0.0 + v25.b * (1.0 / (double)v21))
              + (v25.c * 0.0 + v25.a * (1.0 / (double)v21)) * (v25.c * 0.0 + v25.a * (1.0 / (double)v21)) >= 0.0009)
        {
          if (v7 == ++v21)
          {
            v21 = v7;
            break;
          }
        }
      }
      v22 = 1;
      if ((int)v8 >= 2)
      {
        while ((v25.d * (1.0 / (double)(int)v22) + v25.b * 0.0) * (v25.d * (1.0 / (double)(int)v22) + v25.b * 0.0)
              + (v25.c * (1.0 / (double)(int)v22) + v25.a * 0.0) * (v25.c * (1.0 / (double)(int)v22) + v25.a * 0.0) >= 0.0144)
        {
          v22 = (v22 + 1);
          if ((_DWORD)v8 == (_DWORD)v22)
          {
            v22 = v8;
            break;
          }
        }
      }
      a3 = v21 | (unint64_t)(v22 << 32);
    }
    goto LABEL_44;
  }
  return v6 | a3;
}

uint64_t CGFontRenderingStyleStandardize(__int16 a1)
{
  int v1;
  int v2;

  v1 = a1 & 0x70 | 3;
  if ((a1 & 2) == 0)
    v1 = a1 & 0xD80 | 1;
  v2 = v1 | 4;
  if ((a1 & 8) != 0)
    v2 = a1 & 0x1000 | v1 | 0xC;
  if ((a1 & 4) != 0)
    v1 = v2;
  if ((a1 & 1) == 0)
    v1 = 0;
  return v1 | a1 & 0x200u;
}

CFTypeRef *CGGlyphBuilderRelease(CFTypeRef *result)
{
  CFTypeRef *v1;
  CFTypeRef v2;
  CFTypeID v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  if (result)
  {
    v1 = result;
    v2 = *result;
    if (*result)
    {
      v3 = CFGetTypeID(*result);
      if (_block_invoke_once_3017 != -1)
        dispatch_once(&_block_invoke_once_3017, &__block_literal_global_7_3018);
      if (v3 == CGFontGetTypeID_font_type_id)
        CFRelease(v2);
    }
    v4 = v1[15];
    if (v4)
    {
      do
      {
        v5 = (_QWORD *)*v4;
        operator delete(v4);
        v4 = v5;
      }
      while (v5);
    }
    v6 = (void *)v1[13];
    v1[13] = 0;
    if (v6)
      operator delete(v6);
    JUMPOUT(0x186DC23C4);
  }
  return result;
}

int32x2_t CGFontGetGlyphIdentifiers(__int16 *a1, float64x2_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, int32x2_t *a8)
{
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  int64x2_t v11;
  float64x2_t v12;
  double *v13;
  int *v14;
  _BYTE *v15;
  int32x2_t v16;
  int32x2_t v17;
  float64x2_t v18;
  double v19;
  double v20;
  __int16 v21;
  float64x2_t v22;
  float64x2_t v23;
  int v24;
  int v25;
  int32x2_t result;

  if (a4)
  {
    v8 = *a2;
    v9 = a2[1];
    v10 = a2[2];
    v11.i64[0] = (int)*a5;
    v11.i64[1] = (int)HIDWORD(*a5);
    v12 = vcvtq_f64_s64(v11);
    v13 = (double *)(a3 + 8);
    v14 = (int *)(a7 + 4);
    v15 = (_BYTE *)(a6 + 2);
    v16 = (int32x2_t)0x8000000080000000;
    v17 = (int32x2_t)0x8000000080000000;
    v18 = (float64x2_t)vdupq_n_s64(0x3F50624DD2F1A9FCuLL);
    do
    {
      v19 = *(v13 - 1);
      v20 = *v13;
      v21 = *a1++;
      *((_WORD *)v15 - 1) = v21;
      v22 = vaddq_f64(vaddq_f64(v10, vmlaq_n_f64(vmulq_n_f64(v9, v20), v8, v19)), v18);
      v23 = vrndmq_f64(v22);
      *(int32x2_t *)&v22.f64[0] = vmovn_s64(vcvtq_s64_f64(vmulq_f64(vsubq_f64(v22, v23), v12)));
      v15[1] = BYTE4(v22.f64[0]);
      *v15 = LOBYTE(v22.f64[0]);
      if (v23.f64[0] <= 2147483650.0)
      {
        if (v23.f64[0] >= -2147483650.0)
          v24 = (int)v23.f64[0];
        else
          v24 = 0x80000000;
      }
      else
      {
        v24 = 0x7FFFFFFF;
      }
      *(v14 - 1) = v24;
      if (v23.f64[1] <= 2147483650.0)
      {
        if (v23.f64[1] >= -2147483650.0)
          v25 = (int)v23.f64[1];
        else
          v25 = 0x80000000;
      }
      else
      {
        v25 = 0x7FFFFFFF;
      }
      *v14 = v25;
      v14 += 2;
      v16 = vmin_s32((int32x2_t)__PAIR64__(v25, v24), v16);
      v17 = vmax_s32((int32x2_t)__PAIR64__(v25, v24), v17);
      v13 += 2;
      v15 += 4;
      --a4;
    }
    while (a4);
  }
  else
  {
    v16 = (int32x2_t)0x8000000080000000;
    v17 = (int32x2_t)0x8000000080000000;
  }
  result = vsub_s32(v17, v16);
  *a8 = v16;
  a8[1] = result;
  return result;
}

void render_glyphs(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, __n128 a9)
{
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  BOOL v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD **v31;
  _DWORD *v32;
  int v33;
  int v34;
  signed int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  BOOL v40;
  BOOL v41;
  uint64_t v43[2];

  v43[0] = a4;
  v43[1] = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](a1, a9);
  v18 = (char *)v43 - v17;
  if (v16 <= 0x1FFFFFFFFFFFFFFELL)
    v19 = (char *)v43 - v17;
  else
    v19 = 0;
  if (v16 - 0x1FFFFFFFFFFFFFFFLL >= 0xE000000000000402)
    v19 = (char *)malloc_type_malloc(8 * a8, 0x5E63105BuLL);
  if (v19)
    v20 = a8 > 0x666666666666665;
  else
    v20 = 1;
  if (!v20)
  {
    v21 = (__int128 *)malloc_type_malloc(40 * a8 + 40, 0x23EBFCD2uLL);
    *(_QWORD *)v21 = 0;
    *((_QWORD *)v21 + 1) = 0;
    *((_QWORD *)v21 + 2) = 0;
    *((_QWORD *)v21 + 3) = a8;
    *((_QWORD *)v21 + 4) = 0;
    if (CGGlyphBuilderLockBitmaps((uint64_t)a2, a6, a8, (uint64_t)v19, v22, v23, v24, v25))
    {
      if (a8)
      {
        v30 = (_DWORD *)(a7 + 4);
        v31 = (_DWORD **)v19;
        do
        {
          v32 = *v31;
          if (*v31)
          {
            v33 = v32[5];
            if (v33)
            {
              v34 = v32[6];
              if (v34)
              {
                v35 = v32[3] + *(v30 - 1);
                v36 = v32[4] + *v30;
                v37 = (v36 - v34);
                v38 = *(_DWORD *)(a5 + 24);
                v39 = *(_DWORD *)(a5 + 28);
                v40 = v38 >= v35 + v33 || *(_DWORD *)(a5 + 32) + v38 <= v35;
                v41 = v40 || *(_DWORD *)(a5 + 36) + v39 <= (int)v37;
                if (!v41 && v39 < v36)
                  RIPGlyphListAppendBitmap((uint64_t)v21, v35, v37, (uint64_t)v32, v26, v27, v28, v29);
              }
            }
          }
          v30 += 2;
          ++v31;
          --a8;
        }
        while (a8);
      }
      render_glyph_list(a1, v21, a3, v43[0], (uint64_t *)a5);
      CGGlyphBuilderUnlockBitmaps(a2);
      if (v19 != v18)
        free(v19);
      free(v21);
    }
  }
}

unint64_t RIPGlyphListAppendBitmap(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;

  v8 = *(_QWORD *)(a1 + 16);
  if (v8 >= *(_QWORD *)(a1 + 24))
    _CGHandleAssert("RIPGlyphListAppendBitmap", 66, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/RIP/RIPGlyphList.c", "gl->n < gl->max", "number of glyphs (%lu) out of bounds [0, %lu]", a6, a7, a8, v8);
  v11 = *(_QWORD *)(a4 + 20);
  v12 = a2 | (unint64_t)(a3 << 32);
  if (v8)
  {
    result = CGSBoundsUnion(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v12, *(_QWORD *)(a4 + 20));
  }
  else
  {
    result = a2 | (unint64_t)(a3 << 32);
    v14 = *(_QWORD *)(a4 + 20);
  }
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v14;
  v15 = *(_DWORD *)(a4 + 20);
  v16 = *(_DWORD *)(a1 + 36);
  if (*(_DWORD *)(a1 + 32) > v15)
    v15 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = v15;
  v17 = *(_DWORD *)(a4 + 24);
  if (v16 > v17)
    v17 = v16;
  *(_DWORD *)(a1 + 36) = v17;
  *(_QWORD *)(a1 + 16) = v8 + 1;
  v18 = a1 + 40 * v8;
  *(_QWORD *)(v18 + 40) = v12;
  *(_QWORD *)(v18 + 48) = v11;
  *(_QWORD *)(v18 + 64) = a4 + 40;
  *(_DWORD *)(v18 + 60) = *(_DWORD *)(a4 + 28);
  *(_DWORD *)(v18 + 56) = *(_DWORD *)(a4 + 32);
  *(_DWORD *)(v18 + 72) = *(_DWORD *)(a4 + 36);
  return result;
}

unint64_t CGSBoundsUnion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;

  v5 = (int)a4 < 1 || SHIDWORD(a4) < 1;
  if ((int)a2 < 1 || a2 <= 0)
  {
    v11 = !v5;
    if (v5)
      v9 = 0;
    else
      v9 = a3;
    if (v11)
      v10 = HIDWORD(a3);
    else
      v10 = 0;
  }
  else
  {
    if ((int)a1 >= (int)a3)
      v6 = a3;
    else
      v6 = a1;
    if (SHIDWORD(a1) >= SHIDWORD(a3))
      v7 = HIDWORD(a3);
    else
      v7 = HIDWORD(a1);
    v8 = !v5;
    if (v5)
      v9 = a1;
    else
      v9 = v6;
    if (v8)
      v10 = v7;
    else
      v10 = HIDWORD(a1);
  }
  return v9 | (unint64_t)(v10 << 32);
}

void CGGlyphBuilderUnlockBitmaps(_QWORD *a1)
{
  _QWORD *i;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t j;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  os_unfair_lock_s **v21;
  os_unfair_lock_s **v22;
  char *v23;
  unint64_t v24;
  os_unfair_lock_s *Size;
  uint64_t v26;
  os_unfair_lock_s **v27;
  os_unfair_lock_s **v28;
  unsigned int *v29;
  os_unfair_lock_s *v30;
  os_unfair_lock_s **v31;

  for (i = (_QWORD *)a1[15]; i; i = (_QWORD *)*i)
  {
    v3 = (unsigned int *)i[3];
    if (v3)
    {
      do
      {
        v4 = __ldxr(v3);
        v5 = v4 - 1;
      }
      while (__stxr(v5, v3));
      if (!v5)
        free(v3);
    }
  }
  if (a1[16])
  {
    v6 = (_QWORD *)a1[15];
    if (v6)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        operator delete(v6);
        v6 = v7;
      }
      while (v7);
    }
    a1[15] = 0;
    v8 = a1[14];
    if (v8)
    {
      for (j = 0; j != v8; ++j)
        *(_QWORD *)(a1[13] + 8 * j) = 0;
    }
    a1[16] = 0;
  }
  v10 = a1[12];
  if (v10)
  {
    v11 = a1[11];
    if (!v11)
      goto LABEL_44;
    os_unfair_lock_lock((os_unfair_lock_t)(v11 + 4));
    os_unfair_lock_lock((os_unfair_lock_t)(v10 + 104));
    v12 = *(_QWORD *)(v10 + 96);
    os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 104));
    CGFontStrikeRelease((unsigned int *)v10);
    os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 4));
    if (!v12)
      goto LABEL_44;
    v13 = (unint64_t *)(v11 + 16);
    do
    {
      v14 = __ldxr(v13);
      v15 = v14 + v12;
    }
    while (__stxr(v15, v13));
    if (v15 <= *(_QWORD *)(v11 + 8))
      goto LABEL_44;
    os_unfair_lock_lock((os_unfair_lock_t)(v11 + 4));
    v17 = (_QWORD **)(v11 + 40);
    v16 = *(_QWORD *)(v11 + 40);
    if (v16)
    {
      v18 = 0;
      do
      {
        v18 = &v18[(_QWORD)CGFontStrikeGetSize(*(os_unfair_lock_s **)v16)];
        v16 = *(_QWORD *)(v16 + 8);
      }
      while (v16);
    }
    else
    {
      v18 = 0;
    }
    if ((unint64_t)v18 >= *(_QWORD *)(v11 + 8))
    {
      if (!*v17)
      {
        v23 = 0;
LABEL_42:
        *v17 = 0;
        v18 = v23;
        goto LABEL_43;
      }
      v19 = 0;
      v20 = (uint64_t)*v17;
      do
      {
        ++v19;
        v20 = *(_QWORD *)(v20 + 8);
      }
      while (v20);
      v21 = (os_unfair_lock_s **)list_sort_1(*v17, v19);
      *(_QWORD *)(v11 + 40) = v21;
      if (v21)
      {
        v22 = v21;
        v23 = 0;
        v24 = 7 * *(_QWORD *)(v11 + 8) / 0xAuLL;
        while (1)
        {
          Size = CGFontStrikeGetSize(*v22);
          v18 = &v23[(_QWORD)Size];
          if (&v23[(_QWORD)Size] > (char *)v24)
            break;
          v26 = (uint64_t)*v17;
          v27 = *(os_unfair_lock_s ***)(v26 + 8);
          v17 = (_QWORD **)(v26 + 8);
          v22 = v27;
          v23 = &v23[(_QWORD)Size];
          if (!v27)
            goto LABEL_43;
        }
        v28 = v22;
        do
        {
          v29 = (unsigned int *)*v28;
          if (*v28)
            v30 = *v28 + 2;
          else
            v30 = 0;
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v11 + 32), v30);
          CGFontStrikeRelease(v29);
          v28 = (os_unfair_lock_s **)v28[1];
        }
        while (v28);
        do
        {
          v31 = (os_unfair_lock_s **)v22[1];
          free(v22);
          v22 = v31;
        }
        while (v31);
        goto LABEL_42;
      }
      v18 = 0;
    }
LABEL_43:
    *v13 = (unint64_t)v18;
    os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 4));
LABEL_44:
    a1[12] = 0;
  }
}

void CGFontStrikeRelease(unsigned int *a1)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t i;
  _QWORD *v5;
  uint64_t j;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;

  if (a1)
  {
    do
    {
      v2 = __ldxr(a1);
      v3 = v2 - 1;
    }
    while (__stxr(v3, a1));
    if (!v3)
    {
      for (i = 0; i != 256; ++i)
      {
        v5 = *(_QWORD **)&a1[2 * i + 28];
        if (v5)
        {
          for (j = 0; j != 256; ++j)
          {
            v7 = v5[j];
            if (v7)
            {
              do
              {
                v8 = *(unsigned int **)v7;
                if (*(_QWORD *)v7)
                {
                  do
                  {
                    v9 = __ldxr(v8);
                    v10 = v9 - 1;
                  }
                  while (__stxr(v10, v8));
                  if (!v10)
                    free(v8);
                }
                v7 = *(_QWORD *)(v7 + 8);
              }
              while (v7);
              v11 = (_QWORD *)v5[j];
              if (v11)
              {
                do
                {
                  v12 = (_QWORD *)v11[1];
                  free(v11);
                  v11 = v12;
                }
                while (v12);
              }
            }
          }
          free(v5);
        }
      }
      free(a1);
    }
  }
}

os_unfair_lock_s *CGFontStrikeGetSize(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;

  v1 = a1;
  if (a1)
  {
    v2 = a1 + 26;
    os_unfair_lock_lock(a1 + 26);
    v1 = *(os_unfair_lock_s **)&v1[22]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v2);
  }
  return v1;
}

uint64_t strike_key_equal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  if (a1 == a2)
    return 1;
  v8 = 0;
  if (a1 && a2)
  {
    if (*(double *)(a1 + 8) != *(double *)(a2 + 8)
      || *(double *)(a1 + 16) != *(double *)(a2 + 16)
      || *(double *)(a1 + 24) != *(double *)(a2 + 24)
      || *(double *)(a1 + 32) != *(double *)(a2 + 32)
      || *(_DWORD *)a1 != *(_DWORD *)a2
      || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    {
      return 0;
    }
    v8 = 0;
    if (*(double *)(a1 + 56) == *(double *)(a2 + 56) && *(double *)(a1 + 64) == *(double *)(a2 + 64))
    {
      v9 = *(_QWORD *)(a1 + 72);
      if (v9 != *(_QWORD *)(a2 + 72))
        _CGHandleAssert("CGFontStrikeKeyEqual", 72, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Fonts/CGFontStrike.c", "key1->hash == key2->hash", "hash 0x%zx 0x%zx", a6, a7, a8, v9);
      return 1;
    }
  }
  return v8;
}

void image_provider_finalize(uint64_t a1)
{
  CFTypeID v2;
  void (*v3)(_QWORD);
  const void *v4;
  const void *v5;

  if (a1)
  {
    v2 = CFGetTypeID((CFTypeRef)a1);
    if (kCGImageProviderContentHeadroom_block_invoke_once != -1)
      dispatch_once(&kCGImageProviderContentHeadroom_block_invoke_once, &__block_literal_global_69_3132);
    if (v2 == CGImageProviderGetTypeID_image_provider_type_id)
    {
      switch(*(_DWORD *)(a1 + 64))
      {
        case 0:
        case 1:
          v3 = *(void (**)(_QWORD))(a1 + 80);
          if (v3)
            goto LABEL_7;
          break;
        case 2:
          v3 = *(void (**)(_QWORD))(a1 + 88);
          if (v3)
            goto LABEL_7;
          break;
        case 3:
          v3 = *(void (**)(_QWORD))(a1 + 104);
          if (v3)
LABEL_7:
            v3(*(_QWORD *)(a1 + 56));
          break;
        default:
          break;
      }
      CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 40));
      v4 = *(const void **)(a1 + 112);
      if (v4)
        CFRelease(v4);
      CGPropertiesRelease(*(_QWORD *)(a1 + 120));
      v5 = *(const void **)(a1 + 136);
      if (v5)
        CFRelease(v5);
    }
  }
}

void subImageProviderReleaseInfo(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 144);
  if (v1)
    CFRelease(v1);
}

void imageProvider_release_data(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    CGImageBlockSetRelease(v2);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void CGImageBlockSetRelease(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t i;
  _QWORD *v6;
  void (*v7)(_QWORD, _QWORD);
  void (*v8)(_QWORD);
  const void *v9;

  if (a1)
  {
    do
    {
      v2 = __ldxr((unsigned int *)a1);
      v3 = v2 - 1;
    }
    while (__stxr(v3, (unsigned int *)a1));
    if (!v3)
    {
      CGPropertiesRelease(*(_QWORD *)(a1 + 88));
      CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 80));
      v4 = *(_QWORD *)(a1 + 120);
      if (v4)
      {
        for (i = 0; i < v4; ++i)
        {
          v6 = *(_QWORD **)(a1 + 128 + 8 * i);
          if (v6)
          {
            v7 = (void (*)(_QWORD, _QWORD))v6[9];
            if (v7)
              v7(v6[7], *(_QWORD *)(a1 + 128 + 8 * i));
            free(v6);
            v4 = *(_QWORD *)(a1 + 120);
          }
        }
      }
      v8 = *(void (**)(_QWORD))(a1 + 112);
      if (v8)
        v8(*(_QWORD *)(a1 + 96));
      v9 = *(const void **)(a1 + 8);
      if (v9)
        CFRelease(v9);
      free((void *)a1);
    }
  }
}

uint64_t CGDataProviderCreateForDestinationWithImage(_QWORD *a1, _DWORD *a2, vImagePixelCount a3, CGDataProviderRef a4, _QWORD *cf, unsigned int a6, int a7)
{
  CFTypeID v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BOOL4 v18;
  char *DataProviderInternal;
  char *v20;
  uint64_t AlphaInfo;
  CGColorSpaceRef v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  signed int PixelComponentType;
  signed int v32;
  double *MaskingColors;
  double *v34;
  CGDataProvider *v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  unint64_t v39;
  uint64_t v40;
  int Type;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL4 v45;
  const CGFloat *v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  const CGFloat *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  CGDataProvider **v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  CGDataProvider **v64;
  char *v65;
  unint64_t v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  CGDataProviderRef v97;
  CGDataProvider *v98;
  unint64_t v99;
  uint64_t SequentialWithInternalCallbacks;
  uint64_t v101;
  uint64_t v102;
  CGDataProvider *v103;
  int v104;
  int v105;
  int v106;
  int v107;
  unsigned int v108;
  CGColorSpaceRef DeviceGray;
  vImageConverterRef v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  CGDataProvider *v126;
  CGDataProvider *v127;
  size_t v128;
  CGDataProvider *v129;
  uint64_t (*v130)(_QWORD);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  const CGFloat *v138;
  uint64_t v139;
  size_t v140;
  long double v141;
  double v142;
  double *v143;
  double v144;
  double v145;
  double v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  const void *v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  CGImageByteOrderInfo v173;
  unint64_t v174;
  BOOL IsEqualToBitmapPixelInfo;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  CGDataProviderRef *v184;
  uint64_t v185;
  _QWORD *v186;
  _WORD *v187;
  _BYTE *v188;
  double v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  vImageConverterRef v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t BitsPerComponent;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  CGDataProviderRef *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  CGDataProviderRef *v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  CGDataProviderRef v243;
  size_t v244;
  CGDataProvider *v245;
  size_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  CGDataProvider *v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  unint64_t v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  size_t v299;
  CGDataProvider *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  size_t ImageBytesPerRowForPixelInfo;
  uint64_t v308;
  void *Property;
  _QWORD *v310;
  CGDataProvider *v311;
  uint64_t CopyWithAttribute;
  const void *v313;
  vImageConverter *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  char v322;
  char v323;
  _BOOL4 v324;
  CGDataProvider *v325;
  CGDataProvider *v326;
  uint64_t BitsPerPixel;
  char *v328;
  CGDataProvider **v329;
  unint64_t v330;
  char v331;
  CGDataProvider *v332;
  unsigned int v333;
  int v334;
  CGDataProvider *v335;
  BOOL v336;
  CGDataProvider *v337;
  vImagePixelCount v338;
  _QWORD *v339;
  _QWORD *v340;
  _QWORD *v341;
  _DWORD *v342;
  unsigned int v343;
  uint64_t v344;
  unsigned int v345;
  int v346;
  int v347;
  unsigned int v348;
  uint64_t v349;
  unsigned int v350;
  int v351;
  CGDataProviderRef v352;
  int v353;
  unint64_t v354;
  unint64_t v355;
  size_t v356;
  CGDataProviderRef v357;
  CGDataProvider *v358;
  CGColorSpaceRef ColorSpace;
  char *cfa;
  void *cfb;
  CGImageByteOrderInfo ByteOrderInfo;
  int v363;
  CGDataProvider *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  size_t v369;
  uint64_t NumberOfComponents;
  unint64_t v371;
  const CGFloat *Decode;
  uint64_t v373;
  CGDataProvider *v374;
  CGDataProviderRef provider;
  signed int UpscaledComponentType;
  __int128 v377;
  vImage_CGImageFormat v378;
  _BYTE v379[304];
  _BYTE srcFormat[304];
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  _BYTE destFormat[48];
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  _OWORD __dst[19];
  _OWORD v412[16];
  uint64_t v413;

  v413 = *MEMORY[0x1E0C80C00];
  if (!cf)
    return 0;
  v14 = CFGetTypeID(cf);
  if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1)
    dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_211);
  if (v14 != CGImageGetTypeID_image_type_id)
    return 0;
  v15 = 0;
  v16 = cf[5];
  v17 = cf[6];
  if (!is_mul_ok(v16, v17))
    return v15;
  v18 = v16 * v17 <= 0x9C4 && (cf[19] | cf[30]) == 0;
  DataProviderInternal = CGImageGetDataProviderInternal((char *)cf, v18);
  if (!DataProviderInternal)
    return 0;
  v20 = DataProviderInternal;
  ColorSpace = CGImageGetColorSpace((CGImageRef)cf);
  Decode = CGImageGetDecode((CGImageRef)cf);
  ByteOrderInfo = CGImageGetByteOrderInfo((CGImageRef)cf);
  AlphaInfo = CGImageGetAlphaInfo((CGImageRef)cf);
  if ((*((_BYTE *)cf + 39) & 2) != 0)
  {
    v23 = 1;
  }
  else
  {
    v22 = CGImageGetColorSpace((CGImageRef)cf);
    if (v22)
      v23 = *(_QWORD *)(*((_QWORD *)v22 + 3) + 40);
    else
      v23 = 0;
  }
  PixelComponentType = CGImageGetPixelComponentType((uint64_t)cf);
  provider = (CGDataProviderRef)v20;
  v344 = v23;
  if (a7)
  {
    v32 = PixelComponentType;
    MaskingColors = (double *)CGImageGetMaskingColors(cf);
    PixelComponentType = v32;
    v34 = MaskingColors;
  }
  else
  {
    v34 = 0;
  }
  v35 = (CGDataProvider *)cf[5];
  v357 = (CGDataProviderRef)cf[6];
  v36 = cf[9];
  v365 = cf[8];
  v37 = cf[19];
  if (v37 && (*(_DWORD *)(v37 + 20) & 0xFFFFFFFD) == 1 || v365 * (_QWORD)v35 != 8 * v36)
    v38 = cf[9];
  else
    v38 = 0;
  v39 = cf[7];
  memset(v412, 0, sizeof(v412));
  v374 = v35;
  v343 = a6;
  v342 = a2;
  if (PixelComponentType)
  {
    if (PixelComponentType != 3)
    {
      v40 = 0;
      if ((v39 & 7) == 0 || PixelComponentType == *a2)
      {
        UpscaledComponentType = PixelComponentType;
        goto LABEL_107;
      }
    }
  }
  v330 = v39;
  v331 = PixelComponentType;
  v366 = v36;
  UpscaledComponentType = CGImageGetUpscaledComponentType((CGImage *)cf);
  memset(v379, 0, sizeof(v379));
  CGBitmapPixelInfoInitializeWithImage(v379, v379, (CGColorSpace *)cf);
  if (CGImageGetPixelFormatInfo((CGImageRef)cf) == kCGImagePixelFormatRGBCIF10)
    LODWORD(AlphaInfo) = 6;
  v345 = AlphaInfo;
  Type = CGColorSpaceGetType(ColorSpace);
  v45 = 0;
  v338 = a3;
  if (CGColorSpaceGetType(ColorSpace) == 7)
  {
    v46 = Decode;
    if (Decode)
      v45 = CGImageGetDecodeType((CGImage *)cf) == 2;
  }
  else
  {
    v46 = Decode;
  }
  v353 = *(_DWORD *)&v379[24];
  v47 = *(_DWORD *)&v379[24] - 1;
  v332 = a4;
  if ((*(_DWORD *)&v379[24] - 1) > 8)
    v48 = 0;
  else
    v48 = qword_184F7EB80[v47];
  v49 = UpscaledComponentType - 1;
  if ((UpscaledComponentType - 1) >= 5 || ((0x1Bu >> v49) & 1) == 0)
    _CGHandleAssert("bytes_per_upscaled_component", 93, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderForDestinationWithImage.c", "", "Unimplemented", v42, v43, v44, v322);
  cfa = *(char **)&v379[16];
  v334 = Type;
  v336 = Type == 7;
  v50 = qword_184F7D690[v49];
  if (v45)
    v51 = v46;
  else
    v51 = 0;
  v329 = (CGDataProvider **)v51;
  v52 = *(_QWORD *)&v379[8];
  v349 = *(_QWORD *)v379;
  v351 = *(_DWORD *)&v379[28];
  v363 = *(_DWORD *)&v379[32];
  memcpy(__dst, &v379[36], 0x10CuLL);
  if (UpscaledComponentType > 5 || ((1 << UpscaledComponentType) & 0x36) == 0)
    _CGHandleAssert("CGDataProviderCreateUpscalingProvider", 1377, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderUpscale.c", "dst_component_type == kCGImageComponent8BitInteger || dst_component_type == kCGImageComponent16BitInteger || dst_component_type == kCGImageComponent16BitFloat || dst_component_type == kCGImageComponent32BitFloat", "component type %u", v53, v54, v55, UpscaledComponentType);
  v56 = (CGDataProvider **)malloc_type_calloc(1uLL, 0xB8uLL, 0xA3729uLL);
  if (!v56)
  {
LABEL_145:
    CGPostError((uint64_t)"%s: failed to create upscaling provider", v57, v58, v59, v60, v61, v62, v63, (char)"CGDataProviderCreateForDestinationWithImage");
    return 0;
  }
  v64 = v56;
  v324 = v45;
  v65 = &cfa[v48];
  v66 = v366 - ((unint64_t)(v365 * (_QWORD)v374 + 7) >> 3);
  v67 = *((_DWORD *)provider + 5);
  *(_QWORD *)srcFormat = v349;
  *(_QWORD *)&srcFormat[8] = v52;
  v68 = v66 + (_QWORD)v65 * (_QWORD)v374 * v50;
  v333 = v67 & 0xFFFFFFFD;
  *(_QWORD *)&srcFormat[16] = cfa;
  *(_DWORD *)&srcFormat[24] = v353;
  *(_DWORD *)&srcFormat[28] = v351;
  *(_DWORD *)&srcFormat[32] = v363;
  memcpy(&srcFormat[36], __dst, 0x10CuLL);
  BitsPerPixel = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)srcFormat, v69, v70, v71, v72, v73, v74, v75);
  v339 = a1;
  v83 = v52;
  if (v47 > 8)
    v84 = 0;
  else
    v84 = qword_184F7EB80[v47];
  v85 = &cfa[v84];
  v93 = bits_per_component_type(UpscaledComponentType, v76, v77, v78, v79, v80, v81, v82) * (_QWORD)&cfa[v84];
  v94 = v93 * (_QWORD)v374 + 7;
  v95 = v94 >> 3;
  if (v68)
    v96 = v68;
  else
    v96 = v94 >> 3;
  if (v363 == 0x40000)
  {
    v328 = v85 + 1;
    v93 = bits_per_component_type(UpscaledComponentType, v86, v87, v88, v89, v90, v91, v92) * (_QWORD)(v85 + 1);
    v95 = (unint64_t)(v93 * (_QWORD)v374 + 7) >> 3;
    v96 = v66 + v95;
  }
  else
  {
    v328 = v85;
  }
  v97 = v357;
  v98 = provider;
  v325 = (CGDataProvider *)v96;
  v326 = (CGDataProvider *)v95;
  v99 = v83;
  if (!v333)
  {
    *((_BYTE *)v64 + 8) = 1;
    CGDataProviderCreateDirectWithInternalCallbacks((uint64_t)v64, v96 * (_QWORD)v357, (uint64_t)&direct_provider_upscale_callbacks, v88, v89, v90, v91, v92);
    v40 = v102;
    v101 = UpscaledComponentType - 1;
    if (v102)
      goto LABEL_57;
    goto LABEL_80;
  }
  SequentialWithInternalCallbacks = CGDataProviderCreateSequentialWithInternalCallbacks((uint64_t)v64, (uint64_t)&sequential_provider_upscale_callbacks, v87, v88, v89, v90, v91, v92);
  v101 = UpscaledComponentType - 1;
  if (!SequentialWithInternalCallbacks)
  {
LABEL_80:
    free(v64);
    goto LABEL_145;
  }
  v40 = SequentialWithInternalCallbacks;
  CGDataProviderLock((uint64_t)provider);
LABEL_57:
  *(_BYTE *)(v40 + 260) = *((_BYTE *)provider + 260);
  if (v99 <= 0xC && ((1 << v99) & 0x1016) != 0 && v334 != 7)
  {
    v103 = (CGDataProvider *)v40;
    if (UpscaledComponentType == 2)
      v104 = 16;
    else
      v104 = 8;
    if (UpscaledComponentType == 5)
      v105 = 4352;
    else
      v105 = 0;
    if (UpscaledComponentType == 4)
      v106 = 32;
    else
      v106 = v104;
    if (UpscaledComponentType == 4)
      v107 = 8448;
    else
      v107 = v105;
    if (UpscaledComponentType == 2)
      v108 = 4096;
    else
      v108 = v107;
    DeviceGray = CGColorSpaceCreateDeviceGray();
    *(_DWORD *)srcFormat = v99;
    *(_DWORD *)&srcFormat[4] = v99;
    *(_QWORD *)&srcFormat[8] = DeviceGray;
    *(_DWORD *)&srcFormat[16] = *((_DWORD *)v64 + 31);
    memset(&srcFormat[20], 0, 20);
    *(_DWORD *)destFormat = v106;
    *(_DWORD *)&destFormat[4] = v106;
    *(_QWORD *)&destFormat[8] = DeviceGray;
    *(_QWORD *)&destFormat[32] = 0;
    *(_OWORD *)&destFormat[16] = v108;
    v110 = vImageConverter_CreateWithCGImageFormat((const vImage_CGImageFormat *)srcFormat, (const vImage_CGImageFormat *)destFormat, 0, 0x100u, 0);
    v64[17] = v110;
    if (!v110)
    {
      CGPostError((uint64_t)"%s: failed to create vImageConverter", v111, v112, v113, v114, v115, v116, v117, (char)"CGDataProviderCreateUpscalingProvider");
      CGDataProviderRelease(v103);
      goto LABEL_145;
    }
    v40 = (uint64_t)v103;
    v97 = v357;
    v98 = provider;
  }
  CGDataProviderRetain(v98);
  *v64 = v98;
  v35 = v374;
  v64[2] = v374;
  v64[3] = v97;
  *((_DWORD *)v64 + 8) = UpscaledComponentType;
  v64[5] = (CGDataProvider *)v93;
  v64[6] = v325;
  v64[7] = v326;
  v64[10] = (CGDataProvider *)BitsPerPixel;
  v64[11] = (CGDataProvider *)v99;
  v64[12] = (CGDataProvider *)v366;
  *(_QWORD *)srcFormat = v349;
  *(_QWORD *)&srcFormat[8] = v99;
  *(_QWORD *)&srcFormat[16] = cfa;
  v118 = v353;
  *(_DWORD *)&srcFormat[24] = v353;
  *(_DWORD *)&srcFormat[28] = v351;
  *(_DWORD *)&srcFormat[32] = v363;
  memcpy(&srcFormat[36], __dst, 0x10CuLL);
  v64[13] = (CGDataProvider *)((unint64_t)(CGBitmapPixelInfoGetBitsPerPixel((uint64_t)srcFormat, v119, v120, v121, v122, v123, v124, v125)* (_QWORD)v374+ 7) >> 3);
  *((_DWORD *)v64 + 30) = v363;
  *((_DWORD *)v64 + 31) = v351;
  if (v353 == 9)
  {
    v118 = 3;
    a3 = v338;
    a1 = v339;
    v126 = (CGDataProvider *)v328;
  }
  else
  {
    a3 = v338;
    a1 = v339;
    v126 = (CGDataProvider *)v328;
    if (v353 == 8)
      v118 = 1;
  }
  *((_DWORD *)v64 + 32) = v118;
  v64[9] = v126;
  *((_BYTE *)v64 + 9) = v336;
  v127 = v64[6];
  if (v127 <= v64[12])
    v127 = v64[12];
  v128 = (((unint64_t)v127 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  v64[19] = (CGDataProvider *)v128;
  v129 = (CGDataProvider *)malloc_type_calloc(1uLL, v128, 0xA3729uLL);
  v64[18] = v129;
  if (!v129)
  {
    upscale_provider_release_info((uint64_t)v64);
    CGPostError((uint64_t)"%s failed", v131, v132, v133, v134, v135, v136, v137, (char)"CGDataProviderCreateUpscalingProvider");
    goto LABEL_145;
  }
  if (v329)
  {
    *((_BYTE *)v64 + 160) = 1;
    v64[21] = *v329;
    v64[22] = v329[1];
  }
  v130 = *(uint64_t (**)(_QWORD))(v40 + 160);
  if (v130)
    v36 = v130(*(_QWORD *)(v40 + 24));
  else
    v36 = 0;
  a6 = v343;
  if (v365 * (_QWORD)v374 == 8 * v36)
    v38 = 0;
  else
    v38 = v36;
  v138 = Decode;
  if (v324)
    v138 = 0;
  Decode = v138;
  ByteOrderInfo = dword_184F7A7F8[v101];
  AlphaInfo = v345;
  if (v34 && (v331 & 0xE) != 4)
  {
    if (ColorSpace)
    {
      v139 = 2 * *(_QWORD *)(*((_QWORD *)ColorSpace + 3) + 40);
      if (v139)
      {
        v367 = v36;
        v140 = v38;
        v141 = exp2((double)v330);
        v38 = v140;
        AlphaInfo = v345;
        v36 = v367;
        v142 = v141 + -1.0;
        v143 = (double *)v412;
        do
        {
          v144 = *v34++;
          v145 = v144 * dbl_184F7A810[v101] / v142;
          v146 = round(v145);
          if (v101 < 2)
            v145 = v146;
          *v143++ = v145;
          --v139;
        }
        while (v139);
      }
    }
    v34 = (double *)v412;
  }
  provider = (CGDataProviderRef)v40;
  a4 = v332;
  a2 = v342;
LABEL_107:
  cfb = (void *)v40;
  if (v35 == (CGDataProvider *)a3 && v357 == a4)
  {
    v352 = 0;
    if (v34)
      goto LABEL_110;
    goto LABEL_158;
  }
  v348 = AlphaInfo;
  v356 = v38;
  v341 = a1;
  BitsPerComponent = CGPixelComponentGetBitsPerComponent(UpscaledComponentType, v24, v25, v26, v27, v28, v29, v30);
  if ((BitsPerComponent & 7) != 0)
    _CGHandleAssert("CGDataProviderCreateForDestinationWithImage", 219, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderForDestinationWithImage.c", "bits_per_component == ((bits_per_component >> 3) << 3)", "bits per component %zu", v205, v206, v207, BitsPerComponent);
  NumberOfComponents = CGImageGetNumberOfComponents((uint64_t)cf);
  v210 = cf[8];
  v209 = cf[9];
  v211 = cf[5];
  v212 = CGImageGetNumberOfComponents((uint64_t)cf);
  if (BitsPerComponent > 0x20 || ((1 << BitsPerComponent) & 0x100010100) == 0)
    _CGHandleAssert("CGDataProviderCreateUpsamplingProvider", 514, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderUpsample.c", "bits_per_component == 8 || bits_per_component == 16 || bits_per_component == 32", "bpc %zu", v213, v214, v215, BitsPerComponent);
  v216 = v212;
  v217 = (CGDataProviderRef *)malloc_type_calloc(1uLL, 0x98uLL, 0xA3729uLL);
  if (!v217)
  {
LABEL_161:
    if (cfb)
      CFRelease(cfb);
    CGPostError((uint64_t)"%s: failed to create upsampling provider", v218, v219, v220, v221, v222, v223, v224, (char)"CGDataProviderCreateForDestinationWithImage");
    return 0;
  }
  v225 = v217;
  v226 = v209 - ((unint64_t)(v211 * v210 + 7) >> 3) + ((BitsPerComponent * a3 * NumberOfComponents) >> 3);
  v227 = v356;
  v217[7] = v374;
  v217[8] = v357;
  v228 = v216 * BitsPerComponent;
  if (!v356)
    v227 = (v216 * BitsPerComponent * (unint64_t)v374) >> 3;
  v217[9] = (CGDataProviderRef)v227;
  v217[10] = (CGDataProviderRef)((v216 * BitsPerComponent * (unint64_t)v374) >> 3);
  v217[2] = (CGDataProviderRef)a3;
  v217[3] = a4;
  v217[4] = (CGDataProviderRef)v226;
  v217[5] = (CGDataProviderRef)((v228 * a3) >> 3);
  v217[12] = (CGDataProviderRef)BitsPerComponent;
  v217[13] = (CGDataProviderRef)v216;
  v217[14] = (CGDataProviderRef)(v228 >> 3);
  v217[15] = (CGDataProviderRef)(((_QWORD)v374 << 16) / a3);
  v217[16] = (CGDataProviderRef)(((_QWORD)v357 << 16) / (unint64_t)a4);
  v371 = v226;
  if ((*((_DWORD *)provider + 5) & 0xFFFFFFFD) != 0)
  {
    a1 = v341;
    a2 = v342;
    a6 = v343;
    if (v357 != a4)
      _CGHandleAssert("CGDataProviderCreateUpsamplingProvider", 554, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderUpsample.c", "data->src_height == data->dst_height", "src height %zu  dest height %zu", v222, v223, v224, (char)v357);
    CGDataProviderRetain(provider);
    *v225 = provider;
    v235 = CGDataProviderCreateSequentialWithInternalCallbacks((uint64_t)v225, (uint64_t)&sequential_provider_upsample_callbacks, v229, v230, v231, v232, v233, v234);
    CGDataProviderLock((uint64_t)provider);
  }
  else
  {
    *v217 = CGDataProviderRetain(provider);
    *((_BYTE *)v225 + 8) = 1;
    CGDataProviderCreateDirectWithInternalCallbacks((uint64_t)v225, v226 * (_QWORD)a4, (uint64_t)&direct_provider_upsample_callbacks, v237, v238, v239, v240, v241);
    v235 = v242;
    a1 = v341;
    a2 = v342;
    a6 = v343;
  }
  AlphaInfo = v348;
  if (!v235)
  {
    free(v225);
    goto LABEL_161;
  }
  v352 = (CGDataProviderRef)v235;
  v243 = v225[4];
  if (v243 <= v225[9])
    v243 = v225[9];
  v244 = (((unint64_t)v243 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  v225[18] = (CGDataProviderRef)v244;
  v245 = (CGDataProvider *)malloc_type_calloc(1uLL, v244, 0xA3729uLL);
  v225[17] = v245;
  if (!v245 || !*v225)
  {
    upsample_provider_release_info((uint64_t)v225);
    CGPostError((uint64_t)"%s failed", v247, v248, v249, v250, v251, v252, v253, (char)"CGDataProviderCreateUpsamplingProvider");
    goto LABEL_161;
  }
  v35 = v374;
  v36 = v371;
  if (v365 * (_QWORD)v374 == 8 * v371)
    v38 = 0;
  else
    v38 = v371;
  provider = (CGDataProviderRef)v235;
  if (v34)
  {
LABEL_110:
    v354 = v38;
    v368 = v36;
    memset(__dst, 0, sizeof(__dst));
    v147 = CGPixelComponentGetBitsPerComponent(UpscaledComponentType, v24, v25, v26, v27, v28, v29, v30);
    CGBitmapPixelInfoInitialize(__dst, (char *)__dst, UpscaledComponentType, v147, v344, AlphaInfo, ByteOrderInfo, 0, (uint64_t)Decode);
    if (AlphaInfo >= 7)
      _CGHandleAssert("alpha_info_for_masking_colors", 38, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderForDestinationWithImage.c", "", "Unimplemented", v152, v153, v154, v323);
    v346 = AlphaInfo;
    v350 = dword_184F7A838[AlphaInfo];
    v373 = CGPixelComponentGetBitsPerComponent(UpscaledComponentType, v148, v149, v150, v151, v152, v153, v154);
    if ((unint64_t)(v373 - 33) <= 0xFFFFFFFFFFFFFFDFLL)
      _CGHandleAssert("CGBitmapPixelInfoInitialize", 56, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGBitmapPixelInfo.c", "bits_per_component > 0 && bits_per_component <= 32", "bpc: %zu", v159, v160, v161, v373);
    v162 = cfb;
    v163 = v368;
    v164 = v354;
    if (!v354)
    {
      memcpy(srcFormat, __dst, sizeof(srcFormat));
      v172 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)srcFormat, v165, v166, v167, v168, v169, v170, v171);
      v163 = v368;
      v164 = (v172 * a3 + 7) >> 3;
    }
    v355 = v164;
    v340 = a1;
    v173 = ByteOrderInfo;
    if (!v346)
    {
      v174 = cf[9] - ((unint64_t)(v365 * (_QWORD)v35 + 7) >> 3);
      *(_DWORD *)srcFormat = UpscaledComponentType;
      *(_DWORD *)&srcFormat[4] = 0;
      *(_QWORD *)&srcFormat[8] = v373;
      *(_QWORD *)&srcFormat[16] = v344;
      *(_DWORD *)&srcFormat[24] = v350;
      *(_DWORD *)&srcFormat[28] = ByteOrderInfo;
      memset(&srcFormat[32], 0, 272);
      v162 = cfb;
      v163 = v174
           + ((unint64_t)(CGBitmapPixelInfoGetBitsPerPixel((uint64_t)srcFormat, v155, v156, v157, v158, v159, v160, v161)* (_QWORD)v374+ 7) >> 3);
    }
    v369 = v163;
    v410 = 0u;
    v409 = 0u;
    v408 = 0u;
    v407 = 0u;
    v406 = 0u;
    v405 = 0u;
    v404 = 0u;
    v403 = 0u;
    v402 = 0u;
    v401 = 0u;
    v400 = 0u;
    v399 = 0u;
    v398 = 0u;
    memset(destFormat, 0, sizeof(destFormat));
    v377 = __dst[0];
    v393 = __dst[15];
    v394 = __dst[16];
    v395 = __dst[17];
    v396 = __dst[18];
    v389 = __dst[11];
    v390 = __dst[12];
    v391 = __dst[13];
    v392 = __dst[14];
    v386 = __dst[8];
    v387 = __dst[9];
    v388 = __dst[10];
    v381 = __dst[3];
    v382 = __dst[4];
    v383 = __dst[5];
    v384 = __dst[6];
    v385 = __dst[7];
    if (LODWORD(__dst[2]))
      _CGHandleAssert("CGDataProviderCreateWithMaskingColors", 490, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderWithMaskingColors.c", "CGBitmapPixelInfoGetCGImagePixelFormatInfo(src_pixel_info) == kCGImagePixelFormatPacked", "source pixel info %u", v159, v160, v161, __dst[2]);
    *(_DWORD *)srcFormat = UpscaledComponentType;
    *(_DWORD *)&srcFormat[4] = 0;
    *(_QWORD *)&srcFormat[8] = v373;
    *(_QWORD *)&srcFormat[16] = v344;
    *(_DWORD *)&srcFormat[24] = v350;
    *(_DWORD *)&srcFormat[28] = ByteOrderInfo;
    memset(&srcFormat[32], 0, 272);
    *(_OWORD *)v379 = __dst[0];
    v364 = *(CGDataProvider **)&__dst[1];
    *(_OWORD *)&v379[16] = __dst[1];
    v335 = (CGDataProvider *)*((_QWORD *)&__dst[1] + 1);
    v337 = (CGDataProvider *)*((_QWORD *)&__dst[2] + 1);
    *(_QWORD *)&v379[32] = __PAIR64__(DWORD1(__dst[2]), 0);
    v347 = DWORD1(__dst[2]);
    *(_QWORD *)&v379[40] = *((_QWORD *)&__dst[2] + 1);
    *(_OWORD *)&v379[240] = __dst[15];
    *(_OWORD *)&v379[256] = __dst[16];
    *(_OWORD *)&v379[272] = __dst[17];
    *(_OWORD *)&v379[288] = __dst[18];
    *(_OWORD *)&v379[176] = __dst[11];
    *(_OWORD *)&v379[192] = __dst[12];
    *(_OWORD *)&v379[208] = __dst[13];
    *(_OWORD *)&v379[224] = __dst[14];
    *(_OWORD *)&v379[112] = __dst[7];
    *(_OWORD *)&v379[128] = __dst[8];
    *(_OWORD *)&v379[144] = __dst[9];
    *(_OWORD *)&v379[160] = __dst[10];
    *(_OWORD *)&v379[48] = __dst[3];
    *(_OWORD *)&v379[64] = __dst[4];
    *(_OWORD *)&v379[80] = __dst[5];
    *(_OWORD *)&v379[96] = __dst[6];
    IsEqualToBitmapPixelInfo = CGBitmapPixelInfoIsEqualToBitmapPixelInfo((uint64_t)srcFormat, (uint64_t)v379);
    v176 = malloc_type_calloc(1uLL, 0x3B8uLL, 0xA3729uLL);
    if (!v176)
      goto LABEL_190;
    v184 = (CGDataProviderRef *)v176;
    v185 = 2 * v344;
    if (2 * v344)
    {
      v186 = v176 + 84;
      v187 = v176 + 84;
      v188 = v176 + 84;
      while (2)
      {
        switch(UpscaledComponentType)
        {
          case 1:
            v189 = fmin(*v34, 255.0);
            goto LABEL_127;
          case 2:
            *v187++ = (int)fmax(fmin(*v34, 65535.0), 0.0);
            goto LABEL_128;
          case 4:
          case 5:
            *v186 = *(_QWORD *)v34;
            goto LABEL_128;
          case 7:
            v189 = fmin(*v34, 1.0);
            goto LABEL_127;
          case 8:
            v189 = fmin(*v34, 3.0);
            goto LABEL_127;
          case 9:
            v189 = fmin(*v34, 15.0);
LABEL_127:
            *v188++ = (int)fmax(v189, 0.0);
LABEL_128:
            ++v34;
            ++v186;
            if (!--v185)
              break;
            continue;
          default:
            _CGHandleAssert("copy_masking_colors", 453, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderWithMaskingColors.c", "", "Unimplemented", v181, v182, v183, v323);
        }
        break;
      }
    }
    if (!IsEqualToBitmapPixelInfo)
    {
      if ((CGDataProvider *)v344 != v364)
        _CGHandleAssert("CGDataProviderCreateWithMaskingColors", 506, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderWithMaskingColors.c", "CGBitmapPixelInfoGetColorantCount(dst_pixel_info) == CGBitmapPixelInfoGetColorantCount(src_pixel_info)", "src colors %zu  dest colors %zu", v181, v182, v183, v344);
      memset(v379, 0, 40);
      *(_OWORD *)srcFormat = v377;
      *(_QWORD *)&srcFormat[16] = v344;
      *(_QWORD *)&srcFormat[24] = v335;
      *(_DWORD *)&srcFormat[32] = 0;
      *(_DWORD *)&srcFormat[36] = v347;
      *(_QWORD *)&srcFormat[40] = v337;
      *(_OWORD *)&srcFormat[240] = v393;
      *(_OWORD *)&srcFormat[256] = v394;
      *(_OWORD *)&srcFormat[272] = v395;
      *(_OWORD *)&srcFormat[288] = v396;
      *(_OWORD *)&srcFormat[176] = v389;
      *(_OWORD *)&srcFormat[192] = v390;
      *(_OWORD *)&srcFormat[208] = v391;
      *(_OWORD *)&srcFormat[224] = v392;
      *(_OWORD *)&srcFormat[112] = v385;
      *(_OWORD *)&srcFormat[128] = v386;
      *(_OWORD *)&srcFormat[144] = v387;
      *(_OWORD *)&srcFormat[160] = v388;
      *(_OWORD *)&srcFormat[48] = v381;
      *(_OWORD *)&srcFormat[64] = v382;
      *(_OWORD *)&srcFormat[80] = v383;
      *(_OWORD *)&srcFormat[96] = v384;
      CGBitmapPixelInfoGet_vImageFormat((uint64_t)v379, (uint64_t)srcFormat, v178, v179, v180, v181, v182, v183);
      memset(&v378, 0, sizeof(v378));
      *(_DWORD *)srcFormat = UpscaledComponentType;
      *(_DWORD *)&srcFormat[4] = 0;
      *(_QWORD *)&srcFormat[8] = v373;
      *(_QWORD *)&srcFormat[16] = v344;
      *(_DWORD *)&srcFormat[24] = v350;
      *(_DWORD *)&srcFormat[28] = v173;
      *(_QWORD *)&srcFormat[40] = 0;
      *(_QWORD *)&srcFormat[32] = 0;
      *(_OWORD *)&srcFormat[240] = v407;
      *(_OWORD *)&srcFormat[256] = v408;
      *(_OWORD *)&srcFormat[272] = v409;
      *(_OWORD *)&srcFormat[288] = v410;
      *(_OWORD *)&srcFormat[176] = v403;
      *(_OWORD *)&srcFormat[192] = v404;
      *(_OWORD *)&srcFormat[208] = v405;
      *(_OWORD *)&srcFormat[224] = v406;
      *(_OWORD *)&srcFormat[112] = v399;
      *(_OWORD *)&srcFormat[128] = v400;
      *(_OWORD *)&srcFormat[144] = v401;
      *(_OWORD *)&srcFormat[160] = v402;
      *(_OWORD *)&srcFormat[48] = *(_OWORD *)destFormat;
      *(_OWORD *)&srcFormat[64] = *(_OWORD *)&destFormat[16];
      *(_OWORD *)&srcFormat[80] = *(_OWORD *)&destFormat[32];
      *(_OWORD *)&srcFormat[96] = v398;
      CGBitmapPixelInfoGet_vImageFormat((uint64_t)&v378, (uint64_t)srcFormat, v190, v191, v192, v193, v194, v195);
      v196 = vImageConverter_CreateWithCGImageFormat((const vImage_CGImageFormat *)v379, &v378, 0, 0x100u, 0);
      v184[116] = v196;
      if (!v196)
      {
        free(v184);
        goto LABEL_190;
      }
    }
    v197 = *((_DWORD *)provider + 5) & 0xFFFFFFFD;
    *(_DWORD *)srcFormat = UpscaledComponentType;
    *(_DWORD *)&srcFormat[4] = 0;
    *(_QWORD *)&srcFormat[8] = v373;
    *(_QWORD *)&srcFormat[16] = v344;
    *(_DWORD *)&srcFormat[24] = v350;
    *(_DWORD *)&srcFormat[28] = v173;
    *(_QWORD *)&srcFormat[40] = 0;
    *(_QWORD *)&srcFormat[32] = 0;
    *(_OWORD *)&srcFormat[240] = v407;
    *(_OWORD *)&srcFormat[256] = v408;
    *(_OWORD *)&srcFormat[272] = v409;
    *(_OWORD *)&srcFormat[288] = v410;
    *(_OWORD *)&srcFormat[176] = v403;
    *(_OWORD *)&srcFormat[192] = v404;
    *(_OWORD *)&srcFormat[208] = v405;
    *(_OWORD *)&srcFormat[224] = v406;
    *(_OWORD *)&srcFormat[112] = v399;
    *(_OWORD *)&srcFormat[128] = v400;
    *(_OWORD *)&srcFormat[144] = v401;
    *(_OWORD *)&srcFormat[160] = v402;
    *(_OWORD *)&srcFormat[48] = *(_OWORD *)destFormat;
    *(_OWORD *)&srcFormat[64] = *(_OWORD *)&destFormat[16];
    *(_OWORD *)&srcFormat[80] = *(_OWORD *)&destFormat[32];
    *(_OWORD *)&srcFormat[96] = v398;
    v204 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)srcFormat, v177, v178, v179, v180, v181, v182, v183);
    if (v197)
    {
      v358 = (CGDataProvider *)CGDataProviderCreateSequentialWithInternalCallbacks((uint64_t)v184, (uint64_t)&sequential_provider_with_masking_colors_callbacks, v198, v199, v200, v201, v202, v203);
      if (v358)
      {
        CGDataProviderLock((uint64_t)provider);
LABEL_165:
        v255 = (unint64_t)(v204 * (_QWORD)v374 + 7) >> 3;
        *v184 = CGDataProviderRetain(provider);
        *((_OWORD *)v184 + 1) = v377;
        v184[4] = v364;
        v184[5] = v335;
        *((_DWORD *)v184 + 12) = 0;
        *((_DWORD *)v184 + 13) = v347;
        v184[7] = v337;
        v263 = v394;
        *((_OWORD *)v184 + 16) = v393;
        *((_OWORD *)v184 + 17) = v263;
        v264 = v396;
        *((_OWORD *)v184 + 18) = v395;
        *((_OWORD *)v184 + 19) = v264;
        v265 = v390;
        *((_OWORD *)v184 + 12) = v389;
        *((_OWORD *)v184 + 13) = v265;
        v266 = v392;
        *((_OWORD *)v184 + 14) = v391;
        *((_OWORD *)v184 + 15) = v266;
        v267 = v386;
        *((_OWORD *)v184 + 8) = v385;
        *((_OWORD *)v184 + 9) = v267;
        v268 = v388;
        *((_OWORD *)v184 + 10) = v387;
        *((_OWORD *)v184 + 11) = v268;
        v269 = v382;
        *((_OWORD *)v184 + 4) = v381;
        *((_OWORD *)v184 + 5) = v269;
        v270 = v384;
        *((_OWORD *)v184 + 6) = v383;
        *((_OWORD *)v184 + 7) = v270;
        if (v337)
          v184[7] = (CGDataProviderRef)(v184 + 8);
        v271 = v355;
        v184[40] = (CGDataProviderRef)v355;
        *(_OWORD *)srcFormat = v377;
        *(_QWORD *)&srcFormat[16] = v364;
        *(_QWORD *)&srcFormat[24] = v335;
        *(_DWORD *)&srcFormat[32] = 0;
        *(_DWORD *)&srcFormat[36] = v347;
        *(_QWORD *)&srcFormat[40] = v337;
        *(_OWORD *)&srcFormat[240] = v393;
        *(_OWORD *)&srcFormat[256] = v394;
        *(_OWORD *)&srcFormat[272] = v395;
        *(_OWORD *)&srcFormat[288] = v396;
        *(_OWORD *)&srcFormat[176] = v389;
        *(_OWORD *)&srcFormat[192] = v390;
        *(_OWORD *)&srcFormat[208] = v391;
        *(_OWORD *)&srcFormat[224] = v392;
        *(_OWORD *)&srcFormat[112] = v385;
        *(_OWORD *)&srcFormat[128] = v386;
        *(_OWORD *)&srcFormat[144] = v387;
        *(_OWORD *)&srcFormat[160] = v388;
        *(_OWORD *)&srcFormat[48] = v381;
        *(_OWORD *)&srcFormat[64] = v382;
        *(_OWORD *)&srcFormat[80] = v383;
        *(_OWORD *)&srcFormat[96] = v384;
        v184[41] = (CGDataProviderRef)((unint64_t)(CGBitmapPixelInfoGetBitsPerPixel((uint64_t)srcFormat, v256, v257, v258, v259, v260, v261, v262)* (_QWORD)v374+ 7) >> 3);
        *((_DWORD *)v184 + 86) = UpscaledComponentType;
        *((_DWORD *)v184 + 87) = 0;
        v184[44] = (CGDataProviderRef)v373;
        v184[45] = (CGDataProviderRef)v344;
        *((_DWORD *)v184 + 92) = v350;
        *((_DWORD *)v184 + 93) = v173;
        v184[47] = 0;
        v184[48] = 0;
        v272 = v408;
        *(_OWORD *)(v184 + 73) = v407;
        *(_OWORD *)(v184 + 75) = v272;
        v273 = v410;
        *(_OWORD *)(v184 + 77) = v409;
        *(_OWORD *)(v184 + 79) = v273;
        v274 = v404;
        *(_OWORD *)(v184 + 65) = v403;
        *(_OWORD *)(v184 + 67) = v274;
        v275 = v406;
        *(_OWORD *)(v184 + 69) = v405;
        *(_OWORD *)(v184 + 71) = v275;
        v276 = v400;
        *(_OWORD *)(v184 + 57) = v399;
        *(_OWORD *)(v184 + 59) = v276;
        v277 = v402;
        *(_OWORD *)(v184 + 61) = v401;
        *(_OWORD *)(v184 + 63) = v277;
        v278 = *(_OWORD *)&destFormat[16];
        *(_OWORD *)(v184 + 49) = *(_OWORD *)destFormat;
        *(_OWORD *)(v184 + 51) = v278;
        v279 = v398;
        *(_OWORD *)(v184 + 53) = *(_OWORD *)&destFormat[32];
        *(_OWORD *)(v184 + 55) = v279;
        v184[81] = (CGDataProviderRef)v369;
        v184[82] = (CGDataProviderRef)v255;
        memcpy(srcFormat, v184 + 43, sizeof(srcFormat));
        v287 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)srcFormat, v280, v281, v282, v283, v284, v285, v286);
        memcpy(srcFormat, v184 + 2, sizeof(srcFormat));
        v295 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)srcFormat, v288, v289, v290, v291, v292, v293, v294);
        if (!v355)
          _CGHandleAssert("calculate_work_buffer_size", 464, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderWithMaskingColors.c", "masking_colors_bytes_per_row != 0", "masking rowBytes = 0", v296, v297, v298, v323);
        a6 = v343;
        a2 = v342;
        if (v287 > v295)
          v271 = v287 * v355 / v295;
        a1 = v340;
        v299 = ((v271 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
        v184[118] = (CGDataProviderRef)v299;
        v300 = (CGDataProvider *)malloc_type_calloc(1uLL, v299, 0xA3729uLL);
        v184[117] = v300;
        if (v300)
        {
          ByteOrderInfo = v173;
          Decode = 0;
          if (v365 * (_QWORD)v374 == 8 * v369)
            v246 = 0;
          else
            v246 = v369;
          AlphaInfo = v350;
          provider = v358;
          goto LABEL_175;
        }
        provider_with_masking_colors_release_info((uint64_t)v184);
        CGPostError((uint64_t)"%s failed", v315, v316, v317, v318, v319, v320, v321, (char)"CGDataProviderCreateWithMaskingColors");
        goto LABEL_188;
      }
    }
    else
    {
      *((_BYTE *)v184 + 8) = 1;
      CGDataProviderCreateDirectWithInternalCallbacks((uint64_t)v184, v369 * (_QWORD)v357, (uint64_t)&direct_provider_with_masking_colors_callbacks, v199, v200, v201, v202, v203);
      v358 = v254;
      if (v254)
        goto LABEL_165;
    }
    v314 = v184[116];
    if (v314)
      vImageConverter_Release(v314);
    free(v184);
LABEL_188:
    v162 = cfb;
LABEL_190:
    if (v162)
      CFRelease(v162);
    if (v352)
      CFRelease(v352);
    CGPostError((uint64_t)"%s: failed to create masking color provider", v177, v178, v179, v180, v181, v182, v183, (char)"CGDataProviderCreateForDestinationWithImage");
    return 0;
  }
LABEL_158:
  v246 = v38;
  v358 = 0;
LABEL_175:
  memset(srcFormat, 0, sizeof(srcFormat));
  v301 = CGPixelComponentGetBitsPerComponent(UpscaledComponentType, v24, v25, v26, v27, v28, v29, v30);
  CGBitmapPixelInfoInitialize(srcFormat, srcFormat, UpscaledComponentType, v301, v344, AlphaInfo, ByteOrderInfo, 0, (uint64_t)Decode);
  memcpy(v379, a2, sizeof(v379));
  ImageBytesPerRowForPixelInfo = CGImageGetImageBytesPerRowForPixelInfo((uint64_t)cf, a3, (uint64_t)v379, v302, v303, v304, v305, v306);
  v308 = cf[28];
  if (v308)
  {
    Property = (void *)CGPropertiesGetProperty(v308, CFSTR("kCGColorConversionInfoOptions"));
    v310 = ColorSpace;
    v311 = (CGDataProvider *)cfb;
    if (Property)
    {
      CopyWithAttribute = CGColorTransformCreateCopyWithAttribute((uint64_t)a1, Property);
      v313 = (const void *)CopyWithAttribute;
      if (CopyWithAttribute)
        a1 = (_QWORD *)CopyWithAttribute;
    }
    else
    {
      v313 = 0;
    }
  }
  else
  {
    v313 = 0;
    v310 = ColorSpace;
    v311 = (CGDataProvider *)cfb;
  }
  memcpy(v379, a2, sizeof(v379));
  memcpy(__dst, srcFormat, sizeof(__dst));
  v15 = CGDataProviderCreateForDestination(a1, a3, a4, (uint64_t)v379, ImageBytesPerRowForPixelInfo, provider, v310, __dst, v246, a6);
  CGDataProviderRelease(v311);
  CGDataProviderRelease(v352);
  CGDataProviderRelease(v358);
  if (v313)
    CFRelease(v313);
  return v15;
}

double image_finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  double result;

  if (get_notification_center_onceToken != -1)
    dispatch_once(&get_notification_center_onceToken, &__block_literal_global_297);
  if (get_notification_center_image_notification_center)
    CGNotificationCenterPostNotification(get_notification_center_image_notification_center, CFSTR("kCGImageWillDeallocate"), (__CFString *)a1);
  v2 = *(const void **)(a1 + 232);
  if (v2)
    CFRelease(v2);
  CGPropertiesRelease(*(_QWORD *)(a1 + 216));
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 144));
  CGDataProviderRelease(*(CGDataProviderRef *)(a1 + 152));
  v3 = *(const void **)(a1 + 208);
  if (v3)
    CFRelease(v3);
  CGImageEPSRepRelease(*(_QWORD *)(a1 + 192));
  v4 = *(const void **)(a1 + 200);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 176);
  if (v5)
    CFRelease(v5);
  free(*(void **)(a1 + 160));
  free(*(void **)(a1 + 168));
  free(*(void **)(a1 + 184));
  v6 = *(const void **)(a1 + 240);
  if (v6)
    CFRelease(v6);
  CGPropertiesRelease(*(_QWORD *)(a1 + 224));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 80));
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 28) = 57005;
  return result;
}

void CGDataProviderRelease(CGDataProviderRef provider)
{
  CFTypeID v2;

  if (provider)
  {
    v2 = CFGetTypeID(provider);
    if (kCGDataProviderPropertyTrustToken_block_invoke_once != -1)
      dispatch_once(&kCGDataProviderPropertyTrustToken_block_invoke_once, &__block_literal_global_26_6088);
    if (v2 == CGDataProviderGetTypeID_id)
      CFRelease(provider);
  }
}

void context_finalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  const void *v13;
  void *v14;
  uint64_t v15;

  if (!a1)
  {
    v15 = 0;
LABEL_16:
    handle_invalid_context((char)"context_finalize", v15, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    v15 = a1;
    goto LABEL_16;
  }
  v9 = *(const void **)(a1 + 80);
  if (v9)
    CFRelease(v9);
  v10 = *(unsigned int **)(a1 + 112);
  if (v10)
  {
    do
    {
      v11 = __ldxr(v10);
      v12 = v11 - 1;
    }
    while (__stxr(v12, v10));
    if (!v12)
      free(v10);
  }
  v13 = *(const void **)(a1 + 168);
  if (v13)
    CFRelease(v13);
  v14 = *(void **)(a1 + 104);
  if (v14)
  {
    CGGStackReset(*(uint64_t **)(a1 + 104));
    free(v14);
  }
  CGPropertiesRelease(*(_QWORD *)(a1 + 176));
  *(_DWORD *)(a1 + 16) = -1129601109;
}

void CGPropertiesRelease(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;

  if (a1)
  {
    do
    {
      v2 = __ldxr((unsigned int *)a1);
      v3 = v2 - 1;
    }
    while (__stxr(v3, (unsigned int *)a1));
    if (!v3)
    {
      CFRelease(*(CFTypeRef *)(a1 + 8));
      free((void *)a1);
    }
  }
}

uint64_t *CGGStackReset(uint64_t *a1)
{
  uint64_t *result;
  _QWORD *v3;
  uint64_t v4;

  for (result = (uint64_t *)a1[1]; result != a1; result = (uint64_t *)a1[1])
  {
    v4 = *result;
    v3 = (_QWORD *)result[1];
    *(_QWORD *)(v4 + 8) = v3;
    *v3 = v4;
    *result = (uint64_t)result;
    result[1] = (uint64_t)result;
    CGGStateRelease((uint64_t)result);
  }
  return result;
}

void registry_release(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;

  if (a1)
  {
    v1 = a1;
    v2 = a1;
    do
    {
      registry_entry_release(*v2);
      v2 = (uint64_t *)v2[1];
    }
    while (v2);
    do
    {
      v3 = (_QWORD *)v1[1];
      free(v1);
      v1 = v3;
    }
    while (v3);
  }
}

void CGNotificationCenterPostNotification(uint64_t a1, const __CFString *a2, __CFString *a3)
{
  const __CFString *v5;
  pthread_mutex_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int **v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  __CFString *v18;
  __CFString *v20;
  _QWORD *v21;

  if (a2)
    v5 = a2;
  else
    v5 = CFSTR("kCGNotificationAnyName");
  v6 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  v7 = *(uint64_t **)(a1 + 80);
  if (!v7)
    goto LABEL_28;
  v8 = 0;
  do
  {
    v9 = *v7;
    v10 = malloc_type_malloc(0x10uLL, 0x2062DE7BuLL);
    if (v10)
    {
      *v10 = v9;
      v10[1] = v8;
      v8 = v10;
    }
    v7 = (uint64_t *)v7[1];
  }
  while (v7);
  if (v8)
  {
    v11 = 0;
    do
    {
      v12 = v8;
      v8 = (_QWORD *)v8[1];
      v12[1] = v11;
      v11 = v12;
    }
    while (v8);
    v13 = (unsigned int **)v12;
    do
    {
      v14 = *v13;
      if (*v13)
      {
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v13 = (unsigned int **)v13[1];
    }
    while (v13);
    pthread_mutex_unlock(v6);
    v16 = v12;
    do
    {
      v17 = *v16;
      v18 = *(__CFString **)(*v16 + 24);
      if (v18 == CFSTR("kCGNotificationAnyObject") || v18 == a3)
      {
        v20 = *(__CFString **)(v17 + 16);
        if (v20 == CFSTR("kCGNotificationAnyName") || CFEqual(v20, v5))
        {
          (*(void (**)(uint64_t, _QWORD, const __CFString *, __CFString *, _QWORD))(v17 + 32))(a1, *(_QWORD *)(v17 + 8), v5, a3, 0);
          if (*(__CFString **)(v17 + 24) != CFSTR("kCGNotificationAnyObject"))
          {
            pthread_mutex_lock(v6);
            v21 = x_list_remove(*(_QWORD **)(a1 + 80), v17);
            registry_entry_release(v17);
            *(_QWORD *)(a1 + 80) = v21;
            pthread_mutex_unlock(v6);
          }
        }
      }
      v16 = (uint64_t *)v16[1];
    }
    while (v16);
  }
  else
  {
LABEL_28:
    pthread_mutex_unlock(v6);
    v12 = 0;
  }
  registry_release(v12);
}

void CGImageEPSRepRelease(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  const void *v4;

  if (a1)
  {
    do
    {
      v2 = __ldxr((unsigned int *)a1);
      v3 = v2 - 1;
    }
    while (__stxr(v3, (unsigned int *)a1));
    if (!v3)
    {
      CGDataProviderRelease(*(CGDataProviderRef *)(a1 + 8));
      v4 = *(const void **)(a1 + 16);
      if (v4)
        CFRelease(v4);
      free((void *)a1);
    }
  }
}

void registry_entry_release(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;

  if (a1)
  {
    do
    {
      v2 = __ldxr((unsigned int *)a1);
      v3 = v2 - 1;
    }
    while (__stxr(v3, (unsigned int *)a1));
    if (!v3)
    {
      CFRelease(*(CFTypeRef *)(a1 + 16));
      free((void *)a1);
    }
  }
}

uint64_t CGDataProviderCreateForDestination(_QWORD *a1, vImagePixelCount a2, CGDataProvider *a3, uint64_t a4, size_t a5, CGDataProvider *a6, _QWORD *a7, void *__src, size_t a9, unsigned int a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  BOOL IsEqualToBitmapPixelInfo;
  CGDataProviderRef *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  CGDataProviderRef *v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  vImageConverterRef v55;
  size_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  vImagePixelCount v64;
  vImageConverter *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t SequentialWithInternalCallbacks;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  CGDataProviderRef v101;
  vImageConverter *v102;
  CGDataProviderRef v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  CGDataProviderRef v111;
  CGDataProviderRef v112;
  size_t v113;
  CGDataProvider *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char BitsPerPixel;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  BOOL v135;
  CGDataProvider *v137;
  __int128 destFormat;
  __int128 destFormat_16;
  _OWORD destFormat_32[4];
  _BYTE srcFormat[344];
  vImage_Buffer __dst[11];
  vImage_Buffer dests;
  _BYTE v145[9];

  memcpy(__dst, __src, 0x130uLL);
  if (!CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v16, v17, v18, v19, v20, v21, v22))
  {
    memcpy(__dst, __src, 0x130uLL);
    BitsPerPixel = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v123, v124, v125, v126, v127, v128, v129);
    _CGHandleAssert("CGDataProviderCreateForDestination", 824, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderForDestination.c", "CGBitmapPixelInfoGetBitsPerPixel(src_pixel_info) != 0", "bpp %zu", v131, v132, v133, BitsPerPixel);
  }
  if (*(_DWORD *)(a4 + 32))
    _CGHandleAssert("CGDataProviderCreateForDestination", 826, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderForDestination.c", "CGBitmapPixelInfoGetCGImagePixelFormatInfo(dst_pixel_info) == kCGImagePixelFormatPacked", "format = %u", v23, v24, v25, *(_DWORD *)(a4 + 32));
  if (a1)
    v26 = CGColorTransformConvertRequired((_BOOL8)a1, a7, a10);
  else
    v26 = 0;
  v137 = a6;
  if (*((_BYTE *)a6 + 260))
    v135 = 0;
  else
    v135 = (*((_DWORD *)__src + 6) - 5) < 2;
  memcpy(__dst, (const void *)a4, 0x130uLL);
  memcpy(srcFormat, __src, 0x130uLL);
  IsEqualToBitmapPixelInfo = CGBitmapPixelInfoIsEqualToBitmapPixelInfo((uint64_t)__dst, (uint64_t)srcFormat);
  v28 = (CGDataProviderRef *)malloc_type_calloc(1uLL, 0x338uLL, 0xA3729uLL);
  if (!v28)
    return 0;
  v32 = v28;
  if (v26)
  {
    v28[87] = (CGDataProviderRef)CGColorTransformCreateCGCMSConverter(a1, a7, a10);
    v33 = a9;
    if (!a9)
    {
      memcpy(__dst, __src, 0x130uLL);
      v33 = (CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v34, v35, v36, v37, v38, v39, v40) * a2 + 7) >> 3;
    }
    __dst[0].data = 0;
    __dst[0].height = a2;
    __dst[0].width = 1;
    __dst[0].rowBytes = v33;
    __dst[1].data = (void *)a10;
    memcpy(&__dst[1].height, __src, 0x130uLL);
    if (*((_QWORD *)__src + 5))
      __dst[2].width = (vImagePixelCount)&__dst[2].rowBytes;
    *(_QWORD *)srcFormat = 0;
    *(_QWORD *)&srcFormat[8] = a2;
    *(_QWORD *)&srcFormat[16] = 1;
    *(_QWORD *)&srcFormat[24] = a5;
    *(_DWORD *)&srcFormat[36] = 0;
    *(_DWORD *)&srcFormat[32] = a10;
    memcpy(&srcFormat[40], (const void *)a4, 0x130uLL);
    if (*(_QWORD *)(a4 + 40))
      *(_QWORD *)&srcFormat[80] = &srcFormat[88];
    destFormat_16 = 0u;
    memset(destFormat_32, 0, 56);
    destFormat = 0u;
    CGCMSConverterConvertGetConverterInfo((uint64_t)&destFormat, v32[87], (uint64_t)__dst, (uint64_t)srcFormat);
    v41 = destFormat_16;
    v32[88] = (CGDataProviderRef)destFormat;
    if (v41 >= 0x401)
    {
      v32[94] = (CGDataProviderRef)v41;
      v32[93] = (CGDataProviderRef)malloc_type_calloc(1uLL, v41, 0xA3729uLL);
    }
    if (*((_QWORD *)&destFormat_16 + 1))
      v32[95] = (CGDataProviderRef)*((_QWORD *)&destFormat_16 + 1);
    if (CGColorSpaceGetType(a7) == 7)
      *((_DWORD *)v32 + 192) = destFormat_32[0];
    v42 = *(_OWORD *)((char *)&destFormat_32[1] + 8);
    *(_OWORD *)(v32 + 97) = *(_OWORD *)((char *)destFormat_32 + 8);
    *(_OWORD *)(v32 + 99) = v42;
    *(_OWORD *)(v32 + 101) = *(_OWORD *)((char *)&destFormat_32[2] + 8);
    goto LABEL_38;
  }
  if (IsEqualToBitmapPixelInfo)
    goto LABEL_38;
  if (a7 && *(_QWORD *)(a4 + 16) != *((_QWORD *)__src + 2))
    _CGHandleAssert("CGDataProviderCreateForDestination", 893, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProviderForDestination.c", "src_space == NULL || CGBitmapPixelInfoGetColorantCount(dst_pixel_info) == CGBitmapPixelInfoGetColorantCount(src_pixel_info)", "colorSpace %p  dest colors %zu  src colors %zu", v29, v30, v31, (char)a7);
  memset(srcFormat, 0, 40);
  memcpy(__dst, __src, 0x130uLL);
  CGBitmapPixelInfoGet_vImageFormat((uint64_t)srcFormat, (uint64_t)__dst, v43, v44, v45, v46, v47, v48);
  *(_QWORD *)&destFormat_32[0] = 0;
  destFormat = 0u;
  destFormat_16 = 0u;
  memcpy(__dst, (const void *)a4, 0x130uLL);
  CGBitmapPixelInfoGet_vImageFormat((uint64_t)&destFormat, (uint64_t)__dst, v49, v50, v51, v52, v53, v54);
  v55 = vImageConverter_CreateWithCGImageFormat((const vImage_CGImageFormat *)srcFormat, (const vImage_CGImageFormat *)&destFormat, 0, 0x100u, 0);
  v32[89] = v55;
  if (!v55)
  {
    free(v32);
    return 0;
  }
  v56 = a9;
  memcpy(__dst, __src, 0x130uLL);
  if (a9)
  {
    v64 = (8 * a9 / CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v57, v58, v59, v60, v61, v62, v63) + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v56 = (CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v57, v58, v59, v60, v61, v62, v63) * a2 + 7) >> 3;
    v64 = a2;
  }
  v65 = v32[89];
  if (!v65)
  {
LABEL_37:
    v32[94] = 0;
    goto LABEL_38;
  }
  __dst[0].data = v145;
  __dst[0].height = 1;
  __dst[0].width = v64;
  __dst[0].rowBytes = v56;
  dests.data = v145;
  dests.height = 1;
  dests.width = v64;
  dests.rowBytes = a5;
  v66 = vImageConvert_AnyToAny(v65, __dst, &dests, 0, 0x80u);
  if ((v66 & 0x8000000000000000) != 0)
  {
    CGPostError((uint64_t)"vImageConvert_AnyToAny failed to return vImage buffer size", v67, v68, v69, v70, v71, v72, v73, v134);
    goto LABEL_37;
  }
  v32[94] = (CGDataProviderRef)v66;
  if (v66 >= 0x401)
    v32[93] = (CGDataProviderRef)malloc_type_calloc(1uLL, v66, 0xA3729uLL);
LABEL_38:
  memcpy(__dst, (const void *)a4, 0x130uLL);
  v87 = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v74, v75, v76, v77, v78, v79, v80);
  if ((*((_DWORD *)v137 + 5) | 2) == 2)
  {
    *((_BYTE *)v32 + 724) = 1;
    CGDataProviderCreateDirectWithInternalCallbacks((uint64_t)v32, a5 * (_QWORD)a3, (uint64_t)&direct_provider_for_destination_callbacks, v82, v83, v84, v85, v86);
    v89 = v88;
    if (!v88)
      goto LABEL_51;
  }
  else
  {
    SequentialWithInternalCallbacks = CGDataProviderCreateSequentialWithInternalCallbacks((uint64_t)v32, (uint64_t)&sequential_provider_for_destination_callbacks, v81, v82, v83, v84, v85, v86);
    if (!SequentialWithInternalCallbacks)
    {
LABEL_51:
      v101 = v32[93];
      if (v101)
        free(v101);
      v102 = v32[89];
      if (v102)
        vImageConverter_Release(v102);
      v103 = v32[95];
      if (v103)
        free(v103);
      free(v32);
      CGPostError((uint64_t)"%s failed to allocate", v104, v105, v106, v107, v108, v109, v110, (char)"CGDataProviderCreateForDestination");
      return 0;
    }
    v89 = SequentialWithInternalCallbacks;
    CGDataProviderLock((uint64_t)v137);
  }
  v91 = v87 * a2 + 7;
  *v32 = CGDataProviderRetain(v137);
  v32[1] = (CGDataProviderRef)a2;
  v32[2] = a3;
  memcpy(v32 + 4, __src, 0x130uLL);
  if (*((_QWORD *)__src + 5))
    v32[9] = (CGDataProviderRef)(v32 + 10);
  v92 = v91 >> 3;
  v32[42] = (CGDataProviderRef)a9;
  memcpy(__dst, __src, 0x130uLL);
  v32[43] = (CGDataProviderRef)((CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v93, v94, v95, v96, v97, v98, v99)
                               * a2
                               + 7) >> 3);
  memcpy(v32 + 45, (const void *)a4, 0x130uLL);
  if (*(_QWORD *)(a4 + 40))
    v32[50] = (CGDataProviderRef)(v32 + 51);
  v32[83] = (CGDataProviderRef)a5;
  v32[84] = (CGDataProviderRef)v92;
  v100 = !v26;
  if (!a1)
    v100 = 1;
  if ((v100 & 1) != 0)
    a1 = 0;
  else
    CFRetain(a1);
  v32[86] = (CGDataProviderRef)a1;
  if (a7)
    CFRetain(a7);
  v32[3] = (CGDataProviderRef)a7;
  *((_DWORD *)v32 + 180) = a10;
  *((_BYTE *)v32 + 725) = v135;
  v111 = v32[83];
  v112 = v32[42];
  if (!v112)
    v112 = v32[43];
  if (v111 <= v112)
    v111 = v112;
  v113 = (((unint64_t)v111 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  v32[92] = (CGDataProviderRef)v113;
  v114 = (CGDataProvider *)malloc_type_calloc(1uLL, v113, 0xA3729uLL);
  v32[91] = v114;
  if (!v114)
  {
    provider_for_destination_release_info((uint64_t)v32);
    CGPostError((uint64_t)"%s failed", v115, v116, v117, v118, v119, v120, v121, (char)"CGDataProviderCreateForDestination");
    return 0;
  }
  return v89;
}

BOOL CGBitmapPixelInfoIsEqualToBitmapPixelInfo(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  double *v3;
  double *v4;
  double v5;
  double v6;
  unint64_t v7;
  _BOOL8 result;

  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
    return 0;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16)
    || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)
    || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
  {
    return 0;
  }
  v3 = *(double **)(a1 + 40);
  v4 = *(double **)(a2 + 40);
  if (!v3)
  {
    if (!v4)
      return 1;
    v3 = (double *)&standard_decode;
  }
  if (!v4)
    v4 = (double *)&standard_decode;
  if (v2)
  {
    v5 = *v3;
    v6 = *v4;
    v7 = 1;
    while (v5 == v6)
    {
      v5 = v3[v7];
      v6 = v4[v7];
      result = v5 == v6;
      if (v7 < v2)
      {
        ++v7;
        if (v5 == v6)
          continue;
      }
      return result;
    }
    return 0;
  }
  return 1;
}

__n128 CGDataProviderCreateDirectWithInternalCallbacks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 result;
  uint64_t provider;
  uint64_t v13;

  if (a2 <= 0)
  {
    CGPostError((uint64_t)"%s: Invalid size = %lld", a2, a3, a4, a5, a6, a7, a8, (char)"CGDataProviderCreateDirectWithInternalCallbacks");
    if (!a3)
      return result;
  }
  else if (!a3)
  {
    return result;
  }
  if (a2 >= 1 && *(_DWORD *)a3 == 1)
  {
    if (*(_QWORD *)(a3 + 8))
    {
      if (*(_QWORD *)(a3 + 40))
        return result;
    }
    else if (!*(_QWORD *)(a3 + 24))
    {
      return result;
    }
    provider = create_provider(a1, 0, a3, a4, a5, a6, a7, a8);
    if (provider)
    {
      *(_QWORD *)(provider + 32) = a2;
      *(_OWORD *)(provider + 80) = *(_OWORD *)(a3 + 8);
      v13 = *(_QWORD *)(a3 + 32);
      *(_QWORD *)(provider + 96) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(provider + 72) = v13;
      *(_OWORD *)(provider + 128) = *(_OWORD *)(a3 + 40);
      result = *(__n128 *)(a3 + 56);
      *(__n128 *)(provider + 160) = result;
    }
  }
  return result;
}

uint64_t CGBitmapPixelInfoGet_vImageFormat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int BitsPerComponent;
  CGColorSpaceRef DeviceCMYK;
  uint64_t result;
  _BYTE v17[304];

  LODWORD(v10) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(a2 + 24) - 1;
  if (v12 <= 8)
    v10 = qword_184F7EB80[v12];
  v13 = v10 + v11;
  BitsPerComponent = CGPixelComponentGetBitsPerComponent(*(_DWORD *)a2, a2, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)a1 = BitsPerComponent;
  *(_DWORD *)(a1 + 4) = BitsPerComponent * v13;
  switch(v11)
  {
    case 4:
      DeviceCMYK = CGColorSpaceCreateDeviceCMYK();
      break;
    case 3:
      DeviceCMYK = CGColorSpaceCreateDeviceRGB();
      break;
    case 1:
      DeviceCMYK = CGColorSpaceCreateDeviceGray();
      break;
    default:
      DeviceCMYK = 0;
      break;
  }
  *(_QWORD *)(a1 + 8) = DeviceCMYK;
  memcpy(v17, (const void *)a2, sizeof(v17));
  result = CGBitmapPixelInfoGetCGImageBitmapInfo((uint64_t)v17);
  *(_DWORD *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t CGPixelComponentGetBitsPerComponent(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char vars0;

  v8 = a1 - 1;
  if ((a1 - 1) >= 9 || ((0x1DFu >> v8) & 1) == 0)
    _CGHandleAssert("CGPixelComponentGetBitsPerComponent", 38, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGBitmapPixelInfo.c", "", "Unimplemented", a6, a7, a8, vars0);
  return qword_184F7EB38[v8];
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  CGColorSpace *v0;

  if (CGColorSpaceCreateDeviceRGB_predicate != -1)
    dispatch_once(&CGColorSpaceCreateDeviceRGB_predicate, &__block_literal_global_97);
  v0 = (CGColorSpace *)CGColorSpaceCreateDeviceRGB_space;
  if (CGColorSpaceCreateDeviceRGB_space)
    CFRetain((CFTypeRef)CGColorSpaceCreateDeviceRGB_space);
  return v0;
}

void *CGCMSConverterCreateCachedCGvImageConverter(_QWORD *a1, const void *a2, const void *a3)
{
  uint64_t Retained_f;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFDictionary *v19;
  uint64_t MD5Digest;
  uint64_t v21;
  BOOL v22;
  __int128 v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 v34;
  _OWORD *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  char *v45;
  _BYTE *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  vImageConverterRef *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  vImageConverterRef v84;
  _BOOL4 v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t *v89;
  uint64_t *v90;
  const CGColorConversionInfo *v91;
  vImageConverterRef v92;
  uint64_t v93;
  int v94;
  const CGColorConversionInfo *v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  char v107;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  BOOL v114;
  BOOL v115;
  _BYTE __src[344];
  _BYTE __dst[344];
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  void *value_out;
  vImage_CGImageFormat destFormat;
  _DWORD v126[86];
  vImage_CGImageFormat srcFormat;
  _OWORD key[24];
  _BYTE v129[264];
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  memcpy(__dst, a2, sizeof(__dst));
  v109 = (uint64_t)a3;
  memcpy(__src, a3, sizeof(__src));
  value_out = 0;
  if (CGvImageConverterCacheGetRetained_cglibrarypredicate != -1)
    dispatch_once(&CGvImageConverterCacheGetRetained_cglibrarypredicate, &__block_literal_global_16223);
  Retained_f = CGvImageConverterCacheGetRetained_f(0);
  v112 = v6;
  v113 = Retained_f;
  if (a1)
  {
    v7 = a1[3];
    v8 = a1[4];
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v123 = 0;
  v121 = 0u;
  v122 = 0u;
  memcpy(key, __dst, 0x158uLL);
  vImage_FormatFromConversionFormat((uint64_t)&v121, key, v8, v9, v10, v11, v12, v13);
  v120 = 0;
  v118 = 0u;
  v119 = 0u;
  memcpy(key, __src, 0x158uLL);
  vImage_FormatFromConversionFormat((uint64_t)&v118, key, v7, v14, v15, v16, v17, v18);
  if (a1 && (v19 = (const __CFDictionary *)a1[9]) != 0)
  {
    MD5Digest = CGCFDictionaryGetMD5Digest(v19, 0);
    v110 = v21;
    v111 = MD5Digest;
    if (!v8)
    {
LABEL_9:
      v22 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    v110 = 0;
    v111 = 0;
    if (!v8)
      goto LABEL_9;
  }
  v22 = *(_BYTE *)(*(_QWORD *)(v8 + 24) + 13) != 0;
LABEL_12:
  v115 = v22;
  if (v7)
    v114 = *(_BYTE *)(*(_QWORD *)(v7 + 24) + 13) != 0;
  else
    v114 = 0;
  v23 = v121;
  v24 = (__int128 *)*((_QWORD *)&v122 + 1);
  v25 = v122;
  v26 = v123;
  v27 = v118;
  v29 = (__int128 *)*((_QWORD *)&v119 + 1);
  v28 = v119;
  v30 = v120;
  bzero(&key[8], 0x208uLL);
  *(_QWORD *)&key[0] = v113;
  *((_QWORD *)&key[0] + 1) = v112;
  *(_QWORD *)&key[1] = v111;
  *((_QWORD *)&key[1] + 1) = v110;
  key[2] = v23;
  *(_QWORD *)&key[3] = v25;
  *((_QWORD *)&key[3] + 1) = v24;
  *(_QWORD *)&key[4] = v26;
  *(_OWORD *)((char *)&key[4] + 8) = v27;
  *((_QWORD *)&key[5] + 1) = v28;
  *(_QWORD *)&key[6] = v29;
  *((_QWORD *)&key[6] + 1) = v30;
  if (*((_QWORD *)&v23 + 1))
    v31 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v23 + 1) + 24) + 40);
  else
    v31 = 0;
  *(_QWORD *)&key[7] = v31;
  if (*((_QWORD *)&v27 + 1))
    v32 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v27 + 1) + 24) + 40);
  else
    v32 = 0;
  *((_QWORD *)&key[7] + 1) = v32;
  if (v24)
  {
    if (v31)
    {
      v33 = &key[8];
      do
      {
        v34 = *v24++;
        *v33++ = v34;
        --v31;
      }
      while (v31);
    }
    *((_QWORD *)&key[3] + 1) = 0;
  }
  if (v29)
  {
    if (v32)
    {
      v35 = v129;
      do
      {
        v36 = *v29++;
        *v35++ = v36;
        --v32;
      }
      while (v32);
    }
    *(_QWORD *)&key[6] = 0;
  }
  v129[256] = v115;
  v129[257] = v114;
  cache_lock_16224();
  if (get_cache_predicate_16225 != -1)
    dispatch_once(&get_cache_predicate_16225, &__block_literal_global_6_16226);
  if (!cache_get_and_retain(*(cache_t **)(get_cache_converter_cache + 64), key, &value_out))
  {
    cache_unlock_16227();
    if (!value_out)
      _CGHandleAssert("CGvImageConverterCacheGetRetained", 315, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGvImageConverterCache.c", "converter != NULL", "converter missing", v41, v42, v43, v107);
    CGConditionalVarWait((uint64_t)value_out + 8, v37, v38, v39, v40, v41, v42, v43);
    v44 = value_out;
    if (value_out && *(_QWORD *)value_out)
      return v44;
    release_and_remove_16231(key, value_out);
    value_out = 0;
    cache_lock_16224();
  }
  v44 = value_out;
  if (value_out)
    return v44;
  v45 = (char *)malloc_type_calloc(1uLL, 0x338uLL, 0x10B004081A944E8uLL);
  if (v45)
  {
    v46 = v45;
    v47 = v45 + 128;
    memcpy(v45 + 472, __src, 0x158uLL);
    memcpy(v47, __dst, 0x158uLL);
    v46[816] = v115;
    v46[817] = v114;
    CGConditionalVarInit((uint64_t)(v46 + 8), v48, v49, v50, v51, v52, v53, v54);
    value_out = v46;
    if (get_cache_predicate_16225 != -1)
      dispatch_once(&get_cache_predicate_16225, &__block_literal_global_6_16226);
    v55 = a1;
    cache_set_and_retain(*(cache_t **)(get_cache_converter_cache + 64), key, value_out, 0);
  }
  else
  {
    value_out = 0;
    v55 = a1;
  }
  cache_unlock_16227();
  v63 = (vImageConverterRef *)value_out;
  if (!value_out)
    goto LABEL_104;
  if (!v55)
    goto LABEL_100;
  v64 = v55[3];
  v65 = (_QWORD *)v55[4];
  memset(&srcFormat, 0, sizeof(srcFormat));
  memcpy(v126, (char *)value_out + 128, sizeof(v126));
  vImage_FormatFromConversionFormat((uint64_t)&srcFormat, v126, (uint64_t)v65, v66, v67, v68, v69, v70);
  memset(&destFormat, 0, sizeof(destFormat));
  memcpy(v126, v63 + 59, sizeof(v126));
  vImage_FormatFromConversionFormat((uint64_t)&destFormat, v126, v64, v71, v72, v73, v74, v75);
  v83 = *((_DWORD *)v55 + 4);
  if (v83 != 1)
  {
    if (v83 == 2)
    {
      v91 = (const CGColorConversionInfo *)CGColorConversionInfoCreateFromListInternal((const void *)v55[9], *((unsigned __int8 *)v55 + 80), v65, v78, *((_DWORD *)v55 + 21), v80, v81, v82, v64);
      v92 = vImageConverter_CreateWithCGColorConversionInfo(v91, &srcFormat, &destFormat, 0, 0x100u, 0);
      *v63 = v92;
      if (!v91)
        goto LABEL_67;
      CFRelease(v91);
    }
    else
    {
      if (v83 == 3)
      {
        v84 = vImageConverter_CreateWithCGImageFormat(&srcFormat, &destFormat, 0, 0x100u, 0);
        goto LABEL_99;
      }
      CGPostError((uint64_t)"Unknown CGCMS converter type", v76, v77, v78, v79, v80, v81, v82, v107);
    }
    v92 = *v63;
LABEL_67:
    if (!v92)
    {
LABEL_100:
      CGPostError((uint64_t)"%s failed to create vImageConverter", v56, v57, v58, v59, v60, v61, v62, (char)"CGvImageConverterInitializeShared");
      if (value_out)
      {
        CGConditionalVarPost((uint64_t)value_out + 8, v98, v99, v100, v101, v102, v103, v104);
        v105 = value_out;
      }
      else
      {
        v105 = 0;
      }
      release_and_remove_16231(key, v105);
      goto LABEL_104;
    }
    goto LABEL_68;
  }
  if (!v65)
    goto LABEL_107;
  v85 = 0;
  v86 = v65[3];
  if (*(_BYTE *)(v86 + 13) && v64)
    v85 = *(_BYTE *)(*(_QWORD *)(v64 + 24) + 13) != 0;
  v87 = *(_DWORD *)(v86 + 28);
  if (v87 == 2)
  {
    if (!v64)
      goto LABEL_107;
    v93 = *(_QWORD *)(v64 + 24);
    v94 = *(_DWORD *)(v93 + 28);
    if (v94 == 1)
    {
      v97 = *(unsigned __int8 *)(v93 + 13);
      if (cmyk_to_rgb_info_predicate != -1)
        dispatch_once(&cmyk_to_rgb_info_predicate, &__block_literal_global_20_9802);
      v89 = &cmyk_to_rgb_info_cmyk_to_rgb_extended;
      if (!v97)
        v89 = &cmyk_to_rgb_info_cmyk_to_rgb_standard;
      goto LABEL_93;
    }
    if (v94)
      goto LABEL_107;
    if (cmyk_to_gray_info_predicate != -1)
      dispatch_once(&cmyk_to_gray_info_predicate, &__block_literal_global_18_9801);
    v95 = (const CGColorConversionInfo *)cmyk_to_gray_info_cmyk_to_gray;
    goto LABEL_97;
  }
  if (v87 != 1)
  {
    if (!v87 && v64)
    {
      v88 = *(_DWORD *)(*(_QWORD *)(v64 + 24) + 28);
      if (v88 != 2)
      {
        if (v88 != 1)
          goto LABEL_107;
        if (gray_to_rgb_info_predicate != -1)
          dispatch_once(&gray_to_rgb_info_predicate, &__block_literal_global_9797);
        v89 = &gray_to_rgb_info_gray_to_rgb_extended;
        v90 = &gray_to_rgb_info_gray_to_rgb_standard;
LABEL_83:
        if (!v85)
          v89 = v90;
LABEL_93:
        v95 = (const CGColorConversionInfo *)*v89;
        goto LABEL_97;
      }
      if (gray_to_cmyk_info_predicate != -1)
        dispatch_once(&gray_to_cmyk_info_predicate, &__block_literal_global_12_9798);
      v95 = (const CGColorConversionInfo *)gray_to_cmyk_info_gray_to_cmyk;
      goto LABEL_97;
    }
LABEL_107:
    _CGHandleAssert("conversion_info_for_device_conversion", 230, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGvImageConverter.c", "info != NULL", "conversion info missing", v80, v81, v82, v107);
  }
  if (!v64)
    goto LABEL_107;
  v96 = *(_DWORD *)(*(_QWORD *)(v64 + 24) + 28);
  if (v96 != 2)
  {
    if (v96)
      goto LABEL_107;
    if (rgb_to_gray_info_predicate != -1)
      dispatch_once(&rgb_to_gray_info_predicate, &__block_literal_global_14_9799);
    v89 = &rgb_to_gray_info_rgb_to_gray_extended;
    v90 = &rgb_to_gray_info_rgb_to_gray_standard;
    goto LABEL_83;
  }
  if (rgb_to_cmyk_info_predicate != -1)
    dispatch_once(&rgb_to_cmyk_info_predicate, &__block_literal_global_16_9800);
  v95 = (const CGColorConversionInfo *)rgb_to_cmyk_info_rgb_to_cmyk;
LABEL_97:
  if (!v95)
    goto LABEL_107;
  v84 = vImageConverter_CreateWithCGColorConversionInfo(v95, &srcFormat, &destFormat, 0, 0x100u, 0);
LABEL_99:
  *v63 = v84;
  if (!v84)
    goto LABEL_100;
LABEL_68:
  if (!value_out
    || (CGConditionalVarPost((uint64_t)value_out + 8, v56, v57, v58, v59, v60, v61, v62), (v44 = value_out) == 0))
  {
LABEL_104:
    post_conversion_error((uint64_t)a2, v109, (uint64_t)"vImageConverter_Create", v58, v59, v60, v61, v62);
    return 0;
  }
  return v44;
}

uint64_t vImage_FormatFromConversionFormat(uint64_t a1, _DWORD *__src, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _BYTE __dst[304];

  *(_QWORD *)(a1 + 32) = 0;
  v8 = (char *)(__src + 10);
  if (!__src[10])
    _CGHandleAssert("vImage_FormatFromConversionFormat", 439, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGvImageConverter.c", "type != kCGImageComponentUnknown", "unknown type %d", a6, a7, a8, 0);
  *(_DWORD *)a1 = *((_QWORD *)__src + 6);
  memcpy(__dst, __src + 10, sizeof(__dst));
  *(_DWORD *)(a1 + 4) = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v12, v13, v14, v15, v16, v17, v18);
  *(_QWORD *)(a1 + 8) = a3;
  memcpy(__dst, v8, sizeof(__dst));
  result = CGBitmapPixelInfoGetCGImageBitmapInfo((uint64_t)__dst);
  *(_DWORD *)(a1 + 32) = __src[8];
  *(_QWORD *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)__src + 10);
  return result;
}

uint64_t CGBitmapPixelInfoGetCGImageBitmapInfo(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v2 = *(_DWORD *)(a1 + 24);
  if (v2 == 8)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 24);
  if (v2 == 9)
    v4 = 3;
  else
    v4 = v3;
  v5 = *(_DWORD *)(a1 + 28) | v4 | *(_DWORD *)(a1 + 32);
  if ((*(_DWORD *)a1 & 0xFFFFFFFE) == 4)
    result = v5 | 0x100;
  else
    result = v5;
  if (*(_QWORD *)(a1 + 8) == 8)
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = v2 - 1;
    if (v8 > 8)
      v9 = 0;
    else
      v9 = qword_184F7EB80[v8];
    if (v9 + v7 == 4)
      return result;
    else
      return result & 0xFFFF8FFF;
  }
  return result;
}

BOOL CGConditionalVarWait(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;

  if (!a1)
    _CGHandleAssert("CGConditionalVarWait", 43, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Utilities/CGConditionalVar.c", "cvar != NULL", "Conditional variable is NULL", a6, a7, a8, v10);
  if (pthread_mutex_lock((pthread_mutex_t *)a1))
    return 0;
  while (!*(_BYTE *)(a1 + 112))
  {
    if (pthread_cond_wait((pthread_cond_t *)(a1 + 64), (pthread_mutex_t *)a1))
      return 0;
  }
  return pthread_mutex_unlock((pthread_mutex_t *)a1) == 0;
}

void *CGBitmapPixelInfoInitialize(void *a1, char *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;

  *((_OWORD *)a2 + 17) = 0u;
  *((_OWORD *)a2 + 18) = 0u;
  *((_OWORD *)a2 + 15) = 0u;
  *((_OWORD *)a2 + 16) = 0u;
  *((_OWORD *)a2 + 13) = 0u;
  *((_OWORD *)a2 + 14) = 0u;
  *((_OWORD *)a2 + 11) = 0u;
  *((_OWORD *)a2 + 12) = 0u;
  *((_OWORD *)a2 + 9) = 0u;
  *((_OWORD *)a2 + 10) = 0u;
  *((_OWORD *)a2 + 7) = 0u;
  *((_OWORD *)a2 + 8) = 0u;
  *((_OWORD *)a2 + 5) = 0u;
  *((_OWORD *)a2 + 6) = 0u;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *(_OWORD *)a2 = 0u;
  if ((unint64_t)(a4 - 33) <= 0xFFFFFFFFFFFFFFDFLL)
    _CGHandleAssert("CGBitmapPixelInfoInitialize", 56, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGBitmapPixelInfo.c", "bits_per_component > 0 && bits_per_component <= 32", "bpc: %zu", a6, a7, a8, a4);
  *(_DWORD *)a2 = a3;
  *((_QWORD *)a2 + 1) = a4;
  *((_QWORD *)a2 + 2) = a5;
  *((_DWORD *)a2 + 6) = a6;
  *((_DWORD *)a2 + 7) = a7;
  *((_DWORD *)a2 + 8) = a8;
  if (a9)
  {
    if ((_DWORD)a6)
      v9 = a5 + 1;
    else
      v9 = a5;
    if (v9)
    {
      v10 = a2 + 56;
      v11 = (uint64_t *)(a9 + 8);
      do
      {
        *(v10 - 1) = *(v11 - 1);
        v12 = *v11;
        v11 += 2;
        *v10 = v12;
        v10 += 2;
        --v9;
      }
      while (v9);
    }
    *((_QWORD *)a2 + 5) = a2 + 48;
  }
  return memcpy(a1, a2, 0x130uLL);
}

BOOL CGColorTransformConvertRequired(_BOOL8 result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  CFTypeID v6;
  CGColorSpace *ResolvedColorSpace;
  _QWORD *Cache;
  int ConversionType;
  _QWORD v10[5];

  if (result)
  {
    v5 = (_QWORD *)result;
    v6 = CFGetTypeID((CFTypeRef)result);
    if (kCGColorTransformDefaultCMYK_block_invoke_once != -1)
      dispatch_once(&kCGColorTransformDefaultCMYK_block_invoke_once, &__block_literal_global_25_15643);
    if (v6 == CGColorTransformGetTypeID_type_id)
    {
      if (CGColorSpaceGetType(a2) - 7 >= 3)
      {
        v10[0] = MEMORY[0x1E0C809B0];
        v10[1] = 0x40000000;
        v10[2] = __create_resolved_source_space_block_invoke;
        v10[3] = &__block_descriptor_tmp_27_15656;
        v10[4] = v5;
        ResolvedColorSpace = (CGColorSpace *)CGColorSpaceCreateResolvedColorSpace(a2, (uint64_t)v10);
        Cache = CGColorTransformGetCache(v5);
        ConversionType = CGColorTransformCacheGetConversionType((uint64_t)Cache, ResolvedColorSpace, a3);
        CGColorSpaceRelease(ResolvedColorSpace);
        return ConversionType != 3;
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CGColorSpaceRef CGColorSpaceCreateDeviceGray(void)
{
  CGColorSpace *v0;

  if (CGColorSpaceCreateDeviceGray_predicate != -1)
    dispatch_once(&CGColorSpaceCreateDeviceGray_predicate, &__block_literal_global_5831);
  v0 = (CGColorSpace *)CGColorSpaceCreateDeviceGray_space;
  if (CGColorSpaceCreateDeviceGray_space)
    CFRetain((CFTypeRef)CGColorSpaceCreateDeviceGray_space);
  return v0;
}

uint64_t CGConditionalVarInit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  char v10;

  if (!a1)
    _CGHandleAssert("CGConditionalVarInit", 21, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Utilities/CGConditionalVar.c", "cvar != NULL", "Conditional variable is NULL", a6, a7, a8, v10);
  *(_BYTE *)(a1 + 112) = 0;
  result = pthread_mutex_init((pthread_mutex_t *)a1, 0);
  if (!(_DWORD)result)
    return pthread_cond_init((pthread_cond_t *)(a1 + 64), 0);
  return result;
}

uint64_t CGCMSConverterConvertGetConverterInfo(uint64_t result, CFTypeRef cf, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(result + 80) = 0;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)result = 0u;
  if (cf)
  {
    result = CFGetTypeID(cf);
    v7 = result;
    v8 = kCGCMSConverterID;
    if (!kCGCMSConverterID)
    {
      result = pthread_once(&CGCMSConverterGetTypeID_once, converter_initialize);
      v8 = kCGCMSConverterID;
    }
    if (v7 == v8)
      return (*((uint64_t (**)(CFTypeRef, uint64_t, uint64_t))cf + 8))(cf, a3, a4);
  }
  return result;
}

void icc_converter_info(size_t size@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  size_t v16;
  void *v17;
  void *v18;
  CGColorSpaceRef v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  vImage_Error *CachedCGvImageConverter;
  vImage_Error *v29;
  int v30;
  vImageConverter *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  vImagePixelCount v39;
  vImagePixelCount v40;
  vImage_Error v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  CGColorSpaceRef v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  vImageConverter *v60;
  vImagePixelCount v61;
  vImagePixelCount v62;
  vImage_Error v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE srcFormat[344];
  _BYTE __dst[344];
  vImage_Buffer dests;
  vImage_Buffer srcs;

  *(_QWORD *)(a9 + 80) = 0;
  *(_OWORD *)(a9 + 48) = 0u;
  *(_OWORD *)(a9 + 64) = 0u;
  *(_OWORD *)(a9 + 16) = 0u;
  *(_OWORD *)(a9 + 32) = 0u;
  *(_OWORD *)a9 = 0u;
  if (!a2 || !a3 || (v12 = *(_QWORD *)(a2 + 8), v12 != a3[1]) || (v13 = *(_QWORD *)(a2 + 16), v13 != a3[2]))
  {
    CGPostError((uint64_t)"%s : Unable to complete color conversion", a2, (uint64_t)a3, a4, a5, a6, a7, a8, (char)"icc_converter_info");
    return;
  }
  if (*(_BYTE *)(size + 224))
  {
    v15 = *(_QWORD *)(a2 + 56);
    if (a3[7] > v15)
      v15 = a3[7];
    v16 = 4 * (v12 + v12 * v15) * v13;
    v17 = malloc_type_calloc(1uLL, v16, 0xC5979B0AuLL);
    *(_QWORD *)(a9 + 72) = v17;
    v18 = malloc_type_calloc(1uLL, v16, 0xCD4DD5BuLL);
    *(_QWORD *)(a9 + 80) = v18;
    v19 = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceSRGB"));
    *(_DWORD *)srcFormat = *(_QWORD *)(a2 + 48);
    memcpy(__dst, (const void *)(a2 + 40), 0x130uLL);
    *(_DWORD *)&srcFormat[4] = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v20, v21, v22, v23, v24, v25, v26);
    *(_QWORD *)&srcFormat[8] = v19;
    memcpy(__dst, (const void *)(a2 + 40), 0x130uLL);
    *(_DWORD *)&srcFormat[16] = CGBitmapPixelInfoGetCGImageBitmapInfo((uint64_t)__dst);
    memset(&srcFormat[20], 0, 20);
    v27 = *(_DWORD *)(a2 + 64);
    if ((v27 & 0xFFFFFFFE) == 8)
    {
      *(_QWORD *)&__dst[32] = 0;
      *(_DWORD *)__dst = 32;
    }
    else
    {
      *(_QWORD *)&__dst[32] = 0;
      *(_DWORD *)__dst = 32;
      if (!v27)
      {
        *(_DWORD *)&__dst[4] = 96;
        v30 = 8448;
        goto LABEL_20;
      }
    }
    *(_DWORD *)&__dst[4] = 128;
    v30 = 8451;
LABEL_20:
    *(_QWORD *)&__dst[8] = v19;
    *(_DWORD *)&__dst[16] = v30;
    *(_QWORD *)&__dst[28] = 0;
    *(_QWORD *)&__dst[20] = 0;
    v31 = vImageConverter_CreateWithCGImageFormat((const vImage_CGImageFormat *)srcFormat, (const vImage_CGImageFormat *)__dst, 0, 0x100u, 0);
    *(_QWORD *)(a9 + 40) = v31;
    if (v31)
    {
      v40 = *(_QWORD *)(a2 + 8);
      v39 = *(_QWORD *)(a2 + 16);
      srcs.data = v17;
      srcs.height = v39;
      srcs.width = v40;
      srcs.rowBytes = (v40 * *(unsigned int *)&srcFormat[4]) >> 3;
      dests.data = v17;
      dests.height = v39;
      dests.width = v40;
      dests.rowBytes = (v40 * *(unsigned int *)&__dst[4]) >> 3;
      v41 = vImageConvert_AnyToAny(v31, &srcs, &dests, 0, 0x80u);
      if (v41 < 0)
        CGPostError((uint64_t)"%s vImage_buffer_size = %ld\n", v42, v43, v44, v45, v46, v47, v48, (char)"create_src_data_to_float_converter");
      else
        *(_QWORD *)(a9 + 56) = malloc_type_malloc(v41, 0xB41A9B30uLL);
    }
    v49 = colorsync_alpha_info_from_conversion_format(a2, v32, v33, v34, v35, v36, v37, v38);
    v50 = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceSRGB"));
    *(_QWORD *)&srcFormat[32] = 0;
    *(_DWORD *)srcFormat = a3[6];
    memcpy(__dst, a3 + 5, 0x130uLL);
    *(_DWORD *)&srcFormat[4] = CGBitmapPixelInfoGetBitsPerPixel((uint64_t)__dst, v51, v52, v53, v54, v55, v56, v57);
    *(_QWORD *)&srcFormat[8] = v50;
    memcpy(__dst, a3 + 5, 0x130uLL);
    *(_DWORD *)&srcFormat[16] = CGBitmapPixelInfoGetCGImageBitmapInfo((uint64_t)__dst);
    *(_OWORD *)&srcFormat[20] = 0uLL;
    *(_QWORD *)&__dst[32] = 0;
    if (v49)
      v58 = 128;
    else
      v58 = 96;
    *(_DWORD *)__dst = 32;
    *(_DWORD *)&__dst[4] = v58;
    *(_QWORD *)&__dst[8] = v50;
    if (v49)
      v59 = 8451;
    else
      v59 = 8448;
    *(_DWORD *)&__dst[16] = v59;
    *(_QWORD *)&__dst[20] = 0;
    *(_QWORD *)&__dst[28] = 0;
    v60 = vImageConverter_CreateWithCGImageFormat((const vImage_CGImageFormat *)__dst, (const vImage_CGImageFormat *)srcFormat, 0, 0x100u, 0);
    *(_QWORD *)(a9 + 48) = v60;
    if (v60)
    {
      v62 = a3[1];
      v61 = a3[2];
      srcs.data = v18;
      srcs.height = v61;
      srcs.width = v62;
      srcs.rowBytes = (v62 * *(unsigned int *)&srcFormat[4]) >> 3;
      dests.data = v18;
      dests.height = v61;
      dests.width = v62;
      dests.rowBytes = srcs.rowBytes;
      v63 = vImageConvert_AnyToAny(v60, &srcs, &dests, 0, 0x80u);
      if (v63 < 0)
        CGPostError((uint64_t)"%s vImage_buffer_size = %ld\n", v64, v65, v66, v67, v68, v69, v70, (char)"create_dst_float_to_src_converter");
      else
        *(_QWORD *)(a9 + 64) = malloc_type_malloc(v63, 0xD842DE80uLL);
    }
    return;
  }
  if (*(_DWORD *)(size + 16) != 3 && !CFEqual(*(CFTypeRef *)(size + 32), *(CFTypeRef *)(size + 24))
    || !conversion_formats_are_equal(a2, (uint64_t)a3))
  {
    CachedCGvImageConverter = (vImage_Error *)CGCMSConverterCreateCachedCGvImageConverter((_QWORD *)size, (const void *)a2, a3);
    *(_QWORD *)a9 = CachedCGvImageConverter;
    if (CachedCGvImageConverter)
    {
      v29 = CachedCGvImageConverter;
      memcpy(__dst, (const void *)a2, sizeof(__dst));
      memcpy(srcFormat, a3, sizeof(srcFormat));
      *(_QWORD *)(a9 + 16) = CGvImageConverterGetBufferSize(v29, (uint64_t)__dst, (uint64_t)srcFormat);
    }
  }
}

uint64_t CGvImageConverterGetBufferSize(vImage_Error *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  size_t v7;
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  int8x16_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  vImage_Error v25;
  uint64_t v27;
  uint64_t v28;
  vImage_Buffer dests;
  _BYTE __dst[312];
  vImage_Buffer srcs;
  _BYTE v32[304];

  v6 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 24);
  memcpy(__dst, (const void *)(a2 + 32), sizeof(__dst));
  srcs.data = v6;
  v8 = *(int8x16_t *)(a2 + 8);
  *(int8x16_t *)&srcs.height = vextq_s8(v8, v8, 8uLL);
  if (!v7)
  {
    v27 = v8.i64[0];
    memcpy(v32, &__dst[8], sizeof(v32));
    v7 = ((unint64_t)CGBitmapPixelInfoGetBitsPerPixel((uint64_t)v32, v9, v10, v11, v12, v13, v14, v15) >> 3) * v27;
  }
  srcs.rowBytes = v7;
  v16 = *(_QWORD *)(a3 + 24);
  memcpy(__dst, (const void *)(a3 + 32), sizeof(__dst));
  v17 = *(int8x16_t *)(a3 + 8);
  *(int8x16_t *)&dests.height = vextq_s8(v17, v17, 8uLL);
  if (!v16)
  {
    v28 = v17.i64[0];
    memcpy(v32, &__dst[8], sizeof(v32));
    v16 = ((unint64_t)CGBitmapPixelInfoGetBitsPerPixel((uint64_t)v32, v18, v19, v20, v21, v22, v23, v24) >> 3)
        * v28;
  }
  __dst[0] = 0;
  srcs.data = __dst;
  dests.rowBytes = v16;
  dests.data = __dst;
  v25 = *a1;
  if (*a1)
    v25 = vImageConvert_AnyToAny((const vImageConverterRef)v25, &srcs, &dests, 0, 0x80u);
  return v25 & ~(v25 >> 63);
}

void indexed_converter_info(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  char *lookup_table;
  double *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  int v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  char *v30;
  _BYTE *v31;
  char *v32;
  _BYTE *v33;
  uint64_t i;
  char v35;
  int v36;

  *(_QWORD *)(a4 + 80) = 0;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  if (*(_QWORD *)(a3 + 80)
    && ((v8 = *(_QWORD *)(a1 + 200)) == 0 || (v9 = *(_QWORD *)(v8 + 24), (*(_DWORD *)(v9 + 24) - 5) > 1)
      ? (v10 = 0)
      : (v10 = **(_QWORD **)(v9 + 88)),
        v36 = 0,
        (v11 = CGCMSConverterCreate(*(_QWORD *)(a1 + 24), v10, *(unsigned int *)(a1 + 84), *(unsigned __int8 *)(a1 + 80), *(_QWORD *)(a1 + 72), &v36)) != 0))
  {
    v16 = (const void *)v11;
    lookup_table = (char *)create_lookup_table(*(_QWORD *)(a1 + 200), v10, v11, *(const void **)(a3 + 80), v12, v13, v14, v15);
    *(_QWORD *)(a4 + 24) = lookup_table;
    CFRelease(v16);
  }
  else
  {
    lookup_table = 0;
  }
  v18 = *(double **)(a2 + 80);
  if (v18)
  {
    v19 = *(_QWORD *)(a1 + 200);
    if (v19 && (v20 = *(_QWORD *)(v19 + 24), *(_DWORD *)(v20 + 24) == 5))
      v21 = (double)*(unint64_t *)(*(_QWORD *)(v20 + 88) + 8);
    else
      v21 = 1.84467441e19;
    if (*v18 == 0.0 && v18[1] == v21)
    {
      v22 = 0;
      v23 = 0;
    }
    else if (*v18 == v21 && v18[1] == 0.0)
    {
      v22 = 1;
      v23 = 1;
    }
    else
    {
      v22 = 0;
      v23 = 2;
    }
    v24 = lookup_table;
    if (lookup_table)
    {
      if (!v22)
        goto LABEL_34;
    }
    else
    {
      v24 = *(char **)(a1 + 216);
      if (!v22)
      {
LABEL_34:
        *(_DWORD *)(a4 + 32) = v23;
        return;
      }
    }
    v25 = *(unsigned int *)(a1 + 208);
    v26 = *(_QWORD *)(a1 + 40);
    v27 = malloc_type_calloc(v26 * v25, 1uLL, 0x564D9FA9uLL);
    v28 = v27;
    if ((_DWORD)v25 && v27)
    {
      v29 = 0;
      v30 = &v24[v26 * (v25 - 1)];
      v31 = v27;
      do
      {
        v32 = v30;
        v33 = v31;
        for (i = v26; i; --i)
        {
          v35 = *v32++;
          *v33++ = v35;
        }
        ++v29;
        v31 += v26;
        v30 -= v26;
      }
      while (v29 != v25);
    }
    if (lookup_table)
      free(lookup_table);
    *(_QWORD *)(a4 + 24) = v28;
    goto LABEL_34;
  }
}

void color_finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  if ((a1 & 0x8000000000000000) == 0)
  {
    CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 24));
    v2 = *(const void **)(a1 + 32);
    if (v2)
      CFRelease(v2);
    v3 = *(const void **)(a1 + 40);
    if (v3)
      CFRelease(v3);
  }
}

void color_transform_finalize(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  const void *v22;
  char v23;

  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 40));
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 48));
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 56));
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 64));
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 72));
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 80));
  v5 = *(const void **)(a1 + 32);
  if (v5)
    CFRelease(v5);
  v6 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v6 + 40))
    _CGHandleAssert("CGColorTransformBaseCacheRelease", 174, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorTransformBase.c", "base->is_valid", "invalid", v2, v3, v4, v23);
  pthread_mutex_lock(&cacheMutex);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
    v8 = *(_QWORD *)(v7 + 16);
  else
    v8 = 0;
  v9 = (_QWORD *)base_cache;
  if (!base_cache)
    goto LABEL_20;
  v10 = *(_QWORD *)(v6 + 24);
  while (1)
  {
    v11 = *v9;
    v12 = *(_QWORD *)(*v9 + 24);
    if ((!(v10 | v12) || v10 && v12 && CFEqual((CFTypeRef)v10, (CFTypeRef)v12))
      && matches_space(*(_QWORD *)(v11 + 16), v8))
    {
      break;
    }
    v9 = (_QWORD *)v9[1];
    if (!v9)
      goto LABEL_20;
  }
  if (v11 != v6)
    _CGHandleAssert("baseCacheRelease__", 154, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorTransformBase.c", "b == base", "b: %p  base: %p", v13, v14, v15, v11);
  v16 = *(_QWORD *)(v6 + 32);
  if (!v16)
    _CGHandleAssert("baseCacheRelease__", 155, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorTransformBase.c", "b->use_count > 0", "count %zu", v13, v14, v15, 0);
  if (!*(_BYTE *)(v6 + 40))
    _CGHandleAssert("baseCacheRelease__", 156, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Color/CGColorTransformBase.c", "b->is_valid", "dictionary not valid", v13, v14, v15, v23);
  v17 = v16 - 1;
  *(_QWORD *)(v6 + 32) = v17;
  if (!v17)
  {
    base_cache = (uint64_t)x_list_remove((_QWORD *)base_cache, v6);
    pthread_mutex_unlock(&cacheMutex);
    v22 = *(const void **)(v11 + 24);
    if (v22)
      CFRelease(v22);
    CFRelease((CFTypeRef)v6);
  }
  else
  {
LABEL_20:
    pthread_mutex_unlock(&cacheMutex);
  }
  v18 = *(_QWORD *)(a1 + 88);
  v19 = *(_QWORD *)(v18 + 80);
  if (v19)
  {
    do
    {
      free(*(void **)v19);
      v19 = *(_QWORD *)(v19 + 8);
    }
    while (v19);
    v18 = *(_QWORD *)(a1 + 88);
    v20 = *(_QWORD **)(v18 + 80);
    if (v20)
    {
      do
      {
        v21 = (_QWORD *)v20[1];
        free(v20);
        v20 = v21;
      }
      while (v21);
      v18 = *(_QWORD *)(a1 + 88);
    }
  }
  pthread_mutex_destroy((pthread_mutex_t *)v18);
  free(*(void **)(a1 + 88));
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
  CFTypeID v2;

  if (space)
  {
    v2 = CFGetTypeID(space);
    if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1)
      dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_77);
    if (v2 == CGColorSpaceGetTypeID_type_id)
      CFRelease(space);
  }
}

BOOL matches_space(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1)
  {
    v2 = *(uint64_t **)(a1 + 16);
    if (v2)
    {
      v3 = v2[3];
      if (v3)
        v2 = (uint64_t *)(v3 + 56);
      else
        v2 = 0;
    }
    if (a2)
      goto LABEL_7;
LABEL_11:
    v5 = 0;
    goto LABEL_12;
  }
  v2 = 0;
  if (!a2)
    goto LABEL_11;
LABEL_7:
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
    v5 = (uint64_t *)(v4 + 56);
  else
    v5 = 0;
LABEL_12:
  if (v2 == v5)
    return 1;
  result = 0;
  if (v2 && v5)
  {
    v8 = *v2;
    v7 = v2[1];
    v10 = *v5;
    v9 = v5[1];
    return v8 == v10 && v7 == v9;
  }
  return result;
}

CGPoint CGContextGetTextPosition(CGContextRef c)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const CGPoint *v7;
  CGFloat *p_y;
  double v9;
  double x;
  CGPoint result;

  if (c && *((_DWORD *)c + 4) == 1129601108)
  {
    v7 = (const CGPoint *)((char *)c + 152);
    p_y = (CGFloat *)((char *)c + 160);
  }
  else
  {
    handle_invalid_context((char)"CGContextGetTextPosition", (uint64_t)c, v1, v2, v3, v4, v5, v6);
    v7 = &CGPointZero;
    p_y = &CGPointZero.y;
  }
  v9 = *p_y;
  x = v7->x;
  result.y = v9;
  result.x = x;
  return result;
}

uint64_t CGImageProviderGetInfo(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 56);
  return result;
}

uint64_t CGSNewEmptyRegion(_QWORD *a1)
{
  uint64_t result;

  if (!a1)
    return 1001;
  if (CGRegionGetTypeID_initOnce != -1)
    dispatch_once(&CGRegionGetTypeID_initOnce, &__block_literal_global_13431);
  result = 0;
  *a1 = &__kCGRegionEmptyRegion;
  return result;
}

double CGContextDelegateFinalize(uint64_t a1)
{
  const void *v2;
  void (*v3)(uint64_t);
  double result;

  if (a1)
  {
    v2 = *(const void **)(a1 + 16);
    if (v2)
      CFRelease(v2);
    v3 = *(void (**)(uint64_t))(a1 + 24);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
      v3(a1);
    *(_OWORD *)(a1 + 216) = xmmword_1E162C2C8;
    *(_OWORD *)(a1 + 232) = unk_1E162C2D8;
    *(_OWORD *)(a1 + 248) = xmmword_1E162C2E8;
    *(_OWORD *)(a1 + 264) = unk_1E162C2F8;
    *(_OWORD *)(a1 + 152) = xmmword_1E162C288;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)&off_1E162C298;
    *(_OWORD *)(a1 + 184) = xmmword_1E162C2A8;
    *(_OWORD *)(a1 + 200) = *(_OWORD *)&off_1E162C2B8;
    *(_OWORD *)(a1 + 88) = xmmword_1E162C248;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)&off_1E162C258;
    *(_OWORD *)(a1 + 120) = xmmword_1E162C268;
    *(_OWORD *)(a1 + 136) = *(_OWORD *)&off_1E162C278;
    *(_OWORD *)(a1 + 24) = gZombieVTable;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)&off_1E162C218;
    *(_QWORD *)&result = 6522430000;
    *(_OWORD *)(a1 + 56) = xmmword_1E162C228;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)&off_1E162C238;
    *(_QWORD *)(a1 + 288) = 0;
  }
  return result;
}

void ripc_Finalize(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t **v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  const void *v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  const void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;

  if (a1)
    v1 = *(_QWORD *)(a1 + 288);
  else
    v1 = 0;
  RIPLockCacheState();
  if (RIPGetCacheState_predicate != -1)
    dispatch_once(&RIPGetCacheState_predicate, &__block_literal_global_9_12336);
  v2 = RIPGetCacheState_cache_state;
  v3 = *(uint64_t **)(RIPGetCacheState_cache_state + 8);
  v4 = (uint64_t *)v3[1];
  if (v4 != v3)
  {
    v5 = *(_QWORD *)(v1 + 208);
    v6 = *(_QWORD *)(v5 + 16);
    do
    {
      if (!v6)
        break;
      v7 = (uint64_t *)v4[1];
      if (v4[3] == v5)
      {
        v8 = *v4;
        if (*v4 != v5)
        {
          *(_QWORD *)(v8 + 8) = v7;
          *v7 = v8;
          v9 = *(uint64_t ***)(v5 + 8);
          *v4 = v5;
          v4[1] = (uint64_t)v9;
          *(_QWORD *)(v5 + 8) = v4;
          *v9 = v4;
        }
        *(_QWORD *)(v5 + 16) = --v6;
        v11 = *(v4 - 2);
        v10 = (_QWORD *)*(v4 - 1);
        *(_QWORD *)(v11 + 8) = v10;
        *v10 = v11;
        *(v4 - 2) = (uint64_t)(v4 - 2);
        *(v4 - 1) = (uint64_t)(v4 - 2);
        --*(_QWORD *)(v4[2] + 40);
        --*(_QWORD *)(v2 + 16);
      }
      v4 = v7;
    }
    while (v7 != v3);
  }
  RIPUnlockCacheState();
  v12 = *(_QWORD **)(v1 + 208);
  v13 = (_QWORD *)v12[1];
  while (v13 != v12)
  {
    v14 = v13 - 2;
    v13 = (_QWORD *)v13[1];
    RIPCacheEntryRelease(v14);
  }
  *v12 = v12;
  v12[1] = v12;
  while (1)
  {
    v15 = *(_QWORD **)(v1 + 88);
    if (!v15)
      break;
    *(_QWORD *)(v1 + 88) = *v15;
    v16 = v15[4];
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
    v17 = (const void *)v15[1];
    if (v17)
      CFRelease(v17);
    ripc_ReleaseClipState((_QWORD **)v15 + 5);
    free(v15);
  }
  v18 = *(_DWORD **)(v1 + 56);
  if (v18)
    ripr_release(v18);
  v19 = *(_DWORD **)(v1 + 64);
  if (v19)
    ripr_release(v19);
  v20 = *(_QWORD *)(v1 + 48);
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
  v21 = *(const void **)(v1 + 16);
  if (v21)
    CFRelease(v21);
  v22 = *(const void **)(v1 + 200);
  if (v22)
    CFRelease(v22);
  v23 = *(_QWORD *)(v1 + 80);
  if (v23 && *(_QWORD *)v23)
    (*(void (**)(void))(*(_QWORD *)v23 + 24))();
  free(*(void **)(v1 + 176));
  free(*(void **)(v1 + 184));
  free(*(void **)(v1 + 192));
  ripc_ReleaseClipState((_QWORD **)(v1 + 72));
  v24 = *(_QWORD *)(v1 + 8);
  if (v24)
    CGBitmapContextInfoRelease(v24);
  free(*(void **)(v1 + 208));
  pthread_mutex_lock(&contexts_mutex);
  contexts = (uint64_t)x_list_remove((_QWORD *)contexts, v1);
  pthread_mutex_unlock(&contexts_mutex);
  free((void *)v1);
}

void context_reclaim(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v9;
  void (*v10)(uint64_t);
  uint64_t v11;

  if (!a1)
  {
    v11 = 0;
LABEL_10:
    handle_invalid_context((char)"context_reclaim", v11, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    v11 = a1;
    goto LABEL_10;
  }
  v9 = *(const void **)(a1 + 40);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v10 = *(void (**)(uint64_t))(a1 + 48);
  if (v10)
  {
    v10(a1);
    *(_QWORD *)(a1 + 48) = 0;
  }
}

void CGBitmapContextInfoRelease(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  void (*v4)(_QWORD, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1)
  {
    do
    {
      v2 = __ldxr((unsigned int *)a1);
      v3 = v2 - 1;
    }
    while (__stxr(v3, (unsigned int *)a1));
    if (!v3)
    {
      v4 = *(void (**)(_QWORD, _QWORD))(a1 + 104);
      if (v4)
        v4(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 64));
      CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 32));
      if (*(_BYTE *)(a1 + 100))
        CGBitmapFreeData(*(_QWORD *)(a1 + 64), v5, v6, v7, v8, v9, v10, v11);
      v12 = *(_QWORD *)(a1 + 120);
      if (v12)
        CGBitmapFreeData(v12, v5, v6, v7, v8, v9, v10, v11);
      free((void *)a1);
    }
  }
}

void ripc_ReleaseClipState(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    v2 = *a1;
    if (*a1)
    {
      while (1)
      {
        v3 = (uint64_t *)v2[4];
        if (v3 == v2 + 3)
          break;
        v5 = *v3;
        v4 = (_QWORD *)v3[1];
        *(_QWORD *)(v5 + 8) = v4;
        *v4 = v5;
        *v3 = (uint64_t)v3;
        v3[1] = (uint64_t)v3;
        v6 = v3[11];
        if ((unint64_t)(v6 + 1) >= 2)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
        free(v3);
      }
      (*(void (**)(_QWORD *))(v2[6] + 24))(v2 + 6);
      free(v2);
      *a1 = 0;
    }
  }
}

_QWORD *x_list_remove(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;

  v4 = result;
  if (result)
  {
    v3 = &v4;
    do
    {
      if (*result == a2)
      {
        *v3 = result[1];
        free(result);
      }
      else
      {
        v3 = result + 1;
      }
      result = (_QWORD *)*v3;
    }
    while (*v3);
    return v4;
  }
  return result;
}

void RIPUnlockCacheState()
{
  if (RIPGetCacheState_predicate != -1)
    dispatch_once(&RIPGetCacheState_predicate, &__block_literal_global_9_12336);
  os_unfair_lock_unlock((os_unfair_lock_t)RIPGetCacheState_cache_state);
}

void RIPLockCacheState()
{
  if (RIPGetCacheState_predicate != -1)
    dispatch_once(&RIPGetCacheState_predicate, &__block_literal_global_9_12336);
  os_unfair_lock_lock((os_unfair_lock_t)RIPGetCacheState_cache_state);
}

void bitmap_context_finalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108)
      CGBitmapContextInfoRelease(*(_QWORD *)(a1 + 32));
    else
      handle_invalid_context((char)"bitmap_context_finalize", a1, a3, a4, a5, a6, a7, a8);
  }
}

void ripr_release(_DWORD *a1)
{
  int v1;
  uint64_t v3;

  v1 = a1[2] - 1;
  a1[2] = v1;
  if (!v1)
  {
    if (*((_QWORD *)a1 + 2))
      ripr_Finish((uint64_t)a1);
    v3 = *((_QWORD *)a1 + 3);
    if (v3)
      (*(void (**)(char *))(v3 + 24))((char *)a1 + 24);
    free(a1);
  }
}

uint64_t CGBitmapFreeData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a1 & 0x1F) != 0)
    _CGHandleAssert("CGBitmapFreeData", 202, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/API/CGBitmapContext.c", "(uintptr_t)q % bitmap_alignment == 0", "data(%p) is unaligned", a6, a7, a8, a1);
  return munmap((void *)(a1 - *(_QWORD *)(a1 - 8)), *(_QWORD *)(a1 - 16));
}

void dlRecorder_Finalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (a1 && (v8 = *(_QWORD *)(a1 + 288)) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  else
    CGPostError((uint64_t)"%s: CGContextDelegateGetInfo() returned NULL", a2, a3, a4, a5, a6, a7, a8, (char)"dlRecorder_Finalize");
}

void CG::DisplayListRecorder::~DisplayListRecorder(CG::DisplayListRecorder *this)
{
  CG::DisplayListRecorder::~DisplayListRecorder(this);
  JUMPOUT(0x186DC23C4);
}

{
  const void *v2;
  const void *v3;

  *(_QWORD *)this = &off_1E1629018;
  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 2);
  if (v3)
    CFRelease(v3);
}

float64x2_t ripc_GetBounds(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  float64x2_t result;
  int v4;
  int64x2_t v5;
  double v6;
  __n128 v7;
  __int128 v8;

  if (a1)
    v1 = *(_QWORD *)(a1 + 288);
  else
    v1 = 0;
  v2 = *(_QWORD *)(v1 + 48);
  result = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  if (v2)
  {
    v8 = 0uLL;
    v7 = (__n128)result;
    v4 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v2 + 72))(v2, &v8);
    result = (float64x2_t)v7;
    if (v4)
    {
      (*(void (**)(_QWORD, uint64_t, __n128))(**(_QWORD **)(v1 + 48) + 88))(*(_QWORD *)(v1 + 48), v1 + 40, v7);
      v5.i64[0] = (int)v8;
      v5.i64[1] = SDWORD1(v8);
      result = vcvtq_f64_s64(v5);
      v6 = *(double *)(v1 + 40);
      if (v6 != 1.0)
        return vmulq_n_f64(result, 1.0 / v6);
    }
  }
  return result;
}

uint64_t ripc_GetRenderingState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char *v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  char v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  uint64_t *v37;
  uint64_t v38;
  BOOL v40;
  int v41;
  int v42;
  CGSize *v43;
  CGFloat *v44;
  const CGRect *v45;
  CGFloat *v46;
  uint64_t v47;
  int v48;
  _DWORD *v49;
  CGFloat v50;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  int v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t **v57;
  int v58;
  size_t v59;
  _DWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  float64x2_t v64;
  float64x2_t v65;
  const CGRect *v66;
  CGFloat *p_y;
  CGSize *p_size;
  CGFloat *p_height;
  uint64_t v70;
  uint64_t v71;
  CGFloat width;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  double v78;
  double v79;
  int *v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  int v86;
  int v87;
  int v88;
  signed int v89;
  int v90;
  int v91;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  unint64_t v98;
  uint64_t *v99;
  char *v100;
  uint64_t v101;
  uint64_t *v103;
  uint64_t v104;
  BOOL v105;
  int v106;
  const CGRect *v107;
  CGFloat *v108;
  CGFloat *v109;
  CGSize *v110;
  const CGPath *v111;
  uint64_t v112;
  uint64_t v113;
  float64x2_t v114;
  float64x2_t v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  float64_t v123;
  float64_t v124;
  __int32 RenderingIntent;
  unsigned int v126;
  int v127;
  int v128;
  uint64_t v129;
  CGPath *Path;
  _DWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __n128 v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  int v140;
  uint64_t v141;
  BOOL v142;
  CGAffineTransform *p_s2;
  CGFloat v144;
  CGFloat v145;
  CGFloat v146;
  _DWORD *v147;
  _BOOL8 v148;
  _DWORD *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t (*v160)(char *, uint64_t *);
  char *v161;
  _BOOL4 ShouldInterpolate;
  int ImageInterpolation;
  unsigned int v164;
  int *v165;
  CGContextRef v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t Delegate;
  __int128 *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  CGImage *v187;
  __int16 v188;
  dispatch_once_t v189;
  char *v190;
  double v191;
  double v192;
  float64x2_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  int v211;
  __n128 *v212;
  int v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  char *v219;
  int v220;
  uint64_t v221;
  int *v222;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  CGFloat x;
  CGFloat y;
  CGFloat v236;
  CGFloat height;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  const CGFloat *Components;
  CGColorSpaceRef ColorSpace;
  uint64_t v248;
  CGAffineTransform *v249;
  double v250;
  float v251;
  CGColorSpace *DeviceGray;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  CGColorSpaceRef v260;
  uint64_t *v261;
  uint64_t v262;
  char v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  BOOL v269;
  double v270;
  double v271;
  int v272;
  const void *v273;
  char *v274;
  unsigned int v275;
  int v276;
  unsigned int v277;
  double v278;
  double v279;
  int v280;
  unsigned int v281;
  unsigned int v282;
  float v283;
  int *v284;
  dispatch_once_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  _QWORD *v291;
  uint64_t v292;
  uint64_t v293;
  void *v294;
  float v295;
  float v296;
  void *v297;
  char *Copy;
  char *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  double v307;
  double v308;
  double v309;
  double v310;
  CGColorSpaceRef v311;
  _QWORD *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  __CFDictionary *Mutable;
  __CFDictionary *v321;
  CGColorSpaceRef v322;
  CGColorSpaceRef v323;
  __CFDictionary *v324;
  uint64_t (*v325)(double, double, double, double);
  __CFDictionary *v326;
  uint64_t v327;
  _QWORD *v328;
  void (*v329)(_QWORD *, char *, char *, _QWORD, __int128 *, uint64_t);
  _OWORD *v330;
  _OWORD *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  void (*v336)(_QWORD *, char *, char *);
  unsigned int v337;
  unsigned int v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  _QWORD *v347;
  float v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t *v352;
  uint64_t v353;
  int32x4_t v355;
  uint64_t v356;
  uint64_t v357;
  int v358;
  __int128 v359;
  __n128 v360;
  uint64_t v361;
  uint64_t v362;
  __int128 v363;
  __int128 v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  _QWORD *v370;
  int v371;
  uint64_t v372;
  uint64_t *v373;
  int v374;
  unsigned int v375;
  unint64_t ImageTransformation;
  unint64_t v377;
  unint64_t v378;
  char v379;
  CGImageRef image;
  CGImageRef imagea;
  unsigned int v382;
  unsigned int v383;
  float64x2_t v384;
  float64x2_t v385;
  int v386;
  float64x2_t v387;
  unint64_t v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  _DWORD *ClipStackData;
  unint64_t *cf;
  _QWORD *cfa;
  uint64_t v397;
  uint64_t v398;
  __n128 v399;
  uint64_t v400;
  int32x4_t v401;
  int32x4_t v402;
  __n128 v403;
  __n128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  _QWORD v408[2];
  unint64_t v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  uint64_t v413;
  uint64_t v414;
  __int128 v415;
  __int128 v416;
  _DWORD __dst[32];
  CGAffineTransform __s2;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  __int128 v425;
  _OWORD v426[2];
  _BYTE v427[112];
  __int128 v428;
  uint64_t v429;
  CGRect v430;
  CGRect v431;
  CGRect v432;
  CGRect v433;
  CGRect v434;
  CGRect v435;
  CGRect v436;
  CGRect v437;

  v4 = a1;
  v429 = *MEMORY[0x1E0C80C00];
  result = *(_QWORD *)(a1 + 48);
  if (!result)
    return result;
  v9 = *(char **)(v4 + 72);
  v10 = (unint64_t *)(v4 + 40);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 88))(result, v4 + 40);
  v11 = *(_QWORD *)(a3 + 112);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 120) + 40);
  if (v11)
  {
    v13 = *(_DWORD *)(v11 + 4);
    if (!v9)
      goto LABEL_11;
  }
  else
  {
    v13 = 0;
    if (!v9)
      goto LABEL_11;
  }
  if (v12)
    v14 = *(_DWORD *)(v12 + 16);
  else
    v14 = 0;
  if (*((_DWORD *)v9 + 1) == v14 && *(_DWORD *)v9 == v13)
    goto LABEL_413;
LABEL_11:
  cf = (unint64_t *)(v4 + 40);
  v404 = 0uLL;
  if (v12)
  {
    v15 = *(_DWORD *)(v12 + 16);
    if (v11)
      goto LABEL_13;
LABEL_16:
    v16 = 0;
    if (a2)
      goto LABEL_14;
    goto LABEL_17;
  }
  v15 = 0;
  if (!v11)
    goto LABEL_16;
LABEL_13:
  v16 = *(_DWORD *)(v11 + 4);
  if (a2)
  {
LABEL_14:
    v17 = *(_DWORD *)(a2 + 4);
    goto LABEL_20;
  }
LABEL_17:
  v18 = *(_QWORD *)(v4 + 8);
  if (v18)
    v17 = *(_DWORD *)(v18 + 96);
  else
    v17 = 3;
LABEL_20:
  v390 = v17;
  v389 = v12;
  v9 = *(char **)(v4 + 72);
  if (!v9)
  {
    v9 = (char *)malloc_type_calloc(1uLL, 0xC0uLL, 0x10E004069811642uLL);
    *((_QWORD *)v9 + 3) = v9 + 24;
    *((_QWORD *)v9 + 4) = v9 + 24;
    *(_DWORD *)v9 = ~v16;
    *((_DWORD *)v9 + 1) = ~v15;
    RIPLayerInitialize((uint64_t)(v9 + 48), v19, v20, v21, v22, v23, v24, v25);
    *((_DWORD *)v9 + 19) |= 0x80u;
    *(_QWORD *)(v4 + 72) = v9;
  }
  v393 = a4;
  v406 = 0u;
  v407 = 0u;
  v405 = 0u;
  v403 = 0uLL;
  v400 = v4;
  result = (*(uint64_t (**)(_QWORD, __n128 *))(**(_QWORD **)(v4 + 48) + 72))(*(_QWORD *)(v4 + 48), &v403);
  v29 = result;
  v30 = (uint64_t *)(v9 + 24);
  v31 = (uint64_t *)*((_QWORD *)v9 + 4);
  if (v31 == (uint64_t *)(v9 + 24))
  {
    if ((result & 1) == 0)
      goto LABEL_84;
    v391 = a3;
    v397 = a2;
    v32 = 0;
    v55 = 0;
    v36 = 0.0;
    v35 = 0.0;
    v34 = 0.0;
    v33 = 0.0;
LABEL_79:
    if (v11)
      a3 = *(_QWORD *)(v11 + 120);
    else
      LODWORD(a3) = 0;
LABEL_86:
    if (*((_DWORD *)v9 + 10) >= 0x11u)
    {
      v61 = (uint64_t *)*((_QWORD *)v9 + 3);
      RIPClipStateRemoveEntry((uint64_t)v9, v61);
      if (v32 == v61)
        v32 = 0;
    }
    result = (uint64_t)malloc_type_malloc(4 * (int)a3 + 104, 0xAA9B669uLL);
    v37 = (uint64_t *)result;
    *(_QWORD *)result = result;
    *(_QWORD *)(result + 8) = result;
    *(_DWORD *)(result + 16) = v15;
    *(_DWORD *)(result + 20) = v16;
    *(__n128 *)(result + 24) = v403;
    *(_DWORD *)(result + 96) = a3;
    if (v55)
    {
      *(CGFloat *)(result + 56) = v33;
      *(CGFloat *)(result + 64) = v34;
      *(CGFloat *)(result + 72) = v35;
      *(CGFloat *)(result + 80) = v36;
      v10 = cf;
      if ((_DWORD)a3)
        result = (uint64_t)memcpy((void *)(result + 100), v55, 4 * a3);
      if (!v32)
        goto LABEL_100;
    }
    else
    {
      if (v11)
      {
        v66 = (const CGRect *)(v11 + 16);
        p_y = (CGFloat *)(v11 + 24);
        p_size = (CGSize *)(v11 + 32);
        p_height = (CGFloat *)(v11 + 40);
      }
      else
      {
        v66 = &CGRectInfinite;
        p_height = &CGRectInfinite.size.height;
        p_y = &CGRectInfinite.origin.y;
        p_size = &CGRectInfinite.size;
      }
      v10 = cf;
      v70 = *(_QWORD *)p_height;
      v71 = *(_QWORD *)p_y;
      width = p_size->width;
      *(CGFloat *)(result + 56) = v66->origin.x;
      *(_QWORD *)(result + 64) = v71;
      *(CGFloat *)(result + 72) = width;
      *(_QWORD *)(result + 80) = v70;
      result = (uint64_t)ripc_GetClipStackData((_QWORD *)v11, a3, (_DWORD *)(result + 100), a3);
      if (!v32)
        goto LABEL_100;
    }
    v73 = v32[11];
    if (v73)
    {
      if (v73 == -1)
      {
LABEL_100:
        v37[11] = 0;
        v28 = v403;
LABEL_103:
        *(__n128 *)(v37 + 5) = v28;
        v74 = (uint64_t *)*((_QWORD *)v9 + 4);
        v75 = *v37;
        *((_QWORD *)v9 + 4) = v37;
        *v37 = (uint64_t)v30;
        *v74 = v75;
        *(_QWORD *)(v75 + 8) = v74;
        ++*((_DWORD *)v9 + 10);
        v76 = *(unsigned __int8 *)(v397 + 81);
        v78 = *((double *)v37 + 7);
        v77 = *((double *)v37 + 8);
        v79 = *((double *)v37 + 9);
        v4 = v400;
        if (v78 == -8.98846567e307
          && v77 == -8.98846567e307
          && v79 == 1.79769313e308
          && *((double *)v37 + 10) == 1.79769313e308)
        {
          ClipStackData = v55;
          v382 = 0;
          v80 = (int *)&v403;
          *((_QWORD *)&v407 + 1) = &v403;
          v28.n128_u64[0] = *v10;
        }
        else
        {
          v28.n128_u64[0] = *v10;
          v81 = *(double *)v10 * v78;
          v82 = v81 + *(double *)v10 * v79;
          v83 = -4194303.0;
          if (v81 < -4194303.0)
            v81 = -4194303.0;
          if (v82 > 4194303.0)
            v82 = 4194303.0;
          if (v81 >= v82)
            goto LABEL_133;
          v84 = v28.n128_f64[0] * v77;
          if (v84 >= -4194303.0)
            v83 = v84;
          v85 = v84 + v28.n128_f64[0] * *((double *)v37 + 10) <= 4194303.0
              ? v84 + v28.n128_f64[0] * *((double *)v37 + 10)
              : 4194303.0;
          if (v83 >= v85)
            goto LABEL_133;
          v86 = llround(v81 * 256.0);
          v87 = llround(v83 * 256.0);
          v88 = llround(v82 * 256.0);
          v89 = llround(v85 * 256.0);
          if ((signed __int32)(v403.n128_u32[0] << 8) > v86)
            v86 = v403.n128_u32[0] << 8;
          if ((signed __int32)(v403.n128_u32[1] << 8) > v87)
            v87 = v403.n128_u32[1] << 8;
          v90 = (signed __int32)((v403.n128_u32[2] + v403.n128_u32[0]) << 8) >= v88
              ? v88
              : (v403.n128_u32[2] + v403.n128_u32[0]) << 8;
          v91 = (signed __int32)((v403.n128_u32[1] + v403.n128_u32[3]) << 8) >= v89
              ? v89
              : (v403.n128_u32[1] + v403.n128_u32[3]) << 8;
          if (v86 >= v90 || v87 >= v91)
          {
LABEL_133:
            result = v37[11];
            if (result)
              result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 24))(result, v76);
            v37[11] = 0;
            v37[5] = 0;
            v37[6] = 0;
            a2 = v397;
            a3 = v391;
LABEL_404:
            if (v55 && v55 != __dst)
              free(v55);
            *((_DWORD *)v9 + 1) = *((_DWORD *)v37 + 4);
            *(_DWORD *)v9 = *((_DWORD *)v37 + 5);
            v350 = v37[11];
            *((_QWORD *)v9 + 1) = v350;
            if (v350)
            {
              if (v350 == -1)
              {
                *((_QWORD *)v9 + 1) = 0;
                *((_QWORD *)v9 + 2) = 0;
              }
              else
              {
                *((_QWORD *)v9 + 2) = v37 + 5;
              }
            }
            else
            {
              RIPLayerReplace((uint64_t)(v9 + 48), (uint64_t)(v37 + 5), 0, 0, 0, 0, v26, v27, v28);
              *((_QWORD *)v9 + 1) = v9 + 48;
              *((_QWORD *)v9 + 2) = v37 + 5;
              v4 = v400;
            }
            a4 = v393;
LABEL_413:
            v351 = *((_QWORD *)v9 + 1);
            *(_QWORD *)a4 = v351;
            if (v351)
            {
              v352 = (uint64_t *)*((_QWORD *)v9 + 2);
              v353 = v352[1];
              if ((int)v353 < 1 || (int)HIDWORD(v352[1]) < 1)
                return 0;
              v355.i64[0] = *v352;
              *(_QWORD *)(a4 + 8) = *v352;
              *(_QWORD *)(a4 + 16) = v353;
              v355.i64[1] = v353;
            }
            else
            {
              result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 48) + 72))(*(_QWORD *)(v4 + 48), a4 + 8);
              if (!(_DWORD)result)
                return result;
              v355 = *(int32x4_t *)(a4 + 8);
            }
            v356 = *(_QWORD *)(v4 + 80);
            v357 = *(_QWORD *)(*(_QWORD *)(a3 + 120) + 16);
            if (!v357)
            {
              if (v356)
              {
                if (*(_QWORD *)v356)
                {
                  v402 = v355;
                  (*(void (**)(_QWORD))(*(_QWORD *)v356 + 24))(*(_QWORD *)(v4 + 80));
                  v355 = v402;
                }
                v356 = 0;
                *(_QWORD *)(v4 + 80) = 0;
              }
              goto LABEL_443;
            }
            v358 = *(_DWORD *)(v357 + 16);
            v359 = *(_OWORD *)(a2 + 40);
            *(_OWORD *)&__s2.a = *(_OWORD *)(a2 + 24);
            *(_OWORD *)&__s2.c = v359;
            v360 = *(__n128 *)(a2 + 56);
            *(__n128 *)&__s2.tx = v360;
            v360.n128_u64[0] = *v10;
            if (*(double *)v10 != 1.0)
            {
              *(float64x2_t *)&__s2.a = vmulq_n_f64(*(float64x2_t *)&__s2.a, v360.n128_f64[0]);
              *(float64x2_t *)&__s2.c = vmulq_n_f64(*(float64x2_t *)&__s2.c, v360.n128_f64[0]);
              *(float64x2_t *)&__s2.tx = vmulq_n_f64(*(float64x2_t *)&__s2.tx, v360.n128_f64[0]);
            }
            v401 = v355;
            if (v356)
            {
              if (*(_QWORD *)(v356 + 16) == v357 && *(_DWORD *)(v356 + 24) == v358)
              {
                if ((*(_BYTE *)(v356 + 12) & 1) == 0
                  || (v399 = v360,
                      result = memcmp((const void *)(v356 + 32), &__s2, 0x30uLL),
                      v360 = v399,
                      !(_DWORD)result))
                {
                  v362 = v4;
                  goto LABEL_435;
                }
              }
              if (*(_QWORD *)v356)
              {
                result = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v356 + 24))(v356, v360);
                v360.n128_u64[0] = *v10;
              }
              *(_QWORD *)(v4 + 80) = 0;
            }
            v361 = rips_Create(v360.n128_f64[0], result, v357, (uint64_t)&__s2);
            v356 = v361;
            if (!v361)
              goto LABEL_442;
            v362 = v4;
            *(_QWORD *)(v4 + 80) = v361;
            *(_QWORD *)(v361 + 16) = v357;
            *(_DWORD *)(v361 + 24) = v358;
            v364 = *(_OWORD *)&__s2.c;
            v363 = *(_OWORD *)&__s2.tx;
            *(_OWORD *)(v361 + 32) = *(_OWORD *)&__s2.a;
            *(_OWORD *)(v361 + 48) = v364;
            *(_OWORD *)(v361 + 64) = v363;
LABEL_435:
            if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v356 + 40))(v356, a4 + 24))
            {
              v355 = vaddq_s32(*(int32x4_t *)(a4 + 24), v401);
              v4 = v362;
LABEL_443:
              *(int32x4_t *)(a4 + 24) = v355;
              *(_QWORD *)(a4 + 40) = v356;
              ripc_InitializeColorTransform(v4);
              if (a2)
              {
                v365 = *(_QWORD *)(v4 + 48);
                if (v365)
                  *(_DWORD *)(v365 + 52) = *(_DWORD *)(a2 + 4);
              }
              return 1;
            }
            v4 = v362;
LABEL_442:
            v355 = v401;
            goto LABEL_443;
          }
          ClipStackData = v55;
          v93 = ((v90 + 255) >> 8) - (v86 >> 8);
          v94 = ((v91 + 255) >> 8) - (v87 >> 8);
          v95 = ((((v90 + 255) & 0xFFFF00) - v90) << 8) | (v86 << 24) | v87 | ((((v91 + 255) & 0xFF00)
                                                                                               - v91) << 16);
          v96 = v86 >> 8;
          v97 = v87 >> 8;
          if (!*(_BYTE *)(v397 + 81))
            v95 = 0;
          v382 = v95;
          v404.n128_u64[0] = __PAIR64__(v97, v96);
          v404.n128_u64[1] = __PAIR64__(v94, v93);
          v80 = (int *)&v404;
          *((_QWORD *)&v407 + 1) = &v404;
        }
        v406 = *(_OWORD *)(v400 + 24);
        *((_QWORD *)&v405 + 1) = v28.n128_u64[0];
        if ((int)a3 >= 1)
        {
          v98 = 0;
          v99 = (uint64_t *)(v11 + 128);
          v100 = (char *)v37 + 100;
          v101 = (uint64_t)v32 + 100;
          v386 = v76;
          do
          {
            if (v32 && v98 < *((unsigned int *)v32 + 24))
            {
              if (*(_DWORD *)(v101 + 4 * v98) == *(_DWORD *)&v100[4 * v98] || v11 == 0)
                goto LABEL_215;
            }
            else if (!v11)
            {
              goto LABEL_215;
            }
            if (*(_QWORD *)(v11 + 120) > v98)
            {
              v103 = v99;
              if (*(_QWORD *)(v11 + 112) != 3)
                v103 = (uint64_t *)(*(_QWORD *)(v11 + 128) + 8 * v98);
              v104 = *v103;
              if (*v103)
              {
                v28.n128_u64[0] = 1.0;
                if (*(_BYTE *)(v104 + 8) == 2)
                  v28.n128_u64[0] = *(_QWORD *)(v104 + 32);
                *(_QWORD *)&v405 = v28.n128_u64[0];
                if ((_DWORD)v76)
                  v105 = *(_BYTE *)(v104 + 10) != 0;
                else
                  v105 = 0;
                LOBYTE(v407) = v105;
                v106 = *(unsigned __int8 *)(v104 + 8);
                switch((char)v106)
                {
                  case 0:
                    memset(&__s2, 0, 32);
                    if (*(_BYTE *)(v104 + 8))
                    {
                      v107 = &CGRectNull;
                      v108 = &CGRectNull.size.height;
                      v109 = &CGRectNull.origin.y;
                      v110 = &CGRectNull.size;
                    }
                    else
                    {
                      v107 = (const CGRect *)(v104 + 24);
                      v109 = (CGFloat *)(v104 + 32);
                      v110 = (CGSize *)(v104 + 40);
                      v108 = (CGFloat *)(v104 + 48);
                    }
                    v144 = *v108;
                    v145 = *v109;
                    v146 = v110->width;
                    __s2.a = v107->origin.x;
                    __s2.b = v145;
                    __s2.c = v146;
                    __s2.d = v144;
                    v147 = *(_DWORD **)(v4 + 56);
                    if (!v147)
                    {
                      v147 = malloc_type_calloc(1uLL, 0xB8uLL, 0x415BF41uLL);
                      *(_QWORD *)v147 = RIPRenderCreate_ripr_class;
                      v147[2] = 1;
                      *((_QWORD *)v147 + 2) = 0;
                      *(_QWORD *)(v4 + 56) = v147;
                    }
                    RIPRenderRectangles(v147, (uint64_t)&v405, &CGAffineTransformIdentity.a, &__s2.a, 1, 0);
                    goto LABEL_201;
                  case 2:
                    if (v106 == 2)
                      v111 = *(const CGPath **)(v104 + 24);
                    else
                      v111 = 0;
                    v420 = 0u;
                    v421 = 0u;
                    v419 = 0u;
                    memset(&__s2, 0, sizeof(__s2));
                    if (*(unsigned __int8 *)(v104 + 9) << 8 == 512 && (v137 = *(_QWORD *)(v104 + 16)) != 0)
                    {
                      v138 = *(_OWORD *)(v137 + 8);
                      v139 = *(_OWORD *)(v137 + 40);
                      *(_OWORD *)&__s2.c = *(_OWORD *)(v137 + 24);
                      *(_OWORD *)&__s2.tx = v139;
                      *(_OWORD *)&__s2.a = v138;
                      *(_QWORD *)&v419 = *(_QWORD *)(v137 + 56);
                      v140 = *(__int16 *)(v137 + 64);
                      DWORD2(v419) = (char)v140;
                      HIDWORD(v419) = v140 >> 8;
                      *(_QWORD *)&v420 = *(_QWORD *)(v137 + 72);
                      v141 = *(_QWORD *)(v137 + 80);
                      if (v141)
                      {
                        v421 = *(_OWORD *)(v141 + 8);
                        v141 += 24;
                      }
                      *((_QWORD *)&v420 + 1) = v141;
                      if ((_DWORD)v76)
                        v142 = *(_BYTE *)(v137 + 67) != 0;
                      else
                        v142 = 0;
                      LOBYTE(v407) = v142;
                      *(_QWORD *)&v405 = *(_QWORD *)(v137 + 88);
                      p_s2 = &__s2;
                    }
                    else
                    {
                      p_s2 = 0;
                    }
                    v149 = *(_DWORD **)(v400 + 56);
                    if (!v149)
                    {
                      v149 = malloc_type_calloc(1uLL, 0xB8uLL, 0x415BF41uLL);
                      *(_QWORD *)v149 = RIPRenderCreate_ripr_class;
                      v149[2] = 1;
                      *((_QWORD *)v149 + 2) = 0;
                      *(_QWORD *)(v400 + 56) = v149;
                    }
                    RIPRenderPath(v149, (uint64_t)&v405, v111, (uint64_t)p_s2);
                    v148 = *(unsigned __int8 *)(v104 + 9) << 8 == 256;
                    v4 = v400;
                    goto LABEL_207;
                  case 3:
                    if (v106 != 3)
                      break;
                    v112 = *(_QWORD *)(v104 + 24);
                    if (!v112)
                      break;
                    v113 = *(_QWORD *)(v112 + 56);
                    if (!v113)
                      goto LABEL_250;
                    v411 = 0;
                    v412 = 0;
                    image = (CGImageRef)v113;
                    if ((ripc_GetImageSize(v113, &v412, &v411) & 1) == 0)
                      goto LABEL_250;
                    v377 = v412;
                    v378 = v411;
                    v409 = v411;
                    v410 = v412;
                    v423 = 0u;
                    v424 = 0u;
                    v422 = 0u;
                    v114 = *(float64x2_t *)(v112 + 8);
                    v115 = *(float64x2_t *)(v112 + 40);
                    v423 = *(float64x2_t *)(v112 + 24);
                    v424 = v115;
                    v116 = *(double *)cf;
                    _ZF = *(double *)cf == 1.0;
                    v422 = v114;
                    if (!_ZF)
                    {
                      v422 = vmulq_n_f64(v422, v116);
                      v423 = vmulq_n_f64(v423, v116);
                      v424 = vmulq_n_f64(v424, v116);
                    }
                    v117 = *(double *)(v112 + 64);
                    v118 = *(double *)(v112 + 72);
                    v119 = *(double *)(v112 + 80);
                    v120 = *(double *)(v112 + 88);
                    if (v119 < 0.0 || v120 < 0.0)
                      *(CGRect *)&v117 = CGRectStandardize(*(CGRect *)&v117);
                    v121 = v120 * v423.f64[0] + v422.f64[0] * 0.0;
                    v122 = v120 * v423.f64[1] + v422.f64[1] * 0.0;
                    v123 = v424.f64[0] + v423.f64[0] * v118 + v117 * v422.f64[0];
                    v124 = v423.f64[1] * v118 + v117 * v422.f64[1];
                    v422.f64[0] = v423.f64[0] * 0.0 + v119 * v422.f64[0];
                    v422.f64[1] = v423.f64[1] * 0.0 + v119 * v422.f64[1];
                    v423.f64[0] = v121;
                    v423.f64[1] = v122;
                    v424.f64[0] = v123;
                    v424.f64[1] = v124 + v424.f64[1];
                    v415 = 0uLL;
                    v413 = 0;
                    v414 = 0;
                    v408[0] = 0;
                    v408[1] = 0;
                    ImageTransformation = ripc_GetImageTransformation(image, v80, v377, v378, 0, v422.f64, (uint64_t)&v415, (int *)&v413, (uint64_t)v408);
                    if (!ImageTransformation)
                      goto LABEL_250;
                    RenderingIntent = CGImageGetRenderingIntent(image);
                    if (!RenderingIntent)
                    {
                      v126 = *(_DWORD *)(*(_QWORD *)(v391 + 120) + 4);
                      v127 = v126 << 12;
                      if (((v126 >> 20) & 0xF) != 0)
                        v128 = v126 << 8;
                      else
                        v128 = v126 << 12;
                      if (!(v128 >> 28))
                        v128 = v127;
                      RenderingIntent = v128 >> 28;
                    }
                    v375 = RenderingIntent;
                    if (ImageTransformation >= 4)
                    {
                      ShouldInterpolate = CGImageGetShouldInterpolate(image);
                      ImageInterpolation = ripc_GetImageInterpolation(v397, *(_DWORD *)(*(_QWORD *)(v391 + 120) + 4), ShouldInterpolate);
                      v374 = ImageInterpolation;
                      if (ImageInterpolation >= 3)
                      {
                        v164 = ImageInterpolation;
                        if ((ImageTransformation & 2) != 0)
                          v165 = 0;
                        else
                          v165 = (int *)&v415;
                        if (ripc_GetImageInterpolationSize(v422.f64, (int64_t *)&v410, &v409, v165))v129 = v164;
                        else
                          v129 = 1;
                      }
                      else
                      {
                        v129 = 1;
                      }
                    }
                    else
                    {
                      v129 = 1;
                      v374 = 1;
                    }
                    v166 = CGBitmapContextCreateWithData(0, v377, v378, 8uLL, 0, 0, 7u, 0, 0);
                    CGContextErase((uint64_t)v166, v167, v168, v169, v170, v171, v172, v173);
                    Delegate = CGContextGetDelegate((uint64_t)v166, v174, v175, v176, v177, v178, v179, v180);
                    if (Delegate)
                      Delegate = *(_QWORD *)(Delegate + 288);
                    if ((ImageTransformation & 2) != 0)
                      v182 = 0;
                    else
                      v182 = &v415;
                    v187 = (CGImage *)ripc_AcquireRIPImageData(Delegate, image, v410, v409, (uint64_t)v182, 0, v129, v375);
                    if (v166)
                      CFRelease(v166);
                    if (!v187)
                      goto LABEL_250;
                    if (*(_BYTE *)(v397 + 81) && (*(_BYTE *)(*(_QWORD *)(v391 + 120) + 7) & 1) != 0)
                      v188 = *(_WORD *)(v4 + 108) | 0xFF00;
                    else
                      v188 = *(unsigned __int8 *)(v4 + 108);
                    *(_WORD *)(v4 + 108) = v188;
                    *(_WORD *)(v4 + 108) = v188 & 0xFF00 | *(unsigned __int8 *)(v397 + 82);
                    *(_DWORD *)(v4 + 112) = (int)(*(_DWORD *)(*(_QWORD *)(v391 + 120) + 4) << 12) >> 28;
                    imagea = v187;
                    if (*((_QWORD *)v187 + 4) && !*((_QWORD *)v187 + 11))
                      v189 = RIPGetDepthForLayerFormat(1u, v183, v184, v185, v186, v63, v26, v27);
                    else
                      v189 = 0;
                    v190 = RIPLayerCreate((uint64_t)RIPLayer_ripl_class, (uint64_t)v408, 0, v189, *(unsigned int *)(v397 + 4), v63, v26, v27);
                    if (!v190)
                    {
                      ripc_ReleaseRIPImageData(imagea);
LABEL_250:
                      v157 = RIPLayerCreate((uint64_t)RIPLayer_ripl_class, 0, 0, 0, v390, v63, v26, v27);
                      goto LABEL_212;
                    }
                    v157 = v190;
                    *(_QWORD *)&v419 = 0;
                    memset(&__s2, 0, sizeof(__s2));
                    *(_DWORD *)(v4 + 104) = 1;
                    if (ImageTransformation >= 4)
                      v193 = &v422;
                    else
                      v193 = 0;
                    *(_QWORD *)(v4 + 152) = 0x3FF0000000000000;
                    ripc_InitializeImage((uint64_t)&__s2, (uint64_t)&v413, (double *)imagea, v374, v377, v378, v193->f64, 0, 0.0, v191, v192);
                    RIPLayerBltImage((uint64_t)v157, 0, (uint64_t)v408, (uint64_t)&__s2, v400 + 104, v194, v195, v196);
                    if (v189)
                      RIPLayerCoverage((uint64_t)v157, v197, v198, v199, v200, v201, v202, v203);
                    ripc_ReleaseRIPImageData(imagea);
                    v210 = (_QWORD *)v37[11];
                    if (v210)
                    {
                      RIPLayerIntersect(v157, v210, v204, v205, v206, v207, v208, v209);
LABEL_212:
                      v159 = v37[11];
                      if (v159)
                        (*(void (**)(uint64_t))(*(_QWORD *)v159 + 24))(v159);
                    }
                    v37[11] = (uint64_t)v157;
                    v160 = *(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)v157 + 72);
                    v161 = v157;
                    v80 = (int *)(v37 + 5);
                    result = v160(v161, v37 + 5);
                    *((_QWORD *)&v407 + 1) = v37 + 5;
                    LODWORD(v76) = v386;
                    v100 = (char *)v37 + 100;
                    v101 = (uint64_t)v32 + 100;
                    break;
                  case 4:
                    if (v106 != 4)
                      break;
                    result = *(_QWORD *)(v104 + 24);
                    if (!result)
                      break;
                    Path = CGTextClippingCreatePath(result);
                    v131 = *(_DWORD **)(v4 + 56);
                    if (!v131)
                    {
                      v131 = malloc_type_calloc(1uLL, 0xB8uLL, 0x415BF41uLL);
                      *(_QWORD *)v131 = RIPRenderCreate_ripr_class;
                      v131[2] = 1;
                      *((_QWORD *)v131 + 2) = 0;
                      *(_QWORD *)(v4 + 56) = v131;
                    }
                    RIPRenderPath(v131, (uint64_t)&v405, Path, 0);
                    if (Path)
                      CFRelease(Path);
LABEL_201:
                    v148 = 0;
LABEL_207:
                    v150 = RIPRenderCoverage(*(_QWORD *)(v4 + 56), 0, *((int **)&v407 + 1), v148, v132, v133, v134, v135, v136);
                    if (v150)
                    {
                      v157 = v150;
                      v158 = (_QWORD *)v37[11];
                      if (v158)
                        RIPLayerIntersect(v150, v158, v151, v152, v153, v154, v155, v156);
                    }
                    else
                    {
                      v157 = RIPLayerCreate((uint64_t)RIPLayer_ripl_class, 0, 0, 0, v390, v154, v155, v156);
                    }
                    ripr_Finish(*(_QWORD *)(v4 + 56));
                    goto LABEL_212;
                  default:
                    break;
                }
              }
            }
LABEL_215:
            ++v98;
            ++v99;
          }
          while (a3 != v98);
        }
        if (v382)
        {
          result = v37[11];
          v10 = cf;
          a2 = v397;
          a3 = v391;
          if (!result)
          {
            result = (uint64_t)RIPLayerCreateWithData((uint64_t *)&v404, 0, 0, 0, 0, v382, 0, v390);
            v37[11] = result;
            v28 = v404;
            *(__n128 *)(v37 + 5) = v404;
            goto LABEL_272;
          }
          v212 = (__n128 *)(v37 + 5);
          v211 = *((_DWORD *)v37 + 10);
          if (v211 <= v404.n128_i32[0]
            || (v213 = *((_DWORD *)v37 + 11), v213 <= v404.n128_i32[1])
            || *((_DWORD *)v37 + 12) + v211 >= (signed __int32)(v404.n128_u32[2] + v404.n128_u32[0])
            || *((_DWORD *)v37 + 13) + v213 >= (signed __int32)(v404.n128_u32[3] + v404.n128_u32[1]))
          {
            v214 = v382;
LABEL_258:
            v218 = RIPLayerClip(result, (signed int *)&v404, v214, v390, v62, v382, v26, v27);
            if (!v218)
              v218 = RIPLayerCreate((uint64_t)RIPLayer_ripl_class, 0, 0, 0, v390, v215, v216, v217);
            v219 = (char *)v37[11];
            if (v218 != v219 && v219)
              (*(void (**)(char *))(*(_QWORD *)v219 + 24))(v219);
            v37[11] = (uint64_t)v218;
            result = (*(uint64_t (**)(char *, __n128 *))(*(_QWORD *)v218 + 72))(v218, v212);
            v4 = v400;
          }
        }
        else
        {
          v10 = cf;
          a2 = v397;
          a3 = v391;
          if (v80 == (int *)&v404)
          {
            result = v37[11];
            v212 = (__n128 *)(v37 + 5);
            if (!result)
            {
              v28 = v404;
              *v212 = v404;
              goto LABEL_272;
            }
            if ((signed __int32)v212->n128_u32[0] < v404.n128_i32[0]
              || (v220 = *((_DWORD *)v37 + 11), v220 < v404.n128_i32[1])
              || (signed __int32)(*((_DWORD *)v37 + 12) + v212->n128_u32[0]) > (signed __int32)(v404.n128_u32[2]
                                                                                              + v404.n128_u32[0])
              || *((_DWORD *)v37 + 13) + v220 > (signed __int32)(v404.n128_u32[3] + v404.n128_u32[1]))
            {
              v214 = 0;
              goto LABEL_258;
            }
          }
        }
LABEL_272:
        v221 = v389;
        if (!v389 || *((int *)v37 + 12) < 1 || *((int *)v37 + 13) < 1)
        {
LABEL_401:
          v349 = v37[11];
          if (v349)
          {
            *(_DWORD *)(v349 + 28) |= 0x80u;
LABEL_403:
            v55 = ClipStackData;
          }
          else
          {
            v55 = ClipStackData;
            if (*((__n128 **)&v407 + 1) == &v403)
              v37[11] = -1;
          }
          goto LABEL_404;
        }
        LODWORD(v410) = 1065353216;
        v222 = (int *)*((_QWORD *)&v407 + 1);
        v415 = 0u;
        v416 = 0u;
        v413 = 0;
        v414 = 0;
        LODWORD(v408[0]) = 0;
        v64.f64[0] = *(float64_t *)(v4 + 40);
        v65.f64[0] = 1.0;
        __asm { FMOV            V5.2D, #1.0 }
        v227 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vceqq_f64(v64, v65)).i64[0], 0), (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v64.f64[0], 0), _Q5);
        v228 = vmulq_f64(*(float64x2_t *)(v389 + 24), v227);
        v229 = vmulq_f64(*(float64x2_t *)(v389 + 40), v227);
        v230 = vmulq_f64(*(float64x2_t *)(v389 + 56), v227);
        v231 = *(_QWORD *)(v389 + 72);
        v232 = *(_QWORD *)(v389 + 80);
        v233 = *(_QWORD *)(v389 + 88);
        v227.f64[0] = *(float64_t *)(v389 + 96);
        v385 = v229;
        v387 = v228;
        *(float64x2_t *)&__s2.a = v228;
        *(float64x2_t *)&__s2.c = v229;
        v384 = v230;
        *(float64x2_t *)&__s2.tx = v230;
        v432 = CGRectApplyAffineTransform(*(CGRect *)((char *)&v227 - 24), &__s2);
        x = v432.origin.x;
        y = v432.origin.y;
        v236 = v432.size.width;
        height = v432.size.height;
        v238 = *(_QWORD *)(v389 + 104);
        v388 = v238;
        if (v238)
        {
          Components = CGColorGetComponents((CGColorRef)v238);
          if ((v238 & 0x8000000000000000) != 0)
            ColorSpace = CGTaggedColorGetColorSpace(v238, v239, v240, v241, v242, v243, v244, v245);
          else
            ColorSpace = *(CGColorSpaceRef *)(v238 + 24);
          if (ColorSpace)
          {
            v248 = *(_QWORD *)(*((_QWORD *)ColorSpace + 3) + 40);
            if (v248)
            {
              v249 = &__s2;
              do
              {
                v250 = *Components++;
                v251 = v250;
                *(float *)&v249->a = v251;
                v249 = (CGAffineTransform *)((char *)v249 + 4);
                --v248;
              }
              while (v248);
            }
          }
          DeviceGray = CGColorSpaceCreateDeviceGray();
          cfa = (_QWORD *)color_transform_create(DeviceGray, 0);
          CGColorSpaceRelease(DeviceGray);
          if ((v238 & 0x8000000000000000) != 0)
            v260 = CGTaggedColorGetColorSpace(v238, v253, v254, v255, v256, v257, v258, v259);
          else
            v260 = *(CGColorSpaceRef *)(v238 + 24);
          v4 = v400;
          v221 = v389;
          CGColorTransformConvertColorFloatComponents(cfa, v260, 0, (uint64_t)&__s2, (float *)v408, 1);
        }
        else
        {
          cfa = 0;
          LODWORD(v408[0]) = 0;
        }
        v392 = a3;
        v261 = v37 + 5;
        v262 = *(_QWORD *)(v221 + 112);
        if (!v262 || *(double (**)(uint64_t, double *, _QWORD *))(v262 + 72) == evaluate_identity)
        {
          v262 = 0;
          LODWORD(v410) = v408[0];
          v263 = 1;
        }
        else
        {
          function_evaluate_float(*(_QWORD *)(v221 + 112), (float *)v408, (float *)&v410, (__n128)v432.origin);
          v263 = 0;
        }
        v437.origin.x = (double)*v222;
        v437.origin.y = (double)v222[1];
        v437.size.width = (double)v222[2];
        v437.size.height = (double)v222[3];
        v433.origin.x = x;
        v433.origin.y = y;
        v433.size.width = v236;
        v433.size.height = height;
        *(CGRect *)v28.n128_u64 = CGRectIntersection(v433, v437);
        *(_QWORD *)&v415 = v28.n128_u64[0];
        *((_QWORD *)&v415 + 1) = *(_QWORD *)&v434.origin.y;
        *(CGFloat *)&v416 = v434.size.width;
        *((_QWORD *)&v416 + 1) = *(_QWORD *)&v434.size.height;
        v269 = v28.n128_f64[0] == INFINITY || v434.origin.y == INFINITY;
        if (v269 || v434.size.width == 0.0 || v434.size.height == 0.0)
        {
          v273 = cfa;
          if (!cfa)
          {
            a3 = v392;
            goto LABEL_394;
          }
          v274 = 0;
          a3 = v392;
LABEL_390:
          CFRelease(v273);
LABEL_391:
          if (v274)
          {
            v347 = (_QWORD *)v37[11];
            if (!v347)
            {
LABEL_399:
              v37[11] = (uint64_t)v274;
              result = (*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)v274 + 72))(v274, v261);
LABEL_400:
              *((_QWORD *)&v407 + 1) = v261;
              goto LABEL_401;
            }
            RIPLayerIntersect(v274, v347, v288, v289, v290, v268, v26, v27);
            goto LABEL_396;
          }
LABEL_394:
          v348 = *(float *)&v410;
          if (*(float *)&v410 >= 0.0039062)
          {
            v28.n128_u32[0] = 1065287680;
            if (*(float *)&v410 >= 0.99609)
              goto LABEL_400;
            v366 = a2;
            v370 = malloc_type_malloc(0xA0uLL, 0x106004074580882uLL);
            *v370 = &ripc_class;
            v370[1] = 0;
            v370[2] = 0;
            v370[3] = 0x3F80000000000000;
            *((_DWORD *)v370 + 39) = 1065353216;
            *(double *)(v4 + 152) = v348;
            v274 = (char *)v37[11];
            if (v274)
            {
              v371 = 7;
            }
            else
            {
              v274 = RIPLayerCreate((uint64_t)RIPLayer_ripl_class, *((uint64_t *)&v407 + 1), 0, 0, v390, v367, v368, v369);
              v371 = 1;
            }
            *(_DWORD *)(v4 + 104) = v371;
            RIPLayerBltShape((int *)v274, 0, 0, 0, (uint64_t)v370, 0, v4 + 104, v369);
            free(v370);
            result = v37[11];
            a2 = v366;
            a3 = v392;
            if (v274 == (char *)result)
              goto LABEL_400;
            goto LABEL_397;
          }
          v274 = RIPLayerCreate((uint64_t)RIPLayer_ripl_class, 0, 0, 0, v390, v268, v26, v27);
LABEL_396:
          result = v37[11];
LABEL_397:
          if (result)
            (*(void (**)(uint64_t))(*(_QWORD *)result + 24))(result);
          goto LABEL_399;
        }
        v270 = v28.n128_f64[0] + v434.size.width;
        v271 = v28.n128_f64[0] + 0.0;
        if (v28.n128_f64[0] + 0.0 <= 1073741820.0)
        {
          v275 = vcvtmd_s64_f64(v271);
          if (v271 >= -1073741820.0)
            v272 = v275;
          else
            v272 = -1073741823;
        }
        else
        {
          v272 = 0x3FFFFFFF;
        }
        LODWORD(v413) = v272;
        if (v270 <= 1073741820.0)
        {
          v277 = vcvtpd_s64_f64(v270);
          if (v270 >= -1073741820.0)
            v276 = v277;
          else
            v276 = -1073741823;
        }
        else
        {
          v276 = 0x3FFFFFFF;
        }
        LODWORD(v414) = v276 - v272;
        v278 = v434.origin.y + v434.size.height;
        v279 = v434.origin.y + 0.0;
        if (v279 <= 1073741820.0)
        {
          v281 = vcvtmd_s64_f64(v279);
          if (v279 >= -1073741820.0)
            v280 = v281;
          else
            v280 = -1073741823;
        }
        else
        {
          v280 = 0x3FFFFFFF;
        }
        HIDWORD(v413) = v280;
        if (v278 <= 1073741820.0)
        {
          if (v278 >= -1073741820.0)
            v282 = vcvtpd_s64_f64(v278);
          else
            v282 = -1073741823;
        }
        else
        {
          v282 = 0x3FFFFFFF;
        }
        HIDWORD(v414) = v282 - v280;
        v283 = *(float *)&v410;
        if (*(float *)&v410 < 0.0039062)
          v284 = (int *)&v413;
        else
          v284 = v222;
        v273 = cfa;
        if (cfa)
          v285 = RIPGetDepthForLayerFormat(1u, v264, v265, v266, v267, v268, v26, v27);
        else
          v285 = 0;
        v286 = *(_QWORD *)(v4 + 8);
        if (v286)
          v287 = *(unsigned int *)(v286 + 96);
        else
          v287 = 3;
        result = (uint64_t)RIPLayerCreate((uint64_t)RIPLayer_ripl_class, (uint64_t)v284, 16, v285, v287, v268, v26, v27);
        v274 = (char *)result;
        if (!result)
        {
LABEL_389:
          a3 = v392;
          if (!v273)
            goto LABEL_391;
          goto LABEL_390;
        }
        memset(&v427[16], 0, 96);
        v428 = 0u;
        *(_OWORD *)v427 = 0u;
        v424 = 0u;
        v425 = 0u;
        v422 = 0u;
        v423 = 0u;
        *(_OWORD *)&v427[24] = *(_OWORD *)(v4 + 120);
        *(_OWORD *)&v427[40] = *(_OWORD *)(v4 + 136);
        *(_OWORD *)&v427[56] = *(_OWORD *)(v4 + 152);
        *(_QWORD *)&v427[72] = *(_QWORD *)(v4 + 168);
        *(_OWORD *)&v427[8] = *(_OWORD *)(v4 + 104);
        v423.f64[0] = *(float64_t *)(v4 + 16);
        v424.f64[1] = *(float64_t *)(v4 + 40);
        v425 = *(_OWORD *)(v4 + 48);
        memset(v426, 0, sizeof(v426));
        *(_QWORD *)&v426[0] = *(_QWORD *)(v4 + 64);
        *(_OWORD *)(v4 + 56) = 0u;
        *(_OWORD *)((char *)v426 + 8) = *(_OWORD *)(v4 + 72);
        *(_OWORD *)(v4 + 72) = 0u;
        DWORD2(v428) = *(_DWORD *)(v4 + 216);
        *(_DWORD *)(v4 + 216) = 1;
        *(_QWORD *)(v4 + 40) = 0x3FF0000000000000;
        *(_QWORD *)(v4 + 48) = result;
        if (v283 >= 0.0039062 && *(_QWORD *)(result + 20) != v414)
        {
          v291 = malloc_type_malloc(0xA0uLL, 0x106004074580882uLL);
          v293 = a2;
          v294 = v291;
          v291[1] = 0;
          v291[2] = 0;
          *v291 = &ripc_class;
          *((_DWORD *)v291 + 6) = 0;
          v295 = 1.0;
          if (cfa)
            v296 = v283;
          else
            v296 = 1.0;
          if (!cfa)
            v295 = v283;
          *((float *)v291 + 7) = v296;
          *((float *)v291 + 39) = v295;
          *(_DWORD *)(v400 + 104) = 1;
          *(_QWORD *)(v400 + 152) = 0x3FF0000000000000;
          v4 = v400;
          RIPLayerBltShape((int *)v274, 0, 0, 0, (uint64_t)v291, 0, v400 + 104, v292);
          v297 = v294;
          a2 = v293;
          v273 = cfa;
          free(v297);
        }
        v398 = a2;
        Copy = CGRenderingStateCreateCopy(a2);
        *(CGAffineTransform *)(Copy + 24) = CGAffineTransformIdentity;
        v299 = CGGStateCreateCopy(v392);
        CGGStateResetClip((uint64_t)v299);
        if (*(double *)(*((_QWORD *)v299 + 15) + 8) != 1.0)
        {
          maybeCopyRenderingState((uint64_t)v299);
          *(_QWORD *)(*((_QWORD *)v299 + 15) + 8) = 0x3FF0000000000000;
        }
        CGGStateSetStyle((uint64_t)v299, 0);
        CGGStateSetSoftMask((uint64_t)v299, 0);
        *(CGAffineTransform *)(v299 + 24) = CGAffineTransformIdentity;
        CGGStateSetCompositeOperation((uint64_t)v299, 1);
        v379 = v263;
        if (v273)
        {
          *(_QWORD *)(v4 + 16) = v273;
          v307 = (double)(int)v413;
          v308 = (double)SHIDWORD(v413);
          v309 = (double)(int)v414;
          v310 = (double)SHIDWORD(v414);
          *(double *)&v415 = (double)(int)v413;
          *((double *)&v415 + 1) = (double)SHIDWORD(v413);
          *(double *)&v416 = (double)(int)v414;
          *((double *)&v416 + 1) = (double)SHIDWORD(v414);
          if (v388)
          {
            if ((v388 & 0x8000000000000000) != 0)
              v311 = CGTaggedColorGetColorSpace(v388, v300, v301, v302, v303, v304, v305, v306);
            else
              v311 = *(CGColorSpaceRef *)(v388 + 24);
          }
          else
          {
            v311 = 0;
          }
          if (CGColorTransformConvertRequired((_BOOL8)v273, v311, 0))
          {
            Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (v388)
            {
              if ((v388 & 0x8000000000000000) != 0)
              {
                v321 = Mutable;
                v322 = CGTaggedColorGetColorSpace(v388, v313, v314, v315, v316, v317, v318, v319);
                Mutable = v321;
                v323 = v322;
              }
              else
              {
                v323 = *(CGColorSpaceRef *)(v388 + 24);
              }
              if (Mutable && v323)
              {
                v324 = Mutable;
                CFDictionarySetValue(Mutable, CFSTR("kCGContextColorSpace"), v323);
                Mutable = v324;
              }
            }
            if (*(_QWORD *)v4
              && (v325 = *(uint64_t (**)(double, double, double, double))(*(_QWORD *)v4 + 192)) != 0)
            {
              v326 = Mutable;
              v327 = v325(v307, v308, v309, v310);
              Mutable = v326;
              v328 = (_QWORD *)v327;
            }
            else
            {
              v328 = 0;
            }
            if (Mutable)
              CFRelease(Mutable);
            CGGStateSetFillColor((uint64_t)v299, (void *)v388);
            v312 = v328;
            if (v328)
              goto LABEL_368;
          }
          else
          {
            CGGStateSetFillColor((uint64_t)v299, (void *)v388);
          }
          v312 = 0;
          v328 = *(_QWORD **)v4;
          if (*(_QWORD *)v4)
          {
LABEL_368:
            v329 = (void (*)(_QWORD *, char *, char *, _QWORD, __int128 *, uint64_t))v328[8];
            if (v329)
              v329(v328, Copy, v299, 0, &v415, 1);
          }
        }
        else
        {
          v312 = 0;
          *(_QWORD *)(v4 + 16) = *(_QWORD *)(v4 + 200);
        }
        v330 = Copy + 24;
        v331 = v299 + 24;
        CGGStateSetFillColor((uint64_t)v299, 0);
        CGGStateSetStrokeColor((uint64_t)v299, 0);
        CGGStateSetCompositeOperation((uint64_t)v299, 2);
        *(float64x2_t *)(Copy + 24) = v387;
        *(float64x2_t *)(Copy + 40) = v385;
        *(float64x2_t *)(Copy + 56) = v384;
        *(float64x2_t *)(v299 + 24) = v387;
        *(float64x2_t *)(v299 + 40) = v385;
        *(float64x2_t *)(v299 + 56) = v384;
        if (v312)
        {
          CGSoftMaskDelegateDrawSoftMask(v312, (uint64_t)Copy, (uint64_t)v299, v389, v332, v333, v334, v335);
          *v331 = *(_OWORD *)&CGAffineTransformIdentity.a;
          *(_OWORD *)(v299 + 40) = *(_OWORD *)&CGAffineTransformIdentity.c;
          *(_OWORD *)(v299 + 56) = *(_OWORD *)&CGAffineTransformIdentity.tx;
          *v330 = *(_OWORD *)&CGAffineTransformIdentity.a;
          *(_OWORD *)(Copy + 40) = *(_OWORD *)&CGAffineTransformIdentity.c;
          *(_OWORD *)(Copy + 56) = *(_OWORD *)&CGAffineTransformIdentity.tx;
          CGGStateSetCompositeOperation((uint64_t)v299, 1);
          v336 = (void (*)(_QWORD *, char *, char *))v312[25];
          if (v336)
            v336(v312, Copy, v299);
        }
        else
        {
          CGSoftMaskDelegateDrawSoftMask(*(const void **)v400, (uint64_t)Copy, (uint64_t)v299, v389, v332, v333, v334, v335);
          *v331 = *(_OWORD *)&CGAffineTransformIdentity.a;
          *(_OWORD *)(v299 + 40) = *(_OWORD *)&CGAffineTransformIdentity.c;
          *(_OWORD *)(v299 + 56) = *(_OWORD *)&CGAffineTransformIdentity.tx;
          *v330 = *(_OWORD *)&CGAffineTransformIdentity.a;
          *(_OWORD *)(Copy + 40) = *(_OWORD *)&CGAffineTransformIdentity.c;
          *(_OWORD *)(Copy + 56) = *(_OWORD *)&CGAffineTransformIdentity.tx;
        }
        CGGStateRelease((uint64_t)v299);
        v273 = cfa;
        do
        {
          v337 = __ldxr((unsigned int *)Copy);
          v338 = v337 - 1;
        }
        while (__stxr(v338, (unsigned int *)Copy));
        a2 = v398;
        v4 = v400;
        if (!v338)
          free(Copy);
        ripc_ContextRestore(v400, (uint64_t)&v422);
        *(_DWORD *)(v400 + 216) = DWORD2(v428);
        if (cfa)
          result = RIPLayerCoverage((uint64_t)v274, v339, v288, v289, v290, v268, v26, v27);
        v261 = v37 + 5;
        if ((v379 & 1) == 0)
        {
          v340 = 0;
          LODWORD(v411) = 0;
          do
          {
            v28.n128_f32[0] = (float)v340 / 255.0;
            *(float *)&v412 = v28.n128_f32[0];
            function_evaluate_float(v262, (float *)&v412, (float *)&v411, v28);
            if (*(float *)&v411 >= 0.0)
            {
              if (*(float *)&v411 <= 1.0)
              {
                v28.n128_f64[0] = (float)(*(float *)&v411 * 255.0) + 0.5;
                v346 = (int)v28.n128_f64[0];
              }
              else
              {
                LOBYTE(v346) = -1;
              }
            }
            else
            {
              LOBYTE(v346) = 0;
            }
            *((_BYTE *)&__s2.a + v340++) = v346;
          }
          while (v340 != 256);
          result = RIPLayerTransfer((uint64_t)v274, (int *)&v413, (uint64_t)&__s2, v341, v342, v343, v344, v345);
          v4 = v400;
          v273 = cfa;
        }
        goto LABEL_389;
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 16))(v32[11]);
    }
    v37[11] = v73;
    v28 = *(__n128 *)(v32 + 5);
    v403 = v28;
    goto LABEL_103;
  }
  v391 = a3;
  v397 = a2;
  ClipStackData = 0;
  v32 = 0;
  v33 = 0.0;
  v34 = 0.0;
  LODWORD(a3) = -1;
  v35 = 0.0;
  v36 = 0.0;
LABEL_24:
  v37 = v31;
  while (1)
  {
    v31 = (uint64_t *)v37[1];
    v38 = v37[3];
    if ((_DWORD)v38 != v403.n128_u32[0]
      || (HIDWORD(v38) == v403.n128_u32[1] ? (_ZF = *((_DWORD *)v37 + 8) == v403.n128_u32[2]) : (_ZF = 0),
          _ZF ? (v40 = *((_DWORD *)v37 + 9) == v403.n128_u32[3]) : (v40 = 0),
          !v40))
    {
LABEL_38:
      RIPClipStateRemoveEntry((uint64_t)v9, v37);
      goto LABEL_39;
    }
    if (*((_DWORD *)v37 + 5) != v16)
    {
      if ((a3 & 0x80000000) != 0)
      {
        if (v11)
          a3 = *(_QWORD *)(v11 + 120);
        else
          LODWORD(a3) = 0;
      }
      v42 = *((_DWORD *)v37 + 24);
      if (v42 > (int)a3)
        goto LABEL_46;
      if (!ClipStackData)
      {
        if (v11)
        {
          v43 = (CGSize *)(v11 + 32);
          v44 = (CGFloat *)(v11 + 24);
          v45 = (const CGRect *)(v11 + 16);
          v46 = (CGFloat *)(v11 + 40);
        }
        else
        {
          v45 = &CGRectInfinite;
          v46 = &CGRectInfinite.size.height;
          v44 = &CGRectInfinite.origin.y;
          v43 = &CGRectInfinite.size;
        }
        v36 = *v46;
        v33 = v45->origin.x;
        v34 = *v44;
        v35 = v43->width;
        ClipStackData = ripc_GetClipStackData((_QWORD *)v11, (int)a3, __dst, 0x20uLL);
        v42 = *((_DWORD *)v37 + 24);
      }
      v47 = v42;
      v383 = v42;
      while ((int)v47 >= 1)
      {
        v48 = *((_DWORD *)v37 + v47 + 24);
        v49 = &ClipStackData[v47--];
        if (v48 != *(v49 - 1))
          goto LABEL_46;
      }
      v50 = *((double *)v37 + 7);
      v51 = *((double *)v37 + 8);
      v52 = *((double *)v37 + 9);
      v53 = *((double *)v37 + 10);
      v430.origin.x = v50;
      v430.origin.y = v51;
      v430.size.width = v52;
      v430.size.height = v53;
      v435.origin.x = v33;
      v435.origin.y = v34;
      v435.size.width = v35;
      v435.size.height = v36;
      result = CGRectContainsRect(v430, v435);
      if ((result & 1) != 0)
      {
        v54 = *((_DWORD *)v37 + 4);
        if (v383 == (_DWORD)a3 && v54 == v15)
        {
          v431.origin.x = v50;
          v431.origin.y = v51;
          v431.size.width = v52;
          v431.size.height = v53;
          v436.origin.x = v33;
          v436.origin.y = v34;
          v436.size.width = v35;
          v436.size.height = v36;
          result = CGRectEqualToRect(v431, v436);
          v54 = v15;
          if ((_DWORD)result)
          {
            *((_DWORD *)v37 + 4) = v15;
            *((_DWORD *)v37 + 5) = v16;
            v372 = *v37;
            if ((uint64_t *)*v37 != v30)
            {
              v373 = (uint64_t *)v37[1];
              *(_QWORD *)(v372 + 8) = v373;
              *v373 = v372;
LABEL_70:
              v37[1] = (uint64_t)v37;
              v57 = (uint64_t **)*((_QWORD *)v9 + 4);
              *((_QWORD *)v9 + 4) = v37;
              *v37 = (uint64_t)v30;
              *v57 = v37;
              v37[1] = (uint64_t)v57;
            }
LABEL_71:
            v10 = cf;
            a2 = v397;
            v4 = v400;
            a3 = v391;
            goto LABEL_403;
          }
        }
        if (!v54 && (!v32 || *((_DWORD *)v32 + 24) < v383))
          v32 = v37;
      }
      else
      {
LABEL_46:
        RIPClipStateRemoveEntry((uint64_t)v9, v37);
      }
      if (v31 == v30)
        goto LABEL_77;
      goto LABEL_24;
    }
    v41 = *((_DWORD *)v37 + 4);
    if (v41 == v15)
    {
      v56 = *v37;
      if ((uint64_t *)*v37 != v30)
      {
        *(_QWORD *)(v56 + 8) = v31;
        *v31 = v56;
        goto LABEL_70;
      }
      goto LABEL_71;
    }
    if (!v41)
      break;
    if (v15)
      goto LABEL_38;
LABEL_39:
    v37 = v31;
    if (v31 == v30)
      goto LABEL_77;
  }
  v33 = *((double *)v37 + 7);
  v34 = *((double *)v37 + 8);
  v35 = *((double *)v37 + 9);
  v36 = *((double *)v37 + 10);
  v58 = *((_DWORD *)v37 + 24);
  LODWORD(a3) = v58;
  if (v58 >= 33)
  {
    v59 = 4 * v58;
    v60 = malloc_type_malloc(v59, 0x100004052888210uLL);
    goto LABEL_76;
  }
  if (v58)
  {
    v59 = 4 * v58;
    v60 = __dst;
LABEL_76:
    ClipStackData = v60;
    memcpy(v60, (char *)v37 + 100, v59);
    v32 = v37;
LABEL_77:
    if ((v29 & 1) != 0)
    {
      v55 = ClipStackData;
      if ((a3 & 0x80000000) != 0)
        goto LABEL_79;
      goto LABEL_86;
    }
    if (ClipStackData && ClipStackData != __dst)
      free(ClipStackData);
  }
  else if ((v29 & 1) != 0)
  {
    LODWORD(a3) = 0;
    v55 = __dst;
    v32 = v37;
    goto LABEL_86;
  }
LABEL_84:
  result = 0;
  *(_DWORD *)v9 = v16;
  *((_DWORD *)v9 + 1) = v15;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  return result;
}

BOOL ripl_Geometry(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(a1 + 20);
  v3 = *(_DWORD *)(a1 + 24);
  if (a2)
  {
    *(_DWORD *)(a2 + 8) = v2;
    *(_DWORD *)(a2 + 12) = v3;
    *(_QWORD *)a2 = *(_QWORD *)(a1 + 12);
  }
  return v2 > 0 && v3 > 0;
}

BOOL ripl_Resolution(uint64_t a1, uint64_t a2)
{
  return a2 != 0;
}

_QWORD *ripc_InitializeColorTransform(uint64_t a1)
{
  _QWORD *result;
  int v3;
  _QWORD *v4;
  _QWORD *Cache;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;

  result = *(_QWORD **)(a1 + 48);
  if (result)
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 80))(result, a1 + 16);
    v3 = (int)result;
  }
  else
  {
    v3 = 0;
  }
  v4 = *(_QWORD **)(a1 + 16);
  if (*(_QWORD **)(a1 + 120) != v4 || *(_DWORD *)(a1 + 132) != v3)
  {
    *(_QWORD *)(a1 + 120) = v4;
    *(_DWORD *)(a1 + 132) = v3;
    if ((CGColorTransformGetMD5(v4, a1 + 136) & 1) == 0)
    {
      *(_QWORD *)(a1 + 136) = 0;
      *(_QWORD *)(a1 + 144) = 0;
    }
    Cache = CGColorTransformGetCache(v4);
    if (Cache && (v6 = Cache[2]) != 0)
      v7 = *(_DWORD *)(*(_QWORD *)(v6 + 24) + 24);
    else
      v7 = -1;
    *(_DWORD *)(a1 + 128) = v7;
    free(*(void **)(a1 + 176));
    v8 = malloc_type_malloc(0xA0uLL, 0x106004074580882uLL);
    *v8 = &ripc_class;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = 0;
    *((_DWORD *)v8 + 39) = 1065353216;
    *(_QWORD *)(a1 + 176) = v8;
    *((_DWORD *)v8 + 5) = v3;
    free(*(void **)(a1 + 184));
    v9 = malloc_type_malloc(0xA0uLL, 0x106004074580882uLL);
    *v9 = &ripc_class;
    v9[1] = 0;
    v9[2] = 0;
    v9[3] = 0;
    *((_DWORD *)v9 + 39) = 1065353216;
    *(_QWORD *)(a1 + 184) = v9;
    *((_DWORD *)v9 + 5) = v3;
    free(*(void **)(a1 + 192));
    result = malloc_type_malloc(0xA0uLL, 0x106004074580882uLL);
    *result = &ripc_class;
    result[1] = 0;
    result[2] = 0;
    result[3] = 0;
    *((_DWORD *)result + 39) = 1065353216;
    *(_QWORD *)(a1 + 192) = result;
    *((_DWORD *)result + 5) = v3;
  }
  return result;
}

uint64_t ripl_Transform(uint64_t a1, uint64_t a2)
{
  if (a2 && *(_QWORD *)a2)
    return *(unsigned int *)(*(_QWORD *)a2 + 16);
  else
    return 0;
}

void ripc_Render(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  char v9;
  _BYTE *v14;
  int *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *Color;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v9 = a5;
  v14 = (_BYTE *)a4[5];
  if (!v14 || (v14[12] & 0x10) != 0)
  {
    v15 = (int *)(a4 + 3);
  }
  else
  {
    v14 = 0;
    v15 = (int *)(a4 + 1);
  }
  if ((a5 & 6) != 0)
  {
    v16 = RIPRenderCoverage(*(_QWORD *)(a1 + 56), 1, v15, (a5 >> 2) & 1, a5, a6, a7, a8, a9);
    if (!v16)
    {
LABEL_13:
      ripr_Finish(*(_QWORD *)(a1 + 56));
      goto LABEL_14;
    }
    v18 = (uint64_t)v16;
    Color = 0;
    v41 = 0;
    v20 = *(_DWORD *)(*(_QWORD *)(a3 + 120) + 4);
    if (BYTE1(v20))
    {
      Color = ripc_GetColor(a1, a2, a3, 2, (int *)v16 + 3, (uint64_t)&v41, (double *)(a1 + 152), v17);
      if (!Color)
        return;
    }
    *(_DWORD *)(a1 + 104) = (__int16)v20 >> 8;
    *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 82);
    *(_DWORD *)(a1 + 112) = (int)(*(_DWORD *)(*(_QWORD *)(a3 + 120) + 4) << 12) >> 28;
    if (v14)
    {
      (*(void (**)(_BYTE *, _QWORD, uint64_t, _QWORD, uint64_t, char *, uint64_t *))(*(_QWORD *)v14 + 56))(v14, *(_QWORD *)(a1 + 48), *a4, 0, v18, Color, &v41);
      if (!Color)
      {
LABEL_12:
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
        goto LABEL_13;
      }
    }
    else
    {
      RIPLayerBltShape(*(int **)(a1 + 48), *a4, 0, v18, (uint64_t)Color, &v41, a1 + 104, a1 + 104);
      if (!Color)
        goto LABEL_12;
    }
    RIPObjectRelease((uint64_t)Color, v21, v22, v23, v24, v25, v26, v27);
    goto LABEL_12;
  }
LABEL_14:
  if ((v9 & 1) != 0)
  {
    v28 = RIPRenderCoverage(*(_QWORD *)(a1 + 64), 1, v15, 0, a5, a6, a7, a8, a9);
    if (v28)
    {
      v30 = (uint64_t)v28;
      v41 = 0;
      v31 = ripc_GetColor(a1, a2, a3, 1, (int *)v28 + 3, (uint64_t)&v41, (double *)(a1 + 152), v29);
      if (v31)
      {
        v32 = (uint64_t)v31;
        v33 = a1 + 104;
        *(_DWORD *)(a1 + 104) = (int)(*(_DWORD *)(*(_QWORD *)(a3 + 120) + 4) << 16) >> 24;
        *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 82);
        *(_DWORD *)(a1 + 112) = (int)(*(_DWORD *)(*(_QWORD *)(a3 + 120) + 4) << 12) >> 28;
        if (v14)
          (*(void (**)(_BYTE *, _QWORD, uint64_t, _QWORD, uint64_t, char *, uint64_t *, uint64_t))(*(_QWORD *)v14 + 56))(v14, *(_QWORD *)(a1 + 48), *a4, 0, v30, v31, &v41, v33);
        else
          RIPLayerBltShape(*(int **)(a1 + 48), *a4, 0, v30, (uint64_t)v31, &v41, a1 + 104, v33);
        RIPObjectRelease(v32, v34, v35, v36, v37, v38, v39, v40);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30);
    }
    ripr_Finish(*(_QWORD *)(a1 + 64));
  }
}

BOOL RIPLayerInitialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    *(_QWORD *)a1 = RIPLayer_ripl_class;
    *(_DWORD *)(a1 + 8) = -1;
    *(_QWORD *)(a1 + 20) = 0;
    *(_QWORD *)(a1 + 12) = 0;
    *(_DWORD *)(a1 + 28) = 0;
    *(_QWORD *)(a1 + 32) = RIPGetDepthForLayerFormat(0, a2, a3, a4, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    pthread_mutex_init((pthread_mutex_t *)(a1 + 80), 0);
  }
  return a1 != 0;
}

void ripl_release(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13;

  v2 = (pthread_mutex_t *)(a1 + 80);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 80));
  v10 = *(_DWORD *)(a1 + 8);
  if (v10 == -1 || v10 == 1)
  {
    if (*(_QWORD *)(a1 + 72))
    {
      v11 = *(_QWORD *)(a1 + 32);
      if (v11 == RIPGetDepthForLayerFormat(0, v3, v4, v5, v6, v7, v8, v9))
      {
        v12 = *(void **)(a1 + 72);
        if (v12)
        {
          if (v12 != &the_empty_shape)
            free(v12);
        }
      }
      *(_QWORD *)(a1 + 72) = 0;
      *(_DWORD *)(a1 + 64) = 0;
    }
    v13 = *(void **)(a1 + 56);
    if (v13)
    {
      if ((*(_BYTE *)(a1 + 28) & 2) == 0)
        free(v13);
      *(_QWORD *)(a1 + 56) = 0;
      *(_DWORD *)(a1 + 48) = 0;
    }
    if (v10 != -1)
    {
      *(_QWORD *)a1 = 0;
      pthread_mutex_unlock(v2);
      pthread_mutex_destroy(v2);
      free((void *)a1);
      return;
    }
    *(_QWORD *)(a1 + 32) = RIPGetDepthForLayerFormat(0, v3, v4, v5, v6, v7, v8, v9);
    *(_QWORD *)(a1 + 20) = 0;
    *(_QWORD *)(a1 + 12) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 8) = v10 - 1;
  }
  pthread_mutex_unlock(v2);
}

dispatch_once_t RIPGetDepthForLayerFormat(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  dispatch_once_t *v8;
  dispatch_once_t v9;
  _QWORD block[4];
  unsigned int v12;

  if (a1 == -1)
    return 0;
  if (a1 >= 0x1B)
    _CGHandleAssert("RIPGetDepthForLayerFormat", 97, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/RIP/RIPLayerFormat.c", "format >= 0 && format < kRIPLayerFormat_Max", "invalid format %d", a6, a7, a8, a1);
  v8 = (dispatch_once_t *)((char *)&RIPGetDepthForLayerFormat_blt_depth + 16 * (int)a1);
  v9 = v8[1];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __RIPGetDepthForLayerFormat_block_invoke;
  block[3] = &__block_descriptor_tmp_1787;
  v12 = a1;
  if (v9 != -1)
    dispatch_once(v8 + 1, block);
  if (*v8 == -1)
    return 0;
  else
    return *v8;
}

char *RIPRenderCoverage(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  int v58;
  int v59;
  float v60;
  float v61;
  float v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  BOOL v71;
  unsigned int v72;
  unsigned int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  unsigned int v83;
  BOOL v84;
  void *v85;
  __n128 v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  void *v91;
  size_t v92;
  unsigned int v93;
  size_t size;
  void *v95;
  unint64_t v96;
  unint64_t v97;

  if (!a1)
    return 0;
  if (!*(_QWORD *)a1)
    return 0;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    return 0;
  v11 = a2;
  if (v10 != a1 + 168)
  {
    if (a3)
    {
      v12 = a3[2];
      if (v12 < 1)
        return 0;
      v13 = a3[3];
      if (v13 < 1)
        return 0;
      v15 = *a3;
      v14 = a3[1];
      v16 = *a3 + v12;
      v17 = v14 + v13;
    }
    else
    {
      v15 = 0;
      v14 = 0;
      v16 = 0x3FFFFF;
      v17 = 0x3FFFFF;
    }
    v96 = 0;
    v97 = 0;
    if (!*(_BYTE *)(v10 + 112))
    {
      v40 = *(_QWORD *)(v10 + 24);
      if (!v40)
        return 0;
      v41 = *(_DWORD *)v40;
      v42 = *(_DWORD *)(v40 + 4);
      v44 = *(_DWORD *)(v40 + 8);
      v43 = *(_DWORD *)(v40 + 12);
      if (v44 - *(_DWORD *)v40 < 31 || v43 - v42 < 31)
        return 0;
      v46 = v44 + 15;
      v35 = v41 >> 4;
      v37 = v46 >> 4;
      v47 = v43 + 15;
      v38 = v42 >> 4;
      v39 = (v43 + 15) >> 4;
      v48 = *(_DWORD *)(v40 + 184);
      if (v48 == 2 && *(_WORD *)(v40 + 188) == 2)
      {
        if ((*(_BYTE *)(v40 + 178) & 0xC) != 0)
        {
          v49 = 3;
        }
        else
        {
          if ((~v41 & 0xFF0) == 0)
            ++v35;
          if ((~v46 & 0xFF0) == 0)
            ++v37;
          if (v35 >= v37)
            return 0;
          if ((~v42 & 0xFF0) == 0)
            ++v38;
          if ((~v47 & 0xFF0) == 0)
            ++v39;
          if (v38 >= v39)
            return 0;
          if ((v38 | v35 | v37) | v39)
            v49 = 3;
          else
            v49 = 2;
        }
      }
      else if ((*(_BYTE *)(v40 + 178) & 0xC) != 0 || v48 != *(unsigned __int16 *)(v40 + 188))
      {
        v49 = 1;
      }
      else
      {
        v49 = 4;
      }
      v27 = 0;
      v58 = 24 * v48 + 16;
      LODWORD(v96) = v35;
      LODWORD(v97) = v37;
LABEL_83:
      v65 = (v37 + 255) >> 8;
      if (v35 >> 8 <= v15)
        v66 = v15;
      else
        v66 = v35 >> 8;
      if (v65 >= v16)
        v67 = v16;
      else
        v67 = (v37 + 255) >> 8;
      if (v67 <= v66)
        return 0;
      v68 = (v39 + 255) >> 8;
      if (v38 >> 8 <= v14)
        v69 = v14;
      else
        v69 = v38 >> 8;
      if (v68 >= v17)
        v70 = v17;
      else
        v70 = (v39 + 255) >> 8;
      v71 = v35 >> 8 >= v15 && v65 <= v16;
      v72 = a4 | 4;
      if (v71 && v38 >> 8 >= v14 && v68 <= v17)
        v72 = a4;
      v75 = v70 - v69;
      if (v70 <= v69)
        return 0;
      v95 = 0;
      if (v49 == 2)
      {
LABEL_110:
        v57 = 0;
        v54 = 0;
        v56 = 0;
LABEL_111:
        v55 = 0;
LABEL_112:
        v96 = __PAIR64__(v69, v66);
        LODWORD(v97) = v67 - v66;
        HIDWORD(v97) = v70 - v69;
        if (v11)
        {
          v27 = v10 + 120;
          RIPLayerReplace(v10 + 120, (uint64_t)&v96, v54, v55, v56, (uint64_t)v57, (uint64_t)v57, a8, a9);
          v76 = *(_DWORD *)(v10 + 148);
          if (*(_DWORD *)(v10 + 8))
            v77 = v76 | 2;
          else
            v77 = v76 & 0xFFFFFFFD;
          *(_DWORD *)(v10 + 148) = v77;
          return (char *)v27;
        }
        v53 = *(unsigned int *)(a1 + 76);
        return RIPLayerCreateWithData((uint64_t *)&v96, 0, 0, v54, v55, v56, (uint64_t)v57, v53);
      }
      if (*(_BYTE *)(v10 + 113))
        v78 = v72;
      else
        v78 = v72 | 0x20;
      if (v49 != 4)
      {
        if (v49 == 3)
        {
          if (v78 <= 0x1F)
          {
            v79 = v66 << 8;
            if (v35 > v66 << 8)
              v79 = v35;
            if (v37 >= v67 << 8)
              v80 = v67 << 8;
            else
              v80 = v37;
            if (v79 >= v67 << 8)
              return 0;
            v81 = v69 << 8;
            if (v38 > v69 << 8)
              v81 = v38;
            if (v81 >= v70 << 8)
              return 0;
            v57 = 0;
            v54 = 0;
            v55 = 0;
            v82 = v70 << 8;
            if (v39 < v70 << 8)
              v82 = v39;
            v66 = v79 >> 8;
            v69 = v81 >> 8;
            v67 = (v80 + 255) >> 8;
            v70 = (v82 + 255) >> 8;
            v56 = ((((v80 + 255) & 0xFFFF00) - v80) << 8) | (v79 << 24) | ((((v82 + 255) & 0xFF00) - v82) << 16) | v81;
            goto LABEL_112;
          }
          goto LABEL_110;
        }
        if (v78 < 0x20)
        {
          v83 = (v67 - v66 + 3) & 0xFFFFFFFC;
          if (v75 <= 0x7FFFFF7F / v83)
          {
            v93 = (v67 - v66 + 3) & 0xFFFFFFFC;
            size = v75 * v83 + 4;
            v84 = size > 0x10000 || v11 == 0;
            if (!v84
              && (v92 = (v75 * v83 + 259) & 0xFFFFFF00,
                  v85 = malloc_type_malloc(v92, 0x6C4BC18AuLL),
                  *(_QWORD *)(v10 + 16) = v85,
                  *(_DWORD *)(v10 + 8) = v92,
                  v85)
              || (v85 = malloc_type_malloc(size, 0xA061830FuLL)) != 0)
            {
              if (v27)
              {
                v87 = (uint64_t)v85;
                bzero(v85, size);
                aa_line_render(v27, v87, v93, v66, v69, v67, v70);
                v55 = v87;
                v54 = v93;
                v57 = 0;
                v56 = 0;
                goto LABEL_112;
              }
              v91 = v85;
              if (aa_render(v40, v78, (char *)v85, v93, v66, v69, v67, v70, v86))
              {
                v57 = 0;
                v56 = 0;
                v54 = v93;
                v55 = (uint64_t)v91;
                goto LABEL_112;
              }
              if (!*(_DWORD *)(v10 + 8))
              {
                v89 = v91;
LABEL_177:
                free(v89);
              }
            }
          }
          return 0;
        }
      }
      if (v27)
      {
        v88 = aa_line_render_shape(v27, &v95, v58, v66, v69, v67, v70);
        v57 = v95;
        if (!(_DWORD)v88)
          goto LABEL_167;
        if (v95 == &the_empty_shape)
          return 0;
        if (*((_DWORD *)v95 + *((int *)v95 + 1)) == 0x7FFFFFFF)
        {
LABEL_167:
          v27 = 0;
          if (!v95)
            return (char *)v27;
LABEL_175:
          if (v57 == &the_empty_shape)
            return (char *)v27;
          v89 = v57;
          goto LABEL_177;
        }
      }
      else
      {
        v88 = aa_render_shape(v40, v78, &v95, v58, v66, v69, v67, v70, a9);
        v57 = v95;
        if (!(_DWORD)v88)
          goto LABEL_174;
        if (v95 == &the_empty_shape)
          return 0;
        if (*((_DWORD *)v95 + *((int *)v95 + 1)) == 0x7FFFFFFF)
        {
LABEL_174:
          v27 = 0;
          if (!v95)
            return (char *)v27;
          goto LABEL_175;
        }
      }
      v56 = v88;
      v54 = 0;
      goto LABEL_111;
    }
    v27 = *(_QWORD *)(v10 + 32);
    if (!v27)
      return (char *)v27;
    v29 = *(float *)(v27 + 52);
    v28 = *(float *)(v27 + 56);
    v31 = *(float *)(v27 + 60);
    v30 = *(float *)(v27 + 64);
    if (v29 > v31 || v28 > v30)
      return 0;
    v33 = fabsf(*(float *)(v27 + 236)) * 0.5;
    v34 = *(_DWORD *)(v27 + 168);
    if (v34 == 1)
    {
      if (v28 == v30)
      {
        if (*(_DWORD *)(v27 + 244))
        {
          v29 = v29 - v33;
          v31 = v31 + v33;
        }
        else if (v29 == v31)
        {
          return 0;
        }
        v35 = vcvtms_s32_f32(v29 * 256.0);
        v36 = vcvtps_s32_f32(v31 * 256.0);
        if ((_BYTE)v35 == 0xFF)
          ++v35;
        if ((_BYTE)v36 == 0xFF)
          v37 = v36 + 1;
        else
          v37 = v36;
        if (v35 >= v37)
          return 0;
        v38 = vcvtms_s32_f32((float)(v28 - v33) * 256.0);
        a9.n128_f32[0] = (float)(v30 + v33) * 256.0;
        v39 = vcvtps_s32_f32(a9.n128_f32[0]);
        goto LABEL_76;
      }
      if (v29 == v31)
      {
        v59 = *(_DWORD *)(v27 + 244);
        v60 = 0.0;
        if (v59)
          v60 = v33;
        v61 = v28 - v60;
        v62 = -0.0;
        if (v59)
          v62 = v33;
        v63 = vcvtms_s32_f32(v61 * 256.0);
        v64 = vcvtps_s32_f32((float)(v30 + v62) * 256.0);
        if ((_BYTE)v63 == 0xFF)
          v38 = v63 + 1;
        else
          v38 = v63;
        if ((_BYTE)v64 == 0xFF)
          v39 = v64 + 1;
        else
          v39 = v64;
        if (v38 >= v39)
          return 0;
        v35 = vcvtms_s32_f32((float)(v29 - v33) * 256.0);
        a9.n128_f32[0] = (float)(v31 + v33) * 256.0;
        v37 = vcvtps_s32_f32(a9.n128_f32[0]);
LABEL_76:
        if (v38 | (v35 | v37 | v39))
        {
          v40 = 0;
          LODWORD(v97) = v37;
          v96 = __PAIR64__(v38, v35);
          if (*(_BYTE *)(v10 + 113))
            v49 = 3;
          else
            v49 = 4;
          v58 = 40;
          goto LABEL_83;
        }
        v49 = 2;
        goto LABEL_82;
      }
    }
    v35 = vcvtms_s32_f32((float)(v29 - v33) * 256.0);
    v37 = vcvtps_s32_f32((float)(v31 + v33) * 256.0);
    v38 = vcvtms_s32_f32((float)(v28 - v33) * 256.0);
    a9.n128_f32[0] = (float)(v30 + v33) * 256.0;
    v39 = vcvtps_s32_f32(a9.n128_f32[0]);
    v49 = 1;
LABEL_82:
    v40 = 0;
    v96 = __PAIR64__(v38, v35);
    v58 = 24 * v34 + 16;
    v97 = __PAIR64__(v39, v37);
    goto LABEL_83;
  }
  if (a3)
  {
    v18 = a3[2];
    if (v18 < 1)
      return 0;
    v19 = a3[3];
    if (v19 < 1)
      return 0;
    v20 = a3[1];
    v21 = *a3 + v18;
    v22 = *a3 << 8;
    v23 = v20 << 8;
    v24 = v20 + v19;
    v25 = v21 << 8;
    v26 = v24 << 8;
  }
  else
  {
    v23 = 0;
    v22 = 0;
    v25 = 1073741568;
    v26 = 1073741568;
  }
  if (v22 <= *(_DWORD *)v10)
    v22 = *(_DWORD *)v10;
  if (v25 >= *(_DWORD *)(v10 + 8))
    v25 = *(_DWORD *)(v10 + 8);
  if (v22 >= v25)
    return 0;
  if (v23 <= *(_DWORD *)(v10 + 4))
    v23 = *(_DWORD *)(v10 + 4);
  if (v26 >= *(_DWORD *)(v10 + 12))
    v26 = *(_DWORD *)(v10 + 12);
  if (v23 >= v26)
    return 0;
  v50 = ((((v25 + 255) & 0xFFFF00) - v25) << 8) | (v22 << 24) | v23 | ((((v26 + 255) & 0xFF00u) - v26) << 16);
  LODWORD(v96) = v22 >> 8;
  HIDWORD(v96) = v23 >> 8;
  LODWORD(v97) = ((v25 + 255) >> 8) - (v22 >> 8);
  HIDWORD(v97) = ((v26 + 255) >> 8) - (v23 >> 8);
  v27 = a1 + 24;
  if (!*(_QWORD *)(a1 + 24))
    RIPLayerInitialize(a1 + 24, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!v11)
  {
    v53 = *(unsigned int *)(a1 + 76);
    v54 = 0;
    v55 = 0;
    v56 = v50;
    v57 = 0;
    return RIPLayerCreateWithData((uint64_t *)&v96, 0, 0, v54, v55, v56, (uint64_t)v57, v53);
  }
  RIPLayerReplace(a1 + 24, (uint64_t)&v96, 0, 0, v50, 0, a7, a8, a9);
  v51 = *(_DWORD *)(a1 + 52);
  if (*(_DWORD *)(v10 + 8))
    v52 = v51 | 2;
  else
    v52 = v51 & 0xFFFFFFFD;
  *(_DWORD *)(a1 + 52) = v52;
  return (char *)v27;
}

__n128 RIPLayerReplace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 result)
{
  int v11;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  void *v17;
  void *v18;
  __n128 v19;

  if (a1 && *(_QWORD *)a1)
  {
    v11 = a5;
    v13 = a3;
    if (a2)
    {
      v14 = *(_DWORD *)(a2 + 8);
      if (v14 < 0 || (v15 = *(_DWORD *)(a2 + 12), v15 < 0))
      {
        v14 = 0;
        v15 = 0;
      }
      result.n128_u64[0] = *(_QWORD *)a2;
    }
    else
    {
      v14 = 0;
      v15 = 0;
      result = 0uLL;
    }
    v19 = result;
    if (*(_QWORD *)(a1 + 72))
    {
      v16 = *(_QWORD *)(a1 + 32);
      if (v16 == RIPGetDepthForLayerFormat(0, a2, a3, a4, a5, a6, a7, a8))
      {
        v17 = *(void **)(a1 + 72);
        if (v17)
        {
          if (v17 != &the_empty_shape)
            free(v17);
        }
      }
    }
    v18 = *(void **)(a1 + 56);
    if (v18)
    {
      if ((*(_BYTE *)(a1 + 28) & 2) == 0)
        free(v18);
    }
    result = v19;
    *(_QWORD *)(a1 + 12) = v19.n128_u64[0];
    *(_DWORD *)(a1 + 20) = v14;
    *(_DWORD *)(a1 + 24) = v15;
    *(_DWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = a4;
    *(_DWORD *)(a1 + 64) = v11;
    *(_QWORD *)(a1 + 72) = a6;
  }
  return result;
}

void ripr_Finish(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    if (v1 != a1 + 168)
    {
      v3 = *(void **)(v1 + 24);
      if (v3)
      {
        aa_free_edges(*(_QWORD *)(v1 + 24));
        free(v3);
      }
      v4 = *(_QWORD **)(v1 + 32);
      if (v4)
      {
        aal_free_edges(*(_QWORD *)(v1 + 32));
        while (1)
        {
          v5 = (_QWORD *)v4[28];
          if (!v5)
            break;
          v4[28] = *v5;
          free(v5);
        }
        free(v4);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)(v1 + 120) + 24))(v1 + 120);
      if (*(_DWORD *)(v1 + 8))
        free(*(void **)(v1 + 16));
      free((void *)v1);
    }
    *(_QWORD *)(a1 + 16) = 0;
  }
}

_DWORD *ripc_GetClipStackData(_QWORD *a1, unint64_t a2, _DWORD *a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;

  if (a2)
  {
    if (a2 > a4)
      a3 = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
    v6 = 0;
    v7 = a1 + 16;
    do
    {
      if (a1 && a1[15] > v6)
      {
        v8 = v7;
        if (a1[14] != 3)
          v8 = (uint64_t *)(a1[16] + 8 * v6);
        v9 = *v8;
        if (v9)
          LODWORD(v9) = *(_DWORD *)(v9 + 4);
      }
      else
      {
        LODWORD(v9) = 0;
      }
      a3[v6++] = v9;
      ++v7;
    }
    while (a2 != v6);
  }
  return a3;
}

uint64_t CGContextGetDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
    return *(_QWORD *)(a1 + 40);
  handle_invalid_context((char)"CGContextGetDelegate", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

_QWORD *aal_free_edges(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  _QWORD *v4;

  v2 = *(_QWORD *)(a1 + 176);
  result = *(_QWORD **)v2;
  if (*(_QWORD *)v2)
  {
    do
    {
      v4 = (_QWORD *)*result;
      free(result);
      result = v4;
    }
    while (v4);
  }
  *(_QWORD *)(a1 + 184) = v2;
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t CGColorTransformGetMD5(_QWORD *a1, uint64_t a2)
{
  CFTypeID v4;
  _QWORD *Cache;
  __int128 v6;
  uint64_t result;

  if (!a1)
    goto LABEL_7;
  v4 = CFGetTypeID(a1);
  if (kCGColorTransformDefaultCMYK_block_invoke_once != -1)
    dispatch_once(&kCGColorTransformDefaultCMYK_block_invoke_once, &__block_literal_global_25_15643);
  if (v4 == CGColorTransformGetTypeID_type_id)
  {
    Cache = CGColorTransformGetCache(a1);
    if (Cache)
      v6 = *(_OWORD *)(Cache + 3);
    else
      v6 = 0uLL;
    *(_OWORD *)a2 = v6;
    return 1;
  }
  else
  {
LABEL_7:
    result = 0;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  return result;
}

uint64_t ripc_Operation(uint64_t a1, uint64_t a2, int a3, const __CFString *cf1, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  void (*v12)(void);
  uint64_t v13;
  _QWORD *Cache;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  int v19;
  _DWORD *v20;

  if (a1)
  {
    v10 = *(_QWORD *)(a1 + 288);
    if (a5)
      return 1006;
  }
  else
  {
    v10 = 0;
    if (a5)
      return 1006;
  }
  if (cf1 == CFSTR("kCGContextFlush"))
  {
LABEL_13:
    result = *(_QWORD *)(v10 + 48);
    if (!result)
      return result;
    v12 = *(void (**)(void))(*(_QWORD *)result + 64);
    goto LABEL_18;
  }
  if (cf1 == CFSTR("kCGContextSynchronize"))
  {
LABEL_16:
    result = *(_QWORD *)(v10 + 48);
    if (!result)
      return result;
    v12 = *(void (**)(void))(*(_QWORD *)result + 64);
    goto LABEL_18;
  }
  if (cf1 == CFSTR("kCGContextClear"))
    goto LABEL_22;
  if (cf1 == CFSTR("kCGContextErase"))
    goto LABEL_25;
  if (cf1 == CFSTR("kCGContextWait"))
    goto LABEL_40;
  if (cf1 == CFSTR("kCGContextLog"))
  {
LABEL_43:
    RIPPrint();
    return 0;
  }
  if (CFEqual(cf1, CFSTR("kCGContextFlush")))
    goto LABEL_13;
  if (CFEqual(cf1, CFSTR("kCGContextSynchronize")))
    goto LABEL_16;
  if (CFEqual(cf1, CFSTR("kCGContextClear")))
  {
LABEL_22:
    result = *(_QWORD *)(v10 + 48);
    if (result)
    {
      *(_DWORD *)(v10 + 104) = 0;
      v13 = v10 + 104;
      *(_QWORD *)(v13 + 48) = 0x3FF0000000000000;
      *(_DWORD *)(v13 + 8) = 0;
      *(_BYTE *)(v13 + 4) = *(_BYTE *)(a2 + 82);
      RIPLayerBltShape((int *)result, 0, 0, 0, 0, 0, v13, a8);
      return 0;
    }
    return result;
  }
  if (CFEqual(cf1, CFSTR("kCGContextErase")))
  {
LABEL_25:
    if (!*(_QWORD *)(v10 + 48))
      return 0;
    ripc_InitializeColorTransform(v10);
    Cache = CGColorTransformGetCache(*(_QWORD **)(v10 + 120));
    if (Cache)
      v15 = Cache[2];
    else
      v15 = 0;
    v16 = (char *)malloc_type_malloc(0xA0uLL, 0x106004074580882uLL);
    v18 = v16;
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = 0;
    *(_QWORD *)v16 = &ripc_class;
    if (v15)
    {
      v19 = *(_DWORD *)(*(_QWORD *)(v15 + 24) + 24);
      *((_DWORD *)v16 + 6) = v19;
      v20 = v16 + 24;
      switch(v19)
      {
        case 2:
          *(_QWORD *)(v16 + 36) = 0;
          *(_QWORD *)(v16 + 28) = 0;
          goto LABEL_38;
        case 1:
          *((_DWORD *)v16 + 9) = 1065353216;
          __asm { FMOV            V0.2S, #1.0 }
          *(_QWORD *)(v16 + 28) = _D0;
          goto LABEL_38;
        case 0:
          *((_DWORD *)v16 + 7) = 1065353216;
LABEL_38:
          *((_DWORD *)v16 + 39) = 1065353216;
          *(_DWORD *)(v10 + 104) = 1;
          *(_QWORD *)(v10 + 152) = 0x3FF0000000000000;
          *(_DWORD *)(v10 + 112) = 0;
          *(_BYTE *)(v10 + 108) = *(_BYTE *)(a2 + 82);
          RIPLayerBltShape(*(int **)(v10 + 48), 0, 0, 0, (uint64_t)v16, 0, v10 + 104, v17);
          free(v18);
          return 0;
      }
    }
    else
    {
      v20 = v16 + 24;
    }
    *v20 = -1;
    goto LABEL_38;
  }
  if (!CFEqual(cf1, CFSTR("kCGContextWait")))
  {
    if (CFEqual(cf1, CFSTR("kCGContextLog")))
      goto LABEL_43;
    return 1006;
  }
LABEL_40:
  result = *(_QWORD *)(v10 + 48);
  if (result)
  {
    v12 = *(void (**)(void))(*(_QWORD *)result + 64);
LABEL_18:
    v12();
    return 0;
  }
  return result;
}

uint64_t ripc_GetImageInterpolation(uint64_t a1, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v7;
  unsigned int v9;
  unint64_t v10;
  unsigned int v12;

  if (a2 << 24)
  {
    v3 = (char)a2;
    v4 = *(_DWORD *)(a1 + 76);
    if (v4)
    {
      v5 = 0x304020100uLL >> (8 * v4);
      if (v4 >= 5)
        LOBYTE(v5) = 0;
      if (v5 < (0x304020100uLL >> (8 * a2))
        && a2 < 5u)
      {
        v3 = *(_DWORD *)(a1 + 76);
      }
    }
    v9 = *(_DWORD *)(a1 + 72);
    v10 = 0x304020100uLL >> (8 * v3);
    if (v3 >= 5)
      LOBYTE(v10) = 0;
    if (v10 >= (0x304020100uLL >> (8 * v9)) || v9 >= 5)
      v12 = v3;
    else
      v12 = *(_DWORD *)(a1 + 72);
    if (v9)
      return v12;
    else
      return v3;
  }
  else if (a3)
  {
    v7 = *(_DWORD *)(a1 + 76);
    if (v7)
      return v7;
    else
      return 3;
  }
  else
  {
    return *(unsigned int *)(a1 + 72);
  }
}

uint64_t ripc_GetImageInterpolationSize(double *a1, int64_t *a2, unint64_t *a3, int *a4)
{
  double v4;
  double v5;
  unint64_t v6;
  double v7;
  double v8;
  int64_t v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  double v13;
  signed int v14;
  int v15;
  unint64_t v16;
  double v17;
  double v18;
  signed int v19;
  uint64_t v20;
  int v21;
  double v22;
  int v23;
  signed int v24;
  int v25;

  v4 = a1[1] * a1[1] + *a1 * *a1;
  v5 = a1[3] * a1[3] + a1[2] * a1[2];
  if (v4 >= 0.99
    || (v6 = *a2,
        v7 = sqrt(v4),
        v8 = (double)(unint64_t)*a2,
        v9 = vcvtpd_s64_f64(v7 * v8 + -0.00390625),
        *a2 == v9))
  {
    result = 0;
  }
  else
  {
    *a2 = v9;
    if (a4)
    {
      v11 = a4[2];
      if (v6 == v11)
      {
        v12 = 0;
      }
      else
      {
        v13 = (double)(unint64_t)v9 / v8;
        v14 = vcvtpd_s64_f64(v13 * (double)(*a4 + (int)v11));
        v15 = vcvtmd_s64_f64(v13 * (double)*a4);
        if (v9 >= v14)
          LODWORD(v9) = v14;
        v12 = v15 & ~(v15 >> 31);
        LODWORD(v9) = v9 - v12;
      }
      *a4 = v12;
      a4[2] = v9;
    }
    result = 1;
  }
  if (v5 < 0.99)
  {
    v16 = *a3;
    v17 = sqrt(v5);
    v18 = (double)*a3;
    v19 = vcvtpd_s64_f64(v17 * v18 + -0.00390625);
    if (*a3 != v19)
    {
      *a3 = v19;
      if (a4)
      {
        v20 = a4[3];
        if (v16 == v20)
        {
          v21 = 0;
        }
        else
        {
          v22 = (double)(unint64_t)v19 / v18;
          v23 = a4[1];
          v24 = vcvtpd_s64_f64(v22 * (double)(v23 + (int)v20));
          v25 = vcvtmd_s64_f64(v22 * (double)v23);
          if (v19 >= v24)
            v19 = v24;
          v21 = v25 & ~(v25 >> 31);
          v19 -= v21;
        }
        a4[1] = v21;
        a4[3] = v19;
      }
      return 1;
    }
  }
  return result;
}

void rip_auto_context_finalize(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  const void *v14;

  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 288);
    if (v1)
    {
      v2 = *(const void **)(v1 + 88);
      if (v2)
        CFRelease(v2);
      v3 = *(const void **)(v1 + 72);
      if (v3)
        CFRelease(v3);
      v4 = *(const void **)(v1 + 80);
      if (v4)
        CFRelease(v4);
      CGColorSpaceRelease(*(CGColorSpaceRef *)(v1 + 240));
      *(_QWORD *)(v1 + 248) = 0;
      *(_OWORD *)(v1 + 232) = 0u;
      *(_OWORD *)(v1 + 216) = 0u;
      *(_OWORD *)(v1 + 200) = 0u;
      *(_OWORD *)(v1 + 184) = 0u;
      v5 = *(const void **)(v1 + 176);
      if (v5)
        CFRelease(v5);
      pthread_mutex_destroy((pthread_mutex_t *)(v1 + 112));
      rip_auto_context_release_buffer_provider(v1, v6, v7, v8, v9, v10, v11, v12);
      v13 = *(const void **)(v1 + 264);
      if (v13)
        CFRelease(v13);
      v14 = *(const void **)(v1 + 288);
      if (v14)
        CFRelease(v14);
      free((void *)v1);
    }
  }
}

void rip_auto_context_release_buffer_provider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v8;
  uint64_t v10;
  void (*v11)(uint64_t, const void *, unint64_t, unint64_t, _OWORD *, uint64_t, uint64_t, uint64_t);
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[4];
  uint64_t v17;

  v8 = *(const void **)(a1 + 256);
  if (v8)
  {
    v10 = *(_QWORD *)(a1 + 48);
    if (v10)
    {
      v11 = *(void (**)(uint64_t, const void *, unint64_t, unint64_t, _OWORD *, uint64_t, uint64_t, uint64_t))(v10 + 16);
      v12 = *(unsigned int *)(a1 + 108) | ((unint64_t)*(unsigned __int8 *)(a1 + 104) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 105) << 40);
      v13 = (unint64_t)*(unsigned int *)(a1 + 100) << 32;
      v14 = *(_OWORD *)(a1 + 200);
      v15 = *(_OWORD *)(a1 + 232);
      v16[2] = *(_OWORD *)(a1 + 216);
      v16[3] = v15;
      v17 = *(_QWORD *)(a1 + 248);
      v16[0] = *(_OWORD *)(a1 + 184);
      v16[1] = v14;
      v11(v10, v8, v13, v12, v16, a6, a7, a8);
    }
    else
    {
      CFRelease(v8);
    }
    *(_QWORD *)(a1 + 256) = 0;
  }
}

void automatic_bitmap_context_info_release(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v9;
  char v10;

  if (!a1)
    _CGHandleAssert("automatic_bitmap_context_info_release", 22, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/API/CGAutomaticBitmapContext.c", "info", "info is NULL", a6, a7, a8, v10);
  _Block_release(*(const void **)(a1 + 32));
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));
  _Block_release(*(const void **)(a1 + 56));
  v9 = *(const void **)(a1 + 64);
  if (v9)
    CFRelease(v9);
  free((void *)a1);
}

void automatic_bitmap_context_context_finalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108)
      automatic_bitmap_context_info_release(*(_QWORD *)(a1 + 32), a1, a3, a4, a5, a6, a7, a8);
    else
      handle_invalid_context((char)"automatic_bitmap_context_context_finalize", a1, a3, a4, a5, a6, a7, a8);
  }
}

dispatch_once_t RIPLayerCoverage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  dispatch_once_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = *(_QWORD *)(a1 + 32);
  result = RIPGetDepthForLayerFormat(0, a2, a3, a4, a5, a6, a7, a8);
  if (v9 != result)
  {
    v18 = *(_QWORD *)(a1 + 32);
    result = RIPGetDepthForLayerFormat(1u, v11, v12, v13, v14, v15, v16, v17);
    if (v18 == result && !*(_QWORD *)(a1 + 72))
    {
      result = RIPGetDepthForLayerFormat(0, v19, v20, v21, v22, v23, v24, v25);
      *(_QWORD *)(a1 + 32) = result;
    }
  }
  return result;
}

uint64_t CGColorTransformConvertColorFloatComponents(_QWORD *a1, _QWORD *a2, unsigned int a3, uint64_t a4, float *a5, uint64_t a6)
{
  uint64_t v10;
  _QWORD *Cache;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  double *v18;
  uint64_t i;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  double *v24;
  float *j;
  double v26;
  float v27;

  if (a2)
    v10 = *(_QWORD *)(a2[3] + 40);
  else
    v10 = 0;
  Cache = CGColorTransformGetCache(a1);
  if (Cache)
  {
    v12 = Cache[2];
    if (v12)
      v12 = *(_QWORD *)(*(_QWORD *)(v12 + 24) + 40);
  }
  else
  {
    v12 = 0;
  }
  if (a6)
  {
    v13 = 0;
    v14 = 4 * v10;
    v15 = 4 * v12;
    do
    {
      if (a2)
      {
        v16 = *(_QWORD *)(a2[3] + 40);
        v17 = (double *)malloc_type_malloc(8 * v16, 0x100004000313F17uLL);
        v18 = v17;
        if (v16)
        {
          for (i = 0; i != v16; ++i)
            v17[i] = *(float *)(a4 + 4 * i);
        }
      }
      else
      {
        v18 = (double *)malloc_type_malloc(0, 0x100004000313F17uLL);
      }
      v20 = CGColorTransformGetCache(a1);
      if (v20 && (v21 = v20[2]) != 0)
        v22 = *(_QWORD *)(*(_QWORD *)(v21 + 24) + 40);
      else
        v22 = 0;
      v23 = (double *)malloc_type_malloc(8 * v22, 0x100004000313F17uLL);
      CGColorTransformConvertColorComponents((uint64_t)a1, a2, a3, v18, v23);
      v24 = v23;
      for (j = a5; v22; --v22)
      {
        v26 = *v24++;
        v27 = v26;
        *j++ = v27;
      }
      free(v23);
      free(v18);
      ++v13;
      a4 += v14;
      a5 = (float *)((char *)a5 + v15);
    }
    while (v13 != a6);
  }
  return 1;
}

void RIPClipStateRemoveEntry(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *a2;
  v4 = (_QWORD *)a2[1];
  *(_QWORD *)(v5 + 8) = v4;
  *v4 = v5;
  *a2 = (uint64_t)a2;
  a2[1] = (uint64_t)a2;
  v6 = a2[11];
  if ((unint64_t)(v6 + 1) >= 2)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  free(a2);
  --*(_DWORD *)(a1 + 40);
}

BOOL rips_s_Growth(uint64_t a1, _OWORD *a2)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 12);
  if (v2)
    *a2 = *(_OWORD *)(a1 + 96);
  return v2 != 0;
}

uint64_t rips_Create(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v7;

  if (!a3)
    return 0;
  switch(*(_DWORD *)(a3 + 20))
  {
    case 1:
      if (RIPStyleShadow_predicate != -1)
        dispatch_once(&RIPStyleShadow_predicate, &__block_literal_global_7482);
      v7 = &RIPStyleShadow_rips_s_cls;
      break;
    case 2:
      if (RIPStyleFocusRing_predicate != -1)
        dispatch_once(&RIPStyleFocusRing_predicate, &__block_literal_global_9280);
      v7 = &RIPStyleFocusRing_rips_f_cls;
      break;
    case 3:
      if (RIPStyleGaussianBlur_predicate != -1)
        dispatch_once(&RIPStyleGaussianBlur_predicate, &__block_literal_global_17271);
      v7 = &RIPStyleGaussianBlur_rips_gb_cls;
      break;
    case 4:
      if (RIPStyleColorMatrix_predicate != -1)
        dispatch_once(&RIPStyleColorMatrix_predicate, &__block_literal_global_16418);
      v7 = &RIPStyleColorMatrix_rips_cm_cls;
      break;
    default:
      return 0;
  }
  return (*((uint64_t (**)(__int128 *, uint64_t, uint64_t, double))v7 + 4))(v7, a3, a4, a1);
}

void rips_s_release(_DWORD *a1)
{
  int v1;
  const void *v3;

  v1 = a1[2] - 1;
  a1[2] = v1;
  if (!v1)
  {
    v3 = (const void *)*((_QWORD *)a1 + 10);
    if (v3)
      CFRelease(v3);
    free(a1);
  }
}

_QWORD *RIPLayerIntersect(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  BOOL v10;
  _QWORD *v11;

  if (a2)
  {
    v9 = (uint64_t)result;
    if (*a2)
      v10 = result == 0;
    else
      v10 = 1;
    if (!v10)
    {
      if (*result)
      {
        v11 = (_QWORD *)result[4];
        if (v11 == (_QWORD *)a2[4])
        {
          result = (_QWORD *)RIPGetDepthForLayerFormat(0, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          if (v11 == result)
            return (_QWORD *)ripl_Combine(v9, (uint64_t)a2, 0);
        }
      }
    }
  }
  return result;
}

void iosurface_context_finalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  const void *v9;

  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108)
    {
      v8 = *(_QWORD *)(a1 + 32);
      if (v8)
      {
        v9 = *(const void **)(v8 + 16);
        if (v9)
          CFRelease(v9);
        CGColorSpaceRelease(*(CGColorSpaceRef *)(v8 + 40));
        free((void *)v8);
      }
    }
    else
    {
      handle_invalid_context((char)"iosurface_context_finalize", a1, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t CGGStateGetCTM(uint64_t a1)
{
  return a1 + 24;
}

uint64_t CGContextGetFontRenderingStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
    return CGGStateGetFontRenderingStyle(*(_QWORD *)(a1 + 96));
  handle_invalid_context((char)"CGContextGetFontRenderingStyle", a1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGGStateGetClipStack(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

uint64_t CGRenderingStateGetAllowsAntialiasing(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 81);
}

CFArrayRef CGFontCopyTableTags(CFArrayRef font)
{
  if (font)
    return (CFArrayRef)(*(uint64_t (**)(_QWORD))(*((_QWORD *)font + 2) + 416))(*((_QWORD *)font + 14));
  return font;
}

size_t CGFontGetNumberOfGlyphs(CGFontRef font)
{
  size_t result;

  result = (size_t)get_font_info(font);
  if (result)
    return *(_QWORD *)result;
  return result;
}

_DWORD *RGBA32_pattern(uint64_t a1, _DWORD *a2, unsigned int a3, int a4, float *a5, float a6)
{
  unsigned int v8;
  char *v9;

  v8 = PIXELCONSTANT_13369(*(float **)(*(_QWORD *)a1 + 64), a4, a5, a6);
  if (a2 && a3 > 3 || (a2 = malloc_type_malloc(0x34uLL, 0x705560E0uLL)) != 0)
  {
    *(_OWORD *)a2 = xmmword_185004F10;
    a2[6] = 0;
    a2[12] = v8 & 0xFF00FF00 | (v8 << 16) | BYTE2(v8);
    *((_QWORD *)a2 + 2) = 1;
    if (HIBYTE(v8) == 255)
      v9 = 0;
    else
      v9 = (char *)(a2 + 12);
    *((_QWORD *)a2 + 4) = a2 + 12;
    *((_QWORD *)a2 + 5) = v9;
  }
  return a2;
}

_DWORD *argb32_pattern(uint64_t a1, _DWORD *a2, unsigned int a3, int a4, float *a5, float a6)
{
  unsigned int v8;
  char *v9;

  v8 = PIXELCONSTANT_13369(*(float **)(*(_QWORD *)a1 + 64), a4, a5, a6);
  if (a2 && a3 > 3 || (a2 = malloc_type_malloc(0x34uLL, 0x705560E0uLL)) != 0)
  {
    *(_OWORD *)a2 = xmmword_185004F10;
    a2[6] = 0;
    a2[12] = v8;
    *((_QWORD *)a2 + 2) = 1;
    if (HIBYTE(v8) == 255)
      v9 = 0;
    else
      v9 = (char *)(a2 + 12);
    *((_QWORD *)a2 + 4) = a2 + 12;
    *((_QWORD *)a2 + 5) = v9;
  }
  return a2;
}

uint64_t CGClipStackGetIdentifier(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 4);
  return result;
}

CGFloat CGImageBlockSetGetRect(const CGRect *a1)
{
  const CGRect *v1;

  v1 = &CGRectZero;
  if (a1)
    v1 = a1 + 1;
  return v1->origin.x;
}

void CGContextSetCTM(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108)
    {
      v8 = *(_QWORD *)(a1 + 96);
      v9 = *a2;
      v10 = a2[1];
      *(_OWORD *)(v8 + 56) = a2[2];
      *(_OWORD *)(v8 + 40) = v10;
      *(_OWORD *)(v8 + 24) = v9;
      return;
    }
    v11 = a1;
  }
  else
  {
    v11 = 0;
  }
  handle_invalid_context((char)"CGContextSetCTM", v11, a3, a4, a5, a6, a7, a8);
}

uint64_t dlRecorder_DrawGlyphs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const CGPoint *a6, size_t a7, uint64_t a8)
{
  CFArrayRef *v8;
  const CGGlyph *v11;
  double *v15;
  double *v16;
  uint64_t result;
  __int128 v19;
  uint64_t v20;
  double v21;
  unsigned int v22;
  CGFont *v23;
  int v24;
  _DWORD *font_info;
  int v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  CGRect *v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  BOOL v43;
  double v44;
  double v45;
  double v46;
  size_t v47;
  double *v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  CGSize *p_size;
  double *p_y;
  CGFloat height;
  CGFloat y;
  size_t v59;
  CGFloat width;
  CGFloat x;
  double v62;
  CGFloat v63;
  CGFloat v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  size_t v70;
  double *v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  CGFloat v78;
  CGFloat v79;
  CGFloat v80;
  CGFloat v81;
  CGFloat v82;
  CGFloat v83;
  CGFloat v84;
  CGFloat v85;
  CGFloat v86;
  CGFloat v87;
  CGFloat v88;
  CGFloat v89;
  CGFloat v90;
  CGFloat v91;
  CGFloat v92;
  double v93;
  double v94;
  double v95;
  double v96;
  int64x2_t *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *EntryDrawingState;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __n128 v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  const CG::DisplayListResourceColor *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t FillColor;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t StrokeColor;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t EntryStrokeState;
  uint64_t v129;
  const CGRect *v130;
  __int16 *v131;
  uint64_t v132;
  uint64_t v133;
  int FontRenderingStyle;
  __int16 v135;
  CGSize size;
  __int128 v137;
  __int128 v138;
  CGFloat v139;
  CGFloat v140;
  CGRect *v141;
  double v142;
  unsigned __int16 *v143;
  unsigned __int16 *v144;
  unsigned int v145;
  unsigned int v146;
  double v147;
  uint64_t v148;
  CGFloat v149;
  uint64_t EntryFillState;
  CGFloat v151;
  uint64_t EntryPatternState;
  double v153;
  double v154;
  uint64_t v155;
  double v156;
  double v157;
  CGFloat v158;
  CGFloat v159;
  _QWORD *v160;
  double v161;
  CGFloat v162;
  CGFloat v163;
  uint64_t v164;
  CGRect v165;
  CGAffineTransform v166;
  CGAffineTransform v167;
  CGRect FontBBox;
  CGRect v169;
  CGRect v170;
  CGRect v171;
  CGRect v172;
  CGRect v173;
  CGRect v174;
  CGRect v175;
  CGRect v176;
  CGRect v177;
  CGRect v178;
  CGRect v179;
  CGRect v180;
  CGRect v181;
  CGRect v182;
  CGRect v183;
  CGRect v184;
  CGRect v185;

  if (!a1 || (v8 = *(CFArrayRef **)(a1 + 288)) == 0)
  {
    CGPostError((uint64_t)"%s: CGContextDelegateGetInfo() returned NULL", a2, a3, a4, a5, (uint64_t)a6, a7, a8, (char)"dlRecorder_DrawGlyphs");
    return 1000;
  }
  v11 = (const CGGlyph *)a5;
  v15 = (double *)CG::DisplayListRecorder::currentDisplayList(v8);
  if (!v15)
    return 1000;
  v16 = v15;
  if (v15[5] == INFINITY || v15[6] == INFINITY)
    return 0;
  result = 0;
  if (v16[7] != 0.0 && v16[8] != 0.0)
  {
    v19 = *(_OWORD *)(a3 + 40);
    *(_OWORD *)&v166.a = *(_OWORD *)(a3 + 24);
    *(_OWORD *)&v166.c = v19;
    *(_OWORD *)&v166.tx = *(_OWORD *)(a3 + 56);
    v20 = *(_QWORD *)(a3 + 136);
    v21 = *(double *)(v20 + 16);
    v22 = *(char *)(v20 + 1);
    if (!*((_BYTE *)v16 + 73))
    {
LABEL_84:
      v98 = (int64x2_t *)(v16 + 2);
      v99 = CG::DisplayList::fontResourceForFont((CG::DisplayList *)(v16 + 2), *(CGFont **)(v20 + 8));
      if (v99)
      {
        v100 = v99;
        EntryDrawingState = (_QWORD *)CG::DisplayList::getEntryDrawingState((uint64_t *)v16 + 2, a3, a2);
        v109 = EntryDrawingState[1];
        if (v109)
        {
          v110 = *(_DWORD *)(v109 + 8);
          v111 = EntryDrawingState[2];
          v144 = (unsigned __int16 *)v11;
          if (v111)
            v110 |= *(_DWORD *)(v111 + 8);
          v112 = v110 & 0x1000;
          v113 = EntryDrawingState[3];
          v160 = EntryDrawingState;
          if (v113)
            v112 |= *(_DWORD *)(v113 + 8) & 0x3400;
          v114 = *(_QWORD *)(*(_QWORD *)(a3 + 136) + 64);
          v164 = v100;
          if (v114)
            v155 = CG::DisplayList::colorResourceForColor((CG::DisplayList *)(v16 + 2), v114, v102, v103, v104, v105, v106, v107, v108);
          else
            v155 = 0;
          v115 = 0;
          v146 = v22;
          if (v22 <= 6)
          {
            if (((1 << v22) & 0x11) != 0)
            {
              FillColor = CGGStateGetFillColor(a3);
              v120 = (*(uint64_t (**)(double *, uint64_t))(v98->i64[0] + 8))(v16 + 2, FillColor);
              v115 = (const CG::DisplayListResourceColor *)v120;
              if (v120)
                v121 = *(_DWORD *)(v120 + 8) & 0x3400 | 0x100;
              else
                v121 = 256;
              v123 = 0;
            }
            else
            {
              if (((1 << v22) & 0x22) == 0)
              {
                if (((1 << v22) & 0x44) != 0)
                {
                  v116 = CGGStateGetFillColor(a3);
                  v117 = (*(uint64_t (**)(double *, uint64_t))(v98->i64[0] + 8))(v16 + 2, v116);
                  v115 = (const CG::DisplayListResourceColor *)v117;
                  if (v117)
                    v118 = *(_DWORD *)(v117 + 8) & 0x3400 | 0x100;
                  else
                    v118 = 256;
                  StrokeColor = CGGStateGetStrokeColor(a3);
                  v123 = (*(uint64_t (**)(double *, uint64_t))(v98->i64[0] + 8))(v16 + 2, StrokeColor);
                  if (v123)
                    v125 = *(_DWORD *)(v123 + 8) & 0x3400 | 0x200;
                  else
                    v125 = 512;
                  v112 |= v118 | v125;
                  goto LABEL_114;
                }
                goto LABEL_103;
              }
              v122 = CGGStateGetStrokeColor(a3);
              v123 = (*(uint64_t (**)(double *, uint64_t))(v98->i64[0] + 8))(v16 + 2, v122);
              if (v123)
                v121 = *(_DWORD *)(v123 + 8) & 0x3400 | 0x200;
              else
                v121 = 512;
              v115 = 0;
            }
            v112 |= v121;
            goto LABEL_114;
          }
LABEL_103:
          v123 = 0;
LABEL_114:
          v126 = *(_QWORD *)(a3 + 120);
          v127 = v112 | 0x1000;
          if (*(double *)(v126 + 8) < 1.0)
            v112 |= 0x1000u;
          if ((v112 & 0x1000) == 0 && (((int)(*(_DWORD *)(v126 + 4) << 16) >> 24) - 3) < 0xFFFFFFFE)
            v112 = v127;
          if ((v112 & 0x3000) != 0)
            *((_DWORD *)v16 + 20) |= v112 & 0x3000;
          if (*((_BYTE *)v16 + 74))
          {
            v148 = v123;
            if ((v112 & 0x400) != 0)
              EntryPatternState = CG::DisplayList::getEntryPatternState((_QWORD *)v16 + 2, a3, a2);
            else
              EntryPatternState = 0;
            if ((v112 & 0x100) != 0)
              EntryFillState = CG::DisplayList::getEntryFillState((CG::DisplayList *)(v16 + 2), v115);
            else
              EntryFillState = 0;
            if ((v112 & 0x200) != 0)
              EntryStrokeState = CG::DisplayList::getEntryStrokeState((_QWORD *)v16 + 2, a3, v148);
            else
              EntryStrokeState = 0;
            v129 = operator new();
            if (*((_BYTE *)v16 + 73))
              v130 = &v165;
            else
              v130 = &CGRectInfinite;
            v131 = *(__int16 **)(a3 + 136);
            v132 = *((_QWORD *)v131 + 9);
            v133 = *((_QWORD *)v131 + 10);
            FontRenderingStyle = CGGStateGetFontRenderingStyle(a3);
            v135 = *v131;
            size = v130->size;
            *(CGPoint *)(v129 + 16) = v130->origin;
            *(CGSize *)(v129 + 32) = size;
            v137 = *(_OWORD *)&v166.c;
            *(_OWORD *)(v129 + 88) = *(_OWORD *)&v166.a;
            *(_OWORD *)(v129 + 104) = v137;
            *(_OWORD *)(v129 + 120) = *(_OWORD *)&v166.tx;
            *(_OWORD *)(v129 + 168) = *(_OWORD *)(a4 + 32);
            v138 = *(_OWORD *)a4;
            *(_OWORD *)(v129 + 152) = *(_OWORD *)(a4 + 16);
            *(_DWORD *)(v129 + 8) = (v112 << 8) | 1;
            *(_QWORD *)(v129 + 48) = v160;
            *(_QWORD *)(v129 + 56) = EntryFillState;
            *(_QWORD *)(v129 + 64) = EntryStrokeState;
            *(_QWORD *)(v129 + 72) = EntryPatternState;
            *(_QWORD *)v129 = &off_1E1629190;
            *(_QWORD *)(v129 + 80) = v164;
            *(_OWORD *)(v129 + 136) = v138;
            *(double *)(v129 + 184) = v21;
            *(_QWORD *)(v129 + 192) = v132;
            *(_QWORD *)(v129 + 200) = v133;
            *(_QWORD *)(v129 + 208) = v155;
            *(_DWORD *)(v129 + 216) = v146;
            *(_DWORD *)(v129 + 220) = FontRenderingStyle;
            *(_BYTE *)(v129 + 224) = (v135 & 0x80) != 0;
            *(_QWORD *)(v129 + 232) = 0;
            *(_QWORD *)(v129 + 240) = 0;
            *(_QWORD *)(v129 + 248) = a7;
            CG::DisplayListEntryGlyphs::setGlyphsAndPositions((CG::DisplayListEntryGlyphs *)v129, v144, a6, a7);
            CG::DisplayList::appendEntry(v98, v129);
          }
          return 0;
        }
      }
      return 1000;
    }
    v145 = *(char *)(v20 + 1);
    v23 = *(CGFont **)(v20 + 8);
    v24 = *((unsigned __int8 *)v16 + 76);
    font_info = get_font_info(v23);
    if (font_info)
      v26 = font_info[2];
    else
      v26 = 0;
    v27 = (double)v26;
    v28 = *(double *)a4;
    v29 = *(double *)(a4 + 8);
    v31 = *(double *)(a4 + 16);
    v30 = *(double *)(a4 + 24);
    v32 = *(double *)(a4 + 32);
    v33 = v21 / (double)v26;
    v34 = *(double *)a4 * v33;
    v35 = v33 * v29;
    v36 = v33 * v31;
    v37 = v33 * v30;
    v142 = v21;
    v161 = *(double *)(a4 + 40);
    if (v24)
    {
      v139 = v34;
      v140 = v35;
      v149 = v36;
      v151 = v37;
      if (a7 <= 0x7FFFFFFFFFFFFFELL)
        v38 = (CGRect *)malloc_type_malloc(32 * a7, 0x22160ABFuLL);
      else
        v38 = 0;
      v143 = (unsigned __int16 *)v11;
      v141 = v38;
      if (CGFontGetGlyphBBoxes(v23, v11, a7, v38))
      {
        if (a7)
        {
          p_size = &v38->size;
          p_y = &a6->y;
          v147 = v28;
          height = 0.0;
          y = INFINITY;
          v59 = a7;
          width = 0.0;
          x = INFINITY;
          v154 = v32;
          v157 = v30;
          do
          {
            v62 = *(p_y - 1);
            v63 = v154 + v31 * *p_y + v147 * v62;
            v64 = v161 + v157 * *p_y + v29 * v62;
            v170 = *(CGRect *)&p_size[-1].width;
            p_size += 2;
            v167.a = v139;
            v167.b = v140;
            v167.c = v149;
            v167.d = v151;
            v167.tx = 0.0;
            v167.ty = 0.0;
            v171 = CGRectApplyAffineTransform(v170, &v167);
            v183 = CGRectOffset(v171, v63, v64);
            v172.origin.x = x;
            v172.origin.y = y;
            v172.size.width = width;
            v172.size.height = height;
            v173 = CGRectUnion(v172, v183);
            x = v173.origin.x;
            y = v173.origin.y;
            width = v173.size.width;
            height = v173.size.height;
            p_y += 2;
            --v59;
          }
          while (v59);
        }
        else
        {
          width = 0.0;
          x = INFINITY;
          y = INFINITY;
          height = 0.0;
        }
      }
      else
      {
        v174.origin.x = -v27;
        v174.size.width = v27 + v27;
        v167.a = v139;
        v167.b = v140;
        v167.c = v149;
        v167.d = v151;
        v167.tx = 0.0;
        v167.ty = 0.0;
        v174.origin.y = -v27;
        v174.size.height = v27 + v27;
        v175 = CGRectApplyAffineTransform(v174, &v167);
        v65 = a6->y;
        v66 = v32 + v31 * v65 + v28 * a6->x;
        v67 = v161 + v30 * v65 + v29 * a6->x;
        if (a7 < 2)
        {
          v73 = v32 + v31 * v65 + v28 * a6->x;
          v72 = v67;
        }
        else
        {
          v68 = v32;
          v69 = v30;
          v70 = a7 - 1;
          v71 = &a6[1].y;
          v72 = v161 + v30 * v65 + v29 * a6->x;
          v73 = v66;
          do
          {
            v74 = *(v71 - 1);
            v75 = v68 + v31 * *v71 + v28 * v74;
            v76 = v161 + v69 * *v71 + v29 * v74;
            if (v75 > v73)
              v77 = v75;
            else
              v77 = v73;
            if (v75 < v66)
              v66 = v75;
            else
              v73 = v77;
            if (v76 >= v67)
            {
              if (v76 > v72)
                v72 = v76;
            }
            else
            {
              v67 = v76;
            }
            v71 += 2;
            --v70;
          }
          while (v70);
        }
        v84 = v175.origin.x;
        v85 = v175.origin.y;
        v86 = v175.size.width;
        v87 = v175.size.height;
        v179 = CGRectOffset(v175, v66, v67);
        v88 = v179.origin.x;
        v89 = v179.origin.y;
        v159 = v179.size.height;
        v163 = v179.size.width;
        v179.origin.x = v84;
        v179.origin.y = v85;
        v179.size.width = v86;
        v179.size.height = v87;
        v185 = CGRectOffset(v179, v73, v72);
        v180.origin.x = v88;
        v180.origin.y = v89;
        v180.size.height = v159;
        v180.size.width = v163;
        v181 = CGRectUnion(v180, v185);
        x = v181.origin.x;
        y = v181.origin.y;
        width = v181.size.width;
        height = v181.size.height;
      }
      free(v141);
      v11 = v143;
      v22 = v145;
    }
    else
    {
      v153 = *(double *)(a4 + 32);
      v156 = *(double *)(a4 + 24);
      v39 = v37;
      v40 = v36;
      v41 = v35;
      v42 = v34;
      FontBBox = CGFontGetFontBBox(v23);
      v43 = FontBBox.origin.x == INFINITY || FontBBox.origin.y == INFINITY;
      v167.a = v42;
      v167.b = v41;
      if (v43)
        FontBBox.origin.x = -v27;
      if (v43)
        FontBBox.origin.y = -v27;
      if (v43)
        FontBBox.size.width = v27 + v27;
      v167.c = v40;
      v167.d = v39;
      if (v43)
        FontBBox.size.height = v27 + v27;
      v167.tx = 0.0;
      v167.ty = 0.0;
      v169 = CGRectApplyAffineTransform(FontBBox, &v167);
      v44 = a6->y;
      v45 = v153 + v31 * v44 + v28 * a6->x;
      v46 = v161 + v156 * v44 + v29 * a6->x;
      if (a7 < 2)
      {
        v50 = v153 + v31 * v44 + v28 * a6->x;
        v49 = v161 + v156 * v44 + v29 * a6->x;
        v22 = v145;
      }
      else
      {
        v47 = a7 - 1;
        v48 = &a6[1].y;
        v49 = v161 + v156 * v44 + v29 * a6->x;
        v50 = v153 + v31 * v44 + v28 * a6->x;
        v22 = v145;
        do
        {
          v51 = *(v48 - 1);
          v52 = v153 + v31 * *v48 + v28 * v51;
          v53 = v161 + v156 * *v48 + v29 * v51;
          if (v52 > v50)
            v54 = v52;
          else
            v54 = v50;
          if (v52 < v45)
            v45 = v52;
          else
            v50 = v54;
          if (v53 >= v46)
          {
            if (v53 > v49)
              v49 = v53;
          }
          else
          {
            v46 = v53;
          }
          v48 += 2;
          --v47;
        }
        while (v47);
      }
      v78 = v169.origin.x;
      v79 = v169.origin.y;
      v80 = v169.size.width;
      v81 = v169.size.height;
      v176 = CGRectOffset(v169, v45, v46);
      v82 = v176.origin.x;
      v83 = v176.origin.y;
      v158 = v176.size.height;
      v162 = v176.size.width;
      v176.origin.x = v78;
      v176.origin.y = v79;
      v176.size.width = v80;
      v176.size.height = v81;
      v184 = CGRectOffset(v176, v50, v49);
      v177.origin.x = v82;
      v177.origin.y = v83;
      v177.size.height = v158;
      v177.size.width = v162;
      v178 = CGRectUnion(v177, v184);
      x = v178.origin.x;
      y = v178.origin.y;
      width = v178.size.width;
      height = v178.size.height;
    }
    v167 = v166;
    v182.origin.x = x;
    v182.origin.y = y;
    v182.size.width = width;
    v182.size.height = height;
    v165 = CGRectApplyAffineTransform(v182, &v167);
    v165.origin.x = CG::DisplayListRecorder::adjustBoundingBoxToIncludeStroke(&v165, a3);
    v165.origin.y = v90;
    v165.size.width = v91;
    v165.size.height = v92;
    CG::DisplayListRecorder::intersectRectWithClipConsideringStyle(&v165.origin.x, a2, *(double **)(a3 + 112), *(_QWORD *)(*(_QWORD *)(a3 + 120) + 16));
    v165.origin.x = v96;
    v165.origin.y = v93;
    v165.size.width = v94;
    v165.size.height = v95;
    if (v96 == INFINITY || v93 == INFINITY)
      return 0;
    result = 0;
    if (v94 != 0.0 && v95 != 0.0)
    {
      v20 = *(_QWORD *)(a3 + 136);
      v21 = v142;
      goto LABEL_84;
    }
  }
  return result;
}

void sub_1849D64FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DC23C4](v1, 0x10F1C4091CD020ALL);
  _Unwind_Resume(a1);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  double v2;
  double v3;
  double v9;
  double v10;
  double a;
  double b;
  double d;
  double c;
  double ty;
  double tx;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double *v22;
  CGFloat v23;
  double v24;
  double v25;
  double v26;
  double *v27;
  double *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double *v33;
  double *v34;
  double v35;
  double *v36;
  BOOL v37;
  double *v38;
  double v39;
  double v40;
  double v41;
  double v42[5];

  if (rect.origin.x != INFINITY && rect.origin.y != INFINITY)
  {
    if (rect.origin.x == -8.98846567e307
      && rect.origin.y == -8.98846567e307
      && rect.size.width == 1.79769313e308
      && rect.size.height == 1.79769313e308)
    {
      rect.size.width = 1.79769313e308;
      rect.origin.x = -8.98846567e307;
      rect.origin.y = -8.98846567e307;
      rect.size.height = 1.79769313e308;
      return rect;
    }
    v42[3] = v2;
    v42[4] = v3;
    if (rect.size.width < 0.0 || rect.size.height < 0.0)
      rect = CGRectStandardize(rect);
    v9 = rect.origin.x + rect.size.width;
    v10 = rect.origin.y + rect.size.height;
    a = t->a;
    b = t->b;
    c = t->c;
    d = t->d;
    tx = t->tx;
    ty = t->ty;
    v17 = rect.origin.y * d;
    if (b == 0.0 && c == 0.0)
    {
      v18 = rect.origin.y * 0.0 + a * rect.origin.x + tx;
      v19 = v17 + rect.origin.x * 0.0 + ty;
      v39 = v19;
      v40 = v18;
      v41 = v19;
      v42[0] = v18;
      v20 = v10 * 0.0 + a * v9 + tx;
      v21 = v10 * d + v9 * 0.0 + ty;
      if (v20 >= v18)
      {
        if (v20 <= v18)
          goto LABEL_53;
        v22 = &v40;
      }
      else
      {
        v22 = v42;
      }
      *v22 = v20;
LABEL_53:
      v37 = v21 <= v19;
      if (v21 < v19)
        goto LABEL_54;
      goto LABEL_55;
    }
    v23 = rect.origin.y * c;
    v24 = v17 + b * rect.origin.x + ty;
    v39 = v24;
    v40 = v23 + a * rect.origin.x + tx;
    v41 = v24;
    v42[0] = v40;
    v25 = v23 + a * v9 + tx;
    v26 = v17 + b * v9 + ty;
    if (v25 >= v40)
    {
      if (v25 <= v40)
        goto LABEL_28;
      v27 = &v40;
    }
    else
    {
      v27 = v42;
    }
    *v27 = v25;
LABEL_28:
    if (v26 >= v24)
    {
      if (v26 <= v24)
        goto LABEL_33;
      v28 = &v39;
    }
    else
    {
      v28 = &v41;
    }
    *v28 = v26;
LABEL_33:
    v29 = v10 * c;
    v30 = v10 * c + a * v9 + tx;
    v31 = v10 * d;
    v32 = v31 + b * v9 + ty;
    if (v30 >= v42[0])
    {
      if (v30 <= v40)
        goto LABEL_38;
      v33 = &v40;
    }
    else
    {
      v33 = v42;
    }
    *v33 = v30;
LABEL_38:
    if (v32 >= v41)
    {
      if (v32 <= v39)
        goto LABEL_43;
      v34 = &v39;
    }
    else
    {
      v34 = &v41;
    }
    *v34 = v32;
LABEL_43:
    v35 = v29 + a * rect.origin.x + tx;
    v21 = v31 + b * rect.origin.x + ty;
    if (v35 >= v42[0])
    {
      if (v35 <= v40)
      {
LABEL_48:
        if (v21 < v41)
        {
LABEL_54:
          v38 = &v41;
          goto LABEL_57;
        }
        v37 = v21 <= v39;
LABEL_55:
        if (v37)
        {
LABEL_58:
          rect.origin.y = v41;
          rect.origin.x = v42[0];
          rect.size.width = v40 - v42[0];
          rect.size.height = v39 - v41;
          return rect;
        }
        v38 = &v39;
LABEL_57:
        *v38 = v21;
        goto LABEL_58;
      }
      v36 = &v40;
    }
    else
    {
      v36 = v42;
    }
    *v36 = v35;
    goto LABEL_48;
  }
  return rect;
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  if (rect.origin.x != INFINITY && rect.origin.y != INFINITY)
  {
    if (rect.size.width < 0.0 || rect.size.height < 0.0)
      rect = CGRectStandardize(rect);
    rect.origin.x = rect.origin.x + dx;
    rect.origin.y = rect.origin.y + dy;
  }
  return rect;
}

const void *CG::DisplayListRecorder::currentDisplayList(CFArrayRef *this)
{
  CFIndex Count;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  Count = CFArrayGetCount(this[1]);
  if (Count)
    return CFArrayGetValueAtIndex(this[1], Count - 1);
  CGPostError((uint64_t)"%s: displayListStack underflow", v3, v4, v5, v6, v7, v8, v9, (char)"CGDisplayListRef CG::DisplayListRecorder::currentDisplayList()");
  return 0;
}

uint64_t CG::DisplayList::appendEntry(int64x2_t *this, uint64_t a2)
{
  __int8 *v4;
  CGSize v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  CGFloat width;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  CGFloat y;
  _QWORD *v18;
  _QWORD *v19;
  __int128 v20;
  int64x2_t v21;
  CGFloat v22;
  CGRect v23;
  int64x2_t *v24;

  v4 = &this->i8[8 * *(char *)(a2 + 8)];
  ++*((_QWORD *)v4 + 94);
  if ((*(_BYTE *)(a2 + 10) & 0x10) != 0)
    this[37].i32[2] = (unint64_t)(this[36].i64[1] - this[36].i64[0]) >> 4;
  if (this[3].i8[9])
  {
    v5 = *(CGSize *)(a2 + 32);
    v23.origin = *(CGPoint *)(a2 + 16);
    v23.size = v5;
    CG::DisplayList::updateBoundingAndTransparentShapes((CG::DisplayList *)this, &v23, *(_DWORD *)(a2 + 8) >> 8);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, this[7].i64[1]);
  v6 = this[36].u64[1];
  v7 = this[37].u64[0];
  if (v6 < v7)
  {
    if (v6)
    {
      result = (uint64_t)std::shared_ptr<CG::DisplayListEntry const>::shared_ptr[abi:se180100]<CG::DisplayListEntry const,void>((_QWORD *)this[36].i64[1], a2);
      *(_QWORD *)&width = v6 + 16;
      this[36].i64[1] = v6 + 16;
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  v10 = this[36].i64[0];
  v11 = (uint64_t)(v6 - v10) >> 4;
  if ((unint64_t)(v11 + 1) >> 60)
    goto LABEL_23;
  v12 = v7 - v10;
  v13 = v12 >> 3;
  if (v12 >> 3 <= (unint64_t)(v11 + 1))
    v13 = v11 + 1;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
    v14 = 0xFFFFFFFFFFFFFFFLL;
  else
    v14 = v13;
  v24 = this + 37;
  if (!v14
    || (v15 = std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(v14),
        *(_QWORD *)&v23.origin.x = v15,
        *(_QWORD *)&v23.origin.y = &v15[2 * v11],
        v23.size.width = v23.origin.y,
        *(_QWORD *)&v23.size.height = &v15[2 * v16],
        !v15))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
  }
  std::shared_ptr<CG::DisplayListEntry const>::shared_ptr[abi:se180100]<CG::DisplayListEntry const,void>(&v15[2 * v11], a2);
  y = v23.origin.y;
  *(_QWORD *)&width = *(_QWORD *)&v23.size.width + 16;
  *(_QWORD *)&v23.size.width += 16;
  v18 = (_QWORD *)this[36].i64[1];
  v19 = (_QWORD *)this[36].i64[0];
  if (v18 == v19)
  {
    v21 = vdupq_n_s64((unint64_t)v18);
  }
  else
  {
    do
    {
      v20 = *((_OWORD *)v18 - 1);
      v18 -= 2;
      *(_OWORD *)(*(_QWORD *)&y - 16) = v20;
      *(_QWORD *)&y -= 16;
      *v18 = 0;
      v18[1] = 0;
    }
    while (v18 != v19);
    v21 = this[36];
    width = v23.size.width;
  }
  *(CGFloat *)this[36].i64 = y;
  *(CGFloat *)&this[36].i64[1] = width;
  *(int64x2_t *)&v23.origin.y = v21;
  v22 = *(double *)this[37].i64;
  this[37].i64[0] = *(_QWORD *)&v23.size.height;
  v23.size.height = v22;
  *(_QWORD *)&v23.origin.x = v21.i64[0];
  result = std::__split_buffer<std::shared_ptr<CG::DisplayListEntry const>>::~__split_buffer((uint64_t)&v23);
LABEL_21:
  *(CGFloat *)&this[36].i64[1] = width;
  return result;
}

void sub_1849D69C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 584) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::shared_ptr<CG::DisplayListEntry const>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<CG::DisplayListResourceCFTypeRef>::~shared_ptr[abi:se180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t CG::DisplayList::getEntryDrawingState(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  CGFloat v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _BOOL4 v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  __int128 v49;
  uint64_t *v50;
  uint64_t **v51;
  uint64_t **v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  double v72;
  double v73;
  double v74;
  double v75;
  int v76;
  int v77;
  int v78;
  unsigned int v79;
  int v80;
  int v81;
  CGAffineTransform v82;
  CGAffineTransform v83;
  CGAffineTransform v84;
  CGRect v85;

  ++a1[90];
  *(_QWORD *)&v6 = a1 + 61;
  v7 = a1[61];
  v8 = a1 + 61;
  if (!v7)
    goto LABEL_48;
  v8 = a1 + 61;
  do
  {
    v9 = *(_QWORD *)(v7 + 32);
    v10 = *(std::__shared_weak_count **)(v7 + 40);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      v13 = CG::CompareEntryStateDrawing::operator()(v9, (_QWORD *)a2, a3);
      v14 = (unint64_t *)&v10->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    else
    {
      v13 = CG::CompareEntryStateDrawing::operator()(v9, (_QWORD *)a2, a3);
    }
    v16 = (uint64_t *)(v7 + 8);
    if (!v13)
    {
      v8 = (uint64_t *)v7;
      v16 = (uint64_t *)v7;
    }
    v7 = *v16;
  }
  while (*v16);
  if (*(uint64_t **)&v6 == v8)
    goto LABEL_48;
  v17 = v8[4];
  v18 = (std::__shared_weak_count *)v8[5];
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  if (CG::CompareEntryStateDrawing::operator()(v17, (_QWORD *)a2, a3))
  {
    v21 = 0;
    goto LABEL_43;
  }
  v22 = v8[4];
  v23 = (std::__shared_weak_count *)v8[5];
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = *(_QWORD *)(a2 + 112);
  v27 = *(_QWORD *)(v22 + 8);
  if (v27)
    v27 = *(_QWORD *)(v27 + 16);
  if (v26)
  {
    v28 = *(_DWORD *)(v26 + 4);
    if (v27)
    {
LABEL_27:
      v29 = *(_DWORD *)(v27 + 4);
      goto LABEL_30;
    }
  }
  else
  {
    v28 = 0;
    if (v27)
      goto LABEL_27;
  }
  v29 = 0;
LABEL_30:
  if (v28 < v29)
    goto LABEL_31;
  if (v26)
    LODWORD(v26) = *(_DWORD *)(v26 + 4);
  if (v27)
    LODWORD(v27) = *(_DWORD *)(v27 + 4);
  if (v26 > v27)
  {
LABEL_38:
    v21 = 1;
    if (!v23)
      goto LABEL_43;
    goto LABEL_39;
  }
  v54 = *(_QWORD *)(a2 + 120);
  v55 = *(_QWORD *)(v54 + 40);
  v56 = *(_QWORD *)(v22 + 16);
  if (v56)
    v56 = *(_QWORD *)(v56 + 16);
  if (!v55)
  {
    v57 = 0;
    if (v56)
      goto LABEL_66;
LABEL_68:
    v58 = 0;
    goto LABEL_69;
  }
  v57 = *(_DWORD *)(v55 + 16);
  if (!v56)
    goto LABEL_68;
LABEL_66:
  v58 = *(_DWORD *)(v56 + 16);
LABEL_69:
  if (v57 < v58)
    goto LABEL_31;
  if (v55)
    LODWORD(v55) = *(_DWORD *)(v55 + 16);
  if (v56)
    LODWORD(v56) = *(_DWORD *)(v56 + 16);
  if (v55 > v56)
    goto LABEL_38;
  v59 = *(_QWORD *)(v54 + 16);
  v60 = *(_QWORD *)(v22 + 24);
  if (v60)
    v60 = *(_QWORD *)(v60 + 16);
  v61 = v59 ? *(_DWORD *)(v59 + 16) : 0;
  v62 = v60 ? *(_DWORD *)(v60 + 16) : 0;
  if (v61 < v62)
    goto LABEL_31;
  if (v59)
    LODWORD(v59) = *(_DWORD *)(v59 + 16);
  if (v60)
    LODWORD(v60) = *(_DWORD *)(v60 + 16);
  if (v59 > v60)
    goto LABEL_38;
  v63 = *(_QWORD *)(a2 + 144);
  v64 = *(_QWORD *)(v63 + 32);
  v65 = *(_QWORD *)(v22 + 32);
  if (v65)
    v65 = *(_QWORD *)(v65 + 16);
  v66 = v64 ? *(_DWORD *)(v64 + 16) : 0;
  v67 = v65 ? *(_DWORD *)(v65 + 16) : 0;
  if (v66 < v67)
    goto LABEL_31;
  if (v64)
    LODWORD(v64) = *(_DWORD *)(v64 + 16);
  if (v65)
    LODWORD(v65) = *(_DWORD *)(v65 + 16);
  if (v64 > v65)
    goto LABEL_38;
  v68 = *(_QWORD *)(v63 + 40);
  v69 = *(_QWORD *)(v22 + 40);
  if (v69)
    v69 = *(_QWORD *)(v69 + 16);
  v70 = v68 ? *(_DWORD *)(v68 + 16) : 0;
  v71 = v69 ? *(_DWORD *)(v69 + 16) : 0;
  if (v70 < v71)
    goto LABEL_31;
  if (v68)
    LODWORD(v68) = *(_DWORD *)(v68 + 16);
  if (v69)
    LODWORD(v69) = *(_DWORD *)(v69 + 16);
  if (v68 > v69)
    goto LABEL_38;
  v72 = *(double *)(v63 + 8);
  v73 = *(double *)(v22 + 48);
  if (v72 < v73)
    goto LABEL_31;
  if (v72 > v73)
    goto LABEL_38;
  v74 = *(double *)(v54 + 8);
  v75 = *(double *)(v22 + 56);
  if (v74 < v75)
    goto LABEL_31;
  if (v74 > v75)
    goto LABEL_38;
  v76 = *(_DWORD *)(v54 + 4);
  v77 = (__int16)v76 >> 8;
  v78 = *(_DWORD *)(v22 + 96);
  if (v77 < v78 << 26 >> 26)
    goto LABEL_31;
  if (v77 > v78 << 26 >> 26)
    goto LABEL_38;
  v79 = (v76 & 0x1000000) != 0 ? *(unsigned __int8 *)(a3 + 81) : 0;
  if (!v79 && (v78 & 0x40) != 0)
    goto LABEL_31;
  if (v79 > (*(_DWORD *)(v22 + 96) & 0x40u) >> 6)
    goto LABEL_38;
  if ((v76 & 0x2000000) == 0 && (v78 & 0x80) != 0)
    goto LABEL_31;
  if ((v76 & 0x2000000) != 0 && (v78 & 0x80) == 0)
    goto LABEL_38;
  v80 = v76 << 12 >> 28;
  if (v80 < v78 << 18 >> 26)
    goto LABEL_31;
  if (v80 > v78 << 18 >> 26)
    goto LABEL_38;
  if (!*(_BYTE *)(v63 + 24) && (v78 & 0x4000) != 0)
    goto LABEL_31;
  if (*(_BYTE *)(v63 + 24) && (v78 & 0x4000) == 0)
    goto LABEL_38;
  v81 = *(_DWORD *)(v22 + 96) & 0x8000;
  if (!*(_BYTE *)(v63 + 25))
  {
    if (v81)
    {
LABEL_31:
      v21 = 0;
      if (!v23)
        goto LABEL_43;
      goto LABEL_39;
    }
  }
  if (*(_BYTE *)(v63 + 25) && !v81)
    goto LABEL_38;
  v21 = *(_DWORD *)(v63 + 28) >= *(_DWORD *)(v22 + 100);
  if (!v23)
    goto LABEL_43;
LABEL_39:
  v30 = (unint64_t *)&v23->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (!v18)
    goto LABEL_47;
LABEL_43:
  v32 = (unint64_t *)&v18->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (v21)
      return v8[4];
  }
  else
  {
LABEL_47:
    if (v21)
      return v8[4];
  }
LABEL_48:
  v34 = operator new();
  v35 = (*(uint64_t (**)(uint64_t *, _QWORD))*a1)(a1, *(_QWORD *)(a2 + 112));
  v36 = (*(uint64_t (**)(uint64_t *, _QWORD))(*a1 + 80))(a1, *(_QWORD *)(*(_QWORD *)(a2 + 120) + 40));
  v37 = (*(uint64_t (**)(uint64_t *, _QWORD))(*a1 + 72))(a1, *(_QWORD *)(*(_QWORD *)(a2 + 120) + 16));
  v38 = (*(uint64_t (**)(uint64_t *, _QWORD))(*a1 + 88))(a1, *(_QWORD *)(*(_QWORD *)(a2 + 144) + 32));
  v39 = (*(uint64_t (**)(uint64_t *, _QWORD))(*a1 + 88))(a1, *(_QWORD *)(*(_QWORD *)(a2 + 144) + 40));
  *(_QWORD *)v34 = &off_1E1629548;
  *(_QWORD *)(v34 + 8) = v35;
  *(_QWORD *)(v34 + 16) = v36;
  *(_QWORD *)(v34 + 24) = v37;
  *(_QWORD *)(v34 + 32) = v38;
  *(_QWORD *)(v34 + 40) = v39;
  *(_OWORD *)(v34 + 64) = 0u;
  *(_OWORD *)(v34 + 80) = 0u;
  v40 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(v34 + 48) = *(_QWORD *)(v40 + 8);
  v41 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(v34 + 56) = *(_QWORD *)(v41 + 8);
  v42 = *(_DWORD *)(v34 + 96) & 0xFFFFFFC0 | (*(_DWORD *)(v41 + 4) >> 8) & 0x3F;
  *(_DWORD *)(v34 + 96) = v42;
  if ((*(_BYTE *)(v41 + 7) & 1) != 0)
    v43 = *(unsigned __int8 *)(a3 + 81) << 6;
  else
    v43 = 0;
  v44 = v42 & 0xFFFFFFBF | v43;
  *(_DWORD *)(v34 + 96) = v44;
  v45 = v44 & 0xFFFFFF7F | (((*(_DWORD *)(v41 + 4) >> 25) & 1) << 7);
  *(_DWORD *)(v34 + 96) = v45;
  v46 = v45 & 0xFFFFC0FF | (((((int)(*(_DWORD *)(v41 + 4) << 12) >> 20) >> 8) & 0x3F) << 8);
  *(_DWORD *)(v34 + 96) = v46;
  v47 = v46 & 0xFFFF7FFF | (*(unsigned __int8 *)(v40 + 25) << 15);
  *(_DWORD *)(v34 + 96) = v47;
  *(_DWORD *)(v34 + 96) = v47 & 0xFFFFBFFF | (*(unsigned __int8 *)(v40 + 24) << 14);
  *(_DWORD *)(v34 + 100) = *(_DWORD *)(v40 + 28);
  if (v37)
  {
    v48 = *(_QWORD *)(v37 + 16);
    if (v48)
    {
      if (*(_DWORD *)(v48 + 20) == 2 && (*(_DWORD *)(v48 + 104) & 0x80000000) == 0)
      {
        v49 = *(_OWORD *)(a2 + 40);
        *(_OWORD *)&v84.a = *(_OWORD *)(a2 + 24);
        *(_OWORD *)&v84.c = v49;
        *(_OWORD *)&v84.tx = *(_OWORD *)(a2 + 56);
        *(_OWORD *)&v83.a = *(_OWORD *)&v84.a;
        *(_OWORD *)&v83.c = v49;
        *(_OWORD *)&v83.tx = *(_OWORD *)&v84.tx;
        CGAffineTransformInvert(&v84, &v83);
        v85 = *(CGRect *)(v48 + 72);
        v82 = v84;
        *(CGRect *)(v34 + 64) = CGRectApplyAffineTransform(v85, &v82);
      }
    }
  }
  v50 = (uint64_t *)operator new(0x30uLL);
  *(_QWORD *)&v84.a = v50;
  v84.b = v6;
  LOBYTE(v84.c) = 0;
  std::shared_ptr<CG::DisplayListEntryStateDrawing const>::shared_ptr[abi:se180100]<CG::DisplayListEntryStateDrawing,void>(v50 + 4, v34);
  v51 = (uint64_t **)(a1 + 60);
  LOBYTE(v84.c) = 1;
  v52 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListEntryStateDrawing const>,CG::CompareEntryStateDrawing,std::allocator<std::shared_ptr<CG::DisplayListEntryStateDrawing const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateDrawing const>>(v51, v8, &v83, &v82, v50 + 4);
  v8 = *v52;
  if (!*v52)
  {
    std::__tree<unsigned long>::__insert_node_at(v51, *(uint64_t *)&v83.a, v52, v50);
    v84.a = 0.0;
    v8 = v50;
  }
  std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)&v84);
  return v8[4];
}

void sub_1849D70BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CG::DisplayList::functionResourceForFunction(CG::DisplayList *this, CGFunction *a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  char v36;

  if (!a2)
    return 0;
  ++*((_QWORD *)this + 86);
  v4 = (char *)this + 400;
  v5 = *((_QWORD *)this + 50);
  v6 = (char *)this + 400;
  if (!v5)
    goto LABEL_35;
  v6 = (char *)this + 400;
  do
  {
    v7 = *(_QWORD *)(v5 + 32);
    v8 = *(std::__shared_weak_count **)(v5 + 40);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = *(_QWORD *)(v7 + 16);
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      v11 = *(_QWORD *)(v7 + 16);
    }
    v13 = (uint64_t *)(v5 + 8);
    if (v11 >= (unint64_t)a2)
    {
      v13 = (uint64_t *)v5;
      v6 = (char *)v5;
    }
    v5 = *v13;
  }
  while (*v13);
  if (v4 == v6)
    goto LABEL_35;
  v14 = *((_QWORD *)v6 + 4);
  v15 = (std::__shared_weak_count *)*((_QWORD *)v6 + 5);
  v16 = (uint64_t *)(v6 + 32);
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (*(_QWORD *)(v14 + 16) >= (unint64_t)a2)
  {
    v21 = *((_QWORD *)v6 + 4);
    v22 = (std::__shared_weak_count *)*((_QWORD *)v6 + 5);
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v19 = *(_QWORD *)(v21 + 16) <= (unint64_t)a2;
      do
        v25 = __ldaxr(v23);
      while (__stlxr(v25 - 1, v23));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    else
    {
      v19 = *(_QWORD *)(v21 + 16) <= (unint64_t)a2;
    }
  }
  else
  {
    v19 = 0;
  }
  if (!v15)
    goto LABEL_34;
  v26 = (unint64_t *)&v15->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!v19)
      goto LABEL_35;
  }
  else
  {
LABEL_34:
    if (!v19)
    {
LABEL_35:
      v28 = operator new();
      *(_DWORD *)(v28 + 8) = 167772160;
      *(_QWORD *)v28 = &off_1E16294B8;
      *(_QWORD *)(v28 + 16) = 0;
      CFRetain(a2);
      *(_QWORD *)(v28 + 16) = a2;
      v29 = (uint64_t *)operator new(0x30uLL);
      v35[0] = v29;
      v35[1] = v4;
      std::shared_ptr<CG::DisplayListResourceFunction>::shared_ptr[abi:se180100]<CG::DisplayListResourceFunction,void>(v29 + 4, v28);
      v30 = (uint64_t **)((char *)this + 392);
      v36 = 1;
      v31 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>(v30, v6, &v34, &v33, v29 + 4);
      v32 = *v31;
      if (!*v31)
      {
        std::__tree<unsigned long>::__insert_node_at(v30, v34, v31, v29);
        v35[0] = 0;
        v32 = v29;
      }
      std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)v35);
      v16 = v32 + 4;
    }
  }
  return *v16;
}

void sub_1849D7368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void CG::DisplayList::updateBoundingAndTransparentShapes(CG::DisplayList *this, const CGRect *a2, __int16 a3)
{
  char **v6;
  double x;
  double y;
  double width;
  double height;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  char *v25;
  char *v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;

  if (*((_BYTE *)this + 57))
  {
    *(CGRect *)((char *)this + 72) = CGRectUnion(*(CGRect *)((char *)this + 72), *a2);
    if ((a3 & 0x1000) != 0)
    {
      v6 = (char **)*((_QWORD *)this + 13);
      v27 = CGRectIntegral(*a2);
      x = v27.origin.x;
      y = v27.origin.y;
      width = v27.size.width;
      height = v27.size.height;
      if (v27.size.width < 0.0 || v27.size.height < 0.0)
      {
        v17 = COERCE_DOUBLE(CGRectStandardize(v27));
        if (v17 <= 1073741820.0)
          v18 = v17;
        else
          v18 = 1073741820.0;
        if (v17 >= -1073741820.0)
          v13 = (int)v18;
        else
          v13 = 3221225472;
        v28.origin.x = x;
        v28.origin.y = y;
        v28.size.width = width;
        v28.size.height = height;
        v29 = CGRectStandardize(v28);
        if (v29.origin.y <= 1073741820.0)
          v19 = v29.origin.y;
        else
          v19 = 1073741820.0;
        if (v29.origin.y >= -1073741820.0)
          v15 = (int)v19;
        else
          v15 = 3221225472;
        v30.origin.x = x;
        v30.origin.y = y;
        v30.size.width = width;
        v30.size.height = height;
        v31 = CGRectStandardize(v30);
        v20 = v31.origin.x + v31.size.width;
        if (v20 <= 1073741820.0)
          v21 = v20;
        else
          v21 = 1073741820.0;
        if (v20 >= -1073741820.0)
          v16 = (int)v21;
        else
          v16 = 3221225472;
        v32.origin.x = x;
        v32.origin.y = y;
        v32.size.width = width;
        v32.size.height = height;
        v33 = CGRectStandardize(v32);
        y = v33.origin.y;
        height = v33.size.height;
      }
      else
      {
        v11 = 1073741820.0;
        if (x <= 1073741820.0)
          v12 = x;
        else
          v12 = 1073741820.0;
        if (x >= -1073741820.0)
          v13 = (int)v12;
        else
          v13 = 3221225472;
        if (y <= 1073741820.0)
          v14 = y;
        else
          v14 = 1073741820.0;
        if (y >= -1073741820.0)
          v15 = (int)v14;
        else
          v15 = 3221225472;
        if (x + width <= 1073741820.0)
          v11 = x + width;
        if (x + width >= -1073741820.0)
          v16 = (int)v11;
        else
          v16 = 3221225472;
      }
      v22 = 1073741820.0;
      if (y + height <= 1073741820.0)
        v22 = y + height;
      if (y + height >= -1073741820.0)
        v23 = (int)v22;
      else
        v23 = 3221225472;
      if ((int)v13 < (int)v16 && (int)v15 < (int)v23)
      {
        v25 = *v6;
        if (!*v6)
        {
          v25 = (char *)malloc_type_malloc(0x200uLL, 0x705560E0uLL);
          *(_OWORD *)(v25 + 8) = 0u;
          *(_OWORD *)(v25 + 24) = 0u;
          *(_OWORD *)(v25 + 40) = 0u;
          *(_OWORD *)(v25 + 56) = 0u;
          *(_OWORD *)(v25 + 72) = 0u;
          *(_OWORD *)(v25 + 88) = 0u;
          *(_OWORD *)(v25 + 104) = 0u;
          *(_OWORD *)(v25 + 120) = 0u;
          *(_OWORD *)(v25 + 136) = 0u;
          *(_OWORD *)(v25 + 152) = 0u;
          *(_OWORD *)(v25 + 168) = 0u;
          *(_OWORD *)(v25 + 184) = 0u;
          *(_OWORD *)(v25 + 200) = 0u;
          *(_OWORD *)(v25 + 216) = 0u;
          *(_OWORD *)(v25 + 232) = 0u;
          *(_OWORD *)(v25 + 248) = 0u;
          *((_QWORD *)v25 + 33) = 0;
          *(_QWORD *)v25 = 8;
          *((_QWORD *)v25 + 2) = v25 + 32;
          *((_QWORD *)v25 + 3) = v25 + 160;
          *v6 = v25;
        }
        if ((int)shape_accum_add((unsigned int *)v25, v13, v15, v16, v23) >= 1)
        {
          v26 = v6[1];
          if (v26)
          {
            if (v26 != (char *)&the_empty_shape)
              free(v26);
            v6[1] = 0;
          }
          *((_DWORD *)v6 + 12) &= ~1u;
        }
      }
    }
  }
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  double height;
  double width;
  double y;
  double x;
  double v6;
  double v8;
  double v9;
  double v10;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;
  CGRect result;

  height = r2.size.height;
  width = r2.size.width;
  y = r2.origin.y;
  x = r2.origin.x;
  v6 = r1.origin.x;
  if (r1.origin.x == INFINITY || r1.origin.y == INFINITY)
  {
    v8 = r2.size.height;
    v9 = r2.size.width;
    v6 = r2.origin.x;
  }
  else
  {
    v8 = r1.size.height;
    v9 = r1.size.width;
    v10 = r1.origin.y;
    if (r2.origin.x == INFINITY || r2.origin.y == INFINITY)
    {
      y = r1.origin.y;
    }
    else
    {
      if (r1.size.width < 0.0 || r1.size.height < 0.0)
      {
        v18 = CGRectStandardize(r1);
        v6 = v18.origin.x;
        v10 = v18.origin.y;
        v9 = v18.size.width;
        v8 = v18.size.height;
      }
      if (width < 0.0 || height < 0.0)
      {
        v19.origin.x = x;
        v19.origin.y = y;
        v19.size.width = width;
        v19.size.height = height;
        v20 = CGRectStandardize(v19);
        x = v20.origin.x;
        y = v20.origin.y;
        width = v20.size.width;
        height = v20.size.height;
      }
      v12 = v6 + v9;
      v6 = fmin(v6, x);
      v13 = y + height;
      y = fmin(v10, y);
      v9 = fmax(v12, x + width) - v6;
      v8 = fmax(v10 + v8, v13) - y;
    }
  }
  v14 = v6;
  v15 = y;
  v16 = v9;
  v17 = v8;
  result.size.height = v17;
  result.size.width = v16;
  result.origin.y = v15;
  result.origin.x = v14;
  return result;
}

uint64_t CG::DisplayList::colorResourceForColor(CG::DisplayList *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t result;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  CGColorSpaceRef ColorSpace;
  double Alpha;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t **v42;
  _BYTE v43[8];
  uint64_t v44;
  _QWORD v45[2];
  char v46;

  result = 0;
  if (a2 && *((_BYTE *)this + 59))
  {
    v13 = (uint64_t *)((char *)this + 160);
    v12 = (_QWORD *)*((_QWORD *)this + 20);
    ++*((_QWORD *)this + 77);
    v14 = (uint64_t *)((char *)this + 160);
    if (v12)
    {
      v15 = (uint64_t *)((char *)this + 160);
      do
      {
        v16 = CGColorCompare(*(_QWORD *)(v12[4] + 16), a2, a3, a4, a5, a6, a7, a8, a9);
        v17 = v12 + 1;
        if (v16 != -1)
        {
          v17 = v12;
          v15 = v12;
        }
        v12 = (_QWORD *)*v17;
      }
      while (*v17);
      v14 = (uint64_t *)((char *)this + 160);
      if (v15 != v13)
      {
        if (CGColorCompare(*(_QWORD *)(v15[4] + 16), a2, a3, a4, a5, a6, a7, a8, a9) == -1)
        {
          v14 = v15;
        }
        else
        {
          v14 = v15;
          if (CGColorCompare(a2, *(_QWORD *)(v15[4] + 16), v18, v19, v20, v21, v22, v23, v24) != -1)
            return v15[4];
        }
      }
    }
    v25 = operator new();
    v26 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 136);
    *(_DWORD *)(v25 + 8) = 0x1000000;
    *(_QWORD *)v25 = &off_1E16292F0;
    *(_QWORD *)(v25 + 24) = 0;
    *(_QWORD *)(v25 + 32) = 0;
    CFRetain((CFTypeRef)a2);
    *(_QWORD *)(v25 + 16) = a2;
    if (a2 < 0)
    {
      ColorSpace = CGTaggedColorGetColorSpace(a2, v27, v28, v29, v30, v31, v32, v33);
      if (!ColorSpace)
        goto LABEL_15;
    }
    else
    {
      ColorSpace = *(CGColorSpaceRef *)(a2 + 24);
      if (!ColorSpace)
      {
LABEL_15:
        if (a2 < 0)
        {
LABEL_16:
          Alpha = CGTaggedColorGetAlpha(a2, (uint64_t)ColorSpace, v28, v29, v30, v31, v32, v33);
LABEL_20:
          if (Alpha < 1.0)
            *(_DWORD *)(v25 + 8) |= 0x1000u;
          if (a2 >= 1)
          {
            if (*(_QWORD *)(a2 + 32))
            {
              v36 = (*(uint64_t (**)(char *))(*(_QWORD *)v26 + 64))(v26);
              *(_QWORD *)(v25 + 32) = v36;
              if (v36)
                *(_DWORD *)(v25 + 8) |= *(_DWORD *)(v36 + 8) & 0x3000 | 0x400;
            }
          }
          v37 = (uint64_t *)operator new(0x30uLL);
          v45[0] = v37;
          v45[1] = v13;
          std::shared_ptr<CG::DisplayListResourceColor>::shared_ptr[abi:se180100]<CG::DisplayListResourceColor,void>(v37 + 4, v25);
          v46 = 1;
          v42 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceColor>,CG::CompareResourceColor,std::allocator<std::shared_ptr<CG::DisplayListResourceColor>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceColor>>(v13 - 1, v14, &v44, (uint64_t)v43, (uint64_t)(v37 + 4), v38, v39, v40, v41);
          v15 = *v42;
          if (!*v42)
          {
            std::__tree<unsigned long>::__insert_node_at((uint64_t **)v13 - 1, v44, v42, v37);
            v45[0] = 0;
            v15 = v37;
          }
          std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)v45);
          return v15[4];
        }
LABEL_19:
        Alpha = *(double *)(a2 + 8 * *(_QWORD *)(a2 + 56) + 56);
        goto LABEL_20;
      }
    }
    *(_QWORD *)(v25 + 24) = (*(uint64_t (**)(char *))(*(_QWORD *)v26 + 16))(v26);
    if (a2 < 0)
      goto LABEL_16;
    goto LABEL_19;
  }
  return result;
}

void sub_1849D7994(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DC23C4](v1, 0x10E1C40C53D2D14);
  _Unwind_Resume(a1);
}

uint64_t CGColorCompare(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unint64_t NumberOfComponents;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CGColorSpaceRef ColorSpace;
  __n128 v21;
  size_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  unint64_t v40;
  CGColorSpaceRef v41;
  uint64_t v42;
  size_t v43;
  char *v44;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  size_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t *v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  int v70;
  _QWORD v72[2];

  v72[1] = *MEMORY[0x1E0C80C00];
  if (a1 == a2)
    return 0;
  if (a1 && !a2)
    return 1;
  if (!a1 && a2)
    return -1;
  if ((a1 & 0x8000000000000000) != 0)
  {
    NumberOfComponents = CGTaggedColorGetNumberOfComponents(a1, a2, a3, a4, a5, a6, a7, a8);
    ColorSpace = CGTaggedColorGetColorSpace(a1, v13, v14, v15, v16, v17, v18, v19);
    MEMORY[0x1E0C80A78](ColorSpace, v21);
    v23 = (char *)v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v23, v22);
    v38.n128_f64[0] = CGTaggedColorGetComponents(a1, (uint64_t)v23, v24, v25, v26, v27, v28, v29);
    v39 = 0;
    if ((a2 & 0x8000000000000000) == 0)
    {
LABEL_11:
      v40 = *(_QWORD *)(a2 + 56);
      v41 = *(CGColorSpaceRef *)(a2 + 24);
      v42 = *(_QWORD *)(a2 + 32);
      MEMORY[0x1E0C80A78](v30, v38);
      v44 = (char *)v72 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
      memcpy(v44, (const void *)(a2 + 64), v43);
      goto LABEL_14;
    }
  }
  else
  {
    NumberOfComponents = *(_QWORD *)(a1 + 56);
    ColorSpace = *(CGColorSpaceRef *)(a1 + 24);
    v39 = *(_QWORD *)(a1 + 32);
    MEMORY[0x1E0C80A78](a1, a9);
    v23 = (char *)v72 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
    v30 = memcpy(v23, (const void *)(a1 + 64), v45);
    if ((a2 & 0x8000000000000000) == 0)
      goto LABEL_11;
  }
  v40 = CGTaggedColorGetNumberOfComponents(a2, v31, v32, v33, v34, v35, v36, v37);
  v41 = CGTaggedColorGetColorSpace(a2, v46, v47, v48, v49, v50, v51, v52);
  MEMORY[0x1E0C80A78](v41, v53);
  v44 = (char *)v72 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v44, v54);
  CGTaggedColorGetComponents(a2, (uint64_t)v23, v55, v56, v57, v58, v59, v60);
  v42 = 0;
LABEL_14:
  if (NumberOfComponents > v40)
    return 1;
  if (NumberOfComponents < v40)
    return -1;
  v61 = memcmp(v23, v44, 8 * NumberOfComponents);
  if (v61 > 0)
    return 1;
  if (v61 < 0)
    return -1;
  if (v39 && !v42)
    return 1;
  if (!v39 && v42)
    return -1;
  if (v39 && v42)
  {
    v62 = *(_DWORD *)(v39 + 16);
    v63 = *(_DWORD *)(v42 + 16);
    if (v62 > v63)
      return 1;
    if (v62 < v63)
      return -1;
  }
  v64 = *((_QWORD *)ColorSpace + 3);
  if (v64)
    v65 = (unint64_t *)(v64 + 56);
  else
    v65 = 0;
  v66 = *((_QWORD *)v41 + 3);
  if (v66)
    v67 = (unint64_t *)(v66 + 56);
  else
    v67 = 0;
  v68 = bswap64(*v65);
  v69 = bswap64(*v67);
  if (v68 == v69 && (v68 = bswap64(v65[1]), v69 = bswap64(v67[1]), v68 == v69))
  {
    v70 = 0;
  }
  else if (v68 < v69)
  {
    v70 = -1;
  }
  else
  {
    v70 = 1;
  }
  if (v70 >= 1)
    return 1;
  else
    return v70 >> 31;
}

uint64_t CG::DisplayList::getEntryFillState(CG::DisplayList *this, const CG::DisplayListResourceColor *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  char v34;

  ++*((_QWORD *)this + 91);
  v4 = (uint64_t *)((char *)this + 512);
  v5 = *((_QWORD *)this + 64);
  v6 = (uint64_t *)((char *)this + 512);
  if (v5)
  {
    v6 = (uint64_t *)((char *)this + 512);
    do
    {
      v7 = *(_QWORD *)(v5 + 32);
      v8 = *(std::__shared_weak_count **)(v5 + 40);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
        v11 = *(_QWORD *)(v7 + 8);
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      else
      {
        v11 = *(_QWORD *)(v7 + 8);
      }
      v13 = (uint64_t *)(v5 + 8);
      if (v11 >= (unint64_t)a2)
      {
        v13 = (uint64_t *)v5;
        v6 = (uint64_t *)v5;
      }
      v5 = *v13;
    }
    while (*v13);
    if (v4 != v6)
    {
      v14 = v6[4];
      v15 = (std::__shared_weak_count *)v6[5];
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      if (*(_QWORD *)(v14 + 8) >= (unint64_t)a2)
      {
        v19 = v6[4];
        v20 = (std::__shared_weak_count *)v6[5];
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
          v18 = *(_QWORD *)(v19 + 8) <= (unint64_t)a2;
          do
            v23 = __ldaxr(v21);
          while (__stlxr(v23 - 1, v21));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        else
        {
          v18 = *(_QWORD *)(v19 + 8) <= (unint64_t)a2;
        }
      }
      else
      {
        v18 = 0;
      }
      if (!v15)
        goto LABEL_32;
      v24 = (unint64_t *)&v15->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
        if (v18)
          return v6[4];
      }
      else
      {
LABEL_32:
        if (v18)
          return v6[4];
      }
    }
  }
  v26 = (_QWORD *)operator new();
  *v26 = &off_1E16293A8;
  v26[1] = a2;
  v27 = (uint64_t *)operator new(0x30uLL);
  v33[0] = v27;
  v33[1] = v4;
  std::shared_ptr<CG::DisplayListEntryStateFill const>::shared_ptr[abi:se180100]<CG::DisplayListEntryStateFill,void>(v27 + 4, (uint64_t)v26);
  v28 = (uint64_t **)((char *)this + 504);
  v34 = 1;
  v29 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListEntryStateFill const>,CG::CompareEntryStateFill,std::allocator<std::shared_ptr<CG::DisplayListEntryStateFill const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateFill const>>(v28, v6, &v32, &v31, v27 + 4);
  v6 = *v29;
  if (!*v29)
  {
    std::__tree<unsigned long>::__insert_node_at(v28, v32, v29, v27);
    v33[0] = 0;
    v6 = v27;
  }
  std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)v33);
  return v6[4];
}

void sub_1849D7ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CG::DisplayList::clipResourceForClipStack(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t **v34;
  uint64_t **v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  char v39;

  if (!a2)
    return 0;
  v3 = (uint64_t *)(a1 + 136);
  v4 = *(_QWORD *)(a1 + 136);
  ++*(_QWORD *)(a1 + 608);
  v5 = (uint64_t *)(a1 + 136);
  if (!v4)
    goto LABEL_42;
  v5 = (uint64_t *)(a1 + 136);
  do
  {
    v6 = *(_QWORD *)(v4 + 32);
    v7 = *(std::__shared_weak_count **)(v4 + 40);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    v10 = *(_QWORD *)(v6 + 16);
    if (v10)
      v11 = *(_DWORD *)(v10 + 4);
    else
      v11 = 0;
    v12 = *(_DWORD *)(a2 + 4);
    if (v7)
    {
      v13 = (unint64_t *)&v7->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v15 = (uint64_t *)(v4 + 8);
    if (v11 >= v12)
    {
      v5 = (uint64_t *)v4;
      v15 = (uint64_t *)v4;
    }
    v4 = *v15;
  }
  while (*v15);
  if (v3 == v5)
    goto LABEL_42;
  v16 = v5[4];
  v17 = (std::__shared_weak_count *)v5[5];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = *(_QWORD *)(v16 + 16);
  if (v20)
    LODWORD(v20) = *(_DWORD *)(v20 + 4);
  if (v20 >= *(_DWORD *)(a2 + 4))
  {
    v23 = v5[4];
    v24 = (std::__shared_weak_count *)v5[5];
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v27 = *(_QWORD *)(v23 + 16);
    if (v27)
      LODWORD(v27) = *(_DWORD *)(v27 + 4);
    v21 = *(_DWORD *)(a2 + 4) >= v27;
    if (v24)
    {
      v28 = (unint64_t *)&v24->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    v21 = 0;
  }
  if (!v17)
    goto LABEL_41;
  v30 = (unint64_t *)&v17->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (!v21)
      goto LABEL_42;
  }
  else
  {
LABEL_41:
    if (!v21)
    {
LABEL_42:
      v32 = operator new();
      *(_DWORD *)(v32 + 8) = 0;
      *(_QWORD *)v32 = &off_1E1629228;
      *(_QWORD *)(v32 + 16) = 0;
      CG::DisplayListResourceClip::setClipStack(v32, a2);
      v33 = (uint64_t *)operator new(0x30uLL);
      v38[0] = v33;
      v38[1] = v3;
      std::shared_ptr<CG::DisplayListResourceClip>::shared_ptr[abi:se180100]<CG::DisplayListResourceClip,void>(v33 + 4, v32);
      v34 = (uint64_t **)(v3 - 1);
      v39 = 1;
      v35 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceClip>,CG::CompareResourceClip,std::allocator<std::shared_ptr<CG::DisplayListResourceClip>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceClip>>(v34, v5, &v37, &v36, v33 + 4);
      v5 = *v35;
      if (!*v35)
      {
        std::__tree<unsigned long>::__insert_node_at(v34, v37, v35, v33);
        v38[0] = 0;
        v5 = v33;
      }
      std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)v38);
    }
  }
  return v5[4];
}

void sub_1849D816C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::shared_ptr<CG::DisplayListEntryStateDrawing const>,CG::CompareEntryStateDrawing,std::allocator<std::shared_ptr<CG::DisplayListEntryStateDrawing const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateDrawing const>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  _QWORD *v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _BOOL4 v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _BOOL4 v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _BOOL4 v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  _BOOL4 v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;

  v9 = a1 + 1;
  if (a1 + 1 == a2)
    goto LABEL_19;
  v11 = *a5;
  v12 = (std::__shared_weak_count *)a5[1];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = a2[4];
  v16 = (std::__shared_weak_count *)a2[5];
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v19 = CG::CompareEntryStateDrawing::operator()(v11, v15);
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    if (!v12)
      goto LABEL_18;
  }
  else
  {
    v19 = CG::CompareEntryStateDrawing::operator()(v11, v15);
    if (!v12)
      goto LABEL_18;
  }
  v22 = (unint64_t *)&v12->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (v19)
      goto LABEL_19;
LABEL_45:
    v41 = a2[4];
    v42 = (std::__shared_weak_count *)a2[5];
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = *a5;
    v46 = (std::__shared_weak_count *)a5[1];
    if (v46)
    {
      v47 = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
      v49 = CG::CompareEntryStateDrawing::operator()(v41, v45);
      v50 = (unint64_t *)&v46->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    else
    {
      v49 = CG::CompareEntryStateDrawing::operator()(v41, v45);
    }
    if (!v42)
      goto LABEL_60;
    v52 = (unint64_t *)&v42->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
      if (v49)
      {
LABEL_61:
        a4 = a2 + 1;
        v54 = (_QWORD *)a2[1];
        if (v54)
        {
          do
          {
            v55 = v54;
            v54 = (_QWORD *)*v54;
          }
          while (v54);
        }
        else
        {
          v56 = a2;
          do
          {
            v55 = (_QWORD *)v56[2];
            v27 = *v55 == (_QWORD)v56;
            v56 = v55;
          }
          while (!v27);
        }
        if (v55 != v9)
        {
          v57 = *a5;
          v58 = (std::__shared_weak_count *)a5[1];
          if (v58)
          {
            v59 = (unint64_t *)&v58->__shared_owners_;
            do
              v60 = __ldxr(v59);
            while (__stxr(v60 + 1, v59));
          }
          v61 = v55[4];
          v62 = (std::__shared_weak_count *)v55[5];
          if (v62)
          {
            v63 = (unint64_t *)&v62->__shared_owners_;
            do
              v64 = __ldxr(v63);
            while (__stxr(v64 + 1, v63));
            v65 = CG::CompareEntryStateDrawing::operator()(v57, v61);
            v66 = (unint64_t *)&v62->__shared_owners_;
            do
              v67 = __ldaxr(v66);
            while (__stlxr(v67 - 1, v66));
            if (!v67)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
          else
          {
            v65 = CG::CompareEntryStateDrawing::operator()(v57, v61);
          }
          if (!v58)
            goto LABEL_89;
          v68 = (unint64_t *)&v58->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
            if (!v65)
              return std::__tree<std::shared_ptr<CG::DisplayListEntryStateDrawing const>,CG::CompareEntryStateDrawing,std::allocator<std::shared_ptr<CG::DisplayListEntryStateDrawing const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateDrawing const>>((uint64_t)a1, a3, a5);
          }
          else
          {
LABEL_89:
            if (!v65)
              return std::__tree<std::shared_ptr<CG::DisplayListEntryStateDrawing const>,CG::CompareEntryStateDrawing,std::allocator<std::shared_ptr<CG::DisplayListEntryStateDrawing const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateDrawing const>>((uint64_t)a1, a3, a5);
          }
        }
        if (*a4)
        {
          *a3 = v55;
          return v55;
        }
        else
        {
          *a3 = a2;
        }
        return a4;
      }
    }
    else
    {
LABEL_60:
      if (v49)
        goto LABEL_61;
    }
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
LABEL_18:
  if (!v19)
    goto LABEL_45;
LABEL_19:
  if ((_QWORD *)*a1 == a2)
  {
    v25 = a2;
    goto LABEL_65;
  }
  v24 = (_QWORD *)*a2;
  if (*a2)
  {
    do
    {
      v25 = v24;
      v24 = (_QWORD *)v24[1];
    }
    while (v24);
  }
  else
  {
    v26 = a2;
    do
    {
      v25 = (_QWORD *)v26[2];
      v27 = *v25 == (_QWORD)v26;
      v26 = v25;
    }
    while (v27);
  }
  v28 = v25[4];
  v29 = (std::__shared_weak_count *)v25[5];
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = *a5;
  v33 = (std::__shared_weak_count *)a5[1];
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    v36 = CG::CompareEntryStateDrawing::operator()(v28, v32);
    v37 = (unint64_t *)&v33->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    if (!v29)
    {
LABEL_42:
      if (!v36)
        return std::__tree<std::shared_ptr<CG::DisplayListEntryStateDrawing const>,CG::CompareEntryStateDrawing,std::allocator<std::shared_ptr<CG::DisplayListEntryStateDrawing const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateDrawing const>>((uint64_t)a1, a3, a5);
      goto LABEL_65;
    }
  }
  else
  {
    v36 = CG::CompareEntryStateDrawing::operator()(v28, v32);
    if (!v29)
      goto LABEL_42;
  }
  v39 = (unint64_t *)&v29->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (v40)
    goto LABEL_42;
  ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
  std::__shared_weak_count::__release_weak(v29);
  if (v36)
  {
LABEL_65:
    if (*a2)
    {
      *a3 = v25;
      return v25 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  return std::__tree<std::shared_ptr<CG::DisplayListEntryStateDrawing const>,CG::CompareEntryStateDrawing,std::allocator<std::shared_ptr<CG::DisplayListEntryStateDrawing const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateDrawing const>>((uint64_t)a1, a3, a5);
}

uint64_t CG::DisplayList::softMaskResourceForSoftMask(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t **v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  char v37;

  if (!a2)
    return 0;
  ++a1[85];
  v4 = a1 + 47;
  v5 = a1[47];
  v6 = a1 + 47;
  if (!v5)
    goto LABEL_35;
  v6 = a1 + 47;
  do
  {
    v7 = *(_QWORD *)(v5 + 32);
    v8 = *(std::__shared_weak_count **)(v5 + 40);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = *(_QWORD *)(v7 + 16);
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      v11 = *(_QWORD *)(v7 + 16);
    }
    v13 = (uint64_t *)(v5 + 8);
    if (v11 >= (unint64_t)a2)
    {
      v13 = (uint64_t *)v5;
      v6 = (_QWORD *)v5;
    }
    v5 = *v13;
  }
  while (*v13);
  if (v4 == v6)
    goto LABEL_35;
  v14 = v6[4];
  v15 = (std::__shared_weak_count *)v6[5];
  v16 = v6 + 4;
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (*(_QWORD *)(v14 + 16) >= (unint64_t)a2)
  {
    v21 = v6[4];
    v22 = (std::__shared_weak_count *)v6[5];
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v19 = *(_QWORD *)(v21 + 16) <= (unint64_t)a2;
      do
        v25 = __ldaxr(v23);
      while (__stlxr(v25 - 1, v23));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    else
    {
      v19 = *(_QWORD *)(v21 + 16) <= (unint64_t)a2;
    }
  }
  else
  {
    v19 = 0;
  }
  if (!v15)
    goto LABEL_34;
  v26 = (unint64_t *)&v15->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!v19)
      goto LABEL_35;
  }
  else
  {
LABEL_34:
    if (!v19)
    {
LABEL_35:
      v28 = operator new();
      v29 = *(_QWORD *)(*a1 - 136);
      *(_DWORD *)(v28 + 8) = 150994944;
      *(_QWORD *)v28 = &off_1E1629518;
      *(_QWORD *)(v28 + 16) = 0;
      *(_QWORD *)(v28 + 24) = 0;
      CFRetain(a2);
      *(_QWORD *)(v28 + 16) = a2;
      if (a2[13])
        *(_QWORD *)(v28 + 24) = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)a1 + v29) + 8))((char *)a1 + v29);
      v30 = (uint64_t *)operator new(0x30uLL);
      v36[0] = v30;
      v36[1] = v4;
      std::shared_ptr<CG::DisplayListResourceSoftMask>::shared_ptr[abi:se180100]<CG::DisplayListResourceSoftMask,void>(v30 + 4, v28);
      v31 = (uint64_t **)(a1 + 46);
      v37 = 1;
      v32 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>(v31, v6, &v35, &v34, v30 + 4);
      v33 = *v32;
      if (!*v32)
      {
        std::__tree<unsigned long>::__insert_node_at(v31, v35, v32, v30);
        v36[0] = 0;
        v33 = v30;
      }
      std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)v36);
      v16 = v33 + 4;
    }
  }
  return *v16;
}

void sub_1849D8850(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DC23C4](v1, 0x10E1C40E3985EEBLL);
  _Unwind_Resume(a1);
}

uint64_t CG::DisplayList::styleResourceForStyle(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t **v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  char v45;

  if (!a2)
    return 0;
  ++a1[84];
  v4 = a1 + 44;
  v5 = a1[44];
  v6 = a1 + 44;
  if (!v5)
    goto LABEL_35;
  v6 = a1 + 44;
  do
  {
    v7 = *(_QWORD *)(v5 + 32);
    v8 = *(std::__shared_weak_count **)(v5 + 40);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = *(_QWORD *)(v7 + 16);
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      v11 = *(_QWORD *)(v7 + 16);
    }
    v13 = (uint64_t *)(v5 + 8);
    if (v11 >= (unint64_t)a2)
    {
      v13 = (uint64_t *)v5;
      v6 = (_QWORD *)v5;
    }
    v5 = *v13;
  }
  while (*v13);
  if (v4 == v6)
    goto LABEL_35;
  v14 = v6[4];
  v15 = (std::__shared_weak_count *)v6[5];
  v16 = v6 + 4;
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (*(_QWORD *)(v14 + 16) >= (unint64_t)a2)
  {
    v21 = v6[4];
    v22 = (std::__shared_weak_count *)v6[5];
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v19 = *(_QWORD *)(v21 + 16) <= (unint64_t)a2;
      do
        v25 = __ldaxr(v23);
      while (__stlxr(v25 - 1, v23));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    else
    {
      v19 = *(_QWORD *)(v21 + 16) <= (unint64_t)a2;
    }
  }
  else
  {
    v19 = 0;
  }
  if (v15)
  {
    v26 = (unint64_t *)&v15->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if (v19)
        return *v16;
LABEL_35:
      v28 = operator new();
      v29 = *(_QWORD *)(*a1 - 136);
      *(_DWORD *)(v28 + 8) = 0x8000000;
      *(_QWORD *)v28 = &off_1E1629350;
      *(_QWORD *)(v28 + 16) = 0;
      *(_QWORD *)(v28 + 24) = 0;
      CG::DisplayListResourcePattern::setPattern((CG::DisplayListResourcePattern *)v28, a2);
      *(_DWORD *)(v28 + 8) = (*(unsigned __int8 *)(v28 + 11) << 24) | 0x3400;
      v37 = a2[3];
      if (v37)
      {
        if ((v37 & 0x8000000000000000) != 0)
        {
          if (!CGTaggedColorGetColorSpace(v37, v30, v31, v32, v33, v34, v35, v36))
            goto LABEL_41;
          goto LABEL_40;
        }
        if (*(_QWORD *)(v37 + 24))
LABEL_40:
          *(_QWORD *)(v28 + 24) = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)a1 + v29) + 16))((char *)a1 + v29);
      }
LABEL_41:
      v38 = (uint64_t *)operator new(0x30uLL);
      v44[0] = v38;
      v44[1] = v4;
      std::shared_ptr<CG::DisplayListResourceStyle>::shared_ptr[abi:se180100]<CG::DisplayListResourceStyle,void>(v38 + 4, v28);
      v39 = (uint64_t **)(a1 + 43);
      v45 = 1;
      v40 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>(v39, v6, &v43, &v42, v38 + 4);
      v41 = *v40;
      if (!*v40)
      {
        std::__tree<unsigned long>::__insert_node_at(v39, v43, v40, v38);
        v44[0] = 0;
        v41 = v38;
      }
      std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)v44);
      v16 = v41 + 4;
      return *v16;
    }
  }
  if (!v19)
    goto LABEL_35;
  return *v16;
}

void sub_1849D8B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CG::DisplayList::colorSpaceResourceForColorSpace(CG::DisplayList *this, CGColorSpace *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  char v33;

  if (!a2)
    return 0;
  v3 = (uint64_t *)((char *)this + 184);
  v4 = *((_QWORD *)this + 23);
  ++*((_QWORD *)this + 78);
  v5 = (uint64_t *)((char *)this + 184);
  if (!v4)
    goto LABEL_35;
  v5 = (uint64_t *)((char *)this + 184);
  do
  {
    v6 = *(_QWORD *)(v4 + 32);
    v7 = *(std::__shared_weak_count **)(v4 + 40);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = *(_QWORD *)(v6 + 16);
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    else
    {
      v10 = *(_QWORD *)(v6 + 16);
    }
    v12 = (uint64_t *)(v4 + 8);
    if (v10 >= (unint64_t)a2)
    {
      v12 = (uint64_t *)v4;
      v5 = (uint64_t *)v4;
    }
    v4 = *v12;
  }
  while (*v12);
  if (v3 == v5)
    goto LABEL_35;
  v13 = v5[4];
  v14 = (std::__shared_weak_count *)v5[5];
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  if (*(_QWORD *)(v13 + 16) >= (unint64_t)a2)
  {
    v19 = v5[4];
    v20 = (std::__shared_weak_count *)v5[5];
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      v17 = *(_QWORD *)(v19 + 16) <= (unint64_t)a2;
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    else
    {
      v17 = *(_QWORD *)(v19 + 16) <= (unint64_t)a2;
    }
  }
  else
  {
    v17 = 0;
  }
  if (!v14)
    goto LABEL_34;
  v24 = (unint64_t *)&v14->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (!v17)
      goto LABEL_35;
  }
  else
  {
LABEL_34:
    if (!v17)
    {
LABEL_35:
      v26 = operator new();
      *(_DWORD *)(v26 + 8) = 0x2000000;
      *(_QWORD *)v26 = &off_1E16295C8;
      *(_QWORD *)(v26 + 16) = 0;
      CFRetain(a2);
      *(_QWORD *)(v26 + 16) = a2;
      v27 = (uint64_t *)operator new(0x30uLL);
      v32[0] = v27;
      v32[1] = v3;
      std::shared_ptr<CG::DisplayListResourceColorSpace>::shared_ptr[abi:se180100]<CG::DisplayListResourceColorSpace,void>(v27 + 4, v26);
      v28 = (uint64_t **)(v3 - 1);
      v33 = 1;
      v29 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>(v28, v5, &v31, &v30, v27 + 4);
      v5 = *v29;
      if (!*v29)
      {
        std::__tree<unsigned long>::__insert_node_at(v28, v31, v29, v27);
        v32[0] = 0;
        v5 = v27;
      }
      std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)v32);
    }
  }
  return v5[4];
}

void sub_1849D8DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  _QWORD *v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _BOOL4 v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _BOOL4 v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _BOOL4 v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _BOOL4 v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;

  v9 = a1 + 1;
  if (a1 + 1 == a2)
    goto LABEL_19;
  v11 = *a5;
  v12 = (std::__shared_weak_count *)a5[1];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = a2[4];
  v16 = (std::__shared_weak_count *)a2[5];
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v19 = *(_QWORD *)(v11 + 16) < *(_QWORD *)(v15 + 16);
    do
      v20 = __ldaxr(v17);
    while (__stlxr(v20 - 1, v17));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    if (!v12)
      goto LABEL_18;
  }
  else
  {
    v19 = *(_QWORD *)(v11 + 16) < *(_QWORD *)(v15 + 16);
    if (!v12)
      goto LABEL_18;
  }
  v21 = (unint64_t *)&v12->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (v19)
      goto LABEL_19;
LABEL_45:
    v39 = a2[4];
    v40 = (std::__shared_weak_count *)a2[5];
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    v43 = *a5;
    v44 = (std::__shared_weak_count *)a5[1];
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
      v47 = *(_QWORD *)(v39 + 16) < *(_QWORD *)(v43 + 16);
      do
        v48 = __ldaxr(v45);
      while (__stlxr(v48 - 1, v45));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    else
    {
      v47 = *(_QWORD *)(v39 + 16) < *(_QWORD *)(v43 + 16);
    }
    if (!v40)
      goto LABEL_60;
    v49 = (unint64_t *)&v40->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
      if (v47)
      {
LABEL_61:
        a4 = a2 + 1;
        v51 = (_QWORD *)a2[1];
        if (v51)
        {
          do
          {
            v52 = v51;
            v51 = (_QWORD *)*v51;
          }
          while (v51);
        }
        else
        {
          v53 = a2;
          do
          {
            v52 = (_QWORD *)v53[2];
            v26 = *v52 == (_QWORD)v53;
            v53 = v52;
          }
          while (!v26);
        }
        if (v52 != v9)
        {
          v54 = *a5;
          v55 = (std::__shared_weak_count *)a5[1];
          if (v55)
          {
            v56 = (unint64_t *)&v55->__shared_owners_;
            do
              v57 = __ldxr(v56);
            while (__stxr(v57 + 1, v56));
          }
          v58 = v52[4];
          v59 = (std::__shared_weak_count *)v52[5];
          if (v59)
          {
            v60 = (unint64_t *)&v59->__shared_owners_;
            do
              v61 = __ldxr(v60);
            while (__stxr(v61 + 1, v60));
            v62 = *(_QWORD *)(v54 + 16) < *(_QWORD *)(v58 + 16);
            do
              v63 = __ldaxr(v60);
            while (__stlxr(v63 - 1, v60));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          else
          {
            v62 = *(_QWORD *)(v54 + 16) < *(_QWORD *)(v58 + 16);
          }
          if (!v55)
            goto LABEL_89;
          v64 = (unint64_t *)&v55->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
            if (!v62)
              return std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>((uint64_t)a1, a3, a5);
          }
          else
          {
LABEL_89:
            if (!v62)
              return std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>((uint64_t)a1, a3, a5);
          }
        }
        if (*a4)
        {
          *a3 = v52;
          return v52;
        }
        else
        {
          *a3 = a2;
        }
        return a4;
      }
    }
    else
    {
LABEL_60:
      if (v47)
        goto LABEL_61;
    }
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
LABEL_18:
  if (!v19)
    goto LABEL_45;
LABEL_19:
  if ((_QWORD *)*a1 == a2)
  {
    v24 = a2;
    goto LABEL_65;
  }
  v23 = (_QWORD *)*a2;
  if (*a2)
  {
    do
    {
      v24 = v23;
      v23 = (_QWORD *)v23[1];
    }
    while (v23);
  }
  else
  {
    v25 = a2;
    do
    {
      v24 = (_QWORD *)v25[2];
      v26 = *v24 == (_QWORD)v25;
      v25 = v24;
    }
    while (v26);
  }
  v27 = v24[4];
  v28 = (std::__shared_weak_count *)v24[5];
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = *a5;
  v32 = (std::__shared_weak_count *)a5[1];
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    v35 = *(_QWORD *)(v27 + 16) < *(_QWORD *)(v31 + 16);
    do
      v36 = __ldaxr(v33);
    while (__stlxr(v36 - 1, v33));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
    if (!v28)
    {
LABEL_42:
      if (!v35)
        return std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>((uint64_t)a1, a3, a5);
      goto LABEL_65;
    }
  }
  else
  {
    v35 = *(_QWORD *)(v27 + 16) < *(_QWORD *)(v31 + 16);
    if (!v28)
      goto LABEL_42;
  }
  v37 = (unint64_t *)&v28->__shared_owners_;
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (v38)
    goto LABEL_42;
  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
  std::__shared_weak_count::__release_weak(v28);
  if (v35)
  {
LABEL_65:
    if (*a2)
    {
      *a3 = v24;
      return v24 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  return std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>((uint64_t)a1, a3, a5);
}

uint64_t *std::__tree<std::shared_ptr<CG::DisplayListResourceColor>,CG::CompareResourceColor,std::allocator<std::shared_ptr<CG::DisplayListResourceColor>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceColor>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  _QWORD *v36;

  v13 = a1 + 1;
  if (a1 + 1 == a2
    || (v14 = (uint64_t *)a4,
        CGColorCompare(*(_QWORD *)(*(_QWORD *)a5 + 16), *(_QWORD *)(a2[4] + 16), (uint64_t)a3, a4, a5, a6, a7, a8, a9) == -1))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v23 = a2;
    }
    else
    {
      v22 = (_QWORD *)*a2;
      if (*a2)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)v22[1];
        }
        while (v22);
      }
      else
      {
        v27 = a2;
        do
        {
          v23 = (_QWORD *)v27[2];
          v28 = *v23 == (_QWORD)v27;
          v27 = v23;
        }
        while (v28);
      }
      if (CGColorCompare(*(_QWORD *)(v23[4] + 16), *(_QWORD *)(*(_QWORD *)a5 + 16), (uint64_t)a3, a4, a5, a6, a7, a8, a9) != -1)return std::__tree<std::shared_ptr<CG::DisplayListResourceColor>,CG::CompareResourceColor,std::allocator<std::shared_ptr<CG::DisplayListResourceColor>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceColor>>((uint64_t)a1, a3, a5, v29, v30, v31, v32, v33, v34);
    }
    if (*a2)
    {
      *a3 = v23;
      return v23 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if (CGColorCompare(*(_QWORD *)(a2[4] + 16), *(_QWORD *)(*(_QWORD *)a5 + 16), (uint64_t)a3, a4, a5, a6, a7, a8, a9) == -1)
  {
    v14 = a2 + 1;
    v24 = a2[1];
    if (v24)
    {
      v25 = (_QWORD *)a2[1];
      do
      {
        v26 = v25;
        v25 = (_QWORD *)*v25;
      }
      while (v25);
    }
    else
    {
      v36 = a2;
      do
      {
        v26 = (_QWORD *)v36[2];
        v28 = *v26 == (_QWORD)v36;
        v36 = v26;
      }
      while (!v28);
    }
    if (v26 == v13)
      goto LABEL_27;
    if (CGColorCompare(*(_QWORD *)(*(_QWORD *)a5 + 16), *(_QWORD *)(v26[4] + 16), v15, v16, v17, v18, v19, v20, v21) == -1)
    {
      v24 = *v14;
LABEL_27:
      if (v24)
      {
        *a3 = v26;
        return v26;
      }
      else
      {
        *a3 = a2;
      }
      return v14;
    }
    return std::__tree<std::shared_ptr<CG::DisplayListResourceColor>,CG::CompareResourceColor,std::allocator<std::shared_ptr<CG::DisplayListResourceColor>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceColor>>((uint64_t)a1, a3, a5, v29, v30, v31, v32, v33, v34);
  }
  *a3 = a2;
  *v14 = (uint64_t)a2;
  return v14;
}

_QWORD *std::__tree<std::shared_ptr<CG::DisplayListEntryStateFill const>,CG::CompareEntryStateFill,std::allocator<std::shared_ptr<CG::DisplayListEntryStateFill const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateFill const>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  _QWORD *v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _BOOL4 v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _BOOL4 v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _BOOL4 v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _BOOL4 v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;

  v9 = a1 + 1;
  if (a1 + 1 == a2)
    goto LABEL_19;
  v11 = *a5;
  v12 = (std::__shared_weak_count *)a5[1];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = a2[4];
  v16 = (std::__shared_weak_count *)a2[5];
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v19 = *(_QWORD *)(v11 + 8) < *(_QWORD *)(v15 + 8);
    do
      v20 = __ldaxr(v17);
    while (__stlxr(v20 - 1, v17));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    if (!v12)
      goto LABEL_18;
  }
  else
  {
    v19 = *(_QWORD *)(v11 + 8) < *(_QWORD *)(v15 + 8);
    if (!v12)
      goto LABEL_18;
  }
  v21 = (unint64_t *)&v12->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (v19)
      goto LABEL_19;
LABEL_45:
    v39 = a2[4];
    v40 = (std::__shared_weak_count *)a2[5];
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    v43 = *a5;
    v44 = (std::__shared_weak_count *)a5[1];
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
      v47 = *(_QWORD *)(v39 + 8) < *(_QWORD *)(v43 + 8);
      do
        v48 = __ldaxr(v45);
      while (__stlxr(v48 - 1, v45));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    else
    {
      v47 = *(_QWORD *)(v39 + 8) < *(_QWORD *)(v43 + 8);
    }
    if (!v40)
      goto LABEL_60;
    v49 = (unint64_t *)&v40->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
      if (v47)
      {
LABEL_61:
        a4 = a2 + 1;
        v51 = (_QWORD *)a2[1];
        if (v51)
        {
          do
          {
            v52 = v51;
            v51 = (_QWORD *)*v51;
          }
          while (v51);
        }
        else
        {
          v53 = a2;
          do
          {
            v52 = (_QWORD *)v53[2];
            v26 = *v52 == (_QWORD)v53;
            v53 = v52;
          }
          while (!v26);
        }
        if (v52 != v9)
        {
          v54 = *a5;
          v55 = (std::__shared_weak_count *)a5[1];
          if (v55)
          {
            v56 = (unint64_t *)&v55->__shared_owners_;
            do
              v57 = __ldxr(v56);
            while (__stxr(v57 + 1, v56));
          }
          v58 = v52[4];
          v59 = (std::__shared_weak_count *)v52[5];
          if (v59)
          {
            v60 = (unint64_t *)&v59->__shared_owners_;
            do
              v61 = __ldxr(v60);
            while (__stxr(v61 + 1, v60));
            v62 = *(_QWORD *)(v54 + 8) < *(_QWORD *)(v58 + 8);
            do
              v63 = __ldaxr(v60);
            while (__stlxr(v63 - 1, v60));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          else
          {
            v62 = *(_QWORD *)(v54 + 8) < *(_QWORD *)(v58 + 8);
          }
          if (!v55)
            goto LABEL_89;
          v64 = (unint64_t *)&v55->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
            if (!v62)
              return std::__tree<std::shared_ptr<CG::DisplayListEntryStateFill const>,CG::CompareEntryStateFill,std::allocator<std::shared_ptr<CG::DisplayListEntryStateFill const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateFill const>>((uint64_t)a1, a3, a5);
          }
          else
          {
LABEL_89:
            if (!v62)
              return std::__tree<std::shared_ptr<CG::DisplayListEntryStateFill const>,CG::CompareEntryStateFill,std::allocator<std::shared_ptr<CG::DisplayListEntryStateFill const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateFill const>>((uint64_t)a1, a3, a5);
          }
        }
        if (*a4)
        {
          *a3 = v52;
          return v52;
        }
        else
        {
          *a3 = a2;
        }
        return a4;
      }
    }
    else
    {
LABEL_60:
      if (v47)
        goto LABEL_61;
    }
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
LABEL_18:
  if (!v19)
    goto LABEL_45;
LABEL_19:
  if ((_QWORD *)*a1 == a2)
  {
    v24 = a2;
    goto LABEL_65;
  }
  v23 = (_QWORD *)*a2;
  if (*a2)
  {
    do
    {
      v24 = v23;
      v23 = (_QWORD *)v23[1];
    }
    while (v23);
  }
  else
  {
    v25 = a2;
    do
    {
      v24 = (_QWORD *)v25[2];
      v26 = *v24 == (_QWORD)v25;
      v25 = v24;
    }
    while (v26);
  }
  v27 = v24[4];
  v28 = (std::__shared_weak_count *)v24[5];
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = *a5;
  v32 = (std::__shared_weak_count *)a5[1];
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    v35 = *(_QWORD *)(v27 + 8) < *(_QWORD *)(v31 + 8);
    do
      v36 = __ldaxr(v33);
    while (__stlxr(v36 - 1, v33));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
    if (!v28)
    {
LABEL_42:
      if (!v35)
        return std::__tree<std::shared_ptr<CG::DisplayListEntryStateFill const>,CG::CompareEntryStateFill,std::allocator<std::shared_ptr<CG::DisplayListEntryStateFill const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateFill const>>((uint64_t)a1, a3, a5);
      goto LABEL_65;
    }
  }
  else
  {
    v35 = *(_QWORD *)(v27 + 8) < *(_QWORD *)(v31 + 8);
    if (!v28)
      goto LABEL_42;
  }
  v37 = (unint64_t *)&v28->__shared_owners_;
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (v38)
    goto LABEL_42;
  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
  std::__shared_weak_count::__release_weak(v28);
  if (v35)
  {
LABEL_65:
    if (*a2)
    {
      *a3 = v24;
      return v24 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  return std::__tree<std::shared_ptr<CG::DisplayListEntryStateFill const>,CG::CompareEntryStateFill,std::allocator<std::shared_ptr<CG::DisplayListEntryStateFill const>>>::__find_equal<std::shared_ptr<CG::DisplayListEntryStateFill const>>((uint64_t)a1, a3, a5);
}

CGRect CGFontGetFontBBox(CGFontRef font)
{
  CGRect v1;
  CGRect result;

  if (font)
  {
    v1.origin.x = (*(double (**)(_QWORD))(*((_QWORD *)font + 2) + 112))(*((_QWORD *)font + 14));
    return CGRectIntegral(v1);
  }
  else
  {
    result.size.width = 0.0;
    result.origin.x = INFINITY;
    result.origin.y = INFINITY;
    result.size.height = 0.0;
  }
  return result;
}

CGRect CGRectIntegral(CGRect rect)
{
  double v2;
  double v3;

  if (rect.origin.x != INFINITY && rect.origin.y != INFINITY)
  {
    if (rect.size.width < 0.0 || rect.size.height < 0.0)
      rect = CGRectStandardize(rect);
    v2 = rect.origin.x + rect.size.width;
    rect.origin.x = floor(rect.origin.x);
    v3 = rect.origin.y + rect.size.height;
    rect.origin.y = floor(rect.origin.y);
    rect.size.width = ceil(v2) - rect.origin.x;
    rect.size.height = ceil(v3) - rect.origin.y;
  }
  return rect;
}

uint64_t get_font_bbox()
{
  return FPFontGetBoundingBox();
}

_QWORD *std::__tree<std::shared_ptr<CG::DisplayListResourceClip>,CG::CompareResourceClip,std::allocator<std::shared_ptr<CG::DisplayListResourceClip>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceClip>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  _QWORD *v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  BOOL v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;

  v9 = a1 + 1;
  if (a1 + 1 == a2)
    goto LABEL_25;
  v11 = *a5;
  v12 = (std::__shared_weak_count *)a5[1];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = a2[4];
  v16 = (std::__shared_weak_count *)a2[5];
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *(_QWORD *)(v11 + 16);
  if (v19)
    v20 = *(_DWORD *)(v19 + 4);
  else
    v20 = 0;
  v21 = *(_QWORD *)(v15 + 16);
  if (v21)
  {
    v22 = *(_DWORD *)(v21 + 4);
    if (!v16)
      goto LABEL_19;
  }
  else
  {
    v22 = 0;
    if (!v16)
      goto LABEL_19;
  }
  v23 = (unint64_t *)&v16->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
LABEL_19:
  if (v12)
  {
    v25 = (unint64_t *)&v12->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v20 < v22)
  {
LABEL_25:
    if ((_QWORD *)*a1 == a2)
    {
      v28 = a2;
LABEL_63:
      if (*a2)
      {
        *a3 = v28;
        return v28 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v27 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v28 = v27;
        v27 = (_QWORD *)v27[1];
      }
      while (v27);
    }
    else
    {
      v39 = a2;
      do
      {
        v28 = (_QWORD *)v39[2];
        v40 = *v28 == (_QWORD)v39;
        v39 = v28;
      }
      while (v40);
    }
    v41 = v28[4];
    v42 = (std::__shared_weak_count *)v28[5];
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = *a5;
    v46 = (std::__shared_weak_count *)a5[1];
    if (v46)
    {
      v47 = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    v49 = *(_QWORD *)(v41 + 16);
    if (v49)
      v50 = *(_DWORD *)(v49 + 4);
    else
      v50 = 0;
    v51 = *(_QWORD *)(v45 + 16);
    if (v51)
    {
      v52 = *(_DWORD *)(v51 + 4);
      if (!v46)
        goto LABEL_57;
    }
    else
    {
      v52 = 0;
      if (!v46)
        goto LABEL_57;
    }
    v53 = (unint64_t *)&v46->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
LABEL_57:
    if (v42)
    {
      v55 = (unint64_t *)&v42->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    if (v50 < v52)
      goto LABEL_63;
    return std::__tree<std::shared_ptr<CG::DisplayListResourceClip>,CG::CompareResourceClip,std::allocator<std::shared_ptr<CG::DisplayListResourceClip>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceClip>>((uint64_t)a1, a3, a5);
  }
  v29 = a2[4];
  v30 = (std::__shared_weak_count *)a2[5];
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = *a5;
  v34 = (std::__shared_weak_count *)a5[1];
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v37 = *(_QWORD *)(v29 + 16);
  if (v37)
    v38 = *(_DWORD *)(v37 + 4);
  else
    v38 = 0;
  v57 = *(_QWORD *)(v33 + 16);
  if (v57)
  {
    v58 = *(_DWORD *)(v57 + 4);
    if (!v34)
      goto LABEL_75;
  }
  else
  {
    v58 = 0;
    if (!v34)
      goto LABEL_75;
  }
  v59 = (unint64_t *)&v34->__shared_owners_;
  do
    v60 = __ldaxr(v59);
  while (__stlxr(v60 - 1, v59));
  if (!v60)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
LABEL_75:
  if (v30)
  {
    v61 = (unint64_t *)&v30->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v38 < v58)
  {
    a4 = a2 + 1;
    v63 = (_QWORD *)a2[1];
    if (v63)
    {
      do
      {
        v64 = v63;
        v63 = (_QWORD *)*v63;
      }
      while (v63);
    }
    else
    {
      v65 = a2;
      do
      {
        v64 = (_QWORD *)v65[2];
        v40 = *v64 == (_QWORD)v65;
        v65 = v64;
      }
      while (!v40);
    }
    if (v64 == v9)
      goto LABEL_112;
    v66 = *a5;
    v67 = (std::__shared_weak_count *)a5[1];
    if (v67)
    {
      v68 = (unint64_t *)&v67->__shared_owners_;
      do
        v69 = __ldxr(v68);
      while (__stxr(v69 + 1, v68));
    }
    v70 = v64[4];
    v71 = (std::__shared_weak_count *)v64[5];
    if (v71)
    {
      v72 = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldxr(v72);
      while (__stxr(v73 + 1, v72));
    }
    v74 = *(_QWORD *)(v66 + 16);
    if (v74)
      v75 = *(_DWORD *)(v74 + 4);
    else
      v75 = 0;
    v76 = *(_QWORD *)(v70 + 16);
    if (v76)
    {
      v77 = *(_DWORD *)(v76 + 4);
      if (!v71)
        goto LABEL_106;
    }
    else
    {
      v77 = 0;
      if (!v71)
        goto LABEL_106;
    }
    v78 = (unint64_t *)&v71->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
LABEL_106:
    if (v67)
    {
      v80 = (unint64_t *)&v67->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    if (v75 >= v77)
      return std::__tree<std::shared_ptr<CG::DisplayListResourceClip>,CG::CompareResourceClip,std::allocator<std::shared_ptr<CG::DisplayListResourceClip>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceClip>>((uint64_t)a1, a3, a5);
LABEL_112:
    if (*a4)
    {
      *a3 = v64;
      return v64;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = a2;
  return a4;
}

BOOL CG::CompareEntryStateDrawing::operator()(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  double v31;
  double v32;
  double v33;
  double v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 16);
    v5 = a2[14];
    if (v4)
    {
      v6 = *(_DWORD *)(v4 + 4);
      if (!v5)
        goto LABEL_8;
LABEL_6:
      v7 = *(_DWORD *)(v5 + 4);
      goto LABEL_9;
    }
    v6 = 0;
    if (v5)
      goto LABEL_6;
  }
  else
  {
    v4 = 0;
    v6 = 0;
    v5 = a2[14];
    if (v5)
      goto LABEL_6;
  }
LABEL_8:
  v7 = 0;
LABEL_9:
  if (v6 < v7)
    return 1;
  if (v4)
    LODWORD(v4) = *(_DWORD *)(v4 + 4);
  if (v5)
    LODWORD(v5) = *(_DWORD *)(v5 + 4);
  if (v4 > v5)
    return 0;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 16);
    v11 = a2[15];
    v12 = *(_QWORD *)(v11 + 40);
    if (v10)
    {
      v13 = *(_DWORD *)(v10 + 16);
      if (!v12)
        goto LABEL_24;
LABEL_22:
      v14 = *(_DWORD *)(v12 + 16);
      goto LABEL_25;
    }
    v13 = 0;
    if (v12)
      goto LABEL_22;
  }
  else
  {
    v10 = 0;
    v13 = 0;
    v11 = a2[15];
    v12 = *(_QWORD *)(v11 + 40);
    if (v12)
      goto LABEL_22;
  }
LABEL_24:
  v14 = 0;
LABEL_25:
  if (v13 < v14)
    return 1;
  if (v10)
    LODWORD(v10) = *(_DWORD *)(v10 + 16);
  if (v12)
    LODWORD(v12) = *(_DWORD *)(v12 + 16);
  if (v10 > v12)
    return 0;
  v15 = *(_QWORD *)(a1 + 24);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 16);
    v17 = *(_QWORD *)(v11 + 16);
    if (v16)
      v18 = *(_DWORD *)(v16 + 16);
    else
      v18 = 0;
  }
  else
  {
    v16 = 0;
    v18 = 0;
    v17 = *(_QWORD *)(v11 + 16);
  }
  if (v17)
    v19 = *(_DWORD *)(v17 + 16);
  else
    v19 = 0;
  if (v18 < v19)
    return 1;
  if (v16)
    LODWORD(v16) = *(_DWORD *)(v16 + 16);
  if (v17)
    LODWORD(v17) = *(_DWORD *)(v17 + 16);
  if (v16 > v17)
    return 0;
  v20 = *(_QWORD *)(a1 + 32);
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 16);
    v22 = a2[18];
    v23 = *(_QWORD *)(v22 + 32);
    if (v21)
      v24 = *(_DWORD *)(v21 + 16);
    else
      v24 = 0;
  }
  else
  {
    v21 = 0;
    v24 = 0;
    v22 = a2[18];
    v23 = *(_QWORD *)(v22 + 32);
  }
  if (v23)
    v25 = *(_DWORD *)(v23 + 16);
  else
    v25 = 0;
  if (v24 < v25)
    return 1;
  if (v21)
    LODWORD(v21) = *(_DWORD *)(v21 + 16);
  if (v23)
    LODWORD(v23) = *(_DWORD *)(v23 + 16);
  if (v21 > v23)
    return 0;
  v26 = *(_QWORD *)(a1 + 40);
  if (v26)
  {
    v27 = *(_QWORD *)(v26 + 16);
    v28 = *(_QWORD *)(v22 + 40);
    if (v27)
      v29 = *(_DWORD *)(v27 + 16);
    else
      v29 = 0;
  }
  else
  {
    v27 = 0;
    v29 = 0;
    v28 = *(_QWORD *)(v22 + 40);
  }
  if (v28)
    v30 = *(_DWORD *)(v28 + 16);
  else
    v30 = 0;
  if (v29 < v30)
    return 1;
  if (v27)
    LODWORD(v27) = *(_DWORD *)(v27 + 16);
  if (v28)
    LODWORD(v28) = *(_DWORD *)(v28 + 16);
  if (v27 > v28)
    return 0;
  v31 = *(double *)(a1 + 48);
  v32 = *(double *)(v22 + 8);
  if (v31 < v32)
    return 1;
  if (v31 > v32)
    return 0;
  v33 = *(double *)(a1 + 56);
  v34 = *(double *)(v11 + 8);
  if (v33 < v34)
    return 1;
  if (v33 > v34)
    return 0;
  v35 = *(_DWORD *)(a1 + 96);
  v36 = v35 << 26 >> 26;
  v37 = *(_DWORD *)(v11 + 4);
  if (v36 < (__int16)v37 >> 8)
    return 1;
  if (v36 > (__int16)v37 >> 8)
    return 0;
  if ((v37 & 0x1000000) != 0)
  {
    v38 = *(unsigned __int8 *)(a3 + 81);
    v39 = *(_DWORD *)(a1 + 96) & 0x40;
    if (v38 > v39 >> 6)
      return 1;
  }
  else
  {
    v38 = 0;
    v39 = *(_DWORD *)(a1 + 96) & 0x40;
  }
  if (v39 && !v38)
    return 0;
  v40 = v37 & 0x2000000;
  if ((v35 & 0x80) == 0 && v40)
    return 1;
  if ((v35 & 0x80) != 0 && !v40)
    return 0;
  if (v35 << 18 >> 26 < v37 << 12 >> 28 || *(_BYTE *)(v22 + 24) && (v35 & 0x4000) == 0)
    return 1;
  if ((v35 & 0x4000) != 0 && !*(_BYTE *)(v22 + 24))
    return 0;
  if (*(_BYTE *)(v22 + 25) && (v35 & 0x8000) == 0)
    return 1;
  if ((v35 & 0x8000) != 0 && !*(_BYTE *)(v22 + 25))
    return 0;
  return *(_DWORD *)(a1 + 100) < *(_DWORD *)(v22 + 28);
}

CGPoint *CG::DisplayListEntryGlyphs::setGlyphsAndPositions(CG::DisplayListEntryGlyphs *this, unsigned __int16 *a2, const CGPoint *a3, uint64_t a4)
{
  unsigned __int16 *v7;
  void *v9;
  CGPoint *result;

  v7 = (unsigned __int16 *)*((_QWORD *)this + 29);
  if (v7 != a2)
  {
    free(v7);
    *((_QWORD *)this + 29) = 0;
    v9 = malloc_type_malloc(2 * a4, 0x705560E0uLL);
    *((_QWORD *)this + 29) = v9;
    if (v9)
      memcpy(v9, a2, 2 * a4);
  }
  result = (CGPoint *)*((_QWORD *)this + 30);
  if (result != a3)
  {
    free(result);
    *((_QWORD *)this + 30) = 0;
    result = (CGPoint *)malloc_type_malloc(16 * a4, 0x705560E0uLL);
    *((_QWORD *)this + 30) = result;
    if (*((_QWORD *)this + 29))
      result = (CGPoint *)memcpy(result, a3, 16 * a4);
  }
  *((_QWORD *)this + 31) = a4;
  return result;
}

uint64_t CG::DisplayList::fontResourceForFont(CG::DisplayList *this, CGFont *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  char v33;

  if (!a2)
    return 0;
  v3 = (uint64_t *)((char *)this + 232);
  v4 = *((_QWORD *)this + 29);
  ++*((_QWORD *)this + 80);
  v5 = (uint64_t *)((char *)this + 232);
  if (!v4)
    goto LABEL_35;
  v5 = (uint64_t *)((char *)this + 232);
  do
  {
    v6 = *(_QWORD *)(v4 + 32);
    v7 = *(std::__shared_weak_count **)(v4 + 40);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = *(_QWORD *)(v6 + 16);
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    else
    {
      v10 = *(_QWORD *)(v6 + 16);
    }
    v12 = (uint64_t *)(v4 + 8);
    if (v10 >= (unint64_t)a2)
    {
      v12 = (uint64_t *)v4;
      v5 = (uint64_t *)v4;
    }
    v4 = *v12;
  }
  while (*v12);
  if (v3 == v5)
    goto LABEL_35;
  v13 = v5[4];
  v14 = (std::__shared_weak_count *)v5[5];
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  if (*(_QWORD *)(v13 + 16) >= (unint64_t)a2)
  {
    v19 = v5[4];
    v20 = (std::__shared_weak_count *)v5[5];
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      v17 = *(_QWORD *)(v19 + 16) <= (unint64_t)a2;
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    else
    {
      v17 = *(_QWORD *)(v19 + 16) <= (unint64_t)a2;
    }
  }
  else
  {
    v17 = 0;
  }
  if (!v14)
    goto LABEL_34;
  v24 = (unint64_t *)&v14->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (!v17)
      goto LABEL_35;
  }
  else
  {
LABEL_34:
    if (!v17)
    {
LABEL_35:
      v26 = operator new();
      *(_DWORD *)(v26 + 8) = 0x4000000;
      *(_QWORD *)v26 = &off_1E1629288;
      *(_QWORD *)(v26 + 16) = 0;
      CG::DisplayListResourceFont::setFont((CG::DisplayListResourceFont *)v26, a2);
      v27 = (uint64_t *)operator new(0x30uLL);
      v32[0] = v27;
      v32[1] = v3;
      std::shared_ptr<CG::DisplayListResourceFont>::shared_ptr[abi:se180100]<CG::DisplayListResourceFont,void>(v27 + 4, v26);
      v28 = (uint64_t **)(v3 - 1);
      v33 = 1;
      v29 = (uint64_t **)std::__tree<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,CG::CompareResourceCFTypeRef,std::allocator<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>>::__find_equal<std::shared_ptr<CG::DisplayListResourceCFTypeRef>>(v28, v5, &v31, &v30, v27 + 4);
      v5 = *v29;
      if (!*v29)
      {
        std::__tree<unsigned long>::__insert_node_at(v28, v31, v29, v27);
        v32[0] = 0;
        v5 = v27;
      }
      std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)v32);
    }
  }
  return v5[4];
}

void sub_1849DA398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<CG::DisplayListResourceCFTypeRef>,void *>>>>::reset[abi:se180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void CG::DisplayListResourceFont::setFont(CG::DisplayListResourceFont *this, _QWORD *cf)
{
  _QWORD *v3;
  int *font_info;
  double v6;

  v3 = (_QWORD *)*((_QWORD *)this + 2);
  if (v3 != cf)
  {
    if (v3)
      CFRelease(v3);
    if (cf)
    {
      CFRetain(cf);
      *((_QWORD *)this + 2) = cf;
      font_info = (int *)get_font_info(cf);
      if (font_info)
      {
        v6 = (double)font_info[2];
LABEL_9:
        *((double *)this + 3) = v6;
        return;
      }
    }
    else
    {
      *((_QWORD *)this + 2) = 0;
    }
    v6 = 0.0;
    goto LABEL_9;
  }
}

BOOL CG::CompareEntryStateDrawing::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  double v23;
  double v24;
  double v25;
  double v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    v2 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
    v3 = *(_QWORD *)(v3 + 16);
  if (v2)
  {
    v4 = *(_DWORD *)(v2 + 4);
    if (v3)
    {
LABEL_7:
      v5 = *(_DWORD *)(v3 + 4);
      goto LABEL_10;
    }
  }
  else
  {
    v4 = 0;
    if (v3)
      goto LABEL_7;
  }
  v5 = 0;
LABEL_10:
  if (v4 < v5)
    return 1;
  if (v2)
    LODWORD(v2) = *(_DWORD *)(v2 + 4);
  if (v3)
    LODWORD(v3) = *(_DWORD *)(v3 + 4);
  if (v2 > v3)
    return 0;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
    v7 = *(_QWORD *)(v7 + 16);
  v8 = *(_QWORD *)(a2 + 16);
  if (v8)
    v8 = *(_QWORD *)(v8 + 16);
  if (v7)
  {
    v9 = *(_DWORD *)(v7 + 16);
    if (v8)
    {
LABEL_24:
      v10 = *(_DWORD *)(v8 + 16);
      goto LABEL_27;
    }
  }
  else
  {
    v9 = 0;
    if (v8)
      goto LABEL_24;
  }
  v10 = 0;
LABEL_27:
  if (v9 < v10)
    return 1;
  if (v7)
    LODWORD(v7) = *(_DWORD *)(v7 + 16);
  if (v8)
    LODWORD(v8) = *(_DWORD *)(v8 + 16);
  if (v7 > v8)
    return 0;
  v11 = *(_QWORD *)(a1 + 24);
  if (v11)
    v11 = *(_QWORD *)(v11 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  if (v12)
    v12 = *(_QWORD *)(v12 + 16);
  if (v11)
  {
    v13 = *(_DWORD *)(v11 + 16);
    if (v12)
    {
LABEL_39:
      v14 = *(_DWORD *)(v12 + 16);
      goto LABEL_42;
    }
  }
  else
  {
    v13 = 0;
    if (v12)
      goto LABEL_39;
  }
  v14 = 0;
LABEL_42:
  if (v13 < v14)
    return 1;
  if (v11)
    LODWORD(v11) = *(_DWORD *)(v11 + 16);
  if (v12)
    LODWORD(v12) = *(_DWORD *)(v12 + 16);
  if (v11 > v12)
    return 0;
  v15 = *(_QWORD *)(a1 + 32);
  if (v15)
    v15 = *(_QWORD *)(v15 + 16);
  v16 = *(_QWORD *)(a2 + 32);
  if (v16)
    v16 = *(_QWORD *)(v16 + 16);
  if (v15)
    v17 = *(_DWORD *)(v15 + 16);
  else
    v17 = 0;
  if (v16)
    v18 = *(_DWORD *)(v16 + 16);
  else
    v18 = 0;
  if (v17 < v18)
    return 1;
  if (v15)
    LODWORD(v15) = *(_DWORD *)(v15 + 16);
  if (v16)
    LODWORD(v16) = *(_DWORD *)(v16 + 16);
  if (v15 > v16)
    return 0;
  v19 = *(_QWORD *)(a1 + 40);
  if (v19)
    v19 = *(_QWORD *)(v19 + 16);
  v20 = *(_QWORD *)(a2 + 40);
  if (v20)
    v20 = *(_QWORD *)(v20 + 16);
  if (v19)
    v21 = *(_DWORD *)(v19 + 16);
  else
    v21 = 0;
  if (v20)
    v22 = *(_DWORD *)(v20 + 16);
  else
    v22 = 0;
  if (v21 < v22)
    return 1;
  if (v19)
    LODWORD(v19) = *(_DWORD *)(v19 + 16);
  if (v20)
    LODWORD(v20) = *(_DWORD *)(v20 + 16);
  if (v19 > v20)
    return 0;
  v23 = *(double *)(a1 + 48);
  v24 = *(double *)(a2 + 48);
  if (v23 < v24)
    return 1;
  if (v23 > v24)
    return 0;
  v25 = *(double *)(a1 + 56);
  v26 = *(double *)(a2 + 56);
  if (v25 < v26)
    return 1;
  if (v25 > v26)
    return 0;
  v27 = *(_DWORD *)(a1 + 96);
  v28 = v27 << 26 >> 26;
  v29 = *(_DWORD *)(a2 + 96);
  if (v28 < v29 << 26 >> 26)
    return 1;
  if (v28 > v29 << 26 >> 26)
    return 0;
  if ((v27 & 0x40) == 0 && (v29 & 0x40) != 0)
    return 1;
  if ((v27 & 0x40) != 0 && (v29 & 0x40) == 0)
    return 0;
  if ((v27 & 0x80) == 0 && (v29 & 0x80) != 0)
    return 1;
  if ((v27 & 0x80) != 0 && (v29 & 0x80) == 0)
    return 0;
  v30 = v27 << 18 >> 26;
  if (v30 < v29 << 18 >> 26)
    return 1;
  if (v30 > v29 << 18 >> 26)
    return 0;
  if ((v27 & 0x4000) == 0 && (v29 & 0x4000) != 0)
    return 1;
  if ((v27 & 0x4000) != 0 && (v29 & 0x4000) == 0)
    return 0;
  v31 = *(_DWORD *)(a2 + 96) & 0x8000;
  if ((v27 & 0x8000) == 0 && v31)
    return 1;
  if ((v27 & 0x8000) != 0 && !v31)
    return 0;
  return *(_DWORD *)(a1 + 100) < *(_DWORD *)(a2 + 100);
}

CFTypeRef CG::DisplayListResourcePattern::setPattern(CG::DisplayListResourcePattern *this, CFTypeRef cf)
{
  CFTypeRef result;

  result = (CFTypeRef)*((_QWORD *)this + 2);
  if (result != cf)
  {
    if (result)
      CFRelease(result);
    result = CFRetain(cf);
    *((_QWORD *)this + 2) = result;
  }
  return result;
}

BOOL CGSizeEqualToSize(CGSize size1, CGSize size2)
{
  return size1.height == size2.height && size1.width == size2.width;
}

uint64_t CGGradientUsesPremultipliedInterpolation(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 20);
}

uint64_t shape_accum_add(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  signed int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  signed int v18;
  int v19;
  uint64_t v20;
  signed int v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  int *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;

  if (!a1)
    return 0xFFFFFFFFLL;
  v5 = *a1;
  if ((int)v5 < 3)
    return 0xFFFFFFFFLL;
  if ((int)a4 - (int)a2 < 1)
    return 0;
  v7 = a3;
  if ((int)a5 - (int)a3 < 1)
    return 0;
  v36 = *((_QWORD *)a1 + 3);
  v38 = *((_QWORD *)a1 + 2);
  v35 = (a5 - a3) * (a4 - a2);
  v9 = a1[1];
  v8 = a1[2];
  v10 = -1;
  v11 = v8;
  do
  {
    if (v11 != v9)
    {
      v12 = v9 + (((v11 - 1) * v11) >> 1);
      if (v11 < v9)
        v12 = v11 + (((v9 - 1) * v9) >> 1);
      v13 = a2;
      v14 = v7;
      v15 = a4;
      v16 = a5;
      result = shape_accum_cost(a2, v7, a4, a5, v35, (int *)(v38 + 16 * v11), (int *)(v36 + 4 * v12));
      if (!(_DWORD)result)
      {
        a1[2] = v11;
        return result;
      }
      if ((int)result < 0)
        v10 = v11;
      a5 = v16;
      v7 = v14;
      a4 = v15;
      a2 = v13;
    }
    if (v11 + 1 == (_DWORD)v5)
      v11 = 0;
    else
      ++v11;
  }
  while (v11 != v8);
  if (v10 < 1)
  {
    v18 = v9 == 0;
    v19 = 0x40000000;
    v20 = 1;
    v21 = v9;
    do
    {
      v22 = 0;
      do
      {
        if (*(_DWORD *)(*((_QWORD *)a1 + 3) + 4 * ((((int)v20 - 1) * (int)v20) >> 1) + 4 * v22) < v19)
        {
          v19 = *(_DWORD *)(*((_QWORD *)a1 + 3) + 4 * ((((int)v20 - 1) * (int)v20) >> 1) + 4 * v22);
          v21 = v20;
          v18 = v22;
        }
        ++v22;
      }
      while (v20 != v22);
      ++v20;
    }
    while (v20 != v5);
    if (v18 == v9)
    {
      v18 = v21;
    }
    else if (v21 != v9)
    {
      v23 = (_DWORD *)(v38 + 16 * v9);
      *v23 = a2;
      v23[1] = a4;
      v23[2] = v7;
      v23[3] = a5;
      v24 = (_DWORD *)(v38 + 16 * v21);
      LODWORD(a2) = *v24;
      LODWORD(a4) = v24[1];
      LODWORD(v7) = v24[2];
      LODWORD(a5) = v24[3];
      v9 = v21;
      *(_QWORD *)v24 = 0;
      *((_QWORD *)v24 + 1) = 0;
    }
    v25 = (int *)(v38 + 16 * v18);
    v26 = *v25;
    a1[1] = v9;
    v27 = v25[1];
    v37 = v26;
    if (v26 > (int)a2)
    {
      *v25 = a2;
      v37 = a2;
    }
    v28 = v25[2];
    if (v27 < (int)a4)
    {
      v25[1] = a4;
      v27 = a4;
    }
    v29 = v25[3];
    if (v28 > (int)v7)
    {
      v25[2] = v7;
      v28 = v7;
    }
    a1[2] = v18;
    if (v29 < (int)a5)
    {
      v25[3] = a5;
      v29 = a5;
    }
    v30 = 0;
    v31 = 0;
    v34 = *((_QWORD *)a1 + 3);
    do
    {
      if (v18 != v31)
      {
        v32 = v18 + ((((int)v31 - 1) * (int)v31) >> 1);
        if (v31 < v18)
          v32 = (((v18 - 1) * v18) >> 1) + v31;
        shape_accum_cost(v37, v28, v27, v29, (v29 - v28) * (v27 - v37), (int *)(v38 + 4 * (v30 & 0xFFFFFFFC)), (int *)(v34 + 4 * v32));
      }
      ++v31;
      v30 += 4;
      result = 1;
    }
    while (v5 != v31);
  }
  else
  {
    v17 = (_DWORD *)(v38 + 16 * v9);
    *v17 = a2;
    v17[1] = a4;
    v17[2] = v7;
    v17[3] = a5;
    a1[1] = v10;
    a1[2] = v9;
    return 1;
  }
  return result;
}

uint64_t shape_accum_cost(int a1, int a2, int a3, int a4, int a5, int *a6, int *a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v18;
  int v19;
  int v20;
  int v22;
  int v23;
  BOOL v24;

  v7 = *a6;
  v8 = a6[1];
  if (v8 <= *a6)
  {
    *a7 = 0;
    return 0xFFFFFFFFLL;
  }
  else
  {
    v9 = a6[2];
    v10 = a6[3];
    if (v7 >= a1)
      v11 = a1;
    else
      v11 = *a6;
    if (v8 <= a3)
      v12 = a3;
    else
      v12 = a6[1];
    v13 = v12 - v11;
    if (v9 >= a2)
      v14 = a2;
    else
      v14 = a6[2];
    if (v10 <= a4)
      v15 = a4;
    else
      v15 = a6[3];
    v16 = (v15 - v14) * v13 - (a5 + (v10 - v9) * (v8 - *a6));
    if (v16)
    {
      if (v10 >= a4)
        v10 = a4;
      if (v9 <= a2)
        v9 = a2;
      if (v8 >= a3)
        v8 = a3;
      if (v7 <= a1)
        v7 = a1;
      v18 = v8 - v7;
      v19 = v10 - v9;
      v20 = (v10 - v9) * v18;
      if (v19 <= 0 || v18 <= 0)
        v22 = 0;
      else
        v22 = v20;
      v23 = v22 + v16;
      *a7 = v23;
      if (v23)
        v24 = 0;
      else
        v24 = v20 == a5;
      return !v24;
    }
    else
    {
      *a7 = 0;
      return 1;
    }
  }
}

uint64_t CGColorSpaceCopyICCProfileDescription(uint64_t a1)
{
  uint64_t (*v1)(void);

  if (a1 && (v1 = *(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 104) + 24)) != 0)
    return v1();
  else
    return 0;
}

BOOL colorsync_transform_data_key_is_equal(uint64_t a1, uint64_t a2)
{
  __int128 v5;
  __int128 v6;

  v6 = *(_OWORD *)(a1 + 16);
  v5 = *(_OWORD *)(a2 + 16);
  if (*(_QWORD *)a1 != *(_QWORD *)a2 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
    return 0;
  return (_QWORD)v6 == (_QWORD)v5 && *((_QWORD *)&v6 + 1) == *((_QWORD *)&v5 + 1);
}

uint64_t CGContextDelegateGetOwnerIdentity(uint64_t a1)
{
  return *(unsigned int *)(a1 + 280);
}

uint64_t CGImageTextureDataGetColorSpace(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 96);
  return result;
}

uint64_t CGImageTextureDataGetNumberOfMipmaps(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 120);
  return result;
}

void CG::stroker::add_cubic_segment(CG::stroker *this, float64x2_t *a2)
{
  float64x2_t *v2;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  void *v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  char v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  float64x2_t v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  float64x2_t v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  float64x2_t v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  _QWORD v76[3];
  __int128 v77;
  __int128 v78;

  v2 = a2;
  v4 = a2[1].f64[0];
  v5 = a2[1].f64[1];
  if ((v5 - a2->f64[1]) * (v5 - a2->f64[1]) + (v4 - a2->f64[0]) * (v4 - a2->f64[0]) <= 0.00000001
    && (v6 = a2[2].f64[0], v7 = a2[2].f64[1], (v7 - v5) * (v7 - v5) + (v6 - v4) * (v6 - v4) <= 0.00000001)
    && (a2[3].f64[1] - v7) * (a2[3].f64[1] - v7) + (a2[3].f64[0] - v6) * (a2[3].f64[0] - v6) <= 0.00000001)
  {
    if (*((_DWORD *)this + 20) == 2)
      *((_DWORD *)this + 20) = 3;
  }
  else
  {
    *(_QWORD *)&v8 = *(_OWORD *)&CG::Cubic::derivative(a2, 0.0);
    *(double *)&v78 = v8;
    *((double *)&v78 + 1) = v9;
    v10 = *(double *)this;
    v11 = *((double *)this + 1);
    v13 = *((double *)this + 2);
    v12 = *((double *)this + 3);
    if (*(double *)this * v12 - v11 * v13 >= 0.0)
    {
      v16 = -v11;
      v17 = -v13;
      v14 = *((double *)this + 3);
      v15 = *(double *)this;
    }
    else
    {
      v14 = -v12;
      v15 = -v10;
      v16 = *((double *)this + 1);
      v17 = *((double *)this + 2);
    }
    v18 = v17 * v9 + v8 * v14;
    v19 = v15 * v9 + v8 * v16;
    if (v18 != 0.0 || v19 != 0.0)
    {
      v20 = sqrt(v19 * v19 + v18 * v18);
      v18 = v18 / v20;
      v19 = v19 / v20;
    }
    *(double *)&v77 = v18;
    *((double *)&v77 + 1) = v19;
    if (*((_DWORD *)this + 20) == 4)
    {
      v62 = *v2;
      CG::stroker::add_join(this, v62.f64, (double *)&v78, (double *)&v77);
    }
    else
    {
      *((_DWORD *)this + 20) = 4;
      *(_OWORD *)((char *)this + 104) = v78;
      *(_OWORD *)((char *)this + 120) = v77;
      v21 = v13 * v18 - v19 * v10 + v2->f64[0];
      v22 = v12 * v18 - v19 * v11 + v2->f64[1];
      v23 = *((_QWORD *)this + 9);
      v62.f64[0] = v21;
      v62.f64[1] = v22;
      if (v23)
        (*(void (**)(_QWORD, _QWORD, float64x2_t *, _QWORD))(v23 + 24))(*(_QWORD *)(v23 + 8), 0, &v62, *(_QWORD *)(v23 + 48));
    }
    *(_QWORD *)&v24 = *(_OWORD *)&CG::Cubic::derivative(v2, 1.0);
    *((double *)this + 19) = v24;
    *((double *)this + 20) = v25;
    v26 = *(double *)this;
    v27 = *((double *)this + 1);
    v29 = *((double *)this + 2);
    v28 = *((double *)this + 3);
    if (*(double *)this * v28 - v27 * v29 >= 0.0)
    {
      v27 = -v27;
      v29 = -v29;
    }
    else
    {
      v28 = -v28;
      v26 = -v26;
    }
    v30 = v29 * v25 + v24 * v28;
    v31 = v26 * v25 + v24 * v27;
    if (v30 != 0.0 || v31 != 0.0)
    {
      v32 = sqrt(v31 * v31 + v30 * v30);
      v30 = v30 / v32;
      v31 = v31 / v32;
    }
    *((double *)this + 21) = v30;
    *((double *)this + 22) = v31;
    CG::Cubic::points((CG::Cubic *)v76, v2);
    v33 = (void *)v76[0];
    if (v76[1] - v76[0] > 0x30uLL)
    {
      v34 = *(double *)(v76[0] + 16);
      if (((v34 - *(double *)v76[0]) * (*(double *)(v76[0] + 40) - *(double *)(v76[0] + 24))
          - (*(double *)(v76[0] + 24) - *(double *)(v76[0] + 8)) * (*(double *)(v76[0] + 32) - v34))
         * ((*(double *)(v76[0] + 32) - v34) * (*(double *)(v76[0] + 56) - *(double *)(v76[0] + 40))
          - (*(double *)(v76[0] + 40) - *(double *)(v76[0] + 24))
          * (*(double *)(v76[0] + 48) - *(double *)(v76[0] + 32))) > 0.0)
        goto LABEL_48;
      v35 = v2[6].f64[0];
      v36 = -1.0;
      if (v35 == 0.0)
      {
        v40 = 1;
      }
      else
      {
        v37 = v2[5].f64[0];
        v38 = v35 * 3.0;
        v39 = -v37;
        if (v37 < 0.0 && v38 > v39)
          goto LABEL_27;
        v40 = 1;
        if (v37 > 0.0)
        {
          v41 = -1.0;
          if (v38 >= v39)
          {
LABEL_31:
            v42 = v2[6].f64[1];
            if (v42 != 0.0)
            {
              if ((v43 = v2[5].f64[1], v44 = v42 * 3.0, v45 = -v43, v43 < 0.0) && v44 > v45 || v43 > 0.0 && v44 < v45)
              {
                v46 = v45 / v44;
                if ((v40 & 1) != 0)
                {
                  v41 = v46;
                }
                else if (vabdd_f64(v41, v46) >= 0.000001)
                {
                  v36 = v41 >= v46 ? v41 : v46;
                  if (v41 >= v46)
                    v41 = v46;
                }
              }
            }
            if (v41 != -1.0 || v36 != -1.0)
            {
              CG::Cubic::split(&v62, v41, v2);
              if (((v64 - v62.f64[1]) * (v64 - v62.f64[1]) + (v63 - v62.f64[0]) * (v63 - v62.f64[0]) > 0.00000001
                 || (v66 - v64) * (v66 - v64) + (v65 - v63) * (v65 - v63) > 0.00000001
                 || (v68 - v66) * (v68 - v66) + (v67 - v65) * (v67 - v65) > 0.00000001)
                && ((v71 - v69.f64[1]) * (v71 - v69.f64[1]) + (v70 - v69.f64[0]) * (v70 - v69.f64[0]) > 0.00000001
                 || (v73 - v71) * (v73 - v71) + (v72 - v70) * (v72 - v70) > 0.00000001
                 || (v75 - v73) * (v75 - v73) + (v74 - v72) * (v74 - v72) > 0.00000001))
              {
                CG::stroker::path_stroke_round_cube(this, &v62);
                v2 = &v69;
                if (v36 != -1.0)
                {
                  CG::Cubic::split(&v47, (v36 - v41) / (1.0 - v41), &v69);
                  if (((v49 - v47.f64[1]) * (v49 - v47.f64[1]) + (v48 - v47.f64[0]) * (v48 - v47.f64[0]) > 0.00000001
                     || (v51 - v49) * (v51 - v49) + (v50 - v48) * (v50 - v48) > 0.00000001
                     || (v53 - v51) * (v53 - v51) + (v52 - v50) * (v52 - v50) > 0.00000001)
                    && ((v57 - v55) * (v57 - v55) + (v56 - v54) * (v56 - v54) > 0.00000001
                     || (v59 - v57) * (v59 - v57) + (v58 - v56) * (v58 - v56) > 0.00000001
                     || (v61 - v59) * (v61 - v59) + (v60 - v58) * (v60 - v58) > 0.00000001))
                  {
                    CG::stroker::path_stroke_round_cube(this, &v47);
                    v2 = (float64x2_t *)&v54;
                  }
                  CG::stroker::path_stroke_round_cube(this, v2);
                  goto LABEL_65;
                }
              }
            }
LABEL_48:
            CG::stroker::path_stroke_round_cube(this, v2);
LABEL_65:
            operator delete(v33);
            return;
          }
LABEL_27:
          v40 = 0;
          v41 = v39 / v38;
          goto LABEL_31;
        }
      }
      v41 = -1.0;
      goto LABEL_31;
    }
    __break(1u);
  }
}

void sub_1849DB13C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void CG::stroker::add_join(CG::stroker *this, double *a2, double *a3, double *a4)
{
  int v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  uint64_t v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  uint64_t v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  uint64_t v78;
  __int128 v79;
  Point v80[4];
  double v81;
  double v82;
  double v83;
  double v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v8 = *((_DWORD *)this + 11);
  if (v8)
  {
    if (v8 != 1)
    {
      if (v8 != 2)
        abort();
      goto LABEL_15;
    }
    v32 = *((double *)this + 21);
    v33 = *((double *)this + 22);
    v34 = *((double *)this + 2);
    v35 = *((double *)this + 3);
    v37 = *(double *)this;
    v36 = *((double *)this + 1);
    v38 = v32 * v34 - v33 * *(double *)this;
    v39 = v32 * v35 - v33 * v36;
    v40 = a4[1];
    v17 = v34 * *a4 - v40 * *(double *)this;
    v18 = v35 * *a4 - v40 * v36;
    if ((v39 - v18) * (v39 - v18) + (v38 - v17) * (v38 - v17) < 0.05)
    {
LABEL_15:
      CG::stroker::add_bevel_join((uint64_t)this, a2, a3, a4);
      return;
    }
    v41 = -v33;
    v42 = a2[1] - v18;
    *((double *)this + 25) = *a2 - v17;
    *((double *)this + 26) = v42;
    v43 = *a4;
    v44 = a4[1];
    v45 = v32 + *a4;
    v46 = v33 + v44;
    v47 = sqrt(v46 * v46 + v45 * v45);
    if (v47 >= 0.001)
    {
      v49 = 2.66666667 / v47;
      if (vabdd_f64(v33, v44) <= vabdd_f64(v32, v43))
        v48 = -(v46 * -1.33333333 + v49 * v46) / (v32 - v43);
      else
        v48 = (v45 * -1.33333333 + v49 * v45) / (v33 - v44);
    }
    else
    {
      v48 = -1.33333333;
    }
    v60 = v32 + v33 * v48;
    v61 = v33 - v32 * v48;
    v62 = v34 * v60 - v61 * v37;
    v63 = v35 * v60 - v61 * v36;
    v64 = v43 * v48;
    v65 = v43 - v44 * v48;
    v66 = v44 + v64;
    v67 = v34 * v65 - v66 * v37;
    v68 = v35 * v65 - v66 * v36;
    if (v43 * v41 + v32 * v44 < 0.0 && v47 >= 0.001)
    {
      v69 = a2[1] - v39;
      *(double *)&v80[0].v = *a2 - v38;
      *(double *)&v80[2].v = v69;
      CG::stroker::push_opposite_element(this, kCGPathElementAddLineToPoint, v80);
      if (sqrt(*((double *)this + 20) * *((double *)this + 20) + *((double *)this + 19) * *((double *)this + 19)) < sqrt(v39 * v39 + v38 * v38)
        || sqrt(a3[1] * a3[1] + *a3 * *a3) < sqrt(v18 * v18 + v17 * v17))
      {
        CG::stroker::push_opposite_element(this, kCGPathElementAddLineToPoint, (const Point *)a2);
      }
      v70 = *((_QWORD *)this + 9);
      if (v70)
      {
        v71 = a2[1];
        v72 = v17 + *a2;
        v73 = v67 + *a2;
        *(double *)&v80[0].v = v62 + *a2;
        *(double *)&v80[2].v = v63 + v71;
        v81 = v73;
        v82 = v68 + v71;
        v83 = v72;
        v84 = v18 + v71;
        (*(void (**)(_QWORD, uint64_t, Point *, _QWORD))(v70 + 24))(*(_QWORD *)(v70 + 8), 3, v80, *(_QWORD *)(v70 + 48));
      }
      return;
    }
    v74 = a2[1] - v68;
    *(double *)&v80[0].v = *a2 - v67;
    *(double *)&v80[2].v = v74;
    CG::stroker::push_opposite_element(this, kCGPathElementAddCurveToPoint, v80);
    v75 = a2[1] - v63;
    *(double *)&v80[0].v = *a2 - v62;
    *(double *)&v80[2].v = v75;
    CG::stroker::push_opposite_element(this, kCGPathElementAddCurveToPoint, v80);
    v76 = a2[1] - v39;
    *(double *)&v80[0].v = *a2 - v38;
    *(double *)&v80[2].v = v76;
    CG::stroker::push_opposite_element(this, kCGPathElementAddCurveToPoint, v80);
    if (sqrt(*((double *)this + 20) * *((double *)this + 20) + *((double *)this + 19) * *((double *)this + 19)) < sqrt(v39 * v39 + v38 * v38)
      || sqrt(a3[1] * a3[1] + *a3 * *a3) < sqrt(v18 * v18 + v17 * v17))
    {
      v31 = *((_QWORD *)this + 9);
      *(_OWORD *)&v80[0].v = *(_OWORD *)a2;
      if (v31)
LABEL_37:
        (*(void (**)(_QWORD, uint64_t, Point *, _QWORD))(v31 + 24))(*(_QWORD *)(v31 + 8), 1, v80, *(_QWORD *)(v31 + 48));
    }
  }
  else
  {
    v10 = *((double *)this + 21);
    v9 = *((double *)this + 22);
    v11 = *((double *)this + 2);
    v12 = *((double *)this + 3);
    v13 = *((double *)this + 1);
    v14 = v10 * v11 - v9 * *(double *)this;
    v15 = v10 * v12 - v9 * v13;
    v16 = a4[1];
    v17 = v11 * *a4 - v16 * *(double *)this;
    v18 = v12 * *a4 - v16 * v13;
    if ((v15 - v18) * (v15 - v18) + (v14 - v17) * (v14 - v17) < 0.05)
      goto LABEL_15;
    v19 = a2[1] - v18;
    *((double *)this + 25) = *a2 - v17;
    *((double *)this + 26) = v19;
    if (*((double *)this + 6) * *((double *)this + 6) * (v9 * a4[1] + v10 * *a4 + 1.0) < 2.0)
      goto LABEL_15;
    v20 = a2[1] - v15;
    *(double *)&v80[0].v = *a2 - v14;
    *(double *)&v80[2].v = v20;
    CG::stroker::push_opposite_element(this, kCGPathElementAddLineToPoint, v80);
    if (*((double *)this + 21) * a4[1] - *((double *)this + 22) * *a4 >= 0.0)
    {
      v50 = *((double *)this + 19);
      v51 = *((double *)this + 20);
      v52 = a3[1];
      v53 = *a3 * v51 - v52 * v50;
      if (fabs(v53) >= 0.0001)
      {
        v54 = a2[1];
        v55 = v54 - v18;
        v56 = v54 - v15;
        v57 = *a2 - v14;
        v58 = ((*a2 - v17 - v57) * -v52 + *a3 * (v55 - v56)) / v53;
        *(double *)&v80[2].v = v57 + v50 * v58;
        v81 = v56 + v51 * v58;
        LOBYTE(v80[0].v) = 1;
        CG::stroker::push_opposite_element(this, kCGPathElementAddLineToPoint, &v80[2]);
        v50 = *((double *)this + 19);
        v51 = *((double *)this + 20);
      }
      if (sqrt(v51 * v51 + v50 * v50) < sqrt(v15 * v15 + v14 * v14)
        || sqrt(a3[1] * a3[1] + *a3 * *a3) < sqrt(v18 * v18 + v17 * v17))
      {
        v59 = *((_QWORD *)this + 9);
        v79 = *(_OWORD *)a2;
        if (v59)
          (*(void (**)(_QWORD, uint64_t, __int128 *, _QWORD))(v59 + 24))(*(_QWORD *)(v59 + 8), 1, &v79, *(_QWORD *)(v59 + 48));
      }
      goto LABEL_38;
    }
    v21 = *((double *)this + 19);
    v22 = *((double *)this + 20);
    if (sqrt(v22 * v22 + v21 * v21) < sqrt(v15 * v15 + v14 * v14)
      || (v23 = *a3, v24 = a3[1], sqrt(v24 * v24 + v23 * v23) < sqrt(v18 * v18 + v17 * v17)))
    {
      CG::stroker::push_opposite_element(this, kCGPathElementAddLineToPoint, (const Point *)a2);
      v21 = *((double *)this + 19);
      v22 = *((double *)this + 20);
      v23 = *a3;
      v24 = a3[1];
    }
    v25 = v23 * v22 - v24 * v21;
    if (fabs(v25) >= 0.0001)
    {
      v26 = a2[1];
      v27 = v18 + v26;
      v28 = v15 + v26;
      v29 = v14 + *a2;
      v30 = ((v17 + *a2 - v29) * -v24 + v23 * (v27 - v28)) / v25;
      v31 = *((_QWORD *)this + 9);
      *(double *)&v80[0].v = v29 + v21 * v30;
      *(double *)&v80[2].v = v28 + v22 * v30;
      if (v31)
        goto LABEL_37;
    }
  }
LABEL_38:
  v77 = v18 + a2[1];
  v78 = *((_QWORD *)this + 9);
  *(double *)&v80[0].v = v17 + *a2;
  *(double *)&v80[2].v = v77;
  if (v78)
    (*(void (**)(_QWORD, uint64_t, Point *, _QWORD))(v78 + 24))(*(_QWORD *)(v78 + 8), 1, v80, *(_QWORD *)(v78 + 48));
}

void CG::stroker::add_bevel_join(uint64_t a1, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  __int128 v23;

  v5 = *(double *)(a1 + 168);
  v4 = *(double *)(a1 + 176);
  v6 = *(double *)(a1 + 16);
  v7 = *(double *)(a1 + 24);
  v8 = *(double *)(a1 + 8);
  v9 = v5 * v6 - v4 * *(double *)a1;
  v10 = v5 * v7 - v4 * v8;
  v11 = a4[1];
  v12 = v6 * *a4 - v11 * *(double *)a1;
  v13 = v7 * *a4 - v11 * v8;
  if ((v10 - v13) * (v10 - v13) + (v9 - v12) * (v9 - v12) >= *(double *)(a1 + 64) * *(double *)(a1 + 64))
  {
    v18 = a2[1] - v13;
    *(double *)(a1 + 200) = *a2 - v12;
    *(double *)(a1 + 208) = v18;
    v19 = a2[1] - v10;
    *(double *)&v23 = *a2 - v9;
    *((double *)&v23 + 1) = v19;
    CG::stroker::push_opposite_element((CG::stroker *)a1, kCGPathElementAddLineToPoint, (const Point *)&v23);
    if (sqrt(*(double *)(a1 + 160) * *(double *)(a1 + 160) + *(double *)(a1 + 152) * *(double *)(a1 + 152)) < sqrt(v10 * v10 + v9 * v9)
      || sqrt(a3[1] * a3[1] + *a3 * *a3) < sqrt(v13 * v13 + v12 * v12))
    {
      if (*(double *)(a1 + 168) * a4[1] - *(double *)(a1 + 176) * *a4 >= 0.0)
      {
        v20 = *(_QWORD *)(a1 + 72);
        v23 = *(_OWORD *)a2;
        if (v20)
          (*(void (**)(_QWORD, uint64_t, __int128 *, _QWORD))(v20 + 24))(*(_QWORD *)(v20 + 8), 1, &v23, *(_QWORD *)(v20 + 48));
      }
      else
      {
        CG::stroker::push_opposite_element((CG::stroker *)a1, kCGPathElementAddLineToPoint, (const Point *)a2);
      }
    }
    v21 = v13 + a2[1];
    v22 = *(_QWORD *)(a1 + 72);
    *(double *)&v23 = v12 + *a2;
    *((double *)&v23 + 1) = v21;
    if (v22)
      (*(void (**)(_QWORD, uint64_t, __int128 *, _QWORD))(v22 + 24))(*(_QWORD *)(v22 + 8), 1, &v23, *(_QWORD *)(v22 + 48));
  }
}

void CG::stroker::path_stroke_round_cube(CG::stroker *this, float64x2_t *a2)
{
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  double v42[15];
  _QWORD v43[3];

  CG::Cubic::points((CG::Cubic *)v43, a2);
  v4 = (void *)v43[0];
  if (v43[1] - v43[0] <= 0x30uLL)
  {
    __break(1u);
  }
  else
  {
    v5 = *(double *)(v43[0] + 16);
    v6 = *(double *)(v43[0] + 24);
    v7 = v5 - *(double *)v43[0];
    v8 = v6 - *(double *)(v43[0] + 8);
    v9 = *(double *)(v43[0] + 32);
    v10 = *(double *)(v43[0] + 40);
    v11 = v9 - v5;
    v12 = v10 - v6;
    if (v8 * v12 + v7 * v11 >= 0.0
      && v12 * (*(double *)(v43[0] + 56) - v10) + v11 * (*(double *)(v43[0] + 48) - v9) >= 0.0)
    {
      CG::stroker::path_stroke_round_cube_offset(this, a2, 4, 1);
      v19 = a2[2];
      v35 = a2[3];
      v36 = v19;
      v20 = *a2;
      v37 = a2[1];
      v38 = v20;
      v21 = vsubq_f64(v36, v35);
      __asm { FMOV            V2.2D, #3.0 }
      v27 = vsubq_f64(v37, v36);
      v39 = vmulq_f64(v21, _Q2);
      v40 = vmulq_f64(vsubq_f64(v27, v21), _Q2);
      v41 = vaddq_f64(v21, vsubq_f64(vsubq_f64(v38, v37), vaddq_f64(v27, v27)));
      CG::stroker::path_stroke_round_cube_offset(this, &v35, 4, -1);
    }
    else
    {
      v14 = a2[1].f64[0];
      v13 = a2[1].f64[1];
      v16 = a2->f64[0];
      v15 = a2->f64[1];
      if ((v13 - v15) * (v13 - v15) + (v14 - a2->f64[0]) * (v14 - a2->f64[0]) <= 0.00000001
        && (v17 = a2[2].f64[0], v18 = a2[2].f64[1], (v18 - v13) * (v18 - v13) + (v17 - v14) * (v17 - v14) <= 0.00000001)
        && (a2[3].f64[1] - v18) * (a2[3].f64[1] - v18) + (a2[3].f64[0] - v17) * (a2[3].f64[0] - v17) <= 0.00000001)
      {
        v35.f64[0] = v16 - CG::stroker::offset_normal((double *)this, a2, 0, 0.0);
        v35.f64[1] = v15 - v28;
        CG::stroker::push_opposite_element(this, kCGPathElementAddLineToPoint, (const Point *)&v35);
        v29 = a2[3].f64[0];
        v30 = a2[3].f64[1];
        v31 = CG::stroker::offset_normal((double *)this, a2, 0, 1.0);
        v33 = v32;
        v34 = *((_QWORD *)this + 9);
        v35.f64[0] = v29 + v31;
        v35.f64[1] = v30 + v32;
        if (v34)
          (*(void (**)(_QWORD, uint64_t, float64x2_t *, _QWORD))(v34 + 24))(*(_QWORD *)(v34 + 8), 1, &v35, *(_QWORD *)(v34 + 48));
        *((double *)this + 25) = v29 - v31;
        *((double *)this + 26) = v30 - v33;
      }
      else
      {
        CG::Cubic::split(&v35, 0.5, a2);
        if (v16 != v35.f64[0]
          || v15 != v35.f64[1]
          || v14 != v36.f64[0]
          || v13 != v36.f64[1]
          || a2[2].f64[0] != v37.f64[0]
          || a2[2].f64[1] != v37.f64[1]
          || a2[3].f64[0] != v38.f64[0]
          || a2[3].f64[1] != v38.f64[1])
        {
          CG::stroker::path_stroke_round_cube(this, (const CG::Cubic *)&v35);
          if (a2->f64[0] != v42[0]
            || a2->f64[1] != v42[1]
            || a2[1].f64[0] != v42[2]
            || a2[1].f64[1] != v42[3]
            || a2[2].f64[0] != v42[4]
            || a2[2].f64[1] != v42[5]
            || a2[3].f64[0] != v42[6]
            || a2[3].f64[1] != v42[7])
          {
            CG::stroker::path_stroke_round_cube(this, (const CG::Cubic *)v42);
          }
        }
      }
    }
    operator delete(v4);
  }
}

void sub_1849DBD88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void CG::stroker::path_stroke_round_cube_offset(CG::stroker *this, float64x2_t *a2, int a3, int a4)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  float64x2_t v23;
  float64x2_t v24;
  const Point *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  double v38;
  double *v39;
  double v40;
  double v41;
  double v42;
  double *v43;
  int v44;
  uint64_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v49;
  float64x2_t v50;
  _BOOL4 v51;
  _BOOL4 v61;
  double v62;
  double v63;
  double v64;
  double v65;
  BOOL v66;
  _BOOL4 v67;
  uint64_t v68;
  double v69;
  double v70;
  double v71;
  const CG::Cubic *v72;
  CG::stroker *v73;
  int v74;
  int v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  Point v79[4];
  float64x2_t v80;
  float64x2_t v81;
  __int128 v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  Point v86[4];
  double v87;
  double v88;
  Point v89[4];
  double v90;
  double v91;
  double v92[2];
  double v93;
  double v94;
  Point v95[4];
  double v96;
  double v97;
  double v98;
  double v99;
  float64x2_t v100[2];
  double v101;
  double v102;
  _QWORD v103[16];

  v103[15] = *MEMORY[0x1E0C80C00];
  v7 = a2[3].f64[0];
  v8 = a2[3].f64[1];
  v9 = a2->f64[0];
  v10 = a2->f64[1];
  if ((v8 - v10) * (v8 - v10) + (v7 - a2->f64[0]) * (v7 - a2->f64[0]) <= 0.00000001)
  {
    v34 = v7 + CG::stroker::offset_normal((double *)this, a2, 0, 1.0);
    v36 = v8 + v35;
    *(double *)&v79[0].v = v34;
    *(double *)&v79[2].v = v36;
    if (a4 < 0)
    {
      CG::stroker::push_opposite_element(this, kCGPathElementAddLineToPoint, v79);
      v69 = a2->f64[0];
      v70 = a2->f64[1];
      *((double *)this + 25) = v69 + CG::stroker::offset_normal((double *)this, a2, 0, 0.0);
      *((double *)this + 26) = v70 + v71;
    }
    else
    {
      v37 = *((_QWORD *)this + 9);
      v100[0].f64[0] = v34;
      v100[0].f64[1] = v36;
      if (v37)
        (*(void (**)(_QWORD, uint64_t, float64x2_t *, _QWORD))(v37 + 24))(*(_QWORD *)(v37 + 8), 1, v100, *(_QWORD *)(v37 + 48));
    }
  }
  else
  {
    v98 = 0.0;
    v99 = 0.0;
    v12 = v9 + CG::stroker::offset_normal((double *)this, a2, &v98, 0.0);
    v14 = v10 + v13;
    v96 = 0.0;
    v97 = 0.0;
    v15 = v7 + CG::stroker::offset_normal((double *)this, a2, &v96, 1.0);
    v17 = v8 + v16;
    __asm { FMOV            V1.2D, #0.5 }
    v23 = a2[4];
    v24 = vaddq_f64(vmulq_f64(a2[6], _Q1), a2[5]);
    *(double *)&v95[0].v = v15;
    *(double *)&v95[2].v = v17;
    v93 = 0.0;
    v94 = 0.0;
    v77 = vaddq_f64(*a2, vmulq_f64(vaddq_f64(vmulq_f64(v24, _Q1), v23), _Q1));
    v26 = v77.f64[0] + CG::stroker::offset_normal((double *)this, a2, &v93, 0.5);
    v28 = v77.f64[1] + v27;
    v29 = v26 + ((v26 - v12) * 0.5 + (v26 - v15) * 0.5) / 3.0;
    v30 = v28 + ((v28 - v14) * 0.5 + (v28 - v17) * 0.5) / 3.0;
    v92[0] = v29;
    v92[1] = v30;
    v31 = -v94;
    v32 = v93 * v99 - v94 * v98;
    v33 = fabs(v32);
    if (v33 >= 0.0001)
    {
      v38 = ((v29 - v12) * v31 + v93 * (v30 - v14)) / v32;
      v90 = v12 + v98 * v38;
      v91 = v14 + v99 * v38;
    }
    else
    {
      v90 = 0.0;
      v91 = 0.0;
    }
    v39 = &v90;
    if (v33 < 0.0001)
      v39 = v92;
    *(_OWORD *)&v89[0].v = *(_OWORD *)v39;
    v40 = v96 * v31 + v93 * v97;
    v41 = fabs(v40);
    if (v41 >= 0.0001)
    {
      v42 = ((v29 - v15) * v31 + v93 * (v30 - v17)) / v40;
      v87 = v15 + v96 * v42;
      v88 = v17 + v97 * v42;
    }
    else
    {
      v87 = 0.0;
      v88 = 0.0;
    }
    v43 = &v87;
    if (v41 < 0.0001)
      v43 = v92;
    *(_OWORD *)&v86[0].v = *(_OWORD *)v43;
    _VF = __OFSUB__(a3, 1);
    v44 = a3 - 1;
    if (v44 < 0 != _VF)
    {
LABEL_57:
      if (a4 < 0)
      {
        CG::stroker::push_opposite_element(this, kCGPathElementAddCurveToPoint, v89);
        CG::stroker::push_opposite_element(this, kCGPathElementAddCurveToPoint, v86);
        CG::stroker::push_opposite_element(this, kCGPathElementAddCurveToPoint, v95);
        *((double *)this + 25) = v12;
        *((double *)this + 26) = v14;
      }
      else
      {
        v68 = *((_QWORD *)this + 9);
        if (v68)
        {
          v100[0] = *(float64x2_t *)&v89[0].v;
          v100[1] = *(float64x2_t *)&v86[0].v;
          v101 = v15;
          v102 = v17;
          (*(void (**)(_QWORD, uint64_t, float64x2_t *, _QWORD))(v68 + 24))(*(_QWORD *)(v68 + 8), 3, v100, *(_QWORD *)(v68 + 48));
        }
      }
    }
    else
    {
      v45 = 0;
      *(double *)&v79[0].v = v12;
      *(double *)&v79[2].v = v14;
      v46 = *(float64x2_t *)v43;
      v80 = *(float64x2_t *)v39;
      v81 = v46;
      v47 = vsubq_f64(v80, *(float64x2_t *)&v79[0].v);
      __asm { FMOV            V4.2D, #3.0 }
      v82 = *(_OWORD *)&v95[0].v;
      v83 = vmulq_f64(v47, _Q4);
      v49 = vsubq_f64(v46, v80);
      v50 = vmulq_f64(vsubq_f64(v49, v47), _Q4);
      v84 = v50;
      v85 = vaddq_f64(v47, vsubq_f64(vsubq_f64(*(float64x2_t *)&v95[0].v, v46), vaddq_f64(v49, v49)));
      v51 = (*(_QWORD *)&v85.f64[1] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL;
      v61 = (*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
         || (*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
         || (*(_QWORD *)&v80.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
         || (*(_QWORD *)&v80.f64[1] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
         || (*(_QWORD *)&v46.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
         || (*(_QWORD *)&v46.f64[1] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
         || (*(_QWORD *)&v95[0].v & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
         || (*(_QWORD *)&v95[2].v & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
         || (*(_QWORD *)&v83.f64[1] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
         || (*(_QWORD *)&v50.f64[1] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL;
      while (1)
      {
        *(_QWORD *)&v50.f64[0] = CG::stroker::path_stroke_round_cube_offset(CG::Cubic const&,int,int)::samples[v45];
        v62 = v28;
        v63 = v26;
        if (v45 * 8)
        {
          v76 = vaddq_f64(*a2, vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(a2[6], v50.f64[0]), a2[5]), v50.f64[0]), a2[4]), v50.f64[0]));
          v78 = v50;
          v64 = CG::stroker::offset_normal((double *)this, a2, 0, v50.f64[0]);
          v50 = v78;
          v63 = v76.f64[0] + v64;
          v62 = v76.f64[1] + v65;
        }
        v66 = (*(_QWORD *)&v63 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
           && (*(_QWORD *)&v62 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
        v67 = !v66 || v61;
        if (!v67
          && !v51
          && (CG::Cubic::is_near((CG::Cubic *)v79, v25, v63, v62, v50.f64[0], *((double *)this + 8)) & 1) == 0)
        {
          break;
        }
        if (++v45 == 5)
          goto LABEL_57;
      }
      CG::Cubic::split(v100, 0.5, a2);
      if (a4 < 0)
      {
        CG::stroker::path_stroke_round_cube_offset(this, (const CG::Cubic *)v103, v44, -1);
        v72 = (const CG::Cubic *)v100;
        v73 = this;
        v74 = v44;
        v75 = -1;
      }
      else
      {
        CG::stroker::path_stroke_round_cube_offset(this, (const CG::Cubic *)v100, v44, a4);
        v72 = (const CG::Cubic *)v103;
        v73 = this;
        v74 = v44;
        v75 = a4;
      }
      CG::stroker::path_stroke_round_cube_offset(v73, v72, v74, v75);
    }
  }
}

double CG::stroker::offset_normal(double *a1, float64x2_t *this, double *a3, double a4)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;

  *(_QWORD *)&v6 = *(_OWORD *)&CG::Cubic::derivative(this, a4);
  if (a3)
  {
    *a3 = v6;
    a3[1] = v7;
  }
  v8 = *a1;
  v9 = a1[1];
  v11 = a1[2];
  v10 = a1[3];
  if (*a1 * v10 - v9 * v11 >= 0.0)
  {
    v14 = -v9;
    v15 = -v11;
    v12 = a1[3];
    v13 = *a1;
  }
  else
  {
    v12 = -v10;
    v13 = -v8;
    v14 = a1[1];
    v15 = a1[2];
  }
  v16 = v7 * v15 + v6 * v12;
  v17 = v7 * v13 + v6 * v14;
  v18 = -v17;
  if (v17 != 0.0 || v16 != 0.0)
  {
    v19 = sqrt(v16 * v16 + v17 * v17);
    v18 = v18 / v19;
    v16 = v16 / v19;
  }
  return v11 * v16 + v18 * v8;
}

float64x2_t CG::Cubic::derivative(float64x2_t *this, double a2)
{
  float64x2_t v2;
  float64x2_t result;
  float64x2_t v4;

  if (a2 == 0.0)
  {
    v2 = *this;
    result = vsubq_f64(this[1], *this);
    if (vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(result, result).f64[1]), result.f64[0], result.f64[0]) <= 0.00000001)
    {
      result = vsubq_f64(this[2], v2);
      if (vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(result, result).f64[1]), result.f64[0], result.f64[0]) <= 0.00000001)
        return vsubq_f64(this[3], v2);
    }
  }
  else if (a2 == 1.0)
  {
    v4 = this[3];
    result = vsubq_f64(v4, this[2]);
    if (vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(result, result).f64[1]), result.f64[0], result.f64[0]) <= 0.00000001)
    {
      result = vsubq_f64(v4, this[1]);
      if (vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(result, result).f64[1]), result.f64[0], result.f64[0]) <= 0.00000001)
        return vsubq_f64(v4, *this);
    }
  }
  else
  {
    __asm { FMOV            V2.2D, #3.0 }
    return vaddq_f64(this[4], vmulq_n_f64(vaddq_f64(vmulq_n_f64(vmulq_f64(this[6], _Q2), a2), vaddq_f64(this[5], this[5])), a2));
  }
  return result;
}

void CG::stroker::push_opposite_element(CG::stroker *this, CGPathElementType a2, const Point *a3)
{
  unint64_t v5;
  char *v6;
  _DWORD *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  _BYTE v15[20];

  *(_OWORD *)&v15[4] = *(_OWORD *)&a3->v;
  v6 = (char *)*((_QWORD *)this + 28);
  v5 = *((_QWORD *)this + 29);
  if ((unint64_t)v6 >= v5)
  {
    v8 = (char *)*((_QWORD *)this + 27);
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v8) >> 3) + 1;
    if (v9 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)v8) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:se180100]();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * ((v6 - v8) >> 3)];
    *(_DWORD *)v13 = a2;
    *(_OWORD *)(v13 + 4) = *(_OWORD *)v15;
    *((_DWORD *)v13 + 5) = *(_DWORD *)&v15[16];
    v7 = v13 + 24;
    if (v6 != v8)
    {
      do
      {
        v14 = *(_OWORD *)(v6 - 24);
        *((_QWORD *)v13 - 1) = *((_QWORD *)v6 - 1);
        *(_OWORD *)(v13 - 24) = v14;
        v13 -= 24;
        v6 -= 24;
      }
      while (v6 != v8);
      v6 = (char *)*((_QWORD *)this + 27);
    }
    *((_QWORD *)this + 27) = v13;
    *((_QWORD *)this + 28) = v7;
    *((_QWORD *)this + 29) = &v12[24 * v11];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_DWORD *)v6 = a2;
    *(_OWORD *)(v6 + 4) = *(_OWORD *)v15;
    *((_DWORD *)v6 + 5) = *(_DWORD *)&v15[16];
    v7 = v6 + 24;
  }
  *((_QWORD *)this + 28) = v7;
}

void CG::Cubic::points(CG::Cubic *this, _OWORD *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _OWORD *v9;
  void *v10;
  _OWORD *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  _OWORD *v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  unint64_t v27;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v4 = operator new(0x10uLL);
  *v4 = *a2;
  *(_QWORD *)this = v4;
  *((_QWORD *)this + 1) = v4 + 1;
  *((_QWORD *)this + 2) = v4 + 1;
  v5 = std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(2uLL);
  v7 = v6;
  v8 = (char *)&v5[v6];
  v5[1] = a2[1];
  v9 = v5 + 2;
  *v5 = *v4;
  v10 = *(void **)this;
  *(_QWORD *)this = v5;
  *((_QWORD *)this + 1) = v5 + 2;
  *((_QWORD *)this + 2) = v8;
  if (v10)
    operator delete(v10);
  *((_QWORD *)this + 1) = v9;
  v11 = a2 + 2;
  if (v7 < 3)
  {
    v13 = 3;
    if ((unint64_t)((v8 - (char *)v5) >> 3) > 3)
      v13 = (v8 - (char *)v5) >> 3;
    if ((unint64_t)(v8 - (char *)v5) >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v14 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(v14);
    else
      v15 = 0;
    v16 = 0;
    v17 = v14 + 32;
    v8 = (char *)(v14 + 16 * v15);
    *(_OWORD *)(v14 + 32) = *v11;
    v12 = (char *)(v14 + 48);
    do
    {
      *(_OWORD *)(v17 + v16 * 16 - 16) = v5[v16 + 1];
      --v16;
    }
    while (v16 != -2);
    v18 = *(void **)this;
    *(_QWORD *)this = v17 - 32;
    *((_QWORD *)this + 1) = v12;
    *((_QWORD *)this + 2) = v8;
    if (v18)
    {
      operator delete(v18);
      v8 = (char *)*((_QWORD *)this + 2);
    }
  }
  else
  {
    *v9 = *v11;
    v12 = (char *)(v5 + 3);
  }
  *((_QWORD *)this + 1) = v12;
  v19 = a2 + 3;
  if (v12 < v8)
  {
    *(_OWORD *)v12 = *v19;
    v20 = v12 + 16;
    goto LABEL_34;
  }
  v21 = *(char **)this;
  v22 = (uint64_t)&v12[-*(_QWORD *)this] >> 4;
  v23 = v22 + 1;
  if ((unint64_t)(v22 + 1) >> 60)
    std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
  if ((v8 - v21) >> 3 > v23)
    v23 = (v8 - v21) >> 3;
  if ((unint64_t)(v8 - v21) >= 0x7FFFFFFFFFFFFFF0)
    v24 = 0xFFFFFFFFFFFFFFFLL;
  else
    v24 = v23;
  if (v24)
    v24 = (unint64_t)std::__allocate_at_least[abi:se180100]<std::allocator<CGPoint>>(v24);
  else
    v25 = 0;
  v26 = (_OWORD *)(v24 + 16 * v22);
  v27 = v24 + 16 * v25;
  *v26 = *v19;
  v20 = v26 + 1;
  if (v12 == v21)
  {
    *(_QWORD *)this = v26;
    *((_QWORD *)this + 1) = v20;
    *((_QWORD *)this + 2) = v27;
LABEL_33:
    operator delete(v12);
    goto LABEL_34;
  }
  do
  {
    *--v26 = *((_OWORD *)v12 - 1);
    v12 -= 16;
  }
  while (v12 != v21);
  v12 = *(char **)this;
  *(_QWORD *)this = v26;
  *((_QWORD *)this + 1) = v20;
  *((_QWORD *)this + 2) = v27;
  if (v12)
    goto LABEL_33;
LABEL_34:
  *((_QWORD *)this + 1) = v20;
}

void sub_1849DC850(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void CG::dasher::add_path_dash_segment<CG::Cubic>(double *a1, float64x2_t *a2, double a3, double a4)
{
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  float64_t v15;
  double v16;
  double v17;
  float64x2_t v18;
  float64x2_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  float64x2_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  float64x2_t v35;
  float64x2_t v36;
  double v37;
  double v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  _OWORD v61[3];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v8 = a2[1];
  v47 = *a2;
  v48 = v8;
  v9 = a2[3];
  v49 = a2[2];
  v50 = v9;
  v10 = a2[5];
  v51 = a2[4];
  v52 = v10;
  v53 = a2[6];
  v11 = a1[6];
  v12 = a1[7];
  v13 = a1[4];
  v14 = a1[5];
  v15 = v47.f64[1] * v12 + v47.f64[0] * v14;
  v10.f64[0] = v12 * v48.f64[1] + v48.f64[0] * v14;
  v16 = v12 * v49.f64[1] + v49.f64[0] * v14;
  v17 = v12 * v50.f64[1] + v50.f64[0] * v14;
  v47.f64[0] = v47.f64[1] * v11 + v47.f64[0] * v13;
  v47.f64[1] = v15;
  v48.f64[0] = v11 * v48.f64[1] + v48.f64[0] * v13;
  v48.f64[1] = v10.f64[0];
  v49.f64[0] = v11 * v49.f64[1] + v49.f64[0] * v13;
  v49.f64[1] = v16;
  v50.f64[0] = v11 * v50.f64[1] + v50.f64[0] * v13;
  v50.f64[1] = v17;
  v18 = vsubq_f64(v48, v47);
  __asm { FMOV            V5.2D, #3.0 }
  v24 = vsubq_f64(v49, v48);
  v39 = _Q5;
  v51 = vmulq_f64(v18, _Q5);
  v52 = vmulq_f64(vsubq_f64(v24, v18), _Q5);
  v53 = vaddq_f64(v18, vsubq_f64(vsubq_f64(v50, v49), vaddq_f64(v24, v24)));
  CG::Cubic::index(&v47, a3);
  CG::Cubic::split(&v47, v25, a2);
  if (*((_BYTE *)a1 + 144))
  {
    v26 = *a1;
    v40 = v54;
    if (v26 != 0.0)
      (*(void (**)(_QWORD, _QWORD, float64x2_t *, _QWORD))(*(_QWORD *)&v26 + 24))(*(_QWORD *)(*(_QWORD *)&v26 + 8), 0, &v40, *(_QWORD *)(*(_QWORD *)&v26 + 48));
  }
  if (a3 == a4)
  {
    v27 = CG::Cubic::derivative(&v54, 0.0).f64[0];
    v29.f64[0] = v27;
    v29.f64[1] = v28;
    if (v27 != 0.0 || v28 != 0.0)
      v29 = vdivq_f64(v29, (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt(v28 * v28 + v27 * v27)), 0));
    v30 = *a1;
    v40 = vaddq_f64(vmulq_f64(v29, (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL)), v54);
    if (v30 != 0.0)
      (*(void (**)(_QWORD, uint64_t, float64x2_t *, _QWORD))(*(_QWORD *)&v30 + 24))(*(_QWORD *)(*(_QWORD *)&v30 + 8), 1, &v40, *(_QWORD *)(*(_QWORD *)&v30 + 48));
  }
  else
  {
    v40 = v54;
    v41 = v55;
    v42 = v56;
    v43 = v57;
    v44 = v58;
    v45 = v59;
    v46 = v60;
    v31 = a1[6];
    v32 = a1[7];
    v33 = a1[4];
    v34 = a1[5];
    v40.f64[0] = v54.f64[1] * v31 + v54.f64[0] * v33;
    v40.f64[1] = v54.f64[1] * v32 + v54.f64[0] * v34;
    v41.f64[0] = v31 * v55.f64[1] + v55.f64[0] * v33;
    v41.f64[1] = v32 * v55.f64[1] + v55.f64[0] * v34;
    v42.f64[0] = v31 * v56.f64[1] + v56.f64[0] * v33;
    v42.f64[1] = v32 * v56.f64[1] + v56.f64[0] * v34;
    v43.f64[0] = v31 * v57.f64[1] + v57.f64[0] * v33;
    v43.f64[1] = v32 * v57.f64[1] + v57.f64[0] * v34;
    v35 = vsubq_f64(v41, v40);
    v36 = vsubq_f64(v42, v41);
    v44 = vmulq_f64(v35, v39);
    v45 = vmulq_f64(vsubq_f64(v36, v35), v39);
    v46 = vaddq_f64(v35, vsubq_f64(vsubq_f64(v43, v42), vaddq_f64(v36, v36)));
    CG::Cubic::index(&v40, a4 - a3);
    CG::Cubic::split(&v40, v37, &v54);
    v38 = *a1;
    if (*(_QWORD *)a1)
    {
      v61[0] = v41;
      v61[1] = v42;
      v61[2] = v43;
      (*(void (**)(_QWORD, uint64_t, _OWORD *, _QWORD))(*(_QWORD *)&v38 + 24))(*(_QWORD *)(*(_QWORD *)&v38 + 8), 3, v61, *(_QWORD *)(*(_QWORD *)&v38 + 48));
    }
  }
}

float64x2_t *CG::Cubic::index(float64x2_t *this, double a2)
{
  float64x2_t *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  float64x2_t v8[14];

  if (a2 > 0.0)
  {
    v3 = this;
    this = CG::Cubic::length(this, 0);
    if (v4 > a2)
    {
      v5 = 1.0;
      v6 = 0.0;
      do
      {
        CG::Cubic::split(v8, (v5 + v6) * 0.5, v3);
        this = CG::Cubic::length(v8, 0);
        if (v7 <= a2)
          v6 = (v5 + v6) * 0.5;
        else
          v5 = (v5 + v6) * 0.5;
      }
      while (v5 - v6 > 0.0001);
    }
  }
  return this;
}

float64x2_t *CG::Cubic::length(float64x2_t *this, int a2)
{
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  int v13;
  float64x2_t v14[7];
  uint64_t v15;

  __asm { FMOV            V2.2D, #3.0 }
  v7 = this[3];
  v8 = vaddq_f64(vmulq_f64(vsubq_f64(this[1], *this), _Q2), vsubq_f64(*this, v7));
  v9 = vaddq_f64(vsubq_f64(v7, *this), vmulq_f64(vsubq_f64(this[2], v7), _Q2));
  v10 = vmulq_f64(v8, v8);
  v11 = vmulq_f64(v9, v9);
  if (vaddvq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v11, v10), (int8x16_t)v11, (int8x16_t)v10)) >= 4.0
    && a2 <= 500)
  {
    CG::Cubic::split(v14, 0.5, this);
    v13 = a2 + 1;
    CG::Cubic::length((CG::Cubic *)v14, v13);
    return (float64x2_t *)CG::Cubic::length((CG::Cubic *)&v15, v13);
  }
  return this;
}

float64x2_t CG::Cubic::split(float64x2_t *this, double a2, float64x2_t *a3)
{
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t result;

  v4 = *a3;
  v3 = a3[1];
  v5 = vaddq_f64(*a3, vmulq_n_f64(vsubq_f64(v3, *a3), a2));
  v6 = a3[2];
  v7 = a3[3];
  v8 = vaddq_f64(v3, vmulq_n_f64(vsubq_f64(v6, v3), a2));
  v9 = vaddq_f64(v6, vmulq_n_f64(vsubq_f64(v7, v6), a2));
  v10 = vaddq_f64(v5, vmulq_n_f64(vsubq_f64(v8, v5), a2));
  v11 = vaddq_f64(v8, vmulq_n_f64(vsubq_f64(v9, v8), a2));
  v12 = vaddq_f64(v10, vmulq_n_f64(vsubq_f64(v11, v10), a2));
  *this = *a3;
  this[1] = v5;
  this[2] = v10;
  this[3] = v12;
  v13 = vsubq_f64(v5, v4);
  __asm { FMOV            V7.2D, #3.0 }
  v19 = vsubq_f64(v10, v5);
  this[4] = vmulq_f64(v13, _Q7);
  this[5] = vmulq_f64(vsubq_f64(v19, v13), _Q7);
  this[6] = vaddq_f64(v13, vsubq_f64(vsubq_f64(v12, v10), vaddq_f64(v19, v19)));
  this[7] = v12;
  this[8] = v11;
  this[9] = v9;
  v20 = vsubq_f64(v11, v12);
  this[10] = v7;
  this[11] = vmulq_f64(v20, _Q7);
  v21 = vsubq_f64(v9, v11);
  v22 = vmulq_f64(vsubq_f64(v21, v20), _Q7);
  result = vaddq_f64(vsubq_f64(vsubq_f64(v7, v9), vaddq_f64(v21, v21)), v20);
  this[12] = v22;
  this[13] = result;
  return result;
}

CGFloat CGImageBlockGetRect(uint64_t a1)
{
  const CGRect *v1;

  v1 = &CGRectNull;
  if (a1)
    v1 = (const CGRect *)(a1 + 8);
  return v1->origin.x;
}

uint64_t colorspace_from_ICC_data_data_make_nonpurgeable()
{
  return 1;
}

void CGContextResetState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char **v12;
  const void *v13;
  uint64_t v14;

  if (!a1)
  {
    v14 = 0;
LABEL_10:
    handle_invalid_context((char)"CGContextResetState", v14, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    v14 = a1;
    goto LABEL_10;
  }
  CGGStackReset(*(uint64_t **)(a1 + 104));
  v9 = *(_QWORD *)(a1 + 104);
  v10 = *(_QWORD *)(v9 + 8);
  if (v10 == v9)
  {
    v11 = CGGStateCreate();
    v12 = *(char ***)(v9 + 8);
    *(_QWORD *)(v9 + 8) = v11;
    *(_QWORD *)v11 = v9;
    *v12 = v11;
    *((_QWORD *)v11 + 1) = v12;
    v10 = *(_QWORD *)(v9 + 8);
  }
  *(_QWORD *)(a1 + 96) = v10;
  CGRenderingStateReset(*(_QWORD *)(a1 + 112));
  *(CGAffineTransform *)(a1 + 120) = CGAffineTransformIdentity;
  v13 = *(const void **)(a1 + 168);
  if (v13)
    CFRelease(v13);
  *(_QWORD *)(a1 + 168) = 0;
}

CGRect CGContextGetClipBoundingBox(CGContextRef c)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n64 v8;
  uint64_t v9;
  __int128 v10;
  double v11;
  double v12;
  double v13;
  __n64 v14;
  __n64 v15;
  __n64 v16;
  __n64 v17;
  CGContextRef v18;
  _OWORD v19[3];
  CGRect result;

  if (!c)
  {
    v18 = 0;
LABEL_6:
    handle_invalid_context((char)"CGContextGetClipBoundingBox", (uint64_t)v18, v1, v2, v3, v4, v5, v6);
    v16.n64_f64[0] = 0.0;
    v14.n64_f64[0] = INFINITY;
    v15.n64_f64[0] = INFINITY;
    v17.n64_f64[0] = 0.0;
    goto LABEL_7;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v18 = c;
    goto LABEL_6;
  }
  v8.n64_f64[0] = get_device_clip_bounding_box((uint64_t)c);
  v9 = *((_QWORD *)c + 12);
  v10 = *(_OWORD *)(v9 + 40);
  v19[0] = *(_OWORD *)(v9 + 24);
  v19[1] = v10;
  v19[2] = *(_OWORD *)(v9 + 56);
  v14.n64_u64[0] = CGRectApplyInverseAffineTransform((double *)v19, v8, v11, v12, v13).n64_u64[0];
LABEL_7:
  result.size.height = v17.n64_f64[0];
  result.size.width = v16.n64_f64[0];
  result.origin.y = v15.n64_f64[0];
  result.origin.x = v14.n64_f64[0];
  return result;
}

void CGDisplayListDrawInContextDelegate(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, const __CFDictionary *a5)
{
  double y;
  double x;
  double (*v13)(uint64_t, unsigned int *, uint64_t);
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  double width;
  double height;
  unsigned int *v23;
  uint64_t v24;
  uint64_t *v25;
  CGRect *v29;
  unsigned int v30;
  unsigned int v31;
  double *v32;
  double Bounds;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __n64 v41;
  const CGRect *v45;
  CGFloat *p_y;
  CGSize *p_size;
  CGFloat *p_height;
  _OWORD v49[3];
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;

  if (a1 && *(_QWORD *)(a1 + 592) != *(_QWORD *)(a1 + 600))
  {
    y = *(double *)(a1 + 96);
    x = *(double *)(a1 + 88);
    if (x != INFINITY && y != INFINITY)
    {
      if (a4)
      {
        if (a2)
        {
          v13 = *(double (**)(uint64_t, unsigned int *, uint64_t))(a2 + 48);
          if (v13)
          {
            v14 = v13(a2, a3, a4);
            v16 = v15;
            v18 = v17;
            v20 = v19;
          }
          else
          {
            v18 = 1.79769313e308;
            v14 = -8.98846567e307;
            v16 = -8.98846567e307;
            v20 = 1.79769313e308;
          }
        }
        else
        {
          v18 = 0.0;
          v14 = INFINITY;
          v16 = INFINITY;
          v20 = 0.0;
        }
        v32 = *(double **)(a4 + 112);
        if (v32)
        {
          Bounds = CGClipStackGetBounds(v32);
          v35 = v34;
          v37 = v36;
          v39 = v38;
        }
        else
        {
          v35 = 0xFFDFFFFFFFFFFFFFLL;
          v37 = 0x7FEFFFFFFFFFFFFFLL;
          Bounds = -8.98846567e307;
          v39 = 0x7FEFFFFFFFFFFFFFLL;
        }
        v51.origin.x = v14;
        v51.origin.y = v16;
        v51.size.width = v18;
        v51.size.height = v20;
        v52 = CGRectIntersection(v51, *(CGRect *)&Bounds);
        if (v52.origin.x == INFINITY || v52.origin.y == INFINITY || v52.size.width == 0.0 || v52.size.height == 0.0)
          return;
        v40 = *(_OWORD *)(a4 + 40);
        v49[0] = *(_OWORD *)(a4 + 24);
        v49[1] = v40;
        v49[2] = *(_OWORD *)(a4 + 56);
        v41.n64_u64[0] = CGRectApplyInverseAffineTransform((double *)v49, *(__n64 *)&v52.origin.x, v52.origin.y, v52.size.width, v52.size.height).n64_u64[0];
        v45 = &CGRectNull;
        p_y = &CGRectNull.origin.y;
        p_size = (CGSize *)(a1 + 104);
        p_height = (CGFloat *)(a1 + 112);
        if (*(_QWORD *)(a1 + 592) == *(_QWORD *)(a1 + 600))
          p_size = &CGRectNull.size;
        else
          p_y = (CGFloat *)(a1 + 96);
        if (*(_QWORD *)(a1 + 592) == *(_QWORD *)(a1 + 600))
          p_height = &CGRectNull.size.height;
        else
          v45 = (const CGRect *)(a1 + 88);
        v54.size.height = *p_height;
        v54.origin.x = v45->origin.x;
        v54.origin.y = *p_y;
        v54.size.width = p_size->width;
        v53 = CGRectIntersection(*(CGRect *)v41.n64_u64, v54);
        x = v53.origin.x;
        v50 = v53;
        if (v53.origin.x == INFINITY)
          return;
        y = v53.origin.y;
        if (v53.origin.y == INFINITY)
          return;
        width = v53.size.width;
        if (v53.size.width == 0.0)
          return;
        height = v53.size.height;
        if (v53.size.height == 0.0)
          return;
      }
      else
      {
        width = *(double *)(a1 + 104);
        height = *(double *)(a1 + 112);
        v50.origin.x = *(CGFloat *)(a1 + 88);
        v50.origin.y = y;
        v50.size.width = width;
        v50.size.height = height;
      }
      v23 = a3;
      if (a3 || (v23 = CGRenderingStateCreate()) != 0)
      {
        v24 = a1 + 16;
        v25 = CGGStackCreateWithGState(a4);
        if (height == 1.79769313e308 && width == 1.79769313e308 && y == -8.98846567e307 && x == -8.98846567e307)
          v29 = 0;
        else
          v29 = &v50;
        CG::DisplayList::execute(v24, a2, (uint64_t)v23, (uint64_t)v25, v29, a5);
        if (v25)
        {
          CGGStackReset(v25);
          free(v25);
        }
        if (v23 != a3)
        {
          do
          {
            v30 = __ldxr(v23);
            v31 = v30 - 1;
          }
          while (__stxr(v31, v23));
          if (!v31)
            free(v23);
        }
      }
    }
  }
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  double y;
  double x;
  double v4;
  double v5;
  double v7;
  double v8;
  double width;
  double height;
  double v12;
  double v13;
  CGFloat v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;
  CGRect result;

  y = r1.origin.y;
  x = r1.origin.x;
  v4 = 0.0;
  v5 = INFINITY;
  if (x != INFINITY && r1.origin.y != INFINITY)
  {
    v7 = r2.origin.y;
    v8 = r2.origin.x;
    v5 = INFINITY;
    if (r2.origin.x != INFINITY && r2.origin.y != INFINITY)
    {
      width = r2.size.width;
      height = r1.size.height;
      v12 = r1.size.width;
      if (r1.size.width < 0.0 || r1.size.height < 0.0)
      {
        v13 = x;
        v14 = r2.size.height;
        v20 = CGRectStandardize(r1);
        r2.size.height = v14;
        x = v20.origin.x;
        y = v20.origin.y;
        v12 = v20.size.width;
        height = v20.size.height;
      }
      if (width < 0.0 || r2.size.height < 0.0)
      {
        v21.origin.x = v8;
        v21.origin.y = v7;
        v21.size.width = width;
        v21.size.height = r2.size.height;
        v22 = CGRectStandardize(v21);
        v8 = v22.origin.x;
        v7 = v22.origin.y;
        width = v22.size.width;
        r2.size.height = v22.size.height;
      }
      v5 = fmax(x, v8);
      v15 = fmin(x + v12, v8 + width);
      if (v5 <= v15)
      {
        v16 = fmax(y, v7);
        v17 = fmin(y + height, v7 + r2.size.height);
        if (v16 <= v17)
        {
          v4 = v15 - v5;
          v18 = v17 - v16;
          goto LABEL_19;
        }
      }
      v5 = INFINITY;
    }
  }
  v16 = INFINITY;
  v18 = 0.0;
LABEL_19:
  v19 = v4;
  result.size.height = v18;
  result.size.width = v19;
  result.origin.y = v16;
  result.origin.x = v5;
  return result;
}

__n64 CGRectApplyInverseAffineTransform(double *a1, __n64 result, double a3, double a4, double a5)
{
  double v5;
  double v6;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double *v38;
  double *v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double *v44;
  double *v45;
  double v46;
  double *v47;
  BOOL v48;
  double *v49;
  double v50;
  double v51;
  double v52;
  double v53[5];

  if (result.n64_f64[0] != INFINITY && a3 != INFINITY)
  {
    if (result.n64_f64[0] == -8.98846567e307 && a3 == -8.98846567e307 && a4 == 1.79769313e308 && a5 == 1.79769313e308)
    {
      result.n64_f64[0] = -8.98846567e307;
    }
    else
    {
      v53[3] = v5;
      v53[4] = v6;
      if (a4 < 0.0 || a5 < 0.0)
        *(CGRect *)result.n64_u64 = CGRectStandardize(*(CGRect *)result.n64_u64);
      v12 = *a1;
      v13 = a1[1];
      v14 = a1[2];
      v15 = a1[3];
      v16 = *a1 * v15 - v13 * v14;
      if (v16 != 0.0)
      {
        v17 = 1.0 / v16;
        v18 = v15 * (1.0 / v16);
        v19 = v17 * -v13;
        v20 = -(v14 * v17);
        v21 = v12 * v17;
        v23 = a1[4];
        v22 = a1[5];
        v24 = v17 * (v14 * v22 - v15 * v23);
        v25 = v17 * (v13 * v23 - v12 * v22);
        v26 = result.n64_f64[0] + a4;
        v27 = a3 + a5;
        v28 = a3 * v21;
        if (v19 == 0.0 && v20 == 0.0)
        {
          v29 = a3 * 0.0 + v18 * result.n64_f64[0] + v24;
          v30 = v28 + result.n64_f64[0] * 0.0 + v25;
          v50 = v30;
          v51 = v29;
          v52 = v30;
          v53[0] = v29;
          v31 = v27 * 0.0 + v18 * v26 + v24;
          v32 = v27 * v21 + v26 * 0.0 + v25;
          if (v31 >= v29)
          {
            if (v31 <= v29)
              goto LABEL_55;
            v33 = &v51;
          }
          else
          {
            v33 = v53;
          }
          *v33 = v31;
LABEL_55:
          v48 = v32 <= v30;
          if (v32 < v30)
            goto LABEL_56;
          goto LABEL_57;
        }
        v34 = a3 * v20;
        v35 = v28 + v19 * result.n64_f64[0] + v25;
        v50 = v35;
        v51 = v34 + v18 * result.n64_f64[0] + v24;
        v52 = v35;
        v53[0] = v51;
        v36 = v34 + v18 * v26 + v24;
        v37 = v28 + v19 * v26 + v25;
        if (v36 >= v51)
        {
          if (v36 <= v51)
            goto LABEL_30;
          v38 = &v51;
        }
        else
        {
          v38 = v53;
        }
        *v38 = v36;
LABEL_30:
        if (v37 >= v35)
        {
          if (v37 <= v35)
            goto LABEL_35;
          v39 = &v50;
        }
        else
        {
          v39 = &v52;
        }
        *v39 = v37;
LABEL_35:
        v40 = v27 * v20;
        v41 = v27 * v20 + v18 * v26 + v24;
        v42 = v27 * v21;
        v43 = v42 + v19 * v26 + v25;
        if (v41 >= v53[0])
        {
          if (v41 <= v51)
            goto LABEL_40;
          v44 = &v51;
        }
        else
        {
          v44 = v53;
        }
        *v44 = v41;
LABEL_40:
        if (v43 >= v52)
        {
          if (v43 <= v50)
            goto LABEL_45;
          v45 = &v50;
        }
        else
        {
          v45 = &v52;
        }
        *v45 = v43;
LABEL_45:
        v46 = v40 + v18 * result.n64_f64[0] + v24;
        v32 = v42 + v19 * result.n64_f64[0] + v25;
        if (v46 >= v53[0])
        {
          if (v46 <= v51)
          {
LABEL_50:
            if (v32 < v52)
            {
LABEL_56:
              v49 = &v52;
              goto LABEL_59;
            }
            v48 = v32 <= v50;
LABEL_57:
            if (v48)
              return *(__n64 *)&v53[0];
            v49 = &v50;
LABEL_59:
            *v49 = v32;
            return *(__n64 *)&v53[0];
          }
          v47 = &v51;
        }
        else
        {
          v47 = v53;
        }
        *v47 = v46;
        goto LABEL_50;
      }
    }
  }
  return result;
}

void CG::DisplayList::execute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CGRect *a5, CFDictionaryRef theDict)
{
  const CGRect *v12;
  int *Shape;
  int *v14;
  uint64_t v15;
  double x;
  double y;
  double width;
  double height;
  double v20;
  double v21;
  int v22;
  double v23;
  int v24;
  int v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  CGPoint *p_origin;
  int *v33;
  char *v34;
  _QWORD *v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  int v42;
  int *v44;
  uint64_t v46;
  int v47;
  uint64_t v48;
  CGImageRef *v49;
  CGImageRef *v50;
  char *v51;
  double v52;
  unint64_t v53;
  double v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float64x2_t v74;
  int v75;
  CGImageRef Image;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  __int128 v81;
  char *v82;
  char *v83;
  __int128 v84;
  __int128 v85;
  int v86;
  uint64_t v87;
  char *v88;
  char **v89;
  double *v90;
  const void *v91;
  void (*v92)(uint64_t, uint64_t, uint64_t, const void *, double, double, double, double);
  int v93;
  int *v94;
  uint64_t v95;
  CGPoint *v96;
  uint64_t v97;
  void *v98;
  CGPoint v99;
  __int128 v100;
  CGPoint v101;
  __int128 v102;
  __int128 v103;
  CFTypeRef cf;
  uint64_t v105;
  int v106[4];
  CGRect v107;
  CGRect v108;
  CGRect v109;
  CGRect v110;
  CGRect v111;
  CGRect v112;
  CGRect v113;

  if (!theDict || !CFDictionaryContainsKey(theDict, CFSTR("kCGContextBackgroundColor")) || *(_DWORD *)(a1 + 600) == -1)
  {
    v26 = *(uint64_t **)(a1 + 576);
    v27 = *(uint64_t **)(a1 + 584);
    v28 = a1;
    v29 = a2;
    v30 = a3;
    v31 = a4;
    p_origin = &a5->origin;
LABEL_26:
    CG::DisplayList::executeEntries(v28, v26, v27, v29, v30, v31, p_origin);
    return;
  }
  Shape = CG::DisplayListShape::getShape(*(CG::DisplayListShape **)(a1 + 104), v12);
  if (!Shape)
  {
    v26 = *(uint64_t **)(a1 + 576);
    v27 = *(uint64_t **)(a1 + 584);
    v28 = a1;
    v29 = a2;
LABEL_73:
    v30 = a3;
    v31 = a4;
    p_origin = &a5->origin;
    goto LABEL_26;
  }
  v14 = Shape;
  v97 = a2;
  if (a5)
  {
    v107 = CGRectIntegral(*a5);
    x = v107.origin.x;
    y = v107.origin.y;
    width = v107.size.width;
    height = v107.size.height;
    if (v107.size.width < 0.0 || v107.size.height < 0.0)
    {
      v36 = COERCE_DOUBLE(CGRectStandardize(v107));
      if (v36 <= 1073741820.0)
        v37 = v36;
      else
        v37 = 1073741820.0;
      if (v36 >= -1073741820.0)
        v22 = (int)v37;
      else
        v22 = -1073741824;
      v108.origin.x = x;
      v108.origin.y = y;
      v108.size.width = width;
      v108.size.height = height;
      v109 = CGRectStandardize(v108);
      if (v109.origin.y <= 1073741820.0)
        v38 = v109.origin.y;
      else
        v38 = 1073741820.0;
      if (v109.origin.y >= -1073741820.0)
        v24 = (int)v38;
      else
        v24 = -1073741824;
      v110.origin.x = x;
      v110.origin.y = y;
      v110.size.width = width;
      v110.size.height = height;
      v111 = CGRectStandardize(v110);
      v39 = v111.origin.x + v111.size.width;
      if (v39 <= 1073741820.0)
        v40 = v39;
      else
        v40 = 1073741820.0;
      if (v39 >= -1073741820.0)
        v25 = (int)v40;
      else
        v25 = -1073741824;
      v112.origin.x = x;
      v112.origin.y = y;
      v112.size.width = width;
      v112.size.height = height;
      v113 = CGRectStandardize(v112);
      y = v113.origin.y;
      height = v113.size.height;
    }
    else
    {
      v20 = 1073741820.0;
      if (x <= 1073741820.0)
        v21 = x;
      else
        v21 = 1073741820.0;
      if (x >= -1073741820.0)
        v22 = (int)v21;
      else
        v22 = -1073741824;
      if (y <= 1073741820.0)
        v23 = y;
      else
        v23 = 1073741820.0;
      if (y >= -1073741820.0)
        v24 = (int)v23;
      else
        v24 = -1073741824;
      if (x + width <= 1073741820.0)
        v20 = x + width;
      if (x + width >= -1073741820.0)
        v25 = (int)v20;
      else
        v25 = -1073741824;
    }
    v41 = 1073741820.0;
    if (y + height <= 1073741820.0)
      v41 = y + height;
    if (y + height >= -1073741820.0)
      v42 = (int)v41;
    else
      v42 = -1073741824;
    if (v22 >= v25 || v24 >= v42)
      goto LABEL_72;
    v44 = shape_intersect_with_bounds(v15, v14, v22, v24, v25, v42);
    if (!v44 || v44 == (int *)&the_empty_shape)
      goto LABEL_72;
    v33 = v44;
    if (v44[v44[1]] == 0x7FFFFFFF)
    {
      free(v44);
LABEL_72:
      v26 = *(uint64_t **)(a1 + 576);
      v27 = *(uint64_t **)(a1 + 584);
      v28 = a1;
      v29 = a2;
      goto LABEL_73;
    }
  }
  else
  {
    v33 = shape_copy(Shape);
  }
  v34 = (char *)malloc_type_malloc(0x38uLL, 0xEB07EEC6uLL);
  *(_DWORD *)v34 = 0;
  *(_OWORD *)(v34 + 4) = xmmword_185004E30;
  *(int32x2_t *)(v34 + 20) = vdup_n_s32(0x7FFFFFFEu);
  *((_QWORD *)v34 + 5) = 0;
  *((_QWORD *)v34 + 6) = 0;
  *((_QWORD *)v34 + 4) = 0;
  v98 = v34;
  if (v33 != (int *)&the_empty_shape && v33[v33[1]] != 0x7FFFFFFF)
  {
    *((_DWORD *)v34 + 1) = 0;
    *((_QWORD *)v34 + 4) = v33;
    *((_QWORD *)v34 + 5) = v33 + 2;
  }
  v105 = 0;
  *(_QWORD *)v106 = 0;
  cf = 0;
  if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1)
    dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_77);
  v95 = a4;
  v96 = &a5->origin;
  v94 = v33;
  if (CGCFDictionaryGetCFTypeRef(theDict, CFSTR("kCGContextColorSpace"), CGColorSpaceGetTypeID_type_id, (uint64_t *)&cf))
  {
    v35 = cf;
    if (!cf)
    {
      cf = 0;
      goto LABEL_78;
    }
    CFRetain(cf);
    cf = v35;
  }
  else
  {
    v35 = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceSRGB"));
    cf = v35;
    if (!v35)
      goto LABEL_78;
  }
  v46 = *(unsigned int *)(v35[3] + 24);
  if (v46 < 3)
  {
    v47 = dword_184F8F574[v46];
    v48 = qword_184F8F580[v46];
    goto LABEL_79;
  }
LABEL_78:
  CGColorSpaceRelease((CGColorSpaceRef)v35);
  cf = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceSRGB"));
  v47 = 8198;
  v48 = 32;
LABEL_79:
  v103 = *(_OWORD *)(a3 + 8);
  CGCFDictionaryGetSize(theDict, CFSTR("kCGContextResolution"), (UInt8 *)&v103);
  v49 = 0;
  v50 = 0;
  v51 = 0;
  while (shape_enum_next((uint64_t)v98, &v106[1], v106, (_DWORD *)&v105 + 1, &v105))
  {
    v101.x = (double)v106[1];
    v101.y = (double)v106[0];
    *(double *)&v102 = (double)(HIDWORD(v105) - v106[1]);
    *((double *)&v102 + 1) = (double)((int)v105 - v106[0]);
    v52 = *(double *)&v103 * *(double *)&v102 / 72.0;
    v53 = vcvtpd_u64_f64(v52);
    v54 = *((double *)&v103 + 1) * *((double *)&v102 + 1) / 72.0;
    v55 = CGBitmapContextCreateWithDataAndDictionary(0, v53, vcvtpd_u64_f64(v54), 8, v48, (v48 * v53) >> 3, cf, v47, *(double *)&v103, *((double *)&v103 + 1), 0, 0, 0);
    if (v55)
    {
      v63 = (uint64_t)v55;
      v64 = v55[14];
      if (v64 != a3)
      {
        *(_OWORD *)(v64 + 8) = *(_OWORD *)(a3 + 8);
        v65 = *(_OWORD *)(a3 + 24);
        v66 = *(_OWORD *)(a3 + 40);
        *(_OWORD *)(v64 + 56) = *(_OWORD *)(a3 + 56);
        *(_OWORD *)(v64 + 40) = v66;
        *(_OWORD *)(v64 + 24) = v65;
        *(_QWORD *)(v64 + 72) = *(_QWORD *)(a3 + 72);
        *(_DWORD *)(v64 + 4) = *(_DWORD *)(a3 + 4);
        *(_DWORD *)(v64 + 80) = *(_DWORD *)(a3 + 80);
        *(_WORD *)(v64 + 84) = *(_WORD *)(a3 + 84);
        *(_BYTE *)(v64 + 86) = *(_BYTE *)(a3 + 86);
      }
      CGContextErase((uint64_t)v55, v56, v57, v58, v59, v60, v61, v62);
      if (*(_DWORD *)(v63 + 16) == 1129601108)
      {
        v73 = *(_QWORD *)(v63 + 96);
        v74 = vmulq_n_f64(*(float64x2_t *)(v73 + 40), ceil(v54) / *((double *)&v102 + 1));
        *(float64x2_t *)(v73 + 24) = vmulq_n_f64(*(float64x2_t *)(v73 + 24), ceil(v52) / *(double *)&v102);
        *(float64x2_t *)(v73 + 40) = v74;
      }
      else
      {
        handle_invalid_context((char)"CGContextScaleCTM", v63, v67, v68, v69, v70, v71, v72);
      }
      if (*(_DWORD *)(v63 + 16) == 1129601108)
        *(float64x2_t *)(*(_QWORD *)(v63 + 96) + 56) = vmlsq_lane_f64(vmlsq_lane_f64(*(float64x2_t *)(*(_QWORD *)(v63 + 96) + 56), *(float64x2_t *)(*(_QWORD *)(v63 + 96) + 24), v101.x, 0), *(float64x2_t *)(*(_QWORD *)(v63 + 96) + 40), v101.y, 0);
      else
        handle_invalid_context((char)"CGContextTranslateCTM", v63, v67, v68, v69, v70, v71, v72);
      v75 = *(_DWORD *)(a1 + 600);
      if (v75 == -1)
        v75 = 0;
      CG::DisplayList::executeEntries(a1, *(uint64_t **)(a1 + 576), (uint64_t *)(*(_QWORD *)(a1 + 576) + 16 * v75 + 16), *(_QWORD *)(v63 + 40), *(_QWORD *)(v63 + 112), *(_QWORD *)(v63 + 104), &v101);
      Image = CGBitmapContextCreateImage((CGContextRef)v63);
      CFRelease((CFTypeRef)v63);
      if (Image)
      {
        v99 = v101;
        v100 = v102;
        if (v50 >= (CGImageRef *)v51)
        {
          v77 = 0xCCCCCCCCCCCCCCCDLL * (v50 - v49) + 1;
          if (v77 > 0x666666666666666)
            std::vector<CG::DisplayListResource const*>::__throw_length_error[abi:se180100]();
          if (0x999999999999999ALL * ((v51 - (char *)v49) >> 3) > v77)
            v77 = 0x999999999999999ALL * ((v51 - (char *)v49) >> 3);
          if (0xCCCCCCCCCCCCCCCDLL * ((v51 - (char *)v49) >> 3) >= 0x333333333333333)
            v78 = 0x666666666666666;
          else
            v78 = v77;
          if (!v78)
          {
LABEL_135:
            __break(1u);
            return;
          }
          if (v78 > 0x666666666666666)
            std::__throw_bad_array_new_length[abi:se180100]();
          v79 = (char *)operator new(40 * v78);
          v80 = &v79[8 * (v50 - v49)];
          *(_QWORD *)v80 = Image;
          v81 = v102;
          *(CGPoint *)(v80 + 8) = v101;
          *(_OWORD *)(v80 + 24) = v81;
          if (v50 == v49)
          {
            v83 = &v79[8 * (v50 - v49)];
          }
          else
          {
            v82 = &v79[8 * (v50 - v49)];
            do
            {
              v83 = v82 - 40;
              v84 = *(_OWORD *)(v50 - 5);
              v85 = *(_OWORD *)(v50 - 3);
              *((_QWORD *)v82 - 1) = *(v50 - 1);
              *(_OWORD *)(v82 - 24) = v85;
              *(_OWORD *)(v82 - 40) = v84;
              v50 -= 5;
              v82 -= 40;
            }
            while (v50 != v49);
          }
          v51 = &v79[40 * v78];
          v50 = (CGImageRef *)(v80 + 40);
          if (v49)
            operator delete(v49);
          v49 = (CGImageRef *)v83;
        }
        else
        {
          if (!v50)
            goto LABEL_135;
          *v50 = Image;
          *(_OWORD *)(v50 + 3) = v100;
          *(CGPoint *)(v50 + 1) = v99;
          v50 += 5;
        }
      }
    }
  }
  CGColorSpaceRelease((CGColorSpaceRef)cf);
  free(v98);
  if (v94 && v94 != (int *)&the_empty_shape)
    free(v94);
  v86 = *(_DWORD *)(a1 + 600);
  if (v86 == -1)
    v86 = 0;
  CG::DisplayList::executeEntries(a1, *(uint64_t **)(a1 + 576), (uint64_t *)(*(_QWORD *)(a1 + 576) + 16 * v86 + 16), v97, a3, v95, v96);
  if (v49 != v50)
  {
    v87 = *(_QWORD *)(v95 + 8);
    if (v87 == v95)
    {
      v88 = CGGStateCreate();
      v89 = *(char ***)(v95 + 8);
      *(_QWORD *)(v95 + 8) = v88;
      *(_QWORD *)v88 = v95;
      *v89 = v88;
      *((_QWORD *)v88 + 1) = v89;
      v87 = *(_QWORD *)(v95 + 8);
    }
    v90 = (double *)v49;
    do
    {
      v91 = *(const void **)v90;
      if (v97)
      {
        v92 = *(void (**)(uint64_t, uint64_t, uint64_t, const void *, double, double, double, double))(v97 + 80);
        if (v92)
        {
          v92(v97, a3, v87, v91, v90[1], v90[2], v90[3], v90[4]);
          v91 = *(const void **)v90;
        }
      }
      if (v91)
        CFRelease(v91);
      v90 += 5;
    }
    while (v90 != (double *)v50);
  }
  v93 = *(_DWORD *)(a1 + 600);
  if (v93 == -1)
    v93 = 0;
  CG::DisplayList::executeEntries(a1, (uint64_t *)(*(_QWORD *)(a1 + 576) + 16 * v93), *(uint64_t **)(a1 + 584), v97, a3, v95, v96);
  if (v49)
    operator delete(v49);
}

void sub_1849DDE98(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t CGBitmapContextSetData(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108 && *(_DWORD *)(a1 + 24) == 4)
  {
    result = CGBitmapContextInfoCreate(a6, a2, a3, a4, a5, a7, a8, a9, *(double *)(*(_QWORD *)(a1 + 32) + 48), *(double *)(*(_QWORD *)(a1 + 32) + 56), *(_QWORD **)(*(_QWORD *)(a1 + 32) + 32), *(_DWORD *)(*(_QWORD *)(a1 + 32) + 40), 0, 0, 0);
    if (!result)
      return result;
    v18 = result;
    if (bitmap_context_delegate_set_data_once != -1)
      dispatch_once_f(&bitmap_context_delegate_set_data_once, 0, (dispatch_function_t)load_set_data);
    if (set_data && (set_data() & 1) != 0)
    {
      CGBitmapContextInfoRelease(*(_QWORD *)(a1 + 32));
      *(_QWORD *)(a1 + 32) = v18;
      return 1;
    }
    CGPostError((uint64_t)"%s: unable to set bitmap context data", v11, v12, v13, v14, v15, v16, v17, (char)"CGBitmapContextSetData");
    CGBitmapContextInfoRelease(v18);
  }
  else
  {
    handle_invalid_context((char)"CGBitmapContextSetData", a1, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return CGBitmapContextCreateWithData(data, width, height, bitsPerComponent, bytesPerRow, space, bitmapInfo, 0, 0);
}

CGContextRef CGBitmapContextCreateWithData(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo, CGBitmapContextReleaseDataCallback releaseCallback, void *releaseInfo)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint32_t v14;
  uint32_t v15;
  uint32_t v16;
  uint32_t v17;
  CGContextRef result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (space)
    v9 = *(_QWORD *)(*((_QWORD *)space + 3) + 40);
  else
    v9 = 0;
  if (v9 <= 1)
    v10 = 1;
  else
    v10 = v9;
  v11 = v10 * bitsPerComponent;
  if ((bitmapInfo & 0x1F) != 0 && (bitmapInfo & 0x1F) != 7)
    ++v9;
  v12 = 32;
  if ((bitmapInfo & 0xF0000) != 0x40000)
    v12 = v11;
  if (v9 <= 1)
    v9 = 1;
  v13 = v9 * bitsPerComponent;
  v14 = bitmapInfo & 0xFFF0FFFF | 0x10000;
  if ((bitmapInfo & 0xF0000) != 0)
    v14 = bitmapInfo;
  if (bitsPerComponent == 5)
  {
    v13 = 16;
    v15 = v14;
  }
  else
  {
    v15 = bitmapInfo;
  }
  if (bitsPerComponent == 10)
  {
    v13 = v12;
    v16 = bitmapInfo;
  }
  else
  {
    v16 = v15;
  }
  if (bitsPerComponent)
  {
    v11 = v13;
    v17 = v16;
  }
  else
  {
    v17 = bitmapInfo;
  }
  result = (CGContextRef)CGBitmapContextInfoCreate((uint64_t)data, 0, 0, width, height, bitsPerComponent, v11, bytesPerRow, 72.0, 72.0, space, v17, 0, (void (*)(uint64_t, uint64_t))releaseCallback, (uint64_t)releaseInfo);
  if (result)
    return (CGContextRef)bitmap_context_create((uint64_t)result, 0, (char)"CGBitmapContextCreateWithData", v19, v20, v21, v22, v23);
  return result;
}

uint64_t CGBitmapContextInfoCreate(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, _QWORD *a11, int a12, uint64_t a13, void (*a14)(uint64_t, uint64_t), uint64_t a15)
{
  int v20;
  int v21;
  _QWORD *v23;
  uint64_t v24;
  CGColorSpaceRef v26;
  _DWORD *v27;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  int v42;
  const char *v43;
  uint64_t v44;
  unint64_t Data;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v56;
  unint64_t v57;

  v20 = a3;
  v21 = a2;
  v23 = a11;
  if ((a12 & 0x40000) != 0)
  {
    if (!a11 || (v26 = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceExtendedSRGB")), !CFEqual(a11, v26)))
    {
      CGPostError((uint64_t)"%s: CIF10 bitmap context requires extended sRGB color space", a2, a3, a4, a5, a6, a7, a8, (char)"CGBitmapContextInfoCreate");
      goto LABEL_23;
    }
    v24 = a11[3];
  }
  else
  {
    if (!a11)
      goto LABEL_12;
    v24 = a11[3];
    if ((a12 & 0x40100) == 0 && *(_BYTE *)(v24 + 13) != 0)
    {
      CGPostError((uint64_t)"%s: CGColorSpace which uses extended range requires floating point or CIF10 bitmap context", a2, a3, a4, a5, a6, a7, a8, (char)"CGBitmapContextInfoCreate");
      goto LABEL_23;
    }
  }
  if (*(_BYTE *)(v24 + 10))
  {
LABEL_12:
    v57 = a5;
    v27 = malloc_type_calloc(1uLL, 0x90uLL, 0xA3729uLL);
    if (!v27)
    {
      if (!a14)
        return 0;
      goto LABEL_24;
    }
    v28 = (uint64_t)v27;
    *v27 = 1;
    v27[6] = v21;
    v27[7] = v20;
    *((_QWORD *)v27 + 1) = a4;
    *((_QWORD *)v27 + 2) = v57;
    if ((a12 & 0x1F) == 7 || a11 == 0)
      v23 = 0;
    else
      CFRetain(a11);
    v30 = a8;
    *(_QWORD *)(v28 + 32) = v23;
    *(_DWORD *)(v28 + 40) = a12;
    *(double *)(v28 + 48) = a9;
    *(double *)(v28 + 56) = a10;
    *(_BYTE *)(v28 + 100) = 0;
    *(_QWORD *)(v28 + 64) = a1;
    *(_QWORD *)(v28 + 72) = a7;
    *(_QWORD *)(v28 + 80) = a6;
    *(_QWORD *)(v28 + 88) = a8;
    *(_QWORD *)(v28 + 104) = a14;
    *(_QWORD *)(v28 + 112) = a15;
    if (!a1 && !a8)
    {
      if (a4 >= 0xFFFFFFFFFFFFFFLL)
        goto LABEL_68;
      v30 = (((a7 * a4 + 7) >> 3) + 31) & 0x3FFFFFFFFFFFFFE0;
      *(_QWORD *)(v28 + 88) = v30;
    }
    *(_QWORD *)(v28 + 120) = 0;
    *(_QWORD *)(v28 + 128) = a13;
    *(_QWORD *)(v28 + 136) = 0;
    *(_DWORD *)(v28 + 96) = 3;
    if (a13)
    {
      if (a4 >= 0xFFFFFFFFFFFFFFLL)
        goto LABEL_68;
      v31 = *(_QWORD *)(v28 + 8);
      *(_QWORD *)(v28 + 136) = v30 + ((a13 * a4 + 7) >> 3) - ((unint64_t)(v31 * a7 + 7) >> 3);
      if (!v31)
        goto LABEL_68;
LABEL_34:
      if (*(_QWORD *)(v28 + 16))
      {
        switch(CGColorSpaceGetType(v23))
        {
          case 0xFFFFFFFF:
            v42 = *(_DWORD *)(v28 + 40);
            if ((v42 & 0x1F) != 7
              || (v42 & 0x7000) != 0
              || *(_QWORD *)(v28 + 80) != 8
              || *(_QWORD *)(v28 + 72) != 8
              || (v42 & 0xF0000) != 0)
            {
              v41 = "Valid parameters for alpha only bitmap are:\n"
                    "\tNULL color space\n"
                    "\t8 bits per pixel, 8 bits per component, kCGImageAlphaOnly";
              goto LABEL_45;
            }
            if ((check_sizes((_QWORD *)v28, 8, v33, v34, v35, v36, v37, v38) & 1) == 0)
              goto LABEL_68;
            goto LABEL_55;
          case 0u:
          case 3u:
            goto LABEL_50;
          case 1u:
          case 4u:
            goto LABEL_52;
          case 2u:
            goto LABEL_54;
          case 6u:
          case 0xAu:
          case 0xBu:
            v39 = *(_QWORD *)(v28 + 32);
            if (!v39)
              goto LABEL_38;
            v40 = *(_QWORD *)(v39 + 24);
            if (*(_DWORD *)(v40 + 24) == 7)
              goto LABEL_38;
            v44 = *(_QWORD *)(v40 + 40);
            switch(v44)
            {
              case 4:
LABEL_54:
                if ((validate_cmyk_bitmap_info(v28, v32, v33, v34, v35, v36, v37, v38) & 1) == 0)
                  goto LABEL_68;
                break;
              case 3:
LABEL_52:
                if ((validate_rgb_bitmap_info(v28, v32, v33, v34, v35, v36, v37, v38) & 1) == 0)
                  goto LABEL_68;
                break;
              case 1:
LABEL_50:
                if ((validate_gray_bitmap_info(v28, v32, v33, v34, v35, v36, v37, v38) & 1) == 0)
                  goto LABEL_68;
                break;
              default:
LABEL_38:
                v41 = "Unsupported color space";
LABEL_45:
                unsupported(v28, (uint64_t)v41, v33, v34, v35, v36, v37, v38);
                goto LABEL_68;
            }
LABEL_55:
            if (a1)
              goto LABEL_60;
            if (v30 && 0xFFFFFFFFFFFFFFFFLL / v30 <= v57)
              goto LABEL_68;
            Data = CGBitmapAllocateData(v30 * v57);
            if (Data)
            {
              *(_BYTE *)(v28 + 100) = 1;
              *(_QWORD *)(v28 + 64) = Data;
LABEL_60:
              if (!a13)
                return v28;
              v46 = *(_QWORD *)(v28 + 136);
              if (!v46 || 0xFFFFFFFFFFFFFFFFLL / v46 > v57)
              {
                v47 = CGBitmapAllocateData(v46 * v57);
                if (v47)
                {
                  *(_QWORD *)(v28 + 120) = v47;
                  return v28;
                }
                CGPostError((uint64_t)"%s: unable to allocate %zu bytes for alpha data", v48, v49, v50, v51, v52, v53, v54, (char)"CGBitmapContextInfoCreate");
              }
            }
            else
            {
              v56 = "CGBitmapContextInfoCreate";
              v43 = "%s: unable to allocate %zu bytes for bitmap data";
LABEL_67:
              CGPostError((uint64_t)v43, v32, v33, v34, v35, v36, v37, v38, (char)v56);
            }
            break;
          default:
            v43 = "CGBitmapContextCreate: unsupported color space.";
            goto LABEL_67;
        }
      }
      goto LABEL_68;
    }
    if (*(_QWORD *)(v28 + 8))
      goto LABEL_34;
LABEL_68:
    CGBitmapContextInfoRelease(v28);
    return 0;
  }
  CGPostError((uint64_t)"%s: CGColorSpace doesn't support output", a2, a3, a4, a5, a6, a7, a8, (char)"CGBitmapContextInfoCreate");
LABEL_23:
  if (a14)
LABEL_24:
    a14(a15, a1);
  return 0;
}

uint64_t check_sizes(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v8 = a1[1];
  if (v8 < 0xFFFFFFFFFFFFFFLL)
  {
    v10 = a1[9] * v8 + 7;
    if (a1[11] < v10 >> 3)
    {
      CGPostError((uint64_t)"CGBitmapContextCreate: invalid data bytes/row: should be at least %zu for %zu %s bits/component, %zu components, %s.", a2, a3, a4, a5, a6, a7, a8, v10 >> 3);
      return 0;
    }
    v11 = a1[17];
    if (v11)
    {
      if (a1[16] != a2)
      {
        v9 = "alpha bits per pixel value is incorrect";
        goto LABEL_3;
      }
      v12 = v8 * a2 + 7;
      if (v11 < v12 >> 3)
      {
        CGPostError((uint64_t)"CGBitmapContextCreate: invalid alpha bytes/row: should be at least %zu for %zu %s bits/component.", a2, a3, a4, a5, a6, a7, a8, v12 >> 3);
        return 0;
      }
    }
    return 1;
  }
  v9 = "info->width >= SIZE_MAX / 256";
LABEL_3:
  unsupported((uint64_t)a1, (uint64_t)v9, a3, a4, a5, a6, a7, a8);
  return 0;
}

unint64_t CGBitmapAllocateData(unint64_t a1)
{
  unint64_t result;
  size_t v2;
  void *v3;
  void *v4;

  if (a1 > 0x7FFFFFFFFFFFFFFELL)
    return 0;
  v2 = (a1 + *MEMORY[0x1E0C85AD8] + 48) & -*MEMORY[0x1E0C85AD8];
  v3 = mmap(0, v2, 3, 4098, 872415232, 0);
  if (v3 == (void *)-1)
    return 0;
  v4 = v3;
  result = ((unint64_t)v3 + 48) & 0xFFFFFFFFFFFFFFE0;
  *(_QWORD *)(result - 16) = v2;
  *(_QWORD *)(result - 8) = result - (_QWORD)v4;
  return result;
}

uint64_t CGDisplayListContextCreate(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ContextDelegate;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;

  if (!a1)
    return 0;
  v16 = CGContextCreateWithDelegateAndInfo(0, 0, 0, 0, 0, 0, a7, a8);
  if (!v16)
  {
    CGPostError((uint64_t)"Unable to create display list context", v9, v10, v11, v12, v13, v14, v15, v26);
    return v16;
  }
  ContextDelegate = CG::DisplayList::createContextDelegate(a1);
  *(_QWORD *)(v16 + 40) = ContextDelegate;
  if (!ContextDelegate)
  {
    CFRelease((CFTypeRef)v16);
    CGPostError((uint64_t)"Unable to create display list context delegate", v18, v19, v20, v21, v22, v23, v24, v26);
    return 0;
  }
  *(_DWORD *)(v16 + 24) = 6;
  return v16;
}

_QWORD *bitmap_context_create(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v11 = CGContextCreateWithDelegateAndInfo(0, 4, 0, 0, a1, (uint64_t)bitmap_context_finalize, a7, a8);
  v19 = (_QWORD *)v11;
  if (v11)
  {
    v20 = *(_QWORD *)(v11 + 112);
    v21 = *(double *)(a1 + 48);
    v22 = *(double *)(a1 + 56);
    v23 = 432.0;
    if (v21 <= 432.0)
      v23 = *(double *)(a1 + 48);
    if (v21 >= 72.0)
      v24 = v23;
    else
      v24 = 72.0;
    v25 = 432.0;
    if (v22 <= 432.0)
      v25 = *(double *)(a1 + 56);
    if (v22 >= 72.0)
      v26 = v25;
    else
      v26 = 72.0;
    *(double *)(v20 + 8) = v24;
    *(double *)(v20 + 16) = v26;
    v27 = *(_DWORD *)(a1 + 96);
    v28 = v27 | ~(-1 << -(char)__clz(v27));
    if (v27 >= 2)
      LOBYTE(v27) = v28;
    *(_DWORD *)(v20 + 4) = v27 & 3;
    v29 = bitmap_context_delegate_create(a1, a2);
    v19[5] = v29;
    if (!v29)
    {
      CGPostError((uint64_t)"%s: failed to create delegate.", v30, v31, v32, v33, v34, v35, v36, a3);
      CFRelease(v19);
      return 0;
    }
  }
  else
  {
    CGPostError((uint64_t)"%s: failed to create bitmap context.", v12, v13, v14, v15, v16, v17, v18, a3);
    CGBitmapContextInfoRelease(a1);
  }
  return v19;
}

uint64_t CGContextCreateWithDelegateAndInfo(const void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t Instance;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  void *Copy;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  char **v29;

  if (_block_invoke_once_13941 != -1)
    dispatch_once(&_block_invoke_once_13941, &__block_literal_global_4_13942);
  Instance = CGTypeCreateInstance(CGContextGetTypeID_type_id, 168, a3, a4, a5, a6, a7, a8);
  v15 = Instance;
  if (Instance)
  {
    *(_DWORD *)(Instance + 16) = 1129601108;
    do
    {
      v16 = __ldxr((unsigned int *)&CGContextCreateWithDelegateAndInfo_unique_identifier);
      v17 = v16 + 1;
    }
    while (__stxr(v17, (unsigned int *)&CGContextCreateWithDelegateAndInfo_unique_identifier));
    *(_DWORD *)(Instance + 20) = v17;
    *(_DWORD *)(Instance + 24) = a2;
    *(_DWORD *)(Instance + 88) = 0;
    *(_QWORD *)(Instance + 64) = 0;
    *(_QWORD *)(Instance + 72) = 0;
    if (a3)
      Copy = CGRenderingStateCreateCopy(a3);
    else
      Copy = CGRenderingStateCreate();
    *(_QWORD *)(v15 + 112) = Copy;
    if (Copy)
    {
      v19 = CGGStackCreateWithGState(a4);
      *(_QWORD *)(v15 + 104) = v19;
      v26 = (_QWORD *)v19[1];
      if (v26 == v19)
      {
        v27 = v19;
        v28 = CGGStateCreate();
        v29 = (char **)v27[1];
        v27[1] = v28;
        *(_QWORD *)v28 = v27;
        *v29 = v28;
        *((_QWORD *)v28 + 1) = v29;
        v26 = (_QWORD *)v27[1];
      }
      *(_QWORD *)(v15 + 96) = v26;
      *(CGAffineTransform *)(v15 + 120) = CGAffineTransformIdentity;
      *(_QWORD *)(v15 + 168) = 0;
      if (a1)
        CGContextSetDelegate(v15, a1, v20, v21, v22, v23, v24, v25);
      *(_QWORD *)(v15 + 32) = a5;
      *(_QWORD *)(v15 + 48) = a6;
    }
    else
    {
      CFRelease((CFTypeRef)v15);
      return 0;
    }
  }
  return v15;
}

_QWORD *CGGStackCreateWithGState(uint64_t a1)
{
  _QWORD *v2;
  char *Copy;
  char **v4;

  v2 = malloc_type_calloc(1uLL, 0x10uLL, 0xA3729uLL);
  *v2 = v2;
  v2[1] = v2;
  if (a1)
    Copy = CGGStateCreateCopy(a1);
  else
    Copy = CGGStateCreate();
  v4 = (char **)v2[1];
  *(_QWORD *)Copy = v2;
  *v4 = Copy;
  v2[1] = Copy;
  *((_QWORD *)Copy + 1) = v4;
  return v2;
}

_DWORD *CGRenderingStateCreate()
{
  _DWORD *v0;
  _DWORD *v1;

  v0 = malloc_type_malloc(0x58uLL, 0x2062DE7BuLL);
  v1 = v0;
  if (v0)
  {
    *v0 = 1;
    CGRenderingStateReset((uint64_t)v0);
  }
  return v1;
}

void CGRenderingStateReset(uint64_t a1)
{
  *(int64x2_t *)(a1 + 8) = vdupq_n_s64(0x4052000000000000uLL);
  *(CGAffineTransform *)(a1 + 24) = CGAffineTransformIdentity;
  *(_QWORD *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 85) = 257;
  *(_DWORD *)(a1 + 80) = 16843009;
  if (once != -1)
    dispatch_once_f(&once, 0, (dispatch_function_t)get_font_rendering_defaults);
  *(_BYTE *)(a1 + 84) = allows_font_smoothing;
  *(_DWORD *)(a1 + 4) = 3;
}

uint64_t bitmap_context_delegate_create(uint64_t a1, uint64_t a2)
{
  if (bitmap_context_delegate_create_once != -1)
    dispatch_once_f(&bitmap_context_delegate_create_once, 0, (dispatch_function_t)load_bitmap_context_delegate_create);
  if (creator)
    return creator(a1, a2);
  else
    return 0;
}

uint64_t CG::DisplayList::createContextDelegate(const void *a1)
{
  uint64_t *v2;
  __CFArray *Mutable;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;

  v2 = (uint64_t *)operator new();
  *v2 = (uint64_t)&off_1E1629018;
  v2[1] = 0;
  v2[2] = 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v2[1] = (uint64_t)Mutable;
  CFArrayAppendValue(Mutable, a1);
  v11 = CGContextDelegateCreate((uint64_t)v2, v4, v5, v6, v7, v8, v9, v10);
  v12 = *v2;
  if (v11)
  {
    (*(void (**)(uint64_t *, uint64_t))(v12 + 16))(v2, v11);
  }
  else
  {
    (*(void (**)(uint64_t *))(v12 + 8))(v2);
    CGPostError((uint64_t)"Unable to create display list context delegate", v13, v14, v15, v16, v17, v18, v19, v21);
  }
  return v11;
}

void sub_1849DEC30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DC23C4](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

_QWORD *CG::DisplayListRecorder::initializeDelegateCallbacks(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return CGContextDelegateSetCallbacks(a2, (uint64_t)&CG::DisplayListRecorder::initializeDelegateCallbacks(CGContextDelegate *)::callbacks, 23, a4, a5, a6, a7, a8);
}

uint64_t validate_rgb_bitmap_info(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  int v14;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v8 = *(_QWORD *)(a1 + 80);
  if (v8 <= 9)
  {
    if (v8 == 5)
    {
      if ((*(_DWORD *)(a1 + 40) & 0xF0000) != 0x10000)
        goto LABEL_45;
      if ((*(_DWORD *)(a1 + 40) & 0x1F) != 6)
        goto LABEL_45;
      v10 = 8;
      v11 = 2;
      v20 = *(_DWORD *)(a1 + 40) & 0x7000;
      if (v20)
      {
        if (v20 != 4096 && v20 != 12288)
          goto LABEL_45;
      }
    }
    else
    {
      if (v8 != 8)
        goto LABEL_45;
      v14 = *(_DWORD *)(a1 + 40);
      if ((v14 & 0xF0000) != 0)
        goto LABEL_45;
      if ((*(_DWORD *)(a1 + 40) & 0x1Fu) > 6 || ((1 << (v14 & 0x1F)) & 0x66) == 0)
        goto LABEL_45;
      v10 = 0;
      v11 = 4;
      v16 = *(_DWORD *)(a1 + 40) & 0x7000;
      if (v16)
      {
        if (v16 != 0x2000 && v16 != 0x4000)
          goto LABEL_45;
      }
    }
  }
  else
  {
    switch(v8)
    {
      case 10:
        v17 = *(_DWORD *)(a1 + 40);
        if ((v17 & 0xF0000) != 0x40000 || (v17 & 0x1F) != 0 || (*(_DWORD *)(a1 + 40) & 0x7000) != 0x2000)
          goto LABEL_45;
        v10 = *(_QWORD *)(a1 + 128);
        v11 = 4;
        break;
      case 16:
        v18 = *(_DWORD *)(a1 + 40);
        if ((v18 & 0xF0000) != 0 || (v18 & 0x1B | 4) != 5)
          goto LABEL_45;
        v19 = *(_DWORD *)(a1 + 40) & 0x7000;
        if ((v18 & 0x100) != 0)
        {
          if (v19 != 4096)
          {
            v13 = "Valid parameters for RGB color space model are:\n"
                  "\t16  bits per pixel,\t\t 5  bits per component,\t\t kCGImageAlphaNoneSkipFirst\n"
                  "\t32  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaNoneSkipFirst\n"
                  "\t32  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaNoneSkipLast\n"
                  "\t32  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaPremultipliedFirst\n"
                  "\t32  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaPremultipliedLast\n"
                  "\t32  bits per pixel,\t\t 10 bits per component,\t\t kCGImageAlphaNone|kCGImagePixelFormatRGBCIF10|kCG"
                  "ImageByteOrder16Little\n"
                  "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaPremultipliedLast\n"
                  "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNoneSkipLast\n"
                  "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaPremultipliedLast|kCGBitmapFloatComp"
                  "onents|kCGImageByteOrder16Little\n"
                  "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNoneSkipLast|kCGBitmapFloatComponent"
                  "s|kCGImageByteOrder16Little\n"
                  "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaPremultipliedLast|kCGBitmapFloatComp"
                  "onents\n"
                  "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNoneSkipLast|kCGBitmapFloatComponent"
                  "s\n"
                  "required byte order flag is kCGBitmapByteOrder16Little";
            goto LABEL_46;
          }
          v10 = 0;
          v11 = 8;
        }
        else
        {
          v10 = 0;
          v11 = 8;
          if (v19 && v19 != 4096 && v19 != 12288)
          {
            v13 = "Valid parameters for RGB color space model are:\n"
                  "\t16  bits per pixel,\t\t 5  bits per component,\t\t kCGImageAlphaNoneSkipFirst\n"
                  "\t32  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaNoneSkipFirst\n"
                  "\t32  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaNoneSkipLast\n"
                  "\t32  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaPremultipliedFirst\n"
                  "\t32  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaPremultipliedLast\n"
                  "\t32  bits per pixel,\t\t 10 bits per component,\t\t kCGImageAlphaNone|kCGImagePixelFormatRGBCIF10|kCG"
                  "ImageByteOrder16Little\n"
                  "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaPremultipliedLast\n"
                  "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNoneSkipLast\n"
                  "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaPremultipliedLast|kCGBitmapFloatComp"
                  "onents|kCGImageByteOrder16Little\n"
                  "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNoneSkipLast|kCGBitmapFloatComponent"
                  "s|kCGImageByteOrder16Little\n"
                  "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaPremultipliedLast|kCGBitmapFloatComp"
                  "onents\n"
                  "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNoneSkipLast|kCGBitmapFloatComponent"
                  "s\n"
                  "valid byte order flags are kCGBitmapByteOrderDefault, kCGBitmapByteOrder16Big, kCGBitmapByteOrder16Little";
            goto LABEL_46;
          }
        }
        break;
      case 32:
        v9 = *(_DWORD *)(a1 + 40);
        if ((v9 & 0xF0000) != 0 || (v9 & 0x100) == 0 || (v9 & 0x1B | 4) != 5)
          goto LABEL_45;
        v10 = 0;
        v11 = 16;
        v12 = *(_DWORD *)(a1 + 40) & 0x7000;
        if (v12 && v12 != 0x2000 && v12 != 0x4000)
        {
          v13 = "Valid parameters for RGB color space model are:\n"
                "\t16  bits per pixel,\t\t 5  bits per component,\t\t kCGImageAlphaNoneSkipFirst\n"
                "\t32  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaNoneSkipFirst\n"
                "\t32  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaNoneSkipLast\n"
                "\t32  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaPremultipliedFirst\n"
                "\t32  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaPremultipliedLast\n"
                "\t32  bits per pixel,\t\t 10 bits per component,\t\t kCGImageAlphaNone|kCGImagePixelFormatRGBCIF10|kCGIm"
                "ageByteOrder16Little\n"
                "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaPremultipliedLast\n"
                "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNoneSkipLast\n"
                "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaPremultipliedLast|kCGBitmapFloatCompon"
                "ents|kCGImageByteOrder16Little\n"
                "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNoneSkipLast|kCGBitmapFloatComponents|"
                "kCGImageByteOrder16Little\n"
                "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaPremultipliedLast|kCGBitmapFloatCompon"
                "ents\n"
                "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNoneSkipLast|kCGBitmapFloatComponents\n"
                "valid byte order flags are kCGBitmapByteOrderDefault, kCGBitmapByteOrder32Big, kCGBitmapByteOrder32Little";
LABEL_46:
          unsupported(a1, (uint64_t)v13, a3, a4, a5, a6, a7, a8);
          return 0;
        }
        break;
      default:
        goto LABEL_45;
    }
  }
  if (*(_QWORD *)(a1 + 72) != 8 * v11)
  {
LABEL_45:
    v13 = "Valid parameters for RGB color space model are:\n"
          "\t16  bits per pixel,\t\t 5  bits per component,\t\t kCGImageAlphaNoneSkipFirst\n"
          "\t32  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaNoneSkipFirst\n"
          "\t32  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaNoneSkipLast\n"
          "\t32  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaPremultipliedFirst\n"
          "\t32  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaPremultipliedLast\n"
          "\t32  bits per pixel,\t\t 10 bits per component,\t\t kCGImageAlphaNone|kCGImagePixelFormatRGBCIF10|kCGImageByt"
          "eOrder16Little\n"
          "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaPremultipliedLast\n"
          "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNoneSkipLast\n"
          "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaPremultipliedLast|kCGBitmapFloatComponents|k"
          "CGImageByteOrder16Little\n"
          "\t64  bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNoneSkipLast|kCGBitmapFloatComponents|kCGIma"
          "geByteOrder16Little\n"
          "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaPremultipliedLast|kCGBitmapFloatComponents\n"
          "\t128 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNoneSkipLast|kCGBitmapFloatComponents";
    goto LABEL_46;
  }
  if ((*(_QWORD *)(a1 + 88) & (v11 - 1)) != 0)
  {
    CGPostError((uint64_t)"\nCGBitmapContextCreate: unsupported parameter combination:\n\t%zu %% %zu!= 0; bytes per row must be a multiple of bytes per pixel",
      v10,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      *(_QWORD *)(a1 + 88));
    return 0;
  }
  return check_sizes((_QWORD *)a1, v10, a3, a4, a5, a6, a7, a8);
}

void CGContextSetDelegate(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef v10;
  uint64_t v11;

  if (!a1)
  {
    v11 = 0;
LABEL_12:
    handle_invalid_context((char)"CGContextSetDelegate", v11, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    v11 = a1;
    goto LABEL_12;
  }
  v10 = *(CFTypeRef *)(a1 + 40);
  if (v10 != cf)
  {
    if (cf)
    {
      CFRetain(cf);
      v10 = *(CFTypeRef *)(a1 + 40);
    }
    if (v10)
      CFRelease(v10);
    *(_QWORD *)(a1 + 40) = cf;
  }
}

uint64_t __CGBitmapContextDelegateData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  signed int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  dispatch_once_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  char *v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  _QWORD *v43;
  char **v44;
  _QWORD **v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  signed int v55;
  uint64_t v56;
  int v57;
  __int128 v58;
  char v59;

  if (a1)
    v9 = *(_QWORD *)(a1 + 288);
  else
    v9 = 0;
  v10 = *(_DWORD *)(a2 + 24);
  v11 = *(_DWORD *)(a2 + 28);
  v55 = v10;
  LODWORD(v56) = v11;
  v12 = *(_QWORD *)(a2 + 8);
  v13 = *(_QWORD *)(a2 + 16);
  if (v12 >> 31)
    v14 = 0;
  else
    v14 = v13 >> 31 == 0;
  if (!v14
    || ((HIDWORD(v56) = *(_QWORD *)(a2 + 8), v57 = v13, v10 <= (int)(v12 ^ 0x7FFFFFFF))
      ? (v15 = v11 <= (int)(v13 ^ 0x7FFFFFFF))
      : (v15 = 0),
        !v15 || *(_QWORD *)(a2 + 88) >> 31))
  {
    v54 = v10;
    v37 = "Unsupported dimensions - %d x, %d y, %lu width, %lu height, %lu bytes-per-row";
LABEL_24:
    CGPostError((uint64_t)v37, a2, a3, a4, a5, a6, a7, a8, v54);
    return 0;
  }
  v59 = 0;
  v58 = 0uLL;
  v16 = RIPGetLayerFormat(a2, &v59);
  v24 = RIPGetDepthForLayerFormat(v16, v17, v18, v19, v20, v21, v22, v23);
  if (!v24)
  {
    v40 = *(_QWORD *)(a2 + 32);
    if (v40)
      v40 = *(_QWORD *)(*(_QWORD *)(v40 + 24) + 40);
    CGPostError((uint64_t)"Unsupported pixel description - %lu components, %lu bits-per-component, %lu bits-per-pixel", v25, v26, v27, v28, v29, v30, v31, v40);
    return 0;
  }
  if (v59)
    v32 = 1;
  else
    v32 = 16;
  v33 = *(_QWORD *)(a2 + 64);
  if (v33 && (v34 = *(_QWORD *)(a2 + 88)) != 0)
  {
    if (*(_QWORD *)(a2 + 128))
    {
      v35 = *(unsigned int *)(a2 + 136);
      v36 = *(_QWORD *)(a2 + 120);
    }
    else
    {
      v35 = 0;
      v36 = 0;
    }
    v39 = RIPLayerCreateWithData((uint64_t *)&v55, v32 | 2, v24, v34, v33, v35, v36, *(unsigned int *)(a2 + 96));
  }
  else
  {
    v39 = RIPLayerCreate((uint64_t)RIPLayer_ripl_class, (uint64_t)&v55, v32, v24, *(unsigned int *)(a2 + 96), v29, v30, v31);
  }
  v41 = v39;
  if (!v39)
  {
    v37 = "Unable to create bitmap delegate device";
    goto LABEL_24;
  }
  v42 = *(_QWORD **)(v9 + 88);
  if (v42)
  {
    do
    {
      v43 = v42;
      v42 = (_QWORD *)*v42;
    }
    while (v42);
    v44 = (char **)(v43 + 4);
    if ((*(unsigned int (**)(_QWORD, __int128 *))(*(_QWORD *)v43[4] + 72))(v43[4], &v58)
      && (_DWORD)v58 == v55
      && *(_QWORD *)((char *)&v58 + 4) == v56
      && HIDWORD(v58) == v57)
    {
      goto LABEL_48;
    }
    v45 = (_QWORD **)(v43 + 5);
  }
  else
  {
    v44 = (char **)(v9 + 48);
    if ((*(unsigned int (**)(_QWORD, __int128 *))(**(_QWORD **)(v9 + 48) + 72))(*(_QWORD *)(v9 + 48), &v58)&& (_DWORD)v58 == v55&& *(_QWORD *)((char *)&v58 + 4) == v56&& HIDWORD(v58) == v57)
    {
      goto LABEL_48;
    }
    v45 = (_QWORD **)(v9 + 72);
  }
  ripc_ReleaseClipState(v45);
LABEL_48:
  if (*v44)
    (*(void (**)(char *))(*(_QWORD *)*v44 + 24))(*v44);
  *v44 = v41;
  if (a2)
  {
    do
      v46 = __ldxr((unsigned int *)a2);
    while (__stxr(v46 + 1, (unsigned int *)a2));
  }
  CGBitmapContextInfoRelease(*(_QWORD *)(v9 + 8));
  *(_QWORD *)(v9 + 8) = a2;
  *(_DWORD *)(v9 + 216) = ripc_component_type_from_info(a2, v47, v48, v49, v50, v51, v52, v53);
  return 1;
}

CFTypeRef __CGBitmapContextDelegateCreate(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  signed int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  BOOL v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  dispatch_once_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  CFTypeRef result;
  uint64_t v42;
  char *v43;
  CGColorSpace *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  int v59;
  char v60;

  v60 = 0;
  v9 = *(_DWORD *)(a1 + 24);
  v10 = *(_DWORD *)(a1 + 28);
  v57 = __PAIR64__(v10, v9);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  if (v11 >> 31)
    v13 = 0;
  else
    v13 = v12 >> 31 == 0;
  if (!v13
    || ((v58 = *(_QWORD *)(a1 + 8), v59 = v12, v9 <= (int)(v11 ^ 0x7FFFFFFF))
      ? (v14 = v10 <= (int)(v12 ^ 0x7FFFFFFF))
      : (v14 = 0),
        !v14 || *(_QWORD *)(a1 + 88) >> 31))
  {
    v55 = v9;
    v40 = "Unsupported dimensions - %d x, %d y, %lu width, %lu height, %lu bytes-per-row";
LABEL_22:
    CGPostError((uint64_t)v40, (uint64_t)a2, a3, a4, a5, a6, a7, a8, v55);
    return 0;
  }
  v16 = RIPGetLayerFormat(a1, &v60);
  v24 = RIPGetDepthForLayerFormat(v16, v17, v18, v19, v20, v21, v22, v23);
  if (!v24)
  {
    v42 = *(_QWORD *)(a1 + 32);
    if (v42)
      v42 = *(_QWORD *)(*(_QWORD *)(v42 + 24) + 40);
    CGPostError((uint64_t)"Unsupported pixel description - %lu components, %lu bits-per-component, %lu bits-per-pixel", v25, v26, v27, v28, v29, v30, v31, v42);
    return 0;
  }
  v32 = v24;
  v33 = ripc_Initialize();
  if (!v33)
  {
    v40 = "Failed to create bitmap context delegate";
    goto LABEL_22;
  }
  v34 = v33;
  if (v60)
    v35 = 17;
  else
    v35 = 16;
  v36 = *(_QWORD *)(a1 + 64);
  if (v36 && (v37 = *(_QWORD *)(a1 + 88)) != 0)
  {
    if (*(_QWORD *)(a1 + 128))
    {
      v38 = *(unsigned int *)(a1 + 136);
      v39 = *(_QWORD *)(a1 + 120);
    }
    else
    {
      v38 = 0;
      v39 = 0;
    }
    v43 = RIPLayerCreateWithData((uint64_t *)&v57, v35 | 2, v32, v37, v36, v38, v39, *(unsigned int *)(a1 + 96));
  }
  else
  {
    v43 = RIPLayerCreate((uint64_t)RIPLayer_ripl_class, (uint64_t)&v57, v35, v32, *(unsigned int *)(a1 + 96), a6, a7, a8);
  }
  *((_QWORD *)v34 + 6) = v43;
  if (!v43)
  {
    if (*(_QWORD *)v34)
      CFRelease(*(CFTypeRef *)v34);
    v40 = "Unable to create bitmap delegate device";
    goto LABEL_22;
  }
  v44 = *(CGColorSpace **)(a1 + 32);
  if (!v44)
  {
    v46 = *((_QWORD *)v34 + 25);
    if (!v46)
    {
      *((_QWORD *)v34 + 2) = 0;
      goto LABEL_47;
    }
    CFRetain(*((CFTypeRef *)v34 + 25));
    *((_QWORD *)v34 + 2) = v46;
LABEL_41:
    v56 = 0x3FF0000000000000;
    if (CGCFDictionaryGetFloat(a2, CFSTR("kCGContextDeviceScale"), &v56))
      *((_QWORD *)v34 + 5) = v56;
    *(_OWORD *)(v34 + 24) = *(_OWORD *)(a1 + 48);
    do
      v54 = __ldxr((unsigned int *)a1);
    while (__stxr(v54 + 1, (unsigned int *)a1));
    *((_QWORD *)v34 + 1) = a1;
    *((_DWORD *)v34 + 54) = ripc_component_type_from_info(a1, v47, v48, v49, v50, v51, v52, v53);
    return *(CFTypeRef *)v34;
  }
  v45 = color_transform_create(v44, a2);
  *((_QWORD *)v34 + 2) = v45;
  if (v45)
    goto LABEL_41;
LABEL_47:
  CGPostError((uint64_t)"Failed to create bitmap context color transform", (uint64_t)a2, a3, a4, a5, a6, a7, a8, v55);
  result = *(CFTypeRef *)v34;
  if (*(_QWORD *)v34)
  {
    CFRelease(result);
    return 0;
  }
  return result;
}

char *RIPLayerCreateWithData(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  int v10;
  int v12;
  int *v13;
  char v14;
  int v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  int v20;
  int v21;
  int v22;
  int v23;
  char *v24;
  size_t v25;
  char *v26;
  char *v27;
  int v29;
  uint64_t v30;

  v8 = a8;
  v9 = a7;
  v10 = a6;
  v12 = a4;
  v13 = (int *)a3;
  v14 = a2;
  if (a1)
  {
    v15 = *((_DWORD *)a1 + 2);
    if (v15 < 0)
      return 0;
    v16 = *((_DWORD *)a1 + 3);
    if (v16 < 0)
      return 0;
    v17 = *a1;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
  }
  v30 = v17;
  if (!a3)
    v13 = (int *)RIPGetDepthForLayerFormat(0, a2, 0, a4, a5, a6, a7, a8);
  if (v13 != (int *)RIPGetDepthForLayerFormat(0, a2, a3, a4, a5, a6, a7, a8))
  {
    if (a5)
    {
      if (v10)
        v18 = v9 == 0;
      else
        v18 = 1;
      v19 = v18;
      v29 = v12;
      if ((v14 & 1) != 0 || (v19 & 1) == 0)
      {
        v20 = (*v13 >> 2) & 3;
        if (v20 != 1)
        {
          v10 = v12;
          v9 = a5;
          if (v20 != 2)
          {
            v10 = 0;
            v9 = 0;
          }
        }
      }
      v21 = v8;
      v22 = initialize_deep_mask(v13) | v14 & 0x3E;
      if (v13[4])
        v23 = v22 | 0x200;
      else
        v23 = v22;
      goto LABEL_26;
    }
    return 0;
  }
  v29 = v12;
  v21 = v8;
  v23 = v14 & 0x3E;
LABEL_26:
  if ((v23 & 0x10) != 0)
    v25 = 440;
  else
    v25 = 144;
  v26 = (char *)malloc_type_calloc(1uLL, v25, 0x44405ADEuLL);
  v24 = v26;
  *(_QWORD *)v26 = RIPLayer_ripl_class;
  *((_DWORD *)v26 + 2) = 1;
  *((_DWORD *)v26 + 6) = v16;
  *((_DWORD *)v26 + 7) = v23;
  *(_QWORD *)(v26 + 12) = v30;
  *((_DWORD *)v26 + 5) = v15;
  v27 = v26 + 144;
  if ((v23 & 0x10) == 0)
    v27 = 0;
  *((_QWORD *)v26 + 4) = v13;
  *((_QWORD *)v26 + 5) = v27;
  *((_DWORD *)v26 + 12) = v29;
  *((_DWORD *)v26 + 13) = v21;
  *((_QWORD *)v26 + 7) = a5;
  *((_DWORD *)v26 + 16) = v10;
  *((_QWORD *)v26 + 9) = v9;
  pthread_mutex_init((pthread_mutex_t *)(v26 + 80), 0);
  return v24;
}

uint64_t RIPGetLayerFormat(uint64_t a1, _BYTE *a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t result;
  BOOL v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;

  v3 = *(_DWORD *)(a1 + 40);
  *a2 = 0;
  v4 = v3 & 0x7000;
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    result = 0xFFFFFFFFLL;
    switch(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 40))
    {
      case 0:
        goto LABEL_3;
      case 1:
        v11 = *(_QWORD *)(a1 + 128);
        v12 = *(_QWORD *)(a1 + 80);
        if (!v11)
          goto LABEL_27;
        if (v11 != v12)
          return result;
        *a2 = 1;
        v12 = v11;
LABEL_27:
        if (v12 == 32)
        {
          if ((v3 & 0x100) == 0)
            return result;
          v16 = *(_QWORD *)(a1 + 72);
          if (v4 == 0x2000)
            v17 = 18;
          else
            v17 = -1;
          v18 = (v3 & 0x3000) == 0;
          v19 = 17;
          goto LABEL_70;
        }
        if (v12 == 16)
        {
          if (*(_QWORD *)(a1 + 72) != 16)
            return result;
          if ((v3 & 0x100) != 0)
          {
            v26 = v4 == 4096;
            v27 = 23;
            goto LABEL_136;
          }
          result = 11;
          if ((v3 & 0x7000) != 0 && v4 != 12288)
          {
            if (v4 != 4096)
              return 0xFFFFFFFFLL;
            return 12;
          }
        }
        else if (v12 == 8 && (v3 & 0x7100) == 0)
        {
          v13 = *(_QWORD *)(a1 + 72);
          if (v11 || v13 != 16)
          {
            if (v13 == 8)
              return 1;
            else
              return 0xFFFFFFFFLL;
          }
          else
          {
            if ((v3 & 0x1F) != 5)
            {
              if ((v3 & 0x1F) != 1)
                return result;
              *a2 = 1;
            }
            return 2;
          }
        }
        return result;
      case 3:
        v9 = v3 & 0x1F;
        v10 = *(_QWORD *)(a1 + 80);
        if (v10 <= 9)
        {
          if (v10 == 5)
          {
            v29 = *(_QWORD *)(a1 + 128);
            if (v29)
            {
              if (v29 != 8)
                return result;
              *a2 = 1;
            }
            if ((v3 & 0x100) == 0 && *(_QWORD *)(a1 + 72) == 16 && v9 == 6)
            {
              result = 3;
              if ((v3 & 0x7000) != 0 && v4 != 12288)
              {
                if (v4 != 4096)
                  return 0xFFFFFFFFLL;
                return 4;
              }
            }
          }
          else if (v10 == 8 && (v3 & 0x100) == 0 && *(_QWORD *)(a1 + 72) == 32 && !*(_QWORD *)(a1 + 128))
          {
            switch(v3 & 0x1F)
            {
              case 0:
              case 5:
                goto LABEL_55;
              case 1:
                *a2 = 1;
LABEL_55:
                if (v4 == 0x2000)
                  v20 = 8;
                else
                  v20 = -1;
                v21 = (v3 & 0x3000) == 0;
                v22 = 7;
                goto LABEL_144;
              case 2:
                *a2 = 1;
                goto LABEL_140;
              case 6:
LABEL_140:
                if (v4 == 0x2000)
                  v20 = 6;
                else
                  v20 = -1;
                v21 = (v3 & 0x3000) == 0;
                v22 = 5;
                goto LABEL_144;
              default:
                return result;
            }
          }
          return result;
        }
        if (v10 == 10)
        {
          if ((v3 & 0x100) != 0)
            return result;
          v25 = *(_QWORD *)(a1 + 72);
          v26 = (v3 & 0xF5000) == 0x40000 && v25 == 32;
          v27 = 26;
          goto LABEL_136;
        }
        if (v10 != 16)
        {
          if (v10 == 32 && (v3 & 0x100) != 0 && *(_QWORD *)(a1 + 72) == 128 && !*(_QWORD *)(a1 + 128))
          {
            if (v9 != 5)
            {
              if (v9 == 1)
              {
                *a2 = 1;
              }
              else if ((v3 & 0x1F) != 0)
              {
                return result;
              }
            }
            if (v4 == 0x2000)
              v20 = 20;
            else
              v20 = -1;
            v21 = (v3 & 0x3000) == 0;
            v22 = 19;
LABEL_144:
            if (v21)
              return v22;
            else
              return v20;
          }
          return result;
        }
        v28 = *(_QWORD *)(a1 + 72);
        if ((v3 & 0x100) == 0)
        {
          if (v28 == 64 && !*(_QWORD *)(a1 + 128))
          {
            if (v9 != 5)
            {
              if (v9 == 1)
              {
                *a2 = 1;
              }
              else if ((v3 & 0x1F) != 0)
              {
                return result;
              }
            }
            result = 13;
            if ((v3 & 0x7000) != 0 && v4 != 12288)
            {
              if (v4 != 4096)
                return 0xFFFFFFFFLL;
              return 14;
            }
          }
          return result;
        }
        if (v28 != 64 || *(_QWORD *)(a1 + 128))
          return result;
        if (v9 != 5)
        {
          if (v9 == 1)
          {
            *a2 = 1;
          }
          else if ((v3 & 0x1F) != 0)
          {
            return result;
          }
        }
        v26 = v4 == 4096;
        v27 = 24;
        goto LABEL_136;
      case 4:
        v14 = *(_QWORD *)(a1 + 128);
        v15 = *(_QWORD *)(a1 + 80);
        if (!v14)
          goto LABEL_40;
        if (v14 != v15)
          return result;
        *a2 = 1;
        v15 = v14;
LABEL_40:
        if (v15 == 32)
        {
          if ((v3 & 0x100) == 0)
            return result;
          v24 = *(_QWORD *)(a1 + 72);
          if (v4 == 0x2000)
            v17 = 22;
          else
            v17 = -1;
          if ((v3 & 0x3000) == 0)
            v17 = 21;
          v23 = v24 == 128;
          goto LABEL_80;
        }
        if (v15 == 16)
        {
          if (*(_QWORD *)(a1 + 72) != 64)
            return result;
          if ((v3 & 0x100) != 0)
          {
            v26 = v4 == 4096;
            v27 = 25;
LABEL_136:
            if (v26)
              result = v27;
            else
              result = 0xFFFFFFFFLL;
          }
          else
          {
            result = 15;
            if ((v3 & 0x7000) != 0 && v4 != 12288)
            {
              if (v4 != 4096)
                return 0xFFFFFFFFLL;
              result = 16;
            }
          }
        }
        else if (v15 == 8 && (v3 & 0x100) == 0)
        {
          v16 = *(_QWORD *)(a1 + 72);
          if (v4 == 0x2000)
            v17 = 10;
          else
            v17 = -1;
          v18 = (v3 & 0x3000) == 0;
          v19 = 9;
LABEL_70:
          if (v18)
            v17 = v19;
          v23 = v16 == 32;
LABEL_80:
          if (v23)
            return v17;
          else
            return 0xFFFFFFFFLL;
        }
        break;
      default:
        return result;
    }
  }
  else
  {
LABEL_3:
    if ((v3 & 0x100) == 0 && *(_QWORD *)(a1 + 72) == 8 && *(_QWORD *)(a1 + 80) == 8)
    {
      if (*(_QWORD *)(a1 + 128))
        v7 = 0;
      else
        v7 = v4 == 0;
      v8 = !v7;
      return (v8 << 31 >> 31);
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t ripc_component_type_from_info(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char vars0;

  v8 = *(_QWORD *)(a1 + 80);
  if (v8 <= 9)
  {
    if (v8 != 5 && v8 != 8)
      goto LABEL_19;
    return 1;
  }
  else if (v8 == 32)
  {
    if ((*(_BYTE *)(a1 + 41) & 1) == 0)
      goto LABEL_19;
    return 4;
  }
  else
  {
    if (v8 != 16)
    {
      if (v8 == 10 && *(_QWORD *)(a1 + 72) == 32)
        return 5;
LABEL_19:
      _CGHandleAssert("ripc_component_type_from_info", 47, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/RIP/RIPBitmapContext.c", "", "Unimplemented", a6, a7, a8, vars0);
    }
    if ((*(_BYTE *)(a1 + 41) & 1) != 0)
      return 5;
    else
      return 2;
  }
}

char *ripc_Initialize()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v0 = (char *)malloc_type_calloc(1uLL, 0xE0uLL, 0x10600404AF495FBuLL);
  *(_QWORD *)v0 = CGContextDelegateCreate((uint64_t)v0, v1, v2, v3, v4, v5, v6, v7);
  v8 = malloc_type_malloc(0xA0uLL, 0x106004074580882uLL);
  *v8 = &ripc_class;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = 0;
  *((_DWORD *)v8 + 39) = 1065353216;
  *((_QWORD *)v0 + 22) = v8;
  v9 = malloc_type_malloc(0xA0uLL, 0x106004074580882uLL);
  *v9 = &ripc_class;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = 0;
  *((_DWORD *)v9 + 39) = 1065353216;
  *((_QWORD *)v0 + 23) = v9;
  v10 = malloc_type_malloc(0xA0uLL, 0x106004074580882uLL);
  *v10 = &ripc_class;
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = 0;
  *((_DWORD *)v10 + 39) = 1065353216;
  *((_QWORD *)v0 + 24) = v10;
  *((_DWORD *)v0 + 32) = -1;
  *((_QWORD *)v0 + 7) = 0;
  *((_QWORD *)v0 + 8) = 0;
  *(int64x2_t *)(v0 + 24) = vdupq_n_s64(0x4052000000000000uLL);
  *((_QWORD *)v0 + 5) = 0x3FF0000000000000;
  if (create_default_transform_predicate != -1)
    dispatch_once(&create_default_transform_predicate, &__block_literal_global_5_12711);
  v11 = create_default_transform_transform;
  if (create_default_transform_transform)
    CFRetain((CFTypeRef)create_default_transform_transform);
  *((_QWORD *)v0 + 25) = v11;
  v12 = malloc_type_calloc(1uLL, 0x18uLL, 0x102004062D53EE8uLL);
  *v12 = v12;
  v12[1] = v12;
  *((_QWORD *)v0 + 26) = v12;
  CGContextDelegateSetCallbacks(*(_QWORD **)v0, (uint64_t)&ripc_Initialize_callbacks, 20, v13, v14, v15, v16, v17);
  pthread_mutex_lock(&contexts_mutex);
  v18 = contexts;
  v19 = malloc_type_malloc(0x10uLL, 0x2062DE7BuLL);
  if (v19)
  {
    *v19 = v0;
    v19[1] = v18;
    v18 = (uint64_t)v19;
  }
  contexts = v18;
  pthread_mutex_unlock(&contexts_mutex);
  return v0;
}

uint64_t CGContextDelegateCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (_block_invoke_once_7714 != -1)
    dispatch_once(&_block_invoke_once_7714, &__block_literal_global_4_7715);
  result = CGTypeCreateInstance(CGContextDelegateGetTypeID_context_delegate_id, 280, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    *(_QWORD *)(result + 288) = a1;
    *(_DWORD *)(result + 280) = 0;
  }
  return result;
}

uint64_t CGCFDictionaryGetFloat(CFDictionaryRef theDict, const void *a2, _QWORD *a3)
{
  uint64_t result;
  const __CFNumber *v6;
  CFTypeID v7;
  uint64_t valuePtr;

  result = 0;
  if (theDict)
  {
    if (a2)
    {
      result = (uint64_t)CFDictionaryGetValue(theDict, a2);
      if (result)
      {
        v6 = (const __CFNumber *)result;
        v7 = CFGetTypeID((CFTypeRef)result);
        if (v7 == CFNumberGetTypeID())
        {
          valuePtr = 0;
          CFNumberGetValue(v6, kCFNumberDoubleType, &valuePtr);
          if (a3)
            *a3 = valuePtr;
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t initialize_deep_mask(int *a1)
{
  int v2;

  if (initialize_deep_mask_predicate != -1)
    dispatch_once(&initialize_deep_mask_predicate, &__block_literal_global_16546);
  v2 = *a1;
  if (*a1 == 134755160 || v2 == 269497256)
    return 256;
  if (v2 == 269497257)
    return initialize_deep_mask_fp16_deep_mask_on << 8;
  return 0;
}

uint64_t color_transform_create(CGColorSpaceRef a1, const void *a2)
{
  _QWORD *v3;
  int Type;
  const __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Instance;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  pthread_mutex_t *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v31;

  if (a1)
  {
    v3 = a1;
    Type = CGColorSpaceGetType(a1);
    a1 = 0;
    v5 = CFSTR("kCGColorSpaceGenericGrayGamma2_2");
    switch(Type)
    {
      case 0:
        goto LABEL_6;
      case 1:
        v5 = CFSTR("kCGColorSpaceSRGB");
        goto LABEL_6;
      case 2:
        v5 = CFSTR("kCGColorSpaceGenericCMYK");
LABEL_6:
        a1 = CGColorSpaceCreateWithName(v5);
        v3 = a1;
        if (a1)
          goto LABEL_7;
        goto LABEL_13;
      case 3:
      case 4:
      case 5:
      case 6:
      case 10:
      case 11:
        CFRetain(v3);
LABEL_7:
        if (!*(_BYTE *)(v3[3] + 10))
        {
          a1 = (CGColorSpaceRef)v3;
          goto LABEL_13;
        }
        if (kCGColorTransformDefaultCMYK_block_invoke_once != -1)
          dispatch_once(&kCGColorTransformDefaultCMYK_block_invoke_once, &__block_literal_global_25_15643);
        Instance = CGTypeCreateInstance(CGColorTransformGetTypeID_type_id, 88, v6, v7, v8, v9, v10, v11);
        v13 = Instance;
        *(_DWORD *)(Instance + 20) = 1;
        *(_BYTE *)(Instance + 96) = 1;
        if (a2)
        {
          CFRetain(a2);
          *(_QWORD *)(v13 + 32) = a2;
          v14 = v3;
          v15 = (unint64_t)a2;
        }
        else
        {
          *(_QWORD *)(Instance + 32) = 0;
          v14 = v3;
          v15 = 0;
        }
        *(_QWORD *)(v13 + 24) = CGColorTransformBaseAcquire(v14, v15);
        do
        {
          v16 = __ldxr((unsigned int *)&color_transform_create_identifier);
          v17 = v16 + 1;
        }
        while (__stxr(v17, (unsigned int *)&color_transform_create_identifier));
        *(_DWORD *)(v13 + 16) = v17;
        *(_QWORD *)(v13 + 88) = 0;
        v18 = *(_QWORD *)(v3[3] + 40);
        if (v18 <= 4)
        {
          v19 = (pthread_mutex_t *)malloc_type_calloc(1uLL, 0x58uLL, 0x1020040867A26DAuLL);
          *(_QWORD *)(v13 + 88) = v19;
          LODWORD(v19[1].__sig) = v18;
          *(_QWORD *)&v19[1].__opaque[8] = 0;
          pthread_mutex_init(v19, 0);
        }
        if (a2)
        {
          *(_QWORD *)(v13 + 40) = create_default_color_space((const __CFDictionary *)a2, CFSTR("DefaultGray"), 0);
          *(_QWORD *)(v13 + 48) = create_default_color_space((const __CFDictionary *)a2, CFSTR("DefaultRGB"), 1);
          *(_QWORD *)(v13 + 56) = create_default_color_space((const __CFDictionary *)a2, CFSTR("DefaultCMYK"), 2);
        }
        if (!*(_QWORD *)(v13 + 40))
          *(_QWORD *)(v13 + 40) = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceGenericGrayGamma2_2"));
        if (!*(_QWORD *)(v13 + 48))
          *(_QWORD *)(v13 + 48) = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceSRGB"));
        if (!*(_QWORD *)(v13 + 56))
          *(_QWORD *)(v13 + 56) = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceGenericCMYK"));
        if (!*(_QWORD *)(v13 + 64))
        {
          if (*(_DWORD *)(v3[3] + 24))
            v20 = *(const void **)(v13 + 40);
          else
            v20 = v3;
          if (v20)
            CFRetain(v20);
          *(_QWORD *)(v13 + 64) = v20;
        }
        if (!*(_QWORD *)(v13 + 72))
        {
          if (*(_DWORD *)(v3[3] + 24) == 1)
            v21 = v3;
          else
            v21 = *(const void **)(v13 + 48);
          if (v21)
            CFRetain(v21);
          *(_QWORD *)(v13 + 72) = v21;
        }
        if (!*(_QWORD *)(v13 + 80))
        {
          if (*(_DWORD *)(v3[3] + 24) == 2)
            v22 = v3;
          else
            v22 = *(const void **)(v13 + 56);
          if (v22)
            CFRetain(v22);
          *(_QWORD *)(v13 + 80) = v22;
        }
        CGColorSpaceRelease((CGColorSpaceRef)v3);
        if (show_log_predicate != -1)
          dispatch_once(&show_log_predicate, &__block_literal_global_45_15646);
        if (show_log_show_log)
        {
          v31 = CGBacktraceCreate(10);
          CGPostError((uint64_t)"CGColorTransform %p created. Backtrace:\n%s\n", v23, v24, v25, v26, v27, v28, v29, v13);
          free(v31);
        }
        break;
      default:
        goto LABEL_13;
    }
  }
  else
  {
LABEL_13:
    CGColorSpaceRelease(a1);
    return 0;
  }
  return v13;
}

CGColorSpaceRef CGColorSpaceCreateWithName(CGColorSpaceRef name)
{
  const __CFString *v1;
  const __CFString **v2;
  uint64_t v3;
  unint64_t v4;
  const __CFString *v5;
  const __CFString *v6;
  uint64_t (*Value)(void);
  CFIndex Length;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char buffer[1025];
  uint64_t v18;
  CFRange v19;

  v18 = *MEMORY[0x1E0C80C00];
  if (name)
  {
    v1 = (const __CFString *)name;
    if (CFEqual(name, CFSTR("kCGColorSpaceITUR_2020_PQ_EOTF")))
      v1 = CFSTR("kCGColorSpaceITUR_2100_PQ");
    if (CFEqual(v1, CFSTR("kCGColorSpaceITUR_2020_PQ")))
      v1 = CFSTR("kCGColorSpaceITUR_2100_PQ");
    if (CFEqual(v1, CFSTR("kCGColorSpaceITUR_2020_HLG")))
      v1 = CFSTR("kCGColorSpaceITUR_2100_HLG");
    if (CFEqual(v1, CFSTR("kCGColorSpaceDisplayP3_PQ_EOTF")))
      v1 = CFSTR("kCGColorSpaceDisplayP3_PQ");
    if (CGColorSpaceCreateWithName_predicate != -1)
      dispatch_once(&CGColorSpaceCreateWithName_predicate, &__block_literal_global_111);
    v2 = (const __CFString **)CGColorSpaceCreateWithName_name_creator_pair_array;
    v3 = 44;
    if (!CGColorSpaceCreateWithName_name_creator_pair_count)
      v3 = 0;
    while (v3)
    {
      if (*v2 == v1)
      {
        v3 = 0;
LABEL_27:
        Value = (uint64_t (*)(void))v2[2 * v3 + 1];
        if (Value)
          goto LABEL_29;
        break;
      }
      v4 = v3--;
      v5 = v2[2 * v3];
      if (v5 == v1)
        goto LABEL_27;
      v3 = v4 >> 1;
      v6 = v2[2 * (v4 >> 1)];
      if (v6 == v1)
        goto LABEL_27;
      if (*v2 >= v1 || v6 <= v1)
      {
        v2 += 2 * v3;
        v3 = v4 - v3;
        if (v5 <= v1 || v6 >= v1)
          break;
      }
    }
    Value = (uint64_t (*)(void))CFDictionaryGetValue((CFDictionaryRef)CGColorSpaceCreateWithName_name_creator_pair_dict, v1);
    if (!Value)
      goto LABEL_30;
LABEL_29:
    name = (CGColorSpaceRef)Value();
    if (name)
      return name;
LABEL_30:
    bzero(buffer, 0x401uLL);
    Length = CFStringGetLength(v1);
    if (!CFStringGetCString(v1, buffer, 1024, 0x600u))
    {
      v19.location = 0;
      v19.length = Length;
      CFStringGetBytes(v1, v19, 0x600u, 0x3Fu, 0, (UInt8 *)buffer, 1024, 0);
    }
    CGPostError((uint64_t)"CGColorSpaceCreateWithName failed for %s", v10, v11, v12, v13, v14, v15, v16, (char)buffer);
    return 0;
  }
  return name;
}

uint64_t CGColorSpaceCreateSRGB()
{
  uint64_t v0;

  if (CGColorSpaceCreateSRGB_predicate != -1)
    dispatch_once(&CGColorSpaceCreateSRGB_predicate, &__block_literal_global_155_5867);
  v0 = CGColorSpaceCreateSRGB_space;
  if (CGColorSpaceCreateSRGB_space)
    CFRetain((CFTypeRef)CGColorSpaceCreateSRGB_space);
  return v0;
}

uint64_t CGColorSpaceCreateGenericGrayGamma22()
{
  uint64_t v0;

  if (CGColorSpaceCreateGenericGrayGamma22_predicate != -1)
    dispatch_once(&CGColorSpaceCreateGenericGrayGamma22_predicate, &__block_literal_global_151);
  v0 = CGColorSpaceCreateGenericGrayGamma22_space;
  if (CGColorSpaceCreateGenericGrayGamma22_space)
    CFRetain((CFTypeRef)CGColorSpaceCreateGenericGrayGamma22_space);
  return v0;
}

uint64_t CGColorSpaceCreateGenericCMYK()
{
  uint64_t v0;

  if (CGColorSpaceCreateGenericCMYK_predicate != -1)
    dispatch_once(&CGColorSpaceCreateGenericCMYK_predicate, &__block_literal_global_135);
  v0 = CGColorSpaceCreateGenericCMYK_space;
  if (CGColorSpaceCreateGenericCMYK_space)
    CFRetain((CFTypeRef)CGColorSpaceCreateGenericCMYK_space);
  return v0;
}

uint64_t CGColorTransformBaseAcquire(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t Instance;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFTypeRef v20;
  BOOL v21;
  uint64_t v22;
  _OWORD *v23;
  CC_MD5_CTX *v24;
  uint64_t v25;
  CFTypeRef v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  pthread_mutexattr_t v34;
  uint64_t data;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock(&cacheMutex);
  v10 = (uint64_t *)base_cache;
  if (base_cache)
  {
    while (1)
    {
      Instance = *v10;
      v12 = *(_QWORD *)(*v10 + 24);
      if ((!(a2 | v12) || a2 && v12 && CFEqual((CFTypeRef)a2, (CFTypeRef)v12))
        && matches_space(*(_QWORD *)(Instance + 16), (uint64_t)a1))
      {
        break;
      }
      v10 = (uint64_t *)v10[1];
      if (!v10)
        goto LABEL_8;
    }
    ++*(_QWORD *)(Instance + 32);
  }
  else
  {
LABEL_8:
    if (_block_invoke_once_4218 != -1)
      dispatch_once(&_block_invoke_once_4218, &__block_literal_global_4_4219);
    Instance = CGTypeCreateInstance(CGColorTransformBaseGetTypeID_type_id, 32, v4, v5, v6, v7, v8, v9);
    if (kCGMD5NULL_block_invoke_once != -1)
      dispatch_once(&kCGMD5NULL_block_invoke_once, &__block_literal_global_7_14863);
    v19 = CGTypeCreateInstance(CGColorTransformCacheGetTypeID_type_id, 112, v13, v14, v15, v16, v17, v18);
    if (a1)
      CFRetain(a1);
    *(_QWORD *)(v19 + 16) = a1;
    if (a2)
      v20 = CFRetain((CFTypeRef)a2);
    else
      v20 = 0;
    *(_QWORD *)(v19 + 40) = v20;
    if (a1)
      v21 = *(_BYTE *)(a1[3] + 12) != 0;
    else
      v21 = 1;
    *(_BYTE *)(v19 + 49) = v21;
    v34.__sig = 0;
    *(_QWORD *)v34.__opaque = 0;
    pthread_mutexattr_init(&v34);
    pthread_mutexattr_settype(&v34, 2);
    pthread_mutex_init((pthread_mutex_t *)(v19 + 56), &v34);
    pthread_mutexattr_destroy(&v34);
    *(_QWORD *)(v19 + 120) = 0;
    v22 = a1[3];
    if (v22)
      v23 = (_OWORD *)(v22 + 56);
    else
      v23 = 0;
    *(_OWORD *)(v19 + 24) = *v23;
    *(_BYTE *)(v19 + 48) = 0;
    if (a2)
    {
      *(_BYTE *)(v19 + 48) = CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("kCGColorTransformBlackPointCompensation")) == (const void *)*MEMORY[0x1E0C9AE50];
      v24 = (CC_MD5_CTX *)malloc_type_malloc(0x5CuLL, 0x2062DE7BuLL);
      CC_MD5_Init(v24);
      if (v24)
      {
        CC_MD5_Update(v24, (const void *)(v19 + 24), 0x10u);
        data = CGCFDictionaryGetMD5Digest((const __CFDictionary *)a2, 1u);
        v36 = v25;
        CC_MD5_Update(v24, &data, 0x10u);
        CC_MD5_Final((unsigned __int8 *)(v19 + 24), v24);
      }
      else
      {
        data = CGCFDictionaryGetMD5Digest((const __CFDictionary *)a2, 1u);
        v36 = v27;
      }
      free(v24);
      *(_QWORD *)(Instance + 16) = v19;
      *(_QWORD *)(Instance + 32) = 1;
      *(_BYTE *)(Instance + 40) = 1;
      v26 = CFRetain((CFTypeRef)a2);
    }
    else
    {
      v26 = 0;
      *(_QWORD *)(Instance + 16) = v19;
      *(_QWORD *)(Instance + 32) = 1;
      *(_BYTE *)(Instance + 40) = 1;
    }
    *(_QWORD *)(Instance + 24) = v26;
    v28 = base_cache;
    if (base_cache)
    {
      v29 = base_cache;
      do
      {
        v30 = v29;
        v29 = *(_QWORD *)(v29 + 8);
      }
      while (v29);
      v31 = malloc_type_malloc(0x10uLL, 0x2062DE7BuLL);
      if (v31)
      {
        *v31 = Instance;
        v31[1] = 0;
      }
      *(_QWORD *)(v30 + 8) = v31;
    }
    else
    {
      v32 = malloc_type_malloc(0x10uLL, 0x2062DE7BuLL);
      v28 = (uint64_t)v32;
      if (v32)
      {
        *v32 = Instance;
        v32[1] = 0;
      }
    }
    base_cache = v28;
  }
  pthread_mutex_unlock(&cacheMutex);
  return Instance;
}

double get_device_clip_bounding_box(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double (*v4)(void);
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double *v12;
  double Bounds;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double result;
  CGRect v21;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 96);
  if (v2)
  {
    v4 = *(double (**)(void))(v2 + 48);
    if (v4)
    {
      v5 = v4();
      v7 = v6;
      v9 = v8;
      v11 = v10;
      v3 = *(_QWORD *)(a1 + 96);
    }
    else
    {
      v9 = 1.79769313e308;
      v5 = -8.98846567e307;
      v7 = -8.98846567e307;
      v11 = 1.79769313e308;
    }
  }
  else
  {
    v9 = 0.0;
    v5 = INFINITY;
    v7 = INFINITY;
    v11 = 0.0;
  }
  v12 = *(double **)(v3 + 112);
  if (v12)
  {
    Bounds = CGClipStackGetBounds(v12);
    v15 = v14;
    v17 = v16;
    v19 = v18;
  }
  else
  {
    v15 = 0xFFDFFFFFFFFFFFFFLL;
    v17 = 0x7FEFFFFFFFFFFFFFLL;
    Bounds = -8.98846567e307;
    v19 = 0x7FEFFFFFFFFFFFFFLL;
  }
  v21.origin.x = v5;
  v21.origin.y = v7;
  v21.size.width = v9;
  v21.size.height = v11;
  *(_QWORD *)&result = (unint64_t)CGRectIntersection(v21, *(CGRect *)&Bounds);
  return result;
}

double CGContextDelegateGetBounds(uint64_t a1)
{
  void (*v1)(void);
  double result;

  if (!a1)
    return INFINITY;
  v1 = *(void (**)(void))(a1 + 48);
  if (!v1)
    return -8.98846567e307;
  v1();
  return result;
}

CGFloat dlRecorder_GetBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFArrayRef *v8;
  char *v9;
  const CGRect *v10;

  if (a1 && (v8 = *(CFArrayRef **)(a1 + 288)) != 0)
  {
    v9 = (char *)CG::DisplayListRecorder::currentDisplayList(v8);
    v10 = &CGRectZero;
    if (v9)
      v10 = (const CGRect *)(v9 + 40);
  }
  else
  {
    CGPostError((uint64_t)"%s: CGContextDelegateGetInfo() returned NULL", a2, a3, a4, a5, a6, a7, a8, (char)"dlRecorder_GetBounds");
    v10 = &CGRectNull;
  }
  return v10->origin.x;
}

char *RIPLayerCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int *v9;
  char v10;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  size_t v23;
  char *v24;
  int v25;
  char *v26;
  BOOL v27;
  char *v28;
  char *v29;
  char *v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v39;
  char *v40;
  int v41;
  uint64_t v42;

  v8 = a5;
  v9 = (int *)a4;
  v10 = a3;
  if (a2)
  {
    v12 = *(_DWORD *)(a2 + 8);
    if ((v12 & 0x80000000) != 0)
      return 0;
    v13 = *(_DWORD *)(a2 + 12);
    if ((v13 & 0x80000000) != 0)
      return 0;
    v14 = *(_QWORD *)a2;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
  }
  v42 = v14;
  if (!a4)
    v9 = (int *)RIPGetDepthForLayerFormat(0, a2, a3, 0, a5, a6, a7, a8);
  if (v9 != (int *)RIPGetDepthForLayerFormat(0, a2, a3, a4, a5, a6, a7, a8))
  {
    if (v12 <= 0x7FFFFE)
    {
      v15 = ((*v9 >> 25) * v12 + 3) & 0xFFFFFFFC;
      v16 = (*v9 >> 2) & 3;
      v17 = ((((HIWORD(*v9) & 0x3F) + 7) >> 3) * v12 + 3) & 0xFFFFFFFC;
      v18 = v17 + v15;
      if (v16 != 1)
      {
        v17 = 0;
        v18 = ((*v9 >> 25) * v12 + 3) & 0xFFFFFFFC;
      }
      if (v16 == 2)
      {
        v17 = ((*v9 >> 25) * v12 + 3) & 0xFFFFFFFC;
        v19 = v17;
      }
      else
      {
        v19 = v18;
      }
      v20 = (v10 & 1) != 0 ? v17 : 0;
      v21 = (v10 & 1) != 0 ? v19 : ((*v9 >> 25) * v12 + 3) & 0xFFFFFFFC;
      v22 = v21 * (unint64_t)v13;
      v23 = v22 > 0x7FFFFFFB ? 0xFFFFFFFFLL : ((_DWORD)v22 + 19) & 0xFFFFFFF0;
      if ((v23 & 0x80000000) == 0)
      {
        v24 = (char *)malloc_type_calloc(1uLL, v23, 0x2D8A5A23uLL);
        if (v24)
        {
          v41 = v8;
          if (v20)
          {
            v25 = (*v9 >> 2) & 3;
            v26 = &v24[v15 * v13];
            if (v25 != 1)
              v26 = 0;
            v27 = v25 == 2;
            v28 = v24;
            if (v27)
              v29 = v24;
            else
              v29 = v26;
          }
          else
          {
            v28 = v24;
            v29 = 0;
          }
          v40 = v28;
          v33 = initialize_deep_mask(v9) | v10 & 0x3C;
          if (v9[4])
            v31 = v33 | 0x200;
          else
            v31 = v33;
          v39 = v20;
          goto LABEL_44;
        }
      }
    }
    return 0;
  }
  v41 = v8;
  v15 = 0;
  v40 = 0;
  v31 = v10 & 0x3C;
  if (v13 | v12)
    v32 = 12;
  else
    v32 = 0;
  v39 = v32;
  if (v13 | v12)
    v29 = (char *)&the_empty_shape;
  else
    v29 = 0;
LABEL_44:
  if ((v31 & 0x10) != 0)
    v34 = 296;
  else
    v34 = 0;
  v35 = (*(uint64_t (**)(uint64_t))(a1 + 8))(a1);
  v36 = (char *)malloc_type_calloc(1uLL, v35 + v34, 0x93A34CFFuLL);
  v30 = v36;
  *(_QWORD *)v36 = a1;
  *((_DWORD *)v36 + 2) = 1;
  *(_QWORD *)(v36 + 12) = v42;
  *((_DWORD *)v36 + 5) = v12;
  *((_DWORD *)v36 + 6) = v13;
  *((_DWORD *)v36 + 7) = v31;
  v37 = &v36[v35];
  if ((v31 & 0x10) == 0)
    v37 = 0;
  *((_QWORD *)v36 + 4) = v9;
  *((_QWORD *)v36 + 5) = v37;
  *((_DWORD *)v36 + 12) = v15;
  *((_DWORD *)v36 + 13) = v41;
  *((_QWORD *)v36 + 7) = v40;
  *((_DWORD *)v36 + 16) = v39;
  *((_QWORD *)v36 + 9) = v29;
  pthread_mutex_init((pthread_mutex_t *)(v36 + 80), 0);
  return v30;
}

_QWORD *create_default_color_space(const __CFDictionary *a1, const void *a2, int a3)
{
  _QWORD *Value;
  _QWORD *v5;
  CFTypeID v6;

  Value = CFDictionaryGetValue(a1, a2);
  v5 = Value;
  if (Value)
  {
    v6 = CFGetTypeID(Value);
    if (kCGColorSpaceSceneReferredDerivative_block_invoke_once != -1)
      dispatch_once(&kCGColorSpaceSceneReferredDerivative_block_invoke_once, &__block_literal_global_77);
    if (v6 == CGColorSpaceGetTypeID_type_id && *(_DWORD *)(v5[3] + 24) == a3)
      CFRetain(v5);
    else
      return 0;
  }
  return v5;
}

uint64_t ripl_size()
{
  return 144;
}

uint64_t CGColorSpaceExtendedSRGB()
{
  uint64_t v0;

  if (CGColorSpaceExtendedSRGB_predicate != -1)
    dispatch_once(&CGColorSpaceExtendedSRGB_predicate, &__block_literal_global_191);
  v0 = CGColorSpaceExtendedSRGB_space;
  if (CGColorSpaceExtendedSRGB_space)
    CFRetain((CFTypeRef)CGColorSpaceExtendedSRGB_space);
  return v0;
}

uint64_t validate_gray_bitmap_info(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  const char *v15;
  int v16;
  int v17;

  v8 = *(_DWORD *)(a1 + 40);
  v9 = v8 & 0x1F;
  if ((v8 & 0x1F) != 0)
  {
    v10 = v9 == 5 || v9 == 1;
    if (!v10 || *(_QWORD *)(a1 + 80) != 8 || *(_QWORD *)(a1 + 72) != 16)
      goto LABEL_21;
    v11 = 2;
LABEL_10:
    if ((v8 & 0x7000) == 0)
    {
      v12 = 8;
LABEL_12:
      if ((*(_QWORD *)(a1 + 88) & (v11 - 1)) == 0 && (v8 & 0xF0000) == 0)
        return check_sizes((_QWORD *)a1, v12, a3, a4, a5, a6, a7, a8);
      goto LABEL_21;
    }
    goto LABEL_21;
  }
  v14 = *(_QWORD *)(a1 + 72);
  if (v14 != *(_QWORD *)(a1 + 80))
    goto LABEL_21;
  if (v14 != 32)
  {
    if (v14 == 16)
    {
      v16 = v8 & 0x7000;
      if ((v8 & 0x100) != 0)
      {
        if (v16 != 4096)
        {
          v15 = "Valid parameters for Gray color space model are:\n"
                "\t8  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaOnly\n"
                "\t8  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaNone\n"
                "\t16 bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaNoneSkipLast\n"
                "\t16 bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaPremultipliedLast\n"
                "\t16 bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNone\n"
                "\t16 bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents|kCGBitmap"
                "ByteOrder16Little\n"
                "\t32 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents\n"
                "required byte order flag is kCGBitmapByteOrder16Little";
          goto LABEL_22;
        }
        v11 = 2;
        v12 = 16;
      }
      else
      {
        v11 = 2;
        v12 = 16;
        if ((v8 & 0x7000) != 0 && v16 != 4096 && v16 != 12288)
        {
          v15 = "Valid parameters for Gray color space model are:\n"
                "\t8  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaOnly\n"
                "\t8  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaNone\n"
                "\t16 bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaNoneSkipLast\n"
                "\t16 bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaPremultipliedLast\n"
                "\t16 bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNone\n"
                "\t16 bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents|kCGBitmap"
                "ByteOrder16Little\n"
                "\t32 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents\n"
                "valid byte order flags are kCGBitmapByteOrderDefault, kCGBitmapByteOrder16Big, kCGBitmapByteOrder16Little";
          goto LABEL_22;
        }
      }
      goto LABEL_12;
    }
    if (v14 != 8)
      goto LABEL_21;
    v11 = 1;
    goto LABEL_10;
  }
  if ((v8 & 0x100) != 0)
  {
    v11 = 4;
    v12 = 32;
    v17 = v8 & 0x7000;
    if ((v8 & 0x7000) != 0 && v17 != 0x2000 && v17 != 0x4000)
    {
      v15 = "Valid parameters for Gray color space model are:\n"
            "\t8  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaOnly\n"
            "\t8  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaNone\n"
            "\t16 bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaNoneSkipLast\n"
            "\t16 bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaPremultipliedLast\n"
            "\t16 bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNone\n"
            "\t16 bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents|kCGBitmapByte"
            "Order16Little\n"
            "\t32 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents\n"
            "valid byte order flags are kCGBitmapByteOrderDefault, kCGBitmapByteOrder32Big, kCGBitmapByteOrder32Little";
      goto LABEL_22;
    }
    goto LABEL_12;
  }
LABEL_21:
  v15 = "Valid parameters for Gray color space model are:\n"
        "\t8  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaOnly\n"
        "\t8  bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaNone\n"
        "\t16 bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaNoneSkipLast\n"
        "\t16 bits per pixel,\t\t 8  bits per component,\t\t kCGImageAlphaPremultipliedLast\n"
        "\t16 bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNone\n"
        "\t16 bits per pixel,\t\t 16 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents|kCGBitmapByteOrde"
        "r16Little\n"
        "\t32 bits per pixel,\t\t 32 bits per component,\t\t kCGImageAlphaNone|kCGBitmapFloatComponents";
LABEL_22:
  unsupported(a1, (uint64_t)v15, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t CGColorSpaceCreateDisplayP3()
{
  uint64_t v0;

  if (CGColorSpaceCreateDisplayP3_predicate != -1)
    dispatch_once(&CGColorSpaceCreateDisplayP3_predicate, &__block_literal_global_137);
  v0 = CGColorSpaceCreateDisplayP3_space;
  if (CGColorSpaceCreateDisplayP3_space)
    CFRetain((CFTypeRef)CGColorSpaceCreateDisplayP3_space);
  return v0;
}

uint64_t CGColorSpaceExtendedGray()
{
  uint64_t v0;

  if (CGColorSpaceExtendedGray_predicate != -1)
    dispatch_once(&CGColorSpaceExtendedGray_predicate, &__block_literal_global_197_5851);
  v0 = CGColorSpaceExtendedGray_space;
  if (CGColorSpaceExtendedGray_space)
    CFRetain((CFTypeRef)CGColorSpaceExtendedGray_space);
  return v0;
}

uint64_t CGColorSpaceLinearSRGB()
{
  uint64_t v0;

  if (CGColorSpaceLinearSRGB_predicate != -1)
    dispatch_once(&CGColorSpaceLinearSRGB_predicate, &__block_literal_global_193_5853);
  v0 = CGColorSpaceLinearSRGB_space;
  if (CGColorSpaceLinearSRGB_space)
    CFRetain((CFTypeRef)CGColorSpaceLinearSRGB_space);
  return v0;
}

uint64_t CGColorSpaceCreateGenericRGB()
{
  uint64_t v0;

  if (CGColorSpaceCreateGenericRGB_predicate != -1)
    dispatch_once(&CGColorSpaceCreateGenericRGB_predicate, &__block_literal_global_133);
  v0 = CGColorSpaceCreateGenericRGB_space;
  if (CGColorSpaceCreateGenericRGB_space)
    CFRetain((CFTypeRef)CGColorSpaceCreateGenericRGB_space);
  return v0;
}

uint64_t CGColorSpaceLinearGray()
{
  uint64_t v0;

  if (CGColorSpaceLinearGray_predicate != -1)
    dispatch_once(&CGColorSpaceLinearGray_predicate, &__block_literal_global_199_5849);
  v0 = CGColorSpaceLinearGray_space;
  if (CGColorSpaceLinearGray_space)
    CFRetain((CFTypeRef)CGColorSpaceLinearGray_space);
  return v0;
}

uint64_t CGColorSpaceExtendedLinearSRGB()
{
  uint64_t v0;

  if (CGColorSpaceExtendedLinearSRGB_predicate != -1)
    dispatch_once(&CGColorSpaceExtendedLinearSRGB_predicate, &__block_literal_global_195);
  v0 = CGColorSpaceExtendedLinearSRGB_space;
  if (CGColorSpaceExtendedLinearSRGB_space)
    CFRetain((CFTypeRef)CGColorSpaceExtendedLinearSRGB_space);
  return v0;
}

uint64_t CGColorSpaceCreateITUR_709()
{
  uint64_t v0;

  if (CGColorSpaceCreateITUR_709_predicate != -1)
    dispatch_once(&CGColorSpaceCreateITUR_709_predicate, &__block_literal_global_167);
  v0 = CGColorSpaceCreateITUR_709_space;
  if (CGColorSpaceCreateITUR_709_space)
    CFRetain((CFTypeRef)CGColorSpaceCreateITUR_709_space);
  return v0;
}

uint64_t CGColorSpaceCreateITUR_2020()
{
  uint64_t v0;

  if (CGColorSpaceCreateITUR_2020_predicate != -1)
    dispatch_once(&CGColorSpaceCreateITUR_2020_predicate, &__block_literal_global_173);
  v0 = CGColorSpaceCreateITUR_2020_space;
  if (CGColorSpaceCreateITUR_2020_space)
    CFRetain((CFTypeRef)CGColorSpaceCreateITUR_2020_space);
  return v0;
}

uint64_t CGColorSpaceCreateROMMRGB()
{
  uint64_t v0;

  if (CGColorSpaceCreateROMMRGB_predicate != -1)
    dispatch_once(&CGColorSpaceCreateROMMRGB_predicate, &__block_literal_global_187);
  v0 = CGColorSpaceCreateROMMRGB_space;
  if (CGColorSpaceCreateROMMRGB_space)
    CFRetain((CFTypeRef)CGColorSpaceCreateROMMRGB_space);
  return v0;
}

uint64_t CGColorSpaceCreateITUR_2100_PQ()
{
  uint64_t v0;

  if (CGColorSpaceCreateITUR_2100_PQ_predicate != -1)
    dispatch_once(&CGColorSpaceCreateITUR_2100_PQ_predicate, &__block_literal_global_183);
  v0 = CGColorSpaceCreateITUR_2100_PQ_space;
  if (CGColorSpaceCreateITUR_2100_PQ_space)
    CFRetain((CFTypeRef)CGColorSpaceCreateITUR_2100_PQ_space);
  return v0;
}

uint64_t CGColorSpaceCreateITUR_2100_HLG()
{
  uint64_t v0;

  if (CGColorSpaceCreateITUR_2100_HLG_predicate != -1)
    dispatch_once(&CGColorSpaceCreateITUR_2100_HLG_predicate, &__block_literal_global_185_5855);
  v0 = CGColorSpaceCreateITUR_2100_HLG_space;
  if (CGColorSpaceCreateITUR_2100_HLG_space)
    CFRetain((CFTypeRef)CGColorSpaceCreateITUR_2100_HLG_space);
  return v0;
}

uint64_t CGColorSpaceCreateITUR_2020_sRGBGamma()
{
  uint64_t v0;

  if (CGColorSpaceCreateITUR_2020_sRGBGamma_predicate != -1)
    dispatch_once(&CGColorSpaceCreateITUR_2020_sRGBGamma_predicate, &__block_literal_global_175);
  v0 = CGColorSpaceCreateITUR_2020_sRGBGamma_space;
  if (CGColorSpaceCreateITUR_2020_sRGBGamma_space)
    CFRetain((CFTypeRef)CGColorSpaceCreateITUR_2020_sRGBGamma_space);
  return v0;
}

uint64_t CGColorSpaceCreateGenericRGBLinear()
{
  uint64_t v0;

  if (CGColorSpaceCreateGenericRGBLinear_predicate != -1)
    dispatch_once(&CGColorSpaceCreateGenericRGBLinear_predicate, &__block_literal_global_159);
  v0 = CGColorSpaceCreateGenericRGBLinear_space;
  if (CGColorSpaceCreateGenericRGBLinear_space)
    CFRetain((CFTypeRef)CGColorSpaceCreateGenericRGBLinear_space);
  return v0;
}

uint64_t CGColorSpaceCreateDisplayP3_PQ()
{
  uint64_t v0;

  if (CGColorSpaceCreateDisplayP3_PQ_predicate != -1)
    dispatch_once(&CGColorSpaceCreateDisplayP3_PQ_predicate, &__block_literal_global_145);
  v0 = CGColorSpaceCreateDisplayP3_PQ_space;
  if (CGColorSpaceCreateDisplayP3_PQ_space)
    CFRetain((CFTypeRef)CGColorSpaceCreateDisplayP3_PQ_space);
  return v0;
}

uint64_t CGColorSpaceCreateDisplayP3_HLG()
{
  uint64_t v0;

  if (CGColorSpaceCreateDisplayP3_HLG_predicate != -1)
    dispatch_once(&CGColorSpaceCreateDisplayP3_HLG_predicate, &__block_literal_global_147);
  v0 = CGColorSpaceCreateDisplayP3_HLG_space;
  if (CGColorSpaceCreateDisplayP3_HLG_space)
    CFRetain((CFTypeRef)CGColorSpaceCreateDisplayP3_HLG_space);
  return v0;
}

uint64_t CGColorSpaceCreateAdobeRGB1998()
{
  uint64_t v0;

  if (CGColorSpaceCreateAdobeRGB1998_predicate != -1)
    dispatch_once(&CGColorSpaceCreateAdobeRGB1998_predicate, &__block_literal_global_153);
  v0 = CGColorSpaceCreateAdobeRGB1998_space;
  if (CGColorSpaceCreateAdobeRGB1998_space)
    CFRetain((CFTypeRef)CGColorSpaceCreateAdobeRGB1998_space);
  return v0;
}

uint64_t CGColorSpaceCreateLinearDisplayP3()
{
  uint64_t v0;

  if (CGColorSpaceCreateLinearDisplayP3_predicate != -1)
    dispatch_once(&CGColorSpaceCreateLinearDisplayP3_predicate, &__block_literal_global_141_5870);
  v0 = CGColorSpaceCreateLinearDisplayP3_space;
  if (CGColorSpaceCreateLinearDisplayP3_space)
    CFRetain((CFTypeRef)CGColorSpaceCreateLinearDisplayP3_space);
  return v0;
}

uint64_t CGColorSpaceCreateGenericXYZ()
{
  uint64_t v0;

  if (CGColorSpaceCreateGenericXYZ_predicate != -1)
    dispatch_once(&CGColorSpaceCreateGenericXYZ_predicate, &__block_literal_global_163);
  v0 = CGColorSpaceCreateGenericXYZ_space;
  if (CGColorSpaceCreateGenericXYZ_space)
    CFRetain((CFTypeRef)CGColorSpaceCreateGenericXYZ_space);
  return v0;
}

uint64_t CGColorSpaceCreateGenericGray()
{
  uint64_t v0;

  if (CGColorSpaceCreateGenericGray_predicate != -1)
    dispatch_once(&CGColorSpaceCreateGenericGray_predicate, &__block_literal_global_131_5874);
  v0 = CGColorSpaceCreateGenericGray_space;
  if (CGColorSpaceCreateGenericGray_space)
    CFRetain((CFTypeRef)CGColorSpaceCreateGenericGray_space);
  return v0;
}

uint64_t CGBitmapGetFastestAlignment()
{
  return 32;
}

uint64_t CGGStateGetShouldAntialias(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 120) + 7) & 1;
}

uint64_t CGImageHasAlpha(uint64_t result)
{
  if (result)
    return (*(unsigned __int8 *)(result + 39) >> 2) & 1;
  return result;
}

uint64_t CGColorTRCGetGammaID(uint64_t a1)
{
  if (CGColorTRCGetGammaID_cglibrarypredicate != -1)
    dispatch_once(&CGColorTRCGetGammaID_cglibrarypredicate, &__block_literal_global_6);
  return CGColorTRCGetGammaID_f(a1);
}

uint64_t CGImageProviderGetComponentType(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 32);
  return result;
}

uint64_t cache_finalize(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  const void *v5;

  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    do
    {
      cache_entry_release(*(char **)v2);
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2);
    v3 = *(_QWORD **)(a1 + 120);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)v3[1];
        free(v3);
        v3 = v4;
      }
      while (v4);
    }
  }
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 16));
  v5 = *(const void **)(a1 + 40);
  if (v5)
    CFRelease(v5);
  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 56));
}

void cache_entry_release(char *a1)
{
  uint64_t i;
  const void *v3;

  if (a1)
  {
    for (i = 24; i != 64; i += 8)
    {
      v3 = *(const void **)&a1[i];
      if (v3)
        CFRelease(v3);
    }
    free(a1);
  }
}

void CGContextRotateCTM(CGContextRef c, CGFloat angle)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __double2 v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;

  if (c && *((_DWORD *)c + 4) == 1129601108)
  {
    v8 = *((_QWORD *)c + 12);
    v10 = *(float64x2_t *)(v8 + 40);
    v11 = *(float64x2_t *)(v8 + 24);
    v12 = *(float64x2_t *)(v8 + 56);
    v9 = __sincos_stret(angle);
    *(float64x2_t *)(v8 + 24) = vmlaq_n_f64(vmulq_n_f64(v10, v9.__sinval), v11, v9.__cosval);
    *(float64x2_t *)(v8 + 40) = vmlsq_lane_f64(vmulq_n_f64(v10, v9.__cosval), v11, v9.__sinval, 0);
    *(float64x2_t *)(v8 + 56) = vaddq_f64(v12, vmlaq_f64(vmulq_f64(v10, (float64x2_t)0), (float64x2_t)0, v11));
  }
  else
  {
    handle_invalid_context((char)"CGContextRotateCTM", (uint64_t)c, v2, v3, v4, v5, v6, v7);
  }
}

double CGGStateGetAlpha(uint64_t a1)
{
  return *(double *)(*(_QWORD *)(a1 + 120) + 8);
}

uint64_t CGGStateGetSoftMask(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 120) + 40);
}

int CGFontGetUnitsPerEm(CGFontRef font)
{
  _DWORD *font_info;

  font_info = get_font_info(font);
  if (font_info)
    LODWORD(font_info) = font_info[2];
  return (int)font_info;
}

void CGContextAddCurveToPoint(CGContextRef c, CGFloat cp1x, CGFloat cp1y, CGFloat cp2x, CGFloat cp2y, CGFloat x, CGFloat y)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const CGPath *v15;
  CGContextRef v22;

  if (!c)
  {
    v22 = 0;
LABEL_8:
    handle_invalid_context((char)"CGContextAddCurveToPoint", (uint64_t)v22, v8, v9, v10, v11, v12, v13);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v22 = c;
    goto LABEL_8;
  }
  v15 = (const CGPath *)*((_QWORD *)c + 21);
  if (v15 && !CGPathIsEmpty(v15))
    CGPathAddCurveToPoint(*((CGMutablePathRef *)c + 21), (const CGAffineTransform *)(*((_QWORD *)c + 12) + 24), cp1x, cp1y, cp2x, cp2y, x, y);
  else
    CGPostError((uint64_t)"%s: no current point.", v7, v8, v9, v10, v11, v12, v13, (char)"CGContextAddCurveToPoint");
}

void CGContextDrawPath(CGContextRef c, CGPathDrawingMode mode)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const CGPath *v9;
  char *v11;
  double v12;
  CGPathDrawingMode v13;
  CGContextRef v14;
  _QWORD v15[5];
  CGPathDrawingMode v16;

  if (!c)
  {
    v14 = 0;
LABEL_11:
    handle_invalid_context((char)"CGContextDrawPath", (uint64_t)v14, v2, v3, v4, v5, v6, v7);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v14 = c;
    goto LABEL_11;
  }
  v9 = (const CGPath *)*((_QWORD *)c + 21);
  if (v9 && !CGPathIsEmpty(v9))
  {
    v11 = (char *)*((_QWORD *)c + 21);
    *((_QWORD *)c + 21) = 0;
    v12 = *(double *)(*(_QWORD *)(*((_QWORD *)c + 12) + 128) + 8);
    if (v12 > 0.0 || v12 == -1.0905473e16)
    {
      if (mode != -1)
      {
LABEL_13:
        v13 = mode;
LABEL_14:
        v15[0] = MEMORY[0x1E0C809B0];
        v15[1] = 0x40000000;
        v15[2] = __CGContextDrawPath_block_invoke;
        v15[3] = &__block_descriptor_tmp_13117;
        v15[4] = c;
        v16 = v13;
        draw_path(v13, v11, (uint64_t)v15);
      }
    }
    else
    {
      v13 = kCGPathFill;
      switch(mode)
      {
        case -1:
        case 2:
          break;
        case 3:
          goto LABEL_14;
        case 4:
          v13 = kCGPathEOFill;
          goto LABEL_14;
        default:
          goto LABEL_13;
      }
    }
    if (v11)
      CFRelease(v11);
  }
}

BOOL CGPathIsEmpty(CGPathRef path)
{
  CFTypeID v2;

  if (!path)
    return 1;
  if (CGPathDisableTypeValidation)
    return (*((_DWORD *)path + 4) - 10) < 0xFFFFFFF7;
  v2 = CFGetTypeID(path);
  if (v2 == CGPathGetTypeID())
    return (*((_DWORD *)path + 4) - 10) < 0xFFFFFFF7;
  return 1;
}

uint64_t draw_path(int a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  __n128 v8;
  size_t v9;
  const void *v10;
  CGPoint v11[129];
  _QWORD v12[10];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  CGMutablePathRef Mutable;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[10];
  _QWORD v22[4];
  _QWORD v23[5];
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  int v31;
  _QWORD v32[3];
  int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (a1 != 2 || CGPathGetNumberOfElements(a2) < 0x101)
    return (*(uint64_t (**)(uint64_t, char *))(a3 + 16))(a3, a2);
  v38 = 0;
  v39 = &v38;
  v40 = 0x2000000000;
  v41 = 0;
  v34 = 0;
  v35 = &v34;
  v36 = 0x2000000000;
  v37 = 0;
  v32[0] = 0;
  v32[1] = v32;
  v32[2] = 0x2000000000;
  v33 = 0;
  v28 = 0;
  v29 = (int *)&v28;
  v30 = 0x2000000000;
  v31 = 0;
  v24 = 0;
  v25 = &v24;
  v26 = 0x2000000000;
  v27 = 0;
  v23[0] = 0;
  v23[1] = v23;
  v23[2] = 0x2800000000;
  v23[3] = 0;
  v23[4] = 0;
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x2000000000;
  v22[3] = 0;
  v5 = MEMORY[0x1E0C809B0];
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 0x40000000;
  v21[2] = __draw_path_block_invoke;
  v21[3] = &unk_1E165F2D0;
  v21[4] = &v34;
  v21[5] = v23;
  v21[6] = v32;
  v21[7] = &v28;
  v21[8] = &v24;
  v21[9] = v22;
  CGPathApplyWithBlock2((double *)a2, (uint64_t)v21);
  if (*((_DWORD *)v35 + 6) == 1 && v29[6] <= 1 && !*((_DWORD *)v25 + 6))
  {
    v17 = 0;
    v18 = &v17;
    v19 = 0x2000000000;
    v20 = 0;
    v13 = 0;
    v14 = &v13;
    v15 = 0x2000000000;
    Mutable = 0;
    Mutable = CGPathCreateMutable();
    MEMORY[0x1E0C80A78](Mutable, v8);
    v12[0] = v5;
    v12[1] = 0x40000000;
    v12[2] = __draw_path_block_invoke_2;
    v12[3] = &unk_1E165F2F8;
    v12[6] = &v17;
    v12[7] = &v13;
    v12[8] = &v38;
    v12[9] = v11;
    v12[4] = a3;
    v12[5] = v23;
    CGPathApplyWithBlock2((double *)a2, (uint64_t)v12);
    v9 = v18[3];
    if (v9)
    {
      CGPathAddLines((CGMutablePathRef)v14[3], 0, v11, v9);
      (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, v14[3]);
    }
    v10 = (const void *)v14[3];
    if (v10)
      CFRelease(v10);
    v6 = *((unsigned int *)v39 + 6);
    _Block_object_dispose(&v13, 8);
    _Block_object_dispose(&v17, 8);
  }
  else
  {
    v6 = (*(uint64_t (**)(uint64_t, char *))(a3 + 16))(a3, a2);
  }
  _Block_object_dispose(v22, 8);
  _Block_object_dispose(v23, 8);
  _Block_object_dispose(&v24, 8);
  _Block_object_dispose(&v28, 8);
  _Block_object_dispose(v32, 8);
  _Block_object_dispose(&v34, 8);
  _Block_object_dispose(&v38, 8);
  return v6;
}

uint64_t CGContextDelegateDrawPath(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef cf)
{
  uint64_t v9;
  CFTypeID v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef);

  if (result)
  {
    if (cf && ((v9 = result, CGPathDisableTypeValidation) || (v10 = CFGetTypeID(cf), v10 == CGPathGetTypeID())))
    {
      v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef))(v9 + 72);
      if (v11)
        return v11(v9, a2, a3, a4, cf);
      else
        return 1006;
    }
    else
    {
      return 1001;
    }
  }
  return result;
}

uint64_t ripc_DrawPath(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const CGPath *a5)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char v17;
  _DWORD *v18;
  _DWORD *v19;
  _OWORD v20[6];
  _QWORD v21[2];
  __int128 v22;
  uint64_t v23;
  char *v24;
  _OWORD v25[3];

  if (a1)
    v8 = *(_QWORD *)(a1 + 288);
  else
    v8 = 0;
  v9 = 0;
  v10 = 2;
  switch(a4)
  {
    case 0:
      goto LABEL_10;
    case 1:
      v9 = 0;
      v10 = 4;
      goto LABEL_10;
    case 2:
      v9 = 1;
      v10 = 1;
      goto LABEL_10;
    case 3:
      v9 = 0;
      v10 = 3;
      goto LABEL_10;
    case 4:
      v9 = 0;
      v10 = 5;
LABEL_10:
      memset(v25, 0, sizeof(v25));
      v23 = 0;
      result = ripc_GetRenderingState(v8, a2, a3, (uint64_t)v25);
      if ((_DWORD)result)
      {
        v15.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 8);
        v22 = *(_OWORD *)(v8 + 24);
        v16 = *(_QWORD *)(v8 + 40);
        v21[0] = v15.n128_u64[0];
        v21[1] = v16;
        v17 = *(_BYTE *)(a2 + 81);
        if (v17)
          v17 = *(_BYTE *)(*(_QWORD *)(a3 + 120) + 7) & 1;
        LOBYTE(v23) = v17;
        v24 = (char *)&v25[1] + 8;
        if ((v9 & 1) == 0)
        {
          v18 = *(_DWORD **)(v8 + 56);
          if (!v18)
          {
            v18 = malloc_type_calloc(1uLL, 0xB8uLL, 0x415BF41uLL);
            *(_QWORD *)v18 = RIPRenderCreate_ripr_class;
            v18[2] = 1;
            *((_QWORD *)v18 + 2) = 0;
            *(_QWORD *)(v8 + 56) = v18;
          }
          RIPRenderPath(v18, (uint64_t)v21, a5, 0);
        }
        if ((v10 & 1) != 0)
        {
          memset(v20, 0, sizeof(v20));
          ripc_GetRenderStroke(a3, (uint64_t)v20, (__int128 *)(a3 + 24));
          v19 = *(_DWORD **)(v8 + 64);
          if (!v19)
          {
            v19 = malloc_type_calloc(1uLL, 0xB8uLL, 0x415BF41uLL);
            *(_QWORD *)v19 = RIPRenderCreate_ripr_class;
            v19[2] = 1;
            *((_QWORD *)v19 + 2) = 0;
            *(_QWORD *)(v8 + 64) = v19;
          }
          RIPRenderPath(v19, (uint64_t)v21, a5, (uint64_t)v20);
        }
        ripc_Render(v8, a2, a3, (uint64_t *)v25, v10, v12, v13, v14, v15);
        result = 0;
      }
      break;
    default:
      result = 1000;
      break;
  }
  return result;
}

void RIPRenderPath(_QWORD *a1, uint64_t a2, const CGPath *a3, uint64_t a4)
{
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  void (*v10)(_QWORD, _QWORD, _QWORD);
  void (*v11)(_QWORD, _QWORD);
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  if (a1)
  {
    if (a3)
    {
      if (a2)
      {
        if (*a1)
        {
          v7 = ripr_Acquire((uint64_t)a1, a2);
          if (v7)
          {
            if (a4)
            {
              v16 = 0;
              v14 = 0u;
              v15 = 0u;
              v13 = 0u;
              v8 = (_QWORD *)ripr_stroke_acquire((uint64_t)v7, (uint64_t)&v13, a4);
              if (v8)
              {
                v9 = v8;
                v10 = (void (*)(_QWORD, _QWORD, _QWORD))v8[2];
                if (v10)
                  v10(v8[1], v14, v8[6]);
                CGPathApply(a3, v9, (CGPathApplierFunction)ripr_path_stroke);
                v11 = (void (*)(_QWORD, _QWORD))v9[4];
                if (v11)
                  v11(v9[1], v9[6]);
                path_iterator::release((uint64_t)v9);
              }
              else
              {
                ripr_Finish((uint64_t)a1);
              }
            }
            else
            {
              v12 = (void *)*((_QWORD *)v7 + 3);
              CGPathApply(a3, v12, (CGPathApplierFunction)ripr_path_fill);
              aa_close((uint64_t)v12);
            }
          }
        }
      }
    }
  }
}

char *ripr_Acquire(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  float32x2_t *v18;
  int *v19;
  _DWORD *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  BOOL v33;
  float v34;
  float v35;
  float v36;
  float32x2_t v37;
  float v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float64x2_t v49;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float32x2_t v56;
  float32x2_t v57;

  if (ripr_Acquire_once != -1)
    dispatch_once(&ripr_Acquire_once, &__block_literal_global_15988);
  v4 = *(char **)(a1 + 16);
  if (v4)
    _ZF = v4 == (char *)(a1 + 168);
  else
    _ZF = 1;
  if (_ZF)
  {
    v4 = (char *)malloc_type_calloc(1uLL, 0x108uLL, 0x10E00409173D0FEuLL);
    aa_create();
    *((_QWORD *)v4 + 3) = v13;
    if (should_use_aaline)
    {
      v14 = (char *)malloc_type_calloc(1uLL, 0xFE8uLL, 0xAFE08493uLL);
      *((_QWORD *)v14 + 31) = 0;
      *((_QWORD *)v14 + 22) = v14 + 248;
      *((_QWORD *)v14 + 23) = v14 + 248;
      *((_OWORD *)v14 + 16) = xmmword_185005040;
      *((_DWORD *)v14 + 42) = 0;
      *((int32x2_t *)v14 + 17) = vdup_n_s32(0x3D23D70Au);
      *((_DWORD *)v14 + 36) = 0;
      *((_DWORD *)v14 + 59) = 1065353216;
      *(_OWORD *)(v14 + 52) = xmmword_185005030;
      *(_OWORD *)(v14 + 104) = xmmword_185005050;
      *((_QWORD *)v14 + 27) = 0;
      *(_OWORD *)v14 = 0u;
      *((_OWORD *)v14 + 1) = 0u;
      *((_OWORD *)v14 + 2) = 0u;
      v15 = malloc_type_malloc(0x1008uLL, 0x1020040EF3C788CuLL);
      if (v15)
      {
        *v15 = 0;
        *((_QWORD *)v14 + 25) = v15 + 1;
        *((_QWORD *)v14 + 26) = v15 + 513;
        *((_QWORD *)v14 + 28) = v15;
LABEL_15:
        *((_QWORD *)v4 + 4) = v14;
        RIPLayerInitialize((uint64_t)(v4 + 120), v6, v7, v8, v9, v10, v11, v12);
        *(_QWORD *)(a1 + 16) = v4;
        goto LABEL_16;
      }
      free(v14);
    }
    v14 = 0;
    goto LABEL_15;
  }
  aa_free_edges(*((_QWORD *)v4 + 3));
  v16 = *((_QWORD *)v4 + 4);
  if (v16)
  {
    aal_free_edges(*((_QWORD *)v4 + 4));
    *(_OWORD *)(v16 + 52) = xmmword_185005030;
  }
LABEL_16:
  v17 = *((_QWORD *)v4 + 3);
  v18 = (float32x2_t *)*((_QWORD *)v4 + 4);
  v4[112] = 0;
  v4[113] = *(_BYTE *)(a2 + 32);
  v19 = *(int **)(a2 + 40);
  if (v19)
  {
    v20 = (_DWORD *)*((_QWORD *)v4 + 9);
    v22 = *v19;
    v21 = v19[1];
    v23 = v19[2];
    v24 = v19[3];
    if (!v20 || *v20 != v22 || v20[1] != v21 || v20[2] != v23 || v20[3] != v24)
    {
      *((_DWORD *)v4 + 14) = v22;
      *((_QWORD *)v4 + 9) = v4 + 56;
      v25 = (float)v22;
      v26 = (float)v21;
      *((double *)v4 + 10) = (float)v22;
      *((double *)v4 + 11) = (float)v21;
      *((_DWORD *)v4 + 16) = v23;
      *((_DWORD *)v4 + 17) = v24;
      v27 = (float)(v23 + v22);
      *((_DWORD *)v4 + 15) = v21;
      v28 = (float)(v24 + v21);
      *((double *)v4 + 12) = v27;
      *((double *)v4 + 13) = v28;
      aa_clipping(v17, 7, (float)v22, (float)v21, v27, v28);
      if (v18)
      {
        v29 = -262140.0;
        if (v25 >= -262140.0)
          v30 = v25;
        else
          v30 = -262140.0;
        if (v26 >= -262140.0)
          v29 = v26;
        v31 = 262140.0;
        if (v28 <= 262140.0)
          v32 = v28;
        else
          v32 = 262140.0;
        if (v27 <= 262140.0)
          v31 = v27;
        if (v30 > v31)
        {
          v30 = 0.0;
          v31 = 0.0;
        }
        v33 = v29 > v32;
        if (v29 > v32)
          v29 = 0.0;
        v18[13].f32[0] = v30;
        v18[13].f32[1] = v29;
        if (v33)
          v34 = 0.0;
        else
          v34 = v32;
        v18[14].f32[0] = v31;
        v18[14].f32[1] = v34;
      }
    }
  }
  else
  {
    aa_clipping(v17, 4, 0.0, 0.0, 0.0, 0.0);
    if (v18)
    {
      v18[14].i32[1] = 1216348096;
      *(float32x2_t *)((char *)&v18[13] + 4) = (float32x2_t)0x487FFFC0C87FFFC0;
    }
    *((_QWORD *)v4 + 9) = 0;
  }
  v35 = *(double *)(a2 + 8);
  v36 = *(double *)a2;
  v37 = vcvt_f32_f64(*(float64x2_t *)(a2 + 16));
  if (*((float *)v4 + 13) != v35
    || *((float *)v4 + 12) != v36
    || *((float *)v4 + 10) != v37.f32[0]
    || *((float *)v4 + 11) != v37.f32[1])
  {
    *((float *)v4 + 12) = v36;
    *((float *)v4 + 13) = v35;
    v38 = fabsf(v36);
    *((float32x2_t *)v4 + 5) = v37;
    v39 = vabs_f32(v37);
    if (v38 < 0.015625)
      v38 = 0.015625;
    v40 = vmul_f32(v39, (float32x2_t)vdup_n_s32(0x3C638E39u));
    __asm { FMOV            V3.2S, #1.0 }
    v45 = vmul_n_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(_D3, v40), (int8x8_t)_D3, (int8x8_t)v40), v38);
    v46 = vmul_f32(v45, (float32x2_t)vdup_n_s32(0x3E4CCCCDu));
    v47 = (float32x2_t)vdup_n_s32(0x3D4CCCCDu);
    v48 = (float32x2_t)vbsl_s8((int8x8_t)vcge_f32(v47, v46), (int8x8_t)v47, (int8x8_t)v46);
    v49 = vcvtq_f64_f32(vmul_f32(v48, v48));
    __asm { FMOV            V4.2D, #16.0 }
    v51 = (float64x2_t)vdupq_n_s64(0x3F70000000000000uLL);
    v52 = vmulq_f64(v49, _Q4);
    v53 = (float64x2_t)vdupq_n_s64(0x4110000000000000uLL);
    v54 = vmulq_f64(v49, (float64x2_t)vdupq_n_s64(0x3FFC71C71C71C71CuLL));
    *(int8x16_t *)(v17 + 96) = vbslq_s8((int8x16_t)vcgtq_f64(v51, v52), (int8x16_t)v51, vbslq_s8((int8x16_t)vcgtq_f64(v52, v53), (int8x16_t)v53, (int8x16_t)v52));
    *(int8x16_t *)(v17 + 112) = vbslq_s8((int8x16_t)vcgtq_f64(v51, v54), (int8x16_t)v51, vbslq_s8((int8x16_t)vcgtq_f64(v54, v53), (int8x16_t)v53, (int8x16_t)v54));
    if (v35 <= 1.0)
      v35 = 0.0;
    *(double *)(v17 + 168) = v35;
    if (v18)
    {
      __asm { FMOV            V3.2S, #5.0 }
      v56 = vdiv_f32(v45, _D3);
      v57 = (float32x2_t)vbsl_s8((int8x8_t)vcge_f32(v47, v56), (int8x8_t)v47, (int8x8_t)v56);
      v18[17] = vmul_f32(v57, v57);
      v18[18].f32[0] = v35;
    }
  }
  return v4;
}

double aa_clipping(uint64_t a1, char a2, float a3, float a4, float a5, float a6)
{
  unsigned int v6;
  double v7;
  double v8;
  double result;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  _BOOL4 v16;
  double v17;
  _BOOL4 v18;
  double v19;
  int v20;
  int v21;
  double v22;
  BOOL v23;
  int v24;
  _BOOL4 v25;
  _BOOL4 v26;
  _BOOL4 v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  double v32;
  double v33;
  double v34;
  int v35;
  int v36;

  v6 = *(_DWORD *)(a1 + 176) & 0xFFFCFFFF | 0x10000;
  *(_DWORD *)(a1 + 176) = v6;
  if ((a2 & 2) != 0)
  {
    if (a4 < -262140.0)
      a4 = -262140.0;
    if (a6 > 262140.0)
      a6 = 262140.0;
    if (a4 <= a6)
    {
      v7 = a4;
      *(double *)(a1 + 72) = v7;
      v8 = a6;
    }
    else
    {
      *(_QWORD *)(a1 + 72) = 0;
      v8 = 0.0;
      v7 = 0.0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 72) = 0xC10FFFF800000000;
    v7 = -262143.0;
    v8 = 262143.0;
  }
  *(double *)(a1 + 88) = v8;
  if ((a2 & 1) != 0)
  {
    if (a3 < -262140.0)
      a3 = -262140.0;
    if (a5 > 262140.0)
      a5 = 262140.0;
    if (a3 <= a5)
    {
      result = a3;
      *(double *)(a1 + 64) = result;
      v10 = a5;
    }
    else
    {
      *(_QWORD *)(a1 + 64) = 0;
      v10 = 0.0;
      result = 0.0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0xC10FFFF800000000;
    result = -262143.0;
    v10 = 262143.0;
  }
  *(double *)(a1 + 80) = v10;
  if (*(_DWORD *)(a1 + 180))
  {
    v12 = *(double *)(a1 + 32);
    v11 = *(double *)(a1 + 40);
    v14 = *(double *)(a1 + 48);
    v13 = *(double *)(a1 + 56);
    if (v14 <= v10)
      v15 = *(double *)(a1 + 48);
    else
      v15 = v10;
    v16 = v13 > v8;
    if (v13 > v8)
      v17 = v8;
    else
      v17 = *(double *)(a1 + 56);
    v18 = v13 < v7;
    if (v13 < v7)
      v19 = v7;
    else
      v19 = v17;
    v20 = (v14 > v10) | (4 * (v14 < result));
    v21 = (2 * v16) | (8 * v18);
    if (v14 < result)
      v22 = result;
    else
      v22 = v15;
    if (v21)
      v23 = v20 == 0;
    else
      v23 = 1;
    if (v23)
      v24 = 0;
    else
      v24 = 16;
    v25 = v12 > v10;
    if (v12 <= v10)
      v10 = *(double *)(a1 + 32);
    v26 = v11 > v8;
    if (v11 <= v8)
      v8 = *(double *)(a1 + 40);
    v27 = v11 < v7;
    if (v11 >= v7)
      v7 = v8;
    v28 = v25 | (4 * (v12 < result));
    v29 = (2 * v26) | (8 * v27);
    if (v12 >= result)
      result = v10;
    if (v29)
      v30 = v28 == 0;
    else
      v30 = 1;
    if (v30)
      v31 = 0;
    else
      v31 = 16;
    v32 = *(double *)(a1 + 160);
    v33 = *(double *)(a1 + 128);
    v34 = *(double *)(a1 + 136);
    v35 = v28 | v29 | v31;
    *(_DWORD *)(a1 + 24) = (int)(v32 + v33 * v22);
    *(_DWORD *)(a1 + 28) = (int)(v32 + v34 * v19);
    v36 = (int)(v32 + v33 * result);
    result = v32 + v34 * v7;
    *(_DWORD *)(a1 + 16) = v36;
    *(_DWORD *)(a1 + 20) = (int)result;
    *(_DWORD *)(a1 + 176) = v24 | v6 & 0xFFFD0000 | (v35 << 8) | v20 | v21;
  }
  return result;
}

uint64_t CGGlyphBuilderLockBitmaps(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  double v16;
  char *Value;
  _QWORD *v18;
  _QWORD *v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  char v23;
  int v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  char **v27;
  uint64_t v28;
  unsigned __int16 *v29;
  int8x8_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint8x8_t v35;
  unint64_t v36;
  void **v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  CFTypeID v45;
  _BYTE *font_info;
  unsigned int *v47;
  _DWORD *v48;
  int v49;
  int v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  CGMutablePathRef GlyphPath;
  float64x2_t v57;
  const CGPath *v58;
  const CGPath *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  unsigned int v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  uint8x8_t v71;
  void **v72;
  unint64_t v73;
  float v74;
  float v75;
  _BOOL8 v76;
  unint64_t v77;
  unint64_t v78;
  int8x8_t prime;
  void *v80;
  void *v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  uint8x8_t v85;
  unint64_t v86;
  uint8x8_t v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  void *v95;
  FILE **v96;
  FILE *v97;
  const char *v98;
  const char *v99;
  std::vector<char>::size_type v100;
  uint64_t result;
  _QWORD *v102;
  char v103;
  double v104;
  double v105;
  _QWORD *v107;
  uint64_t v108;
  _OWORD *v109;
  CGAffineTransform key;
  __int128 v111;
  __int128 v112;

  v9 = a3;
  v12 = *(_QWORD *)(a1 + 88);
  v109 = (_OWORD *)(a1 + 32);
  if (v12)
  {
    v13 = *(_QWORD *)a1;
    v14 = *(_DWORD *)(a1 + 8);
    v16 = *(double *)(a1 + 16);
    v15 = *(double *)(a1 + 24);
    os_unfair_lock_lock((os_unfair_lock_t)(v12 + 4));
    if (!*(_QWORD *)(v12 + 32))
      *(_QWORD *)(v12 + 32) = CFDictionaryCreateMutable(0, 0, &get_strike_strike_key_callbacks, 0);
    v111 = 0u;
    v112 = 0u;
    memset(&key, 0, sizeof(key));
    CGFontStrikeKeyInit((uint64_t)&key, v13, v109, v14, v16, v15);
    Value = (char *)CFDictionaryGetValue(*(CFDictionaryRef *)(v12 + 32), &key);
    if (!Value)
    {
      Value = (char *)malloc_type_calloc(1uLL, 0x870uLL, 0x10800401BCBC891uLL);
      __CFSetLastAllocationEventName();
      *(_DWORD *)Value = 1;
      CGFontStrikeKeyInit((uint64_t)(Value + 8), v13, v109, v14, v16, v15);
      *((_QWORD *)Value + 11) = 0;
      *((_QWORD *)Value + 12) = 0;
      *((_DWORD *)Value + 26) = 0;
      v18 = *(_QWORD **)(v12 + 40);
      v19 = malloc_type_malloc(0x10uLL, 0x2062DE7BuLL);
      if (v19)
      {
        *v19 = Value;
        v19[1] = v18;
        v18 = v19;
      }
      *(_QWORD *)(v12 + 40) = v18;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v12 + 32), Value + 8, Value);
      v9 = a3;
    }
    do
      v20 = __ldxr((unsigned int *)Value);
    while (__stxr(v20 + 1, (unsigned int *)Value));
    v21 = *(_DWORD *)(v12 + 24);
    *(_DWORD *)(v12 + 24) = v21 + 1;
    *((_DWORD *)Value + 1) = v21;
    os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 4));
  }
  else
  {
    Value = 0;
  }
  *(_QWORD *)(a1 + 96) = Value;
  if (!v9)
    return 1;
  v22 = 0;
  v23 = 1;
  if (!Value)
    goto LABEL_21;
LABEL_13:
  v24 = *(_DWORD *)(a2 + 4 * v22);
  v25 = (os_unfair_lock_s *)(Value + 104);
  os_unfair_lock_lock((os_unfair_lock_t)Value + 26);
  v26 = *(_QWORD *)&Value[8 * BYTE1(v24) + 112];
  if (v26 && (v27 = *(char ***)(v26 + 8 * v24)) != 0)
  {
    while (1)
    {
      Value = *v27;
      if (*v27)
      {
        if (*((unsigned __int16 *)Value + 2) == (unsigned __int16)v24
          && __PAIR64__(HIBYTE(v24), BYTE2(v24)) == __PAIR64__(Value[7], Value[6]))
        {
          break;
        }
      }
      v27 = (char **)v27[1];
      if (!v27)
        goto LABEL_19;
    }
  }
  else
  {
LABEL_19:
    Value = 0;
  }
  os_unfair_lock_unlock(v25);
LABEL_21:
  while (1)
  {
    *(_QWORD *)(a4 + 8 * v22) = Value;
    v23 &= Value != 0;
    if (++v22 == v9)
      break;
    Value = *(char **)(a1 + 96);
    if (Value)
      goto LABEL_13;
  }
  if ((v23 & 1) != 0)
    return 1;
  v28 = 0;
  v107 = (_QWORD *)(a1 + 120);
  v108 = a2;
  do
  {
    if (*(_QWORD *)(a4 + 8 * v28))
      goto LABEL_154;
    v29 = (unsigned __int16 *)(a2 + 4 * v28);
    v30 = *(int8x8_t *)(a1 + 112);
    if (v30)
    {
      v31 = *v29;
      v32 = *((unsigned __int8 *)v29 + 2);
      v33 = *((unsigned __int8 *)v29 + 3);
      v34 = (v31 << 16) | (v32 << 8) | v33;
      v35 = (uint8x8_t)vcnt_s8(v30);
      v35.i16[0] = vaddlv_u8(v35);
      if (v35.u32[0] > 1uLL)
      {
        v36 = (v31 << 16) | (v32 << 8) | v33;
        if (v34 >= *(_QWORD *)&v30)
          v36 = v34 % *(_QWORD *)&v30;
      }
      else
      {
        v36 = v34 & (*(_QWORD *)&v30 + 0xFFFFFFFFLL);
      }
      v37 = *(void ***)(*(_QWORD *)(a1 + 104) + 8 * v36);
      if (v37)
      {
        v38 = *v37;
        if (*v37)
        {
          do
          {
            v39 = v38[1];
            if (v39 == v34)
            {
              if (*((unsigned __int16 *)v38 + 8) == (_DWORD)v31
                && __PAIR64__(*((unsigned __int8 *)v38 + 19), *((unsigned __int8 *)v38 + 18)) == __PAIR64__(v33, v32))
              {
                goto LABEL_153;
              }
            }
            else
            {
              if (v35.u32[0] > 1uLL)
              {
                if (v39 >= *(_QWORD *)&v30)
                  v39 %= *(_QWORD *)&v30;
              }
              else
              {
                v39 &= *(_QWORD *)&v30 - 1;
              }
              if (v39 != v36)
                break;
            }
            v38 = (_QWORD *)*v38;
          }
          while (v38);
        }
      }
    }
    v40 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_184;
    v41 = *(unsigned int *)(a1 + 8);
    v42 = *(double *)(a1 + 16);
    v43 = *(_QWORD *)(a1 + 80);
    v44 = *(unsigned int *)v29;
    v45 = CFGetTypeID(*(CFTypeRef *)a1);
    if (_block_invoke_once_3017 != -1)
      dispatch_once(&_block_invoke_once_3017, &__block_literal_global_7_3018);
    if (v45 != CGFontGetTypeID_font_type_id)
LABEL_184:
      _CGHandleAssert("create_missing_bitmaps", 165, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Fonts/CGGlyphBuilder.cc", "bitmap != nullptr", "bitmap missing", a6, a7, a8, v103);
    font_info = get_font_info((_QWORD *)v40);
    if (font_info)
    {
      if (font_info[104])
        v41 = v41 & 0xFFFFFFFE;
      else
        v41 = v41;
    }
    v47 = (unsigned int *)(*(uint64_t (**)(_QWORD, uint64_t, _OWORD *, uint64_t, uint64_t))(*(_QWORD *)(v40 + 16)
                                                                                                 + 392))(*(_QWORD *)(v40 + 112), v41, v109, v43, v44);
    if (!v47)
    {
      v48 = get_font_info((_QWORD *)v40);
      if (!v48)
        goto LABEL_65;
      v49 = v48[2];
      if (!v49)
        goto LABEL_65;
      memset(&key, 0, sizeof(key));
      v50 = *(_DWORD *)(v40 + 104);
      if (v50 < 0)
      {
        v50 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v40 + 16) + 136))(*(_QWORD *)(v40 + 112));
        *(_DWORD *)(v40 + 104) = v50;
      }
      v52 = *(double *)(a1 + 32);
      v51 = *(double *)(a1 + 40);
      v54 = *(double *)(a1 + 48);
      v53 = *(double *)(a1 + 56);
      if (v50 || (v51 != 0.0 || v54 != 0.0) && (v52 != 0.0 || v53 != 0.0))
      {
        v55 = 1.0 / (double)v49;
        key.a = v54 * 0.0 + v55 * v52;
        key.b = v53 * 0.0 + v55 * v51;
        key.c = v55 * v54 + v52 * 0.0;
        key.d = v55 * v53 + v51 * 0.0;
        key.tx = (double)BYTE2(v44) / (double)(int)v43;
        key.ty = (double)BYTE3(v44) / (double)SHIDWORD(v43);
        GlyphPath = CGFontCreateGlyphPath(v40, (uint64_t)&key);
        goto LABEL_66;
      }
      v104 = (double)(2 * (int)v43);
      v105 = (double)(2 * HIDWORD(v43));
      v57 = vmulq_n_f64(*(float64x2_t *)(a1 + 48), v105);
      *(float64x2_t *)&key.a = vmulq_n_f64(*(float64x2_t *)(a1 + 32), v104);
      *(float64x2_t *)&key.c = v57;
      *(_OWORD *)&key.tx = *(_OWORD *)(a1 + 64);
      v58 = (const CGPath *)(*(uint64_t (**)(_QWORD, CGAffineTransform *, _QWORD))(*(_QWORD *)(v40 + 16)
                                                                                           + 400))(*(_QWORD *)(v40 + 112), &key, (unsigned __int16)v44);
      if (v58)
      {
        v59 = v58;
        key.b = 0.0;
        key.c = 0.0;
        key.a = 1.0 / v104;
        key.d = 1.0 / v105;
        key.tx = (double)(2 * (BYTE2(v44) & 0x7F)) / v104;
        key.ty = (double)(2 * (BYTE3(v44) & 0x7F)) / v105;
        GlyphPath = CGPathCreateMutableCopyByTransformingPath(v58, &key);
        CFRelease(v59);
      }
      else
      {
LABEL_65:
        GlyphPath = 0;
      }
LABEL_66:
      v47 = CGGlyphBitmapCreateWithPathAndDilation(GlyphPath, v44, v40, v41, (uint64_t)v109, v42);
      if (v47)
      {
        if (!GlyphPath)
          goto LABEL_69;
      }
      else
      {
        v47 = CGGlyphBitmapCreate(v44, v41, 0, 0, 0, 0, 0, 0);
        if (!GlyphPath)
        {
LABEL_69:
          if (!v47)
            goto LABEL_184;
          goto LABEL_70;
        }
      }
      CFRelease(GlyphPath);
      goto LABEL_69;
    }
LABEL_70:
    v60 = *(_QWORD *)(a1 + 96);
    v61 = *(unsigned int *)v29;
    if (v60)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(v60 + 104));
      v62 = v60 + 8 * BYTE1(v61);
      v65 = *(_QWORD **)(v62 + 112);
      v63 = (_QWORD *)(v62 + 112);
      v64 = v65;
      if (!v65)
      {
        v64 = malloc_type_calloc(0x100uLL, 8uLL, 0x2004093837F09uLL);
        *v63 = v64;
      }
      v66 = (_QWORD *)v64[v61];
      do
        v67 = __ldxr(v47);
      while (__stxr(v67 + 1, v47));
      v68 = malloc_type_malloc(0x10uLL, 0x2062DE7BuLL);
      if (v68)
      {
        *v68 = v47;
        v68[1] = v66;
        v66 = v68;
      }
      v64[v61] = v66;
      *(int64x2_t *)(v60 + 88) = vaddq_s64(*(int64x2_t *)(v60 + 88), vdupq_n_s64((unint64_t)(v47[8] * v47[6]) + 48));
      os_unfair_lock_unlock((os_unfair_lock_t)(v60 + 104));
      v61 = *(unsigned int *)v29;
      v9 = a3;
    }
    v69 = (v61 >> 8) & 0xFF00 | ((_DWORD)v61 << 16) | (v61 >> 24);
    v70 = *(_QWORD *)(a1 + 112);
    if (v70)
    {
      v71 = (uint8x8_t)vcnt_s8((int8x8_t)v70);
      v71.i16[0] = vaddlv_u8(v71);
      if (v71.u32[0] > 1uLL)
      {
        v60 = (v61 >> 8) & 0xFF00 | ((_DWORD)v61 << 16) | (v61 >> 24);
        if (v69 >= v70)
          v60 = v69 % v70;
      }
      else
      {
        v60 = v69 & (v70 + 0xFFFFFFFF);
      }
      v72 = *(void ***)(*(_QWORD *)(a1 + 104) + 8 * v60);
      if (v72)
      {
        v38 = *v72;
        if (*v72)
        {
          do
          {
            v73 = v38[1];
            if (v73 == v69)
            {
              if (*((unsigned __int16 *)v38 + 8) == (unsigned __int16)v61
                && __PAIR64__(*((unsigned __int8 *)v38 + 19), *((unsigned __int8 *)v38 + 18)) == __PAIR64__(v61 >> 24, BYTE2(v61)))
              {
                a2 = v108;
                goto LABEL_153;
              }
            }
            else
            {
              if (v71.u32[0] > 1uLL)
              {
                if (v73 >= v70)
                  v73 %= v70;
              }
              else
              {
                v73 &= v70 - 1;
              }
              if (v73 != v60)
                break;
            }
            v38 = (_QWORD *)*v38;
          }
          while (v38);
        }
      }
    }
    v38 = operator new(0x20uLL);
    *v38 = 0;
    v38[1] = v69;
    *((_DWORD *)v38 + 4) = v61;
    v38[3] = v47;
    v74 = (float)(unint64_t)(*(_QWORD *)(a1 + 128) + 1);
    v75 = *(float *)(a1 + 136);
    if (!v70 || (float)(v75 * (float)v70) < v74)
    {
      v76 = (v70 & (v70 - 1)) != 0;
      if (v70 < 3)
        v76 = 1;
      v77 = v76 | (2 * v70);
      v78 = vcvtps_u32_f32(v74 / v75);
      if (v77 <= v78)
        prime = (int8x8_t)v78;
      else
        prime = (int8x8_t)v77;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        v70 = *(_QWORD *)(a1 + 112);
      }
      if (*(_QWORD *)&prime > v70)
        goto LABEL_107;
      if (*(_QWORD *)&prime < v70)
      {
        v86 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 128) / *(float *)(a1 + 136));
        if (v70 < 3 || (v87 = (uint8x8_t)vcnt_s8((int8x8_t)v70), v87.i16[0] = vaddlv_u8(v87), v87.u32[0] > 1uLL))
        {
          v86 = std::__next_prime(v86);
        }
        else
        {
          v88 = 1 << -(char)__clz(v86 - 1);
          if (v86 >= 2)
            v86 = v88;
        }
        if (*(_QWORD *)&prime <= v86)
          prime = (int8x8_t)v86;
        if (*(_QWORD *)&prime >= v70)
        {
          v70 = *(_QWORD *)(a1 + 112);
        }
        else
        {
          if (prime)
          {
LABEL_107:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:se180100]();
            v80 = operator new(8 * *(_QWORD *)&prime);
            v81 = *(void **)(a1 + 104);
            *(_QWORD *)(a1 + 104) = v80;
            if (v81)
              operator delete(v81);
            v82 = 0;
            *(int8x8_t *)(a1 + 112) = prime;
            do
              *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v82++) = 0;
            while (*(_QWORD *)&prime != v82);
            v83 = (_QWORD *)*v107;
            if (*v107)
            {
              v84 = v83[1];
              v85 = (uint8x8_t)vcnt_s8(prime);
              v85.i16[0] = vaddlv_u8(v85);
              if (v85.u32[0] > 1uLL)
              {
                if (v84 >= *(_QWORD *)&prime)
                  v84 %= *(_QWORD *)&prime;
              }
              else
              {
                v84 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v84) = v107;
              v89 = (_QWORD *)*v83;
              if (*v83)
              {
                do
                {
                  v90 = v89[1];
                  if (v85.u32[0] > 1uLL)
                  {
                    if (v90 >= *(_QWORD *)&prime)
                      v90 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v90 &= *(_QWORD *)&prime - 1;
                  }
                  if (v90 != v84)
                  {
                    v91 = *(_QWORD *)(a1 + 104);
                    if (!*(_QWORD *)(v91 + 8 * v90))
                    {
                      *(_QWORD *)(v91 + 8 * v90) = v83;
                      goto LABEL_134;
                    }
                    *v83 = *v89;
                    *v89 = **(_QWORD **)(*(_QWORD *)(a1 + 104) + 8 * v90);
                    **(_QWORD **)(*(_QWORD *)(a1 + 104) + 8 * v90) = v89;
                    v89 = v83;
                  }
                  v90 = v84;
LABEL_134:
                  v83 = v89;
                  v89 = (_QWORD *)*v89;
                  v84 = v90;
                }
                while (v89);
              }
            }
            v70 = (unint64_t)prime;
            goto LABEL_138;
          }
          v95 = *(void **)(a1 + 104);
          *(_QWORD *)(a1 + 104) = 0;
          if (v95)
            operator delete(v95);
          v70 = 0;
          *(_QWORD *)(a1 + 112) = 0;
        }
      }
LABEL_138:
      if ((v70 & (v70 - 1)) != 0)
      {
        if (v69 >= v70)
          v60 = v69 % v70;
        else
          v60 = (v61 >> 8) & 0xFF00 | ((_DWORD)v61 << 16) | (v61 >> 24);
      }
      else
      {
        v60 = ((_DWORD)v70 - 1) & v69;
      }
    }
    v92 = *(_QWORD *)(a1 + 104);
    v93 = *(_QWORD **)(v92 + 8 * v60);
    if (v93)
    {
      *v38 = *v93;
      a2 = v108;
    }
    else
    {
      *v38 = *v107;
      *v107 = v38;
      *(_QWORD *)(v92 + 8 * v60) = v107;
      a2 = v108;
      if (!*v38)
        goto LABEL_152;
      v94 = *(_QWORD *)(*v38 + 8);
      if ((v70 & (v70 - 1)) != 0)
      {
        if (v94 >= v70)
          v94 %= v70;
      }
      else
      {
        v94 &= v70 - 1;
      }
      v93 = (_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v94);
    }
    *v93 = v38;
LABEL_152:
    ++*(_QWORD *)(a1 + 128);
LABEL_153:
    *(_QWORD *)(a4 + 8 * v28) = v38[3];
LABEL_154:
    ++v28;
  }
  while (v28 != v9);
  if (!print_statistics)
    return 1;
  v96 = (FILE **)MEMORY[0x1E0C80C10];
  v97 = (FILE *)*MEMORY[0x1E0C80C10];
  if (*(_QWORD *)a1)
    v98 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 144))(*(_QWORD *)(*(_QWORD *)a1 + 112));
  else
    v98 = 0;
  fprintf(v97, "%s: %s (%g, %g, %g, %g; %g, %g)\n",
    "note_glyph_build",
    v98,
    *(double *)(a1 + 32),
    *(double *)(a1 + 40),
    *(double *)(a1 + 48),
    *(double *)(a1 + 56),
    *(double *)(a1 + 64),
    *(double *)(a1 + 72));
  v99 = "s";
  if (*(_QWORD *)(a1 + 128) == 1)
    v99 = "";
  fprintf(*v96, "  building %lu bitmap%s...\n", *(_QWORD *)(a1 + 128), v99);
  v100 = 1;
  fwrite("    ", 4uLL, 1uLL, *v96);
  if (*(_QWORD *)a1)
    v100 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 288))(*(_QWORD *)(*(_QWORD *)a1 + 112))
         + 1;
  result = (uint64_t)std::vector<char>::vector((std::vector<char> *)&key, v100);
  v102 = (_QWORD *)*v107;
  if (!*v107)
  {
LABEL_181:
    fputc(10, *v96);
    if (*(_QWORD *)&key.a)
    {
      key.b = key.a;
      operator delete(*(void **)&key.a);
    }
    return 1;
  }
  while (*(_QWORD *)&key.b != *(_QWORD *)&key.a)
  {
    if (*(_QWORD *)a1
      && (result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 296))(*(_QWORD *)(*(_QWORD *)a1 + 112), *((unsigned __int16 *)v102 + 8)), (_DWORD)result))
    {
      if (*(_QWORD *)&key.b == *(_QWORD *)&key.a)
        break;
      result = fprintf(*v96, "\"%s\"(%d,%d) ");
    }
    else
    {
      result = fprintf(*v96, "%hu(%d,%d) ");
    }
    v102 = (_QWORD *)*v102;
    if (!v102)
      goto LABEL_181;
  }
  __break(1u);
  return result;
}

void sub_1849E318C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *get_font_info(_QWORD *a1)
{
  unint64_t *v2;
  void *v3;
  unint64_t v4;

  if (!a1)
    return 0;
  v2 = a1 + 5;
  v3 = (void *)atomic_load(a1 + 5);
  if (!v3)
  {
    v3 = malloc_type_calloc(1uLL, 0x70uLL, 0x10000400AC616F7uLL);
    (*(void (**)(_QWORD, void *))(a1[2] + 104))(a1[14], v3);
    while (1)
    {
      v4 = __ldaxr(v2);
      if (v4)
        break;
      if (!__stlxr((unint64_t)v3, v2))
        return v3;
    }
    __clrex();
    free(v3);
    return (void *)v4;
  }
  return v3;
}

CGMutablePathRef CGFontCreateGlyphPath(uint64_t a1, uint64_t a2)
{
  const CGPath *v3;
  const CGPath *v4;
  CGMutablePathRef MutableCopyByTransformingPath;

  if (!a1)
    return 0;
  v3 = (const CGPath *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 16) + 400))(*(_QWORD *)(a1 + 112), 0);
  v4 = v3;
  if (v3
    && a2
    && (*(double *)a2 != 1.0
     || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 8)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a2 + 24), (float64x2_t)xmmword_185004990))))) & 1) != 0|| *(double *)(a2 + 40) != 0.0))
  {
    MutableCopyByTransformingPath = CGPathCreateMutableCopyByTransformingPath(v3, (const CGAffineTransform *)a2);
    CFRelease(v4);
    return MutableCopyByTransformingPath;
  }
  return v4;
}

uint64_t create_glyph_path()
{
  return FPFontCopyGlyphPath();
}

_DWORD *CGGlyphBitmapCreateWithPathAndDilation(_DWORD *cf, int a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  _DWORD *v11;
  CFTypeID v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double DilationParameters;
  double v23;
  double v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  path_iterator *v29;
  uint64_t rgb_bitmap;
  CFTypeID v31;
  _DWORD *font_info;
  unsigned int v33;
  int32x2_t v34;
  int64x2_t v35;
  int32x4_t *v36;
  double v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  path_iterator *v52;
  FILE **v53;
  double *v54;
  int v56;
  uint64_t *Autohinter;
  int32x4_t *v58;
  int v59;
  __int32 v60;
  int v61;
  __int32 v62;
  int v63;
  size_t v64;
  unint64_t v65;
  __n128 v66;
  int v67;
  int32x4_t *v68;
  unsigned int v69;
  unsigned int v70;
  float64x2_t info;
  CGAffineTransform v72;
  double *AutohintTransform;
  int32x4_t *v74;
  char v75[16];
  __int128 v76;
  __int128 v77;
  uint64_t v78;

  v11 = cf;
  v78 = *MEMORY[0x1E0C80C00];
  if ((a4 & 0x982) != 0)
  {
    if (cf)
    {
      if (CGPathDisableTypeValidation || (v13 = CFGetTypeID(cf), v13 == CGPathGetTypeID()))
      {
        v14 = (char *)malloc_type_malloc(0x60uLL, 0x1020040E03F46FBuLL);
        *(_OWORD *)(v14 + 8) = 0u;
        *(_OWORD *)(v14 + 24) = 0u;
        *(int64x2_t *)(v14 + 40) = vdupq_n_s64(0x47EFFFFFE0000000uLL);
        *(int64x2_t *)(v14 + 56) = vdupq_n_s64(0xC7EFFFFFE0000000);
        *((_DWORD *)v14 + 18) = 1032805417;
        *((_OWORD *)v14 + 5) = xmmword_185005120;
        *(_QWORD *)v14 = malloc_type_malloc(0x780uLL, 0x1000040504FFAC1uLL);
        v15 = operator new();
        *(_QWORD *)(v15 + 8) = v14;
        *(_OWORD *)(v15 + 16) = scan_converter_iterator_create_callbacks;
        *(_OWORD *)(v15 + 32) = unk_1E162D108;
        *(_QWORD *)(v15 + 48) = 0;
        *(_DWORD *)v15 = 1;
        v16 = *(_OWORD *)(a5 + 16);
        *(_OWORD *)v75 = *(_OWORD *)a5;
        v76 = v16;
        v77 = *(_OWORD *)(a5 + 32);
        DilationParameters = CGFontGetDilationParameters(a6, v15, (double *)v75, a4, v17, v18, v19, v20, v21);
        v24 = v23;
        if (a3)
        {
          v25 = *(_DWORD *)(a3 + 104);
          if (v25 < 0)
          {
            v25 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a3 + 16) + 136))(*(_QWORD *)(a3 + 112));
            *(_DWORD *)(a3 + 104) = v25;
          }
          if (v25)
          {
            if ((a2 & 0xFF000000) == 0)
            {
              v26 = CGFontAutohinterIteratorCreate((unint64_t *)a3, (double *)a5, (unsigned int *)v15, v24);
              if (v26)
              {
                v27 = v26;
                path_iterator::release(v15);
                v15 = v27;
              }
            }
          }
        }
        v28 = (unsigned int *)path_iterator_dilator_create((unsigned int *)v15, DilationParameters, v24);
        path_iterator::release(v15);
        v29 = (path_iterator *)path_iterator_orientation_create(v28);
        path_iterator::release((uint64_t)v28);
        CGPathApplyIterator((char *)v11, v29);
        path_iterator::release((uint64_t)v29);
        if ((a4 & 2) != 0)
          rgb_bitmap = create_rgb_bitmap((double *)v14, a2, a4);
        else
          rgb_bitmap = create_gray_bitmap((double *)v14, a2, a4);
        v11 = (_DWORD *)rgb_bitmap;
        if (!rgb_bitmap)
          v11 = CGGlyphBitmapCreate(a2, a4, 0, 0, 0, 0, 0, 0);
        free(*(void **)v14);
        v54 = (double *)v14;
LABEL_36:
        free(v54);
        return v11;
      }
      return 0;
    }
  }
  else if (cf)
  {
    if (!CGPathDisableTypeValidation)
    {
      v31 = CFGetTypeID(cf);
      if (v31 != CGPathGetTypeID())
        return 0;
    }
    font_info = get_font_info((_QWORD *)a3);
    if (!font_info)
      return 0;
    v33 = font_info[2];
    if (!v33)
      return 0;
    v34 = vmul_s32(vdup_n_s32(v33), (int32x2_t)0x64FFFFFF9CLL);
    v35.i64[0] = v34.i32[0];
    v35.i64[1] = v34.i32[1];
    info = vcvtq_f64_s64(v35);
    v72 = CGAffineTransformIdentity;
    AutohintTransform = 0;
    aa_create();
    v74 = v36;
    v37 = aa_free_edges((uint64_t)v36);
    if ((a4 & 0xD80) == 0x400)
    {
      v38 = operator new();
      *(_QWORD *)(v38 + 8) = &info;
      *(_OWORD *)(v38 + 16) = aa_path_iterator_create_callbacks;
      *(_OWORD *)(v38 + 32) = unk_1E162B8E8;
      *(_QWORD *)(v38 + 48) = 0;
      *(_DWORD *)v38 = 1;
      v39 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)v75 = *(_OWORD *)a5;
      v76 = v39;
      v77 = *(_OWORD *)(a5 + 32);
      v45 = CGFontGetDilationParameters(a6, v38, (double *)v75, a4, v40, v41, v42, v43, v44);
      v47 = v46;
      if (a3)
      {
        v48 = *(_DWORD *)(a3 + 104);
        if (v48 < 0)
        {
          v48 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a3 + 16) + 136))(*(_QWORD *)(a3 + 112));
          *(_DWORD *)(a3 + 104) = v48;
        }
        if (v48)
        {
          if ((a2 & 0xFF000000) == 0)
          {
            v49 = CGFontAutohinterIteratorCreate((unint64_t *)a3, (double *)a5, (unsigned int *)v38, v47);
            if (v49)
            {
              v50 = v49;
              path_iterator::release(v38);
              v38 = v50;
            }
          }
        }
      }
      v51 = (unsigned int *)path_iterator_dilator_create((unsigned int *)v38, v45, v47);
      path_iterator::release(v38);
      v52 = (path_iterator *)path_iterator_orientation_create(v51);
      path_iterator::release((uint64_t)v51);
      v53 = (FILE **)MEMORY[0x1E0C80C10];
      if (default_glyph_bitmap_debugging)
      {
        fwrite("\n\nPath BEFORE dilation:\n", 0x18uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        CGPathPrint(v11, 0);
        bzero(v75, 0x400uLL);
        __sprintf_chk(v75, 0, 0x400uLL, "*/path_before_dilation.%03d.tiff", ++CGGlyphBitmapCreateWithPathAndDilation_8_count);
        CGPathSaveAsImage((const CGPath *)v11, v75);
      }
      CGPathApplyIterator((char *)v11, v52);
      path_iterator::release((uint64_t)v52);
      if (default_glyph_bitmap_debugging)
      {
        fwrite("\n\nPath AFTER dilation:\n", 0x17uLL, 1uLL, *v53);
        CGPathPrint(v11, 0);
        bzero(v75, 0x400uLL);
        __sprintf_chk(v75, 0, 0x400uLL, "*/path_after_dilation.%03d.tiff", ++CGGlyphBitmapCreateWithPathAndDilation_8_count_4);
        CGPathSaveAsImage((const CGPath *)v11, v75);
      }
    }
    else
    {
      if (a3)
      {
        v56 = *(_DWORD *)(a3 + 104);
        if (v56 < 0)
        {
          v56 = (*(uint64_t (**)(_QWORD, double))(*(_QWORD *)(a3 + 16) + 136))(*(_QWORD *)(a3 + 112), v37);
          *(_DWORD *)(a3 + 104) = v56;
        }
        if (v56 && (a2 & 0xFF000000) == 0)
        {
          Autohinter = (uint64_t *)CGFontGetAutohinter((unint64_t *)a3);
          AutohintTransform = CGFontAutohinterCreateAutohintTransform(Autohinter, (double *)a5, 0, 0.0);
        }
      }
      CGPathApply((CGPathRef)v11, &info, (CGPathApplierFunction)process_path_element_13556);
    }
    v58 = v74;
    v59 = v74->i32[0];
    v60 = v74->i32[2];
    if (v60 - v74->i32[0] < 31 || (v61 = v74->i32[1], v62 = v74->i32[3], v62 - v61 <= 30))
    {
      v11 = CGGlyphBitmapCreate(a2, a4, 0, 0, 0, 0, 0, 0);
    }
    else
    {
      v63 = (v62 + 4095) >> 12;
      v64 = ((v60 + 4095) >> 12) - (v59 >> 12);
      v65 = v63 - (v61 >> 12);
      v11 = CGGlyphBitmapCreate(a2, a4 | 1, v59 >> 12, v63, v64, v65, (v64 + 15) & 0xFFFFFFFFFFFFFFF0, 0);
      if (v11)
      {
        v67 = (a4 & 1) != 0 ? 2 : 34;
        aa_cache_render(v58, v67, (uint64_t)(v11 + 10), (v64 + 15) & 0xFFFFFFFFFFFFFFF0, v66);
        if (default_glyph_bitmap_debugging)
        {
          bzero(v75, 0x400uLL);
          __sprintf_chk(v75, 0, 0x400uLL, "*/bitmap_image.%03d.tiff", ++create_bitmap_count);
          CGGlyph8BitBitmapSaveAsImage(v64, v65, (v64 + 15) & 0xFFFFFFFFFFFFFFF0, (UInt8 *)v11 + 40, v75);
        }
      }
    }
    v68 = v74;
    if (v74)
    {
      aa_free_edges((uint64_t)v74);
      free(v68);
    }
    v54 = AutohintTransform;
    if (AutohintTransform)
    {
      do
      {
        v69 = __ldxr((unsigned int *)v54);
        v70 = v69 - 1;
      }
      while (__stxr(v70, (unsigned int *)v54));
      if (!v70)
        goto LABEL_36;
    }
  }
  return v11;
}

double aa_free_edges(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unsigned int v5;
  double result;

  if (a1)
  {
    v2 = *(_QWORD **)(a1 + 192);
    v3 = (_QWORD *)*v2;
    if (*v2)
    {
      do
      {
        v4 = v3;
        free(v2);
        v3 = (_QWORD *)*v4;
        v2 = v4;
      }
      while (*v4);
    }
    else
    {
      v4 = v2;
    }
    *(_QWORD *)(a1 + 192) = v4;
    *(_WORD *)(a1 + 188) = 0;
    *((_DWORD *)v4 + 3) = 0;
    v5 = *(_DWORD *)(a1 + 176) & 0xFFF3FFFF;
    *(_DWORD *)(a1 + 180) = 0;
    *(_DWORD *)(a1 + 184) = 0;
    *(_DWORD *)(a1 + 176) = v5;
    result = 1.99609494;
    *(_OWORD *)a1 = xmmword_185004F70;
  }
  return result;
}

double aa_create()
{
  char *v0;
  double result;
  int v2;

  v0 = (char *)malloc_type_malloc(0x1000uLL, 0x705560E0uLL);
  if (v0)
  {
    *((_QWORD *)v0 + 29) = 0;
    *((_QWORD *)v0 + 24) = v0 + 232;
    *((_QWORD *)v0 + 30) = 40;
    *(_QWORD *)(v0 + 180) = 0;
    *(_OWORD *)v0 = xmmword_185004F70;
    *((int64x2_t *)v0 + 6) = vdupq_n_s64(0x3FE47AE147AE147CuLL);
    *((int64x2_t *)v0 + 7) = vdupq_n_s64(0x3FB23456789ABCDFuLL);
    *((_DWORD *)v0 + 47) = 0;
    *((int64x2_t *)v0 + 8) = vdupq_n_s64(0x40B0000000000000uLL);
    *((int64x2_t *)v0 + 9) = vdupq_n_s64(0x3F30000000000000uLL);
    *((_OWORD *)v0 + 10) = xmmword_185004F80;
    v2 = *((_DWORD *)v0 + 44);
    *((int64x2_t *)v0 + 4) = vdupq_n_s64(0xC10FFFF800000000);
    *((int64x2_t *)v0 + 5) = vdupq_n_s64(0x410FFFF800000000uLL);
    result = 0.0;
    *((_OWORD *)v0 + 2) = 0u;
    *((_OWORD *)v0 + 3) = 0u;
    *((_DWORD *)v0 + 44) = v2 & 0xFC000000;
    *((_QWORD *)v0 + 2) = 0;
    *((_QWORD *)v0 + 3) = 0;
    *(_OWORD *)(v0 + 216) = 0u;
    *(_OWORD *)(v0 + 200) = 0u;
  }
  return result;
}

_DWORD *create_glyph_bitmap(uint64_t a1, char a2, uint64_t a3, uint64_t a4, int a5)
{
  _DWORD *v5;
  const __CFData *v7;
  const __CFData *v8;
  const UInt8 *BytePtr;

  v5 = 0;
  if ((a2 & 1) == 0)
  {
    v7 = (const __CFData *)FPFontCopyGlyphBitmap();
    if (v7)
    {
      v8 = v7;
      BytePtr = CFDataGetBytePtr(v7);
      v5 = CGGlyphBitmapCreate(a5, 1, (int)0.0, (int)(0.0 + 0.0), (unint64_t)0.0, (unint64_t)0.0, 0, BytePtr);
      CFRelease(v8);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

_DWORD *CGGlyphBitmapCreate(int a1, int a2, int a3, int a4, uint64_t a5, unint64_t a6, unint64_t a7, const void *a8)
{
  int v8;
  int v9;
  _DWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  _DWORD *v24;
  unsigned int v25;
  unsigned int v26;
  size_t __n;

  v8 = a6;
  v9 = a5;
  if (a7)
  {
    v14 = 0;
    if ((a6 | a5) >> 16)
      return v14;
    v15 = a7;
    if (0xFFFFFFFFFFFFFFD7 / a7 < a6)
      return v14;
    v16 = 2;
    v17 = 1;
    if ((a2 & 0x980) != 0)
      v17 = 2;
    if ((a2 & 2) == 0)
      v16 = v17;
    v18 = 1;
    if ((a2 & 0x401) != 0)
      v18 = v16;
    if (v18 * a5 > a7)
      return 0;
  }
  else
  {
    if ((a6 | a5) >> 16)
      return 0;
    v19 = 2;
    v20 = 1;
    if ((a2 & 0x980) != 0)
      v20 = 2;
    if ((a2 & 2) == 0)
      v19 = v20;
    v21 = 1;
    if ((a2 & 0x401) != 0)
      v21 = v19;
    v15 = (v21 * a5 + 15) & 0xFFFFFFFFFFFFFFF0;
  }
  __n = v15 * a6;
  v23 = 1;
  v24 = malloc_type_calloc(1uLL, v15 * a6 + 40, 0x805E2C1EuLL);
  v14 = v24;
  if (v24)
  {
    *v24 = 1;
    v24[1] = a1;
    v24[2] = a2;
    v24[3] = a3;
    v24[4] = a4;
    v24[5] = v9;
    v24[6] = v8;
    if ((a2 & 0x401) != 0)
    {
      v23 = 16;
      if ((a2 & 2) == 0)
      {
        if ((a2 & 0x980) != 0)
          v23 = 16;
        else
          v23 = 8;
      }
    }
    v24[7] = v23;
    v24[8] = v15;
    do
    {
      v25 = __ldxr((unsigned int *)&CGGlyphBitmapCreate_generation);
      v26 = v25 + 1;
    }
    while (__stxr(v26, (unsigned int *)&CGGlyphBitmapCreate_generation));
    v24[9] = v26;
    if (a8)
      memcpy(v24 + 10, a8, __n);
  }
  return v14;
}

void aa_cache_render(int32x4_t *a1, int a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  int v7;
  __int32 v8;
  __int32 v9;
  BOOL v10;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  size_t v20;
  char *v21;
  __n128 v22;
  size_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD **v33;
  _QWORD **v34;
  float *v35;
  int32x4_t v36;
  float32x2x2_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t i;
  int v42;
  unint64_t *j;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t *v55;
  uint64_t *v56;
  int v57;
  uint64_t *v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  _BOOL4 v64;
  unsigned int v65;
  uint64_t m;
  unint64_t n;
  int v68;
  uint64_t v69;
  int32x2_t v70;
  int32x2_t *k;
  int v72;
  uint64_t *v73;
  signed int v74;
  _DWORD *v75;
  char *v76;
  unsigned int v77;
  int32x4_t v78;
  int v79;
  _QWORD *v80;
  signed int v81;
  _QWORD *v82;
  _QWORD *ii;
  _QWORD *v84;
  _QWORD *v85;
  int v86;
  BOOL v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  char *v98;
  int v99;
  int v100;
  int v101;
  _QWORD *v102;
  uint64_t v103;
  int v104;
  int v105;
  __int16 v106;
  char *v107;
  unsigned int v108;
  unint64_t v109;
  int v110;
  BOOL v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  char *v117;
  int v118;
  int v119;
  __int16 v120;
  int v121;
  BOOL v122;
  __int16 v123;
  int v124;
  int v125;
  int v126;
  int v127;
  char *v128;
  int v129;
  int v130;
  char *v131;
  __int16 v132;
  int v133;
  unsigned int v134;
  __int16 v135;
  int v136;
  int v137;
  __int16 v138;
  int32x4_t v139;
  _DWORD *v140;
  char *v141;
  int v142;
  int16x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int16x8_t v147;
  int v148;
  __int16 *v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  char v154;
  _BYTE v155[4];
  int v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  void *v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  signed int v164;
  int v165;
  char *v166;
  uint64_t *v167;
  uint64_t *v168;
  _BYTE v169[80];
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  if (a3 && a4)
  {
    v7 = a1->i32[1];
    v8 = a1->i32[2];
    v9 = a1->i32[3];
    v10 = v8 - a1->i32[0] < 31 || v9 - v7 < 31;
    if (!v10 && 24 * a1[11].i32[2] + 44 >= 1)
    {
      v13 = (a1->i32[0] >> 12);
      v14 = v7 >> 12;
      LODWORD(v163) = v9 + 4095;
      v15 = (v9 + 4095) >> 12;
      v16 = v15 - (v7 >> 12);
      v17 = ((v8 + 4095) >> 12) - v13;
      v18 = v17 + 16;
      v165 = v17;
      if (v17 > 1015)
      {
        v21 = (char *)malloc_type_malloc(4 * (v17 + 16), 0x705560E0uLL);
        v161 = v21;
        v166 = v21;
      }
      else
      {
        MEMORY[0x1E0C80A78](a1, a5);
        v166 = &v155[-v19];
        bzero(&v155[-v19], v20);
        v161 = 0;
      }
      v162 = a4;
      v158 = a3;
      v157 = v13;
      v164 = v7;
      if (v16 > 1015)
      {
        v23 = 8 * (v16 + 16);
        v25 = malloc_type_malloc(v23, 0x705560E0uLL);
        v160 = v25;
      }
      else
      {
        v23 = 8 * (v16 + 16);
        MEMORY[0x1E0C80A78](v21, v22);
        v25 = &v155[-v24];
        bzero(&v155[-v24], v23);
        v160 = 0;
      }
      v156 = v16;
      bzero(v166, 4 * v18);
      bzero(v25, v23);
      v33 = (_QWORD **)(v25 + 32);
      v34 = &v33[-v14];
      v159 = a2;
      if ((a2 & 0x10) != 0 && v165 <= 23 && a1[11].i16[6])
      {
        v167 = (uint64_t *)&v167;
        v168 = (uint64_t *)&v167;
        v35 = (float *)v169;
        v36 = *a1;
        v37 = (float32x2x2_t)vaddq_s32(*a1, (int32x4_t)xmmword_185004F90);
        v38 = vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
        vst2_f32(v35, v37);
        v39 = a1[12].i64[0];
        if (v39)
        {
          v40 = v15 + 8;
          memset(&v169[16], 0, 64);
          do
          {
            for (i = v39 + 24 + 96 * (*(_DWORD *)(v39 + 12) - 1); i >= v39 + 24; i -= 96)
            {
              if (!*(_BYTE *)(i + 47))
              {
                v42 = *(_DWORD *)(i + 16);
                for (j = (unint64_t *)v168; ; j = (unint64_t *)j[1])
                {
                  v44 = *((_DWORD *)j + 4);
                  if (v42 >= v44)
                    break;
                }
                v45 = *(_DWORD *)(i + 28) - *(_DWORD *)(i + 24);
                if (v42 <= v44)
                {
                  if (v45 <= *((_DWORD *)j + 17))
                  {
                    *(_DWORD *)(i + 68) = v45;
                    *(_QWORD *)(i + 56) = j[7];
                    j[7] = i;
                  }
                  else
                  {
                    v47 = *j;
                    v48 = (unint64_t *)j[1];
                    *j = 0;
                    j[1] = 0;
                    *(_QWORD *)i = v47;
                    *(_QWORD *)(i + 8) = v48;
                    *(_QWORD *)(v47 + 8) = i;
                    *v48 = i;
                    *(_DWORD *)(i + 68) = v45;
                    *(_QWORD *)(i + 56) = j;
                  }
                }
                else
                {
                  v46 = *j;
                  *(_QWORD *)i = *j;
                  *(_QWORD *)(i + 8) = j;
                  *(_QWORD *)(v46 + 8) = i;
                  *j = i;
                  *(_DWORD *)(i + 68) = v45;
                  *(_QWORD *)(i + 56) = 0;
                }
              }
            }
            v39 = *(_QWORD *)v39;
          }
          while (v39);
          v49 = v167;
          v50 = v168;
          if (v167 == v168)
            goto LABEL_66;
          v51 = *((_DWORD *)v167 + 4);
          v52 = *((_DWORD *)v168 + 4);
          if (v51 < v52)
          {
            v53 = 4096;
            v54 = 4096;
            v55 = v167;
            v56 = v168;
            do
            {
              v57 = *((_DWORD *)v56 + 4);
              if (v51 >= v57)
                goto LABEL_41;
              v58 = v55;
              while (1)
              {
                v59 = *((_DWORD *)v58 + 17);
                if (v59 >= v54)
                  break;
                v58 = (uint64_t *)*v58;
                if (*((_DWORD *)v58 + 4) >= v57)
                {
                  v55 = v58;
                  goto LABEL_41;
                }
              }
              v54 = v59 + 4095;
              v55 = (uint64_t *)*v58;
              v49 = v58;
LABEL_41:
              while (v52 > *((_DWORD *)v49 + 4))
              {
                v60 = *((_DWORD *)v50 + 17);
                if (v60 >= v53)
                {
                  v53 = v60 + 4095;
                  v56 = v50;
                  v50 = (uint64_t *)v50[1];
                  v52 = *((_DWORD *)v50 + 4);
                  break;
                }
                v50 = (uint64_t *)v50[1];
                v52 = *((_DWORD *)v50 + 4);
              }
              v51 = *((_DWORD *)v55 + 4);
            }
            while (v51 < v52);
            v51 = *((_DWORD *)v49 + 4);
          }
          if (*((int *)v49 + 17) < 0x2000)
          {
LABEL_66:
            v65 = 0;
          }
          else
          {
            v61 = v36.i16[0] & 0xFFF;
            v62 = v51 & 0xFFF;
            v64 = v36.i32[0] > 0 || v51 > 4095;
            if (v62 <= v61 && v64)
            {
              v65 = -v62;
            }
            else
            {
              v153 = 2048 - (v36.i16[4] & 0xFFF);
              v65 = 4096 - v62;
              if ((int)(4096 - v62) > v153)
              {
                v154 = !v64;
                if ((int)(v62 - v61) >= (int)(4096 - v62 - v153))
                  v154 = 1;
                if ((v154 & 1) != 0)
                {
                  if (v62 <= 0x800)
                    v65 = 0;
                  else
                    v65 = 2048 - (v36.i16[4] & 0xFFF);
                }
                else
                {
                  v65 = -v61;
                }
              }
            }
          }
          v69 = a1[12].i64[0];
          if (v69)
          {
            v70 = vdup_n_s32(v65);
            do
            {
              for (k = (int32x2_t *)(v69 + 24 + 96 * (*(_DWORD *)(v69 + 12) - 1));
                    (unint64_t)k >= v69 + 24;
                    k -= 12)
              {
                v72 = k[3].i32[0] >> 12;
                if (v72 >= v40)
                {
                  CGPostError((uint64_t)"%s; index %d out of bounds; max_index = %d",
                    v26,
                    v27,
                    v28,
                    v29,
                    v30,
                    v31,
                    v32,
                    (char)"aa_cache_adjust_edges");
                }
                else
                {
                  *k = (int32x2_t)v34[v72];
                  v34[v72] = k;
                  k[2] = vadd_s32(k[2], v70);
                }
              }
              v69 = *(_QWORD *)v69;
            }
            while (v69);
          }
        }
      }
      else
      {
        for (m = a1[12].i64[0]; m; m = *(_QWORD *)m)
        {
          for (n = m + 24 + 96 * (*(_DWORD *)(m + 12) - 1); n >= m + 24; n -= 96)
          {
            v68 = *(int *)(n + 24) >> 12;
            if (v68 >= v15 + 8)
            {
              CGPostError((uint64_t)"%s; index %d out of bounds; max_index = %d",
                v26,
                v27,
                v28,
                v29,
                v30,
                v31,
                v32,
                (char)"aa_cache_edges");
            }
            else
            {
              *(_QWORD *)n = v34[v68];
              v34[v68] = (_QWORD *)n;
            }
          }
        }
      }
      a1[12].i64[1] = 0;
      a1[13].i64[0] = 0;
      v73 = &a1[12].i64[1];
      v74 = v164 & 0xFFFFF000;
      v164 = v163 & 0xFFFFF000;
      if (v74 < (v163 & 0xFFFFF000))
      {
        v75 = (_DWORD *)(v158 + (v156 - 1) * v162);
        v76 = &v166[(-((_DWORD)v166 - 2 * (_DWORD)v157 + 8 + 2 * (_DWORD)v157) & 0x1FLL) + 8 + -2 * (int)v157];
        if ((v159 & 0x20) != 0)
          v77 = 0;
        else
          v77 = 255;
        v163 = -v162;
        v166 = &v76[2 * (int)v157 - 2];
        LODWORD(v162) = v165 >> 2;
        v78 = vdupq_n_s32(v77);
        v79 = v165 & 3;
        do
        {
          v80 = 0;
          v81 = v74;
          v82 = *v33;
          v74 += 4096;
          for (ii = (_QWORD *)*v73; ; ii = 0)
          {
            v84 = ii;
            if (v82)
            {
              while (1)
              {
                while (1)
                {
                  while (1)
                  {
                    v85 = v82;
                    v82 = (_QWORD *)*v82;
                    v86 = *((unsigned __int16 *)v85 + 22);
                    v87 = v86 == 0xFFFF;
                    if (v86 == 0xFFFF)
                      v88 = 20;
                    else
                      v88 = 16;
                    if (v87)
                      v89 = *((_DWORD *)v85 + 7);
                    else
                      v89 = *((_DWORD *)v85 + 6);
                    if (v87)
                      v90 = 16;
                    else
                      v90 = 20;
                    if (v87)
                      v91 = *((_DWORD *)v85 + 6);
                    else
                      v91 = *((_DWORD *)v85 + 7);
                    if (*((_DWORD *)v85 + 7) > v74)
                    {
                      *v85 = v80;
                      v80 = v85;
                    }
                    if (v91 == v89)
                      goto LABEL_138;
                    v92 = *(_DWORD *)((char *)v85 + v90);
                    v93 = *(_DWORD *)((char *)v85 + v88);
                    v94 = v89 - v81;
                    v95 = v91 - v81;
                    if (v92 != v93)
                      break;
                    if (v94 >= 4095)
                      v94 = 4095;
                    v96 = v94 & ~(v94 >> 31);
                    if (v95 >= 4095)
                      v95 = 4095;
                    v97 = (v95 & ~(v95 >> 31)) - v96;
                    v98 = &v76[2 * (v92 >> 12)];
                    v99 = v97 * (4096 - (v92 & 0xFFF));
                    v100 = *((unsigned __int16 *)v98 + 1) + v97 - (v99 >> 12);
                    *(_WORD *)v98 += v99 >> 12;
                    *((_WORD *)v98 + 1) = v100;
                    if (!v82)
                      goto LABEL_161;
                  }
                  v102 = v85 + 4;
                  v101 = *((_DWORD *)v85 + 8);
                  v103 = *((int *)v102 + 1);
                  if (v91 <= v89)
                    break;
                  if ((v94 & 0x80000000) == 0)
                  {
                    if (v95 > 4096)
                    {
                      if (v94 > 0xFFF)
                        goto LABEL_138;
LABEL_119:
                      v92 += (unint64_t)((int)v103 * (uint64_t)(4096 - v95)) >> 12;
                      v95 = 4096;
                      goto LABEL_120;
                    }
                    goto LABEL_120;
                  }
                  if (v95 >= 1)
                  {
                    v94 = 0;
                    v93 += (unint64_t)((int)v103 * (uint64_t)(v81 - v89)) >> 12;
                    if (v95 > 0x1000)
                      goto LABEL_119;
                    goto LABEL_120;
                  }
LABEL_138:
                  if (!v82)
                    goto LABEL_161;
                }
                if (v94 <= 4096)
                {
                  if ((v95 & 0x80000000) == 0)
                    goto LABEL_120;
                  if (v94 >= 1)
                  {
LABEL_116:
                    v95 = 0;
                    v92 += (v103 * (unint64_t)(v81 - v91)) >> 12;
                    goto LABEL_120;
                  }
                  goto LABEL_138;
                }
                if (v95 > 4095)
                  goto LABEL_138;
                v93 += (unint64_t)((int)v103 * (uint64_t)(4096 - v94)) >> 12;
                v94 = 4096;
                if (v95 < 0)
                  goto LABEL_116;
LABEL_120:
                v104 = v93 >> 12;
                if (v93 >> 12 == v92 >> 12)
                {
                  v105 = v92 - v93;
                  if (v92 - v93 < 0)
                    v105 = v93 - v92;
                  if (v92 <= v93)
                    v106 = v93;
                  else
                    v106 = v92;
                  v107 = &v76[2 * ((v93 + (uint64_t)v92) >> 13)];
                  v108 = v95 - v94;
                  v109 = ((v105 - 2 * (v106 & 0xFFFu) + 0x2000) * (unint64_t)v108) >> 13;
                  LOWORD(v108) = *((_WORD *)v107 + 1) + v108 - v109;
                  *(_WORD *)v107 += v109;
                  *((_WORD *)v107 + 1) = v108;
                  if (!v82)
                    break;
                }
                else
                {
                  v110 = v92 >> 12;
                  if ((v104 - v110) * (v104 - v110) == 1)
                  {
                    v111 = v92 < v93;
                    if (v92 >= v93)
                      v112 = v93;
                    else
                      v112 = v92;
                    if (v92 <= v93)
                      LOWORD(v92) = v93;
                    if (v111)
                      v113 = -v101;
                    else
                      v113 = v101;
                    v114 = v95 - v94;
                    v115 = 4096 - (v112 & 0xFFF);
                    v116 = v115 * v113;
                    v117 = &v76[2 * (v112 >> 12)];
                    v118 = (v116 >> 12) * v115;
                    v119 = (v114 - (v116 >> 12)) * (v92 & 0xFFF);
                    v120 = *((_WORD *)v117 + 2);
                    v121 = *((unsigned __int16 *)v117 + 1) + v114 - ((v118 >> 13) + (v119 >> 13));
                    *(_WORD *)v117 += v118 >> 13;
                    *((_WORD *)v117 + 1) = v121;
                    *((_WORD *)v117 + 2) = v120 + (v119 >> 13);
                    goto LABEL_138;
                  }
                  v122 = v92 < v93;
                  if (v92 < v93)
                    v123 = v92;
                  else
                    v123 = v93;
                  if (v92 >= v93)
                    LOWORD(v93) = v92;
                  if (v122)
                    v124 = -v101;
                  else
                    v124 = v101;
                  if (v122)
                    v125 = v110;
                  else
                    v125 = v104;
                  if (v122)
                    v110 = v104;
                  v126 = 4096 - (v123 & 0xFFF);
                  v127 = (v126 * v124) >> 12;
                  v128 = &v76[2 * v125];
                  v129 = v127 * v126;
                  v130 = v127 + (v124 >> 1);
                  v132 = *((_WORD *)v128 + 1);
                  v131 = v128 + 2;
                  *(_WORD *)v128 += v129 >> 13;
                  *((_WORD *)v128 + 1) = v132 + v130 - (v129 >> 13);
                  v133 = v110 + ~v125;
                  if (v133 < 1)
                  {
                    v136 = 0;
                    v131 = v128;
                  }
                  else
                  {
                    if (v133 != 1)
                    {
                      v134 = v110 - v125;
                      do
                      {
                        v135 = *((_WORD *)v131 + 1);
                        v131 += 2;
                        LOWORD(v130) = v130 + v124;
                        *(_WORD *)v131 = v135 + v124;
                        --v134;
                      }
                      while (v134 > 2);
                    }
                    v136 = v124;
                  }
                  v137 = v136 - (((((4096 - (v93 & 0xFFF)) * v124) >> 12) * (4096 - (v93 & 0xFFF))) >> 13);
                  v138 = *((_WORD *)v131 + 2);
                  *((_WORD *)v131 + 1) += v137;
                  *((_WORD *)v131 + 2) = v138 + v95 - (v94 + v130) - v137;
                  if (!v82)
                    break;
                }
              }
            }
LABEL_161:
            if (!v84)
              break;
            *v73 = 0;
            v82 = v84;
          }
          *v73 = (uint64_t)v80;
          v139 = 0uLL;
          v140 = v75;
          v141 = v166;
          if (v165 >= 4)
          {
            v142 = v162;
            v141 = v166;
            v140 = v75;
            do
            {
              v143 = *(int16x4_t *)(v141 + 2);
              *(_QWORD *)(v141 + 2) = 0;
              v141 += 8;
              v144 = vaddw_s16((int32x4_t)vshlq_n_s64((int64x2_t)vmovl_s16(v143), 0x20uLL), v143);
              v144.u64[1] = (unint64_t)vadd_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v144, (int8x16_t)v144, 8uLL), vdup_lane_s32(*(int32x2_t *)v144.i8, 1));
              v145 = vaddq_s32(v144, v139);
              v146 = vmaxq_s32(vshrq_n_s32(vabsq_s32(v145), 4uLL), (int32x4_t)0);
              v147 = (int16x8_t)vorrq_s8((int8x16_t)v146, (int8x16_t)vcgtq_s32(v146, v78));
              *(int16x4_t *)v147.i8 = vmovn_s32((int32x4_t)v147);
              *v140++ = vmovn_s16(v147).u32[0];
              v139 = vdupq_laneq_s32(v145, 3);
              --v142;
            }
            while (v142);
          }
          if (v79)
          {
            v148 = v139.i32[0];
            v149 = (__int16 *)(v141 + 2);
            v150 = v79;
            do
            {
              v148 += *v149;
              *v149++ = 0;
              if (v148 >= 0)
                v151 = v148;
              else
                v151 = -v148;
              v152 = v151 >> 4;
              if (v152 > v77)
                LOBYTE(v152) = -1;
              *(_BYTE *)v140 = v152;
              v140 = (_DWORD *)((char *)v140 + 1);
              --v150;
            }
            while (v150);
          }
          v75 = (_DWORD *)((char *)v75 + v163);
          ++v33;
        }
        while (v74 < v164);
      }
      if (v161)
        free(v161);
      if (v160)
        free(v160);
    }
  }
}

unint64_t *CGFontGetAutohinter(unint64_t *result)
{
  unint64_t *v1;
  unint64_t *v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v2 = result + 8;
    result = (unint64_t *)atomic_load(result + 8);
    if (!result)
    {
      result = (unint64_t *)malloc_type_calloc(1uLL, 0xC8uLL, 0x20040E6F86433uLL);
      *result = (unint64_t)v1;
      while (1)
      {
        v3 = __ldaxr(v2);
        if (v3)
          break;
        if (!__stlxr((unint64_t)result, v2))
          return result;
      }
      __clrex();
      CGFontAutohinterRelease((char *)result);
      return (unint64_t *)v3;
    }
  }
  return result;
}

double *CGFontAutohinterCreateAutohintTransform(uint64_t *a1, double *a2, int a3, double a4)
{
  double v6;
  int v7;
  unint64_t v8;
  unsigned int v12;
  uint64_t v13;
  unint64_t *v14;
  unsigned int v15;
  double *v16;
  char v17;
  unsigned int v18;
  unsigned int v19;

  if (!a1)
    return 0;
  v6 = *a2;
  if (*a2 <= 0.0 || v6 != a2[3] || a2[1] != 0.0 || a2[2] != 0.0)
    return 0;
  v7 = (int)v6;
  if (v6 != (double)(int)v6)
    v7 = 0;
  if ((v7 - 19) < 0xFFFFFFF4)
    return 0;
  v12 = v7 - 7;
  v13 = 13;
  if (a3)
    v13 = 1;
  v14 = (unint64_t *)&a1[v13 + v12];
  v8 = atomic_load(v14);
  if (!v8)
  {
    v16 = CGFontAutohintTransformCreate(*a1, a2, a3, a4);
    if (!v16)
      return 0;
    while (1)
    {
      v8 = __ldaxr(v14);
      if (v8)
        break;
      if (!__stlxr((unint64_t)v16, v14))
      {
        v17 = 1;
        goto LABEL_23;
      }
    }
    v17 = 0;
    __clrex();
LABEL_23:
    if ((v17 & 1) != 0)
    {
      v8 = (unint64_t)v16;
    }
    else
    {
      do
      {
        v18 = __ldxr((unsigned int *)v16);
        v19 = v18 - 1;
      }
      while (__stxr(v19, (unsigned int *)v16));
      if (!v19)
        free(v16);
    }
  }
  if (*(double *)(v8 + 16) == a4)
  {
    do
      v15 = __ldxr((unsigned int *)v8);
    while (__stxr(v15 + 1, (unsigned int *)v8));
    return (double *)v8;
  }
  return CGFontAutohintTransformCreate(*a1, a2, a3, a4);
}

double CGFontStrikeKeyInit(uint64_t a1, uint64_t a2, _OWORD *a3, int a4, double a5, double a6)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v12;
  __int128 v13;
  double v14;
  double result;

  if (a2)
  {
    v8 = *(_DWORD *)(a2 + 24);
    v6 = (unsigned int *)(a2 + 24);
    v7 = v8;
    if (!v8)
    {
      do
        v9 = __ldxr((unsigned int *)&get_identifier_identifier);
      while (__stxr(v9 + 1, (unsigned int *)&get_identifier_identifier));
      v10 = ~v9;
      while (!__ldxr(v6))
      {
        if (!__stxr(v10, v6))
          goto LABEL_10;
      }
      __clrex();
LABEL_10:
      v7 = *v6;
    }
  }
  else
  {
    v7 = 0;
  }
  *(_DWORD *)a1 = v7;
  v13 = a3[1];
  v12 = a3[2];
  *(_OWORD *)(a1 + 8) = *a3;
  *(_OWORD *)(a1 + 24) = v13;
  v14 = *(double *)(a1 + 32);
  *(double *)&v13 = *(double *)(a1 + 24) + (*(double *)(a1 + 8) + *(double *)(a1 + 16)) * 10000.0;
  *(_OWORD *)(a1 + 40) = v12;
  *(_DWORD *)(a1 + 4) = a4;
  *(double *)(a1 + 56) = a5;
  *(double *)(a1 + 64) = a6;
  result = (a5 + a6) * 1000.0;
  *(_QWORD *)(a1 + 72) = (unint64_t)result
                       + (a4 << 8)
                       + (int)(v7 << 12)
                       + ((unint64_t)(*(double *)&v13 + v14) << 20);
  return result;
}

uint64_t `anonymous namespace'::begin(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t (*v3)(_QWORD, uint64_t, _QWORD);

  v2 = *(_QWORD **)(result + 72);
  if (v2)
  {
    v3 = (uint64_t (*)(_QWORD, uint64_t, _QWORD))v2[2];
    if (v3)
      return v3(v2[1], a2, v2[6]);
  }
  return result;
}

uint64_t `anonymous namespace'::end(uint64_t this, void *a2, path_iterator *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v5)(_QWORD, _QWORD);

  v3 = this;
  if ((*(_DWORD *)(this + 80) - 3) <= 1)
    this = CG::stroker::end_contour(this);
  v4 = *(_QWORD **)(v3 + 72);
  if (v4)
  {
    v5 = (uint64_t (*)(_QWORD, _QWORD))v4[4];
    if (v5)
      return v5(v4[1], v4[6]);
  }
  return this;
}

uint64_t CGContextDelegateDrawPathDirect(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef cf, uint64_t a6)
{
  uint64_t v11;
  CFTypeID v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef, uint64_t);

  if (result)
  {
    if (cf && ((v11 = result, CGPathDisableTypeValidation) || (v12 = CFGetTypeID(cf), v12 == CGPathGetTypeID())))
    {
      v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef, uint64_t))(v11 + 232);
      if (v13)
        return v13(v11, a2, a3, a4, cf, a6);
      else
        return 1006;
    }
    else
    {
      return 1001;
    }
  }
  return result;
}

uint64_t ripr_stroke_acquire(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v6;
  float v7;
  double v8;
  float64x2_t v9;
  uint64_t v10;
  float v11;
  BOOL v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  BOOL v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  double *v38;
  unint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  float v45;

  v6 = *(_OWORD **)(a1 + 72);
  if (v6)
  {
    v6 = (_OWORD *)(a2 + 24);
    v7 = *(float *)(a1 + 52);
    if (v7 == 1.0)
    {
      *v6 = *(_OWORD *)(a1 + 80);
      v9 = *(float64x2_t *)(a1 + 96);
    }
    else
    {
      v8 = 1.0 / v7;
      *v6 = vmulq_n_f64(*(float64x2_t *)(a1 + 80), v8);
      v9 = vmulq_n_f64(*(float64x2_t *)(a1 + 96), v8);
    }
    *(float64x2_t *)(a2 + 40) = v9;
  }
  *(_QWORD *)(a2 + 16) = v6;
  v10 = *(_QWORD *)(a1 + 32);
  if (!v10)
  {
    v13 = 1.0;
    v11 = 1.0;
    goto LABEL_10;
  }
  v11 = *(double *)(a3 + 48);
  if (v11 < 0.0)
  {
    v12 = 1;
    v13 = 1.0;
    v11 = 1.0;
    goto LABEL_37;
  }
  v14 = *(double *)a3;
  v16 = *(double *)(a3 + 16);
  v17 = *(double *)(a3 + 24);
  v18 = *(float *)(a1 + 52);
  v19 = v18 == 1.0;
  v20 = v18 * v16;
  v21 = v18 * v17;
  if (v18 == 1.0)
  {
    v22 = *(double *)(a3 + 8);
  }
  else
  {
    v14 = v18 * v14;
    v15 = *(double *)(a3 + 8);
    v22 = v18 * v15;
  }
  if (v19)
    v23 = *(double *)(a3 + 16);
  else
    v23 = v20;
  if (v19)
    v24 = *(double *)(a3 + 24);
  else
    v24 = v21;
  if (v22 == 0.0 && v23 == 0.0)
  {
    v13 = fabsf(v14);
    v25 = fabsf(v24);
    goto LABEL_26;
  }
  if (v14 == 0.0 && v24 == 0.0)
  {
    v13 = fabsf(v22);
    v25 = fabsf(v23);
LABEL_26:
    if (v13 == v25)
    {
      v11 = v13 * v11;
      v12 = 1;
      goto LABEL_37;
    }
LABEL_10:
    *(_BYTE *)(a1 + 112) = 0;
LABEL_42:
    v36 = *(_QWORD *)(a1 + 24);
    v37 = operator new();
    *(_QWORD *)(v37 + 8) = v36;
    *(_OWORD *)(v37 + 16) = ripr_stroke_acquire_callbacks;
    *(_OWORD *)(v37 + 32) = unk_1E162D0E8;
    *(_QWORD *)(v37 + 48) = 0;
    *(_DWORD *)v37 = 1;
    *(_QWORD *)(a2 + 8) = path_iterator_stroker_create((const CGAffineTransform *)a3, *(_DWORD *)(a3 + 56), *(_DWORD *)(a3 + 60), (unsigned int *)v37, *(float *)(a1 + 48), *(double *)(a3 + 48), *(double *)(a3 + 64));
    path_iterator::release(v37);
    v35 = 0;
    v34 = *(_QWORD *)(a2 + 8);
    goto LABEL_43;
  }
  v26 = (float)(v22 * v22) + (float)(v14 * v14);
  v27 = (float)(v24 * v24) + (float)(v23 * v23);
  v28 = (float)((float)(v22 * v24) + (float)(v14 * v23)) * (float)((float)(v22 * v24) + (float)(v14 * v23));
  v13 = 1.0;
  if (v26 >= (float)(v27 * 1.002) || v28 >= (float)((float)(v26 * v27) * 0.0001))
    goto LABEL_10;
  v12 = v26 > (float)(v27 * 0.998);
  v30 = sqrtf(v26);
  if (v26 <= (float)(v27 * 0.998))
    v13 = 1.0;
  else
    v13 = v30;
  v11 = v13 * v11;
LABEL_37:
  v31 = v11 <= 1.0 && v12;
  *(_BYTE *)(a1 + 112) = v31;
  if (v31 != 1)
    goto LABEL_42;
  v32 = *(_DWORD *)(a3 + 56);
  *(float *)(v10 + 236) = v11;
  *(_BYTE *)(v10 + 240) = 0;
  if (v32 == 1)
    v33 = 2;
  else
    v33 = v32 == 2;
  *(_DWORD *)(v10 + 244) = v33;
  v34 = operator new();
  *(_QWORD *)(v34 + 8) = v10;
  *(_OWORD *)(v34 + 16) = path_iterator_aaline_create_callbacks;
  *(_OWORD *)(v34 + 32) = *(_OWORD *)algn_1E162CAD0;
  *(_QWORD *)(v34 + 48) = 0;
  v35 = 1;
  *(_DWORD *)v34 = 1;
LABEL_43:
  v38 = *(double **)(a3 + 72);
  if (v38)
  {
    v39 = *(_QWORD *)(a3 + 88);
    if (v39)
    {
      v40 = 0;
      v41 = 0.0;
      v42 = 0.0;
      do
      {
        v43 = v38[v40];
        v42 = v42 + v43;
        if ((v40 & 1) != 0)
          v43 = -0.0;
        v41 = v41 + v43;
        ++v40;
      }
      while (v39 != v40);
    }
    else
    {
      v42 = 0.0;
      v41 = 0.0;
    }
    if (v42 * v13 < 1.0)
    {
      if (v35)
      {
        v45 = v41 * v11 / v42;
        *(float *)(v10 + 236) = v45;
      }
    }
    else
    {
      if (v35)
        *(_BYTE *)(v10 + 240) = 1;
      v44 = path_iterator_dasher_create((double *)a3, v38, v39, (unsigned int *)v34, *(double *)(a3 + 80));
      *(_QWORD *)a2 = v44;
      if (v34)
      {
        path_iterator::release(v34);
        return *(_QWORD *)a2;
      }
      else
      {
        return v44;
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
  }
  return v34;
}

uint64_t path_iterator_stroker_create(const CGAffineTransform *a1, int a2, int a3, unsigned int *a4, double a5, double a6, double a7)
{
  uint64_t v14;
  uint64_t v15;
  const CGAffineTransform *v16;
  float64x2_t v17;
  float64x2_t v18;
  unsigned int v19;
  double v20;
  double v21;
  uint64_t result;
  unsigned int v23;

  v14 = operator new();
  v15 = v14;
  v16 = &CGAffineTransformIdentity;
  if (a1)
    v16 = a1;
  v18 = *(float64x2_t *)&v16->a;
  v17 = *(float64x2_t *)&v16->c;
  *(double *)(v14 + 32) = a6;
  *(_DWORD *)(v14 + 40) = a2;
  *(_DWORD *)(v14 + 44) = a3;
  *(double *)(v14 + 48) = a7;
  *(double *)(v14 + 56) = a5;
  if (a4)
  {
    do
      v19 = __ldxr(a4);
    while (__stxr(v19 + 1, a4));
  }
  *(_QWORD *)(v14 + 72) = a4;
  *(_DWORD *)(v14 + 80) = 0;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_OWORD *)(v14 + 184) = 0u;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_QWORD *)(v14 + 232) = 0;
  v20 = 0.1;
  v21 = a5 * 0.1;
  if (a5 * 0.1 < 0.001)
    v21 = 0.001;
  if (a5 > 0.0)
    v20 = v21;
  *(double *)(v14 + 64) = v20;
  *(float64x2_t *)v14 = vmulq_n_f64(v18, a6 * 0.5);
  *(float64x2_t *)(v14 + 16) = vmulq_n_f64(v17, a6 * 0.5);
  result = operator new();
  *(_QWORD *)(result + 8) = v15;
  *(_OWORD *)(result + 16) = xmmword_1E165AB48;
  *(_OWORD *)(result + 32) = *(_OWORD *)&off_1E165AB58;
  if (a4)
  {
    do
      v23 = __ldxr(a4);
    while (__stxr(v23 + 1, a4));
  }
  *(_QWORD *)(result + 48) = a4;
  *(_DWORD *)result = 1;
  return result;
}

uint64_t `anonymous namespace'::release_data(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (this)
  {
    v2 = this;
    v3 = *(_QWORD *)(this + 72);
    if (v3)
      path_iterator::release(v3);
    v4 = *(void **)(v2 + 216);
    if (v4)
    {
      *(_QWORD *)(v2 + 224) = v4;
      operator delete(v4);
    }
    JUMPOUT(0x186DC23C4);
  }
  return this;
}

uint64_t path_iterator::release(uint64_t this)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  void (*v4)(_QWORD);
  path_iterator *v5;

  v1 = this;
  do
  {
    v2 = __ldxr((unsigned int *)this);
    v3 = v2 - 1;
  }
  while (__stxr(v3, (unsigned int *)this));
  if (!v3)
  {
    v4 = *(void (**)(_QWORD))(this + 40);
    if (v4)
      v4(*(_QWORD *)(this + 8));
    v5 = *(path_iterator **)(v1 + 48);
    if (v5)
      path_iterator::release(v5);
    JUMPOUT(0x186DC23C4);
  }
  return this;
}

void ripc_GetRenderStroke(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[3];

  v5 = *a3;
  v6 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v6;
  *(_OWORD *)a2 = v5;
  v7 = a3[1];
  v10[0] = *a3;
  v10[1] = v7;
  v10[2] = a3[2];
  *(double *)(a2 + 48) = CGGStateGetAdjustedLineWidth(a1, (double *)v10);
  v8 = *(_QWORD *)(a1 + 128);
  *(_DWORD *)(a2 + 56) = *(char *)(v8 + 2);
  *(_DWORD *)(a2 + 60) = *(char *)(v8 + 3);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(v8 + 16);
  v9 = *(_QWORD *)(v8 + 32);
  if (v9)
  {
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(v9 + 8);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(v9 + 16);
    v9 += 24;
  }
  *(_QWORD *)(a2 + 72) = v9;
}

double CGGStateGetAdjustedLineWidth(uint64_t a1, double *a2)
{
  uint64_t v2;
  double v3;
  double result;
  double v5;

  v2 = *(_QWORD *)(a1 + 128);
  v3 = *(double *)(v2 + 24);
  if (v3 == 0.0)
    return *(double *)(v2 + 8);
  v5 = a2[1] * a2[1] + *a2 * *a2;
  result = *(double *)(v2 + 8);
  if (v5 <= a2[3] * a2[3] + a2[2] * a2[2])
    v5 = a2[3] * a2[3] + a2[2] * a2[2];
  if (result * result * v5 < v3 * v3)
    return v3 / sqrt(v5);
  return result;
}

unint64_t CG::Path::element_count(CG::Path *this)
{
  unint64_t v1;
  void *v3[16];

  switch(*(_DWORD *)this)
  {
    case 1:
      v1 = 5;
      break;
    case 2:
    case 3:
      v1 = 10;
      break;
    case 4:
      if (*((_BYTE *)this + 57))
        v1 = 6;
      else
        v1 = 5;
      break;
    case 5:
      v1 = 2;
      break;
    case 6:
      v1 = (unint64_t)(ceil(fmax(*((double *)this + 7) + -0.00000001, 0.0) / 1.57079633) + 1.0);
      break;
    case 7:
      CG::Path::Path((CG::Path *)v3, this);
      if (LODWORD(v3[0]) != 9)
        CG::Path::convert_to_huge_((CG::Path *)v3);
      v1 = CG::Path::element_count((CG::Path *)v3);
      CG::Path::~Path(v3);
      break;
    case 8:
      v1 = *((unsigned __int16 *)this + 5);
      break;
    case 9:
      v1 = *((_QWORD *)this + 2);
      break;
    default:
      v1 = 0;
      break;
  }
  return v1;
}

void sub_1849E53D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  CG::Path::~Path(&a9);
  _Unwind_Resume(a1);
}

unint64_t CGPathGetNumberOfElements(char *cf)
{
  CFTypeID v2;

  if (cf && (CGPathDisableTypeValidation || (v2 = CFGetTypeID(cf), v2 == CGPathGetTypeID())))
    return CG::Path::element_count((CG::Path *)(cf + 16));
  else
    return 0;
}

uint64_t dlRecorder_DrawPathDirect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const CGPath *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFArrayRef *v8;

  if (a1)
  {
    v8 = *(CFArrayRef **)(a1 + 288);
    if (v8)
      return CG::DisplayListRecorder::DrawPath(v8, a2, a3, a4, a5, 1, a6);
  }
  CGPostError((uint64_t)"%s: CGContextDelegateGetInfo() returned NULL", a2, a3, a4, (uint64_t)a5, a6, a7, a8, (char)"dlRecorder_DrawPathDirect");
  return 1000;
}

uint64_t should_auto_hint()
{
  return FPFontShouldAutoHint();
}

void CGContextSetCharacterSpacing(CGContextRef c, CGFloat spacing)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (c && *((_DWORD *)c + 4) == 1129601108)
  {
    v9 = *((_QWORD *)c + 12);
    if (*(double *)(*(_QWORD *)(v9 + 136) + 24) != spacing)
    {
      maybe_copy_text_state(*((_QWORD *)c + 12));
      *(CGFloat *)(*(_QWORD *)(v9 + 136) + 24) = spacing;
    }
  }
  else
  {
    handle_invalid_context((char)"CGContextSetCharacterSpacing", (uint64_t)c, v2, v3, v4, v5, v6, v7);
  }
}

CFTypeRef CGFontNameTableCopyNameForLocaleIdentifier(os_unfair_lock_s *a1, const __CFString *a2, unsigned int a3)
{
  CFLocaleRef v5;
  CFLocaleRef v6;
  CFTypeRef v7;

  if (!a1)
    return 0;
  if (!a2)
    return 0;
  v5 = CFLocaleCreate(0, a2);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = copy_localized_value(a1, v5, a3);
  CFRelease(v6);
  return v7;
}

CFTypeRef CGFontCopyName(uint64_t a1, __CFString *a2)
{
  int name_id_for_key;
  unsigned __int16 v4;
  os_unfair_lock_s *name_table;
  os_unfair_lock_s *v6;
  CFLocaleRef System;

  if (!a1)
    return 0;
  if (!a2)
    return 0;
  name_id_for_key = get_name_id_for_key(a2);
  if (name_id_for_key == -1)
    return 0;
  v4 = name_id_for_key;
  name_table = get_name_table(a1);
  if (!name_table)
    return 0;
  v6 = name_table;
  System = CFLocaleGetSystem();
  return copy_localized_value(v6, System, v4);
}

os_unfair_lock_s *get_name_table(uint64_t a1)
{
  unint64_t *v2;
  os_unfair_lock_s *result;
  unint64_t v4;

  v2 = (unint64_t *)(a1 + 80);
  result = (os_unfair_lock_s *)atomic_load((unint64_t *)(a1 + 80));
  if (!result)
  {
    result = CGFontNameTableCreate(a1);
    while (1)
    {
      v4 = __ldaxr(v2);
      if (v4)
        break;
      if (!__stlxr((unint64_t)result, v2))
        return result;
    }
    __clrex();
    CGFontNameTableRelease((uint64_t)result);
    return (os_unfair_lock_s *)v4;
  }
  return result;
}

os_unfair_lock_s *CGFontNameTableCreate(uint64_t a1)
{
  _QWORD *v2;
  const CFDictionaryValueCallBacks *v3;
  const UInt8 *BytePtr;
  unint64_t Length;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  __int16 v13;
  unsigned __int16 v14;
  int v15;
  unint64_t v16;
  unsigned __int16 v17;
  uint64_t v18;
  _WORD *v19;
  _WORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  os_unfair_lock_s *v26;
  CFLocaleRef System;
  const __CFDictionary *dictionary_for_locale;
  CFLocaleRef v29;
  __CFDictionary *v30;
  __CFDictionary *v31;
  const char *v32;
  CFStringRef v33;
  uint64_t *v34;
  CFStringRef localized_name;
  CFLocaleRef v36;
  const __CFString *v37;
  const __CFString *v38;
  CFIndex v39;
  CFIndex v40;
  unsigned __int8 *v41;
  unsigned __int8 v42;
  unsigned __int8 *v43;
  unsigned int v44;
  int v45;
  char *v46;
  unsigned int v47;
  unsigned int v48;
  CFStringRef v49;
  CFStringRef v50;
  const __CFData *theData;
  os_unfair_lock_s *v53;
  _QWORD *v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  CFTypeRef cf;

  v2 = malloc_type_calloc(1uLL, 0x58uLL, 0x1070040B6466AE1uLL);
  *v2 = a1;
  v2[5] = 0;
  *((_DWORD *)v2 + 12) = 0;
  v3 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v2[7] = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *((_DWORD *)v2 + 16) = 0;
  v2[9] = CFDictionaryCreateMutable(0, 0, 0, v3);
  *((_DWORD *)v2 + 20) = 0;
  *((_DWORD *)v2 + 8) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 16) + 216))(*(_QWORD *)(a1 + 112));
  v2[2] = 0;
  v53 = (os_unfair_lock_s *)v2;
  v54 = v2 + 2;
  v2[3] = 0;
  if (*v2)
  {
    theData = (const __CFData *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(*v2 + 16) + 424))(*(_QWORD *)(*v2 + 112), 1851878757);
    if (theData)
    {
      BytePtr = CFDataGetBytePtr(theData);
      Length = CFDataGetLength(theData);
      v6 = 2 * (Length > 1);
      v7 = (v6 + 2);
      if (Length >= v7)
      {
        v8 = BytePtr[v6 | 1] | (BytePtr[v6] << 8);
        v7 = v6 | 4;
        v9 = v6 | 4;
        LODWORD(v6) = v6 + 2;
      }
      else
      {
        v8 = 0;
        v9 = v6 + 2;
      }
      if (Length >= v7)
      {
        v10 = bswap32(*(unsigned __int16 *)&BytePtr[v6]) >> 16;
        LODWORD(v6) = v9;
      }
      else
      {
        v10 = 0;
        v7 = v6;
      }
      if (v7 + 12 * v8 == v10)
      {
        for (; v8; --v8)
        {
          v11 = (v6 + 2);
          v12 = v6 + 2;
          if (Length >= v11)
          {
            v57 = BytePtr[(v6 + 1)] | (BytePtr[v6] << 8);
            v11 = (v6 + 4);
            LODWORD(v6) = v6 + 2;
            v12 = v11;
          }
          else
          {
            v57 = 0;
          }
          if (v11 <= Length)
          {
            v56 = BytePtr[(v6 + 1)] | (BytePtr[v6] << 8);
            v11 = (v12 + 2);
            LODWORD(v6) = v12;
            v12 += 2;
          }
          else
          {
            v56 = 0;
          }
          if (v11 <= Length)
          {
            v55 = BytePtr[(v6 + 1)] | (BytePtr[v6] << 8);
            v11 = (v12 + 2);
            LODWORD(v6) = v12;
            v12 += 2;
          }
          else
          {
            v55 = 0;
          }
          if (v11 <= Length)
          {
            v13 = BytePtr[(v6 + 1)] | (BytePtr[v6] << 8);
            v11 = (v12 + 2);
            LODWORD(v6) = v12;
            v12 += 2;
          }
          else
          {
            v13 = 0;
          }
          if (v11 <= Length)
          {
            v14 = BytePtr[(v6 + 1)] | (BytePtr[v6] << 8);
            v11 = (v12 + 2);
            LODWORD(v6) = v12;
            v12 += 2;
          }
          else
          {
            v14 = 0;
          }
          if (v11 <= Length)
          {
            v15 = BytePtr[(v6 + 1)] | (BytePtr[v6] << 8);
            LODWORD(v6) = v12;
          }
          else
          {
            v15 = 0;
          }
          v16 = (v15 + v10);
          if (Length > v16)
          {
            v17 = Length >= v16 + v14 ? v14 : Length - (v15 + v10);
            v18 = v10;
            v19 = malloc_type_malloc(v17 + 13, 0x51E4B2E6uLL);
            v10 = v18;
            if (v19)
            {
              v20 = v19;
              __CFSetLastAllocationEventName();
              *v20 = v57;
              v20[1] = v56;
              v20[2] = v55;
              v20[3] = v13;
              v20[5] = v17;
              memcpy(v20 + 6, &BytePtr[v16], v17);
              *((_BYTE *)v20 + v17 + 12) = 0;
              v21 = (_QWORD *)*v54;
              v22 = malloc_type_malloc(0x10uLL, 0x2062DE7BuLL);
              if (v22)
              {
                *v22 = v20;
                v22[1] = v21;
                v21 = v22;
              }
              v10 = v18;
              *v54 = v21;
            }
          }
        }
        v23 = (_QWORD *)*v54;
        if (*v54)
        {
          v24 = 0;
          do
          {
            v25 = v23;
            v23 = (_QWORD *)v23[1];
            v25[1] = v24;
            v24 = v25;
          }
          while (v23);
        }
        else
        {
          v25 = 0;
        }
        *v54 = v25;
        CFRelease(theData);
      }
    }
  }
  v26 = v53;
  *(_QWORD *)&v53[6]._os_unfair_lock_opaque = 0;
  add_localized_names(v53, 1, 0xFFFF);
  add_localized_names(v53, 1, 0);
  add_localized_names(v53, 0, 0xFFFF);
  add_localized_names(v53, 3, 0xFFFF);
  add_localized_names(v53, 3, 9);
  add_localized_names(v53, 3, 1033);
  System = CFLocaleGetSystem();
  dictionary_for_locale = (const __CFDictionary *)get_dictionary_for_locale((uint64_t)v53, System);
  cf = 0;
  add_root_name((uint64_t)v53, dictionary_for_locale, (const __CFDictionary **)&cf, CFSTR("kCGFontNameKeyFullName"), (void *)4, 1);
  add_root_name((uint64_t)v53, dictionary_for_locale, (const __CFDictionary **)&cf, CFSTR("kCGFontNameKeyFontFamily"), (void *)1, 1);
  add_root_name((uint64_t)v53, dictionary_for_locale, (const __CFDictionary **)&cf, CFSTR("kCGFontNameKeyCopyright"), 0, 0);
  add_root_name((uint64_t)v53, dictionary_for_locale, (const __CFDictionary **)&cf, CFSTR("kCGFontNameKeyFontSubfamily"), (void *)2, 0);
  add_root_name((uint64_t)v53, dictionary_for_locale, (const __CFDictionary **)&cf, CFSTR("kCGFontNameKeyUniqueID"), (void *)3, 0);
  add_root_name((uint64_t)v53, dictionary_for_locale, (const __CFDictionary **)&cf, CFSTR("kCGFontNameKeyVersion"), (void *)5, 0);
  add_root_name((uint64_t)v53, dictionary_for_locale, (const __CFDictionary **)&cf, CFSTR("kCGFontNameKeyTrademark"), (void *)7, 0);
  if (cf)
    CFRelease(cf);
  v29 = CFLocaleGetSystem();
  v30 = (__CFDictionary *)get_dictionary_for_locale((uint64_t)v53, v29);
  if (!v30)
    goto LABEL_78;
  v31 = v30;
  v32 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)&v53->_os_unfair_lock_opaque + 16)
                                                        + 144))(*(_QWORD *)(*(_QWORD *)&v53->_os_unfair_lock_opaque
                                                                            + 112));
  if (!v32 || (v33 = CFStringCreateWithCString(0, v32, 0x600u)) == 0)
  {
    v34 = *(uint64_t **)&v53[6]._os_unfair_lock_opaque;
    if (!v34)
      goto LABEL_56;
    while (1)
    {
      if (*(_WORD *)(*v34 + 6) == 6)
      {
        localized_name = create_localized_name(*v34);
        if (localized_name)
          break;
      }
      v34 = (uint64_t *)v34[1];
      if (!v34)
        goto LABEL_56;
    }
    v33 = localized_name;
  }
  CFDictionarySetValue(v31, (const void *)6, v33);
  CFRelease(v33);
LABEL_56:
  v36 = CFLocaleGetSystem();
  v37 = (const __CFString *)copy_localized_value(v53, v36, 6u);
  if (v37)
  {
    v38 = v37;
    v39 = CFStringGetLength(v37);
    v40 = CFStringGetMaximumSizeForEncoding(v39, 0x600u) + 1;
    v41 = (unsigned __int8 *)malloc_type_malloc(v40, 0xC5FD30C8uLL);
    if (CFStringGetCString(v38, (char *)v41, v40, 0x600u))
    {
      CFRelease(v38);
      v42 = *v41;
      if (*v41)
      {
        v43 = v41 + 1;
        do
        {
          v44 = (char)v42 - 37;
          if (v44 <= 0x38 && ((1 << v44) & 0x140000002800419) != 0
            || v42 == 123
            || v42 == 125
            || (v42 - 127) <= 0xA1u)
          {
            *(v43 - 1) = 95;
          }
          v45 = *v43++;
          v42 = v45;
        }
        while (v45);
        *(_QWORD *)&v53[2]._os_unfair_lock_opaque = v41;
        if (!v41)
          goto LABEL_78;
        goto LABEL_76;
      }
      free(v41);
    }
    else
    {
      free(v41);
      CFRelease(v38);
    }
  }
  v46 = (char *)malloc_type_malloc(0x40uLL, 0x7729603BuLL);
  *(_QWORD *)&v53[2]._os_unfair_lock_opaque = v46;
  if (!v46)
    goto LABEL_78;
  do
  {
    v47 = __ldxr(&fixup_ps_name_identifier);
    v48 = v47 + 1;
  }
  while (__stxr(v48, &fixup_ps_name_identifier));
  snprintf_l(v46, 0x40uLL, 0, "--unknown-%d--", v48);
  v41 = *(unsigned __int8 **)&v53[2]._os_unfair_lock_opaque;
  if (!v41)
    goto LABEL_78;
LABEL_76:
  v49 = CFStringCreateWithCString(0, (const char *)v41, 0x600u);
  if (!v49)
  {
LABEL_78:
    CGFontNameTableRelease((uint64_t)v53);
    return 0;
  }
  v50 = v49;
  CFDictionarySetValue(v31, (const void *)6, v49);
  CFRelease(v50);
  return v26;
}

uint64_t copy_table()
{
  return FPFontCopyTable();
}

void add_root_name(uint64_t a1, CFDictionaryRef theDict, const __CFDictionary **a3, void *key, void *a5, char a6)
{
  unsigned int v6;
  const __CFDictionary *v11;
  const void *Value;

  if (theDict)
  {
    v6 = a5;
    if ((a6 & 1) != 0 || !CFDictionaryGetValue(theDict, (const void *)a5))
    {
      v11 = *a3;
      if (*a3
        || (v11 = (const __CFDictionary *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 184))(*(_QWORD *)(*(_QWORD *)a1 + 112)),
            (*a3 = v11) != 0))
      {
        Value = CFDictionaryGetValue(v11, key);
        if (Value)
          CFDictionarySetValue(theDict, (const void *)v6, Value);
      }
    }
  }
}

_QWORD *add_localized_names(_QWORD *result, int a2, int a3)
{
  _QWORD *v3;
  unsigned __int16 *v4;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;

  v3 = result;
  v4 = (unsigned __int16 *)result[2];
  if (!v4)
    goto LABEL_15;
  v7 = 0;
  do
  {
    v8 = *(_QWORD *)v4;
    if (**(unsigned __int16 **)v4 == a2 && (a3 == 0xFFFF || *(unsigned __int16 *)(v8 + 4) == a3))
    {
      result = malloc_type_malloc(0x10uLL, 0x2062DE7BuLL);
      if (result)
      {
        *result = v8;
        result[1] = v7;
        v7 = result;
      }
    }
    v4 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
  }
  while (v4);
  if (v7)
  {
    v9 = 0;
    do
    {
      v10 = v7;
      v7 = (_QWORD *)v7[1];
      v10[1] = v9;
      v9 = v10;
    }
    while (v7);
    v13 = v3[3];
    v12 = v3 + 3;
    v11 = v13;
    v17 = v10;
    do
    {
      v14 = v10;
      v10 = (_QWORD *)v10[1];
    }
    while (v10);
    v15 = v14 + 1;
  }
  else
  {
LABEL_15:
    v16 = v3[3];
    v12 = v3 + 3;
    v11 = v16;
    v17 = 0;
    v15 = &v17;
  }
  *v15 = v11;
  *v12 = v17;
  return result;
}

CFTypeRef copy_localized_value(os_unfair_lock_s *a1, const void *a2, unsigned int a3)
{
  os_unfair_lock_s *v6;
  const __CFDictionary *dictionary_for_locale;
  const __CFDictionary *v8;
  const void *Value;
  const void *v10;

  v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  dictionary_for_locale = (const __CFDictionary *)get_dictionary_for_locale((uint64_t)a1, a2);
  if (dictionary_for_locale)
  {
    v8 = dictionary_for_locale;
    Value = CFDictionaryGetValue(dictionary_for_locale, (const void *)a3);
    if (Value)
    {
      v10 = Value;
      os_unfair_lock_unlock(v6);
      return CFRetain(v10);
    }
    add_sorted_names_with_name_id((uint64_t)a1, a3);
    v10 = CFDictionaryGetValue(v8, (const void *)a3);
    os_unfair_lock_unlock(v6);
    if (v10)
      return CFRetain(v10);
  }
  else
  {
    os_unfair_lock_unlock(v6);
  }
  return 0;
}

void add_sorted_names_with_name_id(uint64_t a1, int a2)
{
  int v4;
  uint64_t *i;
  unsigned __int16 *v6;
  int v7;
  CFStringRef v9;
  CFStringRef v10;
  const void *v11;
  CFTypeRef v12;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  const void *v15;
  CFTypeRef v16;
  const __CFDictionary *v17;
  const __CFDictionary *Value;
  CFTypeRef v19;
  const __CFDictionary *v20;
  CFTypeRef v21;
  CFTypeRef v22;
  uint64_t *v23;
  unsigned __int16 *v24;
  CFStringRef localized_name;
  CFStringRef v26;
  const void *v27;
  CFTypeRef locale;
  __CFDictionary *dictionary_for_locale;
  __CFDictionary *v30;
  CFTypeRef v31;

  if (a2 != 17)
  {
    if (a2 == 6)
      return;
    if (a2 != 2)
      goto LABEL_40;
  }
  v4 = *(_DWORD *)(a1 + 32);
  if (!v4)
  {
LABEL_40:
    v23 = *(uint64_t **)(a1 + 24);
    if (!v23)
      return;
    while (1)
    {
      v24 = (unsigned __int16 *)*v23;
      if (*(unsigned __int16 *)(*v23 + 6) != a2)
        goto LABEL_52;
      localized_name = create_localized_name(*v23);
      if (!localized_name)
        goto LABEL_52;
      v26 = localized_name;
      v27 = (const void *)v24[3];
      locale = create_locale(a1, *v24, v24[2]);
      dictionary_for_locale = (__CFDictionary *)get_dictionary_for_locale(a1, locale);
      if (dictionary_for_locale)
      {
        v30 = dictionary_for_locale;
        do
        {
          CFDictionarySetValue(v30, v27, v26);
          v31 = CGCreateContainingLocaleForLocale(locale);
          v30 = (__CFDictionary *)get_dictionary_for_locale(a1, v31);
          if (locale)
            CFRelease(locale);
          if (!v30)
            break;
          locale = v31;
        }
        while (!CFDictionaryGetValue(v30, v27));
        if (!v31)
          goto LABEL_51;
      }
      else
      {
        v31 = locale;
        if (!locale)
          goto LABEL_51;
      }
      CFRelease(v31);
LABEL_51:
      CFRelease(v26);
LABEL_52:
      v23 = (uint64_t *)v23[1];
      if (!v23)
        return;
    }
  }
  *(_DWORD *)(a1 + 32) = 0;
  add_sorted_names_with_name_id(a1, (unsigned __int16)v4);
  *(_DWORD *)(a1 + 32) = v4;
  for (i = *(uint64_t **)(a1 + 24); i; i = (uint64_t *)i[1])
  {
    v6 = (unsigned __int16 *)*i;
    v7 = *(unsigned __int16 *)(*i + 6);
    if (v7 == 17 || v7 == 2)
    {
      v9 = create_localized_name(*i);
      if (v9)
      {
        v10 = v9;
        v11 = (const void *)v6[3];
        v12 = create_locale(a1, *v6, v6[2]);
        v13 = (const __CFDictionary *)get_dictionary_for_locale(a1, v12);
        if (v13)
        {
          v14 = v13;
          while (1)
          {
            if (CFDictionaryGetValue(v14, v11))
              goto LABEL_34;
            v15 = (const void *)*(unsigned int *)(a1 + 32);
            v16 = CFRetain(v12);
            v17 = (const __CFDictionary *)get_dictionary_for_locale(a1, v16);
            if (v17)
              break;
LABEL_21:
            if (v16)
              goto LABEL_22;
LABEL_23:
            if (v17)
              v20 = v17;
            else
              v20 = (const __CFDictionary *)v10;
            v21 = CFRetain(v20);
            CFDictionarySetValue(v14, v11, v21);
            if (v21)
              CFRelease(v21);
            v22 = CGCreateContainingLocaleForLocale(v12);
            v14 = (const __CFDictionary *)get_dictionary_for_locale(a1, v22);
            if (v12)
              CFRelease(v12);
            v12 = v22;
            if (!v14)
              goto LABEL_35;
          }
          while (1)
          {
            Value = (const __CFDictionary *)CFDictionaryGetValue(v17, v15);
            if (Value)
              break;
            v19 = CGCreateContainingLocaleForLocale(v16);
            v17 = (const __CFDictionary *)get_dictionary_for_locale(a1, v19);
            if (v16)
              CFRelease(v16);
            v16 = v19;
            if (!v17)
            {
              v16 = v19;
              goto LABEL_21;
            }
          }
          v17 = Value;
          if (!v16)
            goto LABEL_23;
LABEL_22:
          CFRelease(v16);
          goto LABEL_23;
        }
LABEL_34:
        v22 = v12;
LABEL_35:
        if (v22)
          CFRelease(v22);
        CFRelease(v10);
      }
    }
  }
}

CFStringRef create_localized_name(uint64_t a1)
{
  CFIndex v1;
  const UInt8 *v2;
  CFStringEncoding v3;
  int v4;

  if (!a1)
    return 0;
  v1 = *(unsigned __int16 *)(a1 + 10);
  if (!*(_WORD *)(a1 + 10))
    return 0;
  if (*(_WORD *)a1 != 1)
  {
    v2 = (const UInt8 *)(a1 + 12);
    v4 = *(unsigned __int8 *)(a1 + 12);
    if ((_DWORD)v1 != 1)
    {
      if (*(_BYTE *)(a1 + 12))
        goto LABEL_10;
      v4 = *(unsigned __int8 *)(a1 + 13);
    }
    if (!v4)
      return 0;
LABEL_10:
    v3 = 268435712;
    return CFStringCreateWithBytes(0, v2, v1, v3, 0);
  }
  v2 = (const UInt8 *)(a1 + 12);
  if (*(_BYTE *)(a1 + 12))
  {
    v3 = *(unsigned __int16 *)(a1 + 2);
    return CFStringCreateWithBytes(0, v2, v1, v3, 0);
  }
  return 0;
}

uint64_t get_postscript_name()
{
  return FPFontGetPostScriptName();
}

uint64_t get_variation_name_id()
{
  return FPFontGetInstanceNameID();
}

uint64_t copy_root_names()
{
  return FPFontCopyNames();
}

uint64_t get_name_id_for_key(__CFString *a1)
{
  if (a1 == CFSTR("kCGFontNameKeyCopyright"))
    return 0;
  if (a1 == CFSTR("kCGFontNameKeyFontFamily"))
    return 1;
  if (a1 == CFSTR("kCGFontNameKeyFontSubfamily"))
    return 2;
  if (a1 == CFSTR("kCGFontNameKeyUniqueID"))
    return 3;
  if (a1 == CFSTR("kCGFontNameKeyFullName"))
    return 4;
  if (a1 == CFSTR("kCGFontNameKeyVersion"))
    return 5;
  if (a1 == CFSTR("kCGFontNameKeyPostScriptName"))
    return 6;
  if (a1 == CFSTR("kCGFontNameKeyTrademark"))
    return 7;
  if (a1 == CFSTR("kCGFontNameKeyManufacturer"))
    return 8;
  if (a1 == CFSTR("kCGFontNameKeyDesigner"))
    return 9;
  if (a1 == CFSTR("kCGFontNameKeyDescription"))
    return 10;
  if (a1 == CFSTR("kCGFontNameKeyVendorURL"))
    return 11;
  if (a1 == CFSTR("kCGFontNameKeyDesignerURL"))
    return 12;
  if (a1 == CFSTR("kCGFontNameKeyLicense"))
    return 13;
  if (a1 == CFSTR("kCGFontNameKeyLicenseURL"))
    return 14;
  if (a1 == CFSTR("kCGFontNameKeyPreferredFamily"))
    return 16;
  if (a1 == CFSTR("kCGFontNameKeyPreferredSubfamily"))
    return 17;
  if (a1 == CFSTR("kCGFontNameKeySampleText"))
    return 19;
  return 0xFFFFFFFFLL;
}

CFTypeRef CGFontNameTableCopyLocales(uint64_t a1)
{
  unint64_t *v2;
  CFArrayRef v3;
  unsigned __int16 *i;
  CFTypeRef locale;
  const void *v7;
  CFIndex Count;
  const void **v9;
  unint64_t v10;

  if (a1)
  {
    v2 = (unint64_t *)(a1 + 40);
    v3 = (CFArrayRef)atomic_load((unint64_t *)(a1 + 40));
    if (v3)
      return CFRetain(v3);
    for (i = *(unsigned __int16 **)(a1 + 24); i; i = (unsigned __int16 *)*((_QWORD *)i + 1))
    {
      locale = create_locale(a1, **(unsigned __int16 **)i, *(unsigned __int16 *)(*(_QWORD *)i + 4));
      while (1)
      {
        v7 = locale;
        if (!get_dictionary_for_locale(a1, locale))
          break;
        locale = CGCreateContainingLocaleForLocale(locale);
        if (v7)
          CFRelease(v7);
      }
      if (locale)
        CFRelease(locale);
    }
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
    Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 56));
    v9 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 56), v9, 0);
    v3 = CFArrayCreate(0, v9, Count, MEMORY[0x1E0C9B378]);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
    free(v9);
    if (v3)
    {
      while (1)
      {
        v10 = __ldaxr(v2);
        if (v10)
          break;
        if (!__stlxr((unint64_t)v3, v2))
          return CFRetain(v3);
      }
      __clrex();
      CFRelease(v3);
      v3 = (CFArrayRef)v10;
      return CFRetain(v3);
    }
  }
  return 0;
}

const void *get_dictionary_for_locale(uint64_t a1, const void *a2)
{
  const void *Value;

  if (!a1)
    return 0;
  Value = 0;
  if (a2 && *(_QWORD *)(a1 + 56))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 56), a2);
    if (!Value)
    {
      Value = CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), a2, Value);
      CFRelease(Value);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  }
  return Value;
}

CFTypeRef CGCreateContainingLocaleForLocale(const void *a1)
{
  const __CFDictionary *v2;
  const __CFString *Value;
  const __CFString *v5;
  CFTypeID v6;
  CFLocaleRef v7;
  CFLocaleRef System;

  if (!a1)
    return 0;
  if (get_locale_mapping_predicate != -1)
    dispatch_once(&get_locale_mapping_predicate, &__block_literal_global_452);
  v2 = (const __CFDictionary *)get_locale_mapping_locale_mapping;
  pthread_mutex_lock(&CGCreateContainingLocaleForLocale_mutex);
  Value = (const __CFString *)CFDictionaryGetValue(v2, a1);
  if (!Value)
  {
    v5 = (const __CFString *)CFLocaleGetValue((CFLocaleRef)a1, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
    Value = v5;
    if (v5)
    {
      v6 = CFGetTypeID(v5);
      if (v6 == CFStringGetTypeID())
      {
        v7 = CFLocaleCreate(0, Value);
        Value = (const __CFString *)v7;
        if (v7)
        {
          if (CFEqual(v7, a1))
          {
            CFRelease(Value);
            System = CFLocaleGetSystem();
            Value = (const __CFString *)CFRetain(System);
          }
          CFDictionarySetValue(v2, a1, Value);
          CFRelease(Value);
        }
      }
      else
      {
        Value = 0;
      }
    }
  }
  pthread_mutex_unlock(&CGCreateContainingLocaleForLocale_mutex);
  if (Value && Value != (const __CFString *)*MEMORY[0x1E0C9B0D0])
    return CFRetain(Value);
  else
    return 0;
}

CFTypeRef create_locale(uint64_t a1, unsigned int a2, uint32_t a3)
{
  const void *v6;
  os_unfair_lock_s *v7;
  const void *Value;
  const __CFString *LocaleIdentifierFromWindowsLocaleCode;
  const __CFString *v11;
  CFLocaleRef v12;
  void *v13;
  uint64_t v14;
  char *v15;
  CFLocaleRef System;
  uint64_t v17;
  char *v18;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  int v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  int v35;
  const __CFString *v36;
  char cStr[32];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v6 = (const void *)(a2 | ((unint64_t)a3 << 16));
  v7 = (os_unfair_lock_s *)(a1 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), v6);
  if (Value)
    goto LABEL_2;
  if (a2)
  {
    if (a2 == 1)
    {
      v14 = 0;
      v15 = &byte_184E3BF40;
      while (*(v15 - 4) != a3)
      {
        ++v14;
        v15 += 10;
        if (v14 == 119)
          goto LABEL_40;
      }
      cStr[0] = 0;
      if (*((_BYTE *)&locale_to_language + 10 * v14 + 1))
      {
        v17 = 0;
        v18 = v15 - 3;
        while (cStr[v17++])
          ;
        v20 = -1;
        while (1)
        {
          v21 = *v18++;
          cStr[v17 + v20] = v21;
          if (!v21)
            break;
          if (++v20 == 2)
          {
            cStr[v17 + 2] = 0;
            break;
          }
        }
      }
      if (*((_BYTE *)&locale_to_language + 10 * v14 + 4))
      {
        v22 = 0;
        do
          v23 = v22;
        while (cStr[v22++]);
        v25 = 0;
        cStr[v23] = 95;
        while (1)
        {
          v26 = *v15++;
          cStr[v25 + v22] = v26;
          if (!v26)
            break;
          if (++v25 == 4)
          {
            cStr[v22 + 4] = 0;
            break;
          }
        }
      }
      v27 = (char *)&locale_to_language + 10 * v14;
      v29 = v27[8];
      v28 = v27 + 8;
      if (v29)
      {
        v30 = 0;
        do
          v31 = v30;
        while (cStr[v30++]);
        v33 = 0;
        v34 = 0;
        cStr[v31] = 95;
        while (1)
        {
          v35 = v28[v34];
          cStr[v33 + v30] = v35;
          if (!v35)
            break;
          ++v33;
          v34 = 1;
          if ((_DWORD)v33 == 2)
          {
            cStr[v30 + v33] = 0;
            break;
          }
        }
      }
      v36 = CFStringCreateWithCStringNoCopy(0, cStr, 0x600u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
      if (!v36)
        goto LABEL_40;
      v12 = (CFLocaleRef)v36;
      v13 = CFLocaleCreate(0, v36);
    }
    else
    {
      if (a2 != 3)
        goto LABEL_40;
      LocaleIdentifierFromWindowsLocaleCode = CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(0, a3);
      if (!LocaleIdentifierFromWindowsLocaleCode)
        goto LABEL_40;
      v11 = LocaleIdentifierFromWindowsLocaleCode;
      v12 = CFLocaleCreate(0, LocaleIdentifierFromWindowsLocaleCode);
      CFRelease(v11);
      if (!v12)
        goto LABEL_40;
      v13 = (void *)CGCreateCanonicalLanguageLocale();
    }
    Value = v13;
    CFRelease(v12);
    if (Value)
      goto LABEL_39;
  }
  else
  {
    System = CFLocaleGetSystem();
    Value = CFRetain(System);
    if (Value)
    {
LABEL_39:
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 72), v6, Value);
      CFRelease(Value);
LABEL_2:
      os_unfair_lock_unlock(v7);
      return CFRetain(Value);
    }
  }
LABEL_40:
  os_unfair_lock_unlock(v7);
  return 0;
}

const __CFString *CGCreateCanonicalLanguageLocale()
{
  const __CFString *v0;
  const __CFString *result;
  const __CFString *v2;
  CFLocaleRef v3;

  v0 = (const __CFString *)MEMORY[0x186DC1728]();
  result = CFLocaleCreateCanonicalLanguageIdentifierFromString(0, v0);
  if (result)
  {
    v2 = result;
    v3 = CFLocaleCreate(0, result);
    CFRelease(v2);
    return (const __CFString *)v3;
  }
  return result;
}

void CGContextClip(CGContextRef c)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  clip((uint64_t)c, 0, v1, v2, v3, v4, v5, v6);
}

uint64_t CGvImage_converter_data_key_hash(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  _OWORD v16[3];
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _WORD v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)(a1 + 16);
  v16[0] = *(_OWORD *)a1;
  v16[1] = v2;
  v3 = *(_OWORD *)(a1 + 48);
  v16[2] = *(_OWORD *)(a1 + 32);
  v17 = v3;
  v18 = *(_QWORD *)(a1 + 64);
  bzero(&v24, 0x208uLL);
  v19 = *(_OWORD *)(a1 + 72);
  v20 = *(_OWORD *)(a1 + 88);
  v21 = *(_QWORD *)(a1 + 104);
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
    v5 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 40);
  else
    v5 = 0;
  v22 = v5;
  v6 = *(_QWORD *)(a1 + 80);
  if (v6)
    v6 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 40);
  v23 = v6;
  *((_QWORD *)&v17 + 1) = 0;
  *((_QWORD *)&v20 + 1) = 0;
  v26[124] = *(_WORD *)(a1 + 640);
  if (v5)
  {
    v7 = *(_QWORD *)(a1 + 128);
    v8 = &v25;
    v9 = (uint64_t *)(a1 + 136);
    do
    {
      *(v8 - 1) = v7;
      v10 = *v9++;
      v7 = v10;
      *v8++ = v10;
      --v5;
    }
    while (v5);
  }
  if (v6)
  {
    v11 = *(_QWORD *)(a1 + 384);
    v12 = v26;
    v13 = (uint64_t *)(a1 + 392);
    do
    {
      *(v12 - 1) = v11;
      v14 = *v13++;
      v11 = v14;
      *v12++ = v14;
      --v6;
    }
    while (v6);
  }
  return MEMORY[0x186DC26D0](v16, 648);
}

void CGFontGetGlyphsForUnichars(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (a1)
  {
    (*(void (**)(_QWORD, uint64_t, void *))(*(_QWORD *)(a1 + 16) + 376))(*(_QWORD *)(a1 + 112), a2, a3);
  }
  else if (a4)
  {
    bzero(a3, 2 * a4);
  }
}

double CGColorTRCGetFunction@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;

  if (CGColorTRCGetFunction_cglibrarypredicate != -1)
    dispatch_once(&CGColorTRCGetFunction_cglibrarypredicate, &__block_literal_global_3);
  v8 = 0;
  v6 = 0u;
  v7 = 0u;
  CGColorTRCGetFunction_f(&v6, a1);
  result = *(double *)&v6;
  v5 = v7;
  *(_OWORD *)a2 = v6;
  *(_OWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 32) = v8;
  return result;
}

uint64_t CGGradientGetColorSpace(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

BOOL CGImageTextureDataSupportsTiledLayout(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 137) != 0;
  return result;
}

void CGContextSetFontSize(CGContextRef c, CGFloat size)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (c && *((_DWORD *)c + 4) == 1129601108)
  {
    v9 = *((_QWORD *)c + 12);
    if (*(double *)(*(_QWORD *)(v9 + 136) + 16) != size)
    {
      maybe_copy_text_state(*((_QWORD *)c + 12));
      *(CGFloat *)(*(_QWORD *)(v9 + 136) + 16) = size;
    }
  }
  else
  {
    handle_invalid_context((char)"CGContextSetFontSize", (uint64_t)c, v2, v3, v4, v5, v6, v7);
  }
}

uint64_t CG::DisplayList::executeEntries(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, CGPoint *a7)
{
  CGPoint origin;
  CGSize size;
  BOOL v14;
  uint64_t v15;
  char *v16;
  char **v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v46;
  double v47;
  float64x2_t v52;
  float64x2_t v54;
  double v55;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  CGImage *v67;
  uint64_t (*v68)(void);
  _QWORD *v69;
  _QWORD *v70;
  float v71;
  float HeadroomInfo;
  CGImageRef Copy;
  uint64_t v74;
  float v75;
  const __CFDictionary *Property;
  const __CFDictionary *v77;
  const void *Value;
  const __CFNumber *v79;
  const void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const void *v88;
  CGColorSpaceRef ColorSpace;
  float v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  double v109;
  uint64_t v110;
  uint64_t v112;
  double v113;
  __int128 v114;
  __int128 v115;
  double a;
  double b;
  double c;
  double d;
  double tx;
  double ty;
  CGFloat v122;
  CGFloat v123;
  CGFloat v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  uint64_t v131;
  double v132;
  uint64_t v133;
  __int128 v134;
  void (*v135)(void);
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  __int128 v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  double v143;
  double v144;
  uint64_t v145;
  uint64_t v147;
  double v148;
  float64x2_t v153;
  float64x2_t v155;
  double v156;
  double v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  double v161;
  const CGPath *v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;
  __int128 v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  double v172;
  double v173;
  uint64_t v174;
  uint64_t v176;
  double v177;
  float64x2_t v182;
  float64x2_t v184;
  double v185;
  double v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  double v190;
  const CGRect *v191;
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  __int128 v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  double v199;
  double v200;
  uint64_t v201;
  uint64_t v203;
  double v204;
  float64x2_t v209;
  float64x2_t v211;
  double v212;
  double v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  double v217;
  uint64_t v218;
  __int128 v219;
  uint64_t v220;
  __int128 v221;
  uint64_t v222;
  uint64_t v223;
  double v224;
  double v225;
  uint64_t v226;
  uint64_t v228;
  double v229;
  float64x2_t v234;
  float64x2_t v236;
  double v237;
  double v238;
  uint64_t v239;
  uint64_t v240;
  double v241;
  uint64_t v242;
  uint64_t v243;
  __int128 v244;
  uint64_t v245;
  __int128 v246;
  uint64_t v247;
  uint64_t v248;
  double v249;
  double v250;
  uint64_t v251;
  uint64_t v253;
  double v254;
  float64x2_t v259;
  float64x2_t v261;
  double v262;
  double v263;
  uint64_t v264;
  uint64_t v265;
  double v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  unsigned int (*v270)(double, double, double, double);
  _QWORD *v271;
  CGFunctionRef v272;
  uint64_t v273;
  double *v274;
  uint64_t v275;
  __int128 v276;
  uint64_t v277;
  __int128 v278;
  uint64_t v279;
  uint64_t v280;
  double v281;
  double v282;
  uint64_t v283;
  uint64_t v285;
  double v286;
  float64x2_t v291;
  float64x2_t v293;
  double v294;
  double v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  double v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  const void *v309;
  _QWORD *v310;
  uint64_t v311;
  uint64_t v312;
  const void *v313;
  _QWORD *v314;
  uint64_t v315;
  uint64_t v316;
  const __CFDictionary *v317;
  int v318;
  unsigned int (*v319)(_QWORD, _QWORD, uint64_t, const __CFString *, const __CFDictionary *);
  CGPath *Mutable;
  __int128 v321;
  CGAffineTransform *v322;
  uint16x4_t v323;
  uint64_t v324;
  unsigned int (*v325)(double, double, double);
  _QWORD *v326;
  CGFunctionRef Function;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t Conic;
  unsigned int (*v335)(double, double, double, double, double, double);
  _QWORD *v336;
  CGFunctionRef v337;
  uint64_t v338;
  double *v339;
  void (*v340)(void);
  void (*v341)(double, double, double, double);
  __int128 v342;
  __int128 v343;
  CGSize v345;
  char v346;
  unsigned int v347;
  uint64_t v348;
  int v349[2];
  int v350[2];
  int v351[2];
  int v352[2];
  uint64_t v353;
  CGPoint v354;
  CGSize v355;
  uint64_t v356;
  CGAffineTransform *m;
  CGAffineTransform v358;
  CGAffineTransform v359;

  v348 = a1;
  *(_QWORD *)v349 = a4;
  *(_QWORD *)v350 = a5;
  *(_QWORD *)v351 = a6;
  v353 = 0;
  if (!*(_BYTE *)(a1 + 57))
    goto LABEL_13;
  if (a7)
  {
    origin = *a7;
    size = (CGSize)a7[1];
LABEL_14:
    v354 = origin;
    v355 = size;
    goto LABEL_15;
  }
  _ZF = *(double *)(a1 + 24) == -8.98846567e307 && *(double *)(a1 + 32) == -8.98846567e307;
  v14 = _ZF && *(double *)(a1 + 40) == 1.79769313e308;
  if (v14 && *(double *)(a1 + 48) == 1.79769313e308)
  {
LABEL_13:
    origin = CGRectNull.origin;
    size = CGRectNull.size;
    goto LABEL_14;
  }
  v345 = *(CGSize *)(a1 + 40);
  v354 = *(CGPoint *)(a1 + 24);
  v355 = v345;
LABEL_15:
  v356 = 0;
  v358 = CGAffineTransformIdentity;
  v15 = *(_QWORD *)(a6 + 8);
  if (v15 == a6)
  {
    v16 = CGGStateCreate();
    v17 = *(char ***)(a6 + 8);
    *(_QWORD *)(a6 + 8) = v16;
    *(_QWORD *)v16 = a6;
    *v17 = v16;
    *((_QWORD *)v16 + 1) = v17;
    v15 = *(_QWORD *)(a6 + 8);
  }
  *(_QWORD *)v352 = v15;
  v18 = *(double *)(v15 + 24);
  m = (CGAffineTransform *)(v15 + 24);
  if (v18 == 1.0
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)(v15 + 32)), (int32x4_t)vceqq_f64(*(float64x2_t *)(v15 + 48), (float64x2_t)xmmword_185004990))))) & 1) == 0&& *(double *)(v15 + 64) == 0.0)
  {
    m = 0;
  }
  v19 = *(double *)(a1 + 24);
  v20 = *(double *)(a1 + 32);
  v21 = *(double *)(a1 + 40);
  v22 = *(double *)(a1 + 48);
  if (v19 != -8.98846567e307 || v20 != -8.98846567e307 || v21 != 1.79769313e308 || v22 != 1.79769313e308)
    CGGStateClipToRect(v15, v19, v20, v21, v22);
  if (*(_QWORD *)(a1 + 760))
  {
    v23 = *(_QWORD *)(v15 + 136);
    if (*(double *)(v23 + 16) != 1.0)
    {
      maybe_copy_text_state(v15);
      *(_QWORD *)(*(_QWORD *)(v15 + 136) + 16) = 0x3FF0000000000000;
      v15 = *(_QWORD *)v352;
      v23 = *(_QWORD *)(*(_QWORD *)v352 + 136);
    }
    if (*(double *)(v23 + 24) != 0.0)
    {
      maybe_copy_text_state(v15);
      *(_QWORD *)(*(_QWORD *)(v15 + 136) + 24) = 0;
    }
  }
  *(_QWORD *)v352 = CGGStackSave(*(uint64_t *)v351);
  v31 = *(_QWORD *)v350;
  v32 = *(_OWORD *)(*(_QWORD *)v350 + 24);
  v33 = *(_OWORD *)(*(_QWORD *)v350 + 56);
  *(_OWORD *)&v358.c = *(_OWORD *)(*(_QWORD *)v350 + 40);
  *(_OWORD *)&v358.tx = v33;
  *(_OWORD *)&v358.a = v32;
  if (a2 != a3)
  {
    while (1)
    {
      v34 = *a2;
      v35 = *(_DWORD *)(*a2 + 8);
      switch((char)v35)
      {
        case 0:
          if (!v34)
            goto LABEL_33;
          v36 = *(_QWORD *)v352;
          if (!*(_QWORD *)v352)
            goto LABEL_33;
          v37 = *(_OWORD *)(v34 + 32);
          *(_OWORD *)&v359.a = *(_OWORD *)(v34 + 16);
          *(_OWORD *)&v359.c = v37;
          if (CG::DisplayListExecutor::rejectRect((CG::DisplayListExecutor *)&v348, (const CGRect *)&v359))
            goto LABEL_33;
          v38 = *(_QWORD *)(v34 + 48);
          v39 = *(_OWORD *)(v34 + 104);
          *(_OWORD *)&v359.a = *(_OWORD *)(v34 + 88);
          *(_OWORD *)&v359.c = v39;
          *(_OWORD *)&v359.tx = *(_OWORD *)(v34 + 120);
          CG::DisplayListExecutor::applyEntryDrawingState((uint64_t)&v348, v38, (uint64_t)&v359, v36, v27, v28, v29, v30);
          if ((*(_BYTE *)(v34 + 10) & 4) != 0)
          {
            v40 = *(_QWORD *)(v34 + 72);
            v41 = *(_QWORD *)v352;
            v42 = *(double *)(v40 + 56);
            v43 = *(double *)(v40 + 64);
            v44 = *(_QWORD *)(*(_QWORD *)v352 + 120);
            if (*(double *)(v44 + 24) != v42 || *(double *)(v44 + 32) != v43)
            {
              maybeCopyRenderingState(*(uint64_t *)v352);
              v46 = *(_QWORD *)(v41 + 120);
              *(double *)(v46 + 24) = v42;
              *(double *)(v46 + 32) = v43;
            }
            v47 = *(double *)(v40 + 72);
            if (*(double *)(*(_QWORD *)(v41 + 144) + 16) != v47)
            {
              maybe_copy_device_state(v41);
              *(double *)(*(_QWORD *)(v41 + 144) + 16) = v47;
            }
            _D4 = *(double *)(v40 + 8);
            _D1 = *(double *)(v40 + 16);
            _D3 = *(double *)(v40 + 24);
            _D0 = *(double *)(v40 + 32);
            v52 = *(float64x2_t *)(v40 + 40);
            if (m)
            {
              _Q5 = *(_OWORD *)&m->a;
              v54 = *(float64x2_t *)&m->c;
              v55 = vmlad_n_f64(_D1 * v54.f64[0], _D4, m->a);
              __asm { FMLA            D1, D4, V5.D[1] }
              v59 = vmlad_n_f64(_D0 * v54.f64[0], _D3, m->a);
              __asm { FMLA            D0, D3, V5.D[1] }
              v52 = vaddq_f64(*(float64x2_t *)&m->tx, vmlaq_n_f64(vmulq_laneq_f64(v54, v52, 1), *(float64x2_t *)&m->a, v52.f64[0]));
              _D3 = v59;
              _D4 = v55;
            }
            v60 = *(_QWORD *)v350;
            *(double *)(*(_QWORD *)v350 + 24) = _D4;
            *(double *)(v60 + 32) = _D1;
            *(double *)(v60 + 40) = _D3;
            *(double *)(v60 + 48) = _D0;
            *(float64x2_t *)(v60 + 56) = v52;
          }
          CGGStateSetInterpolationQuality(*(uint64_t *)v352, *(_DWORD *)(v34 + 136));
          v61 = *(_QWORD *)v350;
          v62 = *(_QWORD *)v352;
          *(_DWORD *)(*(_QWORD *)v350 + 72) = *(_DWORD *)(v34 + 140);
          *(_DWORD *)(v61 + 76) = *(_DWORD *)(v34 + 144);
          CGGStateSetRenderingIntent(v62, *(_DWORD *)(v34 + 148));
          CGGStateSetImageRenderingIntent(*(uint64_t *)v352, *(_DWORD *)(v34 + 148));
          v63 = *(_QWORD *)v352;
          v64 = *(float *)(v34 + 152);
          if (*(float *)(*(_QWORD *)(*(_QWORD *)v352 + 120) + 48) != v64)
          {
            maybeCopyRenderingState(*(uint64_t *)v352);
            *(float *)(*(_QWORD *)(v63 + 120) + 48) = v64;
          }
          if ((*(_BYTE *)(v34 + 10) & 1) != 0)
          {
            v65 = *(_QWORD *)(*(_QWORD *)(v34 + 56) + 8);
            if (v65)
              CGGStateSetFillColor(*(uint64_t *)v352, *(void **)(v65 + 16));
          }
          v66 = *(_QWORD *)(v34 + 80);
          v67 = *(CGImage **)(v66 + 16);
          if (v67)
            CFRetain(*(CFTypeRef *)(v66 + 16));
          if (CGImageGetHeadroomInfo(v67, 0) <= 1.0)
            goto LABEL_306;
          if (!*(_QWORD *)v349)
          {
            Copy = v67;
            goto LABEL_310;
          }
          v68 = *(uint64_t (**)(void))(*(_QWORD *)v349 + 264);
          if (!v68)
            goto LABEL_306;
          v69 = (_QWORD *)v68();
          if (!v69)
            goto LABEL_306;
          v70 = v69;
          v71 = CGColorSpaceSanitizeHeadroom(v69, *(float *)(v34 + 152));
          HeadroomInfo = CGImageGetHeadroomInfo(v67, 0);
          if (v71 < HeadroomInfo)
            Copy = 0;
          else
            Copy = v67;
          if (v71 >= HeadroomInfo || !v67)
            goto LABEL_307;
          v74 = *((_QWORD *)v67 + 28);
          if (!v74)
            goto LABEL_306;
          v75 = HeadroomInfo;
          Property = (const __CFDictionary *)CGPropertiesGetProperty(v74, CFSTR("kCGColorConversionInfoPayload"));
          if (!Property)
            goto LABEL_306;
          v77 = Property;
          Value = CFDictionaryGetValue(Property, CFSTR("kCGToneMappingMethod"));
          v79 = (const __CFNumber *)CFDictionaryGetValue(v77, CFSTR("kCGHDRMediaReferenceWhite"));
          v80 = CFDictionaryGetValue(v77, CFSTR("kCGToneMappingMethodOptions"));
          if (!Value || !v79)
          {
            CGPostError((uint64_t)"%s: Cannot create resolved tone mapping settings. Bad payload", v81, v82, v83, v84, v85, v86, v87, (char)"drawImage");
LABEL_306:
            Copy = v67;
LABEL_307:
            if (*(_QWORD *)v349)
            {
              v341 = *(void (**)(double, double, double, double))(*(_QWORD *)v349 + 80);
              if (v341)
                v341(0.0, 0.0, 1.0, 1.0);
            }
LABEL_310:
            if (Copy)
              goto LABEL_311;
            goto LABEL_33;
          }
          v88 = v80;
          v359.a = 0.0;
          v347 = CGToneMappingMethodFromString(Value);
          ColorSpace = CGImageGetColorSpace(v67);
          v90 = CGGetFloatValue(v79);
          if (CGCreateResolvedToneMappingSettingForMethod(v347, v70, ColorSpace, v88, (CFMutableDictionaryRef *)&v359, v91, v92, v93, v71, v75, v90))
          {
            Copy = CGImageCreateCopy(v67);
            if (CGImageSetColorConversionInfoOptions((uint64_t)Copy, *(const __CFDictionary **)&v359.a))
            {
              CFRelease(v67);
              CGImageSetCachingFlags(Copy, 1);
              goto LABEL_316;
            }
            if (Copy)
              CFRelease(Copy);
          }
          else
          {
            CGPostError((uint64_t)"%s: Cannot create resolved tone mapping settings. CGCreateResolvedToneMappingSettingForMethod returned false", v94, v95, v96, v97, v98, v99, v100, (char)"drawImage");
          }
          Copy = v67;
LABEL_316:
          if (*(_QWORD *)&v359.a)
            CFRelease(*(CFTypeRef *)&v359.a);
          goto LABEL_307;
        case 1:
          if (v34)
          {
            v101 = *(_QWORD *)v352;
            if (*(_QWORD *)v352)
            {
              v102 = *(_OWORD *)(v34 + 32);
              *(_OWORD *)&v359.a = *(_OWORD *)(v34 + 16);
              *(_OWORD *)&v359.c = v102;
              if (!CG::DisplayListExecutor::rejectRect((CG::DisplayListExecutor *)&v348, (const CGRect *)&v359))
              {
                v103 = *(_QWORD *)(v34 + 48);
                v104 = *(_OWORD *)(v34 + 104);
                *(_OWORD *)&v359.a = *(_OWORD *)(v34 + 88);
                *(_OWORD *)&v359.c = v104;
                *(_OWORD *)&v359.tx = *(_OWORD *)(v34 + 120);
                CG::DisplayListExecutor::applyEntryDrawingState((uint64_t)&v348, v103, (uint64_t)&v359, v101, v27, v28, v29, v30);
                v105 = *(_DWORD *)(v34 + 8);
                if ((v105 & 0x40000) != 0)
                {
                  v106 = *(_QWORD *)(v34 + 72);
                  v107 = *(_QWORD *)v352;
                  v108 = *(double *)(v106 + 56);
                  v109 = *(double *)(v106 + 64);
                  v110 = *(_QWORD *)(*(_QWORD *)v352 + 120);
                  if (*(double *)(v110 + 24) != v108 || *(double *)(v110 + 32) != v109)
                  {
                    maybeCopyRenderingState(*(uint64_t *)v352);
                    v112 = *(_QWORD *)(v107 + 120);
                    *(double *)(v112 + 24) = v108;
                    *(double *)(v112 + 32) = v109;
                  }
                  v113 = *(double *)(v106 + 72);
                  if (*(double *)(*(_QWORD *)(v107 + 144) + 16) != v113)
                  {
                    maybe_copy_device_state(v107);
                    *(double *)(*(_QWORD *)(v107 + 144) + 16) = v113;
                  }
                  v114 = *(_OWORD *)(v106 + 8);
                  v115 = *(_OWORD *)(v106 + 40);
                  *(_OWORD *)&v359.c = *(_OWORD *)(v106 + 24);
                  *(_OWORD *)&v359.tx = v115;
                  *(_OWORD *)&v359.a = v114;
                  if (m)
                  {
                    a = m->a;
                    b = m->b;
                    c = m->c;
                    d = m->d;
                    tx = m->tx;
                    ty = m->ty;
                    v122 = v359.b * d + v359.a * b;
                    v359.a = v359.b * c + v359.a * m->a;
                    v359.b = v122;
                    v123 = v359.d * d + v359.c * b;
                    v359.c = v359.d * c + v359.c * a;
                    v359.d = v123;
                    v124 = d * v359.ty + v359.tx * b + ty;
                    v359.tx = tx + c * v359.ty + v359.tx * a;
                    v359.ty = v124;
                  }
                  v125 = *(_QWORD *)v350;
                  v127 = *(_OWORD *)&v359.c;
                  v126 = *(_OWORD *)&v359.tx;
                  *(_OWORD *)(*(_QWORD *)v350 + 24) = *(_OWORD *)&v359.a;
                  *(_OWORD *)(v125 + 40) = v127;
                  *(_OWORD *)(v125 + 56) = v126;
                  v105 = *(_DWORD *)(v34 + 8);
                }
                if ((v105 & 0x10000) != 0)
                {
                  v128 = *(_QWORD *)(*(_QWORD *)(v34 + 56) + 8);
                  if (v128)
                  {
                    CGGStateSetFillColor(*(uint64_t *)v352, *(void **)(v128 + 16));
                    v105 = *(_DWORD *)(v34 + 8);
                  }
                }
                if ((v105 & 0x20000) != 0)
                  CG::DisplayListExecutor::applyEntryStrokeState(*(_QWORD *)(v34 + 64), *(uint64_t *)v352);
                CGGStateSetRenderingIntent(*(uint64_t *)v352, (int)(*(_DWORD *)(v103 + 96) << 18) >> 26);
                v129 = *(_QWORD *)v352;
                v130 = *(double *)(v103 + 56);
                if (*(double *)(*(_QWORD *)(*(_QWORD *)v352 + 120) + 8) != v130)
                {
                  maybeCopyRenderingState(*(uint64_t *)v352);
                  *(double *)(*(_QWORD *)(v129 + 120) + 8) = v130;
                  v129 = *(_QWORD *)v352;
                }
                CGGStateSetTextDrawingMode(v129, *(_DWORD *)(v34 + 216));
                CGGStateSetFontRenderingStyle(*(uint64_t *)v352, *(_DWORD *)(v34 + 220));
                CGGStateSetFont(*(uint64_t *)v352, *(const void **)(*(_QWORD *)(v34 + 80) + 16));
                v131 = *(_QWORD *)v352;
                v132 = *(double *)(v34 + 184);
                if (*(double *)(*(_QWORD *)(*(_QWORD *)v352 + 136) + 16) != v132)
                {
                  maybe_copy_text_state(*(uint64_t *)v352);
                  *(double *)(*(_QWORD *)(v131 + 136) + 16) = v132;
                  v131 = *(_QWORD *)v352;
                }
                CGGStateSetFontDilation(v131, *(double *)(v34 + 192), *(double *)(v34 + 200));
                v133 = *(_QWORD *)(v34 + 208);
                if (v133)
                  CGGStateSetFontSmoothingBackgroundColor(*(uint64_t *)v352, *(const void **)(v133 + 16));
                CGGStateSetShouldDrawBitmapRuns(*(uint64_t *)v352, *(unsigned __int8 *)(v34 + 224));
                v27 = *(_QWORD *)(v34 + 232);
                v28 = *(_QWORD *)(v34 + 240);
                v134 = *(_OWORD *)(v34 + 152);
                *(_OWORD *)&v359.a = *(_OWORD *)(v34 + 136);
                *(_OWORD *)&v359.c = v134;
                *(_OWORD *)&v359.tx = *(_OWORD *)(v34 + 168);
                if (*(_QWORD *)v349)
                {
                  v135 = *(void (**)(void))(*(_QWORD *)v349 + 88);
                  if (v135)
                    goto LABEL_291;
                }
              }
            }
          }
          goto LABEL_33;
        case 2:
          if (!v34)
            goto LABEL_33;
          v136 = *(_QWORD *)v352;
          if (!*(_QWORD *)v352)
            goto LABEL_33;
          v137 = *(_OWORD *)(v34 + 32);
          *(_OWORD *)&v359.a = *(_OWORD *)(v34 + 16);
          *(_OWORD *)&v359.c = v137;
          if (CG::DisplayListExecutor::rejectRect((CG::DisplayListExecutor *)&v348, (const CGRect *)&v359))
            goto LABEL_33;
          v138 = *(_QWORD *)(v34 + 48);
          v139 = *(_OWORD *)(v34 + 112);
          *(_OWORD *)&v359.a = *(_OWORD *)(v34 + 96);
          *(_OWORD *)&v359.c = v139;
          *(_OWORD *)&v359.tx = *(_OWORD *)(v34 + 128);
          CG::DisplayListExecutor::applyEntryDrawingState((uint64_t)&v348, v138, (uint64_t)&v359, v136, v27, v28, v29, v30);
          v140 = *(_DWORD *)(v34 + 8);
          if ((v140 & 0x40000) != 0)
          {
            v141 = *(_QWORD *)(v34 + 72);
            v142 = *(_QWORD *)v352;
            v143 = *(double *)(v141 + 56);
            v144 = *(double *)(v141 + 64);
            v145 = *(_QWORD *)(*(_QWORD *)v352 + 120);
            if (*(double *)(v145 + 24) != v143 || *(double *)(v145 + 32) != v144)
            {
              maybeCopyRenderingState(*(uint64_t *)v352);
              v147 = *(_QWORD *)(v142 + 120);
              *(double *)(v147 + 24) = v143;
              *(double *)(v147 + 32) = v144;
            }
            v148 = *(double *)(v141 + 72);
            if (*(double *)(*(_QWORD *)(v142 + 144) + 16) != v148)
            {
              maybe_copy_device_state(v142);
              *(double *)(*(_QWORD *)(v142 + 144) + 16) = v148;
            }
            _D4 = *(double *)(v141 + 8);
            _D0 = *(double *)(v141 + 16);
            _D3 = *(double *)(v141 + 24);
            _D1 = *(double *)(v141 + 32);
            v153 = *(float64x2_t *)(v141 + 40);
            if (m)
            {
              _Q5 = *(_OWORD *)&m->a;
              v155 = *(float64x2_t *)&m->c;
              v156 = vmlad_n_f64(_D0 * v155.f64[0], _D4, m->a);
              __asm { FMLA            D0, D4, V5.D[1] }
              v157 = vmlad_n_f64(_D1 * v155.f64[0], _D3, m->a);
              __asm { FMLA            D1, D3, V5.D[1] }
              v153 = vaddq_f64(*(float64x2_t *)&m->tx, vmlaq_n_f64(vmulq_laneq_f64(v155, v153, 1), *(float64x2_t *)&m->a, v153.f64[0]));
              _D4 = v156;
              _D3 = v157;
            }
            v158 = *(_QWORD *)v350;
            *(double *)(*(_QWORD *)v350 + 24) = _D4;
            *(double *)(v158 + 32) = _D0;
            *(double *)(v158 + 40) = _D3;
            *(double *)(v158 + 48) = _D1;
            *(float64x2_t *)(v158 + 56) = v153;
            v140 = *(_DWORD *)(v34 + 8);
          }
          if ((v140 & 0x10000) != 0)
          {
            v159 = *(_QWORD *)(*(_QWORD *)(v34 + 56) + 8);
            if (v159)
            {
              CGGStateSetFillColor(*(uint64_t *)v352, *(void **)(v159 + 16));
              v140 = *(_DWORD *)(v34 + 8);
            }
          }
          if ((v140 & 0x20000) != 0)
            CG::DisplayListExecutor::applyEntryStrokeState(*(_QWORD *)(v34 + 64), *(uint64_t *)v352);
          CGGStateSetRenderingIntent(*(uint64_t *)v352, (int)(*(_DWORD *)(v138 + 96) << 18) >> 26);
          v160 = *(_QWORD *)v352;
          v161 = *(double *)(v138 + 56);
          if (*(double *)(*(_QWORD *)(*(_QWORD *)v352 + 120) + 8) != v161)
          {
            maybeCopyRenderingState(*(uint64_t *)v352);
            *(double *)(*(_QWORD *)(v160 + 120) + 8) = v161;
          }
          v162 = *(const CGPath **)(v34 + 88);
          if (!v162)
            goto LABEL_33;
          if (*(_BYTE *)(v34 + 84))
          {
            if (*(_QWORD *)v349 && !*(_QWORD *)(*(_QWORD *)v349 + 232)
              || (v163 = *(unsigned int *)(v34 + 80), (int)v163 > 1))
            {
              Copy = CGPathCreateMutable();
              CGPathAddPath(Copy, (const CGAffineTransform *)(*(_QWORD *)v352 + 24), v162);
              goto LABEL_268;
            }
            v164 = *(_OWORD *)(v34 + 32);
            *(_OWORD *)&v359.a = *(_OWORD *)(v34 + 16);
            *(_OWORD *)&v359.c = v164;
            CGContextDelegateDrawPathDirect(*(uint64_t *)v349, *(uint64_t *)v350, *(uint64_t *)v352, v163, v162, (uint64_t)&v359);
          }
          else
          {
            if (m)
            {
              Copy = CGPathCreateMutable();
              CGPathAddPath(Copy, m, v162);
LABEL_268:
              CGContextDelegateDrawPath(*(uint64_t *)v349, *(uint64_t *)v350, *(uint64_t *)v352, *(unsigned int *)(v34 + 80), Copy);
              if (Copy)
                goto LABEL_311;
              goto LABEL_33;
            }
            CGContextDelegateDrawPath(*(uint64_t *)v349, *(uint64_t *)v350, *(uint64_t *)v352, *(unsigned int *)(v34 + 80), v162);
          }
          goto LABEL_33;
        case 3:
          if (v34)
          {
            v165 = *(_QWORD *)v352;
            if (*(_QWORD *)v352)
            {
              v166 = *(_OWORD *)(v34 + 32);
              *(_OWORD *)&v359.a = *(_OWORD *)(v34 + 16);
              *(_OWORD *)&v359.c = v166;
              if (!CG::DisplayListExecutor::rejectRect((CG::DisplayListExecutor *)&v348, (const CGRect *)&v359))
              {
                v167 = *(_QWORD *)(v34 + 48);
                v168 = *(_OWORD *)(v34 + 104);
                *(_OWORD *)&v359.a = *(_OWORD *)(v34 + 88);
                *(_OWORD *)&v359.c = v168;
                *(_OWORD *)&v359.tx = *(_OWORD *)(v34 + 120);
                CG::DisplayListExecutor::applyEntryDrawingState((uint64_t)&v348, v167, (uint64_t)&v359, v165, v27, v28, v29, v30);
                v169 = *(_DWORD *)(v34 + 8);
                if ((v169 & 0x40000) != 0)
                {
                  v170 = *(_QWORD *)(v34 + 72);
                  v171 = *(_QWORD *)v352;
                  v172 = *(double *)(v170 + 56);
                  v173 = *(double *)(v170 + 64);
                  v174 = *(_QWORD *)(*(_QWORD *)v352 + 120);
                  if (*(double *)(v174 + 24) != v172 || *(double *)(v174 + 32) != v173)
                  {
                    maybeCopyRenderingState(*(uint64_t *)v352);
                    v176 = *(_QWORD *)(v171 + 120);
                    *(double *)(v176 + 24) = v172;
                    *(double *)(v176 + 32) = v173;
                  }
                  v177 = *(double *)(v170 + 72);
                  if (*(double *)(*(_QWORD *)(v171 + 144) + 16) != v177)
                  {
                    maybe_copy_device_state(v171);
                    *(double *)(*(_QWORD *)(v171 + 144) + 16) = v177;
                  }
                  _D4 = *(double *)(v170 + 8);
                  _D0 = *(double *)(v170 + 16);
                  _D3 = *(double *)(v170 + 24);
                  _D1 = *(double *)(v170 + 32);
                  v182 = *(float64x2_t *)(v170 + 40);
                  if (m)
                  {
                    _Q5 = *(_OWORD *)&m->a;
                    v184 = *(float64x2_t *)&m->c;
                    v185 = vmlad_n_f64(_D0 * v184.f64[0], _D4, m->a);
                    __asm { FMLA            D0, D4, V5.D[1] }
                    v186 = vmlad_n_f64(_D1 * v184.f64[0], _D3, m->a);
                    __asm { FMLA            D1, D3, V5.D[1] }
                    v182 = vaddq_f64(*(float64x2_t *)&m->tx, vmlaq_n_f64(vmulq_laneq_f64(v184, v182, 1), *(float64x2_t *)&m->a, v182.f64[0]));
                    _D4 = v185;
                    _D3 = v186;
                  }
                  v187 = *(_QWORD *)v350;
                  *(double *)(*(_QWORD *)v350 + 24) = _D4;
                  *(double *)(v187 + 32) = _D0;
                  *(double *)(v187 + 40) = _D3;
                  *(double *)(v187 + 48) = _D1;
                  *(float64x2_t *)(v187 + 56) = v182;
                  v169 = *(_DWORD *)(v34 + 8);
                }
                if ((v169 & 0x10000) != 0)
                {
                  v188 = *(_QWORD *)(*(_QWORD *)(v34 + 56) + 8);
                  if (v188)
                  {
                    CGGStateSetFillColor(*(uint64_t *)v352, *(void **)(v188 + 16));
                    v169 = *(_DWORD *)(v34 + 8);
                  }
                }
                if ((v169 & 0x20000) != 0)
                  CG::DisplayListExecutor::applyEntryStrokeState(*(_QWORD *)(v34 + 64), *(uint64_t *)v352);
                CGGStateSetRenderingIntent(*(uint64_t *)v352, (int)(*(_DWORD *)(v167 + 96) << 18) >> 26);
                v189 = *(_QWORD *)v352;
                v190 = *(double *)(v167 + 56);
                if (*(double *)(*(_QWORD *)(*(_QWORD *)v352 + 120) + 8) != v190)
                {
                  maybeCopyRenderingState(*(uint64_t *)v352);
                  *(double *)(*(_QWORD *)(v189 + 120) + 8) = v190;
                }
                if (*(_QWORD *)v349)
                {
                  v191 = *(const CGRect **)(v34 + 136);
                  v135 = *(void (**)(void))(*(_QWORD *)v349 + 64);
                  if (v135)
                    goto LABEL_291;
                  Mutable = CGPathCreateMutable();
                  Copy = Mutable;
                  v321 = *(_OWORD *)(v34 + 104);
                  *(_OWORD *)&v359.a = *(_OWORD *)(v34 + 88);
                  *(_OWORD *)&v359.c = v321;
                  *(_OWORD *)&v359.tx = *(_OWORD *)(v34 + 120);
                  v322 = m;
                  if (!m)
                  {
                    if (*(double *)(v34 + 88) == 1.0)
                    {
                      v323 = (uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)(v34 + 96)), (int32x4_t)vceqq_f64(*(float64x2_t *)(v34 + 112), (float64x2_t)xmmword_185004990))));
                      v323.i16[0] = vmaxv_u16(v323);
                      if (((*(double *)(v34 + 128) == 0.0) & ~v323.i32[0]) != 0)
                        v322 = 0;
                      else
                        v322 = &v359;
                    }
                    else
                    {
                      v322 = &v359;
                    }
                  }
                  CGPathAddRects(Mutable, v322, v191, *(_QWORD *)(v34 + 144));
                  CGContextDelegateDrawPath(*(uint64_t *)v349, *(uint64_t *)v350, *(uint64_t *)v352, *(unsigned int *)(v34 + 80), Copy);
                  if (Copy)
                    goto LABEL_311;
                }
              }
            }
          }
          goto LABEL_33;
        case 4:
          if (v34)
          {
            v192 = *(_QWORD *)v352;
            if (*(_QWORD *)v352)
            {
              v193 = *(_OWORD *)(v34 + 32);
              *(_OWORD *)&v359.a = *(_OWORD *)(v34 + 16);
              *(_OWORD *)&v359.c = v193;
              if (!CG::DisplayListExecutor::rejectRect((CG::DisplayListExecutor *)&v348, (const CGRect *)&v359))
              {
                v194 = *(_QWORD *)(v34 + 48);
                v195 = *(_OWORD *)(v34 + 96);
                *(_OWORD *)&v359.a = *(_OWORD *)(v34 + 80);
                *(_OWORD *)&v359.c = v195;
                *(_OWORD *)&v359.tx = *(_OWORD *)(v34 + 112);
                CG::DisplayListExecutor::applyEntryDrawingState((uint64_t)&v348, v194, (uint64_t)&v359, v192, v27, v28, v29, v30);
                v196 = *(_DWORD *)(v34 + 8);
                if ((v196 & 0x40000) != 0)
                {
                  v197 = *(_QWORD *)(v34 + 72);
                  v198 = *(_QWORD *)v352;
                  v199 = *(double *)(v197 + 56);
                  v200 = *(double *)(v197 + 64);
                  v201 = *(_QWORD *)(*(_QWORD *)v352 + 120);
                  if (*(double *)(v201 + 24) != v199 || *(double *)(v201 + 32) != v200)
                  {
                    maybeCopyRenderingState(*(uint64_t *)v352);
                    v203 = *(_QWORD *)(v198 + 120);
                    *(double *)(v203 + 24) = v199;
                    *(double *)(v203 + 32) = v200;
                  }
                  v204 = *(double *)(v197 + 72);
                  if (*(double *)(*(_QWORD *)(v198 + 144) + 16) != v204)
                  {
                    maybe_copy_device_state(v198);
                    *(double *)(*(_QWORD *)(v198 + 144) + 16) = v204;
                  }
                  _D4 = *(double *)(v197 + 8);
                  _D0 = *(double *)(v197 + 16);
                  _D3 = *(double *)(v197 + 24);
                  _D1 = *(double *)(v197 + 32);
                  v209 = *(float64x2_t *)(v197 + 40);
                  if (m)
                  {
                    _Q5 = *(_OWORD *)&m->a;
                    v211 = *(float64x2_t *)&m->c;
                    v212 = vmlad_n_f64(_D0 * v211.f64[0], _D4, m->a);
                    __asm { FMLA            D0, D4, V5.D[1] }
                    v213 = vmlad_n_f64(_D1 * v211.f64[0], _D3, m->a);
                    __asm { FMLA            D1, D3, V5.D[1] }
                    v209 = vaddq_f64(*(float64x2_t *)&m->tx, vmlaq_n_f64(vmulq_laneq_f64(v211, v209, 1), *(float64x2_t *)&m->a, v209.f64[0]));
                    _D4 = v212;
                    _D3 = v213;
                  }
                  v214 = *(_QWORD *)v350;
                  *(double *)(*(_QWORD *)v350 + 24) = _D4;
                  *(double *)(v214 + 32) = _D0;
                  *(double *)(v214 + 40) = _D3;
                  *(double *)(v214 + 48) = _D1;
                  *(float64x2_t *)(v214 + 56) = v209;
                  v196 = *(_DWORD *)(v34 + 8);
                }
                if ((v196 & 0x10000) != 0)
                {
                  v215 = *(_QWORD *)(*(_QWORD *)(v34 + 56) + 8);
                  if (v215)
                  {
                    CGGStateSetFillColor(*(uint64_t *)v352, *(void **)(v215 + 16));
                    v196 = *(_DWORD *)(v34 + 8);
                  }
                }
                if ((v196 & 0x20000) != 0)
                  CG::DisplayListExecutor::applyEntryStrokeState(*(_QWORD *)(v34 + 64), *(uint64_t *)v352);
                CGGStateSetRenderingIntent(*(uint64_t *)v352, (int)(*(_DWORD *)(v194 + 96) << 18) >> 26);
                v216 = *(_QWORD *)v352;
                v217 = *(double *)(v194 + 56);
                if (*(double *)(*(_QWORD *)(*(_QWORD *)v352 + 120) + 8) != v217)
                {
                  maybeCopyRenderingState(*(uint64_t *)v352);
                  *(double *)(*(_QWORD *)(v216 + 120) + 8) = v217;
                  v216 = *(_QWORD *)v352;
                }
                CGContextDelegateDrawLines(*(uint64_t *)v349, *(uint64_t *)v350, v216, *(const CGPoint **)(v34 + 128), *(_QWORD *)(v34 + 136));
              }
            }
          }
          goto LABEL_33;
        case 5:
          if (v34)
          {
            v218 = *(_QWORD *)v352;
            if (*(_QWORD *)v352)
            {
              v219 = *(_OWORD *)(v34 + 32);
              *(_OWORD *)&v359.a = *(_OWORD *)(v34 + 16);
              *(_OWORD *)&v359.c = v219;
              if (!CG::DisplayListExecutor::rejectRect((CG::DisplayListExecutor *)&v348, (const CGRect *)&v359))
              {
                v220 = *(_QWORD *)(v34 + 48);
                v221 = *(_OWORD *)(v34 + 104);
                *(_OWORD *)&v359.a = *(_OWORD *)(v34 + 88);
                *(_OWORD *)&v359.c = v221;
                *(_OWORD *)&v359.tx = *(_OWORD *)(v34 + 120);
                CG::DisplayListExecutor::applyEntryDrawingState((uint64_t)&v348, v220, (uint64_t)&v359, v218, v27, v28, v29, v30);
                if ((*(_BYTE *)(v34 + 10) & 4) != 0)
                {
                  v222 = *(_QWORD *)(v34 + 72);
                  v223 = *(_QWORD *)v352;
                  v224 = *(double *)(v222 + 56);
                  v225 = *(double *)(v222 + 64);
                  v226 = *(_QWORD *)(*(_QWORD *)v352 + 120);
                  if (*(double *)(v226 + 24) != v224 || *(double *)(v226 + 32) != v225)
                  {
                    maybeCopyRenderingState(*(uint64_t *)v352);
                    v228 = *(_QWORD *)(v223 + 120);
                    *(double *)(v228 + 24) = v224;
                    *(double *)(v228 + 32) = v225;
                  }
                  v229 = *(double *)(v222 + 72);
                  if (*(double *)(*(_QWORD *)(v223 + 144) + 16) != v229)
                  {
                    maybe_copy_device_state(v223);
                    *(double *)(*(_QWORD *)(v223 + 144) + 16) = v229;
                  }
                  _D4 = *(double *)(v222 + 8);
                  _D0 = *(double *)(v222 + 16);
                  _D3 = *(double *)(v222 + 24);
                  _D1 = *(double *)(v222 + 32);
                  v234 = *(float64x2_t *)(v222 + 40);
                  if (m)
                  {
                    _Q5 = *(_OWORD *)&m->a;
                    v236 = *(float64x2_t *)&m->c;
                    v237 = vmlad_n_f64(_D0 * v236.f64[0], _D4, m->a);
                    __asm { FMLA            D0, D4, V5.D[1] }
                    v238 = vmlad_n_f64(_D1 * v236.f64[0], _D3, m->a);
                    __asm { FMLA            D1, D3, V5.D[1] }
                    v234 = vaddq_f64(*(float64x2_t *)&m->tx, vmlaq_n_f64(vmulq_laneq_f64(v236, v234, 1), *(float64x2_t *)&m->a, v234.f64[0]));
                    _D4 = v237;
                    _D3 = v238;
                  }
                  v239 = *(_QWORD *)v350;
                  *(double *)(*(_QWORD *)v350 + 24) = _D4;
                  *(double *)(v239 + 32) = _D0;
                  *(double *)(v239 + 40) = _D3;
                  *(double *)(v239 + 48) = _D1;
                  *(float64x2_t *)(v239 + 56) = v234;
                }
                CGGStateSetInterpolationQuality(*(uint64_t *)v352, *(_DWORD *)(v34 + 136));
                CGGStateSetRenderingIntent(*(uint64_t *)v352, *(_DWORD *)(v34 + 140));
                CGGStateSetRenderingIntent(*(uint64_t *)v352, (int)(*(_DWORD *)(v220 + 96) << 18) >> 26);
                v240 = *(_QWORD *)v352;
                v241 = *(double *)(v220 + 56);
                if (*(double *)(*(_QWORD *)(*(_QWORD *)v352 + 120) + 8) != v241)
                {
                  maybeCopyRenderingState(*(uint64_t *)v352);
                  *(double *)(*(_QWORD *)(v240 + 120) + 8) = v241;
                }
                v242 = *(_QWORD *)(v34 + 80);
                if (v242)
                {
                  v26 = *(_QWORD *)(v242 + 24);
                  if (v26 || (v26 = *(_QWORD *)(v242 + 16)) != 0)
                  {
                    if (*(_QWORD *)v349)
                    {
                      v135 = *(void (**)(void))(*(_QWORD *)v349 + 96);
                      if (v135)
LABEL_291:
                        v135();
                    }
                  }
                }
              }
            }
          }
          goto LABEL_33;
        case 6:
          if (!v34)
            goto LABEL_33;
          v243 = *(_QWORD *)v352;
          if (!*(_QWORD *)v352)
            goto LABEL_33;
          v244 = *(_OWORD *)(v34 + 32);
          *(_OWORD *)&v359.a = *(_OWORD *)(v34 + 16);
          *(_OWORD *)&v359.c = v244;
          if (CG::DisplayListExecutor::rejectRect((CG::DisplayListExecutor *)&v348, (const CGRect *)&v359))
            goto LABEL_33;
          v245 = *(_QWORD *)(v34 + 48);
          v246 = *(_OWORD *)(v34 + 104);
          *(_OWORD *)&v359.a = *(_OWORD *)(v34 + 88);
          *(_OWORD *)&v359.c = v246;
          *(_OWORD *)&v359.tx = *(_OWORD *)(v34 + 120);
          CG::DisplayListExecutor::applyEntryDrawingState((uint64_t)&v348, v245, (uint64_t)&v359, v243, v27, v28, v29, v30);
          if ((*(_BYTE *)(v34 + 10) & 4) != 0)
          {
            v247 = *(_QWORD *)(v34 + 72);
            v248 = *(_QWORD *)v352;
            v249 = *(double *)(v247 + 56);
            v250 = *(double *)(v247 + 64);
            v251 = *(_QWORD *)(*(_QWORD *)v352 + 120);
            if (*(double *)(v251 + 24) != v249 || *(double *)(v251 + 32) != v250)
            {
              maybeCopyRenderingState(*(uint64_t *)v352);
              v253 = *(_QWORD *)(v248 + 120);
              *(double *)(v253 + 24) = v249;
              *(double *)(v253 + 32) = v250;
            }
            v254 = *(double *)(v247 + 72);
            if (*(double *)(*(_QWORD *)(v248 + 144) + 16) != v254)
            {
              maybe_copy_device_state(v248);
              *(double *)(*(_QWORD *)(v248 + 144) + 16) = v254;
            }
            _D4 = *(double *)(v247 + 8);
            _D0 = *(double *)(v247 + 16);
            _D3 = *(double *)(v247 + 24);
            _D1 = *(double *)(v247 + 32);
            v259 = *(float64x2_t *)(v247 + 40);
            if (m)
            {
              _Q5 = *(_OWORD *)&m->a;
              v261 = *(float64x2_t *)&m->c;
              v262 = vmlad_n_f64(_D0 * v261.f64[0], _D4, m->a);
              __asm { FMLA            D0, D4, V5.D[1] }
              v263 = vmlad_n_f64(_D1 * v261.f64[0], _D3, m->a);
              __asm { FMLA            D1, D3, V5.D[1] }
              v259 = vaddq_f64(*(float64x2_t *)&m->tx, vmlaq_n_f64(vmulq_laneq_f64(v261, v259, 1), *(float64x2_t *)&m->a, v259.f64[0]));
              _D4 = v262;
              _D3 = v263;
            }
            v264 = *(_QWORD *)v350;
            *(double *)(*(_QWORD *)v350 + 24) = _D4;
            *(double *)(v264 + 32) = _D0;
            *(double *)(v264 + 40) = _D3;
            *(double *)(v264 + 48) = _D1;
            *(float64x2_t *)(v264 + 56) = v259;
          }
          CGGStateSetRenderingIntent(*(uint64_t *)v352, (int)(*(_DWORD *)(v245 + 96) << 18) >> 26);
          v265 = *(_QWORD *)v352;
          v266 = *(double *)(v245 + 56);
          if (*(double *)(*(_QWORD *)(*(_QWORD *)v352 + 120) + 8) != v266)
          {
            maybeCopyRenderingState(*(uint64_t *)v352);
            *(double *)(*(_QWORD *)(v265 + 120) + 8) = v266;
          }
          v267 = *(_QWORD *)(v34 + 80);
          if (!v267)
            goto LABEL_33;
          v268 = *(_QWORD *)(v267 + 16);
          if (!v268)
            goto LABEL_33;
          v269 = *(_DWORD *)(v34 + 136);
          switch(v269)
          {
            case 3:
              if (*(_QWORD *)v349)
              {
                v325 = *(unsigned int (**)(double, double, double))(*(_QWORD *)v349 + 120);
                if (!v325 || v325(*(double *)(v34 + 224), *(double *)(v34 + 232), *(double *)(v34 + 240)) == 1006)
                {
                  v326 = *(_QWORD **)(v268 + 24);
                  Function = CGGradientGetFunction(v268, v24, v25, v26, v27, v28, v29, v30);
                  Conic = CGShadingCreateConic(v326, Function, *(double *)(v34 + 224), *(double *)(v34 + 232), *(double *)(v34 + 240), v328, v329, v330, v331, v332, v333);
                  goto LABEL_301;
                }
              }
              break;
            case 2:
              if (*(_QWORD *)v349)
              {
                v335 = *(unsigned int (**)(double, double, double, double, double, double))(*(_QWORD *)v349 + 112);
                if (!v335
                  || v335(*(double *)(v34 + 176), *(double *)(v34 + 184), *(double *)(v34 + 208), *(double *)(v34 + 192), *(double *)(v34 + 200), *(double *)(v34 + 216)) == 1006)
                {
                  v336 = *(_QWORD **)(v268 + 24);
                  v337 = CGGradientGetFunction(v268, v24, v25, v26, v27, v28, v29, v30);
                  if (v337)
                    v339 = (double *)*((_QWORD *)v337 + 5);
                  else
                    v339 = 0;
                  Conic = CGShadingCreateRadialInternal(v336, 0, 0, v339, v337, *(_DWORD *)(v34 + 140) & 1, (*(_DWORD *)(v34 + 140) >> 1) & 1, v338, *(double *)(v34 + 176), *(double *)(v34 + 184), *(double *)(v34 + 208), *(double *)(v34 + 192), *(double *)(v34 + 200), *(double *)(v34 + 216));
LABEL_301:
                  Copy = (CGImageRef)Conic;
                  if (Conic)
                  {
                    if (*(_QWORD *)v349)
                    {
                      v340 = *(void (**)(void))(*(_QWORD *)v349 + 96);
                      if (v340)
                        v340();
                    }
LABEL_311:
                    CFRelease(Copy);
                  }
                  goto LABEL_33;
                }
              }
              break;
            case 1:
              if (*(_QWORD *)v349)
              {
                v270 = *(unsigned int (**)(double, double, double, double))(*(_QWORD *)v349 + 104);
                if (!v270
                  || v270(*(double *)(v34 + 144), *(double *)(v34 + 152), *(double *)(v34 + 160), *(double *)(v34 + 168)) == 1006)
                {
                  v271 = *(_QWORD **)(v268 + 24);
                  v272 = CGGradientGetFunction(v268, v24, v25, v26, v27, v28, v29, v30);
                  if (v272)
                    v274 = (double *)*((_QWORD *)v272 + 5);
                  else
                    v274 = 0;
                  Conic = CGShadingCreateAxialInternal(v271, 0, 0, v274, v272, *(_DWORD *)(v34 + 140) & 1, (*(_DWORD *)(v34 + 140) >> 1) & 1, v273, *(double *)(v34 + 144), *(double *)(v34 + 152), *(double *)(v34 + 160), *(double *)(v34 + 168));
                  goto LABEL_301;
                }
              }
              break;
          }
          goto LABEL_33;
        case 7:
          if (v34)
          {
            v275 = *(_QWORD *)v352;
            if (*(_QWORD *)v352)
            {
              v276 = *(_OWORD *)(v34 + 32);
              *(_OWORD *)&v359.a = *(_OWORD *)(v34 + 16);
              *(_OWORD *)&v359.c = v276;
              if (!CG::DisplayListExecutor::rejectRect((CG::DisplayListExecutor *)&v348, (const CGRect *)&v359))
              {
                v277 = *(_QWORD *)(v34 + 48);
                v278 = *(_OWORD *)(v34 + 104);
                *(_OWORD *)&v359.a = *(_OWORD *)(v34 + 88);
                *(_OWORD *)&v359.c = v278;
                *(_OWORD *)&v359.tx = *(_OWORD *)(v34 + 120);
                CG::DisplayListExecutor::applyEntryDrawingState((uint64_t)&v348, v277, (uint64_t)&v359, v275, v27, v28, v29, v30);
                if ((*(_BYTE *)(v34 + 10) & 4) != 0)
                {
                  v279 = *(_QWORD *)(v34 + 72);
                  v280 = *(_QWORD *)v352;
                  v281 = *(double *)(v279 + 56);
                  v282 = *(double *)(v279 + 64);
                  v283 = *(_QWORD *)(*(_QWORD *)v352 + 120);
                  if (*(double *)(v283 + 24) != v281 || *(double *)(v283 + 32) != v282)
                  {
                    maybeCopyRenderingState(*(uint64_t *)v352);
                    v285 = *(_QWORD *)(v280 + 120);
                    *(double *)(v285 + 24) = v281;
                    *(double *)(v285 + 32) = v282;
                  }
                  v286 = *(double *)(v279 + 72);
                  if (*(double *)(*(_QWORD *)(v280 + 144) + 16) != v286)
                  {
                    maybe_copy_device_state(v280);
                    *(double *)(*(_QWORD *)(v280 + 144) + 16) = v286;
                  }
                  _D4 = *(double *)(v279 + 8);
                  _D0 = *(double *)(v279 + 16);
                  _D3 = *(double *)(v279 + 24);
                  _D1 = *(double *)(v279 + 32);
                  v291 = *(float64x2_t *)(v279 + 40);
                  if (m)
                  {
                    _Q5 = *(_OWORD *)&m->a;
                    v293 = *(float64x2_t *)&m->c;
                    v294 = vmlad_n_f64(_D0 * v293.f64[0], _D4, m->a);
                    __asm { FMLA            D0, D4, V5.D[1] }
                    v295 = vmlad_n_f64(_D1 * v293.f64[0], _D3, m->a);
                    __asm { FMLA            D1, D3, V5.D[1] }
                    v291 = vaddq_f64(*(float64x2_t *)&m->tx, vmlaq_n_f64(vmulq_laneq_f64(v293, v291, 1), *(float64x2_t *)&m->a, v291.f64[0]));
                    _D4 = v294;
                    _D3 = v295;
                  }
                  v296 = *(_QWORD *)v350;
                  *(double *)(*(_QWORD *)v350 + 24) = _D4;
                  *(double *)(v296 + 32) = _D0;
                  *(double *)(v296 + 40) = _D3;
                  *(double *)(v296 + 48) = _D1;
                  *(float64x2_t *)(v296 + 56) = v291;
                }
                CGGStateSetInterpolationQuality(*(uint64_t *)v352, *(_DWORD *)(v34 + 136));
                CGGStateSetRenderingIntent(*(uint64_t *)v352, *(_DWORD *)(v34 + 140));
                CGGStateSetRenderingIntent(*(uint64_t *)v352, (int)(*(_DWORD *)(v277 + 96) << 18) >> 26);
                v304 = *(_QWORD *)v352;
                v305 = *(double *)(v277 + 56);
                if (*(double *)(*(_QWORD *)(*(_QWORD *)v352 + 120) + 8) != v305)
                {
                  maybeCopyRenderingState(*(uint64_t *)v352);
                  *(double *)(*(_QWORD *)(v304 + 120) + 8) = v305;
                }
                v306 = *(_QWORD *)(v34 + 80);
                if (v306)
                  CGDisplayListDelegateDrawDisplayList(*(_QWORD **)v349, *(uint64_t *)v350, *(uint64_t *)v352, *(_QWORD *)(v306 + 16), v300, v301, v302, v303);
                else
                  CGPostError((uint64_t)"entry has NULL display list resource", v297, v298, v299, v300, v301, v302, v303, v346);
              }
            }
          }
          goto LABEL_33;
        case 8:
          if (!v34)
            goto LABEL_33;
          v307 = *(_QWORD *)v352;
          if (!*(_QWORD *)v352)
            goto LABEL_33;
          break;
        default:
          goto LABEL_33;
      }
      switch((v35 >> 8) & 0xF)
      {
        case 1u:
          if (*(_QWORD *)v349)
          {
            v135 = *(void (**)(void))(*(_QWORD *)v349 + 168);
            if (v135)
              goto LABEL_291;
          }
          goto LABEL_33;
        case 2u:
          if (*(_QWORD *)v349)
          {
            v135 = *(void (**)(void))(*(_QWORD *)v349 + 168);
            if (v135)
              goto LABEL_291;
          }
          goto LABEL_33;
        case 5u:
          v308 = *(_QWORD *)v349;
          if (*(_QWORD *)v349 && !*(_QWORD *)(*(_QWORD *)v349 + 168))
            goto LABEL_33;
          v309 = *(const void **)(v34 + 80);
          if (v309)
          {
            if (!v310)
            {
              CGPostError((uint64_t)"%s: Unexpected action resource type", v24, v25, v311, v312, v28, v29, v30, (char)"void CG::DisplayListExecutor::handleAction(const DisplayListEntryAction *)");
              goto LABEL_33;
            }
            v26 = v310[2];
          }
          else
          {
            v26 = 0;
          }
          v324 = *(_QWORD *)(v34 + 88);
          if (v324)
          {
            v27 = *(_QWORD *)(v324 + 16);
            if (v308)
              goto LABEL_290;
          }
          else
          {
            v27 = 0;
            if (v308)
            {
LABEL_290:
              v135 = *(void (**)(void))(v308 + 168);
              if (v135)
                goto LABEL_291;
            }
          }
LABEL_33:
          a2 += 2;
          if (a2 == a3)
          {
            v31 = *(_QWORD *)v350;
            goto LABEL_318;
          }
          break;
        case 6u:
          v313 = *(const void **)(v34 + 80);
          if (!v313)
            goto LABEL_33;
          if (!v314)
            goto LABEL_33;
          v315 = v314[2];
          if (!v315)
            goto LABEL_33;
          v316 = *(_QWORD *)(v34 + 88);
          if (!v316)
            goto LABEL_33;
          v317 = *(const __CFDictionary **)(v316 + 16);
          if (!v317)
            goto LABEL_33;
          v24 = *(_QWORD *)v349;
          if (!*(_QWORD *)v349)
            goto LABEL_33;
          v318 = v350[0];
          v319 = *(unsigned int (**)(_QWORD, _QWORD, uint64_t, const __CFString *, const __CFDictionary *))(*(_QWORD *)v349 + 168);
          if (!v319)
            goto LABEL_263;
          if (v319(*(_QWORD *)v349, *(_QWORD *)v350, v307, CFSTR("kCGContextDisplayList"), v317) == 1006)
          {
            LODWORD(v24) = v349[0];
            v318 = v350[0];
LABEL_263:
            CG::DisplayList::execute(v315 + 16, v24, v318, v351[0], 0, v317);
          }
          goto LABEL_33;
        default:
          goto LABEL_33;
      }
    }
  }
LABEL_318:
  v342 = *(_OWORD *)&v358.a;
  v343 = *(_OWORD *)&v358.c;
  *(_OWORD *)(v31 + 56) = *(_OWORD *)&v358.tx;
  *(_OWORD *)(v31 + 40) = v343;
  *(_OWORD *)(v31 + 24) = v342;
  return CGGStackRestore(*(uint64_t **)v351, v24, v25, v26, v27, v28, v29, v30);
}

void sub_1849E8450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14)
{
  _OWORD *v14;
  __int128 v16;
  __int128 v17;

  v17 = v14[1];
  v16 = v14[2];
  *(_OWORD *)(a13 + 24) = *v14;
  *(_OWORD *)(a13 + 40) = v17;
  *(_OWORD *)(a13 + 56) = v16;
  CGGStackRestore(a14, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void CGGStateSetFont(uint64_t a1, const void *a2)
{
  const void *v4;

  if (*(const void **)(*(_QWORD *)(a1 + 136) + 8) != a2)
  {
    maybe_copy_text_state(a1);
    v4 = *(const void **)(*(_QWORD *)(a1 + 136) + 8);
    if (v4)
      CFRelease(v4);
    if (a2)
      CFRetain(a2);
    *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) = a2;
  }
}

void maybe_copy_text_state(uint64_t a1)
{
  unsigned __int16 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;

  if ((*(_BYTE *)(a1 + 20) & 8) != 0)
  {
    v2 = *(unsigned __int16 **)(a1 + 136);
    v10 = (unsigned __int16 *)malloc_type_malloc(0x60uLL, 0x2062DE7BuLL);
    v11 = *v10 & 0xFFFE;
    *v10 = v11;
    *((_DWORD *)v10 + 1) = 1;
    v12 = *((_QWORD *)v2 + 1);
    if (v12)
    {
      CFRetain(*((CFTypeRef *)v2 + 1));
      LOBYTE(v11) = *(_BYTE *)v10;
    }
    *((_QWORD *)v10 + 1) = v12;
    *((_OWORD *)v10 + 1) = *((_OWORD *)v2 + 1);
    v13 = v11 | (*((unsigned __int8 *)v2 + 1) << 8);
    *v10 = v13;
    *((_QWORD *)v10 + 4) = *((_QWORD *)v2 + 4);
    v14 = *v2 & 2 | v13 & 0xFFFFFFFD;
    *v10 = v14;
    *((_DWORD *)v10 + 14) = *((_DWORD *)v2 + 14);
    v15 = *((_QWORD *)v2 + 6);
    *((_QWORD *)v10 + 5) = *((_QWORD *)v2 + 5);
    *((_QWORD *)v10 + 6) = v15;
    v16 = *((_QWORD *)v2 + 8);
    if (v16)
    {
      CFRetain(*((CFTypeRef *)v2 + 8));
      v14 = *v10;
    }
    *((_QWORD *)v10 + 8) = v16;
    *(_OWORD *)(v10 + 36) = *(_OWORD *)(v2 + 36);
    *((_QWORD *)v10 + 11) = *((_QWORD *)v2 + 11);
    v17 = v14 & 0xFFFFFFFB | (4 * ((*v2 >> 2) & 1));
    *v10 = v17;
    v18 = v17 & 0xFFFFFFF7 | (8 * ((*v2 >> 3) & 1));
    *v10 = v18;
    v19 = v18 & 0xFFFFFFEF | (16 * ((*v2 >> 4) & 1));
    *v10 = v19;
    v20 = v19 & 0xFFFFFFDF | (32 * ((*v2 >> 5) & 1));
    *v10 = v20;
    v21 = v20 & 0xFFFFFFBF | (((*v2 >> 6) & 1) << 6);
    *v10 = v21;
    *v10 = v21 & 0xFF7F | *v2 & 0x80;
    *(_QWORD *)(a1 + 136) = v10;
    text_state_release(v2, v3, v4, v5, v6, v7, v8, v9);
    *(_BYTE *)(a1 + 20) &= ~8u;
  }
}

void CGGStateSetFontRenderingStyle(uint64_t a1, unsigned int a2)
{
  unsigned int v4;
  int v5;

  CGGStateSetShouldAntialiasFonts(a1, a2 & 1);
  CGGStateSetShouldSmoothFonts(a1, (a2 >> 1) & 1);
  CGGStateSetShouldSubpixelPositionFonts(a1, (a2 >> 2) & 1);
  CGGStateSetShouldSubpixelQuantizeFonts(a1, (a2 >> 3) & 1);
  CGGStateSetShouldUsePlatformNativeGlyphs(a1, (a2 >> 9) & 1);
  v4 = a2 & 0xD80;
  if (v4 >> 7 <= 9 && ((1 << (v4 >> 7)) & 0x30F) != 0 && *(_DWORD *)(*(_QWORD *)(a1 + 136) + 48) != v4)
  {
    maybe_copy_text_state(a1);
    *(_DWORD *)(*(_QWORD *)(a1 + 136) + 48) = v4;
  }
  v5 = a2 & 0x70;
  if ((v5 - 16) <= 0x6F && *(_DWORD *)(*(_QWORD *)(a1 + 136) + 52) != v5)
  {
    maybe_copy_text_state(a1);
    *(_DWORD *)(*(_QWORD *)(a1 + 136) + 52) = v5;
  }
}

void CGPathAddPath(CGMutablePathRef path1, const CGAffineTransform *m, CGPathRef path2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeID v11;
  CFTypeID TypeID;
  CFTypeID v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (path1)
  {
    if (CGPathDisableTypeValidation)
    {
      if (!path2)
        return;
      goto LABEL_9;
    }
    v11 = CFGetTypeID(path1);
    TypeID = CGPathGetTypeID();
    if (path2)
    {
      if (v11 == TypeID)
      {
        if (CGPathDisableTypeValidation || (v13 = CFGetTypeID(path2), v13 == CGPathGetTypeID()))
        {
LABEL_9:
          {
            CG::Path::append((CGMutablePathRef)((char *)path1 + 16), (CGPathRef)((char *)path2 + 16), m, v14, v15, v16, v17, v18);
          }
        }
      }
    }
  }
}

void CG::Path::append(CG::Path *this, const CG::Path *a2, const CGAffineTransform *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t *v33;
  float64x2_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  CFTypeRef v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  size_t v50;
  void *v51;

  v11 = *(_DWORD *)a2;
  if (*(_DWORD *)this)
  {
    if (v11)
    {
      if (*(_DWORD *)this != 9)
      {
        CG::Path::convert_to_huge_(this);
        v11 = *(_DWORD *)a2;
      }
      v12 = *((_QWORD *)this + 1);
      switch(v11)
      {
        case 1:
          CG::Path::append_rect(this, &unit_rect, (float64x2_t *)((char *)a2 + 8));
          break;
        case 2:
          CG::Path::append_rounded_rect(this, &unit_rect, *(CGSize *)((char *)a2 + 56), (const CGAffineTransform *)((char *)a2 + 8));
          break;
        case 3:
          CG::Path::append_uneven_rounded_rect(this, &unit_rect, (const CGSize *)((char *)a2 + 56), (float64x2_t *)((char *)a2 + 8));
          break;
        case 4:
          CG::Path::append_ellipse(this, &unit_rect, *((unsigned __int8 *)a2 + 57), *((unsigned __int8 *)a2 + 56), (const CGAffineTransform *)((char *)a2 + 8));
          break;
        case 5:
          CG::Path::append_line_segment(this, (__n128 *)((char *)a2 + 8), (float64x2_t *)((char *)a2 + 24), 0);
          break;
        case 6:
          CG::Path::add_arc_relative(this, (float64x2_t *)&CGPointZero, 1.0, 0.0, *((double *)a2 + 7), (float64x2_t *)((char *)a2 + 8), 1);
          break;
        case 7:
          CG::Path::append_region(this, *((uint64_t **)this + 1), 0, a4, a5, a6, a7, a8);
          break;
        case 8:
          CG::Path::append_tiny(this, (const CGPoint *)a2 + 1, *((unsigned __int16 *)a2 + 4), *((_DWORD *)a2 + 3), *((unsigned __int16 *)a2 + 5));
          break;
        case 9:
          CG::Path::reserve_space(this, *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2));
          memcpy((void *)(*((_QWORD *)this + 4) + 16 * *((_QWORD *)this + 1)), *((const void **)a2 + 4), 16 * *((_QWORD *)a2 + 1));
          memcpy((void *)(*((_QWORD *)this + 4) + *((_QWORD *)this + 3) - *((_QWORD *)this + 2) - *((_QWORD *)a2 + 2)), (const void *)(*((_QWORD *)a2 + 4) + *((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)), *((_QWORD *)a2 + 2));
          v16 = *((_QWORD *)this + 2);
          *((_QWORD *)this + 1) += *((_QWORD *)a2 + 1);
          *((_QWORD *)this + 2) = v16 + *((_QWORD *)a2 + 2);
          break;
        default:
          break;
      }
      v17 = *((_QWORD *)this + 1);
      if (!a3)
        goto LABEL_24;
      if (v12 < v17)
      {
        v18 = 16 * v12;
        do
        {
          *(float64x2_t *)(*((_QWORD *)this + 4) + v18) = vaddq_f64(*(float64x2_t *)&a3->tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&a3->c, *(double *)(*((_QWORD *)this + 4) + v18 + 8)), *(float64x2_t *)&a3->a, *(double *)(*((_QWORD *)this + 4) + v18)));
          ++v12;
          v17 = *((_QWORD *)this + 1);
          v18 += 16;
        }
        while (v12 < v17);
      }
      if (a3->a != 1.0
        || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)&a3->b), (int32x4_t)vceqq_f64(*(float64x2_t *)&a3->d, (float64x2_t)xmmword_185004990))))) & 1) != 0|| a3->ty != 0.0)
      {
        v31 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
        *(float64x2_t *)((char *)this + 40) = v31;
        v32 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
        *(float64x2_t *)((char *)this + 56) = v32;
        if (v17)
        {
          v33 = (float64x2_t *)*((_QWORD *)this + 4);
          do
          {
            v34 = *v33++;
            v31 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v31, v34), (int8x16_t)v34, (int8x16_t)v31);
            *(float64x2_t *)((char *)this + 40) = v31;
            v32 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v34, v32), (int8x16_t)v34, (int8x16_t)v32);
            *(float64x2_t *)((char *)this + 56) = v32;
            --v17;
          }
          while (v17);
        }
      }
      else
      {
LABEL_24:
        if (v17)
        {
          v19 = CG::Path::path_bounding_box(a2, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v23 = *((double *)this + 5);
          v24 = *((double *)this + 6);
          if (v19 < v23)
            v23 = v19;
          if (v20 < v24)
            v24 = v20;
          v25 = *((double *)this + 7);
          v26 = *((double *)this + 8);
          if (v25 < v19)
            v25 = v19;
          if (v26 < v20)
            v26 = v20;
          v27 = v19 + v21;
          v28 = v20 + v22;
          if (v27 >= v23)
            v29 = v23;
          else
            v29 = v27;
          if (v28 >= v24)
            v30 = v24;
          else
            v30 = v28;
          *((double *)this + 5) = v29;
          *((double *)this + 6) = v30;
          if (v25 >= v27)
            v27 = v25;
          if (v26 >= v28)
            v28 = v26;
          *((double *)this + 7) = v27;
          *((double *)this + 8) = v28;
        }
        else
        {
          *(int64x2_t *)((char *)this + 40) = vdupq_n_s64(0x7FF0000000000000uLL);
          *(int64x2_t *)((char *)this + 56) = vdupq_n_s64(0xFFF0000000000000);
        }
      }
    }
  }
  else
  {
    *(_DWORD *)this = v11;
    switch(v11)
    {
      case 1:
        v13 = *(_OWORD *)((char *)a2 + 8);
        v14 = *(_OWORD *)((char *)a2 + 24);
        v15 = *(_OWORD *)((char *)a2 + 40);
        goto LABEL_52;
      case 2:
        v13 = *(_OWORD *)((char *)a2 + 8);
        v14 = *(_OWORD *)((char *)a2 + 24);
        v15 = *(_OWORD *)((char *)a2 + 40);
        *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 56);
        goto LABEL_52;
      case 3:
        v35 = *(_OWORD *)((char *)a2 + 8);
        v36 = *(_OWORD *)((char *)a2 + 24);
        *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 40);
        *(_OWORD *)((char *)this + 24) = v36;
        *(_OWORD *)((char *)this + 8) = v35;
        v37 = *(_OWORD *)((char *)a2 + 56);
        v38 = *(_OWORD *)((char *)a2 + 72);
        v39 = *(_OWORD *)((char *)a2 + 88);
        *(_OWORD *)((char *)this + 104) = *(_OWORD *)((char *)a2 + 104);
        *(_OWORD *)((char *)this + 88) = v39;
        *(_OWORD *)((char *)this + 72) = v38;
        goto LABEL_61;
      case 4:
        v13 = *(_OWORD *)((char *)a2 + 8);
        v14 = *(_OWORD *)((char *)a2 + 24);
        v15 = *(_OWORD *)((char *)a2 + 40);
        *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
LABEL_52:
        *(_OWORD *)((char *)this + 40) = v15;
        goto LABEL_55;
      case 5:
        goto LABEL_54;
      case 6:
        *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
        v40 = *(_OWORD *)((char *)a2 + 24);
        v41 = *(_OWORD *)((char *)a2 + 40);
        v42 = *(_OWORD *)((char *)a2 + 56);
        *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
        *(_OWORD *)((char *)this + 56) = v42;
        *(_OWORD *)((char *)this + 40) = v41;
        *(_OWORD *)((char *)this + 24) = v40;
LABEL_54:
        v13 = *(_OWORD *)((char *)a2 + 8);
        v14 = *(_OWORD *)((char *)a2 + 24);
LABEL_55:
        *(_OWORD *)((char *)this + 24) = v14;
        *(_OWORD *)((char *)this + 8) = v13;
        break;
      case 7:
        v43 = (CFTypeRef)*((_QWORD *)a2 + 1);
        if (v43)
          v43 = CFRetain(v43);
        *((_QWORD *)this + 1) = v43;
        break;
      case 8:
        v44 = *(_OWORD *)((char *)a2 + 8);
        v45 = *(_OWORD *)((char *)a2 + 24);
        v46 = *(_OWORD *)((char *)a2 + 40);
        *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 56);
        *(_OWORD *)((char *)this + 40) = v46;
        *(_OWORD *)((char *)this + 24) = v45;
        *(_OWORD *)((char *)this + 8) = v44;
        v47 = *(_OWORD *)((char *)a2 + 72);
        v48 = *(_OWORD *)((char *)a2 + 88);
        v49 = *(_OWORD *)((char *)a2 + 104);
        *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
        *(_OWORD *)((char *)this + 104) = v49;
        *(_OWORD *)((char *)this + 88) = v48;
        *(_OWORD *)((char *)this + 72) = v47;
        break;
      case 9:
        *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
        *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
        v50 = *((_QWORD *)a2 + 3);
        *((_QWORD *)this + 3) = v50;
        *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
        v51 = malloc_type_malloc(v50, 0x875A8E18uLL);
        *((_QWORD *)this + 4) = v51;
        memcpy(v51, *((const void **)a2 + 4), 16 * *((_QWORD *)this + 1));
        memcpy((void *)(*((_QWORD *)this + 4) + *((_QWORD *)this + 3) - *((_QWORD *)this + 2)), (const void *)(*((_QWORD *)a2 + 4) + *((_QWORD *)this + 3) - *((_QWORD *)this + 2)), *((_QWORD *)this + 2));
        *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 40);
        v37 = *(_OWORD *)((char *)a2 + 56);
LABEL_61:
        *(_OWORD *)((char *)this + 56) = v37;
        break;
      default:
        break;
    }
    if (a3)
      CG::Path::apply_transform(this, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
}

void CG::DisplayListExecutor::applyEntryDrawingState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  float64x2_t *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  unint64_t v23;
  CGFloat x;
  CGFloat v25;
  CGFloat v26;
  CGFloat width;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  const CGRect *v37;
  CGFloat *p_y;
  CGSize *p_size;
  const CGRect *v40;
  CGFloat *v41;
  CGSize *v42;
  CGFloat *p_height;
  char *v44;
  _QWORD *v48;
  void **v49;
  unsigned __int8 *v50;
  CGAffineTransform *v51;
  int v52;
  CGFloat *v53;
  CGFloat *v54;
  BOOL v55;
  CGSize *v56;
  const CGRect *v57;
  unsigned int v58;
  unsigned int v59;
  CGPath *Mutable;
  CGPath *v61;
  const CGPath *v62;
  char *v63;
  unsigned int *CopyByApplyingTransform;
  uint64_t v65;
  unsigned int *v66;
  int v67;
  __int16 v68;
  uint64_t v69;
  unsigned int *CopyWithTransform;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const void *v75;
  uint64_t Instance;
  unsigned int v77;
  unsigned int v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  float64x2_t *v97;
  float64x2_t v102;
  float64x2_t v104;
  double v105;
  double v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t style_with_type;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  const void *v125;
  uint64_t v126;
  const void *v127;
  uint64_t v128;
  const void *v129;
  double v130;
  unsigned int v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  double v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  CGAffineTransform v152;
  CGRect v153;
  CGRect v154;
  CGRect v155;
  CGRect v156;
  CGRect v157;
  CGRect v158;

  v8 = a4;
  v9 = (float64x2_t *)a3;
  v12 = *(_QWORD *)(a2 + 8);
  if (v12)
    v13 = *(_QWORD *)(v12 + 16);
  else
    v13 = 0;
  v14 = *(_QWORD *)(a2 + 16);
  if (v14)
    v15 = *(_QWORD *)(v14 + 16);
  else
    v15 = 0;
  v16 = *(_QWORD *)(a1 + 40);
  if (v16 == v13)
    goto LABEL_102;
  if (v16 && v13)
  {
    if (*(_DWORD *)(v16 + 4) == *(_DWORD *)(v13 + 4))
      goto LABEL_102;
    v150 = v15;
    v151 = a3;
    *(_QWORD *)(a1 + 40) = v13;
    v18 = (unint64_t *)(v13 + 120);
    v17 = *(_QWORD *)(v13 + 120);
    v19 = *(double *)(v13 + 16);
    v20 = *(double *)(v13 + 24);
    v22 = *(double *)(v13 + 32);
    v21 = *(double *)(v13 + 40);
    goto LABEL_14;
  }
  *(_QWORD *)(a1 + 40) = v13;
  if (!v13)
  {
    CGGStackRestore(*(uint64_t **)(a1 + 24), a2, a3, a4, a5, a6, a7, a8);
    v8 = CGGStackSave(*(_QWORD *)(a1 + 24));
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 80) = 0;
    goto LABEL_102;
  }
  v150 = v15;
  v151 = a3;
  v18 = (unint64_t *)(v13 + 120);
  v17 = *(_QWORD *)(v13 + 120);
  v19 = *(double *)(v13 + 16);
  v20 = *(double *)(v13 + 24);
  v22 = *(double *)(v13 + 32);
  v21 = *(double *)(v13 + 40);
  if (v16)
  {
LABEL_14:
    v23 = *(_QWORD *)(v16 + 120);
    x = *(double *)(v16 + 16);
    v25 = *(double *)(v16 + 24);
    width = *(double *)(v16 + 32);
    v26 = *(double *)(v16 + 40);
    if (v17 >= v23)
    {
      v28 = 0;
      if (v23)
      {
        v29 = (_QWORD *)(v16 + 128);
        v30 = *(_QWORD *)(v16 + 112);
        v31 = v29;
        v32 = (uint64_t *)(v13 + 128);
        while (1)
        {
          if (v17 <= v28)
          {
            v34 = 0;
          }
          else
          {
            v33 = v32;
            if (*(_QWORD *)(v13 + 112) != 3)
              v33 = (uint64_t *)(*(_QWORD *)(v13 + 128) + 8 * v28);
            v34 = *v33;
          }
          v35 = v31;
          if (v30 != 3)
            v35 = (_QWORD *)(*v29 + 8 * v28);
          if (v34 != *v35)
            break;
          ++v28;
          ++v32;
          ++v31;
          if (v23 == v28)
            goto LABEL_29;
        }
      }
    }
    else
    {
      v28 = -1;
    }
    if (v28 == v23)
    {
LABEL_29:
      v153.origin.x = x;
      v153.origin.y = v25;
      v153.size.width = width;
      v153.size.height = v26;
      v157.origin.x = v19;
      v157.origin.y = v20;
      v157.size.width = v22;
      v157.size.height = v21;
      if (CGRectContainsRect(v153, v157))
      {
LABEL_34:
        v154.origin.x = v19;
        v154.origin.y = v20;
        v154.size.width = v22;
        v154.size.height = v21;
        v158.origin.x = x;
        v158.origin.y = v25;
        v158.size.width = width;
        v158.size.height = v26;
        if (CGRectEqualToRect(v154, v158)
          || v19 == -8.98846567e307 && v20 == -8.98846567e307 && v22 == 1.79769313e308 && v21 == 1.79769313e308)
        {
          goto LABEL_54;
        }
        v44 = (char *)CGClipCreateWithRect(*(CGAffineTransform **)(a1 + 88), 1, v19, v20, v22, v21);
        CGGStateAddClip(v8, (uint64_t)v44);
        goto LABEL_52;
      }
    }
    CGGStackRestore(*(uint64_t **)(a1 + 24), a2, a3, a4, a5, a6, a7, a8);
    v8 = CGGStackSave(*(_QWORD *)(a1 + 24));
    v23 = 0;
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 80) = 0;
    v36 = *(_QWORD *)(v8 + 112);
    v37 = &CGRectInfinite;
    p_y = &CGRectInfinite.origin.y;
    p_size = &CGRectInfinite.size;
    v40 = (const CGRect *)(v36 + 16);
    v41 = (CGFloat *)(v36 + 24);
    v42 = (CGSize *)(v36 + 32);
    _ZF = v36 == 0;
    p_height = (CGFloat *)(v36 + 40);
    if (_ZF)
    {
      p_height = &CGRectInfinite.size.height;
    }
    else
    {
      p_size = v42;
      p_y = v41;
      v37 = v40;
    }
    v26 = *p_height;
    x = v37->origin.x;
    v25 = *p_y;
    width = p_size->width;
    goto LABEL_34;
  }
  _ZF = v19 == -8.98846567e307 && v20 == -8.98846567e307;
  if (_ZF && v22 == 1.79769313e308 && v21 == 1.79769313e308)
  {
    v23 = 0;
    goto LABEL_54;
  }
  v44 = (char *)CGClipCreateWithRect(*(CGAffineTransform **)(a1 + 88), 1, *(CGFloat *)(v13 + 16), *(CGFloat *)(v13 + 24), *(CGFloat *)(v13 + 32), *(CGFloat *)(v13 + 40));
  CGGStateAddClip(v8, (uint64_t)v44);
  v23 = 0;
LABEL_52:
  CGClipRelease(v44);
LABEL_54:
  if (v23 < v17)
  {
    v48 = (_QWORD *)(v13 + 128);
    while (*v18 <= v23)
    {
      v50 = 0;
      v51 = *(CGAffineTransform **)(a1 + 88);
      if (v51)
        goto LABEL_63;
LABEL_99:
      CGGStateAddClip(v8, (uint64_t)v50);
      CGClipRelease((char *)v50);
LABEL_100:
      if (++v23 == v17)
        goto LABEL_101;
    }
    if (*(_QWORD *)(v13 + 112) == 3)
      v49 = (void **)&v48[v23];
    else
      v49 = (void **)(*v48 + 8 * v23);
    v50 = (unsigned __int8 *)*v49;
    v51 = *(CGAffineTransform **)(a1 + 88);
    if (!v51)
    {
      if (v50)
      {
        do
          v59 = __ldxr((unsigned int *)v50);
        while (__stxr(v59 + 1, (unsigned int *)v50));
      }
      goto LABEL_99;
    }
LABEL_63:
    v52 = v50[8];
    switch((char)v52)
    {
      case 0:
        v53 = &CGRectNull.size.height;
        v54 = &CGRectNull.origin.y;
        v55 = v52 == 0;
        if (v50[8])
          v56 = &CGRectNull.size;
        else
          v56 = (CGSize *)(v50 + 40);
        if (v55)
          v54 = (CGFloat *)(v50 + 32);
        if (v55)
          v57 = (const CGRect *)(v50 + 24);
        else
          v57 = &CGRectNull;
        if (v55)
          v53 = (CGFloat *)(v50 + 48);
        v50 = (unsigned __int8 *)CGClipCreateWithRect(v51, v50[10], v57->origin.x, *v54, v56->width, *v53);
        goto LABEL_99;
      case 2:
        Mutable = CGPathCreateMutable();
        v61 = Mutable;
        if (v50[8] == 2)
          v62 = (const CGPath *)*((_QWORD *)v50 + 3);
        else
          v62 = 0;
        v67 = v50[10];
        CGPathAddPath(Mutable, *(const CGAffineTransform **)(a1 + 88), v62);
        v68 = *((_WORD *)v50 + 4);
        if ((v68 & 0xFF00) == 0x200 && (v69 = *((_QWORD *)v50 + 2)) != 0)
        {
          CopyWithTransform = (unsigned int *)CGClipStrokeCreateCopyWithTransform(v69, *(const CGAffineTransform **)(a1 + 88));
          v50 = (unsigned __int8 *)CGClipCreateWithStrokedPath(v61, (uint64_t)CopyWithTransform);
          CGClipStrokeRelease(CopyWithTransform);
        }
        else
        {
          v71 = 1.0;
          if (*((_WORD *)v50 + 4) == 2)
            v71 = *((double *)v50 + 4);
          v50 = (unsigned __int8 *)CGClipCreateWithPath(v61, v68 >> 8, v67 != 0, v71);
        }
        v48 = (_QWORD *)(v13 + 128);
        if (v61)
          CFRelease(v61);
        goto LABEL_99;
      case 3:
        if (v52 == 3)
        {
          v63 = (char *)*((_QWORD *)v50 + 3);
          if (v63)
          {
            CopyByApplyingTransform = (unsigned int *)CGClipMaskCreateCopyByApplyingTransform(v63, &v51->a);
            v50 = (unsigned __int8 *)CGClipCreateWithMask(CopyByApplyingTransform, v50[10]);
            CGClipMaskRelease(CopyByApplyingTransform);
          }
        }
        goto LABEL_99;
      case 4:
        if (v52 != 4)
          goto LABEL_100;
        v65 = *((_QWORD *)v50 + 3);
        if (!v65)
          goto LABEL_100;
        v66 = (unsigned int *)CGTextClippingCreateCopyByApplyingTransform(v65, (float64x2_t *)v51);
        v50 = (unsigned __int8 *)CGClipCreateWithTextClipping(v66);
        CGTextClippingRelease(v66);
        break;
      default:
        do
          v58 = __ldxr((unsigned int *)v50);
        while (__stxr(v58 + 1, (unsigned int *)v50));
        goto LABEL_99;
    }
    goto LABEL_99;
  }
LABEL_101:
  v15 = v150;
  v9 = (float64x2_t *)v151;
LABEL_102:
  if (*(_QWORD *)(a1 + 80) == v15)
    goto LABEL_124;
  if (!v15)
  {
    v74 = v8;
    v75 = 0;
LABEL_122:
    CGGStateSetSoftMask(v74, v75);
    goto LABEL_123;
  }
  v72 = *(_QWORD *)(a1 + 88);
  if (!v72)
  {
    v74 = v8;
    v75 = (const void *)v15;
    goto LABEL_122;
  }
  if (*(double *)v72 == 1.0
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)(v72 + 8)), (int32x4_t)vceqq_f64(*(float64x2_t *)(v72 + 24), (float64x2_t)xmmword_185004990))))) & 1) == 0&& *(double *)(v72 + 40) == 0.0)
  {
    CFRetain((CFTypeRef)v15);
    v73 = v15;
  }
  else
  {
    if (_block_invoke_once_15426 != -1)
      dispatch_once(&_block_invoke_once_15426, &__block_literal_global_4_15427);
    Instance = CGTypeCreateInstance(CGSoftMaskGetTypeID_soft_mask_type_id, 144, a3, a4, a5, a6, a7, a8);
    if (!Instance)
    {
      CGGStateSetSoftMask(v8, 0);
      v15 = 0;
      goto LABEL_123;
    }
    v73 = Instance;
    do
    {
      v77 = __ldxr(&identifier_15428);
      v78 = v77 + 1;
    }
    while (__stxr(v78, &identifier_15428));
    *(_DWORD *)(Instance + 16) = v78;
    v79 = *(double *)(v15 + 24);
    v80 = *(double *)(v15 + 32);
    v81 = *(double *)(v15 + 40);
    v82 = *(double *)(v15 + 48);
    v83 = *(double *)(v15 + 56);
    v84 = *(double *)(v15 + 64);
    v85 = *(double *)(v72 + 8);
    v86 = *(double *)(v72 + 16);
    v87 = *(double *)(v72 + 24);
    v88 = v80 * v86 + v79 * *(double *)v72;
    v89 = v80 * v87 + v79 * v85;
    v90 = v82 * v86 + v81 * *(double *)v72;
    v91 = v82 * v87 + v81 * v85;
    v92 = *(double *)(v72 + 32) + v86 * v84 + v83 * *(double *)v72;
    v93 = v87 * v84 + v83 * v85 + *(double *)(v72 + 40);
    *(double *)(Instance + 24) = v88;
    *(double *)(Instance + 32) = v89;
    *(double *)(Instance + 40) = v90;
    *(double *)(Instance + 48) = v91;
    *(double *)(Instance + 56) = v92;
    *(double *)(Instance + 64) = v93;
    v94 = *(_OWORD *)(v15 + 72);
    *(_OWORD *)(Instance + 88) = *(_OWORD *)(v15 + 88);
    *(_OWORD *)(Instance + 72) = v94;
    v95 = *(_QWORD *)(v15 + 104);
    if (v95)
      CFRetain(*(CFTypeRef *)(v15 + 104));
    *(_QWORD *)(v73 + 104) = v95;
    v96 = *(_QWORD *)(v15 + 112);
    if (v96)
      CFRetain(*(CFTypeRef *)(v15 + 112));
    *(_QWORD *)(v73 + 112) = v96;
    CFRetain((CFTypeRef)v15);
    *(_QWORD *)(v73 + 120) = v15;
    *(_OWORD *)(v73 + 128) = CGSoftMaskCreateCopyByApplyingTransform_callbacks;
    *(_QWORD *)(v73 + 144) = release_soft_mask;
    *(_QWORD *)(v73 + 152) = 0;
    v15 = v73;
  }
  CGGStateSetSoftMask(v8, (const void *)v73);
  CFRelease((CFTypeRef)v73);
LABEL_123:
  *(_QWORD *)(a1 + 80) = v15;
LABEL_124:
  v97 = *(float64x2_t **)(a1 + 88);
  _D4 = v9->f64[0];
  _D0 = v9->f64[1];
  _D3 = v9[1].f64[0];
  _D1 = v9[1].f64[1];
  v102 = v9[2];
  if (v97)
  {
    _Q5 = *v97;
    v104 = v97[1];
    v105 = vmlad_n_f64(_D0 * v104.f64[0], _D4, v97->f64[0]);
    __asm { FMLA            D0, D4, V5.D[1] }
    v109 = vmlad_n_f64(_D1 * v104.f64[0], _D3, v97->f64[0]);
    __asm { FMLA            D1, D3, V5.D[1] }
    v102 = vaddq_f64(v97[2], vmlaq_n_f64(vmulq_laneq_f64(v104, v102, 1), *v97, v102.f64[0]));
    _D4 = v105;
    _D3 = v109;
  }
  v110 = *(_QWORD *)(a1 + 32);
  *(double *)(v110 + 24) = _D4;
  *(double *)(v110 + 32) = _D0;
  *(double *)(v110 + 40) = _D3;
  *(double *)(v110 + 48) = _D1;
  *(float64x2_t *)(v110 + 56) = v102;
  v111 = *(_QWORD *)(a2 + 24);
  if (!v111)
  {
    v112 = 0;
LABEL_136:
    v124 = v8;
    v125 = (const void *)v112;
LABEL_137:
    CGGStateSetStyle(v124, v125);
    goto LABEL_138;
  }
  v112 = *(_QWORD *)(v111 + 16);
  if (!v112 || *(_DWORD *)(v112 + 20) != 2 || (*(_DWORD *)(v112 + 104) & 0x80000000) != 0)
    goto LABEL_136;
  style_with_type = create_style_with_type(2, a2, a3, a4, a5, a6, a7, a8);
  if (style_with_type)
  {
    v120 = *(_QWORD *)(v112 + 24);
    if (v120)
      CFRetain(*(CFTypeRef *)(v112 + 24));
    *(_QWORD *)(style_with_type + 24) = v120;
    switch(*(_DWORD *)(v112 + 20))
    {
      case 1:
        v121 = *(_OWORD *)(v112 + 32);
        v122 = *(_OWORD *)(v112 + 48);
        v123 = *(_OWORD *)(v112 + 64);
        *(_QWORD *)(style_with_type + 80) = *(_QWORD *)(v112 + 80);
        *(_OWORD *)(style_with_type + 48) = v122;
        *(_OWORD *)(style_with_type + 64) = v123;
        goto LABEL_159;
      case 2:
        *(_OWORD *)(style_with_type + 32) = *(_OWORD *)(v112 + 32);
        v137 = *(_OWORD *)(v112 + 48);
        v138 = *(_OWORD *)(v112 + 64);
        v139 = *(_OWORD *)(v112 + 96);
        *(_OWORD *)(style_with_type + 80) = *(_OWORD *)(v112 + 80);
        *(_OWORD *)(style_with_type + 96) = v139;
        *(_OWORD *)(style_with_type + 48) = v137;
        *(_OWORD *)(style_with_type + 64) = v138;
        break;
      case 3:
        v121 = *(_OWORD *)(v112 + 32);
LABEL_159:
        *(_OWORD *)(style_with_type + 32) = v121;
        break;
      case 4:
        v140 = *(_OWORD *)(v112 + 32);
        v141 = *(_OWORD *)(v112 + 64);
        *(_OWORD *)(style_with_type + 48) = *(_OWORD *)(v112 + 48);
        *(_OWORD *)(style_with_type + 64) = v141;
        *(_OWORD *)(style_with_type + 32) = v140;
        v142 = *(_OWORD *)(v112 + 80);
        v143 = *(_OWORD *)(v112 + 96);
        v144 = *(_OWORD *)(v112 + 128);
        *(_OWORD *)(style_with_type + 112) = *(_OWORD *)(v112 + 112);
        *(_OWORD *)(style_with_type + 128) = v144;
        *(_OWORD *)(style_with_type + 80) = v142;
        *(_OWORD *)(style_with_type + 96) = v143;
        v145 = *(_OWORD *)(v112 + 144);
        v146 = *(_OWORD *)(v112 + 160);
        v147 = *(_OWORD *)(v112 + 176);
        *(_QWORD *)(style_with_type + 192) = *(_QWORD *)(v112 + 192);
        *(_OWORD *)(style_with_type + 160) = v146;
        *(_OWORD *)(style_with_type + 176) = v147;
        *(_OWORD *)(style_with_type + 144) = v145;
        break;
      default:
        CGLog(2, (uint64_t)"%s: Undefined type", v113, v114, v115, v116, v117, v118, (char)"CGMutableStyleRef CGStyleCreateMutableCopy(CGStyleRef)");
        break;
    }
  }
  v155 = *(CGRect *)(a2 + 64);
  v148 = *(_OWORD *)(v8 + 24);
  v149 = *(_OWORD *)(v8 + 56);
  *(_OWORD *)&v152.c = *(_OWORD *)(v8 + 40);
  *(_OWORD *)&v152.tx = v149;
  *(_OWORD *)&v152.a = v148;
  v156 = CGRectApplyAffineTransform(v155, &v152);
  if (!style_with_type)
  {
    v124 = v8;
    v125 = 0;
    goto LABEL_137;
  }
  if (*(_DWORD *)(style_with_type + 20) == 2)
    *(CGRect *)(style_with_type + 72) = v156;
  CGGStateSetStyle(v8, (const void *)style_with_type);
  CFRelease((CFTypeRef)style_with_type);
LABEL_138:
  v126 = *(_QWORD *)(a2 + 40);
  if (v126)
    v127 = *(const void **)(v126 + 16);
  else
    v127 = 0;
  CGGStateSetUndercolorRemoval(v8, v127);
  v128 = *(_QWORD *)(a2 + 32);
  if (v128)
    v129 = *(const void **)(v128 + 16);
  else
    v129 = 0;
  CGGStateSetBlackGeneration(v8, v129);
  v130 = *(double *)(a2 + 48);
  if (*(double *)(*(_QWORD *)(v8 + 144) + 8) != v130)
  {
    maybe_copy_device_state(v8);
    *(double *)(*(_QWORD *)(v8 + 144) + 8) = v130;
  }
  CGGStateSetCompositeOperation(v8, (int)(*(_DWORD *)(a2 + 96) << 26) >> 26);
  CGGStateSetShouldAntialias(v8, (*(_DWORD *)(a2 + 96) >> 6) & 1);
  CGGStateSetAlphaIsShape(v8, (*(_DWORD *)(a2 + 96) >> 7) & 1);
  v131 = *(_DWORD *)(a2 + 96);
  v132 = *(_QWORD *)(v8 + 144);
  v133 = (v131 >> 14) & 1;
  if (*(unsigned __int8 *)(v132 + 24) != v133)
  {
    maybe_copy_device_state(v8);
    v132 = *(_QWORD *)(v8 + 144);
    *(_BYTE *)(v132 + 24) = v133;
    v131 = *(_DWORD *)(a2 + 96);
  }
  v134 = (v131 >> 15) & 1;
  if (*(unsigned __int8 *)(v132 + 25) != v134)
  {
    maybe_copy_device_state(v8);
    v132 = *(_QWORD *)(v8 + 144);
    *(_BYTE *)(v132 + 25) = v134;
  }
  v135 = *(_DWORD *)(a2 + 100);
  if (*(_DWORD *)(v132 + 28) != v135)
  {
    maybe_copy_device_state(v8);
    *(_DWORD *)(*(_QWORD *)(v8 + 144) + 28) = v135;
  }
  v136 = *(double *)(a2 + 56);
  if (*(double *)(*(_QWORD *)(v8 + 120) + 8) != v136)
  {
    maybeCopyRenderingState(v8);
    *(double *)(*(_QWORD *)(v8 + 120) + 8) = v136;
  }
}

void CGGStateSetStyle(uint64_t a1, const void *a2)
{
  const void *v4;

  if (*(const void **)(*(_QWORD *)(a1 + 120) + 16) != a2)
  {
    maybeCopyRenderingState(a1);
    v4 = *(const void **)(*(_QWORD *)(a1 + 120) + 16);
    if (v4)
      CFRelease(v4);
    if (a2)
      CFRetain(a2);
    *(_QWORD *)(*(_QWORD *)(a1 + 120) + 16) = a2;
  }
}

void CGGStateSetUndercolorRemoval(uint64_t a1, const void *a2)
{
  const void *v4;

  if (*(const void **)(*(_QWORD *)(a1 + 144) + 40) != a2)
  {
    maybe_copy_device_state(a1);
    v4 = *(const void **)(*(_QWORD *)(a1 + 144) + 40);
    if (v4)
      CFRelease(v4);
    if (a2)
      CFRetain(a2);
    *(_QWORD *)(*(_QWORD *)(a1 + 144) + 40) = a2;
  }
}

void CGGStateSetBlackGeneration(uint64_t a1, const void *a2)
{
  const void *v4;

  if (*(const void **)(*(_QWORD *)(a1 + 144) + 32) != a2)
  {
    maybe_copy_device_state(a1);
    v4 = *(const void **)(*(_QWORD *)(a1 + 144) + 32);
    if (v4)
      CFRelease(v4);
    if (a2)
      CFRetain(a2);
    *(_QWORD *)(*(_QWORD *)(a1 + 144) + 32) = a2;
  }
}

BOOL CG::DisplayListExecutor::rejectRect(CG::DisplayListExecutor *this, const CGRect *a2)
{
  double v2;
  double v3;
  BOOL v4;
  _BOOL8 result;
  double y;

  v3 = *((double *)this + 6);
  v2 = *((double *)this + 7);
  v4 = v3 == INFINITY || v2 == INFINITY;
  result = 0;
  if (!v4)
  {
    if (a2->origin.x > v3 + *((double *)this + 8))
      return 1;
    y = a2->origin.y;
    if (y > v2 + *((double *)this + 9) || a2->origin.x + a2->size.width < v3 || y + a2->size.height < v2)
      return 1;
  }
  return result;
}

uint64_t ripc_DrawGlyphs(uint64_t a1, unsigned __int8 *a2, uint64_t a3, double *a4, __int16 *a5, uint64_t a6, unint64_t a7)
{
  double *v14;
  unsigned int v15;
  unsigned int v16;
  double v17;
  double v18;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  BOOL v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  CGFont *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  int *font_info;
  double v45;
  double v46;
  unsigned __int8 v47;
  unsigned int v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double *v53;
  double v54;
  double v55;
  double v56;
  CGMutablePathRef GlyphPath;
  const CGPath *v58;
  _DWORD *v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  int AllowedFontRenderingStyle;
  uint64_t v67;
  __n128 v68;
  float64x2_t v69;
  float64x2_t v70;
  unsigned int v71;
  CGFloat v72;
  CGFloat v73;
  CGFloat v74;
  CGFloat v75;
  float64x2_t v76;
  float64x2_t v77;
  double v78;
  double v79;
  float64x2_t v80;
  float64x2_t v81;
  __int128 v82;
  _QWORD v83[2];
  __int128 v84;
  uint64_t v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  float64x2_t v96;
  float64x2_t v97;
  double v98[4];
  CGRect v99;
  CGRect v100;
  CGRect v101;

  if (ripc_DrawGlyphs_once != -1)
    dispatch_once_f(&ripc_DrawGlyphs_once, 0, (dispatch_function_t)get_defaults);
  v14 = *(double **)(a3 + 136);
  v15 = *(unsigned __int16 *)v14;
  v16 = ((__int16)v15 >> 8) & 0xFFFFFFFB;
  if (v16 != 3)
  {
    if (a1)
      a1 = *(_QWORD *)(a1 + 288);
    v17 = *(double *)(a3 + 24);
    v18 = *(double *)(a1 + 40);
    if (v18 == 1.0)
    {
      v19 = *(float64x2_t *)(a3 + 32);
      v20 = *(float64x2_t *)(a3 + 48);
      v21 = *(double *)(a3 + 64);
    }
    else
    {
      v17 = v18 * v17;
      v19 = vmulq_n_f64(*(float64x2_t *)(a3 + 32), v18);
      v20 = vmulq_n_f64(*(float64x2_t *)(a3 + 48), v18);
      v21 = v18 * *(double *)(a3 + 64);
    }
    v22 = a4[1];
    v24 = a4[2];
    v23 = a4[3];
    v25 = a4[4];
    v26 = a4[5];
    v27 = vmuld_lane_f64(v22, v19, 1) + *a4 * v17;
    v28 = vmlad_n_f64(v22 * v20.f64[0], *a4, v19.f64[0]);
    v80.f64[0] = v27;
    v80.f64[1] = v28;
    v29 = vmuld_lane_f64(v23, v19, 1) + v24 * v17;
    v30 = vmlad_n_f64(v23 * v20.f64[0], v24, v19.f64[0]);
    v81.f64[0] = v29;
    v81.f64[1] = v30;
    v78 = vmlad_n_f64(v26 * v20.f64[0], v25, v19.f64[0]) + v21;
    v79 = v20.f64[1] + vmuld_lane_f64(v26, v19, 1) + v25 * v17;
    *(double *)&v82 = v79;
    *((double *)&v82 + 1) = v78;
    if (!v16
      && should_use_glyph_bitmaps
      && ((v31 = v14[2], v32 = v31 * (fabs(v27) + fabs(v28)), v33 = v31 * (fabs(v29) + fabs(v30)), v32 <= 1024.0)
        ? (v34 = v33 <= 1024.0)
        : (v34 = 0),
          v34))
    {
      v91 = 0u;
      v92 = 0u;
      v90 = 0u;
      if (ripc_GetRenderingState(a1, (uint64_t)a2, a3, (uint64_t)&v90))
      {
        AllowedFontRenderingStyle = CGRenderingStateGetAllowedFontRenderingStyle(a2);
        v67 = CGGStateGetFontRenderingStyle(a3) & AllowedFontRenderingStyle;
        if ((v67 & 2) != 0
          && ((*(_BYTE *)(*(_QWORD *)(a1 + 48) + 29) & 1) == 0
           || *((_QWORD *)&v92 + 1) && !should_enable_lcd_styles
           || (int)(*(_DWORD *)(*(_QWORD *)(a3 + 120) + 4) << 16) >= 50331648))
        {
          v67 &= 0x3DFDu;
        }
        if ((v67 & 1) != 0 && a7 >= 2 && (**(_WORD **)(a3 + 136) & 0x80) != 0)
          draw_glyph_bitmap_run_with_compositing(a1, v68, (uint64_t)a2, a3, (uint64_t)&v90, v67, (uint64_t)&v80, (uint64_t)a5, a6, a7);
        else
          draw_glyph_bitmaps(a1, (uint64_t)a2, a3, (int *)&v90, v68, v67, (uint64_t)&v80, a5, a6, a7);
      }
    }
    else
    {
      if (v15 >= 0x700 || (v35 = v15 >> 8, ((0x77u >> SBYTE1(v15)) & 1) == 0))
        abort();
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v87 = 0u;
      v88 = 0u;
      v89 = 0u;
      v85 = 0;
      v36 = (uint64_t)a2;
      if (ripc_GetRenderingState(a1, (uint64_t)a2, a3, (uint64_t)&v87))
      {
        v71 = (0x66u >> v35) & 1;
        v37 = *(_QWORD *)(a3 + 136);
        v38 = *(CGFont **)(v37 + 8);
        v39 = *(double *)(v37 + 16);
        v76 = v81;
        v77 = v80;
        v69 = vmulq_n_f64(v81, v39);
        v70 = vmulq_n_f64(v80, v39);
        v96 = v70;
        v97 = v69;
        *(_OWORD *)v98 = v82;
        get_glyph_bounding_box(v38, &v96);
        v74 = v41;
        v75 = v40;
        v72 = v43;
        v73 = v42;
        font_info = (int *)get_font_info(v38);
        if (font_info)
          v45 = (double)font_info[2];
        else
          v45 = 0.0;
        v46 = 1.0 / v45;
        v96 = vmulq_n_f64(v70, v46);
        v97 = vmulq_n_f64(v69, v46);
        v86 = (char *)&v88 + 8;
        v83[0] = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 8);
        v84 = *(_OWORD *)(a1 + 24);
        v83[1] = 0x3FF0000000000000;
        v47 = a2[81];
        if (v47)
          v47 = *(_BYTE *)(*(_QWORD *)(a3 + 120) + 7) & 1;
        LOBYTE(v85) = v47;
        if (v71)
          ripc_GetRenderStroke(a3, (uint64_t)&v90, (__int128 *)(a3 + 24));
        if (a7)
        {
          v48 = (0x5Du >> v35) & 1;
          v49 = (double)SDWORD1(v89);
          v50 = (double)(int)v89;
          v51 = (double)SHIDWORD(v88);
          v52 = (double)SDWORD2(v88);
          v53 = (double *)(a6 + 8);
          do
          {
            v54 = *(v53 - 1);
            v55 = v79 + *v53 * v76.f64[0] + v77.f64[0] * v54;
            v56 = v78 + *v53 * v76.f64[1] + v77.f64[1] * v54;
            v99.origin.y = v74;
            v99.origin.x = v75;
            v99.size.height = v72;
            v99.size.width = v73;
            v101 = CGRectOffset(v99, v55, v56);
            v100.origin.x = v52;
            v100.origin.y = v51;
            v100.size.width = v50;
            v100.size.height = v49;
            if (CGRectIntersectsRect(v100, v101))
            {
              v98[0] = v55;
              v98[1] = v56;
              GlyphPath = CGFontCreateGlyphPath((uint64_t)v38, (uint64_t)&v96);
              if (GlyphPath)
              {
                v58 = GlyphPath;
                if (v48)
                {
                  v59 = *(_DWORD **)(a1 + 56);
                  if (!v59)
                  {
                    v59 = malloc_type_calloc(1uLL, 0xB8uLL, 0x415BF41uLL);
                    *(_QWORD *)v59 = RIPRenderCreate_ripr_class;
                    v59[2] = 1;
                    *((_QWORD *)v59 + 2) = 0;
                    *(_QWORD *)(a1 + 56) = v59;
                  }
                  RIPRenderPath(v59, (uint64_t)v83, v58, 0);
                }
                if (v71)
                {
                  v60 = *(_DWORD **)(a1 + 64);
                  if (!v60)
                  {
                    v60 = malloc_type_calloc(1uLL, 0xB8uLL, 0x415BF41uLL);
                    *(_QWORD *)v60 = RIPRenderCreate_ripr_class;
                    v60[2] = 1;
                    *((_QWORD *)v60 + 2) = 0;
                    *(_QWORD *)(a1 + 64) = v60;
                  }
                  RIPRenderPath(v60, (uint64_t)v83, v58, (uint64_t)&v90);
                }
                CFRelease(v58);
                ripc_Render(a1, v36, a3, (uint64_t *)&v87, v71 | (2 * v48), v61, v62, v63, v64);
              }
            }
            ++a5;
            v53 += 2;
            --a7;
          }
          while (a7);
        }
      }
    }
  }
  return 0;
}

uint64_t CGGStateGetFontRenderingStyle(uint64_t a1)
{
  __int16 *v1;
  __int16 v2;
  int v3;
  int v4;
  int v5;
  int v6;

  v1 = *(__int16 **)(a1 + 136);
  v2 = *v1;
  if ((*v1 & 4) != 0)
  {
    if ((v2 & 8) != 0)
      v4 = 3;
    else
      v4 = 1;
    if ((v2 & 0x20) != 0)
      v5 = 12;
    else
      v5 = 4;
    v6 = v4 | v5;
    if ((v2 & 0x10) != 0)
      v3 = v6;
    else
      v3 = v4;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 120) + 7) & 1) == 0)
      v3 = 0;
  }
  else
  {
    v3 = 0;
  }
  return *((_DWORD *)v1 + 12) | v3 | (*((_DWORD *)v1 + 13) | *((_DWORD *)v1 + 14));
}

uint64_t CGRenderingStateGetAllowedFontRenderingStyle(unsigned __int8 *a1)
{
  int v1;
  int v2;

  v1 = a1[81];
  if (a1[81])
  {
    v1 = a1[83];
    if (a1[83])
    {
      v1 = a1[84] ? 3 : 1;
      if (a1[85])
      {
        if (a1[86])
          v2 = 12;
        else
          v2 = 4;
        v1 |= v2;
      }
    }
  }
  return v1 | 0x3DF0u;
}

void CGContextSetFlatness(CGContextRef c, CGFloat flatness)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (c && *((_DWORD *)c + 4) == 1129601108)
  {
    if (flatness >= 0.0)
    {
      v9 = *((_QWORD *)c + 12);
      if (*(double *)(*(_QWORD *)(v9 + 144) + 8) != flatness)
      {
        maybe_copy_device_state(*((_QWORD *)c + 12));
        *(CGFloat *)(*(_QWORD *)(v9 + 144) + 8) = flatness;
      }
    }
    else
    {
      CGPostError((uint64_t)"%s: invalid flatness: %g", (uint64_t)c, v2, v3, v4, v5, v6, v7, (char)"CGContextSetFlatness");
    }
  }
  else
  {
    handle_invalid_context((char)"CGContextSetFlatness", (uint64_t)c, v2, v3, v4, v5, v6, v7);
  }
}

void maybe_copy_device_state(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 20) & 0x10) != 0)
  {
    v2 = *(_QWORD *)(a1 + 144);
    v3 = (char *)malloc_type_malloc(0x30uLL, 0x2062DE7BuLL);
    *v3 = 0;
    *((_DWORD *)v3 + 1) = 1;
    *(_OWORD *)(v3 + 8) = *(_OWORD *)(v2 + 8);
    *((_WORD *)v3 + 12) = *(_WORD *)(v2 + 24);
    *((_DWORD *)v3 + 7) = *(_DWORD *)(v2 + 28);
    v4 = *(_QWORD *)(v2 + 32);
    if (v4)
      CFRetain(*(CFTypeRef *)(v2 + 32));
    *((_QWORD *)v3 + 4) = v4;
    v5 = *(_QWORD *)(v2 + 40);
    if (v5)
      CFRetain(*(CFTypeRef *)(v2 + 40));
    *((_QWORD *)v3 + 5) = v5;
    *(_QWORD *)(a1 + 144) = v3;
    device_state_release((unsigned int *)v2);
    *(_BYTE *)(a1 + 20) &= ~0x10u;
  }
}

void CGGStateClipToRect(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  CGAffineTransform *v10;
  unsigned int v11;
  int v12;
  __int128 v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  char *v21;
  CGAffineTransform v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;

  maybeCopyClipState(a1);
  v10 = (CGAffineTransform *)(a1 + 24);
  v11 = *(_DWORD *)(*(_QWORD *)(a1 + 120) + 4);
  if (*(double *)(a1 + 32) == 0.0 && *(double *)(a1 + 40) == 0.0
    || *(double *)(a1 + 24) == 0.0 && *(double *)(a1 + 48) == 0.0)
  {
    v12 = HIBYTE(v11) & 1;
    v13 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)&v22.a = *(_OWORD *)&v10->a;
    *(_OWORD *)&v22.c = v13;
    *(_OWORD *)&v22.tx = *(_OWORD *)(a1 + 56);
    v14 = a2;
    *(CGFloat *)&v13 = a3;
    v15 = a4;
    v16 = a5;
    v23 = CGRectApplyAffineTransform(*(CGRect *)((char *)&v13 - 8), &v22);
    x = v23.origin.x;
    y = v23.origin.y;
    width = v23.size.width;
    height = v23.size.height;
    CGClipStackAddRect(*(_QWORD *)(a1 + 112), v12, v23.origin.x, v23.origin.y, v23.size.width, v23.size.height);
    v24.origin.x = x;
    v24.origin.y = y;
    v24.size.width = width;
    v24.size.height = height;
    v25 = CGRectIntegral(v24);
    *(CGRect *)(a1 + 80) = CGRectIntersection(*(CGRect *)(a1 + 80), v25);
  }
  else
  {
    v21 = (char *)CGClipCreateWithRect(v10, HIBYTE(v11) & 1, a2, a3, a4, a5);
    CGClipStackAddClip(*(_QWORD *)(a1 + 112), (uint64_t)v21);
    CGClipRelease(v21);
  }
}

void CGClipStackAddRect(uint64_t a1, int a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  _OWORD *v12;
  int v13;
  __int128 v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  int v19;
  int v20;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  unsigned int v25;
  unsigned int v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;

  if (a1)
  {
    v12 = (_OWORD *)(a1 + 16);
    if (!CGRectContainsRect(*(CGRect *)&a3, *(CGRect *)(a1 + 16)))
    {
      if (a2)
      {
        v32.origin.x = a3;
        v32.origin.y = a4;
        v32.size.width = a5;
        v32.size.height = a6;
        v27 = CGRectIntersection(*(CGRect *)(a1 + 80), v32);
        *(CGRect *)(a1 + 80) = v27;
        v13 = *(_DWORD *)(a1 + 8);
        if ((v13 & 2) != 0)
        {
          x = v27.origin.x;
          y = v27.origin.y;
          width = v27.size.width;
          height = v27.size.height;
          v34 = CGRectIntegral(*(CGRect *)(a1 + 48));
          v31.origin.x = x;
          v31.origin.y = y;
          v31.size.width = width;
          v31.size.height = height;
          *(CGRect *)(a1 + 16) = CGRectIntersection(v31, v34);
        }
        else
        {
          v14 = *(_OWORD *)(a1 + 96);
          *v12 = *(_OWORD *)(a1 + 80);
          v12[1] = v14;
        }
        v20 = v13 | 4;
      }
      else
      {
        v33.origin.x = a3;
        v33.origin.y = a4;
        v33.size.width = a5;
        v33.size.height = a6;
        v28 = CGRectIntersection(*(CGRect *)(a1 + 48), v33);
        *(CGRect *)(a1 + 48) = v28;
        v29 = CGRectIntegral(v28);
        v15 = v29.origin.x;
        v16 = v29.origin.y;
        v17 = v29.size.width;
        v18 = v29.size.height;
        v19 = *(_DWORD *)(a1 + 8);
        if ((v19 & 4) != 0)
        {
          v30 = CGRectIntersection(*(CGRect *)(a1 + 80), *(CGRect *)&v15);
          v15 = v30.origin.x;
          v16 = v30.origin.y;
          v17 = v30.size.width;
          v18 = v30.size.height;
        }
        *(CGFloat *)(a1 + 16) = v15;
        *(CGFloat *)(a1 + 24) = v16;
        *(CGFloat *)(a1 + 32) = v17;
        *(CGFloat *)(a1 + 40) = v18;
        v20 = v19 | 2;
      }
      *(_DWORD *)(a1 + 8) = v20;
      do
      {
        v25 = __ldxr(&identifier_20714);
        v26 = v25 + 1;
      }
      while (__stxr(v26, &identifier_20714));
      *(_DWORD *)(a1 + 4) = v26;
    }
  }
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  double x;
  BOOL result;
  double y;
  double height;
  double width;
  double v9;
  double v10;
  double v11;
  double v12;
  CGRect v13;
  CGRect v14;
  CGRect v15;

  x = rect1.origin.x;
  if (rect2.origin.x == INFINITY || rect2.origin.y == INFINITY)
    return 1;
  y = rect1.origin.y;
  if (rect1.origin.x == INFINITY || rect1.origin.y == INFINITY)
    return 0;
  height = rect2.size.height;
  width = rect2.size.width;
  v9 = rect2.origin.y;
  v10 = rect2.origin.x;
  v11 = rect1.size.height;
  v12 = rect1.size.width;
  if (rect1.size.width < 0.0 || rect1.size.height < 0.0)
  {
    v13 = CGRectStandardize(rect1);
    x = v13.origin.x;
    y = v13.origin.y;
    v12 = v13.size.width;
    v11 = v13.size.height;
  }
  if (width < 0.0 || height < 0.0)
  {
    v14.origin.x = v10;
    v14.origin.y = v9;
    v14.size.width = width;
    v14.size.height = height;
    v15 = CGRectStandardize(v14);
    v10 = v15.origin.x;
    v9 = v15.origin.y;
    width = v15.size.width;
    height = v15.size.height;
  }
  if (x > v10)
    return 0;
  result = 0;
  if (x + v12 >= v10 + width && y <= v9)
    return y + v11 >= v9 + height;
  return result;
}

double CG::DisplayListResourceClip::setClipStack(uint64_t a1, uint64_t a2)
{
  void *v3;
  double *MutableCopy;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(void **)(a1 + 16);
  if (v3 != (void *)a2)
  {
    CGClipStackRelease(v3);
    MutableCopy = (double *)CGClipStackCreateMutableCopy(a2);
    *(_QWORD *)(a1 + 16) = MutableCopy;
    if (MutableCopy)
    {
      if (((_BYTE)MutableCopy[1] & 1) != 0)
        *(_DWORD *)(a1 + 8) |= 0x1000u;
      result = CGClipStackGetBounds(MutableCopy);
      *(double *)(a1 + 24) = result;
      *(_QWORD *)(a1 + 32) = v7;
      *(_QWORD *)(a1 + 40) = v8;
      *(_QWORD *)(a1 + 48) = v9;
    }
    else
    {
      *(_DWORD *)(a1 + 8) &= ~0x1000u;
      result = CGRectInfinite.origin.x;
      *(CGRect *)(a1 + 24) = CGRectInfinite;
    }
  }
  return result;
}

double CGClipStackGetBounds(double *a1)
{
  CGFloat y;
  double x;
  CGFloat height;
  CGFloat width;
  uint64_t v6;
  unint64_t v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  unint64_t v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGRect v16;
  CGRect v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;

  if (!a1)
    return -8.98846567e307;
  x = a1[2];
  y = a1[3];
  width = a1[4];
  height = a1[5];
  v6 = *((_QWORD *)a1 + 15);
  if (*((_QWORD *)a1 + 14) == 3)
  {
    if (v6)
    {
      v7 = 0;
      do
      {
        v20.origin.x = CGClipGetBounds(*(_QWORD *)&a1[v7 + 16]);
        v20.origin.y = v8;
        v20.size.width = v9;
        v20.size.height = v10;
        v16.origin.x = x;
        v16.origin.y = y;
        v16.size.width = width;
        v16.size.height = height;
        v17 = CGRectIntersection(v16, v20);
        x = v17.origin.x;
        y = v17.origin.y;
        width = v17.size.width;
        height = v17.size.height;
        ++v7;
      }
      while (v7 < *((_QWORD *)a1 + 15));
    }
  }
  else if (v6)
  {
    v11 = 0;
    do
    {
      v21.origin.x = CGClipGetBounds(*(_QWORD *)(*((_QWORD *)a1 + 16) + 8 * v11));
      v21.origin.y = v12;
      v21.size.width = v13;
      v21.size.height = v14;
      v18.origin.x = x;
      v18.origin.y = y;
      v18.size.width = width;
      v18.size.height = height;
      v19 = CGRectIntersection(v18, v21);
      x = v19.origin.x;
      y = v19.origin.y;
      width = v19.size.width;
      height = v19.size.height;
      ++v11;
    }
    while (v11 < *((_QWORD *)a1 + 15));
  }
  return x;
}

void maybeCopyClipState(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    v2 = *(void **)(a1 + 112);
    *(_QWORD *)(a1 + 112) = CGClipStackCreateMutableCopy((uint64_t)v2);
    CGClipStackRelease(v2);
    *(_BYTE *)(a1 + 20) &= ~1u;
  }
}

_QWORD *CGClipStackCreateMutableCopy(uint64_t a1)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  unint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t i;
  unsigned int *v16;
  unsigned int v17;

  if (!a1)
    return 0;
  v2 = malloc_type_malloc(0x98uLL, 0x2062DE7BuLL);
  *(_DWORD *)v2 = 1;
  *(_QWORD *)((char *)v2 + 4) = *(_QWORD *)(a1 + 4);
  v3 = *(_OWORD *)(a1 + 96);
  *((_OWORD *)v2 + 5) = *(_OWORD *)(a1 + 80);
  *((_OWORD *)v2 + 6) = v3;
  v4 = *(_OWORD *)(a1 + 64);
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 4) = v4;
  v5 = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 1) = *(_OWORD *)(a1 + 16);
  *((_OWORD *)v2 + 2) = v5;
  v2[14] = 3;
  v2[15] = 0;
  v6 = v2 + 15;
  v2[16] = 0;
  v7 = v2 + 16;
  v8 = *(_QWORD *)(a1 + 120);
  if (!v8)
    return v2;
  if (*(_QWORD *)(a1 + 112) == 3)
  {
    v9 = 0;
    *v6 = v8;
    do
    {
      v10 = *(unsigned int **)(a1 + 128 + 8 * v9);
      if (v10)
      {
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v7[v9++] = v10;
    }
    while (v9 < *v6);
    return v2;
  }
  v12 = v8 + 3;
  v13 = malloc_type_malloc(8 * (v8 + 3), 0x705560E0uLL);
  if (!v13)
  {
    CGClipStackRelease(v2);
    return 0;
  }
  v2[16] = v13;
  v14 = *(_QWORD *)(a1 + 120);
  v2[14] = v12;
  v2[15] = v14;
  if (v14)
  {
    for (i = 0; i < v14; ++i)
    {
      v16 = *(unsigned int **)(*(_QWORD *)(a1 + 128) + 8 * i);
      if (v16)
      {
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        v14 = *v6;
      }
      *(_QWORD *)(*v7 + 8 * i) = v16;
    }
  }
  return v2;
}

void CGGStateSetFontDilation(uint64_t a1, double a2, double a3)
{
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v8;

  if (a2 < 0.0)
    a2 = 0.0;
  if (a3 < 0.0)
    a3 = 0.0;
  if (a2 <= 1.0)
    v3 = a2;
  else
    v3 = 1.0;
  if (a3 <= 1.0)
    v4 = a3;
  else
    v4 = 1.0;
  v5 = *(_QWORD *)(a1 + 136);
  if (*(double *)(v5 + 72) != v3 || *(double *)(v5 + 80) != v4)
  {
    maybe_copy_text_state(a1);
    v8 = *(_QWORD *)(a1 + 136);
    *(double *)(v8 + 72) = v3;
    *(double *)(v8 + 80) = v4;
  }
}

void get_glyph_bounding_box(CGFont *a1, float64x2_t *a2)
{
  _DWORD *font_info;
  int v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  CGAffineTransform v9;
  CGRect v10;
  CGRect v11;
  CGRect FontBBox;

  font_info = get_font_info(a1);
  if (font_info)
    v5 = font_info[2];
  else
    v5 = 0;
  FontBBox = CGFontGetFontBBox(a1);
  v10.origin.x = (double)-v5;
  v10.origin.y = v10.origin.x;
  v10.size.width = (double)(2 * v5);
  v10.size.height = v10.size.width;
  v11 = CGRectUnion(v10, FontBBox);
  v9.tx = 0.0;
  v9.ty = 0.0;
  v6 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v5), 0);
  v7 = vdivq_f64(*a2, v6);
  v8 = vdivq_f64(a2[1], v6);
  *(float64x2_t *)&v9.a = v7;
  *(float64x2_t *)&v9.c = v8;
  CGRectApplyAffineTransform(v11, &v9);
}

void CGGStateSetSoftMask(uint64_t a1, const void *a2)
{
  const void *v4;

  if (*(const void **)(*(_QWORD *)(a1 + 120) + 40) != a2)
  {
    maybeCopyRenderingState(a1);
    v4 = *(const void **)(*(_QWORD *)(a1 + 120) + 40);
    if (v4)
      CFRelease(v4);
    if (a2)
      CFRetain(a2);
    *(_QWORD *)(*(_QWORD *)(a1 + 120) + 40) = a2;
  }
}

double CGClipGetBounds(uint64_t a1)
{
  double v1;
  double result;

  v1 = -8.98846567e307;
  result = -8.98846567e307;
  switch(*(_BYTE *)(a1 + 8))
  {
    case 0:
      result = *(double *)(a1 + 24);
      break;
    case 1:
      return result;
    case 2:
      *(_QWORD *)&result = (unint64_t)CGPathGetBoundingBox((CGPathRef)*(_QWORD *)(a1 + 24));
      break;
    case 3:
      result = CGClipMaskGetBounds(*(_QWORD *)(a1 + 24));
      break;
    case 4:
      v1 = INFINITY;
      if (*(_QWORD *)(a1 + 24))
        v1 = -8.98846567e307;
      goto LABEL_7;
    default:
LABEL_7:
      result = v1;
      break;
  }
  return result;
}

void CGGStateAddClip(uint64_t a1, uint64_t a2)
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGRect v8;

  if (a2)
  {
    if (!*(_BYTE *)(a2 + 8))
    {
      x = *(double *)(a2 + 24);
      y = *(double *)(a2 + 32);
      width = *(double *)(a2 + 40);
      height = *(double *)(a2 + 48);
      if (!*(_BYTE *)(a2 + 10))
      {
        v8 = CGRectIntegral(*(CGRect *)(a2 + 24));
        x = v8.origin.x;
        y = v8.origin.y;
        width = v8.size.width;
        height = v8.size.height;
      }
      *(CGRect *)(a1 + 80) = CGRectIntersection(*(CGRect *)(a1 + 80), *(CGRect *)&x);
    }
    maybeCopyClipState(a1);
    CGClipStackAddClip(*(_QWORD *)(a1 + 112), a2);
  }
}

CGFloat *CGClipCreateWithRect(CGAffineTransform *transform, char a2, CGFloat a3, CGFloat y, CGFloat width, CGFloat height)
{
  CGFloat x;
  CGFloat *v12;
  CGFloat *v13;
  unsigned int v14;
  unsigned int v15;
  __int128 v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGPathRef v21;
  CGPathRef v22;
  CFTypeID v23;
  CGFloat *v24;
  unsigned int v25;
  unsigned int v26;
  CGAffineTransform v27;
  CGRect v28;

  x = a3;
  if (!transform || transform->b == 0.0 && transform->c == 0.0 || transform->a == 0.0 && transform->d == 0.0)
  {
    v12 = (CGFloat *)malloc_type_malloc(0x38uLL, 0x2062DE7BuLL);
    v13 = v12;
    if (v12)
    {
      *(_DWORD *)v12 = 1;
      do
      {
        v14 = __ldxr((unsigned int *)&CGClipCreate_identifier);
        v15 = v14 + 1;
      }
      while (__stxr(v15, (unsigned int *)&CGClipCreate_identifier));
      *((_DWORD *)v12 + 1) = v15;
      *((_WORD *)v12 + 4) = 0;
      v12[2] = 0.0;
      *((_BYTE *)v12 + 10) = a2;
      if (transform)
      {
        v16 = *(_OWORD *)&transform->c;
        *(_OWORD *)&v27.a = *(_OWORD *)&transform->a;
        *(_OWORD *)&v27.c = v16;
        *(_OWORD *)&v27.tx = *(_OWORD *)&transform->tx;
        v17 = x;
        *(CGFloat *)&v16 = y;
        v18 = width;
        v19 = height;
        v28 = CGRectApplyAffineTransform(*(CGRect *)((char *)&v16 - 8), &v27);
        x = v28.origin.x;
        y = v28.origin.y;
        width = v28.size.width;
        height = v28.size.height;
      }
      v13[3] = x;
      v13[4] = y;
      v13[5] = width;
      v13[6] = height;
    }
  }
  else
  {
    v21 = CGPathCreateWithRect(*(CGRect *)&a3, transform);
    if (v21 && ((v22 = v21, CGPathDisableTypeValidation) || (v23 = CFGetTypeID(v21), v23 == CGPathGetTypeID())))
    {
      v24 = (CGFloat *)malloc_type_malloc(0x38uLL, 0x2062DE7BuLL);
      v13 = v24;
      if (v24)
      {
        *(_DWORD *)v24 = 1;
        do
        {
          v25 = __ldxr((unsigned int *)&CGClipCreate_identifier);
          v26 = v25 + 1;
        }
        while (__stxr(v26, (unsigned int *)&CGClipCreate_identifier));
        *((_DWORD *)v24 + 1) = v26;
        *((_WORD *)v24 + 4) = 2;
        *((_BYTE *)v24 + 10) = a2;
        *((_QWORD *)v24 + 3) = v22;
        v24[4] = 1.0;
        v24[2] = 0.0;
      }
    }
    else
    {
      return 0;
    }
  }
  return v13;
}

void CG::DisplayListExecutor::applyEntryStrokeState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    CGGStateSetStrokeColor(a2, *(void **)(v4 + 16));
  v5 = *(double *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 128);
  if (*(double *)(v6 + 8) != v5)
  {
    maybe_copy_stroke_state(a2);
    v6 = *(_QWORD *)(a2 + 128);
    *(double *)(v6 + 8) = v5;
  }
  v7 = *(double *)(a1 + 24);
  if (*(double *)(v6 + 24) != v7)
  {
    maybe_copy_stroke_state(a2);
    *(double *)(*(_QWORD *)(a2 + 128) + 24) = v7;
  }
  CGGStateSetLineCap(a2, *(char *)(a1 + 48));
  CGGStateSetLineJoin(a2, *(char *)(a1 + 49));
  v8 = *(double *)(a1 + 32);
  v9 = *(_QWORD *)(a2 + 128);
  if (*(double *)(v9 + 16) != v8)
  {
    maybe_copy_stroke_state(a2);
    v9 = *(_QWORD *)(a2 + 128);
    *(double *)(v9 + 16) = v8;
  }
  v10 = *(unsigned __int8 *)(a1 + 50);
  if (*(unsigned __int8 *)(v9 + 1) != v10)
  {
    maybe_copy_stroke_state(a2);
    *(_BYTE *)(*(_QWORD *)(a2 + 128) + 1) = v10;
  }
  v11 = *(_QWORD *)(a1 + 40);
  if (v11)
    v12 = *(unsigned int **)(v11 + 16);
  else
    v12 = 0;
  CGGStateSetLineDash(a2, v12);
}

double CGClipMaskGetBounds(uint64_t a1)
{
  __int128 v1;
  double result;
  CGAffineTransform v3;
  CGRect v4;

  if (!a1)
    return INFINITY;
  v4 = *(CGRect *)(a1 + 64);
  v1 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&v3.a = *(_OWORD *)(a1 + 8);
  *(_OWORD *)&v3.c = v1;
  *(_OWORD *)&v3.tx = *(_OWORD *)(a1 + 40);
  *(_QWORD *)&result = (unint64_t)CGRectApplyAffineTransform(v4, &v3);
  return result;
}

uint64_t CGImageProviderCopyImageTextureData(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  if (a1 && *(_DWORD *)(a1 + 64) == 3 && (v1 = *(uint64_t (**)(_QWORD))(a1 + 96)) != 0)
    return v1(*(_QWORD *)(a1 + 56));
  else
    return 0;
}

uint64_t CGClipStackGetCount(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 120);
  return result;
}

CFStringRef CGFontCopyPostScriptName(CFStringRef font)
{
  if (font)
    return (CFStringRef)(*((uint64_t (**)(char *))font->data + 19))(font[3].data);
  return font;
}

CGPoint CGPointApplyAffineTransform(CGPoint point, CGAffineTransform *t)
{
  float64x2_t v2;
  double v3;
  CGPoint result;

  v2 = vaddq_f64(*(float64x2_t *)&t->tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&t->c, point.y), *(float64x2_t *)&t->a, point.x));
  v3 = v2.f64[1];
  result.x = v2.f64[0];
  result.y = v3;
  return result;
}

size_t CGBitmapContextGetHeight(CGContextRef context)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (context && *((_DWORD *)context + 4) == 1129601108 && *((_DWORD *)context + 6) == 4)
    return *(_QWORD *)(*((_QWORD *)context + 4) + 16);
  handle_invalid_context((char)"CGBitmapContextGetHeight", (uint64_t)context, v1, v2, v3, v4, v5, v6);
  return 0;
}

size_t CGBitmapContextGetWidth(CGContextRef context)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (context && *((_DWORD *)context + 4) == 1129601108 && *((_DWORD *)context + 6) == 4)
    return *(_QWORD *)(*((_QWORD *)context + 4) + 8);
  handle_invalid_context((char)"CGBitmapContextGetWidth", (uint64_t)context, v1, v2, v3, v4, v5, v6);
  return 0;
}

void CGCIDInfoRelease(uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (a1)
  {
    v2 = *(const void **)(a1 + 72);
    if (v2)
      CFRelease(v2);
    v3 = *(const void **)(a1 + 80);
    if (v3)
      CFRelease(v3);
    CGFontIndexMapRelease(*(char **)(a1 + 96));
    CGFontIndexMapRelease(*(char **)(a1 + 104));
    pthread_mutex_destroy((pthread_mutex_t *)a1);
    free((void *)a1);
  }
}

CGColorRenderingIntent CGImageGetRenderingIntent(CGImageRef image)
{
  CGImageRef v1;
  CFTypeID v2;

  if (image)
  {
    v1 = image;
    v2 = CFGetTypeID(image);
    if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1)
      dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_211);
    if (v2 == CGImageGetTypeID_image_type_id)
      LODWORD(image) = (__int16)*((_DWORD *)v1 + 9) >> 8;
    else
      LODWORD(image) = 0;
  }
  return (int)image;
}

uint64_t CGColorGetIdentifier(uint64_t result)
{
  if ((result & 0x8000000000000000) == 0)
    return *(unsigned int *)(result + 16);
  return result;
}

uint64_t A8_shade(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  _BOOL8 v8;
  int v9;
  __n128 v11;
  unsigned int v12;
  void *v13;
  unint64_t v14;
  _BYTE *v15;
  void *v16;
  int v17;
  int v18;
  float *v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  _BYTE *v25;
  float *v26;
  float *v27;
  _BYTE v28[36];
  _BYTE v29[16];
  uint64_t v30;
  _BYTE v31[40];
  uint64_t v32;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v5 = v4;
  v6 = (uint64_t)v3;
  v32 = *MEMORY[0x1E0C80C00];
  v7 = *(int **)v2;
  v8 = !*((_QWORD *)v3 + 12) && !*(_QWORD *)(v4 + 72) && *(float *)(v4 + 4) >= 1.0;
  v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 56) + 16 * *v3 + 8 * v8 + 4 * (*((_QWORD *)v3 + 6) == 0));
  if (v9 > 27)
    return 0xFFFFFFFFLL;
  if (*((int *)v3 + 1) < 1 || *((int *)v3 + 2) < 1)
    return 0;
  if ((int)_blt_shade_initialize((uint64_t)v3, v4, (uint64_t)&v16, (uint64_t)v28) < 1)
    return 0xFFFFFFFFLL;
  v12 = *(_BYTE *)(v5 + 3) & 0xF;
  if (v12 <= 4 && ((1 << v12) & 0x1A) != 0)
  {
    if (*(_QWORD *)(v5 + 16))
    {
      v13 = A8_shade_radial_A;
    }
    else if (*(_QWORD *)(v5 + 24))
    {
      v13 = A8_shade_conic_A;
    }
    else if (v22 < 2)
    {
      v13 = A8_shade_axial_A;
    }
    else
    {
      v13 = A8_shade_custom_A;
    }
    v16 = v13;
    if (v26)
    {
      v25 = v31;
      _blt_shade_samples_16((uint64_t)v31, 2, 0, v26, v27, 1uLL);
    }
    v14 = v22 * v21;
    if (v22 * v21 <= 1920)
    {
      v15 = v29;
      v23 = v29;
LABEL_28:
      _blt_shade_samples_16((uint64_t)v15, 2, 0, v19, v20, v14);
      if (*(_BYTE *)(v5 + 1))
        v24 = &_blt_shade_samples_noise;
      goto LABEL_30;
    }
    v15 = malloc_type_malloc(2 * v14 + 32, 0xAC797572uLL);
    if (v15)
    {
      v23 = v15;
      v14 = v22 * v21;
      goto LABEL_28;
    }
    return 0xFFFFFFFFLL;
  }
  if (!v16)
    return 0xFFFFFFFFLL;
LABEL_30:
  v17 = *v7;
  v18 = v17;
  A8_image_mark(v6, (uint64_t)&v16, v9, v11);
  if (v23 && (v23 < v29 || &v30 < v23))
    free(v23);
  return 1;
}

void A8_image_mark(uint64_t a1, uint64_t a2, int a3, __n128 a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void *v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  void *v32;
  int v33;
  uint64_t v34;
  char *v35;
  void *v36;
  unint64_t v37;
  unsigned int v38;
  int v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  int v47;
  int v48;
  int v49;
  unsigned __int8 *v50;
  _BYTE *v51;
  int v52;
  unsigned int v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned __int8 *v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  int v74;
  unsigned __int8 *v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned __int8 *v79;
  int v80;
  int v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  int v85;
  int v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  unsigned __int8 *v90;
  int v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  int v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  char v109;
  unsigned __int8 v110;
  int v111;
  int v112;
  unsigned int v113;
  int v114;
  int v115;
  unsigned int v116;
  int v117;
  int v118;
  unsigned int v119;
  int *v120;
  int v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int *v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a1 + 4);
  v124 = (int)v4;
  v5 = ((int)v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if ((int)v5 > 0x1FFFFFF)
    return;
  v132 = v4;
  v123 = *(int *)(a1 + 28);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(float *)(a2 + 184);
  v128 = *(int **)(a1 + 136);
  v11 = *(_QWORD *)(a2 + 96);
  v12 = *(_QWORD *)(a2 + 104);
  v13 = *(int *)(a1 + 12);
  v14 = *(_DWORD *)(a1 + 16);
  v15 = *(_DWORD *)(a1 + 8);
  v129 = *(int *)(a2 + 16);
  v130 = v9;
  v16 = (v129 + 3) * v5;
  if (v16 > 65439)
  {
    v19 = (char *)malloc_type_calloc(1uLL, v16 + 96, 0x16E13840uLL);
    v18 = v19;
    v21 = v19;
    v22 = v132;
    if (!v19)
      return;
  }
  else
  {
    MEMORY[0x1E0C80A78](a1, a4);
    v18 = (char *)&v122 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v18, v17);
    v21 = 0;
    v22 = v132;
  }
  v122 = v21;
  LODWORD(v127) = a3;
  v131 = (int)(float)((float)(int)(float)(v10 * 255.0) + 0.5);
  v23 = (unint64_t)(v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  v24 = v23 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((_DWORD)v129)
    v25 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  else
    v25 = 0;
  v26 = v24 + v25;
  *(_QWORD *)(a2 + 144) = v23;
  *(_QWORD *)(a2 + 152) = v24 + v25;
  *(_QWORD *)(a2 + 160) = v24;
  v27 = (_BYTE *)(v130 + v13 + v14 * (uint64_t)(int)v123);
  v28 = v124;
  v130 = v123 - v124;
  v29 = *(int *)(a1 + 104);
  v30 = *(_DWORD *)(a1 + 108);
  v125 = a1;
  v31 = *(unsigned __int8 *)(a1 + 2);
  if (v31 == 6 || v31 == 1)
  {
    if (!v128)
      goto LABEL_191;
    v32 = 0;
    v33 = 0;
    v34 = *(int *)(v125 + 124);
    v35 = (char *)v128 + v29 + (int)v34 * (uint64_t)v30;
    v28 = v124;
    v128 = (int *)(v34 - v124);
    goto LABEL_18;
  }
  if (!v128)
  {
    v128 = 0;
    v32 = 0;
    v35 = 0;
    v33 = 0;
LABEL_18:
    v38 = v127;
    goto LABEL_19;
  }
  shape_enum_clip_alloc((uint64_t)v19, v20, v128, 1, 1, 1, v29, v30, v22, v15);
  if (!v36)
    goto LABEL_191;
  v32 = v36;
  v33 = 0;
  v37 = (int)((v129 * v5 + 15) & 0xFFFFFFF0);
  if (!(_DWORD)v129)
    v37 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v128 = (int *)-v124;
  v35 = (char *)(v26 + v37 + 16);
  v38 = v127;
  while (2)
  {
    v120 = (int *)(v35 - 16);
    while (1)
    {
      while (1)
      {
        v121 = *v120 - v33;
        if (*v120 <= v33)
          break;
        v15 -= v121;
        if (v15 < 1)
          goto LABEL_189;
        v11 += *(_QWORD *)(a2 + 128) * v121;
        v12 += *(_QWORD *)(a2 + 136) * v121;
        v27 += (int)v123 * (uint64_t)v121;
        v33 = *v120;
      }
      if (v33 < *((_DWORD *)v35 - 3) + *v120)
        break;
      if (!shape_enum_clip_scan((uint64_t)v32, (_DWORD *)v35 - 4))
        goto LABEL_189;
    }
    v22 = v132;
    v28 = v124;
LABEL_19:
    v39 = v131 ^ 0xFF;
    v126 = -v28;
    v127 = (v22 - 1) + 1;
    v129 = v38;
    v40 = v32;
LABEL_20:
    v32 = v40;
    (*(void (**)(uint64_t, uint64_t, uint64_t))a2)(a2, v11, v12);
    if (*(_DWORD *)(a2 + 8) != *(_DWORD *)(a2 + 12))
      _CGHandleAssert("A8_image_pixel", 3658, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Misc/blt_alpha/blt_alpha.cc", "", "Unimplemented", v41, v42, v43, (char)v122);
    v44 = *(_BYTE **)(a2 + 144);
    v45 = *(_BYTE **)(a2 + 160);
    if (v131 == 255)
    {
      v47 = v132;
    }
    else
    {
      v46 = *(_BYTE **)(a2 + 144);
      v47 = v132;
      v48 = v132;
      do
      {
        if (*v46)
          *v45 -= (unsigned __int16)(*v45 * (_WORD)v39
                                   + ((*v45 * v39) >> 8)
                                   + 1) >> 8;
        ++v46;
        ++v45;
        --v48;
      }
      while (v48);
      v45 += v126;
      v44 += v127 + v126;
    }
    switch(v38)
    {
      case 0u:
        v75 = (unsigned __int8 *)v35;
        v76 = v47;
        do
        {
          v77 = *v44;
          if (*v44)
          {
            if (v35)
              v77 = ((unsigned __int16)(*v75 * (_WORD)v77 + ((*v75 * v77) >> 8) + 1) >> 8);
            if (v77)
            {
              if (v77 == 255)
                LOBYTE(v78) = 0;
              else
                v78 = *v27
                    - ((*v27 * v77 + ((*v27 * v77) >> 8) + 1) >> 8);
              *v27 = v78;
            }
          }
          ++v44;
          v75 += v35 != 0;
          ++v27;
          --v76;
        }
        while (v76);
        v35 = (char *)v128 + (_QWORD)v75;
        goto LABEL_179;
      case 1u:
        goto LABEL_54;
      case 2u:
        goto LABEL_30;
      case 3u:
        v79 = (unsigned __int8 *)v35;
        v80 = v47;
        do
        {
          v81 = *v44;
          if (*v44)
          {
            if (v35)
              v81 = ((unsigned __int16)(*v79 * (_WORD)v81 + ((*v79 * v81) >> 8) + 1) >> 8);
            if (v81)
            {
              if (v81 == 255)
              {
                v82 = *v45
                    - (((*v27 ^ 0xFF) * *v45
                      + (((*v27 ^ 0xFF) * *v45) >> 8)
                      + 1) >> 8);
              }
              else
              {
                v83 = *v27;
                v84 = (v83 * v81 + ((v83 * v81) >> 8) + 1) >> 8;
                v82 = (v83 * (v81 ^ 0xFF)
                     + v84 * *v45
                     + ((v83 * (v81 ^ 0xFF) + v84 * *v45) >> 8)
                     + 1) >> 8;
              }
              *v27 = v82;
            }
          }
          ++v44;
          ++v45;
          v79 += v35 != 0;
          ++v27;
          --v80;
        }
        while (v80);
        goto LABEL_178;
      case 4u:
        v79 = (unsigned __int8 *)v35;
        v85 = v47;
        do
        {
          v86 = *v44;
          if (*v44)
          {
            if (v35)
              v86 = ((unsigned __int16)(*v79 * (_WORD)v86 + ((*v79 * v86) >> 8) + 1) >> 8);
            if (v86)
            {
              if (v86 == 255)
              {
                v87 = *v45
                    - ((*v27 * *v45
                      + ((*v27 * *v45) >> 8)
                      + 1) >> 8);
              }
              else
              {
                v88 = *v27;
                v89 = ((v88 ^ 0xFF) * v86 + (((v88 ^ 0xFFu) * v86) >> 8) + 1) >> 8;
                v87 = (v88 * (v86 ^ 0xFF)
                     + v89 * *v45
                     + ((v88 * (v86 ^ 0xFF) + v89 * *v45) >> 8)
                     + 1) >> 8;
              }
              *v27 = v87;
            }
          }
          ++v44;
          ++v45;
          v79 += v35 != 0;
          ++v27;
          --v85;
        }
        while (v85);
        goto LABEL_178;
      case 5u:
        v90 = (unsigned __int8 *)v35;
        v91 = v47;
        do
        {
          if (*v44
            && (!v35
             || ((*v90 * *v44 + ((*v90 * *v44) >> 8) + 1) & 0xFF00) != 0))
          {
            *v27 = (unsigned __int16)(255 * *v27
                                    + ((255 * *v27) >> 8)
                                    + 1) >> 8;
          }
          ++v44;
          v90 += v35 != 0;
          ++v27;
          --v91;
        }
        while (v91);
        v92 = v127;
        if (!v35)
          v92 = 0;
        v35 = (char *)v128 + (_QWORD)v35 + v92;
        goto LABEL_179;
      case 6u:
        v79 = (unsigned __int8 *)v35;
        v93 = v47;
        do
        {
          v94 = *v44;
          if (*v44)
          {
            if (!v35
              || (v94 = ((unsigned __int16)(*v79 * (_WORD)v94 + ((*v79 * v94) >> 8) + 1) >> 8)) != 0)
            {
              v95 = *v27;
              if ((_BYTE)v95 != 0xFF)
              {
                if (~(_BYTE)v95 == 255)
                {
                  v96 = *v45
                      - ((*v45 * (v94 ^ 0xFF) + ((*v45 * (v94 ^ 0xFFu)) >> 8) + 1) >> 8);
                }
                else
                {
                  v97 = ((~(_BYTE)v95 * v94
                        + ((~(_BYTE)v95 * v94) >> 8)
                        + 1) >> 8)
                      * *v45;
                  v96 = v95 + ((v97 + (v97 >> 8) + 1) >> 8);
                }
                *v27 = v96;
              }
            }
          }
          ++v44;
          ++v45;
          v79 += v35 != 0;
          ++v27;
          --v93;
        }
        while (v93);
        goto LABEL_178;
      case 7u:
        v79 = (unsigned __int8 *)v35;
        v98 = v47;
        do
        {
          v99 = *v44;
          if (*v44)
          {
            if (v35)
              v99 = ((unsigned __int16)(*v79 * (_WORD)v99 + ((*v79 * v99) >> 8) + 1) >> 8);
            if (v99)
            {
              if (v99 == 255)
              {
                v100 = *v27
                     - (((*v45 ^ 0xFF) * *v27
                       + (((*v45 ^ 0xFF) * *v27) >> 8)
                       + 1) >> 8);
              }
              else
              {
                v101 = *v45 * v99 + ((*v45 * v99) >> 8) + 1;
                v100 = (((v99 ^ 0xFF) + (v101 >> 8)) * *v27
                      + ((((v99 ^ 0xFF) + (v101 >> 8)) * *v27) >> 8)
                      + 1) >> 8;
              }
              *v27 = v100;
            }
          }
          ++v44;
          ++v45;
          v79 += v35 != 0;
          ++v27;
          --v98;
        }
        while (v98);
        goto LABEL_178;
      case 8u:
        v79 = (unsigned __int8 *)v35;
        v102 = v47;
        do
        {
          v103 = *v44;
          if (*v44)
          {
            if (v35)
              v103 = ((unsigned __int16)(*v79 * (_WORD)v103 + ((*v79 * v103) >> 8) + 1) >> 8);
            if (v103)
            {
              if (v103 == 255)
              {
                v104 = *v27
                     - ((*v45 * *v27
                       + ((*v45 * *v27) >> 8)
                       + 1) >> 8);
              }
              else
              {
                v105 = (*v45 ^ 0xFF) * v103 + (((*v45 ^ 0xFFu) * v103) >> 8) + 1;
                v104 = (((v103 ^ 0xFF) + (v105 >> 8)) * *v27
                      + ((((v103 ^ 0xFF) + (v105 >> 8)) * *v27) >> 8)
                      + 1) >> 8;
              }
              *v27 = v104;
            }
          }
          ++v44;
          ++v45;
          v79 += v35 != 0;
          ++v27;
          --v102;
        }
        while (v102);
        goto LABEL_178;
      case 9u:
        v79 = (unsigned __int8 *)v35;
        v106 = v47;
        while (1)
        {
          v107 = *v44;
          if (*v44)
          {
            if (!v35)
              goto LABEL_151;
            v108 = *v79 * v107 + ((*v79 * v107) >> 8) + 1;
            if (BYTE1(v108))
              break;
          }
LABEL_152:
          ++v44;
          ++v45;
          v79 += v35 != 0;
          ++v27;
          if (!--v106)
          {
LABEL_178:
            v35 = (char *)v128 + (_QWORD)v79;
LABEL_179:
            v27 += v130;
            goto LABEL_180;
          }
        }
        v107 = v108 >> 8;
LABEL_151:
        v109 = ~(_BYTE)v107;
        v110 = *v45
             - ((unsigned __int16)(*v45 * ~(_BYTE)v107
                                 + ((*v45 * ~(_BYTE)v107) >> 8)
                                 + 1) >> 8);
        *v27 = (unsigned __int16)(v110 * (*v27 ^ 0xFF)
                                + (v110 + v109) * *v27
                                + ((v110 * (*v27 ^ 0xFF)
                                  + (v110 + v109) * *v27) >> 8)
                                + 1) >> 8;
        goto LABEL_152;
      case 0xAu:
        v79 = (unsigned __int8 *)v35;
        v111 = v47;
        do
        {
          v112 = *v44;
          if (*v44)
          {
            if (!v35
              || (v112 = ((unsigned __int16)(*v79 * (_WORD)v112 + ((*v79 * v112) >> 8) + 1) >> 8)) != 0)
            {
              v113 = *v45
                   - ((*v45 * (v112 ^ 0xFF) + ((*v45 * (v112 ^ 0xFFu)) >> 8) + 1) >> 8);
              *v27 = (unsigned __int16)(v113 * (*v27 ^ 0xFF)
                                      + ~(_BYTE)v113 * *v27
                                      + ((v113 * (*v27 ^ 0xFF)
                                        + ~(_BYTE)v113 * *v27) >> 8)
                                      + 1) >> 8;
            }
          }
          ++v44;
          ++v45;
          v79 += v35 != 0;
          ++v27;
          --v111;
        }
        while (v111);
        goto LABEL_178;
      case 0xBu:
        v79 = (unsigned __int8 *)v35;
        v114 = v47;
        do
        {
          v115 = *v44;
          if (*v44)
          {
            if (!v35
              || (v115 = ((unsigned __int16)(*v79 * (_WORD)v115 + ((*v79 * v115) >> 8) + 1) >> 8)) != 0)
            {
              v116 = *v27
                   + (*v45
                                     - ((unsigned __int16)(*v45 * (v115 ^ 0xFF)
                                                         + ((*v45 * (v115 ^ 0xFFu)) >> 8)
                                                         + 1) >> 8));
              if (v116 >= 0xFF)
                LOBYTE(v116) = -1;
              *v27 = v116;
            }
          }
          ++v44;
          ++v45;
          v79 += v35 != 0;
          ++v27;
          --v114;
        }
        while (v114);
        goto LABEL_178;
      case 0xCu:
        v79 = (unsigned __int8 *)v35;
        v117 = v47;
        do
        {
          v118 = *v44;
          if (*v44)
          {
            if (!v35
              || (v118 = ((unsigned __int16)(*v79 * (_WORD)v118 + ((*v79 * v118) >> 8) + 1) >> 8)) != 0)
            {
              v119 = *v27
                   + (*v45
                                     - ((unsigned __int16)(*v45 * (v118 ^ 0xFF)
                                                         + ((*v45 * (v118 ^ 0xFFu)) >> 8)
                                                         + 1) >> 8));
              if (v119 >= 0xFF)
                LOBYTE(v119) = -1;
              *v27 = v119;
            }
          }
          ++v44;
          ++v45;
          v79 += v35 != 0;
          ++v27;
          --v117;
        }
        while (v117);
        goto LABEL_178;
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
        if (*(_QWORD *)(v125 + 96))
        {
LABEL_30:
          v49 = *v44;
          v50 = v44 + 1;
          v51 = v27 - 1;
          v52 = v47;
          if (v35)
          {
            while (1)
            {
              if (!v49)
                goto LABEL_41;
              v53 = *v35 * v49 + ((*v35 * v49) >> 8) + 1;
              if (!BYTE1(v53))
                goto LABEL_41;
              if (BYTE1(v53) == 255)
              {
                v54 = *v45;
                if (*v45)
                {
                  if (v54 != 255)
                  {
                    v55 = v51[1];
                    v56 = v54 ^ 0xFF;
                    goto LABEL_39;
                  }
                  goto LABEL_40;
                }
              }
              else
              {
                v57 = v53 >> 8;
                v58 = *v45;
                v59 = (v57 ^ 0xFF) * v58 + (((v57 ^ 0xFF) * v58) >> 8) + 1;
                if (v58 != BYTE1(v59))
                {
                  v54 = v58 - (v59 >> 8);
                  v55 = v51[1];
                  v56 = ~(_BYTE)v54;
LABEL_39:
                  v54 += (v55 * v56 + ((v55 * v56) >> 8) + 1) >> 8;
LABEL_40:
                  v51[1] = v54;
                }
              }
LABEL_41:
              v60 = *v50++;
              v49 = v60;
              ++v45;
              ++v35;
              ++v51;
              if (!--v52)
                goto LABEL_62;
            }
          }
          while (1)
          {
            if (v49)
            {
              if (v49 == 255)
              {
                v61 = *v45;
                if (*v45)
                {
                  if (v61 != 255)
                  {
                    v62 = v51[1];
                    v63 = v61 ^ 0xFF;
                    goto LABEL_50;
                  }
                  goto LABEL_51;
                }
              }
              else
              {
                v64 = *v45;
                v65 = v64 * (v49 ^ 0xFF) + ((v64 * (v49 ^ 0xFFu)) >> 8) + 1;
                if (v64 != BYTE1(v65))
                {
                  v61 = v64 - (v65 >> 8);
                  v62 = v51[1];
                  v63 = ~(_BYTE)v61;
LABEL_50:
                  v61 += (v62 * v63 + ((v62 * v63) >> 8) + 1) >> 8;
LABEL_51:
                  v51[1] = v61;
                }
              }
            }
            v66 = *v50++;
            v49 = v66;
            ++v45;
            ++v51;
            if (!--v52)
              goto LABEL_69;
          }
        }
LABEL_54:
        v67 = *v44;
        v68 = v44 + 1;
        v51 = v27 - 1;
        v69 = v47;
        if (v35)
        {
          do
          {
            if (v67)
            {
              v70 = *v35 * v67 + ((*v35 * v67) >> 8) + 1;
              if (BYTE1(v70))
              {
                if (BYTE1(v70) == 255)
                  LOBYTE(v71) = *v45;
                else
                  v71 = ((v70 >> 8) * *v45
                       + ((v70 >> 8) ^ 0xFF) * v51[1]
                       + (((v70 >> 8) * *v45 + ((v70 >> 8) ^ 0xFF) * v51[1]) >> 8)
                       + 1) >> 8;
                v51[1] = v71;
              }
            }
            v72 = *v68++;
            v67 = v72;
            ++v45;
            ++v35;
            ++v51;
            --v69;
          }
          while (v69);
LABEL_62:
          v35 = (char *)v128 + (_QWORD)v35;
          goto LABEL_70;
        }
        do
        {
          if (v67)
          {
            if (v67 == 255)
              LOBYTE(v73) = *v45;
            else
              v73 = (*v45 * v67
                   + v51[1] * (v67 ^ 0xFF)
                   + ((*v45 * v67 + v51[1] * (v67 ^ 0xFFu)) >> 8)
                   + 1) >> 8;
            v51[1] = v73;
          }
          v74 = *v68++;
          v67 = v74;
          ++v45;
          ++v51;
          --v69;
        }
        while (v69);
LABEL_69:
        v35 = 0;
LABEL_70:
        v27 = &v51[v130 + 1];
LABEL_180:
        if (--v15)
        {
          v40 = 0;
          ++v33;
          v11 += *(_QWORD *)(a2 + 128);
          v12 += *(_QWORD *)(a2 + 136);
          if (v32)
            continue;
          goto LABEL_20;
        }
LABEL_189:
        if (v32)
          free(v32);
LABEL_191:
        if (v122)
          free(v122);
        return;
      default:
        goto LABEL_180;
    }
  }
}

uint64_t A8_sample_A8_inner(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned int v60;
  unint64_t v61;
  unsigned __int8 *v62;
  unsigned int v63;
  unsigned __int8 *v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 *v97;
  uint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v4 = *(_DWORD *)(result + 24);
  v5 = *(_QWORD *)(result + 112);
  v6 = *(_QWORD *)(result + 48);
  v7 = *(_QWORD *)(result + 56);
  if (v6)
  {
    v106 = *(_QWORD *)(result + 112);
    if (v5 > v6)
      v106 = v5 % v6;
  }
  else
  {
    v106 = 0;
  }
  v8 = *(_QWORD *)(result + 176);
  v9 = *(_QWORD *)(result + 120);
  v10 = *(_QWORD *)(result + 32);
  if (v7)
  {
    v105 = *(_QWORD *)(result + 120);
    if (v9 > v7)
      v105 = v9 % v7;
  }
  else
  {
    v105 = 0;
  }
  v101 = *(_QWORD *)(result + 80);
  v102 = *(_QWORD *)(result + 64);
  v103 = *(_QWORD *)(result + 88);
  v104 = *(_QWORD *)(result + 72);
  v11 = *(_QWORD *)(result + 152) - 1;
  v12 = *(_QWORD *)(result + 144) - 1;
  v100 = *(_DWORD *)(result + 188);
  v13 = v10 + *(unsigned int *)(result + 256) + ((*(_DWORD *)(result + 260) - 1) * v4) - 1;
  while (1)
  {
LABEL_10:
    if (a3 < v104)
    {
      v14 = *(_QWORD *)(result + 216);
      v15 = v104 - *(_QWORD *)(result + 224);
      v16 = a3 - v15 + (v14 >> 1);
      if (v16 < 1)
        goto LABEL_51;
      if (v16 >= v14)
        LODWORD(v17) = 0x3FFFFFFF;
      else
        v17 = (unint64_t)(*(_QWORD *)(result + 232) * v16) >> 32;
      v24 = v100 | v17;
      v25 = v15 + 0x1000000;
      v22 = a3 - (v15 + 0x1000000);
      v23 = 512;
      goto LABEL_21;
    }
    if (a3 <= v103)
    {
      v22 = 0;
      v23 = ((unint64_t)a3 >> 22) & 0x3C0;
      v24 = 0x3FFFFFFF;
      v25 = a3;
LABEL_21:
      v26 = v102;
      goto LABEL_24;
    }
    v18 = *(_QWORD *)(result + 216);
    v19 = *(_QWORD *)(result + 224) + v103;
    v20 = v19 - a3 + (v18 >> 1);
    if (v20 < 1)
      goto LABEL_51;
    if (v20 >= v18)
      LODWORD(v21) = 0x3FFFFFFF;
    else
      v21 = (unint64_t)(*(_QWORD *)(result + 232) * v20) >> 32;
    v26 = v102;
    v24 = v100 | v21;
    v25 = v19 - 0x1000000;
    v22 = a3 - (v19 - 0x1000000);
    v23 = 448;
LABEL_24:
    if (a2 >= v26)
      break;
    v27 = *(_QWORD *)(result + 192);
    v28 = v26 - *(_QWORD *)(result + 200);
    v29 = a2 - v28 + (v27 >> 1);
    if (v29 >= 1)
    {
      if (v29 < v27)
        v24 = ((v24 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v29) >> 32) >> 15)) | v100;
      v30 = v28 + 0x1000000;
      v31 = a2 - (v28 + 0x1000000);
      v32 = 32;
      goto LABEL_35;
    }
LABEL_51:
    --a4;
    a2 += v5;
    a3 += v9;
    ++v11;
    *(_BYTE *)++v12 = 0;
    if (!a4)
      return result;
  }
  if (a2 <= v101)
  {
    v31 = 0;
    v32 = ((unint64_t)a2 >> 26) & 0x3C;
    v30 = a2;
    goto LABEL_35;
  }
  v33 = *(_QWORD *)(result + 192);
  v34 = *(_QWORD *)(result + 200) + v101;
  v35 = v34 - a2 + (v33 >> 1);
  if (v35 < 1)
    goto LABEL_51;
  if (v35 < v33)
    v24 = ((v24 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v35) >> 32) >> 15)) | v100;
  v30 = v34 - 0x1000000;
  v31 = a2 - (v34 - 0x1000000);
  v32 = 28;
LABEL_35:
  if (v24 < 0x400000)
    goto LABEL_51;
  if (v6)
  {
    v36 = (v7 & ((v25 % v7) >> 63)) + v25 % v7;
    v37 = (v6 & ((v30 % v6) >> 63)) + v30 % v6;
    if (v36 >= v7)
      v38 = v7;
    else
      v38 = 0;
    v25 = v36 - v38;
    if (v37 >= v6)
      v39 = v6;
    else
      v39 = 0;
    v30 = v37 - v39;
    v22 += v25;
    v31 += v30;
  }
  v40 = v10 + SHIDWORD(v25) * (uint64_t)v4;
  v41 = v40 + (v30 >> 32);
  v42 = *(unsigned __int8 **)(result + 32);
  if (v13 >= v41)
    v43 = (unsigned __int8 *)(v40 + (v30 >> 32));
  else
    v43 = (unsigned __int8 *)v13;
  if (v43 < v42)
    v43 = *(unsigned __int8 **)(result + 32);
  v44 = *v43;
  if (v8)
  {
    v45 = *(_DWORD *)(v8 + (v32 | v23));
LABEL_53:
    v46 = v45 & 0xF;
    v47 = v45 >> 8;
    v48 = HIBYTE(v45) & 3;
    switch(v46)
    {
      case 1:
        LODWORD(v72) = SBYTE1(v45);
        if (v6)
        {
          v73 = v47 << 56;
          v74 = v22 + ((uint64_t)(char)v47 << 32);
          v75 = v7 & (v74 >> 63);
          if (v75 + v74 >= v7)
            v76 = v7;
          else
            v76 = 0;
          v72 = (v75 + (v73 >> 24) - v76) >> 32;
        }
        v77 = (unsigned __int8 *)(v41 + (int)v72 * (uint64_t)v4);
        if (v13 < (unint64_t)v77)
          v77 = (unsigned __int8 *)v13;
        if (v77 < v42)
          v77 = v42;
        v78 = interpolate_8888_19472[v48];
        v70 = v44 - ((v78 & v44) >> (v48 + 1));
        v71 = (v78 & *v77) >> (v48 + 1);
LABEL_88:
        LOBYTE(v44) = v70 + v71;
        break;
      case 2:
        v79 = SBYTE2(v45);
        if (v6)
        {
          v80 = v31 + ((uint64_t)SBYTE2(v45) << 32);
          v81 = v6 & (v80 >> 63);
          if (v81 + v80 >= v6)
            v82 = v6;
          else
            v82 = 0;
          v79 = (v81 + ((uint64_t)((unint64_t)HIWORD(v45) << 56) >> 24) - v82) >> 32;
        }
        v83 = (unsigned __int8 *)(v41 + v79);
        if (v13 < (unint64_t)v83)
          v83 = (unsigned __int8 *)v13;
        if (v83 < v42)
          v83 = v42;
        v44 = v44
            - ((interpolate_8888_19472[(v45 >> 28) & 3] & v44) >> (((v45 >> 28) & 3) + 1))
            + ((interpolate_8888_19472[(v45 >> 28) & 3] & *v83) >> (((v45 >> 28) & 3) + 1));
        break;
      case 3:
        v99 = HIBYTE(v45) & 3;
        LODWORD(v49) = SBYTE1(v45);
        v50 = SBYTE2(v45);
        if (v6)
        {
          v51 = v47 << 56;
          v52 = v22 + (v51 >> 24);
          v53 = v31 + ((uint64_t)SBYTE2(v45) << 32);
          v54 = v7 & (v52 >> 63);
          v55 = v6 & (v53 >> 63);
          v56 = v55 + v53;
          if (v54 + v52 >= v7)
            v57 = v7;
          else
            v57 = 0;
          if (v56 >= v6)
            v58 = v6;
          else
            v58 = 0;
          v49 = (v54 + (v51 >> 24) - v57) >> 32;
          v50 = (v55 + ((uint64_t)((unint64_t)HIWORD(v45) << 56) >> 24) - v58) >> 32;
        }
        v59 = (unsigned __int8 *)(v41 + v50);
        if (v13 < v41 + v50)
          v59 = (unsigned __int8 *)v13;
        if (v59 < v42)
          v59 = v42;
        v60 = *v59;
        v61 = v41 + (int)v49 * (uint64_t)v4;
        if (v13 >= v61)
          v62 = (unsigned __int8 *)(v41 + (int)v49 * (uint64_t)v4);
        else
          v62 = (unsigned __int8 *)v13;
        if (v62 < v42)
          v62 = v42;
        v63 = *v62;
        v64 = (unsigned __int8 *)(v61 + v50);
        if (v13 < (unint64_t)v64)
          v64 = (unsigned __int8 *)v13;
        if (v64 < v42)
          v64 = v42;
        v65 = interpolate_8888_19472[v99];
        v66 = v44 - ((v65 & v44) >> (v99 + 1)) + ((v65 & v63) >> (v99 + 1));
        v67 = v60 - ((v65 & v60) >> (v99 + 1)) + ((v65 & *v64) >> (v99 + 1));
        v68 = (v45 >> 28) & 3;
        v69 = interpolate_8888_19472[v68];
        LOBYTE(v68) = v68 + 1;
        v70 = v66 - ((v66 & v69) >> v68);
        v71 = (v67 & v69) >> v68;
        goto LABEL_88;
    }
  }
  *(_BYTE *)(v11 + 1) = v44;
  *(_BYTE *)(v12 + 1) = v24 >> 22;
  if (a4 != 1)
  {
    v84 = 0;
    a2 += v5;
    v85 = v101 - a2;
    a3 += v9;
    v86 = v103 - a3;
    v87 = --a4;
    while (1)
    {
      v88 = v12 + v84 + 1;
      v89 = v11 + v84 + 1;
      if ((v86 | v85 | (a3 - v104) | (a2 - v102)) < 0)
        break;
      if (v6)
      {
        v90 = (v7 & ((v22 + v105) >> 63)) + v22 + v105;
        v91 = (v6 & ((v31 + v106) >> 63)) + v31 + v106;
        if (v90 >= v7)
          v92 = v7;
        else
          v92 = 0;
        v93 = v90 - v92;
        if (v91 >= v6)
          v94 = v6;
        else
          v94 = 0;
        v95 = v91 - v94;
        v31 = v95;
        v22 = v93;
      }
      else
      {
        v95 = a2;
        HIDWORD(v93) = HIDWORD(a3);
      }
      v96 = v10 + SHIDWORD(v93) * (uint64_t)v4;
      v41 = v96 + (v95 >> 32);
      v42 = *(unsigned __int8 **)(result + 32);
      if (v13 >= v41)
        v97 = (unsigned __int8 *)(v96 + (v95 >> 32));
      else
        v97 = (unsigned __int8 *)v13;
      if (v97 < v42)
        v97 = *(unsigned __int8 **)(result + 32);
      v44 = *v97;
      if (v8)
      {
        v45 = *(_DWORD *)(v8 + (((unint64_t)a2 >> 26) & 0x3C | ((unint64_t)a3 >> 22) & 0x3C0));
        if ((v45 & 0xF) != 0)
        {
          v24 = -1;
          v11 = v89;
          v12 = v88;
          goto LABEL_53;
        }
      }
      --a4;
      *(_BYTE *)(v11 + v84 + 2) = v44;
      v98 = v12 + v84++;
      *(_BYTE *)(v98 + 2) = -1;
      a2 += v5;
      v85 -= v5;
      a3 += v9;
      v86 -= v9;
      if (v87 == (_DWORD)v84)
        return result;
    }
    v11 += v84 + 1;
    v12 += v84 + 1;
    if (a4)
      goto LABEL_10;
  }
  return result;
}

uint64_t A8_sample_ALPHA8(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unint64_t v65;
  unint64_t v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  unsigned __int8 *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  int v103;

  v4 = *(_QWORD *)(result + 40);
  v103 = *(_DWORD *)(result + 28);
  if (v4)
  {
    v5 = *(_QWORD *)(result + 176);
    v6 = *(_QWORD *)(result + 64);
    v7 = *(_QWORD *)(result + 72);
    v8 = *(_QWORD *)(result + 112);
    v9 = *(_QWORD *)(result + 120);
    v11 = *(_QWORD *)(result + 48);
    v10 = *(_QWORD *)(result + 56);
    v12 = v11 == 0;
    if (v11)
    {
      v100 = *(_QWORD *)(result + 112);
      if (v8 > v11)
        v100 = v8 % v11;
    }
    else
    {
      v100 = 0;
    }
    v97 = *(_QWORD *)(result + 80);
    v98 = *(_QWORD *)(result + 88);
    if (v10)
    {
      if (v9 <= v10)
        v99 = *(_QWORD *)(result + 120);
      else
        v99 = v9 % v10;
    }
    else
    {
      v99 = 0;
    }
  }
  else
  {
    v99 = 0;
    v100 = 0;
    v11 = 0;
    v5 = 0;
    v10 = 0;
    v6 = *(_QWORD *)(result + 64);
    v7 = *(_QWORD *)(result + 72);
    v97 = *(_QWORD *)(result + 80);
    v98 = *(_QWORD *)(result + 88);
    v12 = 1;
    v8 = *(_QWORD *)(result + 112);
    v9 = *(_QWORD *)(result + 120);
  }
  v96 = *(_DWORD *)(result + 188);
  v13 = *(_QWORD *)(result + 152) - 1;
  v14 = *(_QWORD *)(result + 144) - 1;
  v101 = *(_BYTE *)(result + 248);
  v102 = *(unsigned __int8 *)(result + 252);
  v15 = (unsigned __int8 *)(v4
                          + ((*(_DWORD *)(result + 256) - 1) << v101)
                          + ((*(_DWORD *)(result + 260) - 1) * v103));
  v16 = -v7;
  while (1)
  {
LABEL_13:
    if (a3 >= v7)
    {
      if (a3 <= v98)
      {
        v25 = 0;
        v26 = ((unint64_t)a3 >> 22) & 0x3C0;
        v27 = 0x3FFFFFFF;
        v28 = a3;
      }
      else
      {
        v21 = *(_QWORD *)(result + 216);
        v22 = *(_QWORD *)(result + 224) + v98;
        v23 = v22 - a3 + (v21 >> 1);
        if (v23 < 1)
          break;
        if (v23 >= v21)
          LODWORD(v24) = 0x3FFFFFFF;
        else
          v24 = (unint64_t)(*(_QWORD *)(result + 232) * v23) >> 32;
        v27 = v24 | v96;
        v28 = v22 - 0x1000000;
        v25 = a3 - (v22 - 0x1000000);
        v26 = 448;
      }
    }
    else
    {
      v17 = *(_QWORD *)(result + 216);
      v18 = v7 - *(_QWORD *)(result + 224);
      v19 = a3 - v18 + (v17 >> 1);
      if (v19 < 1)
        break;
      if (v19 >= v17)
        LODWORD(v20) = 0x3FFFFFFF;
      else
        v20 = (unint64_t)(*(_QWORD *)(result + 232) * v19) >> 32;
      v27 = v20 | v96;
      v28 = v18 + 0x1000000;
      v25 = a3 - (v18 + 0x1000000);
      v26 = 512;
    }
    if (a2 >= v6)
    {
      if (a2 <= v97)
      {
        v33 = 0;
        v34 = ((unint64_t)a2 >> 26) & 0x3C;
        v32 = a2;
      }
      else
      {
        v35 = *(_QWORD *)(result + 192);
        v36 = *(_QWORD *)(result + 200) + v97;
        v37 = v36 - a2 + (v35 >> 1);
        if (v37 < 1)
          break;
        if (v37 < v35)
          v27 = ((v27 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v37) >> 32) >> 15)) | v96;
        v32 = v36 - 0x1000000;
        v33 = a2 - (v36 - 0x1000000);
        v34 = 28;
      }
    }
    else
    {
      v29 = *(_QWORD *)(result + 192);
      v30 = v6 - *(_QWORD *)(result + 200);
      v31 = a2 - v30 + (v29 >> 1);
      if (v31 < 1)
        break;
      if (v31 < v29)
        v27 = ((v27 >> 15) * (((unint64_t)(*(_QWORD *)(result + 208) * v31) >> 32) >> 15)) | v96;
      v32 = v30 + 0x1000000;
      v33 = a2 - (v30 + 0x1000000);
      v34 = 32;
    }
    if (v27 < 0x400000)
      break;
    if (!v12)
    {
      v38 = (v10 & ((v28 % v10) >> 63)) + v28 % v10;
      v39 = (v11 & ((v32 % v11) >> 63)) + v32 % v11;
      if (v38 >= v10)
        v40 = v10;
      else
        v40 = 0;
      v28 = v38 - v40;
      if (v39 >= v11)
        v41 = v11;
      else
        v41 = 0;
      v32 = v39 - v41;
      v25 += v28;
      v33 += v32;
    }
    if (v4)
    {
      v42 = v4 + SHIDWORD(v28) * (uint64_t)v103 + (v32 >> 32 << v101);
      v43 = (unsigned __int8 *)(v42 + v102);
      if ((unint64_t)v15 < v42 + v102)
        v43 = v15;
      if ((unint64_t)v43 < *(_QWORD *)(result + 40))
        v43 = *(unsigned __int8 **)(result + 40);
      v44 = *v43;
      if (v5)
      {
LABEL_56:
        v45 = *(_DWORD *)(v5 + (v34 | v26));
LABEL_58:
        v46 = v45 & 0xF;
        v47 = v45 >> 8;
        v48 = HIBYTE(v45) & 3;
        switch(v46)
        {
          case 1:
            LODWORD(v71) = SBYTE1(v45);
            if (!v12)
            {
              v72 = v25 + ((uint64_t)(char)v47 << 32);
              v73 = v10 & (v72 >> 63);
              if (v73 + v72 >= v10)
                v74 = v10;
              else
                v74 = 0;
              v71 = (v73 + ((uint64_t)(char)v47 << 32) - v74) >> 32;
            }
            v75 = 255;
            if (v4)
            {
              v76 = (unsigned __int8 *)(v42 + (int)v71 * (uint64_t)v103 + v102);
              if (v15 < v76)
                v76 = v15;
              if ((unint64_t)v76 < *(_QWORD *)(result + 40))
                v76 = *(unsigned __int8 **)(result + 40);
              v75 = *v76;
            }
            v44 = v44
                - ((interpolate_8888_19472[v48] & v44) >> (v48 + 1))
                + ((interpolate_8888_19472[v48] & v75) >> (v48 + 1));
            break;
          case 2:
            v77 = SBYTE2(v45);
            if (!v12)
            {
              v78 = v33 + ((uint64_t)SBYTE2(v45) << 32);
              v79 = v11 & (v78 >> 63);
              if (v79 + v78 >= v11)
                v80 = v11;
              else
                v80 = 0;
              v77 = (v79 + ((uint64_t)((unint64_t)HIWORD(v45) << 56) >> 24) - v80) >> 32;
            }
            v81 = 255;
            if (v4)
            {
              v82 = v42 + (v77 << v101);
              if ((unint64_t)v15 < v82)
                v82 = (unint64_t)v15;
              if (v82 < *(_QWORD *)(result + 40))
                v82 = *(_QWORD *)(result + 40);
              v81 = *(unsigned __int8 *)(v82 + v102);
            }
            v44 = v44
                - ((interpolate_8888_19472[(v45 >> 28) & 3] & v44) >> (((v45 >> 28) & 3) + 1))
                + ((interpolate_8888_19472[(v45 >> 28) & 3] & v81) >> (((v45 >> 28) & 3) + 1));
            break;
          case 3:
            v94 = HIBYTE(v45) & 3;
            v95 = v7;
            LODWORD(v49) = SBYTE1(v45);
            v50 = SBYTE2(v45);
            if (!v12)
            {
              v51 = v47 << 56;
              v52 = (unint64_t)HIWORD(v45) << 56;
              v53 = v25 + ((uint64_t)SBYTE1(v45) << 32);
              v54 = v33 + (v52 >> 24);
              v55 = v10 & (v53 >> 63);
              v56 = v11 & (v54 >> 63);
              v57 = v56 + v54;
              if (v55 + v53 >= v10)
                v58 = v10;
              else
                v58 = 0;
              if (v57 >= v11)
                v59 = v11;
              else
                v59 = 0;
              v49 = (v55 + (v51 >> 24) - v58) >> 32;
              v50 = (v56 + (v52 >> 24) - v59) >> 32;
            }
            v60 = 255;
            v61 = 255;
            v62 = 255;
            if (v4)
            {
              v63 = v50 << v101;
              v64 = (unsigned __int8 *)(v42 + v102 + (v50 << v101));
              v65 = *(_QWORD *)(result + 40);
              if (v15 < v64)
                v64 = v15;
              if ((unint64_t)v64 < v65)
                v64 = *(unsigned __int8 **)(result + 40);
              v60 = *v64;
              v66 = v42 + (int)v49 * (uint64_t)v103 + v102;
              if ((unint64_t)v15 >= v66)
                v67 = (unsigned __int8 *)(v42 + (int)v49 * (uint64_t)v103 + v102);
              else
                v67 = v15;
              if ((unint64_t)v67 < v65)
                v67 = *(unsigned __int8 **)(result + 40);
              v61 = *v67;
              v68 = (unsigned __int8 *)(v66 + v63);
              if (v15 < v68)
                v68 = v15;
              if ((unint64_t)v68 < v65)
                v68 = *(unsigned __int8 **)(result + 40);
              v62 = *v68;
            }
            v69 = interpolate_8888_19472[v94];
            v70 = (v45 >> 28) & 3;
            v44 = v44
                - ((v69 & v44) >> (v94 + 1))
                + ((v69 & v61) >> (v94 + 1))
                - (((v44 - ((v69 & v44) >> (v94 + 1)) + ((v69 & v61) >> (v94 + 1))) & interpolate_8888_19472[v70]) >> (v70 + 1))
                + (((v60 - ((v69 & v60) >> (v94 + 1)) + ((v69 & v62) >> (v94 + 1))) & interpolate_8888_19472[v70]) >> (v70 + 1));
            v7 = v95;
            break;
        }
      }
    }
    else
    {
      v42 = 0;
      v44 = 255;
      if (v5)
        goto LABEL_56;
    }
    *(_BYTE *)(v13 + 1) = v44;
    *(_BYTE *)(v14 + 1) = v27 >> 22;
    if (a4 == 1)
      return result;
    v83 = 0;
    a2 += v8;
    v84 = v97 - a2;
    a3 += v9;
    v85 = v98 - a3;
    while ((((a2 - v6) | v84 | (v16 + a3) | v85) & 0x8000000000000000) == 0)
    {
      if (v12)
      {
        v86 = a2;
        HIDWORD(v87) = HIDWORD(a3);
        if (!v4)
          goto LABEL_127;
      }
      else
      {
        v89 = (v10 & ((v25 + v99) >> 63)) + v25 + v99;
        v90 = (v11 & ((v33 + v100) >> 63)) + v33 + v100;
        if (v89 >= v10)
          v91 = v10;
        else
          v91 = 0;
        v87 = v89 - v91;
        if (v90 >= v11)
          v92 = v11;
        else
          v92 = 0;
        v86 = v90 - v92;
        v33 = v86;
        v25 = v87;
        if (!v4)
        {
LABEL_127:
          v44 = 255;
          if (!v5)
            goto LABEL_129;
          goto LABEL_128;
        }
      }
      v42 = v4 + SHIDWORD(v87) * (uint64_t)v103 + (v86 >> 32 << v101);
      v88 = (unsigned __int8 *)(v42 + v102);
      if ((unint64_t)v15 < v42 + v102)
        v88 = v15;
      if ((unint64_t)v88 < *(_QWORD *)(result + 40))
        v88 = *(unsigned __int8 **)(result + 40);
      v44 = *v88;
      if (!v5)
        goto LABEL_129;
LABEL_128:
      v45 = *(_DWORD *)(v5 + (((unint64_t)a3 >> 22) & 0x3C0 | ((unint64_t)a2 >> 26) & 0x3C));
      if ((v45 & 0xF) != 0)
      {
        v14 += v83 + 1;
        v13 += v83 + 1;
        a4 += ~(_DWORD)v83;
        v27 = -1;
        goto LABEL_58;
      }
LABEL_129:
      *(_BYTE *)(v13 + v83 + 2) = v44;
      v93 = v14 + v83++;
      a2 += v8;
      *(_BYTE *)(v93 + 2) = -1;
      v84 -= v8;
      a3 += v9;
      v85 -= v9;
      if (a4 - 1 == (_DWORD)v83)
        return result;
    }
    v14 += v83 + 1;
    v13 += v83 + 1;
    a4 += ~(_DWORD)v83;
    if (!a4)
      return result;
  }
  --a4;
  a2 += v8;
  a3 += v9;
  ++v13;
  *(_BYTE *)++v14 = 0;
  if (a4)
    goto LABEL_13;
  return result;
}

void A8_shade_axial_A(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  int v11;
  unsigned int v12;
  _DWORD *v13;
  _BYTE *v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  _WORD *v30;
  unsigned __int16 *v31;
  unsigned __int16 *v32;
  unsigned int v33;
  int v34;
  __int16 v35;
  __int16 v36;
  int v37;
  int v38;

  v5 = *(float *)(a1 + 280);
  v6 = *(float *)(a1 + 296)
     + (float)((float)(*(float *)(a1 + 288) * (float)(*(float *)(*(_QWORD *)(a1 + 272) + 4) * (float)a3))
             + (float)(v5 * (float)(*(float *)(*(_QWORD *)(a1 + 272) + 4) * (float)a2)));
  v7 = *(float *)(a1 + 336);
  v8 = *(float *)(a1 + 344);
  v9 = *(float *)(a1 + 304);
  v10 = *(float *)(a1 + 308);
  v11 = *(_DWORD *)(a1 + 320);
  v12 = *(_DWORD *)(a1 + 324);
  v15 = a1 + 144;
  v13 = *(_DWORD **)(a1 + 144);
  v14 = *(_BYTE **)(v15 + 8);
  v17 = *(_QWORD *)(a1 + 368);
  v16 = *(_WORD **)(a1 + 376);
  v18 = a1 + 368;
  v19 = *(_QWORD *)(a1 + 360);
  v20 = v17 + (((unint64_t)a3 >> 4) & 0xF0);
  v21 = (a2 >> 8) & 0xF;
  if (v17)
    v22 = 15;
  else
    v22 = 0;
  if (v17)
    v23 = v20;
  else
    v23 = v18;
  if (v5 != 0.0)
  {
    if (!v17)
      LOBYTE(v21) = 0;
    while (1)
    {
      v29 = v11;
      if (v6 >= v9)
      {
        v29 = v12;
        if (v6 <= v10)
          v29 = (int)(float)(v8 * (float)(v6 - v7));
      }
      if ((v29 & 0x80000000) == 0)
        break;
      v30 = v16;
      if (v16)
        goto LABEL_37;
LABEL_38:
      LOBYTE(v21) = (v21 + 1) & v22;
      v6 = v5 + v6;
      ++v14;
      *(_BYTE *)v13 = (_BYTE)v30;
      v13 = (_DWORD *)((char *)v13 + 1);
      if (!--a4)
        return;
    }
    v30 = (_WORD *)(v19 + 2 * v29);
LABEL_37:
    *v14 = (unsigned __int16)(*(unsigned __int8 *)(v23 + v21) + *v30) >> 8;
    LOBYTE(v30) = -1;
    goto LABEL_38;
  }
  if (v17)
    v24 = 15;
  else
    v24 = 0;
  if (v17)
    LODWORD(v25) = (a2 >> 8) & 0xF;
  else
    LODWORD(v25) = 0;
  if (v17)
    LODWORD(v26) = (BYTE1(a2) + 1) & 0xF;
  else
    LODWORD(v26) = 0;
  if (v17)
    v27 = v20;
  else
    v27 = v18;
  if (v6 >= v9)
  {
    v11 = v12;
    if (v6 <= v10)
      v11 = (int)(float)(v8 * (float)(v6 - v7));
  }
  if ((v11 & 0x80000000) == 0 || v16)
  {
    v31 = (unsigned __int16 *)(v19 + 2 * v11);
    if (v11 < 0)
      v32 = v16;
    else
      v32 = v31;
    v33 = *v32;
    if (v17)
    {
      v34 = a4 + 4;
      do
      {
        v35 = *(unsigned __int8 *)(v27 + v26) + (_WORD)v33;
        *v14 = (unsigned __int16)(*(unsigned __int8 *)(v27 + v25) + (_WORD)v33) >> 8;
        v25 = ((_DWORD)v25 + 1) & v24;
        v14[1] = HIBYTE(v35);
        v26 = ((_DWORD)v26 + 1) & v24;
        v36 = *(unsigned __int8 *)(v27 + v26) + (_WORD)v33;
        v14[2] = (unsigned __int16)(*(unsigned __int8 *)(v27 + v25) + (_WORD)v33) >> 8;
        v14[3] = HIBYTE(v36);
        *v13++ = -1;
        v14 += 4;
        v34 -= 4;
      }
      while (v34 > 4);
    }
    else
    {
      v37 = a4 + 4;
      v38 = 16843009 * (v33 >> 8);
      do
      {
        *(_DWORD *)v14 = v38;
        v14 += 4;
        *v13++ = -1;
        v37 -= 4;
      }
      while (v37 > 4);
    }
  }
  else
  {
    if (a4 >= 4)
      v28 = 4;
    else
      v28 = a4;
    bzero(v13, ((a4 - v28 + 3) & 0xFFFFFFFC) + 4);
  }
}

void *__cdecl CGBitmapContextGetData(CGContextRef context)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (context && *((_DWORD *)context + 4) == 1129601108 && *((_DWORD *)context + 6) == 4)
    return *(void **)(*((_QWORD *)context + 4) + 64);
  handle_invalid_context((char)"CGBitmapContextGetData", (uint64_t)context, v1, v2, v3, v4, v5, v6);
  return 0;
}

CGGradientRef CGGradientCreateWithColors(CGColorSpaceRef space, CFArrayRef colors, const CGFloat *locations)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return (CGGradientRef)CGGradientCreateWithColorsAndOptions(space, colors, (uint64_t)locations, 0, v3, v4, v5, v6);
}

BOOL CGvImage_converter_data_key_is_equal(__int128 *a1, __int128 *a2)
{
  unint64_t v2;
  unint64_t v5;
  _BOOL8 result;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  double v16;
  double v17;
  unint64_t v18;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  double v25;
  double v26;
  unint64_t v27;
  _BOOL4 v28;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v40 = *a2;
  v41 = *a1;
  v38 = a2[1];
  v39 = a1[1];
  v2 = *((_QWORD *)a1 + 14);
  if (v2 != *((_QWORD *)a2 + 14))
    return 0;
  v5 = *((_QWORD *)a1 + 15);
  if (v5 != *((_QWORD *)a2 + 15))
    return 0;
  if ((_QWORD)v41 != (_QWORD)v40 || *((_QWORD *)&v41 + 1) != *((_QWORD *)&v40 + 1))
    return 0;
  if ((_QWORD)v39 != (_QWORD)v38 || *((_QWORD *)&v39 + 1) != *((_QWORD *)&v38 + 1))
    return 0;
  result = 0;
  if (*((_DWORD *)a1 + 8) == *((_DWORD *)a2 + 8)
    && *((_DWORD *)a1 + 9) == *((_DWORD *)a2 + 9)
    && *((_DWORD *)a1 + 16) == *((_DWORD *)a2 + 16)
    && *((_DWORD *)a1 + 12) == *((_DWORD *)a2 + 12))
  {
    v9 = *((_DWORD *)a1 + 18);
    v10 = *((_DWORD *)a1 + 19);
    v11 = *((_DWORD *)a1 + 26);
    v13 = *((_DWORD *)a2 + 18);
    v12 = *((_DWORD *)a2 + 19);
    v34 = *((_QWORD *)a2 + 10);
    v35 = *((_QWORD *)a1 + 10);
    v36 = *((_DWORD *)a2 + 22);
    v37 = *((_DWORD *)a1 + 22);
    v14 = *((_DWORD *)a2 + 26);
    v32 = *((unsigned __int8 *)a1 + 641);
    v33 = *((unsigned __int8 *)a1 + 640);
    v30 = *((unsigned __int8 *)a2 + 641);
    v31 = *((unsigned __int8 *)a2 + 640);
    result = CGColorSpaceEqualToColorSpace(*((_QWORD *)a1 + 5), *((_QWORD *)a2 + 5));
    if (result)
    {
      result = 0;
      if (v9 == v13 && v10 == v12 && v11 == v14 && v37 == v36)
      {
        result = CGColorSpaceEqualToColorSpace(v35, v34);
        if (result)
        {
          if (v2)
          {
            v15 = 16;
            do
            {
              v16 = *((double *)a1 + v15);
              v17 = *((double *)a2 + v15);
              v18 = v15 - 15;
              ++v15;
            }
            while (v16 == v17 && v18 < v2);
            if (v16 != v17)
              return 0;
          }
          if (v5)
          {
            v20 = 48;
            v22 = v32;
            v21 = v33;
            v24 = v30;
            v23 = v31;
            do
            {
              v25 = *((double *)a1 + v20);
              v26 = *((double *)a2 + v20);
              v27 = v20 - 47;
              v28 = v25 == v26;
              ++v20;
            }
            while (v25 == v26 && v27 < v5);
          }
          else
          {
            v28 = 1;
            v22 = v32;
            v21 = v33;
            v24 = v30;
            v23 = v31;
          }
          if (v21 != v23)
            v28 = 0;
          return v22 == v24 && v28;
        }
      }
    }
  }
  return result;
}

int CGFontGetXHeight(CGFontRef font)
{
  _DWORD *font_info;

  font_info = get_font_info(font);
  if (font_info)
    LODWORD(font_info) = font_info[7];
  return (int)font_info;
}

CGImageAlphaInfo CGImageGetAlphaInfo(CGImageRef image)
{
  CGImageRef v1;
  CFTypeID v2;

  if (image)
  {
    v1 = image;
    v2 = CFGetTypeID(image);
    if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1)
      dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_211);
    if (v2 == CGImageGetTypeID_image_type_id)
      LODWORD(image) = *((_DWORD *)v1 + 8) & 0x1F;
    else
      LODWORD(image) = 0;
  }
  return image;
}

void argb32_mark_pixelshape_template(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(int, int, int, int, int, int, int, int, uint64_t);
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  _BOOL4 v50;
  uint64_t (*v51)(int, int, int, int, int, int, int, int, uint64_t);
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  int v58;

  if ((a2 & 0x80000000) != 0)
    return;
  if (a2 > 0x17)
    v2 = (uint64_t (*)(int, int, int, int, int, int, int, int, uint64_t))vec::template_mark_pixelshape_row<(CGCompositeOperation)0,_rgba8_t>;
  else
    v2 = vec::MethodList<_rgba8_t>::shapeMethods[a2];
  v51 = v2;
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_DWORD *)(a1 + 8);
  v5 = v3;
  v57 = v4;
  v58 = v3;
  v6 = *(int *)(a1 + 28);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 88);
  v9 = *(_QWORD *)(a1 + 96);
  v55 = v10;
  v11 = *(int **)(a1 + 136);
  v12 = *(unsigned __int8 *)(a1 + 1) << 8;
  v13 = v6 >> 2;
  v50 = v8 != 0;
  v14 = v7 + 4 * (*(int *)(a1 + 12) + (v6 >> 2) * *(int *)(a1 + 16));
  v56 = v14;
  v15 = *(_DWORD *)(a1 + 104);
  v16 = *(_DWORD *)(a1 + 108);
  v17 = *(int *)(a1 + 56);
  v18 = *(int *)(a1 + 60);
  v19 = *(int *)(a1 + 76);
  if (v12 != 256)
  {
    v52 = *(unsigned int *)(a1 + 64);
    v24 = v19 >> 2;
    v25 = (v19 >> 2) * *(int *)(a1 + 68);
    v44 = *(_DWORD *)(a1 + 68);
    v54 = v10;
    v26 = v10 + 4 * v25;
    v27 = v9 != 0;
    if (v11)
    {
      v23 = 1;
      v21 = v10;
      goto LABEL_22;
    }
    v47 = v14;
    if (v10)
    {
      v45 = 0;
      v46 = v10;
      v28 = v10 + 4 * v24 * ((int)v18 % v44);
      v21 = v28 + 4 * ((int)v17 % (int)v52);
      v29 = v28 + 4 * (int)v52;
      v54 = v29;
      v55 = v21;
      v23 = 1;
      v10 = v21;
      goto LABEL_26;
    }
    v29 = 0;
    v21 = 0;
    v23 = 1;
LABEL_25:
    v26 = 0;
    v45 = 0;
    v46 = v21;
    v10 = 0;
    v24 -= v5;
    goto LABEL_26;
  }
  v20 = v19 >> 2;
  v21 = v10 + 4 * (v17 + v20 * v18);
  v54 = -1;
  v55 = v21;
  v52 = v20;
  if (v20 != v13)
  {
    v23 = 1;
    goto LABEL_20;
  }
  if ((uint64_t)(v14 - v21) >= 1)
  {
    if (v3 >= (uint64_t)((v14 - v21) >> 2))
    {
      v14 += 4 * (v3 - 1);
      v56 = v14;
      v21 += 4 * (v3 - 1);
      v55 = v21;
      v23 = 0xFFFFFFFFLL;
      goto LABEL_19;
    }
    v22 = v13 * (v4 - 1);
    if (v14 <= v21 + 4 * v22 + 4 * (v3 - 1))
    {
      v14 += 4 * v22;
      v56 = v14;
      v13 = -(uint64_t)v13;
      v55 = v21 + 4 * v22;
      v23 = 1;
      v21 = v55;
      goto LABEL_19;
    }
  }
  v23 = 1;
LABEL_19:
  v52 = v13;
LABEL_20:
  v27 = v9 != 0;
  if (!v11)
  {
    v47 = v14;
    v44 = 0;
    v5 = (int)v23 * v3;
    v29 = -1;
    v24 = v52;
    goto LABEL_25;
  }
  v26 = 0;
  v10 = 0;
  v44 = 0;
  v24 = v52;
LABEL_22:
  shape_enum_clip_alloc(a1, a2, v11, v23, v13, 1, v15, v16, v3, v4);
  v31 = v30;
  if (v30)
  {
    while (shape_enum_clip_next((uint64_t)v31, (int *)&v53 + 1, &v53, &v58, &v57))
    {
      v46 = v21;
      v47 = v14;
      v45 = v31;
      if (v26)
      {
        v41 = v14 + 4 * v13 * (int)v53 + 4 * SHIDWORD(v53);
        v3 = v58;
        v42 = v21 + 4 * v24 * (((int)v53 + *(_DWORD *)(a1 + 60)) % v44);
        v21 = v42 + 4 * ((HIDWORD(v53) + *(_DWORD *)(a1 + 56)) % (int)v52);
        v29 = v42 + 4 * (int)v52;
        v54 = v29;
        LODWORD(v5) = v58;
        v10 = v21;
      }
      else
      {
        v3 = v58;
        LODWORD(v5) = v58 * v23;
        v41 = v14 + 4 * v13 * (int)v53 + 4 * HIDWORD(v53) * (int)v23;
        v21 += 4 * (int)v53 * (int)v52 + 4 * HIDWORD(v53) * (int)v23;
        v24 = (int)v52 - v58 * (int)v23;
        v29 = v54;
      }
      v56 = v41;
      v55 = v21;
      v5 = (int)v5;
      v4 = v57;
LABEL_26:
      v49 = v13;
      v32 = v13 - v5;
      v33 = v3 & ~(v3 >> 31);
      if ((unint64_t)(v29 - v21) >> 2 >= v33)
        v34 = v33;
      else
        v34 = (unint64_t)(v29 - v21) >> 2;
      v35 = v33 - v34;
      if (v4 >= 1)
        v36 = 1;
      else
        v36 = v4;
      v48 = v36;
      v37 = v4 + 1;
      do
      {
        v51((int)&v55, (int)&v56, (int)&v54, v52, v23, v27, v50, v35, v34);
        v56 += 4 * v32;
        if (v26)
        {
          v38 = v10 + 4 * v24;
          if (v38 >= v26)
            v39 = -(uint64_t)(v24 * v44);
          else
            v39 = 0;
          v40 = v38 + 4 * v39;
          v54 += 4 * v39 + 4 * v24;
          v10 = v40;
        }
        else
        {
          v40 = v55 + 4 * v24;
        }
        v55 = v40;
        --v37;
      }
      while (v37 > 1);
      v57 = v48 - 1;
      v13 = v49;
      v21 = v46;
      v14 = v47;
      v31 = v45;
      if (!v45)
        return;
      v53 = 0;
    }
    free(v31);
  }
}

_DWORD **vec::template_mark_pixelshape_row<(CGCompositeOperation)7,_rgba8_t>(_DWORD **result, unsigned __int32 **a2, unint64_t *a3, int a4, int a5, int8x16_t a6, double a7, uint16x8_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  unint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  unsigned __int32 *v15;
  uint64_t v16;
  uint16x8_t v17;
  uint8x16_t v18;
  uint8x16_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint64_t v24;
  uint16x8_t v25;
  int8x16_t v26;
  unsigned int v27;
  uint16x8_t v28;
  _DWORD *v29;
  uint64_t v30;

  v12 = a12;
  v13 = *result;
  v14 = *a3;
  v15 = *a2;
  if (a12 >= 4)
  {
    v16 = 0;
    a6.i64[1] = 0xF0F0F0F0B0B0B0BLL;
    v17 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v18 = *(uint8x16_t *)&v15[v16];
      v19 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)&v13[v16], (int8x16_t)xmmword_185004A40);
      v20 = vmull_u8(*(uint8x8_t *)v18.i8, *(uint8x8_t *)v19.i8);
      v21 = vmull_high_u8(v18, v19);
      v22 = vminq_u16(v20, v17);
      v23 = vminq_u16(v21, v17);
      a8 = vrsraq_n_u16(v23, v23, 8uLL);
      *(uint8x16_t *)&v15[v16] = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v22, v22, 8uLL), 8uLL), a8, 8uLL);
      v12 -= 4;
      v16 += 4 * a5;
    }
    while (v12 > 3);
    v15 = (unsigned __int32 *)((char *)v15 + v16 * 4);
    v13 = (_DWORD *)((char *)v13 + v16 * 4);
  }
  v24 = v12 + a11;
  if (v24)
  {
    a6.i64[0] = -4244438269;
    v25 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a8.i32[0] = *v15;
      v26 = (int8x16_t)vmovl_u8(*(uint8x8_t *)a8.i8);
      LOBYTE(v27) = v26.i8[0];
      BYTE1(v27) = v26.i8[2];
      BYTE2(v27) = v26.i8[4];
      HIBYTE(v27) = v26.i8[6];
      v26.i32[0] = *v13;
      v26.i64[1] = v26.i64[0];
      v28 = vminq_u16(vmull_u8((uint8x8_t)v27, (uint8x8_t)vqtbl1_s8(v26, (int8x8_t)-4244438269)), v25);
      a8 = vrsraq_n_u16(v28, v28, 8uLL);
      *(uint8x8_t *)a8.i8 = vqrshrn_n_u16(a8, 8uLL);
      *(int8x8_t *)a8.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a8, a6));
      *v15 = a8.i32[0];
      v29 = &v13[a5];
      if ((unint64_t)v29 >= v14)
        v30 = -(uint64_t)a4;
      else
        v30 = 0;
      v13 = &v29[v30];
      v15 += a5;
      --v24;
    }
    while (v24);
  }
  *result = v13;
  *a3 = v14;
  *a2 = v15;
  return result;
}

unsigned __int32 **vec::template_mark_pixelshape_row<(CGCompositeOperation)15,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, int a4, int a5, int a6, int a7, uint64_t a8, int8x16_t a9, double a10, double a11, double a12, double a13, int8x16_t a14, unint64_t a15)
{
  unint64_t v15;
  unsigned __int32 *v16;
  unint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  unsigned int v20;
  int8x16_t v21;
  unsigned int v22;
  int8x16_t v23;
  uint16x8_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  uint8x16_t v31;
  uint8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  int8x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  unsigned int v44;
  unsigned int v45;
  int8x8_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x8_t v49;
  int8x8_t v50;
  int8x16_t v51;
  uint16x8_t v52;
  unsigned __int32 *v53;
  uint64_t v54;

  v15 = a15;
  v16 = *result;
  v17 = *a3;
  v18 = *a2;
  if (a15 >= 4)
  {
    v19 = 0;
    if (a6)
      v20 = 0;
    else
      v20 = -1;
    v21.i64[0] = 0xFF000000FF000000;
    v21.i64[1] = 0xFF000000FF000000;
    a9 = vandq_s8(vdupq_n_s8(v20), v21);
    if (a7)
      v22 = 0;
    else
      v22 = -1;
    v23 = vandq_s8(vdupq_n_s8(v22), v21);
    v24 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      v25 = vorrq_s8(*(int8x16_t *)&v16[v19], a9);
      v26 = vorrq_s8(*(int8x16_t *)&v18[v19], v23);
      v27 = vqtbl1q_s8(v25, (int8x16_t)xmmword_185004A40);
      v28 = vqtbl1q_s8(v26, (int8x16_t)xmmword_185004A40);
      v29 = (int8x16_t)vminq_u8((uint8x16_t)v25, (uint8x16_t)v27);
      v30 = (int8x16_t)vminq_u8((uint8x16_t)v26, (uint8x16_t)v28);
      v31 = (uint8x16_t)vsubq_s8(v27, v29);
      v32 = (uint8x16_t)vsubq_s8(v28, v30);
      v33 = (int8x16_t)vcgtq_u8(vrhaddq_u8((uint8x16_t)v28, (uint8x16_t)0), (uint8x16_t)v30);
      v34 = (int8x16_t)vqaddq_u16(vmull_u8(*(uint8x8_t *)v31.i8, *(uint8x8_t *)v30.i8), vmull_u8(*(uint8x8_t *)v32.i8, *(uint8x8_t *)v29.i8));
      v35 = (int8x16_t)vqaddq_u16(vmull_high_u8(v31, (uint8x16_t)v30), vmull_high_u8(v32, (uint8x16_t)v29));
      v36 = vminq_u16((uint16x8_t)vbslq_s8((int8x16_t)vmovl_s8(*(int8x8_t *)v33.i8), v34, (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)v27.i8, *(uint8x8_t *)v28.i8), (uint16x8_t)v34)), v24);
      v37 = vminq_u16((uint16x8_t)vbslq_s8((int8x16_t)vmovl_high_s8(v33), v35, (int8x16_t)vqsubq_u16(vmull_high_u8((uint8x16_t)v27, (uint8x16_t)v28), (uint16x8_t)v35)), v24);
      a14 = vbslq_s8(vceqzq_s8(v27), v26, vbslq_s8(vceqzq_s8(v28), v25, vsubq_s8(vaddq_s8(v30, v29), (int8x16_t)vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v36, v36, 8uLL), 8uLL), vrsraq_n_u16(v37, v37, 8uLL), 8uLL))));
      *(int8x16_t *)&v18[v19] = a14;
      v15 -= 4;
      v19 += 4 * a5;
    }
    while (v15 > 3);
    v18 = (_DWORD *)((char *)v18 + v19 * 4);
    v16 = (unsigned __int32 *)((char *)v16 + v19 * 4);
  }
  v38 = v15 + a8;
  if (v38)
  {
    if (a6)
      v39 = 0;
    else
      v39 = -1;
    *(int8x8_t *)a9.i8 = vand_s8(vdup_n_s8(v39), (int8x8_t)0xFF000000FF000000);
    if (a7)
      v40 = 0;
    else
      v40 = -1;
    v41 = vand_s8(vdup_n_s8(v40), (int8x8_t)0xFF000000FF000000);
    v42 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a14.i32[0] = *v16;
      v43 = vmovl_u8(*(uint8x8_t *)a14.i8);
      LOBYTE(v44) = v43.i8[0];
      BYTE1(v44) = v43.i8[2];
      BYTE2(v44) = v43.i8[4];
      HIBYTE(v44) = v43.i8[6];
      v43.i32[0] = *v18;
      a14 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v43.i8);
      LOBYTE(v45) = a14.i8[0];
      BYTE1(v45) = a14.i8[2];
      BYTE2(v45) = a14.i8[4];
      HIBYTE(v45) = a14.i8[6];
      *(int8x8_t *)a14.i8 = vorr_s8((int8x8_t)v44, *(int8x8_t *)a9.i8);
      v46 = vorr_s8((int8x8_t)v45, v41);
      v47.i64[0] = a14.i64[0];
      v47.i64[1] = a14.i64[0];
      *(int8x8_t *)v47.i8 = vqtbl1_s8(v47, (int8x8_t)0x707070703030303);
      *(int8x8_t *)v48.i8 = v46;
      v48.u64[1] = (unint64_t)v46;
      *(int8x8_t *)v48.i8 = vqtbl1_s8(v48, (int8x8_t)0x707070703030303);
      v49 = (int8x8_t)vmin_u8(*(uint8x8_t *)a14.i8, *(uint8x8_t *)v47.i8);
      v50 = (int8x8_t)vmin_u8((uint8x8_t)v46, *(uint8x8_t *)v48.i8);
      v51 = (int8x16_t)vqaddq_u16(vmull_u8((uint8x8_t)vsub_s8(*(int8x8_t *)v47.i8, v49), (uint8x8_t)v50), vmull_u8((uint8x8_t)vsub_s8(*(int8x8_t *)v48.i8, v50), (uint8x8_t)v49));
      v52 = vminq_u16((uint16x8_t)vbslq_s8((int8x16_t)vmovl_s8((int8x8_t)vcgt_u8(vrhadd_u8(*(uint8x8_t *)v48.i8, 0), (uint8x8_t)v50)), v51, (int8x16_t)vqsubq_u16(vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v48.i8), (uint16x8_t)v51)), v42);
      *(int8x8_t *)a14.i8 = vbsl_s8(vceqz_s8(*(int8x8_t *)v47.i8), v46, vbsl_s8(vceqz_s8(*(int8x8_t *)v48.i8), *(int8x8_t *)a14.i8, vsub_s8(vadd_s8(v50, v49), (int8x8_t)vqrshrn_n_u16(vrsraq_n_u16(v52, v52, 8uLL), 8uLL))));
      *(int8x8_t *)a14.i8 = vmovn_s16((int16x8_t)vzip1q_s8(a14, a9));
      *v18 = a14.i32[0];
      v53 = &v16[a5];
      if ((unint64_t)v53 >= v17)
        v54 = -(uint64_t)a4;
      else
        v54 = 0;
      v16 = &v53[v54];
      v18 += a5;
      --v38;
    }
    while (v38);
  }
  *result = v16;
  *a3 = v17;
  *a2 = v18;
  return result;
}

size_t CGBitmapContextGetBytesPerRow(CGContextRef context)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (context && *((_DWORD *)context + 4) == 1129601108 && *((_DWORD *)context + 6) == 4)
    return *(_QWORD *)(*((_QWORD *)context + 4) + 88);
  handle_invalid_context((char)"CGBitmapContextGetBytesPerRow", (uint64_t)context, v1, v2, v3, v4, v5, v6);
  return 0;
}

double CGFontGetUnderlineThickness(_QWORD *a1)
{
  double *font_info;

  font_info = (double *)get_font_info(a1);
  if (font_info)
    return font_info[9];
  else
    return 0.0;
}

double CGFontGetUnderlinePosition(_QWORD *a1)
{
  double *font_info;

  font_info = (double *)get_font_info(a1);
  if (font_info)
    return font_info[8];
  else
    return 0.0;
}

_QWORD *CGFontGetGlyphAdvancesForStyle(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v11;
  _BYTE *font_info;

  if (result)
  {
    v11 = result;
    font_info = get_font_info(result);
    if (font_info)
    {
      if (font_info[104])
        a3 = a3 & 0xFFFFFFFE;
      else
        a3 = a3;
    }
    return (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11[2] + 304))(v11[14], a2, a3, a4, a5, a6);
  }
  return result;
}

uint64_t argb32_mark_pixelmask_template(uint64_t result, unsigned int a2)
{
  uint64_t *(*v2)(uint64_t *, uint8x8_t **, unint64_t *, unsigned __int32 **, int, int, double, uint16x8_t, double, double, double, uint16x8_t, uint64_t, uint64_t, uint64_t, unint64_t);
  uint64_t v3;
  uint64_t v4;
  int v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *(*v34)(uint64_t *, uint8x8_t **, unint64_t *, unsigned __int32 **, int, int, double, uint16x8_t, double, double, double, uint16x8_t, uint64_t, uint64_t, uint64_t, unint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  if ((a2 & 0x80000000) != 0)
    return result;
  v2 = a2 > 0x17
     ? vec::template_mark_pixelmask_row<(CGCompositeOperation)0,_rgba8_t>
     : (uint64_t *(*)(uint64_t *, uint8x8_t **, unint64_t *, unsigned __int32 **, int, int, double, uint16x8_t, double, double, double, uint16x8_t, uint64_t, uint64_t, uint64_t, unint64_t))vec::MethodList<_rgba8_t>::maskMethods[a2];
  v34 = v2;
  v3 = *(_QWORD *)(result + 88);
  v4 = *(_QWORD *)(result + 136);
  v5 = *(_DWORD *)result;
  v6 = *(int *)(result + 4);
  v7 = *(int *)(result + 8);
  v8 = (unint64_t)*(int *)(result + 28) >> 2;
  v9 = *(_QWORD *)(result + 40) + 4 * (*(int *)(result + 12) + v8 * *(int *)(result + 16));
  v37 = v3;
  v38 = v9;
  if (!v4)
    return result;
  v10 = *(int *)(result + 124);
  v11 = v4 + *(int *)(result + 104) + *(int *)(result + 108) * (uint64_t)(int)v10;
  v35 = v11;
  v12 = *(int *)(result + 56);
  v13 = *(int *)(result + 60);
  v14 = v5 & 0xFF00;
  v15 = *(int *)(result + 76);
  if (v14 != 256)
  {
    v16 = *(unsigned int *)(result + 64);
    v20 = *(int *)(result + 68);
    v21 = v15 >> 2;
    v22 = v3 + 4 * (v15 >> 2) * v20;
    v36 = v3;
    v19 = 1;
    v17 = v3;
    v23 = v3;
    goto LABEL_18;
  }
  v16 = v15 >> 2;
  v17 = v3 + 4 * (v12 + (v15 >> 2) * v13);
  v36 = -1;
  v37 = v17;
  if (v16 == v8)
  {
    if ((uint64_t)(v9 - v17) >= 1)
    {
      if (v6 >= (uint64_t)((v9 - v17) >> 2))
      {
        v17 += 4 * (v6 - 1);
        v37 = v17;
        v38 = v9 + 4 * (v6 - 1);
        v35 = v11 + v6 - 1;
        v19 = 0xFFFFFFFFLL;
        goto LABEL_16;
      }
      v18 = v8 * (v7 - 1);
      if (v9 <= v17 + 4 * v18 + 4 * ((int)v6 - 1))
      {
        v37 = v17 + 4 * v18;
        v38 = v9 + 4 * v18;
        v8 = -(uint64_t)v8;
        v35 = v11 + v10 * (v7 - 1);
        v10 = -v10;
        v19 = 1;
        v17 = v37;
        goto LABEL_16;
      }
    }
    v19 = 1;
LABEL_16:
    v16 = v8;
    goto LABEL_17;
  }
  v19 = 1;
LABEL_17:
  LODWORD(v20) = 0;
  v23 = 0;
  v22 = 0;
  v21 = v16;
LABEL_18:
  if (v22)
  {
    v24 = v17 + 4 * v21 * ((int)v13 % (int)v20);
    v36 = v24 + 4 * (int)v16;
    v37 = v24 + 4 * ((int)v12 % (int)v16);
    v23 = v37;
  }
  else
  {
    v21 -= (int)v6 * (uint64_t)(int)v19;
  }
  v25 = v10 - (int)v6 * (uint64_t)(int)v19;
  v26 = v8 - (int)v6 * (uint64_t)(int)v19;
  v33 = -(uint64_t)(v21 * (int)v20);
  v27 = v7 + 1;
  do
  {
    v28 = v16;
    v29 = v19;
    result = ((uint64_t (*)(uint64_t *, unint64_t *, uint64_t *, uint64_t *))v34)(&v37, &v38, &v36, &v35);
    v35 += v25;
    v38 += 4 * v26;
    if (v22)
    {
      v30 = v23 + 4 * v21;
      v31 = v33;
      if (v30 < v22)
        v31 = 0;
      v32 = v30 + 4 * v31;
      v36 += 4 * v31 + 4 * v21;
      v23 = v32;
    }
    else
    {
      v32 = v37 + 4 * v21;
    }
    v19 = v29;
    v16 = v28;
    v37 = v32;
    --v27;
  }
  while (v27 > 1);
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)2,_rgba8_t>(unsigned __int32 **result, _DWORD **a2, unint64_t *a3, unsigned __int32 **a4, int a5, int a6, double a7, double a8, uint16x8_t a9, double a10, double a11, double a12, double a13, uint16x8_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  __int128 v18;
  unint64_t v19;
  unsigned __int32 *v20;
  unint64_t v21;
  _DWORD *v22;
  unsigned __int32 *v23;
  uint64_t v24;
  uint64_t v25;
  uint16x8_t v26;
  unsigned __int32 v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int64_t v32;
  int64_t v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  int8x16_t v41;
  uint8x16_t v42;
  int8x16_t v43;
  uint8x16_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint64_t v47;
  uint8x16_t v48;
  uint8x16_t v49;
  uint8x16_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  int8x16_t v56;
  uint8x16_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  uint64_t v60;
  int8x16_t v61;
  uint16x8_t v62;
  unsigned int v63;
  uint16x8_t v64;
  unsigned int v65;
  uint16x8_t v66;
  uint16x8_t v67;
  int8x8_t v68;
  uint8x8_t v69;
  uint16x8_t v70;
  unsigned __int32 *v71;
  uint64_t v72;

  v19 = a18;
  v20 = *result;
  v21 = *a3;
  v22 = *a2;
  v23 = *a4;
  if (a18 < 4)
    goto LABEL_34;
  v24 = 4 * a6;
  v25 = 16 * a6;
  v26 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    v27 = *v23;
    if (*v23 == -1)
    {
      v34 = (int8x16_t *)((char *)v23 + v19);
      v35 = (int8x16_t *)v23;
      do
        v36 = v35++;
      while (v35 <= v34 && (vminvq_u8((uint8x16_t)vceqq_s8(*v36, (int8x16_t)a9)) & 0x80) != 0);
      do
      {
        v37 = v36;
        v36 = (int8x16_t *)((char *)v36 + 4);
      }
      while (v36 <= v34 && v37->i32[0] == -1);
      if (v37 < v34)
      {
        while (v37->u8[0] == 255)
        {
          v37 = (int8x16_t *)((char *)v37 + 1);
          if (v37 >= v34)
          {
            v37 = (int8x16_t *)((char *)v23 + v19);
            break;
          }
        }
      }
      v38 = 0;
      v39 = (char *)v37 - (char *)v23;
      v40 = (char *)v37 - (char *)v23;
      do
      {
        v41 = *(int8x16_t *)((char *)v20 + v38);
        v42 = *(uint8x16_t *)((char *)v22 + v38);
        v43 = vqtbl1q_s8(v41, (int8x16_t)xmmword_185004A40);
        v44 = (uint8x16_t)vbicq_s8(v41, vceqzq_s8(v43));
        v45 = vminq_u16(vmull_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v43.i8), v26);
        v46 = vminq_u16(vmull_high_u8(v42, (uint8x16_t)v43), v26);
        a14 = vrsraq_n_u16(v46, v46, 8uLL);
        *(uint8x16_t *)((char *)v22 + v38) = vqaddq_u8(v44, vqsubq_u8(v42, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v45, v45, 8uLL), 8uLL), a14, 8uLL)));
        v23 = (unsigned __int32 *)((char *)v23 + v24);
        v40 -= 4;
        v38 += v25;
      }
      while (v40 > 3);
      v22 = (_DWORD *)((char *)v22 + v38);
      v20 = (unsigned __int32 *)((char *)v20 + v38);
      v19 = v19 - v39 + v40;
      goto LABEL_31;
    }
    if (v27)
      break;
    v28 = (int8x16_t *)((char *)v23 + v19);
    v29 = (int8x16_t *)v23;
    do
      v30 = v29++;
    while (v29 <= v28 && (vminvq_u8((uint8x16_t)vceqzq_s8(*v30)) & 0x80) != 0);
    do
    {
      v31 = v30;
      v30 = (int8x16_t *)((char *)v30 + 4);
    }
    while (v30 <= v28 && !v31->i32[0]);
    if (v31 < v28)
    {
      while (!v31->i8[0])
      {
        v31 = (int8x16_t *)((char *)v31 + 1);
        if (v31 >= v28)
        {
          v31 = (int8x16_t *)((char *)v23 + v19);
          break;
        }
      }
    }
    v32 = (char *)v31 - (char *)v23;
    v33 = ((char *)v31 - (char *)v23) * a6;
    v20 += v33;
    v22 += v33;
    v23 = (unsigned __int32 *)((char *)v23 + v33);
    v19 -= v32;
LABEL_31:
    if (v19 <= 3)
      goto LABEL_34;
  }
  v47 = 0;
  while (1)
  {
    v48 = *(uint8x16_t *)((char *)v20 + v47);
    v49 = *(uint8x16_t *)((char *)v22 + v47);
    a14.i32[0] = v27;
    v50 = (uint8x16_t)vqtbl1q_s8((int8x16_t)a14, (int8x16_t)xmmword_185004A30);
    v51 = vmull_u8(*(uint8x8_t *)v48.i8, *(uint8x8_t *)v50.i8);
    v52 = vmull_high_u8(v48, v50);
    v53 = vminq_u16(v51, v26);
    v54 = vminq_u16(v52, v26);
    v55 = vrsraq_n_u16(v54, v54, 8uLL);
    *(uint8x8_t *)v51.i8 = vqrshrn_n_u16(vrsraq_n_u16(v53, v53, 8uLL), 8uLL);
    *(uint8x8_t *)&v18 = vqrshrn_n_u16(v55, 8uLL);
    v56 = vqtbl2q_s8(*(int8x16x2_t *)(&v18 - 1), (int8x16_t)xmmword_185004A50);
    v57 = (uint8x16_t)vbicq_s8((int8x16_t)vqrshrn_high_n_u16(*(uint8x8_t *)v51.i8, v55, 8uLL), vceqzq_s8(v56));
    v58 = vminq_u16(vmull_u8(*(uint8x8_t *)v49.i8, *(uint8x8_t *)v56.i8), v26);
    v59 = vminq_u16(vmull_high_u8(v49, (uint8x16_t)v56), v26);
    a14 = vrsraq_n_u16(v59, v59, 8uLL);
    *(uint8x16_t *)((char *)v22 + v47) = vqaddq_u8(v57, vqsubq_u8(v49, vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v58, v58, 8uLL), 8uLL), a14, 8uLL)));
    v23 = (unsigned __int32 *)((char *)v23 + v24);
    v19 -= 4;
    if (v19 < 4)
      break;
    v27 = *v23;
    v47 += v25;
    if (*v23 - 1 >= 0xFFFFFFFE)
    {
      v20 = (unsigned __int32 *)((char *)v20 + v47);
      v22 = (_DWORD *)((char *)v22 + v47);
      goto LABEL_31;
    }
  }
  v20 = (unsigned __int32 *)((char *)v20 + v25 + v47);
  v22 = (_DWORD *)((char *)v22 + v25 + v47);
LABEL_34:
  v60 = v19 + a17;
  if (v60)
  {
    v61 = (int8x16_t)vdupq_n_s16(0xFE01u);
    do
    {
      a9.i32[0] = *v20;
      v62 = vmovl_u8(*(uint8x8_t *)a9.i8);
      LOBYTE(v63) = v62.i8[0];
      BYTE1(v63) = v62.i8[2];
      BYTE2(v63) = v62.i8[4];
      HIBYTE(v63) = v62.i8[6];
      v62.i32[0] = *v22;
      v64 = vmovl_u8(*(uint8x8_t *)v62.i8);
      LOBYTE(v65) = v64.i8[0];
      BYTE1(v65) = v64.i8[2];
      BYTE2(v65) = v64.i8[4];
      HIBYTE(v65) = v64.i8[6];
      v64.i8[0] = *(_BYTE *)v23;
      v64.i8[1] = *(_BYTE *)v23;
      v64.i8[2] = *(_BYTE *)v23;
      v64.i8[3] = *(_BYTE *)v23;
      v66 = vminq_u16(vmull_u8((uint8x8_t)v63, (uint8x8_t)v64.u32[0]), (uint16x8_t)v61);
      v67 = vrsraq_n_u16(v66, v66, 8uLL);
      v68 = (int8x8_t)vqrshrn_n_u16(v67, 8uLL);
      *(int8x8_t *)v67.i8 = vqtbl1_s8((int8x16_t)vqrshrn_high_n_u16((uint8x8_t)v68, v67, 8uLL), (int8x8_t)0x707070703030303);
      v69 = (uint8x8_t)vbic_s8(v68, vceqz_s8(*(int8x8_t *)v67.i8));
      v70 = vminq_u16(vmull_u8((uint8x8_t)v65, *(uint8x8_t *)v67.i8), (uint16x8_t)v61);
      a9 = vrsraq_n_u16(v70, v70, 8uLL);
      *(uint8x8_t *)a9.i8 = vqadd_u8(v69, vqsub_u8((uint8x8_t)v65, vqrshrn_n_u16(a9, 8uLL)));
      *(int8x8_t *)a9.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a9, v61));
      *v22 = a9.i32[0];
      v71 = &v20[a6];
      v23 = (unsigned __int32 *)((char *)v23 + a6);
      if ((unint64_t)v71 >= v21)
        v72 = -(uint64_t)a5;
      else
        v72 = 0;
      v20 = &v71[v72];
      v22 += a6;
      --v60;
    }
    while (v60);
  }
  *result = v20;
  *a3 = v21;
  *a2 = v22;
  *a4 = v23;
  return result;
}

unsigned __int32 **vec::template_mark_pixelmask_row<(CGCompositeOperation)8,_rgba8_t>(unsigned __int32 **result, unsigned __int32 **a2, unint64_t *a3, unsigned __int32 **a4, int a5, int a6, int8x16_t a7, double a8, uint16x8_t a9, double a10, __n128 a11, double a12, uint8x16_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  unint64_t v17;
  unsigned __int32 *v18;
  unint64_t v19;
  unsigned __int32 *v20;
  unsigned __int32 *v21;
  uint64_t v22;
  uint64_t v23;
  uint16x8_t v24;
  unsigned __int32 v25;
  int8x16_t *v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int64_t v30;
  int64_t v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  uint8x16_t v39;
  uint8x16_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint64_t v43;
  int8x16_t v44;
  uint8x16_t v45;
  uint8x16_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint64_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  unsigned int v56;
  uint16x8_t v57;
  uint16x8_t v58;
  unsigned __int32 *v59;
  uint64_t v60;

  v17 = a17;
  v18 = *result;
  v19 = *a3;
  v20 = *a2;
  v21 = *a4;
  if (a17 < 4)
    goto LABEL_34;
  v22 = 4 * a6;
  v23 = 16 * a6;
  a7.i64[1] = 0xF0F0F0F0B0B0B0BLL;
  v24 = (uint16x8_t)vdupq_n_s16(0xFE01u);
  a9.i64[0] = -1;
  a9.i64[1] = -1;
  while (1)
  {
    v25 = *v21;
    if (*v21 == -1)
    {
      v32 = (int8x16_t *)((char *)v21 + v17);
      v33 = (int8x16_t *)v21;
      do
        v34 = v33++;
      while (v33 <= v32 && (vminvq_u8((uint8x16_t)vceqq_s8(*v34, (int8x16_t)a9)) & 0x80) != 0);
      do
      {
        v35 = v34;
        v34 = (int8x16_t *)((char *)v34 + 4);
      }
      while (v34 <= v32 && v35->i32[0] == -1);
      if (v35 < v32)
      {
        while (v35->u8[0] == 255)
        {
          v35 = (int8x16_t *)((char *)v35 + 1);
          if (v35 >= v32)
          {
            v35 = (int8x16_t *)((char *)v21 + v17);
            break;
          }
        }
      }
      v36 = 0;
      v37 = (char *)v35 - (char *)v21;
      v38 = (char *)v35 - (char *)v21;
      do
      {
        v39 = *(uint8x16_t *)((char *)v20 + v36);
        v40 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)((char *)v18 + v36), (int8x16_t)xmmword_185004A40);
        v41 = vminq_u16(vmull_u8(*(uint8x8_t *)v39.i8, *(uint8x8_t *)v40.i8), v24);
        v42 = vminq_u16(vmull_high_u8(v39, v40), v24);
        a13 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v41, v41, 8uLL), 8uLL), vrsraq_n_u16(v42, v42, 8uLL), 8uLL);
        a11 = (__n128)vqsubq_u8(v39, a13);
        *(__n128 *)((char *)v20 + v36) = a11;
        v21 = (unsigned __int32 *)((char *)v21 + v22);
        v38 -= 4;
        v36 += v23;
      }
      while (v38 > 3);
      v20 = (unsigned __int32 *)((char *)v20 + v36);
      v18 = (unsigned __int32 *)((char *)v18 + v36);
      v17 = v17 - v37 + v38;
      goto LABEL_31;
    }
    if (v25)
      break;
    v26 = (int8x16_t *)((char *)v21 + v17);
    v27 = (int8x16_t *)v21;
    do
    {
      v28 = v27++;
      if (v27 > v26)
        break;
      a11 = (__n128)vceqzq_s8(*v28);
    }
    while ((vminvq_u8((uint8x16_t)a11) & 0x80) != 0);
    do
    {
      v29 = v28;
      v28 = (int8x16_t *)((char *)v28 + 4);
    }
    while (v28 <= v26 && !v29->i32[0]);
    if (v29 < v26)
    {
      while (!v29->i8[0])
      {
        v29 = (int8x16_t *)((char *)v29 + 1);
        if (v29 >= v26)
        {
          v29 = (int8x16_t *)((char *)v21 + v17);
          break;
        }
      }
    }
    v30 = (char *)v29 - (char *)v21;
    v31 = ((char *)v29 - (char *)v21) * a6;
    v18 += v31;
    v20 += v31;
    v21 = (unsigned __int32 *)((char *)v21 + v31);
    v17 -= v30;
LABEL_31:
    if (v17 <= 3)
      goto LABEL_34;
  }
  v43 = 0;
  while (1)
  {
    v44 = *(int8x16_t *)((char *)v20 + v43);
    a13.i32[0] = v25;
    v45 = (uint8x16_t)vqtbl1q_s8((int8x16_t)a13, (int8x16_t)xmmword_185004A30);
    v46 = (uint8x16_t)vqtbl1q_s8(*(int8x16_t *)((char *)v18 + v43), (int8x16_t)xmmword_185004A40);
    v47 = vmull_u8(*(uint8x8_t *)v46.i8, *(uint8x8_t *)v45.i8);
    v48 = vmull_high_u8(v46, v45);
    v49 = vminq_u16(v47, v24);
    v50 = vminq_u16(v48, v24);
    v51 = vminq_u16(vmull_u8(*(uint8x8_t *)v44.i8, vqrshrn_n_u16(vrsraq_n_u16(v49, v49, 8uLL), 8uLL)), v24);
    v52 = vminq_u16(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL), vqrshrn_n_u16(vrsraq_n_u16(v50, v50, 8uLL), 8uLL)), v24);
    a13 = vqrshrn_high_n_u16(vqrshrn_n_u16(vrsraq_n_u16(v51, v51, 8uLL), 8uLL), vrsraq_n_u16(v52, v52, 8uLL), 8uLL);
    a11 = (__n128)vqsubq_u8((uint8x16_t)v44, a13);
    *(__n128 *)((char *)v20 + v43) = a11;
    v21 = (unsigned __int32 *)((char *)v21 + v22);
    v17 -= 4;
    if (v17 < 4)
      break;
    v25 = *v21;
    v43 += v23;
    if (*v21 - 1 >= 0xFFFFFFFE)
    {
      v18 = (unsigned __int32 *)((char *)v18 + v43);
      v20 = (unsigned __int32 *)((char *)v20 + v43);
      goto LABEL_31;
    }
  }
  v18 = (unsigned __int32 *)((char *)v18 + v23 + v43);
  v20 = (unsigned __int32 *)((char *)v20 + v23 + v43);
LABEL_34:
  v53 = v17 + a16;
  if (v53)
  {
    a7.i64[0] = -4244438269;
    v54 = (uint16x8_t)vdupq_n_s16(0xFE01u);
    do
    {
      a9.i32[0] = *v20;
      v55 = vmovl_u8(*(uint8x8_t *)a9.i8);
      LOBYTE(v56) = v55.i8[0];
      BYTE1(v56) = v55.i8[2];
      BYTE2(v56) = v55.i8[4];
      HIBYTE(v56) = v55.i8[6];
      v55.i8[0] = *(_BYTE *)v21;
      v55.i8[1] = *(_BYTE *)v21;
      v55.i8[2] = *(_BYTE *)v21;
      v55.i8[3] = *(_BYTE *)v21;
      a11.n128_u32[0] = *v18;
      a11.n128_u64[1] = a11.n128_u64[0];
      a11.n128_u64[0] = (unint64_t)vqtbl1_s8((int8x16_t)a11, (int8x8_t)-4244438269);
      v57 = vminq_u16(vmull_u8((uint8x8_t)a11.n128_u64[0], (uint8x8_t)v55.u32[0]), v54);
      v58 = vminq_u16(vmull_u8((uint8x8_t)v56, vqrshrn_n_u16(vrsraq_n_u16(v57, v57, 8uLL), 8uLL)), v54);
      a9 = vrsraq_n_u16(v58, v58, 8uLL);
      *(uint8x8_t *)a9.i8 = vqsub_u8((uint8x8_t)v56, vqrshrn_n_u16(a9, 8uLL));
      *(int8x8_t *)a9.i8 = vmovn_s16((int16x8_t)vzip1q_s8((int8x16_t)a9, a7));
      *v20 = a9.i32[0];
      v59 = &v18[a6];
      v21 = (unsigned __int32 *)((char *)v21 + a6);
      if ((unint64_t)v59 >= v19)
        v60 = -(uint64_t)a5;
      else
        v60 = 0;
      v18 = &v59[v60];
      v20 += a6;
      --v53;
    }
    while (v53);
  }
  *result = v18;
  *a3 = v19;
  *a2 = v20;
  *a4 = v21;
  return result;
}

_QWORD *CGBitmapContextCreateWithDictionary(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, int a8, double a9, double a10, uint64_t a11)
{
  return CGBitmapContextCreateWithDataAndDictionary(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0, 0, a11);
}

uint64_t dlRecorder_BeginLayer(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, CGFloat x, double a10, CGFloat a11, CGFloat a12)
{
  uint64_t v12;
  uint64_t v13;
  double *v22;
  double *v23;
  double v25;
  double v26;
  double v27;
  double Bounds;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v32;
  double v33;
  double v34;
  double v35;
  double v39;
  uint64_t v40;
  __int128 v41;
  double v42;
  double v43;
  double v44;
  __int128 v45;
  CGFloat v46;
  CGFloat v47;
  CGFloat v48;
  CGFloat DrawBoundingBoxWithMatrix;
  CGFloat v50;
  CGFloat v51;
  CGFloat v52;
  uint64_t v53;
  __int128 v54;
  CGFloat v55;
  CGFloat v56;
  CGFloat v57;
  CGFloat v58;
  CGFloat v59;
  CGFloat v60;
  CGFloat v61;
  __CFDictionary *v62;
  const CGRect *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const void *CGDisplayList;
  _OWORD v70[3];
  CGAffineTransform v71;
  _OWORD v72[3];
  CGRect v73;
  _QWORD v74[4];
  CGRect v75;
  CGRect v76;
  CGRect v77;
  CGRect v78;
  CGRect v79;
  CGRect v80;
  CGRect v81;
  CGRect v82;

  if (!a1 || (v12 = a1, (v13 = *(_QWORD *)(a1 + 288)) == 0))
  {
    CGPostError((uint64_t)"%s: CGContextDelegateGetInfo() returned NULL", a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, (char)"dlRecorder_BeginLayer");
    return 0;
  }
  v22 = (double *)CG::DisplayListRecorder::currentDisplayList(*(CFArrayRef **)(a1 + 288));
  if (!v22)
    return 0;
  v23 = v22;
  if (!a5 || *(_QWORD *)(v13 + 16) || CFArrayGetCount(*(CFArrayRef *)(v13 + 8)) > 1)
  {
    Bounds = CGClipStackGetBounds(*(double **)(a3 + 112));
    y = v25;
    width = v26;
    height = v27;
    v32 = v23[5];
    v33 = v23[6];
    v34 = v23[7];
    v35 = v23[8];
    if (v32 != -8.98846567e307 || v33 != -8.98846567e307 || v34 != 1.79769313e308 || v35 != 1.79769313e308)
    {
      v39 = Bounds;
      v75 = CGRectIntersection(*(CGRect *)(&v25 - 1), *(CGRect *)&v32);
      Bounds = v75.origin.x;
      y = v75.origin.y;
      width = v75.size.width;
      height = v75.size.height;
    }
    v40 = *(_QWORD *)(*(_QWORD *)(a3 + 120) + 16);
    if (v40)
    {
      v41 = *(_OWORD *)(a2 + 40);
      v72[0] = *(_OWORD *)(a2 + 24);
      v72[1] = v41;
      v72[2] = *(_OWORD *)(a2 + 56);
      Bounds = CGStyleGetDrawBoundingBoxWithMatrix(v40, v72, Bounds, y, width, height);
      y = v42;
      width = v43;
      height = v44;
    }
    if (a4 && CGCFDictionaryGetRect(a4, CFSTR("kCGContextBoundingBox"), (UInt8 *)&v73))
    {
      v76.origin.x = x;
      v76.origin.y = a10;
      v76.size.width = a11;
      v76.size.height = a12;
      v77 = CGRectIntersection(v76, v73);
      x = v77.origin.x;
      a10 = v77.origin.y;
      a11 = v77.size.width;
      a12 = v77.size.height;
      v73 = v77;
    }
    else
    {
      v73.origin.x = x;
      v73.origin.y = a10;
      v73.size.width = a11;
      v73.size.height = a12;
    }
    if (x != -8.98846567e307 || a10 != -8.98846567e307 || a11 != 1.79769313e308 || a12 != 1.79769313e308)
    {
      v45 = *(_OWORD *)(a3 + 40);
      *(_OWORD *)&v71.a = *(_OWORD *)(a3 + 24);
      *(_OWORD *)&v71.c = v45;
      *(_OWORD *)&v71.tx = *(_OWORD *)(a3 + 56);
      v46 = x;
      *(double *)&v45 = a10;
      v47 = a11;
      v48 = a12;
      v78 = CGRectApplyAffineTransform(*(CGRect *)((char *)&v45 - 8), &v71);
      DrawBoundingBoxWithMatrix = v78.origin.x;
      v50 = v78.origin.y;
      v51 = v78.size.width;
      v52 = v78.size.height;
      v73 = v78;
      v53 = *(_QWORD *)(*(_QWORD *)(a3 + 120) + 16);
      if (v53)
      {
        v54 = *(_OWORD *)(a2 + 40);
        v70[0] = *(_OWORD *)(a2 + 24);
        v70[1] = v54;
        v70[2] = *(_OWORD *)(a2 + 56);
        DrawBoundingBoxWithMatrix = CGStyleGetDrawBoundingBoxWithMatrix(v53, v70, v78.origin.x, v50, v78.size.width, v78.size.height);
        v50 = v55;
        v51 = v56;
        v52 = v57;
        v73.origin.x = DrawBoundingBoxWithMatrix;
        v73.origin.y = v55;
        v73.size.width = v56;
        v73.size.height = v57;
      }
      v79.origin.x = Bounds;
      v79.origin.y = y;
      v79.size.width = width;
      v79.size.height = height;
      v80 = CGRectIntersection(v79, *(CGRect *)&DrawBoundingBoxWithMatrix);
      Bounds = v80.origin.x;
      y = v80.origin.y;
      width = v80.size.width;
      height = v80.size.height;
    }
    v81.origin.x = Bounds;
    v81.origin.y = y;
    v81.size.width = width;
    v81.size.height = height;
    v82 = CGRectIntegral(v81);
    v58 = v82.origin.x;
    v59 = v82.origin.y;
    v60 = v82.size.width;
    v61 = v82.size.height;
    v62 = CG::DisplayListRecorder::initializeGroupInfoDictionary((uint64_t)v23, a4);
    *(CGFloat *)v74 = v58;
    *(CGFloat *)&v74[1] = v59;
    *(CGFloat *)&v74[2] = v60;
    *(CGFloat *)&v74[3] = v61;
    CGDisplayList = (const void *)CG::DisplayList::createCGDisplayList(v62, (const __CFDictionary *)v74, v63, v64, v65, v66, v67, v68);
    if (v62)
      CFRelease(v62);
    if (CGDisplayList)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(v13 + 8), CGDisplayList);
      CFRelease(CGDisplayList);
      return v12;
    }
    return 0;
  }
  CG::DisplayListResourceImage::setImage((CG::DisplayListResourceImage *)v13, a5);
  return v12;
}

__CFDictionary *CG::DisplayListRecorder::initializeGroupInfoDictionary(uint64_t a1, const __CFDictionary *a2)
{
  __CFDictionary *Mutable;
  const __CFDictionary *v5;
  uint64_t v6;
  const void *Value;
  _QWORD context[5];
  _QWORD v10[4];

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v5 = *(const __CFDictionary **)(a1 + 32);
    if (v5)
    {
      v6 = 0;
      v10[0] = CFSTR("trackGlyphs");
      v10[1] = CFSTR("decodeImages");
      v10[2] = CFSTR("clipRecordingToFrame");
      v10[3] = CFSTR("evaluateShadingsOnRecord");
      do
      {
        Value = CFDictionaryGetValue(v5, (const void *)v10[v6]);
        if (Value)
          CFDictionarySetValue(Mutable, (const void *)v10[v6], Value);
        ++v6;
      }
      while (v6 != 4);
    }
    if (a2)
    {
      context[0] = MEMORY[0x1E0C809B0];
      context[1] = 0x40000000;
      context[2] = ___ZN2CG19DisplayListRecorder29initializeGroupInfoDictionaryEP13CGDisplayListPK14__CFDictionary_block_invoke;
      context[3] = &__block_descriptor_tmp_4457;
      context[4] = Mutable;
      CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)call_dict_block, context);
      CFDictionaryRemoveValue(Mutable, CFSTR("kCGContextBoundingBox"));
    }
    if (!CFDictionaryContainsKey(Mutable, CFSTR("kCGContextGroup"))
      && !CFDictionaryContainsKey(Mutable, CFSTR("kCGContextColorSpace"))
      && *MEMORY[0x1E0C9AE50])
    {
      CFDictionarySetValue(Mutable, CFSTR("kCGContextGroup"), (const void *)*MEMORY[0x1E0C9AE50]);
    }
  }
  return Mutable;
}

CGLayerRef CGLayerCreateWithContext(CGContextRef context, CGSize size, CFDictionaryRef auxiliaryInfo)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CGLayer *v9;
  double height;
  double width;
  uint64_t Instance;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;

  v9 = 0;
  if (size.width > 0.0)
  {
    height = size.height;
    if (size.height > 0.0)
    {
      width = size.width;
      if (_block_invoke_once_2085 != -1)
        dispatch_once(&_block_invoke_once_2085, &__block_literal_global_4_2086);
      Instance = CGTypeCreateInstance(CGLayerGetTypeID_layer_type_id, 24, v3, v4, v5, v6, v7, v8);
      v9 = (CGLayer *)Instance;
      if (Instance)
      {
        v23.n128_f64[0] = ceil(width);
        v24.n128_f64[0] = ceil(height);
        *(_QWORD *)(Instance + 24) = v23.n128_u64[0];
        *(_QWORD *)(Instance + 32) = v24.n128_u64[0];
        v21.n128_u64[0] = 0;
        v22.n128_u64[0] = 0;
        v25 = (const void *)CGContextDelegateCreateForContext(auxiliaryInfo, (uint64_t)context, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24);
        if (v25)
        {
          v28 = v25;
          if (context)
            v29 = *((_QWORD *)context + 14);
          else
            v29 = 0;
          *((_QWORD *)v9 + 2) = CGContextCreateWithDelegateAndInfo(v25, 0, v29, 0, 0, 0, v26, v27);
          CFRelease(v28);
          v30 = *((_QWORD *)v9 + 2);
          if (v30)
          {
            if (context)
              *(CGAffineTransform *)(*(_QWORD *)(v30 + 112) + 24) = CGAffineTransformIdentity;
            return v9;
          }
          CFRelease(v9);
        }
        return 0;
      }
    }
  }
  return v9;
}

uint64_t CGContextDelegateCreateForContext(CFDictionaryRef theDict, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12)
{
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  _QWORD *v18;
  uint64_t (*v19)(__n128, __n128, __n128, __n128);
  uint64_t ContextDelegate;
  _QWORD *Value;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  _QWORD *v30;
  _QWORD *Cache;
  uint64_t v32;
  int v33;
  unint64_t v34;
  double Alpha;
  _BOOL4 v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  __CFDictionary *MutableCopy;
  const CGRect *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __CFDictionary *Mutable;
  BOOL v62;
  const void *CGDisplayList;
  const void *v64;
  _QWORD v66[4];
  CGRect v67;
  CGRect v68;

  v13 = a12.n128_f64[0];
  v14 = a11.n128_f64[0];
  v15 = a10.n128_f64[0];
  v16 = a9.n128_f64[0];
  if (!a2)
    goto LABEL_85;
  if (*(_DWORD *)(a2 + 16) != 1129601108)
  {
    handle_invalid_context((char)"CGContextDelegateCreateForContext", a2, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  v18 = *(_QWORD **)(a2 + 40);
  if (!v18)
    goto LABEL_85;
  v19 = (uint64_t (*)(__n128, __n128, __n128, __n128))v18[26];
  if (v19)
  {
    ContextDelegate = v19(a9, a10, a11, a12);
    if (ContextDelegate)
      return ContextDelegate;
    v18 = *(_QWORD **)(a2 + 40);
    if (!v18)
      goto LABEL_85;
  }
  if (v18[16])
    goto LABEL_85;
  if (!theDict)
    goto LABEL_13;
  Value = CFDictionaryGetValue(theDict, CFSTR("kCGContextColorSpace"));
  if (Value)
  {
LABEL_10:
    CFRetain(Value);
    goto LABEL_18;
  }
  v18 = *(_QWORD **)(a2 + 40);
  if (v18)
  {
LABEL_13:
    v29 = (uint64_t (*)(void))v18[4];
    if (v29)
    {
      v30 = (_QWORD *)v29();
      if (v30)
      {
        Cache = CGColorTransformGetCache(v30);
        if (Cache)
        {
          Value = (_QWORD *)Cache[2];
          if (Value)
            goto LABEL_10;
        }
      }
    }
  }
  Value = CGColorSpaceCreateDeviceRGB();
LABEL_18:
  if (theDict)
    v32 = (uint64_t)CFDictionaryGetValue(theDict, CFSTR("kCGContextBackgroundColor"));
  else
    v32 = 0;
  if (*(_DWORD *)(a2 + 24) != 4)
    goto LABEL_29;
  if (*(_DWORD *)(a2 + 16) != 1129601108)
  {
    handle_invalid_context((char)"CGBitmapContextGetBitmapInfo", a2, v23, v24, v25, v26, v27, v28);
    if (*(_DWORD *)(a2 + 16) == 1129601108 && *(_DWORD *)(a2 + 24) == 4)
    {
      v33 = 0;
      goto LABEL_27;
    }
    handle_invalid_context((char)"CGBitmapContextGetBitsPerComponent", a2, v23, v24, v25, v26, v27, v28);
LABEL_29:
    v34 = 0;
    v33 = 0;
    goto LABEL_30;
  }
  v33 = *(_BYTE *)(*(_QWORD *)(a2 + 32) + 41) & 1;
LABEL_27:
  v34 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 80);
LABEL_30:
  if (v32)
  {
    if (v32 < 0)
      Alpha = CGTaggedColorGetAlpha(v32, v22, v23, v24, v25, v26, v27, v28);
    else
      Alpha = *(double *)(v32 + 8 * *(_QWORD *)(v32 + 56) + 56);
    v36 = Alpha < 1.0;
  }
  else
  {
    v36 = 1;
  }
  if (Value)
  {
    v37 = *(_DWORD *)(Value[3] + 24);
    switch(v37)
    {
      case 2:
        v46 = 16;
        if (v34 >= 9)
        {
          v47 = v33;
        }
        else
        {
          v46 = 8;
          v47 = 1;
        }
        if (v33)
          v39 = 32;
        else
          v39 = v46;
        if (v47)
          v40 = 0x2000;
        else
          v40 = 4096;
        v41 = 4;
        goto LABEL_80;
      case 1:
        if (v36)
          v42 = 4097;
        else
          v42 = 4101;
        v43 = 16;
        if (v36)
          v44 = 8194;
        else
          v44 = 8198;
        if (v34 > 8)
          v44 = v42;
        else
          v43 = 8;
        if (v36)
          v45 = 8193;
        else
          v45 = 8197;
        v41 = 4;
        if (v33)
          v39 = 32;
        else
          v39 = v43;
        if (!v33)
          v41 = 4;
        v36 = 0;
        if (v33)
          v40 = v45;
        else
          v40 = v44;
LABEL_80:
        v48 = v41 * (unint64_t)v39;
        v67.origin.x = v16;
        v67.origin.y = v15;
        v67.size.width = v14;
        v67.size.height = v13;
        v68 = CGRectIntegral(v67);
        v49 = *(_QWORD *)(a2 + 112);
        v50 = *(double *)(v49 + 8);
        v51 = *(double *)(v49 + 16);
        if (v36)
          v52 = v39;
        else
          v52 = 0;
        v53 = CGBitmapContextInfoCreate(0, (int)v68.origin.x, (int)v68.origin.y, (unint64_t)v68.size.width, (unint64_t)v68.size.height, v39, v48, 0, v50, v51, Value, v40, v52, 0, 0);
        CGColorSpaceRelease((CGColorSpaceRef)Value);
        if (v53)
        {
          ContextDelegate = bitmap_context_delegate_create(v53, (uint64_t)theDict);
          CGBitmapContextInfoRelease(v53);
          if (ContextDelegate)
            return ContextDelegate;
        }
        goto LABEL_85;
      case 0:
        v38 = 16;
        if (v34 < 9)
          v38 = 8;
        if (v33)
          v39 = 32;
        else
          v39 = v38;
        if (v33)
          v40 = 0x2000;
        else
          v40 = (v34 > 8) << 12;
        v41 = 1;
        goto LABEL_80;
    }
  }
  CGColorSpaceRelease((CGColorSpaceRef)Value);
LABEL_85:
  if (theDict)
  {
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
    if (!CFDictionaryGetValue(MutableCopy, CFSTR("kCGContextGroup"))
      && !CFDictionaryGetValue(MutableCopy, CFSTR("kCGContextColorSpace"))
      && MutableCopy
      && *MEMORY[0x1E0C9AE50])
    {
      CFDictionarySetValue(MutableCopy, CFSTR("kCGContextGroup"), (const void *)*MEMORY[0x1E0C9AE50]);
    }
    CFDictionaryRemoveValue(MutableCopy, CFSTR("kCGContextBoundingBox"));
  }
  else
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    MutableCopy = Mutable;
    v55 = (const CGRect *)*MEMORY[0x1E0C9AE50];
    if (Mutable)
      v62 = v55 == 0;
    else
      v62 = 1;
    if (!v62)
      CFDictionarySetValue(Mutable, CFSTR("kCGContextGroup"), v55);
  }
  *(CGFloat *)v66 = v16;
  *(CGFloat *)&v66[1] = v15;
  *(CGFloat *)&v66[2] = v14;
  *(CGFloat *)&v66[3] = v13;
  CGDisplayList = (const void *)CG::DisplayList::createCGDisplayList(MutableCopy, (const __CFDictionary *)v66, v55, v56, v57, v58, v59, v60);
  if (CGDisplayList)
  {
    v64 = CGDisplayList;
    ContextDelegate = CG::DisplayList::createContextDelegate(CGDisplayList);
    CFRelease(v64);
  }
  else
  {
    ContextDelegate = 0;
  }
  CFRelease(MutableCopy);
  return ContextDelegate;
}

CGImageRef CGImageMaskCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate)
{
  return mask_create(width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, provider, (double *)decode, shouldInterpolate, 4);
}

CGImageRef rip_auto_context_create_image(uint64_t a1)
{
  uint64_t v1;
  pthread_mutex_t *v2;
  CGContext *v3;
  CGImageRef Image;

  if (a1)
    v1 = *(_QWORD *)(a1 + 288);
  else
    v1 = 0;
  v2 = (pthread_mutex_t *)(v1 + 112);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 112));
  v3 = (CGContext *)rip_auto_context_rasterization_loop(v1);
  Image = CGBitmapContextCreateImage(v3);
  if (v3)
    CFRelease(v3);
  pthread_mutex_unlock(v2);
  return Image;
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t (*v9)(void);
  CGContextRef v11;
  CGImage *v12;
  int v13;
  uint64_t v14;
  const __CFData *v15;
  CGDataProvider *v16;
  int v17;
  CGColorSpace *v18;
  size_t v19;
  size_t v20;
  size_t v21;
  size_t v22;
  size_t v23;
  uint64_t *v24;
  float v25;
  _QWORD *v26;
  uint64_t (*v27)(void);
  uint64_t v28;
  uint64_t v29;
  const __CFData *v30;
  CGDataProvider *v31;
  CGColorSpace *v32;
  size_t v33;
  size_t v34;
  size_t v35;
  size_t v36;
  size_t v37;
  CGImage *v38;
  CGImage *v39;
  const __CFData *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const __CFData *alpha_image;

  if (!context)
  {
    v11 = 0;
LABEL_8:
    handle_invalid_context((char)"CGBitmapContextCreateImage", (uint64_t)v11, v1, v2, v3, v4, v5, v6);
    return 0;
  }
  if (*((_DWORD *)context + 4) != 1129601108)
  {
    v11 = context;
    goto LABEL_8;
  }
  v8 = *((_QWORD *)context + 5);
  if (!v8)
    return 0;
  v9 = *(uint64_t (**)(void))(v8 + 240);
  if (v9)
    return (CGImageRef)v9();
  v13 = *((_DWORD *)context + 6);
  if (v13 != 12)
  {
    if (v13 == 4)
    {
      v14 = *((_QWORD *)context + 4);
      v15 = CGDataProviderCreateWithCopyOfData(*(UInt8 **)(v14 + 64), *(_QWORD *)(v14 + 88) * *(_QWORD *)(v14 + 16));
      if (v15)
      {
        v16 = v15;
        v17 = 1;
        *((_BYTE *)v15 + 260) = 1;
        v18 = *(CGColorSpace **)(v14 + 32);
        v19 = *(_QWORD *)(v14 + 8);
        v20 = *(_QWORD *)(v14 + 16);
        v22 = *(_QWORD *)(v14 + 72);
        v21 = *(_QWORD *)(v14 + 80);
        v23 = *(_QWORD *)(v14 + 88);
        if (v18)
        {
          v24 = (uint64_t *)CGImageCreate(v19, v20, v21, v22, v23, v18, *(_DWORD *)(v14 + 40), v16, 0, 1, kCGRenderingIntentDefault);
          v25 = *(float *)(*(_QWORD *)(*((_QWORD *)context + 12) + 120) + 48);
          if (v25 == 0.0)
          {
            v26 = *(_QWORD **)(v14 + 32);
            if (v26 && *(_BYTE *)(v26[3] + 13))
            {
              v17 = 0;
            }
            else
            {
              v25 = CGColorSpaceSanitizeHeadroom(v26, v25);
              v17 = 2;
            }
          }
          if (!CGImageSetHeadroom(v24, v17, v25))
            CGPostError((uint64_t)"%s: CGImageSetHeadroom failed to set headroom = %f", v41, v42, v43, v44, v45, v46, v47, (char)"CGBitmapContextCreateImage");
          if (*(_QWORD *)(v14 + 120))
          {
            alpha_image = create_alpha_image(v14);
            v12 = CGImageCreateWithMaskAndMatte((uint64_t)v24, (uint64_t)alpha_image, CGBitmapContextCreateImage_matte);
            if (alpha_image)
              CFRelease(alpha_image);
            if (v24)
              CFRelease(v24);
          }
          else
          {
            v12 = (CGImage *)v24;
          }
        }
        else
        {
          v12 = mask_create(v19, v20, v21, v22, v23, v16, CGBitmapContextCreateImage_decode, 1, 4);
        }
        CGDataProviderRelease(v16);
        return v12;
      }
    }
    return 0;
  }
  v27 = *(uint64_t (**)(void))(v8 + 248);
  if (!v27)
    return 0;
  v28 = v27();
  if (!v28)
    return 0;
  v29 = v28;
  v30 = CGDataProviderCreateWithCopyOfData(*(UInt8 **)(v28 + 64), (*(_QWORD *)(v28 + 16) - 1) * *(_QWORD *)(v28 + 88)+ ((unint64_t)(*(_QWORD *)(v28 + 72) * *(_QWORD *)(v28 + 8) + 7) >> 3));
  v31 = v30;
  if (v30)
    *((_BYTE *)v30 + 260) = 1;
  v32 = *(CGColorSpace **)(v29 + 32);
  v33 = *(_QWORD *)(v29 + 8);
  v34 = *(_QWORD *)(v29 + 16);
  v36 = *(_QWORD *)(v29 + 72);
  v35 = *(_QWORD *)(v29 + 80);
  v37 = *(_QWORD *)(v29 + 88);
  if (v32)
  {
    v38 = CGImageCreate(v33, v34, v35, v36, v37, v32, *(_DWORD *)(v29 + 40), v31, 0, 1, kCGRenderingIntentDefault);
    v39 = v38;
    if (!*(_QWORD *)(v29 + 120))
      return v38;
    v40 = create_alpha_image(v29);
    v12 = CGImageCreateWithMaskAndMatte((uint64_t)v39, (uint64_t)v40, CGBitmapContextCreateImage_matte_2);
    if (v40)
      CFRelease(v40);
    if (v39)
      CFRelease(v39);
    return v12;
  }
  return mask_create(v33, v34, v35, v36, v37, v31, CGBitmapContextCreateImage_decode_1, 1, 4);
}

const __CFData *CGDataProviderCreateWithCopyOfData(UInt8 *a1, unint64_t a2)
{
  const __CFData *result;
  const __CFData *v3;
  CGDataProviderRef v4;

  result = create_protected_copy(a1, a2);
  if (result)
  {
    v3 = result;
    v4 = CGDataProviderCreateWithCFData(result);
    CFRelease(v3);
    return v4;
  }
  return result;
}

CGDataProviderRef CGDataProviderCreateWithCFData(CGDataProviderRef data)
{
  const __CFData *v1;
  off_t Length;
  void *v3;
  CGDataProviderDirectCallbacks callbacks;

  if (data)
  {
    v1 = data;
    data = (CGDataProviderRef)CFDataGetBytePtr(data);
    if (data)
    {
      Length = CFDataGetLength(v1);
      v3 = (void *)CFRetain(v1);
      *(_QWORD *)&callbacks.version = 0;
      callbacks.getBytePointer = (CGDataProviderGetBytePointerCallback)getCFDataBytePointer;
      callbacks.releaseBytePointer = 0;
      callbacks.getBytesAtPosition = (CGDataProviderGetBytesAtPositionCallback)cf_get_bytes_at_position;
      callbacks.releaseInfo = (CGDataProviderReleaseInfoCallback)releaseCFData;
      return CGDataProviderCreateDirect(v3, Length, &callbacks);
    }
  }
  return data;
}

CGDataProviderRef CGDataProviderCreateDirect(void *info, off_t size, const CGDataProviderDirectCallbacks *callbacks)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGDataProviderRef result;
  CGDataProviderReleaseInfoCallback releaseInfo;

  if (size <= 0)
  {
    CGPostError((uint64_t)"%s: Invalid size = %jd", size, (uint64_t)callbacks, v3, v4, v5, v6, v7, (char)"CGDataProviderCreateDirect");
    if (!callbacks)
      return 0;
  }
  else if (!callbacks)
  {
    return 0;
  }
  result = 0;
  if (size >= 1 && !callbacks->version)
  {
    if (!callbacks->getBytePointer && !callbacks->getBytesAtPosition)
      return 0;
    result = (CGDataProviderRef)create_provider((uint64_t)info, 0, (uint64_t)callbacks, v3, v4, v5, v6, v7);
    if (result)
    {
      *((_QWORD *)result + 4) = size;
      *((_OWORD *)result + 5) = *(_OWORD *)&callbacks->getBytePointer;
      releaseInfo = callbacks->releaseInfo;
      *((_QWORD *)result + 12) = callbacks->getBytesAtPosition;
      *((_QWORD *)result + 9) = releaseInfo;
    }
  }
  return result;
}

uint64_t create_provider(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t Instance;
  uint64_t v11;
  pthread_mutexattr_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (kCGDataProviderPropertyTrustToken_block_invoke_once != -1)
    dispatch_once(&kCGDataProviderPropertyTrustToken_block_invoke_once, &__block_literal_global_26_6088);
  Instance = CGTypeCreateInstance(CGDataProviderGetTypeID_id, 272, a3, a4, a5, a6, a7, a8);
  v11 = Instance;
  if (Instance)
  {
    *(_DWORD *)(Instance + 16) = 48879;
    *(_DWORD *)(Instance + 20) = a2;
    *(_QWORD *)(Instance + 24) = a1;
    *(_QWORD *)(Instance + 32) = -1;
    *(_DWORD *)(Instance + 248) = 0;
    *(_QWORD *)(Instance + 252) = 1;
    v13.__sig = 0;
    *(_QWORD *)v13.__opaque = 0;
    pthread_mutexattr_init(&v13);
    pthread_mutexattr_settype(&v13, 2);
    pthread_mutex_init((pthread_mutex_t *)(v11 + 184), &v13);
    pthread_mutexattr_destroy(&v13);
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v13.__sig) = 136315138;
    *(uint64_t *)((char *)&v13.__sig + 4) = (uint64_t)"create_provider";
    _os_log_impl(&dword_1849A5000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s failed", (uint8_t *)&v13, 0xCu);
  }
  return v11;
}

CFDataRef create_protected_copy(UInt8 *bytes, unint64_t length)
{
  CFDataRef v2;
  uint64_t v5;
  vm_address_t v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned int *v11;
  kern_return_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  UInt8 *v19;
  const __CFAllocator *v20;
  CFAllocatorContext context;

  v2 = 0;
  if (bytes && length)
  {
    v5 = *MEMORY[0x1E0C85AD8];
    if (*MEMORY[0x1E0C85AD8] > length)
      return CFDataCreate(0, bytes, length);
    v7 = -v5 & (unint64_t)bytes;
    v8 = (void *)(((unint64_t)&bytes[length - 1 + v5] & -v5) - v7);
    v9 = mmap(0, (size_t)v8, 3, 4098, 905969664, 0);
    if (v9 == (void *)-1)
      return 0;
    v10 = v9;
    v11 = (unsigned int *)MEMORY[0x1E0C83DA0];
    v12 = vm_copy(*MEMORY[0x1E0C83DA0], v7, (vm_size_t)v8, (vm_address_t)v9);
    v19 = &bytes[(_QWORD)v10 - v7];
    if (v12)
    {
      CGLog(0, (uint64_t)"%s: vm_copy failed: status %d.", v13, v14, v15, v16, v17, v18, (char)"copy_read_only");
      memcpy(v19, bytes, length);
    }
    MEMORY[0x186DC36B4](*v11, v19, length, 1, 1);
    if (!v19)
    {
      return 0;
    }
    else
    {
      if (v19 == bytes)
        return CFDataCreate(0, bytes, length);
      context.version = 0;
      memset(&context.retain, 0, 40);
      context.info = v8;
      context.deallocate = (CFAllocatorDeallocateCallBack)vm_allocator_deallocate;
      context.preferredSize = 0;
      v20 = CFAllocatorCreate(0, &context);
      v2 = CFDataCreateWithBytesNoCopy(0, v19, length, v20);
      CFRelease(v20);
    }
  }
  return v2;
}

__CFData *mask_create(unint64_t Length, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, CGDataProviderRef provider, double *a7, uint64_t a8, int a9)
{
  vImagePixelCount v10;
  __CFData *v13;
  unint64_t v15;
  int v16;
  CGDataProvider *v18;
  CGDataProvider *v19;
  uint64_t image_base;
  int v21;
  CGDataProvider *v22;
  const __CFData *v23;
  const __CFData *v24;
  char *BytePtr;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v10 = Length;
  if (!Length || !a2)
  {
    CGPostError((uint64_t)"%s: invalid image mask size: %lu x %lu.", a2, a3, a4, a5, (uint64_t)provider, (uint64_t)a7, a8, (char)"mask_create");
    return 0;
  }
  if (a3 > 8 || ((1 << a3) & 0x116) == 0)
  {
    CGPostError((uint64_t)"%s: invalid image mask bits/component: %lu.", a2, a3, a4, a5, (uint64_t)provider, (uint64_t)a7, a8, (char)"mask_create");
    return 0;
  }
  if (a3 > a4)
  {
    CGPostError((uint64_t)"%s: invalid image mask bits/pixel: %lu.", a2, a3, a4, a5, (uint64_t)provider, (uint64_t)a7, a8, (char)"mask_create");
    return 0;
  }
  if (0xFFFFFFFFFFFFFFF8 / a4 < a2)
    goto LABEL_9;
  if (0xFFFFFFFFFFFFFFF8 / a4 < Length)
  {
    CGPostError((uint64_t)"%s: invalid image mask width.", a2, a3, a4, a5, (uint64_t)provider, (uint64_t)a7, a8, (char)"mask_create");
    return 0;
  }
  if (0x7FFFFFF8 / a4 < a2)
  {
LABEL_9:
    CGPostError((uint64_t)"%s: unsupported image mask height: %lu.", a2, a3, a4, a5, (uint64_t)provider, (uint64_t)a7, a8, (char)"mask_create");
    return 0;
  }
  if (0x7FFFFFF8 / a4 < Length)
  {
    CGPostError((uint64_t)"%s: unsupported image mask width: %lu.", a2, a3, a4, a5, (uint64_t)provider, (uint64_t)a7, a8, (char)"mask_create");
    return 0;
  }
  v15 = a5;
  if (a5 >> 31)
  {
    CGPostError((uint64_t)"%s: unsupported image mask bytes/row: %lu.", a2, a3, a4, a5, (uint64_t)provider, (uint64_t)a7, a8, (char)"mask_create");
    return 0;
  }
  if (a5 < (a4 * Length + 7) >> 3)
  {
    CGPostError((uint64_t)"%s: invalid image mask bits/pixel or bytes/row.", a2, a3, a4, a5, (uint64_t)provider, (uint64_t)a7, a8, (char)"mask_create");
    return 0;
  }
  v16 = a8;
  v18 = provider;
  if (a3 != a4 && (a4 & 7) != 0)
  {
    CGPostError((uint64_t)"%s: invalid image mask bits/pixel.", a2, a3, a4, a5, (uint64_t)provider, (uint64_t)a7, a8, (char)"mask_create");
    return 0;
  }
  if (!provider)
  {
    CGPostError((uint64_t)"%s: invalid image mask provider: NULL.", a2, a3, a4, a5, 0, (uint64_t)a7, a8, (char)"mask_create");
    return 0;
  }
  if (a3 == a4)
  {
    v19 = 0;
  }
  else
  {
    v23 = CGDataProviderCopyData(provider);
    if (!v23)
      return 0;
    v24 = v23;
    BytePtr = (char *)CFDataGetBytePtr(v23);
    if (!BytePtr)
    {
      CFRelease(v24);
      return 0;
    }
    v13 = compress_data(BytePtr, v10, a2, a3, a4, v15, a9);
    CFRelease(v24);
    if (!v13)
      return v13;
    v18 = CGDataProviderCreateWithCFData(v13);
    CFRelease(v13);
    v15 = CFDataGetLength(v13) / a2;
    Length = CFDataGetLength(v13);
    if (Length != v15 * a2)
    {
      CFDataGetLength(v13);
      _CGHandleAssert("mask_create", 1045, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImage.c", "unsigned_cast(CFDataGetLength(new_data)) == bytes_per_row * height", "bytes per row (%lu) doesn't evenly divide in the data size (%lu)", v26, v27, v28, v15);
    }
    v19 = v18;
    if (!v18)
      return 0;
  }
  image_base = create_image_base(Length, a2, a3, a4, a5, (uint64_t)provider, (uint64_t)a7, a8);
  v13 = (__CFData *)image_base;
  if (!image_base)
  {
    v22 = v18;
    goto LABEL_42;
  }
  *(_QWORD *)(image_base + 40) = v10;
  *(_QWORD *)(image_base + 48) = a2;
  *(_QWORD *)(image_base + 56) = a3;
  *(_QWORD *)(image_base + 64) = a3;
  *(_QWORD *)(image_base + 72) = v15;
  *(_DWORD *)(image_base + 32) = 0;
  *(_QWORD *)(image_base + 144) = 0;
  CGDataProviderRetain(v18);
  *((_QWORD *)v13 + 19) = v18;
  if (v16)
    v21 = 50331649;
  else
    v21 = 33554433;
  *((_DWORD *)v13 + 9) = v21 | *((_DWORD *)v13 + 9) & 0xF0FF0000;
  *((_QWORD *)v13 + 25) = 0;
  *((_QWORD *)v13 + 26) = 0;
  *(_OWORD *)((char *)v13 + 232) = 0u;
  *(_OWORD *)((char *)v13 + 248) = 0u;
  cgimage_set_decode_array((void **)v13, a7, 1uLL);
  if (v19)
  {
    v22 = v19;
LABEL_42:
    CFRelease(v22);
  }
  return v13;
}

uint64_t CGImageCreateWithImageProvider(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v9;
  double v10;
  uint64_t v14;
  unsigned __int8 v16;
  int v17;
  uint64_t v19;
  _QWORD *Property;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t image_base;
  int v40;
  unint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  unint64_t v44;
  int v45;

  if (!a1)
  {
    CGPostError((uint64_t)"%s: invalid image provider: NULL.", (uint64_t)a2, a3, a4, a5, a6, a7, a8, (char)"CGImageCreateWithImageProvider");
    return 0;
  }
  v10 = *(double *)(a1 + 16);
  v9 = *(double *)(a1 + 24);
  if (v10 < 1.0 || v9 < 1.0 || v10 != (double)(unint64_t)v10 || v9 != (double)(unint64_t)v9)
  {
    CGPostError((uint64_t)"%s: invalid image size: %g x %g.", (uint64_t)a2, a3, a4, a5, a6, a7, a8, (char)"CGImageCreateWithImageProvider");
    return 0;
  }
  v16 = a4;
  v17 = a3;
  v19 = *(_QWORD *)(a1 + 120);
  if ((!v19 || (Property = CGPropertiesGetProperty(v19, CFSTR("kCGImageProviderColorSpaceChangedOnImageCopy"))) == 0)
    && (Property = *(_QWORD **)(a1 + 40)) == 0
    || ((v21 = Property[3], v22 = *(_DWORD *)(v21 + 24), v22 >= 6) ? (v23 = v22 == 7) : (v23 = 1), !v23))
  {
    CGPostError((uint64_t)"%s: invalid image colorspace.", (uint64_t)a2, a3, a4, a5, a6, a7, a8, (char)"CGImageCreateWithImageProvider");
    return 0;
  }
  v25 = *(_DWORD *)(a1 + 32);
  v24 = *(_DWORD *)(a1 + 36);
  v45 = v24;
  v26 = *(_QWORD *)(v21 + 40);
  if ((v24 & 0x1F) != 0)
    v27 = v26 + 1;
  else
    v27 = v26;
  v28 = (unint64_t)v10;
  v29 = 32;
  v30 = 10;
  switch(v25)
  {
    case 1:
      v29 = 8 * v27;
      v30 = 8;
      break;
    case 2:
      goto LABEL_34;
    case 3:
      v45 = v24 | 0x2000;
      goto LABEL_32;
    case 4:
LABEL_32:
      v29 = 32 * v27;
      v30 = 32;
      break;
    case 5:
      v45 = v24 | 0x100;
LABEL_34:
      v29 = 16 * v27;
      v30 = 16;
      break;
    case 6:
      break;
    default:
      CGPostError((uint64_t)"%s: invalid image component type.", (uint64_t)a2, a3, a4, a5, a6, a7, a8, (char)"CGImageCreateWithImageProvider");
      return 0;
  }
  v41 = v27;
  v43 = 0;
  v42 = 0;
  v31 = verify_image_parameters((uint64_t)Property, (unsigned int *)&v45, (unint64_t)v10, v30, v29, (v29 * v28) >> 3, (uint64_t)a2, &v44, &v42, &v43);
  v14 = 0;
  if ((_DWORD)v31)
  {
    image_base = create_image_base(v31, v32, v33, v34, v35, v36, v37, v38);
    v14 = image_base;
    if (image_base)
    {
      *(_QWORD *)(image_base + 40) = v28;
      *(_QWORD *)(image_base + 48) = (unint64_t)v9;
      *(_QWORD *)(image_base + 56) = v30;
      *(_QWORD *)(image_base + 64) = v29;
      *(_QWORD *)(image_base + 72) = (v29 * v28) >> 3;
      *(_DWORD *)(image_base + 32) = v45;
      CFRetain(Property);
      *(_QWORD *)(v14 + 144) = Property;
      *(_QWORD *)(v14 + 152) = 0;
      CFRetain((CFTypeRef)a1);
      if (v17)
        v40 = 0x1000000;
      else
        v40 = 0;
      *(_DWORD *)(v14 + 36) = v40 & 0xFFFF00FF | (v16 << 8) | *(_DWORD *)(v14 + 36) & 0xF0FF0000 | (v42 << 26) | 1;
      *(_QWORD *)(v14 + 200) = 0;
      *(_QWORD *)(v14 + 208) = a1;
      *(_OWORD *)(v14 + 232) = 0u;
      *(_OWORD *)(v14 + 248) = 0u;
      cgimage_set_decode_array((void **)v14, a2, v41);
      add_headroom_info_from_image_provider((_QWORD *)v14);
    }
  }
  return v14;
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v29;
  unint64_t v30;
  BOOL v31;
  const UInt8 *(__cdecl *v32)(CFDataRef);
  uint64_t image_base;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v41;
  unsigned int v42;
  CFTypeID v43;
  CGColorSpaceRef ColorSpace;
  CGColorSpaceRef v45;
  unsigned __int8 v46;
  unint64_t v47;
  unint64_t v48;
  CGBitmapInfo v49;

  v49 = bitmapInfo;
  if (!width || !height)
  {
    CGPostError((uint64_t)"%s: invalid image size: %zu x %zu.", height, bitsPerComponent, bitsPerPixel, bytesPerRow, (uint64_t)space, *(uint64_t *)&bitmapInfo, (uint64_t)provider, (char)"CGImageCreate");
    return 0;
  }
  v47 = 0;
  v48 = 0;
  v46 = 0;
  v18 = verify_image_parameters((uint64_t)space, &v49, width, bitsPerComponent, bitsPerPixel, bytesPerRow, (uint64_t)decode, &v48, &v46, (uint64_t *)&v47);
  v26 = 0;
  if (!(_DWORD)v18)
    return (CGImageRef)v26;
  if (!provider)
  {
    CGPostError((uint64_t)"%s: invalid data provider: NULL.", v19, v20, v21, v22, v23, v24, v25, (char)"CGImageCreate");
    return 0;
  }
  v27 = *((_QWORD *)provider + 4);
  if (v27 != -1)
  {
    if (v27 >= 1 && is_mul_ok(height - 1, bytesPerRow))
    {
      v29 = (height - 1) * bytesPerRow;
      v30 = v48 + v29;
      v31 = __CFADD__(v48, v29);
      if (v27 >= v30 && !v31)
      {
        v32 = (const UInt8 *(__cdecl *)(CFDataRef))*((_QWORD *)provider + 10);
        if (v32 == getCFDataBytePointer || (char *)v32 == (char *)data_get_byte_pointer)
        {
          CGDataProviderRetainBytePtr((uint64_t)provider);
          CGDataProviderReleaseBytePtr((uint64_t)provider);
        }
        goto LABEL_21;
      }
    }
    CGPostError((uint64_t)"%s: invalid image data size: %zu (height) x %zu (bytesPerRow) data provider size %lli", v19, v20, v21, v22, v23, v24, v25, (char)"CGImageCreate");
    return 0;
  }
LABEL_21:
  image_base = create_image_base(v18, v19, v20, v21, v22, v23, v24, v25);
  v26 = image_base;
  if (image_base)
  {
    *(_QWORD *)(image_base + 40) = width;
    *(_QWORD *)(image_base + 48) = height;
    *(_QWORD *)(image_base + 56) = bitsPerComponent;
    *(_QWORD *)(image_base + 64) = bitsPerPixel;
    *(_QWORD *)(image_base + 72) = bytesPerRow;
    v34 = v49;
    if (space)
      v35 = *(_DWORD *)(*((_QWORD *)space + 3) + 24);
    else
      v35 = -1;
    v36 = v49 | 0x4000;
    v37 = v49 | 0x3000;
    if (bitsPerComponent != 16)
      v37 = v49;
    if (bitsPerComponent != 32)
      v36 = v37;
    if ((v49 & 0x7100) == 0x100)
      v34 = v36;
    if ((v34 & 0xF0000) == 0 && v35 == 1 && bitsPerPixel == 16 && bitsPerComponent == 5)
      v34 |= 0x10000u;
    *(_DWORD *)(image_base + 32) = v34;
    if (space)
      CFRetain(space);
    *(_QWORD *)(v26 + 144) = space;
    CGDataProviderRetain(provider);
    *(_QWORD *)(v26 + 152) = provider;
    if (shouldInterpolate)
      v41 = 0x1000000;
    else
      v41 = 0;
    v42 = v41 & 0xFFFF00FF | (intent << 8) | *(_DWORD *)(v26 + 36) & 0xF0000000 | (v46 << 26);
    *(_QWORD *)(v26 + 200) = 0;
    *(_QWORD *)(v26 + 208) = 0;
    *(_OWORD *)(v26 + 232) = 0u;
    *(_OWORD *)(v26 + 248) = 0u;
    *(_DWORD *)(v26 + 36) = v42 | 0x10001;
    cgimage_set_decode_array((void **)v26, (double *)decode, v47);
    v43 = CFGetTypeID((CFTypeRef)v26);
    if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1)
      dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_211);
    if (v43 == CGImageGetTypeID_image_type_id)
    {
      ColorSpace = CGImageGetColorSpace((CGImageRef)v26);
      if (ColorSpace)
      {
        if (*(_BYTE *)(*((_QWORD *)ColorSpace + 3) + 13))
        {
          v45 = CGImageGetColorSpace((CGImageRef)v26);
          if (v45)
          {
            if (*(_DWORD *)(*((_QWORD *)v45 + 3) + 24) == 1)
              CGImageSetHeadroom((uint64_t *)v26, 0, 0.0);
          }
        }
      }
    }
  }
  return (CGImageRef)v26;
}

CGDataProviderRef CGDataProviderRetain(CGDataProviderRef provider)
{
  CFTypeID v2;

  if (provider)
  {
    v2 = CFGetTypeID(provider);
    if (kCGDataProviderPropertyTrustToken_block_invoke_once != -1)
      dispatch_once(&kCGDataProviderPropertyTrustToken_block_invoke_once, &__block_literal_global_26_6088);
    if (v2 == CGDataProviderGetTypeID_id)
      CFRetain(provider);
  }
  return provider;
}

uint64_t create_image_base(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t Instance;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  pthread_mutexattr_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1)
    dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_211);
  Instance = CGTypeCreateInstance(CGImageGetTypeID_image_type_id, 248, a3, a4, a5, a6, a7, a8);
  v9 = Instance;
  if (Instance)
  {
    *(_DWORD *)(Instance + 28) = 48879;
    do
    {
      v10 = __ldxr((unsigned int *)&identifier);
      v11 = v10 + 1;
    }
    while (__stxr(v11, (unsigned int *)&identifier));
    *(_DWORD *)(Instance + 24) = v11;
    v13.__sig = 0;
    *(_QWORD *)v13.__opaque = 0;
    pthread_mutexattr_init(&v13);
    pthread_mutexattr_settype(&v13, 2);
    pthread_mutex_init((pthread_mutex_t *)(v9 + 80), &v13);
    pthread_mutexattr_destroy(&v13);
  }
  return v9;
}

double cgimage_set_decode_array(void **image, double *a2, unint64_t a3)
{
  CGColorSpaceRef ColorSpace;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  double result;
  int v21;
  int v22;
  uint64_t v23;
  double *v24;
  int v25;
  int v26;
  int Type;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  unint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  double *v41;
  double *v42;
  unint64_t v43;
  double v44;
  int v45;
  double *v46;
  double *v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  double *v51;
  unint64_t v52;
  int v53;
  int v54;
  _OWORD v55[3];
  __int128 v56;
  __int128 v57;
  __int128 v58;

  if (!a2)
    goto LABEL_15;
  ColorSpace = CGImageGetColorSpace((CGImageRef)image);
  v14 = (uint64_t)ColorSpace;
  if (ColorSpace)
    v15 = *(_QWORD *)(*((_QWORD *)ColorSpace + 3) + 40);
  else
    v15 = (unint64_t)image[8] / (unint64_t)image[7];
  v16 = 0;
  v17 = 0;
  v18 = v15;
  switch((_DWORD)image[4] & 0x1F)
  {
    case 0:
      break;
    case 1:
    case 3:
    case 5:
      v16 = 0;
      v18 = v15 + 1;
      v17 = 1;
      break;
    case 2:
    case 4:
      v17 = 0;
      v18 = v15 + 1;
      v16 = 1;
      break;
    case 6:
      v16 = 0;
      v17 = 0;
      v18 = v15 + 1;
      break;
    default:
      CGPostError((uint64_t)"%s: invalid image alphaInfo: %d", v7, v8, v9, v10, v11, v12, v13, (char)"cgimage_set_decode_array");
      goto LABEL_15;
  }
  if (v15 > a3 || v18 < a3)
  {
    CGPostError((uint64_t)"%s: invalid number of decode components: %d", v7, v8, v9, v10, v11, v12, v13, (char)"cgimage_set_decode_array");
LABEL_15:
    free(image[20]);
    image[20] = 0;
    return result;
  }
  if (v18 == a3)
    v21 = 0;
  else
    v21 = v16 | v17;
  v53 = v17;
  v54 = v21;
  v22 = v16 ^ 1 | v21;
  if (v22)
    v23 = 0;
  else
    v23 = 2;
  v24 = &a2[v23];
  if ((v22 & 1) != 0 || *a2 == 0.0 && a2[1] == 1.0)
  {
    v25 = 1;
    if (ColorSpace)
      goto LABEL_29;
  }
  else
  {
    v25 = 0;
    if (ColorSpace)
    {
LABEL_29:
      v52 = (unint64_t)image[7];
      v26 = v25;
      Type = CGColorSpaceGetType(ColorSpace);
      v25 = v26;
      switch(Type)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 8:
          goto LABEL_30;
        case 5:
          v57 = 0u;
          v58 = 0u;
          v56 = 0u;
          memset(v55, 0, sizeof(v55));
          CGColorSpaceGetLabData(v14, v32, v33, v34, v55);
          if (*v24 != 0.0)
            goto LABEL_45;
          v37 = v54;
          v25 = v26;
          if (v24[1] != 100.0)
          {
            v39 = 0;
            v38 = v53;
            goto LABEL_61;
          }
          v38 = v53;
          if (v24[2] != *(double *)&v56
            || v24[3] != *((double *)&v56 + 1)
            || v24[4] != *(double *)&v57
            || v24[5] != *((double *)&v57 + 1))
          {
            break;
          }
          goto LABEL_35;
        case 6:
        case 10:
        case 11:
          v40 = CGColorSpaceICCGetRange(v14, v28, v29, v30, v31, v32, v33, v34);
          if (!v40)
          {
LABEL_45:
            v39 = 0;
            v25 = v26;
            goto LABEL_46;
          }
          v25 = v26;
          if (!v15)
            goto LABEL_43;
          v41 = (double *)(v40 + 8);
          v42 = &a2[v23 + 1];
          v43 = v15;
          v38 = v53;
          v37 = v54;
          v39 = 1;
          while (*(v42 - 1) == *(v41 - 1) && *v42 == *v41)
          {
            v41 += 2;
            v42 += 2;
            if (!--v43)
              goto LABEL_61;
          }
          break;
        case 7:
          if (v15 != 1)
            _CGHandleAssert("colorspace_indexed_decode_array_is_identity", 162, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImage.c", "decode_components == 1", "decode components %zu", v32, v33, v34, v15);
          v38 = v53;
          v37 = v54;
          if (v52 >= 0x21)
            _CGHandleAssert("colorspace_indexed_decode_array_is_identity", 163, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImage.c", "bits_per_component <= 32", "bpc %zu", v32, v33, v34, v52);
          if (*v24 == 0.0)
          {
            v44 = (double)~(-1 << v52);
            if (v52 == 32)
              v44 = 4294967300.0;
            if (v24[1] == v44)
              goto LABEL_35;
          }
          break;
        default:
          abort();
      }
LABEL_60:
      v39 = 0;
      goto LABEL_61;
    }
  }
LABEL_30:
  if (v15)
  {
    v35 = &a2[v23 + 1];
    v36 = v15;
    v38 = v53;
    v37 = v54;
    while (*(v35 - 1) == 0.0 && *v35 == 1.0)
    {
      v35 += 2;
      if (!--v36)
      {
LABEL_35:
        v39 = 1;
        goto LABEL_61;
      }
    }
    goto LABEL_60;
  }
LABEL_43:
  v39 = 1;
LABEL_46:
  v38 = v53;
  v37 = v54;
LABEL_61:
  v45 = v25 & v39;
  if (((v38 ^ 1 | v37) & 1) != 0)
  {
    if (v45)
      goto LABEL_15;
  }
  else if (a2[2 * v18 - 2] == 0.0)
  {
    if (a2[2 * v18 - 1] != 1.0)
      LOBYTE(v45) = 0;
    if ((v45 & 1) != 0)
      goto LABEL_15;
  }
  free(image[20]);
  v46 = (double *)malloc_type_malloc(16 * v18, 0x705560E0uLL);
  image[20] = v46;
  v47 = v46;
  if (v16)
  {
    if (v37)
    {
      *v46 = 0.0;
      result = 1.0;
    }
    else
    {
      *v46 = *a2;
      result = a2[1];
    }
    v46[1] = result;
    v47 = v46 + 2;
  }
  if (2 * v15)
  {
    v48 = 2 * v15;
    do
    {
      v49 = *v24++;
      result = v49;
      *v47++ = v49;
      --v48;
    }
    while (v48);
  }
  if ((v38 & 1) != 0)
  {
    if (v37)
    {
      v50 = 2 * v18;
      v46[2 * v18 - 2] = 0.0;
      result = 1.0;
    }
    else
    {
      v51 = &a2[2 * a3];
      v50 = 2 * v18;
      v46[2 * v18 - 2] = *(v51 - 2);
      result = *(v51 - 1);
    }
    v46[v50 - 1] = result;
  }
  if (((_DWORD)image[4] & 0x1F) == 6)
  {
    result = 0.0;
    *(_OWORD *)&v46[2 * v15] = xmmword_185004A20;
  }
  return result;
}

uint64_t verify_image_parameters(uint64_t a1, unsigned int *a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, unint64_t *a8, _BYTE *a9, uint64_t *a10)
{
  uint64_t v18;
  int v19;
  _BOOL4 v20;
  BOOL v21;
  uint64_t result;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  _BOOL4 v37;
  BOOL v38;
  int v39;
  int v40;
  _BOOL4 v41;
  _BOOL4 v42;
  unint64_t v43;

  v18 = *a2;
  if ((v18 & 0x100) != 0)
  {
    if (a4 == 16)
    {
      if ((a5 & 0xF) == 0)
      {
        v19 = v18 & 0x7000;
        v20 = a5 == 16;
        goto LABEL_17;
      }
    }
    else
    {
      if (a4 != 32)
      {
        CGPostError((uint64_t)"%s: invalid floating-point bits/component: %lu.", v18, a3, a4, a5, a6, a7, (uint64_t)a8, (char)"verify_image_parameters");
        return 0;
      }
      if ((a5 & 0x1F) == 0)
        goto LABEL_7;
    }
    CGPostError((uint64_t)"%s: invalid floating-point bits/pixel: %lu.", v18, a3, a4, a5, a6, a7, (uint64_t)a8, (char)"verify_image_parameters");
    return 0;
  }
  if ((unint64_t)(a4 - 33) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    CGPostError((uint64_t)"%s: invalid integer bits/component: %lu.", v18, a3, a4, a5, a6, a7, (uint64_t)a8, (char)"verify_image_parameters");
    return 0;
  }
LABEL_7:
  v19 = v18 & 0x7000;
  v20 = a5 == 16;
  if (a4 != 16 && a5 != 16)
  {
    if ((v18 & 0x5000) != 0x1000)
    {
      v20 = 0;
      goto LABEL_23;
    }
    CGPostError((uint64_t)"%s: invalid image byte order info for bitsPerPixel != 16 = %u", v18, a3, a4, a5, a6, a7, (uint64_t)a8, (char)"verify_image_parameters");
    v21 = linked_on_sydro_or_later();
    v20 = 0;
    result = 0;
    if (v21)
      return result;
    goto LABEL_22;
  }
LABEL_17:
  if ((v18 & 0x5000) != 0x1000 && v19 != 0)
  {
    CGPostError((uint64_t)"%s: invalid image byte order info for bitsPerPixel == 16 = %u", v18, a3, a4, a5, a6, a7, (uint64_t)a8, (char)"verify_image_parameters");
    if (linked_on_sydro_or_later())
      return 0;
LABEL_22:
    v19 = 0;
    v18 = *a2 & 0xFFFF8FFF;
    *a2 = v18;
  }
LABEL_23:
  v25 = a4 != 16 && a5 == 32;
  if (a4 == 32 || v25)
  {
    if (v19 == 0x4000 || (v19 & 0x5000) == 0)
      goto LABEL_39;
    CGPostError((uint64_t)"%s: invalid image byte order info for bitsPerPixel == 32 = %u", v18, a3, a4, a5, a6, a7, (uint64_t)a8, (char)"verify_image_parameters");
  }
  else
  {
    if (v19 != 0x4000 && v19 != 0x2000)
      goto LABEL_39;
    CGPostError((uint64_t)"%s: invalid image byte order info for bitsPerPixel != 32 = %u", v18, a3, a4, a5, a6, a7, (uint64_t)a8, (char)"verify_image_parameters");
  }
  if (linked_on_sydro_or_later())
    return 0;
  v19 = 0;
  LODWORD(v18) = *a2 & 0xFFFF8FFF;
  *a2 = v18;
LABEL_39:
  if ((valid_image_colorspace(a1, v18) & 1) == 0)
  {
    CGPostError((uint64_t)"%s: invalid image colorspace: NULL.", v26, v27, v28, v29, v30, v31, v32, (char)"verify_image_parameters");
    return 0;
  }
  v33 = a10;
  if (!a1)
  {
    v37 = 0;
    *a10 = 0;
    v35 = *a2;
    v38 = (*a2 & 0x1F) == 0;
    goto LABEL_57;
  }
  v34 = *(_QWORD *)(a1 + 24);
  a1 = *(_QWORD *)(v34 + 40);
  *a10 = a1;
  v35 = *a2;
  v36 = *(_DWORD *)(v34 + 24);
  v37 = v36 == 1;
  v38 = (*a2 & 0x1F) == 0;
  if (a5 != 32 || a4 != 8 || v36 != 1 || (*a2 & 0x1F) != 0)
  {
LABEL_57:
    *a9 = 0;
    v39 = v35 & 0x1F;
    if ((v39 - 1) >= 4)
    {
      if ((v39 - 5) >= 2)
      {
        if ((v35 & 0x1F) != 0)
        {
          CGPostError((uint64_t)"%s: invalid image alphaInfo: %d", v26, v27, v28, v29, v30, v31, v32, (char)"verify_image_parameters");
          return 0;
        }
LABEL_61:
        v40 = v35 & 0xF0000;
        v41 = a4 == 5 && v20;
        if (v41 && v37)
        {
          if (v40 == 0x20000 || v40 == 0x10000)
          {
LABEL_69:
            if (v40 == 0x20000)
            {
              if ((v35 & 0x1F) != 0)
              {
                CGPostError((uint64_t)"%s: invalid alpha info for kCGImagePixelFormatRGB565 = %u", v26, v27, v28, v29, v30, v31, v32, (char)"verify_image_parameters");
                return 0;
              }
            }
            else if (v40 == 0x10000 && (v35 & 0x1F) <= 2)
            {
              CGPostError((uint64_t)"%s: invalid alpha info for kCGImagePixelFormatRGB555 = %u", v26, v27, v28, v29, v30, v31, v32, (char)"verify_image_parameters");
              return 0;
            }
LABEL_94:
            if (0xFFFFFFFFFFFFFFF8 / a5 >= a3)
            {
              if (0x7FFFFFF8 / a5 >= a3)
              {
                if (a6 >> 31)
                {
                  CGPostError((uint64_t)"%s: unsupported image bytes/row: %lu.", v26, v27, v28, v29, v30, v31, v32, (char)"verify_image_parameters");
                }
                else
                {
                  *a8 = a3 * a5;
                  if (is_mul_ok(a3, a5))
                  {
                    v43 = (a3 * a5 + 7) >> 3;
                    *a8 = v43;
                    if (v43 <= a6)
                      return 1;
                    CGPostError((uint64_t)"%s: invalid image bits/pixel or bytes/row.", v26, v27, v28, v29, v30, v31, v32, (char)"verify_image_parameters");
                  }
                  else
                  {
                    CGPostError((uint64_t)"%s: invalid image bits/pixel or width.", v26, v27, v28, v29, v30, v31, v32, (char)"verify_image_parameters");
                  }
                }
              }
              else
              {
                CGPostError((uint64_t)"%s: unsupported image width: %lu.", v26, v27, v28, v29, v30, v31, v32, (char)"verify_image_parameters");
              }
            }
            else
            {
              CGPostError((uint64_t)"%s: invalid image width.", v26, v27, v28, v29, v30, v31, v32, (char)"verify_image_parameters");
            }
            return 0;
          }
          if (!v40)
          {
            v35 |= 0x10000u;
            *a2 = v35;
            v40 = v35 & 0xF0000;
            goto LABEL_69;
          }
        }
        else
        {
          v42 = a4 == 10 && v37;
          if (a5 != 32 || !v42)
          {
            if (a1 * a4 != a5)
            {
              CGPostError((uint64_t)"%s: invalid image bits/component: %lu bits/pixel %lu alpha info = %s", v26, v27, v28, v29, v30, v31, v32, (char)"verify_image_parameters");
              return 0;
            }
            if (v40)
            {
              CGPostError((uint64_t)"%s: invalid image pixel format info = %u", v26, v27, v28, v29, v30, v31, v32, (char)"verify_image_parameters");
              return 0;
            }
            goto LABEL_94;
          }
          if (v40 == 196608)
          {
            if (!v39)
            {
              CGPostError((uint64_t)"%s: invalid alpha info for kCGImagePixelFormatRGB101010 = %u", v26, v27, v28, v29, v30, v31, v32, (char)"verify_image_parameters");
              return 0;
            }
            goto LABEL_94;
          }
          if (v40 == 0x40000)
          {
            if (!v38)
            {
              CGPostError((uint64_t)"%s: invalid alpha info for kCGImagePixelFormatRGBCIF10 = %u. Use kCGImageAlphaNone instead.", v26, v27, v28, v29, v30, v31, v32, (char)"verify_image_parameters");
              return 0;
            }
            if (v19 != 0x2000)
            {
              CGPostError((uint64_t)"%s: invalid image byte order info for kCGImagePixelFormatRGBCIF10 = %u", v26, v27, v28, v29, v30, v31, v32, (char)"verify_image_parameters");
              return 0;
            }
            if (a7)
            {
              CGPostError((uint64_t)"%s: kCGImagePixelFormatRGBCIF10 doesn't not allow decode", v26, v27, v28, v29, v30, v31, v32, (char)"verify_image_parameters");
              return 0;
            }
            goto LABEL_94;
          }
        }
        CGPostError((uint64_t)"%s: invalid image bits/component: %lu bits/pixel %lu pixel format = %u", v26, v27, v28, v29, v30, v31, v32, (char)"verify_image_parameters");
        return 0;
      }
    }
    else
    {
      *a9 = 1;
      ++*v33;
    }
    ++a1;
    goto LABEL_61;
  }
  CGPostError((uint64_t)"%s: invalid image alphaInfo: kCGImageAlphaNone. It should be kCGImageAlphaNoneSkipLast", v26, v27, v28, v29, v30, v31, v32, (char)"verify_image_parameters");
  if (linked_on_dawnburst_or_later_predicate != -1)
    dispatch_once(&linked_on_dawnburst_or_later_predicate, &__block_literal_global_238);
  result = 0;
  if (!linked_on_dawnburst_or_later_linked_on_macOS14_or_later
    && !linked_on_dawnburst_or_later_linked_on_iOS17_or_later
    && !linked_on_dawnburst_or_later_linked_on_tvOS17_or_later
    && !linked_on_dawnburst_or_later_linked_on_watchOS10_or_later
    && !linked_on_dawnburst_or_later_linked_on_borealis_or_later)
  {
    v35 = *a2 & 0xFFFFFFE0 | 5;
    *a2 = v35;
    v38 = 1;
    v37 = 1;
    v33 = a10;
    goto LABEL_57;
  }
  return result;
}

uint64_t valid_image_colorspace(uint64_t result, int a2)
{
  _QWORD *v3;
  int Type;
  uint64_t v5;
  CGColorSpaceRef v6;

  if (!result)
    return result;
  v3 = (_QWORD *)result;
  Type = CGColorSpaceGetType((_QWORD *)result);
  switch(Type)
  {
    case 5:
LABEL_6:
      if ((a2 & 0x1Fu) - 1 >= 2)
        break;
      return 0;
    case 9:
      return 0;
    case 7:
      if ((a2 & 0xF00) != 0)
        return 0;
      goto LABEL_6;
  }
  if ((a2 & 0xF0000) == 0x40000)
  {
    v6 = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceExtendedSRGB"));
    result = CFEqual(v3, v6);
    if (!(_DWORD)result)
      return result;
  }
  else if ((a2 & 0xF0000) == 0x30000)
  {
    v5 = v3[3];
    if (*(_BYTE *)(v5 + 13) || *(_DWORD *)(v5 + 24) != 1)
      return 0;
  }
  return 1;
}

uint64_t rip_auto_context_rasterization_loop(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  CFStringRef *v13;
  CGColorSpaceRef v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CGColorSpaceRef v18;
  int v19;
  int v20;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  float64_t v29;
  float64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  CGColorSpace *v36;
  double v37;
  int v38;
  BOOL v39;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  int v45;
  unint64_t v46;
  uint64_t v47;
  CGColorSpace *v48;
  double v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t, uint64_t, __int128 *);
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  float64x2_t v65;
  uint64_t v66;
  uint64_t v67;
  float64x2_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  _QWORD *v73;
  uint64_t v74;
  double v75;
  double v76;
  int v77;
  uint64_t v78;
  BOOL v79;
  int v80;
  const __CFString *v81;
  CFIndex v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t (*v90)(char *, unint64_t, unint64_t, __int128 *);
  unint64_t v91;
  unint64_t v92;
  __int128 v93;
  float64x2_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  CFIndex Count;
  CFIndex v103;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  int v113;
  const __CFDictionary *v114;
  CFErrorRef v115;
  void (*v116)(void);
  __int128 v117;
  float64x2_t v118;
  const CGRect *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  const void *v125;
  const void *CGDisplayList;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v135;
  char v136;
  uint64_t v137;
  unsigned int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  CGColorSpace *v143;
  int v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  __int128 v155;
  float64x2_t v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  void *keys[2];
  float64x2_t v161;
  __int128 v162;
  uint64_t v163;
  void *values[3];

  values[1] = *(void **)MEMORY[0x1E0C80C00];
  v2 = *(const void **)(a1 + 88);
  if (v2)
  {
    CFRetain(v2);
    return 0;
  }
  v4 = *(const void **)(a1 + 80);
  if (!v4)
    return 0;
  CFRelease(v4);
  *(_QWORD *)(a1 + 80) = 0;
  v5 = *(unsigned int *)(a1 + 100);
  v6 = *(unsigned int *)(a1 + 108);
  v7 = *(unsigned __int8 *)(a1 + 104);
  v147 = *(unsigned __int8 *)(a1 + 105);
  if (*(_BYTE *)(a1 + 104))
  {
    v8 = 1;
  }
  else
  {
    if ((_DWORD)v5 == 1 && (_DWORD)v6 == 1)
    {
      v9 = *(_DWORD *)(a1 + 96);
      v10 = *(unsigned __int8 *)(a1 + 105);
      v11 = *(_QWORD *)a1;
      v153 = *(_QWORD *)(a1 + 8);
LABEL_17:
      if (v10 == 1)
        v12 = 2;
      else
        v12 = 1;
      v13 = (CFStringRef *)&kCGColorSpaceGenericGrayGamma2_2;
      goto LABEL_31;
    }
    if ((_DWORD)v5 == 1)
      v8 = 2;
    else
      v8 = 1;
  }
  if (*(_BYTE *)(a1 + 105))
    v10 = v8;
  else
    v10 = 5;
  v9 = *(_DWORD *)(a1 + 96);
  v11 = *(_QWORD *)a1;
  v153 = *(_QWORD *)(a1 + 8);
  if ((_DWORD)v6 == 1)
    goto LABEL_17;
  switch(v10)
  {
    case 1u:
      v12 = 3;
      goto LABEL_27;
    case 2u:
      v12 = 7;
LABEL_27:
      v13 = (CFStringRef *)&kCGColorSpaceExtendedSRGB;
      if (!*(_BYTE *)(a1 + 104))
        v13 = (CFStringRef *)&kCGColorSpaceSRGB;
      goto LABEL_31;
    case 5u:
      v12 = 5;
      goto LABEL_27;
  }
  v13 = (CFStringRef *)&kCGColorSpaceGenericGrayGamma2_2;
  v12 = 1;
LABEL_31:
  v14 = CGColorSpaceCreateWithName(*v13);
  v18 = v14;
  if (v14)
  {
    if (*(_BYTE *)(*((_QWORD *)v14 + 3) + 14))
      v19 = v9;
    else
      v19 = 1;
  }
  else
  {
    v19 = 1;
  }
  v20 = (v10 - 1) < 2;
  v22 = v12 == 7 || v19 != 1;
  if (v14)
    v23 = *(_QWORD *)(*((_QWORD *)v14 + 3) + 40);
  else
    v23 = 0;
  v149 = v6;
  v150 = v5;
  v148 = v7;
  switch(v19)
  {
    case 1:
      v24 = 1;
      break;
    case 4:
      v24 = 4;
      break;
    case 5:
      v24 = 2;
      break;
    default:
      _CGHandleAssert("rip_auto_context_get_aligned_bytes_per_row_for_info", 961, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/AutomaticBitmapContext/RIPAutomaticContext.c", "component_size != 0", "component type not supported (%u)", v15, v16, v17, v19);
  }
  v151 = v12;
  if (v12 != 1)
    ++v23;
  v25 = v24 * v23;
  v26 = *(_QWORD *)(a1 + 184);
  v27 = *(_QWORD *)(a1 + 192);
  v28 = (__int128 *)(a1 + 184);
  v29 = *(double *)(a1 + 200);
  v30 = *(double *)(a1 + 208);
  v31 = (v24 * v23 * v11 + 31) & 0xFFFFFFFFFFFFFFE0;
  v32 = *(_QWORD *)(a1 + 216);
  v34 = *(_DWORD *)(a1 + 224);
  v33 = *(_DWORD *)(a1 + 228);
  v35 = *(_QWORD *)(a1 + 232);
  v36 = *(CGColorSpace **)(a1 + 240);
  LODWORD(v37) = *(unsigned __int8 *)(a1 + 248);
  v38 = *(_DWORD *)(a1 + 252);
  v146 = v11;
  v145 = v20;
  if (v11 != v27 || v153 != *(_QWORD *)&v29)
    goto LABEL_78;
  v39 = v25 == *(_QWORD *)&v30 && v31 == v32;
  v40 = v39 && v19 == v34;
  v41 = v40 && v12 == v33;
  v42 = v41 && (_DWORD)v35 == 0;
  v43 = v42 && LODWORD(v37) == v20;
  if (!v43 || v38 != v22)
    goto LABEL_78;
  v141 = v24 * v23;
  v142 = v19;
  v45 = v22;
  v46 = (v24 * v23 * v11 + 31) & 0xFFFFFFFFFFFFFFE0;
  v138 = *(_DWORD *)(a1 + 228);
  v139 = *(_DWORD *)(a1 + 252);
  v47 = *(_QWORD *)(a1 + 184);
  v143 = v14;
  v48 = *(CGColorSpace **)(a1 + 240);
  v49 = *(double *)(a1 + 200);
  v136 = *(_BYTE *)(a1 + 248);
  v37 = *(double *)(a1 + 208);
  v140 = *(_QWORD *)(a1 + 216);
  v137 = *(_QWORD *)(a1 + 232);
  v50 = CGColorSpaceEqualToColorSpace((uint64_t)v14, (uint64_t)v36);
  v35 = v137;
  v33 = v138;
  v38 = v139;
  v30 = v37;
  LOBYTE(v37) = v136;
  v29 = v49;
  v36 = v48;
  v26 = v47;
  v19 = v142;
  v18 = v143;
  v31 = v46;
  v22 = v45;
  v32 = v140;
  v25 = v141;
  if (!v50)
    goto LABEL_78;
  if (*(_QWORD *)(a1 + 40))
  {
    CGColorSpaceRelease(v143);
    v56 = 0;
  }
  else
  {
LABEL_78:
    v57 = v149 | (v148 << 32) | (v147 << 40);
    v58 = *(_QWORD *)(a1 + 48);
    v144 = v22;
    if (v58)
    {
      v59 = v31;
      v60 = *(_QWORD *)(a1 + 256);
      if (v60)
      {
        v61 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int128 *))(v58 + 16);
        *(_QWORD *)&v155 = v26;
        *((_QWORD *)&v155 + 1) = v27;
        v156.f64[0] = v29;
        v156.f64[1] = v30;
        *(_QWORD *)&v157 = v32;
        *((_QWORD *)&v157 + 1) = __PAIR64__(v33, v34);
        *(_QWORD *)&v158 = v35;
        *((_QWORD *)&v158 + 1) = v36;
        LOBYTE(v159) = LOBYTE(v37);
        *(_WORD *)((char *)&v159 + 1) = *(_WORD *)(a1 + 249);
        v62 = a1 + 249;
        BYTE3(v159) = *(_BYTE *)(a1 + 251);
        HIDWORD(v159) = v38;
        v61(v58, v60, v150 << 32, v57, &v155);
        *(_QWORD *)(a1 + 256) = 0;
        v36 = *(CGColorSpace **)(a1 + 240);
      }
      else
      {
        v62 = a1 + 249;
      }
    }
    else
    {
      v62 = a1 + 249;
      v59 = v31;
    }
    CGColorSpaceRelease(v36);
    *(_QWORD *)(a1 + 248) = 0;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *v28 = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    if (v18)
      CFRetain(v18);
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = v146;
    *(_QWORD *)(a1 + 200) = v153;
    *(_QWORD *)(a1 + 208) = v25;
    *(_QWORD *)(a1 + 216) = v59;
    *(_DWORD *)(a1 + 224) = v19;
    *(_DWORD *)(a1 + 228) = v151;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = v18;
    *(_BYTE *)(a1 + 248) = v145;
    *(_WORD *)v62 = 0;
    *(_BYTE *)(v62 + 2) = 0;
    *(_DWORD *)(a1 + 252) = v144;
    v63 = *(_QWORD *)(a1 + 32);
    if (v63)
    {
      v64 = *(_OWORD *)(a1 + 232);
      v157 = *(_OWORD *)(a1 + 216);
      v158 = v64;
      v159 = *(_QWORD *)(a1 + 248);
      v65 = *(float64x2_t *)(a1 + 200);
      v155 = *v28;
      v156 = v65;
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __int128 *))(v63 + 16))(v63, v150 << 32, v57, &v155) & 1) == 0)
      {
        CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 240));
        *(_QWORD *)(a1 + 248) = 0;
        *(_OWORD *)(a1 + 216) = 0u;
        *(_OWORD *)(a1 + 232) = 0u;
        *v28 = 0u;
        *(_OWORD *)(a1 + 200) = 0u;
        *(_OWORD *)keys = v155;
        v161 = v156;
        v162 = v157;
        v66 = *((_QWORD *)&v158 + 1);
        v163 = v158;
        v67 = v159;
        if (*((_QWORD *)&v158 + 1))
          CFRetain(*((CFTypeRef *)&v158 + 1));
        v68 = v161;
        *v28 = *(_OWORD *)keys;
        *(float64x2_t *)(a1 + 200) = v68;
        *(_OWORD *)(a1 + 216) = v162;
        *(_QWORD *)(a1 + 232) = v163;
        *(_QWORD *)(a1 + 240) = v66;
        *(_QWORD *)(a1 + 248) = v67;
      }
    }
    v56 = 1;
  }
  v69 = *(_QWORD *)(a1 + 192);
  v70 = *(_QWORD *)(a1 + 200);
  v71 = *(_QWORD *)(a1 + 216);
  v72 = *(_DWORD *)(a1 + 224);
  v73 = *(_QWORD **)(a1 + 240);
  v74 = *(unsigned __int8 *)(a1 + 248);
  v75 = *(double *)(a1 + 16);
  v76 = *(double *)(a1 + 24);
  v77 = 7;
  v78 = *(_QWORD *)(a1 + 64);
  switch(*(_DWORD *)(a1 + 228))
  {
    case 0:
      goto LABEL_105;
    case 1:
    case 9:
      goto LABEL_92;
    case 2:
      v77 = 1;
      goto LABEL_105;
    case 3:
      if (*(_BYTE *)(a1 + 248))
        v77 = 1;
      else
        v77 = 3;
      goto LABEL_105;
    case 4:
      if (*(_BYTE *)(a1 + 248))
        v77 = 2;
      else
        v77 = 4;
      goto LABEL_105;
    case 5:
      v79 = v74 == 0;
      v80 = 5;
      goto LABEL_102;
    case 6:
      v79 = v74 == 0;
      v80 = 6;
LABEL_102:
      if (v79)
        v77 = v80;
      else
        v77 = 0;
      goto LABEL_105;
    case 7:
      if (v72 != 1)
        goto LABEL_92;
      v112 = v74 == 0;
      v113 = 8194;
      goto LABEL_136;
    case 8:
      if (v72 == 1)
      {
        v112 = v74 == 0;
        v113 = 8193;
LABEL_136:
        if (v112)
          v77 = 0;
        else
          v77 = v113;
        v83 = 8;
        if (!v73)
          goto LABEL_107;
      }
      else
      {
LABEL_92:
        v77 = 0;
LABEL_105:
        v81 = CFSTR("Provided CGBitmapContextInfo results in bits_per_component equal zero");
        v82 = -1;
        v83 = 8;
        switch(v72)
        {
          case 1:
            break;
          case 2:
          case 5:
            v83 = 16;
            if (!v73)
              goto LABEL_107;
            goto LABEL_110;
          case 4:
            v83 = 32;
            break;
          default:
            goto LABEL_142;
        }
        if (!v73)
        {
LABEL_107:
          v84 = 0;
          v85 = v77 != 0;
          goto LABEL_116;
        }
      }
LABEL_110:
      v86 = v73[3];
      if (v77)
        v85 = *(_QWORD *)(v86 + 40) + 1;
      else
        v85 = *(_QWORD *)(v86 + 40);
      if (*(_BYTE *)(v86 + 13))
        v84 = 4352;
      else
        v84 = 0;
LABEL_116:
      v87 = *(char **)(a1 + 40);
      if (v87)
      {
        v88 = *(char **)(a1 + 256);
        v154 = v56;
        v152 = *(_QWORD *)(a1 + 64);
        if (v56)
        {
          if (v88)
            _CGHandleAssert("rip_auto_context_create_bitmap_context", 469, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/AutomaticBitmapContext/RIPAutomaticContext.c", "data->current_provider == NULL", "buffer provider is missing", v71, v54, v55, v135);
          v89 = *(_QWORD *)(a1 + 216);
          v90 = (uint64_t (*)(char *, unint64_t, unint64_t, __int128 *))*((_QWORD *)v87 + 2);
          v91 = *(unsigned int *)(a1 + 108) | ((unint64_t)*(unsigned __int8 *)(a1 + 104) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 105) << 40);
          v92 = (unint64_t)*(unsigned int *)(a1 + 100) << 32;
          v93 = *(_OWORD *)(a1 + 232);
          v157 = *(_OWORD *)(a1 + 216);
          v158 = v93;
          v159 = *(_QWORD *)(a1 + 248);
          v94 = *(float64x2_t *)(a1 + 200);
          v155 = *v28;
          v156 = v94;
          v95 = v90(v87, v92, v91, &v155);
          if (!v95)
          {
            v81 = CFSTR("allocate callback returned NULL CGBufferProviderRef");
            v82 = -3;
            goto LABEL_142;
          }
          v88 = (char *)v95;
          *(_QWORD *)(a1 + 256) = v95;
        }
        else
        {
          v89 = *(_QWORD *)(a1 + 216);
          if (!v88)
            _CGHandleAssert("rip_auto_context_create_bitmap_context", 486, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/AutomaticBitmapContext/RIPAutomaticContext.c", "buffer_provider != NULL", "buffer provider is missing2", v71, v54, v55, v135);
        }
        v87 = CGBufferLockBytePtr(v88);
        if (!v87)
          _CGHandleAssert("rip_auto_context_handle_error", 162, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/AutomaticBitmapContext/RIPAutomaticContext.c", "0", "unhandled error code %d", v98, v99, v100, -4);
        v96 = (void (*)(uint64_t, uint64_t))rip_auto_context_release_bitmap_context_data;
        v97 = a1;
        v71 = v89;
        v56 = v154;
        v78 = v152;
      }
      else
      {
        v96 = 0;
        v97 = 0;
      }
      v101 = CGBitmapContextCreateWithDataAndDictionary((uint64_t)v87, v69, v70, v83, v85 * v83, v71, v73, v84 | v77, v75, v76, v96, v97, v78);
      if (v101)
      {
        v3 = (uint64_t)v101;
        if (v56)
        {
          Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 176));
          if (Count)
          {
            v103 = Count;
            for (i = 0; i != v103; ++i)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), i);
              CGDisplayListDrawInContext((uint64_t)ValueAtIndex, v3, v106, v107, v108, v109, v110, v111);
            }
          }
        }
        goto LABEL_146;
      }
      v81 = CFSTR("Failed to create bitmap context when using provided CGBitmapContextInfo");
      v82 = -2;
LABEL_142:
      if (*(_QWORD *)(a1 + 56))
      {
        keys[0] = *(void **)MEMORY[0x1E0C9AFB0];
        values[0] = (void *)v81;
        v114 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v115 = CFErrorCreate(0, CFSTR("CGBitmapContextWithCallbacksDomain"), v82, v114);
        CFRelease(v114);
        v116 = *(void (**)(void))(*(_QWORD *)(a1 + 56) + 16);
        v117 = *(_OWORD *)(a1 + 232);
        v157 = *(_OWORD *)(a1 + 216);
        v158 = v117;
        v159 = *(_QWORD *)(a1 + 248);
        v118 = *(float64x2_t *)(a1 + 200);
        v155 = *v28;
        v156 = v118;
        v116();
        CFRelease(v115);
        v3 = 0;
        if (*(_QWORD *)(a1 + 56))
          goto LABEL_147;
      }
      else
      {
        v3 = 0;
      }
LABEL_146:
      CGDisplayListDrawInContext(*(_QWORD *)(a1 + 72), v3, v51, v52, v53, v71, v54, v55);
LABEL_147:
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 176), *(const void **)(a1 + 72));
      v125 = *(const void **)(a1 + 72);
      if (v125)
        CFRelease(v125);
      v155 = 0uLL;
      v156 = vcvtq_f64_u64(*(uint64x2_t *)a1);
      CGDisplayList = (const void *)CG::DisplayList::createCGDisplayList(0, (const __CFDictionary *)&v155, v119, v120, v121, v122, v123, v124);
      *(_QWORD *)(a1 + 72) = CGDisplayList;
      *(_QWORD *)(a1 + 80) = CGDisplayListContextCreate(CGDisplayList, v127, v128, v129, v130, v131, v132, v133);
      return v3;
    default:
      _CGHandleAssert("rip_auto_context_get_alpha_info_from_bitmap_context_info", 406, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/AutomaticBitmapContext/RIPAutomaticContext.c", "0", "unhandled context model %d", v71, v54, v55, *(_DWORD *)(a1 + 228));
  }
}

void CGDisplayListDrawInContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 && *(_DWORD *)(a2 + 16) == 1129601108)
    CGDisplayListDrawInContextDelegate(a1, *(_QWORD *)(a2 + 40), *(unsigned int **)(a2 + 112), *(_QWORD *)(a2 + 96), 0);
  else
    handle_invalid_context((char)"CGDisplayListDrawInContext", a2, a3, a4, a5, a6, a7, a8);
}

uint64_t CGDisplayListCreateWithRect(CG::DisplayList *a1, double a2, double a3, double a4, double a5, uint64_t a6, const CGRect *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD v13[4];

  *(double *)v13 = a2;
  *(double *)&v13[1] = a3;
  *(double *)&v13[2] = a4;
  *(double *)&v13[3] = a5;
  return CG::DisplayList::createCGDisplayList(a1, (const __CFDictionary *)v13, a7, a8, a9, a10, a11, a12);
}

uint64_t CG::DisplayList::createCGDisplayList(CG::DisplayList *this, const __CFDictionary *a2, const CGRect *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t Instance;
  uint64_t v11;
  __int128 v12;
  _OWORD *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  if (_ZZZ22CGDisplayListGetTypeIDEUb_E4once != -1)
    dispatch_once(&_ZZZ22CGDisplayListGetTypeIDEUb_E4once, &__block_literal_global_124_14047);
  Instance = CGTypeCreateInstance(CGDisplayListGetTypeID::display_list2_type_id, 824, (uint64_t)a3, a4, a5, a6, a7, a8);
  v11 = Instance;
  if (Instance)
  {
    *(_QWORD *)(Instance + 16) = &off_1E1628F98;
    *(_QWORD *)(Instance + 24) = Instance;
    *(_QWORD *)(Instance + 32) = 0;
    v12 = *(_OWORD *)a2;
    *(_OWORD *)(Instance + 56) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(Instance + 40) = v12;
    *(_DWORD *)(Instance + 72) = 16843008;
    *(_WORD *)(Instance + 76) = 0;
    *(_BYTE *)(Instance + 78) = 0;
    *(_DWORD *)(Instance + 80) = 0;
    *(CGRect *)(Instance + 88) = CGRectNull;
    *(_OWORD *)(Instance + 120) = 0u;
    v13 = malloc_type_malloc(0x58uLL, 0xBDE48346uLL);
    *(_QWORD *)(v11 + 136) = v13;
    *v13 = 0u;
    v13[1] = 0u;
    v13[2] = 0u;
    v13[3] = 0u;
    v13[4] = 0u;
    *((_QWORD *)v13 + 10) = 0;
    *(_OWORD *)((char *)v13 + 8) = xmmword_185004FB0;
    *((_QWORD *)v13 + 4) = 0x61C8864E7A143579;
    *(_OWORD *)(v11 + 152) = 0u;
    *(_QWORD *)(v11 + 144) = v11 + 152;
    *(_OWORD *)(v11 + 176) = 0u;
    *(_QWORD *)(v11 + 168) = v11 + 176;
    *(_OWORD *)(v11 + 200) = 0u;
    *(_QWORD *)(v11 + 192) = v11 + 200;
    *(_OWORD *)(v11 + 224) = 0u;
    *(_QWORD *)(v11 + 216) = v11 + 224;
    *(_OWORD *)(v11 + 248) = 0u;
    *(_QWORD *)(v11 + 240) = v11 + 248;
    *(_OWORD *)(v11 + 272) = 0u;
    *(_QWORD *)(v11 + 264) = v11 + 272;
    *(_OWORD *)(v11 + 296) = 0u;
    *(_OWORD *)(v11 + 320) = 0u;
    *(_QWORD *)(v11 + 288) = v11 + 296;
    *(_QWORD *)(v11 + 312) = v11 + 320;
    *(_OWORD *)(v11 + 344) = 0u;
    *(_QWORD *)(v11 + 336) = v11 + 344;
    *(_OWORD *)(v11 + 368) = 0u;
    *(_QWORD *)(v11 + 360) = v11 + 368;
    *(_OWORD *)(v11 + 392) = 0u;
    *(_QWORD *)(v11 + 384) = v11 + 392;
    *(_OWORD *)(v11 + 416) = 0u;
    *(_QWORD *)(v11 + 408) = v11 + 416;
    *(_OWORD *)(v11 + 432) = 0u;
    *(_OWORD *)(v11 + 448) = 0u;
    *(_DWORD *)(v11 + 464) = 1065353216;
    *(_OWORD *)(v11 + 480) = 0u;
    *(_QWORD *)(v11 + 472) = v11 + 480;
    *(_OWORD *)(v11 + 504) = 0u;
    *(_QWORD *)(v11 + 496) = v11 + 504;
    *(_OWORD *)(v11 + 528) = 0u;
    *(_QWORD *)(v11 + 520) = v11 + 528;
    *(_OWORD *)(v11 + 552) = 0u;
    *(_QWORD *)(v11 + 544) = v11 + 552;
    *(_OWORD *)(v11 + 576) = 0u;
    *(_QWORD *)(v11 + 568) = v11 + 576;
    *(_OWORD *)(v11 + 592) = 0u;
    *(_QWORD *)(v11 + 608) = 0;
    CG::DisplayList::setAuxInfo((CG::DisplayList *)(v11 + 16), this);
    v14 = (char *)operator new(0x90uLL);
    v15 = 0uLL;
    *(_OWORD *)(v14 + 8) = 0u;
    *(_QWORD *)v14 = &off_1E1629CB8;
    *(_OWORD *)(v14 + 24) = 0u;
    *(CGRect *)(v14 + 40) = CGRectNull;
    *((_DWORD *)v14 + 18) = 0;
    *((_QWORD *)v14 + 10) = 850045863;
    *(_OWORD *)(v14 + 88) = 0u;
    *(_OWORD *)(v14 + 104) = 0u;
    *(_OWORD *)(v14 + 120) = 0u;
    *((_QWORD *)v14 + 17) = 0;
    *(_QWORD *)&v16 = v14 + 24;
    *((_QWORD *)&v16 + 1) = v14;
    v17 = *(std::__shared_weak_count **)(v11 + 128);
    *(_OWORD *)(v11 + 120) = v16;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        v15 = 0uLL;
      }
    }
    *(_DWORD *)(v11 + 616) = -1;
    *(_OWORD *)(v11 + 624) = v15;
    *(_OWORD *)(v11 + 640) = v15;
    *(_OWORD *)(v11 + 656) = v15;
    *(_OWORD *)(v11 + 672) = v15;
    *(_OWORD *)(v11 + 688) = v15;
    *(_OWORD *)(v11 + 704) = v15;
    *(_OWORD *)(v11 + 720) = v15;
    *(_OWORD *)(v11 + 736) = v15;
    *(_OWORD *)(v11 + 752) = v15;
    *(_OWORD *)(v11 + 768) = v15;
    *(_OWORD *)(v11 + 784) = v15;
    *(_OWORD *)(v11 + 800) = v15;
    *(_OWORD *)(v11 + 816) = v15;
    *(_QWORD *)(v11 + 832) = 0;
  }
  return v11;
}

void sub_1849F1774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a6);
  std::vector<std::shared_ptr<CG::DisplayListEntry const>>::__destroy_vector::operator()[abi:se180100]((void ***)va);
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(v6 + 576));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(v6 + 552));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(v6 + 528));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(v6 + 504));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(v6 + 480));
  std::__hash_table<std::shared_ptr<CG::DisplayListResourceDisplayList>,CG::HashResourceDisplayList,CG::EqualsResourceDisplayList,std::allocator<std::shared_ptr<CG::DisplayListResourceDisplayList>>>::~__hash_table(v9);
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(v6 + 416));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(v6 + 392));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(v6 + 368));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(v6 + 344));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(v6 + 320));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(v6 + 296));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(v6 + 272));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(v6 + 248));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(v6 + 224));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(v6 + 200));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(v6 + 176));
  std::__tree<std::shared_ptr<CG::DisplayListEntryStatePattern const>,CG::CompareEntryStatePattern,std::allocator<std::shared_ptr<CG::DisplayListEntryStatePattern const>>>::destroy(*(_QWORD **)(v6 + 152));
  free(*(void **)(v6 + 136));
  std::shared_ptr<CG::DisplayListResourceCFTypeRef>::~shared_ptr[abi:se180100](v8);
  applesauce::CF::ObjectRef<__CFDictionary const*>::~ObjectRef(v7);
  _Unwind_Resume(a1);
}

double CG::DisplayList::setAuxInfo(CG::DisplayList *this, const __CFDictionary *a2)
{
  CFDictionaryRef Copy;
  const void *v5;
  int v6;
  int v7;
  int v8;
  char Boolean;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  double result;
  char v17;
  const void *v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;

  if (a2)
  {
    Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
    v5 = (const void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = Copy;
    if (v5)
      CFRelease(v5);
    v19 = 0;
    v6 = CGCFDictionaryGetBoolean(a2, CFSTR("trackShape"), &v19) ^ 1;
    if (v19)
      LOBYTE(v6) = 1;
    *((_BYTE *)this + 57) = v6;
    v20 = 0;
    v7 = CGCFDictionaryGetBoolean(a2, CFSTR("trackDrawing"), &v20) ^ 1;
    if (v20)
      LOBYTE(v7) = 1;
    *((_BYTE *)this + 58) = v7;
    v21 = 0;
    v8 = CGCFDictionaryGetBoolean(a2, CFSTR("trackColors"), &v21) ^ 1;
    if (v21)
      LOBYTE(v8) = 1;
    *((_BYTE *)this + 59) = v8;
    v22 = 0;
    Boolean = CGCFDictionaryGetBoolean(a2, CFSTR("trackGlyphs"), &v22);
    if (v22)
      v10 = Boolean;
    else
      v10 = 0;
    *((_BYTE *)this + 60) = v10;
    v23 = 0;
    v11 = CGCFDictionaryGetBoolean(a2, CFSTR("decodeImages"), &v23);
    if (v23)
      v12 = v11;
    else
      v12 = 0;
    *((_BYTE *)this + 61) = v12;
    v24 = 0;
    v13 = CGCFDictionaryGetBoolean(a2, CFSTR("clipRecordingToFrame"), &v24);
    if (v24)
      v14 = v13;
    else
      v14 = 0;
    *((_BYTE *)this + 56) = v14;
    v25 = 0;
    v15 = CGCFDictionaryGetBoolean(a2, CFSTR("evaluateShadingsOnRecord"), &v25);
    if (v25)
      v17 = v15;
    else
      v17 = 0;
    *((_BYTE *)this + 62) = v17;
  }
  else
  {
    v18 = (const void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v18)
      CFRelease(v18);
    *((_WORD *)this + 30) = 0;
    *(_QWORD *)&result = 16843008;
    *((_DWORD *)this + 14) = 16843008;
    *((_BYTE *)this + 62) = 0;
  }
  return result;
}

uint64_t CGCFDictionaryGetBoolean(CFDictionaryRef theDict, const void *a2, BOOL *a3)
{
  uint64_t result;
  const __CFBoolean *v6;
  CFTypeID v7;

  result = 0;
  if (theDict)
  {
    if (a2)
    {
      result = (uint64_t)CFDictionaryGetValue(theDict, a2);
      if (result)
      {
        v6 = (const __CFBoolean *)result;
        v7 = CFGetTypeID((CFTypeRef)result);
        if (v7 == CFBooleanGetTypeID())
        {
          if (a3)
            *a3 = CFBooleanGetValue(v6) != 0;
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

_QWORD *CGBitmapContextCreateWithDataAndDictionary(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, int a8, double a9, double a10, void (*a11)(uint64_t, uint64_t), uint64_t a12, uint64_t a13)
{
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = (_QWORD *)CGBitmapContextInfoCreate(a1, 0, 0, a2, a3, a4, a5, a6, a9, a10, a7, a8, 0, a11, a12);
  if (result)
    return bitmap_context_create((uint64_t)result, a13, (char)"CGBitmapContextCreateWithDataAndDictionary", v14, v15, v16, v17, v18);
  return result;
}

uint64_t img_data_lock_depth(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  float *v10;
  int v11;
  unint64_t v12;
  double v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  signed int v18;
  int v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  uint64_t v26;
  int v27;
  int v28;
  signed int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  const char *v40;
  const char *v41;
  const char *v43;
  _QWORD *image_data_handle;
  char *v45;
  unsigned int *v46;
  float *v47;
  int v48;
  _QWORD *v49;
  unint64_t v50;
  unsigned int v51;
  float v52;
  float v53;
  uint64_t *v54;
  uint64_t *v55;
  void *v56;
  void *v57;
  unsigned int *v58;
  int v60;
  int v63;
  float *v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _DWORD v70[2];
  __int128 v71;
  __int128 v72;
  void *v73[2];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  unsigned int *v81;
  float v82;
  uint64_t v83;
  float v84;
  uint64_t v85;
  uint64_t v86;

  v8 = a1;
  v86 = *MEMORY[0x1E0C80C00];
  v81 = a5;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0uLL;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 == a2)
  {
    v10 = 0;
    v11 = *(_DWORD *)(a1 + 32);
    v12 = *(int *)(a1 + 40);
    v13 = 1.0;
    v14 = *(_DWORD *)(a1 + 40);
  }
  else
  {
    v13 = (double)a2 / (double)v9;
    v15 = *(int *)(a1 + 40);
    if (v9 == v15)
    {
      v11 = 0;
      v12 = (int)a2;
      v14 = a2;
    }
    else
    {
      v16 = *(_DWORD *)(a1 + 32);
      v17 = vcvtmd_s64_f64((double)v16 * v13 + 0.00390625);
      v11 = v17 & ~(v17 >> 31);
      v18 = vcvtpd_s64_f64((double)(v16 + (int)v15) * v13 + -0.00390625);
      if (v18 > (uint64_t)a2)
        v18 = a2;
      v19 = v18 - v11;
      if (v18 <= v11)
        goto LABEL_65;
      v12 = v19;
      v13 = (double)v19 / (double)(int)v15;
      v14 = v19;
    }
    v10 = &v82;
    *((_QWORD *)&v67 + 1) = &v82;
  }
  v20 = *(_QWORD *)(a1 + 24);
  if (v20 == a3)
  {
    v21 = *(_DWORD *)(a1 + 36);
    v22 = *(_DWORD *)(a1 + 44);
    v23 = v22;
    v24 = a4 + v22;
    v25 = 1.0;
  }
  else
  {
    v25 = (double)a3 / (double)v20;
    v26 = *(unsigned int *)(a1 + 44);
    if (v20 == v26)
    {
      v21 = 0;
      v24 = a4 + (int)a3;
      v22 = a3;
    }
    else
    {
      v27 = *(_DWORD *)(a1 + 36);
      v28 = vcvtmd_s64_f64((double)v27 * v25 + 0.00390625);
      v21 = v28 & ~(v28 >> 31);
      v29 = vcvtpd_s64_f64((double)(v27 + (int)v26) * v25 + -0.00390625);
      if (v29 > (uint64_t)a3)
        v29 = a3;
      v22 = v29 - v21;
      if (v29 <= v21)
        goto LABEL_65;
      v24 = v22;
      v30 = vcvtpd_s64_f64((double)(unint64_t)((int)v26 + a4) * v25 + -0.00390625);
      if (a4)
        v24 = v30;
      v25 = (double)v22 / (double)(int)v26;
    }
    v10 = &v82;
    *((_QWORD *)&v67 + 1) = &v82;
    v23 = v22;
  }
  v71 = 0u;
  v72 = 0u;
  v80 = 0;
  v79 = 0u;
  v78 = 0u;
  v77 = 0u;
  v76 = 0u;
  v75 = 0u;
  v74 = 0u;
  *(_OWORD *)v73 = 0u;
  if (v12 >= a2)
    v31 = a2;
  else
    v31 = v12;
  if (v24 >= a3)
    v32 = a3;
  else
    v32 = v24;
  v70[1] = v31;
  LODWORD(v71) = v32;
  v33 = *a5;
  v34 = (((v31 * (v33 >> 22)) >> 3) + 31) & 0x3FFFFFFFFFFFFFE0;
  DWORD1(v72) = (((v31 * (v33 >> 22)) >> 3) + 31) & 0xFFFFFFE0;
  v63 = v11;
  v60 = v21;
  v64 = v10;
  v65 = v22;
  if (!*(_QWORD *)(a1 + 64) && v31 == v14 && v32 == v23)
  {
    v35 = a6;
    v36 = 0;
    v37 = 0;
  }
  else
  {
    v35 = a6;
    v38 = v33 & 0xC;
    v39 = (((v31 * (((BYTE2(v33) & 0x3F) + 7) & 0x78)) >> 3) + 3) & 0x3FFFFFFFFFFFFFFCLL;
    if (v38 == 8)
      v36 = v34;
    else
      v36 = v39;
    if (v38 == 8)
      v37 = 0;
    else
      v37 = v39;
    DWORD2(v72) = v36;
  }
  if (v20 == a3)
    v40 = 0;
  else
    v40 = "CGSImageData HeightMismatch";
  if (v9 == a2)
    v41 = v40;
  else
    v41 = "CGSImageData WidthMismatch";
  if (*(unsigned int **)(a1 + 8) == a5)
    v43 = v41;
  else
    v43 = "CGSImageData DepthMismatch";
  image_data_handle = create_image_data_handle(v37 + v34, v32, 31, a7, (uint64_t)v43, a6, a7, a8);
  if (!image_data_handle)
  {
LABEL_65:
    CGSImageDataUnlock((uint64_t *)v8);
    return 0;
  }
  v45 = (char *)image_data_handle[2];
  v73[0] = v45;
  if (v36)
  {
    v46 = a5;
    v47 = v64;
    if (v37)
      v45 += v34 * v32;
    v48 = v65;
  }
  else
  {
    v45 = 0;
    v46 = a5;
    v47 = v64;
    v48 = v65;
  }
  v49 = image_data_handle;
  v50 = *(_QWORD *)(v8 + 40);
  *(_QWORD *)((char *)&v75 + 4) = *(_QWORD *)(v8 + 48);
  v76 = *(_OWORD *)(v8 + 56);
  v73[1] = v45;
  v70[0] = 257;
  HIDWORD(v71) = v14;
  LODWORD(v72) = v48;
  *((_QWORD *)&v74 + 1) = __PAIR64__(v48, v14);
  if (v35 == 1)
    v51 = 65280;
  else
    v51 = 0xFFFF;
  LODWORD(v66) = **(_DWORD **)(v8 + 8);
  *(_QWORD *)((char *)&v66 + 4) = v51 | 0x3F80000000000000;
  v68 = v50;
  *(_QWORD *)&v69 = *(_QWORD *)(v8 + 80);
  *((_QWORD *)&v69 + 1) = v8;
  if (v47)
  {
    v85 = 0;
    v83 = 0;
    v52 = v13;
    v53 = v25;
    v82 = v52;
    v84 = v53;
  }
  if (!(*((unsigned int (**)(unsigned int **, _DWORD *, __int128 *))v46 + 5))(&v81, v70, &v66))
  {
    free(v73[0]);
    goto LABEL_65;
  }
  CGSImageDataHandleRelease(*(_QWORD *)(v8 + 72));
  *(_QWORD *)(v8 + 72) = 0;
  v54 = *(uint64_t **)(v8 + 112);
  if (v54)
    CGAccessSessionRelease(v54);
  *(_QWORD *)(v8 + 112) = 0;
  v55 = *(uint64_t **)(v8 + 120);
  if (v55)
  {
    CGImageBlockSetRelease(*v55);
    free(v55);
  }
  *(_QWORD *)(v8 + 120) = 0;
  v57 = v73[0];
  v56 = v73[1];
  v58 = v81;
  *(_QWORD *)v8 = *(_QWORD *)(*((_QWORD *)v81 + 1) + 8 * (v73[1] != 0));
  *(_QWORD *)(v8 + 8) = v58;
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  *(_DWORD *)(v8 + 40) = v31;
  *(_DWORD *)(v8 + 44) = v32;
  *(_DWORD *)(v8 + 32) = v63;
  *(_DWORD *)(v8 + 36) = v60 - v32 + v48;
  *(_QWORD *)(v8 + 56) = v57;
  *(_QWORD *)(v8 + 64) = v56;
  *(_QWORD *)(v8 + 48) = *(_QWORD *)((char *)&v72 + 4);
  *(_QWORD *)(v8 + 72) = v49;
  *(_QWORD *)(v8 + 80) = 0;
  return v8;
}

uint64_t A8_image(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  int *v6;
  _BOOL4 v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  void (*v40)(uint64_t, _DWORD *);
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int *v46;
  int v47;
  void *v48;
  void *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int *v54;
  int v55;
  void *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t, uint64_t, int);
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  int v71;
  int v72;
  uint64_t i;
  _OWORD v74[64];
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v6 = (int *)*a1;
  memset(v74, 0, 512);
  if (*((_QWORD *)a2 + 12))
    v7 = 0;
  else
    v7 = *(float *)(a3 + 8) >= 1.0;
  v8 = *(_DWORD *)(*((_QWORD *)v6 + 7) + 16 * *a2 + 8 * v7 + 4 * (*((_QWORD *)a2 + 6) == 0));
  if (v8 > 28)
    return 0xFFFFFFFFLL;
  if (*((int *)a2 + 1) >= 1 && *((int *)a2 + 2) >= 1)
  {
    if ((int)_blt_image_initialize((uint64_t)a2, a3, (uint64_t)&v61, (uint64_t)v74) >= 1)
    {
      v18 = *v6;
      v19 = *(_DWORD *)a3;
      v62 = v19;
      v63 = v18;
      if (v19 == 34082816)
      {
        if (!v68 && (~v64 & 0xC3) == 0)
        {
          v17.n128_u32[0] = *(_DWORD *)(a3 + 8);
          if (v17.n128_f32[0] >= 1.0 && !*(_QWORD *)(a3 + 24))
          {
            if ((v64 & 4) != 0)
            {
              v17.n128_u64[0] = *(_QWORD *)(a3 + 32);
              *((_QWORD *)a2 + 8) = v17.n128_u64[0];
            }
            A8_mark_inner(*(_QWORD *)(*a1 + 56), v17);
            return 1;
          }
        }
        v61 = A8_sample_A8_inner;
      }
      else
      {
        v22 = SAMPLEINDEX(v19, v10, v11, v12, v13, v14, v15, v16);
        if (!(_DWORD)v22)
          return 0xFFFFFFFFLL;
        if (v22 > 0xB)
        {
LABEL_25:
          v25 = 255;
          LOBYTE(v24) = 1;
        }
        else
        {
          LOBYTE(v24) = 0;
          v25 = 0;
          switch((int)v22)
          {
            case 2:
              v24 = *((_QWORD *)a2 + 12);
              if (v24)
                goto LABEL_25;
              v25 = 16;
              break;
            case 5:
              LOBYTE(v24) = 0;
              v25 = 24;
              break;
            case 6:
              break;
            case 7:
              LOBYTE(v24) = 0;
              v25 = 32;
              break;
            case 8:
              LOBYTE(v24) = 0;
              v25 = 8;
              break;
            case 9:
              LOBYTE(v24) = 0;
              v25 = 40;
              break;
            default:
              goto LABEL_25;
          }
        }
        v61 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int))A8_image_sample[v22 + 1];
        if (!v61)
          return 0xFFFFFFFFLL;
        v62 = 34082816;
        if ((v24 & 1) == 0
          && (v64 & 7) == 3
          && (v8 - 1) <= 1
          && (a2[2] == 5 || !a2[2])
          && v22 <= 0xB)
        {
          HIDWORD(v26) = v25;
          LODWORD(v26) = v25;
          switch((v26 >> 3))
          {
            case 0u:
              if (v8 != 1
                || (v64 & 0x70) != 0x70
                || v68
                || (v27 = *((_QWORD *)a2 + 12)) != 0 && *(float *)(a3 + 8) != 1.0)
              {
                v62 = *(_DWORD *)a3;
                v40 = (void (*)(uint64_t, _DWORD *))A8_image_mark_RGB32;
                goto LABEL_80;
              }
              v28 = v65 >> SBYTE2(v64);
              v29 = v66 >> SHIBYTE(v64);
              v30 = v67 >> SHIBYTE(v64);
              if (v27)
                v31 = 0;
              else
                v31 = 16843009 * (int)(float)((float)(int)(float)(*(float *)(a3 + 8) * 255.0) + 0.5);
              v44 = *((_DWORD *)a2 + 1);
              v45 = *((_DWORD *)a2 + 2);
              v72 = v44;
              v71 = v45;
              v46 = (int *)*((_QWORD *)a2 + 17);
              if (v46)
              {
                v47 = *((_DWORD *)a2 + 27);
                HIDWORD(i) = *((_DWORD *)a2 + 26);
                LODWORD(i) = v47;
                shape_enum_clip_alloc(v22, v23, v46, 1, 1, 1, SHIDWORD(i), v47, v44, v45);
                v49 = v48;
                if (v48)
                  goto LABEL_94;
              }
              v50 = 0;
              v51 = 0;
              v49 = 0;
              i = 0;
              while (2)
              {
                v59 = *((int *)a2 + 7);
                if (*((_QWORD *)a2 + 12))
                  CGSConvertRGBA8888toMask((_BYTE *)(*((_QWORD *)a2 + 11)+ *((int *)a2 + 19) * (uint64_t)((int)v29 + v51 * (int)v30)+ 4 * (v50 + (int)v28)), *((_DWORD *)a2 + 19) * v30, (_BYTE *)(*((_QWORD *)a2 + 5)+ (*((int *)a2 + 4) + (uint64_t)v51) * v59+ *((int *)a2 + 3)+ (uint64_t)v50), *((_DWORD *)a2 + 7), v72, v71);
                else
                  CGBlt_fillBytes(v72, v71, v31, (char *)(*((_QWORD *)a2 + 5)+ (*((int *)a2 + 4) + (uint64_t)v51) * v59+ *((int *)a2 + 3)+ (uint64_t)v50), *((_DWORD *)a2 + 7));
                if (!v49)
                  return 1;
LABEL_94:
                if (shape_enum_clip_next((uint64_t)v49, (int *)&i + 1, &i, &v72, &v71))
                {
                  v51 = i;
                  v50 = HIDWORD(i);
                  continue;
                }
                break;
              }
              goto LABEL_102;
            case 1u:
              if (v8 == 1 && (v64 & 0x70) == 0x70 && !v68)
              {
                v35 = *((_QWORD *)a2 + 12);
                if (!v35 || *(float *)(a3 + 8) == 1.0)
                {
                  v36 = v65 >> SBYTE2(v64);
                  v37 = v66 >> SHIBYTE(v64);
                  v38 = v67 >> SHIBYTE(v64);
                  if (v35)
                    v39 = 0;
                  else
                    v39 = 16843009 * (int)(float)((float)(int)(float)(*(float *)(a3 + 8) * 255.0) + 0.5);
                  v52 = *((_DWORD *)a2 + 1);
                  v53 = *((_DWORD *)a2 + 2);
                  v72 = v52;
                  v71 = v53;
                  v54 = (int *)*((_QWORD *)a2 + 17);
                  if (v54)
                  {
                    v55 = *((_DWORD *)a2 + 27);
                    HIDWORD(i) = *((_DWORD *)a2 + 26);
                    LODWORD(i) = v55;
                    shape_enum_clip_alloc(v22, v23, v54, 1, 1, 1, SHIDWORD(i), v55, v52, v53);
                    v49 = v56;
                    if (v56)
                      goto LABEL_100;
                  }
                  v57 = 0;
                  v58 = 0;
                  v49 = 0;
                  for (i = 0; ; v57 = HIDWORD(i))
                  {
                    v60 = *((int *)a2 + 7);
                    if (*((_QWORD *)a2 + 12))
                      CGSConvertARGB8888toMask((char *)(*((_QWORD *)a2 + 11)+ *((int *)a2 + 19) * (uint64_t)((int)v37 + v58 * (int)v38)+ 4 * (v57 + (int)v36)), *((_DWORD *)a2 + 19) * v38, (_BYTE *)(*((_QWORD *)a2 + 5)+ (*((int *)a2 + 4) + (uint64_t)v58) * v60+ *((int *)a2 + 3)+ (uint64_t)v57), *((_DWORD *)a2 + 7), v72, v71);
                    else
                      CGBlt_fillBytes(v72, v71, v39, (char *)(*((_QWORD *)a2 + 5)+ (*((int *)a2 + 4) + (uint64_t)v58) * v60+ *((int *)a2 + 3)+ (uint64_t)v57), *((_DWORD *)a2 + 7));
                    if (!v49)
                      return 1;
LABEL_100:
                    if (!shape_enum_clip_next((uint64_t)v49, (int *)&i + 1, &i, &v72, &v71))
                    {
LABEL_102:
                      free(v49);
                      return 1;
                    }
                    v58 = i;
                  }
                }
              }
              v62 = *(_DWORD *)a3;
              v40 = (void (*)(uint64_t, _DWORD *))A8_image_mark_RGB32;
LABEL_78:
              v41 = (uint64_t)a2;
              v42 = v8;
              v43 = 8;
LABEL_81:
              A8_image_mark_image(v41, (uint64_t)&v61, v42, v43, v40);
              break;
            case 2u:
              if (v8 == 1 && (v64 & 0x70) == 0x70 && !v68)
                goto LABEL_73;
              v62 = *(_DWORD *)a3;
              v40 = (void (*)(uint64_t, _DWORD *))A8_image_mark_W8;
              goto LABEL_80;
            case 3u:
              if (v8 == 1 && (v64 & 0x70) == 0x70 && !v68)
              {
LABEL_73:
                A8_mark_image_OPAQUE((uint64_t)a2, v23, *(float *)(a3 + 8));
                return 1;
              }
              v62 = *(_DWORD *)a3;
              v40 = (void (*)(uint64_t, _DWORD *))A8_image_mark_RGB24;
LABEL_80:
              v41 = (uint64_t)a2;
              v42 = v8;
              v43 = 0;
              goto LABEL_81;
            case 4u:
              v62 = *(_DWORD *)a3;
              v40 = (void (*)(uint64_t, _DWORD *))A8_image_mark_rgb32;
              goto LABEL_80;
            case 5u:
              v62 = *(_DWORD *)a3;
              v40 = (void (*)(uint64_t, _DWORD *))A8_image_mark_rgb32;
              goto LABEL_78;
            default:
              goto LABEL_15;
          }
          return 1;
        }
      }
LABEL_15:
      if ((*(_DWORD *)a3 & 0xC) != 8)
      {
LABEL_49:
        A8_image_mark((uint64_t)a2, (uint64_t)&v61, v8, v17);
        return 1;
      }
      v20 = (*(_DWORD *)a3 >> 22) / (HIWORD(*(_DWORD *)a3) & 0x3Fu);
      if (v20 == 2)
      {
        v21 = 1;
        goto LABEL_42;
      }
      if (v20 == 4)
      {
        v21 = 2;
LABEL_42:
        if ((*(_DWORD *)a3 & 0x30) == 0x10)
          v32 = 64;
        else
          v32 = 128;
        v33 = v20 - 1;
        if ((*(_DWORD *)a3 & 0xC0) == v32)
          v34 = v33;
        else
          v34 = 0;
        v69 = v21;
        v70 = v34;
        goto LABEL_49;
      }
    }
    return 0xFFFFFFFFLL;
  }
  return 0;
}

uint64_t (**RIPLayerBltGlyph(_DWORD *a1, uint64_t a2, _DWORD *a3, _DWORD *a4, uint64_t a5, _DWORD *a6, uint64_t a7, uint64_t a8))()
{
  _DWORD *v12;
  uint64_t v14;
  uint64_t v16;
  int v17;
  signed int v18;
  int *v19;
  int *v20;
  _BOOL4 IsEnclosed;
  unint64_t v22;
  int v23;
  char v25;
  uint64_t (**result)();
  _DWORD *v27;
  __int128 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)();
  __n128 v36;
  uint64_t (**v37)();
  uint64_t v38;
  char *v39;
  int v40;
  uint64_t v41;
  float v42;
  uint64_t (**v43)();
  uint64_t v44;
  float v45;
  uint64_t v46;
  int v47;
  uint64_t (*v48)();
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  _DWORD *v60;
  char *v61;
  unint64_t v62;
  int v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  float v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  BOOL v76;
  int *v77;
  __int128 *v78;
  uint64_t v79;
  _DWORD *v80;
  int v81;
  int *v82;
  unsigned int v83;
  int v84;
  uint64_t v85;
  BOOL v86;
  int v88;
  unsigned int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  void *v101;
  int v102;
  int *v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  int v121;
  int v122;
  void *v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  char *v135;
  int v136;
  uint64_t v137;
  int v138;
  int v139;
  void *v140;
  unsigned int v141;
  int v142;
  int v143;
  int v144;
  unsigned int v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  unsigned int v149;
  unsigned int v150;
  int v151;
  int v152;
  char *v153;
  int v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  int v158;
  int v159;
  int v160;
  int v161;
  unsigned int v162;
  unsigned int v163;
  char *v164;
  int v165;
  uint64_t v166;
  int v167;
  int v168;
  uint64_t (*v169)();
  void *v170;
  _DWORD *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int *v176;
  uint64_t v177;
  _DWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  int v183;
  int v184;
  int v185;
  unint64_t v186;
  unsigned int v187;
  int v188;
  _DWORD *v189;
  _DWORD *v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  uint64_t (**v196)();
  int *v197;
  int v198;
  uint64_t v199;
  uint64_t (*v200)();
  void *v201;
  uint64_t (*v202)();
  __int128 v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  __int128 v207;
  void *__b[2];
  void *v209[2];
  _OWORD v210[2];
  int v211[2];
  uint64_t v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  uint64_t v231;
  uint64_t v232;

  v12 = a4;
  v14 = a2;
  v232 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v20 = 0;
    goto LABEL_27;
  }
  if (!*(_DWORD *)(a2 + 64))
  {
    if (*(_QWORD *)(a2 + 56))
    {
      v20 = 0;
      goto LABEL_16;
    }
    IsEnclosed = ripl_IsEnclosed(a4, (_DWORD *)(a2 + 12));
    goto LABEL_14;
  }
  v16 = *(_QWORD *)(a2 + 72);
  if (!v16)
  {
    IsEnclosed = ripl_IsContained(a4, (_DWORD *)(a2 + 12));
LABEL_14:
    v20 = 0;
    if (IsEnclosed)
      v14 = 0;
    goto LABEL_16;
  }
  v17 = a4[3];
  v18 = *(_DWORD *)(a2 + 24) + *(_DWORD *)(a2 + 16) - (a4[1] + v17);
  v19 = shape_enclose_with_bounds(v16, *a4 - *(_DWORD *)(a2 + 12), v18, a4[2] + *a4 - *(_DWORD *)(a2 + 12), v18 + v17);
  v20 = v19;
  if (v19)
  {
    if (v19 == (int *)&the_empty_shape)
      return 0;
    if (v19[v19[1]] == 0x7FFFFFFF)
      goto LABEL_25;
  }
  else
  {
    v14 = 0;
  }
LABEL_16:
  v22 = (int)v12[9] * (uint64_t)(int)v12[8];
  v76 = v22 >> 31 == 0;
  v23 = v22 + 15;
  v25 = v76 && v23 >= 0;
  if (v14 && (v25 & 1) == 0)
  {
    if (v20)
LABEL_25:
      free(v20);
    return 0;
  }
LABEL_27:
  v231 = 0;
  v229 = 0u;
  v230 = 0u;
  v227 = 0u;
  v228 = 0u;
  v225 = 0u;
  v226 = 0u;
  v223 = 0u;
  v224 = 0u;
  v221 = 0u;
  v222 = 0u;
  v219 = 0u;
  v220 = 0u;
  v217 = 0u;
  v218 = 0u;
  v215 = 0u;
  v216 = 0u;
  v213 = 0u;
  v214 = 0u;
  if (a3)
    v27 = a3;
  else
    v27 = v12;
  v28 = (__int128 *)*((_QWORD *)a1 + 5);
  if (!v28)
  {
    v225 = 0uLL;
    v226 = 0uLL;
    v223 = 0uLL;
    v224 = 0uLL;
    v221 = 0uLL;
    v222 = 0uLL;
    v219 = 0uLL;
    v220 = 0uLL;
    v217 = 0uLL;
    v218 = 0uLL;
    v215 = 0uLL;
    v216 = 0uLL;
    v213 = 0uLL;
    v214 = 0uLL;
    v28 = &v213;
    *(_QWORD *)&v227 = 0;
  }
  *(_OWORD *)v209 = 0uLL;
  memset(v210, 0, 24);
  v207 = 0uLL;
  *(_OWORD *)__b = 0uLL;
  result = (uint64_t (**)())(*(uint64_t (**)(_DWORD *, uint64_t, _DWORD *))(*(_QWORD *)a1 + 32))(a1, 32, v27);
  if (result)
  {
    v204 = 0;
    v205 = 0;
    v206 = 0;
    v35 = *result;
    if (*result)
    {
      v200 = *result;
      v35 = (uint64_t (*)())*((_QWORD *)v35 + 4);
      if (v35)
      {
        v196 = result;
        if (!*((_QWORD *)a1 + 7) && !ripl_CreateMask((uint64_t)a1, 1, v29, v30, v31, v32, v33, v34))
          goto LABEL_71;
        *((double *)v28 + 18) = *(float *)(a8 + 64);
        *(_BYTE *)v28 = *(_DWORD *)a8;
        v36.n128_f64[0] = ripl_BltOpDestination((uint64_t)v28, (uint64_t)v27, (uint64_t)a1);
        if (!a5)
        {
          v38 = 0;
          v35 = (uint64_t (*)())*((_QWORD *)v200 + 3);
          if (!v35)
          {
            v35 = 0;
            v39 = 0;
            goto LABEL_62;
          }
          v189 = v27;
          v179 = v14;
          v40 = 0;
          v41 = 0;
          v42 = *(double *)(a8 + 48);
          v173 = 0;
          goto LABEL_46;
        }
        v37 = *(uint64_t (***)())a5;
        if (*(_UNKNOWN **)a5 != &ripc_class)
        {
          if (v37)
          {
            while (v37 != RIPLayer_ripl_class)
            {
              v35 = *v37;
              if (!*v37)
                goto LABEL_60;
              v37 = (uint64_t (**)())((uint64_t (*)(__n128))v35)(v36);
              v38 = 0;
              v35 = 0;
              v39 = 0;
              if (!v37)
                goto LABEL_62;
            }
            v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)a5 + 32))(a5, 16, a5 + 12, v36);
            v38 = v52;
            if (v52 && *(_QWORD *)(*(_QWORD *)v52 + 8) == *((_QWORD *)v200 + 1))
            {
              v174 = v52;
              if (*(_QWORD *)(a5 + 56) || ripl_CreateMask(a5, 0, v53, v54, v52, v55, v56, v57))
              {
                v58 = ripl_BltOpSourceLayer((uint64_t)v28, v27, a1, a6, a5);
                v172 = 0;
                v192 = -1;
                v59 = v174;
                if (!a7)
                  goto LABEL_102;
LABEL_90:
                if (*(_UNKNOWN **)a7 != &ripc_class)
                {
LABEL_102:
                  v175 = v59;
                  *((_BYTE *)v28 + 2) = 1;
                  v71 = v27[1];
                  v72 = v27[3];
                  v194 = *((_DWORD *)v28 + 3);
                  v195 = *v27;
                  v193 = *((_DWORD *)v28 + 4);
                  v183 = *((_DWORD *)v28 + 15);
                  v184 = *((_DWORD *)v28 + 14);
                  LODWORD(v210[0]) = a1[7] & 0x100;
                  v209[1] = 0;
                  *(_QWORD *)((char *)v210 + 12) = 4;
                  *(_QWORD *)((char *)v210 + 4) = *((_QWORD *)v12 + 4);
                  v73 = *((_QWORD *)v12 + 2);
                  if (v73)
                  {
                    v171 = a1;
                    v74 = 0;
                    v202 = 0;
                    v191 = v72 + v71;
                    v197 = (int *)(v14 + 12);
                    v182 = v58 << 8;
                    v176 = v20;
                    v177 = a5;
                    v178 = v12;
                    v180 = v14;
                    v181 = *((_QWORD *)v12 + 2);
                    v190 = v27;
                    while (1)
                    {
                      v203 = 0uLL;
                      v75 = v209[1];
                      if (v209[1])
                        v76 = DWORD1(v210[0]) == 0;
                      else
                        v76 = 0;
                      if (v76)
                      {
                        free(v209[1]);
                        v75 = 0;
                        v209[1] = 0;
                      }
                      v77 = &v12[10 * v74];
                      v78 = (__int128 *)(v77 + 10);
                      if (!v14)
                      {
                        v93 = 0;
                        v94 = 0;
                        v96 = v77[12];
                        v95 = v77[13];
                        v97 = *(_DWORD *)v78;
                        v98 = *((_DWORD *)v78 + 1) + v95;
                        v99 = *((_DWORD *)v78 + 2);
                        v100 = *((_DWORD *)v78 + 3);
                        goto LABEL_212;
                      }
                      if (CGSBoundsIntersection(v197, v77 + 10, &v203))
                        break;
LABEL_217:
                      if (++v74 == v73)
                      {
                        v170 = v209[1];
                        a1 = v171;
                        goto LABEL_221;
                      }
                    }
                    v80 = &v12[10 * v74];
                    v83 = v80[15];
                    v82 = v80 + 15;
                    v81 = v83;
                    v84 = HIDWORD(v210[0]);
                    v85 = (HIDWORD(v210[0]) - 1);
                    v86 = v83 >= 8;
                    if (v83 != 8 && (!v86 || LODWORD(v210[0]) == 0))
                    {
                      v207 = *v78;
                      v88 = *((_DWORD *)v78 + 2);
                      v89 = (v88 + v85) & -HIDWORD(v210[0]);
                      __b[0] = (void *)(v89 | 0x800000000);
                      LODWORD(v209[0]) = v12[10 * v74 + 18];
                      __b[1] = v75;
                      v187 = HIDWORD(v210[0]) - 1;
                      if (v75 && (v90 = *((_DWORD *)v78 + 3), v90 * v89 <= LODWORD(v210[1])))
                      {
                        v91 = HIDWORD(v210[0]);
                      }
                      else
                      {
                        v91 = HIDWORD(v210[0]);
                        if (DWORD1(v210[0]))
                          v92 = DWORD2(v210[0]) * ((DWORD1(v210[0]) + v85) & -HIDWORD(v210[0]));
                        else
                          v92 = *((_DWORD *)v78 + 3) * v89;
                        LODWORD(v210[1]) = v92;
                        free(v75);
                        v101 = malloc_type_malloc((LODWORD(v210[1]) + v91), 0x56B6C8EBuLL);
                        v209[1] = v101;
                        __b[1] = v101;
                        if (!v101)
                        {
                          v27 = v190;
                          a5 = v177;
                          goto LABEL_217;
                        }
                        v75 = v101;
                        v89 = __b[0];
                        v88 = *((_DWORD *)v78 + 2);
                        v90 = *((_DWORD *)v78 + 3);
                        v81 = *v82;
                      }
                      CGSConvertBitsToMask(*(uint16x4_t **)&v12[10 * v74 + 16], v12[10 * v74 + 14], v75, v89, v88, v90, v81);
                      v78 = &v207;
                      v84 = v91;
                      a5 = v177;
                      v85 = v187;
                    }
                    v102 = *(_DWORD *)(v14 + 64);
                    if (v102)
                    {
                      v103 = v20;
                      if (v20 || (v103 = *(int **)(v14 + 72)) != 0)
                      {
                        v185 = v84;
                        v188 = v85;
                        *(_QWORD *)v211 = 0;
                        v212 = 0;
                        shape_enum_clip_alloc(v85, v79, v103, 1, 1, 0, v203 - *(_DWORD *)(v14 + 12), *(_DWORD *)(v14 + 24) + *(_DWORD *)(v14 + 16) - (DWORD1(v203) + HIDWORD(v203)), SDWORD2(v203), SHIDWORD(v203));
                        if (v104)
                        {
                          v105 = *((_DWORD *)v78 + 1);
                          v106 = *(int *)v78;
                          v107 = *((_DWORD *)v78 + 3);
                          v108 = DWORD1(v203);
                          v109 = (int)v203;
                          v110 = HIDWORD(v203);
                          v201 = (void *)v104;
                          v111 = shape_enum_clip_next(v104, (int *)&v212 + 1, &v212, &v211[1], v211);
                          if (v111)
                          {
                            v112 = v111;
                            if (*(_QWORD *)v211 == __PAIR64__(DWORD2(v203), HIDWORD(v203)))
                            {
                              free(v201);
                              v20 = v176;
                              a5 = v177;
                              v12 = v178;
                              v14 = v180;
                              if ((v112 & 0x80000000) == 0)
                                goto LABEL_142;
                              goto LABEL_198;
                            }
                            v199 = v109 - v106;
                            v198 = v107 + v105 - (v108 + v110);
                            if (v78 == &v207)
                            {
                              LODWORD(v209[0]) = 0;
                              v20 = v176;
                              a5 = v177;
                              v12 = v178;
                              v14 = v180;
                              v27 = v190;
                              v140 = v201;
                              do
                              {
                                if (v112 <= 0)
                                  CGBlt_fillBytes(v211[1], v211[0], 0, (char *)__b[1]+ SHIDWORD(v212)+ v199+ ((v212 + v198) * LODWORD(__b[0])), (int)__b[0]);
                                v112 = shape_enum_clip_next((uint64_t)v201, (int *)&v212 + 1, &v212, &v211[1], v211);
                              }
                              while (v112);
                              v78 = &v207;
                              goto LABEL_201;
                            }
                            v125 = *((_DWORD *)v78 + 5);
                            v126 = v125 >> 3;
                            v127 = (((v125 >> 1) & 0x1FFFFFFF) + v188) & -v185;
                            v207 = v203;
                            v128 = (v127 - 1 + (v125 >> 3) * DWORD2(v203)) & -v127;
                            __b[0] = (void *)__PAIR64__(v125, v128);
                            LODWORD(v209[0]) = 0;
                            __b[1] = v209[1];
                            if (v209[1] && (HIDWORD(v203) * v128) <= LODWORD(v210[1])
                              || (!DWORD1(v210[0])
                                ? (v129 = HIDWORD(v203) * v128)
                                : (v129 = DWORD2(v210[0]) * ((v127 - 1 + DWORD1(v210[0]) * v126) & -v127)),
                                  LODWORD(v210[1]) = v129,
                                  free(v209[1]),
                                  v209[1] = malloc_type_malloc((LODWORD(v210[1]) + v127), 0x10EC260FuLL),
                                  (__b[1] = v209[1]) != 0))
                            {
                              v186 = 0;
                              v159 = 0;
                              v160 = 0;
                              v161 = 0;
                              do
                              {
                                v162 = v212;
                                v163 = HIDWORD(v212);
                                v164 = (char *)__b[1] + (LODWORD(__b[0]) * v212) + HIDWORD(v212) * v126;
                                if (v112 < 1)
                                {
                                  CGBlt_fillBytes(v211[1] * v126, v211[0], 0, v164, (int)__b[0]);
                                }
                                else
                                {
                                  v159 = v211[1];
                                  v160 = v211[0];
                                  CGBlt_copyBytes(v211[1] * v126, v211[0], (char *)(*((_QWORD *)v78 + 3)+ (*((_DWORD *)v78 + 4) * (v212 + v198))+ (HIDWORD(v212) + (_DWORD)v199) * v126), v164, *((_DWORD *)v78 + 4), (int)__b[0]);
                                  ++v161;
                                  v186 = __PAIR64__(v163, v162);
                                }
                                v112 = shape_enum_clip_next((uint64_t)v201, (int *)&v212 + 1, &v212, &v211[1], v211);
                              }
                              while (v112);
                              a5 = v177;
                              v140 = v201;
                              if (v161 == 1)
                              {
                                LODWORD(v203) = v203 + HIDWORD(v186);
                                DWORD1(v203) = DWORD1(v203) - (v160 + v186) + HIDWORD(v203);
                                *((_QWORD *)&v203 + 1) = __PAIR64__(v160, v159);
                              }
                              else
                              {
                                v78 = &v207;
                              }
                              v20 = v176;
                              v12 = v178;
                              v14 = v180;
                              v27 = v190;
LABEL_201:
                              v73 = v181;
                              free(v140);
                              goto LABEL_211;
                            }
                          }
                          free(v201);
                          a5 = v177;
LABEL_196:
                          v20 = v176;
LABEL_197:
                          v12 = v178;
                          v14 = v180;
                        }
LABEL_198:
                        v27 = v190;
                        v73 = v181;
                        goto LABEL_217;
                      }
                      v131 = *(_DWORD *)(v14 + 12);
                      v130 = *(_DWORD *)(v14 + 16);
                      if ((int)v203 <= v131)
                      {
                        v132 = DWORD2(v203);
                        v133 = *(_DWORD *)(v14 + 20);
                      }
                      else
                      {
                        v132 = DWORD2(v203);
                        v133 = *(_DWORD *)(v14 + 20);
                        if (SDWORD1(v203) > v130)
                        {
                          v73 = v181;
                          if (DWORD2(v203) + (int)v203 < v133 + v131
                            && HIDWORD(v203) + DWORD1(v203) < *(_DWORD *)(v14 + 24) + v130)
                          {
                            goto LABEL_210;
                          }
                          goto LABEL_162;
                        }
                      }
                      v73 = v181;
LABEL_162:
                      v141 = v102 & 0xFF000000;
                      if ((_DWORD)v203 != v131)
                        v141 = 0;
                      v142 = *(_DWORD *)(v14 + 64);
                      if (DWORD1(v203) != v130)
                        v142 = 0;
                      if (v132 + (_DWORD)v203 == v133 + v131)
                        v143 = *(_DWORD *)(v14 + 64) & 0xFF00;
                      else
                        v143 = 0;
                      v144 = v102 & 0xFF0000;
                      if (HIDWORD(v203) + DWORD1(v203) != *(_DWORD *)(v14 + 24) + v130)
                        v144 = 0;
                      v145 = v142 | v141 | v143 | v144;
                      v146 = (int)v203 - (uint64_t)*(int *)v78;
                      v147 = *((_DWORD *)v78 + 1) - (HIDWORD(v203) + DWORD1(v203)) + *((_DWORD *)v78 + 3);
                      if (v78 == &v207)
                      {
                        v207 = v203;
                        LODWORD(v209[0]) = 0;
                        v158 = CGSCombineMask((char *)__b[1] + v146 + (LODWORD(__b[0]) * v147), (int)__b[0], (char *)__b[1], (int)__b[0], v132, SHIDWORD(v203), v145);
                        v12 = v178;
                        goto LABEL_208;
                      }
                      v148 = a5;
                      v149 = *((_DWORD *)v78 + 5);
                      v150 = v149 >> 3;
                      v151 = (((v149 >> 1) & 0x1FFFFFFF) + v85) & -v84;
                      v207 = v203;
                      v152 = (v151 - 1 + (v149 >> 3) * v132) & -v151;
                      __b[0] = (void *)__PAIR64__(v149, v152);
                      LODWORD(v209[0]) = 0;
                      v153 = (char *)v209[1];
                      __b[1] = v209[1];
                      if (v209[1] && v152 * HIDWORD(v203) <= LODWORD(v210[1])
                        || (!DWORD1(v210[0])
                          ? (v154 = v152 * HIDWORD(v203))
                          : (v154 = DWORD2(v210[0]) * ((v151 - 1 + DWORD1(v210[0]) * v150) & -v151)),
                            LODWORD(v210[1]) = v154,
                            free(v209[1]),
                            v153 = (char *)malloc_type_malloc((LODWORD(v210[1]) + v151), 0xE0EDAC82uLL),
                            v209[1] = v153,
                            (__b[1] = v153) != 0))
                      {
                        v165 = *((_DWORD *)v78 + 4);
                        v166 = *((_QWORD *)v78 + 3) + (v165 * v147);
                        a5 = v148;
                        if (v150 == 1)
                          v158 = CGSCombineMask((char *)(v166 + (int)v146), v165, v153, (int)__b[0], SDWORD2(v203), SHIDWORD(v203), v145);
                        else
                          v158 = CGSCombineDeepMask((char *)(v166 + v150 * v146), v165, v153, (int)__b[0], SDWORD2(v203), SHIDWORD(v203), v145);
                        v12 = v178;
                        v14 = v180;
                        v73 = v181;
LABEL_208:
                        if (v158)
                          v78 = &v207;
LABEL_210:
                        v27 = v190;
LABEL_211:
                        v99 = DWORD2(v203);
                        v100 = HIDWORD(v203);
                        v97 = v203;
                        v98 = DWORD1(v203) + HIDWORD(v203);
                        v96 = *((_DWORD *)v78 + 2);
                        v95 = *((_DWORD *)v78 + 3);
                        v93 = v203 - *(_DWORD *)v78;
                        v94 = v95 - (DWORD1(v203) + HIDWORD(v203)) + *((_DWORD *)v78 + 1);
LABEL_212:
                        *((_DWORD *)v28 + 1) = v99;
                        *((_DWORD *)v28 + 2) = v100;
                        *((_DWORD *)v28 + 26) = v93;
                        *((_DWORD *)v28 + 27) = v94;
                        *((_DWORD *)v28 + 28) = v96;
                        *((_DWORD *)v28 + 29) = v95;
                        v167 = v97 - v195;
                        *((_QWORD *)v28 + 17) = *((_QWORD *)v78 + 3);
                        *(_QWORD *)((char *)v28 + 124) = *((_QWORD *)v78 + 2);
                        *((_DWORD *)v28 + 30) = *((_DWORD *)v78 + 8);
                        *((_DWORD *)v28 + 3) = v167 + v194;
                        *((_DWORD *)v28 + 4) = v191 - v98 + v193;
                        if (!v192
                          || (*(_DWORD *)v28 = *(_DWORD *)v28 & 0xFFFF00FF | v182,
                              *((_DWORD *)v28 + 14) = v167 + v184,
                              *((_DWORD *)v28 + 15) = v191 - v98 + v183,
                              CGBlt_initialize((uint64_t)v28)))
                        {
                          v168 = (*((uint64_t (**)(uint64_t (**)(), __int128 *))v200 + 4))(v196, v28);
                          v169 = v202;
                          if (v168)
                            v169 = (uint64_t (*)())v27;
                          v202 = v169;
                        }
                        goto LABEL_217;
                      }
                      a5 = v148;
                      goto LABEL_197;
                    }
                    v113 = *(_QWORD *)(v14 + 56);
                    if (!v113)
                    {
LABEL_142:
                      v27 = v190;
                      v73 = v181;
                      goto LABEL_211;
                    }
                    v114 = (int)v203 - (uint64_t)*(int *)(v14 + 12);
                    v115 = HIDWORD(v203);
                    v116 = *(_DWORD *)(v14 + 24) + *(_DWORD *)(v14 + 16) - (HIDWORD(v203) + DWORD1(v203));
                    v117 = (int)v203 - (uint64_t)*(int *)v78;
                    v118 = *((_DWORD *)v78 + 1) - (HIDWORD(v203) + DWORD1(v203)) + *((_DWORD *)v78 + 3);
                    if (v78 == &v207)
                    {
                      v207 = v203;
                      LODWORD(v209[0]) = 0;
                      v123 = __b[1];
                      v134 = (int)__b[0];
                      v135 = (char *)__b[1] + v117 + (LODWORD(__b[0]) * v118);
                      v136 = *(_DWORD *)(v14 + 48);
                      v137 = v113 + v114 + (v136 * v116);
                      v138 = DWORD2(v203);
                      v139 = (int)__b[0];
                    }
                    else
                    {
                      v119 = *((_DWORD *)v78 + 5);
                      v120 = v119 >> 3;
                      v121 = (((v119 >> 1) & 0x1FFFFFFF) + v85) & -v84;
                      v207 = v203;
                      v122 = (v121 - 1 + DWORD2(v203) * (v119 >> 3)) & -v121;
                      __b[0] = (void *)__PAIR64__(v119, v122);
                      LODWORD(v209[0]) = 0;
                      v123 = v209[1];
                      __b[1] = v209[1];
                      if (!v209[1] || (v122 * HIDWORD(v203)) > LODWORD(v210[1]))
                      {
                        v124 = DWORD1(v210[0])
                             ? DWORD2(v210[0]) * ((v121 - 1 + DWORD1(v210[0]) * v120) & -v121)
                             : v122 * HIDWORD(v203);
                        LODWORD(v210[1]) = v124;
                        free(v209[1]);
                        v123 = malloc_type_malloc((LODWORD(v210[1]) + v121), 0x263F05C7uLL);
                        v209[1] = v123;
                        __b[1] = v123;
                        if (!v123)
                          goto LABEL_196;
                      }
                      v134 = *((_DWORD *)v78 + 4);
                      v155 = *((_QWORD *)v78 + 3) + (v134 * v118);
                      v20 = v176;
                      if (v120 != 1)
                      {
                        v157 = v155 + v120 * v117;
                        v14 = v180;
                        v156 = CGSCombineDeepMaskToDeepMask(v157, v134, *(_QWORD *)(v180 + 56) + (*(_DWORD *)(v180 + 48) * v116) + (int)v114, *(_DWORD *)(v180 + 48), (uint64_t)v123, (int)__b[0], SDWORD2(v203), SHIDWORD(v203));
LABEL_182:
                        v12 = v178;
                        v27 = v190;
                        v73 = v181;
                        if (!v156)
                          goto LABEL_211;
                        if ((v156 & 0x80000000) == 0)
                        {
                          v78 = &v207;
                          goto LABEL_211;
                        }
                        goto LABEL_217;
                      }
                      v135 = (char *)(v155 + (int)v117);
                      v14 = v180;
                      v136 = *(_DWORD *)(v180 + 48);
                      v137 = *(_QWORD *)(v180 + 56) + (v136 * v116) + (int)v114;
                      v139 = (int)__b[0];
                      v138 = DWORD2(v203);
                      v115 = HIDWORD(v203);
                    }
                    v156 = CGSCombineMaskToMask((uint64_t)v135, v134, v137, v136, (uint64_t)v123, v139, v138, v115);
                    goto LABEL_182;
                  }
                  v170 = 0;
                  v202 = 0;
LABEL_221:
                  free(v170);
                  v39 = v172;
                  v38 = v175;
                  v35 = v202;
                  goto LABEL_62;
                }
                v68 = *(_DWORD *)(a7 + 24);
                if (v68 == 2)
                {
                  v69 = 4;
                }
                else if (v68 == 1)
                {
                  v69 = 3;
                }
                else
                {
                  if (v68)
                  {
                    LODWORD(v204) = 0;
                    goto LABEL_101;
                  }
                  v69 = 1;
                }
                LODWORD(v204) = v69;
LABEL_101:
                v205 = a7 + 28;
                v70 = *(double *)(a8 + 56) * *(float *)(a7 + 156);
                *(float *)&v206 = v70;
                *((_QWORD *)v28 + 19) = &v204;
                goto LABEL_102;
              }
              v35 = 0;
              v39 = 0;
              v38 = v174;
LABEL_62:
              v48 = v35;
              *((_QWORD *)v28 + 19) = 0;
              if (v20)
              {
                v49 = v38;
                v50 = v39;
                free(v20);
                v39 = v50;
                v38 = v49;
              }
              if (v39 && v39 != (char *)v28 + 184)
              {
                v51 = v38;
                free(v39);
                v38 = v51;
              }
              if (v38)
                (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a5 + 48))(a5, 0);
              (*(void (**)(_DWORD *, uint64_t (*)()))(*(_QWORD *)a1 + 48))(a1, v48);
              return (uint64_t (**)())(v48 != 0);
            }
            goto LABEL_72;
          }
LABEL_71:
          v38 = 0;
LABEL_72:
          v35 = 0;
          goto LABEL_61;
        }
        v35 = (uint64_t (*)())*((_QWORD *)v200 + 3);
        if (v35)
        {
          v189 = v27;
          v179 = v14;
          v45 = *(double *)(a8 + 48);
          v46 = *(_QWORD *)(a5 + 8);
          v40 = *(_DWORD *)(a5 + 16);
          v42 = *(float *)(a5 + 156) * v45;
          if (v46
            && v40 == *((_DWORD *)v28 + 43)
            && v46 == *((_QWORD *)v28 + 20)
            && v40 == *((_DWORD *)v28 + 42)
            && v42 == *((float *)v28 + 44))
          {
            v44 = (uint64_t)v28 + 184;
            goto LABEL_81;
          }
          v38 = a5 + 28;
          v47 = *(_DWORD *)(a5 + 24);
          if (v47)
          {
            v43 = v196;
            if (v47 == 2)
            {
              v173 = *(_QWORD *)(a5 + 8);
              v41 = 4;
            }
            else
            {
              if (v47 != 1)
                goto LABEL_71;
              v173 = *(_QWORD *)(a5 + 8);
              v41 = 3;
            }
            goto LABEL_47;
          }
          v173 = *(_QWORD *)(a5 + 8);
          v41 = 1;
LABEL_46:
          v43 = v196;
LABEL_47:
          v44 = ((uint64_t (*)(uint64_t (**)(), char *, uint64_t, uint64_t, uint64_t, _QWORD, float))v35)(v43, (char *)v28 + 184, 64, v41, v38, *(unsigned __int8 *)(a8 + 4), v42);
          if ((__int128 *)v44 == (__int128 *)((char *)v28 + 184))
          {
            if ((*((_DWORD *)v28 + 46) & 0xFFF00000) == 0x400000)
            {
              *((_QWORD *)v28 + 20) = v173;
              *((_DWORD *)v28 + 42) = v40;
              *((_DWORD *)v28 + 43) = v40;
              v44 = (uint64_t)v28 + 184;
              *((float *)v28 + 44) = v42;
            }
            else
            {
              *((_QWORD *)v28 + 20) = 0;
              *((_QWORD *)v28 + 21) = 0;
              v44 = (uint64_t)v28 + 184;
            }
          }
LABEL_81:
          v60 = a6;
          v61 = (char *)v44;
          v58 = ripl_BltOpSourcePattern((uint64_t)v28, a1, v60, v44);
          v14 = v179;
          v172 = v61;
          if (v179)
          {
            v59 = 0;
            v192 = -1;
            v27 = v189;
            if (!a7)
              goto LABEL_102;
          }
          else
          {
            v27 = v189;
            if ((*(_DWORD *)v61 & 0xFFF00000) == 0x400000
              && (v62 = *(_QWORD *)v12, v63 = a1[3], v63 <= (int)*(_QWORD *)v12)
              && (v64 = HIDWORD(v62), v65 = a1[4], v65 <= SHIDWORD(v62))
              && (v66 = *((_QWORD *)v12 + 1), (int)v62 + (int)v66 <= a1[5] + v63))
            {
              v59 = 0;
              v67 = (int)v64 + HIDWORD(v66) > a1[6] + v65;
            }
            else
            {
              v59 = 0;
              v67 = -1;
            }
            v192 = v67;
            if (!a7)
              goto LABEL_102;
          }
          goto LABEL_90;
        }
      }
    }
LABEL_60:
    v38 = 0;
LABEL_61:
    v39 = 0;
    goto LABEL_62;
  }
  return result;
}

uint64_t A8_mark_inner(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  int32x4_t v4;
  uint8x8_t v5;
  int16x8_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint16x4_t *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  size_t v41;
  _BYTE *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  int32x4_t v51;
  __int128 v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  void *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  unint64_t v62;
  _BYTE *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint8x8_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 *v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  unint64_t v93;
  int v94;
  int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  _BYTE *v103;
  unint64_t v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  unint64_t v111;
  int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  unint64_t v117;
  int v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE *v123;
  unint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  _BYTE *v128;
  unint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE *v133;
  unint64_t v134;
  int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  _BYTE *v139;
  unint64_t v140;
  int v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  _BYTE *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint16x4_t v149;
  uint16x4_t v150;
  int v151;
  unsigned int v152;
  uint32x4_t v153;
  unsigned int v154;
  int v155;
  int v156;
  unsigned int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int *v162;
  unsigned int v163;
  int v164;
  char *v165;
  uint64_t v166;
  int v167;
  int v168;
  unsigned int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  uint64_t v175;
  int v176;
  int v177;
  unsigned int v178;
  int v179;
  unsigned int v180;
  int v181;
  int v182;
  BOOL v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  void *v190;
  uint64_t v191;
  int v192[4];
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  _DWORD v202[1024];
  uint64_t v203;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v203 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(v3 + 96);
  v8 = *(_QWORD *)(v3 + 48);
  v9 = (void *)*(unsigned int *)(v2 + 16 * *(_DWORD *)v3 + 8 * (v7 == 0) + 4 * (v8 == 0));
  if ((int)v9 > 27)
    return 0xFFFFFFFFLL;
  v11 = v3;
  v12 = *(unsigned int *)(v3 + 4);
  v13 = (v12 - 1);
  if ((int)v12 < 1)
    return 0;
  v14 = *(_DWORD *)(v3 + 8);
  v15 = (v14 - 1);
  if (v14 < 1)
    return 0;
  v16 = *(uint16x4_t **)(v3 + 136);
  if ((*(_DWORD *)v3 & 0xFF0000) == 0x50000 || !v16)
  {
    v18 = *(_DWORD *)v3 & 0xFF00;
    if (v18 == 1024)
    {
      v202[0] = *(_DWORD *)(v3 + 4);
      v192[0] = v14;
      v19 = *(_DWORD *)(v3 + 28);
      v20 = *(_QWORD *)(v3 + 40);
      v21 = **(unsigned __int8 **)(v3 + 88);
      v22 = *(int *)(v3 + 12) + *(int *)(v3 + 16) * (uint64_t)v19;
      v23 = v20 + v22;
      if (!v16)
      {
        v25 = 0;
        v46 = (_BYTE *)(v20 + v22);
        goto LABEL_319;
      }
      shape_enum_clip_alloc(v2, v3, (int *)v16, 1, 1, 1, *(_DWORD *)(v3 + 104), *(_DWORD *)(v3 + 108), v12, v14);
      v25 = v24;
      if (!v24)
        return 1;
      while (shape_enum_clip_next((uint64_t)v25, (int *)&v191 + 1, &v191, v202, v192))
      {
        v46 = (_BYTE *)(v23 + (int)v191 * (uint64_t)v19 + SHIDWORD(v191));
        LODWORD(v12) = v202[0];
LABEL_319:
        v148 = v19 - (uint64_t)(int)v12;
        switch((int)v9)
        {
          case 0:
            v163 = v192[0];
            v166 = (v192[0] - 1) * v19;
            if (v19 >= 0)
              v160 = v19;
            else
              v160 = -v19;
            if (v19 >= 0)
              v166 = 0;
            v165 = &v46[v166];
            v164 = v12;
            v161 = 0;
            goto LABEL_353;
          case 1:
            goto LABEL_347;
          case 2:
            goto LABEL_321;
          case 3:
            do
            {
              v155 = v202[0];
              do
              {
                v156 = *v46;
                if (*v46)
                {
                  LOBYTE(v157) = v21;
                  if (v156 != 255)
                    v157 = v21 - (((v156 ^ 0xFF) * v21 + (((v156 ^ 0xFF) * v21) >> 8) + 1) >> 8);
                }
                else
                {
                  LOBYTE(v157) = *v46;
                }
                *v46++ = v157;
                --v155;
              }
              while (v155);
              v46 += v148;
              --v192[0];
            }
            while (v192[0]);
            break;
          case 4:
            do
            {
              v167 = v202[0];
              do
              {
                v168 = *v46;
                if ((_BYTE)v168 == 0xFF)
                {
                  LOBYTE(v169) = 0;
                }
                else
                {
                  LOBYTE(v169) = v21;
                  if (~(_BYTE)v168 != 255)
                    v169 = v21 - ((v168 * v21 + ((v168 * v21) >> 8) + 1) >> 8);
                }
                *v46++ = v169;
                --v167;
              }
              while (v167);
              v46 += v148;
              --v192[0];
            }
            while (v192[0]);
            break;
          case 5:
            do
            {
              v158 = v202[0];
              do
              {
                *v46 = (unsigned __int16)(255 * *v46
                                        + ((255 * *v46) >> 8)
                                        + 1) >> 8;
                ++v46;
                --v158;
              }
              while (v158);
              v46 += v148;
              --v192[0];
            }
            while (v192[0]);
            break;
          case 6:
            do
            {
              v170 = v202[0];
              do
              {
                v171 = *v46;
                if ((_BYTE)v171 != 0xFF)
                {
                  LOBYTE(v172) = v21;
                  if (~(_BYTE)v171 != 255)
                    v172 = v171
                         + ((~(_BYTE)v171 * v21 + ((~(_BYTE)v171 * v21) >> 8) + 1) >> 8);
                  *v46 = v172;
                }
                ++v46;
                --v170;
              }
              while (v170);
              v46 += v148;
              --v192[0];
            }
            while (v192[0]);
            break;
          case 7:
            do
            {
              v173 = v202[0];
              do
              {
                *v46 -= (unsigned __int16)(*v46 * ~(_BYTE)v21
                                         + ((*v46 * ~(_BYTE)v21) >> 8)
                                         + 1) >> 8;
                ++v46;
                --v173;
              }
              while (v173);
              v46 += v148;
              --v192[0];
            }
            while (v192[0]);
            break;
          case 8:
            do
            {
              v159 = v202[0];
              do
              {
                *v46 -= (unsigned __int16)(*v46 * (_WORD)v21 + ((*v46 * v21) >> 8) + 1) >> 8;
                ++v46;
                --v159;
              }
              while (v159);
              v46 += v148;
              --v192[0];
            }
            while (v192[0]);
            break;
          case 9:
            v186 = v23;
            v190 = v9;
            v174 = v192[0];
            v175 = (v12 - 1);
            do
            {
              memset(v46, (255 * v21 + ((255 * v21) >> 8) + 1) >> 8, v175 + 1);
              v46 += v175 + v148 + 1;
              --v174;
            }
            while (v174);
            v192[0] = 0;
            v9 = v190;
            v23 = v186;
            break;
          case 10:
            do
            {
              v176 = v202[0];
              do
              {
                *v46 = (unsigned __int16)((*v46 ^ 0xFF) * v21
                                        + *v46 * ~(_BYTE)v21
                                        + (((*v46 ^ 0xFF) * v21
                                          + *v46 * ~(_BYTE)v21) >> 8)
                                        + 1) >> 8;
                ++v46;
                --v176;
              }
              while (v176);
              v46 += v148;
              --v192[0];
            }
            while (v192[0]);
            break;
          case 11:
            do
            {
              v177 = v202[0];
              do
              {
                v178 = *v46 + v21;
                if (v178 >= 0xFF)
                  LOBYTE(v178) = -1;
                *v46++ = v178;
                --v177;
              }
              while (v177);
              v46 += v148;
              --v192[0];
            }
            while (v192[0]);
            break;
          case 12:
            do
            {
              v179 = v202[0];
              do
              {
                v180 = *v46 + v21;
                if (v180 >= 0xFF)
                  LOBYTE(v180) = -1;
                *v46++ = v180;
                --v179;
              }
              while (v179);
              v46 += v148;
              --v192[0];
            }
            while (v192[0]);
            break;
          case 13:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
            if (*(_QWORD *)(v11 + 96))
            {
LABEL_321:
              v149 = (uint16x4_t)vdup_n_s16(v21);
              v150 = (uint16x4_t)vdup_n_s16(~(_BYTE)v21);
              do
              {
                v151 = v202[0];
                if (v202[0] >= 4)
                {
                  v152 = (v202[0] >> 2) + 1;
                  do
                  {
                    v5.i32[0] = *(_DWORD *)v46;
                    v153 = vmull_u16(v150, (uint16x4_t)*(_OWORD *)&vmovl_u8(v5));
                    *(uint16x4_t *)v6.i8 = vsra_n_u16(v149, (uint16x4_t)vadd_s16(vmovn_s32((int32x4_t)vsraq_n_u32(v153, v153, 8uLL)), (int16x4_t)0x1000100010001), 8uLL);
                    v5 = (uint8x8_t)vmovn_s16(v6);
                    *(_DWORD *)v46 = v5.i32[0];
                    v46 += 4;
                    --v152;
                  }
                  while (v152 > 1);
                  v151 = v202[0] & 3;
                }
                if (v151 >= 1)
                {
                  v154 = v151 + 1;
                  do
                  {
                    *v46 = v21
                         + ((unsigned __int16)(*v46 * ~(_BYTE)v21
                                             + ((*v46 * ~(_BYTE)v21) >> 8)
                                             + 1) >> 8);
                    ++v46;
                    --v154;
                  }
                  while (v154 > 1);
                }
                v46 += v148;
                --v192[0];
              }
              while (v192[0]);
            }
            else
            {
LABEL_347:
              if (v19 < 0)
              {
                v46 += (v192[0] - 1) * v19;
                v160 = -v19;
              }
              else
              {
                v160 = v19;
              }
              v161 = 0;
              v162 = *(int **)(v11 + 88);
              if (v162)
                v161 = *v162;
              v163 = v192[0];
              v164 = v12;
              v165 = v46;
LABEL_353:
              CGBlt_fillBytes(v164, v163, v161, v165, v160);
            }
            break;
          default:
            break;
        }
        if (!v25)
          return 1;
        v191 = 0;
      }
LABEL_45:
      v56 = v25;
LABEL_310:
      free(v56);
      return 1;
    }
    v202[0] = *(_DWORD *)(v3 + 4);
    v192[0] = v14;
    v26 = *(int *)(v3 + 28);
    v27 = *(_QWORD *)(v3 + 88);
    v28 = (unsigned __int8 *)(*(_QWORD *)(v3 + 40) + *(int *)(v3 + 12) + *(int *)(v3 + 16) * (uint64_t)(int)v26);
    v29 = *(_DWORD *)(v3 + 56);
    v30 = *(_DWORD *)(v3 + 60);
    v31 = *(int *)(v3 + 76);
    if (v18 != 256)
    {
      v37 = *(_DWORD *)(v3 + 64);
      v185 = *(_DWORD *)(v3 + 68);
      v35 = v27 + v185 * (uint64_t)(int)v31;
      v183 = v7 != 0;
      if (v16)
      {
        v181 = *(_DWORD *)(v3 + 60);
        v182 = *(_DWORD *)(v3 + 56);
        v184 = *(_QWORD *)(v3 + 40) + *(int *)(v3 + 12) + *(int *)(v3 + 16) * (uint64_t)(int)v26;
        v34 = 1;
        v36 = *(_BYTE **)(v3 + 88);
        v32 = v36;
        goto LABEL_29;
      }
      v54 = v26 - v12;
      if (v27)
      {
        v189 = 0;
        v181 = v30 % v185;
        v182 = v29 % v37;
        v187 = *(_QWORD *)(v3 + 88);
        v55 = v27 + (int)v31 * (uint64_t)(v30 % v185);
        v32 = (_BYTE *)(v55 + v29 % v37);
        v27 = v55 + v37;
        v34 = 1;
        v184 = *(_QWORD *)(v3 + 40) + *(int *)(v3 + 12) + *(int *)(v3 + 16) * (uint64_t)(int)v26;
        v36 = v32;
        goto LABEL_46;
      }
      v181 = *(_DWORD *)(v3 + 60);
      v182 = *(_DWORD *)(v3 + 56);
      v32 = 0;
      v34 = 1;
      v53 = v12;
LABEL_43:
      v189 = 0;
      v35 = 0;
      v36 = 0;
      v31 -= v53;
      v187 = (uint64_t)v32;
      v184 = (uint64_t)v28;
      goto LABEL_46;
    }
    v32 = (_BYTE *)(v27 + v29 + (int)v31 * (uint64_t)v30);
    if ((_DWORD)v31 == (_DWORD)v26 && v28 - v32 >= 1)
    {
      if (v28 - v32 <= v12)
      {
        v28 += v13;
        v32 += v13;
        v34 = 0xFFFFFFFFLL;
        goto LABEL_21;
      }
      v33 = &v32[v31 * v15];
      if (v28 <= &v33[v13])
      {
        v28 += v26 * v15;
        v26 = -v26;
        v31 = -v31;
        v34 = 1;
        v32 = v33;
        goto LABEL_21;
      }
    }
    v34 = 1;
LABEL_21:
    v183 = v7 != 0;
    v181 = *(_DWORD *)(v3 + 60);
    v182 = *(_DWORD *)(v3 + 56);
    if (v16)
    {
      v184 = (uint64_t)v28;
      v185 = 0;
      v35 = 0;
      v36 = 0;
      v27 = -1;
      v37 = v31;
LABEL_29:
      v44 = v34;
      v188 = v26;
      shape_enum_clip_alloc((uint64_t)v28, v3, (int *)v16, v34, v26, 1, *(_DWORD *)(v3 + 104), *(_DWORD *)(v3 + 108), v12, v14);
      if (!v45)
        return 1;
      while (2)
      {
        v189 = (void *)v45;
        if (!shape_enum_clip_next(v45, (int *)&v191 + 1, &v191, v202, v192))
        {
          v56 = v189;
          goto LABEL_310;
        }
        v187 = (uint64_t)v32;
        if (v35)
        {
          v26 = v188;
          v28 = (unsigned __int8 *)(v184 + v188 * (int)v191 + SHIDWORD(v191));
          LODWORD(v12) = v202[0];
          v63 = &v32[v31 * (((int)v191 + *(_DWORD *)(v11 + 60)) % v185)];
          v32 = &v63[(HIDWORD(v191) + *(_DWORD *)(v11 + 56)) % v37];
          v27 = (unint64_t)&v63[v37];
          v64 = v202[0];
          v181 = ((int)v191 + *(_DWORD *)(v11 + 60)) % v185;
          v182 = (HIDWORD(v191) + *(_DWORD *)(v11 + 56)) % v37;
          v36 = v32;
          v34 = v44;
        }
        else
        {
          LODWORD(v12) = v202[0];
          v34 = v44;
          v64 = v202[0] * v44;
          v26 = v188;
          v28 = (unsigned __int8 *)(v184 + v188 * (int)v191 + SHIDWORD(v191) * (uint64_t)(int)v44);
          v32 += (int)v191 * (uint64_t)v37 + SHIDWORD(v191) * (uint64_t)(int)v44;
          v31 = v37 - v202[0] * (int)v44;
        }
        v54 = v26 - v64;
LABEL_46:
        v188 = v26;
        switch((int)v9)
        {
          case 0:
            v84 = v54 - (int)v12;
            v85 = v54 + (int)v12;
            v44 = v34;
            if ((int)v34 >= 0)
            {
              v86 = v28;
            }
            else
            {
              v85 = v84;
              v86 = &v28[-(int)v12 + 1];
            }
            if (v85 >= 0)
              LODWORD(v87) = v85;
            else
              v87 = -v85;
            CGBlt_fillBytes(v12, v192[0], 0, (char *)&v86[(v85 * (v192[0] - 1)) & (v85 >> 63)], v87);
            goto LABEL_67;
          case 1:
            goto LABEL_75;
          case 2:
            goto LABEL_48;
          case 3:
            do
            {
              v88 = v202[0];
              do
              {
                v89 = *v28;
                if (*v28)
                {
                  if (v89 == 255)
                    LOBYTE(v89) = *v32;
                  else
                    v89 = *v32
                        - ((*v32 * (v89 ^ 0xFF) + ((*v32 * (v89 ^ 0xFF)) >> 8) + 1) >> 8);
                }
                *v28 = v89;
                v28 += (int)v34;
                if ((unint64_t)&v32[(int)v34] >= v27)
                  v90 = -(uint64_t)v37;
                else
                  v90 = 0;
                v32 += (int)v34 + v90;
                --v88;
              }
              while (v88);
              v28 += v54;
              if ((unint64_t)&v36[v31] >= v35)
                v91 = -(v31 * v185);
              else
                v91 = 0;
              v92 = &v36[v31 + v91];
              v93 = v27 + v31 + v91;
              if (v35)
                v32 = v92;
              else
                v32 += v31;
              if (v35)
              {
                v36 = v92;
                v27 = v93;
              }
              --v192[0];
            }
            while (v192[0]);
            goto LABEL_66;
          case 4:
            do
            {
              v94 = v202[0];
              do
              {
                v95 = *v28;
                if ((_BYTE)v95 == 0xFF)
                {
                  LOBYTE(v96) = 0;
                }
                else if (~(_BYTE)v95 == 255)
                {
                  LOBYTE(v96) = *v32;
                }
                else
                {
                  v96 = *v32
                      - ((*v32 * v95 + ((*v32 * v95) >> 8) + 1) >> 8);
                }
                *v28 = v96;
                v28 += (int)v34;
                if ((unint64_t)&v32[(int)v34] >= v27)
                  v97 = -(uint64_t)v37;
                else
                  v97 = 0;
                v32 += (int)v34 + v97;
                --v94;
              }
              while (v94);
              v28 += v54;
              if ((unint64_t)&v36[v31] >= v35)
                v98 = -(v31 * v185);
              else
                v98 = 0;
              v99 = &v36[v31 + v98];
              v100 = v27 + v31 + v98;
              if (v35)
                v32 = v99;
              else
                v32 += v31;
              if (v35)
              {
                v36 = v99;
                v27 = v100;
              }
              --v192[0];
            }
            while (v192[0]);
            goto LABEL_66;
          case 5:
            v32 = (_BYTE *)v187;
            do
            {
              v101 = v202[0];
              do
              {
                *v28 = (unsigned __int16)(255 * *v28 + ((255 * *v28) >> 8) + 1) >> 8;
                v28 += (int)v34;
                --v101;
              }
              while (v101);
              v28 += v54;
              if ((unint64_t)&v36[v31] >= v35)
                v102 = -(v31 * v185);
              else
                v102 = 0;
              v103 = &v36[v31 + v102];
              v104 = v27 + v31 + v102;
              if (v35)
              {
                v36 = v103;
                v27 = v104;
              }
              --v192[0];
            }
            while (v192[0]);
            v44 = v34;
            goto LABEL_68;
          case 6:
            do
            {
              v105 = v202[0];
              do
              {
                v106 = *v28;
                if ((_BYTE)v106 != 0xFF)
                {
                  if (~(_BYTE)v106 == 255)
                    LOBYTE(v107) = *v32;
                  else
                    v107 = v106
                         + ((*v32 * ~(_BYTE)v106
                           + ((*v32 * ~(_BYTE)v106) >> 8)
                           + 1) >> 8);
                  *v28 = v107;
                }
                v28 += (int)v34;
                if ((unint64_t)&v32[(int)v34] >= v27)
                  v108 = -(uint64_t)v37;
                else
                  v108 = 0;
                v32 += (int)v34 + v108;
                --v105;
              }
              while (v105);
              v28 += v54;
              if ((unint64_t)&v36[v31] >= v35)
                v109 = -(v31 * v185);
              else
                v109 = 0;
              v110 = &v36[v31 + v109];
              v111 = v27 + v31 + v109;
              if (v35)
                v32 = v110;
              else
                v32 += v31;
              if (v35)
              {
                v36 = v110;
                v27 = v111;
              }
              --v192[0];
            }
            while (v192[0]);
            goto LABEL_66;
          case 7:
            while (1)
            {
              v112 = v202[0];
              do
              {
                v113 = *v32;
                if (*v32)
                {
                  if (v113 == 255)
                    goto LABEL_211;
                  v113 = *v28 - ((*v28 * (v113 ^ 0xFF) + ((*v28 * (v113 ^ 0xFF)) >> 8) + 1) >> 8);
                }
                *v28 = v113;
LABEL_211:
                v28 += (int)v34;
                if ((unint64_t)&v32[(int)v34] >= v27)
                  v114 = -(uint64_t)v37;
                else
                  v114 = 0;
                v32 += (int)v34 + v114;
                --v112;
              }
              while (v112);
              v28 += v54;
              if ((unint64_t)&v36[v31] >= v35)
                v115 = -(v31 * v185);
              else
                v115 = 0;
              v116 = &v36[v31 + v115];
              v117 = v27 + v31 + v115;
              if (v35)
                v32 = v116;
              else
                v32 += v31;
              if (v35)
              {
                v36 = v116;
                v27 = v117;
              }
              if (!--v192[0])
                goto LABEL_66;
            }
          case 8:
            break;
          case 9:
            do
            {
              v125 = v202[0];
              do
              {
                *v28 = (unsigned __int16)(255 * *v32
                                        + ((255 * *v32) >> 8)
                                        + 1) >> 8;
                v28 += (int)v34;
                if ((unint64_t)&v32[(int)v34] >= v27)
                  v126 = -(uint64_t)v37;
                else
                  v126 = 0;
                v32 += (int)v34 + v126;
                --v125;
              }
              while (v125);
              v28 += v54;
              if ((unint64_t)&v36[v31] >= v35)
                v127 = -(v31 * v185);
              else
                v127 = 0;
              v128 = &v36[v31 + v127];
              v129 = v27 + v31 + v127;
              if (v35)
                v32 = v128;
              else
                v32 += v31;
              if (v35)
              {
                v36 = v128;
                v27 = v129;
              }
              --v192[0];
            }
            while (v192[0]);
            goto LABEL_66;
          case 10:
            do
            {
              v130 = v202[0];
              do
              {
                *v28 = (unsigned __int16)((*v28 ^ 0xFF) * *v32
                                        + *v28 * (*v32 ^ 0xFF)
                                        + (((*v28 ^ 0xFF) * *v32
                                          + *v28 * (*v32 ^ 0xFFu)) >> 8)
                                        + 1) >> 8;
                v28 += (int)v34;
                if ((unint64_t)&v32[(int)v34] >= v27)
                  v131 = -(uint64_t)v37;
                else
                  v131 = 0;
                v32 += (int)v34 + v131;
                --v130;
              }
              while (v130);
              v28 += v54;
              if ((unint64_t)&v36[v31] >= v35)
                v132 = -(v31 * v185);
              else
                v132 = 0;
              v133 = &v36[v31 + v132];
              v134 = v27 + v31 + v132;
              if (v35)
                v32 = v133;
              else
                v32 += v31;
              if (v35)
              {
                v36 = v133;
                v27 = v134;
              }
              --v192[0];
            }
            while (v192[0]);
            goto LABEL_66;
          case 11:
            do
            {
              v135 = v202[0];
              do
              {
                v136 = *v32 + *v28;
                if (v136 >= 0xFF)
                  LOBYTE(v136) = -1;
                *v28 = v136;
                v28 += (int)v34;
                if ((unint64_t)&v32[(int)v34] >= v27)
                  v137 = -(uint64_t)v37;
                else
                  v137 = 0;
                v32 += (int)v34 + v137;
                --v135;
              }
              while (v135);
              v28 += v54;
              if ((unint64_t)&v36[v31] >= v35)
                v138 = -(v31 * v185);
              else
                v138 = 0;
              v139 = &v36[v31 + v138];
              v140 = v27 + v31 + v138;
              if (v35)
                v32 = v139;
              else
                v32 += v31;
              if (v35)
              {
                v36 = v139;
                v27 = v140;
              }
              --v192[0];
            }
            while (v192[0]);
            goto LABEL_66;
          case 12:
            do
            {
              v141 = v202[0];
              do
              {
                v142 = *v32 + *v28;
                if (v142 >= 0xFF)
                  LOBYTE(v142) = -1;
                *v28 = v142;
                v28 += (int)v34;
                if ((unint64_t)&v32[(int)v34] >= v27)
                  v143 = -(uint64_t)v37;
                else
                  v143 = 0;
                v32 += (int)v34 + v143;
                --v141;
              }
              while (v141);
              v28 += v54;
              if ((unint64_t)&v36[v31] >= v35)
                v144 = -(v31 * v185);
              else
                v144 = 0;
              v145 = &v36[v31 + v144];
              v146 = v27 + v31 + v144;
              if (v35)
                v32 = v145;
              else
                v32 += v31;
              if (v35)
              {
                v36 = v145;
                v27 = v146;
              }
              --v192[0];
            }
            while (v192[0]);
            goto LABEL_66;
          case 13:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
            if (v183)
            {
              do
              {
LABEL_48:
                v57 = v202[0];
                do
                {
                  v58 = *v32;
                  if (*v32)
                  {
                    if (v58 != 255)
                      v58 += (*v28 * (v58 ^ 0xFF) + ((*v28 * (v58 ^ 0xFFu)) >> 8) + 1) >> 8;
                    *v28 = v58;
                  }
                  v28 += (int)v34;
                  if ((unint64_t)&v32[(int)v34] >= v27)
                    v59 = -(uint64_t)v37;
                  else
                    v59 = 0;
                  v32 += (int)v34 + v59;
                  --v57;
                }
                while (v57);
                v28 += v54;
                if ((unint64_t)&v36[v31] >= v35)
                  v60 = -(v31 * v185);
                else
                  v60 = 0;
                v61 = &v36[v31 + v60];
                v62 = v27 + v31 + v60;
                if (v35)
                  v32 = v61;
                else
                  v32 += v31;
                if (v35)
                {
                  v36 = v61;
                  v27 = v62;
                }
                --v192[0];
              }
              while (v192[0]);
            }
            else
            {
LABEL_75:
              v65 = *(unsigned __int8 *)(v11 + 1);
              if (v65 == 2)
              {
                if ((int)v12 >= 32 && v37 <= 0x40)
                {
                  v4.i32[0] = v37;
                  v68 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v4.i8);
                  v68.i16[0] = vaddlv_u8(v68);
                  if (v68.i32[0] <= 1u)
                  {
                    v44 = v34;
                    v32 = (_BYTE *)v187;
                    CGSFillDRAM64(v28, v12 + v54, v12, v192[0], v187, v31, v37, v185, v182, v181);
                    goto LABEL_68;
                  }
                }
LABEL_84:
                if (v8 == 0 || v183)
                {
                  do
                  {
                    v69 = v202[0];
                    do
                    {
                      *v28 = *v32;
                      v28 += (int)v34;
                      if ((unint64_t)&v32[(int)v34] >= v27)
                        v70 = -(uint64_t)v37;
                      else
                        v70 = 0;
                      v32 += (int)v34 + v70;
                      --v69;
                    }
                    while (v69);
                    v28 += v54;
                    if ((unint64_t)&v36[v31] >= v35)
                      v71 = -(v31 * v185);
                    else
                      v71 = 0;
                    v72 = &v36[v31 + v71];
                    v73 = v27 + v31 + v71;
                    if (v35)
                      v32 = v72;
                    else
                      v32 += v31;
                    if (v35)
                    {
                      v36 = v72;
                      v27 = v73;
                    }
                    --v192[0];
                  }
                  while (v192[0]);
                }
                else
                {
                  do
                  {
                    v74 = v202[0];
                    do
                    {
                      *v28 = *v32;
                      v28 += (int)v34;
                      if ((unint64_t)&v32[(int)v34] >= v27)
                        v75 = -(uint64_t)v37;
                      else
                        v75 = 0;
                      v32 += (int)v34 + v75;
                      --v74;
                    }
                    while (v74);
                    v28 += v54;
                    if ((unint64_t)&v36[v31] >= v35)
                      v76 = -(v31 * v185);
                    else
                      v76 = 0;
                    v77 = &v36[v31 + v76];
                    v78 = v27 + v31 + v76;
                    if (v35)
                      v32 = v77;
                    else
                      v32 += v31;
                    if (v35)
                    {
                      v36 = v77;
                      v27 = v78;
                    }
                    --v192[0];
                  }
                  while (v192[0]);
                }
                goto LABEL_66;
              }
              if (v65 != 1)
                goto LABEL_84;
              if (v8 == 0 || v183)
              {
                v44 = v34;
                if ((v34 & 0x80000000) != 0)
                {
                  v66 = v31 - (int)v12;
                  v32 += -(int)v12 + 1;
                  v67 = v54 - (int)v12;
                  v28 += -(int)v12 + 1;
                }
                else
                {
                  v66 = v31 + (int)v12;
                  v67 = v54 + (int)v12;
                }
                if (v66 >= 0)
                  v31 = v66;
                else
                  v31 = -v66;
                if (v67 >= 0)
                  LODWORD(v147) = v67;
                else
                  v147 = -v67;
                CGBlt_copyBytes(v12, v192[0], &v32[(v66 * (v192[0] - 1)) & (v66 >> 63)], (char *)&v28[(v67 * (v192[0] - 1)) & (v67 >> 63)], v31, v147);
                goto LABEL_67;
              }
              do
              {
                v79 = v202[0];
                do
                {
                  *v28 = *v32;
                  v28 += (int)v34;
                  if ((unint64_t)&v32[(int)v34] >= v27)
                    v80 = -(uint64_t)v37;
                  else
                    v80 = 0;
                  v32 += (int)v34 + v80;
                  --v79;
                }
                while (v79);
                v28 += v54;
                if ((unint64_t)&v36[v31] >= v35)
                  v81 = -(v31 * v185);
                else
                  v81 = 0;
                v82 = &v36[v31 + v81];
                v83 = v27 + v31 + v81;
                if (v35)
                  v32 = v82;
                else
                  v32 += v31;
                if (v35)
                {
                  v36 = v82;
                  v27 = v83;
                }
                --v192[0];
              }
              while (v192[0]);
            }
LABEL_66:
            v44 = v34;
LABEL_67:
            v32 = (_BYTE *)v187;
LABEL_68:
            v45 = (uint64_t)v189;
            if (!v189)
              return 1;
            v191 = 0;
            continue;
          default:
            goto LABEL_66;
        }
        break;
      }
LABEL_225:
      v118 = v202[0];
      while (1)
      {
        v119 = *v32;
        if ((_BYTE)v119 == 0xFF)
          break;
        if (~(_BYTE)v119 != 255)
        {
          v120 = *v28 - ((*v28 * v119 + ((*v28 * v119) >> 8) + 1) >> 8);
LABEL_230:
          *v28 = v120;
        }
        v28 += (int)v34;
        if ((unint64_t)&v32[(int)v34] >= v27)
          v121 = -(uint64_t)v37;
        else
          v121 = 0;
        v32 += (int)v34 + v121;
        if (!--v118)
        {
          v28 += v54;
          if ((unint64_t)&v36[v31] >= v35)
            v122 = -(v31 * v185);
          else
            v122 = 0;
          v123 = &v36[v31 + v122];
          v124 = v27 + v31 + v122;
          if (v35)
            v32 = v123;
          else
            v32 += v31;
          if (v35)
          {
            v36 = v123;
            v27 = v124;
          }
          if (!--v192[0])
            goto LABEL_66;
          goto LABEL_225;
        }
      }
      LOBYTE(v120) = 0;
      goto LABEL_230;
    }
    v185 = 0;
    v53 = (int)v34 * (int)v12;
    v54 = v26 - v53;
    v27 = -1;
    v37 = v31;
    goto LABEL_43;
  }
  v17 = *(_DWORD *)(v3 + 128);
  if ((v17 | 8) == 8)
  {
    if ((*(_DWORD *)v3 & 0xFF00) == 0x400)
      A8_mark_constmask(v3, (int)v9, v4);
    else
      A8_mark_pixelmask(v3, (int)v9);
    return 1;
  }
  v38 = *(_DWORD *)(v3 + 112);
  v39 = *(_DWORD *)(v3 + 116);
  v40 = (v38 + 15) & 0xFFFFFFF0;
  v41 = v40 * v39;
  if ((int)v41 <= 4096)
  {
    v43 = (int)v9;
    v25 = v202;
LABEL_33:
    CGSConvertBitsToMask(v16, *(_DWORD *)(v11 + 124), v25, v40, v38, v39, v17);
    v47 = *(_OWORD *)(v11 + 112);
    v198 = *(_OWORD *)(v11 + 96);
    v199 = v47;
    v48 = *(_OWORD *)(v11 + 144);
    v200 = *(_OWORD *)(v11 + 128);
    v201 = v48;
    v49 = *(_OWORD *)(v11 + 48);
    v194 = *(_OWORD *)(v11 + 32);
    v195 = v49;
    v50 = *(_OWORD *)(v11 + 80);
    v196 = *(_OWORD *)(v11 + 64);
    v197 = v50;
    v51 = *(int32x4_t *)v11;
    v52 = *(_OWORD *)(v11 + 16);
    *(_OWORD *)v192 = *(_OWORD *)v11;
    v193 = v52;
    HIDWORD(v199) = (v38 + 15) & 0xFFFFFFF0;
    *((_QWORD *)&v200 + 1) = v25;
    if (BYTE1(v192[0]) << 8 == 1024)
      A8_mark_constmask((uint64_t)v192, v43, v51);
    else
      A8_mark_pixelmask((uint64_t)v192, v43);
    if (v25 == (_BYTE *)v202)
      return 1;
    goto LABEL_45;
  }
  v42 = malloc_type_malloc(v41, 0x3EE52DA4uLL);
  if (v42)
  {
    v25 = v42;
    v43 = (int)v9;
    v16 = *(uint16x4_t **)(v11 + 136);
    v17 = *(_DWORD *)(v11 + 128);
    goto LABEL_33;
  }
  return 1;
}

uint64_t A8_mark(uint64_t a1, __n128 a2)
{
  return A8_mark_inner(*(_QWORD *)(*(_QWORD *)a1 + 56), a2);
}

uint64_t A8_mark_constmask(uint64_t result, int a2, int32x4_t a3)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BYTE *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  uint32x4_t v28;
  int8x16_t v29;
  uint32x4_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  unint64_t v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;
  int v70;
  int v71;
  unsigned int v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  unsigned int v94;
  int v95;
  unsigned int v96;

  v4 = result;
  v6 = *(_DWORD *)(result + 4);
  v5 = *(_DWORD *)(result + 8);
  v7 = *(int *)(result + 28);
  v8 = *(_QWORD *)(result + 40);
  v9 = *(_QWORD *)(result + 136);
  v10 = **(unsigned __int8 **)(result + 88);
  if (A8_cacheColor && *(unsigned __int8 *)(A8_cacheColor + 16) == v10)
  {
    v11 = (_BYTE *)(A8_cacheColor + 8);
  }
  else
  {
    pthread_mutex_lock(&A8_colorlookup(int,void const*,void const*)::A8_cacheColorMutex);
    v12 = 0;
    v13 = A8_cacheColor;
    while (1)
    {
      if (!v13)
        goto LABEL_9;
      v14 = v12;
      v12 = (char *)v13;
      if (*(unsigned __int8 *)(v13 + 16) == v10)
        break;
      v13 = *(_QWORD *)v13;
      if (!*(_QWORD *)v12)
      {
        if (A8_cacheColorCount > 6)
        {
          *(_QWORD *)v14 = 0;
        }
        else
        {
LABEL_9:
          v15 = (char *)A8_cacheColorBase;
          if (A8_cacheColorBase)
          {
            v16 = A8_cacheColorCount;
          }
          else
          {
            v15 = (char *)malloc_type_calloc(1uLL, 0x7A8uLL, 0x1020040071ED649uLL);
            v16 = 0;
            A8_cacheColorBase = (uint64_t)v15;
          }
          v12 = &v15[24 * v16];
          *((_QWORD *)v12 + 1) = &v15[256 * (unint64_t)v16 + 168];
          A8_cacheColorCount = v16 + 1;
        }
        *(_QWORD *)v12 = A8_cacheColor;
        A8_cacheColor = (uint64_t)v12;
        result = pthread_mutex_unlock(&A8_colorlookup(int,void const*,void const*)::A8_cacheColorMutex);
        v17 = 0;
        a3 = (int32x4_t)xmmword_1850050E0;
        v18 = (int32x4_t)xmmword_1850050F0;
        v19 = (int32x4_t)xmmword_185004E20;
        v20 = (int32x4_t)xmmword_185004DC0;
        v22 = *((_QWORD *)v12 + 1);
        v11 = v12 + 8;
        v21 = v22;
        v23.i64[0] = 0xFF000000FFLL;
        v23.i64[1] = 0xFF000000FFLL;
        v11[8] = v10;
        v24 = vdupq_n_s32(v10);
        v25.i64[0] = 0x1000000010;
        v25.i64[1] = 0x1000000010;
        v26 = vdupq_n_s8(v10);
        do
        {
          v27 = (int8x16_t)vmulq_s32((int32x4_t)veorq_s8((int8x16_t)v20, v23), v24);
          v28 = (uint32x4_t)vmulq_s32((int32x4_t)veorq_s8((int8x16_t)v19, v23), v24);
          v29 = (int8x16_t)vmulq_s32((int32x4_t)veorq_s8((int8x16_t)v18, v23), v24);
          v30 = (uint32x4_t)vmulq_s32((int32x4_t)veorq_s8((int8x16_t)a3, v23), v24);
          *(uint16x4_t *)v27.i8 = vshr_n_u16((uint16x4_t)vadd_s16(vmovn_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v27, (uint32x4_t)v27, 8uLL)), (int16x4_t)0x1000100010001), 8uLL);
          v27.u64[1] = (unint64_t)vshr_n_u16((uint16x4_t)vadd_s16(vmovn_s32((int32x4_t)vsraq_n_u32(v28, v28, 8uLL)), (int16x4_t)0x1000100010001), 8uLL);
          *(uint16x4_t *)v29.i8 = vshr_n_u16((uint16x4_t)vadd_s16(vmovn_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v29, (uint32x4_t)v29, 8uLL)), (int16x4_t)0x1000100010001), 8uLL);
          v29.u64[1] = (unint64_t)vshr_n_u16((uint16x4_t)vadd_s16(vmovn_s32((int32x4_t)vsraq_n_u32(v30, v30, 8uLL)), (int16x4_t)0x1000100010001), 8uLL);
          *(int8x16_t *)(v21 + v17) = vsubq_s8(v26, vuzp1q_s8(v27, v29));
          v17 += 16;
          v20 = vaddq_s32(v20, v25);
          v19 = vaddq_s32(v19, v25);
          v18 = vaddq_s32(v18, v25);
          a3 = vaddq_s32(a3, v25);
        }
        while (v17 != 256);
        goto LABEL_19;
      }
    }
    if (v14)
    {
      *(_QWORD *)v14 = *(_QWORD *)v13;
      *(_QWORD *)v13 = A8_cacheColor;
      A8_cacheColor = v13;
    }
    result = pthread_mutex_unlock(&A8_colorlookup(int,void const*,void const*)::A8_cacheColorMutex);
    v11 = v12 + 8;
  }
LABEL_19:
  if (v9)
  {
    v31 = *(_QWORD *)v11;
    v32 = *(unsigned __int8 *)(*(_QWORD *)v11 + 255);
    v33 = (unsigned __int8 *)(v8 + *(int *)(v4 + 12) + *(int *)(v4 + 16) * (uint64_t)(int)v7);
    v34 = *(int *)(v4 + 124);
    v35 = v9 + *(int *)(v4 + 104) + *(int *)(v4 + 108) * (uint64_t)(int)v34;
    v36 = v34 - v6;
    v37 = v7 - v6;
    switch(a2)
    {
      case 0:
        do
        {
          v53 = v6;
          do
          {
            v54 = *(unsigned __int8 *)v35;
            if (*(_BYTE *)v35)
            {
              if (v54 == 255)
                LOBYTE(v55) = 0;
              else
                v55 = *v33 - ((*v33 * v54 + ((*v33 * v54) >> 8) + 1) >> 8);
              *v33 = v55;
            }
            ++v35;
            ++v33;
            --v53;
          }
          while (v53);
          v35 += v36;
          v33 += v37;
          --v5;
        }
        while (v5);
        return result;
      case 1:
        goto LABEL_98;
      case 2:
        goto LABEL_22;
      case 3:
        do
        {
          v56 = v6;
          do
          {
            v57 = *(unsigned __int8 *)v35;
            if (*(_BYTE *)v35)
            {
              if (v57 == 255)
                LOBYTE(v58) = *(_BYTE *)(v31 + *v33);
              else
                v58 = *(unsigned __int8 *)(v31
                                         + ((unint64_t)(*v33 * v57 + ((*v33 * v57) >> 8) + 1) >> 8))
                    + ((*v33 * (v57 ^ 0xFF) + ((*v33 * (v57 ^ 0xFFu)) >> 8) + 1) >> 8);
              *v33 = v58;
            }
            ++v35;
            ++v33;
            --v56;
          }
          while (v56);
          v35 += v36;
          v33 += v37;
          --v5;
        }
        while (v5);
        return result;
      case 4:
        do
        {
          v59 = v6;
          do
          {
            v60 = *(unsigned __int8 *)v35;
            if (*(_BYTE *)v35)
            {
              if (v60 == 255)
                LOBYTE(v61) = *(_BYTE *)(v31 + ~*v33);
              else
                v61 = *(unsigned __int8 *)(v31
                                         + ((unint64_t)((*v33 ^ 0xFF) * v60 + (((*v33 ^ 0xFFu) * v60) >> 8) + 1) >> 8))
                    + ((*v33 * (v60 ^ 0xFF) + ((*v33 * (v60 ^ 0xFFu)) >> 8) + 1) >> 8);
              *v33 = v61;
            }
            ++v35;
            ++v33;
            --v59;
          }
          while (v59);
          v35 += v36;
          v33 += v37;
          --v5;
        }
        while (v5);
        return result;
      case 5:
        do
        {
          v86 = 0;
          do
          {
            if (*(_BYTE *)(v35 + v86))
              v33[v86] = (unsigned __int16)(255 * v33[v86] + ((255 * v33[v86]) >> 8) + 1) >> 8;
            ++v86;
          }
          while (v6 != (_DWORD)v86);
          v35 += (v6 - 1) + 1 + v36;
          v33 += v86 + v37;
          --v5;
        }
        while (v5);
        return result;
      case 6:
        do
        {
          v87 = v6;
          do
          {
            v88 = *(unsigned __int8 *)v35;
            if (*(_BYTE *)v35)
            {
              v89 = *v33;
              if ((_BYTE)v89 != 0xFF)
              {
                if (~(_BYTE)v89 == 255)
                  LOBYTE(v88) = *(_BYTE *)(v31 + v88);
                else
                  LODWORD(v88) = v89
                               + ((*(unsigned __int8 *)(v31 + v88) * ~(_BYTE)v89
                                 + ((*(unsigned __int8 *)(v31 + v88) * ~(_BYTE)v89) >> 8)
                                 + 1) >> 8);
                *v33 = v88;
              }
            }
            ++v35;
            ++v33;
            --v87;
          }
          while (v87);
          v35 += v36;
          v33 += v37;
          --v5;
        }
        while (v5);
        return result;
      case 7:
        do
        {
          v90 = v6;
          do
          {
            v91 = *(unsigned __int8 *)v35;
            if (*(_BYTE *)v35)
            {
              LOBYTE(v92) = ~(_BYTE)v32;
              if (v91 != 255)
                v92 = v91 - ((v91 * v32 + ((v91 * v32) >> 8) + 1) >> 8);
              *v33 -= (unsigned __int16)(*v33 * v92
                                       + ((*v33 * v92) >> 8)
                                       + 1) >> 8;
            }
            ++v35;
            ++v33;
            --v90;
          }
          while (v90);
          v35 += v36;
          v33 += v37;
          --v5;
        }
        while (v5);
        return result;
      case 8:
        do
        {
          v65 = v6;
          do
          {
            v66 = *(unsigned __int8 *)v35;
            if (*(_BYTE *)v35)
            {
              v67 = *v33;
              if (v66 == 255)
                v68 = v67 * v32;
              else
                v68 = ((unsigned __int16)(v66 * v32 + ((v66 * v32) >> 8) + 1) >> 8) * v67;
              *v33 = v67 - ((unsigned __int16)(v68 + (v68 >> 8) + 1) >> 8);
            }
            ++v35;
            ++v33;
            --v65;
          }
          while (v65);
          v35 += v36;
          v33 += v37;
          --v5;
        }
        while (v5);
        return result;
      case 9:
        do
        {
          v62 = v6;
          do
          {
            v63 = *(unsigned __int8 *)v35;
            if (*(_BYTE *)v35)
            {
              v64 = *(unsigned __int8 *)(v31 + v63);
              *v33 = (unsigned __int16)((*v33 ^ 0xFF) * v64
                                      + (v64 + ~(_BYTE)v63) * *v33
                                      + (((*v33 ^ 0xFF) * v64 + (v64 + ~(_BYTE)v63)
                                                              * *v33) >> 8)
                                      + 1) >> 8;
            }
            ++v35;
            ++v33;
            --v62;
          }
          while (v62);
          v35 += v36;
          v33 += v37;
          --v5;
        }
        while (v5);
        return result;
      case 10:
        do
        {
          v69 = v6;
          do
          {
            if (*(_BYTE *)v35)
            {
              v70 = *(unsigned __int8 *)(v31 + *(unsigned __int8 *)v35);
              *v33 = (unsigned __int16)((*v33 ^ 0xFF) * v70
                                      + *v33 * (v70 ^ 0xFF)
                                      + (((*v33 ^ 0xFF) * v70 + *v33 * (v70 ^ 0xFFu)) >> 8)
                                      + 1) >> 8;
            }
            ++v35;
            ++v33;
            --v69;
          }
          while (v69);
          v35 += v36;
          v33 += v37;
          --v5;
        }
        while (v5);
        return result;
      case 11:
        do
        {
          v93 = v6;
          do
          {
            if (*(_BYTE *)v35)
            {
              v94 = *v33 + *(unsigned __int8 *)(v31 + *(unsigned __int8 *)v35);
              if (v94 >= 0xFF)
                LOBYTE(v94) = -1;
              *v33 = v94;
            }
            ++v35;
            ++v33;
            --v93;
          }
          while (v93);
          v35 += v36;
          v33 += v37;
          --v5;
        }
        while (v5);
        return result;
      case 12:
        do
        {
          v95 = v6;
          do
          {
            if (*(_BYTE *)v35)
            {
              v96 = *v33 + *(unsigned __int8 *)(v31 + *(unsigned __int8 *)v35);
              if (v96 >= 0xFF)
                LOBYTE(v96) = -1;
              *v33 = v96;
            }
            ++v35;
            ++v33;
            --v95;
          }
          while (v95);
          v35 += v36;
          v33 += v37;
          --v5;
        }
        while (v5);
        return result;
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
        if (*(_QWORD *)(v4 + 96))
        {
LABEL_22:
          v38 = -1;
          v39 = v35 & 3;
          if ((v35 & 3) != 0)
          {
            v6 += v39;
            v38 = -1 << (8 * v39);
            v40 = v35 & 3;
            v35 &= 0xFFFFFFFFFFFFFFFCLL;
            v33 -= v40;
          }
          v41 = ((_BYTE)v6 + (_BYTE)v35) & 3;
          if ((((_BYTE)v6 + (_BYTE)v35) & 3) != 0)
          {
            v42 = 4 - v41;
            v39 += v42;
            v41 = 0xFFFFFFFF >> (8 * v42);
            v43 = v6 >= 4 ? -1 : v41;
            v38 &= v43;
            if (v6 < 4)
              v41 = 0;
          }
          v44 = v36 - v39;
          v45 = ~(_BYTE)v32;
          result = 255;
          v46 = v37 - v39;
          while (1)
          {
            v47 = *(_DWORD *)v35 & v38;
            v48 = v41;
            v49 = v6 >> 2;
            if (!v47)
              goto LABEL_43;
LABEL_32:
            if (v47 == -1)
              break;
            while (1)
            {
              if ((_BYTE)v47)
                *v33 = *(_BYTE *)(v31 + v47)
                     + ((unsigned __int16)(*v33 * ~*(_BYTE *)(v31 + v47)
                                         + ((*v33
                                           * ~*(_BYTE *)(v31 + v47)) >> 8)
                                         + 1) >> 8);
              if ((v47 & 0xFF00) != 0)
                v33[1] = *(_BYTE *)(v31 + BYTE1(v47))
                       + ((unsigned __int16)(v33[1] * ~*(_BYTE *)(v31 + BYTE1(v47))
                                           + ((v33[1] * ~*(_BYTE *)(v31 + BYTE1(v47))) >> 8)
                                           + 1) >> 8);
              if ((v47 & 0xFF0000) != 0)
                v33[2] = *(_BYTE *)(v31 + BYTE2(v47))
                       + ((unsigned __int16)(v33[2] * ~*(_BYTE *)(v31 + BYTE2(v47))
                                           + ((v33[2] * ~*(_BYTE *)(v31 + BYTE2(v47))) >> 8)
                                           + 1) >> 8);
              if (HIBYTE(v47))
              {
                v51 = *(unsigned __int8 *)(v31 + ((unint64_t)v47 >> 24));
                v50 = v51 ^ 0xFF;
                goto LABEL_42;
              }
LABEL_43:
              while (1)
              {
                v52 = v49;
                v33 += 4;
                --v49;
                v35 += 4;
                if (v52 < 2)
                  break;
                v47 = *(_DWORD *)v35;
                if (*(_DWORD *)v35)
                  goto LABEL_32;
              }
              if (!v48)
                break;
              v48 = 0;
              v47 = *(_DWORD *)v35 & v41;
            }
            v35 += v44;
            v33 += v46;
            if (!--v5)
              return result;
          }
          *v33 = v32 + ((unsigned __int16)(*v33 * (_WORD)v45 + ((*v33 * v45) >> 8) + 1) >> 8);
          v33[1] = v32 + ((unsigned __int16)(v33[1] * (_WORD)v45 + ((v33[1] * v45) >> 8) + 1) >> 8);
          v33[2] = v32 + ((unsigned __int16)(v33[2] * (_WORD)v45 + ((v33[2] * v45) >> 8) + 1) >> 8);
          v50 = ~(_BYTE)v32;
          LOBYTE(v51) = v32;
LABEL_42:
          v33[3] = v51 + ((unsigned __int16)(v50 * v33[3] + ((v50 * v33[3]) >> 8) + 1) >> 8);
          goto LABEL_43;
        }
LABEL_98:
        v71 = -1;
        v72 = v35 & 3;
        if ((v35 & 3) != 0)
        {
          v6 += v72;
          v71 = -1 << (8 * v72);
          v73 = v35 & 3;
          v35 &= 0xFFFFFFFFFFFFFFFCLL;
          v33 -= v73;
        }
        v74 = ((_BYTE)v6 + (_BYTE)v35) & 3;
        if ((((_BYTE)v6 + (_BYTE)v35) & 3) != 0)
        {
          v75 = 4 - v74;
          v72 += v75;
          v76 = 0xFFFFFFFF >> (8 * v75);
          if (v6 >= 4)
            v74 = v76;
          else
            v74 = 0;
          if (v6 >= 4)
            v76 = -1;
          v71 &= v76;
        }
        v77 = v36 - v72;
        v78 = v37 - v72;
        *(int16x4_t *)a3.i8 = vdup_n_s16(v32);
        a3.i32[0] = vmovn_s16((int16x8_t)a3).u32[0];
        break;
      default:
        return result;
    }
    do
    {
      v79 = *(_DWORD *)v35 & v71;
      v80 = v6 >> 2;
      result = v74;
      if (!v79)
        goto LABEL_127;
LABEL_109:
      if (v79 == -1)
      {
        *(_DWORD *)v33 = a3.i32[0];
        goto LABEL_127;
      }
      while (1)
      {
        if ((_BYTE)v79)
        {
          LOBYTE(v81) = v32;
          if (v79 != 255)
            v81 = *(unsigned __int8 *)(v31 + v79)
                + (((v79 ^ 0xFF) * *v33
                  + (((v79 ^ 0xFF) * *v33) >> 8)
                  + 1) >> 8);
          *v33 = v81;
        }
        if (BYTE1(v79))
        {
          LOBYTE(v82) = v32;
          if (BYTE1(v79) != 255)
            v82 = *(unsigned __int8 *)(v31 + BYTE1(v79))
                + (((BYTE1(v79) ^ 0xFF) * v33[1] + (((BYTE1(v79) ^ 0xFF) * v33[1]) >> 8) + 1) >> 8);
          v33[1] = v82;
        }
        if (BYTE2(v79))
        {
          LOBYTE(v83) = v32;
          if (BYTE2(v79) != 255)
            v83 = *(unsigned __int8 *)(v31 + BYTE2(v79))
                + (((BYTE2(v79) ^ 0xFF) * v33[2] + (((BYTE2(v79) ^ 0xFF) * v33[2]) >> 8) + 1) >> 8);
          v33[2] = v83;
        }
        v84 = (unint64_t)v79 >> 24;
        if ((_DWORD)v84 == 255)
        {
          v33[3] = v32;
        }
        else if (HIBYTE(v79))
        {
          v33[3] = *(_BYTE *)(v31 + v84)
                 + ((unsigned __int16)((v84 ^ 0xFF) * v33[3] + (((v84 ^ 0xFF) * v33[3]) >> 8) + 1) >> 8);
        }
LABEL_127:
        while (1)
        {
          v85 = v80;
          v33 += 4;
          --v80;
          v35 += 4;
          if (v85 < 2)
            break;
          v79 = *(_DWORD *)v35;
          if (*(_DWORD *)v35)
            goto LABEL_109;
        }
        if (!(_DWORD)result)
          break;
        result = 0;
        v79 = *(_DWORD *)v35 & v74;
      }
      v35 += v77;
      v33 += v78;
      --v5;
    }
    while (v5);
  }
  return result;
}

_DWORD *A8_pattern(uint64_t a1, _DWORD *a2, unsigned int a3, float a4)
{
  float *v5;
  float v6;
  int v7;
  char *v8;

  v5 = *(float **)(*(_QWORD *)a1 + 64);
  if (a2 && a3 > 3 || (a2 = malloc_type_malloc(0x34uLL, 0x705560E0uLL)) != 0)
  {
    v6 = v5[1];
    if (v6 >= a4)
    {
      v6 = a4;
      if (*v5 > a4)
        v6 = *v5;
    }
    v7 = (int)(float)((float)(v6 * v5[2]) + v5[3]);
    *(_OWORD *)a2 = xmmword_185005020;
    a2[6] = 0;
    *((_QWORD *)a2 + 2) = 1;
    a2[12] = v7 | (v7 << 8) | ((v7 | (v7 << 8)) << 16);
    if (v7 >= 255)
      v8 = 0;
    else
      v8 = (char *)(a2 + 12);
    *((_QWORD *)a2 + 4) = a2 + 12;
    *((_QWORD *)a2 + 5) = v8;
  }
  return a2;
}

void CGBlt_fillBytes(int a1, unsigned int a2, int a3, char *__b, int a5)
{
  char *v5;
  unsigned int v6;
  unsigned int v7;
  _BOOL4 v8;
  _BOOL4 v9;
  BOOL v10;
  int v11;
  size_t v12;
  int v13;
  uint64_t v14;
  int __pattern4;

  __pattern4 = a3;
  if (a1 >= 1 && (int)a2 >= 1)
  {
    v5 = __b;
    if (a1 == 2)
    {
      if ((a2 & 1) != 0)
      {
        *(_WORD *)__b = HIWORD(a3);
        v5 = &__b[a5];
      }
      if (a2 >= 2)
      {
        v7 = a2 >> 1;
        do
        {
          *(_WORD *)v5 = HIWORD(a3);
          *(_WORD *)&v5[a5] = HIWORD(a3);
          v5 += a5 + (uint64_t)a5;
          --v7;
        }
        while (v7);
      }
    }
    else if (a1 == 1)
    {
      if ((a2 & 1) != 0)
      {
        *__b = HIBYTE(a3);
        v5 = &__b[a5];
      }
      if (a2 >= 2)
      {
        v6 = a2 >> 1;
        do
        {
          *v5 = HIBYTE(a3);
          v5[a5] = HIBYTE(a3);
          v5 += a5 + (uint64_t)a5;
          --v6;
        }
        while (v6);
      }
    }
    else
    {
      v8 = a1 == a5;
      v9 = (a1 & 3) == 0;
      v10 = !v9 || !v8;
      if (v9 && v8)
        v11 = a2;
      else
        v11 = 1;
      v12 = (v11 * a1);
      if (v10)
        v13 = a2;
      else
        v13 = 1;
      v14 = a5;
      if (a3)
      {
        do
        {
          memset_pattern4(v5, &__pattern4, v12);
          v5 += v14;
          --v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          bzero(v5, v12);
          v5 += v14;
          --v13;
        }
        while (v13);
      }
    }
  }
}

BOOL ripl_IsEnclosed(_DWORD *a1, _DWORD *a2)
{
  int v2;
  int v3;
  _BOOL8 result;

  result = 0;
  if (*a1 >= *a2)
  {
    v2 = a1[1];
    v3 = a2[1];
    if (v2 >= v3 && a1[2] + *a1 <= a2[2] + *a2 && a1[3] + v2 <= a2[3] + v3)
      return 1;
  }
  return result;
}

uint64_t GRAYA8_mark(uint64_t a1, __n128 a2)
{
  return GRAYA8_mark_inner(*(_QWORD *)(*(_QWORD *)a1 + 56), a2);
}

void A8_image_mark_image(uint64_t a1, uint64_t a2, int a3, int a4, void (*a5)(uint64_t, _DWORD *))
{
  float v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  int v41;
  int v42;
  int *v43;
  int v44;
  void *v45;
  void *v46;
  int v47;
  int v48;
  uint64_t v49;
  _DWORD v50[2];
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  int v67;
  int v68;
  int v69[4];

  v8 = (float)(int)(float)(*(float *)(a2 + 184) * 255.0) + 0.5;
  v50[0] = a3;
  v50[1] = a4;
  v51 = (int)v8;
  v9 = *(int *)(a1 + 28);
  v53 = v9;
  v10 = *(_QWORD *)(a2 + 120);
  v11 = *(_DWORD *)(a2 + 20);
  if (v10)
  {
    v12 = HIBYTE(v11);
    v13 = *(int *)(a2 + 24);
    v14 = (uint64_t *)(a2 + 104);
    v15 = (uint64_t *)(a2 + 72);
    v16 = (uint64_t *)(a2 + 88);
  }
  else
  {
    v12 = BYTE2(v11);
    v13 = (unint64_t)*(unsigned int *)(a2 + 8) >> 25;
    v14 = (uint64_t *)(a2 + 96);
    v15 = (uint64_t *)(a2 + 64);
    v16 = (uint64_t *)(a2 + 80);
    v10 = *(_QWORD *)(a2 + 112);
  }
  v17 = *v16;
  v18 = *v15;
  v19 = *v14;
  v20 = v12;
  v56 = v12;
  v54 = v19;
  v64 = v13;
  v62 = v17;
  v60 = v18;
  v58 = v10;
  v21 = *(_QWORD *)(a2 + 128);
  v49 = v17;
  if (v21)
  {
    v22 = BYTE2(v11);
    v23 = (unint64_t)*(unsigned int *)(a2 + 8) >> 25;
    v24 = (uint64_t *)(a2 + 96);
    v25 = (uint64_t *)(a2 + 64);
    v26 = (uint64_t *)(a2 + 80);
  }
  else
  {
    v22 = HIBYTE(v11);
    v23 = *(int *)(a2 + 24);
    v24 = (uint64_t *)(a2 + 104);
    v25 = (uint64_t *)(a2 + 72);
    v26 = (uint64_t *)(a2 + 88);
    v21 = *(_QWORD *)(a2 + 136);
  }
  v27 = *v26;
  v28 = *v25;
  v29 = *v24;
  v57 = v22;
  v55 = v29;
  v65 = v23;
  v63 = v27;
  v61 = v28;
  v59 = v21;
  v30 = *(unsigned int *)(a1 + 4);
  if ((v30 & 0x80000000) == 0)
  {
    v31 = malloc_type_malloc(16 * v30, 0x9A5AA69uLL);
    v66 = v31;
    if (v31)
    {
      if (*(_QWORD *)(a2 + 176))
      {
        if ((_DWORD)v30)
        {
          v33 = v31 + 1;
          v34 = v49 - v19;
          do
          {
            if (((v19 - v18) | v34) < 0)
            {
              v37 = 0;
              v38 = 0;
            }
            else
            {
              v35 = ((v19 & (unint64_t)~(-1 << v20)) >> (v20 - 4)) & 0xF;
              v36 = weights_19497[v35];
              if (v35 - 7 >= 9)
                v37 = -(uint64_t)v13;
              else
                v37 = v13;
              v38 = v36 & 0xF;
            }
            *(v33 - 1) = v13 * (v19 >> v20);
            *v33 = v38 | (16 * v37);
            v33 += 2;
            v19 += v10;
            v34 -= v10;
            --v30;
          }
          while (v30);
        }
      }
      else if ((_DWORD)v30)
      {
        v39 = v31 + 1;
        do
        {
          *(v39 - 1) = v13 * (v19 >> v20);
          *v39 = 0;
          v39 += 2;
          v19 += v10;
          --v30;
        }
        while (v30);
      }
      v40 = v31;
      v41 = *(_DWORD *)(a1 + 4);
      v42 = *(_DWORD *)(a1 + 8);
      v67 = v42;
      v68 = v41;
      v43 = *(int **)(a1 + 136);
      if (v43)
      {
        v44 = *(_DWORD *)(a1 + 104);
        v69[0] = *(_DWORD *)(a1 + 108);
        v69[1] = v44;
        shape_enum_clip_alloc((uint64_t)v31, v32, v43, 1, 1, 1, v44, v69[0], v41, v42);
        v46 = v45;
        if (v45)
          goto LABEL_27;
      }
      v47 = 0;
      v48 = 0;
      v46 = 0;
      *(_QWORD *)v69 = 0;
      while (1)
      {
        v52 = *(_QWORD *)(a1 + 40) + v9 * (*(int *)(a1 + 16) + (uint64_t)v48) + *(int *)(a1 + 12) + (uint64_t)v47;
        a5(a2, v50);
        if (!v46)
          break;
LABEL_27:
        if (!shape_enum_clip_next((uint64_t)v46, &v69[1], v69, &v68, &v67))
        {
          free(v46);
          break;
        }
        v48 = v69[0];
        v47 = v69[1];
        v9 = v53;
      }
      free(v40);
    }
  }
}

uint64_t A8_image_mark_rgb32(uint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  unsigned int *v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;

  v6 = *((unsigned __int8 *)a2 + 8);
  v7 = a2[1];
  v70 = *a2;
  v8 = *(unsigned int **)(result + 32);
  if (*(_QWORD *)(result + 40))
    v9 = 0;
  else
    v9 = 255;
  v10 = (_BYTE *)*((_QWORD *)a2 + 2);
  v69 = *((_QWORD *)a2 + 3) - a5;
  v11 = *((_QWORD *)a2 + 15);
  v12 = *((_QWORD *)a2 + 16);
  v13 = *((_QWORD *)a2 + 7);
  v68 = *((_QWORD *)a2 + 9);
  v14 = *((_QWORD *)a2 + 5) + v68 * a4;
  v15 = (unsigned int *)((char *)v8
                       + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
                       + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3));
  if (*(_QWORD *)(result + 176))
  {
    v66 = *((_QWORD *)a2 + 11);
    v65 = *((_QWORD *)a2 + 13);
    v63 = v12 + 16 * a3 + 8;
    v64 = a5;
    v67 = a5;
    do
    {
      if (((v65 - v14) | (v14 - v66)) < 0)
      {
        v17 = 0;
        v18 = 0;
      }
      else
      {
        v16 = ((v14 & (unint64_t)~(-1 << v13)) >> (v13 - 4)) & 0xF;
        if (v16 - 7 >= 9)
          v17 = -v11;
        else
          v17 = v11;
        v18 = weights_19497[v16] & 0xF;
      }
      v19 = *(_QWORD *)(result + 32) + (v14 >> v13) * v11;
      if (v70 == 1)
      {
        if (a5 >= 1)
        {
          v20 = (uint64_t *)v63;
          v21 = v64;
          do
          {
            v22 = *(v20 - 1);
            v23 = *v20;
            v24 = v19 + v22;
            if ((unint64_t)v15 >= v19 + v22)
              v25 = (unsigned int *)(v19 + v22);
            else
              v25 = v15;
            if (v8 > v25)
              v25 = v8;
            v26 = *v25;
            if ((v23 & 0xF) != 0)
            {
              v27 = (unsigned int *)(v24 + (v23 >> 4));
              if (v15 < v27)
                v27 = v15;
              if (v8 > v27)
                v27 = v8;
              v28 = *v27;
              if (v18)
              {
                v29 = (unsigned int *)(v24 + v17);
                if (v15 >= v29)
                  v30 = v29;
                else
                  v30 = v15;
                if (v8 > v30)
                  v30 = v8;
                v31 = *v30;
                v32 = (unsigned int *)((char *)v29 + (v23 >> 4));
                if (v15 < v32)
                  v32 = v15;
                if (v8 > v32)
                  v32 = v8;
                v33 = BLEND8_19499[v18];
                v26 = v26 - ((v33 & v26) >> v18) + ((v33 & v31) >> v18);
                v28 = v28 - ((v33 & v28) >> v18) + ((v33 & *v32) >> v18);
              }
              v26 = v26
                  - ((BLEND8_19499[*v20 & 0xF] & v26) >> (*v20 & 0xF))
                  + ((BLEND8_19499[*v20 & 0xF] & v28) >> (*v20 & 0xF));
            }
            else if (v18)
            {
              v34 = (unsigned int *)(v24 + v17);
              if ((unint64_t)v15 < v24 + v17)
                v34 = v15;
              if (v8 > v34)
                v34 = v8;
              v26 = v26 - ((BLEND8_19499[v18] & v26) >> v18) + ((BLEND8_19499[v18] & *v34) >> v18);
            }
            v35 = __ROL4__(v26, v7) | v9;
            if (v6 != 255)
              v35 = (v35 * v6 + ((v35 * v6) >> 8) + 1) >> 8;
            v20 += 2;
            *v10++ = v35;
            --v21;
          }
          while (v21);
        }
      }
      else if (a5 >= 1)
      {
        v37 = (uint64_t *)v63;
        v36 = v64;
        do
        {
          v38 = *(v37 - 1);
          v39 = *v37;
          v40 = v19 + v38;
          if ((unint64_t)v15 >= v19 + v38)
            v41 = (unsigned int *)(v19 + v38);
          else
            v41 = v15;
          if (v8 > v41)
            v41 = v8;
          v42 = *v41;
          if ((v39 & 0xF) != 0)
          {
            v43 = (unsigned int *)(v40 + (v39 >> 4));
            if (v15 < v43)
              v43 = v15;
            if (v8 > v43)
              v43 = v8;
            v44 = *v43;
            if (v18)
            {
              if ((unint64_t)v15 >= v40 + v17)
                v45 = (unsigned int *)(v40 + v17);
              else
                v45 = v15;
              if (v8 > v45)
                v45 = v8;
              v46 = *v45;
              v47 = (unsigned int *)(v40 + v17 + (v39 >> 4));
              if (v15 < v47)
                v47 = v15;
              if (v8 > v47)
                v47 = v8;
              v48 = BLEND8_19499[v18];
              v42 = v42 - ((v48 & v42) >> v18) + ((v48 & v46) >> v18);
              v44 = v44 - ((v48 & v44) >> v18) + ((v48 & *v47) >> v18);
            }
            v42 = v42
                - ((BLEND8_19499[*v37 & 0xF] & v42) >> (*v37 & 0xF))
                + ((BLEND8_19499[*v37 & 0xF] & v44) >> (*v37 & 0xF));
          }
          else if (v18)
          {
            v49 = (unsigned int *)(v40 + v17);
            if ((unint64_t)v15 < v40 + v17)
              v49 = v15;
            if (v8 > v49)
              v49 = v8;
            v42 = v42 - ((BLEND8_19499[v18] & v42) >> v18) + ((BLEND8_19499[v18] & *v49) >> v18);
          }
          v50 = __ROL4__(v42, v7) | v9;
          if (v6 != 255)
            v50 = (v50 * v6 + ((v50 * v6) >> 8) + 1) >> 8;
          if ((_BYTE)v50)
          {
            if (v50 != 255)
              v50 += (~(_BYTE)v50 * *v10
                    + ((~(_BYTE)v50 * *v10) >> 8)
                    + 1) >> 8;
            *v10 = v50;
          }
          v37 += 2;
          ++v10;
          --v36;
        }
        while (v36);
      }
      v10 += v69;
      v14 += v68;
      --a6;
      a5 = v67;
    }
    while (a6);
  }
  else
  {
    v51 = (uint64_t *)(v12 + 16 * a3);
    do
    {
      v52 = *(_QWORD *)(result + 32) + (v14 >> v13) * v11;
      if (v70 == 1)
      {
        if (a5 >= 1)
        {
          v53 = v51;
          v54 = a5;
          do
          {
            v55 = *v53;
            v53 += 2;
            v56 = (unsigned int *)(v52 + v55);
            if ((unint64_t)v15 < v52 + v55)
              v56 = v15;
            if (*(_QWORD *)(result + 32) > (unint64_t)v56)
              v56 = *(unsigned int **)(result + 32);
            v57 = __ROL4__(*v56, v7) | v9;
            if (v6 != 255)
              v57 = (v57 * v6 + ((v57 * v6) >> 8) + 1) >> 8;
            *v10++ = v57;
            --v54;
          }
          while (v54);
        }
      }
      else
      {
        v58 = v51;
        v59 = a5;
        if (a5 >= 1)
        {
          do
          {
            v60 = *v58;
            v58 += 2;
            v61 = (unsigned int *)(v52 + v60);
            if ((unint64_t)v15 < v52 + v60)
              v61 = v15;
            if (*(_QWORD *)(result + 32) > (unint64_t)v61)
              v61 = *(unsigned int **)(result + 32);
            v62 = __ROL4__(*v61, v7) | v9;
            if (v6 != 255)
              v62 = (v62 * v6 + ((v62 * v6) >> 8) + 1) >> 8;
            if ((_BYTE)v62)
            {
              if (v62 != 255)
                v62 += (~(_BYTE)v62 * *v10
                      + ((~(_BYTE)v62 * *v10) >> 8)
                      + 1) >> 8;
              *v10 = v62;
            }
            ++v10;
            --v59;
          }
          while (v59);
        }
      }
      v10 += v69;
      v14 += v68;
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t A8_image_mark_RGB32(uint64_t result, int *a2, int a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  unsigned int *v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unsigned int *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  int v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  int v49;
  unsigned int *v50;
  unsigned int v51;
  uint64_t *v52;
  unsigned int *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;

  v6 = *((unsigned __int8 *)a2 + 8);
  v7 = a2[1];
  v72 = *a2;
  v8 = *(unsigned int **)(result + 32);
  if (*(_QWORD *)(result + 40))
    v9 = 0;
  else
    v9 = 255;
  v10 = (_BYTE *)*((_QWORD *)a2 + 2);
  v71 = *((_QWORD *)a2 + 3) - a5;
  v12 = *((_QWORD *)a2 + 15);
  v11 = *((_QWORD *)a2 + 16);
  v13 = *((_QWORD *)a2 + 7);
  v70 = *((_QWORD *)a2 + 9);
  v14 = *((_QWORD *)a2 + 5) + v70 * a4;
  v15 = (char *)v8
      + (*(_DWORD *)(result + 260) - 1) * *(_DWORD *)(result + 24)
      + (((*(_DWORD *)(result + 8) >> 22) * *(_DWORD *)(result + 256)) >> 3);
  if (*(_QWORD *)(result + 176))
  {
    v68 = *((_QWORD *)a2 + 11);
    v67 = *((_QWORD *)a2 + 13);
    v16 = (unsigned int *)(v15 - 4);
    v66 = a5;
    v65 = v11 + 16 * a3 + 8;
    v69 = a5;
    do
    {
      if (((v67 - v14) | (v14 - v68)) < 0)
      {
        v18 = 0;
        v19 = 0;
      }
      else
      {
        v17 = ((v14 & (unint64_t)~(-1 << v13)) >> (v13 - 4)) & 0xF;
        if (v17 - 7 >= 9)
          v18 = -v12;
        else
          v18 = v12;
        v19 = weights_19497[v17] & 0xF;
      }
      v20 = *(_QWORD *)(result + 32) + (v14 >> v13) * v12;
      if (v72 == 1)
      {
        if (a5 >= 1)
        {
          v21 = (uint64_t *)v65;
          v22 = v66;
          do
          {
            v23 = *(v21 - 1);
            v24 = *v21;
            v25 = v20 + v23;
            if ((unint64_t)v16 >= v20 + v23)
              v26 = (unsigned int *)(v20 + v23);
            else
              v26 = v16;
            if (v8 > v26)
              v26 = v8;
            v27 = bswap32(*v26);
            if ((v24 & 0xF) != 0)
            {
              v28 = (unsigned int *)(v25 + (v24 >> 4));
              if (v16 < v28)
                v28 = v16;
              if (v8 > v28)
                v28 = v8;
              v29 = bswap32(*v28);
              if (v19)
              {
                v30 = (unsigned int *)(v25 + v18);
                if (v16 >= v30)
                  v31 = v30;
                else
                  v31 = v16;
                if (v8 > v31)
                  v31 = v8;
                v32 = bswap32(*v31);
                v33 = (unsigned int *)((char *)v30 + (v24 >> 4));
                if (v16 < v33)
                  v33 = v16;
                if (v8 > v33)
                  v33 = v8;
                v34 = BLEND8_19499[v19];
                v27 = v27 - ((v34 & v27) >> v19) + ((v34 & v32) >> v19);
                v29 = v29 - ((v34 & v29) >> v19) + ((bswap32(*v33) & v34) >> v19);
              }
              v27 = v27
                  - ((BLEND8_19499[*v21 & 0xF] & v27) >> (*v21 & 0xF))
                  + ((BLEND8_19499[*v21 & 0xF] & v29) >> (*v21 & 0xF));
            }
            else if (v19)
            {
              v35 = (unsigned int *)(v25 + v18);
              if ((unint64_t)v16 < v25 + v18)
                v35 = v16;
              if (v8 > v35)
                v35 = v8;
              v27 = v27 - ((BLEND8_19499[v19] & v27) >> v19) + ((bswap32(*v35) & BLEND8_19499[v19]) >> v19);
            }
            v36 = __ROL4__(v27, v7) | v9;
            if (v6 != 255)
              v36 = (v36 * v6 + ((v36 * v6) >> 8) + 1) >> 8;
            v21 += 2;
            *v10++ = v36;
            --v22;
          }
          while (v22);
        }
      }
      else if (a5 >= 1)
      {
        v38 = (uint64_t *)v65;
        v37 = v66;
        do
        {
          v39 = *(v38 - 1);
          v40 = *v38;
          v41 = v20 + v39;
          if ((unint64_t)v16 >= v20 + v39)
            v42 = (unsigned int *)(v20 + v39);
          else
            v42 = v16;
          if (v8 > v42)
            v42 = v8;
          v43 = bswap32(*v42);
          if ((v40 & 0xF) != 0)
          {
            v44 = (unsigned int *)(v41 + (v40 >> 4));
            if (v16 < v44)
              v44 = v16;
            if (v8 > v44)
              v44 = v8;
            v45 = bswap32(*v44);
            if (v19)
            {
              if ((unint64_t)v16 >= v41 + v18)
                v46 = (unsigned int *)(v41 + v18);
              else
                v46 = v16;
              if (v8 > v46)
                v46 = v8;
              v47 = bswap32(*v46);
              v48 = (unsigned int *)(v41 + v18 + (v40 >> 4));
              if (v16 < v48)
                v48 = v16;
              if (v8 > v48)
                v48 = v8;
              v49 = BLEND8_19499[v19];
              v43 = v43 - ((v49 & v43) >> v19) + ((v49 & v47) >> v19);
              v45 = v45 - ((v49 & v45) >> v19) + ((bswap32(*v48) & v49) >> v19);
            }
            v43 = v43
                - ((BLEND8_19499[*v38 & 0xF] & v43) >> (*v38 & 0xF))
                + ((BLEND8_19499[*v38 & 0xF] & v45) >> (*v38 & 0xF));
          }
          else if (v19)
          {
            v50 = (unsigned int *)(v41 + v18);
            if ((unint64_t)v16 < v41 + v18)
              v50 = v16;
            if (v8 > v50)
              v50 = v8;
            v43 = v43 - ((BLEND8_19499[v19] & v43) >> v19) + ((bswap32(*v50) & BLEND8_19499[v19]) >> v19);
          }
          v51 = __ROL4__(v43, v7) | v9;
          if (v6 != 255)
            v51 = (v51 * v6 + ((v51 * v6) >> 8) + 1) >> 8;
          if ((_BYTE)v51)
          {
            if (v51 != 255)
              v51 += (~(_BYTE)v51 * *v10
                    + ((~(_BYTE)v51 * *v10) >> 8)
                    + 1) >> 8;
            *v10 = v51;
          }
          v38 += 2;
          ++v10;
          --v37;
        }
        while (v37);
      }
      v10 += v71;
      v14 += v70;
      --a6;
      a5 = v69;
    }
    while (a6);
  }
  else
  {
    v52 = (uint64_t *)(v11 + 16 * a3);
    v53 = (unsigned int *)(v15 - 4);
    do
    {
      v54 = *(_QWORD *)(result + 32) + (v14 >> v13) * v12;
      if (v72 == 1)
      {
        if (a5 >= 1)
        {
          v55 = v52;
          v56 = a5;
          do
          {
            v57 = *v55;
            v55 += 2;
            v58 = (unsigned int *)(v54 + v57);
            if ((unint64_t)v53 < v54 + v57)
              v58 = v53;
            if (*(_QWORD *)(result + 32) > (unint64_t)v58)
              v58 = *(unsigned int **)(result + 32);
            v59 = __ROL4__(bswap32(*v58), v7) | v9;
            if (v6 != 255)
              v59 = (v59 * v6 + ((v59 * v6) >> 8) + 1) >> 8;
            *v10++ = v59;
            --v56;
          }
          while (v56);
        }
      }
      else
      {
        v60 = v52;
        v61 = a5;
        if (a5 >= 1)
        {
          do
          {
            v62 = *v60;
            v60 += 2;
            v63 = (unsigned int *)(v54 + v62);
            if ((unint64_t)v53 < v54 + v62)
              v63 = v53;
            if (*(_QWORD *)(result + 32) > (unint64_t)v63)
              v63 = *(unsigned int **)(result + 32);
            v64 = __ROL4__(bswap32(*v63), v7) | v9;
            if (v6 != 255)
              v64 = (v64 * v6 + ((v64 * v6) >> 8) + 1) >> 8;
            if ((_BYTE)v64)
            {
              if (v64 != 255)
                v64 += (~(_BYTE)v64 * *v10
                      + ((~(_BYTE)v64 * *v10) >> 8)
                      + 1) >> 8;
              *v10 = v64;
            }
            ++v10;
            --v61;
          }
          while (v61);
        }
      }
      v10 += v71;
      v14 += v70;
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t CGClipGetType(uint64_t a1)
{
  return *(char *)(a1 + 8);
}

uint64_t CGClipGetShouldAntialias(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 10);
}

uint64_t CGClipGetMode(uint64_t a1)
{
  return *(char *)(a1 + 9);
}

void CGContextDrawLinearGradient(CGContextRef c, CGGradientRef gradient, CGPoint startPoint, CGPoint endPoint, CGGradientDrawingOptions options)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  double y;
  double x;
  double v16;
  double v17;
  unsigned int (*v18)(__n128, __n128, __n128, __n128);
  _QWORD *v19;
  CGFunctionRef Function;
  uint64_t v21;
  double *v22;
  CGContextRef v23;
  CGShading *AxialInternal;

  if (!c)
  {
    v23 = 0;
LABEL_11:
    handle_invalid_context((char)"CGContextDrawLinearGradient", (uint64_t)v23, *(uint64_t *)&options, v5, v6, v7, v8, v9);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v23 = c;
    goto LABEL_11;
  }
  if (gradient)
  {
    v12 = *((_QWORD *)c + 5);
    if (v12)
    {
      y = endPoint.y;
      x = endPoint.x;
      v16 = startPoint.y;
      v17 = startPoint.x;
      v18 = *(unsigned int (**)(__n128, __n128, __n128, __n128))(v12 + 104);
      if (!v18 || v18((__n128)startPoint, *(__n128 *)&startPoint.y, (__n128)endPoint, *(__n128 *)&endPoint.y) == 1006)
      {
        v19 = (_QWORD *)*((_QWORD *)gradient + 3);
        Function = CGGradientGetFunction((uint64_t)gradient, (uint64_t)gradient, *(uint64_t *)&options, v5, v6, v7, v8, v9);
        if (Function)
          v22 = (double *)*((_QWORD *)Function + 5);
        else
          v22 = 0;
        AxialInternal = (CGShading *)CGShadingCreateAxialInternal(v19, 0, 0, v22, Function, options & 1, (options >> 1) & 1, v21, v17, v16, x, y);
        CGContextDrawShading(c, AxialInternal);
        if (AxialInternal)
          CFRelease(AxialInternal);
      }
    }
  }
}

CGFunctionRef CGGradientGetFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGFunctionRef result;
  CFTypeRef *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  const CGFloat *v15;
  const CGFunctionCallbacks *v16;
  char v17;

  if (!a1)
    _CGHandleAssert("CGGradientGetFunction", 396, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/API/CGGradient.c", "g != NULL", "gradient is missing", a6, a7, a8, v17);
  result = *(CGFunctionRef *)(a1 + 32);
  if (!result)
  {
    v10 = (CFTypeRef *)malloc_type_malloc(0x20uLL, 0x2062DE7BuLL);
    v11 = *(const void **)(a1 + 40);
    v10[2] = *(CFTypeRef *)(a1 + 48);
    *v10 = CFRetain(v11);
    v10[3] = CFDataGetBytePtr(*(CFDataRef *)(a1 + 40));
    v12 = *(_QWORD *)(a1 + 24);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 24);
      v14 = *(_QWORD *)(v13 + 40) + 1;
      v10[1] = (CFTypeRef)v14;
      if (*(_BYTE *)(v13 + 13))
        v15 = (const CGFloat *)&create_function_extended_range;
      else
        v15 = (const CGFloat *)&create_function_default_range;
    }
    else
    {
      v14 = 1;
      v10[1] = (CFTypeRef)1;
      v15 = (const CGFloat *)&create_function_default_range;
    }
    if (*(_BYTE *)(a1 + 20))
      v16 = (const CGFunctionCallbacks *)&create_function_premul_callbacks;
    else
      v16 = (const CGFunctionCallbacks *)&create_function_default_callbacks;
    result = CGFunctionCreate(v10, 1uLL, create_function_domain, v14, &v15[10 - 2 * v14], v16);
    *(_QWORD *)(a1 + 32) = result;
    if (!result)
    {
      CFRelease(*v10);
      free(v10);
      return 0;
    }
  }
  return result;
}

void CGContextDrawShading(CGContextRef c, CGShadingRef shading)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  CGContextRef v10;

  if (!c)
  {
    v10 = 0;
LABEL_8:
    handle_invalid_context((char)"CGContextDrawShading", (uint64_t)v10, v2, v3, v4, v5, v6, v7);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v10 = c;
    goto LABEL_8;
  }
  if (shading)
  {
    v8 = *((_QWORD *)c + 5);
    if (v8)
    {
      v9 = *(void (**)(void))(v8 + 96);
      if (v9)
        v9();
    }
  }
}

uint64_t ripc_DrawShading(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  double v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float64x2_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 *v19;
  float64x2_t v21;
  double v22;
  double v23;
  double v24;
  const CGRect *v25;
  CGFloat *p_y;
  CGSize *p_size;
  CGFloat *p_height;
  __n64 v29;
  double v30;
  double v31;
  double v32;
  double v33;
  CGFloat x;
  double v35;
  double width;
  float64x2_t *v37;
  CGFloat y;
  double height;
  uint64_t v40;
  unint64_t v41;
  int v42;
  CGFloat v43;
  CGFloat v44;
  char *Copy;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n64 v52;
  double v53;
  CGFloat v54;
  double v55;
  CGFloat v56;
  double v57;
  CGFloat v58;
  CGFloat v59;
  CGFloat v60;
  CGFloat v61;
  CGFloat v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  float v71;
  float v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v79;
  double v80;
  double v81;
  double v82;
  float v83;
  float v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  float v93;
  float v94;
  float v95;
  float v96;
  double v97;
  double v98;
  double v99;
  __float2 v100;
  double v101;
  float64x2_t v102;
  double v103;
  double v104;
  int v105;
  int v106;
  double v107;
  double v108;
  float v109;
  double v110;
  double v111;
  unsigned int v112;
  float v113;
  unsigned int v114;
  double v115;
  double v117;
  double v118;
  double v121;
  double v122;
  double v126;
  double v128;
  double v130;
  double v131;
  double v132;
  uint64_t v133;
  int v134;
  unsigned int v135;
  CGFloat v136;
  CGFloat v137;
  double v139;
  double v140;
  double v141;
  CGFloat v143;
  unsigned int v145;
  unsigned int v146;
  double v147;
  double v148;
  double v150;
  double v151;
  double v153;
  double v154;
  double v155;
  int v156;
  unsigned int v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v163;
  float v164;
  double v165;
  double v166;
  int v167;
  unsigned int v168;
  double v169;
  int v170;
  double v171;
  double v172;
  float v173;
  _QWORD *v174;
  int v175;
  unint64_t v176;
  double v177;
  double v178;
  CGFloat v179;
  CGFloat v180;
  double v181;
  int v182;
  float64x2_t v183;
  int v184;
  unint64_t v185;
  double v186;
  double v187;
  CGFloat v188;
  CGFloat v189;
  double v190;
  double v191;
  int v192;
  int v193;
  CGFloat v194;
  CGFloat v195;
  unint64_t v196;
  double v197;
  double v198;
  CGFloat v199;
  CGFloat v200;
  double v201;
  double v202;
  double v203;
  double v204;
  int v205;
  _QWORD *v206;
  float64_t v207;
  _UNKNOWN **v208;
  uint64_t v209;
  _UNKNOWN **v210;
  uint32x2_t v211;
  __int128 v212;
  __int128 v213;
  uint64_t v214;
  uint64_t *Entry;
  uint64_t *v216;
  CGFloat v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  float v223;
  float v224;
  uint64_t v225;
  int8x16_t v226;
  int8x16_t v227;
  float v228;
  float v229;
  double v230;
  __n128 v231;
  unint64_t v232;
  float *v233;
  CGFloat v234;
  CGFloat v235;
  float v236;
  float v237;
  unint64_t v238;
  float v239;
  float v240;
  uint64_t v241;
  float *v242;
  float *v243;
  unint64_t v244;
  float *v245;
  float *v246;
  uint64_t v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  unsigned int v258;
  float v259;
  int64x2_t v260;
  float v261;
  uint64_t v262;
  double v263;
  float v264;
  float *v265;
  __n128 v266;
  unint64_t v267;
  float v268;
  unint64_t v269;
  float v270;
  uint64_t v271;
  float *v272;
  float *v273;
  float *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unsigned int v284;
  unsigned int v285;
  __int16 v286;
  __int16 v287;
  uint64_t v288;
  float v289;
  uint64_t v290;
  void *v291;
  double v292;
  _QWORD *Cache;
  __n128 v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  double *v298;
  double *v299;
  size_t v300;
  uint64_t v301;
  void *v302;
  uint64_t v303;
  double v304;
  double v305;
  double v306;
  double v308;
  double v309;
  double v310;
  double v311;
  double v312;
  double v313;
  double v314;
  double v315;
  double v316;
  double v317;
  double v318;
  double v319;
  int v320;
  unsigned int v321;
  double v322;
  unsigned int v323;
  unint64_t *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  double v332;
  uint64_t v333;
  _QWORD *v334;
  _QWORD *v335;
  unint64_t *v336;
  unint64_t v338;
  _QWORD *v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  _QWORD *v343;
  uint64_t v344;
  uint64_t *v345;
  uint64_t *v346;
  __n64 v347;
  __n64 v348;
  __n64 v349;
  __n64 v350;
  __n64 v351;
  __n64 v352;
  __n64 v353;
  __n64 v354;
  double v355;
  double v356;
  double v357;
  double v360;
  double v361;
  double v362;
  unint64_t v363;
  double v364;
  unint64_t v365;
  double v366;
  double v367;
  unint64_t v368;
  double v369;
  double v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  CGFloat v374;
  double v375;
  double v376;
  double v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  CGFloat v381;
  __int128 v382;
  CGFloat v383;
  float64x2_t v384;
  int8x16_t v385;
  uint64_t v386;
  uint64_t v387;
  CGFloat v388;
  double v389;
  CGFloat v390;
  CGFloat v391;
  double *v392;
  float64x2_t v393;
  float64x2_t v394;
  double v395;
  float64x2_t v396;
  unint64_t v397;
  uint64_t v398;
  CGAffineTransform v399;
  float64x2_t v400;
  float64x2_t v401;
  __int128 v402;
  uint64_t v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  float64x2_t *v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  float v412;
  float v413;
  unint64_t v414;
  _DWORD v415[3];
  _BYTE v416[32];
  __int128 v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  int64x2_t v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  uint64_t v425;
  CGAffineTransform v426;
  __int128 v427;
  int v428;
  uint64_t v429;
  CGRect v430;
  CGRect v431;
  CGRect v432;
  CGRect v433;
  CGRect v434;
  CGRect v435;
  CGRect v436;
  CGRect v437;
  CGRect v438;
  CGRect v439;
  CGRect v440;
  CGRect v441;
  CGRect v442;
  CGRect v443;
  CGRect v444;
  CGRect v445;
  CGRect v446;
  CGRect v447;
  CGRect v448;
  CGRect v449;
  CGRect v450;
  CGRect v451;
  CGRect v452;
  CGRect v453;
  CGRect v454;
  CGRect v455;
  CGRect v456;
  CGRect v457;
  CGRect v458;
  CGRect v459;
  CGRect v460;
  CGRect v461;
  CGRect v462;
  CGRect v463;
  CGRect v464;
  CGRect v465;
  CGRect v466;
  CGRect v467;
  CGRect v468;
  CGRect v469;
  CGRect v470;
  CGRect v471;
  CGRect v472;

  v6 = a3;
  v7 = a2;
  v429 = *MEMORY[0x1E0C80C00];
  if (a1)
    v9 = a1[36];
  else
    v9 = 0.0;
  v410 = 0u;
  v411 = 0u;
  v409 = 0u;
  v404 = 0u;
  v405 = 0u;
  v406 = 0u;
  v407 = 0u;
  v408 = 0;
  v403 = 0;
  v400 = 0u;
  v401 = 0u;
  v402 = 0u;
  memset(&v399, 0, sizeof(v399));
  v397 = 0;
  v398 = 0;
  v425 = 0;
  v423 = 0u;
  v424 = 0u;
  v421 = 0u;
  v422 = 0u;
  v419 = 0u;
  v420 = 0u;
  v417 = 0u;
  v418 = 0u;
  memset(v416, 0, sizeof(v416));
  result = ripc_GetRenderingState(*(uint64_t *)&v9, a2, a3, (uint64_t)&v409);
  if (!(_DWORD)result)
    return result;
  v19 = (__int128 *)(v6 + 24);
  _Q16 = *(float64x2_t *)(v6 + 24);
  v21 = *(float64x2_t *)(v6 + 40);
  v23 = *(double *)(v6 + 56);
  v22 = *(double *)(v6 + 64);
  v24 = *(double *)(*(_QWORD *)&v9 + 40);
  if (v24 != 1.0)
  {
    _Q16 = vmulq_n_f64(_Q16, v24);
    v21 = vmulq_n_f64(v21, v24);
    v23 = v23 * v24;
    v22 = v22 * v24;
  }
  if (*(_BYTE *)(a4 + 40))
  {
    v25 = (const CGRect *)(a4 + 48);
    p_y = (CGFloat *)(a4 + 56);
    p_size = (CGSize *)(a4 + 64);
    p_height = (CGFloat *)(a4 + 72);
  }
  else
  {
    v25 = &CGRectInfinite;
    p_height = &CGRectInfinite.size.height;
    p_y = &CGRectInfinite.origin.y;
    p_size = &CGRectInfinite.size;
  }
  v29.n64_f64[0] = (double)SDWORD2(v410);
  v30 = (double)SHIDWORD(v410);
  v31 = (double)(int)v411;
  v32 = (double)SDWORD1(v411);
  v33 = *p_height;
  x = v25->origin.x;
  v35 = *p_y;
  width = p_size->width;
  if (v25->origin.x == -8.98846567e307 && v35 == -8.98846567e307 && width == 1.79769313e308 && v33 == 1.79769313e308)
  {
    v37 = 0;
    v408 = 0;
    y = -8.98846567e307;
    height = 1.79769313e308;
    v40 = 0x7FEFFFFFFFFFFFFFLL;
    *(double *)&v41 = -8.98846567e307;
  }
  else
  {
    v393 = v21;
    v394 = _Q16;
    *(float64x2_t *)&v426.a = _Q16;
    *(float64x2_t *)&v426.c = v21;
    v390 = v23;
    v391 = v22;
    v426.tx = v23;
    v426.ty = v22;
    v388 = (double)SDWORD2(v410);
    v389 = (double)(int)v411;
    v395 = (double)SHIDWORD(v410);
    v396.f64[0] = (double)SDWORD1(v411);
    v52.n64_u64[0] = CGRectApplyInverseAffineTransform(&v426.a, v29, (double)SHIDWORD(v410), v31, (double)SDWORD1(v411)).n64_u64[0];
    v54 = v53;
    v56 = v55;
    v58 = v57;
    v430.origin.x = x;
    v430.origin.y = v35;
    v430.size.width = width;
    v430.size.height = v33;
    v464.origin.x = v52.n64_f64[0];
    v464.origin.y = v54;
    v464.size.width = v56;
    v464.size.height = v58;
    v431 = CGRectIntersection(v430, v464);
    v59 = v431.origin.x;
    result = 0;
    if (v431.origin.x == INFINITY)
      return result;
    y = v431.origin.y;
    if (v431.origin.y == INFINITY)
      return result;
    v60 = v431.size.width;
    result = 0;
    if (v431.size.width == 0.0)
      return result;
    height = v431.size.height;
    if (v431.size.height == 0.0)
      return result;
    v432.origin.x = v52.n64_f64[0];
    v432.origin.y = v54;
    v432.size.width = v56;
    v432.size.height = v58;
    v61 = v59;
    v62 = y;
    v63 = height;
    v64 = v60;
    if (CGRectContainsRect(v432, *(CGRect *)&v59))
    {
      v37 = 0;
      v408 = 0;
      v30 = v395;
      v32 = v396.f64[0];
      v29.n64_f64[0] = v388;
      v31 = v389;
      v21 = v393;
      _Q16 = v394;
      v23 = v390;
      v22 = v391;
      v40 = *(_QWORD *)&v64;
    }
    else
    {
      v136 = v64;
      *(double *)v385.i64 = v64;
      v137 = v61;
      if (v64 < 0.0 || (_D0 = v61, v139 = y, v140 = v64, v141 = height, height < 0.0))
      {
        v433.origin.x = v61;
        v433.origin.y = y;
        v433.size.width = v64;
        v433.size.height = height;
        *(CGRect *)&_D0 = CGRectStandardize(v433);
        v137 = v61;
        v136 = *(double *)v385.i64;
      }
      v386 = v6;
      _V6.D[1] = v394.f64[1];
      v143 = v390 + vmlad_n_f64(v139 * v393.f64[0], _D0, v394.f64[0]);
      __asm { FMLA            D1, D0, V6.D[1] }
      v400 = vmlaq_n_f64(vmulq_f64(v393, (float64x2_t)0), v394, v140);
      v401 = vmlaq_f64(vmulq_n_f64(v393, v141), (float64x2_t)0, v394);
      *(CGFloat *)&v402 = v143;
      *((double *)&v402 + 1) = _D1 + v391;
      v408 = &v400;
      *(float64x2_t *)&v426.a = v394;
      *(float64x2_t *)&v426.c = v393;
      v426.tx = v390;
      v426.ty = v391;
      v434.origin.x = v137;
      v434.origin.y = y;
      v434.size.width = v136;
      v434.size.height = height;
      *(CGRect *)((char *)&v14 - 24) = CGRectApplyAffineTransform(v434, &v426);
      v29.n64_u64[0] = *(unint64_t *)&v435.origin.x;
      v30 = v435.origin.y;
      v32 = v14.f64[0];
      if (v31 < 0.0 || v14.f64[0] < 0.0)
      {
        v234 = v31;
        v235 = v435.origin.x;
        v145 = vcvtmd_s64_f64(COERCE_DOUBLE(CGRectStandardize(*(CGRect *)((char *)&v14 - 24))) + 0.00390625);
        v454.origin.x = v235;
        v454.origin.y = v30;
        v454.size.width = v234;
        v454.size.height = v32;
        v455 = CGRectStandardize(v454);
        v146 = vcvtpd_s64_f64(v455.origin.x + v455.size.width + -0.00390625);
        v455.origin.x = v235;
        v455.origin.y = v30;
        v455.size.width = v234;
        v455.size.height = v32;
        v456 = CGRectStandardize(v455);
        LODWORD(v6) = vcvtmd_s64_f64(v456.origin.y + 0.00390625);
        v456.origin.x = v235;
        v456.origin.y = v30;
        v456.size.width = v234;
        v456.size.height = v32;
        *(CGRect *)((char *)&v14 - 24) = CGRectStandardize(v456);
        v29.n64_f64[0] = v235;
        v31 = v234;
      }
      else
      {
        v145 = vcvtmd_s64_f64(v435.origin.x + 0.00390625);
        v146 = vcvtpd_s64_f64(v435.origin.x + v31 + -0.00390625);
        LODWORD(v6) = vcvtmd_s64_f64(v435.origin.y + 0.00390625);
      }
      v397 = v145 | (unint64_t)(v6 << 32);
      LODWORD(v398) = v146 - v145;
      HIDWORD(v398) = vcvtpd_s64_f64(v435.origin.y + v14.f64[0] + -0.00390625) - v6;
      v37 = &v400;
      v6 = v386;
      v21 = v393;
      _Q16 = v394;
      v23 = v390;
      v22 = v391;
      v40 = v385.i64[0];
    }
    *(double *)&v41 = v61;
  }
  v42 = *(_DWORD *)(*(_QWORD *)(v6 + 120) + 4);
  switch(*(_DWORD *)(a4 + 20))
  {
    case 0:
      v43 = v31;
      v44 = v29.n64_f64[0];
      Copy = CGGStateCreateCopy(v6);
      *(CGAffineTransform *)(Copy + 24) = CGAffineTransformIdentity;
      CGGStateClipToRect((uint64_t)Copy, v44, v30, v43, v32);
      v46 = *v19;
      v47 = v19[1];
      *(_OWORD *)(Copy + 56) = v19[2];
      *(_OWORD *)(Copy + 40) = v47;
      *(_OWORD *)(Copy + 24) = v46;
      CGShadingDrawInContextDelegate(a4, a1, v7, (uint64_t)Copy, v48, v49, v50, v51);
      CGGStateRelease((uint64_t)Copy);
      return 0;
    case 1:
      v395 = v30;
      v396.f64[0] = v32;
      v66 = *(double *)(a4 + 120);
      v65 = *(double *)(a4 + 128);
      v67 = *(double *)(a4 + 144) - v66;
      v68 = *(double *)(a4 + 152) - v65;
      v69 = *(double *)(a4 + 168);
      v70 = *(double *)(a4 + 176);
      v71 = v69;
      v72 = v70;
      v412 = v71;
      v413 = v72;
      v414 = 0x3F80000000000000;
      v73 = v70 - v69;
      if (v67 == 0.0 && v68 == 0.0)
      {
        v74 = 1.0;
        v75 = 0.0;
        v76 = 1.0;
      }
      else
      {
        v76 = sqrt(v68 * v68 + v67 * v67);
        v74 = v67 / v76;
        v75 = v68 / v76;
      }
      v147 = v76 / v73;
      *(double *)&v16 = v74 * v147;
      *(double *)&v17 = v75 * v147;
      *(double *)&v18 = -(v75 * v147);
      v148 = -(v69 * v147);
      _D10 = v66 + v148 * v74;
      v150 = v65 + v148 * v75;
      v151 = v23 + vmlad_n_f64(v150 * v21.f64[0], _D10, _Q16.f64[0]);
      __asm { FMLA            D0, D10, V16.D[1] }
      v153 = _D0 + v22;
      v14 = vmlaq_n_f64(vmulq_n_f64(v21, *(double *)&v17), _Q16, *(double *)&v16);
      *(float64x2_t *)&v399.a = v14;
      *(float64x2_t *)&v399.c = vmlaq_n_f64(vmulq_n_f64(v21, *(double *)&v16), _Q16, *(double *)&v18);
      v399.tx = v151;
      v399.ty = _D0 + v22;
      v392 = *(double **)(a4 + 32);
      if (v392 || *(_BYTE *)(a4 + 136) || *(_BYTE *)(a4 + 160))
      {
        v155 = v395;
        v154 = v396.f64[0];
      }
      else
      {
        v379 = v18;
        v380 = v17;
        v382 = v16;
        v384 = v14;
        v383 = v70 - v69;
        v381 = *(double *)&v41;
        v385.i64[0] = v40;
        v390 = v23;
        v391 = v22;
        v393 = v21;
        v394 = _Q16;
        v426 = v399;
        v388 = v29.n64_f64[0];
        v389 = v31;
        v347.n64_u64[0] = CGRectApplyInverseAffineTransform(&v426.a, v29, v395, v31, v396.f64[0]).n64_u64[0];
        result = 0;
        if (v347.n64_f64[0] > v70 || v347.n64_f64[0] + v349.n64_f64[0] < v69)
          return result;
        v467.origin.x = v69;
        v467.origin.y = v348.n64_f64[0];
        v467.size.width = v383;
        v467.size.height = v350.n64_f64[0];
        v457 = CGRectIntersection(*(CGRect *)v347.n64_u64, v467);
        if (v37)
        {
          *(_QWORD *)&v426.a = v382;
          *(_QWORD *)&v426.b = v380;
          *(_QWORD *)&v426.c = v379;
          *(_QWORD *)&v426.d = v382;
          v426.tx = _D10;
          v426.ty = v150;
          v468 = CGRectApplyAffineTransform(v457, &v426);
          v458.origin.x = v381;
          v458.origin.y = y;
          *(_QWORD *)&v458.size.width = v385.i64[0];
          v458.size.height = height;
          v457 = CGRectIntersection(v458, v468);
          *(float64x2_t *)&v426.a = v394;
          *(float64x2_t *)&v426.c = v393;
          v426.tx = v390;
          v426.ty = v391;
        }
        else
        {
          v426 = v399;
        }
        v471 = CGRectApplyAffineTransform(v457, &v426);
        v462.origin.x = v388;
        v462.size.width = v389;
        v462.origin.y = v395;
        v462.size.height = v396.f64[0];
        *(CGRect *)(&v31 - 2) = CGRectIntersection(v462, v471);
        v29.n64_u64[0] = v365;
        v155 = v366;
        v154 = v367;
        v73 = v383;
        v14 = v384;
      }
      v133 = v6;
      if (v31 < 0.0 || v154 < 0.0)
      {
        v176 = v29.n64_u64[0];
        v177 = v155;
        v384 = v14;
        v178 = v154;
        v179 = v31;
        v180 = v29.n64_f64[0];
        v181 = v73;
        v156 = vcvtmd_s64_f64(COERCE_DOUBLE(CGRectStandardize(*(CGRect *)(&v31 - 2))) + 0.00390625);
        v440.origin.x = v180;
        v440.origin.y = v155;
        v440.size.width = v179;
        v440.size.height = v154;
        v441 = CGRectStandardize(v440);
        v157 = vcvtpd_s64_f64(v441.origin.x + v441.size.width + -0.00390625);
        v441.origin.x = v180;
        v441.origin.y = v155;
        v441.size.width = v179;
        v441.size.height = v154;
        v442 = CGRectStandardize(v441);
        LODWORD(v6) = vcvtmd_s64_f64(v442.origin.y + 0.00390625);
        v442.origin.x = v180;
        v442.origin.y = v155;
        v442.size.width = v179;
        v442.size.height = v154;
        v443 = CGRectStandardize(v442);
        v73 = v181;
        v155 = v443.origin.y;
        v154 = v443.size.height;
        v14 = v384;
      }
      else
      {
        v156 = vcvtmd_s64_f64(v29.n64_f64[0] + 0.00390625);
        v157 = vcvtpd_s64_f64(v29.n64_f64[0] + v31 + -0.00390625);
        LODWORD(v6) = vcvtmd_s64_f64(v155 + 0.00390625);
      }
      v182 = vcvtpd_s64_f64(v155 + v154 + -0.00390625);
      *(_QWORD *)&v404 = v156 | (unint64_t)(v6 << 32);
      DWORD2(v404) = v157 - v156;
      HIDWORD(v404) = v182 - v6;
      v399.tx = v151 - (double)v156;
      v399.ty = (double)v182 - v153;
      v183 = *(float64x2_t *)&v399.b;
      *(float64x2_t *)&v399.b = vnegq_f64(*(float64x2_t *)&v399.b);
      *(_QWORD *)&v407 = &v399;
      *((_QWORD *)&v405 + 1) = 0;
      *(_QWORD *)&v406 = 0;
      *(_QWORD *)&v405 = &v412;
      v184 = *(unsigned __int8 *)(a4 + 136);
      DWORD2(v406) = v184;
      if (*(_BYTE *)(a4 + 160))
        DWORD2(v406) = v184 | 2;
      v174 = (_QWORD *)(a4 + 184);
LABEL_72:
      *(_QWORD *)&v14.f64[0] = vcvtpd_s64_f64(fabs(v73) * sqrt(vmlad_n_f64(vmulq_f64(v183, v183).f64[0], v14.f64[0], v14.f64[0]))) | 0x100000000;
      goto LABEL_81;
    case 2:
      v395 = v30;
      v396.f64[0] = v32;
      _D14 = *(double *)(a4 + 120);
      v77 = *(double *)(a4 + 128);
      v79 = *(double *)(a4 + 152) - _D14;
      v80 = *(double *)(a4 + 160) - v77;
      v81 = *(double *)(a4 + 184);
      v82 = *(double *)(a4 + 192);
      v83 = v81;
      v84 = v82;
      v412 = v83;
      v413 = v84;
      v85 = *(double *)(a4 + 136);
      v86 = *(double *)(a4 + 168);
      v73 = v82 - v81;
      v414 = 0x3F80000000000000;
      if (v79 == 0.0 && v80 == 0.0)
      {
        v87 = 1.0;
        v88 = 0.0;
        v89 = 0.0;
        v90 = vabdd_f64(v86, v85) / v73;
      }
      else
      {
        v158 = sqrt(v80 * v80 + v79 * v79);
        v87 = v79 / v158;
        v89 = v80 / v158;
        v90 = (v158 + vabdd_f64(v86, v85)) / v73;
        v88 = v158 / v90;
      }
      v159 = v85 / v90;
      v160 = v86 / v90;
      *(double *)&v15 = v87 * v90;
      *(double *)&v17 = v89 * v90;
      *(double *)&v16 = -(v89 * v90);
      v161 = v23 + vmlad_n_f64(v77 * v21.f64[0], _D14, _Q16.f64[0]);
      __asm { FMLA            D0, D14, V16.D[1] }
      v163 = _D0 + v22;
      v14 = vmlaq_n_f64(vmulq_n_f64(v21, *(double *)&v17), _Q16, *(double *)&v15);
      *(float64x2_t *)&v399.a = v14;
      *(float64x2_t *)&v399.c = vmlaq_n_f64(vmulq_n_f64(v21, *(double *)&v15), _Q16, *(double *)&v16);
      v399.tx = v161;
      v399.ty = _D0 + v22;
      *(float *)&_D0 = v159;
      v164 = v88;
      v415[0] = LODWORD(_D0);
      *(float *)&v415[1] = v164;
      *(float *)&_D0 = v160;
      v415[2] = LODWORD(_D0);
      v392 = *(double **)(a4 + 32);
      if (v392 || *(_BYTE *)(a4 + 144) || *(_BYTE *)(a4 + 176))
      {
        v166 = v395;
        v165 = v396.f64[0];
      }
      else
      {
        v378 = v16;
        v379 = v17;
        v380 = v15;
        v381 = *(double *)&v41;
        *(double *)&v382 = v161;
        v384 = v14;
        v383 = v73;
        v385.i64[0] = v40;
        v390 = v23;
        v391 = v22;
        v393 = v21;
        v394 = _Q16;
        v426 = v399;
        v388 = v29.n64_f64[0];
        v389 = v31;
        v351.n64_u64[0] = CGRectApplyInverseAffineTransform(&v426.a, v29, v395, v31, v396.f64[0]).n64_u64[0];
        v355 = -v159;
        if (v159 <= v88 + v160)
          v356 = v88 + v160;
        else
          v356 = v159;
        if (v88 - v160 < v355)
          v355 = v88 - v160;
        if (v160 <= v159)
          v357 = v159;
        else
          v357 = v160;
        if (v351.n64_f64[0] > v356 || v351.n64_f64[0] + v353.n64_f64[0] < v355 || v352.n64_f64[0] > v357)
          return 0;
        v360 = -v357;
        if (v352.n64_f64[0] + v354.n64_f64[0] < -v357)
          return 0;
        v361 = v356 - v355;
        v362 = v357 + v357;
        v459 = CGRectIntersection(*(CGRect *)v351.n64_u64, *(CGRect *)&v355);
        if (v37)
        {
          *(_QWORD *)&v426.a = v380;
          *(_QWORD *)&v426.b = v379;
          *(_QWORD *)&v426.c = v378;
          *(_QWORD *)&v426.d = v380;
          v426.tx = _D14;
          v426.ty = v77;
          v469 = CGRectApplyAffineTransform(v459, &v426);
          v460.origin.x = v381;
          v460.origin.y = y;
          *(_QWORD *)&v460.size.width = v385.i64[0];
          v460.size.height = height;
          v459 = CGRectIntersection(v460, v469);
          *(float64x2_t *)&v426.a = v394;
          *(float64x2_t *)&v426.c = v393;
          v426.tx = v390;
          v426.ty = v391;
        }
        else
        {
          v426 = v399;
        }
        v472 = CGRectApplyAffineTransform(v459, &v426);
        v463.origin.x = v388;
        v463.size.width = v389;
        v463.origin.y = v395;
        v463.size.height = v396.f64[0];
        *(CGRect *)(&v31 - 2) = CGRectIntersection(v463, v472);
        v29.n64_u64[0] = v368;
        v166 = v369;
        v165 = v370;
        v73 = v383;
        v14 = v384;
        v161 = *(double *)&v382;
      }
      v133 = v6;
      if (v31 < 0.0 || v165 < 0.0)
      {
        v185 = v29.n64_u64[0];
        v186 = v166;
        v384 = v14;
        v187 = v165;
        v188 = v31;
        v189 = v29.n64_f64[0];
        v190 = v73;
        v191 = v161;
        v167 = vcvtmd_s64_f64(COERCE_DOUBLE(CGRectStandardize(*(CGRect *)(&v31 - 2))) + 0.00390625);
        v444.origin.x = v189;
        v444.origin.y = v166;
        v444.size.width = v188;
        v444.size.height = v165;
        v445 = CGRectStandardize(v444);
        v168 = vcvtpd_s64_f64(v445.origin.x + v445.size.width + -0.00390625);
        v445.origin.x = v189;
        v445.origin.y = v166;
        v445.size.width = v188;
        v445.size.height = v165;
        v446 = CGRectStandardize(v445);
        LODWORD(v6) = vcvtmd_s64_f64(v446.origin.y + 0.00390625);
        v446.origin.x = v189;
        v446.origin.y = v166;
        v446.size.width = v188;
        v446.size.height = v165;
        v447 = CGRectStandardize(v446);
        v161 = v191;
        v73 = v190;
        v166 = v447.origin.y;
        v165 = v447.size.height;
        v14 = v384;
      }
      else
      {
        v167 = vcvtmd_s64_f64(v29.n64_f64[0] + 0.00390625);
        v168 = vcvtpd_s64_f64(v29.n64_f64[0] + v31 + -0.00390625);
        LODWORD(v6) = vcvtmd_s64_f64(v166 + 0.00390625);
      }
      v192 = vcvtpd_s64_f64(v166 + v165 + -0.00390625);
      *(_QWORD *)&v404 = v167 | (unint64_t)(v6 << 32);
      DWORD2(v404) = v168 - v167;
      HIDWORD(v404) = v192 - v6;
      v399.tx = v161 - (double)v167;
      v399.ty = (double)v192 - v163;
      v183 = *(float64x2_t *)&v399.b;
      *(float64x2_t *)&v399.b = vnegq_f64(*(float64x2_t *)&v399.b);
      *(_QWORD *)&v407 = &v399;
      *(_QWORD *)&v405 = &v412;
      *((_QWORD *)&v405 + 1) = v415;
      *(_QWORD *)&v406 = 0;
      v193 = *(unsigned __int8 *)(a4 + 144);
      DWORD2(v406) = v193;
      if (*(_BYTE *)(a4 + 176))
        DWORD2(v406) = v193 | 2;
      v174 = (_QWORD *)(a4 + 200);
      goto LABEL_72;
    case 3:
      v91 = v29.n64_f64[0];
      v92 = *(double *)(a4 + 136);
      v93 = *(double *)(a4 + 144);
      v94 = *(double *)(a4 + 152);
      v412 = v93;
      v413 = v94;
      v414 = 0x3F80000000000000;
      v95 = v94 - v93;
      v96 = v92;
      *(float *)v415 = v96;
      v392 = *(double **)(a4 + 32);
      v97 = v31;
      v393 = v21;
      v394 = _Q16;
      v98 = v22;
      v99 = v23;
      v100 = __sincosf_stret(v96);
      v101 = (float)-v100.__sinval;
      v102 = *(float64x2_t *)(a4 + 120);
      v103 = v99 + vmlad_n_f64(vmuld_lane_f64(v393.f64[0], v102, 1), v394.f64[0], v102.f64[0]);
      v104 = vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(v393, v102).f64[1]), v394.f64[1], v102.f64[0]) + v98;
      v14 = vmlaq_n_f64(vmulq_n_f64(v393, v101), v394, (float)-v100.__cosval);
      *(float64x2_t *)&v399.a = v14;
      *(float64x2_t *)&v399.c = vmlaq_n_f64(vmulq_n_f64(v393, v100.__cosval), v394, v101);
      if (v97 < 0.0 || v32 < 0.0)
      {
        v436.origin.x = v91;
        v436.origin.y = v30;
        v436.size.width = v97;
        v436.size.height = v32;
        v105 = vcvtmd_s64_f64(COERCE_DOUBLE(CGRectStandardize(v436)) + 0.00390625);
        v437.origin.x = v91;
        v437.origin.y = v30;
        v437.size.width = v97;
        v437.size.height = v32;
        v438 = CGRectStandardize(v437);
        v106 = vcvtpd_s64_f64(v438.origin.x + v438.size.width + -0.00390625);
        v438.origin.x = v91;
        v438.origin.y = v30;
        v438.size.width = v97;
        v438.size.height = v32;
        v439 = CGRectStandardize(v438);
        LODWORD(v4) = vcvtmd_s64_f64(v439.origin.y + 0.00390625);
        v439.origin.x = v91;
        v439.origin.y = v30;
        v439.size.width = v97;
        v439.size.height = v32;
        *(CGRect *)((char *)&v14 - 24) = CGRectStandardize(v439);
        v30 = v169;
        v32 = v14.f64[0];
      }
      else
      {
        v105 = vcvtmd_s64_f64(v91 + 0.00390625);
        v106 = vcvtpd_s64_f64(v91 + v97 + -0.00390625);
        LODWORD(v4) = vcvtmd_s64_f64(v30 + 0.00390625);
      }
      v170 = vcvtpd_s64_f64(v30 + v32 + -0.00390625);
      *(_QWORD *)&v404 = v105 | (unint64_t)(v4 << 32);
      DWORD2(v404) = v106 - v105;
      HIDWORD(v404) = v170 - v4;
      v399.tx = v103 - (double)v105;
      v399.ty = (double)v170 - v104;
      *(float64x2_t *)&v399.b = vnegq_f64(*(float64x2_t *)&v399.b);
      v171 = ((double)(int)v4 - v399.ty) * ((double)(int)v4 - v399.ty);
      v172 = ((double)v170 - v399.ty) * ((double)v170 - v399.ty);
      v173 = fmax(fmax(v171 + ((double)v105 - v399.tx) * ((double)v105 - v399.tx), v171 + ((double)v106 - v399.tx) * ((double)v106 - v399.tx)), fmax(v172 + ((double)v105 - v399.tx) * ((double)v105 - v399.tx), v172 + ((double)v106 - v399.tx) * ((double)v106 - v399.tx)));
      *(_QWORD *)&v407 = &v399;
      *(_QWORD *)&v405 = &v412;
      *((_QWORD *)&v405 + 1) = 0;
      *(_QWORD *)&v406 = v415;
      DWORD2(v406) = 0;
      v174 = (_QWORD *)(a4 + 160);
      v175 = vcvtpd_s64_f64(fabsf(v95) * (float)(sqrtf(v173) * 3.1416));
      if (v175 <= 128)
        v175 = 128;
      *(_QWORD *)&v14.f64[0] = v175 | 0x100000000;
      goto LABEL_82;
    case 4:
      v395 = v30;
      v396.f64[0] = v32;
      v108 = *(double *)(a4 + 120);
      v107 = *(double *)(a4 + 128);
      v109 = v108;
      v111 = *(double *)(a4 + 136);
      v110 = *(double *)(a4 + 144);
      *(float *)&v112 = v111;
      v113 = v107;
      v412 = v109;
      v413 = v113;
      *(float *)&v114 = v110;
      v414 = __PAIR64__(v114, v112);
      v115 = v107 - v108;
      v14.f64[0] = v110 - v111;
      _D1 = *(double *)(a4 + 160);
      v117 = *(double *)(a4 + 168);
      _D25 = *(double *)(a4 + 176);
      v118 = *(double *)(a4 + 184);
      _D26 = *(double *)(a4 + 192);
      v121 = *(double *)(a4 + 200);
      v122 = vmlad_n_f64(v117 * v21.f64[0], _D1, _Q16.f64[0]);
      __asm { FMLA            D6, D1, V16.D[1] }
      v126 = vmlad_n_f64(v118 * v21.f64[0], _D25, _Q16.f64[0]);
      __asm { FMLA            D22, D25, V16.D[1] }
      v128 = v23 + vmlad_n_f64(v121 * v21.f64[0], _D26, _Q16.f64[0]);
      __asm { FMLA            D0, D26, V16.D[1] }
      v130 = _D0 + v22;
      v399.a = v122;
      v399.b = _D6;
      v399.c = v126;
      v399.d = _D22;
      v399.tx = v128;
      v399.ty = _D0 + v22;
      v392 = *(double **)(a4 + 32);
      if (v392)
      {
        v132 = v395;
        v131 = v396.f64[0];
      }
      else
      {
        v377 = v126;
        *(double *)&v378 = v121;
        *(double *)&v379 = _D26;
        *(double *)&v380 = _D25;
        v374 = _D1;
        v375 = _D0 + v22;
        v376 = v128;
        v381 = *(double *)&v41;
        *(double *)&v382 = _D22;
        v383 = v122;
        v384.f64[0] = _D6;
        v385.i64[0] = v40;
        v390 = v23;
        v391 = v22;
        v393 = v21;
        v394 = _Q16;
        v426 = v399;
        v388 = v29.n64_f64[0];
        v389 = v31;
        v194 = v14.f64[0];
        v448.origin.x = CGRectApplyInverseAffineTransform(&v426.a, v29, v395, v31, v396.f64[0]).n64_f64[0];
        v465.origin.x = v108;
        v465.origin.y = v111;
        v465.size.width = v115;
        v195 = v194;
        v465.size.height = v194;
        v449 = CGRectIntersection(v448, v465);
        result = 0;
        if (v449.origin.x == INFINITY)
          return result;
        if (v449.origin.y == INFINITY)
          return result;
        result = 0;
        if (v449.size.width == 0.0 || v449.size.height == 0.0)
          return result;
        if (v37)
        {
          v426.a = v374;
          v426.b = v117;
          *(_QWORD *)&v426.c = v380;
          v426.d = v118;
          *(_QWORD *)&v426.tx = v379;
          *(_QWORD *)&v426.ty = v378;
          v466 = CGRectApplyAffineTransform(v449, &v426);
          v450.origin.x = v381;
          v450.origin.y = y;
          *(_QWORD *)&v450.size.width = v385.i64[0];
          v450.size.height = height;
          v449 = CGRectIntersection(v450, v466);
          *(float64x2_t *)&v426.a = v394;
          *(float64x2_t *)&v426.c = v393;
          v426.tx = v390;
          v426.ty = v391;
        }
        else
        {
          v426 = v399;
        }
        v470 = CGRectApplyAffineTransform(v449, &v426);
        v461.origin.x = v388;
        v461.size.width = v389;
        v461.origin.y = v395;
        v461.size.height = v396.f64[0];
        *(CGRect *)((char *)&v14 - 24) = CGRectIntersection(v461, v470);
        v29.n64_u64[0] = v363;
        v132 = v364;
        v131 = v14.f64[0];
        v14.f64[0] = v195;
        v122 = v383;
        _D6 = v384.f64[0];
        _D22 = *(double *)&v382;
        v128 = v376;
        v126 = v377;
        v130 = v375;
      }
      v133 = v6;
      if (v31 < 0.0 || v131 < 0.0)
      {
        v196 = v29.n64_u64[0];
        v197 = v132;
        v395 = v115;
        v396.f64[0] = v14.f64[0];
        v198 = v131;
        v199 = v31;
        v200 = v29.n64_f64[0];
        v383 = v122;
        v384.f64[0] = _D6;
        *(double *)&v382 = _D22;
        v201 = v126;
        v202 = v128;
        v203 = v130;
        v134 = vcvtmd_s64_f64(COERCE_DOUBLE(CGRectStandardize(*(CGRect *)(&v31 - 2))) + 0.00390625);
        v451.origin.x = v200;
        v451.origin.y = v132;
        v451.size.width = v199;
        v451.size.height = v131;
        v452 = CGRectStandardize(v451);
        v135 = vcvtpd_s64_f64(v452.origin.x + v452.size.width + -0.00390625);
        v452.origin.x = v200;
        v452.origin.y = v132;
        v452.size.width = v199;
        v452.size.height = v131;
        v453 = CGRectStandardize(v452);
        LODWORD(v6) = vcvtmd_s64_f64(v453.origin.y + 0.00390625);
        v453.origin.x = v200;
        v453.origin.y = v132;
        v453.size.width = v199;
        v453.size.height = v131;
        *(CGRect *)((char *)&v14 - 24) = CGRectStandardize(v453);
        v130 = v203;
        v128 = v202;
        v126 = v201;
        _D22 = *(double *)&v382;
        v122 = v383;
        _D6 = v384.f64[0];
        v132 = v204;
        v131 = v14.f64[0];
        v14.f64[0] = v396.f64[0];
      }
      else
      {
        v134 = vcvtmd_s64_f64(v29.n64_f64[0] + 0.00390625);
        v135 = vcvtpd_s64_f64(v29.n64_f64[0] + v31 + -0.00390625);
        LODWORD(v6) = vcvtmd_s64_f64(v132 + 0.00390625);
      }
      v205 = vcvtpd_s64_f64(v132 + v131 + -0.00390625);
      *(_QWORD *)&v404 = v134 | (unint64_t)(v6 << 32);
      DWORD2(v404) = v135 - v134;
      HIDWORD(v404) = v205 - v6;
      v399.tx = v128 - (double)v134;
      v399.ty = (double)v205 - v130;
      v399.b = -_D6;
      v399.d = -_D22;
      *(_QWORD *)&v407 = &v399;
      v174 = (_QWORD *)(a4 + 152);
      *((_QWORD *)&v405 + 1) = 0;
      *(_QWORD *)&v406 = 0;
      *(_QWORD *)&v405 = &v412;
      DWORD2(v406) = 0;
      *(_QWORD *)&v14.f64[0] = __PAIR64__(vcvtpd_s64_f64(sqrt(v14.f64[0] * _D22 * (v14.f64[0] * _D22) + v14.f64[0]* v126* (v14.f64[0]* v126))), vcvtpd_s64_f64(sqrt(v115 * _D6 * (v115 * _D6) + v115 * v122 * (v115 * v122))));
LABEL_81:
      v6 = v133;
LABEL_82:
      v206 = (_QWORD *)*v174;
      v207 = *(double *)(a4 + 24);
      *(_QWORD *)&v417 = 0;
      DWORD1(v418) = 0;
      v208 = &CGColorMatrixGetTypeID_f;
      if (RIPGetCacheState_predicate != -1)
      {
        v396 = v14;
        dispatch_once(&RIPGetCacheState_predicate, &__block_literal_global_9_12336);
        v14 = v396;
      }
      v209 = (v42 << 12 >> 28);
      v210 = &CGColorMatrixGetTypeID_f;
      if (!*(_BYTE *)(RIPGetCacheState_cache_state + 32))
        goto LABEL_92;
      v211 = vmin_u32(*(uint32x2_t *)&v14.f64[0], (uint32x2_t)0x100000001000);
      *(_QWORD *)&v212 = v211.u32[0];
      *((_QWORD *)&v212 + 1) = v211.u32[1];
      v213 = v212;
      v396 = v14;
      if (v206)
        v214 = v206[12];
      else
        v214 = 0;
      *(_QWORD *)&v426.a = MEMORY[0x1E0C809B0];
      *(_QWORD *)&v426.b = 0x40000000;
      *(_QWORD *)&v426.c = __lookup_function_entry_block_invoke;
      *(_QWORD *)&v426.d = &__block_descriptor_tmp_6705;
      v426.tx = v9;
      *(_QWORD *)&v426.ty = &v412;
      v427 = v213;
      v428 = v209;
      Entry = RIPDataGetEntry(*(uint64_t *)&v9, v214, 0, (uint64_t)&v426);
      if (Entry)
      {
        v216 = Entry;
        *(_QWORD *)&v217 = Entry + 8;
LABEL_146:
        *((CGFloat *)&v407 + 1) = v217;
        if (*(_BYTE *)(v7 + 81) && (*(_BYTE *)(*(_QWORD *)(v6 + 120) + 7) & 1) != 0)
        {
          *(_WORD *)(*(_QWORD *)&v9 + 108) = *(_WORD *)(*(_QWORD *)&v9 + 108) | 0xFF00;
          v286 = -256;
        }
        else
        {
          v286 = 0;
          *(_WORD *)(*(_QWORD *)&v9 + 108) = *(unsigned __int8 *)(*(_QWORD *)&v9 + 108);
        }
        v287 = v286 | *(unsigned __int8 *)(v7 + 82);
        *(_WORD *)(*(_QWORD *)&v9 + 108) = v287;
        *(_DWORD *)(*(_QWORD *)&v9 + 112) = v209;
        v288 = *(_QWORD *)(v6 + 120);
        *(_DWORD *)(*(_QWORD *)&v9 + 104) = (int)(*(_DWORD *)(v288 + 4) << 16) >> 24;
        v289 = *(double *)(v288 + 8);
        *(double *)(*(_QWORD *)&v9 + 152) = v289;
        if (!v392)
        {
          v291 = 0;
LABEL_172:
          if ((_BYTE)v287 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)&v9 + 48) + 29) & 2) != 0)
          {
            v303 = *(_QWORD *)(v6 + 120);
            v304 = *(double *)(v303 + 24);
            v305 = *(double *)(v303 + 32);
            v306 = *(double *)(*(_QWORD *)&v9 + 40);
            _ZF = v306 == 1.0;
            v308 = *(double *)(v7 + 24) * v306;
            v309 = *(double *)(v7 + 32) * v306;
            v310 = *(double *)(v7 + 40) * v306;
            v311 = *(double *)(v7 + 48) * v306;
            v312 = *(double *)(v7 + 56) * v306;
            v313 = *(double *)(v7 + 64) * v306;
            if (_ZF)
            {
              v308 = *(double *)(v7 + 24);
              v314 = *(double *)(v7 + 32);
            }
            else
            {
              v314 = v309;
            }
            if (_ZF)
              v315 = *(double *)(v7 + 40);
            else
              v315 = v310;
            if (_ZF)
              v316 = *(double *)(v7 + 48);
            else
              v316 = v311;
            if (_ZF)
              v317 = *(double *)(v7 + 56);
            else
              v317 = v312;
            if (_ZF)
              v318 = *(double *)(v7 + 64);
            else
              v318 = v313;
            v319 = v305 * v315 + v308 * v304 + v317;
            if (v319 <= 1073741820.0)
            {
              v321 = vcvtmd_s64_f64(v319);
              if (v319 >= -1073741820.0)
                v320 = v321;
              else
                v320 = -1073741823;
            }
            else
            {
              v320 = 0x3FFFFFFF;
            }
            LODWORD(v403) = v320;
            v322 = v305 * v316 + v314 * v304 + v318;
            if (v322 <= 1073741820.0)
            {
              if (v322 >= -1073741820.0)
                v323 = vcvtmd_s64_f64(v322);
              else
                v323 = -1073741823;
            }
            else
            {
              v323 = 0x3FFFFFFF;
            }
            HIDWORD(v403) = v323;
          }
          else
          {
            v403 = 0;
          }
          if (*((_QWORD *)&v411 + 1) && (*(_BYTE *)(*((_QWORD *)&v411 + 1) + 12) & 0x80) != 0)
          {
            (*(void (**)(void))(**((_QWORD **)&v411 + 1) + 80))();
          }
          else
          {
            if (v408)
              v324 = &v397;
            else
              v324 = 0;
            RIPLayerBltShade(*(_QWORD *)(*(_QWORD *)&v9 + 48), v409, (uint64_t)v324, (uint64_t)&v404, (uint64_t)v291, *(_QWORD *)&v9 + 104, v12, v13);
          }
          free(v291);
          v332 = v9;
          if (v208[2] != (_UNKNOWN *)-1)
            dispatch_once(&RIPGetCacheState_predicate, &__block_literal_global_9_12336);
          if (!*((_BYTE *)v210[1] + 32) || (v333 = v216[5]) == 0)
          {
            free((void *)v216[16]);
            free((void *)v216[17]);
            return 0;
          }
          v334 = (_QWORD *)v216[4];
          if (!v334)
          {
            v335 = RIPDataCreate(v216[5], v325, v326, v327, v328, v329, v330, v331);
            v334 = v335;
            v336 = (unint64_t *)(v333 + 96);
            while (!__ldxr(v336))
            {
              if (!__stxr((unint64_t)v335, v336))
                goto LABEL_220;
            }
            __clrex();
LABEL_220:
            v338 = *v336;
            if ((_QWORD *)*v336 != v335)
            {
              CFRelease(v335);
              v334 = (_QWORD *)v338;
            }
          }
          if (*((_DWORD *)v216 + 13))
          {
            RIPLockCacheState();
            --*((_DWORD *)v216 + 13);
LABEL_228:
            RIPUnlockCacheState();
            return 0;
          }
          v339 = RIPCacheEntryCreate(0, (uint64_t)v334);
          *((_OWORD *)v339 + 4) = *((_OWORD *)v216 + 4);
          v340 = *((_OWORD *)v216 + 8);
          v342 = *((_OWORD *)v216 + 5);
          v341 = *((_OWORD *)v216 + 6);
          *((_OWORD *)v339 + 7) = *((_OWORD *)v216 + 7);
          *((_OWORD *)v339 + 8) = v340;
          *((_OWORD *)v339 + 5) = v342;
          *((_OWORD *)v339 + 6) = v341;
          RIPLockCacheState();
          v343 = (_QWORD *)v334[3];
          v344 = *v339;
          v334[3] = v339;
          *v339 = v334 + 2;
          *v343 = v344;
          *(_QWORD *)(v344 + 8) = v343;
          ++v334[5];
          ripc_AddEntry(*(_QWORD *)(*(_QWORD *)&v332 + 208), (uint64_t)v339);
          if (v334[5] <= 0x20uLL)
            goto LABEL_228;
          v345 = (uint64_t *)v334[2];
          RIPCacheEntryRemove(v345);
          v345[1] = 0;
          RIPUnlockCacheState();
          do
          {
            v346 = (uint64_t *)v345[1];
            RIPCacheEntryRelease(v345);
            result = 0;
            v345 = v346;
          }
          while (v346);
          return result;
        }
        if (v207 == 0.0)
          v290 = 0;
        else
          v290 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v207 + 24) + 40);
        v292 = v392[v290];
        Cache = CGColorTransformGetCache(*(_QWORD **)(*(_QWORD *)&v9 + 120));
        v387 = v7;
        v393.f64[0] = v207;
        if (Cache)
        {
          v295 = Cache[2];
          if (v295)
          {
            v296 = *(_QWORD *)(*(_QWORD *)(v295 + 24) + 40);
            if (v296 >> 61)
            {
              v297 = v209;
              MEMORY[0x1E0C80A78](Cache, v294);
              v298 = (double *)&v373;
              v299 = 0;
LABEL_166:
              if (CGColorTransformConvertColorComponents(*(_QWORD *)(*(_QWORD *)&v9 + 120), *(_QWORD **)&v393.f64[0], v297, v392, v299))
              {
                RIPColorCreateWithColor(*(_DWORD *)(*(_QWORD *)&v9 + 128), v299, v296, v292);
                v291 = v302;
              }
              else
              {
                v291 = 0;
              }
              if (v299 != v298)
                free(v299);
              v287 = *(_WORD *)(*(_QWORD *)&v9 + 108);
              v7 = v387;
              v208 = &CGColorMatrixGetTypeID_f;
              v210 = &CGColorMatrixGetTypeID_f;
              goto LABEL_172;
            }
            Cache = (_QWORD *)(8 * v296);
          }
          else
          {
            v296 = 0;
            Cache = 0;
          }
        }
        else
        {
          v296 = 0;
        }
        v297 = v209;
        v300 = MEMORY[0x1E0C80A78](Cache, v294);
        v298 = (CGFloat *)((char *)&v374 - ((v301 + 15) & 0xFFFFFFFFFFFFFFF0));
        if (v296 <= 0x1FFFFFFFFFFFFFFELL)
          v299 = (CGFloat *)((char *)&v374 - ((v301 + 15) & 0xFFFFFFFFFFFFFFF0));
        else
          v299 = 0;
        if (v296 - 0x1FFFFFFFFFFFFFFFLL >= 0xE000000000000022)
          v299 = (double *)malloc_type_malloc(v300, 0x373664ABuLL);
        goto LABEL_166;
      }
      v14.f64[0] = v396.f64[0];
      if (RIPGetCacheState_predicate != -1)
      {
        dispatch_once(&RIPGetCacheState_predicate, &__block_literal_global_9_12336);
        v14.f64[0] = v396.f64[0];
      }
LABEL_92:
      if (*(_BYTE *)(RIPGetCacheState_cache_state + 32))
      {
        if (v206)
          v218 = v206[12];
        else
          v218 = 0;
        *(_QWORD *)&v417 = v218;
      }
      result = 1000;
      if (*(_DWORD *)(*(_QWORD *)&v9 + 128) <= 2u && v206)
      {
        v219 = v206[4];
        *(_QWORD *)&v394.f64[0] = v206;
        if (v219 == 2)
        {
          v393.f64[0] = v207;
          v390 = COERCE_DOUBLE(&v419);
          if (v207 != 0.0)
            v207 = *(double *)(*(_QWORD *)(*(_QWORD *)&v207 + 24) + 40);
          v223 = v412;
          v224 = *(float *)&v414;
          v225 = v206[6];
          if (*(_QWORD *)&v207 != v225 && *(_QWORD *)&v207 + 1 != v225)
            _CGHandleAssert("acquire_function_2d", 261, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/RIP/RIPFunction.c", "(components == CGFunctionGetRangeDimension(function)) || (components + 1 == CGFunctionGetRangeDimension(function))", "", v11, v12, v13, SLOBYTE(v374));
          v388 = v9;
          v226 = vandq_s8((int8x16_t)vaddw_u32((uint64x2_t)vdupq_n_s64(3uLL), (uint32x2_t)vadd_s32(*(int32x2_t *)&v14.f64[0], (int32x2_t)0x200000002)), (int8x16_t)vdupq_n_s64(0x1FFFFFFFCuLL));
          v227 = (int8x16_t)vdupq_n_s64(0x1000uLL);
          v385 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v227, (uint64x2_t)v226), v226, v227);
          v228 = v413 - v412;
          v229 = *((float *)&v414 + 1) - *(float *)&v414;
          *(_QWORD *)&v396.f64[0] = v385.i64[1];
          v230 = COERCE_DOUBLE(malloc_type_malloc(4 * *(_QWORD *)&v207 * v385.i64[1] * v385.i64[0], 0x100004052888210uLL));
          v232 = v206[6];
          v386 = v6;
          v387 = v7;
          LODWORD(v391) = v209;
          v389 = v230;
          *(_QWORD *)&v384.f64[0] = v385.i64[1] * v385.i64[0];
          if (v232 <= *(_QWORD *)&v207)
            v233 = 0;
          else
            v233 = (float *)malloc_type_calloc(v385.i64[1] * v385.i64[0], 4uLL, 0x100004052888210uLL);
          v236 = v228 / (float)(unint64_t)(v385.i64[0] - 2);
          v237 = v229 / (float)(unint64_t)(v385.i64[1] - 2);
          if (*(_QWORD *)&v396.f64[0])
          {
            v238 = 0;
            v239 = v223 - (float)(v236 * 0.5);
            v240 = v224 - (float)(v237 * 0.5);
            v241 = 4 * *(_QWORD *)&v207;
            *(_QWORD *)&v395 = 4 * v385.i64[0];
            v242 = v233;
            v243 = *(float **)&v389;
            do
            {
              *((float *)&v426.a + 1) = v240 + (float)((float)v238 * v237);
              if (v385.i64[0])
              {
                v244 = 0;
                v245 = v242;
                do
                {
                  *(float *)&v426.a = v239 + (float)((float)v244 * v236);
                  if (v233)
                    v246 = v245;
                  else
                    v246 = 0;
                  v231.n128_f32[0] = v239 + (float)((float)v244 * v236);
                  function_evaluate(*(uint64_t *)&v394.f64[0], (float *)&v426, v243, v246, v231);
                  ++v244;
                  v243 = (float *)((char *)v243 + v241);
                  ++v245;
                }
                while (v385.i64[0] != v244);
              }
              ++v238;
              v242 = (float *)((char *)v242 + *(_QWORD *)&v395);
            }
            while (v238 != *(_QWORD *)&v396.f64[0]);
          }
          v9 = v388;
          v247 = *(unsigned int *)(*(_QWORD *)&v388 + 128);
          if (v247 < 3)
          {
            v248 = malloc_type_calloc(qword_184F7D760[v247] * *(_QWORD *)&v384.f64[0], 4uLL, 0x100004052888210uLL);
            v209 = LODWORD(v391);
            v6 = v386;
            v7 = v387;
            v208 = &CGColorMatrixGetTypeID_f;
            v210 = &CGColorMatrixGetTypeID_f;
            if ((CGColorTransformConvertComponentData(*(_QWORD **)(*(_QWORD *)&v388 + 120), *(_QWORD **)&v393.f64[0], 4, LODWORD(v391), *(uint64_t *)&v384.f64[0], 1, v249, *(uint64_t *)&v389, v371, 0, (uint64_t)v248, v372, 0) & 1) == 0)CGPostError((uint64_t)"%s - CGColorTransformConvertComponentData failed", v250, v251, v252, v253,
                v254,
                v255,
                v256,
                (char)"acquire_function_2d");
            free(*(void **)&v389);
            v217 = v390;
            **(_OWORD **)&v390 = *(_OWORD *)(*(_QWORD *)&v388 + 132);
            *(float *)&v257 = v412 - v236;
            *(float *)&v258 = v236 + v413;
            *(_DWORD *)(*(_QWORD *)&v217 + 16) = *(_DWORD *)(*(_QWORD *)&v9 + 148);
            *(_QWORD *)((char *)&v420 + 4) = __PAIR64__(v209, *(_DWORD *)(*(_QWORD *)&v9 + 128));
            *(_QWORD *)&v422 = __PAIR64__(v258, v257);
            *((float *)&v422 + 2) = *(float *)&v414 - v237;
            v259 = v237 + *((float *)&v414 + 1);
            v260 = (int64x2_t)v385;
            goto LABEL_145;
          }
        }
        else
        {
          if (v219 != 1)
            return result;
          v390 = COERCE_DOUBLE(&v419);
          LODWORD(v391) = v209;
          v386 = v6;
          v387 = v7;
          v220 = (LODWORD(v14.f64[0]) + 2) + 15;
          if ((v220 & 0x1FFFFF000) != 0)
            v221 = 4096;
          else
            v221 = v220 & 0x1FFFFFFF0;
          if (v207 == 0.0)
            v222 = 0;
          else
            v222 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v207 + 24) + 40);
          v261 = v412;
          v262 = v206[6];
          if (v222 != v262 && v222 + 1 != v262)
            _CGHandleAssert("acquire_function_1d", 170, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphicsRIP/RIP/RIPFunction.c", "(components == CGFunctionGetRangeDimension(function)) || (components + 1 == CGFunctionGetRangeDimension(function))", "", v11, v12, v13, SLOBYTE(v374));
          v263 = v9;
          v264 = v413 - v412;
          v265 = (float *)malloc_type_malloc(4 * v222 * v221, 0x100004052888210uLL);
          v267 = v206[6];
          v393.f64[0] = v207;
          if (v267 <= v222)
            v233 = 0;
          else
            v233 = (float *)malloc_type_calloc(v221, 4uLL, 0x100004052888210uLL);
          v268 = v264 / (float)(unint64_t)(v221 - 2);
          if (v221)
          {
            v269 = 0;
            v270 = v261 + (float)(v268 * -0.5);
            v271 = 4 * v222;
            v272 = v233;
            v273 = v265;
            do
            {
              *(float *)&v426.a = v270 + (float)((float)v269 * v268);
              if (v233)
                v274 = v272;
              else
                v274 = 0;
              v266.n128_f32[0] = v270 + (float)((float)v269 * v268);
              function_evaluate(*(uint64_t *)&v394.f64[0], (float *)&v426, v273, v274, v266);
              ++v269;
              v273 = (float *)((char *)v273 + v271);
              ++v272;
            }
            while (v221 != v269);
          }
          v275 = *(unsigned int *)(*(_QWORD *)&v263 + 128);
          if (v275 < 3)
          {
            v9 = v263;
            v248 = malloc_type_calloc(qword_184F7D760[v275] * v221, 4uLL, 0x100004052888210uLL);
            v6 = v386;
            v208 = &CGColorMatrixGetTypeID_f;
            if ((CGColorTransformConvertComponentData(*(_QWORD **)(*(_QWORD *)&v263 + 120), *(_QWORD **)&v393.f64[0], 4, LODWORD(v391), v221, 1, v276, (uint64_t)v265, v371, 0, (uint64_t)v248, v372, 0) & 1) == 0)CGPostError((uint64_t)"%s - CGColorTransformConvertComponentData failed", v277, v278, v279, v280,
                v281,
                v282,
                v283,
                (char)"acquire_function_1d");
            free(v265);
            v217 = v390;
            **(_OWORD **)&v390 = *(_OWORD *)(*(_QWORD *)&v263 + 132);
            *(float *)&v284 = v412 - v268;
            *(float *)&v285 = v268 + v413;
            *(_DWORD *)(*(_QWORD *)&v217 + 16) = *(_DWORD *)(*(_QWORD *)&v263 + 148);
            v209 = LODWORD(v391);
            *(_QWORD *)((char *)&v420 + 4) = __PAIR64__(LODWORD(v391), *(_DWORD *)(*(_QWORD *)&v263 + 128));
            *(_QWORD *)&v422 = __PAIR64__(v285, v284);
            DWORD2(v422) = 0;
            v260 = vdupq_n_s64(1uLL);
            v260.i64[0] = v221;
            v259 = 1.0;
            v7 = v387;
            v210 = &CGColorMatrixGetTypeID_f;
LABEL_145:
            *((float *)&v422 + 3) = v259;
            v421 = v260;
            *(_QWORD *)&v423 = v248;
            *((_QWORD *)&v423 + 1) = v233;
            v216 = (uint64_t *)v416;
            *((_QWORD *)&v417 + 1) = *(_QWORD *)&v394.f64[0];
            v207 = v393.f64[0];
            goto LABEL_146;
          }
        }
        abort();
      }
      return result;
    default:
      return 1000;
  }
}

void function_evaluate(uint64_t a1, float *a2, float *a3, float *a4, __n128 a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  __n128 v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  double *v20;
  double *v21;
  double *v22;
  float v23;
  double *v24;
  uint64_t v25;
  double v26;
  float v27;
  float v28;
  double *v29;
  double v30;
  float v31;
  uint64_t v32;
  _QWORD v33[2];

  v8 = a1;
  v33[1] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 48);
    if (v9 >> 61)
    {
      v11 = (char *)MEMORY[0x1E0C80A78](a1, a5);
      v13 = (char *)&v32;
      v14 = 0;
      goto LABEL_11;
    }
    a1 = 8 * v9;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v11 = (char *)MEMORY[0x1E0C80A78](a1, a5);
  v13 = (char *)v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v9 <= 0x1FFFFFFFFFFFFFFELL)
    v14 = (char *)v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  else
    v14 = 0;
  if (v9 - 0x1FFFFFFFFFFFFFFFLL >= v16)
  {
    v11 = (char *)malloc_type_malloc((size_t)v11, 0xAA0F682AuLL);
    v14 = v11;
  }
LABEL_11:
  MEMORY[0x1E0C80A78](v11, v12);
  v20 = (double *)((char *)v33 - v18);
  if (v17 <= 0x1FFFFFFFFFFFFFFELL)
    v21 = (double *)((char *)v33 - v18);
  else
    v21 = 0;
  if (v17 - 0x1FFFFFFFFFFFFFFFLL >= v19)
    v21 = (double *)malloc_type_malloc(8 * v10, 0x763212C9uLL);
  if (v9)
  {
    v22 = (double *)v14;
    do
    {
      v23 = *a2++;
      *v22++ = v23;
      --v9;
    }
    while (v9);
  }
  CGFunctionEvaluate(v8, v14, v21);
  if (a4)
  {
    if (v10 != 1)
    {
      v24 = v21;
      v25 = v10 - 1;
      do
      {
        v26 = *v24++;
        v27 = v26;
        *a3++ = v27;
        --v25;
      }
      while (v25);
    }
    v28 = v21[v10 - 1];
    *a4 = v28;
  }
  else if (v10)
  {
    v29 = v21;
    do
    {
      v30 = *v29++;
      v31 = v30;
      *a3++ = v31;
      --v10;
    }
    while (v10);
  }
  if (v21 != v20)
    free(v21);
  if (v14 != v13)
    free(v14);
}

uint64_t CGFunctionEvaluate(uint64_t a1, char *a2, double *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  double v14;
  double v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  double v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78]();
  if (v7 <= 0x1FFFFFFFFFFFFFFELL)
    v9 = (char *)v21 - v8;
  else
    v9 = 0;
  if (v7 - 0x1FFFFFFFFFFFFFFFLL >= 0xE000000000000012)
    v9 = (char *)malloc_type_malloc(8 * v6, 0x5FF19727uLL);
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
  {
    v11 = *(_QWORD *)(a1 + 32);
    if (v11)
    {
      v12 = 0;
      v13 = (double *)(v10 + 8);
      do
      {
        v14 = *(v13 - 1);
        v15 = *(double *)&a2[8 * v12];
        if (v15 >= v14 && (v14 = *v13, v15 <= *v13))
          *(double *)&v9[8 * v12] = v15;
        else
          *(double *)&v9[8 * v12] = v14;
        ++v12;
        v13 += 2;
      }
      while (v11 != v12);
    }
    a2 = v9;
  }
  result = (*(uint64_t (**)(_QWORD, char *, double *))(a1 + 72))(*(_QWORD *)(a1 + 24), a2, a3);
  v17 = *(_QWORD *)(a1 + 56);
  if (v17)
  {
    v18 = *(_QWORD *)(a1 + 48);
    if (v18)
    {
      v19 = (double *)(v17 + 8);
      do
      {
        v20 = *(v19 - 1);
        if (*a3 < v20 || (v20 = *v19, *a3 > *v19))
          *a3 = v20;
        ++a3;
        v19 += 2;
        --v18;
      }
      while (v18);
    }
  }
  return result;
}

_QWORD *gradient_evaluate(_QWORD *result, double *a2, double *a3)
{
  unint64_t v3;
  unint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  double *v17;
  double *v18;
  double v19;
  double v20;
  double v21;

  v3 = result[2];
  v4 = v3 - 2;
  if (v3 >= 2)
  {
    v5 = *a2;
    v6 = result[1];
    v7 = result[3];
    v8 = v6 + 1;
    v9 = *(double *)(v7 + 8 * (v6 + 1));
    v10 = 0;
    if (*a2 <= v9)
    {
      v14 = 0.0;
      v12 = v6 + 1;
      if (v6)
      {
LABEL_9:
        v15 = (v5 - v14) / (v9 - v14);
        v16 = v7 + 8;
        v17 = (double *)(v16 + 8 * v10 * v8);
        v18 = (double *)(v16 + 8 * v12);
        do
        {
          v19 = *v17++;
          v20 = v19;
          v21 = *v18++;
          *a3++ = v15 * v21 + (1.0 - v15) * v20;
          --v6;
        }
        while (v6);
      }
    }
    else
    {
      v11 = (double *)(v7 + 16 * v6 + 16);
      v12 = v6 + 1;
      v13 = *(double *)(v7 + 8 * (v6 + 1));
      while (v4 != v10)
      {
        v9 = *v11;
        ++v10;
        v12 += v8;
        v11 += v6 + 1;
        v14 = v13;
        v13 = v9;
        if (v5 <= v9)
        {
          if (v6)
            goto LABEL_9;
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t *RIPDataGetEntry(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t *i;
  uint64_t v10;
  _QWORD *v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t **v19;

  if (!a2)
    return 0;
  RIPLockCacheState();
  v8 = (uint64_t *)(a2 + 16);
  for (i = *(uint64_t **)(a2 + 24); ; i = (uint64_t *)i[1])
  {
    if (i == v8)
    {
      i = 0;
      goto LABEL_20;
    }
    if (*((_DWORD *)i + 12) == a3 && (*(unsigned int (**)(uint64_t, uint64_t *))(a4 + 16))(a4, i))
      break;
  }
  v10 = *i;
  if ((uint64_t *)*i != v8)
  {
    v11 = (_QWORD *)i[1];
    *(_QWORD *)(v10 + 8) = v11;
    *v11 = v10;
    v12 = *(uint64_t ***)(a2 + 24);
    *i = (uint64_t)v8;
    i[1] = (uint64_t)v12;
    *(_QWORD *)(a2 + 24) = i;
    *v12 = i;
  }
  v13 = *(_QWORD *)(a1 + 208);
  ++*((_DWORD *)i + 14);
  if (RIPGetCacheState_predicate != -1)
    dispatch_once(&RIPGetCacheState_predicate, &__block_literal_global_9_12336);
  v14 = i[5];
  v15 = *(_QWORD *)(RIPGetCacheState_cache_state + 8);
  if (v14 != v13)
  {
    if (v14 == v15)
    {
      v15 = i[5];
    }
    else
    {
      --*(_QWORD *)(v14 + 16);
      i[5] = v15;
      ++*(_QWORD *)(v15 + 16);
    }
  }
  v16 = i + 2;
  v17 = i[2];
  if (v17 != v15)
  {
    v18 = (_QWORD *)i[3];
    *(_QWORD *)(v17 + 8) = v18;
    *v18 = v17;
    v19 = *(uint64_t ***)(v15 + 8);
    i[2] = v15;
    i[3] = (uint64_t)v19;
    *(_QWORD *)(v15 + 8) = v16;
    *v19 = v16;
  }
  ++*((_DWORD *)i + 13);
LABEL_20:
  RIPUnlockCacheState();
  return i;
}

void ripc_AddEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)(a2 + 40) = a1;
  ++*(_QWORD *)(a1 + 16);
  if (RIPGetCacheState_predicate != -1)
    dispatch_once(&RIPGetCacheState_predicate, &__block_literal_global_9_12336);
  v3 = *(_QWORD *)(RIPGetCacheState_cache_state + 8);
  ++*(_QWORD *)(RIPGetCacheState_cache_state + 16);
  v4 = *(_QWORD **)(v3 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v5 = (_QWORD *)(a2 + 16);
  *(_QWORD *)(v3 + 8) = v5;
  *v5 = v3;
  *v4 = v6;
  *(_QWORD *)(v6 + 8) = v4;
}

_QWORD *RIPDataCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *result;

  if (_block_invoke_once_4285 != -1)
    dispatch_once(&_block_invoke_once_4285, &__block_literal_global_3_4286);
  result = (_QWORD *)CGTypeCreateInstance(RIPDataGetTypeID_data_type_id, 32, a3, a4, a5, a6, a7, a8);
  result[2] = result + 2;
  result[3] = result + 2;
  result[4] = a1;
  result[5] = 0;
  return result;
}

_QWORD *RIPCacheEntryCreate(int a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *result;

  RIPLockCacheState();
  if (RIPGetCacheState_predicate != -1)
    dispatch_once(&RIPGetCacheState_predicate, &__block_literal_global_9_12336);
  if (*(_QWORD *)(RIPGetCacheState_cache_state + 16) <= *(_QWORD *)(RIPGetCacheState_cache_state + 24)
    || (v4 = *(_QWORD **)(RIPGetCacheState_cache_state + 8), v5 = (_QWORD *)*v4, (_QWORD *)*v4 == v4))
  {
    RIPUnlockCacheState();
  }
  else
  {
    v6 = v5 - 2;
    RIPCacheEntryRemove(v5 - 2);
    RIPUnlockCacheState();
    RIPCacheEntryRelease(v6);
  }
  result = malloc_type_malloc(0xA8uLL, 0x10E20404CCF93ECuLL);
  if (result)
  {
    *result = result;
    result[1] = result;
    result[2] = result + 2;
    result[3] = result + 2;
    result[4] = a2;
    result[5] = 0;
    *((_DWORD *)result + 13) = 0;
    *((_DWORD *)result + 14) = 0;
    *((_DWORD *)result + 12) = a1;
  }
  return result;
}

_QWORD *RIPLayerBltShade(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v11;
  _QWORD *result;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  char Mask;
  uint64_t v33;
  int v34;
  uint64_t v35;
  float v36;
  int v37;
  double v38;
  float v39;
  float *v40;
  int v41;
  int v42;
  double v43;
  float v45;
  double v47;
  float v53;
  float v54;
  int64x2_t *v55;
  uint64_t v56;
  float64x2_t *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _QWORD v63[2];
  float32x4_t v64;
  float32x2_t v65;
  float v66;
  float32x2_t v67;
  int v68;
  float v69;
  float v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;

  v11 = (_DWORD *)a3;
  v90 = *MEMORY[0x1E0C80C00];
  v63[0] = 0;
  v63[1] = 0;
  if (a3 || (v11 = v63, result = (_QWORD *)CGSBoundsIntersection((int *)(a1 + 12), (int *)a4, v63), (_DWORD)result))
  {
    v89 = 0;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    if (a2 && !*(_QWORD *)(a2 + 72))
    {
      if (*(_DWORD *)(a2 + 64))
      {
        if (v11 == (_DWORD *)(a2 + 12) || !ripl_IsContained(v11, (_DWORD *)(a2 + 12)))
        {
          Mask = ripl_CreateMask(a2, 0, a3, a4, a5, a6, a7, a8);
          result = 0;
          if ((Mask & 1) == 0)
            return result;
        }
        else
        {
          a2 = 0;
        }
      }
      else if (!*(_QWORD *)(a2 + 56) && ripl_IsEnclosed(v11, (_DWORD *)(a2 + 12)))
      {
        a2 = 0;
      }
    }
    v15 = *(__int128 **)(a1 + 40);
    if (!v15)
    {
      *(_QWORD *)&v85 = 0;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      v73 = 0u;
      v74 = 0u;
      v15 = &v71;
      v71 = 0u;
      v72 = 0u;
    }
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a1 + 32))(a1, 32, v11);
    if (result)
    {
      v22 = result;
      v23 = *result;
      if (!*result
        || !*(_QWORD *)(v23 + 48)
        || !*(_QWORD *)(a1 + 56) && !ripl_CreateMask(a1, 1, v16, v17, v18, v19, v20, v21))
      {
        goto LABEL_45;
      }
      *(_BYTE *)v15 = *(_DWORD *)a6;
      ripl_BltOpDestination((uint64_t)v15, (uint64_t)v11, a1);
      v24 = *(_QWORD *)(a4 + 56);
      v25 = *(_DWORD *)a4;
      v26 = *(_DWORD *)(a4 + 4);
      v27 = *(_DWORD *)(a4 + 8);
      v28 = *(_DWORD *)(a4 + 12);
      *((_BYTE *)v15 + 1) = 1;
      *((_DWORD *)v15 + 14) = *v11 - v25;
      *((_DWORD *)v15 + 15) = v28 + v26 - (v11[1] + v11[3]);
      *((_DWORD *)v15 + 16) = v27;
      *(_QWORD *)((char *)v15 + 68) = v28;
      v29 = *(_DWORD *)(v24 + 20);
      if (v29 == 2)
      {
        v30 = *(_DWORD *)(v24 + 32);
        v31 = 4 * v30;
      }
      else if (v29 == 1)
      {
        v30 = *(_DWORD *)(v24 + 32);
        v31 = 3 * v30;
      }
      else
      {
        v30 = *(_DWORD *)(v24 + 32);
        v31 = v30;
      }
      *((_DWORD *)v15 + 19) = 4 * v31;
      *((_QWORD *)v15 + 11) = *(_QWORD *)(v24 + 64);
      v33 = *(_QWORD *)(v24 + 72);
      v34 = 4 * v30;
      if (!v33)
        v34 = 0;
      *((_DWORD *)v15 + 20) = v34;
      *((_QWORD *)v15 + 12) = v33;
      ripl_BltOpMask((uint64_t)v15, v11, a2);
      if (!CGBlt_initialize((uint64_t)v15))
        goto LABEL_45;
      if (a5)
      {
        if (*(_UNKNOWN **)a5 != &ripc_class)
          goto LABEL_45;
        v36 = *(float *)(a5 + 156);
        v35 = a5 + 156;
        *(_QWORD *)&v62 = v35 - 128;
        if (v36 >= 1.0)
          *((_QWORD *)&v62 + 1) = 0;
        else
          *((_QWORD *)&v62 + 1) = v35;
      }
      else
      {
        v62 = 0uLL;
      }
      v37 = (*(unsigned __int16 *)(a6 + 4) << 8) | 0xFF;
      LODWORD(v58) = v37;
      v38 = *(double *)(a6 + 48);
      v39 = 0.0;
      if (v38 >= 0.0)
      {
        v39 = 1.0;
        if (v38 <= 1.0)
          v39 = v38;
      }
      *((float *)&v58 + 1) = v39;
      v40 = *(float **)(a4 + 64);
      if (v40)
      {
        v41 = *(_DWORD *)(a1 + 24);
        v42 = v41 + *(_DWORD *)(a1 + 16);
        v43 = (double)*(int *)(a1 + 12);
        _D2 = (double)v41;
        v45 = *(double *)v40;
        v66 = v45;
        _Q3 = *(float64x2_t *)(v40 + 2);
        v67 = vneg_f32(vcvt_f32_f64(_Q3));
        v47 = *((double *)v40 + 3);
        __asm { FMLA            D5, D2, V3.D[1] }
        *(float *)_Q3.f64 = v47;
        v53 = _D5 - (double)v42;
        v68 = LODWORD(_Q3.f64[0]);
        v69 = v53;
        v54 = v43 - (*((double *)v40 + 5) + v47 * (double)v41);
        v70 = v54;
        v40 = &v66;
      }
      *((_QWORD *)&v58 + 1) = v40;
      v55 = *(int64x2_t **)(a4 + 56);
      *((_QWORD *)&v61 + 1) = v55 + 3;
      *(int32x2_t *)&v61 = vmovn_s64(v55[2]);
      v56 = v55[1].u32[1];
      if (v56 <= 2)
      {
        LODWORD(v58) = dword_185000490[v56] | (*(_DWORD *)(a4 + 40) << 28) | v37;
        v59 = *(_OWORD *)(a4 + 24);
        *(_QWORD *)&v60 = *(_QWORD *)(a4 + 16);
        v57 = *(float64x2_t **)(a4 + 48);
        v64 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v57), v57[1]);
        v65 = vcvt_f32_f64(v57[2]);
        *((_QWORD *)&v60 + 1) = &v64;
        if (!(*(unsigned int (**)(_QWORD *, __int128 *, __int128 *))(v23 + 48))(v22, v15, &v58))
          v11 = 0;
        goto LABEL_46;
      }
LABEL_45:
      v11 = 0;
LABEL_46:
      (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a1 + 48))(a1, v11);
      return (_QWORD *)(v11 != 0);
    }
  }
  return result;
}

uint64_t CGShadingCreateAxialInternal(_QWORD *a1, uint64_t a2, uint64_t a3, double *a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  uint64_t Empty;
  uint64_t v15;
  uint64_t v16;
  char v18;
  char v19;
  double v24;

  Empty = 0;
  if (a1 && a5)
  {
    v15 = *(_QWORD *)(a1[3] + 40);
    v16 = a5[6];
    if (v16 == v15 || v16 == v15 + 1)
    {
      v18 = a7;
      v19 = a6;
      Empty = CGShadingCreateEmpty(1, a1, a2, a3, (uint64_t)a5, a6, a7, a8);
      *(double *)(Empty + 120) = a9;
      *(double *)(Empty + 128) = a10;
      *(_BYTE *)(Empty + 136) = v19;
      *(double *)(Empty + 144) = a11;
      *(double *)(Empty + 152) = a12;
      *(_BYTE *)(Empty + 160) = v18;
      CFRetain(a5);
      *(_QWORD *)(Empty + 184) = a5;
      if (a4)
      {
        *(double *)(Empty + 168) = *a4;
        v24 = a4[1];
      }
      else
      {
        *(_QWORD *)(Empty + 168) = 0;
        v24 = 1.0;
      }
      *(double *)(Empty + 176) = v24;
    }
    else
    {
      return 0;
    }
  }
  return Empty;
}

uint64_t CGShadingCreateEmpty(int a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v12;
  uint64_t Instance;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  const CGRect *v23;
  CGSize size;

  v9 = (uint64_t *)a3;
  if ((a1 - 1) > 3)
    v12 = 104;
  else
    v12 = qword_184F7DB00[a1 - 1];
  if (_block_invoke_once_9690 != -1)
    dispatch_once(&_block_invoke_once_9690, &__block_literal_global_4_9691);
  Instance = CGTypeCreateInstance(CGShadingGetTypeID_shading_type_id, v12, a3, a4, a5, a6, a7, a8);
  v14 = Instance;
  if (Instance)
  {
    do
    {
      v15 = __ldxr((unsigned int *)&CGShadingCreateEmpty_identifier);
      v16 = v15 + 1;
    }
    while (__stxr(v16, (unsigned int *)&CGShadingCreateEmpty_identifier));
    *(_DWORD *)(Instance + 16) = v16;
    if (a2)
    {
      CFRetain(a2);
      *(_QWORD *)(v14 + 24) = a2;
      *(_DWORD *)(v14 + 20) = a1;
      if (v9)
      {
        v17 = *(_QWORD *)(a2[3] + 40);
LABEL_12:
        v18 = v17 + 1;
        v19 = v17 == -1;
        v20 = malloc_type_malloc(8 * (v17 + 1), 0x705560E0uLL);
        if (!v19)
        {
          v21 = v20;
          do
          {
            v22 = *v9++;
            *v21++ = v22;
            --v18;
          }
          while (v18);
        }
        *(_QWORD *)(v14 + 32) = v20;
      }
    }
    else
    {
      v17 = 0;
      *(_QWORD *)(Instance + 24) = 0;
      *(_DWORD *)(Instance + 20) = a1;
      if (v9)
        goto LABEL_12;
    }
    v23 = &CGRectNull;
    if (a4)
      v23 = (const CGRect *)a4;
    *(_BYTE *)(v14 + 40) = a4 != 0;
    size = v23->size;
    *(CGPoint *)(v14 + 48) = v23->origin;
    *(CGSize *)(v14 + 64) = size;
    *(_QWORD *)(v14 + 88) = 0;
  }
  return v14;
}

_QWORD *CGColorTransformConvertComponentData(_QWORD *a1, _QWORD *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CFTypeID v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _QWORD *Cache;
  uint64_t v43;
  CFTypeID v44;
  _QWORD *CGCMSConverter;
  _QWORD *v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t BitsPerComponent;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD v55[4];
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _QWORD v81[4];
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;

  if (!a1)
    return 0;
  v27 = CFGetTypeID(a1);
  if (kCGColorTransformDefaultCMYK_block_invoke_once != -1)
    dispatch_once(&kCGColorTransformDefaultCMYK_block_invoke_once, &__block_literal_global_25_15643);
  if (v27 != CGColorTransformGetTypeID_type_id)
    return 0;
  v28 = 4096;
  v53 = a8;
  v54 = a2;
  BitsPerComponent = CGPixelComponentGetBitsPerComponent(a3, v20, v21, v22, v23, v24, v25, v26);
  v51 = a5;
  v52 = a6;
  if (a3 != 2 && a3 != 5)
  {
    if (a3 == 4)
    {
      if (a2)
        v48 = *(_QWORD *)(a2[3] + 40);
      else
        v48 = 0;
      v37 = a10;
      v28 = 0x2000;
      v38 = 32;
      v49 = a13;
      v39 = a4;
      v40 = 0x2000;
      goto LABEL_21;
    }
    v28 = 0;
  }
  if (a2)
    v48 = *(_QWORD *)(a2[3] + 40);
  else
    v48 = 0;
  v36 = CGPixelComponentGetBitsPerComponent(a3, v29, v30, v31, v32, v33, v34, v35);
  if (a3 == 2)
  {
    v40 = 4096;
    v38 = v36;
    v49 = a13;
    v39 = a4;
    v37 = a10;
  }
  else
  {
    v37 = a10;
    if (a3 == 5)
    {
      v40 = 4096;
      v38 = v36;
      v49 = a13;
      v39 = a4;
    }
    else
    {
      v38 = v36;
      v49 = a13;
      v39 = a4;
      v40 = 0;
    }
  }
LABEL_21:
  v41 = v37;
  Cache = CGColorTransformGetCache(a1);
  if (Cache)
  {
    v43 = Cache[2];
    if (v43)
      v43 = *(_QWORD *)(*(_QWORD *)(v43 + 24) + 40);
  }
  else
  {
    v43 = 0;
  }
  v81[0] = v53;
  v81[1] = v51;
  v81[2] = v52;
  v81[3] = v41;
  v82 = v39;
  v83 = 0;
  v84 = a3;
  v85 = 0;
  v86 = BitsPerComponent;
  v87 = v48;
  v88 = 0;
  v89 = v28;
  v102 = 0u;
  v103 = 0u;
  v104 = 0u;
  v105 = 0u;
  v106 = 0u;
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  v94 = 0u;
  v95 = 0u;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v100 = 0u;
  v101 = 0u;
  v55[0] = a11;
  v55[1] = v51;
  v55[2] = v52;
  v55[3] = v49;
  v56 = v39;
  v57 = 0;
  v58 = a3;
  v59 = 0;
  v60 = v38;
  v61 = v43;
  v62 = 0;
  v63 = v40;
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  v75 = 0u;
  v44 = CFGetTypeID(a1);
  if (kCGColorTransformDefaultCMYK_block_invoke_once != -1)
    dispatch_once(&kCGColorTransformDefaultCMYK_block_invoke_once, &__block_literal_global_25_15643);
  if (v44 != CGColorTransformGetTypeID_type_id)
    return 0;
  CGCMSConverter = CGColorTransformCreateCGCMSConverter(a1, v54, v39);
  v46 = CGCMSConverterConvert(CGCMSConverter, (uint64_t)v81, (uint64_t)v55);
  if (CGCMSConverter)
    CFRelease(CGCMSConverter);
  return v46;
}

CGFunctionRef CGFunctionCreate(void *info, size_t domainDimension, const CGFloat *domain, size_t rangeDimension, const CGFloat *range, const CGFunctionCallbacks *callbacks)
{
  uint64_t v6;
  uint64_t v7;
  CGFunction *v8;
  uint64_t Instance;
  unsigned int v16;
  unsigned int v17;
  CGFunctionReleaseInfoCallback releaseInfo;
  size_t v19;
  void *v20;
  size_t v21;
  void *v22;

  v8 = 0;
  if (domainDimension && rangeDimension && callbacks)
  {
    if (callbacks->evaluate)
    {
      if (_block_invoke_once_5555 != -1)
        dispatch_once(&_block_invoke_once_5555, &__block_literal_global_6_5556);
      Instance = CGTypeCreateInstance(CGFunctionGetTypeID_function_type_id, 96, (uint64_t)domain, rangeDimension, (uint64_t)range, (uint64_t)callbacks, v6, v7);
      v8 = (CGFunction *)Instance;
      do
      {
        v16 = __ldxr((unsigned int *)&CGFunctionCreate_identifier);
        v17 = v16 + 1;
      }
      while (__stxr(v17, (unsigned int *)&CGFunctionCreate_identifier));
      *(_DWORD *)(Instance + 16) = v17;
      *(_QWORD *)(Instance + 24) = info;
      releaseInfo = callbacks->releaseInfo;
      *(_OWORD *)(Instance + 64) = *(_OWORD *)&callbacks->version;
      *(_QWORD *)(Instance + 80) = releaseInfo;
      *(_QWORD *)(Instance + 88) = 0;
      *(_QWORD *)(Instance + 96) = 0;
      *(_QWORD *)(Instance + 104) = 0;
      *(_QWORD *)(Instance + 32) = domainDimension;
      if (domain)
      {
        v19 = 16 * domainDimension;
        v20 = malloc_type_malloc(v19, 0x2062DE7BuLL);
        *((_QWORD *)v8 + 5) = v20;
        memcpy(v20, domain, v19);
      }
      else
      {
        *(_QWORD *)(Instance + 40) = 0;
      }
      *((_QWORD *)v8 + 6) = rangeDimension;
      if (range)
      {
        v21 = 16 * rangeDimension;
        v22 = malloc_type_malloc(v21, 0x2062DE7BuLL);
        *((_QWORD *)v8 + 7) = v22;
        memcpy(v22, range, v21);
      }
      else
      {
        *((_QWORD *)v8 + 7) = 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

BOOL __lookup_function_entry_block_invoke(uint64_t a1, uint64_t a2)
{
  float *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  result = 0;
  if (*(_DWORD *)(a2 + 88) == *(_DWORD *)(a1 + 64) && *(_QWORD *)(a2 + 96) >= *(_QWORD *)(a1 + 48))
  {
    v2 = *(float **)(a1 + 40);
    if (*(float *)(a2 + 112) <= *v2
      && *(float *)(a2 + 116) >= v2[1]
      && *(_QWORD *)(a2 + 104) >= *(_QWORD *)(a1 + 56)
      && *(float *)(a2 + 120) <= v2[2]
      && *(float *)(a2 + 124) >= v2[3])
    {
      v3 = *(_QWORD *)(a1 + 32);
      if (*(_DWORD *)(a2 + 64) == *(_DWORD *)(v3 + 132))
        return 1;
      v5 = *(_QWORD *)(v3 + 136);
      v4 = *(_QWORD *)(v3 + 144);
      if (*(_QWORD *)(a2 + 68) == v5 && *(_QWORD *)(a2 + 76) == v4)
        return 1;
    }
  }
  return result;
}

CFStringRef CGFontCopyFullName(CFStringRef font)
{
  if (font)
    return (CFStringRef)(*((uint64_t (**)(char *))font->data + 21))(font[3].data);
  return font;
}

void CGContextSetFillColor(CGContextRef c, const CGFloat *components)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  if (c && *((_DWORD *)c + 4) == 1129601108)
  {
    if (components)
      set_fill_color_with_components((uint64_t *)c, 0, components, v2, v3, v4, v5, v6, v7);
    else
      CGPostError((uint64_t)"%s: components may not be NULL.", (uint64_t)c, 0, v2, v3, v4, v5, v6, (char)"CGContextSetFillColor");
  }
  else
  {
    handle_invalid_context((char)"CGContextSetFillColor", (uint64_t)c, (uint64_t)components, v2, v3, v4, v5, v6);
  }
}

CFComparisonResult compare_keys(CFStringRef *a1, CFStringRef *a2)
{
  return CFStringCompare(*a1, *a2, 0);
}

BOOL CGPointMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGPoint *point)
{
  BOOL result;

  if (!dict || !point)
    return 0;
  get_point_from_dict(dict, &point->x);
  return result;
}

_QWORD *CGImageGetClipPath(_QWORD *result)
{
  _QWORD *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1)
      dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_211);
    if (v2 == CGImageGetTypeID_image_type_id)
      return (_QWORD *)v1[25];
    else
      return 0;
  }
  return result;
}

CGColorRef CGColorCreateCopy(CGColorRef color)
{
  if (color)
    CFRetain(color);
  return color;
}

void CGContextSetLineJoin(CGContextRef c, CGLineJoin join)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGContextRef v8;

  if (!c)
  {
    v8 = 0;
LABEL_7:
    handle_invalid_context((char)"CGContextSetLineJoin", (uint64_t)v8, v2, v3, v4, v5, v6, v7);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v8 = c;
    goto LABEL_7;
  }
  if (join >= (kCGLineJoinBevel|kCGLineJoinRound))
    join = kCGLineJoinMiter;
  CGGStateSetLineJoin(*((_QWORD *)c + 12), join);
}

int CGFontGetAscent(CGFontRef font)
{
  _DWORD *font_info;

  font_info = get_font_info(font);
  if (font_info)
    LODWORD(font_info) = font_info[3];
  return (int)font_info;
}

_QWORD *CGFontCreateWithDataProviderAndData(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char v16;

  v4 = CGIsInLockdownModeForFonts();
  if (v4)
  {
    CGPostError((uint64_t)"Attempt to create CGFont from data in Lockdown Mode for Fonts", v5, v6, v7, v8, v9, v10, v11, v16);
    return 0;
  }
  if (!a1)
    return 0;
  v12 = CGFontCreate(v4, v5, v6, v7, v8, v9, v10, v11);
  v13 = (_QWORD *)v12;
  if (v12)
  {
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 + 16) + 32))(a1, a2);
    v13[14] = v14;
    if (!v14)
    {
      CFRelease(v13);
      return 0;
    }
  }
  return v13;
}

_QWORD *create_private_data_with_data_provider(CGDataProvider *a1)
{
  _QWORD *result;
  const void *v2;
  uint64_t v3;

  result = CGDataProviderCopyData(a1);
  if (result)
  {
    v2 = result;
    v3 = FPFontCreateWithDataAndExtra();
    CFRelease(v2);
    if (v3)
    {
      result = malloc_type_calloc(1uLL, 0x20uLL, 0x1060040D8C947D5uLL);
      *result = 1;
      result[1] = v3;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CGStyleCreateShadow2(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long double a9, long double a10, double a11)
{
  uint64_t v11;
  double Alpha;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[7];

  v22[0] = 0;
  v22[1] = 0x4046800000000000;
  v22[3] = 0x3FE5555555555555;
  v22[6] = 0x3FF0000000000000;
  if (result)
  {
    v11 = result;
    if (result < 0)
      Alpha = CGTaggedColorGetAlpha(result, a2, a3, a4, a5, a6, a7, a8);
    else
      Alpha = *(double *)(result + 8 * *(_QWORD *)(result + 56) + 56);
    if (Alpha == 0.0)
    {
      return 0;
    }
    else
    {
      *(double *)&v22[2] = atan2(a10, a9) * 180.0 / 3.14159265 + 180.0;
      v22[4] = sqrt(a10 * a10 + a9 * a9);
      *(double *)&v22[5] = a11;
      return CGStyleCreateShadowWithColor((uint64_t)v22, v11, v16, v17, v18, v19, v20, v21);
    }
  }
  return result;
}

void CGContextSetShadowWithColor(CGContextRef c, CGSize offset, CGFloat blur, CGColorRef color)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CGFloat height;
  CGFloat width;
  double Alpha;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *ShadowWithColor;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[7];

  v29[0] = 0;
  v29[1] = 0x4046800000000000;
  v29[3] = 0x3FE5555555555555;
  v29[6] = 0x3FF0000000000000;
  if (color
    && ((height = offset.height, width = offset.width, ((unint64_t)color & 0x8000000000000000) == 0)
      ? (Alpha = *((double *)color + *((_QWORD *)color + 7) + 7))
      : (Alpha = CGTaggedColorGetAlpha((uint64_t)color, (uint64_t)color, v4, v5, v6, v7, v8, v9)),
        Alpha != 0.0))
  {
    if (fabs(width) != INFINITY && fabs(height) != INFINITY)
    {
      *(double *)&v29[2] = atan2(height, width) * 180.0 / 3.14159265 + 180.0;
      v29[4] = sqrt(height * height + width * width);
      *(CGFloat *)&v29[5] = blur;
      ShadowWithColor = (const void *)CGStyleCreateShadowWithColor((uint64_t)v29, (uint64_t)color, v16, v17, v18, v19, v20, v21);
      CGContextSetStyle((uint64_t)c, ShadowWithColor, v23, v24, v25, v26, v27, v28);
      if (ShadowWithColor)
        CFRelease(ShadowWithColor);
    }
  }
  else
  {
    CGContextSetStyle((uint64_t)c, 0, v4, v5, v6, v7, v8, v9);
  }
}

uint64_t CGStyleCreateShadowWithColor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t style_with_type;
  float64x2_t v11;
  float64x2_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double Alpha;
  CGColorSpace *DeviceRGB;
  CGFloat components[5];

  components[4] = *(CGFloat *)MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  style_with_type = 0;
  if (fabs(*(double *)(a1 + 8)) != INFINITY)
  {
    style_with_type = 0;
    if (fabs(*(double *)(a1 + 16)) != INFINITY)
    {
      style_with_type = 0;
      if (fabs(*(double *)(a1 + 24)) != INFINITY)
      {
        style_with_type = 0;
        if (fabs(*(double *)(a1 + 32)) != INFINITY)
        {
          style_with_type = 0;
          if (fabs(*(double *)(a1 + 40)) != INFINITY)
          {
            style_with_type = 0;
            if (fabs(*(double *)(a1 + 48)) != INFINITY)
            {
              style_with_type = create_style_with_type(1, a2, a3, a4, a5, a6, a7, a8);
              *(_DWORD *)(style_with_type + 32) = 0;
              v11 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
              *(float64x2_t *)(style_with_type + 40) = vmaxnmq_f64(vminnmq_f64(*(float64x2_t *)(a1 + 8), v11), (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL));
              v12 = vmaxnmq_f64(vminnmq_f64(*(float64x2_t *)(a1 + 24), (float64x2_t)xmmword_185004FE0), (float64x2_t)0);
              *(float64x2_t *)(style_with_type + 56) = v12;
              *(float64x2_t *)(style_with_type + 72) = vmaxnmq_f64(vminnmq_f64(*(float64x2_t *)(a1 + 40), v11), (float64x2_t)0);
              if (a2)
              {
                CFRetain((CFTypeRef)a2);
                *(_QWORD *)(style_with_type + 24) = a2;
                if (a2 < 0)
                  Alpha = CGTaggedColorGetAlpha(a2, v13, v14, v15, v16, v17, v18, v19);
                else
                  Alpha = *(double *)(a2 + 8 * *(_QWORD *)(a2 + 56) + 56);
                *(double *)(style_with_type + 56) = 1.0 - Alpha;
              }
              else
              {
                memset(components, 0, 24);
                components[3] = 1.0 - v12.f64[0];
                DeviceRGB = CGColorSpaceCreateDeviceRGB();
                *(_QWORD *)(style_with_type + 24) = CGColorCreate(DeviceRGB, components);
                CGColorSpaceRelease(DeviceRGB);
              }
            }
          }
        }
      }
    }
  }
  return style_with_type;
}

uint64_t create_style_with_type(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t result;
  unsigned int v11;
  unsigned int v12;

  if ((a1 - 1) > 3)
    v9 = 184;
  else
    v9 = qword_184F8F648[a1 - 1];
  if (kCGContextStyleContentEnd_block_invoke_once != -1)
    dispatch_once(&kCGContextStyleContentEnd_block_invoke_once, &__block_literal_global_18_14596);
  result = CGTypeCreateInstance(CGStyleGetTypeID_style_type_id, v9, a3, a4, a5, a6, a7, a8);
  do
  {
    v11 = __ldxr((unsigned int *)&identifier_14597);
    v12 = v11 + 1;
  }
  while (__stxr(v12, (unsigned int *)&identifier_14597));
  *(_DWORD *)(result + 16) = v12;
  *(_DWORD *)(result + 20) = a1;
  return result;
}

void CGContextSetShouldAntialias(CGContextRef c, BOOL shouldAntialias)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGContextRef v8;

  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      CGGStateSetShouldAntialias(*((_QWORD *)c + 12), shouldAntialias);
      return;
    }
    v8 = c;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetShouldAntialias", (uint64_t)v8, v2, v3, v4, v5, v6, v7);
}

void CGContextClipToMask(CGContextRef c, CGRect rect, CGImageRef mask)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  CGImageRef v19;
  __CFData *mask_from_image;
  CGContextRef v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  unsigned int *v26;
  const void *v27;

  if (!c)
  {
    v21 = 0;
LABEL_25:
    handle_invalid_context((char)"CGContextClipToMask", (uint64_t)v21, v3, v4, v5, v6, v7, v8);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v21 = c;
    goto LABEL_25;
  }
  height = rect.size.height;
  width = rect.size.width;
  y = rect.origin.y;
  x = rect.origin.x;
  if (rect.origin.x != INFINITY && rect.origin.y != INFINITY)
  {
    v19 = mask;
    if (!mask)
      goto LABEL_31;
    if ((*((_BYTE *)mask + 39) & 2) != 0)
    {
      mask_from_image = 0;
    }
    else
    {
      mask_from_image = create_mask_from_image(mask, (uint64_t)mask, v3, v4, v5, v6, v7, v8);
      v19 = mask_from_image;
      if (!mask_from_image)
      {
LABEL_31:
        v27 = (const void *)*((_QWORD *)c + 21);
        if (v27)
        {
          CFRelease(v27);
          *((_QWORD *)c + 21) = 0;
        }
        return;
      }
    }
    v22 = *((_QWORD *)c + 12);
    v23 = (char *)malloc_type_malloc(0x60uLL, 0x2062DE7BuLL);
    *(_DWORD *)v23 = 1;
    v24 = *(_OWORD *)(v22 + 56);
    v25 = *(_OWORD *)(v22 + 40);
    *(_OWORD *)(v23 + 8) = *(_OWORD *)(v22 + 24);
    *(_OWORD *)(v23 + 24) = v25;
    *(_OWORD *)(v23 + 40) = v24;
    CFRetain(v19);
    *((_QWORD *)v23 + 7) = v19;
    *((CGFloat *)v23 + 8) = x;
    *((CGFloat *)v23 + 9) = y;
    *((CGFloat *)v23 + 10) = width;
    *((CGFloat *)v23 + 11) = height;
    v26 = CGClipCreateWithMask((unsigned int *)v23, HIBYTE(*(_DWORD *)(*(_QWORD *)(v22 + 120) + 4)) & 1);
    CGClipMaskRelease((unsigned int *)v23);
    if (v26)
    {
      maybeCopyClipState(v22);
      CGClipStackAddClip(*(_QWORD *)(v22 + 112), (uint64_t)v26);
      CGClipRelease((char *)v26);
    }
    if (mask_from_image)
      CFRelease(mask_from_image);
    goto LABEL_31;
  }
}

void CGClipMaskRelease(unsigned int *a1)
{
  unsigned int v2;
  unsigned int v3;
  const void *v4;

  if (a1)
  {
    do
    {
      v2 = __ldxr(a1);
      v3 = v2 - 1;
    }
    while (__stxr(v3, a1));
    if (!v3)
    {
      v4 = (const void *)*((_QWORD *)a1 + 7);
      if (v4)
        CFRelease(v4);
      free(a1);
    }
  }
}

__CFData *create_mask_from_image(_DWORD *image, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unint64_t v10;
  int v11;
  int v12;
  CGColorSpaceRef ColorSpace;
  int v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *DataProviderInternal;
  char v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (image)
  {
    v9 = image[9];
    if ((v9 & 0x2000000) != 0)
      _CGHandleAssert("create_mask_from_image", 625, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Context/CGContextPath.c", "CGImageIsMask(image) == false", "image is not a mask", a6, a7, a8, v21);
    v10 = *((_QWORD *)image + 7);
    v11 = (v9 >> 26) & 1;
    v12 = (v9 >> 27) & 1;
  }
  else
  {
    v11 = 0;
    v10 = 0;
    v12 = 0;
  }
  ColorSpace = CGImageGetColorSpace((CGImageRef)image);
  if (ColorSpace && (*(_DWORD *)(*((_QWORD *)ColorSpace + 3) + 24) ? (v14 = 1) : (v14 = v11), ((v14 | v12) & 1) == 0))
  {
    v22 = xmmword_185000460;
    if (image)
    {
      v16 = *((_QWORD *)image + 5);
      v17 = *((_QWORD *)image + 6);
      v18 = *((_QWORD *)image + 8);
      v19 = *((_QWORD *)image + 9);
    }
    else
    {
      v18 = 0;
      v16 = 0;
      v17 = 0;
      v19 = 0;
    }
    DataProviderInternal = CGImageGetDataProviderInternal((char *)image, 0);
    return mask_create(v16, v17, v10, v18, v19, (CGDataProviderRef)DataProviderInternal, (double *)&v22, 1, 4);
  }
  else
  {
    if (get_masking_options_predicate != -1)
      dispatch_once(&get_masking_options_predicate, &__block_literal_global_13133);
    return (__CFData *)CGColorTransformConvertImage(image, 0, (CFDictionaryRef)get_masking_options_options);
  }
}

void clip(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const CGPath *v9;
  int v10;
  uint64_t v11;

  if (!a1)
  {
    v11 = 0;
LABEL_8:
    handle_invalid_context((char)"clip", v11, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    v11 = a1;
    goto LABEL_8;
  }
  v9 = *(const CGPath **)(a1 + 168);
  if (v9 && (v10 = a2, !CGPathIsEmpty(v9)))
  {
    CGGStateClipToOwnedPath(*(uint64_t **)(a1 + 96), *(CGPathRef *)(a1 + 168), v10);
    *(_QWORD *)(a1 + 168) = 0;
  }
  else
  {
    CGPostError((uint64_t)"%s: empty path.", a2, a3, a4, a5, a6, a7, a8, (char)"clip");
  }
}

void CGGStateClipToPath(uint64_t *a1, CFTypeRef cf, int a3)
{
  CFTypeID v6;
  unsigned int *v7;
  char *v8;

  if (cf)
  {
    if (CGPathDisableTypeValidation || (v6 = CFGetTypeID(cf), v6 == CGPathGetTypeID()))
    {
      if (a3 == 2)
      {
        v7 = (unsigned int *)CGClipStrokeCreateWithGState((uint64_t)a1);
        v8 = CGClipCreateWithStrokedPath(cf, (uint64_t)v7);
        CGClipStrokeRelease(v7);
        if (!v8)
          return;
        goto LABEL_6;
      }
      v8 = (char *)CGClipCreateWithPath(cf, a3, HIBYTE(*(_DWORD *)(a1[15] + 4)) & 1, *(double *)(a1[18] + 8));
      if (v8)
      {
LABEL_6:
        maybeCopyClipState((uint64_t)a1);
        CGClipStackAddClip(a1[14], (uint64_t)v8);
        CGClipRelease(v8);
      }
    }
  }
}

void CGClipStackAddClip(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t i;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  if (!a1 || !a2)
    return;
  if (!*(_BYTE *)(a2 + 8))
  {
    CGClipStackAddRect(a1, *(unsigned __int8 *)(a2 + 10), *(CGFloat *)(a2 + 24), *(CGFloat *)(a2 + 32), *(CGFloat *)(a2 + 40), *(CGFloat *)(a2 + 48));
    return;
  }
  v5 = *(_QWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 120);
  if (v4 == v5)
  {
    v5 = 2 * v4 + 3;
    if (v4 == 3)
    {
      v6 = malloc_type_realloc(0, 8 * v5, 0x7492344AuLL);
      v7 = *(_QWORD *)(a1 + 120);
      if (v7)
      {
        for (i = 0; i != v7; ++i)
          v6[i] = *(_QWORD *)(a1 + 128 + 8 * i);
LABEL_13:
        *(_QWORD *)(a1 + 128) = v6;
        *(_QWORD *)(a1 + 112) = v5;
        goto LABEL_14;
      }
    }
    else
    {
      v6 = malloc_type_realloc(*(void **)(a1 + 128), 8 * v5, 0x7492344AuLL);
    }
    if (!v6)
      return;
    goto LABEL_13;
  }
  do
LABEL_14:
    v9 = __ldxr((unsigned int *)a2);
  while (__stxr(v9 + 1, (unsigned int *)a2));
  if (v5 == 3)
    v10 = a1 + 128;
  else
    v10 = *(_QWORD *)(a1 + 128);
  v11 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v11 + 1;
  *(_QWORD *)(v10 + 8 * v11) = a2;
  if (*(_BYTE *)(a2 + 8) == 3)
    *(_DWORD *)(a1 + 8) |= 1u;
  do
  {
    v12 = __ldxr(&identifier_20714);
    v13 = v12 + 1;
  }
  while (__stxr(v13, &identifier_20714));
  *(_DWORD *)(a1 + 4) = v13;
}

CGFloat *CGClipCreateWithPath(CFTypeRef cf, __int16 a2, char a3, double a4)
{
  CFTypeID v8;
  double *v9;
  double *v10;
  CGMutablePathRef MutableCopy;
  CGRect v13;

  if (!cf)
    return 0;
  if (!CGPathDisableTypeValidation)
  {
    v8 = CFGetTypeID(cf);
    if (v8 != CGPathGetTypeID())
      return 0;
  }
  memset(&v13, 0, sizeof(v13));
  if (CGPathIsRect((CGPathRef)cf, &v13))
    return CGClipCreateWithRect(0, a3, v13.origin.x, v13.origin.y, v13.size.width, v13.size.height);
  v10 = (double *)CGClipCreate(a2, a3);
  v9 = v10;
  if (v10)
  {
    v10[4] = a4;
    MutableCopy = CGPathCreateMutableCopy((CGPathRef)cf);
    *((_QWORD *)v9 + 3) = MutableCopy;
    if (!MutableCopy)
    {
      CGClipRelease((char *)v9);
      return 0;
    }
  }
  return v9;
}

CGMutablePathRef CGPathCreateMutableCopy(CGPathRef path)
{
  CFTypeID v2;
  CFTypeID TypeID;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Instance;
  CGPath *v11;

  if (!path)
    return 0;
  if (!CGPathDisableTypeValidation)
  {
    v2 = CFGetTypeID(path);
    if (v2 != CGPathGetTypeID())
      return 0;
  }
  TypeID = CGPathGetTypeID();
  Instance = CGTypeCreateInstance(TypeID, 128, v4, v5, v6, v7, v8, v9);
  v11 = (CGPath *)Instance;
  if (Instance)
    CG::Path::Path((CG::Path *)(Instance + 16), (CGPathRef)((char *)path + 16));
  return v11;
}

uint64_t CG::Path::is_rect(CG::Path *this, CGRect *a2, CGAffineTransform *a3)
{
  __int128 v4;
  __int128 v5;
  int v6;
  uint64_t v8;
  double *v9;
  double v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double *v17;
  uint64_t v18;
  double v19;
  uint64_t v22;
  BOOL v23;
  BOOL v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  __int128 v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGAffineTransform v41;

  if (*(_DWORD *)this == 8)
  {
    v6 = *((_DWORD *)this + 3);
    if (v6 == 135752 || v6 == 16968)
    {
      v8 = *((unsigned __int16 *)this + 4);
      if (!*((_WORD *)this + 4))
      {
        v13 = -INFINITY;
        v14 = INFINITY;
        v10 = INFINITY;
        v11 = -INFINITY;
LABEL_53:
        if (a2)
        {
          a2->origin.x = v14;
          a2->origin.y = v10;
          a2->size.width = v13 - v14;
          a2->size.height = v11 - v10;
        }
        if (a3)
          *a3 = CGAffineTransformIdentity;
        return 1;
      }
      v9 = (double *)((char *)this + 24);
      v10 = INFINITY;
      v11 = -INFINITY;
      v12 = *((unsigned __int16 *)this + 4);
      v13 = -INFINITY;
      v14 = INFINITY;
      do
      {
        v15 = *(v9 - 1);
        v16 = *v9;
        if (v15 < v14)
          v14 = *(v9 - 1);
        if (v16 < v10)
          v10 = *v9;
        if (v13 < v15)
          v13 = *(v9 - 1);
        if (v11 < v16)
          v11 = *v9;
        v9 += 2;
        --v12;
      }
      while (v12);
      v17 = (double *)((char *)this + 24);
      v18 = *((unsigned __int16 *)this + 4);
      while (1)
      {
        v19 = *(v17 - 1);
        if (v19 != v14 && v19 != v13)
          break;
        if (*v17 != v10 && *v17 != v11)
          break;
        v17 += 2;
        if (!--v18)
        {
          if (v8 >= 2)
          {
            v22 = 0;
            v23 = 0;
            v24 = 0;
            v25 = *((double *)this + 2);
            v26 = *((double *)this + 3);
            v27 = 16 * v8 - 16;
            while (1)
            {
              v28 = *(double *)((char *)this + v22 + 32);
              v29 = *(double *)((char *)this + v22 + 40);
              if (v22 == 64)
              {
                if (v28 != v25 || v29 != v26)
                  return 0;
              }
              else
              {
                v31 = 0;
                if ((v28 != v25) == (v29 != v26) || v24 && v28 != v25 || v23 && v29 != v26)
                  return v31;
                v24 = v28 != v25;
                v23 = v29 != v26;
              }
              v22 += 16;
              v26 = v29;
              v25 = v28;
              if (v27 == v22)
                goto LABEL_53;
            }
          }
          goto LABEL_53;
        }
      }
    }
  }
  else if (*(_DWORD *)this == 1)
  {
    if (a3)
    {
      if (a2)
        *a2 = unit_rect;
      v4 = *(_OWORD *)((char *)this + 8);
      v5 = *(_OWORD *)((char *)this + 40);
      *(_OWORD *)&a3->c = *(_OWORD *)((char *)this + 24);
      *(_OWORD *)&a3->tx = v5;
      *(_OWORD *)&a3->a = v4;
      return 1;
    }
    v32 = *((double *)this + 1);
    v33 = *((double *)this + 2);
    v34 = *((double *)this + 3);
    if (v33 == 0.0 && v34 == 0.0)
    {
      v35 = *((double *)this + 4);
    }
    else
    {
      if (v32 != 0.0)
        return 0;
      v35 = *((double *)this + 4);
      if (v35 != 0.0)
        return 0;
    }
    if (v32 * v35 - v33 * v34 >= 0.0)
    {
      if (a2)
      {
        v36 = *(_OWORD *)((char *)this + 24);
        *(_OWORD *)&v41.a = *(_OWORD *)((char *)this + 8);
        *(_OWORD *)&v41.c = v36;
        *(_OWORD *)&v41.tx = *(_OWORD *)((char *)this + 40);
        a2->origin.x = transform_unit_rect(&v41);
        a2->origin.y = v37;
        a2->size.width = v38;
        a2->size.height = v39;
      }
      return 1;
    }
  }
  return 0;
}

BOOL CGPathIsRect(CGPathRef path, CGRect *rect)
{
  CFTypeID v4;

  if (path && (CGPathDisableTypeValidation || (v4 = CFGetTypeID(path), v4 == CGPathGetTypeID())))
    return CG::Path::is_rect((CGPathRef)((char *)path + 16), rect, 0);
  else
    return 0;
}

_DWORD *CGClipCreate(__int16 a1, char a2)
{
  _DWORD *result;
  unsigned int v5;
  unsigned int v6;

  result = malloc_type_malloc(0x38uLL, 0x2062DE7BuLL);
  if (result)
  {
    *result = 1;
    do
    {
      v5 = __ldxr((unsigned int *)&CGClipCreate_identifier);
      v6 = v5 + 1;
    }
    while (__stxr(v6, (unsigned int *)&CGClipCreate_identifier));
    result[1] = v6;
    *((_WORD *)result + 4) = (a1 << 8) | 2;
    *((_QWORD *)result + 2) = 0;
    *((_BYTE *)result + 10) = a2;
  }
  return result;
}

_DWORD *CGColorTransformConvertImage(_DWORD *image, int a2, CFDictionaryRef theDict)
{
  _DWORD *v3;
  const void *Value;
  const void *v6;
  char *v7;
  int v8;
  _BOOL4 v9;
  const void *v10;
  BOOL v11;
  const void *v12;
  CGColorSpaceRef ColorSpace;
  uint64_t v14;
  uint64_t v15;
  const __CFString *v16;
  uint64_t v17;
  CGColorSpaceRef v18;
  int Type;
  uint64_t v20;
  int v21;
  CGColorSpaceRef *v22;
  uint64_t v23;
  const __CFString *v24;
  const __CFNumber *v25;
  const __CFNumber *v26;
  const __CFNumber *v27;
  unint64_t Size;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  CGInterpolationQuality v32;
  int UpscaledComponentType;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t BitsPerComponent;
  CGImageAlphaInfo AlphaInfo;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  CGContext *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  CGContext *v55;
  double v56;
  _BOOL4 ShouldInterpolate;
  const void *v58;
  CGImageRef Copy;
  CGImageRef v60;
  _BOOL4 v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *DataProviderInternal;
  __CFData *v69;
  int v70;
  unsigned __int8 RenderingIntent;
  _BOOL4 v74;
  CGInterpolationQuality v75;
  uint64_t v76;
  __int128 valuePtr;
  uint64_t v78;
  CGRect v79;

  v3 = image;
  v78 = *MEMORY[0x1E0C80C00];
  if (!image)
    return v3;
  if (theDict)
  {
    Value = CFDictionaryGetValue(theDict, CFSTR("kCGColorTransformCreateMask"));
    v6 = (const void *)*MEMORY[0x1E0C9AE50];
    v7 = (char *)(v3 + 9);
    v8 = v3[9] & 0xC000000;
    v9 = v8 != 0;
    v10 = CFDictionaryGetValue(theDict, CFSTR("kCGColorTransformFlattenImage"));
    v11 = v10 == v6;
    v74 = Value == v6;
    if (Value == v6)
    {
      if (!v8)
      {
        v18 = CGColorSpaceCreateWithName(CFSTR("kCGColorSpaceGenericGrayGamma2_2"));
        goto LABEL_31;
      }
LABEL_27:
      v18 = 0;
LABEL_31:
      ColorSpace = 0;
      v76 = 0;
      *(_QWORD *)&valuePtr = 0;
      v75 = kCGInterpolationDefault;
      goto LABEL_50;
    }
    v12 = v10;
    ColorSpace = CGImageGetColorSpace((CGImageRef)v3);
    if (!ColorSpace)
    {
      if (v12 == v6)
        goto LABEL_19;
      goto LABEL_27;
    }
  }
  else
  {
    v7 = (char *)(image + 9);
    v9 = (image[9] & 0xC000000) != 0;
    ColorSpace = CGImageGetColorSpace((CGImageRef)image);
    if (!ColorSpace)
    {
      v18 = 0;
      v74 = 0;
      v76 = 0;
      *(_QWORD *)&valuePtr = 0;
LABEL_58:
      v75 = kCGInterpolationDefault;
      goto LABEL_59;
    }
    v74 = 0;
    v11 = 0;
  }
  v14 = *((_QWORD *)ColorSpace + 3);
  if (*(_BYTE *)(v14 + 10) && *(_DWORD *)(v14 + 24) != 3)
  {
    CFRetain(ColorSpace);
    v18 = ColorSpace;
    goto LABEL_48;
  }
  if (!v11)
  {
    CFRetain(ColorSpace);
    v15 = *(_QWORD *)(*((_QWORD *)ColorSpace + 3) + 40);
    switch(v15)
    {
      case 4:
        v16 = CFSTR("kCGColorSpaceGenericCMYK");
        break;
      case 3:
        v16 = CFSTR("kCGColorSpaceSRGB");
        break;
      case 1:
        v16 = CFSTR("kCGColorSpaceGenericGrayGamma2_2");
        break;
      default:
        v18 = 0;
        goto LABEL_49;
    }
    v18 = CGColorSpaceCreateWithName(v16);
    goto LABEL_49;
  }
LABEL_19:
  while (1)
  {
    v18 = ColorSpace;
    Type = CGColorSpaceGetType(ColorSpace);
    if (Type != 7)
      break;
    ColorSpace = 0;
    if (v18)
    {
      ColorSpace = 0;
      v17 = *((_QWORD *)v18 + 3);
      if ((*(_DWORD *)(v17 + 24) - 5) <= 1)
        ColorSpace = **(CGColorSpaceRef **)(v17 + 88);
    }
  }
  if (Type == 8)
  {
    if (!ColorSpace)
      goto LABEL_48;
    v20 = *((_QWORD *)ColorSpace + 3);
    v21 = *(_DWORD *)(v20 + 20);
    switch(v21)
    {
      case 6:
        v22 = (CGColorSpaceRef *)(*(_QWORD *)(v20 + 88) + 56);
        break;
      case 10:
        v22 = (CGColorSpaceRef *)(*(_QWORD *)(v20 + 88) + 48);
        break;
      case 8:
        v22 = (CGColorSpaceRef *)(*(_QWORD *)(v20 + 88) + 8);
        break;
      default:
LABEL_44:
        v18 = 0;
        goto LABEL_48;
    }
    v18 = *v22;
  }
  if (v18)
  {
    v23 = *(_QWORD *)(*((_QWORD *)v18 + 3) + 40);
    switch(v23)
    {
      case 4:
        v24 = CFSTR("kCGColorSpaceGenericCMYK");
        goto LABEL_47;
      case 3:
        v24 = CFSTR("kCGColorSpaceSRGB");
        goto LABEL_47;
      case 1:
        v24 = CFSTR("kCGColorSpaceGenericGrayGamma2_2");
LABEL_47:
        v18 = CGColorSpaceCreateWithName(v24);
        goto LABEL_48;
    }
    goto LABEL_44;
  }
LABEL_48:
  ColorSpace = 0;
LABEL_49:
  v76 = 0;
  *(_QWORD *)&valuePtr = 0;
  v75 = kCGInterpolationDefault;
  if (!theDict)
    goto LABEL_59;
LABEL_50:
  v25 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("kCGColorTransformConvertImageWidth"));
  if (v25 && !CFNumberGetValue(v25, kCFNumberCFIndexType, &valuePtr))
    *(_QWORD *)&valuePtr = 0;
  v26 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("kCGColorTransformConvertImageHeight"));
  if (v26 && !CFNumberGetValue(v26, kCFNumberCFIndexType, &v76))
    v76 = 0;
  v27 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("kCGColorTransformConvertImageQuality"));
  if (v27 && !CFNumberGetValue(v27, kCFNumberSInt32Type, &v75))
    goto LABEL_58;
LABEL_59:
  Size = CGImageGetSize(v3);
  if ((_QWORD)valuePtr)
    v30 = valuePtr;
  else
    v30 = Size;
  if (v76)
    v31 = v76;
  else
    v31 = v29;
  RenderingIntent = CGImageGetRenderingIntent((CGImageRef)v3);
  v32 = v75;
  if (v75 == kCGInterpolationDefault)
  {
    if (CGImageGetShouldInterpolate((CGImageRef)v3))
      v32 = kCGInterpolationHigh;
    else
      v32 = kCGInterpolationNone;
  }
  if (ColorSpace && *(_DWORD *)(*((_QWORD *)ColorSpace + 3) + 24) == 5)
    v32 = kCGInterpolationNone;
  UpscaledComponentType = CGImageGetUpscaledComponentType((CGImage *)v3);
  BitsPerComponent = CGPixelComponentGetBitsPerComponent(UpscaledComponentType, v34, v35, v36, v37, v38, v39, v40);
  AlphaInfo = CGImageGetAlphaInfo((CGImageRef)v3);
  if (v18)
  {
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    switch(*(_QWORD *)(*((_QWORD *)v18 + 3) + 40))
    {
      case 0:
        break;
      case 1:
        if (v74)
        {
          v46 = 0;
          v9 = 0;
          v43 = 0;
          v44 = 8;
          v45 = 8;
          goto LABEL_83;
        }
        v67 = BitsPerComponent >> 3;
        v45 = BitsPerComponent;
LABEL_124:
        v46 = v30 * v67;
        if (v9)
        {
          v47 = (CGContext *)CGBitmapContextCreateWithAlpha(0, v30, v31, BitsPerComponent, v45, v46, v18, 0, 72.0, 72.0, (uint64_t)theDict);
          goto LABEL_85;
        }
        v43 = 0;
        goto LABEL_84;
      case 2:
        goto LABEL_83;
      case 3:
        v45 = 4 * BitsPerComponent;
        v46 = v30 * ((BitsPerComponent >> 1) & 0x7FFFFFFFFFFFFFFCLL);
        if (v9)
        {
          if ((v7[3] & 4) == 0)
          {
LABEL_109:
            v9 = 1;
            v44 = BitsPerComponent;
            v43 = 1;
            goto LABEL_83;
          }
          if (AlphaInfo == kCGImageAlphaFirst)
          {
            v43 = 2;
            v9 = 1;
          }
          else
          {
            if (AlphaInfo == kCGImageAlphaLast)
              goto LABEL_109;
            v43 = 1;
            if (AlphaInfo)
            {
              v44 = BitsPerComponent;
              v9 = 1;
              v43 = AlphaInfo;
              goto LABEL_83;
            }
          }
        }
        else
        {
          v43 = 5;
        }
        v44 = BitsPerComponent;
        goto LABEL_83;
      case 4:
        v45 = 4 * BitsPerComponent;
        v67 = (BitsPerComponent >> 1) & 0x7FFFFFFFFFFFFFFCLL;
        goto LABEL_124;
      default:
        v45 = 0;
        v46 = 0;
        goto LABEL_83;
    }
  }
  if (v74)
    v44 = 8;
  else
    v44 = 0;
  if (v74)
    v45 = 8;
  else
    v45 = 0;
  v46 = 0;
  if (v74)
  {
    v9 = 1;
    v43 = 7;
  }
  else
  {
    v43 = 0;
  }
LABEL_83:
  BitsPerComponent = v44;
LABEL_84:
  v47 = (CGContext *)CGBitmapContextCreateWithDataAndDictionary(0, v30, v31, BitsPerComponent, v45, v46, v18, v43, 72.0, 72.0, 0, 0, (uint64_t)theDict);
LABEL_85:
  v55 = v47;
  if (v47)
  {
    if (v9)
      CGContextClear((uint64_t)v47, v48, v49, v50, v51, v52, v53, v54);
    else
      CGContextErase((uint64_t)v47, v48, v49, v50, v51, v52, v53, v54);
    v56 = (double)v30;
    CGContextSetInterpolationQuality(v55, v32);
    ShouldInterpolate = CGImageGetShouldInterpolate((CGImageRef)v3);
    if (CGImageGetRenderingIntent((CGImageRef)v3) != a2 || ColorSpace)
    {
      Copy = CGImageCreateCopy((CGImageRef)v3);
      v3 = Copy;
      *((_BYTE *)Copy + 37) = a2;
      if (ColorSpace)
      {
        CGColorSpaceRelease(*((CGColorSpaceRef *)Copy + 18));
        if (v18)
          CFRetain(v18);
        *((_QWORD *)v3 + 18) = v18;
      }
      v58 = v3;
    }
    else
    {
      v58 = 0;
    }
    v79.origin.x = 0.0;
    v79.origin.y = 0.0;
    v79.size.width = v56;
    v79.size.height = (double)(unint64_t)v31;
    CGContextDrawImage(v55, v79, (CGImageRef)v3);
    if (v58)
      CFRelease(v58);
    v60 = CGBitmapContextCreateImage(v55);
    v3 = v60;
    v61 = v74;
    if (!v18)
      v61 = 0;
    if (v61)
    {
      valuePtr = xmmword_185000460;
      if (v60)
      {
        v62 = *((_QWORD *)v60 + 5);
        v63 = *((_QWORD *)v60 + 6);
        v65 = *((_QWORD *)v60 + 7);
        v64 = *((_QWORD *)v60 + 8);
        v66 = *((_QWORD *)v60 + 9);
      }
      else
      {
        v64 = 0;
        v63 = 0;
        v62 = 0;
        v65 = 0;
        v66 = 0;
      }
      DataProviderInternal = CGImageGetDataProviderInternal((char *)v60, 0);
      v69 = mask_create(v62, v63, v65, v64, v66, (CGDataProviderRef)DataProviderInternal, (double *)&valuePtr, 1, 4);
      if (v3)
        CFRelease(v3);
      v3 = v69;
    }
    if (ColorSpace)
    {
      CGColorSpaceRelease(*((CGColorSpaceRef *)v3 + 18));
      *((_QWORD *)v3 + 18) = ColorSpace;
    }
    if (ShouldInterpolate)
      v70 = 0x1000000;
    else
      v70 = 0;
    v3[9] = v70 & 0xFFFF00FF | (RenderingIntent << 8) | v3[9] & 0xFEFF00FF;
    CFRelease(v55);
  }
  else
  {
    v3 = 0;
  }
  CGColorSpaceRelease(v18);
  CGColorSpaceRelease(ColorSpace);
  return v3;
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  CGColorSpaceRef ColorSpace;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CGInterpolationQuality InterpolationQuality;
  CGContextRef v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float HeadroomInfo;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  float v50;
  CFDictionaryRef v51;
  CFDictionaryRef v52;
  const __CFDictionary *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  CGColorSpaceRef v62;
  float v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *values;
  void *keys;

  if (!c)
  {
    v31 = 0;
LABEL_15:
    handle_invalid_context((char)"CGContextDrawImage", (uint64_t)v31, v3, v4, v5, v6, v7, v8);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v31 = c;
    goto LABEL_15;
  }
  height = rect.size.height;
  width = rect.size.width;
  y = rect.origin.y;
  x = rect.origin.x;
  if (*((_DWORD *)c + 6) != 4)
    goto LABEL_17;
  ColorSpace = CGImageGetColorSpace(image);
  if (!ColorSpace || !*(_BYTE *)(*((_QWORD *)ColorSpace + 3) + 16))
    goto LABEL_17;
  if (*((_DWORD *)c + 4) != 1129601108 || *((_DWORD *)c + 6) != 4)
  {
    handle_invalid_context((char)"CGBitmapContextGetColorSpace", (uint64_t)c, v16, v17, v18, v19, v20, v21);
LABEL_17:
    v32 = 0;
    InterpolationQuality = kCGInterpolationDefault;
    v76 = 0;
    goto LABEL_18;
  }
  v22 = *((_QWORD *)c + 4);
  v23 = *(_QWORD *)(v22 + 32);
  if (!v23 || !*(_BYTE *)(*(_QWORD *)(v23 + 24) + 16) || *(_DWORD *)(v22 + 40) != 4353)
    goto LABEL_17;
  v76 = *(_QWORD *)(*((_QWORD *)c + 14) + 72);
  InterpolationQuality = CGContextGetInterpolationQuality(c);
  if (*((_DWORD *)c + 4) == 1129601108)
    *(_QWORD *)(*((_QWORD *)c + 14) + 72) = 0x100000001;
  else
    handle_invalid_context((char)"CGContextSetInterpolationQualityRange", (uint64_t)c, v24, v25, v26, v27, v28, v29);
  v32 = 1;
  CGContextSetInterpolationQuality(c, kCGInterpolationNone);
LABEL_18:
  HeadroomInfo = CGImageGetHeadroomInfo(image, 0);
  if (HeadroomInfo <= 1.0)
    goto LABEL_37;
  v41 = CGContextGetColorSpace((uint64_t)c, v33, v34, v35, v36, v37, v38, v39);
  if (v41)
  {
    v49 = (_QWORD *)v41;
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      v50 = *(float *)(*(_QWORD *)(*((_QWORD *)c + 12) + 120) + 48);
      if (v50 != 0.0)
        goto LABEL_31;
    }
    else
    {
      handle_invalid_context((char)"CGContextGetEDRTargetHeadroom", (uint64_t)c, v43, v44, v45, v46, v47, v48);
      v50 = 0.0;
    }
    if (!*(_BYTE *)(v49[3] + 13))
      v50 = CGColorSpaceGetHeadroomInfo(v49, 0);
LABEL_31:
    if (v50 > 0.0)
    {
      if (v50 < 1.0)
      {
        v61 = "%s: Cannot create tone mapping settings. target headroom %f < 1.0";
LABEL_36:
        CGPostError((uint64_t)v61, v42, v43, v44, v45, v46, v47, v48, (char)"CGContextDrawImage");
        goto LABEL_37;
      }
      if (HeadroomInfo < 1.0)
      {
        v61 = "%s: Cannot create tone mapping settings. source headroom %f < 1.0";
        goto LABEL_36;
      }
      if (v50 >= HeadroomInfo)
        goto LABEL_37;
      keys = 0;
      v62 = CGImageGetColorSpace(image);
      if (CGImageDefaultReferenceWhite_once != -1)
        dispatch_once(&CGImageDefaultReferenceWhite_once, &__block_literal_global_205);
      v63 = CGGetFloatValue((const void *)CGImageDefaultReferenceWhite_media_white);
      if (CGCreateSettingsForDefaultToneMapping(v49, v62, (CFMutableDictionaryRef *)&keys, v50, HeadroomInfo, v63, v64, v65, v66, v67, v68))
      {
        if (keys)
        {
          v77 = keys;
          values = CFSTR("kCGColorConversionInfoOptions");
          v53 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, (const void **)&v77, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v54 = keys;
          goto LABEL_25;
        }
      }
      else
      {
        CGPostError((uint64_t)"%s: Cannot create tone mapping settings. CGCreateSettingsForDefaultToneMapping returned false", v69, v70, v71, v72, v73, v74, v75, (char)"CGContextDrawImage");
      }
      v53 = 0;
LABEL_26:
      CGContextDrawImageWithOptions((uint64_t)c, image, v53, x, y, width, height);
      if (v53)
        CFRelease(v53);
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  v51 = CGCreatePayloadForToneMapping(0, 0, v43, v44, v45, v46, v47, v48);
  if (v51)
  {
    v52 = v51;
    values = v51;
    keys = CFSTR("kCGColorConversionInfoPayload");
    v53 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v54 = v52;
LABEL_25:
    CFRelease(v54);
    goto LABEL_26;
  }
LABEL_37:
  CGContextDrawImageWithOptions((uint64_t)c, image, 0, x, y, width, height);
LABEL_38:
  if (v32)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
      *(_QWORD *)(*((_QWORD *)c + 14) + 72) = v76;
    else
      handle_invalid_context((char)"CGContextSetInterpolationQualityRange", (uint64_t)c, v55, v56, v57, v58, v59, v60);
    CGContextSetInterpolationQuality(c, InterpolationQuality);
  }
}

unint64_t CGImageGetImageBytesPerRowForPixelInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t BitsPerComponent;
  char *DataProviderInternal;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t result;
  unint64_t v20;
  char v21;

  v10 = *(_DWORD *)(a3 + 24) - 1;
  if (v10 > 8)
    v11 = 0;
  else
    v11 = qword_184F7EB80[v10];
  v12 = *(_QWORD *)(a3 + 16);
  BitsPerComponent = CGPixelComponentGetBitsPerComponent(*(_DWORD *)a3, a2, a3, a4, a5, a6, a7, a8);
  DataProviderInternal = CGImageGetDataProviderInternal((char *)a1, 0);
  if (!DataProviderInternal)
    _CGHandleAssert("CGDataProviderGetType", 212, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProvider.c", "provider != NULL", "provider is NULL", v15, v16, v17, v21);
  v18 = DataProviderInternal;
  result = (unint64_t)((v11 + v12) * a2 * BitsPerComponent + 7) >> 3;
  if (*((_DWORD *)v18 + 5))
  {
    if (a1)
      v20 = *(_QWORD *)(a1 + 72) - ((unint64_t)(*(_QWORD *)(a1 + 40) * *(_QWORD *)(a1 + 64) + 7) >> 3);
    else
      v20 = 0;
    result += v20;
  }
  if (!result)
    _CGHandleAssert("CGImageGetImageBytesPerRowForPixelInfo", 3895, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImage.c", "bytes_per_row != 0", "zero rowBytes", v15, v16, v17, v21);
  return result;
}

uint64_t CGContextDrawImageWithOptions(uint64_t a1, CGImage *cf, const __CFDictionary *a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  CGImage *v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFTypeID v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *DataProviderInternal;
  CFTypeID v29;
  uint64_t v30;
  CGImage *CopyWithProtectedDataProvider;
  CGImage *v32;
  uint64_t CopyWithResolvedOptions;
  CGImage *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const CGPath *ClipPath;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const void *v49;
  uint64_t v50;
  void (*v51)(double, double, double, double);
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *DelegateName;
  uint64_t v61;
  void (*v62)(double, double, double, double);
  char v63;
  CGRect v64;
  CGRect v65;

  if (cf)
  {
    v8 = cf;
    CFRetain(cf);
    v20 = CFGetTypeID(v8);
    if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1)
      dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_211);
    if (v20 != CGImageGetTypeID_image_type_id)
      goto LABEL_35;
    v21 = *((_DWORD *)v8 + 7);
    if (v21 == 57005)
    {
      v35 = "Image %p is over released";
    }
    else
    {
      if (v21 == 48879)
      {
        if (!CGImageGetImageProvider(v8) && !CGImageGetEPSRep(v8))
        {
          DataProviderInternal = CGImageGetDataProviderInternal((char *)v8, 0);
          if ((CGDataProviderIsZombie(DataProviderInternal) & 1) != 0)
            goto LABEL_35;
        }
        if (a1)
        {
          if (*(_DWORD *)(a1 + 16) == 1129601108)
          {
            v29 = CFGetTypeID(v8);
            if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1)
              dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_211);
            if (v29 == CGImageGetTypeID_image_type_id)
            {
              v30 = 0;
              if (a4 == INFINITY)
                goto LABEL_36;
              if (a5 == INFINITY)
                goto LABEL_36;
              v30 = 0;
              if (a6 == 0.0 || a7 == 0.0)
                goto LABEL_36;
              CopyWithProtectedDataProvider = CGImageCreateCopyWithProtectedDataProvider(v8);
              if (CopyWithProtectedDataProvider)
              {
                v32 = CopyWithProtectedDataProvider;
                CFRelease(v8);
                v8 = v32;
              }
              CopyWithResolvedOptions = CGImageCreateCopyWithResolvedOptions((uint64_t)v8, a3);
              v34 = (CGImage *)CopyWithResolvedOptions;
              if (!a3 || CopyWithResolvedOptions)
              {
                if (CopyWithResolvedOptions)
                  CFRelease(v8);
                else
                  v34 = v8;
                ClipPath = (const CGPath *)CGImageGetClipPath(v34);
                if (ClipPath)
                {
                  CGContextSaveGState((CGContextRef)a1);
                  CGContextSaveGState((CGContextRef)a1);
                  CGContextTranslateCTM((CGContextRef)a1, a4, a5);
                  CGContextScaleCTM((CGContextRef)a1, a6, a7);
                  CGContextBeginPath((CGContextRef)a1);
                  CGContextAddPath((CGContextRef)a1, ClipPath);
                  CGContextRestoreGState((CGContextRef)a1);
                  clip(a1, 1, v42, v43, v44, v45, v46, v47);
                }
                if (*(_QWORD *)(a1 + 64))
                {
                  CGContextSaveGState((CGContextRef)a1);
                  v48 = (*(uint64_t (**)(uint64_t, CGImage *, _QWORD, CGFloat, CGFloat, CGFloat, CGFloat))(a1 + 64))(a1, v34, *(_QWORD *)(a1 + 72), a4, a5, a6, a7);
                  if (v48)
                  {
                    v49 = (const void *)v48;
                    v50 = *(_QWORD *)(a1 + 40);
                    if (v50)
                    {
                      v51 = *(void (**)(double, double, double, double))(v50 + 80);
                      if (v51)
                        v51(a4, a5, a6, a7);
                    }
                    CFRelease(v49);
                  }
                  CGContextRestoreGState((CGContextRef)a1);
                }
                else
                {
                  v61 = *(_QWORD *)(a1 + 40);
                  if (v61)
                  {
                    v62 = *(void (**)(double, double, double, double))(v61 + 80);
                    if (v62)
                      v62(a4, a5, a6, a7);
                  }
                }
                if (should_highlight_2x_scaled_images_once != -1)
                  dispatch_once(&should_highlight_2x_scaled_images_once, &__block_literal_global_11269);
                if (should_highlight_2x_scaled_images_highlight_2x_scaled_images
                  && is_2x_scale((CGContext *)a1, (uint64_t)v34, a4, a5, a6, a7))
                {
                  CGContextSaveGState((CGContextRef)a1);
                  CGContextSetBlendMode((CGContextRef)a1, kCGBlendModeNormal);
                  CGContextSetRGBFillColor((CGContextRef)a1, 1.0, 0.0, 0.0, 0.2);
                  v64.origin.x = a4;
                  v64.origin.y = a5;
                  v64.size.width = a6;
                  v64.size.height = a7;
                  CGContextFillRect((CGContextRef)a1, v64);
                  CGContextRestoreGState((CGContextRef)a1);
                }
                if (should_track_image_drawing_once != -1)
                  dispatch_once(&should_track_image_drawing_once, &__block_literal_global_25_11270);
                if (should_track_image_drawing_should_track)
                {
                  CGContextSaveGState((CGContextRef)a1);
                  CGContextSetBlendMode((CGContextRef)a1, kCGBlendModeNormal);
                  v52 = a7 * 0.5;
                  DelegateName = (const char *)CGContextGetDelegateName(a1, v53, v54, v55, v56, v57, v58, v59);
                  if (DelegateName && !strcmp(DelegateName, "RIPContextDelegate"))
                  {
                    CGContextSetRGBFillColor((CGContextRef)a1, 0.0, 1.0, 0.0, 0.2);
                  }
                  else
                  {
                    CGContextSetRGBFillColor((CGContextRef)a1, 0.0, 0.0, 1.0, 0.2);
                    a5 = v52;
                  }
                  v65.origin.x = a4;
                  v65.origin.y = a5;
                  v65.size.width = a6;
                  v65.size.height = v52;
                  CGContextFillRect((CGContextRef)a1, v65);
                  CGContextRestoreGState((CGContextRef)a1);
                }
                if (ClipPath)
                  CGContextRestoreGState((CGContextRef)a1);
                v30 = 1;
                v8 = v34;
                goto LABEL_36;
              }
            }
LABEL_35:
            v30 = 0;
LABEL_36:
            CFRelease(v8);
            return v30;
          }
          v39 = a1;
        }
        else
        {
          v39 = 0;
        }
        handle_invalid_context((char)"CGContextDrawImageWithOptions", v39, v22, v23, v24, v25, v26, v27);
        goto LABEL_35;
      }
      v35 = "Object %p is not a CGImageRef";
    }
    CGLog(3, (uint64_t)v35, v14, v15, v16, v17, v18, v19, (char)v8);
    if (CGOSAppleInternalBuild_predicate != -1)
      dispatch_once(&CGOSAppleInternalBuild_predicate, &__block_literal_global_16536);
    if (CGOSAppleInternalBuild_is_internal)
      _CGHandleAssert("CGImageIsZombie", 4306, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImage.c", "0", "-", v36, v37, v38, v63);
    goto LABEL_35;
  }
  return 0;
}

char *CGImageGetDataProviderInternal(char *result, int a2)
{
  char *v3;
  CFTypeID v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  unint64_t v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CGDataProvider *v16;
  CGDataProvider *v17;
  CFDataRef v18;
  const __CFData *v19;

  if (result)
  {
    v3 = result;
    v4 = CFGetTypeID(result);
    if (kCGDefaultHDRImageContentHeadroom_block_invoke_once != -1)
      dispatch_once(&kCGDefaultHDRImageContentHeadroom_block_invoke_once, &__block_literal_global_211);
    if (v4 != CGImageGetTypeID_image_type_id)
      return 0;
    if (!*((_QWORD *)v3 + 26))
      return (char *)*((_QWORD *)v3 + 19);
    pthread_mutex_lock((pthread_mutex_t *)(v3 + 80));
    if (*((_QWORD *)v3 + 19))
    {
LABEL_17:
      pthread_mutex_unlock((pthread_mutex_t *)(v3 + 80));
      return (char *)*((_QWORD *)v3 + 19);
    }
    v5 = *((_QWORD *)v3 + 26);
    if (v5)
    {
      v7 = *(double *)(v5 + 16);
      v6 = *(double *)(v5 + 24);
      v8 = *(_QWORD *)(v5 + 48);
      v9 = v8 * (unint64_t)v7;
      v10 = (double *)malloc_type_malloc(0x58uLL, 0x2062DE7BuLL);
      CGDataProviderCreateDirectWithInternalCallbacks((uint64_t)v10, v9 * (unint64_t)v6, (uint64_t)&imageProvider_callbacks, v11, v12, v13, v14, v15);
      v17 = v16;
      if (v16)
      {
        *((_BYTE *)v16 + 260) = *(_BYTE *)(v5 + 130);
        CFRetain((CFTypeRef)v5);
        *(_QWORD *)v10 = v5;
        v10[1] = 0.0;
        v10[2] = 0.0;
        v10[3] = 0.0;
        v10[4] = v7;
        v10[5] = v6;
        *((_QWORD *)v10 + 6) = v8;
        *((_QWORD *)v10 + 7) = v9;
        *((_QWORD *)v10 + 8) = v9 * (unint64_t)v6;
        *((_BYTE *)v10 + 80) = 1;
        *((_QWORD *)v17 + 35) = CGDataProviderCreateDebugString((uint64_t)v17, *(const __CFString **)(v5 + 136));
        *((_QWORD *)v10 + 9) = v17;
        if (!a2)
          goto LABEL_16;
LABEL_13:
        v18 = CGDataProviderCopyData(v17);
        if (v18)
        {
          v19 = v18;
          CGDataProviderRelease(v17);
          *((_QWORD *)v3 + 19) = CGDataProviderCreateWithCFData(v19);
          CFRelease(v19);
        }
        goto LABEL_17;
      }
      free(v10);
      if (a2)
        goto LABEL_13;
    }
    else
    {
      v17 = 0;
      if (a2)
        goto LABEL_13;
    }
LABEL_16:
    *((_QWORD *)v3 + 19) = v17;
    goto LABEL_17;
  }
  return result;
}

CFDataRef CGDataProviderCopyData(CGDataProviderRef provider)
{
  uint64_t v2;
  const UInt8 *v3;
  const __CFAllocator *v4;
  const __CFData *Mutable;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char *MutableBytePtr;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t Bytes;
  uint64_t v18;
  uint64_t v20;
  UInt8 *v21;
  CFAllocatorContext v23;
  CFRange v24;
  CFRange v25;

  if (!provider)
    return 0;
  v2 = CGDataProviderRetainBytePtr((uint64_t)provider);
  if (v2)
  {
    v3 = (const UInt8 *)v2;
    CGDataProviderRetainBytePtr((uint64_t)provider);
    v23.version = 0;
    memset(&v23.retain, 0, 40);
    v23.info = provider;
    v23.deallocate = (CFAllocatorDeallocateCallBack)provider_allocator_deallocate;
    v23.preferredSize = 0;
    v4 = CFAllocatorCreate(0, &v23);
    Mutable = CFDataCreateWithBytesNoCopy(0, v3, *((_QWORD *)provider + 4), v4);
    CGDataProviderReleaseBytePtr((uint64_t)provider);
    CFRelease(v4);
    return Mutable;
  }
  v6 = CGAccessSessionCreate(provider);
  CGDataProviderReleaseBytePtr((uint64_t)provider);
  if (!v6)
    return 0;
  if (*v6)
  {
    v7 = *(_QWORD *)(*v6 + 32);
    v8 = v7;
    if (v7 != -1)
      goto LABEL_10;
  }
  else
  {
    v7 = -1;
  }
  v8 = 0x10000;
LABEL_10:
  Mutable = CFDataCreateMutable(0, 0);
  if ((CGCFDataIncreaseLength(Mutable, v8) & 1) == 0)
  {
LABEL_35:
    CGAccessSessionRelease(v6);
    CFRelease(Mutable);
    return 0;
  }
  MutableBytePtr = (char *)CFDataGetMutableBytePtr(Mutable);
  v15 = 0;
  v16 = 0;
  while (1)
  {
    Bytes = CGAccessSessionGetBytes(v6, MutableBytePtr, v8, v10, v11, v12, v13, v14);
    if (!Bytes)
      break;
    v18 = Bytes;
    if ((v8 & 0x8000000000000000) == 0 && v8 > Bytes)
    {
      v24.location = CFDataGetLength(Mutable) - (v8 - Bytes);
      v24.length = v8 - v18;
      CFDataDeleteBytes(Mutable, v24);
      v16 += v18;
LABEL_19:
      if (v8 == v18 && v15 <= v8)
        v18 = 2 * v8;
      goto LABEL_24;
    }
    if ((v7 & 0x8000000000000000) == 0 && Bytes == v7)
      goto LABEL_42;
    v16 += Bytes;
    if ((v8 & 0x8000000000000000) == 0)
      goto LABEL_19;
LABEL_24:
    if (v18 >= 0x4000000)
      v20 = 0x4000000;
    else
      v20 = v18;
    if (v20 <= 0x4000)
      v8 = 0x4000;
    else
      v8 = v20;
    if ((CGCFDataIncreaseLength(Mutable, v8) & 1) == 0)
      goto LABEL_35;
    v21 = CFDataGetMutableBytePtr(Mutable);
    if (v21)
    {
      MutableBytePtr = (char *)&v21[v16];
    }
    else
    {
      CFRelease(Mutable);
      Mutable = 0;
      MutableBytePtr = 0;
    }
    v15 = v8;
  }
  if (CGAccessSessionHasError((CFTypeRef *)v6) || v16 < 1)
  {
    CFRelease(Mutable);
    Mutable = 0;
  }
  else
  {
    v25.location = CFDataGetLength(Mutable) - v8;
    v25.length = v8;
    CFDataDeleteBytes(Mutable, v25);
  }
LABEL_42:
  CGAccessSessionRelease(v6);
  return Mutable;
}

uint64_t CGAccessSessionGetBytes(uint64_t *a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  char vars0;

  if (!*a1)
    _CGHandleAssert("CGDataProviderGetType", 212, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/DataManagers/CGDataProvider.c", "provider != NULL", "provider is NULL", a6, a7, a8, vars0);
  switch(*(_DWORD *)(*a1 + 20))
  {
    case 0:
    case 2:
      result = get_chunks_direct(a1, a3, 0, 1, a2, 0);
      break;
    case 1:
    case 3:
      result = get_chunks_sequential(a1, a3, 0, 1, (uint64_t)a2, 0);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void CGContextClear(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void (*v9)(void);
  uint64_t v10;

  if (!a1)
  {
    v10 = 0;
LABEL_7:
    handle_invalid_context((char)"CGContextClear", v10, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    v10 = a1;
    goto LABEL_7;
  }
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    v9 = *(void (**)(void))(v8 + 168);
    if (v9)
      v9();
  }
}

CFStringRef CGDataProviderCreateDebugString(uint64_t a1, const __CFString *a2)
{
  if (data_provider_debug_info_enabled_predicate != -1)
    dispatch_once(&data_provider_debug_info_enabled_predicate, &__block_literal_global_38);
  if (data_provider_debug_info_enabled_enabled)
    return data_provider_copy_debug_string(a1, a2);
  else
    return 0;
}

void CGContextSetInterpolationQuality(CGContextRef c, CGInterpolationQuality quality)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGContextRef v8;

  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      CGGStateSetInterpolationQuality(*((_QWORD *)c + 12), quality);
      return;
    }
    v8 = c;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetInterpolationQuality", (uint64_t)v8, v2, v3, v4, v5, v6, v7);
}

uint64_t CGImageGetUpscaledComponentType(CGImage *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  CGBitmapInfo BitmapInfo;

  result = CGImageGetComponentType((uint64_t)a1);
  if (result > 6 || ((1 << result) & 0x49) == 0)
    return result;
  if (!a1)
  {
    LOBYTE(v6) = 0;
    goto LABEL_16;
  }
  v6 = *((_QWORD *)a1 + 7);
  BitmapInfo = CGImageGetBitmapInfo(a1);
  if (v6 > 0xF)
    goto LABEL_13;
  if (((1 << v6) & 0xFE) != 0)
    return 1;
  if (((1 << v6) & 0xF800) != 0)
    return 2;
  if (((1 << v6) & 0x600) == 0)
  {
LABEL_13:
    if (v6 - 33 > 0xFFFFFFFFFFFFFFDFLL)
      return 4;
LABEL_16:
    _CGHandleAssert("CGImageGetUpscaledComponentType", 3305, "/Library/Caches/com.apple.xbs/Sources/CoreGraphics/CoreGraphics/Images/CGImage.c", "bits_per_component > 0 && bits_per_component < 33", "bpc %zu", v3, v4, v5, v6);
  }
  if ((BitmapInfo & 0xF0000) != 0x40000)
    return 2;
  return 5;
}

CGImageRef CGImageCreateCopyWithColorSpace(CGImageRef image, CGColorSpaceRef space)
{
  CGImage *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CGImageRef Copy;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = 0;
  if (!image || !space)
    return v2;
  if ((*((_BYTE *)image + 39) & 2) != 0)
    return 0;
  v5 = *((_QWORD *)image + 18);
  if (v5)
    v5 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 40);
  if (*(_QWORD *)(*((_QWORD *)space + 3) + 40) != v5)
    return 0;
  if ((valid_image_colorspace((uint64_t)space, *((_DWORD *)image + 8)) & 1) == 0)
  {
    CGPostError((uint64_t)"%s: invalid image colorspace: NULL.", v6, v7, v8, v9, v10, v11, v12, (char)"CGImageCreateCopyWithColorSpace");
    return 0;
  }
  if (CGColorSpaceEqualToColorSpace((uint64_t)space, *((_QWORD *)image + 18)))
  {
    CFRetain(image);
    return image;
  }
  else
  {
    Copy = CGImageCreateCopy(image);
    v2 = Copy;
    if (Copy)
    {
      CGColorSpaceRelease(*((CGColorSpaceRef *)Copy + 18));
      CFRetain(space);
      *((_QWORD *)v2 + 18) = space;
      v22 = *((_QWORD *)v2 + 26);
      if (v22)
        CGImageProviderSetProperty(v22, CFSTR("kCGImageProviderColorSpaceChangedOnImageCopy"), space);
      if (*((_QWORD *)v2 + 28))
      {
        CGPostError((uint64_t)"%s: image headroom and conversion info not copied", v15, v16, v17, v18, v19, v20, v21, (char)"CGImageCreateCopyWithColorSpace");
        CGPropertiesRelease(*((_QWORD *)v2 + 28));
      }
      *((_QWORD *)v2 + 28) = 0;
    }
  }
  return v2;
}

void CGImageProviderSetProperty(uint64_t a1, CFTypeRef cf1, const void *a3)
{
  char v6;
  unint64_t *v7;
  uint64_t v8;
  _DWORD *v9;

  if (!a1 || !cf1 || !a3)
    return;
  if (CFEqual(cf1, CFSTR("kCGImageProviderAlphaIsOne")) == 1)
  {
    if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0C9AE50]))
    {
      v6 = 1;
LABEL_10:
      *(_BYTE *)(a1 + 130) = v6;
      goto LABEL_11;
    }
    if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0C9AE40]))
    {
      v6 = 0;
      goto LABEL_10;
    }
  }
LABEL_11:
  v8 = *(_QWORD *)(a1 + 120);
  v7 = (unint64_t *)(a1 + 120);
  if (!v8)
  {
    v9 = CGPropertiesCreate();
    while (!__ldxr(v7))
    {
      if (!__stxr((unint64_t)v9, v7))
        goto LABEL_17;
    }
    __clrex();
    CGPropertiesRelease((uint64_t)v9);
  }
LABEL_17:
  CGPropertiesSetProperty(*v7, cf1, a3);
}

CGImageRef CGImageCreateCopy(CGImageRef image)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  __CFData *v9;
  CGColorSpace *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  if (!image)
    return 0;
  v6 = *((_DWORD *)image + 9);
  if ((v6 & 0x2000000) != 0)
  {
    v9 = mask_create(*((_QWORD *)image + 5), *((_QWORD *)image + 6), *((_QWORD *)image + 7), *((_QWORD *)image + 8), *((_QWORD *)image + 9), *((CGDataProviderRef *)image + 19), *((double **)image + 20), HIBYTE(v6) & 1, 4);
    if (!v9)
      return v9;
    goto LABEL_35;
  }
  v7 = *((_QWORD *)image + 26);
  if (v7)
  {
    v8 = CGImageCreateWithImageProvider(v7, *((double **)image + 20), HIBYTE(v6) & 1, ((__int16)v6 >> 8), v1, v2, v3, v4);
    v9 = (__CFData *)v8;
    if (!v8)
      return v9;
    v10 = *(CGColorSpace **)(v8 + 144);
    if (v10 != *((CGColorSpace **)image + 18))
    {
      CGColorSpaceRelease(v10);
      v11 = *((_QWORD *)image + 18);
      if (v11)
        CFRetain(*((CFTypeRef *)image + 18));
      *((_QWORD *)v9 + 18) = v11;
    }
  }
  else
  {
    v9 = CGImageCreate(*((_QWORD *)image + 5), *((_QWORD *)image + 6), *((_QWORD *)image + 7), *((_QWORD *)image + 8), *((_QWORD *)image + 9), *((CGColorSpaceRef *)image + 18), *((_DWORD *)image + 8), *((CGDataProviderRef *)image + 19), *((const CGFloat **)image + 20), v6 & 0x1000000, (CGColorRenderingIntent)((__int16)v6 >> 8));
    if (!v9)
      return v9;
  }
  if (*((_QWORD *)image + 21))
  {
    v12 = *((_QWORD *)v9 + 18);
    if (v12)
      v13 = *(_QWORD *)(*(_QWORD *)(v12 + 24) + 40);
    else
      v13 = 0;
    v14 = malloc_type_malloc(16 * v13, 0x705560E0uLL);
    *((_QWORD *)v9 + 21) = v14;
    if (!v14)
    {
LABEL_38:
      CFRelease(v9);
      return 0;
    }
    v15 = 2 * v13;
    if (2 * v13)
    {
      v16 = (uint64_t *)*((_QWORD *)image + 21);
      do
      {
        v17 = *v16++;
        *v14++ = v17;
        --v15;
      }
      while (v15);
    }
  }
  *((_DWORD *)v9 + 9) = *((_DWORD *)v9 + 9) & 0xF7FFFFFF | (((*((_DWORD *)image + 9) >> 27) & 1) << 27);
  v18 = *((_QWORD *)image + 22);
  if (v18)
    CFRetain(*((CFTypeRef *)image + 22));
  *((_QWORD *)v9 + 22) = v18;
  if (!*((_QWORD *)image + 23))
    goto LABEL_30;
  v19 = *((_QWORD *)v9 + 18);
  if (v19)
    v20 = *(_QWORD *)(*(_QWORD *)(v19 + 24) + 40);
  else
    v20 = 0;
  v21 = malloc_type_malloc(8 * v20, 0x705560E0uLL);
  *((_QWORD *)v9 + 23) = v21;
  if (!v21)
    goto LABEL_38;
  if (v20)
  {
    v22 = (uint64_t *)*((_QWORD *)image + 23);
    do
    {
      v23 = *v22++;
      *v21++ = v23;
      --v20;
    }
    while (v20);
  }
LABEL_30:
  v24 = (unsigned int *)*((_QWORD *)image + 24);
  if (v24)
  {
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  *((_QWORD *)v9 + 24) = v24;
  v26 = *((_QWORD *)image + 25);
  if (v26)
    CFRetain(*((CFTypeRef *)image + 25));
  *((_QWORD *)v9 + 25) = v26;
LABEL_35:
  v27 = *((_QWORD *)image + 30);
  if (v27)
    CFRetain(*((CFTypeRef *)image + 30));
  *((_QWORD *)v9 + 30) = v27;
  *(_OWORD *)((char *)v9 + 248) = *(_OWORD *)((char *)image + 248);
  CGPropertiesRelease(*((_QWORD *)v9 + 27));
  *((_QWORD *)v9 + 27) = CGPropertiesCreateCopy(*((_QWORD *)image + 27));
  *((_QWORD *)v9 + 28) = CGPropertiesCreateCopy(*((_QWORD *)image + 28));
  return v9;
}

CFTypeRef *CGPropertiesCreateCopy(uint64_t a1)
{
  CFTypeRef *v2;
  CFTypeRef *v3;

  if (!a1)
    return 0;
  v2 = (CFTypeRef *)CGPropertiesCreate();
  v3 = v2;
  if (v2)
  {
    CFRelease(v2[1]);
    v3[1] = CFDictionaryCreateMutableCopy(0, 0, *(CFDictionaryRef *)(a1 + 8));
  }
  return v3;
}

uint64_t CGContextDelegateDrawImage(uint64_t result)
{
  uint64_t (*v1)(void);

  if (result)
  {
    v1 = *(uint64_t (**)(void))(result + 80);
    if (v1)
      return v1();
    else
      return 1006;
  }
  return result;
}

void CGPDFDrawingContextDrawPath(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v5;
  CGContext *v6;
  BOOL v7;
  CGColor *v8;
  CGColor *FillColor;
  CGColor *StrokeColor;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const CGPath *v17;
  CGContext *v18;
  CGPathDrawingMode v19;
  double width;
  double height;
  CGFloat v22;
  CGFloat v23;
  uint64_t v24;
  const void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  CGRect rect;
  CGSize v35;

  if (a3)
    CGContextClosePath(*(CGContextRef *)(a1 + 88));
  v33 = 0;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(CGContext **)(a1 + 88);
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    CGContextSetAlpha(*(CGContextRef *)(a1 + 88), 1.0);
    v35.width = 0.0;
    v35.height = 0.0;
    CGContextSetPatternPhase(v6, v35);
    if (a2 < 2)
    {
      FillColor = (CGColor *)CGPDFGStateGetFillColor(v5);
      CGContextSetFillColorWithColor(v6, FillColor);
    }
    else
    {
      if (a2 - 3 < 2)
      {
        v8 = (CGColor *)CGPDFGStateGetFillColor(v5);
        CGContextSetFillColorWithColor(v6, v8);
LABEL_12:
        StrokeColor = (CGColor *)CGPDFGStateGetStrokeColor(v5);
        CGContextSetStrokeColorWithColor(v6, StrokeColor);
        CGPDFGStateSynchronizeStroke(v5, v6);
        goto LABEL_13;
      }
      if (a2 == 2)
        goto LABEL_12;
    }
LABEL_13:
    CGPDFGStateSynchronizeColorRendering(v5, v6);
    CGPDFGStateSynchronizeRendering(v5, (uint64_t)v6, v11, v12, v13, v14, v15, v16);
  }
  v17 = copy_clip_path(a1, &v33);
  if (a2 == 2)
  {
    v18 = *(CGContext **)(a1 + 88);
    v19 = kCGPathStroke;
    goto LABEL_26;
  }
  memset(&rect, 0, sizeof(rect));
  if (CGPathIsRect(*(CGPathRef *)(*(_QWORD *)(a1 + 88) + 168), &rect))
  {
    width = rect.size.width;
    height = rect.size.height;
LABEL_20:
    if (height * width / (*(double *)(a1 + 152) * *(double *)(a1 + 160)) >= 0.98)
    {
      v24 = CGPDFGStateGetFillColor(*(_QWORD *)(a1 + 32));
      if (v24)
      {
        v25 = (const void *)v24;
        v26 = *(const void **)(a1 + 128);
        if (v26)
          CFRelease(v26);
        CFRetain(v25);
        *(_QWORD *)(a1 + 128) = v25;
      }
    }
    goto LABEL_25;
  }
  if (*(_QWORD *)(a1 + 168) == 4)
  {
    *(CGRect *)(&width - 2) = CGPathGetBoundingBox((CGPathRef)*(_QWORD *)(*(_QWORD *)(a1 + 88) + 168));
    rect.origin.x = v22;
    rect.origin.y = v23;
    rect.size.width = width;
    rect.size.height = height;
    goto LABEL_20;
  }
LABEL_25:
  v18 = *(CGContext **)(a1 + 88);
  v19 = a2;
LABEL_26:
  CGContextDrawPath(v18, v19);
  *(_QWORD *)(a1 + 168) = 0;
  if (v17)
  {
    CGContextAddPath(*(CGContextRef *)(a1 + 88), v17);
    clip(*(_QWORD *)(a1 + 88), v33, v27, v28, v29, v30, v31, v32);
    CFRelease(v17);
  }
}

void CGContextSetAlpha(CGContextRef c, CGFloat alpha)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;

  if (c && *((_DWORD *)c + 4) == 1129601108)
  {
    v8 = 1.0;
    if (alpha <= 1.0)
      v8 = alpha;
    if (alpha >= 0.0)
      v9 = v8;
    else
      v9 = 0.0;
    v10 = *((_QWORD *)c + 12);
    if (*(double *)(*(_QWORD *)(v10 + 120) + 8) != v9)
    {
      maybeCopyRenderingState(*((_QWORD *)c + 12));
      *(double *)(*(_QWORD *)(v10 + 120) + 8) = v9;
    }
  }
  else
  {
    handle_invalid_context((char)"CGContextSetAlpha", (uint64_t)c, v2, v3, v4, v5, v6, v7);
  }
}

void CGContextSetCompositeOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (!a1)
  {
    v8 = 0;
LABEL_7:
    handle_invalid_context((char)"CGContextSetCompositeOperation", v8, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    v8 = a1;
    goto LABEL_7;
  }
  if (a2 >= 0x1C)
    CGPostError((uint64_t)"%s: invalid composite operation %d", a2, a3, a4, a5, a6, a7, a8, (char)"CGContextSetCompositeOperation");
  else
    CGGStateSetCompositeOperation(*(_QWORD *)(a1 + 96), a2);
}

void CGContextSetBlendMode(CGContextRef c, CGBlendMode mode)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGContextRef v8;

  if (!c)
  {
    v8 = 0;
LABEL_6:
    handle_invalid_context((char)"CGContextSetBlendMode", (uint64_t)v8, v2, v3, v4, v5, v6, v7);
    return;
  }
  if (*((_DWORD *)c + 4) != 1129601108)
  {
    v8 = c;
    goto LABEL_6;
  }
  if (mode <= kCGBlendModePlusLighter)
    CGGStateSetCompositeOperation(*((_QWORD *)c + 12), CGContextSetBlendMode_op[mode]);
}

void maybeCopyRenderingState(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
  {
    v2 = *(_QWORD *)(a1 + 120);
    v3 = (char *)malloc_type_malloc(0x38uLL, 0x2062DE7BuLL);
    *(_DWORD *)v3 = 1;
    *((_QWORD *)v3 + 1) = *(_QWORD *)(v2 + 8);
    v4 = *((_DWORD *)v3 + 1) & 0xFFFF00FF | (*(unsigned __int8 *)(v2 + 5) << 8);
    *((_DWORD *)v3 + 1) = v4;
    v5 = *(_QWORD *)(v2 + 16);
    if (v5)
    {
      CFRetain(*(CFTypeRef *)(v2 + 16));
      v4 = *((_DWORD *)v3 + 1);
    }
    *((_QWORD *)v3 + 2) = v5;
    *(_OWORD *)(v3 + 24) = *(_OWORD *)(v2 + 24);
    v6 = v4 & 0xFFF0FFFF | ((HIWORD(*(_DWORD *)(v2 + 4)) & 0xF) << 16);
    *((_DWORD *)v3 + 1) = v6;
    v7 = v6 & 0xFF0FFFFF | (((*(_DWORD *)(v2 + 4) >> 20) & 0xF) << 20);
    *((_DWORD *)v3 + 1) = v7;
    v8 = v7 & 0xFFFFFF00 | *(unsigned __int8 *)(v2 + 4);
    *((_DWORD *)v3 + 1) = v8;
    v9 = v8 & 0xFEFFFFFF | ((HIBYTE(*(_DWORD *)(v2 + 4)) & 1) << 24);
    *((_DWORD *)v3 + 1) = v9;
    *((_DWORD *)v3 + 1) = v9 & 0xFDFFFFFF | (((*(_DWORD *)(v2 + 4) >> 25) & 1) << 25);
    v10 = *(_QWORD *)(v2 + 40);
    if (v10)
      CFRetain(*(CFTypeRef *)(v2 + 40));
    *((_QWORD *)v3 + 5) = v10;
    *((_DWORD *)v3 + 12) = *(_DWORD *)(v2 + 48);
    *(_QWORD *)(a1 + 120) = v3;
    renderingStateRelease((unsigned int *)v2);
    *(_BYTE *)(a1 + 20) &= ~2u;
  }
}

void CGContextSetStyle(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108)
    {
      CGGStateSetStyle(*(_QWORD *)(a1 + 96), a2);
      return;
    }
    v8 = a1;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetStyle", v8, a3, a4, a5, a6, a7, a8);
}

uint64_t CGPDFGStateGetFillColor(uint64_t result)
{
  uint64_t v1;
  CGColorSpace *DeviceGray;

  if (result)
  {
    v1 = result;
    result = *(_QWORD *)(result + 56);
    if (!result)
    {
      DeviceGray = CGColorSpaceCreateDeviceGray();
      *(_QWORD *)(v1 + 56) = CGColorSpaceCopyDefaultColor((uint64_t)DeviceGray);
      CGColorSpaceRelease(DeviceGray);
      return *(_QWORD *)(v1 + 56);
    }
  }
  return result;
}

void CGContextSetPatternPhase(CGContextRef c, CGSize phase)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGFloat height;
  CGFloat width;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (c && *((_DWORD *)c + 4) == 1129601108)
  {
    height = phase.height;
    width = phase.width;
    v10 = *((_QWORD *)c + 12);
    v11 = *(_QWORD *)(v10 + 120);
    if (*(double *)(v11 + 24) != phase.width || *(double *)(v11 + 32) != phase.height)
    {
      maybeCopyRenderingState(*((_QWORD *)c + 12));
      v13 = *(_QWORD *)(v10 + 120);
      *(CGFloat *)(v13 + 24) = width;
      *(CGFloat *)(v13 + 32) = height;
    }
  }
  else
  {
    handle_invalid_context((char)"CGContextSetPatternPhase", (uint64_t)c, v2, v3, v4, v5, v6, v7);
  }
}

void CGPDFGStateSynchronizeRendering(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  if (a1)
  {
    v10 = *(unsigned int *)(a1 + 184);
    if (v10 <= 0xF)
      CGContextSetCompositeOperation(a2, dword_184F7A874[v10], a3, a4, a5, a6, a7, a8);
    CGContextSetAlphaIsShape(a2, *(unsigned __int8 *)(a1 + 216), a3, a4, a5, a6, a7, a8);
    CGContextSetSoftMask(a2, *(const void **)(a1 + 192), v11, v12, v13, v14, v15, v16);
    CGContextSetSmoothness(a2, *(double *)(a1 + 256), v17, v18, v19, v20, v21, v22, v23);
    v30 = *(const void **)(a1 + 264);
  }
  else
  {
    CGContextSetCompositeOperation(a2, 2, a3, a4, a5, a6, a7, a8);
    CGContextSetAlphaIsShape(a2, 0, v31, v32, v33, v34, v35, v36);
    CGContextSetSoftMask(a2, 0, v37, v38, v39, v40, v41, v42);
    CGContextSetSmoothness(a2, 0.0, v43, v44, v45, v46, v47, v48, v49);
    v30 = 0;
  }
  CGContextSetStyle(a2, v30, v24, v25, v26, v27, v28, v29);
}

void CGContextSetSoftMask(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108)
    {
      CGGStateSetSoftMask(*(_QWORD *)(a1 + 96), a2);
      return;
    }
    v8 = a1;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetSoftMask", v8, a3, a4, a5, a6, a7, a8);
}

void CGContextSetSmoothness(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;

  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
  {
    v10 = *(_QWORD *)(a1 + 96);
    if (*(double *)(*(_QWORD *)(v10 + 144) + 16) != a2)
    {
      maybe_copy_device_state(*(_QWORD *)(a1 + 96));
      *(double *)(*(_QWORD *)(v10 + 144) + 16) = a2;
    }
  }
  else
  {
    handle_invalid_context((char)"CGContextSetSmoothness", a1, a4, a5, a6, a7, a8, a9);
  }
}

void CGContextSetAlphaIsShape(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108)
    {
      CGGStateSetAlphaIsShape(*(_QWORD *)(a1 + 96), a2);
      return;
    }
    v8 = a1;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetAlphaIsShape", v8, a3, a4, a5, a6, a7, a8);
}

void CGPDFGStateSynchronizeColorRendering(uint64_t a1, CGContextRef c)
{
  CGColorRenderingIntent v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const __CFArray *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const double *v50;
  int64x2_t v51;
  int32x2_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD v89[2];
  uint64_t v90;
  CFRange v91;

  v90 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if ((*(_DWORD *)(a1 + 176) - 1) >= 4)
      v4 = kCGRenderingIntentRelativeColorimetric;
    else
      v4 = *(_DWORD *)(a1 + 176);
    CGContextSetRenderingIntent(c, v4);
    CGContextSetImageRenderingIntent((uint64_t)c, v4, v5, v6, v7, v8, v9, v10);
    CGContextSetFillOverprint((uint64_t)c, *(unsigned __int8 *)(a1 + 217), v11, v12, v13, v14, v15, v16);
    CGContextSetStrokeOverprint((uint64_t)c, *(unsigned __int8 *)(a1 + 218), v17, v18, v19, v20, v21, v22);
    CGContextSetOverprintMode((uint64_t)c, *(_DWORD *)(a1 + 220), v23, v24, v25, v26, v27, v28);
    CGContextSetBlackGeneration((uint64_t)c, *(const void **)(a1 + 224), v29, v30, v31, v32, v33, v34);
    CGContextSetUndercolorRemoval((uint64_t)c, *(const void **)(a1 + 232), v35, v36, v37, v38, v39, v40);
    v41 = *(const __CFArray **)(a1 + 240);
    if (v41)
    {
      memset(v89, 0, sizeof(v89));
      v91.location = 0;
      v91.length = 4;
      CFArrayGetValues(v41, v91, (const void **)v89);
      v49 = 0;
      v50 = (const double *)MEMORY[0x1E0C9B0D0];
      v51 = (int64x2_t)vld1q_dup_f64(v50);
      do
      {
        v52 = vmovn_s64(vceqq_s64((int64x2_t)v89[v49], v51));
        if ((v52.i8[0] & 1) != 0)
          *(_QWORD *)&v89[v49] = 0;
        if ((v52.i8[4] & 1) != 0)
          *((_QWORD *)&v89[v49] + 1) = 0;
        ++v49;
      }
      while (v49 != 2);
      CGContextSetTransferFunctions((uint64_t)c, v42, v43, v44, v45, v46, v47, v48);
    }
  }
  else
  {
    CGContextSetRenderingIntent(c, kCGRenderingIntentRelativeColorimetric);
    CGContextSetImageRenderingIntent((uint64_t)c, 2, v53, v54, v55, v56, v57, v58);
    CGContextSetFillOverprint((uint64_t)c, 0, v59, v60, v61, v62, v63, v64);
    CGContextSetStrokeOverprint((uint64_t)c, 0, v65, v66, v67, v68, v69, v70);
    CGContextSetOverprintMode((uint64_t)c, 0, v71, v72, v73, v74, v75, v76);
    CGContextSetBlackGeneration((uint64_t)c, 0, v77, v78, v79, v80, v81, v82);
    CGContextSetUndercolorRemoval((uint64_t)c, 0, v83, v84, v85, v86, v87, v88);
  }
}

void CGContextSetUndercolorRemoval(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108)
    {
      CGGStateSetUndercolorRemoval(*(_QWORD *)(a1 + 96), a2);
      return;
    }
    v8 = a1;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetUndercolorRemoval", v8, a3, a4, a5, a6, a7, a8);
}

void CGContextSetStrokeOverprint(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v10;

  if (!a1)
  {
    v10 = 0;
LABEL_8:
    handle_invalid_context((char)"CGContextSetStrokeOverprint", v10, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    v10 = a1;
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(a1 + 96);
  v9 = a2 != 0;
  if (*(unsigned __int8 *)(*(_QWORD *)(v8 + 144) + 25) != v9)
  {
    maybe_copy_device_state(v8);
    *(_BYTE *)(*(_QWORD *)(v8 + 144) + 25) = v9;
  }
}

void CGContextSetRenderingIntent(CGContextRef c, CGColorRenderingIntent intent)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGContextRef v8;

  if (c)
  {
    if (*((_DWORD *)c + 4) == 1129601108)
    {
      CGGStateSetRenderingIntent(*((_QWORD *)c + 12), intent);
      return;
    }
    v8 = c;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetRenderingIntent", (uint64_t)v8, v2, v3, v4, v5, v6, v7);
}

void CGContextSetOverprintMode(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  if (a1 && *(_DWORD *)(a1 + 16) == 1129601108)
  {
    v9 = *(_QWORD *)(a1 + 96);
    if (*(_DWORD *)(*(_QWORD *)(v9 + 144) + 28) != a2)
    {
      maybe_copy_device_state(*(_QWORD *)(a1 + 96));
      *(_DWORD *)(*(_QWORD *)(v9 + 144) + 28) = a2;
    }
  }
  else
  {
    handle_invalid_context((char)"CGContextSetOverprintMode", a1, a3, a4, a5, a6, a7, a8);
  }
}

void CGContextSetImageRenderingIntent(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108)
    {
      CGGStateSetImageRenderingIntent(*(_QWORD *)(a1 + 96), a2);
      return;
    }
    v8 = a1;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetImageRenderingIntent", v8, a3, a4, a5, a6, a7, a8);
}

void CGContextSetFillOverprint(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v10;

  if (!a1)
  {
    v10 = 0;
LABEL_8:
    handle_invalid_context((char)"CGContextSetFillOverprint", v10, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*(_DWORD *)(a1 + 16) != 1129601108)
  {
    v10 = a1;
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(a1 + 96);
  v9 = a2 != 0;
  if (*(unsigned __int8 *)(*(_QWORD *)(v8 + 144) + 24) != v9)
  {
    maybe_copy_device_state(v8);
    *(_BYTE *)(*(_QWORD *)(v8 + 144) + 24) = v9;
  }
}

void CGContextSetBlackGeneration(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1129601108)
    {
      CGGStateSetBlackGeneration(*(_QWORD *)(a1 + 96), a2);
      return;
    }
    v8 = a1;
  }
  else
  {
    v8 = 0;
  }
  handle_invalid_context((char)"CGContextSetBlackGeneration", v8, a3, a4, a5, a6, a7, a8);
}

void CGImageSetProperty(uint64_t a1, CFStringRef theString1, const void *a3)
{
  unint64_t *v6;
  uint64_t v7;
  _DWORD *v8;
  CFTypeID v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int valuePtr;

  if (a1 && theString1 && a3)
  {
    if (CFStringCompare(theString1, CFSTR("com.apple.ImageIO.orientation"), 0))
    {
      v7 = *(_QWORD *)(a1 + 216);
      v6 = (unint64_t *)(a1 + 216);
      if (!v7)
      {
        v8 = CGPropertiesCreate();
        while (!__ldxr(v6))
        {
          if (!__stxr((unint64_t)v8, v6))
            goto LABEL_18;
        }
        __clrex();
        CGPropertiesRelease((uint64_t)v8);
      }
LABEL_18:
      CGPropertiesSetProperty(*v6, theString1, a3);
    }
    else
    {
      valuePtr = 0;
      v10 = CFGetTypeID(a3);
      if (v10 == CFNumberGetTypeID()
        && CFNumberGetValue((CFNumberRef)a3, kCFNumberIntType, &valuePtr)
        && valuePtr >= 1
        && valuePtr <= 8)
      {
        *(_BYTE *)(a1 + 38) = valuePtr;
      }
      else
      {
        CGLog(1, (uint64_t)"%s %s", v11, v12, v13, v14, v15, v16, (char)"CGImageSetProperty");
      }
    }
  }
}

_DWORD *CGPropertiesCreate()
{
  _DWORD *v0;

  v0 = malloc_type_malloc(0x10uLL, 0x2062DE7BuLL);
  v0[1] = 0;
  *v0 = 1;
  *((_QWORD *)v0 + 1) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  return v0;
}

CFStringRef CGColorSpaceCopyName(CGColorSpaceRef space)
{
  const void *v1;

  if (space && (v1 = *(const void **)(*((_QWORD *)space + 3) + 72)) != 0)
    return (CFStringRef)CFRetain(v1);
  else
    return 0;
}

_OWORD *colorsync_transform_data_key_retain(_OWORD *a1, _QWORD *a2)
{
  _OWORD *result;
  __int128 v5;

  result = malloc_type_malloc(0x20uLL, 0x1000040E0EAB150uLL);
  if (result)
  {
    v5 = a1[1];
    *result = *a1;
    result[1] = v5;
  }
  *a2 = result;
  return result;
}

uint64_t CGFontDBGetLocal()
{
  if (CGFontDBGetLocal_once != -1)
    dispatch_once_f(&CGFontDBGetLocal_once, 0, (dispatch_function_t)create_local_db);
  return local_db;
}

uint64_t RIPLayerBltImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _DWORD *v12;
  __int128 *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  double v29;
  float v30;
  float64x2_t *v31;
  float *v32;
  int v33;
  int v34;
  double v35;
  float v37;
  double v39;
  float v45;
  float v46;
  float64x2_t *v47;
  float32x2_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  char Mask;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _QWORD v57[2];
  float v58;
  float32x2_t v59;
  int v60;
  float v61;
  float v62;
  float32x4_t v63;
  float32x2_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;

  v10 = a2;
  v84 = *MEMORY[0x1E0C80C00];
  if (a3)
    v12 = (_DWORD *)a3;
  else
    v12 = (_DWORD *)a4;
  if (a2 && !*(_QWORD *)(a2 + 72))
  {
    if (*(_DWORD *)(a2 + 64))
    {
      v51 = (_DWORD *)(a2 + 12);
      if (v12 == (_DWORD *)(v10 + 12) || !ripl_IsContained(v12, v51))
      {
        Mask = ripl_CreateMask(v10, 0, a3, a4, a5, a6, a7, a8);
        result = 0;
        if ((Mask & 1) == 0)
          return result;
      }
      else
      {
        v10 = 0;
      }
    }
    else if (!*(_QWORD *)(a2 + 56) && ripl_IsEnclosed(v12, (_DWORD *)(a2 + 12)))
    {
      v10 = 0;
    }
  }
  v83 = 0;
  v81 = 0u;
  v82 = 0u;
  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v13 = *(__int128 **)(a1 + 40);
  if (!v13)
  {
    *(_QWORD *)&v79 = 0;
    v77 = 0uLL;
    v78 = 0uLL;
    v75 = 0uLL;
    v76 = 0uLL;
    v73 = 0uLL;
    v74 = 0uLL;
    v71 = 0uLL;
    v72 = 0uLL;
    v69 = 0uLL;
    v70 = 0uLL;
    v67 = 0uLL;
    v68 = 0uLL;
    v13 = &v65;
    v65 = 0uLL;
    v66 = 0uLL;
  }
  v55 = 0uLL;
  v56 = 0uLL;
  v53 = 0uLL;
  v54 = 0uLL;
  result = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a1 + 32))(a1, 32, v12);
  if (result)
  {
    if (!*(_QWORD *)result || !*(_QWORD *)(*(_QWORD *)result + 40))
      goto LABEL_30;
    v22 = *(_DWORD **)(*(_QWORD *)(a4 + 16) + 32);
    if (!v22)
      v22 = (_DWORD *)RIPGetDepthForLayerFormat(0, v15, v16, v17, v18, v19, v20, v21);
    if (!*(_QWORD *)(a1 + 56) && !ripl_CreateMask(a1, 1, v16, v17, v18, v19, v20, v21))
      goto LABEL_30;
    *(_BYTE *)v13 = *(_DWORD *)a5;
    ripl_BltOpDestination((uint64_t)v13, (uint64_t)v12, a1);
    v23 = *(_QWORD *)(a4 + 16);
    v24 = *(_DWORD *)a4;
    v25 = *(_DWORD *)(a4 + 4);
    v26 = *(_DWORD *)(a4 + 8);
    v27 = *(_DWORD *)(a4 + 12);
    *((_BYTE *)v13 + 1) = 1;
    *((_DWORD *)v13 + 14) = *v12 - v24;
    *((_DWORD *)v13 + 15) = v27 + v25 - (v12[1] + v12[3]);
    *((_DWORD *)v13 + 16) = v26;
    *((_DWORD *)v13 + 17) = v27;
    *((_DWORD *)v13 + 18) = *(_DWORD *)(v23 + 112);
    *((_DWORD *)v13 + 19) = *(_DWORD *)(v23 + 64);
    *((_QWORD *)v13 + 11) = *(_QWORD *)(v23 + 72);
    *((_DWORD *)v13 + 20) = *(_DWORD *)(v23 + 80);
    *((_QWORD *)v13 + 12) = *(_QWORD *)(v23 + 88);
    ripl_BltOpMask((uint64_t)v13, v12, v10);
    if (CGBlt_initialize((uint64_t)v13))
    {
      *(_QWORD *)&v55 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 56);
      v28 = *(unsigned __int8 *)(a4 + 40) | (unsigned __int16)(*(_WORD *)(a5 + 4) << 8) | (HIBYTE(*(_WORD *)(a5 + 4)) << 16);
      LODWORD(v53) = *v22;
      DWORD1(v53) = v28;
      v29 = *(double *)(a5 + 48);
      v30 = 0.0;
      if (v29 >= 0.0)
      {
        v30 = 1.0;
        if (v29 <= 1.0)
          v30 = v29;
      }
      *((float *)&v53 + 2) = v30;
      v31 = *(float64x2_t **)(a4 + 24);
      if (v31)
      {
        v63 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v31), v31[1]);
        v64 = vcvt_f32_f64(v31[2]);
        v31 = (float64x2_t *)&v63;
      }
      *((_QWORD *)&v54 + 1) = v31;
      v32 = *(float **)(a4 + 48);
      if (v32)
      {
        v33 = *(_DWORD *)(a1 + 24);
        v34 = v33 + *(_DWORD *)(a1 + 16);
        v35 = (double)*(int *)(a1 + 12);
        _D2 = (double)v33;
        v37 = *(double *)v32;
        v58 = v37;
        _Q3 = *(float64x2_t *)(v32 + 2);
        v59 = vneg_f32(vcvt_f32_f64(_Q3));
        v39 = *((double *)v32 + 3);
        __asm { FMLA            D5, D2, V3.D[1] }
        *(float *)_Q3.f64 = v39;
        v45 = _D5 - (double)v34;
        v60 = LODWORD(_Q3.f64[0]);
        v61 = v45;
        v46 = v35 - (*((double *)v32 + 5) + v39 * (double)v33);
        v62 = v46;
        v32 = &v58;
      }
      *(_QWORD *)&v54 = v32;
      if (*(_WORD *)(a4 + 42))
        *((_BYTE *)v13 + 1) = 2;
      v47 = *(float64x2_t **)(a4 + 32);
      if (v47)
      {
        v48 = vcvt_f32_f64(vaddq_f64(*v47, v47[1]));
        v57[0] = vcvt_f32_f64(*v47);
        v57[1] = v48;
        v47 = (float64x2_t *)v57;
      }
      v49 = *(_QWORD *)(a4 + 16);
      v50 = *(_QWORD *)(v49 + 96);
      *((_QWORD *)&v55 + 1) = v47;
      *(_QWORD *)&v56 = v50;
      *((_QWORD *)&v56 + 1) = *(_QWORD *)(v49 + 120);
      if (!(*(unsigned int (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)a1 + 40))(a1, v13, &v53))
        v12 = 0;
    }
    else
    {
LABEL_30:
      v12 = 0;
    }
    (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a1 + 48))(a1, v12);
    return v12 != 0;
  }
  return result;
}

_QWORD *RIPLayerBltShape(int *a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  int *v12;
  char v14;
  _QWORD *result;
  int *v16;
  int *v17;
  char Mask;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  __n128 v28;
  uint64_t (**v29)();
  int *v30;
  uint64_t (*v31)(_QWORD *, char *, uint64_t, uint64_t, uint64_t, _QWORD, float);
  uint64_t v32;
  float v33;
  uint64_t v34;
  char *v35;
  float v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  _QWORD v49[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;

  v10 = a5;
  v11 = a4;
  v12 = a3;
  v69 = *MEMORY[0x1E0C80C00];
  v49[0] = 0;
  v49[1] = 0;
  v68 = 0;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  if (!a2)
  {
    if (!a4)
    {
      if (!a3)
        v12 = a1 + 3;
      goto LABEL_32;
    }
    goto LABEL_17;
  }
  if (!a4)
    goto LABEL_16;
  if (*(_DWORD *)(a4 + 64) || *(_QWORD *)(a4 + 56))
  {
    v14 = ripl_Combine(a4, a2, 0);
    result = 0;
    if ((v14 & 1) == 0)
      return result;
    goto LABEL_17;
  }
  v16 = (int *)(a4 + 12);
  if (!a3)
  {
    v12 = (int *)(a4 + 12);
    goto LABEL_16;
  }
  if (v16 == a3)
  {
LABEL_16:
    v11 = a2;
    goto LABEL_17;
  }
  v12 = (int *)v49;
  v11 = a2;
  if ((CGSBoundsIntersection(v16, a3, v49) & 1) == 0)
    return 0;
LABEL_17:
  v17 = (int *)(v11 + 12);
  if (!v12)
    v12 = (int *)(v11 + 12);
  if (!*(_DWORD *)(v11 + 64))
  {
    if (*(_QWORD *)(v11 + 56))
      goto LABEL_32;
    if (v12 == v17)
    {
      v11 = 0;
      v12 = v17;
      goto LABEL_32;
    }
    if ((CGSBoundsIntersection((int *)(v11 + 12), v12, v49) & 1) != 0)
    {
      v11 = 0;
      v12 = (int *)v49;
      goto LABEL_32;
    }
    return 0;
  }
  if (!*(_QWORD *)(v11 + 72))
  {
    if (v12 == v17 || !ripl_IsContained(v12, v17))
    {
      Mask = ripl_CreateMask(v11, 0, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
      result = 0;
      if ((Mask & 1) == 0)
        return result;
    }
    else
    {
      v11 = 0;
    }
  }
LABEL_32:
  v19 = (__int128 *)*((_QWORD *)a1 + 5);
  if (!v19)
  {
    *(_QWORD *)&v64 = 0;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v19 = &v50;
    v50 = 0u;
    v51 = 0u;
  }
  result = (_QWORD *)(*(uint64_t (**)(int *, uint64_t, int *))(*(_QWORD *)a1 + 32))(a1, 32, v12);
  if (result)
  {
    v26 = result;
    v27 = (_QWORD *)*result;
    if (!*result
      || !v27[4]
      || !*((_QWORD *)a1 + 7) && !ripl_CreateMask((uint64_t)a1, 1, v20, v21, v22, v23, v24, v25))
    {
      goto LABEL_64;
    }
    *(_BYTE *)v19 = *(_DWORD *)a7;
    v28.n128_f64[0] = ripl_BltOpDestination((uint64_t)v19, (uint64_t)v12, (uint64_t)a1);
    if (!v10)
    {
      v30 = 0;
      v31 = (uint64_t (*)(_QWORD *, char *, uint64_t, uint64_t, uint64_t, _QWORD, float))v27[3];
      if (!v31)
      {
LABEL_65:
        (*(void (**)(int *, int *))(*(_QWORD *)a1 + 48))(a1, v30);
        return (_QWORD *)(v30 != 0);
      }
      v47 = 0;
      v48 = a6;
      v46 = 0;
      v32 = 0;
      v33 = *(double *)(a7 + 48);
      v34 = 0;
      goto LABEL_48;
    }
    v29 = *(uint64_t (***)())v10;
    if (*(_UNKNOWN **)v10 != &ripc_class)
    {
      if (v29)
      {
        while (v29 != RIPLayer_ripl_class)
        {
          if (!*v29)
            goto LABEL_64;
          v29 = (uint64_t (**)())((uint64_t (*)(__n128))*v29)(v28);
          v30 = 0;
          if (!v29)
            goto LABEL_65;
        }
        v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)v10 + 32))(v10, 16, v10 + 12, v28);
        if (v38)
        {
          v45 = v38;
          if (*(_QWORD *)(*(_QWORD *)v38 + 8) != v27[1]
            || !*(_QWORD *)(v10 + 56) && !ripl_CreateMask(v10, 0, v39, v40, v41, v42, v43, v44))
          {
            v30 = 0;
LABEL_78:
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 48))(v10, 0);
            goto LABEL_65;
          }
          v47 = v10;
          ripl_BltOpSourceLayer((uint64_t)v19, v12, a1, a6, v10);
          v35 = 0;
LABEL_69:
          ripl_BltOpMask((uint64_t)v19, v12, v11);
          if (CGBlt_initialize((uint64_t)v19))
          {
            if (((unsigned int (*)(_QWORD *, __int128 *))v27[4])(v26, v19))
              v30 = v12;
            else
              v30 = 0;
          }
          else
          {
            v30 = 0;
          }
          if (v35)
          {
            if (v35 != (char *)v19 + 184)
              free(v35);
          }
          v10 = v47;
          if (!v45)
            goto LABEL_65;
          goto LABEL_78;
        }
      }
      goto LABEL_64;
    }
    v31 = (uint64_t (*)(_QWORD *, char *, uint64_t, uint64_t, uint64_t, _QWORD, float))v27[3];
    if (!v31)
      goto LABEL_64;
    v48 = a6;
    v36 = *(double *)(a7 + 48);
    v30 = *(int **)(v10 + 8);
    v33 = *(float *)(v10 + 156) * v36;
    if (v30
      && *(_DWORD *)(v10 + 20) == *((_DWORD *)v19 + 43)
      && v30 == *((int **)v19 + 20)
      && *(_DWORD *)(v10 + 16) == *((_DWORD *)v19 + 42)
      && v33 == *((float *)v19 + 44))
    {
      v47 = v10;
      v35 = (char *)v19 + 184;
LABEL_68:
      ripl_BltOpSourcePattern((uint64_t)v19, a1, v48, (uint64_t)v35);
      v45 = 0;
      goto LABEL_69;
    }
    v34 = v10 + 28;
    v37 = *(_DWORD *)(v10 + 24);
    if (v37)
    {
      if (v37 != 2)
      {
        if (v37 == 1)
        {
          LODWORD(v46) = *(_DWORD *)(v10 + 20);
          HIDWORD(v46) = *(_DWORD *)(v10 + 16);
          v47 = v10;
          v32 = 3;
          goto LABEL_48;
        }
LABEL_64:
        v30 = 0;
        goto LABEL_65;
      }
      LODWORD(v46) = *(_DWORD *)(v10 + 20);
      HIDWORD(v46) = *(_DWORD *)(v10 + 16);
      v47 = v10;
      v32 = 4;
    }
    else
    {
      LODWORD(v46) = *(_DWORD *)(v10 + 20);
      HIDWORD(v46) = *(_DWORD *)(v10 + 16);
      v47 = v10;
      v32 = 1;
    }
LABEL_48:
    v35 = (char *)v31(v26, (char *)v19 + 184, 64, v32, v34, *(unsigned __int8 *)(a7 + 4), v33);
    if (v35 == (char *)v19 + 184)
    {
      if ((*((_DWORD *)v19 + 46) & 0xFFF00000) == 0x400000)
      {
        *((_QWORD *)v19 + 20) = v30;
        *((_DWORD *)v19 + 42) = HIDWORD(v46);
        *((_DWORD *)v19 + 43) = v46;
        v35 = (char *)v19 + 184;
        *((float *)v19 + 44) = v33;
      }
      else
      {
        *((_QWORD *)v19 + 20) = 0;
        *((_QWORD *)v19 + 21) = 0;
        v35 = (char *)v19 + 184;
      }
    }
    goto LABEL_68;
  }
  return result;
}

uint64_t ripl_Lock(uint64_t a1)
{
  return a1 + 32;
}

double ripl_BltOpDestination(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a3 + 20);
  *(double *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)a2 - *(_DWORD *)(a3 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a3 + 24) + *(_DWORD *)(a3 + 16) - (*(_DWORD *)(a2 + 4) + *(_DWORD *)(a2 + 12));
  v4 = *(_QWORD *)(a3 + 56);
  v5 = *(_DWORD *)(a3 + 64);
  v6 = *(_DWORD *)(a3 + 52);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a3 + 48);
  *(_DWORD *)(a1 + 32) = v5;
  v7 = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v7;
  *(_DWORD *)(a1 + 132) = v6;
  return result;
}

uint64_t ripl_BltOpSourcePattern(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;

  if ((*(_DWORD *)a4 & 0xFFF00000) == 0x300000)
  {
    v5 = *(_DWORD *)(a4 + 4);
    v4 = *(_DWORD *)(a4 + 8);
    v6 = *(_DWORD *)(a4 + 12);
    v7 = *(_DWORD *)(a4 + 16);
    if (a3)
    {
      v5 += *a3;
      v4 += a3[1];
    }
    v8 = 3;
    *(_BYTE *)(a1 + 1) = 3;
    v9 = a2[4];
    v10 = a2[6];
    v11 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 56) = a2[3] - v5 + *(_DWORD *)(a1 + 12);
    v12 = v4 + v7 - (v9 + v10) + v11;
  }
  else
  {
    v12 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 4;
    *(_BYTE *)(a1 + 1) = 4;
    *(_DWORD *)(a1 + 56) = 0;
  }
  *(_DWORD *)(a1 + 60) = v12;
  *(_DWORD *)(a1 + 64) = v6;
  *(_DWORD *)(a1 + 68) = v7;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 76) = *(_QWORD *)(a4 + 20);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a4 + 32);
  return v8;
}

uint64_t CGBlt_initialize(uint64_t a1)
{
  int32x2_t v1;
  int32x2_t v2;
  int32x2_t v3;
  int32x2_t v4;
  int32x2_t v5;
  int32x2_t v6;
  int32x2_t v7;
  unsigned int v8;
  unsigned int v9;
  int32x2_t v11;
  int32x2_t v12;
  int32x2_t v13;
  int32x2_t v14;
  int v15;
  int32x2_t v16;
  uint64_t v17;
  int32x2_t v20;
  int32x2_t v21;
  int32x2_t v22;
  int32x2_t v23;
  int32x2_t v24;
  int32x2_t v25;

  if (!a1 || !*(_QWORD *)(a1 + 40))
    return 0xFFFFFFFFLL;
  v1 = *(int32x2_t *)(a1 + 12);
  v2.i32[0] = v1.i32[0];
  v2.i32[1] = *(_DWORD *)(a1 + 8);
  v3.i32[1] = v1.i32[1];
  v3.i32[0] = *(_DWORD *)(a1 + 4);
  v4 = vadd_s32(v2, v3);
  v5 = vmax_s32(v1, 0);
  v6 = vsub_s32(vmin_s32(*(int32x2_t *)(a1 + 20), v4), v5);
  v7 = vsub_s32(v5, v1);
  v8 = *(_DWORD *)a1;
  v9 = BYTE2(*(_DWORD *)a1);
  if (v9 == 1 || v9 >= 5)
  {
    v14 = *(int32x2_t *)(a1 + 104);
    v11 = vadd_s32(v14, v7);
    v12 = vadd_s32(v11, v6);
    v13 = vmax_s32(v11, 0);
    v6 = vsub_s32(vmin_s32(*(int32x2_t *)(a1 + 112), v12), v13);
    v7 = vsub_s32(v13, v14);
  }
  else
  {
    v9 = 0;
    v8 &= 0xFF00FFFF;
    *(_DWORD *)a1 = v8;
    v14 = 0;
  }
  v15 = BYTE1(v8);
  if (BYTE1(v8) == 4 || !*(_QWORD *)(a1 + 88) || (v17 = *(_QWORD *)(a1 + 64), (int)v17 < 1) || v17 <= 0)
  {
    v15 = 0;
    v8 = v8 & 0xFFFF00FF | 0x400;
    *(_DWORD *)a1 = v8;
    v16 = 0;
    *(_QWORD *)(a1 + 76) = 0;
    *(_OWORD *)(a1 + 56) = xmmword_185004FA0;
    v17 = 0x100000001;
    goto LABEL_11;
  }
  if ((v8 & 0xFE00) == 0x200)
  {
    v16 = *(int32x2_t *)(a1 + 56);
    goto LABEL_11;
  }
  if (BYTE1(v8) != 1)
    return 0xFFFFFFFFLL;
  v16 = *(int32x2_t *)(a1 + 56);
  v22 = vadd_s32(v16, v7);
  v23 = vadd_s32(v22, v6);
  v24 = vmax_s32(v22, 0);
  v6 = vsub_s32(vmin_s32((int32x2_t)v17, v23), v24);
  v7 = vsub_s32(v24, v16);
LABEL_11:
  *(int32x2_t *)(a1 + 4) = v6;
  if (v6.i32[0] < 1 || v6.i32[1] < 1)
    return 0;
  *(int32x2_t *)(a1 + 12) = vadd_s32(v7, v1);
  if (v15)
  {
    v20 = vadd_s32(v16, v7);
    if (v15 == 3)
    {
      v25.i32[0] = v20.i32[0] % (int)v17;
      v25.i32[1] = v20.i32[1] % SHIDWORD(v17);
      v20 = vadd_s32((int32x2_t)vand_s8((int8x8_t)vcltz_s32(v25), (int8x8_t)v17), v25);
    }
    else if (v15 == 2)
    {
      v20.i32[0] %= (int)v17;
      v20.i32[1] %= SHIDWORD(v17);
      v20 = vadd_s32((int32x2_t)vand_s8((int8x8_t)vcltz_s32(v20), (int8x8_t)v17), v20);
      v21 = vcgt_s32(vadd_s32(v20, v6), (int32x2_t)v17);
      if (((v21.i32[0] | v21.i32[1]) & 1) == 0)
        *(_DWORD *)a1 = v8 & 0xFFFF00FF | 0x100;
    }
    *(int32x2_t *)(a1 + 56) = v20;
  }
  if (v9)
    *(int32x2_t *)(a1 + 104) = vadd_s32(v7, v14);
  return 1;
}

uint64_t ripl_BltOpMask(uint64_t result, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;
  char v4;

  *(_DWORD *)(result + 120) = 0;
  *(_DWORD *)(result + 128) = 0;
  if (a3)
  {
    *(_QWORD *)(result + 112) = *(_QWORD *)(a3 + 20);
    *(_DWORD *)(result + 104) = *a2 - *(_DWORD *)(a3 + 12);
    *(_DWORD *)(result + 108) = *(_DWORD *)(a3 + 24) + *(_DWORD *)(a3 + 16) - (a2[1] + a2[3]);
    if (*(_QWORD *)(a3 + 72))
    {
      *(_BYTE *)(result + 2) = 5;
      *(_DWORD *)(result + 124) = *(_DWORD *)(a3 + 64);
      v3 = *(_QWORD *)(a3 + 72);
LABEL_12:
      *(_QWORD *)(result + 136) = v3;
      return result;
    }
    if (*(_QWORD *)(a3 + 56))
    {
      if ((*(_DWORD *)(a3 + 28) & 0x80) != 0)
        v4 = 6;
      else
        v4 = 1;
      *(_BYTE *)(result + 2) = v4;
      *(_DWORD *)(result + 124) = *(_DWORD *)(a3 + 48);
      v3 = *(_QWORD *)(a3 + 56);
      goto LABEL_12;
    }
    *(_BYTE *)(result + 2) = 5;
    *(_DWORD *)(result + 124) = 0;
    *(_QWORD *)(result + 136) = 0;
  }
  else if ((*(_DWORD *)result & 0xFF0000) != 0)
  {
    *(_DWORD *)result &= 0xFF00FFFF;
    *(_DWORD *)(result + 124) = 0;
    *(_QWORD *)(result + 136) = 0;
    *(_QWORD *)(result + 104) = 0;
    *(_QWORD *)(result + 112) = 0;
  }
  return result;
}

uint64_t argb32_mark(uint64_t *a1, uint64_t a2, __n128 a3, double a4, double a5, int16x8_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  unsigned int v21;
  int v22;
  int *v23;
  int v24;
  unsigned int v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  BOOL v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint32x2_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint32x2_t *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unsigned int v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  __int8 v62;
  unsigned int v63;
  unsigned __int8 v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  int v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  unsigned __int32 v130;
  int v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  int v141;
  int v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  int v151;
  unsigned int v152;
  int v153;
  int v154;
  __int32 v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  int v164;
  unsigned int v165;
  int v166;
  int v167;
  __int32 v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  int v180;
  __int32 v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  __int32 v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  __int32 v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  int v219;
  __int32 v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  int v232;
  __int32 v233;
  unint64_t v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  int v245;
  __int32 v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  int v258;
  __int32 v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  unsigned int v268;
  unsigned __int32 v269;
  unsigned int v270;
  unsigned __int32 v271;
  __int32 v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  int v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  int v284;
  __int32 v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  int v293;
  unsigned int v294;
  unsigned __int32 v295;
  unsigned int v296;
  int v297;
  __int32 v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  unsigned int v307;
  unsigned __int32 v308;
  unsigned int v309;
  int v310;
  __int32 v311;
  unint64_t v312;
  uint64_t v313;
  unint64_t v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;
  int v323;
  __int32 v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  unsigned int v333;
  unsigned __int32 v334;
  unsigned int v335;
  unsigned int v336;
  __int32 v337;
  unint64_t v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  unsigned int v346;
  unsigned __int32 v347;
  unsigned int v348;
  int v349;
  __int32 v350;
  unint64_t v351;
  uint64_t v352;
  unint64_t v353;
  unint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  int v358;
  unsigned int v359;
  unsigned __int32 v360;
  unsigned int v361;
  int v362;
  __int32 v363;
  unint64_t v364;
  uint64_t v365;
  unint64_t v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  unsigned int v372;
  unsigned int v373;
  unsigned int v374;
  int v375;
  __int32 v376;
  unint64_t v377;
  uint64_t v378;
  unint64_t v379;
  unint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  int v384;
  unsigned int v385;
  unsigned __int32 v386;
  unsigned int v387;
  unsigned int v388;
  __int32 v389;
  unint64_t v390;
  uint64_t v391;
  unint64_t v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  int v397;
  unsigned int v398;
  int v399;
  unint64_t v400;
  uint64_t v401;
  unint64_t v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unint64_t v407;
  int v408;
  void *v409;
  uint8x8_t v410;
  uint64_t v411;
  int v412;
  unint64_t v413;
  uint64_t v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  int v420;
  unint64_t v421;
  uint64_t v422;
  unint64_t v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  int v428;
  unint64_t v429;
  uint64_t v430;
  unint64_t v431;
  unint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  char *v436;
  unint64_t v437;
  uint64_t v438;
  unint64_t v439;
  int v440;
  unsigned int v441;
  int v442;
  int v443;
  int v444;
  int v445;
  int v446;
  unsigned int v447;
  int v448;
  int v449;
  unsigned int v450;
  int v451;
  int *v452;
  int v453;
  unsigned int v454;
  unsigned int v455;
  _DWORD *v456;
  unsigned int v457;
  int v458;
  unsigned int v459;
  unsigned int *v460;
  unsigned int v461;
  int v462;
  int v463;
  unsigned int *v464;
  unsigned int v465;
  int v466;
  int v467;
  int v468;
  int v469;
  unsigned int *v470;
  unsigned int v471;
  int v472;
  int v473;
  unsigned int *v474;
  unsigned int v475;
  int v476;
  int v477;
  unsigned int *v478;
  int v479;
  unsigned int v480;
  unsigned int v481;
  int v482;
  int v483;
  int v484;
  unsigned int v485;
  int v486;
  unsigned int v487;
  int v488;
  unsigned int v489;
  int v490;
  unsigned int v491;
  int v492;
  unsigned int v493;
  unsigned int v494;
  unsigned int v495;
  int v496;
  unsigned int v497;
  unsigned int v498;
  unsigned int v499;
  int v500;
  unsigned int v501;
  unsigned int v502;
  unsigned int v503;
  int v504;
  unsigned int v505;
  unsigned int v506;
  unsigned int v507;
  int v508;
  unsigned int v509;
  unsigned int v510;
  unsigned int v511;
  int v512;
  unsigned int v513;
  unsigned int v514;
  unsigned int v515;
  int v516;
  unsigned int v517;
  unsigned int v518;
  unsigned int v519;
  int v520;
  unsigned __int32 v521;
  unsigned int v522;
  unsigned int v523;
  int v524;
  unsigned int v525;
  unsigned int v526;
  unsigned int v527;
  int v528;
  unsigned int v529;
  unsigned int v530;
  unsigned int v531;
  int v532;
  unsigned int v533;
  unsigned int v534;
  unsigned int v535;
  int v536;
  unsigned int v537;
  unsigned int v538;
  unsigned int v539;
  int v540;
  unsigned int v541;
  unsigned int v542;
  unsigned int v543;
  int v544;
  unsigned int v545;
  unsigned int v546;
  unsigned int v547;
  int v548;
  unsigned int v549;
  unsigned int v550;
  unsigned int v551;
  int v552;
  unsigned int v553;
  unsigned int v554;
  unsigned int v555;
  int v556;
  unsigned int v557;
  unsigned int v558;
  unsigned int v559;
  unint64_t v560;
  int v561;
  int v562;
  int v563;
  int v564;
  uint64_t v565;
  unint64_t v566;
  unint64_t v567;
  uint64_t v568;
  unint64_t v569;
  int v570;
  unint64_t v571;
  int v572;
  unint64_t v573;
  int v574;
  unsigned int *v575;
  unint64_t v576;
  unint64_t v577;
  uint64_t v578;
  unint64_t v579;
  unint64_t v580;
  uint64_t v581;
  int v582;
  _DWORD v583[3];

  v12 = a2;
  v13 = *a1;
  if (*(_DWORD *)(a2 + 132))
  {
    if (CGPreferencesCheck<CGImageMarkAllowTemplateMethodInteger>(void)::onceToken != -1)
      dispatch_once(&CGPreferencesCheck<CGImageMarkAllowTemplateMethodInteger>(void)::onceToken, &__block_literal_global_10_12448);
    v14 = CGPreferencesCheck<CGImageMarkAllowTemplateMethodInteger>(void)::result != 0;
  }
  else
  {
    v14 = 0;
  }
  v15 = *(_DWORD *)v12;
  v16 = *(_QWORD *)(v12 + 96);
  v17 = *(_QWORD *)(v12 + 48);
  v18 = *(unsigned int *)(*(_QWORD *)(v13 + 56)
                        + 16 * *(_DWORD *)v12
                        + 8 * (v16 == 0)
                        + 4 * (v17 == 0));
  if ((int)v18 > 27)
    return 0xFFFFFFFFLL;
  v20 = *(unsigned int *)(v12 + 4);
  v21 = v20 - 1;
  if ((int)v20 < 1)
    return 0;
  v22 = *(_DWORD *)(v12 + 8);
  if (v22 < 1)
    return 0;
  if ((int)v18 >= 24)
  {
    if (*(_DWORD *)v13 == 134755208)
      v18 = (v18 + 4);
    else
      v18 = v18;
  }
  v23 = *(int **)(v12 + 136);
  if ((v15 & 0xFF0000) != 0x50000 && v23)
  {
    v24 = *(_DWORD *)(v12 + 128);
    if ((v24 | 8) == 8)
    {
      if ((*(_DWORD *)v12 & 0xFF00) == 0x400)
      {
        if ((_DWORD)v18 == 1)
          argb32_mark_constcolormask(v12, a3.n128_f64[0], a4, a5, a6);
        else
          argb32_mark_constmask(v12, v18);
      }
      else if (v14 && ((1 << v18) & 0xFFFFFE) != 0)
      {
        argb32_mark_pixelmask_template(v12, v18);
      }
      else
      {
        argb32_mark_pixelmask(v12, v18);
      }
    }
    else
    {
      v28 = v18 - 1;
      if ((*(_DWORD *)v12 & 0xFF00) == 0x400 && v24 == 16 && v28 <= 1)
      {
        argb32_mark_constdeep(v13, v12, (uint64_t)v23, a8, a9, a10, a11, a12);
      }
      else if (v24 != 16 || (*(_DWORD *)v12 & 0xFF00) == 0x400 || v28 > 1)
      {
        argb32_mark_bits(v12, a3);
      }
      else
      {
        argb32_mark_pixeldeep(v13, v12, (uint64_t)v23, a8, a9, a10, a11, a12);
      }
    }
    return 1;
  }
  v560 = v12;
  v570 = v18;
  if (BYTE1(v15) == 1)
  {
    if (v14 && ((1 << v18) & 0xFFFFFE) != 0)
    {
      argb32_mark_pixelshape_template(v12, v18);
      return 1;
    }
LABEL_36:
    v582 = *(_DWORD *)(v12 + 8);
    v583[0] = v20;
    v29 = *(_QWORD *)(v12 + 88);
    v30 = (unint64_t)*(int *)(v12 + 28) >> 2;
    v31 = *(_QWORD *)(v12 + 40) + 4 * (*(int *)(v12 + 12) + v30 * *(int *)(v12 + 16));
    v32 = *(_DWORD *)(v12 + 56);
    v33 = *(_DWORD *)(v12 + 60);
    v34 = (unint64_t)*(int *)(v12 + 76) >> 2;
    if ((v15 & 0xFF00) != 0x100)
    {
      LODWORD(v569) = *(_DWORD *)(v12 + 64);
      v564 = *(_DWORD *)(v12 + 68);
      v573 = v29 + 4 * v34 * v564;
      v37 = v16 != 0;
      if (v23)
      {
        v577 = (unint64_t)*(int *)(v12 + 76) >> 2;
        v561 = *(_DWORD *)(v12 + 60);
        v562 = *(_DWORD *)(v12 + 56);
        v36 = 1;
        v580 = *(_QWORD *)(v12 + 88);
        v38 = v580;
        goto LABEL_61;
      }
      v576 = v30 - v20;
      if (v29)
      {
        v568 = 0;
        v577 = (unint64_t)*(int *)(v12 + 76) >> 2;
        v39 = v29 + 4 * v34 * (v33 % v564);
        v562 = v32 % (int)v569;
        v40 = v39 + 4 * (v32 % (int)v569);
        v38 = v39 + 4 * (int)v569;
        v563 = 1;
        v580 = v40;
        v41 = (uint32x2_t *)(*(_QWORD *)(v12 + 40) + 4 * (*(int *)(v12 + 12) + v30 * *(int *)(v12 + 16)));
        v561 = v33 % v564;
        goto LABEL_65;
      }
      v561 = *(_DWORD *)(v12 + 60);
      v562 = *(_DWORD *)(v12 + 56);
      v38 = 0;
      v563 = 1;
      v42 = v20;
      goto LABEL_64;
    }
    v29 += 4 * (v32 + v34 * v33);
    if (v34 == v30)
    {
      if ((uint64_t)(v31 - v29) < 1)
        goto LABEL_41;
      if (v20 < (v31 - v29) >> 2)
      {
        v35 = v30 * (v22 - 1);
        if (v31 <= v29 + 4 * v35 + 4 * v21)
        {
          v31 += 4 * v35;
          v30 = -(uint64_t)v30;
          v36 = 1;
          v29 += 4 * v35;
          goto LABEL_58;
        }
LABEL_41:
        v36 = 1;
LABEL_58:
        v569 = v30;
        goto LABEL_59;
      }
      v31 += 4 * v21;
      v36 = -1;
      v569 = (unint64_t)*(int *)(v12 + 28) >> 2;
      v29 += 4 * v21;
    }
    else
    {
      v36 = 1;
      v569 = (unint64_t)*(int *)(v12 + 76) >> 2;
    }
LABEL_59:
    v561 = *(_DWORD *)(v12 + 60);
    v562 = *(_DWORD *)(v12 + 56);
    v37 = v16 != 0;
    if (v23)
    {
      v564 = 0;
      v580 = 0;
      v573 = 0;
      v38 = -1;
      v577 = v569;
LABEL_61:
      v563 = v36;
      shape_enum_clip_alloc((uint64_t)a1, a2, v23, v36, v30, 1, *(_DWORD *)(v12 + 104), *(_DWORD *)(v12 + 108), v20, v22);
      v44 = v43;
      if (!v43)
        return 1;
      goto LABEL_767;
    }
    v563 = v36;
    v564 = 0;
    v42 = v36 * (int)v20;
    v576 = v30 - v42;
    v38 = -1;
    v34 = v569;
LABEL_64:
    v568 = 0;
    v573 = 0;
    v577 = v34 - v42;
    v580 = 0;
    v40 = v29;
    v41 = (uint32x2_t *)v31;
LABEL_65:
    while (2)
    {
      v572 = v20;
      switch((int)v18)
      {
        case 0:
          v45 = (uint32x2_t *)((char *)v41 - 4 * (int)v20 + 4);
          v46 = v576 + (int)v20;
          if (v563 < 0)
            v46 = v576 - (int)v20;
          else
            v45 = v41;
          v47 = (char *)v45 + 4 * ((v46 * (v582 - 1)) & (v46 >> 63));
          if (v46 < 0)
            v46 = -v46;
          CGBlt_fillBytes(4 * v20, v582, 0, v47, 4 * v46);
          goto LABEL_765;
        case 1:
          if (BYTE1(*(_DWORD *)v12) == 2)
          {
            if ((int)v20 >= 8 && (4 * v569) <= 0x40)
            {
              a3.n128_u32[0] = 4 * v569;
              v410 = (uint8x8_t)vcnt_s8((int8x8_t)a3.n128_u64[0]);
              v410.i16[0] = vaddlv_u8(v410);
              if (v410.i32[0] <= 1u)
              {
                CGSFillDRAM64(v41, 4 * (v20 + v576), 4 * v20, v582, v29, 4 * v577, 4 * v569, v564, 4 * v562, v561);
                goto LABEL_765;
              }
            }
          }
          else if (BYTE1(*(_DWORD *)v12) == 1)
          {
            if (v17 == 0 || v37)
            {
              if (v563 < 0)
              {
                v48 = v577 - (int)v20;
                v40 -= 4 * ((int)v20 - 1);
                v49 = v576 - (int)v20;
                v41 = (uint32x2_t *)((char *)v41 - 4 * (int)v20 + 4);
              }
              else
              {
                v48 = v577 + (int)v20;
                v49 = v576 + (int)v20;
              }
              v436 = (char *)(v40 + 4 * ((v48 * (v582 - 1)) & (v48 >> 63)));
              if (v48 >= 0)
                v437 = v48;
              else
                v437 = -v48;
              if (v49 >= 0)
                LODWORD(v438) = v49;
              else
                v438 = -v49;
              v577 = v437;
              CGBlt_copyBytes(4 * v20, v582, v436, (char *)v41 + 4 * ((v49 * (v582 - 1)) & (v49 >> 63)), 4 * v437, 4 * v438);
            }
            else
            {
              do
              {
                v420 = v583[0];
                do
                {
                  v41->i32[0] = *(_DWORD *)v40 | 0xFF000000;
                  v421 = v40 + 4 * v563;
                  if (v421 >= v38)
                    v422 = -(uint64_t)(int)v569;
                  else
                    v422 = 0;
                  v40 = v421 + 4 * v422;
                  v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
                  --v420;
                }
                while (v420);
                v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
                v423 = v580;
                v424 = v580 + 4 * v577;
                if (v424 >= v573)
                  v425 = -(uint64_t)(v577 * v564);
                else
                  v425 = 0;
                v426 = v424 + 4 * v425;
                v427 = v38 + 4 * v425 + 4 * v577;
                if (v573)
                {
                  v38 = v427;
                  v423 = v426;
                }
                v580 = v423;
                if (v573)
                  v40 = v426;
                else
                  v40 += 4 * v577;
                --v582;
              }
              while (v582);
            }
            goto LABEL_765;
          }
          if ((*(_DWORD *)v12 & 0xFF00) == 0x200)
          {
            blt_bitmap_copy_XXXX32((int)v20, v582, v41, v576 + (int)v20, (int)v569, v564, v29, v577, v562, v561);
          }
          else
          {
            v411 = 4 * v563;
            if (v17 == 0 || v37)
            {
              do
              {
                v412 = v583[0];
                do
                {
                  v41->i32[0] = *(_DWORD *)v40;
                  v413 = v40 + 4 * v563;
                  if (v413 >= v38)
                    v414 = -(uint64_t)(int)v569;
                  else
                    v414 = 0;
                  v40 = v413 + 4 * v414;
                  v41 = (uint32x2_t *)((char *)v41 + v411);
                  --v412;
                }
                while (v412);
                v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
                v415 = v580;
                v416 = v580 + 4 * v577;
                if (v416 >= v573)
                  v417 = -(uint64_t)(v577 * v564);
                else
                  v417 = 0;
                v418 = v416 + 4 * v417;
                v419 = v38 + 4 * v417 + 4 * v577;
                if (v573)
                {
                  v38 = v419;
                  v415 = v418;
                }
                v580 = v415;
                if (v573)
                  v40 = v418;
                else
                  v40 += 4 * v577;
                --v582;
              }
              while (v582);
            }
            else
            {
              do
              {
                v428 = v583[0];
                do
                {
                  v41->i32[0] = *(_DWORD *)v40 | 0xFF000000;
                  v429 = v40 + 4 * v563;
                  if (v429 >= v38)
                    v430 = -(uint64_t)(int)v569;
                  else
                    v430 = 0;
                  v40 = v429 + 4 * v430;
                  v41 = (uint32x2_t *)((char *)v41 + v411);
                  --v428;
                }
                while (v428);
                v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
                v431 = v580;
                v432 = v580 + 4 * v577;
                if (v432 >= v573)
                  v433 = -(uint64_t)(v577 * v564);
                else
                  v433 = 0;
                v434 = v432 + 4 * v433;
                v435 = v38 + 4 * v433 + 4 * v577;
                if (v573)
                {
                  v38 = v435;
                  v431 = v434;
                }
                v580 = v431;
                if (v573)
                  v40 = v434;
                else
                  v40 += 4 * v577;
                --v582;
              }
              while (v582);
            }
          }
          goto LABEL_765;
        case 2:
          if (*(unsigned __int8 *)(v12 + 1) << 8 != 512)
          {
            v565 = v29;
            v566 = v30;
            v567 = v31;
            do
            {
              v397 = v583[0];
              do
              {
                v398 = *(_DWORD *)v40;
                v399 = HIBYTE(*(_DWORD *)v40);
                if (v399)
                {
                  if (v399 == 255)
                    v41->i32[0] = v398;
                  else
                    DplusDM_13347(v41, v398, v41->i32[0], ~v398 >> 24);
                }
                v400 = v40 + 4 * v563;
                if (v400 >= v38)
                  v401 = -(uint64_t)(int)v569;
                else
                  v401 = 0;
                v40 = v400 + 4 * v401;
                v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
                --v397;
              }
              while (v397);
              v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
              v402 = v580;
              v403 = v580 + 4 * v577;
              if (v403 >= v573)
                v404 = -(uint64_t)(v577 * v564);
              else
                v404 = 0;
              v405 = v403 + 4 * v404;
              v406 = v38 + 4 * v404 + 4 * v577;
              if (v573)
              {
                v38 = v406;
                v402 = v405;
              }
              v580 = v402;
              if (v573)
                v40 = v405;
              else
                v40 += 4 * v577;
              --v582;
            }
            while (v582);
            goto LABEL_763;
          }
          blt_bitmap_blend_AXXX32((int)v20, v582, v41, v576 + (int)v20, (int)v569, v564, v29, v577, v562, v561);
          goto LABEL_765;
        case 3:
          v565 = v29;
          v566 = v30;
          v567 = v31;
          do
          {
            v50 = v583[0];
            do
            {
              v51 = HIBYTE(v41->i32[0]);
              if (v51 == 255)
              {
                v52 = *(_DWORD *)v40 & 0xFF000000;
                if (!v37)
                  v52 = -16777216;
                v41->i32[0] = v52 & 0xFF000000 | *(_DWORD *)v40 & 0xFFFFFF;
              }
              else if (v51)
              {
                v53 = HIBYTE(*(_DWORD *)v40);
                if (!v37)
                  LOBYTE(v53) = -1;
                DAM(v41, *(_DWORD *)v40, v53, v51);
              }
              else
              {
                v41->i32[0] = 0;
              }
              v54 = v40 + 4 * v563;
              if (v54 >= v38)
                v55 = -(uint64_t)(int)v569;
              else
                v55 = 0;
              v40 = v54 + 4 * v55;
              v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
              --v50;
            }
            while (v50);
            v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
            v56 = v580;
            v57 = v580 + 4 * v577;
            v58 = -(uint64_t)(v577 * v564);
            if (v57 < v573)
              v58 = 0;
            v59 = v57 + 4 * v58;
            v60 = v38 + 4 * v58 + 4 * v577;
            if (v573)
            {
              v38 = v60;
              v56 = v59;
            }
            v580 = v56;
            if (v573)
              v40 = v59;
            else
              v40 += 4 * v577;
            --v582;
          }
          while (v582);
          goto LABEL_763;
        case 4:
          v565 = v29;
          v566 = v30;
          v567 = v31;
          do
          {
            v61 = v583[0];
            do
            {
              v62 = v41->i8[3];
              if (~v62 == 255)
              {
                v63 = *(_DWORD *)v40 & 0xFF000000;
                if (!v37)
                  v63 = -16777216;
                v41->i32[0] = v63 & 0xFF000000 | *(_DWORD *)v40 & 0xFFFFFF;
              }
              else if (v62 == -1)
              {
                v41->i32[0] = 0;
              }
              else
              {
                v64 = ~v62;
                v65 = HIBYTE(*(_DWORD *)v40);
                if (!v37)
                  LOBYTE(v65) = -1;
                DAM(v41, *(_DWORD *)v40, v65, v64);
              }
              v66 = v40 + 4 * v563;
              if (v66 >= v38)
                v67 = -(uint64_t)(int)v569;
              else
                v67 = 0;
              v40 = v66 + 4 * v67;
              v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
              --v61;
            }
            while (v61);
            v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
            v68 = v580;
            v69 = v580 + 4 * v577;
            v70 = -(uint64_t)(v577 * v564);
            if (v69 < v573)
              v70 = 0;
            v71 = v69 + 4 * v70;
            v72 = v38 + 4 * v70 + 4 * v577;
            if (v573)
            {
              v38 = v72;
              v68 = v71;
            }
            v580 = v68;
            if (v573)
              v40 = v71;
            else
              v40 += 4 * v577;
            --v582;
          }
          while (v582);
          goto LABEL_763;
        case 5:
          v565 = v29;
          v566 = v30;
          v567 = v31;
          v73 = v582;
          do
          {
            v74 = v20;
            do
            {
              DMplusDM_13346((unsigned int *)v41, *(_DWORD *)v40, HIBYTE(v41->i32[0]), v41->i32[0], ~*(_DWORD *)v40 >> 24);
              v75 = v40 + 4 * v563;
              if (v75 >= v38)
                v76 = -(uint64_t)(int)v569;
              else
                v76 = 0;
              v40 = v75 + 4 * v76;
              v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
              --v74;
            }
            while (v74);
            v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
            v77 = v580;
            v78 = v580 + 4 * v577;
            v79 = -(uint64_t)(v577 * v564);
            if (v78 < v573)
              v79 = 0;
            v80 = v78 + 4 * v79;
            v81 = v38 + 4 * v79 + 4 * v577;
            if (v573)
            {
              v38 = v81;
              v77 = v80;
            }
            v580 = v77;
            if (v573)
              v40 = v80;
            else
              v40 += 4 * v577;
            v582 = --v73;
            LODWORD(v20) = v572;
          }
          while (v73);
          goto LABEL_763;
        case 6:
          v565 = v29;
          v566 = v30;
          v567 = v31;
          do
          {
            v82 = v583[0];
            do
            {
              if (~HIBYTE(v41->i32[0]))
              {
                if (~HIBYTE(v41->i32[0]) == 255)
                {
                  v83 = *(_DWORD *)v40 & 0xFF000000;
                  if (!v37)
                    v83 = -16777216;
                  v41->i32[0] = v83 & 0xFF000000 | *(_DWORD *)v40 & 0xFFFFFF;
                }
                else
                {
                  v84 = HIBYTE(*(_DWORD *)v40);
                  if (!v37)
                    LOBYTE(v84) = -1;
                  DplusDAM(v41, v41->i32[0], *(_DWORD *)v40, v84, ~HIBYTE(v41->i32[0]));
                }
              }
              v85 = v40 + 4 * v563;
              if (v85 >= v38)
                v86 = -(uint64_t)(int)v569;
              else
                v86 = 0;
              v40 = v85 + 4 * v86;
              v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
              --v82;
            }
            while (v82);
            v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
            v87 = v580;
            v88 = v580 + 4 * v577;
            v89 = -(uint64_t)(v577 * v564);
            if (v88 < v573)
              v89 = 0;
            v90 = v88 + 4 * v89;
            v91 = v38 + 4 * v89 + 4 * v577;
            if (v573)
            {
              v38 = v91;
              v87 = v90;
            }
            v580 = v87;
            if (v573)
              v40 = v90;
            else
              v40 += 4 * v577;
            --v582;
          }
          while (v582);
          goto LABEL_763;
        case 7:
          v565 = v29;
          v566 = v30;
          v567 = v31;
          while (1)
          {
            v92 = v583[0];
            do
            {
              v93 = HIBYTE(*(_DWORD *)v40);
              if (v93)
              {
                if (v93 == 255)
                  goto LABEL_171;
                v93 = PDM_13345(v41->i32[0], v93);
              }
              v41->i32[0] = v93;
LABEL_171:
              v94 = v40 + 4 * v563;
              if (v94 >= v38)
                v95 = -(uint64_t)(int)v569;
              else
                v95 = 0;
              v40 = v94 + 4 * v95;
              v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
              --v92;
            }
            while (v92);
            v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
            v96 = v580;
            v97 = v580 + 4 * v577;
            if (v97 >= v573)
              v98 = -(uint64_t)(v577 * v564);
            else
              v98 = 0;
            v99 = v97 + 4 * v98;
            v100 = v38 + 4 * v98 + 4 * v577;
            if (v573)
            {
              v38 = v100;
              v96 = v99;
            }
            v580 = v96;
            if (v573)
              v40 = v99;
            else
              v40 += 4 * v577;
            if (!--v582)
              goto LABEL_763;
          }
        case 8:
          v565 = v29;
          v566 = v30;
          v567 = v31;
          do
          {
            v101 = v583[0];
            do
            {
              v102 = *(unsigned __int8 *)(v40 + 3) ^ 0xFF;
              if (v102)
              {
                if (v102 == 255)
                  goto LABEL_191;
                v102 = PDM_13345(v41->i32[0], v102);
              }
              v41->i32[0] = v102;
LABEL_191:
              v103 = v40 + 4 * v563;
              if (v103 >= v38)
                v104 = -(uint64_t)(int)v569;
              else
                v104 = 0;
              v40 = v103 + 4 * v104;
              v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
              --v101;
            }
            while (v101);
            v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
            v105 = v580;
            v106 = v580 + 4 * v577;
            if (v106 >= v573)
              v107 = -(uint64_t)(v577 * v564);
            else
              v107 = 0;
            v108 = v106 + 4 * v107;
            v109 = v38 + 4 * v107 + 4 * v577;
            if (v573)
            {
              v38 = v109;
              v105 = v108;
            }
            v580 = v105;
            if (v573)
              v40 = v108;
            else
              v40 += 4 * v577;
            --v582;
          }
          while (v582);
LABEL_763:
          v12 = v560;
LABEL_764:
          LODWORD(v18) = v570;
          v30 = v566;
          v31 = v567;
          v29 = v565;
LABEL_765:
          v44 = v568;
          if (!v568)
            return 1;
          v581 = 0;
LABEL_767:
          if (!shape_enum_clip_next(v44, (int *)&v581 + 1, &v581, v583, &v582))
          {
            v409 = (void *)v44;
            goto LABEL_1104;
          }
          v568 = v44;
          if (v573)
          {
            v41 = (uint32x2_t *)(v31 + 4 * v30 * (int)v581 + 4 * SHIDWORD(v581));
            LODWORD(v20) = v583[0];
            v407 = v29 + 4 * v577 * (((int)v581 + *(_DWORD *)(v12 + 60)) % v564);
            v562 = (HIDWORD(v581) + *(_DWORD *)(v12 + 56)) % (int)v569;
            v40 = v407 + 4 * v562;
            v38 = v407 + 4 * (int)v569;
            v580 = v40;
            v408 = v583[0];
            v561 = ((int)v581 + *(_DWORD *)(v12 + 60)) % v564;
          }
          else
          {
            LODWORD(v20) = v583[0];
            v408 = v583[0] * v563;
            v41 = (uint32x2_t *)(v31 + 4 * v30 * (int)v581 + 4 * HIDWORD(v581) * v563);
            v40 = v29 + 4 * (int)v581 * (int)v569 + 4 * HIDWORD(v581) * v563;
            v577 = (int)v569 - v583[0] * v563;
          }
          v576 = v30 - v408;
          continue;
        case 9:
          v565 = v29;
          v566 = v30;
          v567 = v31;
          v110 = v582;
          do
          {
            v111 = v20;
            do
            {
              DMplusDM_13346((unsigned int *)v41, *(_DWORD *)v40, ~v41->i32[0] >> 24, v41->i32[0], HIBYTE(*(_DWORD *)v40));
              v112 = v40 + 4 * v563;
              if (v112 >= v38)
                v113 = -(uint64_t)(int)v569;
              else
                v113 = 0;
              v40 = v112 + 4 * v113;
              v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
              --v111;
            }
            while (v111);
            v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
            v114 = v580;
            v115 = v580 + 4 * v577;
            v116 = -(uint64_t)(v577 * v564);
            if (v115 < v573)
              v116 = 0;
            v117 = v115 + 4 * v116;
            v118 = v38 + 4 * v116 + 4 * v577;
            if (v573)
            {
              v38 = v118;
              v114 = v117;
            }
            v580 = v114;
            if (v573)
              v40 = v117;
            else
              v40 += 4 * v577;
            v582 = --v110;
            LODWORD(v20) = v572;
          }
          while (v110);
          goto LABEL_763;
        case 10:
          v565 = v29;
          v566 = v30;
          v567 = v31;
          v119 = v582;
          do
          {
            v120 = v20;
            do
            {
              DMplusDM_13346((unsigned int *)v41, *(_DWORD *)v40, ~v41->i32[0] >> 24, v41->i32[0], ~*(_DWORD *)v40 >> 24);
              v121 = v40 + 4 * v563;
              if (v121 >= v38)
                v122 = -(uint64_t)(int)v569;
              else
                v122 = 0;
              v40 = v121 + 4 * v122;
              v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
              --v120;
            }
            while (v120);
            v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
            v123 = v580;
            v124 = v580 + 4 * v577;
            v125 = -(uint64_t)(v577 * v564);
            if (v124 < v573)
              v125 = 0;
            v126 = v124 + 4 * v125;
            v127 = v38 + 4 * v125 + 4 * v577;
            if (v573)
            {
              v38 = v127;
              v123 = v126;
            }
            v580 = v123;
            if (v573)
              v40 = v126;
            else
              v40 += 4 * v577;
            v582 = --v119;
            LODWORD(v20) = v572;
          }
          while (v119);
          goto LABEL_763;
        case 11:
          v565 = v29;
          v566 = v30;
          v567 = v31;
          v128 = v582;
          do
          {
            v129 = v20;
            do
            {
              v130 = HIBYTE(v41->i32[0]);
              if (!v17)
                LOBYTE(v130) = -1;
              v131 = HIBYTE(*(_DWORD *)v40);
              if (!v37)
                LOBYTE(v131) = -1;
              DAplusdDA_13348(v41, v41->i32[0], v130, *(_DWORD *)v40, v131);
              v132 = v40 + 4 * v563;
              if (v132 >= v38)
                v133 = -(uint64_t)(int)v569;
              else
                v133 = 0;
              v40 = v132 + 4 * v133;
              v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
              --v129;
            }
            while (v129);
            v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
            v134 = v580;
            v135 = v580 + 4 * v577;
            v136 = -(uint64_t)(v577 * v564);
            if (v135 < v573)
              v136 = 0;
            v137 = v135 + 4 * v136;
            v138 = v38 + 4 * v136 + 4 * v577;
            if (v573)
            {
              v38 = v138;
              v134 = v137;
            }
            v580 = v134;
            if (v573)
              v40 = v137;
            else
              v40 += 4 * v577;
            v582 = --v128;
            LODWORD(v20) = v572;
          }
          while (v128);
          goto LABEL_763;
        case 12:
          do
          {
            v139 = v583[0];
            do
            {
              v141 = *(_DWORD *)v40 >> 8;
              v142 = v141 & 0xFF0000;
              if (!v37)
                v142 = 16711680;
              v140 = ((unsigned __int32)v41->i32[0] >> 8) & 0xFF00FF;
              v41->i32[0] = ((v140 + v141 + v142) << 8) & 0xFF00FF00 | ((*(_DWORD *)v40 & 0xFF00FF)
                                                                                       + (v41->i32[0] & 0xFF00FF)) & 0xFF00FF | (15 * ((v140 + v141 + v142) & 0x1000100 | (((*(_DWORD *)v40 & 0xFF00FF) + (v41->i32[0] & 0xFF00FFu)) >> 8) & 0x10001)) | (240 * ((v140 + v141 + v142) & 0x1000100 | (((*(_DWORD *)v40 & 0xFF00FF) + (v41->i32[0] & 0xFF00FFu)) >> 8) & 0x10001));
              v143 = v40 + 4 * v563;
              if (v143 >= v38)
                v144 = -(uint64_t)(int)v569;
              else
                v144 = 0;
              v40 = v143 + 4 * v144;
              v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
              --v139;
            }
            while (v139);
            v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
            v145 = v580;
            v146 = v580 + 4 * v577;
            if (v146 >= v573)
              v147 = -(uint64_t)(v577 * v564);
            else
              v147 = 0;
            v148 = v146 + 4 * v147;
            v149 = v38 + 4 * v147 + 4 * v577;
            if (v573)
            {
              v38 = v149;
              v145 = v148;
            }
            v580 = v145;
            if (v573)
              v40 = v148;
            else
              v40 += 4 * v577;
            --v582;
          }
          while (v582);
          goto LABEL_765;
        case 13:
          v565 = v29;
          v566 = v30;
          v567 = v31;
          while (1)
          {
            v150 = v583[0];
            do
            {
              if (!v37)
              {
                v151 = 255;
LABEL_277:
                v152 = v41->i32[0];
                if (v17)
                {
                  v153 = HIBYTE(v152);
                  v154 = *(_DWORD *)v40;
                  if (!HIBYTE(v152))
                  {
                    v155 = v154 & 0xFFFFFF | (v151 << 24);
LABEL_282:
                    v41->i32[0] = v155;
                    goto LABEL_283;
                  }
                }
                else
                {
                  v154 = *(_DWORD *)v40;
                  v153 = 255;
                }
                v155 = PDAmultiplyPDA_13349(v152, v153, v154, v151);
                goto LABEL_282;
              }
              v151 = HIBYTE(*(_DWORD *)v40);
              if (v151)
                goto LABEL_277;
LABEL_283:
              v156 = v40 + 4 * v563;
              if (v156 >= v38)
                v157 = -(uint64_t)(int)v569;
              else
                v157 = 0;
              v40 = v156 + 4 * v157;
              v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
              --v150;
            }
            while (v150);
            v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
            v158 = v580;
            v159 = v580 + 4 * v577;
            v160 = -(uint64_t)(v577 * v564);
            if (v159 < v573)
              v160 = 0;
            v161 = v159 + 4 * v160;
            v162 = v38 + 4 * v160 + 4 * v577;
            if (v573)
            {
              v38 = v162;
              v158 = v161;
            }
            v580 = v158;
            if (v573)
              v40 = v161;
            else
              v40 += 4 * v577;
            if (!--v582)
              goto LABEL_764;
          }
        case 14:
          v565 = v29;
          v566 = v30;
          v567 = v31;
          while (1)
          {
            v163 = v583[0];
            do
            {
              if (!v37)
              {
                v164 = 255;
LABEL_302:
                v165 = v41->i32[0];
                if (v17)
                {
                  v166 = HIBYTE(v165);
                  v167 = *(_DWORD *)v40;
                  if (!HIBYTE(v165))
                  {
                    v168 = v167 & 0xFFFFFF | (v164 << 24);
LABEL_307:
                    v41->i32[0] = v168;
                    goto LABEL_308;
                  }
                }
                else
                {
                  v167 = *(_DWORD *)v40;
                  v166 = 255;
                }
                v168 = PDAscreenPDA_13350(v165, v166, v167, v164);
                goto LABEL_307;
              }
              v164 = HIBYTE(*(_DWORD *)v40);
              if (v164)
                goto LABEL_302;
LABEL_308:
              v169 = v40 + 4 * v563;
              if (v169 >= v38)
                v170 = -(uint64_t)(int)v569;
              else
                v170 = 0;
              v40 = v169 + 4 * v170;
              v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
              --v163;
            }
            while (v163);
            v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
            v171 = v580;
            v172 = v580 + 4 * v577;
            v173 = -(uint64_t)(v577 * v564);
            if (v172 < v573)
              v173 = 0;
            v174 = v172 + 4 * v173;
            v175 = v38 + 4 * v173 + 4 * v577;
            if (v573)
            {
              v38 = v175;
              v171 = v174;
            }
            v580 = v171;
            if (v573)
              v40 = v174;
            else
              v40 += 4 * v577;
            if (!--v582)
              goto LABEL_764;
          }
        case 15:
          v565 = v29;
          v566 = v30;
          v567 = v31;
          while (1)
          {
            v176 = v583[0];
            do
            {
              if (!v37)
              {
                v177 = 255;
LABEL_327:
                v178 = v41->i32[0];
                if (v17)
                {
                  v179 = HIBYTE(v178);
                  v180 = *(_DWORD *)v40;
                  if (!HIBYTE(v178))
                  {
                    v181 = v180 & 0xFFFFFF | (v177 << 24);
LABEL_332:
                    v41->i32[0] = v181;
                    goto LABEL_333;
                  }
                }
                else
                {
                  v180 = *(_DWORD *)v40;
                  v179 = 255;
                }
                v181 = PDAoverlayPDA_13351(v178, v179, v180, v177);
                goto LABEL_332;
              }
              v177 = HIBYTE(*(_DWORD *)v40);
              if (v177)
                goto LABEL_327;
LABEL_333:
              v182 = v40 + 4 * v563;
              if (v182 >= v38)
                v183 = -(uint64_t)(int)v569;
              else
                v183 = 0;
              v40 = v182 + 4 * v183;
              v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
              --v176;
            }
            while (v176);
            v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
            v184 = v580;
            v185 = v580 + 4 * v577;
            v186 = -(uint64_t)(v577 * v564);
            if (v185 < v573)
              v186 = 0;
            v187 = v185 + 4 * v186;
            v188 = v38 + 4 * v186 + 4 * v577;
            if (v573)
            {
              v38 = v188;
              v184 = v187;
            }
            v580 = v184;
            if (v573)
              v40 = v187;
            else
              v40 += 4 * v577;
            if (!--v582)
              goto LABEL_764;
          }
        case 16:
          v565 = v29;
          v566 = v30;
          v567 = v31;
          while (1)
          {
            v189 = v583[0];
            do
            {
              if (!v37)
              {
                v190 = 255;
LABEL_352:
                v191 = v41->i32[0];
                if (v17)
                {
                  v192 = HIBYTE(v191);
                  v193 = *(_DWORD *)v40;
                  if (!HIBYTE(v191))
                  {
                    v194 = v193 & 0xFFFFFF | (v190 << 24);
LABEL_357:
                    v41->i32[0] = v194;
                    goto LABEL_358;
                  }
                }
                else
                {
                  v193 = *(_DWORD *)v40;
                  v192 = 255;
                }
                v194 = PDAdarkenPDA_13353(v191, v192, v193, v190);
                goto LABEL_357;
              }
              v190 = HIBYTE(*(_DWORD *)v40);
              if (v190)
                goto LABEL_352;
LABEL_358:
              v195 = v40 + 4 * v563;
              if (v195 >= v38)
                v196 = -(uint64_t)(int)v569;
              else
                v196 = 0;
              v40 = v195 + 4 * v196;
              v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
              --v189;
            }
            while (v189);
            v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
            v197 = v580;
            v198 = v580 + 4 * v577;
            v199 = -(uint64_t)(v577 * v564);
            if (v198 < v573)
              v199 = 0;
            v200 = v198 + 4 * v199;
            v201 = v38 + 4 * v199 + 4 * v577;
            if (v573)
            {
              v38 = v201;
              v197 = v200;
            }
            v580 = v197;
            if (v573)
              v40 = v200;
            else
              v40 += 4 * v577;
            if (!--v582)
              goto LABEL_764;
          }
        case 17:
          v565 = v29;
          v566 = v30;
          v567 = v31;
          while (1)
          {
            v202 = v583[0];
            do
            {
              if (!v37)
              {
                v203 = 255;
LABEL_377:
                v204 = v41->i32[0];
                if (v17)
                {
                  v205 = HIBYTE(v204);
                  v206 = *(_DWORD *)v40;
                  if (!HIBYTE(v204))
                  {
                    v207 = v206 & 0xFFFFFF | (v203 << 24);
LABEL_382:
                    v41->i32[0] = v207;
                    goto LABEL_383;
                  }
                }
                else
                {
                  v206 = *(_DWORD *)v40;
                  v205 = 255;
                }
                v207 = PDAlightenPDA_13352(v204, v205, v206, v203);
                goto LABEL_382;
              }
              v203 = HIBYTE(*(_DWORD *)v40);
              if (v203)
                goto LABEL_377;
LABEL_383:
              v208 = v40 + 4 * v563;
              if (v208 >= v38)
                v209 = -(uint64_t)(int)v569;
              else
                v209 = 0;
              v40 = v208 + 4 * v209;
              v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
              --v202;
            }
            while (v202);
            v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
            v210 = v580;
            v211 = v580 + 4 * v577;
            v212 = -(uint64_t)(v577 * v564);
            if (v211 < v573)
              v212 = 0;
            v213 = v211 + 4 * v212;
            v214 = v38 + 4 * v212 + 4 * v577;
            if (v573)
            {
              v38 = v214;
              v210 = v213;
            }
            v580 = v210;
            if (v573)
              v40 = v213;
            else
              v40 += 4 * v577;
            if (!--v582)
              goto LABEL_764;
          }
        case 18:
          v565 = v29;
          v566 = v30;
          v567 = v31;
          while (1)
          {
            v215 = v583[0];
            do
            {
              if (!v37)
              {
                v216 = 255;
LABEL_402:
                v217 = v41->i32[0];
                if (v17)
                {
                  v218 = HIBYTE(v217);
                  v219 = *(_DWORD *)v40;
                  if (!HIBYTE(v217))
                  {
                    v220 = v219 & 0xFFFFFF | (v216 << 24);
LABEL_407:
                    v41->i32[0] = v220;
                    goto LABEL_408;
                  }
                }
                else
                {
                  v219 = *(_DWORD *)v40;
                  v218 = 255;
                }
                v220 = PDAcolordodgePDA_13354(v217, v218, v219, v216);
                goto LABEL_407;
              }
              v216 = HIBYTE(*(_DWORD *)v40);
              if (v216)
                goto LABEL_402;
LABEL_408:
              v221 = v40 + 4 * v563;
              if (v221 >= v38)
                v222 = -(uint64_t)(int)v569;
              else
                v222 = 0;
              v40 = v221 + 4 * v222;
              v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
              --v215;
            }
            while (v215);
            v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
            v223 = v580;
            v224 = v580 + 4 * v577;
            v225 = -(uint64_t)(v577 * v564);
            if (v224 < v573)
              v225 = 0;
            v226 = v224 + 4 * v225;
            v227 = v38 + 4 * v225 + 4 * v577;
            if (v573)
            {
              v38 = v227;
              v223 = v226;
            }
            v580 = v223;
            if (v573)
              v40 = v226;
            else
              v40 += 4 * v577;
            if (!--v582)
              goto LABEL_764;
          }
        case 19:
          v565 = v29;
          v566 = v30;
          v567 = v31;
          while (1)
          {
            v228 = v583[0];
            do
            {
              if (!v37)
              {
                v229 = 255;
LABEL_427:
                v230 = v41->i32[0];
                if (v17)
                {
                  v231 = HIBYTE(v230);
                  v232 = *(_DWORD *)v40;
                  if (!HIBYTE(v230))
                  {
                    v233 = v232 & 0xFFFFFF | (v229 << 24);
LABEL_432:
                    v41->i32[0] = v233;
                    goto LABEL_433;
                  }
                }
                else
                {
                  v232 = *(_DWORD *)v40;
                  v231 = 255;
                }
                v233 = PDAcolorburnPDA_13355(v230, v231, v232, v229);
                goto LABEL_432;
              }
              v229 = HIBYTE(*(_DWORD *)v40);
              if (v229)
                goto LABEL_427;
LABEL_433:
              v234 = v40 + 4 * v563;
              if (v234 >= v38)
                v235 = -(uint64_t)(int)v569;
              else
                v235 = 0;
              v40 = v234 + 4 * v235;
              v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
              --v228;
            }
            while (v228);
            v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
            v236 = v580;
            v237 = v580 + 4 * v577;
            v238 = -(uint64_t)(v577 * v564);
            if (v237 < v573)
              v238 = 0;
            v239 = v237 + 4 * v238;
            v240 = v38 + 4 * v238 + 4 * v577;
            if (v573)
            {
              v38 = v240;
              v236 = v239;
            }
            v580 = v236;
            if (v573)
              v40 = v239;
            else
              v40 += 4 * v577;
            if (!--v582)
              goto LABEL_764;
          }
        case 20:
          v565 = v29;
          v566 = v30;
          v567 = v31;
          while (1)
          {
            v241 = v583[0];
            do
            {
              if (!v37)
              {
                v242 = 255;
LABEL_452:
                v243 = v41->i32[0];
                if (v17)
                {
                  v244 = HIBYTE(v243);
                  v245 = *(_DWORD *)v40;
                  if (!HIBYTE(v243))
                  {
                    v246 = v245 & 0xFFFFFF | (v242 << 24);
LABEL_457:
                    v41->i32[0] = v246;
                    goto LABEL_458;
                  }
                }
                else
                {
                  v245 = *(_DWORD *)v40;
                  v244 = 255;
                }
                v246 = PDAsoftlightPDA_13357(v243, v244, v245, v242);
                goto LABEL_457;
              }
              v242 = HIBYTE(*(_DWORD *)v40);
              if (v242)
                goto LABEL_452;
LABEL_458:
              v247 = v40 + 4 * v563;
              if (v247 >= v38)
                v248 = -(uint64_t)(int)v569;
              else
                v248 = 0;
              v40 = v247 + 4 * v248;
              v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
              --v241;
            }
            while (v241);
            v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
            v249 = v580;
            v250 = v580 + 4 * v577;
            v251 = -(uint64_t)(v577 * v564);
            if (v250 < v573)
              v251 = 0;
            v252 = v250 + 4 * v251;
            v253 = v38 + 4 * v251 + 4 * v577;
            if (v573)
            {
              v38 = v253;
              v249 = v252;
            }
            v580 = v249;
            if (v573)
              v40 = v252;
            else
              v40 += 4 * v577;
            if (!--v582)
              goto LABEL_764;
          }
        case 21:
          v565 = v29;
          v566 = v30;
          v567 = v31;
          while (1)
          {
            v254 = v583[0];
            do
            {
              if (!v37)
              {
                v255 = 255;
LABEL_477:
                v256 = v41->i32[0];
                if (v17)
                {
                  v257 = HIBYTE(v256);
                  v258 = *(_DWORD *)v40;
                  if (!HIBYTE(v256))
                  {
                    v259 = v258 & 0xFFFFFF | (v255 << 24);
LABEL_482:
                    v41->i32[0] = v259;
                    goto LABEL_483;
                  }
                }
                else
                {
                  v258 = *(_DWORD *)v40;
                  v257 = 255;
                }
                v259 = PDAhardlightPDA_13356(v256, v257, v258, v255);
                goto LABEL_482;
              }
              v255 = HIBYTE(*(_DWORD *)v40);
              if (v255)
                goto LABEL_477;
LABEL_483:
              v260 = v40 + 4 * v563;
              if (v260 >= v38)
                v261 = -(uint64_t)(int)v569;
              else
                v261 = 0;
              v40 = v260 + 4 * v261;
              v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
              --v254;
            }
            while (v254);
            v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
            v262 = v580;
            v263 = v580 + 4 * v577;
            v264 = -(uint64_t)(v577 * v564);
            if (v263 < v573)
              v264 = 0;
            v265 = v263 + 4 * v264;
            v266 = v38 + 4 * v264 + 4 * v577;
            if (v573)
            {
              v38 = v266;
              v262 = v265;
            }
            v580 = v262;
            if (v573)
              v40 = v265;
            else
              v40 += 4 * v577;
            if (!--v582)
              goto LABEL_764;
          }
        case 22:
          v565 = v29;
          v566 = v30;
          v567 = v31;
          while (1)
          {
            v267 = v583[0];
            do
            {
              if (!v37)
              {
                v268 = 255;
LABEL_502:
                v269 = v41->i32[0];
                if (v17)
                {
                  v270 = HIBYTE(v269);
                  v271 = *(_DWORD *)v40;
                  if (!HIBYTE(v269))
                  {
                    v272 = v271 & 0xFFFFFF | (v268 << 24);
LABEL_507:
                    v41->i32[0] = v272;
                    goto LABEL_508;
                  }
                }
                else
                {
                  v271 = *(_DWORD *)v40;
                  v270 = 255;
                }
                v272 = PDAdifferencePDA_13358(v269, v270, v271, v268);
                goto LABEL_507;
              }
              v268 = HIBYTE(*(_DWORD *)v40);
              if (v268)
                goto LABEL_502;
LABEL_508:
              v273 = v40 + 4 * v563;
              if (v273 >= v38)
                v274 = -(uint64_t)(int)v569;
              else
                v274 = 0;
              v40 = v273 + 4 * v274;
              v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
              --v267;
            }
            while (v267);
            v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
            v275 = v580;
            v276 = v580 + 4 * v577;
            v277 = -(uint64_t)(v577 * v564);
            if (v276 < v573)
              v277 = 0;
            v278 = v276 + 4 * v277;
            v279 = v38 + 4 * v277 + 4 * v577;
            if (v573)
            {
              v38 = v279;
              v275 = v278;
            }
            v580 = v275;
            if (v573)
              v40 = v278;
            else
              v40 += 4 * v577;
            if (!--v582)
              goto LABEL_764;
          }
        case 23:
          v565 = v29;
          v566 = v30;
          v567 = v31;
          while (1)
          {
            v280 = v583[0];
            do
            {
              if (!v37)
              {
                v281 = 255;
LABEL_527:
                v282 = v41->i32[0];
                if (v17)
                {
                  v283 = HIBYTE(v282);
                  v284 = *(_DWORD *)v40;
                  if (!HIBYTE(v282))
                  {
                    v285 = v284 & 0xFFFFFF | (v281 << 24);
LABEL_532:
                    v41->i32[0] = v285;
                    goto LABEL_533;
                  }
                }
                else
                {
                  v284 = *(_DWORD *)v40;
                  v283 = 255;
                }
                v285 = PDAexclusionPDA_13359(v282, v283, v284, v281);
                goto LABEL_532;
              }
              v281 = HIBYTE(*(_DWORD *)v40);
              if (v281)
                goto LABEL_527;
LABEL_533:
              v286 = v40 + 4 * v563;
              if (v286 >= v38)
                v287 = -(uint64_t)(int)v569;
              else
                v287 = 0;
              v40 = v286 + 4 * v287;
              v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
              --v280;
            }
            while (v280);
            v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
            v288 = v580;
            v289 = v580 + 4 * v577;
            v290 = -(uint64_t)(v577 * v564);
            if (v289 < v573)
              v290 = 0;
            v291 = v289 + 4 * v290;
            v292 = v38 + 4 * v290 + 4 * v577;
            if (v573)
            {
              v38 = v292;
              v288 = v291;
            }
            v580 = v288;
            if (v573)
              v40 = v291;
            else
              v40 += 4 * v577;
            if (!--v582)
              goto LABEL_764;
          }
        case 24:
          v565 = v29;
          v566 = v30;
          v567 = v31;
          while (1)
          {
            v293 = v583[0];
            do
            {
              if (!v37)
              {
                v294 = 255;
LABEL_552:
                v295 = v41->i32[0];
                if (v17)
                {
                  v296 = HIBYTE(v295);
                  v297 = *(_DWORD *)v40;
                  if (!HIBYTE(v295))
                  {
                    v298 = v297 & 0xFFFFFF | (v294 << 24);
LABEL_557:
                    v41->i32[0] = v298;
                    goto LABEL_558;
                  }
                }
                else
                {
                  v297 = *(_DWORD *)v40;
                  v296 = 255;
                }
                v298 = PDAhuePDA_13360(v295, v296, v297, v294);
                goto LABEL_557;
              }
              v294 = HIBYTE(*(_DWORD *)v40);
              if (v294)
                goto LABEL_552;
LABEL_558:
              v299 = v40 + 4 * v563;
              if (v299 >= v38)
                v300 = -(uint64_t)(int)v569;
              else
                v300 = 0;
              v40 = v299 + 4 * v300;
              v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
              --v293;
            }
            while (v293);
            v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
            v301 = v580;
            v302 = v580 + 4 * v577;
            v303 = -(uint64_t)(v577 * v564);
            if (v302 < v573)
              v303 = 0;
            v304 = v302 + 4 * v303;
            v305 = v38 + 4 * v303 + 4 * v577;
            if (v573)
            {
              v38 = v305;
              v301 = v304;
            }
            v580 = v301;
            if (v573)
              v40 = v304;
            else
              v40 += 4 * v577;
            if (!--v582)
              goto LABEL_764;
          }
        case 25:
          v565 = v29;
          v566 = v30;
          v567 = v31;
          while (1)
          {
            v306 = v583[0];
            do
            {
              if (!v37)
              {
                v307 = 255;
LABEL_577:
                v308 = v41->i32[0];
                if (v17)
                {
                  v309 = HIBYTE(v308);
                  v310 = *(_DWORD *)v40;
                  if (!HIBYTE(v308))
                  {
                    v311 = v310 & 0xFFFFFF | (v307 << 24);
LABEL_582:
                    v41->i32[0] = v311;
                    goto LABEL_583;
                  }
                }
                else
                {
                  v310 = *(_DWORD *)v40;
                  v309 = 255;
                }
                v311 = PDAsaturationPDA_13361(v308, v309, v310, v307);
                goto LABEL_582;
              }
              v307 = HIBYTE(*(_DWORD *)v40);
              if (v307)
                goto LABEL_577;
LABEL_583:
              v312 = v40 + 4 * v563;
              if (v312 >= v38)
                v313 = -(uint64_t)(int)v569;
              else
                v313 = 0;
              v40 = v312 + 4 * v313;
              v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
              --v306;
            }
            while (v306);
            v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
            v314 = v580;
            v315 = v580 + 4 * v577;
            v316 = -(uint64_t)(v577 * v564);
            if (v315 < v573)
              v316 = 0;
            v317 = v315 + 4 * v316;
            v318 = v38 + 4 * v316 + 4 * v577;
            if (v573)
            {
              v38 = v318;
              v314 = v317;
            }
            v580 = v314;
            if (v573)
              v40 = v317;
            else
              v40 += 4 * v577;
            if (!--v582)
              goto LABEL_764;
          }
        case 26:
          v565 = v29;
          v566 = v30;
          v567 = v31;
          while (1)
          {
            v319 = v583[0];
            do
            {
              if (v37)
              {
                v320 = HIBYTE(*(_DWORD *)v40);
                if (!v320)
                  goto LABEL_607;
                if (!v17)
                {
LABEL_604:
                  v323 = *(_DWORD *)v40;
                  v321 = v41->i32[0];
                  v322 = 255;
LABEL_605:
                  v324 = PDAluminosityPDA_13362(v323, v320, v321, v322);
                  goto LABEL_606;
                }
              }
              else
              {
                v320 = 255;
                if (!v17)
                  goto LABEL_604;
              }
              v321 = v41->i32[0];
              v322 = HIBYTE(v41->i32[0]);
              v323 = *(_DWORD *)v40;
              if (v322)
                goto LABEL_605;
              v324 = v323 & 0xFFFFFF | (v320 << 24);
LABEL_606:
              v41->i32[0] = v324;
LABEL_607:
              v325 = v40 + 4 * v563;
              if (v325 >= v38)
                v326 = -(uint64_t)(int)v569;
              else
                v326 = 0;
              v40 = v325 + 4 * v326;
              v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
              --v319;
            }
            while (v319);
            v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
            v327 = v580;
            v328 = v580 + 4 * v577;
            v329 = -(uint64_t)(v577 * v564);
            if (v328 < v573)
              v329 = 0;
            v330 = v328 + 4 * v329;
            v331 = v38 + 4 * v329 + 4 * v577;
            if (v573)
            {
              v38 = v331;
              v327 = v330;
            }
            v580 = v327;
            if (v573)
              v40 = v330;
            else
              v40 += 4 * v577;
            if (!--v582)
              goto LABEL_764;
          }
        case 27:
          v565 = v29;
          v566 = v30;
          v567 = v31;
          while (1)
          {
            v332 = v583[0];
            do
            {
              if (!v37)
              {
                v333 = 255;
LABEL_626:
                v334 = v41->i32[0];
                if (v17)
                {
                  v335 = HIBYTE(v334);
                  v336 = *(_DWORD *)v40;
                  if (!HIBYTE(v334))
                  {
                    v337 = v336 & 0xFFFFFF | (v333 << 24);
LABEL_631:
                    v41->i32[0] = v337;
                    goto LABEL_632;
                  }
                }
                else
                {
                  v336 = *(_DWORD *)v40;
                  v335 = 255;
                }
                v337 = PDAluminosityPDA_13362(v334, v335, v336, v333);
                goto LABEL_631;
              }
              v333 = HIBYTE(*(_DWORD *)v40);
              if (v333)
                goto LABEL_626;
LABEL_632:
              v338 = v40 + 4 * v563;
              if (v338 >= v38)
                v339 = -(uint64_t)(int)v569;
              else
                v339 = 0;
              v40 = v338 + 4 * v339;
              v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
              --v332;
            }
            while (v332);
            v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
            v340 = v580;
            v341 = v580 + 4 * v577;
            v342 = -(uint64_t)(v577 * v564);
            if (v341 < v573)
              v342 = 0;
            v343 = v341 + 4 * v342;
            v344 = v38 + 4 * v342 + 4 * v577;
            if (v573)
            {
              v38 = v344;
              v340 = v343;
            }
            v580 = v340;
            if (v573)
              v40 = v343;
            else
              v40 += 4 * v577;
            if (!--v582)
              goto LABEL_764;
          }
        case 28:
          v565 = v29;
          v566 = v30;
          v567 = v31;
          while (1)
          {
            v345 = v583[0];
            do
            {
              if (!v37)
              {
                v346 = 255;
LABEL_651:
                v347 = v41->i32[0];
                if (v17)
                {
                  v348 = HIBYTE(v347);
                  v349 = *(_DWORD *)v40;
                  if (!HIBYTE(v347))
                  {
                    v350 = v349 & 0xFFFFFF | (v346 << 24);
LABEL_656:
                    v41->i32[0] = v350;
                    goto LABEL_657;
                  }
                }
                else
                {
                  v349 = *(_DWORD *)v40;
                  v348 = 255;
                }
                v350 = PDAtranspose_huePDA_13363(v347, v348, v349, v346);
                goto LABEL_656;
              }
              v346 = HIBYTE(*(_DWORD *)v40);
              if (v346)
                goto LABEL_651;
LABEL_657:
              v351 = v40 + 4 * v563;
              if (v351 >= v38)
                v352 = -(uint64_t)(int)v569;
              else
                v352 = 0;
              v40 = v351 + 4 * v352;
              v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
              --v345;
            }
            while (v345);
            v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
            v353 = v580;
            v354 = v580 + 4 * v577;
            v355 = -(uint64_t)(v577 * v564);
            if (v354 < v573)
              v355 = 0;
            v356 = v354 + 4 * v355;
            v357 = v38 + 4 * v355 + 4 * v577;
            if (v573)
            {
              v38 = v357;
              v353 = v356;
            }
            v580 = v353;
            if (v573)
              v40 = v356;
            else
              v40 += 4 * v577;
            if (!--v582)
              goto LABEL_764;
          }
        case 29:
          v565 = v29;
          v566 = v30;
          v567 = v31;
          while (1)
          {
            v358 = v583[0];
            do
            {
              if (!v37)
              {
                v359 = 255;
LABEL_676:
                v360 = v41->i32[0];
                if (v17)
                {
                  v361 = HIBYTE(v360);
                  v362 = *(_DWORD *)v40;
                  if (!HIBYTE(v360))
                  {
                    v363 = v362 & 0xFFFFFF | (v359 << 24);
LABEL_681:
                    v41->i32[0] = v363;
                    goto LABEL_682;
                  }
                }
                else
                {
                  v362 = *(_DWORD *)v40;
                  v361 = 255;
                }
                v363 = PDAtranspose_saturationPDA_13364(v360, v361, v362, v359);
                goto LABEL_681;
              }
              v359 = HIBYTE(*(_DWORD *)v40);
              if (v359)
                goto LABEL_676;
LABEL_682:
              v364 = v40 + 4 * v563;
              if (v364 >= v38)
                v365 = -(uint64_t)(int)v569;
              else
                v365 = 0;
              v40 = v364 + 4 * v365;
              v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
              --v358;
            }
            while (v358);
            v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
            v366 = v580;
            v367 = v580 + 4 * v577;
            v368 = -(uint64_t)(v577 * v564);
            if (v367 < v573)
              v368 = 0;
            v369 = v367 + 4 * v368;
            v370 = v38 + 4 * v368 + 4 * v577;
            if (v573)
            {
              v38 = v370;
              v366 = v369;
            }
            v580 = v366;
            if (v573)
              v40 = v369;
            else
              v40 += 4 * v577;
            if (!--v582)
              goto LABEL_764;
          }
        case 30:
          v565 = v29;
          v566 = v30;
          v567 = v31;
          while (1)
          {
            v371 = v583[0];
            do
            {
              if (v37)
              {
                v372 = HIBYTE(*(_DWORD *)v40);
                if (!v372)
                  goto LABEL_706;
                if (!v17)
                {
LABEL_703:
                  v375 = *(_DWORD *)v40;
                  v373 = v41->i32[0];
                  v374 = 255;
LABEL_704:
                  v376 = PDAtranspose_luminosityPDA_13365(v375, v372, v373, v374);
                  goto LABEL_705;
                }
              }
              else
              {
                v372 = 255;
                if (!v17)
                  goto LABEL_703;
              }
              v373 = v41->i32[0];
              v374 = HIBYTE(v41->i32[0]);
              v375 = *(_DWORD *)v40;
              if (v374)
                goto LABEL_704;
              v376 = v375 & 0xFFFFFF | (v372 << 24);
LABEL_705:
              v41->i32[0] = v376;
LABEL_706:
              v377 = v40 + 4 * v563;
              if (v377 >= v38)
                v378 = -(uint64_t)(int)v569;
              else
                v378 = 0;
              v40 = v377 + 4 * v378;
              v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
              --v371;
            }
            while (v371);
            v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
            v379 = v580;
            v380 = v580 + 4 * v577;
            v381 = -(uint64_t)(v577 * v564);
            if (v380 < v573)
              v381 = 0;
            v382 = v380 + 4 * v381;
            v383 = v38 + 4 * v381 + 4 * v577;
            if (v573)
            {
              v38 = v383;
              v379 = v382;
            }
            v580 = v379;
            if (v573)
              v40 = v382;
            else
              v40 += 4 * v577;
            if (!--v582)
              goto LABEL_764;
          }
        case 31:
          v565 = v29;
          v566 = v30;
          v567 = v31;
          break;
        default:
          goto LABEL_765;
      }
      break;
    }
LABEL_720:
    v384 = v583[0];
    while (1)
    {
      if (v37)
      {
        v385 = HIBYTE(*(_DWORD *)v40);
        if (!v385)
          goto LABEL_731;
      }
      else
      {
        v385 = 255;
      }
      v386 = v41->i32[0];
      if (!v17)
        break;
      v387 = HIBYTE(v386);
      v388 = *(_DWORD *)v40;
      if (HIBYTE(v386))
        goto LABEL_729;
      v389 = v388 & 0xFFFFFF | (v385 << 24);
LABEL_730:
      v41->i32[0] = v389;
LABEL_731:
      v390 = v40 + 4 * v563;
      if (v390 >= v38)
        v391 = -(uint64_t)(int)v569;
      else
        v391 = 0;
      v40 = v390 + 4 * v391;
      v41 = (uint32x2_t *)((char *)v41 + 4 * v563);
      if (!--v384)
      {
        v41 = (uint32x2_t *)((char *)v41 + 4 * v576);
        v392 = v580;
        v393 = v580 + 4 * v577;
        v394 = -(uint64_t)(v577 * v564);
        if (v393 < v573)
          v394 = 0;
        v395 = v393 + 4 * v394;
        v396 = v38 + 4 * v394 + 4 * v577;
        if (v573)
        {
          v38 = v396;
          v392 = v395;
        }
        v580 = v392;
        if (v573)
          v40 = v395;
        else
          v40 += 4 * v577;
        if (!--v582)
          goto LABEL_764;
        goto LABEL_720;
      }
    }
    v388 = *(_DWORD *)v40;
    v387 = 255;
LABEL_729:
    v389 = PDAtranspose_luminosityPDA_13365(v386, v387, v388, v385);
    goto LABEL_730;
  }
  if (BYTE1(v15) != 4)
    goto LABEL_36;
  v582 = *(_DWORD *)(v12 + 8);
  v583[0] = v20;
  v25 = **(_DWORD **)(v12 + 88);
  v571 = *(int *)(v12 + 28);
  v579 = v571 >> 2;
  v26 = (unsigned int *)(*(_QWORD *)(v12 + 40) + 4 * (*(int *)(v12 + 12) + (v571 >> 2) * *(int *)(v12 + 16)));
  v575 = v26;
  if (v23)
  {
    shape_enum_clip_alloc((uint64_t)a1, a2, v23, 1, 1, 1, *(_DWORD *)(v12 + 104), *(_DWORD *)(v12 + 108), v20, v22);
    v18 = v27;
    if (v27)
      goto LABEL_1101;
    return 1;
  }
  v578 = 0;
  while (2)
  {
    v439 = v579 - (int)v20;
    v440 = v20;
    switch((int)v18)
    {
      case 0:
        v441 = v582;
        v442 = 4 * v20;
        v443 = v571 & 0xFFFFFFFC;
        v444 = 0;
        goto LABEL_858;
      case 1:
        v444 = 0;
        v452 = *(int **)(v560 + 88);
        if (v452)
          v444 = *v452;
        v442 = 4 * v20;
        v441 = v582;
        v443 = v571 & 0xFFFFFFFC;
LABEL_858:
        CGBlt_fillBytes(v442, v441, v444, (char *)v26, v443);
        goto LABEL_1099;
      case 2:
        v574 = v20 & 3;
        v453 = v582;
        v454 = (v20 >> 2) + 1;
        do
        {
          if ((int)v20 < 4)
          {
            v458 = v20;
          }
          else
          {
            v455 = v454;
            do
            {
              DplusDM_13347(v26, v25, *v26, ~HIBYTE(v25));
              DplusDM_13347(v26 + 1, v25, v26[1], ~HIBYTE(v25));
              DplusDM_13347(v26 + 2, v25, v26[2], ~HIBYTE(v25));
              v457 = v26[3];
              v456 = v26 + 3;
              DplusDM_13347(v456, v25, v457, ~HIBYTE(v25));
              v26 = v456 + 1;
              --v455;
            }
            while (v455 > 1);
            v458 = v574;
          }
          if (v458 < 1)
          {
            v460 = v26;
          }
          else
          {
            v459 = v458 + 1;
            v460 = v26;
            do
            {
              v461 = *v460++;
              DplusDM_13347(v26, v25, v461, ~HIBYTE(v25));
              --v459;
              v26 = v460;
            }
            while (v459 > 1);
          }
          v26 = &v460[v439];
          v582 = --v453;
          LODWORD(v20) = v440;
        }
        while (v453);
        goto LABEL_1099;
      case 3:
        do
        {
          v445 = v583[0];
          do
          {
            v446 = HIBYTE(*v26);
            if (v446)
            {
              v447 = v25;
              if (v446 != 255)
                v447 = PDM_13345(v25, v446);
            }
            else
            {
              v447 = 0;
            }
            *v26++ = v447;
            --v445;
          }
          while (v445);
          v26 += v439;
          --v582;
        }
        while (v582);
        goto LABEL_1099;
      case 4:
        do
        {
          v448 = v583[0];
          do
          {
            v449 = *((unsigned __int8 *)v26 + 3) ^ 0xFF;
            if (v449)
            {
              v450 = v25;
              if (v449 != 255)
                v450 = PDM_13345(v25, v449);
            }
            else
            {
              v450 = 0;
            }
            *v26++ = v450;
            --v448;
          }
          while (v448);
          v26 += v439;
          --v582;
        }
        while (v582);
        goto LABEL_1099;
      case 5:
        v462 = v582;
        do
        {
          v463 = v20;
          v464 = v26;
          do
          {
            v465 = *v464++;
            DMplusDM_13346(v26, v25, HIBYTE(v465), v465, ~HIBYTE(v25));
            v26 = v464;
            --v463;
          }
          while (v463);
          v26 = &v464[v439];
          v582 = --v462;
          LODWORD(v20) = v440;
        }
        while (v462);
        goto LABEL_1099;
      case 6:
        do
        {
          v466 = v583[0];
          do
          {
            if (~HIBYTE(*v26))
            {
              if (~HIBYTE(*v26) == 255)
                *v26 = v25;
              else
                DplusDM_13347(v26, *v26, v25, ~HIBYTE(*v26));
            }
            ++v26;
            --v466;
          }
          while (v466);
          v26 += v439;
          --v582;
        }
        while (v582);
        goto LABEL_1099;
      case 7:
        do
        {
          v467 = v583[0];
          do
          {
            *v26 = PDM_13345(*v26, HIBYTE(v25));
            ++v26;
            --v467;
          }
          while (v467);
          v26 += v439;
          --v582;
        }
        while (v582);
        goto LABEL_1099;
      case 8:
        do
        {
          v451 = v583[0];
          do
          {
            *v26 = PDM_13345(*v26, ~HIBYTE(v25));
            ++v26;
            --v451;
          }
          while (v451);
          v26 += v439;
          --v582;
        }
        while (v582);
        goto LABEL_1099;
      case 9:
        v468 = v582;
        do
        {
          v469 = v20;
          v470 = v26;
          do
          {
            v471 = *v470++;
            DMplusDM_13346(v26, v25, ~v471 >> 24, v471, HIBYTE(v25));
            v26 = v470;
            --v469;
          }
          while (v469);
          v26 = &v470[v439];
          v582 = --v468;
          LODWORD(v20) = v440;
        }
        while (v468);
        goto LABEL_1099;
      case 10:
        v472 = v582;
        do
        {
          v473 = v20;
          v474 = v26;
          do
          {
            v475 = *v474++;
            DMplusDM_13346(v26, v25, ~v475 >> 24, v475, ~HIBYTE(v25));
            v26 = v474;
            --v473;
          }
          while (v473);
          v26 = &v474[v439];
          v582 = --v472;
          LODWORD(v20) = v440;
        }
        while (v472);
        goto LABEL_1099;
      case 11:
        v476 = v582;
        do
        {
          v477 = v20;
          v478 = v26;
          do
          {
            v480 = *v478++;
            v479 = v480;
            v481 = HIBYTE(v480);
            if (!v17)
              LOBYTE(v481) = -1;
            DAplusdDA_13348(v26, v479, v481, v25, HIBYTE(v25));
            v26 = v478;
            --v477;
          }
          while (v477);
          v26 = &v478[v439];
          v582 = --v476;
          LODWORD(v20) = v440;
        }
        while (v476);
        goto LABEL_1099;
      case 12:
        do
        {
          v483 = v583[0];
          do
          {
            v482 = (v25 >> 8) & 0xFF00FF;
            *v26 = ((((*v26 >> 8) & 0xFF00FF) + v482) << 8) & 0xFF00FF00 | ((*v26 & 0xFF00FF) + (v25 & 0xFF00FF)) & 0xFF00FF | (15 * ((((*v26 >> 8) & 0xFF00FF) + v482) & 0x1000100 | (((*v26 & 0xFF00FF) + (v25 & 0xFF00FF)) >> 8) & 0x10001)) | (240 * ((((*v26 >> 8) & 0xFF00FF) + v482) & 0x1000100 | (((*v26 & 0xFF00FF) + (v25 & 0xFF00FF)) >> 8) & 0x10001));
            ++v26;
            --v483;
          }
          while (v483);
          v26 += v439;
          --v582;
        }
        while (v582);
        goto LABEL_1099;
      case 13:
        if (!HIBYTE(v25))
          goto LABEL_1099;
        while (1)
        {
          v484 = v583[0];
          do
          {
            v485 = *v26;
            if (!v17)
            {
              v486 = 255;
LABEL_916:
              v487 = PDAmultiplyPDA_13349(v485, v486, v25, HIBYTE(v25));
              goto LABEL_917;
            }
            v486 = HIBYTE(v485);
            v487 = v25;
            if (HIBYTE(v485))
              goto LABEL_916;
LABEL_917:
            *v26++ = v487;
            --v484;
          }
          while (v484);
          v26 += v439;
          if (!--v582)
            goto LABEL_1099;
        }
      case 14:
        if (!HIBYTE(v25))
          goto LABEL_1099;
        while (1)
        {
          v488 = v583[0];
          do
          {
            v489 = *v26;
            if (!v17)
            {
              v490 = 255;
LABEL_926:
              v491 = PDAscreenPDA_13350(v489, v490, v25, HIBYTE(v25));
              goto LABEL_927;
            }
            v490 = HIBYTE(v489);
            v491 = v25;
            if (HIBYTE(v489))
              goto LABEL_926;
LABEL_927:
            *v26++ = v491;
            --v488;
          }
          while (v488);
          v26 += v439;
          if (!--v582)
            goto LABEL_1099;
        }
      case 15:
        if (!HIBYTE(v25))
          goto LABEL_1099;
        while (1)
        {
          v492 = v583[0];
          do
          {
            v493 = *v26;
            if (!v17)
            {
              v494 = 255;
LABEL_936:
              v495 = PDAoverlayPDA_13351(v493, v494, v25, HIBYTE(v25));
              goto LABEL_937;
            }
            v494 = HIBYTE(v493);
            v495 = v25;
            if (HIBYTE(v493))
              goto LABEL_936;
LABEL_937:
            *v26++ = v495;
            --v492;
          }
          while (v492);
          v26 += v439;
          if (!--v582)
            goto LABEL_1099;
        }
      case 16:
        if (!HIBYTE(v25))
          goto LABEL_1099;
        while (1)
        {
          v496 = v583[0];
          do
          {
            v497 = *v26;
            if (!v17)
            {
              v498 = 255;
LABEL_946:
              v499 = PDAdarkenPDA_13353(v497, v498, v25, HIBYTE(v25));
              goto LABEL_947;
            }
            v498 = HIBYTE(v497);
            v499 = v25;
            if (HIBYTE(v497))
              goto LABEL_946;
LABEL_947:
            *v26++ = v499;
            --v496;
          }
          while (v496);
          v26 += v439;
          if (!--v582)
            goto LABEL_1099;
        }
      case 17:
        if (!HIBYTE(v25))
          goto LABEL_1099;
        while (1)
        {
          v500 = v583[0];
          do
          {
            v501 = *v26;
            if (!v17)
            {
              v502 = 255;
LABEL_956:
              v503 = PDAlightenPDA_13352(v501, v502, v25, HIBYTE(v25));
              goto LABEL_957;
            }
            v502 = HIBYTE(v501);
            v503 = v25;
            if (HIBYTE(v501))
              goto LABEL_956;
LABEL_957:
            *v26++ = v503;
            --v500;
          }
          while (v500);
          v26 += v439;
          if (!--v582)
            goto LABEL_1099;
        }
      case 18:
        if (!HIBYTE(v25))
          goto LABEL_1099;
        while (1)
        {
          v504 = v583[0];
          do
          {
            v505 = *v26;
            if (!v17)
            {
              v506 = 255;
LABEL_966:
              v507 = PDAcolordodgePDA_13354(v505, v506, v25, HIBYTE(v25));
              goto LABEL_967;
            }
            v506 = HIBYTE(v505);
            v507 = v25;
            if (HIBYTE(v505))
              goto LABEL_966;
LABEL_967:
            *v26++ = v507;
            --v504;
          }
          while (v504);
          v26 += v439;
          if (!--v582)
            goto LABEL_1099;
        }
      case 19:
        if (!HIBYTE(v25))
          goto LABEL_1099;
        while (1)
        {
          v508 = v583[0];
          do
          {
            v509 = *v26;
            if (!v17)
            {
              v510 = 255;
LABEL_976:
              v511 = PDAcolorburnPDA_13355(v509, v510, v25, HIBYTE(v25));
              goto LABEL_977;
            }
            v510 = HIBYTE(v509);
            v511 = v25;
            if (HIBYTE(v509))
              goto LABEL_976;
LABEL_977:
            *v26++ = v511;
            --v508;
          }
          while (v508);
          v26 += v439;
          if (!--v582)
            goto LABEL_1099;
        }
      case 20:
        if (!HIBYTE(v25))
          goto LABEL_1099;
        while (1)
        {
          v512 = v583[0];
          do
          {
            v513 = *v26;
            if (!v17)
            {
              v514 = 255;
LABEL_986:
              v515 = PDAsoftlightPDA_13357(v513, v514, v25, HIBYTE(v25));
              goto LABEL_987;
            }
            v514 = HIBYTE(v513);
            v515 = v25;
            if (HIBYTE(v513))
              goto LABEL_986;
LABEL_987:
            *v26++ = v515;
            --v512;
          }
          while (v512);
          v26 += v439;
          if (!--v582)
            goto LABEL_1099;
        }
      case 21:
        if (!HIBYTE(v25))
          goto LABEL_1099;
        while (1)
        {
          v516 = v583[0];
          do
          {
            v517 = *v26;
            if (!v17)
            {
              v518 = 255;
LABEL_996:
              v519 = PDAhardlightPDA_13356(v517, v518, v25, HIBYTE(v25));
              goto LABEL_997;
            }
            v518 = HIBYTE(v517);
            v519 = v25;
            if (HIBYTE(v517))
              goto LABEL_996;
LABEL_997:
            *v26++ = v519;
            --v516;
          }
          while (v516);
          v26 += v439;
          if (!--v582)
            goto LABEL_1099;
        }
      case 22:
        if (!HIBYTE(v25))
          goto LABEL_1099;
        while (1)
        {
          v520 = v583[0];
          do
          {
            v521 = *v26;
            if (!v17)
            {
              v522 = 255;
LABEL_1006:
              v523 = PDAdifferencePDA_13358(v521, v522, v25, HIBYTE(v25));
              goto LABEL_1007;
            }
            v522 = HIBYTE(v521);
            v523 = v25;
            if (HIBYTE(v521))
              goto LABEL_1006;
LABEL_1007:
            *v26++ = v523;
            --v520;
          }
          while (v520);
          v26 += v439;
          if (!--v582)
            goto LABEL_1099;
        }
      case 23:
        if (!HIBYTE(v25))
          goto LABEL_1099;
        while (1)
        {
          v524 = v583[0];
          do
          {
            v525 = *v26;
            if (!v17)
            {
              v526 = 255;
LABEL_1016:
              v527 = PDAexclusionPDA_13359(v525, v526, v25, HIBYTE(v25));
              goto LABEL_1017;
            }
            v526 = HIBYTE(v525);
            v527 = v25;
            if (HIBYTE(v525))
              goto LABEL_1016;
LABEL_1017:
            *v26++ = v527;
            --v524;
          }
          while (v524);
          v26 += v439;
          if (!--v582)
            goto LABEL_1099;
        }
      case 24:
        if (!HIBYTE(v25))
          goto LABEL_1099;
        while (1)
        {
          v528 = v583[0];
          do
          {
            v529 = *v26;
            if (!v17)
            {
              v530 = 255;
LABEL_1026:
              v531 = PDAhuePDA_13360(v529, v530, v25, HIBYTE(v25));
              goto LABEL_1027;
            }
            v530 = HIBYTE(v529);
            v531 = v25;
            if (HIBYTE(v529))
              goto LABEL_1026;
LABEL_1027:
            *v26++ = v531;
            --v528;
          }
          while (v528);
          v26 += v439;
          if (!--v582)
            goto LABEL_1099;
        }
      case 25:
        if (!HIBYTE(v25))
          goto LABEL_1099;
        while (1)
        {
          v532 = v583[0];
          do
          {
            v533 = *v26;
            if (!v17)
            {
              v534 = 255;
LABEL_1036:
              v535 = PDAsaturationPDA_13361(v533, v534, v25, HIBYTE(v25));
              goto LABEL_1037;
            }
            v534 = HIBYTE(v533);
            v535 = v25;
            if (HIBYTE(v533))
              goto LABEL_1036;
LABEL_1037:
            *v26++ = v535;
            --v532;
          }
          while (v532);
          v26 += v439;
          if (!--v582)
            goto LABEL_1099;
        }
      case 26:
        if (!HIBYTE(v25))
          goto LABEL_1099;
        while (1)
        {
          v536 = v583[0];
          do
          {
            v537 = *v26;
            if (!v17)
            {
              v538 = 255;
LABEL_1046:
              v539 = PDAluminosityPDA_13362(v25, HIBYTE(v25), v537, v538);
              goto LABEL_1047;
            }
            v538 = HIBYTE(v537);
            v539 = v25;
            if (HIBYTE(v537))
              goto LABEL_1046;
LABEL_1047:
            *v26++ = v539;
            --v536;
          }
          while (v536);
          v26 += v439;
          if (!--v582)
            goto LABEL_1099;
        }
      case 27:
        if (!HIBYTE(v25))
          goto LABEL_1099;
        while (1)
        {
          v540 = v583[0];
          do
          {
            v541 = *v26;
            if (!v17)
            {
              v542 = 255;
LABEL_1056:
              v543 = PDAluminosityPDA_13362(v541, v542, v25, HIBYTE(v25));
              goto LABEL_1057;
            }
            v542 = HIBYTE(v541);
            v543 = v25;
            if (HIBYTE(v541))
              goto LABEL_1056;
LABEL_1057:
            *v26++ = v543;
            --v540;
          }
          while (v540);
          v26 += v439;
          if (!--v582)
            goto LABEL_1099;
        }
      case 28:
        if (!HIBYTE(v25))
          goto LABEL_1099;
        while (1)
        {
          v544 = v583[0];
          do
          {
            v545 = *v26;
            if (!v17)
            {
              v546 = 255;
LABEL_1066:
              v547 = PDAtranspose_huePDA_13363(v545, v546, v25, HIBYTE(v25));
              goto LABEL_1067;
            }
            v546 = HIBYTE(v545);
            v547 = v25;
            if (HIBYTE(v545))
              goto LABEL_1066;
LABEL_1067:
            *v26++ = v547;
            --v544;
          }
          while (v544);
          v26 += v439;
          if (!--v582)
            goto LABEL_1099;
        }
      case 29:
        if (!HIBYTE(v25))
          goto LABEL_1099;
        while (1)
        {
          v548 = v583[0];
          do
          {
            v549 = *v26;
            if (!v17)
            {
              v550 = 255;
LABEL_1076:
              v551 = PDAtranspose_saturationPDA_13364(v549, v550, v25, HIBYTE(v25));
              goto LABEL_1077;
            }
            v550 = HIBYTE(v549);
            v551 = v25;
            if (HIBYTE(v549))
              goto LABEL_1076;
LABEL_1077:
            *v26++ = v551;
            --v548;
          }
          while (v548);
          v26 += v439;
          if (!--v582)
            goto LABEL_1099;
        }
      case 30:
        if (!HIBYTE(v25))
          goto LABEL_1099;
        do
        {
          v552 = v583[0];
          do
          {
            v553 = *v26;
            if (!v17)
            {
              v554 = 255;
LABEL_1086:
              v555 = PDAtranspose_luminosityPDA_13365(v25, HIBYTE(v25), v553, v554);
              goto LABEL_1087;
            }
            v554 = HIBYTE(v553);
            v555 = v25;
            if (HIBYTE(v553))
              goto LABEL_1086;
LABEL_1087:
            *v26++ = v555;
            --v552;
          }
          while (v552);
          v26 += v439;
          --v582;
        }
        while (v582);
LABEL_1099:
        v26 = v575;
        v18 = v578;
        if (!v578)
          return 1;
        v581 = 0;
LABEL_1101:
        if (shape_enum_clip_next(v18, (int *)&v581 + 1, &v581, v583, &v582))
        {
          v578 = v18;
          v26 += v579 * (int)v581 + SHIDWORD(v581);
          LODWORD(v20) = v583[0];
          LODWORD(v18) = v570;
          continue;
        }
        v409 = (void *)v18;
LABEL_1104:
        free(v409);
        return 1;
      case 31:
        if (!HIBYTE(v25))
          goto LABEL_1099;
        break;
      default:
        goto LABEL_1099;
    }
    break;
  }
LABEL_1091:
  v556 = v583[0];
  while (1)
  {
    v557 = *v26;
    if (v17)
    {
      v558 = HIBYTE(v557);
      v559 = v25;
      if (!HIBYTE(v557))
        goto LABEL_1097;
    }
    else
    {
      v558 = 255;
    }
    v559 = PDAtranspose_luminosityPDA_13365(v557, v558, v25, HIBYTE(v25));
LABEL_1097:
    *v26++ = v559;
    if (!--v556)
    {
      v26 += v439;
      if (!--v582)
        goto LABEL_1099;
      goto LABEL_1091;
    }
  }
}

